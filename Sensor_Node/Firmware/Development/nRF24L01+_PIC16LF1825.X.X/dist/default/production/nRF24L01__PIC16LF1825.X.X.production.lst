

Microchip Technology PIC LITE Macro Assembler V2.00 build -1524193055 
                                                                                               Fri Jul 13 21:43:31 2018

Microchip Technology Omniscient Code Generator v2.00 (Free mode) build 20180527130849
     1                           	processor	16LF18325
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	stringtext1,global,class=STRCODE,delta=2
     5                           	psect	stringtext2,global,class=STRCODE,delta=2
     6                           	psect	stringtext3,global,class=STRCODE,delta=2
     7                           	psect	_romArray_text,global,class=STRCODE,delta=2
     8                           	psect	stringtext4,global,class=STRCODE,delta=2
     9                           	psect	stringtext5,global,class=STRCODE,delta=2
    10                           	psect	stringtext6,global,class=STRCODE,delta=2
    11                           	psect	stringtext7,global,class=STRCODE,delta=2
    12                           	psect	stringtext8,global,class=STRCODE,delta=2
    13                           	psect	stringtext9,global,class=STRCODE,delta=2
    14                           	psect	stringtext10,global,class=STRCODE,delta=2
    15                           	psect	stringtext11,global,class=STRCODE,delta=2
    16                           	psect	stringtext12,global,class=STRCODE,delta=2
    17                           	psect	cinit,global,class=CODE,merge=1,delta=2
    18                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    19                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    20                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    21                           	psect	clrtext,global,class=CODE,delta=2
    22                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    23                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    24                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    25                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    26                           	psect	text1,local,class=CODE,merge=1,delta=2,group=2
    27                           	psect	text2,local,class=CODE,merge=1,delta=2
    28                           	psect	text3,local,class=CODE,merge=1,delta=2
    29                           	psect	text4,local,class=CODE,merge=1,delta=2
    30                           	psect	text5,local,class=CODE,merge=1,delta=2
    31                           	psect	text6,local,class=CODE,merge=1,delta=2
    32                           	psect	text7,local,class=CODE,merge=1,delta=2
    33                           	psect	text8,local,class=CODE,merge=1,delta=2,group=2
    34                           	psect	text9,local,class=CODE,merge=1,delta=2,group=1
    35                           	psect	text10,local,class=CODE,merge=1,delta=2,group=2
    36                           	psect	text11,local,class=CODE,merge=1,delta=2,group=2
    37                           	psect	text12,local,class=CODE,merge=1,delta=2
    38                           	psect	text13,local,class=CODE,merge=1,delta=2,group=2
    39                           	psect	text14,local,class=CODE,merge=1,delta=2
    40                           	psect	text15,local,class=CODE,merge=1,delta=2
    41                           	psect	text16,local,class=CODE,merge=1,delta=2
    42                           	psect	text17,local,class=CODE,merge=1,delta=2,group=1
    43                           	psect	text18,local,class=CODE,merge=1,delta=2,group=1
    44                           	psect	text19,local,class=CODE,merge=1,delta=2
    45                           	psect	text20,local,class=CODE,merge=1,delta=2
    46                           	psect	text21,local,class=CODE,merge=1,delta=2
    47                           	psect	text22,local,class=CODE,merge=1,delta=2
    48                           	psect	intentry,global,class=CODE,delta=2
    49                           	psect	text24,local,class=CODE,merge=1,delta=2
    50                           	psect	text25,local,class=CODE,merge=1,delta=2
    51                           	psect	text26,local,class=CODE,merge=1,delta=2
    52                           	psect	text27,local,class=CODE,merge=1,delta=2
    53                           	psect	text28,local,class=CODE,merge=1,delta=2
    54                           	psect	text29,local,class=CODE,merge=1,delta=2
    55                           	psect	text30,local,class=CODE,merge=1,delta=2
    56                           	psect	text31,local,class=CODE,merge=1,delta=2
    57                           	psect	text32,local,class=CODE,merge=1,delta=2
    58                           	psect	text33,local,class=CODE,merge=1,delta=2
    59                           	psect	text34,local,class=CODE,merge=1,delta=2
    60                           	psect	text35,local,class=CODE,merge=1,delta=2
    61                           	psect	text36,local,class=CODE,merge=1,delta=2
    62                           	psect	text37,local,class=CODE,merge=1,delta=2
    63                           	psect	text38,local,class=CODE,merge=1,delta=2,group=2
    64                           	psect	text39,local,class=CODE,merge=1,delta=2
    65                           	psect	text40,local,class=CODE,merge=1,delta=2
    66                           	psect	text41,local,class=CODE,merge=1,delta=2
    67                           	psect	text42,local,class=CODE,merge=1,delta=2,group=1
    68                           	dabs	1,0x7E,2
    69  0000                     
    70                           ; Version 2.00
    71                           ; Generated 27/05/2018 GMT
    72                           ; 
    73                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
    74                           ; All rights reserved.
    75                           ; 
    76                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    77                           ; 
    78                           ; Redistribution and use in source and binary forms, with or without modification, are
    79                           ; permitted provided that the following conditions are met:
    80                           ; 
    81                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    82                           ;        conditions and the following disclaimer.
    83                           ; 
    84                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    85                           ;        of conditions and the following disclaimer in the documentation and/or other
    86                           ;        materials provided with the distribution.
    87                           ; 
    88                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    89                           ;        software without specific prior written permission.
    90                           ; 
    91                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    92                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    93                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    94                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    95                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    96                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    97                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    98                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    99                           ; 
   100                           ; 
   101                           ; Code-generator required, PIC16LF18325 Definitions
   102                           ; 
   103                           ; SFR Addresses
   104  0000                     	;# 
   105  0001                     	;# 
   106  0002                     	;# 
   107  0003                     	;# 
   108  0004                     	;# 
   109  0005                     	;# 
   110  0006                     	;# 
   111  0007                     	;# 
   112  0008                     	;# 
   113  0009                     	;# 
   114  000A                     	;# 
   115  000B                     	;# 
   116  000C                     	;# 
   117  000E                     	;# 
   118  0010                     	;# 
   119  0011                     	;# 
   120  0012                     	;# 
   121  0013                     	;# 
   122  0014                     	;# 
   123  0015                     	;# 
   124  0015                     	;# 
   125  0016                     	;# 
   126  0016                     	;# 
   127  0017                     	;# 
   128  0018                     	;# 
   129  0019                     	;# 
   130  0019                     	;# 
   131  001A                     	;# 
   132  001B                     	;# 
   133  001C                     	;# 
   134  001D                     	;# 
   135  001E                     	;# 
   136  001F                     	;# 
   137  008C                     	;# 
   138  008E                     	;# 
   139  0090                     	;# 
   140  0091                     	;# 
   141  0092                     	;# 
   142  0093                     	;# 
   143  0094                     	;# 
   144  0097                     	;# 
   145  009B                     	;# 
   146  009B                     	;# 
   147  009C                     	;# 
   148  009D                     	;# 
   149  009E                     	;# 
   150  009F                     	;# 
   151  010C                     	;# 
   152  010E                     	;# 
   153  0111                     	;# 
   154  0112                     	;# 
   155  0113                     	;# 
   156  0114                     	;# 
   157  0115                     	;# 
   158  0116                     	;# 
   159  0117                     	;# 
   160  0118                     	;# 
   161  0119                     	;# 
   162  018C                     	;# 
   163  018E                     	;# 
   164  0199                     	;# 
   165  0199                     	;# 
   166  0199                     	;# 
   167  019A                     	;# 
   168  019A                     	;# 
   169  019A                     	;# 
   170  019B                     	;# 
   171  019B                     	;# 
   172  019B                     	;# 
   173  019B                     	;# 
   174  019B                     	;# 
   175  019C                     	;# 
   176  019C                     	;# 
   177  019C                     	;# 
   178  019D                     	;# 
   179  019D                     	;# 
   180  019D                     	;# 
   181  019E                     	;# 
   182  019E                     	;# 
   183  019E                     	;# 
   184  019F                     	;# 
   185  019F                     	;# 
   186  019F                     	;# 
   187  019F                     	;# 
   188  019F                     	;# 
   189  020C                     	;# 
   190  020E                     	;# 
   191  0211                     	;# 
   192  0211                     	;# 
   193  0212                     	;# 
   194  0212                     	;# 
   195  0213                     	;# 
   196  0213                     	;# 
   197  0214                     	;# 
   198  0214                     	;# 
   199  0215                     	;# 
   200  0215                     	;# 
   201  0215                     	;# 
   202  0215                     	;# 
   203  0216                     	;# 
   204  0216                     	;# 
   205  0217                     	;# 
   206  0217                     	;# 
   207  0219                     	;# 
   208  021A                     	;# 
   209  021B                     	;# 
   210  021C                     	;# 
   211  021D                     	;# 
   212  021D                     	;# 
   213  021E                     	;# 
   214  021F                     	;# 
   215  028C                     	;# 
   216  028E                     	;# 
   217  0291                     	;# 
   218  0291                     	;# 
   219  0292                     	;# 
   220  0293                     	;# 
   221  0294                     	;# 
   222  0295                     	;# 
   223  0295                     	;# 
   224  0296                     	;# 
   225  0297                     	;# 
   226  0298                     	;# 
   227  029F                     	;# 
   228  030C                     	;# 
   229  030E                     	;# 
   230  0311                     	;# 
   231  0311                     	;# 
   232  0312                     	;# 
   233  0313                     	;# 
   234  0314                     	;# 
   235  0315                     	;# 
   236  0315                     	;# 
   237  0316                     	;# 
   238  0317                     	;# 
   239  0318                     	;# 
   240  038C                     	;# 
   241  038E                     	;# 
   242  0391                     	;# 
   243  0392                     	;# 
   244  0393                     	;# 
   245  0397                     	;# 
   246  0398                     	;# 
   247  0399                     	;# 
   248  039A                     	;# 
   249  039C                     	;# 
   250  039D                     	;# 
   251  039E                     	;# 
   252  039F                     	;# 
   253  0411                     	;# 
   254  0411                     	;# 
   255  0412                     	;# 
   256  0413                     	;# 
   257  0414                     	;# 
   258  0415                     	;# 
   259  0416                     	;# 
   260  0417                     	;# 
   261  0418                     	;# 
   262  0418                     	;# 
   263  0419                     	;# 
   264  041A                     	;# 
   265  041B                     	;# 
   266  041C                     	;# 
   267  041D                     	;# 
   268  041E                     	;# 
   269  041F                     	;# 
   270  0498                     	;# 
   271  0498                     	;# 
   272  0499                     	;# 
   273  049A                     	;# 
   274  049B                     	;# 
   275  049B                     	;# 
   276  049C                     	;# 
   277  049D                     	;# 
   278  049E                     	;# 
   279  049F                     	;# 
   280  0617                     	;# 
   281  0618                     	;# 
   282  0619                     	;# 
   283  0619                     	;# 
   284  061A                     	;# 
   285  061B                     	;# 
   286  061C                     	;# 
   287  061C                     	;# 
   288  061F                     	;# 
   289  0691                     	;# 
   290  0692                     	;# 
   291  0693                     	;# 
   292  0694                     	;# 
   293  0695                     	;# 
   294  0696                     	;# 
   295  0697                     	;# 
   296  0698                     	;# 
   297  0699                     	;# 
   298  0711                     	;# 
   299  0712                     	;# 
   300  0713                     	;# 
   301  0714                     	;# 
   302  0715                     	;# 
   303  0716                     	;# 
   304  0717                     	;# 
   305  0718                     	;# 
   306  0719                     	;# 
   307  0891                     	;# 
   308  0891                     	;# 
   309  0891                     	;# 
   310  0891                     	;# 
   311  0891                     	;# 
   312  0891                     	;# 
   313  0892                     	;# 
   314  0892                     	;# 
   315  0892                     	;# 
   316  0893                     	;# 
   317  0893                     	;# 
   318  0893                     	;# 
   319  0893                     	;# 
   320  0893                     	;# 
   321  0893                     	;# 
   322  0894                     	;# 
   323  0894                     	;# 
   324  0894                     	;# 
   325  0895                     	;# 
   326  0895                     	;# 
   327  0895                     	;# 
   328  0896                     	;# 
   329  0896                     	;# 
   330  0896                     	;# 
   331  089B                     	;# 
   332  0911                     	;# 
   333  0912                     	;# 
   334  0913                     	;# 
   335  0914                     	;# 
   336  0915                     	;# 
   337  0916                     	;# 
   338  0918                     	;# 
   339  0919                     	;# 
   340  091A                     	;# 
   341  091B                     	;# 
   342  091C                     	;# 
   343  091D                     	;# 
   344  091E                     	;# 
   345  091F                     	;# 
   346  0E0F                     	;# 
   347  0E10                     	;# 
   348  0E11                     	;# 
   349  0E12                     	;# 
   350  0E13                     	;# 
   351  0E14                     	;# 
   352  0E15                     	;# 
   353  0E16                     	;# 
   354  0E17                     	;# 
   355  0E18                     	;# 
   356  0E19                     	;# 
   357  0E1A                     	;# 
   358  0E1B                     	;# 
   359  0E1C                     	;# 
   360  0E1D                     	;# 
   361  0E1E                     	;# 
   362  0E1F                     	;# 
   363  0E20                     	;# 
   364  0E21                     	;# 
   365  0E22                     	;# 
   366  0E24                     	;# 
   367  0E25                     	;# 
   368  0E28                     	;# 
   369  0E29                     	;# 
   370  0E2A                     	;# 
   371  0E2B                     	;# 
   372  0E2C                     	;# 
   373  0E2D                     	;# 
   374  0E2E                     	;# 
   375  0E2F                     	;# 
   376  0E90                     	;# 
   377  0E91                     	;# 
   378  0E92                     	;# 
   379  0E94                     	;# 
   380  0E95                     	;# 
   381  0EA0                     	;# 
   382  0EA1                     	;# 
   383  0EA2                     	;# 
   384  0EA3                     	;# 
   385  0EA4                     	;# 
   386  0EA5                     	;# 
   387  0F0F                     	;# 
   388  0F10                     	;# 
   389  0F11                     	;# 
   390  0F12                     	;# 
   391  0F13                     	;# 
   392  0F14                     	;# 
   393  0F15                     	;# 
   394  0F16                     	;# 
   395  0F17                     	;# 
   396  0F18                     	;# 
   397  0F19                     	;# 
   398  0F1A                     	;# 
   399  0F1B                     	;# 
   400  0F1C                     	;# 
   401  0F1D                     	;# 
   402  0F1E                     	;# 
   403  0F1F                     	;# 
   404  0F20                     	;# 
   405  0F21                     	;# 
   406  0F22                     	;# 
   407  0F23                     	;# 
   408  0F24                     	;# 
   409  0F25                     	;# 
   410  0F26                     	;# 
   411  0F27                     	;# 
   412  0F28                     	;# 
   413  0F29                     	;# 
   414  0F2A                     	;# 
   415  0F2B                     	;# 
   416  0F2C                     	;# 
   417  0F2D                     	;# 
   418  0F2E                     	;# 
   419  0F2F                     	;# 
   420  0F30                     	;# 
   421  0F31                     	;# 
   422  0F32                     	;# 
   423  0F33                     	;# 
   424  0F34                     	;# 
   425  0F35                     	;# 
   426  0F36                     	;# 
   427  0F37                     	;# 
   428  0FE4                     	;# 
   429  0FE5                     	;# 
   430  0FE6                     	;# 
   431  0FE7                     	;# 
   432  0FE8                     	;# 
   433  0FE9                     	;# 
   434  0FEA                     	;# 
   435  0FEB                     	;# 
   436  0FED                     	;# 
   437  0FEE                     	;# 
   438  0FEF                     	;# 
   439  0000                     	;# 
   440  0001                     	;# 
   441  0002                     	;# 
   442  0003                     	;# 
   443  0004                     	;# 
   444  0005                     	;# 
   445  0006                     	;# 
   446  0007                     	;# 
   447  0008                     	;# 
   448  0009                     	;# 
   449  000A                     	;# 
   450  000B                     	;# 
   451  000C                     	;# 
   452  000E                     	;# 
   453  0010                     	;# 
   454  0011                     	;# 
   455  0012                     	;# 
   456  0013                     	;# 
   457  0014                     	;# 
   458  0015                     	;# 
   459  0015                     	;# 
   460  0016                     	;# 
   461  0016                     	;# 
   462  0017                     	;# 
   463  0018                     	;# 
   464  0019                     	;# 
   465  0019                     	;# 
   466  001A                     	;# 
   467  001B                     	;# 
   468  001C                     	;# 
   469  001D                     	;# 
   470  001E                     	;# 
   471  001F                     	;# 
   472  008C                     	;# 
   473  008E                     	;# 
   474  0090                     	;# 
   475  0091                     	;# 
   476  0092                     	;# 
   477  0093                     	;# 
   478  0094                     	;# 
   479  0097                     	;# 
   480  009B                     	;# 
   481  009B                     	;# 
   482  009C                     	;# 
   483  009D                     	;# 
   484  009E                     	;# 
   485  009F                     	;# 
   486  010C                     	;# 
   487  010E                     	;# 
   488  0111                     	;# 
   489  0112                     	;# 
   490  0113                     	;# 
   491  0114                     	;# 
   492  0115                     	;# 
   493  0116                     	;# 
   494  0117                     	;# 
   495  0118                     	;# 
   496  0119                     	;# 
   497  018C                     	;# 
   498  018E                     	;# 
   499  0199                     	;# 
   500  0199                     	;# 
   501  0199                     	;# 
   502  019A                     	;# 
   503  019A                     	;# 
   504  019A                     	;# 
   505  019B                     	;# 
   506  019B                     	;# 
   507  019B                     	;# 
   508  019B                     	;# 
   509  019B                     	;# 
   510  019C                     	;# 
   511  019C                     	;# 
   512  019C                     	;# 
   513  019D                     	;# 
   514  019D                     	;# 
   515  019D                     	;# 
   516  019E                     	;# 
   517  019E                     	;# 
   518  019E                     	;# 
   519  019F                     	;# 
   520  019F                     	;# 
   521  019F                     	;# 
   522  019F                     	;# 
   523  019F                     	;# 
   524  020C                     	;# 
   525  020E                     	;# 
   526  0211                     	;# 
   527  0211                     	;# 
   528  0212                     	;# 
   529  0212                     	;# 
   530  0213                     	;# 
   531  0213                     	;# 
   532  0214                     	;# 
   533  0214                     	;# 
   534  0215                     	;# 
   535  0215                     	;# 
   536  0215                     	;# 
   537  0215                     	;# 
   538  0216                     	;# 
   539  0216                     	;# 
   540  0217                     	;# 
   541  0217                     	;# 
   542  0219                     	;# 
   543  021A                     	;# 
   544  021B                     	;# 
   545  021C                     	;# 
   546  021D                     	;# 
   547  021D                     	;# 
   548  021E                     	;# 
   549  021F                     	;# 
   550  028C                     	;# 
   551  028E                     	;# 
   552  0291                     	;# 
   553  0291                     	;# 
   554  0292                     	;# 
   555  0293                     	;# 
   556  0294                     	;# 
   557  0295                     	;# 
   558  0295                     	;# 
   559  0296                     	;# 
   560  0297                     	;# 
   561  0298                     	;# 
   562  029F                     	;# 
   563  030C                     	;# 
   564  030E                     	;# 
   565  0311                     	;# 
   566  0311                     	;# 
   567  0312                     	;# 
   568  0313                     	;# 
   569  0314                     	;# 
   570  0315                     	;# 
   571  0315                     	;# 
   572  0316                     	;# 
   573  0317                     	;# 
   574  0318                     	;# 
   575  038C                     	;# 
   576  038E                     	;# 
   577  0391                     	;# 
   578  0392                     	;# 
   579  0393                     	;# 
   580  0397                     	;# 
   581  0398                     	;# 
   582  0399                     	;# 
   583  039A                     	;# 
   584  039C                     	;# 
   585  039D                     	;# 
   586  039E                     	;# 
   587  039F                     	;# 
   588  0411                     	;# 
   589  0411                     	;# 
   590  0412                     	;# 
   591  0413                     	;# 
   592  0414                     	;# 
   593  0415                     	;# 
   594  0416                     	;# 
   595  0417                     	;# 
   596  0418                     	;# 
   597  0418                     	;# 
   598  0419                     	;# 
   599  041A                     	;# 
   600  041B                     	;# 
   601  041C                     	;# 
   602  041D                     	;# 
   603  041E                     	;# 
   604  041F                     	;# 
   605  0498                     	;# 
   606  0498                     	;# 
   607  0499                     	;# 
   608  049A                     	;# 
   609  049B                     	;# 
   610  049B                     	;# 
   611  049C                     	;# 
   612  049D                     	;# 
   613  049E                     	;# 
   614  049F                     	;# 
   615  0617                     	;# 
   616  0618                     	;# 
   617  0619                     	;# 
   618  0619                     	;# 
   619  061A                     	;# 
   620  061B                     	;# 
   621  061C                     	;# 
   622  061C                     	;# 
   623  061F                     	;# 
   624  0691                     	;# 
   625  0692                     	;# 
   626  0693                     	;# 
   627  0694                     	;# 
   628  0695                     	;# 
   629  0696                     	;# 
   630  0697                     	;# 
   631  0698                     	;# 
   632  0699                     	;# 
   633  0711                     	;# 
   634  0712                     	;# 
   635  0713                     	;# 
   636  0714                     	;# 
   637  0715                     	;# 
   638  0716                     	;# 
   639  0717                     	;# 
   640  0718                     	;# 
   641  0719                     	;# 
   642  0891                     	;# 
   643  0891                     	;# 
   644  0891                     	;# 
   645  0891                     	;# 
   646  0891                     	;# 
   647  0891                     	;# 
   648  0892                     	;# 
   649  0892                     	;# 
   650  0892                     	;# 
   651  0893                     	;# 
   652  0893                     	;# 
   653  0893                     	;# 
   654  0893                     	;# 
   655  0893                     	;# 
   656  0893                     	;# 
   657  0894                     	;# 
   658  0894                     	;# 
   659  0894                     	;# 
   660  0895                     	;# 
   661  0895                     	;# 
   662  0895                     	;# 
   663  0896                     	;# 
   664  0896                     	;# 
   665  0896                     	;# 
   666  089B                     	;# 
   667  0911                     	;# 
   668  0912                     	;# 
   669  0913                     	;# 
   670  0914                     	;# 
   671  0915                     	;# 
   672  0916                     	;# 
   673  0918                     	;# 
   674  0919                     	;# 
   675  091A                     	;# 
   676  091B                     	;# 
   677  091C                     	;# 
   678  091D                     	;# 
   679  091E                     	;# 
   680  091F                     	;# 
   681  0E0F                     	;# 
   682  0E10                     	;# 
   683  0E11                     	;# 
   684  0E12                     	;# 
   685  0E13                     	;# 
   686  0E14                     	;# 
   687  0E15                     	;# 
   688  0E16                     	;# 
   689  0E17                     	;# 
   690  0E18                     	;# 
   691  0E19                     	;# 
   692  0E1A                     	;# 
   693  0E1B                     	;# 
   694  0E1C                     	;# 
   695  0E1D                     	;# 
   696  0E1E                     	;# 
   697  0E1F                     	;# 
   698  0E20                     	;# 
   699  0E21                     	;# 
   700  0E22                     	;# 
   701  0E24                     	;# 
   702  0E25                     	;# 
   703  0E28                     	;# 
   704  0E29                     	;# 
   705  0E2A                     	;# 
   706  0E2B                     	;# 
   707  0E2C                     	;# 
   708  0E2D                     	;# 
   709  0E2E                     	;# 
   710  0E2F                     	;# 
   711  0E90                     	;# 
   712  0E91                     	;# 
   713  0E92                     	;# 
   714  0E94                     	;# 
   715  0E95                     	;# 
   716  0EA0                     	;# 
   717  0EA1                     	;# 
   718  0EA2                     	;# 
   719  0EA3                     	;# 
   720  0EA4                     	;# 
   721  0EA5                     	;# 
   722  0F0F                     	;# 
   723  0F10                     	;# 
   724  0F11                     	;# 
   725  0F12                     	;# 
   726  0F13                     	;# 
   727  0F14                     	;# 
   728  0F15                     	;# 
   729  0F16                     	;# 
   730  0F17                     	;# 
   731  0F18                     	;# 
   732  0F19                     	;# 
   733  0F1A                     	;# 
   734  0F1B                     	;# 
   735  0F1C                     	;# 
   736  0F1D                     	;# 
   737  0F1E                     	;# 
   738  0F1F                     	;# 
   739  0F20                     	;# 
   740  0F21                     	;# 
   741  0F22                     	;# 
   742  0F23                     	;# 
   743  0F24                     	;# 
   744  0F25                     	;# 
   745  0F26                     	;# 
   746  0F27                     	;# 
   747  0F28                     	;# 
   748  0F29                     	;# 
   749  0F2A                     	;# 
   750  0F2B                     	;# 
   751  0F2C                     	;# 
   752  0F2D                     	;# 
   753  0F2E                     	;# 
   754  0F2F                     	;# 
   755  0F30                     	;# 
   756  0F31                     	;# 
   757  0F32                     	;# 
   758  0F33                     	;# 
   759  0F34                     	;# 
   760  0F35                     	;# 
   761  0F36                     	;# 
   762  0F37                     	;# 
   763  0FE4                     	;# 
   764  0FE5                     	;# 
   765  0FE6                     	;# 
   766  0FE7                     	;# 
   767  0FE8                     	;# 
   768  0FE9                     	;# 
   769  0FEA                     	;# 
   770  0FEB                     	;# 
   771  0FED                     	;# 
   772  0FEE                     	;# 
   773  0FEF                     	;# 
   774  0000                     	;# 
   775  0001                     	;# 
   776  0002                     	;# 
   777  0003                     	;# 
   778  0004                     	;# 
   779  0005                     	;# 
   780  0006                     	;# 
   781  0007                     	;# 
   782  0008                     	;# 
   783  0009                     	;# 
   784  000A                     	;# 
   785  000B                     	;# 
   786  000C                     	;# 
   787  000E                     	;# 
   788  0010                     	;# 
   789  0011                     	;# 
   790  0012                     	;# 
   791  0013                     	;# 
   792  0014                     	;# 
   793  0015                     	;# 
   794  0015                     	;# 
   795  0016                     	;# 
   796  0016                     	;# 
   797  0017                     	;# 
   798  0018                     	;# 
   799  0019                     	;# 
   800  0019                     	;# 
   801  001A                     	;# 
   802  001B                     	;# 
   803  001C                     	;# 
   804  001D                     	;# 
   805  001E                     	;# 
   806  001F                     	;# 
   807  008C                     	;# 
   808  008E                     	;# 
   809  0090                     	;# 
   810  0091                     	;# 
   811  0092                     	;# 
   812  0093                     	;# 
   813  0094                     	;# 
   814  0097                     	;# 
   815  009B                     	;# 
   816  009B                     	;# 
   817  009C                     	;# 
   818  009D                     	;# 
   819  009E                     	;# 
   820  009F                     	;# 
   821  010C                     	;# 
   822  010E                     	;# 
   823  0111                     	;# 
   824  0112                     	;# 
   825  0113                     	;# 
   826  0114                     	;# 
   827  0115                     	;# 
   828  0116                     	;# 
   829  0117                     	;# 
   830  0118                     	;# 
   831  0119                     	;# 
   832  018C                     	;# 
   833  018E                     	;# 
   834  0199                     	;# 
   835  0199                     	;# 
   836  0199                     	;# 
   837  019A                     	;# 
   838  019A                     	;# 
   839  019A                     	;# 
   840  019B                     	;# 
   841  019B                     	;# 
   842  019B                     	;# 
   843  019B                     	;# 
   844  019B                     	;# 
   845  019C                     	;# 
   846  019C                     	;# 
   847  019C                     	;# 
   848  019D                     	;# 
   849  019D                     	;# 
   850  019D                     	;# 
   851  019E                     	;# 
   852  019E                     	;# 
   853  019E                     	;# 
   854  019F                     	;# 
   855  019F                     	;# 
   856  019F                     	;# 
   857  019F                     	;# 
   858  019F                     	;# 
   859  020C                     	;# 
   860  020E                     	;# 
   861  0211                     	;# 
   862  0211                     	;# 
   863  0212                     	;# 
   864  0212                     	;# 
   865  0213                     	;# 
   866  0213                     	;# 
   867  0214                     	;# 
   868  0214                     	;# 
   869  0215                     	;# 
   870  0215                     	;# 
   871  0215                     	;# 
   872  0215                     	;# 
   873  0216                     	;# 
   874  0216                     	;# 
   875  0217                     	;# 
   876  0217                     	;# 
   877  0219                     	;# 
   878  021A                     	;# 
   879  021B                     	;# 
   880  021C                     	;# 
   881  021D                     	;# 
   882  021D                     	;# 
   883  021E                     	;# 
   884  021F                     	;# 
   885  028C                     	;# 
   886  028E                     	;# 
   887  0291                     	;# 
   888  0291                     	;# 
   889  0292                     	;# 
   890  0293                     	;# 
   891  0294                     	;# 
   892  0295                     	;# 
   893  0295                     	;# 
   894  0296                     	;# 
   895  0297                     	;# 
   896  0298                     	;# 
   897  029F                     	;# 
   898  030C                     	;# 
   899  030E                     	;# 
   900  0311                     	;# 
   901  0311                     	;# 
   902  0312                     	;# 
   903  0313                     	;# 
   904  0314                     	;# 
   905  0315                     	;# 
   906  0315                     	;# 
   907  0316                     	;# 
   908  0317                     	;# 
   909  0318                     	;# 
   910  038C                     	;# 
   911  038E                     	;# 
   912  0391                     	;# 
   913  0392                     	;# 
   914  0393                     	;# 
   915  0397                     	;# 
   916  0398                     	;# 
   917  0399                     	;# 
   918  039A                     	;# 
   919  039C                     	;# 
   920  039D                     	;# 
   921  039E                     	;# 
   922  039F                     	;# 
   923  0411                     	;# 
   924  0411                     	;# 
   925  0412                     	;# 
   926  0413                     	;# 
   927  0414                     	;# 
   928  0415                     	;# 
   929  0416                     	;# 
   930  0417                     	;# 
   931  0418                     	;# 
   932  0418                     	;# 
   933  0419                     	;# 
   934  041A                     	;# 
   935  041B                     	;# 
   936  041C                     	;# 
   937  041D                     	;# 
   938  041E                     	;# 
   939  041F                     	;# 
   940  0498                     	;# 
   941  0498                     	;# 
   942  0499                     	;# 
   943  049A                     	;# 
   944  049B                     	;# 
   945  049B                     	;# 
   946  049C                     	;# 
   947  049D                     	;# 
   948  049E                     	;# 
   949  049F                     	;# 
   950  0617                     	;# 
   951  0618                     	;# 
   952  0619                     	;# 
   953  0619                     	;# 
   954  061A                     	;# 
   955  061B                     	;# 
   956  061C                     	;# 
   957  061C                     	;# 
   958  061F                     	;# 
   959  0691                     	;# 
   960  0692                     	;# 
   961  0693                     	;# 
   962  0694                     	;# 
   963  0695                     	;# 
   964  0696                     	;# 
   965  0697                     	;# 
   966  0698                     	;# 
   967  0699                     	;# 
   968  0711                     	;# 
   969  0712                     	;# 
   970  0713                     	;# 
   971  0714                     	;# 
   972  0715                     	;# 
   973  0716                     	;# 
   974  0717                     	;# 
   975  0718                     	;# 
   976  0719                     	;# 
   977  0891                     	;# 
   978  0891                     	;# 
   979  0891                     	;# 
   980  0891                     	;# 
   981  0891                     	;# 
   982  0891                     	;# 
   983  0892                     	;# 
   984  0892                     	;# 
   985  0892                     	;# 
   986  0893                     	;# 
   987  0893                     	;# 
   988  0893                     	;# 
   989  0893                     	;# 
   990  0893                     	;# 
   991  0893                     	;# 
   992  0894                     	;# 
   993  0894                     	;# 
   994  0894                     	;# 
   995  0895                     	;# 
   996  0895                     	;# 
   997  0895                     	;# 
   998  0896                     	;# 
   999  0896                     	;# 
  1000  0896                     	;# 
  1001  089B                     	;# 
  1002  0911                     	;# 
  1003  0912                     	;# 
  1004  0913                     	;# 
  1005  0914                     	;# 
  1006  0915                     	;# 
  1007  0916                     	;# 
  1008  0918                     	;# 
  1009  0919                     	;# 
  1010  091A                     	;# 
  1011  091B                     	;# 
  1012  091C                     	;# 
  1013  091D                     	;# 
  1014  091E                     	;# 
  1015  091F                     	;# 
  1016  0E0F                     	;# 
  1017  0E10                     	;# 
  1018  0E11                     	;# 
  1019  0E12                     	;# 
  1020  0E13                     	;# 
  1021  0E14                     	;# 
  1022  0E15                     	;# 
  1023  0E16                     	;# 
  1024  0E17                     	;# 
  1025  0E18                     	;# 
  1026  0E19                     	;# 
  1027  0E1A                     	;# 
  1028  0E1B                     	;# 
  1029  0E1C                     	;# 
  1030  0E1D                     	;# 
  1031  0E1E                     	;# 
  1032  0E1F                     	;# 
  1033  0E20                     	;# 
  1034  0E21                     	;# 
  1035  0E22                     	;# 
  1036  0E24                     	;# 
  1037  0E25                     	;# 
  1038  0E28                     	;# 
  1039  0E29                     	;# 
  1040  0E2A                     	;# 
  1041  0E2B                     	;# 
  1042  0E2C                     	;# 
  1043  0E2D                     	;# 
  1044  0E2E                     	;# 
  1045  0E2F                     	;# 
  1046  0E90                     	;# 
  1047  0E91                     	;# 
  1048  0E92                     	;# 
  1049  0E94                     	;# 
  1050  0E95                     	;# 
  1051  0EA0                     	;# 
  1052  0EA1                     	;# 
  1053  0EA2                     	;# 
  1054  0EA3                     	;# 
  1055  0EA4                     	;# 
  1056  0EA5                     	;# 
  1057  0F0F                     	;# 
  1058  0F10                     	;# 
  1059  0F11                     	;# 
  1060  0F12                     	;# 
  1061  0F13                     	;# 
  1062  0F14                     	;# 
  1063  0F15                     	;# 
  1064  0F16                     	;# 
  1065  0F17                     	;# 
  1066  0F18                     	;# 
  1067  0F19                     	;# 
  1068  0F1A                     	;# 
  1069  0F1B                     	;# 
  1070  0F1C                     	;# 
  1071  0F1D                     	;# 
  1072  0F1E                     	;# 
  1073  0F1F                     	;# 
  1074  0F20                     	;# 
  1075  0F21                     	;# 
  1076  0F22                     	;# 
  1077  0F23                     	;# 
  1078  0F24                     	;# 
  1079  0F25                     	;# 
  1080  0F26                     	;# 
  1081  0F27                     	;# 
  1082  0F28                     	;# 
  1083  0F29                     	;# 
  1084  0F2A                     	;# 
  1085  0F2B                     	;# 
  1086  0F2C                     	;# 
  1087  0F2D                     	;# 
  1088  0F2E                     	;# 
  1089  0F2F                     	;# 
  1090  0F30                     	;# 
  1091  0F31                     	;# 
  1092  0F32                     	;# 
  1093  0F33                     	;# 
  1094  0F34                     	;# 
  1095  0F35                     	;# 
  1096  0F36                     	;# 
  1097  0F37                     	;# 
  1098  0FE4                     	;# 
  1099  0FE5                     	;# 
  1100  0FE6                     	;# 
  1101  0FE7                     	;# 
  1102  0FE8                     	;# 
  1103  0FE9                     	;# 
  1104  0FEA                     	;# 
  1105  0FEB                     	;# 
  1106  0FED                     	;# 
  1107  0FEE                     	;# 
  1108  0FEF                     	;# 
  1109  0000                     	;# 
  1110  0001                     	;# 
  1111  0002                     	;# 
  1112  0003                     	;# 
  1113  0004                     	;# 
  1114  0005                     	;# 
  1115  0006                     	;# 
  1116  0007                     	;# 
  1117  0008                     	;# 
  1118  0009                     	;# 
  1119  000A                     	;# 
  1120  000B                     	;# 
  1121  000C                     	;# 
  1122  000E                     	;# 
  1123  0010                     	;# 
  1124  0011                     	;# 
  1125  0012                     	;# 
  1126  0013                     	;# 
  1127  0014                     	;# 
  1128  0015                     	;# 
  1129  0015                     	;# 
  1130  0016                     	;# 
  1131  0016                     	;# 
  1132  0017                     	;# 
  1133  0018                     	;# 
  1134  0019                     	;# 
  1135  0019                     	;# 
  1136  001A                     	;# 
  1137  001B                     	;# 
  1138  001C                     	;# 
  1139  001D                     	;# 
  1140  001E                     	;# 
  1141  001F                     	;# 
  1142  008C                     	;# 
  1143  008E                     	;# 
  1144  0090                     	;# 
  1145  0091                     	;# 
  1146  0092                     	;# 
  1147  0093                     	;# 
  1148  0094                     	;# 
  1149  0097                     	;# 
  1150  009B                     	;# 
  1151  009B                     	;# 
  1152  009C                     	;# 
  1153  009D                     	;# 
  1154  009E                     	;# 
  1155  009F                     	;# 
  1156  010C                     	;# 
  1157  010E                     	;# 
  1158  0111                     	;# 
  1159  0112                     	;# 
  1160  0113                     	;# 
  1161  0114                     	;# 
  1162  0115                     	;# 
  1163  0116                     	;# 
  1164  0117                     	;# 
  1165  0118                     	;# 
  1166  0119                     	;# 
  1167  018C                     	;# 
  1168  018E                     	;# 
  1169  0199                     	;# 
  1170  0199                     	;# 
  1171  0199                     	;# 
  1172  019A                     	;# 
  1173  019A                     	;# 
  1174  019A                     	;# 
  1175  019B                     	;# 
  1176  019B                     	;# 
  1177  019B                     	;# 
  1178  019B                     	;# 
  1179  019B                     	;# 
  1180  019C                     	;# 
  1181  019C                     	;# 
  1182  019C                     	;# 
  1183  019D                     	;# 
  1184  019D                     	;# 
  1185  019D                     	;# 
  1186  019E                     	;# 
  1187  019E                     	;# 
  1188  019E                     	;# 
  1189  019F                     	;# 
  1190  019F                     	;# 
  1191  019F                     	;# 
  1192  019F                     	;# 
  1193  019F                     	;# 
  1194  020C                     	;# 
  1195  020E                     	;# 
  1196  0211                     	;# 
  1197  0211                     	;# 
  1198  0212                     	;# 
  1199  0212                     	;# 
  1200  0213                     	;# 
  1201  0213                     	;# 
  1202  0214                     	;# 
  1203  0214                     	;# 
  1204  0215                     	;# 
  1205  0215                     	;# 
  1206  0215                     	;# 
  1207  0215                     	;# 
  1208  0216                     	;# 
  1209  0216                     	;# 
  1210  0217                     	;# 
  1211  0217                     	;# 
  1212  0219                     	;# 
  1213  021A                     	;# 
  1214  021B                     	;# 
  1215  021C                     	;# 
  1216  021D                     	;# 
  1217  021D                     	;# 
  1218  021E                     	;# 
  1219  021F                     	;# 
  1220  028C                     	;# 
  1221  028E                     	;# 
  1222  0291                     	;# 
  1223  0291                     	;# 
  1224  0292                     	;# 
  1225  0293                     	;# 
  1226  0294                     	;# 
  1227  0295                     	;# 
  1228  0295                     	;# 
  1229  0296                     	;# 
  1230  0297                     	;# 
  1231  0298                     	;# 
  1232  029F                     	;# 
  1233  030C                     	;# 
  1234  030E                     	;# 
  1235  0311                     	;# 
  1236  0311                     	;# 
  1237  0312                     	;# 
  1238  0313                     	;# 
  1239  0314                     	;# 
  1240  0315                     	;# 
  1241  0315                     	;# 
  1242  0316                     	;# 
  1243  0317                     	;# 
  1244  0318                     	;# 
  1245  038C                     	;# 
  1246  038E                     	;# 
  1247  0391                     	;# 
  1248  0392                     	;# 
  1249  0393                     	;# 
  1250  0397                     	;# 
  1251  0398                     	;# 
  1252  0399                     	;# 
  1253  039A                     	;# 
  1254  039C                     	;# 
  1255  039D                     	;# 
  1256  039E                     	;# 
  1257  039F                     	;# 
  1258  0411                     	;# 
  1259  0411                     	;# 
  1260  0412                     	;# 
  1261  0413                     	;# 
  1262  0414                     	;# 
  1263  0415                     	;# 
  1264  0416                     	;# 
  1265  0417                     	;# 
  1266  0418                     	;# 
  1267  0418                     	;# 
  1268  0419                     	;# 
  1269  041A                     	;# 
  1270  041B                     	;# 
  1271  041C                     	;# 
  1272  041D                     	;# 
  1273  041E                     	;# 
  1274  041F                     	;# 
  1275  0498                     	;# 
  1276  0498                     	;# 
  1277  0499                     	;# 
  1278  049A                     	;# 
  1279  049B                     	;# 
  1280  049B                     	;# 
  1281  049C                     	;# 
  1282  049D                     	;# 
  1283  049E                     	;# 
  1284  049F                     	;# 
  1285  0617                     	;# 
  1286  0618                     	;# 
  1287  0619                     	;# 
  1288  0619                     	;# 
  1289  061A                     	;# 
  1290  061B                     	;# 
  1291  061C                     	;# 
  1292  061C                     	;# 
  1293  061F                     	;# 
  1294  0691                     	;# 
  1295  0692                     	;# 
  1296  0693                     	;# 
  1297  0694                     	;# 
  1298  0695                     	;# 
  1299  0696                     	;# 
  1300  0697                     	;# 
  1301  0698                     	;# 
  1302  0699                     	;# 
  1303  0711                     	;# 
  1304  0712                     	;# 
  1305  0713                     	;# 
  1306  0714                     	;# 
  1307  0715                     	;# 
  1308  0716                     	;# 
  1309  0717                     	;# 
  1310  0718                     	;# 
  1311  0719                     	;# 
  1312  0891                     	;# 
  1313  0891                     	;# 
  1314  0891                     	;# 
  1315  0891                     	;# 
  1316  0891                     	;# 
  1317  0891                     	;# 
  1318  0892                     	;# 
  1319  0892                     	;# 
  1320  0892                     	;# 
  1321  0893                     	;# 
  1322  0893                     	;# 
  1323  0893                     	;# 
  1324  0893                     	;# 
  1325  0893                     	;# 
  1326  0893                     	;# 
  1327  0894                     	;# 
  1328  0894                     	;# 
  1329  0894                     	;# 
  1330  0895                     	;# 
  1331  0895                     	;# 
  1332  0895                     	;# 
  1333  0896                     	;# 
  1334  0896                     	;# 
  1335  0896                     	;# 
  1336  089B                     	;# 
  1337  0911                     	;# 
  1338  0912                     	;# 
  1339  0913                     	;# 
  1340  0914                     	;# 
  1341  0915                     	;# 
  1342  0916                     	;# 
  1343  0918                     	;# 
  1344  0919                     	;# 
  1345  091A                     	;# 
  1346  091B                     	;# 
  1347  091C                     	;# 
  1348  091D                     	;# 
  1349  091E                     	;# 
  1350  091F                     	;# 
  1351  0E0F                     	;# 
  1352  0E10                     	;# 
  1353  0E11                     	;# 
  1354  0E12                     	;# 
  1355  0E13                     	;# 
  1356  0E14                     	;# 
  1357  0E15                     	;# 
  1358  0E16                     	;# 
  1359  0E17                     	;# 
  1360  0E18                     	;# 
  1361  0E19                     	;# 
  1362  0E1A                     	;# 
  1363  0E1B                     	;# 
  1364  0E1C                     	;# 
  1365  0E1D                     	;# 
  1366  0E1E                     	;# 
  1367  0E1F                     	;# 
  1368  0E20                     	;# 
  1369  0E21                     	;# 
  1370  0E22                     	;# 
  1371  0E24                     	;# 
  1372  0E25                     	;# 
  1373  0E28                     	;# 
  1374  0E29                     	;# 
  1375  0E2A                     	;# 
  1376  0E2B                     	;# 
  1377  0E2C                     	;# 
  1378  0E2D                     	;# 
  1379  0E2E                     	;# 
  1380  0E2F                     	;# 
  1381  0E90                     	;# 
  1382  0E91                     	;# 
  1383  0E92                     	;# 
  1384  0E94                     	;# 
  1385  0E95                     	;# 
  1386  0EA0                     	;# 
  1387  0EA1                     	;# 
  1388  0EA2                     	;# 
  1389  0EA3                     	;# 
  1390  0EA4                     	;# 
  1391  0EA5                     	;# 
  1392  0F0F                     	;# 
  1393  0F10                     	;# 
  1394  0F11                     	;# 
  1395  0F12                     	;# 
  1396  0F13                     	;# 
  1397  0F14                     	;# 
  1398  0F15                     	;# 
  1399  0F16                     	;# 
  1400  0F17                     	;# 
  1401  0F18                     	;# 
  1402  0F19                     	;# 
  1403  0F1A                     	;# 
  1404  0F1B                     	;# 
  1405  0F1C                     	;# 
  1406  0F1D                     	;# 
  1407  0F1E                     	;# 
  1408  0F1F                     	;# 
  1409  0F20                     	;# 
  1410  0F21                     	;# 
  1411  0F22                     	;# 
  1412  0F23                     	;# 
  1413  0F24                     	;# 
  1414  0F25                     	;# 
  1415  0F26                     	;# 
  1416  0F27                     	;# 
  1417  0F28                     	;# 
  1418  0F29                     	;# 
  1419  0F2A                     	;# 
  1420  0F2B                     	;# 
  1421  0F2C                     	;# 
  1422  0F2D                     	;# 
  1423  0F2E                     	;# 
  1424  0F2F                     	;# 
  1425  0F30                     	;# 
  1426  0F31                     	;# 
  1427  0F32                     	;# 
  1428  0F33                     	;# 
  1429  0F34                     	;# 
  1430  0F35                     	;# 
  1431  0F36                     	;# 
  1432  0F37                     	;# 
  1433  0FE4                     	;# 
  1434  0FE5                     	;# 
  1435  0FE6                     	;# 
  1436  0FE7                     	;# 
  1437  0FE8                     	;# 
  1438  0FE9                     	;# 
  1439  0FEA                     	;# 
  1440  0FEB                     	;# 
  1441  0FED                     	;# 
  1442  0FEE                     	;# 
  1443  0FEF                     	;# 
  1444  0000                     	;# 
  1445  0001                     	;# 
  1446  0002                     	;# 
  1447  0003                     	;# 
  1448  0004                     	;# 
  1449  0005                     	;# 
  1450  0006                     	;# 
  1451  0007                     	;# 
  1452  0008                     	;# 
  1453  0009                     	;# 
  1454  000A                     	;# 
  1455  000B                     	;# 
  1456  000C                     	;# 
  1457  000E                     	;# 
  1458  0010                     	;# 
  1459  0011                     	;# 
  1460  0012                     	;# 
  1461  0013                     	;# 
  1462  0014                     	;# 
  1463  0015                     	;# 
  1464  0015                     	;# 
  1465  0016                     	;# 
  1466  0016                     	;# 
  1467  0017                     	;# 
  1468  0018                     	;# 
  1469  0019                     	;# 
  1470  0019                     	;# 
  1471  001A                     	;# 
  1472  001B                     	;# 
  1473  001C                     	;# 
  1474  001D                     	;# 
  1475  001E                     	;# 
  1476  001F                     	;# 
  1477  008C                     	;# 
  1478  008E                     	;# 
  1479  0090                     	;# 
  1480  0091                     	;# 
  1481  0092                     	;# 
  1482  0093                     	;# 
  1483  0094                     	;# 
  1484  0097                     	;# 
  1485  009B                     	;# 
  1486  009B                     	;# 
  1487  009C                     	;# 
  1488  009D                     	;# 
  1489  009E                     	;# 
  1490  009F                     	;# 
  1491  010C                     	;# 
  1492  010E                     	;# 
  1493  0111                     	;# 
  1494  0112                     	;# 
  1495  0113                     	;# 
  1496  0114                     	;# 
  1497  0115                     	;# 
  1498  0116                     	;# 
  1499  0117                     	;# 
  1500  0118                     	;# 
  1501  0119                     	;# 
  1502  018C                     	;# 
  1503  018E                     	;# 
  1504  0199                     	;# 
  1505  0199                     	;# 
  1506  0199                     	;# 
  1507  019A                     	;# 
  1508  019A                     	;# 
  1509  019A                     	;# 
  1510  019B                     	;# 
  1511  019B                     	;# 
  1512  019B                     	;# 
  1513  019B                     	;# 
  1514  019B                     	;# 
  1515  019C                     	;# 
  1516  019C                     	;# 
  1517  019C                     	;# 
  1518  019D                     	;# 
  1519  019D                     	;# 
  1520  019D                     	;# 
  1521  019E                     	;# 
  1522  019E                     	;# 
  1523  019E                     	;# 
  1524  019F                     	;# 
  1525  019F                     	;# 
  1526  019F                     	;# 
  1527  019F                     	;# 
  1528  019F                     	;# 
  1529  020C                     	;# 
  1530  020E                     	;# 
  1531  0211                     	;# 
  1532  0211                     	;# 
  1533  0212                     	;# 
  1534  0212                     	;# 
  1535  0213                     	;# 
  1536  0213                     	;# 
  1537  0214                     	;# 
  1538  0214                     	;# 
  1539  0215                     	;# 
  1540  0215                     	;# 
  1541  0215                     	;# 
  1542  0215                     	;# 
  1543  0216                     	;# 
  1544  0216                     	;# 
  1545  0217                     	;# 
  1546  0217                     	;# 
  1547  0219                     	;# 
  1548  021A                     	;# 
  1549  021B                     	;# 
  1550  021C                     	;# 
  1551  021D                     	;# 
  1552  021D                     	;# 
  1553  021E                     	;# 
  1554  021F                     	;# 
  1555  028C                     	;# 
  1556  028E                     	;# 
  1557  0291                     	;# 
  1558  0291                     	;# 
  1559  0292                     	;# 
  1560  0293                     	;# 
  1561  0294                     	;# 
  1562  0295                     	;# 
  1563  0295                     	;# 
  1564  0296                     	;# 
  1565  0297                     	;# 
  1566  0298                     	;# 
  1567  029F                     	;# 
  1568  030C                     	;# 
  1569  030E                     	;# 
  1570  0311                     	;# 
  1571  0311                     	;# 
  1572  0312                     	;# 
  1573  0313                     	;# 
  1574  0314                     	;# 
  1575  0315                     	;# 
  1576  0315                     	;# 
  1577  0316                     	;# 
  1578  0317                     	;# 
  1579  0318                     	;# 
  1580  038C                     	;# 
  1581  038E                     	;# 
  1582  0391                     	;# 
  1583  0392                     	;# 
  1584  0393                     	;# 
  1585  0397                     	;# 
  1586  0398                     	;# 
  1587  0399                     	;# 
  1588  039A                     	;# 
  1589  039C                     	;# 
  1590  039D                     	;# 
  1591  039E                     	;# 
  1592  039F                     	;# 
  1593  0411                     	;# 
  1594  0411                     	;# 
  1595  0412                     	;# 
  1596  0413                     	;# 
  1597  0414                     	;# 
  1598  0415                     	;# 
  1599  0416                     	;# 
  1600  0417                     	;# 
  1601  0418                     	;# 
  1602  0418                     	;# 
  1603  0419                     	;# 
  1604  041A                     	;# 
  1605  041B                     	;# 
  1606  041C                     	;# 
  1607  041D                     	;# 
  1608  041E                     	;# 
  1609  041F                     	;# 
  1610  0498                     	;# 
  1611  0498                     	;# 
  1612  0499                     	;# 
  1613  049A                     	;# 
  1614  049B                     	;# 
  1615  049B                     	;# 
  1616  049C                     	;# 
  1617  049D                     	;# 
  1618  049E                     	;# 
  1619  049F                     	;# 
  1620  0617                     	;# 
  1621  0618                     	;# 
  1622  0619                     	;# 
  1623  0619                     	;# 
  1624  061A                     	;# 
  1625  061B                     	;# 
  1626  061C                     	;# 
  1627  061C                     	;# 
  1628  061F                     	;# 
  1629  0691                     	;# 
  1630  0692                     	;# 
  1631  0693                     	;# 
  1632  0694                     	;# 
  1633  0695                     	;# 
  1634  0696                     	;# 
  1635  0697                     	;# 
  1636  0698                     	;# 
  1637  0699                     	;# 
  1638  0711                     	;# 
  1639  0712                     	;# 
  1640  0713                     	;# 
  1641  0714                     	;# 
  1642  0715                     	;# 
  1643  0716                     	;# 
  1644  0717                     	;# 
  1645  0718                     	;# 
  1646  0719                     	;# 
  1647  0891                     	;# 
  1648  0891                     	;# 
  1649  0891                     	;# 
  1650  0891                     	;# 
  1651  0891                     	;# 
  1652  0891                     	;# 
  1653  0892                     	;# 
  1654  0892                     	;# 
  1655  0892                     	;# 
  1656  0893                     	;# 
  1657  0893                     	;# 
  1658  0893                     	;# 
  1659  0893                     	;# 
  1660  0893                     	;# 
  1661  0893                     	;# 
  1662  0894                     	;# 
  1663  0894                     	;# 
  1664  0894                     	;# 
  1665  0895                     	;# 
  1666  0895                     	;# 
  1667  0895                     	;# 
  1668  0896                     	;# 
  1669  0896                     	;# 
  1670  0896                     	;# 
  1671  089B                     	;# 
  1672  0911                     	;# 
  1673  0912                     	;# 
  1674  0913                     	;# 
  1675  0914                     	;# 
  1676  0915                     	;# 
  1677  0916                     	;# 
  1678  0918                     	;# 
  1679  0919                     	;# 
  1680  091A                     	;# 
  1681  091B                     	;# 
  1682  091C                     	;# 
  1683  091D                     	;# 
  1684  091E                     	;# 
  1685  091F                     	;# 
  1686  0E0F                     	;# 
  1687  0E10                     	;# 
  1688  0E11                     	;# 
  1689  0E12                     	;# 
  1690  0E13                     	;# 
  1691  0E14                     	;# 
  1692  0E15                     	;# 
  1693  0E16                     	;# 
  1694  0E17                     	;# 
  1695  0E18                     	;# 
  1696  0E19                     	;# 
  1697  0E1A                     	;# 
  1698  0E1B                     	;# 
  1699  0E1C                     	;# 
  1700  0E1D                     	;# 
  1701  0E1E                     	;# 
  1702  0E1F                     	;# 
  1703  0E20                     	;# 
  1704  0E21                     	;# 
  1705  0E22                     	;# 
  1706  0E24                     	;# 
  1707  0E25                     	;# 
  1708  0E28                     	;# 
  1709  0E29                     	;# 
  1710  0E2A                     	;# 
  1711  0E2B                     	;# 
  1712  0E2C                     	;# 
  1713  0E2D                     	;# 
  1714  0E2E                     	;# 
  1715  0E2F                     	;# 
  1716  0E90                     	;# 
  1717  0E91                     	;# 
  1718  0E92                     	;# 
  1719  0E94                     	;# 
  1720  0E95                     	;# 
  1721  0EA0                     	;# 
  1722  0EA1                     	;# 
  1723  0EA2                     	;# 
  1724  0EA3                     	;# 
  1725  0EA4                     	;# 
  1726  0EA5                     	;# 
  1727  0F0F                     	;# 
  1728  0F10                     	;# 
  1729  0F11                     	;# 
  1730  0F12                     	;# 
  1731  0F13                     	;# 
  1732  0F14                     	;# 
  1733  0F15                     	;# 
  1734  0F16                     	;# 
  1735  0F17                     	;# 
  1736  0F18                     	;# 
  1737  0F19                     	;# 
  1738  0F1A                     	;# 
  1739  0F1B                     	;# 
  1740  0F1C                     	;# 
  1741  0F1D                     	;# 
  1742  0F1E                     	;# 
  1743  0F1F                     	;# 
  1744  0F20                     	;# 
  1745  0F21                     	;# 
  1746  0F22                     	;# 
  1747  0F23                     	;# 
  1748  0F24                     	;# 
  1749  0F25                     	;# 
  1750  0F26                     	;# 
  1751  0F27                     	;# 
  1752  0F28                     	;# 
  1753  0F29                     	;# 
  1754  0F2A                     	;# 
  1755  0F2B                     	;# 
  1756  0F2C                     	;# 
  1757  0F2D                     	;# 
  1758  0F2E                     	;# 
  1759  0F2F                     	;# 
  1760  0F30                     	;# 
  1761  0F31                     	;# 
  1762  0F32                     	;# 
  1763  0F33                     	;# 
  1764  0F34                     	;# 
  1765  0F35                     	;# 
  1766  0F36                     	;# 
  1767  0F37                     	;# 
  1768  0FE4                     	;# 
  1769  0FE5                     	;# 
  1770  0FE6                     	;# 
  1771  0FE7                     	;# 
  1772  0FE8                     	;# 
  1773  0FE9                     	;# 
  1774  0FEA                     	;# 
  1775  0FEB                     	;# 
  1776  0FED                     	;# 
  1777  0FEE                     	;# 
  1778  0FEF                     	;# 
  1779  0000                     	;# 
  1780  0001                     	;# 
  1781  0002                     	;# 
  1782  0003                     	;# 
  1783  0004                     	;# 
  1784  0005                     	;# 
  1785  0006                     	;# 
  1786  0007                     	;# 
  1787  0008                     	;# 
  1788  0009                     	;# 
  1789  000A                     	;# 
  1790  000B                     	;# 
  1791  000C                     	;# 
  1792  000E                     	;# 
  1793  0010                     	;# 
  1794  0011                     	;# 
  1795  0012                     	;# 
  1796  0013                     	;# 
  1797  0014                     	;# 
  1798  0015                     	;# 
  1799  0015                     	;# 
  1800  0016                     	;# 
  1801  0016                     	;# 
  1802  0017                     	;# 
  1803  0018                     	;# 
  1804  0019                     	;# 
  1805  0019                     	;# 
  1806  001A                     	;# 
  1807  001B                     	;# 
  1808  001C                     	;# 
  1809  001D                     	;# 
  1810  001E                     	;# 
  1811  001F                     	;# 
  1812  008C                     	;# 
  1813  008E                     	;# 
  1814  0090                     	;# 
  1815  0091                     	;# 
  1816  0092                     	;# 
  1817  0093                     	;# 
  1818  0094                     	;# 
  1819  0097                     	;# 
  1820  009B                     	;# 
  1821  009B                     	;# 
  1822  009C                     	;# 
  1823  009D                     	;# 
  1824  009E                     	;# 
  1825  009F                     	;# 
  1826  010C                     	;# 
  1827  010E                     	;# 
  1828  0111                     	;# 
  1829  0112                     	;# 
  1830  0113                     	;# 
  1831  0114                     	;# 
  1832  0115                     	;# 
  1833  0116                     	;# 
  1834  0117                     	;# 
  1835  0118                     	;# 
  1836  0119                     	;# 
  1837  018C                     	;# 
  1838  018E                     	;# 
  1839  0199                     	;# 
  1840  0199                     	;# 
  1841  0199                     	;# 
  1842  019A                     	;# 
  1843  019A                     	;# 
  1844  019A                     	;# 
  1845  019B                     	;# 
  1846  019B                     	;# 
  1847  019B                     	;# 
  1848  019B                     	;# 
  1849  019B                     	;# 
  1850  019C                     	;# 
  1851  019C                     	;# 
  1852  019C                     	;# 
  1853  019D                     	;# 
  1854  019D                     	;# 
  1855  019D                     	;# 
  1856  019E                     	;# 
  1857  019E                     	;# 
  1858  019E                     	;# 
  1859  019F                     	;# 
  1860  019F                     	;# 
  1861  019F                     	;# 
  1862  019F                     	;# 
  1863  019F                     	;# 
  1864  020C                     	;# 
  1865  020E                     	;# 
  1866  0211                     	;# 
  1867  0211                     	;# 
  1868  0212                     	;# 
  1869  0212                     	;# 
  1870  0213                     	;# 
  1871  0213                     	;# 
  1872  0214                     	;# 
  1873  0214                     	;# 
  1874  0215                     	;# 
  1875  0215                     	;# 
  1876  0215                     	;# 
  1877  0215                     	;# 
  1878  0216                     	;# 
  1879  0216                     	;# 
  1880  0217                     	;# 
  1881  0217                     	;# 
  1882  0219                     	;# 
  1883  021A                     	;# 
  1884  021B                     	;# 
  1885  021C                     	;# 
  1886  021D                     	;# 
  1887  021D                     	;# 
  1888  021E                     	;# 
  1889  021F                     	;# 
  1890  028C                     	;# 
  1891  028E                     	;# 
  1892  0291                     	;# 
  1893  0291                     	;# 
  1894  0292                     	;# 
  1895  0293                     	;# 
  1896  0294                     	;# 
  1897  0295                     	;# 
  1898  0295                     	;# 
  1899  0296                     	;# 
  1900  0297                     	;# 
  1901  0298                     	;# 
  1902  029F                     	;# 
  1903  030C                     	;# 
  1904  030E                     	;# 
  1905  0311                     	;# 
  1906  0311                     	;# 
  1907  0312                     	;# 
  1908  0313                     	;# 
  1909  0314                     	;# 
  1910  0315                     	;# 
  1911  0315                     	;# 
  1912  0316                     	;# 
  1913  0317                     	;# 
  1914  0318                     	;# 
  1915  038C                     	;# 
  1916  038E                     	;# 
  1917  0391                     	;# 
  1918  0392                     	;# 
  1919  0393                     	;# 
  1920  0397                     	;# 
  1921  0398                     	;# 
  1922  0399                     	;# 
  1923  039A                     	;# 
  1924  039C                     	;# 
  1925  039D                     	;# 
  1926  039E                     	;# 
  1927  039F                     	;# 
  1928  0411                     	;# 
  1929  0411                     	;# 
  1930  0412                     	;# 
  1931  0413                     	;# 
  1932  0414                     	;# 
  1933  0415                     	;# 
  1934  0416                     	;# 
  1935  0417                     	;# 
  1936  0418                     	;# 
  1937  0418                     	;# 
  1938  0419                     	;# 
  1939  041A                     	;# 
  1940  041B                     	;# 
  1941  041C                     	;# 
  1942  041D                     	;# 
  1943  041E                     	;# 
  1944  041F                     	;# 
  1945  0498                     	;# 
  1946  0498                     	;# 
  1947  0499                     	;# 
  1948  049A                     	;# 
  1949  049B                     	;# 
  1950  049B                     	;# 
  1951  049C                     	;# 
  1952  049D                     	;# 
  1953  049E                     	;# 
  1954  049F                     	;# 
  1955  0617                     	;# 
  1956  0618                     	;# 
  1957  0619                     	;# 
  1958  0619                     	;# 
  1959  061A                     	;# 
  1960  061B                     	;# 
  1961  061C                     	;# 
  1962  061C                     	;# 
  1963  061F                     	;# 
  1964  0691                     	;# 
  1965  0692                     	;# 
  1966  0693                     	;# 
  1967  0694                     	;# 
  1968  0695                     	;# 
  1969  0696                     	;# 
  1970  0697                     	;# 
  1971  0698                     	;# 
  1972  0699                     	;# 
  1973  0711                     	;# 
  1974  0712                     	;# 
  1975  0713                     	;# 
  1976  0714                     	;# 
  1977  0715                     	;# 
  1978  0716                     	;# 
  1979  0717                     	;# 
  1980  0718                     	;# 
  1981  0719                     	;# 
  1982  0891                     	;# 
  1983  0891                     	;# 
  1984  0891                     	;# 
  1985  0891                     	;# 
  1986  0891                     	;# 
  1987  0891                     	;# 
  1988  0892                     	;# 
  1989  0892                     	;# 
  1990  0892                     	;# 
  1991  0893                     	;# 
  1992  0893                     	;# 
  1993  0893                     	;# 
  1994  0893                     	;# 
  1995  0893                     	;# 
  1996  0893                     	;# 
  1997  0894                     	;# 
  1998  0894                     	;# 
  1999  0894                     	;# 
  2000  0895                     	;# 
  2001  0895                     	;# 
  2002  0895                     	;# 
  2003  0896                     	;# 
  2004  0896                     	;# 
  2005  0896                     	;# 
  2006  089B                     	;# 
  2007  0911                     	;# 
  2008  0912                     	;# 
  2009  0913                     	;# 
  2010  0914                     	;# 
  2011  0915                     	;# 
  2012  0916                     	;# 
  2013  0918                     	;# 
  2014  0919                     	;# 
  2015  091A                     	;# 
  2016  091B                     	;# 
  2017  091C                     	;# 
  2018  091D                     	;# 
  2019  091E                     	;# 
  2020  091F                     	;# 
  2021  0E0F                     	;# 
  2022  0E10                     	;# 
  2023  0E11                     	;# 
  2024  0E12                     	;# 
  2025  0E13                     	;# 
  2026  0E14                     	;# 
  2027  0E15                     	;# 
  2028  0E16                     	;# 
  2029  0E17                     	;# 
  2030  0E18                     	;# 
  2031  0E19                     	;# 
  2032  0E1A                     	;# 
  2033  0E1B                     	;# 
  2034  0E1C                     	;# 
  2035  0E1D                     	;# 
  2036  0E1E                     	;# 
  2037  0E1F                     	;# 
  2038  0E20                     	;# 
  2039  0E21                     	;# 
  2040  0E22                     	;# 
  2041  0E24                     	;# 
  2042  0E25                     	;# 
  2043  0E28                     	;# 
  2044  0E29                     	;# 
  2045  0E2A                     	;# 
  2046  0E2B                     	;# 
  2047  0E2C                     	;# 
  2048  0E2D                     	;# 
  2049  0E2E                     	;# 
  2050  0E2F                     	;# 
  2051  0E90                     	;# 
  2052  0E91                     	;# 
  2053  0E92                     	;# 
  2054  0E94                     	;# 
  2055  0E95                     	;# 
  2056  0EA0                     	;# 
  2057  0EA1                     	;# 
  2058  0EA2                     	;# 
  2059  0EA3                     	;# 
  2060  0EA4                     	;# 
  2061  0EA5                     	;# 
  2062  0F0F                     	;# 
  2063  0F10                     	;# 
  2064  0F11                     	;# 
  2065  0F12                     	;# 
  2066  0F13                     	;# 
  2067  0F14                     	;# 
  2068  0F15                     	;# 
  2069  0F16                     	;# 
  2070  0F17                     	;# 
  2071  0F18                     	;# 
  2072  0F19                     	;# 
  2073  0F1A                     	;# 
  2074  0F1B                     	;# 
  2075  0F1C                     	;# 
  2076  0F1D                     	;# 
  2077  0F1E                     	;# 
  2078  0F1F                     	;# 
  2079  0F20                     	;# 
  2080  0F21                     	;# 
  2081  0F22                     	;# 
  2082  0F23                     	;# 
  2083  0F24                     	;# 
  2084  0F25                     	;# 
  2085  0F26                     	;# 
  2086  0F27                     	;# 
  2087  0F28                     	;# 
  2088  0F29                     	;# 
  2089  0F2A                     	;# 
  2090  0F2B                     	;# 
  2091  0F2C                     	;# 
  2092  0F2D                     	;# 
  2093  0F2E                     	;# 
  2094  0F2F                     	;# 
  2095  0F30                     	;# 
  2096  0F31                     	;# 
  2097  0F32                     	;# 
  2098  0F33                     	;# 
  2099  0F34                     	;# 
  2100  0F35                     	;# 
  2101  0F36                     	;# 
  2102  0F37                     	;# 
  2103  0FE4                     	;# 
  2104  0FE5                     	;# 
  2105  0FE6                     	;# 
  2106  0FE7                     	;# 
  2107  0FE8                     	;# 
  2108  0FE9                     	;# 
  2109  0FEA                     	;# 
  2110  0FEB                     	;# 
  2111  0FED                     	;# 
  2112  0FEE                     	;# 
  2113  0FEF                     	;# 
  2114  1FE0                     _romArray_absaddr	set	8160
  2115                           
  2116                           	psect	stringtext1
  2117  1000                     __pstringtext1:	
  2118  1000                     _resetRomData:	
  2119  1000  34AA               	retlw	170
  2120  1001  3455               	retlw	85
  2121  1002  346E               	retlw	110
  2122  1003  3463               	retlw	99
  2123  1004  346F               	retlw	111
  2124  1005  346E               	retlw	110
  2125  1006  3466               	retlw	102
  2126  1007  3469               	retlw	105
  2127  1008  3467               	retlw	103
  2128  1009  3475               	retlw	117
  2129  100A  3472               	retlw	114
  2130  100B  3465               	retlw	101
  2131  100C  3464               	retlw	100
  2132  100D  3400               	retlw	0
  2133  100E  3400               	retlw	0
  2134  100F  3400               	retlw	0
  2135  1010  3400               	retlw	0
  2136  1011  3400               	retlw	0
  2137  1012  3400               	retlw	0
  2138  1013                     __end_of_resetRomData:	
  2139                           
  2140                           	psect	stringtext2
  2141  1013                     __pstringtext2:	
  2142  1013                     _n_ADDRESS_P0:	
  2143  1013  34AD               	retlw	173
  2144  1014  3487               	retlw	135
  2145  1015  3466               	retlw	102
  2146  1016  34BC               	retlw	188
  2147  1017  34BB               	retlw	187
  2148  1018                     __end_of_n_ADDRESS_P0:	
  2149                           
  2150                           	psect	stringtext3
  2151  103A                     __pstringtext3:	
  2152  103A                     _n_ADDRESS_MUL:	
  2153  103A  3421               	retlw	33
  2154  103B                     __end_of_n_ADDRESS_MUL:	
  2155  1FE0                     _romArray_absaddr	set	8160
  2156                           
  2157                           	psect	_romArray_text
  2158  1FE0                     __p_romArray_text:	
  2159  1FE0                     _romArray:	
  2160  1FE0  3400               	retlw	0
  2161  1FE1  3400               	retlw	0
  2162  1FE2  3400               	retlw	0
  2163  1FE3  3400               	retlw	0
  2164  1FE4  3400               	retlw	0
  2165  1FE5  3400               	retlw	0
  2166  1FE6  3400               	retlw	0
  2167  1FE7  3400               	retlw	0
  2168  1FE8  3400               	retlw	0
  2169  1FE9  3400               	retlw	0
  2170  1FEA  3400               	retlw	0
  2171  1FEB  3400               	retlw	0
  2172  1FEC  3400               	retlw	0
  2173  1FED  3400               	retlw	0
  2174  1FEE  3400               	retlw	0
  2175  1FEF  3400               	retlw	0
  2176  1FF0  3400               	retlw	0
  2177  1FF1  3400               	retlw	0
  2178  1FF2  3400               	retlw	0
  2179  1FF3  3400               	retlw	0
  2180  1FF4  3400               	retlw	0
  2181  1FF5  3400               	retlw	0
  2182  1FF6  3400               	retlw	0
  2183  1FF7  3400               	retlw	0
  2184  1FF8  3400               	retlw	0
  2185  1FF9  3400               	retlw	0
  2186  1FFA  3400               	retlw	0
  2187  1FFB  3400               	retlw	0
  2188  1FFC  3400               	retlw	0
  2189  1FFD  3400               	retlw	0
  2190  1FFE  3400               	retlw	0
  2191  1FFF  3400               	retlw	0
  2192  2000                     __end_of_romArray:	
  2193  0003                     _STATUSbits	set	3
  2194  0010                     _PIR0bits	set	16
  2195  000E                     _PORTCbits	set	14
  2196  000C                     _PORTAbits	set	12
  2197  000B                     _INTCONbits	set	11
  2198  0097                     _WDTCONbits	set	151
  2199  009E                     _ADCON1bits	set	158
  2200  009C                     _ADRESH	set	156
  2201  009B                     _ADRESL	set	155
  2202  009D                     _ADCON0bits	set	157
  2203  0090                     _PIE0bits	set	144
  2204  008E                     _TRISCbits	set	142
  2205  008C                     _TRISAbits	set	140
  2206  0117                     _FVRCONbits	set	279
  2207  018E                     _ANSELCbits	set	398
  2208  018C                     _ANSELAbits	set	396
  2209  018E                     _ANSELC	set	398
  2210  018C                     _ANSELA	set	396
  2211  020C                     _WPUAbits	set	524
  2212  020E                     _WPUC	set	526
  2213  020C                     _WPUA	set	524
  2214  0211                     _SSP1BUF	set	529
  2215  0214                     _SSP1STATbits	set	532
  2216  0215                     _SSP1CON1bits	set	533
  2217  028E                     _ODCONC	set	654
  2218  028C                     _ODCONA	set	652
  2219  038E                     _INLVLC	set	910
  2220  038C                     _INLVLA	set	908
  2221  0894                     _PMDATH	set	2196
  2222  0893                     _PMDATL	set	2195
  2223  0896                     _PMCON2	set	2198
  2224  0895                     _PMCON1bits	set	2197
  2225  0892                     _PMADRH	set	2194
  2226  0891                     _PMADRL	set	2193
  2227  0895                     _PMCON1	set	2197
  2228  0919                     _OSCCON1bits	set	2329
  2229  0EA0                     _RC0PPSbits	set	3744
  2230  0EA2                     _RC2PPSbits	set	3746
  2231  0EA1                     _RC1PPSbits	set	3745
  2232                           
  2233                           	psect	stringtext4
  2234  1018                     __pstringtext4:	
  2235  1018                     STR_5:	
  2236  1018  3441               	retlw	65	;'A'
  2237  1019  344E               	retlw	78	;'N'
  2238  101A  3443               	retlw	67	;'C'
  2239  101B  3433               	retlw	51	;'3'
  2240  101C  3400               	retlw	0
  2241                           
  2242                           	psect	stringtext5
  2243  101D                     __pstringtext5:	
  2244  101D                     STR_7:	
  2245  101D  3454               	retlw	84	;'T'
  2246  101E  3445               	retlw	69	;'E'
  2247  101F  344D               	retlw	77	;'M'
  2248  1020  3450               	retlw	80	;'P'
  2249  1021  3400               	retlw	0
  2250                           
  2251                           	psect	stringtext6
  2252  1022                     __pstringtext6:	
  2253  1022                     STR_4:	
  2254  1022  3456               	retlw	86	;'V'
  2255  1023  3442               	retlw	66	;'B'
  2256  1024  3441               	retlw	65	;'A'
  2257  1025  3454               	retlw	84	;'T'
  2258  1026  3400               	retlw	0
  2259                           
  2260                           	psect	stringtext7
  2261  1027                     __pstringtext7:	
  2262  1027                     STR_9:	
  2263  1027  3442               	retlw	66	;'B'
  2264  1028  344F               	retlw	79	;'O'
  2265  1029  344F               	retlw	79	;'O'
  2266  102A  3454               	retlw	84	;'T'
  2267  102B  3400               	retlw	0
  2268                           
  2269                           	psect	stringtext8
  2270  102C                     __pstringtext8:	
  2271  102C                     STR_8:	
  2272  102C  3455               	retlw	85	;'U'
  2273  102D  3448               	retlw	72	;'H'
  2274  102E  3431               	retlw	49	;'1'
  2275  102F  3400               	retlw	0
  2276                           
  2277                           	psect	stringtext9
  2278  1030                     __pstringtext9:	
  2279  1030                     STR_3:	
  2280  1030  3444               	retlw	68	;'D'
  2281  1031  3442               	retlw	66	;'B'
  2282  1032  3447               	retlw	71	;'G'
  2283  1033  3400               	retlw	0
  2284                           
  2285                           	psect	stringtext10
  2286  1034                     __pstringtext10:	
  2287  1034                     STR_6:	
  2288  1034  3446               	retlw	70	;'F'
  2289  1035  3456               	retlw	86	;'V'
  2290  1036  3452               	retlw	82	;'R'
  2291  1037  3400               	retlw	0
  2292                           
  2293                           	psect	stringtext11
  2294  1038                     __pstringtext11:	
  2295  1038                     STR_1:	
  2296  1038  342F               	retlw	47	;'/'
  2297  1039  3400               	retlw	0
  2298                           
  2299                           	psect	stringtext12
  2300  0000                     __pstringtext12:	
  2301  1038                     
  2302                           ; #config settings
  2303  0000                     
  2304                           	psect	cinit
  2305  0011                     start_initialization:	
  2306  0011                     __initialization:	
  2307                           
  2308                           ; Clear objects allocated to BANK0
  2309  0011  3059               	movlw	low __pbssBANK0
  2310  0012  0084               	movwf	4
  2311  0013  3000               	movlw	high __pbssBANK0
  2312  0014  0085               	movwf	5
  2313  0015  3016               	movlw	22
  2314  0016  318F  274D  3180   	fcall	clear_ram0
  2315                           
  2316                           ; Clear objects allocated to BANK1
  2317  0019  0021               	movlb	1	; select bank1
  2318  001A  01E2               	clrf	__pbssBANK1& (0+127)
  2319  001B  01E3               	clrf	(__pbssBANK1+1)& (0+127)
  2320  001C  01E4               	clrf	(__pbssBANK1+2)& (0+127)
  2321  001D  01E5               	clrf	(__pbssBANK1+3)& (0+127)
  2322                           
  2323                           ; Clear objects allocated to BANK2
  2324  001E  3020               	movlw	low __pbssBANK2
  2325  001F  0084               	movwf	4
  2326  0020  3001               	movlw	high __pbssBANK2
  2327  0021  0085               	movwf	5
  2328  0022  3041               	movlw	65
  2329  0023  318F  274D         	fcall	clear_ram0
  2330  0025                     end_of_initialization:	
  2331                           ;End of C runtime variable initialization code
  2332                           
  2333  0025                     __end_of__initialization:	
  2334  0025  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  2335  0026  0020               	movlb	0
  2336  0027  3182  2A37         	ljmp	_main	;jump to C main() function
  2337                           
  2338                           	psect	bssBANK0
  2339  0059                     __pbssBANK0:	
  2340  0059                     _TXPacket:	
  2341  0059                     	ds	1
  2342  005A                     _sleepLoop:	
  2343  005A                     	ds	1
  2344  005B                     _nrf24l01:	
  2345  005B                     	ds	1
  2346  005C                     _romData:	
  2347  005C                     	ds	19
  2348                           
  2349                           	psect	bssBANK1
  2350  00E2                     __pbssBANK1:	
  2351  00E2                     _counter:	
  2352  00E2                     	ds	4
  2353                           
  2354                           	psect	bssBANK2
  2355  0120                     __pbssBANK2:	
  2356  0120                     _romHolder:	
  2357  0120                     	ds	32
  2358  0140                     _RXPacket:	
  2359  0140                     	ds	33
  2360                           
  2361                           	psect	clrtext
  2362  0F4D                     clear_ram0:	
  2363                           ;	Called with FSR0 containing the base address, and
  2364                           ;	WREG with the size to clear
  2365                           
  2366  0F4D  0064               	clrwdt	;clear the watchdog before getting into this loop
  2367  0F4E                     clrloop0:	
  2368  0F4E  0180               	clrf	0	;clear RAM location pointed to by FSR
  2369  0F4F  3101               	addfsr 0,1
  2370  0F50  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  2371  0F51  2F4E               	goto	clrloop0	;have we reached the end yet?
  2372  0F52  3400               	retlw	0	;all done for this memory range, return
  2373                           
  2374                           	psect	cstackBANK1
  2375  00A0                     __pcstackBANK1:	
  2376  00A0                     loop@packet:	
  2377                           
  2378                           ; 33 bytes @ 0x0
  2379  00A0                     	ds	33
  2380  00C1                     main@packet:	
  2381                           
  2382                           ; 33 bytes @ 0x21
  2383  00C1                     	ds	33
  2384                           
  2385                           	psect	cstackCOMMON
  2386  0070                     __pcstackCOMMON:	
  2387  0070                     ?_nrf24l01ISR:	
  2388  0070                     ?_nrf24l01SetRXMode:	
  2389                           ; 1 bytes @ 0x0
  2390                           
  2391  0070                     ?_nrf24l01SendPacket:	
  2392                           ; 1 bytes @ 0x0
  2393                           
  2394  0070                     ?_nrf24l01Init:	
  2395                           ; 1 bytes @ 0x0
  2396                           
  2397  0070                     ?_flashRealod:	
  2398                           ; 1 bytes @ 0x0
  2399                           
  2400  0070                     ?_flashUpdate:	
  2401                           ; 1 bytes @ 0x0
  2402                           
  2403  0070                     ?_nrf24l01CELow:	
  2404                           ; 1 bytes @ 0x0
  2405                           
  2406  0070                     ??_nrf24l01CELow:	
  2407                           ; 1 bytes @ 0x0
  2408                           
  2409  0070                     ?_nrf24l01CEHigh:	
  2410                           ; 1 bytes @ 0x0
  2411                           
  2412  0070                     ??_nrf24l01CEHigh:	
  2413                           ; 1 bytes @ 0x0
  2414                           
  2415  0070                     ?_nrf24l01CSLow:	
  2416                           ; 1 bytes @ 0x0
  2417                           
  2418  0070                     ??_nrf24l01CSLow:	
  2419                           ; 1 bytes @ 0x0
  2420                           
  2421  0070                     ?_nrf24l01CSHigh:	
  2422                           ; 1 bytes @ 0x0
  2423                           
  2424  0070                     ??_nrf24l01CSHigh:	
  2425                           ; 1 bytes @ 0x0
  2426                           
  2427  0070                     ?_nrf24l01InterfaceInit:	
  2428                           ; 1 bytes @ 0x0
  2429                           
  2430  0070                     ?_nrf24l01SPISend:	
  2431                           ; 1 bytes @ 0x0
  2432                           
  2433  0070                     ??_nrf24l01SPISend:	
  2434                           ; 1 bytes @ 0x0
  2435                           
  2436  0070                     ?_nrf24l01SPIStart:	
  2437                           ; 1 bytes @ 0x0
  2438                           
  2439  0070                     ??_nrf24l01SPIStart:	
  2440                           ; 1 bytes @ 0x0
  2441                           
  2442  0070                     ?_nrf24l01SPIEnd:	
  2443                           ; 1 bytes @ 0x0
  2444                           
  2445  0070                     ??_nrf24l01SPIEnd:	
  2446                           ; 1 bytes @ 0x0
  2447                           
  2448  0070                     ?_enableInterrupts:	
  2449                           ; 1 bytes @ 0x0
  2450                           
  2451  0070                     ??_enableInterrupts:	
  2452                           ; 1 bytes @ 0x0
  2453                           
  2454  0070                     ?_exception:	
  2455                           ; 1 bytes @ 0x0
  2456                           
  2457  0070                     ?_ISR:	
  2458                           ; 1 bytes @ 0x0
  2459                           
  2460  0070                     ?_sleep:	
  2461                           ; 1 bytes @ 0x0
  2462                           
  2463  0070                     ?_loop:	
  2464                           ; 1 bytes @ 0x0
  2465                           
  2466  0070                     ?_main:	
  2467                           ; 1 bytes @ 0x0
  2468                           
  2469  0070                     ?_nrf24l01CheckACK:	
  2470                           ; 1 bytes @ 0x0
  2471                           
  2472  0070                     ?_nrf24l01ReceivePacket:	
  2473                           ; 1 bytes @ 0x0
  2474                           
  2475  0070                     ?_nrf24l01InitRegisters:	
  2476                           ; 1 bytes @ 0x0
  2477                           
  2478  0070                     ?i1_flashWriteByte:	
  2479                           ; 1 bytes @ 0x0
  2480                           
  2481  0070                     ?i1_flashUpdate:	
  2482                           ; 1 bytes @ 0x0
  2483                           
  2484  0070                     ?i1_nrf24l01SetRXMode:	
  2485                           ; 1 bytes @ 0x0
  2486                           
  2487  0070                     ?i1_memset:	
  2488                           ; 1 bytes @ 0x0
  2489                           
  2490  0070                     ?_strcmp:	
  2491                           ; 1 bytes @ 0x0
  2492                           
  2493  0070                     ?___wmul:	
  2494                           ; 2 bytes @ 0x0
  2495                           
  2496  0070                     nrf24l01SPISend@data:	
  2497                           ; 2 bytes @ 0x0
  2498                           
  2499  0070                     enableInterrupts@enable:	
  2500                           ; 1 bytes @ 0x0
  2501                           
  2502  0070                     nrf24l01InitRegisters@isReciever:	
  2503                           ; 1 bytes @ 0x0
  2504                           
  2505  0070                     strcmp@s2:	
  2506                           ; 1 bytes @ 0x0
  2507                           
  2508  0070                     ___wmul@multiplier:	
  2509                           ; 1 bytes @ 0x0
  2510                           
  2511  0070                     i1flashWriteByte@offset:	
  2512                           ; 2 bytes @ 0x0
  2513                           
  2514  0070                     i1memset@p1:	
  2515                           ; 2 bytes @ 0x0
  2516                           
  2517                           
  2518                           ; 2 bytes @ 0x0
  2519  0070                     	ds	1
  2520  0071                     ?i1_nrf24l01Send:	
  2521  0071                     i1nrf24l01Send@data:	
  2522                           ; 1 bytes @ 0x1
  2523                           
  2524                           
  2525                           ; 1 bytes @ 0x1
  2526  0071                     	ds	1
  2527  0072                     ??_strcmp:	
  2528  0072                     ??i1_nrf24l01Send:	
  2529                           ; 1 bytes @ 0x2
  2530                           
  2531  0072                     ___wmul@multiplicand:	
  2532                           ; 1 bytes @ 0x2
  2533                           
  2534  0072                     i1flashWriteByte@data:	
  2535                           ; 2 bytes @ 0x2
  2536                           
  2537  0072                     i1memset@c:	
  2538                           ; 2 bytes @ 0x2
  2539                           
  2540                           
  2541                           ; 2 bytes @ 0x2
  2542  0072                     	ds	1
  2543  0073                     strcmp@r:	
  2544  0073                     i1nrf24l01Send@command:	
  2545                           ; 1 bytes @ 0x3
  2546                           
  2547                           
  2548                           ; 1 bytes @ 0x3
  2549  0073                     	ds	1
  2550  0074                     ??___wmul:	
  2551  0074                     ??i1_flashWriteByte:	
  2552                           ; 1 bytes @ 0x4
  2553                           
  2554  0074                     ??i1_nrf24l01SetRXMode:	
  2555                           ; 1 bytes @ 0x4
  2556                           
  2557  0074                     strcmp@s1:	
  2558                           ; 1 bytes @ 0x4
  2559                           
  2560  0074                     ___wmul@product:	
  2561                           ; 1 bytes @ 0x4
  2562                           
  2563  0074                     i1flashWriteByte@address:	
  2564                           ; 2 bytes @ 0x4
  2565                           
  2566  0074                     i1memset@n:	
  2567                           ; 2 bytes @ 0x4
  2568                           
  2569                           
  2570                           ; 2 bytes @ 0x4
  2571  0074                     	ds	1
  2572  0075                     i1nrf24l01SetRXMode@config:	
  2573                           
  2574                           ; 1 bytes @ 0x5
  2575  0075                     	ds	1
  2576  0076                     ??i1_flashUpdate:	
  2577  0076                     ??i1_memset:	
  2578                           ; 1 bytes @ 0x6
  2579                           
  2580  0076                     i1nrf24l01SetRXMode@rxMode:	
  2581                           ; 1 bytes @ 0x6
  2582                           
  2583  0076                     i1memset@p:	
  2584                           ; 1 bytes @ 0x6
  2585                           
  2586                           
  2587                           ; 2 bytes @ 0x6
  2588  0076                     	ds	1
  2589  0077                     ??_nrf24l01CheckACK:	
  2590                           
  2591                           ; 1 bytes @ 0x7
  2592  0077                     	ds	1
  2593  0078                     ??_nrf24l01ReceivePacket:	
  2594  0078                     i1flashUpdate@i:	
  2595                           ; 1 bytes @ 0x8
  2596                           
  2597                           
  2598                           ; 2 bytes @ 0x8
  2599  0078                     	ds	1
  2600  0079                     nrf24l01ReceivePacket@width:	
  2601                           
  2602                           ; 1 bytes @ 0x9
  2603  0079                     	ds	1
  2604  007A                     ??_exception:	
  2605  007A                     nrf24l01ReceivePacket@i:	
  2606                           ; 1 bytes @ 0xA
  2607                           
  2608                           
  2609                           ; 1 bytes @ 0xA
  2610  007A                     	ds	2
  2611  007C                     exception@exception:	
  2612                           
  2613                           ; 1 bytes @ 0xC
  2614  007C                     	ds	1
  2615  007D                     ??_nrf24l01ISR:	
  2616                           
  2617                           ; 1 bytes @ 0xD
  2618  007D                     	ds	1
  2619  007E                     ??_ISR:	
  2620                           
  2621                           	psect	cstackBANK0
  2622  0020                     __pcstackBANK0:	
  2623                           ; 1 bytes @ 0xE
  2624                           
  2625  0020                     nrf24l01ISR@status:	
  2626                           
  2627                           ; 1 bytes @ 0x0
  2628  0020                     	ds	1
  2629  0021                     ?_strcat:	
  2630  0021                     ?_strcpy:	
  2631                           ; 1 bytes @ 0x1
  2632                           
  2633  0021                     ?_flashWriteByte:	
  2634                           ; 1 bytes @ 0x1
  2635                           
  2636  0021                     ??_nrf24l01InterfaceInit:	
  2637                           ; 1 bytes @ 0x1
  2638                           
  2639  0021                     ??_sleep:	
  2640                           ; 1 bytes @ 0x1
  2641                           
  2642  0021                     ?_nrf24l01Send:	
  2643                           ; 1 bytes @ 0x1
  2644                           
  2645  0021                     ?_memset:	
  2646                           ; 1 bytes @ 0x1
  2647                           
  2648  0021                     ?_strlen:	
  2649                           ; 2 bytes @ 0x1
  2650                           
  2651  0021                     ?_flashReadByte:	
  2652                           ; 2 bytes @ 0x1
  2653                           
  2654  0021                     ?___lmul:	
  2655                           ; 2 bytes @ 0x1
  2656                           
  2657  0021                     ?___lldiv:	
  2658                           ; 4 bytes @ 0x1
  2659                           
  2660  0021                     ?___llmod:	
  2661                           ; 4 bytes @ 0x1
  2662                           
  2663  0021                     nrf24l01Send@data:	
  2664                           ; 4 bytes @ 0x1
  2665                           
  2666  0021                     flashWriteByte@offset:	
  2667                           ; 1 bytes @ 0x1
  2668                           
  2669  0021                     flashReadByte@offset:	
  2670                           ; 2 bytes @ 0x1
  2671                           
  2672  0021                     memset@p1:	
  2673                           ; 2 bytes @ 0x1
  2674                           
  2675  0021                     strcat@from:	
  2676                           ; 2 bytes @ 0x1
  2677                           
  2678  0021                     strcpy@from:	
  2679                           ; 2 bytes @ 0x1
  2680                           
  2681  0021                     ___lmul@multiplier:	
  2682                           ; 2 bytes @ 0x1
  2683                           
  2684  0021                     ___lldiv@divisor:	
  2685                           ; 4 bytes @ 0x1
  2686                           
  2687  0021                     ___llmod@divisor:	
  2688                           ; 4 bytes @ 0x1
  2689                           
  2690                           
  2691                           ; 4 bytes @ 0x1
  2692  0021                     	ds	1
  2693  0022                     ??_nrf24l01Send:	
  2694                           
  2695                           ; 1 bytes @ 0x2
  2696  0022                     	ds	1
  2697  0023                     ??_strcat:	
  2698  0023                     ??_strcpy:	
  2699                           ; 1 bytes @ 0x3
  2700                           
  2701  0023                     ??_strlen:	
  2702                           ; 1 bytes @ 0x3
  2703                           
  2704  0023                     ??_flashReadByte:	
  2705                           ; 1 bytes @ 0x3
  2706                           
  2707  0023                     nrf24l01Send@command:	
  2708                           ; 1 bytes @ 0x3
  2709                           
  2710  0023                     flashWriteByte@data:	
  2711                           ; 1 bytes @ 0x3
  2712                           
  2713  0023                     memset@c:	
  2714                           ; 2 bytes @ 0x3
  2715                           
  2716                           
  2717                           ; 2 bytes @ 0x3
  2718  0023                     	ds	1
  2719  0024                     ??_nrf24l01SetRXMode:	
  2720  0024                     ??_nrf24l01InitRegisters:	
  2721                           ; 1 bytes @ 0x4
  2722                           
  2723  0024                     strcat@cp:	
  2724                           ; 1 bytes @ 0x4
  2725                           
  2726  0024                     strcpy@to:	
  2727                           ; 1 bytes @ 0x4
  2728                           
  2729                           
  2730                           ; 1 bytes @ 0x4
  2731  0024                     	ds	1
  2732  0025                     ??_flashWriteByte:	
  2733  0025                     nrf24l01SetRXMode@config:	
  2734                           ; 1 bytes @ 0x5
  2735                           
  2736  0025                     nrf24l01InitRegisters@channel:	
  2737                           ; 1 bytes @ 0x5
  2738                           
  2739  0025                     strcat@to:	
  2740                           ; 1 bytes @ 0x5
  2741                           
  2742  0025                     strcpy@cp:	
  2743                           ; 1 bytes @ 0x5
  2744                           
  2745  0025                     flashWriteByte@address:	
  2746                           ; 1 bytes @ 0x5
  2747                           
  2748  0025                     memset@n:	
  2749                           ; 2 bytes @ 0x5
  2750                           
  2751  0025                     ___lmul@multiplicand:	
  2752                           ; 2 bytes @ 0x5
  2753                           
  2754  0025                     ___lldiv@dividend:	
  2755                           ; 4 bytes @ 0x5
  2756                           
  2757  0025                     ___llmod@dividend:	
  2758                           ; 4 bytes @ 0x5
  2759                           
  2760                           
  2761                           ; 4 bytes @ 0x5
  2762  0025                     	ds	1
  2763  0026                     nrf24l01SetRXMode@rxMode:	
  2764  0026                     nrf24l01InitRegisters@setupAW:	
  2765                           ; 1 bytes @ 0x6
  2766                           
  2767  0026                     flashReadByte@result:	
  2768                           ; 1 bytes @ 0x6
  2769                           
  2770                           
  2771                           ; 2 bytes @ 0x6
  2772  0026                     	ds	1
  2773  0027                     ??_memset:	
  2774  0027                     ??_flashUpdate:	
  2775                           ; 1 bytes @ 0x7
  2776                           
  2777  0027                     nrf24l01InitRegisters@feature:	
  2778                           ; 1 bytes @ 0x7
  2779                           
  2780  0027                     strlen@s:	
  2781                           ; 1 bytes @ 0x7
  2782                           
  2783  0027                     memset@p:	
  2784                           ; 1 bytes @ 0x7
  2785                           
  2786                           
  2787                           ; 2 bytes @ 0x7
  2788  0027                     	ds	1
  2789  0028                     nrf24l01InitRegisters@rfSetup:	
  2790  0028                     strlen@cp:	
  2791                           ; 1 bytes @ 0x8
  2792                           
  2793  0028                     flashReadByte@address:	
  2794                           ; 1 bytes @ 0x8
  2795                           
  2796                           
  2797                           ; 2 bytes @ 0x8
  2798  0028                     	ds	1
  2799  0029                     ??_nrf24l01SendPacket:	
  2800  0029                     ??___lmul:	
  2801                           ; 1 bytes @ 0x9
  2802                           
  2803  0029                     ??___lldiv:	
  2804                           ; 1 bytes @ 0x9
  2805                           
  2806  0029                     ??___llmod:	
  2807                           ; 1 bytes @ 0x9
  2808                           
  2809  0029                     nrf24l01InitRegisters@status:	
  2810                           ; 1 bytes @ 0x9
  2811                           
  2812  0029                     flashUpdate@i:	
  2813                           ; 1 bytes @ 0x9
  2814                           
  2815  0029                     ___lmul@product:	
  2816                           ; 2 bytes @ 0x9
  2817                           
  2818                           
  2819                           ; 4 bytes @ 0x9
  2820  0029                     	ds	1
  2821  002A                     ??_flashRealod:	
  2822  002A                     nrf24l01InitRegisters@enRXAddr:	
  2823                           ; 1 bytes @ 0xA
  2824                           
  2825  002A                     ___llmod@counter:	
  2826                           ; 1 bytes @ 0xA
  2827                           
  2828  002A                     ___lldiv@quotient:	
  2829                           ; 1 bytes @ 0xA
  2830                           
  2831                           
  2832                           ; 4 bytes @ 0xA
  2833  002A                     	ds	1
  2834  002B                     nrf24l01SendPacket@Packet:	
  2835  002B                     nrf24l01InitRegisters@enAA:	
  2836                           ; 1 bytes @ 0xB
  2837                           
  2838  002B                     flashRealod@i:	
  2839                           ; 1 bytes @ 0xB
  2840                           
  2841                           
  2842                           ; 2 bytes @ 0xB
  2843  002B                     	ds	1
  2844  002C                     nrf24l01SendPacket@i:	
  2845  002C                     nrf24l01InitRegisters@DynPD:	
  2846                           ; 1 bytes @ 0xC
  2847                           
  2848                           
  2849                           ; 1 bytes @ 0xC
  2850  002C                     	ds	1
  2851  002D                     nrf24l01InitRegisters@config:	
  2852                           
  2853                           ; 1 bytes @ 0xD
  2854  002D                     	ds	1
  2855  002E                     ??_nrf24l01Init:	
  2856  002E                     ___lldiv@counter:	
  2857                           ; 1 bytes @ 0xE
  2858                           
  2859                           
  2860                           ; 1 bytes @ 0xE
  2861  002E                     	ds	1
  2862  002F                     ?_ultoa:	
  2863  002F                     ?_getADCValue:	
  2864                           ; 1 bytes @ 0xF
  2865                           
  2866  002F                     getADCValue@divider:	
  2867                           ; 4 bytes @ 0xF
  2868                           
  2869  002F                     ultoa@val:	
  2870                           ; 4 bytes @ 0xF
  2871                           
  2872                           
  2873                           ; 4 bytes @ 0xF
  2874  002F                     	ds	1
  2875  0030                     nrf24l01Init@isReciever:	
  2876                           
  2877                           ; 1 bytes @ 0x10
  2878  0030                     	ds	3
  2879  0033                     ??_getADCValue:	
  2880  0033                     ultoa@base:	
  2881                           ; 1 bytes @ 0x13
  2882                           
  2883                           
  2884                           ; 2 bytes @ 0x13
  2885  0033                     	ds	2
  2886  0035                     ??_ultoa:	
  2887                           
  2888                           ; 1 bytes @ 0x15
  2889  0035                     	ds	1
  2890  0036                     ultoa@v:	
  2891                           
  2892                           ; 4 bytes @ 0x16
  2893  0036                     	ds	1
  2894  0037                     getADCValue@channel:	
  2895                           
  2896                           ; 1 bytes @ 0x17
  2897  0037                     	ds	1
  2898  0038                     getADCValue@adcLoop:	
  2899                           
  2900                           ; 1 bytes @ 0x18
  2901  0038                     	ds	1
  2902  0039                     getADCValue@adcSum:	
  2903                           
  2904                           ; 4 bytes @ 0x19
  2905  0039                     	ds	1
  2906  003A                     ultoa@c:	
  2907                           
  2908                           ; 1 bytes @ 0x1A
  2909  003A                     	ds	1
  2910  003B                     ultoa@buf:	
  2911                           
  2912                           ; 1 bytes @ 0x1B
  2913  003B                     	ds	2
  2914  003D                     ?_setMessage:	
  2915  003D                     setMessage@topic:	
  2916                           ; 1 bytes @ 0x1D
  2917                           
  2918                           
  2919                           ; 2 bytes @ 0x1D
  2920  003D                     	ds	2
  2921  003F                     setMessage@value:	
  2922                           
  2923                           ; 4 bytes @ 0x1F
  2924  003F                     	ds	4
  2925  0043                     ??_setMessage:	
  2926  0043                     setMessage@tempString:	
  2927                           ; 1 bytes @ 0x23
  2928                           
  2929                           
  2930                           ; 16 bytes @ 0x23
  2931  0043                     	ds	16
  2932  0053                     setMessage@packet:	
  2933                           
  2934                           ; 1 bytes @ 0x33
  2935  0053                     	ds	1
  2936  0054                     ??_loop:	
  2937                           
  2938                           ; 1 bytes @ 0x34
  2939  0054                     	ds	4
  2940  0058                     ??_main:	
  2941                           
  2942                           ; 1 bytes @ 0x38
  2943  0058                     	ds	1
  2944                           
  2945                           	psect	maintext
  2946  0237                     __pmaintext:	
  2947 ;;
  2948 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  2949 ;;
  2950 ;; *************** function _main *****************
  2951 ;; Defined at:
  2952 ;;		line 132 in file "main.c"
  2953 ;; Parameters:    Size  Location     Type
  2954 ;;		None
  2955 ;; Auto vars:     Size  Location     Type
  2956 ;;  packet         33   33[BANK1 ] struct .
  2957 ;; Return value:  Size  Location     Type
  2958 ;;                  1    wreg      void 
  2959 ;; Registers used:
  2960 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2961 ;; Tracked objects:
  2962 ;;		On entry : B1F/0
  2963 ;;		On exit  : 0/0
  2964 ;;		Unchanged: 0/0
  2965 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2966 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2967 ;;      Locals:         0       0      33       0       0       0       0       0       0       0       0       0       
      +0       0
  2968 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2969 ;;      Totals:         0       1      33       0       0       0       0       0       0       0       0       0       
      +0       0
  2970 ;;Total ram usage:       34 bytes
  2971 ;; Hardware stack levels required when called:   13
  2972 ;; This function calls:
  2973 ;;		_flashRealod
  2974 ;;		_flashUpdate
  2975 ;;		_loop
  2976 ;;		_nrf24l01Init
  2977 ;;		_nrf24l01SendPacket
  2978 ;;		_setMessage
  2979 ;;		_sleep
  2980 ;;		_strcpy
  2981 ;; This function is called by:
  2982 ;;		Startup code after reset
  2983 ;; This function uses a non-reentrant model
  2984 ;;
  2985                           
  2986                           
  2987                           ;psect for function _main
  2988  0237                     _main:	
  2989                           
  2990                           ;main.c: 135: ANSELA = 0x00;
  2991                           
  2992                           ;incstack = 0
  2993                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  2994  0237  0023               	movlb	3	; select bank3
  2995  0238  018C               	clrf	12	;volatile
  2996                           
  2997                           ;main.c: 136: ANSELC = 0x00;
  2998  0239  018E               	clrf	14	;volatile
  2999                           
  3000                           ;main.c: 138: ODCONA = 0x00;
  3001  023A  0025               	movlb	5	; select bank5
  3002  023B  018C               	clrf	12	;volatile
  3003                           
  3004                           ;main.c: 139: ODCONC = 0x00;
  3005  023C  018E               	clrf	14	;volatile
  3006                           
  3007                           ;main.c: 144: INLVLA = 0x00;
  3008  023D  0027               	movlb	7	; select bank7
  3009  023E  018C               	clrf	12	;volatile
  3010                           
  3011                           ;main.c: 145: INLVLC = 0x00;
  3012  023F  018E               	clrf	14	;volatile
  3013                           
  3014                           ;main.c: 147: WPUA = 0x00;
  3015  0240  0024               	movlb	4	; select bank4
  3016  0241  018C               	clrf	12	;volatile
  3017                           
  3018                           ;main.c: 148: WPUC = 0x00;
  3019  0242  018E               	clrf	14	;volatile
  3020                           
  3021                           ;main.c: 150: TRISCbits.TRISC5 = 0;
  3022  0243  0021               	movlb	1	; select bank1
  3023  0244  128E               	bcf	14,5	;volatile
  3024                           
  3025                           ;main.c: 151: TRISCbits.TRISC4 = 0;
  3026  0245  120E               	bcf	14,4	;volatile
  3027                           
  3028                           ;main.c: 153: PORTCbits.RC4 = 0;
  3029  0246  0020               	movlb	0	; select bank0
  3030  0247  120E               	bcf	14,4	;volatile
  3031                           
  3032                           ;main.c: 160: INTCONbits.PEIE = 0;
  3033  0248  130B               	bcf	11,6	;volatile
  3034                           
  3035                           ;main.c: 161: INTCONbits.GIE = 0;
  3036  0249  138B               	bcf	11,7	;volatile
  3037                           
  3038                           ;main.c: 163: OSCCON1bits.NOSC = 0b000;
  3039  024A  308F               	movlw	-113
  3040  024B  0032               	movlb	18	; select bank18
  3041  024C  0599               	andwf	25,f	;volatile
  3042                           
  3043                           ;main.c: 164: OSCCON1bits.NDIV = 0b000;
  3044  024D  30F0               	movlw	-16
  3045  024E  0599               	andwf	25,f	;volatile
  3046                           
  3047                           ;main.c: 166: _delay((unsigned long)((10)*(16000000/4000.0)));
  3048  024F  3034               	movlw	52
  3049  0250  0020               	movlb	0	; select bank0
  3050  0251  00D8               	movwf	??_main
  3051  0252  30F1               	movlw	241
  3052  0253                     u1497:	
  3053  0253  0B89               	decfsz	9,f
  3054  0254  2A53               	goto	u1497
  3055  0255  0BD8               	decfsz	??_main,f
  3056  0256  2A53               	goto	u1497
  3057  0257  3200               	nop2
  3058                           
  3059                           ;main.c: 168: flashRealod();
  3060  0258  3187  277D  3182   	fcall	_flashRealod
  3061                           
  3062                           ;main.c: 172: if (romData.check != 0x06){
  3063  025B  3006               	movlw	6
  3064  025C  0020               	movlb	0	; select bank0
  3065  025D  065C               	xorwf	_romData,w
  3066  025E  1903               	btfsc	3,2
  3067  025F  2A72               	goto	l2855
  3068                           
  3069                           ;main.c: 173: romData.check = 0x06;
  3070  0260  3006               	movlw	6
  3071  0261  00D8               	movwf	??_main
  3072  0262  0858               	movf	??_main,w
  3073  0263  00DC               	movwf	_romData
  3074                           
  3075                           ;main.c: 174: strcpy(romData.name, "UH1");
  3076  0264  302C               	movlw	low (STR_8| (0+32768))
  3077  0265  00A1               	movwf	strcpy@from
  3078  0266  3090               	movlw	high (STR_8| (0+32768))
  3079  0267  00A2               	movwf	strcpy@from+1
  3080  0268  305D               	movlw	(low ((_romData| 0+1)))& (0+255)
  3081  0269  3187  27D9  3182   	fcall	_strcpy
  3082                           
  3083                           ;main.c: 175: romData.bootMode = 0x00;
  3084  026C  0020               	movlb	0	; select bank0
  3085  026D  01ED               	clrf	_romData+17
  3086  026E  01EE               	clrf	_romData+18
  3087                           
  3088                           ;main.c: 176: flashUpdate();
  3089  026F  3187  2719  3182   	fcall	_flashUpdate
  3090  0272                     l2855:	
  3091                           
  3092                           ;main.c: 177: };main.c: 179: nrf24l01Init(0);
  3093  0272  3000               	movlw	0
  3094  0273  3186  267E  3182   	fcall	_nrf24l01Init
  3095                           
  3096                           ;main.c: 186: ADCON0bits.ADON = 0;
  3097  0276  0021               	movlb	1	; select bank1
  3098  0277  101D               	bcf	29,0	;volatile
  3099                           
  3100                           ;main.c: 189: ANSELAbits.ANSA4 = 1;
  3101  0278  0023               	movlb	3	; select bank3
  3102  0279  160C               	bsf	12,4	;volatile
  3103                           
  3104                           ;main.c: 190: TRISAbits.TRISA4 = 1;
  3105  027A  0021               	movlb	1	; select bank1
  3106  027B  160C               	bsf	12,4	;volatile
  3107                           
  3108                           ;main.c: 191: WPUAbits.WPUA4 = 0;
  3109  027C  0024               	movlb	4	; select bank4
  3110  027D  120C               	bcf	12,4	;volatile
  3111                           
  3112                           ;main.c: 194: ANSELCbits.ANSC3 = 1;
  3113  027E  0023               	movlb	3	; select bank3
  3114  027F  158E               	bsf	14,3	;volatile
  3115                           
  3116                           ;main.c: 195: TRISCbits.TRISC3 = 1;
  3117  0280  0021               	movlb	1	; select bank1
  3118  0281  158E               	bsf	14,3	;volatile
  3119                           
  3120                           ;main.c: 198: FVRCONbits.TSEN = 0;
  3121  0282  0022               	movlb	2	; select bank2
  3122  0283  1297               	bcf	23,5	;volatile
  3123                           
  3124                           ;main.c: 199: FVRCONbits.TSRNG = 0;
  3125  0284  1217               	bcf	23,4	;volatile
  3126                           
  3127                           ;main.c: 200: FVRCONbits.TSEN = 1;
  3128  0285  1697               	bsf	23,5	;volatile
  3129                           
  3130                           ;main.c: 203: FVRCONbits.FVREN = 0;
  3131  0286  1397               	bcf	23,7	;volatile
  3132                           
  3133                           ;main.c: 204: FVRCONbits.ADFVR = 1;
  3134  0287  0817               	movf	23,w	;volatile
  3135  0288  39FC               	andlw	-4
  3136  0289  3801               	iorlw	1
  3137  028A  0097               	movwf	23	;volatile
  3138                           
  3139                           ;main.c: 205: FVRCONbits.FVREN = 1;
  3140  028B  1797               	bsf	23,7	;volatile
  3141                           
  3142                           ;main.c: 207: ADCON1bits.ADCS = 0b111;
  3143  028C  3070               	movlw	112
  3144  028D  0021               	movlb	1	; select bank1
  3145  028E  049E               	iorwf	30,f	;volatile
  3146                           
  3147                           ;main.c: 208: ADCON1bits.ADFM = 1;
  3148  028F  179E               	bsf	30,7	;volatile
  3149                           
  3150                           ;main.c: 209: ADCON1bits.ADNREF = 0b0;
  3151  0290  111E               	bcf	30,2	;volatile
  3152                           
  3153                           ;main.c: 210: ADCON1bits.ADPREF = 0b00;
  3154  0291  30FC               	movlw	-4
  3155  0292  059E               	andwf	30,f	;volatile
  3156                           
  3157                           ;main.c: 212: ADCON0bits.CHS = 3;
  3158  0293  081D               	movf	29,w	;volatile
  3159  0294  3903               	andlw	-253
  3160  0295  380C               	iorlw	12
  3161  0296  009D               	movwf	29	;volatile
  3162                           
  3163                           ;main.c: 213: ADCON0bits.ADON = 1;
  3164  0297  141D               	bsf	29,0	;volatile
  3165                           
  3166                           ;main.c: 218: TRISAbits.TRISA2 = 1;
  3167  0298  150C               	bsf	12,2	;volatile
  3168                           
  3169                           ;main.c: 219: PIE0bits.INTE = 1;
  3170  0299  1410               	bsf	16,0	;volatile
  3171                           
  3172                           ;main.c: 220: INTCONbits.INTEDG = 0;
  3173  029A  100B               	bcf	11,0	;volatile
  3174                           
  3175                           ;main.c: 224: WDTCONbits.WDTPS = 9;
  3176  029B  0817               	movf	23,w	;volatile
  3177  029C  39C1               	andlw	-63
  3178  029D  3812               	iorlw	18
  3179  029E  0097               	movwf	23	;volatile
  3180                           
  3181                           ;main.c: 227: TRISAbits.TRISA5 = 0;
  3182  029F  128C               	bcf	12,5	;volatile
  3183                           
  3184                           ;main.c: 228: PORTAbits.RA5 = 0;
  3185  02A0  0020               	movlb	0	; select bank0
  3186  02A1  128C               	bcf	12,5	;volatile
  3187                           
  3188                           ;main.c: 231: INTCONbits.PEIE = 1;
  3189  02A2  170B               	bsf	11,6	;volatile
  3190                           
  3191                           ;main.c: 232: INTCONbits.GIE = 1;
  3192  02A3  178B               	bsf	11,7	;volatile
  3193                           
  3194                           ;main.c: 234: nrf24l01Packet_t packet;;main.c: 236: setMessage(&packet, "BOOT", romData.
      +                          bootMode);
  3195  02A4  3027               	movlw	low (STR_9| (0+32768))
  3196  02A5  00BD               	movwf	setMessage@topic
  3197  02A6  3090               	movlw	high (STR_9| (0+32768))
  3198  02A7  00BE               	movwf	setMessage@topic+1
  3199  02A8  086D               	movf	_romData+17,w
  3200  02A9  00BF               	movwf	setMessage@value
  3201  02AA  086E               	movf	_romData+18,w
  3202  02AB  00C0               	movwf	setMessage@value+1
  3203  02AC  01C1               	clrf	setMessage@value+2
  3204  02AD  01C2               	clrf	setMessage@value+3
  3205  02AE  30C1               	movlw	(low (main@packet| 0))& (0+255)
  3206  02AF  3183  23D1  3182   	fcall	_setMessage
  3207                           
  3208                           ;main.c: 237: packet.packetData.byte = 0;
  3209  02B2  0021               	movlb	1	; select bank1
  3210  02B3  01C1               	clrf	main@packet^(0+128)
  3211                           
  3212                           ;main.c: 238: packet.packetData.ACKRequest = 0;
  3213  02B4  10C1               	bcf	main@packet^(0+128),1
  3214                           
  3215                           ;main.c: 239: nrf24l01SendPacket(&packet);
  3216  02B5  30C1               	movlw	(low (main@packet| 0))& (0+255)
  3217  02B6  3181  21A7  3182   	fcall	_nrf24l01SendPacket
  3218                           
  3219                           ;main.c: 240: sleep();
  3220  02B9  318F  276F  3182   	fcall	_sleep
  3221  02BC                     l2919:	
  3222                           ;main.c: 242: while(1){
  3223                           
  3224                           
  3225                           ;main.c: 243: loop();
  3226  02BC  3180  2029  3182   	fcall	_loop
  3227  02BF  2ABC               	goto	l2919
  3228  02C0                     __end_of_main:	
  3229                           ;main.c: 244: };main.c: 246: return;
  3230                           
  3231                           
  3232                           	psect	text1
  3233  07D9                     __ptext1:	
  3234 ;; *************** function _strcpy *****************
  3235 ;; Defined at:
  3236 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\strcpy.c"
  3237 ;; Parameters:    Size  Location     Type
  3238 ;;  to              1    wreg     PTR unsigned char 
  3239 ;;		 -> romData(19), 
  3240 ;;  from            2    1[BANK0 ] PTR const unsigned char 
  3241 ;;		 -> STR_8(4), 
  3242 ;; Auto vars:     Size  Location     Type
  3243 ;;  to              1    4[BANK0 ] PTR unsigned char 
  3244 ;;		 -> romData(19), 
  3245 ;;  cp              1    5[BANK0 ] PTR unsigned char 
  3246 ;;		 -> romData(19), 
  3247 ;; Return value:  Size  Location     Type
  3248 ;;                  1    wreg      PTR unsigned char 
  3249 ;; Registers used:
  3250 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath
  3251 ;; Tracked objects:
  3252 ;;		On entry : 0/0
  3253 ;;		On exit  : 0/0
  3254 ;;		Unchanged: 0/0
  3255 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3256 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3257 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3258 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3259 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3260 ;;Total ram usage:        5 bytes
  3261 ;; Hardware stack levels used:    1
  3262 ;; Hardware stack levels required when called:    7
  3263 ;; This function calls:
  3264 ;;		Nothing
  3265 ;; This function is called by:
  3266 ;;		_main
  3267 ;; This function uses a non-reentrant model
  3268 ;;
  3269                           
  3270                           
  3271                           ;psect for function _strcpy
  3272  07D9                     _strcpy:	
  3273                           
  3274                           ;incstack = 0
  3275                           ; Regs used in _strcpy: [wreg-fsr1h+status,2+status,0+pclath]
  3276                           ;strcpy@to stored from wreg
  3277  07D9  0020               	movlb	0	; select bank0
  3278  07DA  00A4               	movwf	strcpy@to
  3279  07DB  0824               	movf	strcpy@to,w
  3280  07DC  00A3               	movwf	??_strcpy
  3281  07DD  0823               	movf	??_strcpy,w
  3282  07DE  00A5               	movwf	strcpy@cp
  3283  07DF                     l2561:	
  3284  07DF  0825               	movf	strcpy@cp,w
  3285  07E0  0086               	movwf	6
  3286  07E1  0187               	clrf	7
  3287  07E2  0821               	movf	strcpy@from,w
  3288  07E3  0084               	movwf	4
  3289  07E4  0822               	movf	strcpy@from+1,w
  3290  07E5  0085               	movwf	5
  3291  07E6  0800               	movf	0,w	;code access
  3292  07E7  3FC0               	movwi [0]fsr1
  3293  07E8  0889               	movf	9,f
  3294  07E9  1903               	btfsc	3,2
  3295  07EA  0008               	return
  3296  07EB  3001               	movlw	1
  3297  07EC  00A3               	movwf	??_strcpy
  3298  07ED  0823               	movf	??_strcpy,w
  3299  07EE  07A5               	addwf	strcpy@cp,f
  3300  07EF  3001               	movlw	1
  3301  07F0  07A1               	addwf	strcpy@from,f
  3302  07F1  3000               	movlw	0
  3303  07F2  3DA2               	addwfc	strcpy@from+1,f
  3304  07F3  2FDF               	goto	l2561
  3305  07F4                     __end_of_strcpy:	
  3306                           ;	Return value of _strcpy is never used
  3307                           
  3308                           
  3309                           	psect	text2
  3310  067E                     __ptext2:	
  3311 ;; *************** function _nrf24l01Init *****************
  3312 ;; Defined at:
  3313 ;;		line 363 in file "nrf24l01.c"
  3314 ;; Parameters:    Size  Location     Type
  3315 ;;  isReciever      1    wreg     unsigned char 
  3316 ;; Auto vars:     Size  Location     Type
  3317 ;;  isReciever      1   16[BANK0 ] unsigned char 
  3318 ;; Return value:  Size  Location     Type
  3319 ;;                  1    wreg      void 
  3320 ;; Registers used:
  3321 ;;		wreg, status,2, status,0, pclath, cstack
  3322 ;; Tracked objects:
  3323 ;;		On entry : 0/0
  3324 ;;		On exit  : 0/0
  3325 ;;		Unchanged: 0/0
  3326 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3327 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3328 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3329 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3330 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3331 ;;Total ram usage:        3 bytes
  3332 ;; Hardware stack levels used:    1
  3333 ;; Hardware stack levels required when called:   11
  3334 ;; This function calls:
  3335 ;;		_nrf24l01CEHigh
  3336 ;;		_nrf24l01CELow
  3337 ;;		_nrf24l01InitRegisters
  3338 ;;		_nrf24l01InterfaceInit
  3339 ;; This function is called by:
  3340 ;;		_main
  3341 ;; This function uses a non-reentrant model
  3342 ;;
  3343                           
  3344                           
  3345                           ;psect for function _nrf24l01Init
  3346  067E                     _nrf24l01Init:	
  3347                           
  3348                           ;incstack = 0
  3349                           ; Regs used in _nrf24l01Init: [wreg+status,2+status,0+pclath+cstack]
  3350                           ;nrf24l01Init@isReciever stored from wreg
  3351  067E  0020               	movlb	0	; select bank0
  3352  067F  00B0               	movwf	nrf24l01Init@isReciever
  3353                           
  3354                           ;nrf24l01.c: 366: nrf24l01InterfaceInit();
  3355  0680  3187  27BD  3186   	fcall	_nrf24l01InterfaceInit
  3356                           
  3357                           ;nrf24l01.c: 371: nrf24l01CELow();
  3358  0683  318F  2747  3186   	fcall	_nrf24l01CELow
  3359                           
  3360                           ;nrf24l01.c: 373: _delay((unsigned long)((50000)*(16000000/4000000.0)));
  3361  0686  3002               	movlw	2
  3362  0687  0020               	movlb	0	; select bank0
  3363  0688  00AF               	movwf	??_nrf24l01Init+1
  3364  0689  3004               	movlw	4
  3365  068A  00AE               	movwf	??_nrf24l01Init
  3366  068B  30BA               	movlw	186
  3367  068C                     u1507:	
  3368  068C  0B89               	decfsz	9,f
  3369  068D  2E8C               	goto	u1507
  3370  068E  0BAE               	decfsz	??_nrf24l01Init,f
  3371  068F  2E8C               	goto	u1507
  3372  0690  0BAF               	decfsz	??_nrf24l01Init+1,f
  3373  0691  2E8C               	goto	u1507
  3374  0692  0000               	nop
  3375                           
  3376                           ;nrf24l01.c: 375: nrf24l01InitRegisters(isReciever);
  3377  0693  0020               	movlb	0	; select bank0
  3378  0694  0830               	movf	nrf24l01Init@isReciever,w
  3379  0695  3180  20FD  3186   	fcall	_nrf24l01InitRegisters
  3380                           
  3381                           ;nrf24l01.c: 377: _delay((unsigned long)((50000)*(16000000/4000000.0)));
  3382  0698  3002               	movlw	2
  3383  0699  0020               	movlb	0	; select bank0
  3384  069A  00AF               	movwf	??_nrf24l01Init+1
  3385  069B  3004               	movlw	4
  3386  069C  00AE               	movwf	??_nrf24l01Init
  3387  069D  30BA               	movlw	186
  3388  069E                     u1517:	
  3389  069E  0B89               	decfsz	9,f
  3390  069F  2E9E               	goto	u1517
  3391  06A0  0BAE               	decfsz	??_nrf24l01Init,f
  3392  06A1  2E9E               	goto	u1517
  3393  06A2  0BAF               	decfsz	??_nrf24l01Init+1,f
  3394  06A3  2E9E               	goto	u1517
  3395  06A4  0000               	nop
  3396                           
  3397                           ;nrf24l01.c: 379: nrf24l01CEHigh();
  3398  06A5  318F  2744         	fcall	_nrf24l01CEHigh
  3399  06A7  0008               	return
  3400  06A8                     __end_of_nrf24l01Init:	
  3401                           
  3402                           	psect	text3
  3403  07BD                     __ptext3:	
  3404 ;; *************** function _nrf24l01InterfaceInit *****************
  3405 ;; Defined at:
  3406 ;;		line 28 in file "interface.c"
  3407 ;; Parameters:    Size  Location     Type
  3408 ;;		None
  3409 ;; Auto vars:     Size  Location     Type
  3410 ;;		None
  3411 ;; Return value:  Size  Location     Type
  3412 ;;                  1    wreg      void 
  3413 ;; Registers used:
  3414 ;;		wreg, status,2, status,0
  3415 ;; Tracked objects:
  3416 ;;		On entry : 0/0
  3417 ;;		On exit  : 0/0
  3418 ;;		Unchanged: 0/0
  3419 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3420 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3421 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3422 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3423 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3424 ;;Total ram usage:        0 bytes
  3425 ;; Hardware stack levels used:    1
  3426 ;; Hardware stack levels required when called:    7
  3427 ;; This function calls:
  3428 ;;		Nothing
  3429 ;; This function is called by:
  3430 ;;		_nrf24l01Init
  3431 ;; This function uses a non-reentrant model
  3432 ;;
  3433                           
  3434                           
  3435                           ;psect for function _nrf24l01InterfaceInit
  3436  07BD                     _nrf24l01InterfaceInit:	
  3437                           
  3438                           ;interface.c: 30: TRISAbits.TRISA0 = 0;
  3439                           
  3440                           ;incstack = 0
  3441                           ; Regs used in _nrf24l01InterfaceInit: [wreg+status,2+status,0]
  3442  07BD  0021               	movlb	1	; select bank1
  3443  07BE  100C               	bcf	12,0	;volatile
  3444                           
  3445                           ;interface.c: 31: TRISAbits.TRISA1 = 0;
  3446  07BF  108C               	bcf	12,1	;volatile
  3447                           
  3448                           ;interface.c: 33: TRISCbits.TRISC1 = 1;
  3449  07C0  148E               	bsf	14,1	;volatile
  3450                           
  3451                           ;interface.c: 34: TRISCbits.TRISC2 = 0;
  3452  07C1  110E               	bcf	14,2	;volatile
  3453                           
  3454                           ;interface.c: 35: TRISCbits.TRISC0 = 0;
  3455  07C2  100E               	bcf	14,0	;volatile
  3456                           
  3457                           ;interface.c: 37: SSP1CON1bits.SSPEN = 0;
  3458  07C3  0024               	movlb	4	; select bank4
  3459  07C4  1295               	bcf	21,5	;volatile
  3460                           
  3461                           ;interface.c: 39: RC1PPSbits.RC1PPS = 0b10001;
  3462  07C5  003D               	movlb	29	; select bank29
  3463  07C6  0821               	movf	33,w	;volatile
  3464  07C7  39E0               	andlw	-32
  3465  07C8  3811               	iorlw	17
  3466  07C9  00A1               	movwf	33	;volatile
  3467                           
  3468                           ;interface.c: 40: RC2PPSbits.RC2PPS = 0b11001;
  3469  07CA  0822               	movf	34,w	;volatile
  3470  07CB  39E0               	andlw	-32
  3471  07CC  3819               	iorlw	25
  3472  07CD  00A2               	movwf	34	;volatile
  3473                           
  3474                           ;interface.c: 41: RC0PPSbits.RC0PPS = 0b11000;
  3475  07CE  0820               	movf	32,w	;volatile
  3476  07CF  39E0               	andlw	-32
  3477  07D0  3818               	iorlw	24
  3478  07D1  00A0               	movwf	32	;volatile
  3479                           
  3480                           ;interface.c: 43: SSP1CON1bits.CKP = 0;
  3481  07D2  0024               	movlb	4	; select bank4
  3482  07D3  1215               	bcf	21,4	;volatile
  3483                           
  3484                           ;interface.c: 44: SSP1STATbits.CKE = 1;
  3485  07D4  1714               	bsf	20,6	;volatile
  3486                           
  3487                           ;interface.c: 45: SSP1CON1bits.SSPM = 0b0000;
  3488  07D5  30F0               	movlw	-16
  3489  07D6  0595               	andwf	21,f	;volatile
  3490                           
  3491                           ;interface.c: 47: SSP1CON1bits.SSPEN = 1;
  3492  07D7  1695               	bsf	21,5	;volatile
  3493  07D8  0008               	return
  3494  07D9                     __end_of_nrf24l01InterfaceInit:	
  3495                           
  3496                           	psect	text4
  3497  00FD                     __ptext4:	
  3498 ;; *************** function _nrf24l01InitRegisters *****************
  3499 ;; Defined at:
  3500 ;;		line 278 in file "nrf24l01.c"
  3501 ;; Parameters:    Size  Location     Type
  3502 ;;  isReciever      1    wreg     unsigned char 
  3503 ;; Auto vars:     Size  Location     Type
  3504 ;;  isReciever      1    0[COMMON] unsigned char 
  3505 ;;  config          1   13[BANK0 ] struct .
  3506 ;;  DynPD           1   12[BANK0 ] struct .
  3507 ;;  enAA            1   11[BANK0 ] struct .
  3508 ;;  enRXAddr        1   10[BANK0 ] struct .
  3509 ;;  status          1    9[BANK0 ] struct .
  3510 ;;  rfSetup         1    8[BANK0 ] struct .
  3511 ;;  feature         1    7[BANK0 ] struct .
  3512 ;;  setupAW         1    6[BANK0 ] struct .
  3513 ;;  channel         1    5[BANK0 ] struct .
  3514 ;; Return value:  Size  Location     Type
  3515 ;;                  1    wreg      void 
  3516 ;; Registers used:
  3517 ;;		wreg, status,2, status,0, pclath, cstack
  3518 ;; Tracked objects:
  3519 ;;		On entry : 0/0
  3520 ;;		On exit  : 0/0
  3521 ;;		Unchanged: 0/0
  3522 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3523 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3524 ;;      Locals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3525 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3526 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3527 ;;Total ram usage:       10 bytes
  3528 ;; Hardware stack levels used:    1
  3529 ;; Hardware stack levels required when called:   10
  3530 ;; This function calls:
  3531 ;;		_nrf24l01Send
  3532 ;; This function is called by:
  3533 ;;		_nrf24l01Init
  3534 ;; This function uses a non-reentrant model
  3535 ;;
  3536                           
  3537                           
  3538                           ;psect for function _nrf24l01InitRegisters
  3539  00FD                     _nrf24l01InitRegisters:	
  3540                           
  3541                           ;nrf24l01.c: 280: n_CONFIG_t config;;nrf24l01.c: 282: config.PWR_UP = 0;
  3542                           
  3543                           ;incstack = 0
  3544                           ; Regs used in _nrf24l01InitRegisters: [wreg+status,2+status,0+pclath+cstack]
  3545  00FD  0020               	movlb	0	; select bank0
  3546  00FE  10AD               	bcf	nrf24l01InitRegisters@config,1
  3547                           
  3548                           ;nrf24l01.c: 283: nrf24l01Send(0b00100000 | 0x00, config.byte);
  3549  00FF  082D               	movf	nrf24l01InitRegisters@config,w
  3550  0100  00A4               	movwf	??_nrf24l01InitRegisters
  3551  0101  0824               	movf	??_nrf24l01InitRegisters,w
  3552  0102  00A1               	movwf	nrf24l01Send@data
  3553  0103  3020               	movlw	32
  3554  0104  3187  275D  3180   	fcall	_nrf24l01Send
  3555                           
  3556                           ;nrf24l01.c: 285: n_SETUP_AW_t setupAW;;nrf24l01.c: 286: setupAW.byte = 0x00;
  3557  0107  0020               	movlb	0	; select bank0
  3558  0108  01A6               	clrf	nrf24l01InitRegisters@setupAW
  3559                           
  3560                           ;nrf24l01.c: 287: setupAW.AW = 0b11;
  3561  0109  3003               	movlw	3
  3562  010A  04A6               	iorwf	nrf24l01InitRegisters@setupAW,f
  3563                           
  3564                           ;nrf24l01.c: 288: nrf24l01Send(0b00100000 | 0x02, setupAW.byte);
  3565  010B  0826               	movf	nrf24l01InitRegisters@setupAW,w
  3566  010C  00A4               	movwf	??_nrf24l01InitRegisters
  3567  010D  0824               	movf	??_nrf24l01InitRegisters,w
  3568  010E  00A1               	movwf	nrf24l01Send@data
  3569  010F  3022               	movlw	34
  3570  0110  3187  275D  3180   	fcall	_nrf24l01Send
  3571                           
  3572                           ;nrf24l01.c: 291: n_RF_CH_t channel;;nrf24l01.c: 292: channel.RF_CH = 2;
  3573  0113  0020               	movlb	0	; select bank0
  3574  0114  0825               	movf	nrf24l01InitRegisters@channel,w
  3575  0115  3980               	andlw	-128
  3576  0116  3802               	iorlw	2
  3577  0117  00A5               	movwf	nrf24l01InitRegisters@channel
  3578                           
  3579                           ;nrf24l01.c: 293: nrf24l01Send(0b00100000 | 0x05, channel.byte);
  3580  0118  0825               	movf	nrf24l01InitRegisters@channel,w
  3581  0119  00A4               	movwf	??_nrf24l01InitRegisters
  3582  011A  0824               	movf	??_nrf24l01InitRegisters,w
  3583  011B  00A1               	movwf	nrf24l01Send@data
  3584  011C  3025               	movlw	37
  3585  011D  3187  275D  3180   	fcall	_nrf24l01Send
  3586                           
  3587                           ;nrf24l01.c: 296: n_RF_SETUP_t rfSetup;;nrf24l01.c: 297: rfSetup.byte = 0x00;
  3588  0120  0020               	movlb	0	; select bank0
  3589  0121  01A8               	clrf	nrf24l01InitRegisters@rfSetup
  3590                           
  3591                           ;nrf24l01.c: 298: rfSetup.RF_DR_LOW = 0;
  3592  0122  12A8               	bcf	nrf24l01InitRegisters@rfSetup,5
  3593                           
  3594                           ;nrf24l01.c: 299: rfSetup.RF_DR_HIGH = 1;
  3595  0123  15A8               	bsf	nrf24l01InitRegisters@rfSetup,3
  3596                           
  3597                           ;nrf24l01.c: 300: rfSetup.RF_PWR = 3;
  3598  0124  3006               	movlw	6
  3599  0125  04A8               	iorwf	nrf24l01InitRegisters@rfSetup,f
  3600                           
  3601                           ;nrf24l01.c: 301: nrf24l01Send(0b00100000 | 0x06, rfSetup.byte);
  3602  0126  0828               	movf	nrf24l01InitRegisters@rfSetup,w
  3603  0127  00A4               	movwf	??_nrf24l01InitRegisters
  3604  0128  0824               	movf	??_nrf24l01InitRegisters,w
  3605  0129  00A1               	movwf	nrf24l01Send@data
  3606  012A  3026               	movlw	38
  3607  012B  3187  275D  3180   	fcall	_nrf24l01Send
  3608                           
  3609                           ;nrf24l01.c: 304: n_EN_RXADDR_t enRXAddr;;nrf24l01.c: 305: enRXAddr.ERX_P0 = 1;
  3610  012E  0020               	movlb	0	; select bank0
  3611  012F  142A               	bsf	nrf24l01InitRegisters@enRXAddr,0
  3612                           
  3613                           ;nrf24l01.c: 306: enRXAddr.ERX_P1 = 1;
  3614  0130  14AA               	bsf	nrf24l01InitRegisters@enRXAddr,1
  3615                           
  3616                           ;nrf24l01.c: 307: enRXAddr.ERX_P2 = 1;
  3617  0131  152A               	bsf	nrf24l01InitRegisters@enRXAddr,2
  3618                           
  3619                           ;nrf24l01.c: 308: enRXAddr.ERX_P3 = 1;
  3620  0132  15AA               	bsf	nrf24l01InitRegisters@enRXAddr,3
  3621                           
  3622                           ;nrf24l01.c: 309: enRXAddr.ERX_P4 = 1;
  3623  0133  162A               	bsf	nrf24l01InitRegisters@enRXAddr,4
  3624                           
  3625                           ;nrf24l01.c: 310: enRXAddr.ERX_P5 = 1;
  3626  0134  16AA               	bsf	nrf24l01InitRegisters@enRXAddr,5
  3627                           
  3628                           ;nrf24l01.c: 311: nrf24l01Send(0b00100000 | 0x02, enRXAddr.byte);
  3629  0135  082A               	movf	nrf24l01InitRegisters@enRXAddr,w
  3630  0136  00A4               	movwf	??_nrf24l01InitRegisters
  3631  0137  0824               	movf	??_nrf24l01InitRegisters,w
  3632  0138  00A1               	movwf	nrf24l01Send@data
  3633  0139  3022               	movlw	34
  3634  013A  3187  275D  3180   	fcall	_nrf24l01Send
  3635                           
  3636                           ;nrf24l01.c: 314: n_EN_AA_t enAA;;nrf24l01.c: 315: enAA.byte = nrf24l01Send(0b00000000 |
      +                           0x01, 0);
  3637  013D  0020               	movlb	0	; select bank0
  3638  013E  01A1               	clrf	nrf24l01Send@data
  3639  013F  3001               	movlw	1
  3640  0140  3187  275D  3180   	fcall	_nrf24l01Send
  3641  0143  0020               	movlb	0	; select bank0
  3642  0144  00A4               	movwf	??_nrf24l01InitRegisters
  3643  0145  0824               	movf	??_nrf24l01InitRegisters,w
  3644  0146  00AB               	movwf	nrf24l01InitRegisters@enAA
  3645                           
  3646                           ;nrf24l01.c: 316: enAA.ENAA_P0 = 0;
  3647  0147  102B               	bcf	nrf24l01InitRegisters@enAA,0
  3648                           
  3649                           ;nrf24l01.c: 317: enAA.ENAA_P1 = 0;
  3650  0148  10AB               	bcf	nrf24l01InitRegisters@enAA,1
  3651                           
  3652                           ;nrf24l01.c: 318: enAA.ENAA_P2 = 0;
  3653  0149  112B               	bcf	nrf24l01InitRegisters@enAA,2
  3654                           
  3655                           ;nrf24l01.c: 319: enAA.ENAA_P3 = 0;
  3656  014A  11AB               	bcf	nrf24l01InitRegisters@enAA,3
  3657                           
  3658                           ;nrf24l01.c: 320: enAA.ENAA_P4 = 0;
  3659  014B  122B               	bcf	nrf24l01InitRegisters@enAA,4
  3660                           
  3661                           ;nrf24l01.c: 321: enAA.ENAA_P5 = 0;
  3662  014C  12AB               	bcf	nrf24l01InitRegisters@enAA,5
  3663                           
  3664                           ;nrf24l01.c: 322: nrf24l01Send(0b00100000 | 0x01, enAA.byte);
  3665  014D  082B               	movf	nrf24l01InitRegisters@enAA,w
  3666  014E  00A4               	movwf	??_nrf24l01InitRegisters
  3667  014F  0824               	movf	??_nrf24l01InitRegisters,w
  3668  0150  00A1               	movwf	nrf24l01Send@data
  3669  0151  3021               	movlw	33
  3670  0152  3187  275D  3180   	fcall	_nrf24l01Send
  3671                           
  3672                           ;nrf24l01.c: 326: n_FEATURE_t feature;;nrf24l01.c: 327: feature.byte = nrf24l01Send(0b00
      +                          000000 | 0x1D, 0);
  3673  0155  0020               	movlb	0	; select bank0
  3674  0156  01A1               	clrf	nrf24l01Send@data
  3675  0157  301D               	movlw	29
  3676  0158  3187  275D  3180   	fcall	_nrf24l01Send
  3677  015B  0020               	movlb	0	; select bank0
  3678  015C  00A4               	movwf	??_nrf24l01InitRegisters
  3679  015D  0824               	movf	??_nrf24l01InitRegisters,w
  3680  015E  00A7               	movwf	nrf24l01InitRegisters@feature
  3681                           
  3682                           ;nrf24l01.c: 328: feature.EN_DPL = 1;
  3683  015F  1527               	bsf	nrf24l01InitRegisters@feature,2
  3684                           
  3685                           ;nrf24l01.c: 329: feature.EN_DYN_ACK = 1;
  3686  0160  1427               	bsf	nrf24l01InitRegisters@feature,0
  3687                           
  3688                           ;nrf24l01.c: 330: nrf24l01Send(0b00100000 | 0x1D, feature.byte);
  3689  0161  0827               	movf	nrf24l01InitRegisters@feature,w
  3690  0162  00A4               	movwf	??_nrf24l01InitRegisters
  3691  0163  0824               	movf	??_nrf24l01InitRegisters,w
  3692  0164  00A1               	movwf	nrf24l01Send@data
  3693  0165  303D               	movlw	61
  3694  0166  3187  275D  3180   	fcall	_nrf24l01Send
  3695                           
  3696                           ;nrf24l01.c: 332: n_DYNPD_t DynPD;;nrf24l01.c: 333: DynPD.byte = nrf24l01Send(0b00000000
      +                           | 0x1C, 0);
  3697  0169  0020               	movlb	0	; select bank0
  3698  016A  01A1               	clrf	nrf24l01Send@data
  3699  016B  301C               	movlw	28
  3700  016C  3187  275D  3180   	fcall	_nrf24l01Send
  3701  016F  0020               	movlb	0	; select bank0
  3702  0170  00A4               	movwf	??_nrf24l01InitRegisters
  3703  0171  0824               	movf	??_nrf24l01InitRegisters,w
  3704  0172  00AC               	movwf	nrf24l01InitRegisters@DynPD
  3705                           
  3706                           ;nrf24l01.c: 334: DynPD.DPL_P0 = 1;
  3707  0173  142C               	bsf	nrf24l01InitRegisters@DynPD,0
  3708                           
  3709                           ;nrf24l01.c: 335: DynPD.DPL_P1 = 1;
  3710  0174  14AC               	bsf	nrf24l01InitRegisters@DynPD,1
  3711                           
  3712                           ;nrf24l01.c: 336: DynPD.DPL_P2 = 1;
  3713  0175  152C               	bsf	nrf24l01InitRegisters@DynPD,2
  3714                           
  3715                           ;nrf24l01.c: 337: DynPD.DPL_P3 = 1;
  3716  0176  15AC               	bsf	nrf24l01InitRegisters@DynPD,3
  3717                           
  3718                           ;nrf24l01.c: 338: DynPD.DPL_P4 = 1;
  3719  0177  162C               	bsf	nrf24l01InitRegisters@DynPD,4
  3720                           
  3721                           ;nrf24l01.c: 339: DynPD.DPL_P5 = 1;
  3722  0178  16AC               	bsf	nrf24l01InitRegisters@DynPD,5
  3723                           
  3724                           ;nrf24l01.c: 340: nrf24l01Send(0b00100000 | 0x1C, DynPD.byte);
  3725  0179  082C               	movf	nrf24l01InitRegisters@DynPD,w
  3726  017A  00A4               	movwf	??_nrf24l01InitRegisters
  3727  017B  0824               	movf	??_nrf24l01InitRegisters,w
  3728  017C  00A1               	movwf	nrf24l01Send@data
  3729  017D  303C               	movlw	60
  3730  017E  3187  275D  3180   	fcall	_nrf24l01Send
  3731                           
  3732                           ;nrf24l01.c: 343: n_STATUS_t status;;nrf24l01.c: 344: status.byte = 0x00;
  3733  0181  0020               	movlb	0	; select bank0
  3734  0182  01A9               	clrf	nrf24l01InitRegisters@status
  3735                           
  3736                           ;nrf24l01.c: 345: status.RX_DR = 1;
  3737  0183  1729               	bsf	nrf24l01InitRegisters@status,6
  3738                           
  3739                           ;nrf24l01.c: 346: status.TX_DS = 1;
  3740  0184  16A9               	bsf	nrf24l01InitRegisters@status,5
  3741                           
  3742                           ;nrf24l01.c: 347: status.MAX_RT = 1;
  3743  0185  1629               	bsf	nrf24l01InitRegisters@status,4
  3744                           
  3745                           ;nrf24l01.c: 348: nrf24l01Send(0b00100000 | 0x07, status.byte);
  3746  0186  0829               	movf	nrf24l01InitRegisters@status,w
  3747  0187  00A4               	movwf	??_nrf24l01InitRegisters
  3748  0188  0824               	movf	??_nrf24l01InitRegisters,w
  3749  0189  00A1               	movwf	nrf24l01Send@data
  3750  018A  3027               	movlw	39
  3751  018B  3187  275D  3180   	fcall	_nrf24l01Send
  3752                           
  3753                           ;nrf24l01.c: 351: nrf24l01Send(0b11100001, 0);
  3754  018E  0020               	movlb	0	; select bank0
  3755  018F  01A1               	clrf	nrf24l01Send@data
  3756  0190  30E1               	movlw	225
  3757  0191  3187  275D  3180   	fcall	_nrf24l01Send
  3758                           
  3759                           ;nrf24l01.c: 352: nrf24l01Send(0b11100010, 0);
  3760  0194  0020               	movlb	0	; select bank0
  3761  0195  01A1               	clrf	nrf24l01Send@data
  3762  0196  30E2               	movlw	226
  3763  0197  3187  275D  3180   	fcall	_nrf24l01Send
  3764                           
  3765                           ;nrf24l01.c: 355: config.PRIM_RX = 1;
  3766  019A  0020               	movlb	0	; select bank0
  3767  019B  142D               	bsf	nrf24l01InitRegisters@config,0
  3768                           
  3769                           ;nrf24l01.c: 356: config.EN_CRC = 1;
  3770  019C  15AD               	bsf	nrf24l01InitRegisters@config,3
  3771                           
  3772                           ;nrf24l01.c: 357: config.CRCO = 1;
  3773  019D  152D               	bsf	nrf24l01InitRegisters@config,2
  3774                           
  3775                           ;nrf24l01.c: 358: config.PWR_UP = 1;
  3776  019E  14AD               	bsf	nrf24l01InitRegisters@config,1
  3777                           
  3778                           ;nrf24l01.c: 359: nrf24l01Send(0b00100000 | 0x00, config.byte);
  3779  019F  082D               	movf	nrf24l01InitRegisters@config,w
  3780  01A0  00A4               	movwf	??_nrf24l01InitRegisters
  3781  01A1  0824               	movf	??_nrf24l01InitRegisters,w
  3782  01A2  00A1               	movwf	nrf24l01Send@data
  3783  01A3  3020               	movlw	32
  3784  01A4  3187  275D         	fcall	_nrf24l01Send
  3785  01A6  0008               	return
  3786  01A7                     __end_of_nrf24l01InitRegisters:	
  3787                           
  3788                           	psect	text5
  3789  0029                     __ptext5:	
  3790 ;; *************** function _loop *****************
  3791 ;; Defined at:
  3792 ;;		line 91 in file "main.c"
  3793 ;; Parameters:    Size  Location     Type
  3794 ;;		None
  3795 ;; Auto vars:     Size  Location     Type
  3796 ;;  packet         33    0[BANK1 ] struct .
  3797 ;; Return value:  Size  Location     Type
  3798 ;;                  1    wreg      void 
  3799 ;; Registers used:
  3800 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3801 ;; Tracked objects:
  3802 ;;		On entry : 0/0
  3803 ;;		On exit  : 0/0
  3804 ;;		Unchanged: 0/0
  3805 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3806 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3807 ;;      Locals:         0       0      33       0       0       0       0       0       0       0       0       0       
      +0       0
  3808 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3809 ;;      Totals:         0       4      33       0       0       0       0       0       0       0       0       0       
      +0       0
  3810 ;;Total ram usage:       37 bytes
  3811 ;; Hardware stack levels used:    1
  3812 ;; Hardware stack levels required when called:   12
  3813 ;; This function calls:
  3814 ;;		_getADCValue
  3815 ;;		_nrf24l01SendPacket
  3816 ;;		_setMessage
  3817 ;;		_sleep
  3818 ;; This function is called by:
  3819 ;;		_main
  3820 ;; This function uses a non-reentrant model
  3821 ;;
  3822                           
  3823                           
  3824                           ;psect for function _loop
  3825  0029                     _loop:	
  3826                           
  3827                           ;incstack = 0
  3828                           ; Regs used in _loop: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3829  0029  0064               	clrwdt	;# 
  3830                           
  3831                           ;main.c: 96: nrf24l01Packet_t packet;;main.c: 98: setMessage(&packet, "DBG", counter);
  3832  002A  3030               	movlw	low (STR_3| (0+32768))
  3833  002B  0020               	movlb	0	; select bank0
  3834  002C  00BD               	movwf	setMessage@topic
  3835  002D  3090               	movlw	high (STR_3| (0+32768))
  3836  002E  00BE               	movwf	setMessage@topic+1
  3837  002F  0021               	movlb	1	; select bank1
  3838  0030  0865               	movf	(_counter+3)^(0+128),w
  3839  0031  0020               	movlb	0	; select bank0
  3840  0032  00C2               	movwf	setMessage@value+3
  3841  0033  0021               	movlb	1	; select bank1
  3842  0034  0864               	movf	(_counter+2)^(0+128),w
  3843  0035  0020               	movlb	0	; select bank0
  3844  0036  00C1               	movwf	setMessage@value+2
  3845  0037  0021               	movlb	1	; select bank1
  3846  0038  0863               	movf	(_counter+1)^(0+128),w
  3847  0039  0020               	movlb	0	; select bank0
  3848  003A  00C0               	movwf	setMessage@value+1
  3849  003B  0021               	movlb	1	; select bank1
  3850  003C  0862               	movf	_counter^(0+128),w
  3851  003D  0020               	movlb	0	; select bank0
  3852  003E  00BF               	movwf	setMessage@value
  3853  003F  30A0               	movlw	(low (loop@packet| 0))& (0+255)
  3854  0040  3183  23D1  3180   	fcall	_setMessage
  3855                           
  3856                           ;main.c: 99: packet.packetData.byte = 0;
  3857  0043  0021               	movlb	1	; select bank1
  3858  0044  01A0               	clrf	loop@packet^(0+128)
  3859                           
  3860                           ;main.c: 100: packet.packetData.ACKRequest = 0;
  3861  0045  10A0               	bcf	loop@packet^(0+128),1
  3862                           
  3863                           ;main.c: 101: nrf24l01SendPacket(&packet);
  3864  0046  30A0               	movlw	(low (loop@packet| 0))& (0+255)
  3865  0047  3181  21A7  3180   	fcall	_nrf24l01SendPacket
  3866                           
  3867                           ;main.c: 102: sleep();
  3868  004A  318F  276F  3180   	fcall	_sleep
  3869                           
  3870                           ;main.c: 104: setMessage(&packet, "VBAT", getADCValue(0b000100, 2526));
  3871  004D  3022               	movlw	low (STR_4| (0+32768))
  3872  004E  0020               	movlb	0	; select bank0
  3873  004F  00BD               	movwf	setMessage@topic
  3874  0050  3090               	movlw	high (STR_4| (0+32768))
  3875  0051  00BE               	movwf	setMessage@topic+1
  3876  0052  3000               	movlw	0
  3877  0053  00B2               	movwf	getADCValue@divider+3
  3878  0054  3000               	movlw	0
  3879  0055  00B1               	movwf	getADCValue@divider+2
  3880  0056  3009               	movlw	9
  3881  0057  00B0               	movwf	getADCValue@divider+1
  3882  0058  30DE               	movlw	222
  3883  0059  00AF               	movwf	getADCValue@divider
  3884  005A  3004               	movlw	4
  3885  005B  3183  2349  3180   	fcall	_getADCValue
  3886  005E  0020               	movlb	0	; select bank0
  3887  005F  0832               	movf	?_getADCValue+3,w
  3888  0060  00C2               	movwf	setMessage@value+3
  3889  0061  0831               	movf	?_getADCValue+2,w
  3890  0062  00C1               	movwf	setMessage@value+2
  3891  0063  0830               	movf	?_getADCValue+1,w
  3892  0064  00C0               	movwf	setMessage@value+1
  3893  0065  082F               	movf	?_getADCValue,w
  3894  0066  00BF               	movwf	setMessage@value
  3895  0067  30A0               	movlw	(low (loop@packet| 0))& (0+255)
  3896  0068  3183  23D1  3180   	fcall	_setMessage
  3897                           
  3898                           ;main.c: 105: packet.packetData.byte = 0;
  3899  006B  0021               	movlb	1	; select bank1
  3900  006C  01A0               	clrf	loop@packet^(0+128)
  3901                           
  3902                           ;main.c: 106: packet.packetData.ACKRequest = 1;
  3903  006D  14A0               	bsf	loop@packet^(0+128),1
  3904                           
  3905                           ;main.c: 107: nrf24l01SendPacket(&packet);
  3906  006E  30A0               	movlw	(low (loop@packet| 0))& (0+255)
  3907  006F  3181  21A7  3180   	fcall	_nrf24l01SendPacket
  3908                           
  3909                           ;main.c: 108: sleep();
  3910  0072  318F  276F  3180   	fcall	_sleep
  3911                           
  3912                           ;main.c: 111: setMessage(&packet, "ANC3", getADCValue(0b010011, 2500));
  3913  0075  3018               	movlw	low (STR_5| (0+32768))
  3914  0076  0020               	movlb	0	; select bank0
  3915  0077  00BD               	movwf	setMessage@topic
  3916  0078  3090               	movlw	high (STR_5| (0+32768))
  3917  0079  00BE               	movwf	setMessage@topic+1
  3918  007A  3000               	movlw	0
  3919  007B  00B2               	movwf	getADCValue@divider+3
  3920  007C  3000               	movlw	0
  3921  007D  00B1               	movwf	getADCValue@divider+2
  3922  007E  3009               	movlw	9
  3923  007F  00B0               	movwf	getADCValue@divider+1
  3924  0080  30C4               	movlw	196
  3925  0081  00AF               	movwf	getADCValue@divider
  3926  0082  3013               	movlw	19
  3927  0083  3183  2349  3180   	fcall	_getADCValue
  3928  0086  0020               	movlb	0	; select bank0
  3929  0087  0832               	movf	?_getADCValue+3,w
  3930  0088  00C2               	movwf	setMessage@value+3
  3931  0089  0831               	movf	?_getADCValue+2,w
  3932  008A  00C1               	movwf	setMessage@value+2
  3933  008B  0830               	movf	?_getADCValue+1,w
  3934  008C  00C0               	movwf	setMessage@value+1
  3935  008D  082F               	movf	?_getADCValue,w
  3936  008E  00BF               	movwf	setMessage@value
  3937  008F  30A0               	movlw	(low (loop@packet| 0))& (0+255)
  3938  0090  3183  23D1  3180   	fcall	_setMessage
  3939                           
  3940                           ;main.c: 112: packet.packetData.byte = 0;
  3941  0093  0021               	movlb	1	; select bank1
  3942  0094  01A0               	clrf	loop@packet^(0+128)
  3943                           
  3944                           ;main.c: 113: packet.packetData.ACKRequest = 0;
  3945  0095  10A0               	bcf	loop@packet^(0+128),1
  3946                           
  3947                           ;main.c: 114: nrf24l01SendPacket(&packet);
  3948  0096  30A0               	movlw	(low (loop@packet| 0))& (0+255)
  3949  0097  3181  21A7  3180   	fcall	_nrf24l01SendPacket
  3950                           
  3951                           ;main.c: 115: sleep();
  3952  009A  318F  276F  3180   	fcall	_sleep
  3953                           
  3954                           ;main.c: 117: setMessage(&packet, "FVR", getADCValue(0b111111, 2500));
  3955  009D  3034               	movlw	low (STR_6| (0+32768))
  3956  009E  0020               	movlb	0	; select bank0
  3957  009F  00BD               	movwf	setMessage@topic
  3958  00A0  3090               	movlw	high (STR_6| (0+32768))
  3959  00A1  00BE               	movwf	setMessage@topic+1
  3960  00A2  3000               	movlw	0
  3961  00A3  00B2               	movwf	getADCValue@divider+3
  3962  00A4  3000               	movlw	0
  3963  00A5  00B1               	movwf	getADCValue@divider+2
  3964  00A6  3009               	movlw	9
  3965  00A7  00B0               	movwf	getADCValue@divider+1
  3966  00A8  30C4               	movlw	196
  3967  00A9  00AF               	movwf	getADCValue@divider
  3968  00AA  303F               	movlw	63
  3969  00AB  3183  2349  3180   	fcall	_getADCValue
  3970  00AE  0020               	movlb	0	; select bank0
  3971  00AF  0832               	movf	?_getADCValue+3,w
  3972  00B0  00C2               	movwf	setMessage@value+3
  3973  00B1  0831               	movf	?_getADCValue+2,w
  3974  00B2  00C1               	movwf	setMessage@value+2
  3975  00B3  0830               	movf	?_getADCValue+1,w
  3976  00B4  00C0               	movwf	setMessage@value+1
  3977  00B5  082F               	movf	?_getADCValue,w
  3978  00B6  00BF               	movwf	setMessage@value
  3979  00B7  30A0               	movlw	(low (loop@packet| 0))& (0+255)
  3980  00B8  3183  23D1  3180   	fcall	_setMessage
  3981                           
  3982                           ;main.c: 118: packet.packetData.byte = 0;
  3983  00BB  0021               	movlb	1	; select bank1
  3984  00BC  01A0               	clrf	loop@packet^(0+128)
  3985                           
  3986                           ;main.c: 119: packet.packetData.ACKRequest = 0;
  3987  00BD  10A0               	bcf	loop@packet^(0+128),1
  3988                           
  3989                           ;main.c: 120: nrf24l01SendPacket(&packet);
  3990  00BE  30A0               	movlw	(low (loop@packet| 0))& (0+255)
  3991  00BF  3181  21A7  3180   	fcall	_nrf24l01SendPacket
  3992                           
  3993                           ;main.c: 121: sleep();
  3994  00C2  318F  276F  3180   	fcall	_sleep
  3995                           
  3996                           ;main.c: 123: setMessage(&packet, "TEMP", getADCValue(0b111101, 162) - 40000);
  3997  00C5  301D               	movlw	low (STR_7| (0+32768))
  3998  00C6  0020               	movlb	0	; select bank0
  3999  00C7  00BD               	movwf	setMessage@topic
  4000  00C8  3090               	movlw	high (STR_7| (0+32768))
  4001  00C9  00BE               	movwf	setMessage@topic+1
  4002  00CA  30C0               	movlw	192
  4003  00CB  00D4               	movwf	??_loop
  4004  00CC  3063               	movlw	99
  4005  00CD  00D5               	movwf	??_loop+1
  4006  00CE  30FF               	movlw	255
  4007  00CF  00D6               	movwf	??_loop+2
  4008  00D0  30FF               	movlw	255
  4009  00D1  00D7               	movwf	??_loop+3
  4010  00D2  3000               	movlw	0
  4011  00D3  00B2               	movwf	getADCValue@divider+3
  4012  00D4  3000               	movlw	0
  4013  00D5  00B1               	movwf	getADCValue@divider+2
  4014  00D6  3000               	movlw	0
  4015  00D7  00B0               	movwf	getADCValue@divider+1
  4016  00D8  30A2               	movlw	162
  4017  00D9  00AF               	movwf	getADCValue@divider
  4018  00DA  303D               	movlw	61
  4019  00DB  3183  2349  3180   	fcall	_getADCValue
  4020  00DE  0020               	movlb	0	; select bank0
  4021  00DF  082F               	movf	?_getADCValue,w
  4022  00E0  07D4               	addwf	??_loop,f
  4023  00E1  0830               	movf	?_getADCValue+1,w
  4024  00E2  3DD5               	addwfc	??_loop+1,f
  4025  00E3  0831               	movf	?_getADCValue+2,w
  4026  00E4  3DD6               	addwfc	??_loop+2,f
  4027  00E5  0832               	movf	?_getADCValue+3,w
  4028  00E6  3DD7               	addwfc	??_loop+3,f
  4029  00E7  0857               	movf	??_loop+3,w
  4030  00E8  00C2               	movwf	setMessage@value+3
  4031  00E9  0856               	movf	??_loop+2,w
  4032  00EA  00C1               	movwf	setMessage@value+2
  4033  00EB  0855               	movf	??_loop+1,w
  4034  00EC  00C0               	movwf	setMessage@value+1
  4035  00ED  0854               	movf	??_loop,w
  4036  00EE  00BF               	movwf	setMessage@value
  4037  00EF  30A0               	movlw	(low (loop@packet| 0))& (0+255)
  4038  00F0  3183  23D1  3180   	fcall	_setMessage
  4039                           
  4040                           ;main.c: 124: packet.packetData.byte = 0;
  4041  00F3  0021               	movlb	1	; select bank1
  4042  00F4  01A0               	clrf	loop@packet^(0+128)
  4043                           
  4044                           ;main.c: 125: packet.packetData.ACKRequest = 0;
  4045  00F5  10A0               	bcf	loop@packet^(0+128),1
  4046                           
  4047                           ;main.c: 126: nrf24l01SendPacket(&packet);
  4048  00F6  30A0               	movlw	(low (loop@packet| 0))& (0+255)
  4049  00F7  3181  21A7  3180   	fcall	_nrf24l01SendPacket
  4050                           
  4051                           ;main.c: 127: sleep();
  4052  00FA  318F  276F         	fcall	_sleep
  4053  00FC  0008               	return
  4054  00FD                     __end_of_loop:	
  4055                           
  4056                           	psect	text6
  4057  0F6F                     __ptext6:	
  4058 ;; *************** function _sleep *****************
  4059 ;; Defined at:
  4060 ;;		line 48 in file "main.c"
  4061 ;; Parameters:    Size  Location     Type
  4062 ;;		None
  4063 ;; Auto vars:     Size  Location     Type
  4064 ;;		None
  4065 ;; Return value:  Size  Location     Type
  4066 ;;                  1    wreg      void 
  4067 ;; Registers used:
  4068 ;;		wreg
  4069 ;; Tracked objects:
  4070 ;;		On entry : 0/0
  4071 ;;		On exit  : 0/0
  4072 ;;		Unchanged: 0/0
  4073 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4074 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4075 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4076 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4077 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4078 ;;Total ram usage:        0 bytes
  4079 ;; Hardware stack levels used:    1
  4080 ;; Hardware stack levels required when called:    7
  4081 ;; This function calls:
  4082 ;;		Nothing
  4083 ;; This function is called by:
  4084 ;;		_loop
  4085 ;;		_main
  4086 ;;		_checkRxData
  4087 ;; This function uses a non-reentrant model
  4088 ;;
  4089                           
  4090                           
  4091                           ;psect for function _sleep
  4092  0F6F                     _sleep:	
  4093  0F6F                     l215:	
  4094                           ;incstack = 0
  4095                           ; Regs used in _sleep: [wreg]
  4096                           ;main.c: 49: while (1){
  4097                           
  4098                           
  4099                           ;main.c: 51: counter++;
  4100  0F6F  3001               	movlw	1
  4101  0F70  0021               	movlb	1	; select bank1
  4102  0F71  07E2               	addwf	_counter^(0+128),f
  4103  0F72  3000               	movlw	0
  4104  0F73  3DE3               	addwfc	(_counter+1)^(0+128),f
  4105  0F74  3000               	movlw	0
  4106  0F75  3DE4               	addwfc	(_counter+2)^(0+128),f
  4107  0F76  3000               	movlw	0
  4108  0F77  3DE5               	addwfc	(_counter+3)^(0+128),f
  4109  0F78  0063               	sleep	;# 
  4110                           
  4111                           ;main.c: 54: __nop();
  4112  0F79  0000               	nop
  4113                           
  4114                           ;main.c: 55: __nop();
  4115  0F7A  0000               	nop
  4116                           
  4117                           ;main.c: 57: if (!STATUSbits.nTO && !STATUSbits.nPD) {
  4118  0F7B  0020               	movlb	0	; select bank0
  4119  0F7C  1A03               	btfsc	3,4	;volatile
  4120  0F7D  2F6F               	goto	l215
  4121  0F7E  1D83               	btfss	3,3	;volatile
  4122  0F7F  0008               	return
  4123  0F80  2F6F               	goto	l215
  4124  0F81                     __end_of_sleep:	
  4125                           ;main.c: 58: return;
  4126                           
  4127                           
  4128                           	psect	text7
  4129  03D1                     __ptext7:	
  4130 ;; *************** function _setMessage *****************
  4131 ;; Defined at:
  4132 ;;		line 75 in file "main.c"
  4133 ;; Parameters:    Size  Location     Type
  4134 ;;  packet          1    wreg     PTR struct .
  4135 ;;		 -> main@packet(33), loop@packet(33), 
  4136 ;;  topic           2   29[BANK0 ] PTR const unsigned char 
  4137 ;;		 -> STR_9(5), STR_7(5), STR_6(4), STR_5(5), 
  4138 ;;		 -> STR_4(5), STR_3(4), 
  4139 ;;  value           4   31[BANK0 ] unsigned long 
  4140 ;; Auto vars:     Size  Location     Type
  4141 ;;  packet          1   51[BANK0 ] PTR struct .
  4142 ;;		 -> main@packet(33), loop@packet(33), 
  4143 ;;  tempString     16   35[BANK0 ] unsigned char [16]
  4144 ;; Return value:  Size  Location     Type
  4145 ;;                  1    wreg      void 
  4146 ;; Registers used:
  4147 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4148 ;; Tracked objects:
  4149 ;;		On entry : 0/0
  4150 ;;		On exit  : 0/0
  4151 ;;		Unchanged: 0/0
  4152 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4153 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4154 ;;      Locals:         0      17       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4155 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4156 ;;      Totals:         0      23       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4157 ;;Total ram usage:       23 bytes
  4158 ;; Hardware stack levels used:    1
  4159 ;; Hardware stack levels required when called:    9
  4160 ;; This function calls:
  4161 ;;		_memset
  4162 ;;		_strcat
  4163 ;;		_ultoa
  4164 ;; This function is called by:
  4165 ;;		_loop
  4166 ;;		_main
  4167 ;; This function uses a non-reentrant model
  4168 ;;
  4169                           
  4170                           
  4171                           ;psect for function _setMessage
  4172  03D1                     _setMessage:	
  4173                           
  4174                           ;incstack = 0
  4175                           ; Regs used in _setMessage: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4176                           ;setMessage@packet stored from wreg
  4177  03D1  0020               	movlb	0	; select bank0
  4178  03D2  00D3               	movwf	setMessage@packet
  4179                           
  4180                           ;main.c: 76: memset(packet->Message, 0, sizeof(packet->Message));
  4181  03D3  0853               	movf	setMessage@packet,w
  4182  03D4  3E01               	addlw	1
  4183  03D5  00A1               	movwf	memset@p1
  4184  03D6  3000               	movlw	0
  4185  03D7  00A2               	movwf	memset@p1+1
  4186  03D8  3000               	movlw	0
  4187  03D9  00A3               	movwf	memset@c
  4188  03DA  00A4               	movwf	memset@c+1
  4189  03DB  3020               	movlw	32
  4190  03DC  00A5               	movwf	memset@n
  4191  03DD  3000               	movlw	0
  4192  03DE  00A6               	movwf	memset@n+1
  4193  03DF  318F  27B1  3183   	fcall	_memset
  4194                           
  4195                           ;main.c: 78: strcat(packet->Message, romData.name);
  4196  03E2  305D               	movlw	low (_romData+1)
  4197  03E3  0020               	movlb	0	; select bank0
  4198  03E4  00A1               	movwf	strcat@from
  4199  03E5  3000               	movlw	high (_romData+1)
  4200  03E6  00A2               	movwf	strcat@from+1
  4201  03E7  0853               	movf	setMessage@packet,w
  4202  03E8  3E01               	addlw	1
  4203  03E9  3186  26A8  3183   	fcall	_strcat
  4204                           
  4205                           ;main.c: 80: strcat(packet->Message, "/");
  4206  03EC  3038               	movlw	low (STR_1| (0+32768))
  4207  03ED  0020               	movlb	0	; select bank0
  4208  03EE  00A1               	movwf	strcat@from
  4209  03EF  3090               	movlw	high (STR_1| (0+32768))
  4210  03F0  00A2               	movwf	strcat@from+1
  4211  03F1  0853               	movf	setMessage@packet,w
  4212  03F2  3E01               	addlw	1
  4213  03F3  3186  26A8  3183   	fcall	_strcat
  4214                           
  4215                           ;main.c: 81: strcat(packet->Message, topic);
  4216  03F6  0020               	movlb	0	; select bank0
  4217  03F7  083E               	movf	setMessage@topic+1,w
  4218  03F8  00A2               	movwf	strcat@from+1
  4219  03F9  083D               	movf	setMessage@topic,w
  4220  03FA  00A1               	movwf	strcat@from
  4221  03FB  0853               	movf	setMessage@packet,w
  4222  03FC  3E01               	addlw	1
  4223  03FD  3186  26A8  3183   	fcall	_strcat
  4224                           
  4225                           ;main.c: 83: char tempString[16];;main.c: 85: ultoa(tempString, value, 10);
  4226  0400  0020               	movlb	0	; select bank0
  4227  0401  0842               	movf	setMessage@value+3,w
  4228  0402  00B2               	movwf	ultoa@val+3
  4229  0403  0841               	movf	setMessage@value+2,w
  4230  0404  00B1               	movwf	ultoa@val+2
  4231  0405  0840               	movf	setMessage@value+1,w
  4232  0406  00B0               	movwf	ultoa@val+1
  4233  0407  083F               	movf	setMessage@value,w
  4234  0408  00AF               	movwf	ultoa@val
  4235  0409  300A               	movlw	10
  4236  040A  00B3               	movwf	ultoa@base
  4237  040B  3000               	movlw	0
  4238  040C  00B4               	movwf	ultoa@base+1
  4239  040D  3043               	movlw	(low (setMessage@tempString| 0))& (0+255)
  4240  040E  3182  22C0  3183   	fcall	_ultoa
  4241                           
  4242                           ;main.c: 87: strcat(packet->Message, "/");
  4243  0411  3038               	movlw	low (STR_1| (0+32768))
  4244  0412  0020               	movlb	0	; select bank0
  4245  0413  00A1               	movwf	strcat@from
  4246  0414  3090               	movlw	high (STR_1| (0+32768))
  4247  0415  00A2               	movwf	strcat@from+1
  4248  0416  0853               	movf	setMessage@packet,w
  4249  0417  3E01               	addlw	1
  4250  0418  3186  26A8  3183   	fcall	_strcat
  4251                           
  4252                           ;main.c: 88: strcat(packet->Message, tempString);
  4253  041B  3043               	movlw	low setMessage@tempString
  4254  041C  0020               	movlb	0	; select bank0
  4255  041D  00A1               	movwf	strcat@from
  4256  041E  3000               	movlw	high setMessage@tempString
  4257  041F  00A2               	movwf	strcat@from+1
  4258  0420  0853               	movf	setMessage@packet,w
  4259  0421  3E01               	addlw	1
  4260  0422  3186  26A8         	fcall	_strcat
  4261  0424  0008               	return
  4262  0425                     __end_of_setMessage:	
  4263                           
  4264                           	psect	text8
  4265  02C0                     __ptext8:	
  4266 ;; *************** function _ultoa *****************
  4267 ;; Defined at:
  4268 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\ltoa.c"
  4269 ;; Parameters:    Size  Location     Type
  4270 ;;  buf             1    wreg     PTR unsigned char 
  4271 ;;		 -> setMessage@tempString(16), 
  4272 ;;  val             4   15[BANK0 ] unsigned long 
  4273 ;;  base            2   19[BANK0 ] int 
  4274 ;; Auto vars:     Size  Location     Type
  4275 ;;  buf             1   27[BANK0 ] PTR unsigned char 
  4276 ;;		 -> setMessage@tempString(16), 
  4277 ;;  v               4   22[BANK0 ] unsigned long 
  4278 ;;  c               1   26[BANK0 ] unsigned char 
  4279 ;; Return value:  Size  Location     Type
  4280 ;;                  1    wreg      PTR unsigned char 
  4281 ;; Registers used:
  4282 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4283 ;; Tracked objects:
  4284 ;;		On entry : 0/0
  4285 ;;		On exit  : 0/0
  4286 ;;		Unchanged: 0/0
  4287 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4288 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4289 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4290 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4291 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4292 ;;Total ram usage:       13 bytes
  4293 ;; Hardware stack levels used:    1
  4294 ;; Hardware stack levels required when called:    8
  4295 ;; This function calls:
  4296 ;;		___lldiv
  4297 ;;		___llmod
  4298 ;; This function is called by:
  4299 ;;		_setMessage
  4300 ;; This function uses a non-reentrant model
  4301 ;;
  4302                           
  4303                           
  4304                           ;psect for function _ultoa
  4305  02C0                     _ultoa:	
  4306                           
  4307                           ;incstack = 0
  4308                           ; Regs used in _ultoa: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4309                           ;ultoa@buf stored from wreg
  4310  02C0  0020               	movlb	0	; select bank0
  4311  02C1  00BB               	movwf	ultoa@buf
  4312  02C2  0832               	movf	ultoa@val+3,w
  4313  02C3  00B9               	movwf	ultoa@v+3
  4314  02C4  0831               	movf	ultoa@val+2,w
  4315  02C5  00B8               	movwf	ultoa@v+2
  4316  02C6  0830               	movf	ultoa@val+1,w
  4317  02C7  00B7               	movwf	ultoa@v+1
  4318  02C8  082F               	movf	ultoa@val,w
  4319  02C9  00B6               	movwf	ultoa@v
  4320  02CA                     l1999:	
  4321  02CA  0833               	movf	ultoa@base,w
  4322  02CB  00A1               	movwf	___lldiv@divisor
  4323  02CC  0834               	movf	ultoa@base+1,w
  4324  02CD  00A2               	movwf	___lldiv@divisor+1
  4325  02CE  0D89               	rlf	9,f
  4326  02CF  3B89               	subwfb	9,f
  4327  02D0  0989               	comf	9,f
  4328  02D1  00A3               	movwf	___lldiv@divisor+2
  4329  02D2  00A4               	movwf	___lldiv@divisor+3
  4330  02D3  0839               	movf	ultoa@v+3,w
  4331  02D4  00A8               	movwf	___lldiv@dividend+3
  4332  02D5  0838               	movf	ultoa@v+2,w
  4333  02D6  00A7               	movwf	___lldiv@dividend+2
  4334  02D7  0837               	movf	ultoa@v+1,w
  4335  02D8  00A6               	movwf	___lldiv@dividend+1
  4336  02D9  0836               	movf	ultoa@v,w
  4337  02DA  00A5               	movwf	___lldiv@dividend
  4338  02DB  3184  2425  3182   	fcall	___lldiv
  4339  02DE  0020               	movlb	0	; select bank0
  4340  02DF  0824               	movf	?___lldiv+3,w
  4341  02E0  00B9               	movwf	ultoa@v+3
  4342  02E1  0823               	movf	?___lldiv+2,w
  4343  02E2  00B8               	movwf	ultoa@v+2
  4344  02E3  0822               	movf	?___lldiv+1,w
  4345  02E4  00B7               	movwf	ultoa@v+1
  4346  02E5  0821               	movf	?___lldiv,w
  4347  02E6  00B6               	movwf	ultoa@v
  4348  02E7  3001               	movlw	1
  4349  02E8  00B5               	movwf	??_ultoa
  4350  02E9  0835               	movf	??_ultoa,w
  4351  02EA  07BB               	addwf	ultoa@buf,f
  4352  02EB  0839               	movf	ultoa@v+3,w
  4353  02EC  0438               	iorwf	ultoa@v+2,w
  4354  02ED  0437               	iorwf	ultoa@v+1,w
  4355  02EE  0436               	iorwf	ultoa@v,w
  4356  02EF  1D03               	skipz
  4357  02F0  2ACA               	goto	l1999
  4358  02F1  083B               	movf	ultoa@buf,w
  4359  02F2  0086               	movwf	6
  4360  02F3  0187               	clrf	7
  4361  02F4  0181               	clrf	1
  4362  02F5  3001               	movlw	1
  4363  02F6  02BB               	subwf	ultoa@buf,f
  4364  02F7                     l2009:	
  4365  02F7  0833               	movf	ultoa@base,w
  4366  02F8  00A1               	movwf	___llmod@divisor
  4367  02F9  0834               	movf	ultoa@base+1,w
  4368  02FA  00A2               	movwf	___llmod@divisor+1
  4369  02FB  0D89               	rlf	9,f
  4370  02FC  3B89               	subwfb	9,f
  4371  02FD  0989               	comf	9,f
  4372  02FE  00A3               	movwf	___llmod@divisor+2
  4373  02FF  00A4               	movwf	___llmod@divisor+3
  4374  0300  0832               	movf	ultoa@val+3,w
  4375  0301  00A8               	movwf	___llmod@dividend+3
  4376  0302  0831               	movf	ultoa@val+2,w
  4377  0303  00A7               	movwf	___llmod@dividend+2
  4378  0304  0830               	movf	ultoa@val+1,w
  4379  0305  00A6               	movwf	___llmod@dividend+1
  4380  0306  082F               	movf	ultoa@val,w
  4381  0307  00A5               	movwf	___llmod@dividend
  4382  0308  3184  24C5  3182   	fcall	___llmod
  4383  030B  0020               	movlb	0	; select bank0
  4384  030C  0821               	movf	?___llmod,w
  4385  030D  00B5               	movwf	??_ultoa
  4386  030E  0835               	movf	??_ultoa,w
  4387  030F  00BA               	movwf	ultoa@c
  4388  0310  0833               	movf	ultoa@base,w
  4389  0311  00A1               	movwf	___lldiv@divisor
  4390  0312  0834               	movf	ultoa@base+1,w
  4391  0313  00A2               	movwf	___lldiv@divisor+1
  4392  0314  0D89               	rlf	9,f
  4393  0315  3B89               	subwfb	9,f
  4394  0316  0989               	comf	9,f
  4395  0317  00A3               	movwf	___lldiv@divisor+2
  4396  0318  00A4               	movwf	___lldiv@divisor+3
  4397  0319  0832               	movf	ultoa@val+3,w
  4398  031A  00A8               	movwf	___lldiv@dividend+3
  4399  031B  0831               	movf	ultoa@val+2,w
  4400  031C  00A7               	movwf	___lldiv@dividend+2
  4401  031D  0830               	movf	ultoa@val+1,w
  4402  031E  00A6               	movwf	___lldiv@dividend+1
  4403  031F  082F               	movf	ultoa@val,w
  4404  0320  00A5               	movwf	___lldiv@dividend
  4405  0321  3184  2425  3182   	fcall	___lldiv
  4406  0324  0020               	movlb	0	; select bank0
  4407  0325  0824               	movf	?___lldiv+3,w
  4408  0326  00B2               	movwf	ultoa@val+3
  4409  0327  0823               	movf	?___lldiv+2,w
  4410  0328  00B1               	movwf	ultoa@val+2
  4411  0329  0822               	movf	?___lldiv+1,w
  4412  032A  00B0               	movwf	ultoa@val+1
  4413  032B  0821               	movf	?___lldiv,w
  4414  032C  00AF               	movwf	ultoa@val
  4415  032D  300A               	movlw	10
  4416  032E  023A               	subwf	ultoa@c,w
  4417  032F  1C03               	skipc
  4418  0330  2B35               	goto	l848
  4419  0331  3007               	movlw	7
  4420  0332  00B5               	movwf	??_ultoa
  4421  0333  0835               	movf	??_ultoa,w
  4422  0334  07BA               	addwf	ultoa@c,f
  4423  0335                     l848:	
  4424  0335  3030               	movlw	48
  4425  0336  00B5               	movwf	??_ultoa
  4426  0337  0835               	movf	??_ultoa,w
  4427  0338  07BA               	addwf	ultoa@c,f
  4428  0339  083A               	movf	ultoa@c,w
  4429  033A  00B5               	movwf	??_ultoa
  4430  033B  083B               	movf	ultoa@buf,w
  4431  033C  0086               	movwf	6
  4432  033D  0187               	clrf	7
  4433  033E  0835               	movf	??_ultoa,w
  4434  033F  0081               	movwf	1
  4435  0340  3001               	movlw	1
  4436  0341  02BB               	subwf	ultoa@buf,f
  4437  0342  0832               	movf	ultoa@val+3,w
  4438  0343  0431               	iorwf	ultoa@val+2,w
  4439  0344  0430               	iorwf	ultoa@val+1,w
  4440  0345  042F               	iorwf	ultoa@val,w
  4441  0346  1903               	btfsc	3,2
  4442  0347  0008               	return
  4443  0348  2AF7               	goto	l2009
  4444  0349                     __end_of_ultoa:	
  4445                           ;	Return value of _ultoa is never used
  4446                           
  4447                           
  4448                           	psect	text9
  4449  04C5                     __ptext9:	
  4450 ;; *************** function ___llmod *****************
  4451 ;; Defined at:
  4452 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\llmod.c"
  4453 ;; Parameters:    Size  Location     Type
  4454 ;;  divisor         4    1[BANK0 ] unsigned long 
  4455 ;;  dividend        4    5[BANK0 ] unsigned long 
  4456 ;; Auto vars:     Size  Location     Type
  4457 ;;  counter         1   10[BANK0 ] unsigned char 
  4458 ;; Return value:  Size  Location     Type
  4459 ;;                  4    1[BANK0 ] unsigned long 
  4460 ;; Registers used:
  4461 ;;		wreg, status,2, status,0
  4462 ;; Tracked objects:
  4463 ;;		On entry : 0/0
  4464 ;;		On exit  : 0/0
  4465 ;;		Unchanged: 0/0
  4466 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4467 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4468 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4469 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4470 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4471 ;;Total ram usage:       10 bytes
  4472 ;; Hardware stack levels used:    1
  4473 ;; Hardware stack levels required when called:    7
  4474 ;; This function calls:
  4475 ;;		Nothing
  4476 ;; This function is called by:
  4477 ;;		_ultoa
  4478 ;; This function uses a non-reentrant model
  4479 ;;
  4480                           
  4481                           
  4482                           ;psect for function ___llmod
  4483  04C5                     ___llmod:	
  4484                           
  4485                           ;incstack = 0
  4486                           ; Regs used in ___llmod: [wreg+status,2+status,0]
  4487  04C5  0020               	movlb	0	; select bank0
  4488  04C6  0824               	movf	___llmod@divisor+3,w
  4489  04C7  0423               	iorwf	___llmod@divisor+2,w
  4490  04C8  0422               	iorwf	___llmod@divisor+1,w
  4491  04C9  0421               	iorwf	___llmod@divisor,w
  4492  04CA  1903               	skipnz
  4493  04CB  2CFF               	goto	l1881
  4494  04CC  01AA               	clrf	___llmod@counter
  4495  04CD  0AAA               	incf	___llmod@counter,f
  4496  04CE                     l1871:	
  4497  04CE  1BA4               	btfsc	___llmod@divisor+3,7
  4498  04CF  2CDC               	goto	l1873
  4499  04D0  3001               	movlw	1
  4500  04D1                     u785:	
  4501  04D1  35A1               	lslf	___llmod@divisor,f
  4502  04D2  0DA2               	rlf	___llmod@divisor+1,f
  4503  04D3  0DA3               	rlf	___llmod@divisor+2,f
  4504  04D4  0DA4               	rlf	___llmod@divisor+3,f
  4505  04D5  0B89               	decfsz	9,f
  4506  04D6  2CD1               	goto	u785
  4507  04D7  3001               	movlw	1
  4508  04D8  00A9               	movwf	??___llmod
  4509  04D9  0829               	movf	??___llmod,w
  4510  04DA  07AA               	addwf	___llmod@counter,f
  4511  04DB  2CCE               	goto	l1871
  4512  04DC                     l1873:	
  4513  04DC  0824               	movf	___llmod@divisor+3,w
  4514  04DD  0228               	subwf	___llmod@dividend+3,w
  4515  04DE  1D03               	skipz
  4516  04DF  2CEA               	goto	u805
  4517  04E0  0823               	movf	___llmod@divisor+2,w
  4518  04E1  0227               	subwf	___llmod@dividend+2,w
  4519  04E2  1D03               	skipz
  4520  04E3  2CEA               	goto	u805
  4521  04E4  0822               	movf	___llmod@divisor+1,w
  4522  04E5  0226               	subwf	___llmod@dividend+1,w
  4523  04E6  1D03               	skipz
  4524  04E7  2CEA               	goto	u805
  4525  04E8  0821               	movf	___llmod@divisor,w
  4526  04E9  0225               	subwf	___llmod@dividend,w
  4527  04EA                     u805:	
  4528  04EA  1C03               	skipc
  4529  04EB  2CF4               	goto	l1877
  4530  04EC  0821               	movf	___llmod@divisor,w
  4531  04ED  02A5               	subwf	___llmod@dividend,f
  4532  04EE  0822               	movf	___llmod@divisor+1,w
  4533  04EF  3BA6               	subwfb	___llmod@dividend+1,f
  4534  04F0  0823               	movf	___llmod@divisor+2,w
  4535  04F1  3BA7               	subwfb	___llmod@dividend+2,f
  4536  04F2  0824               	movf	___llmod@divisor+3,w
  4537  04F3  3BA8               	subwfb	___llmod@dividend+3,f
  4538  04F4                     l1877:	
  4539  04F4  3001               	movlw	1
  4540  04F5                     u815:	
  4541  04F5  36A4               	lsrf	___llmod@divisor+3,f
  4542  04F6  0CA3               	rrf	___llmod@divisor+2,f
  4543  04F7  0CA2               	rrf	___llmod@divisor+1,f
  4544  04F8  0CA1               	rrf	___llmod@divisor,f
  4545  04F9  0B89               	decfsz	9,f
  4546  04FA  2CF5               	goto	u815
  4547  04FB  3001               	movlw	1
  4548  04FC  02AA               	subwf	___llmod@counter,f
  4549  04FD  1D03               	btfss	3,2
  4550  04FE  2CDC               	goto	l1873
  4551  04FF                     l1881:	
  4552  04FF  0828               	movf	___llmod@dividend+3,w
  4553  0500  00A4               	movwf	?___llmod+3
  4554  0501  0827               	movf	___llmod@dividend+2,w
  4555  0502  00A3               	movwf	?___llmod+2
  4556  0503  0826               	movf	___llmod@dividend+1,w
  4557  0504  00A2               	movwf	?___llmod+1
  4558  0505  0825               	movf	___llmod@dividend,w
  4559  0506  00A1               	movwf	?___llmod
  4560  0507  0008               	return
  4561  0508                     __end_of___llmod:	
  4562                           
  4563                           	psect	text10
  4564  06A8                     __ptext10:	
  4565 ;; *************** function _strcat *****************
  4566 ;; Defined at:
  4567 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\strcat.c"
  4568 ;; Parameters:    Size  Location     Type
  4569 ;;  to              1    wreg     PTR unsigned char 
  4570 ;;		 -> main@packet(33), loop@packet(33), 
  4571 ;;  from            2    1[BANK0 ] PTR const unsigned char 
  4572 ;;		 -> STR_9(5), STR_7(5), STR_6(4), STR_5(5), 
  4573 ;;		 -> STR_4(5), STR_3(4), STR_2(2), setMessage@tempString(16), 
  4574 ;;		 -> STR_1(2), romData.name(16), romData(19), 
  4575 ;; Auto vars:     Size  Location     Type
  4576 ;;  to              1    5[BANK0 ] PTR unsigned char 
  4577 ;;		 -> main@packet(33), loop@packet(33), 
  4578 ;;  cp              1    4[BANK0 ] PTR unsigned char 
  4579 ;;		 -> main@packet(33), loop@packet(33), 
  4580 ;; Return value:  Size  Location     Type
  4581 ;;                  1    wreg      PTR unsigned char 
  4582 ;; Registers used:
  4583 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath
  4584 ;; Tracked objects:
  4585 ;;		On entry : 0/0
  4586 ;;		On exit  : 0/0
  4587 ;;		Unchanged: 0/0
  4588 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4589 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4590 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4591 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4592 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4593 ;;Total ram usage:        5 bytes
  4594 ;; Hardware stack levels used:    1
  4595 ;; Hardware stack levels required when called:    7
  4596 ;; This function calls:
  4597 ;;		Nothing
  4598 ;; This function is called by:
  4599 ;;		_setMessage
  4600 ;; This function uses a non-reentrant model
  4601 ;;
  4602                           
  4603                           
  4604                           ;psect for function _strcat
  4605  06A8                     _strcat:	
  4606                           
  4607                           ;incstack = 0
  4608                           ; Regs used in _strcat: [wreg-fsr1h+status,2+status,0+pclath]
  4609                           ;strcat@to stored from wreg
  4610  06A8  0020               	movlb	0	; select bank0
  4611  06A9  00A5               	movwf	strcat@to
  4612  06AA  0825               	movf	strcat@to,w
  4613  06AB  00A3               	movwf	??_strcat
  4614  06AC  0823               	movf	??_strcat,w
  4615  06AD  00A4               	movwf	strcat@cp
  4616  06AE                     l1989:	
  4617  06AE  0824               	movf	strcat@cp,w
  4618  06AF  0086               	movwf	6
  4619  06B0  0187               	clrf	7
  4620  06B1  0801               	movf	1,w
  4621  06B2  1903               	btfsc	3,2
  4622  06B3  2EC1               	goto	l1995
  4623  06B4  3001               	movlw	1
  4624  06B5  00A3               	movwf	??_strcat
  4625  06B6  0823               	movf	??_strcat,w
  4626  06B7  07A4               	addwf	strcat@cp,f
  4627  06B8  2EAE               	goto	l1989
  4628  06B9                     l1991:	
  4629  06B9  3001               	movlw	1
  4630  06BA  00A3               	movwf	??_strcat
  4631  06BB  0823               	movf	??_strcat,w
  4632  06BC  07A4               	addwf	strcat@cp,f
  4633  06BD  3001               	movlw	1
  4634  06BE  07A1               	addwf	strcat@from,f
  4635  06BF  3000               	movlw	0
  4636  06C0  3DA2               	addwfc	strcat@from+1,f
  4637  06C1                     l1995:	
  4638  06C1  0824               	movf	strcat@cp,w
  4639  06C2  0086               	movwf	6
  4640  06C3  0187               	clrf	7
  4641  06C4  0821               	movf	strcat@from,w
  4642  06C5  0084               	movwf	4
  4643  06C6  0822               	movf	strcat@from+1,w
  4644  06C7  0085               	movwf	5
  4645  06C8  0800               	movf	0,w	;code access
  4646  06C9  3FC0               	movwi [0]fsr1
  4647  06CA  0889               	movf	9,f
  4648  06CB  1903               	btfsc	3,2
  4649  06CC  0008               	return
  4650  06CD  2EB9               	goto	l1991
  4651  06CE                     __end_of_strcat:	
  4652                           ;	Return value of _strcat is never used
  4653                           
  4654                           
  4655                           	psect	text11
  4656  0FB1                     __ptext11:	
  4657 ;; *************** function _memset *****************
  4658 ;; Defined at:
  4659 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\memset.c"
  4660 ;; Parameters:    Size  Location     Type
  4661 ;;  p1              2    1[BANK0 ] PTR void 
  4662 ;;		 -> RXPacket(33), main@packet(33), loop@packet(33), 
  4663 ;;  c               2    3[BANK0 ] int 
  4664 ;;  n               2    5[BANK0 ] unsigned int 
  4665 ;; Auto vars:     Size  Location     Type
  4666 ;;  p               2    7[BANK0 ] PTR unsigned char 
  4667 ;;		 -> RXPacket(33), main@packet(33), loop@packet(33), 
  4668 ;; Return value:  Size  Location     Type
  4669 ;;                  2    1[BANK0 ] PTR void 
  4670 ;; Registers used:
  4671 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  4672 ;; Tracked objects:
  4673 ;;		On entry : 0/0
  4674 ;;		On exit  : 0/0
  4675 ;;		Unchanged: 0/0
  4676 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4677 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4678 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4679 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4680 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4681 ;;Total ram usage:        8 bytes
  4682 ;; Hardware stack levels used:    1
  4683 ;; Hardware stack levels required when called:    7
  4684 ;; This function calls:
  4685 ;;		Nothing
  4686 ;; This function is called by:
  4687 ;;		_setMessage
  4688 ;; This function uses a non-reentrant model
  4689 ;;
  4690                           
  4691                           
  4692                           ;psect for function _memset
  4693  0FB1                     _memset:	
  4694                           
  4695                           ;incstack = 0
  4696                           ; Regs used in _memset: [wreg+fsr1l+fsr1h+status,2+status,0]
  4697  0FB1  0020               	movlb	0	; select bank0
  4698  0FB2  0822               	movf	memset@p1+1,w
  4699  0FB3  00A8               	movwf	memset@p+1
  4700  0FB4  0821               	movf	memset@p1,w
  4701  0FB5  00A7               	movwf	memset@p
  4702  0FB6                     l2691:	
  4703  0FB6  3001               	movlw	1
  4704  0FB7  02A5               	subwf	memset@n,f
  4705  0FB8  3000               	movlw	0
  4706  0FB9  3BA6               	subwfb	memset@n+1,f
  4707  0FBA  0A25               	incf	memset@n,w
  4708  0FBB  1903               	btfsc	3,2
  4709  0FBC  0A26               	incf	memset@n+1,w
  4710  0FBD  1903               	btfsc	3,2
  4711  0FBE  0008               	return
  4712  0FBF  0827               	movf	memset@p,w
  4713  0FC0  0086               	movwf	6
  4714  0FC1  0828               	movf	memset@p+1,w
  4715  0FC2  0087               	movwf	7
  4716  0FC3  0823               	movf	memset@c,w
  4717  0FC4  0081               	movwf	1
  4718  0FC5  3001               	movlw	1
  4719  0FC6  07A7               	addwf	memset@p,f
  4720  0FC7  3000               	movlw	0
  4721  0FC8  3DA8               	addwfc	memset@p+1,f
  4722  0FC9  2FB6               	goto	l2691
  4723  0FCA                     __end_of_memset:	
  4724                           ;	Return value of _memset is never used
  4725                           
  4726                           
  4727                           	psect	text12
  4728  01A7                     __ptext12:	
  4729 ;; *************** function _nrf24l01SendPacket *****************
  4730 ;; Defined at:
  4731 ;;		line 149 in file "nrf24l01.c"
  4732 ;; Parameters:    Size  Location     Type
  4733 ;;  Packet          1    wreg     PTR struct .
  4734 ;;		 -> main@packet(33), loop@packet(33), 
  4735 ;; Auto vars:     Size  Location     Type
  4736 ;;  Packet          1   11[BANK0 ] PTR struct .
  4737 ;;		 -> main@packet(33), loop@packet(33), 
  4738 ;;  i               1   12[BANK0 ] unsigned char 
  4739 ;; Return value:  Size  Location     Type
  4740 ;;                  1    wreg      void 
  4741 ;; Registers used:
  4742 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4743 ;; Tracked objects:
  4744 ;;		On entry : 0/0
  4745 ;;		On exit  : 0/0
  4746 ;;		Unchanged: 0/0
  4747 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4748 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4749 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4750 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4751 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4752 ;;Total ram usage:        4 bytes
  4753 ;; Hardware stack levels used:    1
  4754 ;; Hardware stack levels required when called:   11
  4755 ;; This function calls:
  4756 ;;		_enableInterrupts
  4757 ;;		_nrf24l01CEHigh
  4758 ;;		_nrf24l01CELow
  4759 ;;		_nrf24l01SPIEnd
  4760 ;;		_nrf24l01SPISend
  4761 ;;		_nrf24l01SPIStart
  4762 ;;		_nrf24l01SetRXMode
  4763 ;;		_strlen
  4764 ;; This function is called by:
  4765 ;;		_loop
  4766 ;;		_main
  4767 ;;		_nrf24l01SendACK
  4768 ;; This function uses a non-reentrant model
  4769 ;;
  4770                           
  4771                           
  4772                           ;psect for function _nrf24l01SendPacket
  4773  01A7                     _nrf24l01SendPacket:	
  4774                           
  4775                           ;incstack = 0
  4776                           ; Regs used in _nrf24l01SendPacket: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4777                           ;nrf24l01SendPacket@Packet stored from wreg
  4778  01A7  0020               	movlb	0	; select bank0
  4779  01A8  00AB               	movwf	nrf24l01SendPacket@Packet
  4780                           
  4781                           ;nrf24l01.c: 151: TXPacket = Packet;
  4782  01A9  082B               	movf	nrf24l01SendPacket@Packet,w
  4783  01AA  00A9               	movwf	??_nrf24l01SendPacket
  4784  01AB  0829               	movf	??_nrf24l01SendPacket,w
  4785  01AC  00D9               	movwf	_TXPacket
  4786  01AD                     l307:	
  4787                           ;nrf24l01.c: 154: unsigned char i;;nrf24l01.c: 158: RESEND:
  4788                           
  4789                           
  4790                           ;nrf24l01.c: 161: i = 0xFF;
  4791  01AD  30FF               	movlw	255
  4792  01AE  00A9               	movwf	??_nrf24l01SendPacket
  4793  01AF  0829               	movf	??_nrf24l01SendPacket,w
  4794  01B0  00AC               	movwf	nrf24l01SendPacket@i
  4795  01B1                     l2263:	
  4796                           ;nrf24l01.c: 162: while (nrf24l01.TXBusy){
  4797                           
  4798  01B1  0020               	movlb	0	; select bank0
  4799  01B2  1C5B               	btfss	_nrf24l01,0	;volatile
  4800  01B3  29BD               	goto	l311
  4801                           
  4802                           ;nrf24l01.c: 163: if (!--i) {
  4803  01B4  3001               	movlw	1
  4804  01B5  02AC               	subwf	nrf24l01SendPacket@i,f
  4805  01B6  1903               	btfsc	3,2
  4806  01B7  29AD               	goto	l307
  4807                           
  4808                           ;nrf24l01.c: 165: };nrf24l01.c: 166: _delay((unsigned long)((50)*(16000000/4000000.0)));
  4809                           
  4810                           ;nrf24l01.c: 164: goto RESEND;
  4811  01B8  3042               	movlw	66
  4812  01B9                     u1527:	
  4813  01B9  0B89               	decfsz	9,f
  4814  01BA  29B9               	goto	u1527
  4815  01BB  3200               	nop2
  4816  01BC  29B1               	goto	l2263
  4817  01BD                     l311:	
  4818                           
  4819                           ;nrf24l01.c: 167: };nrf24l01.c: 170: nrf24l01.TXBusy = 1;
  4820  01BD  145B               	bsf	_nrf24l01,0	;volatile
  4821                           
  4822                           ;nrf24l01.c: 173: enableInterrupts(0);
  4823  01BE  3000               	movlw	0
  4824  01BF  318F  275A  3181   	fcall	_enableInterrupts
  4825                           
  4826                           ;nrf24l01.c: 176: nrf24l01SetRXMode(0);
  4827  01C2  3000               	movlw	0
  4828  01C3  3185  2544  3181   	fcall	_nrf24l01SetRXMode
  4829                           
  4830                           ;nrf24l01.c: 179: nrf24l01SPIStart();
  4831  01C6  3187  27F4  3181   	fcall	_nrf24l01SPIStart
  4832                           
  4833                           ;nrf24l01.c: 182: nrf24l01SPISend(0b10110000);
  4834  01C9  30B0               	movlw	176
  4835  01CA  318F  2762  3181   	fcall	_nrf24l01SPISend
  4836                           
  4837                           ;nrf24l01.c: 184: nrf24l01SPISend(TXPacket->packetData.byte);
  4838  01CD  0020               	movlb	0	; select bank0
  4839  01CE  0859               	movf	_TXPacket,w
  4840  01CF  0086               	movwf	6
  4841  01D0  0187               	clrf	7
  4842  01D1  0801               	movf	1,w
  4843  01D2  318F  2762  3181   	fcall	_nrf24l01SPISend
  4844                           
  4845                           ;nrf24l01.c: 187: for (i = 0; (i < strlen(TXPacket->Message)) && (i < sizeof(TXPacket->M
      +                          essage)); i++){
  4846  01D5  0020               	movlb	0	; select bank0
  4847  01D6  01AC               	clrf	nrf24l01SendPacket@i
  4848  01D7  29E8               	goto	l2275
  4849  01D8                     l2271:	
  4850                           
  4851                           ;nrf24l01.c: 188: nrf24l01SPISend(TXPacket->Message[i]);
  4852  01D8  082C               	movf	nrf24l01SendPacket@i,w
  4853  01D9  3E01               	addlw	1
  4854  01DA  0759               	addwf	_TXPacket,w
  4855  01DB  00A9               	movwf	??_nrf24l01SendPacket
  4856  01DC  0829               	movf	??_nrf24l01SendPacket,w
  4857  01DD  0086               	movwf	6
  4858  01DE  0187               	clrf	7
  4859  01DF  0801               	movf	1,w
  4860  01E0  318F  2762  3181   	fcall	_nrf24l01SPISend
  4861  01E3  3001               	movlw	1
  4862  01E4  0020               	movlb	0	; select bank0
  4863  01E5  00A9               	movwf	??_nrf24l01SendPacket
  4864  01E6  0829               	movf	??_nrf24l01SendPacket,w
  4865  01E7  07AC               	addwf	nrf24l01SendPacket@i,f
  4866  01E8                     l2275:	
  4867  01E8  0859               	movf	_TXPacket,w
  4868  01E9  3E01               	addlw	1
  4869  01EA  3186  26F4  3181   	fcall	_strlen
  4870  01ED  0020               	movlb	0	; select bank0
  4871  01EE  082C               	movf	nrf24l01SendPacket@i,w
  4872  01EF  00A9               	movwf	??_nrf24l01SendPacket
  4873  01F0  01AA               	clrf	??_nrf24l01SendPacket+1
  4874  01F1  0822               	movf	?_strlen+1,w
  4875  01F2  022A               	subwf	??_nrf24l01SendPacket+1,w
  4876  01F3  1D03               	skipz
  4877  01F4  29F7               	goto	u1135
  4878  01F5  0821               	movf	?_strlen,w
  4879  01F6  0229               	subwf	??_nrf24l01SendPacket,w
  4880  01F7                     u1135:	
  4881  01F7  1803               	skipnc
  4882  01F8  29FD               	goto	l2279
  4883  01F9  3020               	movlw	32
  4884  01FA  022C               	subwf	nrf24l01SendPacket@i,w
  4885  01FB  1C03               	skipc
  4886  01FC  29D8               	goto	l2271
  4887  01FD                     l2279:	
  4888                           
  4889                           ;nrf24l01.c: 189: };nrf24l01.c: 192: nrf24l01SPIEnd();
  4890  01FD  318F  2753  3181   	fcall	_nrf24l01SPIEnd
  4891                           
  4892                           ;nrf24l01.c: 195: nrf24l01CEHigh();
  4893  0200  318F  2744  3181   	fcall	_nrf24l01CEHigh
  4894                           
  4895                           ;nrf24l01.c: 196: _delay((unsigned long)((20)*(16000000/4000000.0)));
  4896  0203  301A               	movlw	26
  4897  0204                     u1537:	
  4898  0204  0B89               	decfsz	9,f
  4899  0205  2A04               	goto	u1537
  4900  0206  3200               	nop2
  4901                           
  4902                           ;nrf24l01.c: 197: nrf24l01CELow();
  4903  0207  318F  2747  3181   	fcall	_nrf24l01CELow
  4904                           
  4905                           ;nrf24l01.c: 200: enableInterrupts(1);
  4906  020A  3001               	movlw	1
  4907  020B  318F  275A  3181   	fcall	_enableInterrupts
  4908                           
  4909                           ;nrf24l01.c: 203: i = 0xFF;
  4910  020E  30FF               	movlw	255
  4911  020F  0020               	movlb	0	; select bank0
  4912  0210  00A9               	movwf	??_nrf24l01SendPacket
  4913  0211  0829               	movf	??_nrf24l01SendPacket,w
  4914  0212  00AC               	movwf	nrf24l01SendPacket@i
  4915  0213                     l2293:	
  4916                           ;nrf24l01.c: 204: while (nrf24l01.TXBusy){
  4917                           
  4918  0213  0020               	movlb	0	; select bank0
  4919  0214  1C5B               	btfss	_nrf24l01,0	;volatile
  4920  0215  2A1F               	goto	l2295
  4921                           
  4922                           ;nrf24l01.c: 205: if (!--i) {
  4923  0216  3001               	movlw	1
  4924  0217  02AC               	subwf	nrf24l01SendPacket@i,f
  4925  0218  1903               	btfsc	3,2
  4926  0219  29AD               	goto	l307
  4927                           
  4928                           ;nrf24l01.c: 207: };nrf24l01.c: 208: _delay((unsigned long)((20)*(16000000/4000000.0)));
  4929                           
  4930                           ;nrf24l01.c: 206: goto RESEND;
  4931  021A  301A               	movlw	26
  4932  021B                     u1547:	
  4933  021B  0B89               	decfsz	9,f
  4934  021C  2A1B               	goto	u1547
  4935  021D  3200               	nop2
  4936  021E  2A13               	goto	l2293
  4937  021F                     l2295:	
  4938                           
  4939                           ;nrf24l01.c: 209: };nrf24l01.c: 213: i = 0xFF;
  4940  021F  30FF               	movlw	255
  4941  0220  00A9               	movwf	??_nrf24l01SendPacket
  4942  0221  0829               	movf	??_nrf24l01SendPacket,w
  4943  0222  00AC               	movwf	nrf24l01SendPacket@i
  4944  0223                     l2303:	
  4945                           ;nrf24l01.c: 214: while (TXPacket->packetData.ACKRequest){
  4946                           
  4947  0223  0020               	movlb	0	; select bank0
  4948  0224  0859               	movf	_TXPacket,w
  4949  0225  0086               	movwf	6
  4950  0226  0187               	clrf	7
  4951  0227  1C81               	btfss	1,1
  4952  0228  0008               	return
  4953                           
  4954                           ;nrf24l01.c: 215: if (!--i) {
  4955  0229  3001               	movlw	1
  4956  022A  02AC               	subwf	nrf24l01SendPacket@i,f
  4957  022B  1903               	btfsc	3,2
  4958  022C  29AD               	goto	l307
  4959                           
  4960                           ;nrf24l01.c: 217: };nrf24l01.c: 218: _delay((unsigned long)((500)*(16000000/4000000.0)))
      +                          ;
  4961                           
  4962                           ;nrf24l01.c: 216: goto RESEND;
  4963  022D  3003               	movlw	3
  4964  022E  0020               	movlb	0	; select bank0
  4965  022F  00A9               	movwf	??_nrf24l01SendPacket
  4966  0230  3097               	movlw	151
  4967  0231                     u1557:	
  4968  0231  0B89               	decfsz	9,f
  4969  0232  2A31               	goto	u1557
  4970  0233  0BA9               	decfsz	??_nrf24l01SendPacket,f
  4971  0234  2A31               	goto	u1557
  4972  0235  3200               	nop2
  4973  0236  2A23               	goto	l2303
  4974  0237                     __end_of_nrf24l01SendPacket:	
  4975                           
  4976                           	psect	text13
  4977  06F4                     __ptext13:	
  4978 ;; *************** function _strlen *****************
  4979 ;; Defined at:
  4980 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\strlen.c"
  4981 ;; Parameters:    Size  Location     Type
  4982 ;;  s               1    wreg     PTR const unsigned char 
  4983 ;;		 -> packet.Message(32), packet.Message(32), NULL(0), main@packet(33), 
  4984 ;;		 -> loop@packet(33), 
  4985 ;; Auto vars:     Size  Location     Type
  4986 ;;  s               1    7[BANK0 ] PTR const unsigned char 
  4987 ;;		 -> packet.Message(32), packet.Message(32), NULL(0), main@packet(33), 
  4988 ;;		 -> loop@packet(33), 
  4989 ;;  cp              1    8[BANK0 ] PTR const unsigned char 
  4990 ;;		 -> packet.Message(32), packet.Message(32), NULL(0), main@packet(33), 
  4991 ;;		 -> loop@packet(33), 
  4992 ;; Return value:  Size  Location     Type
  4993 ;;                  2    1[BANK0 ] unsigned int 
  4994 ;; Registers used:
  4995 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  4996 ;; Tracked objects:
  4997 ;;		On entry : 0/0
  4998 ;;		On exit  : 0/0
  4999 ;;		Unchanged: 0/0
  5000 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5001 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5002 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5003 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5004 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5005 ;;Total ram usage:        8 bytes
  5006 ;; Hardware stack levels used:    1
  5007 ;; Hardware stack levels required when called:    7
  5008 ;; This function calls:
  5009 ;;		Nothing
  5010 ;; This function is called by:
  5011 ;;		_nrf24l01SendPacket
  5012 ;; This function uses a non-reentrant model
  5013 ;;
  5014                           
  5015                           
  5016                           ;psect for function _strlen
  5017  06F4                     _strlen:	
  5018                           
  5019                           ;incstack = 0
  5020                           ; Regs used in _strlen: [wreg+fsr1l+fsr1h+status,2+status,0]
  5021                           ;strlen@s stored from wreg
  5022  06F4  0020               	movlb	0	; select bank0
  5023  06F5  00A7               	movwf	strlen@s
  5024  06F6  0827               	movf	strlen@s,w
  5025  06F7  00A3               	movwf	??_strlen
  5026  06F8  0823               	movf	??_strlen,w
  5027  06F9  00A8               	movwf	strlen@cp
  5028  06FA                     l2041:	
  5029  06FA  0828               	movf	strlen@cp,w
  5030  06FB  0086               	movwf	6
  5031  06FC  0187               	clrf	7
  5032  06FD  0801               	movf	1,w
  5033  06FE  1903               	btfsc	3,2
  5034  06FF  2F05               	goto	l2043
  5035  0700  3001               	movlw	1
  5036  0701  00A3               	movwf	??_strlen
  5037  0702  0823               	movf	??_strlen,w
  5038  0703  07A8               	addwf	strlen@cp,f
  5039  0704  2EFA               	goto	l2041
  5040  0705                     l2043:	
  5041  0705  0827               	movf	strlen@s,w
  5042  0706  00A3               	movwf	??_strlen
  5043  0707  3000               	movlw	0
  5044  0708  00A4               	movwf	??_strlen+1
  5045  0709  09A3               	comf	??_strlen,f
  5046  070A  09A4               	comf	??_strlen+1,f
  5047  070B  0AA3               	incf	??_strlen,f
  5048  070C  1903               	skipnz
  5049  070D  0AA4               	incf	??_strlen+1,f
  5050  070E  0828               	movf	strlen@cp,w
  5051  070F  00A5               	movwf	??_strlen+2
  5052  0710  3000               	movlw	0
  5053  0711  00A6               	movwf	??_strlen+3
  5054  0712  0823               	movf	??_strlen,w
  5055  0713  0725               	addwf	??_strlen+2,w
  5056  0714  00A1               	movwf	?_strlen
  5057  0715  0824               	movf	??_strlen+1,w
  5058  0716  3D26               	addwfc	??_strlen+3,w
  5059  0717  00A2               	movwf	?_strlen+1
  5060  0718  0008               	return
  5061  0719                     __end_of_strlen:	
  5062                           
  5063                           	psect	text14
  5064  0544                     __ptext14:	
  5065 ;; *************** function _nrf24l01SetRXMode *****************
  5066 ;; Defined at:
  5067 ;;		line 35 in file "nrf24l01.c"
  5068 ;; Parameters:    Size  Location     Type
  5069 ;;  rxMode          1    wreg     unsigned char 
  5070 ;; Auto vars:     Size  Location     Type
  5071 ;;  rxMode          1    6[BANK0 ] unsigned char 
  5072 ;;  config          1    5[BANK0 ] struct .
  5073 ;; Return value:  Size  Location     Type
  5074 ;;                  1    wreg      void 
  5075 ;; Registers used:
  5076 ;;		wreg, status,2, status,0, pclath, cstack
  5077 ;; Tracked objects:
  5078 ;;		On entry : 0/0
  5079 ;;		On exit  : 0/0
  5080 ;;		Unchanged: 0/0
  5081 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5082 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5083 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5084 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5085 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5086 ;;Total ram usage:        3 bytes
  5087 ;; Hardware stack levels used:    1
  5088 ;; Hardware stack levels required when called:   10
  5089 ;; This function calls:
  5090 ;;		_nrf24l01CEHigh
  5091 ;;		_nrf24l01CELow
  5092 ;;		_nrf24l01Send
  5093 ;; This function is called by:
  5094 ;;		_nrf24l01SendPacket
  5095 ;;		_checkRxData
  5096 ;; This function uses a non-reentrant model
  5097 ;;
  5098                           
  5099                           
  5100                           ;psect for function _nrf24l01SetRXMode
  5101  0544                     _nrf24l01SetRXMode:	
  5102                           
  5103                           ;incstack = 0
  5104                           ; Regs used in _nrf24l01SetRXMode: [wreg+status,2+status,0+pclath+cstack]
  5105                           ;nrf24l01SetRXMode@rxMode stored from wreg
  5106  0544  0020               	movlb	0	; select bank0
  5107  0545  00A6               	movwf	nrf24l01SetRXMode@rxMode
  5108                           
  5109                           ;nrf24l01.c: 37: n_CONFIG_t config;;nrf24l01.c: 40: config.byte = nrf24l01Send(0b0000000
      +                          0 | 0x00, 0);
  5110  0546  01A1               	clrf	nrf24l01Send@data
  5111  0547  3000               	movlw	0
  5112  0548  3187  275D  3185   	fcall	_nrf24l01Send
  5113  054B  0020               	movlb	0	; select bank0
  5114  054C  00A4               	movwf	??_nrf24l01SetRXMode
  5115  054D  0824               	movf	??_nrf24l01SetRXMode,w
  5116  054E  00A5               	movwf	nrf24l01SetRXMode@config
  5117                           
  5118                           ;nrf24l01.c: 43: if (config.PRIM_RX != rxMode){
  5119  054F  0825               	movf	nrf24l01SetRXMode@config,w
  5120  0550  3901               	andlw	1
  5121  0551  0626               	xorwf	nrf24l01SetRXMode@rxMode,w
  5122  0552  1903               	skipnz
  5123  0553  2D78               	goto	l1975
  5124                           
  5125                           ;nrf24l01.c: 46: nrf24l01CELow();
  5126  0554  318F  2747  3185   	fcall	_nrf24l01CELow
  5127                           
  5128                           ;nrf24l01.c: 47: _delay((unsigned long)((200)*(16000000/4000000.0)));
  5129  0557  30A0               	movlw	160
  5130  0558                     u1567:	
  5131  0558  3200               	nop2
  5132  0559  0B89               	decfsz	9,f
  5133  055A  2D58               	goto	u1567
  5134                           
  5135                           ;nrf24l01.c: 54: config.PRIM_RX = rxMode;
  5136  055B  0020               	movlb	0	; select bank0
  5137  055C  0826               	movf	nrf24l01SetRXMode@rxMode,w
  5138  055D  3901               	andlw	1
  5139  055E  1025               	bcf	nrf24l01SetRXMode@config,0
  5140  055F  1D03               	skipz
  5141  0560  1425               	bsf	nrf24l01SetRXMode@config,0
  5142                           
  5143                           ;nrf24l01.c: 55: nrf24l01Send(0b00100000 | 0x00, config.byte);
  5144  0561  0825               	movf	nrf24l01SetRXMode@config,w
  5145  0562  00A4               	movwf	??_nrf24l01SetRXMode
  5146  0563  0824               	movf	??_nrf24l01SetRXMode,w
  5147  0564  00A1               	movwf	nrf24l01Send@data
  5148  0565  3020               	movlw	32
  5149  0566  3187  275D  3185   	fcall	_nrf24l01Send
  5150                           
  5151                           ;nrf24l01.c: 58: _delay((unsigned long)((200)*(16000000/4000000.0)));
  5152  0569  30A0               	movlw	160
  5153  056A                     u1577:	
  5154  056A  3200               	nop2
  5155  056B  0B89               	decfsz	9,f
  5156  056C  2D6A               	goto	u1577
  5157                           
  5158                           ;nrf24l01.c: 61: if (rxMode){
  5159  056D  0020               	movlb	0	; select bank0
  5160  056E  0826               	movf	nrf24l01SetRXMode@rxMode,w
  5161  056F  1903               	btfsc	3,2
  5162  0570  2D78               	goto	l1975
  5163                           
  5164                           ;nrf24l01.c: 62: nrf24l01CEHigh();
  5165  0571  318F  2744  3185   	fcall	_nrf24l01CEHigh
  5166                           
  5167                           ;nrf24l01.c: 63: _delay((unsigned long)((200)*(16000000/4000000.0)));
  5168  0574  30A0               	movlw	160
  5169  0575                     u1587:	
  5170  0575  3200               	nop2
  5171  0576  0B89               	decfsz	9,f
  5172  0577  2D75               	goto	u1587
  5173  0578                     l1975:	
  5174                           
  5175                           ;nrf24l01.c: 64: };nrf24l01.c: 65: };nrf24l01.c: 68: nrf24l01.RXMode = rxMode;
  5176  0578  0020               	movlb	0	; select bank0
  5177  0579  0826               	movf	nrf24l01SetRXMode@rxMode,w
  5178  057A  3901               	andlw	1
  5179  057B  115B               	bcf	_nrf24l01,2	;volatile
  5180  057C  1D03               	skipz
  5181  057D  155B               	bsf	_nrf24l01,2	;volatile
  5182  057E  0008               	return
  5183  057F                     __end_of_nrf24l01SetRXMode:	
  5184                           
  5185                           	psect	text15
  5186  075D                     __ptext15:	
  5187 ;; *************** function _nrf24l01Send *****************
  5188 ;; Defined at:
  5189 ;;		line 9 in file "nrf24l01.c"
  5190 ;; Parameters:    Size  Location     Type
  5191 ;;  command         1    wreg     unsigned char 
  5192 ;;  data            1    1[BANK0 ] unsigned char 
  5193 ;; Auto vars:     Size  Location     Type
  5194 ;;  command         1    3[BANK0 ] unsigned char 
  5195 ;; Return value:  Size  Location     Type
  5196 ;;                  1    wreg      unsigned char 
  5197 ;; Registers used:
  5198 ;;		wreg, status,2, status,0, pclath, cstack
  5199 ;; Tracked objects:
  5200 ;;		On entry : 0/0
  5201 ;;		On exit  : 0/0
  5202 ;;		Unchanged: 0/0
  5203 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5204 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5205 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5206 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5207 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5208 ;;Total ram usage:        3 bytes
  5209 ;; Hardware stack levels used:    1
  5210 ;; Hardware stack levels required when called:    9
  5211 ;; This function calls:
  5212 ;;		_enableInterrupts
  5213 ;;		_nrf24l01SPIEnd
  5214 ;;		_nrf24l01SPISend
  5215 ;;		_nrf24l01SPIStart
  5216 ;; This function is called by:
  5217 ;;		_nrf24l01SetRXMode
  5218 ;;		_nrf24l01InitRegisters
  5219 ;; This function uses a non-reentrant model
  5220 ;;
  5221                           
  5222                           
  5223                           ;psect for function _nrf24l01Send
  5224  075D                     _nrf24l01Send:	
  5225                           
  5226                           ;incstack = 0
  5227                           ; Regs used in _nrf24l01Send: [wreg+status,2+status,0+pclath+cstack]
  5228                           ;nrf24l01Send@command stored from wreg
  5229  075D  0020               	movlb	0	; select bank0
  5230  075E  00A3               	movwf	nrf24l01Send@command
  5231                           
  5232                           ;nrf24l01.c: 12: enableInterrupts(0);
  5233  075F  3000               	movlw	0
  5234  0760  318F  275A  3187   	fcall	_enableInterrupts
  5235                           
  5236                           ;nrf24l01.c: 15: nrf24l01SPIStart();
  5237  0763  3187  27F4  3187   	fcall	_nrf24l01SPIStart
  5238                           
  5239                           ;nrf24l01.c: 18: nrf24l01SPISend(command);
  5240  0766  0020               	movlb	0	; select bank0
  5241  0767  0823               	movf	nrf24l01Send@command,w
  5242  0768  318F  2762  3187   	fcall	_nrf24l01SPISend
  5243                           
  5244                           ;nrf24l01.c: 21: data = nrf24l01SPISend(data);
  5245  076B  0020               	movlb	0	; select bank0
  5246  076C  0821               	movf	nrf24l01Send@data,w
  5247  076D  318F  2762  3187   	fcall	_nrf24l01SPISend
  5248  0770  0020               	movlb	0	; select bank0
  5249  0771  00A2               	movwf	??_nrf24l01Send
  5250  0772  0822               	movf	??_nrf24l01Send,w
  5251  0773  00A1               	movwf	nrf24l01Send@data
  5252                           
  5253                           ;nrf24l01.c: 24: nrf24l01SPIEnd();
  5254  0774  318F  2753  3187   	fcall	_nrf24l01SPIEnd
  5255                           
  5256                           ;nrf24l01.c: 27: enableInterrupts(1);
  5257  0777  3001               	movlw	1
  5258  0778  318F  275A         	fcall	_enableInterrupts
  5259                           
  5260                           ;nrf24l01.c: 29: return data;
  5261  077A  0020               	movlb	0	; select bank0
  5262  077B  0821               	movf	nrf24l01Send@data,w
  5263  077C  0008               	return
  5264  077D                     __end_of_nrf24l01Send:	
  5265                           
  5266                           	psect	text16
  5267  0349                     __ptext16:	
  5268 ;; *************** function _getADCValue *****************
  5269 ;; Defined at:
  5270 ;;		line 22 in file "main.c"
  5271 ;; Parameters:    Size  Location     Type
  5272 ;;  channel         1    wreg     unsigned char 
  5273 ;;  divider         4   15[BANK0 ] unsigned long 
  5274 ;; Auto vars:     Size  Location     Type
  5275 ;;  channel         1   23[BANK0 ] unsigned char 
  5276 ;;  adcSum          4   25[BANK0 ] unsigned long 
  5277 ;;  adcLoop         1   24[BANK0 ] unsigned char 
  5278 ;; Return value:  Size  Location     Type
  5279 ;;                  4   15[BANK0 ] unsigned long 
  5280 ;; Registers used:
  5281 ;;		wreg, status,2, status,0, pclath, cstack
  5282 ;; Tracked objects:
  5283 ;;		On entry : 0/0
  5284 ;;		On exit  : 0/0
  5285 ;;		Unchanged: 0/0
  5286 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5287 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5288 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5289 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5290 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5291 ;;Total ram usage:       14 bytes
  5292 ;; Hardware stack levels used:    1
  5293 ;; Hardware stack levels required when called:    8
  5294 ;; This function calls:
  5295 ;;		___lldiv
  5296 ;;		___lmul
  5297 ;; This function is called by:
  5298 ;;		_loop
  5299 ;; This function uses a non-reentrant model
  5300 ;;
  5301                           
  5302                           
  5303                           ;psect for function _getADCValue
  5304  0349                     _getADCValue:	
  5305                           
  5306                           ;incstack = 0
  5307                           ; Regs used in _getADCValue: [wreg+status,2+status,0+pclath+cstack]
  5308                           ;getADCValue@channel stored from wreg
  5309  0349  0020               	movlb	0	; select bank0
  5310  034A  00B7               	movwf	getADCValue@channel
  5311                           
  5312                           ;main.c: 24: unsigned long adcSum = 0;
  5313  034B  3000               	movlw	0
  5314  034C  00BC               	movwf	getADCValue@adcSum+3
  5315  034D  3000               	movlw	0
  5316  034E  00BB               	movwf	getADCValue@adcSum+2
  5317  034F  3000               	movlw	0
  5318  0350  00BA               	movwf	getADCValue@adcSum+1
  5319  0351  3000               	movlw	0
  5320  0352  00B9               	movwf	getADCValue@adcSum
  5321                           
  5322                           ;main.c: 25: unsigned char adcLoop = 255;
  5323  0353  30FF               	movlw	255
  5324  0354  00B3               	movwf	??_getADCValue
  5325  0355  0833               	movf	??_getADCValue,w
  5326  0356  00B8               	movwf	getADCValue@adcLoop
  5327                           
  5328                           ;main.c: 27: ADCON0bits.CHS = channel;
  5329  0357  0837               	movf	getADCValue@channel,w
  5330  0358  00B3               	movwf	??_getADCValue
  5331  0359  0DB3               	rlf	??_getADCValue,f
  5332  035A  0DB3               	rlf	??_getADCValue,f
  5333  035B  0021               	movlb	1	; select bank1
  5334  035C  081D               	movf	29,w	;volatile
  5335  035D  0020               	movlb	0	; select bank0
  5336  035E  0633               	xorwf	??_getADCValue,w
  5337  035F  3903               	andlw	-253
  5338  0360  0633               	xorwf	??_getADCValue,w
  5339  0361  0021               	movlb	1	; select bank1
  5340  0362  009D               	movwf	29	;volatile
  5341                           
  5342                           ;main.c: 28: _delay((unsigned long)((200)*(16000000/4000000.0)));
  5343  0363  30A0               	movlw	160
  5344  0364                     u1597:	
  5345  0364  3200               	nop2
  5346  0365  0B89               	decfsz	9,f
  5347  0366  2B64               	goto	u1597
  5348  0367                     l2225:	
  5349                           ;main.c: 30: while (--adcLoop){
  5350                           
  5351  0367  3001               	movlw	1
  5352  0368  0020               	movlb	0	; select bank0
  5353  0369  02B8               	subwf	getADCValue@adcLoop,f
  5354  036A  1903               	btfsc	3,2
  5355  036B  2B91               	goto	l2227
  5356                           
  5357                           ;main.c: 32: ADCON0bits.ADGO = 1;
  5358  036C  0021               	movlb	1	; select bank1
  5359  036D  149D               	bsf	29,1	;volatile
  5360  036E                     l208:	
  5361                           ;main.c: 34: while (ADCON0bits.ADGO){
  5362                           
  5363  036E  0021               	movlb	1	; select bank1
  5364  036F  1C9D               	btfss	29,1	;volatile
  5365  0370  2B73               	goto	l2223
  5366                           
  5367                           ;main.c: 35: __nop();
  5368  0371  0000               	nop
  5369  0372  2B6E               	goto	l208
  5370  0373                     l2223:	
  5371                           
  5372                           ;main.c: 36: };main.c: 38: adcSum+= ADRESL;
  5373  0373  081B               	movf	27,w	;volatile
  5374  0374  0020               	movlb	0	; select bank0
  5375  0375  00B3               	movwf	??_getADCValue
  5376  0376  01B4               	clrf	??_getADCValue+1
  5377  0377  01B5               	clrf	??_getADCValue+2
  5378  0378  01B6               	clrf	??_getADCValue+3
  5379  0379  0833               	movf	??_getADCValue,w
  5380  037A  07B9               	addwf	getADCValue@adcSum,f
  5381  037B  0834               	movf	??_getADCValue+1,w
  5382  037C  3DBA               	addwfc	getADCValue@adcSum+1,f
  5383  037D  0835               	movf	??_getADCValue+2,w
  5384  037E  3DBB               	addwfc	getADCValue@adcSum+2,f
  5385  037F  0836               	movf	??_getADCValue+3,w
  5386  0380  3DBC               	addwfc	getADCValue@adcSum+3,f
  5387                           
  5388                           ;main.c: 39: adcSum+= (unsigned) (ADRESH << 8);
  5389  0381  0021               	movlb	1	; select bank1
  5390  0382  081C               	movf	28,w	;volatile
  5391  0383  0020               	movlb	0	; select bank0
  5392  0384  00B3               	movwf	??_getADCValue
  5393  0385  01B4               	clrf	??_getADCValue+1
  5394  0386  0833               	movf	??_getADCValue,w
  5395  0387  00B4               	movwf	??_getADCValue+1
  5396  0388  01B3               	clrf	??_getADCValue
  5397  0389  0833               	movf	??_getADCValue,w
  5398  038A  07B9               	addwf	getADCValue@adcSum,f
  5399  038B  0834               	movf	??_getADCValue+1,w
  5400  038C  3DBA               	addwfc	getADCValue@adcSum+1,f
  5401  038D  3000               	movlw	0
  5402  038E  3DBB               	addwfc	getADCValue@adcSum+2,f
  5403  038F  3DBC               	addwfc	getADCValue@adcSum+3,f
  5404  0390  2B67               	goto	l2225
  5405  0391                     l2227:	
  5406                           
  5407                           ;main.c: 40: };main.c: 42: adcSum*= 100;
  5408  0391  3000               	movlw	0
  5409  0392  00A4               	movwf	___lmul@multiplier+3
  5410  0393  3000               	movlw	0
  5411  0394  00A3               	movwf	___lmul@multiplier+2
  5412  0395  3000               	movlw	0
  5413  0396  00A2               	movwf	___lmul@multiplier+1
  5414  0397  3064               	movlw	100
  5415  0398  00A1               	movwf	___lmul@multiplier
  5416  0399  083C               	movf	getADCValue@adcSum+3,w
  5417  039A  00A8               	movwf	___lmul@multiplicand+3
  5418  039B  083B               	movf	getADCValue@adcSum+2,w
  5419  039C  00A7               	movwf	___lmul@multiplicand+2
  5420  039D  083A               	movf	getADCValue@adcSum+1,w
  5421  039E  00A6               	movwf	___lmul@multiplicand+1
  5422  039F  0839               	movf	getADCValue@adcSum,w
  5423  03A0  00A5               	movwf	___lmul@multiplicand
  5424  03A1  3186  261E  3183   	fcall	___lmul
  5425  03A4  0020               	movlb	0	; select bank0
  5426  03A5  0824               	movf	?___lmul+3,w
  5427  03A6  00BC               	movwf	getADCValue@adcSum+3
  5428  03A7  0823               	movf	?___lmul+2,w
  5429  03A8  00BB               	movwf	getADCValue@adcSum+2
  5430  03A9  0822               	movf	?___lmul+1,w
  5431  03AA  00BA               	movwf	getADCValue@adcSum+1
  5432  03AB  0821               	movf	?___lmul,w
  5433  03AC  00B9               	movwf	getADCValue@adcSum
  5434                           
  5435                           ;main.c: 43: adcSum/= divider;
  5436  03AD  0832               	movf	getADCValue@divider+3,w
  5437  03AE  00A4               	movwf	___lldiv@divisor+3
  5438  03AF  0831               	movf	getADCValue@divider+2,w
  5439  03B0  00A3               	movwf	___lldiv@divisor+2
  5440  03B1  0830               	movf	getADCValue@divider+1,w
  5441  03B2  00A2               	movwf	___lldiv@divisor+1
  5442  03B3  082F               	movf	getADCValue@divider,w
  5443  03B4  00A1               	movwf	___lldiv@divisor
  5444  03B5  083C               	movf	getADCValue@adcSum+3,w
  5445  03B6  00A8               	movwf	___lldiv@dividend+3
  5446  03B7  083B               	movf	getADCValue@adcSum+2,w
  5447  03B8  00A7               	movwf	___lldiv@dividend+2
  5448  03B9  083A               	movf	getADCValue@adcSum+1,w
  5449  03BA  00A6               	movwf	___lldiv@dividend+1
  5450  03BB  0839               	movf	getADCValue@adcSum,w
  5451  03BC  00A5               	movwf	___lldiv@dividend
  5452  03BD  3184  2425         	fcall	___lldiv
  5453  03BF  0020               	movlb	0	; select bank0
  5454  03C0  0824               	movf	?___lldiv+3,w
  5455  03C1  00BC               	movwf	getADCValue@adcSum+3
  5456  03C2  0823               	movf	?___lldiv+2,w
  5457  03C3  00BB               	movwf	getADCValue@adcSum+2
  5458  03C4  0822               	movf	?___lldiv+1,w
  5459  03C5  00BA               	movwf	getADCValue@adcSum+1
  5460  03C6  0821               	movf	?___lldiv,w
  5461  03C7  00B9               	movwf	getADCValue@adcSum
  5462                           
  5463                           ;main.c: 45: return adcSum;
  5464  03C8  083C               	movf	getADCValue@adcSum+3,w
  5465  03C9  00B2               	movwf	?_getADCValue+3
  5466  03CA  083B               	movf	getADCValue@adcSum+2,w
  5467  03CB  00B1               	movwf	?_getADCValue+2
  5468  03CC  083A               	movf	getADCValue@adcSum+1,w
  5469  03CD  00B0               	movwf	?_getADCValue+1
  5470  03CE  0839               	movf	getADCValue@adcSum,w
  5471  03CF  00AF               	movwf	?_getADCValue
  5472  03D0  0008               	return
  5473  03D1                     __end_of_getADCValue:	
  5474                           
  5475                           	psect	text17
  5476  061E                     __ptext17:	
  5477 ;; *************** function ___lmul *****************
  5478 ;; Defined at:
  5479 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\Umul32.c"
  5480 ;; Parameters:    Size  Location     Type
  5481 ;;  multiplier      4    1[BANK0 ] unsigned long 
  5482 ;;  multiplicand    4    5[BANK0 ] unsigned long 
  5483 ;; Auto vars:     Size  Location     Type
  5484 ;;  product         4    9[BANK0 ] unsigned long 
  5485 ;; Return value:  Size  Location     Type
  5486 ;;                  4    1[BANK0 ] unsigned long 
  5487 ;; Registers used:
  5488 ;;		wreg, status,2, status,0
  5489 ;; Tracked objects:
  5490 ;;		On entry : 0/0
  5491 ;;		On exit  : 0/0
  5492 ;;		Unchanged: 0/0
  5493 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5494 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5495 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5496 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5497 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5498 ;;Total ram usage:       12 bytes
  5499 ;; Hardware stack levels used:    1
  5500 ;; Hardware stack levels required when called:    7
  5501 ;; This function calls:
  5502 ;;		Nothing
  5503 ;; This function is called by:
  5504 ;;		_getADCValue
  5505 ;; This function uses a non-reentrant model
  5506 ;;
  5507                           
  5508                           
  5509                           ;psect for function ___lmul
  5510  061E                     ___lmul:	
  5511                           
  5512                           ;incstack = 0
  5513                           ; Regs used in ___lmul: [wreg+status,2+status,0]
  5514  061E  3000               	movlw	0
  5515  061F  0020               	movlb	0	; select bank0
  5516  0620  00AC               	movwf	___lmul@product+3
  5517  0621  3000               	movlw	0
  5518  0622  00AB               	movwf	___lmul@product+2
  5519  0623  3000               	movlw	0
  5520  0624  00AA               	movwf	___lmul@product+1
  5521  0625  3000               	movlw	0
  5522  0626  00A9               	movwf	___lmul@product
  5523  0627                     l2063:	
  5524  0627  1C21               	btfss	___lmul@multiplier,0
  5525  0628  2E31               	goto	l2067
  5526  0629  0825               	movf	___lmul@multiplicand,w
  5527  062A  07A9               	addwf	___lmul@product,f
  5528  062B  0826               	movf	___lmul@multiplicand+1,w
  5529  062C  3DAA               	addwfc	___lmul@product+1,f
  5530  062D  0827               	movf	___lmul@multiplicand+2,w
  5531  062E  3DAB               	addwfc	___lmul@product+2,f
  5532  062F  0828               	movf	___lmul@multiplicand+3,w
  5533  0630  3DAC               	addwfc	___lmul@product+3,f
  5534  0631                     l2067:	
  5535  0631  3001               	movlw	1
  5536  0632                     u995:	
  5537  0632  35A5               	lslf	___lmul@multiplicand,f
  5538  0633  0DA6               	rlf	___lmul@multiplicand+1,f
  5539  0634  0DA7               	rlf	___lmul@multiplicand+2,f
  5540  0635  0DA8               	rlf	___lmul@multiplicand+3,f
  5541  0636  0B89               	decfsz	9,f
  5542  0637  2E32               	goto	u995
  5543  0638  3001               	movlw	1
  5544  0639                     u1005:	
  5545  0639  36A4               	lsrf	___lmul@multiplier+3,f
  5546  063A  0CA3               	rrf	___lmul@multiplier+2,f
  5547  063B  0CA2               	rrf	___lmul@multiplier+1,f
  5548  063C  0CA1               	rrf	___lmul@multiplier,f
  5549  063D  0B89               	decfsz	9,f
  5550  063E  2E39               	goto	u1005
  5551  063F  0824               	movf	___lmul@multiplier+3,w
  5552  0640  0423               	iorwf	___lmul@multiplier+2,w
  5553  0641  0422               	iorwf	___lmul@multiplier+1,w
  5554  0642  0421               	iorwf	___lmul@multiplier,w
  5555  0643  1D03               	skipz
  5556  0644  2E27               	goto	l2063
  5557  0645  082C               	movf	___lmul@product+3,w
  5558  0646  00A4               	movwf	?___lmul+3
  5559  0647  082B               	movf	___lmul@product+2,w
  5560  0648  00A3               	movwf	?___lmul+2
  5561  0649  082A               	movf	___lmul@product+1,w
  5562  064A  00A2               	movwf	?___lmul+1
  5563  064B  0829               	movf	___lmul@product,w
  5564  064C  00A1               	movwf	?___lmul
  5565  064D  0008               	return
  5566  064E                     __end_of___lmul:	
  5567                           
  5568                           	psect	text18
  5569  0425                     __ptext18:	
  5570 ;; *************** function ___lldiv *****************
  5571 ;; Defined at:
  5572 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\__lldiv.c"
  5573 ;; Parameters:    Size  Location     Type
  5574 ;;  divisor         4    1[BANK0 ] unsigned long 
  5575 ;;  dividend        4    5[BANK0 ] unsigned long 
  5576 ;; Auto vars:     Size  Location     Type
  5577 ;;  quotient        4   10[BANK0 ] unsigned long 
  5578 ;;  counter         1   14[BANK0 ] unsigned char 
  5579 ;; Return value:  Size  Location     Type
  5580 ;;                  4    1[BANK0 ] unsigned long 
  5581 ;; Registers used:
  5582 ;;		wreg, status,2, status,0
  5583 ;; Tracked objects:
  5584 ;;		On entry : 0/0
  5585 ;;		On exit  : 0/0
  5586 ;;		Unchanged: 0/0
  5587 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5588 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5589 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5590 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5591 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5592 ;;Total ram usage:       14 bytes
  5593 ;; Hardware stack levels used:    1
  5594 ;; Hardware stack levels required when called:    7
  5595 ;; This function calls:
  5596 ;;		Nothing
  5597 ;; This function is called by:
  5598 ;;		_getADCValue
  5599 ;;		_ultoa
  5600 ;; This function uses a non-reentrant model
  5601 ;;
  5602                           
  5603                           
  5604                           ;psect for function ___lldiv
  5605  0425                     ___lldiv:	
  5606                           
  5607                           ;incstack = 0
  5608                           ; Regs used in ___lldiv: [wreg+status,2+status,0]
  5609  0425  3000               	movlw	0
  5610  0426  0020               	movlb	0	; select bank0
  5611  0427  00AD               	movwf	___lldiv@quotient+3
  5612  0428  3000               	movlw	0
  5613  0429  00AC               	movwf	___lldiv@quotient+2
  5614  042A  3000               	movlw	0
  5615  042B  00AB               	movwf	___lldiv@quotient+1
  5616  042C  3000               	movlw	0
  5617  042D  00AA               	movwf	___lldiv@quotient
  5618  042E  0824               	movf	___lldiv@divisor+3,w
  5619  042F  0423               	iorwf	___lldiv@divisor+2,w
  5620  0430  0422               	iorwf	___lldiv@divisor+1,w
  5621  0431  0421               	iorwf	___lldiv@divisor,w
  5622  0432  1903               	skipnz
  5623  0433  2C6F               	goto	l1861
  5624  0434  01AE               	clrf	___lldiv@counter
  5625  0435  0AAE               	incf	___lldiv@counter,f
  5626  0436                     l1847:	
  5627  0436  1BA4               	btfsc	___lldiv@divisor+3,7
  5628  0437  2C44               	goto	l1849
  5629  0438  3001               	movlw	1
  5630  0439                     u715:	
  5631  0439  35A1               	lslf	___lldiv@divisor,f
  5632  043A  0DA2               	rlf	___lldiv@divisor+1,f
  5633  043B  0DA3               	rlf	___lldiv@divisor+2,f
  5634  043C  0DA4               	rlf	___lldiv@divisor+3,f
  5635  043D  0B89               	decfsz	9,f
  5636  043E  2C39               	goto	u715
  5637  043F  3001               	movlw	1
  5638  0440  00A9               	movwf	??___lldiv
  5639  0441  0829               	movf	??___lldiv,w
  5640  0442  07AE               	addwf	___lldiv@counter,f
  5641  0443  2C36               	goto	l1847
  5642  0444                     l1849:	
  5643  0444  3001               	movlw	1
  5644  0445                     u735:	
  5645  0445  35AA               	lslf	___lldiv@quotient,f
  5646  0446  0DAB               	rlf	___lldiv@quotient+1,f
  5647  0447  0DAC               	rlf	___lldiv@quotient+2,f
  5648  0448  0DAD               	rlf	___lldiv@quotient+3,f
  5649  0449  0B89               	decfsz	9,f
  5650  044A  2C45               	goto	u735
  5651  044B  0824               	movf	___lldiv@divisor+3,w
  5652  044C  0228               	subwf	___lldiv@dividend+3,w
  5653  044D  1D03               	skipz
  5654  044E  2C59               	goto	u745
  5655  044F  0823               	movf	___lldiv@divisor+2,w
  5656  0450  0227               	subwf	___lldiv@dividend+2,w
  5657  0451  1D03               	skipz
  5658  0452  2C59               	goto	u745
  5659  0453  0822               	movf	___lldiv@divisor+1,w
  5660  0454  0226               	subwf	___lldiv@dividend+1,w
  5661  0455  1D03               	skipz
  5662  0456  2C59               	goto	u745
  5663  0457  0821               	movf	___lldiv@divisor,w
  5664  0458  0225               	subwf	___lldiv@dividend,w
  5665  0459                     u745:	
  5666  0459  1C03               	skipc
  5667  045A  2C64               	goto	l1857
  5668  045B  0821               	movf	___lldiv@divisor,w
  5669  045C  02A5               	subwf	___lldiv@dividend,f
  5670  045D  0822               	movf	___lldiv@divisor+1,w
  5671  045E  3BA6               	subwfb	___lldiv@dividend+1,f
  5672  045F  0823               	movf	___lldiv@divisor+2,w
  5673  0460  3BA7               	subwfb	___lldiv@dividend+2,f
  5674  0461  0824               	movf	___lldiv@divisor+3,w
  5675  0462  3BA8               	subwfb	___lldiv@dividend+3,f
  5676  0463  142A               	bsf	___lldiv@quotient,0
  5677  0464                     l1857:	
  5678  0464  3001               	movlw	1
  5679  0465                     u755:	
  5680  0465  36A4               	lsrf	___lldiv@divisor+3,f
  5681  0466  0CA3               	rrf	___lldiv@divisor+2,f
  5682  0467  0CA2               	rrf	___lldiv@divisor+1,f
  5683  0468  0CA1               	rrf	___lldiv@divisor,f
  5684  0469  0B89               	decfsz	9,f
  5685  046A  2C65               	goto	u755
  5686  046B  3001               	movlw	1
  5687  046C  02AE               	subwf	___lldiv@counter,f
  5688  046D  1D03               	btfss	3,2
  5689  046E  2C44               	goto	l1849
  5690  046F                     l1861:	
  5691  046F  082D               	movf	___lldiv@quotient+3,w
  5692  0470  00A4               	movwf	?___lldiv+3
  5693  0471  082C               	movf	___lldiv@quotient+2,w
  5694  0472  00A3               	movwf	?___lldiv+2
  5695  0473  082B               	movf	___lldiv@quotient+1,w
  5696  0474  00A2               	movwf	?___lldiv+1
  5697  0475  082A               	movf	___lldiv@quotient,w
  5698  0476  00A1               	movwf	?___lldiv
  5699  0477  0008               	return
  5700  0478                     __end_of___lldiv:	
  5701                           
  5702                           	psect	text19
  5703  0719                     __ptext19:	
  5704 ;; *************** function _flashUpdate *****************
  5705 ;; Defined at:
  5706 ;;		line 97 in file "flash.c"
  5707 ;; Parameters:    Size  Location     Type
  5708 ;;		None
  5709 ;; Auto vars:     Size  Location     Type
  5710 ;;  i               2    9[BANK0 ] unsigned int 
  5711 ;; Return value:  Size  Location     Type
  5712 ;;                  1    wreg      void 
  5713 ;; Registers used:
  5714 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5715 ;; Tracked objects:
  5716 ;;		On entry : 0/0
  5717 ;;		On exit  : 0/0
  5718 ;;		Unchanged: 0/0
  5719 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5720 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5721 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5722 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5723 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5724 ;;Total ram usage:        4 bytes
  5725 ;; Hardware stack levels used:    1
  5726 ;; Hardware stack levels required when called:    8
  5727 ;; This function calls:
  5728 ;;		_flashWriteByte
  5729 ;; This function is called by:
  5730 ;;		_main
  5731 ;; This function uses a non-reentrant model
  5732 ;;
  5733                           
  5734                           
  5735                           ;psect for function _flashUpdate
  5736  0719                     _flashUpdate:	
  5737                           
  5738                           ;flash.c: 98: for (unsigned int i = 0; i < 32; i++){
  5739                           
  5740                           ;incstack = 0
  5741                           ; Regs used in _flashUpdate: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5742  0719  0020               	movlb	0	; select bank0
  5743  071A  01A9               	clrf	flashUpdate@i
  5744  071B  01AA               	clrf	flashUpdate@i+1
  5745  071C                     L1:	
  5746  071C  3000               	movlw	0
  5747  071D  022A               	subwf	flashUpdate@i+1,w
  5748  071E  3020               	movlw	32
  5749  071F  1903               	skipnz
  5750  0720  0229               	subwf	flashUpdate@i,w
  5751  0721  1803               	btfsc	3,0
  5752  0722  0008               	return
  5753                           
  5754                           ;flash.c: 99: flashWriteByte(i, romHolder.array[i]);
  5755  0723  082A               	movf	flashUpdate@i+1,w
  5756  0724  00A2               	movwf	flashWriteByte@offset+1
  5757  0725  0829               	movf	flashUpdate@i,w
  5758  0726  00A1               	movwf	flashWriteByte@offset
  5759  0727  0829               	movf	flashUpdate@i,w
  5760  0728  3E20               	addlw	(low (_romHolder| (0+256)))& (0+255)
  5761  0729  0086               	movwf	6
  5762  072A  3001               	movlw	1	; select bank2/3
  5763  072B  0087               	movwf	7
  5764  072C  0801               	movf	1,w
  5765  072D  00A7               	movwf	??_flashUpdate
  5766  072E  01A8               	clrf	??_flashUpdate+1
  5767  072F  0827               	movf	??_flashUpdate,w
  5768  0730  00A3               	movwf	flashWriteByte@data
  5769  0731  0828               	movf	??_flashUpdate+1,w
  5770  0732  00A4               	movwf	flashWriteByte@data+1
  5771  0733  3185  2508  3187   	fcall	_flashWriteByte
  5772  0736  3001               	movlw	1
  5773  0737  0020               	movlb	0	; select bank0
  5774  0738  07A9               	addwf	flashUpdate@i,f
  5775  0739  3000               	movlw	0
  5776  073A  3DAA               	addwfc	flashUpdate@i+1,f
  5777  073B  2F1C               	goto	L1
  5778  073C                     __end_of_flashUpdate:	
  5779                           
  5780                           	psect	text20
  5781  0508                     __ptext20:	
  5782 ;; *************** function _flashWriteByte *****************
  5783 ;; Defined at:
  5784 ;;		line 8 in file "flash.c"
  5785 ;; Parameters:    Size  Location     Type
  5786 ;;  offset          2    1[BANK0 ] unsigned int 
  5787 ;;  data            2    3[BANK0 ] unsigned int 
  5788 ;; Auto vars:     Size  Location     Type
  5789 ;;  address         2    5[BANK0 ] unsigned int 
  5790 ;; Return value:  Size  Location     Type
  5791 ;;                  1    wreg      void 
  5792 ;; Registers used:
  5793 ;;		wreg, status,2, status,0
  5794 ;; Tracked objects:
  5795 ;;		On entry : 0/0
  5796 ;;		On exit  : 0/0
  5797 ;;		Unchanged: 0/0
  5798 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5799 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5800 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5801 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5802 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5803 ;;Total ram usage:        6 bytes
  5804 ;; Hardware stack levels used:    1
  5805 ;; Hardware stack levels required when called:    7
  5806 ;; This function calls:
  5807 ;;		Nothing
  5808 ;; This function is called by:
  5809 ;;		_flashUpdate
  5810 ;; This function uses a non-reentrant model
  5811 ;;
  5812                           
  5813                           
  5814                           ;psect for function _flashWriteByte
  5815  0508                     _flashWriteByte:	
  5816                           
  5817                           ;flash.c: 10: unsigned int address;;flash.c: 12: INTCONbits.GIE = 0;
  5818                           
  5819                           ;incstack = 0
  5820                           ; Regs used in _flashWriteByte: [wreg+status,2+status,0]
  5821  0508  138B               	bcf	11,7	;volatile
  5822                           
  5823                           ;flash.c: 15: PMCON1 = 0x00;
  5824  0509  0031               	movlb	17	; select bank17
  5825  050A  0195               	clrf	21	;volsfr
  5826                           
  5827                           ;flash.c: 17: address = (0x2000U - 32) + offset;
  5828  050B  0020               	movlb	0	; select bank0
  5829  050C  0821               	movf	flashWriteByte@offset,w
  5830  050D  3EE0               	addlw	224
  5831  050E  00A5               	movwf	flashWriteByte@address
  5832  050F  301F               	movlw	31
  5833  0510  3D22               	addwfc	flashWriteByte@offset+1,w
  5834  0511  00A6               	movwf	flashWriteByte@address+1
  5835                           
  5836                           ;flash.c: 18: PMADRL = (char) (address >> 0);
  5837  0512  0825               	movf	flashWriteByte@address,w
  5838  0513  0031               	movlb	17	; select bank17
  5839  0514  0091               	movwf	17	;volatile
  5840                           
  5841                           ;flash.c: 19: PMADRH = (char) (address >> 8);
  5842  0515  0020               	movlb	0	; select bank0
  5843  0516  0826               	movf	flashWriteByte@address+1,w
  5844  0517  0031               	movlb	17	; select bank17
  5845  0518  0092               	movwf	18	;volatile
  5846                           
  5847                           ;flash.c: 21: PMCON1bits.FREE = 1;
  5848  0519  1615               	bsf	21,4	;volsfr
  5849                           
  5850                           ;flash.c: 22: PMCON1bits.WREN = 1;
  5851  051A  1515               	bsf	21,2	;volsfr
  5852                           
  5853                           ;flash.c: 24: PMCON2 = 0x55;
  5854  051B  3055               	movlw	85
  5855  051C  0096               	movwf	22	;volsfr
  5856                           
  5857                           ;flash.c: 25: PMCON2 = 0xAA;
  5858  051D  30AA               	movlw	170
  5859  051E  0096               	movwf	22	;volsfr
  5860                           
  5861                           ;flash.c: 27: PMCON1bits.WR = 1;
  5862  051F  1495               	bsf	21,1	;volsfr
  5863                           
  5864                           ;flash.c: 29: __nop();
  5865  0520  0000               	nop
  5866                           
  5867                           ;flash.c: 30: __nop();
  5868  0521  0000               	nop
  5869                           
  5870                           ;flash.c: 32: PMCON1bits.WREN = 0;
  5871  0522  0031               	movlb	17	; select bank17
  5872  0523  1115               	bcf	21,2	;volsfr
  5873                           
  5874                           ;flash.c: 36: PMCON1 = 0x00;
  5875  0524  0195               	clrf	21	;volsfr
  5876                           
  5877                           ;flash.c: 38: PMADRL = (char) (address >> 0);
  5878  0525  0020               	movlb	0	; select bank0
  5879  0526  0825               	movf	flashWriteByte@address,w
  5880  0527  0031               	movlb	17	; select bank17
  5881  0528  0091               	movwf	17	;volatile
  5882                           
  5883                           ;flash.c: 39: PMADRH = (char) (address >> 8);
  5884  0529  0020               	movlb	0	; select bank0
  5885  052A  0826               	movf	flashWriteByte@address+1,w
  5886  052B  0031               	movlb	17	; select bank17
  5887  052C  0092               	movwf	18	;volatile
  5888                           
  5889                           ;flash.c: 41: PMCON1bits.FREE = 0;
  5890  052D  1215               	bcf	21,4	;volsfr
  5891                           
  5892                           ;flash.c: 42: PMCON1bits.LWLO = 1;
  5893  052E  1695               	bsf	21,5	;volsfr
  5894                           
  5895                           ;flash.c: 43: PMCON1bits.WREN = 1;
  5896  052F  1515               	bsf	21,2	;volsfr
  5897                           
  5898                           ;flash.c: 45: PMDATL = (data >> 0);
  5899  0530  0020               	movlb	0	; select bank0
  5900  0531  0823               	movf	flashWriteByte@data,w
  5901  0532  0031               	movlb	17	; select bank17
  5902  0533  0093               	movwf	19	;volatile
  5903                           
  5904                           ;flash.c: 46: PMDATH = (data >> 8);
  5905  0534  0020               	movlb	0	; select bank0
  5906  0535  0824               	movf	flashWriteByte@data+1,w
  5907  0536  0031               	movlb	17	; select bank17
  5908  0537  0094               	movwf	20	;volatile
  5909                           
  5910                           ;flash.c: 48: PMCON1bits.LWLO = 0;
  5911  0538  1295               	bcf	21,5	;volsfr
  5912                           
  5913                           ;flash.c: 50: PMCON2 = 0x55;
  5914  0539  3055               	movlw	85
  5915  053A  0096               	movwf	22	;volsfr
  5916                           
  5917                           ;flash.c: 51: PMCON2 = 0xAA;
  5918  053B  30AA               	movlw	170
  5919  053C  0096               	movwf	22	;volsfr
  5920                           
  5921                           ;flash.c: 53: PMCON1bits.WR = 1;
  5922  053D  1495               	bsf	21,1	;volsfr
  5923                           
  5924                           ;flash.c: 55: __nop();
  5925  053E  0000               	nop
  5926                           
  5927                           ;flash.c: 56: __nop();
  5928  053F  0000               	nop
  5929                           
  5930                           ;flash.c: 58: PMCON1bits.WREN = 0;
  5931  0540  0031               	movlb	17	; select bank17
  5932  0541  1115               	bcf	21,2	;volsfr
  5933                           
  5934                           ;flash.c: 61: INTCONbits.GIE = 1;
  5935  0542  178B               	bsf	11,7	;volatile
  5936  0543  0008               	return
  5937  0544                     __end_of_flashWriteByte:	
  5938                           
  5939                           	psect	text21
  5940  077D                     __ptext21:	
  5941 ;; *************** function _flashRealod *****************
  5942 ;; Defined at:
  5943 ;;		line 90 in file "flash.c"
  5944 ;; Parameters:    Size  Location     Type
  5945 ;;		None
  5946 ;; Auto vars:     Size  Location     Type
  5947 ;;  i               2   11[BANK0 ] unsigned int 
  5948 ;; Return value:  Size  Location     Type
  5949 ;;                  1    wreg      void 
  5950 ;; Registers used:
  5951 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5952 ;; Tracked objects:
  5953 ;;		On entry : 0/0
  5954 ;;		On exit  : 0/0
  5955 ;;		Unchanged: 0/0
  5956 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5957 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5958 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5959 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5960 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5961 ;;Total ram usage:        3 bytes
  5962 ;; Hardware stack levels used:    1
  5963 ;; Hardware stack levels required when called:    8
  5964 ;; This function calls:
  5965 ;;		_flashReadByte
  5966 ;; This function is called by:
  5967 ;;		_main
  5968 ;; This function uses a non-reentrant model
  5969 ;;
  5970                           
  5971                           
  5972                           ;psect for function _flashRealod
  5973  077D                     _flashRealod:	
  5974                           
  5975                           ;flash.c: 92: for (unsigned int i = 0; i < 32; i++){
  5976                           
  5977                           ;incstack = 0
  5978                           ; Regs used in _flashRealod: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5979  077D  0020               	movlb	0	; select bank0
  5980  077E  01AB               	clrf	flashRealod@i
  5981  077F  01AC               	clrf	flashRealod@i+1
  5982  0780                     L2:	
  5983  0780  3000               	movlw	0
  5984  0781  022C               	subwf	flashRealod@i+1,w
  5985  0782  3020               	movlw	32
  5986  0783  1903               	skipnz
  5987  0784  022B               	subwf	flashRealod@i,w
  5988  0785  1803               	btfsc	3,0
  5989  0786  0008               	return
  5990                           
  5991                           ;flash.c: 93: romHolder.array[i] = flashReadByte(i);
  5992  0787  082C               	movf	flashRealod@i+1,w
  5993  0788  00A2               	movwf	flashReadByte@offset+1
  5994  0789  082B               	movf	flashRealod@i,w
  5995  078A  00A1               	movwf	flashReadByte@offset
  5996  078B  3185  25EC  3187   	fcall	_flashReadByte
  5997  078E  0020               	movlb	0	; select bank0
  5998  078F  0821               	movf	?_flashReadByte,w
  5999  0790  00AA               	movwf	??_flashRealod
  6000  0791  082B               	movf	flashRealod@i,w
  6001  0792  3E20               	addlw	(low (_romHolder| (0+256)))& (0+255)
  6002  0793  0086               	movwf	6
  6003  0794  3001               	movlw	1	; select bank2/3
  6004  0795  0087               	movwf	7
  6005  0796  082A               	movf	??_flashRealod,w
  6006  0797  0081               	movwf	1
  6007  0798  3001               	movlw	1
  6008  0799  07AB               	addwf	flashRealod@i,f
  6009  079A  3000               	movlw	0
  6010  079B  3DAC               	addwfc	flashRealod@i+1,f
  6011  079C  2F80               	goto	L2
  6012  079D                     __end_of_flashRealod:	
  6013                           
  6014                           	psect	text22
  6015  05EC                     __ptext22:	
  6016 ;; *************** function _flashReadByte *****************
  6017 ;; Defined at:
  6018 ;;		line 64 in file "flash.c"
  6019 ;; Parameters:    Size  Location     Type
  6020 ;;  offset          2    1[BANK0 ] unsigned int 
  6021 ;; Auto vars:     Size  Location     Type
  6022 ;;  address         2    8[BANK0 ] unsigned int 
  6023 ;;  result          2    6[BANK0 ] unsigned int 
  6024 ;; Return value:  Size  Location     Type
  6025 ;;                  2    1[BANK0 ] unsigned int 
  6026 ;; Registers used:
  6027 ;;		wreg, status,2, status,0
  6028 ;; Tracked objects:
  6029 ;;		On entry : 0/0
  6030 ;;		On exit  : 0/0
  6031 ;;		Unchanged: 0/0
  6032 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6033 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6034 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6035 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6036 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6037 ;;Total ram usage:        9 bytes
  6038 ;; Hardware stack levels used:    1
  6039 ;; Hardware stack levels required when called:    7
  6040 ;; This function calls:
  6041 ;;		Nothing
  6042 ;; This function is called by:
  6043 ;;		_flashRealod
  6044 ;; This function uses a non-reentrant model
  6045 ;;
  6046                           
  6047                           
  6048                           ;psect for function _flashReadByte
  6049  05EC                     _flashReadByte:	
  6050                           
  6051                           ;flash.c: 66: unsigned int address;;flash.c: 68: INTCONbits.GIE = 0;
  6052                           
  6053                           ;incstack = 0
  6054                           ; Regs used in _flashReadByte: [wreg+status,2+status,0]
  6055  05EC  138B               	bcf	11,7	;volatile
  6056                           
  6057                           ;flash.c: 70: PMCON1 = 0x00;
  6058  05ED  0031               	movlb	17	; select bank17
  6059  05EE  0195               	clrf	21	;volsfr
  6060                           
  6061                           ;flash.c: 72: address = (0x2000U - 32) + offset;
  6062  05EF  0020               	movlb	0	; select bank0
  6063  05F0  0821               	movf	flashReadByte@offset,w
  6064  05F1  3EE0               	addlw	224
  6065  05F2  00A8               	movwf	flashReadByte@address
  6066  05F3  301F               	movlw	31
  6067  05F4  3D22               	addwfc	flashReadByte@offset+1,w
  6068  05F5  00A9               	movwf	flashReadByte@address+1
  6069                           
  6070                           ;flash.c: 73: PMADRL = (char) (address >> 0);
  6071  05F6  0828               	movf	flashReadByte@address,w
  6072  05F7  0031               	movlb	17	; select bank17
  6073  05F8  0091               	movwf	17	;volatile
  6074                           
  6075                           ;flash.c: 74: PMADRH = (char) (address >> 8);
  6076  05F9  0020               	movlb	0	; select bank0
  6077  05FA  0829               	movf	flashReadByte@address+1,w
  6078  05FB  0031               	movlb	17	; select bank17
  6079  05FC  0092               	movwf	18	;volatile
  6080                           
  6081                           ;flash.c: 76: PMCON1bits.RD = 1;
  6082  05FD  1415               	bsf	21,0	;volsfr
  6083                           
  6084                           ;flash.c: 78: __nop();
  6085  05FE  0000               	nop
  6086                           
  6087                           ;flash.c: 79: __nop();
  6088  05FF  0000               	nop
  6089                           
  6090                           ;flash.c: 81: unsigned int result = 0;
  6091  0600  0020               	movlb	0	; select bank0
  6092  0601  01A6               	clrf	flashReadByte@result
  6093  0602  01A7               	clrf	flashReadByte@result+1
  6094                           
  6095                           ;flash.c: 82: result = PMDATL;
  6096  0603  0031               	movlb	17	; select bank17
  6097  0604  0813               	movf	19,w	;volatile
  6098  0605  0020               	movlb	0	; select bank0
  6099  0606  00A3               	movwf	??_flashReadByte
  6100  0607  01A4               	clrf	??_flashReadByte+1
  6101  0608  0823               	movf	??_flashReadByte,w
  6102  0609  00A6               	movwf	flashReadByte@result
  6103  060A  0824               	movf	??_flashReadByte+1,w
  6104  060B  00A7               	movwf	flashReadByte@result+1
  6105                           
  6106                           ;flash.c: 83: result|= ( (unsigned) (PMDATH) << 8);
  6107  060C  0031               	movlb	17	; select bank17
  6108  060D  0814               	movf	20,w	;volatile
  6109  060E  0020               	movlb	0	; select bank0
  6110  060F  00A3               	movwf	??_flashReadByte
  6111  0610  01A4               	clrf	??_flashReadByte+1
  6112  0611  0823               	movf	??_flashReadByte,w
  6113  0612  00A4               	movwf	??_flashReadByte+1
  6114  0613  01A3               	clrf	??_flashReadByte
  6115  0614  0823               	movf	??_flashReadByte,w
  6116  0615  04A6               	iorwf	flashReadByte@result,f
  6117  0616  0824               	movf	??_flashReadByte+1,w
  6118  0617  04A7               	iorwf	flashReadByte@result+1,f
  6119                           
  6120                           ;flash.c: 85: INTCONbits.GIE = 1;
  6121  0618  178B               	bsf	11,7	;volatile
  6122                           
  6123                           ;flash.c: 87: return result;
  6124  0619  0827               	movf	flashReadByte@result+1,w
  6125  061A  00A2               	movwf	?_flashReadByte+1
  6126  061B  0826               	movf	flashReadByte@result,w
  6127  061C  00A1               	movwf	?_flashReadByte
  6128  061D  0008               	return
  6129  061E                     __end_of_flashReadByte:	
  6130                           
  6131                           	psect	intentry
  6132  0004                     __pintentry:	
  6133 ;; *************** function _ISR *****************
  6134 ;; Defined at:
  6135 ;;		line 14 in file "main.c"
  6136 ;; Parameters:    Size  Location     Type
  6137 ;;		None
  6138 ;; Auto vars:     Size  Location     Type
  6139 ;;		None
  6140 ;; Return value:  Size  Location     Type
  6141 ;;                  1    wreg      void 
  6142 ;; Registers used:
  6143 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6144 ;; Tracked objects:
  6145 ;;		On entry : 0/0
  6146 ;;		On exit  : 0/0
  6147 ;;		Unchanged: 0/0
  6148 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6149 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6150 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6151 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6152 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6153 ;;Total ram usage:        0 bytes
  6154 ;; Hardware stack levels used:    1
  6155 ;; Hardware stack levels required when called:    6
  6156 ;; This function calls:
  6157 ;;		_nrf24l01ISR
  6158 ;; This function is called by:
  6159 ;;		Interrupt level 1
  6160 ;; This function uses a non-reentrant model
  6161 ;;
  6162                           
  6163  0004                     _ISR:	
  6164                           
  6165                           ;incstack = 0
  6166  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
  6167                           
  6168                           ; Regs used in _ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6169  0005  3180               	pagesel	$
  6170                           
  6171                           ;main.c: 16: if (PIR0bits.INTF){
  6172  0006  0020               	movlb	0	; select bank0
  6173  0007  1C10               	btfss	16,0	;volatile
  6174  0008  280D               	goto	i1l203
  6175                           
  6176                           ;main.c: 17: nrf24l01ISR();
  6177  0009  3185  25B6         	fcall	_nrf24l01ISR
  6178                           
  6179                           ;main.c: 18: PIR0bits.INTF = 0;
  6180  000B  0020               	movlb	0	; select bank0
  6181  000C  1010               	bcf	16,0	;volatile
  6182  000D                     i1l203:	
  6183  000D  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
  6184  000E  0009               	retfie
  6185  000F                     __end_of_ISR:	
  6186                           
  6187                           	psect	text24
  6188  05B6                     __ptext24:	
  6189 ;; *************** function _nrf24l01ISR *****************
  6190 ;; Defined at:
  6191 ;;		line 222 in file "nrf24l01.c"
  6192 ;; Parameters:    Size  Location     Type
  6193 ;;		None
  6194 ;; Auto vars:     Size  Location     Type
  6195 ;;  status          1    0[BANK0 ] struct .
  6196 ;; Return value:  Size  Location     Type
  6197 ;;                  1    wreg      void 
  6198 ;; Registers used:
  6199 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6200 ;; Tracked objects:
  6201 ;;		On entry : 0/0
  6202 ;;		On exit  : 0/0
  6203 ;;		Unchanged: 0/0
  6204 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6205 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6206 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6207 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6208 ;;      Totals:         1       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6209 ;;Total ram usage:        2 bytes
  6210 ;; Hardware stack levels used:    1
  6211 ;; Hardware stack levels required when called:    5
  6212 ;; This function calls:
  6213 ;;		_exception
  6214 ;;		_nrf24l01CheckACK
  6215 ;;		_nrf24l01ReceivePacket
  6216 ;;		i1_nrf24l01Send
  6217 ;;		i1_nrf24l01SetRXMode
  6218 ;; This function is called by:
  6219 ;;		_ISR
  6220 ;; This function uses a non-reentrant model
  6221 ;;
  6222                           
  6223                           
  6224                           ;psect for function _nrf24l01ISR
  6225  05B6                     _nrf24l01ISR:	
  6226                           
  6227                           ;nrf24l01.c: 224: n_STATUS_t status;;nrf24l01.c: 225: status.byte = nrf24l01Send(0b00000
      +                          000 | 0x07, 0);
  6228                           
  6229                           ;incstack = 0
  6230                           ; Regs used in _nrf24l01ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6231  05B6  01F1               	clrf	i1nrf24l01Send@data
  6232  05B7  3007               	movlw	7
  6233  05B8  318F  27E5  3185   	fcall	i1_nrf24l01Send
  6234  05BB  00FD               	movwf	??_nrf24l01ISR
  6235  05BC  087D               	movf	??_nrf24l01ISR,w
  6236  05BD  0020               	movlb	0	; select bank0
  6237  05BE  00A0               	movwf	nrf24l01ISR@status
  6238                           
  6239                           ;nrf24l01.c: 230: };nrf24l01.c: 233: if (status.byte == 0xFF){
  6240  05BF  0A20               	incf	nrf24l01ISR@status,w
  6241  05C0  1D03               	btfss	3,2
  6242  05C1  2DC6               	goto	i1l2751
  6243                           
  6244                           ;nrf24l01.c: 234: exception(2);
  6245  05C2  3002               	movlw	2
  6246  05C3  318F  2781  3185   	fcall	_exception
  6247  05C6                     i1l2751:	
  6248                           
  6249                           ;nrf24l01.c: 235: };nrf24l01.c: 237: if (status.TX_DS){
  6250  05C6  0020               	movlb	0	; select bank0
  6251  05C7  1EA0               	btfss	nrf24l01ISR@status,5
  6252  05C8  2DD5               	goto	i1l2759
  6253                           
  6254                           ;nrf24l01.c: 240: nrf24l01.TXBusy = 0;
  6255  05C9  105B               	bcf	_nrf24l01,0	;volatile
  6256                           
  6257                           ;nrf24l01.c: 243: if (!nrf24l01.RXMode){
  6258  05CA  195B               	btfsc	_nrf24l01,2	;volatile
  6259  05CB  2DD5               	goto	i1l2759
  6260                           
  6261                           ;nrf24l01.c: 244: if (TXPacket->packetData.ACKRequest){
  6262  05CC  0859               	movf	_TXPacket,w
  6263  05CD  0086               	movwf	6
  6264  05CE  0187               	clrf	7
  6265  05CF  1C81               	btfss	1,1
  6266  05D0  2DD5               	goto	i1l2759
  6267                           
  6268                           ;nrf24l01.c: 247: nrf24l01SetRXMode(1);
  6269  05D1  3001               	movlw	1
  6270  05D2  3185  257F  3185   	fcall	i1_nrf24l01SetRXMode
  6271  05D5                     i1l2759:	
  6272                           
  6273                           ;nrf24l01.c: 248: };nrf24l01.c: 249: };nrf24l01.c: 250: };nrf24l01.c: 253: if (status.RX
      +                          _DR){
  6274  05D5  0020               	movlb	0	; select bank0
  6275  05D6  1F20               	btfss	nrf24l01ISR@status,6
  6276  05D7  2DE3               	goto	i1l2769
  6277                           
  6278                           ;nrf24l01.c: 256: if (!nrf24l01.RXPending){
  6279  05D8  18DB               	btfsc	_nrf24l01,1	;volatile
  6280  05D9  2DE2               	goto	i1l334
  6281                           
  6282                           ;nrf24l01.c: 259: nrf24l01.RXPending = 1;
  6283  05DA  14DB               	bsf	_nrf24l01,1	;volatile
  6284                           
  6285                           ;nrf24l01.c: 260: nrf24l01ReceivePacket();
  6286  05DB  3184  2478  3185   	fcall	_nrf24l01ReceivePacket
  6287                           
  6288                           ;nrf24l01.c: 261: nrf24l01CheckACK();
  6289  05DE  3187  279D  3185   	fcall	_nrf24l01CheckACK
  6290                           
  6291                           ;nrf24l01.c: 262: }
  6292  05E1  2DE3               	goto	i1l2769
  6293  05E2                     i1l334:	
  6294                           
  6295                           ;nrf24l01.c: 265: else{;nrf24l01.c: 268: status.RX_DR = 0;
  6296  05E2  1320               	bcf	nrf24l01ISR@status,6
  6297  05E3                     i1l2769:	
  6298                           
  6299                           ;nrf24l01.c: 269: };nrf24l01.c: 271: };nrf24l01.c: 274: nrf24l01Send(0b00100000 | 0x07, 
      +                          status.byte);
  6300  05E3  0020               	movlb	0	; select bank0
  6301  05E4  0820               	movf	nrf24l01ISR@status,w
  6302  05E5  00FD               	movwf	??_nrf24l01ISR
  6303  05E6  087D               	movf	??_nrf24l01ISR,w
  6304  05E7  00F1               	movwf	i1nrf24l01Send@data
  6305  05E8  3027               	movlw	39
  6306  05E9  318F  27E5         	fcall	i1_nrf24l01Send
  6307  05EB  0008               	return
  6308  05EC                     __end_of_nrf24l01ISR:	
  6309                           
  6310                           	psect	text25
  6311  0478                     __ptext25:	
  6312 ;; *************** function _nrf24l01ReceivePacket *****************
  6313 ;; Defined at:
  6314 ;;		line 114 in file "nrf24l01.c"
  6315 ;; Parameters:    Size  Location     Type
  6316 ;;		None
  6317 ;; Auto vars:     Size  Location     Type
  6318 ;;  i               1   10[COMMON] unsigned char 
  6319 ;;  width           1    9[COMMON] unsigned char 
  6320 ;; Return value:  Size  Location     Type
  6321 ;;                  1    wreg      void 
  6322 ;; Registers used:
  6323 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6324 ;; Tracked objects:
  6325 ;;		On entry : 0/0
  6326 ;;		On exit  : 0/0
  6327 ;;		Unchanged: 0/0
  6328 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6329 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6330 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6331 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6332 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6333 ;;Total ram usage:        3 bytes
  6334 ;; Hardware stack levels used:    1
  6335 ;; Hardware stack levels required when called:    3
  6336 ;; This function calls:
  6337 ;;		_nrf24l01CEHigh
  6338 ;;		_nrf24l01CELow
  6339 ;;		_nrf24l01SPIEnd
  6340 ;;		_nrf24l01SPISend
  6341 ;;		_nrf24l01SPIStart
  6342 ;;		i1_memset
  6343 ;;		i1_nrf24l01Send
  6344 ;; This function is called by:
  6345 ;;		_nrf24l01ISR
  6346 ;; This function uses a non-reentrant model
  6347 ;;
  6348                           
  6349                           
  6350                           ;psect for function _nrf24l01ReceivePacket
  6351  0478                     _nrf24l01ReceivePacket:	
  6352                           
  6353                           ;nrf24l01.c: 117: memset(RXPacket.Message, 0, sizeof(RXPacket.Message));
  6354                           
  6355                           ;incstack = 0
  6356                           ; Regs used in _nrf24l01ReceivePacket: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  6357  0478  3041               	movlw	low (_RXPacket+1)
  6358  0479  00F0               	movwf	i1memset@p1
  6359  047A  3001               	movlw	high (_RXPacket+1)
  6360  047B  00F1               	movwf	i1memset@p1+1
  6361  047C  3000               	movlw	0
  6362  047D  00F2               	movwf	i1memset@c
  6363  047E  00F3               	movwf	i1memset@c+1
  6364  047F  3020               	movlw	32
  6365  0480  00F4               	movwf	i1memset@n
  6366  0481  3000               	movlw	0
  6367  0482  00F5               	movwf	i1memset@n+1
  6368  0483  318F  2799  3184   	fcall	i1_memset
  6369                           
  6370                           ;nrf24l01.c: 118: RXPacket.packetData.byte = 0x00;
  6371  0486  0022               	movlb	2	; select bank2
  6372  0487  01C0               	clrf	_RXPacket^(0+256)
  6373                           
  6374                           ;nrf24l01.c: 121: unsigned char width = nrf24l01Send(0b01100000, 0);
  6375  0488  01F1               	clrf	i1nrf24l01Send@data
  6376  0489  3060               	movlw	96
  6377  048A  318F  27E5  3184   	fcall	i1_nrf24l01Send
  6378  048D  00F8               	movwf	??_nrf24l01ReceivePacket
  6379  048E  0878               	movf	??_nrf24l01ReceivePacket,w
  6380  048F  00F9               	movwf	nrf24l01ReceivePacket@width
  6381                           
  6382                           ;nrf24l01.c: 122: unsigned char i = 0;
  6383  0490  01FA               	clrf	nrf24l01ReceivePacket@i
  6384                           
  6385                           ;nrf24l01.c: 125: nrf24l01CELow();
  6386  0491  318F  2747  3184   	fcall	_nrf24l01CELow
  6387                           
  6388                           ;nrf24l01.c: 128: nrf24l01SPIStart();
  6389  0494  3187  27F4  3184   	fcall	_nrf24l01SPIStart
  6390                           
  6391                           ;nrf24l01.c: 131: nrf24l01SPISend(0b01100001);
  6392  0497  3061               	movlw	97
  6393  0498  318F  2762  3184   	fcall	_nrf24l01SPISend
  6394                           
  6395                           ;nrf24l01.c: 134: RXPacket.packetData.byte = nrf24l01SPISend(0);
  6396  049B  3000               	movlw	0
  6397  049C  318F  2762  3184   	fcall	_nrf24l01SPISend
  6398  049F  00F8               	movwf	??_nrf24l01ReceivePacket
  6399  04A0  0878               	movf	??_nrf24l01ReceivePacket,w
  6400  04A1  0022               	movlb	2	; select bank2
  6401  04A2  00C0               	movwf	_RXPacket^(0+256)
  6402                           
  6403                           ;nrf24l01.c: 135: width--;
  6404  04A3  3001               	movlw	1
  6405  04A4  02F9               	subwf	nrf24l01ReceivePacket@width,f
  6406                           
  6407                           ;nrf24l01.c: 137: for (i = 0; (i < width) && (i < sizeof(RXPacket.Message)); i++){
  6408  04A5  01FA               	clrf	nrf24l01ReceivePacket@i
  6409  04A6  2CB7               	goto	i1l2735
  6410  04A7                     i1l2731:	
  6411                           
  6412                           ;nrf24l01.c: 139: RXPacket.Message[i] = nrf24l01SPISend(0);
  6413  04A7  3000               	movlw	0
  6414  04A8  318F  2762  3184   	fcall	_nrf24l01SPISend
  6415  04AB  00F8               	movwf	??_nrf24l01ReceivePacket
  6416  04AC  087A               	movf	nrf24l01ReceivePacket@i,w
  6417  04AD  3E41               	addlw	(low ((_RXPacket| (0+256)+1)))& (0+255)
  6418  04AE  0086               	movwf	6
  6419  04AF  3001               	movlw	1	; select bank2/3
  6420  04B0  0087               	movwf	7
  6421  04B1  0878               	movf	??_nrf24l01ReceivePacket,w
  6422  04B2  0081               	movwf	1
  6423  04B3  3001               	movlw	1
  6424  04B4  00F8               	movwf	??_nrf24l01ReceivePacket
  6425  04B5  0878               	movf	??_nrf24l01ReceivePacket,w
  6426  04B6  07FA               	addwf	nrf24l01ReceivePacket@i,f
  6427  04B7                     i1l2735:	
  6428  04B7  0879               	movf	nrf24l01ReceivePacket@width,w
  6429  04B8  027A               	subwf	nrf24l01ReceivePacket@i,w
  6430  04B9  1803               	skipnc
  6431  04BA  2CBF               	goto	i1l2739
  6432  04BB  3020               	movlw	32
  6433  04BC  027A               	subwf	nrf24l01ReceivePacket@i,w
  6434  04BD  1C03               	skipc
  6435  04BE  2CA7               	goto	i1l2731
  6436  04BF                     i1l2739:	
  6437                           
  6438                           ;nrf24l01.c: 140: };nrf24l01.c: 143: nrf24l01SPIEnd();
  6439  04BF  318F  2753  3184   	fcall	_nrf24l01SPIEnd
  6440                           
  6441                           ;nrf24l01.c: 146: nrf24l01CEHigh();
  6442  04C2  318F  2744         	fcall	_nrf24l01CEHigh
  6443  04C4  0008               	return
  6444  04C5                     __end_of_nrf24l01ReceivePacket:	
  6445                           
  6446                           	psect	text26
  6447  0F99                     __ptext26:	
  6448 ;; *************** function i1_memset *****************
  6449 ;; Defined at:
  6450 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\memset.c"
  6451 ;; Parameters:    Size  Location     Type
  6452 ;;  p1              2    0[COMMON] PTR void 
  6453 ;;		 -> RXPacket(33), main@packet(33), loop@packet(33), 
  6454 ;;  c               2    2[COMMON] int 
  6455 ;;  n               2    4[COMMON] unsigned int 
  6456 ;; Auto vars:     Size  Location     Type
  6457 ;;  memset          2    6[COMMON] PTR unsigned char 
  6458 ;;		 -> RXPacket(33), main@packet(33), loop@packet(33), 
  6459 ;; Return value:  Size  Location     Type
  6460 ;;                  1    wreg      PTR void 
  6461 ;; Registers used:
  6462 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  6463 ;; Tracked objects:
  6464 ;;		On entry : 0/0
  6465 ;;		On exit  : 0/0
  6466 ;;		Unchanged: 0/0
  6467 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6468 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6469 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6470 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6471 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6472 ;;Total ram usage:        8 bytes
  6473 ;; Hardware stack levels used:    1
  6474 ;; This function calls:
  6475 ;;		Nothing
  6476 ;; This function is called by:
  6477 ;;		_nrf24l01ReceivePacket
  6478 ;; This function uses a non-reentrant model
  6479 ;;
  6480                           
  6481                           
  6482                           ;psect for function i1_memset
  6483  0F99                     i1_memset:	
  6484                           
  6485                           ;incstack = 0
  6486                           ; Regs used in i1_memset: [wreg+fsr1l+fsr1h+status,2+status,0]
  6487  0F99  0871               	movf	i1memset@p1+1,w
  6488  0F9A  00F7               	movwf	i1memset@p+1
  6489  0F9B  0870               	movf	i1memset@p1,w
  6490  0F9C  00F6               	movwf	i1memset@p
  6491  0F9D                     i1l2699:	
  6492  0F9D  3001               	movlw	1
  6493  0F9E  02F4               	subwf	i1memset@n,f
  6494  0F9F  3000               	movlw	0
  6495  0FA0  3BF5               	subwfb	i1memset@n+1,f
  6496  0FA1  0A74               	incf	i1memset@n,w
  6497  0FA2  1903               	btfsc	3,2
  6498  0FA3  0A75               	incf	i1memset@n+1,w
  6499  0FA4  1903               	btfsc	3,2
  6500  0FA5  0008               	return
  6501  0FA6  0876               	movf	i1memset@p,w
  6502  0FA7  0086               	movwf	6
  6503  0FA8  0877               	movf	i1memset@p+1,w
  6504  0FA9  0087               	movwf	7
  6505  0FAA  0872               	movf	i1memset@c,w
  6506  0FAB  0081               	movwf	1
  6507  0FAC  3001               	movlw	1
  6508  0FAD  07F6               	addwf	i1memset@p,f
  6509  0FAE  3000               	movlw	0
  6510  0FAF  3DF7               	addwfc	i1memset@p+1,f
  6511  0FB0  2F9D               	goto	i1l2699
  6512  0FB1                     __end_ofi1_memset:	
  6513                           ;	Return value of i1_memset is never used
  6514                           
  6515                           
  6516                           	psect	text27
  6517  079D                     __ptext27:	
  6518 ;; *************** function _nrf24l01CheckACK *****************
  6519 ;; Defined at:
  6520 ;;		line 79 in file "nrf24l01.c"
  6521 ;; Parameters:    Size  Location     Type
  6522 ;;		None
  6523 ;; Auto vars:     Size  Location     Type
  6524 ;;		None
  6525 ;; Return value:  Size  Location     Type
  6526 ;;                  1    wreg      void 
  6527 ;; Registers used:
  6528 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6529 ;; Tracked objects:
  6530 ;;		On entry : 0/0
  6531 ;;		On exit  : 0/0
  6532 ;;		Unchanged: 0/0
  6533 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6534 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6535 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6536 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6537 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6538 ;;Total ram usage:        1 bytes
  6539 ;; Hardware stack levels used:    1
  6540 ;; Hardware stack levels required when called:    4
  6541 ;; This function calls:
  6542 ;;		_strcmp
  6543 ;;		i1_nrf24l01SetRXMode
  6544 ;; This function is called by:
  6545 ;;		_nrf24l01ISR
  6546 ;; This function uses a non-reentrant model
  6547 ;;
  6548                           
  6549                           
  6550                           ;psect for function _nrf24l01CheckACK
  6551  079D                     _nrf24l01CheckACK:	
  6552                           
  6553                           ;nrf24l01.c: 83: if (!RXPacket.packetData.IsACK){
  6554                           
  6555                           ;incstack = 0
  6556                           ; Regs used in _nrf24l01CheckACK: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6557  079D  0022               	movlb	2	; select bank2
  6558  079E  1D40               	btfss	_RXPacket^(0+256),2
  6559  079F  0008               	return
  6560                           
  6561                           ;nrf24l01.c: 85: };nrf24l01.c: 88: nrf24l01.RXPending = 0;
  6562                           
  6563                           ;nrf24l01.c: 84: return;
  6564  07A0  0020               	movlb	0	; select bank0
  6565  07A1  10DB               	bcf	_nrf24l01,1	;volatile
  6566                           
  6567                           ;nrf24l01.c: 91: if (!TXPacket->packetData.ACKRequest){
  6568  07A2  0859               	movf	_TXPacket,w
  6569  07A3  0086               	movwf	6
  6570  07A4  0187               	clrf	7
  6571  07A5  1C81               	btfss	1,1
  6572  07A6  0008               	return
  6573                           
  6574                           ;nrf24l01.c: 93: };nrf24l01.c: 96: if (strcmp(TXPacket->Message, RXPacket.Message) != 0)
      +                          {
  6575                           
  6576                           ;nrf24l01.c: 92: return;
  6577  07A7  3041               	movlw	(low ((_RXPacket| (0+256)+1)))& (0+255)
  6578  07A8  00F7               	movwf	??_nrf24l01CheckACK
  6579  07A9  0877               	movf	??_nrf24l01CheckACK,w
  6580  07AA  00F0               	movwf	strcmp@s2
  6581  07AB  0859               	movf	_TXPacket,w
  6582  07AC  3E01               	addlw	1
  6583  07AD  3186  26CE  3187   	fcall	_strcmp
  6584  07B0  0870               	movf	?_strcmp,w
  6585  07B1  0471               	iorwf	?_strcmp+1,w
  6586  07B2  1D03               	btfss	3,2
  6587  07B3  0008               	return
  6588                           
  6589                           ;nrf24l01.c: 98: };nrf24l01.c: 103: TXPacket->packetData.ACKRequest = 0;
  6590                           
  6591                           ;nrf24l01.c: 97: return;
  6592  07B4  0020               	movlb	0	; select bank0
  6593  07B5  0859               	movf	_TXPacket,w
  6594  07B6  0086               	movwf	6
  6595  07B7  0187               	clrf	7
  6596  07B8  1081               	bcf	1,1
  6597                           
  6598                           ;nrf24l01.c: 106: nrf24l01SetRXMode(0);
  6599  07B9  3000               	movlw	0
  6600  07BA  3185  257F         	fcall	i1_nrf24l01SetRXMode
  6601  07BC  0008               	return
  6602  07BD                     __end_of_nrf24l01CheckACK:	
  6603                           
  6604                           	psect	text28
  6605  057F                     __ptext28:	
  6606 ;; *************** function i1_nrf24l01SetRXMode *****************
  6607 ;; Defined at:
  6608 ;;		line 35 in file "nrf24l01.c"
  6609 ;; Parameters:    Size  Location     Type
  6610 ;;  rxMode          1    wreg     unsigned char 
  6611 ;; Auto vars:     Size  Location     Type
  6612 ;;  rxMode          1    6[COMMON] unsigned char 
  6613 ;;  nrf24l01SetR    1    5[COMMON] struct .
  6614 ;; Return value:  Size  Location     Type
  6615 ;;                  1    wreg      void 
  6616 ;; Registers used:
  6617 ;;		wreg, status,2, status,0, pclath, cstack
  6618 ;; Tracked objects:
  6619 ;;		On entry : 0/0
  6620 ;;		On exit  : 0/0
  6621 ;;		Unchanged: 0/0
  6622 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6623 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6624 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6625 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6626 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6627 ;;Total ram usage:        3 bytes
  6628 ;; Hardware stack levels used:    1
  6629 ;; Hardware stack levels required when called:    3
  6630 ;; This function calls:
  6631 ;;		_nrf24l01CEHigh
  6632 ;;		_nrf24l01CELow
  6633 ;;		i1_nrf24l01Send
  6634 ;; This function is called by:
  6635 ;;		_nrf24l01CheckACK
  6636 ;;		_nrf24l01ISR
  6637 ;; This function uses a non-reentrant model
  6638 ;;
  6639                           
  6640                           
  6641                           ;psect for function i1_nrf24l01SetRXMode
  6642  057F                     i1_nrf24l01SetRXMode:	
  6643                           
  6644                           ;incstack = 0
  6645                           ; Regs used in i1_nrf24l01SetRXMode: [wreg+status,2+status,0+pclath+cstack]
  6646                           ;i1nrf24l01SetRXMode@rxMode stored from wreg
  6647  057F  00F6               	movwf	i1nrf24l01SetRXMode@rxMode
  6648                           
  6649                           ;nrf24l01.c: 37: n_CONFIG_t config;;nrf24l01.c: 40: config.byte = nrf24l01Send(0b0000000
      +                          0 | 0x00, 0);
  6650  0580  01F1               	clrf	i1nrf24l01Send@data
  6651  0581  3000               	movlw	0
  6652  0582  318F  27E5  3185   	fcall	i1_nrf24l01Send
  6653  0585  00F4               	movwf	??i1_nrf24l01SetRXMode
  6654  0586  0874               	movf	??i1_nrf24l01SetRXMode,w
  6655  0587  00F5               	movwf	i1nrf24l01SetRXMode@config
  6656                           
  6657                           ;nrf24l01.c: 43: if (config.PRIM_RX != rxMode){
  6658  0588  0875               	movf	i1nrf24l01SetRXMode@config,w
  6659  0589  3901               	andlw	1
  6660  058A  0676               	xorwf	i1nrf24l01SetRXMode@rxMode,w
  6661  058B  1903               	skipnz
  6662  058C  2DAF               	goto	i1l2107
  6663                           
  6664                           ;nrf24l01.c: 46: nrf24l01CELow();
  6665  058D  318F  2747  3185   	fcall	_nrf24l01CELow
  6666                           
  6667                           ;nrf24l01.c: 47: _delay((unsigned long)((200)*(16000000/4000000.0)));
  6668  0590  30A0               	movlw	160
  6669  0591                     u160_27:	
  6670  0591  3200               	nop2
  6671  0592  0B89               	decfsz	9,f
  6672  0593  2D91               	goto	u160_27
  6673                           
  6674                           ;nrf24l01.c: 54: config.PRIM_RX = rxMode;
  6675  0594  0876               	movf	i1nrf24l01SetRXMode@rxMode,w
  6676  0595  3901               	andlw	1
  6677  0596  1075               	bcf	i1nrf24l01SetRXMode@config,0
  6678  0597  1D03               	skipz
  6679  0598  1475               	bsf	i1nrf24l01SetRXMode@config,0
  6680                           
  6681                           ;nrf24l01.c: 55: nrf24l01Send(0b00100000 | 0x00, config.byte);
  6682  0599  0875               	movf	i1nrf24l01SetRXMode@config,w
  6683  059A  00F4               	movwf	??i1_nrf24l01SetRXMode
  6684  059B  0874               	movf	??i1_nrf24l01SetRXMode,w
  6685  059C  00F1               	movwf	i1nrf24l01Send@data
  6686  059D  3020               	movlw	32
  6687  059E  318F  27E5  3185   	fcall	i1_nrf24l01Send
  6688                           
  6689                           ;nrf24l01.c: 58: _delay((unsigned long)((200)*(16000000/4000000.0)));
  6690  05A1  30A0               	movlw	160
  6691  05A2                     u161_27:	
  6692  05A2  3200               	nop2
  6693  05A3  0B89               	decfsz	9,f
  6694  05A4  2DA2               	goto	u161_27
  6695                           
  6696                           ;nrf24l01.c: 61: if (rxMode){
  6697  05A5  0876               	movf	i1nrf24l01SetRXMode@rxMode,w
  6698  05A6  1903               	btfsc	3,2
  6699  05A7  2DAF               	goto	i1l2107
  6700                           
  6701                           ;nrf24l01.c: 62: nrf24l01CEHigh();
  6702  05A8  318F  2744  3185   	fcall	_nrf24l01CEHigh
  6703                           
  6704                           ;nrf24l01.c: 63: _delay((unsigned long)((200)*(16000000/4000000.0)));
  6705  05AB  30A0               	movlw	160
  6706  05AC                     u162_27:	
  6707  05AC  3200               	nop2
  6708  05AD  0B89               	decfsz	9,f
  6709  05AE  2DAC               	goto	u162_27
  6710  05AF                     i1l2107:	
  6711                           
  6712                           ;nrf24l01.c: 64: };nrf24l01.c: 65: };nrf24l01.c: 68: nrf24l01.RXMode = rxMode;
  6713  05AF  0876               	movf	i1nrf24l01SetRXMode@rxMode,w
  6714  05B0  3901               	andlw	1
  6715  05B1  0020               	movlb	0	; select bank0
  6716  05B2  115B               	bcf	_nrf24l01,2	;volatile
  6717  05B3  1D03               	skipz
  6718  05B4  155B               	bsf	_nrf24l01,2	;volatile
  6719  05B5  0008               	return
  6720  05B6                     __end_ofi1_nrf24l01SetRXMode:	
  6721                           
  6722                           	psect	text29
  6723  0FE5                     __ptext29:	
  6724 ;; *************** function i1_nrf24l01Send *****************
  6725 ;; Defined at:
  6726 ;;		line 9 in file "nrf24l01.c"
  6727 ;; Parameters:    Size  Location     Type
  6728 ;;  command         1    wreg     unsigned char 
  6729 ;;  data            1    1[COMMON] unsigned char 
  6730 ;; Auto vars:     Size  Location     Type
  6731 ;;  command         1    3[COMMON] unsigned char 
  6732 ;; Return value:  Size  Location     Type
  6733 ;;                  1    wreg      unsigned char 
  6734 ;; Registers used:
  6735 ;;		wreg, status,2, status,0, pclath, cstack
  6736 ;; Tracked objects:
  6737 ;;		On entry : 0/0
  6738 ;;		On exit  : 0/0
  6739 ;;		Unchanged: 0/0
  6740 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6741 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6742 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6743 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6744 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6745 ;;Total ram usage:        3 bytes
  6746 ;; Hardware stack levels used:    1
  6747 ;; Hardware stack levels required when called:    2
  6748 ;; This function calls:
  6749 ;;		_enableInterrupts
  6750 ;;		_nrf24l01SPIEnd
  6751 ;;		_nrf24l01SPISend
  6752 ;;		_nrf24l01SPIStart
  6753 ;; This function is called by:
  6754 ;;		_nrf24l01ReceivePacket
  6755 ;;		_nrf24l01ISR
  6756 ;;		i1_nrf24l01SetRXMode
  6757 ;; This function uses a non-reentrant model
  6758 ;;
  6759                           
  6760                           
  6761                           ;psect for function i1_nrf24l01Send
  6762  0FE5                     i1_nrf24l01Send:	
  6763                           
  6764                           ;incstack = 0
  6765                           ; Regs used in i1_nrf24l01Send: [wreg+status,2+status,0+pclath+cstack]
  6766                           ;i1nrf24l01Send@command stored from wreg
  6767  0FE5  00F3               	movwf	i1nrf24l01Send@command
  6768                           
  6769                           ;nrf24l01.c: 12: enableInterrupts(0);
  6770  0FE6  3000               	movlw	0
  6771  0FE7  318F  275A  318F   	fcall	_enableInterrupts
  6772                           
  6773                           ;nrf24l01.c: 15: nrf24l01SPIStart();
  6774  0FEA  3187  27F4  318F   	fcall	_nrf24l01SPIStart
  6775                           
  6776                           ;nrf24l01.c: 18: nrf24l01SPISend(command);
  6777  0FED  0873               	movf	i1nrf24l01Send@command,w
  6778  0FEE  318F  2762  318F   	fcall	_nrf24l01SPISend
  6779                           
  6780                           ;nrf24l01.c: 21: data = nrf24l01SPISend(data);
  6781  0FF1  0871               	movf	i1nrf24l01Send@data,w
  6782  0FF2  318F  2762  318F   	fcall	_nrf24l01SPISend
  6783  0FF5  00F2               	movwf	??i1_nrf24l01Send
  6784  0FF6  0872               	movf	??i1_nrf24l01Send,w
  6785  0FF7  00F1               	movwf	i1nrf24l01Send@data
  6786                           
  6787                           ;nrf24l01.c: 24: nrf24l01SPIEnd();
  6788  0FF8  318F  2753  318F   	fcall	_nrf24l01SPIEnd
  6789                           
  6790                           ;nrf24l01.c: 27: enableInterrupts(1);
  6791  0FFB  3001               	movlw	1
  6792  0FFC  318F  275A         	fcall	_enableInterrupts
  6793                           
  6794                           ;nrf24l01.c: 29: return data;
  6795  0FFE  0871               	movf	i1nrf24l01Send@data,w
  6796  0FFF  0008               	return
  6797  1000                     __end_ofi1_nrf24l01Send:	
  6798                           
  6799                           	psect	text30
  6800  07F4                     __ptext30:	
  6801 ;; *************** function _nrf24l01SPIStart *****************
  6802 ;; Defined at:
  6803 ;;		line 65 in file "interface.c"
  6804 ;; Parameters:    Size  Location     Type
  6805 ;;		None
  6806 ;; Auto vars:     Size  Location     Type
  6807 ;;		None
  6808 ;; Return value:  Size  Location     Type
  6809 ;;                  1    wreg      void 
  6810 ;; Registers used:
  6811 ;;		wreg, status,2, status,0, pclath, cstack
  6812 ;; Tracked objects:
  6813 ;;		On entry : 0/0
  6814 ;;		On exit  : 0/0
  6815 ;;		Unchanged: 0/0
  6816 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6817 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6818 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6819 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6820 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6821 ;;Total ram usage:        0 bytes
  6822 ;; Hardware stack levels used:    1
  6823 ;; Hardware stack levels required when called:    8
  6824 ;; This function calls:
  6825 ;;		_nrf24l01CSLow
  6826 ;; This function is called by:
  6827 ;;		_nrf24l01Send
  6828 ;;		_nrf24l01ReceivePacket
  6829 ;;		_nrf24l01SendPacket
  6830 ;;		i1_nrf24l01Send
  6831 ;; This function uses a non-reentrant model
  6832 ;;
  6833                           
  6834                           
  6835                           ;psect for function _nrf24l01SPIStart
  6836  07F4                     _nrf24l01SPIStart:	
  6837                           
  6838                           ;interface.c: 66: nrf24l01CSLow();
  6839                           
  6840                           ;incstack = 0
  6841 ;; hardware stack exceeded
  6842                           ; Regs used in _nrf24l01SPIStart: [wreg+status,2+status,0+pclath+cstack]
  6843  07F4  3187  27FC  3187   	fcall	_nrf24l01CSLow
  6844                           
  6845                           ;interface.c: 67: _delay((unsigned long)((10)*(16000000/4000000.0)));
  6846  07F7  300D               	movlw	13
  6847  07F8                     u163_27:	
  6848  07F8  0B89               	decfsz	9,f
  6849  07F9  2FF8               	goto	u163_27
  6850  07FA  0000               	nop
  6851  07FB  0008               	return
  6852  07FC                     __end_of_nrf24l01SPIStart:	
  6853                           
  6854                           	psect	text31
  6855  07FC                     __ptext31:	
  6856 ;; *************** function _nrf24l01CSLow *****************
  6857 ;; Defined at:
  6858 ;;		line 18 in file "interface.c"
  6859 ;; Parameters:    Size  Location     Type
  6860 ;;		None
  6861 ;; Auto vars:     Size  Location     Type
  6862 ;;		None
  6863 ;; Return value:  Size  Location     Type
  6864 ;;                  1    wreg      void 
  6865 ;; Registers used:
  6866 ;;		None
  6867 ;; Tracked objects:
  6868 ;;		On entry : 0/0
  6869 ;;		On exit  : 0/0
  6870 ;;		Unchanged: 0/0
  6871 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6872 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6873 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6874 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6875 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6876 ;;Total ram usage:        0 bytes
  6877 ;; Hardware stack levels used:    1
  6878 ;; Hardware stack levels required when called:    7
  6879 ;; This function calls:
  6880 ;;		Nothing
  6881 ;; This function is called by:
  6882 ;;		_nrf24l01SPIStart
  6883 ;; This function uses a non-reentrant model
  6884 ;;
  6885                           
  6886                           
  6887                           ;psect for function _nrf24l01CSLow
  6888  07FC                     _nrf24l01CSLow:	
  6889                           
  6890                           ;interface.c: 19: PORTAbits.RA1 = 0;
  6891                           
  6892                           ;incstack = 0
  6893 ;; hardware stack exceeded
  6894                           ; Regs used in _nrf24l01CSLow: []
  6895  07FC  0020               	movlb	0	; select bank0
  6896  07FD  108C               	bcf	12,1	;volatile
  6897  07FE  0008               	return
  6898  07FF                     __end_of_nrf24l01CSLow:	
  6899                           
  6900                           	psect	text32
  6901  0F62                     __ptext32:	
  6902 ;; *************** function _nrf24l01SPISend *****************
  6903 ;; Defined at:
  6904 ;;		line 52 in file "interface.c"
  6905 ;; Parameters:    Size  Location     Type
  6906 ;;  data            1    wreg     unsigned char 
  6907 ;; Auto vars:     Size  Location     Type
  6908 ;;  data            1    0[COMMON] unsigned char 
  6909 ;; Return value:  Size  Location     Type
  6910 ;;                  1    wreg      unsigned char 
  6911 ;; Registers used:
  6912 ;;		wreg
  6913 ;; Tracked objects:
  6914 ;;		On entry : 0/0
  6915 ;;		On exit  : 0/0
  6916 ;;		Unchanged: 0/0
  6917 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6918 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6919 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6920 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6921 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6922 ;;Total ram usage:        0 bytes
  6923 ;; Hardware stack levels used:    1
  6924 ;; Hardware stack levels required when called:    7
  6925 ;; This function calls:
  6926 ;;		Nothing
  6927 ;; This function is called by:
  6928 ;;		_nrf24l01Send
  6929 ;;		_nrf24l01ReceivePacket
  6930 ;;		_nrf24l01SendPacket
  6931 ;;		i1_nrf24l01Send
  6932 ;; This function uses a non-reentrant model
  6933 ;;
  6934                           
  6935                           
  6936                           ;psect for function _nrf24l01SPISend
  6937  0F62                     _nrf24l01SPISend:	
  6938                           
  6939                           ;incstack = 0
  6940 ;; hardware stack exceeded
  6941                           ; Regs used in _nrf24l01SPISend: [wreg]
  6942                           ;nrf24l01SPISend@data stored from wreg
  6943  0F62  00F0               	movwf	nrf24l01SPISend@data
  6944                           
  6945                           ;interface.c: 53: SSP1BUF = data;
  6946  0F63  0870               	movf	nrf24l01SPISend@data,w
  6947  0F64  0024               	movlb	4	; select bank4
  6948  0F65  0091               	movwf	17	;volatile
  6949                           
  6950                           ;interface.c: 55: PORTCbits.RC4 = 1;
  6951  0F66  0020               	movlb	0	; select bank0
  6952  0F67  160E               	bsf	14,4	;volatile
  6953  0F68                     i1l94:	
  6954                           ;interface.c: 57: while (!SSP1STATbits.BF){
  6955                           
  6956  0F68  0024               	movlb	4	; select bank4
  6957  0F69  1814               	btfsc	20,0	;volatile
  6958  0F6A  2F6D               	goto	i1l1811
  6959                           
  6960                           ;interface.c: 58: __nop();
  6961  0F6B  0000               	nop
  6962  0F6C  2F68               	goto	i1l94
  6963  0F6D                     i1l1811:	
  6964                           
  6965                           ;interface.c: 59: };interface.c: 61: return SSP1BUF;
  6966  0F6D  0811               	movf	17,w	;volatile
  6967  0F6E  0008               	return
  6968  0F6F                     __end_of_nrf24l01SPISend:	
  6969                           
  6970                           	psect	text33
  6971  0F53                     __ptext33:	
  6972 ;; *************** function _nrf24l01SPIEnd *****************
  6973 ;; Defined at:
  6974 ;;		line 71 in file "interface.c"
  6975 ;; Parameters:    Size  Location     Type
  6976 ;;		None
  6977 ;; Auto vars:     Size  Location     Type
  6978 ;;		None
  6979 ;; Return value:  Size  Location     Type
  6980 ;;                  1    wreg      void 
  6981 ;; Registers used:
  6982 ;;		wreg, status,2, status,0, pclath, cstack
  6983 ;; Tracked objects:
  6984 ;;		On entry : 0/0
  6985 ;;		On exit  : 0/0
  6986 ;;		Unchanged: 0/0
  6987 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6988 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6989 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6990 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6991 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6992 ;;Total ram usage:        0 bytes
  6993 ;; Hardware stack levels used:    1
  6994 ;; Hardware stack levels required when called:    8
  6995 ;; This function calls:
  6996 ;;		_nrf24l01CSHigh
  6997 ;; This function is called by:
  6998 ;;		_nrf24l01Send
  6999 ;;		_nrf24l01ReceivePacket
  7000 ;;		_nrf24l01SendPacket
  7001 ;;		i1_nrf24l01Send
  7002 ;; This function uses a non-reentrant model
  7003 ;;
  7004                           
  7005                           
  7006                           ;psect for function _nrf24l01SPIEnd
  7007  0F53                     _nrf24l01SPIEnd:	
  7008                           
  7009                           ;interface.c: 72: _delay((unsigned long)((10)*(16000000/4000000.0)));
  7010                           
  7011                           ;incstack = 0
  7012 ;; hardware stack exceeded
  7013                           ; Regs used in _nrf24l01SPIEnd: [wreg+status,2+status,0+pclath+cstack]
  7014  0F53  300D               	movlw	13
  7015  0F54                     u164_27:	
  7016  0F54  0B89               	decfsz	9,f
  7017  0F55  2F54               	goto	u164_27
  7018  0F56  0000               	nop
  7019                           
  7020                           ;interface.c: 73: nrf24l01CSHigh();
  7021  0F57  318F  274A         	fcall	_nrf24l01CSHigh
  7022  0F59  0008               	return
  7023  0F5A                     __end_of_nrf24l01SPIEnd:	
  7024                           
  7025                           	psect	text34
  7026  0F4A                     __ptext34:	
  7027 ;; *************** function _nrf24l01CSHigh *****************
  7028 ;; Defined at:
  7029 ;;		line 23 in file "interface.c"
  7030 ;; Parameters:    Size  Location     Type
  7031 ;;		None
  7032 ;; Auto vars:     Size  Location     Type
  7033 ;;		None
  7034 ;; Return value:  Size  Location     Type
  7035 ;;                  1    wreg      void 
  7036 ;; Registers used:
  7037 ;;		None
  7038 ;; Tracked objects:
  7039 ;;		On entry : 0/0
  7040 ;;		On exit  : 0/0
  7041 ;;		Unchanged: 0/0
  7042 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7043 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7044 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7045 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7046 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7047 ;;Total ram usage:        0 bytes
  7048 ;; Hardware stack levels used:    1
  7049 ;; Hardware stack levels required when called:    7
  7050 ;; This function calls:
  7051 ;;		Nothing
  7052 ;; This function is called by:
  7053 ;;		_nrf24l01SPIEnd
  7054 ;; This function uses a non-reentrant model
  7055 ;;
  7056                           
  7057                           
  7058                           ;psect for function _nrf24l01CSHigh
  7059  0F4A                     _nrf24l01CSHigh:	
  7060                           
  7061                           ;interface.c: 24: PORTAbits.RA1 = 1;
  7062                           
  7063                           ;incstack = 0
  7064 ;; hardware stack exceeded
  7065                           ; Regs used in _nrf24l01CSHigh: []
  7066  0F4A  0020               	movlb	0	; select bank0
  7067  0F4B  148C               	bsf	12,1	;volatile
  7068  0F4C  0008               	return
  7069  0F4D                     __end_of_nrf24l01CSHigh:	
  7070                           
  7071                           	psect	text35
  7072  0F5A                     __ptext35:	
  7073 ;; *************** function _enableInterrupts *****************
  7074 ;; Defined at:
  7075 ;;		line 77 in file "interface.c"
  7076 ;; Parameters:    Size  Location     Type
  7077 ;;  enable          1    wreg     unsigned char 
  7078 ;; Auto vars:     Size  Location     Type
  7079 ;;  enable          1    0[COMMON] unsigned char 
  7080 ;; Return value:  Size  Location     Type
  7081 ;;                  1    wreg      void 
  7082 ;; Registers used:
  7083 ;;		wreg, status,0
  7084 ;; Tracked objects:
  7085 ;;		On entry : 0/0
  7086 ;;		On exit  : 0/0
  7087 ;;		Unchanged: 0/0
  7088 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7089 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7090 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7091 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7092 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7093 ;;Total ram usage:        0 bytes
  7094 ;; Hardware stack levels used:    1
  7095 ;; Hardware stack levels required when called:    7
  7096 ;; This function calls:
  7097 ;;		Nothing
  7098 ;; This function is called by:
  7099 ;;		_nrf24l01Send
  7100 ;;		_nrf24l01SendPacket
  7101 ;;		i1_nrf24l01Send
  7102 ;; This function uses a non-reentrant model
  7103 ;;
  7104                           
  7105                           
  7106                           ;psect for function _enableInterrupts
  7107  0F5A                     _enableInterrupts:	
  7108                           
  7109                           ;incstack = 0
  7110 ;; hardware stack exceeded
  7111                           ; Regs used in _enableInterrupts: [wreg+status,0]
  7112                           ;enableInterrupts@enable stored from wreg
  7113  0F5A  00F0               	movwf	enableInterrupts@enable
  7114                           
  7115                           ;interface.c: 78: PIE0bits.INTE = enable;
  7116  0F5B  0C70               	rrf	enableInterrupts@enable,w
  7117  0F5C  0021               	movlb	1	; select bank1
  7118  0F5D  1C03               	skipc
  7119  0F5E  1010               	bcf	16,0	;volatile
  7120  0F5F  1803               	skipnc
  7121  0F60  1410               	bsf	16,0	;volatile
  7122  0F61  0008               	return
  7123  0F62                     __end_of_enableInterrupts:	
  7124                           
  7125                           	psect	text36
  7126  0F47                     __ptext36:	
  7127 ;; *************** function _nrf24l01CELow *****************
  7128 ;; Defined at:
  7129 ;;		line 8 in file "interface.c"
  7130 ;; Parameters:    Size  Location     Type
  7131 ;;		None
  7132 ;; Auto vars:     Size  Location     Type
  7133 ;;		None
  7134 ;; Return value:  Size  Location     Type
  7135 ;;                  1    wreg      void 
  7136 ;; Registers used:
  7137 ;;		None
  7138 ;; Tracked objects:
  7139 ;;		On entry : 0/0
  7140 ;;		On exit  : 0/0
  7141 ;;		Unchanged: 0/0
  7142 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7143 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7144 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7145 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7146 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7147 ;;Total ram usage:        0 bytes
  7148 ;; Hardware stack levels used:    1
  7149 ;; Hardware stack levels required when called:    7
  7150 ;; This function calls:
  7151 ;;		Nothing
  7152 ;; This function is called by:
  7153 ;;		_nrf24l01SetRXMode
  7154 ;;		_nrf24l01ReceivePacket
  7155 ;;		_nrf24l01SendPacket
  7156 ;;		_nrf24l01Init
  7157 ;;		i1_nrf24l01SetRXMode
  7158 ;; This function uses a non-reentrant model
  7159 ;;
  7160                           
  7161                           
  7162                           ;psect for function _nrf24l01CELow
  7163  0F47                     _nrf24l01CELow:	
  7164                           
  7165                           ;interface.c: 9: PORTAbits.RA0 = 0;
  7166                           
  7167                           ;incstack = 0
  7168 ;; hardware stack exceeded
  7169                           ; Regs used in _nrf24l01CELow: []
  7170  0F47  0020               	movlb	0	; select bank0
  7171  0F48  100C               	bcf	12,0	;volatile
  7172  0F49  0008               	return
  7173  0F4A                     __end_of_nrf24l01CELow:	
  7174                           
  7175                           	psect	text37
  7176  0F44                     __ptext37:	
  7177 ;; *************** function _nrf24l01CEHigh *****************
  7178 ;; Defined at:
  7179 ;;		line 13 in file "interface.c"
  7180 ;; Parameters:    Size  Location     Type
  7181 ;;		None
  7182 ;; Auto vars:     Size  Location     Type
  7183 ;;		None
  7184 ;; Return value:  Size  Location     Type
  7185 ;;                  1    wreg      void 
  7186 ;; Registers used:
  7187 ;;		None
  7188 ;; Tracked objects:
  7189 ;;		On entry : 0/0
  7190 ;;		On exit  : 0/0
  7191 ;;		Unchanged: 0/0
  7192 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7193 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7194 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7195 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7196 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7197 ;;Total ram usage:        0 bytes
  7198 ;; Hardware stack levels used:    1
  7199 ;; Hardware stack levels required when called:    7
  7200 ;; This function calls:
  7201 ;;		Nothing
  7202 ;; This function is called by:
  7203 ;;		_nrf24l01SetRXMode
  7204 ;;		_nrf24l01ReceivePacket
  7205 ;;		_nrf24l01SendPacket
  7206 ;;		_nrf24l01Init
  7207 ;;		i1_nrf24l01SetRXMode
  7208 ;; This function uses a non-reentrant model
  7209 ;;
  7210                           
  7211                           
  7212                           ;psect for function _nrf24l01CEHigh
  7213  0F44                     _nrf24l01CEHigh:	
  7214                           
  7215                           ;interface.c: 14: PORTAbits.RA0 = 1;
  7216                           
  7217                           ;incstack = 0
  7218 ;; hardware stack exceeded
  7219                           ; Regs used in _nrf24l01CEHigh: []
  7220  0F44  0020               	movlb	0	; select bank0
  7221  0F45  140C               	bsf	12,0	;volatile
  7222  0F46  0008               	return
  7223  0F47                     __end_of_nrf24l01CEHigh:	
  7224                           
  7225                           	psect	text38
  7226  06CE                     __ptext38:	
  7227 ;; *************** function _strcmp *****************
  7228 ;; Defined at:
  7229 ;;		line 33 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\strcmp.c"
  7230 ;; Parameters:    Size  Location     Type
  7231 ;;  s1              1    wreg     PTR const unsigned char 
  7232 ;;		 -> packet.Message(32), packet.Message(32), NULL(0), main@packet(33), 
  7233 ;;		 -> loop@packet(33), 
  7234 ;;  s2              1    0[COMMON] PTR const unsigned char 
  7235 ;;		 -> RXPacket.Message(32), RXPacket(33), 
  7236 ;; Auto vars:     Size  Location     Type
  7237 ;;  s1              1    4[COMMON] PTR const unsigned char 
  7238 ;;		 -> packet.Message(32), packet.Message(32), NULL(0), main@packet(33), 
  7239 ;;		 -> loop@packet(33), 
  7240 ;;  r               1    3[COMMON] char 
  7241 ;; Return value:  Size  Location     Type
  7242 ;;                  2    0[COMMON] int 
  7243 ;; Registers used:
  7244 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0
  7245 ;; Tracked objects:
  7246 ;;		On entry : 0/0
  7247 ;;		On exit  : 0/0
  7248 ;;		Unchanged: 0/0
  7249 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7250 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7251 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7252 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7253 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7254 ;;Total ram usage:        5 bytes
  7255 ;; Hardware stack levels used:    1
  7256 ;; This function calls:
  7257 ;;		Nothing
  7258 ;; This function is called by:
  7259 ;;		_nrf24l01CheckACK
  7260 ;; This function uses a non-reentrant model
  7261 ;;
  7262                           
  7263                           
  7264                           ;psect for function _strcmp
  7265  06CE                     _strcmp:	
  7266                           
  7267                           ;incstack = 0
  7268                           ; Regs used in _strcmp: [wreg-fsr1h+status,2+status,0]
  7269                           ;strcmp@s1 stored from wreg
  7270  06CE  00F4               	movwf	strcmp@s1
  7271  06CF  2ED8               	goto	i1l2029
  7272  06D0                     i1l2025:	
  7273  06D0  3001               	movlw	1
  7274  06D1  00F2               	movwf	??_strcmp
  7275  06D2  0872               	movf	??_strcmp,w
  7276  06D3  07F4               	addwf	strcmp@s1,f
  7277  06D4  3001               	movlw	1
  7278  06D5  00F2               	movwf	??_strcmp
  7279  06D6  0872               	movf	??_strcmp,w
  7280  06D7  07F0               	addwf	strcmp@s2,f
  7281  06D8                     i1l2029:	
  7282  06D8  0874               	movf	strcmp@s1,w
  7283  06D9  0086               	movwf	6
  7284  06DA  0187               	clrf	7
  7285  06DB  0870               	movf	strcmp@s2,w
  7286  06DC  0084               	movwf	4
  7287  06DD  3001               	movlw	1	; select bank2/3
  7288  06DE  0085               	movwf	5
  7289  06DF  0300               	decf	0,w
  7290  06E0  3AFF               	xorlw	255
  7291  06E1  0701               	addwf	1,w
  7292  06E2  00F2               	movwf	??_strcmp
  7293  06E3  0872               	movf	??_strcmp,w
  7294  06E4  00F3               	movwf	strcmp@r
  7295  06E5  0873               	movf	strcmp@r,w
  7296  06E6  1D03               	btfss	3,2
  7297  06E7  2EEE               	goto	i1l2033
  7298  06E8  0874               	movf	strcmp@s1,w
  7299  06E9  0086               	movwf	6
  7300  06EA  0187               	clrf	7
  7301  06EB  0801               	movf	1,w
  7302  06EC  1D03               	btfss	3,2
  7303  06ED  2ED0               	goto	i1l2025
  7304  06EE                     i1l2033:	
  7305  06EE  0873               	movf	strcmp@r,w
  7306  06EF  00F0               	movwf	?_strcmp
  7307  06F0  01F1               	clrf	?_strcmp+1
  7308  06F1  1BF0               	btfsc	?_strcmp,7
  7309  06F2  03F1               	decf	?_strcmp+1,f
  7310  06F3  0008               	return
  7311  06F4                     __end_of_strcmp:	
  7312                           
  7313                           	psect	text39
  7314  0F81                     __ptext39:	
  7315 ;; *************** function _exception *****************
  7316 ;; Defined at:
  7317 ;;		line 81 in file "interface.c"
  7318 ;; Parameters:    Size  Location     Type
  7319 ;;  exception       1    wreg     unsigned char 
  7320 ;; Auto vars:     Size  Location     Type
  7321 ;;  exception       1   12[COMMON] unsigned char 
  7322 ;; Return value:  Size  Location     Type
  7323 ;;                  1    wreg      void 
  7324 ;; Registers used:
  7325 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7326 ;; Tracked objects:
  7327 ;;		On entry : 0/0
  7328 ;;		On exit  : 0/0
  7329 ;;		Unchanged: 0/0
  7330 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7331 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7332 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7333 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7334 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7335 ;;Total ram usage:        3 bytes
  7336 ;; Hardware stack levels used:    1
  7337 ;; Hardware stack levels required when called:    2
  7338 ;; This function calls:
  7339 ;;		___wmul
  7340 ;;		i1_flashUpdate
  7341 ;; This function is called by:
  7342 ;;		_nrf24l01ISR
  7343 ;; This function uses a non-reentrant model
  7344 ;;
  7345                           
  7346                           
  7347                           ;psect for function _exception
  7348  0F81                     _exception:	
  7349                           
  7350                           ;incstack = 0
  7351                           ; Regs used in _exception: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7352                           ;exception@exception stored from wreg
  7353  0F81  00FC               	movwf	exception@exception
  7354                           
  7355                           ;interface.c: 82: romData.bootMode = (unsigned) (exception * 10);
  7356  0F82  087C               	movf	exception@exception,w
  7357  0F83  00FA               	movwf	??_exception
  7358  0F84  01FB               	clrf	??_exception+1
  7359  0F85  087A               	movf	??_exception,w
  7360  0F86  00F0               	movwf	___wmul@multiplier
  7361  0F87  087B               	movf	??_exception+1,w
  7362  0F88  00F1               	movwf	___wmul@multiplier+1
  7363  0F89  300A               	movlw	10
  7364  0F8A  00F2               	movwf	___wmul@multiplicand
  7365  0F8B  3000               	movlw	0
  7366  0F8C  00F3               	movwf	___wmul@multiplicand+1
  7367  0F8D  318F  27CA  318F   	fcall	___wmul
  7368  0F90  0871               	movf	?___wmul+1,w
  7369  0F91  0020               	movlb	0	; select bank0
  7370  0F92  00EE               	movwf	_romData+18
  7371  0F93  0870               	movf	?___wmul,w
  7372  0F94  00ED               	movwf	_romData+17
  7373                           
  7374                           ;interface.c: 83: flashUpdate();
  7375  0F95  3187  273C         	fcall	i1_flashUpdate
  7376  0F97  0001               	reset	;# 
  7377  0F98  0008               	return
  7378  0F99                     __end_of_exception:	
  7379                           
  7380                           	psect	text40
  7381  073C                     __ptext40:	
  7382 ;; *************** function i1_flashUpdate *****************
  7383 ;; Defined at:
  7384 ;;		line 97 in file "flash.c"
  7385 ;; Parameters:    Size  Location     Type
  7386 ;;		None
  7387 ;; Auto vars:     Size  Location     Type
  7388 ;;  flashUpdate     2    8[COMMON] unsigned int 
  7389 ;; Return value:  Size  Location     Type
  7390 ;;                  1    wreg      void 
  7391 ;; Registers used:
  7392 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7393 ;; Tracked objects:
  7394 ;;		On entry : 0/0
  7395 ;;		On exit  : 0/0
  7396 ;;		Unchanged: 0/0
  7397 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7398 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7399 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7400 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7401 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7402 ;;Total ram usage:        4 bytes
  7403 ;; Hardware stack levels used:    1
  7404 ;; Hardware stack levels required when called:    1
  7405 ;; This function calls:
  7406 ;;		i1_flashWriteByte
  7407 ;; This function is called by:
  7408 ;;		_exception
  7409 ;; This function uses a non-reentrant model
  7410 ;;
  7411                           
  7412                           
  7413                           ;psect for function i1_flashUpdate
  7414  073C                     i1_flashUpdate:	
  7415                           
  7416                           ;flash.c: 98: for (unsigned int i = 0; i < 32; i++){
  7417                           
  7418                           ;incstack = 0
  7419                           ; Regs used in i1_flashUpdate: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7420  073C  01F8               	clrf	i1flashUpdate@i
  7421  073D  01F9               	clrf	i1flashUpdate@i+1
  7422  073E                     L3:	
  7423  073E  3000               	movlw	0
  7424  073F  0279               	subwf	i1flashUpdate@i+1,w
  7425  0740  3020               	movlw	32
  7426  0741  1903               	skipnz
  7427  0742  0278               	subwf	i1flashUpdate@i,w
  7428  0743  1803               	btfsc	3,0
  7429  0744  0008               	return
  7430                           
  7431                           ;flash.c: 99: flashWriteByte(i, romHolder.array[i]);
  7432  0745  0879               	movf	i1flashUpdate@i+1,w
  7433  0746  00F1               	movwf	i1flashWriteByte@offset+1
  7434  0747  0878               	movf	i1flashUpdate@i,w
  7435  0748  00F0               	movwf	i1flashWriteByte@offset
  7436  0749  0878               	movf	i1flashUpdate@i,w
  7437  074A  3E20               	addlw	(low (_romHolder| (0+256)))& (0+255)
  7438  074B  0086               	movwf	6
  7439  074C  3001               	movlw	1	; select bank2/3
  7440  074D  0087               	movwf	7
  7441  074E  0801               	movf	1,w
  7442  074F  00F6               	movwf	??i1_flashUpdate
  7443  0750  01F7               	clrf	??i1_flashUpdate+1
  7444  0751  0876               	movf	??i1_flashUpdate,w
  7445  0752  00F2               	movwf	i1flashWriteByte@data
  7446  0753  0877               	movf	??i1_flashUpdate+1,w
  7447  0754  00F3               	movwf	i1flashWriteByte@data+1
  7448  0755  3186  264E  3187   	fcall	i1_flashWriteByte
  7449  0758  3001               	movlw	1
  7450  0759  07F8               	addwf	i1flashUpdate@i,f
  7451  075A  3000               	movlw	0
  7452  075B  3DF9               	addwfc	i1flashUpdate@i+1,f
  7453  075C  2F3E               	goto	L3
  7454  075D                     __end_ofi1_flashUpdate:	
  7455                           
  7456                           	psect	text41
  7457  064E                     __ptext41:	
  7458 ;; *************** function i1_flashWriteByte *****************
  7459 ;; Defined at:
  7460 ;;		line 8 in file "flash.c"
  7461 ;; Parameters:    Size  Location     Type
  7462 ;;  offset          2    0[COMMON] unsigned int 
  7463 ;;  data            2    2[COMMON] unsigned int 
  7464 ;; Auto vars:     Size  Location     Type
  7465 ;;  flashWriteBy    2    4[COMMON] unsigned int 
  7466 ;; Return value:  Size  Location     Type
  7467 ;;                  1    wreg      void 
  7468 ;; Registers used:
  7469 ;;		wreg, status,2, status,0
  7470 ;; Tracked objects:
  7471 ;;		On entry : 0/0
  7472 ;;		On exit  : 0/0
  7473 ;;		Unchanged: 0/0
  7474 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7475 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7476 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7477 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7478 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7479 ;;Total ram usage:        6 bytes
  7480 ;; Hardware stack levels used:    1
  7481 ;; This function calls:
  7482 ;;		Nothing
  7483 ;; This function is called by:
  7484 ;;		i1_flashUpdate
  7485 ;; This function uses a non-reentrant model
  7486 ;;
  7487                           
  7488                           
  7489                           ;psect for function i1_flashWriteByte
  7490  064E                     i1_flashWriteByte:	
  7491                           
  7492                           ;flash.c: 10: unsigned int address;;flash.c: 12: INTCONbits.GIE = 0;
  7493                           
  7494                           ;incstack = 0
  7495                           ; Regs used in i1_flashWriteByte: [wreg+status,2+status,0]
  7496  064E  138B               	bcf	11,7	;volatile
  7497                           
  7498                           ;flash.c: 15: PMCON1 = 0x00;
  7499  064F  0031               	movlb	17	; select bank17
  7500  0650  0195               	clrf	21	;volsfr
  7501                           
  7502                           ;flash.c: 17: address = (0x2000U - 32) + offset;
  7503  0651  0870               	movf	i1flashWriteByte@offset,w
  7504  0652  3EE0               	addlw	224
  7505  0653  00F4               	movwf	i1flashWriteByte@address
  7506  0654  301F               	movlw	31
  7507  0655  3D71               	addwfc	i1flashWriteByte@offset+1,w
  7508  0656  00F5               	movwf	i1flashWriteByte@address+1
  7509                           
  7510                           ;flash.c: 18: PMADRL = (char) (address >> 0);
  7511  0657  0874               	movf	i1flashWriteByte@address,w
  7512  0658  0091               	movwf	17	;volatile
  7513                           
  7514                           ;flash.c: 19: PMADRH = (char) (address >> 8);
  7515  0659  0875               	movf	i1flashWriteByte@address+1,w
  7516  065A  0092               	movwf	18	;volatile
  7517                           
  7518                           ;flash.c: 21: PMCON1bits.FREE = 1;
  7519  065B  1615               	bsf	21,4	;volsfr
  7520                           
  7521                           ;flash.c: 22: PMCON1bits.WREN = 1;
  7522  065C  1515               	bsf	21,2	;volsfr
  7523                           
  7524                           ;flash.c: 24: PMCON2 = 0x55;
  7525  065D  3055               	movlw	85
  7526  065E  0096               	movwf	22	;volsfr
  7527                           
  7528                           ;flash.c: 25: PMCON2 = 0xAA;
  7529  065F  30AA               	movlw	170
  7530  0660  0096               	movwf	22	;volsfr
  7531                           
  7532                           ;flash.c: 27: PMCON1bits.WR = 1;
  7533  0661  1495               	bsf	21,1	;volsfr
  7534                           
  7535                           ;flash.c: 29: __nop();
  7536  0662  0000               	nop
  7537                           
  7538                           ;flash.c: 30: __nop();
  7539  0663  0000               	nop
  7540                           
  7541                           ;flash.c: 32: PMCON1bits.WREN = 0;
  7542  0664  0031               	movlb	17	; select bank17
  7543  0665  1115               	bcf	21,2	;volsfr
  7544                           
  7545                           ;flash.c: 36: PMCON1 = 0x00;
  7546  0666  0195               	clrf	21	;volsfr
  7547                           
  7548                           ;flash.c: 38: PMADRL = (char) (address >> 0);
  7549  0667  0874               	movf	i1flashWriteByte@address,w
  7550  0668  0091               	movwf	17	;volatile
  7551                           
  7552                           ;flash.c: 39: PMADRH = (char) (address >> 8);
  7553  0669  0875               	movf	i1flashWriteByte@address+1,w
  7554  066A  0092               	movwf	18	;volatile
  7555                           
  7556                           ;flash.c: 41: PMCON1bits.FREE = 0;
  7557  066B  1215               	bcf	21,4	;volsfr
  7558                           
  7559                           ;flash.c: 42: PMCON1bits.LWLO = 1;
  7560  066C  1695               	bsf	21,5	;volsfr
  7561                           
  7562                           ;flash.c: 43: PMCON1bits.WREN = 1;
  7563  066D  1515               	bsf	21,2	;volsfr
  7564                           
  7565                           ;flash.c: 45: PMDATL = (data >> 0);
  7566  066E  0872               	movf	i1flashWriteByte@data,w
  7567  066F  0093               	movwf	19	;volatile
  7568                           
  7569                           ;flash.c: 46: PMDATH = (data >> 8);
  7570  0670  0873               	movf	i1flashWriteByte@data+1,w
  7571  0671  0094               	movwf	20	;volatile
  7572                           
  7573                           ;flash.c: 48: PMCON1bits.LWLO = 0;
  7574  0672  1295               	bcf	21,5	;volsfr
  7575                           
  7576                           ;flash.c: 50: PMCON2 = 0x55;
  7577  0673  3055               	movlw	85
  7578  0674  0096               	movwf	22	;volsfr
  7579                           
  7580                           ;flash.c: 51: PMCON2 = 0xAA;
  7581  0675  30AA               	movlw	170
  7582  0676  0096               	movwf	22	;volsfr
  7583                           
  7584                           ;flash.c: 53: PMCON1bits.WR = 1;
  7585  0677  1495               	bsf	21,1	;volsfr
  7586                           
  7587                           ;flash.c: 55: __nop();
  7588  0678  0000               	nop
  7589                           
  7590                           ;flash.c: 56: __nop();
  7591  0679  0000               	nop
  7592                           
  7593                           ;flash.c: 58: PMCON1bits.WREN = 0;
  7594  067A  0031               	movlb	17	; select bank17
  7595  067B  1115               	bcf	21,2	;volsfr
  7596                           
  7597                           ;flash.c: 61: INTCONbits.GIE = 1;
  7598  067C  178B               	bsf	11,7	;volatile
  7599  067D  0008               	return
  7600  067E                     __end_ofi1_flashWriteByte:	
  7601                           
  7602                           	psect	text42
  7603  0FCA                     __ptext42:	
  7604 ;; *************** function ___wmul *****************
  7605 ;; Defined at:
  7606 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\Umul16.c"
  7607 ;; Parameters:    Size  Location     Type
  7608 ;;  multiplier      2    0[COMMON] unsigned int 
  7609 ;;  multiplicand    2    2[COMMON] unsigned int 
  7610 ;; Auto vars:     Size  Location     Type
  7611 ;;  product         2    4[COMMON] unsigned int 
  7612 ;; Return value:  Size  Location     Type
  7613 ;;                  2    0[COMMON] unsigned int 
  7614 ;; Registers used:
  7615 ;;		wreg, status,2, status,0
  7616 ;; Tracked objects:
  7617 ;;		On entry : 0/0
  7618 ;;		On exit  : 0/0
  7619 ;;		Unchanged: 0/0
  7620 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7621 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7622 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7623 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7624 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7625 ;;Total ram usage:        6 bytes
  7626 ;; Hardware stack levels used:    1
  7627 ;; This function calls:
  7628 ;;		Nothing
  7629 ;; This function is called by:
  7630 ;;		_exception
  7631 ;; This function uses a non-reentrant model
  7632 ;;
  7633                           
  7634                           
  7635                           ;psect for function ___wmul
  7636  0FCA                     ___wmul:	
  7637                           
  7638                           ;incstack = 0
  7639                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  7640  0FCA  01F4               	clrf	___wmul@product
  7641  0FCB  01F5               	clrf	___wmul@product+1
  7642  0FCC                     i1l2049:	
  7643  0FCC  1C70               	btfss	___wmul@multiplier,0
  7644  0FCD  2FD2               	goto	i1l430
  7645  0FCE  0872               	movf	___wmul@multiplicand,w
  7646  0FCF  07F4               	addwf	___wmul@product,f
  7647  0FD0  0873               	movf	___wmul@multiplicand+1,w
  7648  0FD1  3DF5               	addwfc	___wmul@product+1,f
  7649  0FD2                     i1l430:	
  7650  0FD2  3001               	movlw	1
  7651  0FD3                     u95_25:	
  7652  0FD3  35F2               	lslf	___wmul@multiplicand,f
  7653  0FD4  0DF3               	rlf	___wmul@multiplicand+1,f
  7654  0FD5  0B89               	decfsz	9,f
  7655  0FD6  2FD3               	goto	u95_25
  7656  0FD7  3001               	movlw	1
  7657  0FD8                     u96_25:	
  7658  0FD8  36F1               	lsrf	___wmul@multiplier+1,f
  7659  0FD9  0CF0               	rrf	___wmul@multiplier,f
  7660  0FDA  0B89               	decfsz	9,f
  7661  0FDB  2FD8               	goto	u96_25
  7662  0FDC  0870               	movf	___wmul@multiplier,w
  7663  0FDD  0471               	iorwf	___wmul@multiplier+1,w
  7664  0FDE  1D03               	btfss	3,2
  7665  0FDF  2FCC               	goto	i1l2049
  7666  0FE0  0875               	movf	___wmul@product+1,w
  7667  0FE1  00F1               	movwf	?___wmul+1
  7668  0FE2  0874               	movf	___wmul@product,w
  7669  0FE3  00F0               	movwf	?___wmul
  7670  0FE4  0008               	return
  7671  0FE5                     __end_of___wmul:	
  7672  007E                     btemp	set	126	;btemp
  7673  007E                     int$flags	set	126
  7674  007E                     wtemp0	set	126


Data Sizes:
    Strings     34
    Constant    25
    Data        0
    BSS         91
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     57      79
    BANK1            80     66      70
    BANK2            80      0      65
    BANK3            80      0       0
    BANK4            80      0       0
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    strlen@s	PTR const unsigned char  size(1) Largest target is 33
		 -> packet.Message(BANK0[32]), packet.Message(BANK0[32]), NULL(NULL[0]), main@packet(BANK1[33]), 
		 -> loop@packet(BANK1[33]), 

    strlen@cp	PTR const unsigned char  size(1) Largest target is 33
		 -> packet.Message(BANK0[32]), packet.Message(BANK0[32]), NULL(NULL[0]), main@packet(BANK1[33]), 
		 -> loop@packet(BANK1[33]), 

    strcpy@from	PTR const unsigned char  size(2) Largest target is 4
		 -> STR_8(CODE[4]), 

    strcpy@to	PTR unsigned char  size(1) Largest target is 19
		 -> romData(BANK0[19]), 

    strcpy@cp	PTR unsigned char  size(1) Largest target is 19
		 -> romData(BANK0[19]), 

    strcmp@s2	PTR const unsigned char  size(1) Largest target is 33
		 -> RXPacket.Message(BANK2[32]), RXPacket(BANK2[33]), 

    strcmp@s1	PTR const unsigned char  size(1) Largest target is 33
		 -> packet.Message(BANK0[32]), packet.Message(BANK0[32]), NULL(NULL[0]), main@packet(BANK1[33]), 
		 -> loop@packet(BANK1[33]), 

    strcat@from	PTR const unsigned char  size(2) Largest target is 19
		 -> STR_9(CODE[5]), STR_7(CODE[5]), STR_6(CODE[4]), STR_5(CODE[5]), 
		 -> STR_4(CODE[5]), STR_3(CODE[4]), STR_2(CODE[2]), setMessage@tempString(BANK0[16]), 
		 -> STR_1(CODE[2]), romData.name(BANK0[16]), romData(BANK0[19]), 

    strcat@to	PTR unsigned char  size(1) Largest target is 33
		 -> main@packet(BANK1[33]), loop@packet(BANK1[33]), 

    strcat@cp	PTR unsigned char  size(1) Largest target is 33
		 -> main@packet(BANK1[33]), loop@packet(BANK1[33]), 

    memset@p1	PTR void  size(2) Largest target is 33
		 -> RXPacket(BANK2[33]), main@packet(BANK1[33]), loop@packet(BANK1[33]), 

    memset@p	PTR unsigned char  size(2) Largest target is 33
		 -> RXPacket(BANK2[33]), main@packet(BANK1[33]), loop@packet(BANK1[33]), 

    ultoa@buf	PTR unsigned char  size(1) Largest target is 16
		 -> setMessage@tempString(BANK0[16]), 

    sp__ltoa	PTR unsigned char  size(1) Largest target is 0

    nrf24l01SendPacket@Packet	PTR struct . size(1) Largest target is 33
		 -> main@packet(BANK1[33]), loop@packet(BANK1[33]), 

    sp__nrf24l01GetRXPacket	PTR struct . size(1) Largest target is 33
		 -> RXPacket(BANK2[33]), 

    TXPacket	PTR struct . size(1) Largest target is 33
		 -> NULL(NULL[0]), main@packet(BANK1[33]), loop@packet(BANK1[33]), 

    sp__strcpy	PTR unsigned char  size(1) Largest target is 19
		 -> romData(BANK0[19]), 

    sp__ultoa	PTR unsigned char  size(1) Largest target is 16
		 -> setMessage@tempString(BANK0[16]), 

    setMessage@topic	PTR const unsigned char  size(2) Largest target is 5
		 -> STR_9(CODE[5]), STR_7(CODE[5]), STR_6(CODE[4]), STR_5(CODE[5]), 
		 -> STR_4(CODE[5]), STR_3(CODE[4]), 

    sp__strcat	PTR unsigned char  size(1) Largest target is 33
		 -> main@packet(BANK1[33]), loop@packet(BANK1[33]), 

    sp__memset	PTR void  size(2) Largest target is 33
		 -> RXPacket(BANK2[33]), main@packet(BANK1[33]), loop@packet(BANK1[33]), 

    setMessage@packet	PTR struct . size(1) Largest target is 33
		 -> main@packet(BANK1[33]), loop@packet(BANK1[33]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    _ISR->_nrf24l01ISR
    _nrf24l01ISR->_exception
    _nrf24l01ReceivePacket->i1_memset
    _nrf24l01CheckACK->i1_nrf24l01SetRXMode
    i1_nrf24l01SetRXMode->i1_nrf24l01Send
    _exception->i1_flashUpdate
    i1_flashUpdate->i1_flashWriteByte

Critical Paths under _main in BANK0

    _main->_loop
    _nrf24l01Init->_nrf24l01InitRegisters
    _nrf24l01InitRegisters->_nrf24l01Send
    _loop->_setMessage
    _setMessage->_getADCValue
    _ultoa->___lldiv
    _nrf24l01SendPacket->_strlen
    _nrf24l01SetRXMode->_nrf24l01Send
    _getADCValue->___lldiv
    _flashUpdate->_flashWriteByte
    _flashRealod->_flashReadByte

Critical Paths under _ISR in BANK0

    _ISR->_nrf24l01ISR

Critical Paths under _main in BANK1

    _main->_loop

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                34    34      0   19670
                                             56 BANK0      1     1      0
                                             33 BANK1     33    33      0
                        _flashRealod
                        _flashUpdate
                               _loop
                       _nrf24l01Init
                 _nrf24l01SendPacket
                         _setMessage
                              _sleep
                             _strcpy
 ---------------------------------------------------------------------------------
 (1) _strcpy                                               5     3      2     200
                                              1 BANK0      5     3      2
 ---------------------------------------------------------------------------------
 (1) _nrf24l01Init                                         3     3      0    2094
                                             14 BANK0      3     3      0
                     _nrf24l01CEHigh
                      _nrf24l01CELow
              _nrf24l01InitRegisters
              _nrf24l01InterfaceInit
 ---------------------------------------------------------------------------------
 (2) _nrf24l01InterfaceInit                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _nrf24l01InitRegisters                               11    11      0    2072
                                              4 BANK0     10    10      0
                       _nrf24l01Send
 ---------------------------------------------------------------------------------
 (1) _loop                                                37    37      0    9207
                                             52 BANK0      4     4      0
                                              0 BANK1     33    33      0
                        _getADCValue
                 _nrf24l01SendPacket
                         _setMessage
                              _sleep
 ---------------------------------------------------------------------------------
 (1) _sleep                                                0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _setMessage                                          23    17      6    4831
                                             29 BANK0     23    17      6
                        _getADCValue (ARG)
                             _memset
                             _strcat
                              _ultoa
 ---------------------------------------------------------------------------------
 (2) _ultoa                                               13     7      6    1736
                                             15 BANK0     13     7      6
                            ___lldiv
                            ___llmod
 ---------------------------------------------------------------------------------
 (3) ___llmod                                             10     2      8     337
                                              1 BANK0     10     2      8
 ---------------------------------------------------------------------------------
 (2) _strcat                                               5     3      2     723
                                              1 BANK0      5     3      2
 ---------------------------------------------------------------------------------
 (2) _memset                                               8     2      6     565
                                              1 BANK0      8     2      6
 ---------------------------------------------------------------------------------
 (1) _nrf24l01SendPacket                                   4     4      0    2528
                                              9 BANK0      4     4      0
                   _enableInterrupts
                     _nrf24l01CEHigh
                      _nrf24l01CELow
                     _nrf24l01SPIEnd
                    _nrf24l01SPISend
                   _nrf24l01SPIStart
                  _nrf24l01SetRXMode
                             _strlen
 ---------------------------------------------------------------------------------
 (2) _strlen                                               8     6      2     126
                                              1 BANK0      8     6      2
 ---------------------------------------------------------------------------------
 (2) _nrf24l01SetRXMode                                    3     3      0    1947
                                              4 BANK0      3     3      0
                     _nrf24l01CEHigh
                      _nrf24l01CELow
                       _nrf24l01Send
 ---------------------------------------------------------------------------------
 (3) _nrf24l01Send                                         3     2      1    1813
                                              1 BANK0      3     2      1
                   _enableInterrupts
                     _nrf24l01SPIEnd
                    _nrf24l01SPISend
                   _nrf24l01SPIStart
 ---------------------------------------------------------------------------------
 (11) _nrf24l01SPIStart                                    0     0      0       0
                      _nrf24l01CSLow
 ---------------------------------------------------------------------------------
 (12) _nrf24l01CSLow                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (11) _nrf24l01SPISend                                     1     1      0      22
 ---------------------------------------------------------------------------------
 (11) _nrf24l01SPIEnd                                      0     0      0       0
                     _nrf24l01CSHigh
 ---------------------------------------------------------------------------------
 (12) _nrf24l01CSHigh                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (11) _enableInterrupts                                    1     1      0      22
 ---------------------------------------------------------------------------------
 (10) _nrf24l01CELow                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _nrf24l01CEHigh                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _getADCValue                                         14    10      4    1460
                                             15 BANK0     14    10      4
                            ___lldiv
                             ___lmul
 ---------------------------------------------------------------------------------
 (3) ___lmul                                              12     4      8     270
                                              1 BANK0     12     4      8
 ---------------------------------------------------------------------------------
 (3) ___lldiv                                             14     6      8     696
                                              1 BANK0     14     6      8
 ---------------------------------------------------------------------------------
 (1) _flashUpdate                                          4     4      0     423
                                              7 BANK0      4     4      0
                     _flashWriteByte
 ---------------------------------------------------------------------------------
 (2) _flashWriteByte                                       6     2      4     333
                                              1 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (1) _flashRealod                                          3     3      0     271
                                             10 BANK0      3     3      0
                      _flashReadByte
 ---------------------------------------------------------------------------------
 (2) _flashReadByte                                        9     7      2     181
                                              1 BANK0      9     7      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 12
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _ISR                                                  0     0      0    2570
                        _nrf24l01ISR
 ---------------------------------------------------------------------------------
 (8) _nrf24l01ISR                                          2     2      0    2570
                                             13 COMMON     1     1      0
                                              0 BANK0      1     1      0
                          _exception
                   _nrf24l01CheckACK
              _nrf24l01ReceivePacket
                     i1_nrf24l01Send
                i1_nrf24l01SetRXMode
 ---------------------------------------------------------------------------------
 (9) _nrf24l01ReceivePacket                                3     3      0     613
                                              8 COMMON     3     3      0
                     _nrf24l01CEHigh
                      _nrf24l01CELow
                     _nrf24l01SPIEnd
                    _nrf24l01SPISend
                   _nrf24l01SPIStart
                           i1_memset
                     i1_nrf24l01Send
 ---------------------------------------------------------------------------------
 (10) i1_memset                                            8     2      6     211
                                              0 COMMON     8     2      6
 ---------------------------------------------------------------------------------
 (9) _nrf24l01CheckACK                                     1     1      0     591
                                              7 COMMON     1     1      0
                             _strcmp
                i1_nrf24l01SetRXMode
 ---------------------------------------------------------------------------------
 (9) i1_nrf24l01SetRXMode                                  3     3      0     375
                                              4 COMMON     3     3      0
                     _nrf24l01CEHigh
                      _nrf24l01CELow
                     i1_nrf24l01Send
 ---------------------------------------------------------------------------------
 (10) i1_nrf24l01Send                                      3     2      1     241
                                              1 COMMON     3     2      1
                   _enableInterrupts
                     _nrf24l01SPIEnd
                    _nrf24l01SPISend
                   _nrf24l01SPIStart
 ---------------------------------------------------------------------------------
 (11) _nrf24l01SPIStart                                    0     0      0       0
                      _nrf24l01CSLow
 ---------------------------------------------------------------------------------
 (12) _nrf24l01CSLow                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (11) _nrf24l01SPISend                                     1     1      0      22
 ---------------------------------------------------------------------------------
 (11) _nrf24l01SPIEnd                                      0     0      0       0
                     _nrf24l01CSHigh
 ---------------------------------------------------------------------------------
 (12) _nrf24l01CSHigh                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (11) _enableInterrupts                                    1     1      0      22
 ---------------------------------------------------------------------------------
 (10) _nrf24l01CELow                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _nrf24l01CEHigh                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _strcmp                                              5     3      2     216
                                              0 COMMON     5     3      2
 ---------------------------------------------------------------------------------
 (9) _exception                                            3     3      0     589
                                             10 COMMON     3     3      0
                             ___wmul
                      i1_flashUpdate
 ---------------------------------------------------------------------------------
 (10) i1_flashUpdate                                       4     4      0     297
                                              6 COMMON     4     4      0
                   i1_flashWriteByte
 ---------------------------------------------------------------------------------
 (11) i1_flashWriteByte                                    6     2      4     207
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (10) ___wmul                                              6     2      4     270
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 12
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _flashRealod
     _flashReadByte
   _flashUpdate
     _flashWriteByte
   _loop
     _getADCValue
       ___lldiv
       ___lmul
     _nrf24l01SendPacket
       _enableInterrupts
       _nrf24l01CEHigh
       _nrf24l01CELow
       _nrf24l01SPIEnd
         _nrf24l01CSHigh
       _nrf24l01SPISend
       _nrf24l01SPIStart
         _nrf24l01CSLow
       _nrf24l01SetRXMode
         _nrf24l01CEHigh
         _nrf24l01CELow
         _nrf24l01Send
           _enableInterrupts
           _nrf24l01SPIEnd
             _nrf24l01CSHigh
           _nrf24l01SPISend
           _nrf24l01SPIStart
             _nrf24l01CSLow
       _strlen
     _setMessage
       _getADCValue (ARG)
         ___lldiv
         ___lmul
       _memset (ARG)
       _strcat (ARG)
       _ultoa (ARG)
         ___lldiv
         ___llmod
     _sleep
   _nrf24l01Init
     _nrf24l01CEHigh
     _nrf24l01CELow
     _nrf24l01InitRegisters
       _nrf24l01Send
         _enableInterrupts
         _nrf24l01SPIEnd
           _nrf24l01CSHigh
         _nrf24l01SPISend
         _nrf24l01SPIStart
           _nrf24l01CSLow
     _nrf24l01InterfaceInit
   _nrf24l01SendPacket
     _enableInterrupts
     _nrf24l01CEHigh
     _nrf24l01CELow
     _nrf24l01SPIEnd
       _nrf24l01CSHigh
     _nrf24l01SPISend
     _nrf24l01SPIStart
       _nrf24l01CSLow
     _nrf24l01SetRXMode
       _nrf24l01CEHigh
       _nrf24l01CELow
       _nrf24l01Send
         _enableInterrupts
         _nrf24l01SPIEnd
           _nrf24l01CSHigh
         _nrf24l01SPISend
         _nrf24l01SPIStart
           _nrf24l01CSLow
     _strlen
   _setMessage
     _getADCValue (ARG)
       ___lldiv
       ___lmul
     _memset (ARG)
     _strcat (ARG)
     _ultoa (ARG)
       ___lldiv
       ___llmod
   _sleep
   _strcpy

 _ISR (ROOT)
   _nrf24l01ISR
     _exception
       ___wmul
       i1_flashUpdate
         i1_flashWriteByte
     _nrf24l01CheckACK
       _strcmp
       i1_nrf24l01SetRXMode
         _nrf24l01CEHigh
         _nrf24l01CELow
         i1_nrf24l01Send
           _enableInterrupts
           _nrf24l01SPIEnd
             _nrf24l01CSHigh
           _nrf24l01SPISend
           _nrf24l01SPIStart
             _nrf24l01CSLow
     _nrf24l01ReceivePacket
       _nrf24l01CEHigh
       _nrf24l01CELow
       _nrf24l01SPIEnd
         _nrf24l01CSHigh
       _nrf24l01SPISend
       _nrf24l01SPIStart
         _nrf24l01CSLow
       i1_memset
       i1_nrf24l01Send
         _enableInterrupts
         _nrf24l01SPIEnd
           _nrf24l01CSHigh
         _nrf24l01SPISend
         _nrf24l01SPIStart
           _nrf24l01CSLow
     i1_nrf24l01Send
       _enableInterrupts
       _nrf24l01SPIEnd
         _nrf24l01CSHigh
       _nrf24l01SPISend
       _nrf24l01SPIStart
         _nrf24l01CSLow
     i1_nrf24l01SetRXMode
       _nrf24l01CEHigh
       _nrf24l01CELow
       i1_nrf24l01Send
         _enableInterrupts
         _nrf24l01SPIEnd
           _nrf24l01CSHigh
         _nrf24l01SPISend
         _nrf24l01SPIStart
           _nrf24l01CSLow

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      E       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     39      4F       5       98.8%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50     42      46       7       87.5%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0      41       9       81.3%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0       0      11        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0      E4      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0      E4      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V2.00 build -1524193055 
Symbol Table                                                                                   Fri Jul 13 21:43:31 2018

            flashReadByte@result 0026                     flashRealod@i 002B                      __CFG_CP$OFF 0000  
            ___wmul@multiplicand 0072              nrf24l01Send@command 0023  nrf24l01InitRegisters@isReciever 0070  
                    __CFG_LVP$ON 0000                              l311 01BD                              l215 0F6F  
                            l208 036E                              l307 01AD                              l848 0335  
                   flashUpdate@i 0029                     __CFG_CPD$OFF 0000                              _ISR 0004  
                            u715 0439                              u805 04EA                              u735 0445  
                            u815 04F5                              u745 0459                              u755 0465  
                            u785 04D1                              u995 0632                              wreg 0009  
            nrf24l01SendPacket@i 002C                             ?_ISR 0070                   ??_nrf24l01Init 002E  
                           l2041 06FA                             l2009 02F7                             l2043 0705  
                           l2063 0627                             l2223 0373                             l2303 0223  
                           l2225 0367                             l2067 0631                             l2227 0391  
                           l2271 01D8                             l2263 01B1                             l2275 01E8  
                           l2293 0213                             l2295 021F                             l2279 01FD  
                           l2561 07DF                   ??_nrf24l01Send 0022                             l1861 046F  
                           l1847 0436                             l1871 04CE                             l1857 0464  
                           l1849 0444                             l1873 04DC                             l1881 04FF  
                           l2691 0FB6                             l1877 04F4                             l1975 0578  
                           l1991 06B9                             l2919 02BC                             l2855 0272  
                           l1995 06C1                             l1989 06AE                             l1999 02CA  
                           STR_1 1038                     __CFG_WDTE$ON 0000                             STR_2 1038  
                           STR_3 1030                             STR_4 1022                             STR_5 1018  
                           STR_6 1034                             STR_7 101D                             STR_8 102C  
                           STR_9 1027                             u1005 0639                             u1135 01F7  
                           u1507 068C                             u1517 069E                             u1527 01B9  
                           u1537 0204                             u1547 021B                             u1557 0231  
                           u1567 0558                             u1577 056A                             u1497 0253  
                           u1587 0575                             u1597 0364                             i1l94 0F68  
                           _WPUA 020C                             _WPUC 020E   __size_of_nrf24l01InterfaceInit 001C  
                   __CFG_WRT$OFF 0000                    __CFG_FCMEN$ON 0000    __end_of_nrf24l01InterfaceInit 07D9  
                           _main 0237                             _loop 0029                  ??_flashReadByte 0023  
                           fsr0h 0005                             fsr1h 0007                             indf0 0000  
                           fsr0l 0004                             indf1 0001                             fsr1l 0006  
                           btemp 007E   __size_of_nrf24l01ReceivePacket 004D                    __CFG_BORV$LOW 0000  
  __end_of_nrf24l01ReceivePacket 04C5                             start 000F                    __CFG_CSWEN$ON 0000  
                  __CFG_MCLRE$ON 0000      __size_of_nrf24l01SendPacket 0090                            ??_ISR 007E  
           __size_of_getADCValue 0088                  ??_nrf24l01CELow 0070                  ??_nrf24l01CSLow 0070  
                          ?_main 0070                            ?_loop 0070                  __end_of___lldiv 0478  
                __end_of___llmod 0508                   __CFG_DEBUG$OFF 0000                            i1l203 000D  
                          i1l430 0FD2                            i1l334 05E2           enableInterrupts@enable 0070  
                          u95_25 0FD3                            u96_25 0FD8                 i1_flashWriteByte 064E  
                     i1memset@p1 0070                   i1flashUpdate@i 0078              ___lmul@multiplicand 0025  
                  __CFG_PWRTE$ON 0000                            _sleep 0F6F                            _ultoa 02C0  
                 __CFG_BOREN$OFF 0000                 _enableInterrupts 0F5A                            status 0003  
                          wtemp0 007E      __end_ofi1_nrf24l01SetRXMode 05B6                 __end_ofi1_memset 0FB1  
              getADCValue@adcSum 0039                 _nrf24l01SPIStart 07F4                  __initialization 0011  
               _nrf24l01CheckACK 079D                     __end_of_main 02C0                     __end_of_loop 00FD  
               ??_nrf24l01CEHigh 0070                           ??_main 0058                           ??_loop 0054  
               ??_nrf24l01CSHigh 0070                 ??_nrf24l01SPIEnd 0070           __size_ofi1_flashUpdate 0021  
       __size_of_nrf24l01SPISend 000D                 ___llmod@dividend 0025                           _ADRESH 009C  
                         _ADRESL 009B                           ?_sleep 0070                           _ANSELA 018C  
                         _ANSELC 018E                           ?_ultoa 002F                 ??_flashWriteByte 0025  
                         i1l2033 06EE                           i1l2025 06D0                           i1l2107 05AF  
                         i1l2029 06D8                           i1l2049 0FCC                           _ODCONA 028C  
                         _ODCONC 028E                           i1l1811 0F6D                           i1l2731 04A7  
                         i1l2735 04B7                           i1l2751 05C6                           i1l2739 04BF  
                         i1l2759 05D5                           i1l2769 05E3                           i1l2699 0F9D  
                         _INLVLA 038C                           _INLVLC 038E                           u160_27 0591  
                         u161_27 05A2                           u162_27 05AC                           u163_27 07F8  
                         u164_27 0F54                           _PMADRH 0892                           _PMADRL 0891  
                         _PMDATH 0894                           _PMDATL 0893                           _PMCON1 0895  
                         _PMCON2 0896             __size_of_flashRealod 0020               flashWriteByte@data 0023  
           __size_of_flashUpdate 0023             __size_of_nrf24l01ISR 0036          nrf24l01SetRXMode@config 0025  
                         ___lmul 061E          nrf24l01SetRXMode@rxMode 0026                           ___wmul 0FCA  
                 __CFG_STVREN$ON 0000                        ??___lldiv 0029                        ??___llmod 0029  
           __end_of_nrf24l01Init 06A8             __end_of_nrf24l01Send 077D                           _memset 0FB1  
          _nrf24l01InitRegisters 00FD                           _strcat 06A8                           _strcmp 06CE  
                         _strcpy 07D9                           _strlen 06F4        i1nrf24l01SetRXMode@config 0075  
               __end_of_romArray 2000        i1nrf24l01SetRXMode@rxMode 0076                           ultoa@c 003A  
                         ultoa@v 0036               getADCValue@adcLoop 0038          __end_of__initialization 0025  
       nrf24l01SendPacket@Packet 002B               getADCValue@channel 0037                    i1_flashUpdate 073C  
             getADCValue@divider 002F                   __pcstackCOMMON 0070                    __end_of_sleep 0F81  
                  __end_of_ultoa 0349    nrf24l01InitRegisters@enRXAddr 002A                        ?i1_memset 0070  
                        ??_sleep 0021                          ??_ultoa 0035                       __pbssBANK0 0059  
                     __pbssBANK1 00E2                       __pbssBANK2 0120                ??_nrf24l01SPISend 0070  
             __size_of_exception 0018                   ?i1_flashUpdate 0070          __size_ofi1_nrf24l01Send 001B  
       __end_ofi1_flashWriteByte 067E                       __pmaintext 0237                          ?___lmul 0021  
                        ?___wmul 0070                  __CFG_PPS1WAY$ON 0000                _nrf24l01SetRXMode 0544  
         ?_nrf24l01InitRegisters 0070                       __pintentry 0004              nrf24l01SPISend@data 0070  
                        ?_memset 0021                   ___lmul@product 0029               ?_nrf24l01SetRXMode 0070  
       __end_of_enableInterrupts 0F62              __CFG_RSTOSC$HFINT32 0000                          ?_strcat 0021  
                        ?_strcmp 0070                          ?_strcpy 0021                          ?_strlen 0021  
          __end_of_n_ADDRESS_MUL 103B                       ??i1_memset 0076              ??_nrf24l01SetRXMode 0024  
       __end_of_nrf24l01SPIStart 07FC                          _SSP1BUF 0211         __end_of_nrf24l01CheckACK 07BD  
          _nrf24l01InterfaceInit 07BD            __end_of_flashReadByte 061E                 __p_romArray_text 1FE0  
     __end_of_nrf24l01SendPacket 0237                    ??_getADCValue 0033            __size_of_nrf24l01Init 002A  
          __size_of_nrf24l01Send 0020        __end_of_nrf24l01SetRXMode 057F            _nrf24l01ReceivePacket 0478  
                __size_of___lmul 0030                          ___lldiv 0425                  __size_of___wmul 001B  
                        ___llmod 04C5            __end_of_nrf24l01CELow 0F4A                  __size_of_memset 0019  
          __end_of_nrf24l01CSLow 07FF                          __ptext1 07D9                          __ptext2 067E  
                        __ptext3 07BD                          __ptext4 00FD                          __ptext5 0029  
                        __ptext6 0F6F                          __ptext7 03D1                          __ptext8 02C0  
                        __ptext9 04C5                  __size_of_strcat 0026                  __size_of_strcmp 0026  
              __end_of_exception 0F99                  __size_of_strcpy 001B                  __size_of_strlen 0025  
                   __size_of_ISR 000B                          _counter 00E2          i1flashWriteByte@address 0074  
               _romArray_absaddr 1FE0                          _romData 005C                          clrloop0 0F4E  
           end_of_initialization 0025                     _nrf24l01Init 067E                       _setMessage 03D1  
                ??i1_flashUpdate 0076                     _nrf24l01Send 075D                          memset@c 0023  
                        memset@n 0025                          memset@p 0027                  ___lldiv@divisor 0021  
                ___lldiv@counter 002E                 setMessage@packet 0053     __size_ofi1_nrf24l01SetRXMode 0037  
                        strcmp@r 0073            i1nrf24l01Send@command 0073                          strlen@s 0027  
            __end_of_getADCValue 03D1                        _PORTAbits 000C                        _PORTCbits 000E  
                      _TRISAbits 008C                        _TRISCbits 008E                 nrf24l01Send@data 0021  
               __CFG_FEXTOSC$OFF 0000                    ??_flashRealod 002A                    ??_flashUpdate 0027  
                  ??_nrf24l01ISR 007D           ?_nrf24l01InterfaceInit 0070                   i1_nrf24l01Send 0FE5  
                     main@packet 00C1           ?_nrf24l01ReceivePacket 0070       __size_of_nrf24l01SetRXMode 003B  
                 __end_of___lmul 064E                   __end_of___wmul 0FE5                        i1memset@c 0072  
                      i1memset@n 0074                        i1memset@p 0076                   __end_of_memset 0FCA  
                 __end_of_strcat 06CE                   __end_of_strcmp 06F4                   __end_of_strcpy 07F4  
                 __end_of_strlen 0719              start_initialization 0011                  _nrf24l01SPISend 0F62  
                    __end_of_ISR 000F            flashWriteByte@address 0025                __size_ofi1_memset 0018  
        __size_of_nrf24l01CEHigh 0003          __size_of_nrf24l01CSHigh 0003                      ?_setMessage 003D  
         __end_ofi1_nrf24l01Send 1000          __size_of_nrf24l01SPIEnd 0007                  ___llmod@divisor 0021  
                ___llmod@counter 002A          ??_nrf24l01InitRegisters 0024                 __CFG_LPBOREN$OFF 0000  
              ?i1_flashWriteByte 0070              __end_of_flashRealod 079D                      _getADCValue 0349  
        __size_of_flashWriteByte 003C              __end_of_flashUpdate 073C                         ??___lmul 0029  
            __end_of_nrf24l01ISR 05EC             setMessage@tempString 0043                         ??___wmul 0074  
             ??i1_flashWriteByte 0074             __end_of_resetRomData 1013                         ??_memset 0027  
              ?_enableInterrupts 0070                         ??_strcat 0023                         ??_strcmp 0072  
                       ??_strcpy 0023                         ??_strlen 0023               ??_enableInterrupts 0070  
                      ___latbits 0002                    __pcstackBANK0 0020                    __pcstackBANK1 00A0  
              ?_nrf24l01SPIStart 0070                ?_nrf24l01CheckACK 0070               ??_nrf24l01SPIStart 0070  
             ??_nrf24l01CheckACK 0077                  ?i1_nrf24l01Send 0071                       loop@packet 00A0  
                       ?___lldiv 0021                         ?___llmod 0021             __end_of_n_ADDRESS_P0 1018  
        __end_of_nrf24l01SPISend 0F6F               i1nrf24l01Send@data 0071        nrf24l01InitRegisters@enAA 002B  
            __size_of_setMessage 0054               _nrf24l01SendPacket 01A7                        _exception 0F81  
            ?_nrf24l01SendPacket 0070              i1_nrf24l01SetRXMode 057F                   __size_of_sleep 0012  
                 __size_of_ultoa 0089                      _flashRealod 077D                   ___wmul@product 0074  
         i1flashWriteByte@offset 0070                      _flashUpdate 0719                      _nrf24l01ISR 05B6  
                      clear_ram0 0F4D                         _PIE0bits 0090                         _PIR0bits 0010  
                      _romHolder 0120                        _sleepLoop 005A             ??_nrf24l01SendPacket 0029  
                setMessage@value 003F                  setMessage@topic 003D             ?i1_nrf24l01SetRXMode 0070  
                     _ADCON0bits 009D                       _ADCON1bits 009E                ___wmul@multiplier 0070  
                       _WPUAbits 020C                         i1_memset 0F99                         _RXPacket 0140  
         __size_of_flashReadByte 0032                         _TXPacket 0059                       ?_exception 0070  
                 _nrf24l01CEHigh 0F44                ___lmul@multiplier 0021          ??_nrf24l01InterfaceInit 0021  
                 _nrf24l01CSHigh 0F4A                nrf24l01ISR@status 0020                   _nrf24l01SPIEnd 0F53  
        ??_nrf24l01ReceivePacket 0078           __size_of_nrf24l01CELow 0003            __end_ofi1_flashUpdate 075D  
         __size_of_nrf24l01CSLow 0003             flashWriteByte@offset 0021                   _flashWriteByte 0508  
          ??i1_nrf24l01SetRXMode 0074                 __size_of___lldiv 0053                 __size_of___llmod 0043  
               ?_nrf24l01SPISend 0070                       _ANSELAbits 018C                       _ANSELCbits 018E  
                  _n_ADDRESS_MUL 103A                       strcat@from 0021           __end_of_nrf24l01CEHigh 0F47  
         __end_of_nrf24l01CSHigh 0F4D                         __ptext10 06A8                         __ptext11 0FB1  
                       __ptext20 0508                         __ptext12 01A7                         __ptext21 077D  
                       __ptext13 06F4                         __ptext30 07F4                         __ptext22 05EC  
                       __ptext14 0544                         __ptext31 07FC                         __ptext15 075D  
                       __ptext40 073C                         __ptext32 0F62                         __ptext24 05B6  
                       __ptext16 0349                         __ptext41 064E                         __ptext33 0F53  
                       __ptext25 0478                         __ptext17 061E                         __ptext42 0FCA  
                       __ptext34 0F4A                         __ptext26 0F99                         __ptext18 0425  
                       __ptext35 0F5A                         __ptext27 079D                         __ptext19 0719  
                       __ptext36 0F47                         __ptext28 057F                         __ptext37 0F44  
                       __ptext29 0FE5                         __ptext38 06CE                         __ptext39 0F81  
                   _SSP1CON1bits 0215           __end_of_nrf24l01SPIEnd 0F5A                         _nrf24l01 005B  
                   _resetRomData 1000           nrf24l01Init@isReciever 0030                      _OSCCON1bits 0919  
                   ??_setMessage 0043                       strcpy@from 0021                    __size_of_main 0089  
                  __size_of_loop 00D4     nrf24l01InitRegisters@channel 0025           __end_of_flashWriteByte 0544  
   nrf24l01InitRegisters@feature 0027               exception@exception 007C                       _RC0PPSbits 0EA0  
                       _romArray 1FE0                    _flashReadByte 05EC     nrf24l01InitRegisters@rfSetup 0028  
                     _RC1PPSbits 0EA1                     ?_getADCValue 002F                       _RC2PPSbits 0EA2  
 __size_of_nrf24l01InitRegisters 00AA    __end_of_nrf24l01InitRegisters 01A7                         int$flags 007E  
   nrf24l01InitRegisters@setupAW 0026                     _SSP1STATbits 0214           nrf24l01ReceivePacket@i 007A  
                  _nrf24l01CELow 0F47                    _nrf24l01CSLow 07FC               __end_of_setMessage 0425  
                     _INTCONbits 000B        __size_ofi1_flashWriteByte 0030                  ?_nrf24l01CEHigh 0070  
                     _FVRCONbits 0117                 ??i1_nrf24l01Send 0072                      ??_exception 007A  
                ?_nrf24l01CSHigh 0070                   __pstringtext10 1034                   __pstringtext11 1038  
                 __pstringtext12 0000                         memset@p1 0021                        ultoa@base 0033  
                ?_nrf24l01SPIEnd 0070                         intlevel1 0000                     _n_ADDRESS_P0 1013  
      __size_of_enableInterrupts 0008                       _PMCON1bits 0895                 ___lldiv@dividend 0025  
              __CFG_CLKOUTEN$OFF 0000                  ?_flashWriteByte 0021                   ?_flashReadByte 0021  
           i1flashWriteByte@data 0072      nrf24l01InitRegisters@config 002D        __size_of_nrf24l01SPIStart 0008  
      __size_of_nrf24l01CheckACK 0020      nrf24l01InitRegisters@status 0029       nrf24l01ReceivePacket@width 0079  
                 ?_nrf24l01CELow 0070                    __pstringtext1 1000                    __pstringtext2 1013  
                  __pstringtext3 103A                    __pstringtext4 1018                    __pstringtext5 101D  
                  __pstringtext6 1022                    __pstringtext7 1027                    __pstringtext8 102C  
                  __pstringtext9 1030                   ?_nrf24l01CSLow 0070                         ultoa@buf 003B  
                       ultoa@val 002F       nrf24l01InitRegisters@DynPD 002C                         strcat@cp 0024  
                       strcat@to 0025                         strcmp@s1 0074                         strcmp@s2 0070  
               ___lldiv@quotient 002A                         strcpy@cp 0025                         strlen@cp 0028  
                       strcpy@to 0024                       _WDTCONbits 0097                    ?_nrf24l01Init 0070  
                  ?_nrf24l01Send 0021                     ?_flashRealod 0070                       _STATUSbits 0003  
           flashReadByte@address 0028                     ?_flashUpdate 0070                     ?_nrf24l01ISR 0070  
            flashReadByte@offset 0021  
