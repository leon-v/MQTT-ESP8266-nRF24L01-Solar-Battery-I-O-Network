

Microchip Technology PIC LITE Macro Assembler V2.00 build -1524193055 
                                                                                               Fri Jul 13 17:40:43 2018

Microchip Technology Omniscient Code Generator v2.00 (Free mode) build 20180527130849
     1                           	processor	16LF18325
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	stringtext1,global,class=STRCODE,delta=2
     5                           	psect	stringtext2,global,class=STRCODE,delta=2
     6                           	psect	stringtext3,global,class=STRCODE,delta=2
     7                           	psect	_romArray_text,global,class=STRCODE,delta=2
     8                           	psect	stringtext4,global,class=STRCODE,delta=2
     9                           	psect	stringtext5,global,class=STRCODE,delta=2
    10                           	psect	stringtext6,global,class=STRCODE,delta=2
    11                           	psect	stringtext7,global,class=STRCODE,delta=2
    12                           	psect	stringtext8,global,class=STRCODE,delta=2
    13                           	psect	stringtext9,global,class=STRCODE,delta=2
    14                           	psect	stringtext10,global,class=STRCODE,delta=2
    15                           	psect	stringtext11,global,class=STRCODE,delta=2
    16                           	psect	stringtext12,global,class=STRCODE,delta=2
    17                           	psect	cinit,global,class=CODE,merge=1,delta=2
    18                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    19                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    20                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    21                           	psect	clrtext,global,class=CODE,delta=2
    22                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    23                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    24                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    25                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    26                           	psect	text1,local,class=CODE,merge=1,delta=2,group=2
    27                           	psect	text2,local,class=CODE,merge=1,delta=2
    28                           	psect	text3,local,class=CODE,merge=1,delta=2
    29                           	psect	text4,local,class=CODE,merge=1,delta=2
    30                           	psect	text5,local,class=CODE,merge=1,delta=2
    31                           	psect	text6,local,class=CODE,merge=1,delta=2
    32                           	psect	text7,local,class=CODE,merge=1,delta=2
    33                           	psect	text8,local,class=CODE,merge=1,delta=2,group=2
    34                           	psect	text9,local,class=CODE,merge=1,delta=2,group=1
    35                           	psect	text10,local,class=CODE,merge=1,delta=2,group=2
    36                           	psect	text11,local,class=CODE,merge=1,delta=2,group=2
    37                           	psect	text12,local,class=CODE,merge=1,delta=2
    38                           	psect	text13,local,class=CODE,merge=1,delta=2,group=2
    39                           	psect	text14,local,class=CODE,merge=1,delta=2
    40                           	psect	text15,local,class=CODE,merge=1,delta=2
    41                           	psect	text16,local,class=CODE,merge=1,delta=2
    42                           	psect	text17,local,class=CODE,merge=1,delta=2,group=1
    43                           	psect	text18,local,class=CODE,merge=1,delta=2,group=1
    44                           	psect	text19,local,class=CODE,merge=1,delta=2
    45                           	psect	text20,local,class=CODE,merge=1,delta=2
    46                           	psect	text21,local,class=CODE,merge=1,delta=2
    47                           	psect	text22,local,class=CODE,merge=1,delta=2
    48                           	psect	intentry,global,class=CODE,delta=2
    49                           	psect	text24,local,class=CODE,merge=1,delta=2
    50                           	psect	text25,local,class=CODE,merge=1,delta=2
    51                           	psect	text26,local,class=CODE,merge=1,delta=2
    52                           	psect	text27,local,class=CODE,merge=1,delta=2
    53                           	psect	text28,local,class=CODE,merge=1,delta=2
    54                           	psect	text29,local,class=CODE,merge=1,delta=2
    55                           	psect	text30,local,class=CODE,merge=1,delta=2
    56                           	psect	text31,local,class=CODE,merge=1,delta=2
    57                           	psect	text32,local,class=CODE,merge=1,delta=2
    58                           	psect	text33,local,class=CODE,merge=1,delta=2
    59                           	psect	text34,local,class=CODE,merge=1,delta=2
    60                           	psect	text35,local,class=CODE,merge=1,delta=2
    61                           	psect	text36,local,class=CODE,merge=1,delta=2
    62                           	psect	text37,local,class=CODE,merge=1,delta=2
    63                           	psect	text38,local,class=CODE,merge=1,delta=2,group=2
    64                           	psect	text39,local,class=CODE,merge=1,delta=2
    65                           	psect	text40,local,class=CODE,merge=1,delta=2
    66                           	psect	text41,local,class=CODE,merge=1,delta=2
    67                           	psect	text42,local,class=CODE,merge=1,delta=2,group=1
    68                           	dabs	1,0x7E,2
    69  0000                     
    70                           ; Version 2.00
    71                           ; Generated 27/05/2018 GMT
    72                           ; 
    73                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
    74                           ; All rights reserved.
    75                           ; 
    76                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    77                           ; 
    78                           ; Redistribution and use in source and binary forms, with or without modification, are
    79                           ; permitted provided that the following conditions are met:
    80                           ; 
    81                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    82                           ;        conditions and the following disclaimer.
    83                           ; 
    84                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    85                           ;        of conditions and the following disclaimer in the documentation and/or other
    86                           ;        materials provided with the distribution.
    87                           ; 
    88                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    89                           ;        software without specific prior written permission.
    90                           ; 
    91                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    92                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    93                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    94                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    95                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    96                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    97                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    98                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    99                           ; 
   100                           ; 
   101                           ; Code-generator required, PIC16LF18325 Definitions
   102                           ; 
   103                           ; SFR Addresses
   104  0000                     	;# 
   105  0001                     	;# 
   106  0002                     	;# 
   107  0003                     	;# 
   108  0004                     	;# 
   109  0005                     	;# 
   110  0006                     	;# 
   111  0007                     	;# 
   112  0008                     	;# 
   113  0009                     	;# 
   114  000A                     	;# 
   115  000B                     	;# 
   116  000C                     	;# 
   117  000E                     	;# 
   118  0010                     	;# 
   119  0011                     	;# 
   120  0012                     	;# 
   121  0013                     	;# 
   122  0014                     	;# 
   123  0015                     	;# 
   124  0015                     	;# 
   125  0016                     	;# 
   126  0016                     	;# 
   127  0017                     	;# 
   128  0018                     	;# 
   129  0019                     	;# 
   130  0019                     	;# 
   131  001A                     	;# 
   132  001B                     	;# 
   133  001C                     	;# 
   134  001D                     	;# 
   135  001E                     	;# 
   136  001F                     	;# 
   137  008C                     	;# 
   138  008E                     	;# 
   139  0090                     	;# 
   140  0091                     	;# 
   141  0092                     	;# 
   142  0093                     	;# 
   143  0094                     	;# 
   144  0097                     	;# 
   145  009B                     	;# 
   146  009B                     	;# 
   147  009C                     	;# 
   148  009D                     	;# 
   149  009E                     	;# 
   150  009F                     	;# 
   151  010C                     	;# 
   152  010E                     	;# 
   153  0111                     	;# 
   154  0112                     	;# 
   155  0113                     	;# 
   156  0114                     	;# 
   157  0115                     	;# 
   158  0116                     	;# 
   159  0117                     	;# 
   160  0118                     	;# 
   161  0119                     	;# 
   162  018C                     	;# 
   163  018E                     	;# 
   164  0199                     	;# 
   165  0199                     	;# 
   166  0199                     	;# 
   167  019A                     	;# 
   168  019A                     	;# 
   169  019A                     	;# 
   170  019B                     	;# 
   171  019B                     	;# 
   172  019B                     	;# 
   173  019B                     	;# 
   174  019B                     	;# 
   175  019C                     	;# 
   176  019C                     	;# 
   177  019C                     	;# 
   178  019D                     	;# 
   179  019D                     	;# 
   180  019D                     	;# 
   181  019E                     	;# 
   182  019E                     	;# 
   183  019E                     	;# 
   184  019F                     	;# 
   185  019F                     	;# 
   186  019F                     	;# 
   187  019F                     	;# 
   188  019F                     	;# 
   189  020C                     	;# 
   190  020E                     	;# 
   191  0211                     	;# 
   192  0211                     	;# 
   193  0212                     	;# 
   194  0212                     	;# 
   195  0213                     	;# 
   196  0213                     	;# 
   197  0214                     	;# 
   198  0214                     	;# 
   199  0215                     	;# 
   200  0215                     	;# 
   201  0215                     	;# 
   202  0215                     	;# 
   203  0216                     	;# 
   204  0216                     	;# 
   205  0217                     	;# 
   206  0217                     	;# 
   207  0219                     	;# 
   208  021A                     	;# 
   209  021B                     	;# 
   210  021C                     	;# 
   211  021D                     	;# 
   212  021D                     	;# 
   213  021E                     	;# 
   214  021F                     	;# 
   215  028C                     	;# 
   216  028E                     	;# 
   217  0291                     	;# 
   218  0291                     	;# 
   219  0292                     	;# 
   220  0293                     	;# 
   221  0294                     	;# 
   222  0295                     	;# 
   223  0295                     	;# 
   224  0296                     	;# 
   225  0297                     	;# 
   226  0298                     	;# 
   227  029F                     	;# 
   228  030C                     	;# 
   229  030E                     	;# 
   230  0311                     	;# 
   231  0311                     	;# 
   232  0312                     	;# 
   233  0313                     	;# 
   234  0314                     	;# 
   235  0315                     	;# 
   236  0315                     	;# 
   237  0316                     	;# 
   238  0317                     	;# 
   239  0318                     	;# 
   240  038C                     	;# 
   241  038E                     	;# 
   242  0391                     	;# 
   243  0392                     	;# 
   244  0393                     	;# 
   245  0397                     	;# 
   246  0398                     	;# 
   247  0399                     	;# 
   248  039A                     	;# 
   249  039C                     	;# 
   250  039D                     	;# 
   251  039E                     	;# 
   252  039F                     	;# 
   253  0411                     	;# 
   254  0411                     	;# 
   255  0412                     	;# 
   256  0413                     	;# 
   257  0414                     	;# 
   258  0415                     	;# 
   259  0416                     	;# 
   260  0417                     	;# 
   261  0418                     	;# 
   262  0418                     	;# 
   263  0419                     	;# 
   264  041A                     	;# 
   265  041B                     	;# 
   266  041C                     	;# 
   267  041D                     	;# 
   268  041E                     	;# 
   269  041F                     	;# 
   270  0498                     	;# 
   271  0498                     	;# 
   272  0499                     	;# 
   273  049A                     	;# 
   274  049B                     	;# 
   275  049B                     	;# 
   276  049C                     	;# 
   277  049D                     	;# 
   278  049E                     	;# 
   279  049F                     	;# 
   280  0617                     	;# 
   281  0618                     	;# 
   282  0619                     	;# 
   283  0619                     	;# 
   284  061A                     	;# 
   285  061B                     	;# 
   286  061C                     	;# 
   287  061C                     	;# 
   288  061F                     	;# 
   289  0691                     	;# 
   290  0692                     	;# 
   291  0693                     	;# 
   292  0694                     	;# 
   293  0695                     	;# 
   294  0696                     	;# 
   295  0697                     	;# 
   296  0698                     	;# 
   297  0699                     	;# 
   298  0711                     	;# 
   299  0712                     	;# 
   300  0713                     	;# 
   301  0714                     	;# 
   302  0715                     	;# 
   303  0716                     	;# 
   304  0717                     	;# 
   305  0718                     	;# 
   306  0719                     	;# 
   307  0891                     	;# 
   308  0891                     	;# 
   309  0891                     	;# 
   310  0891                     	;# 
   311  0891                     	;# 
   312  0891                     	;# 
   313  0892                     	;# 
   314  0892                     	;# 
   315  0892                     	;# 
   316  0893                     	;# 
   317  0893                     	;# 
   318  0893                     	;# 
   319  0893                     	;# 
   320  0893                     	;# 
   321  0893                     	;# 
   322  0894                     	;# 
   323  0894                     	;# 
   324  0894                     	;# 
   325  0895                     	;# 
   326  0895                     	;# 
   327  0895                     	;# 
   328  0896                     	;# 
   329  0896                     	;# 
   330  0896                     	;# 
   331  089B                     	;# 
   332  0911                     	;# 
   333  0912                     	;# 
   334  0913                     	;# 
   335  0914                     	;# 
   336  0915                     	;# 
   337  0916                     	;# 
   338  0918                     	;# 
   339  0919                     	;# 
   340  091A                     	;# 
   341  091B                     	;# 
   342  091C                     	;# 
   343  091D                     	;# 
   344  091E                     	;# 
   345  091F                     	;# 
   346  0E0F                     	;# 
   347  0E10                     	;# 
   348  0E11                     	;# 
   349  0E12                     	;# 
   350  0E13                     	;# 
   351  0E14                     	;# 
   352  0E15                     	;# 
   353  0E16                     	;# 
   354  0E17                     	;# 
   355  0E18                     	;# 
   356  0E19                     	;# 
   357  0E1A                     	;# 
   358  0E1B                     	;# 
   359  0E1C                     	;# 
   360  0E1D                     	;# 
   361  0E1E                     	;# 
   362  0E1F                     	;# 
   363  0E20                     	;# 
   364  0E21                     	;# 
   365  0E22                     	;# 
   366  0E24                     	;# 
   367  0E25                     	;# 
   368  0E28                     	;# 
   369  0E29                     	;# 
   370  0E2A                     	;# 
   371  0E2B                     	;# 
   372  0E2C                     	;# 
   373  0E2D                     	;# 
   374  0E2E                     	;# 
   375  0E2F                     	;# 
   376  0E90                     	;# 
   377  0E91                     	;# 
   378  0E92                     	;# 
   379  0E94                     	;# 
   380  0E95                     	;# 
   381  0EA0                     	;# 
   382  0EA1                     	;# 
   383  0EA2                     	;# 
   384  0EA3                     	;# 
   385  0EA4                     	;# 
   386  0EA5                     	;# 
   387  0F0F                     	;# 
   388  0F10                     	;# 
   389  0F11                     	;# 
   390  0F12                     	;# 
   391  0F13                     	;# 
   392  0F14                     	;# 
   393  0F15                     	;# 
   394  0F16                     	;# 
   395  0F17                     	;# 
   396  0F18                     	;# 
   397  0F19                     	;# 
   398  0F1A                     	;# 
   399  0F1B                     	;# 
   400  0F1C                     	;# 
   401  0F1D                     	;# 
   402  0F1E                     	;# 
   403  0F1F                     	;# 
   404  0F20                     	;# 
   405  0F21                     	;# 
   406  0F22                     	;# 
   407  0F23                     	;# 
   408  0F24                     	;# 
   409  0F25                     	;# 
   410  0F26                     	;# 
   411  0F27                     	;# 
   412  0F28                     	;# 
   413  0F29                     	;# 
   414  0F2A                     	;# 
   415  0F2B                     	;# 
   416  0F2C                     	;# 
   417  0F2D                     	;# 
   418  0F2E                     	;# 
   419  0F2F                     	;# 
   420  0F30                     	;# 
   421  0F31                     	;# 
   422  0F32                     	;# 
   423  0F33                     	;# 
   424  0F34                     	;# 
   425  0F35                     	;# 
   426  0F36                     	;# 
   427  0F37                     	;# 
   428  0FE4                     	;# 
   429  0FE5                     	;# 
   430  0FE6                     	;# 
   431  0FE7                     	;# 
   432  0FE8                     	;# 
   433  0FE9                     	;# 
   434  0FEA                     	;# 
   435  0FEB                     	;# 
   436  0FED                     	;# 
   437  0FEE                     	;# 
   438  0FEF                     	;# 
   439  0000                     	;# 
   440  0001                     	;# 
   441  0002                     	;# 
   442  0003                     	;# 
   443  0004                     	;# 
   444  0005                     	;# 
   445  0006                     	;# 
   446  0007                     	;# 
   447  0008                     	;# 
   448  0009                     	;# 
   449  000A                     	;# 
   450  000B                     	;# 
   451  000C                     	;# 
   452  000E                     	;# 
   453  0010                     	;# 
   454  0011                     	;# 
   455  0012                     	;# 
   456  0013                     	;# 
   457  0014                     	;# 
   458  0015                     	;# 
   459  0015                     	;# 
   460  0016                     	;# 
   461  0016                     	;# 
   462  0017                     	;# 
   463  0018                     	;# 
   464  0019                     	;# 
   465  0019                     	;# 
   466  001A                     	;# 
   467  001B                     	;# 
   468  001C                     	;# 
   469  001D                     	;# 
   470  001E                     	;# 
   471  001F                     	;# 
   472  008C                     	;# 
   473  008E                     	;# 
   474  0090                     	;# 
   475  0091                     	;# 
   476  0092                     	;# 
   477  0093                     	;# 
   478  0094                     	;# 
   479  0097                     	;# 
   480  009B                     	;# 
   481  009B                     	;# 
   482  009C                     	;# 
   483  009D                     	;# 
   484  009E                     	;# 
   485  009F                     	;# 
   486  010C                     	;# 
   487  010E                     	;# 
   488  0111                     	;# 
   489  0112                     	;# 
   490  0113                     	;# 
   491  0114                     	;# 
   492  0115                     	;# 
   493  0116                     	;# 
   494  0117                     	;# 
   495  0118                     	;# 
   496  0119                     	;# 
   497  018C                     	;# 
   498  018E                     	;# 
   499  0199                     	;# 
   500  0199                     	;# 
   501  0199                     	;# 
   502  019A                     	;# 
   503  019A                     	;# 
   504  019A                     	;# 
   505  019B                     	;# 
   506  019B                     	;# 
   507  019B                     	;# 
   508  019B                     	;# 
   509  019B                     	;# 
   510  019C                     	;# 
   511  019C                     	;# 
   512  019C                     	;# 
   513  019D                     	;# 
   514  019D                     	;# 
   515  019D                     	;# 
   516  019E                     	;# 
   517  019E                     	;# 
   518  019E                     	;# 
   519  019F                     	;# 
   520  019F                     	;# 
   521  019F                     	;# 
   522  019F                     	;# 
   523  019F                     	;# 
   524  020C                     	;# 
   525  020E                     	;# 
   526  0211                     	;# 
   527  0211                     	;# 
   528  0212                     	;# 
   529  0212                     	;# 
   530  0213                     	;# 
   531  0213                     	;# 
   532  0214                     	;# 
   533  0214                     	;# 
   534  0215                     	;# 
   535  0215                     	;# 
   536  0215                     	;# 
   537  0215                     	;# 
   538  0216                     	;# 
   539  0216                     	;# 
   540  0217                     	;# 
   541  0217                     	;# 
   542  0219                     	;# 
   543  021A                     	;# 
   544  021B                     	;# 
   545  021C                     	;# 
   546  021D                     	;# 
   547  021D                     	;# 
   548  021E                     	;# 
   549  021F                     	;# 
   550  028C                     	;# 
   551  028E                     	;# 
   552  0291                     	;# 
   553  0291                     	;# 
   554  0292                     	;# 
   555  0293                     	;# 
   556  0294                     	;# 
   557  0295                     	;# 
   558  0295                     	;# 
   559  0296                     	;# 
   560  0297                     	;# 
   561  0298                     	;# 
   562  029F                     	;# 
   563  030C                     	;# 
   564  030E                     	;# 
   565  0311                     	;# 
   566  0311                     	;# 
   567  0312                     	;# 
   568  0313                     	;# 
   569  0314                     	;# 
   570  0315                     	;# 
   571  0315                     	;# 
   572  0316                     	;# 
   573  0317                     	;# 
   574  0318                     	;# 
   575  038C                     	;# 
   576  038E                     	;# 
   577  0391                     	;# 
   578  0392                     	;# 
   579  0393                     	;# 
   580  0397                     	;# 
   581  0398                     	;# 
   582  0399                     	;# 
   583  039A                     	;# 
   584  039C                     	;# 
   585  039D                     	;# 
   586  039E                     	;# 
   587  039F                     	;# 
   588  0411                     	;# 
   589  0411                     	;# 
   590  0412                     	;# 
   591  0413                     	;# 
   592  0414                     	;# 
   593  0415                     	;# 
   594  0416                     	;# 
   595  0417                     	;# 
   596  0418                     	;# 
   597  0418                     	;# 
   598  0419                     	;# 
   599  041A                     	;# 
   600  041B                     	;# 
   601  041C                     	;# 
   602  041D                     	;# 
   603  041E                     	;# 
   604  041F                     	;# 
   605  0498                     	;# 
   606  0498                     	;# 
   607  0499                     	;# 
   608  049A                     	;# 
   609  049B                     	;# 
   610  049B                     	;# 
   611  049C                     	;# 
   612  049D                     	;# 
   613  049E                     	;# 
   614  049F                     	;# 
   615  0617                     	;# 
   616  0618                     	;# 
   617  0619                     	;# 
   618  0619                     	;# 
   619  061A                     	;# 
   620  061B                     	;# 
   621  061C                     	;# 
   622  061C                     	;# 
   623  061F                     	;# 
   624  0691                     	;# 
   625  0692                     	;# 
   626  0693                     	;# 
   627  0694                     	;# 
   628  0695                     	;# 
   629  0696                     	;# 
   630  0697                     	;# 
   631  0698                     	;# 
   632  0699                     	;# 
   633  0711                     	;# 
   634  0712                     	;# 
   635  0713                     	;# 
   636  0714                     	;# 
   637  0715                     	;# 
   638  0716                     	;# 
   639  0717                     	;# 
   640  0718                     	;# 
   641  0719                     	;# 
   642  0891                     	;# 
   643  0891                     	;# 
   644  0891                     	;# 
   645  0891                     	;# 
   646  0891                     	;# 
   647  0891                     	;# 
   648  0892                     	;# 
   649  0892                     	;# 
   650  0892                     	;# 
   651  0893                     	;# 
   652  0893                     	;# 
   653  0893                     	;# 
   654  0893                     	;# 
   655  0893                     	;# 
   656  0893                     	;# 
   657  0894                     	;# 
   658  0894                     	;# 
   659  0894                     	;# 
   660  0895                     	;# 
   661  0895                     	;# 
   662  0895                     	;# 
   663  0896                     	;# 
   664  0896                     	;# 
   665  0896                     	;# 
   666  089B                     	;# 
   667  0911                     	;# 
   668  0912                     	;# 
   669  0913                     	;# 
   670  0914                     	;# 
   671  0915                     	;# 
   672  0916                     	;# 
   673  0918                     	;# 
   674  0919                     	;# 
   675  091A                     	;# 
   676  091B                     	;# 
   677  091C                     	;# 
   678  091D                     	;# 
   679  091E                     	;# 
   680  091F                     	;# 
   681  0E0F                     	;# 
   682  0E10                     	;# 
   683  0E11                     	;# 
   684  0E12                     	;# 
   685  0E13                     	;# 
   686  0E14                     	;# 
   687  0E15                     	;# 
   688  0E16                     	;# 
   689  0E17                     	;# 
   690  0E18                     	;# 
   691  0E19                     	;# 
   692  0E1A                     	;# 
   693  0E1B                     	;# 
   694  0E1C                     	;# 
   695  0E1D                     	;# 
   696  0E1E                     	;# 
   697  0E1F                     	;# 
   698  0E20                     	;# 
   699  0E21                     	;# 
   700  0E22                     	;# 
   701  0E24                     	;# 
   702  0E25                     	;# 
   703  0E28                     	;# 
   704  0E29                     	;# 
   705  0E2A                     	;# 
   706  0E2B                     	;# 
   707  0E2C                     	;# 
   708  0E2D                     	;# 
   709  0E2E                     	;# 
   710  0E2F                     	;# 
   711  0E90                     	;# 
   712  0E91                     	;# 
   713  0E92                     	;# 
   714  0E94                     	;# 
   715  0E95                     	;# 
   716  0EA0                     	;# 
   717  0EA1                     	;# 
   718  0EA2                     	;# 
   719  0EA3                     	;# 
   720  0EA4                     	;# 
   721  0EA5                     	;# 
   722  0F0F                     	;# 
   723  0F10                     	;# 
   724  0F11                     	;# 
   725  0F12                     	;# 
   726  0F13                     	;# 
   727  0F14                     	;# 
   728  0F15                     	;# 
   729  0F16                     	;# 
   730  0F17                     	;# 
   731  0F18                     	;# 
   732  0F19                     	;# 
   733  0F1A                     	;# 
   734  0F1B                     	;# 
   735  0F1C                     	;# 
   736  0F1D                     	;# 
   737  0F1E                     	;# 
   738  0F1F                     	;# 
   739  0F20                     	;# 
   740  0F21                     	;# 
   741  0F22                     	;# 
   742  0F23                     	;# 
   743  0F24                     	;# 
   744  0F25                     	;# 
   745  0F26                     	;# 
   746  0F27                     	;# 
   747  0F28                     	;# 
   748  0F29                     	;# 
   749  0F2A                     	;# 
   750  0F2B                     	;# 
   751  0F2C                     	;# 
   752  0F2D                     	;# 
   753  0F2E                     	;# 
   754  0F2F                     	;# 
   755  0F30                     	;# 
   756  0F31                     	;# 
   757  0F32                     	;# 
   758  0F33                     	;# 
   759  0F34                     	;# 
   760  0F35                     	;# 
   761  0F36                     	;# 
   762  0F37                     	;# 
   763  0FE4                     	;# 
   764  0FE5                     	;# 
   765  0FE6                     	;# 
   766  0FE7                     	;# 
   767  0FE8                     	;# 
   768  0FE9                     	;# 
   769  0FEA                     	;# 
   770  0FEB                     	;# 
   771  0FED                     	;# 
   772  0FEE                     	;# 
   773  0FEF                     	;# 
   774  0000                     	;# 
   775  0001                     	;# 
   776  0002                     	;# 
   777  0003                     	;# 
   778  0004                     	;# 
   779  0005                     	;# 
   780  0006                     	;# 
   781  0007                     	;# 
   782  0008                     	;# 
   783  0009                     	;# 
   784  000A                     	;# 
   785  000B                     	;# 
   786  000C                     	;# 
   787  000E                     	;# 
   788  0010                     	;# 
   789  0011                     	;# 
   790  0012                     	;# 
   791  0013                     	;# 
   792  0014                     	;# 
   793  0015                     	;# 
   794  0015                     	;# 
   795  0016                     	;# 
   796  0016                     	;# 
   797  0017                     	;# 
   798  0018                     	;# 
   799  0019                     	;# 
   800  0019                     	;# 
   801  001A                     	;# 
   802  001B                     	;# 
   803  001C                     	;# 
   804  001D                     	;# 
   805  001E                     	;# 
   806  001F                     	;# 
   807  008C                     	;# 
   808  008E                     	;# 
   809  0090                     	;# 
   810  0091                     	;# 
   811  0092                     	;# 
   812  0093                     	;# 
   813  0094                     	;# 
   814  0097                     	;# 
   815  009B                     	;# 
   816  009B                     	;# 
   817  009C                     	;# 
   818  009D                     	;# 
   819  009E                     	;# 
   820  009F                     	;# 
   821  010C                     	;# 
   822  010E                     	;# 
   823  0111                     	;# 
   824  0112                     	;# 
   825  0113                     	;# 
   826  0114                     	;# 
   827  0115                     	;# 
   828  0116                     	;# 
   829  0117                     	;# 
   830  0118                     	;# 
   831  0119                     	;# 
   832  018C                     	;# 
   833  018E                     	;# 
   834  0199                     	;# 
   835  0199                     	;# 
   836  0199                     	;# 
   837  019A                     	;# 
   838  019A                     	;# 
   839  019A                     	;# 
   840  019B                     	;# 
   841  019B                     	;# 
   842  019B                     	;# 
   843  019B                     	;# 
   844  019B                     	;# 
   845  019C                     	;# 
   846  019C                     	;# 
   847  019C                     	;# 
   848  019D                     	;# 
   849  019D                     	;# 
   850  019D                     	;# 
   851  019E                     	;# 
   852  019E                     	;# 
   853  019E                     	;# 
   854  019F                     	;# 
   855  019F                     	;# 
   856  019F                     	;# 
   857  019F                     	;# 
   858  019F                     	;# 
   859  020C                     	;# 
   860  020E                     	;# 
   861  0211                     	;# 
   862  0211                     	;# 
   863  0212                     	;# 
   864  0212                     	;# 
   865  0213                     	;# 
   866  0213                     	;# 
   867  0214                     	;# 
   868  0214                     	;# 
   869  0215                     	;# 
   870  0215                     	;# 
   871  0215                     	;# 
   872  0215                     	;# 
   873  0216                     	;# 
   874  0216                     	;# 
   875  0217                     	;# 
   876  0217                     	;# 
   877  0219                     	;# 
   878  021A                     	;# 
   879  021B                     	;# 
   880  021C                     	;# 
   881  021D                     	;# 
   882  021D                     	;# 
   883  021E                     	;# 
   884  021F                     	;# 
   885  028C                     	;# 
   886  028E                     	;# 
   887  0291                     	;# 
   888  0291                     	;# 
   889  0292                     	;# 
   890  0293                     	;# 
   891  0294                     	;# 
   892  0295                     	;# 
   893  0295                     	;# 
   894  0296                     	;# 
   895  0297                     	;# 
   896  0298                     	;# 
   897  029F                     	;# 
   898  030C                     	;# 
   899  030E                     	;# 
   900  0311                     	;# 
   901  0311                     	;# 
   902  0312                     	;# 
   903  0313                     	;# 
   904  0314                     	;# 
   905  0315                     	;# 
   906  0315                     	;# 
   907  0316                     	;# 
   908  0317                     	;# 
   909  0318                     	;# 
   910  038C                     	;# 
   911  038E                     	;# 
   912  0391                     	;# 
   913  0392                     	;# 
   914  0393                     	;# 
   915  0397                     	;# 
   916  0398                     	;# 
   917  0399                     	;# 
   918  039A                     	;# 
   919  039C                     	;# 
   920  039D                     	;# 
   921  039E                     	;# 
   922  039F                     	;# 
   923  0411                     	;# 
   924  0411                     	;# 
   925  0412                     	;# 
   926  0413                     	;# 
   927  0414                     	;# 
   928  0415                     	;# 
   929  0416                     	;# 
   930  0417                     	;# 
   931  0418                     	;# 
   932  0418                     	;# 
   933  0419                     	;# 
   934  041A                     	;# 
   935  041B                     	;# 
   936  041C                     	;# 
   937  041D                     	;# 
   938  041E                     	;# 
   939  041F                     	;# 
   940  0498                     	;# 
   941  0498                     	;# 
   942  0499                     	;# 
   943  049A                     	;# 
   944  049B                     	;# 
   945  049B                     	;# 
   946  049C                     	;# 
   947  049D                     	;# 
   948  049E                     	;# 
   949  049F                     	;# 
   950  0617                     	;# 
   951  0618                     	;# 
   952  0619                     	;# 
   953  0619                     	;# 
   954  061A                     	;# 
   955  061B                     	;# 
   956  061C                     	;# 
   957  061C                     	;# 
   958  061F                     	;# 
   959  0691                     	;# 
   960  0692                     	;# 
   961  0693                     	;# 
   962  0694                     	;# 
   963  0695                     	;# 
   964  0696                     	;# 
   965  0697                     	;# 
   966  0698                     	;# 
   967  0699                     	;# 
   968  0711                     	;# 
   969  0712                     	;# 
   970  0713                     	;# 
   971  0714                     	;# 
   972  0715                     	;# 
   973  0716                     	;# 
   974  0717                     	;# 
   975  0718                     	;# 
   976  0719                     	;# 
   977  0891                     	;# 
   978  0891                     	;# 
   979  0891                     	;# 
   980  0891                     	;# 
   981  0891                     	;# 
   982  0891                     	;# 
   983  0892                     	;# 
   984  0892                     	;# 
   985  0892                     	;# 
   986  0893                     	;# 
   987  0893                     	;# 
   988  0893                     	;# 
   989  0893                     	;# 
   990  0893                     	;# 
   991  0893                     	;# 
   992  0894                     	;# 
   993  0894                     	;# 
   994  0894                     	;# 
   995  0895                     	;# 
   996  0895                     	;# 
   997  0895                     	;# 
   998  0896                     	;# 
   999  0896                     	;# 
  1000  0896                     	;# 
  1001  089B                     	;# 
  1002  0911                     	;# 
  1003  0912                     	;# 
  1004  0913                     	;# 
  1005  0914                     	;# 
  1006  0915                     	;# 
  1007  0916                     	;# 
  1008  0918                     	;# 
  1009  0919                     	;# 
  1010  091A                     	;# 
  1011  091B                     	;# 
  1012  091C                     	;# 
  1013  091D                     	;# 
  1014  091E                     	;# 
  1015  091F                     	;# 
  1016  0E0F                     	;# 
  1017  0E10                     	;# 
  1018  0E11                     	;# 
  1019  0E12                     	;# 
  1020  0E13                     	;# 
  1021  0E14                     	;# 
  1022  0E15                     	;# 
  1023  0E16                     	;# 
  1024  0E17                     	;# 
  1025  0E18                     	;# 
  1026  0E19                     	;# 
  1027  0E1A                     	;# 
  1028  0E1B                     	;# 
  1029  0E1C                     	;# 
  1030  0E1D                     	;# 
  1031  0E1E                     	;# 
  1032  0E1F                     	;# 
  1033  0E20                     	;# 
  1034  0E21                     	;# 
  1035  0E22                     	;# 
  1036  0E24                     	;# 
  1037  0E25                     	;# 
  1038  0E28                     	;# 
  1039  0E29                     	;# 
  1040  0E2A                     	;# 
  1041  0E2B                     	;# 
  1042  0E2C                     	;# 
  1043  0E2D                     	;# 
  1044  0E2E                     	;# 
  1045  0E2F                     	;# 
  1046  0E90                     	;# 
  1047  0E91                     	;# 
  1048  0E92                     	;# 
  1049  0E94                     	;# 
  1050  0E95                     	;# 
  1051  0EA0                     	;# 
  1052  0EA1                     	;# 
  1053  0EA2                     	;# 
  1054  0EA3                     	;# 
  1055  0EA4                     	;# 
  1056  0EA5                     	;# 
  1057  0F0F                     	;# 
  1058  0F10                     	;# 
  1059  0F11                     	;# 
  1060  0F12                     	;# 
  1061  0F13                     	;# 
  1062  0F14                     	;# 
  1063  0F15                     	;# 
  1064  0F16                     	;# 
  1065  0F17                     	;# 
  1066  0F18                     	;# 
  1067  0F19                     	;# 
  1068  0F1A                     	;# 
  1069  0F1B                     	;# 
  1070  0F1C                     	;# 
  1071  0F1D                     	;# 
  1072  0F1E                     	;# 
  1073  0F1F                     	;# 
  1074  0F20                     	;# 
  1075  0F21                     	;# 
  1076  0F22                     	;# 
  1077  0F23                     	;# 
  1078  0F24                     	;# 
  1079  0F25                     	;# 
  1080  0F26                     	;# 
  1081  0F27                     	;# 
  1082  0F28                     	;# 
  1083  0F29                     	;# 
  1084  0F2A                     	;# 
  1085  0F2B                     	;# 
  1086  0F2C                     	;# 
  1087  0F2D                     	;# 
  1088  0F2E                     	;# 
  1089  0F2F                     	;# 
  1090  0F30                     	;# 
  1091  0F31                     	;# 
  1092  0F32                     	;# 
  1093  0F33                     	;# 
  1094  0F34                     	;# 
  1095  0F35                     	;# 
  1096  0F36                     	;# 
  1097  0F37                     	;# 
  1098  0FE4                     	;# 
  1099  0FE5                     	;# 
  1100  0FE6                     	;# 
  1101  0FE7                     	;# 
  1102  0FE8                     	;# 
  1103  0FE9                     	;# 
  1104  0FEA                     	;# 
  1105  0FEB                     	;# 
  1106  0FED                     	;# 
  1107  0FEE                     	;# 
  1108  0FEF                     	;# 
  1109  0000                     	;# 
  1110  0001                     	;# 
  1111  0002                     	;# 
  1112  0003                     	;# 
  1113  0004                     	;# 
  1114  0005                     	;# 
  1115  0006                     	;# 
  1116  0007                     	;# 
  1117  0008                     	;# 
  1118  0009                     	;# 
  1119  000A                     	;# 
  1120  000B                     	;# 
  1121  000C                     	;# 
  1122  000E                     	;# 
  1123  0010                     	;# 
  1124  0011                     	;# 
  1125  0012                     	;# 
  1126  0013                     	;# 
  1127  0014                     	;# 
  1128  0015                     	;# 
  1129  0015                     	;# 
  1130  0016                     	;# 
  1131  0016                     	;# 
  1132  0017                     	;# 
  1133  0018                     	;# 
  1134  0019                     	;# 
  1135  0019                     	;# 
  1136  001A                     	;# 
  1137  001B                     	;# 
  1138  001C                     	;# 
  1139  001D                     	;# 
  1140  001E                     	;# 
  1141  001F                     	;# 
  1142  008C                     	;# 
  1143  008E                     	;# 
  1144  0090                     	;# 
  1145  0091                     	;# 
  1146  0092                     	;# 
  1147  0093                     	;# 
  1148  0094                     	;# 
  1149  0097                     	;# 
  1150  009B                     	;# 
  1151  009B                     	;# 
  1152  009C                     	;# 
  1153  009D                     	;# 
  1154  009E                     	;# 
  1155  009F                     	;# 
  1156  010C                     	;# 
  1157  010E                     	;# 
  1158  0111                     	;# 
  1159  0112                     	;# 
  1160  0113                     	;# 
  1161  0114                     	;# 
  1162  0115                     	;# 
  1163  0116                     	;# 
  1164  0117                     	;# 
  1165  0118                     	;# 
  1166  0119                     	;# 
  1167  018C                     	;# 
  1168  018E                     	;# 
  1169  0199                     	;# 
  1170  0199                     	;# 
  1171  0199                     	;# 
  1172  019A                     	;# 
  1173  019A                     	;# 
  1174  019A                     	;# 
  1175  019B                     	;# 
  1176  019B                     	;# 
  1177  019B                     	;# 
  1178  019B                     	;# 
  1179  019B                     	;# 
  1180  019C                     	;# 
  1181  019C                     	;# 
  1182  019C                     	;# 
  1183  019D                     	;# 
  1184  019D                     	;# 
  1185  019D                     	;# 
  1186  019E                     	;# 
  1187  019E                     	;# 
  1188  019E                     	;# 
  1189  019F                     	;# 
  1190  019F                     	;# 
  1191  019F                     	;# 
  1192  019F                     	;# 
  1193  019F                     	;# 
  1194  020C                     	;# 
  1195  020E                     	;# 
  1196  0211                     	;# 
  1197  0211                     	;# 
  1198  0212                     	;# 
  1199  0212                     	;# 
  1200  0213                     	;# 
  1201  0213                     	;# 
  1202  0214                     	;# 
  1203  0214                     	;# 
  1204  0215                     	;# 
  1205  0215                     	;# 
  1206  0215                     	;# 
  1207  0215                     	;# 
  1208  0216                     	;# 
  1209  0216                     	;# 
  1210  0217                     	;# 
  1211  0217                     	;# 
  1212  0219                     	;# 
  1213  021A                     	;# 
  1214  021B                     	;# 
  1215  021C                     	;# 
  1216  021D                     	;# 
  1217  021D                     	;# 
  1218  021E                     	;# 
  1219  021F                     	;# 
  1220  028C                     	;# 
  1221  028E                     	;# 
  1222  0291                     	;# 
  1223  0291                     	;# 
  1224  0292                     	;# 
  1225  0293                     	;# 
  1226  0294                     	;# 
  1227  0295                     	;# 
  1228  0295                     	;# 
  1229  0296                     	;# 
  1230  0297                     	;# 
  1231  0298                     	;# 
  1232  029F                     	;# 
  1233  030C                     	;# 
  1234  030E                     	;# 
  1235  0311                     	;# 
  1236  0311                     	;# 
  1237  0312                     	;# 
  1238  0313                     	;# 
  1239  0314                     	;# 
  1240  0315                     	;# 
  1241  0315                     	;# 
  1242  0316                     	;# 
  1243  0317                     	;# 
  1244  0318                     	;# 
  1245  038C                     	;# 
  1246  038E                     	;# 
  1247  0391                     	;# 
  1248  0392                     	;# 
  1249  0393                     	;# 
  1250  0397                     	;# 
  1251  0398                     	;# 
  1252  0399                     	;# 
  1253  039A                     	;# 
  1254  039C                     	;# 
  1255  039D                     	;# 
  1256  039E                     	;# 
  1257  039F                     	;# 
  1258  0411                     	;# 
  1259  0411                     	;# 
  1260  0412                     	;# 
  1261  0413                     	;# 
  1262  0414                     	;# 
  1263  0415                     	;# 
  1264  0416                     	;# 
  1265  0417                     	;# 
  1266  0418                     	;# 
  1267  0418                     	;# 
  1268  0419                     	;# 
  1269  041A                     	;# 
  1270  041B                     	;# 
  1271  041C                     	;# 
  1272  041D                     	;# 
  1273  041E                     	;# 
  1274  041F                     	;# 
  1275  0498                     	;# 
  1276  0498                     	;# 
  1277  0499                     	;# 
  1278  049A                     	;# 
  1279  049B                     	;# 
  1280  049B                     	;# 
  1281  049C                     	;# 
  1282  049D                     	;# 
  1283  049E                     	;# 
  1284  049F                     	;# 
  1285  0617                     	;# 
  1286  0618                     	;# 
  1287  0619                     	;# 
  1288  0619                     	;# 
  1289  061A                     	;# 
  1290  061B                     	;# 
  1291  061C                     	;# 
  1292  061C                     	;# 
  1293  061F                     	;# 
  1294  0691                     	;# 
  1295  0692                     	;# 
  1296  0693                     	;# 
  1297  0694                     	;# 
  1298  0695                     	;# 
  1299  0696                     	;# 
  1300  0697                     	;# 
  1301  0698                     	;# 
  1302  0699                     	;# 
  1303  0711                     	;# 
  1304  0712                     	;# 
  1305  0713                     	;# 
  1306  0714                     	;# 
  1307  0715                     	;# 
  1308  0716                     	;# 
  1309  0717                     	;# 
  1310  0718                     	;# 
  1311  0719                     	;# 
  1312  0891                     	;# 
  1313  0891                     	;# 
  1314  0891                     	;# 
  1315  0891                     	;# 
  1316  0891                     	;# 
  1317  0891                     	;# 
  1318  0892                     	;# 
  1319  0892                     	;# 
  1320  0892                     	;# 
  1321  0893                     	;# 
  1322  0893                     	;# 
  1323  0893                     	;# 
  1324  0893                     	;# 
  1325  0893                     	;# 
  1326  0893                     	;# 
  1327  0894                     	;# 
  1328  0894                     	;# 
  1329  0894                     	;# 
  1330  0895                     	;# 
  1331  0895                     	;# 
  1332  0895                     	;# 
  1333  0896                     	;# 
  1334  0896                     	;# 
  1335  0896                     	;# 
  1336  089B                     	;# 
  1337  0911                     	;# 
  1338  0912                     	;# 
  1339  0913                     	;# 
  1340  0914                     	;# 
  1341  0915                     	;# 
  1342  0916                     	;# 
  1343  0918                     	;# 
  1344  0919                     	;# 
  1345  091A                     	;# 
  1346  091B                     	;# 
  1347  091C                     	;# 
  1348  091D                     	;# 
  1349  091E                     	;# 
  1350  091F                     	;# 
  1351  0E0F                     	;# 
  1352  0E10                     	;# 
  1353  0E11                     	;# 
  1354  0E12                     	;# 
  1355  0E13                     	;# 
  1356  0E14                     	;# 
  1357  0E15                     	;# 
  1358  0E16                     	;# 
  1359  0E17                     	;# 
  1360  0E18                     	;# 
  1361  0E19                     	;# 
  1362  0E1A                     	;# 
  1363  0E1B                     	;# 
  1364  0E1C                     	;# 
  1365  0E1D                     	;# 
  1366  0E1E                     	;# 
  1367  0E1F                     	;# 
  1368  0E20                     	;# 
  1369  0E21                     	;# 
  1370  0E22                     	;# 
  1371  0E24                     	;# 
  1372  0E25                     	;# 
  1373  0E28                     	;# 
  1374  0E29                     	;# 
  1375  0E2A                     	;# 
  1376  0E2B                     	;# 
  1377  0E2C                     	;# 
  1378  0E2D                     	;# 
  1379  0E2E                     	;# 
  1380  0E2F                     	;# 
  1381  0E90                     	;# 
  1382  0E91                     	;# 
  1383  0E92                     	;# 
  1384  0E94                     	;# 
  1385  0E95                     	;# 
  1386  0EA0                     	;# 
  1387  0EA1                     	;# 
  1388  0EA2                     	;# 
  1389  0EA3                     	;# 
  1390  0EA4                     	;# 
  1391  0EA5                     	;# 
  1392  0F0F                     	;# 
  1393  0F10                     	;# 
  1394  0F11                     	;# 
  1395  0F12                     	;# 
  1396  0F13                     	;# 
  1397  0F14                     	;# 
  1398  0F15                     	;# 
  1399  0F16                     	;# 
  1400  0F17                     	;# 
  1401  0F18                     	;# 
  1402  0F19                     	;# 
  1403  0F1A                     	;# 
  1404  0F1B                     	;# 
  1405  0F1C                     	;# 
  1406  0F1D                     	;# 
  1407  0F1E                     	;# 
  1408  0F1F                     	;# 
  1409  0F20                     	;# 
  1410  0F21                     	;# 
  1411  0F22                     	;# 
  1412  0F23                     	;# 
  1413  0F24                     	;# 
  1414  0F25                     	;# 
  1415  0F26                     	;# 
  1416  0F27                     	;# 
  1417  0F28                     	;# 
  1418  0F29                     	;# 
  1419  0F2A                     	;# 
  1420  0F2B                     	;# 
  1421  0F2C                     	;# 
  1422  0F2D                     	;# 
  1423  0F2E                     	;# 
  1424  0F2F                     	;# 
  1425  0F30                     	;# 
  1426  0F31                     	;# 
  1427  0F32                     	;# 
  1428  0F33                     	;# 
  1429  0F34                     	;# 
  1430  0F35                     	;# 
  1431  0F36                     	;# 
  1432  0F37                     	;# 
  1433  0FE4                     	;# 
  1434  0FE5                     	;# 
  1435  0FE6                     	;# 
  1436  0FE7                     	;# 
  1437  0FE8                     	;# 
  1438  0FE9                     	;# 
  1439  0FEA                     	;# 
  1440  0FEB                     	;# 
  1441  0FED                     	;# 
  1442  0FEE                     	;# 
  1443  0FEF                     	;# 
  1444  0000                     	;# 
  1445  0001                     	;# 
  1446  0002                     	;# 
  1447  0003                     	;# 
  1448  0004                     	;# 
  1449  0005                     	;# 
  1450  0006                     	;# 
  1451  0007                     	;# 
  1452  0008                     	;# 
  1453  0009                     	;# 
  1454  000A                     	;# 
  1455  000B                     	;# 
  1456  000C                     	;# 
  1457  000E                     	;# 
  1458  0010                     	;# 
  1459  0011                     	;# 
  1460  0012                     	;# 
  1461  0013                     	;# 
  1462  0014                     	;# 
  1463  0015                     	;# 
  1464  0015                     	;# 
  1465  0016                     	;# 
  1466  0016                     	;# 
  1467  0017                     	;# 
  1468  0018                     	;# 
  1469  0019                     	;# 
  1470  0019                     	;# 
  1471  001A                     	;# 
  1472  001B                     	;# 
  1473  001C                     	;# 
  1474  001D                     	;# 
  1475  001E                     	;# 
  1476  001F                     	;# 
  1477  008C                     	;# 
  1478  008E                     	;# 
  1479  0090                     	;# 
  1480  0091                     	;# 
  1481  0092                     	;# 
  1482  0093                     	;# 
  1483  0094                     	;# 
  1484  0097                     	;# 
  1485  009B                     	;# 
  1486  009B                     	;# 
  1487  009C                     	;# 
  1488  009D                     	;# 
  1489  009E                     	;# 
  1490  009F                     	;# 
  1491  010C                     	;# 
  1492  010E                     	;# 
  1493  0111                     	;# 
  1494  0112                     	;# 
  1495  0113                     	;# 
  1496  0114                     	;# 
  1497  0115                     	;# 
  1498  0116                     	;# 
  1499  0117                     	;# 
  1500  0118                     	;# 
  1501  0119                     	;# 
  1502  018C                     	;# 
  1503  018E                     	;# 
  1504  0199                     	;# 
  1505  0199                     	;# 
  1506  0199                     	;# 
  1507  019A                     	;# 
  1508  019A                     	;# 
  1509  019A                     	;# 
  1510  019B                     	;# 
  1511  019B                     	;# 
  1512  019B                     	;# 
  1513  019B                     	;# 
  1514  019B                     	;# 
  1515  019C                     	;# 
  1516  019C                     	;# 
  1517  019C                     	;# 
  1518  019D                     	;# 
  1519  019D                     	;# 
  1520  019D                     	;# 
  1521  019E                     	;# 
  1522  019E                     	;# 
  1523  019E                     	;# 
  1524  019F                     	;# 
  1525  019F                     	;# 
  1526  019F                     	;# 
  1527  019F                     	;# 
  1528  019F                     	;# 
  1529  020C                     	;# 
  1530  020E                     	;# 
  1531  0211                     	;# 
  1532  0211                     	;# 
  1533  0212                     	;# 
  1534  0212                     	;# 
  1535  0213                     	;# 
  1536  0213                     	;# 
  1537  0214                     	;# 
  1538  0214                     	;# 
  1539  0215                     	;# 
  1540  0215                     	;# 
  1541  0215                     	;# 
  1542  0215                     	;# 
  1543  0216                     	;# 
  1544  0216                     	;# 
  1545  0217                     	;# 
  1546  0217                     	;# 
  1547  0219                     	;# 
  1548  021A                     	;# 
  1549  021B                     	;# 
  1550  021C                     	;# 
  1551  021D                     	;# 
  1552  021D                     	;# 
  1553  021E                     	;# 
  1554  021F                     	;# 
  1555  028C                     	;# 
  1556  028E                     	;# 
  1557  0291                     	;# 
  1558  0291                     	;# 
  1559  0292                     	;# 
  1560  0293                     	;# 
  1561  0294                     	;# 
  1562  0295                     	;# 
  1563  0295                     	;# 
  1564  0296                     	;# 
  1565  0297                     	;# 
  1566  0298                     	;# 
  1567  029F                     	;# 
  1568  030C                     	;# 
  1569  030E                     	;# 
  1570  0311                     	;# 
  1571  0311                     	;# 
  1572  0312                     	;# 
  1573  0313                     	;# 
  1574  0314                     	;# 
  1575  0315                     	;# 
  1576  0315                     	;# 
  1577  0316                     	;# 
  1578  0317                     	;# 
  1579  0318                     	;# 
  1580  038C                     	;# 
  1581  038E                     	;# 
  1582  0391                     	;# 
  1583  0392                     	;# 
  1584  0393                     	;# 
  1585  0397                     	;# 
  1586  0398                     	;# 
  1587  0399                     	;# 
  1588  039A                     	;# 
  1589  039C                     	;# 
  1590  039D                     	;# 
  1591  039E                     	;# 
  1592  039F                     	;# 
  1593  0411                     	;# 
  1594  0411                     	;# 
  1595  0412                     	;# 
  1596  0413                     	;# 
  1597  0414                     	;# 
  1598  0415                     	;# 
  1599  0416                     	;# 
  1600  0417                     	;# 
  1601  0418                     	;# 
  1602  0418                     	;# 
  1603  0419                     	;# 
  1604  041A                     	;# 
  1605  041B                     	;# 
  1606  041C                     	;# 
  1607  041D                     	;# 
  1608  041E                     	;# 
  1609  041F                     	;# 
  1610  0498                     	;# 
  1611  0498                     	;# 
  1612  0499                     	;# 
  1613  049A                     	;# 
  1614  049B                     	;# 
  1615  049B                     	;# 
  1616  049C                     	;# 
  1617  049D                     	;# 
  1618  049E                     	;# 
  1619  049F                     	;# 
  1620  0617                     	;# 
  1621  0618                     	;# 
  1622  0619                     	;# 
  1623  0619                     	;# 
  1624  061A                     	;# 
  1625  061B                     	;# 
  1626  061C                     	;# 
  1627  061C                     	;# 
  1628  061F                     	;# 
  1629  0691                     	;# 
  1630  0692                     	;# 
  1631  0693                     	;# 
  1632  0694                     	;# 
  1633  0695                     	;# 
  1634  0696                     	;# 
  1635  0697                     	;# 
  1636  0698                     	;# 
  1637  0699                     	;# 
  1638  0711                     	;# 
  1639  0712                     	;# 
  1640  0713                     	;# 
  1641  0714                     	;# 
  1642  0715                     	;# 
  1643  0716                     	;# 
  1644  0717                     	;# 
  1645  0718                     	;# 
  1646  0719                     	;# 
  1647  0891                     	;# 
  1648  0891                     	;# 
  1649  0891                     	;# 
  1650  0891                     	;# 
  1651  0891                     	;# 
  1652  0891                     	;# 
  1653  0892                     	;# 
  1654  0892                     	;# 
  1655  0892                     	;# 
  1656  0893                     	;# 
  1657  0893                     	;# 
  1658  0893                     	;# 
  1659  0893                     	;# 
  1660  0893                     	;# 
  1661  0893                     	;# 
  1662  0894                     	;# 
  1663  0894                     	;# 
  1664  0894                     	;# 
  1665  0895                     	;# 
  1666  0895                     	;# 
  1667  0895                     	;# 
  1668  0896                     	;# 
  1669  0896                     	;# 
  1670  0896                     	;# 
  1671  089B                     	;# 
  1672  0911                     	;# 
  1673  0912                     	;# 
  1674  0913                     	;# 
  1675  0914                     	;# 
  1676  0915                     	;# 
  1677  0916                     	;# 
  1678  0918                     	;# 
  1679  0919                     	;# 
  1680  091A                     	;# 
  1681  091B                     	;# 
  1682  091C                     	;# 
  1683  091D                     	;# 
  1684  091E                     	;# 
  1685  091F                     	;# 
  1686  0E0F                     	;# 
  1687  0E10                     	;# 
  1688  0E11                     	;# 
  1689  0E12                     	;# 
  1690  0E13                     	;# 
  1691  0E14                     	;# 
  1692  0E15                     	;# 
  1693  0E16                     	;# 
  1694  0E17                     	;# 
  1695  0E18                     	;# 
  1696  0E19                     	;# 
  1697  0E1A                     	;# 
  1698  0E1B                     	;# 
  1699  0E1C                     	;# 
  1700  0E1D                     	;# 
  1701  0E1E                     	;# 
  1702  0E1F                     	;# 
  1703  0E20                     	;# 
  1704  0E21                     	;# 
  1705  0E22                     	;# 
  1706  0E24                     	;# 
  1707  0E25                     	;# 
  1708  0E28                     	;# 
  1709  0E29                     	;# 
  1710  0E2A                     	;# 
  1711  0E2B                     	;# 
  1712  0E2C                     	;# 
  1713  0E2D                     	;# 
  1714  0E2E                     	;# 
  1715  0E2F                     	;# 
  1716  0E90                     	;# 
  1717  0E91                     	;# 
  1718  0E92                     	;# 
  1719  0E94                     	;# 
  1720  0E95                     	;# 
  1721  0EA0                     	;# 
  1722  0EA1                     	;# 
  1723  0EA2                     	;# 
  1724  0EA3                     	;# 
  1725  0EA4                     	;# 
  1726  0EA5                     	;# 
  1727  0F0F                     	;# 
  1728  0F10                     	;# 
  1729  0F11                     	;# 
  1730  0F12                     	;# 
  1731  0F13                     	;# 
  1732  0F14                     	;# 
  1733  0F15                     	;# 
  1734  0F16                     	;# 
  1735  0F17                     	;# 
  1736  0F18                     	;# 
  1737  0F19                     	;# 
  1738  0F1A                     	;# 
  1739  0F1B                     	;# 
  1740  0F1C                     	;# 
  1741  0F1D                     	;# 
  1742  0F1E                     	;# 
  1743  0F1F                     	;# 
  1744  0F20                     	;# 
  1745  0F21                     	;# 
  1746  0F22                     	;# 
  1747  0F23                     	;# 
  1748  0F24                     	;# 
  1749  0F25                     	;# 
  1750  0F26                     	;# 
  1751  0F27                     	;# 
  1752  0F28                     	;# 
  1753  0F29                     	;# 
  1754  0F2A                     	;# 
  1755  0F2B                     	;# 
  1756  0F2C                     	;# 
  1757  0F2D                     	;# 
  1758  0F2E                     	;# 
  1759  0F2F                     	;# 
  1760  0F30                     	;# 
  1761  0F31                     	;# 
  1762  0F32                     	;# 
  1763  0F33                     	;# 
  1764  0F34                     	;# 
  1765  0F35                     	;# 
  1766  0F36                     	;# 
  1767  0F37                     	;# 
  1768  0FE4                     	;# 
  1769  0FE5                     	;# 
  1770  0FE6                     	;# 
  1771  0FE7                     	;# 
  1772  0FE8                     	;# 
  1773  0FE9                     	;# 
  1774  0FEA                     	;# 
  1775  0FEB                     	;# 
  1776  0FED                     	;# 
  1777  0FEE                     	;# 
  1778  0FEF                     	;# 
  1779  0000                     	;# 
  1780  0001                     	;# 
  1781  0002                     	;# 
  1782  0003                     	;# 
  1783  0004                     	;# 
  1784  0005                     	;# 
  1785  0006                     	;# 
  1786  0007                     	;# 
  1787  0008                     	;# 
  1788  0009                     	;# 
  1789  000A                     	;# 
  1790  000B                     	;# 
  1791  000C                     	;# 
  1792  000E                     	;# 
  1793  0010                     	;# 
  1794  0011                     	;# 
  1795  0012                     	;# 
  1796  0013                     	;# 
  1797  0014                     	;# 
  1798  0015                     	;# 
  1799  0015                     	;# 
  1800  0016                     	;# 
  1801  0016                     	;# 
  1802  0017                     	;# 
  1803  0018                     	;# 
  1804  0019                     	;# 
  1805  0019                     	;# 
  1806  001A                     	;# 
  1807  001B                     	;# 
  1808  001C                     	;# 
  1809  001D                     	;# 
  1810  001E                     	;# 
  1811  001F                     	;# 
  1812  008C                     	;# 
  1813  008E                     	;# 
  1814  0090                     	;# 
  1815  0091                     	;# 
  1816  0092                     	;# 
  1817  0093                     	;# 
  1818  0094                     	;# 
  1819  0097                     	;# 
  1820  009B                     	;# 
  1821  009B                     	;# 
  1822  009C                     	;# 
  1823  009D                     	;# 
  1824  009E                     	;# 
  1825  009F                     	;# 
  1826  010C                     	;# 
  1827  010E                     	;# 
  1828  0111                     	;# 
  1829  0112                     	;# 
  1830  0113                     	;# 
  1831  0114                     	;# 
  1832  0115                     	;# 
  1833  0116                     	;# 
  1834  0117                     	;# 
  1835  0118                     	;# 
  1836  0119                     	;# 
  1837  018C                     	;# 
  1838  018E                     	;# 
  1839  0199                     	;# 
  1840  0199                     	;# 
  1841  0199                     	;# 
  1842  019A                     	;# 
  1843  019A                     	;# 
  1844  019A                     	;# 
  1845  019B                     	;# 
  1846  019B                     	;# 
  1847  019B                     	;# 
  1848  019B                     	;# 
  1849  019B                     	;# 
  1850  019C                     	;# 
  1851  019C                     	;# 
  1852  019C                     	;# 
  1853  019D                     	;# 
  1854  019D                     	;# 
  1855  019D                     	;# 
  1856  019E                     	;# 
  1857  019E                     	;# 
  1858  019E                     	;# 
  1859  019F                     	;# 
  1860  019F                     	;# 
  1861  019F                     	;# 
  1862  019F                     	;# 
  1863  019F                     	;# 
  1864  020C                     	;# 
  1865  020E                     	;# 
  1866  0211                     	;# 
  1867  0211                     	;# 
  1868  0212                     	;# 
  1869  0212                     	;# 
  1870  0213                     	;# 
  1871  0213                     	;# 
  1872  0214                     	;# 
  1873  0214                     	;# 
  1874  0215                     	;# 
  1875  0215                     	;# 
  1876  0215                     	;# 
  1877  0215                     	;# 
  1878  0216                     	;# 
  1879  0216                     	;# 
  1880  0217                     	;# 
  1881  0217                     	;# 
  1882  0219                     	;# 
  1883  021A                     	;# 
  1884  021B                     	;# 
  1885  021C                     	;# 
  1886  021D                     	;# 
  1887  021D                     	;# 
  1888  021E                     	;# 
  1889  021F                     	;# 
  1890  028C                     	;# 
  1891  028E                     	;# 
  1892  0291                     	;# 
  1893  0291                     	;# 
  1894  0292                     	;# 
  1895  0293                     	;# 
  1896  0294                     	;# 
  1897  0295                     	;# 
  1898  0295                     	;# 
  1899  0296                     	;# 
  1900  0297                     	;# 
  1901  0298                     	;# 
  1902  029F                     	;# 
  1903  030C                     	;# 
  1904  030E                     	;# 
  1905  0311                     	;# 
  1906  0311                     	;# 
  1907  0312                     	;# 
  1908  0313                     	;# 
  1909  0314                     	;# 
  1910  0315                     	;# 
  1911  0315                     	;# 
  1912  0316                     	;# 
  1913  0317                     	;# 
  1914  0318                     	;# 
  1915  038C                     	;# 
  1916  038E                     	;# 
  1917  0391                     	;# 
  1918  0392                     	;# 
  1919  0393                     	;# 
  1920  0397                     	;# 
  1921  0398                     	;# 
  1922  0399                     	;# 
  1923  039A                     	;# 
  1924  039C                     	;# 
  1925  039D                     	;# 
  1926  039E                     	;# 
  1927  039F                     	;# 
  1928  0411                     	;# 
  1929  0411                     	;# 
  1930  0412                     	;# 
  1931  0413                     	;# 
  1932  0414                     	;# 
  1933  0415                     	;# 
  1934  0416                     	;# 
  1935  0417                     	;# 
  1936  0418                     	;# 
  1937  0418                     	;# 
  1938  0419                     	;# 
  1939  041A                     	;# 
  1940  041B                     	;# 
  1941  041C                     	;# 
  1942  041D                     	;# 
  1943  041E                     	;# 
  1944  041F                     	;# 
  1945  0498                     	;# 
  1946  0498                     	;# 
  1947  0499                     	;# 
  1948  049A                     	;# 
  1949  049B                     	;# 
  1950  049B                     	;# 
  1951  049C                     	;# 
  1952  049D                     	;# 
  1953  049E                     	;# 
  1954  049F                     	;# 
  1955  0617                     	;# 
  1956  0618                     	;# 
  1957  0619                     	;# 
  1958  0619                     	;# 
  1959  061A                     	;# 
  1960  061B                     	;# 
  1961  061C                     	;# 
  1962  061C                     	;# 
  1963  061F                     	;# 
  1964  0691                     	;# 
  1965  0692                     	;# 
  1966  0693                     	;# 
  1967  0694                     	;# 
  1968  0695                     	;# 
  1969  0696                     	;# 
  1970  0697                     	;# 
  1971  0698                     	;# 
  1972  0699                     	;# 
  1973  0711                     	;# 
  1974  0712                     	;# 
  1975  0713                     	;# 
  1976  0714                     	;# 
  1977  0715                     	;# 
  1978  0716                     	;# 
  1979  0717                     	;# 
  1980  0718                     	;# 
  1981  0719                     	;# 
  1982  0891                     	;# 
  1983  0891                     	;# 
  1984  0891                     	;# 
  1985  0891                     	;# 
  1986  0891                     	;# 
  1987  0891                     	;# 
  1988  0892                     	;# 
  1989  0892                     	;# 
  1990  0892                     	;# 
  1991  0893                     	;# 
  1992  0893                     	;# 
  1993  0893                     	;# 
  1994  0893                     	;# 
  1995  0893                     	;# 
  1996  0893                     	;# 
  1997  0894                     	;# 
  1998  0894                     	;# 
  1999  0894                     	;# 
  2000  0895                     	;# 
  2001  0895                     	;# 
  2002  0895                     	;# 
  2003  0896                     	;# 
  2004  0896                     	;# 
  2005  0896                     	;# 
  2006  089B                     	;# 
  2007  0911                     	;# 
  2008  0912                     	;# 
  2009  0913                     	;# 
  2010  0914                     	;# 
  2011  0915                     	;# 
  2012  0916                     	;# 
  2013  0918                     	;# 
  2014  0919                     	;# 
  2015  091A                     	;# 
  2016  091B                     	;# 
  2017  091C                     	;# 
  2018  091D                     	;# 
  2019  091E                     	;# 
  2020  091F                     	;# 
  2021  0E0F                     	;# 
  2022  0E10                     	;# 
  2023  0E11                     	;# 
  2024  0E12                     	;# 
  2025  0E13                     	;# 
  2026  0E14                     	;# 
  2027  0E15                     	;# 
  2028  0E16                     	;# 
  2029  0E17                     	;# 
  2030  0E18                     	;# 
  2031  0E19                     	;# 
  2032  0E1A                     	;# 
  2033  0E1B                     	;# 
  2034  0E1C                     	;# 
  2035  0E1D                     	;# 
  2036  0E1E                     	;# 
  2037  0E1F                     	;# 
  2038  0E20                     	;# 
  2039  0E21                     	;# 
  2040  0E22                     	;# 
  2041  0E24                     	;# 
  2042  0E25                     	;# 
  2043  0E28                     	;# 
  2044  0E29                     	;# 
  2045  0E2A                     	;# 
  2046  0E2B                     	;# 
  2047  0E2C                     	;# 
  2048  0E2D                     	;# 
  2049  0E2E                     	;# 
  2050  0E2F                     	;# 
  2051  0E90                     	;# 
  2052  0E91                     	;# 
  2053  0E92                     	;# 
  2054  0E94                     	;# 
  2055  0E95                     	;# 
  2056  0EA0                     	;# 
  2057  0EA1                     	;# 
  2058  0EA2                     	;# 
  2059  0EA3                     	;# 
  2060  0EA4                     	;# 
  2061  0EA5                     	;# 
  2062  0F0F                     	;# 
  2063  0F10                     	;# 
  2064  0F11                     	;# 
  2065  0F12                     	;# 
  2066  0F13                     	;# 
  2067  0F14                     	;# 
  2068  0F15                     	;# 
  2069  0F16                     	;# 
  2070  0F17                     	;# 
  2071  0F18                     	;# 
  2072  0F19                     	;# 
  2073  0F1A                     	;# 
  2074  0F1B                     	;# 
  2075  0F1C                     	;# 
  2076  0F1D                     	;# 
  2077  0F1E                     	;# 
  2078  0F1F                     	;# 
  2079  0F20                     	;# 
  2080  0F21                     	;# 
  2081  0F22                     	;# 
  2082  0F23                     	;# 
  2083  0F24                     	;# 
  2084  0F25                     	;# 
  2085  0F26                     	;# 
  2086  0F27                     	;# 
  2087  0F28                     	;# 
  2088  0F29                     	;# 
  2089  0F2A                     	;# 
  2090  0F2B                     	;# 
  2091  0F2C                     	;# 
  2092  0F2D                     	;# 
  2093  0F2E                     	;# 
  2094  0F2F                     	;# 
  2095  0F30                     	;# 
  2096  0F31                     	;# 
  2097  0F32                     	;# 
  2098  0F33                     	;# 
  2099  0F34                     	;# 
  2100  0F35                     	;# 
  2101  0F36                     	;# 
  2102  0F37                     	;# 
  2103  0FE4                     	;# 
  2104  0FE5                     	;# 
  2105  0FE6                     	;# 
  2106  0FE7                     	;# 
  2107  0FE8                     	;# 
  2108  0FE9                     	;# 
  2109  0FEA                     	;# 
  2110  0FEB                     	;# 
  2111  0FED                     	;# 
  2112  0FEE                     	;# 
  2113  0FEF                     	;# 
  2114  1FE0                     _romArray_absaddr	set	8160
  2115                           
  2116                           	psect	stringtext1
  2117  1000                     __pstringtext1:	
  2118  1000                     _resetRomData:	
  2119  1000  34AA               	retlw	170
  2120  1001  3455               	retlw	85
  2121  1002  346E               	retlw	110
  2122  1003  3463               	retlw	99
  2123  1004  346F               	retlw	111
  2124  1005  346E               	retlw	110
  2125  1006  3466               	retlw	102
  2126  1007  3469               	retlw	105
  2127  1008  3467               	retlw	103
  2128  1009  3475               	retlw	117
  2129  100A  3472               	retlw	114
  2130  100B  3465               	retlw	101
  2131  100C  3464               	retlw	100
  2132  100D  3400               	retlw	0
  2133  100E  3400               	retlw	0
  2134  100F  3400               	retlw	0
  2135  1010  3400               	retlw	0
  2136  1011  3400               	retlw	0
  2137  1012  3400               	retlw	0
  2138  1013                     __end_of_resetRomData:	
  2139                           
  2140                           	psect	stringtext2
  2141  1013                     __pstringtext2:	
  2142  1013                     _n_ADDRESS_P0:	
  2143  1013  34AD               	retlw	173
  2144  1014  3487               	retlw	135
  2145  1015  3466               	retlw	102
  2146  1016  34BC               	retlw	188
  2147  1017  34BB               	retlw	187
  2148  1018                     __end_of_n_ADDRESS_P0:	
  2149                           
  2150                           	psect	stringtext3
  2151  103A                     __pstringtext3:	
  2152  103A                     _n_ADDRESS_MUL:	
  2153  103A  3421               	retlw	33
  2154  103B                     __end_of_n_ADDRESS_MUL:	
  2155  1FE0                     _romArray_absaddr	set	8160
  2156                           
  2157                           	psect	_romArray_text
  2158  1FE0                     __p_romArray_text:	
  2159  1FE0                     _romArray:	
  2160  1FE0  3400               	retlw	0
  2161  1FE1  3400               	retlw	0
  2162  1FE2  3400               	retlw	0
  2163  1FE3  3400               	retlw	0
  2164  1FE4  3400               	retlw	0
  2165  1FE5  3400               	retlw	0
  2166  1FE6  3400               	retlw	0
  2167  1FE7  3400               	retlw	0
  2168  1FE8  3400               	retlw	0
  2169  1FE9  3400               	retlw	0
  2170  1FEA  3400               	retlw	0
  2171  1FEB  3400               	retlw	0
  2172  1FEC  3400               	retlw	0
  2173  1FED  3400               	retlw	0
  2174  1FEE  3400               	retlw	0
  2175  1FEF  3400               	retlw	0
  2176  1FF0  3400               	retlw	0
  2177  1FF1  3400               	retlw	0
  2178  1FF2  3400               	retlw	0
  2179  1FF3  3400               	retlw	0
  2180  1FF4  3400               	retlw	0
  2181  1FF5  3400               	retlw	0
  2182  1FF6  3400               	retlw	0
  2183  1FF7  3400               	retlw	0
  2184  1FF8  3400               	retlw	0
  2185  1FF9  3400               	retlw	0
  2186  1FFA  3400               	retlw	0
  2187  1FFB  3400               	retlw	0
  2188  1FFC  3400               	retlw	0
  2189  1FFD  3400               	retlw	0
  2190  1FFE  3400               	retlw	0
  2191  1FFF  3400               	retlw	0
  2192  2000                     __end_of_romArray:	
  2193  0003                     _STATUSbits	set	3
  2194  0010                     _PIR0bits	set	16
  2195  000E                     _PORTCbits	set	14
  2196  000C                     _PORTAbits	set	12
  2197  000B                     _INTCONbits	set	11
  2198  0097                     _WDTCONbits	set	151
  2199  009E                     _ADCON1bits	set	158
  2200  009C                     _ADRESH	set	156
  2201  009B                     _ADRESL	set	155
  2202  009D                     _ADCON0bits	set	157
  2203  0090                     _PIE0bits	set	144
  2204  008E                     _TRISCbits	set	142
  2205  008C                     _TRISAbits	set	140
  2206  0117                     _FVRCONbits	set	279
  2207  018E                     _ANSELCbits	set	398
  2208  018C                     _ANSELAbits	set	396
  2209  018E                     _ANSELC	set	398
  2210  018C                     _ANSELA	set	396
  2211  020C                     _WPUAbits	set	524
  2212  020E                     _WPUC	set	526
  2213  020C                     _WPUA	set	524
  2214  0211                     _SSP1BUF	set	529
  2215  0214                     _SSP1STATbits	set	532
  2216  0215                     _SSP1CON1bits	set	533
  2217  028E                     _ODCONC	set	654
  2218  028C                     _ODCONA	set	652
  2219  038E                     _INLVLC	set	910
  2220  038C                     _INLVLA	set	908
  2221  0894                     _PMDATH	set	2196
  2222  0893                     _PMDATL	set	2195
  2223  0896                     _PMCON2	set	2198
  2224  0895                     _PMCON1bits	set	2197
  2225  0892                     _PMADRH	set	2194
  2226  0891                     _PMADRL	set	2193
  2227  0895                     _PMCON1	set	2197
  2228  0919                     _OSCCON1bits	set	2329
  2229  0EA0                     _RC0PPSbits	set	3744
  2230  0EA2                     _RC2PPSbits	set	3746
  2231  0EA1                     _RC1PPSbits	set	3745
  2232                           
  2233                           	psect	stringtext4
  2234  1018                     __pstringtext4:	
  2235  1018                     STR_5:	
  2236  1018  3441               	retlw	65	;'A'
  2237  1019  344E               	retlw	78	;'N'
  2238  101A  3443               	retlw	67	;'C'
  2239  101B  3433               	retlw	51	;'3'
  2240  101C  3400               	retlw	0
  2241                           
  2242                           	psect	stringtext5
  2243  101D                     __pstringtext5:	
  2244  101D                     STR_7:	
  2245  101D  3454               	retlw	84	;'T'
  2246  101E  3445               	retlw	69	;'E'
  2247  101F  344D               	retlw	77	;'M'
  2248  1020  3450               	retlw	80	;'P'
  2249  1021  3400               	retlw	0
  2250                           
  2251                           	psect	stringtext6
  2252  1022                     __pstringtext6:	
  2253  1022                     STR_4:	
  2254  1022  3456               	retlw	86	;'V'
  2255  1023  3442               	retlw	66	;'B'
  2256  1024  3441               	retlw	65	;'A'
  2257  1025  3454               	retlw	84	;'T'
  2258  1026  3400               	retlw	0
  2259                           
  2260                           	psect	stringtext7
  2261  1027                     __pstringtext7:	
  2262  1027                     STR_9:	
  2263  1027  3442               	retlw	66	;'B'
  2264  1028  344F               	retlw	79	;'O'
  2265  1029  344F               	retlw	79	;'O'
  2266  102A  3454               	retlw	84	;'T'
  2267  102B  3400               	retlw	0
  2268                           
  2269                           	psect	stringtext8
  2270  102C                     __pstringtext8:	
  2271  102C                     STR_8:	
  2272  102C  3455               	retlw	85	;'U'
  2273  102D  3457               	retlw	87	;'W'
  2274  102E  3431               	retlw	49	;'1'
  2275  102F  3400               	retlw	0
  2276                           
  2277                           	psect	stringtext9
  2278  1030                     __pstringtext9:	
  2279  1030                     STR_3:	
  2280  1030  3444               	retlw	68	;'D'
  2281  1031  3442               	retlw	66	;'B'
  2282  1032  3447               	retlw	71	;'G'
  2283  1033  3400               	retlw	0
  2284                           
  2285                           	psect	stringtext10
  2286  1034                     __pstringtext10:	
  2287  1034                     STR_6:	
  2288  1034  3446               	retlw	70	;'F'
  2289  1035  3456               	retlw	86	;'V'
  2290  1036  3452               	retlw	82	;'R'
  2291  1037  3400               	retlw	0
  2292                           
  2293                           	psect	stringtext11
  2294  1038                     __pstringtext11:	
  2295  1038                     STR_1:	
  2296  1038  342F               	retlw	47	;'/'
  2297  1039  3400               	retlw	0
  2298                           
  2299                           	psect	stringtext12
  2300  0000                     __pstringtext12:	
  2301  1038                     
  2302                           ; #config settings
  2303  0000                     
  2304                           	psect	cinit
  2305  0011                     start_initialization:	
  2306  0011                     __initialization:	
  2307                           
  2308                           ; Clear objects allocated to BANK0
  2309  0011  3059               	movlw	low __pbssBANK0
  2310  0012  0084               	movwf	4
  2311  0013  3000               	movlw	high __pbssBANK0
  2312  0014  0085               	movwf	5
  2313  0015  3016               	movlw	22
  2314  0016  318F  275B  3180   	fcall	clear_ram0
  2315                           
  2316                           ; Clear objects allocated to BANK1
  2317  0019  0021               	movlb	1	; select bank1
  2318  001A  01E2               	clrf	__pbssBANK1& (0+127)
  2319  001B  01E3               	clrf	(__pbssBANK1+1)& (0+127)
  2320                           
  2321                           ; Clear objects allocated to BANK2
  2322  001C  3020               	movlw	low __pbssBANK2
  2323  001D  0084               	movwf	4
  2324  001E  3001               	movlw	high __pbssBANK2
  2325  001F  0085               	movwf	5
  2326  0020  3041               	movlw	65
  2327  0021  318F  275B         	fcall	clear_ram0
  2328  0023                     end_of_initialization:	
  2329                           ;End of C runtime variable initialization code
  2330                           
  2331  0023                     __end_of__initialization:	
  2332  0023  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  2333  0024  0020               	movlb	0
  2334  0025  3182  2A34         	ljmp	_main	;jump to C main() function
  2335                           
  2336                           	psect	bssBANK0
  2337  0059                     __pbssBANK0:	
  2338  0059                     _TXPacket:	
  2339  0059                     	ds	1
  2340  005A                     _sleepLoop:	
  2341  005A                     	ds	1
  2342  005B                     _nrf24l01:	
  2343  005B                     	ds	1
  2344  005C                     _romData:	
  2345  005C                     	ds	19
  2346                           
  2347                           	psect	bssBANK1
  2348  00E2                     __pbssBANK1:	
  2349  00E2                     _counter:	
  2350  00E2                     	ds	2
  2351                           
  2352                           	psect	bssBANK2
  2353  0120                     __pbssBANK2:	
  2354  0120                     _romHolder:	
  2355  0120                     	ds	32
  2356  0140                     _RXPacket:	
  2357  0140                     	ds	33
  2358                           
  2359                           	psect	clrtext
  2360  0F5B                     clear_ram0:	
  2361                           ;	Called with FSR0 containing the base address, and
  2362                           ;	WREG with the size to clear
  2363                           
  2364  0F5B  0064               	clrwdt	;clear the watchdog before getting into this loop
  2365  0F5C                     clrloop0:	
  2366  0F5C  0180               	clrf	0	;clear RAM location pointed to by FSR
  2367  0F5D  3101               	addfsr 0,1
  2368  0F5E  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  2369  0F5F  2F5C               	goto	clrloop0	;have we reached the end yet?
  2370  0F60  3400               	retlw	0	;all done for this memory range, return
  2371                           
  2372                           	psect	cstackBANK1
  2373  00A0                     __pcstackBANK1:	
  2374  00A0                     loop@packet:	
  2375                           
  2376                           ; 33 bytes @ 0x0
  2377  00A0                     	ds	33
  2378  00C1                     main@packet:	
  2379                           
  2380                           ; 33 bytes @ 0x21
  2381  00C1                     	ds	33
  2382                           
  2383                           	psect	cstackCOMMON
  2384  0070                     __pcstackCOMMON:	
  2385  0070                     ?_nrf24l01ISR:	
  2386  0070                     ?_nrf24l01SetRXMode:	
  2387                           ; 1 bytes @ 0x0
  2388                           
  2389  0070                     ?_nrf24l01SendPacket:	
  2390                           ; 1 bytes @ 0x0
  2391                           
  2392  0070                     ?_nrf24l01Init:	
  2393                           ; 1 bytes @ 0x0
  2394                           
  2395  0070                     ?_flashRealod:	
  2396                           ; 1 bytes @ 0x0
  2397                           
  2398  0070                     ?_flashUpdate:	
  2399                           ; 1 bytes @ 0x0
  2400                           
  2401  0070                     ?_nrf24l01CELow:	
  2402                           ; 1 bytes @ 0x0
  2403                           
  2404  0070                     ??_nrf24l01CELow:	
  2405                           ; 1 bytes @ 0x0
  2406                           
  2407  0070                     ?_nrf24l01CEHigh:	
  2408                           ; 1 bytes @ 0x0
  2409                           
  2410  0070                     ??_nrf24l01CEHigh:	
  2411                           ; 1 bytes @ 0x0
  2412                           
  2413  0070                     ?_nrf24l01CSLow:	
  2414                           ; 1 bytes @ 0x0
  2415                           
  2416  0070                     ??_nrf24l01CSLow:	
  2417                           ; 1 bytes @ 0x0
  2418                           
  2419  0070                     ?_nrf24l01CSHigh:	
  2420                           ; 1 bytes @ 0x0
  2421                           
  2422  0070                     ??_nrf24l01CSHigh:	
  2423                           ; 1 bytes @ 0x0
  2424                           
  2425  0070                     ?_nrf24l01InterfaceInit:	
  2426                           ; 1 bytes @ 0x0
  2427                           
  2428  0070                     ?_nrf24l01SPISend:	
  2429                           ; 1 bytes @ 0x0
  2430                           
  2431  0070                     ??_nrf24l01SPISend:	
  2432                           ; 1 bytes @ 0x0
  2433                           
  2434  0070                     ?_nrf24l01SPIStart:	
  2435                           ; 1 bytes @ 0x0
  2436                           
  2437  0070                     ??_nrf24l01SPIStart:	
  2438                           ; 1 bytes @ 0x0
  2439                           
  2440  0070                     ?_nrf24l01SPIEnd:	
  2441                           ; 1 bytes @ 0x0
  2442                           
  2443  0070                     ??_nrf24l01SPIEnd:	
  2444                           ; 1 bytes @ 0x0
  2445                           
  2446  0070                     ?_enableInterrupts:	
  2447                           ; 1 bytes @ 0x0
  2448                           
  2449  0070                     ??_enableInterrupts:	
  2450                           ; 1 bytes @ 0x0
  2451                           
  2452  0070                     ?_exception:	
  2453                           ; 1 bytes @ 0x0
  2454                           
  2455  0070                     ?_ISR:	
  2456                           ; 1 bytes @ 0x0
  2457                           
  2458  0070                     ?_sleep:	
  2459                           ; 1 bytes @ 0x0
  2460                           
  2461  0070                     ?_loop:	
  2462                           ; 1 bytes @ 0x0
  2463                           
  2464  0070                     ?_main:	
  2465                           ; 1 bytes @ 0x0
  2466                           
  2467  0070                     ?_nrf24l01CheckACK:	
  2468                           ; 1 bytes @ 0x0
  2469                           
  2470  0070                     ?_nrf24l01ReceivePacket:	
  2471                           ; 1 bytes @ 0x0
  2472                           
  2473  0070                     ?_nrf24l01InitRegisters:	
  2474                           ; 1 bytes @ 0x0
  2475                           
  2476  0070                     ?i1_flashWriteByte:	
  2477                           ; 1 bytes @ 0x0
  2478                           
  2479  0070                     ?i1_flashUpdate:	
  2480                           ; 1 bytes @ 0x0
  2481                           
  2482  0070                     ?i1_nrf24l01SetRXMode:	
  2483                           ; 1 bytes @ 0x0
  2484                           
  2485  0070                     ?i1_memset:	
  2486                           ; 1 bytes @ 0x0
  2487                           
  2488  0070                     ?_strcmp:	
  2489                           ; 1 bytes @ 0x0
  2490                           
  2491  0070                     ?___wmul:	
  2492                           ; 2 bytes @ 0x0
  2493                           
  2494  0070                     nrf24l01SPISend@data:	
  2495                           ; 2 bytes @ 0x0
  2496                           
  2497  0070                     enableInterrupts@enable:	
  2498                           ; 1 bytes @ 0x0
  2499                           
  2500  0070                     nrf24l01InitRegisters@isReciever:	
  2501                           ; 1 bytes @ 0x0
  2502                           
  2503  0070                     strcmp@s2:	
  2504                           ; 1 bytes @ 0x0
  2505                           
  2506  0070                     ___wmul@multiplier:	
  2507                           ; 1 bytes @ 0x0
  2508                           
  2509  0070                     i1flashWriteByte@offset:	
  2510                           ; 2 bytes @ 0x0
  2511                           
  2512  0070                     i1memset@p1:	
  2513                           ; 2 bytes @ 0x0
  2514                           
  2515                           
  2516                           ; 2 bytes @ 0x0
  2517  0070                     	ds	1
  2518  0071                     ?i1_nrf24l01Send:	
  2519  0071                     i1nrf24l01Send@data:	
  2520                           ; 1 bytes @ 0x1
  2521                           
  2522                           
  2523                           ; 1 bytes @ 0x1
  2524  0071                     	ds	1
  2525  0072                     ??_strcmp:	
  2526  0072                     ??i1_nrf24l01Send:	
  2527                           ; 1 bytes @ 0x2
  2528                           
  2529  0072                     ___wmul@multiplicand:	
  2530                           ; 1 bytes @ 0x2
  2531                           
  2532  0072                     i1flashWriteByte@data:	
  2533                           ; 2 bytes @ 0x2
  2534                           
  2535  0072                     i1memset@c:	
  2536                           ; 2 bytes @ 0x2
  2537                           
  2538                           
  2539                           ; 2 bytes @ 0x2
  2540  0072                     	ds	1
  2541  0073                     strcmp@r:	
  2542  0073                     i1nrf24l01Send@command:	
  2543                           ; 1 bytes @ 0x3
  2544                           
  2545                           
  2546                           ; 1 bytes @ 0x3
  2547  0073                     	ds	1
  2548  0074                     ??___wmul:	
  2549  0074                     ??i1_flashWriteByte:	
  2550                           ; 1 bytes @ 0x4
  2551                           
  2552  0074                     ??i1_nrf24l01SetRXMode:	
  2553                           ; 1 bytes @ 0x4
  2554                           
  2555  0074                     strcmp@s1:	
  2556                           ; 1 bytes @ 0x4
  2557                           
  2558  0074                     ___wmul@product:	
  2559                           ; 1 bytes @ 0x4
  2560                           
  2561  0074                     i1flashWriteByte@address:	
  2562                           ; 2 bytes @ 0x4
  2563                           
  2564  0074                     i1memset@n:	
  2565                           ; 2 bytes @ 0x4
  2566                           
  2567                           
  2568                           ; 2 bytes @ 0x4
  2569  0074                     	ds	1
  2570  0075                     i1nrf24l01SetRXMode@config:	
  2571                           
  2572                           ; 1 bytes @ 0x5
  2573  0075                     	ds	1
  2574  0076                     ??i1_flashUpdate:	
  2575  0076                     ??i1_memset:	
  2576                           ; 1 bytes @ 0x6
  2577                           
  2578  0076                     i1nrf24l01SetRXMode@rxMode:	
  2579                           ; 1 bytes @ 0x6
  2580                           
  2581  0076                     i1memset@p:	
  2582                           ; 1 bytes @ 0x6
  2583                           
  2584                           
  2585                           ; 2 bytes @ 0x6
  2586  0076                     	ds	1
  2587  0077                     ??_nrf24l01CheckACK:	
  2588                           
  2589                           ; 1 bytes @ 0x7
  2590  0077                     	ds	1
  2591  0078                     ??_nrf24l01ReceivePacket:	
  2592  0078                     i1flashUpdate@i:	
  2593                           ; 1 bytes @ 0x8
  2594                           
  2595                           
  2596                           ; 2 bytes @ 0x8
  2597  0078                     	ds	1
  2598  0079                     nrf24l01ReceivePacket@width:	
  2599                           
  2600                           ; 1 bytes @ 0x9
  2601  0079                     	ds	1
  2602  007A                     ??_exception:	
  2603  007A                     nrf24l01ReceivePacket@i:	
  2604                           ; 1 bytes @ 0xA
  2605                           
  2606                           
  2607                           ; 1 bytes @ 0xA
  2608  007A                     	ds	2
  2609  007C                     exception@exception:	
  2610                           
  2611                           ; 1 bytes @ 0xC
  2612  007C                     	ds	1
  2613  007D                     ??_nrf24l01ISR:	
  2614                           
  2615                           ; 1 bytes @ 0xD
  2616  007D                     	ds	1
  2617  007E                     ??_ISR:	
  2618                           
  2619                           	psect	cstackBANK0
  2620  0020                     __pcstackBANK0:	
  2621                           ; 1 bytes @ 0xE
  2622                           
  2623  0020                     nrf24l01ISR@status:	
  2624                           
  2625                           ; 1 bytes @ 0x0
  2626  0020                     	ds	1
  2627  0021                     ?_strcat:	
  2628  0021                     ?_strcpy:	
  2629                           ; 1 bytes @ 0x1
  2630                           
  2631  0021                     ?_flashWriteByte:	
  2632                           ; 1 bytes @ 0x1
  2633                           
  2634  0021                     ??_nrf24l01InterfaceInit:	
  2635                           ; 1 bytes @ 0x1
  2636                           
  2637  0021                     ??_sleep:	
  2638                           ; 1 bytes @ 0x1
  2639                           
  2640  0021                     ?_nrf24l01Send:	
  2641                           ; 1 bytes @ 0x1
  2642                           
  2643  0021                     ?_memset:	
  2644                           ; 1 bytes @ 0x1
  2645                           
  2646  0021                     ?_strlen:	
  2647                           ; 2 bytes @ 0x1
  2648                           
  2649  0021                     ?_flashReadByte:	
  2650                           ; 2 bytes @ 0x1
  2651                           
  2652  0021                     ?___lmul:	
  2653                           ; 2 bytes @ 0x1
  2654                           
  2655  0021                     ?___lldiv:	
  2656                           ; 4 bytes @ 0x1
  2657                           
  2658  0021                     ?___llmod:	
  2659                           ; 4 bytes @ 0x1
  2660                           
  2661  0021                     nrf24l01Send@data:	
  2662                           ; 4 bytes @ 0x1
  2663                           
  2664  0021                     flashWriteByte@offset:	
  2665                           ; 1 bytes @ 0x1
  2666                           
  2667  0021                     flashReadByte@offset:	
  2668                           ; 2 bytes @ 0x1
  2669                           
  2670  0021                     memset@p1:	
  2671                           ; 2 bytes @ 0x1
  2672                           
  2673  0021                     strcat@from:	
  2674                           ; 2 bytes @ 0x1
  2675                           
  2676  0021                     strcpy@from:	
  2677                           ; 2 bytes @ 0x1
  2678                           
  2679  0021                     ___lmul@multiplier:	
  2680                           ; 2 bytes @ 0x1
  2681                           
  2682  0021                     ___lldiv@divisor:	
  2683                           ; 4 bytes @ 0x1
  2684                           
  2685  0021                     ___llmod@divisor:	
  2686                           ; 4 bytes @ 0x1
  2687                           
  2688                           
  2689                           ; 4 bytes @ 0x1
  2690  0021                     	ds	1
  2691  0022                     ??_nrf24l01Send:	
  2692                           
  2693                           ; 1 bytes @ 0x2
  2694  0022                     	ds	1
  2695  0023                     ??_strcat:	
  2696  0023                     ??_strcpy:	
  2697                           ; 1 bytes @ 0x3
  2698                           
  2699  0023                     ??_strlen:	
  2700                           ; 1 bytes @ 0x3
  2701                           
  2702  0023                     ??_flashReadByte:	
  2703                           ; 1 bytes @ 0x3
  2704                           
  2705  0023                     nrf24l01Send@command:	
  2706                           ; 1 bytes @ 0x3
  2707                           
  2708  0023                     flashWriteByte@data:	
  2709                           ; 1 bytes @ 0x3
  2710                           
  2711  0023                     memset@c:	
  2712                           ; 2 bytes @ 0x3
  2713                           
  2714                           
  2715                           ; 2 bytes @ 0x3
  2716  0023                     	ds	1
  2717  0024                     ??_nrf24l01SetRXMode:	
  2718  0024                     ??_nrf24l01InitRegisters:	
  2719                           ; 1 bytes @ 0x4
  2720                           
  2721  0024                     strcat@cp:	
  2722                           ; 1 bytes @ 0x4
  2723                           
  2724  0024                     strcpy@to:	
  2725                           ; 1 bytes @ 0x4
  2726                           
  2727                           
  2728                           ; 1 bytes @ 0x4
  2729  0024                     	ds	1
  2730  0025                     ??_flashWriteByte:	
  2731  0025                     nrf24l01SetRXMode@config:	
  2732                           ; 1 bytes @ 0x5
  2733                           
  2734  0025                     nrf24l01InitRegisters@channel:	
  2735                           ; 1 bytes @ 0x5
  2736                           
  2737  0025                     strcat@to:	
  2738                           ; 1 bytes @ 0x5
  2739                           
  2740  0025                     strcpy@cp:	
  2741                           ; 1 bytes @ 0x5
  2742                           
  2743  0025                     flashWriteByte@address:	
  2744                           ; 1 bytes @ 0x5
  2745                           
  2746  0025                     memset@n:	
  2747                           ; 2 bytes @ 0x5
  2748                           
  2749  0025                     ___lmul@multiplicand:	
  2750                           ; 2 bytes @ 0x5
  2751                           
  2752  0025                     ___lldiv@dividend:	
  2753                           ; 4 bytes @ 0x5
  2754                           
  2755  0025                     ___llmod@dividend:	
  2756                           ; 4 bytes @ 0x5
  2757                           
  2758                           
  2759                           ; 4 bytes @ 0x5
  2760  0025                     	ds	1
  2761  0026                     nrf24l01SetRXMode@rxMode:	
  2762  0026                     nrf24l01InitRegisters@setupAW:	
  2763                           ; 1 bytes @ 0x6
  2764                           
  2765  0026                     flashReadByte@result:	
  2766                           ; 1 bytes @ 0x6
  2767                           
  2768                           
  2769                           ; 2 bytes @ 0x6
  2770  0026                     	ds	1
  2771  0027                     ??_memset:	
  2772  0027                     ??_flashUpdate:	
  2773                           ; 1 bytes @ 0x7
  2774                           
  2775  0027                     nrf24l01InitRegisters@feature:	
  2776                           ; 1 bytes @ 0x7
  2777                           
  2778  0027                     strlen@s:	
  2779                           ; 1 bytes @ 0x7
  2780                           
  2781  0027                     memset@p:	
  2782                           ; 1 bytes @ 0x7
  2783                           
  2784                           
  2785                           ; 2 bytes @ 0x7
  2786  0027                     	ds	1
  2787  0028                     nrf24l01InitRegisters@rfSetup:	
  2788  0028                     strlen@cp:	
  2789                           ; 1 bytes @ 0x8
  2790                           
  2791  0028                     flashReadByte@address:	
  2792                           ; 1 bytes @ 0x8
  2793                           
  2794                           
  2795                           ; 2 bytes @ 0x8
  2796  0028                     	ds	1
  2797  0029                     ??_nrf24l01SendPacket:	
  2798  0029                     ??___lmul:	
  2799                           ; 1 bytes @ 0x9
  2800                           
  2801  0029                     ??___lldiv:	
  2802                           ; 1 bytes @ 0x9
  2803                           
  2804  0029                     ??___llmod:	
  2805                           ; 1 bytes @ 0x9
  2806                           
  2807  0029                     nrf24l01InitRegisters@status:	
  2808                           ; 1 bytes @ 0x9
  2809                           
  2810  0029                     flashUpdate@i:	
  2811                           ; 1 bytes @ 0x9
  2812                           
  2813  0029                     ___lmul@product:	
  2814                           ; 2 bytes @ 0x9
  2815                           
  2816                           
  2817                           ; 4 bytes @ 0x9
  2818  0029                     	ds	1
  2819  002A                     ??_flashRealod:	
  2820  002A                     nrf24l01InitRegisters@enRXAddr:	
  2821                           ; 1 bytes @ 0xA
  2822                           
  2823  002A                     ___llmod@counter:	
  2824                           ; 1 bytes @ 0xA
  2825                           
  2826  002A                     ___lldiv@quotient:	
  2827                           ; 1 bytes @ 0xA
  2828                           
  2829                           
  2830                           ; 4 bytes @ 0xA
  2831  002A                     	ds	1
  2832  002B                     nrf24l01SendPacket@Packet:	
  2833  002B                     nrf24l01InitRegisters@enAA:	
  2834                           ; 1 bytes @ 0xB
  2835                           
  2836  002B                     flashRealod@i:	
  2837                           ; 1 bytes @ 0xB
  2838                           
  2839                           
  2840                           ; 2 bytes @ 0xB
  2841  002B                     	ds	1
  2842  002C                     nrf24l01SendPacket@i:	
  2843  002C                     nrf24l01InitRegisters@DynPD:	
  2844                           ; 1 bytes @ 0xC
  2845                           
  2846                           
  2847                           ; 1 bytes @ 0xC
  2848  002C                     	ds	1
  2849  002D                     nrf24l01InitRegisters@config:	
  2850                           
  2851                           ; 1 bytes @ 0xD
  2852  002D                     	ds	1
  2853  002E                     ??_nrf24l01Init:	
  2854  002E                     ___lldiv@counter:	
  2855                           ; 1 bytes @ 0xE
  2856                           
  2857                           
  2858                           ; 1 bytes @ 0xE
  2859  002E                     	ds	1
  2860  002F                     ?_ultoa:	
  2861  002F                     ?_getADCValue:	
  2862                           ; 1 bytes @ 0xF
  2863                           
  2864  002F                     getADCValue@divider:	
  2865                           ; 4 bytes @ 0xF
  2866                           
  2867  002F                     ultoa@val:	
  2868                           ; 4 bytes @ 0xF
  2869                           
  2870                           
  2871                           ; 4 bytes @ 0xF
  2872  002F                     	ds	1
  2873  0030                     nrf24l01Init@isReciever:	
  2874                           
  2875                           ; 1 bytes @ 0x10
  2876  0030                     	ds	3
  2877  0033                     ??_getADCValue:	
  2878  0033                     ultoa@base:	
  2879                           ; 1 bytes @ 0x13
  2880                           
  2881                           
  2882                           ; 2 bytes @ 0x13
  2883  0033                     	ds	2
  2884  0035                     ??_ultoa:	
  2885                           
  2886                           ; 1 bytes @ 0x15
  2887  0035                     	ds	1
  2888  0036                     ultoa@v:	
  2889                           
  2890                           ; 4 bytes @ 0x16
  2891  0036                     	ds	1
  2892  0037                     getADCValue@channel:	
  2893                           
  2894                           ; 1 bytes @ 0x17
  2895  0037                     	ds	1
  2896  0038                     getADCValue@adcLoop:	
  2897                           
  2898                           ; 1 bytes @ 0x18
  2899  0038                     	ds	1
  2900  0039                     getADCValue@adcSum:	
  2901                           
  2902                           ; 4 bytes @ 0x19
  2903  0039                     	ds	1
  2904  003A                     ultoa@c:	
  2905                           
  2906                           ; 1 bytes @ 0x1A
  2907  003A                     	ds	1
  2908  003B                     ultoa@buf:	
  2909                           
  2910                           ; 1 bytes @ 0x1B
  2911  003B                     	ds	2
  2912  003D                     ?_setMessage:	
  2913  003D                     setMessage@topic:	
  2914                           ; 1 bytes @ 0x1D
  2915                           
  2916                           
  2917                           ; 2 bytes @ 0x1D
  2918  003D                     	ds	2
  2919  003F                     setMessage@value:	
  2920                           
  2921                           ; 4 bytes @ 0x1F
  2922  003F                     	ds	4
  2923  0043                     ??_setMessage:	
  2924  0043                     setMessage@tempString:	
  2925                           ; 1 bytes @ 0x23
  2926                           
  2927                           
  2928                           ; 16 bytes @ 0x23
  2929  0043                     	ds	16
  2930  0053                     setMessage@packet:	
  2931                           
  2932                           ; 1 bytes @ 0x33
  2933  0053                     	ds	1
  2934  0054                     ??_loop:	
  2935                           
  2936                           ; 1 bytes @ 0x34
  2937  0054                     	ds	4
  2938  0058                     ??_main:	
  2939                           
  2940                           ; 1 bytes @ 0x38
  2941  0058                     	ds	1
  2942                           
  2943                           	psect	maintext
  2944  0234                     __pmaintext:	
  2945 ;;
  2946 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  2947 ;;
  2948 ;; *************** function _main *****************
  2949 ;; Defined at:
  2950 ;;		line 133 in file "main.c"
  2951 ;; Parameters:    Size  Location     Type
  2952 ;;		None
  2953 ;; Auto vars:     Size  Location     Type
  2954 ;;  packet         33   33[BANK1 ] struct .
  2955 ;; Return value:  Size  Location     Type
  2956 ;;                  1    wreg      void 
  2957 ;; Registers used:
  2958 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2959 ;; Tracked objects:
  2960 ;;		On entry : B1F/0
  2961 ;;		On exit  : 0/0
  2962 ;;		Unchanged: 0/0
  2963 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2964 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2965 ;;      Locals:         0       0      33       0       0       0       0       0       0       0       0       0       
      +0       0
  2966 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2967 ;;      Totals:         0       1      33       0       0       0       0       0       0       0       0       0       
      +0       0
  2968 ;;Total ram usage:       34 bytes
  2969 ;; Hardware stack levels required when called:   13
  2970 ;; This function calls:
  2971 ;;		_flashRealod
  2972 ;;		_flashUpdate
  2973 ;;		_loop
  2974 ;;		_nrf24l01Init
  2975 ;;		_nrf24l01SendPacket
  2976 ;;		_setMessage
  2977 ;;		_sleep
  2978 ;;		_strcpy
  2979 ;; This function is called by:
  2980 ;;		Startup code after reset
  2981 ;; This function uses a non-reentrant model
  2982 ;;
  2983                           
  2984                           
  2985                           ;psect for function _main
  2986  0234                     _main:	
  2987                           
  2988                           ;main.c: 136: ANSELA = 0x00;
  2989                           
  2990                           ;incstack = 0
  2991                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  2992  0234  0023               	movlb	3	; select bank3
  2993  0235  018C               	clrf	12	;volatile
  2994                           
  2995                           ;main.c: 137: ANSELC = 0x00;
  2996  0236  018E               	clrf	14	;volatile
  2997                           
  2998                           ;main.c: 139: ODCONA = 0x00;
  2999  0237  0025               	movlb	5	; select bank5
  3000  0238  018C               	clrf	12	;volatile
  3001                           
  3002                           ;main.c: 140: ODCONC = 0x00;
  3003  0239  018E               	clrf	14	;volatile
  3004                           
  3005                           ;main.c: 145: INLVLA = 0x00;
  3006  023A  0027               	movlb	7	; select bank7
  3007  023B  018C               	clrf	12	;volatile
  3008                           
  3009                           ;main.c: 146: INLVLC = 0x00;
  3010  023C  018E               	clrf	14	;volatile
  3011                           
  3012                           ;main.c: 148: WPUA = 0x00;
  3013  023D  0024               	movlb	4	; select bank4
  3014  023E  018C               	clrf	12	;volatile
  3015                           
  3016                           ;main.c: 149: WPUC = 0x00;
  3017  023F  018E               	clrf	14	;volatile
  3018                           
  3019                           ;main.c: 151: TRISCbits.TRISC5 = 0;
  3020  0240  0021               	movlb	1	; select bank1
  3021  0241  128E               	bcf	14,5	;volatile
  3022                           
  3023                           ;main.c: 152: TRISCbits.TRISC4 = 0;
  3024  0242  120E               	bcf	14,4	;volatile
  3025                           
  3026                           ;main.c: 154: PORTCbits.RC4 = 0;
  3027  0243  0020               	movlb	0	; select bank0
  3028  0244  120E               	bcf	14,4	;volatile
  3029                           
  3030                           ;main.c: 161: INTCONbits.PEIE = 0;
  3031  0245  130B               	bcf	11,6	;volatile
  3032                           
  3033                           ;main.c: 162: INTCONbits.GIE = 0;
  3034  0246  138B               	bcf	11,7	;volatile
  3035                           
  3036                           ;main.c: 164: OSCCON1bits.NOSC = 0b000;
  3037  0247  308F               	movlw	-113
  3038  0248  0032               	movlb	18	; select bank18
  3039  0249  0599               	andwf	25,f	;volatile
  3040                           
  3041                           ;main.c: 165: OSCCON1bits.NDIV = 0b000;
  3042  024A  30F0               	movlw	-16
  3043  024B  0599               	andwf	25,f	;volatile
  3044                           
  3045                           ;main.c: 167: _delay((unsigned long)((10)*(16000000/4000.0)));
  3046  024C  3034               	movlw	52
  3047  024D  0020               	movlb	0	; select bank0
  3048  024E  00D8               	movwf	??_main
  3049  024F  30F1               	movlw	241
  3050  0250                     u1497:	
  3051  0250  0B89               	decfsz	9,f
  3052  0251  2A50               	goto	u1497
  3053  0252  0BD8               	decfsz	??_main,f
  3054  0253  2A50               	goto	u1497
  3055  0254  3200               	nop2
  3056                           
  3057                           ;main.c: 169: flashRealod();
  3058  0255  3187  277A  3182   	fcall	_flashRealod
  3059                           
  3060                           ;main.c: 173: if (romData.check != 0x05){
  3061  0258  3005               	movlw	5
  3062  0259  0020               	movlb	0	; select bank0
  3063  025A  065C               	xorwf	_romData,w
  3064  025B  1903               	btfsc	3,2
  3065  025C  2A6F               	goto	l2861
  3066                           
  3067                           ;main.c: 174: romData.check = 0x05;
  3068  025D  3005               	movlw	5
  3069  025E  00D8               	movwf	??_main
  3070  025F  0858               	movf	??_main,w
  3071  0260  00DC               	movwf	_romData
  3072                           
  3073                           ;main.c: 175: strcpy(romData.name, "UW1");
  3074  0261  302C               	movlw	low (STR_8| (0+32768))
  3075  0262  00A1               	movwf	strcpy@from
  3076  0263  3090               	movlw	high (STR_8| (0+32768))
  3077  0264  00A2               	movwf	strcpy@from+1
  3078  0265  305D               	movlw	(low ((_romData| 0+1)))& (0+255)
  3079  0266  3187  27D6  3182   	fcall	_strcpy
  3080                           
  3081                           ;main.c: 176: romData.bootMode = 0x00;
  3082  0269  0020               	movlb	0	; select bank0
  3083  026A  01ED               	clrf	_romData+17
  3084  026B  01EE               	clrf	_romData+18
  3085                           
  3086                           ;main.c: 177: flashUpdate();
  3087  026C  3187  2716  3182   	fcall	_flashUpdate
  3088  026F                     l2861:	
  3089                           
  3090                           ;main.c: 178: };main.c: 180: nrf24l01Init(0);
  3091  026F  3000               	movlw	0
  3092  0270  3186  267B  3182   	fcall	_nrf24l01Init
  3093                           
  3094                           ;main.c: 187: ADCON0bits.ADON = 0;
  3095  0273  0021               	movlb	1	; select bank1
  3096  0274  101D               	bcf	29,0	;volatile
  3097                           
  3098                           ;main.c: 190: ANSELAbits.ANSA4 = 1;
  3099  0275  0023               	movlb	3	; select bank3
  3100  0276  160C               	bsf	12,4	;volatile
  3101                           
  3102                           ;main.c: 191: TRISAbits.TRISA4 = 1;
  3103  0277  0021               	movlb	1	; select bank1
  3104  0278  160C               	bsf	12,4	;volatile
  3105                           
  3106                           ;main.c: 192: WPUAbits.WPUA4 = 0;
  3107  0279  0024               	movlb	4	; select bank4
  3108  027A  120C               	bcf	12,4	;volatile
  3109                           
  3110                           ;main.c: 195: ANSELCbits.ANSC3 = 1;
  3111  027B  0023               	movlb	3	; select bank3
  3112  027C  158E               	bsf	14,3	;volatile
  3113                           
  3114                           ;main.c: 196: TRISCbits.TRISC3 = 1;
  3115  027D  0021               	movlb	1	; select bank1
  3116  027E  158E               	bsf	14,3	;volatile
  3117                           
  3118                           ;main.c: 199: FVRCONbits.TSEN = 0;
  3119  027F  0022               	movlb	2	; select bank2
  3120  0280  1297               	bcf	23,5	;volatile
  3121                           
  3122                           ;main.c: 200: FVRCONbits.TSRNG = 0;
  3123  0281  1217               	bcf	23,4	;volatile
  3124                           
  3125                           ;main.c: 201: FVRCONbits.TSEN = 1;
  3126  0282  1697               	bsf	23,5	;volatile
  3127                           
  3128                           ;main.c: 204: FVRCONbits.FVREN = 0;
  3129  0283  1397               	bcf	23,7	;volatile
  3130                           
  3131                           ;main.c: 205: FVRCONbits.ADFVR = 1;
  3132  0284  0817               	movf	23,w	;volatile
  3133  0285  39FC               	andlw	-4
  3134  0286  3801               	iorlw	1
  3135  0287  0097               	movwf	23	;volatile
  3136                           
  3137                           ;main.c: 206: FVRCONbits.FVREN = 1;
  3138  0288  1797               	bsf	23,7	;volatile
  3139                           
  3140                           ;main.c: 208: ADCON1bits.ADCS = 0b111;
  3141  0289  3070               	movlw	112
  3142  028A  0021               	movlb	1	; select bank1
  3143  028B  049E               	iorwf	30,f	;volatile
  3144                           
  3145                           ;main.c: 209: ADCON1bits.ADFM = 1;
  3146  028C  179E               	bsf	30,7	;volatile
  3147                           
  3148                           ;main.c: 210: ADCON1bits.ADNREF = 0b0;
  3149  028D  111E               	bcf	30,2	;volatile
  3150                           
  3151                           ;main.c: 211: ADCON1bits.ADPREF = 0b00;
  3152  028E  30FC               	movlw	-4
  3153  028F  059E               	andwf	30,f	;volatile
  3154                           
  3155                           ;main.c: 213: ADCON0bits.CHS = 3;
  3156  0290  081D               	movf	29,w	;volatile
  3157  0291  3903               	andlw	-253
  3158  0292  380C               	iorlw	12
  3159  0293  009D               	movwf	29	;volatile
  3160                           
  3161                           ;main.c: 214: ADCON0bits.ADON = 1;
  3162  0294  141D               	bsf	29,0	;volatile
  3163                           
  3164                           ;main.c: 219: TRISAbits.TRISA2 = 1;
  3165  0295  150C               	bsf	12,2	;volatile
  3166                           
  3167                           ;main.c: 220: PIE0bits.INTE = 1;
  3168  0296  1410               	bsf	16,0	;volatile
  3169                           
  3170                           ;main.c: 221: INTCONbits.INTEDG = 0;
  3171  0297  100B               	bcf	11,0	;volatile
  3172                           
  3173                           ;main.c: 225: WDTCONbits.WDTPS = 10;
  3174  0298  0817               	movf	23,w	;volatile
  3175  0299  39C1               	andlw	-63
  3176  029A  3814               	iorlw	20
  3177  029B  0097               	movwf	23	;volatile
  3178                           
  3179                           ;main.c: 228: TRISAbits.TRISA5 = 0;
  3180  029C  128C               	bcf	12,5	;volatile
  3181                           
  3182                           ;main.c: 229: PORTAbits.RA5 = 0;
  3183  029D  0020               	movlb	0	; select bank0
  3184  029E  128C               	bcf	12,5	;volatile
  3185                           
  3186                           ;main.c: 232: INTCONbits.PEIE = 1;
  3187  029F  170B               	bsf	11,6	;volatile
  3188                           
  3189                           ;main.c: 233: INTCONbits.GIE = 1;
  3190  02A0  178B               	bsf	11,7	;volatile
  3191                           
  3192                           ;main.c: 235: nrf24l01Packet_t packet;;main.c: 237: setMessage(&packet, "BOOT", romData.
      +                          bootMode);
  3193  02A1  3027               	movlw	low (STR_9| (0+32768))
  3194  02A2  00BD               	movwf	setMessage@topic
  3195  02A3  3090               	movlw	high (STR_9| (0+32768))
  3196  02A4  00BE               	movwf	setMessage@topic+1
  3197  02A5  086D               	movf	_romData+17,w
  3198  02A6  00BF               	movwf	setMessage@value
  3199  02A7  086E               	movf	_romData+18,w
  3200  02A8  00C0               	movwf	setMessage@value+1
  3201  02A9  01C1               	clrf	setMessage@value+2
  3202  02AA  01C2               	clrf	setMessage@value+3
  3203  02AB  30C1               	movlw	(low (main@packet| 0))& (0+255)
  3204  02AC  3183  23CE  3182   	fcall	_setMessage
  3205                           
  3206                           ;main.c: 238: packet.packetData.byte = 0;
  3207  02AF  0021               	movlb	1	; select bank1
  3208  02B0  01C1               	clrf	main@packet^(0+128)
  3209                           
  3210                           ;main.c: 239: packet.packetData.ACKRequest = 0;
  3211  02B1  10C1               	bcf	main@packet^(0+128),1
  3212                           
  3213                           ;main.c: 240: nrf24l01SendPacket(&packet);
  3214  02B2  30C1               	movlw	(low (main@packet| 0))& (0+255)
  3215  02B3  3181  21A4  3182   	fcall	_nrf24l01SendPacket
  3216                           
  3217                           ;main.c: 241: sleep();
  3218  02B6  318F  2778  3182   	fcall	_sleep
  3219  02B9                     l2925:	
  3220                           ;main.c: 243: while(1){
  3221                           
  3222                           
  3223                           ;main.c: 244: loop();
  3224  02B9  3180  2027  3182   	fcall	_loop
  3225  02BC  2AB9               	goto	l2925
  3226  02BD                     __end_of_main:	
  3227                           ;main.c: 245: };main.c: 247: return;
  3228                           
  3229                           
  3230                           	psect	text1
  3231  07D6                     __ptext1:	
  3232 ;; *************** function _strcpy *****************
  3233 ;; Defined at:
  3234 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\strcpy.c"
  3235 ;; Parameters:    Size  Location     Type
  3236 ;;  to              1    wreg     PTR unsigned char 
  3237 ;;		 -> romData(19), 
  3238 ;;  from            2    1[BANK0 ] PTR const unsigned char 
  3239 ;;		 -> STR_8(4), 
  3240 ;; Auto vars:     Size  Location     Type
  3241 ;;  to              1    4[BANK0 ] PTR unsigned char 
  3242 ;;		 -> romData(19), 
  3243 ;;  cp              1    5[BANK0 ] PTR unsigned char 
  3244 ;;		 -> romData(19), 
  3245 ;; Return value:  Size  Location     Type
  3246 ;;                  1    wreg      PTR unsigned char 
  3247 ;; Registers used:
  3248 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath
  3249 ;; Tracked objects:
  3250 ;;		On entry : 0/0
  3251 ;;		On exit  : 0/0
  3252 ;;		Unchanged: 0/0
  3253 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3254 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3255 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3256 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3257 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3258 ;;Total ram usage:        5 bytes
  3259 ;; Hardware stack levels used:    1
  3260 ;; Hardware stack levels required when called:    7
  3261 ;; This function calls:
  3262 ;;		Nothing
  3263 ;; This function is called by:
  3264 ;;		_main
  3265 ;; This function uses a non-reentrant model
  3266 ;;
  3267                           
  3268                           
  3269                           ;psect for function _strcpy
  3270  07D6                     _strcpy:	
  3271                           
  3272                           ;incstack = 0
  3273                           ; Regs used in _strcpy: [wreg-fsr1h+status,2+status,0+pclath]
  3274                           ;strcpy@to stored from wreg
  3275  07D6  0020               	movlb	0	; select bank0
  3276  07D7  00A4               	movwf	strcpy@to
  3277  07D8  0824               	movf	strcpy@to,w
  3278  07D9  00A3               	movwf	??_strcpy
  3279  07DA  0823               	movf	??_strcpy,w
  3280  07DB  00A5               	movwf	strcpy@cp
  3281  07DC                     l2559:	
  3282  07DC  0825               	movf	strcpy@cp,w
  3283  07DD  0086               	movwf	6
  3284  07DE  0187               	clrf	7
  3285  07DF  0821               	movf	strcpy@from,w
  3286  07E0  0084               	movwf	4
  3287  07E1  0822               	movf	strcpy@from+1,w
  3288  07E2  0085               	movwf	5
  3289  07E3  0800               	movf	0,w	;code access
  3290  07E4  3FC0               	movwi [0]fsr1
  3291  07E5  0889               	movf	9,f
  3292  07E6  1903               	btfsc	3,2
  3293  07E7  0008               	return
  3294  07E8  3001               	movlw	1
  3295  07E9  00A3               	movwf	??_strcpy
  3296  07EA  0823               	movf	??_strcpy,w
  3297  07EB  07A5               	addwf	strcpy@cp,f
  3298  07EC  3001               	movlw	1
  3299  07ED  07A1               	addwf	strcpy@from,f
  3300  07EE  3000               	movlw	0
  3301  07EF  3DA2               	addwfc	strcpy@from+1,f
  3302  07F0  2FDC               	goto	l2559
  3303  07F1                     __end_of_strcpy:	
  3304                           ;	Return value of _strcpy is never used
  3305                           
  3306                           
  3307                           	psect	text2
  3308  067B                     __ptext2:	
  3309 ;; *************** function _nrf24l01Init *****************
  3310 ;; Defined at:
  3311 ;;		line 363 in file "nrf24l01.c"
  3312 ;; Parameters:    Size  Location     Type
  3313 ;;  isReciever      1    wreg     unsigned char 
  3314 ;; Auto vars:     Size  Location     Type
  3315 ;;  isReciever      1   16[BANK0 ] unsigned char 
  3316 ;; Return value:  Size  Location     Type
  3317 ;;                  1    wreg      void 
  3318 ;; Registers used:
  3319 ;;		wreg, status,2, status,0, pclath, cstack
  3320 ;; Tracked objects:
  3321 ;;		On entry : 0/0
  3322 ;;		On exit  : 0/0
  3323 ;;		Unchanged: 0/0
  3324 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3325 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3326 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3327 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3328 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3329 ;;Total ram usage:        3 bytes
  3330 ;; Hardware stack levels used:    1
  3331 ;; Hardware stack levels required when called:   11
  3332 ;; This function calls:
  3333 ;;		_nrf24l01CEHigh
  3334 ;;		_nrf24l01CELow
  3335 ;;		_nrf24l01InitRegisters
  3336 ;;		_nrf24l01InterfaceInit
  3337 ;; This function is called by:
  3338 ;;		_main
  3339 ;; This function uses a non-reentrant model
  3340 ;;
  3341                           
  3342                           
  3343                           ;psect for function _nrf24l01Init
  3344  067B                     _nrf24l01Init:	
  3345                           
  3346                           ;incstack = 0
  3347                           ; Regs used in _nrf24l01Init: [wreg+status,2+status,0+pclath+cstack]
  3348                           ;nrf24l01Init@isReciever stored from wreg
  3349  067B  0020               	movlb	0	; select bank0
  3350  067C  00B0               	movwf	nrf24l01Init@isReciever
  3351                           
  3352                           ;nrf24l01.c: 366: nrf24l01InterfaceInit();
  3353  067D  3187  27BA  3186   	fcall	_nrf24l01InterfaceInit
  3354                           
  3355                           ;nrf24l01.c: 371: nrf24l01CELow();
  3356  0680  318F  2752  3186   	fcall	_nrf24l01CELow
  3357                           
  3358                           ;nrf24l01.c: 373: _delay((unsigned long)((50000)*(16000000/4000000.0)));
  3359  0683  3002               	movlw	2
  3360  0684  0020               	movlb	0	; select bank0
  3361  0685  00AF               	movwf	??_nrf24l01Init+1
  3362  0686  3004               	movlw	4
  3363  0687  00AE               	movwf	??_nrf24l01Init
  3364  0688  30BA               	movlw	186
  3365  0689                     u1507:	
  3366  0689  0B89               	decfsz	9,f
  3367  068A  2E89               	goto	u1507
  3368  068B  0BAE               	decfsz	??_nrf24l01Init,f
  3369  068C  2E89               	goto	u1507
  3370  068D  0BAF               	decfsz	??_nrf24l01Init+1,f
  3371  068E  2E89               	goto	u1507
  3372  068F  0000               	nop
  3373                           
  3374                           ;nrf24l01.c: 375: nrf24l01InitRegisters(isReciever);
  3375  0690  0020               	movlb	0	; select bank0
  3376  0691  0830               	movf	nrf24l01Init@isReciever,w
  3377  0692  3180  20FA  3186   	fcall	_nrf24l01InitRegisters
  3378                           
  3379                           ;nrf24l01.c: 377: _delay((unsigned long)((50000)*(16000000/4000000.0)));
  3380  0695  3002               	movlw	2
  3381  0696  0020               	movlb	0	; select bank0
  3382  0697  00AF               	movwf	??_nrf24l01Init+1
  3383  0698  3004               	movlw	4
  3384  0699  00AE               	movwf	??_nrf24l01Init
  3385  069A  30BA               	movlw	186
  3386  069B                     u1517:	
  3387  069B  0B89               	decfsz	9,f
  3388  069C  2E9B               	goto	u1517
  3389  069D  0BAE               	decfsz	??_nrf24l01Init,f
  3390  069E  2E9B               	goto	u1517
  3391  069F  0BAF               	decfsz	??_nrf24l01Init+1,f
  3392  06A0  2E9B               	goto	u1517
  3393  06A1  0000               	nop
  3394                           
  3395                           ;nrf24l01.c: 379: nrf24l01CEHigh();
  3396  06A2  318F  274F         	fcall	_nrf24l01CEHigh
  3397  06A4  0008               	return
  3398  06A5                     __end_of_nrf24l01Init:	
  3399                           
  3400                           	psect	text3
  3401  07BA                     __ptext3:	
  3402 ;; *************** function _nrf24l01InterfaceInit *****************
  3403 ;; Defined at:
  3404 ;;		line 28 in file "interface.c"
  3405 ;; Parameters:    Size  Location     Type
  3406 ;;		None
  3407 ;; Auto vars:     Size  Location     Type
  3408 ;;		None
  3409 ;; Return value:  Size  Location     Type
  3410 ;;                  1    wreg      void 
  3411 ;; Registers used:
  3412 ;;		wreg, status,2, status,0
  3413 ;; Tracked objects:
  3414 ;;		On entry : 0/0
  3415 ;;		On exit  : 0/0
  3416 ;;		Unchanged: 0/0
  3417 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3418 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3419 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3420 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3421 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3422 ;;Total ram usage:        0 bytes
  3423 ;; Hardware stack levels used:    1
  3424 ;; Hardware stack levels required when called:    7
  3425 ;; This function calls:
  3426 ;;		Nothing
  3427 ;; This function is called by:
  3428 ;;		_nrf24l01Init
  3429 ;; This function uses a non-reentrant model
  3430 ;;
  3431                           
  3432                           
  3433                           ;psect for function _nrf24l01InterfaceInit
  3434  07BA                     _nrf24l01InterfaceInit:	
  3435                           
  3436                           ;interface.c: 30: TRISAbits.TRISA0 = 0;
  3437                           
  3438                           ;incstack = 0
  3439                           ; Regs used in _nrf24l01InterfaceInit: [wreg+status,2+status,0]
  3440  07BA  0021               	movlb	1	; select bank1
  3441  07BB  100C               	bcf	12,0	;volatile
  3442                           
  3443                           ;interface.c: 31: TRISAbits.TRISA1 = 0;
  3444  07BC  108C               	bcf	12,1	;volatile
  3445                           
  3446                           ;interface.c: 33: TRISCbits.TRISC1 = 1;
  3447  07BD  148E               	bsf	14,1	;volatile
  3448                           
  3449                           ;interface.c: 34: TRISCbits.TRISC2 = 0;
  3450  07BE  110E               	bcf	14,2	;volatile
  3451                           
  3452                           ;interface.c: 35: TRISCbits.TRISC0 = 0;
  3453  07BF  100E               	bcf	14,0	;volatile
  3454                           
  3455                           ;interface.c: 37: SSP1CON1bits.SSPEN = 0;
  3456  07C0  0024               	movlb	4	; select bank4
  3457  07C1  1295               	bcf	21,5	;volatile
  3458                           
  3459                           ;interface.c: 39: RC1PPSbits.RC1PPS = 0b10001;
  3460  07C2  003D               	movlb	29	; select bank29
  3461  07C3  0821               	movf	33,w	;volatile
  3462  07C4  39E0               	andlw	-32
  3463  07C5  3811               	iorlw	17
  3464  07C6  00A1               	movwf	33	;volatile
  3465                           
  3466                           ;interface.c: 40: RC2PPSbits.RC2PPS = 0b11001;
  3467  07C7  0822               	movf	34,w	;volatile
  3468  07C8  39E0               	andlw	-32
  3469  07C9  3819               	iorlw	25
  3470  07CA  00A2               	movwf	34	;volatile
  3471                           
  3472                           ;interface.c: 41: RC0PPSbits.RC0PPS = 0b11000;
  3473  07CB  0820               	movf	32,w	;volatile
  3474  07CC  39E0               	andlw	-32
  3475  07CD  3818               	iorlw	24
  3476  07CE  00A0               	movwf	32	;volatile
  3477                           
  3478                           ;interface.c: 43: SSP1CON1bits.CKP = 0;
  3479  07CF  0024               	movlb	4	; select bank4
  3480  07D0  1215               	bcf	21,4	;volatile
  3481                           
  3482                           ;interface.c: 44: SSP1STATbits.CKE = 1;
  3483  07D1  1714               	bsf	20,6	;volatile
  3484                           
  3485                           ;interface.c: 45: SSP1CON1bits.SSPM = 0b0000;
  3486  07D2  30F0               	movlw	-16
  3487  07D3  0595               	andwf	21,f	;volatile
  3488                           
  3489                           ;interface.c: 47: SSP1CON1bits.SSPEN = 1;
  3490  07D4  1695               	bsf	21,5	;volatile
  3491  07D5  0008               	return
  3492  07D6                     __end_of_nrf24l01InterfaceInit:	
  3493                           
  3494                           	psect	text4
  3495  00FA                     __ptext4:	
  3496 ;; *************** function _nrf24l01InitRegisters *****************
  3497 ;; Defined at:
  3498 ;;		line 278 in file "nrf24l01.c"
  3499 ;; Parameters:    Size  Location     Type
  3500 ;;  isReciever      1    wreg     unsigned char 
  3501 ;; Auto vars:     Size  Location     Type
  3502 ;;  isReciever      1    0[COMMON] unsigned char 
  3503 ;;  config          1   13[BANK0 ] struct .
  3504 ;;  DynPD           1   12[BANK0 ] struct .
  3505 ;;  enAA            1   11[BANK0 ] struct .
  3506 ;;  enRXAddr        1   10[BANK0 ] struct .
  3507 ;;  status          1    9[BANK0 ] struct .
  3508 ;;  rfSetup         1    8[BANK0 ] struct .
  3509 ;;  feature         1    7[BANK0 ] struct .
  3510 ;;  setupAW         1    6[BANK0 ] struct .
  3511 ;;  channel         1    5[BANK0 ] struct .
  3512 ;; Return value:  Size  Location     Type
  3513 ;;                  1    wreg      void 
  3514 ;; Registers used:
  3515 ;;		wreg, status,2, status,0, pclath, cstack
  3516 ;; Tracked objects:
  3517 ;;		On entry : 0/0
  3518 ;;		On exit  : 0/0
  3519 ;;		Unchanged: 0/0
  3520 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3521 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3522 ;;      Locals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3523 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3524 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3525 ;;Total ram usage:       10 bytes
  3526 ;; Hardware stack levels used:    1
  3527 ;; Hardware stack levels required when called:   10
  3528 ;; This function calls:
  3529 ;;		_nrf24l01Send
  3530 ;; This function is called by:
  3531 ;;		_nrf24l01Init
  3532 ;; This function uses a non-reentrant model
  3533 ;;
  3534                           
  3535                           
  3536                           ;psect for function _nrf24l01InitRegisters
  3537  00FA                     _nrf24l01InitRegisters:	
  3538                           
  3539                           ;nrf24l01.c: 280: n_CONFIG_t config;;nrf24l01.c: 282: config.PWR_UP = 0;
  3540                           
  3541                           ;incstack = 0
  3542                           ; Regs used in _nrf24l01InitRegisters: [wreg+status,2+status,0+pclath+cstack]
  3543  00FA  0020               	movlb	0	; select bank0
  3544  00FB  10AD               	bcf	nrf24l01InitRegisters@config,1
  3545                           
  3546                           ;nrf24l01.c: 283: nrf24l01Send(0b00100000 | 0x00, config.byte);
  3547  00FC  082D               	movf	nrf24l01InitRegisters@config,w
  3548  00FD  00A4               	movwf	??_nrf24l01InitRegisters
  3549  00FE  0824               	movf	??_nrf24l01InitRegisters,w
  3550  00FF  00A1               	movwf	nrf24l01Send@data
  3551  0100  3020               	movlw	32
  3552  0101  3187  275A  3180   	fcall	_nrf24l01Send
  3553                           
  3554                           ;nrf24l01.c: 285: n_SETUP_AW_t setupAW;;nrf24l01.c: 286: setupAW.byte = 0x00;
  3555  0104  0020               	movlb	0	; select bank0
  3556  0105  01A6               	clrf	nrf24l01InitRegisters@setupAW
  3557                           
  3558                           ;nrf24l01.c: 287: setupAW.AW = 0b11;
  3559  0106  3003               	movlw	3
  3560  0107  04A6               	iorwf	nrf24l01InitRegisters@setupAW,f
  3561                           
  3562                           ;nrf24l01.c: 288: nrf24l01Send(0b00100000 | 0x02, setupAW.byte);
  3563  0108  0826               	movf	nrf24l01InitRegisters@setupAW,w
  3564  0109  00A4               	movwf	??_nrf24l01InitRegisters
  3565  010A  0824               	movf	??_nrf24l01InitRegisters,w
  3566  010B  00A1               	movwf	nrf24l01Send@data
  3567  010C  3022               	movlw	34
  3568  010D  3187  275A  3180   	fcall	_nrf24l01Send
  3569                           
  3570                           ;nrf24l01.c: 291: n_RF_CH_t channel;;nrf24l01.c: 292: channel.RF_CH = 2;
  3571  0110  0020               	movlb	0	; select bank0
  3572  0111  0825               	movf	nrf24l01InitRegisters@channel,w
  3573  0112  3980               	andlw	-128
  3574  0113  3802               	iorlw	2
  3575  0114  00A5               	movwf	nrf24l01InitRegisters@channel
  3576                           
  3577                           ;nrf24l01.c: 293: nrf24l01Send(0b00100000 | 0x05, channel.byte);
  3578  0115  0825               	movf	nrf24l01InitRegisters@channel,w
  3579  0116  00A4               	movwf	??_nrf24l01InitRegisters
  3580  0117  0824               	movf	??_nrf24l01InitRegisters,w
  3581  0118  00A1               	movwf	nrf24l01Send@data
  3582  0119  3025               	movlw	37
  3583  011A  3187  275A  3180   	fcall	_nrf24l01Send
  3584                           
  3585                           ;nrf24l01.c: 296: n_RF_SETUP_t rfSetup;;nrf24l01.c: 297: rfSetup.byte = 0x00;
  3586  011D  0020               	movlb	0	; select bank0
  3587  011E  01A8               	clrf	nrf24l01InitRegisters@rfSetup
  3588                           
  3589                           ;nrf24l01.c: 298: rfSetup.RF_DR_LOW = 0;
  3590  011F  12A8               	bcf	nrf24l01InitRegisters@rfSetup,5
  3591                           
  3592                           ;nrf24l01.c: 299: rfSetup.RF_DR_HIGH = 1;
  3593  0120  15A8               	bsf	nrf24l01InitRegisters@rfSetup,3
  3594                           
  3595                           ;nrf24l01.c: 300: rfSetup.RF_PWR = 3;
  3596  0121  3006               	movlw	6
  3597  0122  04A8               	iorwf	nrf24l01InitRegisters@rfSetup,f
  3598                           
  3599                           ;nrf24l01.c: 301: nrf24l01Send(0b00100000 | 0x06, rfSetup.byte);
  3600  0123  0828               	movf	nrf24l01InitRegisters@rfSetup,w
  3601  0124  00A4               	movwf	??_nrf24l01InitRegisters
  3602  0125  0824               	movf	??_nrf24l01InitRegisters,w
  3603  0126  00A1               	movwf	nrf24l01Send@data
  3604  0127  3026               	movlw	38
  3605  0128  3187  275A  3180   	fcall	_nrf24l01Send
  3606                           
  3607                           ;nrf24l01.c: 304: n_EN_RXADDR_t enRXAddr;;nrf24l01.c: 305: enRXAddr.ERX_P0 = 1;
  3608  012B  0020               	movlb	0	; select bank0
  3609  012C  142A               	bsf	nrf24l01InitRegisters@enRXAddr,0
  3610                           
  3611                           ;nrf24l01.c: 306: enRXAddr.ERX_P1 = 1;
  3612  012D  14AA               	bsf	nrf24l01InitRegisters@enRXAddr,1
  3613                           
  3614                           ;nrf24l01.c: 307: enRXAddr.ERX_P2 = 1;
  3615  012E  152A               	bsf	nrf24l01InitRegisters@enRXAddr,2
  3616                           
  3617                           ;nrf24l01.c: 308: enRXAddr.ERX_P3 = 1;
  3618  012F  15AA               	bsf	nrf24l01InitRegisters@enRXAddr,3
  3619                           
  3620                           ;nrf24l01.c: 309: enRXAddr.ERX_P4 = 1;
  3621  0130  162A               	bsf	nrf24l01InitRegisters@enRXAddr,4
  3622                           
  3623                           ;nrf24l01.c: 310: enRXAddr.ERX_P5 = 1;
  3624  0131  16AA               	bsf	nrf24l01InitRegisters@enRXAddr,5
  3625                           
  3626                           ;nrf24l01.c: 311: nrf24l01Send(0b00100000 | 0x02, enRXAddr.byte);
  3627  0132  082A               	movf	nrf24l01InitRegisters@enRXAddr,w
  3628  0133  00A4               	movwf	??_nrf24l01InitRegisters
  3629  0134  0824               	movf	??_nrf24l01InitRegisters,w
  3630  0135  00A1               	movwf	nrf24l01Send@data
  3631  0136  3022               	movlw	34
  3632  0137  3187  275A  3180   	fcall	_nrf24l01Send
  3633                           
  3634                           ;nrf24l01.c: 314: n_EN_AA_t enAA;;nrf24l01.c: 315: enAA.byte = nrf24l01Send(0b00000000 |
      +                           0x01, 0);
  3635  013A  0020               	movlb	0	; select bank0
  3636  013B  01A1               	clrf	nrf24l01Send@data
  3637  013C  3001               	movlw	1
  3638  013D  3187  275A  3180   	fcall	_nrf24l01Send
  3639  0140  0020               	movlb	0	; select bank0
  3640  0141  00A4               	movwf	??_nrf24l01InitRegisters
  3641  0142  0824               	movf	??_nrf24l01InitRegisters,w
  3642  0143  00AB               	movwf	nrf24l01InitRegisters@enAA
  3643                           
  3644                           ;nrf24l01.c: 316: enAA.ENAA_P0 = 0;
  3645  0144  102B               	bcf	nrf24l01InitRegisters@enAA,0
  3646                           
  3647                           ;nrf24l01.c: 317: enAA.ENAA_P1 = 0;
  3648  0145  10AB               	bcf	nrf24l01InitRegisters@enAA,1
  3649                           
  3650                           ;nrf24l01.c: 318: enAA.ENAA_P2 = 0;
  3651  0146  112B               	bcf	nrf24l01InitRegisters@enAA,2
  3652                           
  3653                           ;nrf24l01.c: 319: enAA.ENAA_P3 = 0;
  3654  0147  11AB               	bcf	nrf24l01InitRegisters@enAA,3
  3655                           
  3656                           ;nrf24l01.c: 320: enAA.ENAA_P4 = 0;
  3657  0148  122B               	bcf	nrf24l01InitRegisters@enAA,4
  3658                           
  3659                           ;nrf24l01.c: 321: enAA.ENAA_P5 = 0;
  3660  0149  12AB               	bcf	nrf24l01InitRegisters@enAA,5
  3661                           
  3662                           ;nrf24l01.c: 322: nrf24l01Send(0b00100000 | 0x01, enAA.byte);
  3663  014A  082B               	movf	nrf24l01InitRegisters@enAA,w
  3664  014B  00A4               	movwf	??_nrf24l01InitRegisters
  3665  014C  0824               	movf	??_nrf24l01InitRegisters,w
  3666  014D  00A1               	movwf	nrf24l01Send@data
  3667  014E  3021               	movlw	33
  3668  014F  3187  275A  3180   	fcall	_nrf24l01Send
  3669                           
  3670                           ;nrf24l01.c: 326: n_FEATURE_t feature;;nrf24l01.c: 327: feature.byte = nrf24l01Send(0b00
      +                          000000 | 0x1D, 0);
  3671  0152  0020               	movlb	0	; select bank0
  3672  0153  01A1               	clrf	nrf24l01Send@data
  3673  0154  301D               	movlw	29
  3674  0155  3187  275A  3180   	fcall	_nrf24l01Send
  3675  0158  0020               	movlb	0	; select bank0
  3676  0159  00A4               	movwf	??_nrf24l01InitRegisters
  3677  015A  0824               	movf	??_nrf24l01InitRegisters,w
  3678  015B  00A7               	movwf	nrf24l01InitRegisters@feature
  3679                           
  3680                           ;nrf24l01.c: 328: feature.EN_DPL = 1;
  3681  015C  1527               	bsf	nrf24l01InitRegisters@feature,2
  3682                           
  3683                           ;nrf24l01.c: 329: feature.EN_DYN_ACK = 1;
  3684  015D  1427               	bsf	nrf24l01InitRegisters@feature,0
  3685                           
  3686                           ;nrf24l01.c: 330: nrf24l01Send(0b00100000 | 0x1D, feature.byte);
  3687  015E  0827               	movf	nrf24l01InitRegisters@feature,w
  3688  015F  00A4               	movwf	??_nrf24l01InitRegisters
  3689  0160  0824               	movf	??_nrf24l01InitRegisters,w
  3690  0161  00A1               	movwf	nrf24l01Send@data
  3691  0162  303D               	movlw	61
  3692  0163  3187  275A  3180   	fcall	_nrf24l01Send
  3693                           
  3694                           ;nrf24l01.c: 332: n_DYNPD_t DynPD;;nrf24l01.c: 333: DynPD.byte = nrf24l01Send(0b00000000
      +                           | 0x1C, 0);
  3695  0166  0020               	movlb	0	; select bank0
  3696  0167  01A1               	clrf	nrf24l01Send@data
  3697  0168  301C               	movlw	28
  3698  0169  3187  275A  3180   	fcall	_nrf24l01Send
  3699  016C  0020               	movlb	0	; select bank0
  3700  016D  00A4               	movwf	??_nrf24l01InitRegisters
  3701  016E  0824               	movf	??_nrf24l01InitRegisters,w
  3702  016F  00AC               	movwf	nrf24l01InitRegisters@DynPD
  3703                           
  3704                           ;nrf24l01.c: 334: DynPD.DPL_P0 = 1;
  3705  0170  142C               	bsf	nrf24l01InitRegisters@DynPD,0
  3706                           
  3707                           ;nrf24l01.c: 335: DynPD.DPL_P1 = 1;
  3708  0171  14AC               	bsf	nrf24l01InitRegisters@DynPD,1
  3709                           
  3710                           ;nrf24l01.c: 336: DynPD.DPL_P2 = 1;
  3711  0172  152C               	bsf	nrf24l01InitRegisters@DynPD,2
  3712                           
  3713                           ;nrf24l01.c: 337: DynPD.DPL_P3 = 1;
  3714  0173  15AC               	bsf	nrf24l01InitRegisters@DynPD,3
  3715                           
  3716                           ;nrf24l01.c: 338: DynPD.DPL_P4 = 1;
  3717  0174  162C               	bsf	nrf24l01InitRegisters@DynPD,4
  3718                           
  3719                           ;nrf24l01.c: 339: DynPD.DPL_P5 = 1;
  3720  0175  16AC               	bsf	nrf24l01InitRegisters@DynPD,5
  3721                           
  3722                           ;nrf24l01.c: 340: nrf24l01Send(0b00100000 | 0x1C, DynPD.byte);
  3723  0176  082C               	movf	nrf24l01InitRegisters@DynPD,w
  3724  0177  00A4               	movwf	??_nrf24l01InitRegisters
  3725  0178  0824               	movf	??_nrf24l01InitRegisters,w
  3726  0179  00A1               	movwf	nrf24l01Send@data
  3727  017A  303C               	movlw	60
  3728  017B  3187  275A  3180   	fcall	_nrf24l01Send
  3729                           
  3730                           ;nrf24l01.c: 343: n_STATUS_t status;;nrf24l01.c: 344: status.byte = 0x00;
  3731  017E  0020               	movlb	0	; select bank0
  3732  017F  01A9               	clrf	nrf24l01InitRegisters@status
  3733                           
  3734                           ;nrf24l01.c: 345: status.RX_DR = 1;
  3735  0180  1729               	bsf	nrf24l01InitRegisters@status,6
  3736                           
  3737                           ;nrf24l01.c: 346: status.TX_DS = 1;
  3738  0181  16A9               	bsf	nrf24l01InitRegisters@status,5
  3739                           
  3740                           ;nrf24l01.c: 347: status.MAX_RT = 1;
  3741  0182  1629               	bsf	nrf24l01InitRegisters@status,4
  3742                           
  3743                           ;nrf24l01.c: 348: nrf24l01Send(0b00100000 | 0x07, status.byte);
  3744  0183  0829               	movf	nrf24l01InitRegisters@status,w
  3745  0184  00A4               	movwf	??_nrf24l01InitRegisters
  3746  0185  0824               	movf	??_nrf24l01InitRegisters,w
  3747  0186  00A1               	movwf	nrf24l01Send@data
  3748  0187  3027               	movlw	39
  3749  0188  3187  275A  3180   	fcall	_nrf24l01Send
  3750                           
  3751                           ;nrf24l01.c: 351: nrf24l01Send(0b11100001, 0);
  3752  018B  0020               	movlb	0	; select bank0
  3753  018C  01A1               	clrf	nrf24l01Send@data
  3754  018D  30E1               	movlw	225
  3755  018E  3187  275A  3180   	fcall	_nrf24l01Send
  3756                           
  3757                           ;nrf24l01.c: 352: nrf24l01Send(0b11100010, 0);
  3758  0191  0020               	movlb	0	; select bank0
  3759  0192  01A1               	clrf	nrf24l01Send@data
  3760  0193  30E2               	movlw	226
  3761  0194  3187  275A  3180   	fcall	_nrf24l01Send
  3762                           
  3763                           ;nrf24l01.c: 355: config.PRIM_RX = 1;
  3764  0197  0020               	movlb	0	; select bank0
  3765  0198  142D               	bsf	nrf24l01InitRegisters@config,0
  3766                           
  3767                           ;nrf24l01.c: 356: config.EN_CRC = 1;
  3768  0199  15AD               	bsf	nrf24l01InitRegisters@config,3
  3769                           
  3770                           ;nrf24l01.c: 357: config.CRCO = 1;
  3771  019A  152D               	bsf	nrf24l01InitRegisters@config,2
  3772                           
  3773                           ;nrf24l01.c: 358: config.PWR_UP = 1;
  3774  019B  14AD               	bsf	nrf24l01InitRegisters@config,1
  3775                           
  3776                           ;nrf24l01.c: 359: nrf24l01Send(0b00100000 | 0x00, config.byte);
  3777  019C  082D               	movf	nrf24l01InitRegisters@config,w
  3778  019D  00A4               	movwf	??_nrf24l01InitRegisters
  3779  019E  0824               	movf	??_nrf24l01InitRegisters,w
  3780  019F  00A1               	movwf	nrf24l01Send@data
  3781  01A0  3020               	movlw	32
  3782  01A1  3187  275A         	fcall	_nrf24l01Send
  3783  01A3  0008               	return
  3784  01A4                     __end_of_nrf24l01InitRegisters:	
  3785                           
  3786                           	psect	text5
  3787  0027                     __ptext5:	
  3788 ;; *************** function _loop *****************
  3789 ;; Defined at:
  3790 ;;		line 90 in file "main.c"
  3791 ;; Parameters:    Size  Location     Type
  3792 ;;		None
  3793 ;; Auto vars:     Size  Location     Type
  3794 ;;  packet         33    0[BANK1 ] struct .
  3795 ;; Return value:  Size  Location     Type
  3796 ;;                  1    wreg      void 
  3797 ;; Registers used:
  3798 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3799 ;; Tracked objects:
  3800 ;;		On entry : 0/0
  3801 ;;		On exit  : 0/0
  3802 ;;		Unchanged: 0/0
  3803 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3804 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3805 ;;      Locals:         0       0      33       0       0       0       0       0       0       0       0       0       
      +0       0
  3806 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3807 ;;      Totals:         0       4      33       0       0       0       0       0       0       0       0       0       
      +0       0
  3808 ;;Total ram usage:       37 bytes
  3809 ;; Hardware stack levels used:    1
  3810 ;; Hardware stack levels required when called:   12
  3811 ;; This function calls:
  3812 ;;		_getADCValue
  3813 ;;		_nrf24l01SendPacket
  3814 ;;		_setMessage
  3815 ;;		_sleep
  3816 ;; This function is called by:
  3817 ;;		_main
  3818 ;; This function uses a non-reentrant model
  3819 ;;
  3820                           
  3821                           
  3822                           ;psect for function _loop
  3823  0027                     _loop:	
  3824                           
  3825                           ;incstack = 0
  3826                           ; Regs used in _loop: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3827  0027  0064               	clrwdt	;# 
  3828                           
  3829                           ;main.c: 95: nrf24l01Packet_t packet;;main.c: 97: setMessage(&packet, "DBG", counter);
  3830  0028  3030               	movlw	low (STR_3| (0+32768))
  3831  0029  0020               	movlb	0	; select bank0
  3832  002A  00BD               	movwf	setMessage@topic
  3833  002B  3090               	movlw	high (STR_3| (0+32768))
  3834  002C  00BE               	movwf	setMessage@topic+1
  3835  002D  0021               	movlb	1	; select bank1
  3836  002E  0862               	movf	_counter^(0+128),w
  3837  002F  0020               	movlb	0	; select bank0
  3838  0030  00BF               	movwf	setMessage@value
  3839  0031  0021               	movlb	1	; select bank1
  3840  0032  0863               	movf	(_counter+1)^(0+128),w
  3841  0033  0020               	movlb	0	; select bank0
  3842  0034  00C0               	movwf	setMessage@value+1
  3843  0035  01C1               	clrf	setMessage@value+2
  3844  0036  01C2               	clrf	setMessage@value+3
  3845  0037  30A0               	movlw	(low (loop@packet| 0))& (0+255)
  3846  0038  3183  23CE  3180   	fcall	_setMessage
  3847                           
  3848                           ;main.c: 98: packet.packetData.byte = 0;
  3849  003B  0021               	movlb	1	; select bank1
  3850  003C  01A0               	clrf	loop@packet^(0+128)
  3851                           
  3852                           ;main.c: 99: packet.packetData.ACKRequest = 0;
  3853  003D  10A0               	bcf	loop@packet^(0+128),1
  3854                           
  3855                           ;main.c: 100: nrf24l01SendPacket(&packet);
  3856  003E  30A0               	movlw	(low (loop@packet| 0))& (0+255)
  3857  003F  3181  21A4  3180   	fcall	_nrf24l01SendPacket
  3858                           
  3859                           ;main.c: 101: counter+=100;
  3860  0042  3064               	movlw	100
  3861  0043  0021               	movlb	1	; select bank1
  3862  0044  07E2               	addwf	_counter^(0+128),f
  3863  0045  3000               	movlw	0
  3864  0046  3DE3               	addwfc	(_counter+1)^(0+128),f
  3865                           
  3866                           ;main.c: 102: sleep();
  3867  0047  318F  2778  3180   	fcall	_sleep
  3868                           
  3869                           ;main.c: 104: setMessage(&packet, "VBAT", getADCValue(0b000100, 2505));
  3870  004A  3022               	movlw	low (STR_4| (0+32768))
  3871  004B  0020               	movlb	0	; select bank0
  3872  004C  00BD               	movwf	setMessage@topic
  3873  004D  3090               	movlw	high (STR_4| (0+32768))
  3874  004E  00BE               	movwf	setMessage@topic+1
  3875  004F  3000               	movlw	0
  3876  0050  00B2               	movwf	getADCValue@divider+3
  3877  0051  3000               	movlw	0
  3878  0052  00B1               	movwf	getADCValue@divider+2
  3879  0053  3009               	movlw	9
  3880  0054  00B0               	movwf	getADCValue@divider+1
  3881  0055  30C9               	movlw	201
  3882  0056  00AF               	movwf	getADCValue@divider
  3883  0057  3004               	movlw	4
  3884  0058  3183  2346  3180   	fcall	_getADCValue
  3885  005B  0020               	movlb	0	; select bank0
  3886  005C  0832               	movf	?_getADCValue+3,w
  3887  005D  00C2               	movwf	setMessage@value+3
  3888  005E  0831               	movf	?_getADCValue+2,w
  3889  005F  00C1               	movwf	setMessage@value+2
  3890  0060  0830               	movf	?_getADCValue+1,w
  3891  0061  00C0               	movwf	setMessage@value+1
  3892  0062  082F               	movf	?_getADCValue,w
  3893  0063  00BF               	movwf	setMessage@value
  3894  0064  30A0               	movlw	(low (loop@packet| 0))& (0+255)
  3895  0065  3183  23CE  3180   	fcall	_setMessage
  3896                           
  3897                           ;main.c: 105: packet.packetData.byte = 0;
  3898  0068  0021               	movlb	1	; select bank1
  3899  0069  01A0               	clrf	loop@packet^(0+128)
  3900                           
  3901                           ;main.c: 106: packet.packetData.ACKRequest = 1;
  3902  006A  14A0               	bsf	loop@packet^(0+128),1
  3903                           
  3904                           ;main.c: 107: nrf24l01SendPacket(&packet);
  3905  006B  30A0               	movlw	(low (loop@packet| 0))& (0+255)
  3906  006C  3181  21A4  3180   	fcall	_nrf24l01SendPacket
  3907                           
  3908                           ;main.c: 108: sleep();
  3909  006F  318F  2778  3180   	fcall	_sleep
  3910                           
  3911                           ;main.c: 111: setMessage(&packet, "ANC3", getADCValue(0b010011, 2500));
  3912  0072  3018               	movlw	low (STR_5| (0+32768))
  3913  0073  0020               	movlb	0	; select bank0
  3914  0074  00BD               	movwf	setMessage@topic
  3915  0075  3090               	movlw	high (STR_5| (0+32768))
  3916  0076  00BE               	movwf	setMessage@topic+1
  3917  0077  3000               	movlw	0
  3918  0078  00B2               	movwf	getADCValue@divider+3
  3919  0079  3000               	movlw	0
  3920  007A  00B1               	movwf	getADCValue@divider+2
  3921  007B  3009               	movlw	9
  3922  007C  00B0               	movwf	getADCValue@divider+1
  3923  007D  30C4               	movlw	196
  3924  007E  00AF               	movwf	getADCValue@divider
  3925  007F  3013               	movlw	19
  3926  0080  3183  2346  3180   	fcall	_getADCValue
  3927  0083  0020               	movlb	0	; select bank0
  3928  0084  0832               	movf	?_getADCValue+3,w
  3929  0085  00C2               	movwf	setMessage@value+3
  3930  0086  0831               	movf	?_getADCValue+2,w
  3931  0087  00C1               	movwf	setMessage@value+2
  3932  0088  0830               	movf	?_getADCValue+1,w
  3933  0089  00C0               	movwf	setMessage@value+1
  3934  008A  082F               	movf	?_getADCValue,w
  3935  008B  00BF               	movwf	setMessage@value
  3936  008C  30A0               	movlw	(low (loop@packet| 0))& (0+255)
  3937  008D  3183  23CE  3180   	fcall	_setMessage
  3938                           
  3939                           ;main.c: 112: packet.packetData.byte = 0;
  3940  0090  0021               	movlb	1	; select bank1
  3941  0091  01A0               	clrf	loop@packet^(0+128)
  3942                           
  3943                           ;main.c: 113: packet.packetData.ACKRequest = 0;
  3944  0092  10A0               	bcf	loop@packet^(0+128),1
  3945                           
  3946                           ;main.c: 114: nrf24l01SendPacket(&packet);
  3947  0093  30A0               	movlw	(low (loop@packet| 0))& (0+255)
  3948  0094  3181  21A4  3180   	fcall	_nrf24l01SendPacket
  3949                           
  3950                           ;main.c: 115: sleep();
  3951  0097  318F  2778  3180   	fcall	_sleep
  3952                           
  3953                           ;main.c: 117: setMessage(&packet, "FVR", getADCValue(0b111111, 25600));
  3954  009A  3034               	movlw	low (STR_6| (0+32768))
  3955  009B  0020               	movlb	0	; select bank0
  3956  009C  00BD               	movwf	setMessage@topic
  3957  009D  3090               	movlw	high (STR_6| (0+32768))
  3958  009E  00BE               	movwf	setMessage@topic+1
  3959  009F  3000               	movlw	0
  3960  00A0  00B2               	movwf	getADCValue@divider+3
  3961  00A1  3000               	movlw	0
  3962  00A2  00B1               	movwf	getADCValue@divider+2
  3963  00A3  3064               	movlw	100
  3964  00A4  00B0               	movwf	getADCValue@divider+1
  3965  00A5  3000               	movlw	0
  3966  00A6  00AF               	movwf	getADCValue@divider
  3967  00A7  303F               	movlw	63
  3968  00A8  3183  2346  3180   	fcall	_getADCValue
  3969  00AB  0020               	movlb	0	; select bank0
  3970  00AC  0832               	movf	?_getADCValue+3,w
  3971  00AD  00C2               	movwf	setMessage@value+3
  3972  00AE  0831               	movf	?_getADCValue+2,w
  3973  00AF  00C1               	movwf	setMessage@value+2
  3974  00B0  0830               	movf	?_getADCValue+1,w
  3975  00B1  00C0               	movwf	setMessage@value+1
  3976  00B2  082F               	movf	?_getADCValue,w
  3977  00B3  00BF               	movwf	setMessage@value
  3978  00B4  30A0               	movlw	(low (loop@packet| 0))& (0+255)
  3979  00B5  3183  23CE  3180   	fcall	_setMessage
  3980                           
  3981                           ;main.c: 118: packet.packetData.byte = 0;
  3982  00B8  0021               	movlb	1	; select bank1
  3983  00B9  01A0               	clrf	loop@packet^(0+128)
  3984                           
  3985                           ;main.c: 119: packet.packetData.ACKRequest = 0;
  3986  00BA  10A0               	bcf	loop@packet^(0+128),1
  3987                           
  3988                           ;main.c: 120: nrf24l01SendPacket(&packet);
  3989  00BB  30A0               	movlw	(low (loop@packet| 0))& (0+255)
  3990  00BC  3181  21A4  3180   	fcall	_nrf24l01SendPacket
  3991                           
  3992                           ;main.c: 121: sleep();
  3993  00BF  318F  2778  3180   	fcall	_sleep
  3994                           
  3995                           ;main.c: 124: setMessage(&packet, "TEMP", getADCValue(0b111101, 208900) - 40);
  3996  00C2  301D               	movlw	low (STR_7| (0+32768))
  3997  00C3  0020               	movlb	0	; select bank0
  3998  00C4  00BD               	movwf	setMessage@topic
  3999  00C5  3090               	movlw	high (STR_7| (0+32768))
  4000  00C6  00BE               	movwf	setMessage@topic+1
  4001  00C7  30D8               	movlw	216
  4002  00C8  00D4               	movwf	??_loop
  4003  00C9  30FF               	movlw	255
  4004  00CA  00D5               	movwf	??_loop+1
  4005  00CB  30FF               	movlw	255
  4006  00CC  00D6               	movwf	??_loop+2
  4007  00CD  30FF               	movlw	255
  4008  00CE  00D7               	movwf	??_loop+3
  4009  00CF  3000               	movlw	0
  4010  00D0  00B2               	movwf	getADCValue@divider+3
  4011  00D1  3003               	movlw	3
  4012  00D2  00B1               	movwf	getADCValue@divider+2
  4013  00D3  3030               	movlw	48
  4014  00D4  00B0               	movwf	getADCValue@divider+1
  4015  00D5  3004               	movlw	4
  4016  00D6  00AF               	movwf	getADCValue@divider
  4017  00D7  303D               	movlw	61
  4018  00D8  3183  2346  3180   	fcall	_getADCValue
  4019  00DB  0020               	movlb	0	; select bank0
  4020  00DC  082F               	movf	?_getADCValue,w
  4021  00DD  07D4               	addwf	??_loop,f
  4022  00DE  0830               	movf	?_getADCValue+1,w
  4023  00DF  3DD5               	addwfc	??_loop+1,f
  4024  00E0  0831               	movf	?_getADCValue+2,w
  4025  00E1  3DD6               	addwfc	??_loop+2,f
  4026  00E2  0832               	movf	?_getADCValue+3,w
  4027  00E3  3DD7               	addwfc	??_loop+3,f
  4028  00E4  0857               	movf	??_loop+3,w
  4029  00E5  00C2               	movwf	setMessage@value+3
  4030  00E6  0856               	movf	??_loop+2,w
  4031  00E7  00C1               	movwf	setMessage@value+2
  4032  00E8  0855               	movf	??_loop+1,w
  4033  00E9  00C0               	movwf	setMessage@value+1
  4034  00EA  0854               	movf	??_loop,w
  4035  00EB  00BF               	movwf	setMessage@value
  4036  00EC  30A0               	movlw	(low (loop@packet| 0))& (0+255)
  4037  00ED  3183  23CE  3180   	fcall	_setMessage
  4038                           
  4039                           ;main.c: 125: packet.packetData.byte = 0;
  4040  00F0  0021               	movlb	1	; select bank1
  4041  00F1  01A0               	clrf	loop@packet^(0+128)
  4042                           
  4043                           ;main.c: 126: packet.packetData.ACKRequest = 0;
  4044  00F2  10A0               	bcf	loop@packet^(0+128),1
  4045                           
  4046                           ;main.c: 127: nrf24l01SendPacket(&packet);
  4047  00F3  30A0               	movlw	(low (loop@packet| 0))& (0+255)
  4048  00F4  3181  21A4  3180   	fcall	_nrf24l01SendPacket
  4049                           
  4050                           ;main.c: 128: sleep();
  4051  00F7  318F  2778         	fcall	_sleep
  4052  00F9  0008               	return
  4053  00FA                     __end_of_loop:	
  4054                           
  4055                           	psect	text6
  4056  0F78                     __ptext6:	
  4057 ;; *************** function _sleep *****************
  4058 ;; Defined at:
  4059 ;;		line 49 in file "main.c"
  4060 ;; Parameters:    Size  Location     Type
  4061 ;;		None
  4062 ;; Auto vars:     Size  Location     Type
  4063 ;;		None
  4064 ;; Return value:  Size  Location     Type
  4065 ;;                  1    wreg      void 
  4066 ;; Registers used:
  4067 ;;		None
  4068 ;; Tracked objects:
  4069 ;;		On entry : 0/0
  4070 ;;		On exit  : 0/0
  4071 ;;		Unchanged: 0/0
  4072 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4073 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4074 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4075 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4076 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4077 ;;Total ram usage:        0 bytes
  4078 ;; Hardware stack levels used:    1
  4079 ;; Hardware stack levels required when called:    7
  4080 ;; This function calls:
  4081 ;;		Nothing
  4082 ;; This function is called by:
  4083 ;;		_loop
  4084 ;;		_main
  4085 ;;		_checkRxData
  4086 ;; This function uses a non-reentrant model
  4087 ;;
  4088                           
  4089                           
  4090                           ;psect for function _sleep
  4091  0F78                     _sleep:	
  4092  0F78                     l215:	
  4093                           ;incstack = 0
  4094                           ; Regs used in _sleep: []
  4095                           ;main.c: 50: while (1){
  4096                           
  4097  0F78  0063               	sleep	;# 
  4098                           
  4099                           ;main.c: 53: __nop();
  4100  0F79  0000               	nop
  4101                           
  4102                           ;main.c: 54: __nop();
  4103  0F7A  0000               	nop
  4104                           
  4105                           ;main.c: 56: if (!STATUSbits.nTO && !STATUSbits.nPD) {
  4106  0F7B  0020               	movlb	0	; select bank0
  4107  0F7C  1A03               	btfsc	3,4	;volatile
  4108  0F7D  2F78               	goto	l215
  4109  0F7E  1D83               	btfss	3,3	;volatile
  4110  0F7F  0008               	return
  4111  0F80  2F78               	goto	l215
  4112  0F81                     __end_of_sleep:	
  4113                           ;main.c: 57: return;
  4114                           
  4115                           
  4116                           	psect	text7
  4117  03CE                     __ptext7:	
  4118 ;; *************** function _setMessage *****************
  4119 ;; Defined at:
  4120 ;;		line 74 in file "main.c"
  4121 ;; Parameters:    Size  Location     Type
  4122 ;;  packet          1    wreg     PTR struct .
  4123 ;;		 -> main@packet(33), loop@packet(33), 
  4124 ;;  topic           2   29[BANK0 ] PTR const unsigned char 
  4125 ;;		 -> STR_9(5), STR_7(5), STR_6(4), STR_5(5), 
  4126 ;;		 -> STR_4(5), STR_3(4), 
  4127 ;;  value           4   31[BANK0 ] unsigned long 
  4128 ;; Auto vars:     Size  Location     Type
  4129 ;;  packet          1   51[BANK0 ] PTR struct .
  4130 ;;		 -> main@packet(33), loop@packet(33), 
  4131 ;;  tempString     16   35[BANK0 ] unsigned char [16]
  4132 ;; Return value:  Size  Location     Type
  4133 ;;                  1    wreg      void 
  4134 ;; Registers used:
  4135 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4136 ;; Tracked objects:
  4137 ;;		On entry : 0/0
  4138 ;;		On exit  : 0/0
  4139 ;;		Unchanged: 0/0
  4140 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4141 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4142 ;;      Locals:         0      17       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4143 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4144 ;;      Totals:         0      23       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4145 ;;Total ram usage:       23 bytes
  4146 ;; Hardware stack levels used:    1
  4147 ;; Hardware stack levels required when called:    9
  4148 ;; This function calls:
  4149 ;;		_memset
  4150 ;;		_strcat
  4151 ;;		_ultoa
  4152 ;; This function is called by:
  4153 ;;		_loop
  4154 ;;		_main
  4155 ;; This function uses a non-reentrant model
  4156 ;;
  4157                           
  4158                           
  4159                           ;psect for function _setMessage
  4160  03CE                     _setMessage:	
  4161                           
  4162                           ;incstack = 0
  4163                           ; Regs used in _setMessage: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4164                           ;setMessage@packet stored from wreg
  4165  03CE  0020               	movlb	0	; select bank0
  4166  03CF  00D3               	movwf	setMessage@packet
  4167                           
  4168                           ;main.c: 75: memset(packet->Message, 0, sizeof(packet->Message));
  4169  03D0  0853               	movf	setMessage@packet,w
  4170  03D1  3E01               	addlw	1
  4171  03D2  00A1               	movwf	memset@p1
  4172  03D3  3000               	movlw	0
  4173  03D4  00A2               	movwf	memset@p1+1
  4174  03D5  3000               	movlw	0
  4175  03D6  00A3               	movwf	memset@c
  4176  03D7  00A4               	movwf	memset@c+1
  4177  03D8  3020               	movlw	32
  4178  03D9  00A5               	movwf	memset@n
  4179  03DA  3000               	movlw	0
  4180  03DB  00A6               	movwf	memset@n+1
  4181  03DC  318F  27B1  3183   	fcall	_memset
  4182                           
  4183                           ;main.c: 77: strcat(packet->Message, romData.name);
  4184  03DF  305D               	movlw	low (_romData+1)
  4185  03E0  0020               	movlb	0	; select bank0
  4186  03E1  00A1               	movwf	strcat@from
  4187  03E2  3000               	movlw	high (_romData+1)
  4188  03E3  00A2               	movwf	strcat@from+1
  4189  03E4  0853               	movf	setMessage@packet,w
  4190  03E5  3E01               	addlw	1
  4191  03E6  3186  26A5  3183   	fcall	_strcat
  4192                           
  4193                           ;main.c: 79: strcat(packet->Message, "/");
  4194  03E9  3038               	movlw	low (STR_1| (0+32768))
  4195  03EA  0020               	movlb	0	; select bank0
  4196  03EB  00A1               	movwf	strcat@from
  4197  03EC  3090               	movlw	high (STR_1| (0+32768))
  4198  03ED  00A2               	movwf	strcat@from+1
  4199  03EE  0853               	movf	setMessage@packet,w
  4200  03EF  3E01               	addlw	1
  4201  03F0  3186  26A5  3183   	fcall	_strcat
  4202                           
  4203                           ;main.c: 80: strcat(packet->Message, topic);
  4204  03F3  0020               	movlb	0	; select bank0
  4205  03F4  083E               	movf	setMessage@topic+1,w
  4206  03F5  00A2               	movwf	strcat@from+1
  4207  03F6  083D               	movf	setMessage@topic,w
  4208  03F7  00A1               	movwf	strcat@from
  4209  03F8  0853               	movf	setMessage@packet,w
  4210  03F9  3E01               	addlw	1
  4211  03FA  3186  26A5  3183   	fcall	_strcat
  4212                           
  4213                           ;main.c: 82: char tempString[16];;main.c: 84: ultoa(tempString, value, 10);
  4214  03FD  0020               	movlb	0	; select bank0
  4215  03FE  0842               	movf	setMessage@value+3,w
  4216  03FF  00B2               	movwf	ultoa@val+3
  4217  0400  0841               	movf	setMessage@value+2,w
  4218  0401  00B1               	movwf	ultoa@val+2
  4219  0402  0840               	movf	setMessage@value+1,w
  4220  0403  00B0               	movwf	ultoa@val+1
  4221  0404  083F               	movf	setMessage@value,w
  4222  0405  00AF               	movwf	ultoa@val
  4223  0406  300A               	movlw	10
  4224  0407  00B3               	movwf	ultoa@base
  4225  0408  3000               	movlw	0
  4226  0409  00B4               	movwf	ultoa@base+1
  4227  040A  3043               	movlw	(low (setMessage@tempString| 0))& (0+255)
  4228  040B  3182  22BD  3183   	fcall	_ultoa
  4229                           
  4230                           ;main.c: 86: strcat(packet->Message, "/");
  4231  040E  3038               	movlw	low (STR_1| (0+32768))
  4232  040F  0020               	movlb	0	; select bank0
  4233  0410  00A1               	movwf	strcat@from
  4234  0411  3090               	movlw	high (STR_1| (0+32768))
  4235  0412  00A2               	movwf	strcat@from+1
  4236  0413  0853               	movf	setMessage@packet,w
  4237  0414  3E01               	addlw	1
  4238  0415  3186  26A5  3183   	fcall	_strcat
  4239                           
  4240                           ;main.c: 87: strcat(packet->Message, tempString);
  4241  0418  3043               	movlw	low setMessage@tempString
  4242  0419  0020               	movlb	0	; select bank0
  4243  041A  00A1               	movwf	strcat@from
  4244  041B  3000               	movlw	high setMessage@tempString
  4245  041C  00A2               	movwf	strcat@from+1
  4246  041D  0853               	movf	setMessage@packet,w
  4247  041E  3E01               	addlw	1
  4248  041F  3186  26A5         	fcall	_strcat
  4249  0421  0008               	return
  4250  0422                     __end_of_setMessage:	
  4251                           
  4252                           	psect	text8
  4253  02BD                     __ptext8:	
  4254 ;; *************** function _ultoa *****************
  4255 ;; Defined at:
  4256 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\ltoa.c"
  4257 ;; Parameters:    Size  Location     Type
  4258 ;;  buf             1    wreg     PTR unsigned char 
  4259 ;;		 -> setMessage@tempString(16), 
  4260 ;;  val             4   15[BANK0 ] unsigned long 
  4261 ;;  base            2   19[BANK0 ] int 
  4262 ;; Auto vars:     Size  Location     Type
  4263 ;;  buf             1   27[BANK0 ] PTR unsigned char 
  4264 ;;		 -> setMessage@tempString(16), 
  4265 ;;  v               4   22[BANK0 ] unsigned long 
  4266 ;;  c               1   26[BANK0 ] unsigned char 
  4267 ;; Return value:  Size  Location     Type
  4268 ;;                  1    wreg      PTR unsigned char 
  4269 ;; Registers used:
  4270 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4271 ;; Tracked objects:
  4272 ;;		On entry : 0/0
  4273 ;;		On exit  : 0/0
  4274 ;;		Unchanged: 0/0
  4275 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4276 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4277 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4278 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4279 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4280 ;;Total ram usage:       13 bytes
  4281 ;; Hardware stack levels used:    1
  4282 ;; Hardware stack levels required when called:    8
  4283 ;; This function calls:
  4284 ;;		___lldiv
  4285 ;;		___llmod
  4286 ;; This function is called by:
  4287 ;;		_setMessage
  4288 ;; This function uses a non-reentrant model
  4289 ;;
  4290                           
  4291                           
  4292                           ;psect for function _ultoa
  4293  02BD                     _ultoa:	
  4294                           
  4295                           ;incstack = 0
  4296                           ; Regs used in _ultoa: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4297                           ;ultoa@buf stored from wreg
  4298  02BD  0020               	movlb	0	; select bank0
  4299  02BE  00BB               	movwf	ultoa@buf
  4300  02BF  0832               	movf	ultoa@val+3,w
  4301  02C0  00B9               	movwf	ultoa@v+3
  4302  02C1  0831               	movf	ultoa@val+2,w
  4303  02C2  00B8               	movwf	ultoa@v+2
  4304  02C3  0830               	movf	ultoa@val+1,w
  4305  02C4  00B7               	movwf	ultoa@v+1
  4306  02C5  082F               	movf	ultoa@val,w
  4307  02C6  00B6               	movwf	ultoa@v
  4308  02C7                     l1999:	
  4309  02C7  0833               	movf	ultoa@base,w
  4310  02C8  00A1               	movwf	___lldiv@divisor
  4311  02C9  0834               	movf	ultoa@base+1,w
  4312  02CA  00A2               	movwf	___lldiv@divisor+1
  4313  02CB  0D89               	rlf	9,f
  4314  02CC  3B89               	subwfb	9,f
  4315  02CD  0989               	comf	9,f
  4316  02CE  00A3               	movwf	___lldiv@divisor+2
  4317  02CF  00A4               	movwf	___lldiv@divisor+3
  4318  02D0  0839               	movf	ultoa@v+3,w
  4319  02D1  00A8               	movwf	___lldiv@dividend+3
  4320  02D2  0838               	movf	ultoa@v+2,w
  4321  02D3  00A7               	movwf	___lldiv@dividend+2
  4322  02D4  0837               	movf	ultoa@v+1,w
  4323  02D5  00A6               	movwf	___lldiv@dividend+1
  4324  02D6  0836               	movf	ultoa@v,w
  4325  02D7  00A5               	movwf	___lldiv@dividend
  4326  02D8  3184  2422  3182   	fcall	___lldiv
  4327  02DB  0020               	movlb	0	; select bank0
  4328  02DC  0824               	movf	?___lldiv+3,w
  4329  02DD  00B9               	movwf	ultoa@v+3
  4330  02DE  0823               	movf	?___lldiv+2,w
  4331  02DF  00B8               	movwf	ultoa@v+2
  4332  02E0  0822               	movf	?___lldiv+1,w
  4333  02E1  00B7               	movwf	ultoa@v+1
  4334  02E2  0821               	movf	?___lldiv,w
  4335  02E3  00B6               	movwf	ultoa@v
  4336  02E4  3001               	movlw	1
  4337  02E5  00B5               	movwf	??_ultoa
  4338  02E6  0835               	movf	??_ultoa,w
  4339  02E7  07BB               	addwf	ultoa@buf,f
  4340  02E8  0839               	movf	ultoa@v+3,w
  4341  02E9  0438               	iorwf	ultoa@v+2,w
  4342  02EA  0437               	iorwf	ultoa@v+1,w
  4343  02EB  0436               	iorwf	ultoa@v,w
  4344  02EC  1D03               	skipz
  4345  02ED  2AC7               	goto	l1999
  4346  02EE  083B               	movf	ultoa@buf,w
  4347  02EF  0086               	movwf	6
  4348  02F0  0187               	clrf	7
  4349  02F1  0181               	clrf	1
  4350  02F2  3001               	movlw	1
  4351  02F3  02BB               	subwf	ultoa@buf,f
  4352  02F4                     l2009:	
  4353  02F4  0833               	movf	ultoa@base,w
  4354  02F5  00A1               	movwf	___llmod@divisor
  4355  02F6  0834               	movf	ultoa@base+1,w
  4356  02F7  00A2               	movwf	___llmod@divisor+1
  4357  02F8  0D89               	rlf	9,f
  4358  02F9  3B89               	subwfb	9,f
  4359  02FA  0989               	comf	9,f
  4360  02FB  00A3               	movwf	___llmod@divisor+2
  4361  02FC  00A4               	movwf	___llmod@divisor+3
  4362  02FD  0832               	movf	ultoa@val+3,w
  4363  02FE  00A8               	movwf	___llmod@dividend+3
  4364  02FF  0831               	movf	ultoa@val+2,w
  4365  0300  00A7               	movwf	___llmod@dividend+2
  4366  0301  0830               	movf	ultoa@val+1,w
  4367  0302  00A6               	movwf	___llmod@dividend+1
  4368  0303  082F               	movf	ultoa@val,w
  4369  0304  00A5               	movwf	___llmod@dividend
  4370  0305  3184  24C2  3182   	fcall	___llmod
  4371  0308  0020               	movlb	0	; select bank0
  4372  0309  0821               	movf	?___llmod,w
  4373  030A  00B5               	movwf	??_ultoa
  4374  030B  0835               	movf	??_ultoa,w
  4375  030C  00BA               	movwf	ultoa@c
  4376  030D  0833               	movf	ultoa@base,w
  4377  030E  00A1               	movwf	___lldiv@divisor
  4378  030F  0834               	movf	ultoa@base+1,w
  4379  0310  00A2               	movwf	___lldiv@divisor+1
  4380  0311  0D89               	rlf	9,f
  4381  0312  3B89               	subwfb	9,f
  4382  0313  0989               	comf	9,f
  4383  0314  00A3               	movwf	___lldiv@divisor+2
  4384  0315  00A4               	movwf	___lldiv@divisor+3
  4385  0316  0832               	movf	ultoa@val+3,w
  4386  0317  00A8               	movwf	___lldiv@dividend+3
  4387  0318  0831               	movf	ultoa@val+2,w
  4388  0319  00A7               	movwf	___lldiv@dividend+2
  4389  031A  0830               	movf	ultoa@val+1,w
  4390  031B  00A6               	movwf	___lldiv@dividend+1
  4391  031C  082F               	movf	ultoa@val,w
  4392  031D  00A5               	movwf	___lldiv@dividend
  4393  031E  3184  2422  3182   	fcall	___lldiv
  4394  0321  0020               	movlb	0	; select bank0
  4395  0322  0824               	movf	?___lldiv+3,w
  4396  0323  00B2               	movwf	ultoa@val+3
  4397  0324  0823               	movf	?___lldiv+2,w
  4398  0325  00B1               	movwf	ultoa@val+2
  4399  0326  0822               	movf	?___lldiv+1,w
  4400  0327  00B0               	movwf	ultoa@val+1
  4401  0328  0821               	movf	?___lldiv,w
  4402  0329  00AF               	movwf	ultoa@val
  4403  032A  300A               	movlw	10
  4404  032B  023A               	subwf	ultoa@c,w
  4405  032C  1C03               	skipc
  4406  032D  2B32               	goto	l848
  4407  032E  3007               	movlw	7
  4408  032F  00B5               	movwf	??_ultoa
  4409  0330  0835               	movf	??_ultoa,w
  4410  0331  07BA               	addwf	ultoa@c,f
  4411  0332                     l848:	
  4412  0332  3030               	movlw	48
  4413  0333  00B5               	movwf	??_ultoa
  4414  0334  0835               	movf	??_ultoa,w
  4415  0335  07BA               	addwf	ultoa@c,f
  4416  0336  083A               	movf	ultoa@c,w
  4417  0337  00B5               	movwf	??_ultoa
  4418  0338  083B               	movf	ultoa@buf,w
  4419  0339  0086               	movwf	6
  4420  033A  0187               	clrf	7
  4421  033B  0835               	movf	??_ultoa,w
  4422  033C  0081               	movwf	1
  4423  033D  3001               	movlw	1
  4424  033E  02BB               	subwf	ultoa@buf,f
  4425  033F  0832               	movf	ultoa@val+3,w
  4426  0340  0431               	iorwf	ultoa@val+2,w
  4427  0341  0430               	iorwf	ultoa@val+1,w
  4428  0342  042F               	iorwf	ultoa@val,w
  4429  0343  1903               	btfsc	3,2
  4430  0344  0008               	return
  4431  0345  2AF4               	goto	l2009
  4432  0346                     __end_of_ultoa:	
  4433                           ;	Return value of _ultoa is never used
  4434                           
  4435                           
  4436                           	psect	text9
  4437  04C2                     __ptext9:	
  4438 ;; *************** function ___llmod *****************
  4439 ;; Defined at:
  4440 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\llmod.c"
  4441 ;; Parameters:    Size  Location     Type
  4442 ;;  divisor         4    1[BANK0 ] unsigned long 
  4443 ;;  dividend        4    5[BANK0 ] unsigned long 
  4444 ;; Auto vars:     Size  Location     Type
  4445 ;;  counter         1   10[BANK0 ] unsigned char 
  4446 ;; Return value:  Size  Location     Type
  4447 ;;                  4    1[BANK0 ] unsigned long 
  4448 ;; Registers used:
  4449 ;;		wreg, status,2, status,0
  4450 ;; Tracked objects:
  4451 ;;		On entry : 0/0
  4452 ;;		On exit  : 0/0
  4453 ;;		Unchanged: 0/0
  4454 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4455 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4456 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4457 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4458 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4459 ;;Total ram usage:       10 bytes
  4460 ;; Hardware stack levels used:    1
  4461 ;; Hardware stack levels required when called:    7
  4462 ;; This function calls:
  4463 ;;		Nothing
  4464 ;; This function is called by:
  4465 ;;		_ultoa
  4466 ;; This function uses a non-reentrant model
  4467 ;;
  4468                           
  4469                           
  4470                           ;psect for function ___llmod
  4471  04C2                     ___llmod:	
  4472                           
  4473                           ;incstack = 0
  4474                           ; Regs used in ___llmod: [wreg+status,2+status,0]
  4475  04C2  0020               	movlb	0	; select bank0
  4476  04C3  0824               	movf	___llmod@divisor+3,w
  4477  04C4  0423               	iorwf	___llmod@divisor+2,w
  4478  04C5  0422               	iorwf	___llmod@divisor+1,w
  4479  04C6  0421               	iorwf	___llmod@divisor,w
  4480  04C7  1903               	skipnz
  4481  04C8  2CFC               	goto	l1881
  4482  04C9  01AA               	clrf	___llmod@counter
  4483  04CA  0AAA               	incf	___llmod@counter,f
  4484  04CB                     l1871:	
  4485  04CB  1BA4               	btfsc	___llmod@divisor+3,7
  4486  04CC  2CD9               	goto	l1873
  4487  04CD  3001               	movlw	1
  4488  04CE                     u785:	
  4489  04CE  35A1               	lslf	___llmod@divisor,f
  4490  04CF  0DA2               	rlf	___llmod@divisor+1,f
  4491  04D0  0DA3               	rlf	___llmod@divisor+2,f
  4492  04D1  0DA4               	rlf	___llmod@divisor+3,f
  4493  04D2  0B89               	decfsz	9,f
  4494  04D3  2CCE               	goto	u785
  4495  04D4  3001               	movlw	1
  4496  04D5  00A9               	movwf	??___llmod
  4497  04D6  0829               	movf	??___llmod,w
  4498  04D7  07AA               	addwf	___llmod@counter,f
  4499  04D8  2CCB               	goto	l1871
  4500  04D9                     l1873:	
  4501  04D9  0824               	movf	___llmod@divisor+3,w
  4502  04DA  0228               	subwf	___llmod@dividend+3,w
  4503  04DB  1D03               	skipz
  4504  04DC  2CE7               	goto	u805
  4505  04DD  0823               	movf	___llmod@divisor+2,w
  4506  04DE  0227               	subwf	___llmod@dividend+2,w
  4507  04DF  1D03               	skipz
  4508  04E0  2CE7               	goto	u805
  4509  04E1  0822               	movf	___llmod@divisor+1,w
  4510  04E2  0226               	subwf	___llmod@dividend+1,w
  4511  04E3  1D03               	skipz
  4512  04E4  2CE7               	goto	u805
  4513  04E5  0821               	movf	___llmod@divisor,w
  4514  04E6  0225               	subwf	___llmod@dividend,w
  4515  04E7                     u805:	
  4516  04E7  1C03               	skipc
  4517  04E8  2CF1               	goto	l1877
  4518  04E9  0821               	movf	___llmod@divisor,w
  4519  04EA  02A5               	subwf	___llmod@dividend,f
  4520  04EB  0822               	movf	___llmod@divisor+1,w
  4521  04EC  3BA6               	subwfb	___llmod@dividend+1,f
  4522  04ED  0823               	movf	___llmod@divisor+2,w
  4523  04EE  3BA7               	subwfb	___llmod@dividend+2,f
  4524  04EF  0824               	movf	___llmod@divisor+3,w
  4525  04F0  3BA8               	subwfb	___llmod@dividend+3,f
  4526  04F1                     l1877:	
  4527  04F1  3001               	movlw	1
  4528  04F2                     u815:	
  4529  04F2  36A4               	lsrf	___llmod@divisor+3,f
  4530  04F3  0CA3               	rrf	___llmod@divisor+2,f
  4531  04F4  0CA2               	rrf	___llmod@divisor+1,f
  4532  04F5  0CA1               	rrf	___llmod@divisor,f
  4533  04F6  0B89               	decfsz	9,f
  4534  04F7  2CF2               	goto	u815
  4535  04F8  3001               	movlw	1
  4536  04F9  02AA               	subwf	___llmod@counter,f
  4537  04FA  1D03               	btfss	3,2
  4538  04FB  2CD9               	goto	l1873
  4539  04FC                     l1881:	
  4540  04FC  0828               	movf	___llmod@dividend+3,w
  4541  04FD  00A4               	movwf	?___llmod+3
  4542  04FE  0827               	movf	___llmod@dividend+2,w
  4543  04FF  00A3               	movwf	?___llmod+2
  4544  0500  0826               	movf	___llmod@dividend+1,w
  4545  0501  00A2               	movwf	?___llmod+1
  4546  0502  0825               	movf	___llmod@dividend,w
  4547  0503  00A1               	movwf	?___llmod
  4548  0504  0008               	return
  4549  0505                     __end_of___llmod:	
  4550                           
  4551                           	psect	text10
  4552  06A5                     __ptext10:	
  4553 ;; *************** function _strcat *****************
  4554 ;; Defined at:
  4555 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\strcat.c"
  4556 ;; Parameters:    Size  Location     Type
  4557 ;;  to              1    wreg     PTR unsigned char 
  4558 ;;		 -> main@packet(33), loop@packet(33), 
  4559 ;;  from            2    1[BANK0 ] PTR const unsigned char 
  4560 ;;		 -> STR_9(5), STR_7(5), STR_6(4), STR_5(5), 
  4561 ;;		 -> STR_4(5), STR_3(4), STR_2(2), setMessage@tempString(16), 
  4562 ;;		 -> STR_1(2), romData.name(16), romData(19), 
  4563 ;; Auto vars:     Size  Location     Type
  4564 ;;  to              1    5[BANK0 ] PTR unsigned char 
  4565 ;;		 -> main@packet(33), loop@packet(33), 
  4566 ;;  cp              1    4[BANK0 ] PTR unsigned char 
  4567 ;;		 -> main@packet(33), loop@packet(33), 
  4568 ;; Return value:  Size  Location     Type
  4569 ;;                  1    wreg      PTR unsigned char 
  4570 ;; Registers used:
  4571 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath
  4572 ;; Tracked objects:
  4573 ;;		On entry : 0/0
  4574 ;;		On exit  : 0/0
  4575 ;;		Unchanged: 0/0
  4576 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4577 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4578 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4579 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4580 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4581 ;;Total ram usage:        5 bytes
  4582 ;; Hardware stack levels used:    1
  4583 ;; Hardware stack levels required when called:    7
  4584 ;; This function calls:
  4585 ;;		Nothing
  4586 ;; This function is called by:
  4587 ;;		_setMessage
  4588 ;; This function uses a non-reentrant model
  4589 ;;
  4590                           
  4591                           
  4592                           ;psect for function _strcat
  4593  06A5                     _strcat:	
  4594                           
  4595                           ;incstack = 0
  4596                           ; Regs used in _strcat: [wreg-fsr1h+status,2+status,0+pclath]
  4597                           ;strcat@to stored from wreg
  4598  06A5  0020               	movlb	0	; select bank0
  4599  06A6  00A5               	movwf	strcat@to
  4600  06A7  0825               	movf	strcat@to,w
  4601  06A8  00A3               	movwf	??_strcat
  4602  06A9  0823               	movf	??_strcat,w
  4603  06AA  00A4               	movwf	strcat@cp
  4604  06AB                     l1989:	
  4605  06AB  0824               	movf	strcat@cp,w
  4606  06AC  0086               	movwf	6
  4607  06AD  0187               	clrf	7
  4608  06AE  0801               	movf	1,w
  4609  06AF  1903               	btfsc	3,2
  4610  06B0  2EBE               	goto	l1995
  4611  06B1  3001               	movlw	1
  4612  06B2  00A3               	movwf	??_strcat
  4613  06B3  0823               	movf	??_strcat,w
  4614  06B4  07A4               	addwf	strcat@cp,f
  4615  06B5  2EAB               	goto	l1989
  4616  06B6                     l1991:	
  4617  06B6  3001               	movlw	1
  4618  06B7  00A3               	movwf	??_strcat
  4619  06B8  0823               	movf	??_strcat,w
  4620  06B9  07A4               	addwf	strcat@cp,f
  4621  06BA  3001               	movlw	1
  4622  06BB  07A1               	addwf	strcat@from,f
  4623  06BC  3000               	movlw	0
  4624  06BD  3DA2               	addwfc	strcat@from+1,f
  4625  06BE                     l1995:	
  4626  06BE  0824               	movf	strcat@cp,w
  4627  06BF  0086               	movwf	6
  4628  06C0  0187               	clrf	7
  4629  06C1  0821               	movf	strcat@from,w
  4630  06C2  0084               	movwf	4
  4631  06C3  0822               	movf	strcat@from+1,w
  4632  06C4  0085               	movwf	5
  4633  06C5  0800               	movf	0,w	;code access
  4634  06C6  3FC0               	movwi [0]fsr1
  4635  06C7  0889               	movf	9,f
  4636  06C8  1903               	btfsc	3,2
  4637  06C9  0008               	return
  4638  06CA  2EB6               	goto	l1991
  4639  06CB                     __end_of_strcat:	
  4640                           ;	Return value of _strcat is never used
  4641                           
  4642                           
  4643                           	psect	text11
  4644  0FB1                     __ptext11:	
  4645 ;; *************** function _memset *****************
  4646 ;; Defined at:
  4647 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\memset.c"
  4648 ;; Parameters:    Size  Location     Type
  4649 ;;  p1              2    1[BANK0 ] PTR void 
  4650 ;;		 -> RXPacket(33), main@packet(33), loop@packet(33), 
  4651 ;;  c               2    3[BANK0 ] int 
  4652 ;;  n               2    5[BANK0 ] unsigned int 
  4653 ;; Auto vars:     Size  Location     Type
  4654 ;;  p               2    7[BANK0 ] PTR unsigned char 
  4655 ;;		 -> RXPacket(33), main@packet(33), loop@packet(33), 
  4656 ;; Return value:  Size  Location     Type
  4657 ;;                  2    1[BANK0 ] PTR void 
  4658 ;; Registers used:
  4659 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  4660 ;; Tracked objects:
  4661 ;;		On entry : 0/0
  4662 ;;		On exit  : 0/0
  4663 ;;		Unchanged: 0/0
  4664 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4665 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4666 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4667 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4668 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4669 ;;Total ram usage:        8 bytes
  4670 ;; Hardware stack levels used:    1
  4671 ;; Hardware stack levels required when called:    7
  4672 ;; This function calls:
  4673 ;;		Nothing
  4674 ;; This function is called by:
  4675 ;;		_setMessage
  4676 ;; This function uses a non-reentrant model
  4677 ;;
  4678                           
  4679                           
  4680                           ;psect for function _memset
  4681  0FB1                     _memset:	
  4682                           
  4683                           ;incstack = 0
  4684                           ; Regs used in _memset: [wreg+fsr1l+fsr1h+status,2+status,0]
  4685  0FB1  0020               	movlb	0	; select bank0
  4686  0FB2  0822               	movf	memset@p1+1,w
  4687  0FB3  00A8               	movwf	memset@p+1
  4688  0FB4  0821               	movf	memset@p1,w
  4689  0FB5  00A7               	movwf	memset@p
  4690  0FB6                     l2691:	
  4691  0FB6  3001               	movlw	1
  4692  0FB7  02A5               	subwf	memset@n,f
  4693  0FB8  3000               	movlw	0
  4694  0FB9  3BA6               	subwfb	memset@n+1,f
  4695  0FBA  0A25               	incf	memset@n,w
  4696  0FBB  1903               	btfsc	3,2
  4697  0FBC  0A26               	incf	memset@n+1,w
  4698  0FBD  1903               	btfsc	3,2
  4699  0FBE  0008               	return
  4700  0FBF  0827               	movf	memset@p,w
  4701  0FC0  0086               	movwf	6
  4702  0FC1  0828               	movf	memset@p+1,w
  4703  0FC2  0087               	movwf	7
  4704  0FC3  0823               	movf	memset@c,w
  4705  0FC4  0081               	movwf	1
  4706  0FC5  3001               	movlw	1
  4707  0FC6  07A7               	addwf	memset@p,f
  4708  0FC7  3000               	movlw	0
  4709  0FC8  3DA8               	addwfc	memset@p+1,f
  4710  0FC9  2FB6               	goto	l2691
  4711  0FCA                     __end_of_memset:	
  4712                           ;	Return value of _memset is never used
  4713                           
  4714                           
  4715                           	psect	text12
  4716  01A4                     __ptext12:	
  4717 ;; *************** function _nrf24l01SendPacket *****************
  4718 ;; Defined at:
  4719 ;;		line 149 in file "nrf24l01.c"
  4720 ;; Parameters:    Size  Location     Type
  4721 ;;  Packet          1    wreg     PTR struct .
  4722 ;;		 -> main@packet(33), loop@packet(33), 
  4723 ;; Auto vars:     Size  Location     Type
  4724 ;;  Packet          1   11[BANK0 ] PTR struct .
  4725 ;;		 -> main@packet(33), loop@packet(33), 
  4726 ;;  i               1   12[BANK0 ] unsigned char 
  4727 ;; Return value:  Size  Location     Type
  4728 ;;                  1    wreg      void 
  4729 ;; Registers used:
  4730 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4731 ;; Tracked objects:
  4732 ;;		On entry : 0/0
  4733 ;;		On exit  : 0/0
  4734 ;;		Unchanged: 0/0
  4735 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4736 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4737 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4738 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4739 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4740 ;;Total ram usage:        4 bytes
  4741 ;; Hardware stack levels used:    1
  4742 ;; Hardware stack levels required when called:   11
  4743 ;; This function calls:
  4744 ;;		_enableInterrupts
  4745 ;;		_nrf24l01CEHigh
  4746 ;;		_nrf24l01CELow
  4747 ;;		_nrf24l01SPIEnd
  4748 ;;		_nrf24l01SPISend
  4749 ;;		_nrf24l01SPIStart
  4750 ;;		_nrf24l01SetRXMode
  4751 ;;		_strlen
  4752 ;; This function is called by:
  4753 ;;		_loop
  4754 ;;		_main
  4755 ;;		_nrf24l01SendACK
  4756 ;; This function uses a non-reentrant model
  4757 ;;
  4758                           
  4759                           
  4760                           ;psect for function _nrf24l01SendPacket
  4761  01A4                     _nrf24l01SendPacket:	
  4762                           
  4763                           ;incstack = 0
  4764                           ; Regs used in _nrf24l01SendPacket: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4765                           ;nrf24l01SendPacket@Packet stored from wreg
  4766  01A4  0020               	movlb	0	; select bank0
  4767  01A5  00AB               	movwf	nrf24l01SendPacket@Packet
  4768                           
  4769                           ;nrf24l01.c: 151: TXPacket = Packet;
  4770  01A6  082B               	movf	nrf24l01SendPacket@Packet,w
  4771  01A7  00A9               	movwf	??_nrf24l01SendPacket
  4772  01A8  0829               	movf	??_nrf24l01SendPacket,w
  4773  01A9  00D9               	movwf	_TXPacket
  4774  01AA                     l307:	
  4775                           ;nrf24l01.c: 154: unsigned char i;;nrf24l01.c: 158: RESEND:
  4776                           
  4777                           
  4778                           ;nrf24l01.c: 161: i = 0xFF;
  4779  01AA  30FF               	movlw	255
  4780  01AB  00A9               	movwf	??_nrf24l01SendPacket
  4781  01AC  0829               	movf	??_nrf24l01SendPacket,w
  4782  01AD  00AC               	movwf	nrf24l01SendPacket@i
  4783  01AE                     l2255:	
  4784                           ;nrf24l01.c: 162: while (nrf24l01.TXBusy){
  4785                           
  4786  01AE  0020               	movlb	0	; select bank0
  4787  01AF  1C5B               	btfss	_nrf24l01,0	;volatile
  4788  01B0  29BA               	goto	l311
  4789                           
  4790                           ;nrf24l01.c: 163: if (!--i) {
  4791  01B1  3001               	movlw	1
  4792  01B2  02AC               	subwf	nrf24l01SendPacket@i,f
  4793  01B3  1903               	btfsc	3,2
  4794  01B4  29AA               	goto	l307
  4795                           
  4796                           ;nrf24l01.c: 165: };nrf24l01.c: 166: _delay((unsigned long)((50)*(16000000/4000000.0)));
  4797                           
  4798                           ;nrf24l01.c: 164: goto RESEND;
  4799  01B5  3042               	movlw	66
  4800  01B6                     u1527:	
  4801  01B6  0B89               	decfsz	9,f
  4802  01B7  29B6               	goto	u1527
  4803  01B8  3200               	nop2
  4804  01B9  29AE               	goto	l2255
  4805  01BA                     l311:	
  4806                           
  4807                           ;nrf24l01.c: 167: };nrf24l01.c: 170: nrf24l01.TXBusy = 1;
  4808  01BA  145B               	bsf	_nrf24l01,0	;volatile
  4809                           
  4810                           ;nrf24l01.c: 173: enableInterrupts(0);
  4811  01BB  3000               	movlw	0
  4812  01BC  318F  2768  3181   	fcall	_enableInterrupts
  4813                           
  4814                           ;nrf24l01.c: 176: nrf24l01SetRXMode(0);
  4815  01BF  3000               	movlw	0
  4816  01C0  3185  2541  3181   	fcall	_nrf24l01SetRXMode
  4817                           
  4818                           ;nrf24l01.c: 179: nrf24l01SPIStart();
  4819  01C3  318F  2770  3181   	fcall	_nrf24l01SPIStart
  4820                           
  4821                           ;nrf24l01.c: 182: nrf24l01SPISend(0b10110000);
  4822  01C6  30B0               	movlw	176
  4823  01C7  3187  27F1  3181   	fcall	_nrf24l01SPISend
  4824                           
  4825                           ;nrf24l01.c: 184: nrf24l01SPISend(TXPacket->packetData.byte);
  4826  01CA  0020               	movlb	0	; select bank0
  4827  01CB  0859               	movf	_TXPacket,w
  4828  01CC  0086               	movwf	6
  4829  01CD  0187               	clrf	7
  4830  01CE  0801               	movf	1,w
  4831  01CF  3187  27F1  3181   	fcall	_nrf24l01SPISend
  4832                           
  4833                           ;nrf24l01.c: 187: for (i = 0; (i < strlen(TXPacket->Message)) && (i < sizeof(TXPacket->M
      +                          essage)); i++){
  4834  01D2  0020               	movlb	0	; select bank0
  4835  01D3  01AC               	clrf	nrf24l01SendPacket@i
  4836  01D4  29E5               	goto	l2267
  4837  01D5                     l2263:	
  4838                           
  4839                           ;nrf24l01.c: 188: nrf24l01SPISend(TXPacket->Message[i]);
  4840  01D5  082C               	movf	nrf24l01SendPacket@i,w
  4841  01D6  3E01               	addlw	1
  4842  01D7  0759               	addwf	_TXPacket,w
  4843  01D8  00A9               	movwf	??_nrf24l01SendPacket
  4844  01D9  0829               	movf	??_nrf24l01SendPacket,w
  4845  01DA  0086               	movwf	6
  4846  01DB  0187               	clrf	7
  4847  01DC  0801               	movf	1,w
  4848  01DD  3187  27F1  3181   	fcall	_nrf24l01SPISend
  4849  01E0  3001               	movlw	1
  4850  01E1  0020               	movlb	0	; select bank0
  4851  01E2  00A9               	movwf	??_nrf24l01SendPacket
  4852  01E3  0829               	movf	??_nrf24l01SendPacket,w
  4853  01E4  07AC               	addwf	nrf24l01SendPacket@i,f
  4854  01E5                     l2267:	
  4855  01E5  0859               	movf	_TXPacket,w
  4856  01E6  3E01               	addlw	1
  4857  01E7  3186  26F1  3181   	fcall	_strlen
  4858  01EA  0020               	movlb	0	; select bank0
  4859  01EB  082C               	movf	nrf24l01SendPacket@i,w
  4860  01EC  00A9               	movwf	??_nrf24l01SendPacket
  4861  01ED  01AA               	clrf	??_nrf24l01SendPacket+1
  4862  01EE  0822               	movf	?_strlen+1,w
  4863  01EF  022A               	subwf	??_nrf24l01SendPacket+1,w
  4864  01F0  1D03               	skipz
  4865  01F1  29F4               	goto	u1135
  4866  01F2  0821               	movf	?_strlen,w
  4867  01F3  0229               	subwf	??_nrf24l01SendPacket,w
  4868  01F4                     u1135:	
  4869  01F4  1803               	skipnc
  4870  01F5  29FA               	goto	l2271
  4871  01F6  3020               	movlw	32
  4872  01F7  022C               	subwf	nrf24l01SendPacket@i,w
  4873  01F8  1C03               	skipc
  4874  01F9  29D5               	goto	l2263
  4875  01FA                     l2271:	
  4876                           
  4877                           ;nrf24l01.c: 189: };nrf24l01.c: 192: nrf24l01SPIEnd();
  4878  01FA  318F  2761  3181   	fcall	_nrf24l01SPIEnd
  4879                           
  4880                           ;nrf24l01.c: 195: nrf24l01CEHigh();
  4881  01FD  318F  274F  3181   	fcall	_nrf24l01CEHigh
  4882                           
  4883                           ;nrf24l01.c: 196: _delay((unsigned long)((20)*(16000000/4000000.0)));
  4884  0200  301A               	movlw	26
  4885  0201                     u1537:	
  4886  0201  0B89               	decfsz	9,f
  4887  0202  2A01               	goto	u1537
  4888  0203  3200               	nop2
  4889                           
  4890                           ;nrf24l01.c: 197: nrf24l01CELow();
  4891  0204  318F  2752  3181   	fcall	_nrf24l01CELow
  4892                           
  4893                           ;nrf24l01.c: 200: enableInterrupts(1);
  4894  0207  3001               	movlw	1
  4895  0208  318F  2768  3181   	fcall	_enableInterrupts
  4896                           
  4897                           ;nrf24l01.c: 203: i = 0xFF;
  4898  020B  30FF               	movlw	255
  4899  020C  0020               	movlb	0	; select bank0
  4900  020D  00A9               	movwf	??_nrf24l01SendPacket
  4901  020E  0829               	movf	??_nrf24l01SendPacket,w
  4902  020F  00AC               	movwf	nrf24l01SendPacket@i
  4903  0210                     l2285:	
  4904                           ;nrf24l01.c: 204: while (nrf24l01.TXBusy){
  4905                           
  4906  0210  0020               	movlb	0	; select bank0
  4907  0211  1C5B               	btfss	_nrf24l01,0	;volatile
  4908  0212  2A1C               	goto	l2287
  4909                           
  4910                           ;nrf24l01.c: 205: if (!--i) {
  4911  0213  3001               	movlw	1
  4912  0214  02AC               	subwf	nrf24l01SendPacket@i,f
  4913  0215  1903               	btfsc	3,2
  4914  0216  29AA               	goto	l307
  4915                           
  4916                           ;nrf24l01.c: 207: };nrf24l01.c: 208: _delay((unsigned long)((20)*(16000000/4000000.0)));
  4917                           
  4918                           ;nrf24l01.c: 206: goto RESEND;
  4919  0217  301A               	movlw	26
  4920  0218                     u1547:	
  4921  0218  0B89               	decfsz	9,f
  4922  0219  2A18               	goto	u1547
  4923  021A  3200               	nop2
  4924  021B  2A10               	goto	l2285
  4925  021C                     l2287:	
  4926                           
  4927                           ;nrf24l01.c: 209: };nrf24l01.c: 213: i = 0xFF;
  4928  021C  30FF               	movlw	255
  4929  021D  00A9               	movwf	??_nrf24l01SendPacket
  4930  021E  0829               	movf	??_nrf24l01SendPacket,w
  4931  021F  00AC               	movwf	nrf24l01SendPacket@i
  4932  0220                     l2295:	
  4933                           ;nrf24l01.c: 214: while (TXPacket->packetData.ACKRequest){
  4934                           
  4935  0220  0020               	movlb	0	; select bank0
  4936  0221  0859               	movf	_TXPacket,w
  4937  0222  0086               	movwf	6
  4938  0223  0187               	clrf	7
  4939  0224  1C81               	btfss	1,1
  4940  0225  0008               	return
  4941                           
  4942                           ;nrf24l01.c: 215: if (!--i) {
  4943  0226  3001               	movlw	1
  4944  0227  02AC               	subwf	nrf24l01SendPacket@i,f
  4945  0228  1903               	btfsc	3,2
  4946  0229  29AA               	goto	l307
  4947                           
  4948                           ;nrf24l01.c: 217: };nrf24l01.c: 218: _delay((unsigned long)((500)*(16000000/4000000.0)))
      +                          ;
  4949                           
  4950                           ;nrf24l01.c: 216: goto RESEND;
  4951  022A  3003               	movlw	3
  4952  022B  0020               	movlb	0	; select bank0
  4953  022C  00A9               	movwf	??_nrf24l01SendPacket
  4954  022D  3097               	movlw	151
  4955  022E                     u1557:	
  4956  022E  0B89               	decfsz	9,f
  4957  022F  2A2E               	goto	u1557
  4958  0230  0BA9               	decfsz	??_nrf24l01SendPacket,f
  4959  0231  2A2E               	goto	u1557
  4960  0232  3200               	nop2
  4961  0233  2A20               	goto	l2295
  4962  0234                     __end_of_nrf24l01SendPacket:	
  4963                           
  4964                           	psect	text13
  4965  06F1                     __ptext13:	
  4966 ;; *************** function _strlen *****************
  4967 ;; Defined at:
  4968 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\strlen.c"
  4969 ;; Parameters:    Size  Location     Type
  4970 ;;  s               1    wreg     PTR const unsigned char 
  4971 ;;		 -> packet.Message(32), packet.Message(32), NULL(0), main@packet(33), 
  4972 ;;		 -> loop@packet(33), 
  4973 ;; Auto vars:     Size  Location     Type
  4974 ;;  s               1    7[BANK0 ] PTR const unsigned char 
  4975 ;;		 -> packet.Message(32), packet.Message(32), NULL(0), main@packet(33), 
  4976 ;;		 -> loop@packet(33), 
  4977 ;;  cp              1    8[BANK0 ] PTR const unsigned char 
  4978 ;;		 -> packet.Message(32), packet.Message(32), NULL(0), main@packet(33), 
  4979 ;;		 -> loop@packet(33), 
  4980 ;; Return value:  Size  Location     Type
  4981 ;;                  2    1[BANK0 ] unsigned int 
  4982 ;; Registers used:
  4983 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  4984 ;; Tracked objects:
  4985 ;;		On entry : 0/0
  4986 ;;		On exit  : 0/0
  4987 ;;		Unchanged: 0/0
  4988 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4989 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4990 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4991 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4992 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4993 ;;Total ram usage:        8 bytes
  4994 ;; Hardware stack levels used:    1
  4995 ;; Hardware stack levels required when called:    7
  4996 ;; This function calls:
  4997 ;;		Nothing
  4998 ;; This function is called by:
  4999 ;;		_nrf24l01SendPacket
  5000 ;; This function uses a non-reentrant model
  5001 ;;
  5002                           
  5003                           
  5004                           ;psect for function _strlen
  5005  06F1                     _strlen:	
  5006                           
  5007                           ;incstack = 0
  5008                           ; Regs used in _strlen: [wreg+fsr1l+fsr1h+status,2+status,0]
  5009                           ;strlen@s stored from wreg
  5010  06F1  0020               	movlb	0	; select bank0
  5011  06F2  00A7               	movwf	strlen@s
  5012  06F3  0827               	movf	strlen@s,w
  5013  06F4  00A3               	movwf	??_strlen
  5014  06F5  0823               	movf	??_strlen,w
  5015  06F6  00A8               	movwf	strlen@cp
  5016  06F7                     l2041:	
  5017  06F7  0828               	movf	strlen@cp,w
  5018  06F8  0086               	movwf	6
  5019  06F9  0187               	clrf	7
  5020  06FA  0801               	movf	1,w
  5021  06FB  1903               	btfsc	3,2
  5022  06FC  2F02               	goto	l2043
  5023  06FD  3001               	movlw	1
  5024  06FE  00A3               	movwf	??_strlen
  5025  06FF  0823               	movf	??_strlen,w
  5026  0700  07A8               	addwf	strlen@cp,f
  5027  0701  2EF7               	goto	l2041
  5028  0702                     l2043:	
  5029  0702  0827               	movf	strlen@s,w
  5030  0703  00A3               	movwf	??_strlen
  5031  0704  3000               	movlw	0
  5032  0705  00A4               	movwf	??_strlen+1
  5033  0706  09A3               	comf	??_strlen,f
  5034  0707  09A4               	comf	??_strlen+1,f
  5035  0708  0AA3               	incf	??_strlen,f
  5036  0709  1903               	skipnz
  5037  070A  0AA4               	incf	??_strlen+1,f
  5038  070B  0828               	movf	strlen@cp,w
  5039  070C  00A5               	movwf	??_strlen+2
  5040  070D  3000               	movlw	0
  5041  070E  00A6               	movwf	??_strlen+3
  5042  070F  0823               	movf	??_strlen,w
  5043  0710  0725               	addwf	??_strlen+2,w
  5044  0711  00A1               	movwf	?_strlen
  5045  0712  0824               	movf	??_strlen+1,w
  5046  0713  3D26               	addwfc	??_strlen+3,w
  5047  0714  00A2               	movwf	?_strlen+1
  5048  0715  0008               	return
  5049  0716                     __end_of_strlen:	
  5050                           
  5051                           	psect	text14
  5052  0541                     __ptext14:	
  5053 ;; *************** function _nrf24l01SetRXMode *****************
  5054 ;; Defined at:
  5055 ;;		line 35 in file "nrf24l01.c"
  5056 ;; Parameters:    Size  Location     Type
  5057 ;;  rxMode          1    wreg     unsigned char 
  5058 ;; Auto vars:     Size  Location     Type
  5059 ;;  rxMode          1    6[BANK0 ] unsigned char 
  5060 ;;  config          1    5[BANK0 ] struct .
  5061 ;; Return value:  Size  Location     Type
  5062 ;;                  1    wreg      void 
  5063 ;; Registers used:
  5064 ;;		wreg, status,2, status,0, pclath, cstack
  5065 ;; Tracked objects:
  5066 ;;		On entry : 0/0
  5067 ;;		On exit  : 0/0
  5068 ;;		Unchanged: 0/0
  5069 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5070 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5071 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5072 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5073 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5074 ;;Total ram usage:        3 bytes
  5075 ;; Hardware stack levels used:    1
  5076 ;; Hardware stack levels required when called:   10
  5077 ;; This function calls:
  5078 ;;		_nrf24l01CEHigh
  5079 ;;		_nrf24l01CELow
  5080 ;;		_nrf24l01Send
  5081 ;; This function is called by:
  5082 ;;		_nrf24l01SendPacket
  5083 ;;		_checkRxData
  5084 ;; This function uses a non-reentrant model
  5085 ;;
  5086                           
  5087                           
  5088                           ;psect for function _nrf24l01SetRXMode
  5089  0541                     _nrf24l01SetRXMode:	
  5090                           
  5091                           ;incstack = 0
  5092                           ; Regs used in _nrf24l01SetRXMode: [wreg+status,2+status,0+pclath+cstack]
  5093                           ;nrf24l01SetRXMode@rxMode stored from wreg
  5094  0541  0020               	movlb	0	; select bank0
  5095  0542  00A6               	movwf	nrf24l01SetRXMode@rxMode
  5096                           
  5097                           ;nrf24l01.c: 37: n_CONFIG_t config;;nrf24l01.c: 40: config.byte = nrf24l01Send(0b0000000
      +                          0 | 0x00, 0);
  5098  0543  01A1               	clrf	nrf24l01Send@data
  5099  0544  3000               	movlw	0
  5100  0545  3187  275A  3185   	fcall	_nrf24l01Send
  5101  0548  0020               	movlb	0	; select bank0
  5102  0549  00A4               	movwf	??_nrf24l01SetRXMode
  5103  054A  0824               	movf	??_nrf24l01SetRXMode,w
  5104  054B  00A5               	movwf	nrf24l01SetRXMode@config
  5105                           
  5106                           ;nrf24l01.c: 43: if (config.PRIM_RX != rxMode){
  5107  054C  0825               	movf	nrf24l01SetRXMode@config,w
  5108  054D  3901               	andlw	1
  5109  054E  0626               	xorwf	nrf24l01SetRXMode@rxMode,w
  5110  054F  1903               	skipnz
  5111  0550  2D75               	goto	l1975
  5112                           
  5113                           ;nrf24l01.c: 46: nrf24l01CELow();
  5114  0551  318F  2752  3185   	fcall	_nrf24l01CELow
  5115                           
  5116                           ;nrf24l01.c: 47: _delay((unsigned long)((200)*(16000000/4000000.0)));
  5117  0554  30A0               	movlw	160
  5118  0555                     u1567:	
  5119  0555  3200               	nop2
  5120  0556  0B89               	decfsz	9,f
  5121  0557  2D55               	goto	u1567
  5122                           
  5123                           ;nrf24l01.c: 54: config.PRIM_RX = rxMode;
  5124  0558  0020               	movlb	0	; select bank0
  5125  0559  0826               	movf	nrf24l01SetRXMode@rxMode,w
  5126  055A  3901               	andlw	1
  5127  055B  1025               	bcf	nrf24l01SetRXMode@config,0
  5128  055C  1D03               	skipz
  5129  055D  1425               	bsf	nrf24l01SetRXMode@config,0
  5130                           
  5131                           ;nrf24l01.c: 55: nrf24l01Send(0b00100000 | 0x00, config.byte);
  5132  055E  0825               	movf	nrf24l01SetRXMode@config,w
  5133  055F  00A4               	movwf	??_nrf24l01SetRXMode
  5134  0560  0824               	movf	??_nrf24l01SetRXMode,w
  5135  0561  00A1               	movwf	nrf24l01Send@data
  5136  0562  3020               	movlw	32
  5137  0563  3187  275A  3185   	fcall	_nrf24l01Send
  5138                           
  5139                           ;nrf24l01.c: 58: _delay((unsigned long)((200)*(16000000/4000000.0)));
  5140  0566  30A0               	movlw	160
  5141  0567                     u1577:	
  5142  0567  3200               	nop2
  5143  0568  0B89               	decfsz	9,f
  5144  0569  2D67               	goto	u1577
  5145                           
  5146                           ;nrf24l01.c: 61: if (rxMode){
  5147  056A  0020               	movlb	0	; select bank0
  5148  056B  0826               	movf	nrf24l01SetRXMode@rxMode,w
  5149  056C  1903               	btfsc	3,2
  5150  056D  2D75               	goto	l1975
  5151                           
  5152                           ;nrf24l01.c: 62: nrf24l01CEHigh();
  5153  056E  318F  274F  3185   	fcall	_nrf24l01CEHigh
  5154                           
  5155                           ;nrf24l01.c: 63: _delay((unsigned long)((200)*(16000000/4000000.0)));
  5156  0571  30A0               	movlw	160
  5157  0572                     u1587:	
  5158  0572  3200               	nop2
  5159  0573  0B89               	decfsz	9,f
  5160  0574  2D72               	goto	u1587
  5161  0575                     l1975:	
  5162                           
  5163                           ;nrf24l01.c: 64: };nrf24l01.c: 65: };nrf24l01.c: 68: nrf24l01.RXMode = rxMode;
  5164  0575  0020               	movlb	0	; select bank0
  5165  0576  0826               	movf	nrf24l01SetRXMode@rxMode,w
  5166  0577  3901               	andlw	1
  5167  0578  115B               	bcf	_nrf24l01,2	;volatile
  5168  0579  1D03               	skipz
  5169  057A  155B               	bsf	_nrf24l01,2	;volatile
  5170  057B  0008               	return
  5171  057C                     __end_of_nrf24l01SetRXMode:	
  5172                           
  5173                           	psect	text15
  5174  075A                     __ptext15:	
  5175 ;; *************** function _nrf24l01Send *****************
  5176 ;; Defined at:
  5177 ;;		line 9 in file "nrf24l01.c"
  5178 ;; Parameters:    Size  Location     Type
  5179 ;;  command         1    wreg     unsigned char 
  5180 ;;  data            1    1[BANK0 ] unsigned char 
  5181 ;; Auto vars:     Size  Location     Type
  5182 ;;  command         1    3[BANK0 ] unsigned char 
  5183 ;; Return value:  Size  Location     Type
  5184 ;;                  1    wreg      unsigned char 
  5185 ;; Registers used:
  5186 ;;		wreg, status,2, status,0, pclath, cstack
  5187 ;; Tracked objects:
  5188 ;;		On entry : 0/0
  5189 ;;		On exit  : 0/0
  5190 ;;		Unchanged: 0/0
  5191 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5192 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5193 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5194 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5195 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5196 ;;Total ram usage:        3 bytes
  5197 ;; Hardware stack levels used:    1
  5198 ;; Hardware stack levels required when called:    9
  5199 ;; This function calls:
  5200 ;;		_enableInterrupts
  5201 ;;		_nrf24l01SPIEnd
  5202 ;;		_nrf24l01SPISend
  5203 ;;		_nrf24l01SPIStart
  5204 ;; This function is called by:
  5205 ;;		_nrf24l01SetRXMode
  5206 ;;		_nrf24l01InitRegisters
  5207 ;; This function uses a non-reentrant model
  5208 ;;
  5209                           
  5210                           
  5211                           ;psect for function _nrf24l01Send
  5212  075A                     _nrf24l01Send:	
  5213                           
  5214                           ;incstack = 0
  5215                           ; Regs used in _nrf24l01Send: [wreg+status,2+status,0+pclath+cstack]
  5216                           ;nrf24l01Send@command stored from wreg
  5217  075A  0020               	movlb	0	; select bank0
  5218  075B  00A3               	movwf	nrf24l01Send@command
  5219                           
  5220                           ;nrf24l01.c: 12: enableInterrupts(0);
  5221  075C  3000               	movlw	0
  5222  075D  318F  2768  3187   	fcall	_enableInterrupts
  5223                           
  5224                           ;nrf24l01.c: 15: nrf24l01SPIStart();
  5225  0760  318F  2770  3187   	fcall	_nrf24l01SPIStart
  5226                           
  5227                           ;nrf24l01.c: 18: nrf24l01SPISend(command);
  5228  0763  0020               	movlb	0	; select bank0
  5229  0764  0823               	movf	nrf24l01Send@command,w
  5230  0765  3187  27F1  3187   	fcall	_nrf24l01SPISend
  5231                           
  5232                           ;nrf24l01.c: 21: data = nrf24l01SPISend(data);
  5233  0768  0020               	movlb	0	; select bank0
  5234  0769  0821               	movf	nrf24l01Send@data,w
  5235  076A  3187  27F1  3187   	fcall	_nrf24l01SPISend
  5236  076D  0020               	movlb	0	; select bank0
  5237  076E  00A2               	movwf	??_nrf24l01Send
  5238  076F  0822               	movf	??_nrf24l01Send,w
  5239  0770  00A1               	movwf	nrf24l01Send@data
  5240                           
  5241                           ;nrf24l01.c: 24: nrf24l01SPIEnd();
  5242  0771  318F  2761  3187   	fcall	_nrf24l01SPIEnd
  5243                           
  5244                           ;nrf24l01.c: 27: enableInterrupts(1);
  5245  0774  3001               	movlw	1
  5246  0775  318F  2768         	fcall	_enableInterrupts
  5247                           
  5248                           ;nrf24l01.c: 29: return data;
  5249  0777  0020               	movlb	0	; select bank0
  5250  0778  0821               	movf	nrf24l01Send@data,w
  5251  0779  0008               	return
  5252  077A                     __end_of_nrf24l01Send:	
  5253                           
  5254                           	psect	text16
  5255  0346                     __ptext16:	
  5256 ;; *************** function _getADCValue *****************
  5257 ;; Defined at:
  5258 ;;		line 22 in file "main.c"
  5259 ;; Parameters:    Size  Location     Type
  5260 ;;  channel         1    wreg     unsigned char 
  5261 ;;  divider         4   15[BANK0 ] unsigned long 
  5262 ;; Auto vars:     Size  Location     Type
  5263 ;;  channel         1   23[BANK0 ] unsigned char 
  5264 ;;  adcSum          4   25[BANK0 ] unsigned long 
  5265 ;;  adcLoop         1   24[BANK0 ] unsigned char 
  5266 ;; Return value:  Size  Location     Type
  5267 ;;                  4   15[BANK0 ] unsigned long 
  5268 ;; Registers used:
  5269 ;;		wreg, status,2, status,0, pclath, cstack
  5270 ;; Tracked objects:
  5271 ;;		On entry : 0/0
  5272 ;;		On exit  : 0/0
  5273 ;;		Unchanged: 0/0
  5274 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5275 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5276 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5277 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5278 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5279 ;;Total ram usage:       14 bytes
  5280 ;; Hardware stack levels used:    1
  5281 ;; Hardware stack levels required when called:    8
  5282 ;; This function calls:
  5283 ;;		___lldiv
  5284 ;;		___lmul
  5285 ;; This function is called by:
  5286 ;;		_loop
  5287 ;; This function uses a non-reentrant model
  5288 ;;
  5289                           
  5290                           
  5291                           ;psect for function _getADCValue
  5292  0346                     _getADCValue:	
  5293                           
  5294                           ;incstack = 0
  5295                           ; Regs used in _getADCValue: [wreg+status,2+status,0+pclath+cstack]
  5296                           ;getADCValue@channel stored from wreg
  5297  0346  0020               	movlb	0	; select bank0
  5298  0347  00B7               	movwf	getADCValue@channel
  5299                           
  5300                           ;main.c: 24: unsigned long adcSum = 0;
  5301  0348  3000               	movlw	0
  5302  0349  00BC               	movwf	getADCValue@adcSum+3
  5303  034A  3000               	movlw	0
  5304  034B  00BB               	movwf	getADCValue@adcSum+2
  5305  034C  3000               	movlw	0
  5306  034D  00BA               	movwf	getADCValue@adcSum+1
  5307  034E  3000               	movlw	0
  5308  034F  00B9               	movwf	getADCValue@adcSum
  5309                           
  5310                           ;main.c: 25: unsigned char adcLoop = 255;
  5311  0350  30FF               	movlw	255
  5312  0351  00B3               	movwf	??_getADCValue
  5313  0352  0833               	movf	??_getADCValue,w
  5314  0353  00B8               	movwf	getADCValue@adcLoop
  5315                           
  5316                           ;main.c: 27: ADCON0bits.CHS = channel;
  5317  0354  0837               	movf	getADCValue@channel,w
  5318  0355  00B3               	movwf	??_getADCValue
  5319  0356  0DB3               	rlf	??_getADCValue,f
  5320  0357  0DB3               	rlf	??_getADCValue,f
  5321  0358  0021               	movlb	1	; select bank1
  5322  0359  081D               	movf	29,w	;volatile
  5323  035A  0020               	movlb	0	; select bank0
  5324  035B  0633               	xorwf	??_getADCValue,w
  5325  035C  3903               	andlw	-253
  5326  035D  0633               	xorwf	??_getADCValue,w
  5327  035E  0021               	movlb	1	; select bank1
  5328  035F  009D               	movwf	29	;volatile
  5329                           
  5330                           ;main.c: 28: _delay((unsigned long)((200)*(16000000/4000000.0)));
  5331  0360  30A0               	movlw	160
  5332  0361                     u1597:	
  5333  0361  3200               	nop2
  5334  0362  0B89               	decfsz	9,f
  5335  0363  2B61               	goto	u1597
  5336  0364                     l2225:	
  5337                           ;main.c: 30: while (--adcLoop){
  5338                           
  5339  0364  3001               	movlw	1
  5340  0365  0020               	movlb	0	; select bank0
  5341  0366  02B8               	subwf	getADCValue@adcLoop,f
  5342  0367  1903               	btfsc	3,2
  5343  0368  2B8E               	goto	l2227
  5344                           
  5345                           ;main.c: 32: ADCON0bits.ADGO = 1;
  5346  0369  0021               	movlb	1	; select bank1
  5347  036A  149D               	bsf	29,1	;volatile
  5348  036B                     l208:	
  5349                           ;main.c: 34: while (ADCON0bits.ADGO){
  5350                           
  5351  036B  0021               	movlb	1	; select bank1
  5352  036C  1C9D               	btfss	29,1	;volatile
  5353  036D  2B70               	goto	l2223
  5354                           
  5355                           ;main.c: 35: __nop();
  5356  036E  0000               	nop
  5357  036F  2B6B               	goto	l208
  5358  0370                     l2223:	
  5359                           
  5360                           ;main.c: 36: };main.c: 38: adcSum+= ADRESL;
  5361  0370  081B               	movf	27,w	;volatile
  5362  0371  0020               	movlb	0	; select bank0
  5363  0372  00B3               	movwf	??_getADCValue
  5364  0373  01B4               	clrf	??_getADCValue+1
  5365  0374  01B5               	clrf	??_getADCValue+2
  5366  0375  01B6               	clrf	??_getADCValue+3
  5367  0376  0833               	movf	??_getADCValue,w
  5368  0377  07B9               	addwf	getADCValue@adcSum,f
  5369  0378  0834               	movf	??_getADCValue+1,w
  5370  0379  3DBA               	addwfc	getADCValue@adcSum+1,f
  5371  037A  0835               	movf	??_getADCValue+2,w
  5372  037B  3DBB               	addwfc	getADCValue@adcSum+2,f
  5373  037C  0836               	movf	??_getADCValue+3,w
  5374  037D  3DBC               	addwfc	getADCValue@adcSum+3,f
  5375                           
  5376                           ;main.c: 39: adcSum+= (unsigned) (ADRESH << 8);
  5377  037E  0021               	movlb	1	; select bank1
  5378  037F  081C               	movf	28,w	;volatile
  5379  0380  0020               	movlb	0	; select bank0
  5380  0381  00B3               	movwf	??_getADCValue
  5381  0382  01B4               	clrf	??_getADCValue+1
  5382  0383  0833               	movf	??_getADCValue,w
  5383  0384  00B4               	movwf	??_getADCValue+1
  5384  0385  01B3               	clrf	??_getADCValue
  5385  0386  0833               	movf	??_getADCValue,w
  5386  0387  07B9               	addwf	getADCValue@adcSum,f
  5387  0388  0834               	movf	??_getADCValue+1,w
  5388  0389  3DBA               	addwfc	getADCValue@adcSum+1,f
  5389  038A  3000               	movlw	0
  5390  038B  3DBB               	addwfc	getADCValue@adcSum+2,f
  5391  038C  3DBC               	addwfc	getADCValue@adcSum+3,f
  5392  038D  2B64               	goto	l2225
  5393  038E                     l2227:	
  5394                           
  5395                           ;main.c: 40: };main.c: 43: adcSum*= 100;
  5396  038E  3000               	movlw	0
  5397  038F  00A4               	movwf	___lmul@multiplier+3
  5398  0390  3000               	movlw	0
  5399  0391  00A3               	movwf	___lmul@multiplier+2
  5400  0392  3000               	movlw	0
  5401  0393  00A2               	movwf	___lmul@multiplier+1
  5402  0394  3064               	movlw	100
  5403  0395  00A1               	movwf	___lmul@multiplier
  5404  0396  083C               	movf	getADCValue@adcSum+3,w
  5405  0397  00A8               	movwf	___lmul@multiplicand+3
  5406  0398  083B               	movf	getADCValue@adcSum+2,w
  5407  0399  00A7               	movwf	___lmul@multiplicand+2
  5408  039A  083A               	movf	getADCValue@adcSum+1,w
  5409  039B  00A6               	movwf	___lmul@multiplicand+1
  5410  039C  0839               	movf	getADCValue@adcSum,w
  5411  039D  00A5               	movwf	___lmul@multiplicand
  5412  039E  3186  261B  3183   	fcall	___lmul
  5413  03A1  0020               	movlb	0	; select bank0
  5414  03A2  0824               	movf	?___lmul+3,w
  5415  03A3  00BC               	movwf	getADCValue@adcSum+3
  5416  03A4  0823               	movf	?___lmul+2,w
  5417  03A5  00BB               	movwf	getADCValue@adcSum+2
  5418  03A6  0822               	movf	?___lmul+1,w
  5419  03A7  00BA               	movwf	getADCValue@adcSum+1
  5420  03A8  0821               	movf	?___lmul,w
  5421  03A9  00B9               	movwf	getADCValue@adcSum
  5422                           
  5423                           ;main.c: 44: adcSum/= divider;
  5424  03AA  0832               	movf	getADCValue@divider+3,w
  5425  03AB  00A4               	movwf	___lldiv@divisor+3
  5426  03AC  0831               	movf	getADCValue@divider+2,w
  5427  03AD  00A3               	movwf	___lldiv@divisor+2
  5428  03AE  0830               	movf	getADCValue@divider+1,w
  5429  03AF  00A2               	movwf	___lldiv@divisor+1
  5430  03B0  082F               	movf	getADCValue@divider,w
  5431  03B1  00A1               	movwf	___lldiv@divisor
  5432  03B2  083C               	movf	getADCValue@adcSum+3,w
  5433  03B3  00A8               	movwf	___lldiv@dividend+3
  5434  03B4  083B               	movf	getADCValue@adcSum+2,w
  5435  03B5  00A7               	movwf	___lldiv@dividend+2
  5436  03B6  083A               	movf	getADCValue@adcSum+1,w
  5437  03B7  00A6               	movwf	___lldiv@dividend+1
  5438  03B8  0839               	movf	getADCValue@adcSum,w
  5439  03B9  00A5               	movwf	___lldiv@dividend
  5440  03BA  3184  2422         	fcall	___lldiv
  5441  03BC  0020               	movlb	0	; select bank0
  5442  03BD  0824               	movf	?___lldiv+3,w
  5443  03BE  00BC               	movwf	getADCValue@adcSum+3
  5444  03BF  0823               	movf	?___lldiv+2,w
  5445  03C0  00BB               	movwf	getADCValue@adcSum+2
  5446  03C1  0822               	movf	?___lldiv+1,w
  5447  03C2  00BA               	movwf	getADCValue@adcSum+1
  5448  03C3  0821               	movf	?___lldiv,w
  5449  03C4  00B9               	movwf	getADCValue@adcSum
  5450                           
  5451                           ;main.c: 46: return adcSum;
  5452  03C5  083C               	movf	getADCValue@adcSum+3,w
  5453  03C6  00B2               	movwf	?_getADCValue+3
  5454  03C7  083B               	movf	getADCValue@adcSum+2,w
  5455  03C8  00B1               	movwf	?_getADCValue+2
  5456  03C9  083A               	movf	getADCValue@adcSum+1,w
  5457  03CA  00B0               	movwf	?_getADCValue+1
  5458  03CB  0839               	movf	getADCValue@adcSum,w
  5459  03CC  00AF               	movwf	?_getADCValue
  5460  03CD  0008               	return
  5461  03CE                     __end_of_getADCValue:	
  5462                           
  5463                           	psect	text17
  5464  061B                     __ptext17:	
  5465 ;; *************** function ___lmul *****************
  5466 ;; Defined at:
  5467 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\Umul32.c"
  5468 ;; Parameters:    Size  Location     Type
  5469 ;;  multiplier      4    1[BANK0 ] unsigned long 
  5470 ;;  multiplicand    4    5[BANK0 ] unsigned long 
  5471 ;; Auto vars:     Size  Location     Type
  5472 ;;  product         4    9[BANK0 ] unsigned long 
  5473 ;; Return value:  Size  Location     Type
  5474 ;;                  4    1[BANK0 ] unsigned long 
  5475 ;; Registers used:
  5476 ;;		wreg, status,2, status,0
  5477 ;; Tracked objects:
  5478 ;;		On entry : 0/0
  5479 ;;		On exit  : 0/0
  5480 ;;		Unchanged: 0/0
  5481 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5482 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5483 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5484 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5485 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5486 ;;Total ram usage:       12 bytes
  5487 ;; Hardware stack levels used:    1
  5488 ;; Hardware stack levels required when called:    7
  5489 ;; This function calls:
  5490 ;;		Nothing
  5491 ;; This function is called by:
  5492 ;;		_getADCValue
  5493 ;; This function uses a non-reentrant model
  5494 ;;
  5495                           
  5496                           
  5497                           ;psect for function ___lmul
  5498  061B                     ___lmul:	
  5499                           
  5500                           ;incstack = 0
  5501                           ; Regs used in ___lmul: [wreg+status,2+status,0]
  5502  061B  3000               	movlw	0
  5503  061C  0020               	movlb	0	; select bank0
  5504  061D  00AC               	movwf	___lmul@product+3
  5505  061E  3000               	movlw	0
  5506  061F  00AB               	movwf	___lmul@product+2
  5507  0620  3000               	movlw	0
  5508  0621  00AA               	movwf	___lmul@product+1
  5509  0622  3000               	movlw	0
  5510  0623  00A9               	movwf	___lmul@product
  5511  0624                     l2063:	
  5512  0624  1C21               	btfss	___lmul@multiplier,0
  5513  0625  2E2E               	goto	l2067
  5514  0626  0825               	movf	___lmul@multiplicand,w
  5515  0627  07A9               	addwf	___lmul@product,f
  5516  0628  0826               	movf	___lmul@multiplicand+1,w
  5517  0629  3DAA               	addwfc	___lmul@product+1,f
  5518  062A  0827               	movf	___lmul@multiplicand+2,w
  5519  062B  3DAB               	addwfc	___lmul@product+2,f
  5520  062C  0828               	movf	___lmul@multiplicand+3,w
  5521  062D  3DAC               	addwfc	___lmul@product+3,f
  5522  062E                     l2067:	
  5523  062E  3001               	movlw	1
  5524  062F                     u995:	
  5525  062F  35A5               	lslf	___lmul@multiplicand,f
  5526  0630  0DA6               	rlf	___lmul@multiplicand+1,f
  5527  0631  0DA7               	rlf	___lmul@multiplicand+2,f
  5528  0632  0DA8               	rlf	___lmul@multiplicand+3,f
  5529  0633  0B89               	decfsz	9,f
  5530  0634  2E2F               	goto	u995
  5531  0635  3001               	movlw	1
  5532  0636                     u1005:	
  5533  0636  36A4               	lsrf	___lmul@multiplier+3,f
  5534  0637  0CA3               	rrf	___lmul@multiplier+2,f
  5535  0638  0CA2               	rrf	___lmul@multiplier+1,f
  5536  0639  0CA1               	rrf	___lmul@multiplier,f
  5537  063A  0B89               	decfsz	9,f
  5538  063B  2E36               	goto	u1005
  5539  063C  0824               	movf	___lmul@multiplier+3,w
  5540  063D  0423               	iorwf	___lmul@multiplier+2,w
  5541  063E  0422               	iorwf	___lmul@multiplier+1,w
  5542  063F  0421               	iorwf	___lmul@multiplier,w
  5543  0640  1D03               	skipz
  5544  0641  2E24               	goto	l2063
  5545  0642  082C               	movf	___lmul@product+3,w
  5546  0643  00A4               	movwf	?___lmul+3
  5547  0644  082B               	movf	___lmul@product+2,w
  5548  0645  00A3               	movwf	?___lmul+2
  5549  0646  082A               	movf	___lmul@product+1,w
  5550  0647  00A2               	movwf	?___lmul+1
  5551  0648  0829               	movf	___lmul@product,w
  5552  0649  00A1               	movwf	?___lmul
  5553  064A  0008               	return
  5554  064B                     __end_of___lmul:	
  5555                           
  5556                           	psect	text18
  5557  0422                     __ptext18:	
  5558 ;; *************** function ___lldiv *****************
  5559 ;; Defined at:
  5560 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\__lldiv.c"
  5561 ;; Parameters:    Size  Location     Type
  5562 ;;  divisor         4    1[BANK0 ] unsigned long 
  5563 ;;  dividend        4    5[BANK0 ] unsigned long 
  5564 ;; Auto vars:     Size  Location     Type
  5565 ;;  quotient        4   10[BANK0 ] unsigned long 
  5566 ;;  counter         1   14[BANK0 ] unsigned char 
  5567 ;; Return value:  Size  Location     Type
  5568 ;;                  4    1[BANK0 ] unsigned long 
  5569 ;; Registers used:
  5570 ;;		wreg, status,2, status,0
  5571 ;; Tracked objects:
  5572 ;;		On entry : 0/0
  5573 ;;		On exit  : 0/0
  5574 ;;		Unchanged: 0/0
  5575 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5576 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5577 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5578 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5579 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5580 ;;Total ram usage:       14 bytes
  5581 ;; Hardware stack levels used:    1
  5582 ;; Hardware stack levels required when called:    7
  5583 ;; This function calls:
  5584 ;;		Nothing
  5585 ;; This function is called by:
  5586 ;;		_getADCValue
  5587 ;;		_ultoa
  5588 ;; This function uses a non-reentrant model
  5589 ;;
  5590                           
  5591                           
  5592                           ;psect for function ___lldiv
  5593  0422                     ___lldiv:	
  5594                           
  5595                           ;incstack = 0
  5596                           ; Regs used in ___lldiv: [wreg+status,2+status,0]
  5597  0422  3000               	movlw	0
  5598  0423  0020               	movlb	0	; select bank0
  5599  0424  00AD               	movwf	___lldiv@quotient+3
  5600  0425  3000               	movlw	0
  5601  0426  00AC               	movwf	___lldiv@quotient+2
  5602  0427  3000               	movlw	0
  5603  0428  00AB               	movwf	___lldiv@quotient+1
  5604  0429  3000               	movlw	0
  5605  042A  00AA               	movwf	___lldiv@quotient
  5606  042B  0824               	movf	___lldiv@divisor+3,w
  5607  042C  0423               	iorwf	___lldiv@divisor+2,w
  5608  042D  0422               	iorwf	___lldiv@divisor+1,w
  5609  042E  0421               	iorwf	___lldiv@divisor,w
  5610  042F  1903               	skipnz
  5611  0430  2C6C               	goto	l1861
  5612  0431  01AE               	clrf	___lldiv@counter
  5613  0432  0AAE               	incf	___lldiv@counter,f
  5614  0433                     l1847:	
  5615  0433  1BA4               	btfsc	___lldiv@divisor+3,7
  5616  0434  2C41               	goto	l1849
  5617  0435  3001               	movlw	1
  5618  0436                     u715:	
  5619  0436  35A1               	lslf	___lldiv@divisor,f
  5620  0437  0DA2               	rlf	___lldiv@divisor+1,f
  5621  0438  0DA3               	rlf	___lldiv@divisor+2,f
  5622  0439  0DA4               	rlf	___lldiv@divisor+3,f
  5623  043A  0B89               	decfsz	9,f
  5624  043B  2C36               	goto	u715
  5625  043C  3001               	movlw	1
  5626  043D  00A9               	movwf	??___lldiv
  5627  043E  0829               	movf	??___lldiv,w
  5628  043F  07AE               	addwf	___lldiv@counter,f
  5629  0440  2C33               	goto	l1847
  5630  0441                     l1849:	
  5631  0441  3001               	movlw	1
  5632  0442                     u735:	
  5633  0442  35AA               	lslf	___lldiv@quotient,f
  5634  0443  0DAB               	rlf	___lldiv@quotient+1,f
  5635  0444  0DAC               	rlf	___lldiv@quotient+2,f
  5636  0445  0DAD               	rlf	___lldiv@quotient+3,f
  5637  0446  0B89               	decfsz	9,f
  5638  0447  2C42               	goto	u735
  5639  0448  0824               	movf	___lldiv@divisor+3,w
  5640  0449  0228               	subwf	___lldiv@dividend+3,w
  5641  044A  1D03               	skipz
  5642  044B  2C56               	goto	u745
  5643  044C  0823               	movf	___lldiv@divisor+2,w
  5644  044D  0227               	subwf	___lldiv@dividend+2,w
  5645  044E  1D03               	skipz
  5646  044F  2C56               	goto	u745
  5647  0450  0822               	movf	___lldiv@divisor+1,w
  5648  0451  0226               	subwf	___lldiv@dividend+1,w
  5649  0452  1D03               	skipz
  5650  0453  2C56               	goto	u745
  5651  0454  0821               	movf	___lldiv@divisor,w
  5652  0455  0225               	subwf	___lldiv@dividend,w
  5653  0456                     u745:	
  5654  0456  1C03               	skipc
  5655  0457  2C61               	goto	l1857
  5656  0458  0821               	movf	___lldiv@divisor,w
  5657  0459  02A5               	subwf	___lldiv@dividend,f
  5658  045A  0822               	movf	___lldiv@divisor+1,w
  5659  045B  3BA6               	subwfb	___lldiv@dividend+1,f
  5660  045C  0823               	movf	___lldiv@divisor+2,w
  5661  045D  3BA7               	subwfb	___lldiv@dividend+2,f
  5662  045E  0824               	movf	___lldiv@divisor+3,w
  5663  045F  3BA8               	subwfb	___lldiv@dividend+3,f
  5664  0460  142A               	bsf	___lldiv@quotient,0
  5665  0461                     l1857:	
  5666  0461  3001               	movlw	1
  5667  0462                     u755:	
  5668  0462  36A4               	lsrf	___lldiv@divisor+3,f
  5669  0463  0CA3               	rrf	___lldiv@divisor+2,f
  5670  0464  0CA2               	rrf	___lldiv@divisor+1,f
  5671  0465  0CA1               	rrf	___lldiv@divisor,f
  5672  0466  0B89               	decfsz	9,f
  5673  0467  2C62               	goto	u755
  5674  0468  3001               	movlw	1
  5675  0469  02AE               	subwf	___lldiv@counter,f
  5676  046A  1D03               	btfss	3,2
  5677  046B  2C41               	goto	l1849
  5678  046C                     l1861:	
  5679  046C  082D               	movf	___lldiv@quotient+3,w
  5680  046D  00A4               	movwf	?___lldiv+3
  5681  046E  082C               	movf	___lldiv@quotient+2,w
  5682  046F  00A3               	movwf	?___lldiv+2
  5683  0470  082B               	movf	___lldiv@quotient+1,w
  5684  0471  00A2               	movwf	?___lldiv+1
  5685  0472  082A               	movf	___lldiv@quotient,w
  5686  0473  00A1               	movwf	?___lldiv
  5687  0474  0008               	return
  5688  0475                     __end_of___lldiv:	
  5689                           
  5690                           	psect	text19
  5691  0716                     __ptext19:	
  5692 ;; *************** function _flashUpdate *****************
  5693 ;; Defined at:
  5694 ;;		line 97 in file "flash.c"
  5695 ;; Parameters:    Size  Location     Type
  5696 ;;		None
  5697 ;; Auto vars:     Size  Location     Type
  5698 ;;  i               2    9[BANK0 ] unsigned int 
  5699 ;; Return value:  Size  Location     Type
  5700 ;;                  1    wreg      void 
  5701 ;; Registers used:
  5702 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5703 ;; Tracked objects:
  5704 ;;		On entry : 0/0
  5705 ;;		On exit  : 0/0
  5706 ;;		Unchanged: 0/0
  5707 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5708 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5709 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5710 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5711 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5712 ;;Total ram usage:        4 bytes
  5713 ;; Hardware stack levels used:    1
  5714 ;; Hardware stack levels required when called:    8
  5715 ;; This function calls:
  5716 ;;		_flashWriteByte
  5717 ;; This function is called by:
  5718 ;;		_main
  5719 ;; This function uses a non-reentrant model
  5720 ;;
  5721                           
  5722                           
  5723                           ;psect for function _flashUpdate
  5724  0716                     _flashUpdate:	
  5725                           
  5726                           ;flash.c: 98: for (unsigned int i = 0; i < 32; i++){
  5727                           
  5728                           ;incstack = 0
  5729                           ; Regs used in _flashUpdate: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5730  0716  0020               	movlb	0	; select bank0
  5731  0717  01A9               	clrf	flashUpdate@i
  5732  0718  01AA               	clrf	flashUpdate@i+1
  5733  0719                     L1:	
  5734  0719  3000               	movlw	0
  5735  071A  022A               	subwf	flashUpdate@i+1,w
  5736  071B  3020               	movlw	32
  5737  071C  1903               	skipnz
  5738  071D  0229               	subwf	flashUpdate@i,w
  5739  071E  1803               	btfsc	3,0
  5740  071F  0008               	return
  5741                           
  5742                           ;flash.c: 99: flashWriteByte(i, romHolder.array[i]);
  5743  0720  082A               	movf	flashUpdate@i+1,w
  5744  0721  00A2               	movwf	flashWriteByte@offset+1
  5745  0722  0829               	movf	flashUpdate@i,w
  5746  0723  00A1               	movwf	flashWriteByte@offset
  5747  0724  0829               	movf	flashUpdate@i,w
  5748  0725  3E20               	addlw	(low (_romHolder| (0+256)))& (0+255)
  5749  0726  0086               	movwf	6
  5750  0727  3001               	movlw	1	; select bank2/3
  5751  0728  0087               	movwf	7
  5752  0729  0801               	movf	1,w
  5753  072A  00A7               	movwf	??_flashUpdate
  5754  072B  01A8               	clrf	??_flashUpdate+1
  5755  072C  0827               	movf	??_flashUpdate,w
  5756  072D  00A3               	movwf	flashWriteByte@data
  5757  072E  0828               	movf	??_flashUpdate+1,w
  5758  072F  00A4               	movwf	flashWriteByte@data+1
  5759  0730  3185  2505  3187   	fcall	_flashWriteByte
  5760  0733  3001               	movlw	1
  5761  0734  0020               	movlb	0	; select bank0
  5762  0735  07A9               	addwf	flashUpdate@i,f
  5763  0736  3000               	movlw	0
  5764  0737  3DAA               	addwfc	flashUpdate@i+1,f
  5765  0738  2F19               	goto	L1
  5766  0739                     __end_of_flashUpdate:	
  5767                           
  5768                           	psect	text20
  5769  0505                     __ptext20:	
  5770 ;; *************** function _flashWriteByte *****************
  5771 ;; Defined at:
  5772 ;;		line 8 in file "flash.c"
  5773 ;; Parameters:    Size  Location     Type
  5774 ;;  offset          2    1[BANK0 ] unsigned int 
  5775 ;;  data            2    3[BANK0 ] unsigned int 
  5776 ;; Auto vars:     Size  Location     Type
  5777 ;;  address         2    5[BANK0 ] unsigned int 
  5778 ;; Return value:  Size  Location     Type
  5779 ;;                  1    wreg      void 
  5780 ;; Registers used:
  5781 ;;		wreg, status,2, status,0
  5782 ;; Tracked objects:
  5783 ;;		On entry : 0/0
  5784 ;;		On exit  : 0/0
  5785 ;;		Unchanged: 0/0
  5786 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5787 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5788 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5789 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5790 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5791 ;;Total ram usage:        6 bytes
  5792 ;; Hardware stack levels used:    1
  5793 ;; Hardware stack levels required when called:    7
  5794 ;; This function calls:
  5795 ;;		Nothing
  5796 ;; This function is called by:
  5797 ;;		_flashUpdate
  5798 ;; This function uses a non-reentrant model
  5799 ;;
  5800                           
  5801                           
  5802                           ;psect for function _flashWriteByte
  5803  0505                     _flashWriteByte:	
  5804                           
  5805                           ;flash.c: 10: unsigned int address;;flash.c: 12: INTCONbits.GIE = 0;
  5806                           
  5807                           ;incstack = 0
  5808                           ; Regs used in _flashWriteByte: [wreg+status,2+status,0]
  5809  0505  138B               	bcf	11,7	;volatile
  5810                           
  5811                           ;flash.c: 15: PMCON1 = 0x00;
  5812  0506  0031               	movlb	17	; select bank17
  5813  0507  0195               	clrf	21	;volsfr
  5814                           
  5815                           ;flash.c: 17: address = (0x2000U - 32) + offset;
  5816  0508  0020               	movlb	0	; select bank0
  5817  0509  0821               	movf	flashWriteByte@offset,w
  5818  050A  3EE0               	addlw	224
  5819  050B  00A5               	movwf	flashWriteByte@address
  5820  050C  301F               	movlw	31
  5821  050D  3D22               	addwfc	flashWriteByte@offset+1,w
  5822  050E  00A6               	movwf	flashWriteByte@address+1
  5823                           
  5824                           ;flash.c: 18: PMADRL = (char) (address >> 0);
  5825  050F  0825               	movf	flashWriteByte@address,w
  5826  0510  0031               	movlb	17	; select bank17
  5827  0511  0091               	movwf	17	;volatile
  5828                           
  5829                           ;flash.c: 19: PMADRH = (char) (address >> 8);
  5830  0512  0020               	movlb	0	; select bank0
  5831  0513  0826               	movf	flashWriteByte@address+1,w
  5832  0514  0031               	movlb	17	; select bank17
  5833  0515  0092               	movwf	18	;volatile
  5834                           
  5835                           ;flash.c: 21: PMCON1bits.FREE = 1;
  5836  0516  1615               	bsf	21,4	;volsfr
  5837                           
  5838                           ;flash.c: 22: PMCON1bits.WREN = 1;
  5839  0517  1515               	bsf	21,2	;volsfr
  5840                           
  5841                           ;flash.c: 24: PMCON2 = 0x55;
  5842  0518  3055               	movlw	85
  5843  0519  0096               	movwf	22	;volsfr
  5844                           
  5845                           ;flash.c: 25: PMCON2 = 0xAA;
  5846  051A  30AA               	movlw	170
  5847  051B  0096               	movwf	22	;volsfr
  5848                           
  5849                           ;flash.c: 27: PMCON1bits.WR = 1;
  5850  051C  1495               	bsf	21,1	;volsfr
  5851                           
  5852                           ;flash.c: 29: __nop();
  5853  051D  0000               	nop
  5854                           
  5855                           ;flash.c: 30: __nop();
  5856  051E  0000               	nop
  5857                           
  5858                           ;flash.c: 32: PMCON1bits.WREN = 0;
  5859  051F  0031               	movlb	17	; select bank17
  5860  0520  1115               	bcf	21,2	;volsfr
  5861                           
  5862                           ;flash.c: 36: PMCON1 = 0x00;
  5863  0521  0195               	clrf	21	;volsfr
  5864                           
  5865                           ;flash.c: 38: PMADRL = (char) (address >> 0);
  5866  0522  0020               	movlb	0	; select bank0
  5867  0523  0825               	movf	flashWriteByte@address,w
  5868  0524  0031               	movlb	17	; select bank17
  5869  0525  0091               	movwf	17	;volatile
  5870                           
  5871                           ;flash.c: 39: PMADRH = (char) (address >> 8);
  5872  0526  0020               	movlb	0	; select bank0
  5873  0527  0826               	movf	flashWriteByte@address+1,w
  5874  0528  0031               	movlb	17	; select bank17
  5875  0529  0092               	movwf	18	;volatile
  5876                           
  5877                           ;flash.c: 41: PMCON1bits.FREE = 0;
  5878  052A  1215               	bcf	21,4	;volsfr
  5879                           
  5880                           ;flash.c: 42: PMCON1bits.LWLO = 1;
  5881  052B  1695               	bsf	21,5	;volsfr
  5882                           
  5883                           ;flash.c: 43: PMCON1bits.WREN = 1;
  5884  052C  1515               	bsf	21,2	;volsfr
  5885                           
  5886                           ;flash.c: 45: PMDATL = (data >> 0);
  5887  052D  0020               	movlb	0	; select bank0
  5888  052E  0823               	movf	flashWriteByte@data,w
  5889  052F  0031               	movlb	17	; select bank17
  5890  0530  0093               	movwf	19	;volatile
  5891                           
  5892                           ;flash.c: 46: PMDATH = (data >> 8);
  5893  0531  0020               	movlb	0	; select bank0
  5894  0532  0824               	movf	flashWriteByte@data+1,w
  5895  0533  0031               	movlb	17	; select bank17
  5896  0534  0094               	movwf	20	;volatile
  5897                           
  5898                           ;flash.c: 48: PMCON1bits.LWLO = 0;
  5899  0535  1295               	bcf	21,5	;volsfr
  5900                           
  5901                           ;flash.c: 50: PMCON2 = 0x55;
  5902  0536  3055               	movlw	85
  5903  0537  0096               	movwf	22	;volsfr
  5904                           
  5905                           ;flash.c: 51: PMCON2 = 0xAA;
  5906  0538  30AA               	movlw	170
  5907  0539  0096               	movwf	22	;volsfr
  5908                           
  5909                           ;flash.c: 53: PMCON1bits.WR = 1;
  5910  053A  1495               	bsf	21,1	;volsfr
  5911                           
  5912                           ;flash.c: 55: __nop();
  5913  053B  0000               	nop
  5914                           
  5915                           ;flash.c: 56: __nop();
  5916  053C  0000               	nop
  5917                           
  5918                           ;flash.c: 58: PMCON1bits.WREN = 0;
  5919  053D  0031               	movlb	17	; select bank17
  5920  053E  1115               	bcf	21,2	;volsfr
  5921                           
  5922                           ;flash.c: 61: INTCONbits.GIE = 1;
  5923  053F  178B               	bsf	11,7	;volatile
  5924  0540  0008               	return
  5925  0541                     __end_of_flashWriteByte:	
  5926                           
  5927                           	psect	text21
  5928  077A                     __ptext21:	
  5929 ;; *************** function _flashRealod *****************
  5930 ;; Defined at:
  5931 ;;		line 90 in file "flash.c"
  5932 ;; Parameters:    Size  Location     Type
  5933 ;;		None
  5934 ;; Auto vars:     Size  Location     Type
  5935 ;;  i               2   11[BANK0 ] unsigned int 
  5936 ;; Return value:  Size  Location     Type
  5937 ;;                  1    wreg      void 
  5938 ;; Registers used:
  5939 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5940 ;; Tracked objects:
  5941 ;;		On entry : 0/0
  5942 ;;		On exit  : 0/0
  5943 ;;		Unchanged: 0/0
  5944 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5945 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5946 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5947 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5948 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5949 ;;Total ram usage:        3 bytes
  5950 ;; Hardware stack levels used:    1
  5951 ;; Hardware stack levels required when called:    8
  5952 ;; This function calls:
  5953 ;;		_flashReadByte
  5954 ;; This function is called by:
  5955 ;;		_main
  5956 ;; This function uses a non-reentrant model
  5957 ;;
  5958                           
  5959                           
  5960                           ;psect for function _flashRealod
  5961  077A                     _flashRealod:	
  5962                           
  5963                           ;flash.c: 92: for (unsigned int i = 0; i < 32; i++){
  5964                           
  5965                           ;incstack = 0
  5966                           ; Regs used in _flashRealod: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5967  077A  0020               	movlb	0	; select bank0
  5968  077B  01AB               	clrf	flashRealod@i
  5969  077C  01AC               	clrf	flashRealod@i+1
  5970  077D                     L2:	
  5971  077D  3000               	movlw	0
  5972  077E  022C               	subwf	flashRealod@i+1,w
  5973  077F  3020               	movlw	32
  5974  0780  1903               	skipnz
  5975  0781  022B               	subwf	flashRealod@i,w
  5976  0782  1803               	btfsc	3,0
  5977  0783  0008               	return
  5978                           
  5979                           ;flash.c: 93: romHolder.array[i] = flashReadByte(i);
  5980  0784  082C               	movf	flashRealod@i+1,w
  5981  0785  00A2               	movwf	flashReadByte@offset+1
  5982  0786  082B               	movf	flashRealod@i,w
  5983  0787  00A1               	movwf	flashReadByte@offset
  5984  0788  3185  25E9  3187   	fcall	_flashReadByte
  5985  078B  0020               	movlb	0	; select bank0
  5986  078C  0821               	movf	?_flashReadByte,w
  5987  078D  00AA               	movwf	??_flashRealod
  5988  078E  082B               	movf	flashRealod@i,w
  5989  078F  3E20               	addlw	(low (_romHolder| (0+256)))& (0+255)
  5990  0790  0086               	movwf	6
  5991  0791  3001               	movlw	1	; select bank2/3
  5992  0792  0087               	movwf	7
  5993  0793  082A               	movf	??_flashRealod,w
  5994  0794  0081               	movwf	1
  5995  0795  3001               	movlw	1
  5996  0796  07AB               	addwf	flashRealod@i,f
  5997  0797  3000               	movlw	0
  5998  0798  3DAC               	addwfc	flashRealod@i+1,f
  5999  0799  2F7D               	goto	L2
  6000  079A                     __end_of_flashRealod:	
  6001                           
  6002                           	psect	text22
  6003  05E9                     __ptext22:	
  6004 ;; *************** function _flashReadByte *****************
  6005 ;; Defined at:
  6006 ;;		line 64 in file "flash.c"
  6007 ;; Parameters:    Size  Location     Type
  6008 ;;  offset          2    1[BANK0 ] unsigned int 
  6009 ;; Auto vars:     Size  Location     Type
  6010 ;;  address         2    8[BANK0 ] unsigned int 
  6011 ;;  result          2    6[BANK0 ] unsigned int 
  6012 ;; Return value:  Size  Location     Type
  6013 ;;                  2    1[BANK0 ] unsigned int 
  6014 ;; Registers used:
  6015 ;;		wreg, status,2, status,0
  6016 ;; Tracked objects:
  6017 ;;		On entry : 0/0
  6018 ;;		On exit  : 0/0
  6019 ;;		Unchanged: 0/0
  6020 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6021 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6022 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6023 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6024 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6025 ;;Total ram usage:        9 bytes
  6026 ;; Hardware stack levels used:    1
  6027 ;; Hardware stack levels required when called:    7
  6028 ;; This function calls:
  6029 ;;		Nothing
  6030 ;; This function is called by:
  6031 ;;		_flashRealod
  6032 ;; This function uses a non-reentrant model
  6033 ;;
  6034                           
  6035                           
  6036                           ;psect for function _flashReadByte
  6037  05E9                     _flashReadByte:	
  6038                           
  6039                           ;flash.c: 66: unsigned int address;;flash.c: 68: INTCONbits.GIE = 0;
  6040                           
  6041                           ;incstack = 0
  6042                           ; Regs used in _flashReadByte: [wreg+status,2+status,0]
  6043  05E9  138B               	bcf	11,7	;volatile
  6044                           
  6045                           ;flash.c: 70: PMCON1 = 0x00;
  6046  05EA  0031               	movlb	17	; select bank17
  6047  05EB  0195               	clrf	21	;volsfr
  6048                           
  6049                           ;flash.c: 72: address = (0x2000U - 32) + offset;
  6050  05EC  0020               	movlb	0	; select bank0
  6051  05ED  0821               	movf	flashReadByte@offset,w
  6052  05EE  3EE0               	addlw	224
  6053  05EF  00A8               	movwf	flashReadByte@address
  6054  05F0  301F               	movlw	31
  6055  05F1  3D22               	addwfc	flashReadByte@offset+1,w
  6056  05F2  00A9               	movwf	flashReadByte@address+1
  6057                           
  6058                           ;flash.c: 73: PMADRL = (char) (address >> 0);
  6059  05F3  0828               	movf	flashReadByte@address,w
  6060  05F4  0031               	movlb	17	; select bank17
  6061  05F5  0091               	movwf	17	;volatile
  6062                           
  6063                           ;flash.c: 74: PMADRH = (char) (address >> 8);
  6064  05F6  0020               	movlb	0	; select bank0
  6065  05F7  0829               	movf	flashReadByte@address+1,w
  6066  05F8  0031               	movlb	17	; select bank17
  6067  05F9  0092               	movwf	18	;volatile
  6068                           
  6069                           ;flash.c: 76: PMCON1bits.RD = 1;
  6070  05FA  1415               	bsf	21,0	;volsfr
  6071                           
  6072                           ;flash.c: 78: __nop();
  6073  05FB  0000               	nop
  6074                           
  6075                           ;flash.c: 79: __nop();
  6076  05FC  0000               	nop
  6077                           
  6078                           ;flash.c: 81: unsigned int result = 0;
  6079  05FD  0020               	movlb	0	; select bank0
  6080  05FE  01A6               	clrf	flashReadByte@result
  6081  05FF  01A7               	clrf	flashReadByte@result+1
  6082                           
  6083                           ;flash.c: 82: result = PMDATL;
  6084  0600  0031               	movlb	17	; select bank17
  6085  0601  0813               	movf	19,w	;volatile
  6086  0602  0020               	movlb	0	; select bank0
  6087  0603  00A3               	movwf	??_flashReadByte
  6088  0604  01A4               	clrf	??_flashReadByte+1
  6089  0605  0823               	movf	??_flashReadByte,w
  6090  0606  00A6               	movwf	flashReadByte@result
  6091  0607  0824               	movf	??_flashReadByte+1,w
  6092  0608  00A7               	movwf	flashReadByte@result+1
  6093                           
  6094                           ;flash.c: 83: result|= ( (unsigned) (PMDATH) << 8);
  6095  0609  0031               	movlb	17	; select bank17
  6096  060A  0814               	movf	20,w	;volatile
  6097  060B  0020               	movlb	0	; select bank0
  6098  060C  00A3               	movwf	??_flashReadByte
  6099  060D  01A4               	clrf	??_flashReadByte+1
  6100  060E  0823               	movf	??_flashReadByte,w
  6101  060F  00A4               	movwf	??_flashReadByte+1
  6102  0610  01A3               	clrf	??_flashReadByte
  6103  0611  0823               	movf	??_flashReadByte,w
  6104  0612  04A6               	iorwf	flashReadByte@result,f
  6105  0613  0824               	movf	??_flashReadByte+1,w
  6106  0614  04A7               	iorwf	flashReadByte@result+1,f
  6107                           
  6108                           ;flash.c: 85: INTCONbits.GIE = 1;
  6109  0615  178B               	bsf	11,7	;volatile
  6110                           
  6111                           ;flash.c: 87: return result;
  6112  0616  0827               	movf	flashReadByte@result+1,w
  6113  0617  00A2               	movwf	?_flashReadByte+1
  6114  0618  0826               	movf	flashReadByte@result,w
  6115  0619  00A1               	movwf	?_flashReadByte
  6116  061A  0008               	return
  6117  061B                     __end_of_flashReadByte:	
  6118                           
  6119                           	psect	intentry
  6120  0004                     __pintentry:	
  6121 ;; *************** function _ISR *****************
  6122 ;; Defined at:
  6123 ;;		line 14 in file "main.c"
  6124 ;; Parameters:    Size  Location     Type
  6125 ;;		None
  6126 ;; Auto vars:     Size  Location     Type
  6127 ;;		None
  6128 ;; Return value:  Size  Location     Type
  6129 ;;                  1    wreg      void 
  6130 ;; Registers used:
  6131 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6132 ;; Tracked objects:
  6133 ;;		On entry : 0/0
  6134 ;;		On exit  : 0/0
  6135 ;;		Unchanged: 0/0
  6136 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6137 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6138 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6139 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6140 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6141 ;;Total ram usage:        0 bytes
  6142 ;; Hardware stack levels used:    1
  6143 ;; Hardware stack levels required when called:    6
  6144 ;; This function calls:
  6145 ;;		_nrf24l01ISR
  6146 ;; This function is called by:
  6147 ;;		Interrupt level 1
  6148 ;; This function uses a non-reentrant model
  6149 ;;
  6150                           
  6151  0004                     _ISR:	
  6152                           
  6153                           ;incstack = 0
  6154  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
  6155                           
  6156                           ; Regs used in _ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6157  0005  3180               	pagesel	$
  6158                           
  6159                           ;main.c: 16: if (PIR0bits.INTF){
  6160  0006  0020               	movlb	0	; select bank0
  6161  0007  1C10               	btfss	16,0	;volatile
  6162  0008  280D               	goto	i1l203
  6163                           
  6164                           ;main.c: 17: nrf24l01ISR();
  6165  0009  3185  25B3         	fcall	_nrf24l01ISR
  6166                           
  6167                           ;main.c: 18: PIR0bits.INTF = 0;
  6168  000B  0020               	movlb	0	; select bank0
  6169  000C  1010               	bcf	16,0	;volatile
  6170  000D                     i1l203:	
  6171  000D  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
  6172  000E  0009               	retfie
  6173  000F                     __end_of_ISR:	
  6174                           
  6175                           	psect	text24
  6176  05B3                     __ptext24:	
  6177 ;; *************** function _nrf24l01ISR *****************
  6178 ;; Defined at:
  6179 ;;		line 222 in file "nrf24l01.c"
  6180 ;; Parameters:    Size  Location     Type
  6181 ;;		None
  6182 ;; Auto vars:     Size  Location     Type
  6183 ;;  status          1    0[BANK0 ] struct .
  6184 ;; Return value:  Size  Location     Type
  6185 ;;                  1    wreg      void 
  6186 ;; Registers used:
  6187 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6188 ;; Tracked objects:
  6189 ;;		On entry : 0/0
  6190 ;;		On exit  : 0/0
  6191 ;;		Unchanged: 0/0
  6192 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6193 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6194 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6195 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6196 ;;      Totals:         1       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6197 ;;Total ram usage:        2 bytes
  6198 ;; Hardware stack levels used:    1
  6199 ;; Hardware stack levels required when called:    5
  6200 ;; This function calls:
  6201 ;;		_exception
  6202 ;;		_nrf24l01CheckACK
  6203 ;;		_nrf24l01ReceivePacket
  6204 ;;		i1_nrf24l01Send
  6205 ;;		i1_nrf24l01SetRXMode
  6206 ;; This function is called by:
  6207 ;;		_ISR
  6208 ;; This function uses a non-reentrant model
  6209 ;;
  6210                           
  6211                           
  6212                           ;psect for function _nrf24l01ISR
  6213  05B3                     _nrf24l01ISR:	
  6214                           
  6215                           ;nrf24l01.c: 224: n_STATUS_t status;;nrf24l01.c: 225: status.byte = nrf24l01Send(0b00000
      +                          000 | 0x07, 0);
  6216                           
  6217                           ;incstack = 0
  6218                           ; Regs used in _nrf24l01ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6219  05B3  01F1               	clrf	i1nrf24l01Send@data
  6220  05B4  3007               	movlw	7
  6221  05B5  318F  27E5  3185   	fcall	i1_nrf24l01Send
  6222  05B8  00FD               	movwf	??_nrf24l01ISR
  6223  05B9  087D               	movf	??_nrf24l01ISR,w
  6224  05BA  0020               	movlb	0	; select bank0
  6225  05BB  00A0               	movwf	nrf24l01ISR@status
  6226                           
  6227                           ;nrf24l01.c: 230: };nrf24l01.c: 233: if (status.byte == 0xFF){
  6228  05BC  0A20               	incf	nrf24l01ISR@status,w
  6229  05BD  1D03               	btfss	3,2
  6230  05BE  2DC3               	goto	i1l2751
  6231                           
  6232                           ;nrf24l01.c: 234: exception(2);
  6233  05BF  3002               	movlw	2
  6234  05C0  318F  2781  3185   	fcall	_exception
  6235  05C3                     i1l2751:	
  6236                           
  6237                           ;nrf24l01.c: 235: };nrf24l01.c: 237: if (status.TX_DS){
  6238  05C3  0020               	movlb	0	; select bank0
  6239  05C4  1EA0               	btfss	nrf24l01ISR@status,5
  6240  05C5  2DD2               	goto	i1l2759
  6241                           
  6242                           ;nrf24l01.c: 240: nrf24l01.TXBusy = 0;
  6243  05C6  105B               	bcf	_nrf24l01,0	;volatile
  6244                           
  6245                           ;nrf24l01.c: 243: if (!nrf24l01.RXMode){
  6246  05C7  195B               	btfsc	_nrf24l01,2	;volatile
  6247  05C8  2DD2               	goto	i1l2759
  6248                           
  6249                           ;nrf24l01.c: 244: if (TXPacket->packetData.ACKRequest){
  6250  05C9  0859               	movf	_TXPacket,w
  6251  05CA  0086               	movwf	6
  6252  05CB  0187               	clrf	7
  6253  05CC  1C81               	btfss	1,1
  6254  05CD  2DD2               	goto	i1l2759
  6255                           
  6256                           ;nrf24l01.c: 247: nrf24l01SetRXMode(1);
  6257  05CE  3001               	movlw	1
  6258  05CF  3185  257C  3185   	fcall	i1_nrf24l01SetRXMode
  6259  05D2                     i1l2759:	
  6260                           
  6261                           ;nrf24l01.c: 248: };nrf24l01.c: 249: };nrf24l01.c: 250: };nrf24l01.c: 253: if (status.RX
      +                          _DR){
  6262  05D2  0020               	movlb	0	; select bank0
  6263  05D3  1F20               	btfss	nrf24l01ISR@status,6
  6264  05D4  2DE0               	goto	i1l2769
  6265                           
  6266                           ;nrf24l01.c: 256: if (!nrf24l01.RXPending){
  6267  05D5  18DB               	btfsc	_nrf24l01,1	;volatile
  6268  05D6  2DDF               	goto	i1l334
  6269                           
  6270                           ;nrf24l01.c: 259: nrf24l01.RXPending = 1;
  6271  05D7  14DB               	bsf	_nrf24l01,1	;volatile
  6272                           
  6273                           ;nrf24l01.c: 260: nrf24l01ReceivePacket();
  6274  05D8  3184  2475  3185   	fcall	_nrf24l01ReceivePacket
  6275                           
  6276                           ;nrf24l01.c: 261: nrf24l01CheckACK();
  6277  05DB  3187  279A  3185   	fcall	_nrf24l01CheckACK
  6278                           
  6279                           ;nrf24l01.c: 262: }
  6280  05DE  2DE0               	goto	i1l2769
  6281  05DF                     i1l334:	
  6282                           
  6283                           ;nrf24l01.c: 265: else{;nrf24l01.c: 268: status.RX_DR = 0;
  6284  05DF  1320               	bcf	nrf24l01ISR@status,6
  6285  05E0                     i1l2769:	
  6286                           
  6287                           ;nrf24l01.c: 269: };nrf24l01.c: 271: };nrf24l01.c: 274: nrf24l01Send(0b00100000 | 0x07, 
      +                          status.byte);
  6288  05E0  0020               	movlb	0	; select bank0
  6289  05E1  0820               	movf	nrf24l01ISR@status,w
  6290  05E2  00FD               	movwf	??_nrf24l01ISR
  6291  05E3  087D               	movf	??_nrf24l01ISR,w
  6292  05E4  00F1               	movwf	i1nrf24l01Send@data
  6293  05E5  3027               	movlw	39
  6294  05E6  318F  27E5         	fcall	i1_nrf24l01Send
  6295  05E8  0008               	return
  6296  05E9                     __end_of_nrf24l01ISR:	
  6297                           
  6298                           	psect	text25
  6299  0475                     __ptext25:	
  6300 ;; *************** function _nrf24l01ReceivePacket *****************
  6301 ;; Defined at:
  6302 ;;		line 114 in file "nrf24l01.c"
  6303 ;; Parameters:    Size  Location     Type
  6304 ;;		None
  6305 ;; Auto vars:     Size  Location     Type
  6306 ;;  i               1   10[COMMON] unsigned char 
  6307 ;;  width           1    9[COMMON] unsigned char 
  6308 ;; Return value:  Size  Location     Type
  6309 ;;                  1    wreg      void 
  6310 ;; Registers used:
  6311 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6312 ;; Tracked objects:
  6313 ;;		On entry : 0/0
  6314 ;;		On exit  : 0/0
  6315 ;;		Unchanged: 0/0
  6316 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6317 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6318 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6319 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6320 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6321 ;;Total ram usage:        3 bytes
  6322 ;; Hardware stack levels used:    1
  6323 ;; Hardware stack levels required when called:    3
  6324 ;; This function calls:
  6325 ;;		_nrf24l01CEHigh
  6326 ;;		_nrf24l01CELow
  6327 ;;		_nrf24l01SPIEnd
  6328 ;;		_nrf24l01SPISend
  6329 ;;		_nrf24l01SPIStart
  6330 ;;		i1_memset
  6331 ;;		i1_nrf24l01Send
  6332 ;; This function is called by:
  6333 ;;		_nrf24l01ISR
  6334 ;; This function uses a non-reentrant model
  6335 ;;
  6336                           
  6337                           
  6338                           ;psect for function _nrf24l01ReceivePacket
  6339  0475                     _nrf24l01ReceivePacket:	
  6340                           
  6341                           ;nrf24l01.c: 117: memset(RXPacket.Message, 0, sizeof(RXPacket.Message));
  6342                           
  6343                           ;incstack = 0
  6344                           ; Regs used in _nrf24l01ReceivePacket: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  6345  0475  3041               	movlw	low (_RXPacket+1)
  6346  0476  00F0               	movwf	i1memset@p1
  6347  0477  3001               	movlw	high (_RXPacket+1)
  6348  0478  00F1               	movwf	i1memset@p1+1
  6349  0479  3000               	movlw	0
  6350  047A  00F2               	movwf	i1memset@c
  6351  047B  00F3               	movwf	i1memset@c+1
  6352  047C  3020               	movlw	32
  6353  047D  00F4               	movwf	i1memset@n
  6354  047E  3000               	movlw	0
  6355  047F  00F5               	movwf	i1memset@n+1
  6356  0480  318F  2799  3184   	fcall	i1_memset
  6357                           
  6358                           ;nrf24l01.c: 118: RXPacket.packetData.byte = 0x00;
  6359  0483  0022               	movlb	2	; select bank2
  6360  0484  01C0               	clrf	_RXPacket^(0+256)
  6361                           
  6362                           ;nrf24l01.c: 121: unsigned char width = nrf24l01Send(0b01100000, 0);
  6363  0485  01F1               	clrf	i1nrf24l01Send@data
  6364  0486  3060               	movlw	96
  6365  0487  318F  27E5  3184   	fcall	i1_nrf24l01Send
  6366  048A  00F8               	movwf	??_nrf24l01ReceivePacket
  6367  048B  0878               	movf	??_nrf24l01ReceivePacket,w
  6368  048C  00F9               	movwf	nrf24l01ReceivePacket@width
  6369                           
  6370                           ;nrf24l01.c: 122: unsigned char i = 0;
  6371  048D  01FA               	clrf	nrf24l01ReceivePacket@i
  6372                           
  6373                           ;nrf24l01.c: 125: nrf24l01CELow();
  6374  048E  318F  2752  3184   	fcall	_nrf24l01CELow
  6375                           
  6376                           ;nrf24l01.c: 128: nrf24l01SPIStart();
  6377  0491  318F  2770  3184   	fcall	_nrf24l01SPIStart
  6378                           
  6379                           ;nrf24l01.c: 131: nrf24l01SPISend(0b01100001);
  6380  0494  3061               	movlw	97
  6381  0495  3187  27F1  3184   	fcall	_nrf24l01SPISend
  6382                           
  6383                           ;nrf24l01.c: 134: RXPacket.packetData.byte = nrf24l01SPISend(0);
  6384  0498  3000               	movlw	0
  6385  0499  3187  27F1  3184   	fcall	_nrf24l01SPISend
  6386  049C  00F8               	movwf	??_nrf24l01ReceivePacket
  6387  049D  0878               	movf	??_nrf24l01ReceivePacket,w
  6388  049E  0022               	movlb	2	; select bank2
  6389  049F  00C0               	movwf	_RXPacket^(0+256)
  6390                           
  6391                           ;nrf24l01.c: 135: width--;
  6392  04A0  3001               	movlw	1
  6393  04A1  02F9               	subwf	nrf24l01ReceivePacket@width,f
  6394                           
  6395                           ;nrf24l01.c: 137: for (i = 0; (i < width) && (i < sizeof(RXPacket.Message)); i++){
  6396  04A2  01FA               	clrf	nrf24l01ReceivePacket@i
  6397  04A3  2CB4               	goto	i1l2735
  6398  04A4                     i1l2731:	
  6399                           
  6400                           ;nrf24l01.c: 139: RXPacket.Message[i] = nrf24l01SPISend(0);
  6401  04A4  3000               	movlw	0
  6402  04A5  3187  27F1  3184   	fcall	_nrf24l01SPISend
  6403  04A8  00F8               	movwf	??_nrf24l01ReceivePacket
  6404  04A9  087A               	movf	nrf24l01ReceivePacket@i,w
  6405  04AA  3E41               	addlw	(low ((_RXPacket| (0+256)+1)))& (0+255)
  6406  04AB  0086               	movwf	6
  6407  04AC  3001               	movlw	1	; select bank2/3
  6408  04AD  0087               	movwf	7
  6409  04AE  0878               	movf	??_nrf24l01ReceivePacket,w
  6410  04AF  0081               	movwf	1
  6411  04B0  3001               	movlw	1
  6412  04B1  00F8               	movwf	??_nrf24l01ReceivePacket
  6413  04B2  0878               	movf	??_nrf24l01ReceivePacket,w
  6414  04B3  07FA               	addwf	nrf24l01ReceivePacket@i,f
  6415  04B4                     i1l2735:	
  6416  04B4  0879               	movf	nrf24l01ReceivePacket@width,w
  6417  04B5  027A               	subwf	nrf24l01ReceivePacket@i,w
  6418  04B6  1803               	skipnc
  6419  04B7  2CBC               	goto	i1l2739
  6420  04B8  3020               	movlw	32
  6421  04B9  027A               	subwf	nrf24l01ReceivePacket@i,w
  6422  04BA  1C03               	skipc
  6423  04BB  2CA4               	goto	i1l2731
  6424  04BC                     i1l2739:	
  6425                           
  6426                           ;nrf24l01.c: 140: };nrf24l01.c: 143: nrf24l01SPIEnd();
  6427  04BC  318F  2761  3184   	fcall	_nrf24l01SPIEnd
  6428                           
  6429                           ;nrf24l01.c: 146: nrf24l01CEHigh();
  6430  04BF  318F  274F         	fcall	_nrf24l01CEHigh
  6431  04C1  0008               	return
  6432  04C2                     __end_of_nrf24l01ReceivePacket:	
  6433                           
  6434                           	psect	text26
  6435  0F99                     __ptext26:	
  6436 ;; *************** function i1_memset *****************
  6437 ;; Defined at:
  6438 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\memset.c"
  6439 ;; Parameters:    Size  Location     Type
  6440 ;;  p1              2    0[COMMON] PTR void 
  6441 ;;		 -> RXPacket(33), main@packet(33), loop@packet(33), 
  6442 ;;  c               2    2[COMMON] int 
  6443 ;;  n               2    4[COMMON] unsigned int 
  6444 ;; Auto vars:     Size  Location     Type
  6445 ;;  memset          2    6[COMMON] PTR unsigned char 
  6446 ;;		 -> RXPacket(33), main@packet(33), loop@packet(33), 
  6447 ;; Return value:  Size  Location     Type
  6448 ;;                  1    wreg      PTR void 
  6449 ;; Registers used:
  6450 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  6451 ;; Tracked objects:
  6452 ;;		On entry : 0/0
  6453 ;;		On exit  : 0/0
  6454 ;;		Unchanged: 0/0
  6455 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6456 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6457 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6458 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6459 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6460 ;;Total ram usage:        8 bytes
  6461 ;; Hardware stack levels used:    1
  6462 ;; This function calls:
  6463 ;;		Nothing
  6464 ;; This function is called by:
  6465 ;;		_nrf24l01ReceivePacket
  6466 ;; This function uses a non-reentrant model
  6467 ;;
  6468                           
  6469                           
  6470                           ;psect for function i1_memset
  6471  0F99                     i1_memset:	
  6472                           
  6473                           ;incstack = 0
  6474                           ; Regs used in i1_memset: [wreg+fsr1l+fsr1h+status,2+status,0]
  6475  0F99  0871               	movf	i1memset@p1+1,w
  6476  0F9A  00F7               	movwf	i1memset@p+1
  6477  0F9B  0870               	movf	i1memset@p1,w
  6478  0F9C  00F6               	movwf	i1memset@p
  6479  0F9D                     i1l2699:	
  6480  0F9D  3001               	movlw	1
  6481  0F9E  02F4               	subwf	i1memset@n,f
  6482  0F9F  3000               	movlw	0
  6483  0FA0  3BF5               	subwfb	i1memset@n+1,f
  6484  0FA1  0A74               	incf	i1memset@n,w
  6485  0FA2  1903               	btfsc	3,2
  6486  0FA3  0A75               	incf	i1memset@n+1,w
  6487  0FA4  1903               	btfsc	3,2
  6488  0FA5  0008               	return
  6489  0FA6  0876               	movf	i1memset@p,w
  6490  0FA7  0086               	movwf	6
  6491  0FA8  0877               	movf	i1memset@p+1,w
  6492  0FA9  0087               	movwf	7
  6493  0FAA  0872               	movf	i1memset@c,w
  6494  0FAB  0081               	movwf	1
  6495  0FAC  3001               	movlw	1
  6496  0FAD  07F6               	addwf	i1memset@p,f
  6497  0FAE  3000               	movlw	0
  6498  0FAF  3DF7               	addwfc	i1memset@p+1,f
  6499  0FB0  2F9D               	goto	i1l2699
  6500  0FB1                     __end_ofi1_memset:	
  6501                           ;	Return value of i1_memset is never used
  6502                           
  6503                           
  6504                           	psect	text27
  6505  079A                     __ptext27:	
  6506 ;; *************** function _nrf24l01CheckACK *****************
  6507 ;; Defined at:
  6508 ;;		line 79 in file "nrf24l01.c"
  6509 ;; Parameters:    Size  Location     Type
  6510 ;;		None
  6511 ;; Auto vars:     Size  Location     Type
  6512 ;;		None
  6513 ;; Return value:  Size  Location     Type
  6514 ;;                  1    wreg      void 
  6515 ;; Registers used:
  6516 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6517 ;; Tracked objects:
  6518 ;;		On entry : 0/0
  6519 ;;		On exit  : 0/0
  6520 ;;		Unchanged: 0/0
  6521 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6522 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6523 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6524 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6525 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6526 ;;Total ram usage:        1 bytes
  6527 ;; Hardware stack levels used:    1
  6528 ;; Hardware stack levels required when called:    4
  6529 ;; This function calls:
  6530 ;;		_strcmp
  6531 ;;		i1_nrf24l01SetRXMode
  6532 ;; This function is called by:
  6533 ;;		_nrf24l01ISR
  6534 ;; This function uses a non-reentrant model
  6535 ;;
  6536                           
  6537                           
  6538                           ;psect for function _nrf24l01CheckACK
  6539  079A                     _nrf24l01CheckACK:	
  6540                           
  6541                           ;nrf24l01.c: 83: if (!RXPacket.packetData.IsACK){
  6542                           
  6543                           ;incstack = 0
  6544                           ; Regs used in _nrf24l01CheckACK: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6545  079A  0022               	movlb	2	; select bank2
  6546  079B  1D40               	btfss	_RXPacket^(0+256),2
  6547  079C  0008               	return
  6548                           
  6549                           ;nrf24l01.c: 85: };nrf24l01.c: 88: nrf24l01.RXPending = 0;
  6550                           
  6551                           ;nrf24l01.c: 84: return;
  6552  079D  0020               	movlb	0	; select bank0
  6553  079E  10DB               	bcf	_nrf24l01,1	;volatile
  6554                           
  6555                           ;nrf24l01.c: 91: if (!TXPacket->packetData.ACKRequest){
  6556  079F  0859               	movf	_TXPacket,w
  6557  07A0  0086               	movwf	6
  6558  07A1  0187               	clrf	7
  6559  07A2  1C81               	btfss	1,1
  6560  07A3  0008               	return
  6561                           
  6562                           ;nrf24l01.c: 93: };nrf24l01.c: 96: if (strcmp(TXPacket->Message, RXPacket.Message) != 0)
      +                          {
  6563                           
  6564                           ;nrf24l01.c: 92: return;
  6565  07A4  3041               	movlw	(low ((_RXPacket| (0+256)+1)))& (0+255)
  6566  07A5  00F7               	movwf	??_nrf24l01CheckACK
  6567  07A6  0877               	movf	??_nrf24l01CheckACK,w
  6568  07A7  00F0               	movwf	strcmp@s2
  6569  07A8  0859               	movf	_TXPacket,w
  6570  07A9  3E01               	addlw	1
  6571  07AA  3186  26CB  3187   	fcall	_strcmp
  6572  07AD  0870               	movf	?_strcmp,w
  6573  07AE  0471               	iorwf	?_strcmp+1,w
  6574  07AF  1D03               	btfss	3,2
  6575  07B0  0008               	return
  6576                           
  6577                           ;nrf24l01.c: 98: };nrf24l01.c: 103: TXPacket->packetData.ACKRequest = 0;
  6578                           
  6579                           ;nrf24l01.c: 97: return;
  6580  07B1  0020               	movlb	0	; select bank0
  6581  07B2  0859               	movf	_TXPacket,w
  6582  07B3  0086               	movwf	6
  6583  07B4  0187               	clrf	7
  6584  07B5  1081               	bcf	1,1
  6585                           
  6586                           ;nrf24l01.c: 106: nrf24l01SetRXMode(0);
  6587  07B6  3000               	movlw	0
  6588  07B7  3185  257C         	fcall	i1_nrf24l01SetRXMode
  6589  07B9  0008               	return
  6590  07BA                     __end_of_nrf24l01CheckACK:	
  6591                           
  6592                           	psect	text28
  6593  057C                     __ptext28:	
  6594 ;; *************** function i1_nrf24l01SetRXMode *****************
  6595 ;; Defined at:
  6596 ;;		line 35 in file "nrf24l01.c"
  6597 ;; Parameters:    Size  Location     Type
  6598 ;;  rxMode          1    wreg     unsigned char 
  6599 ;; Auto vars:     Size  Location     Type
  6600 ;;  rxMode          1    6[COMMON] unsigned char 
  6601 ;;  nrf24l01SetR    1    5[COMMON] struct .
  6602 ;; Return value:  Size  Location     Type
  6603 ;;                  1    wreg      void 
  6604 ;; Registers used:
  6605 ;;		wreg, status,2, status,0, pclath, cstack
  6606 ;; Tracked objects:
  6607 ;;		On entry : 0/0
  6608 ;;		On exit  : 0/0
  6609 ;;		Unchanged: 0/0
  6610 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6611 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6612 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6613 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6614 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6615 ;;Total ram usage:        3 bytes
  6616 ;; Hardware stack levels used:    1
  6617 ;; Hardware stack levels required when called:    3
  6618 ;; This function calls:
  6619 ;;		_nrf24l01CEHigh
  6620 ;;		_nrf24l01CELow
  6621 ;;		i1_nrf24l01Send
  6622 ;; This function is called by:
  6623 ;;		_nrf24l01CheckACK
  6624 ;;		_nrf24l01ISR
  6625 ;; This function uses a non-reentrant model
  6626 ;;
  6627                           
  6628                           
  6629                           ;psect for function i1_nrf24l01SetRXMode
  6630  057C                     i1_nrf24l01SetRXMode:	
  6631                           
  6632                           ;incstack = 0
  6633                           ; Regs used in i1_nrf24l01SetRXMode: [wreg+status,2+status,0+pclath+cstack]
  6634                           ;i1nrf24l01SetRXMode@rxMode stored from wreg
  6635  057C  00F6               	movwf	i1nrf24l01SetRXMode@rxMode
  6636                           
  6637                           ;nrf24l01.c: 37: n_CONFIG_t config;;nrf24l01.c: 40: config.byte = nrf24l01Send(0b0000000
      +                          0 | 0x00, 0);
  6638  057D  01F1               	clrf	i1nrf24l01Send@data
  6639  057E  3000               	movlw	0
  6640  057F  318F  27E5  3185   	fcall	i1_nrf24l01Send
  6641  0582  00F4               	movwf	??i1_nrf24l01SetRXMode
  6642  0583  0874               	movf	??i1_nrf24l01SetRXMode,w
  6643  0584  00F5               	movwf	i1nrf24l01SetRXMode@config
  6644                           
  6645                           ;nrf24l01.c: 43: if (config.PRIM_RX != rxMode){
  6646  0585  0875               	movf	i1nrf24l01SetRXMode@config,w
  6647  0586  3901               	andlw	1
  6648  0587  0676               	xorwf	i1nrf24l01SetRXMode@rxMode,w
  6649  0588  1903               	skipnz
  6650  0589  2DAC               	goto	i1l2107
  6651                           
  6652                           ;nrf24l01.c: 46: nrf24l01CELow();
  6653  058A  318F  2752  3185   	fcall	_nrf24l01CELow
  6654                           
  6655                           ;nrf24l01.c: 47: _delay((unsigned long)((200)*(16000000/4000000.0)));
  6656  058D  30A0               	movlw	160
  6657  058E                     u160_27:	
  6658  058E  3200               	nop2
  6659  058F  0B89               	decfsz	9,f
  6660  0590  2D8E               	goto	u160_27
  6661                           
  6662                           ;nrf24l01.c: 54: config.PRIM_RX = rxMode;
  6663  0591  0876               	movf	i1nrf24l01SetRXMode@rxMode,w
  6664  0592  3901               	andlw	1
  6665  0593  1075               	bcf	i1nrf24l01SetRXMode@config,0
  6666  0594  1D03               	skipz
  6667  0595  1475               	bsf	i1nrf24l01SetRXMode@config,0
  6668                           
  6669                           ;nrf24l01.c: 55: nrf24l01Send(0b00100000 | 0x00, config.byte);
  6670  0596  0875               	movf	i1nrf24l01SetRXMode@config,w
  6671  0597  00F4               	movwf	??i1_nrf24l01SetRXMode
  6672  0598  0874               	movf	??i1_nrf24l01SetRXMode,w
  6673  0599  00F1               	movwf	i1nrf24l01Send@data
  6674  059A  3020               	movlw	32
  6675  059B  318F  27E5  3185   	fcall	i1_nrf24l01Send
  6676                           
  6677                           ;nrf24l01.c: 58: _delay((unsigned long)((200)*(16000000/4000000.0)));
  6678  059E  30A0               	movlw	160
  6679  059F                     u161_27:	
  6680  059F  3200               	nop2
  6681  05A0  0B89               	decfsz	9,f
  6682  05A1  2D9F               	goto	u161_27
  6683                           
  6684                           ;nrf24l01.c: 61: if (rxMode){
  6685  05A2  0876               	movf	i1nrf24l01SetRXMode@rxMode,w
  6686  05A3  1903               	btfsc	3,2
  6687  05A4  2DAC               	goto	i1l2107
  6688                           
  6689                           ;nrf24l01.c: 62: nrf24l01CEHigh();
  6690  05A5  318F  274F  3185   	fcall	_nrf24l01CEHigh
  6691                           
  6692                           ;nrf24l01.c: 63: _delay((unsigned long)((200)*(16000000/4000000.0)));
  6693  05A8  30A0               	movlw	160
  6694  05A9                     u162_27:	
  6695  05A9  3200               	nop2
  6696  05AA  0B89               	decfsz	9,f
  6697  05AB  2DA9               	goto	u162_27
  6698  05AC                     i1l2107:	
  6699                           
  6700                           ;nrf24l01.c: 64: };nrf24l01.c: 65: };nrf24l01.c: 68: nrf24l01.RXMode = rxMode;
  6701  05AC  0876               	movf	i1nrf24l01SetRXMode@rxMode,w
  6702  05AD  3901               	andlw	1
  6703  05AE  0020               	movlb	0	; select bank0
  6704  05AF  115B               	bcf	_nrf24l01,2	;volatile
  6705  05B0  1D03               	skipz
  6706  05B1  155B               	bsf	_nrf24l01,2	;volatile
  6707  05B2  0008               	return
  6708  05B3                     __end_ofi1_nrf24l01SetRXMode:	
  6709                           
  6710                           	psect	text29
  6711  0FE5                     __ptext29:	
  6712 ;; *************** function i1_nrf24l01Send *****************
  6713 ;; Defined at:
  6714 ;;		line 9 in file "nrf24l01.c"
  6715 ;; Parameters:    Size  Location     Type
  6716 ;;  command         1    wreg     unsigned char 
  6717 ;;  data            1    1[COMMON] unsigned char 
  6718 ;; Auto vars:     Size  Location     Type
  6719 ;;  command         1    3[COMMON] unsigned char 
  6720 ;; Return value:  Size  Location     Type
  6721 ;;                  1    wreg      unsigned char 
  6722 ;; Registers used:
  6723 ;;		wreg, status,2, status,0, pclath, cstack
  6724 ;; Tracked objects:
  6725 ;;		On entry : 0/0
  6726 ;;		On exit  : 0/0
  6727 ;;		Unchanged: 0/0
  6728 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6729 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6730 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6731 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6732 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6733 ;;Total ram usage:        3 bytes
  6734 ;; Hardware stack levels used:    1
  6735 ;; Hardware stack levels required when called:    2
  6736 ;; This function calls:
  6737 ;;		_enableInterrupts
  6738 ;;		_nrf24l01SPIEnd
  6739 ;;		_nrf24l01SPISend
  6740 ;;		_nrf24l01SPIStart
  6741 ;; This function is called by:
  6742 ;;		_nrf24l01ReceivePacket
  6743 ;;		_nrf24l01ISR
  6744 ;;		i1_nrf24l01SetRXMode
  6745 ;; This function uses a non-reentrant model
  6746 ;;
  6747                           
  6748                           
  6749                           ;psect for function i1_nrf24l01Send
  6750  0FE5                     i1_nrf24l01Send:	
  6751                           
  6752                           ;incstack = 0
  6753                           ; Regs used in i1_nrf24l01Send: [wreg+status,2+status,0+pclath+cstack]
  6754                           ;i1nrf24l01Send@command stored from wreg
  6755  0FE5  00F3               	movwf	i1nrf24l01Send@command
  6756                           
  6757                           ;nrf24l01.c: 12: enableInterrupts(0);
  6758  0FE6  3000               	movlw	0
  6759  0FE7  318F  2768  318F   	fcall	_enableInterrupts
  6760                           
  6761                           ;nrf24l01.c: 15: nrf24l01SPIStart();
  6762  0FEA  318F  2770  318F   	fcall	_nrf24l01SPIStart
  6763                           
  6764                           ;nrf24l01.c: 18: nrf24l01SPISend(command);
  6765  0FED  0873               	movf	i1nrf24l01Send@command,w
  6766  0FEE  3187  27F1  318F   	fcall	_nrf24l01SPISend
  6767                           
  6768                           ;nrf24l01.c: 21: data = nrf24l01SPISend(data);
  6769  0FF1  0871               	movf	i1nrf24l01Send@data,w
  6770  0FF2  3187  27F1  318F   	fcall	_nrf24l01SPISend
  6771  0FF5  00F2               	movwf	??i1_nrf24l01Send
  6772  0FF6  0872               	movf	??i1_nrf24l01Send,w
  6773  0FF7  00F1               	movwf	i1nrf24l01Send@data
  6774                           
  6775                           ;nrf24l01.c: 24: nrf24l01SPIEnd();
  6776  0FF8  318F  2761  318F   	fcall	_nrf24l01SPIEnd
  6777                           
  6778                           ;nrf24l01.c: 27: enableInterrupts(1);
  6779  0FFB  3001               	movlw	1
  6780  0FFC  318F  2768         	fcall	_enableInterrupts
  6781                           
  6782                           ;nrf24l01.c: 29: return data;
  6783  0FFE  0871               	movf	i1nrf24l01Send@data,w
  6784  0FFF  0008               	return
  6785  1000                     __end_ofi1_nrf24l01Send:	
  6786                           
  6787                           	psect	text30
  6788  0F70                     __ptext30:	
  6789 ;; *************** function _nrf24l01SPIStart *****************
  6790 ;; Defined at:
  6791 ;;		line 65 in file "interface.c"
  6792 ;; Parameters:    Size  Location     Type
  6793 ;;		None
  6794 ;; Auto vars:     Size  Location     Type
  6795 ;;		None
  6796 ;; Return value:  Size  Location     Type
  6797 ;;                  1    wreg      void 
  6798 ;; Registers used:
  6799 ;;		wreg, status,2, status,0, pclath, cstack
  6800 ;; Tracked objects:
  6801 ;;		On entry : 0/0
  6802 ;;		On exit  : 0/0
  6803 ;;		Unchanged: 0/0
  6804 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6805 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6806 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6807 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6808 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6809 ;;Total ram usage:        0 bytes
  6810 ;; Hardware stack levels used:    1
  6811 ;; Hardware stack levels required when called:    8
  6812 ;; This function calls:
  6813 ;;		_nrf24l01CSLow
  6814 ;; This function is called by:
  6815 ;;		_nrf24l01Send
  6816 ;;		_nrf24l01ReceivePacket
  6817 ;;		_nrf24l01SendPacket
  6818 ;;		i1_nrf24l01Send
  6819 ;; This function uses a non-reentrant model
  6820 ;;
  6821                           
  6822                           
  6823                           ;psect for function _nrf24l01SPIStart
  6824  0F70                     _nrf24l01SPIStart:	
  6825                           
  6826                           ;interface.c: 66: nrf24l01CSLow();
  6827                           
  6828                           ;incstack = 0
  6829 ;; hardware stack exceeded
  6830                           ; Regs used in _nrf24l01SPIStart: [wreg+status,2+status,0+pclath+cstack]
  6831  0F70  318F  2758  318F   	fcall	_nrf24l01CSLow
  6832                           
  6833                           ;interface.c: 67: _delay((unsigned long)((10)*(16000000/4000000.0)));
  6834  0F73  300D               	movlw	13
  6835  0F74                     u163_27:	
  6836  0F74  0B89               	decfsz	9,f
  6837  0F75  2F74               	goto	u163_27
  6838  0F76  0000               	nop
  6839  0F77  0008               	return
  6840  0F78                     __end_of_nrf24l01SPIStart:	
  6841                           
  6842                           	psect	text31
  6843  0F58                     __ptext31:	
  6844 ;; *************** function _nrf24l01CSLow *****************
  6845 ;; Defined at:
  6846 ;;		line 18 in file "interface.c"
  6847 ;; Parameters:    Size  Location     Type
  6848 ;;		None
  6849 ;; Auto vars:     Size  Location     Type
  6850 ;;		None
  6851 ;; Return value:  Size  Location     Type
  6852 ;;                  1    wreg      void 
  6853 ;; Registers used:
  6854 ;;		None
  6855 ;; Tracked objects:
  6856 ;;		On entry : 0/0
  6857 ;;		On exit  : 0/0
  6858 ;;		Unchanged: 0/0
  6859 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6860 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6861 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6862 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6863 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6864 ;;Total ram usage:        0 bytes
  6865 ;; Hardware stack levels used:    1
  6866 ;; Hardware stack levels required when called:    7
  6867 ;; This function calls:
  6868 ;;		Nothing
  6869 ;; This function is called by:
  6870 ;;		_nrf24l01SPIStart
  6871 ;; This function uses a non-reentrant model
  6872 ;;
  6873                           
  6874                           
  6875                           ;psect for function _nrf24l01CSLow
  6876  0F58                     _nrf24l01CSLow:	
  6877                           
  6878                           ;interface.c: 19: PORTAbits.RA1 = 0;
  6879                           
  6880                           ;incstack = 0
  6881 ;; hardware stack exceeded
  6882                           ; Regs used in _nrf24l01CSLow: []
  6883  0F58  0020               	movlb	0	; select bank0
  6884  0F59  108C               	bcf	12,1	;volatile
  6885  0F5A  0008               	return
  6886  0F5B                     __end_of_nrf24l01CSLow:	
  6887                           
  6888                           	psect	text32
  6889  07F1                     __ptext32:	
  6890 ;; *************** function _nrf24l01SPISend *****************
  6891 ;; Defined at:
  6892 ;;		line 52 in file "interface.c"
  6893 ;; Parameters:    Size  Location     Type
  6894 ;;  data            1    wreg     unsigned char 
  6895 ;; Auto vars:     Size  Location     Type
  6896 ;;  data            1    0[COMMON] unsigned char 
  6897 ;; Return value:  Size  Location     Type
  6898 ;;                  1    wreg      unsigned char 
  6899 ;; Registers used:
  6900 ;;		wreg
  6901 ;; Tracked objects:
  6902 ;;		On entry : 0/0
  6903 ;;		On exit  : 0/0
  6904 ;;		Unchanged: 0/0
  6905 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6906 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6907 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6908 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6909 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6910 ;;Total ram usage:        0 bytes
  6911 ;; Hardware stack levels used:    1
  6912 ;; Hardware stack levels required when called:    7
  6913 ;; This function calls:
  6914 ;;		Nothing
  6915 ;; This function is called by:
  6916 ;;		_nrf24l01Send
  6917 ;;		_nrf24l01ReceivePacket
  6918 ;;		_nrf24l01SendPacket
  6919 ;;		i1_nrf24l01Send
  6920 ;; This function uses a non-reentrant model
  6921 ;;
  6922                           
  6923                           
  6924                           ;psect for function _nrf24l01SPISend
  6925  07F1                     _nrf24l01SPISend:	
  6926                           
  6927                           ;incstack = 0
  6928 ;; hardware stack exceeded
  6929                           ; Regs used in _nrf24l01SPISend: [wreg]
  6930                           ;nrf24l01SPISend@data stored from wreg
  6931  07F1  00F0               	movwf	nrf24l01SPISend@data
  6932                           
  6933                           ;interface.c: 53: SSP1BUF = data;
  6934  07F2  0870               	movf	nrf24l01SPISend@data,w
  6935  07F3  0024               	movlb	4	; select bank4
  6936  07F4  0091               	movwf	17	;volatile
  6937                           
  6938                           ;interface.c: 55: PORTCbits.RC4 = 1;
  6939  07F5  0020               	movlb	0	; select bank0
  6940  07F6  160E               	bsf	14,4	;volatile
  6941  07F7                     i1l94:	
  6942                           ;interface.c: 57: while (!SSP1STATbits.BF){
  6943                           
  6944  07F7  0024               	movlb	4	; select bank4
  6945  07F8  1814               	btfsc	20,0	;volatile
  6946  07F9  2FFC               	goto	i1l1811
  6947                           
  6948                           ;interface.c: 58: __nop();
  6949  07FA  0000               	nop
  6950  07FB  2FF7               	goto	i1l94
  6951  07FC                     i1l1811:	
  6952                           
  6953                           ;interface.c: 59: };interface.c: 61: return SSP1BUF;
  6954  07FC  0811               	movf	17,w	;volatile
  6955  07FD  0008               	return
  6956  07FE                     __end_of_nrf24l01SPISend:	
  6957                           
  6958                           	psect	text33
  6959  0F61                     __ptext33:	
  6960 ;; *************** function _nrf24l01SPIEnd *****************
  6961 ;; Defined at:
  6962 ;;		line 71 in file "interface.c"
  6963 ;; Parameters:    Size  Location     Type
  6964 ;;		None
  6965 ;; Auto vars:     Size  Location     Type
  6966 ;;		None
  6967 ;; Return value:  Size  Location     Type
  6968 ;;                  1    wreg      void 
  6969 ;; Registers used:
  6970 ;;		wreg, status,2, status,0, pclath, cstack
  6971 ;; Tracked objects:
  6972 ;;		On entry : 0/0
  6973 ;;		On exit  : 0/0
  6974 ;;		Unchanged: 0/0
  6975 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6976 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6977 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6978 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6979 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6980 ;;Total ram usage:        0 bytes
  6981 ;; Hardware stack levels used:    1
  6982 ;; Hardware stack levels required when called:    8
  6983 ;; This function calls:
  6984 ;;		_nrf24l01CSHigh
  6985 ;; This function is called by:
  6986 ;;		_nrf24l01Send
  6987 ;;		_nrf24l01ReceivePacket
  6988 ;;		_nrf24l01SendPacket
  6989 ;;		i1_nrf24l01Send
  6990 ;; This function uses a non-reentrant model
  6991 ;;
  6992                           
  6993                           
  6994                           ;psect for function _nrf24l01SPIEnd
  6995  0F61                     _nrf24l01SPIEnd:	
  6996                           
  6997                           ;interface.c: 72: _delay((unsigned long)((10)*(16000000/4000000.0)));
  6998                           
  6999                           ;incstack = 0
  7000 ;; hardware stack exceeded
  7001                           ; Regs used in _nrf24l01SPIEnd: [wreg+status,2+status,0+pclath+cstack]
  7002  0F61  300D               	movlw	13
  7003  0F62                     u164_27:	
  7004  0F62  0B89               	decfsz	9,f
  7005  0F63  2F62               	goto	u164_27
  7006  0F64  0000               	nop
  7007                           
  7008                           ;interface.c: 73: nrf24l01CSHigh();
  7009  0F65  318F  2755         	fcall	_nrf24l01CSHigh
  7010  0F67  0008               	return
  7011  0F68                     __end_of_nrf24l01SPIEnd:	
  7012                           
  7013                           	psect	text34
  7014  0F55                     __ptext34:	
  7015 ;; *************** function _nrf24l01CSHigh *****************
  7016 ;; Defined at:
  7017 ;;		line 23 in file "interface.c"
  7018 ;; Parameters:    Size  Location     Type
  7019 ;;		None
  7020 ;; Auto vars:     Size  Location     Type
  7021 ;;		None
  7022 ;; Return value:  Size  Location     Type
  7023 ;;                  1    wreg      void 
  7024 ;; Registers used:
  7025 ;;		None
  7026 ;; Tracked objects:
  7027 ;;		On entry : 0/0
  7028 ;;		On exit  : 0/0
  7029 ;;		Unchanged: 0/0
  7030 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7031 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7032 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7033 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7034 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7035 ;;Total ram usage:        0 bytes
  7036 ;; Hardware stack levels used:    1
  7037 ;; Hardware stack levels required when called:    7
  7038 ;; This function calls:
  7039 ;;		Nothing
  7040 ;; This function is called by:
  7041 ;;		_nrf24l01SPIEnd
  7042 ;; This function uses a non-reentrant model
  7043 ;;
  7044                           
  7045                           
  7046                           ;psect for function _nrf24l01CSHigh
  7047  0F55                     _nrf24l01CSHigh:	
  7048                           
  7049                           ;interface.c: 24: PORTAbits.RA1 = 1;
  7050                           
  7051                           ;incstack = 0
  7052 ;; hardware stack exceeded
  7053                           ; Regs used in _nrf24l01CSHigh: []
  7054  0F55  0020               	movlb	0	; select bank0
  7055  0F56  148C               	bsf	12,1	;volatile
  7056  0F57  0008               	return
  7057  0F58                     __end_of_nrf24l01CSHigh:	
  7058                           
  7059                           	psect	text35
  7060  0F68                     __ptext35:	
  7061 ;; *************** function _enableInterrupts *****************
  7062 ;; Defined at:
  7063 ;;		line 77 in file "interface.c"
  7064 ;; Parameters:    Size  Location     Type
  7065 ;;  enable          1    wreg     unsigned char 
  7066 ;; Auto vars:     Size  Location     Type
  7067 ;;  enable          1    0[COMMON] unsigned char 
  7068 ;; Return value:  Size  Location     Type
  7069 ;;                  1    wreg      void 
  7070 ;; Registers used:
  7071 ;;		wreg, status,0
  7072 ;; Tracked objects:
  7073 ;;		On entry : 0/0
  7074 ;;		On exit  : 0/0
  7075 ;;		Unchanged: 0/0
  7076 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7077 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7078 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7079 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7080 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7081 ;;Total ram usage:        0 bytes
  7082 ;; Hardware stack levels used:    1
  7083 ;; Hardware stack levels required when called:    7
  7084 ;; This function calls:
  7085 ;;		Nothing
  7086 ;; This function is called by:
  7087 ;;		_nrf24l01Send
  7088 ;;		_nrf24l01SendPacket
  7089 ;;		i1_nrf24l01Send
  7090 ;; This function uses a non-reentrant model
  7091 ;;
  7092                           
  7093                           
  7094                           ;psect for function _enableInterrupts
  7095  0F68                     _enableInterrupts:	
  7096                           
  7097                           ;incstack = 0
  7098 ;; hardware stack exceeded
  7099                           ; Regs used in _enableInterrupts: [wreg+status,0]
  7100                           ;enableInterrupts@enable stored from wreg
  7101  0F68  00F0               	movwf	enableInterrupts@enable
  7102                           
  7103                           ;interface.c: 78: PIE0bits.INTE = enable;
  7104  0F69  0C70               	rrf	enableInterrupts@enable,w
  7105  0F6A  0021               	movlb	1	; select bank1
  7106  0F6B  1C03               	skipc
  7107  0F6C  1010               	bcf	16,0	;volatile
  7108  0F6D  1803               	skipnc
  7109  0F6E  1410               	bsf	16,0	;volatile
  7110  0F6F  0008               	return
  7111  0F70                     __end_of_enableInterrupts:	
  7112                           
  7113                           	psect	text36
  7114  0F52                     __ptext36:	
  7115 ;; *************** function _nrf24l01CELow *****************
  7116 ;; Defined at:
  7117 ;;		line 8 in file "interface.c"
  7118 ;; Parameters:    Size  Location     Type
  7119 ;;		None
  7120 ;; Auto vars:     Size  Location     Type
  7121 ;;		None
  7122 ;; Return value:  Size  Location     Type
  7123 ;;                  1    wreg      void 
  7124 ;; Registers used:
  7125 ;;		None
  7126 ;; Tracked objects:
  7127 ;;		On entry : 0/0
  7128 ;;		On exit  : 0/0
  7129 ;;		Unchanged: 0/0
  7130 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7131 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7132 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7133 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7134 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7135 ;;Total ram usage:        0 bytes
  7136 ;; Hardware stack levels used:    1
  7137 ;; Hardware stack levels required when called:    7
  7138 ;; This function calls:
  7139 ;;		Nothing
  7140 ;; This function is called by:
  7141 ;;		_nrf24l01SetRXMode
  7142 ;;		_nrf24l01ReceivePacket
  7143 ;;		_nrf24l01SendPacket
  7144 ;;		_nrf24l01Init
  7145 ;;		i1_nrf24l01SetRXMode
  7146 ;; This function uses a non-reentrant model
  7147 ;;
  7148                           
  7149                           
  7150                           ;psect for function _nrf24l01CELow
  7151  0F52                     _nrf24l01CELow:	
  7152                           
  7153                           ;interface.c: 9: PORTAbits.RA0 = 0;
  7154                           
  7155                           ;incstack = 0
  7156 ;; hardware stack exceeded
  7157                           ; Regs used in _nrf24l01CELow: []
  7158  0F52  0020               	movlb	0	; select bank0
  7159  0F53  100C               	bcf	12,0	;volatile
  7160  0F54  0008               	return
  7161  0F55                     __end_of_nrf24l01CELow:	
  7162                           
  7163                           	psect	text37
  7164  0F4F                     __ptext37:	
  7165 ;; *************** function _nrf24l01CEHigh *****************
  7166 ;; Defined at:
  7167 ;;		line 13 in file "interface.c"
  7168 ;; Parameters:    Size  Location     Type
  7169 ;;		None
  7170 ;; Auto vars:     Size  Location     Type
  7171 ;;		None
  7172 ;; Return value:  Size  Location     Type
  7173 ;;                  1    wreg      void 
  7174 ;; Registers used:
  7175 ;;		None
  7176 ;; Tracked objects:
  7177 ;;		On entry : 0/0
  7178 ;;		On exit  : 0/0
  7179 ;;		Unchanged: 0/0
  7180 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7181 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7182 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7183 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7184 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7185 ;;Total ram usage:        0 bytes
  7186 ;; Hardware stack levels used:    1
  7187 ;; Hardware stack levels required when called:    7
  7188 ;; This function calls:
  7189 ;;		Nothing
  7190 ;; This function is called by:
  7191 ;;		_nrf24l01SetRXMode
  7192 ;;		_nrf24l01ReceivePacket
  7193 ;;		_nrf24l01SendPacket
  7194 ;;		_nrf24l01Init
  7195 ;;		i1_nrf24l01SetRXMode
  7196 ;; This function uses a non-reentrant model
  7197 ;;
  7198                           
  7199                           
  7200                           ;psect for function _nrf24l01CEHigh
  7201  0F4F                     _nrf24l01CEHigh:	
  7202                           
  7203                           ;interface.c: 14: PORTAbits.RA0 = 1;
  7204                           
  7205                           ;incstack = 0
  7206 ;; hardware stack exceeded
  7207                           ; Regs used in _nrf24l01CEHigh: []
  7208  0F4F  0020               	movlb	0	; select bank0
  7209  0F50  140C               	bsf	12,0	;volatile
  7210  0F51  0008               	return
  7211  0F52                     __end_of_nrf24l01CEHigh:	
  7212                           
  7213                           	psect	text38
  7214  06CB                     __ptext38:	
  7215 ;; *************** function _strcmp *****************
  7216 ;; Defined at:
  7217 ;;		line 33 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\strcmp.c"
  7218 ;; Parameters:    Size  Location     Type
  7219 ;;  s1              1    wreg     PTR const unsigned char 
  7220 ;;		 -> packet.Message(32), packet.Message(32), NULL(0), main@packet(33), 
  7221 ;;		 -> loop@packet(33), 
  7222 ;;  s2              1    0[COMMON] PTR const unsigned char 
  7223 ;;		 -> RXPacket.Message(32), RXPacket(33), 
  7224 ;; Auto vars:     Size  Location     Type
  7225 ;;  s1              1    4[COMMON] PTR const unsigned char 
  7226 ;;		 -> packet.Message(32), packet.Message(32), NULL(0), main@packet(33), 
  7227 ;;		 -> loop@packet(33), 
  7228 ;;  r               1    3[COMMON] char 
  7229 ;; Return value:  Size  Location     Type
  7230 ;;                  2    0[COMMON] int 
  7231 ;; Registers used:
  7232 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0
  7233 ;; Tracked objects:
  7234 ;;		On entry : 0/0
  7235 ;;		On exit  : 0/0
  7236 ;;		Unchanged: 0/0
  7237 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7238 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7239 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7240 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7241 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7242 ;;Total ram usage:        5 bytes
  7243 ;; Hardware stack levels used:    1
  7244 ;; This function calls:
  7245 ;;		Nothing
  7246 ;; This function is called by:
  7247 ;;		_nrf24l01CheckACK
  7248 ;; This function uses a non-reentrant model
  7249 ;;
  7250                           
  7251                           
  7252                           ;psect for function _strcmp
  7253  06CB                     _strcmp:	
  7254                           
  7255                           ;incstack = 0
  7256                           ; Regs used in _strcmp: [wreg-fsr1h+status,2+status,0]
  7257                           ;strcmp@s1 stored from wreg
  7258  06CB  00F4               	movwf	strcmp@s1
  7259  06CC  2ED5               	goto	i1l2029
  7260  06CD                     i1l2025:	
  7261  06CD  3001               	movlw	1
  7262  06CE  00F2               	movwf	??_strcmp
  7263  06CF  0872               	movf	??_strcmp,w
  7264  06D0  07F4               	addwf	strcmp@s1,f
  7265  06D1  3001               	movlw	1
  7266  06D2  00F2               	movwf	??_strcmp
  7267  06D3  0872               	movf	??_strcmp,w
  7268  06D4  07F0               	addwf	strcmp@s2,f
  7269  06D5                     i1l2029:	
  7270  06D5  0874               	movf	strcmp@s1,w
  7271  06D6  0086               	movwf	6
  7272  06D7  0187               	clrf	7
  7273  06D8  0870               	movf	strcmp@s2,w
  7274  06D9  0084               	movwf	4
  7275  06DA  3001               	movlw	1	; select bank2/3
  7276  06DB  0085               	movwf	5
  7277  06DC  0300               	decf	0,w
  7278  06DD  3AFF               	xorlw	255
  7279  06DE  0701               	addwf	1,w
  7280  06DF  00F2               	movwf	??_strcmp
  7281  06E0  0872               	movf	??_strcmp,w
  7282  06E1  00F3               	movwf	strcmp@r
  7283  06E2  0873               	movf	strcmp@r,w
  7284  06E3  1D03               	btfss	3,2
  7285  06E4  2EEB               	goto	i1l2033
  7286  06E5  0874               	movf	strcmp@s1,w
  7287  06E6  0086               	movwf	6
  7288  06E7  0187               	clrf	7
  7289  06E8  0801               	movf	1,w
  7290  06E9  1D03               	btfss	3,2
  7291  06EA  2ECD               	goto	i1l2025
  7292  06EB                     i1l2033:	
  7293  06EB  0873               	movf	strcmp@r,w
  7294  06EC  00F0               	movwf	?_strcmp
  7295  06ED  01F1               	clrf	?_strcmp+1
  7296  06EE  1BF0               	btfsc	?_strcmp,7
  7297  06EF  03F1               	decf	?_strcmp+1,f
  7298  06F0  0008               	return
  7299  06F1                     __end_of_strcmp:	
  7300                           
  7301                           	psect	text39
  7302  0F81                     __ptext39:	
  7303 ;; *************** function _exception *****************
  7304 ;; Defined at:
  7305 ;;		line 81 in file "interface.c"
  7306 ;; Parameters:    Size  Location     Type
  7307 ;;  exception       1    wreg     unsigned char 
  7308 ;; Auto vars:     Size  Location     Type
  7309 ;;  exception       1   12[COMMON] unsigned char 
  7310 ;; Return value:  Size  Location     Type
  7311 ;;                  1    wreg      void 
  7312 ;; Registers used:
  7313 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7314 ;; Tracked objects:
  7315 ;;		On entry : 0/0
  7316 ;;		On exit  : 0/0
  7317 ;;		Unchanged: 0/0
  7318 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7319 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7320 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7321 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7322 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7323 ;;Total ram usage:        3 bytes
  7324 ;; Hardware stack levels used:    1
  7325 ;; Hardware stack levels required when called:    2
  7326 ;; This function calls:
  7327 ;;		___wmul
  7328 ;;		i1_flashUpdate
  7329 ;; This function is called by:
  7330 ;;		_nrf24l01ISR
  7331 ;; This function uses a non-reentrant model
  7332 ;;
  7333                           
  7334                           
  7335                           ;psect for function _exception
  7336  0F81                     _exception:	
  7337                           
  7338                           ;incstack = 0
  7339                           ; Regs used in _exception: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7340                           ;exception@exception stored from wreg
  7341  0F81  00FC               	movwf	exception@exception
  7342                           
  7343                           ;interface.c: 82: romData.bootMode = (unsigned) (exception * 10);
  7344  0F82  087C               	movf	exception@exception,w
  7345  0F83  00FA               	movwf	??_exception
  7346  0F84  01FB               	clrf	??_exception+1
  7347  0F85  087A               	movf	??_exception,w
  7348  0F86  00F0               	movwf	___wmul@multiplier
  7349  0F87  087B               	movf	??_exception+1,w
  7350  0F88  00F1               	movwf	___wmul@multiplier+1
  7351  0F89  300A               	movlw	10
  7352  0F8A  00F2               	movwf	___wmul@multiplicand
  7353  0F8B  3000               	movlw	0
  7354  0F8C  00F3               	movwf	___wmul@multiplicand+1
  7355  0F8D  318F  27CA  318F   	fcall	___wmul
  7356  0F90  0871               	movf	?___wmul+1,w
  7357  0F91  0020               	movlb	0	; select bank0
  7358  0F92  00EE               	movwf	_romData+18
  7359  0F93  0870               	movf	?___wmul,w
  7360  0F94  00ED               	movwf	_romData+17
  7361                           
  7362                           ;interface.c: 83: flashUpdate();
  7363  0F95  3187  2739         	fcall	i1_flashUpdate
  7364  0F97  0001               	reset	;# 
  7365  0F98  0008               	return
  7366  0F99                     __end_of_exception:	
  7367                           
  7368                           	psect	text40
  7369  0739                     __ptext40:	
  7370 ;; *************** function i1_flashUpdate *****************
  7371 ;; Defined at:
  7372 ;;		line 97 in file "flash.c"
  7373 ;; Parameters:    Size  Location     Type
  7374 ;;		None
  7375 ;; Auto vars:     Size  Location     Type
  7376 ;;  flashUpdate     2    8[COMMON] unsigned int 
  7377 ;; Return value:  Size  Location     Type
  7378 ;;                  1    wreg      void 
  7379 ;; Registers used:
  7380 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7381 ;; Tracked objects:
  7382 ;;		On entry : 0/0
  7383 ;;		On exit  : 0/0
  7384 ;;		Unchanged: 0/0
  7385 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7386 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7387 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7388 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7389 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7390 ;;Total ram usage:        4 bytes
  7391 ;; Hardware stack levels used:    1
  7392 ;; Hardware stack levels required when called:    1
  7393 ;; This function calls:
  7394 ;;		i1_flashWriteByte
  7395 ;; This function is called by:
  7396 ;;		_exception
  7397 ;; This function uses a non-reentrant model
  7398 ;;
  7399                           
  7400                           
  7401                           ;psect for function i1_flashUpdate
  7402  0739                     i1_flashUpdate:	
  7403                           
  7404                           ;flash.c: 98: for (unsigned int i = 0; i < 32; i++){
  7405                           
  7406                           ;incstack = 0
  7407                           ; Regs used in i1_flashUpdate: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7408  0739  01F8               	clrf	i1flashUpdate@i
  7409  073A  01F9               	clrf	i1flashUpdate@i+1
  7410  073B                     L3:	
  7411  073B  3000               	movlw	0
  7412  073C  0279               	subwf	i1flashUpdate@i+1,w
  7413  073D  3020               	movlw	32
  7414  073E  1903               	skipnz
  7415  073F  0278               	subwf	i1flashUpdate@i,w
  7416  0740  1803               	btfsc	3,0
  7417  0741  0008               	return
  7418                           
  7419                           ;flash.c: 99: flashWriteByte(i, romHolder.array[i]);
  7420  0742  0879               	movf	i1flashUpdate@i+1,w
  7421  0743  00F1               	movwf	i1flashWriteByte@offset+1
  7422  0744  0878               	movf	i1flashUpdate@i,w
  7423  0745  00F0               	movwf	i1flashWriteByte@offset
  7424  0746  0878               	movf	i1flashUpdate@i,w
  7425  0747  3E20               	addlw	(low (_romHolder| (0+256)))& (0+255)
  7426  0748  0086               	movwf	6
  7427  0749  3001               	movlw	1	; select bank2/3
  7428  074A  0087               	movwf	7
  7429  074B  0801               	movf	1,w
  7430  074C  00F6               	movwf	??i1_flashUpdate
  7431  074D  01F7               	clrf	??i1_flashUpdate+1
  7432  074E  0876               	movf	??i1_flashUpdate,w
  7433  074F  00F2               	movwf	i1flashWriteByte@data
  7434  0750  0877               	movf	??i1_flashUpdate+1,w
  7435  0751  00F3               	movwf	i1flashWriteByte@data+1
  7436  0752  3186  264B  3187   	fcall	i1_flashWriteByte
  7437  0755  3001               	movlw	1
  7438  0756  07F8               	addwf	i1flashUpdate@i,f
  7439  0757  3000               	movlw	0
  7440  0758  3DF9               	addwfc	i1flashUpdate@i+1,f
  7441  0759  2F3B               	goto	L3
  7442  075A                     __end_ofi1_flashUpdate:	
  7443                           
  7444                           	psect	text41
  7445  064B                     __ptext41:	
  7446 ;; *************** function i1_flashWriteByte *****************
  7447 ;; Defined at:
  7448 ;;		line 8 in file "flash.c"
  7449 ;; Parameters:    Size  Location     Type
  7450 ;;  offset          2    0[COMMON] unsigned int 
  7451 ;;  data            2    2[COMMON] unsigned int 
  7452 ;; Auto vars:     Size  Location     Type
  7453 ;;  flashWriteBy    2    4[COMMON] unsigned int 
  7454 ;; Return value:  Size  Location     Type
  7455 ;;                  1    wreg      void 
  7456 ;; Registers used:
  7457 ;;		wreg, status,2, status,0
  7458 ;; Tracked objects:
  7459 ;;		On entry : 0/0
  7460 ;;		On exit  : 0/0
  7461 ;;		Unchanged: 0/0
  7462 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7463 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7464 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7465 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7466 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7467 ;;Total ram usage:        6 bytes
  7468 ;; Hardware stack levels used:    1
  7469 ;; This function calls:
  7470 ;;		Nothing
  7471 ;; This function is called by:
  7472 ;;		i1_flashUpdate
  7473 ;; This function uses a non-reentrant model
  7474 ;;
  7475                           
  7476                           
  7477                           ;psect for function i1_flashWriteByte
  7478  064B                     i1_flashWriteByte:	
  7479                           
  7480                           ;flash.c: 10: unsigned int address;;flash.c: 12: INTCONbits.GIE = 0;
  7481                           
  7482                           ;incstack = 0
  7483                           ; Regs used in i1_flashWriteByte: [wreg+status,2+status,0]
  7484  064B  138B               	bcf	11,7	;volatile
  7485                           
  7486                           ;flash.c: 15: PMCON1 = 0x00;
  7487  064C  0031               	movlb	17	; select bank17
  7488  064D  0195               	clrf	21	;volsfr
  7489                           
  7490                           ;flash.c: 17: address = (0x2000U - 32) + offset;
  7491  064E  0870               	movf	i1flashWriteByte@offset,w
  7492  064F  3EE0               	addlw	224
  7493  0650  00F4               	movwf	i1flashWriteByte@address
  7494  0651  301F               	movlw	31
  7495  0652  3D71               	addwfc	i1flashWriteByte@offset+1,w
  7496  0653  00F5               	movwf	i1flashWriteByte@address+1
  7497                           
  7498                           ;flash.c: 18: PMADRL = (char) (address >> 0);
  7499  0654  0874               	movf	i1flashWriteByte@address,w
  7500  0655  0091               	movwf	17	;volatile
  7501                           
  7502                           ;flash.c: 19: PMADRH = (char) (address >> 8);
  7503  0656  0875               	movf	i1flashWriteByte@address+1,w
  7504  0657  0092               	movwf	18	;volatile
  7505                           
  7506                           ;flash.c: 21: PMCON1bits.FREE = 1;
  7507  0658  1615               	bsf	21,4	;volsfr
  7508                           
  7509                           ;flash.c: 22: PMCON1bits.WREN = 1;
  7510  0659  1515               	bsf	21,2	;volsfr
  7511                           
  7512                           ;flash.c: 24: PMCON2 = 0x55;
  7513  065A  3055               	movlw	85
  7514  065B  0096               	movwf	22	;volsfr
  7515                           
  7516                           ;flash.c: 25: PMCON2 = 0xAA;
  7517  065C  30AA               	movlw	170
  7518  065D  0096               	movwf	22	;volsfr
  7519                           
  7520                           ;flash.c: 27: PMCON1bits.WR = 1;
  7521  065E  1495               	bsf	21,1	;volsfr
  7522                           
  7523                           ;flash.c: 29: __nop();
  7524  065F  0000               	nop
  7525                           
  7526                           ;flash.c: 30: __nop();
  7527  0660  0000               	nop
  7528                           
  7529                           ;flash.c: 32: PMCON1bits.WREN = 0;
  7530  0661  0031               	movlb	17	; select bank17
  7531  0662  1115               	bcf	21,2	;volsfr
  7532                           
  7533                           ;flash.c: 36: PMCON1 = 0x00;
  7534  0663  0195               	clrf	21	;volsfr
  7535                           
  7536                           ;flash.c: 38: PMADRL = (char) (address >> 0);
  7537  0664  0874               	movf	i1flashWriteByte@address,w
  7538  0665  0091               	movwf	17	;volatile
  7539                           
  7540                           ;flash.c: 39: PMADRH = (char) (address >> 8);
  7541  0666  0875               	movf	i1flashWriteByte@address+1,w
  7542  0667  0092               	movwf	18	;volatile
  7543                           
  7544                           ;flash.c: 41: PMCON1bits.FREE = 0;
  7545  0668  1215               	bcf	21,4	;volsfr
  7546                           
  7547                           ;flash.c: 42: PMCON1bits.LWLO = 1;
  7548  0669  1695               	bsf	21,5	;volsfr
  7549                           
  7550                           ;flash.c: 43: PMCON1bits.WREN = 1;
  7551  066A  1515               	bsf	21,2	;volsfr
  7552                           
  7553                           ;flash.c: 45: PMDATL = (data >> 0);
  7554  066B  0872               	movf	i1flashWriteByte@data,w
  7555  066C  0093               	movwf	19	;volatile
  7556                           
  7557                           ;flash.c: 46: PMDATH = (data >> 8);
  7558  066D  0873               	movf	i1flashWriteByte@data+1,w
  7559  066E  0094               	movwf	20	;volatile
  7560                           
  7561                           ;flash.c: 48: PMCON1bits.LWLO = 0;
  7562  066F  1295               	bcf	21,5	;volsfr
  7563                           
  7564                           ;flash.c: 50: PMCON2 = 0x55;
  7565  0670  3055               	movlw	85
  7566  0671  0096               	movwf	22	;volsfr
  7567                           
  7568                           ;flash.c: 51: PMCON2 = 0xAA;
  7569  0672  30AA               	movlw	170
  7570  0673  0096               	movwf	22	;volsfr
  7571                           
  7572                           ;flash.c: 53: PMCON1bits.WR = 1;
  7573  0674  1495               	bsf	21,1	;volsfr
  7574                           
  7575                           ;flash.c: 55: __nop();
  7576  0675  0000               	nop
  7577                           
  7578                           ;flash.c: 56: __nop();
  7579  0676  0000               	nop
  7580                           
  7581                           ;flash.c: 58: PMCON1bits.WREN = 0;
  7582  0677  0031               	movlb	17	; select bank17
  7583  0678  1115               	bcf	21,2	;volsfr
  7584                           
  7585                           ;flash.c: 61: INTCONbits.GIE = 1;
  7586  0679  178B               	bsf	11,7	;volatile
  7587  067A  0008               	return
  7588  067B                     __end_ofi1_flashWriteByte:	
  7589                           
  7590                           	psect	text42
  7591  0FCA                     __ptext42:	
  7592 ;; *************** function ___wmul *****************
  7593 ;; Defined at:
  7594 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\Umul16.c"
  7595 ;; Parameters:    Size  Location     Type
  7596 ;;  multiplier      2    0[COMMON] unsigned int 
  7597 ;;  multiplicand    2    2[COMMON] unsigned int 
  7598 ;; Auto vars:     Size  Location     Type
  7599 ;;  product         2    4[COMMON] unsigned int 
  7600 ;; Return value:  Size  Location     Type
  7601 ;;                  2    0[COMMON] unsigned int 
  7602 ;; Registers used:
  7603 ;;		wreg, status,2, status,0
  7604 ;; Tracked objects:
  7605 ;;		On entry : 0/0
  7606 ;;		On exit  : 0/0
  7607 ;;		Unchanged: 0/0
  7608 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7609 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7610 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7611 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7612 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7613 ;;Total ram usage:        6 bytes
  7614 ;; Hardware stack levels used:    1
  7615 ;; This function calls:
  7616 ;;		Nothing
  7617 ;; This function is called by:
  7618 ;;		_exception
  7619 ;; This function uses a non-reentrant model
  7620 ;;
  7621                           
  7622                           
  7623                           ;psect for function ___wmul
  7624  0FCA                     ___wmul:	
  7625                           
  7626                           ;incstack = 0
  7627                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  7628  0FCA  01F4               	clrf	___wmul@product
  7629  0FCB  01F5               	clrf	___wmul@product+1
  7630  0FCC                     i1l2049:	
  7631  0FCC  1C70               	btfss	___wmul@multiplier,0
  7632  0FCD  2FD2               	goto	i1l430
  7633  0FCE  0872               	movf	___wmul@multiplicand,w
  7634  0FCF  07F4               	addwf	___wmul@product,f
  7635  0FD0  0873               	movf	___wmul@multiplicand+1,w
  7636  0FD1  3DF5               	addwfc	___wmul@product+1,f
  7637  0FD2                     i1l430:	
  7638  0FD2  3001               	movlw	1
  7639  0FD3                     u95_25:	
  7640  0FD3  35F2               	lslf	___wmul@multiplicand,f
  7641  0FD4  0DF3               	rlf	___wmul@multiplicand+1,f
  7642  0FD5  0B89               	decfsz	9,f
  7643  0FD6  2FD3               	goto	u95_25
  7644  0FD7  3001               	movlw	1
  7645  0FD8                     u96_25:	
  7646  0FD8  36F1               	lsrf	___wmul@multiplier+1,f
  7647  0FD9  0CF0               	rrf	___wmul@multiplier,f
  7648  0FDA  0B89               	decfsz	9,f
  7649  0FDB  2FD8               	goto	u96_25
  7650  0FDC  0870               	movf	___wmul@multiplier,w
  7651  0FDD  0471               	iorwf	___wmul@multiplier+1,w
  7652  0FDE  1D03               	btfss	3,2
  7653  0FDF  2FCC               	goto	i1l2049
  7654  0FE0  0875               	movf	___wmul@product+1,w
  7655  0FE1  00F1               	movwf	?___wmul+1
  7656  0FE2  0874               	movf	___wmul@product,w
  7657  0FE3  00F0               	movwf	?___wmul
  7658  0FE4  0008               	return
  7659  0FE5                     __end_of___wmul:	
  7660  007E                     btemp	set	126	;btemp
  7661  007E                     int$flags	set	126
  7662  007E                     wtemp0	set	126


Data Sizes:
    Strings     34
    Constant    25
    Data        0
    BSS         89
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     57      79
    BANK1            80     66      68
    BANK2            80      0      65
    BANK3            80      0       0
    BANK4            80      0       0
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    strlen@s	PTR const unsigned char  size(1) Largest target is 33
		 -> packet.Message(BANK0[32]), packet.Message(BANK0[32]), NULL(NULL[0]), main@packet(BANK1[33]), 
		 -> loop@packet(BANK1[33]), 

    strlen@cp	PTR const unsigned char  size(1) Largest target is 33
		 -> packet.Message(BANK0[32]), packet.Message(BANK0[32]), NULL(NULL[0]), main@packet(BANK1[33]), 
		 -> loop@packet(BANK1[33]), 

    strcpy@from	PTR const unsigned char  size(2) Largest target is 4
		 -> STR_8(CODE[4]), 

    strcpy@to	PTR unsigned char  size(1) Largest target is 19
		 -> romData(BANK0[19]), 

    strcpy@cp	PTR unsigned char  size(1) Largest target is 19
		 -> romData(BANK0[19]), 

    strcmp@s2	PTR const unsigned char  size(1) Largest target is 33
		 -> RXPacket.Message(BANK2[32]), RXPacket(BANK2[33]), 

    strcmp@s1	PTR const unsigned char  size(1) Largest target is 33
		 -> packet.Message(BANK0[32]), packet.Message(BANK0[32]), NULL(NULL[0]), main@packet(BANK1[33]), 
		 -> loop@packet(BANK1[33]), 

    strcat@from	PTR const unsigned char  size(2) Largest target is 19
		 -> STR_9(CODE[5]), STR_7(CODE[5]), STR_6(CODE[4]), STR_5(CODE[5]), 
		 -> STR_4(CODE[5]), STR_3(CODE[4]), STR_2(CODE[2]), setMessage@tempString(BANK0[16]), 
		 -> STR_1(CODE[2]), romData.name(BANK0[16]), romData(BANK0[19]), 

    strcat@to	PTR unsigned char  size(1) Largest target is 33
		 -> main@packet(BANK1[33]), loop@packet(BANK1[33]), 

    strcat@cp	PTR unsigned char  size(1) Largest target is 33
		 -> main@packet(BANK1[33]), loop@packet(BANK1[33]), 

    memset@p1	PTR void  size(2) Largest target is 33
		 -> RXPacket(BANK2[33]), main@packet(BANK1[33]), loop@packet(BANK1[33]), 

    memset@p	PTR unsigned char  size(2) Largest target is 33
		 -> RXPacket(BANK2[33]), main@packet(BANK1[33]), loop@packet(BANK1[33]), 

    ultoa@buf	PTR unsigned char  size(1) Largest target is 16
		 -> setMessage@tempString(BANK0[16]), 

    sp__ltoa	PTR unsigned char  size(1) Largest target is 0

    nrf24l01SendPacket@Packet	PTR struct . size(1) Largest target is 33
		 -> main@packet(BANK1[33]), loop@packet(BANK1[33]), 

    sp__nrf24l01GetRXPacket	PTR struct . size(1) Largest target is 33
		 -> RXPacket(BANK2[33]), 

    TXPacket	PTR struct . size(1) Largest target is 33
		 -> NULL(NULL[0]), main@packet(BANK1[33]), loop@packet(BANK1[33]), 

    sp__strcpy	PTR unsigned char  size(1) Largest target is 19
		 -> romData(BANK0[19]), 

    sp__ultoa	PTR unsigned char  size(1) Largest target is 16
		 -> setMessage@tempString(BANK0[16]), 

    setMessage@topic	PTR const unsigned char  size(2) Largest target is 5
		 -> STR_9(CODE[5]), STR_7(CODE[5]), STR_6(CODE[4]), STR_5(CODE[5]), 
		 -> STR_4(CODE[5]), STR_3(CODE[4]), 

    sp__strcat	PTR unsigned char  size(1) Largest target is 33
		 -> main@packet(BANK1[33]), loop@packet(BANK1[33]), 

    sp__memset	PTR void  size(2) Largest target is 33
		 -> RXPacket(BANK2[33]), main@packet(BANK1[33]), loop@packet(BANK1[33]), 

    setMessage@packet	PTR struct . size(1) Largest target is 33
		 -> main@packet(BANK1[33]), loop@packet(BANK1[33]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    _ISR->_nrf24l01ISR
    _nrf24l01ISR->_exception
    _nrf24l01ReceivePacket->i1_memset
    _nrf24l01CheckACK->i1_nrf24l01SetRXMode
    i1_nrf24l01SetRXMode->i1_nrf24l01Send
    _exception->i1_flashUpdate
    i1_flashUpdate->i1_flashWriteByte

Critical Paths under _main in BANK0

    _main->_loop
    _nrf24l01Init->_nrf24l01InitRegisters
    _nrf24l01InitRegisters->_nrf24l01Send
    _loop->_setMessage
    _setMessage->_getADCValue
    _ultoa->___lldiv
    _nrf24l01SendPacket->_strlen
    _nrf24l01SetRXMode->_nrf24l01Send
    _getADCValue->___lldiv
    _flashUpdate->_flashWriteByte
    _flashRealod->_flashReadByte

Critical Paths under _ISR in BANK0

    _ISR->_nrf24l01ISR

Critical Paths under _main in BANK1

    _main->_loop

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                34    34      0   19670
                                             56 BANK0      1     1      0
                                             33 BANK1     33    33      0
                        _flashRealod
                        _flashUpdate
                               _loop
                       _nrf24l01Init
                 _nrf24l01SendPacket
                         _setMessage
                              _sleep
                             _strcpy
 ---------------------------------------------------------------------------------
 (1) _strcpy                                               5     3      2     200
                                              1 BANK0      5     3      2
 ---------------------------------------------------------------------------------
 (1) _nrf24l01Init                                         3     3      0    2094
                                             14 BANK0      3     3      0
                     _nrf24l01CEHigh
                      _nrf24l01CELow
              _nrf24l01InitRegisters
              _nrf24l01InterfaceInit
 ---------------------------------------------------------------------------------
 (2) _nrf24l01InterfaceInit                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _nrf24l01InitRegisters                               11    11      0    2072
                                              4 BANK0     10    10      0
                       _nrf24l01Send
 ---------------------------------------------------------------------------------
 (1) _loop                                                37    37      0    9207
                                             52 BANK0      4     4      0
                                              0 BANK1     33    33      0
                        _getADCValue
                 _nrf24l01SendPacket
                         _setMessage
                              _sleep
 ---------------------------------------------------------------------------------
 (1) _sleep                                                0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _setMessage                                          23    17      6    4831
                                             29 BANK0     23    17      6
                        _getADCValue (ARG)
                             _memset
                             _strcat
                              _ultoa
 ---------------------------------------------------------------------------------
 (2) _ultoa                                               13     7      6    1736
                                             15 BANK0     13     7      6
                            ___lldiv
                            ___llmod
 ---------------------------------------------------------------------------------
 (3) ___llmod                                             10     2      8     337
                                              1 BANK0     10     2      8
 ---------------------------------------------------------------------------------
 (2) _strcat                                               5     3      2     723
                                              1 BANK0      5     3      2
 ---------------------------------------------------------------------------------
 (2) _memset                                               8     2      6     565
                                              1 BANK0      8     2      6
 ---------------------------------------------------------------------------------
 (1) _nrf24l01SendPacket                                   4     4      0    2528
                                              9 BANK0      4     4      0
                   _enableInterrupts
                     _nrf24l01CEHigh
                      _nrf24l01CELow
                     _nrf24l01SPIEnd
                    _nrf24l01SPISend
                   _nrf24l01SPIStart
                  _nrf24l01SetRXMode
                             _strlen
 ---------------------------------------------------------------------------------
 (2) _strlen                                               8     6      2     126
                                              1 BANK0      8     6      2
 ---------------------------------------------------------------------------------
 (2) _nrf24l01SetRXMode                                    3     3      0    1947
                                              4 BANK0      3     3      0
                     _nrf24l01CEHigh
                      _nrf24l01CELow
                       _nrf24l01Send
 ---------------------------------------------------------------------------------
 (3) _nrf24l01Send                                         3     2      1    1813
                                              1 BANK0      3     2      1
                   _enableInterrupts
                     _nrf24l01SPIEnd
                    _nrf24l01SPISend
                   _nrf24l01SPIStart
 ---------------------------------------------------------------------------------
 (11) _nrf24l01SPIStart                                    0     0      0       0
                      _nrf24l01CSLow
 ---------------------------------------------------------------------------------
 (12) _nrf24l01CSLow                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (11) _nrf24l01SPISend                                     1     1      0      22
 ---------------------------------------------------------------------------------
 (11) _nrf24l01SPIEnd                                      0     0      0       0
                     _nrf24l01CSHigh
 ---------------------------------------------------------------------------------
 (12) _nrf24l01CSHigh                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (11) _enableInterrupts                                    1     1      0      22
 ---------------------------------------------------------------------------------
 (10) _nrf24l01CELow                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _nrf24l01CEHigh                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _getADCValue                                         14    10      4    1460
                                             15 BANK0     14    10      4
                            ___lldiv
                             ___lmul
 ---------------------------------------------------------------------------------
 (3) ___lmul                                              12     4      8     270
                                              1 BANK0     12     4      8
 ---------------------------------------------------------------------------------
 (3) ___lldiv                                             14     6      8     696
                                              1 BANK0     14     6      8
 ---------------------------------------------------------------------------------
 (1) _flashUpdate                                          4     4      0     423
                                              7 BANK0      4     4      0
                     _flashWriteByte
 ---------------------------------------------------------------------------------
 (2) _flashWriteByte                                       6     2      4     333
                                              1 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (1) _flashRealod                                          3     3      0     271
                                             10 BANK0      3     3      0
                      _flashReadByte
 ---------------------------------------------------------------------------------
 (2) _flashReadByte                                        9     7      2     181
                                              1 BANK0      9     7      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 12
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _ISR                                                  0     0      0    2570
                        _nrf24l01ISR
 ---------------------------------------------------------------------------------
 (8) _nrf24l01ISR                                          2     2      0    2570
                                             13 COMMON     1     1      0
                                              0 BANK0      1     1      0
                          _exception
                   _nrf24l01CheckACK
              _nrf24l01ReceivePacket
                     i1_nrf24l01Send
                i1_nrf24l01SetRXMode
 ---------------------------------------------------------------------------------
 (9) _nrf24l01ReceivePacket                                3     3      0     613
                                              8 COMMON     3     3      0
                     _nrf24l01CEHigh
                      _nrf24l01CELow
                     _nrf24l01SPIEnd
                    _nrf24l01SPISend
                   _nrf24l01SPIStart
                           i1_memset
                     i1_nrf24l01Send
 ---------------------------------------------------------------------------------
 (10) i1_memset                                            8     2      6     211
                                              0 COMMON     8     2      6
 ---------------------------------------------------------------------------------
 (9) _nrf24l01CheckACK                                     1     1      0     591
                                              7 COMMON     1     1      0
                             _strcmp
                i1_nrf24l01SetRXMode
 ---------------------------------------------------------------------------------
 (9) i1_nrf24l01SetRXMode                                  3     3      0     375
                                              4 COMMON     3     3      0
                     _nrf24l01CEHigh
                      _nrf24l01CELow
                     i1_nrf24l01Send
 ---------------------------------------------------------------------------------
 (10) i1_nrf24l01Send                                      3     2      1     241
                                              1 COMMON     3     2      1
                   _enableInterrupts
                     _nrf24l01SPIEnd
                    _nrf24l01SPISend
                   _nrf24l01SPIStart
 ---------------------------------------------------------------------------------
 (11) _nrf24l01SPIStart                                    0     0      0       0
                      _nrf24l01CSLow
 ---------------------------------------------------------------------------------
 (12) _nrf24l01CSLow                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (11) _nrf24l01SPISend                                     1     1      0      22
 ---------------------------------------------------------------------------------
 (11) _nrf24l01SPIEnd                                      0     0      0       0
                     _nrf24l01CSHigh
 ---------------------------------------------------------------------------------
 (12) _nrf24l01CSHigh                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (11) _enableInterrupts                                    1     1      0      22
 ---------------------------------------------------------------------------------
 (10) _nrf24l01CELow                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _nrf24l01CEHigh                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _strcmp                                              5     3      2     216
                                              0 COMMON     5     3      2
 ---------------------------------------------------------------------------------
 (9) _exception                                            3     3      0     589
                                             10 COMMON     3     3      0
                             ___wmul
                      i1_flashUpdate
 ---------------------------------------------------------------------------------
 (10) i1_flashUpdate                                       4     4      0     297
                                              6 COMMON     4     4      0
                   i1_flashWriteByte
 ---------------------------------------------------------------------------------
 (11) i1_flashWriteByte                                    6     2      4     207
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (10) ___wmul                                              6     2      4     270
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 12
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _flashRealod
     _flashReadByte
   _flashUpdate
     _flashWriteByte
   _loop
     _getADCValue
       ___lldiv
       ___lmul
     _nrf24l01SendPacket
       _enableInterrupts
       _nrf24l01CEHigh
       _nrf24l01CELow
       _nrf24l01SPIEnd
         _nrf24l01CSHigh
       _nrf24l01SPISend
       _nrf24l01SPIStart
         _nrf24l01CSLow
       _nrf24l01SetRXMode
         _nrf24l01CEHigh
         _nrf24l01CELow
         _nrf24l01Send
           _enableInterrupts
           _nrf24l01SPIEnd
             _nrf24l01CSHigh
           _nrf24l01SPISend
           _nrf24l01SPIStart
             _nrf24l01CSLow
       _strlen
     _setMessage
       _getADCValue (ARG)
         ___lldiv
         ___lmul
       _memset (ARG)
       _strcat (ARG)
       _ultoa (ARG)
         ___lldiv
         ___llmod
     _sleep
   _nrf24l01Init
     _nrf24l01CEHigh
     _nrf24l01CELow
     _nrf24l01InitRegisters
       _nrf24l01Send
         _enableInterrupts
         _nrf24l01SPIEnd
           _nrf24l01CSHigh
         _nrf24l01SPISend
         _nrf24l01SPIStart
           _nrf24l01CSLow
     _nrf24l01InterfaceInit
   _nrf24l01SendPacket
     _enableInterrupts
     _nrf24l01CEHigh
     _nrf24l01CELow
     _nrf24l01SPIEnd
       _nrf24l01CSHigh
     _nrf24l01SPISend
     _nrf24l01SPIStart
       _nrf24l01CSLow
     _nrf24l01SetRXMode
       _nrf24l01CEHigh
       _nrf24l01CELow
       _nrf24l01Send
         _enableInterrupts
         _nrf24l01SPIEnd
           _nrf24l01CSHigh
         _nrf24l01SPISend
         _nrf24l01SPIStart
           _nrf24l01CSLow
     _strlen
   _setMessage
     _getADCValue (ARG)
       ___lldiv
       ___lmul
     _memset (ARG)
     _strcat (ARG)
     _ultoa (ARG)
       ___lldiv
       ___llmod
   _sleep
   _strcpy

 _ISR (ROOT)
   _nrf24l01ISR
     _exception
       ___wmul
       i1_flashUpdate
         i1_flashWriteByte
     _nrf24l01CheckACK
       _strcmp
       i1_nrf24l01SetRXMode
         _nrf24l01CEHigh
         _nrf24l01CELow
         i1_nrf24l01Send
           _enableInterrupts
           _nrf24l01SPIEnd
             _nrf24l01CSHigh
           _nrf24l01SPISend
           _nrf24l01SPIStart
             _nrf24l01CSLow
     _nrf24l01ReceivePacket
       _nrf24l01CEHigh
       _nrf24l01CELow
       _nrf24l01SPIEnd
         _nrf24l01CSHigh
       _nrf24l01SPISend
       _nrf24l01SPIStart
         _nrf24l01CSLow
       i1_memset
       i1_nrf24l01Send
         _enableInterrupts
         _nrf24l01SPIEnd
           _nrf24l01CSHigh
         _nrf24l01SPISend
         _nrf24l01SPIStart
           _nrf24l01CSLow
     i1_nrf24l01Send
       _enableInterrupts
       _nrf24l01SPIEnd
         _nrf24l01CSHigh
       _nrf24l01SPISend
       _nrf24l01SPIStart
         _nrf24l01CSLow
     i1_nrf24l01SetRXMode
       _nrf24l01CEHigh
       _nrf24l01CELow
       i1_nrf24l01Send
         _enableInterrupts
         _nrf24l01SPIEnd
           _nrf24l01CSHigh
         _nrf24l01SPISend
         _nrf24l01SPIStart
           _nrf24l01CSLow

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      E       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     39      4F       5       98.8%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50     42      44       7       85.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0      41       9       81.3%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0       0      11        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0      E2      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0      E2      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V2.00 build -1524193055 
Symbol Table                                                                                   Fri Jul 13 17:40:43 2018

            flashReadByte@result 0026                     flashRealod@i 002B                      __CFG_CP$OFF 0000  
            ___wmul@multiplicand 0072              nrf24l01Send@command 0023  nrf24l01InitRegisters@isReciever 0070  
                    __CFG_LVP$ON 0000                              l311 01BA                              l215 0F78  
                            l208 036B                              l307 01AA                              l848 0332  
                   flashUpdate@i 0029                     __CFG_CPD$OFF 0000                              _ISR 0004  
                            u715 0436                              u805 04E7                              u735 0442  
                            u815 04F2                              u745 0456                              u755 0462  
                            u785 04CE                              u995 062F                              wreg 0009  
            nrf24l01SendPacket@i 002C                             ?_ISR 0070                   ??_nrf24l01Init 002E  
                           l2041 06F7                             l2009 02F4                             l2043 0702  
                           l2063 0624                             l2223 0370                             l2225 0364  
                           l2067 062E                             l2227 038E                             l2271 01FA  
                           l2263 01D5                             l2255 01AE                             l2267 01E5  
                           l2285 0210                             l2295 0220                             l2287 021C  
                 ??_nrf24l01Send 0022                             l1861 046C                             l1847 0433  
                           l1871 04CB                             l2559 07DC                             l1857 0461  
                           l1849 0441                             l1873 04D9                             l1881 04FC  
                           l2691 0FB6                             l1877 04F1                             l2925 02B9  
                           l2861 026F                             l1975 0575                             l1991 06B6  
                           l1995 06BE                             l1989 06AB                             l1999 02C7  
                           STR_1 1038                     __CFG_WDTE$ON 0000                             STR_2 1038  
                           STR_3 1030                             STR_4 1022                             STR_5 1018  
                           STR_6 1034                             STR_7 101D                             STR_8 102C  
                           STR_9 1027                             u1005 0636                             u1135 01F4  
                           u1507 0689                             u1517 069B                             u1527 01B6  
                           u1537 0201                             u1547 0218                             u1557 022E  
                           u1567 0555                             u1577 0567                             u1497 0250  
                           u1587 0572                             u1597 0361                             i1l94 07F7  
                           _WPUA 020C                             _WPUC 020E   __size_of_nrf24l01InterfaceInit 001C  
                   __CFG_WRT$OFF 0000                    __CFG_FCMEN$ON 0000    __end_of_nrf24l01InterfaceInit 07D6  
                           _main 0234                             _loop 0027                  ??_flashReadByte 0023  
                           fsr0h 0005                             fsr1h 0007                             indf0 0000  
                           fsr0l 0004                             indf1 0001                             fsr1l 0006  
                           btemp 007E   __size_of_nrf24l01ReceivePacket 004D                    __CFG_BORV$LOW 0000  
  __end_of_nrf24l01ReceivePacket 04C2                             start 000F                    __CFG_CSWEN$ON 0000  
                  __CFG_MCLRE$ON 0000      __size_of_nrf24l01SendPacket 0090                            ??_ISR 007E  
           __size_of_getADCValue 0088                  ??_nrf24l01CELow 0070                  ??_nrf24l01CSLow 0070  
                          ?_main 0070                            ?_loop 0070                  __end_of___lldiv 0475  
                __end_of___llmod 0505                   __CFG_DEBUG$OFF 0000                            i1l203 000D  
                          i1l430 0FD2                            i1l334 05DF           enableInterrupts@enable 0070  
                          u95_25 0FD3                            u96_25 0FD8                 i1_flashWriteByte 064B  
                     i1memset@p1 0070                   i1flashUpdate@i 0078              ___lmul@multiplicand 0025  
                  __CFG_PWRTE$ON 0000                            _sleep 0F78                            _ultoa 02BD  
                 __CFG_BOREN$OFF 0000                 _enableInterrupts 0F68                            status 0003  
                          wtemp0 007E      __end_ofi1_nrf24l01SetRXMode 05B3                 __end_ofi1_memset 0FB1  
              getADCValue@adcSum 0039                 _nrf24l01SPIStart 0F70                  __initialization 0011  
               _nrf24l01CheckACK 079A                     __end_of_main 02BD                     __end_of_loop 00FA  
               ??_nrf24l01CEHigh 0070                           ??_main 0058                           ??_loop 0054  
               ??_nrf24l01CSHigh 0070                 ??_nrf24l01SPIEnd 0070           __size_ofi1_flashUpdate 0021  
       __size_of_nrf24l01SPISend 000D                 ___llmod@dividend 0025                           _ADRESH 009C  
                         _ADRESL 009B                           ?_sleep 0070                           _ANSELA 018C  
                         _ANSELC 018E                           ?_ultoa 002F                 ??_flashWriteByte 0025  
                         i1l2033 06EB                           i1l2025 06CD                           i1l2107 05AC  
                         i1l2029 06D5                           i1l2049 0FCC                           _ODCONA 028C  
                         _ODCONC 028E                           i1l1811 07FC                           i1l2731 04A4  
                         i1l2735 04B4                           i1l2751 05C3                           i1l2739 04BC  
                         i1l2759 05D2                           i1l2769 05E0                           i1l2699 0F9D  
                         _INLVLA 038C                           _INLVLC 038E                           u160_27 058E  
                         u161_27 059F                           u162_27 05A9                           u163_27 0F74  
                         u164_27 0F62                           _PMADRH 0892                           _PMADRL 0891  
                         _PMDATH 0894                           _PMDATL 0893                           _PMCON1 0895  
                         _PMCON2 0896             __size_of_flashRealod 0020               flashWriteByte@data 0023  
           __size_of_flashUpdate 0023             __size_of_nrf24l01ISR 0036          nrf24l01SetRXMode@config 0025  
                         ___lmul 061B          nrf24l01SetRXMode@rxMode 0026                           ___wmul 0FCA  
                 __CFG_STVREN$ON 0000                        ??___lldiv 0029                        ??___llmod 0029  
           __end_of_nrf24l01Init 06A5             __end_of_nrf24l01Send 077A                           _memset 0FB1  
          _nrf24l01InitRegisters 00FA                           _strcat 06A5                           _strcmp 06CB  
                         _strcpy 07D6                           _strlen 06F1        i1nrf24l01SetRXMode@config 0075  
               __end_of_romArray 2000        i1nrf24l01SetRXMode@rxMode 0076                           ultoa@c 003A  
                         ultoa@v 0036               getADCValue@adcLoop 0038          __end_of__initialization 0023  
       nrf24l01SendPacket@Packet 002B               getADCValue@channel 0037                    i1_flashUpdate 0739  
             getADCValue@divider 002F                   __pcstackCOMMON 0070                    __end_of_sleep 0F81  
                  __end_of_ultoa 0346    nrf24l01InitRegisters@enRXAddr 002A                        ?i1_memset 0070  
                        ??_sleep 0021                          ??_ultoa 0035                       __pbssBANK0 0059  
                     __pbssBANK1 00E2                       __pbssBANK2 0120                ??_nrf24l01SPISend 0070  
             __size_of_exception 0018                   ?i1_flashUpdate 0070          __size_ofi1_nrf24l01Send 001B  
       __end_ofi1_flashWriteByte 067B                       __pmaintext 0234                          ?___lmul 0021  
                        ?___wmul 0070                  __CFG_PPS1WAY$ON 0000                _nrf24l01SetRXMode 0541  
         ?_nrf24l01InitRegisters 0070                       __pintentry 0004              nrf24l01SPISend@data 0070  
                        ?_memset 0021                   ___lmul@product 0029               ?_nrf24l01SetRXMode 0070  
       __end_of_enableInterrupts 0F70              __CFG_RSTOSC$HFINT32 0000                          ?_strcat 0021  
                        ?_strcmp 0070                          ?_strcpy 0021                          ?_strlen 0021  
          __end_of_n_ADDRESS_MUL 103B                       ??i1_memset 0076              ??_nrf24l01SetRXMode 0024  
       __end_of_nrf24l01SPIStart 0F78                          _SSP1BUF 0211         __end_of_nrf24l01CheckACK 07BA  
          _nrf24l01InterfaceInit 07BA            __end_of_flashReadByte 061B                 __p_romArray_text 1FE0  
     __end_of_nrf24l01SendPacket 0234                    ??_getADCValue 0033            __size_of_nrf24l01Init 002A  
          __size_of_nrf24l01Send 0020        __end_of_nrf24l01SetRXMode 057C            _nrf24l01ReceivePacket 0475  
                __size_of___lmul 0030                          ___lldiv 0422                  __size_of___wmul 001B  
                        ___llmod 04C2            __end_of_nrf24l01CELow 0F55                  __size_of_memset 0019  
          __end_of_nrf24l01CSLow 0F5B                          __ptext1 07D6                          __ptext2 067B  
                        __ptext3 07BA                          __ptext4 00FA                          __ptext5 0027  
                        __ptext6 0F78                          __ptext7 03CE                          __ptext8 02BD  
                        __ptext9 04C2                  __size_of_strcat 0026                  __size_of_strcmp 0026  
              __end_of_exception 0F99                  __size_of_strcpy 001B                  __size_of_strlen 0025  
                   __size_of_ISR 000B                          _counter 00E2          i1flashWriteByte@address 0074  
               _romArray_absaddr 1FE0                          _romData 005C                          clrloop0 0F5C  
           end_of_initialization 0023                     _nrf24l01Init 067B                       _setMessage 03CE  
                ??i1_flashUpdate 0076                     _nrf24l01Send 075A                          memset@c 0023  
                        memset@n 0025                          memset@p 0027                  ___lldiv@divisor 0021  
                ___lldiv@counter 002E                 setMessage@packet 0053     __size_ofi1_nrf24l01SetRXMode 0037  
                        strcmp@r 0073            i1nrf24l01Send@command 0073                          strlen@s 0027  
            __end_of_getADCValue 03CE                        _PORTAbits 000C                        _PORTCbits 000E  
                      _TRISAbits 008C                        _TRISCbits 008E                 nrf24l01Send@data 0021  
               __CFG_FEXTOSC$OFF 0000                    ??_flashRealod 002A                    ??_flashUpdate 0027  
                  ??_nrf24l01ISR 007D           ?_nrf24l01InterfaceInit 0070                   i1_nrf24l01Send 0FE5  
                     main@packet 00C1           ?_nrf24l01ReceivePacket 0070       __size_of_nrf24l01SetRXMode 003B  
                 __end_of___lmul 064B                   __end_of___wmul 0FE5                        i1memset@c 0072  
                      i1memset@n 0074                        i1memset@p 0076                   __end_of_memset 0FCA  
                 __end_of_strcat 06CB                   __end_of_strcmp 06F1                   __end_of_strcpy 07F1  
                 __end_of_strlen 0716              start_initialization 0011                  _nrf24l01SPISend 07F1  
                    __end_of_ISR 000F            flashWriteByte@address 0025                __size_ofi1_memset 0018  
        __size_of_nrf24l01CEHigh 0003          __size_of_nrf24l01CSHigh 0003                      ?_setMessage 003D  
         __end_ofi1_nrf24l01Send 1000          __size_of_nrf24l01SPIEnd 0007                  ___llmod@divisor 0021  
                ___llmod@counter 002A          ??_nrf24l01InitRegisters 0024                 __CFG_LPBOREN$OFF 0000  
              ?i1_flashWriteByte 0070              __end_of_flashRealod 079A                      _getADCValue 0346  
        __size_of_flashWriteByte 003C              __end_of_flashUpdate 0739                         ??___lmul 0029  
            __end_of_nrf24l01ISR 05E9             setMessage@tempString 0043                         ??___wmul 0074  
             ??i1_flashWriteByte 0074             __end_of_resetRomData 1013                         ??_memset 0027  
              ?_enableInterrupts 0070                         ??_strcat 0023                         ??_strcmp 0072  
                       ??_strcpy 0023                         ??_strlen 0023               ??_enableInterrupts 0070  
                      ___latbits 0002                    __pcstackBANK0 0020                    __pcstackBANK1 00A0  
              ?_nrf24l01SPIStart 0070                ?_nrf24l01CheckACK 0070               ??_nrf24l01SPIStart 0070  
             ??_nrf24l01CheckACK 0077                  ?i1_nrf24l01Send 0071                       loop@packet 00A0  
                       ?___lldiv 0021                         ?___llmod 0021             __end_of_n_ADDRESS_P0 1018  
        __end_of_nrf24l01SPISend 07FE               i1nrf24l01Send@data 0071        nrf24l01InitRegisters@enAA 002B  
            __size_of_setMessage 0054               _nrf24l01SendPacket 01A4                        _exception 0F81  
            ?_nrf24l01SendPacket 0070              i1_nrf24l01SetRXMode 057C                   __size_of_sleep 0009  
                 __size_of_ultoa 0089                      _flashRealod 077A                   ___wmul@product 0074  
         i1flashWriteByte@offset 0070                      _flashUpdate 0716                      _nrf24l01ISR 05B3  
                      clear_ram0 0F5B                         _PIE0bits 0090                         _PIR0bits 0010  
                      _romHolder 0120                        _sleepLoop 005A             ??_nrf24l01SendPacket 0029  
                setMessage@value 003F                  setMessage@topic 003D             ?i1_nrf24l01SetRXMode 0070  
                     _ADCON0bits 009D                       _ADCON1bits 009E                ___wmul@multiplier 0070  
                       _WPUAbits 020C                         i1_memset 0F99                         _RXPacket 0140  
         __size_of_flashReadByte 0032                         _TXPacket 0059                       ?_exception 0070  
                 _nrf24l01CEHigh 0F4F                ___lmul@multiplier 0021          ??_nrf24l01InterfaceInit 0021  
                 _nrf24l01CSHigh 0F55                nrf24l01ISR@status 0020                   _nrf24l01SPIEnd 0F61  
        ??_nrf24l01ReceivePacket 0078           __size_of_nrf24l01CELow 0003            __end_ofi1_flashUpdate 075A  
         __size_of_nrf24l01CSLow 0003             flashWriteByte@offset 0021                   _flashWriteByte 0505  
          ??i1_nrf24l01SetRXMode 0074                 __size_of___lldiv 0053                 __size_of___llmod 0043  
               ?_nrf24l01SPISend 0070                       _ANSELAbits 018C                       _ANSELCbits 018E  
                  _n_ADDRESS_MUL 103A                       strcat@from 0021           __end_of_nrf24l01CEHigh 0F52  
         __end_of_nrf24l01CSHigh 0F58                         __ptext10 06A5                         __ptext11 0FB1  
                       __ptext20 0505                         __ptext12 01A4                         __ptext21 077A  
                       __ptext13 06F1                         __ptext30 0F70                         __ptext22 05E9  
                       __ptext14 0541                         __ptext31 0F58                         __ptext15 075A  
                       __ptext40 0739                         __ptext32 07F1                         __ptext24 05B3  
                       __ptext16 0346                         __ptext41 064B                         __ptext33 0F61  
                       __ptext25 0475                         __ptext17 061B                         __ptext42 0FCA  
                       __ptext34 0F55                         __ptext26 0F99                         __ptext18 0422  
                       __ptext35 0F68                         __ptext27 079A                         __ptext19 0716  
                       __ptext36 0F52                         __ptext28 057C                         __ptext37 0F4F  
                       __ptext29 0FE5                         __ptext38 06CB                         __ptext39 0F81  
                   _SSP1CON1bits 0215           __end_of_nrf24l01SPIEnd 0F68                         _nrf24l01 005B  
                   _resetRomData 1000           nrf24l01Init@isReciever 0030                      _OSCCON1bits 0919  
                   ??_setMessage 0043                       strcpy@from 0021                    __size_of_main 0089  
                  __size_of_loop 00D3     nrf24l01InitRegisters@channel 0025           __end_of_flashWriteByte 0541  
   nrf24l01InitRegisters@feature 0027               exception@exception 007C                       _RC0PPSbits 0EA0  
                       _romArray 1FE0                    _flashReadByte 05E9     nrf24l01InitRegisters@rfSetup 0028  
                     _RC1PPSbits 0EA1                     ?_getADCValue 002F                       _RC2PPSbits 0EA2  
 __size_of_nrf24l01InitRegisters 00AA    __end_of_nrf24l01InitRegisters 01A4                         int$flags 007E  
   nrf24l01InitRegisters@setupAW 0026                     _SSP1STATbits 0214           nrf24l01ReceivePacket@i 007A  
                  _nrf24l01CELow 0F52                    _nrf24l01CSLow 0F58               __end_of_setMessage 0422  
                     _INTCONbits 000B        __size_ofi1_flashWriteByte 0030                  ?_nrf24l01CEHigh 0070  
                     _FVRCONbits 0117                 ??i1_nrf24l01Send 0072                      ??_exception 007A  
                ?_nrf24l01CSHigh 0070                   __pstringtext10 1034                   __pstringtext11 1038  
                 __pstringtext12 0000                         memset@p1 0021                        ultoa@base 0033  
                ?_nrf24l01SPIEnd 0070                         intlevel1 0000                     _n_ADDRESS_P0 1013  
      __size_of_enableInterrupts 0008                       _PMCON1bits 0895                 ___lldiv@dividend 0025  
              __CFG_CLKOUTEN$OFF 0000                  ?_flashWriteByte 0021                   ?_flashReadByte 0021  
           i1flashWriteByte@data 0072      nrf24l01InitRegisters@config 002D        __size_of_nrf24l01SPIStart 0008  
      __size_of_nrf24l01CheckACK 0020      nrf24l01InitRegisters@status 0029       nrf24l01ReceivePacket@width 0079  
                 ?_nrf24l01CELow 0070                    __pstringtext1 1000                    __pstringtext2 1013  
                  __pstringtext3 103A                    __pstringtext4 1018                    __pstringtext5 101D  
                  __pstringtext6 1022                    __pstringtext7 1027                    __pstringtext8 102C  
                  __pstringtext9 1030                   ?_nrf24l01CSLow 0070                         ultoa@buf 003B  
                       ultoa@val 002F       nrf24l01InitRegisters@DynPD 002C                         strcat@cp 0024  
                       strcat@to 0025                         strcmp@s1 0074                         strcmp@s2 0070  
               ___lldiv@quotient 002A                         strcpy@cp 0025                         strlen@cp 0028  
                       strcpy@to 0024                       _WDTCONbits 0097                    ?_nrf24l01Init 0070  
                  ?_nrf24l01Send 0021                     ?_flashRealod 0070                       _STATUSbits 0003  
           flashReadByte@address 0028                     ?_flashUpdate 0070                     ?_nrf24l01ISR 0070  
            flashReadByte@offset 0021  
