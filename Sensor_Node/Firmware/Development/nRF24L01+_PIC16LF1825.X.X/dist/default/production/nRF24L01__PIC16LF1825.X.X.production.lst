

Microchip Technology PIC LITE Macro Assembler V2.00 build -1524193055 
                                                                                               Thu Jul 12 14:24:37 2018

Microchip Technology Omniscient Code Generator v2.00 (Free mode) build 20180527130849
     1                           	processor	16LF18325
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	stringtext1,global,class=STRCODE,delta=2
     5                           	psect	stringtext2,global,class=STRCODE,delta=2
     6                           	psect	stringtext3,global,class=STRCODE,delta=2
     7                           	psect	_romArray_text,global,class=STRCODE,delta=2
     8                           	psect	stringtext4,global,class=STRCODE,delta=2
     9                           	psect	stringtext5,global,class=STRCODE,delta=2
    10                           	psect	stringtext6,global,class=STRCODE,delta=2
    11                           	psect	stringtext7,global,class=STRCODE,delta=2
    12                           	psect	stringtext8,global,class=STRCODE,delta=2
    13                           	psect	stringtext9,global,class=STRCODE,delta=2
    14                           	psect	stringtext10,global,class=STRCODE,delta=2
    15                           	psect	stringtext11,global,class=STRCODE,delta=2
    16                           	psect	cinit,global,class=CODE,merge=1,delta=2
    17                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    18                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    19                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    20                           	psect	clrtext,global,class=CODE,delta=2
    21                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    22                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    23                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    24                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    25                           	psect	text1,local,class=CODE,merge=1,delta=2
    26                           	psect	text2,local,class=CODE,merge=1,delta=2
    27                           	psect	text3,local,class=CODE,merge=1,delta=2
    28                           	psect	text4,local,class=CODE,merge=1,delta=2
    29                           	psect	text5,local,class=CODE,merge=1,delta=2,group=2
    30                           	psect	text6,local,class=CODE,merge=1,delta=2,group=1
    31                           	psect	text7,local,class=CODE,merge=1,delta=2,group=1
    32                           	psect	text8,local,class=CODE,merge=1,delta=2,group=2
    33                           	psect	text9,local,class=CODE,merge=1,delta=2
    34                           	psect	text10,local,class=CODE,merge=1,delta=2
    35                           	psect	text11,local,class=CODE,merge=1,delta=2
    36                           	psect	text12,local,class=CODE,merge=1,delta=2
    37                           	psect	text13,local,class=CODE,merge=1,delta=2
    38                           	psect	text14,local,class=CODE,merge=1,delta=2,group=1
    39                           	psect	text15,local,class=CODE,merge=1,delta=2,group=1
    40                           	psect	text16,local,class=CODE,merge=1,delta=2
    41                           	psect	text17,local,class=CODE,merge=1,delta=2
    42                           	psect	text18,local,class=CODE,merge=1,delta=2
    43                           	psect	text19,local,class=CODE,merge=1,delta=2
    44                           	psect	intentry,global,class=CODE,delta=2
    45                           	psect	text21,local,class=CODE,merge=1,delta=2
    46                           	psect	text22,local,class=CODE,merge=1,delta=2
    47                           	psect	text23,local,class=CODE,merge=1,delta=2,group=2
    48                           	psect	text24,local,class=CODE,merge=1,delta=2
    49                           	psect	text25,local,class=CODE,merge=1,delta=2,group=2
    50                           	psect	text26,local,class=CODE,merge=1,delta=2
    51                           	psect	text27,local,class=CODE,merge=1,delta=2
    52                           	psect	text28,local,class=CODE,merge=1,delta=2
    53                           	psect	text29,local,class=CODE,merge=1,delta=2
    54                           	psect	text30,local,class=CODE,merge=1,delta=2
    55                           	psect	text31,local,class=CODE,merge=1,delta=2
    56                           	psect	text32,local,class=CODE,merge=1,delta=2
    57                           	psect	text33,local,class=CODE,merge=1,delta=2
    58                           	psect	text34,local,class=CODE,merge=1,delta=2
    59                           	psect	text35,local,class=CODE,merge=1,delta=2
    60                           	psect	text36,local,class=CODE,merge=1,delta=2
    61                           	psect	text37,local,class=CODE,merge=1,delta=2,group=2
    62                           	psect	text38,local,class=CODE,merge=1,delta=2
    63                           	psect	text39,local,class=CODE,merge=1,delta=2
    64                           	psect	text40,local,class=CODE,merge=1,delta=2
    65                           	psect	text41,local,class=CODE,merge=1,delta=2,group=1
    66                           	dabs	1,0x7E,2
    67  0000                     
    68                           ; Version 2.00
    69                           ; Generated 27/05/2018 GMT
    70                           ; 
    71                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
    72                           ; All rights reserved.
    73                           ; 
    74                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    75                           ; 
    76                           ; Redistribution and use in source and binary forms, with or without modification, are
    77                           ; permitted provided that the following conditions are met:
    78                           ; 
    79                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    80                           ;        conditions and the following disclaimer.
    81                           ; 
    82                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    83                           ;        of conditions and the following disclaimer in the documentation and/or other
    84                           ;        materials provided with the distribution.
    85                           ; 
    86                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    87                           ;        software without specific prior written permission.
    88                           ; 
    89                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    90                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    91                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    92                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    93                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    94                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    95                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    96                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    97                           ; 
    98                           ; 
    99                           ; Code-generator required, PIC16LF18325 Definitions
   100                           ; 
   101                           ; SFR Addresses
   102  0000                     	;# 
   103  0001                     	;# 
   104  0002                     	;# 
   105  0003                     	;# 
   106  0004                     	;# 
   107  0005                     	;# 
   108  0006                     	;# 
   109  0007                     	;# 
   110  0008                     	;# 
   111  0009                     	;# 
   112  000A                     	;# 
   113  000B                     	;# 
   114  000C                     	;# 
   115  000E                     	;# 
   116  0010                     	;# 
   117  0011                     	;# 
   118  0012                     	;# 
   119  0013                     	;# 
   120  0014                     	;# 
   121  0015                     	;# 
   122  0015                     	;# 
   123  0016                     	;# 
   124  0016                     	;# 
   125  0017                     	;# 
   126  0018                     	;# 
   127  0019                     	;# 
   128  0019                     	;# 
   129  001A                     	;# 
   130  001B                     	;# 
   131  001C                     	;# 
   132  001D                     	;# 
   133  001E                     	;# 
   134  001F                     	;# 
   135  008C                     	;# 
   136  008E                     	;# 
   137  0090                     	;# 
   138  0091                     	;# 
   139  0092                     	;# 
   140  0093                     	;# 
   141  0094                     	;# 
   142  0097                     	;# 
   143  009B                     	;# 
   144  009B                     	;# 
   145  009C                     	;# 
   146  009D                     	;# 
   147  009E                     	;# 
   148  009F                     	;# 
   149  010C                     	;# 
   150  010E                     	;# 
   151  0111                     	;# 
   152  0112                     	;# 
   153  0113                     	;# 
   154  0114                     	;# 
   155  0115                     	;# 
   156  0116                     	;# 
   157  0117                     	;# 
   158  0118                     	;# 
   159  0119                     	;# 
   160  018C                     	;# 
   161  018E                     	;# 
   162  0199                     	;# 
   163  0199                     	;# 
   164  0199                     	;# 
   165  019A                     	;# 
   166  019A                     	;# 
   167  019A                     	;# 
   168  019B                     	;# 
   169  019B                     	;# 
   170  019B                     	;# 
   171  019B                     	;# 
   172  019B                     	;# 
   173  019C                     	;# 
   174  019C                     	;# 
   175  019C                     	;# 
   176  019D                     	;# 
   177  019D                     	;# 
   178  019D                     	;# 
   179  019E                     	;# 
   180  019E                     	;# 
   181  019E                     	;# 
   182  019F                     	;# 
   183  019F                     	;# 
   184  019F                     	;# 
   185  019F                     	;# 
   186  019F                     	;# 
   187  020C                     	;# 
   188  020E                     	;# 
   189  0211                     	;# 
   190  0211                     	;# 
   191  0212                     	;# 
   192  0212                     	;# 
   193  0213                     	;# 
   194  0213                     	;# 
   195  0214                     	;# 
   196  0214                     	;# 
   197  0215                     	;# 
   198  0215                     	;# 
   199  0215                     	;# 
   200  0215                     	;# 
   201  0216                     	;# 
   202  0216                     	;# 
   203  0217                     	;# 
   204  0217                     	;# 
   205  0219                     	;# 
   206  021A                     	;# 
   207  021B                     	;# 
   208  021C                     	;# 
   209  021D                     	;# 
   210  021D                     	;# 
   211  021E                     	;# 
   212  021F                     	;# 
   213  028C                     	;# 
   214  028E                     	;# 
   215  0291                     	;# 
   216  0291                     	;# 
   217  0292                     	;# 
   218  0293                     	;# 
   219  0294                     	;# 
   220  0295                     	;# 
   221  0295                     	;# 
   222  0296                     	;# 
   223  0297                     	;# 
   224  0298                     	;# 
   225  029F                     	;# 
   226  030C                     	;# 
   227  030E                     	;# 
   228  0311                     	;# 
   229  0311                     	;# 
   230  0312                     	;# 
   231  0313                     	;# 
   232  0314                     	;# 
   233  0315                     	;# 
   234  0315                     	;# 
   235  0316                     	;# 
   236  0317                     	;# 
   237  0318                     	;# 
   238  038C                     	;# 
   239  038E                     	;# 
   240  0391                     	;# 
   241  0392                     	;# 
   242  0393                     	;# 
   243  0397                     	;# 
   244  0398                     	;# 
   245  0399                     	;# 
   246  039A                     	;# 
   247  039C                     	;# 
   248  039D                     	;# 
   249  039E                     	;# 
   250  039F                     	;# 
   251  0411                     	;# 
   252  0411                     	;# 
   253  0412                     	;# 
   254  0413                     	;# 
   255  0414                     	;# 
   256  0415                     	;# 
   257  0416                     	;# 
   258  0417                     	;# 
   259  0418                     	;# 
   260  0418                     	;# 
   261  0419                     	;# 
   262  041A                     	;# 
   263  041B                     	;# 
   264  041C                     	;# 
   265  041D                     	;# 
   266  041E                     	;# 
   267  041F                     	;# 
   268  0498                     	;# 
   269  0498                     	;# 
   270  0499                     	;# 
   271  049A                     	;# 
   272  049B                     	;# 
   273  049B                     	;# 
   274  049C                     	;# 
   275  049D                     	;# 
   276  049E                     	;# 
   277  049F                     	;# 
   278  0617                     	;# 
   279  0618                     	;# 
   280  0619                     	;# 
   281  0619                     	;# 
   282  061A                     	;# 
   283  061B                     	;# 
   284  061C                     	;# 
   285  061C                     	;# 
   286  061F                     	;# 
   287  0691                     	;# 
   288  0692                     	;# 
   289  0693                     	;# 
   290  0694                     	;# 
   291  0695                     	;# 
   292  0696                     	;# 
   293  0697                     	;# 
   294  0698                     	;# 
   295  0699                     	;# 
   296  0711                     	;# 
   297  0712                     	;# 
   298  0713                     	;# 
   299  0714                     	;# 
   300  0715                     	;# 
   301  0716                     	;# 
   302  0717                     	;# 
   303  0718                     	;# 
   304  0719                     	;# 
   305  0891                     	;# 
   306  0891                     	;# 
   307  0891                     	;# 
   308  0891                     	;# 
   309  0891                     	;# 
   310  0891                     	;# 
   311  0892                     	;# 
   312  0892                     	;# 
   313  0892                     	;# 
   314  0893                     	;# 
   315  0893                     	;# 
   316  0893                     	;# 
   317  0893                     	;# 
   318  0893                     	;# 
   319  0893                     	;# 
   320  0894                     	;# 
   321  0894                     	;# 
   322  0894                     	;# 
   323  0895                     	;# 
   324  0895                     	;# 
   325  0895                     	;# 
   326  0896                     	;# 
   327  0896                     	;# 
   328  0896                     	;# 
   329  089B                     	;# 
   330  0911                     	;# 
   331  0912                     	;# 
   332  0913                     	;# 
   333  0914                     	;# 
   334  0915                     	;# 
   335  0916                     	;# 
   336  0918                     	;# 
   337  0919                     	;# 
   338  091A                     	;# 
   339  091B                     	;# 
   340  091C                     	;# 
   341  091D                     	;# 
   342  091E                     	;# 
   343  091F                     	;# 
   344  0E0F                     	;# 
   345  0E10                     	;# 
   346  0E11                     	;# 
   347  0E12                     	;# 
   348  0E13                     	;# 
   349  0E14                     	;# 
   350  0E15                     	;# 
   351  0E16                     	;# 
   352  0E17                     	;# 
   353  0E18                     	;# 
   354  0E19                     	;# 
   355  0E1A                     	;# 
   356  0E1B                     	;# 
   357  0E1C                     	;# 
   358  0E1D                     	;# 
   359  0E1E                     	;# 
   360  0E1F                     	;# 
   361  0E20                     	;# 
   362  0E21                     	;# 
   363  0E22                     	;# 
   364  0E24                     	;# 
   365  0E25                     	;# 
   366  0E28                     	;# 
   367  0E29                     	;# 
   368  0E2A                     	;# 
   369  0E2B                     	;# 
   370  0E2C                     	;# 
   371  0E2D                     	;# 
   372  0E2E                     	;# 
   373  0E2F                     	;# 
   374  0E90                     	;# 
   375  0E91                     	;# 
   376  0E92                     	;# 
   377  0E94                     	;# 
   378  0E95                     	;# 
   379  0EA0                     	;# 
   380  0EA1                     	;# 
   381  0EA2                     	;# 
   382  0EA3                     	;# 
   383  0EA4                     	;# 
   384  0EA5                     	;# 
   385  0F0F                     	;# 
   386  0F10                     	;# 
   387  0F11                     	;# 
   388  0F12                     	;# 
   389  0F13                     	;# 
   390  0F14                     	;# 
   391  0F15                     	;# 
   392  0F16                     	;# 
   393  0F17                     	;# 
   394  0F18                     	;# 
   395  0F19                     	;# 
   396  0F1A                     	;# 
   397  0F1B                     	;# 
   398  0F1C                     	;# 
   399  0F1D                     	;# 
   400  0F1E                     	;# 
   401  0F1F                     	;# 
   402  0F20                     	;# 
   403  0F21                     	;# 
   404  0F22                     	;# 
   405  0F23                     	;# 
   406  0F24                     	;# 
   407  0F25                     	;# 
   408  0F26                     	;# 
   409  0F27                     	;# 
   410  0F28                     	;# 
   411  0F29                     	;# 
   412  0F2A                     	;# 
   413  0F2B                     	;# 
   414  0F2C                     	;# 
   415  0F2D                     	;# 
   416  0F2E                     	;# 
   417  0F2F                     	;# 
   418  0F30                     	;# 
   419  0F31                     	;# 
   420  0F32                     	;# 
   421  0F33                     	;# 
   422  0F34                     	;# 
   423  0F35                     	;# 
   424  0F36                     	;# 
   425  0F37                     	;# 
   426  0FE4                     	;# 
   427  0FE5                     	;# 
   428  0FE6                     	;# 
   429  0FE7                     	;# 
   430  0FE8                     	;# 
   431  0FE9                     	;# 
   432  0FEA                     	;# 
   433  0FEB                     	;# 
   434  0FED                     	;# 
   435  0FEE                     	;# 
   436  0FEF                     	;# 
   437  0000                     	;# 
   438  0001                     	;# 
   439  0002                     	;# 
   440  0003                     	;# 
   441  0004                     	;# 
   442  0005                     	;# 
   443  0006                     	;# 
   444  0007                     	;# 
   445  0008                     	;# 
   446  0009                     	;# 
   447  000A                     	;# 
   448  000B                     	;# 
   449  000C                     	;# 
   450  000E                     	;# 
   451  0010                     	;# 
   452  0011                     	;# 
   453  0012                     	;# 
   454  0013                     	;# 
   455  0014                     	;# 
   456  0015                     	;# 
   457  0015                     	;# 
   458  0016                     	;# 
   459  0016                     	;# 
   460  0017                     	;# 
   461  0018                     	;# 
   462  0019                     	;# 
   463  0019                     	;# 
   464  001A                     	;# 
   465  001B                     	;# 
   466  001C                     	;# 
   467  001D                     	;# 
   468  001E                     	;# 
   469  001F                     	;# 
   470  008C                     	;# 
   471  008E                     	;# 
   472  0090                     	;# 
   473  0091                     	;# 
   474  0092                     	;# 
   475  0093                     	;# 
   476  0094                     	;# 
   477  0097                     	;# 
   478  009B                     	;# 
   479  009B                     	;# 
   480  009C                     	;# 
   481  009D                     	;# 
   482  009E                     	;# 
   483  009F                     	;# 
   484  010C                     	;# 
   485  010E                     	;# 
   486  0111                     	;# 
   487  0112                     	;# 
   488  0113                     	;# 
   489  0114                     	;# 
   490  0115                     	;# 
   491  0116                     	;# 
   492  0117                     	;# 
   493  0118                     	;# 
   494  0119                     	;# 
   495  018C                     	;# 
   496  018E                     	;# 
   497  0199                     	;# 
   498  0199                     	;# 
   499  0199                     	;# 
   500  019A                     	;# 
   501  019A                     	;# 
   502  019A                     	;# 
   503  019B                     	;# 
   504  019B                     	;# 
   505  019B                     	;# 
   506  019B                     	;# 
   507  019B                     	;# 
   508  019C                     	;# 
   509  019C                     	;# 
   510  019C                     	;# 
   511  019D                     	;# 
   512  019D                     	;# 
   513  019D                     	;# 
   514  019E                     	;# 
   515  019E                     	;# 
   516  019E                     	;# 
   517  019F                     	;# 
   518  019F                     	;# 
   519  019F                     	;# 
   520  019F                     	;# 
   521  019F                     	;# 
   522  020C                     	;# 
   523  020E                     	;# 
   524  0211                     	;# 
   525  0211                     	;# 
   526  0212                     	;# 
   527  0212                     	;# 
   528  0213                     	;# 
   529  0213                     	;# 
   530  0214                     	;# 
   531  0214                     	;# 
   532  0215                     	;# 
   533  0215                     	;# 
   534  0215                     	;# 
   535  0215                     	;# 
   536  0216                     	;# 
   537  0216                     	;# 
   538  0217                     	;# 
   539  0217                     	;# 
   540  0219                     	;# 
   541  021A                     	;# 
   542  021B                     	;# 
   543  021C                     	;# 
   544  021D                     	;# 
   545  021D                     	;# 
   546  021E                     	;# 
   547  021F                     	;# 
   548  028C                     	;# 
   549  028E                     	;# 
   550  0291                     	;# 
   551  0291                     	;# 
   552  0292                     	;# 
   553  0293                     	;# 
   554  0294                     	;# 
   555  0295                     	;# 
   556  0295                     	;# 
   557  0296                     	;# 
   558  0297                     	;# 
   559  0298                     	;# 
   560  029F                     	;# 
   561  030C                     	;# 
   562  030E                     	;# 
   563  0311                     	;# 
   564  0311                     	;# 
   565  0312                     	;# 
   566  0313                     	;# 
   567  0314                     	;# 
   568  0315                     	;# 
   569  0315                     	;# 
   570  0316                     	;# 
   571  0317                     	;# 
   572  0318                     	;# 
   573  038C                     	;# 
   574  038E                     	;# 
   575  0391                     	;# 
   576  0392                     	;# 
   577  0393                     	;# 
   578  0397                     	;# 
   579  0398                     	;# 
   580  0399                     	;# 
   581  039A                     	;# 
   582  039C                     	;# 
   583  039D                     	;# 
   584  039E                     	;# 
   585  039F                     	;# 
   586  0411                     	;# 
   587  0411                     	;# 
   588  0412                     	;# 
   589  0413                     	;# 
   590  0414                     	;# 
   591  0415                     	;# 
   592  0416                     	;# 
   593  0417                     	;# 
   594  0418                     	;# 
   595  0418                     	;# 
   596  0419                     	;# 
   597  041A                     	;# 
   598  041B                     	;# 
   599  041C                     	;# 
   600  041D                     	;# 
   601  041E                     	;# 
   602  041F                     	;# 
   603  0498                     	;# 
   604  0498                     	;# 
   605  0499                     	;# 
   606  049A                     	;# 
   607  049B                     	;# 
   608  049B                     	;# 
   609  049C                     	;# 
   610  049D                     	;# 
   611  049E                     	;# 
   612  049F                     	;# 
   613  0617                     	;# 
   614  0618                     	;# 
   615  0619                     	;# 
   616  0619                     	;# 
   617  061A                     	;# 
   618  061B                     	;# 
   619  061C                     	;# 
   620  061C                     	;# 
   621  061F                     	;# 
   622  0691                     	;# 
   623  0692                     	;# 
   624  0693                     	;# 
   625  0694                     	;# 
   626  0695                     	;# 
   627  0696                     	;# 
   628  0697                     	;# 
   629  0698                     	;# 
   630  0699                     	;# 
   631  0711                     	;# 
   632  0712                     	;# 
   633  0713                     	;# 
   634  0714                     	;# 
   635  0715                     	;# 
   636  0716                     	;# 
   637  0717                     	;# 
   638  0718                     	;# 
   639  0719                     	;# 
   640  0891                     	;# 
   641  0891                     	;# 
   642  0891                     	;# 
   643  0891                     	;# 
   644  0891                     	;# 
   645  0891                     	;# 
   646  0892                     	;# 
   647  0892                     	;# 
   648  0892                     	;# 
   649  0893                     	;# 
   650  0893                     	;# 
   651  0893                     	;# 
   652  0893                     	;# 
   653  0893                     	;# 
   654  0893                     	;# 
   655  0894                     	;# 
   656  0894                     	;# 
   657  0894                     	;# 
   658  0895                     	;# 
   659  0895                     	;# 
   660  0895                     	;# 
   661  0896                     	;# 
   662  0896                     	;# 
   663  0896                     	;# 
   664  089B                     	;# 
   665  0911                     	;# 
   666  0912                     	;# 
   667  0913                     	;# 
   668  0914                     	;# 
   669  0915                     	;# 
   670  0916                     	;# 
   671  0918                     	;# 
   672  0919                     	;# 
   673  091A                     	;# 
   674  091B                     	;# 
   675  091C                     	;# 
   676  091D                     	;# 
   677  091E                     	;# 
   678  091F                     	;# 
   679  0E0F                     	;# 
   680  0E10                     	;# 
   681  0E11                     	;# 
   682  0E12                     	;# 
   683  0E13                     	;# 
   684  0E14                     	;# 
   685  0E15                     	;# 
   686  0E16                     	;# 
   687  0E17                     	;# 
   688  0E18                     	;# 
   689  0E19                     	;# 
   690  0E1A                     	;# 
   691  0E1B                     	;# 
   692  0E1C                     	;# 
   693  0E1D                     	;# 
   694  0E1E                     	;# 
   695  0E1F                     	;# 
   696  0E20                     	;# 
   697  0E21                     	;# 
   698  0E22                     	;# 
   699  0E24                     	;# 
   700  0E25                     	;# 
   701  0E28                     	;# 
   702  0E29                     	;# 
   703  0E2A                     	;# 
   704  0E2B                     	;# 
   705  0E2C                     	;# 
   706  0E2D                     	;# 
   707  0E2E                     	;# 
   708  0E2F                     	;# 
   709  0E90                     	;# 
   710  0E91                     	;# 
   711  0E92                     	;# 
   712  0E94                     	;# 
   713  0E95                     	;# 
   714  0EA0                     	;# 
   715  0EA1                     	;# 
   716  0EA2                     	;# 
   717  0EA3                     	;# 
   718  0EA4                     	;# 
   719  0EA5                     	;# 
   720  0F0F                     	;# 
   721  0F10                     	;# 
   722  0F11                     	;# 
   723  0F12                     	;# 
   724  0F13                     	;# 
   725  0F14                     	;# 
   726  0F15                     	;# 
   727  0F16                     	;# 
   728  0F17                     	;# 
   729  0F18                     	;# 
   730  0F19                     	;# 
   731  0F1A                     	;# 
   732  0F1B                     	;# 
   733  0F1C                     	;# 
   734  0F1D                     	;# 
   735  0F1E                     	;# 
   736  0F1F                     	;# 
   737  0F20                     	;# 
   738  0F21                     	;# 
   739  0F22                     	;# 
   740  0F23                     	;# 
   741  0F24                     	;# 
   742  0F25                     	;# 
   743  0F26                     	;# 
   744  0F27                     	;# 
   745  0F28                     	;# 
   746  0F29                     	;# 
   747  0F2A                     	;# 
   748  0F2B                     	;# 
   749  0F2C                     	;# 
   750  0F2D                     	;# 
   751  0F2E                     	;# 
   752  0F2F                     	;# 
   753  0F30                     	;# 
   754  0F31                     	;# 
   755  0F32                     	;# 
   756  0F33                     	;# 
   757  0F34                     	;# 
   758  0F35                     	;# 
   759  0F36                     	;# 
   760  0F37                     	;# 
   761  0FE4                     	;# 
   762  0FE5                     	;# 
   763  0FE6                     	;# 
   764  0FE7                     	;# 
   765  0FE8                     	;# 
   766  0FE9                     	;# 
   767  0FEA                     	;# 
   768  0FEB                     	;# 
   769  0FED                     	;# 
   770  0FEE                     	;# 
   771  0FEF                     	;# 
   772  0000                     	;# 
   773  0001                     	;# 
   774  0002                     	;# 
   775  0003                     	;# 
   776  0004                     	;# 
   777  0005                     	;# 
   778  0006                     	;# 
   779  0007                     	;# 
   780  0008                     	;# 
   781  0009                     	;# 
   782  000A                     	;# 
   783  000B                     	;# 
   784  000C                     	;# 
   785  000E                     	;# 
   786  0010                     	;# 
   787  0011                     	;# 
   788  0012                     	;# 
   789  0013                     	;# 
   790  0014                     	;# 
   791  0015                     	;# 
   792  0015                     	;# 
   793  0016                     	;# 
   794  0016                     	;# 
   795  0017                     	;# 
   796  0018                     	;# 
   797  0019                     	;# 
   798  0019                     	;# 
   799  001A                     	;# 
   800  001B                     	;# 
   801  001C                     	;# 
   802  001D                     	;# 
   803  001E                     	;# 
   804  001F                     	;# 
   805  008C                     	;# 
   806  008E                     	;# 
   807  0090                     	;# 
   808  0091                     	;# 
   809  0092                     	;# 
   810  0093                     	;# 
   811  0094                     	;# 
   812  0097                     	;# 
   813  009B                     	;# 
   814  009B                     	;# 
   815  009C                     	;# 
   816  009D                     	;# 
   817  009E                     	;# 
   818  009F                     	;# 
   819  010C                     	;# 
   820  010E                     	;# 
   821  0111                     	;# 
   822  0112                     	;# 
   823  0113                     	;# 
   824  0114                     	;# 
   825  0115                     	;# 
   826  0116                     	;# 
   827  0117                     	;# 
   828  0118                     	;# 
   829  0119                     	;# 
   830  018C                     	;# 
   831  018E                     	;# 
   832  0199                     	;# 
   833  0199                     	;# 
   834  0199                     	;# 
   835  019A                     	;# 
   836  019A                     	;# 
   837  019A                     	;# 
   838  019B                     	;# 
   839  019B                     	;# 
   840  019B                     	;# 
   841  019B                     	;# 
   842  019B                     	;# 
   843  019C                     	;# 
   844  019C                     	;# 
   845  019C                     	;# 
   846  019D                     	;# 
   847  019D                     	;# 
   848  019D                     	;# 
   849  019E                     	;# 
   850  019E                     	;# 
   851  019E                     	;# 
   852  019F                     	;# 
   853  019F                     	;# 
   854  019F                     	;# 
   855  019F                     	;# 
   856  019F                     	;# 
   857  020C                     	;# 
   858  020E                     	;# 
   859  0211                     	;# 
   860  0211                     	;# 
   861  0212                     	;# 
   862  0212                     	;# 
   863  0213                     	;# 
   864  0213                     	;# 
   865  0214                     	;# 
   866  0214                     	;# 
   867  0215                     	;# 
   868  0215                     	;# 
   869  0215                     	;# 
   870  0215                     	;# 
   871  0216                     	;# 
   872  0216                     	;# 
   873  0217                     	;# 
   874  0217                     	;# 
   875  0219                     	;# 
   876  021A                     	;# 
   877  021B                     	;# 
   878  021C                     	;# 
   879  021D                     	;# 
   880  021D                     	;# 
   881  021E                     	;# 
   882  021F                     	;# 
   883  028C                     	;# 
   884  028E                     	;# 
   885  0291                     	;# 
   886  0291                     	;# 
   887  0292                     	;# 
   888  0293                     	;# 
   889  0294                     	;# 
   890  0295                     	;# 
   891  0295                     	;# 
   892  0296                     	;# 
   893  0297                     	;# 
   894  0298                     	;# 
   895  029F                     	;# 
   896  030C                     	;# 
   897  030E                     	;# 
   898  0311                     	;# 
   899  0311                     	;# 
   900  0312                     	;# 
   901  0313                     	;# 
   902  0314                     	;# 
   903  0315                     	;# 
   904  0315                     	;# 
   905  0316                     	;# 
   906  0317                     	;# 
   907  0318                     	;# 
   908  038C                     	;# 
   909  038E                     	;# 
   910  0391                     	;# 
   911  0392                     	;# 
   912  0393                     	;# 
   913  0397                     	;# 
   914  0398                     	;# 
   915  0399                     	;# 
   916  039A                     	;# 
   917  039C                     	;# 
   918  039D                     	;# 
   919  039E                     	;# 
   920  039F                     	;# 
   921  0411                     	;# 
   922  0411                     	;# 
   923  0412                     	;# 
   924  0413                     	;# 
   925  0414                     	;# 
   926  0415                     	;# 
   927  0416                     	;# 
   928  0417                     	;# 
   929  0418                     	;# 
   930  0418                     	;# 
   931  0419                     	;# 
   932  041A                     	;# 
   933  041B                     	;# 
   934  041C                     	;# 
   935  041D                     	;# 
   936  041E                     	;# 
   937  041F                     	;# 
   938  0498                     	;# 
   939  0498                     	;# 
   940  0499                     	;# 
   941  049A                     	;# 
   942  049B                     	;# 
   943  049B                     	;# 
   944  049C                     	;# 
   945  049D                     	;# 
   946  049E                     	;# 
   947  049F                     	;# 
   948  0617                     	;# 
   949  0618                     	;# 
   950  0619                     	;# 
   951  0619                     	;# 
   952  061A                     	;# 
   953  061B                     	;# 
   954  061C                     	;# 
   955  061C                     	;# 
   956  061F                     	;# 
   957  0691                     	;# 
   958  0692                     	;# 
   959  0693                     	;# 
   960  0694                     	;# 
   961  0695                     	;# 
   962  0696                     	;# 
   963  0697                     	;# 
   964  0698                     	;# 
   965  0699                     	;# 
   966  0711                     	;# 
   967  0712                     	;# 
   968  0713                     	;# 
   969  0714                     	;# 
   970  0715                     	;# 
   971  0716                     	;# 
   972  0717                     	;# 
   973  0718                     	;# 
   974  0719                     	;# 
   975  0891                     	;# 
   976  0891                     	;# 
   977  0891                     	;# 
   978  0891                     	;# 
   979  0891                     	;# 
   980  0891                     	;# 
   981  0892                     	;# 
   982  0892                     	;# 
   983  0892                     	;# 
   984  0893                     	;# 
   985  0893                     	;# 
   986  0893                     	;# 
   987  0893                     	;# 
   988  0893                     	;# 
   989  0893                     	;# 
   990  0894                     	;# 
   991  0894                     	;# 
   992  0894                     	;# 
   993  0895                     	;# 
   994  0895                     	;# 
   995  0895                     	;# 
   996  0896                     	;# 
   997  0896                     	;# 
   998  0896                     	;# 
   999  089B                     	;# 
  1000  0911                     	;# 
  1001  0912                     	;# 
  1002  0913                     	;# 
  1003  0914                     	;# 
  1004  0915                     	;# 
  1005  0916                     	;# 
  1006  0918                     	;# 
  1007  0919                     	;# 
  1008  091A                     	;# 
  1009  091B                     	;# 
  1010  091C                     	;# 
  1011  091D                     	;# 
  1012  091E                     	;# 
  1013  091F                     	;# 
  1014  0E0F                     	;# 
  1015  0E10                     	;# 
  1016  0E11                     	;# 
  1017  0E12                     	;# 
  1018  0E13                     	;# 
  1019  0E14                     	;# 
  1020  0E15                     	;# 
  1021  0E16                     	;# 
  1022  0E17                     	;# 
  1023  0E18                     	;# 
  1024  0E19                     	;# 
  1025  0E1A                     	;# 
  1026  0E1B                     	;# 
  1027  0E1C                     	;# 
  1028  0E1D                     	;# 
  1029  0E1E                     	;# 
  1030  0E1F                     	;# 
  1031  0E20                     	;# 
  1032  0E21                     	;# 
  1033  0E22                     	;# 
  1034  0E24                     	;# 
  1035  0E25                     	;# 
  1036  0E28                     	;# 
  1037  0E29                     	;# 
  1038  0E2A                     	;# 
  1039  0E2B                     	;# 
  1040  0E2C                     	;# 
  1041  0E2D                     	;# 
  1042  0E2E                     	;# 
  1043  0E2F                     	;# 
  1044  0E90                     	;# 
  1045  0E91                     	;# 
  1046  0E92                     	;# 
  1047  0E94                     	;# 
  1048  0E95                     	;# 
  1049  0EA0                     	;# 
  1050  0EA1                     	;# 
  1051  0EA2                     	;# 
  1052  0EA3                     	;# 
  1053  0EA4                     	;# 
  1054  0EA5                     	;# 
  1055  0F0F                     	;# 
  1056  0F10                     	;# 
  1057  0F11                     	;# 
  1058  0F12                     	;# 
  1059  0F13                     	;# 
  1060  0F14                     	;# 
  1061  0F15                     	;# 
  1062  0F16                     	;# 
  1063  0F17                     	;# 
  1064  0F18                     	;# 
  1065  0F19                     	;# 
  1066  0F1A                     	;# 
  1067  0F1B                     	;# 
  1068  0F1C                     	;# 
  1069  0F1D                     	;# 
  1070  0F1E                     	;# 
  1071  0F1F                     	;# 
  1072  0F20                     	;# 
  1073  0F21                     	;# 
  1074  0F22                     	;# 
  1075  0F23                     	;# 
  1076  0F24                     	;# 
  1077  0F25                     	;# 
  1078  0F26                     	;# 
  1079  0F27                     	;# 
  1080  0F28                     	;# 
  1081  0F29                     	;# 
  1082  0F2A                     	;# 
  1083  0F2B                     	;# 
  1084  0F2C                     	;# 
  1085  0F2D                     	;# 
  1086  0F2E                     	;# 
  1087  0F2F                     	;# 
  1088  0F30                     	;# 
  1089  0F31                     	;# 
  1090  0F32                     	;# 
  1091  0F33                     	;# 
  1092  0F34                     	;# 
  1093  0F35                     	;# 
  1094  0F36                     	;# 
  1095  0F37                     	;# 
  1096  0FE4                     	;# 
  1097  0FE5                     	;# 
  1098  0FE6                     	;# 
  1099  0FE7                     	;# 
  1100  0FE8                     	;# 
  1101  0FE9                     	;# 
  1102  0FEA                     	;# 
  1103  0FEB                     	;# 
  1104  0FED                     	;# 
  1105  0FEE                     	;# 
  1106  0FEF                     	;# 
  1107  0000                     	;# 
  1108  0001                     	;# 
  1109  0002                     	;# 
  1110  0003                     	;# 
  1111  0004                     	;# 
  1112  0005                     	;# 
  1113  0006                     	;# 
  1114  0007                     	;# 
  1115  0008                     	;# 
  1116  0009                     	;# 
  1117  000A                     	;# 
  1118  000B                     	;# 
  1119  000C                     	;# 
  1120  000E                     	;# 
  1121  0010                     	;# 
  1122  0011                     	;# 
  1123  0012                     	;# 
  1124  0013                     	;# 
  1125  0014                     	;# 
  1126  0015                     	;# 
  1127  0015                     	;# 
  1128  0016                     	;# 
  1129  0016                     	;# 
  1130  0017                     	;# 
  1131  0018                     	;# 
  1132  0019                     	;# 
  1133  0019                     	;# 
  1134  001A                     	;# 
  1135  001B                     	;# 
  1136  001C                     	;# 
  1137  001D                     	;# 
  1138  001E                     	;# 
  1139  001F                     	;# 
  1140  008C                     	;# 
  1141  008E                     	;# 
  1142  0090                     	;# 
  1143  0091                     	;# 
  1144  0092                     	;# 
  1145  0093                     	;# 
  1146  0094                     	;# 
  1147  0097                     	;# 
  1148  009B                     	;# 
  1149  009B                     	;# 
  1150  009C                     	;# 
  1151  009D                     	;# 
  1152  009E                     	;# 
  1153  009F                     	;# 
  1154  010C                     	;# 
  1155  010E                     	;# 
  1156  0111                     	;# 
  1157  0112                     	;# 
  1158  0113                     	;# 
  1159  0114                     	;# 
  1160  0115                     	;# 
  1161  0116                     	;# 
  1162  0117                     	;# 
  1163  0118                     	;# 
  1164  0119                     	;# 
  1165  018C                     	;# 
  1166  018E                     	;# 
  1167  0199                     	;# 
  1168  0199                     	;# 
  1169  0199                     	;# 
  1170  019A                     	;# 
  1171  019A                     	;# 
  1172  019A                     	;# 
  1173  019B                     	;# 
  1174  019B                     	;# 
  1175  019B                     	;# 
  1176  019B                     	;# 
  1177  019B                     	;# 
  1178  019C                     	;# 
  1179  019C                     	;# 
  1180  019C                     	;# 
  1181  019D                     	;# 
  1182  019D                     	;# 
  1183  019D                     	;# 
  1184  019E                     	;# 
  1185  019E                     	;# 
  1186  019E                     	;# 
  1187  019F                     	;# 
  1188  019F                     	;# 
  1189  019F                     	;# 
  1190  019F                     	;# 
  1191  019F                     	;# 
  1192  020C                     	;# 
  1193  020E                     	;# 
  1194  0211                     	;# 
  1195  0211                     	;# 
  1196  0212                     	;# 
  1197  0212                     	;# 
  1198  0213                     	;# 
  1199  0213                     	;# 
  1200  0214                     	;# 
  1201  0214                     	;# 
  1202  0215                     	;# 
  1203  0215                     	;# 
  1204  0215                     	;# 
  1205  0215                     	;# 
  1206  0216                     	;# 
  1207  0216                     	;# 
  1208  0217                     	;# 
  1209  0217                     	;# 
  1210  0219                     	;# 
  1211  021A                     	;# 
  1212  021B                     	;# 
  1213  021C                     	;# 
  1214  021D                     	;# 
  1215  021D                     	;# 
  1216  021E                     	;# 
  1217  021F                     	;# 
  1218  028C                     	;# 
  1219  028E                     	;# 
  1220  0291                     	;# 
  1221  0291                     	;# 
  1222  0292                     	;# 
  1223  0293                     	;# 
  1224  0294                     	;# 
  1225  0295                     	;# 
  1226  0295                     	;# 
  1227  0296                     	;# 
  1228  0297                     	;# 
  1229  0298                     	;# 
  1230  029F                     	;# 
  1231  030C                     	;# 
  1232  030E                     	;# 
  1233  0311                     	;# 
  1234  0311                     	;# 
  1235  0312                     	;# 
  1236  0313                     	;# 
  1237  0314                     	;# 
  1238  0315                     	;# 
  1239  0315                     	;# 
  1240  0316                     	;# 
  1241  0317                     	;# 
  1242  0318                     	;# 
  1243  038C                     	;# 
  1244  038E                     	;# 
  1245  0391                     	;# 
  1246  0392                     	;# 
  1247  0393                     	;# 
  1248  0397                     	;# 
  1249  0398                     	;# 
  1250  0399                     	;# 
  1251  039A                     	;# 
  1252  039C                     	;# 
  1253  039D                     	;# 
  1254  039E                     	;# 
  1255  039F                     	;# 
  1256  0411                     	;# 
  1257  0411                     	;# 
  1258  0412                     	;# 
  1259  0413                     	;# 
  1260  0414                     	;# 
  1261  0415                     	;# 
  1262  0416                     	;# 
  1263  0417                     	;# 
  1264  0418                     	;# 
  1265  0418                     	;# 
  1266  0419                     	;# 
  1267  041A                     	;# 
  1268  041B                     	;# 
  1269  041C                     	;# 
  1270  041D                     	;# 
  1271  041E                     	;# 
  1272  041F                     	;# 
  1273  0498                     	;# 
  1274  0498                     	;# 
  1275  0499                     	;# 
  1276  049A                     	;# 
  1277  049B                     	;# 
  1278  049B                     	;# 
  1279  049C                     	;# 
  1280  049D                     	;# 
  1281  049E                     	;# 
  1282  049F                     	;# 
  1283  0617                     	;# 
  1284  0618                     	;# 
  1285  0619                     	;# 
  1286  0619                     	;# 
  1287  061A                     	;# 
  1288  061B                     	;# 
  1289  061C                     	;# 
  1290  061C                     	;# 
  1291  061F                     	;# 
  1292  0691                     	;# 
  1293  0692                     	;# 
  1294  0693                     	;# 
  1295  0694                     	;# 
  1296  0695                     	;# 
  1297  0696                     	;# 
  1298  0697                     	;# 
  1299  0698                     	;# 
  1300  0699                     	;# 
  1301  0711                     	;# 
  1302  0712                     	;# 
  1303  0713                     	;# 
  1304  0714                     	;# 
  1305  0715                     	;# 
  1306  0716                     	;# 
  1307  0717                     	;# 
  1308  0718                     	;# 
  1309  0719                     	;# 
  1310  0891                     	;# 
  1311  0891                     	;# 
  1312  0891                     	;# 
  1313  0891                     	;# 
  1314  0891                     	;# 
  1315  0891                     	;# 
  1316  0892                     	;# 
  1317  0892                     	;# 
  1318  0892                     	;# 
  1319  0893                     	;# 
  1320  0893                     	;# 
  1321  0893                     	;# 
  1322  0893                     	;# 
  1323  0893                     	;# 
  1324  0893                     	;# 
  1325  0894                     	;# 
  1326  0894                     	;# 
  1327  0894                     	;# 
  1328  0895                     	;# 
  1329  0895                     	;# 
  1330  0895                     	;# 
  1331  0896                     	;# 
  1332  0896                     	;# 
  1333  0896                     	;# 
  1334  089B                     	;# 
  1335  0911                     	;# 
  1336  0912                     	;# 
  1337  0913                     	;# 
  1338  0914                     	;# 
  1339  0915                     	;# 
  1340  0916                     	;# 
  1341  0918                     	;# 
  1342  0919                     	;# 
  1343  091A                     	;# 
  1344  091B                     	;# 
  1345  091C                     	;# 
  1346  091D                     	;# 
  1347  091E                     	;# 
  1348  091F                     	;# 
  1349  0E0F                     	;# 
  1350  0E10                     	;# 
  1351  0E11                     	;# 
  1352  0E12                     	;# 
  1353  0E13                     	;# 
  1354  0E14                     	;# 
  1355  0E15                     	;# 
  1356  0E16                     	;# 
  1357  0E17                     	;# 
  1358  0E18                     	;# 
  1359  0E19                     	;# 
  1360  0E1A                     	;# 
  1361  0E1B                     	;# 
  1362  0E1C                     	;# 
  1363  0E1D                     	;# 
  1364  0E1E                     	;# 
  1365  0E1F                     	;# 
  1366  0E20                     	;# 
  1367  0E21                     	;# 
  1368  0E22                     	;# 
  1369  0E24                     	;# 
  1370  0E25                     	;# 
  1371  0E28                     	;# 
  1372  0E29                     	;# 
  1373  0E2A                     	;# 
  1374  0E2B                     	;# 
  1375  0E2C                     	;# 
  1376  0E2D                     	;# 
  1377  0E2E                     	;# 
  1378  0E2F                     	;# 
  1379  0E90                     	;# 
  1380  0E91                     	;# 
  1381  0E92                     	;# 
  1382  0E94                     	;# 
  1383  0E95                     	;# 
  1384  0EA0                     	;# 
  1385  0EA1                     	;# 
  1386  0EA2                     	;# 
  1387  0EA3                     	;# 
  1388  0EA4                     	;# 
  1389  0EA5                     	;# 
  1390  0F0F                     	;# 
  1391  0F10                     	;# 
  1392  0F11                     	;# 
  1393  0F12                     	;# 
  1394  0F13                     	;# 
  1395  0F14                     	;# 
  1396  0F15                     	;# 
  1397  0F16                     	;# 
  1398  0F17                     	;# 
  1399  0F18                     	;# 
  1400  0F19                     	;# 
  1401  0F1A                     	;# 
  1402  0F1B                     	;# 
  1403  0F1C                     	;# 
  1404  0F1D                     	;# 
  1405  0F1E                     	;# 
  1406  0F1F                     	;# 
  1407  0F20                     	;# 
  1408  0F21                     	;# 
  1409  0F22                     	;# 
  1410  0F23                     	;# 
  1411  0F24                     	;# 
  1412  0F25                     	;# 
  1413  0F26                     	;# 
  1414  0F27                     	;# 
  1415  0F28                     	;# 
  1416  0F29                     	;# 
  1417  0F2A                     	;# 
  1418  0F2B                     	;# 
  1419  0F2C                     	;# 
  1420  0F2D                     	;# 
  1421  0F2E                     	;# 
  1422  0F2F                     	;# 
  1423  0F30                     	;# 
  1424  0F31                     	;# 
  1425  0F32                     	;# 
  1426  0F33                     	;# 
  1427  0F34                     	;# 
  1428  0F35                     	;# 
  1429  0F36                     	;# 
  1430  0F37                     	;# 
  1431  0FE4                     	;# 
  1432  0FE5                     	;# 
  1433  0FE6                     	;# 
  1434  0FE7                     	;# 
  1435  0FE8                     	;# 
  1436  0FE9                     	;# 
  1437  0FEA                     	;# 
  1438  0FEB                     	;# 
  1439  0FED                     	;# 
  1440  0FEE                     	;# 
  1441  0FEF                     	;# 
  1442  0000                     	;# 
  1443  0001                     	;# 
  1444  0002                     	;# 
  1445  0003                     	;# 
  1446  0004                     	;# 
  1447  0005                     	;# 
  1448  0006                     	;# 
  1449  0007                     	;# 
  1450  0008                     	;# 
  1451  0009                     	;# 
  1452  000A                     	;# 
  1453  000B                     	;# 
  1454  000C                     	;# 
  1455  000E                     	;# 
  1456  0010                     	;# 
  1457  0011                     	;# 
  1458  0012                     	;# 
  1459  0013                     	;# 
  1460  0014                     	;# 
  1461  0015                     	;# 
  1462  0015                     	;# 
  1463  0016                     	;# 
  1464  0016                     	;# 
  1465  0017                     	;# 
  1466  0018                     	;# 
  1467  0019                     	;# 
  1468  0019                     	;# 
  1469  001A                     	;# 
  1470  001B                     	;# 
  1471  001C                     	;# 
  1472  001D                     	;# 
  1473  001E                     	;# 
  1474  001F                     	;# 
  1475  008C                     	;# 
  1476  008E                     	;# 
  1477  0090                     	;# 
  1478  0091                     	;# 
  1479  0092                     	;# 
  1480  0093                     	;# 
  1481  0094                     	;# 
  1482  0097                     	;# 
  1483  009B                     	;# 
  1484  009B                     	;# 
  1485  009C                     	;# 
  1486  009D                     	;# 
  1487  009E                     	;# 
  1488  009F                     	;# 
  1489  010C                     	;# 
  1490  010E                     	;# 
  1491  0111                     	;# 
  1492  0112                     	;# 
  1493  0113                     	;# 
  1494  0114                     	;# 
  1495  0115                     	;# 
  1496  0116                     	;# 
  1497  0117                     	;# 
  1498  0118                     	;# 
  1499  0119                     	;# 
  1500  018C                     	;# 
  1501  018E                     	;# 
  1502  0199                     	;# 
  1503  0199                     	;# 
  1504  0199                     	;# 
  1505  019A                     	;# 
  1506  019A                     	;# 
  1507  019A                     	;# 
  1508  019B                     	;# 
  1509  019B                     	;# 
  1510  019B                     	;# 
  1511  019B                     	;# 
  1512  019B                     	;# 
  1513  019C                     	;# 
  1514  019C                     	;# 
  1515  019C                     	;# 
  1516  019D                     	;# 
  1517  019D                     	;# 
  1518  019D                     	;# 
  1519  019E                     	;# 
  1520  019E                     	;# 
  1521  019E                     	;# 
  1522  019F                     	;# 
  1523  019F                     	;# 
  1524  019F                     	;# 
  1525  019F                     	;# 
  1526  019F                     	;# 
  1527  020C                     	;# 
  1528  020E                     	;# 
  1529  0211                     	;# 
  1530  0211                     	;# 
  1531  0212                     	;# 
  1532  0212                     	;# 
  1533  0213                     	;# 
  1534  0213                     	;# 
  1535  0214                     	;# 
  1536  0214                     	;# 
  1537  0215                     	;# 
  1538  0215                     	;# 
  1539  0215                     	;# 
  1540  0215                     	;# 
  1541  0216                     	;# 
  1542  0216                     	;# 
  1543  0217                     	;# 
  1544  0217                     	;# 
  1545  0219                     	;# 
  1546  021A                     	;# 
  1547  021B                     	;# 
  1548  021C                     	;# 
  1549  021D                     	;# 
  1550  021D                     	;# 
  1551  021E                     	;# 
  1552  021F                     	;# 
  1553  028C                     	;# 
  1554  028E                     	;# 
  1555  0291                     	;# 
  1556  0291                     	;# 
  1557  0292                     	;# 
  1558  0293                     	;# 
  1559  0294                     	;# 
  1560  0295                     	;# 
  1561  0295                     	;# 
  1562  0296                     	;# 
  1563  0297                     	;# 
  1564  0298                     	;# 
  1565  029F                     	;# 
  1566  030C                     	;# 
  1567  030E                     	;# 
  1568  0311                     	;# 
  1569  0311                     	;# 
  1570  0312                     	;# 
  1571  0313                     	;# 
  1572  0314                     	;# 
  1573  0315                     	;# 
  1574  0315                     	;# 
  1575  0316                     	;# 
  1576  0317                     	;# 
  1577  0318                     	;# 
  1578  038C                     	;# 
  1579  038E                     	;# 
  1580  0391                     	;# 
  1581  0392                     	;# 
  1582  0393                     	;# 
  1583  0397                     	;# 
  1584  0398                     	;# 
  1585  0399                     	;# 
  1586  039A                     	;# 
  1587  039C                     	;# 
  1588  039D                     	;# 
  1589  039E                     	;# 
  1590  039F                     	;# 
  1591  0411                     	;# 
  1592  0411                     	;# 
  1593  0412                     	;# 
  1594  0413                     	;# 
  1595  0414                     	;# 
  1596  0415                     	;# 
  1597  0416                     	;# 
  1598  0417                     	;# 
  1599  0418                     	;# 
  1600  0418                     	;# 
  1601  0419                     	;# 
  1602  041A                     	;# 
  1603  041B                     	;# 
  1604  041C                     	;# 
  1605  041D                     	;# 
  1606  041E                     	;# 
  1607  041F                     	;# 
  1608  0498                     	;# 
  1609  0498                     	;# 
  1610  0499                     	;# 
  1611  049A                     	;# 
  1612  049B                     	;# 
  1613  049B                     	;# 
  1614  049C                     	;# 
  1615  049D                     	;# 
  1616  049E                     	;# 
  1617  049F                     	;# 
  1618  0617                     	;# 
  1619  0618                     	;# 
  1620  0619                     	;# 
  1621  0619                     	;# 
  1622  061A                     	;# 
  1623  061B                     	;# 
  1624  061C                     	;# 
  1625  061C                     	;# 
  1626  061F                     	;# 
  1627  0691                     	;# 
  1628  0692                     	;# 
  1629  0693                     	;# 
  1630  0694                     	;# 
  1631  0695                     	;# 
  1632  0696                     	;# 
  1633  0697                     	;# 
  1634  0698                     	;# 
  1635  0699                     	;# 
  1636  0711                     	;# 
  1637  0712                     	;# 
  1638  0713                     	;# 
  1639  0714                     	;# 
  1640  0715                     	;# 
  1641  0716                     	;# 
  1642  0717                     	;# 
  1643  0718                     	;# 
  1644  0719                     	;# 
  1645  0891                     	;# 
  1646  0891                     	;# 
  1647  0891                     	;# 
  1648  0891                     	;# 
  1649  0891                     	;# 
  1650  0891                     	;# 
  1651  0892                     	;# 
  1652  0892                     	;# 
  1653  0892                     	;# 
  1654  0893                     	;# 
  1655  0893                     	;# 
  1656  0893                     	;# 
  1657  0893                     	;# 
  1658  0893                     	;# 
  1659  0893                     	;# 
  1660  0894                     	;# 
  1661  0894                     	;# 
  1662  0894                     	;# 
  1663  0895                     	;# 
  1664  0895                     	;# 
  1665  0895                     	;# 
  1666  0896                     	;# 
  1667  0896                     	;# 
  1668  0896                     	;# 
  1669  089B                     	;# 
  1670  0911                     	;# 
  1671  0912                     	;# 
  1672  0913                     	;# 
  1673  0914                     	;# 
  1674  0915                     	;# 
  1675  0916                     	;# 
  1676  0918                     	;# 
  1677  0919                     	;# 
  1678  091A                     	;# 
  1679  091B                     	;# 
  1680  091C                     	;# 
  1681  091D                     	;# 
  1682  091E                     	;# 
  1683  091F                     	;# 
  1684  0E0F                     	;# 
  1685  0E10                     	;# 
  1686  0E11                     	;# 
  1687  0E12                     	;# 
  1688  0E13                     	;# 
  1689  0E14                     	;# 
  1690  0E15                     	;# 
  1691  0E16                     	;# 
  1692  0E17                     	;# 
  1693  0E18                     	;# 
  1694  0E19                     	;# 
  1695  0E1A                     	;# 
  1696  0E1B                     	;# 
  1697  0E1C                     	;# 
  1698  0E1D                     	;# 
  1699  0E1E                     	;# 
  1700  0E1F                     	;# 
  1701  0E20                     	;# 
  1702  0E21                     	;# 
  1703  0E22                     	;# 
  1704  0E24                     	;# 
  1705  0E25                     	;# 
  1706  0E28                     	;# 
  1707  0E29                     	;# 
  1708  0E2A                     	;# 
  1709  0E2B                     	;# 
  1710  0E2C                     	;# 
  1711  0E2D                     	;# 
  1712  0E2E                     	;# 
  1713  0E2F                     	;# 
  1714  0E90                     	;# 
  1715  0E91                     	;# 
  1716  0E92                     	;# 
  1717  0E94                     	;# 
  1718  0E95                     	;# 
  1719  0EA0                     	;# 
  1720  0EA1                     	;# 
  1721  0EA2                     	;# 
  1722  0EA3                     	;# 
  1723  0EA4                     	;# 
  1724  0EA5                     	;# 
  1725  0F0F                     	;# 
  1726  0F10                     	;# 
  1727  0F11                     	;# 
  1728  0F12                     	;# 
  1729  0F13                     	;# 
  1730  0F14                     	;# 
  1731  0F15                     	;# 
  1732  0F16                     	;# 
  1733  0F17                     	;# 
  1734  0F18                     	;# 
  1735  0F19                     	;# 
  1736  0F1A                     	;# 
  1737  0F1B                     	;# 
  1738  0F1C                     	;# 
  1739  0F1D                     	;# 
  1740  0F1E                     	;# 
  1741  0F1F                     	;# 
  1742  0F20                     	;# 
  1743  0F21                     	;# 
  1744  0F22                     	;# 
  1745  0F23                     	;# 
  1746  0F24                     	;# 
  1747  0F25                     	;# 
  1748  0F26                     	;# 
  1749  0F27                     	;# 
  1750  0F28                     	;# 
  1751  0F29                     	;# 
  1752  0F2A                     	;# 
  1753  0F2B                     	;# 
  1754  0F2C                     	;# 
  1755  0F2D                     	;# 
  1756  0F2E                     	;# 
  1757  0F2F                     	;# 
  1758  0F30                     	;# 
  1759  0F31                     	;# 
  1760  0F32                     	;# 
  1761  0F33                     	;# 
  1762  0F34                     	;# 
  1763  0F35                     	;# 
  1764  0F36                     	;# 
  1765  0F37                     	;# 
  1766  0FE4                     	;# 
  1767  0FE5                     	;# 
  1768  0FE6                     	;# 
  1769  0FE7                     	;# 
  1770  0FE8                     	;# 
  1771  0FE9                     	;# 
  1772  0FEA                     	;# 
  1773  0FEB                     	;# 
  1774  0FED                     	;# 
  1775  0FEE                     	;# 
  1776  0FEF                     	;# 
  1777  0000                     	;# 
  1778  0001                     	;# 
  1779  0002                     	;# 
  1780  0003                     	;# 
  1781  0004                     	;# 
  1782  0005                     	;# 
  1783  0006                     	;# 
  1784  0007                     	;# 
  1785  0008                     	;# 
  1786  0009                     	;# 
  1787  000A                     	;# 
  1788  000B                     	;# 
  1789  000C                     	;# 
  1790  000E                     	;# 
  1791  0010                     	;# 
  1792  0011                     	;# 
  1793  0012                     	;# 
  1794  0013                     	;# 
  1795  0014                     	;# 
  1796  0015                     	;# 
  1797  0015                     	;# 
  1798  0016                     	;# 
  1799  0016                     	;# 
  1800  0017                     	;# 
  1801  0018                     	;# 
  1802  0019                     	;# 
  1803  0019                     	;# 
  1804  001A                     	;# 
  1805  001B                     	;# 
  1806  001C                     	;# 
  1807  001D                     	;# 
  1808  001E                     	;# 
  1809  001F                     	;# 
  1810  008C                     	;# 
  1811  008E                     	;# 
  1812  0090                     	;# 
  1813  0091                     	;# 
  1814  0092                     	;# 
  1815  0093                     	;# 
  1816  0094                     	;# 
  1817  0097                     	;# 
  1818  009B                     	;# 
  1819  009B                     	;# 
  1820  009C                     	;# 
  1821  009D                     	;# 
  1822  009E                     	;# 
  1823  009F                     	;# 
  1824  010C                     	;# 
  1825  010E                     	;# 
  1826  0111                     	;# 
  1827  0112                     	;# 
  1828  0113                     	;# 
  1829  0114                     	;# 
  1830  0115                     	;# 
  1831  0116                     	;# 
  1832  0117                     	;# 
  1833  0118                     	;# 
  1834  0119                     	;# 
  1835  018C                     	;# 
  1836  018E                     	;# 
  1837  0199                     	;# 
  1838  0199                     	;# 
  1839  0199                     	;# 
  1840  019A                     	;# 
  1841  019A                     	;# 
  1842  019A                     	;# 
  1843  019B                     	;# 
  1844  019B                     	;# 
  1845  019B                     	;# 
  1846  019B                     	;# 
  1847  019B                     	;# 
  1848  019C                     	;# 
  1849  019C                     	;# 
  1850  019C                     	;# 
  1851  019D                     	;# 
  1852  019D                     	;# 
  1853  019D                     	;# 
  1854  019E                     	;# 
  1855  019E                     	;# 
  1856  019E                     	;# 
  1857  019F                     	;# 
  1858  019F                     	;# 
  1859  019F                     	;# 
  1860  019F                     	;# 
  1861  019F                     	;# 
  1862  020C                     	;# 
  1863  020E                     	;# 
  1864  0211                     	;# 
  1865  0211                     	;# 
  1866  0212                     	;# 
  1867  0212                     	;# 
  1868  0213                     	;# 
  1869  0213                     	;# 
  1870  0214                     	;# 
  1871  0214                     	;# 
  1872  0215                     	;# 
  1873  0215                     	;# 
  1874  0215                     	;# 
  1875  0215                     	;# 
  1876  0216                     	;# 
  1877  0216                     	;# 
  1878  0217                     	;# 
  1879  0217                     	;# 
  1880  0219                     	;# 
  1881  021A                     	;# 
  1882  021B                     	;# 
  1883  021C                     	;# 
  1884  021D                     	;# 
  1885  021D                     	;# 
  1886  021E                     	;# 
  1887  021F                     	;# 
  1888  028C                     	;# 
  1889  028E                     	;# 
  1890  0291                     	;# 
  1891  0291                     	;# 
  1892  0292                     	;# 
  1893  0293                     	;# 
  1894  0294                     	;# 
  1895  0295                     	;# 
  1896  0295                     	;# 
  1897  0296                     	;# 
  1898  0297                     	;# 
  1899  0298                     	;# 
  1900  029F                     	;# 
  1901  030C                     	;# 
  1902  030E                     	;# 
  1903  0311                     	;# 
  1904  0311                     	;# 
  1905  0312                     	;# 
  1906  0313                     	;# 
  1907  0314                     	;# 
  1908  0315                     	;# 
  1909  0315                     	;# 
  1910  0316                     	;# 
  1911  0317                     	;# 
  1912  0318                     	;# 
  1913  038C                     	;# 
  1914  038E                     	;# 
  1915  0391                     	;# 
  1916  0392                     	;# 
  1917  0393                     	;# 
  1918  0397                     	;# 
  1919  0398                     	;# 
  1920  0399                     	;# 
  1921  039A                     	;# 
  1922  039C                     	;# 
  1923  039D                     	;# 
  1924  039E                     	;# 
  1925  039F                     	;# 
  1926  0411                     	;# 
  1927  0411                     	;# 
  1928  0412                     	;# 
  1929  0413                     	;# 
  1930  0414                     	;# 
  1931  0415                     	;# 
  1932  0416                     	;# 
  1933  0417                     	;# 
  1934  0418                     	;# 
  1935  0418                     	;# 
  1936  0419                     	;# 
  1937  041A                     	;# 
  1938  041B                     	;# 
  1939  041C                     	;# 
  1940  041D                     	;# 
  1941  041E                     	;# 
  1942  041F                     	;# 
  1943  0498                     	;# 
  1944  0498                     	;# 
  1945  0499                     	;# 
  1946  049A                     	;# 
  1947  049B                     	;# 
  1948  049B                     	;# 
  1949  049C                     	;# 
  1950  049D                     	;# 
  1951  049E                     	;# 
  1952  049F                     	;# 
  1953  0617                     	;# 
  1954  0618                     	;# 
  1955  0619                     	;# 
  1956  0619                     	;# 
  1957  061A                     	;# 
  1958  061B                     	;# 
  1959  061C                     	;# 
  1960  061C                     	;# 
  1961  061F                     	;# 
  1962  0691                     	;# 
  1963  0692                     	;# 
  1964  0693                     	;# 
  1965  0694                     	;# 
  1966  0695                     	;# 
  1967  0696                     	;# 
  1968  0697                     	;# 
  1969  0698                     	;# 
  1970  0699                     	;# 
  1971  0711                     	;# 
  1972  0712                     	;# 
  1973  0713                     	;# 
  1974  0714                     	;# 
  1975  0715                     	;# 
  1976  0716                     	;# 
  1977  0717                     	;# 
  1978  0718                     	;# 
  1979  0719                     	;# 
  1980  0891                     	;# 
  1981  0891                     	;# 
  1982  0891                     	;# 
  1983  0891                     	;# 
  1984  0891                     	;# 
  1985  0891                     	;# 
  1986  0892                     	;# 
  1987  0892                     	;# 
  1988  0892                     	;# 
  1989  0893                     	;# 
  1990  0893                     	;# 
  1991  0893                     	;# 
  1992  0893                     	;# 
  1993  0893                     	;# 
  1994  0893                     	;# 
  1995  0894                     	;# 
  1996  0894                     	;# 
  1997  0894                     	;# 
  1998  0895                     	;# 
  1999  0895                     	;# 
  2000  0895                     	;# 
  2001  0896                     	;# 
  2002  0896                     	;# 
  2003  0896                     	;# 
  2004  089B                     	;# 
  2005  0911                     	;# 
  2006  0912                     	;# 
  2007  0913                     	;# 
  2008  0914                     	;# 
  2009  0915                     	;# 
  2010  0916                     	;# 
  2011  0918                     	;# 
  2012  0919                     	;# 
  2013  091A                     	;# 
  2014  091B                     	;# 
  2015  091C                     	;# 
  2016  091D                     	;# 
  2017  091E                     	;# 
  2018  091F                     	;# 
  2019  0E0F                     	;# 
  2020  0E10                     	;# 
  2021  0E11                     	;# 
  2022  0E12                     	;# 
  2023  0E13                     	;# 
  2024  0E14                     	;# 
  2025  0E15                     	;# 
  2026  0E16                     	;# 
  2027  0E17                     	;# 
  2028  0E18                     	;# 
  2029  0E19                     	;# 
  2030  0E1A                     	;# 
  2031  0E1B                     	;# 
  2032  0E1C                     	;# 
  2033  0E1D                     	;# 
  2034  0E1E                     	;# 
  2035  0E1F                     	;# 
  2036  0E20                     	;# 
  2037  0E21                     	;# 
  2038  0E22                     	;# 
  2039  0E24                     	;# 
  2040  0E25                     	;# 
  2041  0E28                     	;# 
  2042  0E29                     	;# 
  2043  0E2A                     	;# 
  2044  0E2B                     	;# 
  2045  0E2C                     	;# 
  2046  0E2D                     	;# 
  2047  0E2E                     	;# 
  2048  0E2F                     	;# 
  2049  0E90                     	;# 
  2050  0E91                     	;# 
  2051  0E92                     	;# 
  2052  0E94                     	;# 
  2053  0E95                     	;# 
  2054  0EA0                     	;# 
  2055  0EA1                     	;# 
  2056  0EA2                     	;# 
  2057  0EA3                     	;# 
  2058  0EA4                     	;# 
  2059  0EA5                     	;# 
  2060  0F0F                     	;# 
  2061  0F10                     	;# 
  2062  0F11                     	;# 
  2063  0F12                     	;# 
  2064  0F13                     	;# 
  2065  0F14                     	;# 
  2066  0F15                     	;# 
  2067  0F16                     	;# 
  2068  0F17                     	;# 
  2069  0F18                     	;# 
  2070  0F19                     	;# 
  2071  0F1A                     	;# 
  2072  0F1B                     	;# 
  2073  0F1C                     	;# 
  2074  0F1D                     	;# 
  2075  0F1E                     	;# 
  2076  0F1F                     	;# 
  2077  0F20                     	;# 
  2078  0F21                     	;# 
  2079  0F22                     	;# 
  2080  0F23                     	;# 
  2081  0F24                     	;# 
  2082  0F25                     	;# 
  2083  0F26                     	;# 
  2084  0F27                     	;# 
  2085  0F28                     	;# 
  2086  0F29                     	;# 
  2087  0F2A                     	;# 
  2088  0F2B                     	;# 
  2089  0F2C                     	;# 
  2090  0F2D                     	;# 
  2091  0F2E                     	;# 
  2092  0F2F                     	;# 
  2093  0F30                     	;# 
  2094  0F31                     	;# 
  2095  0F32                     	;# 
  2096  0F33                     	;# 
  2097  0F34                     	;# 
  2098  0F35                     	;# 
  2099  0F36                     	;# 
  2100  0F37                     	;# 
  2101  0FE4                     	;# 
  2102  0FE5                     	;# 
  2103  0FE6                     	;# 
  2104  0FE7                     	;# 
  2105  0FE8                     	;# 
  2106  0FE9                     	;# 
  2107  0FEA                     	;# 
  2108  0FEB                     	;# 
  2109  0FED                     	;# 
  2110  0FEE                     	;# 
  2111  0FEF                     	;# 
  2112  1FE0                     _romArray_absaddr	set	8160
  2113                           
  2114                           	psect	stringtext1
  2115  1000                     __pstringtext1:	
  2116  1000                     _resetRomData:	
  2117  1000  34AA               	retlw	170
  2118  1001  3455               	retlw	85
  2119  1002  346E               	retlw	110
  2120  1003  3463               	retlw	99
  2121  1004  346F               	retlw	111
  2122  1005  346E               	retlw	110
  2123  1006  3466               	retlw	102
  2124  1007  3469               	retlw	105
  2125  1008  3467               	retlw	103
  2126  1009  3475               	retlw	117
  2127  100A  3472               	retlw	114
  2128  100B  3465               	retlw	101
  2129  100C  3464               	retlw	100
  2130  100D  3400               	retlw	0
  2131  100E  3400               	retlw	0
  2132  100F  3400               	retlw	0
  2133  1010  3400               	retlw	0
  2134  1011  3400               	retlw	0
  2135  1012  3400               	retlw	0
  2136  1013                     __end_of_resetRomData:	
  2137                           
  2138                           	psect	stringtext2
  2139  1013                     __pstringtext2:	
  2140  1013                     _n_ADDRESS_P0:	
  2141  1013  34AD               	retlw	173
  2142  1014  3487               	retlw	135
  2143  1015  3466               	retlw	102
  2144  1016  34BC               	retlw	188
  2145  1017  34BB               	retlw	187
  2146  1018                     __end_of_n_ADDRESS_P0:	
  2147                           
  2148                           	psect	stringtext3
  2149  1038                     __pstringtext3:	
  2150  1038                     _n_ADDRESS_MUL:	
  2151  1038  3421               	retlw	33
  2152  1039                     __end_of_n_ADDRESS_MUL:	
  2153  1FE0                     _romArray_absaddr	set	8160
  2154                           
  2155                           	psect	_romArray_text
  2156  1FE0                     __p_romArray_text:	
  2157  1FE0                     _romArray:	
  2158  1FE0  3400               	retlw	0
  2159  1FE1  3400               	retlw	0
  2160  1FE2  3400               	retlw	0
  2161  1FE3  3400               	retlw	0
  2162  1FE4  3400               	retlw	0
  2163  1FE5  3400               	retlw	0
  2164  1FE6  3400               	retlw	0
  2165  1FE7  3400               	retlw	0
  2166  1FE8  3400               	retlw	0
  2167  1FE9  3400               	retlw	0
  2168  1FEA  3400               	retlw	0
  2169  1FEB  3400               	retlw	0
  2170  1FEC  3400               	retlw	0
  2171  1FED  3400               	retlw	0
  2172  1FEE  3400               	retlw	0
  2173  1FEF  3400               	retlw	0
  2174  1FF0  3400               	retlw	0
  2175  1FF1  3400               	retlw	0
  2176  1FF2  3400               	retlw	0
  2177  1FF3  3400               	retlw	0
  2178  1FF4  3400               	retlw	0
  2179  1FF5  3400               	retlw	0
  2180  1FF6  3400               	retlw	0
  2181  1FF7  3400               	retlw	0
  2182  1FF8  3400               	retlw	0
  2183  1FF9  3400               	retlw	0
  2184  1FFA  3400               	retlw	0
  2185  1FFB  3400               	retlw	0
  2186  1FFC  3400               	retlw	0
  2187  1FFD  3400               	retlw	0
  2188  1FFE  3400               	retlw	0
  2189  1FFF  3400               	retlw	0
  2190  2000                     __end_of_romArray:	
  2191  0003                     _STATUSbits	set	3
  2192  0010                     _PIR0bits	set	16
  2193  000E                     _PORTCbits	set	14
  2194  000C                     _PORTAbits	set	12
  2195  000B                     _INTCONbits	set	11
  2196  0097                     _WDTCONbits	set	151
  2197  009E                     _ADCON1bits	set	158
  2198  009C                     _ADRESH	set	156
  2199  009B                     _ADRESL	set	155
  2200  009D                     _ADCON0bits	set	157
  2201  0090                     _PIE0bits	set	144
  2202  008E                     _TRISCbits	set	142
  2203  008C                     _TRISAbits	set	140
  2204  0117                     _FVRCONbits	set	279
  2205  018E                     _ANSELCbits	set	398
  2206  018C                     _ANSELAbits	set	396
  2207  018E                     _ANSELC	set	398
  2208  018C                     _ANSELA	set	396
  2209  020C                     _WPUAbits	set	524
  2210  020E                     _WPUC	set	526
  2211  020C                     _WPUA	set	524
  2212  0211                     _SSP1BUF	set	529
  2213  0214                     _SSP1STATbits	set	532
  2214  0215                     _SSP1CON1bits	set	533
  2215  028E                     _ODCONC	set	654
  2216  028C                     _ODCONA	set	652
  2217  038E                     _INLVLC	set	910
  2218  038C                     _INLVLA	set	908
  2219  0894                     _PMDATH	set	2196
  2220  0893                     _PMDATL	set	2195
  2221  0896                     _PMCON2	set	2198
  2222  0895                     _PMCON1bits	set	2197
  2223  0892                     _PMADRH	set	2194
  2224  0891                     _PMADRL	set	2193
  2225  0895                     _PMCON1	set	2197
  2226  0919                     _OSCCON1bits	set	2329
  2227  0EA0                     _RC0PPSbits	set	3744
  2228  0EA2                     _RC2PPSbits	set	3746
  2229  0EA1                     _RC1PPSbits	set	3745
  2230                           
  2231                           	psect	stringtext4
  2232  1018                     __pstringtext4:	
  2233  1018                     STR_3:	
  2234  1018  3441               	retlw	65	;'A'
  2235  1019  344E               	retlw	78	;'N'
  2236  101A  3443               	retlw	67	;'C'
  2237  101B  3433               	retlw	51	;'3'
  2238  101C  3400               	retlw	0
  2239                           
  2240                           	psect	stringtext5
  2241  101D                     __pstringtext5:	
  2242  101D                     STR_5:	
  2243  101D  3454               	retlw	84	;'T'
  2244  101E  3445               	retlw	69	;'E'
  2245  101F  344D               	retlw	77	;'M'
  2246  1020  3450               	retlw	80	;'P'
  2247  1021  3400               	retlw	0
  2248                           
  2249                           	psect	stringtext6
  2250  1022                     __pstringtext6:	
  2251  1022                     STR_2:	
  2252  1022  3456               	retlw	86	;'V'
  2253  1023  3442               	retlw	66	;'B'
  2254  1024  3441               	retlw	65	;'A'
  2255  1025  3454               	retlw	84	;'T'
  2256  1026  3400               	retlw	0
  2257                           
  2258                           	psect	stringtext7
  2259  1027                     __pstringtext7:	
  2260  1027                     STR_7:	
  2261  1027  3442               	retlw	66	;'B'
  2262  1028  344F               	retlw	79	;'O'
  2263  1029  344F               	retlw	79	;'O'
  2264  102A  3454               	retlw	84	;'T'
  2265  102B  3400               	retlw	0
  2266                           
  2267                           	psect	stringtext8
  2268  102C                     __pstringtext8:	
  2269  102C                     STR_6:	
  2270  102C  3455               	retlw	85	;'U'
  2271  102D  3457               	retlw	87	;'W'
  2272  102E  3431               	retlw	49	;'1'
  2273  102F  3400               	retlw	0
  2274                           
  2275                           	psect	stringtext9
  2276  1030                     __pstringtext9:	
  2277  1030                     STR_1:	
  2278  1030  3444               	retlw	68	;'D'
  2279  1031  3442               	retlw	66	;'B'
  2280  1032  3447               	retlw	71	;'G'
  2281  1033  3400               	retlw	0
  2282                           
  2283                           	psect	stringtext10
  2284  1034                     __pstringtext10:	
  2285  1034                     STR_4:	
  2286  1034  3446               	retlw	70	;'F'
  2287  1035  3456               	retlw	86	;'V'
  2288  1036  3452               	retlw	82	;'R'
  2289  1037  3400               	retlw	0
  2290                           
  2291                           	psect	stringtext11
  2292  0000                     __pstringtext11:	
  2293                           
  2294                           ; #config settings
  2295  0000                     
  2296                           	psect	cinit
  2297  0011                     start_initialization:	
  2298  0011                     __initialization:	
  2299                           
  2300                           ; Clear objects allocated to BANK0
  2301  0011  3049               	movlw	low __pbssBANK0
  2302  0012  0084               	movwf	4
  2303  0013  3000               	movlw	high __pbssBANK0
  2304  0014  0085               	movwf	5
  2305  0015  301E               	movlw	30
  2306  0016  318F  2729  3180   	fcall	clear_ram0
  2307                           
  2308                           ; Clear objects allocated to BANK1
  2309  0019  30A0               	movlw	low __pbssBANK1
  2310  001A  0084               	movwf	4
  2311  001B  3000               	movlw	high __pbssBANK1
  2312  001C  0085               	movwf	5
  2313  001D  303B               	movlw	59
  2314  001E  318F  2729  3180   	fcall	clear_ram0
  2315                           
  2316                           ; Clear objects allocated to BANK2
  2317  0021  3020               	movlw	low __pbssBANK2
  2318  0022  0084               	movwf	4
  2319  0023  3001               	movlw	high __pbssBANK2
  2320  0024  0085               	movwf	5
  2321  0025  3020               	movlw	32
  2322  0026  318F  2729         	fcall	clear_ram0
  2323  0028                     end_of_initialization:	
  2324                           ;End of C runtime variable initialization code
  2325                           
  2326  0028                     __end_of__initialization:	
  2327  0028  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  2328  0029  0020               	movlb	0
  2329  002A  3182  2A5B         	ljmp	_main	;jump to C main() function
  2330                           
  2331                           	psect	bssBANK0
  2332  0049                     __pbssBANK0:	
  2333  0049                     _counter:	
  2334  0049                     	ds	2
  2335  004B                     _nrf24l01RXPacketData:	
  2336  004B                     	ds	1
  2337  004C                     _sleepLoop:	
  2338  004C                     	ds	1
  2339  004D                     _nrf24l01:	
  2340  004D                     	ds	1
  2341  004E                     _nrf24l01TXPacketData:	
  2342  004E                     	ds	1
  2343  004F                     _nrf24l01RXTopic:	
  2344  004F                     	ds	8
  2345  0057                     _nrf24l01TXValue:	
  2346  0057                     	ds	8
  2347  005F                     _nrf24l01TXTopic:	
  2348  005F                     	ds	8
  2349                           
  2350                           	psect	bssBANK1
  2351  00A0                     __pbssBANK1:	
  2352  00A0                     _romData:	
  2353  00A0                     	ds	19
  2354  00B3                     _nrf24l01RXName:	
  2355  00B3                     	ds	16
  2356  00C3                     _nrf24l01TXName:	
  2357  00C3                     	ds	16
  2358  00D3                     _nrf24l01RXValue:	
  2359  00D3                     	ds	8
  2360                           
  2361                           	psect	bssBANK2
  2362  0120                     __pbssBANK2:	
  2363  0120                     _romHolder:	
  2364  0120                     	ds	32
  2365                           
  2366                           	psect	clrtext
  2367  0F29                     clear_ram0:	
  2368                           ;	Called with FSR0 containing the base address, and
  2369                           ;	WREG with the size to clear
  2370                           
  2371  0F29  0064               	clrwdt	;clear the watchdog before getting into this loop
  2372  0F2A                     clrloop0:	
  2373  0F2A  0180               	clrf	0	;clear RAM location pointed to by FSR
  2374  0F2B  3101               	addfsr 0,1
  2375  0F2C  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  2376  0F2D  2F2A               	goto	clrloop0	;have we reached the end yet?
  2377  0F2E  3400               	retlw	0	;all done for this memory range, return
  2378                           
  2379                           	psect	cstackBANK1
  2380  00DB                     __pcstackBANK1:	
  2381  00DB                     ??_utoa:	
  2382                           
  2383                           ; 1 bytes @ 0x0
  2384  00DB                     	ds	1
  2385  00DC                     utoa@v:	
  2386                           
  2387                           ; 2 bytes @ 0x1
  2388  00DC                     	ds	2
  2389  00DE                     utoa@c:	
  2390                           
  2391                           ; 1 bytes @ 0x3
  2392  00DE                     	ds	1
  2393  00DF                     utoa@buf:	
  2394                           
  2395                           ; 1 bytes @ 0x4
  2396  00DF                     	ds	1
  2397  00E0                     ??_main:	
  2398                           
  2399                           ; 1 bytes @ 0x5
  2400  00E0                     	ds	1
  2401                           
  2402                           	psect	cstackCOMMON
  2403  0070                     __pcstackCOMMON:	
  2404  0070                     ?_nrf24l01ISR:	
  2405  0070                     ?_nrf24l01SetRXMode:	
  2406                           ; 1 bytes @ 0x0
  2407                           
  2408  0070                     ?_nrf24l01SendString:	
  2409                           ; 1 bytes @ 0x0
  2410                           
  2411  0070                     ?_nrf24l01Init:	
  2412                           ; 1 bytes @ 0x0
  2413                           
  2414  0070                     ?_flashRealod:	
  2415                           ; 1 bytes @ 0x0
  2416                           
  2417  0070                     ?_flashUpdate:	
  2418                           ; 1 bytes @ 0x0
  2419                           
  2420  0070                     ?_nrf24l01CELow:	
  2421                           ; 1 bytes @ 0x0
  2422                           
  2423  0070                     ??_nrf24l01CELow:	
  2424                           ; 1 bytes @ 0x0
  2425                           
  2426  0070                     ?_nrf24l01CEHigh:	
  2427                           ; 1 bytes @ 0x0
  2428                           
  2429  0070                     ??_nrf24l01CEHigh:	
  2430                           ; 1 bytes @ 0x0
  2431                           
  2432  0070                     ?_nrf24l01CSLow:	
  2433                           ; 1 bytes @ 0x0
  2434                           
  2435  0070                     ??_nrf24l01CSLow:	
  2436                           ; 1 bytes @ 0x0
  2437                           
  2438  0070                     ?_nrf24l01CSHigh:	
  2439                           ; 1 bytes @ 0x0
  2440                           
  2441  0070                     ??_nrf24l01CSHigh:	
  2442                           ; 1 bytes @ 0x0
  2443                           
  2444  0070                     ?_nrf24l01InterfaceInit:	
  2445                           ; 1 bytes @ 0x0
  2446                           
  2447  0070                     ?_nrf24l01SPISend:	
  2448                           ; 1 bytes @ 0x0
  2449                           
  2450  0070                     ??_nrf24l01SPISend:	
  2451                           ; 1 bytes @ 0x0
  2452                           
  2453  0070                     ?_nrf24l01SPIStart:	
  2454                           ; 1 bytes @ 0x0
  2455                           
  2456  0070                     ??_nrf24l01SPIStart:	
  2457                           ; 1 bytes @ 0x0
  2458                           
  2459  0070                     ?_nrf24l01SPIEnd:	
  2460                           ; 1 bytes @ 0x0
  2461                           
  2462  0070                     ??_nrf24l01SPIEnd:	
  2463                           ; 1 bytes @ 0x0
  2464                           
  2465  0070                     ?_enableInterrupts:	
  2466                           ; 1 bytes @ 0x0
  2467                           
  2468  0070                     ??_enableInterrupts:	
  2469                           ; 1 bytes @ 0x0
  2470                           
  2471  0070                     ?_exception:	
  2472                           ; 1 bytes @ 0x0
  2473                           
  2474  0070                     ?_ISR:	
  2475                           ; 1 bytes @ 0x0
  2476                           
  2477  0070                     ?_sleep:	
  2478                           ; 1 bytes @ 0x0
  2479                           
  2480  0070                     ?_loop:	
  2481                           ; 1 bytes @ 0x0
  2482                           
  2483  0070                     ?_main:	
  2484                           ; 1 bytes @ 0x0
  2485                           
  2486  0070                     ?_nrf24l01CheckACK:	
  2487                           ; 1 bytes @ 0x0
  2488                           
  2489  0070                     ?_nrf24l01ReceiveString:	
  2490                           ; 1 bytes @ 0x0
  2491                           
  2492  0070                     ?_nrf24l01InitRegisters:	
  2493                           ; 1 bytes @ 0x0
  2494                           
  2495  0070                     ?i1_flashWriteByte:	
  2496                           ; 1 bytes @ 0x0
  2497                           
  2498  0070                     ?i1_flashUpdate:	
  2499                           ; 1 bytes @ 0x0
  2500                           
  2501  0070                     ?i1_nrf24l01SetRXMode:	
  2502                           ; 1 bytes @ 0x0
  2503                           
  2504  0070                     ?_strcmp:	
  2505                           ; 1 bytes @ 0x0
  2506                           
  2507  0070                     ?_strlen:	
  2508                           ; 2 bytes @ 0x0
  2509                           
  2510  0070                     ?___wmul:	
  2511                           ; 2 bytes @ 0x0
  2512                           
  2513  0070                     nrf24l01SPISend@data:	
  2514                           ; 2 bytes @ 0x0
  2515                           
  2516  0070                     enableInterrupts@enable:	
  2517                           ; 1 bytes @ 0x0
  2518                           
  2519  0070                     nrf24l01InitRegisters@isReciever:	
  2520                           ; 1 bytes @ 0x0
  2521                           
  2522  0070                     strcmp@s2:	
  2523                           ; 1 bytes @ 0x0
  2524                           
  2525  0070                     ___wmul@multiplier:	
  2526                           ; 1 bytes @ 0x0
  2527                           
  2528  0070                     i1flashWriteByte@offset:	
  2529                           ; 2 bytes @ 0x0
  2530                           
  2531                           
  2532                           ; 2 bytes @ 0x0
  2533  0070                     	ds	1
  2534  0071                     ?_nrf24l01ReceiveStringPart:	
  2535  0071                     ?i1_nrf24l01Send:	
  2536                           ; 1 bytes @ 0x1
  2537                           
  2538  0071                     nrf24l01ReceiveStringPart@offset:	
  2539                           ; 1 bytes @ 0x1
  2540                           
  2541  0071                     i1nrf24l01Send@data:	
  2542                           ; 1 bytes @ 0x1
  2543                           
  2544                           
  2545                           ; 1 bytes @ 0x1
  2546  0071                     	ds	1
  2547  0072                     ??_strcmp:	
  2548  0072                     ??_strlen:	
  2549                           ; 1 bytes @ 0x2
  2550                           
  2551  0072                     ??i1_nrf24l01Send:	
  2552                           ; 1 bytes @ 0x2
  2553                           
  2554  0072                     nrf24l01ReceiveStringPart@destLength:	
  2555                           ; 1 bytes @ 0x2
  2556                           
  2557  0072                     ___wmul@multiplicand:	
  2558                           ; 1 bytes @ 0x2
  2559                           
  2560  0072                     i1flashWriteByte@data:	
  2561                           ; 2 bytes @ 0x2
  2562                           
  2563                           
  2564                           ; 2 bytes @ 0x2
  2565  0072                     	ds	1
  2566  0073                     nrf24l01ReceiveStringPart@sourceLength:	
  2567  0073                     strcmp@r:	
  2568                           ; 1 bytes @ 0x3
  2569                           
  2570  0073                     i1nrf24l01Send@command:	
  2571                           ; 1 bytes @ 0x3
  2572                           
  2573                           
  2574                           ; 1 bytes @ 0x3
  2575  0073                     	ds	1
  2576  0074                     ??_nrf24l01ReceiveStringPart:	
  2577  0074                     ??___wmul:	
  2578                           ; 1 bytes @ 0x4
  2579                           
  2580  0074                     ??i1_flashWriteByte:	
  2581                           ; 1 bytes @ 0x4
  2582                           
  2583  0074                     ??i1_nrf24l01SetRXMode:	
  2584                           ; 1 bytes @ 0x4
  2585                           
  2586  0074                     strcmp@s1:	
  2587                           ; 1 bytes @ 0x4
  2588                           
  2589  0074                     ___wmul@product:	
  2590                           ; 1 bytes @ 0x4
  2591                           
  2592  0074                     i1flashWriteByte@address:	
  2593                           ; 2 bytes @ 0x4
  2594                           
  2595                           
  2596                           ; 2 bytes @ 0x4
  2597  0074                     	ds	1
  2598  0075                     i1nrf24l01SetRXMode@config:	
  2599                           
  2600                           ; 1 bytes @ 0x5
  2601  0075                     	ds	1
  2602  0076                     ??i1_flashUpdate:	
  2603  0076                     strlen@cp:	
  2604                           ; 1 bytes @ 0x6
  2605                           
  2606  0076                     i1nrf24l01SetRXMode@rxMode:	
  2607                           ; 1 bytes @ 0x6
  2608                           
  2609                           
  2610                           ; 1 bytes @ 0x6
  2611  0076                     	ds	1
  2612  0077                     ??_nrf24l01CheckACK:	
  2613  0077                     nrf24l01ReceiveStringPart@string:	
  2614                           ; 1 bytes @ 0x7
  2615                           
  2616  0077                     strlen@s:	
  2617                           ; 1 bytes @ 0x7
  2618                           
  2619                           
  2620                           ; 1 bytes @ 0x7
  2621  0077                     	ds	1
  2622  0078                     ?_memset:	
  2623  0078                     nrf24l01ReceiveStringPart@byte:	
  2624                           ; 1 bytes @ 0x8
  2625                           
  2626  0078                     memset@c:	
  2627                           ; 1 bytes @ 0x8
  2628                           
  2629  0078                     i1flashUpdate@i:	
  2630                           ; 2 bytes @ 0x8
  2631                           
  2632                           
  2633                           ; 2 bytes @ 0x8
  2634  0078                     	ds	1
  2635  0079                     nrf24l01ReceiveStringPart@i:	
  2636                           
  2637                           ; 1 bytes @ 0x9
  2638  0079                     	ds	1
  2639  007A                     ??_exception:	
  2640  007A                     memset@n:	
  2641                           ; 1 bytes @ 0xA
  2642                           
  2643                           
  2644                           ; 2 bytes @ 0xA
  2645  007A                     	ds	2
  2646  007C                     ??_memset:	
  2647  007C                     exception@exception:	
  2648                           ; 1 bytes @ 0xC
  2649                           
  2650                           
  2651                           ; 1 bytes @ 0xC
  2652  007C                     	ds	1
  2653  007D                     ??_nrf24l01ISR:	
  2654                           
  2655                           ; 1 bytes @ 0xD
  2656  007D                     	ds	1
  2657  007E                     ??_ISR:	
  2658                           
  2659                           	psect	cstackBANK0
  2660  0020                     __pcstackBANK0:	
  2661                           ; 1 bytes @ 0xE
  2662                           
  2663  0020                     memset@p:	
  2664                           
  2665                           ; 1 bytes @ 0x0
  2666  0020                     	ds	1
  2667  0021                     memset@p1:	
  2668                           
  2669                           ; 1 bytes @ 0x1
  2670  0021                     	ds	1
  2671  0022                     ??_nrf24l01ReceiveString:	
  2672                           
  2673                           ; 1 bytes @ 0x2
  2674  0022                     	ds	4
  2675  0026                     nrf24l01ReceiveString@width:	
  2676                           
  2677                           ; 1 bytes @ 0x6
  2678  0026                     	ds	1
  2679  0027                     nrf24l01ReceiveString@offset:	
  2680                           
  2681                           ; 1 bytes @ 0x7
  2682  0027                     	ds	1
  2683  0028                     nrf24l01ISR@status:	
  2684                           
  2685                           ; 1 bytes @ 0x8
  2686  0028                     	ds	1
  2687  0029                     ?_strcpy:	
  2688  0029                     ?_flashWriteByte:	
  2689                           ; 1 bytes @ 0x9
  2690                           
  2691  0029                     ??_nrf24l01InterfaceInit:	
  2692                           ; 1 bytes @ 0x9
  2693                           
  2694  0029                     ??_sleep:	
  2695                           ; 1 bytes @ 0x9
  2696                           
  2697  0029                     ?_nrf24l01Send:	
  2698                           ; 1 bytes @ 0x9
  2699                           
  2700  0029                     ?_flashReadByte:	
  2701                           ; 1 bytes @ 0x9
  2702                           
  2703  0029                     ?___lwdiv:	
  2704                           ; 2 bytes @ 0x9
  2705                           
  2706  0029                     ?___lwmod:	
  2707                           ; 2 bytes @ 0x9
  2708                           
  2709  0029                     ?___lmul:	
  2710                           ; 2 bytes @ 0x9
  2711                           
  2712  0029                     ?___lldiv:	
  2713                           ; 4 bytes @ 0x9
  2714                           
  2715  0029                     nrf24l01Send@data:	
  2716                           ; 4 bytes @ 0x9
  2717                           
  2718  0029                     flashWriteByte@offset:	
  2719                           ; 1 bytes @ 0x9
  2720                           
  2721  0029                     flashReadByte@offset:	
  2722                           ; 2 bytes @ 0x9
  2723                           
  2724  0029                     ___lwdiv@divisor:	
  2725                           ; 2 bytes @ 0x9
  2726                           
  2727  0029                     ___lwmod@divisor:	
  2728                           ; 2 bytes @ 0x9
  2729                           
  2730  0029                     strcpy@from:	
  2731                           ; 2 bytes @ 0x9
  2732                           
  2733  0029                     ___lmul@multiplier:	
  2734                           ; 2 bytes @ 0x9
  2735                           
  2736  0029                     ___lldiv@divisor:	
  2737                           ; 4 bytes @ 0x9
  2738                           
  2739                           
  2740                           ; 4 bytes @ 0x9
  2741  0029                     	ds	1
  2742  002A                     ??_nrf24l01Send:	
  2743                           
  2744                           ; 1 bytes @ 0xA
  2745  002A                     	ds	1
  2746  002B                     ??_strcpy:	
  2747  002B                     ??_flashReadByte:	
  2748                           ; 1 bytes @ 0xB
  2749                           
  2750  002B                     nrf24l01Send@command:	
  2751                           ; 1 bytes @ 0xB
  2752                           
  2753  002B                     flashWriteByte@data:	
  2754                           ; 1 bytes @ 0xB
  2755                           
  2756  002B                     ___lwdiv@dividend:	
  2757                           ; 2 bytes @ 0xB
  2758                           
  2759  002B                     ___lwmod@dividend:	
  2760                           ; 2 bytes @ 0xB
  2761                           
  2762                           
  2763                           ; 2 bytes @ 0xB
  2764  002B                     	ds	1
  2765  002C                     ??_nrf24l01SetRXMode:	
  2766  002C                     ??_nrf24l01InitRegisters:	
  2767                           ; 1 bytes @ 0xC
  2768                           
  2769  002C                     strcpy@cp:	
  2770                           ; 1 bytes @ 0xC
  2771                           
  2772                           
  2773                           ; 1 bytes @ 0xC
  2774  002C                     	ds	1
  2775  002D                     ??_flashWriteByte:	
  2776  002D                     ??___lwdiv:	
  2777                           ; 1 bytes @ 0xD
  2778                           
  2779  002D                     ??___lwmod:	
  2780                           ; 1 bytes @ 0xD
  2781                           
  2782  002D                     nrf24l01SetRXMode@config:	
  2783                           ; 1 bytes @ 0xD
  2784                           
  2785  002D                     nrf24l01InitRegisters@channel:	
  2786                           ; 1 bytes @ 0xD
  2787                           
  2788  002D                     strcpy@to:	
  2789                           ; 1 bytes @ 0xD
  2790                           
  2791  002D                     flashWriteByte@address:	
  2792                           ; 1 bytes @ 0xD
  2793                           
  2794  002D                     ___lmul@multiplicand:	
  2795                           ; 2 bytes @ 0xD
  2796                           
  2797  002D                     ___lldiv@dividend:	
  2798                           ; 4 bytes @ 0xD
  2799                           
  2800                           
  2801                           ; 4 bytes @ 0xD
  2802  002D                     	ds	1
  2803  002E                     nrf24l01SetRXMode@rxMode:	
  2804  002E                     nrf24l01InitRegisters@setupAW:	
  2805                           ; 1 bytes @ 0xE
  2806                           
  2807  002E                     ___lwdiv@counter:	
  2808                           ; 1 bytes @ 0xE
  2809                           
  2810  002E                     ___lwmod@counter:	
  2811                           ; 1 bytes @ 0xE
  2812                           
  2813  002E                     flashReadByte@result:	
  2814                           ; 1 bytes @ 0xE
  2815                           
  2816                           
  2817                           ; 2 bytes @ 0xE
  2818  002E                     	ds	1
  2819  002F                     ??_nrf24l01SendString:	
  2820  002F                     ??_flashUpdate:	
  2821                           ; 1 bytes @ 0xF
  2822                           
  2823  002F                     nrf24l01InitRegisters@feature:	
  2824                           ; 1 bytes @ 0xF
  2825                           
  2826  002F                     ___lwdiv@quotient:	
  2827                           ; 1 bytes @ 0xF
  2828                           
  2829                           
  2830                           ; 2 bytes @ 0xF
  2831  002F                     	ds	1
  2832  0030                     nrf24l01SendString@i:	
  2833  0030                     nrf24l01InitRegisters@rfSetup:	
  2834                           ; 1 bytes @ 0x10
  2835                           
  2836  0030                     flashReadByte@address:	
  2837                           ; 1 bytes @ 0x10
  2838                           
  2839                           
  2840                           ; 2 bytes @ 0x10
  2841  0030                     	ds	1
  2842  0031                     ??___lmul:	
  2843  0031                     ??___lldiv:	
  2844                           ; 1 bytes @ 0x11
  2845                           
  2846  0031                     nrf24l01InitRegisters@status:	
  2847                           ; 1 bytes @ 0x11
  2848                           
  2849  0031                     flashUpdate@i:	
  2850                           ; 1 bytes @ 0x11
  2851                           
  2852  0031                     ___lmul@product:	
  2853                           ; 2 bytes @ 0x11
  2854                           
  2855                           
  2856                           ; 4 bytes @ 0x11
  2857  0031                     	ds	1
  2858  0032                     ??_flashRealod:	
  2859  0032                     nrf24l01InitRegisters@enRXAddr:	
  2860                           ; 1 bytes @ 0x12
  2861                           
  2862  0032                     ___lldiv@quotient:	
  2863                           ; 1 bytes @ 0x12
  2864                           
  2865                           
  2866                           ; 4 bytes @ 0x12
  2867  0032                     	ds	1
  2868  0033                     nrf24l01InitRegisters@enAA:	
  2869  0033                     flashRealod@i:	
  2870                           ; 1 bytes @ 0x13
  2871                           
  2872                           
  2873                           ; 2 bytes @ 0x13
  2874  0033                     	ds	1
  2875  0034                     nrf24l01InitRegisters@DynPD:	
  2876                           
  2877                           ; 1 bytes @ 0x14
  2878  0034                     	ds	1
  2879  0035                     nrf24l01InitRegisters@config:	
  2880                           
  2881                           ; 1 bytes @ 0x15
  2882  0035                     	ds	1
  2883  0036                     ??_nrf24l01Init:	
  2884  0036                     ___lldiv@counter:	
  2885                           ; 1 bytes @ 0x16
  2886                           
  2887                           
  2888                           ; 1 bytes @ 0x16
  2889  0036                     	ds	1
  2890  0037                     ?_getADCValue:	
  2891  0037                     getADCValue@divider:	
  2892                           ; 4 bytes @ 0x17
  2893                           
  2894                           
  2895                           ; 4 bytes @ 0x17
  2896  0037                     	ds	1
  2897  0038                     nrf24l01Init@isReciever:	
  2898                           
  2899                           ; 1 bytes @ 0x18
  2900  0038                     	ds	3
  2901  003B                     ??_getADCValue:	
  2902                           
  2903                           ; 1 bytes @ 0x1B
  2904  003B                     	ds	4
  2905  003F                     getADCValue@channel:	
  2906                           
  2907                           ; 1 bytes @ 0x1F
  2908  003F                     	ds	1
  2909  0040                     getADCValue@adcLoop:	
  2910                           
  2911                           ; 1 bytes @ 0x20
  2912  0040                     	ds	1
  2913  0041                     getADCValue@adcSum:	
  2914                           
  2915                           ; 4 bytes @ 0x21
  2916  0041                     	ds	4
  2917  0045                     ?_utoa:	
  2918  0045                     utoa@val:	
  2919                           ; 1 bytes @ 0x25
  2920                           
  2921                           
  2922                           ; 2 bytes @ 0x25
  2923  0045                     	ds	2
  2924  0047                     utoa@base:	
  2925                           
  2926                           ; 2 bytes @ 0x27
  2927  0047                     	ds	2
  2928  0049                     ??_loop:	
  2929                           
  2930                           	psect	maintext
  2931  025B                     __pmaintext:	
  2932                           ; 1 bytes @ 0x29
  2933 ;;
  2934 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  2935 ;;
  2936 ;; *************** function _main *****************
  2937 ;; Defined at:
  2938 ;;		line 118 in file "main.c"
  2939 ;; Parameters:    Size  Location     Type
  2940 ;;		None
  2941 ;; Auto vars:     Size  Location     Type
  2942 ;;		None
  2943 ;; Return value:  Size  Location     Type
  2944 ;;                  1    wreg      void 
  2945 ;; Registers used:
  2946 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2947 ;; Tracked objects:
  2948 ;;		On entry : B1F/0
  2949 ;;		On exit  : 0/0
  2950 ;;		Unchanged: 0/0
  2951 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2952 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2953 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2954 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  2955 ;;      Totals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  2956 ;;Total ram usage:        1 bytes
  2957 ;; Hardware stack levels required when called:   13
  2958 ;; This function calls:
  2959 ;;		_flashRealod
  2960 ;;		_flashUpdate
  2961 ;;		_loop
  2962 ;;		_nrf24l01Init
  2963 ;;		_nrf24l01SendString
  2964 ;;		_sleep
  2965 ;;		_strcpy
  2966 ;;		_utoa
  2967 ;; This function is called by:
  2968 ;;		Startup code after reset
  2969 ;; This function uses a non-reentrant model
  2970 ;;
  2971                           
  2972                           
  2973                           ;psect for function _main
  2974  025B                     _main:	
  2975                           
  2976                           ;main.c: 121: ANSELA = 0x00;
  2977                           
  2978                           ;incstack = 0
  2979                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  2980  025B  0023               	movlb	3	; select bank3
  2981  025C  018C               	clrf	12	;volatile
  2982                           
  2983                           ;main.c: 122: ANSELC = 0x00;
  2984  025D  018E               	clrf	14	;volatile
  2985                           
  2986                           ;main.c: 124: ODCONA = 0x00;
  2987  025E  0025               	movlb	5	; select bank5
  2988  025F  018C               	clrf	12	;volatile
  2989                           
  2990                           ;main.c: 125: ODCONC = 0x00;
  2991  0260  018E               	clrf	14	;volatile
  2992                           
  2993                           ;main.c: 130: INLVLA = 0x00;
  2994  0261  0027               	movlb	7	; select bank7
  2995  0262  018C               	clrf	12	;volatile
  2996                           
  2997                           ;main.c: 131: INLVLC = 0x00;
  2998  0263  018E               	clrf	14	;volatile
  2999                           
  3000                           ;main.c: 133: WPUA = 0x00;
  3001  0264  0024               	movlb	4	; select bank4
  3002  0265  018C               	clrf	12	;volatile
  3003                           
  3004                           ;main.c: 134: WPUC = 0x00;
  3005  0266  018E               	clrf	14	;volatile
  3006                           
  3007                           ;main.c: 136: TRISCbits.TRISC5 = 0;
  3008  0267  0021               	movlb	1	; select bank1
  3009  0268  128E               	bcf	14,5	;volatile
  3010                           
  3011                           ;main.c: 137: TRISCbits.TRISC4 = 0;
  3012  0269  120E               	bcf	14,4	;volatile
  3013                           
  3014                           ;main.c: 139: PORTCbits.RC4 = 0;
  3015  026A  0020               	movlb	0	; select bank0
  3016  026B  120E               	bcf	14,4	;volatile
  3017                           
  3018                           ;main.c: 146: INTCONbits.PEIE = 0;
  3019  026C  130B               	bcf	11,6	;volatile
  3020                           
  3021                           ;main.c: 147: INTCONbits.GIE = 0;
  3022  026D  138B               	bcf	11,7	;volatile
  3023                           
  3024                           ;main.c: 149: OSCCON1bits.NOSC = 0b000;
  3025  026E  308F               	movlw	-113
  3026  026F  0032               	movlb	18	; select bank18
  3027  0270  0599               	andwf	25,f	;volatile
  3028                           
  3029                           ;main.c: 150: OSCCON1bits.NDIV = 0b000;
  3030  0271  30F0               	movlw	-16
  3031  0272  0599               	andwf	25,f	;volatile
  3032                           
  3033                           ;main.c: 152: _delay((unsigned long)((10)*(16000000/4000.0)));
  3034  0273  3034               	movlw	52
  3035  0274  0021               	movlb	1	; select bank1
  3036  0275  00E0               	movwf	??_main^(0+128)
  3037  0276  30F1               	movlw	241
  3038  0277                     u2347:	
  3039  0277  0B89               	decfsz	9,f
  3040  0278  2A77               	goto	u2347
  3041  0279  0BE0               	decfsz	??_main^(0+128),f
  3042  027A  2A77               	goto	u2347
  3043  027B  3200               	nop2
  3044                           
  3045                           ;main.c: 154: flashRealod();
  3046  027C  318F  27E0  3182   	fcall	_flashRealod
  3047                           
  3048                           ;main.c: 158: if (romData.check != 0x03){
  3049  027F  3003               	movlw	3
  3050  0280  0021               	movlb	1	; select bank1
  3051  0281  0620               	xorwf	_romData^(0+128),w
  3052  0282  1903               	btfsc	3,2
  3053  0283  2A99               	goto	l3645
  3054                           
  3055                           ;main.c: 159: romData.check = 0x03;
  3056  0284  3003               	movlw	3
  3057  0285  00E0               	movwf	??_main^(0+128)
  3058  0286  0860               	movf	??_main^(0+128),w
  3059  0287  00A0               	movwf	_romData^(0+128)
  3060                           
  3061                           ;main.c: 160: strcpy(romData.name, "UW1");
  3062  0288  302C               	movlw	low (STR_6| (0+32768))
  3063  0289  0020               	movlb	0	; select bank0
  3064  028A  00A9               	movwf	strcpy@from
  3065  028B  3090               	movlw	high (STR_6| (0+32768))
  3066  028C  00AA               	movwf	strcpy@from+1
  3067  028D  30A1               	movlw	(low ((_romData| 0+1)))& (0+255)
  3068  028E  318F  27C5  3182   	fcall	_strcpy
  3069                           
  3070                           ;main.c: 161: romData.bootMode = 0x01;
  3071  0291  3001               	movlw	1
  3072  0292  0021               	movlb	1	; select bank1
  3073  0293  00B1               	movwf	(_romData^(0+128)+17)
  3074  0294  3000               	movlw	0
  3075  0295  00B2               	movwf	(_romData^(0+128)+18)
  3076                           
  3077                           ;main.c: 162: flashUpdate();
  3078  0296  3187  277F  3182   	fcall	_flashUpdate
  3079  0299                     l3645:	
  3080                           
  3081                           ;main.c: 163: };main.c: 165: strcpy(nrf24l01TXName, romData.name);
  3082  0299  30A1               	movlw	low (_romData+1)
  3083  029A  0020               	movlb	0	; select bank0
  3084  029B  00A9               	movwf	strcpy@from
  3085  029C  3000               	movlw	high (_romData+1)
  3086  029D  00AA               	movwf	strcpy@from+1
  3087  029E  30C3               	movlw	(low (_nrf24l01TXName| 0))& (0+255)
  3088  029F  318F  27C5  3182   	fcall	_strcpy
  3089                           
  3090                           ;main.c: 167: nrf24l01Init(0);
  3091  02A2  3000               	movlw	0
  3092  02A3  3187  270C  3182   	fcall	_nrf24l01Init
  3093                           
  3094                           ;main.c: 174: ADCON0bits.ADON = 0;
  3095  02A6  0021               	movlb	1	; select bank1
  3096  02A7  101D               	bcf	29,0	;volatile
  3097                           
  3098                           ;main.c: 177: ANSELAbits.ANSA4 = 1;
  3099  02A8  0023               	movlb	3	; select bank3
  3100  02A9  160C               	bsf	12,4	;volatile
  3101                           
  3102                           ;main.c: 178: TRISAbits.TRISA4 = 1;
  3103  02AA  0021               	movlb	1	; select bank1
  3104  02AB  160C               	bsf	12,4	;volatile
  3105                           
  3106                           ;main.c: 179: WPUAbits.WPUA4 = 0;
  3107  02AC  0024               	movlb	4	; select bank4
  3108  02AD  120C               	bcf	12,4	;volatile
  3109                           
  3110                           ;main.c: 182: ANSELCbits.ANSC3 = 1;
  3111  02AE  0023               	movlb	3	; select bank3
  3112  02AF  158E               	bsf	14,3	;volatile
  3113                           
  3114                           ;main.c: 183: TRISCbits.TRISC3 = 1;
  3115  02B0  0021               	movlb	1	; select bank1
  3116  02B1  158E               	bsf	14,3	;volatile
  3117                           
  3118                           ;main.c: 186: FVRCONbits.TSEN = 0;
  3119  02B2  0022               	movlb	2	; select bank2
  3120  02B3  1297               	bcf	23,5	;volatile
  3121                           
  3122                           ;main.c: 187: FVRCONbits.TSRNG = 0;
  3123  02B4  1217               	bcf	23,4	;volatile
  3124                           
  3125                           ;main.c: 188: FVRCONbits.TSEN = 1;
  3126  02B5  1697               	bsf	23,5	;volatile
  3127                           
  3128                           ;main.c: 191: FVRCONbits.FVREN = 0;
  3129  02B6  1397               	bcf	23,7	;volatile
  3130                           
  3131                           ;main.c: 192: FVRCONbits.ADFVR = 1;
  3132  02B7  0817               	movf	23,w	;volatile
  3133  02B8  39FC               	andlw	-4
  3134  02B9  3801               	iorlw	1
  3135  02BA  0097               	movwf	23	;volatile
  3136                           
  3137                           ;main.c: 193: FVRCONbits.FVREN = 1;
  3138  02BB  1797               	bsf	23,7	;volatile
  3139                           
  3140                           ;main.c: 195: ADCON1bits.ADCS = 0b111;
  3141  02BC  3070               	movlw	112
  3142  02BD  0021               	movlb	1	; select bank1
  3143  02BE  049E               	iorwf	30,f	;volatile
  3144                           
  3145                           ;main.c: 196: ADCON1bits.ADFM = 1;
  3146  02BF  179E               	bsf	30,7	;volatile
  3147                           
  3148                           ;main.c: 197: ADCON1bits.ADPREF = 0b00;
  3149  02C0  30FC               	movlw	-4
  3150  02C1  059E               	andwf	30,f	;volatile
  3151                           
  3152                           ;main.c: 199: ADCON0bits.CHS = 3;
  3153  02C2  081D               	movf	29,w	;volatile
  3154  02C3  3903               	andlw	-253
  3155  02C4  380C               	iorlw	12
  3156  02C5  009D               	movwf	29	;volatile
  3157                           
  3158                           ;main.c: 200: ADCON0bits.ADON = 1;
  3159  02C6  141D               	bsf	29,0	;volatile
  3160                           
  3161                           ;main.c: 205: TRISAbits.TRISA2 = 1;
  3162  02C7  150C               	bsf	12,2	;volatile
  3163                           
  3164                           ;main.c: 206: PIE0bits.INTE = 1;
  3165  02C8  1410               	bsf	16,0	;volatile
  3166                           
  3167                           ;main.c: 207: INTCONbits.INTEDG = 0;
  3168  02C9  100B               	bcf	11,0	;volatile
  3169                           
  3170                           ;main.c: 211: WDTCONbits.WDTPS = 12;
  3171  02CA  0817               	movf	23,w	;volatile
  3172  02CB  39C1               	andlw	-63
  3173  02CC  3818               	iorlw	24
  3174  02CD  0097               	movwf	23	;volatile
  3175                           
  3176                           ;main.c: 214: TRISAbits.TRISA5 = 0;
  3177  02CE  128C               	bcf	12,5	;volatile
  3178                           
  3179                           ;main.c: 215: PORTAbits.RA5 = 0;
  3180  02CF  0020               	movlb	0	; select bank0
  3181  02D0  128C               	bcf	12,5	;volatile
  3182                           
  3183                           ;main.c: 218: INTCONbits.PEIE = 1;
  3184  02D1  170B               	bsf	11,6	;volatile
  3185                           
  3186                           ;main.c: 219: INTCONbits.GIE = 1;
  3187  02D2  178B               	bsf	11,7	;volatile
  3188                           
  3189                           ;main.c: 221: strcpy(nrf24l01TXTopic, "BOOT");
  3190  02D3  3027               	movlw	low (STR_7| (0+32768))
  3191  02D4  00A9               	movwf	strcpy@from
  3192  02D5  3090               	movlw	high (STR_7| (0+32768))
  3193  02D6  00AA               	movwf	strcpy@from+1
  3194  02D7  305F               	movlw	(low (_nrf24l01TXTopic| 0))& (0+255)
  3195  02D8  318F  27C5  3182   	fcall	_strcpy
  3196                           
  3197                           ;main.c: 222: utoa(nrf24l01TXValue, romData.bootMode, 10);
  3198  02DB  0021               	movlb	1	; select bank1
  3199  02DC  0832               	movf	((_romData+1)^(0+128)+17),w
  3200  02DD  0020               	movlb	0	; select bank0
  3201  02DE  00C6               	movwf	utoa@val+1
  3202  02DF  0021               	movlb	1	; select bank1
  3203  02E0  0831               	movf	(_romData^(0+128)+17),w
  3204  02E1  0020               	movlb	0	; select bank0
  3205  02E2  00C5               	movwf	utoa@val
  3206  02E3  300A               	movlw	10
  3207  02E4  00C7               	movwf	utoa@base
  3208  02E5  3000               	movlw	0
  3209  02E6  00C8               	movwf	utoa@base+1
  3210  02E7  3057               	movlw	(low (_nrf24l01TXValue| 0))& (0+255)
  3211  02E8  3184  240E  3182   	fcall	_utoa
  3212                           
  3213                           ;main.c: 223: nrf24l01TXPacketData.byte = 0x00;
  3214  02EB  0020               	movlb	0	; select bank0
  3215  02EC  01CE               	clrf	_nrf24l01TXPacketData
  3216                           
  3217                           ;main.c: 224: nrf24l01TXPacketData.ACKRequest = 0;
  3218  02ED  104E               	bcf	_nrf24l01TXPacketData,0
  3219                           
  3220                           ;main.c: 225: nrf24l01SendString();
  3221  02EE  3180  20FF  3182   	fcall	_nrf24l01SendString
  3222                           
  3223                           ;main.c: 227: sleep();
  3224  02F1  318F  2746  3182   	fcall	_sleep
  3225  02F4                     l3711:	
  3226                           ;main.c: 229: while(1){
  3227                           
  3228                           
  3229                           ;main.c: 230: loop();
  3230  02F4  3180  202C  3182   	fcall	_loop
  3231  02F7  2AF4               	goto	l3711
  3232  02F8                     __end_of_main:	
  3233                           ;main.c: 231: };main.c: 233: return;
  3234                           
  3235                           
  3236                           	psect	text1
  3237  070C                     __ptext1:	
  3238 ;; *************** function _nrf24l01Init *****************
  3239 ;; Defined at:
  3240 ;;		line 457 in file "nrf24l01.c"
  3241 ;; Parameters:    Size  Location     Type
  3242 ;;  isReciever      1    wreg     unsigned char 
  3243 ;; Auto vars:     Size  Location     Type
  3244 ;;  isReciever      1   24[BANK0 ] unsigned char 
  3245 ;; Return value:  Size  Location     Type
  3246 ;;                  1    wreg      void 
  3247 ;; Registers used:
  3248 ;;		wreg, status,2, status,0, pclath, cstack
  3249 ;; Tracked objects:
  3250 ;;		On entry : 0/0
  3251 ;;		On exit  : 0/0
  3252 ;;		Unchanged: 0/0
  3253 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3254 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3255 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3256 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3257 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3258 ;;Total ram usage:        3 bytes
  3259 ;; Hardware stack levels used:    1
  3260 ;; Hardware stack levels required when called:   11
  3261 ;; This function calls:
  3262 ;;		_nrf24l01CEHigh
  3263 ;;		_nrf24l01CELow
  3264 ;;		_nrf24l01InitRegisters
  3265 ;;		_nrf24l01InterfaceInit
  3266 ;; This function is called by:
  3267 ;;		_main
  3268 ;; This function uses a non-reentrant model
  3269 ;;
  3270                           
  3271                           
  3272                           ;psect for function _nrf24l01Init
  3273  070C                     _nrf24l01Init:	
  3274                           
  3275                           ;incstack = 0
  3276                           ; Regs used in _nrf24l01Init: [wreg+status,2+status,0+pclath+cstack]
  3277                           ;nrf24l01Init@isReciever stored from wreg
  3278  070C  0020               	movlb	0	; select bank0
  3279  070D  00B8               	movwf	nrf24l01Init@isReciever
  3280                           
  3281                           ;nrf24l01.c: 460: nrf24l01InterfaceInit();
  3282  070E  3187  27E3  3187   	fcall	_nrf24l01InterfaceInit
  3283                           
  3284                           ;nrf24l01.c: 465: nrf24l01CELow();
  3285  0711  318F  2720  3187   	fcall	_nrf24l01CELow
  3286                           
  3287                           ;nrf24l01.c: 467: _delay((unsigned long)((50000)*(16000000/4000000.0)));
  3288  0714  3002               	movlw	2
  3289  0715  0020               	movlb	0	; select bank0
  3290  0716  00B7               	movwf	??_nrf24l01Init+1
  3291  0717  3004               	movlw	4
  3292  0718  00B6               	movwf	??_nrf24l01Init
  3293  0719  30BA               	movlw	186
  3294  071A                     u2357:	
  3295  071A  0B89               	decfsz	9,f
  3296  071B  2F1A               	goto	u2357
  3297  071C  0BB6               	decfsz	??_nrf24l01Init,f
  3298  071D  2F1A               	goto	u2357
  3299  071E  0BB7               	decfsz	??_nrf24l01Init+1,f
  3300  071F  2F1A               	goto	u2357
  3301  0720  0000               	nop
  3302                           
  3303                           ;nrf24l01.c: 469: nrf24l01InitRegisters(isReciever);
  3304  0721  0020               	movlb	0	; select bank0
  3305  0722  0838               	movf	nrf24l01Init@isReciever,w
  3306  0723  3181  21B1  3187   	fcall	_nrf24l01InitRegisters
  3307                           
  3308                           ;nrf24l01.c: 471: _delay((unsigned long)((50000)*(16000000/4000000.0)));
  3309  0726  3002               	movlw	2
  3310  0727  0020               	movlb	0	; select bank0
  3311  0728  00B7               	movwf	??_nrf24l01Init+1
  3312  0729  3004               	movlw	4
  3313  072A  00B6               	movwf	??_nrf24l01Init
  3314  072B  30BA               	movlw	186
  3315  072C                     u2367:	
  3316  072C  0B89               	decfsz	9,f
  3317  072D  2F2C               	goto	u2367
  3318  072E  0BB6               	decfsz	??_nrf24l01Init,f
  3319  072F  2F2C               	goto	u2367
  3320  0730  0BB7               	decfsz	??_nrf24l01Init+1,f
  3321  0731  2F2C               	goto	u2367
  3322  0732  0000               	nop
  3323                           
  3324                           ;nrf24l01.c: 473: nrf24l01CEHigh();
  3325  0733  318F  271D         	fcall	_nrf24l01CEHigh
  3326  0735  0008               	return
  3327  0736                     __end_of_nrf24l01Init:	
  3328                           
  3329                           	psect	text2
  3330  07E3                     __ptext2:	
  3331 ;; *************** function _nrf24l01InterfaceInit *****************
  3332 ;; Defined at:
  3333 ;;		line 28 in file "interface.c"
  3334 ;; Parameters:    Size  Location     Type
  3335 ;;		None
  3336 ;; Auto vars:     Size  Location     Type
  3337 ;;		None
  3338 ;; Return value:  Size  Location     Type
  3339 ;;                  1    wreg      void 
  3340 ;; Registers used:
  3341 ;;		wreg, status,2, status,0
  3342 ;; Tracked objects:
  3343 ;;		On entry : 0/0
  3344 ;;		On exit  : 0/0
  3345 ;;		Unchanged: 0/0
  3346 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3347 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3348 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3349 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3350 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3351 ;;Total ram usage:        0 bytes
  3352 ;; Hardware stack levels used:    1
  3353 ;; Hardware stack levels required when called:    7
  3354 ;; This function calls:
  3355 ;;		Nothing
  3356 ;; This function is called by:
  3357 ;;		_nrf24l01Init
  3358 ;; This function uses a non-reentrant model
  3359 ;;
  3360                           
  3361                           
  3362                           ;psect for function _nrf24l01InterfaceInit
  3363  07E3                     _nrf24l01InterfaceInit:	
  3364                           
  3365                           ;interface.c: 30: TRISAbits.TRISA0 = 0;
  3366                           
  3367                           ;incstack = 0
  3368                           ; Regs used in _nrf24l01InterfaceInit: [wreg+status,2+status,0]
  3369  07E3  0021               	movlb	1	; select bank1
  3370  07E4  100C               	bcf	12,0	;volatile
  3371                           
  3372                           ;interface.c: 31: TRISAbits.TRISA1 = 0;
  3373  07E5  108C               	bcf	12,1	;volatile
  3374                           
  3375                           ;interface.c: 33: TRISCbits.TRISC1 = 1;
  3376  07E6  148E               	bsf	14,1	;volatile
  3377                           
  3378                           ;interface.c: 34: TRISCbits.TRISC2 = 0;
  3379  07E7  110E               	bcf	14,2	;volatile
  3380                           
  3381                           ;interface.c: 35: TRISCbits.TRISC0 = 0;
  3382  07E8  100E               	bcf	14,0	;volatile
  3383                           
  3384                           ;interface.c: 37: SSP1CON1bits.SSPEN = 0;
  3385  07E9  0024               	movlb	4	; select bank4
  3386  07EA  1295               	bcf	21,5	;volatile
  3387                           
  3388                           ;interface.c: 39: RC1PPSbits.RC1PPS = 0b10001;
  3389  07EB  003D               	movlb	29	; select bank29
  3390  07EC  0821               	movf	33,w	;volatile
  3391  07ED  39E0               	andlw	-32
  3392  07EE  3811               	iorlw	17
  3393  07EF  00A1               	movwf	33	;volatile
  3394                           
  3395                           ;interface.c: 40: RC2PPSbits.RC2PPS = 0b11001;
  3396  07F0  0822               	movf	34,w	;volatile
  3397  07F1  39E0               	andlw	-32
  3398  07F2  3819               	iorlw	25
  3399  07F3  00A2               	movwf	34	;volatile
  3400                           
  3401                           ;interface.c: 41: RC0PPSbits.RC0PPS = 0b11000;
  3402  07F4  0820               	movf	32,w	;volatile
  3403  07F5  39E0               	andlw	-32
  3404  07F6  3818               	iorlw	24
  3405  07F7  00A0               	movwf	32	;volatile
  3406                           
  3407                           ;interface.c: 43: SSP1CON1bits.CKP = 0;
  3408  07F8  0024               	movlb	4	; select bank4
  3409  07F9  1215               	bcf	21,4	;volatile
  3410                           
  3411                           ;interface.c: 44: SSP1STATbits.CKE = 1;
  3412  07FA  1714               	bsf	20,6	;volatile
  3413                           
  3414                           ;interface.c: 45: SSP1CON1bits.SSPM = 0b0000;
  3415  07FB  30F0               	movlw	-16
  3416  07FC  0595               	andwf	21,f	;volatile
  3417                           
  3418                           ;interface.c: 47: SSP1CON1bits.SSPEN = 1;
  3419  07FD  1695               	bsf	21,5	;volatile
  3420  07FE  0008               	return
  3421  07FF                     __end_of_nrf24l01InterfaceInit:	
  3422                           
  3423                           	psect	text3
  3424  01B1                     __ptext3:	
  3425 ;; *************** function _nrf24l01InitRegisters *****************
  3426 ;; Defined at:
  3427 ;;		line 372 in file "nrf24l01.c"
  3428 ;; Parameters:    Size  Location     Type
  3429 ;;  isReciever      1    wreg     unsigned char 
  3430 ;; Auto vars:     Size  Location     Type
  3431 ;;  isReciever      1    0[COMMON] unsigned char 
  3432 ;;  config          1   21[BANK0 ] struct .
  3433 ;;  DynPD           1   20[BANK0 ] struct .
  3434 ;;  enAA            1   19[BANK0 ] struct .
  3435 ;;  enRXAddr        1   18[BANK0 ] struct .
  3436 ;;  status          1   17[BANK0 ] struct .
  3437 ;;  rfSetup         1   16[BANK0 ] struct .
  3438 ;;  feature         1   15[BANK0 ] struct .
  3439 ;;  setupAW         1   14[BANK0 ] struct .
  3440 ;;  channel         1   13[BANK0 ] struct .
  3441 ;; Return value:  Size  Location     Type
  3442 ;;                  1    wreg      void 
  3443 ;; Registers used:
  3444 ;;		wreg, status,2, status,0, pclath, cstack
  3445 ;; Tracked objects:
  3446 ;;		On entry : 0/0
  3447 ;;		On exit  : 0/0
  3448 ;;		Unchanged: 0/0
  3449 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3450 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3451 ;;      Locals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3452 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3453 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3454 ;;Total ram usage:       10 bytes
  3455 ;; Hardware stack levels used:    1
  3456 ;; Hardware stack levels required when called:   10
  3457 ;; This function calls:
  3458 ;;		_nrf24l01Send
  3459 ;; This function is called by:
  3460 ;;		_nrf24l01Init
  3461 ;; This function uses a non-reentrant model
  3462 ;;
  3463                           
  3464                           
  3465                           ;psect for function _nrf24l01InitRegisters
  3466  01B1                     _nrf24l01InitRegisters:	
  3467                           
  3468                           ;nrf24l01.c: 374: n_CONFIG_t config;;nrf24l01.c: 376: config.PWR_UP = 0;
  3469                           
  3470                           ;incstack = 0
  3471                           ; Regs used in _nrf24l01InitRegisters: [wreg+status,2+status,0+pclath+cstack]
  3472  01B1  0020               	movlb	0	; select bank0
  3473  01B2  10B5               	bcf	nrf24l01InitRegisters@config,1
  3474                           
  3475                           ;nrf24l01.c: 377: nrf24l01Send(0b00100000 | 0x00, config.byte);
  3476  01B3  0835               	movf	nrf24l01InitRegisters@config,w
  3477  01B4  00AC               	movwf	??_nrf24l01InitRegisters
  3478  01B5  082C               	movf	??_nrf24l01InitRegisters,w
  3479  01B6  00A9               	movwf	nrf24l01Send@data
  3480  01B7  3020               	movlw	32
  3481  01B8  3187  27C3  3181   	fcall	_nrf24l01Send
  3482                           
  3483                           ;nrf24l01.c: 379: n_SETUP_AW_t setupAW;;nrf24l01.c: 380: setupAW.byte = 0x00;
  3484  01BB  0020               	movlb	0	; select bank0
  3485  01BC  01AE               	clrf	nrf24l01InitRegisters@setupAW
  3486                           
  3487                           ;nrf24l01.c: 381: setupAW.AW = 0b11;
  3488  01BD  3003               	movlw	3
  3489  01BE  04AE               	iorwf	nrf24l01InitRegisters@setupAW,f
  3490                           
  3491                           ;nrf24l01.c: 382: nrf24l01Send(0b00100000 | 0x02, setupAW.byte);
  3492  01BF  082E               	movf	nrf24l01InitRegisters@setupAW,w
  3493  01C0  00AC               	movwf	??_nrf24l01InitRegisters
  3494  01C1  082C               	movf	??_nrf24l01InitRegisters,w
  3495  01C2  00A9               	movwf	nrf24l01Send@data
  3496  01C3  3022               	movlw	34
  3497  01C4  3187  27C3  3181   	fcall	_nrf24l01Send
  3498                           
  3499                           ;nrf24l01.c: 385: n_RF_CH_t channel;;nrf24l01.c: 386: channel.RF_CH = 2;
  3500  01C7  0020               	movlb	0	; select bank0
  3501  01C8  082D               	movf	nrf24l01InitRegisters@channel,w
  3502  01C9  3980               	andlw	-128
  3503  01CA  3802               	iorlw	2
  3504  01CB  00AD               	movwf	nrf24l01InitRegisters@channel
  3505                           
  3506                           ;nrf24l01.c: 387: nrf24l01Send(0b00100000 | 0x05, channel.byte);
  3507  01CC  082D               	movf	nrf24l01InitRegisters@channel,w
  3508  01CD  00AC               	movwf	??_nrf24l01InitRegisters
  3509  01CE  082C               	movf	??_nrf24l01InitRegisters,w
  3510  01CF  00A9               	movwf	nrf24l01Send@data
  3511  01D0  3025               	movlw	37
  3512  01D1  3187  27C3  3181   	fcall	_nrf24l01Send
  3513                           
  3514                           ;nrf24l01.c: 390: n_RF_SETUP_t rfSetup;;nrf24l01.c: 391: rfSetup.byte = 0x00;
  3515  01D4  0020               	movlb	0	; select bank0
  3516  01D5  01B0               	clrf	nrf24l01InitRegisters@rfSetup
  3517                           
  3518                           ;nrf24l01.c: 392: rfSetup.RF_DR_LOW = 0;
  3519  01D6  12B0               	bcf	nrf24l01InitRegisters@rfSetup,5
  3520                           
  3521                           ;nrf24l01.c: 393: rfSetup.RF_DR_HIGH = 1;
  3522  01D7  15B0               	bsf	nrf24l01InitRegisters@rfSetup,3
  3523                           
  3524                           ;nrf24l01.c: 394: rfSetup.RF_PWR = 3;
  3525  01D8  3006               	movlw	6
  3526  01D9  04B0               	iorwf	nrf24l01InitRegisters@rfSetup,f
  3527                           
  3528                           ;nrf24l01.c: 395: nrf24l01Send(0b00100000 | 0x06, rfSetup.byte);
  3529  01DA  0830               	movf	nrf24l01InitRegisters@rfSetup,w
  3530  01DB  00AC               	movwf	??_nrf24l01InitRegisters
  3531  01DC  082C               	movf	??_nrf24l01InitRegisters,w
  3532  01DD  00A9               	movwf	nrf24l01Send@data
  3533  01DE  3026               	movlw	38
  3534  01DF  3187  27C3  3181   	fcall	_nrf24l01Send
  3535                           
  3536                           ;nrf24l01.c: 398: n_EN_RXADDR_t enRXAddr;;nrf24l01.c: 399: enRXAddr.ERX_P0 = 1;
  3537  01E2  0020               	movlb	0	; select bank0
  3538  01E3  1432               	bsf	nrf24l01InitRegisters@enRXAddr,0
  3539                           
  3540                           ;nrf24l01.c: 400: enRXAddr.ERX_P1 = 1;
  3541  01E4  14B2               	bsf	nrf24l01InitRegisters@enRXAddr,1
  3542                           
  3543                           ;nrf24l01.c: 401: enRXAddr.ERX_P2 = 1;
  3544  01E5  1532               	bsf	nrf24l01InitRegisters@enRXAddr,2
  3545                           
  3546                           ;nrf24l01.c: 402: enRXAddr.ERX_P3 = 1;
  3547  01E6  15B2               	bsf	nrf24l01InitRegisters@enRXAddr,3
  3548                           
  3549                           ;nrf24l01.c: 403: enRXAddr.ERX_P4 = 1;
  3550  01E7  1632               	bsf	nrf24l01InitRegisters@enRXAddr,4
  3551                           
  3552                           ;nrf24l01.c: 404: enRXAddr.ERX_P5 = 1;
  3553  01E8  16B2               	bsf	nrf24l01InitRegisters@enRXAddr,5
  3554                           
  3555                           ;nrf24l01.c: 405: nrf24l01Send(0b00100000 | 0x02, enRXAddr.byte);
  3556  01E9  0832               	movf	nrf24l01InitRegisters@enRXAddr,w
  3557  01EA  00AC               	movwf	??_nrf24l01InitRegisters
  3558  01EB  082C               	movf	??_nrf24l01InitRegisters,w
  3559  01EC  00A9               	movwf	nrf24l01Send@data
  3560  01ED  3022               	movlw	34
  3561  01EE  3187  27C3  3181   	fcall	_nrf24l01Send
  3562                           
  3563                           ;nrf24l01.c: 408: n_EN_AA_t enAA;;nrf24l01.c: 409: enAA.byte = nrf24l01Send(0b00000000 |
      +                           0x01, 0);
  3564  01F1  0020               	movlb	0	; select bank0
  3565  01F2  01A9               	clrf	nrf24l01Send@data
  3566  01F3  3001               	movlw	1
  3567  01F4  3187  27C3  3181   	fcall	_nrf24l01Send
  3568  01F7  0020               	movlb	0	; select bank0
  3569  01F8  00AC               	movwf	??_nrf24l01InitRegisters
  3570  01F9  082C               	movf	??_nrf24l01InitRegisters,w
  3571  01FA  00B3               	movwf	nrf24l01InitRegisters@enAA
  3572                           
  3573                           ;nrf24l01.c: 410: enAA.ENAA_P0 = 0;
  3574  01FB  1033               	bcf	nrf24l01InitRegisters@enAA,0
  3575                           
  3576                           ;nrf24l01.c: 411: enAA.ENAA_P1 = 0;
  3577  01FC  10B3               	bcf	nrf24l01InitRegisters@enAA,1
  3578                           
  3579                           ;nrf24l01.c: 412: enAA.ENAA_P2 = 0;
  3580  01FD  1133               	bcf	nrf24l01InitRegisters@enAA,2
  3581                           
  3582                           ;nrf24l01.c: 413: enAA.ENAA_P3 = 0;
  3583  01FE  11B3               	bcf	nrf24l01InitRegisters@enAA,3
  3584                           
  3585                           ;nrf24l01.c: 414: enAA.ENAA_P4 = 0;
  3586  01FF  1233               	bcf	nrf24l01InitRegisters@enAA,4
  3587                           
  3588                           ;nrf24l01.c: 415: enAA.ENAA_P5 = 0;
  3589  0200  12B3               	bcf	nrf24l01InitRegisters@enAA,5
  3590                           
  3591                           ;nrf24l01.c: 416: nrf24l01Send(0b00100000 | 0x01, enAA.byte);
  3592  0201  0833               	movf	nrf24l01InitRegisters@enAA,w
  3593  0202  00AC               	movwf	??_nrf24l01InitRegisters
  3594  0203  082C               	movf	??_nrf24l01InitRegisters,w
  3595  0204  00A9               	movwf	nrf24l01Send@data
  3596  0205  3021               	movlw	33
  3597  0206  3187  27C3  3181   	fcall	_nrf24l01Send
  3598                           
  3599                           ;nrf24l01.c: 420: n_FEATURE_t feature;;nrf24l01.c: 421: feature.byte = nrf24l01Send(0b00
      +                          000000 | 0x1D, 0);
  3600  0209  0020               	movlb	0	; select bank0
  3601  020A  01A9               	clrf	nrf24l01Send@data
  3602  020B  301D               	movlw	29
  3603  020C  3187  27C3  3181   	fcall	_nrf24l01Send
  3604  020F  0020               	movlb	0	; select bank0
  3605  0210  00AC               	movwf	??_nrf24l01InitRegisters
  3606  0211  082C               	movf	??_nrf24l01InitRegisters,w
  3607  0212  00AF               	movwf	nrf24l01InitRegisters@feature
  3608                           
  3609                           ;nrf24l01.c: 422: feature.EN_DPL = 1;
  3610  0213  152F               	bsf	nrf24l01InitRegisters@feature,2
  3611                           
  3612                           ;nrf24l01.c: 423: feature.EN_DYN_ACK = 1;
  3613  0214  142F               	bsf	nrf24l01InitRegisters@feature,0
  3614                           
  3615                           ;nrf24l01.c: 424: nrf24l01Send(0b00100000 | 0x1D, feature.byte);
  3616  0215  082F               	movf	nrf24l01InitRegisters@feature,w
  3617  0216  00AC               	movwf	??_nrf24l01InitRegisters
  3618  0217  082C               	movf	??_nrf24l01InitRegisters,w
  3619  0218  00A9               	movwf	nrf24l01Send@data
  3620  0219  303D               	movlw	61
  3621  021A  3187  27C3  3181   	fcall	_nrf24l01Send
  3622                           
  3623                           ;nrf24l01.c: 426: n_DYNPD_t DynPD;;nrf24l01.c: 427: DynPD.byte = nrf24l01Send(0b00000000
      +                           | 0x1C, 0);
  3624  021D  0020               	movlb	0	; select bank0
  3625  021E  01A9               	clrf	nrf24l01Send@data
  3626  021F  301C               	movlw	28
  3627  0220  3187  27C3  3181   	fcall	_nrf24l01Send
  3628  0223  0020               	movlb	0	; select bank0
  3629  0224  00AC               	movwf	??_nrf24l01InitRegisters
  3630  0225  082C               	movf	??_nrf24l01InitRegisters,w
  3631  0226  00B4               	movwf	nrf24l01InitRegisters@DynPD
  3632                           
  3633                           ;nrf24l01.c: 428: DynPD.DPL_P0 = 1;
  3634  0227  1434               	bsf	nrf24l01InitRegisters@DynPD,0
  3635                           
  3636                           ;nrf24l01.c: 429: DynPD.DPL_P1 = 1;
  3637  0228  14B4               	bsf	nrf24l01InitRegisters@DynPD,1
  3638                           
  3639                           ;nrf24l01.c: 430: DynPD.DPL_P2 = 1;
  3640  0229  1534               	bsf	nrf24l01InitRegisters@DynPD,2
  3641                           
  3642                           ;nrf24l01.c: 431: DynPD.DPL_P3 = 1;
  3643  022A  15B4               	bsf	nrf24l01InitRegisters@DynPD,3
  3644                           
  3645                           ;nrf24l01.c: 432: DynPD.DPL_P4 = 1;
  3646  022B  1634               	bsf	nrf24l01InitRegisters@DynPD,4
  3647                           
  3648                           ;nrf24l01.c: 433: DynPD.DPL_P5 = 1;
  3649  022C  16B4               	bsf	nrf24l01InitRegisters@DynPD,5
  3650                           
  3651                           ;nrf24l01.c: 434: nrf24l01Send(0b00100000 | 0x1C, DynPD.byte);
  3652  022D  0834               	movf	nrf24l01InitRegisters@DynPD,w
  3653  022E  00AC               	movwf	??_nrf24l01InitRegisters
  3654  022F  082C               	movf	??_nrf24l01InitRegisters,w
  3655  0230  00A9               	movwf	nrf24l01Send@data
  3656  0231  303C               	movlw	60
  3657  0232  3187  27C3  3181   	fcall	_nrf24l01Send
  3658                           
  3659                           ;nrf24l01.c: 437: n_STATUS_t status;;nrf24l01.c: 438: status.byte = 0x00;
  3660  0235  0020               	movlb	0	; select bank0
  3661  0236  01B1               	clrf	nrf24l01InitRegisters@status
  3662                           
  3663                           ;nrf24l01.c: 439: status.RX_DR = 1;
  3664  0237  1731               	bsf	nrf24l01InitRegisters@status,6
  3665                           
  3666                           ;nrf24l01.c: 440: status.TX_DS = 1;
  3667  0238  16B1               	bsf	nrf24l01InitRegisters@status,5
  3668                           
  3669                           ;nrf24l01.c: 441: status.MAX_RT = 1;
  3670  0239  1631               	bsf	nrf24l01InitRegisters@status,4
  3671                           
  3672                           ;nrf24l01.c: 442: nrf24l01Send(0b00100000 | 0x07, status.byte);
  3673  023A  0831               	movf	nrf24l01InitRegisters@status,w
  3674  023B  00AC               	movwf	??_nrf24l01InitRegisters
  3675  023C  082C               	movf	??_nrf24l01InitRegisters,w
  3676  023D  00A9               	movwf	nrf24l01Send@data
  3677  023E  3027               	movlw	39
  3678  023F  3187  27C3  3181   	fcall	_nrf24l01Send
  3679                           
  3680                           ;nrf24l01.c: 445: nrf24l01Send(0b11100001, 0);
  3681  0242  0020               	movlb	0	; select bank0
  3682  0243  01A9               	clrf	nrf24l01Send@data
  3683  0244  30E1               	movlw	225
  3684  0245  3187  27C3  3181   	fcall	_nrf24l01Send
  3685                           
  3686                           ;nrf24l01.c: 446: nrf24l01Send(0b11100010, 0);
  3687  0248  0020               	movlb	0	; select bank0
  3688  0249  01A9               	clrf	nrf24l01Send@data
  3689  024A  30E2               	movlw	226
  3690  024B  3187  27C3  3181   	fcall	_nrf24l01Send
  3691                           
  3692                           ;nrf24l01.c: 449: config.PRIM_RX = 1;
  3693  024E  0020               	movlb	0	; select bank0
  3694  024F  1435               	bsf	nrf24l01InitRegisters@config,0
  3695                           
  3696                           ;nrf24l01.c: 450: config.EN_CRC = 1;
  3697  0250  15B5               	bsf	nrf24l01InitRegisters@config,3
  3698                           
  3699                           ;nrf24l01.c: 451: config.CRCO = 1;
  3700  0251  1535               	bsf	nrf24l01InitRegisters@config,2
  3701                           
  3702                           ;nrf24l01.c: 452: config.PWR_UP = 1;
  3703  0252  14B5               	bsf	nrf24l01InitRegisters@config,1
  3704                           
  3705                           ;nrf24l01.c: 453: nrf24l01Send(0b00100000 | 0x00, config.byte);
  3706  0253  0835               	movf	nrf24l01InitRegisters@config,w
  3707  0254  00AC               	movwf	??_nrf24l01InitRegisters
  3708  0255  082C               	movf	??_nrf24l01InitRegisters,w
  3709  0256  00A9               	movwf	nrf24l01Send@data
  3710  0257  3020               	movlw	32
  3711  0258  3187  27C3         	fcall	_nrf24l01Send
  3712  025A  0008               	return
  3713  025B                     __end_of_nrf24l01InitRegisters:	
  3714                           
  3715                           	psect	text4
  3716  002C                     __ptext4:	
  3717 ;; *************** function _loop *****************
  3718 ;; Defined at:
  3719 ;;		line 74 in file "main.c"
  3720 ;; Parameters:    Size  Location     Type
  3721 ;;		None
  3722 ;; Auto vars:     Size  Location     Type
  3723 ;;		None
  3724 ;; Return value:  Size  Location     Type
  3725 ;;                  1    wreg      void 
  3726 ;; Registers used:
  3727 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3728 ;; Tracked objects:
  3729 ;;		On entry : 0/0
  3730 ;;		On exit  : 0/0
  3731 ;;		Unchanged: 0/0
  3732 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3733 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3734 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3735 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3736 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3737 ;;Total ram usage:        0 bytes
  3738 ;; Hardware stack levels used:    1
  3739 ;; Hardware stack levels required when called:   12
  3740 ;; This function calls:
  3741 ;;		_getADCValue
  3742 ;;		_nrf24l01SendString
  3743 ;;		_sleep
  3744 ;;		_strcpy
  3745 ;;		_utoa
  3746 ;; This function is called by:
  3747 ;;		_main
  3748 ;; This function uses a non-reentrant model
  3749 ;;
  3750                           
  3751                           
  3752                           ;psect for function _loop
  3753  002C                     _loop:	
  3754                           
  3755                           ;incstack = 0
  3756                           ; Regs used in _loop: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3757  002C  0064               	clrwdt	;# 
  3758                           
  3759                           ;main.c: 79: strcpy(nrf24l01TXTopic, "DBG");
  3760  002D  3030               	movlw	low (STR_1| (0+32768))
  3761  002E  0020               	movlb	0	; select bank0
  3762  002F  00A9               	movwf	strcpy@from
  3763  0030  3090               	movlw	high (STR_1| (0+32768))
  3764  0031  00AA               	movwf	strcpy@from+1
  3765  0032  305F               	movlw	(low (_nrf24l01TXTopic| 0))& (0+255)
  3766  0033  318F  27C5  3180   	fcall	_strcpy
  3767                           
  3768                           ;main.c: 80: utoa(nrf24l01TXValue, counter, 10);
  3769  0036  0020               	movlb	0	; select bank0
  3770  0037  084A               	movf	_counter+1,w
  3771  0038  00C6               	movwf	utoa@val+1
  3772  0039  0849               	movf	_counter,w
  3773  003A  00C5               	movwf	utoa@val
  3774  003B  300A               	movlw	10
  3775  003C  00C7               	movwf	utoa@base
  3776  003D  3000               	movlw	0
  3777  003E  00C8               	movwf	utoa@base+1
  3778  003F  3057               	movlw	(low (_nrf24l01TXValue| 0))& (0+255)
  3779  0040  3184  240E  3180   	fcall	_utoa
  3780                           
  3781                           ;main.c: 81: counter = 0;
  3782  0043  0020               	movlb	0	; select bank0
  3783  0044  01C9               	clrf	_counter
  3784  0045  01CA               	clrf	_counter+1
  3785                           
  3786                           ;main.c: 82: nrf24l01TXPacketData.byte = 0;
  3787  0046  01CE               	clrf	_nrf24l01TXPacketData
  3788                           
  3789                           ;main.c: 84: nrf24l01SendString();
  3790  0047  3180  20FF  3180   	fcall	_nrf24l01SendString
  3791                           
  3792                           ;main.c: 85: sleep();
  3793  004A  318F  2746  3180   	fcall	_sleep
  3794                           
  3795                           ;main.c: 87: strcpy(nrf24l01TXTopic, "VBAT");
  3796  004D  3022               	movlw	low (STR_2| (0+32768))
  3797  004E  0020               	movlb	0	; select bank0
  3798  004F  00A9               	movwf	strcpy@from
  3799  0050  3090               	movlw	high (STR_2| (0+32768))
  3800  0051  00AA               	movwf	strcpy@from+1
  3801  0052  305F               	movlw	(low (_nrf24l01TXTopic| 0))& (0+255)
  3802  0053  318F  27C5  3180   	fcall	_strcpy
  3803                           
  3804                           ;main.c: 88: utoa(nrf24l01TXValue, getADCValue(0b000100, 2505), 10);
  3805  0056  3000               	movlw	0
  3806  0057  0020               	movlb	0	; select bank0
  3807  0058  00BA               	movwf	getADCValue@divider+3
  3808  0059  3000               	movlw	0
  3809  005A  00B9               	movwf	getADCValue@divider+2
  3810  005B  3009               	movlw	9
  3811  005C  00B8               	movwf	getADCValue@divider+1
  3812  005D  30C9               	movlw	201
  3813  005E  00B7               	movwf	getADCValue@divider
  3814  005F  3004               	movlw	4
  3815  0060  3183  2386  3180   	fcall	_getADCValue
  3816  0063  0020               	movlb	0	; select bank0
  3817  0064  0838               	movf	?_getADCValue+1,w
  3818  0065  00C6               	movwf	utoa@val+1
  3819  0066  0837               	movf	?_getADCValue,w
  3820  0067  00C5               	movwf	utoa@val
  3821  0068  300A               	movlw	10
  3822  0069  00C7               	movwf	utoa@base
  3823  006A  3000               	movlw	0
  3824  006B  00C8               	movwf	utoa@base+1
  3825  006C  3057               	movlw	(low (_nrf24l01TXValue| 0))& (0+255)
  3826  006D  3184  240E  3180   	fcall	_utoa
  3827                           
  3828                           ;main.c: 89: nrf24l01TXPacketData.byte = 0;
  3829  0070  0020               	movlb	0	; select bank0
  3830  0071  01CE               	clrf	_nrf24l01TXPacketData
  3831                           
  3832                           ;main.c: 90: nrf24l01TXPacketData.ACKRequest = 1;
  3833  0072  144E               	bsf	_nrf24l01TXPacketData,0
  3834                           
  3835                           ;main.c: 91: nrf24l01SendString();
  3836  0073  3180  20FF  3180   	fcall	_nrf24l01SendString
  3837                           
  3838                           ;main.c: 92: sleep();
  3839  0076  318F  2746  3180   	fcall	_sleep
  3840                           
  3841                           ;main.c: 94: strcpy(nrf24l01TXTopic, "ANC3");
  3842  0079  3018               	movlw	low (STR_3| (0+32768))
  3843  007A  0020               	movlb	0	; select bank0
  3844  007B  00A9               	movwf	strcpy@from
  3845  007C  3090               	movlw	high (STR_3| (0+32768))
  3846  007D  00AA               	movwf	strcpy@from+1
  3847  007E  305F               	movlw	(low (_nrf24l01TXTopic| 0))& (0+255)
  3848  007F  318F  27C5  3180   	fcall	_strcpy
  3849                           
  3850                           ;main.c: 95: utoa(nrf24l01TXValue, getADCValue(0b010011, 2500), 10);
  3851  0082  3000               	movlw	0
  3852  0083  0020               	movlb	0	; select bank0
  3853  0084  00BA               	movwf	getADCValue@divider+3
  3854  0085  3000               	movlw	0
  3855  0086  00B9               	movwf	getADCValue@divider+2
  3856  0087  3009               	movlw	9
  3857  0088  00B8               	movwf	getADCValue@divider+1
  3858  0089  30C4               	movlw	196
  3859  008A  00B7               	movwf	getADCValue@divider
  3860  008B  3013               	movlw	19
  3861  008C  3183  2386  3180   	fcall	_getADCValue
  3862  008F  0020               	movlb	0	; select bank0
  3863  0090  0838               	movf	?_getADCValue+1,w
  3864  0091  00C6               	movwf	utoa@val+1
  3865  0092  0837               	movf	?_getADCValue,w
  3866  0093  00C5               	movwf	utoa@val
  3867  0094  300A               	movlw	10
  3868  0095  00C7               	movwf	utoa@base
  3869  0096  3000               	movlw	0
  3870  0097  00C8               	movwf	utoa@base+1
  3871  0098  3057               	movlw	(low (_nrf24l01TXValue| 0))& (0+255)
  3872  0099  3184  240E  3180   	fcall	_utoa
  3873                           
  3874                           ;main.c: 96: nrf24l01TXPacketData.byte = 0;
  3875  009C  0020               	movlb	0	; select bank0
  3876  009D  01CE               	clrf	_nrf24l01TXPacketData
  3877                           
  3878                           ;main.c: 97: nrf24l01TXPacketData.ACKRequest = 0;
  3879  009E  104E               	bcf	_nrf24l01TXPacketData,0
  3880                           
  3881                           ;main.c: 98: nrf24l01SendString();
  3882  009F  3180  20FF  3180   	fcall	_nrf24l01SendString
  3883                           
  3884                           ;main.c: 99: sleep();
  3885  00A2  318F  2746  3180   	fcall	_sleep
  3886                           
  3887                           ;main.c: 101: strcpy(nrf24l01TXTopic, "FVR");
  3888  00A5  3034               	movlw	low (STR_4| (0+32768))
  3889  00A6  0020               	movlb	0	; select bank0
  3890  00A7  00A9               	movwf	strcpy@from
  3891  00A8  3090               	movlw	high (STR_4| (0+32768))
  3892  00A9  00AA               	movwf	strcpy@from+1
  3893  00AA  305F               	movlw	(low (_nrf24l01TXTopic| 0))& (0+255)
  3894  00AB  318F  27C5  3180   	fcall	_strcpy
  3895                           
  3896                           ;main.c: 102: utoa(nrf24l01TXValue, getADCValue(0b111111, 208900) - 40, 10);
  3897  00AE  3000               	movlw	0
  3898  00AF  0020               	movlb	0	; select bank0
  3899  00B0  00BA               	movwf	getADCValue@divider+3
  3900  00B1  3003               	movlw	3
  3901  00B2  00B9               	movwf	getADCValue@divider+2
  3902  00B3  3030               	movlw	48
  3903  00B4  00B8               	movwf	getADCValue@divider+1
  3904  00B5  3004               	movlw	4
  3905  00B6  00B7               	movwf	getADCValue@divider
  3906  00B7  303F               	movlw	63
  3907  00B8  3183  2386  3180   	fcall	_getADCValue
  3908  00BB  0020               	movlb	0	; select bank0
  3909  00BC  0837               	movf	?_getADCValue,w
  3910  00BD  3ED8               	addlw	216
  3911  00BE  00C5               	movwf	utoa@val
  3912  00BF  30FF               	movlw	255
  3913  00C0  3D38               	addwfc	?_getADCValue+1,w
  3914  00C1  00C6               	movwf	utoa@val+1
  3915  00C2  300A               	movlw	10
  3916  00C3  00C7               	movwf	utoa@base
  3917  00C4  3000               	movlw	0
  3918  00C5  00C8               	movwf	utoa@base+1
  3919  00C6  3057               	movlw	(low (_nrf24l01TXValue| 0))& (0+255)
  3920  00C7  3184  240E  3180   	fcall	_utoa
  3921                           
  3922                           ;main.c: 103: nrf24l01TXPacketData.byte = 0;
  3923  00CA  0020               	movlb	0	; select bank0
  3924  00CB  01CE               	clrf	_nrf24l01TXPacketData
  3925                           
  3926                           ;main.c: 104: nrf24l01TXPacketData.ACKRequest = 0;
  3927  00CC  104E               	bcf	_nrf24l01TXPacketData,0
  3928                           
  3929                           ;main.c: 105: nrf24l01SendString();
  3930  00CD  3180  20FF  3180   	fcall	_nrf24l01SendString
  3931                           
  3932                           ;main.c: 106: sleep();
  3933  00D0  318F  2746  3180   	fcall	_sleep
  3934                           
  3935                           ;main.c: 108: strcpy(nrf24l01TXTopic, "TEMP");
  3936  00D3  301D               	movlw	low (STR_5| (0+32768))
  3937  00D4  0020               	movlb	0	; select bank0
  3938  00D5  00A9               	movwf	strcpy@from
  3939  00D6  3090               	movlw	high (STR_5| (0+32768))
  3940  00D7  00AA               	movwf	strcpy@from+1
  3941  00D8  305F               	movlw	(low (_nrf24l01TXTopic| 0))& (0+255)
  3942  00D9  318F  27C5  3180   	fcall	_strcpy
  3943                           
  3944                           ;main.c: 109: utoa(nrf24l01TXValue, getADCValue(0b111101, 2475), 10);
  3945  00DC  3000               	movlw	0
  3946  00DD  0020               	movlb	0	; select bank0
  3947  00DE  00BA               	movwf	getADCValue@divider+3
  3948  00DF  3000               	movlw	0
  3949  00E0  00B9               	movwf	getADCValue@divider+2
  3950  00E1  3009               	movlw	9
  3951  00E2  00B8               	movwf	getADCValue@divider+1
  3952  00E3  30AB               	movlw	171
  3953  00E4  00B7               	movwf	getADCValue@divider
  3954  00E5  303D               	movlw	61
  3955  00E6  3183  2386  3180   	fcall	_getADCValue
  3956  00E9  0020               	movlb	0	; select bank0
  3957  00EA  0838               	movf	?_getADCValue+1,w
  3958  00EB  00C6               	movwf	utoa@val+1
  3959  00EC  0837               	movf	?_getADCValue,w
  3960  00ED  00C5               	movwf	utoa@val
  3961  00EE  300A               	movlw	10
  3962  00EF  00C7               	movwf	utoa@base
  3963  00F0  3000               	movlw	0
  3964  00F1  00C8               	movwf	utoa@base+1
  3965  00F2  3057               	movlw	(low (_nrf24l01TXValue| 0))& (0+255)
  3966  00F3  3184  240E  3180   	fcall	_utoa
  3967                           
  3968                           ;main.c: 110: nrf24l01TXPacketData.byte = 0;
  3969  00F6  0020               	movlb	0	; select bank0
  3970  00F7  01CE               	clrf	_nrf24l01TXPacketData
  3971                           
  3972                           ;main.c: 111: nrf24l01TXPacketData.ACKRequest = 0;
  3973  00F8  104E               	bcf	_nrf24l01TXPacketData,0
  3974                           
  3975                           ;main.c: 112: nrf24l01SendString();
  3976  00F9  3180  20FF  3180   	fcall	_nrf24l01SendString
  3977                           
  3978                           ;main.c: 113: sleep();
  3979  00FC  318F  2746         	fcall	_sleep
  3980  00FE  0008               	return
  3981  00FF                     __end_of_loop:	
  3982                           
  3983                           	psect	text5
  3984  040E                     __ptext5:	
  3985 ;; *************** function _utoa *****************
  3986 ;; Defined at:
  3987 ;;		line 17 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\itoa.c"
  3988 ;; Parameters:    Size  Location     Type
  3989 ;;  buf             1    wreg     PTR unsigned char 
  3990 ;;		 -> nrf24l01TXValue(8), 
  3991 ;;  val             2   37[BANK0 ] unsigned int 
  3992 ;;  base            2   39[BANK0 ] int 
  3993 ;; Auto vars:     Size  Location     Type
  3994 ;;  buf             1    4[BANK1 ] PTR unsigned char 
  3995 ;;		 -> nrf24l01TXValue(8), 
  3996 ;;  v               2    1[BANK1 ] unsigned int 
  3997 ;;  c               1    3[BANK1 ] unsigned char 
  3998 ;; Return value:  Size  Location     Type
  3999 ;;                  1    wreg      PTR unsigned char 
  4000 ;; Registers used:
  4001 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4002 ;; Tracked objects:
  4003 ;;		On entry : 0/0
  4004 ;;		On exit  : 0/0
  4005 ;;		Unchanged: 0/0
  4006 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4007 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4008 ;;      Locals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  4009 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  4010 ;;      Totals:         0       4       5       0       0       0       0       0       0       0       0       0       
      +0       0
  4011 ;;Total ram usage:        9 bytes
  4012 ;; Hardware stack levels used:    1
  4013 ;; Hardware stack levels required when called:    8
  4014 ;; This function calls:
  4015 ;;		___lwdiv
  4016 ;;		___lwmod
  4017 ;; This function is called by:
  4018 ;;		_loop
  4019 ;;		_main
  4020 ;; This function uses a non-reentrant model
  4021 ;;
  4022                           
  4023                           
  4024                           ;psect for function _utoa
  4025  040E                     _utoa:	
  4026                           
  4027                           ;incstack = 0
  4028                           ; Regs used in _utoa: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4029                           ;utoa@buf stored from wreg
  4030  040E  0021               	movlb	1	; select bank1
  4031  040F  00DF               	movwf	utoa@buf^(0+128)
  4032  0410  0020               	movlb	0	; select bank0
  4033  0411  0846               	movf	utoa@val+1,w
  4034  0412  0021               	movlb	1	; select bank1
  4035  0413  00DD               	movwf	(utoa@v+1)^(0+128)
  4036  0414  0020               	movlb	0	; select bank0
  4037  0415  0845               	movf	utoa@val,w
  4038  0416  0021               	movlb	1	; select bank1
  4039  0417  00DC               	movwf	utoa@v^(0+128)
  4040  0418                     l3223:	
  4041  0418  0020               	movlb	0	; select bank0
  4042  0419  0848               	movf	utoa@base+1,w
  4043  041A  00AA               	movwf	___lwdiv@divisor+1
  4044  041B  0847               	movf	utoa@base,w
  4045  041C  00A9               	movwf	___lwdiv@divisor
  4046  041D  0021               	movlb	1	; select bank1
  4047  041E  085D               	movf	(utoa@v+1)^(0+128),w
  4048  041F  0020               	movlb	0	; select bank0
  4049  0420  00AC               	movwf	___lwdiv@dividend+1
  4050  0421  0021               	movlb	1	; select bank1
  4051  0422  085C               	movf	utoa@v^(0+128),w
  4052  0423  0020               	movlb	0	; select bank0
  4053  0424  00AB               	movwf	___lwdiv@dividend
  4054  0425  3185  25BA  3184   	fcall	___lwdiv
  4055  0428  0020               	movlb	0	; select bank0
  4056  0429  082A               	movf	?___lwdiv+1,w
  4057  042A  0021               	movlb	1	; select bank1
  4058  042B  00DD               	movwf	(utoa@v+1)^(0+128)
  4059  042C  0020               	movlb	0	; select bank0
  4060  042D  0829               	movf	?___lwdiv,w
  4061  042E  0021               	movlb	1	; select bank1
  4062  042F  00DC               	movwf	utoa@v^(0+128)
  4063  0430  3001               	movlw	1
  4064  0431  00DB               	movwf	??_utoa^(0+128)
  4065  0432  085B               	movf	??_utoa^(0+128),w
  4066  0433  07DF               	addwf	utoa@buf^(0+128),f
  4067  0434  085C               	movf	utoa@v^(0+128),w
  4068  0435  045D               	iorwf	(utoa@v+1)^(0+128),w
  4069  0436  1D03               	btfss	3,2
  4070  0437  2C18               	goto	l3223
  4071  0438  085F               	movf	utoa@buf^(0+128),w
  4072  0439  0086               	movwf	6
  4073  043A  0187               	clrf	7
  4074  043B  0181               	clrf	1
  4075  043C  3001               	movlw	1
  4076  043D  02DF               	subwf	utoa@buf^(0+128),f
  4077  043E                     l3233:	
  4078  043E  0020               	movlb	0	; select bank0
  4079  043F  0848               	movf	utoa@base+1,w
  4080  0440  00AA               	movwf	___lwmod@divisor+1
  4081  0441  0847               	movf	utoa@base,w
  4082  0442  00A9               	movwf	___lwmod@divisor
  4083  0443  0846               	movf	utoa@val+1,w
  4084  0444  00AC               	movwf	___lwmod@dividend+1
  4085  0445  0845               	movf	utoa@val,w
  4086  0446  00AB               	movwf	___lwmod@dividend
  4087  0447  3186  26DF  3184   	fcall	___lwmod
  4088  044A  0020               	movlb	0	; select bank0
  4089  044B  0829               	movf	?___lwmod,w
  4090  044C  0021               	movlb	1	; select bank1
  4091  044D  00DB               	movwf	??_utoa^(0+128)
  4092  044E  085B               	movf	??_utoa^(0+128),w
  4093  044F  00DE               	movwf	utoa@c^(0+128)
  4094  0450  0020               	movlb	0	; select bank0
  4095  0451  0848               	movf	utoa@base+1,w
  4096  0452  00AA               	movwf	___lwdiv@divisor+1
  4097  0453  0847               	movf	utoa@base,w
  4098  0454  00A9               	movwf	___lwdiv@divisor
  4099  0455  0846               	movf	utoa@val+1,w
  4100  0456  00AC               	movwf	___lwdiv@dividend+1
  4101  0457  0845               	movf	utoa@val,w
  4102  0458  00AB               	movwf	___lwdiv@dividend
  4103  0459  3185  25BA  3184   	fcall	___lwdiv
  4104  045C  0020               	movlb	0	; select bank0
  4105  045D  082A               	movf	?___lwdiv+1,w
  4106  045E  00C6               	movwf	utoa@val+1
  4107  045F  0829               	movf	?___lwdiv,w
  4108  0460  00C5               	movwf	utoa@val
  4109  0461  300A               	movlw	10
  4110  0462  0021               	movlb	1	; select bank1
  4111  0463  025E               	subwf	utoa@c^(0+128),w
  4112  0464  1C03               	skipc
  4113  0465  2C6A               	goto	l879
  4114  0466  3007               	movlw	7
  4115  0467  00DB               	movwf	??_utoa^(0+128)
  4116  0468  085B               	movf	??_utoa^(0+128),w
  4117  0469  07DE               	addwf	utoa@c^(0+128),f
  4118  046A                     l879:	
  4119  046A  3030               	movlw	48
  4120  046B  00DB               	movwf	??_utoa^(0+128)
  4121  046C  085B               	movf	??_utoa^(0+128),w
  4122  046D  07DE               	addwf	utoa@c^(0+128),f
  4123  046E  085E               	movf	utoa@c^(0+128),w
  4124  046F  00DB               	movwf	??_utoa^(0+128)
  4125  0470  085F               	movf	utoa@buf^(0+128),w
  4126  0471  0086               	movwf	6
  4127  0472  0187               	clrf	7
  4128  0473  085B               	movf	??_utoa^(0+128),w
  4129  0474  0081               	movwf	1
  4130  0475  3001               	movlw	1
  4131  0476  02DF               	subwf	utoa@buf^(0+128),f
  4132  0477  0020               	movlb	0	; select bank0
  4133  0478  0845               	movf	utoa@val,w
  4134  0479  0446               	iorwf	utoa@val+1,w
  4135  047A  1D03               	btfss	3,2
  4136  047B  2C3E               	goto	l3233
  4137                           
  4138                           ;	Return value of _utoa is never used
  4139  047C  3001               	movlw	1
  4140  047D  0021               	movlb	1	; select bank1
  4141  047E  00DB               	movwf	??_utoa^(0+128)
  4142  047F  085B               	movf	??_utoa^(0+128),w
  4143  0480  07DF               	addwf	utoa@buf^(0+128),f
  4144  0481  0008               	return
  4145  0482                     __end_of_utoa:	
  4146                           
  4147                           	psect	text6
  4148  06DF                     __ptext6:	
  4149 ;; *************** function ___lwmod *****************
  4150 ;; Defined at:
  4151 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\lwmod.c"
  4152 ;; Parameters:    Size  Location     Type
  4153 ;;  divisor         2    9[BANK0 ] unsigned int 
  4154 ;;  dividend        2   11[BANK0 ] unsigned int 
  4155 ;; Auto vars:     Size  Location     Type
  4156 ;;  counter         1   14[BANK0 ] unsigned char 
  4157 ;; Return value:  Size  Location     Type
  4158 ;;                  2    9[BANK0 ] unsigned int 
  4159 ;; Registers used:
  4160 ;;		wreg, status,2, status,0
  4161 ;; Tracked objects:
  4162 ;;		On entry : 0/0
  4163 ;;		On exit  : 0/0
  4164 ;;		Unchanged: 0/0
  4165 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4166 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4167 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4168 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4169 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4170 ;;Total ram usage:        6 bytes
  4171 ;; Hardware stack levels used:    1
  4172 ;; Hardware stack levels required when called:    7
  4173 ;; This function calls:
  4174 ;;		Nothing
  4175 ;; This function is called by:
  4176 ;;		_utoa
  4177 ;; This function uses a non-reentrant model
  4178 ;;
  4179                           
  4180                           
  4181                           ;psect for function ___lwmod
  4182  06DF                     ___lwmod:	
  4183                           
  4184                           ;incstack = 0
  4185                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  4186  06DF  0020               	movlb	0	; select bank0
  4187  06E0  0829               	movf	___lwmod@divisor,w
  4188  06E1  042A               	iorwf	___lwmod@divisor+1,w
  4189  06E2  1903               	btfsc	3,2
  4190  06E3  2F07               	goto	l3071
  4191  06E4  01AE               	clrf	___lwmod@counter
  4192  06E5  0AAE               	incf	___lwmod@counter,f
  4193  06E6                     l3061:	
  4194  06E6  1BAA               	btfsc	___lwmod@divisor+1,7
  4195  06E7  2EF2               	goto	l3063
  4196  06E8  3001               	movlw	1
  4197  06E9                     u1905:	
  4198  06E9  35A9               	lslf	___lwmod@divisor,f
  4199  06EA  0DAA               	rlf	___lwmod@divisor+1,f
  4200  06EB  0B89               	decfsz	9,f
  4201  06EC  2EE9               	goto	u1905
  4202  06ED  3001               	movlw	1
  4203  06EE  00AD               	movwf	??___lwmod
  4204  06EF  082D               	movf	??___lwmod,w
  4205  06F0  07AE               	addwf	___lwmod@counter,f
  4206  06F1  2EE6               	goto	l3061
  4207  06F2                     l3063:	
  4208  06F2  082A               	movf	___lwmod@divisor+1,w
  4209  06F3  022C               	subwf	___lwmod@dividend+1,w
  4210  06F4  1D03               	skipz
  4211  06F5  2EF8               	goto	u1925
  4212  06F6  0829               	movf	___lwmod@divisor,w
  4213  06F7  022B               	subwf	___lwmod@dividend,w
  4214  06F8                     u1925:	
  4215  06F8  1C03               	skipc
  4216  06F9  2EFE               	goto	l3067
  4217  06FA  0829               	movf	___lwmod@divisor,w
  4218  06FB  02AB               	subwf	___lwmod@dividend,f
  4219  06FC  082A               	movf	___lwmod@divisor+1,w
  4220  06FD  3BAC               	subwfb	___lwmod@dividend+1,f
  4221  06FE                     l3067:	
  4222  06FE  3001               	movlw	1
  4223  06FF                     u1935:	
  4224  06FF  36AA               	lsrf	___lwmod@divisor+1,f
  4225  0700  0CA9               	rrf	___lwmod@divisor,f
  4226  0701  0B89               	decfsz	9,f
  4227  0702  2EFF               	goto	u1935
  4228  0703  3001               	movlw	1
  4229  0704  02AE               	subwf	___lwmod@counter,f
  4230  0705  1D03               	btfss	3,2
  4231  0706  2EF2               	goto	l3063
  4232  0707                     l3071:	
  4233  0707  082C               	movf	___lwmod@dividend+1,w
  4234  0708  00AA               	movwf	?___lwmod+1
  4235  0709  082B               	movf	___lwmod@dividend,w
  4236  070A  00A9               	movwf	?___lwmod
  4237  070B  0008               	return
  4238  070C                     __end_of___lwmod:	
  4239                           
  4240                           	psect	text7
  4241  05BA                     __ptext7:	
  4242 ;; *************** function ___lwdiv *****************
  4243 ;; Defined at:
  4244 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\lwdiv.c"
  4245 ;; Parameters:    Size  Location     Type
  4246 ;;  divisor         2    9[BANK0 ] unsigned int 
  4247 ;;  dividend        2   11[BANK0 ] unsigned int 
  4248 ;; Auto vars:     Size  Location     Type
  4249 ;;  quotient        2   15[BANK0 ] unsigned int 
  4250 ;;  counter         1   14[BANK0 ] unsigned char 
  4251 ;; Return value:  Size  Location     Type
  4252 ;;                  2    9[BANK0 ] unsigned int 
  4253 ;; Registers used:
  4254 ;;		wreg, status,2, status,0
  4255 ;; Tracked objects:
  4256 ;;		On entry : 0/0
  4257 ;;		On exit  : 0/0
  4258 ;;		Unchanged: 0/0
  4259 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4260 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4261 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4262 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4263 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4264 ;;Total ram usage:        8 bytes
  4265 ;; Hardware stack levels used:    1
  4266 ;; Hardware stack levels required when called:    7
  4267 ;; This function calls:
  4268 ;;		Nothing
  4269 ;; This function is called by:
  4270 ;;		_utoa
  4271 ;; This function uses a non-reentrant model
  4272 ;;
  4273                           
  4274                           
  4275                           ;psect for function ___lwdiv
  4276  05BA                     ___lwdiv:	
  4277                           
  4278                           ;incstack = 0
  4279                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  4280  05BA  0020               	movlb	0	; select bank0
  4281  05BB  01AF               	clrf	___lwdiv@quotient
  4282  05BC  01B0               	clrf	___lwdiv@quotient+1
  4283  05BD  0829               	movf	___lwdiv@divisor,w
  4284  05BE  042A               	iorwf	___lwdiv@divisor+1,w
  4285  05BF  1903               	btfsc	3,2
  4286  05C0  2DEA               	goto	l3049
  4287  05C1  01AE               	clrf	___lwdiv@counter
  4288  05C2  0AAE               	incf	___lwdiv@counter,f
  4289  05C3                     l3037:	
  4290  05C3  1BAA               	btfsc	___lwdiv@divisor+1,7
  4291  05C4  2DCF               	goto	l3039
  4292  05C5  3001               	movlw	1
  4293  05C6                     u1835:	
  4294  05C6  35A9               	lslf	___lwdiv@divisor,f
  4295  05C7  0DAA               	rlf	___lwdiv@divisor+1,f
  4296  05C8  0B89               	decfsz	9,f
  4297  05C9  2DC6               	goto	u1835
  4298  05CA  3001               	movlw	1
  4299  05CB  00AD               	movwf	??___lwdiv
  4300  05CC  082D               	movf	??___lwdiv,w
  4301  05CD  07AE               	addwf	___lwdiv@counter,f
  4302  05CE  2DC3               	goto	l3037
  4303  05CF                     l3039:	
  4304  05CF  3001               	movlw	1
  4305  05D0                     u1855:	
  4306  05D0  35AF               	lslf	___lwdiv@quotient,f
  4307  05D1  0DB0               	rlf	___lwdiv@quotient+1,f
  4308  05D2  0B89               	decfsz	9,f
  4309  05D3  2DD0               	goto	u1855
  4310  05D4  082A               	movf	___lwdiv@divisor+1,w
  4311  05D5  022C               	subwf	___lwdiv@dividend+1,w
  4312  05D6  1D03               	skipz
  4313  05D7  2DDA               	goto	u1865
  4314  05D8  0829               	movf	___lwdiv@divisor,w
  4315  05D9  022B               	subwf	___lwdiv@dividend,w
  4316  05DA                     u1865:	
  4317  05DA  1C03               	skipc
  4318  05DB  2DE1               	goto	l3045
  4319  05DC  0829               	movf	___lwdiv@divisor,w
  4320  05DD  02AB               	subwf	___lwdiv@dividend,f
  4321  05DE  082A               	movf	___lwdiv@divisor+1,w
  4322  05DF  3BAC               	subwfb	___lwdiv@dividend+1,f
  4323  05E0  142F               	bsf	___lwdiv@quotient,0
  4324  05E1                     l3045:	
  4325  05E1  3001               	movlw	1
  4326  05E2                     u1875:	
  4327  05E2  36AA               	lsrf	___lwdiv@divisor+1,f
  4328  05E3  0CA9               	rrf	___lwdiv@divisor,f
  4329  05E4  0B89               	decfsz	9,f
  4330  05E5  2DE2               	goto	u1875
  4331  05E6  3001               	movlw	1
  4332  05E7  02AE               	subwf	___lwdiv@counter,f
  4333  05E8  1D03               	btfss	3,2
  4334  05E9  2DCF               	goto	l3039
  4335  05EA                     l3049:	
  4336  05EA  0830               	movf	___lwdiv@quotient+1,w
  4337  05EB  00AA               	movwf	?___lwdiv+1
  4338  05EC  082F               	movf	___lwdiv@quotient,w
  4339  05ED  00A9               	movwf	?___lwdiv
  4340  05EE  0008               	return
  4341  05EF                     __end_of___lwdiv:	
  4342                           
  4343                           	psect	text8
  4344  0FC5                     __ptext8:	
  4345 ;; *************** function _strcpy *****************
  4346 ;; Defined at:
  4347 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\strcpy.c"
  4348 ;; Parameters:    Size  Location     Type
  4349 ;;  to              1    wreg     PTR unsigned char 
  4350 ;;		 -> nrf24l01TXName(16), nrf24l01TXTopic(8), romData(19), 
  4351 ;;  from            2    9[BANK0 ] PTR const unsigned char 
  4352 ;;		 -> STR_7(5), STR_6(4), romData.name(16), STR_5(5), 
  4353 ;;		 -> STR_4(4), STR_3(5), STR_2(5), STR_1(4), 
  4354 ;;		 -> romData(19), 
  4355 ;; Auto vars:     Size  Location     Type
  4356 ;;  to              1   13[BANK0 ] PTR unsigned char 
  4357 ;;		 -> nrf24l01TXName(16), nrf24l01TXTopic(8), romData(19), 
  4358 ;;  cp              1   12[BANK0 ] PTR unsigned char 
  4359 ;;		 -> nrf24l01TXName(16), nrf24l01TXTopic(8), romData(19), 
  4360 ;; Return value:  Size  Location     Type
  4361 ;;                  1    wreg      PTR unsigned char 
  4362 ;; Registers used:
  4363 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath
  4364 ;; Tracked objects:
  4365 ;;		On entry : 0/0
  4366 ;;		On exit  : 0/0
  4367 ;;		Unchanged: 0/0
  4368 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4369 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4370 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4371 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4372 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4373 ;;Total ram usage:        5 bytes
  4374 ;; Hardware stack levels used:    1
  4375 ;; Hardware stack levels required when called:    7
  4376 ;; This function calls:
  4377 ;;		Nothing
  4378 ;; This function is called by:
  4379 ;;		_loop
  4380 ;;		_main
  4381 ;; This function uses a non-reentrant model
  4382 ;;
  4383                           
  4384                           
  4385                           ;psect for function _strcpy
  4386  0FC5                     _strcpy:	
  4387                           
  4388                           ;incstack = 0
  4389                           ; Regs used in _strcpy: [wreg-fsr1h+status,2+status,0+pclath]
  4390                           ;strcpy@to stored from wreg
  4391  0FC5  0020               	movlb	0	; select bank0
  4392  0FC6  00AD               	movwf	strcpy@to
  4393  0FC7  082D               	movf	strcpy@to,w
  4394  0FC8  00AB               	movwf	??_strcpy
  4395  0FC9  082B               	movf	??_strcpy,w
  4396  0FCA  00AC               	movwf	strcpy@cp
  4397  0FCB                     l3219:	
  4398  0FCB  082C               	movf	strcpy@cp,w
  4399  0FCC  0086               	movwf	6
  4400  0FCD  0187               	clrf	7
  4401  0FCE  0829               	movf	strcpy@from,w
  4402  0FCF  0084               	movwf	4
  4403  0FD0  082A               	movf	strcpy@from+1,w
  4404  0FD1  0085               	movwf	5
  4405  0FD2  0800               	movf	0,w	;code access
  4406  0FD3  3FC0               	movwi [0]fsr1
  4407  0FD4  0889               	movf	9,f
  4408  0FD5  1903               	btfsc	3,2
  4409  0FD6  0008               	return
  4410  0FD7  3001               	movlw	1
  4411  0FD8  00AB               	movwf	??_strcpy
  4412  0FD9  082B               	movf	??_strcpy,w
  4413  0FDA  07AC               	addwf	strcpy@cp,f
  4414  0FDB  3001               	movlw	1
  4415  0FDC  07A9               	addwf	strcpy@from,f
  4416  0FDD  3000               	movlw	0
  4417  0FDE  3DAA               	addwfc	strcpy@from+1,f
  4418  0FDF  2FCB               	goto	l3219
  4419  0FE0                     __end_of_strcpy:	
  4420                           ;	Return value of _strcpy is never used
  4421                           
  4422                           
  4423                           	psect	text9
  4424  0F46                     __ptext9:	
  4425 ;; *************** function _sleep *****************
  4426 ;; Defined at:
  4427 ;;		line 49 in file "main.c"
  4428 ;; Parameters:    Size  Location     Type
  4429 ;;		None
  4430 ;; Auto vars:     Size  Location     Type
  4431 ;;		None
  4432 ;; Return value:  Size  Location     Type
  4433 ;;                  1    wreg      void 
  4434 ;; Registers used:
  4435 ;;		None
  4436 ;; Tracked objects:
  4437 ;;		On entry : 0/0
  4438 ;;		On exit  : 0/0
  4439 ;;		Unchanged: 0/0
  4440 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4441 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4442 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4443 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4444 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4445 ;;Total ram usage:        0 bytes
  4446 ;; Hardware stack levels used:    1
  4447 ;; Hardware stack levels required when called:    7
  4448 ;; This function calls:
  4449 ;;		Nothing
  4450 ;; This function is called by:
  4451 ;;		_loop
  4452 ;;		_main
  4453 ;;		_checkRxData
  4454 ;; This function uses a non-reentrant model
  4455 ;;
  4456                           
  4457                           
  4458                           ;psect for function _sleep
  4459  0F46                     _sleep:	
  4460  0F46                     l219:	
  4461                           ;incstack = 0
  4462                           ; Regs used in _sleep: []
  4463                           ;main.c: 50: while (1){
  4464                           
  4465  0F46  0063               	sleep	;# 
  4466                           
  4467                           ;main.c: 53: __nop();
  4468  0F47  0000               	nop
  4469                           
  4470                           ;main.c: 54: __nop();
  4471  0F48  0000               	nop
  4472                           
  4473                           ;main.c: 56: if (!STATUSbits.nTO && !STATUSbits.nPD) {
  4474  0F49  0020               	movlb	0	; select bank0
  4475  0F4A  1A03               	btfsc	3,4	;volatile
  4476  0F4B  2F46               	goto	l219
  4477  0F4C  1D83               	btfss	3,3	;volatile
  4478  0F4D  0008               	return
  4479  0F4E  2F46               	goto	l219
  4480  0F4F                     __end_of_sleep:	
  4481                           ;main.c: 57: return;
  4482                           
  4483                           
  4484                           	psect	text10
  4485  00FF                     __ptext10:	
  4486 ;; *************** function _nrf24l01SendString *****************
  4487 ;; Defined at:
  4488 ;;		line 237 in file "nrf24l01.c"
  4489 ;; Parameters:    Size  Location     Type
  4490 ;;		None
  4491 ;; Auto vars:     Size  Location     Type
  4492 ;;  i               1   16[BANK0 ] unsigned char 
  4493 ;; Return value:  Size  Location     Type
  4494 ;;                  1    wreg      void 
  4495 ;; Registers used:
  4496 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4497 ;; Tracked objects:
  4498 ;;		On entry : 0/0
  4499 ;;		On exit  : 0/0
  4500 ;;		Unchanged: 0/0
  4501 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4502 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4503 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4504 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4505 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4506 ;;Total ram usage:        2 bytes
  4507 ;; Hardware stack levels used:    1
  4508 ;; Hardware stack levels required when called:   11
  4509 ;; This function calls:
  4510 ;;		_enableInterrupts
  4511 ;;		_nrf24l01CEHigh
  4512 ;;		_nrf24l01CELow
  4513 ;;		_nrf24l01SPIEnd
  4514 ;;		_nrf24l01SPISend
  4515 ;;		_nrf24l01SPIStart
  4516 ;;		_nrf24l01SetRXMode
  4517 ;; This function is called by:
  4518 ;;		_loop
  4519 ;;		_main
  4520 ;; This function uses a non-reentrant model
  4521 ;;
  4522                           
  4523                           
  4524                           ;psect for function _nrf24l01SendString
  4525  00FF                     _nrf24l01SendString:	
  4526                           
  4527                           ;nrf24l01.c: 240: unsigned char i;;nrf24l01.c: 242: if (counter){
  4528                           
  4529                           ;incstack = 0
  4530                           ; Regs used in _nrf24l01SendString: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4531  00FF  0020               	movlb	0	; select bank0
  4532  0100  0849               	movf	_counter,w
  4533  0101  044A               	iorwf	_counter+1,w
  4534  0102  1903               	btfsc	3,2
  4535  0103  2908               	goto	l334
  4536                           
  4537                           ;nrf24l01.c: 243: counter--;
  4538  0104  3001               	movlw	1
  4539  0105  02C9               	subwf	_counter,f
  4540  0106  3000               	movlw	0
  4541  0107  3BCA               	subwfb	_counter+1,f
  4542  0108                     l334:	
  4543                           ;nrf24l01.c: 244: };nrf24l01.c: 248: RESEND:
  4544                           
  4545                           
  4546                           ;nrf24l01.c: 250: counter++;
  4547  0108  3001               	movlw	1
  4548  0109  07C9               	addwf	_counter,f
  4549  010A  3000               	movlw	0
  4550  010B  3DCA               	addwfc	_counter+1,f
  4551                           
  4552                           ;nrf24l01.c: 261: nrf24l01.TXBusy = 1;
  4553  010C  14CD               	bsf	_nrf24l01,1	;volatile
  4554                           
  4555                           ;nrf24l01.c: 264: enableInterrupts(0);
  4556  010D  3000               	movlw	0
  4557  010E  318F  2736  3180   	fcall	_enableInterrupts
  4558                           
  4559                           ;nrf24l01.c: 267: nrf24l01SetRXMode(0);
  4560  0111  3000               	movlw	0
  4561  0112  3185  2511  3180   	fcall	_nrf24l01SetRXMode
  4562                           
  4563                           ;nrf24l01.c: 270: nrf24l01SPIStart();
  4564  0115  318F  273E  3180   	fcall	_nrf24l01SPIStart
  4565                           
  4566                           ;nrf24l01.c: 273: nrf24l01SPISend(0b10110000);
  4567  0118  30B0               	movlw	176
  4568  0119  318F  274F  3180   	fcall	_nrf24l01SPISend
  4569                           
  4570                           ;nrf24l01.c: 275: nrf24l01SPISend(nrf24l01TXPacketData.byte);
  4571  011C  0020               	movlb	0	; select bank0
  4572  011D  084E               	movf	_nrf24l01TXPacketData,w
  4573  011E  318F  274F  3180   	fcall	_nrf24l01SPISend
  4574                           
  4575                           ;nrf24l01.c: 278: for (i = 0; (nrf24l01TXName[i] != '\0') && (i < sizeof(nrf24l01TXName)
      +                          ); i++){
  4576  0121  0020               	movlb	0	; select bank0
  4577  0122  01B0               	clrf	nrf24l01SendString@i
  4578  0123  2931               	goto	l3273
  4579  0124                     l3269:	
  4580                           
  4581                           ;nrf24l01.c: 279: nrf24l01SPISend(nrf24l01TXName[i]);
  4582  0124  0830               	movf	nrf24l01SendString@i,w
  4583  0125  3EC3               	addlw	(low (_nrf24l01TXName| 0))& (0+255)
  4584  0126  0086               	movwf	6
  4585  0127  0187               	clrf	7
  4586  0128  0801               	movf	1,w
  4587  0129  318F  274F  3180   	fcall	_nrf24l01SPISend
  4588  012C  3001               	movlw	1
  4589  012D  0020               	movlb	0	; select bank0
  4590  012E  00AF               	movwf	??_nrf24l01SendString
  4591  012F  082F               	movf	??_nrf24l01SendString,w
  4592  0130  07B0               	addwf	nrf24l01SendString@i,f
  4593  0131                     l3273:	
  4594  0131  0830               	movf	nrf24l01SendString@i,w
  4595  0132  3EC3               	addlw	(low (_nrf24l01TXName| 0))& (0+255)
  4596  0133  0086               	movwf	6
  4597  0134  0187               	clrf	7
  4598  0135  0801               	movf	1,w
  4599  0136  1903               	btfsc	3,2
  4600  0137  293C               	goto	l3277
  4601  0138  3010               	movlw	16
  4602  0139  0230               	subwf	nrf24l01SendString@i,w
  4603  013A  1C03               	skipc
  4604  013B  2924               	goto	l3269
  4605  013C                     l3277:	
  4606                           
  4607                           ;nrf24l01.c: 280: };nrf24l01.c: 283: nrf24l01SPISend('/');
  4608  013C  302F               	movlw	47
  4609  013D  318F  274F  3180   	fcall	_nrf24l01SPISend
  4610                           
  4611                           ;nrf24l01.c: 286: for (i = 0; (nrf24l01TXTopic[i] != '\0') && (i < sizeof(nrf24l01TXTopi
      +                          c)); i++){
  4612  0140  0020               	movlb	0	; select bank0
  4613  0141  01B0               	clrf	nrf24l01SendString@i
  4614  0142  2950               	goto	l3285
  4615  0143                     l3281:	
  4616                           
  4617                           ;nrf24l01.c: 287: nrf24l01SPISend(nrf24l01TXTopic[i]);
  4618  0143  0830               	movf	nrf24l01SendString@i,w
  4619  0144  3E5F               	addlw	(low (_nrf24l01TXTopic| 0))& (0+255)
  4620  0145  0086               	movwf	6
  4621  0146  0187               	clrf	7
  4622  0147  0801               	movf	1,w
  4623  0148  318F  274F  3180   	fcall	_nrf24l01SPISend
  4624  014B  3001               	movlw	1
  4625  014C  0020               	movlb	0	; select bank0
  4626  014D  00AF               	movwf	??_nrf24l01SendString
  4627  014E  082F               	movf	??_nrf24l01SendString,w
  4628  014F  07B0               	addwf	nrf24l01SendString@i,f
  4629  0150                     l3285:	
  4630  0150  0830               	movf	nrf24l01SendString@i,w
  4631  0151  3E5F               	addlw	(low (_nrf24l01TXTopic| 0))& (0+255)
  4632  0152  0086               	movwf	6
  4633  0153  0187               	clrf	7
  4634  0154  0801               	movf	1,w
  4635  0155  1903               	btfsc	3,2
  4636  0156  295B               	goto	l3289
  4637  0157  3008               	movlw	8
  4638  0158  0230               	subwf	nrf24l01SendString@i,w
  4639  0159  1C03               	skipc
  4640  015A  2943               	goto	l3281
  4641  015B                     l3289:	
  4642                           
  4643                           ;nrf24l01.c: 288: };nrf24l01.c: 291: nrf24l01SPISend('/');
  4644  015B  302F               	movlw	47
  4645  015C  318F  274F  3180   	fcall	_nrf24l01SPISend
  4646                           
  4647                           ;nrf24l01.c: 294: for (i = 0; (nrf24l01TXValue[i] != '\0') && (i < sizeof(nrf24l01TXValu
      +                          e)); i++){
  4648  015F  0020               	movlb	0	; select bank0
  4649  0160  01B0               	clrf	nrf24l01SendString@i
  4650  0161  296F               	goto	l3297
  4651  0162                     l3293:	
  4652                           
  4653                           ;nrf24l01.c: 295: nrf24l01SPISend(nrf24l01TXValue[i]);
  4654  0162  0830               	movf	nrf24l01SendString@i,w
  4655  0163  3E57               	addlw	(low (_nrf24l01TXValue| 0))& (0+255)
  4656  0164  0086               	movwf	6
  4657  0165  0187               	clrf	7
  4658  0166  0801               	movf	1,w
  4659  0167  318F  274F  3180   	fcall	_nrf24l01SPISend
  4660  016A  3001               	movlw	1
  4661  016B  0020               	movlb	0	; select bank0
  4662  016C  00AF               	movwf	??_nrf24l01SendString
  4663  016D  082F               	movf	??_nrf24l01SendString,w
  4664  016E  07B0               	addwf	nrf24l01SendString@i,f
  4665  016F                     l3297:	
  4666  016F  0830               	movf	nrf24l01SendString@i,w
  4667  0170  3E57               	addlw	(low (_nrf24l01TXValue| 0))& (0+255)
  4668  0171  0086               	movwf	6
  4669  0172  0187               	clrf	7
  4670  0173  0801               	movf	1,w
  4671  0174  1903               	btfsc	3,2
  4672  0175  297A               	goto	l3301
  4673  0176  3008               	movlw	8
  4674  0177  0230               	subwf	nrf24l01SendString@i,w
  4675  0178  1C03               	skipc
  4676  0179  2962               	goto	l3293
  4677  017A                     l3301:	
  4678                           
  4679                           ;nrf24l01.c: 296: };nrf24l01.c: 299: nrf24l01SPIEnd();
  4680  017A  318F  272F  3180   	fcall	_nrf24l01SPIEnd
  4681                           
  4682                           ;nrf24l01.c: 302: nrf24l01CEHigh();
  4683  017D  318F  271D  3180   	fcall	_nrf24l01CEHigh
  4684                           
  4685                           ;nrf24l01.c: 303: _delay((unsigned long)((20)*(16000000/4000000.0)));
  4686  0180  301A               	movlw	26
  4687  0181                     u2377:	
  4688  0181  0B89               	decfsz	9,f
  4689  0182  2981               	goto	u2377
  4690  0183  3200               	nop2
  4691                           
  4692                           ;nrf24l01.c: 304: nrf24l01CELow();
  4693  0184  318F  2720  3180   	fcall	_nrf24l01CELow
  4694                           
  4695                           ;nrf24l01.c: 307: enableInterrupts(1);
  4696  0187  3001               	movlw	1
  4697  0188  318F  2736  3180   	fcall	_enableInterrupts
  4698                           
  4699                           ;nrf24l01.c: 310: i = 0xFF;
  4700  018B  30FF               	movlw	255
  4701  018C  0020               	movlb	0	; select bank0
  4702  018D  00AF               	movwf	??_nrf24l01SendString
  4703  018E  082F               	movf	??_nrf24l01SendString,w
  4704  018F  00B0               	movwf	nrf24l01SendString@i
  4705  0190                     l3315:	
  4706                           ;nrf24l01.c: 311: while (nrf24l01.TXBusy){
  4707                           
  4708  0190  0020               	movlb	0	; select bank0
  4709  0191  1CCD               	btfss	_nrf24l01,1	;volatile
  4710  0192  299C               	goto	l3317
  4711                           
  4712                           ;nrf24l01.c: 312: if (!--i) {
  4713  0193  3001               	movlw	1
  4714  0194  02B0               	subwf	nrf24l01SendString@i,f
  4715  0195  1903               	btfsc	3,2
  4716  0196  2908               	goto	l334
  4717                           
  4718                           ;nrf24l01.c: 314: };nrf24l01.c: 315: _delay((unsigned long)((20)*(16000000/4000000.0)));
  4719                           
  4720                           ;nrf24l01.c: 313: goto RESEND;
  4721  0197  301A               	movlw	26
  4722  0198                     u2387:	
  4723  0198  0B89               	decfsz	9,f
  4724  0199  2998               	goto	u2387
  4725  019A  3200               	nop2
  4726  019B  2990               	goto	l3315
  4727  019C                     l3317:	
  4728                           
  4729                           ;nrf24l01.c: 316: };nrf24l01.c: 320: i = 0xFF;
  4730  019C  30FF               	movlw	255
  4731  019D  00AF               	movwf	??_nrf24l01SendString
  4732  019E  082F               	movf	??_nrf24l01SendString,w
  4733  019F  00B0               	movwf	nrf24l01SendString@i
  4734  01A0                     l3325:	
  4735                           ;nrf24l01.c: 321: while (nrf24l01TXPacketData.ACKRequest){
  4736                           
  4737  01A0  0020               	movlb	0	; select bank0
  4738  01A1  1C4E               	btfss	_nrf24l01TXPacketData,0
  4739  01A2  0008               	return
  4740                           
  4741                           ;nrf24l01.c: 322: if (!--i) {
  4742  01A3  3001               	movlw	1
  4743  01A4  02B0               	subwf	nrf24l01SendString@i,f
  4744  01A5  1903               	btfsc	3,2
  4745  01A6  2908               	goto	l334
  4746                           
  4747                           ;nrf24l01.c: 324: };nrf24l01.c: 325: _delay((unsigned long)((5000)*(16000000/4000000.0))
      +                          );
  4748                           
  4749                           ;nrf24l01.c: 323: goto RESEND;
  4750  01A7  301A               	movlw	26
  4751  01A8  0020               	movlb	0	; select bank0
  4752  01A9  00AF               	movwf	??_nrf24l01SendString
  4753  01AA  30F8               	movlw	248
  4754  01AB                     u2397:	
  4755  01AB  0B89               	decfsz	9,f
  4756  01AC  29AB               	goto	u2397
  4757  01AD  0BAF               	decfsz	??_nrf24l01SendString,f
  4758  01AE  29AB               	goto	u2397
  4759  01AF  0000               	nop
  4760  01B0  29A0               	goto	l3325
  4761  01B1                     __end_of_nrf24l01SendString:	
  4762                           
  4763                           	psect	text11
  4764  0511                     __ptext11:	
  4765 ;; *************** function _nrf24l01SetRXMode *****************
  4766 ;; Defined at:
  4767 ;;		line 74 in file "nrf24l01.c"
  4768 ;; Parameters:    Size  Location     Type
  4769 ;;  rxMode          1    wreg     unsigned char 
  4770 ;; Auto vars:     Size  Location     Type
  4771 ;;  rxMode          1   14[BANK0 ] unsigned char 
  4772 ;;  config          1   13[BANK0 ] struct .
  4773 ;; Return value:  Size  Location     Type
  4774 ;;                  1    wreg      void 
  4775 ;; Registers used:
  4776 ;;		wreg, status,2, status,0, pclath, cstack
  4777 ;; Tracked objects:
  4778 ;;		On entry : 0/0
  4779 ;;		On exit  : 0/0
  4780 ;;		Unchanged: 0/0
  4781 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4782 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4783 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4784 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4785 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4786 ;;Total ram usage:        3 bytes
  4787 ;; Hardware stack levels used:    1
  4788 ;; Hardware stack levels required when called:   10
  4789 ;; This function calls:
  4790 ;;		_nrf24l01CEHigh
  4791 ;;		_nrf24l01CELow
  4792 ;;		_nrf24l01Send
  4793 ;; This function is called by:
  4794 ;;		_nrf24l01SendString
  4795 ;;		_checkRxData
  4796 ;; This function uses a non-reentrant model
  4797 ;;
  4798                           
  4799                           
  4800                           ;psect for function _nrf24l01SetRXMode
  4801  0511                     _nrf24l01SetRXMode:	
  4802                           
  4803                           ;incstack = 0
  4804                           ; Regs used in _nrf24l01SetRXMode: [wreg+status,2+status,0+pclath+cstack]
  4805                           ;nrf24l01SetRXMode@rxMode stored from wreg
  4806  0511  0020               	movlb	0	; select bank0
  4807  0512  00AE               	movwf	nrf24l01SetRXMode@rxMode
  4808                           
  4809                           ;nrf24l01.c: 76: n_CONFIG_t config;;nrf24l01.c: 79: config.byte = nrf24l01Send(0b0000000
      +                          0 | 0x00, 0);
  4810  0513  01A9               	clrf	nrf24l01Send@data
  4811  0514  3000               	movlw	0
  4812  0515  3187  27C3  3185   	fcall	_nrf24l01Send
  4813  0518  0020               	movlb	0	; select bank0
  4814  0519  00AC               	movwf	??_nrf24l01SetRXMode
  4815  051A  082C               	movf	??_nrf24l01SetRXMode,w
  4816  051B  00AD               	movwf	nrf24l01SetRXMode@config
  4817                           
  4818                           ;nrf24l01.c: 82: if (config.PRIM_RX != rxMode){
  4819  051C  082D               	movf	nrf24l01SetRXMode@config,w
  4820  051D  3901               	andlw	1
  4821  051E  062E               	xorwf	nrf24l01SetRXMode@rxMode,w
  4822  051F  1903               	skipnz
  4823  0520  2D45               	goto	l2967
  4824                           
  4825                           ;nrf24l01.c: 85: nrf24l01CELow();
  4826  0521  318F  2720  3185   	fcall	_nrf24l01CELow
  4827                           
  4828                           ;nrf24l01.c: 86: _delay((unsigned long)((200)*(16000000/4000000.0)));
  4829  0524  30A0               	movlw	160
  4830  0525                     u2407:	
  4831  0525  3200               	nop2
  4832  0526  0B89               	decfsz	9,f
  4833  0527  2D25               	goto	u2407
  4834                           
  4835                           ;nrf24l01.c: 93: config.PRIM_RX = rxMode;
  4836  0528  0020               	movlb	0	; select bank0
  4837  0529  082E               	movf	nrf24l01SetRXMode@rxMode,w
  4838  052A  3901               	andlw	1
  4839  052B  102D               	bcf	nrf24l01SetRXMode@config,0
  4840  052C  1D03               	skipz
  4841  052D  142D               	bsf	nrf24l01SetRXMode@config,0
  4842                           
  4843                           ;nrf24l01.c: 94: nrf24l01Send(0b00100000 | 0x00, config.byte);
  4844  052E  082D               	movf	nrf24l01SetRXMode@config,w
  4845  052F  00AC               	movwf	??_nrf24l01SetRXMode
  4846  0530  082C               	movf	??_nrf24l01SetRXMode,w
  4847  0531  00A9               	movwf	nrf24l01Send@data
  4848  0532  3020               	movlw	32
  4849  0533  3187  27C3  3185   	fcall	_nrf24l01Send
  4850                           
  4851                           ;nrf24l01.c: 97: _delay((unsigned long)((200)*(16000000/4000000.0)));
  4852  0536  30A0               	movlw	160
  4853  0537                     u2417:	
  4854  0537  3200               	nop2
  4855  0538  0B89               	decfsz	9,f
  4856  0539  2D37               	goto	u2417
  4857                           
  4858                           ;nrf24l01.c: 100: if (rxMode){
  4859  053A  0020               	movlb	0	; select bank0
  4860  053B  082E               	movf	nrf24l01SetRXMode@rxMode,w
  4861  053C  1903               	btfsc	3,2
  4862  053D  2D45               	goto	l2967
  4863                           
  4864                           ;nrf24l01.c: 101: nrf24l01CEHigh();
  4865  053E  318F  271D  3185   	fcall	_nrf24l01CEHigh
  4866                           
  4867                           ;nrf24l01.c: 102: _delay((unsigned long)((200)*(16000000/4000000.0)));
  4868  0541  30A0               	movlw	160
  4869  0542                     u2427:	
  4870  0542  3200               	nop2
  4871  0543  0B89               	decfsz	9,f
  4872  0544  2D42               	goto	u2427
  4873  0545                     l2967:	
  4874                           
  4875                           ;nrf24l01.c: 103: };nrf24l01.c: 104: };nrf24l01.c: 107: nrf24l01.RXMode = rxMode;
  4876  0545  0020               	movlb	0	; select bank0
  4877  0546  082E               	movf	nrf24l01SetRXMode@rxMode,w
  4878  0547  3901               	andlw	1
  4879  0548  11CD               	bcf	_nrf24l01,3	;volatile
  4880  0549  1D03               	skipz
  4881  054A  15CD               	bsf	_nrf24l01,3	;volatile
  4882  054B  0008               	return
  4883  054C                     __end_of_nrf24l01SetRXMode:	
  4884                           
  4885                           	psect	text12
  4886  07C3                     __ptext12:	
  4887 ;; *************** function _nrf24l01Send *****************
  4888 ;; Defined at:
  4889 ;;		line 19 in file "nrf24l01.c"
  4890 ;; Parameters:    Size  Location     Type
  4891 ;;  command         1    wreg     unsigned char 
  4892 ;;  data            1    9[BANK0 ] unsigned char 
  4893 ;; Auto vars:     Size  Location     Type
  4894 ;;  command         1   11[BANK0 ] unsigned char 
  4895 ;; Return value:  Size  Location     Type
  4896 ;;                  1    wreg      unsigned char 
  4897 ;; Registers used:
  4898 ;;		wreg, status,2, status,0, pclath, cstack
  4899 ;; Tracked objects:
  4900 ;;		On entry : 0/0
  4901 ;;		On exit  : 0/0
  4902 ;;		Unchanged: 0/0
  4903 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4904 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4905 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4906 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4907 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4908 ;;Total ram usage:        3 bytes
  4909 ;; Hardware stack levels used:    1
  4910 ;; Hardware stack levels required when called:    9
  4911 ;; This function calls:
  4912 ;;		_enableInterrupts
  4913 ;;		_nrf24l01SPIEnd
  4914 ;;		_nrf24l01SPISend
  4915 ;;		_nrf24l01SPIStart
  4916 ;; This function is called by:
  4917 ;;		_nrf24l01SetRXMode
  4918 ;;		_nrf24l01InitRegisters
  4919 ;; This function uses a non-reentrant model
  4920 ;;
  4921                           
  4922                           
  4923                           ;psect for function _nrf24l01Send
  4924  07C3                     _nrf24l01Send:	
  4925                           
  4926                           ;incstack = 0
  4927                           ; Regs used in _nrf24l01Send: [wreg+status,2+status,0+pclath+cstack]
  4928                           ;nrf24l01Send@command stored from wreg
  4929  07C3  0020               	movlb	0	; select bank0
  4930  07C4  00AB               	movwf	nrf24l01Send@command
  4931                           
  4932                           ;nrf24l01.c: 22: enableInterrupts(0);
  4933  07C5  3000               	movlw	0
  4934  07C6  318F  2736  3187   	fcall	_enableInterrupts
  4935                           
  4936                           ;nrf24l01.c: 25: nrf24l01SPIStart();
  4937  07C9  318F  273E  3187   	fcall	_nrf24l01SPIStart
  4938                           
  4939                           ;nrf24l01.c: 28: nrf24l01SPISend(command);
  4940  07CC  0020               	movlb	0	; select bank0
  4941  07CD  082B               	movf	nrf24l01Send@command,w
  4942  07CE  318F  274F  3187   	fcall	_nrf24l01SPISend
  4943                           
  4944                           ;nrf24l01.c: 31: data = nrf24l01SPISend(data);
  4945  07D1  0020               	movlb	0	; select bank0
  4946  07D2  0829               	movf	nrf24l01Send@data,w
  4947  07D3  318F  274F  3187   	fcall	_nrf24l01SPISend
  4948  07D6  0020               	movlb	0	; select bank0
  4949  07D7  00AA               	movwf	??_nrf24l01Send
  4950  07D8  082A               	movf	??_nrf24l01Send,w
  4951  07D9  00A9               	movwf	nrf24l01Send@data
  4952                           
  4953                           ;nrf24l01.c: 34: nrf24l01SPIEnd();
  4954  07DA  318F  272F  3187   	fcall	_nrf24l01SPIEnd
  4955                           
  4956                           ;nrf24l01.c: 37: enableInterrupts(1);
  4957  07DD  3001               	movlw	1
  4958  07DE  318F  2736         	fcall	_enableInterrupts
  4959                           
  4960                           ;nrf24l01.c: 39: return data;
  4961  07E0  0020               	movlb	0	; select bank0
  4962  07E1  0829               	movf	nrf24l01Send@data,w
  4963  07E2  0008               	return
  4964  07E3                     __end_of_nrf24l01Send:	
  4965                           
  4966                           	psect	text13
  4967  0386                     __ptext13:	
  4968 ;; *************** function _getADCValue *****************
  4969 ;; Defined at:
  4970 ;;		line 22 in file "main.c"
  4971 ;; Parameters:    Size  Location     Type
  4972 ;;  channel         1    wreg     unsigned char 
  4973 ;;  divider         4   23[BANK0 ] unsigned long 
  4974 ;; Auto vars:     Size  Location     Type
  4975 ;;  channel         1   31[BANK0 ] unsigned char 
  4976 ;;  adcSum          4   33[BANK0 ] unsigned long 
  4977 ;;  adcLoop         1   32[BANK0 ] unsigned char 
  4978 ;; Return value:  Size  Location     Type
  4979 ;;                  4   23[BANK0 ] unsigned long 
  4980 ;; Registers used:
  4981 ;;		wreg, status,2, status,0, pclath, cstack
  4982 ;; Tracked objects:
  4983 ;;		On entry : 0/0
  4984 ;;		On exit  : 0/0
  4985 ;;		Unchanged: 0/0
  4986 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4987 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4988 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4989 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4990 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4991 ;;Total ram usage:       14 bytes
  4992 ;; Hardware stack levels used:    1
  4993 ;; Hardware stack levels required when called:    8
  4994 ;; This function calls:
  4995 ;;		___lldiv
  4996 ;;		___lmul
  4997 ;; This function is called by:
  4998 ;;		_loop
  4999 ;; This function uses a non-reentrant model
  5000 ;;
  5001                           
  5002                           
  5003                           ;psect for function _getADCValue
  5004  0386                     _getADCValue:	
  5005                           
  5006                           ;incstack = 0
  5007                           ; Regs used in _getADCValue: [wreg+status,2+status,0+pclath+cstack]
  5008                           ;getADCValue@channel stored from wreg
  5009  0386  0020               	movlb	0	; select bank0
  5010  0387  00BF               	movwf	getADCValue@channel
  5011                           
  5012                           ;main.c: 24: unsigned long adcSum = 0;
  5013  0388  3000               	movlw	0
  5014  0389  00C4               	movwf	getADCValue@adcSum+3
  5015  038A  3000               	movlw	0
  5016  038B  00C3               	movwf	getADCValue@adcSum+2
  5017  038C  3000               	movlw	0
  5018  038D  00C2               	movwf	getADCValue@adcSum+1
  5019  038E  3000               	movlw	0
  5020  038F  00C1               	movwf	getADCValue@adcSum
  5021                           
  5022                           ;main.c: 25: unsigned char adcLoop = 255;
  5023  0390  30FF               	movlw	255
  5024  0391  00BB               	movwf	??_getADCValue
  5025  0392  083B               	movf	??_getADCValue,w
  5026  0393  00C0               	movwf	getADCValue@adcLoop
  5027                           
  5028                           ;main.c: 27: ADCON0bits.CHS = channel;
  5029  0394  083F               	movf	getADCValue@channel,w
  5030  0395  00BB               	movwf	??_getADCValue
  5031  0396  0DBB               	rlf	??_getADCValue,f
  5032  0397  0DBB               	rlf	??_getADCValue,f
  5033  0398  0021               	movlb	1	; select bank1
  5034  0399  081D               	movf	29,w	;volatile
  5035  039A  0020               	movlb	0	; select bank0
  5036  039B  063B               	xorwf	??_getADCValue,w
  5037  039C  3903               	andlw	-253
  5038  039D  063B               	xorwf	??_getADCValue,w
  5039  039E  0021               	movlb	1	; select bank1
  5040  039F  009D               	movwf	29	;volatile
  5041                           
  5042                           ;main.c: 28: _delay((unsigned long)((200)*(16000000/4000000.0)));
  5043  03A0  30A0               	movlw	160
  5044  03A1                     u2437:	
  5045  03A1  3200               	nop2
  5046  03A2  0B89               	decfsz	9,f
  5047  03A3  2BA1               	goto	u2437
  5048  03A4                     l3201:	
  5049                           ;main.c: 30: while (--adcLoop){
  5050                           
  5051  03A4  3001               	movlw	1
  5052  03A5  0020               	movlb	0	; select bank0
  5053  03A6  02C0               	subwf	getADCValue@adcLoop,f
  5054  03A7  1903               	btfsc	3,2
  5055  03A8  2BCE               	goto	l3203
  5056                           
  5057                           ;main.c: 32: ADCON0bits.ADGO = 1;
  5058  03A9  0021               	movlb	1	; select bank1
  5059  03AA  149D               	bsf	29,1	;volatile
  5060  03AB                     l212:	
  5061                           ;main.c: 34: while (ADCON0bits.ADGO){
  5062                           
  5063  03AB  0021               	movlb	1	; select bank1
  5064  03AC  1C9D               	btfss	29,1	;volatile
  5065  03AD  2BB0               	goto	l3199
  5066                           
  5067                           ;main.c: 35: __nop();
  5068  03AE  0000               	nop
  5069  03AF  2BAB               	goto	l212
  5070  03B0                     l3199:	
  5071                           
  5072                           ;main.c: 36: };main.c: 38: adcSum+= ADRESL;
  5073  03B0  081B               	movf	27,w	;volatile
  5074  03B1  0020               	movlb	0	; select bank0
  5075  03B2  00BB               	movwf	??_getADCValue
  5076  03B3  01BC               	clrf	??_getADCValue+1
  5077  03B4  01BD               	clrf	??_getADCValue+2
  5078  03B5  01BE               	clrf	??_getADCValue+3
  5079  03B6  083B               	movf	??_getADCValue,w
  5080  03B7  07C1               	addwf	getADCValue@adcSum,f
  5081  03B8  083C               	movf	??_getADCValue+1,w
  5082  03B9  3DC2               	addwfc	getADCValue@adcSum+1,f
  5083  03BA  083D               	movf	??_getADCValue+2,w
  5084  03BB  3DC3               	addwfc	getADCValue@adcSum+2,f
  5085  03BC  083E               	movf	??_getADCValue+3,w
  5086  03BD  3DC4               	addwfc	getADCValue@adcSum+3,f
  5087                           
  5088                           ;main.c: 39: adcSum+= (unsigned) (ADRESH << 8);
  5089  03BE  0021               	movlb	1	; select bank1
  5090  03BF  081C               	movf	28,w	;volatile
  5091  03C0  0020               	movlb	0	; select bank0
  5092  03C1  00BB               	movwf	??_getADCValue
  5093  03C2  01BC               	clrf	??_getADCValue+1
  5094  03C3  083B               	movf	??_getADCValue,w
  5095  03C4  00BC               	movwf	??_getADCValue+1
  5096  03C5  01BB               	clrf	??_getADCValue
  5097  03C6  083B               	movf	??_getADCValue,w
  5098  03C7  07C1               	addwf	getADCValue@adcSum,f
  5099  03C8  083C               	movf	??_getADCValue+1,w
  5100  03C9  3DC2               	addwfc	getADCValue@adcSum+1,f
  5101  03CA  3000               	movlw	0
  5102  03CB  3DC3               	addwfc	getADCValue@adcSum+2,f
  5103  03CC  3DC4               	addwfc	getADCValue@adcSum+3,f
  5104  03CD  2BA4               	goto	l3201
  5105  03CE                     l3203:	
  5106                           
  5107                           ;main.c: 40: };main.c: 43: adcSum*= 100;
  5108  03CE  3000               	movlw	0
  5109  03CF  00AC               	movwf	___lmul@multiplier+3
  5110  03D0  3000               	movlw	0
  5111  03D1  00AB               	movwf	___lmul@multiplier+2
  5112  03D2  3000               	movlw	0
  5113  03D3  00AA               	movwf	___lmul@multiplier+1
  5114  03D4  3064               	movlw	100
  5115  03D5  00A9               	movwf	___lmul@multiplier
  5116  03D6  0844               	movf	getADCValue@adcSum+3,w
  5117  03D7  00B0               	movwf	___lmul@multiplicand+3
  5118  03D8  0843               	movf	getADCValue@adcSum+2,w
  5119  03D9  00AF               	movwf	___lmul@multiplicand+2
  5120  03DA  0842               	movf	getADCValue@adcSum+1,w
  5121  03DB  00AE               	movwf	___lmul@multiplicand+1
  5122  03DC  0841               	movf	getADCValue@adcSum,w
  5123  03DD  00AD               	movwf	___lmul@multiplicand
  5124  03DE  3186  2621  3183   	fcall	___lmul
  5125  03E1  0020               	movlb	0	; select bank0
  5126  03E2  082C               	movf	?___lmul+3,w
  5127  03E3  00C4               	movwf	getADCValue@adcSum+3
  5128  03E4  082B               	movf	?___lmul+2,w
  5129  03E5  00C3               	movwf	getADCValue@adcSum+2
  5130  03E6  082A               	movf	?___lmul+1,w
  5131  03E7  00C2               	movwf	getADCValue@adcSum+1
  5132  03E8  0829               	movf	?___lmul,w
  5133  03E9  00C1               	movwf	getADCValue@adcSum
  5134                           
  5135                           ;main.c: 44: adcSum/= divider;
  5136  03EA  083A               	movf	getADCValue@divider+3,w
  5137  03EB  00AC               	movwf	___lldiv@divisor+3
  5138  03EC  0839               	movf	getADCValue@divider+2,w
  5139  03ED  00AB               	movwf	___lldiv@divisor+2
  5140  03EE  0838               	movf	getADCValue@divider+1,w
  5141  03EF  00AA               	movwf	___lldiv@divisor+1
  5142  03F0  0837               	movf	getADCValue@divider,w
  5143  03F1  00A9               	movwf	___lldiv@divisor
  5144  03F2  0844               	movf	getADCValue@adcSum+3,w
  5145  03F3  00B0               	movwf	___lldiv@dividend+3
  5146  03F4  0843               	movf	getADCValue@adcSum+2,w
  5147  03F5  00AF               	movwf	___lldiv@dividend+2
  5148  03F6  0842               	movf	getADCValue@adcSum+1,w
  5149  03F7  00AE               	movwf	___lldiv@dividend+1
  5150  03F8  0841               	movf	getADCValue@adcSum,w
  5151  03F9  00AD               	movwf	___lldiv@dividend
  5152  03FA  3184  2482         	fcall	___lldiv
  5153  03FC  0020               	movlb	0	; select bank0
  5154  03FD  082C               	movf	?___lldiv+3,w
  5155  03FE  00C4               	movwf	getADCValue@adcSum+3
  5156  03FF  082B               	movf	?___lldiv+2,w
  5157  0400  00C3               	movwf	getADCValue@adcSum+2
  5158  0401  082A               	movf	?___lldiv+1,w
  5159  0402  00C2               	movwf	getADCValue@adcSum+1
  5160  0403  0829               	movf	?___lldiv,w
  5161  0404  00C1               	movwf	getADCValue@adcSum
  5162                           
  5163                           ;main.c: 46: return adcSum;
  5164  0405  0844               	movf	getADCValue@adcSum+3,w
  5165  0406  00BA               	movwf	?_getADCValue+3
  5166  0407  0843               	movf	getADCValue@adcSum+2,w
  5167  0408  00B9               	movwf	?_getADCValue+2
  5168  0409  0842               	movf	getADCValue@adcSum+1,w
  5169  040A  00B8               	movwf	?_getADCValue+1
  5170  040B  0841               	movf	getADCValue@adcSum,w
  5171  040C  00B7               	movwf	?_getADCValue
  5172  040D  0008               	return
  5173  040E                     __end_of_getADCValue:	
  5174                           
  5175                           	psect	text14
  5176  0621                     __ptext14:	
  5177 ;; *************** function ___lmul *****************
  5178 ;; Defined at:
  5179 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\Umul32.c"
  5180 ;; Parameters:    Size  Location     Type
  5181 ;;  multiplier      4    9[BANK0 ] unsigned long 
  5182 ;;  multiplicand    4   13[BANK0 ] unsigned long 
  5183 ;; Auto vars:     Size  Location     Type
  5184 ;;  product         4   17[BANK0 ] unsigned long 
  5185 ;; Return value:  Size  Location     Type
  5186 ;;                  4    9[BANK0 ] unsigned long 
  5187 ;; Registers used:
  5188 ;;		wreg, status,2, status,0
  5189 ;; Tracked objects:
  5190 ;;		On entry : 0/0
  5191 ;;		On exit  : 0/0
  5192 ;;		Unchanged: 0/0
  5193 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5194 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5195 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5196 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5197 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5198 ;;Total ram usage:       12 bytes
  5199 ;; Hardware stack levels used:    1
  5200 ;; Hardware stack levels required when called:    7
  5201 ;; This function calls:
  5202 ;;		Nothing
  5203 ;; This function is called by:
  5204 ;;		_getADCValue
  5205 ;; This function uses a non-reentrant model
  5206 ;;
  5207                           
  5208                           
  5209                           ;psect for function ___lmul
  5210  0621                     ___lmul:	
  5211                           
  5212                           ;incstack = 0
  5213                           ; Regs used in ___lmul: [wreg+status,2+status,0]
  5214  0621  3000               	movlw	0
  5215  0622  0020               	movlb	0	; select bank0
  5216  0623  00B4               	movwf	___lmul@product+3
  5217  0624  3000               	movlw	0
  5218  0625  00B3               	movwf	___lmul@product+2
  5219  0626  3000               	movlw	0
  5220  0627  00B2               	movwf	___lmul@product+1
  5221  0628  3000               	movlw	0
  5222  0629  00B1               	movwf	___lmul@product
  5223  062A                     l2991:	
  5224  062A  1C29               	btfss	___lmul@multiplier,0
  5225  062B  2E34               	goto	l2995
  5226  062C  082D               	movf	___lmul@multiplicand,w
  5227  062D  07B1               	addwf	___lmul@product,f
  5228  062E  082E               	movf	___lmul@multiplicand+1,w
  5229  062F  3DB2               	addwfc	___lmul@product+1,f
  5230  0630  082F               	movf	___lmul@multiplicand+2,w
  5231  0631  3DB3               	addwfc	___lmul@product+2,f
  5232  0632  0830               	movf	___lmul@multiplicand+3,w
  5233  0633  3DB4               	addwfc	___lmul@product+3,f
  5234  0634                     l2995:	
  5235  0634  3001               	movlw	1
  5236  0635                     u1725:	
  5237  0635  35AD               	lslf	___lmul@multiplicand,f
  5238  0636  0DAE               	rlf	___lmul@multiplicand+1,f
  5239  0637  0DAF               	rlf	___lmul@multiplicand+2,f
  5240  0638  0DB0               	rlf	___lmul@multiplicand+3,f
  5241  0639  0B89               	decfsz	9,f
  5242  063A  2E35               	goto	u1725
  5243  063B  3001               	movlw	1
  5244  063C                     u1735:	
  5245  063C  36AC               	lsrf	___lmul@multiplier+3,f
  5246  063D  0CAB               	rrf	___lmul@multiplier+2,f
  5247  063E  0CAA               	rrf	___lmul@multiplier+1,f
  5248  063F  0CA9               	rrf	___lmul@multiplier,f
  5249  0640  0B89               	decfsz	9,f
  5250  0641  2E3C               	goto	u1735
  5251  0642  082C               	movf	___lmul@multiplier+3,w
  5252  0643  042B               	iorwf	___lmul@multiplier+2,w
  5253  0644  042A               	iorwf	___lmul@multiplier+1,w
  5254  0645  0429               	iorwf	___lmul@multiplier,w
  5255  0646  1D03               	skipz
  5256  0647  2E2A               	goto	l2991
  5257  0648  0834               	movf	___lmul@product+3,w
  5258  0649  00AC               	movwf	?___lmul+3
  5259  064A  0833               	movf	___lmul@product+2,w
  5260  064B  00AB               	movwf	?___lmul+2
  5261  064C  0832               	movf	___lmul@product+1,w
  5262  064D  00AA               	movwf	?___lmul+1
  5263  064E  0831               	movf	___lmul@product,w
  5264  064F  00A9               	movwf	?___lmul
  5265  0650  0008               	return
  5266  0651                     __end_of___lmul:	
  5267                           
  5268                           	psect	text15
  5269  0482                     __ptext15:	
  5270 ;; *************** function ___lldiv *****************
  5271 ;; Defined at:
  5272 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\__lldiv.c"
  5273 ;; Parameters:    Size  Location     Type
  5274 ;;  divisor         4    9[BANK0 ] unsigned long 
  5275 ;;  dividend        4   13[BANK0 ] unsigned long 
  5276 ;; Auto vars:     Size  Location     Type
  5277 ;;  quotient        4   18[BANK0 ] unsigned long 
  5278 ;;  counter         1   22[BANK0 ] unsigned char 
  5279 ;; Return value:  Size  Location     Type
  5280 ;;                  4    9[BANK0 ] unsigned long 
  5281 ;; Registers used:
  5282 ;;		wreg, status,2, status,0
  5283 ;; Tracked objects:
  5284 ;;		On entry : 0/0
  5285 ;;		On exit  : 0/0
  5286 ;;		Unchanged: 0/0
  5287 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5288 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5289 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5290 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5291 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5292 ;;Total ram usage:       14 bytes
  5293 ;; Hardware stack levels used:    1
  5294 ;; Hardware stack levels required when called:    7
  5295 ;; This function calls:
  5296 ;;		Nothing
  5297 ;; This function is called by:
  5298 ;;		_getADCValue
  5299 ;; This function uses a non-reentrant model
  5300 ;;
  5301                           
  5302                           
  5303                           ;psect for function ___lldiv
  5304  0482                     ___lldiv:	
  5305                           
  5306                           ;incstack = 0
  5307                           ; Regs used in ___lldiv: [wreg+status,2+status,0]
  5308  0482  3000               	movlw	0
  5309  0483  0020               	movlb	0	; select bank0
  5310  0484  00B5               	movwf	___lldiv@quotient+3
  5311  0485  3000               	movlw	0
  5312  0486  00B4               	movwf	___lldiv@quotient+2
  5313  0487  3000               	movlw	0
  5314  0488  00B3               	movwf	___lldiv@quotient+1
  5315  0489  3000               	movlw	0
  5316  048A  00B2               	movwf	___lldiv@quotient
  5317  048B  082C               	movf	___lldiv@divisor+3,w
  5318  048C  042B               	iorwf	___lldiv@divisor+2,w
  5319  048D  042A               	iorwf	___lldiv@divisor+1,w
  5320  048E  0429               	iorwf	___lldiv@divisor,w
  5321  048F  1903               	skipnz
  5322  0490  2CCC               	goto	l3023
  5323  0491  01B6               	clrf	___lldiv@counter
  5324  0492  0AB6               	incf	___lldiv@counter,f
  5325  0493                     l3009:	
  5326  0493  1BAC               	btfsc	___lldiv@divisor+3,7
  5327  0494  2CA1               	goto	l3011
  5328  0495  3001               	movlw	1
  5329  0496                     u1765:	
  5330  0496  35A9               	lslf	___lldiv@divisor,f
  5331  0497  0DAA               	rlf	___lldiv@divisor+1,f
  5332  0498  0DAB               	rlf	___lldiv@divisor+2,f
  5333  0499  0DAC               	rlf	___lldiv@divisor+3,f
  5334  049A  0B89               	decfsz	9,f
  5335  049B  2C96               	goto	u1765
  5336  049C  3001               	movlw	1
  5337  049D  00B1               	movwf	??___lldiv
  5338  049E  0831               	movf	??___lldiv,w
  5339  049F  07B6               	addwf	___lldiv@counter,f
  5340  04A0  2C93               	goto	l3009
  5341  04A1                     l3011:	
  5342  04A1  3001               	movlw	1
  5343  04A2                     u1785:	
  5344  04A2  35B2               	lslf	___lldiv@quotient,f
  5345  04A3  0DB3               	rlf	___lldiv@quotient+1,f
  5346  04A4  0DB4               	rlf	___lldiv@quotient+2,f
  5347  04A5  0DB5               	rlf	___lldiv@quotient+3,f
  5348  04A6  0B89               	decfsz	9,f
  5349  04A7  2CA2               	goto	u1785
  5350  04A8  082C               	movf	___lldiv@divisor+3,w
  5351  04A9  0230               	subwf	___lldiv@dividend+3,w
  5352  04AA  1D03               	skipz
  5353  04AB  2CB6               	goto	u1795
  5354  04AC  082B               	movf	___lldiv@divisor+2,w
  5355  04AD  022F               	subwf	___lldiv@dividend+2,w
  5356  04AE  1D03               	skipz
  5357  04AF  2CB6               	goto	u1795
  5358  04B0  082A               	movf	___lldiv@divisor+1,w
  5359  04B1  022E               	subwf	___lldiv@dividend+1,w
  5360  04B2  1D03               	skipz
  5361  04B3  2CB6               	goto	u1795
  5362  04B4  0829               	movf	___lldiv@divisor,w
  5363  04B5  022D               	subwf	___lldiv@dividend,w
  5364  04B6                     u1795:	
  5365  04B6  1C03               	skipc
  5366  04B7  2CC1               	goto	l3019
  5367  04B8  0829               	movf	___lldiv@divisor,w
  5368  04B9  02AD               	subwf	___lldiv@dividend,f
  5369  04BA  082A               	movf	___lldiv@divisor+1,w
  5370  04BB  3BAE               	subwfb	___lldiv@dividend+1,f
  5371  04BC  082B               	movf	___lldiv@divisor+2,w
  5372  04BD  3BAF               	subwfb	___lldiv@dividend+2,f
  5373  04BE  082C               	movf	___lldiv@divisor+3,w
  5374  04BF  3BB0               	subwfb	___lldiv@dividend+3,f
  5375  04C0  1432               	bsf	___lldiv@quotient,0
  5376  04C1                     l3019:	
  5377  04C1  3001               	movlw	1
  5378  04C2                     u1805:	
  5379  04C2  36AC               	lsrf	___lldiv@divisor+3,f
  5380  04C3  0CAB               	rrf	___lldiv@divisor+2,f
  5381  04C4  0CAA               	rrf	___lldiv@divisor+1,f
  5382  04C5  0CA9               	rrf	___lldiv@divisor,f
  5383  04C6  0B89               	decfsz	9,f
  5384  04C7  2CC2               	goto	u1805
  5385  04C8  3001               	movlw	1
  5386  04C9  02B6               	subwf	___lldiv@counter,f
  5387  04CA  1D03               	btfss	3,2
  5388  04CB  2CA1               	goto	l3011
  5389  04CC                     l3023:	
  5390  04CC  0835               	movf	___lldiv@quotient+3,w
  5391  04CD  00AC               	movwf	?___lldiv+3
  5392  04CE  0834               	movf	___lldiv@quotient+2,w
  5393  04CF  00AB               	movwf	?___lldiv+2
  5394  04D0  0833               	movf	___lldiv@quotient+1,w
  5395  04D1  00AA               	movwf	?___lldiv+1
  5396  04D2  0832               	movf	___lldiv@quotient,w
  5397  04D3  00A9               	movwf	?___lldiv
  5398  04D4  0008               	return
  5399  04D5                     __end_of___lldiv:	
  5400                           
  5401                           	psect	text16
  5402  077F                     __ptext16:	
  5403 ;; *************** function _flashUpdate *****************
  5404 ;; Defined at:
  5405 ;;		line 97 in file "flash.c"
  5406 ;; Parameters:    Size  Location     Type
  5407 ;;		None
  5408 ;; Auto vars:     Size  Location     Type
  5409 ;;  i               2   17[BANK0 ] unsigned int 
  5410 ;; Return value:  Size  Location     Type
  5411 ;;                  1    wreg      void 
  5412 ;; Registers used:
  5413 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5414 ;; Tracked objects:
  5415 ;;		On entry : 0/0
  5416 ;;		On exit  : 0/0
  5417 ;;		Unchanged: 0/0
  5418 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5419 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5420 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5421 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5422 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5423 ;;Total ram usage:        4 bytes
  5424 ;; Hardware stack levels used:    1
  5425 ;; Hardware stack levels required when called:    8
  5426 ;; This function calls:
  5427 ;;		_flashWriteByte
  5428 ;; This function is called by:
  5429 ;;		_main
  5430 ;; This function uses a non-reentrant model
  5431 ;;
  5432                           
  5433                           
  5434                           ;psect for function _flashUpdate
  5435  077F                     _flashUpdate:	
  5436                           
  5437                           ;flash.c: 98: for (unsigned int i = 0; i < 32; i++){
  5438                           
  5439                           ;incstack = 0
  5440                           ; Regs used in _flashUpdate: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5441  077F  0020               	movlb	0	; select bank0
  5442  0780  01B1               	clrf	flashUpdate@i
  5443  0781  01B2               	clrf	flashUpdate@i+1
  5444  0782                     L1:	
  5445  0782  3000               	movlw	0
  5446  0783  0232               	subwf	flashUpdate@i+1,w
  5447  0784  3020               	movlw	32
  5448  0785  1903               	skipnz
  5449  0786  0231               	subwf	flashUpdate@i,w
  5450  0787  1803               	btfsc	3,0
  5451  0788  0008               	return
  5452                           
  5453                           ;flash.c: 99: flashWriteByte(i, romHolder.array[i]);
  5454  0789  0832               	movf	flashUpdate@i+1,w
  5455  078A  00AA               	movwf	flashWriteByte@offset+1
  5456  078B  0831               	movf	flashUpdate@i,w
  5457  078C  00A9               	movwf	flashWriteByte@offset
  5458  078D  0831               	movf	flashUpdate@i,w
  5459  078E  3E20               	addlw	(low (_romHolder| (0+256)))& (0+255)
  5460  078F  0086               	movwf	6
  5461  0790  3001               	movlw	1	; select bank2/3
  5462  0791  0087               	movwf	7
  5463  0792  0801               	movf	1,w
  5464  0793  00AF               	movwf	??_flashUpdate
  5465  0794  01B0               	clrf	??_flashUpdate+1
  5466  0795  082F               	movf	??_flashUpdate,w
  5467  0796  00AB               	movwf	flashWriteByte@data
  5468  0797  0830               	movf	??_flashUpdate+1,w
  5469  0798  00AC               	movwf	flashWriteByte@data+1
  5470  0799  3184  24D5  3187   	fcall	_flashWriteByte
  5471  079C  3001               	movlw	1
  5472  079D  0020               	movlb	0	; select bank0
  5473  079E  07B1               	addwf	flashUpdate@i,f
  5474  079F  3000               	movlw	0
  5475  07A0  3DB2               	addwfc	flashUpdate@i+1,f
  5476  07A1  2F82               	goto	L1
  5477  07A2                     __end_of_flashUpdate:	
  5478                           
  5479                           	psect	text17
  5480  04D5                     __ptext17:	
  5481 ;; *************** function _flashWriteByte *****************
  5482 ;; Defined at:
  5483 ;;		line 8 in file "flash.c"
  5484 ;; Parameters:    Size  Location     Type
  5485 ;;  offset          2    9[BANK0 ] unsigned int 
  5486 ;;  data            2   11[BANK0 ] unsigned int 
  5487 ;; Auto vars:     Size  Location     Type
  5488 ;;  address         2   13[BANK0 ] unsigned int 
  5489 ;; Return value:  Size  Location     Type
  5490 ;;                  1    wreg      void 
  5491 ;; Registers used:
  5492 ;;		wreg, status,2, status,0
  5493 ;; Tracked objects:
  5494 ;;		On entry : 0/0
  5495 ;;		On exit  : 0/0
  5496 ;;		Unchanged: 0/0
  5497 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5498 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5499 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5500 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5501 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5502 ;;Total ram usage:        6 bytes
  5503 ;; Hardware stack levels used:    1
  5504 ;; Hardware stack levels required when called:    7
  5505 ;; This function calls:
  5506 ;;		Nothing
  5507 ;; This function is called by:
  5508 ;;		_flashUpdate
  5509 ;; This function uses a non-reentrant model
  5510 ;;
  5511                           
  5512                           
  5513                           ;psect for function _flashWriteByte
  5514  04D5                     _flashWriteByte:	
  5515                           
  5516                           ;flash.c: 10: unsigned int address;;flash.c: 12: INTCONbits.GIE = 0;
  5517                           
  5518                           ;incstack = 0
  5519                           ; Regs used in _flashWriteByte: [wreg+status,2+status,0]
  5520  04D5  138B               	bcf	11,7	;volatile
  5521                           
  5522                           ;flash.c: 15: PMCON1 = 0x00;
  5523  04D6  0031               	movlb	17	; select bank17
  5524  04D7  0195               	clrf	21	;volsfr
  5525                           
  5526                           ;flash.c: 17: address = (0x2000U - 32) + offset;
  5527  04D8  0020               	movlb	0	; select bank0
  5528  04D9  0829               	movf	flashWriteByte@offset,w
  5529  04DA  3EE0               	addlw	224
  5530  04DB  00AD               	movwf	flashWriteByte@address
  5531  04DC  301F               	movlw	31
  5532  04DD  3D2A               	addwfc	flashWriteByte@offset+1,w
  5533  04DE  00AE               	movwf	flashWriteByte@address+1
  5534                           
  5535                           ;flash.c: 18: PMADRL = (char) (address >> 0);
  5536  04DF  082D               	movf	flashWriteByte@address,w
  5537  04E0  0031               	movlb	17	; select bank17
  5538  04E1  0091               	movwf	17	;volatile
  5539                           
  5540                           ;flash.c: 19: PMADRH = (char) (address >> 8);
  5541  04E2  0020               	movlb	0	; select bank0
  5542  04E3  082E               	movf	flashWriteByte@address+1,w
  5543  04E4  0031               	movlb	17	; select bank17
  5544  04E5  0092               	movwf	18	;volatile
  5545                           
  5546                           ;flash.c: 21: PMCON1bits.FREE = 1;
  5547  04E6  1615               	bsf	21,4	;volsfr
  5548                           
  5549                           ;flash.c: 22: PMCON1bits.WREN = 1;
  5550  04E7  1515               	bsf	21,2	;volsfr
  5551                           
  5552                           ;flash.c: 24: PMCON2 = 0x55;
  5553  04E8  3055               	movlw	85
  5554  04E9  0096               	movwf	22	;volsfr
  5555                           
  5556                           ;flash.c: 25: PMCON2 = 0xAA;
  5557  04EA  30AA               	movlw	170
  5558  04EB  0096               	movwf	22	;volsfr
  5559                           
  5560                           ;flash.c: 27: PMCON1bits.WR = 1;
  5561  04EC  1495               	bsf	21,1	;volsfr
  5562                           
  5563                           ;flash.c: 29: __nop();
  5564  04ED  0000               	nop
  5565                           
  5566                           ;flash.c: 30: __nop();
  5567  04EE  0000               	nop
  5568                           
  5569                           ;flash.c: 32: PMCON1bits.WREN = 0;
  5570  04EF  0031               	movlb	17	; select bank17
  5571  04F0  1115               	bcf	21,2	;volsfr
  5572                           
  5573                           ;flash.c: 36: PMCON1 = 0x00;
  5574  04F1  0195               	clrf	21	;volsfr
  5575                           
  5576                           ;flash.c: 38: PMADRL = (char) (address >> 0);
  5577  04F2  0020               	movlb	0	; select bank0
  5578  04F3  082D               	movf	flashWriteByte@address,w
  5579  04F4  0031               	movlb	17	; select bank17
  5580  04F5  0091               	movwf	17	;volatile
  5581                           
  5582                           ;flash.c: 39: PMADRH = (char) (address >> 8);
  5583  04F6  0020               	movlb	0	; select bank0
  5584  04F7  082E               	movf	flashWriteByte@address+1,w
  5585  04F8  0031               	movlb	17	; select bank17
  5586  04F9  0092               	movwf	18	;volatile
  5587                           
  5588                           ;flash.c: 41: PMCON1bits.FREE = 0;
  5589  04FA  1215               	bcf	21,4	;volsfr
  5590                           
  5591                           ;flash.c: 42: PMCON1bits.LWLO = 1;
  5592  04FB  1695               	bsf	21,5	;volsfr
  5593                           
  5594                           ;flash.c: 43: PMCON1bits.WREN = 1;
  5595  04FC  1515               	bsf	21,2	;volsfr
  5596                           
  5597                           ;flash.c: 45: PMDATL = (data >> 0);
  5598  04FD  0020               	movlb	0	; select bank0
  5599  04FE  082B               	movf	flashWriteByte@data,w
  5600  04FF  0031               	movlb	17	; select bank17
  5601  0500  0093               	movwf	19	;volatile
  5602                           
  5603                           ;flash.c: 46: PMDATH = (data >> 8);
  5604  0501  0020               	movlb	0	; select bank0
  5605  0502  082C               	movf	flashWriteByte@data+1,w
  5606  0503  0031               	movlb	17	; select bank17
  5607  0504  0094               	movwf	20	;volatile
  5608                           
  5609                           ;flash.c: 48: PMCON1bits.LWLO = 0;
  5610  0505  1295               	bcf	21,5	;volsfr
  5611                           
  5612                           ;flash.c: 50: PMCON2 = 0x55;
  5613  0506  3055               	movlw	85
  5614  0507  0096               	movwf	22	;volsfr
  5615                           
  5616                           ;flash.c: 51: PMCON2 = 0xAA;
  5617  0508  30AA               	movlw	170
  5618  0509  0096               	movwf	22	;volsfr
  5619                           
  5620                           ;flash.c: 53: PMCON1bits.WR = 1;
  5621  050A  1495               	bsf	21,1	;volsfr
  5622                           
  5623                           ;flash.c: 55: __nop();
  5624  050B  0000               	nop
  5625                           
  5626                           ;flash.c: 56: __nop();
  5627  050C  0000               	nop
  5628                           
  5629                           ;flash.c: 58: PMCON1bits.WREN = 0;
  5630  050D  0031               	movlb	17	; select bank17
  5631  050E  1115               	bcf	21,2	;volsfr
  5632                           
  5633                           ;flash.c: 61: INTCONbits.GIE = 1;
  5634  050F  178B               	bsf	11,7	;volatile
  5635  0510  0008               	return
  5636  0511                     __end_of_flashWriteByte:	
  5637                           
  5638                           	psect	text18
  5639  0FE0                     __ptext18:	
  5640 ;; *************** function _flashRealod *****************
  5641 ;; Defined at:
  5642 ;;		line 90 in file "flash.c"
  5643 ;; Parameters:    Size  Location     Type
  5644 ;;		None
  5645 ;; Auto vars:     Size  Location     Type
  5646 ;;  i               2   19[BANK0 ] unsigned int 
  5647 ;; Return value:  Size  Location     Type
  5648 ;;                  1    wreg      void 
  5649 ;; Registers used:
  5650 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5651 ;; Tracked objects:
  5652 ;;		On entry : 0/0
  5653 ;;		On exit  : 0/0
  5654 ;;		Unchanged: 0/0
  5655 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5656 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5657 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5658 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5659 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5660 ;;Total ram usage:        3 bytes
  5661 ;; Hardware stack levels used:    1
  5662 ;; Hardware stack levels required when called:    8
  5663 ;; This function calls:
  5664 ;;		_flashReadByte
  5665 ;; This function is called by:
  5666 ;;		_main
  5667 ;; This function uses a non-reentrant model
  5668 ;;
  5669                           
  5670                           
  5671                           ;psect for function _flashRealod
  5672  0FE0                     _flashRealod:	
  5673                           
  5674                           ;flash.c: 92: for (unsigned int i = 0; i < 32; i++){
  5675                           
  5676                           ;incstack = 0
  5677                           ; Regs used in _flashRealod: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5678  0FE0  0020               	movlb	0	; select bank0
  5679  0FE1  01B3               	clrf	flashRealod@i
  5680  0FE2  01B4               	clrf	flashRealod@i+1
  5681  0FE3                     L2:	
  5682  0FE3  3000               	movlw	0
  5683  0FE4  0234               	subwf	flashRealod@i+1,w
  5684  0FE5  3020               	movlw	32
  5685  0FE6  1903               	skipnz
  5686  0FE7  0233               	subwf	flashRealod@i,w
  5687  0FE8  1803               	btfsc	3,0
  5688  0FE9  0008               	return
  5689                           
  5690                           ;flash.c: 93: romHolder.array[i] = flashReadByte(i);
  5691  0FEA  0834               	movf	flashRealod@i+1,w
  5692  0FEB  00AA               	movwf	flashReadByte@offset+1
  5693  0FEC  0833               	movf	flashRealod@i,w
  5694  0FED  00A9               	movwf	flashReadByte@offset
  5695  0FEE  3185  25EF  318F   	fcall	_flashReadByte
  5696  0FF1  0020               	movlb	0	; select bank0
  5697  0FF2  0829               	movf	?_flashReadByte,w
  5698  0FF3  00B2               	movwf	??_flashRealod
  5699  0FF4  0833               	movf	flashRealod@i,w
  5700  0FF5  3E20               	addlw	(low (_romHolder| (0+256)))& (0+255)
  5701  0FF6  0086               	movwf	6
  5702  0FF7  3001               	movlw	1	; select bank2/3
  5703  0FF8  0087               	movwf	7
  5704  0FF9  0832               	movf	??_flashRealod,w
  5705  0FFA  0081               	movwf	1
  5706  0FFB  3001               	movlw	1
  5707  0FFC  07B3               	addwf	flashRealod@i,f
  5708  0FFD  3000               	movlw	0
  5709  0FFE  3DB4               	addwfc	flashRealod@i+1,f
  5710  0FFF  2FE3               	goto	L2
  5711  1000                     __end_of_flashRealod:	
  5712                           
  5713                           	psect	text19
  5714  05EF                     __ptext19:	
  5715 ;; *************** function _flashReadByte *****************
  5716 ;; Defined at:
  5717 ;;		line 64 in file "flash.c"
  5718 ;; Parameters:    Size  Location     Type
  5719 ;;  offset          2    9[BANK0 ] unsigned int 
  5720 ;; Auto vars:     Size  Location     Type
  5721 ;;  address         2   16[BANK0 ] unsigned int 
  5722 ;;  result          2   14[BANK0 ] unsigned int 
  5723 ;; Return value:  Size  Location     Type
  5724 ;;                  2    9[BANK0 ] unsigned int 
  5725 ;; Registers used:
  5726 ;;		wreg, status,2, status,0
  5727 ;; Tracked objects:
  5728 ;;		On entry : 0/0
  5729 ;;		On exit  : 0/0
  5730 ;;		Unchanged: 0/0
  5731 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5732 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5733 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5734 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5735 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5736 ;;Total ram usage:        9 bytes
  5737 ;; Hardware stack levels used:    1
  5738 ;; Hardware stack levels required when called:    7
  5739 ;; This function calls:
  5740 ;;		Nothing
  5741 ;; This function is called by:
  5742 ;;		_flashRealod
  5743 ;; This function uses a non-reentrant model
  5744 ;;
  5745                           
  5746                           
  5747                           ;psect for function _flashReadByte
  5748  05EF                     _flashReadByte:	
  5749                           
  5750                           ;flash.c: 66: unsigned int address;;flash.c: 68: INTCONbits.GIE = 0;
  5751                           
  5752                           ;incstack = 0
  5753                           ; Regs used in _flashReadByte: [wreg+status,2+status,0]
  5754  05EF  138B               	bcf	11,7	;volatile
  5755                           
  5756                           ;flash.c: 70: PMCON1 = 0x00;
  5757  05F0  0031               	movlb	17	; select bank17
  5758  05F1  0195               	clrf	21	;volsfr
  5759                           
  5760                           ;flash.c: 72: address = (0x2000U - 32) + offset;
  5761  05F2  0020               	movlb	0	; select bank0
  5762  05F3  0829               	movf	flashReadByte@offset,w
  5763  05F4  3EE0               	addlw	224
  5764  05F5  00B0               	movwf	flashReadByte@address
  5765  05F6  301F               	movlw	31
  5766  05F7  3D2A               	addwfc	flashReadByte@offset+1,w
  5767  05F8  00B1               	movwf	flashReadByte@address+1
  5768                           
  5769                           ;flash.c: 73: PMADRL = (char) (address >> 0);
  5770  05F9  0830               	movf	flashReadByte@address,w
  5771  05FA  0031               	movlb	17	; select bank17
  5772  05FB  0091               	movwf	17	;volatile
  5773                           
  5774                           ;flash.c: 74: PMADRH = (char) (address >> 8);
  5775  05FC  0020               	movlb	0	; select bank0
  5776  05FD  0831               	movf	flashReadByte@address+1,w
  5777  05FE  0031               	movlb	17	; select bank17
  5778  05FF  0092               	movwf	18	;volatile
  5779                           
  5780                           ;flash.c: 76: PMCON1bits.RD = 1;
  5781  0600  1415               	bsf	21,0	;volsfr
  5782                           
  5783                           ;flash.c: 78: __nop();
  5784  0601  0000               	nop
  5785                           
  5786                           ;flash.c: 79: __nop();
  5787  0602  0000               	nop
  5788                           
  5789                           ;flash.c: 81: unsigned int result = 0;
  5790  0603  0020               	movlb	0	; select bank0
  5791  0604  01AE               	clrf	flashReadByte@result
  5792  0605  01AF               	clrf	flashReadByte@result+1
  5793                           
  5794                           ;flash.c: 82: result = PMDATL;
  5795  0606  0031               	movlb	17	; select bank17
  5796  0607  0813               	movf	19,w	;volatile
  5797  0608  0020               	movlb	0	; select bank0
  5798  0609  00AB               	movwf	??_flashReadByte
  5799  060A  01AC               	clrf	??_flashReadByte+1
  5800  060B  082B               	movf	??_flashReadByte,w
  5801  060C  00AE               	movwf	flashReadByte@result
  5802  060D  082C               	movf	??_flashReadByte+1,w
  5803  060E  00AF               	movwf	flashReadByte@result+1
  5804                           
  5805                           ;flash.c: 83: result|= ( (unsigned) (PMDATH) << 8);
  5806  060F  0031               	movlb	17	; select bank17
  5807  0610  0814               	movf	20,w	;volatile
  5808  0611  0020               	movlb	0	; select bank0
  5809  0612  00AB               	movwf	??_flashReadByte
  5810  0613  01AC               	clrf	??_flashReadByte+1
  5811  0614  082B               	movf	??_flashReadByte,w
  5812  0615  00AC               	movwf	??_flashReadByte+1
  5813  0616  01AB               	clrf	??_flashReadByte
  5814  0617  082B               	movf	??_flashReadByte,w
  5815  0618  04AE               	iorwf	flashReadByte@result,f
  5816  0619  082C               	movf	??_flashReadByte+1,w
  5817  061A  04AF               	iorwf	flashReadByte@result+1,f
  5818                           
  5819                           ;flash.c: 85: INTCONbits.GIE = 1;
  5820  061B  178B               	bsf	11,7	;volatile
  5821                           
  5822                           ;flash.c: 87: return result;
  5823  061C  082F               	movf	flashReadByte@result+1,w
  5824  061D  00AA               	movwf	?_flashReadByte+1
  5825  061E  082E               	movf	flashReadByte@result,w
  5826  061F  00A9               	movwf	?_flashReadByte
  5827  0620  0008               	return
  5828  0621                     __end_of_flashReadByte:	
  5829                           
  5830                           	psect	intentry
  5831  0004                     __pintentry:	
  5832 ;; *************** function _ISR *****************
  5833 ;; Defined at:
  5834 ;;		line 14 in file "main.c"
  5835 ;; Parameters:    Size  Location     Type
  5836 ;;		None
  5837 ;; Auto vars:     Size  Location     Type
  5838 ;;		None
  5839 ;; Return value:  Size  Location     Type
  5840 ;;                  1    wreg      void 
  5841 ;; Registers used:
  5842 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5843 ;; Tracked objects:
  5844 ;;		On entry : 0/0
  5845 ;;		On exit  : 0/0
  5846 ;;		Unchanged: 0/0
  5847 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5848 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5849 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5850 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5851 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5852 ;;Total ram usage:        0 bytes
  5853 ;; Hardware stack levels used:    1
  5854 ;; Hardware stack levels required when called:    6
  5855 ;; This function calls:
  5856 ;;		_nrf24l01ISR
  5857 ;; This function is called by:
  5858 ;;		Interrupt level 1
  5859 ;; This function uses a non-reentrant model
  5860 ;;
  5861                           
  5862  0004                     _ISR:	
  5863                           
  5864                           ;incstack = 0
  5865  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
  5866                           
  5867                           ; Regs used in _ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5868  0005  3180               	pagesel	$
  5869                           
  5870                           ;main.c: 16: if (PIR0bits.INTF){
  5871  0006  0020               	movlb	0	; select bank0
  5872  0007  1C10               	btfss	16,0	;volatile
  5873  0008  280D               	goto	i1l207
  5874                           
  5875                           ;main.c: 17: nrf24l01ISR();
  5876  0009  3186  26B1         	fcall	_nrf24l01ISR
  5877                           
  5878                           ;main.c: 18: PIR0bits.INTF = 0;
  5879  000B  0020               	movlb	0	; select bank0
  5880  000C  1010               	bcf	16,0	;volatile
  5881  000D                     i1l207:	
  5882  000D  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
  5883  000E  0009               	retfie
  5884  000F                     __end_of_ISR:	
  5885                           
  5886                           	psect	text21
  5887  06B1                     __ptext21:	
  5888 ;; *************** function _nrf24l01ISR *****************
  5889 ;; Defined at:
  5890 ;;		line 329 in file "nrf24l01.c"
  5891 ;; Parameters:    Size  Location     Type
  5892 ;;		None
  5893 ;; Auto vars:     Size  Location     Type
  5894 ;;  status          1    8[BANK0 ] struct .
  5895 ;; Return value:  Size  Location     Type
  5896 ;;                  1    wreg      void 
  5897 ;; Registers used:
  5898 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5899 ;; Tracked objects:
  5900 ;;		On entry : 0/0
  5901 ;;		On exit  : 0/0
  5902 ;;		Unchanged: 0/0
  5903 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5904 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5905 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5906 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5907 ;;      Totals:         1       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5908 ;;Total ram usage:        2 bytes
  5909 ;; Hardware stack levels used:    1
  5910 ;; Hardware stack levels required when called:    5
  5911 ;; This function calls:
  5912 ;;		_exception
  5913 ;;		_nrf24l01CheckACK
  5914 ;;		_nrf24l01ReceiveString
  5915 ;;		i1_nrf24l01Send
  5916 ;;		i1_nrf24l01SetRXMode
  5917 ;; This function is called by:
  5918 ;;		_ISR
  5919 ;; This function uses a non-reentrant model
  5920 ;;
  5921                           
  5922                           
  5923                           ;psect for function _nrf24l01ISR
  5924  06B1                     _nrf24l01ISR:	
  5925                           
  5926                           ;nrf24l01.c: 331: n_STATUS_t status;;nrf24l01.c: 332: status.byte = nrf24l01Send(0b00000
      +                          000 | 0x07, 0);
  5927                           
  5928                           ;incstack = 0
  5929                           ; Regs used in _nrf24l01ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5930  06B1  01F1               	clrf	i1nrf24l01Send@data
  5931  06B2  3007               	movlw	7
  5932  06B3  318F  278F  3186   	fcall	i1_nrf24l01Send
  5933  06B6  00FD               	movwf	??_nrf24l01ISR
  5934  06B7  087D               	movf	??_nrf24l01ISR,w
  5935  06B8  0020               	movlb	0	; select bank0
  5936  06B9  00A8               	movwf	nrf24l01ISR@status
  5937                           
  5938                           ;nrf24l01.c: 337: };nrf24l01.c: 340: if (status.byte == 0xFF){
  5939  06BA  0A28               	incf	nrf24l01ISR@status,w
  5940  06BB  1D03               	btfss	3,2
  5941  06BC  2EC1               	goto	i1l3511
  5942                           
  5943                           ;nrf24l01.c: 341: exception(2);
  5944  06BD  3002               	movlw	2
  5945  06BE  318F  275C  3186   	fcall	_exception
  5946  06C1                     i1l3511:	
  5947                           
  5948                           ;nrf24l01.c: 342: };nrf24l01.c: 344: if (status.TX_DS){
  5949  06C1  0020               	movlb	0	; select bank0
  5950  06C2  1EA8               	btfss	nrf24l01ISR@status,5
  5951  06C3  2ECC               	goto	i1l3519
  5952                           
  5953                           ;nrf24l01.c: 347: nrf24l01.TXBusy = 0;
  5954  06C4  10CD               	bcf	_nrf24l01,1	;volatile
  5955                           
  5956                           ;nrf24l01.c: 350: if (!nrf24l01.RXMode){
  5957  06C5  1DCD               	btfss	_nrf24l01,3	;volatile
  5958                           
  5959                           ;nrf24l01.c: 351: if (nrf24l01TXPacketData.ACKRequest){
  5960  06C6  1C4E               	btfss	_nrf24l01TXPacketData,0
  5961  06C7  2ECC               	goto	i1l3519
  5962                           
  5963                           ;nrf24l01.c: 353: nrf24l01SetRXMode(1);
  5964  06C8  3001               	movlw	1
  5965  06C9  3185  2583  3186   	fcall	i1_nrf24l01SetRXMode
  5966  06CC                     i1l3519:	
  5967                           
  5968                           ;nrf24l01.c: 354: };nrf24l01.c: 355: };nrf24l01.c: 356: };nrf24l01.c: 359: if (status.RX
      +                          _DR){
  5969  06CC  0020               	movlb	0	; select bank0
  5970  06CD  1F28               	btfss	nrf24l01ISR@status,6
  5971  06CE  2ED6               	goto	i1l3527
  5972                           
  5973                           ;nrf24l01.c: 361: nrf24l01.RXPending = 1;
  5974  06CF  154D               	bsf	_nrf24l01,2	;volatile
  5975                           
  5976                           ;nrf24l01.c: 363: nrf24l01ReceiveString();
  5977  06D0  3182  22F8  3186   	fcall	_nrf24l01ReceiveString
  5978                           
  5979                           ;nrf24l01.c: 364: nrf24l01CheckACK();
  5980  06D3  3186  2651  3186   	fcall	_nrf24l01CheckACK
  5981  06D6                     i1l3527:	
  5982                           
  5983                           ;nrf24l01.c: 365: };nrf24l01.c: 368: nrf24l01Send(0b00100000 | 0x07, status.byte);
  5984  06D6  0020               	movlb	0	; select bank0
  5985  06D7  0828               	movf	nrf24l01ISR@status,w
  5986  06D8  00FD               	movwf	??_nrf24l01ISR
  5987  06D9  087D               	movf	??_nrf24l01ISR,w
  5988  06DA  00F1               	movwf	i1nrf24l01Send@data
  5989  06DB  3027               	movlw	39
  5990  06DC  318F  278F         	fcall	i1_nrf24l01Send
  5991  06DE  0008               	return
  5992  06DF                     __end_of_nrf24l01ISR:	
  5993                           
  5994                           	psect	text22
  5995  02F8                     __ptext22:	
  5996 ;; *************** function _nrf24l01ReceiveString *****************
  5997 ;; Defined at:
  5998 ;;		line 177 in file "nrf24l01.c"
  5999 ;; Parameters:    Size  Location     Type
  6000 ;;		None
  6001 ;; Auto vars:     Size  Location     Type
  6002 ;;  offset          1    7[BANK0 ] unsigned char 
  6003 ;;  width           1    6[BANK0 ] unsigned char 
  6004 ;; Return value:  Size  Location     Type
  6005 ;;                  1    wreg      void 
  6006 ;; Registers used:
  6007 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6008 ;; Tracked objects:
  6009 ;;		On entry : 0/0
  6010 ;;		On exit  : 0/0
  6011 ;;		Unchanged: 0/0
  6012 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6013 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6014 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6015 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6016 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6017 ;;Total ram usage:        6 bytes
  6018 ;; Hardware stack levels used:    1
  6019 ;; Hardware stack levels required when called:    3
  6020 ;; This function calls:
  6021 ;;		_memset
  6022 ;;		_nrf24l01CEHigh
  6023 ;;		_nrf24l01CELow
  6024 ;;		_nrf24l01ReceiveStringPart
  6025 ;;		_nrf24l01SPIEnd
  6026 ;;		_nrf24l01SPISend
  6027 ;;		_nrf24l01SPIStart
  6028 ;;		_strlen
  6029 ;;		i1_nrf24l01Send
  6030 ;; This function is called by:
  6031 ;;		_nrf24l01ISR
  6032 ;; This function uses a non-reentrant model
  6033 ;;
  6034                           
  6035                           
  6036                           ;psect for function _nrf24l01ReceiveString
  6037  02F8                     _nrf24l01ReceiveString:	
  6038                           
  6039                           ;nrf24l01.c: 180: unsigned char offset = 0;
  6040                           
  6041                           ;incstack = 0
  6042                           ; Regs used in _nrf24l01ReceiveString: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  6043  02F8  0020               	movlb	0	; select bank0
  6044  02F9  01A7               	clrf	nrf24l01ReceiveString@offset
  6045                           
  6046                           ;nrf24l01.c: 183: memset(nrf24l01RXName, 0 ,strlen(nrf24l01RXName));
  6047  02FA  3000               	movlw	0
  6048  02FB  00F8               	movwf	memset@c
  6049  02FC  00F9               	movwf	memset@c+1
  6050  02FD  30B3               	movlw	(low (_nrf24l01RXName| 0))& (0+255)
  6051  02FE  3187  275B  3182   	fcall	_strlen
  6052  0301  0871               	movf	?_strlen+1,w
  6053  0302  00FB               	movwf	memset@n+1
  6054  0303  0870               	movf	?_strlen,w
  6055  0304  00FA               	movwf	memset@n
  6056  0305  30B3               	movlw	(low (_nrf24l01RXName| 0))& (0+255)
  6057  0306  318F  27AA  3182   	fcall	_memset
  6058                           
  6059                           ;nrf24l01.c: 184: memset(nrf24l01RXTopic, 0 ,strlen(nrf24l01RXTopic));
  6060  0309  3000               	movlw	0
  6061  030A  00F8               	movwf	memset@c
  6062  030B  00F9               	movwf	memset@c+1
  6063  030C  304F               	movlw	(low (_nrf24l01RXTopic| 0))& (0+255)
  6064  030D  3187  275B  3182   	fcall	_strlen
  6065  0310  0871               	movf	?_strlen+1,w
  6066  0311  00FB               	movwf	memset@n+1
  6067  0312  0870               	movf	?_strlen,w
  6068  0313  00FA               	movwf	memset@n
  6069  0314  304F               	movlw	(low (_nrf24l01RXTopic| 0))& (0+255)
  6070  0315  318F  27AA  3182   	fcall	_memset
  6071                           
  6072                           ;nrf24l01.c: 185: memset(nrf24l01RXValue, 0 ,strlen(nrf24l01RXValue));
  6073  0318  3000               	movlw	0
  6074  0319  00F8               	movwf	memset@c
  6075  031A  00F9               	movwf	memset@c+1
  6076  031B  30D3               	movlw	(low (_nrf24l01RXValue| 0))& (0+255)
  6077  031C  3187  275B  3182   	fcall	_strlen
  6078  031F  0871               	movf	?_strlen+1,w
  6079  0320  00FB               	movwf	memset@n+1
  6080  0321  0870               	movf	?_strlen,w
  6081  0322  00FA               	movwf	memset@n
  6082  0323  30D3               	movlw	(low (_nrf24l01RXValue| 0))& (0+255)
  6083  0324  318F  27AA  3182   	fcall	_memset
  6084                           
  6085                           ;nrf24l01.c: 188: unsigned char width = nrf24l01Send(0b01100000, 0);
  6086  0327  01F1               	clrf	i1nrf24l01Send@data
  6087  0328  3060               	movlw	96
  6088  0329  318F  278F  3182   	fcall	i1_nrf24l01Send
  6089  032C  0020               	movlb	0	; select bank0
  6090  032D  00A2               	movwf	??_nrf24l01ReceiveString
  6091  032E  0822               	movf	??_nrf24l01ReceiveString,w
  6092  032F  00A6               	movwf	nrf24l01ReceiveString@width
  6093                           
  6094                           ;nrf24l01.c: 191: nrf24l01CELow();
  6095  0330  318F  2720  3182   	fcall	_nrf24l01CELow
  6096                           
  6097                           ;nrf24l01.c: 194: nrf24l01SPIStart();
  6098  0333  318F  273E  3182   	fcall	_nrf24l01SPIStart
  6099                           
  6100                           ;nrf24l01.c: 197: nrf24l01SPISend(0b01100001);
  6101  0336  3061               	movlw	97
  6102  0337  318F  274F  3182   	fcall	_nrf24l01SPISend
  6103                           
  6104                           ;nrf24l01.c: 200: nrf24l01RXPacketData.byte = nrf24l01SPISend(0);
  6105  033A  3000               	movlw	0
  6106  033B  318F  274F  3182   	fcall	_nrf24l01SPISend
  6107  033E  0020               	movlb	0	; select bank0
  6108  033F  00A2               	movwf	??_nrf24l01ReceiveString
  6109  0340  0822               	movf	??_nrf24l01ReceiveString,w
  6110  0341  00CB               	movwf	_nrf24l01RXPacketData
  6111                           
  6112                           ;nrf24l01.c: 201: width--;
  6113  0342  3001               	movlw	1
  6114  0343  02A6               	subwf	nrf24l01ReceiveString@width,f
  6115                           
  6116                           ;nrf24l01.c: 204: offset+= nrf24l01ReceiveStringPart(nrf24l01RXName, offset, sizeof(nrf2
      +                          4l01RXName), width);
  6117  0344  0827               	movf	nrf24l01ReceiveString@offset,w
  6118  0345  00A2               	movwf	??_nrf24l01ReceiveString
  6119  0346  0822               	movf	??_nrf24l01ReceiveString,w
  6120  0347  00F1               	movwf	nrf24l01ReceiveStringPart@offset
  6121  0348  3010               	movlw	16
  6122  0349  00A3               	movwf	??_nrf24l01ReceiveString+1
  6123  034A  0823               	movf	??_nrf24l01ReceiveString+1,w
  6124  034B  00F2               	movwf	nrf24l01ReceiveStringPart@destLength
  6125  034C  0826               	movf	nrf24l01ReceiveString@width,w
  6126  034D  00A4               	movwf	??_nrf24l01ReceiveString+2
  6127  034E  0824               	movf	??_nrf24l01ReceiveString+2,w
  6128  034F  00F3               	movwf	nrf24l01ReceiveStringPart@sourceLength
  6129  0350  30B3               	movlw	(low (_nrf24l01RXName| 0))& (0+255)
  6130  0351  3185  254C  3182   	fcall	_nrf24l01ReceiveStringPart
  6131  0354  0020               	movlb	0	; select bank0
  6132  0355  00A5               	movwf	??_nrf24l01ReceiveString+3
  6133  0356  0825               	movf	??_nrf24l01ReceiveString+3,w
  6134  0357  07A7               	addwf	nrf24l01ReceiveString@offset,f
  6135                           
  6136                           ;nrf24l01.c: 205: offset+= nrf24l01ReceiveStringPart(nrf24l01RXTopic, offset, sizeof(nrf
      +                          24l01RXTopic), width);
  6137  0358  0827               	movf	nrf24l01ReceiveString@offset,w
  6138  0359  00A2               	movwf	??_nrf24l01ReceiveString
  6139  035A  0822               	movf	??_nrf24l01ReceiveString,w
  6140  035B  00F1               	movwf	nrf24l01ReceiveStringPart@offset
  6141  035C  3008               	movlw	8
  6142  035D  00A3               	movwf	??_nrf24l01ReceiveString+1
  6143  035E  0823               	movf	??_nrf24l01ReceiveString+1,w
  6144  035F  00F2               	movwf	nrf24l01ReceiveStringPart@destLength
  6145  0360  0826               	movf	nrf24l01ReceiveString@width,w
  6146  0361  00A4               	movwf	??_nrf24l01ReceiveString+2
  6147  0362  0824               	movf	??_nrf24l01ReceiveString+2,w
  6148  0363  00F3               	movwf	nrf24l01ReceiveStringPart@sourceLength
  6149  0364  304F               	movlw	(low (_nrf24l01RXTopic| 0))& (0+255)
  6150  0365  3185  254C  3182   	fcall	_nrf24l01ReceiveStringPart
  6151  0368  0020               	movlb	0	; select bank0
  6152  0369  00A5               	movwf	??_nrf24l01ReceiveString+3
  6153  036A  0825               	movf	??_nrf24l01ReceiveString+3,w
  6154  036B  07A7               	addwf	nrf24l01ReceiveString@offset,f
  6155                           
  6156                           ;nrf24l01.c: 206: offset+= nrf24l01ReceiveStringPart(nrf24l01RXValue, offset, sizeof(nrf
      +                          24l01RXValue), width);
  6157  036C  0827               	movf	nrf24l01ReceiveString@offset,w
  6158  036D  00A2               	movwf	??_nrf24l01ReceiveString
  6159  036E  0822               	movf	??_nrf24l01ReceiveString,w
  6160  036F  00F1               	movwf	nrf24l01ReceiveStringPart@offset
  6161  0370  3008               	movlw	8
  6162  0371  00A3               	movwf	??_nrf24l01ReceiveString+1
  6163  0372  0823               	movf	??_nrf24l01ReceiveString+1,w
  6164  0373  00F2               	movwf	nrf24l01ReceiveStringPart@destLength
  6165  0374  0826               	movf	nrf24l01ReceiveString@width,w
  6166  0375  00A4               	movwf	??_nrf24l01ReceiveString+2
  6167  0376  0824               	movf	??_nrf24l01ReceiveString+2,w
  6168  0377  00F3               	movwf	nrf24l01ReceiveStringPart@sourceLength
  6169  0378  30D3               	movlw	(low (_nrf24l01RXValue| 0))& (0+255)
  6170  0379  3185  254C  3182   	fcall	_nrf24l01ReceiveStringPart
  6171  037C  0020               	movlb	0	; select bank0
  6172  037D  00A5               	movwf	??_nrf24l01ReceiveString+3
  6173  037E  0825               	movf	??_nrf24l01ReceiveString+3,w
  6174  037F  07A7               	addwf	nrf24l01ReceiveString@offset,f
  6175                           
  6176                           ;nrf24l01.c: 209: nrf24l01SPIEnd();
  6177  0380  318F  272F  3182   	fcall	_nrf24l01SPIEnd
  6178                           
  6179                           ;nrf24l01.c: 212: nrf24l01CEHigh();
  6180  0383  318F  271D         	fcall	_nrf24l01CEHigh
  6181  0385  0008               	return
  6182  0386                     __end_of_nrf24l01ReceiveString:	
  6183                           
  6184                           	psect	text23
  6185  075B                     __ptext23:	
  6186 ;; *************** function _strlen *****************
  6187 ;; Defined at:
  6188 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\strlen.c"
  6189 ;; Parameters:    Size  Location     Type
  6190 ;;  s               1    wreg     PTR const unsigned char 
  6191 ;;		 -> nrf24l01RXValue(8), nrf24l01RXTopic(8), nrf24l01RXName(16), 
  6192 ;; Auto vars:     Size  Location     Type
  6193 ;;  s               1    7[COMMON] PTR const unsigned char 
  6194 ;;		 -> nrf24l01RXValue(8), nrf24l01RXTopic(8), nrf24l01RXName(16), 
  6195 ;;  cp              1    6[COMMON] PTR const unsigned char 
  6196 ;;		 -> nrf24l01RXValue(8), nrf24l01RXTopic(8), nrf24l01RXName(16), 
  6197 ;; Return value:  Size  Location     Type
  6198 ;;                  2    0[COMMON] unsigned int 
  6199 ;; Registers used:
  6200 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  6201 ;; Tracked objects:
  6202 ;;		On entry : 0/0
  6203 ;;		On exit  : 0/0
  6204 ;;		Unchanged: 0/0
  6205 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6206 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6207 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6208 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6209 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6210 ;;Total ram usage:        8 bytes
  6211 ;; Hardware stack levels used:    1
  6212 ;; This function calls:
  6213 ;;		Nothing
  6214 ;; This function is called by:
  6215 ;;		_nrf24l01ReceiveString
  6216 ;; This function uses a non-reentrant model
  6217 ;;
  6218                           
  6219                           
  6220                           ;psect for function _strlen
  6221  075B                     _strlen:	
  6222                           
  6223                           ;incstack = 0
  6224                           ; Regs used in _strlen: [wreg+fsr1l+fsr1h+status,2+status,0]
  6225                           ;strlen@s stored from wreg
  6226  075B  00F7               	movwf	strlen@s
  6227  075C  0877               	movf	strlen@s,w
  6228  075D  00F2               	movwf	??_strlen
  6229  075E  0872               	movf	??_strlen,w
  6230  075F  00F6               	movwf	strlen@cp
  6231  0760                     i1l2067:	
  6232  0760  0876               	movf	strlen@cp,w
  6233  0761  0086               	movwf	6
  6234  0762  0187               	clrf	7
  6235  0763  0801               	movf	1,w
  6236  0764  1903               	btfsc	3,2
  6237  0765  2F6B               	goto	i1l2069
  6238  0766  3001               	movlw	1
  6239  0767  00F2               	movwf	??_strlen
  6240  0768  0872               	movf	??_strlen,w
  6241  0769  07F6               	addwf	strlen@cp,f
  6242  076A  2F60               	goto	i1l2067
  6243  076B                     i1l2069:	
  6244  076B  0877               	movf	strlen@s,w
  6245  076C  00F2               	movwf	??_strlen
  6246  076D  3000               	movlw	0
  6247  076E  00F3               	movwf	??_strlen+1
  6248  076F  09F2               	comf	??_strlen,f
  6249  0770  09F3               	comf	??_strlen+1,f
  6250  0771  0AF2               	incf	??_strlen,f
  6251  0772  1903               	skipnz
  6252  0773  0AF3               	incf	??_strlen+1,f
  6253  0774  0876               	movf	strlen@cp,w
  6254  0775  00F4               	movwf	??_strlen+2
  6255  0776  3000               	movlw	0
  6256  0777  00F5               	movwf	??_strlen+3
  6257  0778  0872               	movf	??_strlen,w
  6258  0779  0774               	addwf	??_strlen+2,w
  6259  077A  00F0               	movwf	?_strlen
  6260  077B  0873               	movf	??_strlen+1,w
  6261  077C  3D75               	addwfc	??_strlen+3,w
  6262  077D  00F1               	movwf	?_strlen+1
  6263  077E  0008               	return
  6264  077F                     __end_of_strlen:	
  6265                           
  6266                           	psect	text24
  6267  054C                     __ptext24:	
  6268 ;; *************** function _nrf24l01ReceiveStringPart *****************
  6269 ;; Defined at:
  6270 ;;		line 111 in file "nrf24l01.c"
  6271 ;; Parameters:    Size  Location     Type
  6272 ;;  string          1    wreg     PTR unsigned char 
  6273 ;;		 -> nrf24l01RXValue(8), nrf24l01RXTopic(8), nrf24l01RXName(16), 
  6274 ;;  offset          1    1[COMMON] unsigned char 
  6275 ;;  destLength      1    2[COMMON] unsigned char 
  6276 ;;  sourceLength    1    3[COMMON] unsigned char 
  6277 ;; Auto vars:     Size  Location     Type
  6278 ;;  string          1    7[COMMON] PTR unsigned char 
  6279 ;;		 -> nrf24l01RXValue(8), nrf24l01RXTopic(8), nrf24l01RXName(16), 
  6280 ;;  i               1    9[COMMON] unsigned char 
  6281 ;;  byte            1    8[COMMON] unsigned char 
  6282 ;; Return value:  Size  Location     Type
  6283 ;;                  1    wreg      unsigned char 
  6284 ;; Registers used:
  6285 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6286 ;; Tracked objects:
  6287 ;;		On entry : 0/0
  6288 ;;		On exit  : 0/0
  6289 ;;		Unchanged: 0/0
  6290 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6291 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6292 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6293 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6294 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6295 ;;Total ram usage:        9 bytes
  6296 ;; Hardware stack levels used:    1
  6297 ;; Hardware stack levels required when called:    1
  6298 ;; This function calls:
  6299 ;;		_nrf24l01SPISend
  6300 ;; This function is called by:
  6301 ;;		_nrf24l01ReceiveString
  6302 ;; This function uses a non-reentrant model
  6303 ;;
  6304                           
  6305                           
  6306                           ;psect for function _nrf24l01ReceiveStringPart
  6307  054C                     _nrf24l01ReceiveStringPart:	
  6308                           
  6309                           ;incstack = 0
  6310                           ; Regs used in _nrf24l01ReceiveStringPart: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cs
      +                          tack]
  6311                           ;nrf24l01ReceiveStringPart@string stored from wreg
  6312  054C  00F7               	movwf	nrf24l01ReceiveStringPart@string
  6313                           
  6314                           ;nrf24l01.c: 113: unsigned char byte;;nrf24l01.c: 114: unsigned char i;;nrf24l01.c: 118:
      +                           for (i = 0; (i < destLength) && (offset + i < sourceLength) ; i++){
  6315  054D  01F9               	clrf	nrf24l01ReceiveStringPart@i
  6316  054E  2D6D               	goto	i1l2981
  6317  054F                     i1l2971:	
  6318                           
  6319                           ;nrf24l01.c: 121: byte = nrf24l01SPISend(0);
  6320  054F  3000               	movlw	0
  6321  0550  318F  274F  3185   	fcall	_nrf24l01SPISend
  6322  0553  00F4               	movwf	??_nrf24l01ReceiveStringPart
  6323  0554  0874               	movf	??_nrf24l01ReceiveStringPart,w
  6324  0555  00F8               	movwf	nrf24l01ReceiveStringPart@byte
  6325                           
  6326                           ;nrf24l01.c: 124: if (byte == '/'){
  6327  0556  302F               	movlw	47
  6328  0557  0678               	xorwf	nrf24l01ReceiveStringPart@byte,w
  6329  0558  1D03               	btfss	3,2
  6330  0559  2D5F               	goto	i1l2977
  6331                           
  6332                           ;nrf24l01.c: 125: i++;
  6333  055A  3001               	movlw	1
  6334  055B  00F4               	movwf	??_nrf24l01ReceiveStringPart
  6335  055C  0874               	movf	??_nrf24l01ReceiveStringPart,w
  6336  055D  07F9               	addwf	nrf24l01ReceiveStringPart@i,f
  6337                           
  6338                           ;nrf24l01.c: 126: break;
  6339  055E  2D81               	goto	i1l2985
  6340  055F                     i1l2977:	
  6341                           
  6342                           ;nrf24l01.c: 127: };nrf24l01.c: 130: string[i] = byte;
  6343  055F  0878               	movf	nrf24l01ReceiveStringPart@byte,w
  6344  0560  00F4               	movwf	??_nrf24l01ReceiveStringPart
  6345  0561  0879               	movf	nrf24l01ReceiveStringPart@i,w
  6346  0562  0777               	addwf	nrf24l01ReceiveStringPart@string,w
  6347  0563  00F5               	movwf	??_nrf24l01ReceiveStringPart+1
  6348  0564  0875               	movf	??_nrf24l01ReceiveStringPart+1,w
  6349  0565  0086               	movwf	6
  6350  0566  0187               	clrf	7
  6351  0567  0874               	movf	??_nrf24l01ReceiveStringPart,w
  6352  0568  0081               	movwf	1
  6353  0569  3001               	movlw	1
  6354  056A  00F4               	movwf	??_nrf24l01ReceiveStringPart
  6355  056B  0874               	movf	??_nrf24l01ReceiveStringPart,w
  6356  056C  07F9               	addwf	nrf24l01ReceiveStringPart@i,f
  6357  056D                     i1l2981:	
  6358  056D  0872               	movf	nrf24l01ReceiveStringPart@destLength,w
  6359  056E  0279               	subwf	nrf24l01ReceiveStringPart@i,w
  6360  056F  1803               	skipnc
  6361  0570  2D81               	goto	i1l2985
  6362  0571  0871               	movf	nrf24l01ReceiveStringPart@offset,w
  6363  0572  0779               	addwf	nrf24l01ReceiveStringPart@i,w
  6364  0573  00F4               	movwf	??_nrf24l01ReceiveStringPart
  6365  0574  01F5               	clrf	??_nrf24l01ReceiveStringPart+1
  6366  0575  0DF5               	rlf	??_nrf24l01ReceiveStringPart+1,f
  6367  0576  0875               	movf	??_nrf24l01ReceiveStringPart+1,w
  6368  0577  3A80               	xorlw	128
  6369  0578  00F6               	movwf	??_nrf24l01ReceiveStringPart+2
  6370  0579  3080               	movlw	128
  6371  057A  0276               	subwf	??_nrf24l01ReceiveStringPart+2,w
  6372  057B  1D03               	skipz
  6373  057C  2D7F               	goto	u170_25
  6374  057D  0873               	movf	nrf24l01ReceiveStringPart@sourceLength,w
  6375  057E  0274               	subwf	??_nrf24l01ReceiveStringPart,w
  6376  057F                     u170_25:	
  6377  057F  1C03               	skipc
  6378  0580  2D4F               	goto	i1l2971
  6379  0581                     i1l2985:	
  6380                           
  6381                           ;nrf24l01.c: 131: };nrf24l01.c: 134: return i;
  6382  0581  0879               	movf	nrf24l01ReceiveStringPart@i,w
  6383  0582  0008               	return
  6384  0583                     __end_of_nrf24l01ReceiveStringPart:	
  6385                           
  6386                           	psect	text25
  6387  0FAA                     __ptext25:	
  6388 ;; *************** function _memset *****************
  6389 ;; Defined at:
  6390 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\memset.c"
  6391 ;; Parameters:    Size  Location     Type
  6392 ;;  p1              1    wreg     PTR void 
  6393 ;;		 -> nrf24l01RXValue(8), nrf24l01RXTopic(8), nrf24l01RXName(16), 
  6394 ;;  c               2    8[COMMON] int 
  6395 ;;  n               2   10[COMMON] unsigned int 
  6396 ;; Auto vars:     Size  Location     Type
  6397 ;;  p1              1    1[BANK0 ] PTR void 
  6398 ;;		 -> nrf24l01RXValue(8), nrf24l01RXTopic(8), nrf24l01RXName(16), 
  6399 ;;  p               1    0[BANK0 ] PTR unsigned char 
  6400 ;;		 -> nrf24l01RXValue(8), nrf24l01RXTopic(8), nrf24l01RXName(16), 
  6401 ;; Return value:  Size  Location     Type
  6402 ;;                  1    wreg      PTR void 
  6403 ;; Registers used:
  6404 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  6405 ;; Tracked objects:
  6406 ;;		On entry : 0/0
  6407 ;;		On exit  : 0/0
  6408 ;;		Unchanged: 0/0
  6409 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6410 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6411 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6412 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6413 ;;      Totals:         5       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6414 ;;Total ram usage:        7 bytes
  6415 ;; Hardware stack levels used:    1
  6416 ;; This function calls:
  6417 ;;		Nothing
  6418 ;; This function is called by:
  6419 ;;		_nrf24l01ReceiveString
  6420 ;; This function uses a non-reentrant model
  6421 ;;
  6422                           
  6423                           
  6424                           ;psect for function _memset
  6425  0FAA                     _memset:	
  6426                           
  6427                           ;incstack = 0
  6428                           ; Regs used in _memset: [wreg+fsr1l+fsr1h+status,2+status,0]
  6429                           ;memset@p1 stored from wreg
  6430  0FAA  0020               	movlb	0	; select bank0
  6431  0FAB  00A1               	movwf	memset@p1
  6432  0FAC  0821               	movf	memset@p1,w
  6433  0FAD  00FC               	movwf	??_memset
  6434  0FAE  087C               	movf	??_memset,w
  6435  0FAF  00A0               	movwf	memset@p
  6436  0FB0                     i1l2079:	
  6437  0FB0  3001               	movlw	1
  6438  0FB1  02FA               	subwf	memset@n,f
  6439  0FB2  3000               	movlw	0
  6440  0FB3  3BFB               	subwfb	memset@n+1,f
  6441  0FB4  0A7A               	incf	memset@n,w
  6442  0FB5  1903               	btfsc	3,2
  6443  0FB6  0A7B               	incf	memset@n+1,w
  6444  0FB7  1903               	btfsc	3,2
  6445  0FB8  0008               	return
  6446  0FB9  0878               	movf	memset@c,w
  6447  0FBA  00FC               	movwf	??_memset
  6448  0FBB  0820               	movf	memset@p,w
  6449  0FBC  0086               	movwf	6
  6450  0FBD  0187               	clrf	7
  6451  0FBE  087C               	movf	??_memset,w
  6452  0FBF  0081               	movwf	1
  6453  0FC0  3001               	movlw	1
  6454  0FC1  00FC               	movwf	??_memset
  6455  0FC2  087C               	movf	??_memset,w
  6456  0FC3  07A0               	addwf	memset@p,f
  6457  0FC4  2FB0               	goto	i1l2079
  6458  0FC5                     __end_of_memset:	
  6459                           ;	Return value of _memset is never used
  6460                           
  6461                           
  6462                           	psect	text26
  6463  0651                     __ptext26:	
  6464 ;; *************** function _nrf24l01CheckACK *****************
  6465 ;; Defined at:
  6466 ;;		line 137 in file "nrf24l01.c"
  6467 ;; Parameters:    Size  Location     Type
  6468 ;;		None
  6469 ;; Auto vars:     Size  Location     Type
  6470 ;;		None
  6471 ;; Return value:  Size  Location     Type
  6472 ;;                  1    wreg      void 
  6473 ;; Registers used:
  6474 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6475 ;; Tracked objects:
  6476 ;;		On entry : 0/0
  6477 ;;		On exit  : 0/0
  6478 ;;		Unchanged: 0/0
  6479 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6480 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6481 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6482 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6483 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6484 ;;Total ram usage:        1 bytes
  6485 ;; Hardware stack levels used:    1
  6486 ;; Hardware stack levels required when called:    4
  6487 ;; This function calls:
  6488 ;;		_strcmp
  6489 ;;		i1_nrf24l01SetRXMode
  6490 ;; This function is called by:
  6491 ;;		_nrf24l01ISR
  6492 ;; This function uses a non-reentrant model
  6493 ;;
  6494                           
  6495                           
  6496                           ;psect for function _nrf24l01CheckACK
  6497  0651                     _nrf24l01CheckACK:	
  6498                           
  6499                           ;nrf24l01.c: 140: if (!nrf24l01RXPacketData.IsACK){
  6500                           
  6501                           ;incstack = 0
  6502                           ; Regs used in _nrf24l01CheckACK: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6503  0651  0020               	movlb	0	; select bank0
  6504  0652  1CCB               	btfss	_nrf24l01RXPacketData,1
  6505  0653  0008               	return
  6506                           
  6507                           ;nrf24l01.c: 142: };nrf24l01.c: 145: nrf24l01.RXPending = 0;
  6508                           
  6509                           ;nrf24l01.c: 141: return;
  6510  0654  114D               	bcf	_nrf24l01,2	;volatile
  6511                           
  6512                           ;nrf24l01.c: 148: if (!nrf24l01TXPacketData.ACKRequest){
  6513  0655  1C4E               	btfss	_nrf24l01TXPacketData,0
  6514  0656  0008               	return
  6515                           
  6516                           ;nrf24l01.c: 150: };nrf24l01.c: 153: if (strcmp(nrf24l01RXName, nrf24l01RXName) != 0){
  6517                           
  6518                           ;nrf24l01.c: 149: return;
  6519  0657  30B3               	movlw	(low (_nrf24l01RXName| 0))& (0+255)
  6520  0658  00F7               	movwf	??_nrf24l01CheckACK
  6521  0659  0877               	movf	??_nrf24l01CheckACK,w
  6522  065A  00F0               	movwf	strcmp@s2
  6523  065B  30B3               	movlw	(low (_nrf24l01RXName| 0))& (0+255)
  6524  065C  3187  2736  3186   	fcall	_strcmp
  6525  065F  0870               	movf	?_strcmp,w
  6526  0660  0471               	iorwf	?_strcmp+1,w
  6527  0661  1D03               	btfss	3,2
  6528  0662  0008               	return
  6529                           
  6530                           ;nrf24l01.c: 155: };nrf24l01.c: 158: if (strcmp(nrf24l01RXTopic, nrf24l01RXTopic) != 0){
  6531                           
  6532                           ;nrf24l01.c: 154: return;
  6533  0663  304F               	movlw	(low (_nrf24l01RXTopic| 0))& (0+255)
  6534  0664  00F7               	movwf	??_nrf24l01CheckACK
  6535  0665  0877               	movf	??_nrf24l01CheckACK,w
  6536  0666  00F0               	movwf	strcmp@s2
  6537  0667  304F               	movlw	(low (_nrf24l01RXTopic| 0))& (0+255)
  6538  0668  3187  2736  3186   	fcall	_strcmp
  6539  066B  0870               	movf	?_strcmp,w
  6540  066C  0471               	iorwf	?_strcmp+1,w
  6541  066D  1D03               	btfss	3,2
  6542  066E  0008               	return
  6543                           
  6544                           ;nrf24l01.c: 160: };nrf24l01.c: 163: if (strcmp(nrf24l01RXValue, nrf24l01RXValue) != 0){
  6545                           
  6546                           ;nrf24l01.c: 159: return;
  6547  066F  30D3               	movlw	(low (_nrf24l01RXValue| 0))& (0+255)
  6548  0670  00F7               	movwf	??_nrf24l01CheckACK
  6549  0671  0877               	movf	??_nrf24l01CheckACK,w
  6550  0672  00F0               	movwf	strcmp@s2
  6551  0673  30D3               	movlw	(low (_nrf24l01RXValue| 0))& (0+255)
  6552  0674  3187  2736  3186   	fcall	_strcmp
  6553  0677  0870               	movf	?_strcmp,w
  6554  0678  0471               	iorwf	?_strcmp+1,w
  6555  0679  1D03               	btfss	3,2
  6556  067A  0008               	return
  6557                           
  6558                           ;nrf24l01.c: 165: };nrf24l01.c: 170: nrf24l01TXPacketData.ACKRequest = 0;
  6559                           
  6560                           ;nrf24l01.c: 164: return;
  6561  067B  0020               	movlb	0	; select bank0
  6562  067C  104E               	bcf	_nrf24l01TXPacketData,0
  6563                           
  6564                           ;nrf24l01.c: 173: nrf24l01SetRXMode(0);
  6565  067D  3000               	movlw	0
  6566  067E  3185  2583         	fcall	i1_nrf24l01SetRXMode
  6567  0680  0008               	return
  6568  0681                     __end_of_nrf24l01CheckACK:	
  6569                           
  6570                           	psect	text27
  6571  0583                     __ptext27:	
  6572 ;; *************** function i1_nrf24l01SetRXMode *****************
  6573 ;; Defined at:
  6574 ;;		line 74 in file "nrf24l01.c"
  6575 ;; Parameters:    Size  Location     Type
  6576 ;;  rxMode          1    wreg     unsigned char 
  6577 ;; Auto vars:     Size  Location     Type
  6578 ;;  rxMode          1    6[COMMON] unsigned char 
  6579 ;;  nrf24l01SetR    1    5[COMMON] struct .
  6580 ;; Return value:  Size  Location     Type
  6581 ;;                  1    wreg      void 
  6582 ;; Registers used:
  6583 ;;		wreg, status,2, status,0, pclath, cstack
  6584 ;; Tracked objects:
  6585 ;;		On entry : 0/0
  6586 ;;		On exit  : 0/0
  6587 ;;		Unchanged: 0/0
  6588 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6589 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6590 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6591 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6592 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6593 ;;Total ram usage:        3 bytes
  6594 ;; Hardware stack levels used:    1
  6595 ;; Hardware stack levels required when called:    3
  6596 ;; This function calls:
  6597 ;;		_nrf24l01CEHigh
  6598 ;;		_nrf24l01CELow
  6599 ;;		i1_nrf24l01Send
  6600 ;; This function is called by:
  6601 ;;		_nrf24l01CheckACK
  6602 ;;		_nrf24l01ISR
  6603 ;; This function uses a non-reentrant model
  6604 ;;
  6605                           
  6606                           
  6607                           ;psect for function i1_nrf24l01SetRXMode
  6608  0583                     i1_nrf24l01SetRXMode:	
  6609                           
  6610                           ;incstack = 0
  6611                           ; Regs used in i1_nrf24l01SetRXMode: [wreg+status,2+status,0+pclath+cstack]
  6612                           ;i1nrf24l01SetRXMode@rxMode stored from wreg
  6613  0583  00F6               	movwf	i1nrf24l01SetRXMode@rxMode
  6614                           
  6615                           ;nrf24l01.c: 76: n_CONFIG_t config;;nrf24l01.c: 79: config.byte = nrf24l01Send(0b0000000
      +                          0 | 0x00, 0);
  6616  0584  01F1               	clrf	i1nrf24l01Send@data
  6617  0585  3000               	movlw	0
  6618  0586  318F  278F  3185   	fcall	i1_nrf24l01Send
  6619  0589  00F4               	movwf	??i1_nrf24l01SetRXMode
  6620  058A  0874               	movf	??i1_nrf24l01SetRXMode,w
  6621  058B  00F5               	movwf	i1nrf24l01SetRXMode@config
  6622                           
  6623                           ;nrf24l01.c: 82: if (config.PRIM_RX != rxMode){
  6624  058C  0875               	movf	i1nrf24l01SetRXMode@config,w
  6625  058D  3901               	andlw	1
  6626  058E  0676               	xorwf	i1nrf24l01SetRXMode@rxMode,w
  6627  058F  1903               	skipnz
  6628  0590  2DB3               	goto	i1l3095
  6629                           
  6630                           ;nrf24l01.c: 85: nrf24l01CELow();
  6631  0591  318F  2720  3185   	fcall	_nrf24l01CELow
  6632                           
  6633                           ;nrf24l01.c: 86: _delay((unsigned long)((200)*(16000000/4000000.0)));
  6634  0594  30A0               	movlw	160
  6635  0595                     u244_27:	
  6636  0595  3200               	nop2
  6637  0596  0B89               	decfsz	9,f
  6638  0597  2D95               	goto	u244_27
  6639                           
  6640                           ;nrf24l01.c: 93: config.PRIM_RX = rxMode;
  6641  0598  0876               	movf	i1nrf24l01SetRXMode@rxMode,w
  6642  0599  3901               	andlw	1
  6643  059A  1075               	bcf	i1nrf24l01SetRXMode@config,0
  6644  059B  1D03               	skipz
  6645  059C  1475               	bsf	i1nrf24l01SetRXMode@config,0
  6646                           
  6647                           ;nrf24l01.c: 94: nrf24l01Send(0b00100000 | 0x00, config.byte);
  6648  059D  0875               	movf	i1nrf24l01SetRXMode@config,w
  6649  059E  00F4               	movwf	??i1_nrf24l01SetRXMode
  6650  059F  0874               	movf	??i1_nrf24l01SetRXMode,w
  6651  05A0  00F1               	movwf	i1nrf24l01Send@data
  6652  05A1  3020               	movlw	32
  6653  05A2  318F  278F  3185   	fcall	i1_nrf24l01Send
  6654                           
  6655                           ;nrf24l01.c: 97: _delay((unsigned long)((200)*(16000000/4000000.0)));
  6656  05A5  30A0               	movlw	160
  6657  05A6                     u245_27:	
  6658  05A6  3200               	nop2
  6659  05A7  0B89               	decfsz	9,f
  6660  05A8  2DA6               	goto	u245_27
  6661                           
  6662                           ;nrf24l01.c: 100: if (rxMode){
  6663  05A9  0876               	movf	i1nrf24l01SetRXMode@rxMode,w
  6664  05AA  1903               	btfsc	3,2
  6665  05AB  2DB3               	goto	i1l3095
  6666                           
  6667                           ;nrf24l01.c: 101: nrf24l01CEHigh();
  6668  05AC  318F  271D  3185   	fcall	_nrf24l01CEHigh
  6669                           
  6670                           ;nrf24l01.c: 102: _delay((unsigned long)((200)*(16000000/4000000.0)));
  6671  05AF  30A0               	movlw	160
  6672  05B0                     u246_27:	
  6673  05B0  3200               	nop2
  6674  05B1  0B89               	decfsz	9,f
  6675  05B2  2DB0               	goto	u246_27
  6676  05B3                     i1l3095:	
  6677                           
  6678                           ;nrf24l01.c: 103: };nrf24l01.c: 104: };nrf24l01.c: 107: nrf24l01.RXMode = rxMode;
  6679  05B3  0876               	movf	i1nrf24l01SetRXMode@rxMode,w
  6680  05B4  3901               	andlw	1
  6681  05B5  0020               	movlb	0	; select bank0
  6682  05B6  11CD               	bcf	_nrf24l01,3	;volatile
  6683  05B7  1D03               	skipz
  6684  05B8  15CD               	bsf	_nrf24l01,3	;volatile
  6685  05B9  0008               	return
  6686  05BA                     __end_ofi1_nrf24l01SetRXMode:	
  6687                           
  6688                           	psect	text28
  6689  0F8F                     __ptext28:	
  6690 ;; *************** function i1_nrf24l01Send *****************
  6691 ;; Defined at:
  6692 ;;		line 19 in file "nrf24l01.c"
  6693 ;; Parameters:    Size  Location     Type
  6694 ;;  command         1    wreg     unsigned char 
  6695 ;;  data            1    1[COMMON] unsigned char 
  6696 ;; Auto vars:     Size  Location     Type
  6697 ;;  command         1    3[COMMON] unsigned char 
  6698 ;; Return value:  Size  Location     Type
  6699 ;;                  1    wreg      unsigned char 
  6700 ;; Registers used:
  6701 ;;		wreg, status,2, status,0, pclath, cstack
  6702 ;; Tracked objects:
  6703 ;;		On entry : 0/0
  6704 ;;		On exit  : 0/0
  6705 ;;		Unchanged: 0/0
  6706 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6707 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6708 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6709 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6710 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6711 ;;Total ram usage:        3 bytes
  6712 ;; Hardware stack levels used:    1
  6713 ;; Hardware stack levels required when called:    2
  6714 ;; This function calls:
  6715 ;;		_enableInterrupts
  6716 ;;		_nrf24l01SPIEnd
  6717 ;;		_nrf24l01SPISend
  6718 ;;		_nrf24l01SPIStart
  6719 ;; This function is called by:
  6720 ;;		_nrf24l01ReceiveString
  6721 ;;		_nrf24l01ISR
  6722 ;;		i1_nrf24l01SetRXMode
  6723 ;; This function uses a non-reentrant model
  6724 ;;
  6725                           
  6726                           
  6727                           ;psect for function i1_nrf24l01Send
  6728  0F8F                     i1_nrf24l01Send:	
  6729                           
  6730                           ;incstack = 0
  6731                           ; Regs used in i1_nrf24l01Send: [wreg+status,2+status,0+pclath+cstack]
  6732                           ;i1nrf24l01Send@command stored from wreg
  6733  0F8F  00F3               	movwf	i1nrf24l01Send@command
  6734                           
  6735                           ;nrf24l01.c: 22: enableInterrupts(0);
  6736  0F90  3000               	movlw	0
  6737  0F91  318F  2736  318F   	fcall	_enableInterrupts
  6738                           
  6739                           ;nrf24l01.c: 25: nrf24l01SPIStart();
  6740  0F94  318F  273E  318F   	fcall	_nrf24l01SPIStart
  6741                           
  6742                           ;nrf24l01.c: 28: nrf24l01SPISend(command);
  6743  0F97  0873               	movf	i1nrf24l01Send@command,w
  6744  0F98  318F  274F  318F   	fcall	_nrf24l01SPISend
  6745                           
  6746                           ;nrf24l01.c: 31: data = nrf24l01SPISend(data);
  6747  0F9B  0871               	movf	i1nrf24l01Send@data,w
  6748  0F9C  318F  274F  318F   	fcall	_nrf24l01SPISend
  6749  0F9F  00F2               	movwf	??i1_nrf24l01Send
  6750  0FA0  0872               	movf	??i1_nrf24l01Send,w
  6751  0FA1  00F1               	movwf	i1nrf24l01Send@data
  6752                           
  6753                           ;nrf24l01.c: 34: nrf24l01SPIEnd();
  6754  0FA2  318F  272F  318F   	fcall	_nrf24l01SPIEnd
  6755                           
  6756                           ;nrf24l01.c: 37: enableInterrupts(1);
  6757  0FA5  3001               	movlw	1
  6758  0FA6  318F  2736         	fcall	_enableInterrupts
  6759                           
  6760                           ;nrf24l01.c: 39: return data;
  6761  0FA8  0871               	movf	i1nrf24l01Send@data,w
  6762  0FA9  0008               	return
  6763  0FAA                     __end_ofi1_nrf24l01Send:	
  6764                           
  6765                           	psect	text29
  6766  0F3E                     __ptext29:	
  6767 ;; *************** function _nrf24l01SPIStart *****************
  6768 ;; Defined at:
  6769 ;;		line 65 in file "interface.c"
  6770 ;; Parameters:    Size  Location     Type
  6771 ;;		None
  6772 ;; Auto vars:     Size  Location     Type
  6773 ;;		None
  6774 ;; Return value:  Size  Location     Type
  6775 ;;                  1    wreg      void 
  6776 ;; Registers used:
  6777 ;;		wreg, status,2, status,0, pclath, cstack
  6778 ;; Tracked objects:
  6779 ;;		On entry : 0/0
  6780 ;;		On exit  : 0/0
  6781 ;;		Unchanged: 0/0
  6782 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6783 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6784 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6785 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6786 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6787 ;;Total ram usage:        0 bytes
  6788 ;; Hardware stack levels used:    1
  6789 ;; Hardware stack levels required when called:    8
  6790 ;; This function calls:
  6791 ;;		_nrf24l01CSLow
  6792 ;; This function is called by:
  6793 ;;		_nrf24l01Send
  6794 ;;		_nrf24l01ReceiveString
  6795 ;;		_nrf24l01SendString
  6796 ;;		i1_nrf24l01Send
  6797 ;;		_nrf24l01SetTXAddress
  6798 ;; This function uses a non-reentrant model
  6799 ;;
  6800                           
  6801                           
  6802                           ;psect for function _nrf24l01SPIStart
  6803  0F3E                     _nrf24l01SPIStart:	
  6804                           
  6805                           ;interface.c: 66: nrf24l01CSLow();
  6806                           
  6807                           ;incstack = 0
  6808 ;; hardware stack exceeded
  6809                           ; Regs used in _nrf24l01SPIStart: [wreg+status,2+status,0+pclath+cstack]
  6810  0F3E  318F  2726  318F   	fcall	_nrf24l01CSLow
  6811                           
  6812                           ;interface.c: 67: _delay((unsigned long)((10)*(16000000/4000000.0)));
  6813  0F41  300D               	movlw	13
  6814  0F42                     u247_27:	
  6815  0F42  0B89               	decfsz	9,f
  6816  0F43  2F42               	goto	u247_27
  6817  0F44  0000               	nop
  6818  0F45  0008               	return
  6819  0F46                     __end_of_nrf24l01SPIStart:	
  6820                           
  6821                           	psect	text30
  6822  0F26                     __ptext30:	
  6823 ;; *************** function _nrf24l01CSLow *****************
  6824 ;; Defined at:
  6825 ;;		line 18 in file "interface.c"
  6826 ;; Parameters:    Size  Location     Type
  6827 ;;		None
  6828 ;; Auto vars:     Size  Location     Type
  6829 ;;		None
  6830 ;; Return value:  Size  Location     Type
  6831 ;;                  1    wreg      void 
  6832 ;; Registers used:
  6833 ;;		None
  6834 ;; Tracked objects:
  6835 ;;		On entry : 0/0
  6836 ;;		On exit  : 0/0
  6837 ;;		Unchanged: 0/0
  6838 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6839 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6840 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6841 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6842 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6843 ;;Total ram usage:        0 bytes
  6844 ;; Hardware stack levels used:    1
  6845 ;; Hardware stack levels required when called:    7
  6846 ;; This function calls:
  6847 ;;		Nothing
  6848 ;; This function is called by:
  6849 ;;		_nrf24l01SPIStart
  6850 ;; This function uses a non-reentrant model
  6851 ;;
  6852                           
  6853                           
  6854                           ;psect for function _nrf24l01CSLow
  6855  0F26                     _nrf24l01CSLow:	
  6856                           
  6857                           ;interface.c: 19: PORTAbits.RA1 = 0;
  6858                           
  6859                           ;incstack = 0
  6860 ;; hardware stack exceeded
  6861                           ; Regs used in _nrf24l01CSLow: []
  6862  0F26  0020               	movlb	0	; select bank0
  6863  0F27  108C               	bcf	12,1	;volatile
  6864  0F28  0008               	return
  6865  0F29                     __end_of_nrf24l01CSLow:	
  6866                           
  6867                           	psect	text31
  6868  0F4F                     __ptext31:	
  6869 ;; *************** function _nrf24l01SPISend *****************
  6870 ;; Defined at:
  6871 ;;		line 52 in file "interface.c"
  6872 ;; Parameters:    Size  Location     Type
  6873 ;;  data            1    wreg     unsigned char 
  6874 ;; Auto vars:     Size  Location     Type
  6875 ;;  data            1    0[COMMON] unsigned char 
  6876 ;; Return value:  Size  Location     Type
  6877 ;;                  1    wreg      unsigned char 
  6878 ;; Registers used:
  6879 ;;		wreg
  6880 ;; Tracked objects:
  6881 ;;		On entry : 0/0
  6882 ;;		On exit  : 0/0
  6883 ;;		Unchanged: 0/0
  6884 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6885 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6886 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6887 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6888 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6889 ;;Total ram usage:        0 bytes
  6890 ;; Hardware stack levels used:    1
  6891 ;; Hardware stack levels required when called:    7
  6892 ;; This function calls:
  6893 ;;		Nothing
  6894 ;; This function is called by:
  6895 ;;		_nrf24l01Send
  6896 ;;		_nrf24l01ReceiveStringPart
  6897 ;;		_nrf24l01ReceiveString
  6898 ;;		_nrf24l01SendString
  6899 ;;		i1_nrf24l01Send
  6900 ;;		_nrf24l01SetTXAddress
  6901 ;; This function uses a non-reentrant model
  6902 ;;
  6903                           
  6904                           
  6905                           ;psect for function _nrf24l01SPISend
  6906  0F4F                     _nrf24l01SPISend:	
  6907                           
  6908                           ;incstack = 0
  6909 ;; hardware stack exceeded
  6910                           ; Regs used in _nrf24l01SPISend: [wreg]
  6911                           ;nrf24l01SPISend@data stored from wreg
  6912  0F4F  00F0               	movwf	nrf24l01SPISend@data
  6913                           
  6914                           ;interface.c: 53: SSP1BUF = data;
  6915  0F50  0870               	movf	nrf24l01SPISend@data,w
  6916  0F51  0024               	movlb	4	; select bank4
  6917  0F52  0091               	movwf	17	;volatile
  6918                           
  6919                           ;interface.c: 55: PORTCbits.RC4 = 1;
  6920  0F53  0020               	movlb	0	; select bank0
  6921  0F54  160E               	bsf	14,4	;volatile
  6922  0F55                     i1l94:	
  6923                           ;interface.c: 57: while (!SSP1STATbits.BF){
  6924                           
  6925  0F55  0024               	movlb	4	; select bank4
  6926  0F56  1814               	btfsc	20,0	;volatile
  6927  0F57  2F5A               	goto	i1l2905
  6928                           
  6929                           ;interface.c: 58: __nop();
  6930  0F58  0000               	nop
  6931  0F59  2F55               	goto	i1l94
  6932  0F5A                     i1l2905:	
  6933                           
  6934                           ;interface.c: 59: };interface.c: 61: return SSP1BUF;
  6935  0F5A  0811               	movf	17,w	;volatile
  6936  0F5B  0008               	return
  6937  0F5C                     __end_of_nrf24l01SPISend:	
  6938                           
  6939                           	psect	text32
  6940  0F2F                     __ptext32:	
  6941 ;; *************** function _nrf24l01SPIEnd *****************
  6942 ;; Defined at:
  6943 ;;		line 71 in file "interface.c"
  6944 ;; Parameters:    Size  Location     Type
  6945 ;;		None
  6946 ;; Auto vars:     Size  Location     Type
  6947 ;;		None
  6948 ;; Return value:  Size  Location     Type
  6949 ;;                  1    wreg      void 
  6950 ;; Registers used:
  6951 ;;		wreg, status,2, status,0, pclath, cstack
  6952 ;; Tracked objects:
  6953 ;;		On entry : 0/0
  6954 ;;		On exit  : 0/0
  6955 ;;		Unchanged: 0/0
  6956 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6957 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6958 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6959 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6960 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6961 ;;Total ram usage:        0 bytes
  6962 ;; Hardware stack levels used:    1
  6963 ;; Hardware stack levels required when called:    8
  6964 ;; This function calls:
  6965 ;;		_nrf24l01CSHigh
  6966 ;; This function is called by:
  6967 ;;		_nrf24l01Send
  6968 ;;		_nrf24l01ReceiveString
  6969 ;;		_nrf24l01SendString
  6970 ;;		i1_nrf24l01Send
  6971 ;; This function uses a non-reentrant model
  6972 ;;
  6973                           
  6974                           
  6975                           ;psect for function _nrf24l01SPIEnd
  6976  0F2F                     _nrf24l01SPIEnd:	
  6977                           
  6978                           ;interface.c: 72: _delay((unsigned long)((10)*(16000000/4000000.0)));
  6979                           
  6980                           ;incstack = 0
  6981 ;; hardware stack exceeded
  6982                           ; Regs used in _nrf24l01SPIEnd: [wreg+status,2+status,0+pclath+cstack]
  6983  0F2F  300D               	movlw	13
  6984  0F30                     u248_27:	
  6985  0F30  0B89               	decfsz	9,f
  6986  0F31  2F30               	goto	u248_27
  6987  0F32  0000               	nop
  6988                           
  6989                           ;interface.c: 73: nrf24l01CSHigh();
  6990  0F33  318F  2723         	fcall	_nrf24l01CSHigh
  6991  0F35  0008               	return
  6992  0F36                     __end_of_nrf24l01SPIEnd:	
  6993                           
  6994                           	psect	text33
  6995  0F23                     __ptext33:	
  6996 ;; *************** function _nrf24l01CSHigh *****************
  6997 ;; Defined at:
  6998 ;;		line 23 in file "interface.c"
  6999 ;; Parameters:    Size  Location     Type
  7000 ;;		None
  7001 ;; Auto vars:     Size  Location     Type
  7002 ;;		None
  7003 ;; Return value:  Size  Location     Type
  7004 ;;                  1    wreg      void 
  7005 ;; Registers used:
  7006 ;;		None
  7007 ;; Tracked objects:
  7008 ;;		On entry : 0/0
  7009 ;;		On exit  : 0/0
  7010 ;;		Unchanged: 0/0
  7011 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7012 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7013 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7014 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7015 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7016 ;;Total ram usage:        0 bytes
  7017 ;; Hardware stack levels used:    1
  7018 ;; Hardware stack levels required when called:    7
  7019 ;; This function calls:
  7020 ;;		Nothing
  7021 ;; This function is called by:
  7022 ;;		_nrf24l01SPIEnd
  7023 ;; This function uses a non-reentrant model
  7024 ;;
  7025                           
  7026                           
  7027                           ;psect for function _nrf24l01CSHigh
  7028  0F23                     _nrf24l01CSHigh:	
  7029                           
  7030                           ;interface.c: 24: PORTAbits.RA1 = 1;
  7031                           
  7032                           ;incstack = 0
  7033 ;; hardware stack exceeded
  7034                           ; Regs used in _nrf24l01CSHigh: []
  7035  0F23  0020               	movlb	0	; select bank0
  7036  0F24  148C               	bsf	12,1	;volatile
  7037  0F25  0008               	return
  7038  0F26                     __end_of_nrf24l01CSHigh:	
  7039                           
  7040                           	psect	text34
  7041  0F36                     __ptext34:	
  7042 ;; *************** function _enableInterrupts *****************
  7043 ;; Defined at:
  7044 ;;		line 77 in file "interface.c"
  7045 ;; Parameters:    Size  Location     Type
  7046 ;;  enable          1    wreg     unsigned char 
  7047 ;; Auto vars:     Size  Location     Type
  7048 ;;  enable          1    0[COMMON] unsigned char 
  7049 ;; Return value:  Size  Location     Type
  7050 ;;                  1    wreg      void 
  7051 ;; Registers used:
  7052 ;;		wreg, status,0
  7053 ;; Tracked objects:
  7054 ;;		On entry : 0/0
  7055 ;;		On exit  : 0/0
  7056 ;;		Unchanged: 0/0
  7057 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7058 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7059 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7060 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7061 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7062 ;;Total ram usage:        0 bytes
  7063 ;; Hardware stack levels used:    1
  7064 ;; Hardware stack levels required when called:    7
  7065 ;; This function calls:
  7066 ;;		Nothing
  7067 ;; This function is called by:
  7068 ;;		_nrf24l01Send
  7069 ;;		_nrf24l01SendString
  7070 ;;		i1_nrf24l01Send
  7071 ;; This function uses a non-reentrant model
  7072 ;;
  7073                           
  7074                           
  7075                           ;psect for function _enableInterrupts
  7076  0F36                     _enableInterrupts:	
  7077                           
  7078                           ;incstack = 0
  7079 ;; hardware stack exceeded
  7080                           ; Regs used in _enableInterrupts: [wreg+status,0]
  7081                           ;enableInterrupts@enable stored from wreg
  7082  0F36  00F0               	movwf	enableInterrupts@enable
  7083                           
  7084                           ;interface.c: 78: PIE0bits.INTE = enable;
  7085  0F37  0C70               	rrf	enableInterrupts@enable,w
  7086  0F38  0021               	movlb	1	; select bank1
  7087  0F39  1C03               	skipc
  7088  0F3A  1010               	bcf	16,0	;volatile
  7089  0F3B  1803               	skipnc
  7090  0F3C  1410               	bsf	16,0	;volatile
  7091  0F3D  0008               	return
  7092  0F3E                     __end_of_enableInterrupts:	
  7093                           
  7094                           	psect	text35
  7095  0F20                     __ptext35:	
  7096 ;; *************** function _nrf24l01CELow *****************
  7097 ;; Defined at:
  7098 ;;		line 8 in file "interface.c"
  7099 ;; Parameters:    Size  Location     Type
  7100 ;;		None
  7101 ;; Auto vars:     Size  Location     Type
  7102 ;;		None
  7103 ;; Return value:  Size  Location     Type
  7104 ;;                  1    wreg      void 
  7105 ;; Registers used:
  7106 ;;		None
  7107 ;; Tracked objects:
  7108 ;;		On entry : 0/0
  7109 ;;		On exit  : 0/0
  7110 ;;		Unchanged: 0/0
  7111 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7112 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7113 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7114 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7115 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7116 ;;Total ram usage:        0 bytes
  7117 ;; Hardware stack levels used:    1
  7118 ;; Hardware stack levels required when called:    7
  7119 ;; This function calls:
  7120 ;;		Nothing
  7121 ;; This function is called by:
  7122 ;;		_nrf24l01SetRXMode
  7123 ;;		_nrf24l01ReceiveString
  7124 ;;		_nrf24l01SendString
  7125 ;;		_nrf24l01Init
  7126 ;;		i1_nrf24l01SetRXMode
  7127 ;; This function uses a non-reentrant model
  7128 ;;
  7129                           
  7130                           
  7131                           ;psect for function _nrf24l01CELow
  7132  0F20                     _nrf24l01CELow:	
  7133                           
  7134                           ;interface.c: 9: PORTAbits.RA0 = 0;
  7135                           
  7136                           ;incstack = 0
  7137 ;; hardware stack exceeded
  7138                           ; Regs used in _nrf24l01CELow: []
  7139  0F20  0020               	movlb	0	; select bank0
  7140  0F21  100C               	bcf	12,0	;volatile
  7141  0F22  0008               	return
  7142  0F23                     __end_of_nrf24l01CELow:	
  7143                           
  7144                           	psect	text36
  7145  0F1D                     __ptext36:	
  7146 ;; *************** function _nrf24l01CEHigh *****************
  7147 ;; Defined at:
  7148 ;;		line 13 in file "interface.c"
  7149 ;; Parameters:    Size  Location     Type
  7150 ;;		None
  7151 ;; Auto vars:     Size  Location     Type
  7152 ;;		None
  7153 ;; Return value:  Size  Location     Type
  7154 ;;                  1    wreg      void 
  7155 ;; Registers used:
  7156 ;;		None
  7157 ;; Tracked objects:
  7158 ;;		On entry : 0/0
  7159 ;;		On exit  : 0/0
  7160 ;;		Unchanged: 0/0
  7161 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7162 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7163 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7164 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7165 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7166 ;;Total ram usage:        0 bytes
  7167 ;; Hardware stack levels used:    1
  7168 ;; Hardware stack levels required when called:    7
  7169 ;; This function calls:
  7170 ;;		Nothing
  7171 ;; This function is called by:
  7172 ;;		_nrf24l01SetRXMode
  7173 ;;		_nrf24l01ReceiveString
  7174 ;;		_nrf24l01SendString
  7175 ;;		_nrf24l01Init
  7176 ;;		i1_nrf24l01SetRXMode
  7177 ;; This function uses a non-reentrant model
  7178 ;;
  7179                           
  7180                           
  7181                           ;psect for function _nrf24l01CEHigh
  7182  0F1D                     _nrf24l01CEHigh:	
  7183                           
  7184                           ;interface.c: 14: PORTAbits.RA0 = 1;
  7185                           
  7186                           ;incstack = 0
  7187 ;; hardware stack exceeded
  7188                           ; Regs used in _nrf24l01CEHigh: []
  7189  0F1D  0020               	movlb	0	; select bank0
  7190  0F1E  140C               	bsf	12,0	;volatile
  7191  0F1F  0008               	return
  7192  0F20                     __end_of_nrf24l01CEHigh:	
  7193                           
  7194                           	psect	text37
  7195  0736                     __ptext37:	
  7196 ;; *************** function _strcmp *****************
  7197 ;; Defined at:
  7198 ;;		line 33 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\strcmp.c"
  7199 ;; Parameters:    Size  Location     Type
  7200 ;;  s1              1    wreg     PTR const unsigned char 
  7201 ;;		 -> nrf24l01RXValue(8), nrf24l01RXTopic(8), nrf24l01RXName(16), 
  7202 ;;  s2              1    0[COMMON] PTR const unsigned char 
  7203 ;;		 -> nrf24l01RXValue(8), nrf24l01RXTopic(8), nrf24l01RXName(16), 
  7204 ;; Auto vars:     Size  Location     Type
  7205 ;;  s1              1    4[COMMON] PTR const unsigned char 
  7206 ;;		 -> nrf24l01RXValue(8), nrf24l01RXTopic(8), nrf24l01RXName(16), 
  7207 ;;  r               1    3[COMMON] char 
  7208 ;; Return value:  Size  Location     Type
  7209 ;;                  2    0[COMMON] int 
  7210 ;; Registers used:
  7211 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0
  7212 ;; Tracked objects:
  7213 ;;		On entry : 0/0
  7214 ;;		On exit  : 0/0
  7215 ;;		Unchanged: 0/0
  7216 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7217 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7218 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7219 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7220 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7221 ;;Total ram usage:        5 bytes
  7222 ;; Hardware stack levels used:    1
  7223 ;; This function calls:
  7224 ;;		Nothing
  7225 ;; This function is called by:
  7226 ;;		_nrf24l01CheckACK
  7227 ;; This function uses a non-reentrant model
  7228 ;;
  7229                           
  7230                           
  7231                           ;psect for function _strcmp
  7232  0736                     _strcmp:	
  7233                           
  7234                           ;incstack = 0
  7235                           ; Regs used in _strcmp: [wreg-fsr1h+status,2+status,0]
  7236                           ;strcmp@s1 stored from wreg
  7237  0736  00F4               	movwf	strcmp@s1
  7238  0737  2F40               	goto	i1l2055
  7239  0738                     i1l2051:	
  7240  0738  3001               	movlw	1
  7241  0739  00F2               	movwf	??_strcmp
  7242  073A  0872               	movf	??_strcmp,w
  7243  073B  07F4               	addwf	strcmp@s1,f
  7244  073C  3001               	movlw	1
  7245  073D  00F2               	movwf	??_strcmp
  7246  073E  0872               	movf	??_strcmp,w
  7247  073F  07F0               	addwf	strcmp@s2,f
  7248  0740                     i1l2055:	
  7249  0740  0874               	movf	strcmp@s1,w
  7250  0741  0086               	movwf	6
  7251  0742  0187               	clrf	7
  7252  0743  0870               	movf	strcmp@s2,w
  7253  0744  0084               	movwf	4
  7254  0745  0185               	clrf	5
  7255  0746  0300               	decf	0,w
  7256  0747  3AFF               	xorlw	255
  7257  0748  0701               	addwf	1,w
  7258  0749  00F2               	movwf	??_strcmp
  7259  074A  0872               	movf	??_strcmp,w
  7260  074B  00F3               	movwf	strcmp@r
  7261  074C  0873               	movf	strcmp@r,w
  7262  074D  1D03               	btfss	3,2
  7263  074E  2F55               	goto	i1l2059
  7264  074F  0874               	movf	strcmp@s1,w
  7265  0750  0086               	movwf	6
  7266  0751  0187               	clrf	7
  7267  0752  0801               	movf	1,w
  7268  0753  1D03               	btfss	3,2
  7269  0754  2F38               	goto	i1l2051
  7270  0755                     i1l2059:	
  7271  0755  0873               	movf	strcmp@r,w
  7272  0756  00F0               	movwf	?_strcmp
  7273  0757  01F1               	clrf	?_strcmp+1
  7274  0758  1BF0               	btfsc	?_strcmp,7
  7275  0759  03F1               	decf	?_strcmp+1,f
  7276  075A  0008               	return
  7277  075B                     __end_of_strcmp:	
  7278                           
  7279                           	psect	text38
  7280  0F5C                     __ptext38:	
  7281 ;; *************** function _exception *****************
  7282 ;; Defined at:
  7283 ;;		line 81 in file "interface.c"
  7284 ;; Parameters:    Size  Location     Type
  7285 ;;  exception       1    wreg     unsigned char 
  7286 ;; Auto vars:     Size  Location     Type
  7287 ;;  exception       1   12[COMMON] unsigned char 
  7288 ;; Return value:  Size  Location     Type
  7289 ;;                  1    wreg      void 
  7290 ;; Registers used:
  7291 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7292 ;; Tracked objects:
  7293 ;;		On entry : 0/0
  7294 ;;		On exit  : 0/0
  7295 ;;		Unchanged: 0/0
  7296 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7297 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7298 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7299 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7300 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7301 ;;Total ram usage:        3 bytes
  7302 ;; Hardware stack levels used:    1
  7303 ;; Hardware stack levels required when called:    2
  7304 ;; This function calls:
  7305 ;;		___wmul
  7306 ;;		i1_flashUpdate
  7307 ;; This function is called by:
  7308 ;;		_nrf24l01ISR
  7309 ;; This function uses a non-reentrant model
  7310 ;;
  7311                           
  7312                           
  7313                           ;psect for function _exception
  7314  0F5C                     _exception:	
  7315                           
  7316                           ;incstack = 0
  7317                           ; Regs used in _exception: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7318                           ;exception@exception stored from wreg
  7319  0F5C  00FC               	movwf	exception@exception
  7320                           
  7321                           ;interface.c: 82: romData.bootMode = (unsigned) (exception * 10);
  7322  0F5D  087C               	movf	exception@exception,w
  7323  0F5E  00FA               	movwf	??_exception
  7324  0F5F  01FB               	clrf	??_exception+1
  7325  0F60  087A               	movf	??_exception,w
  7326  0F61  00F0               	movwf	___wmul@multiplier
  7327  0F62  087B               	movf	??_exception+1,w
  7328  0F63  00F1               	movwf	___wmul@multiplier+1
  7329  0F64  300A               	movlw	10
  7330  0F65  00F2               	movwf	___wmul@multiplicand
  7331  0F66  3000               	movlw	0
  7332  0F67  00F3               	movwf	___wmul@multiplicand+1
  7333  0F68  318F  2774  318F   	fcall	___wmul
  7334  0F6B  0871               	movf	?___wmul+1,w
  7335  0F6C  0021               	movlb	1	; select bank1
  7336  0F6D  00B2               	movwf	((_romData+1)^(0+128)+17)
  7337  0F6E  0870               	movf	?___wmul,w
  7338  0F6F  00B1               	movwf	(_romData^(0+128)+17)
  7339                           
  7340                           ;interface.c: 83: flashUpdate();
  7341  0F70  3187  27A2         	fcall	i1_flashUpdate
  7342  0F72  0001               	reset	;# 
  7343  0F73  0008               	return
  7344  0F74                     __end_of_exception:	
  7345                           
  7346                           	psect	text39
  7347  07A2                     __ptext39:	
  7348 ;; *************** function i1_flashUpdate *****************
  7349 ;; Defined at:
  7350 ;;		line 97 in file "flash.c"
  7351 ;; Parameters:    Size  Location     Type
  7352 ;;		None
  7353 ;; Auto vars:     Size  Location     Type
  7354 ;;  flashUpdate     2    8[COMMON] unsigned int 
  7355 ;; Return value:  Size  Location     Type
  7356 ;;                  1    wreg      void 
  7357 ;; Registers used:
  7358 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7359 ;; Tracked objects:
  7360 ;;		On entry : 0/0
  7361 ;;		On exit  : 0/0
  7362 ;;		Unchanged: 0/0
  7363 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7364 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7365 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7366 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7367 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7368 ;;Total ram usage:        4 bytes
  7369 ;; Hardware stack levels used:    1
  7370 ;; Hardware stack levels required when called:    1
  7371 ;; This function calls:
  7372 ;;		i1_flashWriteByte
  7373 ;; This function is called by:
  7374 ;;		_exception
  7375 ;; This function uses a non-reentrant model
  7376 ;;
  7377                           
  7378                           
  7379                           ;psect for function i1_flashUpdate
  7380  07A2                     i1_flashUpdate:	
  7381                           
  7382                           ;flash.c: 98: for (unsigned int i = 0; i < 32; i++){
  7383                           
  7384                           ;incstack = 0
  7385                           ; Regs used in i1_flashUpdate: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7386  07A2  01F8               	clrf	i1flashUpdate@i
  7387  07A3  01F9               	clrf	i1flashUpdate@i+1
  7388  07A4                     L3:	
  7389  07A4  3000               	movlw	0
  7390  07A5  0279               	subwf	i1flashUpdate@i+1,w
  7391  07A6  3020               	movlw	32
  7392  07A7  1903               	skipnz
  7393  07A8  0278               	subwf	i1flashUpdate@i,w
  7394  07A9  1803               	btfsc	3,0
  7395  07AA  0008               	return
  7396                           
  7397                           ;flash.c: 99: flashWriteByte(i, romHolder.array[i]);
  7398  07AB  0879               	movf	i1flashUpdate@i+1,w
  7399  07AC  00F1               	movwf	i1flashWriteByte@offset+1
  7400  07AD  0878               	movf	i1flashUpdate@i,w
  7401  07AE  00F0               	movwf	i1flashWriteByte@offset
  7402  07AF  0878               	movf	i1flashUpdate@i,w
  7403  07B0  3E20               	addlw	(low (_romHolder| (0+256)))& (0+255)
  7404  07B1  0086               	movwf	6
  7405  07B2  3001               	movlw	1	; select bank2/3
  7406  07B3  0087               	movwf	7
  7407  07B4  0801               	movf	1,w
  7408  07B5  00F6               	movwf	??i1_flashUpdate
  7409  07B6  01F7               	clrf	??i1_flashUpdate+1
  7410  07B7  0876               	movf	??i1_flashUpdate,w
  7411  07B8  00F2               	movwf	i1flashWriteByte@data
  7412  07B9  0877               	movf	??i1_flashUpdate+1,w
  7413  07BA  00F3               	movwf	i1flashWriteByte@data+1
  7414  07BB  3186  2681  3187   	fcall	i1_flashWriteByte
  7415  07BE  3001               	movlw	1
  7416  07BF  07F8               	addwf	i1flashUpdate@i,f
  7417  07C0  3000               	movlw	0
  7418  07C1  3DF9               	addwfc	i1flashUpdate@i+1,f
  7419  07C2  2FA4               	goto	L3
  7420  07C3                     __end_ofi1_flashUpdate:	
  7421                           
  7422                           	psect	text40
  7423  0681                     __ptext40:	
  7424 ;; *************** function i1_flashWriteByte *****************
  7425 ;; Defined at:
  7426 ;;		line 8 in file "flash.c"
  7427 ;; Parameters:    Size  Location     Type
  7428 ;;  offset          2    0[COMMON] unsigned int 
  7429 ;;  data            2    2[COMMON] unsigned int 
  7430 ;; Auto vars:     Size  Location     Type
  7431 ;;  flashWriteBy    2    4[COMMON] unsigned int 
  7432 ;; Return value:  Size  Location     Type
  7433 ;;                  1    wreg      void 
  7434 ;; Registers used:
  7435 ;;		wreg, status,2, status,0
  7436 ;; Tracked objects:
  7437 ;;		On entry : 0/0
  7438 ;;		On exit  : 0/0
  7439 ;;		Unchanged: 0/0
  7440 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7441 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7442 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7443 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7444 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7445 ;;Total ram usage:        6 bytes
  7446 ;; Hardware stack levels used:    1
  7447 ;; This function calls:
  7448 ;;		Nothing
  7449 ;; This function is called by:
  7450 ;;		i1_flashUpdate
  7451 ;; This function uses a non-reentrant model
  7452 ;;
  7453                           
  7454                           
  7455                           ;psect for function i1_flashWriteByte
  7456  0681                     i1_flashWriteByte:	
  7457                           
  7458                           ;flash.c: 10: unsigned int address;;flash.c: 12: INTCONbits.GIE = 0;
  7459                           
  7460                           ;incstack = 0
  7461                           ; Regs used in i1_flashWriteByte: [wreg+status,2+status,0]
  7462  0681  138B               	bcf	11,7	;volatile
  7463                           
  7464                           ;flash.c: 15: PMCON1 = 0x00;
  7465  0682  0031               	movlb	17	; select bank17
  7466  0683  0195               	clrf	21	;volsfr
  7467                           
  7468                           ;flash.c: 17: address = (0x2000U - 32) + offset;
  7469  0684  0870               	movf	i1flashWriteByte@offset,w
  7470  0685  3EE0               	addlw	224
  7471  0686  00F4               	movwf	i1flashWriteByte@address
  7472  0687  301F               	movlw	31
  7473  0688  3D71               	addwfc	i1flashWriteByte@offset+1,w
  7474  0689  00F5               	movwf	i1flashWriteByte@address+1
  7475                           
  7476                           ;flash.c: 18: PMADRL = (char) (address >> 0);
  7477  068A  0874               	movf	i1flashWriteByte@address,w
  7478  068B  0091               	movwf	17	;volatile
  7479                           
  7480                           ;flash.c: 19: PMADRH = (char) (address >> 8);
  7481  068C  0875               	movf	i1flashWriteByte@address+1,w
  7482  068D  0092               	movwf	18	;volatile
  7483                           
  7484                           ;flash.c: 21: PMCON1bits.FREE = 1;
  7485  068E  1615               	bsf	21,4	;volsfr
  7486                           
  7487                           ;flash.c: 22: PMCON1bits.WREN = 1;
  7488  068F  1515               	bsf	21,2	;volsfr
  7489                           
  7490                           ;flash.c: 24: PMCON2 = 0x55;
  7491  0690  3055               	movlw	85
  7492  0691  0096               	movwf	22	;volsfr
  7493                           
  7494                           ;flash.c: 25: PMCON2 = 0xAA;
  7495  0692  30AA               	movlw	170
  7496  0693  0096               	movwf	22	;volsfr
  7497                           
  7498                           ;flash.c: 27: PMCON1bits.WR = 1;
  7499  0694  1495               	bsf	21,1	;volsfr
  7500                           
  7501                           ;flash.c: 29: __nop();
  7502  0695  0000               	nop
  7503                           
  7504                           ;flash.c: 30: __nop();
  7505  0696  0000               	nop
  7506                           
  7507                           ;flash.c: 32: PMCON1bits.WREN = 0;
  7508  0697  0031               	movlb	17	; select bank17
  7509  0698  1115               	bcf	21,2	;volsfr
  7510                           
  7511                           ;flash.c: 36: PMCON1 = 0x00;
  7512  0699  0195               	clrf	21	;volsfr
  7513                           
  7514                           ;flash.c: 38: PMADRL = (char) (address >> 0);
  7515  069A  0874               	movf	i1flashWriteByte@address,w
  7516  069B  0091               	movwf	17	;volatile
  7517                           
  7518                           ;flash.c: 39: PMADRH = (char) (address >> 8);
  7519  069C  0875               	movf	i1flashWriteByte@address+1,w
  7520  069D  0092               	movwf	18	;volatile
  7521                           
  7522                           ;flash.c: 41: PMCON1bits.FREE = 0;
  7523  069E  1215               	bcf	21,4	;volsfr
  7524                           
  7525                           ;flash.c: 42: PMCON1bits.LWLO = 1;
  7526  069F  1695               	bsf	21,5	;volsfr
  7527                           
  7528                           ;flash.c: 43: PMCON1bits.WREN = 1;
  7529  06A0  1515               	bsf	21,2	;volsfr
  7530                           
  7531                           ;flash.c: 45: PMDATL = (data >> 0);
  7532  06A1  0872               	movf	i1flashWriteByte@data,w
  7533  06A2  0093               	movwf	19	;volatile
  7534                           
  7535                           ;flash.c: 46: PMDATH = (data >> 8);
  7536  06A3  0873               	movf	i1flashWriteByte@data+1,w
  7537  06A4  0094               	movwf	20	;volatile
  7538                           
  7539                           ;flash.c: 48: PMCON1bits.LWLO = 0;
  7540  06A5  1295               	bcf	21,5	;volsfr
  7541                           
  7542                           ;flash.c: 50: PMCON2 = 0x55;
  7543  06A6  3055               	movlw	85
  7544  06A7  0096               	movwf	22	;volsfr
  7545                           
  7546                           ;flash.c: 51: PMCON2 = 0xAA;
  7547  06A8  30AA               	movlw	170
  7548  06A9  0096               	movwf	22	;volsfr
  7549                           
  7550                           ;flash.c: 53: PMCON1bits.WR = 1;
  7551  06AA  1495               	bsf	21,1	;volsfr
  7552                           
  7553                           ;flash.c: 55: __nop();
  7554  06AB  0000               	nop
  7555                           
  7556                           ;flash.c: 56: __nop();
  7557  06AC  0000               	nop
  7558                           
  7559                           ;flash.c: 58: PMCON1bits.WREN = 0;
  7560  06AD  0031               	movlb	17	; select bank17
  7561  06AE  1115               	bcf	21,2	;volsfr
  7562                           
  7563                           ;flash.c: 61: INTCONbits.GIE = 1;
  7564  06AF  178B               	bsf	11,7	;volatile
  7565  06B0  0008               	return
  7566  06B1                     __end_ofi1_flashWriteByte:	
  7567                           
  7568                           	psect	text41
  7569  0F74                     __ptext41:	
  7570 ;; *************** function ___wmul *****************
  7571 ;; Defined at:
  7572 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\Umul16.c"
  7573 ;; Parameters:    Size  Location     Type
  7574 ;;  multiplier      2    0[COMMON] unsigned int 
  7575 ;;  multiplicand    2    2[COMMON] unsigned int 
  7576 ;; Auto vars:     Size  Location     Type
  7577 ;;  product         2    4[COMMON] unsigned int 
  7578 ;; Return value:  Size  Location     Type
  7579 ;;                  2    0[COMMON] unsigned int 
  7580 ;; Registers used:
  7581 ;;		wreg, status,2, status,0
  7582 ;; Tracked objects:
  7583 ;;		On entry : 0/0
  7584 ;;		On exit  : 0/0
  7585 ;;		Unchanged: 0/0
  7586 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7587 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7588 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7589 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7590 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7591 ;;Total ram usage:        6 bytes
  7592 ;; Hardware stack levels used:    1
  7593 ;; This function calls:
  7594 ;;		Nothing
  7595 ;; This function is called by:
  7596 ;;		_exception
  7597 ;; This function uses a non-reentrant model
  7598 ;;
  7599                           
  7600                           
  7601                           ;psect for function ___wmul
  7602  0F74                     ___wmul:	
  7603                           
  7604                           ;incstack = 0
  7605                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  7606  0F74  01F4               	clrf	___wmul@product
  7607  0F75  01F5               	clrf	___wmul@product+1
  7608  0F76                     i1l2083:	
  7609  0F76  1C70               	btfss	___wmul@multiplier,0
  7610  0F77  2F7C               	goto	i1l461
  7611  0F78  0872               	movf	___wmul@multiplicand,w
  7612  0F79  07F4               	addwf	___wmul@product,f
  7613  0F7A  0873               	movf	___wmul@multiplicand+1,w
  7614  0F7B  3DF5               	addwfc	___wmul@product+1,f
  7615  0F7C                     i1l461:	
  7616  0F7C  3001               	movlw	1
  7617  0F7D                     u90_25:	
  7618  0F7D  35F2               	lslf	___wmul@multiplicand,f
  7619  0F7E  0DF3               	rlf	___wmul@multiplicand+1,f
  7620  0F7F  0B89               	decfsz	9,f
  7621  0F80  2F7D               	goto	u90_25
  7622  0F81  3001               	movlw	1
  7623  0F82                     u91_25:	
  7624  0F82  36F1               	lsrf	___wmul@multiplier+1,f
  7625  0F83  0CF0               	rrf	___wmul@multiplier,f
  7626  0F84  0B89               	decfsz	9,f
  7627  0F85  2F82               	goto	u91_25
  7628  0F86  0870               	movf	___wmul@multiplier,w
  7629  0F87  0471               	iorwf	___wmul@multiplier+1,w
  7630  0F88  1D03               	btfss	3,2
  7631  0F89  2F76               	goto	i1l2083
  7632  0F8A  0875               	movf	___wmul@product+1,w
  7633  0F8B  00F1               	movwf	?___wmul+1
  7634  0F8C  0874               	movf	___wmul@product,w
  7635  0F8D  00F0               	movwf	?___wmul
  7636  0F8E  0008               	return
  7637  0F8F                     __end_of___wmul:	
  7638  007E                     btemp	set	126	;btemp
  7639  007E                     int$flags	set	126
  7640  007E                     wtemp0	set	126


Data Sizes:
    Strings     32
    Constant    25
    Data        0
    BSS         121
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     41      71
    BANK1            80      6      65
    BANK2            80      0      32
    BANK3            80      0       0
    BANK4            80      0       0
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    strlen@s	PTR const unsigned char  size(1) Largest target is 16
		 -> nrf24l01RXValue(BANK1[8]), nrf24l01RXTopic(BANK0[8]), nrf24l01RXName(BANK1[16]), 

    strlen@cp	PTR const unsigned char  size(1) Largest target is 16
		 -> nrf24l01RXValue(BANK1[8]), nrf24l01RXTopic(BANK0[8]), nrf24l01RXName(BANK1[16]), 

    strcpy@from	PTR const unsigned char  size(2) Largest target is 19
		 -> STR_7(CODE[5]), STR_6(CODE[4]), romData.name(BANK1[16]), STR_5(CODE[5]), 
		 -> STR_4(CODE[4]), STR_3(CODE[5]), STR_2(CODE[5]), STR_1(CODE[4]), 
		 -> romData(BANK1[19]), 

    strcpy@to	PTR unsigned char  size(1) Largest target is 19
		 -> nrf24l01TXName(BANK1[16]), nrf24l01TXTopic(BANK0[8]), romData(BANK1[19]), 

    strcpy@cp	PTR unsigned char  size(1) Largest target is 19
		 -> nrf24l01TXName(BANK1[16]), nrf24l01TXTopic(BANK0[8]), romData(BANK1[19]), 

    strcmp@s2	PTR const unsigned char  size(1) Largest target is 16
		 -> nrf24l01RXValue(BANK1[8]), nrf24l01RXTopic(BANK0[8]), nrf24l01RXName(BANK1[16]), 

    strcmp@s1	PTR const unsigned char  size(1) Largest target is 16
		 -> nrf24l01RXValue(BANK1[8]), nrf24l01RXTopic(BANK0[8]), nrf24l01RXName(BANK1[16]), 

    memset@p1	PTR void  size(1) Largest target is 16
		 -> nrf24l01RXValue(BANK1[8]), nrf24l01RXTopic(BANK0[8]), nrf24l01RXName(BANK1[16]), 

    memset@p	PTR unsigned char  size(1) Largest target is 16
		 -> nrf24l01RXValue(BANK1[8]), nrf24l01RXTopic(BANK0[8]), nrf24l01RXName(BANK1[16]), 

    utoa@buf	PTR unsigned char  size(1) Largest target is 8
		 -> nrf24l01TXValue(BANK0[8]), 

    sp__itoa	PTR unsigned char  size(1) Largest target is 0

    sp__memset	PTR void  size(1) Largest target is 16
		 -> nrf24l01RXValue(BANK1[8]), nrf24l01RXTopic(BANK0[8]), nrf24l01RXName(BANK1[16]), 

    nrf24l01ReceiveStringPart@string	PTR unsigned char  size(1) Largest target is 16
		 -> nrf24l01RXValue(BANK1[8]), nrf24l01RXTopic(BANK0[8]), nrf24l01RXName(BANK1[16]), 

    sp__utoa	PTR unsigned char  size(1) Largest target is 8
		 -> nrf24l01TXValue(BANK0[8]), 

    sp__strcpy	PTR unsigned char  size(1) Largest target is 19
		 -> nrf24l01TXName(BANK1[16]), nrf24l01TXTopic(BANK0[8]), romData(BANK1[19]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    _ISR->_nrf24l01ISR
    _nrf24l01ISR->_exception
    _nrf24l01ReceiveString->_memset
    _memset->_strlen
    _nrf24l01CheckACK->i1_nrf24l01SetRXMode
    i1_nrf24l01SetRXMode->i1_nrf24l01Send
    _exception->i1_flashUpdate
    i1_flashUpdate->i1_flashWriteByte

Critical Paths under _main in BANK0

    _main->_utoa
    _nrf24l01Init->_nrf24l01InitRegisters
    _nrf24l01InitRegisters->_nrf24l01Send
    _loop->_utoa
    _utoa->_getADCValue
    _nrf24l01SendString->_nrf24l01SetRXMode
    _nrf24l01SetRXMode->_nrf24l01Send
    _getADCValue->___lldiv
    _flashUpdate->_flashWriteByte
    _flashRealod->_flashReadByte

Critical Paths under _ISR in BANK0

    _ISR->_nrf24l01ISR
    _nrf24l01ISR->_nrf24l01ReceiveString
    _nrf24l01ReceiveString->_memset

Critical Paths under _main in BANK1

    _main->_utoa
    _loop->_utoa

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 1     1      0   16953
                                              5 BANK1      1     1      0
                        _flashRealod
                        _flashUpdate
                               _loop
                       _nrf24l01Init
                 _nrf24l01SendString
                              _sleep
                             _strcpy
                               _utoa
 ---------------------------------------------------------------------------------
 (1) _nrf24l01Init                                         3     3      0    2051
                                             22 BANK0      3     3      0
                     _nrf24l01CEHigh
                      _nrf24l01CELow
              _nrf24l01InitRegisters
              _nrf24l01InterfaceInit
 ---------------------------------------------------------------------------------
 (2) _nrf24l01InterfaceInit                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _nrf24l01InitRegisters                               11    11      0    2020
                                             12 BANK0     10    10      0
                       _nrf24l01Send
 ---------------------------------------------------------------------------------
 (1) _loop                                                 0     0      0    7626
                        _getADCValue
                 _nrf24l01SendString
                              _sleep
                             _strcpy
                               _utoa
 ---------------------------------------------------------------------------------
 (1) _utoa                                                 9     5      4    2908
                                             37 BANK0      4     0      4
                                              0 BANK1      5     5      0
                            ___lwdiv
                            ___lwmod
                        _getADCValue (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              6     2      4     386
                                              9 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              8     4      4     549
                                              9 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (1) _strcpy                                               5     3      2    1309
                                              9 BANK0      5     3      2
 ---------------------------------------------------------------------------------
 (1) _sleep                                                0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _nrf24l01SendString                                   2     2      0    2212
                                             15 BANK0      2     2      0
                   _enableInterrupts
                     _nrf24l01CEHigh
                      _nrf24l01CELow
                     _nrf24l01SPIEnd
                    _nrf24l01SPISend
                   _nrf24l01SPIStart
                  _nrf24l01SetRXMode
 ---------------------------------------------------------------------------------
 (2) _nrf24l01SetRXMode                                    3     3      0    1785
                                             12 BANK0      3     3      0
                     _nrf24l01CEHigh
                      _nrf24l01CELow
                       _nrf24l01Send
 ---------------------------------------------------------------------------------
 (3) _nrf24l01Send                                         3     2      1    1593
                                              9 BANK0      3     2      1
                   _enableInterrupts
                     _nrf24l01SPIEnd
                    _nrf24l01SPISend
                   _nrf24l01SPIStart
 ---------------------------------------------------------------------------------
 (11) _nrf24l01SPIStart                                    0     0      0       0
                      _nrf24l01CSLow
 ---------------------------------------------------------------------------------
 (12) _nrf24l01CSLow                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (11) _nrf24l01SPISend                                     1     1      0      31
 ---------------------------------------------------------------------------------
 (11) _nrf24l01SPIEnd                                      0     0      0       0
                     _nrf24l01CSHigh
 ---------------------------------------------------------------------------------
 (12) _nrf24l01CSHigh                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (11) _enableInterrupts                                    1     1      0      31
 ---------------------------------------------------------------------------------
 (10) _nrf24l01CELow                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _nrf24l01CEHigh                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _getADCValue                                         14    10      4    1197
                                             23 BANK0     14    10      4
                            ___lldiv
                             ___lmul
 ---------------------------------------------------------------------------------
 (3) ___lmul                                              12     4      8     290
                                              9 BANK0     12     4      8
 ---------------------------------------------------------------------------------
 (3) ___lldiv                                             14     6      8     395
                                              9 BANK0     14     6      8
 ---------------------------------------------------------------------------------
 (1) _flashUpdate                                          4     4      0     504
                                             15 BANK0      4     4      0
                     _flashWriteByte
 ---------------------------------------------------------------------------------
 (2) _flashWriteByte                                       6     2      4     374
                                              9 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (1) _flashRealod                                          3     3      0     343
                                             18 BANK0      3     3      0
                      _flashReadByte
 ---------------------------------------------------------------------------------
 (2) _flashReadByte                                        9     7      2     213
                                              9 BANK0      9     7      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 12
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _ISR                                                  0     0      0    4916
                        _nrf24l01ISR
 ---------------------------------------------------------------------------------
 (8) _nrf24l01ISR                                          2     2      0    4916
                                             13 COMMON     1     1      0
                                              8 BANK0      1     1      0
                          _exception
                   _nrf24l01CheckACK
              _nrf24l01ReceiveString
                     i1_nrf24l01Send
                i1_nrf24l01SetRXMode
 ---------------------------------------------------------------------------------
 (9) _nrf24l01ReceiveString                                6     6      0    2463
                                              2 BANK0      6     6      0
                             _memset
                     _nrf24l01CEHigh
                      _nrf24l01CELow
          _nrf24l01ReceiveStringPart
                     _nrf24l01SPIEnd
                    _nrf24l01SPISend
                   _nrf24l01SPIStart
                             _strlen
                     i1_nrf24l01Send
 ---------------------------------------------------------------------------------
 (10) _strlen                                              8     6      2     180
                                              0 COMMON     8     6      2
 ---------------------------------------------------------------------------------
 (10) _nrf24l01ReceiveStringPart                           9     6      3    1145
                                              1 COMMON     9     6      3
                    _nrf24l01SPISend
 ---------------------------------------------------------------------------------
 (10) _memset                                              7     3      4     570
                                              8 COMMON     5     1      4
                                              0 BANK0      2     2      0
                             _strlen (ARG)
 ---------------------------------------------------------------------------------
 (9) _nrf24l01CheckACK                                     1     1      0     898
                                              7 COMMON     1     1      0
                             _strcmp
                i1_nrf24l01SetRXMode
 ---------------------------------------------------------------------------------
 (9) i1_nrf24l01SetRXMode                                  3     3      0     525
                                              4 COMMON     3     3      0
                     _nrf24l01CEHigh
                      _nrf24l01CELow
                     i1_nrf24l01Send
 ---------------------------------------------------------------------------------
 (10) i1_nrf24l01Send                                      3     2      1     333
                                              1 COMMON     3     2      1
                   _enableInterrupts
                     _nrf24l01SPIEnd
                    _nrf24l01SPISend
                   _nrf24l01SPIStart
 ---------------------------------------------------------------------------------
 (11) _nrf24l01SPIStart                                    0     0      0       0
                      _nrf24l01CSLow
 ---------------------------------------------------------------------------------
 (12) _nrf24l01CSLow                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (11) _nrf24l01SPISend                                     1     1      0      31
 ---------------------------------------------------------------------------------
 (11) _nrf24l01SPIEnd                                      0     0      0       0
                     _nrf24l01CSHigh
 ---------------------------------------------------------------------------------
 (12) _nrf24l01CSHigh                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (11) _enableInterrupts                                    1     1      0      31
 ---------------------------------------------------------------------------------
 (10) _nrf24l01CELow                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _nrf24l01CEHigh                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _strcmp                                              5     3      2     373
                                              0 COMMON     5     3      2
 ---------------------------------------------------------------------------------
 (9) _exception                                            3     3      0     539
                                             10 COMMON     3     3      0
                             ___wmul
                      i1_flashUpdate
 ---------------------------------------------------------------------------------
 (10) i1_flashUpdate                                       4     4      0     297
                                              6 COMMON     4     4      0
                   i1_flashWriteByte
 ---------------------------------------------------------------------------------
 (11) i1_flashWriteByte                                    6     2      4     207
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (10) ___wmul                                              6     2      4     220
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 12
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _flashRealod
     _flashReadByte
   _flashUpdate
     _flashWriteByte
   _loop
     _getADCValue
       ___lldiv
       ___lmul
     _nrf24l01SendString
       _enableInterrupts
       _nrf24l01CEHigh
       _nrf24l01CELow
       _nrf24l01SPIEnd
         _nrf24l01CSHigh
       _nrf24l01SPISend
       _nrf24l01SPIStart
         _nrf24l01CSLow
       _nrf24l01SetRXMode
         _nrf24l01CEHigh
         _nrf24l01CELow
         _nrf24l01Send
           _enableInterrupts
           _nrf24l01SPIEnd
             _nrf24l01CSHigh
           _nrf24l01SPISend
           _nrf24l01SPIStart
             _nrf24l01CSLow
     _sleep
     _strcpy
     _utoa
       ___lwdiv
       ___lwmod
       _getADCValue (ARG)
         ___lldiv
         ___lmul
   _nrf24l01Init
     _nrf24l01CEHigh
     _nrf24l01CELow
     _nrf24l01InitRegisters
       _nrf24l01Send
         _enableInterrupts
         _nrf24l01SPIEnd
           _nrf24l01CSHigh
         _nrf24l01SPISend
         _nrf24l01SPIStart
           _nrf24l01CSLow
     _nrf24l01InterfaceInit
   _nrf24l01SendString
     _enableInterrupts
     _nrf24l01CEHigh
     _nrf24l01CELow
     _nrf24l01SPIEnd
       _nrf24l01CSHigh
     _nrf24l01SPISend
     _nrf24l01SPIStart
       _nrf24l01CSLow
     _nrf24l01SetRXMode
       _nrf24l01CEHigh
       _nrf24l01CELow
       _nrf24l01Send
         _enableInterrupts
         _nrf24l01SPIEnd
           _nrf24l01CSHigh
         _nrf24l01SPISend
         _nrf24l01SPIStart
           _nrf24l01CSLow
   _sleep
   _strcpy
   _utoa
     ___lwdiv
     ___lwmod
     _getADCValue (ARG)
       ___lldiv
       ___lmul

 _ISR (ROOT)
   _nrf24l01ISR
     _exception
       ___wmul
       i1_flashUpdate
         i1_flashWriteByte
     _nrf24l01CheckACK
       _strcmp
       i1_nrf24l01SetRXMode
         _nrf24l01CEHigh
         _nrf24l01CELow
         i1_nrf24l01Send
           _enableInterrupts
           _nrf24l01SPIEnd
             _nrf24l01CSHigh
           _nrf24l01SPISend
           _nrf24l01SPIStart
             _nrf24l01CSLow
     _nrf24l01ReceiveString
       _memset
         _strlen (ARG)
       _nrf24l01CEHigh
       _nrf24l01CELow
       _nrf24l01ReceiveStringPart
         _nrf24l01SPISend
       _nrf24l01SPIEnd
         _nrf24l01CSHigh
       _nrf24l01SPISend
       _nrf24l01SPIStart
         _nrf24l01CSLow
       _strlen
       i1_nrf24l01Send
         _enableInterrupts
         _nrf24l01SPIEnd
           _nrf24l01CSHigh
         _nrf24l01SPISend
         _nrf24l01SPIStart
           _nrf24l01CSLow
     i1_nrf24l01Send
       _enableInterrupts
       _nrf24l01SPIEnd
         _nrf24l01CSHigh
       _nrf24l01SPISend
       _nrf24l01SPIStart
         _nrf24l01CSLow
     i1_nrf24l01SetRXMode
       _nrf24l01CEHigh
       _nrf24l01CELow
       i1_nrf24l01Send
         _enableInterrupts
         _nrf24l01SPIEnd
           _nrf24l01CSHigh
         _nrf24l01SPISend
         _nrf24l01SPIStart
           _nrf24l01CSLow

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      E       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     29      47       5       88.8%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50      6      41       7       81.3%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0      20       9       40.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0       0      11        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0      B6      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0      B6      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V2.00 build -1524193055 
Symbol Table                                                                                   Thu Jul 12 14:24:37 2018

                  flashReadByte@result 002E                           flashRealod@i 0033  
                          __CFG_CP$OFF 0000                    ___wmul@multiplicand 0072  
                  nrf24l01Send@command 002B        nrf24l01InitRegisters@isReciever 0070  
                          __CFG_LVP$ON 0000                                    l212 03AB  
                                  l219 0F46                                    l334 0108  
                                  l879 046A                           flashUpdate@i 0031  
                         __CFG_CPD$OFF 0000                                    _ISR 0004  
                                  wreg 0009                                   ?_ISR 0070  
                       ??_nrf24l01Init 0036                                   l3011 04A1  
                                 l3023 04CC                                   l3009 0493  
                                 l3201 03A4                                   l3019 04C1  
                                 l3203 03CE                                   l3301 017A  
                                 l3045 05E1                                   l3037 05C3  
                                 l3061 06E6                                   l3039 05CF  
                                 l3063 06F2                                   l3071 0707  
                                 l3223 0418                                   l3049 05EA  
                                 l3233 043E                                   l3315 0190  
                                 l3219 0FCB                                   l3067 06FE  
                                 l3325 01A0                                   l3317 019C  
                                 l3281 0143                                   l3273 0131  
                       ??_nrf24l01Send 002A                                   l3293 0162  
                                 l3285 0150                                   l3277 013C  
                                 l3269 0124                                   l3199 03B0  
                                 l3711 02F4                                   l3297 016F  
                                 l3289 015B                                   l3645 0299  
                                 l2991 062A                                   l2967 0545  
                                 l2995 0634                                   STR_1 1030  
                         __CFG_WDTE$ON 0000                                   STR_2 1022  
                                 STR_3 1018                                   STR_4 1034  
                                 STR_5 101D                                   STR_6 102C  
                                 STR_7 1027                                   u2407 0525  
                                 u2417 0537                                   u2427 0542  
                                 u2347 0277                                   u1805 04C2  
                                 u1725 0635                                   u2437 03A1  
                                 u2357 071A                                   u1735 063C  
                                 u2367 072C                                   u2377 0181  
                                 u1905 06E9                                   u2387 0198  
                                 u1835 05C6                                   u1765 0496  
                                 u2397 01AB                                   u1925 06F8  
                                 u1855 05D0                                   u1935 06FF  
                                 u1785 04A2                                   u1865 05DA  
                                 u1795 04B6                                   u1875 05E2  
                                 i1l94 0F55                                   _WPUA 020C  
                                 _WPUC 020E         __size_of_nrf24l01InterfaceInit 001C  
          ??_nrf24l01ReceiveStringPart 0074                           __CFG_WRT$OFF 0000  
                        __CFG_FCMEN$ON 0000          __end_of_nrf24l01InterfaceInit 07FF  
                                 _main 025B                                   _loop 002C  
                      ??_flashReadByte 002B                                   fsr0h 0005  
                                 fsr1h 0007                                   indf0 0000  
                                 fsr0l 0004                                   indf1 0001  
                                 fsr1l 0006                                   btemp 007E  
                                 _utoa 040E                          __CFG_BORV$LOW 0000  
                                 start 000F                          __CFG_CSWEN$ON 0000  
       __size_of_nrf24l01ReceiveString 008E                          __CFG_MCLRE$ON 0000  
        __end_of_nrf24l01ReceiveString 0386                                  ??_ISR 007E  
                  nrf24l01SendString@i 0030                   __size_of_getADCValue 0088  
                      ??_nrf24l01CELow 0070                        ??_nrf24l01CSLow 0070  
          __size_of_nrf24l01SendString 00B2                                  ?_main 0070  
                                ?_loop 0070                        __end_of___lldiv 04D5  
                                ?_utoa 0045                         __CFG_DEBUG$OFF 0000  
                      __end_of___lwdiv 05EF                                  i1l207 000D  
                      __end_of___lwmod 070C                                  i1l461 0F7C  
                                u90_25 0F7D                 enableInterrupts@enable 0070  
                                u91_25 0F82                       i1_flashWriteByte 0681  
                       i1flashUpdate@i 0078                    ___lmul@multiplicand 002D  
                        __CFG_PWRTE$ON 0000                                  _sleep 0F46  
                       __CFG_BOREN$OFF 0000                       _enableInterrupts 0F36  
                                utoa@c 00DE                                  utoa@v 00DC  
                                status 0003                                  wtemp0 007E  
          __end_ofi1_nrf24l01SetRXMode 05BA                      getADCValue@adcSum 0041  
                     _nrf24l01SPIStart 0F3E                        __initialization 0011  
                     _nrf24l01CheckACK 0651                           __end_of_main 02F8  
                         __end_of_loop 00FF                           __end_of_utoa 0482  
            _nrf24l01ReceiveStringPart 054C                       ??_nrf24l01CEHigh 0070  
                               ??_main 00E0                                 ??_loop 0049  
                     ??_nrf24l01CSHigh 0070                                 ??_utoa 00DB  
                     ??_nrf24l01SPIEnd 0070                 __size_ofi1_flashUpdate 0021  
             __size_of_nrf24l01SPISend 000D                                 _ADRESH 009C  
                               _ADRESL 009B                                 ?_sleep 0070  
                               _ANSELA 018C                                 _ANSELC 018E  
                     ??_flashWriteByte 002D                                 i1l2051 0738  
                               i1l2055 0740                                 _ODCONA 028C  
                               i1l2083 0F76                                 i1l2059 0755  
                               i1l2067 0760                                 _ODCONC 028E  
                               i1l2069 076B                                 i1l2079 0FB0  
                               i1l3095 05B3                                 i1l3511 06C1  
                               i1l3527 06D6                                 i1l3519 06CC  
                               i1l2905 0F5A                                 i1l2971 054F  
                               i1l2981 056D                                 i1l2985 0581  
                               i1l2977 055F                                 _INLVLA 038C  
                               _INLVLC 038E                                 u170_25 057F  
                               u244_27 0595                                 u245_27 05A6  
                               u246_27 05B0                                 u247_27 0F42  
                               _PMADRH 0892                                 u248_27 0F30  
                               _PMADRL 0891                                 _PMDATH 0894  
                               _PMDATL 0893                                 _PMCON1 0895  
                               _PMCON2 0896                   __size_of_flashRealod 0020  
                   flashWriteByte@data 002B                   __size_of_flashUpdate 0023  
                 __size_of_nrf24l01ISR 002E                nrf24l01SetRXMode@config 002D  
                               ___lmul 0621                nrf24l01SetRXMode@rxMode 002E  
                               ___wmul 0F74                         __CFG_STVREN$ON 0000  
                            ??___lldiv 0031                              ??___lwdiv 002D  
                            ??___lwmod 002D                   __end_of_nrf24l01Init 0736  
                 __end_of_nrf24l01Send 07E3                                 _memset 0FAA  
                _nrf24l01InitRegisters 01B1                                 _strcmp 0736  
                               _strcpy 0FC5                                 _strlen 075B  
            i1nrf24l01SetRXMode@config 0075                       __end_of_romArray 2000  
            i1nrf24l01SetRXMode@rxMode 0076                     getADCValue@adcLoop 0040  
              __end_of__initialization 0028                     getADCValue@channel 003F  
                        i1_flashUpdate 07A2                     getADCValue@divider 0037  
nrf24l01ReceiveStringPart@sourceLength 0073                         __pcstackCOMMON 0070  
                        __end_of_sleep 0F4F                   _nrf24l01RXPacketData 004B  
        nrf24l01InitRegisters@enRXAddr 0032                                ??_sleep 0029  
                           __pbssBANK0 0049                             __pbssBANK1 00A0  
                           __pbssBANK2 0120                      ??_nrf24l01SPISend 0070  
                   __size_of_exception 0018                         ?i1_flashUpdate 0070  
              __size_ofi1_nrf24l01Send 001B               __end_ofi1_flashWriteByte 06B1  
                           __pmaintext 025B                                ?___lmul 0029  
                              ?___wmul 0070                        __CFG_PPS1WAY$ON 0000  
                    _nrf24l01SetRXMode 0511                 ?_nrf24l01InitRegisters 0070  
                           __pintentry 0004                    nrf24l01SPISend@data 0070  
                              ?_memset 0078                         ___lmul@product 0031  
                   ?_nrf24l01SetRXMode 0070               __end_of_enableInterrupts 0F3E  
                 _nrf24l01TXPacketData 004E                    __CFG_RSTOSC$HFINT32 0000  
                              ?_strcmp 0070                                ?_strcpy 0029  
                              ?_strlen 0070                  __end_of_n_ADDRESS_MUL 1039  
                  ??_nrf24l01SetRXMode 002C               __end_of_nrf24l01SPIStart 0F46  
   __size_of_nrf24l01ReceiveStringPart 0037                                _SSP1BUF 0211  
             __end_of_nrf24l01CheckACK 0681                  _nrf24l01InterfaceInit 07E3  
                __end_of_flashReadByte 0621                       __p_romArray_text 1FE0  
                        ??_getADCValue 003B                  __size_of_nrf24l01Init 002A  
                __size_of_nrf24l01Send 0020              __end_of_nrf24l01SetRXMode 054C  
           __end_of_nrf24l01SendString 01B1                        __size_of___lmul 0030  
                              ___lldiv 0482                        __size_of___wmul 001B  
                              ___lwdiv 05BA                  _nrf24l01ReceiveString 02F8  
                              ___lwmod 06DF                  __end_of_nrf24l01CELow 0F23  
                      __size_of_memset 001B                  __end_of_nrf24l01CSLow 0F29  
                              __ptext1 070C                                __ptext2 07E3  
                              __ptext3 01B1                                __ptext4 002C  
                              __ptext5 040E                                __ptext6 06DF  
                              __ptext7 05BA                                __ptext8 0FC5  
                              __ptext9 0F46                        __size_of_strcmp 0025  
                    __end_of_exception 0F74                        __size_of_strcpy 001B  
                      __size_of_strlen 0024                           __size_of_ISR 000B  
                              _counter 0049                i1flashWriteByte@address 0074  
                     _romArray_absaddr 1FE0                                _romData 00A0  
                              clrloop0 0F2A      __end_of_nrf24l01ReceiveStringPart 0583  
                 end_of_initialization 0028                           _nrf24l01Init 070C  
                      ??i1_flashUpdate 0076                           _nrf24l01Send 07C3  
                              memset@c 0078                                memset@n 007A  
                              memset@p 0020                        ___lldiv@divisor 0029  
                      ___lldiv@counter 0036           __size_ofi1_nrf24l01SetRXMode 0037  
                              utoa@buf 00DF                                utoa@val 0045  
                              strcmp@r 0073                  i1nrf24l01Send@command 0073  
                              strlen@s 0077                    __end_of_getADCValue 040E  
                            _PORTAbits 000C                              _PORTCbits 000E  
           nrf24l01ReceiveString@width 0026             nrf24l01ReceiveStringPart@i 0079  
                            _TRISAbits 008C                              _TRISCbits 008E  
                     nrf24l01Send@data 0029                       __CFG_FEXTOSC$OFF 0000  
                        ??_flashRealod 0032                          ??_flashUpdate 002F  
                        ??_nrf24l01ISR 007D                 ?_nrf24l01InterfaceInit 0070  
                       i1_nrf24l01Send 0F8F             __size_of_nrf24l01SetRXMode 003B  
               ?_nrf24l01ReceiveString 0070                         __end_of___lmul 0651  
                       __end_of___wmul 0F8F          nrf24l01ReceiveStringPart@byte 0078  
                       __end_of_memset 0FC5                         __end_of_strcmp 075B  
                       __end_of_strcpy 0FE0                         __end_of_strlen 077F  
                  start_initialization 0011                        _nrf24l01SPISend 0F4F  
                          __end_of_ISR 000F                  flashWriteByte@address 002D  
                      _nrf24l01RXValue 00D3                __size_of_nrf24l01CEHigh 0003  
                      _nrf24l01RXTopic 004F                        _nrf24l01TXValue 0057  
                      _nrf24l01TXTopic 005F                __size_of_nrf24l01CSHigh 0003  
               __end_ofi1_nrf24l01Send 0FAA                __size_of_nrf24l01SPIEnd 0007  
              ??_nrf24l01InitRegisters 002C                       __CFG_LPBOREN$OFF 0000  
                    ?i1_flashWriteByte 0070                    __end_of_flashRealod 1000  
                          _getADCValue 0386                __size_of_flashWriteByte 003C  
                  __end_of_flashUpdate 07A2                               ??___lmul 0031  
                  __end_of_nrf24l01ISR 06DF                               ??___wmul 0074  
                   ??i1_flashWriteByte 0074                   __end_of_resetRomData 1013  
                             ??_memset 007C                      ?_enableInterrupts 0070  
                             ??_strcmp 0072                               ??_strcpy 002B  
                             ??_strlen 0072                     ??_enableInterrupts 0070  
                            ___latbits 0002                          __pcstackBANK0 0020  
                        __pcstackBANK1 00DB                      ?_nrf24l01SPIStart 0070  
                    ?_nrf24l01CheckACK 0070                     ??_nrf24l01SPIStart 0070  
                   ??_nrf24l01CheckACK 0077                        ?i1_nrf24l01Send 0071  
                     ___lwdiv@dividend 002B                               ?___lldiv 0029  
                             ?___lwdiv 0029                               ?___lwmod 0029  
                 __end_of_n_ADDRESS_P0 1018                __end_of_nrf24l01SPISend 0F5C  
                   i1nrf24l01Send@data 0071              nrf24l01InitRegisters@enAA 0033  
  nrf24l01ReceiveStringPart@destLength 0072                     _nrf24l01SendString 00FF  
                            _exception 0F5C                       ___lwdiv@quotient 002F  
                  i1_nrf24l01SetRXMode 0583                         __size_of_sleep 0009  
                  ?_nrf24l01SendString 0070                            _flashRealod 0FE0  
                       ___wmul@product 0074                 i1flashWriteByte@offset 0070  
                          _flashUpdate 077F                            _nrf24l01ISR 06B1  
                            clear_ram0 0F29                               _PIE0bits 0090  
                             _PIR0bits 0010                              _romHolder 0120  
                            _sleepLoop 004C                   ?i1_nrf24l01SetRXMode 0070  
                 ??_nrf24l01SendString 002F                             _ADCON0bits 009D  
                           _ADCON1bits 009E                      ___wmul@multiplier 0070  
                             _WPUAbits 020C                 __size_of_flashReadByte 0032  
                           ?_exception 0070                         _nrf24l01CEHigh 0F1D  
                    ___lmul@multiplier 0029                ??_nrf24l01InterfaceInit 0029  
                       _nrf24l01CSHigh 0F23                      nrf24l01ISR@status 0028  
           ?_nrf24l01ReceiveStringPart 0071                         _nrf24l01SPIEnd 0F2F  
                       _nrf24l01RXName 00B3                         _nrf24l01TXName 00C3  
               __size_of_nrf24l01CELow 0003                  __end_ofi1_flashUpdate 07C3  
               __size_of_nrf24l01CSLow 0003                   flashWriteByte@offset 0029  
              ??_nrf24l01ReceiveString 0022                         _flashWriteByte 04D5  
                ??i1_nrf24l01SetRXMode 0074                       __size_of___lldiv 0053  
                     __size_of___lwdiv 0035                       __size_of___lwmod 002D  
                     ?_nrf24l01SPISend 0070                             _ANSELAbits 018C  
                           _ANSELCbits 018E                          _n_ADDRESS_MUL 1038  
               __end_of_nrf24l01CEHigh 0F20                        ___lwdiv@divisor 0029  
               __end_of_nrf24l01CSHigh 0F26                        ___lwdiv@counter 002E  
                             __ptext10 00FF                               __ptext11 0511  
                             __ptext12 07C3                               __ptext21 06B1  
                             __ptext13 0386                               __ptext30 0F26  
                             __ptext22 02F8                               __ptext14 0621  
                             __ptext31 0F4F                               __ptext23 075B  
                             __ptext15 0482                               __ptext40 0681  
                             __ptext32 0F2F                               __ptext24 054C  
                             __ptext16 077F                               __ptext41 0F74  
                             __ptext33 0F23                               __ptext25 0FAA  
                             __ptext17 04D5                               __ptext34 0F36  
                             __ptext26 0651                               __ptext18 0FE0  
                             __ptext35 0F20                               __ptext27 0583  
                             __ptext19 05EF                               __ptext36 0F1D  
                             __ptext28 0F8F                               __ptext37 0736  
                             __ptext29 0F3E                               __ptext38 0F5C  
                             __ptext39 07A2                           _SSP1CON1bits 0215  
               __end_of_nrf24l01SPIEnd 0F36                               _nrf24l01 004D  
                         _resetRomData 1000                 nrf24l01Init@isReciever 0038  
                          _OSCCON1bits 0919                             strcpy@from 0029  
                        __size_of_main 009D                          __size_of_loop 00D3  
         nrf24l01InitRegisters@channel 002D                          __size_of_utoa 0074  
               __end_of_flashWriteByte 0511           nrf24l01InitRegisters@feature 002F  
                   exception@exception 007C                             _RC0PPSbits 0EA0  
                             _romArray 1FE0                          _flashReadByte 05EF  
         nrf24l01InitRegisters@rfSetup 0030                             _RC1PPSbits 0EA1  
                         ?_getADCValue 0037                             _RC2PPSbits 0EA2  
       __size_of_nrf24l01InitRegisters 00AA          __end_of_nrf24l01InitRegisters 025B  
                             int$flags 007E           nrf24l01InitRegisters@setupAW 002E  
                         _SSP1STATbits 0214                          _nrf24l01CELow 0F20  
                        _nrf24l01CSLow 0F26                             _INTCONbits 000B  
            __size_ofi1_flashWriteByte 0030                        ?_nrf24l01CEHigh 0070  
                           _FVRCONbits 0117                       ??i1_nrf24l01Send 0072  
                          ??_exception 007A                        ?_nrf24l01CSHigh 0070  
                       __pstringtext10 1034                         __pstringtext11 0000  
                             memset@p1 0021                        ?_nrf24l01SPIEnd 0070  
                             intlevel1 0000                           _n_ADDRESS_P0 1013  
            __size_of_enableInterrupts 0008                             _PMCON1bits 0895  
                     ___lwmod@dividend 002B                       ___lldiv@dividend 002D  
                    __CFG_CLKOUTEN$OFF 0000                        ?_flashWriteByte 0029  
                       ?_flashReadByte 0029                   i1flashWriteByte@data 0072  
          nrf24l01InitRegisters@config 0035              __size_of_nrf24l01SPIStart 0008  
            __size_of_nrf24l01CheckACK 0030            nrf24l01InitRegisters@status 0031  
                       ?_nrf24l01CELow 0070                          __pstringtext1 1000  
                        __pstringtext2 1013                          __pstringtext3 1038  
                        __pstringtext4 1018                          __pstringtext5 101D  
                        __pstringtext6 1022                          __pstringtext7 1027  
                        __pstringtext8 102C                          __pstringtext9 1030  
                       ?_nrf24l01CSLow 0070                               utoa@base 0047  
           nrf24l01InitRegisters@DynPD 0034                               strcmp@s1 0074  
                             strcmp@s2 0070                       ___lldiv@quotient 0032  
                      ___lwmod@divisor 0029                               strcpy@cp 002C  
                             strlen@cp 0076                               strcpy@to 002D  
                      ___lwmod@counter 002E        nrf24l01ReceiveStringPart@offset 0071  
                           _WDTCONbits 0097        nrf24l01ReceiveStringPart@string 0077  
          nrf24l01ReceiveString@offset 0027                          ?_nrf24l01Init 0070  
                        ?_nrf24l01Send 0029                           ?_flashRealod 0070  
                           _STATUSbits 0003                   flashReadByte@address 0030  
                         ?_flashUpdate 0070                           ?_nrf24l01ISR 0070  
                  flashReadByte@offset 0029  
