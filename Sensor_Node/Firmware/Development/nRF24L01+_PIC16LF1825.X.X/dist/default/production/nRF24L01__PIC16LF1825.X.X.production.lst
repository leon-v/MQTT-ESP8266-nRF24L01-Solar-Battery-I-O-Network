

Microchip Technology PIC LITE Macro Assembler V2.00 build -1524193055 
                                                                                               Sat Jun 30 12:47:32 2018

Microchip Technology Omniscient Code Generator v2.00 (Free mode) build 20180527130849
     1                           	processor	16LF18325
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	stringtext1,global,class=STRCODE,delta=2
     5                           	psect	stringtext2,global,class=STRCODE,delta=2
     6                           	psect	stringtext3,global,class=STRCODE,delta=2
     7                           	psect	_romArray_text,global,class=STRCODE,delta=2
     8                           	psect	stringtext4,global,class=STRCODE,delta=2
     9                           	psect	stringtext5,global,class=STRCODE,delta=2
    10                           	psect	stringtext6,global,class=STRCODE,delta=2
    11                           	psect	stringtext7,global,class=STRCODE,delta=2
    12                           	psect	stringtext8,global,class=STRCODE,delta=2
    13                           	psect	stringtext9,global,class=STRCODE,delta=2
    14                           	psect	stringtext10,global,class=STRCODE,delta=2
    15                           	psect	stringtext11,global,class=STRCODE,delta=2
    16                           	psect	cinit,global,class=CODE,merge=1,delta=2
    17                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    18                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    19                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    20                           	psect	clrtext,global,class=CODE,delta=2
    21                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    22                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    23                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    24                           	psect	text1,local,class=CODE,merge=1,delta=2
    25                           	psect	text2,local,class=CODE,merge=1,delta=2
    26                           	psect	text3,local,class=CODE,merge=1,delta=2
    27                           	psect	text4,local,class=CODE,merge=1,delta=2
    28                           	psect	text5,local,class=CODE,merge=1,delta=2,group=2
    29                           	psect	text6,local,class=CODE,merge=1,delta=2,group=1
    30                           	psect	text7,local,class=CODE,merge=1,delta=2,group=1
    31                           	psect	text8,local,class=CODE,merge=1,delta=2,group=2
    32                           	psect	text9,local,class=CODE,merge=1,delta=2
    33                           	psect	text10,local,class=CODE,merge=1,delta=2
    34                           	psect	text11,local,class=CODE,merge=1,delta=2
    35                           	psect	text12,local,class=CODE,merge=1,delta=2
    36                           	psect	text13,local,class=CODE,merge=1,delta=2
    37                           	psect	text14,local,class=CODE,merge=1,delta=2,group=1
    38                           	psect	text15,local,class=CODE,merge=1,delta=2,group=1
    39                           	psect	text16,local,class=CODE,merge=1,delta=2
    40                           	psect	text17,local,class=CODE,merge=1,delta=2
    41                           	psect	text18,local,class=CODE,merge=1,delta=2
    42                           	psect	text19,local,class=CODE,merge=1,delta=2
    43                           	psect	intentry,global,class=CODE,delta=2
    44                           	psect	text21,local,class=CODE,merge=1,delta=2
    45                           	psect	text22,local,class=CODE,merge=1,delta=2
    46                           	psect	text23,local,class=CODE,merge=1,delta=2
    47                           	psect	text24,local,class=CODE,merge=1,delta=2
    48                           	psect	text25,local,class=CODE,merge=1,delta=2
    49                           	psect	text26,local,class=CODE,merge=1,delta=2
    50                           	psect	text27,local,class=CODE,merge=1,delta=2
    51                           	psect	text28,local,class=CODE,merge=1,delta=2
    52                           	psect	text29,local,class=CODE,merge=1,delta=2
    53                           	psect	text30,local,class=CODE,merge=1,delta=2
    54                           	psect	text31,local,class=CODE,merge=1,delta=2
    55                           	psect	text32,local,class=CODE,merge=1,delta=2
    56                           	psect	text33,local,class=CODE,merge=1,delta=2
    57                           	psect	text34,local,class=CODE,merge=1,delta=2
    58                           	psect	text35,local,class=CODE,merge=1,delta=2,group=1
    59                           	dabs	1,0x7E,2
    60  0000                     
    61                           ; Version 2.00
    62                           ; Generated 27/05/2018 GMT
    63                           ; 
    64                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
    65                           ; All rights reserved.
    66                           ; 
    67                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    68                           ; 
    69                           ; Redistribution and use in source and binary forms, with or without modification, are
    70                           ; permitted provided that the following conditions are met:
    71                           ; 
    72                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    73                           ;        conditions and the following disclaimer.
    74                           ; 
    75                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    76                           ;        of conditions and the following disclaimer in the documentation and/or other
    77                           ;        materials provided with the distribution.
    78                           ; 
    79                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    80                           ;        software without specific prior written permission.
    81                           ; 
    82                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    83                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    84                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    85                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    86                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    87                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    88                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    89                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    90                           ; 
    91                           ; 
    92                           ; Code-generator required, PIC16LF18325 Definitions
    93                           ; 
    94                           ; SFR Addresses
    95  0000                     	;# 
    96  0001                     	;# 
    97  0002                     	;# 
    98  0003                     	;# 
    99  0004                     	;# 
   100  0005                     	;# 
   101  0006                     	;# 
   102  0007                     	;# 
   103  0008                     	;# 
   104  0009                     	;# 
   105  000A                     	;# 
   106  000B                     	;# 
   107  000C                     	;# 
   108  000E                     	;# 
   109  0010                     	;# 
   110  0011                     	;# 
   111  0012                     	;# 
   112  0013                     	;# 
   113  0014                     	;# 
   114  0015                     	;# 
   115  0015                     	;# 
   116  0016                     	;# 
   117  0016                     	;# 
   118  0017                     	;# 
   119  0018                     	;# 
   120  0019                     	;# 
   121  0019                     	;# 
   122  001A                     	;# 
   123  001B                     	;# 
   124  001C                     	;# 
   125  001D                     	;# 
   126  001E                     	;# 
   127  001F                     	;# 
   128  008C                     	;# 
   129  008E                     	;# 
   130  0090                     	;# 
   131  0091                     	;# 
   132  0092                     	;# 
   133  0093                     	;# 
   134  0094                     	;# 
   135  0097                     	;# 
   136  009B                     	;# 
   137  009B                     	;# 
   138  009C                     	;# 
   139  009D                     	;# 
   140  009E                     	;# 
   141  009F                     	;# 
   142  010C                     	;# 
   143  010E                     	;# 
   144  0111                     	;# 
   145  0112                     	;# 
   146  0113                     	;# 
   147  0114                     	;# 
   148  0115                     	;# 
   149  0116                     	;# 
   150  0117                     	;# 
   151  0118                     	;# 
   152  0119                     	;# 
   153  018C                     	;# 
   154  018E                     	;# 
   155  0199                     	;# 
   156  0199                     	;# 
   157  0199                     	;# 
   158  019A                     	;# 
   159  019A                     	;# 
   160  019A                     	;# 
   161  019B                     	;# 
   162  019B                     	;# 
   163  019B                     	;# 
   164  019B                     	;# 
   165  019B                     	;# 
   166  019C                     	;# 
   167  019C                     	;# 
   168  019C                     	;# 
   169  019D                     	;# 
   170  019D                     	;# 
   171  019D                     	;# 
   172  019E                     	;# 
   173  019E                     	;# 
   174  019E                     	;# 
   175  019F                     	;# 
   176  019F                     	;# 
   177  019F                     	;# 
   178  019F                     	;# 
   179  019F                     	;# 
   180  020C                     	;# 
   181  020E                     	;# 
   182  0211                     	;# 
   183  0211                     	;# 
   184  0212                     	;# 
   185  0212                     	;# 
   186  0213                     	;# 
   187  0213                     	;# 
   188  0214                     	;# 
   189  0214                     	;# 
   190  0215                     	;# 
   191  0215                     	;# 
   192  0215                     	;# 
   193  0215                     	;# 
   194  0216                     	;# 
   195  0216                     	;# 
   196  0217                     	;# 
   197  0217                     	;# 
   198  0219                     	;# 
   199  021A                     	;# 
   200  021B                     	;# 
   201  021C                     	;# 
   202  021D                     	;# 
   203  021D                     	;# 
   204  021E                     	;# 
   205  021F                     	;# 
   206  028C                     	;# 
   207  028E                     	;# 
   208  0291                     	;# 
   209  0291                     	;# 
   210  0292                     	;# 
   211  0293                     	;# 
   212  0294                     	;# 
   213  0295                     	;# 
   214  0295                     	;# 
   215  0296                     	;# 
   216  0297                     	;# 
   217  0298                     	;# 
   218  029F                     	;# 
   219  030C                     	;# 
   220  030E                     	;# 
   221  0311                     	;# 
   222  0311                     	;# 
   223  0312                     	;# 
   224  0313                     	;# 
   225  0314                     	;# 
   226  0315                     	;# 
   227  0315                     	;# 
   228  0316                     	;# 
   229  0317                     	;# 
   230  0318                     	;# 
   231  038C                     	;# 
   232  038E                     	;# 
   233  0391                     	;# 
   234  0392                     	;# 
   235  0393                     	;# 
   236  0397                     	;# 
   237  0398                     	;# 
   238  0399                     	;# 
   239  039A                     	;# 
   240  039C                     	;# 
   241  039D                     	;# 
   242  039E                     	;# 
   243  039F                     	;# 
   244  0411                     	;# 
   245  0411                     	;# 
   246  0412                     	;# 
   247  0413                     	;# 
   248  0414                     	;# 
   249  0415                     	;# 
   250  0416                     	;# 
   251  0417                     	;# 
   252  0418                     	;# 
   253  0418                     	;# 
   254  0419                     	;# 
   255  041A                     	;# 
   256  041B                     	;# 
   257  041C                     	;# 
   258  041D                     	;# 
   259  041E                     	;# 
   260  041F                     	;# 
   261  0498                     	;# 
   262  0498                     	;# 
   263  0499                     	;# 
   264  049A                     	;# 
   265  049B                     	;# 
   266  049B                     	;# 
   267  049C                     	;# 
   268  049D                     	;# 
   269  049E                     	;# 
   270  049F                     	;# 
   271  0617                     	;# 
   272  0618                     	;# 
   273  0619                     	;# 
   274  0619                     	;# 
   275  061A                     	;# 
   276  061B                     	;# 
   277  061C                     	;# 
   278  061C                     	;# 
   279  061F                     	;# 
   280  0691                     	;# 
   281  0692                     	;# 
   282  0693                     	;# 
   283  0694                     	;# 
   284  0695                     	;# 
   285  0696                     	;# 
   286  0697                     	;# 
   287  0698                     	;# 
   288  0699                     	;# 
   289  0711                     	;# 
   290  0712                     	;# 
   291  0713                     	;# 
   292  0714                     	;# 
   293  0715                     	;# 
   294  0716                     	;# 
   295  0717                     	;# 
   296  0718                     	;# 
   297  0719                     	;# 
   298  0891                     	;# 
   299  0891                     	;# 
   300  0891                     	;# 
   301  0891                     	;# 
   302  0891                     	;# 
   303  0891                     	;# 
   304  0892                     	;# 
   305  0892                     	;# 
   306  0892                     	;# 
   307  0893                     	;# 
   308  0893                     	;# 
   309  0893                     	;# 
   310  0893                     	;# 
   311  0893                     	;# 
   312  0893                     	;# 
   313  0894                     	;# 
   314  0894                     	;# 
   315  0894                     	;# 
   316  0895                     	;# 
   317  0895                     	;# 
   318  0895                     	;# 
   319  0896                     	;# 
   320  0896                     	;# 
   321  0896                     	;# 
   322  089B                     	;# 
   323  0911                     	;# 
   324  0912                     	;# 
   325  0913                     	;# 
   326  0914                     	;# 
   327  0915                     	;# 
   328  0916                     	;# 
   329  0918                     	;# 
   330  0919                     	;# 
   331  091A                     	;# 
   332  091B                     	;# 
   333  091C                     	;# 
   334  091D                     	;# 
   335  091E                     	;# 
   336  091F                     	;# 
   337  0E0F                     	;# 
   338  0E10                     	;# 
   339  0E11                     	;# 
   340  0E12                     	;# 
   341  0E13                     	;# 
   342  0E14                     	;# 
   343  0E15                     	;# 
   344  0E16                     	;# 
   345  0E17                     	;# 
   346  0E18                     	;# 
   347  0E19                     	;# 
   348  0E1A                     	;# 
   349  0E1B                     	;# 
   350  0E1C                     	;# 
   351  0E1D                     	;# 
   352  0E1E                     	;# 
   353  0E1F                     	;# 
   354  0E20                     	;# 
   355  0E21                     	;# 
   356  0E22                     	;# 
   357  0E24                     	;# 
   358  0E25                     	;# 
   359  0E28                     	;# 
   360  0E29                     	;# 
   361  0E2A                     	;# 
   362  0E2B                     	;# 
   363  0E2C                     	;# 
   364  0E2D                     	;# 
   365  0E2E                     	;# 
   366  0E2F                     	;# 
   367  0E90                     	;# 
   368  0E91                     	;# 
   369  0E92                     	;# 
   370  0E94                     	;# 
   371  0E95                     	;# 
   372  0EA0                     	;# 
   373  0EA1                     	;# 
   374  0EA2                     	;# 
   375  0EA3                     	;# 
   376  0EA4                     	;# 
   377  0EA5                     	;# 
   378  0F0F                     	;# 
   379  0F10                     	;# 
   380  0F11                     	;# 
   381  0F12                     	;# 
   382  0F13                     	;# 
   383  0F14                     	;# 
   384  0F15                     	;# 
   385  0F16                     	;# 
   386  0F17                     	;# 
   387  0F18                     	;# 
   388  0F19                     	;# 
   389  0F1A                     	;# 
   390  0F1B                     	;# 
   391  0F1C                     	;# 
   392  0F1D                     	;# 
   393  0F1E                     	;# 
   394  0F1F                     	;# 
   395  0F20                     	;# 
   396  0F21                     	;# 
   397  0F22                     	;# 
   398  0F23                     	;# 
   399  0F24                     	;# 
   400  0F25                     	;# 
   401  0F26                     	;# 
   402  0F27                     	;# 
   403  0F28                     	;# 
   404  0F29                     	;# 
   405  0F2A                     	;# 
   406  0F2B                     	;# 
   407  0F2C                     	;# 
   408  0F2D                     	;# 
   409  0F2E                     	;# 
   410  0F2F                     	;# 
   411  0F30                     	;# 
   412  0F31                     	;# 
   413  0F32                     	;# 
   414  0F33                     	;# 
   415  0F34                     	;# 
   416  0F35                     	;# 
   417  0F36                     	;# 
   418  0F37                     	;# 
   419  0FE4                     	;# 
   420  0FE5                     	;# 
   421  0FE6                     	;# 
   422  0FE7                     	;# 
   423  0FE8                     	;# 
   424  0FE9                     	;# 
   425  0FEA                     	;# 
   426  0FEB                     	;# 
   427  0FED                     	;# 
   428  0FEE                     	;# 
   429  0FEF                     	;# 
   430  0000                     	;# 
   431  0001                     	;# 
   432  0002                     	;# 
   433  0003                     	;# 
   434  0004                     	;# 
   435  0005                     	;# 
   436  0006                     	;# 
   437  0007                     	;# 
   438  0008                     	;# 
   439  0009                     	;# 
   440  000A                     	;# 
   441  000B                     	;# 
   442  000C                     	;# 
   443  000E                     	;# 
   444  0010                     	;# 
   445  0011                     	;# 
   446  0012                     	;# 
   447  0013                     	;# 
   448  0014                     	;# 
   449  0015                     	;# 
   450  0015                     	;# 
   451  0016                     	;# 
   452  0016                     	;# 
   453  0017                     	;# 
   454  0018                     	;# 
   455  0019                     	;# 
   456  0019                     	;# 
   457  001A                     	;# 
   458  001B                     	;# 
   459  001C                     	;# 
   460  001D                     	;# 
   461  001E                     	;# 
   462  001F                     	;# 
   463  008C                     	;# 
   464  008E                     	;# 
   465  0090                     	;# 
   466  0091                     	;# 
   467  0092                     	;# 
   468  0093                     	;# 
   469  0094                     	;# 
   470  0097                     	;# 
   471  009B                     	;# 
   472  009B                     	;# 
   473  009C                     	;# 
   474  009D                     	;# 
   475  009E                     	;# 
   476  009F                     	;# 
   477  010C                     	;# 
   478  010E                     	;# 
   479  0111                     	;# 
   480  0112                     	;# 
   481  0113                     	;# 
   482  0114                     	;# 
   483  0115                     	;# 
   484  0116                     	;# 
   485  0117                     	;# 
   486  0118                     	;# 
   487  0119                     	;# 
   488  018C                     	;# 
   489  018E                     	;# 
   490  0199                     	;# 
   491  0199                     	;# 
   492  0199                     	;# 
   493  019A                     	;# 
   494  019A                     	;# 
   495  019A                     	;# 
   496  019B                     	;# 
   497  019B                     	;# 
   498  019B                     	;# 
   499  019B                     	;# 
   500  019B                     	;# 
   501  019C                     	;# 
   502  019C                     	;# 
   503  019C                     	;# 
   504  019D                     	;# 
   505  019D                     	;# 
   506  019D                     	;# 
   507  019E                     	;# 
   508  019E                     	;# 
   509  019E                     	;# 
   510  019F                     	;# 
   511  019F                     	;# 
   512  019F                     	;# 
   513  019F                     	;# 
   514  019F                     	;# 
   515  020C                     	;# 
   516  020E                     	;# 
   517  0211                     	;# 
   518  0211                     	;# 
   519  0212                     	;# 
   520  0212                     	;# 
   521  0213                     	;# 
   522  0213                     	;# 
   523  0214                     	;# 
   524  0214                     	;# 
   525  0215                     	;# 
   526  0215                     	;# 
   527  0215                     	;# 
   528  0215                     	;# 
   529  0216                     	;# 
   530  0216                     	;# 
   531  0217                     	;# 
   532  0217                     	;# 
   533  0219                     	;# 
   534  021A                     	;# 
   535  021B                     	;# 
   536  021C                     	;# 
   537  021D                     	;# 
   538  021D                     	;# 
   539  021E                     	;# 
   540  021F                     	;# 
   541  028C                     	;# 
   542  028E                     	;# 
   543  0291                     	;# 
   544  0291                     	;# 
   545  0292                     	;# 
   546  0293                     	;# 
   547  0294                     	;# 
   548  0295                     	;# 
   549  0295                     	;# 
   550  0296                     	;# 
   551  0297                     	;# 
   552  0298                     	;# 
   553  029F                     	;# 
   554  030C                     	;# 
   555  030E                     	;# 
   556  0311                     	;# 
   557  0311                     	;# 
   558  0312                     	;# 
   559  0313                     	;# 
   560  0314                     	;# 
   561  0315                     	;# 
   562  0315                     	;# 
   563  0316                     	;# 
   564  0317                     	;# 
   565  0318                     	;# 
   566  038C                     	;# 
   567  038E                     	;# 
   568  0391                     	;# 
   569  0392                     	;# 
   570  0393                     	;# 
   571  0397                     	;# 
   572  0398                     	;# 
   573  0399                     	;# 
   574  039A                     	;# 
   575  039C                     	;# 
   576  039D                     	;# 
   577  039E                     	;# 
   578  039F                     	;# 
   579  0411                     	;# 
   580  0411                     	;# 
   581  0412                     	;# 
   582  0413                     	;# 
   583  0414                     	;# 
   584  0415                     	;# 
   585  0416                     	;# 
   586  0417                     	;# 
   587  0418                     	;# 
   588  0418                     	;# 
   589  0419                     	;# 
   590  041A                     	;# 
   591  041B                     	;# 
   592  041C                     	;# 
   593  041D                     	;# 
   594  041E                     	;# 
   595  041F                     	;# 
   596  0498                     	;# 
   597  0498                     	;# 
   598  0499                     	;# 
   599  049A                     	;# 
   600  049B                     	;# 
   601  049B                     	;# 
   602  049C                     	;# 
   603  049D                     	;# 
   604  049E                     	;# 
   605  049F                     	;# 
   606  0617                     	;# 
   607  0618                     	;# 
   608  0619                     	;# 
   609  0619                     	;# 
   610  061A                     	;# 
   611  061B                     	;# 
   612  061C                     	;# 
   613  061C                     	;# 
   614  061F                     	;# 
   615  0691                     	;# 
   616  0692                     	;# 
   617  0693                     	;# 
   618  0694                     	;# 
   619  0695                     	;# 
   620  0696                     	;# 
   621  0697                     	;# 
   622  0698                     	;# 
   623  0699                     	;# 
   624  0711                     	;# 
   625  0712                     	;# 
   626  0713                     	;# 
   627  0714                     	;# 
   628  0715                     	;# 
   629  0716                     	;# 
   630  0717                     	;# 
   631  0718                     	;# 
   632  0719                     	;# 
   633  0891                     	;# 
   634  0891                     	;# 
   635  0891                     	;# 
   636  0891                     	;# 
   637  0891                     	;# 
   638  0891                     	;# 
   639  0892                     	;# 
   640  0892                     	;# 
   641  0892                     	;# 
   642  0893                     	;# 
   643  0893                     	;# 
   644  0893                     	;# 
   645  0893                     	;# 
   646  0893                     	;# 
   647  0893                     	;# 
   648  0894                     	;# 
   649  0894                     	;# 
   650  0894                     	;# 
   651  0895                     	;# 
   652  0895                     	;# 
   653  0895                     	;# 
   654  0896                     	;# 
   655  0896                     	;# 
   656  0896                     	;# 
   657  089B                     	;# 
   658  0911                     	;# 
   659  0912                     	;# 
   660  0913                     	;# 
   661  0914                     	;# 
   662  0915                     	;# 
   663  0916                     	;# 
   664  0918                     	;# 
   665  0919                     	;# 
   666  091A                     	;# 
   667  091B                     	;# 
   668  091C                     	;# 
   669  091D                     	;# 
   670  091E                     	;# 
   671  091F                     	;# 
   672  0E0F                     	;# 
   673  0E10                     	;# 
   674  0E11                     	;# 
   675  0E12                     	;# 
   676  0E13                     	;# 
   677  0E14                     	;# 
   678  0E15                     	;# 
   679  0E16                     	;# 
   680  0E17                     	;# 
   681  0E18                     	;# 
   682  0E19                     	;# 
   683  0E1A                     	;# 
   684  0E1B                     	;# 
   685  0E1C                     	;# 
   686  0E1D                     	;# 
   687  0E1E                     	;# 
   688  0E1F                     	;# 
   689  0E20                     	;# 
   690  0E21                     	;# 
   691  0E22                     	;# 
   692  0E24                     	;# 
   693  0E25                     	;# 
   694  0E28                     	;# 
   695  0E29                     	;# 
   696  0E2A                     	;# 
   697  0E2B                     	;# 
   698  0E2C                     	;# 
   699  0E2D                     	;# 
   700  0E2E                     	;# 
   701  0E2F                     	;# 
   702  0E90                     	;# 
   703  0E91                     	;# 
   704  0E92                     	;# 
   705  0E94                     	;# 
   706  0E95                     	;# 
   707  0EA0                     	;# 
   708  0EA1                     	;# 
   709  0EA2                     	;# 
   710  0EA3                     	;# 
   711  0EA4                     	;# 
   712  0EA5                     	;# 
   713  0F0F                     	;# 
   714  0F10                     	;# 
   715  0F11                     	;# 
   716  0F12                     	;# 
   717  0F13                     	;# 
   718  0F14                     	;# 
   719  0F15                     	;# 
   720  0F16                     	;# 
   721  0F17                     	;# 
   722  0F18                     	;# 
   723  0F19                     	;# 
   724  0F1A                     	;# 
   725  0F1B                     	;# 
   726  0F1C                     	;# 
   727  0F1D                     	;# 
   728  0F1E                     	;# 
   729  0F1F                     	;# 
   730  0F20                     	;# 
   731  0F21                     	;# 
   732  0F22                     	;# 
   733  0F23                     	;# 
   734  0F24                     	;# 
   735  0F25                     	;# 
   736  0F26                     	;# 
   737  0F27                     	;# 
   738  0F28                     	;# 
   739  0F29                     	;# 
   740  0F2A                     	;# 
   741  0F2B                     	;# 
   742  0F2C                     	;# 
   743  0F2D                     	;# 
   744  0F2E                     	;# 
   745  0F2F                     	;# 
   746  0F30                     	;# 
   747  0F31                     	;# 
   748  0F32                     	;# 
   749  0F33                     	;# 
   750  0F34                     	;# 
   751  0F35                     	;# 
   752  0F36                     	;# 
   753  0F37                     	;# 
   754  0FE4                     	;# 
   755  0FE5                     	;# 
   756  0FE6                     	;# 
   757  0FE7                     	;# 
   758  0FE8                     	;# 
   759  0FE9                     	;# 
   760  0FEA                     	;# 
   761  0FEB                     	;# 
   762  0FED                     	;# 
   763  0FEE                     	;# 
   764  0FEF                     	;# 
   765  0000                     	;# 
   766  0001                     	;# 
   767  0002                     	;# 
   768  0003                     	;# 
   769  0004                     	;# 
   770  0005                     	;# 
   771  0006                     	;# 
   772  0007                     	;# 
   773  0008                     	;# 
   774  0009                     	;# 
   775  000A                     	;# 
   776  000B                     	;# 
   777  000C                     	;# 
   778  000E                     	;# 
   779  0010                     	;# 
   780  0011                     	;# 
   781  0012                     	;# 
   782  0013                     	;# 
   783  0014                     	;# 
   784  0015                     	;# 
   785  0015                     	;# 
   786  0016                     	;# 
   787  0016                     	;# 
   788  0017                     	;# 
   789  0018                     	;# 
   790  0019                     	;# 
   791  0019                     	;# 
   792  001A                     	;# 
   793  001B                     	;# 
   794  001C                     	;# 
   795  001D                     	;# 
   796  001E                     	;# 
   797  001F                     	;# 
   798  008C                     	;# 
   799  008E                     	;# 
   800  0090                     	;# 
   801  0091                     	;# 
   802  0092                     	;# 
   803  0093                     	;# 
   804  0094                     	;# 
   805  0097                     	;# 
   806  009B                     	;# 
   807  009B                     	;# 
   808  009C                     	;# 
   809  009D                     	;# 
   810  009E                     	;# 
   811  009F                     	;# 
   812  010C                     	;# 
   813  010E                     	;# 
   814  0111                     	;# 
   815  0112                     	;# 
   816  0113                     	;# 
   817  0114                     	;# 
   818  0115                     	;# 
   819  0116                     	;# 
   820  0117                     	;# 
   821  0118                     	;# 
   822  0119                     	;# 
   823  018C                     	;# 
   824  018E                     	;# 
   825  0199                     	;# 
   826  0199                     	;# 
   827  0199                     	;# 
   828  019A                     	;# 
   829  019A                     	;# 
   830  019A                     	;# 
   831  019B                     	;# 
   832  019B                     	;# 
   833  019B                     	;# 
   834  019B                     	;# 
   835  019B                     	;# 
   836  019C                     	;# 
   837  019C                     	;# 
   838  019C                     	;# 
   839  019D                     	;# 
   840  019D                     	;# 
   841  019D                     	;# 
   842  019E                     	;# 
   843  019E                     	;# 
   844  019E                     	;# 
   845  019F                     	;# 
   846  019F                     	;# 
   847  019F                     	;# 
   848  019F                     	;# 
   849  019F                     	;# 
   850  020C                     	;# 
   851  020E                     	;# 
   852  0211                     	;# 
   853  0211                     	;# 
   854  0212                     	;# 
   855  0212                     	;# 
   856  0213                     	;# 
   857  0213                     	;# 
   858  0214                     	;# 
   859  0214                     	;# 
   860  0215                     	;# 
   861  0215                     	;# 
   862  0215                     	;# 
   863  0215                     	;# 
   864  0216                     	;# 
   865  0216                     	;# 
   866  0217                     	;# 
   867  0217                     	;# 
   868  0219                     	;# 
   869  021A                     	;# 
   870  021B                     	;# 
   871  021C                     	;# 
   872  021D                     	;# 
   873  021D                     	;# 
   874  021E                     	;# 
   875  021F                     	;# 
   876  028C                     	;# 
   877  028E                     	;# 
   878  0291                     	;# 
   879  0291                     	;# 
   880  0292                     	;# 
   881  0293                     	;# 
   882  0294                     	;# 
   883  0295                     	;# 
   884  0295                     	;# 
   885  0296                     	;# 
   886  0297                     	;# 
   887  0298                     	;# 
   888  029F                     	;# 
   889  030C                     	;# 
   890  030E                     	;# 
   891  0311                     	;# 
   892  0311                     	;# 
   893  0312                     	;# 
   894  0313                     	;# 
   895  0314                     	;# 
   896  0315                     	;# 
   897  0315                     	;# 
   898  0316                     	;# 
   899  0317                     	;# 
   900  0318                     	;# 
   901  038C                     	;# 
   902  038E                     	;# 
   903  0391                     	;# 
   904  0392                     	;# 
   905  0393                     	;# 
   906  0397                     	;# 
   907  0398                     	;# 
   908  0399                     	;# 
   909  039A                     	;# 
   910  039C                     	;# 
   911  039D                     	;# 
   912  039E                     	;# 
   913  039F                     	;# 
   914  0411                     	;# 
   915  0411                     	;# 
   916  0412                     	;# 
   917  0413                     	;# 
   918  0414                     	;# 
   919  0415                     	;# 
   920  0416                     	;# 
   921  0417                     	;# 
   922  0418                     	;# 
   923  0418                     	;# 
   924  0419                     	;# 
   925  041A                     	;# 
   926  041B                     	;# 
   927  041C                     	;# 
   928  041D                     	;# 
   929  041E                     	;# 
   930  041F                     	;# 
   931  0498                     	;# 
   932  0498                     	;# 
   933  0499                     	;# 
   934  049A                     	;# 
   935  049B                     	;# 
   936  049B                     	;# 
   937  049C                     	;# 
   938  049D                     	;# 
   939  049E                     	;# 
   940  049F                     	;# 
   941  0617                     	;# 
   942  0618                     	;# 
   943  0619                     	;# 
   944  0619                     	;# 
   945  061A                     	;# 
   946  061B                     	;# 
   947  061C                     	;# 
   948  061C                     	;# 
   949  061F                     	;# 
   950  0691                     	;# 
   951  0692                     	;# 
   952  0693                     	;# 
   953  0694                     	;# 
   954  0695                     	;# 
   955  0696                     	;# 
   956  0697                     	;# 
   957  0698                     	;# 
   958  0699                     	;# 
   959  0711                     	;# 
   960  0712                     	;# 
   961  0713                     	;# 
   962  0714                     	;# 
   963  0715                     	;# 
   964  0716                     	;# 
   965  0717                     	;# 
   966  0718                     	;# 
   967  0719                     	;# 
   968  0891                     	;# 
   969  0891                     	;# 
   970  0891                     	;# 
   971  0891                     	;# 
   972  0891                     	;# 
   973  0891                     	;# 
   974  0892                     	;# 
   975  0892                     	;# 
   976  0892                     	;# 
   977  0893                     	;# 
   978  0893                     	;# 
   979  0893                     	;# 
   980  0893                     	;# 
   981  0893                     	;# 
   982  0893                     	;# 
   983  0894                     	;# 
   984  0894                     	;# 
   985  0894                     	;# 
   986  0895                     	;# 
   987  0895                     	;# 
   988  0895                     	;# 
   989  0896                     	;# 
   990  0896                     	;# 
   991  0896                     	;# 
   992  089B                     	;# 
   993  0911                     	;# 
   994  0912                     	;# 
   995  0913                     	;# 
   996  0914                     	;# 
   997  0915                     	;# 
   998  0916                     	;# 
   999  0918                     	;# 
  1000  0919                     	;# 
  1001  091A                     	;# 
  1002  091B                     	;# 
  1003  091C                     	;# 
  1004  091D                     	;# 
  1005  091E                     	;# 
  1006  091F                     	;# 
  1007  0E0F                     	;# 
  1008  0E10                     	;# 
  1009  0E11                     	;# 
  1010  0E12                     	;# 
  1011  0E13                     	;# 
  1012  0E14                     	;# 
  1013  0E15                     	;# 
  1014  0E16                     	;# 
  1015  0E17                     	;# 
  1016  0E18                     	;# 
  1017  0E19                     	;# 
  1018  0E1A                     	;# 
  1019  0E1B                     	;# 
  1020  0E1C                     	;# 
  1021  0E1D                     	;# 
  1022  0E1E                     	;# 
  1023  0E1F                     	;# 
  1024  0E20                     	;# 
  1025  0E21                     	;# 
  1026  0E22                     	;# 
  1027  0E24                     	;# 
  1028  0E25                     	;# 
  1029  0E28                     	;# 
  1030  0E29                     	;# 
  1031  0E2A                     	;# 
  1032  0E2B                     	;# 
  1033  0E2C                     	;# 
  1034  0E2D                     	;# 
  1035  0E2E                     	;# 
  1036  0E2F                     	;# 
  1037  0E90                     	;# 
  1038  0E91                     	;# 
  1039  0E92                     	;# 
  1040  0E94                     	;# 
  1041  0E95                     	;# 
  1042  0EA0                     	;# 
  1043  0EA1                     	;# 
  1044  0EA2                     	;# 
  1045  0EA3                     	;# 
  1046  0EA4                     	;# 
  1047  0EA5                     	;# 
  1048  0F0F                     	;# 
  1049  0F10                     	;# 
  1050  0F11                     	;# 
  1051  0F12                     	;# 
  1052  0F13                     	;# 
  1053  0F14                     	;# 
  1054  0F15                     	;# 
  1055  0F16                     	;# 
  1056  0F17                     	;# 
  1057  0F18                     	;# 
  1058  0F19                     	;# 
  1059  0F1A                     	;# 
  1060  0F1B                     	;# 
  1061  0F1C                     	;# 
  1062  0F1D                     	;# 
  1063  0F1E                     	;# 
  1064  0F1F                     	;# 
  1065  0F20                     	;# 
  1066  0F21                     	;# 
  1067  0F22                     	;# 
  1068  0F23                     	;# 
  1069  0F24                     	;# 
  1070  0F25                     	;# 
  1071  0F26                     	;# 
  1072  0F27                     	;# 
  1073  0F28                     	;# 
  1074  0F29                     	;# 
  1075  0F2A                     	;# 
  1076  0F2B                     	;# 
  1077  0F2C                     	;# 
  1078  0F2D                     	;# 
  1079  0F2E                     	;# 
  1080  0F2F                     	;# 
  1081  0F30                     	;# 
  1082  0F31                     	;# 
  1083  0F32                     	;# 
  1084  0F33                     	;# 
  1085  0F34                     	;# 
  1086  0F35                     	;# 
  1087  0F36                     	;# 
  1088  0F37                     	;# 
  1089  0FE4                     	;# 
  1090  0FE5                     	;# 
  1091  0FE6                     	;# 
  1092  0FE7                     	;# 
  1093  0FE8                     	;# 
  1094  0FE9                     	;# 
  1095  0FEA                     	;# 
  1096  0FEB                     	;# 
  1097  0FED                     	;# 
  1098  0FEE                     	;# 
  1099  0FEF                     	;# 
  1100  0000                     	;# 
  1101  0001                     	;# 
  1102  0002                     	;# 
  1103  0003                     	;# 
  1104  0004                     	;# 
  1105  0005                     	;# 
  1106  0006                     	;# 
  1107  0007                     	;# 
  1108  0008                     	;# 
  1109  0009                     	;# 
  1110  000A                     	;# 
  1111  000B                     	;# 
  1112  000C                     	;# 
  1113  000E                     	;# 
  1114  0010                     	;# 
  1115  0011                     	;# 
  1116  0012                     	;# 
  1117  0013                     	;# 
  1118  0014                     	;# 
  1119  0015                     	;# 
  1120  0015                     	;# 
  1121  0016                     	;# 
  1122  0016                     	;# 
  1123  0017                     	;# 
  1124  0018                     	;# 
  1125  0019                     	;# 
  1126  0019                     	;# 
  1127  001A                     	;# 
  1128  001B                     	;# 
  1129  001C                     	;# 
  1130  001D                     	;# 
  1131  001E                     	;# 
  1132  001F                     	;# 
  1133  008C                     	;# 
  1134  008E                     	;# 
  1135  0090                     	;# 
  1136  0091                     	;# 
  1137  0092                     	;# 
  1138  0093                     	;# 
  1139  0094                     	;# 
  1140  0097                     	;# 
  1141  009B                     	;# 
  1142  009B                     	;# 
  1143  009C                     	;# 
  1144  009D                     	;# 
  1145  009E                     	;# 
  1146  009F                     	;# 
  1147  010C                     	;# 
  1148  010E                     	;# 
  1149  0111                     	;# 
  1150  0112                     	;# 
  1151  0113                     	;# 
  1152  0114                     	;# 
  1153  0115                     	;# 
  1154  0116                     	;# 
  1155  0117                     	;# 
  1156  0118                     	;# 
  1157  0119                     	;# 
  1158  018C                     	;# 
  1159  018E                     	;# 
  1160  0199                     	;# 
  1161  0199                     	;# 
  1162  0199                     	;# 
  1163  019A                     	;# 
  1164  019A                     	;# 
  1165  019A                     	;# 
  1166  019B                     	;# 
  1167  019B                     	;# 
  1168  019B                     	;# 
  1169  019B                     	;# 
  1170  019B                     	;# 
  1171  019C                     	;# 
  1172  019C                     	;# 
  1173  019C                     	;# 
  1174  019D                     	;# 
  1175  019D                     	;# 
  1176  019D                     	;# 
  1177  019E                     	;# 
  1178  019E                     	;# 
  1179  019E                     	;# 
  1180  019F                     	;# 
  1181  019F                     	;# 
  1182  019F                     	;# 
  1183  019F                     	;# 
  1184  019F                     	;# 
  1185  020C                     	;# 
  1186  020E                     	;# 
  1187  0211                     	;# 
  1188  0211                     	;# 
  1189  0212                     	;# 
  1190  0212                     	;# 
  1191  0213                     	;# 
  1192  0213                     	;# 
  1193  0214                     	;# 
  1194  0214                     	;# 
  1195  0215                     	;# 
  1196  0215                     	;# 
  1197  0215                     	;# 
  1198  0215                     	;# 
  1199  0216                     	;# 
  1200  0216                     	;# 
  1201  0217                     	;# 
  1202  0217                     	;# 
  1203  0219                     	;# 
  1204  021A                     	;# 
  1205  021B                     	;# 
  1206  021C                     	;# 
  1207  021D                     	;# 
  1208  021D                     	;# 
  1209  021E                     	;# 
  1210  021F                     	;# 
  1211  028C                     	;# 
  1212  028E                     	;# 
  1213  0291                     	;# 
  1214  0291                     	;# 
  1215  0292                     	;# 
  1216  0293                     	;# 
  1217  0294                     	;# 
  1218  0295                     	;# 
  1219  0295                     	;# 
  1220  0296                     	;# 
  1221  0297                     	;# 
  1222  0298                     	;# 
  1223  029F                     	;# 
  1224  030C                     	;# 
  1225  030E                     	;# 
  1226  0311                     	;# 
  1227  0311                     	;# 
  1228  0312                     	;# 
  1229  0313                     	;# 
  1230  0314                     	;# 
  1231  0315                     	;# 
  1232  0315                     	;# 
  1233  0316                     	;# 
  1234  0317                     	;# 
  1235  0318                     	;# 
  1236  038C                     	;# 
  1237  038E                     	;# 
  1238  0391                     	;# 
  1239  0392                     	;# 
  1240  0393                     	;# 
  1241  0397                     	;# 
  1242  0398                     	;# 
  1243  0399                     	;# 
  1244  039A                     	;# 
  1245  039C                     	;# 
  1246  039D                     	;# 
  1247  039E                     	;# 
  1248  039F                     	;# 
  1249  0411                     	;# 
  1250  0411                     	;# 
  1251  0412                     	;# 
  1252  0413                     	;# 
  1253  0414                     	;# 
  1254  0415                     	;# 
  1255  0416                     	;# 
  1256  0417                     	;# 
  1257  0418                     	;# 
  1258  0418                     	;# 
  1259  0419                     	;# 
  1260  041A                     	;# 
  1261  041B                     	;# 
  1262  041C                     	;# 
  1263  041D                     	;# 
  1264  041E                     	;# 
  1265  041F                     	;# 
  1266  0498                     	;# 
  1267  0498                     	;# 
  1268  0499                     	;# 
  1269  049A                     	;# 
  1270  049B                     	;# 
  1271  049B                     	;# 
  1272  049C                     	;# 
  1273  049D                     	;# 
  1274  049E                     	;# 
  1275  049F                     	;# 
  1276  0617                     	;# 
  1277  0618                     	;# 
  1278  0619                     	;# 
  1279  0619                     	;# 
  1280  061A                     	;# 
  1281  061B                     	;# 
  1282  061C                     	;# 
  1283  061C                     	;# 
  1284  061F                     	;# 
  1285  0691                     	;# 
  1286  0692                     	;# 
  1287  0693                     	;# 
  1288  0694                     	;# 
  1289  0695                     	;# 
  1290  0696                     	;# 
  1291  0697                     	;# 
  1292  0698                     	;# 
  1293  0699                     	;# 
  1294  0711                     	;# 
  1295  0712                     	;# 
  1296  0713                     	;# 
  1297  0714                     	;# 
  1298  0715                     	;# 
  1299  0716                     	;# 
  1300  0717                     	;# 
  1301  0718                     	;# 
  1302  0719                     	;# 
  1303  0891                     	;# 
  1304  0891                     	;# 
  1305  0891                     	;# 
  1306  0891                     	;# 
  1307  0891                     	;# 
  1308  0891                     	;# 
  1309  0892                     	;# 
  1310  0892                     	;# 
  1311  0892                     	;# 
  1312  0893                     	;# 
  1313  0893                     	;# 
  1314  0893                     	;# 
  1315  0893                     	;# 
  1316  0893                     	;# 
  1317  0893                     	;# 
  1318  0894                     	;# 
  1319  0894                     	;# 
  1320  0894                     	;# 
  1321  0895                     	;# 
  1322  0895                     	;# 
  1323  0895                     	;# 
  1324  0896                     	;# 
  1325  0896                     	;# 
  1326  0896                     	;# 
  1327  089B                     	;# 
  1328  0911                     	;# 
  1329  0912                     	;# 
  1330  0913                     	;# 
  1331  0914                     	;# 
  1332  0915                     	;# 
  1333  0916                     	;# 
  1334  0918                     	;# 
  1335  0919                     	;# 
  1336  091A                     	;# 
  1337  091B                     	;# 
  1338  091C                     	;# 
  1339  091D                     	;# 
  1340  091E                     	;# 
  1341  091F                     	;# 
  1342  0E0F                     	;# 
  1343  0E10                     	;# 
  1344  0E11                     	;# 
  1345  0E12                     	;# 
  1346  0E13                     	;# 
  1347  0E14                     	;# 
  1348  0E15                     	;# 
  1349  0E16                     	;# 
  1350  0E17                     	;# 
  1351  0E18                     	;# 
  1352  0E19                     	;# 
  1353  0E1A                     	;# 
  1354  0E1B                     	;# 
  1355  0E1C                     	;# 
  1356  0E1D                     	;# 
  1357  0E1E                     	;# 
  1358  0E1F                     	;# 
  1359  0E20                     	;# 
  1360  0E21                     	;# 
  1361  0E22                     	;# 
  1362  0E24                     	;# 
  1363  0E25                     	;# 
  1364  0E28                     	;# 
  1365  0E29                     	;# 
  1366  0E2A                     	;# 
  1367  0E2B                     	;# 
  1368  0E2C                     	;# 
  1369  0E2D                     	;# 
  1370  0E2E                     	;# 
  1371  0E2F                     	;# 
  1372  0E90                     	;# 
  1373  0E91                     	;# 
  1374  0E92                     	;# 
  1375  0E94                     	;# 
  1376  0E95                     	;# 
  1377  0EA0                     	;# 
  1378  0EA1                     	;# 
  1379  0EA2                     	;# 
  1380  0EA3                     	;# 
  1381  0EA4                     	;# 
  1382  0EA5                     	;# 
  1383  0F0F                     	;# 
  1384  0F10                     	;# 
  1385  0F11                     	;# 
  1386  0F12                     	;# 
  1387  0F13                     	;# 
  1388  0F14                     	;# 
  1389  0F15                     	;# 
  1390  0F16                     	;# 
  1391  0F17                     	;# 
  1392  0F18                     	;# 
  1393  0F19                     	;# 
  1394  0F1A                     	;# 
  1395  0F1B                     	;# 
  1396  0F1C                     	;# 
  1397  0F1D                     	;# 
  1398  0F1E                     	;# 
  1399  0F1F                     	;# 
  1400  0F20                     	;# 
  1401  0F21                     	;# 
  1402  0F22                     	;# 
  1403  0F23                     	;# 
  1404  0F24                     	;# 
  1405  0F25                     	;# 
  1406  0F26                     	;# 
  1407  0F27                     	;# 
  1408  0F28                     	;# 
  1409  0F29                     	;# 
  1410  0F2A                     	;# 
  1411  0F2B                     	;# 
  1412  0F2C                     	;# 
  1413  0F2D                     	;# 
  1414  0F2E                     	;# 
  1415  0F2F                     	;# 
  1416  0F30                     	;# 
  1417  0F31                     	;# 
  1418  0F32                     	;# 
  1419  0F33                     	;# 
  1420  0F34                     	;# 
  1421  0F35                     	;# 
  1422  0F36                     	;# 
  1423  0F37                     	;# 
  1424  0FE4                     	;# 
  1425  0FE5                     	;# 
  1426  0FE6                     	;# 
  1427  0FE7                     	;# 
  1428  0FE8                     	;# 
  1429  0FE9                     	;# 
  1430  0FEA                     	;# 
  1431  0FEB                     	;# 
  1432  0FED                     	;# 
  1433  0FEE                     	;# 
  1434  0FEF                     	;# 
  1435  0000                     	;# 
  1436  0001                     	;# 
  1437  0002                     	;# 
  1438  0003                     	;# 
  1439  0004                     	;# 
  1440  0005                     	;# 
  1441  0006                     	;# 
  1442  0007                     	;# 
  1443  0008                     	;# 
  1444  0009                     	;# 
  1445  000A                     	;# 
  1446  000B                     	;# 
  1447  000C                     	;# 
  1448  000E                     	;# 
  1449  0010                     	;# 
  1450  0011                     	;# 
  1451  0012                     	;# 
  1452  0013                     	;# 
  1453  0014                     	;# 
  1454  0015                     	;# 
  1455  0015                     	;# 
  1456  0016                     	;# 
  1457  0016                     	;# 
  1458  0017                     	;# 
  1459  0018                     	;# 
  1460  0019                     	;# 
  1461  0019                     	;# 
  1462  001A                     	;# 
  1463  001B                     	;# 
  1464  001C                     	;# 
  1465  001D                     	;# 
  1466  001E                     	;# 
  1467  001F                     	;# 
  1468  008C                     	;# 
  1469  008E                     	;# 
  1470  0090                     	;# 
  1471  0091                     	;# 
  1472  0092                     	;# 
  1473  0093                     	;# 
  1474  0094                     	;# 
  1475  0097                     	;# 
  1476  009B                     	;# 
  1477  009B                     	;# 
  1478  009C                     	;# 
  1479  009D                     	;# 
  1480  009E                     	;# 
  1481  009F                     	;# 
  1482  010C                     	;# 
  1483  010E                     	;# 
  1484  0111                     	;# 
  1485  0112                     	;# 
  1486  0113                     	;# 
  1487  0114                     	;# 
  1488  0115                     	;# 
  1489  0116                     	;# 
  1490  0117                     	;# 
  1491  0118                     	;# 
  1492  0119                     	;# 
  1493  018C                     	;# 
  1494  018E                     	;# 
  1495  0199                     	;# 
  1496  0199                     	;# 
  1497  0199                     	;# 
  1498  019A                     	;# 
  1499  019A                     	;# 
  1500  019A                     	;# 
  1501  019B                     	;# 
  1502  019B                     	;# 
  1503  019B                     	;# 
  1504  019B                     	;# 
  1505  019B                     	;# 
  1506  019C                     	;# 
  1507  019C                     	;# 
  1508  019C                     	;# 
  1509  019D                     	;# 
  1510  019D                     	;# 
  1511  019D                     	;# 
  1512  019E                     	;# 
  1513  019E                     	;# 
  1514  019E                     	;# 
  1515  019F                     	;# 
  1516  019F                     	;# 
  1517  019F                     	;# 
  1518  019F                     	;# 
  1519  019F                     	;# 
  1520  020C                     	;# 
  1521  020E                     	;# 
  1522  0211                     	;# 
  1523  0211                     	;# 
  1524  0212                     	;# 
  1525  0212                     	;# 
  1526  0213                     	;# 
  1527  0213                     	;# 
  1528  0214                     	;# 
  1529  0214                     	;# 
  1530  0215                     	;# 
  1531  0215                     	;# 
  1532  0215                     	;# 
  1533  0215                     	;# 
  1534  0216                     	;# 
  1535  0216                     	;# 
  1536  0217                     	;# 
  1537  0217                     	;# 
  1538  0219                     	;# 
  1539  021A                     	;# 
  1540  021B                     	;# 
  1541  021C                     	;# 
  1542  021D                     	;# 
  1543  021D                     	;# 
  1544  021E                     	;# 
  1545  021F                     	;# 
  1546  028C                     	;# 
  1547  028E                     	;# 
  1548  0291                     	;# 
  1549  0291                     	;# 
  1550  0292                     	;# 
  1551  0293                     	;# 
  1552  0294                     	;# 
  1553  0295                     	;# 
  1554  0295                     	;# 
  1555  0296                     	;# 
  1556  0297                     	;# 
  1557  0298                     	;# 
  1558  029F                     	;# 
  1559  030C                     	;# 
  1560  030E                     	;# 
  1561  0311                     	;# 
  1562  0311                     	;# 
  1563  0312                     	;# 
  1564  0313                     	;# 
  1565  0314                     	;# 
  1566  0315                     	;# 
  1567  0315                     	;# 
  1568  0316                     	;# 
  1569  0317                     	;# 
  1570  0318                     	;# 
  1571  038C                     	;# 
  1572  038E                     	;# 
  1573  0391                     	;# 
  1574  0392                     	;# 
  1575  0393                     	;# 
  1576  0397                     	;# 
  1577  0398                     	;# 
  1578  0399                     	;# 
  1579  039A                     	;# 
  1580  039C                     	;# 
  1581  039D                     	;# 
  1582  039E                     	;# 
  1583  039F                     	;# 
  1584  0411                     	;# 
  1585  0411                     	;# 
  1586  0412                     	;# 
  1587  0413                     	;# 
  1588  0414                     	;# 
  1589  0415                     	;# 
  1590  0416                     	;# 
  1591  0417                     	;# 
  1592  0418                     	;# 
  1593  0418                     	;# 
  1594  0419                     	;# 
  1595  041A                     	;# 
  1596  041B                     	;# 
  1597  041C                     	;# 
  1598  041D                     	;# 
  1599  041E                     	;# 
  1600  041F                     	;# 
  1601  0498                     	;# 
  1602  0498                     	;# 
  1603  0499                     	;# 
  1604  049A                     	;# 
  1605  049B                     	;# 
  1606  049B                     	;# 
  1607  049C                     	;# 
  1608  049D                     	;# 
  1609  049E                     	;# 
  1610  049F                     	;# 
  1611  0617                     	;# 
  1612  0618                     	;# 
  1613  0619                     	;# 
  1614  0619                     	;# 
  1615  061A                     	;# 
  1616  061B                     	;# 
  1617  061C                     	;# 
  1618  061C                     	;# 
  1619  061F                     	;# 
  1620  0691                     	;# 
  1621  0692                     	;# 
  1622  0693                     	;# 
  1623  0694                     	;# 
  1624  0695                     	;# 
  1625  0696                     	;# 
  1626  0697                     	;# 
  1627  0698                     	;# 
  1628  0699                     	;# 
  1629  0711                     	;# 
  1630  0712                     	;# 
  1631  0713                     	;# 
  1632  0714                     	;# 
  1633  0715                     	;# 
  1634  0716                     	;# 
  1635  0717                     	;# 
  1636  0718                     	;# 
  1637  0719                     	;# 
  1638  0891                     	;# 
  1639  0891                     	;# 
  1640  0891                     	;# 
  1641  0891                     	;# 
  1642  0891                     	;# 
  1643  0891                     	;# 
  1644  0892                     	;# 
  1645  0892                     	;# 
  1646  0892                     	;# 
  1647  0893                     	;# 
  1648  0893                     	;# 
  1649  0893                     	;# 
  1650  0893                     	;# 
  1651  0893                     	;# 
  1652  0893                     	;# 
  1653  0894                     	;# 
  1654  0894                     	;# 
  1655  0894                     	;# 
  1656  0895                     	;# 
  1657  0895                     	;# 
  1658  0895                     	;# 
  1659  0896                     	;# 
  1660  0896                     	;# 
  1661  0896                     	;# 
  1662  089B                     	;# 
  1663  0911                     	;# 
  1664  0912                     	;# 
  1665  0913                     	;# 
  1666  0914                     	;# 
  1667  0915                     	;# 
  1668  0916                     	;# 
  1669  0918                     	;# 
  1670  0919                     	;# 
  1671  091A                     	;# 
  1672  091B                     	;# 
  1673  091C                     	;# 
  1674  091D                     	;# 
  1675  091E                     	;# 
  1676  091F                     	;# 
  1677  0E0F                     	;# 
  1678  0E10                     	;# 
  1679  0E11                     	;# 
  1680  0E12                     	;# 
  1681  0E13                     	;# 
  1682  0E14                     	;# 
  1683  0E15                     	;# 
  1684  0E16                     	;# 
  1685  0E17                     	;# 
  1686  0E18                     	;# 
  1687  0E19                     	;# 
  1688  0E1A                     	;# 
  1689  0E1B                     	;# 
  1690  0E1C                     	;# 
  1691  0E1D                     	;# 
  1692  0E1E                     	;# 
  1693  0E1F                     	;# 
  1694  0E20                     	;# 
  1695  0E21                     	;# 
  1696  0E22                     	;# 
  1697  0E24                     	;# 
  1698  0E25                     	;# 
  1699  0E28                     	;# 
  1700  0E29                     	;# 
  1701  0E2A                     	;# 
  1702  0E2B                     	;# 
  1703  0E2C                     	;# 
  1704  0E2D                     	;# 
  1705  0E2E                     	;# 
  1706  0E2F                     	;# 
  1707  0E90                     	;# 
  1708  0E91                     	;# 
  1709  0E92                     	;# 
  1710  0E94                     	;# 
  1711  0E95                     	;# 
  1712  0EA0                     	;# 
  1713  0EA1                     	;# 
  1714  0EA2                     	;# 
  1715  0EA3                     	;# 
  1716  0EA4                     	;# 
  1717  0EA5                     	;# 
  1718  0F0F                     	;# 
  1719  0F10                     	;# 
  1720  0F11                     	;# 
  1721  0F12                     	;# 
  1722  0F13                     	;# 
  1723  0F14                     	;# 
  1724  0F15                     	;# 
  1725  0F16                     	;# 
  1726  0F17                     	;# 
  1727  0F18                     	;# 
  1728  0F19                     	;# 
  1729  0F1A                     	;# 
  1730  0F1B                     	;# 
  1731  0F1C                     	;# 
  1732  0F1D                     	;# 
  1733  0F1E                     	;# 
  1734  0F1F                     	;# 
  1735  0F20                     	;# 
  1736  0F21                     	;# 
  1737  0F22                     	;# 
  1738  0F23                     	;# 
  1739  0F24                     	;# 
  1740  0F25                     	;# 
  1741  0F26                     	;# 
  1742  0F27                     	;# 
  1743  0F28                     	;# 
  1744  0F29                     	;# 
  1745  0F2A                     	;# 
  1746  0F2B                     	;# 
  1747  0F2C                     	;# 
  1748  0F2D                     	;# 
  1749  0F2E                     	;# 
  1750  0F2F                     	;# 
  1751  0F30                     	;# 
  1752  0F31                     	;# 
  1753  0F32                     	;# 
  1754  0F33                     	;# 
  1755  0F34                     	;# 
  1756  0F35                     	;# 
  1757  0F36                     	;# 
  1758  0F37                     	;# 
  1759  0FE4                     	;# 
  1760  0FE5                     	;# 
  1761  0FE6                     	;# 
  1762  0FE7                     	;# 
  1763  0FE8                     	;# 
  1764  0FE9                     	;# 
  1765  0FEA                     	;# 
  1766  0FEB                     	;# 
  1767  0FED                     	;# 
  1768  0FEE                     	;# 
  1769  0FEF                     	;# 
  1770  0000                     	;# 
  1771  0001                     	;# 
  1772  0002                     	;# 
  1773  0003                     	;# 
  1774  0004                     	;# 
  1775  0005                     	;# 
  1776  0006                     	;# 
  1777  0007                     	;# 
  1778  0008                     	;# 
  1779  0009                     	;# 
  1780  000A                     	;# 
  1781  000B                     	;# 
  1782  000C                     	;# 
  1783  000E                     	;# 
  1784  0010                     	;# 
  1785  0011                     	;# 
  1786  0012                     	;# 
  1787  0013                     	;# 
  1788  0014                     	;# 
  1789  0015                     	;# 
  1790  0015                     	;# 
  1791  0016                     	;# 
  1792  0016                     	;# 
  1793  0017                     	;# 
  1794  0018                     	;# 
  1795  0019                     	;# 
  1796  0019                     	;# 
  1797  001A                     	;# 
  1798  001B                     	;# 
  1799  001C                     	;# 
  1800  001D                     	;# 
  1801  001E                     	;# 
  1802  001F                     	;# 
  1803  008C                     	;# 
  1804  008E                     	;# 
  1805  0090                     	;# 
  1806  0091                     	;# 
  1807  0092                     	;# 
  1808  0093                     	;# 
  1809  0094                     	;# 
  1810  0097                     	;# 
  1811  009B                     	;# 
  1812  009B                     	;# 
  1813  009C                     	;# 
  1814  009D                     	;# 
  1815  009E                     	;# 
  1816  009F                     	;# 
  1817  010C                     	;# 
  1818  010E                     	;# 
  1819  0111                     	;# 
  1820  0112                     	;# 
  1821  0113                     	;# 
  1822  0114                     	;# 
  1823  0115                     	;# 
  1824  0116                     	;# 
  1825  0117                     	;# 
  1826  0118                     	;# 
  1827  0119                     	;# 
  1828  018C                     	;# 
  1829  018E                     	;# 
  1830  0199                     	;# 
  1831  0199                     	;# 
  1832  0199                     	;# 
  1833  019A                     	;# 
  1834  019A                     	;# 
  1835  019A                     	;# 
  1836  019B                     	;# 
  1837  019B                     	;# 
  1838  019B                     	;# 
  1839  019B                     	;# 
  1840  019B                     	;# 
  1841  019C                     	;# 
  1842  019C                     	;# 
  1843  019C                     	;# 
  1844  019D                     	;# 
  1845  019D                     	;# 
  1846  019D                     	;# 
  1847  019E                     	;# 
  1848  019E                     	;# 
  1849  019E                     	;# 
  1850  019F                     	;# 
  1851  019F                     	;# 
  1852  019F                     	;# 
  1853  019F                     	;# 
  1854  019F                     	;# 
  1855  020C                     	;# 
  1856  020E                     	;# 
  1857  0211                     	;# 
  1858  0211                     	;# 
  1859  0212                     	;# 
  1860  0212                     	;# 
  1861  0213                     	;# 
  1862  0213                     	;# 
  1863  0214                     	;# 
  1864  0214                     	;# 
  1865  0215                     	;# 
  1866  0215                     	;# 
  1867  0215                     	;# 
  1868  0215                     	;# 
  1869  0216                     	;# 
  1870  0216                     	;# 
  1871  0217                     	;# 
  1872  0217                     	;# 
  1873  0219                     	;# 
  1874  021A                     	;# 
  1875  021B                     	;# 
  1876  021C                     	;# 
  1877  021D                     	;# 
  1878  021D                     	;# 
  1879  021E                     	;# 
  1880  021F                     	;# 
  1881  028C                     	;# 
  1882  028E                     	;# 
  1883  0291                     	;# 
  1884  0291                     	;# 
  1885  0292                     	;# 
  1886  0293                     	;# 
  1887  0294                     	;# 
  1888  0295                     	;# 
  1889  0295                     	;# 
  1890  0296                     	;# 
  1891  0297                     	;# 
  1892  0298                     	;# 
  1893  029F                     	;# 
  1894  030C                     	;# 
  1895  030E                     	;# 
  1896  0311                     	;# 
  1897  0311                     	;# 
  1898  0312                     	;# 
  1899  0313                     	;# 
  1900  0314                     	;# 
  1901  0315                     	;# 
  1902  0315                     	;# 
  1903  0316                     	;# 
  1904  0317                     	;# 
  1905  0318                     	;# 
  1906  038C                     	;# 
  1907  038E                     	;# 
  1908  0391                     	;# 
  1909  0392                     	;# 
  1910  0393                     	;# 
  1911  0397                     	;# 
  1912  0398                     	;# 
  1913  0399                     	;# 
  1914  039A                     	;# 
  1915  039C                     	;# 
  1916  039D                     	;# 
  1917  039E                     	;# 
  1918  039F                     	;# 
  1919  0411                     	;# 
  1920  0411                     	;# 
  1921  0412                     	;# 
  1922  0413                     	;# 
  1923  0414                     	;# 
  1924  0415                     	;# 
  1925  0416                     	;# 
  1926  0417                     	;# 
  1927  0418                     	;# 
  1928  0418                     	;# 
  1929  0419                     	;# 
  1930  041A                     	;# 
  1931  041B                     	;# 
  1932  041C                     	;# 
  1933  041D                     	;# 
  1934  041E                     	;# 
  1935  041F                     	;# 
  1936  0498                     	;# 
  1937  0498                     	;# 
  1938  0499                     	;# 
  1939  049A                     	;# 
  1940  049B                     	;# 
  1941  049B                     	;# 
  1942  049C                     	;# 
  1943  049D                     	;# 
  1944  049E                     	;# 
  1945  049F                     	;# 
  1946  0617                     	;# 
  1947  0618                     	;# 
  1948  0619                     	;# 
  1949  0619                     	;# 
  1950  061A                     	;# 
  1951  061B                     	;# 
  1952  061C                     	;# 
  1953  061C                     	;# 
  1954  061F                     	;# 
  1955  0691                     	;# 
  1956  0692                     	;# 
  1957  0693                     	;# 
  1958  0694                     	;# 
  1959  0695                     	;# 
  1960  0696                     	;# 
  1961  0697                     	;# 
  1962  0698                     	;# 
  1963  0699                     	;# 
  1964  0711                     	;# 
  1965  0712                     	;# 
  1966  0713                     	;# 
  1967  0714                     	;# 
  1968  0715                     	;# 
  1969  0716                     	;# 
  1970  0717                     	;# 
  1971  0718                     	;# 
  1972  0719                     	;# 
  1973  0891                     	;# 
  1974  0891                     	;# 
  1975  0891                     	;# 
  1976  0891                     	;# 
  1977  0891                     	;# 
  1978  0891                     	;# 
  1979  0892                     	;# 
  1980  0892                     	;# 
  1981  0892                     	;# 
  1982  0893                     	;# 
  1983  0893                     	;# 
  1984  0893                     	;# 
  1985  0893                     	;# 
  1986  0893                     	;# 
  1987  0893                     	;# 
  1988  0894                     	;# 
  1989  0894                     	;# 
  1990  0894                     	;# 
  1991  0895                     	;# 
  1992  0895                     	;# 
  1993  0895                     	;# 
  1994  0896                     	;# 
  1995  0896                     	;# 
  1996  0896                     	;# 
  1997  089B                     	;# 
  1998  0911                     	;# 
  1999  0912                     	;# 
  2000  0913                     	;# 
  2001  0914                     	;# 
  2002  0915                     	;# 
  2003  0916                     	;# 
  2004  0918                     	;# 
  2005  0919                     	;# 
  2006  091A                     	;# 
  2007  091B                     	;# 
  2008  091C                     	;# 
  2009  091D                     	;# 
  2010  091E                     	;# 
  2011  091F                     	;# 
  2012  0E0F                     	;# 
  2013  0E10                     	;# 
  2014  0E11                     	;# 
  2015  0E12                     	;# 
  2016  0E13                     	;# 
  2017  0E14                     	;# 
  2018  0E15                     	;# 
  2019  0E16                     	;# 
  2020  0E17                     	;# 
  2021  0E18                     	;# 
  2022  0E19                     	;# 
  2023  0E1A                     	;# 
  2024  0E1B                     	;# 
  2025  0E1C                     	;# 
  2026  0E1D                     	;# 
  2027  0E1E                     	;# 
  2028  0E1F                     	;# 
  2029  0E20                     	;# 
  2030  0E21                     	;# 
  2031  0E22                     	;# 
  2032  0E24                     	;# 
  2033  0E25                     	;# 
  2034  0E28                     	;# 
  2035  0E29                     	;# 
  2036  0E2A                     	;# 
  2037  0E2B                     	;# 
  2038  0E2C                     	;# 
  2039  0E2D                     	;# 
  2040  0E2E                     	;# 
  2041  0E2F                     	;# 
  2042  0E90                     	;# 
  2043  0E91                     	;# 
  2044  0E92                     	;# 
  2045  0E94                     	;# 
  2046  0E95                     	;# 
  2047  0EA0                     	;# 
  2048  0EA1                     	;# 
  2049  0EA2                     	;# 
  2050  0EA3                     	;# 
  2051  0EA4                     	;# 
  2052  0EA5                     	;# 
  2053  0F0F                     	;# 
  2054  0F10                     	;# 
  2055  0F11                     	;# 
  2056  0F12                     	;# 
  2057  0F13                     	;# 
  2058  0F14                     	;# 
  2059  0F15                     	;# 
  2060  0F16                     	;# 
  2061  0F17                     	;# 
  2062  0F18                     	;# 
  2063  0F19                     	;# 
  2064  0F1A                     	;# 
  2065  0F1B                     	;# 
  2066  0F1C                     	;# 
  2067  0F1D                     	;# 
  2068  0F1E                     	;# 
  2069  0F1F                     	;# 
  2070  0F20                     	;# 
  2071  0F21                     	;# 
  2072  0F22                     	;# 
  2073  0F23                     	;# 
  2074  0F24                     	;# 
  2075  0F25                     	;# 
  2076  0F26                     	;# 
  2077  0F27                     	;# 
  2078  0F28                     	;# 
  2079  0F29                     	;# 
  2080  0F2A                     	;# 
  2081  0F2B                     	;# 
  2082  0F2C                     	;# 
  2083  0F2D                     	;# 
  2084  0F2E                     	;# 
  2085  0F2F                     	;# 
  2086  0F30                     	;# 
  2087  0F31                     	;# 
  2088  0F32                     	;# 
  2089  0F33                     	;# 
  2090  0F34                     	;# 
  2091  0F35                     	;# 
  2092  0F36                     	;# 
  2093  0F37                     	;# 
  2094  0FE4                     	;# 
  2095  0FE5                     	;# 
  2096  0FE6                     	;# 
  2097  0FE7                     	;# 
  2098  0FE8                     	;# 
  2099  0FE9                     	;# 
  2100  0FEA                     	;# 
  2101  0FEB                     	;# 
  2102  0FED                     	;# 
  2103  0FEE                     	;# 
  2104  0FEF                     	;# 
  2105  1FE0                     _romArray_absaddr	set	8160
  2106                           
  2107                           	psect	stringtext1
  2108  0731                     __pstringtext1:	
  2109  0731                     _resetRomData:	
  2110  0731  34AA               	retlw	170
  2111  0732  3455               	retlw	85
  2112  0733  346E               	retlw	110
  2113  0734  3463               	retlw	99
  2114  0735  346F               	retlw	111
  2115  0736  346E               	retlw	110
  2116  0737  3466               	retlw	102
  2117  0738  3469               	retlw	105
  2118  0739  3467               	retlw	103
  2119  073A  3475               	retlw	117
  2120  073B  3472               	retlw	114
  2121  073C  3465               	retlw	101
  2122  073D  3464               	retlw	100
  2123  073E  3400               	retlw	0
  2124  073F  3400               	retlw	0
  2125  0740  3400               	retlw	0
  2126  0741  3400               	retlw	0
  2127  0742  3400               	retlw	0
  2128  0743  3400               	retlw	0
  2129  0744                     __end_of_resetRomData:	
  2130                           
  2131                           	psect	stringtext2
  2132  0792                     __pstringtext2:	
  2133  0792                     _n_ADDRESS_P0:	
  2134  0792  34AD               	retlw	173
  2135  0793  3487               	retlw	135
  2136  0794  3466               	retlw	102
  2137  0795  34BC               	retlw	188
  2138  0796  34BB               	retlw	187
  2139  0797                     __end_of_n_ADDRESS_P0:	
  2140                           
  2141                           	psect	stringtext3
  2142  07B6                     __pstringtext3:	
  2143  07B6                     _n_ADDRESS_MUL:	
  2144  07B6  3421               	retlw	33
  2145  07B7                     __end_of_n_ADDRESS_MUL:	
  2146  1FE0                     _romArray_absaddr	set	8160
  2147                           
  2148                           	psect	_romArray_text
  2149  1FE0                     __p_romArray_text:	
  2150  1FE0                     _romArray:	
  2151  1FE0  3400               	retlw	0
  2152  1FE1  3400               	retlw	0
  2153  1FE2  3400               	retlw	0
  2154  1FE3  3400               	retlw	0
  2155  1FE4  3400               	retlw	0
  2156  1FE5  3400               	retlw	0
  2157  1FE6  3400               	retlw	0
  2158  1FE7  3400               	retlw	0
  2159  1FE8  3400               	retlw	0
  2160  1FE9  3400               	retlw	0
  2161  1FEA  3400               	retlw	0
  2162  1FEB  3400               	retlw	0
  2163  1FEC  3400               	retlw	0
  2164  1FED  3400               	retlw	0
  2165  1FEE  3400               	retlw	0
  2166  1FEF  3400               	retlw	0
  2167  1FF0  3400               	retlw	0
  2168  1FF1  3400               	retlw	0
  2169  1FF2  3400               	retlw	0
  2170  1FF3  3400               	retlw	0
  2171  1FF4  3400               	retlw	0
  2172  1FF5  3400               	retlw	0
  2173  1FF6  3400               	retlw	0
  2174  1FF7  3400               	retlw	0
  2175  1FF8  3400               	retlw	0
  2176  1FF9  3400               	retlw	0
  2177  1FFA  3400               	retlw	0
  2178  1FFB  3400               	retlw	0
  2179  1FFC  3400               	retlw	0
  2180  1FFD  3400               	retlw	0
  2181  1FFE  3400               	retlw	0
  2182  1FFF  3400               	retlw	0
  2183  2000                     __end_of_romArray:	
  2184  0003                     _STATUSbits	set	3
  2185  0010                     _PIR0bits	set	16
  2186  000E                     _PORTCbits	set	14
  2187  000C                     _PORTAbits	set	12
  2188  000B                     _INTCONbits	set	11
  2189  0097                     _WDTCONbits	set	151
  2190  009E                     _ADCON1bits	set	158
  2191  009C                     _ADRESH	set	156
  2192  009B                     _ADRESL	set	155
  2193  009D                     _ADCON0bits	set	157
  2194  0090                     _PIE0bits	set	144
  2195  008E                     _TRISCbits	set	142
  2196  008C                     _TRISAbits	set	140
  2197  0117                     _FVRCONbits	set	279
  2198  018E                     _ANSELCbits	set	398
  2199  018C                     _ANSELAbits	set	396
  2200  018E                     _ANSELC	set	398
  2201  018C                     _ANSELA	set	396
  2202  020C                     _WPUAbits	set	524
  2203  0211                     _SSP1BUF	set	529
  2204  0214                     _SSP1STATbits	set	532
  2205  0215                     _SSP1CON1bits	set	533
  2206  028E                     _ODCONC	set	654
  2207  028C                     _ODCONA	set	652
  2208  030E                     _SLRCONC	set	782
  2209  030C                     _SLRCONA	set	780
  2210  038E                     _INLVLC	set	910
  2211  038C                     _INLVLA	set	908
  2212  0894                     _PMDATH	set	2196
  2213  0893                     _PMDATL	set	2195
  2214  0896                     _PMCON2	set	2198
  2215  0895                     _PMCON1bits	set	2197
  2216  0892                     _PMADRH	set	2194
  2217  0891                     _PMADRL	set	2193
  2218  0895                     _PMCON1	set	2197
  2219  0E92                     _RA2PPSbits	set	3730
  2220  0EA0                     _RC0PPSbits	set	3744
  2221  0EA2                     _RC2PPSbits	set	3746
  2222  0EA1                     _RC1PPSbits	set	3745
  2223                           
  2224                           	psect	stringtext4
  2225  0744                     __pstringtext4:	
  2226  0744                     STR_6:	
  2227  0744  3455               	retlw	85	;'U'
  2228  0745  346E               	retlw	110	;'n'
  2229  0746  3463               	retlw	99	;'c'
  2230  0747  346F               	retlw	111	;'o'
  2231  0748  346E               	retlw	110	;'n'
  2232  0749  3466               	retlw	102	;'f'
  2233  074A  3469               	retlw	105	;'i'
  2234  074B  3467               	retlw	103	;'g'
  2235  074C  3475               	retlw	117	;'u'
  2236  074D  3472               	retlw	114	;'r'
  2237  074E  3465               	retlw	101	;'e'
  2238  074F  3464               	retlw	100	;'d'
  2239  0750  3448               	retlw	72	;'H'
  2240  0751  3431               	retlw	49	;'1'
  2241  0752  3400               	retlw	0
  2242                           
  2243                           	psect	stringtext5
  2244  0780                     __pstringtext5:	
  2245  0780                     STR_5:	
  2246  0780  3441               	retlw	65	;'A'
  2247  0781  3444               	retlw	68	;'D'
  2248  0782  3443               	retlw	67	;'C'
  2249  0783  3433               	retlw	51	;'3'
  2250  0784  3431               	retlw	49	;'1'
  2251  0785  3400               	retlw	0
  2252                           
  2253                           	psect	stringtext6
  2254  0786                     __pstringtext6:	
  2255  0786                     STR_4:	
  2256  0786  3441               	retlw	65	;'A'
  2257  0787  3444               	retlw	68	;'D'
  2258  0788  3443               	retlw	67	;'C'
  2259  0789  3432               	retlw	50	;'2'
  2260  078A  3439               	retlw	57	;'9'
  2261  078B  3400               	retlw	0
  2262                           
  2263                           	psect	stringtext7
  2264  0797                     __pstringtext7:	
  2265  0797                     STR_2:	
  2266  0797  3441               	retlw	65	;'A'
  2267  0798  3444               	retlw	68	;'D'
  2268  0799  3443               	retlw	67	;'C'
  2269  079A  3433               	retlw	51	;'3'
  2270  079B  3400               	retlw	0
  2271                           
  2272                           	psect	stringtext8
  2273  079C                     __pstringtext8:	
  2274  079C                     STR_3:	
  2275  079C  3441               	retlw	65	;'A'
  2276  079D  3444               	retlw	68	;'D'
  2277  079E  3443               	retlw	67	;'C'
  2278  079F  3437               	retlw	55	;'7'
  2279  07A0  3400               	retlw	0
  2280                           
  2281                           	psect	stringtext9
  2282  07A1                     __pstringtext9:	
  2283  07A1                     STR_7:	
  2284  07A1  3442               	retlw	66	;'B'
  2285  07A2  344F               	retlw	79	;'O'
  2286  07A3  344F               	retlw	79	;'O'
  2287  07A4  3454               	retlw	84	;'T'
  2288  07A5  3400               	retlw	0
  2289                           
  2290                           	psect	stringtext10
  2291  07A6                     __pstringtext10:	
  2292  07A6                     STR_1:	
  2293  07A6  3444               	retlw	68	;'D'
  2294  07A7  3442               	retlw	66	;'B'
  2295  07A8  3447               	retlw	71	;'G'
  2296  07A9  3400               	retlw	0
  2297                           
  2298                           	psect	stringtext11
  2299  0000                     __pstringtext11:	
  2300                           
  2301                           ; #config settings
  2302  0000                     
  2303                           	psect	cinit
  2304  0011                     start_initialization:	
  2305  0011                     __initialization:	
  2306                           
  2307                           ; Clear objects allocated to BANK0
  2308  0011  3047               	movlw	low __pbssBANK0
  2309  0012  0084               	movwf	4
  2310  0013  3000               	movlw	high __pbssBANK0
  2311  0014  0085               	movwf	5
  2312  0015  3026               	movlw	38
  2313  0016  3187  278C  3180   	fcall	clear_ram0
  2314                           
  2315                           ; Clear objects allocated to BANK1
  2316  0019  30A0               	movlw	low __pbssBANK1
  2317  001A  0084               	movwf	4
  2318  001B  3000               	movlw	high __pbssBANK1
  2319  001C  0085               	movwf	5
  2320  001D  3033               	movlw	51
  2321  001E  3187  278C  3180   	fcall	clear_ram0
  2322                           
  2323                           ; Clear objects allocated to BANK2
  2324  0021  3020               	movlw	low __pbssBANK2
  2325  0022  0084               	movwf	4
  2326  0023  3001               	movlw	high __pbssBANK2
  2327  0024  0085               	movwf	5
  2328  0025  3020               	movlw	32
  2329  0026  3187  278C         	fcall	clear_ram0
  2330  0028                     end_of_initialization:	
  2331                           ;End of C runtime variable initialization code
  2332                           
  2333  0028                     __end_of__initialization:	
  2334  0028  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  2335  0029  0020               	movlb	0
  2336  002A  3182  2A55         	ljmp	_main	;jump to C main() function
  2337                           
  2338                           	psect	bssBANK0
  2339  0047                     __pbssBANK0:	
  2340  0047                     _counter:	
  2341  0047                     	ds	2
  2342  0049                     _nrf24l01RXPacketData:	
  2343  0049                     	ds	1
  2344  004A                     _sleepLoop:	
  2345  004A                     	ds	1
  2346  004B                     _nrf24l01:	
  2347  004B                     	ds	1
  2348  004C                     _nrf24l01TXPacketData:	
  2349  004C                     	ds	1
  2350  004D                     _nrf24l01RXValue:	
  2351  004D                     	ds	8
  2352  0055                     _nrf24l01RXTopic:	
  2353  0055                     	ds	8
  2354  005D                     _nrf24l01TXValue:	
  2355  005D                     	ds	8
  2356  0065                     _nrf24l01TXTopic:	
  2357  0065                     	ds	8
  2358                           
  2359                           	psect	bssBANK1
  2360  00A0                     __pbssBANK1:	
  2361  00A0                     _romData:	
  2362  00A0                     	ds	19
  2363  00B3                     _nrf24l01RXName:	
  2364  00B3                     	ds	16
  2365  00C3                     _nrf24l01TXName:	
  2366  00C3                     	ds	16
  2367                           
  2368                           	psect	bssBANK2
  2369  0120                     __pbssBANK2:	
  2370  0120                     _romHolder:	
  2371  0120                     	ds	32
  2372                           
  2373                           	psect	clrtext
  2374  078C                     clear_ram0:	
  2375                           ;	Called with FSR0 containing the base address, and
  2376                           ;	WREG with the size to clear
  2377                           
  2378  078C  0064               	clrwdt	;clear the watchdog before getting into this loop
  2379  078D                     clrloop0:	
  2380  078D  0180               	clrf	0	;clear RAM location pointed to by FSR
  2381  078E  3101               	addfsr 0,1
  2382  078F  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  2383  0790  2F8D               	goto	clrloop0	;have we reached the end yet?
  2384  0791  3400               	retlw	0	;all done for this memory range, return
  2385                           
  2386                           	psect	cstackCOMMON
  2387  0070                     __pcstackCOMMON:	
  2388  0070                     ?_nrf24l01ISR:	
  2389  0070                     ?_nrf24l01SetRXMode:	
  2390                           ; 1 bytes @ 0x0
  2391                           
  2392  0070                     ?_nrf24l01SendString:	
  2393                           ; 1 bytes @ 0x0
  2394                           
  2395  0070                     ?_nrf24l01Init:	
  2396                           ; 1 bytes @ 0x0
  2397                           
  2398  0070                     ?_flashRealod:	
  2399                           ; 1 bytes @ 0x0
  2400                           
  2401  0070                     ?_flashUpdate:	
  2402                           ; 1 bytes @ 0x0
  2403                           
  2404  0070                     ?_nrf24l01CELow:	
  2405                           ; 1 bytes @ 0x0
  2406                           
  2407  0070                     ??_nrf24l01CELow:	
  2408                           ; 1 bytes @ 0x0
  2409                           
  2410  0070                     ?_nrf24l01CEHigh:	
  2411                           ; 1 bytes @ 0x0
  2412                           
  2413  0070                     ??_nrf24l01CEHigh:	
  2414                           ; 1 bytes @ 0x0
  2415                           
  2416  0070                     ?_nrf24l01CSLow:	
  2417                           ; 1 bytes @ 0x0
  2418                           
  2419  0070                     ??_nrf24l01CSLow:	
  2420                           ; 1 bytes @ 0x0
  2421                           
  2422  0070                     ?_nrf24l01CSHigh:	
  2423                           ; 1 bytes @ 0x0
  2424                           
  2425  0070                     ??_nrf24l01CSHigh:	
  2426                           ; 1 bytes @ 0x0
  2427                           
  2428  0070                     ?_nrf24l01InterfaceInit:	
  2429                           ; 1 bytes @ 0x0
  2430                           
  2431  0070                     ?_nrf24l01SPISend:	
  2432                           ; 1 bytes @ 0x0
  2433                           
  2434  0070                     ??_nrf24l01SPISend:	
  2435                           ; 1 bytes @ 0x0
  2436                           
  2437  0070                     ?_nrf24l01SPIStart:	
  2438                           ; 1 bytes @ 0x0
  2439                           
  2440  0070                     ??_nrf24l01SPIStart:	
  2441                           ; 1 bytes @ 0x0
  2442                           
  2443  0070                     ?_nrf24l01SPIEnd:	
  2444                           ; 1 bytes @ 0x0
  2445                           
  2446  0070                     ??_nrf24l01SPIEnd:	
  2447                           ; 1 bytes @ 0x0
  2448                           
  2449  0070                     ?_enableInterrupts:	
  2450                           ; 1 bytes @ 0x0
  2451                           
  2452  0070                     ??_enableInterrupts:	
  2453                           ; 1 bytes @ 0x0
  2454                           
  2455  0070                     ?_exception:	
  2456                           ; 1 bytes @ 0x0
  2457                           
  2458  0070                     ?_ISR:	
  2459                           ; 1 bytes @ 0x0
  2460                           
  2461  0070                     ?_sleep:	
  2462                           ; 1 bytes @ 0x0
  2463                           
  2464  0070                     ?_loop:	
  2465                           ; 1 bytes @ 0x0
  2466                           
  2467  0070                     ?_main:	
  2468                           ; 1 bytes @ 0x0
  2469                           
  2470  0070                     ?_nrf24l01InitRegisters:	
  2471                           ; 1 bytes @ 0x0
  2472                           
  2473  0070                     ?i1_flashWriteByte:	
  2474                           ; 1 bytes @ 0x0
  2475                           
  2476  0070                     ?i1_flashUpdate:	
  2477                           ; 1 bytes @ 0x0
  2478                           
  2479  0070                     ?i1_nrf24l01SetRXMode:	
  2480                           ; 1 bytes @ 0x0
  2481                           
  2482  0070                     ?___wmul:	
  2483                           ; 1 bytes @ 0x0
  2484                           
  2485  0070                     nrf24l01SPISend@data:	
  2486                           ; 2 bytes @ 0x0
  2487                           
  2488  0070                     enableInterrupts@enable:	
  2489                           ; 1 bytes @ 0x0
  2490                           
  2491  0070                     nrf24l01InitRegisters@isReciever:	
  2492                           ; 1 bytes @ 0x0
  2493                           
  2494  0070                     ___wmul@multiplier:	
  2495                           ; 1 bytes @ 0x0
  2496                           
  2497  0070                     i1flashWriteByte@offset:	
  2498                           ; 2 bytes @ 0x0
  2499                           
  2500                           
  2501                           ; 2 bytes @ 0x0
  2502  0070                     	ds	1
  2503  0071                     ?i1_nrf24l01Send:	
  2504  0071                     i1nrf24l01Send@data:	
  2505                           ; 1 bytes @ 0x1
  2506                           
  2507                           
  2508                           ; 1 bytes @ 0x1
  2509  0071                     	ds	1
  2510  0072                     ??i1_nrf24l01Send:	
  2511  0072                     ___wmul@multiplicand:	
  2512                           ; 1 bytes @ 0x2
  2513                           
  2514  0072                     i1flashWriteByte@data:	
  2515                           ; 2 bytes @ 0x2
  2516                           
  2517                           
  2518                           ; 2 bytes @ 0x2
  2519  0072                     	ds	1
  2520  0073                     i1nrf24l01Send@command:	
  2521                           
  2522                           ; 1 bytes @ 0x3
  2523  0073                     	ds	1
  2524  0074                     ??___wmul:	
  2525  0074                     ??i1_flashWriteByte:	
  2526                           ; 1 bytes @ 0x4
  2527                           
  2528  0074                     ??i1_nrf24l01SetRXMode:	
  2529                           ; 1 bytes @ 0x4
  2530                           
  2531  0074                     ___wmul@product:	
  2532                           ; 1 bytes @ 0x4
  2533                           
  2534  0074                     i1flashWriteByte@address:	
  2535                           ; 2 bytes @ 0x4
  2536                           
  2537                           
  2538                           ; 2 bytes @ 0x4
  2539  0074                     	ds	1
  2540  0075                     i1nrf24l01SetRXMode@config:	
  2541                           
  2542                           ; 1 bytes @ 0x5
  2543  0075                     	ds	1
  2544  0076                     ??i1_flashUpdate:	
  2545  0076                     i1nrf24l01SetRXMode@rxMode:	
  2546                           ; 1 bytes @ 0x6
  2547                           
  2548                           
  2549                           ; 1 bytes @ 0x6
  2550  0076                     	ds	2
  2551  0078                     i1flashUpdate@i:	
  2552                           
  2553                           ; 2 bytes @ 0x8
  2554  0078                     	ds	2
  2555  007A                     ??_exception:	
  2556                           
  2557                           ; 1 bytes @ 0xA
  2558  007A                     	ds	2
  2559  007C                     exception@exception:	
  2560                           
  2561                           ; 1 bytes @ 0xC
  2562  007C                     	ds	1
  2563  007D                     ??_nrf24l01ISR:	
  2564                           
  2565                           ; 1 bytes @ 0xD
  2566  007D                     	ds	1
  2567  007E                     ??_ISR:	
  2568                           
  2569                           	psect	cstackBANK0
  2570  0020                     __pcstackBANK0:	
  2571                           ; 1 bytes @ 0xE
  2572                           
  2573  0020                     nrf24l01ISR@status:	
  2574                           
  2575                           ; 1 bytes @ 0x0
  2576  0020                     	ds	1
  2577  0021                     ?_strcpy:	
  2578  0021                     ?_flashWriteByte:	
  2579                           ; 1 bytes @ 0x1
  2580                           
  2581  0021                     ??_nrf24l01InterfaceInit:	
  2582                           ; 1 bytes @ 0x1
  2583                           
  2584  0021                     ??_sleep:	
  2585                           ; 1 bytes @ 0x1
  2586                           
  2587  0021                     ?_nrf24l01Send:	
  2588                           ; 1 bytes @ 0x1
  2589                           
  2590  0021                     ?_flashReadByte:	
  2591                           ; 1 bytes @ 0x1
  2592                           
  2593  0021                     ?___lwdiv:	
  2594                           ; 2 bytes @ 0x1
  2595                           
  2596  0021                     ?___lwmod:	
  2597                           ; 2 bytes @ 0x1
  2598                           
  2599  0021                     ?___lmul:	
  2600                           ; 2 bytes @ 0x1
  2601                           
  2602  0021                     ?___lldiv:	
  2603                           ; 4 bytes @ 0x1
  2604                           
  2605  0021                     nrf24l01Send@data:	
  2606                           ; 4 bytes @ 0x1
  2607                           
  2608  0021                     flashWriteByte@offset:	
  2609                           ; 1 bytes @ 0x1
  2610                           
  2611  0021                     flashReadByte@offset:	
  2612                           ; 2 bytes @ 0x1
  2613                           
  2614  0021                     ___lwdiv@divisor:	
  2615                           ; 2 bytes @ 0x1
  2616                           
  2617  0021                     ___lwmod@divisor:	
  2618                           ; 2 bytes @ 0x1
  2619                           
  2620  0021                     strcpy@from:	
  2621                           ; 2 bytes @ 0x1
  2622                           
  2623  0021                     ___lmul@multiplier:	
  2624                           ; 2 bytes @ 0x1
  2625                           
  2626  0021                     ___lldiv@divisor:	
  2627                           ; 4 bytes @ 0x1
  2628                           
  2629                           
  2630                           ; 4 bytes @ 0x1
  2631  0021                     	ds	1
  2632  0022                     ??_nrf24l01Send:	
  2633                           
  2634                           ; 1 bytes @ 0x2
  2635  0022                     	ds	1
  2636  0023                     ??_strcpy:	
  2637  0023                     ??_flashReadByte:	
  2638                           ; 1 bytes @ 0x3
  2639                           
  2640  0023                     nrf24l01Send@command:	
  2641                           ; 1 bytes @ 0x3
  2642                           
  2643  0023                     flashWriteByte@data:	
  2644                           ; 1 bytes @ 0x3
  2645                           
  2646  0023                     ___lwdiv@dividend:	
  2647                           ; 2 bytes @ 0x3
  2648                           
  2649  0023                     ___lwmod@dividend:	
  2650                           ; 2 bytes @ 0x3
  2651                           
  2652                           
  2653                           ; 2 bytes @ 0x3
  2654  0023                     	ds	1
  2655  0024                     ??_nrf24l01SetRXMode:	
  2656  0024                     ??_nrf24l01InitRegisters:	
  2657                           ; 1 bytes @ 0x4
  2658                           
  2659  0024                     strcpy@cp:	
  2660                           ; 1 bytes @ 0x4
  2661                           
  2662                           
  2663                           ; 1 bytes @ 0x4
  2664  0024                     	ds	1
  2665  0025                     ??_flashWriteByte:	
  2666  0025                     ??___lwdiv:	
  2667                           ; 1 bytes @ 0x5
  2668                           
  2669  0025                     ??___lwmod:	
  2670                           ; 1 bytes @ 0x5
  2671                           
  2672  0025                     nrf24l01SetRXMode@config:	
  2673                           ; 1 bytes @ 0x5
  2674                           
  2675  0025                     nrf24l01InitRegisters@setupAW:	
  2676                           ; 1 bytes @ 0x5
  2677                           
  2678  0025                     strcpy@to:	
  2679                           ; 1 bytes @ 0x5
  2680                           
  2681  0025                     flashWriteByte@address:	
  2682                           ; 1 bytes @ 0x5
  2683                           
  2684  0025                     ___lmul@multiplicand:	
  2685                           ; 2 bytes @ 0x5
  2686                           
  2687  0025                     ___lldiv@dividend:	
  2688                           ; 4 bytes @ 0x5
  2689                           
  2690                           
  2691                           ; 4 bytes @ 0x5
  2692  0025                     	ds	1
  2693  0026                     nrf24l01SetRXMode@rxMode:	
  2694  0026                     nrf24l01InitRegisters@rfSetup:	
  2695                           ; 1 bytes @ 0x6
  2696                           
  2697  0026                     ___lwmod@counter:	
  2698                           ; 1 bytes @ 0x6
  2699                           
  2700  0026                     flashReadByte@result:	
  2701                           ; 1 bytes @ 0x6
  2702                           
  2703  0026                     ___lwdiv@quotient:	
  2704                           ; 2 bytes @ 0x6
  2705                           
  2706                           
  2707                           ; 2 bytes @ 0x6
  2708  0026                     	ds	1
  2709  0027                     ??_nrf24l01SendString:	
  2710  0027                     ??_flashUpdate:	
  2711                           ; 1 bytes @ 0x7
  2712                           
  2713  0027                     nrf24l01InitRegisters@feature:	
  2714                           ; 1 bytes @ 0x7
  2715                           
  2716                           
  2717                           ; 1 bytes @ 0x7
  2718  0027                     	ds	1
  2719  0028                     nrf24l01SendString@i:	
  2720  0028                     nrf24l01InitRegisters@status:	
  2721                           ; 1 bytes @ 0x8
  2722                           
  2723  0028                     ___lwdiv@counter:	
  2724                           ; 1 bytes @ 0x8
  2725                           
  2726  0028                     flashReadByte@address:	
  2727                           ; 1 bytes @ 0x8
  2728                           
  2729                           
  2730                           ; 2 bytes @ 0x8
  2731  0028                     	ds	1
  2732  0029                     ??___lmul:	
  2733  0029                     ??___lldiv:	
  2734                           ; 1 bytes @ 0x9
  2735                           
  2736  0029                     nrf24l01InitRegisters@enRXAddr:	
  2737                           ; 1 bytes @ 0x9
  2738                           
  2739  0029                     flashUpdate@i:	
  2740                           ; 1 bytes @ 0x9
  2741                           
  2742  0029                     ___lmul@product:	
  2743                           ; 2 bytes @ 0x9
  2744                           
  2745                           
  2746                           ; 4 bytes @ 0x9
  2747  0029                     	ds	1
  2748  002A                     ??_flashRealod:	
  2749  002A                     nrf24l01InitRegisters@enAA:	
  2750                           ; 1 bytes @ 0xA
  2751                           
  2752  002A                     ___lldiv@quotient:	
  2753                           ; 1 bytes @ 0xA
  2754                           
  2755                           
  2756                           ; 4 bytes @ 0xA
  2757  002A                     	ds	1
  2758  002B                     nrf24l01InitRegisters@DynPD:	
  2759  002B                     flashRealod@i:	
  2760                           ; 1 bytes @ 0xB
  2761                           
  2762                           
  2763                           ; 2 bytes @ 0xB
  2764  002B                     	ds	1
  2765  002C                     nrf24l01InitRegisters@config:	
  2766                           
  2767                           ; 1 bytes @ 0xC
  2768  002C                     	ds	1
  2769  002D                     ??_nrf24l01Init:	
  2770                           
  2771                           ; 1 bytes @ 0xD
  2772  002D                     	ds	1
  2773  002E                     ___lldiv@counter:	
  2774                           
  2775                           ; 1 bytes @ 0xE
  2776  002E                     	ds	1
  2777  002F                     ?_getADCValue:	
  2778  002F                     nrf24l01Init@isReciever:	
  2779                           ; 4 bytes @ 0xF
  2780                           
  2781  002F                     getADCValue@divider:	
  2782                           ; 1 bytes @ 0xF
  2783                           
  2784                           
  2785                           ; 4 bytes @ 0xF
  2786  002F                     	ds	4
  2787  0033                     ??_getADCValue:	
  2788                           
  2789                           ; 1 bytes @ 0x13
  2790  0033                     	ds	4
  2791  0037                     getADCValue@channel:	
  2792                           
  2793                           ; 1 bytes @ 0x17
  2794  0037                     	ds	1
  2795  0038                     getADCValue@adcLoop:	
  2796                           
  2797                           ; 1 bytes @ 0x18
  2798  0038                     	ds	1
  2799  0039                     getADCValue@adcSum:	
  2800                           
  2801                           ; 4 bytes @ 0x19
  2802  0039                     	ds	4
  2803  003D                     ?_utoa:	
  2804  003D                     utoa@val:	
  2805                           ; 1 bytes @ 0x1D
  2806                           
  2807                           
  2808                           ; 2 bytes @ 0x1D
  2809  003D                     	ds	2
  2810  003F                     utoa@base:	
  2811                           
  2812                           ; 2 bytes @ 0x1F
  2813  003F                     	ds	2
  2814  0041                     ??_utoa:	
  2815                           
  2816                           ; 1 bytes @ 0x21
  2817  0041                     	ds	1
  2818  0042                     utoa@v:	
  2819                           
  2820                           ; 2 bytes @ 0x22
  2821  0042                     	ds	2
  2822  0044                     utoa@c:	
  2823                           
  2824                           ; 1 bytes @ 0x24
  2825  0044                     	ds	1
  2826  0045                     utoa@buf:	
  2827                           
  2828                           ; 1 bytes @ 0x25
  2829  0045                     	ds	1
  2830  0046                     ??_loop:	
  2831  0046                     ??_main:	
  2832                           ; 1 bytes @ 0x26
  2833                           
  2834                           
  2835                           ; 1 bytes @ 0x26
  2836  0046                     	ds	1
  2837                           
  2838                           	psect	maintext
  2839  0255                     __pmaintext:	
  2840 ;;
  2841 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  2842 ;;
  2843 ;; *************** function _main *****************
  2844 ;; Defined at:
  2845 ;;		line 115 in file "main.c"
  2846 ;; Parameters:    Size  Location     Type
  2847 ;;		None
  2848 ;; Auto vars:     Size  Location     Type
  2849 ;;		None
  2850 ;; Return value:  Size  Location     Type
  2851 ;;                  1    wreg      void 
  2852 ;; Registers used:
  2853 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2854 ;; Tracked objects:
  2855 ;;		On entry : B1F/0
  2856 ;;		On exit  : 0/0
  2857 ;;		Unchanged: 0/0
  2858 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2859 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2860 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2861 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2862 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2863 ;;Total ram usage:        1 bytes
  2864 ;; Hardware stack levels required when called:   12
  2865 ;; This function calls:
  2866 ;;		_flashRealod
  2867 ;;		_flashUpdate
  2868 ;;		_loop
  2869 ;;		_nrf24l01Init
  2870 ;;		_nrf24l01SendString
  2871 ;;		_sleep
  2872 ;;		_strcpy
  2873 ;;		_utoa
  2874 ;; This function is called by:
  2875 ;;		Startup code after reset
  2876 ;; This function uses a non-reentrant model
  2877 ;;
  2878                           
  2879                           
  2880                           ;psect for function _main
  2881  0255                     _main:	
  2882                           
  2883                           ;main.c: 118: ANSELA = 0x00;
  2884                           
  2885                           ;incstack = 0
  2886                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  2887  0255  0023               	movlb	3	; select bank3
  2888  0256  018C               	clrf	12	;volatile
  2889                           
  2890                           ;main.c: 119: ANSELC = 0x00;
  2891  0257  018E               	clrf	14	;volatile
  2892                           
  2893                           ;main.c: 121: ODCONA = 0x00;
  2894  0258  0025               	movlb	5	; select bank5
  2895  0259  018C               	clrf	12	;volatile
  2896                           
  2897                           ;main.c: 122: ODCONC = 0x00;
  2898  025A  018E               	clrf	14	;volatile
  2899                           
  2900                           ;main.c: 124: SLRCONA = 0x00;
  2901  025B  0026               	movlb	6	; select bank6
  2902  025C  018C               	clrf	12	;volatile
  2903                           
  2904                           ;main.c: 125: SLRCONC = 0x00;
  2905  025D  018E               	clrf	14	;volatile
  2906                           
  2907                           ;main.c: 127: INLVLA = 0x00;
  2908  025E  0027               	movlb	7	; select bank7
  2909  025F  018C               	clrf	12	;volatile
  2910                           
  2911                           ;main.c: 128: INLVLC = 0x00;
  2912  0260  018E               	clrf	14	;volatile
  2913                           
  2914                           ;main.c: 130: TRISCbits.TRISC5 = 0;
  2915  0261  0021               	movlb	1	; select bank1
  2916  0262  128E               	bcf	14,5	;volatile
  2917                           
  2918                           ;main.c: 131: TRISCbits.TRISC4 = 0;
  2919  0263  120E               	bcf	14,4	;volatile
  2920                           
  2921                           ;main.c: 133: PORTCbits.RC4 = 0;
  2922  0264  0020               	movlb	0	; select bank0
  2923  0265  120E               	bcf	14,4	;volatile
  2924                           
  2925                           ;main.c: 140: INTCONbits.PEIE = 0;
  2926  0266  130B               	bcf	11,6	;volatile
  2927                           
  2928                           ;main.c: 141: INTCONbits.GIE = 0;
  2929  0267  138B               	bcf	11,7	;volatile
  2930                           
  2931                           ;main.c: 146: _delay((unsigned long)((10)*(16000000/4000.0)));
  2932  0268  3034               	movlw	52
  2933  0269  0020               	movlb	0	; select bank0
  2934  026A  00C6               	movwf	??_main
  2935  026B  30F1               	movlw	241
  2936  026C                     u1827:	
  2937  026C  0B89               	decfsz	9,f
  2938  026D  2A6C               	goto	u1827
  2939  026E  0BC6               	decfsz	??_main,f
  2940  026F  2A6C               	goto	u1827
  2941  0270  3200               	nop2
  2942                           
  2943                           ;main.c: 148: flashRealod();
  2944  0271  3186  268A  3182   	fcall	_flashRealod
  2945                           
  2946                           ;main.c: 151: if (romData.check != 0x01){
  2947  0274  0021               	movlb	1	; select bank1
  2948  0275  0320               	decf	_romData^(0+128),w
  2949  0276  1903               	btfsc	3,2
  2950  0277  2A8B               	goto	l2998
  2951                           
  2952                           ;main.c: 152: romData.check = 0x01;
  2953  0278  01A0               	clrf	_romData^(0+128)
  2954  0279  0AA0               	incf	_romData^(0+128),f
  2955                           
  2956                           ;main.c: 153: strcpy(romData.name, "UnconfiguredH1");
  2957  027A  3044               	movlw	low (STR_6| (0+32768))
  2958  027B  0020               	movlb	0	; select bank0
  2959  027C  00A1               	movwf	strcpy@from
  2960  027D  3087               	movlw	high (STR_6| (0+32768))
  2961  027E  00A2               	movwf	strcpy@from+1
  2962  027F  30A1               	movlw	(low ((_romData| 0+1)))& (0+255)
  2963  0280  3186  26C8  3182   	fcall	_strcpy
  2964                           
  2965                           ;main.c: 154: romData.bootMode = 0x01;
  2966  0283  3001               	movlw	1
  2967  0284  0021               	movlb	1	; select bank1
  2968  0285  00B1               	movwf	(_romData^(0+128)+17)
  2969  0286  3000               	movlw	0
  2970  0287  00B2               	movwf	(_romData^(0+128)+18)
  2971                           
  2972                           ;main.c: 155: flashUpdate();
  2973  0288  3186  2626  3182   	fcall	_flashUpdate
  2974  028B                     l2998:	
  2975                           
  2976                           ;main.c: 156: };main.c: 158: strcpy(nrf24l01TXName, romData.name);
  2977  028B  30A1               	movlw	low (_romData+1)
  2978  028C  0020               	movlb	0	; select bank0
  2979  028D  00A1               	movwf	strcpy@from
  2980  028E  3000               	movlw	high (_romData+1)
  2981  028F  00A2               	movwf	strcpy@from+1
  2982  0290  30C3               	movlw	(low (_nrf24l01TXName| 0))& (0+255)
  2983  0291  3186  26C8  3182   	fcall	_strcpy
  2984                           
  2985                           ;main.c: 160: nrf24l01Init(0);
  2986  0294  3000               	movlw	0
  2987  0295  3185  25FC  3182   	fcall	_nrf24l01Init
  2988                           
  2989                           ;main.c: 166: FVRCONbits.FVREN = 0;
  2990  0298  0022               	movlb	2	; select bank2
  2991  0299  1397               	bcf	23,7	;volatile
  2992                           
  2993                           ;main.c: 167: FVRCONbits.ADFVR = 1;
  2994  029A  0817               	movf	23,w	;volatile
  2995  029B  39FC               	andlw	-4
  2996  029C  3801               	iorlw	1
  2997  029D  0097               	movwf	23	;volatile
  2998                           
  2999                           ;main.c: 168: FVRCONbits.FVREN = 1;
  3000  029E  1797               	bsf	23,7	;volatile
  3001                           
  3002                           ;main.c: 171: FVRCONbits.TSEN = 0;
  3003  029F  1297               	bcf	23,5	;volatile
  3004                           
  3005                           ;main.c: 172: FVRCONbits.TSRNG = 0;
  3006  02A0  1217               	bcf	23,4	;volatile
  3007                           
  3008                           ;main.c: 173: FVRCONbits.TSEN = 1;
  3009  02A1  1697               	bsf	23,5	;volatile
  3010                           
  3011                           ;main.c: 176: ADCON0bits.ADON = 0;
  3012  02A2  0021               	movlb	1	; select bank1
  3013  02A3  101D               	bcf	29,0	;volatile
  3014                           
  3015                           ;main.c: 178: ANSELAbits.ANSA4 = 1;
  3016  02A4  0023               	movlb	3	; select bank3
  3017  02A5  160C               	bsf	12,4	;volatile
  3018                           
  3019                           ;main.c: 179: TRISAbits.TRISA4 = 1;
  3020  02A6  0021               	movlb	1	; select bank1
  3021  02A7  160C               	bsf	12,4	;volatile
  3022                           
  3023                           ;main.c: 180: WPUAbits.WPUA4 = 0;
  3024  02A8  0024               	movlb	4	; select bank4
  3025  02A9  120C               	bcf	12,4	;volatile
  3026                           
  3027                           ;main.c: 182: ANSELCbits.ANSC3 = 1;
  3028  02AA  0023               	movlb	3	; select bank3
  3029  02AB  158E               	bsf	14,3	;volatile
  3030                           
  3031                           ;main.c: 183: TRISCbits.TRISC3 = 1;
  3032  02AC  0021               	movlb	1	; select bank1
  3033  02AD  158E               	bsf	14,3	;volatile
  3034                           
  3035                           ;main.c: 185: ADCON1bits.ADCS = 0b111;
  3036  02AE  3070               	movlw	112
  3037  02AF  049E               	iorwf	30,f	;volatile
  3038                           
  3039                           ;main.c: 186: ADCON1bits.ADFM = 1;
  3040  02B0  179E               	bsf	30,7	;volatile
  3041                           
  3042                           ;main.c: 187: ADCON1bits.ADPREF = 0b00;
  3043  02B1  30FC               	movlw	-4
  3044  02B2  059E               	andwf	30,f	;volatile
  3045                           
  3046                           ;main.c: 189: ADCON0bits.CHS = 3;
  3047  02B3  081D               	movf	29,w	;volatile
  3048  02B4  3903               	andlw	-253
  3049  02B5  380C               	iorlw	12
  3050  02B6  009D               	movwf	29	;volatile
  3051                           
  3052                           ;main.c: 190: ADCON0bits.ADON = 1;
  3053  02B7  141D               	bsf	29,0	;volatile
  3054                           
  3055                           ;main.c: 194: TRISAbits.TRISA2 = 1;
  3056  02B8  150C               	bsf	12,2	;volatile
  3057                           
  3058                           ;main.c: 195: RA2PPSbits.RA2PPS = 0b00010;
  3059  02B9  003D               	movlb	29	; select bank29
  3060  02BA  0812               	movf	18,w	;volatile
  3061  02BB  39E0               	andlw	-32
  3062  02BC  3802               	iorlw	2
  3063  02BD  0092               	movwf	18	;volatile
  3064                           
  3065                           ;main.c: 196: PIE0bits.INTE = 1;
  3066  02BE  0021               	movlb	1	; select bank1
  3067  02BF  1410               	bsf	16,0	;volatile
  3068                           
  3069                           ;main.c: 197: INTCONbits.INTEDG = 0;
  3070  02C0  100B               	bcf	11,0	;volatile
  3071                           
  3072                           ;main.c: 201: WDTCONbits.WDTPS = 10;
  3073  02C1  0817               	movf	23,w	;volatile
  3074  02C2  39C1               	andlw	-63
  3075  02C3  3814               	iorlw	20
  3076  02C4  0097               	movwf	23	;volatile
  3077                           
  3078                           ;main.c: 204: TRISAbits.TRISA5 = 0;
  3079  02C5  128C               	bcf	12,5	;volatile
  3080                           
  3081                           ;main.c: 205: PORTAbits.RA5 = 0;
  3082  02C6  0020               	movlb	0	; select bank0
  3083  02C7  128C               	bcf	12,5	;volatile
  3084                           
  3085                           ;main.c: 208: INTCONbits.PEIE = 1;
  3086  02C8  170B               	bsf	11,6	;volatile
  3087                           
  3088                           ;main.c: 209: INTCONbits.GIE = 1;
  3089  02C9  178B               	bsf	11,7	;volatile
  3090                           
  3091                           ;main.c: 211: strcpy(nrf24l01TXTopic, "BOOT");
  3092  02CA  30A1               	movlw	low (STR_7| (0+32768))
  3093  02CB  00A1               	movwf	strcpy@from
  3094  02CC  3087               	movlw	high (STR_7| (0+32768))
  3095  02CD  00A2               	movwf	strcpy@from+1
  3096  02CE  3065               	movlw	(low (_nrf24l01TXTopic| 0))& (0+255)
  3097  02CF  3186  26C8  3182   	fcall	_strcpy
  3098                           
  3099                           ;main.c: 213: utoa(nrf24l01TXValue, romData.bootMode, 10);
  3100  02D2  0021               	movlb	1	; select bank1
  3101  02D3  0832               	movf	((_romData+1)^(0+128)+17),w
  3102  02D4  0020               	movlb	0	; select bank0
  3103  02D5  00BE               	movwf	utoa@val+1
  3104  02D6  0021               	movlb	1	; select bank1
  3105  02D7  0831               	movf	(_romData^(0+128)+17),w
  3106  02D8  0020               	movlb	0	; select bank0
  3107  02D9  00BD               	movwf	utoa@val
  3108  02DA  300A               	movlw	10
  3109  02DB  00BF               	movwf	utoa@base
  3110  02DC  3000               	movlw	0
  3111  02DD  00C0               	movwf	utoa@base+1
  3112  02DE  305D               	movlw	(low (_nrf24l01TXValue| 0))& (0+255)
  3113  02DF  3183  2377  3182   	fcall	_utoa
  3114                           
  3115                           ;main.c: 215: nrf24l01TXPacketData.byte = 0x00;
  3116  02E2  0020               	movlb	0	; select bank0
  3117  02E3  01CC               	clrf	_nrf24l01TXPacketData
  3118                           
  3119                           ;main.c: 216: nrf24l01TXPacketData.ACKRequest = 0;
  3120  02E4  104C               	bcf	_nrf24l01TXPacketData,0
  3121                           
  3122                           ;main.c: 219: nrf24l01SendString();
  3123  02E5  3181  2100  3182   	fcall	_nrf24l01SendString
  3124                           
  3125                           ;main.c: 221: sleep();
  3126  02E8  3187  2760  3182   	fcall	_sleep
  3127  02EB                     l3066:	
  3128                           ;main.c: 223: while(1){
  3129                           
  3130                           
  3131                           ;main.c: 224: loop();
  3132  02EB  3180  202C  3182   	fcall	_loop
  3133  02EE  2AEB               	goto	l3066
  3134  02EF                     __end_of_main:	
  3135                           ;main.c: 225: };main.c: 227: return;
  3136                           
  3137                           
  3138                           	psect	text1
  3139  05FC                     __ptext1:	
  3140 ;; *************** function _nrf24l01Init *****************
  3141 ;; Defined at:
  3142 ;;		line 446 in file "nrf24l01.c"
  3143 ;; Parameters:    Size  Location     Type
  3144 ;;  isReciever      1    wreg     unsigned char 
  3145 ;; Auto vars:     Size  Location     Type
  3146 ;;  isReciever      1   15[BANK0 ] unsigned char 
  3147 ;; Return value:  Size  Location     Type
  3148 ;;                  1    wreg      void 
  3149 ;; Registers used:
  3150 ;;		wreg, status,2, status,0, pclath, cstack
  3151 ;; Tracked objects:
  3152 ;;		On entry : 0/0
  3153 ;;		On exit  : 0/0
  3154 ;;		Unchanged: 0/0
  3155 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3156 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3157 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3158 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3159 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3160 ;;Total ram usage:        3 bytes
  3161 ;; Hardware stack levels used:    1
  3162 ;; Hardware stack levels required when called:   10
  3163 ;; This function calls:
  3164 ;;		_nrf24l01CEHigh
  3165 ;;		_nrf24l01CELow
  3166 ;;		_nrf24l01InitRegisters
  3167 ;;		_nrf24l01InterfaceInit
  3168 ;; This function is called by:
  3169 ;;		_main
  3170 ;; This function uses a non-reentrant model
  3171 ;;
  3172                           
  3173                           
  3174                           ;psect for function _nrf24l01Init
  3175  05FC                     _nrf24l01Init:	
  3176                           
  3177                           ;incstack = 0
  3178                           ; Regs used in _nrf24l01Init: [wreg+status,2+status,0+pclath+cstack]
  3179                           ;nrf24l01Init@isReciever stored from wreg
  3180  05FC  0020               	movlb	0	; select bank0
  3181  05FD  00AF               	movwf	nrf24l01Init@isReciever
  3182                           
  3183                           ;nrf24l01.c: 449: nrf24l01InterfaceInit();
  3184  05FE  3186  26AA  3185   	fcall	_nrf24l01InterfaceInit
  3185                           
  3186                           ;nrf24l01.c: 454: nrf24l01CELow();
  3187  0601  3187  27B0  3185   	fcall	_nrf24l01CELow
  3188                           
  3189                           ;nrf24l01.c: 456: _delay((unsigned long)((50000)*(16000000/4000000.0)));
  3190  0604  3002               	movlw	2
  3191  0605  0020               	movlb	0	; select bank0
  3192  0606  00AE               	movwf	??_nrf24l01Init+1
  3193  0607  3004               	movlw	4
  3194  0608  00AD               	movwf	??_nrf24l01Init
  3195  0609  30BA               	movlw	186
  3196  060A                     u1837:	
  3197  060A  0B89               	decfsz	9,f
  3198  060B  2E0A               	goto	u1837
  3199  060C  0BAD               	decfsz	??_nrf24l01Init,f
  3200  060D  2E0A               	goto	u1837
  3201  060E  0BAE               	decfsz	??_nrf24l01Init+1,f
  3202  060F  2E0A               	goto	u1837
  3203  0610  0000               	nop
  3204                           
  3205                           ;nrf24l01.c: 458: nrf24l01InitRegisters(isReciever);
  3206  0611  0020               	movlb	0	; select bank0
  3207  0612  082F               	movf	nrf24l01Init@isReciever,w
  3208  0613  3181  21B9  3185   	fcall	_nrf24l01InitRegisters
  3209                           
  3210                           ;nrf24l01.c: 460: _delay((unsigned long)((50000)*(16000000/4000000.0)));
  3211  0616  3002               	movlw	2
  3212  0617  0020               	movlb	0	; select bank0
  3213  0618  00AE               	movwf	??_nrf24l01Init+1
  3214  0619  3004               	movlw	4
  3215  061A  00AD               	movwf	??_nrf24l01Init
  3216  061B  30BA               	movlw	186
  3217  061C                     u1847:	
  3218  061C  0B89               	decfsz	9,f
  3219  061D  2E1C               	goto	u1847
  3220  061E  0BAD               	decfsz	??_nrf24l01Init,f
  3221  061F  2E1C               	goto	u1847
  3222  0620  0BAE               	decfsz	??_nrf24l01Init+1,f
  3223  0621  2E1C               	goto	u1847
  3224  0622  0000               	nop
  3225                           
  3226                           ;nrf24l01.c: 462: nrf24l01CEHigh();
  3227  0623  3187  27B3         	fcall	_nrf24l01CEHigh
  3228  0625  0008               	return
  3229  0626                     __end_of_nrf24l01Init:	
  3230                           
  3231                           	psect	text2
  3232  06AA                     __ptext2:	
  3233 ;; *************** function _nrf24l01InterfaceInit *****************
  3234 ;; Defined at:
  3235 ;;		line 28 in file "interface.c"
  3236 ;; Parameters:    Size  Location     Type
  3237 ;;		None
  3238 ;; Auto vars:     Size  Location     Type
  3239 ;;		None
  3240 ;; Return value:  Size  Location     Type
  3241 ;;                  1    wreg      void 
  3242 ;; Registers used:
  3243 ;;		wreg, status,2, status,0
  3244 ;; Tracked objects:
  3245 ;;		On entry : 0/0
  3246 ;;		On exit  : 0/0
  3247 ;;		Unchanged: 0/0
  3248 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3249 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3250 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3251 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3252 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3253 ;;Total ram usage:        0 bytes
  3254 ;; Hardware stack levels used:    1
  3255 ;; Hardware stack levels required when called:    6
  3256 ;; This function calls:
  3257 ;;		Nothing
  3258 ;; This function is called by:
  3259 ;;		_nrf24l01Init
  3260 ;; This function uses a non-reentrant model
  3261 ;;
  3262                           
  3263                           
  3264                           ;psect for function _nrf24l01InterfaceInit
  3265  06AA                     _nrf24l01InterfaceInit:	
  3266                           
  3267                           ;interface.c: 30: TRISAbits.TRISA0 = 0;
  3268                           
  3269                           ;incstack = 0
  3270                           ; Regs used in _nrf24l01InterfaceInit: [wreg+status,2+status,0]
  3271  06AA  0021               	movlb	1	; select bank1
  3272  06AB  100C               	bcf	12,0	;volatile
  3273                           
  3274                           ;interface.c: 31: TRISAbits.TRISA1 = 0;
  3275  06AC  108C               	bcf	12,1	;volatile
  3276                           
  3277                           ;interface.c: 33: TRISCbits.TRISC1 = 1;
  3278  06AD  148E               	bsf	14,1	;volatile
  3279                           
  3280                           ;interface.c: 34: TRISCbits.TRISC2 = 0;
  3281  06AE  110E               	bcf	14,2	;volatile
  3282                           
  3283                           ;interface.c: 35: TRISCbits.TRISC0 = 0;
  3284  06AF  100E               	bcf	14,0	;volatile
  3285                           
  3286                           ;interface.c: 37: SSP1CON1bits.SSPEN = 0;
  3287  06B0  0024               	movlb	4	; select bank4
  3288  06B1  1295               	bcf	21,5	;volatile
  3289                           
  3290                           ;interface.c: 39: RC1PPSbits.RC1PPS = 0b10001;
  3291  06B2  003D               	movlb	29	; select bank29
  3292  06B3  0821               	movf	33,w	;volatile
  3293  06B4  39E0               	andlw	-32
  3294  06B5  3811               	iorlw	17
  3295  06B6  00A1               	movwf	33	;volatile
  3296                           
  3297                           ;interface.c: 40: RC2PPSbits.RC2PPS = 0b11001;
  3298  06B7  0822               	movf	34,w	;volatile
  3299  06B8  39E0               	andlw	-32
  3300  06B9  3819               	iorlw	25
  3301  06BA  00A2               	movwf	34	;volatile
  3302                           
  3303                           ;interface.c: 41: RC0PPSbits.RC0PPS = 0b11000;
  3304  06BB  0820               	movf	32,w	;volatile
  3305  06BC  39E0               	andlw	-32
  3306  06BD  3818               	iorlw	24
  3307  06BE  00A0               	movwf	32	;volatile
  3308                           
  3309                           ;interface.c: 43: SSP1CON1bits.CKP = 0;
  3310  06BF  0024               	movlb	4	; select bank4
  3311  06C0  1215               	bcf	21,4	;volatile
  3312                           
  3313                           ;interface.c: 44: SSP1STATbits.CKE = 1;
  3314  06C1  1714               	bsf	20,6	;volatile
  3315                           
  3316                           ;interface.c: 45: SSP1CON1bits.SSPM = 0b0010;
  3317  06C2  0815               	movf	21,w	;volatile
  3318  06C3  39F0               	andlw	-16
  3319  06C4  3802               	iorlw	2
  3320  06C5  0095               	movwf	21	;volatile
  3321                           
  3322                           ;interface.c: 47: SSP1CON1bits.SSPEN = 1;
  3323  06C6  1695               	bsf	21,5	;volatile
  3324  06C7  0008               	return
  3325  06C8                     __end_of_nrf24l01InterfaceInit:	
  3326                           
  3327                           	psect	text3
  3328  01B9                     __ptext3:	
  3329 ;; *************** function _nrf24l01InitRegisters *****************
  3330 ;; Defined at:
  3331 ;;		line 362 in file "nrf24l01.c"
  3332 ;; Parameters:    Size  Location     Type
  3333 ;;  isReciever      1    wreg     unsigned char 
  3334 ;; Auto vars:     Size  Location     Type
  3335 ;;  isReciever      1    0[COMMON] unsigned char 
  3336 ;;  config          1   12[BANK0 ] struct .
  3337 ;;  DynPD           1   11[BANK0 ] struct .
  3338 ;;  enAA            1   10[BANK0 ] struct .
  3339 ;;  enRXAddr        1    9[BANK0 ] struct .
  3340 ;;  status          1    8[BANK0 ] struct .
  3341 ;;  feature         1    7[BANK0 ] struct .
  3342 ;;  rfSetup         1    6[BANK0 ] struct .
  3343 ;;  setupAW         1    5[BANK0 ] struct .
  3344 ;; Return value:  Size  Location     Type
  3345 ;;                  1    wreg      void 
  3346 ;; Registers used:
  3347 ;;		wreg, status,2, status,0, pclath, cstack
  3348 ;; Tracked objects:
  3349 ;;		On entry : 0/0
  3350 ;;		On exit  : 0/0
  3351 ;;		Unchanged: 0/0
  3352 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3353 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3354 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3355 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3356 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3357 ;;Total ram usage:        9 bytes
  3358 ;; Hardware stack levels used:    1
  3359 ;; Hardware stack levels required when called:    9
  3360 ;; This function calls:
  3361 ;;		_nrf24l01Send
  3362 ;; This function is called by:
  3363 ;;		_nrf24l01Init
  3364 ;; This function uses a non-reentrant model
  3365 ;;
  3366                           
  3367                           
  3368                           ;psect for function _nrf24l01InitRegisters
  3369  01B9                     _nrf24l01InitRegisters:	
  3370                           
  3371                           ;nrf24l01.c: 364: n_CONFIG_t config;;nrf24l01.c: 366: config.PWR_UP = 0;
  3372                           
  3373                           ;incstack = 0
  3374                           ; Regs used in _nrf24l01InitRegisters: [wreg+status,2+status,0+pclath+cstack]
  3375  01B9  0020               	movlb	0	; select bank0
  3376  01BA  10AC               	bcf	nrf24l01InitRegisters@config,1
  3377                           
  3378                           ;nrf24l01.c: 367: nrf24l01Send(0b00100000 | 0x00, config.byte);
  3379  01BB  082C               	movf	nrf24l01InitRegisters@config,w
  3380  01BC  00A4               	movwf	??_nrf24l01InitRegisters
  3381  01BD  0824               	movf	??_nrf24l01InitRegisters,w
  3382  01BE  00A1               	movwf	nrf24l01Send@data
  3383  01BF  3020               	movlw	32
  3384  01C0  3186  266A  3181   	fcall	_nrf24l01Send
  3385                           
  3386                           ;nrf24l01.c: 369: n_SETUP_AW_t setupAW;;nrf24l01.c: 370: setupAW.byte = 0x00;
  3387  01C3  0020               	movlb	0	; select bank0
  3388  01C4  01A5               	clrf	nrf24l01InitRegisters@setupAW
  3389                           
  3390                           ;nrf24l01.c: 371: setupAW.AW = 0b11;
  3391  01C5  3003               	movlw	3
  3392  01C6  04A5               	iorwf	nrf24l01InitRegisters@setupAW,f
  3393                           
  3394                           ;nrf24l01.c: 372: nrf24l01Send(0b00100000 | 0x02, setupAW.byte);
  3395  01C7  0825               	movf	nrf24l01InitRegisters@setupAW,w
  3396  01C8  00A4               	movwf	??_nrf24l01InitRegisters
  3397  01C9  0824               	movf	??_nrf24l01InitRegisters,w
  3398  01CA  00A1               	movwf	nrf24l01Send@data
  3399  01CB  3022               	movlw	34
  3400  01CC  3186  266A  3181   	fcall	_nrf24l01Send
  3401                           
  3402                           ;nrf24l01.c: 380: n_RF_SETUP_t rfSetup;;nrf24l01.c: 381: rfSetup.RF_DR_LOW = 0;
  3403  01CF  0020               	movlb	0	; select bank0
  3404  01D0  12A6               	bcf	nrf24l01InitRegisters@rfSetup,5
  3405                           
  3406                           ;nrf24l01.c: 382: rfSetup.RF_DR_HIGH = 1;
  3407  01D1  15A6               	bsf	nrf24l01InitRegisters@rfSetup,3
  3408                           
  3409                           ;nrf24l01.c: 383: rfSetup.RF_PWR = 3;
  3410  01D2  3006               	movlw	6
  3411  01D3  04A6               	iorwf	nrf24l01InitRegisters@rfSetup,f
  3412                           
  3413                           ;nrf24l01.c: 384: nrf24l01Send(0b00100000 | 0x06, rfSetup.byte);
  3414  01D4  0826               	movf	nrf24l01InitRegisters@rfSetup,w
  3415  01D5  00A4               	movwf	??_nrf24l01InitRegisters
  3416  01D6  0824               	movf	??_nrf24l01InitRegisters,w
  3417  01D7  00A1               	movwf	nrf24l01Send@data
  3418  01D8  3026               	movlw	38
  3419  01D9  3186  266A  3181   	fcall	_nrf24l01Send
  3420                           
  3421                           ;nrf24l01.c: 387: n_EN_RXADDR_t enRXAddr;;nrf24l01.c: 388: enRXAddr.ERX_P0 = 1;
  3422  01DC  0020               	movlb	0	; select bank0
  3423  01DD  1429               	bsf	nrf24l01InitRegisters@enRXAddr,0
  3424                           
  3425                           ;nrf24l01.c: 389: enRXAddr.ERX_P1 = 1;
  3426  01DE  14A9               	bsf	nrf24l01InitRegisters@enRXAddr,1
  3427                           
  3428                           ;nrf24l01.c: 390: enRXAddr.ERX_P2 = 1;
  3429  01DF  1529               	bsf	nrf24l01InitRegisters@enRXAddr,2
  3430                           
  3431                           ;nrf24l01.c: 391: enRXAddr.ERX_P3 = 1;
  3432  01E0  15A9               	bsf	nrf24l01InitRegisters@enRXAddr,3
  3433                           
  3434                           ;nrf24l01.c: 392: enRXAddr.ERX_P4 = 1;
  3435  01E1  1629               	bsf	nrf24l01InitRegisters@enRXAddr,4
  3436                           
  3437                           ;nrf24l01.c: 393: enRXAddr.ERX_P5 = 1;
  3438  01E2  16A9               	bsf	nrf24l01InitRegisters@enRXAddr,5
  3439                           
  3440                           ;nrf24l01.c: 394: nrf24l01Send(0b00100000 | 0x02, enRXAddr.byte);
  3441  01E3  0829               	movf	nrf24l01InitRegisters@enRXAddr,w
  3442  01E4  00A4               	movwf	??_nrf24l01InitRegisters
  3443  01E5  0824               	movf	??_nrf24l01InitRegisters,w
  3444  01E6  00A1               	movwf	nrf24l01Send@data
  3445  01E7  3022               	movlw	34
  3446  01E8  3186  266A  3181   	fcall	_nrf24l01Send
  3447                           
  3448                           ;nrf24l01.c: 397: n_EN_AA_t enAA;;nrf24l01.c: 398: enAA.byte = nrf24l01Send(0b00000000 |
      +                           0x01, 0);
  3449  01EB  0020               	movlb	0	; select bank0
  3450  01EC  01A1               	clrf	nrf24l01Send@data
  3451  01ED  3001               	movlw	1
  3452  01EE  3186  266A  3181   	fcall	_nrf24l01Send
  3453  01F1  0020               	movlb	0	; select bank0
  3454  01F2  00A4               	movwf	??_nrf24l01InitRegisters
  3455  01F3  0824               	movf	??_nrf24l01InitRegisters,w
  3456  01F4  00AA               	movwf	nrf24l01InitRegisters@enAA
  3457                           
  3458                           ;nrf24l01.c: 399: enAA.ENAA_P0 = 0;
  3459  01F5  102A               	bcf	nrf24l01InitRegisters@enAA,0
  3460                           
  3461                           ;nrf24l01.c: 400: enAA.ENAA_P1 = 0;
  3462  01F6  10AA               	bcf	nrf24l01InitRegisters@enAA,1
  3463                           
  3464                           ;nrf24l01.c: 401: enAA.ENAA_P2 = 0;
  3465  01F7  112A               	bcf	nrf24l01InitRegisters@enAA,2
  3466                           
  3467                           ;nrf24l01.c: 402: enAA.ENAA_P3 = 0;
  3468  01F8  11AA               	bcf	nrf24l01InitRegisters@enAA,3
  3469                           
  3470                           ;nrf24l01.c: 403: enAA.ENAA_P4 = 0;
  3471  01F9  122A               	bcf	nrf24l01InitRegisters@enAA,4
  3472                           
  3473                           ;nrf24l01.c: 404: enAA.ENAA_P5 = 0;
  3474  01FA  12AA               	bcf	nrf24l01InitRegisters@enAA,5
  3475                           
  3476                           ;nrf24l01.c: 405: nrf24l01Send(0b00100000 | 0x01, enAA.byte);
  3477  01FB  082A               	movf	nrf24l01InitRegisters@enAA,w
  3478  01FC  00A4               	movwf	??_nrf24l01InitRegisters
  3479  01FD  0824               	movf	??_nrf24l01InitRegisters,w
  3480  01FE  00A1               	movwf	nrf24l01Send@data
  3481  01FF  3021               	movlw	33
  3482  0200  3186  266A  3181   	fcall	_nrf24l01Send
  3483                           
  3484                           ;nrf24l01.c: 409: n_FEATURE_t feature;;nrf24l01.c: 410: feature.byte = nrf24l01Send(0b00
      +                          000000 | 0x1D, 0);
  3485  0203  0020               	movlb	0	; select bank0
  3486  0204  01A1               	clrf	nrf24l01Send@data
  3487  0205  301D               	movlw	29
  3488  0206  3186  266A  3181   	fcall	_nrf24l01Send
  3489  0209  0020               	movlb	0	; select bank0
  3490  020A  00A4               	movwf	??_nrf24l01InitRegisters
  3491  020B  0824               	movf	??_nrf24l01InitRegisters,w
  3492  020C  00A7               	movwf	nrf24l01InitRegisters@feature
  3493                           
  3494                           ;nrf24l01.c: 411: feature.EN_DPL = 1;
  3495  020D  1527               	bsf	nrf24l01InitRegisters@feature,2
  3496                           
  3497                           ;nrf24l01.c: 412: feature.EN_DYN_ACK = 1;
  3498  020E  1427               	bsf	nrf24l01InitRegisters@feature,0
  3499                           
  3500                           ;nrf24l01.c: 413: nrf24l01Send(0b00100000 | 0x1D, feature.byte);
  3501  020F  0827               	movf	nrf24l01InitRegisters@feature,w
  3502  0210  00A4               	movwf	??_nrf24l01InitRegisters
  3503  0211  0824               	movf	??_nrf24l01InitRegisters,w
  3504  0212  00A1               	movwf	nrf24l01Send@data
  3505  0213  303D               	movlw	61
  3506  0214  3186  266A  3181   	fcall	_nrf24l01Send
  3507                           
  3508                           ;nrf24l01.c: 415: n_DYNPD_t DynPD;;nrf24l01.c: 416: DynPD.byte = nrf24l01Send(0b00000000
      +                           | 0x1C, 0);
  3509  0217  0020               	movlb	0	; select bank0
  3510  0218  01A1               	clrf	nrf24l01Send@data
  3511  0219  301C               	movlw	28
  3512  021A  3186  266A  3181   	fcall	_nrf24l01Send
  3513  021D  0020               	movlb	0	; select bank0
  3514  021E  00A4               	movwf	??_nrf24l01InitRegisters
  3515  021F  0824               	movf	??_nrf24l01InitRegisters,w
  3516  0220  00AB               	movwf	nrf24l01InitRegisters@DynPD
  3517                           
  3518                           ;nrf24l01.c: 417: DynPD.DPL_P0 = 1;
  3519  0221  142B               	bsf	nrf24l01InitRegisters@DynPD,0
  3520                           
  3521                           ;nrf24l01.c: 418: DynPD.DPL_P1 = 1;
  3522  0222  14AB               	bsf	nrf24l01InitRegisters@DynPD,1
  3523                           
  3524                           ;nrf24l01.c: 419: DynPD.DPL_P2 = 1;
  3525  0223  152B               	bsf	nrf24l01InitRegisters@DynPD,2
  3526                           
  3527                           ;nrf24l01.c: 420: DynPD.DPL_P3 = 1;
  3528  0224  15AB               	bsf	nrf24l01InitRegisters@DynPD,3
  3529                           
  3530                           ;nrf24l01.c: 421: DynPD.DPL_P4 = 1;
  3531  0225  162B               	bsf	nrf24l01InitRegisters@DynPD,4
  3532                           
  3533                           ;nrf24l01.c: 422: DynPD.DPL_P5 = 1;
  3534  0226  16AB               	bsf	nrf24l01InitRegisters@DynPD,5
  3535                           
  3536                           ;nrf24l01.c: 423: nrf24l01Send(0b00100000 | 0x1C, DynPD.byte);
  3537  0227  082B               	movf	nrf24l01InitRegisters@DynPD,w
  3538  0228  00A4               	movwf	??_nrf24l01InitRegisters
  3539  0229  0824               	movf	??_nrf24l01InitRegisters,w
  3540  022A  00A1               	movwf	nrf24l01Send@data
  3541  022B  303C               	movlw	60
  3542  022C  3186  266A  3181   	fcall	_nrf24l01Send
  3543                           
  3544                           ;nrf24l01.c: 426: n_STATUS_t status;;nrf24l01.c: 427: status.byte = 0x00;
  3545  022F  0020               	movlb	0	; select bank0
  3546  0230  01A8               	clrf	nrf24l01InitRegisters@status
  3547                           
  3548                           ;nrf24l01.c: 428: status.RX_DR = 1;
  3549  0231  1728               	bsf	nrf24l01InitRegisters@status,6
  3550                           
  3551                           ;nrf24l01.c: 429: status.TX_DS = 1;
  3552  0232  16A8               	bsf	nrf24l01InitRegisters@status,5
  3553                           
  3554                           ;nrf24l01.c: 430: status.MAX_RT = 1;
  3555  0233  1628               	bsf	nrf24l01InitRegisters@status,4
  3556                           
  3557                           ;nrf24l01.c: 431: nrf24l01Send(0b00100000 | 0x07, status.byte);
  3558  0234  0828               	movf	nrf24l01InitRegisters@status,w
  3559  0235  00A4               	movwf	??_nrf24l01InitRegisters
  3560  0236  0824               	movf	??_nrf24l01InitRegisters,w
  3561  0237  00A1               	movwf	nrf24l01Send@data
  3562  0238  3027               	movlw	39
  3563  0239  3186  266A  3181   	fcall	_nrf24l01Send
  3564                           
  3565                           ;nrf24l01.c: 434: nrf24l01Send(0b11100001, 0);
  3566  023C  0020               	movlb	0	; select bank0
  3567  023D  01A1               	clrf	nrf24l01Send@data
  3568  023E  30E1               	movlw	225
  3569  023F  3186  266A  3181   	fcall	_nrf24l01Send
  3570                           
  3571                           ;nrf24l01.c: 435: nrf24l01Send(0b11100010, 0);
  3572  0242  0020               	movlb	0	; select bank0
  3573  0243  01A1               	clrf	nrf24l01Send@data
  3574  0244  30E2               	movlw	226
  3575  0245  3186  266A  3181   	fcall	_nrf24l01Send
  3576                           
  3577                           ;nrf24l01.c: 438: config.PRIM_RX = 1;
  3578  0248  0020               	movlb	0	; select bank0
  3579  0249  142C               	bsf	nrf24l01InitRegisters@config,0
  3580                           
  3581                           ;nrf24l01.c: 439: config.EN_CRC = 1;
  3582  024A  15AC               	bsf	nrf24l01InitRegisters@config,3
  3583                           
  3584                           ;nrf24l01.c: 440: config.CRCO = 1;
  3585  024B  152C               	bsf	nrf24l01InitRegisters@config,2
  3586                           
  3587                           ;nrf24l01.c: 441: config.PWR_UP = 1;
  3588  024C  14AC               	bsf	nrf24l01InitRegisters@config,1
  3589                           
  3590                           ;nrf24l01.c: 442: nrf24l01Send(0b00100000 | 0x00, config.byte);
  3591  024D  082C               	movf	nrf24l01InitRegisters@config,w
  3592  024E  00A4               	movwf	??_nrf24l01InitRegisters
  3593  024F  0824               	movf	??_nrf24l01InitRegisters,w
  3594  0250  00A1               	movwf	nrf24l01Send@data
  3595  0251  3020               	movlw	32
  3596  0252  3186  266A         	fcall	_nrf24l01Send
  3597  0254  0008               	return
  3598  0255                     __end_of_nrf24l01InitRegisters:	
  3599                           
  3600                           	psect	text4
  3601  002C                     __ptext4:	
  3602 ;; *************** function _loop *****************
  3603 ;; Defined at:
  3604 ;;		line 71 in file "main.c"
  3605 ;; Parameters:    Size  Location     Type
  3606 ;;		None
  3607 ;; Auto vars:     Size  Location     Type
  3608 ;;		None
  3609 ;; Return value:  Size  Location     Type
  3610 ;;                  1    wreg      void 
  3611 ;; Registers used:
  3612 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3613 ;; Tracked objects:
  3614 ;;		On entry : 0/0
  3615 ;;		On exit  : 0/0
  3616 ;;		Unchanged: 0/0
  3617 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3618 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3619 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3620 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3621 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3622 ;;Total ram usage:        0 bytes
  3623 ;; Hardware stack levels used:    1
  3624 ;; Hardware stack levels required when called:   11
  3625 ;; This function calls:
  3626 ;;		_getADCValue
  3627 ;;		_nrf24l01SendString
  3628 ;;		_sleep
  3629 ;;		_strcpy
  3630 ;;		_utoa
  3631 ;; This function is called by:
  3632 ;;		_main
  3633 ;; This function uses a non-reentrant model
  3634 ;;
  3635                           
  3636                           
  3637                           ;psect for function _loop
  3638  002C                     _loop:	
  3639                           
  3640                           ;incstack = 0
  3641                           ; Regs used in _loop: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3642  002C  0064               	clrwdt	;# 
  3643                           
  3644                           ;main.c: 76: strcpy(nrf24l01TXTopic, "DBG");
  3645  002D  30A6               	movlw	low (STR_1| (0+32768))
  3646  002E  0020               	movlb	0	; select bank0
  3647  002F  00A1               	movwf	strcpy@from
  3648  0030  3087               	movlw	high (STR_1| (0+32768))
  3649  0031  00A2               	movwf	strcpy@from+1
  3650  0032  3065               	movlw	(low (_nrf24l01TXTopic| 0))& (0+255)
  3651  0033  3186  26C8  3180   	fcall	_strcpy
  3652                           
  3653                           ;main.c: 77: utoa(nrf24l01TXValue, counter, 10);
  3654  0036  0020               	movlb	0	; select bank0
  3655  0037  0848               	movf	_counter+1,w
  3656  0038  00BE               	movwf	utoa@val+1
  3657  0039  0847               	movf	_counter,w
  3658  003A  00BD               	movwf	utoa@val
  3659  003B  300A               	movlw	10
  3660  003C  00BF               	movwf	utoa@base
  3661  003D  3000               	movlw	0
  3662  003E  00C0               	movwf	utoa@base+1
  3663  003F  305D               	movlw	(low (_nrf24l01TXValue| 0))& (0+255)
  3664  0040  3183  2377  3180   	fcall	_utoa
  3665                           
  3666                           ;main.c: 78: counter = 0;
  3667  0043  0020               	movlb	0	; select bank0
  3668  0044  01C7               	clrf	_counter
  3669  0045  01C8               	clrf	_counter+1
  3670                           
  3671                           ;main.c: 79: nrf24l01TXPacketData.byte = 0x00;
  3672  0046  01CC               	clrf	_nrf24l01TXPacketData
  3673                           
  3674                           ;main.c: 80: nrf24l01TXPacketData.ACKRequest = 0;
  3675  0047  104C               	bcf	_nrf24l01TXPacketData,0
  3676                           
  3677                           ;main.c: 81: nrf24l01SendString();
  3678  0048  3181  2100  3180   	fcall	_nrf24l01SendString
  3679                           
  3680                           ;main.c: 82: sleep();
  3681  004B  3187  2760  3180   	fcall	_sleep
  3682                           
  3683                           ;main.c: 84: strcpy(nrf24l01TXTopic, "ADC3");
  3684  004E  3097               	movlw	low (STR_2| (0+32768))
  3685  004F  0020               	movlb	0	; select bank0
  3686  0050  00A1               	movwf	strcpy@from
  3687  0051  3087               	movlw	high (STR_2| (0+32768))
  3688  0052  00A2               	movwf	strcpy@from+1
  3689  0053  3065               	movlw	(low (_nrf24l01TXTopic| 0))& (0+255)
  3690  0054  3186  26C8  3180   	fcall	_strcpy
  3691                           
  3692                           ;main.c: 85: utoa(nrf24l01TXValue, getADCValue(3, 2505), 10);
  3693  0057  3000               	movlw	0
  3694  0058  0020               	movlb	0	; select bank0
  3695  0059  00B2               	movwf	getADCValue@divider+3
  3696  005A  3000               	movlw	0
  3697  005B  00B1               	movwf	getADCValue@divider+2
  3698  005C  3009               	movlw	9
  3699  005D  00B0               	movwf	getADCValue@divider+1
  3700  005E  30C9               	movlw	201
  3701  005F  00AF               	movwf	getADCValue@divider
  3702  0060  3003               	movlw	3
  3703  0061  3182  22EF  3180   	fcall	_getADCValue
  3704  0064  0020               	movlb	0	; select bank0
  3705  0065  0830               	movf	?_getADCValue+1,w
  3706  0066  00BE               	movwf	utoa@val+1
  3707  0067  082F               	movf	?_getADCValue,w
  3708  0068  00BD               	movwf	utoa@val
  3709  0069  300A               	movlw	10
  3710  006A  00BF               	movwf	utoa@base
  3711  006B  3000               	movlw	0
  3712  006C  00C0               	movwf	utoa@base+1
  3713  006D  305D               	movlw	(low (_nrf24l01TXValue| 0))& (0+255)
  3714  006E  3183  2377  3180   	fcall	_utoa
  3715                           
  3716                           ;main.c: 86: nrf24l01TXPacketData.byte = 0x00;
  3717  0071  0020               	movlb	0	; select bank0
  3718  0072  01CC               	clrf	_nrf24l01TXPacketData
  3719                           
  3720                           ;main.c: 87: nrf24l01TXPacketData.ACKRequest = 0;
  3721  0073  104C               	bcf	_nrf24l01TXPacketData,0
  3722                           
  3723                           ;main.c: 88: nrf24l01SendString();
  3724  0074  3181  2100  3180   	fcall	_nrf24l01SendString
  3725                           
  3726                           ;main.c: 89: sleep();
  3727  0077  3187  2760  3180   	fcall	_sleep
  3728                           
  3729                           ;main.c: 91: strcpy(nrf24l01TXTopic, "ADC7");
  3730  007A  309C               	movlw	low (STR_3| (0+32768))
  3731  007B  0020               	movlb	0	; select bank0
  3732  007C  00A1               	movwf	strcpy@from
  3733  007D  3087               	movlw	high (STR_3| (0+32768))
  3734  007E  00A2               	movwf	strcpy@from+1
  3735  007F  3065               	movlw	(low (_nrf24l01TXTopic| 0))& (0+255)
  3736  0080  3186  26C8  3180   	fcall	_strcpy
  3737                           
  3738                           ;main.c: 92: utoa(nrf24l01TXValue, getADCValue(7, 2500), 10);
  3739  0083  3000               	movlw	0
  3740  0084  0020               	movlb	0	; select bank0
  3741  0085  00B2               	movwf	getADCValue@divider+3
  3742  0086  3000               	movlw	0
  3743  0087  00B1               	movwf	getADCValue@divider+2
  3744  0088  3009               	movlw	9
  3745  0089  00B0               	movwf	getADCValue@divider+1
  3746  008A  30C4               	movlw	196
  3747  008B  00AF               	movwf	getADCValue@divider
  3748  008C  3007               	movlw	7
  3749  008D  3182  22EF  3180   	fcall	_getADCValue
  3750  0090  0020               	movlb	0	; select bank0
  3751  0091  0830               	movf	?_getADCValue+1,w
  3752  0092  00BE               	movwf	utoa@val+1
  3753  0093  082F               	movf	?_getADCValue,w
  3754  0094  00BD               	movwf	utoa@val
  3755  0095  300A               	movlw	10
  3756  0096  00BF               	movwf	utoa@base
  3757  0097  3000               	movlw	0
  3758  0098  00C0               	movwf	utoa@base+1
  3759  0099  305D               	movlw	(low (_nrf24l01TXValue| 0))& (0+255)
  3760  009A  3183  2377  3180   	fcall	_utoa
  3761                           
  3762                           ;main.c: 93: nrf24l01TXPacketData.byte = 0x00;
  3763  009D  0020               	movlb	0	; select bank0
  3764  009E  01CC               	clrf	_nrf24l01TXPacketData
  3765                           
  3766                           ;main.c: 94: nrf24l01TXPacketData.ACKRequest = 0;
  3767  009F  104C               	bcf	_nrf24l01TXPacketData,0
  3768                           
  3769                           ;main.c: 95: nrf24l01SendString();
  3770  00A0  3181  2100  3180   	fcall	_nrf24l01SendString
  3771                           
  3772                           ;main.c: 96: sleep();
  3773  00A3  3187  2760  3180   	fcall	_sleep
  3774                           
  3775                           ;main.c: 98: strcpy(nrf24l01TXTopic, "ADC29");
  3776  00A6  3086               	movlw	low (STR_4| (0+32768))
  3777  00A7  0020               	movlb	0	; select bank0
  3778  00A8  00A1               	movwf	strcpy@from
  3779  00A9  3087               	movlw	high (STR_4| (0+32768))
  3780  00AA  00A2               	movwf	strcpy@from+1
  3781  00AB  3065               	movlw	(low (_nrf24l01TXTopic| 0))& (0+255)
  3782  00AC  3186  26C8  3180   	fcall	_strcpy
  3783                           
  3784                           ;main.c: 99: utoa(nrf24l01TXValue, getADCValue(29, 208900) - 40, 10);
  3785  00AF  3000               	movlw	0
  3786  00B0  0020               	movlb	0	; select bank0
  3787  00B1  00B2               	movwf	getADCValue@divider+3
  3788  00B2  3003               	movlw	3
  3789  00B3  00B1               	movwf	getADCValue@divider+2
  3790  00B4  3030               	movlw	48
  3791  00B5  00B0               	movwf	getADCValue@divider+1
  3792  00B6  3004               	movlw	4
  3793  00B7  00AF               	movwf	getADCValue@divider
  3794  00B8  301D               	movlw	29
  3795  00B9  3182  22EF  3180   	fcall	_getADCValue
  3796  00BC  0020               	movlb	0	; select bank0
  3797  00BD  082F               	movf	?_getADCValue,w
  3798  00BE  3ED8               	addlw	216
  3799  00BF  00BD               	movwf	utoa@val
  3800  00C0  30FF               	movlw	255
  3801  00C1  3D30               	addwfc	?_getADCValue+1,w
  3802  00C2  00BE               	movwf	utoa@val+1
  3803  00C3  300A               	movlw	10
  3804  00C4  00BF               	movwf	utoa@base
  3805  00C5  3000               	movlw	0
  3806  00C6  00C0               	movwf	utoa@base+1
  3807  00C7  305D               	movlw	(low (_nrf24l01TXValue| 0))& (0+255)
  3808  00C8  3183  2377  3180   	fcall	_utoa
  3809                           
  3810                           ;main.c: 100: nrf24l01TXPacketData.byte = 0x00;
  3811  00CB  0020               	movlb	0	; select bank0
  3812  00CC  01CC               	clrf	_nrf24l01TXPacketData
  3813                           
  3814                           ;main.c: 101: nrf24l01TXPacketData.ACKRequest = 0;
  3815  00CD  104C               	bcf	_nrf24l01TXPacketData,0
  3816                           
  3817                           ;main.c: 102: nrf24l01SendString();
  3818  00CE  3181  2100  3180   	fcall	_nrf24l01SendString
  3819                           
  3820                           ;main.c: 103: sleep();
  3821  00D1  3187  2760  3180   	fcall	_sleep
  3822                           
  3823                           ;main.c: 105: strcpy(nrf24l01TXTopic, "ADC31");
  3824  00D4  3080               	movlw	low (STR_5| (0+32768))
  3825  00D5  0020               	movlb	0	; select bank0
  3826  00D6  00A1               	movwf	strcpy@from
  3827  00D7  3087               	movlw	high (STR_5| (0+32768))
  3828  00D8  00A2               	movwf	strcpy@from+1
  3829  00D9  3065               	movlw	(low (_nrf24l01TXTopic| 0))& (0+255)
  3830  00DA  3186  26C8  3180   	fcall	_strcpy
  3831                           
  3832                           ;main.c: 106: utoa(nrf24l01TXValue, getADCValue(31, 2475), 10);
  3833  00DD  3000               	movlw	0
  3834  00DE  0020               	movlb	0	; select bank0
  3835  00DF  00B2               	movwf	getADCValue@divider+3
  3836  00E0  3000               	movlw	0
  3837  00E1  00B1               	movwf	getADCValue@divider+2
  3838  00E2  3009               	movlw	9
  3839  00E3  00B0               	movwf	getADCValue@divider+1
  3840  00E4  30AB               	movlw	171
  3841  00E5  00AF               	movwf	getADCValue@divider
  3842  00E6  301F               	movlw	31
  3843  00E7  3182  22EF  3180   	fcall	_getADCValue
  3844  00EA  0020               	movlb	0	; select bank0
  3845  00EB  0830               	movf	?_getADCValue+1,w
  3846  00EC  00BE               	movwf	utoa@val+1
  3847  00ED  082F               	movf	?_getADCValue,w
  3848  00EE  00BD               	movwf	utoa@val
  3849  00EF  300A               	movlw	10
  3850  00F0  00BF               	movwf	utoa@base
  3851  00F1  3000               	movlw	0
  3852  00F2  00C0               	movwf	utoa@base+1
  3853  00F3  305D               	movlw	(low (_nrf24l01TXValue| 0))& (0+255)
  3854  00F4  3183  2377  3180   	fcall	_utoa
  3855                           
  3856                           ;main.c: 107: nrf24l01TXPacketData.byte = 0x00;
  3857  00F7  0020               	movlb	0	; select bank0
  3858  00F8  01CC               	clrf	_nrf24l01TXPacketData
  3859                           
  3860                           ;main.c: 108: nrf24l01TXPacketData.ACKRequest = 0;
  3861  00F9  104C               	bcf	_nrf24l01TXPacketData,0
  3862                           
  3863                           ;main.c: 109: nrf24l01SendString();
  3864  00FA  3181  2100  3180   	fcall	_nrf24l01SendString
  3865                           
  3866                           ;main.c: 110: sleep();
  3867  00FD  3187  2760         	fcall	_sleep
  3868  00FF  0008               	return
  3869  0100                     __end_of_loop:	
  3870                           
  3871                           	psect	text5
  3872  0377                     __ptext5:	
  3873 ;; *************** function _utoa *****************
  3874 ;; Defined at:
  3875 ;;		line 17 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\itoa.c"
  3876 ;; Parameters:    Size  Location     Type
  3877 ;;  buf             1    wreg     PTR unsigned char 
  3878 ;;		 -> nrf24l01TXValue(8), 
  3879 ;;  val             2   29[BANK0 ] unsigned int 
  3880 ;;  base            2   31[BANK0 ] int 
  3881 ;; Auto vars:     Size  Location     Type
  3882 ;;  buf             1   37[BANK0 ] PTR unsigned char 
  3883 ;;		 -> nrf24l01TXValue(8), 
  3884 ;;  v               2   34[BANK0 ] unsigned int 
  3885 ;;  c               1   36[BANK0 ] unsigned char 
  3886 ;; Return value:  Size  Location     Type
  3887 ;;                  1    wreg      PTR unsigned char 
  3888 ;; Registers used:
  3889 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3890 ;; Tracked objects:
  3891 ;;		On entry : 0/0
  3892 ;;		On exit  : 0/0
  3893 ;;		Unchanged: 0/0
  3894 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3895 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3896 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3897 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3898 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3899 ;;Total ram usage:        9 bytes
  3900 ;; Hardware stack levels used:    1
  3901 ;; Hardware stack levels required when called:    7
  3902 ;; This function calls:
  3903 ;;		___lwdiv
  3904 ;;		___lwmod
  3905 ;; This function is called by:
  3906 ;;		_loop
  3907 ;;		_main
  3908 ;; This function uses a non-reentrant model
  3909 ;;
  3910                           
  3911                           
  3912                           ;psect for function _utoa
  3913  0377                     _utoa:	
  3914                           
  3915                           ;incstack = 0
  3916                           ; Regs used in _utoa: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3917                           ;utoa@buf stored from wreg
  3918  0377  0020               	movlb	0	; select bank0
  3919  0378  00C5               	movwf	utoa@buf
  3920  0379  083E               	movf	utoa@val+1,w
  3921  037A  00C3               	movwf	utoa@v+1
  3922  037B  083D               	movf	utoa@val,w
  3923  037C  00C2               	movwf	utoa@v
  3924  037D                     l2880:	
  3925  037D  0840               	movf	utoa@base+1,w
  3926  037E  00A2               	movwf	___lwdiv@divisor+1
  3927  037F  083F               	movf	utoa@base,w
  3928  0380  00A1               	movwf	___lwdiv@divisor
  3929  0381  0843               	movf	utoa@v+1,w
  3930  0382  00A4               	movwf	___lwdiv@dividend+1
  3931  0383  0842               	movf	utoa@v,w
  3932  0384  00A3               	movwf	___lwdiv@dividend
  3933  0385  3184  24DA  3183   	fcall	___lwdiv
  3934  0388  0020               	movlb	0	; select bank0
  3935  0389  0822               	movf	?___lwdiv+1,w
  3936  038A  00C3               	movwf	utoa@v+1
  3937  038B  0821               	movf	?___lwdiv,w
  3938  038C  00C2               	movwf	utoa@v
  3939  038D  3001               	movlw	1
  3940  038E  00C1               	movwf	??_utoa
  3941  038F  0841               	movf	??_utoa,w
  3942  0390  07C5               	addwf	utoa@buf,f
  3943  0391  0842               	movf	utoa@v,w
  3944  0392  0443               	iorwf	utoa@v+1,w
  3945  0393  1D03               	btfss	3,2
  3946  0394  2B7D               	goto	l2880
  3947  0395  0845               	movf	utoa@buf,w
  3948  0396  0086               	movwf	6
  3949  0397  0187               	clrf	7
  3950  0398  0181               	clrf	1
  3951  0399  3001               	movlw	1
  3952  039A  02C5               	subwf	utoa@buf,f
  3953  039B                     l2890:	
  3954  039B  0840               	movf	utoa@base+1,w
  3955  039C  00A2               	movwf	___lwmod@divisor+1
  3956  039D  083F               	movf	utoa@base,w
  3957  039E  00A1               	movwf	___lwmod@divisor
  3958  039F  083E               	movf	utoa@val+1,w
  3959  03A0  00A4               	movwf	___lwmod@dividend+1
  3960  03A1  083D               	movf	utoa@val,w
  3961  03A2  00A3               	movwf	___lwmod@dividend
  3962  03A3  3185  25CF  3183   	fcall	___lwmod
  3963  03A6  0020               	movlb	0	; select bank0
  3964  03A7  0821               	movf	?___lwmod,w
  3965  03A8  00C1               	movwf	??_utoa
  3966  03A9  0841               	movf	??_utoa,w
  3967  03AA  00C4               	movwf	utoa@c
  3968  03AB  0840               	movf	utoa@base+1,w
  3969  03AC  00A2               	movwf	___lwdiv@divisor+1
  3970  03AD  083F               	movf	utoa@base,w
  3971  03AE  00A1               	movwf	___lwdiv@divisor
  3972  03AF  083E               	movf	utoa@val+1,w
  3973  03B0  00A4               	movwf	___lwdiv@dividend+1
  3974  03B1  083D               	movf	utoa@val,w
  3975  03B2  00A3               	movwf	___lwdiv@dividend
  3976  03B3  3184  24DA  3183   	fcall	___lwdiv
  3977  03B6  0020               	movlb	0	; select bank0
  3978  03B7  0822               	movf	?___lwdiv+1,w
  3979  03B8  00BE               	movwf	utoa@val+1
  3980  03B9  0821               	movf	?___lwdiv,w
  3981  03BA  00BD               	movwf	utoa@val
  3982  03BB  300A               	movlw	10
  3983  03BC  0244               	subwf	utoa@c,w
  3984  03BD  1C03               	skipc
  3985  03BE  2BC3               	goto	l888
  3986  03BF  3007               	movlw	7
  3987  03C0  00C1               	movwf	??_utoa
  3988  03C1  0841               	movf	??_utoa,w
  3989  03C2  07C4               	addwf	utoa@c,f
  3990  03C3                     l888:	
  3991  03C3  3030               	movlw	48
  3992  03C4  00C1               	movwf	??_utoa
  3993  03C5  0841               	movf	??_utoa,w
  3994  03C6  07C4               	addwf	utoa@c,f
  3995  03C7  0844               	movf	utoa@c,w
  3996  03C8  00C1               	movwf	??_utoa
  3997  03C9  0845               	movf	utoa@buf,w
  3998  03CA  0086               	movwf	6
  3999  03CB  0187               	clrf	7
  4000  03CC  0841               	movf	??_utoa,w
  4001  03CD  0081               	movwf	1
  4002  03CE  3001               	movlw	1
  4003  03CF  02C5               	subwf	utoa@buf,f
  4004  03D0  083D               	movf	utoa@val,w
  4005  03D1  043E               	iorwf	utoa@val+1,w
  4006  03D2  1D03               	btfss	3,2
  4007  03D3  2B9B               	goto	l2890
  4008                           
  4009                           ;	Return value of _utoa is never used
  4010  03D4  3001               	movlw	1
  4011  03D5  00C1               	movwf	??_utoa
  4012  03D6  0841               	movf	??_utoa,w
  4013  03D7  07C5               	addwf	utoa@buf,f
  4014  03D8  0008               	return
  4015  03D9                     __end_of_utoa:	
  4016                           
  4017                           	psect	text6
  4018  05CF                     __ptext6:	
  4019 ;; *************** function ___lwmod *****************
  4020 ;; Defined at:
  4021 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\lwmod.c"
  4022 ;; Parameters:    Size  Location     Type
  4023 ;;  divisor         2    1[BANK0 ] unsigned int 
  4024 ;;  dividend        2    3[BANK0 ] unsigned int 
  4025 ;; Auto vars:     Size  Location     Type
  4026 ;;  counter         1    6[BANK0 ] unsigned char 
  4027 ;; Return value:  Size  Location     Type
  4028 ;;                  2    1[BANK0 ] unsigned int 
  4029 ;; Registers used:
  4030 ;;		wreg, status,2, status,0
  4031 ;; Tracked objects:
  4032 ;;		On entry : 0/0
  4033 ;;		On exit  : 0/0
  4034 ;;		Unchanged: 0/0
  4035 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4036 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4037 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4038 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4039 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4040 ;;Total ram usage:        6 bytes
  4041 ;; Hardware stack levels used:    1
  4042 ;; Hardware stack levels required when called:    6
  4043 ;; This function calls:
  4044 ;;		Nothing
  4045 ;; This function is called by:
  4046 ;;		_utoa
  4047 ;; This function uses a non-reentrant model
  4048 ;;
  4049                           
  4050                           
  4051                           ;psect for function ___lwmod
  4052  05CF                     ___lwmod:	
  4053                           
  4054                           ;incstack = 0
  4055                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  4056  05CF  0020               	movlb	0	; select bank0
  4057  05D0  0821               	movf	___lwmod@divisor,w
  4058  05D1  0422               	iorwf	___lwmod@divisor+1,w
  4059  05D2  1903               	btfsc	3,2
  4060  05D3  2DF7               	goto	l2088
  4061  05D4  01A6               	clrf	___lwmod@counter
  4062  05D5  0AA6               	incf	___lwmod@counter,f
  4063  05D6                     l2078:	
  4064  05D6  1BA2               	btfsc	___lwmod@divisor+1,7
  4065  05D7  2DE2               	goto	l2080
  4066  05D8  3001               	movlw	1
  4067  05D9                     u1055:	
  4068  05D9  35A1               	lslf	___lwmod@divisor,f
  4069  05DA  0DA2               	rlf	___lwmod@divisor+1,f
  4070  05DB  0B89               	decfsz	9,f
  4071  05DC  2DD9               	goto	u1055
  4072  05DD  3001               	movlw	1
  4073  05DE  00A5               	movwf	??___lwmod
  4074  05DF  0825               	movf	??___lwmod,w
  4075  05E0  07A6               	addwf	___lwmod@counter,f
  4076  05E1  2DD6               	goto	l2078
  4077  05E2                     l2080:	
  4078  05E2  0822               	movf	___lwmod@divisor+1,w
  4079  05E3  0224               	subwf	___lwmod@dividend+1,w
  4080  05E4  1D03               	skipz
  4081  05E5  2DE8               	goto	u1075
  4082  05E6  0821               	movf	___lwmod@divisor,w
  4083  05E7  0223               	subwf	___lwmod@dividend,w
  4084  05E8                     u1075:	
  4085  05E8  1C03               	skipc
  4086  05E9  2DEE               	goto	l2084
  4087  05EA  0821               	movf	___lwmod@divisor,w
  4088  05EB  02A3               	subwf	___lwmod@dividend,f
  4089  05EC  0822               	movf	___lwmod@divisor+1,w
  4090  05ED  3BA4               	subwfb	___lwmod@dividend+1,f
  4091  05EE                     l2084:	
  4092  05EE  3001               	movlw	1
  4093  05EF                     u1085:	
  4094  05EF  36A2               	lsrf	___lwmod@divisor+1,f
  4095  05F0  0CA1               	rrf	___lwmod@divisor,f
  4096  05F1  0B89               	decfsz	9,f
  4097  05F2  2DEF               	goto	u1085
  4098  05F3  3001               	movlw	1
  4099  05F4  02A6               	subwf	___lwmod@counter,f
  4100  05F5  1D03               	btfss	3,2
  4101  05F6  2DE2               	goto	l2080
  4102  05F7                     l2088:	
  4103  05F7  0824               	movf	___lwmod@dividend+1,w
  4104  05F8  00A2               	movwf	?___lwmod+1
  4105  05F9  0823               	movf	___lwmod@dividend,w
  4106  05FA  00A1               	movwf	?___lwmod
  4107  05FB  0008               	return
  4108  05FC                     __end_of___lwmod:	
  4109                           
  4110                           	psect	text7
  4111  04DA                     __ptext7:	
  4112 ;; *************** function ___lwdiv *****************
  4113 ;; Defined at:
  4114 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\lwdiv.c"
  4115 ;; Parameters:    Size  Location     Type
  4116 ;;  divisor         2    1[BANK0 ] unsigned int 
  4117 ;;  dividend        2    3[BANK0 ] unsigned int 
  4118 ;; Auto vars:     Size  Location     Type
  4119 ;;  quotient        2    6[BANK0 ] unsigned int 
  4120 ;;  counter         1    8[BANK0 ] unsigned char 
  4121 ;; Return value:  Size  Location     Type
  4122 ;;                  2    1[BANK0 ] unsigned int 
  4123 ;; Registers used:
  4124 ;;		wreg, status,2, status,0
  4125 ;; Tracked objects:
  4126 ;;		On entry : 0/0
  4127 ;;		On exit  : 0/0
  4128 ;;		Unchanged: 0/0
  4129 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4130 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4131 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4132 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4133 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4134 ;;Total ram usage:        8 bytes
  4135 ;; Hardware stack levels used:    1
  4136 ;; Hardware stack levels required when called:    6
  4137 ;; This function calls:
  4138 ;;		Nothing
  4139 ;; This function is called by:
  4140 ;;		_utoa
  4141 ;; This function uses a non-reentrant model
  4142 ;;
  4143                           
  4144                           
  4145                           ;psect for function ___lwdiv
  4146  04DA                     ___lwdiv:	
  4147                           
  4148                           ;incstack = 0
  4149                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  4150  04DA  0020               	movlb	0	; select bank0
  4151  04DB  01A6               	clrf	___lwdiv@quotient
  4152  04DC  01A7               	clrf	___lwdiv@quotient+1
  4153  04DD  0821               	movf	___lwdiv@divisor,w
  4154  04DE  0422               	iorwf	___lwdiv@divisor+1,w
  4155  04DF  1903               	btfsc	3,2
  4156  04E0  2D0A               	goto	l2066
  4157  04E1  01A8               	clrf	___lwdiv@counter
  4158  04E2  0AA8               	incf	___lwdiv@counter,f
  4159  04E3                     l2054:	
  4160  04E3  1BA2               	btfsc	___lwdiv@divisor+1,7
  4161  04E4  2CEF               	goto	l2056
  4162  04E5  3001               	movlw	1
  4163  04E6                     u985:	
  4164  04E6  35A1               	lslf	___lwdiv@divisor,f
  4165  04E7  0DA2               	rlf	___lwdiv@divisor+1,f
  4166  04E8  0B89               	decfsz	9,f
  4167  04E9  2CE6               	goto	u985
  4168  04EA  3001               	movlw	1
  4169  04EB  00A5               	movwf	??___lwdiv
  4170  04EC  0825               	movf	??___lwdiv,w
  4171  04ED  07A8               	addwf	___lwdiv@counter,f
  4172  04EE  2CE3               	goto	l2054
  4173  04EF                     l2056:	
  4174  04EF  3001               	movlw	1
  4175  04F0                     u1005:	
  4176  04F0  35A6               	lslf	___lwdiv@quotient,f
  4177  04F1  0DA7               	rlf	___lwdiv@quotient+1,f
  4178  04F2  0B89               	decfsz	9,f
  4179  04F3  2CF0               	goto	u1005
  4180  04F4  0822               	movf	___lwdiv@divisor+1,w
  4181  04F5  0224               	subwf	___lwdiv@dividend+1,w
  4182  04F6  1D03               	skipz
  4183  04F7  2CFA               	goto	u1015
  4184  04F8  0821               	movf	___lwdiv@divisor,w
  4185  04F9  0223               	subwf	___lwdiv@dividend,w
  4186  04FA                     u1015:	
  4187  04FA  1C03               	skipc
  4188  04FB  2D01               	goto	l2062
  4189  04FC  0821               	movf	___lwdiv@divisor,w
  4190  04FD  02A3               	subwf	___lwdiv@dividend,f
  4191  04FE  0822               	movf	___lwdiv@divisor+1,w
  4192  04FF  3BA4               	subwfb	___lwdiv@dividend+1,f
  4193  0500  1426               	bsf	___lwdiv@quotient,0
  4194  0501                     l2062:	
  4195  0501  3001               	movlw	1
  4196  0502                     u1025:	
  4197  0502  36A2               	lsrf	___lwdiv@divisor+1,f
  4198  0503  0CA1               	rrf	___lwdiv@divisor,f
  4199  0504  0B89               	decfsz	9,f
  4200  0505  2D02               	goto	u1025
  4201  0506  3001               	movlw	1
  4202  0507  02A8               	subwf	___lwdiv@counter,f
  4203  0508  1D03               	btfss	3,2
  4204  0509  2CEF               	goto	l2056
  4205  050A                     l2066:	
  4206  050A  0827               	movf	___lwdiv@quotient+1,w
  4207  050B  00A2               	movwf	?___lwdiv+1
  4208  050C  0826               	movf	___lwdiv@quotient,w
  4209  050D  00A1               	movwf	?___lwdiv
  4210  050E  0008               	return
  4211  050F                     __end_of___lwdiv:	
  4212                           
  4213                           	psect	text8
  4214  06C8                     __ptext8:	
  4215 ;; *************** function _strcpy *****************
  4216 ;; Defined at:
  4217 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\strcpy.c"
  4218 ;; Parameters:    Size  Location     Type
  4219 ;;  to              1    wreg     PTR unsigned char 
  4220 ;;		 -> nrf24l01RXName(16), nrf24l01RXValue(8), nrf24l01RXTopic(8), nrf24l01TXName(16), 
  4221 ;;		 -> nrf24l01TXTopic(8), romData(19), 
  4222 ;;  from            2    1[BANK0 ] PTR const unsigned char 
  4223 ;;		 -> STR_7(5), nrf24l01TXName(16), STR_6(15), romData.name(16), 
  4224 ;;		 -> STR_5(6), STR_4(6), STR_3(5), STR_2(5), 
  4225 ;;		 -> nrf24l01TXValue(8), STR_1(4), nrf24l01TXTopic(8), romData(19), 
  4226 ;; Auto vars:     Size  Location     Type
  4227 ;;  to              1    5[BANK0 ] PTR unsigned char 
  4228 ;;		 -> nrf24l01RXName(16), nrf24l01RXValue(8), nrf24l01RXTopic(8), nrf24l01TXName(16), 
  4229 ;;		 -> nrf24l01TXTopic(8), romData(19), 
  4230 ;;  cp              1    4[BANK0 ] PTR unsigned char 
  4231 ;;		 -> nrf24l01RXName(16), nrf24l01RXValue(8), nrf24l01RXTopic(8), nrf24l01TXName(16), 
  4232 ;;		 -> nrf24l01TXTopic(8), romData(19), 
  4233 ;; Return value:  Size  Location     Type
  4234 ;;                  1    wreg      PTR unsigned char 
  4235 ;; Registers used:
  4236 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath
  4237 ;; Tracked objects:
  4238 ;;		On entry : 0/0
  4239 ;;		On exit  : 0/0
  4240 ;;		Unchanged: 0/0
  4241 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4242 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4243 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4244 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4245 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4246 ;;Total ram usage:        5 bytes
  4247 ;; Hardware stack levels used:    1
  4248 ;; Hardware stack levels required when called:    6
  4249 ;; This function calls:
  4250 ;;		Nothing
  4251 ;; This function is called by:
  4252 ;;		_loop
  4253 ;;		_main
  4254 ;;		_nrf24l01ReceiveString
  4255 ;; This function uses a non-reentrant model
  4256 ;;
  4257                           
  4258                           
  4259                           ;psect for function _strcpy
  4260  06C8                     _strcpy:	
  4261                           
  4262                           ;incstack = 0
  4263                           ; Regs used in _strcpy: [wreg-fsr1h+status,2+status,0+pclath]
  4264                           ;strcpy@to stored from wreg
  4265  06C8  0020               	movlb	0	; select bank0
  4266  06C9  00A5               	movwf	strcpy@to
  4267  06CA  0825               	movf	strcpy@to,w
  4268  06CB  00A3               	movwf	??_strcpy
  4269  06CC  0823               	movf	??_strcpy,w
  4270  06CD  00A4               	movwf	strcpy@cp
  4271  06CE                     l2876:	
  4272  06CE  0824               	movf	strcpy@cp,w
  4273  06CF  0086               	movwf	6
  4274  06D0  0187               	clrf	7
  4275  06D1  0821               	movf	strcpy@from,w
  4276  06D2  0084               	movwf	4
  4277  06D3  0822               	movf	strcpy@from+1,w
  4278  06D4  0085               	movwf	5
  4279  06D5  0800               	movf	0,w	;code access
  4280  06D6  3FC0               	movwi [0]fsr1
  4281  06D7  0889               	movf	9,f
  4282  06D8  1903               	btfsc	3,2
  4283  06D9  0008               	return
  4284  06DA  3001               	movlw	1
  4285  06DB  00A3               	movwf	??_strcpy
  4286  06DC  0823               	movf	??_strcpy,w
  4287  06DD  07A4               	addwf	strcpy@cp,f
  4288  06DE  3001               	movlw	1
  4289  06DF  07A1               	addwf	strcpy@from,f
  4290  06E0  3000               	movlw	0
  4291  06E1  3DA2               	addwfc	strcpy@from+1,f
  4292  06E2  2ECE               	goto	l2876
  4293  06E3                     __end_of_strcpy:	
  4294                           ;	Return value of _strcpy is never used
  4295                           
  4296                           
  4297                           	psect	text9
  4298  0760                     __ptext9:	
  4299 ;; *************** function _sleep *****************
  4300 ;; Defined at:
  4301 ;;		line 46 in file "main.c"
  4302 ;; Parameters:    Size  Location     Type
  4303 ;;		None
  4304 ;; Auto vars:     Size  Location     Type
  4305 ;;		None
  4306 ;; Return value:  Size  Location     Type
  4307 ;;                  1    wreg      void 
  4308 ;; Registers used:
  4309 ;;		None
  4310 ;; Tracked objects:
  4311 ;;		On entry : 0/0
  4312 ;;		On exit  : 0/0
  4313 ;;		Unchanged: 0/0
  4314 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4315 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4316 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4317 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4318 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4319 ;;Total ram usage:        0 bytes
  4320 ;; Hardware stack levels used:    1
  4321 ;; Hardware stack levels required when called:    6
  4322 ;; This function calls:
  4323 ;;		Nothing
  4324 ;; This function is called by:
  4325 ;;		_loop
  4326 ;;		_main
  4327 ;;		_checkRxData
  4328 ;; This function uses a non-reentrant model
  4329 ;;
  4330                           
  4331                           
  4332                           ;psect for function _sleep
  4333  0760                     _sleep:	
  4334  0760                     l219:	
  4335                           ;incstack = 0
  4336                           ; Regs used in _sleep: []
  4337                           ;main.c: 47: while (1){
  4338                           
  4339  0760  0063               	sleep	;# 
  4340                           
  4341                           ;main.c: 50: __nop();
  4342  0761  0000               	nop
  4343                           
  4344                           ;main.c: 51: __nop();
  4345  0762  0000               	nop
  4346                           
  4347                           ;main.c: 53: if (!STATUSbits.nTO && !STATUSbits.nPD) {
  4348  0763  0020               	movlb	0	; select bank0
  4349  0764  1A03               	btfsc	3,4	;volatile
  4350  0765  2F60               	goto	l219
  4351  0766  1D83               	btfss	3,3	;volatile
  4352  0767  0008               	return
  4353  0768  2F60               	goto	l219
  4354  0769                     __end_of_sleep:	
  4355                           ;main.c: 54: return;
  4356                           
  4357                           
  4358                           	psect	text10
  4359  0100                     __ptext10:	
  4360 ;; *************** function _nrf24l01SendString *****************
  4361 ;; Defined at:
  4362 ;;		line 232 in file "nrf24l01.c"
  4363 ;; Parameters:    Size  Location     Type
  4364 ;;		None
  4365 ;; Auto vars:     Size  Location     Type
  4366 ;;  i               1    8[BANK0 ] unsigned char 
  4367 ;; Return value:  Size  Location     Type
  4368 ;;                  1    wreg      void 
  4369 ;; Registers used:
  4370 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4371 ;; Tracked objects:
  4372 ;;		On entry : 0/0
  4373 ;;		On exit  : 0/0
  4374 ;;		Unchanged: 0/0
  4375 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4376 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4377 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4378 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4379 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4380 ;;Total ram usage:        2 bytes
  4381 ;; Hardware stack levels used:    1
  4382 ;; Hardware stack levels required when called:   10
  4383 ;; This function calls:
  4384 ;;		_enableInterrupts
  4385 ;;		_nrf24l01CEHigh
  4386 ;;		_nrf24l01CELow
  4387 ;;		_nrf24l01SPIEnd
  4388 ;;		_nrf24l01SPISend
  4389 ;;		_nrf24l01SPIStart
  4390 ;;		_nrf24l01SetRXMode
  4391 ;; This function is called by:
  4392 ;;		_loop
  4393 ;;		_main
  4394 ;;		_nrf24l01ReceiveString
  4395 ;; This function uses a non-reentrant model
  4396 ;;
  4397                           
  4398                           
  4399                           ;psect for function _nrf24l01SendString
  4400  0100                     _nrf24l01SendString:	
  4401                           
  4402                           ;nrf24l01.c: 235: unsigned char i;;nrf24l01.c: 237: if (counter){
  4403                           
  4404                           ;incstack = 0
  4405                           ; Regs used in _nrf24l01SendString: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4406  0100  0020               	movlb	0	; select bank0
  4407  0101  0847               	movf	_counter,w
  4408  0102  0448               	iorwf	_counter+1,w
  4409  0103  1903               	btfsc	3,2
  4410  0104  2909               	goto	l339
  4411                           
  4412                           ;nrf24l01.c: 238: counter--;
  4413  0105  3001               	movlw	1
  4414  0106  02C7               	subwf	_counter,f
  4415  0107  3000               	movlw	0
  4416  0108  3BC8               	subwfb	_counter+1,f
  4417  0109                     l339:	
  4418                           ;nrf24l01.c: 239: };nrf24l01.c: 242: RESEND:
  4419                           
  4420                           
  4421                           ;nrf24l01.c: 245: i = 0xFF;
  4422  0109  30FF               	movlw	255
  4423  010A  00A7               	movwf	??_nrf24l01SendString
  4424  010B  0827               	movf	??_nrf24l01SendString,w
  4425  010C  00A8               	movwf	nrf24l01SendString@i
  4426  010D                     l2284:	
  4427                           ;nrf24l01.c: 246: while (nrf24l01.TXBusy){
  4428                           
  4429  010D  0020               	movlb	0	; select bank0
  4430  010E  1CCB               	btfss	_nrf24l01,1	;volatile
  4431  010F  2919               	goto	l343
  4432                           
  4433                           ;nrf24l01.c: 247: if (!--i) {
  4434  0110  3001               	movlw	1
  4435  0111  02A8               	subwf	nrf24l01SendString@i,f
  4436  0112  1903               	btfsc	3,2
  4437  0113  2909               	goto	l339
  4438                           
  4439                           ;nrf24l01.c: 249: };nrf24l01.c: 250: _delay((unsigned long)((50)*(16000000/4000000.0)));
  4440                           
  4441                           ;nrf24l01.c: 248: goto RESEND;
  4442  0114  3042               	movlw	66
  4443  0115                     u1857:	
  4444  0115  0B89               	decfsz	9,f
  4445  0116  2915               	goto	u1857
  4446  0117  3200               	nop2
  4447  0118  290D               	goto	l2284
  4448  0119                     l343:	
  4449                           
  4450                           ;nrf24l01.c: 251: };nrf24l01.c: 254: nrf24l01.TXBusy = 1;
  4451  0119  14CB               	bsf	_nrf24l01,1	;volatile
  4452                           
  4453                           ;nrf24l01.c: 257: enableInterrupts(0);
  4454  011A  3000               	movlw	0
  4455  011B  3187  2771  3181   	fcall	_enableInterrupts
  4456                           
  4457                           ;nrf24l01.c: 260: nrf24l01SetRXMode(0);
  4458  011E  3000               	movlw	0
  4459  011F  3184  2468  3181   	fcall	_nrf24l01SetRXMode
  4460                           
  4461                           ;nrf24l01.c: 263: nrf24l01SPIStart();
  4462  0122  3187  2769  3181   	fcall	_nrf24l01SPIStart
  4463                           
  4464                           ;nrf24l01.c: 266: nrf24l01SPISend(0b10110000);
  4465  0125  30B0               	movlw	176
  4466  0126  3187  2753  3181   	fcall	_nrf24l01SPISend
  4467                           
  4468                           ;nrf24l01.c: 271: for (i = 0; (nrf24l01TXName[i] != '\0') && (i < sizeof(nrf24l01TXName)
      +                          ); i++){
  4469  0129  0020               	movlb	0	; select bank0
  4470  012A  01A8               	clrf	nrf24l01SendString@i
  4471  012B  2939               	goto	l2294
  4472  012C                     l2290:	
  4473                           
  4474                           ;nrf24l01.c: 272: nrf24l01SPISend(nrf24l01TXName[i]);
  4475  012C  0828               	movf	nrf24l01SendString@i,w
  4476  012D  3EC3               	addlw	(low (_nrf24l01TXName| 0))& (0+255)
  4477  012E  0086               	movwf	6
  4478  012F  0187               	clrf	7
  4479  0130  0801               	movf	1,w
  4480  0131  3187  2753  3181   	fcall	_nrf24l01SPISend
  4481  0134  3001               	movlw	1
  4482  0135  0020               	movlb	0	; select bank0
  4483  0136  00A7               	movwf	??_nrf24l01SendString
  4484  0137  0827               	movf	??_nrf24l01SendString,w
  4485  0138  07A8               	addwf	nrf24l01SendString@i,f
  4486  0139                     l2294:	
  4487  0139  0828               	movf	nrf24l01SendString@i,w
  4488  013A  3EC3               	addlw	(low (_nrf24l01TXName| 0))& (0+255)
  4489  013B  0086               	movwf	6
  4490  013C  0187               	clrf	7
  4491  013D  0801               	movf	1,w
  4492  013E  1903               	btfsc	3,2
  4493  013F  2944               	goto	l2298
  4494  0140  3010               	movlw	16
  4495  0141  0228               	subwf	nrf24l01SendString@i,w
  4496  0142  1C03               	skipc
  4497  0143  292C               	goto	l2290
  4498  0144                     l2298:	
  4499                           
  4500                           ;nrf24l01.c: 273: };nrf24l01.c: 276: nrf24l01SPISend('/');
  4501  0144  302F               	movlw	47
  4502  0145  3187  2753  3181   	fcall	_nrf24l01SPISend
  4503                           
  4504                           ;nrf24l01.c: 279: for (i = 0; (nrf24l01TXTopic[i] != '\0') && (i < sizeof(nrf24l01TXTopi
      +                          c)); i++){
  4505  0148  0020               	movlb	0	; select bank0
  4506  0149  01A8               	clrf	nrf24l01SendString@i
  4507  014A  2958               	goto	l2306
  4508  014B                     l2302:	
  4509                           
  4510                           ;nrf24l01.c: 280: nrf24l01SPISend(nrf24l01TXTopic[i]);
  4511  014B  0828               	movf	nrf24l01SendString@i,w
  4512  014C  3E65               	addlw	(low (_nrf24l01TXTopic| 0))& (0+255)
  4513  014D  0086               	movwf	6
  4514  014E  0187               	clrf	7
  4515  014F  0801               	movf	1,w
  4516  0150  3187  2753  3181   	fcall	_nrf24l01SPISend
  4517  0153  3001               	movlw	1
  4518  0154  0020               	movlb	0	; select bank0
  4519  0155  00A7               	movwf	??_nrf24l01SendString
  4520  0156  0827               	movf	??_nrf24l01SendString,w
  4521  0157  07A8               	addwf	nrf24l01SendString@i,f
  4522  0158                     l2306:	
  4523  0158  0828               	movf	nrf24l01SendString@i,w
  4524  0159  3E65               	addlw	(low (_nrf24l01TXTopic| 0))& (0+255)
  4525  015A  0086               	movwf	6
  4526  015B  0187               	clrf	7
  4527  015C  0801               	movf	1,w
  4528  015D  1903               	btfsc	3,2
  4529  015E  2963               	goto	l2310
  4530  015F  3008               	movlw	8
  4531  0160  0228               	subwf	nrf24l01SendString@i,w
  4532  0161  1C03               	skipc
  4533  0162  294B               	goto	l2302
  4534  0163                     l2310:	
  4535                           
  4536                           ;nrf24l01.c: 281: };nrf24l01.c: 284: nrf24l01SPISend('/');
  4537  0163  302F               	movlw	47
  4538  0164  3187  2753  3181   	fcall	_nrf24l01SPISend
  4539                           
  4540                           ;nrf24l01.c: 287: for (i = 0; (nrf24l01TXValue[i] != '\0') && (i < sizeof(nrf24l01TXValu
      +                          e)); i++){
  4541  0167  0020               	movlb	0	; select bank0
  4542  0168  01A8               	clrf	nrf24l01SendString@i
  4543  0169  2977               	goto	l2318
  4544  016A                     l2314:	
  4545                           
  4546                           ;nrf24l01.c: 288: nrf24l01SPISend(nrf24l01TXValue[i]);
  4547  016A  0828               	movf	nrf24l01SendString@i,w
  4548  016B  3E5D               	addlw	(low (_nrf24l01TXValue| 0))& (0+255)
  4549  016C  0086               	movwf	6
  4550  016D  0187               	clrf	7
  4551  016E  0801               	movf	1,w
  4552  016F  3187  2753  3181   	fcall	_nrf24l01SPISend
  4553  0172  3001               	movlw	1
  4554  0173  0020               	movlb	0	; select bank0
  4555  0174  00A7               	movwf	??_nrf24l01SendString
  4556  0175  0827               	movf	??_nrf24l01SendString,w
  4557  0176  07A8               	addwf	nrf24l01SendString@i,f
  4558  0177                     l2318:	
  4559  0177  0828               	movf	nrf24l01SendString@i,w
  4560  0178  3E5D               	addlw	(low (_nrf24l01TXValue| 0))& (0+255)
  4561  0179  0086               	movwf	6
  4562  017A  0187               	clrf	7
  4563  017B  0801               	movf	1,w
  4564  017C  1903               	btfsc	3,2
  4565  017D  2982               	goto	l2322
  4566  017E  3008               	movlw	8
  4567  017F  0228               	subwf	nrf24l01SendString@i,w
  4568  0180  1C03               	skipc
  4569  0181  296A               	goto	l2314
  4570  0182                     l2322:	
  4571                           
  4572                           ;nrf24l01.c: 289: };nrf24l01.c: 292: nrf24l01SPIEnd();
  4573  0182  3187  2779  3181   	fcall	_nrf24l01SPIEnd
  4574                           
  4575                           ;nrf24l01.c: 295: nrf24l01CEHigh();
  4576  0185  3187  27B3  3181   	fcall	_nrf24l01CEHigh
  4577                           
  4578                           ;nrf24l01.c: 296: _delay((unsigned long)((20)*(16000000/4000000.0)));
  4579  0188  301A               	movlw	26
  4580  0189                     u1867:	
  4581  0189  0B89               	decfsz	9,f
  4582  018A  2989               	goto	u1867
  4583  018B  3200               	nop2
  4584                           
  4585                           ;nrf24l01.c: 297: nrf24l01CELow();
  4586  018C  3187  27B0  3181   	fcall	_nrf24l01CELow
  4587                           
  4588                           ;nrf24l01.c: 300: enableInterrupts(1);
  4589  018F  3001               	movlw	1
  4590  0190  3187  2771  3181   	fcall	_enableInterrupts
  4591                           
  4592                           ;nrf24l01.c: 303: i = 0xFF;
  4593  0193  30FF               	movlw	255
  4594  0194  0020               	movlb	0	; select bank0
  4595  0195  00A7               	movwf	??_nrf24l01SendString
  4596  0196  0827               	movf	??_nrf24l01SendString,w
  4597  0197  00A8               	movwf	nrf24l01SendString@i
  4598  0198                     l2336:	
  4599                           ;nrf24l01.c: 304: while (nrf24l01.TXBusy){
  4600                           
  4601  0198  0020               	movlb	0	; select bank0
  4602  0199  1CCB               	btfss	_nrf24l01,1	;volatile
  4603  019A  29A4               	goto	l2338
  4604                           
  4605                           ;nrf24l01.c: 305: if (!--i) {
  4606  019B  3001               	movlw	1
  4607  019C  02A8               	subwf	nrf24l01SendString@i,f
  4608  019D  1903               	btfsc	3,2
  4609  019E  2909               	goto	l339
  4610                           
  4611                           ;nrf24l01.c: 307: };nrf24l01.c: 308: _delay((unsigned long)((50)*(16000000/4000000.0)));
  4612                           
  4613                           ;nrf24l01.c: 306: goto RESEND;
  4614  019F  3042               	movlw	66
  4615  01A0                     u1877:	
  4616  01A0  0B89               	decfsz	9,f
  4617  01A1  29A0               	goto	u1877
  4618  01A2  3200               	nop2
  4619  01A3  2998               	goto	l2336
  4620  01A4                     l2338:	
  4621                           
  4622                           ;nrf24l01.c: 309: };nrf24l01.c: 312: i = 0xFF;
  4623  01A4  30FF               	movlw	255
  4624  01A5  00A7               	movwf	??_nrf24l01SendString
  4625  01A6  0827               	movf	??_nrf24l01SendString,w
  4626  01A7  00A8               	movwf	nrf24l01SendString@i
  4627  01A8                     l2346:	
  4628                           ;nrf24l01.c: 313: while (nrf24l01TXPacketData.ACKRequest){
  4629                           
  4630  01A8  0020               	movlb	0	; select bank0
  4631  01A9  1C4C               	btfss	_nrf24l01TXPacketData,0
  4632  01AA  0008               	return
  4633                           
  4634                           ;nrf24l01.c: 314: if (!--i) {
  4635  01AB  3001               	movlw	1
  4636  01AC  02A8               	subwf	nrf24l01SendString@i,f
  4637  01AD  1D03               	btfss	3,2
  4638  01AE  29B4               	goto	l2344
  4639                           
  4640                           ;nrf24l01.c: 315: counter++;
  4641  01AF  3001               	movlw	1
  4642  01B0  07C7               	addwf	_counter,f
  4643  01B1  3000               	movlw	0
  4644  01B2  3DC8               	addwfc	_counter+1,f
  4645                           
  4646                           ;nrf24l01.c: 316: goto RESEND;
  4647  01B3  2909               	goto	l339
  4648  01B4                     l2344:	
  4649                           
  4650                           ;nrf24l01.c: 317: };nrf24l01.c: 318: _delay((unsigned long)((200)*(16000000/4000000.0)))
      +                          ;
  4651  01B4  30A0               	movlw	160
  4652  01B5                     u1887:	
  4653  01B5  3200               	nop2
  4654  01B6  0B89               	decfsz	9,f
  4655  01B7  29B5               	goto	u1887
  4656  01B8  29A8               	goto	l2346
  4657  01B9                     __end_of_nrf24l01SendString:	
  4658                           
  4659                           	psect	text11
  4660  0468                     __ptext11:	
  4661 ;; *************** function _nrf24l01SetRXMode *****************
  4662 ;; Defined at:
  4663 ;;		line 74 in file "nrf24l01.c"
  4664 ;; Parameters:    Size  Location     Type
  4665 ;;  rxMode          1    wreg     unsigned char 
  4666 ;; Auto vars:     Size  Location     Type
  4667 ;;  rxMode          1    6[BANK0 ] unsigned char 
  4668 ;;  config          1    5[BANK0 ] struct .
  4669 ;; Return value:  Size  Location     Type
  4670 ;;                  1    wreg      void 
  4671 ;; Registers used:
  4672 ;;		wreg, status,2, status,0, pclath, cstack
  4673 ;; Tracked objects:
  4674 ;;		On entry : 0/0
  4675 ;;		On exit  : 0/0
  4676 ;;		Unchanged: 0/0
  4677 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4678 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4679 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4680 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4681 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4682 ;;Total ram usage:        3 bytes
  4683 ;; Hardware stack levels used:    1
  4684 ;; Hardware stack levels required when called:    9
  4685 ;; This function calls:
  4686 ;;		_nrf24l01CEHigh
  4687 ;;		_nrf24l01CELow
  4688 ;;		_nrf24l01Send
  4689 ;; This function is called by:
  4690 ;;		_nrf24l01SendString
  4691 ;;		_checkRxData
  4692 ;;		_nrf24l01CheckACK
  4693 ;; This function uses a non-reentrant model
  4694 ;;
  4695                           
  4696                           
  4697                           ;psect for function _nrf24l01SetRXMode
  4698  0468                     _nrf24l01SetRXMode:	
  4699                           
  4700                           ;incstack = 0
  4701                           ; Regs used in _nrf24l01SetRXMode: [wreg+status,2+status,0+pclath+cstack]
  4702                           ;nrf24l01SetRXMode@rxMode stored from wreg
  4703  0468  0020               	movlb	0	; select bank0
  4704  0469  00A6               	movwf	nrf24l01SetRXMode@rxMode
  4705                           
  4706                           ;nrf24l01.c: 76: n_CONFIG_t config;;nrf24l01.c: 79: config.byte = nrf24l01Send(0b0000000
      +                          0 | 0x00, 0);
  4707  046A  01A1               	clrf	nrf24l01Send@data
  4708  046B  3000               	movlw	0
  4709  046C  3186  266A  3184   	fcall	_nrf24l01Send
  4710  046F  0020               	movlb	0	; select bank0
  4711  0470  00A4               	movwf	??_nrf24l01SetRXMode
  4712  0471  0824               	movf	??_nrf24l01SetRXMode,w
  4713  0472  00A5               	movwf	nrf24l01SetRXMode@config
  4714                           
  4715                           ;nrf24l01.c: 82: if (config.PRIM_RX != rxMode){
  4716  0473  0825               	movf	nrf24l01SetRXMode@config,w
  4717  0474  3901               	andlw	1
  4718  0475  0626               	xorwf	nrf24l01SetRXMode@rxMode,w
  4719  0476  1903               	skipnz
  4720  0477  2C9C               	goto	l1990
  4721                           
  4722                           ;nrf24l01.c: 85: nrf24l01CELow();
  4723  0478  3187  27B0  3184   	fcall	_nrf24l01CELow
  4724                           
  4725                           ;nrf24l01.c: 86: _delay((unsigned long)((200)*(16000000/4000000.0)));
  4726  047B  30A0               	movlw	160
  4727  047C                     u1897:	
  4728  047C  3200               	nop2
  4729  047D  0B89               	decfsz	9,f
  4730  047E  2C7C               	goto	u1897
  4731                           
  4732                           ;nrf24l01.c: 93: config.PRIM_RX = rxMode;
  4733  047F  0020               	movlb	0	; select bank0
  4734  0480  0826               	movf	nrf24l01SetRXMode@rxMode,w
  4735  0481  3901               	andlw	1
  4736  0482  1025               	bcf	nrf24l01SetRXMode@config,0
  4737  0483  1D03               	skipz
  4738  0484  1425               	bsf	nrf24l01SetRXMode@config,0
  4739                           
  4740                           ;nrf24l01.c: 94: nrf24l01Send(0b00100000 | 0x00, config.byte);
  4741  0485  0825               	movf	nrf24l01SetRXMode@config,w
  4742  0486  00A4               	movwf	??_nrf24l01SetRXMode
  4743  0487  0824               	movf	??_nrf24l01SetRXMode,w
  4744  0488  00A1               	movwf	nrf24l01Send@data
  4745  0489  3020               	movlw	32
  4746  048A  3186  266A  3184   	fcall	_nrf24l01Send
  4747                           
  4748                           ;nrf24l01.c: 97: _delay((unsigned long)((200)*(16000000/4000000.0)));
  4749  048D  30A0               	movlw	160
  4750  048E                     u1907:	
  4751  048E  3200               	nop2
  4752  048F  0B89               	decfsz	9,f
  4753  0490  2C8E               	goto	u1907
  4754                           
  4755                           ;nrf24l01.c: 100: if (rxMode){
  4756  0491  0020               	movlb	0	; select bank0
  4757  0492  0826               	movf	nrf24l01SetRXMode@rxMode,w
  4758  0493  1903               	btfsc	3,2
  4759  0494  2C9C               	goto	l1990
  4760                           
  4761                           ;nrf24l01.c: 101: nrf24l01CEHigh();
  4762  0495  3187  27B3  3184   	fcall	_nrf24l01CEHigh
  4763                           
  4764                           ;nrf24l01.c: 102: _delay((unsigned long)((200)*(16000000/4000000.0)));
  4765  0498  30A0               	movlw	160
  4766  0499                     u1917:	
  4767  0499  3200               	nop2
  4768  049A  0B89               	decfsz	9,f
  4769  049B  2C99               	goto	u1917
  4770  049C                     l1990:	
  4771                           
  4772                           ;nrf24l01.c: 103: };nrf24l01.c: 104: };nrf24l01.c: 107: nrf24l01.RXMode = rxMode;
  4773  049C  0020               	movlb	0	; select bank0
  4774  049D  0826               	movf	nrf24l01SetRXMode@rxMode,w
  4775  049E  3901               	andlw	1
  4776  049F  11CB               	bcf	_nrf24l01,3	;volatile
  4777  04A0  1D03               	skipz
  4778  04A1  15CB               	bsf	_nrf24l01,3	;volatile
  4779  04A2  0008               	return
  4780  04A3                     __end_of_nrf24l01SetRXMode:	
  4781                           
  4782                           	psect	text12
  4783  066A                     __ptext12:	
  4784 ;; *************** function _nrf24l01Send *****************
  4785 ;; Defined at:
  4786 ;;		line 19 in file "nrf24l01.c"
  4787 ;; Parameters:    Size  Location     Type
  4788 ;;  command         1    wreg     unsigned char 
  4789 ;;  data            1    1[BANK0 ] unsigned char 
  4790 ;; Auto vars:     Size  Location     Type
  4791 ;;  command         1    3[BANK0 ] unsigned char 
  4792 ;; Return value:  Size  Location     Type
  4793 ;;                  1    wreg      unsigned char 
  4794 ;; Registers used:
  4795 ;;		wreg, status,2, status,0, pclath, cstack
  4796 ;; Tracked objects:
  4797 ;;		On entry : 0/0
  4798 ;;		On exit  : 0/0
  4799 ;;		Unchanged: 0/0
  4800 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4801 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4802 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4803 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4804 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4805 ;;Total ram usage:        3 bytes
  4806 ;; Hardware stack levels used:    1
  4807 ;; Hardware stack levels required when called:    8
  4808 ;; This function calls:
  4809 ;;		_enableInterrupts
  4810 ;;		_nrf24l01SPIEnd
  4811 ;;		_nrf24l01SPISend
  4812 ;;		_nrf24l01SPIStart
  4813 ;; This function is called by:
  4814 ;;		_nrf24l01SetRXMode
  4815 ;;		_nrf24l01InitRegisters
  4816 ;;		_nrf24l01ReceiveString
  4817 ;; This function uses a non-reentrant model
  4818 ;;
  4819                           
  4820                           
  4821                           ;psect for function _nrf24l01Send
  4822  066A                     _nrf24l01Send:	
  4823                           
  4824                           ;incstack = 0
  4825                           ; Regs used in _nrf24l01Send: [wreg+status,2+status,0+pclath+cstack]
  4826                           ;nrf24l01Send@command stored from wreg
  4827  066A  0020               	movlb	0	; select bank0
  4828  066B  00A3               	movwf	nrf24l01Send@command
  4829                           
  4830                           ;nrf24l01.c: 22: enableInterrupts(0);
  4831  066C  3000               	movlw	0
  4832  066D  3187  2771  3186   	fcall	_enableInterrupts
  4833                           
  4834                           ;nrf24l01.c: 25: nrf24l01SPIStart();
  4835  0670  3187  2769  3186   	fcall	_nrf24l01SPIStart
  4836                           
  4837                           ;nrf24l01.c: 28: nrf24l01SPISend(command);
  4838  0673  0020               	movlb	0	; select bank0
  4839  0674  0823               	movf	nrf24l01Send@command,w
  4840  0675  3187  2753  3186   	fcall	_nrf24l01SPISend
  4841                           
  4842                           ;nrf24l01.c: 31: data = nrf24l01SPISend(data);
  4843  0678  0020               	movlb	0	; select bank0
  4844  0679  0821               	movf	nrf24l01Send@data,w
  4845  067A  3187  2753  3186   	fcall	_nrf24l01SPISend
  4846  067D  0020               	movlb	0	; select bank0
  4847  067E  00A2               	movwf	??_nrf24l01Send
  4848  067F  0822               	movf	??_nrf24l01Send,w
  4849  0680  00A1               	movwf	nrf24l01Send@data
  4850                           
  4851                           ;nrf24l01.c: 34: nrf24l01SPIEnd();
  4852  0681  3187  2779  3186   	fcall	_nrf24l01SPIEnd
  4853                           
  4854                           ;nrf24l01.c: 37: enableInterrupts(1);
  4855  0684  3001               	movlw	1
  4856  0685  3187  2771         	fcall	_enableInterrupts
  4857                           
  4858                           ;nrf24l01.c: 39: return data;
  4859  0687  0020               	movlb	0	; select bank0
  4860  0688  0821               	movf	nrf24l01Send@data,w
  4861  0689  0008               	return
  4862  068A                     __end_of_nrf24l01Send:	
  4863                           
  4864                           	psect	text13
  4865  02EF                     __ptext13:	
  4866 ;; *************** function _getADCValue *****************
  4867 ;; Defined at:
  4868 ;;		line 21 in file "main.c"
  4869 ;; Parameters:    Size  Location     Type
  4870 ;;  channel         1    wreg     unsigned char 
  4871 ;;  divider         4   15[BANK0 ] unsigned long 
  4872 ;; Auto vars:     Size  Location     Type
  4873 ;;  channel         1   23[BANK0 ] unsigned char 
  4874 ;;  adcSum          4   25[BANK0 ] unsigned long 
  4875 ;;  adcLoop         1   24[BANK0 ] unsigned char 
  4876 ;; Return value:  Size  Location     Type
  4877 ;;                  4   15[BANK0 ] unsigned long 
  4878 ;; Registers used:
  4879 ;;		wreg, status,2, status,0, pclath, cstack
  4880 ;; Tracked objects:
  4881 ;;		On entry : 0/0
  4882 ;;		On exit  : 0/0
  4883 ;;		Unchanged: 0/0
  4884 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4885 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4886 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4887 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4888 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4889 ;;Total ram usage:       14 bytes
  4890 ;; Hardware stack levels used:    1
  4891 ;; Hardware stack levels required when called:    7
  4892 ;; This function calls:
  4893 ;;		___lldiv
  4894 ;;		___lmul
  4895 ;; This function is called by:
  4896 ;;		_loop
  4897 ;; This function uses a non-reentrant model
  4898 ;;
  4899                           
  4900                           
  4901                           ;psect for function _getADCValue
  4902  02EF                     _getADCValue:	
  4903                           
  4904                           ;incstack = 0
  4905                           ; Regs used in _getADCValue: [wreg+status,2+status,0+pclath+cstack]
  4906                           ;getADCValue@channel stored from wreg
  4907  02EF  0020               	movlb	0	; select bank0
  4908  02F0  00B7               	movwf	getADCValue@channel
  4909                           
  4910                           ;main.c: 23: unsigned long adcSum = 0;
  4911  02F1  3000               	movlw	0
  4912  02F2  00BC               	movwf	getADCValue@adcSum+3
  4913  02F3  3000               	movlw	0
  4914  02F4  00BB               	movwf	getADCValue@adcSum+2
  4915  02F5  3000               	movlw	0
  4916  02F6  00BA               	movwf	getADCValue@adcSum+1
  4917  02F7  3000               	movlw	0
  4918  02F8  00B9               	movwf	getADCValue@adcSum
  4919                           
  4920                           ;main.c: 24: unsigned char adcLoop = 255;
  4921  02F9  30FF               	movlw	255
  4922  02FA  00B3               	movwf	??_getADCValue
  4923  02FB  0833               	movf	??_getADCValue,w
  4924  02FC  00B8               	movwf	getADCValue@adcLoop
  4925                           
  4926                           ;main.c: 26: ADCON0bits.CHS = channel;
  4927  02FD  0837               	movf	getADCValue@channel,w
  4928  02FE  00B3               	movwf	??_getADCValue
  4929  02FF  0DB3               	rlf	??_getADCValue,f
  4930  0300  0DB3               	rlf	??_getADCValue,f
  4931  0301  0021               	movlb	1	; select bank1
  4932  0302  081D               	movf	29,w	;volatile
  4933  0303  0020               	movlb	0	; select bank0
  4934  0304  0633               	xorwf	??_getADCValue,w
  4935  0305  3903               	andlw	-253
  4936  0306  0633               	xorwf	??_getADCValue,w
  4937  0307  0021               	movlb	1	; select bank1
  4938  0308  009D               	movwf	29	;volatile
  4939                           
  4940                           ;main.c: 27: _delay((unsigned long)((200)*(16000000/4000000.0)));
  4941  0309  30A0               	movlw	160
  4942  030A                     u1927:	
  4943  030A  3200               	nop2
  4944  030B  0B89               	decfsz	9,f
  4945  030C  2B0A               	goto	u1927
  4946  030D                     l2224:	
  4947                           ;main.c: 29: while (--adcLoop){
  4948                           
  4949  030D  3001               	movlw	1
  4950  030E  0020               	movlb	0	; select bank0
  4951  030F  02B8               	subwf	getADCValue@adcLoop,f
  4952  0310  1903               	btfsc	3,2
  4953  0311  2B37               	goto	l2226
  4954                           
  4955                           ;main.c: 31: ADCON0bits.ADGO = 1;
  4956  0312  0021               	movlb	1	; select bank1
  4957  0313  149D               	bsf	29,1	;volatile
  4958  0314                     l212:	
  4959                           ;main.c: 32: while (ADCON0bits.ADGO){
  4960                           
  4961  0314  0021               	movlb	1	; select bank1
  4962  0315  1C9D               	btfss	29,1	;volatile
  4963  0316  2B19               	goto	l2222
  4964                           
  4965                           ;main.c: 33: __nop();
  4966  0317  0000               	nop
  4967  0318  2B14               	goto	l212
  4968  0319                     l2222:	
  4969                           
  4970                           ;main.c: 34: };main.c: 36: adcSum+= ADRESL;
  4971  0319  081B               	movf	27,w	;volatile
  4972  031A  0020               	movlb	0	; select bank0
  4973  031B  00B3               	movwf	??_getADCValue
  4974  031C  01B4               	clrf	??_getADCValue+1
  4975  031D  01B5               	clrf	??_getADCValue+2
  4976  031E  01B6               	clrf	??_getADCValue+3
  4977  031F  0833               	movf	??_getADCValue,w
  4978  0320  07B9               	addwf	getADCValue@adcSum,f
  4979  0321  0834               	movf	??_getADCValue+1,w
  4980  0322  3DBA               	addwfc	getADCValue@adcSum+1,f
  4981  0323  0835               	movf	??_getADCValue+2,w
  4982  0324  3DBB               	addwfc	getADCValue@adcSum+2,f
  4983  0325  0836               	movf	??_getADCValue+3,w
  4984  0326  3DBC               	addwfc	getADCValue@adcSum+3,f
  4985                           
  4986                           ;main.c: 37: adcSum+= (unsigned) (ADRESH << 8);
  4987  0327  0021               	movlb	1	; select bank1
  4988  0328  081C               	movf	28,w	;volatile
  4989  0329  0020               	movlb	0	; select bank0
  4990  032A  00B3               	movwf	??_getADCValue
  4991  032B  01B4               	clrf	??_getADCValue+1
  4992  032C  0833               	movf	??_getADCValue,w
  4993  032D  00B4               	movwf	??_getADCValue+1
  4994  032E  01B3               	clrf	??_getADCValue
  4995  032F  0833               	movf	??_getADCValue,w
  4996  0330  07B9               	addwf	getADCValue@adcSum,f
  4997  0331  0834               	movf	??_getADCValue+1,w
  4998  0332  3DBA               	addwfc	getADCValue@adcSum+1,f
  4999  0333  3000               	movlw	0
  5000  0334  3DBB               	addwfc	getADCValue@adcSum+2,f
  5001  0335  3DBC               	addwfc	getADCValue@adcSum+3,f
  5002  0336  2B0D               	goto	l2224
  5003  0337                     l2226:	
  5004                           
  5005                           ;main.c: 38: };main.c: 40: adcSum*= 100;
  5006  0337  3000               	movlw	0
  5007  0338  00A4               	movwf	___lmul@multiplier+3
  5008  0339  3000               	movlw	0
  5009  033A  00A3               	movwf	___lmul@multiplier+2
  5010  033B  3000               	movlw	0
  5011  033C  00A2               	movwf	___lmul@multiplier+1
  5012  033D  3064               	movlw	100
  5013  033E  00A1               	movwf	___lmul@multiplier
  5014  033F  083C               	movf	getADCValue@adcSum+3,w
  5015  0340  00A8               	movwf	___lmul@multiplicand+3
  5016  0341  083B               	movf	getADCValue@adcSum+2,w
  5017  0342  00A7               	movwf	___lmul@multiplicand+2
  5018  0343  083A               	movf	getADCValue@adcSum+1,w
  5019  0344  00A6               	movwf	___lmul@multiplicand+1
  5020  0345  0839               	movf	getADCValue@adcSum,w
  5021  0346  00A5               	movwf	___lmul@multiplicand
  5022  0347  3185  2541  3182   	fcall	___lmul
  5023  034A  0020               	movlb	0	; select bank0
  5024  034B  0824               	movf	?___lmul+3,w
  5025  034C  00BC               	movwf	getADCValue@adcSum+3
  5026  034D  0823               	movf	?___lmul+2,w
  5027  034E  00BB               	movwf	getADCValue@adcSum+2
  5028  034F  0822               	movf	?___lmul+1,w
  5029  0350  00BA               	movwf	getADCValue@adcSum+1
  5030  0351  0821               	movf	?___lmul,w
  5031  0352  00B9               	movwf	getADCValue@adcSum
  5032                           
  5033                           ;main.c: 41: adcSum/= divider;
  5034  0353  0832               	movf	getADCValue@divider+3,w
  5035  0354  00A4               	movwf	___lldiv@divisor+3
  5036  0355  0831               	movf	getADCValue@divider+2,w
  5037  0356  00A3               	movwf	___lldiv@divisor+2
  5038  0357  0830               	movf	getADCValue@divider+1,w
  5039  0358  00A2               	movwf	___lldiv@divisor+1
  5040  0359  082F               	movf	getADCValue@divider,w
  5041  035A  00A1               	movwf	___lldiv@divisor
  5042  035B  083C               	movf	getADCValue@adcSum+3,w
  5043  035C  00A8               	movwf	___lldiv@dividend+3
  5044  035D  083B               	movf	getADCValue@adcSum+2,w
  5045  035E  00A7               	movwf	___lldiv@dividend+2
  5046  035F  083A               	movf	getADCValue@adcSum+1,w
  5047  0360  00A6               	movwf	___lldiv@dividend+1
  5048  0361  0839               	movf	getADCValue@adcSum,w
  5049  0362  00A5               	movwf	___lldiv@dividend
  5050  0363  3183  23D9         	fcall	___lldiv
  5051  0365  0020               	movlb	0	; select bank0
  5052  0366  0824               	movf	?___lldiv+3,w
  5053  0367  00BC               	movwf	getADCValue@adcSum+3
  5054  0368  0823               	movf	?___lldiv+2,w
  5055  0369  00BB               	movwf	getADCValue@adcSum+2
  5056  036A  0822               	movf	?___lldiv+1,w
  5057  036B  00BA               	movwf	getADCValue@adcSum+1
  5058  036C  0821               	movf	?___lldiv,w
  5059  036D  00B9               	movwf	getADCValue@adcSum
  5060                           
  5061                           ;main.c: 43: return adcSum;
  5062  036E  083C               	movf	getADCValue@adcSum+3,w
  5063  036F  00B2               	movwf	?_getADCValue+3
  5064  0370  083B               	movf	getADCValue@adcSum+2,w
  5065  0371  00B1               	movwf	?_getADCValue+2
  5066  0372  083A               	movf	getADCValue@adcSum+1,w
  5067  0373  00B0               	movwf	?_getADCValue+1
  5068  0374  0839               	movf	getADCValue@adcSum,w
  5069  0375  00AF               	movwf	?_getADCValue
  5070  0376  0008               	return
  5071  0377                     __end_of_getADCValue:	
  5072                           
  5073                           	psect	text14
  5074  0541                     __ptext14:	
  5075 ;; *************** function ___lmul *****************
  5076 ;; Defined at:
  5077 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\Umul32.c"
  5078 ;; Parameters:    Size  Location     Type
  5079 ;;  multiplier      4    1[BANK0 ] unsigned long 
  5080 ;;  multiplicand    4    5[BANK0 ] unsigned long 
  5081 ;; Auto vars:     Size  Location     Type
  5082 ;;  product         4    9[BANK0 ] unsigned long 
  5083 ;; Return value:  Size  Location     Type
  5084 ;;                  4    1[BANK0 ] unsigned long 
  5085 ;; Registers used:
  5086 ;;		wreg, status,2, status,0
  5087 ;; Tracked objects:
  5088 ;;		On entry : 0/0
  5089 ;;		On exit  : 0/0
  5090 ;;		Unchanged: 0/0
  5091 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5092 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5093 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5094 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5095 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5096 ;;Total ram usage:       12 bytes
  5097 ;; Hardware stack levels used:    1
  5098 ;; Hardware stack levels required when called:    6
  5099 ;; This function calls:
  5100 ;;		Nothing
  5101 ;; This function is called by:
  5102 ;;		_getADCValue
  5103 ;; This function uses a non-reentrant model
  5104 ;;
  5105                           
  5106                           
  5107                           ;psect for function ___lmul
  5108  0541                     ___lmul:	
  5109                           
  5110                           ;incstack = 0
  5111                           ; Regs used in ___lmul: [wreg+status,2+status,0]
  5112  0541  3000               	movlw	0
  5113  0542  0020               	movlb	0	; select bank0
  5114  0543  00AC               	movwf	___lmul@product+3
  5115  0544  3000               	movlw	0
  5116  0545  00AB               	movwf	___lmul@product+2
  5117  0546  3000               	movlw	0
  5118  0547  00AA               	movwf	___lmul@product+1
  5119  0548  3000               	movlw	0
  5120  0549  00A9               	movwf	___lmul@product
  5121  054A                     l2008:	
  5122  054A  1C21               	btfss	___lmul@multiplier,0
  5123  054B  2D54               	goto	l2012
  5124  054C  0825               	movf	___lmul@multiplicand,w
  5125  054D  07A9               	addwf	___lmul@product,f
  5126  054E  0826               	movf	___lmul@multiplicand+1,w
  5127  054F  3DAA               	addwfc	___lmul@product+1,f
  5128  0550  0827               	movf	___lmul@multiplicand+2,w
  5129  0551  3DAB               	addwfc	___lmul@product+2,f
  5130  0552  0828               	movf	___lmul@multiplicand+3,w
  5131  0553  3DAC               	addwfc	___lmul@product+3,f
  5132  0554                     l2012:	
  5133  0554  3001               	movlw	1
  5134  0555                     u875:	
  5135  0555  35A5               	lslf	___lmul@multiplicand,f
  5136  0556  0DA6               	rlf	___lmul@multiplicand+1,f
  5137  0557  0DA7               	rlf	___lmul@multiplicand+2,f
  5138  0558  0DA8               	rlf	___lmul@multiplicand+3,f
  5139  0559  0B89               	decfsz	9,f
  5140  055A  2D55               	goto	u875
  5141  055B  3001               	movlw	1
  5142  055C                     u885:	
  5143  055C  36A4               	lsrf	___lmul@multiplier+3,f
  5144  055D  0CA3               	rrf	___lmul@multiplier+2,f
  5145  055E  0CA2               	rrf	___lmul@multiplier+1,f
  5146  055F  0CA1               	rrf	___lmul@multiplier,f
  5147  0560  0B89               	decfsz	9,f
  5148  0561  2D5C               	goto	u885
  5149  0562  0824               	movf	___lmul@multiplier+3,w
  5150  0563  0423               	iorwf	___lmul@multiplier+2,w
  5151  0564  0422               	iorwf	___lmul@multiplier+1,w
  5152  0565  0421               	iorwf	___lmul@multiplier,w
  5153  0566  1D03               	skipz
  5154  0567  2D4A               	goto	l2008
  5155  0568  082C               	movf	___lmul@product+3,w
  5156  0569  00A4               	movwf	?___lmul+3
  5157  056A  082B               	movf	___lmul@product+2,w
  5158  056B  00A3               	movwf	?___lmul+2
  5159  056C  082A               	movf	___lmul@product+1,w
  5160  056D  00A2               	movwf	?___lmul+1
  5161  056E  0829               	movf	___lmul@product,w
  5162  056F  00A1               	movwf	?___lmul
  5163  0570  0008               	return
  5164  0571                     __end_of___lmul:	
  5165                           
  5166                           	psect	text15
  5167  03D9                     __ptext15:	
  5168 ;; *************** function ___lldiv *****************
  5169 ;; Defined at:
  5170 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\__lldiv.c"
  5171 ;; Parameters:    Size  Location     Type
  5172 ;;  divisor         4    1[BANK0 ] unsigned long 
  5173 ;;  dividend        4    5[BANK0 ] unsigned long 
  5174 ;; Auto vars:     Size  Location     Type
  5175 ;;  quotient        4   10[BANK0 ] unsigned long 
  5176 ;;  counter         1   14[BANK0 ] unsigned char 
  5177 ;; Return value:  Size  Location     Type
  5178 ;;                  4    1[BANK0 ] unsigned long 
  5179 ;; Registers used:
  5180 ;;		wreg, status,2, status,0
  5181 ;; Tracked objects:
  5182 ;;		On entry : 0/0
  5183 ;;		On exit  : 0/0
  5184 ;;		Unchanged: 0/0
  5185 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5186 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5187 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5188 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5189 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5190 ;;Total ram usage:       14 bytes
  5191 ;; Hardware stack levels used:    1
  5192 ;; Hardware stack levels required when called:    6
  5193 ;; This function calls:
  5194 ;;		Nothing
  5195 ;; This function is called by:
  5196 ;;		_getADCValue
  5197 ;; This function uses a non-reentrant model
  5198 ;;
  5199                           
  5200                           
  5201                           ;psect for function ___lldiv
  5202  03D9                     ___lldiv:	
  5203                           
  5204                           ;incstack = 0
  5205                           ; Regs used in ___lldiv: [wreg+status,2+status,0]
  5206  03D9  3000               	movlw	0
  5207  03DA  0020               	movlb	0	; select bank0
  5208  03DB  00AD               	movwf	___lldiv@quotient+3
  5209  03DC  3000               	movlw	0
  5210  03DD  00AC               	movwf	___lldiv@quotient+2
  5211  03DE  3000               	movlw	0
  5212  03DF  00AB               	movwf	___lldiv@quotient+1
  5213  03E0  3000               	movlw	0
  5214  03E1  00AA               	movwf	___lldiv@quotient
  5215  03E2  0824               	movf	___lldiv@divisor+3,w
  5216  03E3  0423               	iorwf	___lldiv@divisor+2,w
  5217  03E4  0422               	iorwf	___lldiv@divisor+1,w
  5218  03E5  0421               	iorwf	___lldiv@divisor,w
  5219  03E6  1903               	skipnz
  5220  03E7  2C23               	goto	l2040
  5221  03E8  01AE               	clrf	___lldiv@counter
  5222  03E9  0AAE               	incf	___lldiv@counter,f
  5223  03EA                     l2026:	
  5224  03EA  1BA4               	btfsc	___lldiv@divisor+3,7
  5225  03EB  2BF8               	goto	l2028
  5226  03EC  3001               	movlw	1
  5227  03ED                     u915:	
  5228  03ED  35A1               	lslf	___lldiv@divisor,f
  5229  03EE  0DA2               	rlf	___lldiv@divisor+1,f
  5230  03EF  0DA3               	rlf	___lldiv@divisor+2,f
  5231  03F0  0DA4               	rlf	___lldiv@divisor+3,f
  5232  03F1  0B89               	decfsz	9,f
  5233  03F2  2BED               	goto	u915
  5234  03F3  3001               	movlw	1
  5235  03F4  00A9               	movwf	??___lldiv
  5236  03F5  0829               	movf	??___lldiv,w
  5237  03F6  07AE               	addwf	___lldiv@counter,f
  5238  03F7  2BEA               	goto	l2026
  5239  03F8                     l2028:	
  5240  03F8  3001               	movlw	1
  5241  03F9                     u935:	
  5242  03F9  35AA               	lslf	___lldiv@quotient,f
  5243  03FA  0DAB               	rlf	___lldiv@quotient+1,f
  5244  03FB  0DAC               	rlf	___lldiv@quotient+2,f
  5245  03FC  0DAD               	rlf	___lldiv@quotient+3,f
  5246  03FD  0B89               	decfsz	9,f
  5247  03FE  2BF9               	goto	u935
  5248  03FF  0824               	movf	___lldiv@divisor+3,w
  5249  0400  0228               	subwf	___lldiv@dividend+3,w
  5250  0401  1D03               	skipz
  5251  0402  2C0D               	goto	u945
  5252  0403  0823               	movf	___lldiv@divisor+2,w
  5253  0404  0227               	subwf	___lldiv@dividend+2,w
  5254  0405  1D03               	skipz
  5255  0406  2C0D               	goto	u945
  5256  0407  0822               	movf	___lldiv@divisor+1,w
  5257  0408  0226               	subwf	___lldiv@dividend+1,w
  5258  0409  1D03               	skipz
  5259  040A  2C0D               	goto	u945
  5260  040B  0821               	movf	___lldiv@divisor,w
  5261  040C  0225               	subwf	___lldiv@dividend,w
  5262  040D                     u945:	
  5263  040D  1C03               	skipc
  5264  040E  2C18               	goto	l2036
  5265  040F  0821               	movf	___lldiv@divisor,w
  5266  0410  02A5               	subwf	___lldiv@dividend,f
  5267  0411  0822               	movf	___lldiv@divisor+1,w
  5268  0412  3BA6               	subwfb	___lldiv@dividend+1,f
  5269  0413  0823               	movf	___lldiv@divisor+2,w
  5270  0414  3BA7               	subwfb	___lldiv@dividend+2,f
  5271  0415  0824               	movf	___lldiv@divisor+3,w
  5272  0416  3BA8               	subwfb	___lldiv@dividend+3,f
  5273  0417  142A               	bsf	___lldiv@quotient,0
  5274  0418                     l2036:	
  5275  0418  3001               	movlw	1
  5276  0419                     u955:	
  5277  0419  36A4               	lsrf	___lldiv@divisor+3,f
  5278  041A  0CA3               	rrf	___lldiv@divisor+2,f
  5279  041B  0CA2               	rrf	___lldiv@divisor+1,f
  5280  041C  0CA1               	rrf	___lldiv@divisor,f
  5281  041D  0B89               	decfsz	9,f
  5282  041E  2C19               	goto	u955
  5283  041F  3001               	movlw	1
  5284  0420  02AE               	subwf	___lldiv@counter,f
  5285  0421  1D03               	btfss	3,2
  5286  0422  2BF8               	goto	l2028
  5287  0423                     l2040:	
  5288  0423  082D               	movf	___lldiv@quotient+3,w
  5289  0424  00A4               	movwf	?___lldiv+3
  5290  0425  082C               	movf	___lldiv@quotient+2,w
  5291  0426  00A3               	movwf	?___lldiv+2
  5292  0427  082B               	movf	___lldiv@quotient+1,w
  5293  0428  00A2               	movwf	?___lldiv+1
  5294  0429  082A               	movf	___lldiv@quotient,w
  5295  042A  00A1               	movwf	?___lldiv
  5296  042B  0008               	return
  5297  042C                     __end_of___lldiv:	
  5298                           
  5299                           	psect	text16
  5300  0626                     __ptext16:	
  5301 ;; *************** function _flashUpdate *****************
  5302 ;; Defined at:
  5303 ;;		line 97 in file "flash.c"
  5304 ;; Parameters:    Size  Location     Type
  5305 ;;		None
  5306 ;; Auto vars:     Size  Location     Type
  5307 ;;  i               2    9[BANK0 ] unsigned int 
  5308 ;; Return value:  Size  Location     Type
  5309 ;;                  1    wreg      void 
  5310 ;; Registers used:
  5311 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5312 ;; Tracked objects:
  5313 ;;		On entry : 0/0
  5314 ;;		On exit  : 0/0
  5315 ;;		Unchanged: 0/0
  5316 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5317 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5318 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5319 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5320 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5321 ;;Total ram usage:        4 bytes
  5322 ;; Hardware stack levels used:    1
  5323 ;; Hardware stack levels required when called:    7
  5324 ;; This function calls:
  5325 ;;		_flashWriteByte
  5326 ;; This function is called by:
  5327 ;;		_main
  5328 ;; This function uses a non-reentrant model
  5329 ;;
  5330                           
  5331                           
  5332                           ;psect for function _flashUpdate
  5333  0626                     _flashUpdate:	
  5334                           
  5335                           ;flash.c: 98: for (unsigned int i = 0; i < 32; i++){
  5336                           
  5337                           ;incstack = 0
  5338                           ; Regs used in _flashUpdate: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5339  0626  0020               	movlb	0	; select bank0
  5340  0627  01A9               	clrf	flashUpdate@i
  5341  0628  01AA               	clrf	flashUpdate@i+1
  5342  0629                     L1:	
  5343  0629  3000               	movlw	0
  5344  062A  022A               	subwf	flashUpdate@i+1,w
  5345  062B  3020               	movlw	32
  5346  062C  1903               	skipnz
  5347  062D  0229               	subwf	flashUpdate@i,w
  5348  062E  1803               	btfsc	3,0
  5349  062F  0008               	return
  5350                           
  5351                           ;flash.c: 99: flashWriteByte(i, romHolder.array[i]);
  5352  0630  082A               	movf	flashUpdate@i+1,w
  5353  0631  00A2               	movwf	flashWriteByte@offset+1
  5354  0632  0829               	movf	flashUpdate@i,w
  5355  0633  00A1               	movwf	flashWriteByte@offset
  5356  0634  0829               	movf	flashUpdate@i,w
  5357  0635  3E20               	addlw	(low (_romHolder| (0+256)))& (0+255)
  5358  0636  0086               	movwf	6
  5359  0637  3001               	movlw	1	; select bank2/3
  5360  0638  0087               	movwf	7
  5361  0639  0801               	movf	1,w
  5362  063A  00A7               	movwf	??_flashUpdate
  5363  063B  01A8               	clrf	??_flashUpdate+1
  5364  063C  0827               	movf	??_flashUpdate,w
  5365  063D  00A3               	movwf	flashWriteByte@data
  5366  063E  0828               	movf	??_flashUpdate+1,w
  5367  063F  00A4               	movwf	flashWriteByte@data+1
  5368  0640  3184  242C  3186   	fcall	_flashWriteByte
  5369  0643  3001               	movlw	1
  5370  0644  0020               	movlb	0	; select bank0
  5371  0645  07A9               	addwf	flashUpdate@i,f
  5372  0646  3000               	movlw	0
  5373  0647  3DAA               	addwfc	flashUpdate@i+1,f
  5374  0648  2E29               	goto	L1
  5375  0649                     __end_of_flashUpdate:	
  5376                           
  5377                           	psect	text17
  5378  042C                     __ptext17:	
  5379 ;; *************** function _flashWriteByte *****************
  5380 ;; Defined at:
  5381 ;;		line 8 in file "flash.c"
  5382 ;; Parameters:    Size  Location     Type
  5383 ;;  offset          2    1[BANK0 ] unsigned int 
  5384 ;;  data            2    3[BANK0 ] unsigned int 
  5385 ;; Auto vars:     Size  Location     Type
  5386 ;;  address         2    5[BANK0 ] unsigned int 
  5387 ;; Return value:  Size  Location     Type
  5388 ;;                  1    wreg      void 
  5389 ;; Registers used:
  5390 ;;		wreg, status,2, status,0
  5391 ;; Tracked objects:
  5392 ;;		On entry : 0/0
  5393 ;;		On exit  : 0/0
  5394 ;;		Unchanged: 0/0
  5395 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5396 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5397 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5398 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5399 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5400 ;;Total ram usage:        6 bytes
  5401 ;; Hardware stack levels used:    1
  5402 ;; Hardware stack levels required when called:    6
  5403 ;; This function calls:
  5404 ;;		Nothing
  5405 ;; This function is called by:
  5406 ;;		_flashUpdate
  5407 ;; This function uses a non-reentrant model
  5408 ;;
  5409                           
  5410                           
  5411                           ;psect for function _flashWriteByte
  5412  042C                     _flashWriteByte:	
  5413                           
  5414                           ;flash.c: 10: unsigned int address;;flash.c: 12: INTCONbits.GIE = 0;
  5415                           
  5416                           ;incstack = 0
  5417                           ; Regs used in _flashWriteByte: [wreg+status,2+status,0]
  5418  042C  138B               	bcf	11,7	;volatile
  5419                           
  5420                           ;flash.c: 15: PMCON1 = 0x00;
  5421  042D  0031               	movlb	17	; select bank17
  5422  042E  0195               	clrf	21	;volsfr
  5423                           
  5424                           ;flash.c: 17: address = (0x2000U - 32) + offset;
  5425  042F  0020               	movlb	0	; select bank0
  5426  0430  0821               	movf	flashWriteByte@offset,w
  5427  0431  3EE0               	addlw	224
  5428  0432  00A5               	movwf	flashWriteByte@address
  5429  0433  301F               	movlw	31
  5430  0434  3D22               	addwfc	flashWriteByte@offset+1,w
  5431  0435  00A6               	movwf	flashWriteByte@address+1
  5432                           
  5433                           ;flash.c: 18: PMADRL = (char) (address >> 0);
  5434  0436  0825               	movf	flashWriteByte@address,w
  5435  0437  0031               	movlb	17	; select bank17
  5436  0438  0091               	movwf	17	;volatile
  5437                           
  5438                           ;flash.c: 19: PMADRH = (char) (address >> 8);
  5439  0439  0020               	movlb	0	; select bank0
  5440  043A  0826               	movf	flashWriteByte@address+1,w
  5441  043B  0031               	movlb	17	; select bank17
  5442  043C  0092               	movwf	18	;volatile
  5443                           
  5444                           ;flash.c: 21: PMCON1bits.FREE = 1;
  5445  043D  1615               	bsf	21,4	;volsfr
  5446                           
  5447                           ;flash.c: 22: PMCON1bits.WREN = 1;
  5448  043E  1515               	bsf	21,2	;volsfr
  5449                           
  5450                           ;flash.c: 24: PMCON2 = 0x55;
  5451  043F  3055               	movlw	85
  5452  0440  0096               	movwf	22	;volsfr
  5453                           
  5454                           ;flash.c: 25: PMCON2 = 0xAA;
  5455  0441  30AA               	movlw	170
  5456  0442  0096               	movwf	22	;volsfr
  5457                           
  5458                           ;flash.c: 27: PMCON1bits.WR = 1;
  5459  0443  1495               	bsf	21,1	;volsfr
  5460                           
  5461                           ;flash.c: 29: __nop();
  5462  0444  0000               	nop
  5463                           
  5464                           ;flash.c: 30: __nop();
  5465  0445  0000               	nop
  5466                           
  5467                           ;flash.c: 32: PMCON1bits.WREN = 0;
  5468  0446  0031               	movlb	17	; select bank17
  5469  0447  1115               	bcf	21,2	;volsfr
  5470                           
  5471                           ;flash.c: 36: PMCON1 = 0x00;
  5472  0448  0195               	clrf	21	;volsfr
  5473                           
  5474                           ;flash.c: 38: PMADRL = (char) (address >> 0);
  5475  0449  0020               	movlb	0	; select bank0
  5476  044A  0825               	movf	flashWriteByte@address,w
  5477  044B  0031               	movlb	17	; select bank17
  5478  044C  0091               	movwf	17	;volatile
  5479                           
  5480                           ;flash.c: 39: PMADRH = (char) (address >> 8);
  5481  044D  0020               	movlb	0	; select bank0
  5482  044E  0826               	movf	flashWriteByte@address+1,w
  5483  044F  0031               	movlb	17	; select bank17
  5484  0450  0092               	movwf	18	;volatile
  5485                           
  5486                           ;flash.c: 41: PMCON1bits.FREE = 0;
  5487  0451  1215               	bcf	21,4	;volsfr
  5488                           
  5489                           ;flash.c: 42: PMCON1bits.LWLO = 1;
  5490  0452  1695               	bsf	21,5	;volsfr
  5491                           
  5492                           ;flash.c: 43: PMCON1bits.WREN = 1;
  5493  0453  1515               	bsf	21,2	;volsfr
  5494                           
  5495                           ;flash.c: 45: PMDATL = (data >> 0);
  5496  0454  0020               	movlb	0	; select bank0
  5497  0455  0823               	movf	flashWriteByte@data,w
  5498  0456  0031               	movlb	17	; select bank17
  5499  0457  0093               	movwf	19	;volatile
  5500                           
  5501                           ;flash.c: 46: PMDATH = (data >> 8);
  5502  0458  0020               	movlb	0	; select bank0
  5503  0459  0824               	movf	flashWriteByte@data+1,w
  5504  045A  0031               	movlb	17	; select bank17
  5505  045B  0094               	movwf	20	;volatile
  5506                           
  5507                           ;flash.c: 48: PMCON1bits.LWLO = 0;
  5508  045C  1295               	bcf	21,5	;volsfr
  5509                           
  5510                           ;flash.c: 50: PMCON2 = 0x55;
  5511  045D  3055               	movlw	85
  5512  045E  0096               	movwf	22	;volsfr
  5513                           
  5514                           ;flash.c: 51: PMCON2 = 0xAA;
  5515  045F  30AA               	movlw	170
  5516  0460  0096               	movwf	22	;volsfr
  5517                           
  5518                           ;flash.c: 53: PMCON1bits.WR = 1;
  5519  0461  1495               	bsf	21,1	;volsfr
  5520                           
  5521                           ;flash.c: 55: __nop();
  5522  0462  0000               	nop
  5523                           
  5524                           ;flash.c: 56: __nop();
  5525  0463  0000               	nop
  5526                           
  5527                           ;flash.c: 58: PMCON1bits.WREN = 0;
  5528  0464  0031               	movlb	17	; select bank17
  5529  0465  1115               	bcf	21,2	;volsfr
  5530                           
  5531                           ;flash.c: 61: INTCONbits.GIE = 1;
  5532  0466  178B               	bsf	11,7	;volatile
  5533  0467  0008               	return
  5534  0468                     __end_of_flashWriteByte:	
  5535                           
  5536                           	psect	text18
  5537  068A                     __ptext18:	
  5538 ;; *************** function _flashRealod *****************
  5539 ;; Defined at:
  5540 ;;		line 90 in file "flash.c"
  5541 ;; Parameters:    Size  Location     Type
  5542 ;;		None
  5543 ;; Auto vars:     Size  Location     Type
  5544 ;;  i               2   11[BANK0 ] unsigned int 
  5545 ;; Return value:  Size  Location     Type
  5546 ;;                  1    wreg      void 
  5547 ;; Registers used:
  5548 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5549 ;; Tracked objects:
  5550 ;;		On entry : 0/0
  5551 ;;		On exit  : 0/0
  5552 ;;		Unchanged: 0/0
  5553 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5554 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5555 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5556 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5557 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5558 ;;Total ram usage:        3 bytes
  5559 ;; Hardware stack levels used:    1
  5560 ;; Hardware stack levels required when called:    7
  5561 ;; This function calls:
  5562 ;;		_flashReadByte
  5563 ;; This function is called by:
  5564 ;;		_main
  5565 ;; This function uses a non-reentrant model
  5566 ;;
  5567                           
  5568                           
  5569                           ;psect for function _flashRealod
  5570  068A                     _flashRealod:	
  5571                           
  5572                           ;flash.c: 92: for (unsigned int i = 0; i < 32; i++){
  5573                           
  5574                           ;incstack = 0
  5575                           ; Regs used in _flashRealod: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5576  068A  0020               	movlb	0	; select bank0
  5577  068B  01AB               	clrf	flashRealod@i
  5578  068C  01AC               	clrf	flashRealod@i+1
  5579  068D                     L2:	
  5580  068D  3000               	movlw	0
  5581  068E  022C               	subwf	flashRealod@i+1,w
  5582  068F  3020               	movlw	32
  5583  0690  1903               	skipnz
  5584  0691  022B               	subwf	flashRealod@i,w
  5585  0692  1803               	btfsc	3,0
  5586  0693  0008               	return
  5587                           
  5588                           ;flash.c: 93: romHolder.array[i] = flashReadByte(i);
  5589  0694  082C               	movf	flashRealod@i+1,w
  5590  0695  00A2               	movwf	flashReadByte@offset+1
  5591  0696  082B               	movf	flashRealod@i,w
  5592  0697  00A1               	movwf	flashReadByte@offset
  5593  0698  3185  250F  3186   	fcall	_flashReadByte
  5594  069B  0020               	movlb	0	; select bank0
  5595  069C  0821               	movf	?_flashReadByte,w
  5596  069D  00AA               	movwf	??_flashRealod
  5597  069E  082B               	movf	flashRealod@i,w
  5598  069F  3E20               	addlw	(low (_romHolder| (0+256)))& (0+255)
  5599  06A0  0086               	movwf	6
  5600  06A1  3001               	movlw	1	; select bank2/3
  5601  06A2  0087               	movwf	7
  5602  06A3  082A               	movf	??_flashRealod,w
  5603  06A4  0081               	movwf	1
  5604  06A5  3001               	movlw	1
  5605  06A6  07AB               	addwf	flashRealod@i,f
  5606  06A7  3000               	movlw	0
  5607  06A8  3DAC               	addwfc	flashRealod@i+1,f
  5608  06A9  2E8D               	goto	L2
  5609  06AA                     __end_of_flashRealod:	
  5610                           
  5611                           	psect	text19
  5612  050F                     __ptext19:	
  5613 ;; *************** function _flashReadByte *****************
  5614 ;; Defined at:
  5615 ;;		line 64 in file "flash.c"
  5616 ;; Parameters:    Size  Location     Type
  5617 ;;  offset          2    1[BANK0 ] unsigned int 
  5618 ;; Auto vars:     Size  Location     Type
  5619 ;;  address         2    8[BANK0 ] unsigned int 
  5620 ;;  result          2    6[BANK0 ] unsigned int 
  5621 ;; Return value:  Size  Location     Type
  5622 ;;                  2    1[BANK0 ] unsigned int 
  5623 ;; Registers used:
  5624 ;;		wreg, status,2, status,0
  5625 ;; Tracked objects:
  5626 ;;		On entry : 0/0
  5627 ;;		On exit  : 0/0
  5628 ;;		Unchanged: 0/0
  5629 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5630 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5631 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5632 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5633 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5634 ;;Total ram usage:        9 bytes
  5635 ;; Hardware stack levels used:    1
  5636 ;; Hardware stack levels required when called:    6
  5637 ;; This function calls:
  5638 ;;		Nothing
  5639 ;; This function is called by:
  5640 ;;		_flashRealod
  5641 ;; This function uses a non-reentrant model
  5642 ;;
  5643                           
  5644                           
  5645                           ;psect for function _flashReadByte
  5646  050F                     _flashReadByte:	
  5647                           
  5648                           ;flash.c: 66: unsigned int address;;flash.c: 68: INTCONbits.GIE = 0;
  5649                           
  5650                           ;incstack = 0
  5651                           ; Regs used in _flashReadByte: [wreg+status,2+status,0]
  5652  050F  138B               	bcf	11,7	;volatile
  5653                           
  5654                           ;flash.c: 70: PMCON1 = 0x00;
  5655  0510  0031               	movlb	17	; select bank17
  5656  0511  0195               	clrf	21	;volsfr
  5657                           
  5658                           ;flash.c: 72: address = (0x2000U - 32) + offset;
  5659  0512  0020               	movlb	0	; select bank0
  5660  0513  0821               	movf	flashReadByte@offset,w
  5661  0514  3EE0               	addlw	224
  5662  0515  00A8               	movwf	flashReadByte@address
  5663  0516  301F               	movlw	31
  5664  0517  3D22               	addwfc	flashReadByte@offset+1,w
  5665  0518  00A9               	movwf	flashReadByte@address+1
  5666                           
  5667                           ;flash.c: 73: PMADRL = (char) (address >> 0);
  5668  0519  0828               	movf	flashReadByte@address,w
  5669  051A  0031               	movlb	17	; select bank17
  5670  051B  0091               	movwf	17	;volatile
  5671                           
  5672                           ;flash.c: 74: PMADRH = (char) (address >> 8);
  5673  051C  0020               	movlb	0	; select bank0
  5674  051D  0829               	movf	flashReadByte@address+1,w
  5675  051E  0031               	movlb	17	; select bank17
  5676  051F  0092               	movwf	18	;volatile
  5677                           
  5678                           ;flash.c: 76: PMCON1bits.RD = 1;
  5679  0520  1415               	bsf	21,0	;volsfr
  5680                           
  5681                           ;flash.c: 78: __nop();
  5682  0521  0000               	nop
  5683                           
  5684                           ;flash.c: 79: __nop();
  5685  0522  0000               	nop
  5686                           
  5687                           ;flash.c: 81: unsigned int result = 0;
  5688  0523  0020               	movlb	0	; select bank0
  5689  0524  01A6               	clrf	flashReadByte@result
  5690  0525  01A7               	clrf	flashReadByte@result+1
  5691                           
  5692                           ;flash.c: 82: result = PMDATL;
  5693  0526  0031               	movlb	17	; select bank17
  5694  0527  0813               	movf	19,w	;volatile
  5695  0528  0020               	movlb	0	; select bank0
  5696  0529  00A3               	movwf	??_flashReadByte
  5697  052A  01A4               	clrf	??_flashReadByte+1
  5698  052B  0823               	movf	??_flashReadByte,w
  5699  052C  00A6               	movwf	flashReadByte@result
  5700  052D  0824               	movf	??_flashReadByte+1,w
  5701  052E  00A7               	movwf	flashReadByte@result+1
  5702                           
  5703                           ;flash.c: 83: result|= ( (unsigned) (PMDATH) << 8);
  5704  052F  0031               	movlb	17	; select bank17
  5705  0530  0814               	movf	20,w	;volatile
  5706  0531  0020               	movlb	0	; select bank0
  5707  0532  00A3               	movwf	??_flashReadByte
  5708  0533  01A4               	clrf	??_flashReadByte+1
  5709  0534  0823               	movf	??_flashReadByte,w
  5710  0535  00A4               	movwf	??_flashReadByte+1
  5711  0536  01A3               	clrf	??_flashReadByte
  5712  0537  0823               	movf	??_flashReadByte,w
  5713  0538  04A6               	iorwf	flashReadByte@result,f
  5714  0539  0824               	movf	??_flashReadByte+1,w
  5715  053A  04A7               	iorwf	flashReadByte@result+1,f
  5716                           
  5717                           ;flash.c: 85: INTCONbits.GIE = 1;
  5718  053B  178B               	bsf	11,7	;volatile
  5719                           
  5720                           ;flash.c: 87: return result;
  5721  053C  0827               	movf	flashReadByte@result+1,w
  5722  053D  00A2               	movwf	?_flashReadByte+1
  5723  053E  0826               	movf	flashReadByte@result,w
  5724  053F  00A1               	movwf	?_flashReadByte
  5725  0540  0008               	return
  5726  0541                     __end_of_flashReadByte:	
  5727                           
  5728                           	psect	intentry
  5729  0004                     __pintentry:	
  5730 ;; *************** function _ISR *****************
  5731 ;; Defined at:
  5732 ;;		line 14 in file "main.c"
  5733 ;; Parameters:    Size  Location     Type
  5734 ;;		None
  5735 ;; Auto vars:     Size  Location     Type
  5736 ;;		None
  5737 ;; Return value:  Size  Location     Type
  5738 ;;                  1    wreg      void 
  5739 ;; Registers used:
  5740 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5741 ;; Tracked objects:
  5742 ;;		On entry : 0/0
  5743 ;;		On exit  : 0/0
  5744 ;;		Unchanged: 0/0
  5745 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5746 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5747 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5748 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5749 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5750 ;;Total ram usage:        0 bytes
  5751 ;; Hardware stack levels used:    1
  5752 ;; Hardware stack levels required when called:    5
  5753 ;; This function calls:
  5754 ;;		_nrf24l01ISR
  5755 ;; This function is called by:
  5756 ;;		Interrupt level 1
  5757 ;; This function uses a non-reentrant model
  5758 ;;
  5759                           
  5760  0004                     _ISR:	
  5761                           
  5762                           ;incstack = 0
  5763  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
  5764                           
  5765                           ; Regs used in _ISR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5766  0005  3180               	pagesel	$
  5767                           
  5768                           ;main.c: 15: if (PIR0bits.INTF){
  5769  0006  0020               	movlb	0	; select bank0
  5770  0007  1C10               	btfss	16,0	;volatile
  5771  0008  280D               	goto	i1l207
  5772                           
  5773                           ;main.c: 16: nrf24l01ISR();
  5774  0009  3185  25A1         	fcall	_nrf24l01ISR
  5775                           
  5776                           ;main.c: 17: PIR0bits.INTF = 0;
  5777  000B  0020               	movlb	0	; select bank0
  5778  000C  1010               	bcf	16,0	;volatile
  5779  000D                     i1l207:	
  5780  000D  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
  5781  000E  0009               	retfie
  5782  000F                     __end_of_ISR:	
  5783                           
  5784                           	psect	text21
  5785  05A1                     __ptext21:	
  5786 ;; *************** function _nrf24l01ISR *****************
  5787 ;; Defined at:
  5788 ;;		line 322 in file "nrf24l01.c"
  5789 ;; Parameters:    Size  Location     Type
  5790 ;;		None
  5791 ;; Auto vars:     Size  Location     Type
  5792 ;;  status          1    0[BANK0 ] struct .
  5793 ;; Return value:  Size  Location     Type
  5794 ;;                  1    wreg      void 
  5795 ;; Registers used:
  5796 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5797 ;; Tracked objects:
  5798 ;;		On entry : 0/0
  5799 ;;		On exit  : 0/0
  5800 ;;		Unchanged: 0/0
  5801 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5802 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5803 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5804 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5805 ;;      Totals:         1       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5806 ;;Total ram usage:        2 bytes
  5807 ;; Hardware stack levels used:    1
  5808 ;; Hardware stack levels required when called:    4
  5809 ;; This function calls:
  5810 ;;		_exception
  5811 ;;		i1_nrf24l01Send
  5812 ;;		i1_nrf24l01SetRXMode
  5813 ;; This function is called by:
  5814 ;;		_ISR
  5815 ;; This function uses a non-reentrant model
  5816 ;;
  5817                           
  5818                           
  5819                           ;psect for function _nrf24l01ISR
  5820  05A1                     _nrf24l01ISR:	
  5821                           
  5822                           ;nrf24l01.c: 324: n_STATUS_t status;;nrf24l01.c: 325: status.byte = nrf24l01Send(0b00000
      +                          000 | 0x07, 0);
  5823                           
  5824                           ;incstack = 0
  5825                           ; Regs used in _nrf24l01ISR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5826  05A1  01F1               	clrf	i1nrf24l01Send@data
  5827  05A2  3007               	movlw	7
  5828  05A3  3186  26E3  3185   	fcall	i1_nrf24l01Send
  5829  05A6  00FD               	movwf	??_nrf24l01ISR
  5830  05A7  087D               	movf	??_nrf24l01ISR,w
  5831  05A8  0020               	movlb	0	; select bank0
  5832  05A9  00A0               	movwf	nrf24l01ISR@status
  5833                           
  5834                           ;nrf24l01.c: 328: if (status.byte == 0x00){
  5835  05AA  0820               	movf	nrf24l01ISR@status,w
  5836  05AB  1D03               	btfss	3,2
  5837  05AC  2DB1               	goto	i1l2494
  5838                           
  5839                           ;nrf24l01.c: 329: exception(1);
  5840  05AD  3001               	movlw	1
  5841  05AE  3187  2719  3185   	fcall	_exception
  5842  05B1                     i1l2494:	
  5843                           
  5844                           ;nrf24l01.c: 330: };nrf24l01.c: 333: if (status.byte == 0xFF){
  5845  05B1  0020               	movlb	0	; select bank0
  5846  05B2  0A20               	incf	nrf24l01ISR@status,w
  5847  05B3  1D03               	btfss	3,2
  5848  05B4  2DB9               	goto	i1l2498
  5849                           
  5850                           ;nrf24l01.c: 334: exception(2);
  5851  05B5  3002               	movlw	2
  5852  05B6  3187  2719  3185   	fcall	_exception
  5853  05B9                     i1l2498:	
  5854                           
  5855                           ;nrf24l01.c: 335: };nrf24l01.c: 337: if (status.TX_DS){
  5856  05B9  0020               	movlb	0	; select bank0
  5857  05BA  1EA0               	btfss	nrf24l01ISR@status,5
  5858  05BB  2DC4               	goto	i1l2506
  5859                           
  5860                           ;nrf24l01.c: 340: nrf24l01.TXBusy = 0;
  5861  05BC  10CB               	bcf	_nrf24l01,1	;volatile
  5862                           
  5863                           ;nrf24l01.c: 343: if (!nrf24l01.RXMode){
  5864  05BD  1DCB               	btfss	_nrf24l01,3	;volatile
  5865                           
  5866                           ;nrf24l01.c: 344: if (nrf24l01TXPacketData.ACKRequest){
  5867  05BE  1C4C               	btfss	_nrf24l01TXPacketData,0
  5868  05BF  2DC4               	goto	i1l2506
  5869                           
  5870                           ;nrf24l01.c: 346: nrf24l01SetRXMode(1);
  5871  05C0  3001               	movlw	1
  5872  05C1  3184  24A3  3185   	fcall	i1_nrf24l01SetRXMode
  5873  05C4                     i1l2506:	
  5874                           
  5875                           ;nrf24l01.c: 347: };nrf24l01.c: 348: };nrf24l01.c: 349: };nrf24l01.c: 352: if (status.RX
      +                          _DR){
  5876  05C4  0020               	movlb	0	; select bank0
  5877  05C5  1B20               	btfsc	nrf24l01ISR@status,6
  5878                           
  5879                           ;nrf24l01.c: 354: nrf24l01.RXPending = 1;
  5880  05C6  154B               	bsf	_nrf24l01,2	;volatile
  5881                           
  5882                           ;nrf24l01.c: 355: };nrf24l01.c: 358: nrf24l01Send(0b00100000 | 0x07, status.byte);
  5883  05C7  0820               	movf	nrf24l01ISR@status,w
  5884  05C8  00FD               	movwf	??_nrf24l01ISR
  5885  05C9  087D               	movf	??_nrf24l01ISR,w
  5886  05CA  00F1               	movwf	i1nrf24l01Send@data
  5887  05CB  3027               	movlw	39
  5888  05CC  3186  26E3         	fcall	i1_nrf24l01Send
  5889  05CE  0008               	return
  5890  05CF                     __end_of_nrf24l01ISR:	
  5891                           
  5892                           	psect	text22
  5893  04A3                     __ptext22:	
  5894 ;; *************** function i1_nrf24l01SetRXMode *****************
  5895 ;; Defined at:
  5896 ;;		line 74 in file "nrf24l01.c"
  5897 ;; Parameters:    Size  Location     Type
  5898 ;;  rxMode          1    wreg     unsigned char 
  5899 ;; Auto vars:     Size  Location     Type
  5900 ;;  rxMode          1    6[COMMON] unsigned char 
  5901 ;;  nrf24l01SetR    1    5[COMMON] struct .
  5902 ;; Return value:  Size  Location     Type
  5903 ;;                  1    wreg      void 
  5904 ;; Registers used:
  5905 ;;		wreg, status,2, status,0, pclath, cstack
  5906 ;; Tracked objects:
  5907 ;;		On entry : 0/0
  5908 ;;		On exit  : 0/0
  5909 ;;		Unchanged: 0/0
  5910 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5911 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5912 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5913 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5914 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5915 ;;Total ram usage:        3 bytes
  5916 ;; Hardware stack levels used:    1
  5917 ;; Hardware stack levels required when called:    3
  5918 ;; This function calls:
  5919 ;;		_nrf24l01CEHigh
  5920 ;;		_nrf24l01CELow
  5921 ;;		i1_nrf24l01Send
  5922 ;; This function is called by:
  5923 ;;		_nrf24l01ISR
  5924 ;; This function uses a non-reentrant model
  5925 ;;
  5926                           
  5927                           
  5928                           ;psect for function i1_nrf24l01SetRXMode
  5929  04A3                     i1_nrf24l01SetRXMode:	
  5930                           
  5931                           ;incstack = 0
  5932                           ; Regs used in i1_nrf24l01SetRXMode: [wreg+status,2+status,0+pclath+cstack]
  5933                           ;i1nrf24l01SetRXMode@rxMode stored from wreg
  5934  04A3  00F6               	movwf	i1nrf24l01SetRXMode@rxMode
  5935                           
  5936                           ;nrf24l01.c: 76: n_CONFIG_t config;;nrf24l01.c: 79: config.byte = nrf24l01Send(0b0000000
      +                          0 | 0x00, 0);
  5937  04A4  01F1               	clrf	i1nrf24l01Send@data
  5938  04A5  3000               	movlw	0
  5939  04A6  3186  26E3  3184   	fcall	i1_nrf24l01Send
  5940  04A9  00F4               	movwf	??i1_nrf24l01SetRXMode
  5941  04AA  0874               	movf	??i1_nrf24l01SetRXMode,w
  5942  04AB  00F5               	movwf	i1nrf24l01SetRXMode@config
  5943                           
  5944                           ;nrf24l01.c: 82: if (config.PRIM_RX != rxMode){
  5945  04AC  0875               	movf	i1nrf24l01SetRXMode@config,w
  5946  04AD  3901               	andlw	1
  5947  04AE  0676               	xorwf	i1nrf24l01SetRXMode@rxMode,w
  5948  04AF  1903               	skipnz
  5949  04B0  2CD3               	goto	i1l2462
  5950                           
  5951                           ;nrf24l01.c: 85: nrf24l01CELow();
  5952  04B1  3187  27B0  3184   	fcall	_nrf24l01CELow
  5953                           
  5954                           ;nrf24l01.c: 86: _delay((unsigned long)((200)*(16000000/4000000.0)));
  5955  04B4  30A0               	movlw	160
  5956  04B5                     u193_27:	
  5957  04B5  3200               	nop2
  5958  04B6  0B89               	decfsz	9,f
  5959  04B7  2CB5               	goto	u193_27
  5960                           
  5961                           ;nrf24l01.c: 93: config.PRIM_RX = rxMode;
  5962  04B8  0876               	movf	i1nrf24l01SetRXMode@rxMode,w
  5963  04B9  3901               	andlw	1
  5964  04BA  1075               	bcf	i1nrf24l01SetRXMode@config,0
  5965  04BB  1D03               	skipz
  5966  04BC  1475               	bsf	i1nrf24l01SetRXMode@config,0
  5967                           
  5968                           ;nrf24l01.c: 94: nrf24l01Send(0b00100000 | 0x00, config.byte);
  5969  04BD  0875               	movf	i1nrf24l01SetRXMode@config,w
  5970  04BE  00F4               	movwf	??i1_nrf24l01SetRXMode
  5971  04BF  0874               	movf	??i1_nrf24l01SetRXMode,w
  5972  04C0  00F1               	movwf	i1nrf24l01Send@data
  5973  04C1  3020               	movlw	32
  5974  04C2  3186  26E3  3184   	fcall	i1_nrf24l01Send
  5975                           
  5976                           ;nrf24l01.c: 97: _delay((unsigned long)((200)*(16000000/4000000.0)));
  5977  04C5  30A0               	movlw	160
  5978  04C6                     u194_27:	
  5979  04C6  3200               	nop2
  5980  04C7  0B89               	decfsz	9,f
  5981  04C8  2CC6               	goto	u194_27
  5982                           
  5983                           ;nrf24l01.c: 100: if (rxMode){
  5984  04C9  0876               	movf	i1nrf24l01SetRXMode@rxMode,w
  5985  04CA  1903               	btfsc	3,2
  5986  04CB  2CD3               	goto	i1l2462
  5987                           
  5988                           ;nrf24l01.c: 101: nrf24l01CEHigh();
  5989  04CC  3187  27B3  3184   	fcall	_nrf24l01CEHigh
  5990                           
  5991                           ;nrf24l01.c: 102: _delay((unsigned long)((200)*(16000000/4000000.0)));
  5992  04CF  30A0               	movlw	160
  5993  04D0                     u195_27:	
  5994  04D0  3200               	nop2
  5995  04D1  0B89               	decfsz	9,f
  5996  04D2  2CD0               	goto	u195_27
  5997  04D3                     i1l2462:	
  5998                           
  5999                           ;nrf24l01.c: 103: };nrf24l01.c: 104: };nrf24l01.c: 107: nrf24l01.RXMode = rxMode;
  6000  04D3  0876               	movf	i1nrf24l01SetRXMode@rxMode,w
  6001  04D4  3901               	andlw	1
  6002  04D5  0020               	movlb	0	; select bank0
  6003  04D6  11CB               	bcf	_nrf24l01,3	;volatile
  6004  04D7  1D03               	skipz
  6005  04D8  15CB               	bsf	_nrf24l01,3	;volatile
  6006  04D9  0008               	return
  6007  04DA                     __end_ofi1_nrf24l01SetRXMode:	
  6008                           
  6009                           	psect	text23
  6010  06E3                     __ptext23:	
  6011 ;; *************** function i1_nrf24l01Send *****************
  6012 ;; Defined at:
  6013 ;;		line 19 in file "nrf24l01.c"
  6014 ;; Parameters:    Size  Location     Type
  6015 ;;  command         1    wreg     unsigned char 
  6016 ;;  data            1    1[COMMON] unsigned char 
  6017 ;; Auto vars:     Size  Location     Type
  6018 ;;  command         1    3[COMMON] unsigned char 
  6019 ;; Return value:  Size  Location     Type
  6020 ;;                  1    wreg      unsigned char 
  6021 ;; Registers used:
  6022 ;;		wreg, status,2, status,0, pclath, cstack
  6023 ;; Tracked objects:
  6024 ;;		On entry : 0/0
  6025 ;;		On exit  : 0/0
  6026 ;;		Unchanged: 0/0
  6027 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6028 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6029 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6030 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6031 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6032 ;;Total ram usage:        3 bytes
  6033 ;; Hardware stack levels used:    1
  6034 ;; Hardware stack levels required when called:    2
  6035 ;; This function calls:
  6036 ;;		_enableInterrupts
  6037 ;;		_nrf24l01SPIEnd
  6038 ;;		_nrf24l01SPISend
  6039 ;;		_nrf24l01SPIStart
  6040 ;; This function is called by:
  6041 ;;		_nrf24l01ISR
  6042 ;;		i1_nrf24l01SetRXMode
  6043 ;; This function uses a non-reentrant model
  6044 ;;
  6045                           
  6046                           
  6047                           ;psect for function i1_nrf24l01Send
  6048  06E3                     i1_nrf24l01Send:	
  6049                           
  6050                           ;incstack = 0
  6051                           ; Regs used in i1_nrf24l01Send: [wreg+status,2+status,0+pclath+cstack]
  6052                           ;i1nrf24l01Send@command stored from wreg
  6053  06E3  00F3               	movwf	i1nrf24l01Send@command
  6054                           
  6055                           ;nrf24l01.c: 22: enableInterrupts(0);
  6056  06E4  3000               	movlw	0
  6057  06E5  3187  2771  3186   	fcall	_enableInterrupts
  6058                           
  6059                           ;nrf24l01.c: 25: nrf24l01SPIStart();
  6060  06E8  3187  2769  3186   	fcall	_nrf24l01SPIStart
  6061                           
  6062                           ;nrf24l01.c: 28: nrf24l01SPISend(command);
  6063  06EB  0873               	movf	i1nrf24l01Send@command,w
  6064  06EC  3187  2753  3186   	fcall	_nrf24l01SPISend
  6065                           
  6066                           ;nrf24l01.c: 31: data = nrf24l01SPISend(data);
  6067  06EF  0871               	movf	i1nrf24l01Send@data,w
  6068  06F0  3187  2753  3186   	fcall	_nrf24l01SPISend
  6069  06F3  00F2               	movwf	??i1_nrf24l01Send
  6070  06F4  0872               	movf	??i1_nrf24l01Send,w
  6071  06F5  00F1               	movwf	i1nrf24l01Send@data
  6072                           
  6073                           ;nrf24l01.c: 34: nrf24l01SPIEnd();
  6074  06F6  3187  2779  3186   	fcall	_nrf24l01SPIEnd
  6075                           
  6076                           ;nrf24l01.c: 37: enableInterrupts(1);
  6077  06F9  3001               	movlw	1
  6078  06FA  3187  2771         	fcall	_enableInterrupts
  6079                           
  6080                           ;nrf24l01.c: 39: return data;
  6081  06FC  0871               	movf	i1nrf24l01Send@data,w
  6082  06FD  0008               	return
  6083  06FE                     __end_ofi1_nrf24l01Send:	
  6084                           
  6085                           	psect	text24
  6086  0769                     __ptext24:	
  6087 ;; *************** function _nrf24l01SPIStart *****************
  6088 ;; Defined at:
  6089 ;;		line 65 in file "interface.c"
  6090 ;; Parameters:    Size  Location     Type
  6091 ;;		None
  6092 ;; Auto vars:     Size  Location     Type
  6093 ;;		None
  6094 ;; Return value:  Size  Location     Type
  6095 ;;                  1    wreg      void 
  6096 ;; Registers used:
  6097 ;;		wreg, status,2, status,0, pclath, cstack
  6098 ;; Tracked objects:
  6099 ;;		On entry : 0/0
  6100 ;;		On exit  : 0/0
  6101 ;;		Unchanged: 0/0
  6102 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6103 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6104 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6105 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6106 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6107 ;;Total ram usage:        0 bytes
  6108 ;; Hardware stack levels used:    1
  6109 ;; Hardware stack levels required when called:    7
  6110 ;; This function calls:
  6111 ;;		_nrf24l01CSLow
  6112 ;; This function is called by:
  6113 ;;		_nrf24l01Send
  6114 ;;		_nrf24l01SendString
  6115 ;;		i1_nrf24l01Send
  6116 ;;		_nrf24l01SetTXAddress
  6117 ;;		_nrf24l01ReceiveString
  6118 ;; This function uses a non-reentrant model
  6119 ;;
  6120                           
  6121                           
  6122                           ;psect for function _nrf24l01SPIStart
  6123  0769                     _nrf24l01SPIStart:	
  6124                           
  6125                           ;interface.c: 66: nrf24l01CSLow();
  6126                           
  6127                           ;incstack = 0
  6128 ;; hardware stack exceeded
  6129                           ; Regs used in _nrf24l01SPIStart: [wreg+status,2+status,0+pclath+cstack]
  6130  0769  3187  27AA  3187   	fcall	_nrf24l01CSLow
  6131                           
  6132                           ;interface.c: 67: _delay((unsigned long)((10)*(16000000/4000000.0)));
  6133  076C  300D               	movlw	13
  6134  076D                     u196_27:	
  6135  076D  0B89               	decfsz	9,f
  6136  076E  2F6D               	goto	u196_27
  6137  076F  0000               	nop
  6138  0770  0008               	return
  6139  0771                     __end_of_nrf24l01SPIStart:	
  6140                           
  6141                           	psect	text25
  6142  07AA                     __ptext25:	
  6143 ;; *************** function _nrf24l01CSLow *****************
  6144 ;; Defined at:
  6145 ;;		line 18 in file "interface.c"
  6146 ;; Parameters:    Size  Location     Type
  6147 ;;		None
  6148 ;; Auto vars:     Size  Location     Type
  6149 ;;		None
  6150 ;; Return value:  Size  Location     Type
  6151 ;;                  1    wreg      void 
  6152 ;; Registers used:
  6153 ;;		None
  6154 ;; Tracked objects:
  6155 ;;		On entry : 0/0
  6156 ;;		On exit  : 0/0
  6157 ;;		Unchanged: 0/0
  6158 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6159 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6160 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6161 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6162 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6163 ;;Total ram usage:        0 bytes
  6164 ;; Hardware stack levels used:    1
  6165 ;; Hardware stack levels required when called:    6
  6166 ;; This function calls:
  6167 ;;		Nothing
  6168 ;; This function is called by:
  6169 ;;		_nrf24l01SPIStart
  6170 ;; This function uses a non-reentrant model
  6171 ;;
  6172                           
  6173                           
  6174                           ;psect for function _nrf24l01CSLow
  6175  07AA                     _nrf24l01CSLow:	
  6176                           
  6177                           ;interface.c: 19: PORTAbits.RA1 = 0;
  6178                           
  6179                           ;incstack = 0
  6180 ;; hardware stack exceeded
  6181                           ; Regs used in _nrf24l01CSLow: []
  6182  07AA  0020               	movlb	0	; select bank0
  6183  07AB  108C               	bcf	12,1	;volatile
  6184  07AC  0008               	return
  6185  07AD                     __end_of_nrf24l01CSLow:	
  6186                           
  6187                           	psect	text26
  6188  0753                     __ptext26:	
  6189 ;; *************** function _nrf24l01SPISend *****************
  6190 ;; Defined at:
  6191 ;;		line 52 in file "interface.c"
  6192 ;; Parameters:    Size  Location     Type
  6193 ;;  data            1    wreg     unsigned char 
  6194 ;; Auto vars:     Size  Location     Type
  6195 ;;  data            1    0[COMMON] unsigned char 
  6196 ;; Return value:  Size  Location     Type
  6197 ;;                  1    wreg      unsigned char 
  6198 ;; Registers used:
  6199 ;;		wreg
  6200 ;; Tracked objects:
  6201 ;;		On entry : 0/0
  6202 ;;		On exit  : 0/0
  6203 ;;		Unchanged: 0/0
  6204 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6205 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6206 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6207 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6208 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6209 ;;Total ram usage:        0 bytes
  6210 ;; Hardware stack levels used:    1
  6211 ;; Hardware stack levels required when called:    6
  6212 ;; This function calls:
  6213 ;;		Nothing
  6214 ;; This function is called by:
  6215 ;;		_nrf24l01Send
  6216 ;;		_nrf24l01SendString
  6217 ;;		i1_nrf24l01Send
  6218 ;;		_nrf24l01SetTXAddress
  6219 ;;		_nrf24l01ReceiveStringPart
  6220 ;;		_nrf24l01ReceiveString
  6221 ;; This function uses a non-reentrant model
  6222 ;;
  6223                           
  6224                           
  6225                           ;psect for function _nrf24l01SPISend
  6226  0753                     _nrf24l01SPISend:	
  6227                           
  6228                           ;incstack = 0
  6229 ;; hardware stack exceeded
  6230                           ; Regs used in _nrf24l01SPISend: [wreg]
  6231                           ;nrf24l01SPISend@data stored from wreg
  6232  0753  00F0               	movwf	nrf24l01SPISend@data
  6233                           
  6234                           ;interface.c: 53: SSP1BUF = data;
  6235  0754  0870               	movf	nrf24l01SPISend@data,w
  6236  0755  0024               	movlb	4	; select bank4
  6237  0756  0091               	movwf	17	;volatile
  6238                           
  6239                           ;interface.c: 55: PORTCbits.RC4 = 1;
  6240  0757  0020               	movlb	0	; select bank0
  6241  0758  160E               	bsf	14,4	;volatile
  6242  0759                     i1l94:	
  6243                           ;interface.c: 57: while (!SSP1STATbits.BF){
  6244                           
  6245  0759  0024               	movlb	4	; select bank4
  6246  075A  1814               	btfsc	20,0	;volatile
  6247  075B  2F5E               	goto	i1l1882
  6248                           
  6249                           ;interface.c: 58: __nop();
  6250  075C  0000               	nop
  6251  075D  2F59               	goto	i1l94
  6252  075E                     i1l1882:	
  6253                           
  6254                           ;interface.c: 59: };interface.c: 61: return SSP1BUF;
  6255  075E  0811               	movf	17,w	;volatile
  6256  075F  0008               	return
  6257  0760                     __end_of_nrf24l01SPISend:	
  6258                           
  6259                           	psect	text27
  6260  0779                     __ptext27:	
  6261 ;; *************** function _nrf24l01SPIEnd *****************
  6262 ;; Defined at:
  6263 ;;		line 71 in file "interface.c"
  6264 ;; Parameters:    Size  Location     Type
  6265 ;;		None
  6266 ;; Auto vars:     Size  Location     Type
  6267 ;;		None
  6268 ;; Return value:  Size  Location     Type
  6269 ;;                  1    wreg      void 
  6270 ;; Registers used:
  6271 ;;		wreg, status,2, status,0, pclath, cstack
  6272 ;; Tracked objects:
  6273 ;;		On entry : 0/0
  6274 ;;		On exit  : 0/0
  6275 ;;		Unchanged: 0/0
  6276 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6277 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6278 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6279 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6280 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6281 ;;Total ram usage:        0 bytes
  6282 ;; Hardware stack levels used:    1
  6283 ;; Hardware stack levels required when called:    7
  6284 ;; This function calls:
  6285 ;;		_nrf24l01CSHigh
  6286 ;; This function is called by:
  6287 ;;		_nrf24l01Send
  6288 ;;		_nrf24l01SendString
  6289 ;;		i1_nrf24l01Send
  6290 ;;		_nrf24l01ReceiveString
  6291 ;; This function uses a non-reentrant model
  6292 ;;
  6293                           
  6294                           
  6295                           ;psect for function _nrf24l01SPIEnd
  6296  0779                     _nrf24l01SPIEnd:	
  6297                           
  6298                           ;interface.c: 72: _delay((unsigned long)((10)*(16000000/4000000.0)));
  6299                           
  6300                           ;incstack = 0
  6301 ;; hardware stack exceeded
  6302                           ; Regs used in _nrf24l01SPIEnd: [wreg+status,2+status,0+pclath+cstack]
  6303  0779  300D               	movlw	13
  6304  077A                     u197_27:	
  6305  077A  0B89               	decfsz	9,f
  6306  077B  2F7A               	goto	u197_27
  6307  077C  0000               	nop
  6308                           
  6309                           ;interface.c: 73: nrf24l01CSHigh();
  6310  077D  3187  27AD         	fcall	_nrf24l01CSHigh
  6311  077F  0008               	return
  6312  0780                     __end_of_nrf24l01SPIEnd:	
  6313                           
  6314                           	psect	text28
  6315  07AD                     __ptext28:	
  6316 ;; *************** function _nrf24l01CSHigh *****************
  6317 ;; Defined at:
  6318 ;;		line 23 in file "interface.c"
  6319 ;; Parameters:    Size  Location     Type
  6320 ;;		None
  6321 ;; Auto vars:     Size  Location     Type
  6322 ;;		None
  6323 ;; Return value:  Size  Location     Type
  6324 ;;                  1    wreg      void 
  6325 ;; Registers used:
  6326 ;;		None
  6327 ;; Tracked objects:
  6328 ;;		On entry : 0/0
  6329 ;;		On exit  : 0/0
  6330 ;;		Unchanged: 0/0
  6331 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6332 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6333 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6334 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6335 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6336 ;;Total ram usage:        0 bytes
  6337 ;; Hardware stack levels used:    1
  6338 ;; Hardware stack levels required when called:    6
  6339 ;; This function calls:
  6340 ;;		Nothing
  6341 ;; This function is called by:
  6342 ;;		_nrf24l01SPIEnd
  6343 ;; This function uses a non-reentrant model
  6344 ;;
  6345                           
  6346                           
  6347                           ;psect for function _nrf24l01CSHigh
  6348  07AD                     _nrf24l01CSHigh:	
  6349                           
  6350                           ;interface.c: 24: PORTAbits.RA1 = 1;
  6351                           
  6352                           ;incstack = 0
  6353 ;; hardware stack exceeded
  6354                           ; Regs used in _nrf24l01CSHigh: []
  6355  07AD  0020               	movlb	0	; select bank0
  6356  07AE  148C               	bsf	12,1	;volatile
  6357  07AF  0008               	return
  6358  07B0                     __end_of_nrf24l01CSHigh:	
  6359                           
  6360                           	psect	text29
  6361  0771                     __ptext29:	
  6362 ;; *************** function _enableInterrupts *****************
  6363 ;; Defined at:
  6364 ;;		line 77 in file "interface.c"
  6365 ;; Parameters:    Size  Location     Type
  6366 ;;  enable          1    wreg     unsigned char 
  6367 ;; Auto vars:     Size  Location     Type
  6368 ;;  enable          1    0[COMMON] unsigned char 
  6369 ;; Return value:  Size  Location     Type
  6370 ;;                  1    wreg      void 
  6371 ;; Registers used:
  6372 ;;		wreg, status,0
  6373 ;; Tracked objects:
  6374 ;;		On entry : 0/0
  6375 ;;		On exit  : 0/0
  6376 ;;		Unchanged: 0/0
  6377 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6378 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6379 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6380 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6381 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6382 ;;Total ram usage:        0 bytes
  6383 ;; Hardware stack levels used:    1
  6384 ;; Hardware stack levels required when called:    6
  6385 ;; This function calls:
  6386 ;;		Nothing
  6387 ;; This function is called by:
  6388 ;;		_nrf24l01Send
  6389 ;;		_nrf24l01SendString
  6390 ;;		i1_nrf24l01Send
  6391 ;; This function uses a non-reentrant model
  6392 ;;
  6393                           
  6394                           
  6395                           ;psect for function _enableInterrupts
  6396  0771                     _enableInterrupts:	
  6397                           
  6398                           ;incstack = 0
  6399 ;; hardware stack exceeded
  6400                           ; Regs used in _enableInterrupts: [wreg+status,0]
  6401                           ;enableInterrupts@enable stored from wreg
  6402  0771  00F0               	movwf	enableInterrupts@enable
  6403                           
  6404                           ;interface.c: 78: PIE0bits.INTE = enable;
  6405  0772  0C70               	rrf	enableInterrupts@enable,w
  6406  0773  0021               	movlb	1	; select bank1
  6407  0774  1C03               	skipc
  6408  0775  1010               	bcf	16,0	;volatile
  6409  0776  1803               	skipnc
  6410  0777  1410               	bsf	16,0	;volatile
  6411  0778  0008               	return
  6412  0779                     __end_of_enableInterrupts:	
  6413                           
  6414                           	psect	text30
  6415  07B0                     __ptext30:	
  6416 ;; *************** function _nrf24l01CELow *****************
  6417 ;; Defined at:
  6418 ;;		line 8 in file "interface.c"
  6419 ;; Parameters:    Size  Location     Type
  6420 ;;		None
  6421 ;; Auto vars:     Size  Location     Type
  6422 ;;		None
  6423 ;; Return value:  Size  Location     Type
  6424 ;;                  1    wreg      void 
  6425 ;; Registers used:
  6426 ;;		None
  6427 ;; Tracked objects:
  6428 ;;		On entry : 0/0
  6429 ;;		On exit  : 0/0
  6430 ;;		Unchanged: 0/0
  6431 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6432 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6433 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6434 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6435 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6436 ;;Total ram usage:        0 bytes
  6437 ;; Hardware stack levels used:    1
  6438 ;; Hardware stack levels required when called:    6
  6439 ;; This function calls:
  6440 ;;		Nothing
  6441 ;; This function is called by:
  6442 ;;		_nrf24l01SetRXMode
  6443 ;;		_nrf24l01SendString
  6444 ;;		_nrf24l01Init
  6445 ;;		i1_nrf24l01SetRXMode
  6446 ;;		_nrf24l01ReceiveString
  6447 ;; This function uses a non-reentrant model
  6448 ;;
  6449                           
  6450                           
  6451                           ;psect for function _nrf24l01CELow
  6452  07B0                     _nrf24l01CELow:	
  6453                           
  6454                           ;interface.c: 9: PORTAbits.RA0 = 0;
  6455                           
  6456                           ;incstack = 0
  6457                           ; Regs used in _nrf24l01CELow: []
  6458  07B0  0020               	movlb	0	; select bank0
  6459  07B1  100C               	bcf	12,0	;volatile
  6460  07B2  0008               	return
  6461  07B3                     __end_of_nrf24l01CELow:	
  6462                           
  6463                           	psect	text31
  6464  07B3                     __ptext31:	
  6465 ;; *************** function _nrf24l01CEHigh *****************
  6466 ;; Defined at:
  6467 ;;		line 13 in file "interface.c"
  6468 ;; Parameters:    Size  Location     Type
  6469 ;;		None
  6470 ;; Auto vars:     Size  Location     Type
  6471 ;;		None
  6472 ;; Return value:  Size  Location     Type
  6473 ;;                  1    wreg      void 
  6474 ;; Registers used:
  6475 ;;		None
  6476 ;; Tracked objects:
  6477 ;;		On entry : 0/0
  6478 ;;		On exit  : 0/0
  6479 ;;		Unchanged: 0/0
  6480 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6481 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6482 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6483 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6484 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6485 ;;Total ram usage:        0 bytes
  6486 ;; Hardware stack levels used:    1
  6487 ;; Hardware stack levels required when called:    6
  6488 ;; This function calls:
  6489 ;;		Nothing
  6490 ;; This function is called by:
  6491 ;;		_nrf24l01SetRXMode
  6492 ;;		_nrf24l01SendString
  6493 ;;		_nrf24l01Init
  6494 ;;		i1_nrf24l01SetRXMode
  6495 ;;		_nrf24l01ReceiveString
  6496 ;; This function uses a non-reentrant model
  6497 ;;
  6498                           
  6499                           
  6500                           ;psect for function _nrf24l01CEHigh
  6501  07B3                     _nrf24l01CEHigh:	
  6502                           
  6503                           ;interface.c: 14: PORTAbits.RA0 = 1;
  6504                           
  6505                           ;incstack = 0
  6506                           ; Regs used in _nrf24l01CEHigh: []
  6507  07B3  0020               	movlb	0	; select bank0
  6508  07B4  140C               	bsf	12,0	;volatile
  6509  07B5  0008               	return
  6510  07B6                     __end_of_nrf24l01CEHigh:	
  6511                           
  6512                           	psect	text32
  6513  0719                     __ptext32:	
  6514 ;; *************** function _exception *****************
  6515 ;; Defined at:
  6516 ;;		line 81 in file "interface.c"
  6517 ;; Parameters:    Size  Location     Type
  6518 ;;  exception       1    wreg     unsigned char 
  6519 ;; Auto vars:     Size  Location     Type
  6520 ;;  exception       1   12[COMMON] unsigned char 
  6521 ;; Return value:  Size  Location     Type
  6522 ;;                  1    wreg      void 
  6523 ;; Registers used:
  6524 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6525 ;; Tracked objects:
  6526 ;;		On entry : 0/0
  6527 ;;		On exit  : 0/0
  6528 ;;		Unchanged: 0/0
  6529 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6530 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6531 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6532 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6533 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6534 ;;Total ram usage:        3 bytes
  6535 ;; Hardware stack levels used:    1
  6536 ;; Hardware stack levels required when called:    2
  6537 ;; This function calls:
  6538 ;;		___wmul
  6539 ;;		i1_flashUpdate
  6540 ;; This function is called by:
  6541 ;;		_nrf24l01ISR
  6542 ;; This function uses a non-reentrant model
  6543 ;;
  6544                           
  6545                           
  6546                           ;psect for function _exception
  6547  0719                     _exception:	
  6548                           
  6549                           ;incstack = 0
  6550                           ; Regs used in _exception: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6551                           ;exception@exception stored from wreg
  6552  0719  00FC               	movwf	exception@exception
  6553                           
  6554                           ;interface.c: 82: romData.bootMode = exception * 10;
  6555  071A  087C               	movf	exception@exception,w
  6556  071B  00FA               	movwf	??_exception
  6557  071C  01FB               	clrf	??_exception+1
  6558  071D  087A               	movf	??_exception,w
  6559  071E  00F0               	movwf	___wmul@multiplier
  6560  071F  087B               	movf	??_exception+1,w
  6561  0720  00F1               	movwf	___wmul@multiplier+1
  6562  0721  300A               	movlw	10
  6563  0722  00F2               	movwf	___wmul@multiplicand
  6564  0723  3000               	movlw	0
  6565  0724  00F3               	movwf	___wmul@multiplicand+1
  6566  0725  3186  26FE  3187   	fcall	___wmul
  6567  0728  0871               	movf	?___wmul+1,w
  6568  0729  0021               	movlb	1	; select bank1
  6569  072A  00B2               	movwf	((_romData+1)^(0+128)+17)
  6570  072B  0870               	movf	?___wmul,w
  6571  072C  00B1               	movwf	(_romData^(0+128)+17)
  6572                           
  6573                           ;interface.c: 83: flashUpdate();
  6574  072D  3186  2649         	fcall	i1_flashUpdate
  6575  072F  0001               	reset	;# 
  6576  0730  0008               	return
  6577  0731                     __end_of_exception:	
  6578                           
  6579                           	psect	text33
  6580  0649                     __ptext33:	
  6581 ;; *************** function i1_flashUpdate *****************
  6582 ;; Defined at:
  6583 ;;		line 97 in file "flash.c"
  6584 ;; Parameters:    Size  Location     Type
  6585 ;;		None
  6586 ;; Auto vars:     Size  Location     Type
  6587 ;;  flashUpdate     2    8[COMMON] unsigned int 
  6588 ;; Return value:  Size  Location     Type
  6589 ;;                  1    wreg      void 
  6590 ;; Registers used:
  6591 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6592 ;; Tracked objects:
  6593 ;;		On entry : 0/0
  6594 ;;		On exit  : 0/0
  6595 ;;		Unchanged: 0/0
  6596 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6597 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6598 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6599 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6600 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6601 ;;Total ram usage:        4 bytes
  6602 ;; Hardware stack levels used:    1
  6603 ;; Hardware stack levels required when called:    1
  6604 ;; This function calls:
  6605 ;;		i1_flashWriteByte
  6606 ;; This function is called by:
  6607 ;;		_exception
  6608 ;; This function uses a non-reentrant model
  6609 ;;
  6610                           
  6611                           
  6612                           ;psect for function i1_flashUpdate
  6613  0649                     i1_flashUpdate:	
  6614                           
  6615                           ;flash.c: 98: for (unsigned int i = 0; i < 32; i++){
  6616                           
  6617                           ;incstack = 0
  6618                           ; Regs used in i1_flashUpdate: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6619  0649  01F8               	clrf	i1flashUpdate@i
  6620  064A  01F9               	clrf	i1flashUpdate@i+1
  6621  064B                     L3:	
  6622  064B  3000               	movlw	0
  6623  064C  0279               	subwf	i1flashUpdate@i+1,w
  6624  064D  3020               	movlw	32
  6625  064E  1903               	skipnz
  6626  064F  0278               	subwf	i1flashUpdate@i,w
  6627  0650  1803               	btfsc	3,0
  6628  0651  0008               	return
  6629                           
  6630                           ;flash.c: 99: flashWriteByte(i, romHolder.array[i]);
  6631  0652  0879               	movf	i1flashUpdate@i+1,w
  6632  0653  00F1               	movwf	i1flashWriteByte@offset+1
  6633  0654  0878               	movf	i1flashUpdate@i,w
  6634  0655  00F0               	movwf	i1flashWriteByte@offset
  6635  0656  0878               	movf	i1flashUpdate@i,w
  6636  0657  3E20               	addlw	(low (_romHolder| (0+256)))& (0+255)
  6637  0658  0086               	movwf	6
  6638  0659  3001               	movlw	1	; select bank2/3
  6639  065A  0087               	movwf	7
  6640  065B  0801               	movf	1,w
  6641  065C  00F6               	movwf	??i1_flashUpdate
  6642  065D  01F7               	clrf	??i1_flashUpdate+1
  6643  065E  0876               	movf	??i1_flashUpdate,w
  6644  065F  00F2               	movwf	i1flashWriteByte@data
  6645  0660  0877               	movf	??i1_flashUpdate+1,w
  6646  0661  00F3               	movwf	i1flashWriteByte@data+1
  6647  0662  3185  2571  3186   	fcall	i1_flashWriteByte
  6648  0665  3001               	movlw	1
  6649  0666  07F8               	addwf	i1flashUpdate@i,f
  6650  0667  3000               	movlw	0
  6651  0668  3DF9               	addwfc	i1flashUpdate@i+1,f
  6652  0669  2E4B               	goto	L3
  6653  066A                     __end_ofi1_flashUpdate:	
  6654                           
  6655                           	psect	text34
  6656  0571                     __ptext34:	
  6657 ;; *************** function i1_flashWriteByte *****************
  6658 ;; Defined at:
  6659 ;;		line 8 in file "flash.c"
  6660 ;; Parameters:    Size  Location     Type
  6661 ;;  offset          2    0[COMMON] unsigned int 
  6662 ;;  data            2    2[COMMON] unsigned int 
  6663 ;; Auto vars:     Size  Location     Type
  6664 ;;  flashWriteBy    2    4[COMMON] unsigned int 
  6665 ;; Return value:  Size  Location     Type
  6666 ;;                  1    wreg      void 
  6667 ;; Registers used:
  6668 ;;		wreg, status,2, status,0
  6669 ;; Tracked objects:
  6670 ;;		On entry : 0/0
  6671 ;;		On exit  : 0/0
  6672 ;;		Unchanged: 0/0
  6673 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6674 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6675 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6676 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6677 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6678 ;;Total ram usage:        6 bytes
  6679 ;; Hardware stack levels used:    1
  6680 ;; This function calls:
  6681 ;;		Nothing
  6682 ;; This function is called by:
  6683 ;;		i1_flashUpdate
  6684 ;; This function uses a non-reentrant model
  6685 ;;
  6686                           
  6687                           
  6688                           ;psect for function i1_flashWriteByte
  6689  0571                     i1_flashWriteByte:	
  6690                           
  6691                           ;flash.c: 10: unsigned int address;;flash.c: 12: INTCONbits.GIE = 0;
  6692                           
  6693                           ;incstack = 0
  6694                           ; Regs used in i1_flashWriteByte: [wreg+status,2+status,0]
  6695  0571  138B               	bcf	11,7	;volatile
  6696                           
  6697                           ;flash.c: 15: PMCON1 = 0x00;
  6698  0572  0031               	movlb	17	; select bank17
  6699  0573  0195               	clrf	21	;volsfr
  6700                           
  6701                           ;flash.c: 17: address = (0x2000U - 32) + offset;
  6702  0574  0870               	movf	i1flashWriteByte@offset,w
  6703  0575  3EE0               	addlw	224
  6704  0576  00F4               	movwf	i1flashWriteByte@address
  6705  0577  301F               	movlw	31
  6706  0578  3D71               	addwfc	i1flashWriteByte@offset+1,w
  6707  0579  00F5               	movwf	i1flashWriteByte@address+1
  6708                           
  6709                           ;flash.c: 18: PMADRL = (char) (address >> 0);
  6710  057A  0874               	movf	i1flashWriteByte@address,w
  6711  057B  0091               	movwf	17	;volatile
  6712                           
  6713                           ;flash.c: 19: PMADRH = (char) (address >> 8);
  6714  057C  0875               	movf	i1flashWriteByte@address+1,w
  6715  057D  0092               	movwf	18	;volatile
  6716                           
  6717                           ;flash.c: 21: PMCON1bits.FREE = 1;
  6718  057E  1615               	bsf	21,4	;volsfr
  6719                           
  6720                           ;flash.c: 22: PMCON1bits.WREN = 1;
  6721  057F  1515               	bsf	21,2	;volsfr
  6722                           
  6723                           ;flash.c: 24: PMCON2 = 0x55;
  6724  0580  3055               	movlw	85
  6725  0581  0096               	movwf	22	;volsfr
  6726                           
  6727                           ;flash.c: 25: PMCON2 = 0xAA;
  6728  0582  30AA               	movlw	170
  6729  0583  0096               	movwf	22	;volsfr
  6730                           
  6731                           ;flash.c: 27: PMCON1bits.WR = 1;
  6732  0584  1495               	bsf	21,1	;volsfr
  6733                           
  6734                           ;flash.c: 29: __nop();
  6735  0585  0000               	nop
  6736                           
  6737                           ;flash.c: 30: __nop();
  6738  0586  0000               	nop
  6739                           
  6740                           ;flash.c: 32: PMCON1bits.WREN = 0;
  6741  0587  0031               	movlb	17	; select bank17
  6742  0588  1115               	bcf	21,2	;volsfr
  6743                           
  6744                           ;flash.c: 36: PMCON1 = 0x00;
  6745  0589  0195               	clrf	21	;volsfr
  6746                           
  6747                           ;flash.c: 38: PMADRL = (char) (address >> 0);
  6748  058A  0874               	movf	i1flashWriteByte@address,w
  6749  058B  0091               	movwf	17	;volatile
  6750                           
  6751                           ;flash.c: 39: PMADRH = (char) (address >> 8);
  6752  058C  0875               	movf	i1flashWriteByte@address+1,w
  6753  058D  0092               	movwf	18	;volatile
  6754                           
  6755                           ;flash.c: 41: PMCON1bits.FREE = 0;
  6756  058E  1215               	bcf	21,4	;volsfr
  6757                           
  6758                           ;flash.c: 42: PMCON1bits.LWLO = 1;
  6759  058F  1695               	bsf	21,5	;volsfr
  6760                           
  6761                           ;flash.c: 43: PMCON1bits.WREN = 1;
  6762  0590  1515               	bsf	21,2	;volsfr
  6763                           
  6764                           ;flash.c: 45: PMDATL = (data >> 0);
  6765  0591  0872               	movf	i1flashWriteByte@data,w
  6766  0592  0093               	movwf	19	;volatile
  6767                           
  6768                           ;flash.c: 46: PMDATH = (data >> 8);
  6769  0593  0873               	movf	i1flashWriteByte@data+1,w
  6770  0594  0094               	movwf	20	;volatile
  6771                           
  6772                           ;flash.c: 48: PMCON1bits.LWLO = 0;
  6773  0595  1295               	bcf	21,5	;volsfr
  6774                           
  6775                           ;flash.c: 50: PMCON2 = 0x55;
  6776  0596  3055               	movlw	85
  6777  0597  0096               	movwf	22	;volsfr
  6778                           
  6779                           ;flash.c: 51: PMCON2 = 0xAA;
  6780  0598  30AA               	movlw	170
  6781  0599  0096               	movwf	22	;volsfr
  6782                           
  6783                           ;flash.c: 53: PMCON1bits.WR = 1;
  6784  059A  1495               	bsf	21,1	;volsfr
  6785                           
  6786                           ;flash.c: 55: __nop();
  6787  059B  0000               	nop
  6788                           
  6789                           ;flash.c: 56: __nop();
  6790  059C  0000               	nop
  6791                           
  6792                           ;flash.c: 58: PMCON1bits.WREN = 0;
  6793  059D  0031               	movlb	17	; select bank17
  6794  059E  1115               	bcf	21,2	;volsfr
  6795                           
  6796                           ;flash.c: 61: INTCONbits.GIE = 1;
  6797  059F  178B               	bsf	11,7	;volatile
  6798  05A0  0008               	return
  6799  05A1                     __end_ofi1_flashWriteByte:	
  6800                           
  6801                           	psect	text35
  6802  06FE                     __ptext35:	
  6803 ;; *************** function ___wmul *****************
  6804 ;; Defined at:
  6805 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\Umul16.c"
  6806 ;; Parameters:    Size  Location     Type
  6807 ;;  multiplier      2    0[COMMON] unsigned int 
  6808 ;;  multiplicand    2    2[COMMON] unsigned int 
  6809 ;; Auto vars:     Size  Location     Type
  6810 ;;  product         2    4[COMMON] unsigned int 
  6811 ;; Return value:  Size  Location     Type
  6812 ;;                  2    0[COMMON] unsigned int 
  6813 ;; Registers used:
  6814 ;;		wreg, status,2, status,0
  6815 ;; Tracked objects:
  6816 ;;		On entry : 0/0
  6817 ;;		On exit  : 0/0
  6818 ;;		Unchanged: 0/0
  6819 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6820 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6821 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6822 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6823 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6824 ;;Total ram usage:        6 bytes
  6825 ;; Hardware stack levels used:    1
  6826 ;; This function calls:
  6827 ;;		Nothing
  6828 ;; This function is called by:
  6829 ;;		_exception
  6830 ;; This function uses a non-reentrant model
  6831 ;;
  6832                           
  6833                           
  6834                           ;psect for function ___wmul
  6835  06FE                     ___wmul:	
  6836                           
  6837                           ;incstack = 0
  6838                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  6839  06FE  01F4               	clrf	___wmul@product
  6840  06FF  01F5               	clrf	___wmul@product+1
  6841  0700                     i1l1994:	
  6842  0700  1C70               	btfss	___wmul@multiplier,0
  6843  0701  2F06               	goto	i1l470
  6844  0702  0872               	movf	___wmul@multiplicand,w
  6845  0703  07F4               	addwf	___wmul@product,f
  6846  0704  0873               	movf	___wmul@multiplicand+1,w
  6847  0705  3DF5               	addwfc	___wmul@product+1,f
  6848  0706                     i1l470:	
  6849  0706  3001               	movlw	1
  6850  0707                     u83_25:	
  6851  0707  35F2               	lslf	___wmul@multiplicand,f
  6852  0708  0DF3               	rlf	___wmul@multiplicand+1,f
  6853  0709  0B89               	decfsz	9,f
  6854  070A  2F07               	goto	u83_25
  6855  070B  3001               	movlw	1
  6856  070C                     u84_25:	
  6857  070C  36F1               	lsrf	___wmul@multiplier+1,f
  6858  070D  0CF0               	rrf	___wmul@multiplier,f
  6859  070E  0B89               	decfsz	9,f
  6860  070F  2F0C               	goto	u84_25
  6861  0710  0870               	movf	___wmul@multiplier,w
  6862  0711  0471               	iorwf	___wmul@multiplier+1,w
  6863  0712  1D03               	btfss	3,2
  6864  0713  2F00               	goto	i1l1994
  6865  0714  0875               	movf	___wmul@product+1,w
  6866  0715  00F1               	movwf	?___wmul+1
  6867  0716  0874               	movf	___wmul@product,w
  6868  0717  00F0               	movwf	?___wmul
  6869  0718  0008               	return
  6870  0719                     __end_of___wmul:	
  6871  007E                     btemp	set	126	;btemp
  6872  007E                     int$flags	set	126
  6873  007E                     wtemp0	set	126


Data Sizes:
    Strings     46
    Constant    25
    Data        0
    BSS         121
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     39      77
    BANK1            80      0      51
    BANK2            80      0      32
    BANK3            80      0       0
    BANK4            80      0       0
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    strcpy@from	PTR const unsigned char  size(2) Largest target is 19
		 -> STR_7(CODE[5]), nrf24l01TXName(BANK1[16]), STR_6(CODE[15]), romData.name(BANK1[16]), 
		 -> STR_5(CODE[6]), STR_4(CODE[6]), STR_3(CODE[5]), STR_2(CODE[5]), 
		 -> nrf24l01TXValue(BANK0[8]), STR_1(CODE[4]), nrf24l01TXTopic(BANK0[8]), romData(BANK1[19]), 

    strcpy@to	PTR unsigned char  size(1) Largest target is 19
		 -> nrf24l01RXName(BANK1[16]), nrf24l01RXValue(BANK0[8]), nrf24l01RXTopic(BANK0[8]), nrf24l01TXName(BANK1[16]), 
		 -> nrf24l01TXTopic(BANK0[8]), romData(BANK1[19]), 

    strcpy@cp	PTR unsigned char  size(1) Largest target is 19
		 -> nrf24l01RXName(BANK1[16]), nrf24l01RXValue(BANK0[8]), nrf24l01RXTopic(BANK0[8]), nrf24l01TXName(BANK1[16]), 
		 -> nrf24l01TXTopic(BANK0[8]), romData(BANK1[19]), 

    utoa@buf	PTR unsigned char  size(1) Largest target is 8
		 -> nrf24l01TXValue(BANK0[8]), 

    sp__itoa	PTR unsigned char  size(1) Largest target is 0

    sp__memset	PTR void  size(1) Largest target is 16
		 -> nrf24l01RXName(BANK1[16]), nrf24l01RXValue(BANK0[8]), nrf24l01RXTopic(BANK0[8]), 

    sp__utoa	PTR unsigned char  size(1) Largest target is 8
		 -> nrf24l01TXValue(BANK0[8]), 

    sp__strcpy	PTR unsigned char  size(1) Largest target is 19
		 -> nrf24l01RXName(BANK1[16]), nrf24l01RXValue(BANK0[8]), nrf24l01RXTopic(BANK0[8]), nrf24l01TXName(BANK1[16]), 
		 -> nrf24l01TXTopic(BANK0[8]), romData(BANK1[19]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    _ISR->_nrf24l01ISR
    _nrf24l01ISR->_exception
    i1_nrf24l01SetRXMode->i1_nrf24l01Send
    _exception->i1_flashUpdate
    i1_flashUpdate->i1_flashWriteByte

Critical Paths under _main in BANK0

    _main->_utoa
    _nrf24l01Init->_nrf24l01InitRegisters
    _nrf24l01InitRegisters->_nrf24l01Send
    _loop->_utoa
    _utoa->_getADCValue
    _nrf24l01SendString->_nrf24l01SetRXMode
    _nrf24l01SetRXMode->_nrf24l01Send
    _getADCValue->___lldiv
    _flashUpdate->_flashWriteByte
    _flashRealod->_flashReadByte

Critical Paths under _ISR in BANK0

    _ISR->_nrf24l01ISR

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 1     1      0   15381
                                             38 BANK0      1     1      0
                        _flashRealod
                        _flashUpdate
                               _loop
                       _nrf24l01Init
                 _nrf24l01SendString
                              _sleep
                             _strcpy
                               _utoa
 ---------------------------------------------------------------------------------
 (1) _nrf24l01Init                                         3     3      0    1532
                                             13 BANK0      3     3      0
                     _nrf24l01CEHigh
                      _nrf24l01CELow
              _nrf24l01InitRegisters
              _nrf24l01InterfaceInit
 ---------------------------------------------------------------------------------
 (2) _nrf24l01InterfaceInit                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _nrf24l01InitRegisters                               10    10      0    1510
                                              4 BANK0      9     9      0
                       _nrf24l01Send
 ---------------------------------------------------------------------------------
 (1) _loop                                                 0     0      0    7067
                        _getADCValue
                 _nrf24l01SendString
                              _sleep
                             _strcpy
                               _utoa
 ---------------------------------------------------------------------------------
 (1) _utoa                                                 9     5      4    2678
                                             29 BANK0      9     5      4
                            ___lwdiv
                            ___lwmod
                        _getADCValue (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              6     2      4     287
                                              1 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              8     4      4     418
                                              1 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (1) _strcpy                                               5     3      2    1759
                                              1 BANK0      5     3      2
 ---------------------------------------------------------------------------------
 (1) _sleep                                                0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _nrf24l01SendString                                   2     2      0    1726
                                              7 BANK0      2     2      0
                   _enableInterrupts
                     _nrf24l01CEHigh
                      _nrf24l01CELow
                     _nrf24l01SPIEnd
                    _nrf24l01SPISend
                   _nrf24l01SPIStart
                  _nrf24l01SetRXMode
 ---------------------------------------------------------------------------------
 (2) _nrf24l01SetRXMode                                    3     3      0    1409
                                              4 BANK0      3     3      0
                     _nrf24l01CEHigh
                      _nrf24l01CELow
                       _nrf24l01Send
 ---------------------------------------------------------------------------------
 (3) _nrf24l01Send                                         3     2      1    1275
                                              1 BANK0      3     2      1
                   _enableInterrupts
                     _nrf24l01SPIEnd
                    _nrf24l01SPISend
                   _nrf24l01SPIStart
 ---------------------------------------------------------------------------------
 (11) _nrf24l01SPIStart                                    0     0      0       0
                      _nrf24l01CSLow
 ---------------------------------------------------------------------------------
 (12) _nrf24l01CSLow                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (11) _nrf24l01SPISend                                     1     1      0      22
 ---------------------------------------------------------------------------------
 (11) _nrf24l01SPIEnd                                      0     0      0       0
                     _nrf24l01CSHigh
 ---------------------------------------------------------------------------------
 (12) _nrf24l01CSHigh                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (11) _enableInterrupts                                    1     1      0      22
 ---------------------------------------------------------------------------------
 (10) _nrf24l01CELow                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _nrf24l01CEHigh                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _getADCValue                                         14    10      4     904
                                             15 BANK0     14    10      4
                            ___lldiv
                             ___lmul
 ---------------------------------------------------------------------------------
 (3) ___lmul                                              12     4      8     220
                                              1 BANK0     12     4      8
 ---------------------------------------------------------------------------------
 (3) ___lldiv                                             14     6      8     290
                                              1 BANK0     14     6      8
 ---------------------------------------------------------------------------------
 (1) _flashUpdate                                          4     4      0     373
                                              7 BANK0      4     4      0
                     _flashWriteByte
 ---------------------------------------------------------------------------------
 (2) _flashWriteByte                                       6     2      4     283
                                              1 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (1) _flashRealod                                          3     3      0     246
                                             10 BANK0      3     3      0
                      _flashReadByte
 ---------------------------------------------------------------------------------
 (2) _flashReadByte                                        9     7      2     156
                                              1 BANK0      9     7      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 12
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _ISR                                                  0     0      0    1214
                        _nrf24l01ISR
 ---------------------------------------------------------------------------------
 (8) _nrf24l01ISR                                          2     2      0    1214
                                             13 COMMON     1     1      0
                                              0 BANK0      1     1      0
                          _exception
                     i1_nrf24l01Send
                i1_nrf24l01SetRXMode
 ---------------------------------------------------------------------------------
 (9) i1_nrf24l01SetRXMode                                  3     3      0     349
                                              4 COMMON     3     3      0
                     _nrf24l01CEHigh
                      _nrf24l01CELow
                     i1_nrf24l01Send
 ---------------------------------------------------------------------------------
 (10) i1_nrf24l01Send                                      3     2      1     215
                                              1 COMMON     3     2      1
                   _enableInterrupts
                     _nrf24l01SPIEnd
                    _nrf24l01SPISend
                   _nrf24l01SPIStart
 ---------------------------------------------------------------------------------
 (11) _nrf24l01SPIStart                                    0     0      0       0
                      _nrf24l01CSLow
 ---------------------------------------------------------------------------------
 (12) _nrf24l01CSLow                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (11) _nrf24l01SPISend                                     1     1      0      22
 ---------------------------------------------------------------------------------
 (11) _nrf24l01SPIEnd                                      0     0      0       0
                     _nrf24l01CSHigh
 ---------------------------------------------------------------------------------
 (12) _nrf24l01CSHigh                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (11) _enableInterrupts                                    1     1      0      22
 ---------------------------------------------------------------------------------
 (10) _nrf24l01CELow                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _nrf24l01CEHigh                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (9) _exception                                            3     3      0     539
                                             10 COMMON     3     3      0
                             ___wmul
                      i1_flashUpdate
 ---------------------------------------------------------------------------------
 (10) i1_flashUpdate                                       4     4      0     297
                                              6 COMMON     4     4      0
                   i1_flashWriteByte
 ---------------------------------------------------------------------------------
 (11) i1_flashWriteByte                                    6     2      4     207
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (10) ___wmul                                              6     2      4     220
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 12
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _flashRealod
     _flashReadByte
   _flashUpdate
     _flashWriteByte
   _loop
     _getADCValue
       ___lldiv
       ___lmul
     _nrf24l01SendString
       _enableInterrupts
       _nrf24l01CEHigh
       _nrf24l01CELow
       _nrf24l01SPIEnd
         _nrf24l01CSHigh
       _nrf24l01SPISend
       _nrf24l01SPIStart
         _nrf24l01CSLow
       _nrf24l01SetRXMode
         _nrf24l01CEHigh
         _nrf24l01CELow
         _nrf24l01Send
           _enableInterrupts
           _nrf24l01SPIEnd
             _nrf24l01CSHigh
           _nrf24l01SPISend
           _nrf24l01SPIStart
             _nrf24l01CSLow
     _sleep
     _strcpy
     _utoa
       ___lwdiv
       ___lwmod
       _getADCValue (ARG)
         ___lldiv
         ___lmul
   _nrf24l01Init
     _nrf24l01CEHigh
     _nrf24l01CELow
     _nrf24l01InitRegisters
       _nrf24l01Send
         _enableInterrupts
         _nrf24l01SPIEnd
           _nrf24l01CSHigh
         _nrf24l01SPISend
         _nrf24l01SPIStart
           _nrf24l01CSLow
     _nrf24l01InterfaceInit
   _nrf24l01SendString
     _enableInterrupts
     _nrf24l01CEHigh
     _nrf24l01CELow
     _nrf24l01SPIEnd
       _nrf24l01CSHigh
     _nrf24l01SPISend
     _nrf24l01SPIStart
       _nrf24l01CSLow
     _nrf24l01SetRXMode
       _nrf24l01CEHigh
       _nrf24l01CELow
       _nrf24l01Send
         _enableInterrupts
         _nrf24l01SPIEnd
           _nrf24l01CSHigh
         _nrf24l01SPISend
         _nrf24l01SPIStart
           _nrf24l01CSLow
   _sleep
   _strcpy
   _utoa
     ___lwdiv
     ___lwmod
     _getADCValue (ARG)
       ___lldiv
       ___lmul

 _ISR (ROOT)
   _nrf24l01ISR
     _exception
       ___wmul
       i1_flashUpdate
         i1_flashWriteByte
     i1_nrf24l01Send
       _enableInterrupts
       _nrf24l01SPIEnd
         _nrf24l01CSHigh
       _nrf24l01SPISend
       _nrf24l01SPIStart
         _nrf24l01CSLow
     i1_nrf24l01SetRXMode
       _nrf24l01CEHigh
       _nrf24l01CELow
       i1_nrf24l01Send
         _enableInterrupts
         _nrf24l01SPIEnd
           _nrf24l01CSHigh
         _nrf24l01SPISend
         _nrf24l01SPIStart
           _nrf24l01CSLow

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      E       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     27      4D       5       96.3%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50      0      33       7       63.8%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0      20       9       40.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0       0      11        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0      AE      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0      AE      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V2.00 build -1524193055 
Symbol Table                                                                                   Sat Jun 30 12:47:32 2018

            flashReadByte@result 0026                     flashRealod@i 002B                      __CFG_CP$OFF 0000  
            ___wmul@multiplicand 0072              nrf24l01Send@command 0023  nrf24l01InitRegisters@isReciever 0070  
                    __CFG_LVP$ON 0000                              l212 0314                              l219 0760  
                            l343 0119                              l339 0109                              l888 03C3  
                   flashUpdate@i 0029                     __CFG_CPD$OFF 0000                              _ISR 0004  
                            u915 03ED                              u935 03F9                              u945 040D  
                            u955 0419                              u875 0555                              u885 055C  
                            u985 04E6                              wreg 0009                             ?_ISR 0070  
                 ??_nrf24l01Init 002D                             l2012 0554                             l2040 0423  
                           l2008 054A                             l2026 03EA                             l2036 0418  
                           l2028 03F8                             l2222 0319                             l2310 0163  
                           l2302 014B                             l2062 0501                             l2054 04E3  
                           l2224 030D                             l2056 04EF                             l2080 05E2  
                           l2226 0337                             l2322 0182                             l2314 016A  
                           l2306 0158                             l2066 050A                             l2084 05EE  
                           l2318 0177                             l2078 05D6                             l2344 01B4  
                           l2336 0198                             l2088 05F7                             l2346 01A8  
                           l2338 01A4                             l2290 012C                             l3066 02EB  
                           l2284 010D                             l2294 0139                   ??_nrf24l01Send 0022  
                           l2298 0144                             l1990 049C                             l2880 037D  
                           l2890 039B                             l2876 06CE                             l2998 028B  
                           STR_1 07A6                     __CFG_WDTE$ON 0000                             STR_2 0797  
                           STR_3 079C                             STR_4 0786                             STR_5 0780  
                           STR_6 0744                             STR_7 07A1                             u1005 04F0  
                           u1015 04FA                             u1025 0502                             u1055 05D9  
                           u1075 05E8                             u1085 05EF                             u1907 048E  
                           u1827 026C                             u1917 0499                             u1837 060A  
                           u1927 030A                             u1847 061C                             u1857 0115  
                           u1867 0189                             u1877 01A0                             u1887 01B5  
                           u1897 047C                             i1l94 0759   __size_of_nrf24l01InterfaceInit 001E  
                   __CFG_WRT$OFF 0000                    __CFG_FCMEN$ON 0000    __end_of_nrf24l01InterfaceInit 06C8  
                           _main 0255                             _loop 002C                  ??_flashReadByte 0023  
                           fsr0h 0005                             fsr1h 0007                             indf0 0000  
                           fsr0l 0004                             indf1 0001                             fsr1l 0006  
                           btemp 007E                             _utoa 0377                    __CFG_BORV$LOW 0000  
                           start 000F                    __CFG_CSWEN$ON 0000                    __CFG_MCLRE$ON 0000  
                          ??_ISR 007E              nrf24l01SendString@i 0028             __size_of_getADCValue 0088  
                ??_nrf24l01CELow 0070                  ??_nrf24l01CSLow 0070      __size_of_nrf24l01SendString 00B9  
                          ?_main 0070                            ?_loop 0070                  __end_of___lldiv 042C  
                          ?_utoa 003D                   __CFG_DEBUG$OFF 0000                  __end_of___lwdiv 050F  
                          i1l207 000D                  __end_of___lwmod 05FC                            i1l470 0706  
         enableInterrupts@enable 0070                            u83_25 0707                            u84_25 070C  
               i1_flashWriteByte 0571                   i1flashUpdate@i 0078              ___lmul@multiplicand 0025  
                  __CFG_PWRTE$ON 0000                            _sleep 0760                   __CFG_BOREN$OFF 0000  
               _enableInterrupts 0771                            utoa@c 0044                            utoa@v 0042  
                          status 0003                            wtemp0 007E      __end_ofi1_nrf24l01SetRXMode 04DA  
              getADCValue@adcSum 0039                 _nrf24l01SPIStart 0769                  __initialization 0011  
                   __end_of_main 02EF                     __end_of_loop 0100                     __end_of_utoa 03D9  
               ??_nrf24l01CEHigh 0070                           ??_main 0046                           ??_loop 0046  
               ??_nrf24l01CSHigh 0070                           ??_utoa 0041                 ??_nrf24l01SPIEnd 0070  
         __size_ofi1_flashUpdate 0021         __size_of_nrf24l01SPISend 000D                           _ADRESH 009C  
                         _ADRESL 009B                           ?_sleep 0070                           _ANSELA 018C  
                         _ANSELC 018E                 ??_flashWriteByte 0025                           _ODCONA 028C  
                         _ODCONC 028E                           i1l2506 05C4                           i1l2462 04D3  
                         i1l2494 05B1                           i1l1882 075E                           i1l2498 05B9  
                         i1l1994 0700                           _INLVLA 038C                           _INLVLC 038E  
                         _PMADRH 0892                           _PMADRL 0891                           u193_27 04B5  
                         _PMDATH 0894                           u194_27 04C6                           _PMDATL 0893  
                         u195_27 04D0                           _PMCON1 0895                           _PMCON2 0896  
                         u196_27 076D                           u197_27 077A             __size_of_flashRealod 0020  
             flashWriteByte@data 0023             __size_of_flashUpdate 0023             __size_of_nrf24l01ISR 002E  
        nrf24l01SetRXMode@config 0025                           ___lmul 0541          nrf24l01SetRXMode@rxMode 0026  
                         ___wmul 06FE                   __CFG_STVREN$ON 0000                        ??___lldiv 0029  
                      ??___lwdiv 0025                        ??___lwmod 0025             __end_of_nrf24l01Init 0626  
           __end_of_nrf24l01Send 068A            _nrf24l01InitRegisters 01B9                           _strcpy 06C8  
      i1nrf24l01SetRXMode@config 0075                 __end_of_romArray 2000        i1nrf24l01SetRXMode@rxMode 0076  
             getADCValue@adcLoop 0038          __end_of__initialization 0028               getADCValue@channel 0037  
                  i1_flashUpdate 0649               getADCValue@divider 002F                   __pcstackCOMMON 0070  
                  __end_of_sleep 0769             _nrf24l01RXPacketData 0049    nrf24l01InitRegisters@enRXAddr 0029  
                        ??_sleep 0021                       __pbssBANK0 0047                       __pbssBANK1 00A0  
                     __pbssBANK2 0120                ??_nrf24l01SPISend 0070               __size_of_exception 0018  
                 ?i1_flashUpdate 0070          __size_ofi1_nrf24l01Send 001B         __end_ofi1_flashWriteByte 05A1  
                     __pmaintext 0255                          ?___lmul 0021                          ?___wmul 0070  
                __CFG_PPS1WAY$ON 0000                _nrf24l01SetRXMode 0468           ?_nrf24l01InitRegisters 0070  
                     __pintentry 0004              nrf24l01SPISend@data 0070                   ___lmul@product 0029  
             ?_nrf24l01SetRXMode 0070         __end_of_enableInterrupts 0779             _nrf24l01TXPacketData 004C  
            __CFG_RSTOSC$HFINT32 0000                          ?_strcpy 0021            __end_of_n_ADDRESS_MUL 07B7  
            ??_nrf24l01SetRXMode 0024         __end_of_nrf24l01SPIStart 0771                          _SLRCONA 030C  
                        _SLRCONC 030E                          _SSP1BUF 0211            _nrf24l01InterfaceInit 06AA  
          __end_of_flashReadByte 0541                 __p_romArray_text 1FE0                    ??_getADCValue 0033  
          __size_of_nrf24l01Init 002A            __size_of_nrf24l01Send 0020        __end_of_nrf24l01SetRXMode 04A3  
     __end_of_nrf24l01SendString 01B9                  __size_of___lmul 0030                          ___lldiv 03D9  
                __size_of___wmul 001B                          ___lwdiv 04DA                          ___lwmod 05CF  
          __end_of_nrf24l01CELow 07B3            __end_of_nrf24l01CSLow 07AD                          __ptext1 05FC  
                        __ptext2 06AA                          __ptext3 01B9                          __ptext4 002C  
                        __ptext5 0377                          __ptext6 05CF                          __ptext7 04DA  
                        __ptext8 06C8                          __ptext9 0760                __end_of_exception 0731  
                __size_of_strcpy 001B                     __size_of_ISR 000B                          _counter 0047  
        i1flashWriteByte@address 0074                 _romArray_absaddr 1FE0                          _romData 00A0  
                        clrloop0 078D             end_of_initialization 0028                     _nrf24l01Init 05FC  
                ??i1_flashUpdate 0076                     _nrf24l01Send 066A                  ___lldiv@divisor 0021  
                ___lldiv@counter 002E     __size_ofi1_nrf24l01SetRXMode 0037                          utoa@buf 0045  
                        utoa@val 003D            i1nrf24l01Send@command 0073              __end_of_getADCValue 0377  
                      _PORTAbits 000C                        _PORTCbits 000E                        _TRISAbits 008C  
                      _TRISCbits 008E                 nrf24l01Send@data 0021                 __CFG_FEXTOSC$OFF 0000  
                  ??_flashRealod 002A                    ??_flashUpdate 0027                    ??_nrf24l01ISR 007D  
         ?_nrf24l01InterfaceInit 0070                   i1_nrf24l01Send 06E3       __size_of_nrf24l01SetRXMode 003B  
                 __end_of___lmul 0571                   __end_of___wmul 0719                   __end_of_strcpy 06E3  
            start_initialization 0011                  _nrf24l01SPISend 0753                      __end_of_ISR 000F  
          flashWriteByte@address 0025                  _nrf24l01RXValue 004D          __size_of_nrf24l01CEHigh 0003  
                _nrf24l01RXTopic 0055                  _nrf24l01TXValue 005D                  _nrf24l01TXTopic 0065  
        __size_of_nrf24l01CSHigh 0003           __end_ofi1_nrf24l01Send 06FE          __size_of_nrf24l01SPIEnd 0007  
        ??_nrf24l01InitRegisters 0024                 __CFG_LPBOREN$OFF 0000                ?i1_flashWriteByte 0070  
            __end_of_flashRealod 06AA                      _getADCValue 02EF          __size_of_flashWriteByte 003C  
            __end_of_flashUpdate 0649                         ??___lmul 0029              __end_of_nrf24l01ISR 05CF  
                       ??___wmul 0074               ??i1_flashWriteByte 0074             __end_of_resetRomData 0744  
              ?_enableInterrupts 0070                         ??_strcpy 0023               ??_enableInterrupts 0070  
                      ___latbits 0002                    __pcstackBANK0 0020                ?_nrf24l01SPIStart 0070  
             ??_nrf24l01SPIStart 0070                  ?i1_nrf24l01Send 0071                 ___lwdiv@dividend 0023  
                       ?___lldiv 0021                         ?___lwdiv 0021                         ?___lwmod 0021  
           __end_of_n_ADDRESS_P0 0797          __end_of_nrf24l01SPISend 0760               i1nrf24l01Send@data 0071  
      nrf24l01InitRegisters@enAA 002A               _nrf24l01SendString 0100                        _exception 0719  
               ___lwdiv@quotient 0026              i1_nrf24l01SetRXMode 04A3                   __size_of_sleep 0009  
            ?_nrf24l01SendString 0070                      _flashRealod 068A                   ___wmul@product 0074  
         i1flashWriteByte@offset 0070                      _flashUpdate 0626                      _nrf24l01ISR 05A1  
                      clear_ram0 078C                         _PIE0bits 0090                         _PIR0bits 0010  
                      _romHolder 0120                        _sleepLoop 004A             ?i1_nrf24l01SetRXMode 0070  
           ??_nrf24l01SendString 0027                       _ADCON0bits 009D                       _ADCON1bits 009E  
              ___wmul@multiplier 0070                         _WPUAbits 020C           __size_of_flashReadByte 0032  
                     ?_exception 0070                   _nrf24l01CEHigh 07B3                ___lmul@multiplier 0021  
        ??_nrf24l01InterfaceInit 0021                   _nrf24l01CSHigh 07AD                nrf24l01ISR@status 0020  
                 _nrf24l01SPIEnd 0779                   _nrf24l01RXName 00B3                   _nrf24l01TXName 00C3  
         __size_of_nrf24l01CELow 0003            __end_ofi1_flashUpdate 066A           __size_of_nrf24l01CSLow 0003  
           flashWriteByte@offset 0021                   _flashWriteByte 042C            ??i1_nrf24l01SetRXMode 0074  
               __size_of___lldiv 0053                 __size_of___lwdiv 0035                 __size_of___lwmod 002D  
               ?_nrf24l01SPISend 0070                       _ANSELAbits 018C                       _ANSELCbits 018E  
                  _n_ADDRESS_MUL 07B6           __end_of_nrf24l01CEHigh 07B6                  ___lwdiv@divisor 0021  
         __end_of_nrf24l01CSHigh 07B0                  ___lwdiv@counter 0028                         __ptext10 0100  
                       __ptext11 0468                         __ptext12 066A                         __ptext21 05A1  
                       __ptext13 02EF                         __ptext30 07B0                         __ptext22 04A3  
                       __ptext14 0541                         __ptext31 07B3                         __ptext23 06E3  
                       __ptext15 03D9                         __ptext32 0719                         __ptext24 0769  
                       __ptext16 0626                         __ptext33 0649                         __ptext25 07AA  
                       __ptext17 042C                         __ptext34 0571                         __ptext26 0753  
                       __ptext18 068A                         __ptext35 06FE                         __ptext27 0779  
                       __ptext19 050F                         __ptext28 07AD                         __ptext29 0771  
                   _SSP1CON1bits 0215           __end_of_nrf24l01SPIEnd 0780                         _nrf24l01 004B  
                   _resetRomData 0731           nrf24l01Init@isReciever 002F                       strcpy@from 0021  
                  __size_of_main 009A                    __size_of_loop 00D4                    __size_of_utoa 0062  
         __end_of_flashWriteByte 0468     nrf24l01InitRegisters@feature 0027                       _RA2PPSbits 0E92  
             exception@exception 007C                       _RC0PPSbits 0EA0                         _romArray 1FE0  
                  _flashReadByte 050F     nrf24l01InitRegisters@rfSetup 0026                       _RC1PPSbits 0EA1  
                   ?_getADCValue 002F                       _RC2PPSbits 0EA2   __size_of_nrf24l01InitRegisters 009C  
  __end_of_nrf24l01InitRegisters 0255                         int$flags 007E     nrf24l01InitRegisters@setupAW 0025  
                   _SSP1STATbits 0214                    _nrf24l01CELow 07B0                    _nrf24l01CSLow 07AA  
                     _INTCONbits 000B        __size_ofi1_flashWriteByte 0030                  ?_nrf24l01CEHigh 0070  
                     _FVRCONbits 0117                 ??i1_nrf24l01Send 0072                      ??_exception 007A  
                ?_nrf24l01CSHigh 0070                   __pstringtext10 07A6                   __pstringtext11 0000  
                ?_nrf24l01SPIEnd 0070                         intlevel1 0000                     _n_ADDRESS_P0 0792  
      __size_of_enableInterrupts 0008                       _PMCON1bits 0895                 ___lwmod@dividend 0023  
               ___lldiv@dividend 0025                __CFG_CLKOUTEN$OFF 0000                  ?_flashWriteByte 0021  
                 ?_flashReadByte 0021             i1flashWriteByte@data 0072      nrf24l01InitRegisters@config 002C  
      __size_of_nrf24l01SPIStart 0008      nrf24l01InitRegisters@status 0028                   ?_nrf24l01CELow 0070  
                  __pstringtext1 0731                    __pstringtext2 0792                    __pstringtext3 07B6  
                  __pstringtext4 0744                    __pstringtext5 0780                    __pstringtext6 0786  
                  __pstringtext7 0797                    __pstringtext8 079C                    __pstringtext9 07A1  
                 ?_nrf24l01CSLow 0070                         utoa@base 003F       nrf24l01InitRegisters@DynPD 002B  
               ___lldiv@quotient 002A                  ___lwmod@divisor 0021                         strcpy@cp 0024  
                       strcpy@to 0025                  ___lwmod@counter 0026                       _WDTCONbits 0097  
                  ?_nrf24l01Init 0070                    ?_nrf24l01Send 0021                     ?_flashRealod 0070  
                     _STATUSbits 0003             flashReadByte@address 0028                     ?_flashUpdate 0070  
                   ?_nrf24l01ISR 0070              flashReadByte@offset 0021  
