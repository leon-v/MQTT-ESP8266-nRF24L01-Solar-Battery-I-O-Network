

Microchip Technology PIC LITE Macro Assembler V2.00 build -1524193055 
                                                                                               Mon Jun 25 17:53:57 2018

Microchip Technology Omniscient Code Generator v2.00 (Free mode) build 20180527130849
     1                           	processor	16LF18325
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	stringtext1,global,class=STRCODE,delta=2
     5                           	psect	stringtext2,global,class=STRCODE,delta=2
     6                           	psect	stringtext3,global,class=STRCODE,delta=2
     7                           	psect	_romArray_text,global,class=STRCODE,delta=2
     8                           	psect	stringtext4,global,class=STRCODE,delta=2
     9                           	psect	stringtext5,global,class=STRCODE,delta=2
    10                           	psect	stringtext6,global,class=STRCODE,delta=2
    11                           	psect	stringtext7,global,class=STRCODE,delta=2
    12                           	psect	stringtext8,global,class=STRCODE,delta=2
    13                           	psect	stringtext9,global,class=STRCODE,delta=2
    14                           	psect	stringtext10,global,class=STRCODE,delta=2
    15                           	psect	cinit,global,class=CODE,merge=1,delta=2
    16                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    17                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    18                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    19                           	psect	clrtext,global,class=CODE,delta=2
    20                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    21                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    22                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    23                           	psect	text1,local,class=CODE,merge=1,delta=2
    24                           	psect	text2,local,class=CODE,merge=1,delta=2
    25                           	psect	text3,local,class=CODE,merge=1,delta=2
    26                           	psect	text4,local,class=CODE,merge=1,delta=2
    27                           	psect	text5,local,class=CODE,merge=1,delta=2,group=2
    28                           	psect	text6,local,class=CODE,merge=1,delta=2,group=1
    29                           	psect	text7,local,class=CODE,merge=1,delta=2,group=1
    30                           	psect	text8,local,class=CODE,merge=1,delta=2,group=2
    31                           	psect	text9,local,class=CODE,merge=1,delta=2
    32                           	psect	text10,local,class=CODE,merge=1,delta=2
    33                           	psect	text11,local,class=CODE,merge=1,delta=2
    34                           	psect	text12,local,class=CODE,merge=1,delta=2
    35                           	psect	text13,local,class=CODE,merge=1,delta=2
    36                           	psect	text14,local,class=CODE,merge=1,delta=2,group=1
    37                           	psect	text15,local,class=CODE,merge=1,delta=2,group=1
    38                           	psect	text16,local,class=CODE,merge=1,delta=2
    39                           	psect	text17,local,class=CODE,merge=1,delta=2
    40                           	psect	intentry,global,class=CODE,delta=2
    41                           	psect	text19,local,class=CODE,merge=1,delta=2
    42                           	psect	text20,local,class=CODE,merge=1,delta=2
    43                           	psect	text21,local,class=CODE,merge=1,delta=2
    44                           	psect	text22,local,class=CODE,merge=1,delta=2
    45                           	psect	text23,local,class=CODE,merge=1,delta=2
    46                           	psect	text24,local,class=CODE,merge=1,delta=2
    47                           	psect	text25,local,class=CODE,merge=1,delta=2
    48                           	psect	text26,local,class=CODE,merge=1,delta=2
    49                           	psect	text27,local,class=CODE,merge=1,delta=2
    50                           	psect	text28,local,class=CODE,merge=1,delta=2
    51                           	dabs	1,0x7E,2
    52  0000                     
    53                           ; Version 2.00
    54                           ; Generated 27/05/2018 GMT
    55                           ; 
    56                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
    57                           ; All rights reserved.
    58                           ; 
    59                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    60                           ; 
    61                           ; Redistribution and use in source and binary forms, with or without modification, are
    62                           ; permitted provided that the following conditions are met:
    63                           ; 
    64                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    65                           ;        conditions and the following disclaimer.
    66                           ; 
    67                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    68                           ;        of conditions and the following disclaimer in the documentation and/or other
    69                           ;        materials provided with the distribution.
    70                           ; 
    71                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    72                           ;        software without specific prior written permission.
    73                           ; 
    74                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    75                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    76                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    77                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    78                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    79                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    80                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    81                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    82                           ; 
    83                           ; 
    84                           ; Code-generator required, PIC16LF18325 Definitions
    85                           ; 
    86                           ; SFR Addresses
    87  0000                     	;# 
    88  0001                     	;# 
    89  0002                     	;# 
    90  0003                     	;# 
    91  0004                     	;# 
    92  0005                     	;# 
    93  0006                     	;# 
    94  0007                     	;# 
    95  0008                     	;# 
    96  0009                     	;# 
    97  000A                     	;# 
    98  000B                     	;# 
    99  000C                     	;# 
   100  000E                     	;# 
   101  0010                     	;# 
   102  0011                     	;# 
   103  0012                     	;# 
   104  0013                     	;# 
   105  0014                     	;# 
   106  0015                     	;# 
   107  0015                     	;# 
   108  0016                     	;# 
   109  0016                     	;# 
   110  0017                     	;# 
   111  0018                     	;# 
   112  0019                     	;# 
   113  0019                     	;# 
   114  001A                     	;# 
   115  001B                     	;# 
   116  001C                     	;# 
   117  001D                     	;# 
   118  001E                     	;# 
   119  001F                     	;# 
   120  008C                     	;# 
   121  008E                     	;# 
   122  0090                     	;# 
   123  0091                     	;# 
   124  0092                     	;# 
   125  0093                     	;# 
   126  0094                     	;# 
   127  0097                     	;# 
   128  009B                     	;# 
   129  009B                     	;# 
   130  009C                     	;# 
   131  009D                     	;# 
   132  009E                     	;# 
   133  009F                     	;# 
   134  010C                     	;# 
   135  010E                     	;# 
   136  0111                     	;# 
   137  0112                     	;# 
   138  0113                     	;# 
   139  0114                     	;# 
   140  0115                     	;# 
   141  0116                     	;# 
   142  0117                     	;# 
   143  0118                     	;# 
   144  0119                     	;# 
   145  018C                     	;# 
   146  018E                     	;# 
   147  0199                     	;# 
   148  0199                     	;# 
   149  0199                     	;# 
   150  019A                     	;# 
   151  019A                     	;# 
   152  019A                     	;# 
   153  019B                     	;# 
   154  019B                     	;# 
   155  019B                     	;# 
   156  019B                     	;# 
   157  019B                     	;# 
   158  019C                     	;# 
   159  019C                     	;# 
   160  019C                     	;# 
   161  019D                     	;# 
   162  019D                     	;# 
   163  019D                     	;# 
   164  019E                     	;# 
   165  019E                     	;# 
   166  019E                     	;# 
   167  019F                     	;# 
   168  019F                     	;# 
   169  019F                     	;# 
   170  019F                     	;# 
   171  019F                     	;# 
   172  020C                     	;# 
   173  020E                     	;# 
   174  0211                     	;# 
   175  0211                     	;# 
   176  0212                     	;# 
   177  0212                     	;# 
   178  0213                     	;# 
   179  0213                     	;# 
   180  0214                     	;# 
   181  0214                     	;# 
   182  0215                     	;# 
   183  0215                     	;# 
   184  0215                     	;# 
   185  0215                     	;# 
   186  0216                     	;# 
   187  0216                     	;# 
   188  0217                     	;# 
   189  0217                     	;# 
   190  0219                     	;# 
   191  021A                     	;# 
   192  021B                     	;# 
   193  021C                     	;# 
   194  021D                     	;# 
   195  021D                     	;# 
   196  021E                     	;# 
   197  021F                     	;# 
   198  028C                     	;# 
   199  028E                     	;# 
   200  0291                     	;# 
   201  0291                     	;# 
   202  0292                     	;# 
   203  0293                     	;# 
   204  0294                     	;# 
   205  0295                     	;# 
   206  0295                     	;# 
   207  0296                     	;# 
   208  0297                     	;# 
   209  0298                     	;# 
   210  029F                     	;# 
   211  030C                     	;# 
   212  030E                     	;# 
   213  0311                     	;# 
   214  0311                     	;# 
   215  0312                     	;# 
   216  0313                     	;# 
   217  0314                     	;# 
   218  0315                     	;# 
   219  0315                     	;# 
   220  0316                     	;# 
   221  0317                     	;# 
   222  0318                     	;# 
   223  038C                     	;# 
   224  038E                     	;# 
   225  0391                     	;# 
   226  0392                     	;# 
   227  0393                     	;# 
   228  0397                     	;# 
   229  0398                     	;# 
   230  0399                     	;# 
   231  039A                     	;# 
   232  039C                     	;# 
   233  039D                     	;# 
   234  039E                     	;# 
   235  039F                     	;# 
   236  0411                     	;# 
   237  0411                     	;# 
   238  0412                     	;# 
   239  0413                     	;# 
   240  0414                     	;# 
   241  0415                     	;# 
   242  0416                     	;# 
   243  0417                     	;# 
   244  0418                     	;# 
   245  0418                     	;# 
   246  0419                     	;# 
   247  041A                     	;# 
   248  041B                     	;# 
   249  041C                     	;# 
   250  041D                     	;# 
   251  041E                     	;# 
   252  041F                     	;# 
   253  0498                     	;# 
   254  0498                     	;# 
   255  0499                     	;# 
   256  049A                     	;# 
   257  049B                     	;# 
   258  049B                     	;# 
   259  049C                     	;# 
   260  049D                     	;# 
   261  049E                     	;# 
   262  049F                     	;# 
   263  0617                     	;# 
   264  0618                     	;# 
   265  0619                     	;# 
   266  0619                     	;# 
   267  061A                     	;# 
   268  061B                     	;# 
   269  061C                     	;# 
   270  061C                     	;# 
   271  061F                     	;# 
   272  0691                     	;# 
   273  0692                     	;# 
   274  0693                     	;# 
   275  0694                     	;# 
   276  0695                     	;# 
   277  0696                     	;# 
   278  0697                     	;# 
   279  0698                     	;# 
   280  0699                     	;# 
   281  0711                     	;# 
   282  0712                     	;# 
   283  0713                     	;# 
   284  0714                     	;# 
   285  0715                     	;# 
   286  0716                     	;# 
   287  0717                     	;# 
   288  0718                     	;# 
   289  0719                     	;# 
   290  0891                     	;# 
   291  0891                     	;# 
   292  0891                     	;# 
   293  0891                     	;# 
   294  0891                     	;# 
   295  0891                     	;# 
   296  0892                     	;# 
   297  0892                     	;# 
   298  0892                     	;# 
   299  0893                     	;# 
   300  0893                     	;# 
   301  0893                     	;# 
   302  0893                     	;# 
   303  0893                     	;# 
   304  0893                     	;# 
   305  0894                     	;# 
   306  0894                     	;# 
   307  0894                     	;# 
   308  0895                     	;# 
   309  0895                     	;# 
   310  0895                     	;# 
   311  0896                     	;# 
   312  0896                     	;# 
   313  0896                     	;# 
   314  089B                     	;# 
   315  0911                     	;# 
   316  0912                     	;# 
   317  0913                     	;# 
   318  0914                     	;# 
   319  0915                     	;# 
   320  0916                     	;# 
   321  0918                     	;# 
   322  0919                     	;# 
   323  091A                     	;# 
   324  091B                     	;# 
   325  091C                     	;# 
   326  091D                     	;# 
   327  091E                     	;# 
   328  091F                     	;# 
   329  0E0F                     	;# 
   330  0E10                     	;# 
   331  0E11                     	;# 
   332  0E12                     	;# 
   333  0E13                     	;# 
   334  0E14                     	;# 
   335  0E15                     	;# 
   336  0E16                     	;# 
   337  0E17                     	;# 
   338  0E18                     	;# 
   339  0E19                     	;# 
   340  0E1A                     	;# 
   341  0E1B                     	;# 
   342  0E1C                     	;# 
   343  0E1D                     	;# 
   344  0E1E                     	;# 
   345  0E1F                     	;# 
   346  0E20                     	;# 
   347  0E21                     	;# 
   348  0E22                     	;# 
   349  0E24                     	;# 
   350  0E25                     	;# 
   351  0E28                     	;# 
   352  0E29                     	;# 
   353  0E2A                     	;# 
   354  0E2B                     	;# 
   355  0E2C                     	;# 
   356  0E2D                     	;# 
   357  0E2E                     	;# 
   358  0E2F                     	;# 
   359  0E90                     	;# 
   360  0E91                     	;# 
   361  0E92                     	;# 
   362  0E94                     	;# 
   363  0E95                     	;# 
   364  0EA0                     	;# 
   365  0EA1                     	;# 
   366  0EA2                     	;# 
   367  0EA3                     	;# 
   368  0EA4                     	;# 
   369  0EA5                     	;# 
   370  0F0F                     	;# 
   371  0F10                     	;# 
   372  0F11                     	;# 
   373  0F12                     	;# 
   374  0F13                     	;# 
   375  0F14                     	;# 
   376  0F15                     	;# 
   377  0F16                     	;# 
   378  0F17                     	;# 
   379  0F18                     	;# 
   380  0F19                     	;# 
   381  0F1A                     	;# 
   382  0F1B                     	;# 
   383  0F1C                     	;# 
   384  0F1D                     	;# 
   385  0F1E                     	;# 
   386  0F1F                     	;# 
   387  0F20                     	;# 
   388  0F21                     	;# 
   389  0F22                     	;# 
   390  0F23                     	;# 
   391  0F24                     	;# 
   392  0F25                     	;# 
   393  0F26                     	;# 
   394  0F27                     	;# 
   395  0F28                     	;# 
   396  0F29                     	;# 
   397  0F2A                     	;# 
   398  0F2B                     	;# 
   399  0F2C                     	;# 
   400  0F2D                     	;# 
   401  0F2E                     	;# 
   402  0F2F                     	;# 
   403  0F30                     	;# 
   404  0F31                     	;# 
   405  0F32                     	;# 
   406  0F33                     	;# 
   407  0F34                     	;# 
   408  0F35                     	;# 
   409  0F36                     	;# 
   410  0F37                     	;# 
   411  0FE4                     	;# 
   412  0FE5                     	;# 
   413  0FE6                     	;# 
   414  0FE7                     	;# 
   415  0FE8                     	;# 
   416  0FE9                     	;# 
   417  0FEA                     	;# 
   418  0FEB                     	;# 
   419  0FED                     	;# 
   420  0FEE                     	;# 
   421  0FEF                     	;# 
   422  0000                     	;# 
   423  0001                     	;# 
   424  0002                     	;# 
   425  0003                     	;# 
   426  0004                     	;# 
   427  0005                     	;# 
   428  0006                     	;# 
   429  0007                     	;# 
   430  0008                     	;# 
   431  0009                     	;# 
   432  000A                     	;# 
   433  000B                     	;# 
   434  000C                     	;# 
   435  000E                     	;# 
   436  0010                     	;# 
   437  0011                     	;# 
   438  0012                     	;# 
   439  0013                     	;# 
   440  0014                     	;# 
   441  0015                     	;# 
   442  0015                     	;# 
   443  0016                     	;# 
   444  0016                     	;# 
   445  0017                     	;# 
   446  0018                     	;# 
   447  0019                     	;# 
   448  0019                     	;# 
   449  001A                     	;# 
   450  001B                     	;# 
   451  001C                     	;# 
   452  001D                     	;# 
   453  001E                     	;# 
   454  001F                     	;# 
   455  008C                     	;# 
   456  008E                     	;# 
   457  0090                     	;# 
   458  0091                     	;# 
   459  0092                     	;# 
   460  0093                     	;# 
   461  0094                     	;# 
   462  0097                     	;# 
   463  009B                     	;# 
   464  009B                     	;# 
   465  009C                     	;# 
   466  009D                     	;# 
   467  009E                     	;# 
   468  009F                     	;# 
   469  010C                     	;# 
   470  010E                     	;# 
   471  0111                     	;# 
   472  0112                     	;# 
   473  0113                     	;# 
   474  0114                     	;# 
   475  0115                     	;# 
   476  0116                     	;# 
   477  0117                     	;# 
   478  0118                     	;# 
   479  0119                     	;# 
   480  018C                     	;# 
   481  018E                     	;# 
   482  0199                     	;# 
   483  0199                     	;# 
   484  0199                     	;# 
   485  019A                     	;# 
   486  019A                     	;# 
   487  019A                     	;# 
   488  019B                     	;# 
   489  019B                     	;# 
   490  019B                     	;# 
   491  019B                     	;# 
   492  019B                     	;# 
   493  019C                     	;# 
   494  019C                     	;# 
   495  019C                     	;# 
   496  019D                     	;# 
   497  019D                     	;# 
   498  019D                     	;# 
   499  019E                     	;# 
   500  019E                     	;# 
   501  019E                     	;# 
   502  019F                     	;# 
   503  019F                     	;# 
   504  019F                     	;# 
   505  019F                     	;# 
   506  019F                     	;# 
   507  020C                     	;# 
   508  020E                     	;# 
   509  0211                     	;# 
   510  0211                     	;# 
   511  0212                     	;# 
   512  0212                     	;# 
   513  0213                     	;# 
   514  0213                     	;# 
   515  0214                     	;# 
   516  0214                     	;# 
   517  0215                     	;# 
   518  0215                     	;# 
   519  0215                     	;# 
   520  0215                     	;# 
   521  0216                     	;# 
   522  0216                     	;# 
   523  0217                     	;# 
   524  0217                     	;# 
   525  0219                     	;# 
   526  021A                     	;# 
   527  021B                     	;# 
   528  021C                     	;# 
   529  021D                     	;# 
   530  021D                     	;# 
   531  021E                     	;# 
   532  021F                     	;# 
   533  028C                     	;# 
   534  028E                     	;# 
   535  0291                     	;# 
   536  0291                     	;# 
   537  0292                     	;# 
   538  0293                     	;# 
   539  0294                     	;# 
   540  0295                     	;# 
   541  0295                     	;# 
   542  0296                     	;# 
   543  0297                     	;# 
   544  0298                     	;# 
   545  029F                     	;# 
   546  030C                     	;# 
   547  030E                     	;# 
   548  0311                     	;# 
   549  0311                     	;# 
   550  0312                     	;# 
   551  0313                     	;# 
   552  0314                     	;# 
   553  0315                     	;# 
   554  0315                     	;# 
   555  0316                     	;# 
   556  0317                     	;# 
   557  0318                     	;# 
   558  038C                     	;# 
   559  038E                     	;# 
   560  0391                     	;# 
   561  0392                     	;# 
   562  0393                     	;# 
   563  0397                     	;# 
   564  0398                     	;# 
   565  0399                     	;# 
   566  039A                     	;# 
   567  039C                     	;# 
   568  039D                     	;# 
   569  039E                     	;# 
   570  039F                     	;# 
   571  0411                     	;# 
   572  0411                     	;# 
   573  0412                     	;# 
   574  0413                     	;# 
   575  0414                     	;# 
   576  0415                     	;# 
   577  0416                     	;# 
   578  0417                     	;# 
   579  0418                     	;# 
   580  0418                     	;# 
   581  0419                     	;# 
   582  041A                     	;# 
   583  041B                     	;# 
   584  041C                     	;# 
   585  041D                     	;# 
   586  041E                     	;# 
   587  041F                     	;# 
   588  0498                     	;# 
   589  0498                     	;# 
   590  0499                     	;# 
   591  049A                     	;# 
   592  049B                     	;# 
   593  049B                     	;# 
   594  049C                     	;# 
   595  049D                     	;# 
   596  049E                     	;# 
   597  049F                     	;# 
   598  0617                     	;# 
   599  0618                     	;# 
   600  0619                     	;# 
   601  0619                     	;# 
   602  061A                     	;# 
   603  061B                     	;# 
   604  061C                     	;# 
   605  061C                     	;# 
   606  061F                     	;# 
   607  0691                     	;# 
   608  0692                     	;# 
   609  0693                     	;# 
   610  0694                     	;# 
   611  0695                     	;# 
   612  0696                     	;# 
   613  0697                     	;# 
   614  0698                     	;# 
   615  0699                     	;# 
   616  0711                     	;# 
   617  0712                     	;# 
   618  0713                     	;# 
   619  0714                     	;# 
   620  0715                     	;# 
   621  0716                     	;# 
   622  0717                     	;# 
   623  0718                     	;# 
   624  0719                     	;# 
   625  0891                     	;# 
   626  0891                     	;# 
   627  0891                     	;# 
   628  0891                     	;# 
   629  0891                     	;# 
   630  0891                     	;# 
   631  0892                     	;# 
   632  0892                     	;# 
   633  0892                     	;# 
   634  0893                     	;# 
   635  0893                     	;# 
   636  0893                     	;# 
   637  0893                     	;# 
   638  0893                     	;# 
   639  0893                     	;# 
   640  0894                     	;# 
   641  0894                     	;# 
   642  0894                     	;# 
   643  0895                     	;# 
   644  0895                     	;# 
   645  0895                     	;# 
   646  0896                     	;# 
   647  0896                     	;# 
   648  0896                     	;# 
   649  089B                     	;# 
   650  0911                     	;# 
   651  0912                     	;# 
   652  0913                     	;# 
   653  0914                     	;# 
   654  0915                     	;# 
   655  0916                     	;# 
   656  0918                     	;# 
   657  0919                     	;# 
   658  091A                     	;# 
   659  091B                     	;# 
   660  091C                     	;# 
   661  091D                     	;# 
   662  091E                     	;# 
   663  091F                     	;# 
   664  0E0F                     	;# 
   665  0E10                     	;# 
   666  0E11                     	;# 
   667  0E12                     	;# 
   668  0E13                     	;# 
   669  0E14                     	;# 
   670  0E15                     	;# 
   671  0E16                     	;# 
   672  0E17                     	;# 
   673  0E18                     	;# 
   674  0E19                     	;# 
   675  0E1A                     	;# 
   676  0E1B                     	;# 
   677  0E1C                     	;# 
   678  0E1D                     	;# 
   679  0E1E                     	;# 
   680  0E1F                     	;# 
   681  0E20                     	;# 
   682  0E21                     	;# 
   683  0E22                     	;# 
   684  0E24                     	;# 
   685  0E25                     	;# 
   686  0E28                     	;# 
   687  0E29                     	;# 
   688  0E2A                     	;# 
   689  0E2B                     	;# 
   690  0E2C                     	;# 
   691  0E2D                     	;# 
   692  0E2E                     	;# 
   693  0E2F                     	;# 
   694  0E90                     	;# 
   695  0E91                     	;# 
   696  0E92                     	;# 
   697  0E94                     	;# 
   698  0E95                     	;# 
   699  0EA0                     	;# 
   700  0EA1                     	;# 
   701  0EA2                     	;# 
   702  0EA3                     	;# 
   703  0EA4                     	;# 
   704  0EA5                     	;# 
   705  0F0F                     	;# 
   706  0F10                     	;# 
   707  0F11                     	;# 
   708  0F12                     	;# 
   709  0F13                     	;# 
   710  0F14                     	;# 
   711  0F15                     	;# 
   712  0F16                     	;# 
   713  0F17                     	;# 
   714  0F18                     	;# 
   715  0F19                     	;# 
   716  0F1A                     	;# 
   717  0F1B                     	;# 
   718  0F1C                     	;# 
   719  0F1D                     	;# 
   720  0F1E                     	;# 
   721  0F1F                     	;# 
   722  0F20                     	;# 
   723  0F21                     	;# 
   724  0F22                     	;# 
   725  0F23                     	;# 
   726  0F24                     	;# 
   727  0F25                     	;# 
   728  0F26                     	;# 
   729  0F27                     	;# 
   730  0F28                     	;# 
   731  0F29                     	;# 
   732  0F2A                     	;# 
   733  0F2B                     	;# 
   734  0F2C                     	;# 
   735  0F2D                     	;# 
   736  0F2E                     	;# 
   737  0F2F                     	;# 
   738  0F30                     	;# 
   739  0F31                     	;# 
   740  0F32                     	;# 
   741  0F33                     	;# 
   742  0F34                     	;# 
   743  0F35                     	;# 
   744  0F36                     	;# 
   745  0F37                     	;# 
   746  0FE4                     	;# 
   747  0FE5                     	;# 
   748  0FE6                     	;# 
   749  0FE7                     	;# 
   750  0FE8                     	;# 
   751  0FE9                     	;# 
   752  0FEA                     	;# 
   753  0FEB                     	;# 
   754  0FED                     	;# 
   755  0FEE                     	;# 
   756  0FEF                     	;# 
   757  0000                     	;# 
   758  0001                     	;# 
   759  0002                     	;# 
   760  0003                     	;# 
   761  0004                     	;# 
   762  0005                     	;# 
   763  0006                     	;# 
   764  0007                     	;# 
   765  0008                     	;# 
   766  0009                     	;# 
   767  000A                     	;# 
   768  000B                     	;# 
   769  000C                     	;# 
   770  000E                     	;# 
   771  0010                     	;# 
   772  0011                     	;# 
   773  0012                     	;# 
   774  0013                     	;# 
   775  0014                     	;# 
   776  0015                     	;# 
   777  0015                     	;# 
   778  0016                     	;# 
   779  0016                     	;# 
   780  0017                     	;# 
   781  0018                     	;# 
   782  0019                     	;# 
   783  0019                     	;# 
   784  001A                     	;# 
   785  001B                     	;# 
   786  001C                     	;# 
   787  001D                     	;# 
   788  001E                     	;# 
   789  001F                     	;# 
   790  008C                     	;# 
   791  008E                     	;# 
   792  0090                     	;# 
   793  0091                     	;# 
   794  0092                     	;# 
   795  0093                     	;# 
   796  0094                     	;# 
   797  0097                     	;# 
   798  009B                     	;# 
   799  009B                     	;# 
   800  009C                     	;# 
   801  009D                     	;# 
   802  009E                     	;# 
   803  009F                     	;# 
   804  010C                     	;# 
   805  010E                     	;# 
   806  0111                     	;# 
   807  0112                     	;# 
   808  0113                     	;# 
   809  0114                     	;# 
   810  0115                     	;# 
   811  0116                     	;# 
   812  0117                     	;# 
   813  0118                     	;# 
   814  0119                     	;# 
   815  018C                     	;# 
   816  018E                     	;# 
   817  0199                     	;# 
   818  0199                     	;# 
   819  0199                     	;# 
   820  019A                     	;# 
   821  019A                     	;# 
   822  019A                     	;# 
   823  019B                     	;# 
   824  019B                     	;# 
   825  019B                     	;# 
   826  019B                     	;# 
   827  019B                     	;# 
   828  019C                     	;# 
   829  019C                     	;# 
   830  019C                     	;# 
   831  019D                     	;# 
   832  019D                     	;# 
   833  019D                     	;# 
   834  019E                     	;# 
   835  019E                     	;# 
   836  019E                     	;# 
   837  019F                     	;# 
   838  019F                     	;# 
   839  019F                     	;# 
   840  019F                     	;# 
   841  019F                     	;# 
   842  020C                     	;# 
   843  020E                     	;# 
   844  0211                     	;# 
   845  0211                     	;# 
   846  0212                     	;# 
   847  0212                     	;# 
   848  0213                     	;# 
   849  0213                     	;# 
   850  0214                     	;# 
   851  0214                     	;# 
   852  0215                     	;# 
   853  0215                     	;# 
   854  0215                     	;# 
   855  0215                     	;# 
   856  0216                     	;# 
   857  0216                     	;# 
   858  0217                     	;# 
   859  0217                     	;# 
   860  0219                     	;# 
   861  021A                     	;# 
   862  021B                     	;# 
   863  021C                     	;# 
   864  021D                     	;# 
   865  021D                     	;# 
   866  021E                     	;# 
   867  021F                     	;# 
   868  028C                     	;# 
   869  028E                     	;# 
   870  0291                     	;# 
   871  0291                     	;# 
   872  0292                     	;# 
   873  0293                     	;# 
   874  0294                     	;# 
   875  0295                     	;# 
   876  0295                     	;# 
   877  0296                     	;# 
   878  0297                     	;# 
   879  0298                     	;# 
   880  029F                     	;# 
   881  030C                     	;# 
   882  030E                     	;# 
   883  0311                     	;# 
   884  0311                     	;# 
   885  0312                     	;# 
   886  0313                     	;# 
   887  0314                     	;# 
   888  0315                     	;# 
   889  0315                     	;# 
   890  0316                     	;# 
   891  0317                     	;# 
   892  0318                     	;# 
   893  038C                     	;# 
   894  038E                     	;# 
   895  0391                     	;# 
   896  0392                     	;# 
   897  0393                     	;# 
   898  0397                     	;# 
   899  0398                     	;# 
   900  0399                     	;# 
   901  039A                     	;# 
   902  039C                     	;# 
   903  039D                     	;# 
   904  039E                     	;# 
   905  039F                     	;# 
   906  0411                     	;# 
   907  0411                     	;# 
   908  0412                     	;# 
   909  0413                     	;# 
   910  0414                     	;# 
   911  0415                     	;# 
   912  0416                     	;# 
   913  0417                     	;# 
   914  0418                     	;# 
   915  0418                     	;# 
   916  0419                     	;# 
   917  041A                     	;# 
   918  041B                     	;# 
   919  041C                     	;# 
   920  041D                     	;# 
   921  041E                     	;# 
   922  041F                     	;# 
   923  0498                     	;# 
   924  0498                     	;# 
   925  0499                     	;# 
   926  049A                     	;# 
   927  049B                     	;# 
   928  049B                     	;# 
   929  049C                     	;# 
   930  049D                     	;# 
   931  049E                     	;# 
   932  049F                     	;# 
   933  0617                     	;# 
   934  0618                     	;# 
   935  0619                     	;# 
   936  0619                     	;# 
   937  061A                     	;# 
   938  061B                     	;# 
   939  061C                     	;# 
   940  061C                     	;# 
   941  061F                     	;# 
   942  0691                     	;# 
   943  0692                     	;# 
   944  0693                     	;# 
   945  0694                     	;# 
   946  0695                     	;# 
   947  0696                     	;# 
   948  0697                     	;# 
   949  0698                     	;# 
   950  0699                     	;# 
   951  0711                     	;# 
   952  0712                     	;# 
   953  0713                     	;# 
   954  0714                     	;# 
   955  0715                     	;# 
   956  0716                     	;# 
   957  0717                     	;# 
   958  0718                     	;# 
   959  0719                     	;# 
   960  0891                     	;# 
   961  0891                     	;# 
   962  0891                     	;# 
   963  0891                     	;# 
   964  0891                     	;# 
   965  0891                     	;# 
   966  0892                     	;# 
   967  0892                     	;# 
   968  0892                     	;# 
   969  0893                     	;# 
   970  0893                     	;# 
   971  0893                     	;# 
   972  0893                     	;# 
   973  0893                     	;# 
   974  0893                     	;# 
   975  0894                     	;# 
   976  0894                     	;# 
   977  0894                     	;# 
   978  0895                     	;# 
   979  0895                     	;# 
   980  0895                     	;# 
   981  0896                     	;# 
   982  0896                     	;# 
   983  0896                     	;# 
   984  089B                     	;# 
   985  0911                     	;# 
   986  0912                     	;# 
   987  0913                     	;# 
   988  0914                     	;# 
   989  0915                     	;# 
   990  0916                     	;# 
   991  0918                     	;# 
   992  0919                     	;# 
   993  091A                     	;# 
   994  091B                     	;# 
   995  091C                     	;# 
   996  091D                     	;# 
   997  091E                     	;# 
   998  091F                     	;# 
   999  0E0F                     	;# 
  1000  0E10                     	;# 
  1001  0E11                     	;# 
  1002  0E12                     	;# 
  1003  0E13                     	;# 
  1004  0E14                     	;# 
  1005  0E15                     	;# 
  1006  0E16                     	;# 
  1007  0E17                     	;# 
  1008  0E18                     	;# 
  1009  0E19                     	;# 
  1010  0E1A                     	;# 
  1011  0E1B                     	;# 
  1012  0E1C                     	;# 
  1013  0E1D                     	;# 
  1014  0E1E                     	;# 
  1015  0E1F                     	;# 
  1016  0E20                     	;# 
  1017  0E21                     	;# 
  1018  0E22                     	;# 
  1019  0E24                     	;# 
  1020  0E25                     	;# 
  1021  0E28                     	;# 
  1022  0E29                     	;# 
  1023  0E2A                     	;# 
  1024  0E2B                     	;# 
  1025  0E2C                     	;# 
  1026  0E2D                     	;# 
  1027  0E2E                     	;# 
  1028  0E2F                     	;# 
  1029  0E90                     	;# 
  1030  0E91                     	;# 
  1031  0E92                     	;# 
  1032  0E94                     	;# 
  1033  0E95                     	;# 
  1034  0EA0                     	;# 
  1035  0EA1                     	;# 
  1036  0EA2                     	;# 
  1037  0EA3                     	;# 
  1038  0EA4                     	;# 
  1039  0EA5                     	;# 
  1040  0F0F                     	;# 
  1041  0F10                     	;# 
  1042  0F11                     	;# 
  1043  0F12                     	;# 
  1044  0F13                     	;# 
  1045  0F14                     	;# 
  1046  0F15                     	;# 
  1047  0F16                     	;# 
  1048  0F17                     	;# 
  1049  0F18                     	;# 
  1050  0F19                     	;# 
  1051  0F1A                     	;# 
  1052  0F1B                     	;# 
  1053  0F1C                     	;# 
  1054  0F1D                     	;# 
  1055  0F1E                     	;# 
  1056  0F1F                     	;# 
  1057  0F20                     	;# 
  1058  0F21                     	;# 
  1059  0F22                     	;# 
  1060  0F23                     	;# 
  1061  0F24                     	;# 
  1062  0F25                     	;# 
  1063  0F26                     	;# 
  1064  0F27                     	;# 
  1065  0F28                     	;# 
  1066  0F29                     	;# 
  1067  0F2A                     	;# 
  1068  0F2B                     	;# 
  1069  0F2C                     	;# 
  1070  0F2D                     	;# 
  1071  0F2E                     	;# 
  1072  0F2F                     	;# 
  1073  0F30                     	;# 
  1074  0F31                     	;# 
  1075  0F32                     	;# 
  1076  0F33                     	;# 
  1077  0F34                     	;# 
  1078  0F35                     	;# 
  1079  0F36                     	;# 
  1080  0F37                     	;# 
  1081  0FE4                     	;# 
  1082  0FE5                     	;# 
  1083  0FE6                     	;# 
  1084  0FE7                     	;# 
  1085  0FE8                     	;# 
  1086  0FE9                     	;# 
  1087  0FEA                     	;# 
  1088  0FEB                     	;# 
  1089  0FED                     	;# 
  1090  0FEE                     	;# 
  1091  0FEF                     	;# 
  1092  0000                     	;# 
  1093  0001                     	;# 
  1094  0002                     	;# 
  1095  0003                     	;# 
  1096  0004                     	;# 
  1097  0005                     	;# 
  1098  0006                     	;# 
  1099  0007                     	;# 
  1100  0008                     	;# 
  1101  0009                     	;# 
  1102  000A                     	;# 
  1103  000B                     	;# 
  1104  000C                     	;# 
  1105  000E                     	;# 
  1106  0010                     	;# 
  1107  0011                     	;# 
  1108  0012                     	;# 
  1109  0013                     	;# 
  1110  0014                     	;# 
  1111  0015                     	;# 
  1112  0015                     	;# 
  1113  0016                     	;# 
  1114  0016                     	;# 
  1115  0017                     	;# 
  1116  0018                     	;# 
  1117  0019                     	;# 
  1118  0019                     	;# 
  1119  001A                     	;# 
  1120  001B                     	;# 
  1121  001C                     	;# 
  1122  001D                     	;# 
  1123  001E                     	;# 
  1124  001F                     	;# 
  1125  008C                     	;# 
  1126  008E                     	;# 
  1127  0090                     	;# 
  1128  0091                     	;# 
  1129  0092                     	;# 
  1130  0093                     	;# 
  1131  0094                     	;# 
  1132  0097                     	;# 
  1133  009B                     	;# 
  1134  009B                     	;# 
  1135  009C                     	;# 
  1136  009D                     	;# 
  1137  009E                     	;# 
  1138  009F                     	;# 
  1139  010C                     	;# 
  1140  010E                     	;# 
  1141  0111                     	;# 
  1142  0112                     	;# 
  1143  0113                     	;# 
  1144  0114                     	;# 
  1145  0115                     	;# 
  1146  0116                     	;# 
  1147  0117                     	;# 
  1148  0118                     	;# 
  1149  0119                     	;# 
  1150  018C                     	;# 
  1151  018E                     	;# 
  1152  0199                     	;# 
  1153  0199                     	;# 
  1154  0199                     	;# 
  1155  019A                     	;# 
  1156  019A                     	;# 
  1157  019A                     	;# 
  1158  019B                     	;# 
  1159  019B                     	;# 
  1160  019B                     	;# 
  1161  019B                     	;# 
  1162  019B                     	;# 
  1163  019C                     	;# 
  1164  019C                     	;# 
  1165  019C                     	;# 
  1166  019D                     	;# 
  1167  019D                     	;# 
  1168  019D                     	;# 
  1169  019E                     	;# 
  1170  019E                     	;# 
  1171  019E                     	;# 
  1172  019F                     	;# 
  1173  019F                     	;# 
  1174  019F                     	;# 
  1175  019F                     	;# 
  1176  019F                     	;# 
  1177  020C                     	;# 
  1178  020E                     	;# 
  1179  0211                     	;# 
  1180  0211                     	;# 
  1181  0212                     	;# 
  1182  0212                     	;# 
  1183  0213                     	;# 
  1184  0213                     	;# 
  1185  0214                     	;# 
  1186  0214                     	;# 
  1187  0215                     	;# 
  1188  0215                     	;# 
  1189  0215                     	;# 
  1190  0215                     	;# 
  1191  0216                     	;# 
  1192  0216                     	;# 
  1193  0217                     	;# 
  1194  0217                     	;# 
  1195  0219                     	;# 
  1196  021A                     	;# 
  1197  021B                     	;# 
  1198  021C                     	;# 
  1199  021D                     	;# 
  1200  021D                     	;# 
  1201  021E                     	;# 
  1202  021F                     	;# 
  1203  028C                     	;# 
  1204  028E                     	;# 
  1205  0291                     	;# 
  1206  0291                     	;# 
  1207  0292                     	;# 
  1208  0293                     	;# 
  1209  0294                     	;# 
  1210  0295                     	;# 
  1211  0295                     	;# 
  1212  0296                     	;# 
  1213  0297                     	;# 
  1214  0298                     	;# 
  1215  029F                     	;# 
  1216  030C                     	;# 
  1217  030E                     	;# 
  1218  0311                     	;# 
  1219  0311                     	;# 
  1220  0312                     	;# 
  1221  0313                     	;# 
  1222  0314                     	;# 
  1223  0315                     	;# 
  1224  0315                     	;# 
  1225  0316                     	;# 
  1226  0317                     	;# 
  1227  0318                     	;# 
  1228  038C                     	;# 
  1229  038E                     	;# 
  1230  0391                     	;# 
  1231  0392                     	;# 
  1232  0393                     	;# 
  1233  0397                     	;# 
  1234  0398                     	;# 
  1235  0399                     	;# 
  1236  039A                     	;# 
  1237  039C                     	;# 
  1238  039D                     	;# 
  1239  039E                     	;# 
  1240  039F                     	;# 
  1241  0411                     	;# 
  1242  0411                     	;# 
  1243  0412                     	;# 
  1244  0413                     	;# 
  1245  0414                     	;# 
  1246  0415                     	;# 
  1247  0416                     	;# 
  1248  0417                     	;# 
  1249  0418                     	;# 
  1250  0418                     	;# 
  1251  0419                     	;# 
  1252  041A                     	;# 
  1253  041B                     	;# 
  1254  041C                     	;# 
  1255  041D                     	;# 
  1256  041E                     	;# 
  1257  041F                     	;# 
  1258  0498                     	;# 
  1259  0498                     	;# 
  1260  0499                     	;# 
  1261  049A                     	;# 
  1262  049B                     	;# 
  1263  049B                     	;# 
  1264  049C                     	;# 
  1265  049D                     	;# 
  1266  049E                     	;# 
  1267  049F                     	;# 
  1268  0617                     	;# 
  1269  0618                     	;# 
  1270  0619                     	;# 
  1271  0619                     	;# 
  1272  061A                     	;# 
  1273  061B                     	;# 
  1274  061C                     	;# 
  1275  061C                     	;# 
  1276  061F                     	;# 
  1277  0691                     	;# 
  1278  0692                     	;# 
  1279  0693                     	;# 
  1280  0694                     	;# 
  1281  0695                     	;# 
  1282  0696                     	;# 
  1283  0697                     	;# 
  1284  0698                     	;# 
  1285  0699                     	;# 
  1286  0711                     	;# 
  1287  0712                     	;# 
  1288  0713                     	;# 
  1289  0714                     	;# 
  1290  0715                     	;# 
  1291  0716                     	;# 
  1292  0717                     	;# 
  1293  0718                     	;# 
  1294  0719                     	;# 
  1295  0891                     	;# 
  1296  0891                     	;# 
  1297  0891                     	;# 
  1298  0891                     	;# 
  1299  0891                     	;# 
  1300  0891                     	;# 
  1301  0892                     	;# 
  1302  0892                     	;# 
  1303  0892                     	;# 
  1304  0893                     	;# 
  1305  0893                     	;# 
  1306  0893                     	;# 
  1307  0893                     	;# 
  1308  0893                     	;# 
  1309  0893                     	;# 
  1310  0894                     	;# 
  1311  0894                     	;# 
  1312  0894                     	;# 
  1313  0895                     	;# 
  1314  0895                     	;# 
  1315  0895                     	;# 
  1316  0896                     	;# 
  1317  0896                     	;# 
  1318  0896                     	;# 
  1319  089B                     	;# 
  1320  0911                     	;# 
  1321  0912                     	;# 
  1322  0913                     	;# 
  1323  0914                     	;# 
  1324  0915                     	;# 
  1325  0916                     	;# 
  1326  0918                     	;# 
  1327  0919                     	;# 
  1328  091A                     	;# 
  1329  091B                     	;# 
  1330  091C                     	;# 
  1331  091D                     	;# 
  1332  091E                     	;# 
  1333  091F                     	;# 
  1334  0E0F                     	;# 
  1335  0E10                     	;# 
  1336  0E11                     	;# 
  1337  0E12                     	;# 
  1338  0E13                     	;# 
  1339  0E14                     	;# 
  1340  0E15                     	;# 
  1341  0E16                     	;# 
  1342  0E17                     	;# 
  1343  0E18                     	;# 
  1344  0E19                     	;# 
  1345  0E1A                     	;# 
  1346  0E1B                     	;# 
  1347  0E1C                     	;# 
  1348  0E1D                     	;# 
  1349  0E1E                     	;# 
  1350  0E1F                     	;# 
  1351  0E20                     	;# 
  1352  0E21                     	;# 
  1353  0E22                     	;# 
  1354  0E24                     	;# 
  1355  0E25                     	;# 
  1356  0E28                     	;# 
  1357  0E29                     	;# 
  1358  0E2A                     	;# 
  1359  0E2B                     	;# 
  1360  0E2C                     	;# 
  1361  0E2D                     	;# 
  1362  0E2E                     	;# 
  1363  0E2F                     	;# 
  1364  0E90                     	;# 
  1365  0E91                     	;# 
  1366  0E92                     	;# 
  1367  0E94                     	;# 
  1368  0E95                     	;# 
  1369  0EA0                     	;# 
  1370  0EA1                     	;# 
  1371  0EA2                     	;# 
  1372  0EA3                     	;# 
  1373  0EA4                     	;# 
  1374  0EA5                     	;# 
  1375  0F0F                     	;# 
  1376  0F10                     	;# 
  1377  0F11                     	;# 
  1378  0F12                     	;# 
  1379  0F13                     	;# 
  1380  0F14                     	;# 
  1381  0F15                     	;# 
  1382  0F16                     	;# 
  1383  0F17                     	;# 
  1384  0F18                     	;# 
  1385  0F19                     	;# 
  1386  0F1A                     	;# 
  1387  0F1B                     	;# 
  1388  0F1C                     	;# 
  1389  0F1D                     	;# 
  1390  0F1E                     	;# 
  1391  0F1F                     	;# 
  1392  0F20                     	;# 
  1393  0F21                     	;# 
  1394  0F22                     	;# 
  1395  0F23                     	;# 
  1396  0F24                     	;# 
  1397  0F25                     	;# 
  1398  0F26                     	;# 
  1399  0F27                     	;# 
  1400  0F28                     	;# 
  1401  0F29                     	;# 
  1402  0F2A                     	;# 
  1403  0F2B                     	;# 
  1404  0F2C                     	;# 
  1405  0F2D                     	;# 
  1406  0F2E                     	;# 
  1407  0F2F                     	;# 
  1408  0F30                     	;# 
  1409  0F31                     	;# 
  1410  0F32                     	;# 
  1411  0F33                     	;# 
  1412  0F34                     	;# 
  1413  0F35                     	;# 
  1414  0F36                     	;# 
  1415  0F37                     	;# 
  1416  0FE4                     	;# 
  1417  0FE5                     	;# 
  1418  0FE6                     	;# 
  1419  0FE7                     	;# 
  1420  0FE8                     	;# 
  1421  0FE9                     	;# 
  1422  0FEA                     	;# 
  1423  0FEB                     	;# 
  1424  0FED                     	;# 
  1425  0FEE                     	;# 
  1426  0FEF                     	;# 
  1427  0000                     	;# 
  1428  0001                     	;# 
  1429  0002                     	;# 
  1430  0003                     	;# 
  1431  0004                     	;# 
  1432  0005                     	;# 
  1433  0006                     	;# 
  1434  0007                     	;# 
  1435  0008                     	;# 
  1436  0009                     	;# 
  1437  000A                     	;# 
  1438  000B                     	;# 
  1439  000C                     	;# 
  1440  000E                     	;# 
  1441  0010                     	;# 
  1442  0011                     	;# 
  1443  0012                     	;# 
  1444  0013                     	;# 
  1445  0014                     	;# 
  1446  0015                     	;# 
  1447  0015                     	;# 
  1448  0016                     	;# 
  1449  0016                     	;# 
  1450  0017                     	;# 
  1451  0018                     	;# 
  1452  0019                     	;# 
  1453  0019                     	;# 
  1454  001A                     	;# 
  1455  001B                     	;# 
  1456  001C                     	;# 
  1457  001D                     	;# 
  1458  001E                     	;# 
  1459  001F                     	;# 
  1460  008C                     	;# 
  1461  008E                     	;# 
  1462  0090                     	;# 
  1463  0091                     	;# 
  1464  0092                     	;# 
  1465  0093                     	;# 
  1466  0094                     	;# 
  1467  0097                     	;# 
  1468  009B                     	;# 
  1469  009B                     	;# 
  1470  009C                     	;# 
  1471  009D                     	;# 
  1472  009E                     	;# 
  1473  009F                     	;# 
  1474  010C                     	;# 
  1475  010E                     	;# 
  1476  0111                     	;# 
  1477  0112                     	;# 
  1478  0113                     	;# 
  1479  0114                     	;# 
  1480  0115                     	;# 
  1481  0116                     	;# 
  1482  0117                     	;# 
  1483  0118                     	;# 
  1484  0119                     	;# 
  1485  018C                     	;# 
  1486  018E                     	;# 
  1487  0199                     	;# 
  1488  0199                     	;# 
  1489  0199                     	;# 
  1490  019A                     	;# 
  1491  019A                     	;# 
  1492  019A                     	;# 
  1493  019B                     	;# 
  1494  019B                     	;# 
  1495  019B                     	;# 
  1496  019B                     	;# 
  1497  019B                     	;# 
  1498  019C                     	;# 
  1499  019C                     	;# 
  1500  019C                     	;# 
  1501  019D                     	;# 
  1502  019D                     	;# 
  1503  019D                     	;# 
  1504  019E                     	;# 
  1505  019E                     	;# 
  1506  019E                     	;# 
  1507  019F                     	;# 
  1508  019F                     	;# 
  1509  019F                     	;# 
  1510  019F                     	;# 
  1511  019F                     	;# 
  1512  020C                     	;# 
  1513  020E                     	;# 
  1514  0211                     	;# 
  1515  0211                     	;# 
  1516  0212                     	;# 
  1517  0212                     	;# 
  1518  0213                     	;# 
  1519  0213                     	;# 
  1520  0214                     	;# 
  1521  0214                     	;# 
  1522  0215                     	;# 
  1523  0215                     	;# 
  1524  0215                     	;# 
  1525  0215                     	;# 
  1526  0216                     	;# 
  1527  0216                     	;# 
  1528  0217                     	;# 
  1529  0217                     	;# 
  1530  0219                     	;# 
  1531  021A                     	;# 
  1532  021B                     	;# 
  1533  021C                     	;# 
  1534  021D                     	;# 
  1535  021D                     	;# 
  1536  021E                     	;# 
  1537  021F                     	;# 
  1538  028C                     	;# 
  1539  028E                     	;# 
  1540  0291                     	;# 
  1541  0291                     	;# 
  1542  0292                     	;# 
  1543  0293                     	;# 
  1544  0294                     	;# 
  1545  0295                     	;# 
  1546  0295                     	;# 
  1547  0296                     	;# 
  1548  0297                     	;# 
  1549  0298                     	;# 
  1550  029F                     	;# 
  1551  030C                     	;# 
  1552  030E                     	;# 
  1553  0311                     	;# 
  1554  0311                     	;# 
  1555  0312                     	;# 
  1556  0313                     	;# 
  1557  0314                     	;# 
  1558  0315                     	;# 
  1559  0315                     	;# 
  1560  0316                     	;# 
  1561  0317                     	;# 
  1562  0318                     	;# 
  1563  038C                     	;# 
  1564  038E                     	;# 
  1565  0391                     	;# 
  1566  0392                     	;# 
  1567  0393                     	;# 
  1568  0397                     	;# 
  1569  0398                     	;# 
  1570  0399                     	;# 
  1571  039A                     	;# 
  1572  039C                     	;# 
  1573  039D                     	;# 
  1574  039E                     	;# 
  1575  039F                     	;# 
  1576  0411                     	;# 
  1577  0411                     	;# 
  1578  0412                     	;# 
  1579  0413                     	;# 
  1580  0414                     	;# 
  1581  0415                     	;# 
  1582  0416                     	;# 
  1583  0417                     	;# 
  1584  0418                     	;# 
  1585  0418                     	;# 
  1586  0419                     	;# 
  1587  041A                     	;# 
  1588  041B                     	;# 
  1589  041C                     	;# 
  1590  041D                     	;# 
  1591  041E                     	;# 
  1592  041F                     	;# 
  1593  0498                     	;# 
  1594  0498                     	;# 
  1595  0499                     	;# 
  1596  049A                     	;# 
  1597  049B                     	;# 
  1598  049B                     	;# 
  1599  049C                     	;# 
  1600  049D                     	;# 
  1601  049E                     	;# 
  1602  049F                     	;# 
  1603  0617                     	;# 
  1604  0618                     	;# 
  1605  0619                     	;# 
  1606  0619                     	;# 
  1607  061A                     	;# 
  1608  061B                     	;# 
  1609  061C                     	;# 
  1610  061C                     	;# 
  1611  061F                     	;# 
  1612  0691                     	;# 
  1613  0692                     	;# 
  1614  0693                     	;# 
  1615  0694                     	;# 
  1616  0695                     	;# 
  1617  0696                     	;# 
  1618  0697                     	;# 
  1619  0698                     	;# 
  1620  0699                     	;# 
  1621  0711                     	;# 
  1622  0712                     	;# 
  1623  0713                     	;# 
  1624  0714                     	;# 
  1625  0715                     	;# 
  1626  0716                     	;# 
  1627  0717                     	;# 
  1628  0718                     	;# 
  1629  0719                     	;# 
  1630  0891                     	;# 
  1631  0891                     	;# 
  1632  0891                     	;# 
  1633  0891                     	;# 
  1634  0891                     	;# 
  1635  0891                     	;# 
  1636  0892                     	;# 
  1637  0892                     	;# 
  1638  0892                     	;# 
  1639  0893                     	;# 
  1640  0893                     	;# 
  1641  0893                     	;# 
  1642  0893                     	;# 
  1643  0893                     	;# 
  1644  0893                     	;# 
  1645  0894                     	;# 
  1646  0894                     	;# 
  1647  0894                     	;# 
  1648  0895                     	;# 
  1649  0895                     	;# 
  1650  0895                     	;# 
  1651  0896                     	;# 
  1652  0896                     	;# 
  1653  0896                     	;# 
  1654  089B                     	;# 
  1655  0911                     	;# 
  1656  0912                     	;# 
  1657  0913                     	;# 
  1658  0914                     	;# 
  1659  0915                     	;# 
  1660  0916                     	;# 
  1661  0918                     	;# 
  1662  0919                     	;# 
  1663  091A                     	;# 
  1664  091B                     	;# 
  1665  091C                     	;# 
  1666  091D                     	;# 
  1667  091E                     	;# 
  1668  091F                     	;# 
  1669  0E0F                     	;# 
  1670  0E10                     	;# 
  1671  0E11                     	;# 
  1672  0E12                     	;# 
  1673  0E13                     	;# 
  1674  0E14                     	;# 
  1675  0E15                     	;# 
  1676  0E16                     	;# 
  1677  0E17                     	;# 
  1678  0E18                     	;# 
  1679  0E19                     	;# 
  1680  0E1A                     	;# 
  1681  0E1B                     	;# 
  1682  0E1C                     	;# 
  1683  0E1D                     	;# 
  1684  0E1E                     	;# 
  1685  0E1F                     	;# 
  1686  0E20                     	;# 
  1687  0E21                     	;# 
  1688  0E22                     	;# 
  1689  0E24                     	;# 
  1690  0E25                     	;# 
  1691  0E28                     	;# 
  1692  0E29                     	;# 
  1693  0E2A                     	;# 
  1694  0E2B                     	;# 
  1695  0E2C                     	;# 
  1696  0E2D                     	;# 
  1697  0E2E                     	;# 
  1698  0E2F                     	;# 
  1699  0E90                     	;# 
  1700  0E91                     	;# 
  1701  0E92                     	;# 
  1702  0E94                     	;# 
  1703  0E95                     	;# 
  1704  0EA0                     	;# 
  1705  0EA1                     	;# 
  1706  0EA2                     	;# 
  1707  0EA3                     	;# 
  1708  0EA4                     	;# 
  1709  0EA5                     	;# 
  1710  0F0F                     	;# 
  1711  0F10                     	;# 
  1712  0F11                     	;# 
  1713  0F12                     	;# 
  1714  0F13                     	;# 
  1715  0F14                     	;# 
  1716  0F15                     	;# 
  1717  0F16                     	;# 
  1718  0F17                     	;# 
  1719  0F18                     	;# 
  1720  0F19                     	;# 
  1721  0F1A                     	;# 
  1722  0F1B                     	;# 
  1723  0F1C                     	;# 
  1724  0F1D                     	;# 
  1725  0F1E                     	;# 
  1726  0F1F                     	;# 
  1727  0F20                     	;# 
  1728  0F21                     	;# 
  1729  0F22                     	;# 
  1730  0F23                     	;# 
  1731  0F24                     	;# 
  1732  0F25                     	;# 
  1733  0F26                     	;# 
  1734  0F27                     	;# 
  1735  0F28                     	;# 
  1736  0F29                     	;# 
  1737  0F2A                     	;# 
  1738  0F2B                     	;# 
  1739  0F2C                     	;# 
  1740  0F2D                     	;# 
  1741  0F2E                     	;# 
  1742  0F2F                     	;# 
  1743  0F30                     	;# 
  1744  0F31                     	;# 
  1745  0F32                     	;# 
  1746  0F33                     	;# 
  1747  0F34                     	;# 
  1748  0F35                     	;# 
  1749  0F36                     	;# 
  1750  0F37                     	;# 
  1751  0FE4                     	;# 
  1752  0FE5                     	;# 
  1753  0FE6                     	;# 
  1754  0FE7                     	;# 
  1755  0FE8                     	;# 
  1756  0FE9                     	;# 
  1757  0FEA                     	;# 
  1758  0FEB                     	;# 
  1759  0FED                     	;# 
  1760  0FEE                     	;# 
  1761  0FEF                     	;# 
  1762  0000                     	;# 
  1763  0001                     	;# 
  1764  0002                     	;# 
  1765  0003                     	;# 
  1766  0004                     	;# 
  1767  0005                     	;# 
  1768  0006                     	;# 
  1769  0007                     	;# 
  1770  0008                     	;# 
  1771  0009                     	;# 
  1772  000A                     	;# 
  1773  000B                     	;# 
  1774  000C                     	;# 
  1775  000E                     	;# 
  1776  0010                     	;# 
  1777  0011                     	;# 
  1778  0012                     	;# 
  1779  0013                     	;# 
  1780  0014                     	;# 
  1781  0015                     	;# 
  1782  0015                     	;# 
  1783  0016                     	;# 
  1784  0016                     	;# 
  1785  0017                     	;# 
  1786  0018                     	;# 
  1787  0019                     	;# 
  1788  0019                     	;# 
  1789  001A                     	;# 
  1790  001B                     	;# 
  1791  001C                     	;# 
  1792  001D                     	;# 
  1793  001E                     	;# 
  1794  001F                     	;# 
  1795  008C                     	;# 
  1796  008E                     	;# 
  1797  0090                     	;# 
  1798  0091                     	;# 
  1799  0092                     	;# 
  1800  0093                     	;# 
  1801  0094                     	;# 
  1802  0097                     	;# 
  1803  009B                     	;# 
  1804  009B                     	;# 
  1805  009C                     	;# 
  1806  009D                     	;# 
  1807  009E                     	;# 
  1808  009F                     	;# 
  1809  010C                     	;# 
  1810  010E                     	;# 
  1811  0111                     	;# 
  1812  0112                     	;# 
  1813  0113                     	;# 
  1814  0114                     	;# 
  1815  0115                     	;# 
  1816  0116                     	;# 
  1817  0117                     	;# 
  1818  0118                     	;# 
  1819  0119                     	;# 
  1820  018C                     	;# 
  1821  018E                     	;# 
  1822  0199                     	;# 
  1823  0199                     	;# 
  1824  0199                     	;# 
  1825  019A                     	;# 
  1826  019A                     	;# 
  1827  019A                     	;# 
  1828  019B                     	;# 
  1829  019B                     	;# 
  1830  019B                     	;# 
  1831  019B                     	;# 
  1832  019B                     	;# 
  1833  019C                     	;# 
  1834  019C                     	;# 
  1835  019C                     	;# 
  1836  019D                     	;# 
  1837  019D                     	;# 
  1838  019D                     	;# 
  1839  019E                     	;# 
  1840  019E                     	;# 
  1841  019E                     	;# 
  1842  019F                     	;# 
  1843  019F                     	;# 
  1844  019F                     	;# 
  1845  019F                     	;# 
  1846  019F                     	;# 
  1847  020C                     	;# 
  1848  020E                     	;# 
  1849  0211                     	;# 
  1850  0211                     	;# 
  1851  0212                     	;# 
  1852  0212                     	;# 
  1853  0213                     	;# 
  1854  0213                     	;# 
  1855  0214                     	;# 
  1856  0214                     	;# 
  1857  0215                     	;# 
  1858  0215                     	;# 
  1859  0215                     	;# 
  1860  0215                     	;# 
  1861  0216                     	;# 
  1862  0216                     	;# 
  1863  0217                     	;# 
  1864  0217                     	;# 
  1865  0219                     	;# 
  1866  021A                     	;# 
  1867  021B                     	;# 
  1868  021C                     	;# 
  1869  021D                     	;# 
  1870  021D                     	;# 
  1871  021E                     	;# 
  1872  021F                     	;# 
  1873  028C                     	;# 
  1874  028E                     	;# 
  1875  0291                     	;# 
  1876  0291                     	;# 
  1877  0292                     	;# 
  1878  0293                     	;# 
  1879  0294                     	;# 
  1880  0295                     	;# 
  1881  0295                     	;# 
  1882  0296                     	;# 
  1883  0297                     	;# 
  1884  0298                     	;# 
  1885  029F                     	;# 
  1886  030C                     	;# 
  1887  030E                     	;# 
  1888  0311                     	;# 
  1889  0311                     	;# 
  1890  0312                     	;# 
  1891  0313                     	;# 
  1892  0314                     	;# 
  1893  0315                     	;# 
  1894  0315                     	;# 
  1895  0316                     	;# 
  1896  0317                     	;# 
  1897  0318                     	;# 
  1898  038C                     	;# 
  1899  038E                     	;# 
  1900  0391                     	;# 
  1901  0392                     	;# 
  1902  0393                     	;# 
  1903  0397                     	;# 
  1904  0398                     	;# 
  1905  0399                     	;# 
  1906  039A                     	;# 
  1907  039C                     	;# 
  1908  039D                     	;# 
  1909  039E                     	;# 
  1910  039F                     	;# 
  1911  0411                     	;# 
  1912  0411                     	;# 
  1913  0412                     	;# 
  1914  0413                     	;# 
  1915  0414                     	;# 
  1916  0415                     	;# 
  1917  0416                     	;# 
  1918  0417                     	;# 
  1919  0418                     	;# 
  1920  0418                     	;# 
  1921  0419                     	;# 
  1922  041A                     	;# 
  1923  041B                     	;# 
  1924  041C                     	;# 
  1925  041D                     	;# 
  1926  041E                     	;# 
  1927  041F                     	;# 
  1928  0498                     	;# 
  1929  0498                     	;# 
  1930  0499                     	;# 
  1931  049A                     	;# 
  1932  049B                     	;# 
  1933  049B                     	;# 
  1934  049C                     	;# 
  1935  049D                     	;# 
  1936  049E                     	;# 
  1937  049F                     	;# 
  1938  0617                     	;# 
  1939  0618                     	;# 
  1940  0619                     	;# 
  1941  0619                     	;# 
  1942  061A                     	;# 
  1943  061B                     	;# 
  1944  061C                     	;# 
  1945  061C                     	;# 
  1946  061F                     	;# 
  1947  0691                     	;# 
  1948  0692                     	;# 
  1949  0693                     	;# 
  1950  0694                     	;# 
  1951  0695                     	;# 
  1952  0696                     	;# 
  1953  0697                     	;# 
  1954  0698                     	;# 
  1955  0699                     	;# 
  1956  0711                     	;# 
  1957  0712                     	;# 
  1958  0713                     	;# 
  1959  0714                     	;# 
  1960  0715                     	;# 
  1961  0716                     	;# 
  1962  0717                     	;# 
  1963  0718                     	;# 
  1964  0719                     	;# 
  1965  0891                     	;# 
  1966  0891                     	;# 
  1967  0891                     	;# 
  1968  0891                     	;# 
  1969  0891                     	;# 
  1970  0891                     	;# 
  1971  0892                     	;# 
  1972  0892                     	;# 
  1973  0892                     	;# 
  1974  0893                     	;# 
  1975  0893                     	;# 
  1976  0893                     	;# 
  1977  0893                     	;# 
  1978  0893                     	;# 
  1979  0893                     	;# 
  1980  0894                     	;# 
  1981  0894                     	;# 
  1982  0894                     	;# 
  1983  0895                     	;# 
  1984  0895                     	;# 
  1985  0895                     	;# 
  1986  0896                     	;# 
  1987  0896                     	;# 
  1988  0896                     	;# 
  1989  089B                     	;# 
  1990  0911                     	;# 
  1991  0912                     	;# 
  1992  0913                     	;# 
  1993  0914                     	;# 
  1994  0915                     	;# 
  1995  0916                     	;# 
  1996  0918                     	;# 
  1997  0919                     	;# 
  1998  091A                     	;# 
  1999  091B                     	;# 
  2000  091C                     	;# 
  2001  091D                     	;# 
  2002  091E                     	;# 
  2003  091F                     	;# 
  2004  0E0F                     	;# 
  2005  0E10                     	;# 
  2006  0E11                     	;# 
  2007  0E12                     	;# 
  2008  0E13                     	;# 
  2009  0E14                     	;# 
  2010  0E15                     	;# 
  2011  0E16                     	;# 
  2012  0E17                     	;# 
  2013  0E18                     	;# 
  2014  0E19                     	;# 
  2015  0E1A                     	;# 
  2016  0E1B                     	;# 
  2017  0E1C                     	;# 
  2018  0E1D                     	;# 
  2019  0E1E                     	;# 
  2020  0E1F                     	;# 
  2021  0E20                     	;# 
  2022  0E21                     	;# 
  2023  0E22                     	;# 
  2024  0E24                     	;# 
  2025  0E25                     	;# 
  2026  0E28                     	;# 
  2027  0E29                     	;# 
  2028  0E2A                     	;# 
  2029  0E2B                     	;# 
  2030  0E2C                     	;# 
  2031  0E2D                     	;# 
  2032  0E2E                     	;# 
  2033  0E2F                     	;# 
  2034  0E90                     	;# 
  2035  0E91                     	;# 
  2036  0E92                     	;# 
  2037  0E94                     	;# 
  2038  0E95                     	;# 
  2039  0EA0                     	;# 
  2040  0EA1                     	;# 
  2041  0EA2                     	;# 
  2042  0EA3                     	;# 
  2043  0EA4                     	;# 
  2044  0EA5                     	;# 
  2045  0F0F                     	;# 
  2046  0F10                     	;# 
  2047  0F11                     	;# 
  2048  0F12                     	;# 
  2049  0F13                     	;# 
  2050  0F14                     	;# 
  2051  0F15                     	;# 
  2052  0F16                     	;# 
  2053  0F17                     	;# 
  2054  0F18                     	;# 
  2055  0F19                     	;# 
  2056  0F1A                     	;# 
  2057  0F1B                     	;# 
  2058  0F1C                     	;# 
  2059  0F1D                     	;# 
  2060  0F1E                     	;# 
  2061  0F1F                     	;# 
  2062  0F20                     	;# 
  2063  0F21                     	;# 
  2064  0F22                     	;# 
  2065  0F23                     	;# 
  2066  0F24                     	;# 
  2067  0F25                     	;# 
  2068  0F26                     	;# 
  2069  0F27                     	;# 
  2070  0F28                     	;# 
  2071  0F29                     	;# 
  2072  0F2A                     	;# 
  2073  0F2B                     	;# 
  2074  0F2C                     	;# 
  2075  0F2D                     	;# 
  2076  0F2E                     	;# 
  2077  0F2F                     	;# 
  2078  0F30                     	;# 
  2079  0F31                     	;# 
  2080  0F32                     	;# 
  2081  0F33                     	;# 
  2082  0F34                     	;# 
  2083  0F35                     	;# 
  2084  0F36                     	;# 
  2085  0F37                     	;# 
  2086  0FE4                     	;# 
  2087  0FE5                     	;# 
  2088  0FE6                     	;# 
  2089  0FE7                     	;# 
  2090  0FE8                     	;# 
  2091  0FE9                     	;# 
  2092  0FEA                     	;# 
  2093  0FEB                     	;# 
  2094  0FED                     	;# 
  2095  0FEE                     	;# 
  2096  0FEF                     	;# 
  2097  1FE0                     _romArray_absaddr	set	8160
  2098                           
  2099                           	psect	stringtext1
  2100  0663                     __pstringtext1:	
  2101  0663                     _resetRomData:	
  2102  0663  34AA               	retlw	170
  2103  0664  3455               	retlw	85
  2104  0665  346E               	retlw	110
  2105  0666  3463               	retlw	99
  2106  0667  346F               	retlw	111
  2107  0668  346E               	retlw	110
  2108  0669  3466               	retlw	102
  2109  066A  3469               	retlw	105
  2110  066B  3467               	retlw	103
  2111  066C  3475               	retlw	117
  2112  066D  3472               	retlw	114
  2113  066E  3465               	retlw	101
  2114  066F  3464               	retlw	100
  2115  0670  3400               	retlw	0
  2116  0671  3400               	retlw	0
  2117  0672  3400               	retlw	0
  2118  0673  3400               	retlw	0
  2119  0674  3400               	retlw	0
  2120  0675  3400               	retlw	0
  2121  0676                     __end_of_resetRomData:	
  2122                           
  2123                           	psect	stringtext2
  2124  06CD                     __pstringtext2:	
  2125  06CD                     _n_ADDRESS_P0:	
  2126  06CD  34AD               	retlw	173
  2127  06CE  3487               	retlw	135
  2128  06CF  3466               	retlw	102
  2129  06D0  34BC               	retlw	188
  2130  06D1  34BB               	retlw	187
  2131  06D2                     __end_of_n_ADDRESS_P0:	
  2132                           
  2133                           	psect	stringtext3
  2134  06E5                     __pstringtext3:	
  2135  06E5                     _n_ADDRESS_MUL:	
  2136  06E5  3421               	retlw	33
  2137  06E6                     __end_of_n_ADDRESS_MUL:	
  2138  1FE0                     _romArray_absaddr	set	8160
  2139                           
  2140                           	psect	_romArray_text
  2141  1FE0                     __p_romArray_text:	
  2142  1FE0                     _romArray:	
  2143  1FE0  3400               	retlw	0
  2144  1FE1  3400               	retlw	0
  2145  1FE2  3400               	retlw	0
  2146  1FE3  3400               	retlw	0
  2147  1FE4  3400               	retlw	0
  2148  1FE5  3400               	retlw	0
  2149  1FE6  3400               	retlw	0
  2150  1FE7  3400               	retlw	0
  2151  1FE8  3400               	retlw	0
  2152  1FE9  3400               	retlw	0
  2153  1FEA  3400               	retlw	0
  2154  1FEB  3400               	retlw	0
  2155  1FEC  3400               	retlw	0
  2156  1FED  3400               	retlw	0
  2157  1FEE  3400               	retlw	0
  2158  1FEF  3400               	retlw	0
  2159  1FF0  3400               	retlw	0
  2160  1FF1  3400               	retlw	0
  2161  1FF2  3400               	retlw	0
  2162  1FF3  3400               	retlw	0
  2163  1FF4  3400               	retlw	0
  2164  1FF5  3400               	retlw	0
  2165  1FF6  3400               	retlw	0
  2166  1FF7  3400               	retlw	0
  2167  1FF8  3400               	retlw	0
  2168  1FF9  3400               	retlw	0
  2169  1FFA  3400               	retlw	0
  2170  1FFB  3400               	retlw	0
  2171  1FFC  3400               	retlw	0
  2172  1FFD  3400               	retlw	0
  2173  1FFE  3400               	retlw	0
  2174  1FFF  3400               	retlw	0
  2175  2000                     __end_of_romArray:	
  2176  0003                     _STATUSbits	set	3
  2177  0010                     _PIR0bits	set	16
  2178  000C                     _PORTAbits	set	12
  2179  000B                     _INTCONbits	set	11
  2180  0097                     _WDTCONbits	set	151
  2181  009E                     _ADCON1bits	set	158
  2182  009C                     _ADRESH	set	156
  2183  009B                     _ADRESL	set	155
  2184  009D                     _ADCON0bits	set	157
  2185  0090                     _PIE0bits	set	144
  2186  008E                     _TRISCbits	set	142
  2187  008C                     _TRISAbits	set	140
  2188  0117                     _FVRCONbits	set	279
  2189  018E                     _ANSELCbits	set	398
  2190  018C                     _ANSELAbits	set	396
  2191  018E                     _ANSELC	set	398
  2192  018C                     _ANSELA	set	396
  2193  020C                     _WPUAbits	set	524
  2194  0211                     _SSP1BUF	set	529
  2195  0214                     _SSP1STATbits	set	532
  2196  0215                     _SSPCON1bits	set	533
  2197  0894                     _PMDATH	set	2196
  2198  0893                     _PMDATL	set	2195
  2199  0896                     _PMCON2	set	2198
  2200  0895                     _PMCON1bits	set	2197
  2201  0892                     _PMADRH	set	2194
  2202  0891                     _PMADRL	set	2193
  2203  0895                     _PMCON1	set	2197
  2204  091A                     _OSCCON2bits	set	2330
  2205  0919                     _OSCCON1bits	set	2329
  2206                           
  2207                           	psect	stringtext4
  2208  06BB                     __pstringtext4:	
  2209  06BB                     STR_5:	
  2210  06BB  3441               	retlw	65	;'A'
  2211  06BC  3444               	retlw	68	;'D'
  2212  06BD  3443               	retlw	67	;'C'
  2213  06BE  3433               	retlw	51	;'3'
  2214  06BF  3431               	retlw	49	;'1'
  2215  06C0  3400               	retlw	0
  2216                           
  2217                           	psect	stringtext5
  2218  06C1                     __pstringtext5:	
  2219  06C1                     STR_4:	
  2220  06C1  3441               	retlw	65	;'A'
  2221  06C2  3444               	retlw	68	;'D'
  2222  06C3  3443               	retlw	67	;'C'
  2223  06C4  3432               	retlw	50	;'2'
  2224  06C5  3439               	retlw	57	;'9'
  2225  06C6  3400               	retlw	0
  2226                           
  2227                           	psect	stringtext6
  2228  06D2                     __pstringtext6:	
  2229  06D2                     STR_2:	
  2230  06D2  3441               	retlw	65	;'A'
  2231  06D3  3444               	retlw	68	;'D'
  2232  06D4  3443               	retlw	67	;'C'
  2233  06D5  3433               	retlw	51	;'3'
  2234  06D6  3400               	retlw	0
  2235                           
  2236                           	psect	stringtext7
  2237  06D7                     __pstringtext7:	
  2238  06D7                     STR_3:	
  2239  06D7  3441               	retlw	65	;'A'
  2240  06D8  3444               	retlw	68	;'D'
  2241  06D9  3443               	retlw	67	;'C'
  2242  06DA  3437               	retlw	55	;'7'
  2243  06DB  3400               	retlw	0
  2244                           
  2245                           	psect	stringtext8
  2246  06DC                     __pstringtext8:	
  2247  06DC                     STR_6:	
  2248  06DC  3442               	retlw	66	;'B'
  2249  06DD  344F               	retlw	79	;'O'
  2250  06DE  344F               	retlw	79	;'O'
  2251  06DF  3454               	retlw	84	;'T'
  2252  06E0  3400               	retlw	0
  2253                           
  2254                           	psect	stringtext9
  2255  06E1                     __pstringtext9:	
  2256  06E1                     STR_1:	
  2257  06E1  3444               	retlw	68	;'D'
  2258  06E2  3442               	retlw	66	;'B'
  2259  06E3  3447               	retlw	71	;'G'
  2260  06E4  3400               	retlw	0
  2261                           
  2262                           	psect	stringtext10
  2263  0000                     __pstringtext10:	
  2264                           
  2265                           ; #config settings
  2266  0000                     
  2267                           	psect	cinit
  2268  0011                     start_initialization:	
  2269  0011                     __initialization:	
  2270                           
  2271                           ; Clear objects allocated to BANK0
  2272  0011  3047               	movlw	low __pbssBANK0
  2273  0012  0084               	movwf	4
  2274  0013  3000               	movlw	high __pbssBANK0
  2275  0014  0085               	movwf	5
  2276  0015  3026               	movlw	38
  2277  0016  3186  26C7  3180   	fcall	clear_ram0
  2278                           
  2279                           ; Clear objects allocated to BANK1
  2280  0019  30A0               	movlw	low __pbssBANK1
  2281  001A  0084               	movwf	4
  2282  001B  3000               	movlw	high __pbssBANK1
  2283  001C  0085               	movwf	5
  2284  001D  3033               	movlw	51
  2285  001E  3186  26C7  3180   	fcall	clear_ram0
  2286                           
  2287                           ; Clear objects allocated to BANK2
  2288  0021  3020               	movlw	low __pbssBANK2
  2289  0022  0084               	movwf	4
  2290  0023  3001               	movlw	high __pbssBANK2
  2291  0024  0085               	movwf	5
  2292  0025  3020               	movlw	32
  2293  0026  3186  26C7         	fcall	clear_ram0
  2294  0028                     end_of_initialization:	
  2295                           ;End of C runtime variable initialization code
  2296                           
  2297  0028                     __end_of__initialization:	
  2298  0028  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  2299  0029  0020               	movlb	0
  2300  002A  3182  2AE8         	ljmp	_main	;jump to C main() function
  2301                           
  2302                           	psect	bssBANK0
  2303  0047                     __pbssBANK0:	
  2304  0047                     _counter:	
  2305  0047                     	ds	2
  2306  0049                     _nrf24l01RXPacketData:	
  2307  0049                     	ds	1
  2308  004A                     _sleepLoop:	
  2309  004A                     	ds	1
  2310  004B                     _nrf24l01:	
  2311  004B                     	ds	1
  2312  004C                     _nrf24l01TXPacketData:	
  2313  004C                     	ds	1
  2314  004D                     _nrf24l01RXValue:	
  2315  004D                     	ds	8
  2316  0055                     _nrf24l01RXTopic:	
  2317  0055                     	ds	8
  2318  005D                     _nrf24l01TXValue:	
  2319  005D                     	ds	8
  2320  0065                     _nrf24l01TXTopic:	
  2321  0065                     	ds	8
  2322                           
  2323                           	psect	bssBANK1
  2324  00A0                     __pbssBANK1:	
  2325  00A0                     _romData:	
  2326  00A0                     	ds	19
  2327  00B3                     _nrf24l01RXName:	
  2328  00B3                     	ds	16
  2329  00C3                     _nrf24l01TXName:	
  2330  00C3                     	ds	16
  2331                           
  2332                           	psect	bssBANK2
  2333  0120                     __pbssBANK2:	
  2334  0120                     _romHolder:	
  2335  0120                     	ds	32
  2336                           
  2337                           	psect	clrtext
  2338  06C7                     clear_ram0:	
  2339                           ;	Called with FSR0 containing the base address, and
  2340                           ;	WREG with the size to clear
  2341                           
  2342  06C7  0064               	clrwdt	;clear the watchdog before getting into this loop
  2343  06C8                     clrloop0:	
  2344  06C8  0180               	clrf	0	;clear RAM location pointed to by FSR
  2345  06C9  3101               	addfsr 0,1
  2346  06CA  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  2347  06CB  2EC8               	goto	clrloop0	;have we reached the end yet?
  2348  06CC  3400               	retlw	0	;all done for this memory range, return
  2349                           
  2350                           	psect	cstackCOMMON
  2351  0070                     __pcstackCOMMON:	
  2352  0070                     ?_nrf24l01ISR:	
  2353  0070                     ?_nrf24l01SetRXMode:	
  2354                           ; 1 bytes @ 0x0
  2355                           
  2356  0070                     ?_nrf24l01SendString:	
  2357                           ; 1 bytes @ 0x0
  2358                           
  2359  0070                     ?_nrf24l01Init:	
  2360                           ; 1 bytes @ 0x0
  2361                           
  2362  0070                     ?_flashWriteByte:	
  2363                           ; 1 bytes @ 0x0
  2364                           
  2365  0070                     ?_flashRealod:	
  2366                           ; 1 bytes @ 0x0
  2367                           
  2368  0070                     ?_flashUpdate:	
  2369                           ; 1 bytes @ 0x0
  2370                           
  2371  0070                     ?_nrf24l01InterfaceInit:	
  2372                           ; 1 bytes @ 0x0
  2373                           
  2374  0070                     ?_nrf24l01SPISend:	
  2375                           ; 1 bytes @ 0x0
  2376                           
  2377  0070                     ??_nrf24l01SPISend:	
  2378                           ; 1 bytes @ 0x0
  2379                           
  2380  0070                     ?_nrf24l01SPIStart:	
  2381                           ; 1 bytes @ 0x0
  2382                           
  2383  0070                     ??_nrf24l01SPIStart:	
  2384                           ; 1 bytes @ 0x0
  2385                           
  2386  0070                     ?_nrf24l01SPIEnd:	
  2387                           ; 1 bytes @ 0x0
  2388                           
  2389  0070                     ??_nrf24l01SPIEnd:	
  2390                           ; 1 bytes @ 0x0
  2391                           
  2392  0070                     ?_enableInterrupts:	
  2393                           ; 1 bytes @ 0x0
  2394                           
  2395  0070                     ??_enableInterrupts:	
  2396                           ; 1 bytes @ 0x0
  2397                           
  2398  0070                     ?_exception:	
  2399                           ; 1 bytes @ 0x0
  2400                           
  2401  0070                     ?_ISR:	
  2402                           ; 1 bytes @ 0x0
  2403                           
  2404  0070                     ?_sleep:	
  2405                           ; 1 bytes @ 0x0
  2406                           
  2407  0070                     ?_loop:	
  2408                           ; 1 bytes @ 0x0
  2409                           
  2410  0070                     ?_main:	
  2411                           ; 1 bytes @ 0x0
  2412                           
  2413  0070                     ?_nrf24l01InitRegisters:	
  2414                           ; 1 bytes @ 0x0
  2415                           
  2416  0070                     ?i1_nrf24l01SetRXMode:	
  2417                           ; 1 bytes @ 0x0
  2418                           
  2419  0070                     nrf24l01SPISend@data:	
  2420                           ; 1 bytes @ 0x0
  2421                           
  2422  0070                     enableInterrupts@enable:	
  2423                           ; 1 bytes @ 0x0
  2424                           
  2425  0070                     nrf24l01InitRegisters@isReciever:	
  2426                           ; 1 bytes @ 0x0
  2427                           
  2428  0070                     flashWriteByte@offset:	
  2429                           ; 1 bytes @ 0x0
  2430                           
  2431                           
  2432                           ; 2 bytes @ 0x0
  2433  0070                     	ds	1
  2434  0071                     ?i1_nrf24l01Send:	
  2435  0071                     i1nrf24l01Send@data:	
  2436                           ; 1 bytes @ 0x1
  2437                           
  2438                           
  2439                           ; 1 bytes @ 0x1
  2440  0071                     	ds	1
  2441  0072                     ??i1_nrf24l01Send:	
  2442  0072                     flashWriteByte@data:	
  2443                           ; 1 bytes @ 0x2
  2444                           
  2445                           
  2446                           ; 2 bytes @ 0x2
  2447  0072                     	ds	1
  2448  0073                     i1nrf24l01Send@command:	
  2449                           
  2450                           ; 1 bytes @ 0x3
  2451  0073                     	ds	1
  2452  0074                     ??_flashWriteByte:	
  2453  0074                     ??i1_nrf24l01SetRXMode:	
  2454                           ; 1 bytes @ 0x4
  2455                           
  2456  0074                     flashWriteByte@address:	
  2457                           ; 1 bytes @ 0x4
  2458                           
  2459                           
  2460                           ; 2 bytes @ 0x4
  2461  0074                     	ds	1
  2462  0075                     i1nrf24l01SetRXMode@config:	
  2463                           
  2464                           ; 1 bytes @ 0x5
  2465  0075                     	ds	1
  2466  0076                     ??_flashUpdate:	
  2467  0076                     i1nrf24l01SetRXMode@rxMode:	
  2468                           ; 1 bytes @ 0x6
  2469                           
  2470                           
  2471                           ; 1 bytes @ 0x6
  2472  0076                     	ds	2
  2473  0078                     flashUpdate@i:	
  2474                           
  2475                           ; 2 bytes @ 0x8
  2476  0078                     	ds	2
  2477  007A                     ??_exception:	
  2478                           
  2479                           ; 1 bytes @ 0xA
  2480  007A                     	ds	2
  2481  007C                     exception@exception:	
  2482                           
  2483                           ; 1 bytes @ 0xC
  2484  007C                     	ds	1
  2485  007D                     ??_nrf24l01ISR:	
  2486                           
  2487                           ; 1 bytes @ 0xD
  2488  007D                     	ds	1
  2489  007E                     ??_ISR:	
  2490                           
  2491                           	psect	cstackBANK0
  2492  0020                     __pcstackBANK0:	
  2493                           ; 1 bytes @ 0xE
  2494                           
  2495  0020                     nrf24l01ISR@status:	
  2496                           
  2497                           ; 1 bytes @ 0x0
  2498  0020                     	ds	1
  2499  0021                     ?_strcpy:	
  2500  0021                     ??_nrf24l01InterfaceInit:	
  2501                           ; 1 bytes @ 0x1
  2502                           
  2503  0021                     ??_sleep:	
  2504                           ; 1 bytes @ 0x1
  2505                           
  2506  0021                     ?_nrf24l01Send:	
  2507                           ; 1 bytes @ 0x1
  2508                           
  2509  0021                     ?_flashReadByte:	
  2510                           ; 1 bytes @ 0x1
  2511                           
  2512  0021                     ?___lwdiv:	
  2513                           ; 2 bytes @ 0x1
  2514                           
  2515  0021                     ?___lwmod:	
  2516                           ; 2 bytes @ 0x1
  2517                           
  2518  0021                     ?___lmul:	
  2519                           ; 2 bytes @ 0x1
  2520                           
  2521  0021                     ?___lldiv:	
  2522                           ; 4 bytes @ 0x1
  2523                           
  2524  0021                     nrf24l01Send@data:	
  2525                           ; 4 bytes @ 0x1
  2526                           
  2527  0021                     flashReadByte@offset:	
  2528                           ; 1 bytes @ 0x1
  2529                           
  2530  0021                     ___lwdiv@divisor:	
  2531                           ; 2 bytes @ 0x1
  2532                           
  2533  0021                     ___lwmod@divisor:	
  2534                           ; 2 bytes @ 0x1
  2535                           
  2536  0021                     strcpy@from:	
  2537                           ; 2 bytes @ 0x1
  2538                           
  2539  0021                     ___lmul@multiplier:	
  2540                           ; 2 bytes @ 0x1
  2541                           
  2542  0021                     ___lldiv@divisor:	
  2543                           ; 4 bytes @ 0x1
  2544                           
  2545                           
  2546                           ; 4 bytes @ 0x1
  2547  0021                     	ds	1
  2548  0022                     ??_nrf24l01Send:	
  2549                           
  2550                           ; 1 bytes @ 0x2
  2551  0022                     	ds	1
  2552  0023                     ??_strcpy:	
  2553  0023                     ??_flashReadByte:	
  2554                           ; 1 bytes @ 0x3
  2555                           
  2556  0023                     nrf24l01Send@command:	
  2557                           ; 1 bytes @ 0x3
  2558                           
  2559  0023                     ___lwdiv@dividend:	
  2560                           ; 1 bytes @ 0x3
  2561                           
  2562  0023                     ___lwmod@dividend:	
  2563                           ; 2 bytes @ 0x3
  2564                           
  2565                           
  2566                           ; 2 bytes @ 0x3
  2567  0023                     	ds	1
  2568  0024                     ??_nrf24l01SetRXMode:	
  2569  0024                     ??_nrf24l01InitRegisters:	
  2570                           ; 1 bytes @ 0x4
  2571                           
  2572  0024                     strcpy@cp:	
  2573                           ; 1 bytes @ 0x4
  2574                           
  2575                           
  2576                           ; 1 bytes @ 0x4
  2577  0024                     	ds	1
  2578  0025                     ??___lwdiv:	
  2579  0025                     ??___lwmod:	
  2580                           ; 1 bytes @ 0x5
  2581                           
  2582  0025                     nrf24l01SetRXMode@config:	
  2583                           ; 1 bytes @ 0x5
  2584                           
  2585  0025                     nrf24l01InitRegisters@setupAW:	
  2586                           ; 1 bytes @ 0x5
  2587                           
  2588  0025                     strcpy@to:	
  2589                           ; 1 bytes @ 0x5
  2590                           
  2591  0025                     ___lmul@multiplicand:	
  2592                           ; 1 bytes @ 0x5
  2593                           
  2594  0025                     ___lldiv@dividend:	
  2595                           ; 4 bytes @ 0x5
  2596                           
  2597                           
  2598                           ; 4 bytes @ 0x5
  2599  0025                     	ds	1
  2600  0026                     nrf24l01SetRXMode@rxMode:	
  2601  0026                     nrf24l01InitRegisters@rfSetup:	
  2602                           ; 1 bytes @ 0x6
  2603                           
  2604  0026                     ___lwmod@counter:	
  2605                           ; 1 bytes @ 0x6
  2606                           
  2607  0026                     flashReadByte@result:	
  2608                           ; 1 bytes @ 0x6
  2609                           
  2610  0026                     ___lwdiv@quotient:	
  2611                           ; 2 bytes @ 0x6
  2612                           
  2613                           
  2614                           ; 2 bytes @ 0x6
  2615  0026                     	ds	1
  2616  0027                     ??_nrf24l01SendString:	
  2617  0027                     nrf24l01InitRegisters@feature:	
  2618                           ; 1 bytes @ 0x7
  2619                           
  2620                           
  2621                           ; 1 bytes @ 0x7
  2622  0027                     	ds	1
  2623  0028                     nrf24l01SendString@i:	
  2624  0028                     nrf24l01InitRegisters@status:	
  2625                           ; 1 bytes @ 0x8
  2626                           
  2627  0028                     ___lwdiv@counter:	
  2628                           ; 1 bytes @ 0x8
  2629                           
  2630  0028                     flashReadByte@address:	
  2631                           ; 1 bytes @ 0x8
  2632                           
  2633                           
  2634                           ; 2 bytes @ 0x8
  2635  0028                     	ds	1
  2636  0029                     ??___lmul:	
  2637  0029                     ??___lldiv:	
  2638                           ; 1 bytes @ 0x9
  2639                           
  2640  0029                     nrf24l01InitRegisters@enRXAddr:	
  2641                           ; 1 bytes @ 0x9
  2642                           
  2643  0029                     ___lmul@product:	
  2644                           ; 1 bytes @ 0x9
  2645                           
  2646                           
  2647                           ; 4 bytes @ 0x9
  2648  0029                     	ds	1
  2649  002A                     ??_flashRealod:	
  2650  002A                     nrf24l01InitRegisters@enAA:	
  2651                           ; 1 bytes @ 0xA
  2652                           
  2653  002A                     ___lldiv@quotient:	
  2654                           ; 1 bytes @ 0xA
  2655                           
  2656                           
  2657                           ; 4 bytes @ 0xA
  2658  002A                     	ds	1
  2659  002B                     nrf24l01InitRegisters@DynPD:	
  2660  002B                     flashRealod@i:	
  2661                           ; 1 bytes @ 0xB
  2662                           
  2663                           
  2664                           ; 2 bytes @ 0xB
  2665  002B                     	ds	1
  2666  002C                     nrf24l01InitRegisters@config:	
  2667                           
  2668                           ; 1 bytes @ 0xC
  2669  002C                     	ds	1
  2670  002D                     ??_nrf24l01Init:	
  2671                           
  2672                           ; 1 bytes @ 0xD
  2673  002D                     	ds	1
  2674  002E                     ___lldiv@counter:	
  2675                           
  2676                           ; 1 bytes @ 0xE
  2677  002E                     	ds	1
  2678  002F                     ?_getADCValue:	
  2679  002F                     nrf24l01Init@isReciever:	
  2680                           ; 4 bytes @ 0xF
  2681                           
  2682  002F                     getADCValue@divider:	
  2683                           ; 1 bytes @ 0xF
  2684                           
  2685                           
  2686                           ; 4 bytes @ 0xF
  2687  002F                     	ds	4
  2688  0033                     ??_getADCValue:	
  2689                           
  2690                           ; 1 bytes @ 0x13
  2691  0033                     	ds	4
  2692  0037                     getADCValue@channel:	
  2693                           
  2694                           ; 1 bytes @ 0x17
  2695  0037                     	ds	1
  2696  0038                     getADCValue@adcLoop:	
  2697                           
  2698                           ; 1 bytes @ 0x18
  2699  0038                     	ds	1
  2700  0039                     getADCValue@adcSum:	
  2701                           
  2702                           ; 4 bytes @ 0x19
  2703  0039                     	ds	4
  2704  003D                     ?_utoa:	
  2705  003D                     utoa@val:	
  2706                           ; 1 bytes @ 0x1D
  2707                           
  2708                           
  2709                           ; 2 bytes @ 0x1D
  2710  003D                     	ds	2
  2711  003F                     utoa@base:	
  2712                           
  2713                           ; 2 bytes @ 0x1F
  2714  003F                     	ds	2
  2715  0041                     ??_utoa:	
  2716                           
  2717                           ; 1 bytes @ 0x21
  2718  0041                     	ds	1
  2719  0042                     utoa@v:	
  2720                           
  2721                           ; 2 bytes @ 0x22
  2722  0042                     	ds	2
  2723  0044                     utoa@c:	
  2724                           
  2725                           ; 1 bytes @ 0x24
  2726  0044                     	ds	1
  2727  0045                     utoa@buf:	
  2728                           
  2729                           ; 1 bytes @ 0x25
  2730  0045                     	ds	1
  2731  0046                     ??_loop:	
  2732  0046                     ??_main:	
  2733                           ; 1 bytes @ 0x26
  2734                           
  2735                           
  2736                           ; 1 bytes @ 0x26
  2737  0046                     	ds	1
  2738                           
  2739                           	psect	maintext
  2740  02E8                     __pmaintext:	
  2741 ;;
  2742 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  2743 ;;
  2744 ;; *************** function _main *****************
  2745 ;; Defined at:
  2746 ;;		line 114 in file "main.c"
  2747 ;; Parameters:    Size  Location     Type
  2748 ;;		None
  2749 ;; Auto vars:     Size  Location     Type
  2750 ;;		None
  2751 ;; Return value:  Size  Location     Type
  2752 ;;                  1    wreg      void 
  2753 ;; Registers used:
  2754 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2755 ;; Tracked objects:
  2756 ;;		On entry : B1F/0
  2757 ;;		On exit  : 0/0
  2758 ;;		Unchanged: 0/0
  2759 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2760 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2761 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2762 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2763 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2764 ;;Total ram usage:        1 bytes
  2765 ;; Hardware stack levels required when called:   10
  2766 ;; This function calls:
  2767 ;;		_flashRealod
  2768 ;;		_loop
  2769 ;;		_nrf24l01Init
  2770 ;;		_nrf24l01SendString
  2771 ;;		_sleep
  2772 ;;		_strcpy
  2773 ;;		_utoa
  2774 ;; This function is called by:
  2775 ;;		Startup code after reset
  2776 ;; This function uses a non-reentrant model
  2777 ;;
  2778                           
  2779                           
  2780                           ;psect for function _main
  2781  02E8                     _main:	
  2782                           
  2783                           ;main.c: 117: ANSELA = 0x00;
  2784                           
  2785                           ;incstack = 0
  2786                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  2787  02E8  0023               	movlb	3	; select bank3
  2788  02E9  018C               	clrf	12	;volatile
  2789                           
  2790                           ;main.c: 118: ANSELC = 0x00;
  2791  02EA  018E               	clrf	14	;volatile
  2792                           
  2793                           ;main.c: 124: INTCONbits.PEIE = 0;
  2794  02EB  130B               	bcf	11,6	;volatile
  2795                           
  2796                           ;main.c: 125: INTCONbits.GIE = 0;
  2797  02EC  138B               	bcf	11,7	;volatile
  2798                           
  2799                           ;main.c: 127: OSCCON1bits.NOSC = 0b000;
  2800  02ED  308F               	movlw	-113
  2801  02EE  0032               	movlb	18	; select bank18
  2802  02EF  0599               	andwf	25,f	;volatile
  2803                           
  2804                           ;main.c: 128: OSCCON2bits.COSC = 0b000;
  2805  02F0  308F               	movlw	-113
  2806  02F1  059A               	andwf	26,f	;volatile
  2807                           
  2808                           ;main.c: 130: OSCCON1bits.NDIV = 0b000;
  2809  02F2  30F0               	movlw	-16
  2810  02F3  0599               	andwf	25,f	;volatile
  2811                           
  2812                           ;main.c: 131: OSCCON2bits.CDIV = 0b000;
  2813  02F4  30F0               	movlw	-16
  2814  02F5  059A               	andwf	26,f	;volatile
  2815                           
  2816                           ;main.c: 133: _delay((unsigned long)((10)*(16000000/4000.0)));
  2817  02F6  3034               	movlw	52
  2818  02F7  0020               	movlb	0	; select bank0
  2819  02F8  00C6               	movwf	??_main
  2820  02F9  30F1               	movlw	241
  2821  02FA                     u1677:	
  2822  02FA  0B89               	decfsz	9,f
  2823  02FB  2AFA               	goto	u1677
  2824  02FC  0BC6               	decfsz	??_main,f
  2825  02FD  2AFA               	goto	u1677
  2826  02FE  3200               	nop2
  2827                           
  2828                           ;main.c: 135: flashRealod();
  2829  02FF  3186  260D  3182   	fcall	_flashRealod
  2830                           
  2831                           ;main.c: 137: strcpy(nrf24l01TXName, romData.name);
  2832  0302  30A1               	movlw	low (_romData+1)
  2833  0303  0020               	movlb	0	; select bank0
  2834  0304  00A1               	movwf	strcpy@from
  2835  0305  3000               	movlw	high (_romData+1)
  2836  0306  00A2               	movwf	strcpy@from+1
  2837  0307  30C3               	movlw	(low (_nrf24l01TXName| 0))& (0+255)
  2838  0308  3186  262D  3182   	fcall	_strcpy
  2839                           
  2840                           ;main.c: 139: nrf24l01Init(0);
  2841  030B  3000               	movlw	0
  2842  030C  3185  25A3  3182   	fcall	_nrf24l01Init
  2843                           
  2844                           ;main.c: 145: FVRCONbits.FVREN = 0;
  2845  030F  0022               	movlb	2	; select bank2
  2846  0310  1397               	bcf	23,7	;volatile
  2847                           
  2848                           ;main.c: 146: FVRCONbits.ADFVR = 1;
  2849  0311  0817               	movf	23,w	;volatile
  2850  0312  39FC               	andlw	-4
  2851  0313  3801               	iorlw	1
  2852  0314  0097               	movwf	23	;volatile
  2853                           
  2854                           ;main.c: 147: FVRCONbits.FVREN = 1;
  2855  0315  1797               	bsf	23,7	;volatile
  2856                           
  2857                           ;main.c: 150: FVRCONbits.TSEN = 0;
  2858  0316  1297               	bcf	23,5	;volatile
  2859                           
  2860                           ;main.c: 151: FVRCONbits.TSRNG = 0;
  2861  0317  1217               	bcf	23,4	;volatile
  2862                           
  2863                           ;main.c: 152: FVRCONbits.TSEN = 1;
  2864  0318  1697               	bsf	23,5	;volatile
  2865                           
  2866                           ;main.c: 155: ADCON0bits.ADON = 0;
  2867  0319  0021               	movlb	1	; select bank1
  2868  031A  101D               	bcf	29,0	;volatile
  2869                           
  2870                           ;main.c: 157: ANSELAbits.ANSA4 = 1;
  2871  031B  0023               	movlb	3	; select bank3
  2872  031C  160C               	bsf	12,4	;volatile
  2873                           
  2874                           ;main.c: 158: TRISAbits.TRISA4 = 1;
  2875  031D  0021               	movlb	1	; select bank1
  2876  031E  160C               	bsf	12,4	;volatile
  2877                           
  2878                           ;main.c: 159: WPUAbits.WPUA4 = 0;
  2879  031F  0024               	movlb	4	; select bank4
  2880  0320  120C               	bcf	12,4	;volatile
  2881                           
  2882                           ;main.c: 161: ANSELCbits.ANSC3 = 1;
  2883  0321  0023               	movlb	3	; select bank3
  2884  0322  158E               	bsf	14,3	;volatile
  2885                           
  2886                           ;main.c: 162: TRISCbits.TRISC3 = 1;
  2887  0323  0021               	movlb	1	; select bank1
  2888  0324  158E               	bsf	14,3	;volatile
  2889                           
  2890                           ;main.c: 164: ADCON1bits.ADCS = 0b111;
  2891  0325  3070               	movlw	112
  2892  0326  049E               	iorwf	30,f	;volatile
  2893                           
  2894                           ;main.c: 165: ADCON1bits.ADFM = 1;
  2895  0327  179E               	bsf	30,7	;volatile
  2896                           
  2897                           ;main.c: 166: ADCON1bits.ADPREF = 0b00;
  2898  0328  30FC               	movlw	-4
  2899  0329  059E               	andwf	30,f	;volatile
  2900                           
  2901                           ;main.c: 168: ADCON0bits.CHS = 3;
  2902  032A  081D               	movf	29,w	;volatile
  2903  032B  3903               	andlw	-253
  2904  032C  380C               	iorlw	12
  2905  032D  009D               	movwf	29	;volatile
  2906                           
  2907                           ;main.c: 169: ADCON0bits.ADON = 1;
  2908  032E  141D               	bsf	29,0	;volatile
  2909                           
  2910                           ;main.c: 173: TRISAbits.TRISA2 = 1;
  2911  032F  150C               	bsf	12,2	;volatile
  2912                           
  2913                           ;main.c: 174: PIE0bits.INTE = 1;
  2914  0330  1410               	bsf	16,0	;volatile
  2915                           
  2916                           ;main.c: 175: INTCONbits.INTEDG = 0;
  2917  0331  100B               	bcf	11,0	;volatile
  2918                           
  2919                           ;main.c: 179: WDTCONbits.WDTPS = 11;
  2920  0332  0817               	movf	23,w	;volatile
  2921  0333  39C1               	andlw	-63
  2922  0334  3816               	iorlw	22
  2923  0335  0097               	movwf	23	;volatile
  2924                           
  2925                           ;main.c: 182: TRISAbits.TRISA5 = 0;
  2926  0336  128C               	bcf	12,5	;volatile
  2927                           
  2928                           ;main.c: 183: PORTAbits.RA5 = 0;
  2929  0337  0020               	movlb	0	; select bank0
  2930  0338  128C               	bcf	12,5	;volatile
  2931                           
  2932                           ;main.c: 186: INTCONbits.PEIE = 1;
  2933  0339  170B               	bsf	11,6	;volatile
  2934                           
  2935                           ;main.c: 187: INTCONbits.GIE = 1;
  2936  033A  178B               	bsf	11,7	;volatile
  2937                           
  2938                           ;main.c: 189: strcpy(nrf24l01TXTopic, "BOOT");
  2939  033B  30DC               	movlw	low (STR_6| (0+32768))
  2940  033C  00A1               	movwf	strcpy@from
  2941  033D  3086               	movlw	high (STR_6| (0+32768))
  2942  033E  00A2               	movwf	strcpy@from+1
  2943  033F  3065               	movlw	(low (_nrf24l01TXTopic| 0))& (0+255)
  2944  0340  3186  262D  3182   	fcall	_strcpy
  2945                           
  2946                           ;main.c: 191: utoa(nrf24l01TXValue, romData.bootMode, 10);
  2947  0343  0021               	movlb	1	; select bank1
  2948  0344  0832               	movf	((_romData+1)^(0+128)+17),w
  2949  0345  0020               	movlb	0	; select bank0
  2950  0346  00BE               	movwf	utoa@val+1
  2951  0347  0021               	movlb	1	; select bank1
  2952  0348  0831               	movf	(_romData^(0+128)+17),w
  2953  0349  0020               	movlb	0	; select bank0
  2954  034A  00BD               	movwf	utoa@val
  2955  034B  300A               	movlw	10
  2956  034C  00BF               	movwf	utoa@base
  2957  034D  3000               	movlw	0
  2958  034E  00C0               	movwf	utoa@base+1
  2959  034F  305D               	movlw	(low (_nrf24l01TXValue| 0))& (0+255)
  2960  0350  3183  2360  3182   	fcall	_utoa
  2961                           
  2962                           ;main.c: 193: nrf24l01TXPacketData.byte = 0x00;
  2963  0353  0020               	movlb	0	; select bank0
  2964  0354  01CC               	clrf	_nrf24l01TXPacketData
  2965                           
  2966                           ;main.c: 194: nrf24l01TXPacketData.ACKRequest = 0;
  2967  0355  104C               	bcf	_nrf24l01TXPacketData,0
  2968                           
  2969                           ;main.c: 195: nrf24l01SendString();
  2970  0356  3180  20FF  3182   	fcall	_nrf24l01SendString
  2971                           
  2972                           ;main.c: 196: sleep();
  2973  0359  3186  269C  3182   	fcall	_sleep
  2974  035C                     l2811:	
  2975                           ;main.c: 198: while(1){
  2976                           
  2977                           
  2978                           ;main.c: 199: loop();
  2979  035C  3180  202C  3182   	fcall	_loop
  2980  035F  2B5C               	goto	l2811
  2981  0360                     __end_of_main:	
  2982                           ;main.c: 200: };main.c: 202: return;
  2983                           
  2984                           
  2985                           	psect	text1
  2986  05A3                     __ptext1:	
  2987 ;; *************** function _nrf24l01Init *****************
  2988 ;; Defined at:
  2989 ;;		line 448 in file "nrf24l01.c"
  2990 ;; Parameters:    Size  Location     Type
  2991 ;;  isReciever      1    wreg     unsigned char 
  2992 ;; Auto vars:     Size  Location     Type
  2993 ;;  isReciever      1   15[BANK0 ] unsigned char 
  2994 ;; Return value:  Size  Location     Type
  2995 ;;                  1    wreg      void 
  2996 ;; Registers used:
  2997 ;;		wreg, status,2, status,0, pclath, cstack
  2998 ;; Tracked objects:
  2999 ;;		On entry : 0/0
  3000 ;;		On exit  : 0/0
  3001 ;;		Unchanged: 0/0
  3002 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3003 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3004 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3005 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3006 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3007 ;;Total ram usage:        3 bytes
  3008 ;; Hardware stack levels used:    1
  3009 ;; Hardware stack levels required when called:    8
  3010 ;; This function calls:
  3011 ;;		_nrf24l01InitRegisters
  3012 ;;		_nrf24l01InterfaceInit
  3013 ;; This function is called by:
  3014 ;;		_main
  3015 ;; This function uses a non-reentrant model
  3016 ;;
  3017                           
  3018                           
  3019                           ;psect for function _nrf24l01Init
  3020  05A3                     _nrf24l01Init:	
  3021                           
  3022                           ;incstack = 0
  3023                           ; Regs used in _nrf24l01Init: [wreg+status,2+status,0+pclath+cstack]
  3024                           ;nrf24l01Init@isReciever stored from wreg
  3025  05A3  0020               	movlb	0	; select bank0
  3026  05A4  00AF               	movwf	nrf24l01Init@isReciever
  3027                           
  3028                           ;nrf24l01.c: 451: nrf24l01InterfaceInit();
  3029  05A5  3186  2676  3185   	fcall	_nrf24l01InterfaceInit
  3030                           
  3031                           ;nrf24l01.c: 455: PORTAbits.RA0 = 0;
  3032  05A8  0020               	movlb	0	; select bank0
  3033  05A9  100C               	bcf	12,0	;volatile
  3034                           
  3035                           ;nrf24l01.c: 457: _delay((unsigned long)((50000)*(16000000/4000000.0)));
  3036  05AA  3002               	movlw	2
  3037  05AB  0020               	movlb	0	; select bank0
  3038  05AC  00AE               	movwf	??_nrf24l01Init+1
  3039  05AD  3004               	movlw	4
  3040  05AE  00AD               	movwf	??_nrf24l01Init
  3041  05AF  30BA               	movlw	186
  3042  05B0                     u1687:	
  3043  05B0  0B89               	decfsz	9,f
  3044  05B1  2DB0               	goto	u1687
  3045  05B2  0BAD               	decfsz	??_nrf24l01Init,f
  3046  05B3  2DB0               	goto	u1687
  3047  05B4  0BAE               	decfsz	??_nrf24l01Init+1,f
  3048  05B5  2DB0               	goto	u1687
  3049  05B6  0000               	nop
  3050                           
  3051                           ;nrf24l01.c: 459: nrf24l01InitRegisters(isReciever);
  3052  05B7  0020               	movlb	0	; select bank0
  3053  05B8  082F               	movf	nrf24l01Init@isReciever,w
  3054  05B9  3181  21BB  3185   	fcall	_nrf24l01InitRegisters
  3055                           
  3056                           ;nrf24l01.c: 461: _delay((unsigned long)((50000)*(16000000/4000000.0)));
  3057  05BC  3002               	movlw	2
  3058  05BD  0020               	movlb	0	; select bank0
  3059  05BE  00AE               	movwf	??_nrf24l01Init+1
  3060  05BF  3004               	movlw	4
  3061  05C0  00AD               	movwf	??_nrf24l01Init
  3062  05C1  30BA               	movlw	186
  3063  05C2                     u1697:	
  3064  05C2  0B89               	decfsz	9,f
  3065  05C3  2DC2               	goto	u1697
  3066  05C4  0BAD               	decfsz	??_nrf24l01Init,f
  3067  05C5  2DC2               	goto	u1697
  3068  05C6  0BAE               	decfsz	??_nrf24l01Init+1,f
  3069  05C7  2DC2               	goto	u1697
  3070  05C8  0000               	nop
  3071                           
  3072                           ;nrf24l01.c: 463: PORTAbits.RA0 = 1;
  3073  05C9  0020               	movlb	0	; select bank0
  3074  05CA  140C               	bsf	12,0	;volatile
  3075  05CB  0008               	return
  3076  05CC                     __end_of_nrf24l01Init:	
  3077                           
  3078                           	psect	text2
  3079  0676                     __ptext2:	
  3080 ;; *************** function _nrf24l01InterfaceInit *****************
  3081 ;; Defined at:
  3082 ;;		line 8 in file "interface.c"
  3083 ;; Parameters:    Size  Location     Type
  3084 ;;		None
  3085 ;; Auto vars:     Size  Location     Type
  3086 ;;		None
  3087 ;; Return value:  Size  Location     Type
  3088 ;;                  1    wreg      void 
  3089 ;; Registers used:
  3090 ;;		wreg, status,2, status,0
  3091 ;; Tracked objects:
  3092 ;;		On entry : 0/0
  3093 ;;		On exit  : 0/0
  3094 ;;		Unchanged: 0/0
  3095 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3096 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3097 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3098 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3099 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3100 ;;Total ram usage:        0 bytes
  3101 ;; Hardware stack levels used:    1
  3102 ;; Hardware stack levels required when called:    5
  3103 ;; This function calls:
  3104 ;;		Nothing
  3105 ;; This function is called by:
  3106 ;;		_nrf24l01Init
  3107 ;; This function uses a non-reentrant model
  3108 ;;
  3109                           
  3110                           
  3111                           ;psect for function _nrf24l01InterfaceInit
  3112  0676                     _nrf24l01InterfaceInit:	
  3113                           
  3114                           ;interface.c: 10: TRISAbits.TRISA0 = 0;
  3115                           
  3116                           ;incstack = 0
  3117                           ; Regs used in _nrf24l01InterfaceInit: [wreg+status,2+status,0]
  3118  0676  0021               	movlb	1	; select bank1
  3119  0677  100C               	bcf	12,0	;volatile
  3120                           
  3121                           ;interface.c: 11: TRISAbits.TRISA1 = 0;
  3122  0678  108C               	bcf	12,1	;volatile
  3123                           
  3124                           ;interface.c: 13: TRISCbits.TRISC1 = 1;
  3125  0679  148E               	bsf	14,1	;volatile
  3126                           
  3127                           ;interface.c: 14: TRISCbits.TRISC2 = 0;
  3128  067A  110E               	bcf	14,2	;volatile
  3129                           
  3130                           ;interface.c: 15: TRISCbits.TRISC0 = 0;
  3131  067B  100E               	bcf	14,0	;volatile
  3132                           
  3133                           ;interface.c: 17: SSPCON1bits.SSPEN = 0;
  3134  067C  0024               	movlb	4	; select bank4
  3135  067D  1295               	bcf	21,5	;volatile
  3136                           
  3137                           ;interface.c: 18: SSPCON1bits.CKP = 0;
  3138  067E  1215               	bcf	21,4	;volatile
  3139                           
  3140                           ;interface.c: 19: SSP1STATbits.CKE = 1;
  3141  067F  1714               	bsf	20,6	;volatile
  3142                           
  3143                           ;interface.c: 20: SSPCON1bits.SSPM = 0b0000;
  3144  0680  30F0               	movlw	-16
  3145  0681  0595               	andwf	21,f	;volatile
  3146                           
  3147                           ;interface.c: 22: SSPCON1bits.SSPEN = 1;
  3148  0682  1695               	bsf	21,5	;volatile
  3149  0683  0008               	return
  3150  0684                     __end_of_nrf24l01InterfaceInit:	
  3151                           
  3152                           	psect	text3
  3153  01BB                     __ptext3:	
  3154 ;; *************** function _nrf24l01InitRegisters *****************
  3155 ;; Defined at:
  3156 ;;		line 363 in file "nrf24l01.c"
  3157 ;; Parameters:    Size  Location     Type
  3158 ;;  isReciever      1    wreg     unsigned char 
  3159 ;; Auto vars:     Size  Location     Type
  3160 ;;  isReciever      1    0[COMMON] unsigned char 
  3161 ;;  config          1   12[BANK0 ] struct .
  3162 ;;  DynPD           1   11[BANK0 ] struct .
  3163 ;;  enAA            1   10[BANK0 ] struct .
  3164 ;;  enRXAddr        1    9[BANK0 ] struct .
  3165 ;;  status          1    8[BANK0 ] struct .
  3166 ;;  feature         1    7[BANK0 ] struct .
  3167 ;;  rfSetup         1    6[BANK0 ] struct .
  3168 ;;  setupAW         1    5[BANK0 ] struct .
  3169 ;; Return value:  Size  Location     Type
  3170 ;;                  1    wreg      void 
  3171 ;; Registers used:
  3172 ;;		wreg, status,2, status,0, pclath, cstack
  3173 ;; Tracked objects:
  3174 ;;		On entry : 0/0
  3175 ;;		On exit  : 0/0
  3176 ;;		Unchanged: 0/0
  3177 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3178 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3179 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3180 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3181 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3182 ;;Total ram usage:        9 bytes
  3183 ;; Hardware stack levels used:    1
  3184 ;; Hardware stack levels required when called:    7
  3185 ;; This function calls:
  3186 ;;		_nrf24l01Send
  3187 ;; This function is called by:
  3188 ;;		_nrf24l01Init
  3189 ;; This function uses a non-reentrant model
  3190 ;;
  3191                           
  3192                           
  3193                           ;psect for function _nrf24l01InitRegisters
  3194  01BB                     _nrf24l01InitRegisters:	
  3195                           
  3196                           ;nrf24l01.c: 365: n_CONFIG_t config;;nrf24l01.c: 367: config.PWR_UP = 0;
  3197                           
  3198                           ;incstack = 0
  3199                           ; Regs used in _nrf24l01InitRegisters: [wreg+status,2+status,0+pclath+cstack]
  3200  01BB  0020               	movlb	0	; select bank0
  3201  01BC  10AC               	bcf	nrf24l01InitRegisters@config,1
  3202                           
  3203                           ;nrf24l01.c: 368: nrf24l01Send(0b00100000 | 0x00, config.byte);
  3204  01BD  082C               	movf	nrf24l01InitRegisters@config,w
  3205  01BE  00A4               	movwf	??_nrf24l01InitRegisters
  3206  01BF  0824               	movf	??_nrf24l01InitRegisters,w
  3207  01C0  00A1               	movwf	nrf24l01Send@data
  3208  01C1  3020               	movlw	32
  3209  01C2  3185  25ED  3181   	fcall	_nrf24l01Send
  3210                           
  3211                           ;nrf24l01.c: 370: _delay((unsigned long)((10000)*(16000000/4000000.0)));
  3212  01C5  3034               	movlw	52
  3213  01C6  0020               	movlb	0	; select bank0
  3214  01C7  00A4               	movwf	??_nrf24l01InitRegisters
  3215  01C8  30F1               	movlw	241
  3216  01C9                     u1707:	
  3217  01C9  0B89               	decfsz	9,f
  3218  01CA  29C9               	goto	u1707
  3219  01CB  0BA4               	decfsz	??_nrf24l01InitRegisters,f
  3220  01CC  29C9               	goto	u1707
  3221  01CD  3200               	nop2
  3222                           
  3223                           ;nrf24l01.c: 372: n_SETUP_AW_t setupAW;;nrf24l01.c: 373: setupAW.byte = 0x00;
  3224  01CE  0020               	movlb	0	; select bank0
  3225  01CF  01A5               	clrf	nrf24l01InitRegisters@setupAW
  3226                           
  3227                           ;nrf24l01.c: 374: setupAW.AW = 0b11;
  3228  01D0  3003               	movlw	3
  3229  01D1  04A5               	iorwf	nrf24l01InitRegisters@setupAW,f
  3230                           
  3231                           ;nrf24l01.c: 375: nrf24l01Send(0b00100000 | 0x02, setupAW.byte);
  3232  01D2  0825               	movf	nrf24l01InitRegisters@setupAW,w
  3233  01D3  00A4               	movwf	??_nrf24l01InitRegisters
  3234  01D4  0824               	movf	??_nrf24l01InitRegisters,w
  3235  01D5  00A1               	movwf	nrf24l01Send@data
  3236  01D6  3022               	movlw	34
  3237  01D7  3185  25ED  3181   	fcall	_nrf24l01Send
  3238                           
  3239                           ;nrf24l01.c: 383: n_RF_SETUP_t rfSetup;;nrf24l01.c: 384: rfSetup.RF_DR_LOW = 0;
  3240  01DA  0020               	movlb	0	; select bank0
  3241  01DB  12A6               	bcf	nrf24l01InitRegisters@rfSetup,5
  3242                           
  3243                           ;nrf24l01.c: 385: rfSetup.RF_DR_HIGH = 1;
  3244  01DC  15A6               	bsf	nrf24l01InitRegisters@rfSetup,3
  3245                           
  3246                           ;nrf24l01.c: 386: rfSetup.RF_PWR = 3;
  3247  01DD  3006               	movlw	6
  3248  01DE  04A6               	iorwf	nrf24l01InitRegisters@rfSetup,f
  3249                           
  3250                           ;nrf24l01.c: 387: nrf24l01Send(0b00100000 | 0x06, rfSetup.byte);
  3251  01DF  0826               	movf	nrf24l01InitRegisters@rfSetup,w
  3252  01E0  00A4               	movwf	??_nrf24l01InitRegisters
  3253  01E1  0824               	movf	??_nrf24l01InitRegisters,w
  3254  01E2  00A1               	movwf	nrf24l01Send@data
  3255  01E3  3026               	movlw	38
  3256  01E4  3185  25ED  3181   	fcall	_nrf24l01Send
  3257                           
  3258                           ;nrf24l01.c: 390: n_EN_RXADDR_t enRXAddr;;nrf24l01.c: 391: enRXAddr.ERX_P0 = 1;
  3259  01E7  0020               	movlb	0	; select bank0
  3260  01E8  1429               	bsf	nrf24l01InitRegisters@enRXAddr,0
  3261                           
  3262                           ;nrf24l01.c: 392: enRXAddr.ERX_P1 = 1;
  3263  01E9  14A9               	bsf	nrf24l01InitRegisters@enRXAddr,1
  3264                           
  3265                           ;nrf24l01.c: 393: enRXAddr.ERX_P2 = 1;
  3266  01EA  1529               	bsf	nrf24l01InitRegisters@enRXAddr,2
  3267                           
  3268                           ;nrf24l01.c: 394: enRXAddr.ERX_P3 = 1;
  3269  01EB  15A9               	bsf	nrf24l01InitRegisters@enRXAddr,3
  3270                           
  3271                           ;nrf24l01.c: 395: enRXAddr.ERX_P4 = 1;
  3272  01EC  1629               	bsf	nrf24l01InitRegisters@enRXAddr,4
  3273                           
  3274                           ;nrf24l01.c: 396: enRXAddr.ERX_P5 = 1;
  3275  01ED  16A9               	bsf	nrf24l01InitRegisters@enRXAddr,5
  3276                           
  3277                           ;nrf24l01.c: 397: nrf24l01Send(0b00100000 | 0x02, enRXAddr.byte);
  3278  01EE  0829               	movf	nrf24l01InitRegisters@enRXAddr,w
  3279  01EF  00A4               	movwf	??_nrf24l01InitRegisters
  3280  01F0  0824               	movf	??_nrf24l01InitRegisters,w
  3281  01F1  00A1               	movwf	nrf24l01Send@data
  3282  01F2  3022               	movlw	34
  3283  01F3  3185  25ED  3181   	fcall	_nrf24l01Send
  3284                           
  3285                           ;nrf24l01.c: 400: n_EN_AA_t enAA;;nrf24l01.c: 401: enAA.byte = nrf24l01Send(0b00000000 |
      +                           0x01, 0);
  3286  01F6  0020               	movlb	0	; select bank0
  3287  01F7  01A1               	clrf	nrf24l01Send@data
  3288  01F8  3001               	movlw	1
  3289  01F9  3185  25ED  3181   	fcall	_nrf24l01Send
  3290  01FC  0020               	movlb	0	; select bank0
  3291  01FD  00A4               	movwf	??_nrf24l01InitRegisters
  3292  01FE  0824               	movf	??_nrf24l01InitRegisters,w
  3293  01FF  00AA               	movwf	nrf24l01InitRegisters@enAA
  3294                           
  3295                           ;nrf24l01.c: 402: enAA.ENAA_P0 = 0;
  3296  0200  102A               	bcf	nrf24l01InitRegisters@enAA,0
  3297                           
  3298                           ;nrf24l01.c: 403: enAA.ENAA_P1 = 0;
  3299  0201  10AA               	bcf	nrf24l01InitRegisters@enAA,1
  3300                           
  3301                           ;nrf24l01.c: 404: enAA.ENAA_P2 = 0;
  3302  0202  112A               	bcf	nrf24l01InitRegisters@enAA,2
  3303                           
  3304                           ;nrf24l01.c: 405: enAA.ENAA_P3 = 0;
  3305  0203  11AA               	bcf	nrf24l01InitRegisters@enAA,3
  3306                           
  3307                           ;nrf24l01.c: 406: enAA.ENAA_P4 = 0;
  3308  0204  122A               	bcf	nrf24l01InitRegisters@enAA,4
  3309                           
  3310                           ;nrf24l01.c: 407: enAA.ENAA_P5 = 0;
  3311  0205  12AA               	bcf	nrf24l01InitRegisters@enAA,5
  3312                           
  3313                           ;nrf24l01.c: 408: nrf24l01Send(0b00100000 | 0x01, enAA.byte);
  3314  0206  082A               	movf	nrf24l01InitRegisters@enAA,w
  3315  0207  00A4               	movwf	??_nrf24l01InitRegisters
  3316  0208  0824               	movf	??_nrf24l01InitRegisters,w
  3317  0209  00A1               	movwf	nrf24l01Send@data
  3318  020A  3021               	movlw	33
  3319  020B  3185  25ED  3181   	fcall	_nrf24l01Send
  3320                           
  3321                           ;nrf24l01.c: 412: n_FEATURE_t feature;;nrf24l01.c: 413: feature.byte = nrf24l01Send(0b00
      +                          000000 | 0x1D, 0);
  3322  020E  0020               	movlb	0	; select bank0
  3323  020F  01A1               	clrf	nrf24l01Send@data
  3324  0210  301D               	movlw	29
  3325  0211  3185  25ED  3181   	fcall	_nrf24l01Send
  3326  0214  0020               	movlb	0	; select bank0
  3327  0215  00A4               	movwf	??_nrf24l01InitRegisters
  3328  0216  0824               	movf	??_nrf24l01InitRegisters,w
  3329  0217  00A7               	movwf	nrf24l01InitRegisters@feature
  3330                           
  3331                           ;nrf24l01.c: 414: feature.EN_DPL = 1;
  3332  0218  1527               	bsf	nrf24l01InitRegisters@feature,2
  3333                           
  3334                           ;nrf24l01.c: 415: feature.EN_DYN_ACK = 1;
  3335  0219  1427               	bsf	nrf24l01InitRegisters@feature,0
  3336                           
  3337                           ;nrf24l01.c: 416: nrf24l01Send(0b00100000 | 0x1D, feature.byte);
  3338  021A  0827               	movf	nrf24l01InitRegisters@feature,w
  3339  021B  00A4               	movwf	??_nrf24l01InitRegisters
  3340  021C  0824               	movf	??_nrf24l01InitRegisters,w
  3341  021D  00A1               	movwf	nrf24l01Send@data
  3342  021E  303D               	movlw	61
  3343  021F  3185  25ED  3181   	fcall	_nrf24l01Send
  3344                           
  3345                           ;nrf24l01.c: 418: n_DYNPD_t DynPD;;nrf24l01.c: 419: DynPD.byte = nrf24l01Send(0b00000000
      +                           | 0x1C, 0);
  3346  0222  0020               	movlb	0	; select bank0
  3347  0223  01A1               	clrf	nrf24l01Send@data
  3348  0224  301C               	movlw	28
  3349  0225  3185  25ED  3181   	fcall	_nrf24l01Send
  3350  0228  0020               	movlb	0	; select bank0
  3351  0229  00A4               	movwf	??_nrf24l01InitRegisters
  3352  022A  0824               	movf	??_nrf24l01InitRegisters,w
  3353  022B  00AB               	movwf	nrf24l01InitRegisters@DynPD
  3354                           
  3355                           ;nrf24l01.c: 420: DynPD.DPL_P0 = 1;
  3356  022C  142B               	bsf	nrf24l01InitRegisters@DynPD,0
  3357                           
  3358                           ;nrf24l01.c: 421: DynPD.DPL_P1 = 1;
  3359  022D  14AB               	bsf	nrf24l01InitRegisters@DynPD,1
  3360                           
  3361                           ;nrf24l01.c: 422: DynPD.DPL_P2 = 1;
  3362  022E  152B               	bsf	nrf24l01InitRegisters@DynPD,2
  3363                           
  3364                           ;nrf24l01.c: 423: DynPD.DPL_P3 = 1;
  3365  022F  15AB               	bsf	nrf24l01InitRegisters@DynPD,3
  3366                           
  3367                           ;nrf24l01.c: 424: DynPD.DPL_P4 = 1;
  3368  0230  162B               	bsf	nrf24l01InitRegisters@DynPD,4
  3369                           
  3370                           ;nrf24l01.c: 425: DynPD.DPL_P5 = 1;
  3371  0231  16AB               	bsf	nrf24l01InitRegisters@DynPD,5
  3372                           
  3373                           ;nrf24l01.c: 426: nrf24l01Send(0b00100000 | 0x1C, DynPD.byte);
  3374  0232  082B               	movf	nrf24l01InitRegisters@DynPD,w
  3375  0233  00A4               	movwf	??_nrf24l01InitRegisters
  3376  0234  0824               	movf	??_nrf24l01InitRegisters,w
  3377  0235  00A1               	movwf	nrf24l01Send@data
  3378  0236  303C               	movlw	60
  3379  0237  3185  25ED  3181   	fcall	_nrf24l01Send
  3380                           
  3381                           ;nrf24l01.c: 429: n_STATUS_t status;;nrf24l01.c: 430: status.byte = 0x00;
  3382  023A  0020               	movlb	0	; select bank0
  3383  023B  01A8               	clrf	nrf24l01InitRegisters@status
  3384                           
  3385                           ;nrf24l01.c: 431: status.RX_DR = 1;
  3386  023C  1728               	bsf	nrf24l01InitRegisters@status,6
  3387                           
  3388                           ;nrf24l01.c: 432: status.TX_DS = 1;
  3389  023D  16A8               	bsf	nrf24l01InitRegisters@status,5
  3390                           
  3391                           ;nrf24l01.c: 433: status.MAX_RT = 1;
  3392  023E  1628               	bsf	nrf24l01InitRegisters@status,4
  3393                           
  3394                           ;nrf24l01.c: 434: nrf24l01Send(0b00100000 | 0x07, status.byte);
  3395  023F  0828               	movf	nrf24l01InitRegisters@status,w
  3396  0240  00A4               	movwf	??_nrf24l01InitRegisters
  3397  0241  0824               	movf	??_nrf24l01InitRegisters,w
  3398  0242  00A1               	movwf	nrf24l01Send@data
  3399  0243  3027               	movlw	39
  3400  0244  3185  25ED  3181   	fcall	_nrf24l01Send
  3401                           
  3402                           ;nrf24l01.c: 437: nrf24l01Send(0b11100001, 0);
  3403  0247  0020               	movlb	0	; select bank0
  3404  0248  01A1               	clrf	nrf24l01Send@data
  3405  0249  30E1               	movlw	225
  3406  024A  3185  25ED  3181   	fcall	_nrf24l01Send
  3407                           
  3408                           ;nrf24l01.c: 438: nrf24l01Send(0b11100010, 0);
  3409  024D  0020               	movlb	0	; select bank0
  3410  024E  01A1               	clrf	nrf24l01Send@data
  3411  024F  30E2               	movlw	226
  3412  0250  3185  25ED  3181   	fcall	_nrf24l01Send
  3413                           
  3414                           ;nrf24l01.c: 441: config.PRIM_RX = 1;
  3415  0253  0020               	movlb	0	; select bank0
  3416  0254  142C               	bsf	nrf24l01InitRegisters@config,0
  3417                           
  3418                           ;nrf24l01.c: 442: config.EN_CRC = 1;
  3419  0255  15AC               	bsf	nrf24l01InitRegisters@config,3
  3420                           
  3421                           ;nrf24l01.c: 443: config.CRCO = 1;
  3422  0256  152C               	bsf	nrf24l01InitRegisters@config,2
  3423                           
  3424                           ;nrf24l01.c: 444: config.PWR_UP = 1;
  3425  0257  14AC               	bsf	nrf24l01InitRegisters@config,1
  3426                           
  3427                           ;nrf24l01.c: 445: nrf24l01Send(0b00100000 | 0x00, config.byte);
  3428  0258  082C               	movf	nrf24l01InitRegisters@config,w
  3429  0259  00A4               	movwf	??_nrf24l01InitRegisters
  3430  025A  0824               	movf	??_nrf24l01InitRegisters,w
  3431  025B  00A1               	movwf	nrf24l01Send@data
  3432  025C  3020               	movlw	32
  3433  025D  3185  25ED         	fcall	_nrf24l01Send
  3434  025F  0008               	return
  3435  0260                     __end_of_nrf24l01InitRegisters:	
  3436                           
  3437                           	psect	text4
  3438  002C                     __ptext4:	
  3439 ;; *************** function _loop *****************
  3440 ;; Defined at:
  3441 ;;		line 71 in file "main.c"
  3442 ;; Parameters:    Size  Location     Type
  3443 ;;		None
  3444 ;; Auto vars:     Size  Location     Type
  3445 ;;		None
  3446 ;; Return value:  Size  Location     Type
  3447 ;;                  1    wreg      void 
  3448 ;; Registers used:
  3449 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3450 ;; Tracked objects:
  3451 ;;		On entry : 0/0
  3452 ;;		On exit  : 0/0
  3453 ;;		Unchanged: 0/0
  3454 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3455 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3456 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3457 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3458 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3459 ;;Total ram usage:        0 bytes
  3460 ;; Hardware stack levels used:    1
  3461 ;; Hardware stack levels required when called:    9
  3462 ;; This function calls:
  3463 ;;		_getADCValue
  3464 ;;		_nrf24l01SendString
  3465 ;;		_sleep
  3466 ;;		_strcpy
  3467 ;;		_utoa
  3468 ;; This function is called by:
  3469 ;;		_main
  3470 ;; This function uses a non-reentrant model
  3471 ;;
  3472                           
  3473                           
  3474                           ;psect for function _loop
  3475  002C                     _loop:	
  3476                           
  3477                           ;main.c: 75: strcpy(nrf24l01TXTopic, "DBG");
  3478                           
  3479                           ;incstack = 0
  3480                           ; Regs used in _loop: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3481  002C  30E1               	movlw	low (STR_1| (0+32768))
  3482  002D  0020               	movlb	0	; select bank0
  3483  002E  00A1               	movwf	strcpy@from
  3484  002F  3086               	movlw	high (STR_1| (0+32768))
  3485  0030  00A2               	movwf	strcpy@from+1
  3486  0031  3065               	movlw	(low (_nrf24l01TXTopic| 0))& (0+255)
  3487  0032  3186  262D  3180   	fcall	_strcpy
  3488                           
  3489                           ;main.c: 76: utoa(nrf24l01TXValue, counter, 10);
  3490  0035  0020               	movlb	0	; select bank0
  3491  0036  0848               	movf	_counter+1,w
  3492  0037  00BE               	movwf	utoa@val+1
  3493  0038  0847               	movf	_counter,w
  3494  0039  00BD               	movwf	utoa@val
  3495  003A  300A               	movlw	10
  3496  003B  00BF               	movwf	utoa@base
  3497  003C  3000               	movlw	0
  3498  003D  00C0               	movwf	utoa@base+1
  3499  003E  305D               	movlw	(low (_nrf24l01TXValue| 0))& (0+255)
  3500  003F  3183  2360  3180   	fcall	_utoa
  3501                           
  3502                           ;main.c: 77: counter = 0;
  3503  0042  0020               	movlb	0	; select bank0
  3504  0043  01C7               	clrf	_counter
  3505  0044  01C8               	clrf	_counter+1
  3506                           
  3507                           ;main.c: 78: nrf24l01TXPacketData.byte = 0x00;
  3508  0045  01CC               	clrf	_nrf24l01TXPacketData
  3509                           
  3510                           ;main.c: 79: nrf24l01TXPacketData.ACKRequest = 0;
  3511  0046  104C               	bcf	_nrf24l01TXPacketData,0
  3512                           
  3513                           ;main.c: 80: nrf24l01SendString();
  3514  0047  3180  20FF  3180   	fcall	_nrf24l01SendString
  3515                           
  3516                           ;main.c: 81: sleep();
  3517  004A  3186  269C  3180   	fcall	_sleep
  3518                           
  3519                           ;main.c: 83: strcpy(nrf24l01TXTopic, "ADC3");
  3520  004D  30D2               	movlw	low (STR_2| (0+32768))
  3521  004E  0020               	movlb	0	; select bank0
  3522  004F  00A1               	movwf	strcpy@from
  3523  0050  3086               	movlw	high (STR_2| (0+32768))
  3524  0051  00A2               	movwf	strcpy@from+1
  3525  0052  3065               	movlw	(low (_nrf24l01TXTopic| 0))& (0+255)
  3526  0053  3186  262D  3180   	fcall	_strcpy
  3527                           
  3528                           ;main.c: 84: utoa(nrf24l01TXValue, getADCValue(3, 2505), 10);
  3529  0056  3000               	movlw	0
  3530  0057  0020               	movlb	0	; select bank0
  3531  0058  00B2               	movwf	getADCValue@divider+3
  3532  0059  3000               	movlw	0
  3533  005A  00B1               	movwf	getADCValue@divider+2
  3534  005B  3009               	movlw	9
  3535  005C  00B0               	movwf	getADCValue@divider+1
  3536  005D  30C9               	movlw	201
  3537  005E  00AF               	movwf	getADCValue@divider
  3538  005F  3003               	movlw	3
  3539  0060  3182  2260  3180   	fcall	_getADCValue
  3540  0063  0020               	movlb	0	; select bank0
  3541  0064  0830               	movf	?_getADCValue+1,w
  3542  0065  00BE               	movwf	utoa@val+1
  3543  0066  082F               	movf	?_getADCValue,w
  3544  0067  00BD               	movwf	utoa@val
  3545  0068  300A               	movlw	10
  3546  0069  00BF               	movwf	utoa@base
  3547  006A  3000               	movlw	0
  3548  006B  00C0               	movwf	utoa@base+1
  3549  006C  305D               	movlw	(low (_nrf24l01TXValue| 0))& (0+255)
  3550  006D  3183  2360  3180   	fcall	_utoa
  3551                           
  3552                           ;main.c: 85: nrf24l01TXPacketData.byte = 0x00;
  3553  0070  0020               	movlb	0	; select bank0
  3554  0071  01CC               	clrf	_nrf24l01TXPacketData
  3555                           
  3556                           ;main.c: 86: nrf24l01TXPacketData.ACKRequest = 0;
  3557  0072  104C               	bcf	_nrf24l01TXPacketData,0
  3558                           
  3559                           ;main.c: 87: nrf24l01SendString();
  3560  0073  3180  20FF  3180   	fcall	_nrf24l01SendString
  3561                           
  3562                           ;main.c: 88: sleep();
  3563  0076  3186  269C  3180   	fcall	_sleep
  3564                           
  3565                           ;main.c: 90: strcpy(nrf24l01TXTopic, "ADC7");
  3566  0079  30D7               	movlw	low (STR_3| (0+32768))
  3567  007A  0020               	movlb	0	; select bank0
  3568  007B  00A1               	movwf	strcpy@from
  3569  007C  3086               	movlw	high (STR_3| (0+32768))
  3570  007D  00A2               	movwf	strcpy@from+1
  3571  007E  3065               	movlw	(low (_nrf24l01TXTopic| 0))& (0+255)
  3572  007F  3186  262D  3180   	fcall	_strcpy
  3573                           
  3574                           ;main.c: 91: utoa(nrf24l01TXValue, getADCValue(7, 2500), 10);
  3575  0082  3000               	movlw	0
  3576  0083  0020               	movlb	0	; select bank0
  3577  0084  00B2               	movwf	getADCValue@divider+3
  3578  0085  3000               	movlw	0
  3579  0086  00B1               	movwf	getADCValue@divider+2
  3580  0087  3009               	movlw	9
  3581  0088  00B0               	movwf	getADCValue@divider+1
  3582  0089  30C4               	movlw	196
  3583  008A  00AF               	movwf	getADCValue@divider
  3584  008B  3007               	movlw	7
  3585  008C  3182  2260  3180   	fcall	_getADCValue
  3586  008F  0020               	movlb	0	; select bank0
  3587  0090  0830               	movf	?_getADCValue+1,w
  3588  0091  00BE               	movwf	utoa@val+1
  3589  0092  082F               	movf	?_getADCValue,w
  3590  0093  00BD               	movwf	utoa@val
  3591  0094  300A               	movlw	10
  3592  0095  00BF               	movwf	utoa@base
  3593  0096  3000               	movlw	0
  3594  0097  00C0               	movwf	utoa@base+1
  3595  0098  305D               	movlw	(low (_nrf24l01TXValue| 0))& (0+255)
  3596  0099  3183  2360  3180   	fcall	_utoa
  3597                           
  3598                           ;main.c: 92: nrf24l01TXPacketData.byte = 0x00;
  3599  009C  0020               	movlb	0	; select bank0
  3600  009D  01CC               	clrf	_nrf24l01TXPacketData
  3601                           
  3602                           ;main.c: 93: nrf24l01TXPacketData.ACKRequest = 0;
  3603  009E  104C               	bcf	_nrf24l01TXPacketData,0
  3604                           
  3605                           ;main.c: 94: nrf24l01SendString();
  3606  009F  3180  20FF  3180   	fcall	_nrf24l01SendString
  3607                           
  3608                           ;main.c: 95: sleep();
  3609  00A2  3186  269C  3180   	fcall	_sleep
  3610                           
  3611                           ;main.c: 97: strcpy(nrf24l01TXTopic, "ADC29");
  3612  00A5  30C1               	movlw	low (STR_4| (0+32768))
  3613  00A6  0020               	movlb	0	; select bank0
  3614  00A7  00A1               	movwf	strcpy@from
  3615  00A8  3086               	movlw	high (STR_4| (0+32768))
  3616  00A9  00A2               	movwf	strcpy@from+1
  3617  00AA  3065               	movlw	(low (_nrf24l01TXTopic| 0))& (0+255)
  3618  00AB  3186  262D  3180   	fcall	_strcpy
  3619                           
  3620                           ;main.c: 98: utoa(nrf24l01TXValue, getADCValue(29, 208900) - 40, 10);
  3621  00AE  3000               	movlw	0
  3622  00AF  0020               	movlb	0	; select bank0
  3623  00B0  00B2               	movwf	getADCValue@divider+3
  3624  00B1  3003               	movlw	3
  3625  00B2  00B1               	movwf	getADCValue@divider+2
  3626  00B3  3030               	movlw	48
  3627  00B4  00B0               	movwf	getADCValue@divider+1
  3628  00B5  3004               	movlw	4
  3629  00B6  00AF               	movwf	getADCValue@divider
  3630  00B7  301D               	movlw	29
  3631  00B8  3182  2260  3180   	fcall	_getADCValue
  3632  00BB  0020               	movlb	0	; select bank0
  3633  00BC  082F               	movf	?_getADCValue,w
  3634  00BD  3ED8               	addlw	216
  3635  00BE  00BD               	movwf	utoa@val
  3636  00BF  30FF               	movlw	255
  3637  00C0  3D30               	addwfc	?_getADCValue+1,w
  3638  00C1  00BE               	movwf	utoa@val+1
  3639  00C2  300A               	movlw	10
  3640  00C3  00BF               	movwf	utoa@base
  3641  00C4  3000               	movlw	0
  3642  00C5  00C0               	movwf	utoa@base+1
  3643  00C6  305D               	movlw	(low (_nrf24l01TXValue| 0))& (0+255)
  3644  00C7  3183  2360  3180   	fcall	_utoa
  3645                           
  3646                           ;main.c: 99: nrf24l01TXPacketData.byte = 0x00;
  3647  00CA  0020               	movlb	0	; select bank0
  3648  00CB  01CC               	clrf	_nrf24l01TXPacketData
  3649                           
  3650                           ;main.c: 100: nrf24l01TXPacketData.ACKRequest = 0;
  3651  00CC  104C               	bcf	_nrf24l01TXPacketData,0
  3652                           
  3653                           ;main.c: 101: nrf24l01SendString();
  3654  00CD  3180  20FF  3180   	fcall	_nrf24l01SendString
  3655                           
  3656                           ;main.c: 102: sleep();
  3657  00D0  3186  269C  3180   	fcall	_sleep
  3658                           
  3659                           ;main.c: 104: strcpy(nrf24l01TXTopic, "ADC31");
  3660  00D3  30BB               	movlw	low (STR_5| (0+32768))
  3661  00D4  0020               	movlb	0	; select bank0
  3662  00D5  00A1               	movwf	strcpy@from
  3663  00D6  3086               	movlw	high (STR_5| (0+32768))
  3664  00D7  00A2               	movwf	strcpy@from+1
  3665  00D8  3065               	movlw	(low (_nrf24l01TXTopic| 0))& (0+255)
  3666  00D9  3186  262D  3180   	fcall	_strcpy
  3667                           
  3668                           ;main.c: 105: utoa(nrf24l01TXValue, getADCValue(31, 2475), 10);
  3669  00DC  3000               	movlw	0
  3670  00DD  0020               	movlb	0	; select bank0
  3671  00DE  00B2               	movwf	getADCValue@divider+3
  3672  00DF  3000               	movlw	0
  3673  00E0  00B1               	movwf	getADCValue@divider+2
  3674  00E1  3009               	movlw	9
  3675  00E2  00B0               	movwf	getADCValue@divider+1
  3676  00E3  30AB               	movlw	171
  3677  00E4  00AF               	movwf	getADCValue@divider
  3678  00E5  301F               	movlw	31
  3679  00E6  3182  2260  3180   	fcall	_getADCValue
  3680  00E9  0020               	movlb	0	; select bank0
  3681  00EA  0830               	movf	?_getADCValue+1,w
  3682  00EB  00BE               	movwf	utoa@val+1
  3683  00EC  082F               	movf	?_getADCValue,w
  3684  00ED  00BD               	movwf	utoa@val
  3685  00EE  300A               	movlw	10
  3686  00EF  00BF               	movwf	utoa@base
  3687  00F0  3000               	movlw	0
  3688  00F1  00C0               	movwf	utoa@base+1
  3689  00F2  305D               	movlw	(low (_nrf24l01TXValue| 0))& (0+255)
  3690  00F3  3183  2360  3180   	fcall	_utoa
  3691                           
  3692                           ;main.c: 106: nrf24l01TXPacketData.byte = 0x00;
  3693  00F6  0020               	movlb	0	; select bank0
  3694  00F7  01CC               	clrf	_nrf24l01TXPacketData
  3695                           
  3696                           ;main.c: 107: nrf24l01TXPacketData.ACKRequest = 0;
  3697  00F8  104C               	bcf	_nrf24l01TXPacketData,0
  3698                           
  3699                           ;main.c: 108: nrf24l01SendString();
  3700  00F9  3180  20FF  3180   	fcall	_nrf24l01SendString
  3701                           
  3702                           ;main.c: 109: sleep();
  3703  00FC  3186  269C         	fcall	_sleep
  3704  00FE  0008               	return
  3705  00FF                     __end_of_loop:	
  3706                           
  3707                           	psect	text5
  3708  0360                     __ptext5:	
  3709 ;; *************** function _utoa *****************
  3710 ;; Defined at:
  3711 ;;		line 17 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\itoa.c"
  3712 ;; Parameters:    Size  Location     Type
  3713 ;;  buf             1    wreg     PTR unsigned char 
  3714 ;;		 -> nrf24l01TXValue(8), 
  3715 ;;  val             2   29[BANK0 ] unsigned int 
  3716 ;;  base            2   31[BANK0 ] int 
  3717 ;; Auto vars:     Size  Location     Type
  3718 ;;  buf             1   37[BANK0 ] PTR unsigned char 
  3719 ;;		 -> nrf24l01TXValue(8), 
  3720 ;;  v               2   34[BANK0 ] unsigned int 
  3721 ;;  c               1   36[BANK0 ] unsigned char 
  3722 ;; Return value:  Size  Location     Type
  3723 ;;                  1    wreg      PTR unsigned char 
  3724 ;; Registers used:
  3725 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3726 ;; Tracked objects:
  3727 ;;		On entry : 0/0
  3728 ;;		On exit  : 0/0
  3729 ;;		Unchanged: 0/0
  3730 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3731 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3732 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3733 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3734 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3735 ;;Total ram usage:        9 bytes
  3736 ;; Hardware stack levels used:    1
  3737 ;; Hardware stack levels required when called:    6
  3738 ;; This function calls:
  3739 ;;		___lwdiv
  3740 ;;		___lwmod
  3741 ;; This function is called by:
  3742 ;;		_loop
  3743 ;;		_main
  3744 ;; This function uses a non-reentrant model
  3745 ;;
  3746                           
  3747                           
  3748                           ;psect for function _utoa
  3749  0360                     _utoa:	
  3750                           
  3751                           ;incstack = 0
  3752                           ; Regs used in _utoa: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3753                           ;utoa@buf stored from wreg
  3754  0360  0020               	movlb	0	; select bank0
  3755  0361  00C5               	movwf	utoa@buf
  3756  0362  083E               	movf	utoa@val+1,w
  3757  0363  00C3               	movwf	utoa@v+1
  3758  0364  083D               	movf	utoa@val,w
  3759  0365  00C2               	movwf	utoa@v
  3760  0366                     l2637:	
  3761  0366  0840               	movf	utoa@base+1,w
  3762  0367  00A2               	movwf	___lwdiv@divisor+1
  3763  0368  083F               	movf	utoa@base,w
  3764  0369  00A1               	movwf	___lwdiv@divisor
  3765  036A  0843               	movf	utoa@v+1,w
  3766  036B  00A4               	movwf	___lwdiv@dividend+1
  3767  036C  0842               	movf	utoa@v,w
  3768  036D  00A3               	movwf	___lwdiv@dividend
  3769  036E  3184  244C  3183   	fcall	___lwdiv
  3770  0371  0020               	movlb	0	; select bank0
  3771  0372  0822               	movf	?___lwdiv+1,w
  3772  0373  00C3               	movwf	utoa@v+1
  3773  0374  0821               	movf	?___lwdiv,w
  3774  0375  00C2               	movwf	utoa@v
  3775  0376  3001               	movlw	1
  3776  0377  00C1               	movwf	??_utoa
  3777  0378  0841               	movf	??_utoa,w
  3778  0379  07C5               	addwf	utoa@buf,f
  3779  037A  0842               	movf	utoa@v,w
  3780  037B  0443               	iorwf	utoa@v+1,w
  3781  037C  1D03               	btfss	3,2
  3782  037D  2B66               	goto	l2637
  3783  037E  0845               	movf	utoa@buf,w
  3784  037F  0086               	movwf	6
  3785  0380  0187               	clrf	7
  3786  0381  0181               	clrf	1
  3787  0382  3001               	movlw	1
  3788  0383  02C5               	subwf	utoa@buf,f
  3789  0384                     l2647:	
  3790  0384  0840               	movf	utoa@base+1,w
  3791  0385  00A2               	movwf	___lwmod@divisor+1
  3792  0386  083F               	movf	utoa@base,w
  3793  0387  00A1               	movwf	___lwmod@divisor
  3794  0388  083E               	movf	utoa@val+1,w
  3795  0389  00A4               	movwf	___lwmod@dividend+1
  3796  038A  083D               	movf	utoa@val,w
  3797  038B  00A3               	movwf	___lwmod@dividend
  3798  038C  3185  2576  3183   	fcall	___lwmod
  3799  038F  0020               	movlb	0	; select bank0
  3800  0390  0821               	movf	?___lwmod,w
  3801  0391  00C1               	movwf	??_utoa
  3802  0392  0841               	movf	??_utoa,w
  3803  0393  00C4               	movwf	utoa@c
  3804  0394  0840               	movf	utoa@base+1,w
  3805  0395  00A2               	movwf	___lwdiv@divisor+1
  3806  0396  083F               	movf	utoa@base,w
  3807  0397  00A1               	movwf	___lwdiv@divisor
  3808  0398  083E               	movf	utoa@val+1,w
  3809  0399  00A4               	movwf	___lwdiv@dividend+1
  3810  039A  083D               	movf	utoa@val,w
  3811  039B  00A3               	movwf	___lwdiv@dividend
  3812  039C  3184  244C  3183   	fcall	___lwdiv
  3813  039F  0020               	movlb	0	; select bank0
  3814  03A0  0822               	movf	?___lwdiv+1,w
  3815  03A1  00BE               	movwf	utoa@val+1
  3816  03A2  0821               	movf	?___lwdiv,w
  3817  03A3  00BD               	movwf	utoa@val
  3818  03A4  300A               	movlw	10
  3819  03A5  0244               	subwf	utoa@c,w
  3820  03A6  1C03               	skipc
  3821  03A7  2BAC               	goto	l851
  3822  03A8  3007               	movlw	7
  3823  03A9  00C1               	movwf	??_utoa
  3824  03AA  0841               	movf	??_utoa,w
  3825  03AB  07C4               	addwf	utoa@c,f
  3826  03AC                     l851:	
  3827  03AC  3030               	movlw	48
  3828  03AD  00C1               	movwf	??_utoa
  3829  03AE  0841               	movf	??_utoa,w
  3830  03AF  07C4               	addwf	utoa@c,f
  3831  03B0  0844               	movf	utoa@c,w
  3832  03B1  00C1               	movwf	??_utoa
  3833  03B2  0845               	movf	utoa@buf,w
  3834  03B3  0086               	movwf	6
  3835  03B4  0187               	clrf	7
  3836  03B5  0841               	movf	??_utoa,w
  3837  03B6  0081               	movwf	1
  3838  03B7  3001               	movlw	1
  3839  03B8  02C5               	subwf	utoa@buf,f
  3840  03B9  083D               	movf	utoa@val,w
  3841  03BA  043E               	iorwf	utoa@val+1,w
  3842  03BB  1D03               	btfss	3,2
  3843  03BC  2B84               	goto	l2647
  3844                           
  3845                           ;	Return value of _utoa is never used
  3846  03BD  3001               	movlw	1
  3847  03BE  00C1               	movwf	??_utoa
  3848  03BF  0841               	movf	??_utoa,w
  3849  03C0  07C5               	addwf	utoa@buf,f
  3850  03C1  0008               	return
  3851  03C2                     __end_of_utoa:	
  3852                           
  3853                           	psect	text6
  3854  0576                     __ptext6:	
  3855 ;; *************** function ___lwmod *****************
  3856 ;; Defined at:
  3857 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\lwmod.c"
  3858 ;; Parameters:    Size  Location     Type
  3859 ;;  divisor         2    1[BANK0 ] unsigned int 
  3860 ;;  dividend        2    3[BANK0 ] unsigned int 
  3861 ;; Auto vars:     Size  Location     Type
  3862 ;;  counter         1    6[BANK0 ] unsigned char 
  3863 ;; Return value:  Size  Location     Type
  3864 ;;                  2    1[BANK0 ] unsigned int 
  3865 ;; Registers used:
  3866 ;;		wreg, status,2, status,0
  3867 ;; Tracked objects:
  3868 ;;		On entry : 0/0
  3869 ;;		On exit  : 0/0
  3870 ;;		Unchanged: 0/0
  3871 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3872 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3873 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3874 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3875 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3876 ;;Total ram usage:        6 bytes
  3877 ;; Hardware stack levels used:    1
  3878 ;; Hardware stack levels required when called:    5
  3879 ;; This function calls:
  3880 ;;		Nothing
  3881 ;; This function is called by:
  3882 ;;		_utoa
  3883 ;; This function uses a non-reentrant model
  3884 ;;
  3885                           
  3886                           
  3887                           ;psect for function ___lwmod
  3888  0576                     ___lwmod:	
  3889                           
  3890                           ;incstack = 0
  3891                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  3892  0576  0020               	movlb	0	; select bank0
  3893  0577  0821               	movf	___lwmod@divisor,w
  3894  0578  0422               	iorwf	___lwmod@divisor+1,w
  3895  0579  1903               	btfsc	3,2
  3896  057A  2D9E               	goto	l1937
  3897  057B  01A6               	clrf	___lwmod@counter
  3898  057C  0AA6               	incf	___lwmod@counter,f
  3899  057D                     l1927:	
  3900  057D  1BA2               	btfsc	___lwmod@divisor+1,7
  3901  057E  2D89               	goto	l1929
  3902  057F  3001               	movlw	1
  3903  0580                     u965:	
  3904  0580  35A1               	lslf	___lwmod@divisor,f
  3905  0581  0DA2               	rlf	___lwmod@divisor+1,f
  3906  0582  0B89               	decfsz	9,f
  3907  0583  2D80               	goto	u965
  3908  0584  3001               	movlw	1
  3909  0585  00A5               	movwf	??___lwmod
  3910  0586  0825               	movf	??___lwmod,w
  3911  0587  07A6               	addwf	___lwmod@counter,f
  3912  0588  2D7D               	goto	l1927
  3913  0589                     l1929:	
  3914  0589  0822               	movf	___lwmod@divisor+1,w
  3915  058A  0224               	subwf	___lwmod@dividend+1,w
  3916  058B  1D03               	skipz
  3917  058C  2D8F               	goto	u985
  3918  058D  0821               	movf	___lwmod@divisor,w
  3919  058E  0223               	subwf	___lwmod@dividend,w
  3920  058F                     u985:	
  3921  058F  1C03               	skipc
  3922  0590  2D95               	goto	l1933
  3923  0591  0821               	movf	___lwmod@divisor,w
  3924  0592  02A3               	subwf	___lwmod@dividend,f
  3925  0593  0822               	movf	___lwmod@divisor+1,w
  3926  0594  3BA4               	subwfb	___lwmod@dividend+1,f
  3927  0595                     l1933:	
  3928  0595  3001               	movlw	1
  3929  0596                     u995:	
  3930  0596  36A2               	lsrf	___lwmod@divisor+1,f
  3931  0597  0CA1               	rrf	___lwmod@divisor,f
  3932  0598  0B89               	decfsz	9,f
  3933  0599  2D96               	goto	u995
  3934  059A  3001               	movlw	1
  3935  059B  02A6               	subwf	___lwmod@counter,f
  3936  059C  1D03               	btfss	3,2
  3937  059D  2D89               	goto	l1929
  3938  059E                     l1937:	
  3939  059E  0824               	movf	___lwmod@dividend+1,w
  3940  059F  00A2               	movwf	?___lwmod+1
  3941  05A0  0823               	movf	___lwmod@dividend,w
  3942  05A1  00A1               	movwf	?___lwmod
  3943  05A2  0008               	return
  3944  05A3                     __end_of___lwmod:	
  3945                           
  3946                           	psect	text7
  3947  044C                     __ptext7:	
  3948 ;; *************** function ___lwdiv *****************
  3949 ;; Defined at:
  3950 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\lwdiv.c"
  3951 ;; Parameters:    Size  Location     Type
  3952 ;;  divisor         2    1[BANK0 ] unsigned int 
  3953 ;;  dividend        2    3[BANK0 ] unsigned int 
  3954 ;; Auto vars:     Size  Location     Type
  3955 ;;  quotient        2    6[BANK0 ] unsigned int 
  3956 ;;  counter         1    8[BANK0 ] unsigned char 
  3957 ;; Return value:  Size  Location     Type
  3958 ;;                  2    1[BANK0 ] unsigned int 
  3959 ;; Registers used:
  3960 ;;		wreg, status,2, status,0
  3961 ;; Tracked objects:
  3962 ;;		On entry : 0/0
  3963 ;;		On exit  : 0/0
  3964 ;;		Unchanged: 0/0
  3965 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3966 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3967 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3968 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3969 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3970 ;;Total ram usage:        8 bytes
  3971 ;; Hardware stack levels used:    1
  3972 ;; Hardware stack levels required when called:    5
  3973 ;; This function calls:
  3974 ;;		Nothing
  3975 ;; This function is called by:
  3976 ;;		_utoa
  3977 ;; This function uses a non-reentrant model
  3978 ;;
  3979                           
  3980                           
  3981                           ;psect for function ___lwdiv
  3982  044C                     ___lwdiv:	
  3983                           
  3984                           ;incstack = 0
  3985                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  3986  044C  0020               	movlb	0	; select bank0
  3987  044D  01A6               	clrf	___lwdiv@quotient
  3988  044E  01A7               	clrf	___lwdiv@quotient+1
  3989  044F  0821               	movf	___lwdiv@divisor,w
  3990  0450  0422               	iorwf	___lwdiv@divisor+1,w
  3991  0451  1903               	btfsc	3,2
  3992  0452  2C7C               	goto	l1915
  3993  0453  01A8               	clrf	___lwdiv@counter
  3994  0454  0AA8               	incf	___lwdiv@counter,f
  3995  0455                     l1903:	
  3996  0455  1BA2               	btfsc	___lwdiv@divisor+1,7
  3997  0456  2C61               	goto	l1905
  3998  0457  3001               	movlw	1
  3999  0458                     u895:	
  4000  0458  35A1               	lslf	___lwdiv@divisor,f
  4001  0459  0DA2               	rlf	___lwdiv@divisor+1,f
  4002  045A  0B89               	decfsz	9,f
  4003  045B  2C58               	goto	u895
  4004  045C  3001               	movlw	1
  4005  045D  00A5               	movwf	??___lwdiv
  4006  045E  0825               	movf	??___lwdiv,w
  4007  045F  07A8               	addwf	___lwdiv@counter,f
  4008  0460  2C55               	goto	l1903
  4009  0461                     l1905:	
  4010  0461  3001               	movlw	1
  4011  0462                     u915:	
  4012  0462  35A6               	lslf	___lwdiv@quotient,f
  4013  0463  0DA7               	rlf	___lwdiv@quotient+1,f
  4014  0464  0B89               	decfsz	9,f
  4015  0465  2C62               	goto	u915
  4016  0466  0822               	movf	___lwdiv@divisor+1,w
  4017  0467  0224               	subwf	___lwdiv@dividend+1,w
  4018  0468  1D03               	skipz
  4019  0469  2C6C               	goto	u925
  4020  046A  0821               	movf	___lwdiv@divisor,w
  4021  046B  0223               	subwf	___lwdiv@dividend,w
  4022  046C                     u925:	
  4023  046C  1C03               	skipc
  4024  046D  2C73               	goto	l1911
  4025  046E  0821               	movf	___lwdiv@divisor,w
  4026  046F  02A3               	subwf	___lwdiv@dividend,f
  4027  0470  0822               	movf	___lwdiv@divisor+1,w
  4028  0471  3BA4               	subwfb	___lwdiv@dividend+1,f
  4029  0472  1426               	bsf	___lwdiv@quotient,0
  4030  0473                     l1911:	
  4031  0473  3001               	movlw	1
  4032  0474                     u935:	
  4033  0474  36A2               	lsrf	___lwdiv@divisor+1,f
  4034  0475  0CA1               	rrf	___lwdiv@divisor,f
  4035  0476  0B89               	decfsz	9,f
  4036  0477  2C74               	goto	u935
  4037  0478  3001               	movlw	1
  4038  0479  02A8               	subwf	___lwdiv@counter,f
  4039  047A  1D03               	btfss	3,2
  4040  047B  2C61               	goto	l1905
  4041  047C                     l1915:	
  4042  047C  0827               	movf	___lwdiv@quotient+1,w
  4043  047D  00A2               	movwf	?___lwdiv+1
  4044  047E  0826               	movf	___lwdiv@quotient,w
  4045  047F  00A1               	movwf	?___lwdiv
  4046  0480  0008               	return
  4047  0481                     __end_of___lwdiv:	
  4048                           
  4049                           	psect	text8
  4050  062D                     __ptext8:	
  4051 ;; *************** function _strcpy *****************
  4052 ;; Defined at:
  4053 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\strcpy.c"
  4054 ;; Parameters:    Size  Location     Type
  4055 ;;  to              1    wreg     PTR unsigned char 
  4056 ;;		 -> nrf24l01RXName(16), nrf24l01RXValue(8), nrf24l01RXTopic(8), nrf24l01TXName(16), 
  4057 ;;		 -> nrf24l01TXTopic(8), 
  4058 ;;  from            2    1[BANK0 ] PTR const unsigned char 
  4059 ;;		 -> STR_6(5), romData.name(16), nrf24l01TXName(16), STR_5(6), 
  4060 ;;		 -> STR_4(6), STR_3(5), STR_2(5), nrf24l01TXValue(8), 
  4061 ;;		 -> STR_1(4), nrf24l01TXTopic(8), romData(19), 
  4062 ;; Auto vars:     Size  Location     Type
  4063 ;;  to              1    5[BANK0 ] PTR unsigned char 
  4064 ;;		 -> nrf24l01RXName(16), nrf24l01RXValue(8), nrf24l01RXTopic(8), nrf24l01TXName(16), 
  4065 ;;		 -> nrf24l01TXTopic(8), 
  4066 ;;  cp              1    4[BANK0 ] PTR unsigned char 
  4067 ;;		 -> nrf24l01RXName(16), nrf24l01RXValue(8), nrf24l01RXTopic(8), nrf24l01TXName(16), 
  4068 ;;		 -> nrf24l01TXTopic(8), 
  4069 ;; Return value:  Size  Location     Type
  4070 ;;                  1    wreg      PTR unsigned char 
  4071 ;; Registers used:
  4072 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath
  4073 ;; Tracked objects:
  4074 ;;		On entry : 0/0
  4075 ;;		On exit  : 0/0
  4076 ;;		Unchanged: 0/0
  4077 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4078 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4079 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4080 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4081 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4082 ;;Total ram usage:        5 bytes
  4083 ;; Hardware stack levels used:    1
  4084 ;; Hardware stack levels required when called:    5
  4085 ;; This function calls:
  4086 ;;		Nothing
  4087 ;; This function is called by:
  4088 ;;		_loop
  4089 ;;		_main
  4090 ;;		_nrf24l01ReceiveString
  4091 ;; This function uses a non-reentrant model
  4092 ;;
  4093                           
  4094                           
  4095                           ;psect for function _strcpy
  4096  062D                     _strcpy:	
  4097                           
  4098                           ;incstack = 0
  4099                           ; Regs used in _strcpy: [wreg-fsr1h+status,2+status,0+pclath]
  4100                           ;strcpy@to stored from wreg
  4101  062D  0020               	movlb	0	; select bank0
  4102  062E  00A5               	movwf	strcpy@to
  4103  062F  0825               	movf	strcpy@to,w
  4104  0630  00A3               	movwf	??_strcpy
  4105  0631  0823               	movf	??_strcpy,w
  4106  0632  00A4               	movwf	strcpy@cp
  4107  0633                     l2633:	
  4108  0633  0824               	movf	strcpy@cp,w
  4109  0634  0086               	movwf	6
  4110  0635  0187               	clrf	7
  4111  0636  0821               	movf	strcpy@from,w
  4112  0637  0084               	movwf	4
  4113  0638  0822               	movf	strcpy@from+1,w
  4114  0639  0085               	movwf	5
  4115  063A  0800               	movf	0,w	;code access
  4116  063B  3FC0               	movwi [0]fsr1
  4117  063C  0889               	movf	9,f
  4118  063D  1903               	btfsc	3,2
  4119  063E  0008               	return
  4120  063F  3001               	movlw	1
  4121  0640  00A3               	movwf	??_strcpy
  4122  0641  0823               	movf	??_strcpy,w
  4123  0642  07A4               	addwf	strcpy@cp,f
  4124  0643  3001               	movlw	1
  4125  0644  07A1               	addwf	strcpy@from,f
  4126  0645  3000               	movlw	0
  4127  0646  3DA2               	addwfc	strcpy@from+1,f
  4128  0647  2E33               	goto	l2633
  4129  0648                     __end_of_strcpy:	
  4130                           ;	Return value of _strcpy is never used
  4131                           
  4132                           
  4133                           	psect	text9
  4134  069C                     __ptext9:	
  4135 ;; *************** function _sleep *****************
  4136 ;; Defined at:
  4137 ;;		line 46 in file "main.c"
  4138 ;; Parameters:    Size  Location     Type
  4139 ;;		None
  4140 ;; Auto vars:     Size  Location     Type
  4141 ;;		None
  4142 ;; Return value:  Size  Location     Type
  4143 ;;                  1    wreg      void 
  4144 ;; Registers used:
  4145 ;;		None
  4146 ;; Tracked objects:
  4147 ;;		On entry : 0/0
  4148 ;;		On exit  : 0/0
  4149 ;;		Unchanged: 0/0
  4150 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4151 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4152 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4153 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4154 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4155 ;;Total ram usage:        0 bytes
  4156 ;; Hardware stack levels used:    1
  4157 ;; Hardware stack levels required when called:    5
  4158 ;; This function calls:
  4159 ;;		Nothing
  4160 ;; This function is called by:
  4161 ;;		_loop
  4162 ;;		_main
  4163 ;;		_checkRxData
  4164 ;; This function uses a non-reentrant model
  4165 ;;
  4166                           
  4167                           
  4168                           ;psect for function _sleep
  4169  069C                     _sleep:	
  4170  069C                     l185:	
  4171                           ;incstack = 0
  4172                           ; Regs used in _sleep: []
  4173                           ;main.c: 47: while (1){
  4174                           
  4175  069C  0063               	sleep	;# 
  4176                           
  4177                           ;main.c: 50: __nop();
  4178  069D  0000               	nop
  4179                           
  4180                           ;main.c: 51: __nop();
  4181  069E  0000               	nop
  4182                           
  4183                           ;main.c: 53: if (!STATUSbits.nTO && !STATUSbits.nPD) {
  4184  069F  0020               	movlb	0	; select bank0
  4185  06A0  1A03               	btfsc	3,4	;volatile
  4186  06A1  2E9C               	goto	l185
  4187  06A2  1D83               	btfss	3,3	;volatile
  4188  06A3  0008               	return
  4189  06A4  2E9C               	goto	l185
  4190  06A5                     __end_of_sleep:	
  4191                           ;main.c: 54: return;
  4192                           
  4193                           
  4194                           	psect	text10
  4195  00FF                     __ptext10:	
  4196 ;; *************** function _nrf24l01SendString *****************
  4197 ;; Defined at:
  4198 ;;		line 232 in file "nrf24l01.c"
  4199 ;; Parameters:    Size  Location     Type
  4200 ;;		None
  4201 ;; Auto vars:     Size  Location     Type
  4202 ;;  i               1    8[BANK0 ] unsigned char 
  4203 ;; Return value:  Size  Location     Type
  4204 ;;                  1    wreg      void 
  4205 ;; Registers used:
  4206 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4207 ;; Tracked objects:
  4208 ;;		On entry : 0/0
  4209 ;;		On exit  : 0/0
  4210 ;;		Unchanged: 0/0
  4211 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4212 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4213 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4214 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4215 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4216 ;;Total ram usage:        2 bytes
  4217 ;; Hardware stack levels used:    1
  4218 ;; Hardware stack levels required when called:    8
  4219 ;; This function calls:
  4220 ;;		_enableInterrupts
  4221 ;;		_nrf24l01SPIEnd
  4222 ;;		_nrf24l01SPISend
  4223 ;;		_nrf24l01SPIStart
  4224 ;;		_nrf24l01SetRXMode
  4225 ;; This function is called by:
  4226 ;;		_loop
  4227 ;;		_main
  4228 ;;		_nrf24l01ReceiveString
  4229 ;; This function uses a non-reentrant model
  4230 ;;
  4231                           
  4232                           
  4233                           ;psect for function _nrf24l01SendString
  4234  00FF                     _nrf24l01SendString:	
  4235                           
  4236                           ;nrf24l01.c: 235: unsigned char i;;nrf24l01.c: 237: if (counter){
  4237                           
  4238                           ;incstack = 0
  4239                           ; Regs used in _nrf24l01SendString: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4240  00FF  0020               	movlb	0	; select bank0
  4241  0100  0847               	movf	_counter,w
  4242  0101  0448               	iorwf	_counter+1,w
  4243  0102  1903               	btfsc	3,2
  4244  0103  2908               	goto	l302
  4245                           
  4246                           ;nrf24l01.c: 238: counter--;
  4247  0104  3001               	movlw	1
  4248  0105  02C7               	subwf	_counter,f
  4249  0106  3000               	movlw	0
  4250  0107  3BC8               	subwfb	_counter+1,f
  4251  0108                     l302:	
  4252                           ;nrf24l01.c: 239: };nrf24l01.c: 242: RESEND:
  4253                           
  4254                           
  4255                           ;nrf24l01.c: 245: i = 0xFF;
  4256  0108  30FF               	movlw	255
  4257  0109  00A7               	movwf	??_nrf24l01SendString
  4258  010A  0827               	movf	??_nrf24l01SendString,w
  4259  010B  00A8               	movwf	nrf24l01SendString@i
  4260  010C                     l2059:	
  4261                           ;nrf24l01.c: 246: while (nrf24l01.TXBusy){
  4262                           
  4263  010C  0020               	movlb	0	; select bank0
  4264  010D  1CCB               	btfss	_nrf24l01,1	;volatile
  4265  010E  2918               	goto	l306
  4266                           
  4267                           ;nrf24l01.c: 247: if (!--i) {
  4268  010F  3001               	movlw	1
  4269  0110  02A8               	subwf	nrf24l01SendString@i,f
  4270  0111  1903               	btfsc	3,2
  4271  0112  2908               	goto	l302
  4272                           
  4273                           ;nrf24l01.c: 249: };nrf24l01.c: 250: _delay((unsigned long)((50)*(16000000/4000000.0)));
  4274                           
  4275                           ;nrf24l01.c: 248: goto RESEND;
  4276  0113  3042               	movlw	66
  4277  0114                     u1717:	
  4278  0114  0B89               	decfsz	9,f
  4279  0115  2914               	goto	u1717
  4280  0116  3200               	nop2
  4281  0117  290C               	goto	l2059
  4282  0118                     l306:	
  4283                           
  4284                           ;nrf24l01.c: 251: };nrf24l01.c: 255: nrf24l01.TXBusy = 1;
  4285  0118  14CB               	bsf	_nrf24l01,1	;volatile
  4286                           
  4287                           ;nrf24l01.c: 258: enableInterrupts(0);
  4288  0119  3000               	movlw	0
  4289  011A  3186  26A5  3180   	fcall	_enableInterrupts
  4290                           
  4291                           ;nrf24l01.c: 261: nrf24l01SetRXMode(0);
  4292  011D  3000               	movlw	0
  4293  011E  3184  2415  3180   	fcall	_nrf24l01SetRXMode
  4294                           
  4295                           ;nrf24l01.c: 264: nrf24l01SPIStart();
  4296  0121  3186  26AD  3180   	fcall	_nrf24l01SPIStart
  4297                           
  4298                           ;nrf24l01.c: 267: nrf24l01SPISend(0b10110000);
  4299  0124  30B0               	movlw	176
  4300  0125  3186  2691  3180   	fcall	_nrf24l01SPISend
  4301                           
  4302                           ;nrf24l01.c: 269: nrf24l01SPISend(nrf24l01TXPacketData.byte);
  4303  0128  0020               	movlb	0	; select bank0
  4304  0129  084C               	movf	_nrf24l01TXPacketData,w
  4305  012A  3186  2691  3180   	fcall	_nrf24l01SPISend
  4306                           
  4307                           ;nrf24l01.c: 272: for (i = 0; (nrf24l01TXName[i] != '\0') && (i < sizeof(nrf24l01TXName)
      +                          ); i++){
  4308  012D  0020               	movlb	0	; select bank0
  4309  012E  01A8               	clrf	nrf24l01SendString@i
  4310  012F  293D               	goto	l2069
  4311  0130                     l2065:	
  4312                           
  4313                           ;nrf24l01.c: 273: nrf24l01SPISend(nrf24l01TXName[i]);
  4314  0130  0828               	movf	nrf24l01SendString@i,w
  4315  0131  3EC3               	addlw	(low (_nrf24l01TXName| 0))& (0+255)
  4316  0132  0086               	movwf	6
  4317  0133  0187               	clrf	7
  4318  0134  0801               	movf	1,w
  4319  0135  3186  2691  3180   	fcall	_nrf24l01SPISend
  4320  0138  3001               	movlw	1
  4321  0139  0020               	movlb	0	; select bank0
  4322  013A  00A7               	movwf	??_nrf24l01SendString
  4323  013B  0827               	movf	??_nrf24l01SendString,w
  4324  013C  07A8               	addwf	nrf24l01SendString@i,f
  4325  013D                     l2069:	
  4326  013D  0828               	movf	nrf24l01SendString@i,w
  4327  013E  3EC3               	addlw	(low (_nrf24l01TXName| 0))& (0+255)
  4328  013F  0086               	movwf	6
  4329  0140  0187               	clrf	7
  4330  0141  0801               	movf	1,w
  4331  0142  1903               	btfsc	3,2
  4332  0143  2948               	goto	l2073
  4333  0144  3010               	movlw	16
  4334  0145  0228               	subwf	nrf24l01SendString@i,w
  4335  0146  1C03               	skipc
  4336  0147  2930               	goto	l2065
  4337  0148                     l2073:	
  4338                           
  4339                           ;nrf24l01.c: 274: };nrf24l01.c: 277: nrf24l01SPISend('/');
  4340  0148  302F               	movlw	47
  4341  0149  3186  2691  3180   	fcall	_nrf24l01SPISend
  4342                           
  4343                           ;nrf24l01.c: 280: for (i = 0; (nrf24l01TXTopic[i] != '\0') && (i < sizeof(nrf24l01TXTopi
      +                          c)); i++){
  4344  014C  0020               	movlb	0	; select bank0
  4345  014D  01A8               	clrf	nrf24l01SendString@i
  4346  014E  295C               	goto	l2081
  4347  014F                     l2077:	
  4348                           
  4349                           ;nrf24l01.c: 281: nrf24l01SPISend(nrf24l01TXTopic[i]);
  4350  014F  0828               	movf	nrf24l01SendString@i,w
  4351  0150  3E65               	addlw	(low (_nrf24l01TXTopic| 0))& (0+255)
  4352  0151  0086               	movwf	6
  4353  0152  0187               	clrf	7
  4354  0153  0801               	movf	1,w
  4355  0154  3186  2691  3180   	fcall	_nrf24l01SPISend
  4356  0157  3001               	movlw	1
  4357  0158  0020               	movlb	0	; select bank0
  4358  0159  00A7               	movwf	??_nrf24l01SendString
  4359  015A  0827               	movf	??_nrf24l01SendString,w
  4360  015B  07A8               	addwf	nrf24l01SendString@i,f
  4361  015C                     l2081:	
  4362  015C  0828               	movf	nrf24l01SendString@i,w
  4363  015D  3E65               	addlw	(low (_nrf24l01TXTopic| 0))& (0+255)
  4364  015E  0086               	movwf	6
  4365  015F  0187               	clrf	7
  4366  0160  0801               	movf	1,w
  4367  0161  1903               	btfsc	3,2
  4368  0162  2967               	goto	l2085
  4369  0163  3008               	movlw	8
  4370  0164  0228               	subwf	nrf24l01SendString@i,w
  4371  0165  1C03               	skipc
  4372  0166  294F               	goto	l2077
  4373  0167                     l2085:	
  4374                           
  4375                           ;nrf24l01.c: 282: };nrf24l01.c: 285: nrf24l01SPISend('/');
  4376  0167  302F               	movlw	47
  4377  0168  3186  2691  3180   	fcall	_nrf24l01SPISend
  4378                           
  4379                           ;nrf24l01.c: 288: for (i = 0; (nrf24l01TXValue[i] != '\0') && (i < sizeof(nrf24l01TXValu
      +                          e)); i++){
  4380  016B  0020               	movlb	0	; select bank0
  4381  016C  01A8               	clrf	nrf24l01SendString@i
  4382  016D  297B               	goto	l2093
  4383  016E                     l2089:	
  4384                           
  4385                           ;nrf24l01.c: 289: nrf24l01SPISend(nrf24l01TXValue[i]);
  4386  016E  0828               	movf	nrf24l01SendString@i,w
  4387  016F  3E5D               	addlw	(low (_nrf24l01TXValue| 0))& (0+255)
  4388  0170  0086               	movwf	6
  4389  0171  0187               	clrf	7
  4390  0172  0801               	movf	1,w
  4391  0173  3186  2691  3180   	fcall	_nrf24l01SPISend
  4392  0176  3001               	movlw	1
  4393  0177  0020               	movlb	0	; select bank0
  4394  0178  00A7               	movwf	??_nrf24l01SendString
  4395  0179  0827               	movf	??_nrf24l01SendString,w
  4396  017A  07A8               	addwf	nrf24l01SendString@i,f
  4397  017B                     l2093:	
  4398  017B  0828               	movf	nrf24l01SendString@i,w
  4399  017C  3E5D               	addlw	(low (_nrf24l01TXValue| 0))& (0+255)
  4400  017D  0086               	movwf	6
  4401  017E  0187               	clrf	7
  4402  017F  0801               	movf	1,w
  4403  0180  1903               	btfsc	3,2
  4404  0181  2986               	goto	l2097
  4405  0182  3008               	movlw	8
  4406  0183  0228               	subwf	nrf24l01SendString@i,w
  4407  0184  1C03               	skipc
  4408  0185  296E               	goto	l2089
  4409  0186                     l2097:	
  4410                           
  4411                           ;nrf24l01.c: 290: };nrf24l01.c: 293: nrf24l01SPIEnd();
  4412  0186  3186  26B4  3180   	fcall	_nrf24l01SPIEnd
  4413                           
  4414                           ;nrf24l01.c: 296: PORTAbits.RA0 = 1;
  4415  0189  0020               	movlb	0	; select bank0
  4416  018A  140C               	bsf	12,0	;volatile
  4417                           
  4418                           ;nrf24l01.c: 297: _delay((unsigned long)((20)*(16000000/4000000.0)));
  4419  018B  301A               	movlw	26
  4420  018C                     u1727:	
  4421  018C  0B89               	decfsz	9,f
  4422  018D  298C               	goto	u1727
  4423  018E  3200               	nop2
  4424                           
  4425                           ;nrf24l01.c: 298: PORTAbits.RA0 = 0;
  4426  018F  0020               	movlb	0	; select bank0
  4427  0190  100C               	bcf	12,0	;volatile
  4428                           
  4429                           ;nrf24l01.c: 301: enableInterrupts(1);
  4430  0191  3001               	movlw	1
  4431  0192  3186  26A5  3180   	fcall	_enableInterrupts
  4432                           
  4433                           ;nrf24l01.c: 304: i = 0xFF;
  4434  0195  30FF               	movlw	255
  4435  0196  0020               	movlb	0	; select bank0
  4436  0197  00A7               	movwf	??_nrf24l01SendString
  4437  0198  0827               	movf	??_nrf24l01SendString,w
  4438  0199  00A8               	movwf	nrf24l01SendString@i
  4439  019A                     l2113:	
  4440                           ;nrf24l01.c: 305: while (nrf24l01.TXBusy){
  4441                           
  4442  019A  0020               	movlb	0	; select bank0
  4443  019B  1CCB               	btfss	_nrf24l01,1	;volatile
  4444  019C  29A6               	goto	l2115
  4445                           
  4446                           ;nrf24l01.c: 306: if (!--i) {
  4447  019D  3001               	movlw	1
  4448  019E  02A8               	subwf	nrf24l01SendString@i,f
  4449  019F  1903               	btfsc	3,2
  4450  01A0  2908               	goto	l302
  4451                           
  4452                           ;nrf24l01.c: 308: };nrf24l01.c: 309: _delay((unsigned long)((50)*(16000000/4000000.0)));
  4453                           
  4454                           ;nrf24l01.c: 307: goto RESEND;
  4455  01A1  3042               	movlw	66
  4456  01A2                     u1737:	
  4457  01A2  0B89               	decfsz	9,f
  4458  01A3  29A2               	goto	u1737
  4459  01A4  3200               	nop2
  4460  01A5  299A               	goto	l2113
  4461  01A6                     l2115:	
  4462                           
  4463                           ;nrf24l01.c: 310: };nrf24l01.c: 313: i = 0xFF;
  4464  01A6  30FF               	movlw	255
  4465  01A7  00A7               	movwf	??_nrf24l01SendString
  4466  01A8  0827               	movf	??_nrf24l01SendString,w
  4467  01A9  00A8               	movwf	nrf24l01SendString@i
  4468  01AA                     l2123:	
  4469                           ;nrf24l01.c: 314: while (nrf24l01TXPacketData.ACKRequest){
  4470                           
  4471  01AA  0020               	movlb	0	; select bank0
  4472  01AB  1C4C               	btfss	_nrf24l01TXPacketData,0
  4473  01AC  0008               	return
  4474                           
  4475                           ;nrf24l01.c: 315: if (!--i) {
  4476  01AD  3001               	movlw	1
  4477  01AE  02A8               	subwf	nrf24l01SendString@i,f
  4478  01AF  1D03               	btfss	3,2
  4479  01B0  29B6               	goto	l2121
  4480                           
  4481                           ;nrf24l01.c: 316: counter++;
  4482  01B1  3001               	movlw	1
  4483  01B2  07C7               	addwf	_counter,f
  4484  01B3  3000               	movlw	0
  4485  01B4  3DC8               	addwfc	_counter+1,f
  4486                           
  4487                           ;nrf24l01.c: 317: goto RESEND;
  4488  01B5  2908               	goto	l302
  4489  01B6                     l2121:	
  4490                           
  4491                           ;nrf24l01.c: 318: };nrf24l01.c: 319: _delay((unsigned long)((200)*(16000000/4000000.0)))
      +                          ;
  4492  01B6  30A0               	movlw	160
  4493  01B7                     u1747:	
  4494  01B7  3200               	nop2
  4495  01B8  0B89               	decfsz	9,f
  4496  01B9  29B7               	goto	u1747
  4497  01BA  29AA               	goto	l2123
  4498  01BB                     __end_of_nrf24l01SendString:	
  4499                           
  4500                           	psect	text11
  4501  0415                     __ptext11:	
  4502 ;; *************** function _nrf24l01SetRXMode *****************
  4503 ;; Defined at:
  4504 ;;		line 74 in file "nrf24l01.c"
  4505 ;; Parameters:    Size  Location     Type
  4506 ;;  rxMode          1    wreg     unsigned char 
  4507 ;; Auto vars:     Size  Location     Type
  4508 ;;  rxMode          1    6[BANK0 ] unsigned char 
  4509 ;;  config          1    5[BANK0 ] struct .
  4510 ;; Return value:  Size  Location     Type
  4511 ;;                  1    wreg      void 
  4512 ;; Registers used:
  4513 ;;		wreg, status,2, status,0, pclath, cstack
  4514 ;; Tracked objects:
  4515 ;;		On entry : 0/0
  4516 ;;		On exit  : 0/0
  4517 ;;		Unchanged: 0/0
  4518 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4519 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4520 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4521 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4522 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4523 ;;Total ram usage:        3 bytes
  4524 ;; Hardware stack levels used:    1
  4525 ;; Hardware stack levels required when called:    7
  4526 ;; This function calls:
  4527 ;;		_nrf24l01Send
  4528 ;; This function is called by:
  4529 ;;		_nrf24l01SendString
  4530 ;;		_checkRxData
  4531 ;;		_nrf24l01CheckACK
  4532 ;; This function uses a non-reentrant model
  4533 ;;
  4534                           
  4535                           
  4536                           ;psect for function _nrf24l01SetRXMode
  4537  0415                     _nrf24l01SetRXMode:	
  4538                           
  4539                           ;incstack = 0
  4540                           ; Regs used in _nrf24l01SetRXMode: [wreg+status,2+status,0+pclath+cstack]
  4541                           ;nrf24l01SetRXMode@rxMode stored from wreg
  4542  0415  0020               	movlb	0	; select bank0
  4543  0416  00A6               	movwf	nrf24l01SetRXMode@rxMode
  4544                           
  4545                           ;nrf24l01.c: 76: n_CONFIG_t config;;nrf24l01.c: 79: config.byte = nrf24l01Send(0b0000000
      +                          0 | 0x00, 0);
  4546  0417  01A1               	clrf	nrf24l01Send@data
  4547  0418  3000               	movlw	0
  4548  0419  3185  25ED  3184   	fcall	_nrf24l01Send
  4549  041C  0020               	movlb	0	; select bank0
  4550  041D  00A4               	movwf	??_nrf24l01SetRXMode
  4551  041E  0824               	movf	??_nrf24l01SetRXMode,w
  4552  041F  00A5               	movwf	nrf24l01SetRXMode@config
  4553                           
  4554                           ;nrf24l01.c: 82: if (config.PRIM_RX != rxMode){
  4555  0420  0825               	movf	nrf24l01SetRXMode@config,w
  4556  0421  3901               	andlw	1
  4557  0422  0626               	xorwf	nrf24l01SetRXMode@rxMode,w
  4558  0423  1903               	skipnz
  4559  0424  2C45               	goto	l1853
  4560                           
  4561                           ;nrf24l01.c: 85: PORTAbits.RA0 = 0;
  4562  0425  100C               	bcf	12,0	;volatile
  4563                           
  4564                           ;nrf24l01.c: 86: _delay((unsigned long)((200)*(16000000/4000000.0)));
  4565  0426  30A0               	movlw	160
  4566  0427                     u1757:	
  4567  0427  3200               	nop2
  4568  0428  0B89               	decfsz	9,f
  4569  0429  2C27               	goto	u1757
  4570                           
  4571                           ;nrf24l01.c: 93: config.PRIM_RX = rxMode;
  4572  042A  0020               	movlb	0	; select bank0
  4573  042B  0826               	movf	nrf24l01SetRXMode@rxMode,w
  4574  042C  3901               	andlw	1
  4575  042D  1025               	bcf	nrf24l01SetRXMode@config,0
  4576  042E  1D03               	skipz
  4577  042F  1425               	bsf	nrf24l01SetRXMode@config,0
  4578                           
  4579                           ;nrf24l01.c: 94: nrf24l01Send(0b00100000 | 0x00, config.byte);
  4580  0430  0825               	movf	nrf24l01SetRXMode@config,w
  4581  0431  00A4               	movwf	??_nrf24l01SetRXMode
  4582  0432  0824               	movf	??_nrf24l01SetRXMode,w
  4583  0433  00A1               	movwf	nrf24l01Send@data
  4584  0434  3020               	movlw	32
  4585  0435  3185  25ED  3184   	fcall	_nrf24l01Send
  4586                           
  4587                           ;nrf24l01.c: 97: _delay((unsigned long)((200)*(16000000/4000000.0)));
  4588  0438  30A0               	movlw	160
  4589  0439                     u1767:	
  4590  0439  3200               	nop2
  4591  043A  0B89               	decfsz	9,f
  4592  043B  2C39               	goto	u1767
  4593                           
  4594                           ;nrf24l01.c: 100: if (rxMode){
  4595  043C  0020               	movlb	0	; select bank0
  4596  043D  0826               	movf	nrf24l01SetRXMode@rxMode,w
  4597  043E  1903               	btfsc	3,2
  4598  043F  2C45               	goto	l1853
  4599                           
  4600                           ;nrf24l01.c: 101: PORTAbits.RA0 = 1;
  4601  0440  140C               	bsf	12,0	;volatile
  4602                           
  4603                           ;nrf24l01.c: 102: _delay((unsigned long)((200)*(16000000/4000000.0)));
  4604  0441  30A0               	movlw	160
  4605  0442                     u1777:	
  4606  0442  3200               	nop2
  4607  0443  0B89               	decfsz	9,f
  4608  0444  2C42               	goto	u1777
  4609  0445                     l1853:	
  4610                           
  4611                           ;nrf24l01.c: 103: };nrf24l01.c: 104: };nrf24l01.c: 107: nrf24l01.RXMode = rxMode;
  4612  0445  0020               	movlb	0	; select bank0
  4613  0446  0826               	movf	nrf24l01SetRXMode@rxMode,w
  4614  0447  3901               	andlw	1
  4615  0448  11CB               	bcf	_nrf24l01,3	;volatile
  4616  0449  1D03               	skipz
  4617  044A  15CB               	bsf	_nrf24l01,3	;volatile
  4618  044B  0008               	return
  4619  044C                     __end_of_nrf24l01SetRXMode:	
  4620                           
  4621                           	psect	text12
  4622  05ED                     __ptext12:	
  4623 ;; *************** function _nrf24l01Send *****************
  4624 ;; Defined at:
  4625 ;;		line 19 in file "nrf24l01.c"
  4626 ;; Parameters:    Size  Location     Type
  4627 ;;  command         1    wreg     unsigned char 
  4628 ;;  data            1    1[BANK0 ] unsigned char 
  4629 ;; Auto vars:     Size  Location     Type
  4630 ;;  command         1    3[BANK0 ] unsigned char 
  4631 ;; Return value:  Size  Location     Type
  4632 ;;                  1    wreg      unsigned char 
  4633 ;; Registers used:
  4634 ;;		wreg, status,2, status,0, pclath, cstack
  4635 ;; Tracked objects:
  4636 ;;		On entry : 0/0
  4637 ;;		On exit  : 0/0
  4638 ;;		Unchanged: 0/0
  4639 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4640 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4641 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4642 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4643 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4644 ;;Total ram usage:        3 bytes
  4645 ;; Hardware stack levels used:    1
  4646 ;; Hardware stack levels required when called:    6
  4647 ;; This function calls:
  4648 ;;		_enableInterrupts
  4649 ;;		_nrf24l01SPIEnd
  4650 ;;		_nrf24l01SPISend
  4651 ;;		_nrf24l01SPIStart
  4652 ;; This function is called by:
  4653 ;;		_nrf24l01SetRXMode
  4654 ;;		_nrf24l01InitRegisters
  4655 ;;		_nrf24l01ReceiveString
  4656 ;; This function uses a non-reentrant model
  4657 ;;
  4658                           
  4659                           
  4660                           ;psect for function _nrf24l01Send
  4661  05ED                     _nrf24l01Send:	
  4662                           
  4663                           ;incstack = 0
  4664                           ; Regs used in _nrf24l01Send: [wreg+status,2+status,0+pclath+cstack]
  4665                           ;nrf24l01Send@command stored from wreg
  4666  05ED  0020               	movlb	0	; select bank0
  4667  05EE  00A3               	movwf	nrf24l01Send@command
  4668                           
  4669                           ;nrf24l01.c: 22: enableInterrupts(0);
  4670  05EF  3000               	movlw	0
  4671  05F0  3186  26A5  3185   	fcall	_enableInterrupts
  4672                           
  4673                           ;nrf24l01.c: 25: nrf24l01SPIStart();
  4674  05F3  3186  26AD  3185   	fcall	_nrf24l01SPIStart
  4675                           
  4676                           ;nrf24l01.c: 28: nrf24l01SPISend(command);
  4677  05F6  0020               	movlb	0	; select bank0
  4678  05F7  0823               	movf	nrf24l01Send@command,w
  4679  05F8  3186  2691  3185   	fcall	_nrf24l01SPISend
  4680                           
  4681                           ;nrf24l01.c: 31: data = nrf24l01SPISend(data);
  4682  05FB  0020               	movlb	0	; select bank0
  4683  05FC  0821               	movf	nrf24l01Send@data,w
  4684  05FD  3186  2691  3185   	fcall	_nrf24l01SPISend
  4685  0600  0020               	movlb	0	; select bank0
  4686  0601  00A2               	movwf	??_nrf24l01Send
  4687  0602  0822               	movf	??_nrf24l01Send,w
  4688  0603  00A1               	movwf	nrf24l01Send@data
  4689                           
  4690                           ;nrf24l01.c: 34: nrf24l01SPIEnd();
  4691  0604  3186  26B4  3185   	fcall	_nrf24l01SPIEnd
  4692                           
  4693                           ;nrf24l01.c: 37: enableInterrupts(1);
  4694  0607  3001               	movlw	1
  4695  0608  3186  26A5         	fcall	_enableInterrupts
  4696                           
  4697                           ;nrf24l01.c: 39: return data;
  4698  060A  0020               	movlb	0	; select bank0
  4699  060B  0821               	movf	nrf24l01Send@data,w
  4700  060C  0008               	return
  4701  060D                     __end_of_nrf24l01Send:	
  4702                           
  4703                           	psect	text13
  4704  0260                     __ptext13:	
  4705 ;; *************** function _getADCValue *****************
  4706 ;; Defined at:
  4707 ;;		line 21 in file "main.c"
  4708 ;; Parameters:    Size  Location     Type
  4709 ;;  channel         1    wreg     unsigned char 
  4710 ;;  divider         4   15[BANK0 ] unsigned long 
  4711 ;; Auto vars:     Size  Location     Type
  4712 ;;  channel         1   23[BANK0 ] unsigned char 
  4713 ;;  adcSum          4   25[BANK0 ] unsigned long 
  4714 ;;  adcLoop         1   24[BANK0 ] unsigned char 
  4715 ;; Return value:  Size  Location     Type
  4716 ;;                  4   15[BANK0 ] unsigned long 
  4717 ;; Registers used:
  4718 ;;		wreg, status,2, status,0, pclath, cstack
  4719 ;; Tracked objects:
  4720 ;;		On entry : 0/0
  4721 ;;		On exit  : 0/0
  4722 ;;		Unchanged: 0/0
  4723 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4724 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4725 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4726 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4727 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4728 ;;Total ram usage:       14 bytes
  4729 ;; Hardware stack levels used:    1
  4730 ;; Hardware stack levels required when called:    6
  4731 ;; This function calls:
  4732 ;;		___lldiv
  4733 ;;		___lmul
  4734 ;; This function is called by:
  4735 ;;		_loop
  4736 ;; This function uses a non-reentrant model
  4737 ;;
  4738                           
  4739                           
  4740                           ;psect for function _getADCValue
  4741  0260                     _getADCValue:	
  4742                           
  4743                           ;incstack = 0
  4744                           ; Regs used in _getADCValue: [wreg+status,2+status,0+pclath+cstack]
  4745                           ;getADCValue@channel stored from wreg
  4746  0260  0020               	movlb	0	; select bank0
  4747  0261  00B7               	movwf	getADCValue@channel
  4748                           
  4749                           ;main.c: 23: unsigned long adcSum = 0;
  4750  0262  3000               	movlw	0
  4751  0263  00BC               	movwf	getADCValue@adcSum+3
  4752  0264  3000               	movlw	0
  4753  0265  00BB               	movwf	getADCValue@adcSum+2
  4754  0266  3000               	movlw	0
  4755  0267  00BA               	movwf	getADCValue@adcSum+1
  4756  0268  3000               	movlw	0
  4757  0269  00B9               	movwf	getADCValue@adcSum
  4758                           
  4759                           ;main.c: 24: unsigned char adcLoop = 255;
  4760  026A  30FF               	movlw	255
  4761  026B  00B3               	movwf	??_getADCValue
  4762  026C  0833               	movf	??_getADCValue,w
  4763  026D  00B8               	movwf	getADCValue@adcLoop
  4764                           
  4765                           ;main.c: 26: ADCON0bits.CHS = channel;
  4766  026E  0837               	movf	getADCValue@channel,w
  4767  026F  00B3               	movwf	??_getADCValue
  4768  0270  0DB3               	rlf	??_getADCValue,f
  4769  0271  0DB3               	rlf	??_getADCValue,f
  4770  0272  0021               	movlb	1	; select bank1
  4771  0273  081D               	movf	29,w	;volatile
  4772  0274  0020               	movlb	0	; select bank0
  4773  0275  0633               	xorwf	??_getADCValue,w
  4774  0276  3903               	andlw	-253
  4775  0277  0633               	xorwf	??_getADCValue,w
  4776  0278  0021               	movlb	1	; select bank1
  4777  0279  009D               	movwf	29	;volatile
  4778                           
  4779                           ;main.c: 27: _delay((unsigned long)((200)*(16000000/4000000.0)));
  4780  027A  30A0               	movlw	160
  4781  027B                     u1787:	
  4782  027B  3200               	nop2
  4783  027C  0B89               	decfsz	9,f
  4784  027D  2A7B               	goto	u1787
  4785  027E                     l1999:	
  4786                           ;main.c: 29: while (--adcLoop){
  4787                           
  4788  027E  3001               	movlw	1
  4789  027F  0020               	movlb	0	; select bank0
  4790  0280  02B8               	subwf	getADCValue@adcLoop,f
  4791  0281  1903               	btfsc	3,2
  4792  0282  2AA8               	goto	l2001
  4793                           
  4794                           ;main.c: 31: ADCON0bits.ADGO = 1;
  4795  0283  0021               	movlb	1	; select bank1
  4796  0284  149D               	bsf	29,1	;volatile
  4797  0285                     l178:	
  4798                           ;main.c: 32: while (ADCON0bits.ADGO){
  4799                           
  4800  0285  0021               	movlb	1	; select bank1
  4801  0286  1C9D               	btfss	29,1	;volatile
  4802  0287  2A8A               	goto	l1997
  4803                           
  4804                           ;main.c: 33: __nop();
  4805  0288  0000               	nop
  4806  0289  2A85               	goto	l178
  4807  028A                     l1997:	
  4808                           
  4809                           ;main.c: 34: };main.c: 36: adcSum+= ADRESL;
  4810  028A  081B               	movf	27,w	;volatile
  4811  028B  0020               	movlb	0	; select bank0
  4812  028C  00B3               	movwf	??_getADCValue
  4813  028D  01B4               	clrf	??_getADCValue+1
  4814  028E  01B5               	clrf	??_getADCValue+2
  4815  028F  01B6               	clrf	??_getADCValue+3
  4816  0290  0833               	movf	??_getADCValue,w
  4817  0291  07B9               	addwf	getADCValue@adcSum,f
  4818  0292  0834               	movf	??_getADCValue+1,w
  4819  0293  3DBA               	addwfc	getADCValue@adcSum+1,f
  4820  0294  0835               	movf	??_getADCValue+2,w
  4821  0295  3DBB               	addwfc	getADCValue@adcSum+2,f
  4822  0296  0836               	movf	??_getADCValue+3,w
  4823  0297  3DBC               	addwfc	getADCValue@adcSum+3,f
  4824                           
  4825                           ;main.c: 37: adcSum+= (unsigned) (ADRESH << 8);
  4826  0298  0021               	movlb	1	; select bank1
  4827  0299  081C               	movf	28,w	;volatile
  4828  029A  0020               	movlb	0	; select bank0
  4829  029B  00B3               	movwf	??_getADCValue
  4830  029C  01B4               	clrf	??_getADCValue+1
  4831  029D  0833               	movf	??_getADCValue,w
  4832  029E  00B4               	movwf	??_getADCValue+1
  4833  029F  01B3               	clrf	??_getADCValue
  4834  02A0  0833               	movf	??_getADCValue,w
  4835  02A1  07B9               	addwf	getADCValue@adcSum,f
  4836  02A2  0834               	movf	??_getADCValue+1,w
  4837  02A3  3DBA               	addwfc	getADCValue@adcSum+1,f
  4838  02A4  3000               	movlw	0
  4839  02A5  3DBB               	addwfc	getADCValue@adcSum+2,f
  4840  02A6  3DBC               	addwfc	getADCValue@adcSum+3,f
  4841  02A7  2A7E               	goto	l1999
  4842  02A8                     l2001:	
  4843                           
  4844                           ;main.c: 38: };main.c: 40: adcSum*= 100;
  4845  02A8  3000               	movlw	0
  4846  02A9  00A4               	movwf	___lmul@multiplier+3
  4847  02AA  3000               	movlw	0
  4848  02AB  00A3               	movwf	___lmul@multiplier+2
  4849  02AC  3000               	movlw	0
  4850  02AD  00A2               	movwf	___lmul@multiplier+1
  4851  02AE  3064               	movlw	100
  4852  02AF  00A1               	movwf	___lmul@multiplier
  4853  02B0  083C               	movf	getADCValue@adcSum+3,w
  4854  02B1  00A8               	movwf	___lmul@multiplicand+3
  4855  02B2  083B               	movf	getADCValue@adcSum+2,w
  4856  02B3  00A7               	movwf	___lmul@multiplicand+2
  4857  02B4  083A               	movf	getADCValue@adcSum+1,w
  4858  02B5  00A6               	movwf	___lmul@multiplicand+1
  4859  02B6  0839               	movf	getADCValue@adcSum,w
  4860  02B7  00A5               	movwf	___lmul@multiplicand
  4861  02B8  3184  24E8  3182   	fcall	___lmul
  4862  02BB  0020               	movlb	0	; select bank0
  4863  02BC  0824               	movf	?___lmul+3,w
  4864  02BD  00BC               	movwf	getADCValue@adcSum+3
  4865  02BE  0823               	movf	?___lmul+2,w
  4866  02BF  00BB               	movwf	getADCValue@adcSum+2
  4867  02C0  0822               	movf	?___lmul+1,w
  4868  02C1  00BA               	movwf	getADCValue@adcSum+1
  4869  02C2  0821               	movf	?___lmul,w
  4870  02C3  00B9               	movwf	getADCValue@adcSum
  4871                           
  4872                           ;main.c: 41: adcSum/= divider;
  4873  02C4  0832               	movf	getADCValue@divider+3,w
  4874  02C5  00A4               	movwf	___lldiv@divisor+3
  4875  02C6  0831               	movf	getADCValue@divider+2,w
  4876  02C7  00A3               	movwf	___lldiv@divisor+2
  4877  02C8  0830               	movf	getADCValue@divider+1,w
  4878  02C9  00A2               	movwf	___lldiv@divisor+1
  4879  02CA  082F               	movf	getADCValue@divider,w
  4880  02CB  00A1               	movwf	___lldiv@divisor
  4881  02CC  083C               	movf	getADCValue@adcSum+3,w
  4882  02CD  00A8               	movwf	___lldiv@dividend+3
  4883  02CE  083B               	movf	getADCValue@adcSum+2,w
  4884  02CF  00A7               	movwf	___lldiv@dividend+2
  4885  02D0  083A               	movf	getADCValue@adcSum+1,w
  4886  02D1  00A6               	movwf	___lldiv@dividend+1
  4887  02D2  0839               	movf	getADCValue@adcSum,w
  4888  02D3  00A5               	movwf	___lldiv@dividend
  4889  02D4  3183  23C2         	fcall	___lldiv
  4890  02D6  0020               	movlb	0	; select bank0
  4891  02D7  0824               	movf	?___lldiv+3,w
  4892  02D8  00BC               	movwf	getADCValue@adcSum+3
  4893  02D9  0823               	movf	?___lldiv+2,w
  4894  02DA  00BB               	movwf	getADCValue@adcSum+2
  4895  02DB  0822               	movf	?___lldiv+1,w
  4896  02DC  00BA               	movwf	getADCValue@adcSum+1
  4897  02DD  0821               	movf	?___lldiv,w
  4898  02DE  00B9               	movwf	getADCValue@adcSum
  4899                           
  4900                           ;main.c: 43: return adcSum;
  4901  02DF  083C               	movf	getADCValue@adcSum+3,w
  4902  02E0  00B2               	movwf	?_getADCValue+3
  4903  02E1  083B               	movf	getADCValue@adcSum+2,w
  4904  02E2  00B1               	movwf	?_getADCValue+2
  4905  02E3  083A               	movf	getADCValue@adcSum+1,w
  4906  02E4  00B0               	movwf	?_getADCValue+1
  4907  02E5  0839               	movf	getADCValue@adcSum,w
  4908  02E6  00AF               	movwf	?_getADCValue
  4909  02E7  0008               	return
  4910  02E8                     __end_of_getADCValue:	
  4911                           
  4912                           	psect	text14
  4913  04E8                     __ptext14:	
  4914 ;; *************** function ___lmul *****************
  4915 ;; Defined at:
  4916 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\Umul32.c"
  4917 ;; Parameters:    Size  Location     Type
  4918 ;;  multiplier      4    1[BANK0 ] unsigned long 
  4919 ;;  multiplicand    4    5[BANK0 ] unsigned long 
  4920 ;; Auto vars:     Size  Location     Type
  4921 ;;  product         4    9[BANK0 ] unsigned long 
  4922 ;; Return value:  Size  Location     Type
  4923 ;;                  4    1[BANK0 ] unsigned long 
  4924 ;; Registers used:
  4925 ;;		wreg, status,2, status,0
  4926 ;; Tracked objects:
  4927 ;;		On entry : 0/0
  4928 ;;		On exit  : 0/0
  4929 ;;		Unchanged: 0/0
  4930 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4931 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4932 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4933 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4934 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4935 ;;Total ram usage:       12 bytes
  4936 ;; Hardware stack levels used:    1
  4937 ;; Hardware stack levels required when called:    5
  4938 ;; This function calls:
  4939 ;;		Nothing
  4940 ;; This function is called by:
  4941 ;;		_getADCValue
  4942 ;; This function uses a non-reentrant model
  4943 ;;
  4944                           
  4945                           
  4946                           ;psect for function ___lmul
  4947  04E8                     ___lmul:	
  4948                           
  4949                           ;incstack = 0
  4950                           ; Regs used in ___lmul: [wreg+status,2+status,0]
  4951  04E8  3000               	movlw	0
  4952  04E9  0020               	movlb	0	; select bank0
  4953  04EA  00AC               	movwf	___lmul@product+3
  4954  04EB  3000               	movlw	0
  4955  04EC  00AB               	movwf	___lmul@product+2
  4956  04ED  3000               	movlw	0
  4957  04EE  00AA               	movwf	___lmul@product+1
  4958  04EF  3000               	movlw	0
  4959  04F0  00A9               	movwf	___lmul@product
  4960  04F1                     l1857:	
  4961  04F1  1C21               	btfss	___lmul@multiplier,0
  4962  04F2  2CFB               	goto	l1861
  4963  04F3  0825               	movf	___lmul@multiplicand,w
  4964  04F4  07A9               	addwf	___lmul@product,f
  4965  04F5  0826               	movf	___lmul@multiplicand+1,w
  4966  04F6  3DAA               	addwfc	___lmul@product+1,f
  4967  04F7  0827               	movf	___lmul@multiplicand+2,w
  4968  04F8  3DAB               	addwfc	___lmul@product+2,f
  4969  04F9  0828               	movf	___lmul@multiplicand+3,w
  4970  04FA  3DAC               	addwfc	___lmul@product+3,f
  4971  04FB                     l1861:	
  4972  04FB  3001               	movlw	1
  4973  04FC                     u785:	
  4974  04FC  35A5               	lslf	___lmul@multiplicand,f
  4975  04FD  0DA6               	rlf	___lmul@multiplicand+1,f
  4976  04FE  0DA7               	rlf	___lmul@multiplicand+2,f
  4977  04FF  0DA8               	rlf	___lmul@multiplicand+3,f
  4978  0500  0B89               	decfsz	9,f
  4979  0501  2CFC               	goto	u785
  4980  0502  3001               	movlw	1
  4981  0503                     u795:	
  4982  0503  36A4               	lsrf	___lmul@multiplier+3,f
  4983  0504  0CA3               	rrf	___lmul@multiplier+2,f
  4984  0505  0CA2               	rrf	___lmul@multiplier+1,f
  4985  0506  0CA1               	rrf	___lmul@multiplier,f
  4986  0507  0B89               	decfsz	9,f
  4987  0508  2D03               	goto	u795
  4988  0509  0824               	movf	___lmul@multiplier+3,w
  4989  050A  0423               	iorwf	___lmul@multiplier+2,w
  4990  050B  0422               	iorwf	___lmul@multiplier+1,w
  4991  050C  0421               	iorwf	___lmul@multiplier,w
  4992  050D  1D03               	skipz
  4993  050E  2CF1               	goto	l1857
  4994  050F  082C               	movf	___lmul@product+3,w
  4995  0510  00A4               	movwf	?___lmul+3
  4996  0511  082B               	movf	___lmul@product+2,w
  4997  0512  00A3               	movwf	?___lmul+2
  4998  0513  082A               	movf	___lmul@product+1,w
  4999  0514  00A2               	movwf	?___lmul+1
  5000  0515  0829               	movf	___lmul@product,w
  5001  0516  00A1               	movwf	?___lmul
  5002  0517  0008               	return
  5003  0518                     __end_of___lmul:	
  5004                           
  5005                           	psect	text15
  5006  03C2                     __ptext15:	
  5007 ;; *************** function ___lldiv *****************
  5008 ;; Defined at:
  5009 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\__lldiv.c"
  5010 ;; Parameters:    Size  Location     Type
  5011 ;;  divisor         4    1[BANK0 ] unsigned long 
  5012 ;;  dividend        4    5[BANK0 ] unsigned long 
  5013 ;; Auto vars:     Size  Location     Type
  5014 ;;  quotient        4   10[BANK0 ] unsigned long 
  5015 ;;  counter         1   14[BANK0 ] unsigned char 
  5016 ;; Return value:  Size  Location     Type
  5017 ;;                  4    1[BANK0 ] unsigned long 
  5018 ;; Registers used:
  5019 ;;		wreg, status,2, status,0
  5020 ;; Tracked objects:
  5021 ;;		On entry : 0/0
  5022 ;;		On exit  : 0/0
  5023 ;;		Unchanged: 0/0
  5024 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5025 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5026 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5027 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5028 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5029 ;;Total ram usage:       14 bytes
  5030 ;; Hardware stack levels used:    1
  5031 ;; Hardware stack levels required when called:    5
  5032 ;; This function calls:
  5033 ;;		Nothing
  5034 ;; This function is called by:
  5035 ;;		_getADCValue
  5036 ;; This function uses a non-reentrant model
  5037 ;;
  5038                           
  5039                           
  5040                           ;psect for function ___lldiv
  5041  03C2                     ___lldiv:	
  5042                           
  5043                           ;incstack = 0
  5044                           ; Regs used in ___lldiv: [wreg+status,2+status,0]
  5045  03C2  3000               	movlw	0
  5046  03C3  0020               	movlb	0	; select bank0
  5047  03C4  00AD               	movwf	___lldiv@quotient+3
  5048  03C5  3000               	movlw	0
  5049  03C6  00AC               	movwf	___lldiv@quotient+2
  5050  03C7  3000               	movlw	0
  5051  03C8  00AB               	movwf	___lldiv@quotient+1
  5052  03C9  3000               	movlw	0
  5053  03CA  00AA               	movwf	___lldiv@quotient
  5054  03CB  0824               	movf	___lldiv@divisor+3,w
  5055  03CC  0423               	iorwf	___lldiv@divisor+2,w
  5056  03CD  0422               	iorwf	___lldiv@divisor+1,w
  5057  03CE  0421               	iorwf	___lldiv@divisor,w
  5058  03CF  1903               	skipnz
  5059  03D0  2C0C               	goto	l1889
  5060  03D1  01AE               	clrf	___lldiv@counter
  5061  03D2  0AAE               	incf	___lldiv@counter,f
  5062  03D3                     l1875:	
  5063  03D3  1BA4               	btfsc	___lldiv@divisor+3,7
  5064  03D4  2BE1               	goto	l1877
  5065  03D5  3001               	movlw	1
  5066  03D6                     u825:	
  5067  03D6  35A1               	lslf	___lldiv@divisor,f
  5068  03D7  0DA2               	rlf	___lldiv@divisor+1,f
  5069  03D8  0DA3               	rlf	___lldiv@divisor+2,f
  5070  03D9  0DA4               	rlf	___lldiv@divisor+3,f
  5071  03DA  0B89               	decfsz	9,f
  5072  03DB  2BD6               	goto	u825
  5073  03DC  3001               	movlw	1
  5074  03DD  00A9               	movwf	??___lldiv
  5075  03DE  0829               	movf	??___lldiv,w
  5076  03DF  07AE               	addwf	___lldiv@counter,f
  5077  03E0  2BD3               	goto	l1875
  5078  03E1                     l1877:	
  5079  03E1  3001               	movlw	1
  5080  03E2                     u845:	
  5081  03E2  35AA               	lslf	___lldiv@quotient,f
  5082  03E3  0DAB               	rlf	___lldiv@quotient+1,f
  5083  03E4  0DAC               	rlf	___lldiv@quotient+2,f
  5084  03E5  0DAD               	rlf	___lldiv@quotient+3,f
  5085  03E6  0B89               	decfsz	9,f
  5086  03E7  2BE2               	goto	u845
  5087  03E8  0824               	movf	___lldiv@divisor+3,w
  5088  03E9  0228               	subwf	___lldiv@dividend+3,w
  5089  03EA  1D03               	skipz
  5090  03EB  2BF6               	goto	u855
  5091  03EC  0823               	movf	___lldiv@divisor+2,w
  5092  03ED  0227               	subwf	___lldiv@dividend+2,w
  5093  03EE  1D03               	skipz
  5094  03EF  2BF6               	goto	u855
  5095  03F0  0822               	movf	___lldiv@divisor+1,w
  5096  03F1  0226               	subwf	___lldiv@dividend+1,w
  5097  03F2  1D03               	skipz
  5098  03F3  2BF6               	goto	u855
  5099  03F4  0821               	movf	___lldiv@divisor,w
  5100  03F5  0225               	subwf	___lldiv@dividend,w
  5101  03F6                     u855:	
  5102  03F6  1C03               	skipc
  5103  03F7  2C01               	goto	l1885
  5104  03F8  0821               	movf	___lldiv@divisor,w
  5105  03F9  02A5               	subwf	___lldiv@dividend,f
  5106  03FA  0822               	movf	___lldiv@divisor+1,w
  5107  03FB  3BA6               	subwfb	___lldiv@dividend+1,f
  5108  03FC  0823               	movf	___lldiv@divisor+2,w
  5109  03FD  3BA7               	subwfb	___lldiv@dividend+2,f
  5110  03FE  0824               	movf	___lldiv@divisor+3,w
  5111  03FF  3BA8               	subwfb	___lldiv@dividend+3,f
  5112  0400  142A               	bsf	___lldiv@quotient,0
  5113  0401                     l1885:	
  5114  0401  3001               	movlw	1
  5115  0402                     u865:	
  5116  0402  36A4               	lsrf	___lldiv@divisor+3,f
  5117  0403  0CA3               	rrf	___lldiv@divisor+2,f
  5118  0404  0CA2               	rrf	___lldiv@divisor+1,f
  5119  0405  0CA1               	rrf	___lldiv@divisor,f
  5120  0406  0B89               	decfsz	9,f
  5121  0407  2C02               	goto	u865
  5122  0408  3001               	movlw	1
  5123  0409  02AE               	subwf	___lldiv@counter,f
  5124  040A  1D03               	btfss	3,2
  5125  040B  2BE1               	goto	l1877
  5126  040C                     l1889:	
  5127  040C  082D               	movf	___lldiv@quotient+3,w
  5128  040D  00A4               	movwf	?___lldiv+3
  5129  040E  082C               	movf	___lldiv@quotient+2,w
  5130  040F  00A3               	movwf	?___lldiv+2
  5131  0410  082B               	movf	___lldiv@quotient+1,w
  5132  0411  00A2               	movwf	?___lldiv+1
  5133  0412  082A               	movf	___lldiv@quotient,w
  5134  0413  00A1               	movwf	?___lldiv
  5135  0414  0008               	return
  5136  0415                     __end_of___lldiv:	
  5137                           
  5138                           	psect	text16
  5139  060D                     __ptext16:	
  5140 ;; *************** function _flashRealod *****************
  5141 ;; Defined at:
  5142 ;;		line 90 in file "flash.c"
  5143 ;; Parameters:    Size  Location     Type
  5144 ;;		None
  5145 ;; Auto vars:     Size  Location     Type
  5146 ;;  i               2   11[BANK0 ] unsigned int 
  5147 ;; Return value:  Size  Location     Type
  5148 ;;                  1    wreg      void 
  5149 ;; Registers used:
  5150 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5151 ;; Tracked objects:
  5152 ;;		On entry : 0/0
  5153 ;;		On exit  : 0/0
  5154 ;;		Unchanged: 0/0
  5155 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5156 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5157 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5158 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5159 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5160 ;;Total ram usage:        3 bytes
  5161 ;; Hardware stack levels used:    1
  5162 ;; Hardware stack levels required when called:    6
  5163 ;; This function calls:
  5164 ;;		_flashReadByte
  5165 ;; This function is called by:
  5166 ;;		_main
  5167 ;; This function uses a non-reentrant model
  5168 ;;
  5169                           
  5170                           
  5171                           ;psect for function _flashRealod
  5172  060D                     _flashRealod:	
  5173                           
  5174                           ;flash.c: 92: for (unsigned int i = 0; i < 32; i++){
  5175                           
  5176                           ;incstack = 0
  5177                           ; Regs used in _flashRealod: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5178  060D  0020               	movlb	0	; select bank0
  5179  060E  01AB               	clrf	flashRealod@i
  5180  060F  01AC               	clrf	flashRealod@i+1
  5181  0610                     L1:	
  5182  0610  3000               	movlw	0
  5183  0611  022C               	subwf	flashRealod@i+1,w
  5184  0612  3020               	movlw	32
  5185  0613  1903               	skipnz
  5186  0614  022B               	subwf	flashRealod@i,w
  5187  0615  1803               	btfsc	3,0
  5188  0616  0008               	return
  5189                           
  5190                           ;flash.c: 93: romHolder.array[i] = flashReadByte(i);
  5191  0617  082C               	movf	flashRealod@i+1,w
  5192  0618  00A2               	movwf	flashReadByte@offset+1
  5193  0619  082B               	movf	flashRealod@i,w
  5194  061A  00A1               	movwf	flashReadByte@offset
  5195  061B  3184  24B6  3186   	fcall	_flashReadByte
  5196  061E  0020               	movlb	0	; select bank0
  5197  061F  0821               	movf	?_flashReadByte,w
  5198  0620  00AA               	movwf	??_flashRealod
  5199  0621  082B               	movf	flashRealod@i,w
  5200  0622  3E20               	addlw	(low (_romHolder| (0+256)))& (0+255)
  5201  0623  0086               	movwf	6
  5202  0624  3001               	movlw	1	; select bank2/3
  5203  0625  0087               	movwf	7
  5204  0626  082A               	movf	??_flashRealod,w
  5205  0627  0081               	movwf	1
  5206  0628  3001               	movlw	1
  5207  0629  07AB               	addwf	flashRealod@i,f
  5208  062A  3000               	movlw	0
  5209  062B  3DAC               	addwfc	flashRealod@i+1,f
  5210  062C  2E10               	goto	L1
  5211  062D                     __end_of_flashRealod:	
  5212                           
  5213                           	psect	text17
  5214  04B6                     __ptext17:	
  5215 ;; *************** function _flashReadByte *****************
  5216 ;; Defined at:
  5217 ;;		line 64 in file "flash.c"
  5218 ;; Parameters:    Size  Location     Type
  5219 ;;  offset          2    1[BANK0 ] unsigned int 
  5220 ;; Auto vars:     Size  Location     Type
  5221 ;;  address         2    8[BANK0 ] unsigned int 
  5222 ;;  result          2    6[BANK0 ] unsigned int 
  5223 ;; Return value:  Size  Location     Type
  5224 ;;                  2    1[BANK0 ] unsigned int 
  5225 ;; Registers used:
  5226 ;;		wreg, status,2, status,0
  5227 ;; Tracked objects:
  5228 ;;		On entry : 0/0
  5229 ;;		On exit  : 0/0
  5230 ;;		Unchanged: 0/0
  5231 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5232 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5233 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5234 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5235 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5236 ;;Total ram usage:        9 bytes
  5237 ;; Hardware stack levels used:    1
  5238 ;; Hardware stack levels required when called:    5
  5239 ;; This function calls:
  5240 ;;		Nothing
  5241 ;; This function is called by:
  5242 ;;		_flashRealod
  5243 ;; This function uses a non-reentrant model
  5244 ;;
  5245                           
  5246                           
  5247                           ;psect for function _flashReadByte
  5248  04B6                     _flashReadByte:	
  5249                           
  5250                           ;flash.c: 66: unsigned int address;;flash.c: 68: INTCONbits.GIE = 0;
  5251                           
  5252                           ;incstack = 0
  5253                           ; Regs used in _flashReadByte: [wreg+status,2+status,0]
  5254  04B6  138B               	bcf	11,7	;volatile
  5255                           
  5256                           ;flash.c: 70: PMCON1 = 0x00;
  5257  04B7  0031               	movlb	17	; select bank17
  5258  04B8  0195               	clrf	21	;volsfr
  5259                           
  5260                           ;flash.c: 72: address = (0x2000U - 32) + offset;
  5261  04B9  0020               	movlb	0	; select bank0
  5262  04BA  0821               	movf	flashReadByte@offset,w
  5263  04BB  3EE0               	addlw	224
  5264  04BC  00A8               	movwf	flashReadByte@address
  5265  04BD  301F               	movlw	31
  5266  04BE  3D22               	addwfc	flashReadByte@offset+1,w
  5267  04BF  00A9               	movwf	flashReadByte@address+1
  5268                           
  5269                           ;flash.c: 73: PMADRL = (char) (address >> 0);
  5270  04C0  0828               	movf	flashReadByte@address,w
  5271  04C1  0031               	movlb	17	; select bank17
  5272  04C2  0091               	movwf	17	;volatile
  5273                           
  5274                           ;flash.c: 74: PMADRH = (char) (address >> 8);
  5275  04C3  0020               	movlb	0	; select bank0
  5276  04C4  0829               	movf	flashReadByte@address+1,w
  5277  04C5  0031               	movlb	17	; select bank17
  5278  04C6  0092               	movwf	18	;volatile
  5279                           
  5280                           ;flash.c: 76: PMCON1bits.RD = 1;
  5281  04C7  1415               	bsf	21,0	;volsfr
  5282                           
  5283                           ;flash.c: 78: __nop();
  5284  04C8  0000               	nop
  5285                           
  5286                           ;flash.c: 79: __nop();
  5287  04C9  0000               	nop
  5288                           
  5289                           ;flash.c: 81: unsigned int result = 0;
  5290  04CA  0020               	movlb	0	; select bank0
  5291  04CB  01A6               	clrf	flashReadByte@result
  5292  04CC  01A7               	clrf	flashReadByte@result+1
  5293                           
  5294                           ;flash.c: 82: result = PMDATL;
  5295  04CD  0031               	movlb	17	; select bank17
  5296  04CE  0813               	movf	19,w	;volatile
  5297  04CF  0020               	movlb	0	; select bank0
  5298  04D0  00A3               	movwf	??_flashReadByte
  5299  04D1  01A4               	clrf	??_flashReadByte+1
  5300  04D2  0823               	movf	??_flashReadByte,w
  5301  04D3  00A6               	movwf	flashReadByte@result
  5302  04D4  0824               	movf	??_flashReadByte+1,w
  5303  04D5  00A7               	movwf	flashReadByte@result+1
  5304                           
  5305                           ;flash.c: 83: result|= ( (unsigned) (PMDATH) << 8);
  5306  04D6  0031               	movlb	17	; select bank17
  5307  04D7  0814               	movf	20,w	;volatile
  5308  04D8  0020               	movlb	0	; select bank0
  5309  04D9  00A3               	movwf	??_flashReadByte
  5310  04DA  01A4               	clrf	??_flashReadByte+1
  5311  04DB  0823               	movf	??_flashReadByte,w
  5312  04DC  00A4               	movwf	??_flashReadByte+1
  5313  04DD  01A3               	clrf	??_flashReadByte
  5314  04DE  0823               	movf	??_flashReadByte,w
  5315  04DF  04A6               	iorwf	flashReadByte@result,f
  5316  04E0  0824               	movf	??_flashReadByte+1,w
  5317  04E1  04A7               	iorwf	flashReadByte@result+1,f
  5318                           
  5319                           ;flash.c: 85: INTCONbits.GIE = 1;
  5320  04E2  178B               	bsf	11,7	;volatile
  5321                           
  5322                           ;flash.c: 87: return result;
  5323  04E3  0827               	movf	flashReadByte@result+1,w
  5324  04E4  00A2               	movwf	?_flashReadByte+1
  5325  04E5  0826               	movf	flashReadByte@result,w
  5326  04E6  00A1               	movwf	?_flashReadByte
  5327  04E7  0008               	return
  5328  04E8                     __end_of_flashReadByte:	
  5329                           
  5330                           	psect	intentry
  5331  0004                     __pintentry:	
  5332 ;; *************** function _ISR *****************
  5333 ;; Defined at:
  5334 ;;		line 14 in file "main.c"
  5335 ;; Parameters:    Size  Location     Type
  5336 ;;		None
  5337 ;; Auto vars:     Size  Location     Type
  5338 ;;		None
  5339 ;; Return value:  Size  Location     Type
  5340 ;;                  1    wreg      void 
  5341 ;; Registers used:
  5342 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5343 ;; Tracked objects:
  5344 ;;		On entry : 0/0
  5345 ;;		On exit  : 0/0
  5346 ;;		Unchanged: 0/0
  5347 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5348 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5349 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5350 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5351 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5352 ;;Total ram usage:        0 bytes
  5353 ;; Hardware stack levels used:    1
  5354 ;; Hardware stack levels required when called:    4
  5355 ;; This function calls:
  5356 ;;		_nrf24l01ISR
  5357 ;; This function is called by:
  5358 ;;		Interrupt level 1
  5359 ;; This function uses a non-reentrant model
  5360 ;;
  5361                           
  5362  0004                     _ISR:	
  5363                           
  5364                           ;incstack = 0
  5365  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
  5366                           
  5367                           ; Regs used in _ISR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5368  0005  3180               	pagesel	$
  5369                           
  5370                           ;main.c: 15: if (PIR0bits.INTF){
  5371  0006  0020               	movlb	0	; select bank0
  5372  0007  1C10               	btfss	16,0	;volatile
  5373  0008  280D               	goto	i1l173
  5374                           
  5375                           ;main.c: 16: nrf24l01ISR();
  5376  0009  3185  2548         	fcall	_nrf24l01ISR
  5377                           
  5378                           ;main.c: 17: PIR0bits.INTF = 0;
  5379  000B  0020               	movlb	0	; select bank0
  5380  000C  1010               	bcf	16,0	;volatile
  5381  000D                     i1l173:	
  5382  000D  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
  5383  000E  0009               	retfie
  5384  000F                     __end_of_ISR:	
  5385                           
  5386                           	psect	text19
  5387  0548                     __ptext19:	
  5388 ;; *************** function _nrf24l01ISR *****************
  5389 ;; Defined at:
  5390 ;;		line 323 in file "nrf24l01.c"
  5391 ;; Parameters:    Size  Location     Type
  5392 ;;		None
  5393 ;; Auto vars:     Size  Location     Type
  5394 ;;  status          1    0[BANK0 ] struct .
  5395 ;; Return value:  Size  Location     Type
  5396 ;;                  1    wreg      void 
  5397 ;; Registers used:
  5398 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5399 ;; Tracked objects:
  5400 ;;		On entry : 0/0
  5401 ;;		On exit  : 0/0
  5402 ;;		Unchanged: 0/0
  5403 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5404 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5405 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5406 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5407 ;;      Totals:         1       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5408 ;;Total ram usage:        2 bytes
  5409 ;; Hardware stack levels used:    1
  5410 ;; Hardware stack levels required when called:    3
  5411 ;; This function calls:
  5412 ;;		_exception
  5413 ;;		i1_nrf24l01Send
  5414 ;;		i1_nrf24l01SetRXMode
  5415 ;; This function is called by:
  5416 ;;		_ISR
  5417 ;; This function uses a non-reentrant model
  5418 ;;
  5419                           
  5420                           
  5421                           ;psect for function _nrf24l01ISR
  5422  0548                     _nrf24l01ISR:	
  5423                           
  5424                           ;nrf24l01.c: 325: n_STATUS_t status;;nrf24l01.c: 326: status.byte = nrf24l01Send(0b00000
      +                          000 | 0x07, 0);
  5425                           
  5426                           ;incstack = 0
  5427                           ; Regs used in _nrf24l01ISR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5428  0548  01F1               	clrf	i1nrf24l01Send@data
  5429  0549  3007               	movlw	7
  5430  054A  3186  2648  3185   	fcall	i1_nrf24l01Send
  5431  054D  00FD               	movwf	??_nrf24l01ISR
  5432  054E  087D               	movf	??_nrf24l01ISR,w
  5433  054F  0020               	movlb	0	; select bank0
  5434  0550  00A0               	movwf	nrf24l01ISR@status
  5435                           
  5436                           ;nrf24l01.c: 329: if (status.byte == 0x00){
  5437  0551  0820               	movf	nrf24l01ISR@status,w
  5438  0552  1D03               	btfss	3,2
  5439  0553  2D58               	goto	i1l2263
  5440                           
  5441                           ;nrf24l01.c: 330: exception(1);
  5442  0554  3001               	movlw	1
  5443  0555  3186  2684  3185   	fcall	_exception
  5444  0558                     i1l2263:	
  5445                           
  5446                           ;nrf24l01.c: 331: };nrf24l01.c: 334: if (status.byte == 0xFF){
  5447  0558  0020               	movlb	0	; select bank0
  5448  0559  0A20               	incf	nrf24l01ISR@status,w
  5449  055A  1D03               	btfss	3,2
  5450  055B  2D60               	goto	i1l2267
  5451                           
  5452                           ;nrf24l01.c: 335: exception(2);
  5453  055C  3002               	movlw	2
  5454  055D  3186  2684  3185   	fcall	_exception
  5455  0560                     i1l2267:	
  5456                           
  5457                           ;nrf24l01.c: 336: };nrf24l01.c: 338: if (status.TX_DS){
  5458  0560  0020               	movlb	0	; select bank0
  5459  0561  1EA0               	btfss	nrf24l01ISR@status,5
  5460  0562  2D6B               	goto	i1l2275
  5461                           
  5462                           ;nrf24l01.c: 341: nrf24l01.TXBusy = 0;
  5463  0563  10CB               	bcf	_nrf24l01,1	;volatile
  5464                           
  5465                           ;nrf24l01.c: 344: if (!nrf24l01.RXMode){
  5466  0564  1DCB               	btfss	_nrf24l01,3	;volatile
  5467                           
  5468                           ;nrf24l01.c: 345: if (nrf24l01TXPacketData.ACKRequest){
  5469  0565  1C4C               	btfss	_nrf24l01TXPacketData,0
  5470  0566  2D6B               	goto	i1l2275
  5471                           
  5472                           ;nrf24l01.c: 347: nrf24l01SetRXMode(1);
  5473  0567  3001               	movlw	1
  5474  0568  3184  2481  3185   	fcall	i1_nrf24l01SetRXMode
  5475  056B                     i1l2275:	
  5476                           
  5477                           ;nrf24l01.c: 348: };nrf24l01.c: 349: };nrf24l01.c: 350: };nrf24l01.c: 353: if (status.RX
      +                          _DR){
  5478  056B  0020               	movlb	0	; select bank0
  5479  056C  1B20               	btfsc	nrf24l01ISR@status,6
  5480                           
  5481                           ;nrf24l01.c: 355: nrf24l01.RXPending = 1;
  5482  056D  154B               	bsf	_nrf24l01,2	;volatile
  5483                           
  5484                           ;nrf24l01.c: 356: };nrf24l01.c: 359: nrf24l01Send(0b00100000 | 0x07, status.byte);
  5485  056E  0820               	movf	nrf24l01ISR@status,w
  5486  056F  00FD               	movwf	??_nrf24l01ISR
  5487  0570  087D               	movf	??_nrf24l01ISR,w
  5488  0571  00F1               	movwf	i1nrf24l01Send@data
  5489  0572  3027               	movlw	39
  5490  0573  3186  2648         	fcall	i1_nrf24l01Send
  5491  0575  0008               	return
  5492  0576                     __end_of_nrf24l01ISR:	
  5493                           
  5494                           	psect	text20
  5495  0481                     __ptext20:	
  5496 ;; *************** function i1_nrf24l01SetRXMode *****************
  5497 ;; Defined at:
  5498 ;;		line 74 in file "nrf24l01.c"
  5499 ;; Parameters:    Size  Location     Type
  5500 ;;  rxMode          1    wreg     unsigned char 
  5501 ;; Auto vars:     Size  Location     Type
  5502 ;;  rxMode          1    6[COMMON] unsigned char 
  5503 ;;  nrf24l01SetR    1    5[COMMON] struct .
  5504 ;; Return value:  Size  Location     Type
  5505 ;;                  1    wreg      void 
  5506 ;; Registers used:
  5507 ;;		wreg, status,2, status,0, pclath, cstack
  5508 ;; Tracked objects:
  5509 ;;		On entry : 0/0
  5510 ;;		On exit  : 0/0
  5511 ;;		Unchanged: 0/0
  5512 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5513 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5514 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5515 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5516 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5517 ;;Total ram usage:        3 bytes
  5518 ;; Hardware stack levels used:    1
  5519 ;; Hardware stack levels required when called:    2
  5520 ;; This function calls:
  5521 ;;		i1_nrf24l01Send
  5522 ;; This function is called by:
  5523 ;;		_nrf24l01ISR
  5524 ;; This function uses a non-reentrant model
  5525 ;;
  5526                           
  5527                           
  5528                           ;psect for function i1_nrf24l01SetRXMode
  5529  0481                     i1_nrf24l01SetRXMode:	
  5530                           
  5531                           ;incstack = 0
  5532                           ; Regs used in i1_nrf24l01SetRXMode: [wreg+status,2+status,0+pclath+cstack]
  5533                           ;i1nrf24l01SetRXMode@rxMode stored from wreg
  5534  0481  00F6               	movwf	i1nrf24l01SetRXMode@rxMode
  5535                           
  5536                           ;nrf24l01.c: 76: n_CONFIG_t config;;nrf24l01.c: 79: config.byte = nrf24l01Send(0b0000000
      +                          0 | 0x00, 0);
  5537  0482  01F1               	clrf	i1nrf24l01Send@data
  5538  0483  3000               	movlw	0
  5539  0484  3186  2648  3184   	fcall	i1_nrf24l01Send
  5540  0487  00F4               	movwf	??i1_nrf24l01SetRXMode
  5541  0488  0874               	movf	??i1_nrf24l01SetRXMode,w
  5542  0489  00F5               	movwf	i1nrf24l01SetRXMode@config
  5543                           
  5544                           ;nrf24l01.c: 82: if (config.PRIM_RX != rxMode){
  5545  048A  0875               	movf	i1nrf24l01SetRXMode@config,w
  5546  048B  3901               	andlw	1
  5547  048C  0676               	xorwf	i1nrf24l01SetRXMode@rxMode,w
  5548  048D  1903               	skipnz
  5549  048E  2CAF               	goto	i1l2243
  5550                           
  5551                           ;nrf24l01.c: 85: PORTAbits.RA0 = 0;
  5552  048F  0020               	movlb	0	; select bank0
  5553  0490  100C               	bcf	12,0	;volatile
  5554                           
  5555                           ;nrf24l01.c: 86: _delay((unsigned long)((200)*(16000000/4000000.0)));
  5556  0491  30A0               	movlw	160
  5557  0492                     u179_27:	
  5558  0492  3200               	nop2
  5559  0493  0B89               	decfsz	9,f
  5560  0494  2C92               	goto	u179_27
  5561                           
  5562                           ;nrf24l01.c: 93: config.PRIM_RX = rxMode;
  5563  0495  0876               	movf	i1nrf24l01SetRXMode@rxMode,w
  5564  0496  3901               	andlw	1
  5565  0497  1075               	bcf	i1nrf24l01SetRXMode@config,0
  5566  0498  1D03               	skipz
  5567  0499  1475               	bsf	i1nrf24l01SetRXMode@config,0
  5568                           
  5569                           ;nrf24l01.c: 94: nrf24l01Send(0b00100000 | 0x00, config.byte);
  5570  049A  0875               	movf	i1nrf24l01SetRXMode@config,w
  5571  049B  00F4               	movwf	??i1_nrf24l01SetRXMode
  5572  049C  0874               	movf	??i1_nrf24l01SetRXMode,w
  5573  049D  00F1               	movwf	i1nrf24l01Send@data
  5574  049E  3020               	movlw	32
  5575  049F  3186  2648  3184   	fcall	i1_nrf24l01Send
  5576                           
  5577                           ;nrf24l01.c: 97: _delay((unsigned long)((200)*(16000000/4000000.0)));
  5578  04A2  30A0               	movlw	160
  5579  04A3                     u180_27:	
  5580  04A3  3200               	nop2
  5581  04A4  0B89               	decfsz	9,f
  5582  04A5  2CA3               	goto	u180_27
  5583                           
  5584                           ;nrf24l01.c: 100: if (rxMode){
  5585  04A6  0876               	movf	i1nrf24l01SetRXMode@rxMode,w
  5586  04A7  1903               	btfsc	3,2
  5587  04A8  2CAF               	goto	i1l2243
  5588                           
  5589                           ;nrf24l01.c: 101: PORTAbits.RA0 = 1;
  5590  04A9  0020               	movlb	0	; select bank0
  5591  04AA  140C               	bsf	12,0	;volatile
  5592                           
  5593                           ;nrf24l01.c: 102: _delay((unsigned long)((200)*(16000000/4000000.0)));
  5594  04AB  30A0               	movlw	160
  5595  04AC                     u181_27:	
  5596  04AC  3200               	nop2
  5597  04AD  0B89               	decfsz	9,f
  5598  04AE  2CAC               	goto	u181_27
  5599  04AF                     i1l2243:	
  5600                           
  5601                           ;nrf24l01.c: 103: };nrf24l01.c: 104: };nrf24l01.c: 107: nrf24l01.RXMode = rxMode;
  5602  04AF  0876               	movf	i1nrf24l01SetRXMode@rxMode,w
  5603  04B0  3901               	andlw	1
  5604  04B1  0020               	movlb	0	; select bank0
  5605  04B2  11CB               	bcf	_nrf24l01,3	;volatile
  5606  04B3  1D03               	skipz
  5607  04B4  15CB               	bsf	_nrf24l01,3	;volatile
  5608  04B5  0008               	return
  5609  04B6                     __end_ofi1_nrf24l01SetRXMode:	
  5610                           
  5611                           	psect	text21
  5612  0648                     __ptext21:	
  5613 ;; *************** function i1_nrf24l01Send *****************
  5614 ;; Defined at:
  5615 ;;		line 19 in file "nrf24l01.c"
  5616 ;; Parameters:    Size  Location     Type
  5617 ;;  command         1    wreg     unsigned char 
  5618 ;;  data            1    1[COMMON] unsigned char 
  5619 ;; Auto vars:     Size  Location     Type
  5620 ;;  command         1    3[COMMON] unsigned char 
  5621 ;; Return value:  Size  Location     Type
  5622 ;;                  1    wreg      unsigned char 
  5623 ;; Registers used:
  5624 ;;		wreg, status,2, status,0, pclath, cstack
  5625 ;; Tracked objects:
  5626 ;;		On entry : 0/0
  5627 ;;		On exit  : 0/0
  5628 ;;		Unchanged: 0/0
  5629 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5630 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5631 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5632 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5633 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5634 ;;Total ram usage:        3 bytes
  5635 ;; Hardware stack levels used:    1
  5636 ;; Hardware stack levels required when called:    1
  5637 ;; This function calls:
  5638 ;;		_enableInterrupts
  5639 ;;		_nrf24l01SPIEnd
  5640 ;;		_nrf24l01SPISend
  5641 ;;		_nrf24l01SPIStart
  5642 ;; This function is called by:
  5643 ;;		_nrf24l01ISR
  5644 ;;		i1_nrf24l01SetRXMode
  5645 ;; This function uses a non-reentrant model
  5646 ;;
  5647                           
  5648                           
  5649                           ;psect for function i1_nrf24l01Send
  5650  0648                     i1_nrf24l01Send:	
  5651                           
  5652                           ;incstack = 0
  5653                           ; Regs used in i1_nrf24l01Send: [wreg+status,2+status,0+pclath+cstack]
  5654                           ;i1nrf24l01Send@command stored from wreg
  5655  0648  00F3               	movwf	i1nrf24l01Send@command
  5656                           
  5657                           ;nrf24l01.c: 22: enableInterrupts(0);
  5658  0649  3000               	movlw	0
  5659  064A  3186  26A5  3186   	fcall	_enableInterrupts
  5660                           
  5661                           ;nrf24l01.c: 25: nrf24l01SPIStart();
  5662  064D  3186  26AD  3186   	fcall	_nrf24l01SPIStart
  5663                           
  5664                           ;nrf24l01.c: 28: nrf24l01SPISend(command);
  5665  0650  0873               	movf	i1nrf24l01Send@command,w
  5666  0651  3186  2691  3186   	fcall	_nrf24l01SPISend
  5667                           
  5668                           ;nrf24l01.c: 31: data = nrf24l01SPISend(data);
  5669  0654  0871               	movf	i1nrf24l01Send@data,w
  5670  0655  3186  2691  3186   	fcall	_nrf24l01SPISend
  5671  0658  00F2               	movwf	??i1_nrf24l01Send
  5672  0659  0872               	movf	??i1_nrf24l01Send,w
  5673  065A  00F1               	movwf	i1nrf24l01Send@data
  5674                           
  5675                           ;nrf24l01.c: 34: nrf24l01SPIEnd();
  5676  065B  3186  26B4  3186   	fcall	_nrf24l01SPIEnd
  5677                           
  5678                           ;nrf24l01.c: 37: enableInterrupts(1);
  5679  065E  3001               	movlw	1
  5680  065F  3186  26A5         	fcall	_enableInterrupts
  5681                           
  5682                           ;nrf24l01.c: 39: return data;
  5683  0661  0871               	movf	i1nrf24l01Send@data,w
  5684  0662  0008               	return
  5685  0663                     __end_ofi1_nrf24l01Send:	
  5686                           
  5687                           	psect	text22
  5688  06AD                     __ptext22:	
  5689 ;; *************** function _nrf24l01SPIStart *****************
  5690 ;; Defined at:
  5691 ;;		line 38 in file "interface.c"
  5692 ;; Parameters:    Size  Location     Type
  5693 ;;		None
  5694 ;; Auto vars:     Size  Location     Type
  5695 ;;		None
  5696 ;; Return value:  Size  Location     Type
  5697 ;;                  1    wreg      void 
  5698 ;; Registers used:
  5699 ;;		wreg
  5700 ;; Tracked objects:
  5701 ;;		On entry : 0/0
  5702 ;;		On exit  : 0/0
  5703 ;;		Unchanged: 0/0
  5704 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5705 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5706 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5707 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5708 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5709 ;;Total ram usage:        0 bytes
  5710 ;; Hardware stack levels used:    1
  5711 ;; Hardware stack levels required when called:    5
  5712 ;; This function calls:
  5713 ;;		Nothing
  5714 ;; This function is called by:
  5715 ;;		_nrf24l01Send
  5716 ;;		_nrf24l01SendString
  5717 ;;		i1_nrf24l01Send
  5718 ;;		_nrf24l01SetTXAddress
  5719 ;;		_nrf24l01ReceiveString
  5720 ;; This function uses a non-reentrant model
  5721 ;;
  5722                           
  5723                           
  5724                           ;psect for function _nrf24l01SPIStart
  5725  06AD                     _nrf24l01SPIStart:	
  5726                           
  5727                           ;interface.c: 39: PORTAbits.RA1 = 0;
  5728                           
  5729                           ;incstack = 0
  5730                           ; Regs used in _nrf24l01SPIStart: [wreg]
  5731  06AD  0020               	movlb	0	; select bank0
  5732  06AE  108C               	bcf	12,1	;volatile
  5733                           
  5734                           ;interface.c: 40: _delay((unsigned long)((10)*(16000000/4000000.0)));
  5735  06AF  300D               	movlw	13
  5736  06B0                     u182_27:	
  5737  06B0  0B89               	decfsz	9,f
  5738  06B1  2EB0               	goto	u182_27
  5739  06B2  0000               	nop
  5740  06B3  0008               	return
  5741  06B4                     __end_of_nrf24l01SPIStart:	
  5742                           
  5743                           	psect	text23
  5744  0691                     __ptext23:	
  5745 ;; *************** function _nrf24l01SPISend *****************
  5746 ;; Defined at:
  5747 ;;		line 27 in file "interface.c"
  5748 ;; Parameters:    Size  Location     Type
  5749 ;;  data            1    wreg     unsigned char 
  5750 ;; Auto vars:     Size  Location     Type
  5751 ;;  data            1    0[COMMON] unsigned char 
  5752 ;; Return value:  Size  Location     Type
  5753 ;;                  1    wreg      unsigned char 
  5754 ;; Registers used:
  5755 ;;		wreg
  5756 ;; Tracked objects:
  5757 ;;		On entry : 0/0
  5758 ;;		On exit  : 0/0
  5759 ;;		Unchanged: 0/0
  5760 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5761 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5762 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5763 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5764 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5765 ;;Total ram usage:        0 bytes
  5766 ;; Hardware stack levels used:    1
  5767 ;; Hardware stack levels required when called:    5
  5768 ;; This function calls:
  5769 ;;		Nothing
  5770 ;; This function is called by:
  5771 ;;		_nrf24l01Send
  5772 ;;		_nrf24l01SendString
  5773 ;;		i1_nrf24l01Send
  5774 ;;		_nrf24l01SetTXAddress
  5775 ;;		_nrf24l01ReceiveStringPart
  5776 ;;		_nrf24l01ReceiveString
  5777 ;; This function uses a non-reentrant model
  5778 ;;
  5779                           
  5780                           
  5781                           ;psect for function _nrf24l01SPISend
  5782  0691                     _nrf24l01SPISend:	
  5783                           
  5784                           ;incstack = 0
  5785                           ; Regs used in _nrf24l01SPISend: [wreg]
  5786                           ;nrf24l01SPISend@data stored from wreg
  5787  0691  00F0               	movwf	nrf24l01SPISend@data
  5788                           
  5789                           ;interface.c: 28: SSP1BUF = data;
  5790  0692  0870               	movf	nrf24l01SPISend@data,w
  5791  0693  0024               	movlb	4	; select bank4
  5792  0694  0091               	movwf	17	;volatile
  5793  0695                     i1l74:	
  5794                           ;interface.c: 30: while (!SSP1STATbits.BF){
  5795                           
  5796  0695  0024               	movlb	4	; select bank4
  5797  0696  1814               	btfsc	20,0	;volatile
  5798  0697  2E9A               	goto	i1l1795
  5799                           
  5800                           ;interface.c: 31: __nop();
  5801  0698  0000               	nop
  5802  0699  2E95               	goto	i1l74
  5803  069A                     i1l1795:	
  5804                           
  5805                           ;interface.c: 32: };interface.c: 34: return SSP1BUF;
  5806  069A  0811               	movf	17,w	;volatile
  5807  069B  0008               	return
  5808  069C                     __end_of_nrf24l01SPISend:	
  5809                           
  5810                           	psect	text24
  5811  06B4                     __ptext24:	
  5812 ;; *************** function _nrf24l01SPIEnd *****************
  5813 ;; Defined at:
  5814 ;;		line 44 in file "interface.c"
  5815 ;; Parameters:    Size  Location     Type
  5816 ;;		None
  5817 ;; Auto vars:     Size  Location     Type
  5818 ;;		None
  5819 ;; Return value:  Size  Location     Type
  5820 ;;                  1    wreg      void 
  5821 ;; Registers used:
  5822 ;;		wreg
  5823 ;; Tracked objects:
  5824 ;;		On entry : 0/0
  5825 ;;		On exit  : 0/0
  5826 ;;		Unchanged: 0/0
  5827 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5828 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5829 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5830 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5831 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5832 ;;Total ram usage:        0 bytes
  5833 ;; Hardware stack levels used:    1
  5834 ;; Hardware stack levels required when called:    5
  5835 ;; This function calls:
  5836 ;;		Nothing
  5837 ;; This function is called by:
  5838 ;;		_nrf24l01Send
  5839 ;;		_nrf24l01SendString
  5840 ;;		i1_nrf24l01Send
  5841 ;;		_nrf24l01ReceiveString
  5842 ;; This function uses a non-reentrant model
  5843 ;;
  5844                           
  5845                           
  5846                           ;psect for function _nrf24l01SPIEnd
  5847  06B4                     _nrf24l01SPIEnd:	
  5848                           
  5849                           ;interface.c: 45: _delay((unsigned long)((10)*(16000000/4000000.0)));
  5850                           
  5851                           ;incstack = 0
  5852                           ; Regs used in _nrf24l01SPIEnd: [wreg]
  5853  06B4  300D               	movlw	13
  5854  06B5                     u183_27:	
  5855  06B5  0B89               	decfsz	9,f
  5856  06B6  2EB5               	goto	u183_27
  5857  06B7  0000               	nop
  5858                           
  5859                           ;interface.c: 46: PORTAbits.RA1 = 1;
  5860  06B8  0020               	movlb	0	; select bank0
  5861  06B9  148C               	bsf	12,1	;volatile
  5862  06BA  0008               	return
  5863  06BB                     __end_of_nrf24l01SPIEnd:	
  5864                           
  5865                           	psect	text25
  5866  06A5                     __ptext25:	
  5867 ;; *************** function _enableInterrupts *****************
  5868 ;; Defined at:
  5869 ;;		line 50 in file "interface.c"
  5870 ;; Parameters:    Size  Location     Type
  5871 ;;  enable          1    wreg     unsigned char 
  5872 ;; Auto vars:     Size  Location     Type
  5873 ;;  enable          1    0[COMMON] unsigned char 
  5874 ;; Return value:  Size  Location     Type
  5875 ;;                  1    wreg      void 
  5876 ;; Registers used:
  5877 ;;		wreg, status,0
  5878 ;; Tracked objects:
  5879 ;;		On entry : 0/0
  5880 ;;		On exit  : 0/0
  5881 ;;		Unchanged: 0/0
  5882 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5883 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5884 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5885 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5886 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5887 ;;Total ram usage:        0 bytes
  5888 ;; Hardware stack levels used:    1
  5889 ;; Hardware stack levels required when called:    5
  5890 ;; This function calls:
  5891 ;;		Nothing
  5892 ;; This function is called by:
  5893 ;;		_nrf24l01Send
  5894 ;;		_nrf24l01SendString
  5895 ;;		i1_nrf24l01Send
  5896 ;; This function uses a non-reentrant model
  5897 ;;
  5898                           
  5899                           
  5900                           ;psect for function _enableInterrupts
  5901  06A5                     _enableInterrupts:	
  5902                           
  5903                           ;incstack = 0
  5904                           ; Regs used in _enableInterrupts: [wreg+status,0]
  5905                           ;enableInterrupts@enable stored from wreg
  5906  06A5  00F0               	movwf	enableInterrupts@enable
  5907                           
  5908                           ;interface.c: 51: PIE0bits.INTE = enable;
  5909  06A6  0C70               	rrf	enableInterrupts@enable,w
  5910  06A7  0021               	movlb	1	; select bank1
  5911  06A8  1C03               	skipc
  5912  06A9  1010               	bcf	16,0	;volatile
  5913  06AA  1803               	skipnc
  5914  06AB  1410               	bsf	16,0	;volatile
  5915  06AC  0008               	return
  5916  06AD                     __end_of_enableInterrupts:	
  5917                           
  5918                           	psect	text26
  5919  0684                     __ptext26:	
  5920 ;; *************** function _exception *****************
  5921 ;; Defined at:
  5922 ;;		line 54 in file "interface.c"
  5923 ;; Parameters:    Size  Location     Type
  5924 ;;  exception       1    wreg     unsigned char 
  5925 ;; Auto vars:     Size  Location     Type
  5926 ;;  exception       1   12[COMMON] unsigned char 
  5927 ;; Return value:  Size  Location     Type
  5928 ;;                  1    wreg      void 
  5929 ;; Registers used:
  5930 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5931 ;; Tracked objects:
  5932 ;;		On entry : 0/0
  5933 ;;		On exit  : 0/0
  5934 ;;		Unchanged: 0/0
  5935 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5936 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5937 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5938 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5939 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5940 ;;Total ram usage:        3 bytes
  5941 ;; Hardware stack levels used:    1
  5942 ;; Hardware stack levels required when called:    2
  5943 ;; This function calls:
  5944 ;;		_flashUpdate
  5945 ;; This function is called by:
  5946 ;;		_nrf24l01ISR
  5947 ;; This function uses a non-reentrant model
  5948 ;;
  5949                           
  5950                           
  5951                           ;psect for function _exception
  5952  0684                     _exception:	
  5953                           
  5954                           ;incstack = 0
  5955                           ; Regs used in _exception: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5956                           ;exception@exception stored from wreg
  5957  0684  00FC               	movwf	exception@exception
  5958                           
  5959                           ;interface.c: 55: romData.bootMode = exception;
  5960  0685  087C               	movf	exception@exception,w
  5961  0686  00FA               	movwf	??_exception
  5962  0687  01FB               	clrf	??_exception+1
  5963  0688  087A               	movf	??_exception,w
  5964  0689  0021               	movlb	1	; select bank1
  5965  068A  00B1               	movwf	(_romData^(0+128)+17)
  5966  068B  087B               	movf	??_exception+1,w
  5967  068C  00B2               	movwf	((_romData+1)^(0+128)+17)
  5968                           
  5969                           ;interface.c: 56: flashUpdate();
  5970  068D  3185  25CC         	fcall	_flashUpdate
  5971  068F  0001               	reset	;# 
  5972  0690  0008               	return
  5973  0691                     __end_of_exception:	
  5974                           
  5975                           	psect	text27
  5976  05CC                     __ptext27:	
  5977 ;; *************** function _flashUpdate *****************
  5978 ;; Defined at:
  5979 ;;		line 97 in file "flash.c"
  5980 ;; Parameters:    Size  Location     Type
  5981 ;;		None
  5982 ;; Auto vars:     Size  Location     Type
  5983 ;;  i               2    8[COMMON] unsigned int 
  5984 ;; Return value:  Size  Location     Type
  5985 ;;                  1    wreg      void 
  5986 ;; Registers used:
  5987 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5988 ;; Tracked objects:
  5989 ;;		On entry : 0/0
  5990 ;;		On exit  : 0/0
  5991 ;;		Unchanged: 0/0
  5992 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5993 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5994 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5995 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5996 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5997 ;;Total ram usage:        4 bytes
  5998 ;; Hardware stack levels used:    1
  5999 ;; Hardware stack levels required when called:    1
  6000 ;; This function calls:
  6001 ;;		_flashWriteByte
  6002 ;; This function is called by:
  6003 ;;		_exception
  6004 ;; This function uses a non-reentrant model
  6005 ;;
  6006                           
  6007                           
  6008                           ;psect for function _flashUpdate
  6009  05CC                     _flashUpdate:	
  6010                           
  6011                           ;flash.c: 98: for (unsigned int i = 0; i < 32; i++){
  6012                           
  6013                           ;incstack = 0
  6014                           ; Regs used in _flashUpdate: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6015  05CC  01F8               	clrf	flashUpdate@i
  6016  05CD  01F9               	clrf	flashUpdate@i+1
  6017  05CE                     L2:	
  6018  05CE  3000               	movlw	0
  6019  05CF  0279               	subwf	flashUpdate@i+1,w
  6020  05D0  3020               	movlw	32
  6021  05D1  1903               	skipnz
  6022  05D2  0278               	subwf	flashUpdate@i,w
  6023  05D3  1803               	btfsc	3,0
  6024  05D4  0008               	return
  6025                           
  6026                           ;flash.c: 99: flashWriteByte(i, romHolder.array[i]);
  6027  05D5  0879               	movf	flashUpdate@i+1,w
  6028  05D6  00F1               	movwf	flashWriteByte@offset+1
  6029  05D7  0878               	movf	flashUpdate@i,w
  6030  05D8  00F0               	movwf	flashWriteByte@offset
  6031  05D9  0878               	movf	flashUpdate@i,w
  6032  05DA  3E20               	addlw	(low (_romHolder| (0+256)))& (0+255)
  6033  05DB  0086               	movwf	6
  6034  05DC  3001               	movlw	1	; select bank2/3
  6035  05DD  0087               	movwf	7
  6036  05DE  0801               	movf	1,w
  6037  05DF  00F6               	movwf	??_flashUpdate
  6038  05E0  01F7               	clrf	??_flashUpdate+1
  6039  05E1  0876               	movf	??_flashUpdate,w
  6040  05E2  00F2               	movwf	flashWriteByte@data
  6041  05E3  0877               	movf	??_flashUpdate+1,w
  6042  05E4  00F3               	movwf	flashWriteByte@data+1
  6043  05E5  3185  2518  3185   	fcall	_flashWriteByte
  6044  05E8  3001               	movlw	1
  6045  05E9  07F8               	addwf	flashUpdate@i,f
  6046  05EA  3000               	movlw	0
  6047  05EB  3DF9               	addwfc	flashUpdate@i+1,f
  6048  05EC  2DCE               	goto	L2
  6049  05ED                     __end_of_flashUpdate:	
  6050                           
  6051                           	psect	text28
  6052  0518                     __ptext28:	
  6053 ;; *************** function _flashWriteByte *****************
  6054 ;; Defined at:
  6055 ;;		line 8 in file "flash.c"
  6056 ;; Parameters:    Size  Location     Type
  6057 ;;  offset          2    0[COMMON] unsigned int 
  6058 ;;  data            2    2[COMMON] unsigned int 
  6059 ;; Auto vars:     Size  Location     Type
  6060 ;;  address         2    4[COMMON] unsigned int 
  6061 ;; Return value:  Size  Location     Type
  6062 ;;                  1    wreg      void 
  6063 ;; Registers used:
  6064 ;;		wreg, status,2, status,0
  6065 ;; Tracked objects:
  6066 ;;		On entry : 0/0
  6067 ;;		On exit  : 0/0
  6068 ;;		Unchanged: 0/0
  6069 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6070 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6071 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6072 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6073 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6074 ;;Total ram usage:        6 bytes
  6075 ;; Hardware stack levels used:    1
  6076 ;; This function calls:
  6077 ;;		Nothing
  6078 ;; This function is called by:
  6079 ;;		_flashUpdate
  6080 ;; This function uses a non-reentrant model
  6081 ;;
  6082                           
  6083                           
  6084                           ;psect for function _flashWriteByte
  6085  0518                     _flashWriteByte:	
  6086                           
  6087                           ;flash.c: 10: unsigned int address;;flash.c: 12: INTCONbits.GIE = 0;
  6088                           
  6089                           ;incstack = 0
  6090                           ; Regs used in _flashWriteByte: [wreg+status,2+status,0]
  6091  0518  138B               	bcf	11,7	;volatile
  6092                           
  6093                           ;flash.c: 15: PMCON1 = 0x00;
  6094  0519  0031               	movlb	17	; select bank17
  6095  051A  0195               	clrf	21	;volsfr
  6096                           
  6097                           ;flash.c: 17: address = (0x2000U - 32) + offset;
  6098  051B  0870               	movf	flashWriteByte@offset,w
  6099  051C  3EE0               	addlw	224
  6100  051D  00F4               	movwf	flashWriteByte@address
  6101  051E  301F               	movlw	31
  6102  051F  3D71               	addwfc	flashWriteByte@offset+1,w
  6103  0520  00F5               	movwf	flashWriteByte@address+1
  6104                           
  6105                           ;flash.c: 18: PMADRL = (char) (address >> 0);
  6106  0521  0874               	movf	flashWriteByte@address,w
  6107  0522  0091               	movwf	17	;volatile
  6108                           
  6109                           ;flash.c: 19: PMADRH = (char) (address >> 8);
  6110  0523  0875               	movf	flashWriteByte@address+1,w
  6111  0524  0092               	movwf	18	;volatile
  6112                           
  6113                           ;flash.c: 21: PMCON1bits.FREE = 1;
  6114  0525  1615               	bsf	21,4	;volsfr
  6115                           
  6116                           ;flash.c: 22: PMCON1bits.WREN = 1;
  6117  0526  1515               	bsf	21,2	;volsfr
  6118                           
  6119                           ;flash.c: 24: PMCON2 = 0x55;
  6120  0527  3055               	movlw	85
  6121  0528  0096               	movwf	22	;volsfr
  6122                           
  6123                           ;flash.c: 25: PMCON2 = 0xAA;
  6124  0529  30AA               	movlw	170
  6125  052A  0096               	movwf	22	;volsfr
  6126                           
  6127                           ;flash.c: 27: PMCON1bits.WR = 1;
  6128  052B  1495               	bsf	21,1	;volsfr
  6129                           
  6130                           ;flash.c: 29: __nop();
  6131  052C  0000               	nop
  6132                           
  6133                           ;flash.c: 30: __nop();
  6134  052D  0000               	nop
  6135                           
  6136                           ;flash.c: 32: PMCON1bits.WREN = 0;
  6137  052E  0031               	movlb	17	; select bank17
  6138  052F  1115               	bcf	21,2	;volsfr
  6139                           
  6140                           ;flash.c: 36: PMCON1 = 0x00;
  6141  0530  0195               	clrf	21	;volsfr
  6142                           
  6143                           ;flash.c: 38: PMADRL = (char) (address >> 0);
  6144  0531  0874               	movf	flashWriteByte@address,w
  6145  0532  0091               	movwf	17	;volatile
  6146                           
  6147                           ;flash.c: 39: PMADRH = (char) (address >> 8);
  6148  0533  0875               	movf	flashWriteByte@address+1,w
  6149  0534  0092               	movwf	18	;volatile
  6150                           
  6151                           ;flash.c: 41: PMCON1bits.FREE = 0;
  6152  0535  1215               	bcf	21,4	;volsfr
  6153                           
  6154                           ;flash.c: 42: PMCON1bits.LWLO = 1;
  6155  0536  1695               	bsf	21,5	;volsfr
  6156                           
  6157                           ;flash.c: 43: PMCON1bits.WREN = 1;
  6158  0537  1515               	bsf	21,2	;volsfr
  6159                           
  6160                           ;flash.c: 45: PMDATL = (data >> 0);
  6161  0538  0872               	movf	flashWriteByte@data,w
  6162  0539  0093               	movwf	19	;volatile
  6163                           
  6164                           ;flash.c: 46: PMDATH = (data >> 8);
  6165  053A  0873               	movf	flashWriteByte@data+1,w
  6166  053B  0094               	movwf	20	;volatile
  6167                           
  6168                           ;flash.c: 48: PMCON1bits.LWLO = 0;
  6169  053C  1295               	bcf	21,5	;volsfr
  6170                           
  6171                           ;flash.c: 50: PMCON2 = 0x55;
  6172  053D  3055               	movlw	85
  6173  053E  0096               	movwf	22	;volsfr
  6174                           
  6175                           ;flash.c: 51: PMCON2 = 0xAA;
  6176  053F  30AA               	movlw	170
  6177  0540  0096               	movwf	22	;volsfr
  6178                           
  6179                           ;flash.c: 53: PMCON1bits.WR = 1;
  6180  0541  1495               	bsf	21,1	;volsfr
  6181                           
  6182                           ;flash.c: 55: __nop();
  6183  0542  0000               	nop
  6184                           
  6185                           ;flash.c: 56: __nop();
  6186  0543  0000               	nop
  6187                           
  6188                           ;flash.c: 58: PMCON1bits.WREN = 0;
  6189  0544  0031               	movlb	17	; select bank17
  6190  0545  1115               	bcf	21,2	;volsfr
  6191                           
  6192                           ;flash.c: 61: INTCONbits.GIE = 1;
  6193  0546  178B               	bsf	11,7	;volatile
  6194  0547  0008               	return
  6195  0548                     __end_of_flashWriteByte:	
  6196  007E                     btemp	set	126	;btemp
  6197  007E                     int$flags	set	126
  6198  007E                     wtemp0	set	126


Data Sizes:
    Strings     31
    Constant    25
    Data        0
    BSS         121
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     39      77
    BANK1            80      0      51
    BANK2            80      0      32
    BANK3            80      0       0
    BANK4            80      0       0
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    strcpy@from	PTR const unsigned char  size(2) Largest target is 19
		 -> STR_6(CODE[5]), romData.name(BANK1[16]), nrf24l01TXName(BANK1[16]), STR_5(CODE[6]), 
		 -> STR_4(CODE[6]), STR_3(CODE[5]), STR_2(CODE[5]), nrf24l01TXValue(BANK0[8]), 
		 -> STR_1(CODE[4]), nrf24l01TXTopic(BANK0[8]), romData(BANK1[19]), 

    strcpy@to	PTR unsigned char  size(1) Largest target is 16
		 -> nrf24l01RXName(BANK1[16]), nrf24l01RXValue(BANK0[8]), nrf24l01RXTopic(BANK0[8]), nrf24l01TXName(BANK1[16]), 
		 -> nrf24l01TXTopic(BANK0[8]), 

    strcpy@cp	PTR unsigned char  size(1) Largest target is 16
		 -> nrf24l01RXName(BANK1[16]), nrf24l01RXValue(BANK0[8]), nrf24l01RXTopic(BANK0[8]), nrf24l01TXName(BANK1[16]), 
		 -> nrf24l01TXTopic(BANK0[8]), 

    utoa@buf	PTR unsigned char  size(1) Largest target is 8
		 -> nrf24l01TXValue(BANK0[8]), 

    sp__itoa	PTR unsigned char  size(1) Largest target is 0

    sp__memset	PTR void  size(1) Largest target is 16
		 -> nrf24l01RXName(BANK1[16]), nrf24l01RXValue(BANK0[8]), nrf24l01RXTopic(BANK0[8]), 

    sp__utoa	PTR unsigned char  size(1) Largest target is 8
		 -> nrf24l01TXValue(BANK0[8]), 

    sp__strcpy	PTR unsigned char  size(1) Largest target is 16
		 -> nrf24l01RXName(BANK1[16]), nrf24l01RXValue(BANK0[8]), nrf24l01RXTopic(BANK0[8]), nrf24l01TXName(BANK1[16]), 
		 -> nrf24l01TXTopic(BANK0[8]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    _ISR->_nrf24l01ISR
    _nrf24l01ISR->_exception
    i1_nrf24l01SetRXMode->i1_nrf24l01Send
    _exception->_flashUpdate
    _flashUpdate->_flashWriteByte

Critical Paths under _main in BANK0

    _main->_utoa
    _nrf24l01Init->_nrf24l01InitRegisters
    _nrf24l01InitRegisters->_nrf24l01Send
    _loop->_utoa
    _utoa->_getADCValue
    _nrf24l01SendString->_nrf24l01SetRXMode
    _nrf24l01SetRXMode->_nrf24l01Send
    _getADCValue->___lldiv
    _flashRealod->_flashReadByte

Critical Paths under _ISR in BANK0

    _ISR->_nrf24l01ISR

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 1     1      0   14708
                                             38 BANK0      1     1      0
                        _flashRealod
                               _loop
                       _nrf24l01Init
                 _nrf24l01SendString
                              _sleep
                             _strcpy
                               _utoa
 ---------------------------------------------------------------------------------
 (1) _nrf24l01Init                                         3     3      0    1532
                                             13 BANK0      3     3      0
              _nrf24l01InitRegisters
              _nrf24l01InterfaceInit
 ---------------------------------------------------------------------------------
 (2) _nrf24l01InterfaceInit                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _nrf24l01InitRegisters                               10    10      0    1510
                                              4 BANK0      9     9      0
                       _nrf24l01Send
 ---------------------------------------------------------------------------------
 (1) _loop                                                 0     0      0    6917
                        _getADCValue
                 _nrf24l01SendString
                              _sleep
                             _strcpy
                               _utoa
 ---------------------------------------------------------------------------------
 (1) _utoa                                                 9     5      4    2678
                                             29 BANK0      9     5      4
                            ___lwdiv
                            ___lwmod
                        _getADCValue (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              6     2      4     287
                                              1 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              8     4      4     418
                                              1 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (1) _strcpy                                               5     3      2    1609
                                              1 BANK0      5     3      2
 ---------------------------------------------------------------------------------
 (1) _sleep                                                0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _nrf24l01SendString                                   2     2      0    1726
                                              7 BANK0      2     2      0
                   _enableInterrupts
                     _nrf24l01SPIEnd
                    _nrf24l01SPISend
                   _nrf24l01SPIStart
                  _nrf24l01SetRXMode
 ---------------------------------------------------------------------------------
 (2) _nrf24l01SetRXMode                                    3     3      0    1409
                                              4 BANK0      3     3      0
                       _nrf24l01Send
 ---------------------------------------------------------------------------------
 (3) _nrf24l01Send                                         3     2      1    1275
                                              1 BANK0      3     2      1
                   _enableInterrupts
                     _nrf24l01SPIEnd
                    _nrf24l01SPISend
                   _nrf24l01SPIStart
 ---------------------------------------------------------------------------------
 (10) _nrf24l01SPIStart                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _nrf24l01SPISend                                     1     1      0      22
 ---------------------------------------------------------------------------------
 (10) _nrf24l01SPIEnd                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _enableInterrupts                                    1     1      0      22
 ---------------------------------------------------------------------------------
 (2) _getADCValue                                         14    10      4     904
                                             15 BANK0     14    10      4
                            ___lldiv
                             ___lmul
 ---------------------------------------------------------------------------------
 (3) ___lmul                                              12     4      8     220
                                              1 BANK0     12     4      8
 ---------------------------------------------------------------------------------
 (3) ___lldiv                                             14     6      8     290
                                              1 BANK0     14     6      8
 ---------------------------------------------------------------------------------
 (1) _flashRealod                                          3     3      0     246
                                             10 BANK0      3     3      0
                      _flashReadByte
 ---------------------------------------------------------------------------------
 (2) _flashReadByte                                        9     7      2     156
                                              1 BANK0      9     7      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _ISR                                                  0     0      0    1070
                        _nrf24l01ISR
 ---------------------------------------------------------------------------------
 (7) _nrf24l01ISR                                          2     2      0    1070
                                             13 COMMON     1     1      0
                                              0 BANK0      1     1      0
                          _exception
                     i1_nrf24l01Send
                i1_nrf24l01SetRXMode
 ---------------------------------------------------------------------------------
 (8) i1_nrf24l01SetRXMode                                  3     3      0     349
                                              4 COMMON     3     3      0
                     i1_nrf24l01Send
 ---------------------------------------------------------------------------------
 (9) i1_nrf24l01Send                                       3     2      1     215
                                              1 COMMON     3     2      1
                   _enableInterrupts
                     _nrf24l01SPIEnd
                    _nrf24l01SPISend
                   _nrf24l01SPIStart
 ---------------------------------------------------------------------------------
 (10) _nrf24l01SPIStart                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _nrf24l01SPISend                                     1     1      0      22
 ---------------------------------------------------------------------------------
 (10) _nrf24l01SPIEnd                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _enableInterrupts                                    1     1      0      22
 ---------------------------------------------------------------------------------
 (8) _exception                                            3     3      0     395
                                             10 COMMON     3     3      0
                        _flashUpdate
 ---------------------------------------------------------------------------------
 (9) _flashUpdate                                          4     4      0     373
                                              6 COMMON     4     4      0
                     _flashWriteByte
 ---------------------------------------------------------------------------------
 (10) _flashWriteByte                                      6     2      4     283
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _flashRealod
     _flashReadByte
   _loop
     _getADCValue
       ___lldiv
       ___lmul
     _nrf24l01SendString
       _enableInterrupts
       _nrf24l01SPIEnd
       _nrf24l01SPISend
       _nrf24l01SPIStart
       _nrf24l01SetRXMode
         _nrf24l01Send
           _enableInterrupts
           _nrf24l01SPIEnd
           _nrf24l01SPISend
           _nrf24l01SPIStart
     _sleep
     _strcpy
     _utoa
       ___lwdiv
       ___lwmod
       _getADCValue (ARG)
         ___lldiv
         ___lmul
   _nrf24l01Init
     _nrf24l01InitRegisters
       _nrf24l01Send
         _enableInterrupts
         _nrf24l01SPIEnd
         _nrf24l01SPISend
         _nrf24l01SPIStart
     _nrf24l01InterfaceInit
   _nrf24l01SendString
     _enableInterrupts
     _nrf24l01SPIEnd
     _nrf24l01SPISend
     _nrf24l01SPIStart
     _nrf24l01SetRXMode
       _nrf24l01Send
         _enableInterrupts
         _nrf24l01SPIEnd
         _nrf24l01SPISend
         _nrf24l01SPIStart
   _sleep
   _strcpy
   _utoa
     ___lwdiv
     ___lwmod
     _getADCValue (ARG)
       ___lldiv
       ___lmul

 _ISR (ROOT)
   _nrf24l01ISR
     _exception
       _flashUpdate
         _flashWriteByte
     i1_nrf24l01Send
       _enableInterrupts
       _nrf24l01SPIEnd
       _nrf24l01SPISend
       _nrf24l01SPIStart
     i1_nrf24l01SetRXMode
       i1_nrf24l01Send
         _enableInterrupts
         _nrf24l01SPIEnd
         _nrf24l01SPISend
         _nrf24l01SPIStart

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      E       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     27      4D       5       96.3%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50      0      33       7       63.8%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0      20       9       40.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0       0      11        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0      AE      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0      AE      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V2.00 build -1524193055 
Symbol Table                                                                                   Mon Jun 25 17:53:57 2018

            flashReadByte@result 0026                     flashRealod@i 002B                      __CFG_CP$OFF 0000  
            nrf24l01Send@command 0023  nrf24l01InitRegisters@isReciever 0070                      __CFG_LVP$ON 0000  
                            l302 0108                              l306 0118                              l185 069C  
                            l178 0285                              l851 03AC                     flashUpdate@i 0078  
                   __CFG_CPD$OFF 0000                              _ISR 0004                              u825 03D6  
                            u915 0462                              u845 03E2                              u925 046C  
                            u855 03F6                              u935 0474                              u865 0402  
                            u785 04FC                              u795 0503                              u965 0580  
                            u895 0458                              u985 058F                              u995 0596  
                            wreg 0009                             ?_ISR 0070                   ??_nrf24l01Init 002D  
                           l2001 02A8                             l2121 01B6                             l2113 019A  
                           l2123 01AA                             l2115 01A6                             l2081 015C  
                           l2073 0148                             l2065 0130                             l2059 010C  
                           l2093 017B                             l2085 0167                             l2077 014F  
                           l2069 013D                             l2097 0186                             l2089 016E  
                           l1911 0473                             l1903 0455                             l2633 0633  
                           l1905 0461                   ??_nrf24l01Send 0022                             l1915 047C  
                           l2811 035C                             l1861 04FB                             l1853 0445  
                           l1933 0595                             l2637 0366                             l1927 057D  
                           l2647 0384                             l1857 04F1                             l1929 0589  
                           l1937 059E                             l1875 03D3                             l1885 0401  
                           l1877 03E1                             l1889 040C                             l1997 028A  
                           l1999 027E                             STR_1 06E1                     __CFG_WDTE$ON 0000  
                           STR_2 06D2                             STR_3 06D7                             STR_4 06C1  
                           STR_5 06BB                             STR_6 06DC                             u1707 01C9  
                           u1717 0114                             u1727 018C                             u1737 01A2  
                           u1747 01B7                             u1757 0427                             u1677 02FA  
                           u1767 0439                             u1687 05B0                             u1777 0442  
                           u1697 05C2                             u1787 027B                             i1l74 0695  
 __size_of_nrf24l01InterfaceInit 000E                     __CFG_WRT$OFF 0000                    __CFG_FCMEN$ON 0000  
  __end_of_nrf24l01InterfaceInit 0684                             _main 02E8                             _loop 002C  
                ??_flashReadByte 0023                             fsr0h 0005                             fsr1h 0007  
                           indf0 0000                             fsr0l 0004                             indf1 0001  
                           fsr1l 0006                             btemp 007E                             _utoa 0360  
                  __CFG_BOREN$ON 0000                    __CFG_BORV$LOW 0000                             start 000F  
                  __CFG_CSWEN$ON 0000                    __CFG_MCLRE$ON 0000                            ??_ISR 007E  
            nrf24l01SendString@i 0028             __size_of_getADCValue 0088      __size_of_nrf24l01SendString 00BC  
                          ?_main 0070                            ?_loop 0070                  __end_of___lldiv 0415  
                          ?_utoa 003D                   __CFG_DEBUG$OFF 0000                  __end_of___lwdiv 0481  
                          i1l173 000D                  __end_of___lwmod 05A3           enableInterrupts@enable 0070  
            ___lmul@multiplicand 0025                    __CFG_PWRTE$ON 0000                            _sleep 069C  
               _enableInterrupts 06A5                            utoa@c 0044                            utoa@v 0042  
                          status 0003                            wtemp0 007E      __end_ofi1_nrf24l01SetRXMode 04B6  
              getADCValue@adcSum 0039                 _nrf24l01SPIStart 06AD                  __initialization 0011  
                   __end_of_main 0360                     __end_of_loop 00FF                     __end_of_utoa 03C2  
                         ??_main 0046                           ??_loop 0046                           ??_utoa 0041  
               ??_nrf24l01SPIEnd 0070         __size_of_nrf24l01SPISend 000B                           _ADRESH 009C  
                         _ADRESL 009B                           ?_sleep 0070                           _ANSELA 018C  
                         _ANSELC 018E                 ??_flashWriteByte 0074                           i1l2243 04AF  
                         i1l2263 0558                           i1l2275 056B                           i1l2267 0560  
                         i1l1795 069A                           u180_27 04A3                           u181_27 04AC  
                         u182_27 06B0                           u183_27 06B5                           _PMADRH 0892  
                         _PMADRL 0891                           _PMDATH 0894                           _PMDATL 0893  
                         u179_27 0492                           _PMCON1 0895                           _PMCON2 0896  
           __size_of_flashRealod 0020               flashWriteByte@data 0072             __size_of_flashUpdate 0021  
           __size_of_nrf24l01ISR 002E          nrf24l01SetRXMode@config 0025                           ___lmul 04E8  
        nrf24l01SetRXMode@rxMode 0026                   __CFG_STVREN$ON 0000                        ??___lldiv 0029  
                      ??___lwdiv 0025                        ??___lwmod 0025             __end_of_nrf24l01Init 05CC  
           __end_of_nrf24l01Send 060D            _nrf24l01InitRegisters 01BB                           _strcpy 062D  
      i1nrf24l01SetRXMode@config 0075                 __end_of_romArray 2000        i1nrf24l01SetRXMode@rxMode 0076  
             getADCValue@adcLoop 0038          __end_of__initialization 0028               getADCValue@channel 0037  
             getADCValue@divider 002F                   __pcstackCOMMON 0070                    __end_of_sleep 06A5  
           _nrf24l01RXPacketData 0049    nrf24l01InitRegisters@enRXAddr 0029                          ??_sleep 0021  
                     __pbssBANK0 0047                       __pbssBANK1 00A0                       __pbssBANK2 0120  
              ??_nrf24l01SPISend 0070               __size_of_exception 000D          __size_ofi1_nrf24l01Send 001B  
                     __pmaintext 02E8                          ?___lmul 0021                  __CFG_PPS1WAY$ON 0000  
              _nrf24l01SetRXMode 0415           ?_nrf24l01InitRegisters 0070                       __pintentry 0004  
            nrf24l01SPISend@data 0070                   ___lmul@product 0029               ?_nrf24l01SetRXMode 0070  
       __end_of_enableInterrupts 06AD             _nrf24l01TXPacketData 004C              __CFG_RSTOSC$HFINT32 0000  
                        ?_strcpy 0021            __end_of_n_ADDRESS_MUL 06E6              ??_nrf24l01SetRXMode 0024  
       __end_of_nrf24l01SPIStart 06B4                          _SSP1BUF 0211            _nrf24l01InterfaceInit 0676  
          __end_of_flashReadByte 04E8                 __p_romArray_text 1FE0                    ??_getADCValue 0033  
          __size_of_nrf24l01Init 0029            __size_of_nrf24l01Send 0020        __end_of_nrf24l01SetRXMode 044C  
     __end_of_nrf24l01SendString 01BB                  __size_of___lmul 0030                          ___lldiv 03C2  
                        ___lwdiv 044C                          ___lwmod 0576                          __ptext1 05A3  
                        __ptext2 0676                          __ptext3 01BB                          __ptext4 002C  
                        __ptext5 0360                          __ptext6 0576                          __ptext7 044C  
                        __ptext8 062D                          __ptext9 069C                __end_of_exception 0691  
                __size_of_strcpy 001B                     __size_of_ISR 000B                          _counter 0047  
               _romArray_absaddr 1FE0                          _romData 00A0                          clrloop0 06C8  
           end_of_initialization 0028                     _nrf24l01Init 05A3                     _nrf24l01Send 05ED  
                ___lldiv@divisor 0021                  ___lldiv@counter 002E     __size_ofi1_nrf24l01SetRXMode 0035  
                        utoa@buf 0045                          utoa@val 003D            i1nrf24l01Send@command 0073  
            __end_of_getADCValue 02E8                        _PORTAbits 000C                        _TRISAbits 008C  
                      _TRISCbits 008E                 nrf24l01Send@data 0021                 __CFG_FEXTOSC$OFF 0000  
                  ??_flashRealod 002A                    ??_flashUpdate 0076                    ??_nrf24l01ISR 007D  
         ?_nrf24l01InterfaceInit 0070                   i1_nrf24l01Send 0648       __size_of_nrf24l01SetRXMode 0037  
                 __end_of___lmul 0518                   __end_of_strcpy 0648              start_initialization 0011  
                _nrf24l01SPISend 0691                      __end_of_ISR 000F            flashWriteByte@address 0074  
                _nrf24l01RXValue 004D                  _nrf24l01RXTopic 0055                  _nrf24l01TXValue 005D  
                _nrf24l01TXTopic 0065           __end_ofi1_nrf24l01Send 0663          __size_of_nrf24l01SPIEnd 0007  
        ??_nrf24l01InitRegisters 0024                 __CFG_LPBOREN$OFF 0000              __end_of_flashRealod 062D  
                    _getADCValue 0260          __size_of_flashWriteByte 0030              __end_of_flashUpdate 05ED  
                       ??___lmul 0029              __end_of_nrf24l01ISR 0576             __end_of_resetRomData 0676  
              ?_enableInterrupts 0070                         ??_strcpy 0023               ??_enableInterrupts 0070  
                      ___latbits 0002                    __pcstackBANK0 0020                ?_nrf24l01SPIStart 0070  
             ??_nrf24l01SPIStart 0070                  ?i1_nrf24l01Send 0071                 ___lwdiv@dividend 0023  
                       ?___lldiv 0021                         ?___lwdiv 0021                         ?___lwmod 0021  
           __end_of_n_ADDRESS_P0 06D2          __end_of_nrf24l01SPISend 069C               i1nrf24l01Send@data 0071  
      nrf24l01InitRegisters@enAA 002A               _nrf24l01SendString 00FF                        _exception 0684  
               ___lwdiv@quotient 0026              i1_nrf24l01SetRXMode 0481                   __size_of_sleep 0009  
            ?_nrf24l01SendString 0070                      _flashRealod 060D                      _flashUpdate 05CC  
                    _nrf24l01ISR 0548                        clear_ram0 06C7                         _PIE0bits 0090  
                       _PIR0bits 0010                        _romHolder 0120                        _sleepLoop 004A  
           ?i1_nrf24l01SetRXMode 0070             ??_nrf24l01SendString 0027                       _ADCON0bits 009D  
                     _ADCON1bits 009E                         _WPUAbits 020C           __size_of_flashReadByte 0032  
                     ?_exception 0070                ___lmul@multiplier 0021          ??_nrf24l01InterfaceInit 0021  
              nrf24l01ISR@status 0020                   _nrf24l01SPIEnd 06B4                   _nrf24l01RXName 00B3  
                 _nrf24l01TXName 00C3             flashWriteByte@offset 0070                   _flashWriteByte 0518  
          ??i1_nrf24l01SetRXMode 0074                 __size_of___lldiv 0053                 __size_of___lwdiv 0035  
               __size_of___lwmod 002D                 ?_nrf24l01SPISend 0070                       _ANSELAbits 018C  
                     _ANSELCbits 018E                    _n_ADDRESS_MUL 06E5                  ___lwdiv@divisor 0021  
                ___lwdiv@counter 0028                         __ptext10 00FF                         __ptext11 0415  
                       __ptext20 0481                         __ptext12 05ED                         __ptext21 0648  
                       __ptext13 0260                         __ptext22 06AD                         __ptext14 04E8  
                       __ptext23 0691                         __ptext15 03C2                         __ptext24 06B4  
                       __ptext16 060D                         __ptext25 06A5                         __ptext17 04B6  
                       __ptext26 0684                         __ptext27 05CC                         __ptext19 0548  
                       __ptext28 0518           __end_of_nrf24l01SPIEnd 06BB                         _nrf24l01 004B  
                   _resetRomData 0663           nrf24l01Init@isReciever 002F                      _OSCCON1bits 0919  
                    _OSCCON2bits 091A                       strcpy@from 0021                    __size_of_main 0078  
                  __size_of_loop 00D3                    __size_of_utoa 0062           __end_of_flashWriteByte 0548  
   nrf24l01InitRegisters@feature 0027               exception@exception 007C                         _romArray 1FE0  
                  _flashReadByte 04B6     nrf24l01InitRegisters@rfSetup 0026                     ?_getADCValue 002F  
 __size_of_nrf24l01InitRegisters 00A5    __end_of_nrf24l01InitRegisters 0260                         int$flags 007E  
   nrf24l01InitRegisters@setupAW 0025                     _SSP1STATbits 0214                       _INTCONbits 000B  
                     _FVRCONbits 0117                 ??i1_nrf24l01Send 0072                      ??_exception 007A  
                 __pstringtext10 0000                  ?_nrf24l01SPIEnd 0070                         intlevel1 0000  
                   _n_ADDRESS_P0 06CD        __size_of_enableInterrupts 0008                       _PMCON1bits 0895  
               ___lwmod@dividend 0023                 ___lldiv@dividend 0025                __CFG_CLKOUTEN$OFF 0000  
                ?_flashWriteByte 0070                   ?_flashReadByte 0021      nrf24l01InitRegisters@config 002C  
      __size_of_nrf24l01SPIStart 0007      nrf24l01InitRegisters@status 0028                    __pstringtext1 0663  
                  __pstringtext2 06CD                    __pstringtext3 06E5                    __pstringtext4 06BB  
                  __pstringtext5 06C1                    __pstringtext6 06D2                    __pstringtext7 06D7  
                  __pstringtext8 06DC                    __pstringtext9 06E1                         utoa@base 003F  
     nrf24l01InitRegisters@DynPD 002B                 ___lldiv@quotient 002A                  ___lwmod@divisor 0021  
                       strcpy@cp 0024                         strcpy@to 0025                  ___lwmod@counter 0026  
                    _SSPCON1bits 0215                       _WDTCONbits 0097                    ?_nrf24l01Init 0070  
                  ?_nrf24l01Send 0021                     ?_flashRealod 0070                       _STATUSbits 0003  
           flashReadByte@address 0028                     ?_flashUpdate 0070                     ?_nrf24l01ISR 0070  
            flashReadByte@offset 0021  
