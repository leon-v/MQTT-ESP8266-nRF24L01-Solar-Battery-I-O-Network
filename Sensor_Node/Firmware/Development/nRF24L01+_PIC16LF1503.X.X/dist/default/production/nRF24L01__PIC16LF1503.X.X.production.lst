

Microchip Technology PIC LITE Macro Assembler V1.45 build -152302408 
                                                                                               Fri Jun 22 13:02:03 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	16LF1503
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	stringtext1,global,class=STRCODE,delta=2
     5                           	psect	stringtext2,global,class=STRCODE,delta=2
     6                           	psect	_NVMEM_text,global,class=CODE,delta=2
     7                           	psect	stringtext3,global,class=STRCODE,delta=2
     8                           	psect	stringtext4,global,class=STRCODE,delta=2
     9                           	psect	stringtext5,global,class=STRCODE,delta=2
    10                           	psect	stringtext6,global,class=STRCODE,delta=2
    11                           	psect	stringtext7,global,class=STRCODE,delta=2
    12                           	psect	stringtext8,global,class=STRCODE,delta=2
    13                           	psect	stringtext9,global,class=STRCODE,delta=2
    14                           	psect	stringtext10,global,class=STRCODE,delta=2
    15                           	psect	cinit,global,class=CODE,merge=1,delta=2
    16                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    17                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    18                           	psect	clrtext,global,class=CODE,delta=2
    19                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    20                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    21                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    22                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    23                           	psect	text1,local,class=CODE,merge=1,delta=2
    24                           	psect	text2,local,class=CODE,merge=1,delta=2
    25                           	psect	text3,local,class=CODE,merge=1,delta=2
    26                           	psect	text4,local,class=CODE,merge=1,delta=2
    27                           	psect	text5,local,class=CODE,merge=1,delta=2
    28                           	psect	text6,local,class=CODE,merge=1,delta=2,group=1
    29                           	psect	text7,local,class=CODE,merge=1,delta=2,group=1
    30                           	psect	text8,local,class=CODE,merge=1,delta=2,group=1
    31                           	psect	text9,local,class=CODE,merge=1,delta=2,group=1
    32                           	psect	text10,local,class=CODE,merge=1,delta=2
    33                           	psect	text11,local,class=CODE,merge=1,delta=2
    34                           	psect	text12,local,class=CODE,merge=1,delta=2
    35                           	psect	text13,local,class=CODE,merge=1,delta=2,group=1
    36                           	psect	text14,local,class=CODE,merge=1,delta=2,group=1
    37                           	psect	intentry,global,class=CODE,delta=2
    38                           	psect	text16,local,class=CODE,merge=1,delta=2
    39                           	psect	text17,local,class=CODE,merge=1,delta=2
    40                           	psect	text18,local,class=CODE,merge=1,delta=2,group=1
    41                           	psect	text19,local,class=CODE,merge=1,delta=2
    42                           	psect	text20,local,class=CODE,merge=1,delta=2
    43                           	psect	text21,local,class=CODE,merge=1,delta=2
    44                           	psect	text22,local,class=CODE,merge=1,delta=2
    45                           	psect	text23,local,class=CODE,merge=1,delta=2
    46                           	psect	text24,local,class=CODE,merge=1,delta=2
    47                           	dabs	1,0x7E,2
    48  0000                     
    49                           ; Version 1.45
    50                           ; Generated 16/11/2017 GMT
    51                           ; 
    52                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    53                           ; All rights reserved.
    54                           ; 
    55                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    56                           ; 
    57                           ; Redistribution and use in source and binary forms, with or without modification, are
    58                           ; permitted provided that the following conditions are met:
    59                           ; 
    60                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    61                           ;        conditions and the following disclaimer.
    62                           ; 
    63                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    64                           ;        of conditions and the following disclaimer in the documentation and/or other
    65                           ;        materials provided with the distribution.
    66                           ; 
    67                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    68                           ;        software without specific prior written permission.
    69                           ; 
    70                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    71                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    72                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    73                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    74                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    75                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    76                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    77                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    78                           ; 
    79                           ; 
    80                           ; Code-generator required, PIC16LF1503 Definitions
    81                           ; 
    82                           ; SFR Addresses
    83  0000                     	;# 
    84  0001                     	;# 
    85  0002                     	;# 
    86  0003                     	;# 
    87  0004                     	;# 
    88  0005                     	;# 
    89  0006                     	;# 
    90  0007                     	;# 
    91  0008                     	;# 
    92  0009                     	;# 
    93  000A                     	;# 
    94  000B                     	;# 
    95  000C                     	;# 
    96  000E                     	;# 
    97  0011                     	;# 
    98  0012                     	;# 
    99  0013                     	;# 
   100  0015                     	;# 
   101  0016                     	;# 
   102  0016                     	;# 
   103  0017                     	;# 
   104  0018                     	;# 
   105  0019                     	;# 
   106  001A                     	;# 
   107  001B                     	;# 
   108  001C                     	;# 
   109  008C                     	;# 
   110  008E                     	;# 
   111  0091                     	;# 
   112  0092                     	;# 
   113  0093                     	;# 
   114  0095                     	;# 
   115  0096                     	;# 
   116  0097                     	;# 
   117  0099                     	;# 
   118  009A                     	;# 
   119  009B                     	;# 
   120  009B                     	;# 
   121  009C                     	;# 
   122  009D                     	;# 
   123  009E                     	;# 
   124  009F                     	;# 
   125  010C                     	;# 
   126  010E                     	;# 
   127  0111                     	;# 
   128  0112                     	;# 
   129  0113                     	;# 
   130  0114                     	;# 
   131  0115                     	;# 
   132  0116                     	;# 
   133  0117                     	;# 
   134  0118                     	;# 
   135  0119                     	;# 
   136  011D                     	;# 
   137  018C                     	;# 
   138  018E                     	;# 
   139  0191                     	;# 
   140  0191                     	;# 
   141  0192                     	;# 
   142  0193                     	;# 
   143  0193                     	;# 
   144  0194                     	;# 
   145  0195                     	;# 
   146  0196                     	;# 
   147  020C                     	;# 
   148  0211                     	;# 
   149  0211                     	;# 
   150  0212                     	;# 
   151  0212                     	;# 
   152  0213                     	;# 
   153  0213                     	;# 
   154  0214                     	;# 
   155  0214                     	;# 
   156  0215                     	;# 
   157  0215                     	;# 
   158  0215                     	;# 
   159  0216                     	;# 
   160  0216                     	;# 
   161  0217                     	;# 
   162  0217                     	;# 
   163  0391                     	;# 
   164  0392                     	;# 
   165  0393                     	;# 
   166  0498                     	;# 
   167  0498                     	;# 
   168  0499                     	;# 
   169  049A                     	;# 
   170  049B                     	;# 
   171  049B                     	;# 
   172  049C                     	;# 
   173  049D                     	;# 
   174  049E                     	;# 
   175  049F                     	;# 
   176  0611                     	;# 
   177  0612                     	;# 
   178  0613                     	;# 
   179  0613                     	;# 
   180  0614                     	;# 
   181  0615                     	;# 
   182  0616                     	;# 
   183  0616                     	;# 
   184  0617                     	;# 
   185  0618                     	;# 
   186  0619                     	;# 
   187  0619                     	;# 
   188  061A                     	;# 
   189  061B                     	;# 
   190  061C                     	;# 
   191  061C                     	;# 
   192  0691                     	;# 
   193  0692                     	;# 
   194  0693                     	;# 
   195  0694                     	;# 
   196  0695                     	;# 
   197  0F0F                     	;# 
   198  0F10                     	;# 
   199  0F11                     	;# 
   200  0F12                     	;# 
   201  0F13                     	;# 
   202  0F14                     	;# 
   203  0F15                     	;# 
   204  0F16                     	;# 
   205  0F17                     	;# 
   206  0F18                     	;# 
   207  0F19                     	;# 
   208  0F1A                     	;# 
   209  0F1B                     	;# 
   210  0F1C                     	;# 
   211  0F1D                     	;# 
   212  0F1E                     	;# 
   213  0F1F                     	;# 
   214  0FE3                     	;# 
   215  0FE4                     	;# 
   216  0FE5                     	;# 
   217  0FE6                     	;# 
   218  0FE7                     	;# 
   219  0FE8                     	;# 
   220  0FE9                     	;# 
   221  0FEA                     	;# 
   222  0FEB                     	;# 
   223  0FED                     	;# 
   224  0FEE                     	;# 
   225  0FEF                     	;# 
   226  0000                     	;# 
   227  0001                     	;# 
   228  0002                     	;# 
   229  0003                     	;# 
   230  0004                     	;# 
   231  0005                     	;# 
   232  0006                     	;# 
   233  0007                     	;# 
   234  0008                     	;# 
   235  0009                     	;# 
   236  000A                     	;# 
   237  000B                     	;# 
   238  000C                     	;# 
   239  000E                     	;# 
   240  0011                     	;# 
   241  0012                     	;# 
   242  0013                     	;# 
   243  0015                     	;# 
   244  0016                     	;# 
   245  0016                     	;# 
   246  0017                     	;# 
   247  0018                     	;# 
   248  0019                     	;# 
   249  001A                     	;# 
   250  001B                     	;# 
   251  001C                     	;# 
   252  008C                     	;# 
   253  008E                     	;# 
   254  0091                     	;# 
   255  0092                     	;# 
   256  0093                     	;# 
   257  0095                     	;# 
   258  0096                     	;# 
   259  0097                     	;# 
   260  0099                     	;# 
   261  009A                     	;# 
   262  009B                     	;# 
   263  009B                     	;# 
   264  009C                     	;# 
   265  009D                     	;# 
   266  009E                     	;# 
   267  009F                     	;# 
   268  010C                     	;# 
   269  010E                     	;# 
   270  0111                     	;# 
   271  0112                     	;# 
   272  0113                     	;# 
   273  0114                     	;# 
   274  0115                     	;# 
   275  0116                     	;# 
   276  0117                     	;# 
   277  0118                     	;# 
   278  0119                     	;# 
   279  011D                     	;# 
   280  018C                     	;# 
   281  018E                     	;# 
   282  0191                     	;# 
   283  0191                     	;# 
   284  0192                     	;# 
   285  0193                     	;# 
   286  0193                     	;# 
   287  0194                     	;# 
   288  0195                     	;# 
   289  0196                     	;# 
   290  020C                     	;# 
   291  0211                     	;# 
   292  0211                     	;# 
   293  0212                     	;# 
   294  0212                     	;# 
   295  0213                     	;# 
   296  0213                     	;# 
   297  0214                     	;# 
   298  0214                     	;# 
   299  0215                     	;# 
   300  0215                     	;# 
   301  0215                     	;# 
   302  0216                     	;# 
   303  0216                     	;# 
   304  0217                     	;# 
   305  0217                     	;# 
   306  0391                     	;# 
   307  0392                     	;# 
   308  0393                     	;# 
   309  0498                     	;# 
   310  0498                     	;# 
   311  0499                     	;# 
   312  049A                     	;# 
   313  049B                     	;# 
   314  049B                     	;# 
   315  049C                     	;# 
   316  049D                     	;# 
   317  049E                     	;# 
   318  049F                     	;# 
   319  0611                     	;# 
   320  0612                     	;# 
   321  0613                     	;# 
   322  0613                     	;# 
   323  0614                     	;# 
   324  0615                     	;# 
   325  0616                     	;# 
   326  0616                     	;# 
   327  0617                     	;# 
   328  0618                     	;# 
   329  0619                     	;# 
   330  0619                     	;# 
   331  061A                     	;# 
   332  061B                     	;# 
   333  061C                     	;# 
   334  061C                     	;# 
   335  0691                     	;# 
   336  0692                     	;# 
   337  0693                     	;# 
   338  0694                     	;# 
   339  0695                     	;# 
   340  0F0F                     	;# 
   341  0F10                     	;# 
   342  0F11                     	;# 
   343  0F12                     	;# 
   344  0F13                     	;# 
   345  0F14                     	;# 
   346  0F15                     	;# 
   347  0F16                     	;# 
   348  0F17                     	;# 
   349  0F18                     	;# 
   350  0F19                     	;# 
   351  0F1A                     	;# 
   352  0F1B                     	;# 
   353  0F1C                     	;# 
   354  0F1D                     	;# 
   355  0F1E                     	;# 
   356  0F1F                     	;# 
   357  0FE3                     	;# 
   358  0FE4                     	;# 
   359  0FE5                     	;# 
   360  0FE6                     	;# 
   361  0FE7                     	;# 
   362  0FE8                     	;# 
   363  0FE9                     	;# 
   364  0FEA                     	;# 
   365  0FEB                     	;# 
   366  0FED                     	;# 
   367  0FEE                     	;# 
   368  0FEF                     	;# 
   369  0000                     	;# 
   370  0001                     	;# 
   371  0002                     	;# 
   372  0003                     	;# 
   373  0004                     	;# 
   374  0005                     	;# 
   375  0006                     	;# 
   376  0007                     	;# 
   377  0008                     	;# 
   378  0009                     	;# 
   379  000A                     	;# 
   380  000B                     	;# 
   381  000C                     	;# 
   382  000E                     	;# 
   383  0011                     	;# 
   384  0012                     	;# 
   385  0013                     	;# 
   386  0015                     	;# 
   387  0016                     	;# 
   388  0016                     	;# 
   389  0017                     	;# 
   390  0018                     	;# 
   391  0019                     	;# 
   392  001A                     	;# 
   393  001B                     	;# 
   394  001C                     	;# 
   395  008C                     	;# 
   396  008E                     	;# 
   397  0091                     	;# 
   398  0092                     	;# 
   399  0093                     	;# 
   400  0095                     	;# 
   401  0096                     	;# 
   402  0097                     	;# 
   403  0099                     	;# 
   404  009A                     	;# 
   405  009B                     	;# 
   406  009B                     	;# 
   407  009C                     	;# 
   408  009D                     	;# 
   409  009E                     	;# 
   410  009F                     	;# 
   411  010C                     	;# 
   412  010E                     	;# 
   413  0111                     	;# 
   414  0112                     	;# 
   415  0113                     	;# 
   416  0114                     	;# 
   417  0115                     	;# 
   418  0116                     	;# 
   419  0117                     	;# 
   420  0118                     	;# 
   421  0119                     	;# 
   422  011D                     	;# 
   423  018C                     	;# 
   424  018E                     	;# 
   425  0191                     	;# 
   426  0191                     	;# 
   427  0192                     	;# 
   428  0193                     	;# 
   429  0193                     	;# 
   430  0194                     	;# 
   431  0195                     	;# 
   432  0196                     	;# 
   433  020C                     	;# 
   434  0211                     	;# 
   435  0211                     	;# 
   436  0212                     	;# 
   437  0212                     	;# 
   438  0213                     	;# 
   439  0213                     	;# 
   440  0214                     	;# 
   441  0214                     	;# 
   442  0215                     	;# 
   443  0215                     	;# 
   444  0215                     	;# 
   445  0216                     	;# 
   446  0216                     	;# 
   447  0217                     	;# 
   448  0217                     	;# 
   449  0391                     	;# 
   450  0392                     	;# 
   451  0393                     	;# 
   452  0498                     	;# 
   453  0498                     	;# 
   454  0499                     	;# 
   455  049A                     	;# 
   456  049B                     	;# 
   457  049B                     	;# 
   458  049C                     	;# 
   459  049D                     	;# 
   460  049E                     	;# 
   461  049F                     	;# 
   462  0611                     	;# 
   463  0612                     	;# 
   464  0613                     	;# 
   465  0613                     	;# 
   466  0614                     	;# 
   467  0615                     	;# 
   468  0616                     	;# 
   469  0616                     	;# 
   470  0617                     	;# 
   471  0618                     	;# 
   472  0619                     	;# 
   473  0619                     	;# 
   474  061A                     	;# 
   475  061B                     	;# 
   476  061C                     	;# 
   477  061C                     	;# 
   478  0691                     	;# 
   479  0692                     	;# 
   480  0693                     	;# 
   481  0694                     	;# 
   482  0695                     	;# 
   483  0F0F                     	;# 
   484  0F10                     	;# 
   485  0F11                     	;# 
   486  0F12                     	;# 
   487  0F13                     	;# 
   488  0F14                     	;# 
   489  0F15                     	;# 
   490  0F16                     	;# 
   491  0F17                     	;# 
   492  0F18                     	;# 
   493  0F19                     	;# 
   494  0F1A                     	;# 
   495  0F1B                     	;# 
   496  0F1C                     	;# 
   497  0F1D                     	;# 
   498  0F1E                     	;# 
   499  0F1F                     	;# 
   500  0FE3                     	;# 
   501  0FE4                     	;# 
   502  0FE5                     	;# 
   503  0FE6                     	;# 
   504  0FE7                     	;# 
   505  0FE8                     	;# 
   506  0FE9                     	;# 
   507  0FEA                     	;# 
   508  0FEB                     	;# 
   509  0FED                     	;# 
   510  0FEE                     	;# 
   511  0FEF                     	;# 
   512  0000                     	;# 
   513  0001                     	;# 
   514  0002                     	;# 
   515  0003                     	;# 
   516  0004                     	;# 
   517  0005                     	;# 
   518  0006                     	;# 
   519  0007                     	;# 
   520  0008                     	;# 
   521  0009                     	;# 
   522  000A                     	;# 
   523  000B                     	;# 
   524  000C                     	;# 
   525  000E                     	;# 
   526  0011                     	;# 
   527  0012                     	;# 
   528  0013                     	;# 
   529  0015                     	;# 
   530  0016                     	;# 
   531  0016                     	;# 
   532  0017                     	;# 
   533  0018                     	;# 
   534  0019                     	;# 
   535  001A                     	;# 
   536  001B                     	;# 
   537  001C                     	;# 
   538  008C                     	;# 
   539  008E                     	;# 
   540  0091                     	;# 
   541  0092                     	;# 
   542  0093                     	;# 
   543  0095                     	;# 
   544  0096                     	;# 
   545  0097                     	;# 
   546  0099                     	;# 
   547  009A                     	;# 
   548  009B                     	;# 
   549  009B                     	;# 
   550  009C                     	;# 
   551  009D                     	;# 
   552  009E                     	;# 
   553  009F                     	;# 
   554  010C                     	;# 
   555  010E                     	;# 
   556  0111                     	;# 
   557  0112                     	;# 
   558  0113                     	;# 
   559  0114                     	;# 
   560  0115                     	;# 
   561  0116                     	;# 
   562  0117                     	;# 
   563  0118                     	;# 
   564  0119                     	;# 
   565  011D                     	;# 
   566  018C                     	;# 
   567  018E                     	;# 
   568  0191                     	;# 
   569  0191                     	;# 
   570  0192                     	;# 
   571  0193                     	;# 
   572  0193                     	;# 
   573  0194                     	;# 
   574  0195                     	;# 
   575  0196                     	;# 
   576  020C                     	;# 
   577  0211                     	;# 
   578  0211                     	;# 
   579  0212                     	;# 
   580  0212                     	;# 
   581  0213                     	;# 
   582  0213                     	;# 
   583  0214                     	;# 
   584  0214                     	;# 
   585  0215                     	;# 
   586  0215                     	;# 
   587  0215                     	;# 
   588  0216                     	;# 
   589  0216                     	;# 
   590  0217                     	;# 
   591  0217                     	;# 
   592  0391                     	;# 
   593  0392                     	;# 
   594  0393                     	;# 
   595  0498                     	;# 
   596  0498                     	;# 
   597  0499                     	;# 
   598  049A                     	;# 
   599  049B                     	;# 
   600  049B                     	;# 
   601  049C                     	;# 
   602  049D                     	;# 
   603  049E                     	;# 
   604  049F                     	;# 
   605  0611                     	;# 
   606  0612                     	;# 
   607  0613                     	;# 
   608  0613                     	;# 
   609  0614                     	;# 
   610  0615                     	;# 
   611  0616                     	;# 
   612  0616                     	;# 
   613  0617                     	;# 
   614  0618                     	;# 
   615  0619                     	;# 
   616  0619                     	;# 
   617  061A                     	;# 
   618  061B                     	;# 
   619  061C                     	;# 
   620  061C                     	;# 
   621  0691                     	;# 
   622  0692                     	;# 
   623  0693                     	;# 
   624  0694                     	;# 
   625  0695                     	;# 
   626  0F0F                     	;# 
   627  0F10                     	;# 
   628  0F11                     	;# 
   629  0F12                     	;# 
   630  0F13                     	;# 
   631  0F14                     	;# 
   632  0F15                     	;# 
   633  0F16                     	;# 
   634  0F17                     	;# 
   635  0F18                     	;# 
   636  0F19                     	;# 
   637  0F1A                     	;# 
   638  0F1B                     	;# 
   639  0F1C                     	;# 
   640  0F1D                     	;# 
   641  0F1E                     	;# 
   642  0F1F                     	;# 
   643  0FE3                     	;# 
   644  0FE4                     	;# 
   645  0FE5                     	;# 
   646  0FE6                     	;# 
   647  0FE7                     	;# 
   648  0FE8                     	;# 
   649  0FE9                     	;# 
   650  0FEA                     	;# 
   651  0FEB                     	;# 
   652  0FED                     	;# 
   653  0FEE                     	;# 
   654  0FEF                     	;# 
   655  0000                     	;# 
   656  0001                     	;# 
   657  0002                     	;# 
   658  0003                     	;# 
   659  0004                     	;# 
   660  0005                     	;# 
   661  0006                     	;# 
   662  0007                     	;# 
   663  0008                     	;# 
   664  0009                     	;# 
   665  000A                     	;# 
   666  000B                     	;# 
   667  000C                     	;# 
   668  000E                     	;# 
   669  0011                     	;# 
   670  0012                     	;# 
   671  0013                     	;# 
   672  0015                     	;# 
   673  0016                     	;# 
   674  0016                     	;# 
   675  0017                     	;# 
   676  0018                     	;# 
   677  0019                     	;# 
   678  001A                     	;# 
   679  001B                     	;# 
   680  001C                     	;# 
   681  008C                     	;# 
   682  008E                     	;# 
   683  0091                     	;# 
   684  0092                     	;# 
   685  0093                     	;# 
   686  0095                     	;# 
   687  0096                     	;# 
   688  0097                     	;# 
   689  0099                     	;# 
   690  009A                     	;# 
   691  009B                     	;# 
   692  009B                     	;# 
   693  009C                     	;# 
   694  009D                     	;# 
   695  009E                     	;# 
   696  009F                     	;# 
   697  010C                     	;# 
   698  010E                     	;# 
   699  0111                     	;# 
   700  0112                     	;# 
   701  0113                     	;# 
   702  0114                     	;# 
   703  0115                     	;# 
   704  0116                     	;# 
   705  0117                     	;# 
   706  0118                     	;# 
   707  0119                     	;# 
   708  011D                     	;# 
   709  018C                     	;# 
   710  018E                     	;# 
   711  0191                     	;# 
   712  0191                     	;# 
   713  0192                     	;# 
   714  0193                     	;# 
   715  0193                     	;# 
   716  0194                     	;# 
   717  0195                     	;# 
   718  0196                     	;# 
   719  020C                     	;# 
   720  0211                     	;# 
   721  0211                     	;# 
   722  0212                     	;# 
   723  0212                     	;# 
   724  0213                     	;# 
   725  0213                     	;# 
   726  0214                     	;# 
   727  0214                     	;# 
   728  0215                     	;# 
   729  0215                     	;# 
   730  0215                     	;# 
   731  0216                     	;# 
   732  0216                     	;# 
   733  0217                     	;# 
   734  0217                     	;# 
   735  0391                     	;# 
   736  0392                     	;# 
   737  0393                     	;# 
   738  0498                     	;# 
   739  0498                     	;# 
   740  0499                     	;# 
   741  049A                     	;# 
   742  049B                     	;# 
   743  049B                     	;# 
   744  049C                     	;# 
   745  049D                     	;# 
   746  049E                     	;# 
   747  049F                     	;# 
   748  0611                     	;# 
   749  0612                     	;# 
   750  0613                     	;# 
   751  0613                     	;# 
   752  0614                     	;# 
   753  0615                     	;# 
   754  0616                     	;# 
   755  0616                     	;# 
   756  0617                     	;# 
   757  0618                     	;# 
   758  0619                     	;# 
   759  0619                     	;# 
   760  061A                     	;# 
   761  061B                     	;# 
   762  061C                     	;# 
   763  061C                     	;# 
   764  0691                     	;# 
   765  0692                     	;# 
   766  0693                     	;# 
   767  0694                     	;# 
   768  0695                     	;# 
   769  0F0F                     	;# 
   770  0F10                     	;# 
   771  0F11                     	;# 
   772  0F12                     	;# 
   773  0F13                     	;# 
   774  0F14                     	;# 
   775  0F15                     	;# 
   776  0F16                     	;# 
   777  0F17                     	;# 
   778  0F18                     	;# 
   779  0F19                     	;# 
   780  0F1A                     	;# 
   781  0F1B                     	;# 
   782  0F1C                     	;# 
   783  0F1D                     	;# 
   784  0F1E                     	;# 
   785  0F1F                     	;# 
   786  0FE3                     	;# 
   787  0FE4                     	;# 
   788  0FE5                     	;# 
   789  0FE6                     	;# 
   790  0FE7                     	;# 
   791  0FE8                     	;# 
   792  0FE9                     	;# 
   793  0FEA                     	;# 
   794  0FEB                     	;# 
   795  0FED                     	;# 
   796  0FEE                     	;# 
   797  0FEF                     	;# 
   798  07E0                     _NVMEM_absaddr	set	2016
   799                           
   800                           	psect	stringtext1
   801  0645                     __pstringtext1:	
   802  0645                     _n_ADDRESS_P0:	
   803  0645  34AD               	retlw	173
   804  0646  3487               	retlw	135
   805  0647  3466               	retlw	102
   806  0648  34BC               	retlw	188
   807  0649  34BB               	retlw	187
   808  064A                     __end_of_n_ADDRESS_P0:	
   809                           
   810                           	psect	stringtext2
   811  0661                     __pstringtext2:	
   812  0661                     _n_ADDRESS_MUL:	
   813  0661  3421               	retlw	33
   814  0662                     __end_of_n_ADDRESS_MUL:	
   815  07E0                     _NVMEM_absaddr	set	2016
   816                           
   817                           	psect	_NVMEM_text
   818  07E0                     __p_NVMEM_text:	
   819  07E0                     _NVMEM:	
   820  07E0  3455               	retlw	85
   821  07E1  346E               	retlw	110
   822  07E2  3463               	retlw	99
   823  07E3  346F               	retlw	111
   824  07E4  346E               	retlw	110
   825  07E5  3466               	retlw	102
   826  07E6  3469               	retlw	105
   827  07E7  3467               	retlw	103
   828  07E8  3475               	retlw	117
   829  07E9  3472               	retlw	114
   830  07EA  3465               	retlw	101
   831  07EB  3464               	retlw	100
   832  07EC  3457               	retlw	87
   833  07ED  3400               	retlw	0
   834  07EE  3400               	retlw	0
   835  07EF  3400               	retlw	0
   836  07F0  3400               	retlw	0
   837  07F1  3400               	retlw	0
   838  07F2  3400               	retlw	0
   839  07F3  3400               	retlw	0
   840  07F4  3400               	retlw	0
   841  07F5  3400               	retlw	0
   842  07F6  3400               	retlw	0
   843  07F7  3400               	retlw	0
   844  07F8  3400               	retlw	0
   845  07F9  3400               	retlw	0
   846  07FA  3400               	retlw	0
   847  07FB  3400               	retlw	0
   848  07FC  3400               	retlw	0
   849  07FD  3400               	retlw	0
   850  07FE  3400               	retlw	0
   851  07FF  3400               	retlw	0
   852  0800                     __end_of_NVMEM:	
   853  0003                     _STATUSbits	set	3
   854  000C                     _PORTAbits	set	12
   855  000B                     _INTCONbits	set	11
   856  0097                     _WDTCONbits	set	151
   857  009E                     _ADCON1bits	set	158
   858  0095                     _OPTION_REGbits	set	149
   859  0099                     _OSCCONbits	set	153
   860  009C                     _ADRESH	set	156
   861  009B                     _ADRESL	set	155
   862  009D                     _ADCON0bits	set	157
   863  008E                     _TRISCbits	set	142
   864  008C                     _TRISAbits	set	140
   865  0117                     _FVRCONbits	set	279
   866  018E                     _ANSELCbits	set	398
   867  018C                     _ANSELAbits	set	396
   868  018E                     _ANSELC	set	398
   869  018C                     _ANSELA	set	396
   870  0194                     _PMDATH	set	404
   871  0193                     _PMDATL	set	403
   872  0196                     _PMCON2	set	406
   873  0195                     _PMCON1bits	set	405
   874  0192                     _PMADRH	set	402
   875  0191                     _PMADRL	set	401
   876  0195                     _PMCON1	set	405
   877  020C                     _WPUAbits	set	524
   878  0211                     _SSP1BUF	set	529
   879  0214                     _SSP1STATbits	set	532
   880  0215                     _SSPCON1bits	set	533
   881                           
   882                           	psect	stringtext3
   883  0633                     __pstringtext3:	
   884  0633                     STR_5:	
   885  0633  3441               	retlw	65	;'A'
   886  0634  3444               	retlw	68	;'D'
   887  0635  3443               	retlw	67	;'C'
   888  0636  3433               	retlw	51	;'3'
   889  0637  3431               	retlw	49	;'1'
   890  0638  3400               	retlw	0
   891                           
   892                           	psect	stringtext4
   893  0639                     __pstringtext4:	
   894  0639                     STR_4:	
   895  0639  3441               	retlw	65	;'A'
   896  063A  3444               	retlw	68	;'D'
   897  063B  3443               	retlw	67	;'C'
   898  063C  3432               	retlw	50	;'2'
   899  063D  3439               	retlw	57	;'9'
   900  063E  3400               	retlw	0
   901                           
   902                           	psect	stringtext5
   903  064A                     __pstringtext5:	
   904  064A                     STR_2:	
   905  064A  3441               	retlw	65	;'A'
   906  064B  3444               	retlw	68	;'D'
   907  064C  3443               	retlw	67	;'C'
   908  064D  3433               	retlw	51	;'3'
   909  064E  3400               	retlw	0
   910                           
   911                           	psect	stringtext6
   912  064F                     __pstringtext6:	
   913  064F                     STR_3:	
   914  064F  3441               	retlw	65	;'A'
   915  0650  3444               	retlw	68	;'D'
   916  0651  3443               	retlw	67	;'C'
   917  0652  3437               	retlw	55	;'7'
   918  0653  3400               	retlw	0
   919                           
   920                           	psect	stringtext7
   921  0654                     __pstringtext7:	
   922  0654                     STR_6:	
   923  0654  3442               	retlw	66	;'B'
   924  0655  344F               	retlw	79	;'O'
   925  0656  344F               	retlw	79	;'O'
   926  0657  3454               	retlw	84	;'T'
   927  0658  3400               	retlw	0
   928                           
   929                           	psect	stringtext8
   930  0659                     __pstringtext8:	
   931  0659                     STR_7:	
   932  0659  3441               	retlw	65	;'A'
   933  065A  3443               	retlw	67	;'C'
   934  065B  344B               	retlw	75	;'K'
   935  065C  3400               	retlw	0
   936                           
   937                           	psect	stringtext9
   938  065D                     __pstringtext9:	
   939  065D                     STR_1:	
   940  065D  3444               	retlw	68	;'D'
   941  065E  3442               	retlw	66	;'B'
   942  065F  3447               	retlw	71	;'G'
   943  0660  3400               	retlw	0
   944                           
   945                           	psect	stringtext10
   946  0000                     __pstringtext10:	
   947                           
   948                           ; #config settings
   949  0000                     
   950                           	psect	cinit
   951  0013                     start_initialization:	
   952  0013                     __initialization:	
   953                           
   954                           ; Clear objects allocated to BANK0
   955  0013  3049               	movlw	low __pbssBANK0
   956  0014  0084               	movwf	4
   957  0015  3000               	movlw	high __pbssBANK0
   958  0016  0085               	movwf	5
   959  0017  3024               	movlw	36
   960  0018  263F               	fcall	clear_ram0
   961                           
   962                           ; Clear objects allocated to BANK1
   963  0019  30A0               	movlw	low __pbssBANK1
   964  001A  0084               	movwf	4
   965  001B  3000               	movlw	high __pbssBANK1
   966  001C  0085               	movwf	5
   967  001D  3010               	movlw	16
   968  001E  263F               	fcall	clear_ram0
   969  001F                     end_of_initialization:	
   970                           ;End of C runtime variable initialization code
   971                           
   972  001F                     __end_of__initialization:	
   973  001F  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
   974  0020  0020               	movlb	0
   975  0021  2ABB               	ljmp	_main	;jump to C main() function
   976                           
   977                           	psect	bssBANK0
   978  0049                     __pbssBANK0:	
   979  0049                     _counter:	
   980  0049                     	ds	2
   981  004B                     _sleepLoop:	
   982  004B                     	ds	1
   983  004C                     _nrf24l01:	
   984  004C                     	ds	1
   985  004D                     _nrf24l01RXValue:	
   986  004D                     	ds	8
   987  0055                     _nrf24l01RXTopic:	
   988  0055                     	ds	8
   989  005D                     _nrf24l01TXValue:	
   990  005D                     	ds	8
   991  0065                     _nrf24l01TXTopic:	
   992  0065                     	ds	8
   993                           
   994                           	psect	bssBANK1
   995  00A0                     __pbssBANK1:	
   996  00A0                     _nrf24l01Name:	
   997  00A0                     	ds	16
   998                           
   999                           	psect	clrtext
  1000  063F                     clear_ram0:	
  1001                           ;	Called with FSR0 containing the base address, and
  1002                           ;	WREG with the size to clear
  1003                           
  1004  063F  0064               	clrwdt	;clear the watchdog before getting into this loop
  1005  0640                     clrloop0:	
  1006  0640  0180               	clrf	0	;clear RAM location pointed to by FSR
  1007  0641  3101               	addfsr 0,1
  1008  0642  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  1009  0643  2E40               	goto	clrloop0	;have we reached the end yet?
  1010  0644  3400               	retlw	0	;all done for this memory range, return
  1011                           
  1012                           	psect	cstackBANK1
  1013  00B0                     __pcstackBANK1:	
  1014  00B0                     ??_main:	
  1015                           
  1016                           ; 1 bytes @ 0x0
  1017  00B0                     	ds	3
  1018                           
  1019                           	psect	cstackCOMMON
  1020  0070                     __pcstackCOMMON:	
  1021  0070                     ?_nrf24l01ISR:	
  1022  0070                     ?_nrf24l01SetRXMode:	
  1023                           ; 1 bytes @ 0x0
  1024                           
  1025  0070                     ?_nrf24l01SendString:	
  1026                           ; 1 bytes @ 0x0
  1027                           
  1028  0070                     ?_nrf24l01Init:	
  1029                           ; 1 bytes @ 0x0
  1030                           
  1031  0070                     ?_nrf24l01InterfaceInit:	
  1032                           ; 1 bytes @ 0x0
  1033                           
  1034  0070                     ?_nrf24l01SPISend:	
  1035                           ; 1 bytes @ 0x0
  1036                           
  1037  0070                     ??_nrf24l01SPISend:	
  1038                           ; 1 bytes @ 0x0
  1039                           
  1040  0070                     ?_nrf24l01SPIStart:	
  1041                           ; 1 bytes @ 0x0
  1042                           
  1043  0070                     ??_nrf24l01SPIStart:	
  1044                           ; 1 bytes @ 0x0
  1045                           
  1046  0070                     ?_nrf24l01SPIEnd:	
  1047                           ; 1 bytes @ 0x0
  1048                           
  1049  0070                     ??_nrf24l01SPIEnd:	
  1050                           ; 1 bytes @ 0x0
  1051                           
  1052  0070                     ?_enableInterrupts:	
  1053                           ; 1 bytes @ 0x0
  1054                           
  1055  0070                     ??_enableInterrupts:	
  1056                           ; 1 bytes @ 0x0
  1057                           
  1058  0070                     ?_ISR:	
  1059                           ; 1 bytes @ 0x0
  1060                           
  1061  0070                     ?_sleep:	
  1062                           ; 1 bytes @ 0x0
  1063                           
  1064  0070                     ?_loop:	
  1065                           ; 1 bytes @ 0x0
  1066                           
  1067  0070                     ?_main:	
  1068                           ; 1 bytes @ 0x0
  1069                           
  1070  0070                     ?_nrf24l01ReceiveString:	
  1071                           ; 1 bytes @ 0x0
  1072                           
  1073  0070                     ?_nrf24l01InitRegisters:	
  1074                           ; 1 bytes @ 0x0
  1075                           
  1076  0070                     ?_strcmp:	
  1077                           ; 1 bytes @ 0x0
  1078                           
  1079  0070                     nrf24l01SPISend@data:	
  1080                           ; 2 bytes @ 0x0
  1081                           
  1082  0070                     enableInterrupts@enable:	
  1083                           ; 1 bytes @ 0x0
  1084                           
  1085  0070                     strcmp@s2:	
  1086                           ; 1 bytes @ 0x0
  1087                           
  1088                           
  1089                           ; 2 bytes @ 0x0
  1090  0070                     	ds	1
  1091  0071                     ??_nrf24l01Send:	
  1092                           
  1093                           ; 1 bytes @ 0x1
  1094  0071                     	ds	1
  1095  0072                     ??_strcmp:	
  1096  0072                     nrf24l01Send@command:	
  1097                           ; 1 bytes @ 0x2
  1098                           
  1099                           
  1100                           ; 1 bytes @ 0x2
  1101  0072                     	ds	1
  1102  0073                     ??_nrf24l01SetRXMode:	
  1103  0073                     strcmp@r:	
  1104                           ; 1 bytes @ 0x3
  1105                           
  1106                           
  1107                           ; 1 bytes @ 0x3
  1108  0073                     	ds	1
  1109  0074                     nrf24l01SetRXMode@config:	
  1110  0074                     strcmp@s1:	
  1111                           ; 1 bytes @ 0x4
  1112                           
  1113                           
  1114                           ; 1 bytes @ 0x4
  1115  0074                     	ds	1
  1116  0075                     nrf24l01SetRXMode@rxMode:	
  1117                           
  1118                           ; 1 bytes @ 0x5
  1119  0075                     	ds	1
  1120  0076                     ??_nrf24l01ReceiveString:	
  1121                           
  1122                           ; 1 bytes @ 0x6
  1123  0076                     	ds	3
  1124  0079                     nrf24l01ReceiveString@width:	
  1125                           
  1126                           ; 1 bytes @ 0x9
  1127  0079                     	ds	1
  1128  007A                     nrf24l01ReceiveString@offset:	
  1129                           
  1130                           ; 1 bytes @ 0xA
  1131  007A                     	ds	1
  1132  007B                     nrf24l01ReceiveString@byte:	
  1133                           
  1134                           ; 1 bytes @ 0xB
  1135  007B                     	ds	1
  1136  007C                     nrf24l01ReceiveString@i:	
  1137                           
  1138                           ; 1 bytes @ 0xC
  1139  007C                     	ds	1
  1140  007D                     ??_nrf24l01ISR:	
  1141                           
  1142                           ; 1 bytes @ 0xD
  1143  007D                     	ds	1
  1144                           
  1145                           	psect	cstackBANK0
  1146  0020                     __pcstackBANK0:	
  1147  0020                     ?_nrf24l01Send:	
  1148  0020                     nrf24l01Send@data:	
  1149                           ; 1 bytes @ 0x0
  1150                           
  1151                           
  1152                           ; 1 bytes @ 0x0
  1153  0020                     	ds	1
  1154  0021                     nrf24l01ISR@status:	
  1155                           
  1156                           ; 1 bytes @ 0x1
  1157  0021                     	ds	1
  1158  0022                     ??_ISR:	
  1159                           
  1160                           ; 1 bytes @ 0x2
  1161  0022                     	ds	1
  1162  0023                     ?_strcpy:	
  1163  0023                     ??_nrf24l01SendString:	
  1164                           ; 1 bytes @ 0x3
  1165                           
  1166  0023                     ??_nrf24l01InterfaceInit:	
  1167                           ; 1 bytes @ 0x3
  1168                           
  1169  0023                     ??_sleep:	
  1170                           ; 1 bytes @ 0x3
  1171                           
  1172  0023                     ??_nrf24l01InitRegisters:	
  1173                           ; 1 bytes @ 0x3
  1174                           
  1175  0023                     ?_read_flashmem:	
  1176                           ; 1 bytes @ 0x3
  1177                           
  1178  0023                     ?___lwdiv:	
  1179                           ; 2 bytes @ 0x3
  1180                           
  1181  0023                     ?___lwmod:	
  1182                           ; 2 bytes @ 0x3
  1183                           
  1184  0023                     ?___lmul:	
  1185                           ; 2 bytes @ 0x3
  1186                           
  1187  0023                     ?___lldiv:	
  1188                           ; 4 bytes @ 0x3
  1189                           
  1190  0023                     read_flashmem@offset:	
  1191                           ; 4 bytes @ 0x3
  1192                           
  1193  0023                     ___lwdiv@divisor:	
  1194                           ; 2 bytes @ 0x3
  1195                           
  1196  0023                     ___lwmod@divisor:	
  1197                           ; 2 bytes @ 0x3
  1198                           
  1199  0023                     strcpy@from:	
  1200                           ; 2 bytes @ 0x3
  1201                           
  1202  0023                     ___lmul@multiplier:	
  1203                           ; 2 bytes @ 0x3
  1204                           
  1205  0023                     ___lldiv@divisor:	
  1206                           ; 4 bytes @ 0x3
  1207                           
  1208                           
  1209                           ; 4 bytes @ 0x3
  1210  0023                     	ds	1
  1211  0024                     nrf24l01SendString@waitForAck:	
  1212  0024                     nrf24l01InitRegisters@setupAW:	
  1213                           ; 1 bytes @ 0x4
  1214                           
  1215                           
  1216                           ; 1 bytes @ 0x4
  1217  0024                     	ds	1
  1218  0025                     ??_strcpy:	
  1219  0025                     ??_read_flashmem:	
  1220                           ; 1 bytes @ 0x5
  1221                           
  1222  0025                     nrf24l01SendString@i:	
  1223                           ; 1 bytes @ 0x5
  1224                           
  1225  0025                     nrf24l01InitRegisters@rfSetup:	
  1226                           ; 1 bytes @ 0x5
  1227                           
  1228  0025                     ___lwdiv@dividend:	
  1229                           ; 1 bytes @ 0x5
  1230                           
  1231  0025                     ___lwmod@dividend:	
  1232                           ; 2 bytes @ 0x5
  1233                           
  1234                           
  1235                           ; 2 bytes @ 0x5
  1236  0025                     	ds	1
  1237  0026                     nrf24l01InitRegisters@feature:	
  1238  0026                     strcpy@cp:	
  1239                           ; 1 bytes @ 0x6
  1240                           
  1241                           
  1242                           ; 1 bytes @ 0x6
  1243  0026                     	ds	1
  1244  0027                     ??___lwdiv:	
  1245  0027                     ??___lwmod:	
  1246                           ; 1 bytes @ 0x7
  1247                           
  1248  0027                     nrf24l01InitRegisters@status:	
  1249                           ; 1 bytes @ 0x7
  1250                           
  1251  0027                     strcpy@to:	
  1252                           ; 1 bytes @ 0x7
  1253                           
  1254  0027                     ___lmul@multiplicand:	
  1255                           ; 1 bytes @ 0x7
  1256                           
  1257  0027                     ___lldiv@dividend:	
  1258                           ; 4 bytes @ 0x7
  1259                           
  1260                           
  1261                           ; 4 bytes @ 0x7
  1262  0027                     	ds	1
  1263  0028                     nrf24l01InitRegisters@enRXAddr:	
  1264  0028                     ___lwmod@counter:	
  1265                           ; 1 bytes @ 0x8
  1266                           
  1267  0028                     read_flashmem@result:	
  1268                           ; 1 bytes @ 0x8
  1269                           
  1270  0028                     ___lwdiv@quotient:	
  1271                           ; 2 bytes @ 0x8
  1272                           
  1273                           
  1274                           ; 2 bytes @ 0x8
  1275  0028                     	ds	1
  1276  0029                     nrf24l01InitRegisters@enAA:	
  1277                           
  1278                           ; 1 bytes @ 0x9
  1279  0029                     	ds	1
  1280  002A                     nrf24l01InitRegisters@DynPD:	
  1281  002A                     ___lwdiv@counter:	
  1282                           ; 1 bytes @ 0xA
  1283                           
  1284  002A                     read_flashmem@address:	
  1285                           ; 1 bytes @ 0xA
  1286                           
  1287                           
  1288                           ; 2 bytes @ 0xA
  1289  002A                     	ds	1
  1290  002B                     ??___lmul:	
  1291  002B                     ??___lldiv:	
  1292                           ; 1 bytes @ 0xB
  1293                           
  1294  002B                     nrf24l01InitRegisters@config:	
  1295                           ; 1 bytes @ 0xB
  1296                           
  1297  002B                     ___lmul@product:	
  1298                           ; 1 bytes @ 0xB
  1299                           
  1300                           
  1301                           ; 4 bytes @ 0xB
  1302  002B                     	ds	1
  1303  002C                     ??_nrf24l01Init:	
  1304  002C                     ___lldiv@quotient:	
  1305                           ; 1 bytes @ 0xC
  1306                           
  1307                           
  1308                           ; 4 bytes @ 0xC
  1309  002C                     	ds	4
  1310  0030                     ___lldiv@counter:	
  1311                           
  1312                           ; 1 bytes @ 0x10
  1313  0030                     	ds	1
  1314  0031                     ?_getADCValue:	
  1315  0031                     getADCValue@divider:	
  1316                           ; 4 bytes @ 0x11
  1317                           
  1318                           
  1319                           ; 4 bytes @ 0x11
  1320  0031                     	ds	4
  1321  0035                     ??_getADCValue:	
  1322                           
  1323                           ; 1 bytes @ 0x15
  1324  0035                     	ds	4
  1325  0039                     getADCValue@channel:	
  1326                           
  1327                           ; 1 bytes @ 0x19
  1328  0039                     	ds	1
  1329  003A                     getADCValue@adcLoop:	
  1330                           
  1331                           ; 1 bytes @ 0x1A
  1332  003A                     	ds	1
  1333  003B                     getADCValue@adcSum:	
  1334                           
  1335                           ; 4 bytes @ 0x1B
  1336  003B                     	ds	4
  1337  003F                     ?_utoa:	
  1338  003F                     utoa@val:	
  1339                           ; 1 bytes @ 0x1F
  1340                           
  1341                           
  1342                           ; 2 bytes @ 0x1F
  1343  003F                     	ds	2
  1344  0041                     utoa@base:	
  1345                           
  1346                           ; 2 bytes @ 0x21
  1347  0041                     	ds	2
  1348  0043                     ??_utoa:	
  1349                           
  1350                           ; 1 bytes @ 0x23
  1351  0043                     	ds	1
  1352  0044                     utoa@v:	
  1353                           
  1354                           ; 2 bytes @ 0x24
  1355  0044                     	ds	2
  1356  0046                     utoa@c:	
  1357                           
  1358                           ; 1 bytes @ 0x26
  1359  0046                     	ds	1
  1360  0047                     utoa@buf:	
  1361                           
  1362                           ; 1 bytes @ 0x27
  1363  0047                     	ds	1
  1364  0048                     ??_loop:	
  1365  0048                     main@i:	
  1366                           ; 1 bytes @ 0x28
  1367                           
  1368                           
  1369                           ; 1 bytes @ 0x28
  1370  0048                     	ds	1
  1371                           
  1372                           	psect	maintext
  1373  02BB                     __pmaintext:	
  1374 ;;
  1375 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
  1376 ;;
  1377 ;; *************** function _main *****************
  1378 ;; Defined at:
  1379 ;;		line 103 in file "main.c"
  1380 ;; Parameters:    Size  Location     Type
  1381 ;;		None
  1382 ;; Auto vars:     Size  Location     Type
  1383 ;;  i               1   40[BANK0 ] unsigned char 
  1384 ;; Return value:  Size  Location     Type
  1385 ;;                  1    wreg      void 
  1386 ;; Registers used:
  1387 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  1388 ;; Tracked objects:
  1389 ;;		On entry : B1F/0
  1390 ;;		On exit  : 0/0
  1391 ;;		Unchanged: 0/0
  1392 ;; Data sizes:     COMMON   BANK0   BANK1
  1393 ;;      Params:         0       0       0
  1394 ;;      Locals:         0       1       0
  1395 ;;      Temps:          0       0       3
  1396 ;;      Totals:         0       1       3
  1397 ;;Total ram usage:        4 bytes
  1398 ;; Hardware stack levels required when called:   11
  1399 ;; This function calls:
  1400 ;;		_loop
  1401 ;;		_nrf24l01Init
  1402 ;;		_nrf24l01SendString
  1403 ;;		_read_flashmem
  1404 ;;		_sleep
  1405 ;;		_strcpy
  1406 ;;		_utoa
  1407 ;; This function is called by:
  1408 ;;		Startup code after reset
  1409 ;; This function uses a non-reentrant model
  1410 ;;
  1411                           
  1412                           
  1413                           ;psect for function _main
  1414  02BB                     _main:	
  1415                           
  1416                           ;main.c: 106: ANSELA = 0x00;
  1417                           
  1418                           ;incstack = 0
  1419                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  1420  02BB  0023               	movlb	3	; select bank3
  1421  02BC  018C               	clrf	12	;volatile
  1422                           
  1423                           ;main.c: 107: ANSELC = 0x00;
  1424  02BD  018E               	clrf	14	;volatile
  1425                           
  1426                           ;main.c: 113: INTCONbits.PEIE = 0;
  1427  02BE  130B               	bcf	11,6	;volatile
  1428                           
  1429                           ;main.c: 114: INTCONbits.GIE = 0;
  1430  02BF  138B               	bcf	11,7	;volatile
  1431                           
  1432                           ;main.c: 116: OSCCONbits.IRCF = 0b1111;
  1433  02C0  3078               	movlw	120
  1434  02C1  0021               	movlb	1	; select bank1
  1435  02C2  0499               	iorwf	25,f	;volatile
  1436                           
  1437                           ;main.c: 117: OSCCONbits.SCS = 0b10;
  1438  02C3  0819               	movf	25,w	;volatile
  1439  02C4  39FC               	andlw	-4
  1440  02C5  3802               	iorlw	2
  1441  02C6  0099               	movwf	25	;volatile
  1442                           
  1443                           ;main.c: 119: _delay((unsigned long)((10)*(16000000/4000.0)));
  1444  02C7  3034               	movlw	52
  1445  02C8  0021               	movlb	1	; select bank1
  1446  02C9  00B0               	movwf	??_main^(0+128)
  1447  02CA  30F1               	movlw	241
  1448  02CB                     u1627:	
  1449  02CB  0B89               	decfsz	9,f
  1450  02CC  2ACB               	goto	u1627
  1451  02CD  0BB0               	decfsz	??_main^(0+128),f
  1452  02CE  2ACB               	goto	u1627
  1453  02CF  3200               	nop2
  1454                           
  1455                           ;main.c: 121: nrf24l01Init();
  1456  02D0  25D3               	fcall	_nrf24l01Init
  1457                           
  1458                           ;main.c: 123: for (unsigned char i = 0; i < sizeof(nrf24l01Name); i++){
  1459  02D1  0020               	movlb	0	; select bank0
  1460  02D2  01C8               	clrf	main@i
  1461  02D3  3010               	movlw	16
  1462  02D4  0248               	subwf	main@i,w
  1463  02D5  1803               	btfsc	3,0
  1464  02D6  2AF8               	goto	l173
  1465  02D7                     l2205:	
  1466                           
  1467                           ;main.c: 124: nrf24l01Name[i] = read_flashmem((unsigned) 0 + i);
  1468  02D7  0848               	movf	main@i,w
  1469  02D8  0021               	movlb	1	; select bank1
  1470  02D9  00B0               	movwf	??_main^(0+128)
  1471  02DA  01B1               	clrf	(??_main^(0+128)+1)
  1472  02DB  0830               	movf	??_main^(0+128),w
  1473  02DC  0020               	movlb	0	; select bank0
  1474  02DD  00A3               	movwf	read_flashmem@offset
  1475  02DE  0021               	movlb	1	; select bank1
  1476  02DF  0831               	movf	(??_main+1)^(0+128),w
  1477  02E0  0020               	movlb	0	; select bank0
  1478  02E1  00A4               	movwf	read_flashmem@offset+1
  1479  02E2  24DE               	fcall	_read_flashmem
  1480  02E3  0020               	movlb	0	; select bank0
  1481  02E4  0823               	movf	?_read_flashmem,w
  1482  02E5  0021               	movlb	1	; select bank1
  1483  02E6  00B2               	movwf	(??_main+2)^(0+128)
  1484  02E7  0020               	movlb	0	; select bank0
  1485  02E8  0848               	movf	main@i,w
  1486  02E9  3EA0               	addlw	(low (_nrf24l01Name| 0))& (0+255)
  1487  02EA  0086               	movwf	6
  1488  02EB  0187               	clrf	7
  1489  02EC  0021               	movlb	1	; select bank1
  1490  02ED  0832               	movf	(??_main+2)^(0+128),w
  1491  02EE  0081               	movwf	1
  1492  02EF  3001               	movlw	1
  1493  02F0  00B0               	movwf	??_main^(0+128)
  1494  02F1  0830               	movf	??_main^(0+128),w
  1495  02F2  0020               	movlb	0	; select bank0
  1496  02F3  07C8               	addwf	main@i,f
  1497  02F4  3010               	movlw	16
  1498  02F5  0248               	subwf	main@i,w
  1499  02F6  1C03               	skipc
  1500  02F7  2AD7               	goto	l2205
  1501  02F8                     l173:	
  1502                           
  1503                           ;main.c: 125: }
  1504                           ;main.c: 127: OPTION_REGbits.nWPUEN = 0;
  1505  02F8  0021               	movlb	1	; select bank1
  1506  02F9  1395               	bcf	21,7	;volatile
  1507                           
  1508                           ;main.c: 130: FVRCONbits.FVREN = 0;
  1509  02FA  0022               	movlb	2	; select bank2
  1510  02FB  1397               	bcf	23,7	;volatile
  1511                           
  1512                           ;main.c: 131: FVRCONbits.ADFVR = 1;
  1513  02FC  0817               	movf	23,w	;volatile
  1514  02FD  39FC               	andlw	-4
  1515  02FE  3801               	iorlw	1
  1516  02FF  0097               	movwf	23	;volatile
  1517                           
  1518                           ;main.c: 132: FVRCONbits.FVREN = 1;
  1519  0300  1797               	bsf	23,7	;volatile
  1520                           
  1521                           ;main.c: 135: FVRCONbits.TSEN = 0;
  1522  0301  1297               	bcf	23,5	;volatile
  1523                           
  1524                           ;main.c: 136: FVRCONbits.TSRNG = 0;
  1525  0302  1217               	bcf	23,4	;volatile
  1526                           
  1527                           ;main.c: 137: FVRCONbits.TSEN = 1;
  1528  0303  1697               	bsf	23,5	;volatile
  1529                           
  1530                           ;main.c: 140: ADCON0bits.ADON = 0;
  1531  0304  0021               	movlb	1	; select bank1
  1532  0305  101D               	bcf	29,0	;volatile
  1533                           
  1534                           ;main.c: 142: ANSELAbits.ANSA4 = 1;
  1535  0306  0023               	movlb	3	; select bank3
  1536  0307  160C               	bsf	12,4	;volatile
  1537                           
  1538                           ;main.c: 143: TRISAbits.TRISA4 = 1;
  1539  0308  0021               	movlb	1	; select bank1
  1540  0309  160C               	bsf	12,4	;volatile
  1541                           
  1542                           ;main.c: 144: WPUAbits.WPUA4 = 0;
  1543  030A  0024               	movlb	4	; select bank4
  1544  030B  120C               	bcf	12,4	;volatile
  1545                           
  1546                           ;main.c: 146: ANSELCbits.ANSC3 = 1;
  1547  030C  0023               	movlb	3	; select bank3
  1548  030D  158E               	bsf	14,3	;volatile
  1549                           
  1550                           ;main.c: 147: TRISCbits.TRISC3 = 1;
  1551  030E  0021               	movlb	1	; select bank1
  1552  030F  158E               	bsf	14,3	;volatile
  1553                           
  1554                           ;main.c: 149: ADCON1bits.ADCS = 0b111;
  1555  0310  3070               	movlw	112
  1556  0311  049E               	iorwf	30,f	;volatile
  1557                           
  1558                           ;main.c: 150: ADCON1bits.ADFM = 1;
  1559  0312  179E               	bsf	30,7	;volatile
  1560                           
  1561                           ;main.c: 151: ADCON1bits.ADPREF = 0b00;
  1562  0313  30FC               	movlw	-4
  1563  0314  059E               	andwf	30,f	;volatile
  1564                           
  1565                           ;main.c: 153: ADCON0bits.CHS = 3;
  1566  0315  081D               	movf	29,w	;volatile
  1567  0316  3983               	andlw	-125
  1568  0317  380C               	iorlw	12
  1569  0318  009D               	movwf	29	;volatile
  1570                           
  1571                           ;main.c: 154: ADCON0bits.ADON = 1;
  1572  0319  141D               	bsf	29,0	;volatile
  1573                           
  1574                           ;main.c: 158: TRISAbits.TRISA2 = 1;
  1575  031A  150C               	bsf	12,2	;volatile
  1576                           
  1577                           ;main.c: 159: INTCONbits.INTE = 1;
  1578  031B  160B               	bsf	11,4	;volatile
  1579                           
  1580                           ;main.c: 160: OPTION_REGbits.INTEDG = 0;
  1581  031C  1315               	bcf	21,6	;volatile
  1582                           
  1583                           ;main.c: 164: WDTCONbits.WDTPS = 11;
  1584  031D  0817               	movf	23,w	;volatile
  1585  031E  39C1               	andlw	-63
  1586  031F  3816               	iorlw	22
  1587  0320  0097               	movwf	23	;volatile
  1588                           
  1589                           ;main.c: 167: TRISAbits.TRISA5 = 0;
  1590  0321  128C               	bcf	12,5	;volatile
  1591                           
  1592                           ;main.c: 168: PORTAbits.RA5 = 0;
  1593  0322  0020               	movlb	0	; select bank0
  1594  0323  128C               	bcf	12,5	;volatile
  1595                           
  1596                           ;main.c: 171: INTCONbits.PEIE = 1;
  1597  0324  170B               	bsf	11,6	;volatile
  1598                           
  1599                           ;main.c: 172: INTCONbits.GIE = 1;
  1600  0325  178B               	bsf	11,7	;volatile
  1601                           
  1602                           ;main.c: 174: strcpy(nrf24l01TXTopic, "BOOT");
  1603  0326  3054               	movlw	low (STR_6| (0+32768))
  1604  0327  00A3               	movwf	strcpy@from
  1605  0328  3086               	movlw	high (STR_6| (0+32768))
  1606  0329  00A4               	movwf	strcpy@from+1
  1607  032A  3065               	movlw	(low (_nrf24l01TXTopic| 0))& (0+255)
  1608  032B  25B8               	fcall	_strcpy
  1609                           
  1610                           ;main.c: 175: utoa(nrf24l01TXValue, read_flashmem(0 + 16), 10);
  1611  032C  3010               	movlw	16
  1612  032D  0020               	movlb	0	; select bank0
  1613  032E  00A3               	movwf	read_flashmem@offset
  1614  032F  3000               	movlw	0
  1615  0330  00A4               	movwf	read_flashmem@offset+1
  1616  0331  24DE               	fcall	_read_flashmem
  1617  0332  0020               	movlb	0	; select bank0
  1618  0333  0824               	movf	?_read_flashmem+1,w
  1619  0334  00C0               	movwf	utoa@val+1
  1620  0335  0823               	movf	?_read_flashmem,w
  1621  0336  00BF               	movwf	utoa@val
  1622  0337  300A               	movlw	10
  1623  0338  00C1               	movwf	utoa@base
  1624  0339  3000               	movlw	0
  1625  033A  00C2               	movwf	utoa@base+1
  1626  033B  305D               	movlw	(low (_nrf24l01TXValue| 0))& (0+255)
  1627  033C  23C7               	fcall	_utoa
  1628                           
  1629                           ;main.c: 176: nrf24l01SendString(0);
  1630  033D  3000               	movlw	0
  1631  033E  219B               	fcall	_nrf24l01SendString
  1632                           
  1633                           ;main.c: 177: sleep();
  1634  033F  2615               	fcall	_sleep
  1635  0340                     l2259:	
  1636                           ;main.c: 179: while(1){
  1637                           
  1638                           
  1639                           ;main.c: 180: loop();
  1640  0340  2100               	fcall	_loop
  1641  0341  2B40               	goto	l2259
  1642  0342                     __end_of_main:	
  1643                           ;main.c: 181: }
  1644                           ;main.c: 183: return;
  1645                           
  1646                           
  1647                           	psect	text1
  1648  04DE                     __ptext1:	
  1649 ;; *************** function _read_flashmem *****************
  1650 ;; Defined at:
  1651 ;;		line 59 in file "flash.c"
  1652 ;; Parameters:    Size  Location     Type
  1653 ;;  offset          2    3[BANK0 ] unsigned int 
  1654 ;; Auto vars:     Size  Location     Type
  1655 ;;  address         2   10[BANK0 ] unsigned int 
  1656 ;;  result          2    8[BANK0 ] unsigned int 
  1657 ;; Return value:  Size  Location     Type
  1658 ;;                  2    3[BANK0 ] unsigned int 
  1659 ;; Registers used:
  1660 ;;		wreg, status,2, status,0
  1661 ;; Tracked objects:
  1662 ;;		On entry : 0/0
  1663 ;;		On exit  : 0/0
  1664 ;;		Unchanged: 0/0
  1665 ;; Data sizes:     COMMON   BANK0   BANK1
  1666 ;;      Params:         0       2       0
  1667 ;;      Locals:         0       4       0
  1668 ;;      Temps:          0       3       0
  1669 ;;      Totals:         0       9       0
  1670 ;;Total ram usage:        9 bytes
  1671 ;; Hardware stack levels used:    1
  1672 ;; Hardware stack levels required when called:    6
  1673 ;; This function calls:
  1674 ;;		Nothing
  1675 ;; This function is called by:
  1676 ;;		_main
  1677 ;; This function uses a non-reentrant model
  1678 ;;
  1679                           
  1680                           
  1681                           ;psect for function _read_flashmem
  1682  04DE                     _read_flashmem:	
  1683                           
  1684                           ;flash.c: 61: unsigned int address;
  1685                           ;flash.c: 63: INTCONbits.GIE = 0;
  1686                           
  1687                           ;incstack = 0
  1688                           ; Regs used in _read_flashmem: [wreg+status,2+status,0]
  1689  04DE  138B               	bcf	11,7	;volatile
  1690                           
  1691                           ;flash.c: 65: PMCON1 = 0x00;
  1692  04DF  0023               	movlb	3	; select bank3
  1693  04E0  0195               	clrf	21	;volatile
  1694                           
  1695                           ;flash.c: 67: address = (0x800U-32) + offset;
  1696  04E1  0020               	movlb	0	; select bank0
  1697  04E2  0823               	movf	read_flashmem@offset,w
  1698  04E3  3EE0               	addlw	224
  1699  04E4  00AA               	movwf	read_flashmem@address
  1700  04E5  3007               	movlw	7
  1701  04E6  3D24               	addwfc	read_flashmem@offset+1,w
  1702  04E7  00AB               	movwf	read_flashmem@address+1
  1703                           
  1704                           ;flash.c: 68: PMADRL = (char) (address >> 0);
  1705  04E8  082A               	movf	read_flashmem@address,w
  1706  04E9  0023               	movlb	3	; select bank3
  1707  04EA  0091               	movwf	17	;volatile
  1708                           
  1709                           ;flash.c: 69: PMADRH = (char) (address >> 8);
  1710  04EB  0020               	movlb	0	; select bank0
  1711  04EC  082B               	movf	read_flashmem@address+1,w
  1712  04ED  0023               	movlb	3	; select bank3
  1713  04EE  0092               	movwf	18	;volatile
  1714                           
  1715                           ;flash.c: 71: PMCON1bits.RD = 1;
  1716  04EF  1415               	bsf	21,0	;volatile
  1717                           
  1718                           ;flash.c: 73: __nop();
  1719  04F0  0000               	nop
  1720                           
  1721                           ;flash.c: 74: __nop();
  1722  04F1  0000               	nop
  1723                           
  1724                           ;flash.c: 76: unsigned int result = 0;
  1725  04F2  0020               	movlb	0	; select bank0
  1726  04F3  01A8               	clrf	read_flashmem@result
  1727  04F4  01A9               	clrf	read_flashmem@result+1
  1728                           
  1729                           ;flash.c: 77: result = PMDATL;
  1730  04F5  0023               	movlb	3	; select bank3
  1731  04F6  0813               	movf	19,w	;volatile
  1732  04F7  0020               	movlb	0	; select bank0
  1733  04F8  00A5               	movwf	??_read_flashmem
  1734  04F9  01A6               	clrf	??_read_flashmem+1
  1735  04FA  0825               	movf	??_read_flashmem,w
  1736  04FB  00A8               	movwf	read_flashmem@result
  1737  04FC  0826               	movf	??_read_flashmem+1,w
  1738  04FD  00A9               	movwf	read_flashmem@result+1
  1739                           
  1740                           ;flash.c: 78: result|= ( (unsigned) (PMDATH) << 8);
  1741  04FE  0023               	movlb	3	; select bank3
  1742  04FF  0814               	movf	20,w	;volatile
  1743  0500  0020               	movlb	0	; select bank0
  1744  0501  00A5               	movwf	??_read_flashmem
  1745  0502  01A6               	clrf	??_read_flashmem+1
  1746  0503  0825               	movf	??_read_flashmem,w
  1747  0504  00A6               	movwf	??_read_flashmem+1
  1748  0505  01A5               	clrf	??_read_flashmem
  1749  0506  0825               	movf	??_read_flashmem,w
  1750  0507  04A8               	iorwf	read_flashmem@result,f
  1751  0508  0826               	movf	??_read_flashmem+1,w
  1752  0509  04A9               	iorwf	read_flashmem@result+1,f
  1753                           
  1754                           ;flash.c: 80: INTCONbits.GIE = 1;
  1755  050A  178B               	bsf	11,7	;volatile
  1756                           
  1757                           ;flash.c: 82: return result;
  1758  050B  0829               	movf	read_flashmem@result+1,w
  1759  050C  00A4               	movwf	?_read_flashmem+1
  1760  050D  0828               	movf	read_flashmem@result,w
  1761  050E  00A3               	movwf	?_read_flashmem
  1762  050F  0008               	return
  1763  0510                     __end_of_read_flashmem:	
  1764                           
  1765                           	psect	text2
  1766  05D3                     __ptext2:	
  1767 ;; *************** function _nrf24l01Init *****************
  1768 ;; Defined at:
  1769 ;;		line 366 in file "nrf24l01.c"
  1770 ;; Parameters:    Size  Location     Type
  1771 ;;		None
  1772 ;; Auto vars:     Size  Location     Type
  1773 ;;		None
  1774 ;; Return value:  Size  Location     Type
  1775 ;;                  1    wreg      void 
  1776 ;; Registers used:
  1777 ;;		wreg, status,2, status,0, pclath, cstack
  1778 ;; Tracked objects:
  1779 ;;		On entry : 0/0
  1780 ;;		On exit  : 0/0
  1781 ;;		Unchanged: 0/0
  1782 ;; Data sizes:     COMMON   BANK0   BANK1
  1783 ;;      Params:         0       0       0
  1784 ;;      Locals:         0       0       0
  1785 ;;      Temps:          0       1       0
  1786 ;;      Totals:         0       1       0
  1787 ;;Total ram usage:        1 bytes
  1788 ;; Hardware stack levels used:    1
  1789 ;; Hardware stack levels required when called:    9
  1790 ;; This function calls:
  1791 ;;		_nrf24l01InitRegisters
  1792 ;;		_nrf24l01InterfaceInit
  1793 ;; This function is called by:
  1794 ;;		_main
  1795 ;; This function uses a non-reentrant model
  1796 ;;
  1797                           
  1798                           
  1799                           ;psect for function _nrf24l01Init
  1800  05D3                     _nrf24l01Init:	
  1801                           
  1802                           ;nrf24l01.c: 369: nrf24l01InterfaceInit();
  1803                           
  1804                           ;incstack = 0
  1805                           ; Regs used in _nrf24l01Init: [wreg+status,2+status,0+pclath+cstack]
  1806  05D3  25FC               	fcall	_nrf24l01InterfaceInit
  1807                           
  1808                           ;nrf24l01.c: 373: PORTAbits.RA0 = 0;
  1809  05D4  0020               	movlb	0	; select bank0
  1810  05D5  100C               	bcf	12,0	;volatile
  1811                           
  1812                           ;nrf24l01.c: 375: _delay((unsigned long)((11)*(16000000/4000.0)));
  1813  05D6  303A               	movlw	58
  1814  05D7  0020               	movlb	0	; select bank0
  1815  05D8  00AC               	movwf	??_nrf24l01Init
  1816  05D9  3023               	movlw	35
  1817  05DA                     u1637:	
  1818  05DA  0B89               	decfsz	9,f
  1819  05DB  2DDA               	goto	u1637
  1820  05DC  0BAC               	decfsz	??_nrf24l01Init,f
  1821  05DD  2DDA               	goto	u1637
  1822                           
  1823                           ;nrf24l01.c: 377: nrf24l01InitRegisters();
  1824  05DE  2231               	fcall	_nrf24l01InitRegisters
  1825                           
  1826                           ;nrf24l01.c: 379: _delay((unsigned long)((2)*(16000000/4000.0)));
  1827  05DF  300B               	movlw	11
  1828  05E0  0020               	movlb	0	; select bank0
  1829  05E1  00AC               	movwf	??_nrf24l01Init
  1830  05E2  3062               	movlw	98
  1831  05E3                     u1647:	
  1832  05E3  0B89               	decfsz	9,f
  1833  05E4  2DE3               	goto	u1647
  1834  05E5  0BAC               	decfsz	??_nrf24l01Init,f
  1835  05E6  2DE3               	goto	u1647
  1836  05E7  0000               	nop
  1837  05E8  0008               	return
  1838  05E9                     __end_of_nrf24l01Init:	
  1839                           
  1840                           	psect	text3
  1841  05FC                     __ptext3:	
  1842 ;; *************** function _nrf24l01InterfaceInit *****************
  1843 ;; Defined at:
  1844 ;;		line 7 in file "interface.c"
  1845 ;; Parameters:    Size  Location     Type
  1846 ;;		None
  1847 ;; Auto vars:     Size  Location     Type
  1848 ;;		None
  1849 ;; Return value:  Size  Location     Type
  1850 ;;                  1    wreg      void 
  1851 ;; Registers used:
  1852 ;;		wreg, status,2, status,0
  1853 ;; Tracked objects:
  1854 ;;		On entry : 0/0
  1855 ;;		On exit  : 0/0
  1856 ;;		Unchanged: 0/0
  1857 ;; Data sizes:     COMMON   BANK0   BANK1
  1858 ;;      Params:         0       0       0
  1859 ;;      Locals:         0       0       0
  1860 ;;      Temps:          0       0       0
  1861 ;;      Totals:         0       0       0
  1862 ;;Total ram usage:        0 bytes
  1863 ;; Hardware stack levels used:    1
  1864 ;; Hardware stack levels required when called:    6
  1865 ;; This function calls:
  1866 ;;		Nothing
  1867 ;; This function is called by:
  1868 ;;		_nrf24l01Init
  1869 ;; This function uses a non-reentrant model
  1870 ;;
  1871                           
  1872                           
  1873                           ;psect for function _nrf24l01InterfaceInit
  1874  05FC                     _nrf24l01InterfaceInit:	
  1875                           
  1876                           ;interface.c: 9: TRISAbits.TRISA0 = 0;
  1877                           
  1878                           ;incstack = 0
  1879                           ; Regs used in _nrf24l01InterfaceInit: [wreg+status,2+status,0]
  1880  05FC  0021               	movlb	1	; select bank1
  1881  05FD  100C               	bcf	12,0	;volatile
  1882                           
  1883                           ;interface.c: 10: TRISAbits.TRISA1 = 0;
  1884  05FE  108C               	bcf	12,1	;volatile
  1885                           
  1886                           ;interface.c: 12: TRISCbits.TRISC1 = 1;
  1887  05FF  148E               	bsf	14,1	;volatile
  1888                           
  1889                           ;interface.c: 13: TRISCbits.TRISC2 = 0;
  1890  0600  110E               	bcf	14,2	;volatile
  1891                           
  1892                           ;interface.c: 14: TRISCbits.TRISC0 = 0;
  1893  0601  100E               	bcf	14,0	;volatile
  1894                           
  1895                           ;interface.c: 16: SSPCON1bits.SSPEN = 0;
  1896  0602  0024               	movlb	4	; select bank4
  1897  0603  1295               	bcf	21,5	;volatile
  1898                           
  1899                           ;interface.c: 17: SSPCON1bits.CKP = 0;
  1900  0604  1215               	bcf	21,4	;volatile
  1901                           
  1902                           ;interface.c: 18: SSP1STATbits.CKE = 1;
  1903  0605  1714               	bsf	20,6	;volatile
  1904                           
  1905                           ;interface.c: 19: SSPCON1bits.SSPM = 0b0000;
  1906  0606  30F0               	movlw	-16
  1907  0607  0595               	andwf	21,f	;volatile
  1908                           
  1909                           ;interface.c: 21: SSPCON1bits.SSPEN = 1;
  1910  0608  1695               	bsf	21,5	;volatile
  1911  0609  0008               	return
  1912  060A                     __end_of_nrf24l01InterfaceInit:	
  1913                           
  1914                           	psect	text4
  1915  0231                     __ptext4:	
  1916 ;; *************** function _nrf24l01InitRegisters *****************
  1917 ;; Defined at:
  1918 ;;		line 281 in file "nrf24l01.c"
  1919 ;; Parameters:    Size  Location     Type
  1920 ;;		None
  1921 ;; Auto vars:     Size  Location     Type
  1922 ;;  config          1   11[BANK0 ] struct .
  1923 ;;  DynPD           1   10[BANK0 ] struct .
  1924 ;;  enAA            1    9[BANK0 ] struct .
  1925 ;;  enRXAddr        1    8[BANK0 ] struct .
  1926 ;;  status          1    7[BANK0 ] struct .
  1927 ;;  feature         1    6[BANK0 ] struct .
  1928 ;;  rfSetup         1    5[BANK0 ] struct .
  1929 ;;  setupAW         1    4[BANK0 ] struct .
  1930 ;; Return value:  Size  Location     Type
  1931 ;;                  1    wreg      void 
  1932 ;; Registers used:
  1933 ;;		wreg, status,2, status,0, pclath, cstack
  1934 ;; Tracked objects:
  1935 ;;		On entry : 0/0
  1936 ;;		On exit  : 0/0
  1937 ;;		Unchanged: 0/0
  1938 ;; Data sizes:     COMMON   BANK0   BANK1
  1939 ;;      Params:         0       0       0
  1940 ;;      Locals:         0       8       0
  1941 ;;      Temps:          0       1       0
  1942 ;;      Totals:         0       9       0
  1943 ;;Total ram usage:        9 bytes
  1944 ;; Hardware stack levels used:    1
  1945 ;; Hardware stack levels required when called:    8
  1946 ;; This function calls:
  1947 ;;		_nrf24l01Send
  1948 ;; This function is called by:
  1949 ;;		_nrf24l01Init
  1950 ;; This function uses a non-reentrant model
  1951 ;;
  1952                           
  1953                           
  1954                           ;psect for function _nrf24l01InitRegisters
  1955  0231                     _nrf24l01InitRegisters:	
  1956                           
  1957                           ;nrf24l01.c: 283: n_CONFIG_t config;
  1958                           ;nrf24l01.c: 285: config.PWR_UP = 0;
  1959                           
  1960                           ;incstack = 0
  1961                           ; Regs used in _nrf24l01InitRegisters: [wreg+status,2+status,0+pclath+cstack]
  1962  0231  0020               	movlb	0	; select bank0
  1963  0232  10AB               	bcf	nrf24l01InitRegisters@config,1
  1964                           
  1965                           ;nrf24l01.c: 286: nrf24l01Send(0b00100000 | 0x00, config.byte);
  1966  0233  082B               	movf	nrf24l01InitRegisters@config,w
  1967  0234  00A3               	movwf	??_nrf24l01InitRegisters
  1968  0235  0823               	movf	??_nrf24l01InitRegisters,w
  1969  0236  00A0               	movwf	nrf24l01Send@data
  1970  0237  3020               	movlw	32
  1971  0238  25E9               	fcall	_nrf24l01Send
  1972                           
  1973                           ;nrf24l01.c: 288: _delay((unsigned long)((10000)*(16000000/4000000.0)));
  1974  0239  3034               	movlw	52
  1975  023A  0020               	movlb	0	; select bank0
  1976  023B  00A3               	movwf	??_nrf24l01InitRegisters
  1977  023C  30F1               	movlw	241
  1978  023D                     u1657:	
  1979  023D  0B89               	decfsz	9,f
  1980  023E  2A3D               	goto	u1657
  1981  023F  0BA3               	decfsz	??_nrf24l01InitRegisters,f
  1982  0240  2A3D               	goto	u1657
  1983  0241  3200               	nop2
  1984                           
  1985                           ;nrf24l01.c: 290: n_SETUP_AW_t setupAW;
  1986                           ;nrf24l01.c: 291: setupAW.byte = 0x00;
  1987  0242  0020               	movlb	0	; select bank0
  1988  0243  01A4               	clrf	nrf24l01InitRegisters@setupAW
  1989                           
  1990                           ;nrf24l01.c: 292: setupAW.AW = 0b11;
  1991  0244  3003               	movlw	3
  1992  0245  04A4               	iorwf	nrf24l01InitRegisters@setupAW,f
  1993                           
  1994                           ;nrf24l01.c: 293: nrf24l01Send(0b00100000 | 0x02, setupAW.byte);
  1995  0246  0824               	movf	nrf24l01InitRegisters@setupAW,w
  1996  0247  00A3               	movwf	??_nrf24l01InitRegisters
  1997  0248  0823               	movf	??_nrf24l01InitRegisters,w
  1998  0249  00A0               	movwf	nrf24l01Send@data
  1999  024A  3022               	movlw	34
  2000  024B  25E9               	fcall	_nrf24l01Send
  2001                           
  2002                           ;nrf24l01.c: 301: n_RF_SETUP_t rfSetup;
  2003                           ;nrf24l01.c: 302: rfSetup.RF_DR_LOW = 0;
  2004  024C  0020               	movlb	0	; select bank0
  2005  024D  12A5               	bcf	nrf24l01InitRegisters@rfSetup,5
  2006                           
  2007                           ;nrf24l01.c: 303: rfSetup.RF_DR_HIGH = 1;
  2008  024E  15A5               	bsf	nrf24l01InitRegisters@rfSetup,3
  2009                           
  2010                           ;nrf24l01.c: 304: rfSetup.RF_PWR = 3;
  2011  024F  3006               	movlw	6
  2012  0250  04A5               	iorwf	nrf24l01InitRegisters@rfSetup,f
  2013                           
  2014                           ;nrf24l01.c: 305: nrf24l01Send(0b00100000 | 0x06, rfSetup.byte);
  2015  0251  0825               	movf	nrf24l01InitRegisters@rfSetup,w
  2016  0252  00A3               	movwf	??_nrf24l01InitRegisters
  2017  0253  0823               	movf	??_nrf24l01InitRegisters,w
  2018  0254  00A0               	movwf	nrf24l01Send@data
  2019  0255  3026               	movlw	38
  2020  0256  25E9               	fcall	_nrf24l01Send
  2021                           
  2022                           ;nrf24l01.c: 308: n_EN_RXADDR_t enRXAddr;
  2023                           ;nrf24l01.c: 309: enRXAddr.ERX_P0 = 1;
  2024  0257  0020               	movlb	0	; select bank0
  2025  0258  1428               	bsf	nrf24l01InitRegisters@enRXAddr,0
  2026                           
  2027                           ;nrf24l01.c: 310: enRXAddr.ERX_P1 = 1;
  2028  0259  14A8               	bsf	nrf24l01InitRegisters@enRXAddr,1
  2029                           
  2030                           ;nrf24l01.c: 311: enRXAddr.ERX_P2 = 1;
  2031  025A  1528               	bsf	nrf24l01InitRegisters@enRXAddr,2
  2032                           
  2033                           ;nrf24l01.c: 312: enRXAddr.ERX_P3 = 1;
  2034  025B  15A8               	bsf	nrf24l01InitRegisters@enRXAddr,3
  2035                           
  2036                           ;nrf24l01.c: 313: enRXAddr.ERX_P4 = 1;
  2037  025C  1628               	bsf	nrf24l01InitRegisters@enRXAddr,4
  2038                           
  2039                           ;nrf24l01.c: 314: enRXAddr.ERX_P5 = 1;
  2040  025D  16A8               	bsf	nrf24l01InitRegisters@enRXAddr,5
  2041                           
  2042                           ;nrf24l01.c: 315: nrf24l01Send(0b00100000 | 0x02, enRXAddr.byte);
  2043  025E  0828               	movf	nrf24l01InitRegisters@enRXAddr,w
  2044  025F  00A3               	movwf	??_nrf24l01InitRegisters
  2045  0260  0823               	movf	??_nrf24l01InitRegisters,w
  2046  0261  00A0               	movwf	nrf24l01Send@data
  2047  0262  3022               	movlw	34
  2048  0263  25E9               	fcall	_nrf24l01Send
  2049                           
  2050                           ;nrf24l01.c: 318: n_EN_AA_t enAA;
  2051                           ;nrf24l01.c: 319: enAA.byte = nrf24l01Send(0b00000000 | 0x01, 0);
  2052  0264  0020               	movlb	0	; select bank0
  2053  0265  01A0               	clrf	nrf24l01Send@data
  2054  0266  3001               	movlw	1
  2055  0267  25E9               	fcall	_nrf24l01Send
  2056  0268  0020               	movlb	0	; select bank0
  2057  0269  00A3               	movwf	??_nrf24l01InitRegisters
  2058  026A  0823               	movf	??_nrf24l01InitRegisters,w
  2059  026B  00A9               	movwf	nrf24l01InitRegisters@enAA
  2060                           
  2061                           ;nrf24l01.c: 320: enAA.ENAA_P0 = 0;
  2062  026C  1029               	bcf	nrf24l01InitRegisters@enAA,0
  2063                           
  2064                           ;nrf24l01.c: 321: enAA.ENAA_P1 = 0;
  2065  026D  10A9               	bcf	nrf24l01InitRegisters@enAA,1
  2066                           
  2067                           ;nrf24l01.c: 322: enAA.ENAA_P2 = 0;
  2068  026E  1129               	bcf	nrf24l01InitRegisters@enAA,2
  2069                           
  2070                           ;nrf24l01.c: 323: enAA.ENAA_P3 = 0;
  2071  026F  11A9               	bcf	nrf24l01InitRegisters@enAA,3
  2072                           
  2073                           ;nrf24l01.c: 324: enAA.ENAA_P4 = 0;
  2074  0270  1229               	bcf	nrf24l01InitRegisters@enAA,4
  2075                           
  2076                           ;nrf24l01.c: 325: enAA.ENAA_P5 = 0;
  2077  0271  12A9               	bcf	nrf24l01InitRegisters@enAA,5
  2078                           
  2079                           ;nrf24l01.c: 326: nrf24l01Send(0b00100000 | 0x01, enAA.byte);
  2080  0272  0829               	movf	nrf24l01InitRegisters@enAA,w
  2081  0273  00A3               	movwf	??_nrf24l01InitRegisters
  2082  0274  0823               	movf	??_nrf24l01InitRegisters,w
  2083  0275  00A0               	movwf	nrf24l01Send@data
  2084  0276  3021               	movlw	33
  2085  0277  25E9               	fcall	_nrf24l01Send
  2086                           
  2087                           ;nrf24l01.c: 330: n_FEATURE_t feature;
  2088                           ;nrf24l01.c: 331: feature.byte = nrf24l01Send(0b00000000 | 0x1D, 0);
  2089  0278  0020               	movlb	0	; select bank0
  2090  0279  01A0               	clrf	nrf24l01Send@data
  2091  027A  301D               	movlw	29
  2092  027B  25E9               	fcall	_nrf24l01Send
  2093  027C  0020               	movlb	0	; select bank0
  2094  027D  00A3               	movwf	??_nrf24l01InitRegisters
  2095  027E  0823               	movf	??_nrf24l01InitRegisters,w
  2096  027F  00A6               	movwf	nrf24l01InitRegisters@feature
  2097                           
  2098                           ;nrf24l01.c: 332: feature.EN_DPL = 1;
  2099  0280  1526               	bsf	nrf24l01InitRegisters@feature,2
  2100                           
  2101                           ;nrf24l01.c: 333: feature.EN_DYN_ACK = 1;
  2102  0281  1426               	bsf	nrf24l01InitRegisters@feature,0
  2103                           
  2104                           ;nrf24l01.c: 334: nrf24l01Send(0b00100000 | 0x1D, feature.byte);
  2105  0282  0826               	movf	nrf24l01InitRegisters@feature,w
  2106  0283  00A3               	movwf	??_nrf24l01InitRegisters
  2107  0284  0823               	movf	??_nrf24l01InitRegisters,w
  2108  0285  00A0               	movwf	nrf24l01Send@data
  2109  0286  303D               	movlw	61
  2110  0287  25E9               	fcall	_nrf24l01Send
  2111                           
  2112                           ;nrf24l01.c: 336: n_DYNPD_t DynPD;
  2113                           ;nrf24l01.c: 337: DynPD.byte = nrf24l01Send(0b00000000 | 0x1C, 0);
  2114  0288  0020               	movlb	0	; select bank0
  2115  0289  01A0               	clrf	nrf24l01Send@data
  2116  028A  301C               	movlw	28
  2117  028B  25E9               	fcall	_nrf24l01Send
  2118  028C  0020               	movlb	0	; select bank0
  2119  028D  00A3               	movwf	??_nrf24l01InitRegisters
  2120  028E  0823               	movf	??_nrf24l01InitRegisters,w
  2121  028F  00AA               	movwf	nrf24l01InitRegisters@DynPD
  2122                           
  2123                           ;nrf24l01.c: 338: DynPD.DPL_P0 = 1;
  2124  0290  142A               	bsf	nrf24l01InitRegisters@DynPD,0
  2125                           
  2126                           ;nrf24l01.c: 339: DynPD.DPL_P1 = 1;
  2127  0291  14AA               	bsf	nrf24l01InitRegisters@DynPD,1
  2128                           
  2129                           ;nrf24l01.c: 340: DynPD.DPL_P2 = 1;
  2130  0292  152A               	bsf	nrf24l01InitRegisters@DynPD,2
  2131                           
  2132                           ;nrf24l01.c: 341: DynPD.DPL_P3 = 1;
  2133  0293  15AA               	bsf	nrf24l01InitRegisters@DynPD,3
  2134                           
  2135                           ;nrf24l01.c: 342: DynPD.DPL_P4 = 1;
  2136  0294  162A               	bsf	nrf24l01InitRegisters@DynPD,4
  2137                           
  2138                           ;nrf24l01.c: 343: DynPD.DPL_P5 = 1;
  2139  0295  16AA               	bsf	nrf24l01InitRegisters@DynPD,5
  2140                           
  2141                           ;nrf24l01.c: 344: nrf24l01Send(0b00100000 | 0x1C, DynPD.byte);
  2142  0296  082A               	movf	nrf24l01InitRegisters@DynPD,w
  2143  0297  00A3               	movwf	??_nrf24l01InitRegisters
  2144  0298  0823               	movf	??_nrf24l01InitRegisters,w
  2145  0299  00A0               	movwf	nrf24l01Send@data
  2146  029A  303C               	movlw	60
  2147  029B  25E9               	fcall	_nrf24l01Send
  2148                           
  2149                           ;nrf24l01.c: 347: n_STATUS_t status;
  2150                           ;nrf24l01.c: 348: status.byte = 0x00;
  2151  029C  0020               	movlb	0	; select bank0
  2152  029D  01A7               	clrf	nrf24l01InitRegisters@status
  2153                           
  2154                           ;nrf24l01.c: 349: status.RX_DR = 1;
  2155  029E  1727               	bsf	nrf24l01InitRegisters@status,6
  2156                           
  2157                           ;nrf24l01.c: 350: status.TX_DS = 1;
  2158  029F  16A7               	bsf	nrf24l01InitRegisters@status,5
  2159                           
  2160                           ;nrf24l01.c: 351: status.MAX_RT = 1;
  2161  02A0  1627               	bsf	nrf24l01InitRegisters@status,4
  2162                           
  2163                           ;nrf24l01.c: 352: nrf24l01Send(0b00100000 | 0x07, status.byte);
  2164  02A1  0827               	movf	nrf24l01InitRegisters@status,w
  2165  02A2  00A3               	movwf	??_nrf24l01InitRegisters
  2166  02A3  0823               	movf	??_nrf24l01InitRegisters,w
  2167  02A4  00A0               	movwf	nrf24l01Send@data
  2168  02A5  3027               	movlw	39
  2169  02A6  25E9               	fcall	_nrf24l01Send
  2170                           
  2171                           ;nrf24l01.c: 355: nrf24l01Send(0b11100001, 0);
  2172  02A7  0020               	movlb	0	; select bank0
  2173  02A8  01A0               	clrf	nrf24l01Send@data
  2174  02A9  30E1               	movlw	225
  2175  02AA  25E9               	fcall	_nrf24l01Send
  2176                           
  2177                           ;nrf24l01.c: 356: nrf24l01Send(0b11100010, 0);
  2178  02AB  0020               	movlb	0	; select bank0
  2179  02AC  01A0               	clrf	nrf24l01Send@data
  2180  02AD  30E2               	movlw	226
  2181  02AE  25E9               	fcall	_nrf24l01Send
  2182                           
  2183                           ;nrf24l01.c: 359: config.PRIM_RX = 1;
  2184  02AF  0020               	movlb	0	; select bank0
  2185  02B0  142B               	bsf	nrf24l01InitRegisters@config,0
  2186                           
  2187                           ;nrf24l01.c: 360: config.EN_CRC = 1;
  2188  02B1  15AB               	bsf	nrf24l01InitRegisters@config,3
  2189                           
  2190                           ;nrf24l01.c: 361: config.CRCO = 1;
  2191  02B2  152B               	bsf	nrf24l01InitRegisters@config,2
  2192                           
  2193                           ;nrf24l01.c: 362: config.PWR_UP = 1;
  2194  02B3  14AB               	bsf	nrf24l01InitRegisters@config,1
  2195                           
  2196                           ;nrf24l01.c: 363: nrf24l01Send(0b00100000 | 0x00, config.byte);
  2197  02B4  082B               	movf	nrf24l01InitRegisters@config,w
  2198  02B5  00A3               	movwf	??_nrf24l01InitRegisters
  2199  02B6  0823               	movf	??_nrf24l01InitRegisters,w
  2200  02B7  00A0               	movwf	nrf24l01Send@data
  2201  02B8  3020               	movlw	32
  2202  02B9  25E9               	fcall	_nrf24l01Send
  2203  02BA  0008               	return
  2204  02BB                     __end_of_nrf24l01InitRegisters:	
  2205                           
  2206                           	psect	text5
  2207  0100                     __ptext5:	
  2208 ;; *************** function _loop *****************
  2209 ;; Defined at:
  2210 ;;		line 70 in file "main.c"
  2211 ;; Parameters:    Size  Location     Type
  2212 ;;		None
  2213 ;; Auto vars:     Size  Location     Type
  2214 ;;		None
  2215 ;; Return value:  Size  Location     Type
  2216 ;;                  1    wreg      void 
  2217 ;; Registers used:
  2218 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2219 ;; Tracked objects:
  2220 ;;		On entry : 0/0
  2221 ;;		On exit  : 0/0
  2222 ;;		Unchanged: 0/0
  2223 ;; Data sizes:     COMMON   BANK0   BANK1
  2224 ;;      Params:         0       0       0
  2225 ;;      Locals:         0       0       0
  2226 ;;      Temps:          0       0       0
  2227 ;;      Totals:         0       0       0
  2228 ;;Total ram usage:        0 bytes
  2229 ;; Hardware stack levels used:    1
  2230 ;; Hardware stack levels required when called:   10
  2231 ;; This function calls:
  2232 ;;		_getADCValue
  2233 ;;		_nrf24l01SendString
  2234 ;;		_sleep
  2235 ;;		_strcpy
  2236 ;;		_utoa
  2237 ;; This function is called by:
  2238 ;;		_main
  2239 ;; This function uses a non-reentrant model
  2240 ;;
  2241                           
  2242                           
  2243                           ;psect for function _loop
  2244  0100                     _loop:	
  2245                           
  2246                           ;main.c: 74: strcpy(nrf24l01TXTopic, "DBG");
  2247                           
  2248                           ;incstack = 0
  2249                           ; Regs used in _loop: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  2250  0100  305D               	movlw	low (STR_1| (0+32768))
  2251  0101  0020               	movlb	0	; select bank0
  2252  0102  00A3               	movwf	strcpy@from
  2253  0103  3086               	movlw	high (STR_1| (0+32768))
  2254  0104  00A4               	movwf	strcpy@from+1
  2255  0105  3065               	movlw	(low (_nrf24l01TXTopic| 0))& (0+255)
  2256  0106  25B8               	fcall	_strcpy
  2257                           
  2258                           ;main.c: 75: utoa(nrf24l01TXValue, counter, 10);
  2259  0107  0020               	movlb	0	; select bank0
  2260  0108  084A               	movf	_counter+1,w
  2261  0109  00C0               	movwf	utoa@val+1
  2262  010A  0849               	movf	_counter,w
  2263  010B  00BF               	movwf	utoa@val
  2264  010C  300A               	movlw	10
  2265  010D  00C1               	movwf	utoa@base
  2266  010E  3000               	movlw	0
  2267  010F  00C2               	movwf	utoa@base+1
  2268  0110  305D               	movlw	(low (_nrf24l01TXValue| 0))& (0+255)
  2269  0111  23C7               	fcall	_utoa
  2270                           
  2271                           ;main.c: 76: counter = 0;
  2272  0112  0020               	movlb	0	; select bank0
  2273  0113  01C9               	clrf	_counter
  2274  0114  01CA               	clrf	_counter+1
  2275                           
  2276                           ;main.c: 77: nrf24l01SendString(0);
  2277  0115  3000               	movlw	0
  2278  0116  219B               	fcall	_nrf24l01SendString
  2279                           
  2280                           ;main.c: 78: sleep();
  2281  0117  2615               	fcall	_sleep
  2282                           
  2283                           ;main.c: 80: strcpy(nrf24l01TXTopic, "ADC3");
  2284  0118  304A               	movlw	low (STR_2| (0+32768))
  2285  0119  0020               	movlb	0	; select bank0
  2286  011A  00A3               	movwf	strcpy@from
  2287  011B  3086               	movlw	high (STR_2| (0+32768))
  2288  011C  00A4               	movwf	strcpy@from+1
  2289  011D  3065               	movlw	(low (_nrf24l01TXTopic| 0))& (0+255)
  2290  011E  25B8               	fcall	_strcpy
  2291                           
  2292                           ;main.c: 81: utoa(nrf24l01TXValue, getADCValue(3, 2505), 10);
  2293  011F  3000               	movlw	0
  2294  0120  0020               	movlb	0	; select bank0
  2295  0121  00B4               	movwf	getADCValue@divider+3
  2296  0122  3000               	movlw	0
  2297  0123  00B3               	movwf	getADCValue@divider+2
  2298  0124  3009               	movlw	9
  2299  0125  00B2               	movwf	getADCValue@divider+1
  2300  0126  30C9               	movlw	201
  2301  0127  00B1               	movwf	getADCValue@divider
  2302  0128  3003               	movlw	3
  2303  0129  2342               	fcall	_getADCValue
  2304  012A  0020               	movlb	0	; select bank0
  2305  012B  0832               	movf	?_getADCValue+1,w
  2306  012C  00C0               	movwf	utoa@val+1
  2307  012D  0831               	movf	?_getADCValue,w
  2308  012E  00BF               	movwf	utoa@val
  2309  012F  300A               	movlw	10
  2310  0130  00C1               	movwf	utoa@base
  2311  0131  3000               	movlw	0
  2312  0132  00C2               	movwf	utoa@base+1
  2313  0133  305D               	movlw	(low (_nrf24l01TXValue| 0))& (0+255)
  2314  0134  23C7               	fcall	_utoa
  2315                           
  2316                           ;main.c: 82: nrf24l01SendString(1);
  2317  0135  3001               	movlw	1
  2318  0136  219B               	fcall	_nrf24l01SendString
  2319                           
  2320                           ;main.c: 83: sleep();
  2321  0137  2615               	fcall	_sleep
  2322                           
  2323                           ;main.c: 85: strcpy(nrf24l01TXTopic, "ADC7");
  2324  0138  304F               	movlw	low (STR_3| (0+32768))
  2325  0139  0020               	movlb	0	; select bank0
  2326  013A  00A3               	movwf	strcpy@from
  2327  013B  3086               	movlw	high (STR_3| (0+32768))
  2328  013C  00A4               	movwf	strcpy@from+1
  2329  013D  3065               	movlw	(low (_nrf24l01TXTopic| 0))& (0+255)
  2330  013E  25B8               	fcall	_strcpy
  2331                           
  2332                           ;main.c: 86: utoa(nrf24l01TXValue, getADCValue(7, 2500), 10);
  2333  013F  3000               	movlw	0
  2334  0140  0020               	movlb	0	; select bank0
  2335  0141  00B4               	movwf	getADCValue@divider+3
  2336  0142  3000               	movlw	0
  2337  0143  00B3               	movwf	getADCValue@divider+2
  2338  0144  3009               	movlw	9
  2339  0145  00B2               	movwf	getADCValue@divider+1
  2340  0146  30C4               	movlw	196
  2341  0147  00B1               	movwf	getADCValue@divider
  2342  0148  3007               	movlw	7
  2343  0149  2342               	fcall	_getADCValue
  2344  014A  0020               	movlb	0	; select bank0
  2345  014B  0832               	movf	?_getADCValue+1,w
  2346  014C  00C0               	movwf	utoa@val+1
  2347  014D  0831               	movf	?_getADCValue,w
  2348  014E  00BF               	movwf	utoa@val
  2349  014F  300A               	movlw	10
  2350  0150  00C1               	movwf	utoa@base
  2351  0151  3000               	movlw	0
  2352  0152  00C2               	movwf	utoa@base+1
  2353  0153  305D               	movlw	(low (_nrf24l01TXValue| 0))& (0+255)
  2354  0154  23C7               	fcall	_utoa
  2355                           
  2356                           ;main.c: 87: nrf24l01SendString(1);
  2357  0155  3001               	movlw	1
  2358  0156  219B               	fcall	_nrf24l01SendString
  2359                           
  2360                           ;main.c: 88: sleep();
  2361  0157  2615               	fcall	_sleep
  2362                           
  2363                           ;main.c: 90: strcpy(nrf24l01TXTopic, "ADC29");
  2364  0158  3039               	movlw	low (STR_4| (0+32768))
  2365  0159  0020               	movlb	0	; select bank0
  2366  015A  00A3               	movwf	strcpy@from
  2367  015B  3086               	movlw	high (STR_4| (0+32768))
  2368  015C  00A4               	movwf	strcpy@from+1
  2369  015D  3065               	movlw	(low (_nrf24l01TXTopic| 0))& (0+255)
  2370  015E  25B8               	fcall	_strcpy
  2371                           
  2372                           ;main.c: 91: utoa(nrf24l01TXValue, getADCValue(29, 208900) - 40, 10);
  2373  015F  3000               	movlw	0
  2374  0160  0020               	movlb	0	; select bank0
  2375  0161  00B4               	movwf	getADCValue@divider+3
  2376  0162  3003               	movlw	3
  2377  0163  00B3               	movwf	getADCValue@divider+2
  2378  0164  3030               	movlw	48
  2379  0165  00B2               	movwf	getADCValue@divider+1
  2380  0166  3004               	movlw	4
  2381  0167  00B1               	movwf	getADCValue@divider
  2382  0168  301D               	movlw	29
  2383  0169  2342               	fcall	_getADCValue
  2384  016A  0020               	movlb	0	; select bank0
  2385  016B  0831               	movf	?_getADCValue,w
  2386  016C  3ED8               	addlw	216
  2387  016D  00BF               	movwf	utoa@val
  2388  016E  30FF               	movlw	255
  2389  016F  3D32               	addwfc	?_getADCValue+1,w
  2390  0170  00C0               	movwf	utoa@val+1
  2391  0171  300A               	movlw	10
  2392  0172  00C1               	movwf	utoa@base
  2393  0173  3000               	movlw	0
  2394  0174  00C2               	movwf	utoa@base+1
  2395  0175  305D               	movlw	(low (_nrf24l01TXValue| 0))& (0+255)
  2396  0176  23C7               	fcall	_utoa
  2397                           
  2398                           ;main.c: 92: nrf24l01SendString(1);
  2399  0177  3001               	movlw	1
  2400  0178  219B               	fcall	_nrf24l01SendString
  2401                           
  2402                           ;main.c: 93: sleep();
  2403  0179  2615               	fcall	_sleep
  2404                           
  2405                           ;main.c: 95: strcpy(nrf24l01TXTopic, "ADC31");
  2406  017A  3033               	movlw	low (STR_5| (0+32768))
  2407  017B  0020               	movlb	0	; select bank0
  2408  017C  00A3               	movwf	strcpy@from
  2409  017D  3086               	movlw	high (STR_5| (0+32768))
  2410  017E  00A4               	movwf	strcpy@from+1
  2411  017F  3065               	movlw	(low (_nrf24l01TXTopic| 0))& (0+255)
  2412  0180  25B8               	fcall	_strcpy
  2413                           
  2414                           ;main.c: 96: utoa(nrf24l01TXValue, getADCValue(31, 2475), 10);
  2415  0181  3000               	movlw	0
  2416  0182  0020               	movlb	0	; select bank0
  2417  0183  00B4               	movwf	getADCValue@divider+3
  2418  0184  3000               	movlw	0
  2419  0185  00B3               	movwf	getADCValue@divider+2
  2420  0186  3009               	movlw	9
  2421  0187  00B2               	movwf	getADCValue@divider+1
  2422  0188  30AB               	movlw	171
  2423  0189  00B1               	movwf	getADCValue@divider
  2424  018A  301F               	movlw	31
  2425  018B  2342               	fcall	_getADCValue
  2426  018C  0020               	movlb	0	; select bank0
  2427  018D  0832               	movf	?_getADCValue+1,w
  2428  018E  00C0               	movwf	utoa@val+1
  2429  018F  0831               	movf	?_getADCValue,w
  2430  0190  00BF               	movwf	utoa@val
  2431  0191  300A               	movlw	10
  2432  0192  00C1               	movwf	utoa@base
  2433  0193  3000               	movlw	0
  2434  0194  00C2               	movwf	utoa@base+1
  2435  0195  305D               	movlw	(low (_nrf24l01TXValue| 0))& (0+255)
  2436  0196  23C7               	fcall	_utoa
  2437                           
  2438                           ;main.c: 97: nrf24l01SendString(1);
  2439  0197  3001               	movlw	1
  2440  0198  219B               	fcall	_nrf24l01SendString
  2441                           
  2442                           ;main.c: 98: sleep();
  2443  0199  2615               	fcall	_sleep
  2444  019A  0008               	return
  2445  019B                     __end_of_loop:	
  2446                           
  2447                           	psect	text6
  2448  03C7                     __ptext6:	
  2449 ;; *************** function _utoa *****************
  2450 ;; Defined at:
  2451 ;;		line 17 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\itoa.c"
  2452 ;; Parameters:    Size  Location     Type
  2453 ;;  buf             1    wreg     PTR unsigned char 
  2454 ;;		 -> nrf24l01TXValue(8), 
  2455 ;;  val             2   31[BANK0 ] unsigned int 
  2456 ;;  base            2   33[BANK0 ] int 
  2457 ;; Auto vars:     Size  Location     Type
  2458 ;;  buf             1   39[BANK0 ] PTR unsigned char 
  2459 ;;		 -> nrf24l01TXValue(8), 
  2460 ;;  v               2   36[BANK0 ] unsigned int 
  2461 ;;  c               1   38[BANK0 ] unsigned char 
  2462 ;; Return value:  Size  Location     Type
  2463 ;;                  1    wreg      PTR unsigned char 
  2464 ;; Registers used:
  2465 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2466 ;; Tracked objects:
  2467 ;;		On entry : 0/0
  2468 ;;		On exit  : 0/0
  2469 ;;		Unchanged: 0/0
  2470 ;; Data sizes:     COMMON   BANK0   BANK1
  2471 ;;      Params:         0       4       0
  2472 ;;      Locals:         0       4       0
  2473 ;;      Temps:          0       1       0
  2474 ;;      Totals:         0       9       0
  2475 ;;Total ram usage:        9 bytes
  2476 ;; Hardware stack levels used:    1
  2477 ;; Hardware stack levels required when called:    7
  2478 ;; This function calls:
  2479 ;;		___lwdiv
  2480 ;;		___lwmod
  2481 ;; This function is called by:
  2482 ;;		_loop
  2483 ;;		_main
  2484 ;; This function uses a non-reentrant model
  2485 ;;
  2486                           
  2487                           
  2488                           ;psect for function _utoa
  2489  03C7                     _utoa:	
  2490                           
  2491                           ;incstack = 0
  2492                           ; Regs used in _utoa: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  2493                           ;utoa@buf stored from wreg
  2494  03C7  0020               	movlb	0	; select bank0
  2495  03C8  00C7               	movwf	utoa@buf
  2496  03C9  0840               	movf	utoa@val+1,w
  2497  03CA  00C5               	movwf	utoa@v+1
  2498  03CB  083F               	movf	utoa@val,w
  2499  03CC  00C4               	movwf	utoa@v
  2500  03CD                     l1649:	
  2501  03CD  0842               	movf	utoa@base+1,w
  2502  03CE  00A4               	movwf	___lwdiv@divisor+1
  2503  03CF  0841               	movf	utoa@base,w
  2504  03D0  00A3               	movwf	___lwdiv@divisor
  2505  03D1  0845               	movf	utoa@v+1,w
  2506  03D2  00A6               	movwf	___lwdiv@dividend+1
  2507  03D3  0844               	movf	utoa@v,w
  2508  03D4  00A5               	movwf	___lwdiv@dividend
  2509  03D5  2476               	fcall	___lwdiv
  2510  03D6  0020               	movlb	0	; select bank0
  2511  03D7  0824               	movf	?___lwdiv+1,w
  2512  03D8  00C5               	movwf	utoa@v+1
  2513  03D9  0823               	movf	?___lwdiv,w
  2514  03DA  00C4               	movwf	utoa@v
  2515  03DB  3001               	movlw	1
  2516  03DC  00C3               	movwf	??_utoa
  2517  03DD  0843               	movf	??_utoa,w
  2518  03DE  07C7               	addwf	utoa@buf,f
  2519  03DF  0844               	movf	utoa@v,w
  2520  03E0  0445               	iorwf	utoa@v+1,w
  2521  03E1  1D03               	btfss	3,2
  2522  03E2  2BCD               	goto	l1649
  2523  03E3  0847               	movf	utoa@buf,w
  2524  03E4  0086               	movwf	6
  2525  03E5  0187               	clrf	7
  2526  03E6  0181               	clrf	1
  2527  03E7  3001               	movlw	1
  2528  03E8  02C7               	subwf	utoa@buf,f
  2529  03E9                     l1659:	
  2530  03E9  0842               	movf	utoa@base+1,w
  2531  03EA  00A4               	movwf	___lwmod@divisor+1
  2532  03EB  0841               	movf	utoa@base,w
  2533  03EC  00A3               	movwf	___lwmod@divisor
  2534  03ED  0840               	movf	utoa@val+1,w
  2535  03EE  00A6               	movwf	___lwmod@dividend+1
  2536  03EF  083F               	movf	utoa@val,w
  2537  03F0  00A5               	movwf	___lwmod@dividend
  2538  03F1  2540               	fcall	___lwmod
  2539  03F2  0020               	movlb	0	; select bank0
  2540  03F3  0823               	movf	?___lwmod,w
  2541  03F4  00C3               	movwf	??_utoa
  2542  03F5  0843               	movf	??_utoa,w
  2543  03F6  00C6               	movwf	utoa@c
  2544  03F7  0842               	movf	utoa@base+1,w
  2545  03F8  00A4               	movwf	___lwdiv@divisor+1
  2546  03F9  0841               	movf	utoa@base,w
  2547  03FA  00A3               	movwf	___lwdiv@divisor
  2548  03FB  0840               	movf	utoa@val+1,w
  2549  03FC  00A6               	movwf	___lwdiv@dividend+1
  2550  03FD  083F               	movf	utoa@val,w
  2551  03FE  00A5               	movwf	___lwdiv@dividend
  2552  03FF  2476               	fcall	___lwdiv
  2553  0400  0020               	movlb	0	; select bank0
  2554  0401  0824               	movf	?___lwdiv+1,w
  2555  0402  00C0               	movwf	utoa@val+1
  2556  0403  0823               	movf	?___lwdiv,w
  2557  0404  00BF               	movwf	utoa@val
  2558  0405  300A               	movlw	10
  2559  0406  0246               	subwf	utoa@c,w
  2560  0407  1C03               	skipc
  2561  0408  2C0D               	goto	l576
  2562  0409  3007               	movlw	7
  2563  040A  00C3               	movwf	??_utoa
  2564  040B  0843               	movf	??_utoa,w
  2565  040C  07C6               	addwf	utoa@c,f
  2566  040D                     l576:	
  2567  040D  3030               	movlw	48
  2568  040E  00C3               	movwf	??_utoa
  2569  040F  0843               	movf	??_utoa,w
  2570  0410  07C6               	addwf	utoa@c,f
  2571  0411  0846               	movf	utoa@c,w
  2572  0412  00C3               	movwf	??_utoa
  2573  0413  0847               	movf	utoa@buf,w
  2574  0414  0086               	movwf	6
  2575  0415  0187               	clrf	7
  2576  0416  0843               	movf	??_utoa,w
  2577  0417  0081               	movwf	1
  2578  0418  3001               	movlw	1
  2579  0419  02C7               	subwf	utoa@buf,f
  2580  041A  083F               	movf	utoa@val,w
  2581  041B  0440               	iorwf	utoa@val+1,w
  2582  041C  1D03               	btfss	3,2
  2583  041D  2BE9               	goto	l1659
  2584                           
  2585                           ;	Return value of _utoa is never used
  2586  041E  3001               	movlw	1
  2587  041F  00C3               	movwf	??_utoa
  2588  0420  0843               	movf	??_utoa,w
  2589  0421  07C7               	addwf	utoa@buf,f
  2590  0422  0008               	return
  2591  0423                     __end_of_utoa:	
  2592                           
  2593                           	psect	text7
  2594  0540                     __ptext7:	
  2595 ;; *************** function ___lwmod *****************
  2596 ;; Defined at:
  2597 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwmod.c"
  2598 ;; Parameters:    Size  Location     Type
  2599 ;;  divisor         2    3[BANK0 ] unsigned int 
  2600 ;;  dividend        2    5[BANK0 ] unsigned int 
  2601 ;; Auto vars:     Size  Location     Type
  2602 ;;  counter         1    8[BANK0 ] unsigned char 
  2603 ;; Return value:  Size  Location     Type
  2604 ;;                  2    3[BANK0 ] unsigned int 
  2605 ;; Registers used:
  2606 ;;		wreg, status,2, status,0
  2607 ;; Tracked objects:
  2608 ;;		On entry : 0/0
  2609 ;;		On exit  : 0/0
  2610 ;;		Unchanged: 0/0
  2611 ;; Data sizes:     COMMON   BANK0   BANK1
  2612 ;;      Params:         0       4       0
  2613 ;;      Locals:         0       1       0
  2614 ;;      Temps:          0       1       0
  2615 ;;      Totals:         0       6       0
  2616 ;;Total ram usage:        6 bytes
  2617 ;; Hardware stack levels used:    1
  2618 ;; Hardware stack levels required when called:    6
  2619 ;; This function calls:
  2620 ;;		Nothing
  2621 ;; This function is called by:
  2622 ;;		_utoa
  2623 ;; This function uses a non-reentrant model
  2624 ;;
  2625                           
  2626                           
  2627                           ;psect for function ___lwmod
  2628  0540                     ___lwmod:	
  2629                           
  2630                           ;incstack = 0
  2631                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  2632  0540  0020               	movlb	0	; select bank0
  2633  0541  0823               	movf	___lwmod@divisor,w
  2634  0542  0424               	iorwf	___lwmod@divisor+1,w
  2635  0543  1903               	btfsc	3,2
  2636  0544  2D68               	goto	l1609
  2637  0545  01A8               	clrf	___lwmod@counter
  2638  0546  0AA8               	incf	___lwmod@counter,f
  2639  0547                     l1599:	
  2640  0547  1BA4               	btfsc	___lwmod@divisor+1,7
  2641  0548  2D53               	goto	l1601
  2642  0549  3001               	movlw	1
  2643  054A                     u1025:	
  2644  054A  35A3               	lslf	___lwmod@divisor,f
  2645  054B  0DA4               	rlf	___lwmod@divisor+1,f
  2646  054C  0B89               	decfsz	9,f
  2647  054D  2D4A               	goto	u1025
  2648  054E  3001               	movlw	1
  2649  054F  00A7               	movwf	??___lwmod
  2650  0550  0827               	movf	??___lwmod,w
  2651  0551  07A8               	addwf	___lwmod@counter,f
  2652  0552  2D47               	goto	l1599
  2653  0553                     l1601:	
  2654  0553  0824               	movf	___lwmod@divisor+1,w
  2655  0554  0226               	subwf	___lwmod@dividend+1,w
  2656  0555  1D03               	skipz
  2657  0556  2D59               	goto	u1045
  2658  0557  0823               	movf	___lwmod@divisor,w
  2659  0558  0225               	subwf	___lwmod@dividend,w
  2660  0559                     u1045:	
  2661  0559  1C03               	skipc
  2662  055A  2D5F               	goto	l1605
  2663  055B  0823               	movf	___lwmod@divisor,w
  2664  055C  02A5               	subwf	___lwmod@dividend,f
  2665  055D  0824               	movf	___lwmod@divisor+1,w
  2666  055E  3BA6               	subwfb	___lwmod@dividend+1,f
  2667  055F                     l1605:	
  2668  055F  3001               	movlw	1
  2669  0560                     u1055:	
  2670  0560  36A4               	lsrf	___lwmod@divisor+1,f
  2671  0561  0CA3               	rrf	___lwmod@divisor,f
  2672  0562  0B89               	decfsz	9,f
  2673  0563  2D60               	goto	u1055
  2674  0564  3001               	movlw	1
  2675  0565  02A8               	subwf	___lwmod@counter,f
  2676  0566  1D03               	btfss	3,2
  2677  0567  2D53               	goto	l1601
  2678  0568                     l1609:	
  2679  0568  0826               	movf	___lwmod@dividend+1,w
  2680  0569  00A4               	movwf	?___lwmod+1
  2681  056A  0825               	movf	___lwmod@dividend,w
  2682  056B  00A3               	movwf	?___lwmod
  2683  056C  0008               	return
  2684  056D                     __end_of___lwmod:	
  2685                           
  2686                           	psect	text8
  2687  0476                     __ptext8:	
  2688 ;; *************** function ___lwdiv *****************
  2689 ;; Defined at:
  2690 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwdiv.c"
  2691 ;; Parameters:    Size  Location     Type
  2692 ;;  divisor         2    3[BANK0 ] unsigned int 
  2693 ;;  dividend        2    5[BANK0 ] unsigned int 
  2694 ;; Auto vars:     Size  Location     Type
  2695 ;;  quotient        2    8[BANK0 ] unsigned int 
  2696 ;;  counter         1   10[BANK0 ] unsigned char 
  2697 ;; Return value:  Size  Location     Type
  2698 ;;                  2    3[BANK0 ] unsigned int 
  2699 ;; Registers used:
  2700 ;;		wreg, status,2, status,0
  2701 ;; Tracked objects:
  2702 ;;		On entry : 0/0
  2703 ;;		On exit  : 0/0
  2704 ;;		Unchanged: 0/0
  2705 ;; Data sizes:     COMMON   BANK0   BANK1
  2706 ;;      Params:         0       4       0
  2707 ;;      Locals:         0       3       0
  2708 ;;      Temps:          0       1       0
  2709 ;;      Totals:         0       8       0
  2710 ;;Total ram usage:        8 bytes
  2711 ;; Hardware stack levels used:    1
  2712 ;; Hardware stack levels required when called:    6
  2713 ;; This function calls:
  2714 ;;		Nothing
  2715 ;; This function is called by:
  2716 ;;		_utoa
  2717 ;; This function uses a non-reentrant model
  2718 ;;
  2719                           
  2720                           
  2721                           ;psect for function ___lwdiv
  2722  0476                     ___lwdiv:	
  2723                           
  2724                           ;incstack = 0
  2725                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  2726  0476  0020               	movlb	0	; select bank0
  2727  0477  01A8               	clrf	___lwdiv@quotient
  2728  0478  01A9               	clrf	___lwdiv@quotient+1
  2729  0479  0823               	movf	___lwdiv@divisor,w
  2730  047A  0424               	iorwf	___lwdiv@divisor+1,w
  2731  047B  1903               	btfsc	3,2
  2732  047C  2CA6               	goto	l1587
  2733  047D  01AA               	clrf	___lwdiv@counter
  2734  047E  0AAA               	incf	___lwdiv@counter,f
  2735  047F                     l1575:	
  2736  047F  1BA4               	btfsc	___lwdiv@divisor+1,7
  2737  0480  2C8B               	goto	l1577
  2738  0481  3001               	movlw	1
  2739  0482                     u955:	
  2740  0482  35A3               	lslf	___lwdiv@divisor,f
  2741  0483  0DA4               	rlf	___lwdiv@divisor+1,f
  2742  0484  0B89               	decfsz	9,f
  2743  0485  2C82               	goto	u955
  2744  0486  3001               	movlw	1
  2745  0487  00A7               	movwf	??___lwdiv
  2746  0488  0827               	movf	??___lwdiv,w
  2747  0489  07AA               	addwf	___lwdiv@counter,f
  2748  048A  2C7F               	goto	l1575
  2749  048B                     l1577:	
  2750  048B  3001               	movlw	1
  2751  048C                     u975:	
  2752  048C  35A8               	lslf	___lwdiv@quotient,f
  2753  048D  0DA9               	rlf	___lwdiv@quotient+1,f
  2754  048E  0B89               	decfsz	9,f
  2755  048F  2C8C               	goto	u975
  2756  0490  0824               	movf	___lwdiv@divisor+1,w
  2757  0491  0226               	subwf	___lwdiv@dividend+1,w
  2758  0492  1D03               	skipz
  2759  0493  2C96               	goto	u985
  2760  0494  0823               	movf	___lwdiv@divisor,w
  2761  0495  0225               	subwf	___lwdiv@dividend,w
  2762  0496                     u985:	
  2763  0496  1C03               	skipc
  2764  0497  2C9D               	goto	l1583
  2765  0498  0823               	movf	___lwdiv@divisor,w
  2766  0499  02A5               	subwf	___lwdiv@dividend,f
  2767  049A  0824               	movf	___lwdiv@divisor+1,w
  2768  049B  3BA6               	subwfb	___lwdiv@dividend+1,f
  2769  049C  1428               	bsf	___lwdiv@quotient,0
  2770  049D                     l1583:	
  2771  049D  3001               	movlw	1
  2772  049E                     u995:	
  2773  049E  36A4               	lsrf	___lwdiv@divisor+1,f
  2774  049F  0CA3               	rrf	___lwdiv@divisor,f
  2775  04A0  0B89               	decfsz	9,f
  2776  04A1  2C9E               	goto	u995
  2777  04A2  3001               	movlw	1
  2778  04A3  02AA               	subwf	___lwdiv@counter,f
  2779  04A4  1D03               	btfss	3,2
  2780  04A5  2C8B               	goto	l1577
  2781  04A6                     l1587:	
  2782  04A6  0829               	movf	___lwdiv@quotient+1,w
  2783  04A7  00A4               	movwf	?___lwdiv+1
  2784  04A8  0828               	movf	___lwdiv@quotient,w
  2785  04A9  00A3               	movwf	?___lwdiv
  2786  04AA  0008               	return
  2787  04AB                     __end_of___lwdiv:	
  2788                           
  2789                           	psect	text9
  2790  05B8                     __ptext9:	
  2791 ;; *************** function _strcpy *****************
  2792 ;; Defined at:
  2793 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\strcpy.c"
  2794 ;; Parameters:    Size  Location     Type
  2795 ;;  to              1    wreg     PTR unsigned char 
  2796 ;;		 -> nrf24l01TXTopic(8), 
  2797 ;;  from            2    3[BANK0 ] PTR const unsigned char 
  2798 ;;		 -> STR_6(5), STR_5(6), STR_4(6), STR_3(5), 
  2799 ;;		 -> STR_2(5), STR_1(4), 
  2800 ;; Auto vars:     Size  Location     Type
  2801 ;;  to              1    7[BANK0 ] PTR unsigned char 
  2802 ;;		 -> nrf24l01TXTopic(8), 
  2803 ;;  cp              1    6[BANK0 ] PTR unsigned char 
  2804 ;;		 -> nrf24l01TXTopic(8), 
  2805 ;; Return value:  Size  Location     Type
  2806 ;;                  1    wreg      PTR unsigned char 
  2807 ;; Registers used:
  2808 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath
  2809 ;; Tracked objects:
  2810 ;;		On entry : 0/0
  2811 ;;		On exit  : 0/0
  2812 ;;		Unchanged: 0/0
  2813 ;; Data sizes:     COMMON   BANK0   BANK1
  2814 ;;      Params:         0       2       0
  2815 ;;      Locals:         0       2       0
  2816 ;;      Temps:          0       1       0
  2817 ;;      Totals:         0       5       0
  2818 ;;Total ram usage:        5 bytes
  2819 ;; Hardware stack levels used:    1
  2820 ;; Hardware stack levels required when called:    6
  2821 ;; This function calls:
  2822 ;;		Nothing
  2823 ;; This function is called by:
  2824 ;;		_loop
  2825 ;;		_main
  2826 ;; This function uses a non-reentrant model
  2827 ;;
  2828                           
  2829                           
  2830                           ;psect for function _strcpy
  2831  05B8                     _strcpy:	
  2832                           
  2833                           ;incstack = 0
  2834                           ; Regs used in _strcpy: [wreg-fsr1h+status,2+status,0+pclath]
  2835                           ;strcpy@to stored from wreg
  2836  05B8  0020               	movlb	0	; select bank0
  2837  05B9  00A7               	movwf	strcpy@to
  2838  05BA  0827               	movf	strcpy@to,w
  2839  05BB  00A5               	movwf	??_strcpy
  2840  05BC  0825               	movf	??_strcpy,w
  2841  05BD  00A6               	movwf	strcpy@cp
  2842  05BE                     l1645:	
  2843  05BE  0826               	movf	strcpy@cp,w
  2844  05BF  0086               	movwf	6
  2845  05C0  0187               	clrf	7
  2846  05C1  0823               	movf	strcpy@from,w
  2847  05C2  0084               	movwf	4
  2848  05C3  0824               	movf	strcpy@from+1,w
  2849  05C4  0085               	movwf	5
  2850  05C5  0800               	movf	0,w	;code access
  2851  05C6  3FC0               	movwi [0]fsr1
  2852  05C7  0889               	movf	9,f
  2853  05C8  1903               	btfsc	3,2
  2854  05C9  0008               	return
  2855  05CA  3001               	movlw	1
  2856  05CB  00A5               	movwf	??_strcpy
  2857  05CC  0825               	movf	??_strcpy,w
  2858  05CD  07A6               	addwf	strcpy@cp,f
  2859  05CE  3001               	movlw	1
  2860  05CF  07A3               	addwf	strcpy@from,f
  2861  05D0  3000               	movlw	0
  2862  05D1  3DA4               	addwfc	strcpy@from+1,f
  2863  05D2  2DBE               	goto	l1645
  2864  05D3                     __end_of_strcpy:	
  2865                           ;	Return value of _strcpy is never used
  2866                           
  2867                           
  2868                           	psect	text10
  2869  0615                     __ptext10:	
  2870 ;; *************** function _sleep *****************
  2871 ;; Defined at:
  2872 ;;		line 45 in file "main.c"
  2873 ;; Parameters:    Size  Location     Type
  2874 ;;		None
  2875 ;; Auto vars:     Size  Location     Type
  2876 ;;		None
  2877 ;; Return value:  Size  Location     Type
  2878 ;;                  1    wreg      void 
  2879 ;; Registers used:
  2880 ;;		None
  2881 ;; Tracked objects:
  2882 ;;		On entry : 0/0
  2883 ;;		On exit  : 0/0
  2884 ;;		Unchanged: 0/0
  2885 ;; Data sizes:     COMMON   BANK0   BANK1
  2886 ;;      Params:         0       0       0
  2887 ;;      Locals:         0       0       0
  2888 ;;      Temps:          0       0       0
  2889 ;;      Totals:         0       0       0
  2890 ;;Total ram usage:        0 bytes
  2891 ;; Hardware stack levels used:    1
  2892 ;; Hardware stack levels required when called:    6
  2893 ;; This function calls:
  2894 ;;		Nothing
  2895 ;; This function is called by:
  2896 ;;		_loop
  2897 ;;		_main
  2898 ;;		_checkRxData
  2899 ;; This function uses a non-reentrant model
  2900 ;;
  2901                           
  2902                           
  2903                           ;psect for function _sleep
  2904  0615                     _sleep:	
  2905  0615                     l156:	
  2906                           ;incstack = 0
  2907                           ; Regs used in _sleep: []
  2908                           ;main.c: 46: while (1){
  2909                           
  2910  0615  0063               	sleep	;# 
  2911                           
  2912                           ;main.c: 49: __nop();
  2913  0616  0000               	nop
  2914                           
  2915                           ;main.c: 50: __nop();
  2916  0617  0000               	nop
  2917                           
  2918                           ;main.c: 52: if (!STATUSbits.nTO && !STATUSbits.nPD) {
  2919  0618  0020               	movlb	0	; select bank0
  2920  0619  1A03               	btfsc	3,4	;volatile
  2921  061A  2E15               	goto	l156
  2922  061B  1D83               	btfss	3,3	;volatile
  2923  061C  0008               	return
  2924  061D  2E15               	goto	l156
  2925  061E                     __end_of_sleep:	
  2926                           ;main.c: 53: return;
  2927                           
  2928                           
  2929                           	psect	text11
  2930  019B                     __ptext11:	
  2931 ;; *************** function _nrf24l01SendString *****************
  2932 ;; Defined at:
  2933 ;;		line 153 in file "nrf24l01.c"
  2934 ;; Parameters:    Size  Location     Type
  2935 ;;  waitForAck      1    wreg     unsigned char 
  2936 ;; Auto vars:     Size  Location     Type
  2937 ;;  waitForAck      1    4[BANK0 ] unsigned char 
  2938 ;;  i               1    5[BANK0 ] unsigned char 
  2939 ;; Return value:  Size  Location     Type
  2940 ;;                  1    wreg      void 
  2941 ;; Registers used:
  2942 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2943 ;; Tracked objects:
  2944 ;;		On entry : 0/0
  2945 ;;		On exit  : 0/0
  2946 ;;		Unchanged: 0/0
  2947 ;; Data sizes:     COMMON   BANK0   BANK1
  2948 ;;      Params:         0       0       0
  2949 ;;      Locals:         0       2       0
  2950 ;;      Temps:          0       1       0
  2951 ;;      Totals:         0       3       0
  2952 ;;Total ram usage:        3 bytes
  2953 ;; Hardware stack levels used:    1
  2954 ;; Hardware stack levels required when called:    9
  2955 ;; This function calls:
  2956 ;;		_enableInterrupts
  2957 ;;		_nrf24l01SPIEnd
  2958 ;;		_nrf24l01SPISend
  2959 ;;		_nrf24l01SPIStart
  2960 ;;		_nrf24l01SetRXMode
  2961 ;; This function is called by:
  2962 ;;		_loop
  2963 ;;		_main
  2964 ;; This function uses a non-reentrant model
  2965 ;;
  2966                           
  2967                           
  2968                           ;psect for function _nrf24l01SendString
  2969  019B                     _nrf24l01SendString:	
  2970                           
  2971                           ;incstack = 0
  2972                           ; Regs used in _nrf24l01SendString: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  2973                           ;nrf24l01SendString@waitForAck stored from wreg
  2974  019B  0020               	movlb	0	; select bank0
  2975  019C  00A4               	movwf	nrf24l01SendString@waitForAck
  2976                           
  2977                           ;nrf24l01.c: 156: unsigned char i;
  2978                           ;nrf24l01.c: 160: nrf24l01.waitForTXACK = waitForAck;
  2979  019D  0824               	movf	nrf24l01SendString@waitForAck,w
  2980  019E  3901               	andlw	1
  2981  019F  104C               	bcf	_nrf24l01,0	;volatile
  2982  01A0  1D03               	skipz
  2983  01A1  144C               	bsf	_nrf24l01,0	;volatile
  2984                           
  2985                           ;nrf24l01.c: 162: if (counter){
  2986  01A2  0849               	movf	_counter,w
  2987  01A3  044A               	iorwf	_counter+1,w
  2988  01A4  1903               	btfsc	3,2
  2989  01A5  29AA               	goto	l266
  2990                           
  2991                           ;nrf24l01.c: 163: counter--;
  2992  01A6  3001               	movlw	1
  2993  01A7  02C9               	subwf	_counter,f
  2994  01A8  3000               	movlw	0
  2995  01A9  3BCA               	subwfb	_counter+1,f
  2996  01AA                     l266:	
  2997                           ;nrf24l01.c: 164: }
  2998                           ;nrf24l01.c: 167: RESEND:
  2999                           
  3000                           
  3001                           ;nrf24l01.c: 170: i = 0xFF;
  3002  01AA  30FF               	movlw	255
  3003  01AB  00A3               	movwf	??_nrf24l01SendString
  3004  01AC  0823               	movf	??_nrf24l01SendString,w
  3005  01AD  00A5               	movwf	nrf24l01SendString@i
  3006  01AE                     l1689:	
  3007                           ;nrf24l01.c: 171: while (nrf24l01.TXBusy){
  3008                           
  3009  01AE  0020               	movlb	0	; select bank0
  3010  01AF  1CCC               	btfss	_nrf24l01,1	;volatile
  3011  01B0  29BA               	goto	l270
  3012                           
  3013                           ;nrf24l01.c: 172: if (!--i) {
  3014  01B1  3001               	movlw	1
  3015  01B2  02A5               	subwf	nrf24l01SendString@i,f
  3016  01B3  1903               	btfsc	3,2
  3017  01B4  29AA               	goto	l266
  3018                           
  3019                           ;nrf24l01.c: 174: }
  3020                           ;nrf24l01.c: 175: _delay((unsigned long)((50)*(16000000/4000000.0)));
  3021                           
  3022                           ;nrf24l01.c: 173: goto RESEND;
  3023  01B5  3042               	movlw	66
  3024  01B6                     u1667:	
  3025  01B6  0B89               	decfsz	9,f
  3026  01B7  29B6               	goto	u1667
  3027  01B8  3200               	nop2
  3028  01B9  29AE               	goto	l1689
  3029  01BA                     l270:	
  3030                           
  3031                           ;nrf24l01.c: 176: }
  3032                           ;nrf24l01.c: 180: nrf24l01.TXBusy = 1;
  3033  01BA  14CC               	bsf	_nrf24l01,1	;volatile
  3034                           
  3035                           ;nrf24l01.c: 183: enableInterrupts(0);
  3036  01BB  3000               	movlw	0
  3037  01BC  262C               	fcall	_enableInterrupts
  3038                           
  3039                           ;nrf24l01.c: 186: nrf24l01SetRXMode(0);
  3040  01BD  3000               	movlw	0
  3041  01BE  24AB               	fcall	_nrf24l01SetRXMode
  3042                           
  3043                           ;nrf24l01.c: 189: nrf24l01SPIStart();
  3044  01BF  261E               	fcall	_nrf24l01SPIStart
  3045                           
  3046                           ;nrf24l01.c: 192: nrf24l01SPISend(0b10110000);
  3047  01C0  30B0               	movlw	176
  3048  01C1  260A               	fcall	_nrf24l01SPISend
  3049                           
  3050                           ;nrf24l01.c: 195: for (i = 0; (nrf24l01Name[i] != '\0') && (i < sizeof(nrf24l01Name)); i
      +                          ++){
  3051  01C2  0020               	movlb	0	; select bank0
  3052  01C3  01A5               	clrf	nrf24l01SendString@i
  3053  01C4  29D0               	goto	l1699
  3054  01C5                     l1695:	
  3055                           
  3056                           ;nrf24l01.c: 196: nrf24l01SPISend(nrf24l01Name[i]);
  3057  01C5  0825               	movf	nrf24l01SendString@i,w
  3058  01C6  3EA0               	addlw	(low (_nrf24l01Name| 0))& (0+255)
  3059  01C7  0086               	movwf	6
  3060  01C8  0187               	clrf	7
  3061  01C9  0801               	movf	1,w
  3062  01CA  260A               	fcall	_nrf24l01SPISend
  3063  01CB  3001               	movlw	1
  3064  01CC  0020               	movlb	0	; select bank0
  3065  01CD  00A3               	movwf	??_nrf24l01SendString
  3066  01CE  0823               	movf	??_nrf24l01SendString,w
  3067  01CF  07A5               	addwf	nrf24l01SendString@i,f
  3068  01D0                     l1699:	
  3069  01D0  0825               	movf	nrf24l01SendString@i,w
  3070  01D1  3EA0               	addlw	(low (_nrf24l01Name| 0))& (0+255)
  3071  01D2  0086               	movwf	6
  3072  01D3  0187               	clrf	7
  3073  01D4  0801               	movf	1,w
  3074  01D5  1903               	btfsc	3,2
  3075  01D6  29DB               	goto	l1703
  3076  01D7  3010               	movlw	16
  3077  01D8  0225               	subwf	nrf24l01SendString@i,w
  3078  01D9  1C03               	skipc
  3079  01DA  29C5               	goto	l1695
  3080  01DB                     l1703:	
  3081                           
  3082                           ;nrf24l01.c: 197: }
  3083                           ;nrf24l01.c: 200: nrf24l01SPISend('/');
  3084  01DB  302F               	movlw	47
  3085  01DC  260A               	fcall	_nrf24l01SPISend
  3086                           
  3087                           ;nrf24l01.c: 203: for (i = 0; (nrf24l01TXTopic[i] != '\0') && (i < sizeof(nrf24l01TXTopi
      +                          c)); i++){
  3088  01DD  0020               	movlb	0	; select bank0
  3089  01DE  01A5               	clrf	nrf24l01SendString@i
  3090  01DF  29EB               	goto	l1711
  3091  01E0                     l1707:	
  3092                           
  3093                           ;nrf24l01.c: 204: nrf24l01SPISend(nrf24l01TXTopic[i]);
  3094  01E0  0825               	movf	nrf24l01SendString@i,w
  3095  01E1  3E65               	addlw	(low (_nrf24l01TXTopic| 0))& (0+255)
  3096  01E2  0086               	movwf	6
  3097  01E3  0187               	clrf	7
  3098  01E4  0801               	movf	1,w
  3099  01E5  260A               	fcall	_nrf24l01SPISend
  3100  01E6  3001               	movlw	1
  3101  01E7  0020               	movlb	0	; select bank0
  3102  01E8  00A3               	movwf	??_nrf24l01SendString
  3103  01E9  0823               	movf	??_nrf24l01SendString,w
  3104  01EA  07A5               	addwf	nrf24l01SendString@i,f
  3105  01EB                     l1711:	
  3106  01EB  0825               	movf	nrf24l01SendString@i,w
  3107  01EC  3E65               	addlw	(low (_nrf24l01TXTopic| 0))& (0+255)
  3108  01ED  0086               	movwf	6
  3109  01EE  0187               	clrf	7
  3110  01EF  0801               	movf	1,w
  3111  01F0  1903               	btfsc	3,2
  3112  01F1  29F6               	goto	l1715
  3113  01F2  3008               	movlw	8
  3114  01F3  0225               	subwf	nrf24l01SendString@i,w
  3115  01F4  1C03               	skipc
  3116  01F5  29E0               	goto	l1707
  3117  01F6                     l1715:	
  3118                           
  3119                           ;nrf24l01.c: 205: }
  3120                           ;nrf24l01.c: 208: nrf24l01SPISend('/');
  3121  01F6  302F               	movlw	47
  3122  01F7  260A               	fcall	_nrf24l01SPISend
  3123                           
  3124                           ;nrf24l01.c: 211: for (i = 0; (nrf24l01TXValue[i] != '\0') && (i < sizeof(nrf24l01TXValu
      +                          e)); i++){
  3125  01F8  0020               	movlb	0	; select bank0
  3126  01F9  01A5               	clrf	nrf24l01SendString@i
  3127  01FA  2A06               	goto	l1723
  3128  01FB                     l1719:	
  3129                           
  3130                           ;nrf24l01.c: 212: nrf24l01SPISend(nrf24l01TXValue[i]);
  3131  01FB  0825               	movf	nrf24l01SendString@i,w
  3132  01FC  3E5D               	addlw	(low (_nrf24l01TXValue| 0))& (0+255)
  3133  01FD  0086               	movwf	6
  3134  01FE  0187               	clrf	7
  3135  01FF  0801               	movf	1,w
  3136  0200  260A               	fcall	_nrf24l01SPISend
  3137  0201  3001               	movlw	1
  3138  0202  0020               	movlb	0	; select bank0
  3139  0203  00A3               	movwf	??_nrf24l01SendString
  3140  0204  0823               	movf	??_nrf24l01SendString,w
  3141  0205  07A5               	addwf	nrf24l01SendString@i,f
  3142  0206                     l1723:	
  3143  0206  0825               	movf	nrf24l01SendString@i,w
  3144  0207  3E5D               	addlw	(low (_nrf24l01TXValue| 0))& (0+255)
  3145  0208  0086               	movwf	6
  3146  0209  0187               	clrf	7
  3147  020A  0801               	movf	1,w
  3148  020B  1903               	btfsc	3,2
  3149  020C  2A11               	goto	l1727
  3150  020D  3008               	movlw	8
  3151  020E  0225               	subwf	nrf24l01SendString@i,w
  3152  020F  1C03               	skipc
  3153  0210  29FB               	goto	l1719
  3154  0211                     l1727:	
  3155                           
  3156                           ;nrf24l01.c: 213: }
  3157                           ;nrf24l01.c: 216: nrf24l01SPIEnd();
  3158  0211  2625               	fcall	_nrf24l01SPIEnd
  3159                           
  3160                           ;nrf24l01.c: 219: PORTAbits.RA0 = 1;
  3161  0212  0020               	movlb	0	; select bank0
  3162  0213  140C               	bsf	12,0	;volatile
  3163                           
  3164                           ;nrf24l01.c: 220: _delay((unsigned long)((20)*(16000000/4000000.0)));
  3165  0214  301A               	movlw	26
  3166  0215                     u1677:	
  3167  0215  0B89               	decfsz	9,f
  3168  0216  2A15               	goto	u1677
  3169  0217  3200               	nop2
  3170                           
  3171                           ;nrf24l01.c: 221: PORTAbits.RA0 = 0;
  3172  0218  0020               	movlb	0	; select bank0
  3173  0219  100C               	bcf	12,0	;volatile
  3174                           
  3175                           ;nrf24l01.c: 224: enableInterrupts(1);
  3176  021A  3001               	movlw	1
  3177  021B  262C               	fcall	_enableInterrupts
  3178                           
  3179                           ;nrf24l01.c: 227: i = 0xFF;
  3180  021C  30FF               	movlw	255
  3181  021D  0020               	movlb	0	; select bank0
  3182  021E  00A3               	movwf	??_nrf24l01SendString
  3183  021F  0823               	movf	??_nrf24l01SendString,w
  3184  0220  00A5               	movwf	nrf24l01SendString@i
  3185  0221                     l1743:	
  3186                           ;nrf24l01.c: 228: while (nrf24l01.waitForTXACK){
  3187                           
  3188  0221  0020               	movlb	0	; select bank0
  3189  0222  1C4C               	btfss	_nrf24l01,0	;volatile
  3190  0223  0008               	return
  3191                           
  3192                           ;nrf24l01.c: 229: if (!--i) {
  3193  0224  3001               	movlw	1
  3194  0225  02A5               	subwf	nrf24l01SendString@i,f
  3195  0226  1D03               	btfss	3,2
  3196  0227  2A2D               	goto	l1741
  3197                           
  3198                           ;nrf24l01.c: 230: counter++;
  3199  0228  3001               	movlw	1
  3200  0229  07C9               	addwf	_counter,f
  3201  022A  3000               	movlw	0
  3202  022B  3DCA               	addwfc	_counter+1,f
  3203                           
  3204                           ;nrf24l01.c: 231: goto RESEND;
  3205  022C  29AA               	goto	l266
  3206  022D                     l1741:	
  3207                           
  3208                           ;nrf24l01.c: 232: }
  3209                           ;nrf24l01.c: 233: _delay((unsigned long)((60)*(16000000/4000000.0)));
  3210  022D  3050               	movlw	80
  3211  022E                     u1687:	
  3212  022E  0B89               	decfsz	9,f
  3213  022F  2A2E               	goto	u1687
  3214  0230  2A21               	goto	l1743
  3215  0231                     __end_of_nrf24l01SendString:	
  3216                           
  3217                           	psect	text12
  3218  0342                     __ptext12:	
  3219 ;; *************** function _getADCValue *****************
  3220 ;; Defined at:
  3221 ;;		line 20 in file "main.c"
  3222 ;; Parameters:    Size  Location     Type
  3223 ;;  channel         1    wreg     unsigned char 
  3224 ;;  divider         4   17[BANK0 ] unsigned long 
  3225 ;; Auto vars:     Size  Location     Type
  3226 ;;  channel         1   25[BANK0 ] unsigned char 
  3227 ;;  adcSum          4   27[BANK0 ] unsigned long 
  3228 ;;  adcLoop         1   26[BANK0 ] unsigned char 
  3229 ;; Return value:  Size  Location     Type
  3230 ;;                  4   17[BANK0 ] unsigned long 
  3231 ;; Registers used:
  3232 ;;		wreg, status,2, status,0, pclath, cstack
  3233 ;; Tracked objects:
  3234 ;;		On entry : 0/0
  3235 ;;		On exit  : 0/0
  3236 ;;		Unchanged: 0/0
  3237 ;; Data sizes:     COMMON   BANK0   BANK1
  3238 ;;      Params:         0       4       0
  3239 ;;      Locals:         0       6       0
  3240 ;;      Temps:          0       4       0
  3241 ;;      Totals:         0      14       0
  3242 ;;Total ram usage:       14 bytes
  3243 ;; Hardware stack levels used:    1
  3244 ;; Hardware stack levels required when called:    7
  3245 ;; This function calls:
  3246 ;;		___lldiv
  3247 ;;		___lmul
  3248 ;; This function is called by:
  3249 ;;		_loop
  3250 ;; This function uses a non-reentrant model
  3251 ;;
  3252                           
  3253                           
  3254                           ;psect for function _getADCValue
  3255  0342                     _getADCValue:	
  3256                           
  3257                           ;incstack = 0
  3258                           ; Regs used in _getADCValue: [wreg+status,2+status,0+pclath+cstack]
  3259                           ;getADCValue@channel stored from wreg
  3260  0342  0020               	movlb	0	; select bank0
  3261  0343  00B9               	movwf	getADCValue@channel
  3262                           
  3263                           ;main.c: 22: unsigned long adcSum = 0;
  3264  0344  3000               	movlw	0
  3265  0345  00BE               	movwf	getADCValue@adcSum+3
  3266  0346  3000               	movlw	0
  3267  0347  00BD               	movwf	getADCValue@adcSum+2
  3268  0348  3000               	movlw	0
  3269  0349  00BC               	movwf	getADCValue@adcSum+1
  3270  034A  3000               	movlw	0
  3271  034B  00BB               	movwf	getADCValue@adcSum
  3272                           
  3273                           ;main.c: 23: unsigned char adcLoop = 255;
  3274  034C  30FF               	movlw	255
  3275  034D  00B5               	movwf	??_getADCValue
  3276  034E  0835               	movf	??_getADCValue,w
  3277  034F  00BA               	movwf	getADCValue@adcLoop
  3278                           
  3279                           ;main.c: 25: ADCON0bits.CHS = channel;
  3280  0350  0839               	movf	getADCValue@channel,w
  3281  0351  00B5               	movwf	??_getADCValue
  3282  0352  0DB5               	rlf	??_getADCValue,f
  3283  0353  0DB5               	rlf	??_getADCValue,f
  3284  0354  0021               	movlb	1	; select bank1
  3285  0355  081D               	movf	29,w	;volatile
  3286  0356  0020               	movlb	0	; select bank0
  3287  0357  0635               	xorwf	??_getADCValue,w
  3288  0358  3983               	andlw	-125
  3289  0359  0635               	xorwf	??_getADCValue,w
  3290  035A  0021               	movlb	1	; select bank1
  3291  035B  009D               	movwf	29	;volatile
  3292                           
  3293                           ;main.c: 26: _delay((unsigned long)((200)*(16000000/4000000.0)));
  3294  035C  30A0               	movlw	160
  3295  035D                     u1697:	
  3296  035D  3200               	nop2
  3297  035E  0B89               	decfsz	9,f
  3298  035F  2B5D               	goto	u1697
  3299  0360                     l1627:	
  3300                           ;main.c: 28: while (--adcLoop){
  3301                           
  3302  0360  3001               	movlw	1
  3303  0361  0020               	movlb	0	; select bank0
  3304  0362  02BA               	subwf	getADCValue@adcLoop,f
  3305  0363  1903               	btfsc	3,2
  3306  0364  2B8A               	goto	l1629
  3307                           
  3308                           ;main.c: 30: ADCON0bits.ADGO = 1;
  3309  0365  0021               	movlb	1	; select bank1
  3310  0366  149D               	bsf	29,1	;volatile
  3311  0367                     l149:	
  3312                           ;main.c: 31: while (ADCON0bits.ADGO){
  3313                           
  3314  0367  0021               	movlb	1	; select bank1
  3315  0368  1C9D               	btfss	29,1	;volatile
  3316  0369  2B6C               	goto	l1625
  3317                           
  3318                           ;main.c: 32: __nop();
  3319  036A  0000               	nop
  3320  036B  2B67               	goto	l149
  3321  036C                     l1625:	
  3322                           
  3323                           ;main.c: 33: }
  3324                           ;main.c: 35: adcSum+= ADRESL;
  3325  036C  081B               	movf	27,w	;volatile
  3326  036D  0020               	movlb	0	; select bank0
  3327  036E  00B5               	movwf	??_getADCValue
  3328  036F  01B6               	clrf	??_getADCValue+1
  3329  0370  01B7               	clrf	??_getADCValue+2
  3330  0371  01B8               	clrf	??_getADCValue+3
  3331  0372  0835               	movf	??_getADCValue,w
  3332  0373  07BB               	addwf	getADCValue@adcSum,f
  3333  0374  0836               	movf	??_getADCValue+1,w
  3334  0375  3DBC               	addwfc	getADCValue@adcSum+1,f
  3335  0376  0837               	movf	??_getADCValue+2,w
  3336  0377  3DBD               	addwfc	getADCValue@adcSum+2,f
  3337  0378  0838               	movf	??_getADCValue+3,w
  3338  0379  3DBE               	addwfc	getADCValue@adcSum+3,f
  3339                           
  3340                           ;main.c: 36: adcSum+= (unsigned) (ADRESH << 8);
  3341  037A  0021               	movlb	1	; select bank1
  3342  037B  081C               	movf	28,w	;volatile
  3343  037C  0020               	movlb	0	; select bank0
  3344  037D  00B5               	movwf	??_getADCValue
  3345  037E  01B6               	clrf	??_getADCValue+1
  3346  037F  0835               	movf	??_getADCValue,w
  3347  0380  00B6               	movwf	??_getADCValue+1
  3348  0381  01B5               	clrf	??_getADCValue
  3349  0382  0835               	movf	??_getADCValue,w
  3350  0383  07BB               	addwf	getADCValue@adcSum,f
  3351  0384  0836               	movf	??_getADCValue+1,w
  3352  0385  3DBC               	addwfc	getADCValue@adcSum+1,f
  3353  0386  3000               	movlw	0
  3354  0387  3DBD               	addwfc	getADCValue@adcSum+2,f
  3355  0388  3DBE               	addwfc	getADCValue@adcSum+3,f
  3356  0389  2B60               	goto	l1627
  3357  038A                     l1629:	
  3358                           
  3359                           ;main.c: 37: }
  3360                           ;main.c: 39: adcSum*= 100;
  3361  038A  3000               	movlw	0
  3362  038B  00A6               	movwf	___lmul@multiplier+3
  3363  038C  3000               	movlw	0
  3364  038D  00A5               	movwf	___lmul@multiplier+2
  3365  038E  3000               	movlw	0
  3366  038F  00A4               	movwf	___lmul@multiplier+1
  3367  0390  3064               	movlw	100
  3368  0391  00A3               	movwf	___lmul@multiplier
  3369  0392  083E               	movf	getADCValue@adcSum+3,w
  3370  0393  00AA               	movwf	___lmul@multiplicand+3
  3371  0394  083D               	movf	getADCValue@adcSum+2,w
  3372  0395  00A9               	movwf	___lmul@multiplicand+2
  3373  0396  083C               	movf	getADCValue@adcSum+1,w
  3374  0397  00A8               	movwf	___lmul@multiplicand+1
  3375  0398  083B               	movf	getADCValue@adcSum,w
  3376  0399  00A7               	movwf	___lmul@multiplicand
  3377  039A  2510               	fcall	___lmul
  3378  039B  0020               	movlb	0	; select bank0
  3379  039C  0826               	movf	?___lmul+3,w
  3380  039D  00BE               	movwf	getADCValue@adcSum+3
  3381  039E  0825               	movf	?___lmul+2,w
  3382  039F  00BD               	movwf	getADCValue@adcSum+2
  3383  03A0  0824               	movf	?___lmul+1,w
  3384  03A1  00BC               	movwf	getADCValue@adcSum+1
  3385  03A2  0823               	movf	?___lmul,w
  3386  03A3  00BB               	movwf	getADCValue@adcSum
  3387                           
  3388                           ;main.c: 40: adcSum/= divider;
  3389  03A4  0834               	movf	getADCValue@divider+3,w
  3390  03A5  00A6               	movwf	___lldiv@divisor+3
  3391  03A6  0833               	movf	getADCValue@divider+2,w
  3392  03A7  00A5               	movwf	___lldiv@divisor+2
  3393  03A8  0832               	movf	getADCValue@divider+1,w
  3394  03A9  00A4               	movwf	___lldiv@divisor+1
  3395  03AA  0831               	movf	getADCValue@divider,w
  3396  03AB  00A3               	movwf	___lldiv@divisor
  3397  03AC  083E               	movf	getADCValue@adcSum+3,w
  3398  03AD  00AA               	movwf	___lldiv@dividend+3
  3399  03AE  083D               	movf	getADCValue@adcSum+2,w
  3400  03AF  00A9               	movwf	___lldiv@dividend+2
  3401  03B0  083C               	movf	getADCValue@adcSum+1,w
  3402  03B1  00A8               	movwf	___lldiv@dividend+1
  3403  03B2  083B               	movf	getADCValue@adcSum,w
  3404  03B3  00A7               	movwf	___lldiv@dividend
  3405  03B4  2423               	fcall	___lldiv
  3406  03B5  0020               	movlb	0	; select bank0
  3407  03B6  0826               	movf	?___lldiv+3,w
  3408  03B7  00BE               	movwf	getADCValue@adcSum+3
  3409  03B8  0825               	movf	?___lldiv+2,w
  3410  03B9  00BD               	movwf	getADCValue@adcSum+2
  3411  03BA  0824               	movf	?___lldiv+1,w
  3412  03BB  00BC               	movwf	getADCValue@adcSum+1
  3413  03BC  0823               	movf	?___lldiv,w
  3414  03BD  00BB               	movwf	getADCValue@adcSum
  3415                           
  3416                           ;main.c: 42: return adcSum;
  3417  03BE  083E               	movf	getADCValue@adcSum+3,w
  3418  03BF  00B4               	movwf	?_getADCValue+3
  3419  03C0  083D               	movf	getADCValue@adcSum+2,w
  3420  03C1  00B3               	movwf	?_getADCValue+2
  3421  03C2  083C               	movf	getADCValue@adcSum+1,w
  3422  03C3  00B2               	movwf	?_getADCValue+1
  3423  03C4  083B               	movf	getADCValue@adcSum,w
  3424  03C5  00B1               	movwf	?_getADCValue
  3425  03C6  0008               	return
  3426  03C7                     __end_of_getADCValue:	
  3427                           
  3428                           	psect	text13
  3429  0510                     __ptext13:	
  3430 ;; *************** function ___lmul *****************
  3431 ;; Defined at:
  3432 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul32.c"
  3433 ;; Parameters:    Size  Location     Type
  3434 ;;  multiplier      4    3[BANK0 ] unsigned long 
  3435 ;;  multiplicand    4    7[BANK0 ] unsigned long 
  3436 ;; Auto vars:     Size  Location     Type
  3437 ;;  product         4   11[BANK0 ] unsigned long 
  3438 ;; Return value:  Size  Location     Type
  3439 ;;                  4    3[BANK0 ] unsigned long 
  3440 ;; Registers used:
  3441 ;;		wreg, status,2, status,0
  3442 ;; Tracked objects:
  3443 ;;		On entry : 0/0
  3444 ;;		On exit  : 0/0
  3445 ;;		Unchanged: 0/0
  3446 ;; Data sizes:     COMMON   BANK0   BANK1
  3447 ;;      Params:         0       8       0
  3448 ;;      Locals:         0       4       0
  3449 ;;      Temps:          0       0       0
  3450 ;;      Totals:         0      12       0
  3451 ;;Total ram usage:       12 bytes
  3452 ;; Hardware stack levels used:    1
  3453 ;; Hardware stack levels required when called:    6
  3454 ;; This function calls:
  3455 ;;		Nothing
  3456 ;; This function is called by:
  3457 ;;		_getADCValue
  3458 ;; This function uses a non-reentrant model
  3459 ;;
  3460                           
  3461                           
  3462                           ;psect for function ___lmul
  3463  0510                     ___lmul:	
  3464                           
  3465                           ;incstack = 0
  3466                           ; Regs used in ___lmul: [wreg+status,2+status,0]
  3467  0510  3000               	movlw	0
  3468  0511  0020               	movlb	0	; select bank0
  3469  0512  00AE               	movwf	___lmul@product+3
  3470  0513  3000               	movlw	0
  3471  0514  00AD               	movwf	___lmul@product+2
  3472  0515  3000               	movlw	0
  3473  0516  00AC               	movwf	___lmul@product+1
  3474  0517  3000               	movlw	0
  3475  0518  00AB               	movwf	___lmul@product
  3476  0519                     l1529:	
  3477  0519  1C23               	btfss	___lmul@multiplier,0
  3478  051A  2D23               	goto	l1533
  3479  051B  0827               	movf	___lmul@multiplicand,w
  3480  051C  07AB               	addwf	___lmul@product,f
  3481  051D  0828               	movf	___lmul@multiplicand+1,w
  3482  051E  3DAC               	addwfc	___lmul@product+1,f
  3483  051F  0829               	movf	___lmul@multiplicand+2,w
  3484  0520  3DAD               	addwfc	___lmul@product+2,f
  3485  0521  082A               	movf	___lmul@multiplicand+3,w
  3486  0522  3DAE               	addwfc	___lmul@product+3,f
  3487  0523                     l1533:	
  3488  0523  3001               	movlw	1
  3489  0524                     u845:	
  3490  0524  35A7               	lslf	___lmul@multiplicand,f
  3491  0525  0DA8               	rlf	___lmul@multiplicand+1,f
  3492  0526  0DA9               	rlf	___lmul@multiplicand+2,f
  3493  0527  0DAA               	rlf	___lmul@multiplicand+3,f
  3494  0528  0B89               	decfsz	9,f
  3495  0529  2D24               	goto	u845
  3496  052A  3001               	movlw	1
  3497  052B                     u855:	
  3498  052B  36A6               	lsrf	___lmul@multiplier+3,f
  3499  052C  0CA5               	rrf	___lmul@multiplier+2,f
  3500  052D  0CA4               	rrf	___lmul@multiplier+1,f
  3501  052E  0CA3               	rrf	___lmul@multiplier,f
  3502  052F  0B89               	decfsz	9,f
  3503  0530  2D2B               	goto	u855
  3504  0531  0826               	movf	___lmul@multiplier+3,w
  3505  0532  0425               	iorwf	___lmul@multiplier+2,w
  3506  0533  0424               	iorwf	___lmul@multiplier+1,w
  3507  0534  0423               	iorwf	___lmul@multiplier,w
  3508  0535  1D03               	skipz
  3509  0536  2D19               	goto	l1529
  3510  0537  082E               	movf	___lmul@product+3,w
  3511  0538  00A6               	movwf	?___lmul+3
  3512  0539  082D               	movf	___lmul@product+2,w
  3513  053A  00A5               	movwf	?___lmul+2
  3514  053B  082C               	movf	___lmul@product+1,w
  3515  053C  00A4               	movwf	?___lmul+1
  3516  053D  082B               	movf	___lmul@product,w
  3517  053E  00A3               	movwf	?___lmul
  3518  053F  0008               	return
  3519  0540                     __end_of___lmul:	
  3520                           
  3521                           	psect	text14
  3522  0423                     __ptext14:	
  3523 ;; *************** function ___lldiv *****************
  3524 ;; Defined at:
  3525 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lldiv.c"
  3526 ;; Parameters:    Size  Location     Type
  3527 ;;  divisor         4    3[BANK0 ] unsigned long 
  3528 ;;  dividend        4    7[BANK0 ] unsigned long 
  3529 ;; Auto vars:     Size  Location     Type
  3530 ;;  quotient        4   12[BANK0 ] unsigned long 
  3531 ;;  counter         1   16[BANK0 ] unsigned char 
  3532 ;; Return value:  Size  Location     Type
  3533 ;;                  4    3[BANK0 ] unsigned long 
  3534 ;; Registers used:
  3535 ;;		wreg, status,2, status,0
  3536 ;; Tracked objects:
  3537 ;;		On entry : 0/0
  3538 ;;		On exit  : 0/0
  3539 ;;		Unchanged: 0/0
  3540 ;; Data sizes:     COMMON   BANK0   BANK1
  3541 ;;      Params:         0       8       0
  3542 ;;      Locals:         0       5       0
  3543 ;;      Temps:          0       1       0
  3544 ;;      Totals:         0      14       0
  3545 ;;Total ram usage:       14 bytes
  3546 ;; Hardware stack levels used:    1
  3547 ;; Hardware stack levels required when called:    6
  3548 ;; This function calls:
  3549 ;;		Nothing
  3550 ;; This function is called by:
  3551 ;;		_getADCValue
  3552 ;; This function uses a non-reentrant model
  3553 ;;
  3554                           
  3555                           
  3556                           ;psect for function ___lldiv
  3557  0423                     ___lldiv:	
  3558                           
  3559                           ;incstack = 0
  3560                           ; Regs used in ___lldiv: [wreg+status,2+status,0]
  3561  0423  3000               	movlw	0
  3562  0424  0020               	movlb	0	; select bank0
  3563  0425  00AF               	movwf	___lldiv@quotient+3
  3564  0426  3000               	movlw	0
  3565  0427  00AE               	movwf	___lldiv@quotient+2
  3566  0428  3000               	movlw	0
  3567  0429  00AD               	movwf	___lldiv@quotient+1
  3568  042A  3000               	movlw	0
  3569  042B  00AC               	movwf	___lldiv@quotient
  3570  042C  0826               	movf	___lldiv@divisor+3,w
  3571  042D  0425               	iorwf	___lldiv@divisor+2,w
  3572  042E  0424               	iorwf	___lldiv@divisor+1,w
  3573  042F  0423               	iorwf	___lldiv@divisor,w
  3574  0430  1903               	skipnz
  3575  0431  2C6D               	goto	l1561
  3576  0432  01B0               	clrf	___lldiv@counter
  3577  0433  0AB0               	incf	___lldiv@counter,f
  3578  0434                     l1547:	
  3579  0434  1BA6               	btfsc	___lldiv@divisor+3,7
  3580  0435  2C42               	goto	l1549
  3581  0436  3001               	movlw	1
  3582  0437                     u885:	
  3583  0437  35A3               	lslf	___lldiv@divisor,f
  3584  0438  0DA4               	rlf	___lldiv@divisor+1,f
  3585  0439  0DA5               	rlf	___lldiv@divisor+2,f
  3586  043A  0DA6               	rlf	___lldiv@divisor+3,f
  3587  043B  0B89               	decfsz	9,f
  3588  043C  2C37               	goto	u885
  3589  043D  3001               	movlw	1
  3590  043E  00AB               	movwf	??___lldiv
  3591  043F  082B               	movf	??___lldiv,w
  3592  0440  07B0               	addwf	___lldiv@counter,f
  3593  0441  2C34               	goto	l1547
  3594  0442                     l1549:	
  3595  0442  3001               	movlw	1
  3596  0443                     u905:	
  3597  0443  35AC               	lslf	___lldiv@quotient,f
  3598  0444  0DAD               	rlf	___lldiv@quotient+1,f
  3599  0445  0DAE               	rlf	___lldiv@quotient+2,f
  3600  0446  0DAF               	rlf	___lldiv@quotient+3,f
  3601  0447  0B89               	decfsz	9,f
  3602  0448  2C43               	goto	u905
  3603  0449  0826               	movf	___lldiv@divisor+3,w
  3604  044A  022A               	subwf	___lldiv@dividend+3,w
  3605  044B  1D03               	skipz
  3606  044C  2C57               	goto	u915
  3607  044D  0825               	movf	___lldiv@divisor+2,w
  3608  044E  0229               	subwf	___lldiv@dividend+2,w
  3609  044F  1D03               	skipz
  3610  0450  2C57               	goto	u915
  3611  0451  0824               	movf	___lldiv@divisor+1,w
  3612  0452  0228               	subwf	___lldiv@dividend+1,w
  3613  0453  1D03               	skipz
  3614  0454  2C57               	goto	u915
  3615  0455  0823               	movf	___lldiv@divisor,w
  3616  0456  0227               	subwf	___lldiv@dividend,w
  3617  0457                     u915:	
  3618  0457  1C03               	skipc
  3619  0458  2C62               	goto	l1557
  3620  0459  0823               	movf	___lldiv@divisor,w
  3621  045A  02A7               	subwf	___lldiv@dividend,f
  3622  045B  0824               	movf	___lldiv@divisor+1,w
  3623  045C  3BA8               	subwfb	___lldiv@dividend+1,f
  3624  045D  0825               	movf	___lldiv@divisor+2,w
  3625  045E  3BA9               	subwfb	___lldiv@dividend+2,f
  3626  045F  0826               	movf	___lldiv@divisor+3,w
  3627  0460  3BAA               	subwfb	___lldiv@dividend+3,f
  3628  0461  142C               	bsf	___lldiv@quotient,0
  3629  0462                     l1557:	
  3630  0462  3001               	movlw	1
  3631  0463                     u925:	
  3632  0463  36A6               	lsrf	___lldiv@divisor+3,f
  3633  0464  0CA5               	rrf	___lldiv@divisor+2,f
  3634  0465  0CA4               	rrf	___lldiv@divisor+1,f
  3635  0466  0CA3               	rrf	___lldiv@divisor,f
  3636  0467  0B89               	decfsz	9,f
  3637  0468  2C63               	goto	u925
  3638  0469  3001               	movlw	1
  3639  046A  02B0               	subwf	___lldiv@counter,f
  3640  046B  1D03               	btfss	3,2
  3641  046C  2C42               	goto	l1549
  3642  046D                     l1561:	
  3643  046D  082F               	movf	___lldiv@quotient+3,w
  3644  046E  00A6               	movwf	?___lldiv+3
  3645  046F  082E               	movf	___lldiv@quotient+2,w
  3646  0470  00A5               	movwf	?___lldiv+2
  3647  0471  082D               	movf	___lldiv@quotient+1,w
  3648  0472  00A4               	movwf	?___lldiv+1
  3649  0473  082C               	movf	___lldiv@quotient,w
  3650  0474  00A3               	movwf	?___lldiv
  3651  0475  0008               	return
  3652  0476                     __end_of___lldiv:	
  3653                           
  3654                           	psect	intentry
  3655  0004                     __pintentry:	
  3656 ;; *************** function _ISR *****************
  3657 ;; Defined at:
  3658 ;;		line 13 in file "main.c"
  3659 ;; Parameters:    Size  Location     Type
  3660 ;;		None
  3661 ;; Auto vars:     Size  Location     Type
  3662 ;;		None
  3663 ;; Return value:  Size  Location     Type
  3664 ;;                  1    wreg      void 
  3665 ;; Registers used:
  3666 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3667 ;; Tracked objects:
  3668 ;;		On entry : 0/0
  3669 ;;		On exit  : 0/0
  3670 ;;		Unchanged: 0/0
  3671 ;; Data sizes:     COMMON   BANK0   BANK1
  3672 ;;      Params:         0       0       0
  3673 ;;      Locals:         0       0       0
  3674 ;;      Temps:          0       1       0
  3675 ;;      Totals:         0       1       0
  3676 ;;Total ram usage:        1 bytes
  3677 ;; Hardware stack levels used:    1
  3678 ;; Hardware stack levels required when called:    5
  3679 ;; This function calls:
  3680 ;;		_nrf24l01ISR
  3681 ;; This function is called by:
  3682 ;;		Interrupt level 1
  3683 ;; This function uses a non-reentrant model
  3684 ;;
  3685                           
  3686  0004                     _ISR:	
  3687                           
  3688                           ;incstack = 0
  3689  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
  3690                           
  3691                           ; Regs used in _ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3692  0005  3180               	pagesel	$
  3693  0006  0020               	movlb	0	; select bank0
  3694  0007  087F               	movf	127,w
  3695  0008  00A2               	movwf	??_ISR
  3696                           
  3697                           ;main.c: 14: if (INTCONbits.INTF){
  3698  0009  1C8B               	btfss	11,1	;volatile
  3699  000A  280D               	goto	i1l144
  3700                           
  3701                           ;main.c: 15: nrf24l01ISR();
  3702  000B  2594               	fcall	_nrf24l01ISR
  3703                           
  3704                           ;main.c: 16: INTCONbits.INTF = 0;
  3705  000C  108B               	bcf	11,1	;volatile
  3706  000D                     i1l144:	
  3707  000D  0020               	movlb	0	; select bank0
  3708  000E  0822               	movf	??_ISR,w
  3709  000F  00FF               	movwf	127
  3710  0010  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
  3711  0011  0009               	retfie
  3712  0012                     __end_of_ISR:	
  3713                           
  3714                           	psect	text16
  3715  0594                     __ptext16:	
  3716 ;; *************** function _nrf24l01ISR *****************
  3717 ;; Defined at:
  3718 ;;		line 238 in file "nrf24l01.c"
  3719 ;; Parameters:    Size  Location     Type
  3720 ;;		None
  3721 ;; Auto vars:     Size  Location     Type
  3722 ;;  status          1    1[BANK0 ] struct .
  3723 ;; Return value:  Size  Location     Type
  3724 ;;                  1    wreg      void 
  3725 ;; Registers used:
  3726 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3727 ;; Tracked objects:
  3728 ;;		On entry : 0/0
  3729 ;;		On exit  : 0/0
  3730 ;;		Unchanged: 0/0
  3731 ;; Data sizes:     COMMON   BANK0   BANK1
  3732 ;;      Params:         0       0       0
  3733 ;;      Locals:         0       1       0
  3734 ;;      Temps:          1       0       0
  3735 ;;      Totals:         1       1       0
  3736 ;;Total ram usage:        2 bytes
  3737 ;; Hardware stack levels used:    1
  3738 ;; Hardware stack levels required when called:    4
  3739 ;; This function calls:
  3740 ;;		_nrf24l01ReceiveString
  3741 ;;		_nrf24l01Send
  3742 ;;		_nrf24l01SetRXMode
  3743 ;; This function is called by:
  3744 ;;		_ISR
  3745 ;; This function uses a non-reentrant model
  3746 ;;
  3747                           
  3748                           
  3749                           ;psect for function _nrf24l01ISR
  3750  0594                     _nrf24l01ISR:	
  3751                           
  3752                           ;nrf24l01.c: 240: n_STATUS_t status;
  3753                           ;nrf24l01.c: 241: status.byte = nrf24l01Send(0b00000000 | 0x07, 0);
  3754                           
  3755                           ;incstack = 0
  3756                           ; Regs used in _nrf24l01ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3757  0594  0020               	movlb	0	; select bank0
  3758  0595  01A0               	clrf	nrf24l01Send@data
  3759  0596  3007               	movlw	7
  3760  0597  25E9               	fcall	_nrf24l01Send
  3761  0598  00FD               	movwf	??_nrf24l01ISR
  3762  0599  087D               	movf	??_nrf24l01ISR,w
  3763  059A  0020               	movlb	0	; select bank0
  3764  059B  00A1               	movwf	nrf24l01ISR@status
  3765                           
  3766                           ;nrf24l01.c: 245: if (status.byte == 0x00){
  3767  059C  0821               	movf	nrf24l01ISR@status,w
  3768  059D  1903               	btfsc	3,2
  3769  059E  0001               	reset	;# 
  3770                           
  3771                           ;nrf24l01.c: 248: }
  3772                           ;nrf24l01.c: 251: if (status.byte == 0xFF){
  3773  059F  0020               	movlb	0	; select bank0
  3774  05A0  0A21               	incf	nrf24l01ISR@status,w
  3775  05A1  1903               	btfsc	3,2
  3776  05A2  0001               	reset	;# 
  3777                           
  3778                           ;nrf24l01.c: 254: }
  3779                           ;nrf24l01.c: 256: if (status.TX_DS){
  3780  05A3  0020               	movlb	0	; select bank0
  3781  05A4  1EA1               	btfss	nrf24l01ISR@status,5
  3782  05A5  2DAC               	goto	i1l1977
  3783                           
  3784                           ;nrf24l01.c: 259: nrf24l01.TXBusy = 0;
  3785  05A6  10CC               	bcf	_nrf24l01,1	;volatile
  3786                           
  3787                           ;nrf24l01.c: 262: if (!nrf24l01.RXMode){
  3788  05A7  1DCC               	btfss	_nrf24l01,3	;volatile
  3789                           
  3790                           ;nrf24l01.c: 263: if (nrf24l01.waitForTXACK){
  3791  05A8  1C4C               	btfss	_nrf24l01,0	;volatile
  3792  05A9  2DAC               	goto	i1l1977
  3793                           
  3794                           ;nrf24l01.c: 265: nrf24l01SetRXMode(1);
  3795  05AA  3001               	movlw	1
  3796  05AB  24AB               	fcall	_nrf24l01SetRXMode
  3797  05AC                     i1l1977:	
  3798                           
  3799                           ;nrf24l01.c: 266: }
  3800                           ;nrf24l01.c: 267: }
  3801                           ;nrf24l01.c: 268: }
  3802                           ;nrf24l01.c: 271: if (status.RX_DR){
  3803  05AC  0020               	movlb	0	; select bank0
  3804  05AD  1F21               	btfss	nrf24l01ISR@status,6
  3805  05AE  2DB0               	goto	i1l1981
  3806                           
  3807                           ;nrf24l01.c: 273: nrf24l01ReceiveString();
  3808  05AF  2022               	fcall	_nrf24l01ReceiveString
  3809  05B0                     i1l1981:	
  3810                           
  3811                           ;nrf24l01.c: 274: }
  3812                           ;nrf24l01.c: 277: nrf24l01Send(0b00100000 | 0x07, status.byte);
  3813  05B0  0020               	movlb	0	; select bank0
  3814  05B1  0821               	movf	nrf24l01ISR@status,w
  3815  05B2  00FD               	movwf	??_nrf24l01ISR
  3816  05B3  087D               	movf	??_nrf24l01ISR,w
  3817  05B4  00A0               	movwf	nrf24l01Send@data
  3818  05B5  3027               	movlw	39
  3819  05B6  25E9               	fcall	_nrf24l01Send
  3820  05B7  0008               	return
  3821  05B8                     __end_of_nrf24l01ISR:	
  3822                           
  3823                           	psect	text17
  3824  0022                     __ptext17:	
  3825 ;; *************** function _nrf24l01ReceiveString *****************
  3826 ;; Defined at:
  3827 ;;		line 84 in file "nrf24l01.c"
  3828 ;; Parameters:    Size  Location     Type
  3829 ;;		None
  3830 ;; Auto vars:     Size  Location     Type
  3831 ;;  i               1   12[COMMON] unsigned char 
  3832 ;;  byte            1   11[COMMON] unsigned char 
  3833 ;;  offset          1   10[COMMON] unsigned char 
  3834 ;;  width           1    9[COMMON] unsigned char 
  3835 ;; Return value:  Size  Location     Type
  3836 ;;                  1    wreg      void 
  3837 ;; Registers used:
  3838 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3839 ;; Tracked objects:
  3840 ;;		On entry : 0/0
  3841 ;;		On exit  : 0/0
  3842 ;;		Unchanged: 0/0
  3843 ;; Data sizes:     COMMON   BANK0   BANK1
  3844 ;;      Params:         0       0       0
  3845 ;;      Locals:         4       0       0
  3846 ;;      Temps:          3       0       0
  3847 ;;      Totals:         7       0       0
  3848 ;;Total ram usage:        7 bytes
  3849 ;; Hardware stack levels used:    1
  3850 ;; Hardware stack levels required when called:    3
  3851 ;; This function calls:
  3852 ;;		_nrf24l01SPIEnd
  3853 ;;		_nrf24l01SPISend
  3854 ;;		_nrf24l01SPIStart
  3855 ;;		_nrf24l01Send
  3856 ;;		_nrf24l01SetRXMode
  3857 ;;		_strcmp
  3858 ;; This function is called by:
  3859 ;;		_nrf24l01ISR
  3860 ;; This function uses a non-reentrant model
  3861 ;;
  3862                           
  3863                           
  3864                           ;psect for function _nrf24l01ReceiveString
  3865  0022                     _nrf24l01ReceiveString:	
  3866                           
  3867                           ;nrf24l01.c: 87: unsigned char byte;
  3868                           ;nrf24l01.c: 88: unsigned char i;
  3869                           ;nrf24l01.c: 89: unsigned char offset = 0;
  3870                           
  3871                           ;incstack = 0
  3872                           ; Regs used in _nrf24l01ReceiveString: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3873  0022  01FA               	clrf	nrf24l01ReceiveString@offset
  3874                           
  3875                           ;nrf24l01.c: 91: nrf24l01.RXPending = 1;
  3876  0023  0020               	movlb	0	; select bank0
  3877  0024  154C               	bsf	_nrf24l01,2	;volatile
  3878                           
  3879                           ;nrf24l01.c: 93: for (i = 0; i < sizeof(nrf24l01RXTopic); i++){
  3880  0025  01FC               	clrf	nrf24l01ReceiveString@i
  3881  0026  3008               	movlw	8
  3882  0027  027C               	subwf	nrf24l01ReceiveString@i,w
  3883  0028  1803               	btfsc	3,0
  3884  0029  2837               	goto	i1l1759
  3885  002A                     i1l1753:	
  3886                           
  3887                           ;nrf24l01.c: 94: nrf24l01RXTopic[i] = '\0';
  3888  002A  087C               	movf	nrf24l01ReceiveString@i,w
  3889  002B  3E55               	addlw	(low (_nrf24l01RXTopic| 0))& (0+255)
  3890  002C  0086               	movwf	6
  3891  002D  0187               	clrf	7
  3892  002E  0181               	clrf	1
  3893  002F  3001               	movlw	1
  3894  0030  00F6               	movwf	??_nrf24l01ReceiveString
  3895  0031  0876               	movf	??_nrf24l01ReceiveString,w
  3896  0032  07FC               	addwf	nrf24l01ReceiveString@i,f
  3897  0033  3008               	movlw	8
  3898  0034  027C               	subwf	nrf24l01ReceiveString@i,w
  3899  0035  1C03               	skipc
  3900  0036  282A               	goto	i1l1753
  3901  0037                     i1l1759:	
  3902                           
  3903                           ;nrf24l01.c: 95: }
  3904                           ;nrf24l01.c: 96: for (i = 0; i < sizeof(nrf24l01RXValue); i++){
  3905  0037  01FC               	clrf	nrf24l01ReceiveString@i
  3906  0038  3008               	movlw	8
  3907  0039  027C               	subwf	nrf24l01ReceiveString@i,w
  3908  003A  1803               	btfsc	3,0
  3909  003B  2849               	goto	i1l1771
  3910  003C                     i1l1765:	
  3911                           
  3912                           ;nrf24l01.c: 97: nrf24l01RXValue[i] = '\0';
  3913  003C  087C               	movf	nrf24l01ReceiveString@i,w
  3914  003D  3E4D               	addlw	(low (_nrf24l01RXValue| 0))& (0+255)
  3915  003E  0086               	movwf	6
  3916  003F  0187               	clrf	7
  3917  0040  0181               	clrf	1
  3918  0041  3001               	movlw	1
  3919  0042  00F6               	movwf	??_nrf24l01ReceiveString
  3920  0043  0876               	movf	??_nrf24l01ReceiveString,w
  3921  0044  07FC               	addwf	nrf24l01ReceiveString@i,f
  3922  0045  3008               	movlw	8
  3923  0046  027C               	subwf	nrf24l01ReceiveString@i,w
  3924  0047  1C03               	skipc
  3925  0048  283C               	goto	i1l1765
  3926  0049                     i1l1771:	
  3927                           
  3928                           ;nrf24l01.c: 98: }
  3929                           ;nrf24l01.c: 100: unsigned char width = nrf24l01Send(0b01100000, 0);
  3930  0049  0020               	movlb	0	; select bank0
  3931  004A  01A0               	clrf	nrf24l01Send@data
  3932  004B  3060               	movlw	96
  3933  004C  25E9               	fcall	_nrf24l01Send
  3934  004D  00F6               	movwf	??_nrf24l01ReceiveString
  3935  004E  0876               	movf	??_nrf24l01ReceiveString,w
  3936  004F  00F9               	movwf	nrf24l01ReceiveString@width
  3937                           
  3938                           ;nrf24l01.c: 102: PORTAbits.RA0 = 0;
  3939  0050  0020               	movlb	0	; select bank0
  3940  0051  100C               	bcf	12,0	;volatile
  3941                           
  3942                           ;nrf24l01.c: 104: nrf24l01SPIStart();
  3943  0052  261E               	fcall	_nrf24l01SPIStart
  3944                           
  3945                           ;nrf24l01.c: 106: nrf24l01SPISend(0b01100001);
  3946  0053  3061               	movlw	97
  3947  0054  260A               	fcall	_nrf24l01SPISend
  3948                           
  3949                           ;nrf24l01.c: 108: for (i = 0; (i < sizeof(nrf24l01Name)) && (offset + i < width) ; i++){
  3950  0055  01FC               	clrf	nrf24l01ReceiveString@i
  3951  0056  2873               	goto	i1l1789
  3952  0057                     i1l1777:	
  3953                           
  3954                           ;nrf24l01.c: 110: byte = nrf24l01SPISend(0);
  3955  0057  3000               	movlw	0
  3956  0058  260A               	fcall	_nrf24l01SPISend
  3957  0059  00F6               	movwf	??_nrf24l01ReceiveString
  3958  005A  0876               	movf	??_nrf24l01ReceiveString,w
  3959  005B  00FB               	movwf	nrf24l01ReceiveString@byte
  3960                           
  3961                           ;nrf24l01.c: 112: if (byte == '/'){
  3962  005C  302F               	movlw	47
  3963  005D  067B               	xorwf	nrf24l01ReceiveString@byte,w
  3964  005E  1D03               	btfss	3,2
  3965  005F  2865               	goto	i1l1783
  3966                           
  3967                           ;nrf24l01.c: 113: offset++;
  3968  0060  3001               	movlw	1
  3969  0061  00F6               	movwf	??_nrf24l01ReceiveString
  3970  0062  0876               	movf	??_nrf24l01ReceiveString,w
  3971  0063  07FA               	addwf	nrf24l01ReceiveString@offset,f
  3972                           
  3973                           ;nrf24l01.c: 114: break;
  3974  0064  2887               	goto	i1l1793
  3975  0065                     i1l1783:	
  3976                           
  3977                           ;nrf24l01.c: 115: }
  3978                           ;nrf24l01.c: 117: if (nrf24l01Name[i] != byte){
  3979  0065  087C               	movf	nrf24l01ReceiveString@i,w
  3980  0066  3EA0               	addlw	(low (_nrf24l01Name| 0))& (0+255)
  3981  0067  0086               	movwf	6
  3982  0068  0187               	clrf	7
  3983  0069  0801               	movf	1,w
  3984  006A  067B               	xorwf	nrf24l01ReceiveString@byte,w
  3985  006B  1903               	skipnz
  3986  006C  286F               	goto	i1l1787
  3987                           
  3988                           ;nrf24l01.c: 118: nrf24l01.RXPending = 0;
  3989  006D  0020               	movlb	0	; select bank0
  3990  006E  114C               	bcf	_nrf24l01,2	;volatile
  3991  006F                     i1l1787:	
  3992  006F  3001               	movlw	1
  3993  0070  00F6               	movwf	??_nrf24l01ReceiveString
  3994  0071  0876               	movf	??_nrf24l01ReceiveString,w
  3995  0072  07FC               	addwf	nrf24l01ReceiveString@i,f
  3996  0073                     i1l1789:	
  3997  0073  3010               	movlw	16
  3998  0074  027C               	subwf	nrf24l01ReceiveString@i,w
  3999  0075  1803               	skipnc
  4000  0076  2887               	goto	i1l1793
  4001  0077  087A               	movf	nrf24l01ReceiveString@offset,w
  4002  0078  077C               	addwf	nrf24l01ReceiveString@i,w
  4003  0079  00F6               	movwf	??_nrf24l01ReceiveString
  4004  007A  01F7               	clrf	??_nrf24l01ReceiveString+1
  4005  007B  0DF7               	rlf	??_nrf24l01ReceiveString+1,f
  4006  007C  0877               	movf	??_nrf24l01ReceiveString+1,w
  4007  007D  3A80               	xorlw	128
  4008  007E  00F8               	movwf	??_nrf24l01ReceiveString+2
  4009  007F  3080               	movlw	128
  4010  0080  0278               	subwf	??_nrf24l01ReceiveString+2,w
  4011  0081  1D03               	skipz
  4012  0082  2885               	goto	u133_25
  4013  0083  0879               	movf	nrf24l01ReceiveString@width,w
  4014  0084  0276               	subwf	??_nrf24l01ReceiveString,w
  4015  0085                     u133_25:	
  4016  0085  1C03               	skipc
  4017  0086  2857               	goto	i1l1777
  4018  0087                     i1l1793:	
  4019                           
  4020                           ;nrf24l01.c: 119: }
  4021                           ;nrf24l01.c: 120: }
  4022                           ;nrf24l01.c: 121: offset+= i;
  4023  0087  087C               	movf	nrf24l01ReceiveString@i,w
  4024  0088  00F6               	movwf	??_nrf24l01ReceiveString
  4025  0089  0876               	movf	??_nrf24l01ReceiveString,w
  4026  008A  07FA               	addwf	nrf24l01ReceiveString@offset,f
  4027                           
  4028                           ;nrf24l01.c: 123: for (i = 0; (i < sizeof(nrf24l01RXTopic)) && (offset + i < width) ; i+
      +                          +){
  4029  008B  01FC               	clrf	nrf24l01ReceiveString@i
  4030  008C  28A7               	goto	i1l1807
  4031  008D                     i1l1797:	
  4032                           
  4033                           ;nrf24l01.c: 125: byte = nrf24l01SPISend(0);
  4034  008D  3000               	movlw	0
  4035  008E  260A               	fcall	_nrf24l01SPISend
  4036  008F  00F6               	movwf	??_nrf24l01ReceiveString
  4037  0090  0876               	movf	??_nrf24l01ReceiveString,w
  4038  0091  00FB               	movwf	nrf24l01ReceiveString@byte
  4039                           
  4040                           ;nrf24l01.c: 126: if (byte == '/'){
  4041  0092  302F               	movlw	47
  4042  0093  067B               	xorwf	nrf24l01ReceiveString@byte,w
  4043  0094  1D03               	btfss	3,2
  4044  0095  289B               	goto	i1l1803
  4045                           
  4046                           ;nrf24l01.c: 127: offset++;
  4047  0096  3001               	movlw	1
  4048  0097  00F6               	movwf	??_nrf24l01ReceiveString
  4049  0098  0876               	movf	??_nrf24l01ReceiveString,w
  4050  0099  07FA               	addwf	nrf24l01ReceiveString@offset,f
  4051                           
  4052                           ;nrf24l01.c: 128: break;
  4053  009A  28BB               	goto	i1l1811
  4054  009B                     i1l1803:	
  4055                           
  4056                           ;nrf24l01.c: 129: }
  4057                           ;nrf24l01.c: 131: nrf24l01RXTopic[i] = byte;
  4058  009B  087B               	movf	nrf24l01ReceiveString@byte,w
  4059  009C  00F6               	movwf	??_nrf24l01ReceiveString
  4060  009D  087C               	movf	nrf24l01ReceiveString@i,w
  4061  009E  3E55               	addlw	(low (_nrf24l01RXTopic| 0))& (0+255)
  4062  009F  0086               	movwf	6
  4063  00A0  0187               	clrf	7
  4064  00A1  0876               	movf	??_nrf24l01ReceiveString,w
  4065  00A2  0081               	movwf	1
  4066  00A3  3001               	movlw	1
  4067  00A4  00F6               	movwf	??_nrf24l01ReceiveString
  4068  00A5  0876               	movf	??_nrf24l01ReceiveString,w
  4069  00A6  07FC               	addwf	nrf24l01ReceiveString@i,f
  4070  00A7                     i1l1807:	
  4071  00A7  3008               	movlw	8
  4072  00A8  027C               	subwf	nrf24l01ReceiveString@i,w
  4073  00A9  1803               	skipnc
  4074  00AA  28BB               	goto	i1l1811
  4075  00AB  087A               	movf	nrf24l01ReceiveString@offset,w
  4076  00AC  077C               	addwf	nrf24l01ReceiveString@i,w
  4077  00AD  00F6               	movwf	??_nrf24l01ReceiveString
  4078  00AE  01F7               	clrf	??_nrf24l01ReceiveString+1
  4079  00AF  0DF7               	rlf	??_nrf24l01ReceiveString+1,f
  4080  00B0  0877               	movf	??_nrf24l01ReceiveString+1,w
  4081  00B1  3A80               	xorlw	128
  4082  00B2  00F8               	movwf	??_nrf24l01ReceiveString+2
  4083  00B3  3080               	movlw	128
  4084  00B4  0278               	subwf	??_nrf24l01ReceiveString+2,w
  4085  00B5  1D03               	skipz
  4086  00B6  28B9               	goto	u136_25
  4087  00B7  0879               	movf	nrf24l01ReceiveString@width,w
  4088  00B8  0276               	subwf	??_nrf24l01ReceiveString,w
  4089  00B9                     u136_25:	
  4090  00B9  1C03               	skipc
  4091  00BA  288D               	goto	i1l1797
  4092  00BB                     i1l1811:	
  4093                           
  4094                           ;nrf24l01.c: 132: }
  4095                           ;nrf24l01.c: 133: offset+= i;
  4096  00BB  087C               	movf	nrf24l01ReceiveString@i,w
  4097  00BC  00F6               	movwf	??_nrf24l01ReceiveString
  4098  00BD  0876               	movf	??_nrf24l01ReceiveString,w
  4099  00BE  07FA               	addwf	nrf24l01ReceiveString@offset,f
  4100                           
  4101                           ;nrf24l01.c: 136: for (i = 0; (i < sizeof(nrf24l01RXValue)) && (offset + i < width) ; i+
      +                          +){
  4102  00BF  01FC               	clrf	nrf24l01ReceiveString@i
  4103  00C0  28CE               	goto	i1l1819
  4104  00C1                     i1l1815:	
  4105                           
  4106                           ;nrf24l01.c: 137: nrf24l01RXValue[i] = nrf24l01SPISend(0);
  4107  00C1  3000               	movlw	0
  4108  00C2  260A               	fcall	_nrf24l01SPISend
  4109  00C3  00F6               	movwf	??_nrf24l01ReceiveString
  4110  00C4  087C               	movf	nrf24l01ReceiveString@i,w
  4111  00C5  3E4D               	addlw	(low (_nrf24l01RXValue| 0))& (0+255)
  4112  00C6  0086               	movwf	6
  4113  00C7  0187               	clrf	7
  4114  00C8  0876               	movf	??_nrf24l01ReceiveString,w
  4115  00C9  0081               	movwf	1
  4116  00CA  3001               	movlw	1
  4117  00CB  00F6               	movwf	??_nrf24l01ReceiveString
  4118  00CC  0876               	movf	??_nrf24l01ReceiveString,w
  4119  00CD  07FC               	addwf	nrf24l01ReceiveString@i,f
  4120  00CE                     i1l1819:	
  4121  00CE  3008               	movlw	8
  4122  00CF  027C               	subwf	nrf24l01ReceiveString@i,w
  4123  00D0  1803               	skipnc
  4124  00D1  28E2               	goto	i1l1823
  4125  00D2  087A               	movf	nrf24l01ReceiveString@offset,w
  4126  00D3  077C               	addwf	nrf24l01ReceiveString@i,w
  4127  00D4  00F6               	movwf	??_nrf24l01ReceiveString
  4128  00D5  01F7               	clrf	??_nrf24l01ReceiveString+1
  4129  00D6  0DF7               	rlf	??_nrf24l01ReceiveString+1,f
  4130  00D7  0877               	movf	??_nrf24l01ReceiveString+1,w
  4131  00D8  3A80               	xorlw	128
  4132  00D9  00F8               	movwf	??_nrf24l01ReceiveString+2
  4133  00DA  3080               	movlw	128
  4134  00DB  0278               	subwf	??_nrf24l01ReceiveString+2,w
  4135  00DC  1D03               	skipz
  4136  00DD  28E0               	goto	u138_25
  4137  00DE  0879               	movf	nrf24l01ReceiveString@width,w
  4138  00DF  0276               	subwf	??_nrf24l01ReceiveString,w
  4139  00E0                     u138_25:	
  4140  00E0  1C03               	skipc
  4141  00E1  28C1               	goto	i1l1815
  4142  00E2                     i1l1823:	
  4143                           
  4144                           ;nrf24l01.c: 138: }
  4145                           ;nrf24l01.c: 140: nrf24l01SPIEnd();
  4146  00E2  2625               	fcall	_nrf24l01SPIEnd
  4147                           
  4148                           ;nrf24l01.c: 142: if (nrf24l01.waitForTXACK){
  4149  00E3  0020               	movlb	0	; select bank0
  4150  00E4  1C4C               	btfss	_nrf24l01,0	;volatile
  4151  00E5  0008               	return
  4152                           
  4153                           ;nrf24l01.c: 143: if (strcmp(nrf24l01RXTopic, nrf24l01TXTopic) == 0){
  4154  00E6  3065               	movlw	low _nrf24l01TXTopic
  4155  00E7  00F0               	movwf	strcmp@s2
  4156  00E8  3000               	movlw	high _nrf24l01TXTopic
  4157  00E9  00F1               	movwf	strcmp@s2+1
  4158  00EA  3055               	movlw	(low (_nrf24l01RXTopic| 0))& (0+255)
  4159  00EB  256D               	fcall	_strcmp
  4160  00EC  0870               	movf	?_strcmp,w
  4161  00ED  0471               	iorwf	?_strcmp+1,w
  4162  00EE  1D03               	btfss	3,2
  4163  00EF  0008               	return
  4164                           
  4165                           ;nrf24l01.c: 144: if (strcmp(nrf24l01RXValue, "ACK") == 0){
  4166  00F0  3059               	movlw	low (STR_7| (0+32768))
  4167  00F1  00F0               	movwf	strcmp@s2
  4168  00F2  3086               	movlw	high (STR_7| (0+32768))
  4169  00F3  00F1               	movwf	strcmp@s2+1
  4170  00F4  304D               	movlw	(low (_nrf24l01RXValue| 0))& (0+255)
  4171  00F5  256D               	fcall	_strcmp
  4172  00F6  0870               	movf	?_strcmp,w
  4173  00F7  0471               	iorwf	?_strcmp+1,w
  4174  00F8  1D03               	btfss	3,2
  4175  00F9  0008               	return
  4176                           
  4177                           ;nrf24l01.c: 145: nrf24l01.waitForTXACK = 0;
  4178  00FA  0020               	movlb	0	; select bank0
  4179  00FB  104C               	bcf	_nrf24l01,0	;volatile
  4180                           
  4181                           ;nrf24l01.c: 146: nrf24l01.RXPending = 0;
  4182  00FC  114C               	bcf	_nrf24l01,2	;volatile
  4183                           
  4184                           ;nrf24l01.c: 147: nrf24l01SetRXMode(0);
  4185  00FD  3000               	movlw	0
  4186  00FE  24AB               	fcall	_nrf24l01SetRXMode
  4187  00FF  0008               	return
  4188  0100                     __end_of_nrf24l01ReceiveString:	
  4189                           
  4190                           	psect	text18
  4191  056D                     __ptext18:	
  4192 ;; *************** function _strcmp *****************
  4193 ;; Defined at:
  4194 ;;		line 33 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\strcmp.c"
  4195 ;; Parameters:    Size  Location     Type
  4196 ;;  s1              1    wreg     PTR const unsigned char 
  4197 ;;		 -> nrf24l01RXValue(8), nrf24l01RXTopic(8), 
  4198 ;;  s2              2    0[COMMON] PTR const unsigned char 
  4199 ;;		 -> STR_7(4), nrf24l01TXTopic(8), 
  4200 ;; Auto vars:     Size  Location     Type
  4201 ;;  s1              1    4[COMMON] PTR const unsigned char 
  4202 ;;		 -> nrf24l01RXValue(8), nrf24l01RXTopic(8), 
  4203 ;;  r               1    3[COMMON] char 
  4204 ;; Return value:  Size  Location     Type
  4205 ;;                  2    0[COMMON] int 
  4206 ;; Registers used:
  4207 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath
  4208 ;; Tracked objects:
  4209 ;;		On entry : 0/0
  4210 ;;		On exit  : 0/0
  4211 ;;		Unchanged: 0/0
  4212 ;; Data sizes:     COMMON   BANK0   BANK1
  4213 ;;      Params:         2       0       0
  4214 ;;      Locals:         2       0       0
  4215 ;;      Temps:          1       0       0
  4216 ;;      Totals:         5       0       0
  4217 ;;Total ram usage:        5 bytes
  4218 ;; Hardware stack levels used:    1
  4219 ;; This function calls:
  4220 ;;		Nothing
  4221 ;; This function is called by:
  4222 ;;		_nrf24l01ReceiveString
  4223 ;; This function uses a non-reentrant model
  4224 ;;
  4225                           
  4226                           
  4227                           ;psect for function _strcmp
  4228  056D                     _strcmp:	
  4229                           
  4230                           ;incstack = 0
  4231                           ; Regs used in _strcmp: [wreg-fsr1h+status,2+status,0+pclath]
  4232                           ;strcmp@s1 stored from wreg
  4233  056D  00F4               	movwf	strcmp@s1
  4234  056E  2D77               	goto	i1l1519
  4235  056F                     i1l1517:	
  4236  056F  3001               	movlw	1
  4237  0570  00F2               	movwf	??_strcmp
  4238  0571  0872               	movf	??_strcmp,w
  4239  0572  07F4               	addwf	strcmp@s1,f
  4240  0573  3001               	movlw	1
  4241  0574  07F0               	addwf	strcmp@s2,f
  4242  0575  3000               	movlw	0
  4243  0576  3DF1               	addwfc	strcmp@s2+1,f
  4244  0577                     i1l1519:	
  4245  0577  0874               	movf	strcmp@s1,w
  4246  0578  0086               	movwf	6
  4247  0579  0187               	clrf	7
  4248  057A  0870               	movf	strcmp@s2,w
  4249  057B  0084               	movwf	4
  4250  057C  0871               	movf	strcmp@s2+1,w
  4251  057D  0085               	movwf	5
  4252  057E  0800               	movf	0,w	;code access
  4253  057F  3AFF               	xorlw	255
  4254  0580  3E01               	addlw	1
  4255  0581  0701               	addwf	1,w
  4256  0582  00F2               	movwf	??_strcmp
  4257  0583  0872               	movf	??_strcmp,w
  4258  0584  00F3               	movwf	strcmp@r
  4259  0585  0873               	movf	strcmp@r,w
  4260  0586  1D03               	btfss	3,2
  4261  0587  2D8E               	goto	i1l1523
  4262  0588  0874               	movf	strcmp@s1,w
  4263  0589  0086               	movwf	6
  4264  058A  0187               	clrf	7
  4265  058B  0801               	movf	1,w
  4266  058C  1D03               	btfss	3,2
  4267  058D  2D6F               	goto	i1l1517
  4268  058E                     i1l1523:	
  4269  058E  0873               	movf	strcmp@r,w
  4270  058F  00F0               	movwf	?_strcmp
  4271  0590  01F1               	clrf	?_strcmp+1
  4272  0591  1BF0               	btfsc	?_strcmp,7
  4273  0592  03F1               	decf	?_strcmp+1,f
  4274  0593  0008               	return
  4275  0594                     __end_of_strcmp:	
  4276                           
  4277                           	psect	text19
  4278  04AB                     __ptext19:	
  4279 ;; *************** function _nrf24l01SetRXMode *****************
  4280 ;; Defined at:
  4281 ;;		line 57 in file "nrf24l01.c"
  4282 ;; Parameters:    Size  Location     Type
  4283 ;;  rxMode          1    wreg     unsigned char 
  4284 ;; Auto vars:     Size  Location     Type
  4285 ;;  rxMode          1    5[COMMON] unsigned char 
  4286 ;;  config          1    4[COMMON] struct .
  4287 ;; Return value:  Size  Location     Type
  4288 ;;                  1    wreg      void 
  4289 ;; Registers used:
  4290 ;;		wreg, status,2, status,0, pclath, cstack
  4291 ;; Tracked objects:
  4292 ;;		On entry : 0/0
  4293 ;;		On exit  : 0/0
  4294 ;;		Unchanged: 0/0
  4295 ;; Data sizes:     COMMON   BANK0   BANK1
  4296 ;;      Params:         0       0       0
  4297 ;;      Locals:         0       0       0
  4298 ;;      Temps:          0       0       0
  4299 ;;      Totals:         0       0       0
  4300 ;;Total ram usage:        0 bytes
  4301 ;; Hardware stack levels used:    1
  4302 ;; Hardware stack levels required when called:    8
  4303 ;; This function calls:
  4304 ;;		_nrf24l01Send
  4305 ;; This function is called by:
  4306 ;;		_nrf24l01ReceiveString
  4307 ;;		_nrf24l01SendString
  4308 ;;		_nrf24l01ISR
  4309 ;;		_checkRxData
  4310 ;; This function uses a non-reentrant model
  4311 ;;
  4312                           
  4313                           
  4314                           ;psect for function _nrf24l01SetRXMode
  4315  04AB                     _nrf24l01SetRXMode:	
  4316                           
  4317                           ;incstack = 0
  4318                           ; Regs used in _nrf24l01SetRXMode: [wreg+status,2+status,0+pclath+cstack]
  4319                           ;nrf24l01SetRXMode@rxMode stored from wreg
  4320  04AB  00F5               	movwf	nrf24l01SetRXMode@rxMode
  4321                           
  4322                           ;nrf24l01.c: 58: n_CONFIG_t config;
  4323                           ;nrf24l01.c: 59: config.byte = nrf24l01Send(0b00000000 | 0x00, 0);
  4324  04AC  0020               	movlb	0	; select bank0
  4325  04AD  01A0               	clrf	nrf24l01Send@data
  4326  04AE  3000               	movlw	0
  4327  04AF  25E9               	fcall	_nrf24l01Send
  4328  04B0  00F3               	movwf	??_nrf24l01SetRXMode
  4329  04B1  0873               	movf	??_nrf24l01SetRXMode,w
  4330  04B2  00F4               	movwf	nrf24l01SetRXMode@config
  4331                           
  4332                           ;nrf24l01.c: 61: if (config.PRIM_RX != rxMode){
  4333  04B3  0874               	movf	nrf24l01SetRXMode@config,w
  4334  04B4  3901               	andlw	1
  4335  04B5  0675               	xorwf	nrf24l01SetRXMode@rxMode,w
  4336  04B6  1903               	skipnz
  4337  04B7  2CD7               	goto	i1l1513
  4338                           
  4339                           ;nrf24l01.c: 63: PORTAbits.RA0 = 0;
  4340  04B8  0020               	movlb	0	; select bank0
  4341  04B9  100C               	bcf	12,0	;volatile
  4342                           
  4343                           ;nrf24l01.c: 64: _delay((unsigned long)((200)*(16000000/4000000.0)));
  4344  04BA  30A0               	movlw	160
  4345  04BB                     u170_27:	
  4346  04BB  3200               	nop2
  4347  04BC  0B89               	decfsz	9,f
  4348  04BD  2CBB               	goto	u170_27
  4349                           
  4350                           ;nrf24l01.c: 70: config.PRIM_RX = rxMode;
  4351  04BE  0875               	movf	nrf24l01SetRXMode@rxMode,w
  4352  04BF  3901               	andlw	1
  4353  04C0  1074               	bcf	nrf24l01SetRXMode@config,0
  4354  04C1  1D03               	skipz
  4355  04C2  1474               	bsf	nrf24l01SetRXMode@config,0
  4356                           
  4357                           ;nrf24l01.c: 71: nrf24l01Send(0b00100000 | 0x00, config.byte);
  4358  04C3  0874               	movf	nrf24l01SetRXMode@config,w
  4359  04C4  00F3               	movwf	??_nrf24l01SetRXMode
  4360  04C5  0873               	movf	??_nrf24l01SetRXMode,w
  4361  04C6  0020               	movlb	0	; select bank0
  4362  04C7  00A0               	movwf	nrf24l01Send@data
  4363  04C8  3020               	movlw	32
  4364  04C9  25E9               	fcall	_nrf24l01Send
  4365                           
  4366                           ;nrf24l01.c: 72: _delay((unsigned long)((200)*(16000000/4000000.0)));
  4367  04CA  30A0               	movlw	160
  4368  04CB                     u171_27:	
  4369  04CB  3200               	nop2
  4370  04CC  0B89               	decfsz	9,f
  4371  04CD  2CCB               	goto	u171_27
  4372                           
  4373                           ;nrf24l01.c: 74: if (rxMode){
  4374  04CE  0875               	movf	nrf24l01SetRXMode@rxMode,w
  4375  04CF  1903               	btfsc	3,2
  4376  04D0  2CD7               	goto	i1l1513
  4377                           
  4378                           ;nrf24l01.c: 75: PORTAbits.RA0 = 1;
  4379  04D1  0020               	movlb	0	; select bank0
  4380  04D2  140C               	bsf	12,0	;volatile
  4381                           
  4382                           ;nrf24l01.c: 76: _delay((unsigned long)((200)*(16000000/4000000.0)));
  4383  04D3  30A0               	movlw	160
  4384  04D4                     u172_27:	
  4385  04D4  3200               	nop2
  4386  04D5  0B89               	decfsz	9,f
  4387  04D6  2CD4               	goto	u172_27
  4388  04D7                     i1l1513:	
  4389                           
  4390                           ;nrf24l01.c: 77: }
  4391                           ;nrf24l01.c: 78: }
  4392                           ;nrf24l01.c: 79: nrf24l01.RXMode = rxMode;
  4393  04D7  0875               	movf	nrf24l01SetRXMode@rxMode,w
  4394  04D8  3901               	andlw	1
  4395  04D9  0020               	movlb	0	; select bank0
  4396  04DA  11CC               	bcf	_nrf24l01,3	;volatile
  4397  04DB  1D03               	skipz
  4398  04DC  15CC               	bsf	_nrf24l01,3	;volatile
  4399  04DD  0008               	return
  4400  04DE                     __end_of_nrf24l01SetRXMode:	
  4401                           
  4402                           	psect	text20
  4403  05E9                     __ptext20:	
  4404 ;; *************** function _nrf24l01Send *****************
  4405 ;; Defined at:
  4406 ;;		line 9 in file "nrf24l01.c"
  4407 ;; Parameters:    Size  Location     Type
  4408 ;;  command         1    wreg     unsigned char 
  4409 ;;  data            1    0[BANK0 ] unsigned char 
  4410 ;; Auto vars:     Size  Location     Type
  4411 ;;  command         1    2[COMMON] unsigned char 
  4412 ;; Return value:  Size  Location     Type
  4413 ;;                  1    wreg      unsigned char 
  4414 ;; Registers used:
  4415 ;;		wreg, status,2, status,0, pclath, cstack
  4416 ;; Tracked objects:
  4417 ;;		On entry : 0/0
  4418 ;;		On exit  : 0/0
  4419 ;;		Unchanged: 0/0
  4420 ;; Data sizes:     COMMON   BANK0   BANK1
  4421 ;;      Params:         0       0       0
  4422 ;;      Locals:         0       0       0
  4423 ;;      Temps:          0       0       0
  4424 ;;      Totals:         0       0       0
  4425 ;;Total ram usage:        0 bytes
  4426 ;; Hardware stack levels used:    1
  4427 ;; Hardware stack levels required when called:    7
  4428 ;; This function calls:
  4429 ;;		_enableInterrupts
  4430 ;;		_nrf24l01SPIEnd
  4431 ;;		_nrf24l01SPISend
  4432 ;;		_nrf24l01SPIStart
  4433 ;; This function is called by:
  4434 ;;		_nrf24l01SetRXMode
  4435 ;;		_nrf24l01ReceiveString
  4436 ;;		_nrf24l01ISR
  4437 ;;		_nrf24l01InitRegisters
  4438 ;; This function uses a non-reentrant model
  4439 ;;
  4440                           
  4441                           
  4442                           ;psect for function _nrf24l01Send
  4443  05E9                     _nrf24l01Send:	
  4444                           
  4445                           ;incstack = 0
  4446                           ; Regs used in _nrf24l01Send: [wreg+status,2+status,0+pclath+cstack]
  4447                           ;nrf24l01Send@command stored from wreg
  4448  05E9  00F2               	movwf	nrf24l01Send@command
  4449                           
  4450                           ;nrf24l01.c: 11: enableInterrupts(0);
  4451  05EA  3000               	movlw	0
  4452  05EB  262C               	fcall	_enableInterrupts
  4453                           
  4454                           ;nrf24l01.c: 13: nrf24l01SPIStart();
  4455  05EC  261E               	fcall	_nrf24l01SPIStart
  4456                           
  4457                           ;nrf24l01.c: 15: nrf24l01SPISend(command);
  4458  05ED  0872               	movf	nrf24l01Send@command,w
  4459  05EE  260A               	fcall	_nrf24l01SPISend
  4460                           
  4461                           ;nrf24l01.c: 16: data = nrf24l01SPISend(data);
  4462  05EF  0020               	movlb	0	; select bank0
  4463  05F0  0820               	movf	nrf24l01Send@data,w
  4464  05F1  260A               	fcall	_nrf24l01SPISend
  4465  05F2  00F1               	movwf	??_nrf24l01Send
  4466  05F3  0871               	movf	??_nrf24l01Send,w
  4467  05F4  0020               	movlb	0	; select bank0
  4468  05F5  00A0               	movwf	nrf24l01Send@data
  4469                           
  4470                           ;nrf24l01.c: 18: nrf24l01SPIEnd();
  4471  05F6  2625               	fcall	_nrf24l01SPIEnd
  4472                           
  4473                           ;nrf24l01.c: 20: enableInterrupts(1);
  4474  05F7  3001               	movlw	1
  4475  05F8  262C               	fcall	_enableInterrupts
  4476                           
  4477                           ;nrf24l01.c: 22: return data;
  4478  05F9  0020               	movlb	0	; select bank0
  4479  05FA  0820               	movf	nrf24l01Send@data,w
  4480  05FB  0008               	return
  4481  05FC                     __end_of_nrf24l01Send:	
  4482                           
  4483                           	psect	text21
  4484  061E                     __ptext21:	
  4485 ;; *************** function _nrf24l01SPIStart *****************
  4486 ;; Defined at:
  4487 ;;		line 37 in file "interface.c"
  4488 ;; Parameters:    Size  Location     Type
  4489 ;;		None
  4490 ;; Auto vars:     Size  Location     Type
  4491 ;;		None
  4492 ;; Return value:  Size  Location     Type
  4493 ;;                  1    wreg      void 
  4494 ;; Registers used:
  4495 ;;		wreg
  4496 ;; Tracked objects:
  4497 ;;		On entry : 0/0
  4498 ;;		On exit  : 0/0
  4499 ;;		Unchanged: 0/0
  4500 ;; Data sizes:     COMMON   BANK0   BANK1
  4501 ;;      Params:         0       0       0
  4502 ;;      Locals:         0       0       0
  4503 ;;      Temps:          0       0       0
  4504 ;;      Totals:         0       0       0
  4505 ;;Total ram usage:        0 bytes
  4506 ;; Hardware stack levels used:    1
  4507 ;; Hardware stack levels required when called:    6
  4508 ;; This function calls:
  4509 ;;		Nothing
  4510 ;; This function is called by:
  4511 ;;		_nrf24l01Send
  4512 ;;		_nrf24l01ReceiveString
  4513 ;;		_nrf24l01SendString
  4514 ;;		_nrf24l01SetTXAddress
  4515 ;; This function uses a non-reentrant model
  4516 ;;
  4517                           
  4518                           
  4519                           ;psect for function _nrf24l01SPIStart
  4520  061E                     _nrf24l01SPIStart:	
  4521                           
  4522                           ;interface.c: 38: PORTAbits.RA1 = 0;
  4523                           
  4524                           ;incstack = 0
  4525                           ; Regs used in _nrf24l01SPIStart: [wreg]
  4526  061E  0020               	movlb	0	; select bank0
  4527  061F  108C               	bcf	12,1	;volatile
  4528                           
  4529                           ;interface.c: 39: _delay((unsigned long)((10)*(16000000/4000000.0)));
  4530  0620  300D               	movlw	13
  4531  0621                     u173_27:	
  4532  0621  0B89               	decfsz	9,f
  4533  0622  2E21               	goto	u173_27
  4534  0623  0000               	nop
  4535  0624  0008               	return
  4536  0625                     __end_of_nrf24l01SPIStart:	
  4537                           
  4538                           	psect	text22
  4539  060A                     __ptext22:	
  4540 ;; *************** function _nrf24l01SPISend *****************
  4541 ;; Defined at:
  4542 ;;		line 26 in file "interface.c"
  4543 ;; Parameters:    Size  Location     Type
  4544 ;;  data            1    wreg     unsigned char 
  4545 ;; Auto vars:     Size  Location     Type
  4546 ;;  data            1    0[COMMON] unsigned char 
  4547 ;; Return value:  Size  Location     Type
  4548 ;;                  1    wreg      unsigned char 
  4549 ;; Registers used:
  4550 ;;		wreg
  4551 ;; Tracked objects:
  4552 ;;		On entry : 0/0
  4553 ;;		On exit  : 0/0
  4554 ;;		Unchanged: 0/0
  4555 ;; Data sizes:     COMMON   BANK0   BANK1
  4556 ;;      Params:         0       0       0
  4557 ;;      Locals:         0       0       0
  4558 ;;      Temps:          0       0       0
  4559 ;;      Totals:         0       0       0
  4560 ;;Total ram usage:        0 bytes
  4561 ;; Hardware stack levels used:    1
  4562 ;; Hardware stack levels required when called:    6
  4563 ;; This function calls:
  4564 ;;		Nothing
  4565 ;; This function is called by:
  4566 ;;		_nrf24l01Send
  4567 ;;		_nrf24l01ReceiveString
  4568 ;;		_nrf24l01SendString
  4569 ;;		_nrf24l01SetTXAddress
  4570 ;; This function uses a non-reentrant model
  4571 ;;
  4572                           
  4573                           
  4574                           ;psect for function _nrf24l01SPISend
  4575  060A                     _nrf24l01SPISend:	
  4576                           
  4577                           ;incstack = 0
  4578                           ; Regs used in _nrf24l01SPISend: [wreg]
  4579                           ;nrf24l01SPISend@data stored from wreg
  4580  060A  00F0               	movwf	nrf24l01SPISend@data
  4581                           
  4582                           ;interface.c: 27: SSP1BUF = data;
  4583  060B  0870               	movf	nrf24l01SPISend@data,w
  4584  060C  0024               	movlb	4	; select bank4
  4585  060D  0091               	movwf	17	;volatile
  4586  060E                     i1l50:	
  4587                           ;interface.c: 29: while (!SSP1STATbits.BF){
  4588                           
  4589  060E  0024               	movlb	4	; select bank4
  4590  060F  1814               	btfsc	20,0	;volatile
  4591  0610  2E13               	goto	i1l1467
  4592                           
  4593                           ;interface.c: 30: __nop();
  4594  0611  0000               	nop
  4595  0612  2E0E               	goto	i1l50
  4596  0613                     i1l1467:	
  4597                           
  4598                           ;interface.c: 31: }
  4599                           ;interface.c: 33: return SSP1BUF;
  4600  0613  0811               	movf	17,w	;volatile
  4601  0614  0008               	return
  4602  0615                     __end_of_nrf24l01SPISend:	
  4603                           
  4604                           	psect	text23
  4605  0625                     __ptext23:	
  4606 ;; *************** function _nrf24l01SPIEnd *****************
  4607 ;; Defined at:
  4608 ;;		line 43 in file "interface.c"
  4609 ;; Parameters:    Size  Location     Type
  4610 ;;		None
  4611 ;; Auto vars:     Size  Location     Type
  4612 ;;		None
  4613 ;; Return value:  Size  Location     Type
  4614 ;;                  1    wreg      void 
  4615 ;; Registers used:
  4616 ;;		wreg
  4617 ;; Tracked objects:
  4618 ;;		On entry : 0/0
  4619 ;;		On exit  : 0/0
  4620 ;;		Unchanged: 0/0
  4621 ;; Data sizes:     COMMON   BANK0   BANK1
  4622 ;;      Params:         0       0       0
  4623 ;;      Locals:         0       0       0
  4624 ;;      Temps:          0       0       0
  4625 ;;      Totals:         0       0       0
  4626 ;;Total ram usage:        0 bytes
  4627 ;; Hardware stack levels used:    1
  4628 ;; Hardware stack levels required when called:    6
  4629 ;; This function calls:
  4630 ;;		Nothing
  4631 ;; This function is called by:
  4632 ;;		_nrf24l01Send
  4633 ;;		_nrf24l01ReceiveString
  4634 ;;		_nrf24l01SendString
  4635 ;; This function uses a non-reentrant model
  4636 ;;
  4637                           
  4638                           
  4639                           ;psect for function _nrf24l01SPIEnd
  4640  0625                     _nrf24l01SPIEnd:	
  4641                           
  4642                           ;interface.c: 44: _delay((unsigned long)((10)*(16000000/4000000.0)));
  4643                           
  4644                           ;incstack = 0
  4645                           ; Regs used in _nrf24l01SPIEnd: [wreg]
  4646  0625  300D               	movlw	13
  4647  0626                     u174_27:	
  4648  0626  0B89               	decfsz	9,f
  4649  0627  2E26               	goto	u174_27
  4650  0628  0000               	nop
  4651                           
  4652                           ;interface.c: 45: PORTAbits.RA1 = 1;
  4653  0629  0020               	movlb	0	; select bank0
  4654  062A  148C               	bsf	12,1	;volatile
  4655  062B  0008               	return
  4656  062C                     __end_of_nrf24l01SPIEnd:	
  4657                           
  4658                           	psect	text24
  4659  062C                     __ptext24:	
  4660 ;; *************** function _enableInterrupts *****************
  4661 ;; Defined at:
  4662 ;;		line 49 in file "interface.c"
  4663 ;; Parameters:    Size  Location     Type
  4664 ;;  enable          1    wreg     unsigned char 
  4665 ;; Auto vars:     Size  Location     Type
  4666 ;;  enable          1    0[COMMON] unsigned char 
  4667 ;; Return value:  Size  Location     Type
  4668 ;;                  1    wreg      void 
  4669 ;; Registers used:
  4670 ;;		wreg, status,0
  4671 ;; Tracked objects:
  4672 ;;		On entry : 0/0
  4673 ;;		On exit  : 0/0
  4674 ;;		Unchanged: 0/0
  4675 ;; Data sizes:     COMMON   BANK0   BANK1
  4676 ;;      Params:         0       0       0
  4677 ;;      Locals:         0       0       0
  4678 ;;      Temps:          0       0       0
  4679 ;;      Totals:         0       0       0
  4680 ;;Total ram usage:        0 bytes
  4681 ;; Hardware stack levels used:    1
  4682 ;; Hardware stack levels required when called:    6
  4683 ;; This function calls:
  4684 ;;		Nothing
  4685 ;; This function is called by:
  4686 ;;		_nrf24l01Send
  4687 ;;		_nrf24l01SendString
  4688 ;; This function uses a non-reentrant model
  4689 ;;
  4690                           
  4691                           
  4692                           ;psect for function _enableInterrupts
  4693  062C                     _enableInterrupts:	
  4694                           
  4695                           ;incstack = 0
  4696                           ; Regs used in _enableInterrupts: [wreg+status,0]
  4697                           ;enableInterrupts@enable stored from wreg
  4698  062C  00F0               	movwf	enableInterrupts@enable
  4699                           
  4700                           ;interface.c: 50: INTCONbits.INTE = enable;
  4701  062D  0C70               	rrf	enableInterrupts@enable,w
  4702  062E  1C03               	skipc
  4703  062F  120B               	bcf	11,4	;volatile
  4704  0630  1803               	skipnc
  4705  0631  160B               	bsf	11,4	;volatile
  4706  0632  0008               	return
  4707  0633                     __end_of_enableInterrupts:	
  4708  007E                     btemp	set	126	;btemp
  4709  007E                     int$flags	set	126
  4710  007E                     wtemp0	set	126


Data Sizes:
    Strings     35
    Constant    6
    Data        0
    BSS         52
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     41      77
    BANK1            32      3      19

Pointer List with Targets:

    strcpy@from	PTR const unsigned char  size(2) Largest target is 6
		 -> STR_6(CODE[5]), STR_5(CODE[6]), STR_4(CODE[6]), STR_3(CODE[5]), 
		 -> STR_2(CODE[5]), STR_1(CODE[4]), 

    strcpy@to	PTR unsigned char  size(1) Largest target is 8
		 -> nrf24l01TXTopic(BANK0[8]), 

    strcpy@cp	PTR unsigned char  size(1) Largest target is 8
		 -> nrf24l01TXTopic(BANK0[8]), 

    strcmp@s2	PTR const unsigned char  size(2) Largest target is 8
		 -> STR_7(CODE[4]), nrf24l01TXTopic(BANK0[8]), 

    strcmp@s1	PTR const unsigned char  size(1) Largest target is 8
		 -> nrf24l01RXValue(BANK0[8]), nrf24l01RXTopic(BANK0[8]), 

    utoa@buf	PTR unsigned char  size(1) Largest target is 8
		 -> nrf24l01TXValue(BANK0[8]), 

    sp__itoa	PTR unsigned char  size(1) Largest target is 0

    sp__utoa	PTR unsigned char  size(1) Largest target is 8
		 -> nrf24l01TXValue(BANK0[8]), 

    sp__strcpy	PTR unsigned char  size(1) Largest target is 8
		 -> nrf24l01TXTopic(BANK0[8]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    _ISR->_nrf24l01ISR
    _nrf24l01ISR->_nrf24l01ReceiveString

Critical Paths under _main in BANK0

    _main->_utoa
    _nrf24l01Init->_nrf24l01InitRegisters
    _loop->_utoa
    _utoa->_getADCValue
    _getADCValue->___lldiv

Critical Paths under _ISR in BANK0

    _ISR->_nrf24l01ISR

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     4      0   11822
                                             40 BANK0      1     1      0
                                              0 BANK1      3     3      0
                               _loop
                       _nrf24l01Init
                 _nrf24l01SendString
                      _read_flashmem
                              _sleep
                             _strcpy
                               _utoa
 ---------------------------------------------------------------------------------
 (1) _read_flashmem                                        9     7      2     220
                                              3 BANK0      9     7      2
 ---------------------------------------------------------------------------------
 (1) _nrf24l01Init                                         1     1      0    1562
                                             12 BANK0      1     1      0
              _nrf24l01InitRegisters
              _nrf24l01InterfaceInit
 ---------------------------------------------------------------------------------
 (2) _nrf24l01InterfaceInit                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _nrf24l01InitRegisters                                9     9      0    1562
                                              3 BANK0      9     9      0
                       _nrf24l01Send
 ---------------------------------------------------------------------------------
 (1) _loop                                                 0     0      0    5407
                        _getADCValue
                 _nrf24l01SendString
                              _sleep
                             _strcpy
                               _utoa
 ---------------------------------------------------------------------------------
 (1) _utoa                                                 9     5      4    2087
                                             31 BANK0      9     5      4
                            ___lwdiv
                            ___lwmod
                        _getADCValue (ARG)
                      _read_flashmem (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              6     2      4     287
                                              3 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              8     4      4     418
                                              3 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (1) _strcpy                                               5     3      2     639
                                              3 BANK0      5     3      2
 ---------------------------------------------------------------------------------
 (1) _sleep                                                0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _nrf24l01SendString                                   3     3      0    1777
                                              3 BANK0      3     3      0
                   _enableInterrupts
                     _nrf24l01SPIEnd
                    _nrf24l01SPISend
                   _nrf24l01SPIStart
                  _nrf24l01SetRXMode
 ---------------------------------------------------------------------------------
 (8) _nrf24l01SetRXMode                                    3     3      0    1461
                       _nrf24l01Send
 ---------------------------------------------------------------------------------
 (9) _nrf24l01Send                                         3     2      1    1327
                   _enableInterrupts
                     _nrf24l01SPIEnd
                    _nrf24l01SPISend
                   _nrf24l01SPIStart
 ---------------------------------------------------------------------------------
 (10) _nrf24l01SPIStart                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _nrf24l01SPISend                                     1     1      0      22
 ---------------------------------------------------------------------------------
 (10) _nrf24l01SPIEnd                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _enableInterrupts                                    1     1      0      22
 ---------------------------------------------------------------------------------
 (2) _getADCValue                                         14    10      4     904
                                             17 BANK0     14    10      4
                            ___lldiv
                             ___lmul
 ---------------------------------------------------------------------------------
 (3) ___lmul                                              12     4      8     220
                                              3 BANK0     12     4      8
 ---------------------------------------------------------------------------------
 (3) ___lldiv                                             14     6      8     290
                                              3 BANK0     14     6      8
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _ISR                                                  1     1      0    6600
                                              2 BANK0      1     1      0
                        _nrf24l01ISR
 ---------------------------------------------------------------------------------
 (7) _nrf24l01ISR                                          2     2      0    6600
                                             13 COMMON     1     1      0
                                              1 BANK0      1     1      0
              _nrf24l01ReceiveString
                       _nrf24l01Send
                  _nrf24l01SetRXMode
 ---------------------------------------------------------------------------------
 (8) _nrf24l01ReceiveString                                7     7      0    3701
                                              6 COMMON     7     7      0
                     _nrf24l01SPIEnd
                    _nrf24l01SPISend
                   _nrf24l01SPIStart
                       _nrf24l01Send
                  _nrf24l01SetRXMode
                             _strcmp
 ---------------------------------------------------------------------------------
 (9) _strcmp                                               5     3      2     279
                                              0 COMMON     5     3      2
 ---------------------------------------------------------------------------------
 (8) _nrf24l01SetRXMode                                    3     3      0    1461
                       _nrf24l01Send
 ---------------------------------------------------------------------------------
 (9) _nrf24l01Send                                         3     2      1    1327
                   _enableInterrupts
                     _nrf24l01SPIEnd
                    _nrf24l01SPISend
                   _nrf24l01SPIStart
 ---------------------------------------------------------------------------------
 (10) _nrf24l01SPIStart                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _nrf24l01SPISend                                     1     1      0      22
 ---------------------------------------------------------------------------------
 (10) _nrf24l01SPIEnd                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _enableInterrupts                                    1     1      0      22
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _loop
     _getADCValue
       ___lldiv
       ___lmul
     _nrf24l01SendString
       _enableInterrupts
       _nrf24l01SPIEnd
       _nrf24l01SPISend
       _nrf24l01SPIStart
       _nrf24l01SetRXMode
         _nrf24l01Send
           _enableInterrupts
           _nrf24l01SPIEnd
           _nrf24l01SPISend
           _nrf24l01SPIStart
     _sleep
     _strcpy
     _utoa
       ___lwdiv
       ___lwmod
       _getADCValue (ARG)
         ___lldiv
         ___lmul
       _read_flashmem (ARG)
   _nrf24l01Init
     _nrf24l01InitRegisters
       _nrf24l01Send
         _enableInterrupts
         _nrf24l01SPIEnd
         _nrf24l01SPISend
         _nrf24l01SPIStart
     _nrf24l01InterfaceInit
   _nrf24l01SendString
     _enableInterrupts
     _nrf24l01SPIEnd
     _nrf24l01SPISend
     _nrf24l01SPIStart
     _nrf24l01SetRXMode
       _nrf24l01Send
         _enableInterrupts
         _nrf24l01SPIEnd
         _nrf24l01SPISend
         _nrf24l01SPIStart
   _read_flashmem
   _sleep
   _strcpy
   _utoa
     ___lwdiv
     ___lwmod
     _getADCValue (ARG)
       ___lldiv
       ___lmul
     _read_flashmem (ARG)

 _ISR (ROOT)
   _nrf24l01ISR
     _nrf24l01ReceiveString
       _nrf24l01SPIEnd
       _nrf24l01SPISend
       _nrf24l01SPIStart
       _nrf24l01Send
         _enableInterrupts
         _nrf24l01SPIEnd
         _nrf24l01SPISend
         _nrf24l01SPIStart
       _nrf24l01SetRXMode
         _nrf24l01Send
           _enableInterrupts
           _nrf24l01SPIEnd
           _nrf24l01SPISend
           _nrf24l01SPIStart
       _strcmp
     _nrf24l01Send
       _enableInterrupts
       _nrf24l01SPIEnd
       _nrf24l01SPISend
       _nrf24l01SPIStart
     _nrf24l01SetRXMode
       _nrf24l01Send
         _enableInterrupts
         _nrf24l01SPIEnd
         _nrf24l01SPISend
         _nrf24l01SPIStart

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM              70      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      E       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0      6E       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BANK0               50     29      4D       6       96.3%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BITBANK1            20      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BANK1               20      3      13       8       59.4%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
DATA                 0      0      6E       9        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Fri Jun 22 13:02:03 2018

                   __CFG_CP$OFF 0000             nrf24l01Send@command 0072                     __CFG_LVP$ON 0000  
                           l156 0615                             l149 0367                             l173 02F8  
                           l270 01BA                             l266 01AA                             l576 040D  
                           _ISR 0004                             u905 0443                             u915 0457  
                           u925 0463                             u845 0524                             u855 052B  
                           u955 0482                             u885 0437                             u975 048C  
                           u985 0496                             u995 049E    nrf24l01SendString@waitForAck 0024  
                  __CFG_BORV$LO 0000                             wreg 0009                            ?_ISR 0070  
                ??_nrf24l01Init 002C                            l2205 02D7                            l1601 0553  
                          l1533 0523                            l1605 055F                            l1711 01EB  
                          l1703 01DB                            l1561 046D                            l1529 0519  
                          l1625 036C                            l1609 0568                            l1547 0434  
                          l1627 0360                            l1723 0206                            l1715 01F6  
                          l1707 01E0                            l2259 0340                            l1557 0462  
                          l1549 0442                            l1629 038A                            l1741 022D  
                          l1645 05BE                            l1743 0221                            l1727 0211  
                          l1719 01FB                            l1583 049D                            l1575 047F  
                          l1577 048B                            l1649 03CD                  ??_nrf24l01Send 0071  
                          l1587 04A6                            l1659 03E9                            l1695 01C5  
                          l1599 0547                            l1689 01AE                            l1699 01D0  
                          STR_1 065D                    __CFG_WDTE$ON 0000                            STR_2 064A  
                          STR_3 064F                            STR_4 0639                            STR_5 0633  
                          STR_6 0654                            STR_7 0659                            u1025 054A  
                          u1045 0559                            u1055 0560                            u1627 02CB  
                          u1637 05DA                            u1647 05E3                            u1657 023D  
                          u1667 01B6                            u1677 0215                            u1687 022E  
                          u1697 035D                            i1l50 060E  __size_of_nrf24l01InterfaceInit 000E  
                  __CFG_WRT$OFF 0000   __end_of_nrf24l01InterfaceInit 060A                   __p_NVMEM_text 07E0  
                          _main 02BB                            _loop 0100                            fsr0h 0005  
                          fsr1h 0007                            indf0 0000                            fsr0l 0004  
                          indf1 0001                            fsr1l 0006                            btemp 007E  
                          _utoa 03C7                            start 0012  __size_of_nrf24l01ReceiveString 00DE  
                 __CFG_MCLRE$ON 0000   __end_of_nrf24l01ReceiveString 0100                           ??_ISR 0022  
           nrf24l01SendString@i 0025            __size_of_getADCValue 0085     __size_of_nrf24l01SendString 0096  
                         ?_main 0070                           ?_loop 0070                 __end_of___lldiv 0476  
                         ?_utoa 003F                 __end_of___lwdiv 04AB                           i1l144 000D  
               __end_of___lwmod 056D                           _NVMEM 07E0          enableInterrupts@enable 0070  
           ___lmul@multiplicand 0027                   __CFG_PWRTE$ON 0000                           _sleep 0615  
                         main@i 0048                  __CFG_BOREN$OFF 0000                _enableInterrupts 062C  
                         utoa@c 0046                           utoa@v 0044                           status 0003  
                         wtemp0 007E               getADCValue@adcSum 003B                _nrf24l01SPIStart 061E  
               __initialization 0013                    __end_of_main 0342                    __end_of_loop 019B  
                  __end_of_utoa 0423                  __CFG_LPBOR$OFF 0000                          ??_main 00B0  
                        ??_loop 0048                          ??_utoa 0043                ??_nrf24l01SPIEnd 0070  
      __size_of_nrf24l01SPISend 000B                          _ADRESH 009C                          _ADRESL 009B  
                        ?_sleep 0070                          _ANSELA 018C                          _ANSELC 018E  
                        i1l1513 04D7                          i1l1523 058E                          i1l1517 056F  
                        i1l1519 0577                          i1l1467 0613                          i1l1811 00BB  
                        i1l1803 009B                          i1l1823 00E2                          i1l1815 00C1  
                        i1l1807 00A7                          i1l1753 002A                          i1l1819 00CE  
                        i1l1771 0049                          i1l1765 003C                          i1l1783 0065  
                        i1l1759 0037                          i1l1793 0087                          i1l1777 0057  
                        i1l1787 006F                          i1l1797 008D                          i1l1789 0073  
                        i1l1981 05B0                          i1l1977 05AC                          u133_25 0085  
                        u136_25 00B9                          u138_25 00E0                          u170_27 04BB  
                        u171_27 04CB                          u172_27 04D4                          u173_27 0621  
                        u174_27 0626                          _PMADRH 0192                          _PMADRL 0191  
                        _PMDATH 0194                          _PMDATL 0193                          _PMCON1 0195  
                        _PMCON2 0196            __size_of_nrf24l01ISR 0024         nrf24l01SetRXMode@config 0074  
                        ___lmul 0510         nrf24l01SetRXMode@rxMode 0075                  __CFG_STVREN$ON 0000  
                     ??___lldiv 002B                       ??___lwdiv 0027                       ??___lwmod 0027  
          __end_of_nrf24l01Init 05E9            __end_of_nrf24l01Send 05FC           _nrf24l01InitRegisters 0231  
                        _strcmp 056D                          _strcpy 05B8          __size_of_read_flashmem 0032  
            getADCValue@adcLoop 003A         __end_of__initialization 001F              getADCValue@channel 0039  
                 __end_of_NVMEM 0800              getADCValue@divider 0031                  __pcstackCOMMON 0070  
                 __end_of_sleep 061E   nrf24l01InitRegisters@enRXAddr 0028                  _OPTION_REGbits 0095  
                       ??_sleep 0023                      __pbssBANK0 0049                      __pbssBANK1 00A0  
             ??_nrf24l01SPISend 0070                   _read_flashmem 04DE                      __pmaintext 02BB  
                       ?___lmul 0023               _nrf24l01SetRXMode 04AB          ?_nrf24l01InitRegisters 0070  
                    __pintentry 0004             nrf24l01SPISend@data 0070                  ___lmul@product 002B  
            ?_nrf24l01SetRXMode 0070        __end_of_enableInterrupts 0633                         ?_strcmp 0070  
                       ?_strcpy 0023           __end_of_n_ADDRESS_MUL 0662             ??_nrf24l01SetRXMode 0073  
      __end_of_nrf24l01SPIStart 0625                         _SSP1BUF 0211           _nrf24l01InterfaceInit 05FC  
                ?_read_flashmem 0023                   ??_getADCValue 0035           __size_of_nrf24l01Init 0016  
         __size_of_nrf24l01Send 0013       __end_of_nrf24l01SetRXMode 04DE      __end_of_nrf24l01SendString 0231  
               __size_of___lmul 0030                         ___lldiv 0423                         ___lwdiv 0476  
         _nrf24l01ReceiveString 0022                         ___lwmod 0540                         __ptext1 04DE  
                       __ptext2 05D3                         __ptext3 05FC                         __ptext4 0231  
                       __ptext5 0100                         __ptext6 03C7                         __ptext7 0540  
                       __ptext8 0476                         __ptext9 05B8                 __size_of_strcmp 0027  
               __size_of_strcpy 001B                    __size_of_ISR 000E                         _counter 0049  
                       clrloop0 0640            end_of_initialization 001F                    _nrf24l01Name 00A0  
                  _nrf24l01Init 05D3                    _nrf24l01Send 05E9                 ___lldiv@divisor 0023  
               ___lldiv@counter 0030                         utoa@buf 0047                         utoa@val 003F  
                       strcmp@r 0073             __end_of_getADCValue 03C7                       _PORTAbits 000C  
    nrf24l01ReceiveString@width 0079                __CFG_FOSC$INTOSC 0000                       _TRISAbits 008C  
                     _TRISCbits 008E                nrf24l01Send@data 0020                   ??_nrf24l01ISR 007D  
        ?_nrf24l01InterfaceInit 0070                 ??_read_flashmem 0025      __size_of_nrf24l01SetRXMode 0033  
        ?_nrf24l01ReceiveString 0070                  __end_of___lmul 0540                  __end_of_strcmp 0594  
                __end_of_strcpy 05D3             start_initialization 0013                 _nrf24l01SPISend 060A  
                   __end_of_ISR 0012                 _nrf24l01RXValue 004D                 _nrf24l01RXTopic 0055  
               _nrf24l01TXValue 005D                 _nrf24l01TXTopic 0065         __size_of_nrf24l01SPIEnd 0007  
       ??_nrf24l01InitRegisters 0023                     _getADCValue 0342                        ??___lmul 002B  
           __end_of_nrf24l01ISR 05B8               ?_enableInterrupts 0070                        ??_strcmp 0072  
                      ??_strcpy 0025              ??_enableInterrupts 0070                       ___latbits 0000  
                 __pcstackBANK0 0020                   __pcstackBANK1 00B0               ?_nrf24l01SPIStart 0070  
            ??_nrf24l01SPIStart 0070                ___lwdiv@dividend 0025                        ?___lldiv 0023  
                      ?___lwdiv 0023                        ?___lwmod 0023            __end_of_n_ADDRESS_P0 064A  
       __end_of_nrf24l01SPISend 0615                   _NVMEM_absaddr 07E0       nrf24l01InitRegisters@enAA 0029  
            _nrf24l01SendString 019B                ___lwdiv@quotient 0028                  __size_of_sleep 0009  
           ?_nrf24l01SendString 0070                     _nrf24l01ISR 0594                       clear_ram0 063F  
                     _sleepLoop 004B            ??_nrf24l01SendString 0023                      _ADCON0bits 009D  
                    _ADCON1bits 009E                        _WPUAbits 020C               ___lmul@multiplier 0023  
       ??_nrf24l01InterfaceInit 0023               nrf24l01ISR@status 0021                  _nrf24l01SPIEnd 0625  
       ??_nrf24l01ReceiveString 0076            read_flashmem@address 002A                __size_of___lldiv 0053  
              __size_of___lwdiv 0035                __size_of___lwmod 002D                ?_nrf24l01SPISend 0070  
                    _ANSELAbits 018C                      _ANSELCbits 018E                   _n_ADDRESS_MUL 0661  
               ___lwdiv@divisor 0023                 ___lwdiv@counter 002A                        __ptext10 0615  
                      __ptext11 019B                        __ptext20 05E9                        __ptext12 0342  
                      __ptext21 061E                        __ptext13 0510                        __ptext22 060A  
                      __ptext14 0423                        __ptext23 0625                        __ptext24 062C  
                      __ptext16 0594                        __ptext17 0022                        __ptext18 056D  
                      __ptext19 04AB          __end_of_nrf24l01SPIEnd 062C                        _nrf24l01 004C  
                    strcpy@from 0023                   __size_of_main 0087                   __size_of_loop 009B  
                 __size_of_utoa 005C    nrf24l01InitRegisters@feature 0026           __end_of_read_flashmem 0510  
  nrf24l01InitRegisters@rfSetup 0025                    ?_getADCValue 0031  __size_of_nrf24l01InitRegisters 008A  
 __end_of_nrf24l01InitRegisters 02BB                        int$flags 007E    nrf24l01InitRegisters@setupAW 0024  
                  _SSP1STATbits 0214                      _INTCONbits 000B                      _FVRCONbits 0117  
                __pstringtext10 0000                 ?_nrf24l01SPIEnd 0070                        intlevel1 0000  
           read_flashmem@offset 0023                    _n_ADDRESS_P0 0645             read_flashmem@result 0028  
     __size_of_enableInterrupts 0007                      _PMCON1bits 0195                ___lwmod@dividend 0025  
        nrf24l01ReceiveString@i 007C                ___lldiv@dividend 0027               __CFG_CLKOUTEN$OFF 0000  
   nrf24l01InitRegisters@config 002B                      _OSCCONbits 0099       __size_of_nrf24l01SPIStart 0007  
   nrf24l01InitRegisters@status 0027       nrf24l01ReceiveString@byte 007B                   __pstringtext1 0645  
                 __pstringtext2 0661                   __pstringtext3 0633                   __pstringtext4 0639  
                 __pstringtext5 064A                   __pstringtext6 064F                   __pstringtext7 0654  
                 __pstringtext8 0659                   __pstringtext9 065D                        utoa@base 0041  
    nrf24l01InitRegisters@DynPD 002A                        strcmp@s1 0074                        strcmp@s2 0070  
              ___lldiv@quotient 002C                 ___lwmod@divisor 0023                        strcpy@cp 0026  
                      strcpy@to 0027                 ___lwmod@counter 0028                     _SSPCON1bits 0215  
                    _WDTCONbits 0097     nrf24l01ReceiveString@offset 007A                   ?_nrf24l01Init 0070  
                 ?_nrf24l01Send 0020                      _STATUSbits 0003                    ?_nrf24l01ISR 0070  
