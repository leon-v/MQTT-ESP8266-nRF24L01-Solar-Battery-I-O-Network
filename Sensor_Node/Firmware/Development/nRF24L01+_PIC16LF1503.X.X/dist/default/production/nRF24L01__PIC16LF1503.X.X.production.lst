

Microchip Technology PIC LITE Macro Assembler V1.45 build -152302408 
                                                                                               Thu Jun 21 09:35:36 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	16LF1503
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	stringtext1,global,class=STRCODE,delta=2
     5                           	psect	stringtext2,global,class=STRCODE,delta=2
     6                           	psect	_NVMEM_text,global,class=CODE,delta=2
     7                           	psect	stringtext3,global,class=STRCODE,delta=2
     8                           	psect	stringtext4,global,class=STRCODE,delta=2
     9                           	psect	stringtext5,global,class=STRCODE,delta=2
    10                           	psect	stringtext6,global,class=STRCODE,delta=2
    11                           	psect	stringtext7,global,class=STRCODE,delta=2
    12                           	psect	stringtext8,global,class=STRCODE,delta=2
    13                           	psect	stringtext9,global,class=STRCODE,delta=2
    14                           	psect	stringtext10,global,class=STRCODE,delta=2
    15                           	psect	cinit,global,class=CODE,merge=1,delta=2
    16                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    17                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    18                           	psect	clrtext,global,class=CODE,delta=2
    19                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    20                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    21                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    22                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    23                           	psect	text1,local,class=CODE,merge=1,delta=2
    24                           	psect	text2,local,class=CODE,merge=1,delta=2
    25                           	psect	text3,local,class=CODE,merge=1,delta=2
    26                           	psect	text4,local,class=CODE,merge=1,delta=2
    27                           	psect	text5,local,class=CODE,merge=1,delta=2
    28                           	psect	text6,local,class=CODE,merge=1,delta=2,group=1
    29                           	psect	text7,local,class=CODE,merge=1,delta=2,group=1
    30                           	psect	text8,local,class=CODE,merge=1,delta=2,group=1
    31                           	psect	text9,local,class=CODE,merge=1,delta=2,group=1
    32                           	psect	text10,local,class=CODE,merge=1,delta=2
    33                           	psect	text11,local,class=CODE,merge=1,delta=2
    34                           	psect	text12,local,class=CODE,merge=1,delta=2,group=1
    35                           	psect	text13,local,class=CODE,merge=1,delta=2,group=1
    36                           	psect	text14,local,class=CODE,merge=1,delta=2
    37                           	psect	text15,local,class=CODE,merge=1,delta=2
    38                           	psect	intentry,global,class=CODE,delta=2
    39                           	psect	text17,local,class=CODE,merge=1,delta=2
    40                           	psect	text18,local,class=CODE,merge=1,delta=2
    41                           	psect	text19,local,class=CODE,merge=1,delta=2,group=1
    42                           	psect	text20,local,class=CODE,merge=1,delta=2
    43                           	psect	text21,local,class=CODE,merge=1,delta=2
    44                           	psect	text22,local,class=CODE,merge=1,delta=2
    45                           	psect	text23,local,class=CODE,merge=1,delta=2
    46                           	psect	text24,local,class=CODE,merge=1,delta=2
    47                           	psect	text25,local,class=CODE,merge=1,delta=2
    48                           	dabs	1,0x7E,2
    49  0000                     
    50                           ; Version 1.45
    51                           ; Generated 16/11/2017 GMT
    52                           ; 
    53                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    54                           ; All rights reserved.
    55                           ; 
    56                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    57                           ; 
    58                           ; Redistribution and use in source and binary forms, with or without modification, are
    59                           ; permitted provided that the following conditions are met:
    60                           ; 
    61                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    62                           ;        conditions and the following disclaimer.
    63                           ; 
    64                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    65                           ;        of conditions and the following disclaimer in the documentation and/or other
    66                           ;        materials provided with the distribution.
    67                           ; 
    68                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    69                           ;        software without specific prior written permission.
    70                           ; 
    71                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    72                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    73                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    74                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    75                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    76                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    77                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    78                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    79                           ; 
    80                           ; 
    81                           ; Code-generator required, PIC16LF1503 Definitions
    82                           ; 
    83                           ; SFR Addresses
    84  0000                     	;# 
    85  0001                     	;# 
    86  0002                     	;# 
    87  0003                     	;# 
    88  0004                     	;# 
    89  0005                     	;# 
    90  0006                     	;# 
    91  0007                     	;# 
    92  0008                     	;# 
    93  0009                     	;# 
    94  000A                     	;# 
    95  000B                     	;# 
    96  000C                     	;# 
    97  000E                     	;# 
    98  0011                     	;# 
    99  0012                     	;# 
   100  0013                     	;# 
   101  0015                     	;# 
   102  0016                     	;# 
   103  0016                     	;# 
   104  0017                     	;# 
   105  0018                     	;# 
   106  0019                     	;# 
   107  001A                     	;# 
   108  001B                     	;# 
   109  001C                     	;# 
   110  008C                     	;# 
   111  008E                     	;# 
   112  0091                     	;# 
   113  0092                     	;# 
   114  0093                     	;# 
   115  0095                     	;# 
   116  0096                     	;# 
   117  0097                     	;# 
   118  0099                     	;# 
   119  009A                     	;# 
   120  009B                     	;# 
   121  009B                     	;# 
   122  009C                     	;# 
   123  009D                     	;# 
   124  009E                     	;# 
   125  009F                     	;# 
   126  010C                     	;# 
   127  010E                     	;# 
   128  0111                     	;# 
   129  0112                     	;# 
   130  0113                     	;# 
   131  0114                     	;# 
   132  0115                     	;# 
   133  0116                     	;# 
   134  0117                     	;# 
   135  0118                     	;# 
   136  0119                     	;# 
   137  011D                     	;# 
   138  018C                     	;# 
   139  018E                     	;# 
   140  0191                     	;# 
   141  0191                     	;# 
   142  0192                     	;# 
   143  0193                     	;# 
   144  0193                     	;# 
   145  0194                     	;# 
   146  0195                     	;# 
   147  0196                     	;# 
   148  020C                     	;# 
   149  0211                     	;# 
   150  0211                     	;# 
   151  0212                     	;# 
   152  0212                     	;# 
   153  0213                     	;# 
   154  0213                     	;# 
   155  0214                     	;# 
   156  0214                     	;# 
   157  0215                     	;# 
   158  0215                     	;# 
   159  0215                     	;# 
   160  0216                     	;# 
   161  0216                     	;# 
   162  0217                     	;# 
   163  0217                     	;# 
   164  0391                     	;# 
   165  0392                     	;# 
   166  0393                     	;# 
   167  0498                     	;# 
   168  0498                     	;# 
   169  0499                     	;# 
   170  049A                     	;# 
   171  049B                     	;# 
   172  049B                     	;# 
   173  049C                     	;# 
   174  049D                     	;# 
   175  049E                     	;# 
   176  049F                     	;# 
   177  0611                     	;# 
   178  0612                     	;# 
   179  0613                     	;# 
   180  0613                     	;# 
   181  0614                     	;# 
   182  0615                     	;# 
   183  0616                     	;# 
   184  0616                     	;# 
   185  0617                     	;# 
   186  0618                     	;# 
   187  0619                     	;# 
   188  0619                     	;# 
   189  061A                     	;# 
   190  061B                     	;# 
   191  061C                     	;# 
   192  061C                     	;# 
   193  0691                     	;# 
   194  0692                     	;# 
   195  0693                     	;# 
   196  0694                     	;# 
   197  0695                     	;# 
   198  0F0F                     	;# 
   199  0F10                     	;# 
   200  0F11                     	;# 
   201  0F12                     	;# 
   202  0F13                     	;# 
   203  0F14                     	;# 
   204  0F15                     	;# 
   205  0F16                     	;# 
   206  0F17                     	;# 
   207  0F18                     	;# 
   208  0F19                     	;# 
   209  0F1A                     	;# 
   210  0F1B                     	;# 
   211  0F1C                     	;# 
   212  0F1D                     	;# 
   213  0F1E                     	;# 
   214  0F1F                     	;# 
   215  0FE3                     	;# 
   216  0FE4                     	;# 
   217  0FE5                     	;# 
   218  0FE6                     	;# 
   219  0FE7                     	;# 
   220  0FE8                     	;# 
   221  0FE9                     	;# 
   222  0FEA                     	;# 
   223  0FEB                     	;# 
   224  0FED                     	;# 
   225  0FEE                     	;# 
   226  0FEF                     	;# 
   227  0000                     	;# 
   228  0001                     	;# 
   229  0002                     	;# 
   230  0003                     	;# 
   231  0004                     	;# 
   232  0005                     	;# 
   233  0006                     	;# 
   234  0007                     	;# 
   235  0008                     	;# 
   236  0009                     	;# 
   237  000A                     	;# 
   238  000B                     	;# 
   239  000C                     	;# 
   240  000E                     	;# 
   241  0011                     	;# 
   242  0012                     	;# 
   243  0013                     	;# 
   244  0015                     	;# 
   245  0016                     	;# 
   246  0016                     	;# 
   247  0017                     	;# 
   248  0018                     	;# 
   249  0019                     	;# 
   250  001A                     	;# 
   251  001B                     	;# 
   252  001C                     	;# 
   253  008C                     	;# 
   254  008E                     	;# 
   255  0091                     	;# 
   256  0092                     	;# 
   257  0093                     	;# 
   258  0095                     	;# 
   259  0096                     	;# 
   260  0097                     	;# 
   261  0099                     	;# 
   262  009A                     	;# 
   263  009B                     	;# 
   264  009B                     	;# 
   265  009C                     	;# 
   266  009D                     	;# 
   267  009E                     	;# 
   268  009F                     	;# 
   269  010C                     	;# 
   270  010E                     	;# 
   271  0111                     	;# 
   272  0112                     	;# 
   273  0113                     	;# 
   274  0114                     	;# 
   275  0115                     	;# 
   276  0116                     	;# 
   277  0117                     	;# 
   278  0118                     	;# 
   279  0119                     	;# 
   280  011D                     	;# 
   281  018C                     	;# 
   282  018E                     	;# 
   283  0191                     	;# 
   284  0191                     	;# 
   285  0192                     	;# 
   286  0193                     	;# 
   287  0193                     	;# 
   288  0194                     	;# 
   289  0195                     	;# 
   290  0196                     	;# 
   291  020C                     	;# 
   292  0211                     	;# 
   293  0211                     	;# 
   294  0212                     	;# 
   295  0212                     	;# 
   296  0213                     	;# 
   297  0213                     	;# 
   298  0214                     	;# 
   299  0214                     	;# 
   300  0215                     	;# 
   301  0215                     	;# 
   302  0215                     	;# 
   303  0216                     	;# 
   304  0216                     	;# 
   305  0217                     	;# 
   306  0217                     	;# 
   307  0391                     	;# 
   308  0392                     	;# 
   309  0393                     	;# 
   310  0498                     	;# 
   311  0498                     	;# 
   312  0499                     	;# 
   313  049A                     	;# 
   314  049B                     	;# 
   315  049B                     	;# 
   316  049C                     	;# 
   317  049D                     	;# 
   318  049E                     	;# 
   319  049F                     	;# 
   320  0611                     	;# 
   321  0612                     	;# 
   322  0613                     	;# 
   323  0613                     	;# 
   324  0614                     	;# 
   325  0615                     	;# 
   326  0616                     	;# 
   327  0616                     	;# 
   328  0617                     	;# 
   329  0618                     	;# 
   330  0619                     	;# 
   331  0619                     	;# 
   332  061A                     	;# 
   333  061B                     	;# 
   334  061C                     	;# 
   335  061C                     	;# 
   336  0691                     	;# 
   337  0692                     	;# 
   338  0693                     	;# 
   339  0694                     	;# 
   340  0695                     	;# 
   341  0F0F                     	;# 
   342  0F10                     	;# 
   343  0F11                     	;# 
   344  0F12                     	;# 
   345  0F13                     	;# 
   346  0F14                     	;# 
   347  0F15                     	;# 
   348  0F16                     	;# 
   349  0F17                     	;# 
   350  0F18                     	;# 
   351  0F19                     	;# 
   352  0F1A                     	;# 
   353  0F1B                     	;# 
   354  0F1C                     	;# 
   355  0F1D                     	;# 
   356  0F1E                     	;# 
   357  0F1F                     	;# 
   358  0FE3                     	;# 
   359  0FE4                     	;# 
   360  0FE5                     	;# 
   361  0FE6                     	;# 
   362  0FE7                     	;# 
   363  0FE8                     	;# 
   364  0FE9                     	;# 
   365  0FEA                     	;# 
   366  0FEB                     	;# 
   367  0FED                     	;# 
   368  0FEE                     	;# 
   369  0FEF                     	;# 
   370  0000                     	;# 
   371  0001                     	;# 
   372  0002                     	;# 
   373  0003                     	;# 
   374  0004                     	;# 
   375  0005                     	;# 
   376  0006                     	;# 
   377  0007                     	;# 
   378  0008                     	;# 
   379  0009                     	;# 
   380  000A                     	;# 
   381  000B                     	;# 
   382  000C                     	;# 
   383  000E                     	;# 
   384  0011                     	;# 
   385  0012                     	;# 
   386  0013                     	;# 
   387  0015                     	;# 
   388  0016                     	;# 
   389  0016                     	;# 
   390  0017                     	;# 
   391  0018                     	;# 
   392  0019                     	;# 
   393  001A                     	;# 
   394  001B                     	;# 
   395  001C                     	;# 
   396  008C                     	;# 
   397  008E                     	;# 
   398  0091                     	;# 
   399  0092                     	;# 
   400  0093                     	;# 
   401  0095                     	;# 
   402  0096                     	;# 
   403  0097                     	;# 
   404  0099                     	;# 
   405  009A                     	;# 
   406  009B                     	;# 
   407  009B                     	;# 
   408  009C                     	;# 
   409  009D                     	;# 
   410  009E                     	;# 
   411  009F                     	;# 
   412  010C                     	;# 
   413  010E                     	;# 
   414  0111                     	;# 
   415  0112                     	;# 
   416  0113                     	;# 
   417  0114                     	;# 
   418  0115                     	;# 
   419  0116                     	;# 
   420  0117                     	;# 
   421  0118                     	;# 
   422  0119                     	;# 
   423  011D                     	;# 
   424  018C                     	;# 
   425  018E                     	;# 
   426  0191                     	;# 
   427  0191                     	;# 
   428  0192                     	;# 
   429  0193                     	;# 
   430  0193                     	;# 
   431  0194                     	;# 
   432  0195                     	;# 
   433  0196                     	;# 
   434  020C                     	;# 
   435  0211                     	;# 
   436  0211                     	;# 
   437  0212                     	;# 
   438  0212                     	;# 
   439  0213                     	;# 
   440  0213                     	;# 
   441  0214                     	;# 
   442  0214                     	;# 
   443  0215                     	;# 
   444  0215                     	;# 
   445  0215                     	;# 
   446  0216                     	;# 
   447  0216                     	;# 
   448  0217                     	;# 
   449  0217                     	;# 
   450  0391                     	;# 
   451  0392                     	;# 
   452  0393                     	;# 
   453  0498                     	;# 
   454  0498                     	;# 
   455  0499                     	;# 
   456  049A                     	;# 
   457  049B                     	;# 
   458  049B                     	;# 
   459  049C                     	;# 
   460  049D                     	;# 
   461  049E                     	;# 
   462  049F                     	;# 
   463  0611                     	;# 
   464  0612                     	;# 
   465  0613                     	;# 
   466  0613                     	;# 
   467  0614                     	;# 
   468  0615                     	;# 
   469  0616                     	;# 
   470  0616                     	;# 
   471  0617                     	;# 
   472  0618                     	;# 
   473  0619                     	;# 
   474  0619                     	;# 
   475  061A                     	;# 
   476  061B                     	;# 
   477  061C                     	;# 
   478  061C                     	;# 
   479  0691                     	;# 
   480  0692                     	;# 
   481  0693                     	;# 
   482  0694                     	;# 
   483  0695                     	;# 
   484  0F0F                     	;# 
   485  0F10                     	;# 
   486  0F11                     	;# 
   487  0F12                     	;# 
   488  0F13                     	;# 
   489  0F14                     	;# 
   490  0F15                     	;# 
   491  0F16                     	;# 
   492  0F17                     	;# 
   493  0F18                     	;# 
   494  0F19                     	;# 
   495  0F1A                     	;# 
   496  0F1B                     	;# 
   497  0F1C                     	;# 
   498  0F1D                     	;# 
   499  0F1E                     	;# 
   500  0F1F                     	;# 
   501  0FE3                     	;# 
   502  0FE4                     	;# 
   503  0FE5                     	;# 
   504  0FE6                     	;# 
   505  0FE7                     	;# 
   506  0FE8                     	;# 
   507  0FE9                     	;# 
   508  0FEA                     	;# 
   509  0FEB                     	;# 
   510  0FED                     	;# 
   511  0FEE                     	;# 
   512  0FEF                     	;# 
   513  0000                     	;# 
   514  0001                     	;# 
   515  0002                     	;# 
   516  0003                     	;# 
   517  0004                     	;# 
   518  0005                     	;# 
   519  0006                     	;# 
   520  0007                     	;# 
   521  0008                     	;# 
   522  0009                     	;# 
   523  000A                     	;# 
   524  000B                     	;# 
   525  000C                     	;# 
   526  000E                     	;# 
   527  0011                     	;# 
   528  0012                     	;# 
   529  0013                     	;# 
   530  0015                     	;# 
   531  0016                     	;# 
   532  0016                     	;# 
   533  0017                     	;# 
   534  0018                     	;# 
   535  0019                     	;# 
   536  001A                     	;# 
   537  001B                     	;# 
   538  001C                     	;# 
   539  008C                     	;# 
   540  008E                     	;# 
   541  0091                     	;# 
   542  0092                     	;# 
   543  0093                     	;# 
   544  0095                     	;# 
   545  0096                     	;# 
   546  0097                     	;# 
   547  0099                     	;# 
   548  009A                     	;# 
   549  009B                     	;# 
   550  009B                     	;# 
   551  009C                     	;# 
   552  009D                     	;# 
   553  009E                     	;# 
   554  009F                     	;# 
   555  010C                     	;# 
   556  010E                     	;# 
   557  0111                     	;# 
   558  0112                     	;# 
   559  0113                     	;# 
   560  0114                     	;# 
   561  0115                     	;# 
   562  0116                     	;# 
   563  0117                     	;# 
   564  0118                     	;# 
   565  0119                     	;# 
   566  011D                     	;# 
   567  018C                     	;# 
   568  018E                     	;# 
   569  0191                     	;# 
   570  0191                     	;# 
   571  0192                     	;# 
   572  0193                     	;# 
   573  0193                     	;# 
   574  0194                     	;# 
   575  0195                     	;# 
   576  0196                     	;# 
   577  020C                     	;# 
   578  0211                     	;# 
   579  0211                     	;# 
   580  0212                     	;# 
   581  0212                     	;# 
   582  0213                     	;# 
   583  0213                     	;# 
   584  0214                     	;# 
   585  0214                     	;# 
   586  0215                     	;# 
   587  0215                     	;# 
   588  0215                     	;# 
   589  0216                     	;# 
   590  0216                     	;# 
   591  0217                     	;# 
   592  0217                     	;# 
   593  0391                     	;# 
   594  0392                     	;# 
   595  0393                     	;# 
   596  0498                     	;# 
   597  0498                     	;# 
   598  0499                     	;# 
   599  049A                     	;# 
   600  049B                     	;# 
   601  049B                     	;# 
   602  049C                     	;# 
   603  049D                     	;# 
   604  049E                     	;# 
   605  049F                     	;# 
   606  0611                     	;# 
   607  0612                     	;# 
   608  0613                     	;# 
   609  0613                     	;# 
   610  0614                     	;# 
   611  0615                     	;# 
   612  0616                     	;# 
   613  0616                     	;# 
   614  0617                     	;# 
   615  0618                     	;# 
   616  0619                     	;# 
   617  0619                     	;# 
   618  061A                     	;# 
   619  061B                     	;# 
   620  061C                     	;# 
   621  061C                     	;# 
   622  0691                     	;# 
   623  0692                     	;# 
   624  0693                     	;# 
   625  0694                     	;# 
   626  0695                     	;# 
   627  0F0F                     	;# 
   628  0F10                     	;# 
   629  0F11                     	;# 
   630  0F12                     	;# 
   631  0F13                     	;# 
   632  0F14                     	;# 
   633  0F15                     	;# 
   634  0F16                     	;# 
   635  0F17                     	;# 
   636  0F18                     	;# 
   637  0F19                     	;# 
   638  0F1A                     	;# 
   639  0F1B                     	;# 
   640  0F1C                     	;# 
   641  0F1D                     	;# 
   642  0F1E                     	;# 
   643  0F1F                     	;# 
   644  0FE3                     	;# 
   645  0FE4                     	;# 
   646  0FE5                     	;# 
   647  0FE6                     	;# 
   648  0FE7                     	;# 
   649  0FE8                     	;# 
   650  0FE9                     	;# 
   651  0FEA                     	;# 
   652  0FEB                     	;# 
   653  0FED                     	;# 
   654  0FEE                     	;# 
   655  0FEF                     	;# 
   656  0000                     	;# 
   657  0001                     	;# 
   658  0002                     	;# 
   659  0003                     	;# 
   660  0004                     	;# 
   661  0005                     	;# 
   662  0006                     	;# 
   663  0007                     	;# 
   664  0008                     	;# 
   665  0009                     	;# 
   666  000A                     	;# 
   667  000B                     	;# 
   668  000C                     	;# 
   669  000E                     	;# 
   670  0011                     	;# 
   671  0012                     	;# 
   672  0013                     	;# 
   673  0015                     	;# 
   674  0016                     	;# 
   675  0016                     	;# 
   676  0017                     	;# 
   677  0018                     	;# 
   678  0019                     	;# 
   679  001A                     	;# 
   680  001B                     	;# 
   681  001C                     	;# 
   682  008C                     	;# 
   683  008E                     	;# 
   684  0091                     	;# 
   685  0092                     	;# 
   686  0093                     	;# 
   687  0095                     	;# 
   688  0096                     	;# 
   689  0097                     	;# 
   690  0099                     	;# 
   691  009A                     	;# 
   692  009B                     	;# 
   693  009B                     	;# 
   694  009C                     	;# 
   695  009D                     	;# 
   696  009E                     	;# 
   697  009F                     	;# 
   698  010C                     	;# 
   699  010E                     	;# 
   700  0111                     	;# 
   701  0112                     	;# 
   702  0113                     	;# 
   703  0114                     	;# 
   704  0115                     	;# 
   705  0116                     	;# 
   706  0117                     	;# 
   707  0118                     	;# 
   708  0119                     	;# 
   709  011D                     	;# 
   710  018C                     	;# 
   711  018E                     	;# 
   712  0191                     	;# 
   713  0191                     	;# 
   714  0192                     	;# 
   715  0193                     	;# 
   716  0193                     	;# 
   717  0194                     	;# 
   718  0195                     	;# 
   719  0196                     	;# 
   720  020C                     	;# 
   721  0211                     	;# 
   722  0211                     	;# 
   723  0212                     	;# 
   724  0212                     	;# 
   725  0213                     	;# 
   726  0213                     	;# 
   727  0214                     	;# 
   728  0214                     	;# 
   729  0215                     	;# 
   730  0215                     	;# 
   731  0215                     	;# 
   732  0216                     	;# 
   733  0216                     	;# 
   734  0217                     	;# 
   735  0217                     	;# 
   736  0391                     	;# 
   737  0392                     	;# 
   738  0393                     	;# 
   739  0498                     	;# 
   740  0498                     	;# 
   741  0499                     	;# 
   742  049A                     	;# 
   743  049B                     	;# 
   744  049B                     	;# 
   745  049C                     	;# 
   746  049D                     	;# 
   747  049E                     	;# 
   748  049F                     	;# 
   749  0611                     	;# 
   750  0612                     	;# 
   751  0613                     	;# 
   752  0613                     	;# 
   753  0614                     	;# 
   754  0615                     	;# 
   755  0616                     	;# 
   756  0616                     	;# 
   757  0617                     	;# 
   758  0618                     	;# 
   759  0619                     	;# 
   760  0619                     	;# 
   761  061A                     	;# 
   762  061B                     	;# 
   763  061C                     	;# 
   764  061C                     	;# 
   765  0691                     	;# 
   766  0692                     	;# 
   767  0693                     	;# 
   768  0694                     	;# 
   769  0695                     	;# 
   770  0F0F                     	;# 
   771  0F10                     	;# 
   772  0F11                     	;# 
   773  0F12                     	;# 
   774  0F13                     	;# 
   775  0F14                     	;# 
   776  0F15                     	;# 
   777  0F16                     	;# 
   778  0F17                     	;# 
   779  0F18                     	;# 
   780  0F19                     	;# 
   781  0F1A                     	;# 
   782  0F1B                     	;# 
   783  0F1C                     	;# 
   784  0F1D                     	;# 
   785  0F1E                     	;# 
   786  0F1F                     	;# 
   787  0FE3                     	;# 
   788  0FE4                     	;# 
   789  0FE5                     	;# 
   790  0FE6                     	;# 
   791  0FE7                     	;# 
   792  0FE8                     	;# 
   793  0FE9                     	;# 
   794  0FEA                     	;# 
   795  0FEB                     	;# 
   796  0FED                     	;# 
   797  0FEE                     	;# 
   798  0FEF                     	;# 
   799  07E0                     _NVMEM_absaddr	set	2016
   800                           
   801                           	psect	stringtext1
   802  0646                     __pstringtext1:	
   803  0646                     _n_ADDRESS_P0:	
   804  0646  34AD               	retlw	173
   805  0647  3487               	retlw	135
   806  0648  3466               	retlw	102
   807  0649  34BC               	retlw	188
   808  064A  34BB               	retlw	187
   809  064B                     __end_of_n_ADDRESS_P0:	
   810                           
   811                           	psect	stringtext2
   812  0666                     __pstringtext2:	
   813  0666                     _n_ADDRESS_MUL:	
   814  0666  3421               	retlw	33
   815  0667                     __end_of_n_ADDRESS_MUL:	
   816  07E0                     _NVMEM_absaddr	set	2016
   817                           
   818                           	psect	_NVMEM_text
   819  07E0                     __p_NVMEM_text:	
   820  07E0                     _NVMEM:	
   821  07E0  3455               	retlw	85
   822  07E1  346E               	retlw	110
   823  07E2  3463               	retlw	99
   824  07E3  346F               	retlw	111
   825  07E4  346E               	retlw	110
   826  07E5  3466               	retlw	102
   827  07E6  3469               	retlw	105
   828  07E7  3467               	retlw	103
   829  07E8  3475               	retlw	117
   830  07E9  3472               	retlw	114
   831  07EA  3465               	retlw	101
   832  07EB  3464               	retlw	100
   833  07EC  3400               	retlw	0
   834  07ED  3400               	retlw	0
   835  07EE  3400               	retlw	0
   836  07EF  3400               	retlw	0
   837  07F0  3400               	retlw	0
   838  07F1  3400               	retlw	0
   839  07F2  3400               	retlw	0
   840  07F3  3400               	retlw	0
   841  07F4  3400               	retlw	0
   842  07F5  3400               	retlw	0
   843  07F6  3400               	retlw	0
   844  07F7  3400               	retlw	0
   845  07F8  3400               	retlw	0
   846  07F9  3400               	retlw	0
   847  07FA  3400               	retlw	0
   848  07FB  3400               	retlw	0
   849  07FC  3400               	retlw	0
   850  07FD  3400               	retlw	0
   851  07FE  3400               	retlw	0
   852  07FF  3400               	retlw	0
   853  0800                     __end_of_NVMEM:	
   854  0003                     _STATUSbits	set	3
   855  000C                     _PORTAbits	set	12
   856  000B                     _INTCONbits	set	11
   857  0097                     _WDTCONbits	set	151
   858  009E                     _ADCON1bits	set	158
   859  0095                     _OPTION_REGbits	set	149
   860  0099                     _OSCCONbits	set	153
   861  009C                     _ADRESH	set	156
   862  009B                     _ADRESL	set	155
   863  009D                     _ADCON0bits	set	157
   864  008E                     _TRISCbits	set	142
   865  008C                     _TRISAbits	set	140
   866  0117                     _FVRCONbits	set	279
   867  018E                     _ANSELCbits	set	398
   868  018C                     _ANSELAbits	set	396
   869  018E                     _ANSELC	set	398
   870  018C                     _ANSELA	set	396
   871  0194                     _PMDATH	set	404
   872  0193                     _PMDATL	set	403
   873  0196                     _PMCON2	set	406
   874  0195                     _PMCON1bits	set	405
   875  0192                     _PMADRH	set	402
   876  0191                     _PMADRL	set	401
   877  0195                     _PMCON1	set	405
   878  020C                     _WPUAbits	set	524
   879  0211                     _SSP1BUF	set	529
   880  0214                     _SSP1STATbits	set	532
   881  0215                     _SSPCON1bits	set	533
   882                           
   883                           	psect	stringtext3
   884  0634                     __pstringtext3:	
   885  0634                     STR_5:	
   886  0634  3441               	retlw	65	;'A'
   887  0635  3444               	retlw	68	;'D'
   888  0636  3443               	retlw	67	;'C'
   889  0637  3433               	retlw	51	;'3'
   890  0638  3431               	retlw	49	;'1'
   891  0639  3400               	retlw	0
   892                           
   893                           	psect	stringtext4
   894  063A                     __pstringtext4:	
   895  063A                     STR_4:	
   896  063A  3441               	retlw	65	;'A'
   897  063B  3444               	retlw	68	;'D'
   898  063C  3443               	retlw	67	;'C'
   899  063D  3432               	retlw	50	;'2'
   900  063E  3439               	retlw	57	;'9'
   901  063F  3400               	retlw	0
   902                           
   903                           	psect	stringtext5
   904  064B                     __pstringtext5:	
   905  064B                     STR_2:	
   906  064B  3441               	retlw	65	;'A'
   907  064C  3444               	retlw	68	;'D'
   908  064D  3443               	retlw	67	;'C'
   909  064E  3433               	retlw	51	;'3'
   910  064F  3400               	retlw	0
   911                           
   912                           	psect	stringtext6
   913  0650                     __pstringtext6:	
   914  0650                     STR_3:	
   915  0650  3441               	retlw	65	;'A'
   916  0651  3444               	retlw	68	;'D'
   917  0652  3443               	retlw	67	;'C'
   918  0653  3437               	retlw	55	;'7'
   919  0654  3400               	retlw	0
   920                           
   921                           	psect	stringtext7
   922  0655                     __pstringtext7:	
   923  0655                     STR_6:	
   924  0655  3442               	retlw	66	;'B'
   925  0656  344F               	retlw	79	;'O'
   926  0657  344F               	retlw	79	;'O'
   927  0658  3454               	retlw	84	;'T'
   928  0659  3400               	retlw	0
   929                           
   930                           	psect	stringtext8
   931  065A                     __pstringtext8:	
   932  065A                     STR_7:	
   933  065A  3441               	retlw	65	;'A'
   934  065B  3443               	retlw	67	;'C'
   935  065C  344B               	retlw	75	;'K'
   936  065D  3400               	retlw	0
   937                           
   938                           	psect	stringtext9
   939  065E                     __pstringtext9:	
   940  065E                     STR_1:	
   941  065E  3444               	retlw	68	;'D'
   942  065F  3442               	retlw	66	;'B'
   943  0660  3447               	retlw	71	;'G'
   944  0661  3400               	retlw	0
   945                           
   946                           	psect	stringtext10
   947  0000                     __pstringtext10:	
   948                           
   949                           ; #config settings
   950  0000                     
   951                           	psect	cinit
   952  0013                     start_initialization:	
   953  0013                     __initialization:	
   954                           
   955                           ; Clear objects allocated to BANK0
   956  0013  3049               	movlw	low __pbssBANK0
   957  0014  0084               	movwf	4
   958  0015  3000               	movlw	high __pbssBANK0
   959  0016  0085               	movwf	5
   960  0017  3024               	movlw	36
   961  0018  2640               	fcall	clear_ram0
   962                           
   963                           ; Clear objects allocated to BANK1
   964  0019  30A0               	movlw	low __pbssBANK1
   965  001A  0084               	movwf	4
   966  001B  3000               	movlw	high __pbssBANK1
   967  001C  0085               	movwf	5
   968  001D  3010               	movlw	16
   969  001E  2640               	fcall	clear_ram0
   970  001F                     end_of_initialization:	
   971                           ;End of C runtime variable initialization code
   972                           
   973  001F                     __end_of__initialization:	
   974  001F  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
   975  0020  0020               	movlb	0
   976  0021  2ABC               	ljmp	_main	;jump to C main() function
   977                           
   978                           	psect	bssBANK0
   979  0049                     __pbssBANK0:	
   980  0049                     _counter:	
   981  0049                     	ds	2
   982  004B                     _sleepLoop:	
   983  004B                     	ds	1
   984  004C                     _nrf24l01:	
   985  004C                     	ds	1
   986  004D                     _nrf24l01RXValue:	
   987  004D                     	ds	8
   988  0055                     _nrf24l01RXTopic:	
   989  0055                     	ds	8
   990  005D                     _nrf24l01TXValue:	
   991  005D                     	ds	8
   992  0065                     _nrf24l01TXTopic:	
   993  0065                     	ds	8
   994                           
   995                           	psect	bssBANK1
   996  00A0                     __pbssBANK1:	
   997  00A0                     _nrf24l01Name:	
   998  00A0                     	ds	16
   999                           
  1000                           	psect	clrtext
  1001  0640                     clear_ram0:	
  1002                           ;	Called with FSR0 containing the base address, and
  1003                           ;	WREG with the size to clear
  1004                           
  1005  0640  0064               	clrwdt	;clear the watchdog before getting into this loop
  1006  0641                     clrloop0:	
  1007  0641  0180               	clrf	0	;clear RAM location pointed to by FSR
  1008  0642  3101               	addfsr 0,1
  1009  0643  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  1010  0644  2E41               	goto	clrloop0	;have we reached the end yet?
  1011  0645  3400               	retlw	0	;all done for this memory range, return
  1012                           
  1013                           	psect	cstackBANK1
  1014  00B0                     __pcstackBANK1:	
  1015  00B0                     ??_main:	
  1016                           
  1017                           ; 1 bytes @ 0x0
  1018  00B0                     	ds	3
  1019                           
  1020                           	psect	cstackCOMMON
  1021  0070                     __pcstackCOMMON:	
  1022  0070                     ?_nrf24l01ISR:	
  1023  0070                     ?_nrf24l01SetRXMode:	
  1024                           ; 1 bytes @ 0x0
  1025                           
  1026  0070                     ?_nrf24l01SendString:	
  1027                           ; 1 bytes @ 0x0
  1028                           
  1029  0070                     ?_nrf24l01Init:	
  1030                           ; 1 bytes @ 0x0
  1031                           
  1032  0070                     ?_nrf24l01InterfaceInit:	
  1033                           ; 1 bytes @ 0x0
  1034                           
  1035  0070                     ?_nrf24l01SPISend:	
  1036                           ; 1 bytes @ 0x0
  1037                           
  1038  0070                     ??_nrf24l01SPISend:	
  1039                           ; 1 bytes @ 0x0
  1040                           
  1041  0070                     ?_nrf24l01SPIStart:	
  1042                           ; 1 bytes @ 0x0
  1043                           
  1044  0070                     ??_nrf24l01SPIStart:	
  1045                           ; 1 bytes @ 0x0
  1046                           
  1047  0070                     ?_nrf24l01SPIEnd:	
  1048                           ; 1 bytes @ 0x0
  1049                           
  1050  0070                     ??_nrf24l01SPIEnd:	
  1051                           ; 1 bytes @ 0x0
  1052                           
  1053  0070                     ?_enableInterrupts:	
  1054                           ; 1 bytes @ 0x0
  1055                           
  1056  0070                     ??_enableInterrupts:	
  1057                           ; 1 bytes @ 0x0
  1058                           
  1059  0070                     ?_ISR:	
  1060                           ; 1 bytes @ 0x0
  1061                           
  1062  0070                     ?_sleep:	
  1063                           ; 1 bytes @ 0x0
  1064                           
  1065  0070                     ?_checkRxData:	
  1066                           ; 1 bytes @ 0x0
  1067                           
  1068  0070                     ?_loop:	
  1069                           ; 1 bytes @ 0x0
  1070                           
  1071  0070                     ?_main:	
  1072                           ; 1 bytes @ 0x0
  1073                           
  1074  0070                     ?_nrf24l01ReceiveString:	
  1075                           ; 1 bytes @ 0x0
  1076                           
  1077  0070                     ?_nrf24l01InitRegisters:	
  1078                           ; 1 bytes @ 0x0
  1079                           
  1080  0070                     ?_strcmp:	
  1081                           ; 1 bytes @ 0x0
  1082                           
  1083  0070                     nrf24l01SPISend@data:	
  1084                           ; 2 bytes @ 0x0
  1085                           
  1086  0070                     enableInterrupts@enable:	
  1087                           ; 1 bytes @ 0x0
  1088                           
  1089  0070                     strcmp@s2:	
  1090                           ; 1 bytes @ 0x0
  1091                           
  1092                           
  1093                           ; 2 bytes @ 0x0
  1094  0070                     	ds	1
  1095  0071                     ??_nrf24l01Send:	
  1096                           
  1097                           ; 1 bytes @ 0x1
  1098  0071                     	ds	1
  1099  0072                     ??_strcmp:	
  1100  0072                     nrf24l01Send@command:	
  1101                           ; 1 bytes @ 0x2
  1102                           
  1103                           
  1104                           ; 1 bytes @ 0x2
  1105  0072                     	ds	1
  1106  0073                     ??_nrf24l01SetRXMode:	
  1107  0073                     strcmp@r:	
  1108                           ; 1 bytes @ 0x3
  1109                           
  1110                           
  1111                           ; 1 bytes @ 0x3
  1112  0073                     	ds	1
  1113  0074                     nrf24l01SetRXMode@config:	
  1114  0074                     strcmp@s1:	
  1115                           ; 1 bytes @ 0x4
  1116                           
  1117                           
  1118                           ; 1 bytes @ 0x4
  1119  0074                     	ds	1
  1120  0075                     nrf24l01SetRXMode@rxMode:	
  1121                           
  1122                           ; 1 bytes @ 0x5
  1123  0075                     	ds	1
  1124  0076                     ??_nrf24l01ReceiveString:	
  1125                           
  1126                           ; 1 bytes @ 0x6
  1127  0076                     	ds	3
  1128  0079                     nrf24l01ReceiveString@width:	
  1129                           
  1130                           ; 1 bytes @ 0x9
  1131  0079                     	ds	1
  1132  007A                     nrf24l01ReceiveString@offset:	
  1133                           
  1134                           ; 1 bytes @ 0xA
  1135  007A                     	ds	1
  1136  007B                     nrf24l01ReceiveString@byte:	
  1137                           
  1138                           ; 1 bytes @ 0xB
  1139  007B                     	ds	1
  1140  007C                     nrf24l01ReceiveString@i:	
  1141                           
  1142                           ; 1 bytes @ 0xC
  1143  007C                     	ds	1
  1144  007D                     ??_nrf24l01ISR:	
  1145                           
  1146                           ; 1 bytes @ 0xD
  1147  007D                     	ds	1
  1148                           
  1149                           	psect	cstackBANK0
  1150  0020                     __pcstackBANK0:	
  1151  0020                     ?_nrf24l01Send:	
  1152  0020                     nrf24l01Send@data:	
  1153                           ; 1 bytes @ 0x0
  1154                           
  1155                           
  1156                           ; 1 bytes @ 0x0
  1157  0020                     	ds	1
  1158  0021                     nrf24l01ISR@status:	
  1159                           
  1160                           ; 1 bytes @ 0x1
  1161  0021                     	ds	1
  1162  0022                     ??_ISR:	
  1163                           
  1164                           ; 1 bytes @ 0x2
  1165  0022                     	ds	1
  1166  0023                     ?_strcpy:	
  1167  0023                     ??_nrf24l01SendString:	
  1168                           ; 1 bytes @ 0x3
  1169                           
  1170  0023                     ??_nrf24l01InterfaceInit:	
  1171                           ; 1 bytes @ 0x3
  1172                           
  1173  0023                     ??_sleep:	
  1174                           ; 1 bytes @ 0x3
  1175                           
  1176  0023                     ??_checkRxData:	
  1177                           ; 1 bytes @ 0x3
  1178                           
  1179  0023                     ??_nrf24l01InitRegisters:	
  1180                           ; 1 bytes @ 0x3
  1181                           
  1182  0023                     ?_read_flashmem:	
  1183                           ; 1 bytes @ 0x3
  1184                           
  1185  0023                     ?___lwdiv:	
  1186                           ; 2 bytes @ 0x3
  1187                           
  1188  0023                     ?___lwmod:	
  1189                           ; 2 bytes @ 0x3
  1190                           
  1191  0023                     ?___lmul:	
  1192                           ; 2 bytes @ 0x3
  1193                           
  1194  0023                     ?___lldiv:	
  1195                           ; 4 bytes @ 0x3
  1196                           
  1197  0023                     read_flashmem@offset:	
  1198                           ; 4 bytes @ 0x3
  1199                           
  1200  0023                     ___lwdiv@divisor:	
  1201                           ; 2 bytes @ 0x3
  1202                           
  1203  0023                     ___lwmod@divisor:	
  1204                           ; 2 bytes @ 0x3
  1205                           
  1206  0023                     strcpy@from:	
  1207                           ; 2 bytes @ 0x3
  1208                           
  1209  0023                     ___lmul@multiplier:	
  1210                           ; 2 bytes @ 0x3
  1211                           
  1212  0023                     ___lldiv@divisor:	
  1213                           ; 4 bytes @ 0x3
  1214                           
  1215                           
  1216                           ; 4 bytes @ 0x3
  1217  0023                     	ds	1
  1218  0024                     nrf24l01SendString@waitForAck:	
  1219  0024                     nrf24l01InitRegisters@setupAW:	
  1220                           ; 1 bytes @ 0x4
  1221                           
  1222                           
  1223                           ; 1 bytes @ 0x4
  1224  0024                     	ds	1
  1225  0025                     ??_strcpy:	
  1226  0025                     ??_read_flashmem:	
  1227                           ; 1 bytes @ 0x5
  1228                           
  1229  0025                     nrf24l01SendString@i:	
  1230                           ; 1 bytes @ 0x5
  1231                           
  1232  0025                     nrf24l01InitRegisters@rfSetup:	
  1233                           ; 1 bytes @ 0x5
  1234                           
  1235  0025                     ___lwdiv@dividend:	
  1236                           ; 1 bytes @ 0x5
  1237                           
  1238  0025                     ___lwmod@dividend:	
  1239                           ; 2 bytes @ 0x5
  1240                           
  1241                           
  1242                           ; 2 bytes @ 0x5
  1243  0025                     	ds	1
  1244  0026                     nrf24l01InitRegisters@feature:	
  1245  0026                     strcpy@cp:	
  1246                           ; 1 bytes @ 0x6
  1247                           
  1248                           
  1249                           ; 1 bytes @ 0x6
  1250  0026                     	ds	1
  1251  0027                     ??___lwdiv:	
  1252  0027                     ??___lwmod:	
  1253                           ; 1 bytes @ 0x7
  1254                           
  1255  0027                     nrf24l01InitRegisters@status:	
  1256                           ; 1 bytes @ 0x7
  1257                           
  1258  0027                     strcpy@to:	
  1259                           ; 1 bytes @ 0x7
  1260                           
  1261  0027                     ___lmul@multiplicand:	
  1262                           ; 1 bytes @ 0x7
  1263                           
  1264  0027                     ___lldiv@dividend:	
  1265                           ; 4 bytes @ 0x7
  1266                           
  1267                           
  1268                           ; 4 bytes @ 0x7
  1269  0027                     	ds	1
  1270  0028                     nrf24l01InitRegisters@enRXAddr:	
  1271  0028                     ___lwmod@counter:	
  1272                           ; 1 bytes @ 0x8
  1273                           
  1274  0028                     read_flashmem@result:	
  1275                           ; 1 bytes @ 0x8
  1276                           
  1277  0028                     ___lwdiv@quotient:	
  1278                           ; 2 bytes @ 0x8
  1279                           
  1280                           
  1281                           ; 2 bytes @ 0x8
  1282  0028                     	ds	1
  1283  0029                     nrf24l01InitRegisters@enAA:	
  1284                           
  1285                           ; 1 bytes @ 0x9
  1286  0029                     	ds	1
  1287  002A                     nrf24l01InitRegisters@DynPD:	
  1288  002A                     ___lwdiv@counter:	
  1289                           ; 1 bytes @ 0xA
  1290                           
  1291  002A                     read_flashmem@address:	
  1292                           ; 1 bytes @ 0xA
  1293                           
  1294                           
  1295                           ; 2 bytes @ 0xA
  1296  002A                     	ds	1
  1297  002B                     ??___lmul:	
  1298  002B                     ??___lldiv:	
  1299                           ; 1 bytes @ 0xB
  1300                           
  1301  002B                     nrf24l01InitRegisters@config:	
  1302                           ; 1 bytes @ 0xB
  1303                           
  1304  002B                     ___lmul@product:	
  1305                           ; 1 bytes @ 0xB
  1306                           
  1307                           
  1308                           ; 4 bytes @ 0xB
  1309  002B                     	ds	1
  1310  002C                     ??_nrf24l01Init:	
  1311  002C                     ___lldiv@quotient:	
  1312                           ; 1 bytes @ 0xC
  1313                           
  1314                           
  1315                           ; 4 bytes @ 0xC
  1316  002C                     	ds	4
  1317  0030                     ___lldiv@counter:	
  1318                           
  1319                           ; 1 bytes @ 0x10
  1320  0030                     	ds	1
  1321  0031                     ?_getADCValue:	
  1322  0031                     getADCValue@divider:	
  1323                           ; 4 bytes @ 0x11
  1324                           
  1325                           
  1326                           ; 4 bytes @ 0x11
  1327  0031                     	ds	4
  1328  0035                     ??_getADCValue:	
  1329                           
  1330                           ; 1 bytes @ 0x15
  1331  0035                     	ds	4
  1332  0039                     getADCValue@channel:	
  1333                           
  1334                           ; 1 bytes @ 0x19
  1335  0039                     	ds	1
  1336  003A                     getADCValue@adcLoop:	
  1337                           
  1338                           ; 1 bytes @ 0x1A
  1339  003A                     	ds	1
  1340  003B                     getADCValue@adcSum:	
  1341                           
  1342                           ; 4 bytes @ 0x1B
  1343  003B                     	ds	4
  1344  003F                     ?_utoa:	
  1345  003F                     utoa@val:	
  1346                           ; 1 bytes @ 0x1F
  1347                           
  1348                           
  1349                           ; 2 bytes @ 0x1F
  1350  003F                     	ds	2
  1351  0041                     utoa@base:	
  1352                           
  1353                           ; 2 bytes @ 0x21
  1354  0041                     	ds	2
  1355  0043                     ??_utoa:	
  1356                           
  1357                           ; 1 bytes @ 0x23
  1358  0043                     	ds	1
  1359  0044                     utoa@v:	
  1360                           
  1361                           ; 2 bytes @ 0x24
  1362  0044                     	ds	2
  1363  0046                     utoa@c:	
  1364                           
  1365                           ; 1 bytes @ 0x26
  1366  0046                     	ds	1
  1367  0047                     utoa@buf:	
  1368                           
  1369                           ; 1 bytes @ 0x27
  1370  0047                     	ds	1
  1371  0048                     ??_loop:	
  1372  0048                     main@i:	
  1373                           ; 1 bytes @ 0x28
  1374                           
  1375                           
  1376                           ; 1 bytes @ 0x28
  1377  0048                     	ds	1
  1378                           
  1379                           	psect	maintext
  1380  02BC                     __pmaintext:	
  1381 ;;
  1382 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
  1383 ;;
  1384 ;; *************** function _main *****************
  1385 ;; Defined at:
  1386 ;;		line 103 in file "main.c"
  1387 ;; Parameters:    Size  Location     Type
  1388 ;;		None
  1389 ;; Auto vars:     Size  Location     Type
  1390 ;;  i               1   40[BANK0 ] unsigned char 
  1391 ;; Return value:  Size  Location     Type
  1392 ;;                  1    wreg      void 
  1393 ;; Registers used:
  1394 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  1395 ;; Tracked objects:
  1396 ;;		On entry : B1F/0
  1397 ;;		On exit  : 0/0
  1398 ;;		Unchanged: 0/0
  1399 ;; Data sizes:     COMMON   BANK0   BANK1
  1400 ;;      Params:         0       0       0
  1401 ;;      Locals:         0       1       0
  1402 ;;      Temps:          0       0       3
  1403 ;;      Totals:         0       1       3
  1404 ;;Total ram usage:        4 bytes
  1405 ;; Hardware stack levels required when called:   11
  1406 ;; This function calls:
  1407 ;;		_loop
  1408 ;;		_nrf24l01Init
  1409 ;;		_nrf24l01SendString
  1410 ;;		_read_flashmem
  1411 ;;		_sleep
  1412 ;;		_strcpy
  1413 ;;		_utoa
  1414 ;; This function is called by:
  1415 ;;		Startup code after reset
  1416 ;; This function uses a non-reentrant model
  1417 ;;
  1418                           
  1419                           
  1420                           ;psect for function _main
  1421  02BC                     _main:	
  1422                           
  1423                           ;main.c: 106: ANSELA = 0x00;
  1424                           
  1425                           ;incstack = 0
  1426                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  1427  02BC  0023               	movlb	3	; select bank3
  1428  02BD  018C               	clrf	12	;volatile
  1429                           
  1430                           ;main.c: 107: ANSELC = 0x00;
  1431  02BE  018E               	clrf	14	;volatile
  1432                           
  1433                           ;main.c: 113: INTCONbits.PEIE = 0;
  1434  02BF  130B               	bcf	11,6	;volatile
  1435                           
  1436                           ;main.c: 114: INTCONbits.GIE = 0;
  1437  02C0  138B               	bcf	11,7	;volatile
  1438                           
  1439                           ;main.c: 116: OSCCONbits.IRCF = 0b1111;
  1440  02C1  3078               	movlw	120
  1441  02C2  0021               	movlb	1	; select bank1
  1442  02C3  0499               	iorwf	25,f	;volatile
  1443                           
  1444                           ;main.c: 117: OSCCONbits.SCS = 0b10;
  1445  02C4  0819               	movf	25,w	;volatile
  1446  02C5  39FC               	andlw	-4
  1447  02C6  3802               	iorlw	2
  1448  02C7  0099               	movwf	25	;volatile
  1449                           
  1450                           ;main.c: 119: _delay((unsigned long)((10)*(16000000/4000.0)));
  1451  02C8  3034               	movlw	52
  1452  02C9  0021               	movlb	1	; select bank1
  1453  02CA  00B0               	movwf	??_main^(0+128)
  1454  02CB  30F1               	movlw	241
  1455  02CC                     u1627:	
  1456  02CC  0B89               	decfsz	9,f
  1457  02CD  2ACC               	goto	u1627
  1458  02CE  0BB0               	decfsz	??_main^(0+128),f
  1459  02CF  2ACC               	goto	u1627
  1460  02D0  3200               	nop2
  1461                           
  1462                           ;main.c: 121: nrf24l01Init();
  1463  02D1  25D4               	fcall	_nrf24l01Init
  1464                           
  1465                           ;main.c: 123: for (unsigned char i = 0; i < sizeof(nrf24l01Name); i++){
  1466  02D2  0020               	movlb	0	; select bank0
  1467  02D3  01C8               	clrf	main@i
  1468  02D4  3010               	movlw	16
  1469  02D5  0248               	subwf	main@i,w
  1470  02D6  1803               	btfsc	3,0
  1471  02D7  2AF9               	goto	l173
  1472  02D8                     l2209:	
  1473                           
  1474                           ;main.c: 124: nrf24l01Name[i] = read_flashmem((unsigned) 0 + i);
  1475  02D8  0848               	movf	main@i,w
  1476  02D9  0021               	movlb	1	; select bank1
  1477  02DA  00B0               	movwf	??_main^(0+128)
  1478  02DB  01B1               	clrf	(??_main^(0+128)+1)
  1479  02DC  0830               	movf	??_main^(0+128),w
  1480  02DD  0020               	movlb	0	; select bank0
  1481  02DE  00A3               	movwf	read_flashmem@offset
  1482  02DF  0021               	movlb	1	; select bank1
  1483  02E0  0831               	movf	(??_main+1)^(0+128),w
  1484  02E1  0020               	movlb	0	; select bank0
  1485  02E2  00A4               	movwf	read_flashmem@offset+1
  1486  02E3  24DF               	fcall	_read_flashmem
  1487  02E4  0020               	movlb	0	; select bank0
  1488  02E5  0823               	movf	?_read_flashmem,w
  1489  02E6  0021               	movlb	1	; select bank1
  1490  02E7  00B2               	movwf	(??_main+2)^(0+128)
  1491  02E8  0020               	movlb	0	; select bank0
  1492  02E9  0848               	movf	main@i,w
  1493  02EA  3EA0               	addlw	(low (_nrf24l01Name| 0))& (0+255)
  1494  02EB  0086               	movwf	6
  1495  02EC  0187               	clrf	7
  1496  02ED  0021               	movlb	1	; select bank1
  1497  02EE  0832               	movf	(??_main+2)^(0+128),w
  1498  02EF  0081               	movwf	1
  1499  02F0  3001               	movlw	1
  1500  02F1  00B0               	movwf	??_main^(0+128)
  1501  02F2  0830               	movf	??_main^(0+128),w
  1502  02F3  0020               	movlb	0	; select bank0
  1503  02F4  07C8               	addwf	main@i,f
  1504  02F5  3010               	movlw	16
  1505  02F6  0248               	subwf	main@i,w
  1506  02F7  1C03               	skipc
  1507  02F8  2AD8               	goto	l2209
  1508  02F9                     l173:	
  1509                           
  1510                           ;main.c: 125: }
  1511                           ;main.c: 127: OPTION_REGbits.nWPUEN = 0;
  1512  02F9  0021               	movlb	1	; select bank1
  1513  02FA  1395               	bcf	21,7	;volatile
  1514                           
  1515                           ;main.c: 130: FVRCONbits.FVREN = 0;
  1516  02FB  0022               	movlb	2	; select bank2
  1517  02FC  1397               	bcf	23,7	;volatile
  1518                           
  1519                           ;main.c: 131: FVRCONbits.ADFVR = 1;
  1520  02FD  0817               	movf	23,w	;volatile
  1521  02FE  39FC               	andlw	-4
  1522  02FF  3801               	iorlw	1
  1523  0300  0097               	movwf	23	;volatile
  1524                           
  1525                           ;main.c: 132: FVRCONbits.FVREN = 1;
  1526  0301  1797               	bsf	23,7	;volatile
  1527                           
  1528                           ;main.c: 135: FVRCONbits.TSEN = 0;
  1529  0302  1297               	bcf	23,5	;volatile
  1530                           
  1531                           ;main.c: 136: FVRCONbits.TSRNG = 0;
  1532  0303  1217               	bcf	23,4	;volatile
  1533                           
  1534                           ;main.c: 137: FVRCONbits.TSEN = 1;
  1535  0304  1697               	bsf	23,5	;volatile
  1536                           
  1537                           ;main.c: 140: ADCON0bits.ADON = 0;
  1538  0305  0021               	movlb	1	; select bank1
  1539  0306  101D               	bcf	29,0	;volatile
  1540                           
  1541                           ;main.c: 142: ANSELAbits.ANSA4 = 1;
  1542  0307  0023               	movlb	3	; select bank3
  1543  0308  160C               	bsf	12,4	;volatile
  1544                           
  1545                           ;main.c: 143: TRISAbits.TRISA4 = 1;
  1546  0309  0021               	movlb	1	; select bank1
  1547  030A  160C               	bsf	12,4	;volatile
  1548                           
  1549                           ;main.c: 144: WPUAbits.WPUA4 = 0;
  1550  030B  0024               	movlb	4	; select bank4
  1551  030C  120C               	bcf	12,4	;volatile
  1552                           
  1553                           ;main.c: 146: ANSELCbits.ANSC3 = 1;
  1554  030D  0023               	movlb	3	; select bank3
  1555  030E  158E               	bsf	14,3	;volatile
  1556                           
  1557                           ;main.c: 147: TRISCbits.TRISC3 = 1;
  1558  030F  0021               	movlb	1	; select bank1
  1559  0310  158E               	bsf	14,3	;volatile
  1560                           
  1561                           ;main.c: 149: ADCON1bits.ADCS = 0b111;
  1562  0311  3070               	movlw	112
  1563  0312  049E               	iorwf	30,f	;volatile
  1564                           
  1565                           ;main.c: 150: ADCON1bits.ADFM = 1;
  1566  0313  179E               	bsf	30,7	;volatile
  1567                           
  1568                           ;main.c: 151: ADCON1bits.ADPREF = 0b00;
  1569  0314  30FC               	movlw	-4
  1570  0315  059E               	andwf	30,f	;volatile
  1571                           
  1572                           ;main.c: 153: ADCON0bits.CHS = 3;
  1573  0316  081D               	movf	29,w	;volatile
  1574  0317  3983               	andlw	-125
  1575  0318  380C               	iorlw	12
  1576  0319  009D               	movwf	29	;volatile
  1577                           
  1578                           ;main.c: 154: ADCON0bits.ADON = 1;
  1579  031A  141D               	bsf	29,0	;volatile
  1580                           
  1581                           ;main.c: 158: TRISAbits.TRISA2 = 1;
  1582  031B  150C               	bsf	12,2	;volatile
  1583                           
  1584                           ;main.c: 159: INTCONbits.INTE = 1;
  1585  031C  160B               	bsf	11,4	;volatile
  1586                           
  1587                           ;main.c: 160: OPTION_REGbits.INTEDG = 0;
  1588  031D  1315               	bcf	21,6	;volatile
  1589                           
  1590                           ;main.c: 164: WDTCONbits.WDTPS = 11;
  1591  031E  0817               	movf	23,w	;volatile
  1592  031F  39C1               	andlw	-63
  1593  0320  3816               	iorlw	22
  1594  0321  0097               	movwf	23	;volatile
  1595                           
  1596                           ;main.c: 167: TRISAbits.TRISA5 = 0;
  1597  0322  128C               	bcf	12,5	;volatile
  1598                           
  1599                           ;main.c: 168: PORTAbits.RA5 = 0;
  1600  0323  0020               	movlb	0	; select bank0
  1601  0324  128C               	bcf	12,5	;volatile
  1602                           
  1603                           ;main.c: 171: INTCONbits.PEIE = 1;
  1604  0325  170B               	bsf	11,6	;volatile
  1605                           
  1606                           ;main.c: 172: INTCONbits.GIE = 1;
  1607  0326  178B               	bsf	11,7	;volatile
  1608                           
  1609                           ;main.c: 174: strcpy(nrf24l01TXTopic, "BOOT");
  1610  0327  3055               	movlw	low (STR_6| (0+32768))
  1611  0328  00A3               	movwf	strcpy@from
  1612  0329  3086               	movlw	high (STR_6| (0+32768))
  1613  032A  00A4               	movwf	strcpy@from+1
  1614  032B  3065               	movlw	(low (_nrf24l01TXTopic| 0))& (0+255)
  1615  032C  25B9               	fcall	_strcpy
  1616                           
  1617                           ;main.c: 175: utoa(nrf24l01TXValue, read_flashmem(0 + 16), 10);
  1618  032D  3010               	movlw	16
  1619  032E  0020               	movlb	0	; select bank0
  1620  032F  00A3               	movwf	read_flashmem@offset
  1621  0330  3000               	movlw	0
  1622  0331  00A4               	movwf	read_flashmem@offset+1
  1623  0332  24DF               	fcall	_read_flashmem
  1624  0333  0020               	movlb	0	; select bank0
  1625  0334  0824               	movf	?_read_flashmem+1,w
  1626  0335  00C0               	movwf	utoa@val+1
  1627  0336  0823               	movf	?_read_flashmem,w
  1628  0337  00BF               	movwf	utoa@val
  1629  0338  300A               	movlw	10
  1630  0339  00C1               	movwf	utoa@base
  1631  033A  3000               	movlw	0
  1632  033B  00C2               	movwf	utoa@base+1
  1633  033C  305D               	movlw	(low (_nrf24l01TXValue| 0))& (0+255)
  1634  033D  23C8               	fcall	_utoa
  1635                           
  1636                           ;main.c: 176: nrf24l01SendString(0);
  1637  033E  3000               	movlw	0
  1638  033F  219C               	fcall	_nrf24l01SendString
  1639                           
  1640                           ;main.c: 177: sleep();
  1641  0340  2616               	fcall	_sleep
  1642  0341                     l2263:	
  1643                           ;main.c: 179: while(1){
  1644                           
  1645                           
  1646                           ;main.c: 180: loop();
  1647  0341  2100               	fcall	_loop
  1648  0342  2B41               	goto	l2263
  1649  0343                     __end_of_main:	
  1650                           ;main.c: 181: }
  1651                           ;main.c: 183: return;
  1652                           
  1653                           
  1654                           	psect	text1
  1655  04DF                     __ptext1:	
  1656 ;; *************** function _read_flashmem *****************
  1657 ;; Defined at:
  1658 ;;		line 59 in file "flash.c"
  1659 ;; Parameters:    Size  Location     Type
  1660 ;;  offset          2    3[BANK0 ] unsigned int 
  1661 ;; Auto vars:     Size  Location     Type
  1662 ;;  address         2   10[BANK0 ] unsigned int 
  1663 ;;  result          2    8[BANK0 ] unsigned int 
  1664 ;; Return value:  Size  Location     Type
  1665 ;;                  2    3[BANK0 ] unsigned int 
  1666 ;; Registers used:
  1667 ;;		wreg, status,2, status,0
  1668 ;; Tracked objects:
  1669 ;;		On entry : 0/0
  1670 ;;		On exit  : 0/0
  1671 ;;		Unchanged: 0/0
  1672 ;; Data sizes:     COMMON   BANK0   BANK1
  1673 ;;      Params:         0       2       0
  1674 ;;      Locals:         0       4       0
  1675 ;;      Temps:          0       3       0
  1676 ;;      Totals:         0       9       0
  1677 ;;Total ram usage:        9 bytes
  1678 ;; Hardware stack levels used:    1
  1679 ;; Hardware stack levels required when called:    6
  1680 ;; This function calls:
  1681 ;;		Nothing
  1682 ;; This function is called by:
  1683 ;;		_main
  1684 ;; This function uses a non-reentrant model
  1685 ;;
  1686                           
  1687                           
  1688                           ;psect for function _read_flashmem
  1689  04DF                     _read_flashmem:	
  1690                           
  1691                           ;flash.c: 61: unsigned int address;
  1692                           ;flash.c: 63: INTCONbits.GIE = 0;
  1693                           
  1694                           ;incstack = 0
  1695                           ; Regs used in _read_flashmem: [wreg+status,2+status,0]
  1696  04DF  138B               	bcf	11,7	;volatile
  1697                           
  1698                           ;flash.c: 65: PMCON1 = 0x00;
  1699  04E0  0023               	movlb	3	; select bank3
  1700  04E1  0195               	clrf	21	;volatile
  1701                           
  1702                           ;flash.c: 67: address = (0x800U-32) + offset;
  1703  04E2  0020               	movlb	0	; select bank0
  1704  04E3  0823               	movf	read_flashmem@offset,w
  1705  04E4  3EE0               	addlw	224
  1706  04E5  00AA               	movwf	read_flashmem@address
  1707  04E6  3007               	movlw	7
  1708  04E7  3D24               	addwfc	read_flashmem@offset+1,w
  1709  04E8  00AB               	movwf	read_flashmem@address+1
  1710                           
  1711                           ;flash.c: 68: PMADRL = (char) (address >> 0);
  1712  04E9  082A               	movf	read_flashmem@address,w
  1713  04EA  0023               	movlb	3	; select bank3
  1714  04EB  0091               	movwf	17	;volatile
  1715                           
  1716                           ;flash.c: 69: PMADRH = (char) (address >> 8);
  1717  04EC  0020               	movlb	0	; select bank0
  1718  04ED  082B               	movf	read_flashmem@address+1,w
  1719  04EE  0023               	movlb	3	; select bank3
  1720  04EF  0092               	movwf	18	;volatile
  1721                           
  1722                           ;flash.c: 71: PMCON1bits.RD = 1;
  1723  04F0  1415               	bsf	21,0	;volatile
  1724                           
  1725                           ;flash.c: 73: __nop();
  1726  04F1  0000               	nop
  1727                           
  1728                           ;flash.c: 74: __nop();
  1729  04F2  0000               	nop
  1730                           
  1731                           ;flash.c: 76: unsigned int result = 0;
  1732  04F3  0020               	movlb	0	; select bank0
  1733  04F4  01A8               	clrf	read_flashmem@result
  1734  04F5  01A9               	clrf	read_flashmem@result+1
  1735                           
  1736                           ;flash.c: 77: result = PMDATL;
  1737  04F6  0023               	movlb	3	; select bank3
  1738  04F7  0813               	movf	19,w	;volatile
  1739  04F8  0020               	movlb	0	; select bank0
  1740  04F9  00A5               	movwf	??_read_flashmem
  1741  04FA  01A6               	clrf	??_read_flashmem+1
  1742  04FB  0825               	movf	??_read_flashmem,w
  1743  04FC  00A8               	movwf	read_flashmem@result
  1744  04FD  0826               	movf	??_read_flashmem+1,w
  1745  04FE  00A9               	movwf	read_flashmem@result+1
  1746                           
  1747                           ;flash.c: 78: result|= ( (unsigned) (PMDATH) << 8);
  1748  04FF  0023               	movlb	3	; select bank3
  1749  0500  0814               	movf	20,w	;volatile
  1750  0501  0020               	movlb	0	; select bank0
  1751  0502  00A5               	movwf	??_read_flashmem
  1752  0503  01A6               	clrf	??_read_flashmem+1
  1753  0504  0825               	movf	??_read_flashmem,w
  1754  0505  00A6               	movwf	??_read_flashmem+1
  1755  0506  01A5               	clrf	??_read_flashmem
  1756  0507  0825               	movf	??_read_flashmem,w
  1757  0508  04A8               	iorwf	read_flashmem@result,f
  1758  0509  0826               	movf	??_read_flashmem+1,w
  1759  050A  04A9               	iorwf	read_flashmem@result+1,f
  1760                           
  1761                           ;flash.c: 80: INTCONbits.GIE = 1;
  1762  050B  178B               	bsf	11,7	;volatile
  1763                           
  1764                           ;flash.c: 82: return result;
  1765  050C  0829               	movf	read_flashmem@result+1,w
  1766  050D  00A4               	movwf	?_read_flashmem+1
  1767  050E  0828               	movf	read_flashmem@result,w
  1768  050F  00A3               	movwf	?_read_flashmem
  1769  0510  0008               	return
  1770  0511                     __end_of_read_flashmem:	
  1771                           
  1772                           	psect	text2
  1773  05D4                     __ptext2:	
  1774 ;; *************** function _nrf24l01Init *****************
  1775 ;; Defined at:
  1776 ;;		line 366 in file "nrf24l01.c"
  1777 ;; Parameters:    Size  Location     Type
  1778 ;;		None
  1779 ;; Auto vars:     Size  Location     Type
  1780 ;;		None
  1781 ;; Return value:  Size  Location     Type
  1782 ;;                  1    wreg      void 
  1783 ;; Registers used:
  1784 ;;		wreg, status,2, status,0, pclath, cstack
  1785 ;; Tracked objects:
  1786 ;;		On entry : 0/0
  1787 ;;		On exit  : 0/0
  1788 ;;		Unchanged: 0/0
  1789 ;; Data sizes:     COMMON   BANK0   BANK1
  1790 ;;      Params:         0       0       0
  1791 ;;      Locals:         0       0       0
  1792 ;;      Temps:          0       1       0
  1793 ;;      Totals:         0       1       0
  1794 ;;Total ram usage:        1 bytes
  1795 ;; Hardware stack levels used:    1
  1796 ;; Hardware stack levels required when called:    9
  1797 ;; This function calls:
  1798 ;;		_nrf24l01InitRegisters
  1799 ;;		_nrf24l01InterfaceInit
  1800 ;; This function is called by:
  1801 ;;		_main
  1802 ;; This function uses a non-reentrant model
  1803 ;;
  1804                           
  1805                           
  1806                           ;psect for function _nrf24l01Init
  1807  05D4                     _nrf24l01Init:	
  1808                           
  1809                           ;nrf24l01.c: 369: nrf24l01InterfaceInit();
  1810                           
  1811                           ;incstack = 0
  1812                           ; Regs used in _nrf24l01Init: [wreg+status,2+status,0+pclath+cstack]
  1813  05D4  25FD               	fcall	_nrf24l01InterfaceInit
  1814                           
  1815                           ;nrf24l01.c: 373: PORTAbits.RA0 = 0;
  1816  05D5  0020               	movlb	0	; select bank0
  1817  05D6  100C               	bcf	12,0	;volatile
  1818                           
  1819                           ;nrf24l01.c: 375: _delay((unsigned long)((11)*(16000000/4000.0)));
  1820  05D7  303A               	movlw	58
  1821  05D8  0020               	movlb	0	; select bank0
  1822  05D9  00AC               	movwf	??_nrf24l01Init
  1823  05DA  3023               	movlw	35
  1824  05DB                     u1637:	
  1825  05DB  0B89               	decfsz	9,f
  1826  05DC  2DDB               	goto	u1637
  1827  05DD  0BAC               	decfsz	??_nrf24l01Init,f
  1828  05DE  2DDB               	goto	u1637
  1829                           
  1830                           ;nrf24l01.c: 377: nrf24l01InitRegisters();
  1831  05DF  2232               	fcall	_nrf24l01InitRegisters
  1832                           
  1833                           ;nrf24l01.c: 379: _delay((unsigned long)((2)*(16000000/4000.0)));
  1834  05E0  300B               	movlw	11
  1835  05E1  0020               	movlb	0	; select bank0
  1836  05E2  00AC               	movwf	??_nrf24l01Init
  1837  05E3  3062               	movlw	98
  1838  05E4                     u1647:	
  1839  05E4  0B89               	decfsz	9,f
  1840  05E5  2DE4               	goto	u1647
  1841  05E6  0BAC               	decfsz	??_nrf24l01Init,f
  1842  05E7  2DE4               	goto	u1647
  1843  05E8  0000               	nop
  1844  05E9  0008               	return
  1845  05EA                     __end_of_nrf24l01Init:	
  1846                           
  1847                           	psect	text3
  1848  05FD                     __ptext3:	
  1849 ;; *************** function _nrf24l01InterfaceInit *****************
  1850 ;; Defined at:
  1851 ;;		line 7 in file "interface.c"
  1852 ;; Parameters:    Size  Location     Type
  1853 ;;		None
  1854 ;; Auto vars:     Size  Location     Type
  1855 ;;		None
  1856 ;; Return value:  Size  Location     Type
  1857 ;;                  1    wreg      void 
  1858 ;; Registers used:
  1859 ;;		wreg, status,2, status,0
  1860 ;; Tracked objects:
  1861 ;;		On entry : 0/0
  1862 ;;		On exit  : 0/0
  1863 ;;		Unchanged: 0/0
  1864 ;; Data sizes:     COMMON   BANK0   BANK1
  1865 ;;      Params:         0       0       0
  1866 ;;      Locals:         0       0       0
  1867 ;;      Temps:          0       0       0
  1868 ;;      Totals:         0       0       0
  1869 ;;Total ram usage:        0 bytes
  1870 ;; Hardware stack levels used:    1
  1871 ;; Hardware stack levels required when called:    6
  1872 ;; This function calls:
  1873 ;;		Nothing
  1874 ;; This function is called by:
  1875 ;;		_nrf24l01Init
  1876 ;; This function uses a non-reentrant model
  1877 ;;
  1878                           
  1879                           
  1880                           ;psect for function _nrf24l01InterfaceInit
  1881  05FD                     _nrf24l01InterfaceInit:	
  1882                           
  1883                           ;interface.c: 9: TRISAbits.TRISA0 = 0;
  1884                           
  1885                           ;incstack = 0
  1886                           ; Regs used in _nrf24l01InterfaceInit: [wreg+status,2+status,0]
  1887  05FD  0021               	movlb	1	; select bank1
  1888  05FE  100C               	bcf	12,0	;volatile
  1889                           
  1890                           ;interface.c: 10: TRISAbits.TRISA1 = 0;
  1891  05FF  108C               	bcf	12,1	;volatile
  1892                           
  1893                           ;interface.c: 12: TRISCbits.TRISC1 = 1;
  1894  0600  148E               	bsf	14,1	;volatile
  1895                           
  1896                           ;interface.c: 13: TRISCbits.TRISC2 = 0;
  1897  0601  110E               	bcf	14,2	;volatile
  1898                           
  1899                           ;interface.c: 14: TRISCbits.TRISC0 = 0;
  1900  0602  100E               	bcf	14,0	;volatile
  1901                           
  1902                           ;interface.c: 16: SSPCON1bits.SSPEN = 0;
  1903  0603  0024               	movlb	4	; select bank4
  1904  0604  1295               	bcf	21,5	;volatile
  1905                           
  1906                           ;interface.c: 17: SSPCON1bits.CKP = 0;
  1907  0605  1215               	bcf	21,4	;volatile
  1908                           
  1909                           ;interface.c: 18: SSP1STATbits.CKE = 1;
  1910  0606  1714               	bsf	20,6	;volatile
  1911                           
  1912                           ;interface.c: 19: SSPCON1bits.SSPM = 0b0000;
  1913  0607  30F0               	movlw	-16
  1914  0608  0595               	andwf	21,f	;volatile
  1915                           
  1916                           ;interface.c: 21: SSPCON1bits.SSPEN = 1;
  1917  0609  1695               	bsf	21,5	;volatile
  1918  060A  0008               	return
  1919  060B                     __end_of_nrf24l01InterfaceInit:	
  1920                           
  1921                           	psect	text4
  1922  0232                     __ptext4:	
  1923 ;; *************** function _nrf24l01InitRegisters *****************
  1924 ;; Defined at:
  1925 ;;		line 281 in file "nrf24l01.c"
  1926 ;; Parameters:    Size  Location     Type
  1927 ;;		None
  1928 ;; Auto vars:     Size  Location     Type
  1929 ;;  config          1   11[BANK0 ] struct .
  1930 ;;  DynPD           1   10[BANK0 ] struct .
  1931 ;;  enAA            1    9[BANK0 ] struct .
  1932 ;;  enRXAddr        1    8[BANK0 ] struct .
  1933 ;;  status          1    7[BANK0 ] struct .
  1934 ;;  feature         1    6[BANK0 ] struct .
  1935 ;;  rfSetup         1    5[BANK0 ] struct .
  1936 ;;  setupAW         1    4[BANK0 ] struct .
  1937 ;; Return value:  Size  Location     Type
  1938 ;;                  1    wreg      void 
  1939 ;; Registers used:
  1940 ;;		wreg, status,2, status,0, pclath, cstack
  1941 ;; Tracked objects:
  1942 ;;		On entry : 0/0
  1943 ;;		On exit  : 0/0
  1944 ;;		Unchanged: 0/0
  1945 ;; Data sizes:     COMMON   BANK0   BANK1
  1946 ;;      Params:         0       0       0
  1947 ;;      Locals:         0       8       0
  1948 ;;      Temps:          0       1       0
  1949 ;;      Totals:         0       9       0
  1950 ;;Total ram usage:        9 bytes
  1951 ;; Hardware stack levels used:    1
  1952 ;; Hardware stack levels required when called:    8
  1953 ;; This function calls:
  1954 ;;		_nrf24l01Send
  1955 ;; This function is called by:
  1956 ;;		_nrf24l01Init
  1957 ;; This function uses a non-reentrant model
  1958 ;;
  1959                           
  1960                           
  1961                           ;psect for function _nrf24l01InitRegisters
  1962  0232                     _nrf24l01InitRegisters:	
  1963                           
  1964                           ;nrf24l01.c: 283: n_CONFIG_t config;
  1965                           ;nrf24l01.c: 285: config.PWR_UP = 0;
  1966                           
  1967                           ;incstack = 0
  1968                           ; Regs used in _nrf24l01InitRegisters: [wreg+status,2+status,0+pclath+cstack]
  1969  0232  0020               	movlb	0	; select bank0
  1970  0233  10AB               	bcf	nrf24l01InitRegisters@config,1
  1971                           
  1972                           ;nrf24l01.c: 286: nrf24l01Send(0b00100000 | 0x00, config.byte);
  1973  0234  082B               	movf	nrf24l01InitRegisters@config,w
  1974  0235  00A3               	movwf	??_nrf24l01InitRegisters
  1975  0236  0823               	movf	??_nrf24l01InitRegisters,w
  1976  0237  00A0               	movwf	nrf24l01Send@data
  1977  0238  3020               	movlw	32
  1978  0239  25EA               	fcall	_nrf24l01Send
  1979                           
  1980                           ;nrf24l01.c: 288: _delay((unsigned long)((10000)*(16000000/4000000.0)));
  1981  023A  3034               	movlw	52
  1982  023B  0020               	movlb	0	; select bank0
  1983  023C  00A3               	movwf	??_nrf24l01InitRegisters
  1984  023D  30F1               	movlw	241
  1985  023E                     u1657:	
  1986  023E  0B89               	decfsz	9,f
  1987  023F  2A3E               	goto	u1657
  1988  0240  0BA3               	decfsz	??_nrf24l01InitRegisters,f
  1989  0241  2A3E               	goto	u1657
  1990  0242  3200               	nop2
  1991                           
  1992                           ;nrf24l01.c: 290: n_SETUP_AW_t setupAW;
  1993                           ;nrf24l01.c: 291: setupAW.byte = 0x00;
  1994  0243  0020               	movlb	0	; select bank0
  1995  0244  01A4               	clrf	nrf24l01InitRegisters@setupAW
  1996                           
  1997                           ;nrf24l01.c: 292: setupAW.AW = 0b11;
  1998  0245  3003               	movlw	3
  1999  0246  04A4               	iorwf	nrf24l01InitRegisters@setupAW,f
  2000                           
  2001                           ;nrf24l01.c: 293: nrf24l01Send(0b00100000 | 0x02, setupAW.byte);
  2002  0247  0824               	movf	nrf24l01InitRegisters@setupAW,w
  2003  0248  00A3               	movwf	??_nrf24l01InitRegisters
  2004  0249  0823               	movf	??_nrf24l01InitRegisters,w
  2005  024A  00A0               	movwf	nrf24l01Send@data
  2006  024B  3022               	movlw	34
  2007  024C  25EA               	fcall	_nrf24l01Send
  2008                           
  2009                           ;nrf24l01.c: 301: n_RF_SETUP_t rfSetup;
  2010                           ;nrf24l01.c: 302: rfSetup.RF_DR_LOW = 0;
  2011  024D  0020               	movlb	0	; select bank0
  2012  024E  12A5               	bcf	nrf24l01InitRegisters@rfSetup,5
  2013                           
  2014                           ;nrf24l01.c: 303: rfSetup.RF_DR_HIGH = 1;
  2015  024F  15A5               	bsf	nrf24l01InitRegisters@rfSetup,3
  2016                           
  2017                           ;nrf24l01.c: 304: rfSetup.RF_PWR = 3;
  2018  0250  3006               	movlw	6
  2019  0251  04A5               	iorwf	nrf24l01InitRegisters@rfSetup,f
  2020                           
  2021                           ;nrf24l01.c: 305: nrf24l01Send(0b00100000 | 0x06, rfSetup.byte);
  2022  0252  0825               	movf	nrf24l01InitRegisters@rfSetup,w
  2023  0253  00A3               	movwf	??_nrf24l01InitRegisters
  2024  0254  0823               	movf	??_nrf24l01InitRegisters,w
  2025  0255  00A0               	movwf	nrf24l01Send@data
  2026  0256  3026               	movlw	38
  2027  0257  25EA               	fcall	_nrf24l01Send
  2028                           
  2029                           ;nrf24l01.c: 308: n_EN_RXADDR_t enRXAddr;
  2030                           ;nrf24l01.c: 309: enRXAddr.ERX_P0 = 1;
  2031  0258  0020               	movlb	0	; select bank0
  2032  0259  1428               	bsf	nrf24l01InitRegisters@enRXAddr,0
  2033                           
  2034                           ;nrf24l01.c: 310: enRXAddr.ERX_P1 = 1;
  2035  025A  14A8               	bsf	nrf24l01InitRegisters@enRXAddr,1
  2036                           
  2037                           ;nrf24l01.c: 311: enRXAddr.ERX_P2 = 1;
  2038  025B  1528               	bsf	nrf24l01InitRegisters@enRXAddr,2
  2039                           
  2040                           ;nrf24l01.c: 312: enRXAddr.ERX_P3 = 1;
  2041  025C  15A8               	bsf	nrf24l01InitRegisters@enRXAddr,3
  2042                           
  2043                           ;nrf24l01.c: 313: enRXAddr.ERX_P4 = 1;
  2044  025D  1628               	bsf	nrf24l01InitRegisters@enRXAddr,4
  2045                           
  2046                           ;nrf24l01.c: 314: enRXAddr.ERX_P5 = 1;
  2047  025E  16A8               	bsf	nrf24l01InitRegisters@enRXAddr,5
  2048                           
  2049                           ;nrf24l01.c: 315: nrf24l01Send(0b00100000 | 0x02, enRXAddr.byte);
  2050  025F  0828               	movf	nrf24l01InitRegisters@enRXAddr,w
  2051  0260  00A3               	movwf	??_nrf24l01InitRegisters
  2052  0261  0823               	movf	??_nrf24l01InitRegisters,w
  2053  0262  00A0               	movwf	nrf24l01Send@data
  2054  0263  3022               	movlw	34
  2055  0264  25EA               	fcall	_nrf24l01Send
  2056                           
  2057                           ;nrf24l01.c: 318: n_EN_AA_t enAA;
  2058                           ;nrf24l01.c: 319: enAA.byte = nrf24l01Send(0b00000000 | 0x01, 0);
  2059  0265  0020               	movlb	0	; select bank0
  2060  0266  01A0               	clrf	nrf24l01Send@data
  2061  0267  3001               	movlw	1
  2062  0268  25EA               	fcall	_nrf24l01Send
  2063  0269  0020               	movlb	0	; select bank0
  2064  026A  00A3               	movwf	??_nrf24l01InitRegisters
  2065  026B  0823               	movf	??_nrf24l01InitRegisters,w
  2066  026C  00A9               	movwf	nrf24l01InitRegisters@enAA
  2067                           
  2068                           ;nrf24l01.c: 320: enAA.ENAA_P0 = 0;
  2069  026D  1029               	bcf	nrf24l01InitRegisters@enAA,0
  2070                           
  2071                           ;nrf24l01.c: 321: enAA.ENAA_P1 = 0;
  2072  026E  10A9               	bcf	nrf24l01InitRegisters@enAA,1
  2073                           
  2074                           ;nrf24l01.c: 322: enAA.ENAA_P2 = 0;
  2075  026F  1129               	bcf	nrf24l01InitRegisters@enAA,2
  2076                           
  2077                           ;nrf24l01.c: 323: enAA.ENAA_P3 = 0;
  2078  0270  11A9               	bcf	nrf24l01InitRegisters@enAA,3
  2079                           
  2080                           ;nrf24l01.c: 324: enAA.ENAA_P4 = 0;
  2081  0271  1229               	bcf	nrf24l01InitRegisters@enAA,4
  2082                           
  2083                           ;nrf24l01.c: 325: enAA.ENAA_P5 = 0;
  2084  0272  12A9               	bcf	nrf24l01InitRegisters@enAA,5
  2085                           
  2086                           ;nrf24l01.c: 326: nrf24l01Send(0b00100000 | 0x01, enAA.byte);
  2087  0273  0829               	movf	nrf24l01InitRegisters@enAA,w
  2088  0274  00A3               	movwf	??_nrf24l01InitRegisters
  2089  0275  0823               	movf	??_nrf24l01InitRegisters,w
  2090  0276  00A0               	movwf	nrf24l01Send@data
  2091  0277  3021               	movlw	33
  2092  0278  25EA               	fcall	_nrf24l01Send
  2093                           
  2094                           ;nrf24l01.c: 330: n_FEATURE_t feature;
  2095                           ;nrf24l01.c: 331: feature.byte = nrf24l01Send(0b00000000 | 0x1D, 0);
  2096  0279  0020               	movlb	0	; select bank0
  2097  027A  01A0               	clrf	nrf24l01Send@data
  2098  027B  301D               	movlw	29
  2099  027C  25EA               	fcall	_nrf24l01Send
  2100  027D  0020               	movlb	0	; select bank0
  2101  027E  00A3               	movwf	??_nrf24l01InitRegisters
  2102  027F  0823               	movf	??_nrf24l01InitRegisters,w
  2103  0280  00A6               	movwf	nrf24l01InitRegisters@feature
  2104                           
  2105                           ;nrf24l01.c: 332: feature.EN_DPL = 1;
  2106  0281  1526               	bsf	nrf24l01InitRegisters@feature,2
  2107                           
  2108                           ;nrf24l01.c: 333: feature.EN_DYN_ACK = 1;
  2109  0282  1426               	bsf	nrf24l01InitRegisters@feature,0
  2110                           
  2111                           ;nrf24l01.c: 334: nrf24l01Send(0b00100000 | 0x1D, feature.byte);
  2112  0283  0826               	movf	nrf24l01InitRegisters@feature,w
  2113  0284  00A3               	movwf	??_nrf24l01InitRegisters
  2114  0285  0823               	movf	??_nrf24l01InitRegisters,w
  2115  0286  00A0               	movwf	nrf24l01Send@data
  2116  0287  303D               	movlw	61
  2117  0288  25EA               	fcall	_nrf24l01Send
  2118                           
  2119                           ;nrf24l01.c: 336: n_DYNPD_t DynPD;
  2120                           ;nrf24l01.c: 337: DynPD.byte = nrf24l01Send(0b00000000 | 0x1C, 0);
  2121  0289  0020               	movlb	0	; select bank0
  2122  028A  01A0               	clrf	nrf24l01Send@data
  2123  028B  301C               	movlw	28
  2124  028C  25EA               	fcall	_nrf24l01Send
  2125  028D  0020               	movlb	0	; select bank0
  2126  028E  00A3               	movwf	??_nrf24l01InitRegisters
  2127  028F  0823               	movf	??_nrf24l01InitRegisters,w
  2128  0290  00AA               	movwf	nrf24l01InitRegisters@DynPD
  2129                           
  2130                           ;nrf24l01.c: 338: DynPD.DPL_P0 = 1;
  2131  0291  142A               	bsf	nrf24l01InitRegisters@DynPD,0
  2132                           
  2133                           ;nrf24l01.c: 339: DynPD.DPL_P1 = 1;
  2134  0292  14AA               	bsf	nrf24l01InitRegisters@DynPD,1
  2135                           
  2136                           ;nrf24l01.c: 340: DynPD.DPL_P2 = 1;
  2137  0293  152A               	bsf	nrf24l01InitRegisters@DynPD,2
  2138                           
  2139                           ;nrf24l01.c: 341: DynPD.DPL_P3 = 1;
  2140  0294  15AA               	bsf	nrf24l01InitRegisters@DynPD,3
  2141                           
  2142                           ;nrf24l01.c: 342: DynPD.DPL_P4 = 1;
  2143  0295  162A               	bsf	nrf24l01InitRegisters@DynPD,4
  2144                           
  2145                           ;nrf24l01.c: 343: DynPD.DPL_P5 = 1;
  2146  0296  16AA               	bsf	nrf24l01InitRegisters@DynPD,5
  2147                           
  2148                           ;nrf24l01.c: 344: nrf24l01Send(0b00100000 | 0x1C, DynPD.byte);
  2149  0297  082A               	movf	nrf24l01InitRegisters@DynPD,w
  2150  0298  00A3               	movwf	??_nrf24l01InitRegisters
  2151  0299  0823               	movf	??_nrf24l01InitRegisters,w
  2152  029A  00A0               	movwf	nrf24l01Send@data
  2153  029B  303C               	movlw	60
  2154  029C  25EA               	fcall	_nrf24l01Send
  2155                           
  2156                           ;nrf24l01.c: 347: n_STATUS_t status;
  2157                           ;nrf24l01.c: 348: status.byte = 0x00;
  2158  029D  0020               	movlb	0	; select bank0
  2159  029E  01A7               	clrf	nrf24l01InitRegisters@status
  2160                           
  2161                           ;nrf24l01.c: 349: status.RX_DR = 1;
  2162  029F  1727               	bsf	nrf24l01InitRegisters@status,6
  2163                           
  2164                           ;nrf24l01.c: 350: status.TX_DS = 1;
  2165  02A0  16A7               	bsf	nrf24l01InitRegisters@status,5
  2166                           
  2167                           ;nrf24l01.c: 351: status.MAX_RT = 1;
  2168  02A1  1627               	bsf	nrf24l01InitRegisters@status,4
  2169                           
  2170                           ;nrf24l01.c: 352: nrf24l01Send(0b00100000 | 0x07, status.byte);
  2171  02A2  0827               	movf	nrf24l01InitRegisters@status,w
  2172  02A3  00A3               	movwf	??_nrf24l01InitRegisters
  2173  02A4  0823               	movf	??_nrf24l01InitRegisters,w
  2174  02A5  00A0               	movwf	nrf24l01Send@data
  2175  02A6  3027               	movlw	39
  2176  02A7  25EA               	fcall	_nrf24l01Send
  2177                           
  2178                           ;nrf24l01.c: 355: nrf24l01Send(0b11100001, 0);
  2179  02A8  0020               	movlb	0	; select bank0
  2180  02A9  01A0               	clrf	nrf24l01Send@data
  2181  02AA  30E1               	movlw	225
  2182  02AB  25EA               	fcall	_nrf24l01Send
  2183                           
  2184                           ;nrf24l01.c: 356: nrf24l01Send(0b11100010, 0);
  2185  02AC  0020               	movlb	0	; select bank0
  2186  02AD  01A0               	clrf	nrf24l01Send@data
  2187  02AE  30E2               	movlw	226
  2188  02AF  25EA               	fcall	_nrf24l01Send
  2189                           
  2190                           ;nrf24l01.c: 359: config.PRIM_RX = 1;
  2191  02B0  0020               	movlb	0	; select bank0
  2192  02B1  142B               	bsf	nrf24l01InitRegisters@config,0
  2193                           
  2194                           ;nrf24l01.c: 360: config.EN_CRC = 1;
  2195  02B2  15AB               	bsf	nrf24l01InitRegisters@config,3
  2196                           
  2197                           ;nrf24l01.c: 361: config.CRCO = 1;
  2198  02B3  152B               	bsf	nrf24l01InitRegisters@config,2
  2199                           
  2200                           ;nrf24l01.c: 362: config.PWR_UP = 1;
  2201  02B4  14AB               	bsf	nrf24l01InitRegisters@config,1
  2202                           
  2203                           ;nrf24l01.c: 363: nrf24l01Send(0b00100000 | 0x00, config.byte);
  2204  02B5  082B               	movf	nrf24l01InitRegisters@config,w
  2205  02B6  00A3               	movwf	??_nrf24l01InitRegisters
  2206  02B7  0823               	movf	??_nrf24l01InitRegisters,w
  2207  02B8  00A0               	movwf	nrf24l01Send@data
  2208  02B9  3020               	movlw	32
  2209  02BA  25EA               	fcall	_nrf24l01Send
  2210  02BB  0008               	return
  2211  02BC                     __end_of_nrf24l01InitRegisters:	
  2212                           
  2213                           	psect	text5
  2214  0100                     __ptext5:	
  2215 ;; *************** function _loop *****************
  2216 ;; Defined at:
  2217 ;;		line 70 in file "main.c"
  2218 ;; Parameters:    Size  Location     Type
  2219 ;;		None
  2220 ;; Auto vars:     Size  Location     Type
  2221 ;;		None
  2222 ;; Return value:  Size  Location     Type
  2223 ;;                  1    wreg      void 
  2224 ;; Registers used:
  2225 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2226 ;; Tracked objects:
  2227 ;;		On entry : 0/0
  2228 ;;		On exit  : 0/0
  2229 ;;		Unchanged: 0/0
  2230 ;; Data sizes:     COMMON   BANK0   BANK1
  2231 ;;      Params:         0       0       0
  2232 ;;      Locals:         0       0       0
  2233 ;;      Temps:          0       0       0
  2234 ;;      Totals:         0       0       0
  2235 ;;Total ram usage:        0 bytes
  2236 ;; Hardware stack levels used:    1
  2237 ;; Hardware stack levels required when called:   10
  2238 ;; This function calls:
  2239 ;;		_checkRxData
  2240 ;;		_getADCValue
  2241 ;;		_nrf24l01SendString
  2242 ;;		_sleep
  2243 ;;		_strcpy
  2244 ;;		_utoa
  2245 ;; This function is called by:
  2246 ;;		_main
  2247 ;; This function uses a non-reentrant model
  2248 ;;
  2249                           
  2250                           
  2251                           ;psect for function _loop
  2252  0100                     _loop:	
  2253                           
  2254                           ;main.c: 74: strcpy(nrf24l01TXTopic, "DBG");
  2255                           
  2256                           ;incstack = 0
  2257                           ; Regs used in _loop: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  2258  0100  305E               	movlw	low (STR_1| (0+32768))
  2259  0101  0020               	movlb	0	; select bank0
  2260  0102  00A3               	movwf	strcpy@from
  2261  0103  3086               	movlw	high (STR_1| (0+32768))
  2262  0104  00A4               	movwf	strcpy@from+1
  2263  0105  3065               	movlw	(low (_nrf24l01TXTopic| 0))& (0+255)
  2264  0106  25B9               	fcall	_strcpy
  2265                           
  2266                           ;main.c: 75: utoa(nrf24l01TXValue, counter, 10);
  2267  0107  0020               	movlb	0	; select bank0
  2268  0108  084A               	movf	_counter+1,w
  2269  0109  00C0               	movwf	utoa@val+1
  2270  010A  0849               	movf	_counter,w
  2271  010B  00BF               	movwf	utoa@val
  2272  010C  300A               	movlw	10
  2273  010D  00C1               	movwf	utoa@base
  2274  010E  3000               	movlw	0
  2275  010F  00C2               	movwf	utoa@base+1
  2276  0110  305D               	movlw	(low (_nrf24l01TXValue| 0))& (0+255)
  2277  0111  23C8               	fcall	_utoa
  2278                           
  2279                           ;main.c: 76: counter = 0;
  2280  0112  0020               	movlb	0	; select bank0
  2281  0113  01C9               	clrf	_counter
  2282  0114  01CA               	clrf	_counter+1
  2283                           
  2284                           ;main.c: 77: nrf24l01SendString(0);
  2285  0115  3000               	movlw	0
  2286  0116  219C               	fcall	_nrf24l01SendString
  2287                           
  2288                           ;main.c: 78: sleep();
  2289  0117  2616               	fcall	_sleep
  2290                           
  2291                           ;main.c: 80: strcpy(nrf24l01TXTopic, "ADC3");
  2292  0118  304B               	movlw	low (STR_2| (0+32768))
  2293  0119  0020               	movlb	0	; select bank0
  2294  011A  00A3               	movwf	strcpy@from
  2295  011B  3086               	movlw	high (STR_2| (0+32768))
  2296  011C  00A4               	movwf	strcpy@from+1
  2297  011D  3065               	movlw	(low (_nrf24l01TXTopic| 0))& (0+255)
  2298  011E  25B9               	fcall	_strcpy
  2299                           
  2300                           ;main.c: 81: utoa(nrf24l01TXValue, getADCValue(3, 2505), 10);
  2301  011F  3000               	movlw	0
  2302  0120  0020               	movlb	0	; select bank0
  2303  0121  00B4               	movwf	getADCValue@divider+3
  2304  0122  3000               	movlw	0
  2305  0123  00B3               	movwf	getADCValue@divider+2
  2306  0124  3009               	movlw	9
  2307  0125  00B2               	movwf	getADCValue@divider+1
  2308  0126  30C9               	movlw	201
  2309  0127  00B1               	movwf	getADCValue@divider
  2310  0128  3003               	movlw	3
  2311  0129  2343               	fcall	_getADCValue
  2312  012A  0020               	movlb	0	; select bank0
  2313  012B  0832               	movf	?_getADCValue+1,w
  2314  012C  00C0               	movwf	utoa@val+1
  2315  012D  0831               	movf	?_getADCValue,w
  2316  012E  00BF               	movwf	utoa@val
  2317  012F  300A               	movlw	10
  2318  0130  00C1               	movwf	utoa@base
  2319  0131  3000               	movlw	0
  2320  0132  00C2               	movwf	utoa@base+1
  2321  0133  305D               	movlw	(low (_nrf24l01TXValue| 0))& (0+255)
  2322  0134  23C8               	fcall	_utoa
  2323                           
  2324                           ;main.c: 82: nrf24l01SendString(1);
  2325  0135  3001               	movlw	1
  2326  0136  219C               	fcall	_nrf24l01SendString
  2327                           
  2328                           ;main.c: 83: sleep();
  2329  0137  2616               	fcall	_sleep
  2330                           
  2331                           ;main.c: 85: strcpy(nrf24l01TXTopic, "ADC7");
  2332  0138  3050               	movlw	low (STR_3| (0+32768))
  2333  0139  0020               	movlb	0	; select bank0
  2334  013A  00A3               	movwf	strcpy@from
  2335  013B  3086               	movlw	high (STR_3| (0+32768))
  2336  013C  00A4               	movwf	strcpy@from+1
  2337  013D  3065               	movlw	(low (_nrf24l01TXTopic| 0))& (0+255)
  2338  013E  25B9               	fcall	_strcpy
  2339                           
  2340                           ;main.c: 86: utoa(nrf24l01TXValue, getADCValue(7, 2500), 10);
  2341  013F  3000               	movlw	0
  2342  0140  0020               	movlb	0	; select bank0
  2343  0141  00B4               	movwf	getADCValue@divider+3
  2344  0142  3000               	movlw	0
  2345  0143  00B3               	movwf	getADCValue@divider+2
  2346  0144  3009               	movlw	9
  2347  0145  00B2               	movwf	getADCValue@divider+1
  2348  0146  30C4               	movlw	196
  2349  0147  00B1               	movwf	getADCValue@divider
  2350  0148  3007               	movlw	7
  2351  0149  2343               	fcall	_getADCValue
  2352  014A  0020               	movlb	0	; select bank0
  2353  014B  0832               	movf	?_getADCValue+1,w
  2354  014C  00C0               	movwf	utoa@val+1
  2355  014D  0831               	movf	?_getADCValue,w
  2356  014E  00BF               	movwf	utoa@val
  2357  014F  300A               	movlw	10
  2358  0150  00C1               	movwf	utoa@base
  2359  0151  3000               	movlw	0
  2360  0152  00C2               	movwf	utoa@base+1
  2361  0153  305D               	movlw	(low (_nrf24l01TXValue| 0))& (0+255)
  2362  0154  23C8               	fcall	_utoa
  2363                           
  2364                           ;main.c: 87: nrf24l01SendString(1);
  2365  0155  3001               	movlw	1
  2366  0156  219C               	fcall	_nrf24l01SendString
  2367                           
  2368                           ;main.c: 88: sleep();
  2369  0157  2616               	fcall	_sleep
  2370                           
  2371                           ;main.c: 90: strcpy(nrf24l01TXTopic, "ADC29");
  2372  0158  303A               	movlw	low (STR_4| (0+32768))
  2373  0159  0020               	movlb	0	; select bank0
  2374  015A  00A3               	movwf	strcpy@from
  2375  015B  3086               	movlw	high (STR_4| (0+32768))
  2376  015C  00A4               	movwf	strcpy@from+1
  2377  015D  3065               	movlw	(low (_nrf24l01TXTopic| 0))& (0+255)
  2378  015E  25B9               	fcall	_strcpy
  2379                           
  2380                           ;main.c: 91: utoa(nrf24l01TXValue, getADCValue(29, 208900) - 40, 10);
  2381  015F  3000               	movlw	0
  2382  0160  0020               	movlb	0	; select bank0
  2383  0161  00B4               	movwf	getADCValue@divider+3
  2384  0162  3003               	movlw	3
  2385  0163  00B3               	movwf	getADCValue@divider+2
  2386  0164  3030               	movlw	48
  2387  0165  00B2               	movwf	getADCValue@divider+1
  2388  0166  3004               	movlw	4
  2389  0167  00B1               	movwf	getADCValue@divider
  2390  0168  301D               	movlw	29
  2391  0169  2343               	fcall	_getADCValue
  2392  016A  0020               	movlb	0	; select bank0
  2393  016B  0831               	movf	?_getADCValue,w
  2394  016C  3ED8               	addlw	216
  2395  016D  00BF               	movwf	utoa@val
  2396  016E  30FF               	movlw	255
  2397  016F  3D32               	addwfc	?_getADCValue+1,w
  2398  0170  00C0               	movwf	utoa@val+1
  2399  0171  300A               	movlw	10
  2400  0172  00C1               	movwf	utoa@base
  2401  0173  3000               	movlw	0
  2402  0174  00C2               	movwf	utoa@base+1
  2403  0175  305D               	movlw	(low (_nrf24l01TXValue| 0))& (0+255)
  2404  0176  23C8               	fcall	_utoa
  2405                           
  2406                           ;main.c: 92: nrf24l01SendString(1);
  2407  0177  3001               	movlw	1
  2408  0178  219C               	fcall	_nrf24l01SendString
  2409                           
  2410                           ;main.c: 93: sleep();
  2411  0179  2616               	fcall	_sleep
  2412                           
  2413                           ;main.c: 95: strcpy(nrf24l01TXTopic, "ADC31");
  2414  017A  3034               	movlw	low (STR_5| (0+32768))
  2415  017B  0020               	movlb	0	; select bank0
  2416  017C  00A3               	movwf	strcpy@from
  2417  017D  3086               	movlw	high (STR_5| (0+32768))
  2418  017E  00A4               	movwf	strcpy@from+1
  2419  017F  3065               	movlw	(low (_nrf24l01TXTopic| 0))& (0+255)
  2420  0180  25B9               	fcall	_strcpy
  2421                           
  2422                           ;main.c: 96: utoa(nrf24l01TXValue, getADCValue(31, 2475), 10);
  2423  0181  3000               	movlw	0
  2424  0182  0020               	movlb	0	; select bank0
  2425  0183  00B4               	movwf	getADCValue@divider+3
  2426  0184  3000               	movlw	0
  2427  0185  00B3               	movwf	getADCValue@divider+2
  2428  0186  3009               	movlw	9
  2429  0187  00B2               	movwf	getADCValue@divider+1
  2430  0188  30AB               	movlw	171
  2431  0189  00B1               	movwf	getADCValue@divider
  2432  018A  301F               	movlw	31
  2433  018B  2343               	fcall	_getADCValue
  2434  018C  0020               	movlb	0	; select bank0
  2435  018D  0832               	movf	?_getADCValue+1,w
  2436  018E  00C0               	movwf	utoa@val+1
  2437  018F  0831               	movf	?_getADCValue,w
  2438  0190  00BF               	movwf	utoa@val
  2439  0191  300A               	movlw	10
  2440  0192  00C1               	movwf	utoa@base
  2441  0193  3000               	movlw	0
  2442  0194  00C2               	movwf	utoa@base+1
  2443  0195  305D               	movlw	(low (_nrf24l01TXValue| 0))& (0+255)
  2444  0196  23C8               	fcall	_utoa
  2445                           
  2446                           ;main.c: 97: nrf24l01SendString(1);
  2447  0197  3001               	movlw	1
  2448  0198  219C               	fcall	_nrf24l01SendString
  2449                           
  2450                           ;main.c: 98: sleep();
  2451  0199  2616               	fcall	_sleep
  2452                           
  2453                           ;main.c: 100: checkRxData();
  2454  019A  2662               	fcall	_checkRxData
  2455  019B  0008               	return
  2456  019C                     __end_of_loop:	
  2457                           
  2458                           	psect	text6
  2459  03C8                     __ptext6:	
  2460 ;; *************** function _utoa *****************
  2461 ;; Defined at:
  2462 ;;		line 17 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\itoa.c"
  2463 ;; Parameters:    Size  Location     Type
  2464 ;;  buf             1    wreg     PTR unsigned char 
  2465 ;;		 -> nrf24l01TXValue(8), 
  2466 ;;  val             2   31[BANK0 ] unsigned int 
  2467 ;;  base            2   33[BANK0 ] int 
  2468 ;; Auto vars:     Size  Location     Type
  2469 ;;  buf             1   39[BANK0 ] PTR unsigned char 
  2470 ;;		 -> nrf24l01TXValue(8), 
  2471 ;;  v               2   36[BANK0 ] unsigned int 
  2472 ;;  c               1   38[BANK0 ] unsigned char 
  2473 ;; Return value:  Size  Location     Type
  2474 ;;                  1    wreg      PTR unsigned char 
  2475 ;; Registers used:
  2476 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2477 ;; Tracked objects:
  2478 ;;		On entry : 0/0
  2479 ;;		On exit  : 0/0
  2480 ;;		Unchanged: 0/0
  2481 ;; Data sizes:     COMMON   BANK0   BANK1
  2482 ;;      Params:         0       4       0
  2483 ;;      Locals:         0       4       0
  2484 ;;      Temps:          0       1       0
  2485 ;;      Totals:         0       9       0
  2486 ;;Total ram usage:        9 bytes
  2487 ;; Hardware stack levels used:    1
  2488 ;; Hardware stack levels required when called:    7
  2489 ;; This function calls:
  2490 ;;		___lwdiv
  2491 ;;		___lwmod
  2492 ;; This function is called by:
  2493 ;;		_loop
  2494 ;;		_main
  2495 ;; This function uses a non-reentrant model
  2496 ;;
  2497                           
  2498                           
  2499                           ;psect for function _utoa
  2500  03C8                     _utoa:	
  2501                           
  2502                           ;incstack = 0
  2503                           ; Regs used in _utoa: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  2504                           ;utoa@buf stored from wreg
  2505  03C8  0020               	movlb	0	; select bank0
  2506  03C9  00C7               	movwf	utoa@buf
  2507  03CA  0840               	movf	utoa@val+1,w
  2508  03CB  00C5               	movwf	utoa@v+1
  2509  03CC  083F               	movf	utoa@val,w
  2510  03CD  00C4               	movwf	utoa@v
  2511  03CE                     l1659:	
  2512  03CE  0842               	movf	utoa@base+1,w
  2513  03CF  00A4               	movwf	___lwdiv@divisor+1
  2514  03D0  0841               	movf	utoa@base,w
  2515  03D1  00A3               	movwf	___lwdiv@divisor
  2516  03D2  0845               	movf	utoa@v+1,w
  2517  03D3  00A6               	movwf	___lwdiv@dividend+1
  2518  03D4  0844               	movf	utoa@v,w
  2519  03D5  00A5               	movwf	___lwdiv@dividend
  2520  03D6  2477               	fcall	___lwdiv
  2521  03D7  0020               	movlb	0	; select bank0
  2522  03D8  0824               	movf	?___lwdiv+1,w
  2523  03D9  00C5               	movwf	utoa@v+1
  2524  03DA  0823               	movf	?___lwdiv,w
  2525  03DB  00C4               	movwf	utoa@v
  2526  03DC  3001               	movlw	1
  2527  03DD  00C3               	movwf	??_utoa
  2528  03DE  0843               	movf	??_utoa,w
  2529  03DF  07C7               	addwf	utoa@buf,f
  2530  03E0  0844               	movf	utoa@v,w
  2531  03E1  0445               	iorwf	utoa@v+1,w
  2532  03E2  1D03               	btfss	3,2
  2533  03E3  2BCE               	goto	l1659
  2534  03E4  0847               	movf	utoa@buf,w
  2535  03E5  0086               	movwf	6
  2536  03E6  0187               	clrf	7
  2537  03E7  0181               	clrf	1
  2538  03E8  3001               	movlw	1
  2539  03E9  02C7               	subwf	utoa@buf,f
  2540  03EA                     l1669:	
  2541  03EA  0842               	movf	utoa@base+1,w
  2542  03EB  00A4               	movwf	___lwmod@divisor+1
  2543  03EC  0841               	movf	utoa@base,w
  2544  03ED  00A3               	movwf	___lwmod@divisor
  2545  03EE  0840               	movf	utoa@val+1,w
  2546  03EF  00A6               	movwf	___lwmod@dividend+1
  2547  03F0  083F               	movf	utoa@val,w
  2548  03F1  00A5               	movwf	___lwmod@dividend
  2549  03F2  2541               	fcall	___lwmod
  2550  03F3  0020               	movlb	0	; select bank0
  2551  03F4  0823               	movf	?___lwmod,w
  2552  03F5  00C3               	movwf	??_utoa
  2553  03F6  0843               	movf	??_utoa,w
  2554  03F7  00C6               	movwf	utoa@c
  2555  03F8  0842               	movf	utoa@base+1,w
  2556  03F9  00A4               	movwf	___lwdiv@divisor+1
  2557  03FA  0841               	movf	utoa@base,w
  2558  03FB  00A3               	movwf	___lwdiv@divisor
  2559  03FC  0840               	movf	utoa@val+1,w
  2560  03FD  00A6               	movwf	___lwdiv@dividend+1
  2561  03FE  083F               	movf	utoa@val,w
  2562  03FF  00A5               	movwf	___lwdiv@dividend
  2563  0400  2477               	fcall	___lwdiv
  2564  0401  0020               	movlb	0	; select bank0
  2565  0402  0824               	movf	?___lwdiv+1,w
  2566  0403  00C0               	movwf	utoa@val+1
  2567  0404  0823               	movf	?___lwdiv,w
  2568  0405  00BF               	movwf	utoa@val
  2569  0406  300A               	movlw	10
  2570  0407  0246               	subwf	utoa@c,w
  2571  0408  1C03               	skipc
  2572  0409  2C0E               	goto	l576
  2573  040A  3007               	movlw	7
  2574  040B  00C3               	movwf	??_utoa
  2575  040C  0843               	movf	??_utoa,w
  2576  040D  07C6               	addwf	utoa@c,f
  2577  040E                     l576:	
  2578  040E  3030               	movlw	48
  2579  040F  00C3               	movwf	??_utoa
  2580  0410  0843               	movf	??_utoa,w
  2581  0411  07C6               	addwf	utoa@c,f
  2582  0412  0846               	movf	utoa@c,w
  2583  0413  00C3               	movwf	??_utoa
  2584  0414  0847               	movf	utoa@buf,w
  2585  0415  0086               	movwf	6
  2586  0416  0187               	clrf	7
  2587  0417  0843               	movf	??_utoa,w
  2588  0418  0081               	movwf	1
  2589  0419  3001               	movlw	1
  2590  041A  02C7               	subwf	utoa@buf,f
  2591  041B  083F               	movf	utoa@val,w
  2592  041C  0440               	iorwf	utoa@val+1,w
  2593  041D  1D03               	btfss	3,2
  2594  041E  2BEA               	goto	l1669
  2595                           
  2596                           ;	Return value of _utoa is never used
  2597  041F  3001               	movlw	1
  2598  0420  00C3               	movwf	??_utoa
  2599  0421  0843               	movf	??_utoa,w
  2600  0422  07C7               	addwf	utoa@buf,f
  2601  0423  0008               	return
  2602  0424                     __end_of_utoa:	
  2603                           
  2604                           	psect	text7
  2605  0541                     __ptext7:	
  2606 ;; *************** function ___lwmod *****************
  2607 ;; Defined at:
  2608 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwmod.c"
  2609 ;; Parameters:    Size  Location     Type
  2610 ;;  divisor         2    3[BANK0 ] unsigned int 
  2611 ;;  dividend        2    5[BANK0 ] unsigned int 
  2612 ;; Auto vars:     Size  Location     Type
  2613 ;;  counter         1    8[BANK0 ] unsigned char 
  2614 ;; Return value:  Size  Location     Type
  2615 ;;                  2    3[BANK0 ] unsigned int 
  2616 ;; Registers used:
  2617 ;;		wreg, status,2, status,0
  2618 ;; Tracked objects:
  2619 ;;		On entry : 0/0
  2620 ;;		On exit  : 0/0
  2621 ;;		Unchanged: 0/0
  2622 ;; Data sizes:     COMMON   BANK0   BANK1
  2623 ;;      Params:         0       4       0
  2624 ;;      Locals:         0       1       0
  2625 ;;      Temps:          0       1       0
  2626 ;;      Totals:         0       6       0
  2627 ;;Total ram usage:        6 bytes
  2628 ;; Hardware stack levels used:    1
  2629 ;; Hardware stack levels required when called:    6
  2630 ;; This function calls:
  2631 ;;		Nothing
  2632 ;; This function is called by:
  2633 ;;		_utoa
  2634 ;; This function uses a non-reentrant model
  2635 ;;
  2636                           
  2637                           
  2638                           ;psect for function ___lwmod
  2639  0541                     ___lwmod:	
  2640                           
  2641                           ;incstack = 0
  2642                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  2643  0541  0020               	movlb	0	; select bank0
  2644  0542  0823               	movf	___lwmod@divisor,w
  2645  0543  0424               	iorwf	___lwmod@divisor+1,w
  2646  0544  1903               	btfsc	3,2
  2647  0545  2D69               	goto	l1615
  2648  0546  01A8               	clrf	___lwmod@counter
  2649  0547  0AA8               	incf	___lwmod@counter,f
  2650  0548                     l1605:	
  2651  0548  1BA4               	btfsc	___lwmod@divisor+1,7
  2652  0549  2D54               	goto	l1607
  2653  054A  3001               	movlw	1
  2654  054B                     u1045:	
  2655  054B  35A3               	lslf	___lwmod@divisor,f
  2656  054C  0DA4               	rlf	___lwmod@divisor+1,f
  2657  054D  0B89               	decfsz	9,f
  2658  054E  2D4B               	goto	u1045
  2659  054F  3001               	movlw	1
  2660  0550  00A7               	movwf	??___lwmod
  2661  0551  0827               	movf	??___lwmod,w
  2662  0552  07A8               	addwf	___lwmod@counter,f
  2663  0553  2D48               	goto	l1605
  2664  0554                     l1607:	
  2665  0554  0824               	movf	___lwmod@divisor+1,w
  2666  0555  0226               	subwf	___lwmod@dividend+1,w
  2667  0556  1D03               	skipz
  2668  0557  2D5A               	goto	u1065
  2669  0558  0823               	movf	___lwmod@divisor,w
  2670  0559  0225               	subwf	___lwmod@dividend,w
  2671  055A                     u1065:	
  2672  055A  1C03               	skipc
  2673  055B  2D60               	goto	l1611
  2674  055C  0823               	movf	___lwmod@divisor,w
  2675  055D  02A5               	subwf	___lwmod@dividend,f
  2676  055E  0824               	movf	___lwmod@divisor+1,w
  2677  055F  3BA6               	subwfb	___lwmod@dividend+1,f
  2678  0560                     l1611:	
  2679  0560  3001               	movlw	1
  2680  0561                     u1075:	
  2681  0561  36A4               	lsrf	___lwmod@divisor+1,f
  2682  0562  0CA3               	rrf	___lwmod@divisor,f
  2683  0563  0B89               	decfsz	9,f
  2684  0564  2D61               	goto	u1075
  2685  0565  3001               	movlw	1
  2686  0566  02A8               	subwf	___lwmod@counter,f
  2687  0567  1D03               	btfss	3,2
  2688  0568  2D54               	goto	l1607
  2689  0569                     l1615:	
  2690  0569  0826               	movf	___lwmod@dividend+1,w
  2691  056A  00A4               	movwf	?___lwmod+1
  2692  056B  0825               	movf	___lwmod@dividend,w
  2693  056C  00A3               	movwf	?___lwmod
  2694  056D  0008               	return
  2695  056E                     __end_of___lwmod:	
  2696                           
  2697                           	psect	text8
  2698  0477                     __ptext8:	
  2699 ;; *************** function ___lwdiv *****************
  2700 ;; Defined at:
  2701 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwdiv.c"
  2702 ;; Parameters:    Size  Location     Type
  2703 ;;  divisor         2    3[BANK0 ] unsigned int 
  2704 ;;  dividend        2    5[BANK0 ] unsigned int 
  2705 ;; Auto vars:     Size  Location     Type
  2706 ;;  quotient        2    8[BANK0 ] unsigned int 
  2707 ;;  counter         1   10[BANK0 ] unsigned char 
  2708 ;; Return value:  Size  Location     Type
  2709 ;;                  2    3[BANK0 ] unsigned int 
  2710 ;; Registers used:
  2711 ;;		wreg, status,2, status,0
  2712 ;; Tracked objects:
  2713 ;;		On entry : 0/0
  2714 ;;		On exit  : 0/0
  2715 ;;		Unchanged: 0/0
  2716 ;; Data sizes:     COMMON   BANK0   BANK1
  2717 ;;      Params:         0       4       0
  2718 ;;      Locals:         0       3       0
  2719 ;;      Temps:          0       1       0
  2720 ;;      Totals:         0       8       0
  2721 ;;Total ram usage:        8 bytes
  2722 ;; Hardware stack levels used:    1
  2723 ;; Hardware stack levels required when called:    6
  2724 ;; This function calls:
  2725 ;;		Nothing
  2726 ;; This function is called by:
  2727 ;;		_utoa
  2728 ;; This function uses a non-reentrant model
  2729 ;;
  2730                           
  2731                           
  2732                           ;psect for function ___lwdiv
  2733  0477                     ___lwdiv:	
  2734                           
  2735                           ;incstack = 0
  2736                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  2737  0477  0020               	movlb	0	; select bank0
  2738  0478  01A8               	clrf	___lwdiv@quotient
  2739  0479  01A9               	clrf	___lwdiv@quotient+1
  2740  047A  0823               	movf	___lwdiv@divisor,w
  2741  047B  0424               	iorwf	___lwdiv@divisor+1,w
  2742  047C  1903               	btfsc	3,2
  2743  047D  2CA7               	goto	l1593
  2744  047E  01AA               	clrf	___lwdiv@counter
  2745  047F  0AAA               	incf	___lwdiv@counter,f
  2746  0480                     l1581:	
  2747  0480  1BA4               	btfsc	___lwdiv@divisor+1,7
  2748  0481  2C8C               	goto	l1583
  2749  0482  3001               	movlw	1
  2750  0483                     u975:	
  2751  0483  35A3               	lslf	___lwdiv@divisor,f
  2752  0484  0DA4               	rlf	___lwdiv@divisor+1,f
  2753  0485  0B89               	decfsz	9,f
  2754  0486  2C83               	goto	u975
  2755  0487  3001               	movlw	1
  2756  0488  00A7               	movwf	??___lwdiv
  2757  0489  0827               	movf	??___lwdiv,w
  2758  048A  07AA               	addwf	___lwdiv@counter,f
  2759  048B  2C80               	goto	l1581
  2760  048C                     l1583:	
  2761  048C  3001               	movlw	1
  2762  048D                     u995:	
  2763  048D  35A8               	lslf	___lwdiv@quotient,f
  2764  048E  0DA9               	rlf	___lwdiv@quotient+1,f
  2765  048F  0B89               	decfsz	9,f
  2766  0490  2C8D               	goto	u995
  2767  0491  0824               	movf	___lwdiv@divisor+1,w
  2768  0492  0226               	subwf	___lwdiv@dividend+1,w
  2769  0493  1D03               	skipz
  2770  0494  2C97               	goto	u1005
  2771  0495  0823               	movf	___lwdiv@divisor,w
  2772  0496  0225               	subwf	___lwdiv@dividend,w
  2773  0497                     u1005:	
  2774  0497  1C03               	skipc
  2775  0498  2C9E               	goto	l1589
  2776  0499  0823               	movf	___lwdiv@divisor,w
  2777  049A  02A5               	subwf	___lwdiv@dividend,f
  2778  049B  0824               	movf	___lwdiv@divisor+1,w
  2779  049C  3BA6               	subwfb	___lwdiv@dividend+1,f
  2780  049D  1428               	bsf	___lwdiv@quotient,0
  2781  049E                     l1589:	
  2782  049E  3001               	movlw	1
  2783  049F                     u1015:	
  2784  049F  36A4               	lsrf	___lwdiv@divisor+1,f
  2785  04A0  0CA3               	rrf	___lwdiv@divisor,f
  2786  04A1  0B89               	decfsz	9,f
  2787  04A2  2C9F               	goto	u1015
  2788  04A3  3001               	movlw	1
  2789  04A4  02AA               	subwf	___lwdiv@counter,f
  2790  04A5  1D03               	btfss	3,2
  2791  04A6  2C8C               	goto	l1583
  2792  04A7                     l1593:	
  2793  04A7  0829               	movf	___lwdiv@quotient+1,w
  2794  04A8  00A4               	movwf	?___lwdiv+1
  2795  04A9  0828               	movf	___lwdiv@quotient,w
  2796  04AA  00A3               	movwf	?___lwdiv
  2797  04AB  0008               	return
  2798  04AC                     __end_of___lwdiv:	
  2799                           
  2800                           	psect	text9
  2801  05B9                     __ptext9:	
  2802 ;; *************** function _strcpy *****************
  2803 ;; Defined at:
  2804 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\strcpy.c"
  2805 ;; Parameters:    Size  Location     Type
  2806 ;;  to              1    wreg     PTR unsigned char 
  2807 ;;		 -> nrf24l01TXTopic(8), 
  2808 ;;  from            2    3[BANK0 ] PTR const unsigned char 
  2809 ;;		 -> STR_6(5), STR_5(6), STR_4(6), STR_3(5), 
  2810 ;;		 -> STR_2(5), STR_1(4), 
  2811 ;; Auto vars:     Size  Location     Type
  2812 ;;  to              1    7[BANK0 ] PTR unsigned char 
  2813 ;;		 -> nrf24l01TXTopic(8), 
  2814 ;;  cp              1    6[BANK0 ] PTR unsigned char 
  2815 ;;		 -> nrf24l01TXTopic(8), 
  2816 ;; Return value:  Size  Location     Type
  2817 ;;                  1    wreg      PTR unsigned char 
  2818 ;; Registers used:
  2819 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath
  2820 ;; Tracked objects:
  2821 ;;		On entry : 0/0
  2822 ;;		On exit  : 0/0
  2823 ;;		Unchanged: 0/0
  2824 ;; Data sizes:     COMMON   BANK0   BANK1
  2825 ;;      Params:         0       2       0
  2826 ;;      Locals:         0       2       0
  2827 ;;      Temps:          0       1       0
  2828 ;;      Totals:         0       5       0
  2829 ;;Total ram usage:        5 bytes
  2830 ;; Hardware stack levels used:    1
  2831 ;; Hardware stack levels required when called:    6
  2832 ;; This function calls:
  2833 ;;		Nothing
  2834 ;; This function is called by:
  2835 ;;		_loop
  2836 ;;		_main
  2837 ;; This function uses a non-reentrant model
  2838 ;;
  2839                           
  2840                           
  2841                           ;psect for function _strcpy
  2842  05B9                     _strcpy:	
  2843                           
  2844                           ;incstack = 0
  2845                           ; Regs used in _strcpy: [wreg-fsr1h+status,2+status,0+pclath]
  2846                           ;strcpy@to stored from wreg
  2847  05B9  0020               	movlb	0	; select bank0
  2848  05BA  00A7               	movwf	strcpy@to
  2849  05BB  0827               	movf	strcpy@to,w
  2850  05BC  00A5               	movwf	??_strcpy
  2851  05BD  0825               	movf	??_strcpy,w
  2852  05BE  00A6               	movwf	strcpy@cp
  2853  05BF                     l1655:	
  2854  05BF  0826               	movf	strcpy@cp,w
  2855  05C0  0086               	movwf	6
  2856  05C1  0187               	clrf	7
  2857  05C2  0823               	movf	strcpy@from,w
  2858  05C3  0084               	movwf	4
  2859  05C4  0824               	movf	strcpy@from+1,w
  2860  05C5  0085               	movwf	5
  2861  05C6  0800               	movf	0,w	;code access
  2862  05C7  3FC0               	movwi [0]fsr1
  2863  05C8  0889               	movf	9,f
  2864  05C9  1903               	btfsc	3,2
  2865  05CA  0008               	return
  2866  05CB  3001               	movlw	1
  2867  05CC  00A5               	movwf	??_strcpy
  2868  05CD  0825               	movf	??_strcpy,w
  2869  05CE  07A6               	addwf	strcpy@cp,f
  2870  05CF  3001               	movlw	1
  2871  05D0  07A3               	addwf	strcpy@from,f
  2872  05D1  3000               	movlw	0
  2873  05D2  3DA4               	addwfc	strcpy@from+1,f
  2874  05D3  2DBF               	goto	l1655
  2875  05D4                     __end_of_strcpy:	
  2876                           ;	Return value of _strcpy is never used
  2877                           
  2878                           
  2879                           	psect	text10
  2880  019C                     __ptext10:	
  2881 ;; *************** function _nrf24l01SendString *****************
  2882 ;; Defined at:
  2883 ;;		line 153 in file "nrf24l01.c"
  2884 ;; Parameters:    Size  Location     Type
  2885 ;;  waitForAck      1    wreg     unsigned char 
  2886 ;; Auto vars:     Size  Location     Type
  2887 ;;  waitForAck      1    4[BANK0 ] unsigned char 
  2888 ;;  i               1    5[BANK0 ] unsigned char 
  2889 ;; Return value:  Size  Location     Type
  2890 ;;                  1    wreg      void 
  2891 ;; Registers used:
  2892 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2893 ;; Tracked objects:
  2894 ;;		On entry : 0/0
  2895 ;;		On exit  : 0/0
  2896 ;;		Unchanged: 0/0
  2897 ;; Data sizes:     COMMON   BANK0   BANK1
  2898 ;;      Params:         0       0       0
  2899 ;;      Locals:         0       2       0
  2900 ;;      Temps:          0       1       0
  2901 ;;      Totals:         0       3       0
  2902 ;;Total ram usage:        3 bytes
  2903 ;; Hardware stack levels used:    1
  2904 ;; Hardware stack levels required when called:    9
  2905 ;; This function calls:
  2906 ;;		_enableInterrupts
  2907 ;;		_nrf24l01SPIEnd
  2908 ;;		_nrf24l01SPISend
  2909 ;;		_nrf24l01SPIStart
  2910 ;;		_nrf24l01SetRXMode
  2911 ;; This function is called by:
  2912 ;;		_loop
  2913 ;;		_main
  2914 ;; This function uses a non-reentrant model
  2915 ;;
  2916                           
  2917                           
  2918                           ;psect for function _nrf24l01SendString
  2919  019C                     _nrf24l01SendString:	
  2920                           
  2921                           ;incstack = 0
  2922                           ; Regs used in _nrf24l01SendString: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  2923                           ;nrf24l01SendString@waitForAck stored from wreg
  2924  019C  0020               	movlb	0	; select bank0
  2925  019D  00A4               	movwf	nrf24l01SendString@waitForAck
  2926                           
  2927                           ;nrf24l01.c: 156: unsigned char i;
  2928                           ;nrf24l01.c: 160: nrf24l01.waitForTXACK = waitForAck;
  2929  019E  0824               	movf	nrf24l01SendString@waitForAck,w
  2930  019F  3901               	andlw	1
  2931  01A0  104C               	bcf	_nrf24l01,0	;volatile
  2932  01A1  1D03               	skipz
  2933  01A2  144C               	bsf	_nrf24l01,0	;volatile
  2934                           
  2935                           ;nrf24l01.c: 162: if (counter){
  2936  01A3  0849               	movf	_counter,w
  2937  01A4  044A               	iorwf	_counter+1,w
  2938  01A5  1903               	btfsc	3,2
  2939  01A6  29AB               	goto	l266
  2940                           
  2941                           ;nrf24l01.c: 163: counter--;
  2942  01A7  3001               	movlw	1
  2943  01A8  02C9               	subwf	_counter,f
  2944  01A9  3000               	movlw	0
  2945  01AA  3BCA               	subwfb	_counter+1,f
  2946  01AB                     l266:	
  2947                           ;nrf24l01.c: 164: }
  2948                           ;nrf24l01.c: 167: RESEND:
  2949                           
  2950                           
  2951                           ;nrf24l01.c: 170: i = 0xFF;
  2952  01AB  30FF               	movlw	255
  2953  01AC  00A3               	movwf	??_nrf24l01SendString
  2954  01AD  0823               	movf	??_nrf24l01SendString,w
  2955  01AE  00A5               	movwf	nrf24l01SendString@i
  2956  01AF                     l1699:	
  2957                           ;nrf24l01.c: 171: while (nrf24l01.TXBusy){
  2958                           
  2959  01AF  0020               	movlb	0	; select bank0
  2960  01B0  1CCC               	btfss	_nrf24l01,1	;volatile
  2961  01B1  29BB               	goto	l270
  2962                           
  2963                           ;nrf24l01.c: 172: if (!--i) {
  2964  01B2  3001               	movlw	1
  2965  01B3  02A5               	subwf	nrf24l01SendString@i,f
  2966  01B4  1903               	btfsc	3,2
  2967  01B5  29AB               	goto	l266
  2968                           
  2969                           ;nrf24l01.c: 174: }
  2970                           ;nrf24l01.c: 175: _delay((unsigned long)((50)*(16000000/4000000.0)));
  2971                           
  2972                           ;nrf24l01.c: 173: goto RESEND;
  2973  01B6  3042               	movlw	66
  2974  01B7                     u1667:	
  2975  01B7  0B89               	decfsz	9,f
  2976  01B8  29B7               	goto	u1667
  2977  01B9  3200               	nop2
  2978  01BA  29AF               	goto	l1699
  2979  01BB                     l270:	
  2980                           
  2981                           ;nrf24l01.c: 176: }
  2982                           ;nrf24l01.c: 180: nrf24l01.TXBusy = 1;
  2983  01BB  14CC               	bsf	_nrf24l01,1	;volatile
  2984                           
  2985                           ;nrf24l01.c: 183: enableInterrupts(0);
  2986  01BC  3000               	movlw	0
  2987  01BD  262D               	fcall	_enableInterrupts
  2988                           
  2989                           ;nrf24l01.c: 186: nrf24l01SetRXMode(0);
  2990  01BE  3000               	movlw	0
  2991  01BF  24AC               	fcall	_nrf24l01SetRXMode
  2992                           
  2993                           ;nrf24l01.c: 189: nrf24l01SPIStart();
  2994  01C0  261F               	fcall	_nrf24l01SPIStart
  2995                           
  2996                           ;nrf24l01.c: 192: nrf24l01SPISend(0b10110000);
  2997  01C1  30B0               	movlw	176
  2998  01C2  260B               	fcall	_nrf24l01SPISend
  2999                           
  3000                           ;nrf24l01.c: 195: for (i = 0; (nrf24l01Name[i] != '\0') && (i < sizeof(nrf24l01Name)); i
      +                          ++){
  3001  01C3  0020               	movlb	0	; select bank0
  3002  01C4  01A5               	clrf	nrf24l01SendString@i
  3003  01C5  29D1               	goto	l1709
  3004  01C6                     l1705:	
  3005                           
  3006                           ;nrf24l01.c: 196: nrf24l01SPISend(nrf24l01Name[i]);
  3007  01C6  0825               	movf	nrf24l01SendString@i,w
  3008  01C7  3EA0               	addlw	(low (_nrf24l01Name| 0))& (0+255)
  3009  01C8  0086               	movwf	6
  3010  01C9  0187               	clrf	7
  3011  01CA  0801               	movf	1,w
  3012  01CB  260B               	fcall	_nrf24l01SPISend
  3013  01CC  3001               	movlw	1
  3014  01CD  0020               	movlb	0	; select bank0
  3015  01CE  00A3               	movwf	??_nrf24l01SendString
  3016  01CF  0823               	movf	??_nrf24l01SendString,w
  3017  01D0  07A5               	addwf	nrf24l01SendString@i,f
  3018  01D1                     l1709:	
  3019  01D1  0825               	movf	nrf24l01SendString@i,w
  3020  01D2  3EA0               	addlw	(low (_nrf24l01Name| 0))& (0+255)
  3021  01D3  0086               	movwf	6
  3022  01D4  0187               	clrf	7
  3023  01D5  0801               	movf	1,w
  3024  01D6  1903               	btfsc	3,2
  3025  01D7  29DC               	goto	l1713
  3026  01D8  3010               	movlw	16
  3027  01D9  0225               	subwf	nrf24l01SendString@i,w
  3028  01DA  1C03               	skipc
  3029  01DB  29C6               	goto	l1705
  3030  01DC                     l1713:	
  3031                           
  3032                           ;nrf24l01.c: 197: }
  3033                           ;nrf24l01.c: 200: nrf24l01SPISend('/');
  3034  01DC  302F               	movlw	47
  3035  01DD  260B               	fcall	_nrf24l01SPISend
  3036                           
  3037                           ;nrf24l01.c: 203: for (i = 0; (nrf24l01TXTopic[i] != '\0') && (i < sizeof(nrf24l01TXTopi
      +                          c)); i++){
  3038  01DE  0020               	movlb	0	; select bank0
  3039  01DF  01A5               	clrf	nrf24l01SendString@i
  3040  01E0  29EC               	goto	l1721
  3041  01E1                     l1717:	
  3042                           
  3043                           ;nrf24l01.c: 204: nrf24l01SPISend(nrf24l01TXTopic[i]);
  3044  01E1  0825               	movf	nrf24l01SendString@i,w
  3045  01E2  3E65               	addlw	(low (_nrf24l01TXTopic| 0))& (0+255)
  3046  01E3  0086               	movwf	6
  3047  01E4  0187               	clrf	7
  3048  01E5  0801               	movf	1,w
  3049  01E6  260B               	fcall	_nrf24l01SPISend
  3050  01E7  3001               	movlw	1
  3051  01E8  0020               	movlb	0	; select bank0
  3052  01E9  00A3               	movwf	??_nrf24l01SendString
  3053  01EA  0823               	movf	??_nrf24l01SendString,w
  3054  01EB  07A5               	addwf	nrf24l01SendString@i,f
  3055  01EC                     l1721:	
  3056  01EC  0825               	movf	nrf24l01SendString@i,w
  3057  01ED  3E65               	addlw	(low (_nrf24l01TXTopic| 0))& (0+255)
  3058  01EE  0086               	movwf	6
  3059  01EF  0187               	clrf	7
  3060  01F0  0801               	movf	1,w
  3061  01F1  1903               	btfsc	3,2
  3062  01F2  29F7               	goto	l1725
  3063  01F3  3008               	movlw	8
  3064  01F4  0225               	subwf	nrf24l01SendString@i,w
  3065  01F5  1C03               	skipc
  3066  01F6  29E1               	goto	l1717
  3067  01F7                     l1725:	
  3068                           
  3069                           ;nrf24l01.c: 205: }
  3070                           ;nrf24l01.c: 208: nrf24l01SPISend('/');
  3071  01F7  302F               	movlw	47
  3072  01F8  260B               	fcall	_nrf24l01SPISend
  3073                           
  3074                           ;nrf24l01.c: 211: for (i = 0; (nrf24l01TXValue[i] != '\0') && (i < sizeof(nrf24l01TXValu
      +                          e)); i++){
  3075  01F9  0020               	movlb	0	; select bank0
  3076  01FA  01A5               	clrf	nrf24l01SendString@i
  3077  01FB  2A07               	goto	l1733
  3078  01FC                     l1729:	
  3079                           
  3080                           ;nrf24l01.c: 212: nrf24l01SPISend(nrf24l01TXValue[i]);
  3081  01FC  0825               	movf	nrf24l01SendString@i,w
  3082  01FD  3E5D               	addlw	(low (_nrf24l01TXValue| 0))& (0+255)
  3083  01FE  0086               	movwf	6
  3084  01FF  0187               	clrf	7
  3085  0200  0801               	movf	1,w
  3086  0201  260B               	fcall	_nrf24l01SPISend
  3087  0202  3001               	movlw	1
  3088  0203  0020               	movlb	0	; select bank0
  3089  0204  00A3               	movwf	??_nrf24l01SendString
  3090  0205  0823               	movf	??_nrf24l01SendString,w
  3091  0206  07A5               	addwf	nrf24l01SendString@i,f
  3092  0207                     l1733:	
  3093  0207  0825               	movf	nrf24l01SendString@i,w
  3094  0208  3E5D               	addlw	(low (_nrf24l01TXValue| 0))& (0+255)
  3095  0209  0086               	movwf	6
  3096  020A  0187               	clrf	7
  3097  020B  0801               	movf	1,w
  3098  020C  1903               	btfsc	3,2
  3099  020D  2A12               	goto	l1737
  3100  020E  3008               	movlw	8
  3101  020F  0225               	subwf	nrf24l01SendString@i,w
  3102  0210  1C03               	skipc
  3103  0211  29FC               	goto	l1729
  3104  0212                     l1737:	
  3105                           
  3106                           ;nrf24l01.c: 213: }
  3107                           ;nrf24l01.c: 216: nrf24l01SPIEnd();
  3108  0212  2626               	fcall	_nrf24l01SPIEnd
  3109                           
  3110                           ;nrf24l01.c: 219: PORTAbits.RA0 = 1;
  3111  0213  0020               	movlb	0	; select bank0
  3112  0214  140C               	bsf	12,0	;volatile
  3113                           
  3114                           ;nrf24l01.c: 220: _delay((unsigned long)((20)*(16000000/4000000.0)));
  3115  0215  301A               	movlw	26
  3116  0216                     u1677:	
  3117  0216  0B89               	decfsz	9,f
  3118  0217  2A16               	goto	u1677
  3119  0218  3200               	nop2
  3120                           
  3121                           ;nrf24l01.c: 221: PORTAbits.RA0 = 0;
  3122  0219  0020               	movlb	0	; select bank0
  3123  021A  100C               	bcf	12,0	;volatile
  3124                           
  3125                           ;nrf24l01.c: 224: enableInterrupts(1);
  3126  021B  3001               	movlw	1
  3127  021C  262D               	fcall	_enableInterrupts
  3128                           
  3129                           ;nrf24l01.c: 227: i = 0xFF;
  3130  021D  30FF               	movlw	255
  3131  021E  0020               	movlb	0	; select bank0
  3132  021F  00A3               	movwf	??_nrf24l01SendString
  3133  0220  0823               	movf	??_nrf24l01SendString,w
  3134  0221  00A5               	movwf	nrf24l01SendString@i
  3135  0222                     l1753:	
  3136                           ;nrf24l01.c: 228: while (nrf24l01.waitForTXACK){
  3137                           
  3138  0222  0020               	movlb	0	; select bank0
  3139  0223  1C4C               	btfss	_nrf24l01,0	;volatile
  3140  0224  0008               	return
  3141                           
  3142                           ;nrf24l01.c: 229: if (!--i) {
  3143  0225  3001               	movlw	1
  3144  0226  02A5               	subwf	nrf24l01SendString@i,f
  3145  0227  1D03               	btfss	3,2
  3146  0228  2A2E               	goto	l1751
  3147                           
  3148                           ;nrf24l01.c: 230: counter++;
  3149  0229  3001               	movlw	1
  3150  022A  07C9               	addwf	_counter,f
  3151  022B  3000               	movlw	0
  3152  022C  3DCA               	addwfc	_counter+1,f
  3153                           
  3154                           ;nrf24l01.c: 231: goto RESEND;
  3155  022D  29AB               	goto	l266
  3156  022E                     l1751:	
  3157                           
  3158                           ;nrf24l01.c: 232: }
  3159                           ;nrf24l01.c: 233: _delay((unsigned long)((60)*(16000000/4000000.0)));
  3160  022E  3050               	movlw	80
  3161  022F                     u1687:	
  3162  022F  0B89               	decfsz	9,f
  3163  0230  2A2F               	goto	u1687
  3164  0231  2A22               	goto	l1753
  3165  0232                     __end_of_nrf24l01SendString:	
  3166                           
  3167                           	psect	text11
  3168  0343                     __ptext11:	
  3169 ;; *************** function _getADCValue *****************
  3170 ;; Defined at:
  3171 ;;		line 20 in file "main.c"
  3172 ;; Parameters:    Size  Location     Type
  3173 ;;  channel         1    wreg     unsigned char 
  3174 ;;  divider         4   17[BANK0 ] unsigned long 
  3175 ;; Auto vars:     Size  Location     Type
  3176 ;;  channel         1   25[BANK0 ] unsigned char 
  3177 ;;  adcSum          4   27[BANK0 ] unsigned long 
  3178 ;;  adcLoop         1   26[BANK0 ] unsigned char 
  3179 ;; Return value:  Size  Location     Type
  3180 ;;                  4   17[BANK0 ] unsigned long 
  3181 ;; Registers used:
  3182 ;;		wreg, status,2, status,0, pclath, cstack
  3183 ;; Tracked objects:
  3184 ;;		On entry : 0/0
  3185 ;;		On exit  : 0/0
  3186 ;;		Unchanged: 0/0
  3187 ;; Data sizes:     COMMON   BANK0   BANK1
  3188 ;;      Params:         0       4       0
  3189 ;;      Locals:         0       6       0
  3190 ;;      Temps:          0       4       0
  3191 ;;      Totals:         0      14       0
  3192 ;;Total ram usage:       14 bytes
  3193 ;; Hardware stack levels used:    1
  3194 ;; Hardware stack levels required when called:    7
  3195 ;; This function calls:
  3196 ;;		___lldiv
  3197 ;;		___lmul
  3198 ;; This function is called by:
  3199 ;;		_loop
  3200 ;; This function uses a non-reentrant model
  3201 ;;
  3202                           
  3203                           
  3204                           ;psect for function _getADCValue
  3205  0343                     _getADCValue:	
  3206                           
  3207                           ;incstack = 0
  3208                           ; Regs used in _getADCValue: [wreg+status,2+status,0+pclath+cstack]
  3209                           ;getADCValue@channel stored from wreg
  3210  0343  0020               	movlb	0	; select bank0
  3211  0344  00B9               	movwf	getADCValue@channel
  3212                           
  3213                           ;main.c: 22: unsigned long adcSum = 0;
  3214  0345  3000               	movlw	0
  3215  0346  00BE               	movwf	getADCValue@adcSum+3
  3216  0347  3000               	movlw	0
  3217  0348  00BD               	movwf	getADCValue@adcSum+2
  3218  0349  3000               	movlw	0
  3219  034A  00BC               	movwf	getADCValue@adcSum+1
  3220  034B  3000               	movlw	0
  3221  034C  00BB               	movwf	getADCValue@adcSum
  3222                           
  3223                           ;main.c: 23: unsigned char adcLoop = 255;
  3224  034D  30FF               	movlw	255
  3225  034E  00B5               	movwf	??_getADCValue
  3226  034F  0835               	movf	??_getADCValue,w
  3227  0350  00BA               	movwf	getADCValue@adcLoop
  3228                           
  3229                           ;main.c: 25: ADCON0bits.CHS = channel;
  3230  0351  0839               	movf	getADCValue@channel,w
  3231  0352  00B5               	movwf	??_getADCValue
  3232  0353  0DB5               	rlf	??_getADCValue,f
  3233  0354  0DB5               	rlf	??_getADCValue,f
  3234  0355  0021               	movlb	1	; select bank1
  3235  0356  081D               	movf	29,w	;volatile
  3236  0357  0020               	movlb	0	; select bank0
  3237  0358  0635               	xorwf	??_getADCValue,w
  3238  0359  3983               	andlw	-125
  3239  035A  0635               	xorwf	??_getADCValue,w
  3240  035B  0021               	movlb	1	; select bank1
  3241  035C  009D               	movwf	29	;volatile
  3242                           
  3243                           ;main.c: 26: _delay((unsigned long)((200)*(16000000/4000000.0)));
  3244  035D  30A0               	movlw	160
  3245  035E                     u1697:	
  3246  035E  3200               	nop2
  3247  035F  0B89               	decfsz	9,f
  3248  0360  2B5E               	goto	u1697
  3249  0361                     l1633:	
  3250                           ;main.c: 28: while (--adcLoop){
  3251                           
  3252  0361  3001               	movlw	1
  3253  0362  0020               	movlb	0	; select bank0
  3254  0363  02BA               	subwf	getADCValue@adcLoop,f
  3255  0364  1903               	btfsc	3,2
  3256  0365  2B8B               	goto	l1635
  3257                           
  3258                           ;main.c: 30: ADCON0bits.ADGO = 1;
  3259  0366  0021               	movlb	1	; select bank1
  3260  0367  149D               	bsf	29,1	;volatile
  3261  0368                     l149:	
  3262                           ;main.c: 31: while (ADCON0bits.ADGO){
  3263                           
  3264  0368  0021               	movlb	1	; select bank1
  3265  0369  1C9D               	btfss	29,1	;volatile
  3266  036A  2B6D               	goto	l1631
  3267                           
  3268                           ;main.c: 32: __nop();
  3269  036B  0000               	nop
  3270  036C  2B68               	goto	l149
  3271  036D                     l1631:	
  3272                           
  3273                           ;main.c: 33: }
  3274                           ;main.c: 35: adcSum+= ADRESL;
  3275  036D  081B               	movf	27,w	;volatile
  3276  036E  0020               	movlb	0	; select bank0
  3277  036F  00B5               	movwf	??_getADCValue
  3278  0370  01B6               	clrf	??_getADCValue+1
  3279  0371  01B7               	clrf	??_getADCValue+2
  3280  0372  01B8               	clrf	??_getADCValue+3
  3281  0373  0835               	movf	??_getADCValue,w
  3282  0374  07BB               	addwf	getADCValue@adcSum,f
  3283  0375  0836               	movf	??_getADCValue+1,w
  3284  0376  3DBC               	addwfc	getADCValue@adcSum+1,f
  3285  0377  0837               	movf	??_getADCValue+2,w
  3286  0378  3DBD               	addwfc	getADCValue@adcSum+2,f
  3287  0379  0838               	movf	??_getADCValue+3,w
  3288  037A  3DBE               	addwfc	getADCValue@adcSum+3,f
  3289                           
  3290                           ;main.c: 36: adcSum+= (unsigned) (ADRESH << 8);
  3291  037B  0021               	movlb	1	; select bank1
  3292  037C  081C               	movf	28,w	;volatile
  3293  037D  0020               	movlb	0	; select bank0
  3294  037E  00B5               	movwf	??_getADCValue
  3295  037F  01B6               	clrf	??_getADCValue+1
  3296  0380  0835               	movf	??_getADCValue,w
  3297  0381  00B6               	movwf	??_getADCValue+1
  3298  0382  01B5               	clrf	??_getADCValue
  3299  0383  0835               	movf	??_getADCValue,w
  3300  0384  07BB               	addwf	getADCValue@adcSum,f
  3301  0385  0836               	movf	??_getADCValue+1,w
  3302  0386  3DBC               	addwfc	getADCValue@adcSum+1,f
  3303  0387  3000               	movlw	0
  3304  0388  3DBD               	addwfc	getADCValue@adcSum+2,f
  3305  0389  3DBE               	addwfc	getADCValue@adcSum+3,f
  3306  038A  2B61               	goto	l1633
  3307  038B                     l1635:	
  3308                           
  3309                           ;main.c: 37: }
  3310                           ;main.c: 39: adcSum*= 100;
  3311  038B  3000               	movlw	0
  3312  038C  00A6               	movwf	___lmul@multiplier+3
  3313  038D  3000               	movlw	0
  3314  038E  00A5               	movwf	___lmul@multiplier+2
  3315  038F  3000               	movlw	0
  3316  0390  00A4               	movwf	___lmul@multiplier+1
  3317  0391  3064               	movlw	100
  3318  0392  00A3               	movwf	___lmul@multiplier
  3319  0393  083E               	movf	getADCValue@adcSum+3,w
  3320  0394  00AA               	movwf	___lmul@multiplicand+3
  3321  0395  083D               	movf	getADCValue@adcSum+2,w
  3322  0396  00A9               	movwf	___lmul@multiplicand+2
  3323  0397  083C               	movf	getADCValue@adcSum+1,w
  3324  0398  00A8               	movwf	___lmul@multiplicand+1
  3325  0399  083B               	movf	getADCValue@adcSum,w
  3326  039A  00A7               	movwf	___lmul@multiplicand
  3327  039B  2511               	fcall	___lmul
  3328  039C  0020               	movlb	0	; select bank0
  3329  039D  0826               	movf	?___lmul+3,w
  3330  039E  00BE               	movwf	getADCValue@adcSum+3
  3331  039F  0825               	movf	?___lmul+2,w
  3332  03A0  00BD               	movwf	getADCValue@adcSum+2
  3333  03A1  0824               	movf	?___lmul+1,w
  3334  03A2  00BC               	movwf	getADCValue@adcSum+1
  3335  03A3  0823               	movf	?___lmul,w
  3336  03A4  00BB               	movwf	getADCValue@adcSum
  3337                           
  3338                           ;main.c: 40: adcSum/= divider;
  3339  03A5  0834               	movf	getADCValue@divider+3,w
  3340  03A6  00A6               	movwf	___lldiv@divisor+3
  3341  03A7  0833               	movf	getADCValue@divider+2,w
  3342  03A8  00A5               	movwf	___lldiv@divisor+2
  3343  03A9  0832               	movf	getADCValue@divider+1,w
  3344  03AA  00A4               	movwf	___lldiv@divisor+1
  3345  03AB  0831               	movf	getADCValue@divider,w
  3346  03AC  00A3               	movwf	___lldiv@divisor
  3347  03AD  083E               	movf	getADCValue@adcSum+3,w
  3348  03AE  00AA               	movwf	___lldiv@dividend+3
  3349  03AF  083D               	movf	getADCValue@adcSum+2,w
  3350  03B0  00A9               	movwf	___lldiv@dividend+2
  3351  03B1  083C               	movf	getADCValue@adcSum+1,w
  3352  03B2  00A8               	movwf	___lldiv@dividend+1
  3353  03B3  083B               	movf	getADCValue@adcSum,w
  3354  03B4  00A7               	movwf	___lldiv@dividend
  3355  03B5  2424               	fcall	___lldiv
  3356  03B6  0020               	movlb	0	; select bank0
  3357  03B7  0826               	movf	?___lldiv+3,w
  3358  03B8  00BE               	movwf	getADCValue@adcSum+3
  3359  03B9  0825               	movf	?___lldiv+2,w
  3360  03BA  00BD               	movwf	getADCValue@adcSum+2
  3361  03BB  0824               	movf	?___lldiv+1,w
  3362  03BC  00BC               	movwf	getADCValue@adcSum+1
  3363  03BD  0823               	movf	?___lldiv,w
  3364  03BE  00BB               	movwf	getADCValue@adcSum
  3365                           
  3366                           ;main.c: 42: return adcSum;
  3367  03BF  083E               	movf	getADCValue@adcSum+3,w
  3368  03C0  00B4               	movwf	?_getADCValue+3
  3369  03C1  083D               	movf	getADCValue@adcSum+2,w
  3370  03C2  00B3               	movwf	?_getADCValue+2
  3371  03C3  083C               	movf	getADCValue@adcSum+1,w
  3372  03C4  00B2               	movwf	?_getADCValue+1
  3373  03C5  083B               	movf	getADCValue@adcSum,w
  3374  03C6  00B1               	movwf	?_getADCValue
  3375  03C7  0008               	return
  3376  03C8                     __end_of_getADCValue:	
  3377                           
  3378                           	psect	text12
  3379  0511                     __ptext12:	
  3380 ;; *************** function ___lmul *****************
  3381 ;; Defined at:
  3382 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul32.c"
  3383 ;; Parameters:    Size  Location     Type
  3384 ;;  multiplier      4    3[BANK0 ] unsigned long 
  3385 ;;  multiplicand    4    7[BANK0 ] unsigned long 
  3386 ;; Auto vars:     Size  Location     Type
  3387 ;;  product         4   11[BANK0 ] unsigned long 
  3388 ;; Return value:  Size  Location     Type
  3389 ;;                  4    3[BANK0 ] unsigned long 
  3390 ;; Registers used:
  3391 ;;		wreg, status,2, status,0
  3392 ;; Tracked objects:
  3393 ;;		On entry : 0/0
  3394 ;;		On exit  : 0/0
  3395 ;;		Unchanged: 0/0
  3396 ;; Data sizes:     COMMON   BANK0   BANK1
  3397 ;;      Params:         0       8       0
  3398 ;;      Locals:         0       4       0
  3399 ;;      Temps:          0       0       0
  3400 ;;      Totals:         0      12       0
  3401 ;;Total ram usage:       12 bytes
  3402 ;; Hardware stack levels used:    1
  3403 ;; Hardware stack levels required when called:    6
  3404 ;; This function calls:
  3405 ;;		Nothing
  3406 ;; This function is called by:
  3407 ;;		_getADCValue
  3408 ;; This function uses a non-reentrant model
  3409 ;;
  3410                           
  3411                           
  3412                           ;psect for function ___lmul
  3413  0511                     ___lmul:	
  3414                           
  3415                           ;incstack = 0
  3416                           ; Regs used in ___lmul: [wreg+status,2+status,0]
  3417  0511  3000               	movlw	0
  3418  0512  0020               	movlb	0	; select bank0
  3419  0513  00AE               	movwf	___lmul@product+3
  3420  0514  3000               	movlw	0
  3421  0515  00AD               	movwf	___lmul@product+2
  3422  0516  3000               	movlw	0
  3423  0517  00AC               	movwf	___lmul@product+1
  3424  0518  3000               	movlw	0
  3425  0519  00AB               	movwf	___lmul@product
  3426  051A                     l1535:	
  3427  051A  1C23               	btfss	___lmul@multiplier,0
  3428  051B  2D24               	goto	l1539
  3429  051C  0827               	movf	___lmul@multiplicand,w
  3430  051D  07AB               	addwf	___lmul@product,f
  3431  051E  0828               	movf	___lmul@multiplicand+1,w
  3432  051F  3DAC               	addwfc	___lmul@product+1,f
  3433  0520  0829               	movf	___lmul@multiplicand+2,w
  3434  0521  3DAD               	addwfc	___lmul@product+2,f
  3435  0522  082A               	movf	___lmul@multiplicand+3,w
  3436  0523  3DAE               	addwfc	___lmul@product+3,f
  3437  0524                     l1539:	
  3438  0524  3001               	movlw	1
  3439  0525                     u865:	
  3440  0525  35A7               	lslf	___lmul@multiplicand,f
  3441  0526  0DA8               	rlf	___lmul@multiplicand+1,f
  3442  0527  0DA9               	rlf	___lmul@multiplicand+2,f
  3443  0528  0DAA               	rlf	___lmul@multiplicand+3,f
  3444  0529  0B89               	decfsz	9,f
  3445  052A  2D25               	goto	u865
  3446  052B  3001               	movlw	1
  3447  052C                     u875:	
  3448  052C  36A6               	lsrf	___lmul@multiplier+3,f
  3449  052D  0CA5               	rrf	___lmul@multiplier+2,f
  3450  052E  0CA4               	rrf	___lmul@multiplier+1,f
  3451  052F  0CA3               	rrf	___lmul@multiplier,f
  3452  0530  0B89               	decfsz	9,f
  3453  0531  2D2C               	goto	u875
  3454  0532  0826               	movf	___lmul@multiplier+3,w
  3455  0533  0425               	iorwf	___lmul@multiplier+2,w
  3456  0534  0424               	iorwf	___lmul@multiplier+1,w
  3457  0535  0423               	iorwf	___lmul@multiplier,w
  3458  0536  1D03               	skipz
  3459  0537  2D1A               	goto	l1535
  3460  0538  082E               	movf	___lmul@product+3,w
  3461  0539  00A6               	movwf	?___lmul+3
  3462  053A  082D               	movf	___lmul@product+2,w
  3463  053B  00A5               	movwf	?___lmul+2
  3464  053C  082C               	movf	___lmul@product+1,w
  3465  053D  00A4               	movwf	?___lmul+1
  3466  053E  082B               	movf	___lmul@product,w
  3467  053F  00A3               	movwf	?___lmul
  3468  0540  0008               	return
  3469  0541                     __end_of___lmul:	
  3470                           
  3471                           	psect	text13
  3472  0424                     __ptext13:	
  3473 ;; *************** function ___lldiv *****************
  3474 ;; Defined at:
  3475 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lldiv.c"
  3476 ;; Parameters:    Size  Location     Type
  3477 ;;  divisor         4    3[BANK0 ] unsigned long 
  3478 ;;  dividend        4    7[BANK0 ] unsigned long 
  3479 ;; Auto vars:     Size  Location     Type
  3480 ;;  quotient        4   12[BANK0 ] unsigned long 
  3481 ;;  counter         1   16[BANK0 ] unsigned char 
  3482 ;; Return value:  Size  Location     Type
  3483 ;;                  4    3[BANK0 ] unsigned long 
  3484 ;; Registers used:
  3485 ;;		wreg, status,2, status,0
  3486 ;; Tracked objects:
  3487 ;;		On entry : 0/0
  3488 ;;		On exit  : 0/0
  3489 ;;		Unchanged: 0/0
  3490 ;; Data sizes:     COMMON   BANK0   BANK1
  3491 ;;      Params:         0       8       0
  3492 ;;      Locals:         0       5       0
  3493 ;;      Temps:          0       1       0
  3494 ;;      Totals:         0      14       0
  3495 ;;Total ram usage:       14 bytes
  3496 ;; Hardware stack levels used:    1
  3497 ;; Hardware stack levels required when called:    6
  3498 ;; This function calls:
  3499 ;;		Nothing
  3500 ;; This function is called by:
  3501 ;;		_getADCValue
  3502 ;; This function uses a non-reentrant model
  3503 ;;
  3504                           
  3505                           
  3506                           ;psect for function ___lldiv
  3507  0424                     ___lldiv:	
  3508                           
  3509                           ;incstack = 0
  3510                           ; Regs used in ___lldiv: [wreg+status,2+status,0]
  3511  0424  3000               	movlw	0
  3512  0425  0020               	movlb	0	; select bank0
  3513  0426  00AF               	movwf	___lldiv@quotient+3
  3514  0427  3000               	movlw	0
  3515  0428  00AE               	movwf	___lldiv@quotient+2
  3516  0429  3000               	movlw	0
  3517  042A  00AD               	movwf	___lldiv@quotient+1
  3518  042B  3000               	movlw	0
  3519  042C  00AC               	movwf	___lldiv@quotient
  3520  042D  0826               	movf	___lldiv@divisor+3,w
  3521  042E  0425               	iorwf	___lldiv@divisor+2,w
  3522  042F  0424               	iorwf	___lldiv@divisor+1,w
  3523  0430  0423               	iorwf	___lldiv@divisor,w
  3524  0431  1903               	skipnz
  3525  0432  2C6E               	goto	l1567
  3526  0433  01B0               	clrf	___lldiv@counter
  3527  0434  0AB0               	incf	___lldiv@counter,f
  3528  0435                     l1553:	
  3529  0435  1BA6               	btfsc	___lldiv@divisor+3,7
  3530  0436  2C43               	goto	l1555
  3531  0437  3001               	movlw	1
  3532  0438                     u905:	
  3533  0438  35A3               	lslf	___lldiv@divisor,f
  3534  0439  0DA4               	rlf	___lldiv@divisor+1,f
  3535  043A  0DA5               	rlf	___lldiv@divisor+2,f
  3536  043B  0DA6               	rlf	___lldiv@divisor+3,f
  3537  043C  0B89               	decfsz	9,f
  3538  043D  2C38               	goto	u905
  3539  043E  3001               	movlw	1
  3540  043F  00AB               	movwf	??___lldiv
  3541  0440  082B               	movf	??___lldiv,w
  3542  0441  07B0               	addwf	___lldiv@counter,f
  3543  0442  2C35               	goto	l1553
  3544  0443                     l1555:	
  3545  0443  3001               	movlw	1
  3546  0444                     u925:	
  3547  0444  35AC               	lslf	___lldiv@quotient,f
  3548  0445  0DAD               	rlf	___lldiv@quotient+1,f
  3549  0446  0DAE               	rlf	___lldiv@quotient+2,f
  3550  0447  0DAF               	rlf	___lldiv@quotient+3,f
  3551  0448  0B89               	decfsz	9,f
  3552  0449  2C44               	goto	u925
  3553  044A  0826               	movf	___lldiv@divisor+3,w
  3554  044B  022A               	subwf	___lldiv@dividend+3,w
  3555  044C  1D03               	skipz
  3556  044D  2C58               	goto	u935
  3557  044E  0825               	movf	___lldiv@divisor+2,w
  3558  044F  0229               	subwf	___lldiv@dividend+2,w
  3559  0450  1D03               	skipz
  3560  0451  2C58               	goto	u935
  3561  0452  0824               	movf	___lldiv@divisor+1,w
  3562  0453  0228               	subwf	___lldiv@dividend+1,w
  3563  0454  1D03               	skipz
  3564  0455  2C58               	goto	u935
  3565  0456  0823               	movf	___lldiv@divisor,w
  3566  0457  0227               	subwf	___lldiv@dividend,w
  3567  0458                     u935:	
  3568  0458  1C03               	skipc
  3569  0459  2C63               	goto	l1563
  3570  045A  0823               	movf	___lldiv@divisor,w
  3571  045B  02A7               	subwf	___lldiv@dividend,f
  3572  045C  0824               	movf	___lldiv@divisor+1,w
  3573  045D  3BA8               	subwfb	___lldiv@dividend+1,f
  3574  045E  0825               	movf	___lldiv@divisor+2,w
  3575  045F  3BA9               	subwfb	___lldiv@dividend+2,f
  3576  0460  0826               	movf	___lldiv@divisor+3,w
  3577  0461  3BAA               	subwfb	___lldiv@dividend+3,f
  3578  0462  142C               	bsf	___lldiv@quotient,0
  3579  0463                     l1563:	
  3580  0463  3001               	movlw	1
  3581  0464                     u945:	
  3582  0464  36A6               	lsrf	___lldiv@divisor+3,f
  3583  0465  0CA5               	rrf	___lldiv@divisor+2,f
  3584  0466  0CA4               	rrf	___lldiv@divisor+1,f
  3585  0467  0CA3               	rrf	___lldiv@divisor,f
  3586  0468  0B89               	decfsz	9,f
  3587  0469  2C64               	goto	u945
  3588  046A  3001               	movlw	1
  3589  046B  02B0               	subwf	___lldiv@counter,f
  3590  046C  1D03               	btfss	3,2
  3591  046D  2C43               	goto	l1555
  3592  046E                     l1567:	
  3593  046E  082F               	movf	___lldiv@quotient+3,w
  3594  046F  00A6               	movwf	?___lldiv+3
  3595  0470  082E               	movf	___lldiv@quotient+2,w
  3596  0471  00A5               	movwf	?___lldiv+2
  3597  0472  082D               	movf	___lldiv@quotient+1,w
  3598  0473  00A4               	movwf	?___lldiv+1
  3599  0474  082C               	movf	___lldiv@quotient,w
  3600  0475  00A3               	movwf	?___lldiv
  3601  0476  0008               	return
  3602  0477                     __end_of___lldiv:	
  3603                           
  3604                           	psect	text14
  3605  0662                     __ptext14:	
  3606 ;; *************** function _checkRxData *****************
  3607 ;; Defined at:
  3608 ;;		line 58 in file "main.c"
  3609 ;; Parameters:    Size  Location     Type
  3610 ;;		None
  3611 ;; Auto vars:     Size  Location     Type
  3612 ;;		None
  3613 ;; Return value:  Size  Location     Type
  3614 ;;                  1    wreg      void 
  3615 ;; Registers used:
  3616 ;;		wreg, status,2, status,0, pclath, cstack
  3617 ;; Tracked objects:
  3618 ;;		On entry : 0/0
  3619 ;;		On exit  : 0/0
  3620 ;;		Unchanged: 0/0
  3621 ;; Data sizes:     COMMON   BANK0   BANK1
  3622 ;;      Params:         0       0       0
  3623 ;;      Locals:         0       0       0
  3624 ;;      Temps:          0       0       0
  3625 ;;      Totals:         0       0       0
  3626 ;;Total ram usage:        0 bytes
  3627 ;; Hardware stack levels used:    1
  3628 ;; Hardware stack levels required when called:    9
  3629 ;; This function calls:
  3630 ;;		_nrf24l01SetRXMode
  3631 ;;		_sleep
  3632 ;; This function is called by:
  3633 ;;		_loop
  3634 ;; This function uses a non-reentrant model
  3635 ;;
  3636                           
  3637                           
  3638                           ;psect for function _checkRxData
  3639  0662                     _checkRxData:	
  3640                           
  3641                           ;main.c: 60: nrf24l01SetRXMode(1);
  3642                           
  3643                           ;incstack = 0
  3644                           ; Regs used in _checkRxData: [wreg+status,2+status,0+pclath+cstack]
  3645  0662  3001               	movlw	1
  3646  0663  24AC               	fcall	_nrf24l01SetRXMode
  3647                           
  3648                           ;main.c: 62: sleep();
  3649  0664  2616               	fcall	_sleep
  3650                           
  3651                           ;main.c: 65: return;
  3652  0665  0008               	return
  3653  0666                     __end_of_checkRxData:	
  3654                           
  3655                           	psect	text15
  3656  0616                     __ptext15:	
  3657 ;; *************** function _sleep *****************
  3658 ;; Defined at:
  3659 ;;		line 45 in file "main.c"
  3660 ;; Parameters:    Size  Location     Type
  3661 ;;		None
  3662 ;; Auto vars:     Size  Location     Type
  3663 ;;		None
  3664 ;; Return value:  Size  Location     Type
  3665 ;;                  1    wreg      void 
  3666 ;; Registers used:
  3667 ;;		None
  3668 ;; Tracked objects:
  3669 ;;		On entry : 0/0
  3670 ;;		On exit  : 0/0
  3671 ;;		Unchanged: 0/0
  3672 ;; Data sizes:     COMMON   BANK0   BANK1
  3673 ;;      Params:         0       0       0
  3674 ;;      Locals:         0       0       0
  3675 ;;      Temps:          0       0       0
  3676 ;;      Totals:         0       0       0
  3677 ;;Total ram usage:        0 bytes
  3678 ;; Hardware stack levels used:    1
  3679 ;; Hardware stack levels required when called:    6
  3680 ;; This function calls:
  3681 ;;		Nothing
  3682 ;; This function is called by:
  3683 ;;		_checkRxData
  3684 ;;		_loop
  3685 ;;		_main
  3686 ;; This function uses a non-reentrant model
  3687 ;;
  3688                           
  3689                           
  3690                           ;psect for function _sleep
  3691  0616                     _sleep:	
  3692  0616                     l156:	
  3693                           ;incstack = 0
  3694                           ; Regs used in _sleep: []
  3695                           ;main.c: 46: while (1){
  3696                           
  3697  0616  0063               	sleep	;# 
  3698                           
  3699                           ;main.c: 49: __nop();
  3700  0617  0000               	nop
  3701                           
  3702                           ;main.c: 50: __nop();
  3703  0618  0000               	nop
  3704                           
  3705                           ;main.c: 52: if (!STATUSbits.nTO && !STATUSbits.nPD) {
  3706  0619  0020               	movlb	0	; select bank0
  3707  061A  1A03               	btfsc	3,4	;volatile
  3708  061B  2E16               	goto	l156
  3709  061C  1D83               	btfss	3,3	;volatile
  3710  061D  0008               	return
  3711  061E  2E16               	goto	l156
  3712  061F                     __end_of_sleep:	
  3713                           ;main.c: 53: return;
  3714                           
  3715                           
  3716                           	psect	intentry
  3717  0004                     __pintentry:	
  3718 ;; *************** function _ISR *****************
  3719 ;; Defined at:
  3720 ;;		line 13 in file "main.c"
  3721 ;; Parameters:    Size  Location     Type
  3722 ;;		None
  3723 ;; Auto vars:     Size  Location     Type
  3724 ;;		None
  3725 ;; Return value:  Size  Location     Type
  3726 ;;                  1    wreg      void 
  3727 ;; Registers used:
  3728 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3729 ;; Tracked objects:
  3730 ;;		On entry : 0/0
  3731 ;;		On exit  : 0/0
  3732 ;;		Unchanged: 0/0
  3733 ;; Data sizes:     COMMON   BANK0   BANK1
  3734 ;;      Params:         0       0       0
  3735 ;;      Locals:         0       0       0
  3736 ;;      Temps:          0       1       0
  3737 ;;      Totals:         0       1       0
  3738 ;;Total ram usage:        1 bytes
  3739 ;; Hardware stack levels used:    1
  3740 ;; Hardware stack levels required when called:    5
  3741 ;; This function calls:
  3742 ;;		_nrf24l01ISR
  3743 ;; This function is called by:
  3744 ;;		Interrupt level 1
  3745 ;; This function uses a non-reentrant model
  3746 ;;
  3747                           
  3748  0004                     _ISR:	
  3749                           
  3750                           ;incstack = 0
  3751  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
  3752                           
  3753                           ; Regs used in _ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3754  0005  3180               	pagesel	$
  3755  0006  0020               	movlb	0	; select bank0
  3756  0007  087F               	movf	127,w
  3757  0008  00A2               	movwf	??_ISR
  3758                           
  3759                           ;main.c: 14: if (INTCONbits.INTF){
  3760  0009  1C8B               	btfss	11,1	;volatile
  3761  000A  280D               	goto	i1l144
  3762                           
  3763                           ;main.c: 15: nrf24l01ISR();
  3764  000B  2595               	fcall	_nrf24l01ISR
  3765                           
  3766                           ;main.c: 16: INTCONbits.INTF = 0;
  3767  000C  108B               	bcf	11,1	;volatile
  3768  000D                     i1l144:	
  3769  000D  0020               	movlb	0	; select bank0
  3770  000E  0822               	movf	??_ISR,w
  3771  000F  00FF               	movwf	127
  3772  0010  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
  3773  0011  0009               	retfie
  3774  0012                     __end_of_ISR:	
  3775                           
  3776                           	psect	text17
  3777  0595                     __ptext17:	
  3778 ;; *************** function _nrf24l01ISR *****************
  3779 ;; Defined at:
  3780 ;;		line 238 in file "nrf24l01.c"
  3781 ;; Parameters:    Size  Location     Type
  3782 ;;		None
  3783 ;; Auto vars:     Size  Location     Type
  3784 ;;  status          1    1[BANK0 ] struct .
  3785 ;; Return value:  Size  Location     Type
  3786 ;;                  1    wreg      void 
  3787 ;; Registers used:
  3788 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3789 ;; Tracked objects:
  3790 ;;		On entry : 0/0
  3791 ;;		On exit  : 0/0
  3792 ;;		Unchanged: 0/0
  3793 ;; Data sizes:     COMMON   BANK0   BANK1
  3794 ;;      Params:         0       0       0
  3795 ;;      Locals:         0       1       0
  3796 ;;      Temps:          1       0       0
  3797 ;;      Totals:         1       1       0
  3798 ;;Total ram usage:        2 bytes
  3799 ;; Hardware stack levels used:    1
  3800 ;; Hardware stack levels required when called:    4
  3801 ;; This function calls:
  3802 ;;		_nrf24l01ReceiveString
  3803 ;;		_nrf24l01Send
  3804 ;;		_nrf24l01SetRXMode
  3805 ;; This function is called by:
  3806 ;;		_ISR
  3807 ;; This function uses a non-reentrant model
  3808 ;;
  3809                           
  3810                           
  3811                           ;psect for function _nrf24l01ISR
  3812  0595                     _nrf24l01ISR:	
  3813                           
  3814                           ;nrf24l01.c: 240: n_STATUS_t status;
  3815                           ;nrf24l01.c: 241: status.byte = nrf24l01Send(0b00000000 | 0x07, 0);
  3816                           
  3817                           ;incstack = 0
  3818                           ; Regs used in _nrf24l01ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3819  0595  0020               	movlb	0	; select bank0
  3820  0596  01A0               	clrf	nrf24l01Send@data
  3821  0597  3007               	movlw	7
  3822  0598  25EA               	fcall	_nrf24l01Send
  3823  0599  00FD               	movwf	??_nrf24l01ISR
  3824  059A  087D               	movf	??_nrf24l01ISR,w
  3825  059B  0020               	movlb	0	; select bank0
  3826  059C  00A1               	movwf	nrf24l01ISR@status
  3827                           
  3828                           ;nrf24l01.c: 245: if (status.byte == 0x00){
  3829  059D  0821               	movf	nrf24l01ISR@status,w
  3830  059E  1903               	btfsc	3,2
  3831  059F  0001               	reset	;# 
  3832                           
  3833                           ;nrf24l01.c: 248: }
  3834                           ;nrf24l01.c: 251: if (status.byte == 0xFF){
  3835  05A0  0020               	movlb	0	; select bank0
  3836  05A1  0A21               	incf	nrf24l01ISR@status,w
  3837  05A2  1903               	btfsc	3,2
  3838  05A3  0001               	reset	;# 
  3839                           
  3840                           ;nrf24l01.c: 254: }
  3841                           ;nrf24l01.c: 256: if (status.TX_DS){
  3842  05A4  0020               	movlb	0	; select bank0
  3843  05A5  1EA1               	btfss	nrf24l01ISR@status,5
  3844  05A6  2DAD               	goto	i1l1987
  3845                           
  3846                           ;nrf24l01.c: 259: nrf24l01.TXBusy = 0;
  3847  05A7  10CC               	bcf	_nrf24l01,1	;volatile
  3848                           
  3849                           ;nrf24l01.c: 262: if (!nrf24l01.RXMode){
  3850  05A8  1DCC               	btfss	_nrf24l01,3	;volatile
  3851                           
  3852                           ;nrf24l01.c: 263: if (nrf24l01.waitForTXACK){
  3853  05A9  1C4C               	btfss	_nrf24l01,0	;volatile
  3854  05AA  2DAD               	goto	i1l1987
  3855                           
  3856                           ;nrf24l01.c: 265: nrf24l01SetRXMode(1);
  3857  05AB  3001               	movlw	1
  3858  05AC  24AC               	fcall	_nrf24l01SetRXMode
  3859  05AD                     i1l1987:	
  3860                           
  3861                           ;nrf24l01.c: 266: }
  3862                           ;nrf24l01.c: 267: }
  3863                           ;nrf24l01.c: 268: }
  3864                           ;nrf24l01.c: 271: if (status.RX_DR){
  3865  05AD  0020               	movlb	0	; select bank0
  3866  05AE  1F21               	btfss	nrf24l01ISR@status,6
  3867  05AF  2DB1               	goto	i1l1991
  3868                           
  3869                           ;nrf24l01.c: 273: nrf24l01ReceiveString();
  3870  05B0  2022               	fcall	_nrf24l01ReceiveString
  3871  05B1                     i1l1991:	
  3872                           
  3873                           ;nrf24l01.c: 274: }
  3874                           ;nrf24l01.c: 277: nrf24l01Send(0b00100000 | 0x07, status.byte);
  3875  05B1  0020               	movlb	0	; select bank0
  3876  05B2  0821               	movf	nrf24l01ISR@status,w
  3877  05B3  00FD               	movwf	??_nrf24l01ISR
  3878  05B4  087D               	movf	??_nrf24l01ISR,w
  3879  05B5  00A0               	movwf	nrf24l01Send@data
  3880  05B6  3027               	movlw	39
  3881  05B7  25EA               	fcall	_nrf24l01Send
  3882  05B8  0008               	return
  3883  05B9                     __end_of_nrf24l01ISR:	
  3884                           
  3885                           	psect	text18
  3886  0022                     __ptext18:	
  3887 ;; *************** function _nrf24l01ReceiveString *****************
  3888 ;; Defined at:
  3889 ;;		line 84 in file "nrf24l01.c"
  3890 ;; Parameters:    Size  Location     Type
  3891 ;;		None
  3892 ;; Auto vars:     Size  Location     Type
  3893 ;;  i               1   12[COMMON] unsigned char 
  3894 ;;  byte            1   11[COMMON] unsigned char 
  3895 ;;  offset          1   10[COMMON] unsigned char 
  3896 ;;  width           1    9[COMMON] unsigned char 
  3897 ;; Return value:  Size  Location     Type
  3898 ;;                  1    wreg      void 
  3899 ;; Registers used:
  3900 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3901 ;; Tracked objects:
  3902 ;;		On entry : 0/0
  3903 ;;		On exit  : 0/0
  3904 ;;		Unchanged: 0/0
  3905 ;; Data sizes:     COMMON   BANK0   BANK1
  3906 ;;      Params:         0       0       0
  3907 ;;      Locals:         4       0       0
  3908 ;;      Temps:          3       0       0
  3909 ;;      Totals:         7       0       0
  3910 ;;Total ram usage:        7 bytes
  3911 ;; Hardware stack levels used:    1
  3912 ;; Hardware stack levels required when called:    3
  3913 ;; This function calls:
  3914 ;;		_nrf24l01SPIEnd
  3915 ;;		_nrf24l01SPISend
  3916 ;;		_nrf24l01SPIStart
  3917 ;;		_nrf24l01Send
  3918 ;;		_nrf24l01SetRXMode
  3919 ;;		_strcmp
  3920 ;; This function is called by:
  3921 ;;		_nrf24l01ISR
  3922 ;; This function uses a non-reentrant model
  3923 ;;
  3924                           
  3925                           
  3926                           ;psect for function _nrf24l01ReceiveString
  3927  0022                     _nrf24l01ReceiveString:	
  3928                           
  3929                           ;nrf24l01.c: 87: unsigned char byte;
  3930                           ;nrf24l01.c: 88: unsigned char i;
  3931                           ;nrf24l01.c: 89: unsigned char offset = 0;
  3932                           
  3933                           ;incstack = 0
  3934                           ; Regs used in _nrf24l01ReceiveString: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3935  0022  01FA               	clrf	nrf24l01ReceiveString@offset
  3936                           
  3937                           ;nrf24l01.c: 91: nrf24l01.RXPending = 1;
  3938  0023  0020               	movlb	0	; select bank0
  3939  0024  154C               	bsf	_nrf24l01,2	;volatile
  3940                           
  3941                           ;nrf24l01.c: 93: for (i = 0; i < sizeof(nrf24l01RXTopic); i++){
  3942  0025  01FC               	clrf	nrf24l01ReceiveString@i
  3943  0026  3008               	movlw	8
  3944  0027  027C               	subwf	nrf24l01ReceiveString@i,w
  3945  0028  1803               	btfsc	3,0
  3946  0029  2837               	goto	i1l1769
  3947  002A                     i1l1763:	
  3948                           
  3949                           ;nrf24l01.c: 94: nrf24l01RXTopic[i] = '\0';
  3950  002A  087C               	movf	nrf24l01ReceiveString@i,w
  3951  002B  3E55               	addlw	(low (_nrf24l01RXTopic| 0))& (0+255)
  3952  002C  0086               	movwf	6
  3953  002D  0187               	clrf	7
  3954  002E  0181               	clrf	1
  3955  002F  3001               	movlw	1
  3956  0030  00F6               	movwf	??_nrf24l01ReceiveString
  3957  0031  0876               	movf	??_nrf24l01ReceiveString,w
  3958  0032  07FC               	addwf	nrf24l01ReceiveString@i,f
  3959  0033  3008               	movlw	8
  3960  0034  027C               	subwf	nrf24l01ReceiveString@i,w
  3961  0035  1C03               	skipc
  3962  0036  282A               	goto	i1l1763
  3963  0037                     i1l1769:	
  3964                           
  3965                           ;nrf24l01.c: 95: }
  3966                           ;nrf24l01.c: 96: for (i = 0; i < sizeof(nrf24l01RXValue); i++){
  3967  0037  01FC               	clrf	nrf24l01ReceiveString@i
  3968  0038  3008               	movlw	8
  3969  0039  027C               	subwf	nrf24l01ReceiveString@i,w
  3970  003A  1803               	btfsc	3,0
  3971  003B  2849               	goto	i1l1781
  3972  003C                     i1l1775:	
  3973                           
  3974                           ;nrf24l01.c: 97: nrf24l01RXValue[i] = '\0';
  3975  003C  087C               	movf	nrf24l01ReceiveString@i,w
  3976  003D  3E4D               	addlw	(low (_nrf24l01RXValue| 0))& (0+255)
  3977  003E  0086               	movwf	6
  3978  003F  0187               	clrf	7
  3979  0040  0181               	clrf	1
  3980  0041  3001               	movlw	1
  3981  0042  00F6               	movwf	??_nrf24l01ReceiveString
  3982  0043  0876               	movf	??_nrf24l01ReceiveString,w
  3983  0044  07FC               	addwf	nrf24l01ReceiveString@i,f
  3984  0045  3008               	movlw	8
  3985  0046  027C               	subwf	nrf24l01ReceiveString@i,w
  3986  0047  1C03               	skipc
  3987  0048  283C               	goto	i1l1775
  3988  0049                     i1l1781:	
  3989                           
  3990                           ;nrf24l01.c: 98: }
  3991                           ;nrf24l01.c: 100: unsigned char width = nrf24l01Send(0b01100000, 0);
  3992  0049  0020               	movlb	0	; select bank0
  3993  004A  01A0               	clrf	nrf24l01Send@data
  3994  004B  3060               	movlw	96
  3995  004C  25EA               	fcall	_nrf24l01Send
  3996  004D  00F6               	movwf	??_nrf24l01ReceiveString
  3997  004E  0876               	movf	??_nrf24l01ReceiveString,w
  3998  004F  00F9               	movwf	nrf24l01ReceiveString@width
  3999                           
  4000                           ;nrf24l01.c: 102: PORTAbits.RA0 = 0;
  4001  0050  0020               	movlb	0	; select bank0
  4002  0051  100C               	bcf	12,0	;volatile
  4003                           
  4004                           ;nrf24l01.c: 104: nrf24l01SPIStart();
  4005  0052  261F               	fcall	_nrf24l01SPIStart
  4006                           
  4007                           ;nrf24l01.c: 106: nrf24l01SPISend(0b01100001);
  4008  0053  3061               	movlw	97
  4009  0054  260B               	fcall	_nrf24l01SPISend
  4010                           
  4011                           ;nrf24l01.c: 108: for (i = 0; (i < sizeof(nrf24l01Name)) && (offset + i < width) ; i++){
  4012  0055  01FC               	clrf	nrf24l01ReceiveString@i
  4013  0056  2873               	goto	i1l1799
  4014  0057                     i1l1787:	
  4015                           
  4016                           ;nrf24l01.c: 110: byte = nrf24l01SPISend(0);
  4017  0057  3000               	movlw	0
  4018  0058  260B               	fcall	_nrf24l01SPISend
  4019  0059  00F6               	movwf	??_nrf24l01ReceiveString
  4020  005A  0876               	movf	??_nrf24l01ReceiveString,w
  4021  005B  00FB               	movwf	nrf24l01ReceiveString@byte
  4022                           
  4023                           ;nrf24l01.c: 112: if (byte == '/'){
  4024  005C  302F               	movlw	47
  4025  005D  067B               	xorwf	nrf24l01ReceiveString@byte,w
  4026  005E  1D03               	btfss	3,2
  4027  005F  2865               	goto	i1l1793
  4028                           
  4029                           ;nrf24l01.c: 113: offset++;
  4030  0060  3001               	movlw	1
  4031  0061  00F6               	movwf	??_nrf24l01ReceiveString
  4032  0062  0876               	movf	??_nrf24l01ReceiveString,w
  4033  0063  07FA               	addwf	nrf24l01ReceiveString@offset,f
  4034                           
  4035                           ;nrf24l01.c: 114: break;
  4036  0064  2887               	goto	i1l1803
  4037  0065                     i1l1793:	
  4038                           
  4039                           ;nrf24l01.c: 115: }
  4040                           ;nrf24l01.c: 117: if (nrf24l01Name[i] != byte){
  4041  0065  087C               	movf	nrf24l01ReceiveString@i,w
  4042  0066  3EA0               	addlw	(low (_nrf24l01Name| 0))& (0+255)
  4043  0067  0086               	movwf	6
  4044  0068  0187               	clrf	7
  4045  0069  0801               	movf	1,w
  4046  006A  067B               	xorwf	nrf24l01ReceiveString@byte,w
  4047  006B  1903               	skipnz
  4048  006C  286F               	goto	i1l1797
  4049                           
  4050                           ;nrf24l01.c: 118: nrf24l01.RXPending = 0;
  4051  006D  0020               	movlb	0	; select bank0
  4052  006E  114C               	bcf	_nrf24l01,2	;volatile
  4053  006F                     i1l1797:	
  4054  006F  3001               	movlw	1
  4055  0070  00F6               	movwf	??_nrf24l01ReceiveString
  4056  0071  0876               	movf	??_nrf24l01ReceiveString,w
  4057  0072  07FC               	addwf	nrf24l01ReceiveString@i,f
  4058  0073                     i1l1799:	
  4059  0073  3010               	movlw	16
  4060  0074  027C               	subwf	nrf24l01ReceiveString@i,w
  4061  0075  1803               	skipnc
  4062  0076  2887               	goto	i1l1803
  4063  0077  087A               	movf	nrf24l01ReceiveString@offset,w
  4064  0078  077C               	addwf	nrf24l01ReceiveString@i,w
  4065  0079  00F6               	movwf	??_nrf24l01ReceiveString
  4066  007A  01F7               	clrf	??_nrf24l01ReceiveString+1
  4067  007B  0DF7               	rlf	??_nrf24l01ReceiveString+1,f
  4068  007C  0877               	movf	??_nrf24l01ReceiveString+1,w
  4069  007D  3A80               	xorlw	128
  4070  007E  00F8               	movwf	??_nrf24l01ReceiveString+2
  4071  007F  3080               	movlw	128
  4072  0080  0278               	subwf	??_nrf24l01ReceiveString+2,w
  4073  0081  1D03               	skipz
  4074  0082  2885               	goto	u133_25
  4075  0083  0879               	movf	nrf24l01ReceiveString@width,w
  4076  0084  0276               	subwf	??_nrf24l01ReceiveString,w
  4077  0085                     u133_25:	
  4078  0085  1C03               	skipc
  4079  0086  2857               	goto	i1l1787
  4080  0087                     i1l1803:	
  4081                           
  4082                           ;nrf24l01.c: 119: }
  4083                           ;nrf24l01.c: 120: }
  4084                           ;nrf24l01.c: 121: offset+= i;
  4085  0087  087C               	movf	nrf24l01ReceiveString@i,w
  4086  0088  00F6               	movwf	??_nrf24l01ReceiveString
  4087  0089  0876               	movf	??_nrf24l01ReceiveString,w
  4088  008A  07FA               	addwf	nrf24l01ReceiveString@offset,f
  4089                           
  4090                           ;nrf24l01.c: 123: for (i = 0; (i < sizeof(nrf24l01RXTopic)) && (offset + i < width) ; i+
      +                          +){
  4091  008B  01FC               	clrf	nrf24l01ReceiveString@i
  4092  008C  28A7               	goto	i1l1817
  4093  008D                     i1l1807:	
  4094                           
  4095                           ;nrf24l01.c: 125: byte = nrf24l01SPISend(0);
  4096  008D  3000               	movlw	0
  4097  008E  260B               	fcall	_nrf24l01SPISend
  4098  008F  00F6               	movwf	??_nrf24l01ReceiveString
  4099  0090  0876               	movf	??_nrf24l01ReceiveString,w
  4100  0091  00FB               	movwf	nrf24l01ReceiveString@byte
  4101                           
  4102                           ;nrf24l01.c: 126: if (byte == '/'){
  4103  0092  302F               	movlw	47
  4104  0093  067B               	xorwf	nrf24l01ReceiveString@byte,w
  4105  0094  1D03               	btfss	3,2
  4106  0095  289B               	goto	i1l1813
  4107                           
  4108                           ;nrf24l01.c: 127: offset++;
  4109  0096  3001               	movlw	1
  4110  0097  00F6               	movwf	??_nrf24l01ReceiveString
  4111  0098  0876               	movf	??_nrf24l01ReceiveString,w
  4112  0099  07FA               	addwf	nrf24l01ReceiveString@offset,f
  4113                           
  4114                           ;nrf24l01.c: 128: break;
  4115  009A  28BB               	goto	i1l1821
  4116  009B                     i1l1813:	
  4117                           
  4118                           ;nrf24l01.c: 129: }
  4119                           ;nrf24l01.c: 131: nrf24l01RXTopic[i] = byte;
  4120  009B  087B               	movf	nrf24l01ReceiveString@byte,w
  4121  009C  00F6               	movwf	??_nrf24l01ReceiveString
  4122  009D  087C               	movf	nrf24l01ReceiveString@i,w
  4123  009E  3E55               	addlw	(low (_nrf24l01RXTopic| 0))& (0+255)
  4124  009F  0086               	movwf	6
  4125  00A0  0187               	clrf	7
  4126  00A1  0876               	movf	??_nrf24l01ReceiveString,w
  4127  00A2  0081               	movwf	1
  4128  00A3  3001               	movlw	1
  4129  00A4  00F6               	movwf	??_nrf24l01ReceiveString
  4130  00A5  0876               	movf	??_nrf24l01ReceiveString,w
  4131  00A6  07FC               	addwf	nrf24l01ReceiveString@i,f
  4132  00A7                     i1l1817:	
  4133  00A7  3008               	movlw	8
  4134  00A8  027C               	subwf	nrf24l01ReceiveString@i,w
  4135  00A9  1803               	skipnc
  4136  00AA  28BB               	goto	i1l1821
  4137  00AB  087A               	movf	nrf24l01ReceiveString@offset,w
  4138  00AC  077C               	addwf	nrf24l01ReceiveString@i,w
  4139  00AD  00F6               	movwf	??_nrf24l01ReceiveString
  4140  00AE  01F7               	clrf	??_nrf24l01ReceiveString+1
  4141  00AF  0DF7               	rlf	??_nrf24l01ReceiveString+1,f
  4142  00B0  0877               	movf	??_nrf24l01ReceiveString+1,w
  4143  00B1  3A80               	xorlw	128
  4144  00B2  00F8               	movwf	??_nrf24l01ReceiveString+2
  4145  00B3  3080               	movlw	128
  4146  00B4  0278               	subwf	??_nrf24l01ReceiveString+2,w
  4147  00B5  1D03               	skipz
  4148  00B6  28B9               	goto	u136_25
  4149  00B7  0879               	movf	nrf24l01ReceiveString@width,w
  4150  00B8  0276               	subwf	??_nrf24l01ReceiveString,w
  4151  00B9                     u136_25:	
  4152  00B9  1C03               	skipc
  4153  00BA  288D               	goto	i1l1807
  4154  00BB                     i1l1821:	
  4155                           
  4156                           ;nrf24l01.c: 132: }
  4157                           ;nrf24l01.c: 133: offset+= i;
  4158  00BB  087C               	movf	nrf24l01ReceiveString@i,w
  4159  00BC  00F6               	movwf	??_nrf24l01ReceiveString
  4160  00BD  0876               	movf	??_nrf24l01ReceiveString,w
  4161  00BE  07FA               	addwf	nrf24l01ReceiveString@offset,f
  4162                           
  4163                           ;nrf24l01.c: 136: for (i = 0; (i < sizeof(nrf24l01RXValue)) && (offset + i < width) ; i+
      +                          +){
  4164  00BF  01FC               	clrf	nrf24l01ReceiveString@i
  4165  00C0  28CE               	goto	i1l1829
  4166  00C1                     i1l1825:	
  4167                           
  4168                           ;nrf24l01.c: 137: nrf24l01RXValue[i] = nrf24l01SPISend(0);
  4169  00C1  3000               	movlw	0
  4170  00C2  260B               	fcall	_nrf24l01SPISend
  4171  00C3  00F6               	movwf	??_nrf24l01ReceiveString
  4172  00C4  087C               	movf	nrf24l01ReceiveString@i,w
  4173  00C5  3E4D               	addlw	(low (_nrf24l01RXValue| 0))& (0+255)
  4174  00C6  0086               	movwf	6
  4175  00C7  0187               	clrf	7
  4176  00C8  0876               	movf	??_nrf24l01ReceiveString,w
  4177  00C9  0081               	movwf	1
  4178  00CA  3001               	movlw	1
  4179  00CB  00F6               	movwf	??_nrf24l01ReceiveString
  4180  00CC  0876               	movf	??_nrf24l01ReceiveString,w
  4181  00CD  07FC               	addwf	nrf24l01ReceiveString@i,f
  4182  00CE                     i1l1829:	
  4183  00CE  3008               	movlw	8
  4184  00CF  027C               	subwf	nrf24l01ReceiveString@i,w
  4185  00D0  1803               	skipnc
  4186  00D1  28E2               	goto	i1l1833
  4187  00D2  087A               	movf	nrf24l01ReceiveString@offset,w
  4188  00D3  077C               	addwf	nrf24l01ReceiveString@i,w
  4189  00D4  00F6               	movwf	??_nrf24l01ReceiveString
  4190  00D5  01F7               	clrf	??_nrf24l01ReceiveString+1
  4191  00D6  0DF7               	rlf	??_nrf24l01ReceiveString+1,f
  4192  00D7  0877               	movf	??_nrf24l01ReceiveString+1,w
  4193  00D8  3A80               	xorlw	128
  4194  00D9  00F8               	movwf	??_nrf24l01ReceiveString+2
  4195  00DA  3080               	movlw	128
  4196  00DB  0278               	subwf	??_nrf24l01ReceiveString+2,w
  4197  00DC  1D03               	skipz
  4198  00DD  28E0               	goto	u138_25
  4199  00DE  0879               	movf	nrf24l01ReceiveString@width,w
  4200  00DF  0276               	subwf	??_nrf24l01ReceiveString,w
  4201  00E0                     u138_25:	
  4202  00E0  1C03               	skipc
  4203  00E1  28C1               	goto	i1l1825
  4204  00E2                     i1l1833:	
  4205                           
  4206                           ;nrf24l01.c: 138: }
  4207                           ;nrf24l01.c: 140: nrf24l01SPIEnd();
  4208  00E2  2626               	fcall	_nrf24l01SPIEnd
  4209                           
  4210                           ;nrf24l01.c: 142: if (nrf24l01.waitForTXACK){
  4211  00E3  0020               	movlb	0	; select bank0
  4212  00E4  1C4C               	btfss	_nrf24l01,0	;volatile
  4213  00E5  0008               	return
  4214                           
  4215                           ;nrf24l01.c: 143: if (strcmp(nrf24l01RXTopic, nrf24l01TXTopic) == 0){
  4216  00E6  3065               	movlw	low _nrf24l01TXTopic
  4217  00E7  00F0               	movwf	strcmp@s2
  4218  00E8  3000               	movlw	high _nrf24l01TXTopic
  4219  00E9  00F1               	movwf	strcmp@s2+1
  4220  00EA  3055               	movlw	(low (_nrf24l01RXTopic| 0))& (0+255)
  4221  00EB  256E               	fcall	_strcmp
  4222  00EC  0870               	movf	?_strcmp,w
  4223  00ED  0471               	iorwf	?_strcmp+1,w
  4224  00EE  1D03               	btfss	3,2
  4225  00EF  0008               	return
  4226                           
  4227                           ;nrf24l01.c: 144: if (strcmp(nrf24l01RXValue, "ACK") == 0){
  4228  00F0  305A               	movlw	low (STR_7| (0+32768))
  4229  00F1  00F0               	movwf	strcmp@s2
  4230  00F2  3086               	movlw	high (STR_7| (0+32768))
  4231  00F3  00F1               	movwf	strcmp@s2+1
  4232  00F4  304D               	movlw	(low (_nrf24l01RXValue| 0))& (0+255)
  4233  00F5  256E               	fcall	_strcmp
  4234  00F6  0870               	movf	?_strcmp,w
  4235  00F7  0471               	iorwf	?_strcmp+1,w
  4236  00F8  1D03               	btfss	3,2
  4237  00F9  0008               	return
  4238                           
  4239                           ;nrf24l01.c: 145: nrf24l01.waitForTXACK = 0;
  4240  00FA  0020               	movlb	0	; select bank0
  4241  00FB  104C               	bcf	_nrf24l01,0	;volatile
  4242                           
  4243                           ;nrf24l01.c: 146: nrf24l01.RXPending = 0;
  4244  00FC  114C               	bcf	_nrf24l01,2	;volatile
  4245                           
  4246                           ;nrf24l01.c: 147: nrf24l01SetRXMode(0);
  4247  00FD  3000               	movlw	0
  4248  00FE  24AC               	fcall	_nrf24l01SetRXMode
  4249  00FF  0008               	return
  4250  0100                     __end_of_nrf24l01ReceiveString:	
  4251                           
  4252                           	psect	text19
  4253  056E                     __ptext19:	
  4254 ;; *************** function _strcmp *****************
  4255 ;; Defined at:
  4256 ;;		line 33 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\strcmp.c"
  4257 ;; Parameters:    Size  Location     Type
  4258 ;;  s1              1    wreg     PTR const unsigned char 
  4259 ;;		 -> nrf24l01RXValue(8), nrf24l01RXTopic(8), 
  4260 ;;  s2              2    0[COMMON] PTR const unsigned char 
  4261 ;;		 -> STR_7(4), nrf24l01TXTopic(8), 
  4262 ;; Auto vars:     Size  Location     Type
  4263 ;;  s1              1    4[COMMON] PTR const unsigned char 
  4264 ;;		 -> nrf24l01RXValue(8), nrf24l01RXTopic(8), 
  4265 ;;  r               1    3[COMMON] char 
  4266 ;; Return value:  Size  Location     Type
  4267 ;;                  2    0[COMMON] int 
  4268 ;; Registers used:
  4269 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath
  4270 ;; Tracked objects:
  4271 ;;		On entry : 0/0
  4272 ;;		On exit  : 0/0
  4273 ;;		Unchanged: 0/0
  4274 ;; Data sizes:     COMMON   BANK0   BANK1
  4275 ;;      Params:         2       0       0
  4276 ;;      Locals:         2       0       0
  4277 ;;      Temps:          1       0       0
  4278 ;;      Totals:         5       0       0
  4279 ;;Total ram usage:        5 bytes
  4280 ;; Hardware stack levels used:    1
  4281 ;; This function calls:
  4282 ;;		Nothing
  4283 ;; This function is called by:
  4284 ;;		_nrf24l01ReceiveString
  4285 ;; This function uses a non-reentrant model
  4286 ;;
  4287                           
  4288                           
  4289                           ;psect for function _strcmp
  4290  056E                     _strcmp:	
  4291                           
  4292                           ;incstack = 0
  4293                           ; Regs used in _strcmp: [wreg-fsr1h+status,2+status,0+pclath]
  4294                           ;strcmp@s1 stored from wreg
  4295  056E  00F4               	movwf	strcmp@s1
  4296  056F  2D78               	goto	i1l1525
  4297  0570                     i1l1523:	
  4298  0570  3001               	movlw	1
  4299  0571  00F2               	movwf	??_strcmp
  4300  0572  0872               	movf	??_strcmp,w
  4301  0573  07F4               	addwf	strcmp@s1,f
  4302  0574  3001               	movlw	1
  4303  0575  07F0               	addwf	strcmp@s2,f
  4304  0576  3000               	movlw	0
  4305  0577  3DF1               	addwfc	strcmp@s2+1,f
  4306  0578                     i1l1525:	
  4307  0578  0874               	movf	strcmp@s1,w
  4308  0579  0086               	movwf	6
  4309  057A  0187               	clrf	7
  4310  057B  0870               	movf	strcmp@s2,w
  4311  057C  0084               	movwf	4
  4312  057D  0871               	movf	strcmp@s2+1,w
  4313  057E  0085               	movwf	5
  4314  057F  0800               	movf	0,w	;code access
  4315  0580  3AFF               	xorlw	255
  4316  0581  3E01               	addlw	1
  4317  0582  0701               	addwf	1,w
  4318  0583  00F2               	movwf	??_strcmp
  4319  0584  0872               	movf	??_strcmp,w
  4320  0585  00F3               	movwf	strcmp@r
  4321  0586  0873               	movf	strcmp@r,w
  4322  0587  1D03               	btfss	3,2
  4323  0588  2D8F               	goto	i1l1529
  4324  0589  0874               	movf	strcmp@s1,w
  4325  058A  0086               	movwf	6
  4326  058B  0187               	clrf	7
  4327  058C  0801               	movf	1,w
  4328  058D  1D03               	btfss	3,2
  4329  058E  2D70               	goto	i1l1523
  4330  058F                     i1l1529:	
  4331  058F  0873               	movf	strcmp@r,w
  4332  0590  00F0               	movwf	?_strcmp
  4333  0591  01F1               	clrf	?_strcmp+1
  4334  0592  1BF0               	btfsc	?_strcmp,7
  4335  0593  03F1               	decf	?_strcmp+1,f
  4336  0594  0008               	return
  4337  0595                     __end_of_strcmp:	
  4338                           
  4339                           	psect	text20
  4340  04AC                     __ptext20:	
  4341 ;; *************** function _nrf24l01SetRXMode *****************
  4342 ;; Defined at:
  4343 ;;		line 57 in file "nrf24l01.c"
  4344 ;; Parameters:    Size  Location     Type
  4345 ;;  rxMode          1    wreg     unsigned char 
  4346 ;; Auto vars:     Size  Location     Type
  4347 ;;  rxMode          1    5[COMMON] unsigned char 
  4348 ;;  config          1    4[COMMON] struct .
  4349 ;; Return value:  Size  Location     Type
  4350 ;;                  1    wreg      void 
  4351 ;; Registers used:
  4352 ;;		wreg, status,2, status,0, pclath, cstack
  4353 ;; Tracked objects:
  4354 ;;		On entry : 0/0
  4355 ;;		On exit  : 0/0
  4356 ;;		Unchanged: 0/0
  4357 ;; Data sizes:     COMMON   BANK0   BANK1
  4358 ;;      Params:         0       0       0
  4359 ;;      Locals:         0       0       0
  4360 ;;      Temps:          0       0       0
  4361 ;;      Totals:         0       0       0
  4362 ;;Total ram usage:        0 bytes
  4363 ;; Hardware stack levels used:    1
  4364 ;; Hardware stack levels required when called:    8
  4365 ;; This function calls:
  4366 ;;		_nrf24l01Send
  4367 ;; This function is called by:
  4368 ;;		_checkRxData
  4369 ;;		_nrf24l01ReceiveString
  4370 ;;		_nrf24l01SendString
  4371 ;;		_nrf24l01ISR
  4372 ;; This function uses a non-reentrant model
  4373 ;;
  4374                           
  4375                           
  4376                           ;psect for function _nrf24l01SetRXMode
  4377  04AC                     _nrf24l01SetRXMode:	
  4378                           
  4379                           ;incstack = 0
  4380                           ; Regs used in _nrf24l01SetRXMode: [wreg+status,2+status,0+pclath+cstack]
  4381                           ;nrf24l01SetRXMode@rxMode stored from wreg
  4382  04AC  00F5               	movwf	nrf24l01SetRXMode@rxMode
  4383                           
  4384                           ;nrf24l01.c: 58: n_CONFIG_t config;
  4385                           ;nrf24l01.c: 59: config.byte = nrf24l01Send(0b00000000 | 0x00, 0);
  4386  04AD  0020               	movlb	0	; select bank0
  4387  04AE  01A0               	clrf	nrf24l01Send@data
  4388  04AF  3000               	movlw	0
  4389  04B0  25EA               	fcall	_nrf24l01Send
  4390  04B1  00F3               	movwf	??_nrf24l01SetRXMode
  4391  04B2  0873               	movf	??_nrf24l01SetRXMode,w
  4392  04B3  00F4               	movwf	nrf24l01SetRXMode@config
  4393                           
  4394                           ;nrf24l01.c: 61: if (config.PRIM_RX != rxMode){
  4395  04B4  0874               	movf	nrf24l01SetRXMode@config,w
  4396  04B5  3901               	andlw	1
  4397  04B6  0675               	xorwf	nrf24l01SetRXMode@rxMode,w
  4398  04B7  1903               	skipnz
  4399  04B8  2CD8               	goto	i1l1519
  4400                           
  4401                           ;nrf24l01.c: 63: PORTAbits.RA0 = 0;
  4402  04B9  0020               	movlb	0	; select bank0
  4403  04BA  100C               	bcf	12,0	;volatile
  4404                           
  4405                           ;nrf24l01.c: 64: _delay((unsigned long)((200)*(16000000/4000000.0)));
  4406  04BB  30A0               	movlw	160
  4407  04BC                     u170_27:	
  4408  04BC  3200               	nop2
  4409  04BD  0B89               	decfsz	9,f
  4410  04BE  2CBC               	goto	u170_27
  4411                           
  4412                           ;nrf24l01.c: 70: config.PRIM_RX = rxMode;
  4413  04BF  0875               	movf	nrf24l01SetRXMode@rxMode,w
  4414  04C0  3901               	andlw	1
  4415  04C1  1074               	bcf	nrf24l01SetRXMode@config,0
  4416  04C2  1D03               	skipz
  4417  04C3  1474               	bsf	nrf24l01SetRXMode@config,0
  4418                           
  4419                           ;nrf24l01.c: 71: nrf24l01Send(0b00100000 | 0x00, config.byte);
  4420  04C4  0874               	movf	nrf24l01SetRXMode@config,w
  4421  04C5  00F3               	movwf	??_nrf24l01SetRXMode
  4422  04C6  0873               	movf	??_nrf24l01SetRXMode,w
  4423  04C7  0020               	movlb	0	; select bank0
  4424  04C8  00A0               	movwf	nrf24l01Send@data
  4425  04C9  3020               	movlw	32
  4426  04CA  25EA               	fcall	_nrf24l01Send
  4427                           
  4428                           ;nrf24l01.c: 72: _delay((unsigned long)((200)*(16000000/4000000.0)));
  4429  04CB  30A0               	movlw	160
  4430  04CC                     u171_27:	
  4431  04CC  3200               	nop2
  4432  04CD  0B89               	decfsz	9,f
  4433  04CE  2CCC               	goto	u171_27
  4434                           
  4435                           ;nrf24l01.c: 74: if (rxMode){
  4436  04CF  0875               	movf	nrf24l01SetRXMode@rxMode,w
  4437  04D0  1903               	btfsc	3,2
  4438  04D1  2CD8               	goto	i1l1519
  4439                           
  4440                           ;nrf24l01.c: 75: PORTAbits.RA0 = 1;
  4441  04D2  0020               	movlb	0	; select bank0
  4442  04D3  140C               	bsf	12,0	;volatile
  4443                           
  4444                           ;nrf24l01.c: 76: _delay((unsigned long)((200)*(16000000/4000000.0)));
  4445  04D4  30A0               	movlw	160
  4446  04D5                     u172_27:	
  4447  04D5  3200               	nop2
  4448  04D6  0B89               	decfsz	9,f
  4449  04D7  2CD5               	goto	u172_27
  4450  04D8                     i1l1519:	
  4451                           
  4452                           ;nrf24l01.c: 77: }
  4453                           ;nrf24l01.c: 78: }
  4454                           ;nrf24l01.c: 79: nrf24l01.RXMode = rxMode;
  4455  04D8  0875               	movf	nrf24l01SetRXMode@rxMode,w
  4456  04D9  3901               	andlw	1
  4457  04DA  0020               	movlb	0	; select bank0
  4458  04DB  11CC               	bcf	_nrf24l01,3	;volatile
  4459  04DC  1D03               	skipz
  4460  04DD  15CC               	bsf	_nrf24l01,3	;volatile
  4461  04DE  0008               	return
  4462  04DF                     __end_of_nrf24l01SetRXMode:	
  4463                           
  4464                           	psect	text21
  4465  05EA                     __ptext21:	
  4466 ;; *************** function _nrf24l01Send *****************
  4467 ;; Defined at:
  4468 ;;		line 9 in file "nrf24l01.c"
  4469 ;; Parameters:    Size  Location     Type
  4470 ;;  command         1    wreg     unsigned char 
  4471 ;;  data            1    0[BANK0 ] unsigned char 
  4472 ;; Auto vars:     Size  Location     Type
  4473 ;;  command         1    2[COMMON] unsigned char 
  4474 ;; Return value:  Size  Location     Type
  4475 ;;                  1    wreg      unsigned char 
  4476 ;; Registers used:
  4477 ;;		wreg, status,2, status,0, pclath, cstack
  4478 ;; Tracked objects:
  4479 ;;		On entry : 0/0
  4480 ;;		On exit  : 0/0
  4481 ;;		Unchanged: 0/0
  4482 ;; Data sizes:     COMMON   BANK0   BANK1
  4483 ;;      Params:         0       0       0
  4484 ;;      Locals:         0       0       0
  4485 ;;      Temps:          0       0       0
  4486 ;;      Totals:         0       0       0
  4487 ;;Total ram usage:        0 bytes
  4488 ;; Hardware stack levels used:    1
  4489 ;; Hardware stack levels required when called:    7
  4490 ;; This function calls:
  4491 ;;		_enableInterrupts
  4492 ;;		_nrf24l01SPIEnd
  4493 ;;		_nrf24l01SPISend
  4494 ;;		_nrf24l01SPIStart
  4495 ;; This function is called by:
  4496 ;;		_nrf24l01SetRXMode
  4497 ;;		_nrf24l01ReceiveString
  4498 ;;		_nrf24l01ISR
  4499 ;;		_nrf24l01InitRegisters
  4500 ;; This function uses a non-reentrant model
  4501 ;;
  4502                           
  4503                           
  4504                           ;psect for function _nrf24l01Send
  4505  05EA                     _nrf24l01Send:	
  4506                           
  4507                           ;incstack = 0
  4508                           ; Regs used in _nrf24l01Send: [wreg+status,2+status,0+pclath+cstack]
  4509                           ;nrf24l01Send@command stored from wreg
  4510  05EA  00F2               	movwf	nrf24l01Send@command
  4511                           
  4512                           ;nrf24l01.c: 11: enableInterrupts(0);
  4513  05EB  3000               	movlw	0
  4514  05EC  262D               	fcall	_enableInterrupts
  4515                           
  4516                           ;nrf24l01.c: 13: nrf24l01SPIStart();
  4517  05ED  261F               	fcall	_nrf24l01SPIStart
  4518                           
  4519                           ;nrf24l01.c: 15: nrf24l01SPISend(command);
  4520  05EE  0872               	movf	nrf24l01Send@command,w
  4521  05EF  260B               	fcall	_nrf24l01SPISend
  4522                           
  4523                           ;nrf24l01.c: 16: data = nrf24l01SPISend(data);
  4524  05F0  0020               	movlb	0	; select bank0
  4525  05F1  0820               	movf	nrf24l01Send@data,w
  4526  05F2  260B               	fcall	_nrf24l01SPISend
  4527  05F3  00F1               	movwf	??_nrf24l01Send
  4528  05F4  0871               	movf	??_nrf24l01Send,w
  4529  05F5  0020               	movlb	0	; select bank0
  4530  05F6  00A0               	movwf	nrf24l01Send@data
  4531                           
  4532                           ;nrf24l01.c: 18: nrf24l01SPIEnd();
  4533  05F7  2626               	fcall	_nrf24l01SPIEnd
  4534                           
  4535                           ;nrf24l01.c: 20: enableInterrupts(1);
  4536  05F8  3001               	movlw	1
  4537  05F9  262D               	fcall	_enableInterrupts
  4538                           
  4539                           ;nrf24l01.c: 22: return data;
  4540  05FA  0020               	movlb	0	; select bank0
  4541  05FB  0820               	movf	nrf24l01Send@data,w
  4542  05FC  0008               	return
  4543  05FD                     __end_of_nrf24l01Send:	
  4544                           
  4545                           	psect	text22
  4546  061F                     __ptext22:	
  4547 ;; *************** function _nrf24l01SPIStart *****************
  4548 ;; Defined at:
  4549 ;;		line 37 in file "interface.c"
  4550 ;; Parameters:    Size  Location     Type
  4551 ;;		None
  4552 ;; Auto vars:     Size  Location     Type
  4553 ;;		None
  4554 ;; Return value:  Size  Location     Type
  4555 ;;                  1    wreg      void 
  4556 ;; Registers used:
  4557 ;;		wreg
  4558 ;; Tracked objects:
  4559 ;;		On entry : 0/0
  4560 ;;		On exit  : 0/0
  4561 ;;		Unchanged: 0/0
  4562 ;; Data sizes:     COMMON   BANK0   BANK1
  4563 ;;      Params:         0       0       0
  4564 ;;      Locals:         0       0       0
  4565 ;;      Temps:          0       0       0
  4566 ;;      Totals:         0       0       0
  4567 ;;Total ram usage:        0 bytes
  4568 ;; Hardware stack levels used:    1
  4569 ;; Hardware stack levels required when called:    6
  4570 ;; This function calls:
  4571 ;;		Nothing
  4572 ;; This function is called by:
  4573 ;;		_nrf24l01Send
  4574 ;;		_nrf24l01ReceiveString
  4575 ;;		_nrf24l01SendString
  4576 ;;		_nrf24l01SetTXAddress
  4577 ;; This function uses a non-reentrant model
  4578 ;;
  4579                           
  4580                           
  4581                           ;psect for function _nrf24l01SPIStart
  4582  061F                     _nrf24l01SPIStart:	
  4583                           
  4584                           ;interface.c: 38: PORTAbits.RA1 = 0;
  4585                           
  4586                           ;incstack = 0
  4587                           ; Regs used in _nrf24l01SPIStart: [wreg]
  4588  061F  0020               	movlb	0	; select bank0
  4589  0620  108C               	bcf	12,1	;volatile
  4590                           
  4591                           ;interface.c: 39: _delay((unsigned long)((10)*(16000000/4000000.0)));
  4592  0621  300D               	movlw	13
  4593  0622                     u173_27:	
  4594  0622  0B89               	decfsz	9,f
  4595  0623  2E22               	goto	u173_27
  4596  0624  0000               	nop
  4597  0625  0008               	return
  4598  0626                     __end_of_nrf24l01SPIStart:	
  4599                           
  4600                           	psect	text23
  4601  060B                     __ptext23:	
  4602 ;; *************** function _nrf24l01SPISend *****************
  4603 ;; Defined at:
  4604 ;;		line 26 in file "interface.c"
  4605 ;; Parameters:    Size  Location     Type
  4606 ;;  data            1    wreg     unsigned char 
  4607 ;; Auto vars:     Size  Location     Type
  4608 ;;  data            1    0[COMMON] unsigned char 
  4609 ;; Return value:  Size  Location     Type
  4610 ;;                  1    wreg      unsigned char 
  4611 ;; Registers used:
  4612 ;;		wreg
  4613 ;; Tracked objects:
  4614 ;;		On entry : 0/0
  4615 ;;		On exit  : 0/0
  4616 ;;		Unchanged: 0/0
  4617 ;; Data sizes:     COMMON   BANK0   BANK1
  4618 ;;      Params:         0       0       0
  4619 ;;      Locals:         0       0       0
  4620 ;;      Temps:          0       0       0
  4621 ;;      Totals:         0       0       0
  4622 ;;Total ram usage:        0 bytes
  4623 ;; Hardware stack levels used:    1
  4624 ;; Hardware stack levels required when called:    6
  4625 ;; This function calls:
  4626 ;;		Nothing
  4627 ;; This function is called by:
  4628 ;;		_nrf24l01Send
  4629 ;;		_nrf24l01ReceiveString
  4630 ;;		_nrf24l01SendString
  4631 ;;		_nrf24l01SetTXAddress
  4632 ;; This function uses a non-reentrant model
  4633 ;;
  4634                           
  4635                           
  4636                           ;psect for function _nrf24l01SPISend
  4637  060B                     _nrf24l01SPISend:	
  4638                           
  4639                           ;incstack = 0
  4640                           ; Regs used in _nrf24l01SPISend: [wreg]
  4641                           ;nrf24l01SPISend@data stored from wreg
  4642  060B  00F0               	movwf	nrf24l01SPISend@data
  4643                           
  4644                           ;interface.c: 27: SSP1BUF = data;
  4645  060C  0870               	movf	nrf24l01SPISend@data,w
  4646  060D  0024               	movlb	4	; select bank4
  4647  060E  0091               	movwf	17	;volatile
  4648  060F                     i1l50:	
  4649                           ;interface.c: 29: while (!SSP1STATbits.BF){
  4650                           
  4651  060F  0024               	movlb	4	; select bank4
  4652  0610  1814               	btfsc	20,0	;volatile
  4653  0611  2E14               	goto	i1l1469
  4654                           
  4655                           ;interface.c: 30: __nop();
  4656  0612  0000               	nop
  4657  0613  2E0F               	goto	i1l50
  4658  0614                     i1l1469:	
  4659                           
  4660                           ;interface.c: 31: }
  4661                           ;interface.c: 33: return SSP1BUF;
  4662  0614  0811               	movf	17,w	;volatile
  4663  0615  0008               	return
  4664  0616                     __end_of_nrf24l01SPISend:	
  4665                           
  4666                           	psect	text24
  4667  0626                     __ptext24:	
  4668 ;; *************** function _nrf24l01SPIEnd *****************
  4669 ;; Defined at:
  4670 ;;		line 43 in file "interface.c"
  4671 ;; Parameters:    Size  Location     Type
  4672 ;;		None
  4673 ;; Auto vars:     Size  Location     Type
  4674 ;;		None
  4675 ;; Return value:  Size  Location     Type
  4676 ;;                  1    wreg      void 
  4677 ;; Registers used:
  4678 ;;		wreg
  4679 ;; Tracked objects:
  4680 ;;		On entry : 0/0
  4681 ;;		On exit  : 0/0
  4682 ;;		Unchanged: 0/0
  4683 ;; Data sizes:     COMMON   BANK0   BANK1
  4684 ;;      Params:         0       0       0
  4685 ;;      Locals:         0       0       0
  4686 ;;      Temps:          0       0       0
  4687 ;;      Totals:         0       0       0
  4688 ;;Total ram usage:        0 bytes
  4689 ;; Hardware stack levels used:    1
  4690 ;; Hardware stack levels required when called:    6
  4691 ;; This function calls:
  4692 ;;		Nothing
  4693 ;; This function is called by:
  4694 ;;		_nrf24l01Send
  4695 ;;		_nrf24l01ReceiveString
  4696 ;;		_nrf24l01SendString
  4697 ;; This function uses a non-reentrant model
  4698 ;;
  4699                           
  4700                           
  4701                           ;psect for function _nrf24l01SPIEnd
  4702  0626                     _nrf24l01SPIEnd:	
  4703                           
  4704                           ;interface.c: 44: _delay((unsigned long)((10)*(16000000/4000000.0)));
  4705                           
  4706                           ;incstack = 0
  4707                           ; Regs used in _nrf24l01SPIEnd: [wreg]
  4708  0626  300D               	movlw	13
  4709  0627                     u174_27:	
  4710  0627  0B89               	decfsz	9,f
  4711  0628  2E27               	goto	u174_27
  4712  0629  0000               	nop
  4713                           
  4714                           ;interface.c: 45: PORTAbits.RA1 = 1;
  4715  062A  0020               	movlb	0	; select bank0
  4716  062B  148C               	bsf	12,1	;volatile
  4717  062C  0008               	return
  4718  062D                     __end_of_nrf24l01SPIEnd:	
  4719                           
  4720                           	psect	text25
  4721  062D                     __ptext25:	
  4722 ;; *************** function _enableInterrupts *****************
  4723 ;; Defined at:
  4724 ;;		line 49 in file "interface.c"
  4725 ;; Parameters:    Size  Location     Type
  4726 ;;  enable          1    wreg     unsigned char 
  4727 ;; Auto vars:     Size  Location     Type
  4728 ;;  enable          1    0[COMMON] unsigned char 
  4729 ;; Return value:  Size  Location     Type
  4730 ;;                  1    wreg      void 
  4731 ;; Registers used:
  4732 ;;		wreg, status,0
  4733 ;; Tracked objects:
  4734 ;;		On entry : 0/0
  4735 ;;		On exit  : 0/0
  4736 ;;		Unchanged: 0/0
  4737 ;; Data sizes:     COMMON   BANK0   BANK1
  4738 ;;      Params:         0       0       0
  4739 ;;      Locals:         0       0       0
  4740 ;;      Temps:          0       0       0
  4741 ;;      Totals:         0       0       0
  4742 ;;Total ram usage:        0 bytes
  4743 ;; Hardware stack levels used:    1
  4744 ;; Hardware stack levels required when called:    6
  4745 ;; This function calls:
  4746 ;;		Nothing
  4747 ;; This function is called by:
  4748 ;;		_nrf24l01Send
  4749 ;;		_nrf24l01SendString
  4750 ;; This function uses a non-reentrant model
  4751 ;;
  4752                           
  4753                           
  4754                           ;psect for function _enableInterrupts
  4755  062D                     _enableInterrupts:	
  4756                           
  4757                           ;incstack = 0
  4758                           ; Regs used in _enableInterrupts: [wreg+status,0]
  4759                           ;enableInterrupts@enable stored from wreg
  4760  062D  00F0               	movwf	enableInterrupts@enable
  4761                           
  4762                           ;interface.c: 50: INTCONbits.INTE = enable;
  4763  062E  0C70               	rrf	enableInterrupts@enable,w
  4764  062F  1C03               	skipc
  4765  0630  120B               	bcf	11,4	;volatile
  4766  0631  1803               	skipnc
  4767  0632  160B               	bsf	11,4	;volatile
  4768  0633  0008               	return
  4769  0634                     __end_of_enableInterrupts:	
  4770  007E                     btemp	set	126	;btemp
  4771  007E                     int$flags	set	126
  4772  007E                     wtemp0	set	126


Data Sizes:
    Strings     35
    Constant    6
    Data        0
    BSS         52
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     41      77
    BANK1            32      3      19

Pointer List with Targets:

    strcpy@from	PTR const unsigned char  size(2) Largest target is 6
		 -> STR_6(CODE[5]), STR_5(CODE[6]), STR_4(CODE[6]), STR_3(CODE[5]), 
		 -> STR_2(CODE[5]), STR_1(CODE[4]), 

    strcpy@to	PTR unsigned char  size(1) Largest target is 8
		 -> nrf24l01TXTopic(BANK0[8]), 

    strcpy@cp	PTR unsigned char  size(1) Largest target is 8
		 -> nrf24l01TXTopic(BANK0[8]), 

    strcmp@s2	PTR const unsigned char  size(2) Largest target is 8
		 -> STR_7(CODE[4]), nrf24l01TXTopic(BANK0[8]), 

    strcmp@s1	PTR const unsigned char  size(1) Largest target is 8
		 -> nrf24l01RXValue(BANK0[8]), nrf24l01RXTopic(BANK0[8]), 

    utoa@buf	PTR unsigned char  size(1) Largest target is 8
		 -> nrf24l01TXValue(BANK0[8]), 

    sp__itoa	PTR unsigned char  size(1) Largest target is 0

    sp__utoa	PTR unsigned char  size(1) Largest target is 8
		 -> nrf24l01TXValue(BANK0[8]), 

    sp__strcpy	PTR unsigned char  size(1) Largest target is 8
		 -> nrf24l01TXTopic(BANK0[8]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    _ISR->_nrf24l01ISR
    _nrf24l01ISR->_nrf24l01ReceiveString

Critical Paths under _main in BANK0

    _main->_utoa
    _nrf24l01Init->_nrf24l01InitRegisters
    _loop->_utoa
    _utoa->_getADCValue
    _getADCValue->___lldiv

Critical Paths under _ISR in BANK0

    _ISR->_nrf24l01ISR

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     4      0   13283
                                             40 BANK0      1     1      0
                                              0 BANK1      3     3      0
                               _loop
                       _nrf24l01Init
                 _nrf24l01SendString
                      _read_flashmem
                              _sleep
                             _strcpy
                               _utoa
 ---------------------------------------------------------------------------------
 (1) _read_flashmem                                        9     7      2     220
                                              3 BANK0      9     7      2
 ---------------------------------------------------------------------------------
 (1) _nrf24l01Init                                         1     1      0    1562
                                             12 BANK0      1     1      0
              _nrf24l01InitRegisters
              _nrf24l01InterfaceInit
 ---------------------------------------------------------------------------------
 (2) _nrf24l01InterfaceInit                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _nrf24l01InitRegisters                                9     9      0    1562
                                              3 BANK0      9     9      0
                       _nrf24l01Send
 ---------------------------------------------------------------------------------
 (1) _loop                                                 0     0      0    6868
                        _checkRxData
                        _getADCValue
                 _nrf24l01SendString
                              _sleep
                             _strcpy
                               _utoa
 ---------------------------------------------------------------------------------
 (1) _utoa                                                 9     5      4    2087
                                             31 BANK0      9     5      4
                            ___lwdiv
                            ___lwmod
                        _getADCValue (ARG)
                      _read_flashmem (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              6     2      4     287
                                              3 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              8     4      4     418
                                              3 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (1) _strcpy                                               5     3      2     639
                                              3 BANK0      5     3      2
 ---------------------------------------------------------------------------------
 (1) _nrf24l01SendString                                   3     3      0    1777
                                              3 BANK0      3     3      0
                   _enableInterrupts
                     _nrf24l01SPIEnd
                    _nrf24l01SPISend
                   _nrf24l01SPIStart
                  _nrf24l01SetRXMode
 ---------------------------------------------------------------------------------
 (2) _getADCValue                                         14    10      4     904
                                             17 BANK0     14    10      4
                            ___lldiv
                             ___lmul
 ---------------------------------------------------------------------------------
 (3) ___lmul                                              12     4      8     220
                                              3 BANK0     12     4      8
 ---------------------------------------------------------------------------------
 (3) ___lldiv                                             14     6      8     290
                                              3 BANK0     14     6      8
 ---------------------------------------------------------------------------------
 (2) _checkRxData                                          0     0      0    1461
                  _nrf24l01SetRXMode
                              _sleep
 ---------------------------------------------------------------------------------
 (1) _sleep                                                0     0      0       0
 ---------------------------------------------------------------------------------
 (8) _nrf24l01SetRXMode                                    3     3      0    1461
                       _nrf24l01Send
 ---------------------------------------------------------------------------------
 (9) _nrf24l01Send                                         3     2      1    1327
                   _enableInterrupts
                     _nrf24l01SPIEnd
                    _nrf24l01SPISend
                   _nrf24l01SPIStart
 ---------------------------------------------------------------------------------
 (10) _nrf24l01SPIStart                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _nrf24l01SPISend                                     1     1      0      22
 ---------------------------------------------------------------------------------
 (10) _nrf24l01SPIEnd                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _enableInterrupts                                    1     1      0      22
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _ISR                                                  1     1      0    6600
                                              2 BANK0      1     1      0
                        _nrf24l01ISR
 ---------------------------------------------------------------------------------
 (7) _nrf24l01ISR                                          2     2      0    6600
                                             13 COMMON     1     1      0
                                              1 BANK0      1     1      0
              _nrf24l01ReceiveString
                       _nrf24l01Send
                  _nrf24l01SetRXMode
 ---------------------------------------------------------------------------------
 (8) _nrf24l01ReceiveString                                7     7      0    3701
                                              6 COMMON     7     7      0
                     _nrf24l01SPIEnd
                    _nrf24l01SPISend
                   _nrf24l01SPIStart
                       _nrf24l01Send
                  _nrf24l01SetRXMode
                             _strcmp
 ---------------------------------------------------------------------------------
 (9) _strcmp                                               5     3      2     279
                                              0 COMMON     5     3      2
 ---------------------------------------------------------------------------------
 (8) _nrf24l01SetRXMode                                    3     3      0    1461
                       _nrf24l01Send
 ---------------------------------------------------------------------------------
 (9) _nrf24l01Send                                         3     2      1    1327
                   _enableInterrupts
                     _nrf24l01SPIEnd
                    _nrf24l01SPISend
                   _nrf24l01SPIStart
 ---------------------------------------------------------------------------------
 (10) _nrf24l01SPIStart                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _nrf24l01SPISend                                     1     1      0      22
 ---------------------------------------------------------------------------------
 (10) _nrf24l01SPIEnd                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _enableInterrupts                                    1     1      0      22
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _loop
     _checkRxData
       _nrf24l01SetRXMode
         _nrf24l01Send
           _enableInterrupts
           _nrf24l01SPIEnd
           _nrf24l01SPISend
           _nrf24l01SPIStart
       _sleep
     _getADCValue
       ___lldiv
       ___lmul
     _nrf24l01SendString
       _enableInterrupts
       _nrf24l01SPIEnd
       _nrf24l01SPISend
       _nrf24l01SPIStart
       _nrf24l01SetRXMode
         _nrf24l01Send
           _enableInterrupts
           _nrf24l01SPIEnd
           _nrf24l01SPISend
           _nrf24l01SPIStart
     _sleep
     _strcpy
     _utoa
       ___lwdiv
       ___lwmod
       _getADCValue (ARG)
         ___lldiv
         ___lmul
       _read_flashmem (ARG)
   _nrf24l01Init
     _nrf24l01InitRegisters
       _nrf24l01Send
         _enableInterrupts
         _nrf24l01SPIEnd
         _nrf24l01SPISend
         _nrf24l01SPIStart
     _nrf24l01InterfaceInit
   _nrf24l01SendString
     _enableInterrupts
     _nrf24l01SPIEnd
     _nrf24l01SPISend
     _nrf24l01SPIStart
     _nrf24l01SetRXMode
       _nrf24l01Send
         _enableInterrupts
         _nrf24l01SPIEnd
         _nrf24l01SPISend
         _nrf24l01SPIStart
   _read_flashmem
   _sleep
   _strcpy
   _utoa
     ___lwdiv
     ___lwmod
     _getADCValue (ARG)
       ___lldiv
       ___lmul
     _read_flashmem (ARG)

 _ISR (ROOT)
   _nrf24l01ISR
     _nrf24l01ReceiveString
       _nrf24l01SPIEnd
       _nrf24l01SPISend
       _nrf24l01SPIStart
       _nrf24l01Send
         _enableInterrupts
         _nrf24l01SPIEnd
         _nrf24l01SPISend
         _nrf24l01SPIStart
       _nrf24l01SetRXMode
         _nrf24l01Send
           _enableInterrupts
           _nrf24l01SPIEnd
           _nrf24l01SPISend
           _nrf24l01SPIStart
       _strcmp
     _nrf24l01Send
       _enableInterrupts
       _nrf24l01SPIEnd
       _nrf24l01SPISend
       _nrf24l01SPIStart
     _nrf24l01SetRXMode
       _nrf24l01Send
         _enableInterrupts
         _nrf24l01SPIEnd
         _nrf24l01SPISend
         _nrf24l01SPIStart

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM              70      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      E       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0      6E       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BANK0               50     29      4D       6       96.3%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BITBANK1            20      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BANK1               20      3      13       8       59.4%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
DATA                 0      0      6E       9        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Thu Jun 21 09:35:36 2018

                   __CFG_CP$OFF 0000             nrf24l01Send@command 0072                     __CFG_LVP$ON 0000  
                           l156 0616                             l149 0368                             l173 02F9  
                           l270 01BB                             l266 01AB                             l576 040E  
                           _ISR 0004                             u905 0438                             u925 0444  
                           u935 0458                             u945 0464                             u865 0525  
                           u875 052C                             u975 0483                             u995 048D  
  nrf24l01SendString@waitForAck 0024                    __CFG_BORV$LO 0000                             wreg 0009  
                          ?_ISR 0070                  ??_nrf24l01Init 002C                            l2209 02D8  
                          l1611 0560                            l1605 0548                            l1535 051A  
                          l1631 036D                            l1607 0554                            l1615 0569  
                          l2263 0341                            l1553 0435                            l1633 0361  
                          l1721 01EC                            l1713 01DC                            l1705 01C6  
                          l1563 0463                            l1555 0443                            l1539 0524  
                          l1635 038B                            l1733 0207                            l1725 01F7  
                          l1717 01E1                            l1709 01D1                            l1581 0480  
                          l1567 046E                            l1751 022E                            l1655 05BF  
                          l1583 048C                            l1753 0222                            l1737 0212  
                          l1729 01FC                            l1593 04A7                  ??_nrf24l01Send 0071  
                          l1659 03CE                            l1589 049E                            l1669 03EA  
                          l1699 01AF                            STR_1 065E                    __CFG_WDTE$ON 0000  
                          STR_2 064B                            STR_3 0650                            STR_4 063A  
                          STR_5 0634                            STR_6 0655                            STR_7 065A  
                          u1005 0497                            u1015 049F                            u1045 054B  
                          u1065 055A                            u1075 0561                            u1627 02CC  
                          u1637 05DB                            u1647 05E4                            u1657 023E  
                          u1667 01B7                            u1677 0216                            u1687 022F  
                          u1697 035E                            i1l50 060F  __size_of_nrf24l01InterfaceInit 000E  
                  __CFG_WRT$OFF 0000   __end_of_nrf24l01InterfaceInit 060B                   __p_NVMEM_text 07E0  
                          _main 02BC                            _loop 0100                            fsr0h 0005  
                          fsr1h 0007                            indf0 0000                            fsr0l 0004  
                          indf1 0001                            fsr1l 0006                            btemp 007E  
                          _utoa 03C8                            start 0012  __size_of_nrf24l01ReceiveString 00DE  
                 __CFG_MCLRE$ON 0000   __end_of_nrf24l01ReceiveString 0100                           ??_ISR 0022  
           nrf24l01SendString@i 0025            __size_of_getADCValue 0085     __size_of_nrf24l01SendString 0096  
                         ?_main 0070                           ?_loop 0070                 __end_of___lldiv 0477  
                         ?_utoa 003F                 __end_of___lwdiv 04AC                           i1l144 000D  
               __end_of___lwmod 056E                           _NVMEM 07E0          enableInterrupts@enable 0070  
          __size_of_checkRxData 0004             ___lmul@multiplicand 0027                   __CFG_PWRTE$ON 0000  
                         _sleep 0616                           main@i 0048                  __CFG_BOREN$OFF 0000  
              _enableInterrupts 062D                           utoa@c 0046                           utoa@v 0044  
                         status 0003                           wtemp0 007E               getADCValue@adcSum 003B  
              _nrf24l01SPIStart 061F                 __initialization 0013                    __end_of_main 0343  
                  __end_of_loop 019C                    __end_of_utoa 0424                  __CFG_LPBOR$OFF 0000  
                        ??_main 00B0                          ??_loop 0048                          ??_utoa 0043  
              ??_nrf24l01SPIEnd 0070        __size_of_nrf24l01SPISend 000B                          _ADRESH 009C  
                        _ADRESL 009B                          ?_sleep 0070                          _ANSELA 018C  
                        _ANSELC 018E                          i1l1523 0570                          i1l1525 0578  
                        i1l1519 04D8                          i1l1529 058F                          i1l1803 0087  
                        i1l1469 0614                          i1l1821 00BB                          i1l1813 009B  
                        i1l1807 008D                          i1l1833 00E2                          i1l1825 00C1  
                        i1l1817 00A7                          i1l1763 002A                          i1l1829 00CE  
                        i1l1781 0049                          i1l1775 003C                          i1l1793 0065  
                        i1l1769 0037                          i1l1787 0057                          i1l1797 006F  
                        i1l1799 0073                          i1l1991 05B1                          i1l1987 05AD  
                        u133_25 0085                          u136_25 00B9                          u138_25 00E0  
                        u170_27 04BC                          u171_27 04CC                          u172_27 04D5  
                        u173_27 0622                          u174_27 0627                          _PMADRH 0192  
                        _PMADRL 0191                          _PMDATH 0194                          _PMDATL 0193  
                        _PMCON1 0195                          _PMCON2 0196            __size_of_nrf24l01ISR 0024  
       nrf24l01SetRXMode@config 0074                          ___lmul 0511         nrf24l01SetRXMode@rxMode 0075  
                __CFG_STVREN$ON 0000                       ??___lldiv 002B                       ??___lwdiv 0027  
                     ??___lwmod 0027            __end_of_nrf24l01Init 05EA            __end_of_nrf24l01Send 05FD  
         _nrf24l01InitRegisters 0232                          _strcmp 056E                          _strcpy 05B9  
        __size_of_read_flashmem 0032              getADCValue@adcLoop 003A         __end_of__initialization 001F  
            getADCValue@channel 0039                   __end_of_NVMEM 0800              getADCValue@divider 0031  
                __pcstackCOMMON 0070                   __end_of_sleep 061F   nrf24l01InitRegisters@enRXAddr 0028  
                _OPTION_REGbits 0095                         ??_sleep 0023                      __pbssBANK0 0049  
                    __pbssBANK1 00A0               ??_nrf24l01SPISend 0070                   _read_flashmem 04DF  
                    __pmaintext 02BC                         ?___lmul 0023               _nrf24l01SetRXMode 04AC  
        ?_nrf24l01InitRegisters 0070                      __pintentry 0004             nrf24l01SPISend@data 0070  
                ___lmul@product 002B              ?_nrf24l01SetRXMode 0070        __end_of_enableInterrupts 0634  
                       ?_strcmp 0070                         ?_strcpy 0023           __end_of_n_ADDRESS_MUL 0667  
           ??_nrf24l01SetRXMode 0073        __end_of_nrf24l01SPIStart 0626                         _SSP1BUF 0211  
         _nrf24l01InterfaceInit 05FD                  ?_read_flashmem 0023                   ??_getADCValue 0035  
         __size_of_nrf24l01Init 0016           __size_of_nrf24l01Send 0013       __end_of_nrf24l01SetRXMode 04DF  
    __end_of_nrf24l01SendString 0232                 __size_of___lmul 0030                         ___lldiv 0424  
                       ___lwdiv 0477           _nrf24l01ReceiveString 0022                         ___lwmod 0541  
                 ??_checkRxData 0023                         __ptext1 04DF                         __ptext2 05D4  
                       __ptext3 05FD                         __ptext4 0232                         __ptext5 0100  
                       __ptext6 03C8                         __ptext7 0541                         __ptext8 0477  
                       __ptext9 05B9                 __size_of_strcmp 0027                 __size_of_strcpy 001B  
                  __size_of_ISR 000E                         _counter 0049                         clrloop0 0641  
          end_of_initialization 001F                    _nrf24l01Name 00A0                    _nrf24l01Init 05D4  
                  _nrf24l01Send 05EA                 ___lldiv@divisor 0023                 ___lldiv@counter 0030  
                       utoa@buf 0047                         utoa@val 003F                         strcmp@r 0073  
           __end_of_getADCValue 03C8                       _PORTAbits 000C      nrf24l01ReceiveString@width 0079  
              __CFG_FOSC$INTOSC 0000                       _TRISAbits 008C                       _TRISCbits 008E  
              nrf24l01Send@data 0020             __end_of_checkRxData 0666                   ??_nrf24l01ISR 007D  
        ?_nrf24l01InterfaceInit 0070                 ??_read_flashmem 0025      __size_of_nrf24l01SetRXMode 0033  
        ?_nrf24l01ReceiveString 0070                  __end_of___lmul 0541                  __end_of_strcmp 0595  
                __end_of_strcpy 05D4             start_initialization 0013                 _nrf24l01SPISend 060B  
                   __end_of_ISR 0012                 _nrf24l01RXValue 004D                 _nrf24l01RXTopic 0055  
               _nrf24l01TXValue 005D                 _nrf24l01TXTopic 0065         __size_of_nrf24l01SPIEnd 0007  
       ??_nrf24l01InitRegisters 0023                     _getADCValue 0343                        ??___lmul 002B  
           __end_of_nrf24l01ISR 05B9               ?_enableInterrupts 0070                     _checkRxData 0662  
                      ??_strcmp 0072                        ??_strcpy 0025              ??_enableInterrupts 0070  
                     ___latbits 0000                   __pcstackBANK0 0020                   __pcstackBANK1 00B0  
             ?_nrf24l01SPIStart 0070              ??_nrf24l01SPIStart 0070                ___lwdiv@dividend 0025  
                      ?___lldiv 0023                        ?___lwdiv 0023                        ?___lwmod 0023  
          __end_of_n_ADDRESS_P0 064B         __end_of_nrf24l01SPISend 0616                   _NVMEM_absaddr 07E0  
     nrf24l01InitRegisters@enAA 0029              _nrf24l01SendString 019C                ___lwdiv@quotient 0028  
                __size_of_sleep 0009             ?_nrf24l01SendString 0070                     _nrf24l01ISR 0595  
                     clear_ram0 0640                       _sleepLoop 004B            ??_nrf24l01SendString 0023  
                    _ADCON0bits 009D                      _ADCON1bits 009E                        _WPUAbits 020C  
             ___lmul@multiplier 0023         ??_nrf24l01InterfaceInit 0023               nrf24l01ISR@status 0021  
                _nrf24l01SPIEnd 0626         ??_nrf24l01ReceiveString 0076            read_flashmem@address 002A  
              __size_of___lldiv 0053                __size_of___lwdiv 0035                __size_of___lwmod 002D  
              ?_nrf24l01SPISend 0070                      _ANSELAbits 018C                      _ANSELCbits 018E  
                 _n_ADDRESS_MUL 0666                 ___lwdiv@divisor 0023                 ___lwdiv@counter 002A  
                      __ptext10 019C                        __ptext11 0343                        __ptext20 04AC  
                      __ptext12 0511                        __ptext21 05EA                        __ptext13 0424  
                      __ptext22 061F                        __ptext14 0662                        __ptext23 060B  
                      __ptext15 0616                        __ptext24 0626                        __ptext25 062D  
                      __ptext17 0595                        __ptext18 0022                        __ptext19 056E  
        __end_of_nrf24l01SPIEnd 062D                        _nrf24l01 004C                      strcpy@from 0023  
                 __size_of_main 0087                   __size_of_loop 009C                   __size_of_utoa 005C  
  nrf24l01InitRegisters@feature 0026           __end_of_read_flashmem 0511    nrf24l01InitRegisters@rfSetup 0025  
                  ?_getADCValue 0031  __size_of_nrf24l01InitRegisters 008A   __end_of_nrf24l01InitRegisters 02BC  
                      int$flags 007E    nrf24l01InitRegisters@setupAW 0024                    _SSP1STATbits 0214  
                  ?_checkRxData 0070                      _INTCONbits 000B                      _FVRCONbits 0117  
                __pstringtext10 0000                 ?_nrf24l01SPIEnd 0070                        intlevel1 0000  
           read_flashmem@offset 0023                    _n_ADDRESS_P0 0646             read_flashmem@result 0028  
     __size_of_enableInterrupts 0007                      _PMCON1bits 0195                ___lwmod@dividend 0025  
        nrf24l01ReceiveString@i 007C                ___lldiv@dividend 0027               __CFG_CLKOUTEN$OFF 0000  
   nrf24l01InitRegisters@config 002B                      _OSCCONbits 0099       __size_of_nrf24l01SPIStart 0007  
   nrf24l01InitRegisters@status 0027       nrf24l01ReceiveString@byte 007B                   __pstringtext1 0646  
                 __pstringtext2 0666                   __pstringtext3 0634                   __pstringtext4 063A  
                 __pstringtext5 064B                   __pstringtext6 0650                   __pstringtext7 0655  
                 __pstringtext8 065A                   __pstringtext9 065E                        utoa@base 0041  
    nrf24l01InitRegisters@DynPD 002A                        strcmp@s1 0074                        strcmp@s2 0070  
              ___lldiv@quotient 002C                 ___lwmod@divisor 0023                        strcpy@cp 0026  
                      strcpy@to 0027                 ___lwmod@counter 0028                     _SSPCON1bits 0215  
                    _WDTCONbits 0097     nrf24l01ReceiveString@offset 007A                   ?_nrf24l01Init 0070  
                 ?_nrf24l01Send 0020                      _STATUSbits 0003                    ?_nrf24l01ISR 0070  
