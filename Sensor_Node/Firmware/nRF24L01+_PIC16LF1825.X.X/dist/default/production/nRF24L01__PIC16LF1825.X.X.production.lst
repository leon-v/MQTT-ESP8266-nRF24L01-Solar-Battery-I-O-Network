

Microchip Technology PIC LITE Macro Assembler V2.00 build -1524193055 
                                                                                               Sat Aug 04 09:26:21 2018

Microchip Technology Omniscient Code Generator v2.00 (Free mode) build 20180527130849
     1                           	processor	16LF18325
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK1,global,class=CODE,delta=2
     5                           	psect	stringtext1,global,class=STRCODE,delta=2
     6                           	psect	stringtext2,global,class=STRCODE,delta=2
     7                           	psect	stringtext3,global,class=STRCODE,delta=2
     8                           	psect	stringtext4,global,class=STRCODE,delta=2
     9                           	psect	stringtext5,global,class=STRCODE,delta=2
    10                           	psect	stringtext6,global,class=STRCODE,delta=2
    11                           	psect	stringtext7,global,class=STRCODE,delta=2
    12                           	psect	stringtext8,global,class=STRCODE,delta=2
    13                           	psect	stringtext9,global,class=STRCODE,delta=2
    14                           	psect	stringtext10,global,class=STRCODE,delta=2
    15                           	psect	stringtext11,global,class=STRCODE,delta=2
    16                           	psect	stringtext12,global,class=STRCODE,delta=2
    17                           	psect	stringtext13,global,class=STRCODE,delta=2
    18                           	psect	cinit,global,class=CODE,merge=1,delta=2
    19                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
    20                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    21                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    22                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    23                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    24                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1
    25                           	psect	clrtext,global,class=CODE,delta=2
    26                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1
    27                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    28                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    29                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    30                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    31                           	psect	text1,local,class=CODE,merge=1,delta=2
    32                           	psect	text2,local,class=CODE,merge=1,delta=2
    33                           	psect	text3,local,class=CODE,merge=1,delta=2
    34                           	psect	text4,local,class=CODE,merge=1,delta=2
    35                           	psect	text5,local,class=CODE,merge=1,delta=2,group=1
    36                           	psect	text6,local,class=CODE,merge=1,delta=2
    37                           	psect	text7,local,class=CODE,merge=1,delta=2
    38                           	psect	text8,local,class=CODE,merge=1,delta=2,group=1
    39                           	psect	text9,local,class=CODE,merge=1,delta=2
    40                           	psect	text10,local,class=CODE,merge=1,delta=2
    41                           	psect	text11,local,class=CODE,merge=1,delta=2,group=2
    42                           	psect	text12,local,class=CODE,merge=1,delta=2
    43                           	psect	text13,local,class=CODE,merge=1,delta=2
    44                           	psect	text14,local,class=CODE,merge=1,delta=2,group=2
    45                           	psect	text15,local,class=CODE,merge=1,delta=2
    46                           	psect	text16,local,class=CODE,merge=1,delta=2
    47                           	psect	text17,local,class=CODE,merge=1,delta=2,group=2
    48                           	psect	text18,local,class=CODE,merge=1,delta=2,group=2
    49                           	psect	text19,local,class=CODE,merge=1,delta=2
    50                           	psect	text20,local,class=CODE,merge=1,delta=2
    51                           	psect	text21,local,class=CODE,merge=1,delta=2,group=2
    52                           	psect	text22,local,class=CODE,merge=1,delta=2,group=2
    53                           	psect	text23,local,class=CODE,merge=1,delta=2
    54                           	psect	text24,local,class=CODE,merge=1,delta=2,group=2
    55                           	psect	text25,local,class=CODE,merge=1,delta=2,group=1
    56                           	psect	text26,local,class=CODE,merge=1,delta=2,group=1
    57                           	psect	text27,local,class=CODE,merge=1,delta=2,group=1
    58                           	psect	text28,local,class=CODE,merge=1,delta=2,group=1
    59                           	psect	text29,local,class=CODE,merge=1,delta=2,group=1
    60                           	psect	text30,local,class=CODE,merge=1,delta=2,group=1
    61                           	psect	text31,local,class=CODE,merge=1,delta=2,group=1
    62                           	psect	text32,local,class=CODE,merge=1,delta=2,group=1
    63                           	psect	text33,local,class=CODE,merge=1,delta=2,group=1
    64                           	psect	text34,local,class=CODE,merge=1,delta=2
    65                           	psect	text35,local,class=CODE,merge=1,delta=2
    66                           	psect	text36,local,class=CODE,merge=1,delta=2,group=1
    67                           	psect	text37,local,class=CODE,merge=1,delta=2,group=1
    68                           	psect	text38,local,class=CODE,merge=1,delta=2,group=1
    69                           	psect	text39,local,class=CODE,merge=1,delta=2,group=1
    70                           	psect	text40,local,class=CODE,merge=1,delta=2,group=1
    71                           	psect	text41,local,class=CODE,merge=1,delta=2,group=1
    72                           	psect	intentry,global,class=CODE,delta=2
    73                           	psect	text43,local,class=CODE,merge=1,delta=2
    74                           	psect	text44,local,class=CODE,merge=1,delta=2
    75                           	psect	text45,local,class=CODE,merge=1,delta=2
    76                           	psect	text46,local,class=CODE,merge=1,delta=2
    77                           	psect	text47,local,class=CODE,merge=1,delta=2
    78                           	psect	text48,local,class=CODE,merge=1,delta=2
    79                           	psect	text49,local,class=CODE,merge=1,delta=2
    80                           	psect	text50,local,class=CODE,merge=1,delta=2
    81                           	psect	text51,local,class=CODE,merge=1,delta=2
    82                           	psect	text52,local,class=CODE,merge=1,delta=2
    83                           	psect	text53,local,class=CODE,merge=1,delta=2
    84                           	psect	text54,local,class=CODE,merge=1,delta=2
    85                           	psect	text55,local,class=CODE,merge=1,delta=2
    86                           	psect	text56,local,class=CODE,merge=1,delta=2
    87                           	psect	text57,local,class=CODE,merge=1,delta=2
    88                           	dabs	1,0x7E,2
    89  0000                     
    90                           ; Version 2.00
    91                           ; Generated 27/05/2018 GMT
    92                           ; 
    93                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
    94                           ; All rights reserved.
    95                           ; 
    96                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    97                           ; 
    98                           ; Redistribution and use in source and binary forms, with or without modification, are
    99                           ; permitted provided that the following conditions are met:
   100                           ; 
   101                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   102                           ;        conditions and the following disclaimer.
   103                           ; 
   104                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   105                           ;        of conditions and the following disclaimer in the documentation and/or other
   106                           ;        materials provided with the distribution.
   107                           ; 
   108                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   109                           ;        software without specific prior written permission.
   110                           ; 
   111                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   112                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   113                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   114                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   115                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   116                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   117                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   118                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   119                           ; 
   120                           ; 
   121                           ; Code-generator required, PIC16LF18325 Definitions
   122                           ; 
   123                           ; SFR Addresses
   124  0000                     	;# 
   125  0001                     	;# 
   126  0002                     	;# 
   127  0003                     	;# 
   128  0004                     	;# 
   129  0005                     	;# 
   130  0006                     	;# 
   131  0007                     	;# 
   132  0008                     	;# 
   133  0009                     	;# 
   134  000A                     	;# 
   135  000B                     	;# 
   136  000C                     	;# 
   137  000E                     	;# 
   138  0010                     	;# 
   139  0011                     	;# 
   140  0012                     	;# 
   141  0013                     	;# 
   142  0014                     	;# 
   143  0015                     	;# 
   144  0015                     	;# 
   145  0016                     	;# 
   146  0016                     	;# 
   147  0017                     	;# 
   148  0018                     	;# 
   149  0019                     	;# 
   150  0019                     	;# 
   151  001A                     	;# 
   152  001B                     	;# 
   153  001C                     	;# 
   154  001D                     	;# 
   155  001E                     	;# 
   156  001F                     	;# 
   157  008C                     	;# 
   158  008E                     	;# 
   159  0090                     	;# 
   160  0091                     	;# 
   161  0092                     	;# 
   162  0093                     	;# 
   163  0094                     	;# 
   164  0097                     	;# 
   165  009B                     	;# 
   166  009B                     	;# 
   167  009C                     	;# 
   168  009D                     	;# 
   169  009E                     	;# 
   170  009F                     	;# 
   171  010C                     	;# 
   172  010E                     	;# 
   173  0111                     	;# 
   174  0112                     	;# 
   175  0113                     	;# 
   176  0114                     	;# 
   177  0115                     	;# 
   178  0116                     	;# 
   179  0117                     	;# 
   180  0118                     	;# 
   181  0119                     	;# 
   182  018C                     	;# 
   183  018E                     	;# 
   184  0199                     	;# 
   185  0199                     	;# 
   186  0199                     	;# 
   187  019A                     	;# 
   188  019A                     	;# 
   189  019A                     	;# 
   190  019B                     	;# 
   191  019B                     	;# 
   192  019B                     	;# 
   193  019B                     	;# 
   194  019B                     	;# 
   195  019C                     	;# 
   196  019C                     	;# 
   197  019C                     	;# 
   198  019D                     	;# 
   199  019D                     	;# 
   200  019D                     	;# 
   201  019E                     	;# 
   202  019E                     	;# 
   203  019E                     	;# 
   204  019F                     	;# 
   205  019F                     	;# 
   206  019F                     	;# 
   207  019F                     	;# 
   208  019F                     	;# 
   209  020C                     	;# 
   210  020E                     	;# 
   211  0211                     	;# 
   212  0211                     	;# 
   213  0212                     	;# 
   214  0212                     	;# 
   215  0213                     	;# 
   216  0213                     	;# 
   217  0214                     	;# 
   218  0214                     	;# 
   219  0215                     	;# 
   220  0215                     	;# 
   221  0215                     	;# 
   222  0215                     	;# 
   223  0216                     	;# 
   224  0216                     	;# 
   225  0217                     	;# 
   226  0217                     	;# 
   227  0219                     	;# 
   228  021A                     	;# 
   229  021B                     	;# 
   230  021C                     	;# 
   231  021D                     	;# 
   232  021D                     	;# 
   233  021E                     	;# 
   234  021F                     	;# 
   235  028C                     	;# 
   236  028E                     	;# 
   237  0291                     	;# 
   238  0291                     	;# 
   239  0292                     	;# 
   240  0293                     	;# 
   241  0294                     	;# 
   242  0295                     	;# 
   243  0295                     	;# 
   244  0296                     	;# 
   245  0297                     	;# 
   246  0298                     	;# 
   247  029F                     	;# 
   248  030C                     	;# 
   249  030E                     	;# 
   250  0311                     	;# 
   251  0311                     	;# 
   252  0312                     	;# 
   253  0313                     	;# 
   254  0314                     	;# 
   255  0315                     	;# 
   256  0315                     	;# 
   257  0316                     	;# 
   258  0317                     	;# 
   259  0318                     	;# 
   260  038C                     	;# 
   261  038E                     	;# 
   262  0391                     	;# 
   263  0392                     	;# 
   264  0393                     	;# 
   265  0397                     	;# 
   266  0398                     	;# 
   267  0399                     	;# 
   268  039A                     	;# 
   269  039C                     	;# 
   270  039D                     	;# 
   271  039E                     	;# 
   272  039F                     	;# 
   273  0411                     	;# 
   274  0411                     	;# 
   275  0412                     	;# 
   276  0413                     	;# 
   277  0414                     	;# 
   278  0415                     	;# 
   279  0416                     	;# 
   280  0417                     	;# 
   281  0418                     	;# 
   282  0418                     	;# 
   283  0419                     	;# 
   284  041A                     	;# 
   285  041B                     	;# 
   286  041C                     	;# 
   287  041D                     	;# 
   288  041E                     	;# 
   289  041F                     	;# 
   290  0498                     	;# 
   291  0498                     	;# 
   292  0499                     	;# 
   293  049A                     	;# 
   294  049B                     	;# 
   295  049B                     	;# 
   296  049C                     	;# 
   297  049D                     	;# 
   298  049E                     	;# 
   299  049F                     	;# 
   300  0617                     	;# 
   301  0618                     	;# 
   302  0619                     	;# 
   303  0619                     	;# 
   304  061A                     	;# 
   305  061B                     	;# 
   306  061C                     	;# 
   307  061C                     	;# 
   308  061F                     	;# 
   309  0691                     	;# 
   310  0692                     	;# 
   311  0693                     	;# 
   312  0694                     	;# 
   313  0695                     	;# 
   314  0696                     	;# 
   315  0697                     	;# 
   316  0698                     	;# 
   317  0699                     	;# 
   318  0711                     	;# 
   319  0712                     	;# 
   320  0713                     	;# 
   321  0714                     	;# 
   322  0715                     	;# 
   323  0716                     	;# 
   324  0717                     	;# 
   325  0718                     	;# 
   326  0719                     	;# 
   327  0891                     	;# 
   328  0891                     	;# 
   329  0891                     	;# 
   330  0891                     	;# 
   331  0891                     	;# 
   332  0891                     	;# 
   333  0892                     	;# 
   334  0892                     	;# 
   335  0892                     	;# 
   336  0893                     	;# 
   337  0893                     	;# 
   338  0893                     	;# 
   339  0893                     	;# 
   340  0893                     	;# 
   341  0893                     	;# 
   342  0894                     	;# 
   343  0894                     	;# 
   344  0894                     	;# 
   345  0895                     	;# 
   346  0895                     	;# 
   347  0895                     	;# 
   348  0896                     	;# 
   349  0896                     	;# 
   350  0896                     	;# 
   351  089B                     	;# 
   352  0911                     	;# 
   353  0912                     	;# 
   354  0913                     	;# 
   355  0914                     	;# 
   356  0915                     	;# 
   357  0916                     	;# 
   358  0918                     	;# 
   359  0919                     	;# 
   360  091A                     	;# 
   361  091B                     	;# 
   362  091C                     	;# 
   363  091D                     	;# 
   364  091E                     	;# 
   365  091F                     	;# 
   366  0E0F                     	;# 
   367  0E10                     	;# 
   368  0E11                     	;# 
   369  0E12                     	;# 
   370  0E13                     	;# 
   371  0E14                     	;# 
   372  0E15                     	;# 
   373  0E16                     	;# 
   374  0E17                     	;# 
   375  0E18                     	;# 
   376  0E19                     	;# 
   377  0E1A                     	;# 
   378  0E1B                     	;# 
   379  0E1C                     	;# 
   380  0E1D                     	;# 
   381  0E1E                     	;# 
   382  0E1F                     	;# 
   383  0E20                     	;# 
   384  0E21                     	;# 
   385  0E22                     	;# 
   386  0E24                     	;# 
   387  0E25                     	;# 
   388  0E28                     	;# 
   389  0E29                     	;# 
   390  0E2A                     	;# 
   391  0E2B                     	;# 
   392  0E2C                     	;# 
   393  0E2D                     	;# 
   394  0E2E                     	;# 
   395  0E2F                     	;# 
   396  0E90                     	;# 
   397  0E91                     	;# 
   398  0E92                     	;# 
   399  0E94                     	;# 
   400  0E95                     	;# 
   401  0EA0                     	;# 
   402  0EA1                     	;# 
   403  0EA2                     	;# 
   404  0EA3                     	;# 
   405  0EA4                     	;# 
   406  0EA5                     	;# 
   407  0F0F                     	;# 
   408  0F10                     	;# 
   409  0F11                     	;# 
   410  0F12                     	;# 
   411  0F13                     	;# 
   412  0F14                     	;# 
   413  0F15                     	;# 
   414  0F16                     	;# 
   415  0F17                     	;# 
   416  0F18                     	;# 
   417  0F19                     	;# 
   418  0F1A                     	;# 
   419  0F1B                     	;# 
   420  0F1C                     	;# 
   421  0F1D                     	;# 
   422  0F1E                     	;# 
   423  0F1F                     	;# 
   424  0F20                     	;# 
   425  0F21                     	;# 
   426  0F22                     	;# 
   427  0F23                     	;# 
   428  0F24                     	;# 
   429  0F25                     	;# 
   430  0F26                     	;# 
   431  0F27                     	;# 
   432  0F28                     	;# 
   433  0F29                     	;# 
   434  0F2A                     	;# 
   435  0F2B                     	;# 
   436  0F2C                     	;# 
   437  0F2D                     	;# 
   438  0F2E                     	;# 
   439  0F2F                     	;# 
   440  0F30                     	;# 
   441  0F31                     	;# 
   442  0F32                     	;# 
   443  0F33                     	;# 
   444  0F34                     	;# 
   445  0F35                     	;# 
   446  0F36                     	;# 
   447  0F37                     	;# 
   448  0FE4                     	;# 
   449  0FE5                     	;# 
   450  0FE6                     	;# 
   451  0FE7                     	;# 
   452  0FE8                     	;# 
   453  0FE9                     	;# 
   454  0FEA                     	;# 
   455  0FEB                     	;# 
   456  0FED                     	;# 
   457  0FEE                     	;# 
   458  0FEF                     	;# 
   459  0000                     	;# 
   460  0001                     	;# 
   461  0002                     	;# 
   462  0003                     	;# 
   463  0004                     	;# 
   464  0005                     	;# 
   465  0006                     	;# 
   466  0007                     	;# 
   467  0008                     	;# 
   468  0009                     	;# 
   469  000A                     	;# 
   470  000B                     	;# 
   471  000C                     	;# 
   472  000E                     	;# 
   473  0010                     	;# 
   474  0011                     	;# 
   475  0012                     	;# 
   476  0013                     	;# 
   477  0014                     	;# 
   478  0015                     	;# 
   479  0015                     	;# 
   480  0016                     	;# 
   481  0016                     	;# 
   482  0017                     	;# 
   483  0018                     	;# 
   484  0019                     	;# 
   485  0019                     	;# 
   486  001A                     	;# 
   487  001B                     	;# 
   488  001C                     	;# 
   489  001D                     	;# 
   490  001E                     	;# 
   491  001F                     	;# 
   492  008C                     	;# 
   493  008E                     	;# 
   494  0090                     	;# 
   495  0091                     	;# 
   496  0092                     	;# 
   497  0093                     	;# 
   498  0094                     	;# 
   499  0097                     	;# 
   500  009B                     	;# 
   501  009B                     	;# 
   502  009C                     	;# 
   503  009D                     	;# 
   504  009E                     	;# 
   505  009F                     	;# 
   506  010C                     	;# 
   507  010E                     	;# 
   508  0111                     	;# 
   509  0112                     	;# 
   510  0113                     	;# 
   511  0114                     	;# 
   512  0115                     	;# 
   513  0116                     	;# 
   514  0117                     	;# 
   515  0118                     	;# 
   516  0119                     	;# 
   517  018C                     	;# 
   518  018E                     	;# 
   519  0199                     	;# 
   520  0199                     	;# 
   521  0199                     	;# 
   522  019A                     	;# 
   523  019A                     	;# 
   524  019A                     	;# 
   525  019B                     	;# 
   526  019B                     	;# 
   527  019B                     	;# 
   528  019B                     	;# 
   529  019B                     	;# 
   530  019C                     	;# 
   531  019C                     	;# 
   532  019C                     	;# 
   533  019D                     	;# 
   534  019D                     	;# 
   535  019D                     	;# 
   536  019E                     	;# 
   537  019E                     	;# 
   538  019E                     	;# 
   539  019F                     	;# 
   540  019F                     	;# 
   541  019F                     	;# 
   542  019F                     	;# 
   543  019F                     	;# 
   544  020C                     	;# 
   545  020E                     	;# 
   546  0211                     	;# 
   547  0211                     	;# 
   548  0212                     	;# 
   549  0212                     	;# 
   550  0213                     	;# 
   551  0213                     	;# 
   552  0214                     	;# 
   553  0214                     	;# 
   554  0215                     	;# 
   555  0215                     	;# 
   556  0215                     	;# 
   557  0215                     	;# 
   558  0216                     	;# 
   559  0216                     	;# 
   560  0217                     	;# 
   561  0217                     	;# 
   562  0219                     	;# 
   563  021A                     	;# 
   564  021B                     	;# 
   565  021C                     	;# 
   566  021D                     	;# 
   567  021D                     	;# 
   568  021E                     	;# 
   569  021F                     	;# 
   570  028C                     	;# 
   571  028E                     	;# 
   572  0291                     	;# 
   573  0291                     	;# 
   574  0292                     	;# 
   575  0293                     	;# 
   576  0294                     	;# 
   577  0295                     	;# 
   578  0295                     	;# 
   579  0296                     	;# 
   580  0297                     	;# 
   581  0298                     	;# 
   582  029F                     	;# 
   583  030C                     	;# 
   584  030E                     	;# 
   585  0311                     	;# 
   586  0311                     	;# 
   587  0312                     	;# 
   588  0313                     	;# 
   589  0314                     	;# 
   590  0315                     	;# 
   591  0315                     	;# 
   592  0316                     	;# 
   593  0317                     	;# 
   594  0318                     	;# 
   595  038C                     	;# 
   596  038E                     	;# 
   597  0391                     	;# 
   598  0392                     	;# 
   599  0393                     	;# 
   600  0397                     	;# 
   601  0398                     	;# 
   602  0399                     	;# 
   603  039A                     	;# 
   604  039C                     	;# 
   605  039D                     	;# 
   606  039E                     	;# 
   607  039F                     	;# 
   608  0411                     	;# 
   609  0411                     	;# 
   610  0412                     	;# 
   611  0413                     	;# 
   612  0414                     	;# 
   613  0415                     	;# 
   614  0416                     	;# 
   615  0417                     	;# 
   616  0418                     	;# 
   617  0418                     	;# 
   618  0419                     	;# 
   619  041A                     	;# 
   620  041B                     	;# 
   621  041C                     	;# 
   622  041D                     	;# 
   623  041E                     	;# 
   624  041F                     	;# 
   625  0498                     	;# 
   626  0498                     	;# 
   627  0499                     	;# 
   628  049A                     	;# 
   629  049B                     	;# 
   630  049B                     	;# 
   631  049C                     	;# 
   632  049D                     	;# 
   633  049E                     	;# 
   634  049F                     	;# 
   635  0617                     	;# 
   636  0618                     	;# 
   637  0619                     	;# 
   638  0619                     	;# 
   639  061A                     	;# 
   640  061B                     	;# 
   641  061C                     	;# 
   642  061C                     	;# 
   643  061F                     	;# 
   644  0691                     	;# 
   645  0692                     	;# 
   646  0693                     	;# 
   647  0694                     	;# 
   648  0695                     	;# 
   649  0696                     	;# 
   650  0697                     	;# 
   651  0698                     	;# 
   652  0699                     	;# 
   653  0711                     	;# 
   654  0712                     	;# 
   655  0713                     	;# 
   656  0714                     	;# 
   657  0715                     	;# 
   658  0716                     	;# 
   659  0717                     	;# 
   660  0718                     	;# 
   661  0719                     	;# 
   662  0891                     	;# 
   663  0891                     	;# 
   664  0891                     	;# 
   665  0891                     	;# 
   666  0891                     	;# 
   667  0891                     	;# 
   668  0892                     	;# 
   669  0892                     	;# 
   670  0892                     	;# 
   671  0893                     	;# 
   672  0893                     	;# 
   673  0893                     	;# 
   674  0893                     	;# 
   675  0893                     	;# 
   676  0893                     	;# 
   677  0894                     	;# 
   678  0894                     	;# 
   679  0894                     	;# 
   680  0895                     	;# 
   681  0895                     	;# 
   682  0895                     	;# 
   683  0896                     	;# 
   684  0896                     	;# 
   685  0896                     	;# 
   686  089B                     	;# 
   687  0911                     	;# 
   688  0912                     	;# 
   689  0913                     	;# 
   690  0914                     	;# 
   691  0915                     	;# 
   692  0916                     	;# 
   693  0918                     	;# 
   694  0919                     	;# 
   695  091A                     	;# 
   696  091B                     	;# 
   697  091C                     	;# 
   698  091D                     	;# 
   699  091E                     	;# 
   700  091F                     	;# 
   701  0E0F                     	;# 
   702  0E10                     	;# 
   703  0E11                     	;# 
   704  0E12                     	;# 
   705  0E13                     	;# 
   706  0E14                     	;# 
   707  0E15                     	;# 
   708  0E16                     	;# 
   709  0E17                     	;# 
   710  0E18                     	;# 
   711  0E19                     	;# 
   712  0E1A                     	;# 
   713  0E1B                     	;# 
   714  0E1C                     	;# 
   715  0E1D                     	;# 
   716  0E1E                     	;# 
   717  0E1F                     	;# 
   718  0E20                     	;# 
   719  0E21                     	;# 
   720  0E22                     	;# 
   721  0E24                     	;# 
   722  0E25                     	;# 
   723  0E28                     	;# 
   724  0E29                     	;# 
   725  0E2A                     	;# 
   726  0E2B                     	;# 
   727  0E2C                     	;# 
   728  0E2D                     	;# 
   729  0E2E                     	;# 
   730  0E2F                     	;# 
   731  0E90                     	;# 
   732  0E91                     	;# 
   733  0E92                     	;# 
   734  0E94                     	;# 
   735  0E95                     	;# 
   736  0EA0                     	;# 
   737  0EA1                     	;# 
   738  0EA2                     	;# 
   739  0EA3                     	;# 
   740  0EA4                     	;# 
   741  0EA5                     	;# 
   742  0F0F                     	;# 
   743  0F10                     	;# 
   744  0F11                     	;# 
   745  0F12                     	;# 
   746  0F13                     	;# 
   747  0F14                     	;# 
   748  0F15                     	;# 
   749  0F16                     	;# 
   750  0F17                     	;# 
   751  0F18                     	;# 
   752  0F19                     	;# 
   753  0F1A                     	;# 
   754  0F1B                     	;# 
   755  0F1C                     	;# 
   756  0F1D                     	;# 
   757  0F1E                     	;# 
   758  0F1F                     	;# 
   759  0F20                     	;# 
   760  0F21                     	;# 
   761  0F22                     	;# 
   762  0F23                     	;# 
   763  0F24                     	;# 
   764  0F25                     	;# 
   765  0F26                     	;# 
   766  0F27                     	;# 
   767  0F28                     	;# 
   768  0F29                     	;# 
   769  0F2A                     	;# 
   770  0F2B                     	;# 
   771  0F2C                     	;# 
   772  0F2D                     	;# 
   773  0F2E                     	;# 
   774  0F2F                     	;# 
   775  0F30                     	;# 
   776  0F31                     	;# 
   777  0F32                     	;# 
   778  0F33                     	;# 
   779  0F34                     	;# 
   780  0F35                     	;# 
   781  0F36                     	;# 
   782  0F37                     	;# 
   783  0FE4                     	;# 
   784  0FE5                     	;# 
   785  0FE6                     	;# 
   786  0FE7                     	;# 
   787  0FE8                     	;# 
   788  0FE9                     	;# 
   789  0FEA                     	;# 
   790  0FEB                     	;# 
   791  0FED                     	;# 
   792  0FEE                     	;# 
   793  0FEF                     	;# 
   794  0000                     	;# 
   795  0001                     	;# 
   796  0002                     	;# 
   797  0003                     	;# 
   798  0004                     	;# 
   799  0005                     	;# 
   800  0006                     	;# 
   801  0007                     	;# 
   802  0008                     	;# 
   803  0009                     	;# 
   804  000A                     	;# 
   805  000B                     	;# 
   806  000C                     	;# 
   807  000E                     	;# 
   808  0010                     	;# 
   809  0011                     	;# 
   810  0012                     	;# 
   811  0013                     	;# 
   812  0014                     	;# 
   813  0015                     	;# 
   814  0015                     	;# 
   815  0016                     	;# 
   816  0016                     	;# 
   817  0017                     	;# 
   818  0018                     	;# 
   819  0019                     	;# 
   820  0019                     	;# 
   821  001A                     	;# 
   822  001B                     	;# 
   823  001C                     	;# 
   824  001D                     	;# 
   825  001E                     	;# 
   826  001F                     	;# 
   827  008C                     	;# 
   828  008E                     	;# 
   829  0090                     	;# 
   830  0091                     	;# 
   831  0092                     	;# 
   832  0093                     	;# 
   833  0094                     	;# 
   834  0097                     	;# 
   835  009B                     	;# 
   836  009B                     	;# 
   837  009C                     	;# 
   838  009D                     	;# 
   839  009E                     	;# 
   840  009F                     	;# 
   841  010C                     	;# 
   842  010E                     	;# 
   843  0111                     	;# 
   844  0112                     	;# 
   845  0113                     	;# 
   846  0114                     	;# 
   847  0115                     	;# 
   848  0116                     	;# 
   849  0117                     	;# 
   850  0118                     	;# 
   851  0119                     	;# 
   852  018C                     	;# 
   853  018E                     	;# 
   854  0199                     	;# 
   855  0199                     	;# 
   856  0199                     	;# 
   857  019A                     	;# 
   858  019A                     	;# 
   859  019A                     	;# 
   860  019B                     	;# 
   861  019B                     	;# 
   862  019B                     	;# 
   863  019B                     	;# 
   864  019B                     	;# 
   865  019C                     	;# 
   866  019C                     	;# 
   867  019C                     	;# 
   868  019D                     	;# 
   869  019D                     	;# 
   870  019D                     	;# 
   871  019E                     	;# 
   872  019E                     	;# 
   873  019E                     	;# 
   874  019F                     	;# 
   875  019F                     	;# 
   876  019F                     	;# 
   877  019F                     	;# 
   878  019F                     	;# 
   879  020C                     	;# 
   880  020E                     	;# 
   881  0211                     	;# 
   882  0211                     	;# 
   883  0212                     	;# 
   884  0212                     	;# 
   885  0213                     	;# 
   886  0213                     	;# 
   887  0214                     	;# 
   888  0214                     	;# 
   889  0215                     	;# 
   890  0215                     	;# 
   891  0215                     	;# 
   892  0215                     	;# 
   893  0216                     	;# 
   894  0216                     	;# 
   895  0217                     	;# 
   896  0217                     	;# 
   897  0219                     	;# 
   898  021A                     	;# 
   899  021B                     	;# 
   900  021C                     	;# 
   901  021D                     	;# 
   902  021D                     	;# 
   903  021E                     	;# 
   904  021F                     	;# 
   905  028C                     	;# 
   906  028E                     	;# 
   907  0291                     	;# 
   908  0291                     	;# 
   909  0292                     	;# 
   910  0293                     	;# 
   911  0294                     	;# 
   912  0295                     	;# 
   913  0295                     	;# 
   914  0296                     	;# 
   915  0297                     	;# 
   916  0298                     	;# 
   917  029F                     	;# 
   918  030C                     	;# 
   919  030E                     	;# 
   920  0311                     	;# 
   921  0311                     	;# 
   922  0312                     	;# 
   923  0313                     	;# 
   924  0314                     	;# 
   925  0315                     	;# 
   926  0315                     	;# 
   927  0316                     	;# 
   928  0317                     	;# 
   929  0318                     	;# 
   930  038C                     	;# 
   931  038E                     	;# 
   932  0391                     	;# 
   933  0392                     	;# 
   934  0393                     	;# 
   935  0397                     	;# 
   936  0398                     	;# 
   937  0399                     	;# 
   938  039A                     	;# 
   939  039C                     	;# 
   940  039D                     	;# 
   941  039E                     	;# 
   942  039F                     	;# 
   943  0411                     	;# 
   944  0411                     	;# 
   945  0412                     	;# 
   946  0413                     	;# 
   947  0414                     	;# 
   948  0415                     	;# 
   949  0416                     	;# 
   950  0417                     	;# 
   951  0418                     	;# 
   952  0418                     	;# 
   953  0419                     	;# 
   954  041A                     	;# 
   955  041B                     	;# 
   956  041C                     	;# 
   957  041D                     	;# 
   958  041E                     	;# 
   959  041F                     	;# 
   960  0498                     	;# 
   961  0498                     	;# 
   962  0499                     	;# 
   963  049A                     	;# 
   964  049B                     	;# 
   965  049B                     	;# 
   966  049C                     	;# 
   967  049D                     	;# 
   968  049E                     	;# 
   969  049F                     	;# 
   970  0617                     	;# 
   971  0618                     	;# 
   972  0619                     	;# 
   973  0619                     	;# 
   974  061A                     	;# 
   975  061B                     	;# 
   976  061C                     	;# 
   977  061C                     	;# 
   978  061F                     	;# 
   979  0691                     	;# 
   980  0692                     	;# 
   981  0693                     	;# 
   982  0694                     	;# 
   983  0695                     	;# 
   984  0696                     	;# 
   985  0697                     	;# 
   986  0698                     	;# 
   987  0699                     	;# 
   988  0711                     	;# 
   989  0712                     	;# 
   990  0713                     	;# 
   991  0714                     	;# 
   992  0715                     	;# 
   993  0716                     	;# 
   994  0717                     	;# 
   995  0718                     	;# 
   996  0719                     	;# 
   997  0891                     	;# 
   998  0891                     	;# 
   999  0891                     	;# 
  1000  0891                     	;# 
  1001  0891                     	;# 
  1002  0891                     	;# 
  1003  0892                     	;# 
  1004  0892                     	;# 
  1005  0892                     	;# 
  1006  0893                     	;# 
  1007  0893                     	;# 
  1008  0893                     	;# 
  1009  0893                     	;# 
  1010  0893                     	;# 
  1011  0893                     	;# 
  1012  0894                     	;# 
  1013  0894                     	;# 
  1014  0894                     	;# 
  1015  0895                     	;# 
  1016  0895                     	;# 
  1017  0895                     	;# 
  1018  0896                     	;# 
  1019  0896                     	;# 
  1020  0896                     	;# 
  1021  089B                     	;# 
  1022  0911                     	;# 
  1023  0912                     	;# 
  1024  0913                     	;# 
  1025  0914                     	;# 
  1026  0915                     	;# 
  1027  0916                     	;# 
  1028  0918                     	;# 
  1029  0919                     	;# 
  1030  091A                     	;# 
  1031  091B                     	;# 
  1032  091C                     	;# 
  1033  091D                     	;# 
  1034  091E                     	;# 
  1035  091F                     	;# 
  1036  0E0F                     	;# 
  1037  0E10                     	;# 
  1038  0E11                     	;# 
  1039  0E12                     	;# 
  1040  0E13                     	;# 
  1041  0E14                     	;# 
  1042  0E15                     	;# 
  1043  0E16                     	;# 
  1044  0E17                     	;# 
  1045  0E18                     	;# 
  1046  0E19                     	;# 
  1047  0E1A                     	;# 
  1048  0E1B                     	;# 
  1049  0E1C                     	;# 
  1050  0E1D                     	;# 
  1051  0E1E                     	;# 
  1052  0E1F                     	;# 
  1053  0E20                     	;# 
  1054  0E21                     	;# 
  1055  0E22                     	;# 
  1056  0E24                     	;# 
  1057  0E25                     	;# 
  1058  0E28                     	;# 
  1059  0E29                     	;# 
  1060  0E2A                     	;# 
  1061  0E2B                     	;# 
  1062  0E2C                     	;# 
  1063  0E2D                     	;# 
  1064  0E2E                     	;# 
  1065  0E2F                     	;# 
  1066  0E90                     	;# 
  1067  0E91                     	;# 
  1068  0E92                     	;# 
  1069  0E94                     	;# 
  1070  0E95                     	;# 
  1071  0EA0                     	;# 
  1072  0EA1                     	;# 
  1073  0EA2                     	;# 
  1074  0EA3                     	;# 
  1075  0EA4                     	;# 
  1076  0EA5                     	;# 
  1077  0F0F                     	;# 
  1078  0F10                     	;# 
  1079  0F11                     	;# 
  1080  0F12                     	;# 
  1081  0F13                     	;# 
  1082  0F14                     	;# 
  1083  0F15                     	;# 
  1084  0F16                     	;# 
  1085  0F17                     	;# 
  1086  0F18                     	;# 
  1087  0F19                     	;# 
  1088  0F1A                     	;# 
  1089  0F1B                     	;# 
  1090  0F1C                     	;# 
  1091  0F1D                     	;# 
  1092  0F1E                     	;# 
  1093  0F1F                     	;# 
  1094  0F20                     	;# 
  1095  0F21                     	;# 
  1096  0F22                     	;# 
  1097  0F23                     	;# 
  1098  0F24                     	;# 
  1099  0F25                     	;# 
  1100  0F26                     	;# 
  1101  0F27                     	;# 
  1102  0F28                     	;# 
  1103  0F29                     	;# 
  1104  0F2A                     	;# 
  1105  0F2B                     	;# 
  1106  0F2C                     	;# 
  1107  0F2D                     	;# 
  1108  0F2E                     	;# 
  1109  0F2F                     	;# 
  1110  0F30                     	;# 
  1111  0F31                     	;# 
  1112  0F32                     	;# 
  1113  0F33                     	;# 
  1114  0F34                     	;# 
  1115  0F35                     	;# 
  1116  0F36                     	;# 
  1117  0F37                     	;# 
  1118  0FE4                     	;# 
  1119  0FE5                     	;# 
  1120  0FE6                     	;# 
  1121  0FE7                     	;# 
  1122  0FE8                     	;# 
  1123  0FE9                     	;# 
  1124  0FEA                     	;# 
  1125  0FEB                     	;# 
  1126  0FED                     	;# 
  1127  0FEE                     	;# 
  1128  0FEF                     	;# 
  1129  0000                     	;# 
  1130  0001                     	;# 
  1131  0002                     	;# 
  1132  0003                     	;# 
  1133  0004                     	;# 
  1134  0005                     	;# 
  1135  0006                     	;# 
  1136  0007                     	;# 
  1137  0008                     	;# 
  1138  0009                     	;# 
  1139  000A                     	;# 
  1140  000B                     	;# 
  1141  000C                     	;# 
  1142  000E                     	;# 
  1143  0010                     	;# 
  1144  0011                     	;# 
  1145  0012                     	;# 
  1146  0013                     	;# 
  1147  0014                     	;# 
  1148  0015                     	;# 
  1149  0015                     	;# 
  1150  0016                     	;# 
  1151  0016                     	;# 
  1152  0017                     	;# 
  1153  0018                     	;# 
  1154  0019                     	;# 
  1155  0019                     	;# 
  1156  001A                     	;# 
  1157  001B                     	;# 
  1158  001C                     	;# 
  1159  001D                     	;# 
  1160  001E                     	;# 
  1161  001F                     	;# 
  1162  008C                     	;# 
  1163  008E                     	;# 
  1164  0090                     	;# 
  1165  0091                     	;# 
  1166  0092                     	;# 
  1167  0093                     	;# 
  1168  0094                     	;# 
  1169  0097                     	;# 
  1170  009B                     	;# 
  1171  009B                     	;# 
  1172  009C                     	;# 
  1173  009D                     	;# 
  1174  009E                     	;# 
  1175  009F                     	;# 
  1176  010C                     	;# 
  1177  010E                     	;# 
  1178  0111                     	;# 
  1179  0112                     	;# 
  1180  0113                     	;# 
  1181  0114                     	;# 
  1182  0115                     	;# 
  1183  0116                     	;# 
  1184  0117                     	;# 
  1185  0118                     	;# 
  1186  0119                     	;# 
  1187  018C                     	;# 
  1188  018E                     	;# 
  1189  0199                     	;# 
  1190  0199                     	;# 
  1191  0199                     	;# 
  1192  019A                     	;# 
  1193  019A                     	;# 
  1194  019A                     	;# 
  1195  019B                     	;# 
  1196  019B                     	;# 
  1197  019B                     	;# 
  1198  019B                     	;# 
  1199  019B                     	;# 
  1200  019C                     	;# 
  1201  019C                     	;# 
  1202  019C                     	;# 
  1203  019D                     	;# 
  1204  019D                     	;# 
  1205  019D                     	;# 
  1206  019E                     	;# 
  1207  019E                     	;# 
  1208  019E                     	;# 
  1209  019F                     	;# 
  1210  019F                     	;# 
  1211  019F                     	;# 
  1212  019F                     	;# 
  1213  019F                     	;# 
  1214  020C                     	;# 
  1215  020E                     	;# 
  1216  0211                     	;# 
  1217  0211                     	;# 
  1218  0212                     	;# 
  1219  0212                     	;# 
  1220  0213                     	;# 
  1221  0213                     	;# 
  1222  0214                     	;# 
  1223  0214                     	;# 
  1224  0215                     	;# 
  1225  0215                     	;# 
  1226  0215                     	;# 
  1227  0215                     	;# 
  1228  0216                     	;# 
  1229  0216                     	;# 
  1230  0217                     	;# 
  1231  0217                     	;# 
  1232  0219                     	;# 
  1233  021A                     	;# 
  1234  021B                     	;# 
  1235  021C                     	;# 
  1236  021D                     	;# 
  1237  021D                     	;# 
  1238  021E                     	;# 
  1239  021F                     	;# 
  1240  028C                     	;# 
  1241  028E                     	;# 
  1242  0291                     	;# 
  1243  0291                     	;# 
  1244  0292                     	;# 
  1245  0293                     	;# 
  1246  0294                     	;# 
  1247  0295                     	;# 
  1248  0295                     	;# 
  1249  0296                     	;# 
  1250  0297                     	;# 
  1251  0298                     	;# 
  1252  029F                     	;# 
  1253  030C                     	;# 
  1254  030E                     	;# 
  1255  0311                     	;# 
  1256  0311                     	;# 
  1257  0312                     	;# 
  1258  0313                     	;# 
  1259  0314                     	;# 
  1260  0315                     	;# 
  1261  0315                     	;# 
  1262  0316                     	;# 
  1263  0317                     	;# 
  1264  0318                     	;# 
  1265  038C                     	;# 
  1266  038E                     	;# 
  1267  0391                     	;# 
  1268  0392                     	;# 
  1269  0393                     	;# 
  1270  0397                     	;# 
  1271  0398                     	;# 
  1272  0399                     	;# 
  1273  039A                     	;# 
  1274  039C                     	;# 
  1275  039D                     	;# 
  1276  039E                     	;# 
  1277  039F                     	;# 
  1278  0411                     	;# 
  1279  0411                     	;# 
  1280  0412                     	;# 
  1281  0413                     	;# 
  1282  0414                     	;# 
  1283  0415                     	;# 
  1284  0416                     	;# 
  1285  0417                     	;# 
  1286  0418                     	;# 
  1287  0418                     	;# 
  1288  0419                     	;# 
  1289  041A                     	;# 
  1290  041B                     	;# 
  1291  041C                     	;# 
  1292  041D                     	;# 
  1293  041E                     	;# 
  1294  041F                     	;# 
  1295  0498                     	;# 
  1296  0498                     	;# 
  1297  0499                     	;# 
  1298  049A                     	;# 
  1299  049B                     	;# 
  1300  049B                     	;# 
  1301  049C                     	;# 
  1302  049D                     	;# 
  1303  049E                     	;# 
  1304  049F                     	;# 
  1305  0617                     	;# 
  1306  0618                     	;# 
  1307  0619                     	;# 
  1308  0619                     	;# 
  1309  061A                     	;# 
  1310  061B                     	;# 
  1311  061C                     	;# 
  1312  061C                     	;# 
  1313  061F                     	;# 
  1314  0691                     	;# 
  1315  0692                     	;# 
  1316  0693                     	;# 
  1317  0694                     	;# 
  1318  0695                     	;# 
  1319  0696                     	;# 
  1320  0697                     	;# 
  1321  0698                     	;# 
  1322  0699                     	;# 
  1323  0711                     	;# 
  1324  0712                     	;# 
  1325  0713                     	;# 
  1326  0714                     	;# 
  1327  0715                     	;# 
  1328  0716                     	;# 
  1329  0717                     	;# 
  1330  0718                     	;# 
  1331  0719                     	;# 
  1332  0891                     	;# 
  1333  0891                     	;# 
  1334  0891                     	;# 
  1335  0891                     	;# 
  1336  0891                     	;# 
  1337  0891                     	;# 
  1338  0892                     	;# 
  1339  0892                     	;# 
  1340  0892                     	;# 
  1341  0893                     	;# 
  1342  0893                     	;# 
  1343  0893                     	;# 
  1344  0893                     	;# 
  1345  0893                     	;# 
  1346  0893                     	;# 
  1347  0894                     	;# 
  1348  0894                     	;# 
  1349  0894                     	;# 
  1350  0895                     	;# 
  1351  0895                     	;# 
  1352  0895                     	;# 
  1353  0896                     	;# 
  1354  0896                     	;# 
  1355  0896                     	;# 
  1356  089B                     	;# 
  1357  0911                     	;# 
  1358  0912                     	;# 
  1359  0913                     	;# 
  1360  0914                     	;# 
  1361  0915                     	;# 
  1362  0916                     	;# 
  1363  0918                     	;# 
  1364  0919                     	;# 
  1365  091A                     	;# 
  1366  091B                     	;# 
  1367  091C                     	;# 
  1368  091D                     	;# 
  1369  091E                     	;# 
  1370  091F                     	;# 
  1371  0E0F                     	;# 
  1372  0E10                     	;# 
  1373  0E11                     	;# 
  1374  0E12                     	;# 
  1375  0E13                     	;# 
  1376  0E14                     	;# 
  1377  0E15                     	;# 
  1378  0E16                     	;# 
  1379  0E17                     	;# 
  1380  0E18                     	;# 
  1381  0E19                     	;# 
  1382  0E1A                     	;# 
  1383  0E1B                     	;# 
  1384  0E1C                     	;# 
  1385  0E1D                     	;# 
  1386  0E1E                     	;# 
  1387  0E1F                     	;# 
  1388  0E20                     	;# 
  1389  0E21                     	;# 
  1390  0E22                     	;# 
  1391  0E24                     	;# 
  1392  0E25                     	;# 
  1393  0E28                     	;# 
  1394  0E29                     	;# 
  1395  0E2A                     	;# 
  1396  0E2B                     	;# 
  1397  0E2C                     	;# 
  1398  0E2D                     	;# 
  1399  0E2E                     	;# 
  1400  0E2F                     	;# 
  1401  0E90                     	;# 
  1402  0E91                     	;# 
  1403  0E92                     	;# 
  1404  0E94                     	;# 
  1405  0E95                     	;# 
  1406  0EA0                     	;# 
  1407  0EA1                     	;# 
  1408  0EA2                     	;# 
  1409  0EA3                     	;# 
  1410  0EA4                     	;# 
  1411  0EA5                     	;# 
  1412  0F0F                     	;# 
  1413  0F10                     	;# 
  1414  0F11                     	;# 
  1415  0F12                     	;# 
  1416  0F13                     	;# 
  1417  0F14                     	;# 
  1418  0F15                     	;# 
  1419  0F16                     	;# 
  1420  0F17                     	;# 
  1421  0F18                     	;# 
  1422  0F19                     	;# 
  1423  0F1A                     	;# 
  1424  0F1B                     	;# 
  1425  0F1C                     	;# 
  1426  0F1D                     	;# 
  1427  0F1E                     	;# 
  1428  0F1F                     	;# 
  1429  0F20                     	;# 
  1430  0F21                     	;# 
  1431  0F22                     	;# 
  1432  0F23                     	;# 
  1433  0F24                     	;# 
  1434  0F25                     	;# 
  1435  0F26                     	;# 
  1436  0F27                     	;# 
  1437  0F28                     	;# 
  1438  0F29                     	;# 
  1439  0F2A                     	;# 
  1440  0F2B                     	;# 
  1441  0F2C                     	;# 
  1442  0F2D                     	;# 
  1443  0F2E                     	;# 
  1444  0F2F                     	;# 
  1445  0F30                     	;# 
  1446  0F31                     	;# 
  1447  0F32                     	;# 
  1448  0F33                     	;# 
  1449  0F34                     	;# 
  1450  0F35                     	;# 
  1451  0F36                     	;# 
  1452  0F37                     	;# 
  1453  0FE4                     	;# 
  1454  0FE5                     	;# 
  1455  0FE6                     	;# 
  1456  0FE7                     	;# 
  1457  0FE8                     	;# 
  1458  0FE9                     	;# 
  1459  0FEA                     	;# 
  1460  0FEB                     	;# 
  1461  0FED                     	;# 
  1462  0FEE                     	;# 
  1463  0FEF                     	;# 
  1464  0000                     	;# 
  1465  0001                     	;# 
  1466  0002                     	;# 
  1467  0003                     	;# 
  1468  0004                     	;# 
  1469  0005                     	;# 
  1470  0006                     	;# 
  1471  0007                     	;# 
  1472  0008                     	;# 
  1473  0009                     	;# 
  1474  000A                     	;# 
  1475  000B                     	;# 
  1476  000C                     	;# 
  1477  000E                     	;# 
  1478  0010                     	;# 
  1479  0011                     	;# 
  1480  0012                     	;# 
  1481  0013                     	;# 
  1482  0014                     	;# 
  1483  0015                     	;# 
  1484  0015                     	;# 
  1485  0016                     	;# 
  1486  0016                     	;# 
  1487  0017                     	;# 
  1488  0018                     	;# 
  1489  0019                     	;# 
  1490  0019                     	;# 
  1491  001A                     	;# 
  1492  001B                     	;# 
  1493  001C                     	;# 
  1494  001D                     	;# 
  1495  001E                     	;# 
  1496  001F                     	;# 
  1497  008C                     	;# 
  1498  008E                     	;# 
  1499  0090                     	;# 
  1500  0091                     	;# 
  1501  0092                     	;# 
  1502  0093                     	;# 
  1503  0094                     	;# 
  1504  0097                     	;# 
  1505  009B                     	;# 
  1506  009B                     	;# 
  1507  009C                     	;# 
  1508  009D                     	;# 
  1509  009E                     	;# 
  1510  009F                     	;# 
  1511  010C                     	;# 
  1512  010E                     	;# 
  1513  0111                     	;# 
  1514  0112                     	;# 
  1515  0113                     	;# 
  1516  0114                     	;# 
  1517  0115                     	;# 
  1518  0116                     	;# 
  1519  0117                     	;# 
  1520  0118                     	;# 
  1521  0119                     	;# 
  1522  018C                     	;# 
  1523  018E                     	;# 
  1524  0199                     	;# 
  1525  0199                     	;# 
  1526  0199                     	;# 
  1527  019A                     	;# 
  1528  019A                     	;# 
  1529  019A                     	;# 
  1530  019B                     	;# 
  1531  019B                     	;# 
  1532  019B                     	;# 
  1533  019B                     	;# 
  1534  019B                     	;# 
  1535  019C                     	;# 
  1536  019C                     	;# 
  1537  019C                     	;# 
  1538  019D                     	;# 
  1539  019D                     	;# 
  1540  019D                     	;# 
  1541  019E                     	;# 
  1542  019E                     	;# 
  1543  019E                     	;# 
  1544  019F                     	;# 
  1545  019F                     	;# 
  1546  019F                     	;# 
  1547  019F                     	;# 
  1548  019F                     	;# 
  1549  020C                     	;# 
  1550  020E                     	;# 
  1551  0211                     	;# 
  1552  0211                     	;# 
  1553  0212                     	;# 
  1554  0212                     	;# 
  1555  0213                     	;# 
  1556  0213                     	;# 
  1557  0214                     	;# 
  1558  0214                     	;# 
  1559  0215                     	;# 
  1560  0215                     	;# 
  1561  0215                     	;# 
  1562  0215                     	;# 
  1563  0216                     	;# 
  1564  0216                     	;# 
  1565  0217                     	;# 
  1566  0217                     	;# 
  1567  0219                     	;# 
  1568  021A                     	;# 
  1569  021B                     	;# 
  1570  021C                     	;# 
  1571  021D                     	;# 
  1572  021D                     	;# 
  1573  021E                     	;# 
  1574  021F                     	;# 
  1575  028C                     	;# 
  1576  028E                     	;# 
  1577  0291                     	;# 
  1578  0291                     	;# 
  1579  0292                     	;# 
  1580  0293                     	;# 
  1581  0294                     	;# 
  1582  0295                     	;# 
  1583  0295                     	;# 
  1584  0296                     	;# 
  1585  0297                     	;# 
  1586  0298                     	;# 
  1587  029F                     	;# 
  1588  030C                     	;# 
  1589  030E                     	;# 
  1590  0311                     	;# 
  1591  0311                     	;# 
  1592  0312                     	;# 
  1593  0313                     	;# 
  1594  0314                     	;# 
  1595  0315                     	;# 
  1596  0315                     	;# 
  1597  0316                     	;# 
  1598  0317                     	;# 
  1599  0318                     	;# 
  1600  038C                     	;# 
  1601  038E                     	;# 
  1602  0391                     	;# 
  1603  0392                     	;# 
  1604  0393                     	;# 
  1605  0397                     	;# 
  1606  0398                     	;# 
  1607  0399                     	;# 
  1608  039A                     	;# 
  1609  039C                     	;# 
  1610  039D                     	;# 
  1611  039E                     	;# 
  1612  039F                     	;# 
  1613  0411                     	;# 
  1614  0411                     	;# 
  1615  0412                     	;# 
  1616  0413                     	;# 
  1617  0414                     	;# 
  1618  0415                     	;# 
  1619  0416                     	;# 
  1620  0417                     	;# 
  1621  0418                     	;# 
  1622  0418                     	;# 
  1623  0419                     	;# 
  1624  041A                     	;# 
  1625  041B                     	;# 
  1626  041C                     	;# 
  1627  041D                     	;# 
  1628  041E                     	;# 
  1629  041F                     	;# 
  1630  0498                     	;# 
  1631  0498                     	;# 
  1632  0499                     	;# 
  1633  049A                     	;# 
  1634  049B                     	;# 
  1635  049B                     	;# 
  1636  049C                     	;# 
  1637  049D                     	;# 
  1638  049E                     	;# 
  1639  049F                     	;# 
  1640  0617                     	;# 
  1641  0618                     	;# 
  1642  0619                     	;# 
  1643  0619                     	;# 
  1644  061A                     	;# 
  1645  061B                     	;# 
  1646  061C                     	;# 
  1647  061C                     	;# 
  1648  061F                     	;# 
  1649  0691                     	;# 
  1650  0692                     	;# 
  1651  0693                     	;# 
  1652  0694                     	;# 
  1653  0695                     	;# 
  1654  0696                     	;# 
  1655  0697                     	;# 
  1656  0698                     	;# 
  1657  0699                     	;# 
  1658  0711                     	;# 
  1659  0712                     	;# 
  1660  0713                     	;# 
  1661  0714                     	;# 
  1662  0715                     	;# 
  1663  0716                     	;# 
  1664  0717                     	;# 
  1665  0718                     	;# 
  1666  0719                     	;# 
  1667  0891                     	;# 
  1668  0891                     	;# 
  1669  0891                     	;# 
  1670  0891                     	;# 
  1671  0891                     	;# 
  1672  0891                     	;# 
  1673  0892                     	;# 
  1674  0892                     	;# 
  1675  0892                     	;# 
  1676  0893                     	;# 
  1677  0893                     	;# 
  1678  0893                     	;# 
  1679  0893                     	;# 
  1680  0893                     	;# 
  1681  0893                     	;# 
  1682  0894                     	;# 
  1683  0894                     	;# 
  1684  0894                     	;# 
  1685  0895                     	;# 
  1686  0895                     	;# 
  1687  0895                     	;# 
  1688  0896                     	;# 
  1689  0896                     	;# 
  1690  0896                     	;# 
  1691  089B                     	;# 
  1692  0911                     	;# 
  1693  0912                     	;# 
  1694  0913                     	;# 
  1695  0914                     	;# 
  1696  0915                     	;# 
  1697  0916                     	;# 
  1698  0918                     	;# 
  1699  0919                     	;# 
  1700  091A                     	;# 
  1701  091B                     	;# 
  1702  091C                     	;# 
  1703  091D                     	;# 
  1704  091E                     	;# 
  1705  091F                     	;# 
  1706  0E0F                     	;# 
  1707  0E10                     	;# 
  1708  0E11                     	;# 
  1709  0E12                     	;# 
  1710  0E13                     	;# 
  1711  0E14                     	;# 
  1712  0E15                     	;# 
  1713  0E16                     	;# 
  1714  0E17                     	;# 
  1715  0E18                     	;# 
  1716  0E19                     	;# 
  1717  0E1A                     	;# 
  1718  0E1B                     	;# 
  1719  0E1C                     	;# 
  1720  0E1D                     	;# 
  1721  0E1E                     	;# 
  1722  0E1F                     	;# 
  1723  0E20                     	;# 
  1724  0E21                     	;# 
  1725  0E22                     	;# 
  1726  0E24                     	;# 
  1727  0E25                     	;# 
  1728  0E28                     	;# 
  1729  0E29                     	;# 
  1730  0E2A                     	;# 
  1731  0E2B                     	;# 
  1732  0E2C                     	;# 
  1733  0E2D                     	;# 
  1734  0E2E                     	;# 
  1735  0E2F                     	;# 
  1736  0E90                     	;# 
  1737  0E91                     	;# 
  1738  0E92                     	;# 
  1739  0E94                     	;# 
  1740  0E95                     	;# 
  1741  0EA0                     	;# 
  1742  0EA1                     	;# 
  1743  0EA2                     	;# 
  1744  0EA3                     	;# 
  1745  0EA4                     	;# 
  1746  0EA5                     	;# 
  1747  0F0F                     	;# 
  1748  0F10                     	;# 
  1749  0F11                     	;# 
  1750  0F12                     	;# 
  1751  0F13                     	;# 
  1752  0F14                     	;# 
  1753  0F15                     	;# 
  1754  0F16                     	;# 
  1755  0F17                     	;# 
  1756  0F18                     	;# 
  1757  0F19                     	;# 
  1758  0F1A                     	;# 
  1759  0F1B                     	;# 
  1760  0F1C                     	;# 
  1761  0F1D                     	;# 
  1762  0F1E                     	;# 
  1763  0F1F                     	;# 
  1764  0F20                     	;# 
  1765  0F21                     	;# 
  1766  0F22                     	;# 
  1767  0F23                     	;# 
  1768  0F24                     	;# 
  1769  0F25                     	;# 
  1770  0F26                     	;# 
  1771  0F27                     	;# 
  1772  0F28                     	;# 
  1773  0F29                     	;# 
  1774  0F2A                     	;# 
  1775  0F2B                     	;# 
  1776  0F2C                     	;# 
  1777  0F2D                     	;# 
  1778  0F2E                     	;# 
  1779  0F2F                     	;# 
  1780  0F30                     	;# 
  1781  0F31                     	;# 
  1782  0F32                     	;# 
  1783  0F33                     	;# 
  1784  0F34                     	;# 
  1785  0F35                     	;# 
  1786  0F36                     	;# 
  1787  0F37                     	;# 
  1788  0FE4                     	;# 
  1789  0FE5                     	;# 
  1790  0FE6                     	;# 
  1791  0FE7                     	;# 
  1792  0FE8                     	;# 
  1793  0FE9                     	;# 
  1794  0FEA                     	;# 
  1795  0FEB                     	;# 
  1796  0FED                     	;# 
  1797  0FEE                     	;# 
  1798  0FEF                     	;# 
  1799                           
  1800                           	psect	idataBANK1
  1801  07FF                     __pidataBANK1:	
  1802                           
  1803                           ;initializer for _romData
  1804  07FF  3420               	retlw	low (_romDataMap| (0+512))
  1805                           
  1806                           	psect	stringtext1
  1807  1800                     __pstringtext1:	
  1808  1800                     _dpowers:	
  1809  1800  3401               	retlw	1
  1810  1801  3400               	retlw	0
  1811  1802  3400               	retlw	0
  1812  1803  3400               	retlw	0
  1813  1804  340A               	retlw	10
  1814  1805  3400               	retlw	0
  1815  1806  3400               	retlw	0
  1816  1807  3400               	retlw	0
  1817  1808  3464               	retlw	100
  1818  1809  3400               	retlw	0
  1819  180A  3400               	retlw	0
  1820  180B  3400               	retlw	0
  1821  180C  34E8               	retlw	232
  1822  180D  3403               	retlw	3
  1823  180E  3400               	retlw	0
  1824  180F  3400               	retlw	0
  1825  1810  3410               	retlw	16
  1826  1811  3427               	retlw	39
  1827  1812  3400               	retlw	0
  1828  1813  3400               	retlw	0
  1829  1814  34A0               	retlw	160
  1830  1815  3486               	retlw	134
  1831  1816  3401               	retlw	1
  1832  1817  3400               	retlw	0
  1833  1818  3440               	retlw	64
  1834  1819  3442               	retlw	66
  1835  181A  340F               	retlw	15
  1836  181B  3400               	retlw	0
  1837  181C  3480               	retlw	128
  1838  181D  3496               	retlw	150
  1839  181E  3498               	retlw	152
  1840  181F  3400               	retlw	0
  1841  1820  3400               	retlw	0
  1842  1821  34E1               	retlw	225
  1843  1822  34F5               	retlw	245
  1844  1823  3405               	retlw	5
  1845  1824  3400               	retlw	0
  1846  1825  34CA               	retlw	202
  1847  1826  349A               	retlw	154
  1848  1827  343B               	retlw	59
  1849  1828                     __end_of_dpowers:	
  1850                           
  1851                           	psect	stringtext2
  1852  1834                     __pstringtext2:	
  1853  1834                     _statuses:	
  1854  1834  3400               	retlw	0
  1855  1835  3401               	retlw	1
  1856  1836  3402               	retlw	2
  1857  1837  3403               	retlw	3
  1858  1838  3400               	retlw	0
  1859  1839  3401               	retlw	1
  1860  183A  3402               	retlw	2
  1861  183B  3403               	retlw	3
  1862  183C  3404               	retlw	4
  1863  183D  3405               	retlw	5
  1864  183E                     __end_of_statuses:	
  1865                           
  1866                           	psect	stringtext3
  1867  184B                     __pstringtext3:	
  1868  184B                     _n_ADDRESS_P0:	
  1869  184B  34AD               	retlw	173
  1870  184C  3487               	retlw	135
  1871  184D  3466               	retlw	102
  1872  184E  34BC               	retlw	188
  1873  184F  34BB               	retlw	187
  1874  1850                     __end_of_n_ADDRESS_P0:	
  1875                           
  1876                           	psect	stringtext4
  1877  1828                     __pstringtext4:	
  1878  1828                     _n_ADDRESS_MUL:	
  1879  1828  3421               	retlw	33
  1880  1829                     __end_of_n_ADDRESS_MUL:	
  1881  000B                     _INTCONbits	set	11
  1882  0010                     _PIR0bits	set	16
  1883  000E                     _PORTCbits	set	14
  1884  000C                     _PORTAbits	set	12
  1885  009E                     _ADCON1bits	set	158
  1886  009C                     _ADRESH	set	156
  1887  009B                     _ADRESL	set	155
  1888  009D                     _ADCON0bits	set	157
  1889  0090                     _PIE0bits	set	144
  1890  0097                     _WDTCONbits	set	151
  1891  008E                     _TRISCbits	set	142
  1892  008C                     _TRISAbits	set	140
  1893  0117                     _FVRCONbits	set	279
  1894  018E                     _ANSELCbits	set	398
  1895  018C                     _ANSELAbits	set	396
  1896  018E                     _ANSELC	set	398
  1897  018C                     _ANSELA	set	396
  1898  020C                     _WPUAbits	set	524
  1899  020E                     _WPUC	set	526
  1900  020C                     _WPUA	set	524
  1901  0211                     _SSP1BUF	set	529
  1902  0214                     _SSP1STATbits	set	532
  1903  0215                     _SSP1CON1bits	set	533
  1904  028C                     _ODCONAbits	set	652
  1905  028E                     _ODCONC	set	654
  1906  028C                     _ODCONA	set	652
  1907  038E                     _INLVLC	set	910
  1908  038C                     _INLVLA	set	908
  1909  0919                     _OSCCON1bits	set	2329
  1910  0EA0                     _RC0PPSbits	set	3744
  1911  0EA2                     _RC2PPSbits	set	3746
  1912  0EA1                     _RC1PPSbits	set	3745
  1913  1829                     STR_10:	
  1914  1829  3425               	retlw	37	;'%'
  1915  182A  346C               	retlw	108	;'l'
  1916  182B  3475               	retlw	117	;'u'
  1917  182C  342E               	retlw	46	;'.'
  1918  182D  3425               	retlw	37	;'%'
  1919  182E  3436               	retlw	54	;'6'
  1920  182F  342E               	retlw	46	;'.'
  1921  1830  3436               	retlw	54	;'6'
  1922  1831  346C               	retlw	108	;'l'
  1923  1832  3475               	retlw	117	;'u'
  1924  1833  3400               	retlw	0
  1925                           
  1926                           	psect	stringtext5
  1927  183E                     __pstringtext5:	
  1928  183E                     STR_5:	
  1929  183E  3441               	retlw	65	;'A'
  1930  183F  344E               	retlw	78	;'N'
  1931  1840  3443               	retlw	67	;'C'
  1932  1841  3433               	retlw	51	;'3'
  1933  1842  346D               	retlw	109	;'m'
  1934  1843  3456               	retlw	86	;'V'
  1935  1844  3400               	retlw	0
  1936                           
  1937                           	psect	stringtext6
  1938  1845                     __pstringtext6:	
  1939  1845                     STR_7:	
  1940  1845  3452               	retlw	82	;'R'
  1941  1846  3446               	retlw	70	;'F'
  1942  1847  3450               	retlw	80	;'P'
  1943  1848  3457               	retlw	87	;'W'
  1944  1849  3452               	retlw	82	;'R'
  1945  184A  3400               	retlw	0
  1946                           
  1947                           	psect	stringtext7
  1948  1850                     __pstringtext7:	
  1949  1850                     STR_3:	
  1950  1850  3444               	retlw	68	;'D'
  1951  1851  3442               	retlw	66	;'B'
  1952  1852  3447               	retlw	71	;'G'
  1953  1853  3431               	retlw	49	;'1'
  1954  1854  3400               	retlw	0
  1955                           
  1956                           	psect	stringtext8
  1957  1855                     __pstringtext8:	
  1958  1855                     STR_6:	
  1959  1855  3454               	retlw	84	;'T'
  1960  1856  3445               	retlw	69	;'E'
  1961  1857  344D               	retlw	77	;'M'
  1962  1858  3450               	retlw	80	;'P'
  1963  1859  3400               	retlw	0
  1964                           
  1965                           	psect	stringtext9
  1966  185A                     __pstringtext9:	
  1967  185A                     STR_4:	
  1968  185A  3456               	retlw	86	;'V'
  1969  185B  3442               	retlw	66	;'B'
  1970  185C  3441               	retlw	65	;'A'
  1971  185D  3454               	retlw	84	;'T'
  1972  185E  3400               	retlw	0
  1973                           
  1974                           	psect	stringtext10
  1975  185F                     __pstringtext10:	
  1976  185F                     STR_9:	
  1977  185F  3442               	retlw	66	;'B'
  1978  1860  344F               	retlw	79	;'O'
  1979  1861  344F               	retlw	79	;'O'
  1980  1862  3454               	retlw	84	;'T'
  1981  1863  3400               	retlw	0
  1982                           
  1983                           	psect	stringtext11
  1984  1864                     __pstringtext11:	
  1985  1864                     STR_8:	
  1986  1864  3455               	retlw	85	;'U'
  1987  1865  3448               	retlw	72	;'H'
  1988  1866  3431               	retlw	49	;'1'
  1989  1867  3400               	retlw	0
  1990                           
  1991                           	psect	stringtext12
  1992  1868                     __pstringtext12:	
  1993  1868                     STR_1:	
  1994  1868  342F               	retlw	47	;'/'
  1995  1869  3400               	retlw	0
  1996                           
  1997                           	psect	stringtext13
  1998  0000                     __pstringtext13:	
  1999  1868                     
  2000                           ; #config settings
  2001  0000                     
  2002                           	psect	cinit
  2003  0011                     start_initialization:	
  2004  0011                     __initialization:	
  2005                           
  2006                           ; Initialize objects allocated to BANK1
  2007  0011  0021               	movlb	1	; select bank1
  2008  0012  3187  27FF  3180   	fcall	__pidataBANK1	;fetch initializer
  2009  0015  00EB               	movwf	__pdataBANK1& (0+127)
  2010                           
  2011                           ; Clear objects allocated to COMMON
  2012  0016  01FD               	clrf	__pbssCOMMON& (0+127)
  2013                           
  2014                           ; Clear objects allocated to BANK1
  2015  0017  01E7               	clrf	__pbssBANK1& (0+127)
  2016  0018  01E8               	clrf	(__pbssBANK1+1)& (0+127)
  2017  0019  01E9               	clrf	(__pbssBANK1+2)& (0+127)
  2018  001A  01EA               	clrf	(__pbssBANK1+3)& (0+127)
  2019                           
  2020                           ; Clear objects allocated to BANK2
  2021  001B  3051               	movlw	low __pbssBANK2
  2022  001C  0084               	movwf	4
  2023  001D  3001               	movlw	high __pbssBANK2
  2024  001E  0085               	movwf	5
  2025  001F  3015               	movlw	21
  2026  0020  3195  2525  3180   	fcall	clear_ram0
  2027                           
  2028                           ; Clear objects allocated to BANK3
  2029  0023  30A0               	movlw	low __pbssBANK3
  2030  0024  0084               	movwf	4
  2031  0025  3001               	movlw	high __pbssBANK3
  2032  0026  0085               	movwf	5
  2033  0027  3042               	movlw	66
  2034  0028  3195  2525  3180   	fcall	clear_ram0
  2035                           
  2036                           ; Clear objects allocated to BANK4
  2037  002B  3020               	movlw	low __pbssBANK4
  2038  002C  0084               	movwf	4
  2039  002D  3002               	movlw	high __pbssBANK4
  2040  002E  0085               	movwf	5
  2041  002F  301C               	movlw	28
  2042  0030  3195  2525         	fcall	clear_ram0
  2043  0032                     end_of_initialization:	
  2044                           ;End of C runtime variable initialization code
  2045                           
  2046  0032                     __end_of__initialization:	
  2047  0032  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  2048  0033  0020               	movlb	0
  2049  0034  318B  2B97         	ljmp	_main	;jump to C main() function
  2050                           
  2051                           	psect	bssCOMMON
  2052  007D                     __pbssCOMMON:	
  2053  007D                     _sleepLoop:	
  2054  007D                     	ds	1
  2055                           
  2056                           	psect	bssBANK1
  2057  00E7                     __pbssBANK1:	
  2058  00E7                     _status:	
  2059  00E7                     	ds	4
  2060                           
  2061                           	psect	dataBANK1
  2062  00EB                     __pdataBANK1:	
  2063  00EB                     _romData:	
  2064  00EB                     	ds	1
  2065                           
  2066                           	psect	bssBANK2
  2067  0151                     __pbssBANK2:	
  2068  0151                     _counter:	
  2069  0151                     	ds	4
  2070  0155                     ftoa@buf:	
  2071  0155                     	ds	17
  2072                           
  2073                           	psect	bssBANK3
  2074  01A0                     __pbssBANK3:	
  2075  01A0                     _RXPacket:	
  2076  01A0                     	ds	33
  2077  01C1                     _TXPacket:	
  2078  01C1                     	ds	33
  2079                           
  2080                           	psect	bssBANK4
  2081  0220                     __pbssBANK4:	
  2082  0220                     _romDataMap:	
  2083  0220                     	ds	28
  2084                           
  2085                           	psect	clrtext
  2086  1525                     clear_ram0:	
  2087                           ;	Called with FSR0 containing the base address, and
  2088                           ;	WREG with the size to clear
  2089                           
  2090  1525  0064               	clrwdt	;clear the watchdog before getting into this loop
  2091  1526                     clrloop0:	
  2092  1526  0180               	clrf	0	;clear RAM location pointed to by FSR
  2093  1527  3101               	addfsr 0,1
  2094  1528  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  2095  1529  2D26               	goto	clrloop0	;have we reached the end yet?
  2096  152A  3400               	retlw	0	;all done for this memory range, return
  2097                           
  2098                           	psect	cstackBANK2
  2099  0120                     __pcstackBANK2:	
  2100  0120                     loop@vt:	
  2101                           
  2102                           ; 3 bytes @ 0x0
  2103  0120                     	ds	3
  2104  0123                     loop@ta:	
  2105                           
  2106                           ; 3 bytes @ 0x3
  2107  0123                     	ds	3
  2108  0126                     _loop$1980:	
  2109                           
  2110                           ; 3 bytes @ 0x6
  2111  0126                     	ds	3
  2112  0129                     _loop$1981:	
  2113                           
  2114                           ; 3 bytes @ 0x9
  2115  0129                     	ds	3
  2116  012C                     _loop$1982:	
  2117                           
  2118                           ; 3 bytes @ 0xC
  2119  012C                     	ds	3
  2120  012F                     loop@rfSetup:	
  2121                           
  2122                           ; 1 bytes @ 0xF
  2123  012F                     	ds	1
  2124  0130                     loop@packet:	
  2125                           
  2126                           ; 33 bytes @ 0x10
  2127  0130                     	ds	33
  2128                           
  2129                           	psect	cstackBANK1
  2130  00A0                     __pcstackBANK1:	
  2131  00A0                     ___fttol@sign1:	
  2132                           
  2133                           ; 1 bytes @ 0x0
  2134  00A0                     	ds	1
  2135  00A1                     ___fttol@lval:	
  2136                           
  2137                           ; 4 bytes @ 0x1
  2138  00A1                     	ds	4
  2139  00A5                     ___fttol@exp1:	
  2140                           
  2141                           ; 1 bytes @ 0x5
  2142  00A5                     	ds	1
  2143  00A6                     ?_ftoa:	
  2144  00A6                     ftoa@f:	
  2145                           ; 1 bytes @ 0x6
  2146                           
  2147                           
  2148                           ; 3 bytes @ 0x6
  2149  00A6                     	ds	3
  2150  00A9                     ftoa@status:	
  2151                           
  2152                           ; 1 bytes @ 0x9
  2153  00A9                     	ds	1
  2154  00AA                     ftoa@rem:	
  2155                           
  2156                           ; 4 bytes @ 0xA
  2157  00AA                     	ds	4
  2158  00AE                     ftoa@l:	
  2159                           
  2160                           ; 4 bytes @ 0xE
  2161  00AE                     	ds	4
  2162  00B2                     ftoa@cp:	
  2163                           
  2164                           ; 1 bytes @ 0x12
  2165  00B2                     	ds	1
  2166  00B3                     ?_strcat:	
  2167  00B3                     strcat@to:	
  2168                           ; 2 bytes @ 0x13
  2169                           
  2170                           
  2171                           ; 2 bytes @ 0x13
  2172  00B3                     	ds	2
  2173  00B5                     strcat@from:	
  2174                           
  2175                           ; 2 bytes @ 0x15
  2176  00B5                     	ds	2
  2177  00B7                     strcat@cp:	
  2178                           
  2179                           ; 2 bytes @ 0x17
  2180  00B7                     	ds	2
  2181  00B9                     ?_sendMessage:	
  2182  00B9                     sendMessage@packet:	
  2183                           ; 1 bytes @ 0x19
  2184                           
  2185                           
  2186                           ; 2 bytes @ 0x19
  2187  00B9                     	ds	2
  2188  00BB                     sendMessage@topic:	
  2189                           
  2190                           ; 2 bytes @ 0x1B
  2191  00BB                     	ds	2
  2192  00BD                     sendMessage@value:	
  2193                           
  2194                           ; 3 bytes @ 0x1D
  2195  00BD                     	ds	3
  2196  00C0                     ??_sendMessage:	
  2197                           
  2198                           ; 1 bytes @ 0x20
  2199  00C0                     	ds	1
  2200  00C1                     sendMessage@status:	
  2201                           
  2202                           ; 2 bytes @ 0x21
  2203  00C1                     	ds	2
  2204  00C3                     ??_loop:	
  2205                           
  2206                           ; 1 bytes @ 0x23
  2207  00C3                     	ds	1
  2208  00C4                     ??_main:	
  2209                           
  2210                           ; 1 bytes @ 0x24
  2211  00C4                     	ds	1
  2212  00C5                     main@pipe:	
  2213                           
  2214                           ; 1 bytes @ 0x25
  2215  00C5                     	ds	1
  2216  00C6                     main@packet:	
  2217                           
  2218                           ; 33 bytes @ 0x26
  2219  00C6                     	ds	33
  2220                           
  2221                           	psect	cstackCOMMON
  2222  0070                     __pcstackCOMMON:	
  2223  0070                     ?_isdigit:	
  2224  0070                     ?_nrf24l01ISR:	
  2225                           ; 1 bit 
  2226                           
  2227  0070                     ?_nrf24l01Init:	
  2228                           ; 1 bytes @ 0x0
  2229                           
  2230  0070                     ?_nrf24l01SetTXPipe:	
  2231                           ; 1 bytes @ 0x0
  2232                           
  2233  0070                     ?_nrf24l01Service:	
  2234                           ; 1 bytes @ 0x0
  2235                           
  2236  0070                     ?_nrf24l01CELow:	
  2237                           ; 1 bytes @ 0x0
  2238                           
  2239  0070                     ??_nrf24l01CELow:	
  2240                           ; 1 bytes @ 0x0
  2241                           
  2242  0070                     ?_nrf24l01CEHigh:	
  2243                           ; 1 bytes @ 0x0
  2244                           
  2245  0070                     ??_nrf24l01CEHigh:	
  2246                           ; 1 bytes @ 0x0
  2247                           
  2248  0070                     ?_nrf24l01CSLow:	
  2249                           ; 1 bytes @ 0x0
  2250                           
  2251  0070                     ??_nrf24l01CSLow:	
  2252                           ; 1 bytes @ 0x0
  2253                           
  2254  0070                     ?_nrf24l01CSHigh:	
  2255                           ; 1 bytes @ 0x0
  2256                           
  2257  0070                     ??_nrf24l01CSHigh:	
  2258                           ; 1 bytes @ 0x0
  2259                           
  2260  0070                     ?_nrf24l01InterfaceInit:	
  2261                           ; 1 bytes @ 0x0
  2262                           
  2263  0070                     ?_nrf24l01SPISend:	
  2264                           ; 1 bytes @ 0x0
  2265                           
  2266  0070                     ??_nrf24l01SPISend:	
  2267                           ; 1 bytes @ 0x0
  2268                           
  2269  0070                     ?_nrf24l01SPIStart:	
  2270                           ; 1 bytes @ 0x0
  2271                           
  2272  0070                     ??_nrf24l01SPIStart:	
  2273                           ; 1 bytes @ 0x0
  2274                           
  2275  0070                     ?_nrf24l01SPIEnd:	
  2276                           ; 1 bytes @ 0x0
  2277                           
  2278  0070                     ??_nrf24l01SPIEnd:	
  2279                           ; 1 bytes @ 0x0
  2280                           
  2281  0070                     ?_enableInterrupts:	
  2282                           ; 1 bytes @ 0x0
  2283                           
  2284  0070                     ??_enableInterrupts:	
  2285                           ; 1 bytes @ 0x0
  2286                           
  2287  0070                     ?_ISR:	
  2288                           ; 1 bytes @ 0x0
  2289                           
  2290  0070                     ?_doWDTSleep:	
  2291                           ; 1 bytes @ 0x0
  2292                           
  2293  0070                     ?_loop:	
  2294                           ; 1 bytes @ 0x0
  2295                           
  2296  0070                     ?_nrf24l01GetPipe:	
  2297                           ; 1 bytes @ 0x0
  2298                           
  2299  0070                     ?_main:	
  2300                           ; 1 bytes @ 0x0
  2301                           
  2302  0070                     ?_nrf24l01SetRXMode:	
  2303                           ; 1 bytes @ 0x0
  2304                           
  2305  0070                     ?_nrf24l01SetRXPipe:	
  2306                           ; 1 bytes @ 0x0
  2307                           
  2308  0070                     ?_nrf24l01InitRegisters:	
  2309                           ; 1 bytes @ 0x0
  2310                           
  2311  0070                     ?i1_nrf24l01SetRXMode:	
  2312                           ; 1 bytes @ 0x0
  2313                           
  2314  0070                     ?i1_nrf24l01Service:	
  2315                           ; 1 bytes @ 0x0
  2316                           
  2317  0070                     ?i1_memset:	
  2318                           ; 1 bytes @ 0x0
  2319                           
  2320  0070                     ?i1_strcmp:	
  2321                           ; 1 bytes @ 0x0
  2322                           
  2323  0070                     ?i1_strlen:	
  2324                           ; 2 bytes @ 0x0
  2325                           
  2326  0070                     nrf24l01SPISend@data:	
  2327                           ; 2 bytes @ 0x0
  2328                           
  2329  0070                     enableInterrupts@enable:	
  2330                           ; 1 bytes @ 0x0
  2331                           
  2332  0070                     i1strcmp@s2:	
  2333                           ; 1 bytes @ 0x0
  2334                           
  2335  0070                     i1memset@p1:	
  2336                           ; 1 bytes @ 0x0
  2337                           
  2338  0070                     i1strlen@s:	
  2339                           ; 2 bytes @ 0x0
  2340                           
  2341                           
  2342                           ; 2 bytes @ 0x0
  2343  0070                     	ds	1
  2344  0071                     ?i1_nrf24l01Send:	
  2345  0071                     i1nrf24l01Send@data:	
  2346                           ; 1 bytes @ 0x1
  2347                           
  2348                           
  2349                           ; 1 bytes @ 0x1
  2350  0071                     	ds	1
  2351  0072                     ??i1_nrf24l01Send:	
  2352  0072                     ??i1_strcmp:	
  2353                           ; 1 bytes @ 0x2
  2354                           
  2355  0072                     ??i1_strlen:	
  2356                           ; 1 bytes @ 0x2
  2357                           
  2358  0072                     i1memset@c:	
  2359                           ; 1 bytes @ 0x2
  2360                           
  2361                           
  2362                           ; 2 bytes @ 0x2
  2363  0072                     	ds	1
  2364  0073                     i1nrf24l01Send@command:	
  2365  0073                     i1strcmp@r:	
  2366                           ; 1 bytes @ 0x3
  2367                           
  2368                           
  2369                           ; 1 bytes @ 0x3
  2370  0073                     	ds	1
  2371  0074                     ??i1_nrf24l01SetRXMode:	
  2372  0074                     i1strcmp@s1:	
  2373                           ; 1 bytes @ 0x4
  2374                           
  2375  0074                     i1memset@n:	
  2376                           ; 1 bytes @ 0x4
  2377                           
  2378  0074                     i1strlen@cp:	
  2379                           ; 2 bytes @ 0x4
  2380                           
  2381                           
  2382                           ; 2 bytes @ 0x4
  2383  0074                     	ds	1
  2384  0075                     i1nrf24l01SetRXMode@rxMode:	
  2385                           
  2386                           ; 1 bytes @ 0x5
  2387  0075                     	ds	1
  2388  0076                     ??i1_memset:	
  2389  0076                     i1memset@p:	
  2390                           ; 1 bytes @ 0x6
  2391                           
  2392                           
  2393                           ; 2 bytes @ 0x6
  2394  0076                     	ds	2
  2395  0078                     ??i1_nrf24l01Service:	
  2396                           
  2397                           ; 1 bytes @ 0x8
  2398  0078                     	ds	2
  2399  007A                     i1nrf24l01Service@width:	
  2400                           
  2401                           ; 1 bytes @ 0xA
  2402  007A                     	ds	1
  2403  007B                     i1nrf24l01Service@i:	
  2404                           
  2405                           ; 1 bytes @ 0xB
  2406  007B                     	ds	1
  2407  007C                     ??_nrf24l01ISR:	
  2408                           
  2409                           ; 1 bytes @ 0xC
  2410  007C                     	ds	1
  2411  007D                     ??_ISR:	
  2412                           
  2413                           	psect	cstackBANK0
  2414  0020                     __pcstackBANK0:	
  2415                           ; 1 bytes @ 0xD
  2416                           
  2417  0020                     ?___ftge:	
  2418  0020                     ?_nrf24l01Send:	
  2419                           ; 1 bit 
  2420                           
  2421  0020                     ??_isdigit:	
  2422                           ; 1 bytes @ 0x0
  2423                           
  2424  0020                     ??_nrf24l01InterfaceInit:	
  2425                           ; 1 bytes @ 0x0
  2426                           
  2427  0020                     ?_sleepMs:	
  2428                           ; 1 bytes @ 0x0
  2429                           
  2430  0020                     ??_doWDTSleep:	
  2431                           ; 1 bytes @ 0x0
  2432                           
  2433  0020                     ?___bmul:	
  2434                           ; 1 bytes @ 0x0
  2435                           
  2436  0020                     ?_memset:	
  2437                           ; 1 bytes @ 0x0
  2438                           
  2439  0020                     ?_strcpy:	
  2440                           ; 2 bytes @ 0x0
  2441                           
  2442  0020                     ?_strlen:	
  2443                           ; 2 bytes @ 0x0
  2444                           
  2445  0020                     ?_strcmp:	
  2446                           ; 2 bytes @ 0x0
  2447                           
  2448  0020                     ?___wmul:	
  2449                           ; 2 bytes @ 0x0
  2450                           
  2451  0020                     ?___lwmod:	
  2452                           ; 2 bytes @ 0x0
  2453                           
  2454  0020                     ?___ftpack:	
  2455                           ; 2 bytes @ 0x0
  2456                           
  2457  0020                     ?___lldiv:	
  2458                           ; 3 bytes @ 0x0
  2459                           
  2460  0020                     nrf24l01Send@data:	
  2461                           ; 4 bytes @ 0x0
  2462                           
  2463  0020                     ___bmul@multiplicand:	
  2464                           ; 1 bytes @ 0x0
  2465                           
  2466  0020                     _isdigit$1728:	
  2467                           ; 1 bytes @ 0x0
  2468                           
  2469  0020                     strcmp@s2:	
  2470                           ; 1 bytes @ 0x0
  2471                           
  2472  0020                     sleepMs@milliseconds:	
  2473                           ; 1 bytes @ 0x0
  2474                           
  2475  0020                     ___wmul@multiplier:	
  2476                           ; 2 bytes @ 0x0
  2477                           
  2478  0020                     ___lwmod@divisor:	
  2479                           ; 2 bytes @ 0x0
  2480                           
  2481  0020                     memset@p1:	
  2482                           ; 2 bytes @ 0x0
  2483                           
  2484  0020                     strcpy@to:	
  2485                           ; 2 bytes @ 0x0
  2486                           
  2487  0020                     strlen@s:	
  2488                           ; 2 bytes @ 0x0
  2489                           
  2490  0020                     ___ftpack@arg:	
  2491                           ; 2 bytes @ 0x0
  2492                           
  2493  0020                     ___ftge@ff1:	
  2494                           ; 3 bytes @ 0x0
  2495                           
  2496  0020                     ___lldiv@divisor:	
  2497                           ; 3 bytes @ 0x0
  2498                           
  2499                           
  2500                           ; 4 bytes @ 0x0
  2501  0020                     	ds	1
  2502  0021                     ??_nrf24l01Send:	
  2503  0021                     ??___bmul:	
  2504                           ; 1 bytes @ 0x1
  2505                           
  2506  0021                     doWDTSleep@wdtps:	
  2507                           ; 1 bytes @ 0x1
  2508                           
  2509  0021                     isdigit@c:	
  2510                           ; 1 bytes @ 0x1
  2511                           
  2512                           
  2513                           ; 1 bytes @ 0x1
  2514  0021                     	ds	1
  2515  0022                     ??_strlen:	
  2516  0022                     ??_strcmp:	
  2517                           ; 1 bytes @ 0x2
  2518                           
  2519  0022                     ??_sleepMs:	
  2520                           ; 1 bytes @ 0x2
  2521                           
  2522  0022                     nrf24l01Send@command:	
  2523                           ; 1 bytes @ 0x2
  2524                           
  2525  0022                     ___bmul@product:	
  2526                           ; 1 bytes @ 0x2
  2527                           
  2528  0022                     ___wmul@multiplicand:	
  2529                           ; 1 bytes @ 0x2
  2530                           
  2531  0022                     ___lwmod@dividend:	
  2532                           ; 2 bytes @ 0x2
  2533                           
  2534  0022                     memset@c:	
  2535                           ; 2 bytes @ 0x2
  2536                           
  2537  0022                     strcpy@from:	
  2538                           ; 2 bytes @ 0x2
  2539                           
  2540                           
  2541                           ; 2 bytes @ 0x2
  2542  0022                     	ds	1
  2543  0023                     ??_nrf24l01SetRXMode:	
  2544  0023                     ??_nrf24l01SetRXPipe:	
  2545                           ; 1 bytes @ 0x3
  2546                           
  2547  0023                     ___bmul@multiplier:	
  2548                           ; 1 bytes @ 0x3
  2549                           
  2550  0023                     ___ftpack@exp:	
  2551                           ; 1 bytes @ 0x3
  2552                           
  2553  0023                     strcmp@r:	
  2554                           ; 1 bytes @ 0x3
  2555                           
  2556  0023                     ___ftge@ff2:	
  2557                           ; 1 bytes @ 0x3
  2558                           
  2559                           
  2560                           ; 3 bytes @ 0x3
  2561  0023                     	ds	1
  2562  0024                     ??_strcpy:	
  2563  0024                     ??_nrf24l01SetTXPipe:	
  2564                           ; 1 bytes @ 0x4
  2565                           
  2566  0024                     ??___wmul:	
  2567                           ; 1 bytes @ 0x4
  2568                           
  2569  0024                     ??___lwmod:	
  2570                           ; 1 bytes @ 0x4
  2571                           
  2572  0024                     sleepMs@wdtps:	
  2573                           ; 1 bytes @ 0x4
  2574                           
  2575  0024                     nrf24l01SetRXMode@rxMode:	
  2576                           ; 1 bytes @ 0x4
  2577                           
  2578  0024                     ___ftpack@sign:	
  2579                           ; 1 bytes @ 0x4
  2580                           
  2581  0024                     strcmp@s1:	
  2582                           ; 1 bytes @ 0x4
  2583                           
  2584  0024                     ___wmul@product:	
  2585                           ; 1 bytes @ 0x4
  2586                           
  2587  0024                     memset@n:	
  2588                           ; 2 bytes @ 0x4
  2589                           
  2590  0024                     strcpy@cp:	
  2591                           ; 2 bytes @ 0x4
  2592                           
  2593  0024                     strlen@cp:	
  2594                           ; 2 bytes @ 0x4
  2595                           
  2596  0024                     ___lldiv@dividend:	
  2597                           ; 2 bytes @ 0x4
  2598                           
  2599                           
  2600                           ; 4 bytes @ 0x4
  2601  0024                     	ds	1
  2602  0025                     ??___ftpack:	
  2603  0025                     ?_sleep:	
  2604                           ; 1 bytes @ 0x5
  2605                           
  2606  0025                     nrf24l01SetRXPipe@pipe:	
  2607                           ; 1 bytes @ 0x5
  2608                           
  2609  0025                     ___lwmod@counter:	
  2610                           ; 1 bytes @ 0x5
  2611                           
  2612  0025                     sleep@milliseconds:	
  2613                           ; 1 bytes @ 0x5
  2614                           
  2615                           
  2616                           ; 2 bytes @ 0x5
  2617  0025                     	ds	1
  2618  0026                     ??_memset:	
  2619  0026                     ??_nrf24l01GetPipe:	
  2620                           ; 1 bytes @ 0x6
  2621                           
  2622  0026                     ??___ftge:	
  2623                           ; 1 bytes @ 0x6
  2624                           
  2625  0026                     nrf24l01SetTXPipe@pipe:	
  2626                           ; 1 bytes @ 0x6
  2627                           
  2628  0026                     nrf24l01SetRXPipe@enRXAddr:	
  2629                           ; 1 bytes @ 0x6
  2630                           
  2631  0026                     memset@p:	
  2632                           ; 1 bytes @ 0x6
  2633                           
  2634                           
  2635                           ; 2 bytes @ 0x6
  2636  0026                     	ds	1
  2637  0027                     ??_sleep:	
  2638  0027                     ??_nrf24l01InitRegisters:	
  2639                           ; 1 bytes @ 0x7
  2640                           
  2641                           
  2642                           ; 1 bytes @ 0x7
  2643  0027                     	ds	1
  2644  0028                     ??_nrf24l01Service:	
  2645  0028                     ??___lldiv:	
  2646                           ; 1 bytes @ 0x8
  2647                           
  2648  0028                     ?___awtoft:	
  2649                           ; 1 bytes @ 0x8
  2650                           
  2651  0028                     ?___lbtoft:	
  2652                           ; 3 bytes @ 0x8
  2653                           
  2654  0028                     ?___lltoft:	
  2655                           ; 3 bytes @ 0x8
  2656                           
  2657  0028                     ?___lwtoft:	
  2658                           ; 3 bytes @ 0x8
  2659                           
  2660  0028                     nrf24l01GetPipe@pipe:	
  2661                           ; 3 bytes @ 0x8
  2662                           
  2663  0028                     ___awtoft@c:	
  2664                           ; 1 bytes @ 0x8
  2665                           
  2666  0028                     ___lwtoft@c:	
  2667                           ; 2 bytes @ 0x8
  2668                           
  2669  0028                     ___lltoft@c:	
  2670                           ; 2 bytes @ 0x8
  2671                           
  2672                           
  2673                           ; 4 bytes @ 0x8
  2674  0028                     	ds	1
  2675  0029                     nrf24l01GetPipe@name:	
  2676  0029                     nrf24l01InitRegisters@channel:	
  2677                           ; 1 bytes @ 0x9
  2678                           
  2679  0029                     ___lldiv@quotient:	
  2680                           ; 1 bytes @ 0x9
  2681                           
  2682                           
  2683                           ; 4 bytes @ 0x9
  2684  0029                     	ds	1
  2685  002A                     nrf24l01GetPipe@i:	
  2686  002A                     nrf24l01Service@width:	
  2687                           ; 1 bytes @ 0xA
  2688                           
  2689  002A                     nrf24l01InitRegisters@setupAW:	
  2690                           ; 1 bytes @ 0xA
  2691                           
  2692                           
  2693                           ; 1 bytes @ 0xA
  2694  002A                     	ds	1
  2695  002B                     ??___awtoft:	
  2696  002B                     ??___lbtoft:	
  2697                           ; 1 bytes @ 0xB
  2698                           
  2699  002B                     ??___lwtoft:	
  2700                           ; 1 bytes @ 0xB
  2701                           
  2702  002B                     nrf24l01Service@i:	
  2703                           ; 1 bytes @ 0xB
  2704                           
  2705  002B                     nrf24l01InitRegisters@feature:	
  2706                           ; 1 bytes @ 0xB
  2707                           
  2708                           
  2709                           ; 1 bytes @ 0xB
  2710  002B                     	ds	1
  2711  002C                     ?_nrf24l01SendPacket:	
  2712  002C                     ??___lltoft:	
  2713                           ; 1 bytes @ 0xC
  2714                           
  2715  002C                     nrf24l01InitRegisters@rfSetup:	
  2716                           ; 1 bytes @ 0xC
  2717                           
  2718  002C                     nrf24l01SendPacket@txPacket:	
  2719                           ; 1 bytes @ 0xC
  2720                           
  2721                           
  2722                           ; 2 bytes @ 0xC
  2723  002C                     	ds	1
  2724  002D                     nrf24l01InitRegisters@enAA:	
  2725  002D                     ___lldiv@counter:	
  2726                           ; 1 bytes @ 0xD
  2727                           
  2728  002D                     ___awtoft@sign:	
  2729                           ; 1 bytes @ 0xD
  2730                           
  2731  002D                     ___lltoft@exp:	
  2732                           ; 1 bytes @ 0xD
  2733                           
  2734                           
  2735                           ; 1 bytes @ 0xD
  2736  002D                     	ds	1
  2737  002E                     ??_nrf24l01SendPacket:	
  2738  002E                     ?___ftadd:	
  2739                           ; 1 bytes @ 0xE
  2740                           
  2741  002E                     ?___llmod:	
  2742                           ; 3 bytes @ 0xE
  2743                           
  2744  002E                     nrf24l01InitRegisters@DynPD:	
  2745                           ; 4 bytes @ 0xE
  2746                           
  2747  002E                     ___ftadd@f1:	
  2748                           ; 1 bytes @ 0xE
  2749                           
  2750  002E                     ___llmod@divisor:	
  2751                           ; 3 bytes @ 0xE
  2752                           
  2753                           
  2754                           ; 4 bytes @ 0xE
  2755  002E                     	ds	1
  2756  002F                     ___lbtoft@c:	
  2757  002F                     nrf24l01InitRegisters@i:	
  2758                           ; 1 bytes @ 0xF
  2759                           
  2760                           
  2761                           ; 2 bytes @ 0xF
  2762  002F                     	ds	2
  2763  0031                     ??_nrf24l01Init:	
  2764  0031                     ___ftadd@f2:	
  2765                           ; 1 bytes @ 0x11
  2766                           
  2767                           
  2768                           ; 3 bytes @ 0x11
  2769  0031                     	ds	1
  2770  0032                     ___llmod@dividend:	
  2771                           
  2772                           ; 4 bytes @ 0x12
  2773  0032                     	ds	2
  2774  0034                     ??___ftadd:	
  2775                           
  2776                           ; 1 bytes @ 0x14
  2777  0034                     	ds	2
  2778  0036                     ??___llmod:	
  2779                           
  2780                           ; 1 bytes @ 0x16
  2781  0036                     	ds	1
  2782  0037                     ___llmod@counter:	
  2783                           
  2784                           ; 1 bytes @ 0x17
  2785  0037                     	ds	1
  2786  0038                     ?_sprintf:	
  2787  0038                     ___ftadd@sign:	
  2788                           ; 2 bytes @ 0x18
  2789                           
  2790  0038                     sprintf@f:	
  2791                           ; 1 bytes @ 0x18
  2792                           
  2793                           
  2794                           ; 2 bytes @ 0x18
  2795  0038                     	ds	1
  2796  0039                     ___ftadd@exp2:	
  2797                           
  2798                           ; 1 bytes @ 0x19
  2799  0039                     	ds	1
  2800  003A                     ___ftadd@exp1:	
  2801                           
  2802                           ; 1 bytes @ 0x1A
  2803  003A                     	ds	1
  2804  003B                     ?___ftdiv:	
  2805  003B                     ?___ftsub:	
  2806                           ; 3 bytes @ 0x1B
  2807                           
  2808  003B                     ___ftdiv@f2:	
  2809                           ; 3 bytes @ 0x1B
  2810                           
  2811  003B                     ___ftsub@f2:	
  2812                           ; 3 bytes @ 0x1B
  2813                           
  2814                           
  2815                           ; 3 bytes @ 0x1B
  2816  003B                     	ds	3
  2817  003E                     ___ftdiv@f1:	
  2818  003E                     ___ftsub@f1:	
  2819                           ; 3 bytes @ 0x1E
  2820                           
  2821                           
  2822                           ; 3 bytes @ 0x1E
  2823  003E                     	ds	3
  2824  0041                     ??___ftdiv:	
  2825  0041                     ??___ftsub:	
  2826                           ; 1 bytes @ 0x21
  2827                           
  2828                           
  2829                           ; 1 bytes @ 0x21
  2830  0041                     	ds	1
  2831  0042                     ??_sprintf:	
  2832                           
  2833                           ; 1 bytes @ 0x22
  2834  0042                     	ds	3
  2835  0045                     ___ftdiv@cntr:	
  2836                           
  2837                           ; 1 bytes @ 0x25
  2838  0045                     	ds	1
  2839  0046                     ___ftdiv@f3:	
  2840                           
  2841                           ; 3 bytes @ 0x26
  2842  0046                     	ds	2
  2843  0048                     sprintf@flag:	
  2844                           
  2845                           ; 1 bytes @ 0x28
  2846  0048                     	ds	1
  2847  0049                     sprintf@ap:	
  2848  0049                     ___ftdiv@exp:	
  2849                           ; 1 bytes @ 0x29
  2850                           
  2851                           
  2852                           ; 1 bytes @ 0x29
  2853  0049                     	ds	1
  2854  004A                     ___ftdiv@sign:	
  2855  004A                     sprintf@val:	
  2856                           ; 1 bytes @ 0x2A
  2857                           
  2858                           
  2859                           ; 4 bytes @ 0x2A
  2860  004A                     	ds	1
  2861  004B                     ?_getADCValue:	
  2862                           
  2863                           ; 3 bytes @ 0x2B
  2864  004B                     	ds	3
  2865  004E                     ??_getADCValue:	
  2866  004E                     sprintf@sp:	
  2867                           ; 1 bytes @ 0x2E
  2868                           
  2869                           
  2870                           ; 1 bytes @ 0x2E
  2871  004E                     	ds	1
  2872  004F                     sprintf@width:	
  2873                           
  2874                           ; 2 bytes @ 0x2F
  2875  004F                     	ds	2
  2876  0051                     getADCValue@adcLoop:	
  2877  0051                     sprintf@prec:	
  2878                           ; 2 bytes @ 0x31
  2879                           
  2880                           
  2881                           ; 2 bytes @ 0x31
  2882  0051                     	ds	2
  2883  0053                     getADCValue@channel:	
  2884  0053                     sprintf@c:	
  2885                           ; 1 bytes @ 0x33
  2886                           
  2887                           
  2888                           ; 1 bytes @ 0x33
  2889  0053                     	ds	1
  2890  0054                     getADCValue@adcSum:	
  2891                           
  2892                           ; 3 bytes @ 0x34
  2893  0054                     	ds	3
  2894  0057                     ?___ftmul:	
  2895  0057                     ?___ftneg:	
  2896                           ; 3 bytes @ 0x37
  2897                           
  2898  0057                     ___ftmul@f1:	
  2899                           ; 3 bytes @ 0x37
  2900                           
  2901  0057                     ___ftneg@f1:	
  2902                           ; 3 bytes @ 0x37
  2903                           
  2904                           
  2905                           ; 3 bytes @ 0x37
  2906  0057                     	ds	3
  2907  005A                     ??___ftneg:	
  2908  005A                     ___ftmul@f2:	
  2909                           ; 1 bytes @ 0x3A
  2910                           
  2911                           
  2912                           ; 3 bytes @ 0x3A
  2913  005A                     	ds	3
  2914  005D                     ??___ftmul:	
  2915                           
  2916                           ; 1 bytes @ 0x3D
  2917  005D                     	ds	4
  2918  0061                     ___ftmul@exp:	
  2919                           
  2920                           ; 1 bytes @ 0x41
  2921  0061                     	ds	1
  2922  0062                     ___ftmul@f3_as_product:	
  2923                           
  2924                           ; 3 bytes @ 0x42
  2925  0062                     	ds	3
  2926  0065                     ___ftmul@cntr:	
  2927                           
  2928                           ; 1 bytes @ 0x45
  2929  0065                     	ds	1
  2930  0066                     ___ftmul@sign:	
  2931                           
  2932                           ; 1 bytes @ 0x46
  2933  0066                     	ds	1
  2934  0067                     ?___fttol:	
  2935  0067                     ___fttol@f1:	
  2936                           ; 4 bytes @ 0x47
  2937                           
  2938                           
  2939                           ; 3 bytes @ 0x47
  2940  0067                     	ds	4
  2941  006B                     ??___fttol:	
  2942                           
  2943                           ; 1 bytes @ 0x4B
  2944  006B                     	ds	4
  2945  006F                     ??_ftoa:	
  2946                           
  2947                           ; 1 bytes @ 0x4F
  2948  006F                     	ds	1
  2949  0070                     ??_strcat:	
  2950                           
  2951                           	psect	maintext
  2952  0B97                     __pmaintext:	
  2953                           ; 1 bytes @ 0x50
  2954 ;;
  2955 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  2956 ;;
  2957 ;; *************** function _main *****************
  2958 ;; Defined at:
  2959 ;;		line 182 in file "main.c"
  2960 ;; Parameters:    Size  Location     Type
  2961 ;;		None
  2962 ;; Auto vars:     Size  Location     Type
  2963 ;;  packet         33   38[BANK1 ] struct .
  2964 ;;  pipe            1   37[BANK1 ] unsigned char 
  2965 ;; Return value:  Size  Location     Type
  2966 ;;                  1    wreg      void 
  2967 ;; Registers used:
  2968 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2969 ;; Tracked objects:
  2970 ;;		On entry : B1F/0
  2971 ;;		On exit  : 0/0
  2972 ;;		Unchanged: 0/0
  2973 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2974 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2975 ;;      Locals:         0       0      34       0       0       0       0       0       0       0       0       0       
      +0       0
  2976 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  2977 ;;      Totals:         0       0      35       0       0       0       0       0       0       0       0       0       
      +0       0
  2978 ;;Total ram usage:       35 bytes
  2979 ;; Hardware stack levels required when called:   15
  2980 ;; This function calls:
  2981 ;;		___lwtoft
  2982 ;;		_loop
  2983 ;;		_nrf24l01GetPipe
  2984 ;;		_nrf24l01Init
  2985 ;;		_nrf24l01SetTXPipe
  2986 ;;		_sendMessage
  2987 ;;		_strcpy
  2988 ;; This function is called by:
  2989 ;;		Startup code after reset
  2990 ;; This function uses a non-reentrant model
  2991 ;;
  2992                           
  2993                           
  2994                           ;psect for function _main
  2995  0B97                     _main:	
  2996                           
  2997                           ;main.c: 185: ANSELA = 0x00;
  2998                           
  2999                           ;incstack = 0
  3000                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3001  0B97  0023               	movlb	3	; select bank3
  3002  0B98  018C               	clrf	12	;volatile
  3003                           
  3004                           ;main.c: 186: ANSELC = 0x00;
  3005  0B99  018E               	clrf	14	;volatile
  3006                           
  3007                           ;main.c: 188: ODCONA = 0x00;
  3008  0B9A  0025               	movlb	5	; select bank5
  3009  0B9B  018C               	clrf	12	;volatile
  3010                           
  3011                           ;main.c: 189: ODCONC = 0x00;
  3012  0B9C  018E               	clrf	14	;volatile
  3013                           
  3014                           ;main.c: 194: INLVLA = 0x00;
  3015  0B9D  0027               	movlb	7	; select bank7
  3016  0B9E  018C               	clrf	12	;volatile
  3017                           
  3018                           ;main.c: 195: INLVLC = 0x00;
  3019  0B9F  018E               	clrf	14	;volatile
  3020                           
  3021                           ;main.c: 197: WPUA = 0x00;
  3022  0BA0  0024               	movlb	4	; select bank4
  3023  0BA1  018C               	clrf	12	;volatile
  3024                           
  3025                           ;main.c: 198: WPUC = 0x00;
  3026  0BA2  018E               	clrf	14	;volatile
  3027                           
  3028                           ;main.c: 200: TRISCbits.TRISC5 = 0;
  3029  0BA3  0021               	movlb	1	; select bank1
  3030  0BA4  128E               	bcf	14,5	;volatile
  3031                           
  3032                           ;main.c: 201: TRISCbits.TRISC4 = 0;
  3033  0BA5  120E               	bcf	14,4	;volatile
  3034                           
  3035                           ;main.c: 203: PORTCbits.RC4 = 0;
  3036  0BA6  0020               	movlb	0	; select bank0
  3037  0BA7  120E               	bcf	14,4	;volatile
  3038                           
  3039                           ;main.c: 210: INTCONbits.PEIE = 0;
  3040  0BA8  130B               	bcf	11,6	;volatile
  3041                           
  3042                           ;main.c: 211: INTCONbits.GIE = 0;
  3043  0BA9  138B               	bcf	11,7	;volatile
  3044                           
  3045                           ;main.c: 213: OSCCON1bits.NOSC = 0b000;
  3046  0BAA  308F               	movlw	-113
  3047  0BAB  0032               	movlb	18	; select bank18
  3048  0BAC  0599               	andwf	25,f	;volatile
  3049                           
  3050                           ;main.c: 214: OSCCON1bits.NDIV = 0b000;
  3051  0BAD  30F0               	movlw	-16
  3052  0BAE  0599               	andwf	25,f	;volatile
  3053                           
  3054                           ;main.c: 216: _delay((unsigned long)((10)*(32000000/4000.0)));
  3055  0BAF  3068               	movlw	104
  3056  0BB0  0021               	movlb	1	; select bank1
  3057  0BB1  00C4               	movwf	??_main^(0+128)
  3058  0BB2  30E4               	movlw	228
  3059  0BB3                     u4097:	
  3060  0BB3  0B89               	decfsz	9,f
  3061  0BB4  2BB3               	goto	u4097
  3062  0BB5  0BC4               	decfsz	??_main^(0+128),f
  3063  0BB6  2BB3               	goto	u4097
  3064  0BB7  0000               	nop
  3065                           
  3066                           ;main.c: 220: strcpy(romData->name, "UH1");
  3067  0BB8  0021               	movlb	1	; select bank1
  3068  0BB9  086B               	movf	_romData^(0+128),w
  3069  0BBA  3E01               	addlw	1
  3070  0BBB  0020               	movlb	0	; select bank0
  3071  0BBC  00A0               	movwf	strcpy@to
  3072  0BBD  3002               	movlw	2
  3073  0BBE  00A1               	movwf	strcpy@to+1
  3074  0BBF  3064               	movlw	low (STR_8| (0+32768))
  3075  0BC0  00A2               	movwf	strcpy@from
  3076  0BC1  3098               	movlw	high (STR_8| (0+32768))
  3077  0BC2  00A3               	movwf	strcpy@from+1
  3078  0BC3  3196  2614  318B   	fcall	_strcpy
  3079                           
  3080                           ;main.c: 222: nrf24l01Init();
  3081  0BC6  3189  2126  318B   	fcall	_nrf24l01Init
  3082                           
  3083                           ;main.c: 224: unsigned char pipe = nrf24l01GetPipe(romData->name);
  3084  0BC9  0021               	movlb	1	; select bank1
  3085  0BCA  086B               	movf	_romData^(0+128),w
  3086  0BCB  3E01               	addlw	1
  3087  0BCC  3188  206F  318B   	fcall	_nrf24l01GetPipe
  3088  0BCF  0021               	movlb	1	; select bank1
  3089  0BD0  00C4               	movwf	??_main^(0+128)
  3090  0BD1  0844               	movf	??_main^(0+128),w
  3091  0BD2  00C5               	movwf	main@pipe^(0+128)
  3092                           
  3093                           ;main.c: 225: nrf24l01SetTXPipe(pipe);
  3094  0BD3  0845               	movf	main@pipe^(0+128),w
  3095  0BD4  3189  2169  318B   	fcall	_nrf24l01SetTXPipe
  3096                           
  3097                           ;main.c: 230: ADCON0bits.ADON = 0;
  3098  0BD7  0021               	movlb	1	; select bank1
  3099  0BD8  101D               	bcf	29,0	;volatile
  3100                           
  3101                           ;main.c: 233: PORTAbits.RA4 = 0;
  3102  0BD9  0020               	movlb	0	; select bank0
  3103  0BDA  120C               	bcf	12,4	;volatile
  3104                           
  3105                           ;main.c: 234: TRISAbits.TRISA4 = 1;
  3106  0BDB  0021               	movlb	1	; select bank1
  3107  0BDC  160C               	bsf	12,4	;volatile
  3108                           
  3109                           ;main.c: 235: WPUAbits.WPUA4 = 0;
  3110  0BDD  0024               	movlb	4	; select bank4
  3111  0BDE  120C               	bcf	12,4	;volatile
  3112                           
  3113                           ;main.c: 236: ODCONAbits.ODCA4 = 1;
  3114  0BDF  0025               	movlb	5	; select bank5
  3115  0BE0  160C               	bsf	12,4	;volatile
  3116                           
  3117                           ;main.c: 237: ANSELAbits.ANSA4 = 1;
  3118  0BE1  0023               	movlb	3	; select bank3
  3119  0BE2  160C               	bsf	12,4	;volatile
  3120                           
  3121                           ;main.c: 240: ANSELCbits.ANSC3 = 1;
  3122  0BE3  158E               	bsf	14,3	;volatile
  3123                           
  3124                           ;main.c: 241: TRISCbits.TRISC3 = 1;
  3125  0BE4  0021               	movlb	1	; select bank1
  3126  0BE5  158E               	bsf	14,3	;volatile
  3127                           
  3128                           ;main.c: 244: FVRCONbits.TSEN = 1;
  3129  0BE6  0022               	movlb	2	; select bank2
  3130  0BE7  1697               	bsf	23,5	;volatile
  3131                           
  3132                           ;main.c: 245: FVRCONbits.TSRNG = 1;
  3133  0BE8  1617               	bsf	23,4	;volatile
  3134                           
  3135                           ;main.c: 248: FVRCONbits.FVREN = 0;
  3136  0BE9  1397               	bcf	23,7	;volatile
  3137                           
  3138                           ;main.c: 249: FVRCONbits.ADFVR = 0b10;
  3139  0BEA  0817               	movf	23,w	;volatile
  3140  0BEB  39FC               	andlw	-4
  3141  0BEC  3802               	iorlw	2
  3142  0BED  0097               	movwf	23	;volatile
  3143                           
  3144                           ;main.c: 251: ADCON1bits.ADCS = 0b111;
  3145  0BEE  3070               	movlw	112
  3146  0BEF  0021               	movlb	1	; select bank1
  3147  0BF0  049E               	iorwf	30,f	;volatile
  3148                           
  3149                           ;main.c: 252: ADCON1bits.ADFM = 1;
  3150  0BF1  179E               	bsf	30,7	;volatile
  3151                           
  3152                           ;main.c: 253: ADCON1bits.ADPREF = 0b11;
  3153  0BF2  3003               	movlw	3
  3154  0BF3  049E               	iorwf	30,f	;volatile
  3155                           
  3156                           ;main.c: 254: ADCON1bits.ADNREF = 0b00;
  3157  0BF4  111E               	bcf	30,2	;volatile
  3158                           
  3159                           ;main.c: 257: ADCON0bits.CHS = 3;
  3160  0BF5  081D               	movf	29,w	;volatile
  3161  0BF6  3903               	andlw	-253
  3162  0BF7  380C               	iorlw	12
  3163  0BF8  009D               	movwf	29	;volatile
  3164                           
  3165                           ;main.c: 262: TRISAbits.TRISA2 = 1;
  3166  0BF9  150C               	bsf	12,2	;volatile
  3167                           
  3168                           ;main.c: 263: PIE0bits.INTE = 1;
  3169  0BFA  1410               	bsf	16,0	;volatile
  3170                           
  3171                           ;main.c: 264: INTCONbits.INTEDG = 0;
  3172  0BFB  100B               	bcf	11,0	;volatile
  3173                           
  3174                           ;main.c: 267: TRISAbits.TRISA5 = 0;
  3175  0BFC  128C               	bcf	12,5	;volatile
  3176                           
  3177                           ;main.c: 268: PORTAbits.RA5 = 0;
  3178  0BFD  0020               	movlb	0	; select bank0
  3179  0BFE  128C               	bcf	12,5	;volatile
  3180                           
  3181                           ;main.c: 271: INTCONbits.PEIE = 1;
  3182  0BFF  170B               	bsf	11,6	;volatile
  3183                           
  3184                           ;main.c: 272: INTCONbits.GIE = 1;
  3185  0C00  178B               	bsf	11,7	;volatile
  3186                           
  3187                           ;main.c: 274: nrf24l01Packet_t packet;;main.c: 276: sendMessage(&packet, "BOOT", romData
      +                          ->bootMode);
  3188  0C01  30C6               	movlw	low main@packet
  3189  0C02  0021               	movlb	1	; select bank1
  3190  0C03  00B9               	movwf	sendMessage@packet^(0+128)
  3191  0C04  3000               	movlw	high main@packet
  3192  0C05  00BA               	movwf	(sendMessage@packet+1)^(0+128)
  3193  0C06  305F               	movlw	low (STR_9| (0+32768))
  3194  0C07  00BB               	movwf	sendMessage@topic^(0+128)
  3195  0C08  3098               	movlw	high (STR_9| (0+32768))
  3196  0C09  00BC               	movwf	(sendMessage@topic^(0+128)+1)
  3197  0C0A  086B               	movf	_romData^(0+128),w
  3198  0C0B  3E11               	addlw	17
  3199  0C0C  0086               	movwf	6
  3200  0C0D  3002               	movlw	2	; select bank4/5
  3201  0C0E  0087               	movwf	7
  3202  0C0F  3F40               	moviw [0]fsr1
  3203  0C10  0020               	movlb	0	; select bank0
  3204  0C11  00A8               	movwf	___lwtoft@c
  3205  0C12  3F41               	moviw [1]fsr1
  3206  0C13  00A9               	movwf	___lwtoft@c+1
  3207  0C14  3195  2567  318B   	fcall	___lwtoft
  3208  0C17  0020               	movlb	0	; select bank0
  3209  0C18  0828               	movf	?___lwtoft,w
  3210  0C19  0021               	movlb	1	; select bank1
  3211  0C1A  00BD               	movwf	sendMessage@value^(0+128)
  3212  0C1B  0020               	movlb	0	; select bank0
  3213  0C1C  0829               	movf	?___lwtoft+1,w
  3214  0C1D  0021               	movlb	1	; select bank1
  3215  0C1E  00BE               	movwf	(sendMessage@value+1)^(0+128)
  3216  0C1F  0020               	movlb	0	; select bank0
  3217  0C20  082A               	movf	?___lwtoft+2,w
  3218  0C21  0021               	movlb	1	; select bank1
  3219  0C22  00BF               	movwf	(sendMessage@value+2)^(0+128)
  3220  0C23  318B  230D  318B   	fcall	_sendMessage
  3221  0C26                     l3901:	
  3222                           ;main.c: 278: while(1){
  3223                           
  3224                           
  3225                           ;main.c: 279: loop();
  3226  0C26  3183  237A  318B   	fcall	_loop
  3227  0C29  2C26               	goto	l3901
  3228  0C2A                     __end_of_main:	
  3229                           ;main.c: 280: };main.c: 282: return;
  3230                           
  3231                           
  3232                           	psect	text1
  3233  0926                     __ptext1:	
  3234 ;; *************** function _nrf24l01Init *****************
  3235 ;; Defined at:
  3236 ;;		line 481 in file "nrf24l01.c"
  3237 ;; Parameters:    Size  Location     Type
  3238 ;;		None
  3239 ;; Auto vars:     Size  Location     Type
  3240 ;;		None
  3241 ;; Return value:  Size  Location     Type
  3242 ;;                  1    wreg      void 
  3243 ;; Registers used:
  3244 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3245 ;; Tracked objects:
  3246 ;;		On entry : 0/0
  3247 ;;		On exit  : 0/0
  3248 ;;		Unchanged: 0/0
  3249 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3250 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3251 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3252 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3253 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3254 ;;Total ram usage:        2 bytes
  3255 ;; Hardware stack levels used:    1
  3256 ;; Hardware stack levels required when called:   12
  3257 ;; This function calls:
  3258 ;;		_nrf24l01CEHigh
  3259 ;;		_nrf24l01CELow
  3260 ;;		_nrf24l01InitRegisters
  3261 ;;		_nrf24l01InterfaceInit
  3262 ;; This function is called by:
  3263 ;;		_main
  3264 ;; This function uses a non-reentrant model
  3265 ;;
  3266                           
  3267                           
  3268                           ;psect for function _nrf24l01Init
  3269  0926                     _nrf24l01Init:	
  3270                           
  3271                           ;nrf24l01.c: 484: nrf24l01InterfaceInit();
  3272                           
  3273                           ;incstack = 0
  3274                           ; Regs used in _nrf24l01Init: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3275  0926  3196  266B  3189   	fcall	_nrf24l01InterfaceInit
  3276                           
  3277                           ;nrf24l01.c: 489: nrf24l01CELow();
  3278  0929  3195  251C  3189   	fcall	_nrf24l01CELow
  3279                           
  3280                           ;nrf24l01.c: 491: _delay((unsigned long)((50000)*(32000000/4000000.0)));
  3281  092C  3003               	movlw	3
  3282  092D  0020               	movlb	0	; select bank0
  3283  092E  00B2               	movwf	??_nrf24l01Init+1
  3284  092F  3008               	movlw	8
  3285  0930  00B1               	movwf	??_nrf24l01Init
  3286  0931  3077               	movlw	119
  3287  0932                     u4107:	
  3288  0932  0B89               	decfsz	9,f
  3289  0933  2932               	goto	u4107
  3290  0934  0BB1               	decfsz	??_nrf24l01Init,f
  3291  0935  2932               	goto	u4107
  3292  0936  0BB2               	decfsz	??_nrf24l01Init+1,f
  3293  0937  2932               	goto	u4107
  3294                           
  3295                           ;nrf24l01.c: 493: nrf24l01InitRegisters();
  3296  0938  3186  2611  3189   	fcall	_nrf24l01InitRegisters
  3297                           
  3298                           ;nrf24l01.c: 495: _delay((unsigned long)((50000)*(32000000/4000000.0)));
  3299  093B  3003               	movlw	3
  3300  093C  0020               	movlb	0	; select bank0
  3301  093D  00B2               	movwf	??_nrf24l01Init+1
  3302  093E  3008               	movlw	8
  3303  093F  00B1               	movwf	??_nrf24l01Init
  3304  0940  3077               	movlw	119
  3305  0941                     u4117:	
  3306  0941  0B89               	decfsz	9,f
  3307  0942  2941               	goto	u4117
  3308  0943  0BB1               	decfsz	??_nrf24l01Init,f
  3309  0944  2941               	goto	u4117
  3310  0945  0BB2               	decfsz	??_nrf24l01Init+1,f
  3311  0946  2941               	goto	u4117
  3312                           
  3313                           ;nrf24l01.c: 497: nrf24l01CEHigh();
  3314  0947  3195  2519         	fcall	_nrf24l01CEHigh
  3315                           
  3316                           ;nrf24l01.c: 499: status.TX = statuses.TX.Idle;
  3317  0949  3034               	movlw	low (_statuses| (0+32768))
  3318  094A  0084               	movwf	4
  3319  094B  3098               	movlw	high (_statuses| (0+32768))
  3320  094C  0085               	movwf	5
  3321  094D  0800               	movf	0,w	;code access
  3322  094E  0020               	movlb	0	; select bank0
  3323  094F  00B1               	movwf	??_nrf24l01Init
  3324  0950  0021               	movlb	1	; select bank1
  3325  0951  0867               	movf	_status^(0+128),w	;volatile
  3326  0952  0020               	movlb	0	; select bank0
  3327  0953  0631               	xorwf	??_nrf24l01Init,w
  3328  0954  39F0               	andlw	-16
  3329  0955  0631               	xorwf	??_nrf24l01Init,w
  3330  0956  0021               	movlb	1	; select bank1
  3331  0957  00E7               	movwf	_status^(0+128)	;volatile
  3332                           
  3333                           ;nrf24l01.c: 500: status.RX = statuses.RX.Idle;
  3334  0958  3038               	movlw	low ((_statuses+4)| (0+32768))
  3335  0959  0084               	movwf	4
  3336  095A  3098               	movlw	high ((_statuses+4)| (0+32768))
  3337  095B  0085               	movwf	5
  3338  095C  0800               	movf	0,w	;code access
  3339  095D  0020               	movlb	0	; select bank0
  3340  095E  00B1               	movwf	??_nrf24l01Init
  3341  095F  0EB1               	swapf	??_nrf24l01Init,f
  3342  0960  0021               	movlb	1	; select bank1
  3343  0961  0867               	movf	_status^(0+128),w	;volatile
  3344  0962  0020               	movlb	0	; select bank0
  3345  0963  0631               	xorwf	??_nrf24l01Init,w
  3346  0964  390F               	andlw	-241
  3347  0965  0631               	xorwf	??_nrf24l01Init,w
  3348  0966  0021               	movlb	1	; select bank1
  3349  0967  00E7               	movwf	_status^(0+128)	;volatile
  3350  0968  0008               	return
  3351  0969                     __end_of_nrf24l01Init:	
  3352                           
  3353                           	psect	text2
  3354  166B                     __ptext2:	
  3355 ;; *************** function _nrf24l01InterfaceInit *****************
  3356 ;; Defined at:
  3357 ;;		line 27 in file "interface.c"
  3358 ;; Parameters:    Size  Location     Type
  3359 ;;		None
  3360 ;; Auto vars:     Size  Location     Type
  3361 ;;		None
  3362 ;; Return value:  Size  Location     Type
  3363 ;;                  1    wreg      void 
  3364 ;; Registers used:
  3365 ;;		wreg, status,2, status,0
  3366 ;; Tracked objects:
  3367 ;;		On entry : 0/0
  3368 ;;		On exit  : 0/0
  3369 ;;		Unchanged: 0/0
  3370 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3371 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3372 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3373 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3374 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3375 ;;Total ram usage:        0 bytes
  3376 ;; Hardware stack levels used:    1
  3377 ;; Hardware stack levels required when called:    7
  3378 ;; This function calls:
  3379 ;;		Nothing
  3380 ;; This function is called by:
  3381 ;;		_nrf24l01Init
  3382 ;; This function uses a non-reentrant model
  3383 ;;
  3384                           
  3385                           
  3386                           ;psect for function _nrf24l01InterfaceInit
  3387  166B                     _nrf24l01InterfaceInit:	
  3388                           
  3389                           ;interface.c: 29: TRISAbits.TRISA0 = 0;
  3390                           
  3391                           ;incstack = 0
  3392                           ; Regs used in _nrf24l01InterfaceInit: [wreg+status,2+status,0]
  3393  166B  0021               	movlb	1	; select bank1
  3394  166C  100C               	bcf	12,0	;volatile
  3395                           
  3396                           ;interface.c: 30: TRISAbits.TRISA1 = 0;
  3397  166D  108C               	bcf	12,1	;volatile
  3398                           
  3399                           ;interface.c: 32: TRISCbits.TRISC1 = 1;
  3400  166E  148E               	bsf	14,1	;volatile
  3401                           
  3402                           ;interface.c: 33: TRISCbits.TRISC2 = 0;
  3403  166F  110E               	bcf	14,2	;volatile
  3404                           
  3405                           ;interface.c: 34: TRISCbits.TRISC0 = 0;
  3406  1670  100E               	bcf	14,0	;volatile
  3407                           
  3408                           ;interface.c: 36: SSP1CON1bits.SSPEN = 0;
  3409  1671  0024               	movlb	4	; select bank4
  3410  1672  1295               	bcf	21,5	;volatile
  3411                           
  3412                           ;interface.c: 38: RC1PPSbits.RC1PPS = 0b10001;
  3413  1673  003D               	movlb	29	; select bank29
  3414  1674  0821               	movf	33,w	;volatile
  3415  1675  39E0               	andlw	-32
  3416  1676  3811               	iorlw	17
  3417  1677  00A1               	movwf	33	;volatile
  3418                           
  3419                           ;interface.c: 39: RC2PPSbits.RC2PPS = 0b11001;
  3420  1678  0822               	movf	34,w	;volatile
  3421  1679  39E0               	andlw	-32
  3422  167A  3819               	iorlw	25
  3423  167B  00A2               	movwf	34	;volatile
  3424                           
  3425                           ;interface.c: 40: RC0PPSbits.RC0PPS = 0b11000;
  3426  167C  0820               	movf	32,w	;volatile
  3427  167D  39E0               	andlw	-32
  3428  167E  3818               	iorlw	24
  3429  167F  00A0               	movwf	32	;volatile
  3430                           
  3431                           ;interface.c: 42: SSP1CON1bits.CKP = 0;
  3432  1680  0024               	movlb	4	; select bank4
  3433  1681  1215               	bcf	21,4	;volatile
  3434                           
  3435                           ;interface.c: 43: SSP1STATbits.CKE = 1;
  3436  1682  1714               	bsf	20,6	;volatile
  3437                           
  3438                           ;interface.c: 44: SSP1CON1bits.SSPM = 0b0001;
  3439  1683  0815               	movf	21,w	;volatile
  3440  1684  39F0               	andlw	-16
  3441  1685  3801               	iorlw	1
  3442  1686  0095               	movwf	21	;volatile
  3443                           
  3444                           ;interface.c: 46: SSP1CON1bits.SSPEN = 1;
  3445  1687  1695               	bsf	21,5	;volatile
  3446  1688  0008               	return
  3447  1689                     __end_of_nrf24l01InterfaceInit:	
  3448                           
  3449                           	psect	text3
  3450  0611                     __ptext3:	
  3451 ;; *************** function _nrf24l01InitRegisters *****************
  3452 ;; Defined at:
  3453 ;;		line 381 in file "nrf24l01.c"
  3454 ;; Parameters:    Size  Location     Type
  3455 ;;		None
  3456 ;; Auto vars:     Size  Location     Type
  3457 ;;  i               2   15[BANK0 ] unsigned int 
  3458 ;;  DynPD           1   14[BANK0 ] struct .
  3459 ;;  enAA            1   13[BANK0 ] struct .
  3460 ;;  rfSetup         1   12[BANK0 ] struct .
  3461 ;;  feature         1   11[BANK0 ] struct .
  3462 ;;  setupAW         1   10[BANK0 ] struct .
  3463 ;;  channel         1    9[BANK0 ] struct .
  3464 ;; Return value:  Size  Location     Type
  3465 ;;                  1    wreg      void 
  3466 ;; Registers used:
  3467 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3468 ;; Tracked objects:
  3469 ;;		On entry : 0/0
  3470 ;;		On exit  : 0/0
  3471 ;;		Unchanged: 0/0
  3472 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3473 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3474 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3475 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3476 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3477 ;;Total ram usage:       10 bytes
  3478 ;; Hardware stack levels used:    1
  3479 ;; Hardware stack levels required when called:   11
  3480 ;; This function calls:
  3481 ;;		___bmul
  3482 ;;		_nrf24l01SPIEnd
  3483 ;;		_nrf24l01SPISend
  3484 ;;		_nrf24l01SPIStart
  3485 ;;		_nrf24l01Send
  3486 ;;		_nrf24l01SetRXPipe
  3487 ;;		_nrf24l01SetTXPipe
  3488 ;; This function is called by:
  3489 ;;		_nrf24l01Init
  3490 ;; This function uses a non-reentrant model
  3491 ;;
  3492                           
  3493                           
  3494                           ;psect for function _nrf24l01InitRegisters
  3495  0611                     _nrf24l01InitRegisters:	
  3496                           
  3497                           ;nrf24l01.c: 383: status.configRegister.byte = nrf24l01Send((unsigned) 0b00000000 | (uns
      +                          igned) 0x00, 0);
  3498                           
  3499                           ;incstack = 0
  3500                           ; Regs used in _nrf24l01InitRegisters: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3501  0611  0020               	movlb	0	; select bank0
  3502  0612  01A0               	clrf	nrf24l01Send@data
  3503  0613  3000               	movlw	0
  3504  0614  3196  26A8  3186   	fcall	_nrf24l01Send
  3505  0617  0020               	movlb	0	; select bank0
  3506  0618  00A7               	movwf	??_nrf24l01InitRegisters
  3507  0619  0827               	movf	??_nrf24l01InitRegisters,w
  3508  061A  0021               	movlb	1	; select bank1
  3509  061B  00E9               	movwf	(_status^(0+128)+2)	;volatile
  3510                           
  3511                           ;nrf24l01.c: 385: status.configRegister.PWR_UP = 0;
  3512  061C  10E9               	bcf	(_status^(0+128)+2),1	;volatile
  3513                           
  3514                           ;nrf24l01.c: 386: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x00, status.configReg
      +                          ister.byte);
  3515  061D  0869               	movf	(_status^(0+128)+2),w	;volatile
  3516  061E  0020               	movlb	0	; select bank0
  3517  061F  00A7               	movwf	??_nrf24l01InitRegisters
  3518  0620  0827               	movf	??_nrf24l01InitRegisters,w
  3519  0621  00A0               	movwf	nrf24l01Send@data
  3520  0622  3020               	movlw	32
  3521  0623  3196  26A8  3186   	fcall	_nrf24l01Send
  3522                           
  3523                           ;nrf24l01.c: 388: n_SETUP_AW_t setupAW;;nrf24l01.c: 389: setupAW.byte = 0x00;
  3524  0626  0020               	movlb	0	; select bank0
  3525  0627  01AA               	clrf	nrf24l01InitRegisters@setupAW
  3526                           
  3527                           ;nrf24l01.c: 390: setupAW.AW = 0b11;
  3528  0628  3003               	movlw	3
  3529  0629  04AA               	iorwf	nrf24l01InitRegisters@setupAW,f
  3530                           
  3531                           ;nrf24l01.c: 391: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x03, setupAW.byte);
  3532  062A  082A               	movf	nrf24l01InitRegisters@setupAW,w
  3533  062B  00A7               	movwf	??_nrf24l01InitRegisters
  3534  062C  0827               	movf	??_nrf24l01InitRegisters,w
  3535  062D  00A0               	movwf	nrf24l01Send@data
  3536  062E  3023               	movlw	35
  3537  062F  3196  26A8  3186   	fcall	_nrf24l01Send
  3538                           
  3539                           ;nrf24l01.c: 394: n_RF_CH_t channel;;nrf24l01.c: 395: channel.RF_CH = 2;
  3540  0632  0020               	movlb	0	; select bank0
  3541  0633  0829               	movf	nrf24l01InitRegisters@channel,w
  3542  0634  3980               	andlw	-128
  3543  0635  3802               	iorlw	2
  3544  0636  00A9               	movwf	nrf24l01InitRegisters@channel
  3545                           
  3546                           ;nrf24l01.c: 396: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x05, channel.byte);
  3547  0637  0829               	movf	nrf24l01InitRegisters@channel,w
  3548  0638  00A7               	movwf	??_nrf24l01InitRegisters
  3549  0639  0827               	movf	??_nrf24l01InitRegisters,w
  3550  063A  00A0               	movwf	nrf24l01Send@data
  3551  063B  3025               	movlw	37
  3552  063C  3196  26A8  3186   	fcall	_nrf24l01Send
  3553                           
  3554                           ;nrf24l01.c: 399: n_RF_SETUP_t rfSetup;;nrf24l01.c: 400: rfSetup.byte = 0x00;
  3555  063F  0020               	movlb	0	; select bank0
  3556  0640  01AC               	clrf	nrf24l01InitRegisters@rfSetup
  3557                           
  3558                           ;nrf24l01.c: 401: rfSetup.RF_DR_LOW = 0;
  3559  0641  12AC               	bcf	nrf24l01InitRegisters@rfSetup,5
  3560                           
  3561                           ;nrf24l01.c: 402: rfSetup.RF_DR_HIGH = 1;
  3562  0642  15AC               	bsf	nrf24l01InitRegisters@rfSetup,3
  3563                           
  3564                           ;nrf24l01.c: 403: rfSetup.RF_PWR = 3;
  3565  0643  3006               	movlw	6
  3566  0644  04AC               	iorwf	nrf24l01InitRegisters@rfSetup,f
  3567                           
  3568                           ;nrf24l01.c: 404: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x06, rfSetup.byte);
  3569  0645  082C               	movf	nrf24l01InitRegisters@rfSetup,w
  3570  0646  00A7               	movwf	??_nrf24l01InitRegisters
  3571  0647  0827               	movf	??_nrf24l01InitRegisters,w
  3572  0648  00A0               	movwf	nrf24l01Send@data
  3573  0649  3026               	movlw	38
  3574  064A  3196  26A8  3186   	fcall	_nrf24l01Send
  3575                           
  3576                           ;nrf24l01.c: 407: nrf24l01SetRXPipe(0xFF);
  3577  064D  30FF               	movlw	255
  3578  064E  3196  26C8  3186   	fcall	_nrf24l01SetRXPipe
  3579                           
  3580                           ;nrf24l01.c: 410: n_EN_AA_t enAA;;nrf24l01.c: 411: enAA.byte = nrf24l01Send((unsigned) 0
      +                          b00000000 | (unsigned) 0x01, 0);
  3581  0651  0020               	movlb	0	; select bank0
  3582  0652  01A0               	clrf	nrf24l01Send@data
  3583  0653  3001               	movlw	1
  3584  0654  3196  26A8  3186   	fcall	_nrf24l01Send
  3585  0657  0020               	movlb	0	; select bank0
  3586  0658  00A7               	movwf	??_nrf24l01InitRegisters
  3587  0659  0827               	movf	??_nrf24l01InitRegisters,w
  3588  065A  00AD               	movwf	nrf24l01InitRegisters@enAA
  3589                           
  3590                           ;nrf24l01.c: 412: enAA.ENAA_P0 = 0;
  3591  065B  102D               	bcf	nrf24l01InitRegisters@enAA,0
  3592                           
  3593                           ;nrf24l01.c: 413: enAA.ENAA_P1 = 0;
  3594  065C  10AD               	bcf	nrf24l01InitRegisters@enAA,1
  3595                           
  3596                           ;nrf24l01.c: 414: enAA.ENAA_P2 = 0;
  3597  065D  112D               	bcf	nrf24l01InitRegisters@enAA,2
  3598                           
  3599                           ;nrf24l01.c: 415: enAA.ENAA_P3 = 0;
  3600  065E  11AD               	bcf	nrf24l01InitRegisters@enAA,3
  3601                           
  3602                           ;nrf24l01.c: 416: enAA.ENAA_P4 = 0;
  3603  065F  122D               	bcf	nrf24l01InitRegisters@enAA,4
  3604                           
  3605                           ;nrf24l01.c: 417: enAA.ENAA_P5 = 0;
  3606  0660  12AD               	bcf	nrf24l01InitRegisters@enAA,5
  3607                           
  3608                           ;nrf24l01.c: 418: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x01, enAA.byte);
  3609  0661  082D               	movf	nrf24l01InitRegisters@enAA,w
  3610  0662  00A7               	movwf	??_nrf24l01InitRegisters
  3611  0663  0827               	movf	??_nrf24l01InitRegisters,w
  3612  0664  00A0               	movwf	nrf24l01Send@data
  3613  0665  3021               	movlw	33
  3614  0666  3196  26A8  3186   	fcall	_nrf24l01Send
  3615                           
  3616                           ;nrf24l01.c: 422: n_FEATURE_t feature;;nrf24l01.c: 423: feature.byte = nrf24l01Send((uns
      +                          igned) 0b00000000 | (unsigned) 0x1D, 0);
  3617  0669  0020               	movlb	0	; select bank0
  3618  066A  01A0               	clrf	nrf24l01Send@data
  3619  066B  301D               	movlw	29
  3620  066C  3196  26A8  3186   	fcall	_nrf24l01Send
  3621  066F  0020               	movlb	0	; select bank0
  3622  0670  00A7               	movwf	??_nrf24l01InitRegisters
  3623  0671  0827               	movf	??_nrf24l01InitRegisters,w
  3624  0672  00AB               	movwf	nrf24l01InitRegisters@feature
  3625                           
  3626                           ;nrf24l01.c: 424: feature.EN_DPL = 1;
  3627  0673  152B               	bsf	nrf24l01InitRegisters@feature,2
  3628                           
  3629                           ;nrf24l01.c: 425: feature.EN_DYN_ACK = 1;
  3630  0674  142B               	bsf	nrf24l01InitRegisters@feature,0
  3631                           
  3632                           ;nrf24l01.c: 426: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x1D, feature.byte);
  3633  0675  082B               	movf	nrf24l01InitRegisters@feature,w
  3634  0676  00A7               	movwf	??_nrf24l01InitRegisters
  3635  0677  0827               	movf	??_nrf24l01InitRegisters,w
  3636  0678  00A0               	movwf	nrf24l01Send@data
  3637  0679  303D               	movlw	61
  3638  067A  3196  26A8  3186   	fcall	_nrf24l01Send
  3639                           
  3640                           ;nrf24l01.c: 428: n_DYNPD_t DynPD;;nrf24l01.c: 429: DynPD.byte = nrf24l01Send((unsigned)
      +                           0b00000000 | (unsigned) 0x1C, 0);
  3641  067D  0020               	movlb	0	; select bank0
  3642  067E  01A0               	clrf	nrf24l01Send@data
  3643  067F  301C               	movlw	28
  3644  0680  3196  26A8  3186   	fcall	_nrf24l01Send
  3645  0683  0020               	movlb	0	; select bank0
  3646  0684  00A7               	movwf	??_nrf24l01InitRegisters
  3647  0685  0827               	movf	??_nrf24l01InitRegisters,w
  3648  0686  00AE               	movwf	nrf24l01InitRegisters@DynPD
  3649                           
  3650                           ;nrf24l01.c: 430: DynPD.DPL_P0 = 1;
  3651  0687  142E               	bsf	nrf24l01InitRegisters@DynPD,0
  3652                           
  3653                           ;nrf24l01.c: 431: DynPD.DPL_P1 = 1;
  3654  0688  14AE               	bsf	nrf24l01InitRegisters@DynPD,1
  3655                           
  3656                           ;nrf24l01.c: 432: DynPD.DPL_P2 = 1;
  3657  0689  152E               	bsf	nrf24l01InitRegisters@DynPD,2
  3658                           
  3659                           ;nrf24l01.c: 433: DynPD.DPL_P3 = 1;
  3660  068A  15AE               	bsf	nrf24l01InitRegisters@DynPD,3
  3661                           
  3662                           ;nrf24l01.c: 434: DynPD.DPL_P4 = 1;
  3663  068B  162E               	bsf	nrf24l01InitRegisters@DynPD,4
  3664                           
  3665                           ;nrf24l01.c: 435: DynPD.DPL_P5 = 1;
  3666  068C  16AE               	bsf	nrf24l01InitRegisters@DynPD,5
  3667                           
  3668                           ;nrf24l01.c: 436: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x1C, DynPD.byte);
  3669  068D  082E               	movf	nrf24l01InitRegisters@DynPD,w
  3670  068E  00A7               	movwf	??_nrf24l01InitRegisters
  3671  068F  0827               	movf	??_nrf24l01InitRegisters,w
  3672  0690  00A0               	movwf	nrf24l01Send@data
  3673  0691  303C               	movlw	60
  3674  0692  3196  26A8  3186   	fcall	_nrf24l01Send
  3675                           
  3676                           ;nrf24l01.c: 439: unsigned int i;;nrf24l01.c: 440: for (i = 0; i < 6; i++){
  3677  0695  0020               	movlb	0	; select bank0
  3678  0696  01AF               	clrf	nrf24l01InitRegisters@i
  3679  0697  01B0               	clrf	nrf24l01InitRegisters@i+1
  3680  0698  3000               	movlw	0
  3681  0699  0230               	subwf	nrf24l01InitRegisters@i+1,w
  3682  069A  3006               	movlw	6
  3683  069B  1903               	skipnz
  3684  069C  022F               	subwf	nrf24l01InitRegisters@i,w
  3685  069D  1803               	btfsc	3,0
  3686  069E  2EF8               	goto	l3223
  3687  069F                     l3209:	
  3688                           
  3689                           ;nrf24l01.c: 442: nrf24l01SPIStart();
  3690  069F  3195  253A  3186   	fcall	_nrf24l01SPIStart
  3691                           
  3692                           ;nrf24l01.c: 443: nrf24l01SPISend((unsigned) 0b00100000 | ((unsigned) 0x0A + i));
  3693  06A2  0020               	movlb	0	; select bank0
  3694  06A3  082F               	movf	nrf24l01InitRegisters@i,w
  3695  06A4  3E0A               	addlw	10
  3696  06A5  3820               	iorlw	32
  3697  06A6  3195  254B  3186   	fcall	_nrf24l01SPISend
  3698                           
  3699                           ;nrf24l01.c: 445: nrf24l01SPISend(n_ADDRESS_P0[4] + (n_ADDRESS_MUL * i));
  3700  06A9  304F               	movlw	low ((_n_ADDRESS_P0+4)| (0+32768))
  3701  06AA  0084               	movwf	4
  3702  06AB  3098               	movlw	high ((_n_ADDRESS_P0+4)| (0+32768))
  3703  06AC  0085               	movwf	5
  3704  06AD  0800               	movf	0,w	;code access
  3705  06AE  0020               	movlb	0	; select bank0
  3706  06AF  00A7               	movwf	??_nrf24l01InitRegisters
  3707  06B0  082F               	movf	nrf24l01InitRegisters@i,w
  3708  06B1  00A8               	movwf	??_nrf24l01InitRegisters+1
  3709  06B2  0828               	movf	??_nrf24l01InitRegisters+1,w
  3710  06B3  00A0               	movwf	___bmul@multiplicand
  3711  06B4  3028               	movlw	low (_n_ADDRESS_MUL| (0+32768))
  3712  06B5  0084               	movwf	4
  3713  06B6  3098               	movlw	high (_n_ADDRESS_MUL| (0+32768))
  3714  06B7  0085               	movwf	5
  3715  06B8  0800               	movf	0,w	;code access
  3716  06B9  3188  2000  3186   	fcall	___bmul
  3717  06BC  0020               	movlb	0	; select bank0
  3718  06BD  0727               	addwf	??_nrf24l01InitRegisters,w
  3719  06BE  3195  254B  3186   	fcall	_nrf24l01SPISend
  3720                           
  3721                           ;nrf24l01.c: 447: if (i < 2){
  3722  06C1  3000               	movlw	0
  3723  06C2  0020               	movlb	0	; select bank0
  3724  06C3  0230               	subwf	nrf24l01InitRegisters@i+1,w
  3725  06C4  3002               	movlw	2
  3726  06C5  1903               	skipnz
  3727  06C6  022F               	subwf	nrf24l01InitRegisters@i,w
  3728  06C7  1803               	skipnc
  3729  06C8  2EE9               	goto	l3217
  3730                           
  3731                           ;nrf24l01.c: 448: nrf24l01SPISend(n_ADDRESS_P0[3]);
  3732  06C9  304E               	movlw	low ((_n_ADDRESS_P0+3)| (0+32768))
  3733  06CA  0084               	movwf	4
  3734  06CB  3098               	movlw	high ((_n_ADDRESS_P0+3)| (0+32768))
  3735  06CC  0085               	movwf	5
  3736  06CD  0800               	movf	0,w	;code access
  3737  06CE  3195  254B  3186   	fcall	_nrf24l01SPISend
  3738                           
  3739                           ;nrf24l01.c: 449: nrf24l01SPISend(n_ADDRESS_P0[2]);
  3740  06D1  304D               	movlw	low ((_n_ADDRESS_P0+2)| (0+32768))
  3741  06D2  0084               	movwf	4
  3742  06D3  3098               	movlw	high ((_n_ADDRESS_P0+2)| (0+32768))
  3743  06D4  0085               	movwf	5
  3744  06D5  0800               	movf	0,w	;code access
  3745  06D6  3195  254B  3186   	fcall	_nrf24l01SPISend
  3746                           
  3747                           ;nrf24l01.c: 450: nrf24l01SPISend(n_ADDRESS_P0[1]);
  3748  06D9  304C               	movlw	low ((_n_ADDRESS_P0+1)| (0+32768))
  3749  06DA  0084               	movwf	4
  3750  06DB  3098               	movlw	high ((_n_ADDRESS_P0+1)| (0+32768))
  3751  06DC  0085               	movwf	5
  3752  06DD  0800               	movf	0,w	;code access
  3753  06DE  3195  254B  3186   	fcall	_nrf24l01SPISend
  3754                           
  3755                           ;nrf24l01.c: 451: nrf24l01SPISend(n_ADDRESS_P0[0]);
  3756  06E1  304B               	movlw	low (_n_ADDRESS_P0| (0+32768))
  3757  06E2  0084               	movwf	4
  3758  06E3  3098               	movlw	high (_n_ADDRESS_P0| (0+32768))
  3759  06E4  0085               	movwf	5
  3760  06E5  0800               	movf	0,w	;code access
  3761  06E6  3195  254B  3186   	fcall	_nrf24l01SPISend
  3762  06E9                     l3217:	
  3763                           
  3764                           ;nrf24l01.c: 452: };nrf24l01.c: 454: nrf24l01SPIEnd();
  3765  06E9  3195  252B  3186   	fcall	_nrf24l01SPIEnd
  3766  06EC  3001               	movlw	1
  3767  06ED  0020               	movlb	0	; select bank0
  3768  06EE  07AF               	addwf	nrf24l01InitRegisters@i,f
  3769  06EF  3000               	movlw	0
  3770  06F0  3DB0               	addwfc	nrf24l01InitRegisters@i+1,f
  3771  06F1  3000               	movlw	0
  3772  06F2  0230               	subwf	nrf24l01InitRegisters@i+1,w
  3773  06F3  3006               	movlw	6
  3774  06F4  1903               	skipnz
  3775  06F5  022F               	subwf	nrf24l01InitRegisters@i,w
  3776  06F6  1C03               	skipc
  3777  06F7  2E9F               	goto	l3209
  3778  06F8                     l3223:	
  3779                           
  3780                           ;nrf24l01.c: 455: };nrf24l01.c: 457: nrf24l01SetTXPipe(0);
  3781  06F8  3000               	movlw	0
  3782  06F9  3189  2169  3186   	fcall	_nrf24l01SetTXPipe
  3783                           
  3784                           ;nrf24l01.c: 461: status.statusRegister.byte = 0x00;
  3785  06FC  0021               	movlb	1	; select bank1
  3786  06FD  01E8               	clrf	(_status^(0+128)+1)	;volatile
  3787                           
  3788                           ;nrf24l01.c: 462: status.statusRegister.RX_DR = 1;
  3789  06FE  1768               	bsf	(_status^(0+128)+1),6	;volatile
  3790                           
  3791                           ;nrf24l01.c: 463: status.statusRegister.TX_DS = 1;
  3792  06FF  16E8               	bsf	(_status^(0+128)+1),5	;volatile
  3793                           
  3794                           ;nrf24l01.c: 464: status.statusRegister.MAX_RT = 1;
  3795  0700  1668               	bsf	(_status^(0+128)+1),4	;volatile
  3796                           
  3797                           ;nrf24l01.c: 465: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x07, status.statusReg
      +                          ister.byte);
  3798  0701  0868               	movf	(_status^(0+128)+1),w	;volatile
  3799  0702  0020               	movlb	0	; select bank0
  3800  0703  00A7               	movwf	??_nrf24l01InitRegisters
  3801  0704  0827               	movf	??_nrf24l01InitRegisters,w
  3802  0705  00A0               	movwf	nrf24l01Send@data
  3803  0706  3027               	movlw	39
  3804  0707  3196  26A8  3186   	fcall	_nrf24l01Send
  3805                           
  3806                           ;nrf24l01.c: 467: status.statusRegister.byte = nrf24l01Send((unsigned) 0b00000000 | (uns
      +                          igned) 0x07, 0);
  3807  070A  0020               	movlb	0	; select bank0
  3808  070B  01A0               	clrf	nrf24l01Send@data
  3809  070C  3007               	movlw	7
  3810  070D  3196  26A8  3186   	fcall	_nrf24l01Send
  3811  0710  0020               	movlb	0	; select bank0
  3812  0711  00A7               	movwf	??_nrf24l01InitRegisters
  3813  0712  0827               	movf	??_nrf24l01InitRegisters,w
  3814  0713  0021               	movlb	1	; select bank1
  3815  0714  00E8               	movwf	(_status^(0+128)+1)	;volatile
  3816                           
  3817                           ;nrf24l01.c: 470: nrf24l01Send((unsigned) 0b11100001, 0);
  3818  0715  0020               	movlb	0	; select bank0
  3819  0716  01A0               	clrf	nrf24l01Send@data
  3820  0717  30E1               	movlw	225
  3821  0718  3196  26A8  3186   	fcall	_nrf24l01Send
  3822                           
  3823                           ;nrf24l01.c: 471: nrf24l01Send((unsigned) 0b11100010, 0);
  3824  071B  0020               	movlb	0	; select bank0
  3825  071C  01A0               	clrf	nrf24l01Send@data
  3826  071D  30E2               	movlw	226
  3827  071E  3196  26A8  3186   	fcall	_nrf24l01Send
  3828                           
  3829                           ;nrf24l01.c: 474: status.configRegister.PRIM_RX = 0;
  3830  0721  0021               	movlb	1	; select bank1
  3831  0722  1069               	bcf	(_status^(0+128)+2),0	;volatile
  3832                           
  3833                           ;nrf24l01.c: 475: status.configRegister.EN_CRC = 1;
  3834  0723  15E9               	bsf	(_status^(0+128)+2),3	;volatile
  3835                           
  3836                           ;nrf24l01.c: 476: status.configRegister.CRCO = 1;
  3837  0724  1569               	bsf	(_status^(0+128)+2),2	;volatile
  3838                           
  3839                           ;nrf24l01.c: 477: status.configRegister.PWR_UP = 1;
  3840  0725  14E9               	bsf	(_status^(0+128)+2),1	;volatile
  3841                           
  3842                           ;nrf24l01.c: 478: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x00, status.configReg
      +                          ister.byte);
  3843  0726  0869               	movf	(_status^(0+128)+2),w	;volatile
  3844  0727  0020               	movlb	0	; select bank0
  3845  0728  00A7               	movwf	??_nrf24l01InitRegisters
  3846  0729  0827               	movf	??_nrf24l01InitRegisters,w
  3847  072A  00A0               	movwf	nrf24l01Send@data
  3848  072B  3020               	movlw	32
  3849  072C  3196  26A8         	fcall	_nrf24l01Send
  3850  072E  0008               	return
  3851  072F                     __end_of_nrf24l01InitRegisters:	
  3852                           
  3853                           	psect	text4
  3854  0969                     __ptext4:	
  3855 ;; *************** function _nrf24l01SetTXPipe *****************
  3856 ;; Defined at:
  3857 ;;		line 183 in file "nrf24l01.c"
  3858 ;; Parameters:    Size  Location     Type
  3859 ;;  pipe            1    wreg     unsigned char 
  3860 ;; Auto vars:     Size  Location     Type
  3861 ;;  pipe            1    6[BANK0 ] unsigned char 
  3862 ;; Return value:  Size  Location     Type
  3863 ;;                  1    wreg      void 
  3864 ;; Registers used:
  3865 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3866 ;; Tracked objects:
  3867 ;;		On entry : 0/0
  3868 ;;		On exit  : 0/0
  3869 ;;		Unchanged: 0/0
  3870 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3871 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3872 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3873 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3874 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3875 ;;Total ram usage:        3 bytes
  3876 ;; Hardware stack levels used:    1
  3877 ;; Hardware stack levels required when called:    9
  3878 ;; This function calls:
  3879 ;;		___bmul
  3880 ;;		_nrf24l01SPIEnd
  3881 ;;		_nrf24l01SPISend
  3882 ;;		_nrf24l01SPIStart
  3883 ;; This function is called by:
  3884 ;;		_main
  3885 ;;		_nrf24l01InitRegisters
  3886 ;; This function uses a non-reentrant model
  3887 ;;
  3888                           
  3889                           
  3890                           ;psect for function _nrf24l01SetTXPipe
  3891  0969                     _nrf24l01SetTXPipe:	
  3892                           
  3893                           ;incstack = 0
  3894                           ; Regs used in _nrf24l01SetTXPipe: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3895                           ;nrf24l01SetTXPipe@pipe stored from wreg
  3896  0969  0020               	movlb	0	; select bank0
  3897  096A  00A6               	movwf	nrf24l01SetTXPipe@pipe
  3898                           
  3899                           ;nrf24l01.c: 186: nrf24l01SPIStart();
  3900  096B  3195  253A  3189   	fcall	_nrf24l01SPIStart
  3901                           
  3902                           ;nrf24l01.c: 187: nrf24l01SPISend((unsigned) 0b00100000 | (unsigned) 0x10);
  3903  096E  3030               	movlw	48
  3904  096F  3195  254B  3189   	fcall	_nrf24l01SPISend
  3905                           
  3906                           ;nrf24l01.c: 188: nrf24l01SPISend(n_ADDRESS_P0[4] + (unsigned) (pipe * n_ADDRESS_MUL));
  3907  0972  304F               	movlw	low ((_n_ADDRESS_P0+4)| (0+32768))
  3908  0973  0084               	movwf	4
  3909  0974  3098               	movlw	high ((_n_ADDRESS_P0+4)| (0+32768))
  3910  0975  0085               	movwf	5
  3911  0976  0800               	movf	0,w	;code access
  3912  0977  0020               	movlb	0	; select bank0
  3913  0978  00A4               	movwf	??_nrf24l01SetTXPipe
  3914  0979  3028               	movlw	low (_n_ADDRESS_MUL| (0+32768))
  3915  097A  0084               	movwf	4
  3916  097B  3098               	movlw	high (_n_ADDRESS_MUL| (0+32768))
  3917  097C  0085               	movwf	5
  3918  097D  0800               	movf	0,w	;code access
  3919  097E  00A5               	movwf	??_nrf24l01SetTXPipe+1
  3920  097F  0825               	movf	??_nrf24l01SetTXPipe+1,w
  3921  0980  00A0               	movwf	___bmul@multiplicand
  3922  0981  0826               	movf	nrf24l01SetTXPipe@pipe,w
  3923  0982  3188  2000  3189   	fcall	___bmul
  3924  0985  0020               	movlb	0	; select bank0
  3925  0986  0724               	addwf	??_nrf24l01SetTXPipe,w
  3926  0987  3195  254B  3189   	fcall	_nrf24l01SPISend
  3927                           
  3928                           ;nrf24l01.c: 189: nrf24l01SPISend(n_ADDRESS_P0[3]);
  3929  098A  304E               	movlw	low ((_n_ADDRESS_P0+3)| (0+32768))
  3930  098B  0084               	movwf	4
  3931  098C  3098               	movlw	high ((_n_ADDRESS_P0+3)| (0+32768))
  3932  098D  0085               	movwf	5
  3933  098E  0800               	movf	0,w	;code access
  3934  098F  3195  254B  3189   	fcall	_nrf24l01SPISend
  3935                           
  3936                           ;nrf24l01.c: 190: nrf24l01SPISend(n_ADDRESS_P0[2]);
  3937  0992  304D               	movlw	low ((_n_ADDRESS_P0+2)| (0+32768))
  3938  0993  0084               	movwf	4
  3939  0994  3098               	movlw	high ((_n_ADDRESS_P0+2)| (0+32768))
  3940  0995  0085               	movwf	5
  3941  0996  0800               	movf	0,w	;code access
  3942  0997  3195  254B  3189   	fcall	_nrf24l01SPISend
  3943                           
  3944                           ;nrf24l01.c: 191: nrf24l01SPISend(n_ADDRESS_P0[1]);
  3945  099A  304C               	movlw	low ((_n_ADDRESS_P0+1)| (0+32768))
  3946  099B  0084               	movwf	4
  3947  099C  3098               	movlw	high ((_n_ADDRESS_P0+1)| (0+32768))
  3948  099D  0085               	movwf	5
  3949  099E  0800               	movf	0,w	;code access
  3950  099F  3195  254B  3189   	fcall	_nrf24l01SPISend
  3951                           
  3952                           ;nrf24l01.c: 192: nrf24l01SPISend(n_ADDRESS_P0[0]);
  3953  09A2  304B               	movlw	low (_n_ADDRESS_P0| (0+32768))
  3954  09A3  0084               	movwf	4
  3955  09A4  3098               	movlw	high (_n_ADDRESS_P0| (0+32768))
  3956  09A5  0085               	movwf	5
  3957  09A6  0800               	movf	0,w	;code access
  3958  09A7  3195  254B  3189   	fcall	_nrf24l01SPISend
  3959                           
  3960                           ;nrf24l01.c: 193: nrf24l01SPIEnd();
  3961  09AA  3195  252B         	fcall	_nrf24l01SPIEnd
  3962  09AC  0008               	return
  3963  09AD                     __end_of_nrf24l01SetTXPipe:	
  3964                           
  3965                           	psect	text5
  3966  0800                     __ptext5:	
  3967 ;; *************** function ___bmul *****************
  3968 ;; Defined at:
  3969 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\Umul8.c"
  3970 ;; Parameters:    Size  Location     Type
  3971 ;;  multiplier      1    wreg     unsigned char 
  3972 ;;  multiplicand    1    0[BANK0 ] unsigned char 
  3973 ;; Auto vars:     Size  Location     Type
  3974 ;;  multiplier      1    3[BANK0 ] unsigned char 
  3975 ;;  product         1    2[BANK0 ] unsigned char 
  3976 ;; Return value:  Size  Location     Type
  3977 ;;                  1    wreg      unsigned char 
  3978 ;; Registers used:
  3979 ;;		wreg, status,2, status,0
  3980 ;; Tracked objects:
  3981 ;;		On entry : 0/0
  3982 ;;		On exit  : 0/0
  3983 ;;		Unchanged: 0/0
  3984 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3985 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3986 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3987 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3988 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3989 ;;Total ram usage:        4 bytes
  3990 ;; Hardware stack levels used:    1
  3991 ;; Hardware stack levels required when called:    7
  3992 ;; This function calls:
  3993 ;;		Nothing
  3994 ;; This function is called by:
  3995 ;;		_nrf24l01SetTXPipe
  3996 ;;		_nrf24l01InitRegisters
  3997 ;; This function uses a non-reentrant model
  3998 ;;
  3999                           
  4000                           
  4001                           ;psect for function ___bmul
  4002  0800                     ___bmul:	
  4003                           
  4004                           ;incstack = 0
  4005                           ; Regs used in ___bmul: [wreg+status,2+status,0]
  4006                           ;___bmul@multiplier stored from wreg
  4007  0800  0020               	movlb	0	; select bank0
  4008  0801  00A3               	movwf	___bmul@multiplier
  4009  0802  01A2               	clrf	___bmul@product
  4010  0803                     l2731:	
  4011  0803  1C23               	btfss	___bmul@multiplier,0
  4012  0804  2809               	goto	l2735
  4013  0805  0820               	movf	___bmul@multiplicand,w
  4014  0806  00A1               	movwf	??___bmul
  4015  0807  0821               	movf	??___bmul,w
  4016  0808  07A2               	addwf	___bmul@product,f
  4017  0809                     l2735:	
  4018  0809  1003               	clrc
  4019  080A  0DA0               	rlf	___bmul@multiplicand,f
  4020  080B  1003               	clrc
  4021  080C  0CA3               	rrf	___bmul@multiplier,f
  4022  080D  0823               	movf	___bmul@multiplier,w
  4023  080E  1D03               	btfss	3,2
  4024  080F  2803               	goto	l2731
  4025  0810  0822               	movf	___bmul@product,w
  4026  0811  0008               	return
  4027  0812                     __end_of___bmul:	
  4028                           
  4029                           	psect	text6
  4030  16C8                     __ptext6:	
  4031 ;; *************** function _nrf24l01SetRXPipe *****************
  4032 ;; Defined at:
  4033 ;;		line 196 in file "nrf24l01.c"
  4034 ;; Parameters:    Size  Location     Type
  4035 ;;  pipe            1    wreg     unsigned char 
  4036 ;; Auto vars:     Size  Location     Type
  4037 ;;  pipe            1    5[BANK0 ] unsigned char 
  4038 ;;  enRXAddr        1    6[BANK0 ] struct .
  4039 ;; Return value:  Size  Location     Type
  4040 ;;                  1    wreg      void 
  4041 ;; Registers used:
  4042 ;;		wreg, status,2, status,0, pclath, cstack
  4043 ;; Tracked objects:
  4044 ;;		On entry : 0/0
  4045 ;;		On exit  : 0/0
  4046 ;;		Unchanged: 0/0
  4047 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4048 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4049 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4050 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4051 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4052 ;;Total ram usage:        4 bytes
  4053 ;; Hardware stack levels used:    1
  4054 ;; Hardware stack levels required when called:   10
  4055 ;; This function calls:
  4056 ;;		_nrf24l01Send
  4057 ;; This function is called by:
  4058 ;;		_nrf24l01InitRegisters
  4059 ;; This function uses a non-reentrant model
  4060 ;;
  4061                           
  4062                           
  4063                           ;psect for function _nrf24l01SetRXPipe
  4064  16C8                     _nrf24l01SetRXPipe:	
  4065                           
  4066                           ;incstack = 0
  4067                           ; Regs used in _nrf24l01SetRXPipe: [wreg+status,2+status,0+pclath+cstack]
  4068                           ;nrf24l01SetRXPipe@pipe stored from wreg
  4069  16C8  0020               	movlb	0	; select bank0
  4070  16C9  00A5               	movwf	nrf24l01SetRXPipe@pipe
  4071                           
  4072                           ;nrf24l01.c: 198: n_EN_RXADDR_t enRXAddr;;nrf24l01.c: 200: if (pipe > 5){
  4073  16CA  3006               	movlw	6
  4074  16CB  0225               	subwf	nrf24l01SetRXPipe@pipe,w
  4075  16CC  1C03               	skipc
  4076  16CD  2ED5               	goto	l275
  4077                           
  4078                           ;nrf24l01.c: 201: enRXAddr.ERX_P0 = 1;
  4079  16CE  1426               	bsf	nrf24l01SetRXPipe@enRXAddr,0
  4080                           
  4081                           ;nrf24l01.c: 202: enRXAddr.ERX_P1 = 1;
  4082  16CF  14A6               	bsf	nrf24l01SetRXPipe@enRXAddr,1
  4083                           
  4084                           ;nrf24l01.c: 203: enRXAddr.ERX_P2 = 1;
  4085  16D0  1526               	bsf	nrf24l01SetRXPipe@enRXAddr,2
  4086                           
  4087                           ;nrf24l01.c: 204: enRXAddr.ERX_P3 = 1;
  4088  16D1  15A6               	bsf	nrf24l01SetRXPipe@enRXAddr,3
  4089                           
  4090                           ;nrf24l01.c: 205: enRXAddr.ERX_P4 = 1;
  4091  16D2  1626               	bsf	nrf24l01SetRXPipe@enRXAddr,4
  4092                           
  4093                           ;nrf24l01.c: 206: enRXAddr.ERX_P5 = 1;
  4094  16D3  16A6               	bsf	nrf24l01SetRXPipe@enRXAddr,5
  4095                           
  4096                           ;nrf24l01.c: 207: }
  4097  16D4  2EE1               	goto	l2969
  4098  16D5                     l275:	
  4099                           
  4100                           ;nrf24l01.c: 209: else{;nrf24l01.c: 210: enRXAddr.ERX_P0 = 1;
  4101  16D5  1426               	bsf	nrf24l01SetRXPipe@enRXAddr,0
  4102                           
  4103                           ;nrf24l01.c: 211: enRXAddr.byte = (unsigned) enRXAddr.byte << pipe;
  4104  16D6  0826               	movf	nrf24l01SetRXPipe@enRXAddr,w
  4105  16D7  00A3               	movwf	??_nrf24l01SetRXPipe
  4106  16D8  0A25               	incf	nrf24l01SetRXPipe@pipe,w
  4107  16D9  2EDB               	goto	u3214
  4108  16DA                     u3215:	
  4109  16DA  35A3               	lslf	??_nrf24l01SetRXPipe,f
  4110  16DB                     u3214:	
  4111  16DB  0B89               	decfsz	9,f
  4112  16DC  2EDA               	goto	u3215
  4113  16DD  0823               	movf	??_nrf24l01SetRXPipe,w
  4114  16DE  00A4               	movwf	??_nrf24l01SetRXPipe+1
  4115  16DF  0824               	movf	??_nrf24l01SetRXPipe+1,w
  4116  16E0  00A6               	movwf	nrf24l01SetRXPipe@enRXAddr
  4117  16E1                     l2969:	
  4118                           
  4119                           ;nrf24l01.c: 212: };nrf24l01.c: 214: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x0
      +                          2, enRXAddr.byte);
  4120  16E1  0826               	movf	nrf24l01SetRXPipe@enRXAddr,w
  4121  16E2  00A3               	movwf	??_nrf24l01SetRXPipe
  4122  16E3  0823               	movf	??_nrf24l01SetRXPipe,w
  4123  16E4  00A0               	movwf	nrf24l01Send@data
  4124  16E5  3022               	movlw	34
  4125  16E6  3196  26A8         	fcall	_nrf24l01Send
  4126  16E8  0008               	return
  4127  16E9                     __end_of_nrf24l01SetRXPipe:	
  4128                           
  4129                           	psect	text7
  4130  086F                     __ptext7:	
  4131 ;; *************** function _nrf24l01GetPipe *****************
  4132 ;; Defined at:
  4133 ;;		line 170 in file "main.c"
  4134 ;; Parameters:    Size  Location     Type
  4135 ;;  name            1    wreg     PTR unsigned char 
  4136 ;;		 -> romDataMap(28), 
  4137 ;; Auto vars:     Size  Location     Type
  4138 ;;  name            1    9[BANK0 ] PTR unsigned char 
  4139 ;;		 -> romDataMap(28), 
  4140 ;;  i               1   10[BANK0 ] unsigned char 
  4141 ;;  pipe            1    8[BANK0 ] unsigned char 
  4142 ;; Return value:  Size  Location     Type
  4143 ;;                  1    wreg      unsigned char 
  4144 ;; Registers used:
  4145 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4146 ;; Tracked objects:
  4147 ;;		On entry : 0/0
  4148 ;;		On exit  : 0/0
  4149 ;;		Unchanged: 0/0
  4150 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4151 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4152 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4153 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4154 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4155 ;;Total ram usage:        5 bytes
  4156 ;; Hardware stack levels used:    1
  4157 ;; Hardware stack levels required when called:    8
  4158 ;; This function calls:
  4159 ;;		___lwmod
  4160 ;;		_strlen
  4161 ;; This function is called by:
  4162 ;;		_main
  4163 ;; This function uses a non-reentrant model
  4164 ;;
  4165                           
  4166                           
  4167                           ;psect for function _nrf24l01GetPipe
  4168  086F                     _nrf24l01GetPipe:	
  4169                           
  4170                           ;incstack = 0
  4171                           ; Regs used in _nrf24l01GetPipe: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4172                           ;nrf24l01GetPipe@name stored from wreg
  4173  086F  0020               	movlb	0	; select bank0
  4174  0870  00A9               	movwf	nrf24l01GetPipe@name
  4175                           
  4176                           ;main.c: 171: unsigned char pipe = 0;
  4177  0871  01A8               	clrf	nrf24l01GetPipe@pipe
  4178                           
  4179                           ;main.c: 172: unsigned char i = 0;
  4180  0872  01AA               	clrf	nrf24l01GetPipe@i
  4181                           
  4182                           ;main.c: 175: for (i = 0; i < strlen(name); i++){
  4183  0873  01AA               	clrf	nrf24l01GetPipe@i
  4184  0874                     l3813:	
  4185  0874  0829               	movf	nrf24l01GetPipe@name,w
  4186  0875  00A0               	movwf	strlen@s
  4187  0876  3002               	movlw	2
  4188  0877  00A1               	movwf	strlen@s+1
  4189  0878  3196  2689  3188   	fcall	_strlen
  4190  087B  0020               	movlb	0	; select bank0
  4191  087C  082A               	movf	nrf24l01GetPipe@i,w
  4192  087D  00A6               	movwf	??_nrf24l01GetPipe
  4193  087E  01A7               	clrf	??_nrf24l01GetPipe+1
  4194  087F  0821               	movf	?_strlen+1,w
  4195  0880  0227               	subwf	??_nrf24l01GetPipe+1,w
  4196  0881  1D03               	skipz
  4197  0882  2885               	goto	u4075
  4198  0883  0820               	movf	?_strlen,w
  4199  0884  0226               	subwf	??_nrf24l01GetPipe,w
  4200  0885                     u4075:	
  4201  0885  1803               	btfsc	3,0
  4202  0886  2897               	goto	l3815
  4203                           
  4204                           ;main.c: 176: pipe+= name[i];
  4205  0887  082A               	movf	nrf24l01GetPipe@i,w
  4206  0888  0729               	addwf	nrf24l01GetPipe@name,w
  4207  0889  00A6               	movwf	??_nrf24l01GetPipe
  4208  088A  0826               	movf	??_nrf24l01GetPipe,w
  4209  088B  0086               	movwf	6
  4210  088C  3002               	movlw	2	; select bank4/5
  4211  088D  0087               	movwf	7
  4212  088E  0801               	movf	1,w
  4213  088F  00A7               	movwf	??_nrf24l01GetPipe+1
  4214  0890  0827               	movf	??_nrf24l01GetPipe+1,w
  4215  0891  07A8               	addwf	nrf24l01GetPipe@pipe,f
  4216  0892  3001               	movlw	1
  4217  0893  00A6               	movwf	??_nrf24l01GetPipe
  4218  0894  0826               	movf	??_nrf24l01GetPipe,w
  4219  0895  07AA               	addwf	nrf24l01GetPipe@i,f
  4220  0896  2874               	goto	l3813
  4221  0897                     l3815:	
  4222                           
  4223                           ;main.c: 177: };main.c: 179: return (unsigned) pipe % 6;
  4224  0897  3006               	movlw	6
  4225  0898  00A0               	movwf	___lwmod@divisor
  4226  0899  3000               	movlw	0
  4227  089A  00A1               	movwf	___lwmod@divisor+1
  4228  089B  0828               	movf	nrf24l01GetPipe@pipe,w
  4229  089C  00A6               	movwf	??_nrf24l01GetPipe
  4230  089D  01A7               	clrf	??_nrf24l01GetPipe+1
  4231  089E  0826               	movf	??_nrf24l01GetPipe,w
  4232  089F  00A2               	movwf	___lwmod@dividend
  4233  08A0  0827               	movf	??_nrf24l01GetPipe+1,w
  4234  08A1  00A3               	movwf	___lwmod@dividend+1
  4235  08A2  3188  2012         	fcall	___lwmod
  4236  08A4  0020               	movlb	0	; select bank0
  4237  08A5  0820               	movf	?___lwmod,w
  4238  08A6  0008               	return
  4239  08A7                     __end_of_nrf24l01GetPipe:	
  4240                           
  4241                           	psect	text8
  4242  0812                     __ptext8:	
  4243 ;; *************** function ___lwmod *****************
  4244 ;; Defined at:
  4245 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\lwmod.c"
  4246 ;; Parameters:    Size  Location     Type
  4247 ;;  divisor         2    0[BANK0 ] unsigned int 
  4248 ;;  dividend        2    2[BANK0 ] unsigned int 
  4249 ;; Auto vars:     Size  Location     Type
  4250 ;;  counter         1    5[BANK0 ] unsigned char 
  4251 ;; Return value:  Size  Location     Type
  4252 ;;                  2    0[BANK0 ] unsigned int 
  4253 ;; Registers used:
  4254 ;;		wreg, status,2, status,0
  4255 ;; Tracked objects:
  4256 ;;		On entry : 0/0
  4257 ;;		On exit  : 0/0
  4258 ;;		Unchanged: 0/0
  4259 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4260 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4261 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4262 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4263 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4264 ;;Total ram usage:        6 bytes
  4265 ;; Hardware stack levels used:    1
  4266 ;; Hardware stack levels required when called:    7
  4267 ;; This function calls:
  4268 ;;		Nothing
  4269 ;; This function is called by:
  4270 ;;		_nrf24l01GetPipe
  4271 ;; This function uses a non-reentrant model
  4272 ;;
  4273                           
  4274                           
  4275                           ;psect for function ___lwmod
  4276  0812                     ___lwmod:	
  4277                           
  4278                           ;incstack = 0
  4279                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  4280  0812  0020               	movlb	0	; select bank0
  4281  0813  0820               	movf	___lwmod@divisor,w
  4282  0814  0421               	iorwf	___lwmod@divisor+1,w
  4283  0815  1903               	btfsc	3,2
  4284  0816  283A               	goto	l3273
  4285  0817  01A5               	clrf	___lwmod@counter
  4286  0818  0AA5               	incf	___lwmod@counter,f
  4287  0819                     l3263:	
  4288  0819  1BA1               	btfsc	___lwmod@divisor+1,7
  4289  081A  2825               	goto	l3265
  4290  081B  3001               	movlw	1
  4291  081C                     u3445:	
  4292  081C  35A0               	lslf	___lwmod@divisor,f
  4293  081D  0DA1               	rlf	___lwmod@divisor+1,f
  4294  081E  0B89               	decfsz	9,f
  4295  081F  281C               	goto	u3445
  4296  0820  3001               	movlw	1
  4297  0821  00A4               	movwf	??___lwmod
  4298  0822  0824               	movf	??___lwmod,w
  4299  0823  07A5               	addwf	___lwmod@counter,f
  4300  0824  2819               	goto	l3263
  4301  0825                     l3265:	
  4302  0825  0821               	movf	___lwmod@divisor+1,w
  4303  0826  0223               	subwf	___lwmod@dividend+1,w
  4304  0827  1D03               	skipz
  4305  0828  282B               	goto	u3465
  4306  0829  0820               	movf	___lwmod@divisor,w
  4307  082A  0222               	subwf	___lwmod@dividend,w
  4308  082B                     u3465:	
  4309  082B  1C03               	skipc
  4310  082C  2831               	goto	l3269
  4311  082D  0820               	movf	___lwmod@divisor,w
  4312  082E  02A2               	subwf	___lwmod@dividend,f
  4313  082F  0821               	movf	___lwmod@divisor+1,w
  4314  0830  3BA3               	subwfb	___lwmod@dividend+1,f
  4315  0831                     l3269:	
  4316  0831  3001               	movlw	1
  4317  0832                     u3475:	
  4318  0832  36A1               	lsrf	___lwmod@divisor+1,f
  4319  0833  0CA0               	rrf	___lwmod@divisor,f
  4320  0834  0B89               	decfsz	9,f
  4321  0835  2832               	goto	u3475
  4322  0836  3001               	movlw	1
  4323  0837  02A5               	subwf	___lwmod@counter,f
  4324  0838  1D03               	btfss	3,2
  4325  0839  2825               	goto	l3265
  4326  083A                     l3273:	
  4327  083A  0823               	movf	___lwmod@dividend+1,w
  4328  083B  00A1               	movwf	?___lwmod+1
  4329  083C  0822               	movf	___lwmod@dividend,w
  4330  083D  00A0               	movwf	?___lwmod
  4331  083E  0008               	return
  4332  083F                     __end_of___lwmod:	
  4333                           
  4334                           	psect	text9
  4335  037A                     __ptext9:	
  4336 ;; *************** function _loop *****************
  4337 ;; Defined at:
  4338 ;;		line 128 in file "main.c"
  4339 ;; Parameters:    Size  Location     Type
  4340 ;;		None
  4341 ;; Auto vars:     Size  Location     Type
  4342 ;;  packet         33   16[BANK2 ] struct .
  4343 ;;  ta              3    3[BANK2 ] float 
  4344 ;;  vt              3    0[BANK2 ] float 
  4345 ;;  rfSetup         1   15[BANK2 ] struct .
  4346 ;; Return value:  Size  Location     Type
  4347 ;;                  1    wreg      void 
  4348 ;; Registers used:
  4349 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4350 ;; Tracked objects:
  4351 ;;		On entry : 0/0
  4352 ;;		On exit  : 0/0
  4353 ;;		Unchanged: 0/0
  4354 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4355 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4356 ;;      Locals:         0       0       0      49       0       0       0       0       0       0       0       0       
      +0       0
  4357 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  4358 ;;      Totals:         0       0       1      49       0       0       0       0       0       0       0       0       
      +0       0
  4359 ;;Total ram usage:       50 bytes
  4360 ;; Hardware stack levels used:    1
  4361 ;; Hardware stack levels required when called:   14
  4362 ;; This function calls:
  4363 ;;		___ftadd
  4364 ;;		___ftdiv
  4365 ;;		___ftmul
  4366 ;;		___ftneg
  4367 ;;		___lbtoft
  4368 ;;		___lltoft
  4369 ;;		_getADCValue
  4370 ;;		_nrf24l01Send
  4371 ;;		_sendMessage
  4372 ;; This function is called by:
  4373 ;;		_main
  4374 ;; This function uses a non-reentrant model
  4375 ;;
  4376                           
  4377                           
  4378                           ;psect for function _loop
  4379  037A                     _loop:	
  4380                           
  4381                           ;main.c: 130: nrf24l01Packet_t packet;;main.c: 132: sendMessage(&packet, "DBG1", counter
      +                          );
  4382                           
  4383                           ;incstack = 0
  4384                           ; Regs used in _loop: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4385  037A  0022               	movlb	2	; select bank2
  4386  037B  0854               	movf	(_counter+3)^(0+256),w
  4387  037C  0020               	movlb	0	; select bank0
  4388  037D  00AB               	movwf	___lltoft@c+3
  4389  037E  0022               	movlb	2	; select bank2
  4390  037F  0853               	movf	(_counter+2)^(0+256),w
  4391  0380  0020               	movlb	0	; select bank0
  4392  0381  00AA               	movwf	___lltoft@c+2
  4393  0382  0022               	movlb	2	; select bank2
  4394  0383  0852               	movf	(_counter+1)^(0+256),w
  4395  0384  0020               	movlb	0	; select bank0
  4396  0385  00A9               	movwf	___lltoft@c+1
  4397  0386  0022               	movlb	2	; select bank2
  4398  0387  0851               	movf	_counter^(0+256),w
  4399  0388  0020               	movlb	0	; select bank0
  4400  0389  00A8               	movwf	___lltoft@c
  4401  038A  3197  27AA  3183   	fcall	___lltoft
  4402  038D  0020               	movlb	0	; select bank0
  4403  038E  0828               	movf	?___lltoft,w
  4404  038F  0022               	movlb	2	; select bank2
  4405  0390  00A6               	movwf	_loop$1980^(0+256)
  4406  0391  0020               	movlb	0	; select bank0
  4407  0392  0829               	movf	?___lltoft+1,w
  4408  0393  0022               	movlb	2	; select bank2
  4409  0394  00A7               	movwf	(_loop$1980+1)^(0+256)
  4410  0395  0020               	movlb	0	; select bank0
  4411  0396  082A               	movf	?___lltoft+2,w
  4412  0397  0022               	movlb	2	; select bank2
  4413  0398  00A8               	movwf	(_loop$1980+2)^(0+256)
  4414                           
  4415                           ;main.c: 130: nrf24l01Packet_t packet;;main.c: 132: sendMessage(&packet, "DBG1", counter
      +                          );
  4416  0399  3030               	movlw	low loop@packet
  4417  039A  0021               	movlb	1	; select bank1
  4418  039B  00B9               	movwf	sendMessage@packet^(0+128)
  4419  039C  3001               	movlw	high loop@packet
  4420  039D  00BA               	movwf	(sendMessage@packet+1)^(0+128)
  4421  039E  3050               	movlw	low (STR_3| (0+32768))
  4422  039F  00BB               	movwf	sendMessage@topic^(0+128)
  4423  03A0  3098               	movlw	high (STR_3| (0+32768))
  4424  03A1  00BC               	movwf	(sendMessage@topic^(0+128)+1)
  4425  03A2  0022               	movlb	2	; select bank2
  4426  03A3  0826               	movf	_loop$1980^(0+256),w
  4427  03A4  0021               	movlb	1	; select bank1
  4428  03A5  00BD               	movwf	sendMessage@value^(0+128)
  4429  03A6  0022               	movlb	2	; select bank2
  4430  03A7  0827               	movf	(_loop$1980+1)^(0+256),w
  4431  03A8  0021               	movlb	1	; select bank1
  4432  03A9  00BE               	movwf	(sendMessage@value+1)^(0+128)
  4433  03AA  0022               	movlb	2	; select bank2
  4434  03AB  0828               	movf	(_loop$1980+2)^(0+256),w
  4435  03AC  0021               	movlb	1	; select bank1
  4436  03AD  00BF               	movwf	(sendMessage@value+2)^(0+128)
  4437  03AE  318B  230D  3183   	fcall	_sendMessage
  4438                           
  4439                           ;main.c: 138: sendMessage(&packet, "VBAT", getADCValue(0b000100) * 3.106382978723404);
  4440  03B1  30CF               	movlw	207
  4441  03B2  0020               	movlb	0	; select bank0
  4442  03B3  00D7               	movwf	___ftmul@f1
  4443  03B4  3046               	movlw	70
  4444  03B5  00D8               	movwf	___ftmul@f1+1
  4445  03B6  3040               	movlw	64
  4446  03B7  00D9               	movwf	___ftmul@f1+2
  4447  03B8  3004               	movlw	4
  4448  03B9  318C  24C9  3183   	fcall	_getADCValue
  4449  03BC  0020               	movlb	0	; select bank0
  4450  03BD  084B               	movf	?_getADCValue,w
  4451  03BE  00DA               	movwf	___ftmul@f2
  4452  03BF  084C               	movf	?_getADCValue+1,w
  4453  03C0  00DB               	movwf	___ftmul@f2+1
  4454  03C1  084D               	movf	?_getADCValue+2,w
  4455  03C2  00DC               	movwf	___ftmul@f2+2
  4456  03C3  3187  272F  3183   	fcall	___ftmul
  4457  03C6  0020               	movlb	0	; select bank0
  4458  03C7  0857               	movf	?___ftmul,w
  4459  03C8  0022               	movlb	2	; select bank2
  4460  03C9  00A9               	movwf	_loop$1981^(0+256)
  4461  03CA  0020               	movlb	0	; select bank0
  4462  03CB  0858               	movf	?___ftmul+1,w
  4463  03CC  0022               	movlb	2	; select bank2
  4464  03CD  00AA               	movwf	(_loop$1981+1)^(0+256)
  4465  03CE  0020               	movlb	0	; select bank0
  4466  03CF  0859               	movf	?___ftmul+2,w
  4467  03D0  0022               	movlb	2	; select bank2
  4468  03D1  00AB               	movwf	(_loop$1981+2)^(0+256)
  4469                           
  4470                           ;main.c: 138: sendMessage(&packet, "VBAT", getADCValue(0b000100) * 3.106382978723404);
  4471  03D2  3030               	movlw	low loop@packet
  4472  03D3  0021               	movlb	1	; select bank1
  4473  03D4  00B9               	movwf	sendMessage@packet^(0+128)
  4474  03D5  3001               	movlw	high loop@packet
  4475  03D6  00BA               	movwf	(sendMessage@packet+1)^(0+128)
  4476  03D7  305A               	movlw	low (STR_4| (0+32768))
  4477  03D8  00BB               	movwf	sendMessage@topic^(0+128)
  4478  03D9  3098               	movlw	high (STR_4| (0+32768))
  4479  03DA  00BC               	movwf	(sendMessage@topic^(0+128)+1)
  4480  03DB  0022               	movlb	2	; select bank2
  4481  03DC  0829               	movf	_loop$1981^(0+256),w
  4482  03DD  0021               	movlb	1	; select bank1
  4483  03DE  00BD               	movwf	sendMessage@value^(0+128)
  4484  03DF  0022               	movlb	2	; select bank2
  4485  03E0  082A               	movf	(_loop$1981+1)^(0+256),w
  4486  03E1  0021               	movlb	1	; select bank1
  4487  03E2  00BE               	movwf	(sendMessage@value+1)^(0+128)
  4488  03E3  0022               	movlb	2	; select bank2
  4489  03E4  082B               	movf	(_loop$1981+2)^(0+256),w
  4490  03E5  0021               	movlb	1	; select bank1
  4491  03E6  00BF               	movwf	(sendMessage@value+2)^(0+128)
  4492  03E7  318B  230D  3183   	fcall	_sendMessage
  4493                           
  4494                           ;main.c: 143: sendMessage(&packet, "ANC3mV", getADCValue(0b010011));
  4495  03EA  3030               	movlw	low loop@packet
  4496  03EB  0021               	movlb	1	; select bank1
  4497  03EC  00B9               	movwf	sendMessage@packet^(0+128)
  4498  03ED  3001               	movlw	high loop@packet
  4499  03EE  00BA               	movwf	(sendMessage@packet+1)^(0+128)
  4500  03EF  303E               	movlw	low (STR_5| (0+32768))
  4501  03F0  00BB               	movwf	sendMessage@topic^(0+128)
  4502  03F1  3098               	movlw	high (STR_5| (0+32768))
  4503  03F2  00BC               	movwf	(sendMessage@topic^(0+128)+1)
  4504  03F3  3013               	movlw	19
  4505  03F4  318C  24C9  3183   	fcall	_getADCValue
  4506  03F7  0020               	movlb	0	; select bank0
  4507  03F8  084B               	movf	?_getADCValue,w
  4508  03F9  0021               	movlb	1	; select bank1
  4509  03FA  00BD               	movwf	sendMessage@value^(0+128)
  4510  03FB  0020               	movlb	0	; select bank0
  4511  03FC  084C               	movf	?_getADCValue+1,w
  4512  03FD  0021               	movlb	1	; select bank1
  4513  03FE  00BE               	movwf	(sendMessage@value+1)^(0+128)
  4514  03FF  0020               	movlb	0	; select bank0
  4515  0400  084D               	movf	?_getADCValue+2,w
  4516  0401  0021               	movlb	1	; select bank1
  4517  0402  00BF               	movwf	(sendMessage@value+2)^(0+128)
  4518  0403  318B  230D  3183   	fcall	_sendMessage
  4519                           
  4520                           ;main.c: 149: FVRCONbits.TSEN = 1;
  4521  0406  0022               	movlb	2	; select bank2
  4522  0407  1697               	bsf	23,5	;volatile
  4523                           
  4524                           ;main.c: 150: float vt = (2.048 - getADCValue(0b111101)) / 2;
  4525  0408  303D               	movlw	61
  4526  0409  318C  24C9  3183   	fcall	_getADCValue
  4527  040C  0020               	movlb	0	; select bank0
  4528  040D  084B               	movf	?_getADCValue,w
  4529  040E  00D7               	movwf	___ftneg@f1
  4530  040F  084C               	movf	?_getADCValue+1,w
  4531  0410  00D8               	movwf	___ftneg@f1+1
  4532  0411  084D               	movf	?_getADCValue+2,w
  4533  0412  00D9               	movwf	___ftneg@f1+2
  4534  0413  3195  2542  3183   	fcall	___ftneg
  4535  0416  0020               	movlb	0	; select bank0
  4536  0417  0857               	movf	?___ftneg,w
  4537  0418  0022               	movlb	2	; select bank2
  4538  0419  00AC               	movwf	_loop$1982^(0+256)
  4539  041A  0020               	movlb	0	; select bank0
  4540  041B  0858               	movf	?___ftneg+1,w
  4541  041C  0022               	movlb	2	; select bank2
  4542  041D  00AD               	movwf	(_loop$1982+1)^(0+256)
  4543  041E  0020               	movlb	0	; select bank0
  4544  041F  0859               	movf	?___ftneg+2,w
  4545  0420  0022               	movlb	2	; select bank2
  4546  0421  00AE               	movwf	(_loop$1982+2)^(0+256)
  4547                           
  4548                           ;main.c: 150: float vt = (2.048 - getADCValue(0b111101)) / 2;
  4549  0422  3000               	movlw	0
  4550  0423  0020               	movlb	0	; select bank0
  4551  0424  00BB               	movwf	___ftdiv@f2
  4552  0425  3000               	movlw	0
  4553  0426  00BC               	movwf	___ftdiv@f2+1
  4554  0427  3040               	movlw	64
  4555  0428  00BD               	movwf	___ftdiv@f2+2
  4556  0429  3012               	movlw	18
  4557  042A  00AE               	movwf	___ftadd@f1
  4558  042B  3003               	movlw	3
  4559  042C  00AF               	movwf	___ftadd@f1+1
  4560  042D  3040               	movlw	64
  4561  042E  00B0               	movwf	___ftadd@f1+2
  4562  042F  0022               	movlb	2	; select bank2
  4563  0430  082C               	movf	_loop$1982^(0+256),w
  4564  0431  0020               	movlb	0	; select bank0
  4565  0432  00B1               	movwf	___ftadd@f2
  4566  0433  0022               	movlb	2	; select bank2
  4567  0434  082D               	movf	(_loop$1982+1)^(0+256),w
  4568  0435  0020               	movlb	0	; select bank0
  4569  0436  00B2               	movwf	___ftadd@f2+1
  4570  0437  0022               	movlb	2	; select bank2
  4571  0438  082E               	movf	(_loop$1982+2)^(0+256),w
  4572  0439  0020               	movlb	0	; select bank0
  4573  043A  00B3               	movwf	___ftadd@f2+2
  4574  043B  318F  270A  3183   	fcall	___ftadd
  4575  043E  0020               	movlb	0	; select bank0
  4576  043F  082E               	movf	?___ftadd,w
  4577  0440  00BE               	movwf	___ftdiv@f1
  4578  0441  082F               	movf	?___ftadd+1,w
  4579  0442  00BF               	movwf	___ftdiv@f1+1
  4580  0443  0830               	movf	?___ftadd+2,w
  4581  0444  00C0               	movwf	___ftdiv@f1+2
  4582  0445  318D  256F  3183   	fcall	___ftdiv
  4583  0448  0020               	movlb	0	; select bank0
  4584  0449  083B               	movf	?___ftdiv,w
  4585  044A  0022               	movlb	2	; select bank2
  4586  044B  00A0               	movwf	loop@vt^(0+256)
  4587  044C  0020               	movlb	0	; select bank0
  4588  044D  083C               	movf	?___ftdiv+1,w
  4589  044E  0022               	movlb	2	; select bank2
  4590  044F  00A1               	movwf	(loop@vt+1)^(0+256)
  4591  0450  0020               	movlb	0	; select bank0
  4592  0451  083D               	movf	?___ftdiv+2,w
  4593  0452  0022               	movlb	2	; select bank2
  4594  0453  00A2               	movwf	(loop@vt+2)^(0+256)
  4595                           
  4596                           ;main.c: 151: FVRCONbits.TSEN = 0;
  4597  0454  1297               	bcf	23,5	;volatile
  4598                           
  4599                           ;main.c: 156: float ta = (vt / -0.00132) - (0.6063 / -0.00132) - 40;
  4600  0455  30A9               	movlw	169
  4601  0456  0020               	movlb	0	; select bank0
  4602  0457  00AE               	movwf	___ftadd@f1
  4603  0458  30D1               	movlw	209
  4604  0459  00AF               	movwf	___ftadd@f1+1
  4605  045A  3043               	movlw	67
  4606  045B  00B0               	movwf	___ftadd@f1+2
  4607  045C  3004               	movlw	4
  4608  045D  00BB               	movwf	___ftdiv@f2
  4609  045E  30AD               	movlw	173
  4610  045F  00BC               	movwf	___ftdiv@f2+1
  4611  0460  30BA               	movlw	186
  4612  0461  00BD               	movwf	___ftdiv@f2+2
  4613  0462  0022               	movlb	2	; select bank2
  4614  0463  0820               	movf	loop@vt^(0+256),w
  4615  0464  0020               	movlb	0	; select bank0
  4616  0465  00BE               	movwf	___ftdiv@f1
  4617  0466  0022               	movlb	2	; select bank2
  4618  0467  0821               	movf	(loop@vt+1)^(0+256),w
  4619  0468  0020               	movlb	0	; select bank0
  4620  0469  00BF               	movwf	___ftdiv@f1+1
  4621  046A  0022               	movlb	2	; select bank2
  4622  046B  0822               	movf	(loop@vt+2)^(0+256),w
  4623  046C  0020               	movlb	0	; select bank0
  4624  046D  00C0               	movwf	___ftdiv@f1+2
  4625  046E  318D  256F  3183   	fcall	___ftdiv
  4626  0471  0020               	movlb	0	; select bank0
  4627  0472  083B               	movf	?___ftdiv,w
  4628  0473  00B1               	movwf	___ftadd@f2
  4629  0474  083C               	movf	?___ftdiv+1,w
  4630  0475  00B2               	movwf	___ftadd@f2+1
  4631  0476  083D               	movf	?___ftdiv+2,w
  4632  0477  00B3               	movwf	___ftadd@f2+2
  4633  0478  318F  270A  3183   	fcall	___ftadd
  4634  047B  0020               	movlb	0	; select bank0
  4635  047C  082E               	movf	?___ftadd,w
  4636  047D  0022               	movlb	2	; select bank2
  4637  047E  00A3               	movwf	loop@ta^(0+256)
  4638  047F  0020               	movlb	0	; select bank0
  4639  0480  082F               	movf	?___ftadd+1,w
  4640  0481  0022               	movlb	2	; select bank2
  4641  0482  00A4               	movwf	(loop@ta+1)^(0+256)
  4642  0483  0020               	movlb	0	; select bank0
  4643  0484  0830               	movf	?___ftadd+2,w
  4644  0485  0022               	movlb	2	; select bank2
  4645  0486  00A5               	movwf	(loop@ta+2)^(0+256)
  4646                           
  4647                           ;main.c: 158: sendMessage(&packet, "TEMP", ta);
  4648  0487  3030               	movlw	low loop@packet
  4649  0488  0021               	movlb	1	; select bank1
  4650  0489  00B9               	movwf	sendMessage@packet^(0+128)
  4651  048A  3001               	movlw	high loop@packet
  4652  048B  00BA               	movwf	(sendMessage@packet+1)^(0+128)
  4653  048C  3055               	movlw	low (STR_6| (0+32768))
  4654  048D  00BB               	movwf	sendMessage@topic^(0+128)
  4655  048E  3098               	movlw	high (STR_6| (0+32768))
  4656  048F  00BC               	movwf	(sendMessage@topic^(0+128)+1)
  4657  0490  0022               	movlb	2	; select bank2
  4658  0491  0823               	movf	loop@ta^(0+256),w
  4659  0492  0021               	movlb	1	; select bank1
  4660  0493  00BD               	movwf	sendMessage@value^(0+128)
  4661  0494  0022               	movlb	2	; select bank2
  4662  0495  0824               	movf	(loop@ta+1)^(0+256),w
  4663  0496  0021               	movlb	1	; select bank1
  4664  0497  00BE               	movwf	(sendMessage@value+1)^(0+128)
  4665  0498  0022               	movlb	2	; select bank2
  4666  0499  0825               	movf	(loop@ta+2)^(0+256),w
  4667  049A  0021               	movlb	1	; select bank1
  4668  049B  00BF               	movwf	(sendMessage@value+2)^(0+128)
  4669  049C  318B  230D  3183   	fcall	_sendMessage
  4670                           
  4671                           ;main.c: 162: n_RF_SETUP_t rfSetup;;main.c: 163: rfSetup.byte = nrf24l01Send((unsigned) 
      +                          0b00000000 | (unsigned) 0x06, 0);
  4672  049F  0020               	movlb	0	; select bank0
  4673  04A0  01A0               	clrf	nrf24l01Send@data
  4674  04A1  3006               	movlw	6
  4675  04A2  3196  26A8  3183   	fcall	_nrf24l01Send
  4676  04A5  0021               	movlb	1	; select bank1
  4677  04A6  00C3               	movwf	??_loop^(0+128)
  4678  04A7  0843               	movf	??_loop^(0+128),w
  4679  04A8  0022               	movlb	2	; select bank2
  4680  04A9  00AF               	movwf	loop@rfSetup^(0+256)
  4681                           
  4682                           ;main.c: 165: sendMessage(&packet, "RFPWR", rfSetup.RF_PWR);
  4683  04AA  3030               	movlw	low loop@packet
  4684  04AB  0021               	movlb	1	; select bank1
  4685  04AC  00B9               	movwf	sendMessage@packet^(0+128)
  4686  04AD  3001               	movlw	high loop@packet
  4687  04AE  00BA               	movwf	(sendMessage@packet+1)^(0+128)
  4688  04AF  3045               	movlw	low (STR_7| (0+32768))
  4689  04B0  00BB               	movwf	sendMessage@topic^(0+128)
  4690  04B1  3098               	movlw	high (STR_7| (0+32768))
  4691  04B2  00BC               	movwf	(sendMessage@topic^(0+128)+1)
  4692  04B3  0022               	movlb	2	; select bank2
  4693  04B4  0C2F               	rrf	loop@rfSetup^(0+256),w
  4694  04B5  3903               	andlw	3
  4695  04B6  3195  25F9  3183   	fcall	___lbtoft
  4696  04B9  0020               	movlb	0	; select bank0
  4697  04BA  0828               	movf	?___lbtoft,w
  4698  04BB  0021               	movlb	1	; select bank1
  4699  04BC  00BD               	movwf	sendMessage@value^(0+128)
  4700  04BD  0020               	movlb	0	; select bank0
  4701  04BE  0829               	movf	?___lbtoft+1,w
  4702  04BF  0021               	movlb	1	; select bank1
  4703  04C0  00BE               	movwf	(sendMessage@value+1)^(0+128)
  4704  04C1  0020               	movlb	0	; select bank0
  4705  04C2  082A               	movf	?___lbtoft+2,w
  4706  04C3  0021               	movlb	1	; select bank1
  4707  04C4  00BF               	movwf	(sendMessage@value+2)^(0+128)
  4708  04C5  318B  230D         	fcall	_sendMessage
  4709  04C7  0008               	return
  4710  04C8                     __end_of_loop:	
  4711                           
  4712                           	psect	text10
  4713  0B0D                     __ptext10:	
  4714 ;; *************** function _sendMessage *****************
  4715 ;; Defined at:
  4716 ;;		line 108 in file "main.c"
  4717 ;; Parameters:    Size  Location     Type
  4718 ;;  packet          2   25[BANK1 ] PTR struct .
  4719 ;;		 -> main@packet(33), loop@packet(33), 
  4720 ;;  topic           2   27[BANK1 ] PTR const unsigned char 
  4721 ;;		 -> STR_9(5), STR_7(6), STR_6(5), STR_5(7), 
  4722 ;;		 -> STR_4(5), STR_3(5), 
  4723 ;;  value           3   29[BANK1 ] float 
  4724 ;; Auto vars:     Size  Location     Type
  4725 ;;  status          2   33[BANK1 ] int 
  4726 ;; Return value:  Size  Location     Type
  4727 ;;                  1    wreg      void 
  4728 ;; Registers used:
  4729 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4730 ;; Tracked objects:
  4731 ;;		On entry : 0/0
  4732 ;;		On exit  : 0/0
  4733 ;;		Unchanged: 0/0
  4734 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4735 ;;      Params:         0       0       7       0       0       0       0       0       0       0       0       0       
      +0       0
  4736 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  4737 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  4738 ;;      Totals:         0       0      10       0       0       0       0       0       0       0       0       0       
      +0       0
  4739 ;;Total ram usage:       10 bytes
  4740 ;; Hardware stack levels used:    1
  4741 ;; Hardware stack levels required when called:   13
  4742 ;; This function calls:
  4743 ;;		_ftoa
  4744 ;;		_memset
  4745 ;;		_nrf24l01SendPacket
  4746 ;;		_sleep
  4747 ;;		_strcat
  4748 ;;		_strcpy
  4749 ;; This function is called by:
  4750 ;;		_loop
  4751 ;;		_main
  4752 ;; This function uses a non-reentrant model
  4753 ;;
  4754                           
  4755                           
  4756                           ;psect for function _sendMessage
  4757  0B0D                     _sendMessage:	
  4758                           
  4759                           ;main.c: 110: int status;;main.c: 112: memset(packet->Message, 0, sizeof(packet->Message
      +                          ));
  4760                           
  4761                           ;incstack = 0
  4762                           ; Regs used in _sendMessage: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4763  0B0D  0021               	movlb	1	; select bank1
  4764  0B0E  0839               	movf	sendMessage@packet^(0+128),w
  4765  0B0F  3E01               	addlw	1
  4766  0B10  0020               	movlb	0	; select bank0
  4767  0B11  00A0               	movwf	memset@p1
  4768  0B12  3000               	movlw	0
  4769  0B13  0021               	movlb	1	; select bank1
  4770  0B14  3D3A               	addwfc	(sendMessage@packet+1)^(0+128),w
  4771  0B15  0020               	movlb	0	; select bank0
  4772  0B16  00A1               	movwf	memset@p1+1
  4773  0B17  3000               	movlw	0
  4774  0B18  00A2               	movwf	memset@c
  4775  0B19  00A3               	movwf	memset@c+1
  4776  0B1A  3020               	movlw	32
  4777  0B1B  00A4               	movwf	memset@n
  4778  0B1C  3000               	movlw	0
  4779  0B1D  00A5               	movwf	memset@n+1
  4780  0B1E  3195  25AB  318B   	fcall	_memset
  4781                           
  4782                           ;main.c: 113: strcpy(packet->Message, romData->name);
  4783  0B21  0021               	movlb	1	; select bank1
  4784  0B22  0839               	movf	sendMessage@packet^(0+128),w
  4785  0B23  3E01               	addlw	1
  4786  0B24  0020               	movlb	0	; select bank0
  4787  0B25  00A0               	movwf	strcpy@to
  4788  0B26  3000               	movlw	0
  4789  0B27  0021               	movlb	1	; select bank1
  4790  0B28  3D3A               	addwfc	(sendMessage@packet+1)^(0+128),w
  4791  0B29  0020               	movlb	0	; select bank0
  4792  0B2A  00A1               	movwf	strcpy@to+1
  4793  0B2B  0021               	movlb	1	; select bank1
  4794  0B2C  086B               	movf	_romData^(0+128),w
  4795  0B2D  3E01               	addlw	1
  4796  0B2E  0020               	movlb	0	; select bank0
  4797  0B2F  00A2               	movwf	strcpy@from
  4798  0B30  3002               	movlw	2
  4799  0B31  00A3               	movwf	strcpy@from+1
  4800  0B32  3196  2614  318B   	fcall	_strcpy
  4801                           
  4802                           ;main.c: 114: strcat(packet->Message, "/");
  4803  0B35  0021               	movlb	1	; select bank1
  4804  0B36  0839               	movf	sendMessage@packet^(0+128),w
  4805  0B37  3E01               	addlw	1
  4806  0B38  00B3               	movwf	strcat@to^(0+128)
  4807  0B39  3000               	movlw	0
  4808  0B3A  3D3A               	addwfc	(sendMessage@packet+1)^(0+128),w
  4809  0B3B  00B4               	movwf	(strcat@to+1)^(0+128)
  4810  0B3C  3068               	movlw	low (STR_1| (0+32768))
  4811  0B3D  00B5               	movwf	strcat@from^(0+128)
  4812  0B3E  3098               	movlw	high (STR_1| (0+32768))
  4813  0B3F  00B6               	movwf	(strcat@from^(0+128)+1)
  4814  0B40  3197  2732  318B   	fcall	_strcat
  4815                           
  4816                           ;main.c: 115: strcat(packet->Message, topic);
  4817  0B43  0021               	movlb	1	; select bank1
  4818  0B44  0839               	movf	sendMessage@packet^(0+128),w
  4819  0B45  3E01               	addlw	1
  4820  0B46  00B3               	movwf	strcat@to^(0+128)
  4821  0B47  3000               	movlw	0
  4822  0B48  3D3A               	addwfc	(sendMessage@packet+1)^(0+128),w
  4823  0B49  00B4               	movwf	(strcat@to+1)^(0+128)
  4824  0B4A  083C               	movf	(sendMessage@topic+1)^(0+128),w
  4825  0B4B  00B6               	movwf	(strcat@from+1)^(0+128)
  4826  0B4C  083B               	movf	sendMessage@topic^(0+128),w
  4827  0B4D  00B5               	movwf	strcat@from^(0+128)
  4828  0B4E  3197  2732  318B   	fcall	_strcat
  4829                           
  4830                           ;main.c: 116: strcat(packet->Message, "/");
  4831  0B51  0021               	movlb	1	; select bank1
  4832  0B52  0839               	movf	sendMessage@packet^(0+128),w
  4833  0B53  3E01               	addlw	1
  4834  0B54  00B3               	movwf	strcat@to^(0+128)
  4835  0B55  3000               	movlw	0
  4836  0B56  3D3A               	addwfc	(sendMessage@packet+1)^(0+128),w
  4837  0B57  00B4               	movwf	(strcat@to+1)^(0+128)
  4838  0B58  3068               	movlw	low (STR_1| (0+32768))
  4839  0B59  00B5               	movwf	strcat@from^(0+128)
  4840  0B5A  3098               	movlw	high (STR_1| (0+32768))
  4841  0B5B  00B6               	movwf	(strcat@from^(0+128)+1)
  4842  0B5C  3197  2732  318B   	fcall	_strcat
  4843                           
  4844                           ;main.c: 117: strcat(packet->Message, ftoa(value, &status));
  4845  0B5F  0021               	movlb	1	; select bank1
  4846  0B60  0839               	movf	sendMessage@packet^(0+128),w
  4847  0B61  3E01               	addlw	1
  4848  0B62  00B3               	movwf	strcat@to^(0+128)
  4849  0B63  3000               	movlw	0
  4850  0B64  3D3A               	addwfc	(sendMessage@packet+1)^(0+128),w
  4851  0B65  00B4               	movwf	(strcat@to+1)^(0+128)
  4852  0B66  083D               	movf	sendMessage@value^(0+128),w
  4853  0B67  00A6               	movwf	ftoa@f^(0+128)
  4854  0B68  083E               	movf	(sendMessage@value+1)^(0+128),w
  4855  0B69  00A7               	movwf	(ftoa@f+1)^(0+128)
  4856  0B6A  083F               	movf	(sendMessage@value+2)^(0+128),w
  4857  0B6B  00A8               	movwf	(ftoa@f+2)^(0+128)
  4858  0B6C  30C1               	movlw	(low (sendMessage@status| 0))& (0+255)
  4859  0B6D  00C0               	movwf	??_sendMessage^(0+128)
  4860  0B6E  0840               	movf	??_sendMessage^(0+128),w
  4861  0B6F  00A9               	movwf	ftoa@status^(0+128)
  4862  0B70  318E  2618  318B   	fcall	_ftoa
  4863  0B73  0021               	movlb	1	; select bank1
  4864  0B74  00B5               	movwf	strcat@from^(0+128)
  4865  0B75  3001               	movlw	1
  4866  0B76  00B6               	movwf	(strcat@from+1)^(0+128)
  4867  0B77  3197  2732  318B   	fcall	_strcat
  4868                           
  4869                           ;main.c: 119: packet->packetData.byte = 0;
  4870  0B7A  0021               	movlb	1	; select bank1
  4871  0B7B  0839               	movf	sendMessage@packet^(0+128),w
  4872  0B7C  0086               	movwf	6
  4873  0B7D  083A               	movf	(sendMessage@packet+1)^(0+128),w
  4874  0B7E  0087               	movwf	7
  4875  0B7F  0181               	clrf	1
  4876                           
  4877                           ;main.c: 120: packet->packetData.ACKRequest = 1;
  4878  0B80  0839               	movf	sendMessage@packet^(0+128),w
  4879  0B81  0086               	movwf	6
  4880  0B82  083A               	movf	(sendMessage@packet+1)^(0+128),w
  4881  0B83  0087               	movwf	7
  4882  0B84  1501               	bsf	1,2
  4883                           
  4884                           ;main.c: 122: nrf24l01SendPacket(packet);
  4885  0B85  083A               	movf	(sendMessage@packet+1)^(0+128),w
  4886  0B86  0020               	movlb	0	; select bank0
  4887  0B87  00AD               	movwf	nrf24l01SendPacket@txPacket+1
  4888  0B88  0021               	movlb	1	; select bank1
  4889  0B89  0839               	movf	sendMessage@packet^(0+128),w
  4890  0B8A  0020               	movlb	0	; select bank0
  4891  0B8B  00AC               	movwf	nrf24l01SendPacket@txPacket
  4892  0B8C  3189  21AD  318B   	fcall	_nrf24l01SendPacket
  4893                           
  4894                           ;main.c: 124: sleep(5000);
  4895  0B8F  3088               	movlw	136
  4896  0B90  0020               	movlb	0	; select bank0
  4897  0B91  00A5               	movwf	sleep@milliseconds
  4898  0B92  3013               	movlw	19
  4899  0B93  00A6               	movwf	sleep@milliseconds+1
  4900  0B94  3195  25C4         	fcall	_sleep
  4901  0B96  0008               	return
  4902  0B97                     __end_of_sendMessage:	
  4903                           
  4904                           	psect	text11
  4905  1732                     __ptext11:	
  4906 ;; *************** function _strcat *****************
  4907 ;; Defined at:
  4908 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\strcat.c"
  4909 ;; Parameters:    Size  Location     Type
  4910 ;;  to              2   19[BANK1 ] PTR unsigned char 
  4911 ;;		 -> main@packet(33), loop@packet(33), 
  4912 ;;  from            2   21[BANK1 ] PTR const unsigned char 
  4913 ;;		 -> ftoa@buf(17), STR_9(5), STR_7(6), STR_6(5), 
  4914 ;;		 -> STR_5(7), STR_4(5), STR_3(5), STR_2(2), 
  4915 ;;		 -> STR_1(2), 
  4916 ;; Auto vars:     Size  Location     Type
  4917 ;;  cp              2   23[BANK1 ] PTR unsigned char 
  4918 ;;		 -> main@packet(33), loop@packet(33), 
  4919 ;; Return value:  Size  Location     Type
  4920 ;;                  2   19[BANK1 ] PTR unsigned char 
  4921 ;; Registers used:
  4922 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath
  4923 ;; Tracked objects:
  4924 ;;		On entry : 0/0
  4925 ;;		On exit  : 0/0
  4926 ;;		Unchanged: 0/0
  4927 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4928 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  4929 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  4930 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4931 ;;      Totals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0
  4932 ;;Total ram usage:        6 bytes
  4933 ;; Hardware stack levels used:    1
  4934 ;; Hardware stack levels required when called:    7
  4935 ;; This function calls:
  4936 ;;		Nothing
  4937 ;; This function is called by:
  4938 ;;		_sendMessage
  4939 ;; This function uses a non-reentrant model
  4940 ;;
  4941                           
  4942                           
  4943                           ;psect for function _strcat
  4944  1732                     _strcat:	
  4945                           
  4946                           ;incstack = 0
  4947                           ; Regs used in _strcat: [wreg-fsr1h+status,2+status,0+pclath]
  4948  1732  0021               	movlb	1	; select bank1
  4949  1733  0834               	movf	(strcat@to+1)^(0+128),w
  4950  1734  00B8               	movwf	(strcat@cp+1)^(0+128)
  4951  1735  0833               	movf	strcat@to^(0+128),w
  4952  1736  00B7               	movwf	strcat@cp^(0+128)
  4953  1737                     l2909:	
  4954  1737  0837               	movf	strcat@cp^(0+128),w
  4955  1738  0086               	movwf	6
  4956  1739  0838               	movf	(strcat@cp+1)^(0+128),w
  4957  173A  0087               	movwf	7
  4958  173B  0801               	movf	1,w
  4959  173C  1903               	btfsc	3,2
  4960  173D  2F4B               	goto	l2913
  4961  173E  3001               	movlw	1
  4962  173F  07B7               	addwf	strcat@cp^(0+128),f
  4963  1740  3000               	movlw	0
  4964  1741  3DB8               	addwfc	(strcat@cp+1)^(0+128),f
  4965  1742  2F37               	goto	l2909
  4966  1743                     l2911:	
  4967  1743  3001               	movlw	1
  4968  1744  07B7               	addwf	strcat@cp^(0+128),f
  4969  1745  3000               	movlw	0
  4970  1746  3DB8               	addwfc	(strcat@cp+1)^(0+128),f
  4971  1747  3001               	movlw	1
  4972  1748  07B5               	addwf	strcat@from^(0+128),f
  4973  1749  3000               	movlw	0
  4974  174A  3DB6               	addwfc	(strcat@from+1)^(0+128),f
  4975  174B                     l2913:	
  4976  174B  0837               	movf	strcat@cp^(0+128),w
  4977  174C  0086               	movwf	6
  4978  174D  0838               	movf	(strcat@cp+1)^(0+128),w
  4979  174E  0087               	movwf	7
  4980  174F  0835               	movf	strcat@from^(0+128),w
  4981  1750  0084               	movwf	4
  4982  1751  0836               	movf	(strcat@from+1)^(0+128),w
  4983  1752  0085               	movwf	5
  4984  1753  0800               	movf	0,w	;code access
  4985  1754  3FC0               	movwi [0]fsr1
  4986  1755  0889               	movf	9,f
  4987  1756  1903               	btfsc	3,2
  4988  1757  0008               	return
  4989  1758  2F43               	goto	l2911
  4990  1759                     __end_of_strcat:	
  4991                           ;	Return value of _strcat is never used
  4992                           
  4993                           
  4994                           	psect	text12
  4995  15C4                     __ptext12:	
  4996 ;; *************** function _sleep *****************
  4997 ;; Defined at:
  4998 ;;		line 79 in file "main.c"
  4999 ;; Parameters:    Size  Location     Type
  5000 ;;  milliseconds    2    5[BANK0 ] unsigned int 
  5001 ;; Auto vars:     Size  Location     Type
  5002 ;;		None
  5003 ;; Return value:  Size  Location     Type
  5004 ;;                  1    wreg      void 
  5005 ;; Registers used:
  5006 ;;		wreg, status,2, status,0, pclath, cstack
  5007 ;; Tracked objects:
  5008 ;;		On entry : 0/0
  5009 ;;		On exit  : 0/0
  5010 ;;		Unchanged: 0/0
  5011 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5012 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5013 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5014 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5015 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5016 ;;Total ram usage:        4 bytes
  5017 ;; Hardware stack levels used:    1
  5018 ;; Hardware stack levels required when called:    8
  5019 ;; This function calls:
  5020 ;;		_doWDTSleep
  5021 ;;		_sleepMs
  5022 ;; This function is called by:
  5023 ;;		_sendMessage
  5024 ;; This function uses a non-reentrant model
  5025 ;;
  5026                           
  5027                           
  5028                           ;psect for function _sleep
  5029  15C4                     _sleep:	
  5030                           
  5031                           ;main.c: 81: sleepMs(milliseconds);
  5032                           
  5033                           ;incstack = 0
  5034                           ; Regs used in _sleep: [wreg+status,2+status,0+pclath+cstack]
  5035  15C4  0020               	movlb	0	; select bank0
  5036  15C5  0826               	movf	sleep@milliseconds+1,w
  5037  15C6  00A1               	movwf	sleepMs@milliseconds+1
  5038  15C7  0825               	movf	sleep@milliseconds,w
  5039  15C8  00A0               	movwf	sleepMs@milliseconds
  5040  15C9  3188  203F         	fcall	_sleepMs
  5041                           
  5042                           ;main.c: 82: return;
  5043  15CB  0008               	return
  5044  15CC                     l2901:	
  5045                           ;main.c: 91: while (--milliseconds){
  5046                           
  5047                           ;main.c: 88: milliseconds++;
  5048                           
  5049                           ;main.c: 85: milliseconds = (unsigned int) (milliseconds / (128 + 128));
  5050                           
  5051                           
  5052                           ;main.c: 97: doWDTSleep(0b00111);
  5053  15CC  3007               	movlw	7
  5054  15CD  3195  257C  3195   	fcall	_doWDTSleep
  5055                           
  5056                           ;main.c: 103: doWDTSleep(0b00111);
  5057  15D0  3007               	movlw	7
  5058  15D1  3195  257C  3195   	fcall	_doWDTSleep
  5059  15D4  3001               	movlw	1
  5060  15D5  0020               	movlb	0	; select bank0
  5061  15D6  02A5               	subwf	sleep@milliseconds,f
  5062  15D7  3000               	movlw	0
  5063  15D8  3BA6               	subwfb	sleep@milliseconds+1,f
  5064  15D9  0825               	movf	sleep@milliseconds,w
  5065  15DA  0426               	iorwf	sleep@milliseconds+1,w
  5066  15DB  1903               	btfsc	3,2
  5067  15DC  0008               	return
  5068  15DD  2DCC               	goto	l2901
  5069  15DE                     __end_of_sleep:	
  5070                           
  5071                           	psect	text13
  5072  09AD                     __ptext13:	
  5073 ;; *************** function _nrf24l01SendPacket *****************
  5074 ;; Defined at:
  5075 ;;		line 220 in file "nrf24l01.c"
  5076 ;; Parameters:    Size  Location     Type
  5077 ;;  txPacket        2   12[BANK0 ] PTR struct .
  5078 ;;		 -> main@packet(33), loop@packet(33), 
  5079 ;; Auto vars:     Size  Location     Type
  5080 ;;		None
  5081 ;; Return value:  Size  Location     Type
  5082 ;;                  1    wreg      void 
  5083 ;; Registers used:
  5084 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5085 ;; Tracked objects:
  5086 ;;		On entry : 0/0
  5087 ;;		On exit  : 0/0
  5088 ;;		Unchanged: 0/0
  5089 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5090 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5091 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5092 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5093 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5094 ;;Total ram usage:        4 bytes
  5095 ;; Hardware stack levels used:    1
  5096 ;; Hardware stack levels required when called:   12
  5097 ;; This function calls:
  5098 ;;		_nrf24l01Service
  5099 ;;		_sleepMs
  5100 ;;		_strcpy
  5101 ;; This function is called by:
  5102 ;;		_sendMessage
  5103 ;; This function uses a non-reentrant model
  5104 ;;
  5105                           
  5106                           
  5107                           ;psect for function _nrf24l01SendPacket
  5108  09AD                     _nrf24l01SendPacket:	
  5109                           
  5110                           ;nrf24l01.c: 222: strcpy(TXPacket.Message, txPacket->Message);
  5111                           
  5112                           ;incstack = 0
  5113                           ; Regs used in _nrf24l01SendPacket: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5114  09AD  30C2               	movlw	low (_TXPacket+1)
  5115  09AE  0020               	movlb	0	; select bank0
  5116  09AF  00A0               	movwf	strcpy@to
  5117  09B0  3001               	movlw	high (_TXPacket+1)
  5118  09B1  00A1               	movwf	strcpy@to+1
  5119  09B2  082C               	movf	nrf24l01SendPacket@txPacket,w
  5120  09B3  3E01               	addlw	1
  5121  09B4  00AE               	movwf	??_nrf24l01SendPacket
  5122  09B5  3000               	movlw	0
  5123  09B6  3D2D               	addwfc	nrf24l01SendPacket@txPacket+1,w
  5124  09B7  00AF               	movwf	??_nrf24l01SendPacket+1
  5125  09B8  082E               	movf	??_nrf24l01SendPacket,w
  5126  09B9  00A2               	movwf	strcpy@from
  5127  09BA  082F               	movf	??_nrf24l01SendPacket+1,w
  5128  09BB  00A3               	movwf	strcpy@from+1
  5129  09BC  3196  2614  3189   	fcall	_strcpy
  5130                           
  5131                           ;nrf24l01.c: 223: TXPacket.packetData = txPacket->packetData;
  5132  09BF  0020               	movlb	0	; select bank0
  5133  09C0  082C               	movf	nrf24l01SendPacket@txPacket,w
  5134  09C1  0086               	movwf	6
  5135  09C2  082D               	movf	nrf24l01SendPacket@txPacket+1,w
  5136  09C3  0087               	movwf	7
  5137  09C4  0801               	movf	1,w
  5138  09C5  00AE               	movwf	??_nrf24l01SendPacket
  5139  09C6  082E               	movf	??_nrf24l01SendPacket,w
  5140  09C7  0023               	movlb	3	; select bank3
  5141  09C8  00C1               	movwf	_TXPacket^(0+384)
  5142                           
  5143                           ;nrf24l01.c: 225: status.TX = statuses.TX.Ready;
  5144  09C9  3035               	movlw	low ((_statuses+1)| (0+32768))
  5145  09CA  0084               	movwf	4
  5146  09CB  3098               	movlw	high ((_statuses+1)| (0+32768))
  5147  09CC  0085               	movwf	5
  5148  09CD  0800               	movf	0,w	;code access
  5149  09CE  0020               	movlb	0	; select bank0
  5150  09CF  00AE               	movwf	??_nrf24l01SendPacket
  5151  09D0  0021               	movlb	1	; select bank1
  5152  09D1  0867               	movf	_status^(0+128),w	;volatile
  5153  09D2  0020               	movlb	0	; select bank0
  5154  09D3  062E               	xorwf	??_nrf24l01SendPacket,w
  5155  09D4  39F0               	andlw	-16
  5156  09D5  062E               	xorwf	??_nrf24l01SendPacket,w
  5157  09D6  0021               	movlb	1	; select bank1
  5158  09D7  00E7               	movwf	_status^(0+128)	;volatile
  5159  09D8                     l3643:	
  5160                           ;nrf24l01.c: 227: while (status.TX != statuses.TX.Idle){
  5161                           
  5162  09D8  3034               	movlw	low (_statuses| (0+32768))
  5163  09D9  0084               	movwf	4
  5164  09DA  3098               	movlw	high (_statuses| (0+32768))
  5165  09DB  0085               	movwf	5
  5166  09DC  0800               	movf	0,w	;code access
  5167  09DD  0020               	movlb	0	; select bank0
  5168  09DE  00AE               	movwf	??_nrf24l01SendPacket
  5169  09DF  0021               	movlb	1	; select bank1
  5170  09E0  0867               	movf	_status^(0+128),w	;volatile
  5171  09E1  390F               	andlw	15
  5172  09E2  0020               	movlb	0	; select bank0
  5173  09E3  062E               	xorwf	??_nrf24l01SendPacket,w
  5174  09E4  1903               	btfsc	3,2
  5175  09E5  0008               	return
  5176                           
  5177                           ;nrf24l01.c: 228: sleepMs(10);
  5178  09E6  300A               	movlw	10
  5179  09E7  0020               	movlb	0	; select bank0
  5180  09E8  00A0               	movwf	sleepMs@milliseconds
  5181  09E9  3000               	movlw	0
  5182  09EA  00A1               	movwf	sleepMs@milliseconds+1
  5183  09EB  3188  203F  3189   	fcall	_sleepMs
  5184                           
  5185                           ;nrf24l01.c: 229: nrf24l01Service();
  5186  09EE  3182  2203  3189   	fcall	_nrf24l01Service
  5187  09F1  29D8               	goto	l3643
  5188  09F2                     __end_of_nrf24l01SendPacket:	
  5189                           
  5190                           	psect	text14
  5191  1614                     __ptext14:	
  5192 ;; *************** function _strcpy *****************
  5193 ;; Defined at:
  5194 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\strcpy.c"
  5195 ;; Parameters:    Size  Location     Type
  5196 ;;  to              2    0[BANK0 ] PTR unsigned char 
  5197 ;;		 -> TXPacket(33), main@packet(33), loop@packet(33), romDataMap(28), 
  5198 ;;  from            2    2[BANK0 ] PTR const unsigned char 
  5199 ;;		 -> romDataMap.name(16), packet.Message(32), packet.Message(32), main@packet(33), 
  5200 ;;		 -> STR_8(4), loop@packet(33), romDataMap(28), 
  5201 ;; Auto vars:     Size  Location     Type
  5202 ;;  cp              2    4[BANK0 ] PTR unsigned char 
  5203 ;;		 -> TXPacket(33), main@packet(33), loop@packet(33), romDataMap(28), 
  5204 ;; Return value:  Size  Location     Type
  5205 ;;                  2    0[BANK0 ] PTR unsigned char 
  5206 ;; Registers used:
  5207 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, pclath
  5208 ;; Tracked objects:
  5209 ;;		On entry : 0/0
  5210 ;;		On exit  : 0/0
  5211 ;;		Unchanged: 0/0
  5212 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5213 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5214 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5215 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5216 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5217 ;;Total ram usage:        6 bytes
  5218 ;; Hardware stack levels used:    1
  5219 ;; Hardware stack levels required when called:    7
  5220 ;; This function calls:
  5221 ;;		Nothing
  5222 ;; This function is called by:
  5223 ;;		_sendMessage
  5224 ;;		_main
  5225 ;;		_nrf24l01SendPacket
  5226 ;; This function uses a non-reentrant model
  5227 ;;
  5228                           
  5229                           
  5230                           ;psect for function _strcpy
  5231  1614                     _strcpy:	
  5232                           
  5233                           ;incstack = 0
  5234                           ; Regs used in _strcpy: [wreg-fsr1h+pclath]
  5235  1614  0020               	movlb	0	; select bank0
  5236  1615  0821               	movf	strcpy@to+1,w
  5237  1616  00A5               	movwf	strcpy@cp+1
  5238  1617  0820               	movf	strcpy@to,w
  5239  1618  00A4               	movwf	strcpy@cp
  5240  1619                     l2541:	
  5241  1619  0824               	movf	strcpy@cp,w
  5242  161A  0086               	movwf	6
  5243  161B  0825               	movf	strcpy@cp+1,w
  5244  161C  0087               	movwf	7
  5245  161D  0822               	movf	strcpy@from,w
  5246  161E  0084               	movwf	4
  5247  161F  0823               	movf	strcpy@from+1,w
  5248  1620  0085               	movwf	5
  5249  1621  0800               	movf	0,w	;code access
  5250  1622  3FC0               	movwi [0]fsr1
  5251  1623  0889               	movf	9,f
  5252  1624  1903               	btfsc	3,2
  5253  1625  0008               	return
  5254  1626  3001               	movlw	1
  5255  1627  07A4               	addwf	strcpy@cp,f
  5256  1628  3000               	movlw	0
  5257  1629  3DA5               	addwfc	strcpy@cp+1,f
  5258  162A  3001               	movlw	1
  5259  162B  07A2               	addwf	strcpy@from,f
  5260  162C  3000               	movlw	0
  5261  162D  3DA3               	addwfc	strcpy@from+1,f
  5262  162E  2E19               	goto	l2541
  5263  162F                     __end_of_strcpy:	
  5264                           ;	Return value of _strcpy is never used
  5265                           
  5266                           
  5267                           	psect	text15
  5268  083F                     __ptext15:	
  5269 ;; *************** function _sleepMs *****************
  5270 ;; Defined at:
  5271 ;;		line 51 in file "interface.c"
  5272 ;; Parameters:    Size  Location     Type
  5273 ;;  milliseconds    2    0[BANK0 ] unsigned int 
  5274 ;; Auto vars:     Size  Location     Type
  5275 ;;  wdtps           1    4[BANK0 ] unsigned char 
  5276 ;; Return value:  Size  Location     Type
  5277 ;;                  1    wreg      void 
  5278 ;; Registers used:
  5279 ;;		wreg, status,2, status,0
  5280 ;; Tracked objects:
  5281 ;;		On entry : 0/0
  5282 ;;		On exit  : 0/0
  5283 ;;		Unchanged: 0/0
  5284 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5285 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5286 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5287 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5288 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5289 ;;Total ram usage:        5 bytes
  5290 ;; Hardware stack levels used:    1
  5291 ;; Hardware stack levels required when called:    7
  5292 ;; This function calls:
  5293 ;;		Nothing
  5294 ;; This function is called by:
  5295 ;;		_sleep
  5296 ;;		_nrf24l01SendPacket
  5297 ;; This function uses a non-reentrant model
  5298 ;;
  5299                           
  5300                           
  5301                           ;psect for function _sleepMs
  5302  083F                     _sleepMs:	
  5303                           
  5304                           ;interface.c: 53: unsigned char wdtps;;interface.c: 54: for (wdtps = 0; wdtps <= 0b10010
      +                          ; wdtps++){
  5305                           
  5306                           ;incstack = 0
  5307                           ; Regs used in _sleepMs: [wreg+status,2+status,0]
  5308  083F  0020               	movlb	0	; select bank0
  5309  0840  01A4               	clrf	sleepMs@wdtps
  5310  0841  3013               	movlw	19
  5311  0842  0224               	subwf	sleepMs@wdtps,w
  5312  0843  1803               	btfsc	3,0
  5313  0844  2868               	goto	l2529
  5314  0845                     l2519:	
  5315                           
  5316                           ;interface.c: 55: if ((milliseconds >> wdtps) & 0b1){
  5317  0845  0821               	movf	sleepMs@milliseconds+1,w
  5318  0846  00A3               	movwf	??_sleepMs+1
  5319  0847  0820               	movf	sleepMs@milliseconds,w
  5320  0848  00A2               	movwf	??_sleepMs
  5321  0849  0A24               	incf	sleepMs@wdtps,w
  5322  084A  284D               	goto	u2494
  5323  084B                     u2495:	
  5324  084B  36A3               	lsrf	??_sleepMs+1,f
  5325  084C  0CA2               	rrf	??_sleepMs,f
  5326  084D                     u2494:	
  5327  084D  0B89               	decfsz	9,f
  5328  084E  284B               	goto	u2495
  5329  084F  1C22               	btfss	??_sleepMs,0
  5330  0850  285F               	goto	l52
  5331                           
  5332                           ;interface.c: 56: WDTCONbits.WDTPS = wdtps;
  5333  0851  0824               	movf	sleepMs@wdtps,w
  5334  0852  00A2               	movwf	??_sleepMs
  5335  0853  0DA2               	rlf	??_sleepMs,f
  5336  0854  0021               	movlb	1	; select bank1
  5337  0855  0817               	movf	23,w	;volatile
  5338  0856  0020               	movlb	0	; select bank0
  5339  0857  0622               	xorwf	??_sleepMs,w
  5340  0858  39C1               	andlw	-63
  5341  0859  0622               	xorwf	??_sleepMs,w
  5342  085A  0021               	movlb	1	; select bank1
  5343  085B  0097               	movwf	23	;volatile
  5344  085C  0063               	sleep	;# 
  5345                           
  5346                           ;interface.c: 58: __nop();
  5347  085D  0000               	nop
  5348                           
  5349                           ;interface.c: 59: __nop();
  5350  085E  0000               	nop
  5351  085F                     l52:	
  5352  085F  3001               	movlw	1
  5353  0860  0020               	movlb	0	; select bank0
  5354  0861  00A2               	movwf	??_sleepMs
  5355  0862  0822               	movf	??_sleepMs,w
  5356  0863  07A4               	addwf	sleepMs@wdtps,f
  5357  0864  3013               	movlw	19
  5358  0865  0224               	subwf	sleepMs@wdtps,w
  5359  0866  1C03               	skipc
  5360  0867  2845               	goto	l2519
  5361  0868                     l2529:	
  5362                           
  5363                           ;interface.c: 61: };interface.c: 62: };interface.c: 64: WDTCONbits.WDTPS = 0b01101;
  5364  0868  0021               	movlb	1	; select bank1
  5365  0869  0817               	movf	23,w	;volatile
  5366  086A  39C1               	andlw	-63
  5367  086B  381A               	iorlw	26
  5368  086C  0097               	movwf	23	;volatile
  5369  086D  0064               	clrwdt	;# 
  5370  086E  0008               	return
  5371  086F                     __end_of_sleepMs:	
  5372                           
  5373                           	psect	text16
  5374  0203                     __ptext16:	
  5375 ;; *************** function _nrf24l01Service *****************
  5376 ;; Defined at:
  5377 ;;		line 274 in file "nrf24l01.c"
  5378 ;; Parameters:    Size  Location     Type
  5379 ;;		None
  5380 ;; Auto vars:     Size  Location     Type
  5381 ;;  width           1   10[BANK0 ] unsigned char 
  5382 ;;  i               1   11[BANK0 ] unsigned char 
  5383 ;; Return value:  Size  Location     Type
  5384 ;;                  1    wreg      void 
  5385 ;; Registers used:
  5386 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5387 ;; Tracked objects:
  5388 ;;		On entry : 0/0
  5389 ;;		On exit  : 0/0
  5390 ;;		Unchanged: 0/0
  5391 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5392 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5393 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5394 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5395 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5396 ;;Total ram usage:        4 bytes
  5397 ;; Hardware stack levels used:    1
  5398 ;; Hardware stack levels required when called:   11
  5399 ;; This function calls:
  5400 ;;		_memset
  5401 ;;		_nrf24l01CEHigh
  5402 ;;		_nrf24l01CELow
  5403 ;;		_nrf24l01SPIEnd
  5404 ;;		_nrf24l01SPISend
  5405 ;;		_nrf24l01SPIStart
  5406 ;;		_nrf24l01Send
  5407 ;;		_nrf24l01SetRXMode
  5408 ;;		_strcmp
  5409 ;;		_strlen
  5410 ;; This function is called by:
  5411 ;;		_nrf24l01SendPacket
  5412 ;; This function uses a non-reentrant model
  5413 ;;
  5414                           
  5415                           
  5416                           ;psect for function _nrf24l01Service
  5417  0203                     _nrf24l01Service:	
  5418                           
  5419                           ;nrf24l01.c: 276: unsigned char i;;nrf24l01.c: 278: if (status.TX == statuses.TX.Ready){
  5420                           
  5421                           ;incstack = 0
  5422                           ; Regs used in _nrf24l01Service: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5423  0203  3035               	movlw	low ((_statuses+1)| (0+32768))
  5424  0204  0084               	movwf	4
  5425  0205  3098               	movlw	high ((_statuses+1)| (0+32768))
  5426  0206  0085               	movwf	5
  5427  0207  0800               	movf	0,w	;code access
  5428  0208  0020               	movlb	0	; select bank0
  5429  0209  00A8               	movwf	??_nrf24l01Service
  5430  020A  0021               	movlb	1	; select bank1
  5431  020B  0867               	movf	_status^(0+128),w	;volatile
  5432  020C  390F               	andlw	15
  5433  020D  0020               	movlb	0	; select bank0
  5434  020E  0628               	xorwf	??_nrf24l01Service,w
  5435  020F  1D03               	skipz
  5436  0210  2A64               	goto	l3573
  5437                           
  5438                           ;nrf24l01.c: 281: nrf24l01SetRXMode(0);
  5439  0211  3000               	movlw	0
  5440  0212  3197  27D4  3182   	fcall	_nrf24l01SetRXMode
  5441                           
  5442                           ;nrf24l01.c: 284: nrf24l01SPIStart();
  5443  0215  3195  253A  3182   	fcall	_nrf24l01SPIStart
  5444                           
  5445                           ;nrf24l01.c: 287: nrf24l01SPISend((unsigned) 0b10110000);
  5446  0218  30B0               	movlw	176
  5447  0219  3195  254B  3182   	fcall	_nrf24l01SPISend
  5448                           
  5449                           ;nrf24l01.c: 289: nrf24l01SPISend(TXPacket.packetData.byte);
  5450  021C  0023               	movlb	3	; select bank3
  5451  021D  0841               	movf	_TXPacket^(0+384),w
  5452  021E  3195  254B  3182   	fcall	_nrf24l01SPISend
  5453                           
  5454                           ;nrf24l01.c: 292: for (i = 0; (i < strlen(TXPacket.Message)) && (i < 32); i++) {
  5455  0221  0020               	movlb	0	; select bank0
  5456  0222  01AB               	clrf	nrf24l01Service@i
  5457  0223  2A32               	goto	l3559
  5458  0224                     l3555:	
  5459                           
  5460                           ;nrf24l01.c: 293: nrf24l01SPISend(TXPacket.Message[i]);
  5461  0224  082B               	movf	nrf24l01Service@i,w
  5462  0225  3EC2               	addlw	(low ((_TXPacket| (0+256)+1)))& (0+255)
  5463  0226  0086               	movwf	6
  5464  0227  3001               	movlw	1	; select bank3/4
  5465  0228  0087               	movwf	7
  5466  0229  0801               	movf	1,w
  5467  022A  3195  254B  3182   	fcall	_nrf24l01SPISend
  5468  022D  3001               	movlw	1
  5469  022E  0020               	movlb	0	; select bank0
  5470  022F  00A8               	movwf	??_nrf24l01Service
  5471  0230  0828               	movf	??_nrf24l01Service,w
  5472  0231  07AB               	addwf	nrf24l01Service@i,f
  5473  0232                     l3559:	
  5474  0232  30C2               	movlw	low (_TXPacket+1)
  5475  0233  00A0               	movwf	strlen@s
  5476  0234  3001               	movlw	high (_TXPacket+1)
  5477  0235  00A1               	movwf	strlen@s+1
  5478  0236  3196  2689  3182   	fcall	_strlen
  5479  0239  0020               	movlb	0	; select bank0
  5480  023A  082B               	movf	nrf24l01Service@i,w
  5481  023B  00A8               	movwf	??_nrf24l01Service
  5482  023C  01A9               	clrf	??_nrf24l01Service+1
  5483  023D  0821               	movf	?_strlen+1,w
  5484  023E  0229               	subwf	??_nrf24l01Service+1,w
  5485  023F  1D03               	skipz
  5486  0240  2A43               	goto	u3755
  5487  0241  0820               	movf	?_strlen,w
  5488  0242  0228               	subwf	??_nrf24l01Service,w
  5489  0243                     u3755:	
  5490  0243  1803               	skipnc
  5491  0244  2A49               	goto	l3563
  5492  0245  3020               	movlw	32
  5493  0246  022B               	subwf	nrf24l01Service@i,w
  5494  0247  1C03               	skipc
  5495  0248  2A24               	goto	l3555
  5496  0249                     l3563:	
  5497                           
  5498                           ;nrf24l01.c: 294: };nrf24l01.c: 297: nrf24l01SPIEnd();
  5499  0249  3195  252B  3182   	fcall	_nrf24l01SPIEnd
  5500                           
  5501                           ;nrf24l01.c: 300: status.TX = statuses.TX.Sending;
  5502  024C  3036               	movlw	low ((_statuses+2)| (0+32768))
  5503  024D  0084               	movwf	4
  5504  024E  3098               	movlw	high ((_statuses+2)| (0+32768))
  5505  024F  0085               	movwf	5
  5506  0250  0800               	movf	0,w	;code access
  5507  0251  0020               	movlb	0	; select bank0
  5508  0252  00A8               	movwf	??_nrf24l01Service
  5509  0253  0021               	movlb	1	; select bank1
  5510  0254  0867               	movf	_status^(0+128),w	;volatile
  5511  0255  0020               	movlb	0	; select bank0
  5512  0256  0628               	xorwf	??_nrf24l01Service,w
  5513  0257  39F0               	andlw	-16
  5514  0258  0628               	xorwf	??_nrf24l01Service,w
  5515  0259  0021               	movlb	1	; select bank1
  5516  025A  00E7               	movwf	_status^(0+128)	;volatile
  5517                           
  5518                           ;nrf24l01.c: 303: nrf24l01CEHigh();
  5519  025B  3195  2519  3182   	fcall	_nrf24l01CEHigh
  5520                           
  5521                           ;nrf24l01.c: 304: _delay((unsigned long)((12)*(32000000/4000000.0)));
  5522  025E  3020               	movlw	32
  5523  025F                     u4127:	
  5524  025F  0B89               	decfsz	9,f
  5525  0260  2A5F               	goto	u4127
  5526                           
  5527                           ;nrf24l01.c: 305: nrf24l01CELow();
  5528  0261  3195  251C  3182   	fcall	_nrf24l01CELow
  5529  0264                     l3573:	
  5530                           
  5531                           ;nrf24l01.c: 306: };nrf24l01.c: 308: if (status.RX == statuses.RX.Pending){
  5532  0264  3039               	movlw	low ((_statuses+5)| (0+32768))
  5533  0265  0084               	movwf	4
  5534  0266  3098               	movlw	high ((_statuses+5)| (0+32768))
  5535  0267  0085               	movwf	5
  5536  0268  0800               	movf	0,w	;code access
  5537  0269  0020               	movlb	0	; select bank0
  5538  026A  00A8               	movwf	??_nrf24l01Service
  5539  026B  0021               	movlb	1	; select bank1
  5540  026C  0E67               	swapf	_status^(0+128),w	;volatile
  5541  026D  390F               	andlw	15
  5542  026E  0020               	movlb	0	; select bank0
  5543  026F  0628               	xorwf	??_nrf24l01Service,w
  5544  0270  1D03               	skipz
  5545  0271  2AF1               	goto	l3611
  5546                           
  5547                           ;nrf24l01.c: 311: memset(RXPacket.Message, 0 ,sizeof(RXPacket.Message));
  5548  0272  30A1               	movlw	low (_RXPacket+1)
  5549  0273  00A0               	movwf	memset@p1
  5550  0274  3001               	movlw	high (_RXPacket+1)
  5551  0275  00A1               	movwf	memset@p1+1
  5552  0276  3000               	movlw	0
  5553  0277  00A2               	movwf	memset@c
  5554  0278  00A3               	movwf	memset@c+1
  5555  0279  3020               	movlw	32
  5556  027A  00A4               	movwf	memset@n
  5557  027B  3000               	movlw	0
  5558  027C  00A5               	movwf	memset@n+1
  5559  027D  3195  25AB  3182   	fcall	_memset
  5560                           
  5561                           ;nrf24l01.c: 312: RXPacket.packetData.byte = 0x00;
  5562  0280  0023               	movlb	3	; select bank3
  5563  0281  01A0               	clrf	_RXPacket^(0+384)
  5564                           
  5565                           ;nrf24l01.c: 315: unsigned char width = nrf24l01Send((unsigned) 0b01100000, 0);
  5566  0282  0020               	movlb	0	; select bank0
  5567  0283  01A0               	clrf	nrf24l01Send@data
  5568  0284  3060               	movlw	96
  5569  0285  3196  26A8  3182   	fcall	_nrf24l01Send
  5570  0288  0020               	movlb	0	; select bank0
  5571  0289  00A8               	movwf	??_nrf24l01Service
  5572  028A  0828               	movf	??_nrf24l01Service,w
  5573  028B  00AA               	movwf	nrf24l01Service@width
  5574                           
  5575                           ;nrf24l01.c: 318: nrf24l01CELow();
  5576  028C  3195  251C  3182   	fcall	_nrf24l01CELow
  5577                           
  5578                           ;nrf24l01.c: 321: nrf24l01SPIStart();
  5579  028F  3195  253A  3182   	fcall	_nrf24l01SPIStart
  5580                           
  5581                           ;nrf24l01.c: 324: nrf24l01SPISend((unsigned) 0b01100001);
  5582  0292  3061               	movlw	97
  5583  0293  3195  254B  3182   	fcall	_nrf24l01SPISend
  5584                           
  5585                           ;nrf24l01.c: 327: RXPacket.packetData.byte = nrf24l01SPISend(0);
  5586  0296  3000               	movlw	0
  5587  0297  3195  254B  3182   	fcall	_nrf24l01SPISend
  5588  029A  0020               	movlb	0	; select bank0
  5589  029B  00A8               	movwf	??_nrf24l01Service
  5590  029C  0828               	movf	??_nrf24l01Service,w
  5591  029D  0023               	movlb	3	; select bank3
  5592  029E  00A0               	movwf	_RXPacket^(0+384)
  5593                           
  5594                           ;nrf24l01.c: 328: width--;
  5595  029F  3001               	movlw	1
  5596  02A0  0020               	movlb	0	; select bank0
  5597  02A1  02AA               	subwf	nrf24l01Service@width,f
  5598                           
  5599                           ;nrf24l01.c: 330: for (i = 0; (i < width) && (i < 32); i++){
  5600  02A2  01AB               	clrf	nrf24l01Service@i
  5601  02A3  2AB5               	goto	l3597
  5602  02A4                     l3593:	
  5603                           
  5604                           ;nrf24l01.c: 332: RXPacket.Message[i] = nrf24l01SPISend(0);
  5605  02A4  3000               	movlw	0
  5606  02A5  3195  254B  3182   	fcall	_nrf24l01SPISend
  5607  02A8  0020               	movlb	0	; select bank0
  5608  02A9  00A8               	movwf	??_nrf24l01Service
  5609  02AA  082B               	movf	nrf24l01Service@i,w
  5610  02AB  3EA1               	addlw	(low ((_RXPacket| (0+256)+1)))& (0+255)
  5611  02AC  0086               	movwf	6
  5612  02AD  3001               	movlw	1	; select bank3/4
  5613  02AE  0087               	movwf	7
  5614  02AF  0828               	movf	??_nrf24l01Service,w
  5615  02B0  0081               	movwf	1
  5616  02B1  3001               	movlw	1
  5617  02B2  00A8               	movwf	??_nrf24l01Service
  5618  02B3  0828               	movf	??_nrf24l01Service,w
  5619  02B4  07AB               	addwf	nrf24l01Service@i,f
  5620  02B5                     l3597:	
  5621  02B5  082A               	movf	nrf24l01Service@width,w
  5622  02B6  022B               	subwf	nrf24l01Service@i,w
  5623  02B7  1803               	skipnc
  5624  02B8  2ABD               	goto	l3601
  5625  02B9  3020               	movlw	32
  5626  02BA  022B               	subwf	nrf24l01Service@i,w
  5627  02BB  1C03               	skipc
  5628  02BC  2AA4               	goto	l3593
  5629  02BD                     l3601:	
  5630                           
  5631                           ;nrf24l01.c: 333: };nrf24l01.c: 336: nrf24l01SPIEnd();
  5632  02BD  3195  252B  3182   	fcall	_nrf24l01SPIEnd
  5633                           
  5634                           ;nrf24l01.c: 339: nrf24l01CEHigh();
  5635  02C0  3195  2519  3182   	fcall	_nrf24l01CEHigh
  5636                           
  5637                           ;nrf24l01.c: 342: RXPacket.packetData.Pipe = status.statusRegister.RX_P_NO;
  5638  02C3  0021               	movlb	1	; select bank1
  5639  02C4  0C68               	rrf	(_status^(0+128)+1),w	;volatile
  5640  02C5  3907               	andlw	7
  5641  02C6  0020               	movlb	0	; select bank0
  5642  02C7  00A8               	movwf	??_nrf24l01Service
  5643  02C8  0EA8               	swapf	??_nrf24l01Service,f
  5644  02C9  0023               	movlb	3	; select bank3
  5645  02CA  0820               	movf	_RXPacket^(0+384),w
  5646  02CB  0020               	movlb	0	; select bank0
  5647  02CC  0628               	xorwf	??_nrf24l01Service,w
  5648  02CD  398F               	andlw	-113
  5649  02CE  0628               	xorwf	??_nrf24l01Service,w
  5650  02CF  0023               	movlb	3	; select bank3
  5651  02D0  00A0               	movwf	_RXPacket^(0+384)
  5652                           
  5653                           ;nrf24l01.c: 345: RXPacket.packetData.RPD = nrf24l01Send((unsigned) 0b00000000 | (unsign
      +                          ed) 0x09, 0);
  5654  02D1  0020               	movlb	0	; select bank0
  5655  02D2  01A0               	clrf	nrf24l01Send@data
  5656  02D3  3009               	movlw	9
  5657  02D4  3196  26A8  3182   	fcall	_nrf24l01Send
  5658  02D7  0020               	movlb	0	; select bank0
  5659  02D8  00A8               	movwf	??_nrf24l01Service
  5660  02D9  0023               	movlb	3	; select bank3
  5661  02DA  0820               	movf	_RXPacket^(0+384),w
  5662  02DB  0020               	movlb	0	; select bank0
  5663  02DC  0628               	xorwf	??_nrf24l01Service,w
  5664  02DD  39FE               	andlw	-2
  5665  02DE  0628               	xorwf	??_nrf24l01Service,w
  5666  02DF  0023               	movlb	3	; select bank3
  5667  02E0  00A0               	movwf	_RXPacket^(0+384)
  5668                           
  5669                           ;nrf24l01.c: 347: status.RX = statuses.RX.Ready;
  5670  02E1  303A               	movlw	low ((_statuses+6)| (0+32768))
  5671  02E2  0084               	movwf	4
  5672  02E3  3098               	movlw	high ((_statuses+6)| (0+32768))
  5673  02E4  0085               	movwf	5
  5674  02E5  0800               	movf	0,w	;code access
  5675  02E6  0020               	movlb	0	; select bank0
  5676  02E7  00A8               	movwf	??_nrf24l01Service
  5677  02E8  0EA8               	swapf	??_nrf24l01Service,f
  5678  02E9  0021               	movlb	1	; select bank1
  5679  02EA  0867               	movf	_status^(0+128),w	;volatile
  5680  02EB  0020               	movlb	0	; select bank0
  5681  02EC  0628               	xorwf	??_nrf24l01Service,w
  5682  02ED  390F               	andlw	-241
  5683  02EE  0628               	xorwf	??_nrf24l01Service,w
  5684  02EF  0021               	movlb	1	; select bank1
  5685  02F0  00E7               	movwf	_status^(0+128)	;volatile
  5686  02F1                     l3611:	
  5687                           
  5688                           ;nrf24l01.c: 348: };nrf24l01.c: 350: if (status.RX == statuses.RX.Ready){
  5689  02F1  303A               	movlw	low ((_statuses+6)| (0+32768))
  5690  02F2  0084               	movwf	4
  5691  02F3  3098               	movlw	high ((_statuses+6)| (0+32768))
  5692  02F4  0085               	movwf	5
  5693  02F5  0800               	movf	0,w	;code access
  5694  02F6  0020               	movlb	0	; select bank0
  5695  02F7  00A8               	movwf	??_nrf24l01Service
  5696  02F8  0021               	movlb	1	; select bank1
  5697  02F9  0E67               	swapf	_status^(0+128),w	;volatile
  5698  02FA  390F               	andlw	15
  5699  02FB  0020               	movlb	0	; select bank0
  5700  02FC  0628               	xorwf	??_nrf24l01Service,w
  5701  02FD  1D03               	skipz
  5702  02FE  2B3F               	goto	l3623
  5703                           
  5704                           ;nrf24l01.c: 353: if (RXPacket.packetData.IsACK){
  5705  02FF  0023               	movlb	3	; select bank3
  5706  0300  1DA0               	btfss	_RXPacket^(0+384),3
  5707  0301  2B3F               	goto	l3623
  5708                           
  5709                           ;nrf24l01.c: 355: if (status.TX == statuses.TX.PendingACK){
  5710  0302  3037               	movlw	low ((_statuses+3)| (0+32768))
  5711  0303  0084               	movwf	4
  5712  0304  3098               	movlw	high ((_statuses+3)| (0+32768))
  5713  0305  0085               	movwf	5
  5714  0306  0800               	movf	0,w	;code access
  5715  0307  0020               	movlb	0	; select bank0
  5716  0308  00A8               	movwf	??_nrf24l01Service
  5717  0309  0021               	movlb	1	; select bank1
  5718  030A  0867               	movf	_status^(0+128),w	;volatile
  5719  030B  390F               	andlw	15
  5720  030C  0020               	movlb	0	; select bank0
  5721  030D  0628               	xorwf	??_nrf24l01Service,w
  5722  030E  1D03               	skipz
  5723  030F  2B3F               	goto	l3623
  5724                           
  5725                           ;nrf24l01.c: 357: if (strcmp(RXPacket.Message, TXPacket.Message) == 0){
  5726  0310  30C2               	movlw	(low ((_TXPacket| (0+256)+1)))& (0+255)
  5727  0311  00A8               	movwf	??_nrf24l01Service
  5728  0312  0828               	movf	??_nrf24l01Service,w
  5729  0313  00A0               	movwf	strcmp@s2
  5730  0314  30A1               	movlw	(low ((_RXPacket| (0+256)+1)))& (0+255)
  5731  0315  3197  2781  3182   	fcall	_strcmp
  5732  0318  0020               	movlb	0	; select bank0
  5733  0319  0820               	movf	?_strcmp,w
  5734  031A  0421               	iorwf	?_strcmp+1,w
  5735  031B  1D03               	btfss	3,2
  5736  031C  2B3F               	goto	l3623
  5737                           
  5738                           ;nrf24l01.c: 358: status.TX = statuses.TX.Idle;
  5739  031D  3034               	movlw	low (_statuses| (0+32768))
  5740  031E  0084               	movwf	4
  5741  031F  3098               	movlw	high (_statuses| (0+32768))
  5742  0320  0085               	movwf	5
  5743  0321  0800               	movf	0,w	;code access
  5744  0322  00A8               	movwf	??_nrf24l01Service
  5745  0323  0021               	movlb	1	; select bank1
  5746  0324  0867               	movf	_status^(0+128),w	;volatile
  5747  0325  0020               	movlb	0	; select bank0
  5748  0326  0628               	xorwf	??_nrf24l01Service,w
  5749  0327  39F0               	andlw	-16
  5750  0328  0628               	xorwf	??_nrf24l01Service,w
  5751  0329  0021               	movlb	1	; select bank1
  5752  032A  00E7               	movwf	_status^(0+128)	;volatile
  5753                           
  5754                           ;nrf24l01.c: 359: status.RX = statuses.RX.Idle;
  5755  032B  3038               	movlw	low ((_statuses+4)| (0+32768))
  5756  032C  0084               	movwf	4
  5757  032D  3098               	movlw	high ((_statuses+4)| (0+32768))
  5758  032E  0085               	movwf	5
  5759  032F  0800               	movf	0,w	;code access
  5760  0330  0020               	movlb	0	; select bank0
  5761  0331  00A8               	movwf	??_nrf24l01Service
  5762  0332  0EA8               	swapf	??_nrf24l01Service,f
  5763  0333  0021               	movlb	1	; select bank1
  5764  0334  0867               	movf	_status^(0+128),w	;volatile
  5765  0335  0020               	movlb	0	; select bank0
  5766  0336  0628               	xorwf	??_nrf24l01Service,w
  5767  0337  390F               	andlw	-241
  5768  0338  0628               	xorwf	??_nrf24l01Service,w
  5769  0339  0021               	movlb	1	; select bank1
  5770  033A  00E7               	movwf	_status^(0+128)	;volatile
  5771                           
  5772                           ;nrf24l01.c: 361: nrf24l01SetRXMode(0);
  5773  033B  3000               	movlw	0
  5774  033C  3197  27D4  3182   	fcall	_nrf24l01SetRXMode
  5775  033F                     l3623:	
  5776                           
  5777                           ;nrf24l01.c: 363: };nrf24l01.c: 364: };nrf24l01.c: 365: };nrf24l01.c: 368: };nrf24l01.c:
      +                           370: if (status.RX == statuses.RX.Ready){
  5778  033F  303A               	movlw	low ((_statuses+6)| (0+32768))
  5779  0340  0084               	movwf	4
  5780  0341  3098               	movlw	high ((_statuses+6)| (0+32768))
  5781  0342  0085               	movwf	5
  5782  0343  0800               	movf	0,w	;code access
  5783  0344  0020               	movlb	0	; select bank0
  5784  0345  00A8               	movwf	??_nrf24l01Service
  5785  0346  0021               	movlb	1	; select bank1
  5786  0347  0E67               	swapf	_status^(0+128),w	;volatile
  5787  0348  390F               	andlw	15
  5788  0349  0020               	movlb	0	; select bank0
  5789  034A  0628               	xorwf	??_nrf24l01Service,w
  5790  034B  1D03               	skipz
  5791  034C  2B56               	goto	l3627
  5792                           
  5793                           ;nrf24l01.c: 371: counter++;
  5794  034D  3001               	movlw	1
  5795  034E  0022               	movlb	2	; select bank2
  5796  034F  07D1               	addwf	_counter^(0+256),f
  5797  0350  3000               	movlw	0
  5798  0351  3DD2               	addwfc	(_counter+1)^(0+256),f
  5799  0352  3000               	movlw	0
  5800  0353  3DD3               	addwfc	(_counter+2)^(0+256),f
  5801  0354  3000               	movlw	0
  5802  0355  3DD4               	addwfc	(_counter+3)^(0+256),f
  5803  0356                     l3627:	
  5804                           
  5805                           ;nrf24l01.c: 372: };nrf24l01.c: 374: if (status.TX == statuses.TX.PendingACK){
  5806  0356  3037               	movlw	low ((_statuses+3)| (0+32768))
  5807  0357  0084               	movwf	4
  5808  0358  3098               	movlw	high ((_statuses+3)| (0+32768))
  5809  0359  0085               	movwf	5
  5810  035A  0800               	movf	0,w	;code access
  5811  035B  0020               	movlb	0	; select bank0
  5812  035C  00A8               	movwf	??_nrf24l01Service
  5813  035D  0021               	movlb	1	; select bank1
  5814  035E  0867               	movf	_status^(0+128),w	;volatile
  5815  035F  390F               	andlw	15
  5816  0360  0020               	movlb	0	; select bank0
  5817  0361  0628               	xorwf	??_nrf24l01Service,w
  5818  0362  1D03               	skipz
  5819  0363  0008               	return
  5820                           
  5821                           ;nrf24l01.c: 375: if (!status.retryCount--){
  5822  0364  3001               	movlw	1
  5823  0365  0021               	movlb	1	; select bank1
  5824  0366  02EA               	subwf	(_status^(0+128)+3),f	;volatile
  5825  0367  0A6A               	incf	(_status^(0+128)+3),w	;volatile
  5826  0368  1D03               	btfss	3,2
  5827  0369  0008               	return
  5828                           
  5829                           ;nrf24l01.c: 376: status.TX = statuses.TX.Ready;
  5830  036A  3035               	movlw	low ((_statuses+1)| (0+32768))
  5831  036B  0084               	movwf	4
  5832  036C  3098               	movlw	high ((_statuses+1)| (0+32768))
  5833  036D  0085               	movwf	5
  5834  036E  0800               	movf	0,w	;code access
  5835  036F  0020               	movlb	0	; select bank0
  5836  0370  00A8               	movwf	??_nrf24l01Service
  5837  0371  0021               	movlb	1	; select bank1
  5838  0372  0867               	movf	_status^(0+128),w	;volatile
  5839  0373  0020               	movlb	0	; select bank0
  5840  0374  0628               	xorwf	??_nrf24l01Service,w
  5841  0375  39F0               	andlw	-16
  5842  0376  0628               	xorwf	??_nrf24l01Service,w
  5843  0377  0021               	movlb	1	; select bank1
  5844  0378  00E7               	movwf	_status^(0+128)	;volatile
  5845  0379  0008               	return
  5846  037A                     __end_of_nrf24l01Service:	
  5847                           
  5848                           	psect	text17
  5849  1689                     __ptext17:	
  5850 ;; *************** function _strlen *****************
  5851 ;; Defined at:
  5852 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\strlen.c"
  5853 ;; Parameters:    Size  Location     Type
  5854 ;;  s               2    0[BANK0 ] PTR const unsigned char 
  5855 ;;		 -> TXPacket.Message(32), TXPacket(33), romDataMap(28), 
  5856 ;; Auto vars:     Size  Location     Type
  5857 ;;  cp              2    4[BANK0 ] PTR const unsigned char 
  5858 ;;		 -> TXPacket.Message(32), TXPacket(33), romDataMap(28), 
  5859 ;; Return value:  Size  Location     Type
  5860 ;;                  2    0[BANK0 ] unsigned int 
  5861 ;; Registers used:
  5862 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  5863 ;; Tracked objects:
  5864 ;;		On entry : 0/0
  5865 ;;		On exit  : 0/0
  5866 ;;		Unchanged: 0/0
  5867 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5868 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5869 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5870 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5871 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5872 ;;Total ram usage:        6 bytes
  5873 ;; Hardware stack levels used:    1
  5874 ;; Hardware stack levels required when called:    7
  5875 ;; This function calls:
  5876 ;;		Nothing
  5877 ;; This function is called by:
  5878 ;;		_nrf24l01GetPipe
  5879 ;;		_nrf24l01Service
  5880 ;; This function uses a non-reentrant model
  5881 ;;
  5882                           
  5883                           
  5884                           ;psect for function _strlen
  5885  1689                     _strlen:	
  5886                           
  5887                           ;incstack = 0
  5888                           ; Regs used in _strlen: [wreg+fsr1l+fsr1h+status,2+status,0]
  5889  1689  0020               	movlb	0	; select bank0
  5890  168A  0821               	movf	strlen@s+1,w
  5891  168B  00A5               	movwf	strlen@cp+1
  5892  168C  0820               	movf	strlen@s,w
  5893  168D  00A4               	movwf	strlen@cp
  5894  168E                     l3543:	
  5895  168E  0824               	movf	strlen@cp,w
  5896  168F  0086               	movwf	6
  5897  1690  0825               	movf	strlen@cp+1,w
  5898  1691  0087               	movwf	7
  5899  1692  0801               	movf	1,w
  5900  1693  1903               	btfsc	3,2
  5901  1694  2E9A               	goto	l3545
  5902  1695  3001               	movlw	1
  5903  1696  07A4               	addwf	strlen@cp,f
  5904  1697  3000               	movlw	0
  5905  1698  3DA5               	addwfc	strlen@cp+1,f
  5906  1699  2E8E               	goto	l3543
  5907  169A                     l3545:	
  5908  169A  0920               	comf	strlen@s,w
  5909  169B  00A2               	movwf	??_strlen
  5910  169C  0921               	comf	strlen@s+1,w
  5911  169D  00A3               	movwf	??_strlen+1
  5912  169E  0AA2               	incf	??_strlen,f
  5913  169F  1903               	skipnz
  5914  16A0  0AA3               	incf	??_strlen+1,f
  5915  16A1  0824               	movf	strlen@cp,w
  5916  16A2  0722               	addwf	??_strlen,w
  5917  16A3  00A0               	movwf	?_strlen
  5918  16A4  0825               	movf	strlen@cp+1,w
  5919  16A5  3D23               	addwfc	??_strlen+1,w
  5920  16A6  00A1               	movwf	?_strlen+1
  5921  16A7  0008               	return
  5922  16A8                     __end_of_strlen:	
  5923                           
  5924                           	psect	text18
  5925  1781                     __ptext18:	
  5926 ;; *************** function _strcmp *****************
  5927 ;; Defined at:
  5928 ;;		line 33 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\strcmp.c"
  5929 ;; Parameters:    Size  Location     Type
  5930 ;;  s1              1    wreg     PTR const unsigned char 
  5931 ;;		 -> RXPacket.Message(32), RXPacket(33), 
  5932 ;;  s2              1    0[BANK0 ] PTR const unsigned char 
  5933 ;;		 -> TXPacket.Message(32), TXPacket(33), 
  5934 ;; Auto vars:     Size  Location     Type
  5935 ;;  s1              1    4[BANK0 ] PTR const unsigned char 
  5936 ;;		 -> RXPacket.Message(32), RXPacket(33), 
  5937 ;;  r               1    3[BANK0 ] char 
  5938 ;; Return value:  Size  Location     Type
  5939 ;;                  2    0[BANK0 ] int 
  5940 ;; Registers used:
  5941 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0
  5942 ;; Tracked objects:
  5943 ;;		On entry : 0/0
  5944 ;;		On exit  : 0/0
  5945 ;;		Unchanged: 0/0
  5946 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5947 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5948 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5949 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5950 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5951 ;;Total ram usage:        5 bytes
  5952 ;; Hardware stack levels used:    1
  5953 ;; Hardware stack levels required when called:    7
  5954 ;; This function calls:
  5955 ;;		Nothing
  5956 ;; This function is called by:
  5957 ;;		_nrf24l01Service
  5958 ;; This function uses a non-reentrant model
  5959 ;;
  5960                           
  5961                           
  5962                           ;psect for function _strcmp
  5963  1781                     _strcmp:	
  5964                           
  5965                           ;incstack = 0
  5966                           ; Regs used in _strcmp: [wreg-fsr1h+status,2+status,0]
  5967                           ;strcmp@s1 stored from wreg
  5968  1781  0020               	movlb	0	; select bank0
  5969  1782  00A4               	movwf	strcmp@s1
  5970  1783  2F8C               	goto	l2361
  5971  1784                     l2357:	
  5972  1784  3001               	movlw	1
  5973  1785  00A2               	movwf	??_strcmp
  5974  1786  0822               	movf	??_strcmp,w
  5975  1787  07A4               	addwf	strcmp@s1,f
  5976  1788  3001               	movlw	1
  5977  1789  00A2               	movwf	??_strcmp
  5978  178A  0822               	movf	??_strcmp,w
  5979  178B  07A0               	addwf	strcmp@s2,f
  5980  178C                     l2361:	
  5981  178C  0824               	movf	strcmp@s1,w
  5982  178D  0086               	movwf	6
  5983  178E  3001               	movlw	1	; select bank2/3
  5984  178F  0087               	movwf	7
  5985  1790  0820               	movf	strcmp@s2,w
  5986  1791  0084               	movwf	4
  5987  1792  3001               	movlw	1	; select bank2/3
  5988  1793  0085               	movwf	5
  5989  1794  0300               	decf	0,w
  5990  1795  3AFF               	xorlw	255
  5991  1796  0701               	addwf	1,w
  5992  1797  00A2               	movwf	??_strcmp
  5993  1798  0822               	movf	??_strcmp,w
  5994  1799  00A3               	movwf	strcmp@r
  5995  179A  0823               	movf	strcmp@r,w
  5996  179B  1D03               	btfss	3,2
  5997  179C  2FA4               	goto	l2365
  5998  179D  0824               	movf	strcmp@s1,w
  5999  179E  0086               	movwf	6
  6000  179F  3001               	movlw	1	; select bank2/3
  6001  17A0  0087               	movwf	7
  6002  17A1  0801               	movf	1,w
  6003  17A2  1D03               	btfss	3,2
  6004  17A3  2F84               	goto	l2357
  6005  17A4                     l2365:	
  6006  17A4  0823               	movf	strcmp@r,w
  6007  17A5  00A0               	movwf	?_strcmp
  6008  17A6  01A1               	clrf	?_strcmp+1
  6009  17A7  1BA0               	btfsc	?_strcmp,7
  6010  17A8  03A1               	decf	?_strcmp+1,f
  6011  17A9  0008               	return
  6012  17AA                     __end_of_strcmp:	
  6013                           
  6014                           	psect	text19
  6015  17D4                     __ptext19:	
  6016 ;; *************** function _nrf24l01SetRXMode *****************
  6017 ;; Defined at:
  6018 ;;		line 91 in file "nrf24l01.c"
  6019 ;; Parameters:    Size  Location     Type
  6020 ;;  rxMode          1    wreg     unsigned char 
  6021 ;; Auto vars:     Size  Location     Type
  6022 ;;  rxMode          1    4[BANK0 ] unsigned char 
  6023 ;; Return value:  Size  Location     Type
  6024 ;;                  1    wreg      void 
  6025 ;; Registers used:
  6026 ;;		wreg, status,2, status,0, pclath, cstack
  6027 ;; Tracked objects:
  6028 ;;		On entry : 0/0
  6029 ;;		On exit  : 0/0
  6030 ;;		Unchanged: 0/0
  6031 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6032 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6033 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6034 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6035 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6036 ;;Total ram usage:        2 bytes
  6037 ;; Hardware stack levels used:    1
  6038 ;; Hardware stack levels required when called:   10
  6039 ;; This function calls:
  6040 ;;		_nrf24l01CEHigh
  6041 ;;		_nrf24l01CELow
  6042 ;;		_nrf24l01Send
  6043 ;; This function is called by:
  6044 ;;		_nrf24l01Service
  6045 ;; This function uses a non-reentrant model
  6046 ;;
  6047                           
  6048                           
  6049                           ;psect for function _nrf24l01SetRXMode
  6050  17D4                     _nrf24l01SetRXMode:	
  6051                           
  6052                           ;incstack = 0
  6053                           ; Regs used in _nrf24l01SetRXMode: [wreg+status,2+status,0+pclath+cstack]
  6054                           ;nrf24l01SetRXMode@rxMode stored from wreg
  6055  17D4  0020               	movlb	0	; select bank0
  6056  17D5  00A4               	movwf	nrf24l01SetRXMode@rxMode
  6057                           
  6058                           ;nrf24l01.c: 111: if (status.configRegister.PRIM_RX != rxMode){
  6059  17D6  0021               	movlb	1	; select bank1
  6060  17D7  0869               	movf	(_status^(0+128)+2),w	;volatile
  6061  17D8  3901               	andlw	1
  6062  17D9  0020               	movlb	0	; select bank0
  6063  17DA  0624               	xorwf	nrf24l01SetRXMode@rxMode,w
  6064  17DB  1903               	skipnz
  6065  17DC  0008               	return
  6066                           
  6067                           ;nrf24l01.c: 114: nrf24l01CELow();
  6068  17DD  3195  251C  3197   	fcall	_nrf24l01CELow
  6069                           
  6070                           ;nrf24l01.c: 118: status.configRegister.PRIM_RX = rxMode;
  6071  17E0  0020               	movlb	0	; select bank0
  6072  17E1  0C24               	rrf	nrf24l01SetRXMode@rxMode,w
  6073  17E2  0021               	movlb	1	; select bank1
  6074  17E3  1C03               	skipc
  6075  17E4  1069               	bcf	(_status^(0+128)+2),0	;volatile
  6076  17E5  1803               	skipnc
  6077  17E6  1469               	bsf	(_status^(0+128)+2),0	;volatile
  6078                           
  6079                           ;nrf24l01.c: 119: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x00, status.configReg
      +                          ister.byte);
  6080  17E7  0869               	movf	(_status^(0+128)+2),w	;volatile
  6081  17E8  0020               	movlb	0	; select bank0
  6082  17E9  00A3               	movwf	??_nrf24l01SetRXMode
  6083  17EA  0823               	movf	??_nrf24l01SetRXMode,w
  6084  17EB  00A0               	movwf	nrf24l01Send@data
  6085  17EC  3020               	movlw	32
  6086  17ED  3196  26A8  3197   	fcall	_nrf24l01Send
  6087                           
  6088                           ;nrf24l01.c: 122: _delay((unsigned long)((120)*(32000000/4000000.0)));
  6089  17F0  30C0               	movlw	192
  6090  17F1                     u4137:	
  6091  17F1  3200               	nop2
  6092  17F2  0B89               	decfsz	9,f
  6093  17F3  2FF1               	goto	u4137
  6094                           
  6095                           ;nrf24l01.c: 125: if (rxMode){
  6096  17F4  0020               	movlb	0	; select bank0
  6097  17F5  0824               	movf	nrf24l01SetRXMode@rxMode,w
  6098  17F6  1903               	btfsc	3,2
  6099  17F7  0008               	return
  6100                           
  6101                           ;nrf24l01.c: 126: nrf24l01CEHigh();
  6102  17F8  3195  2519  3197   	fcall	_nrf24l01CEHigh
  6103                           
  6104                           ;nrf24l01.c: 127: _delay((unsigned long)((120)*(32000000/4000000.0)));
  6105  17FB  30C0               	movlw	192
  6106  17FC                     u4147:	
  6107  17FC  3200               	nop2
  6108  17FD  0B89               	decfsz	9,f
  6109  17FE  2FFC               	goto	u4147
  6110  17FF  0008               	return
  6111  1800                     __end_of_nrf24l01SetRXMode:	
  6112                           
  6113                           	psect	text20
  6114  16A8                     __ptext20:	
  6115 ;; *************** function _nrf24l01Send *****************
  6116 ;; Defined at:
  6117 ;;		line 46 in file "nrf24l01.c"
  6118 ;; Parameters:    Size  Location     Type
  6119 ;;  command         1    wreg     unsigned char 
  6120 ;;  data            1    0[BANK0 ] unsigned char 
  6121 ;; Auto vars:     Size  Location     Type
  6122 ;;  command         1    2[BANK0 ] unsigned char 
  6123 ;; Return value:  Size  Location     Type
  6124 ;;                  1    wreg      unsigned char 
  6125 ;; Registers used:
  6126 ;;		wreg, status,2, status,0, pclath, cstack
  6127 ;; Tracked objects:
  6128 ;;		On entry : 0/0
  6129 ;;		On exit  : 0/0
  6130 ;;		Unchanged: 0/0
  6131 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6132 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6133 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6134 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6135 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6136 ;;Total ram usage:        3 bytes
  6137 ;; Hardware stack levels used:    1
  6138 ;; Hardware stack levels required when called:    9
  6139 ;; This function calls:
  6140 ;;		_enableInterrupts
  6141 ;;		_nrf24l01SPIEnd
  6142 ;;		_nrf24l01SPISend
  6143 ;;		_nrf24l01SPIStart
  6144 ;; This function is called by:
  6145 ;;		_loop
  6146 ;;		_nrf24l01SetRXMode
  6147 ;;		_nrf24l01SetRXPipe
  6148 ;;		_nrf24l01Service
  6149 ;;		_nrf24l01InitRegisters
  6150 ;;		_nrf24l01ChangeTXPower
  6151 ;; This function uses a non-reentrant model
  6152 ;;
  6153                           
  6154                           
  6155                           ;psect for function _nrf24l01Send
  6156  16A8                     _nrf24l01Send:	
  6157                           
  6158                           ;incstack = 0
  6159                           ; Regs used in _nrf24l01Send: [wreg+status,2+status,0+pclath+cstack]
  6160                           ;nrf24l01Send@command stored from wreg
  6161  16A8  0020               	movlb	0	; select bank0
  6162  16A9  00A2               	movwf	nrf24l01Send@command
  6163                           
  6164                           ;nrf24l01.c: 49: enableInterrupts(0);
  6165  16AA  3000               	movlw	0
  6166  16AB  3195  2532  3196   	fcall	_enableInterrupts
  6167                           
  6168                           ;nrf24l01.c: 52: nrf24l01SPIStart();
  6169  16AE  3195  253A  3196   	fcall	_nrf24l01SPIStart
  6170                           
  6171                           ;nrf24l01.c: 55: nrf24l01SPISend(command);
  6172  16B1  0020               	movlb	0	; select bank0
  6173  16B2  0822               	movf	nrf24l01Send@command,w
  6174  16B3  3195  254B  3196   	fcall	_nrf24l01SPISend
  6175                           
  6176                           ;nrf24l01.c: 58: data = nrf24l01SPISend(data);
  6177  16B6  0020               	movlb	0	; select bank0
  6178  16B7  0820               	movf	nrf24l01Send@data,w
  6179  16B8  3195  254B  3196   	fcall	_nrf24l01SPISend
  6180  16BB  0020               	movlb	0	; select bank0
  6181  16BC  00A1               	movwf	??_nrf24l01Send
  6182  16BD  0821               	movf	??_nrf24l01Send,w
  6183  16BE  00A0               	movwf	nrf24l01Send@data
  6184                           
  6185                           ;nrf24l01.c: 61: nrf24l01SPIEnd();
  6186  16BF  3195  252B  3196   	fcall	_nrf24l01SPIEnd
  6187                           
  6188                           ;nrf24l01.c: 64: enableInterrupts(1);
  6189  16C2  3001               	movlw	1
  6190  16C3  3195  2532         	fcall	_enableInterrupts
  6191                           
  6192                           ;nrf24l01.c: 66: return data;
  6193  16C5  0020               	movlb	0	; select bank0
  6194  16C6  0820               	movf	nrf24l01Send@data,w
  6195  16C7  0008               	return
  6196  16C8                     __end_of_nrf24l01Send:	
  6197                           
  6198                           	psect	text21
  6199  15AB                     __ptext21:	
  6200 ;; *************** function _memset *****************
  6201 ;; Defined at:
  6202 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\memset.c"
  6203 ;; Parameters:    Size  Location     Type
  6204 ;;  p1              2    0[BANK0 ] PTR void 
  6205 ;;		 -> RXPacket(33), main@packet(33), loop@packet(33), 
  6206 ;;  c               2    2[BANK0 ] int 
  6207 ;;  n               2    4[BANK0 ] unsigned int 
  6208 ;; Auto vars:     Size  Location     Type
  6209 ;;  p               2    6[BANK0 ] PTR unsigned char 
  6210 ;;		 -> RXPacket(33), main@packet(33), loop@packet(33), 
  6211 ;; Return value:  Size  Location     Type
  6212 ;;                  2    0[BANK0 ] PTR void 
  6213 ;; Registers used:
  6214 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  6215 ;; Tracked objects:
  6216 ;;		On entry : 0/0
  6217 ;;		On exit  : 0/0
  6218 ;;		Unchanged: 0/0
  6219 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6220 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6221 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6222 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6223 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6224 ;;Total ram usage:        8 bytes
  6225 ;; Hardware stack levels used:    1
  6226 ;; Hardware stack levels required when called:    7
  6227 ;; This function calls:
  6228 ;;		Nothing
  6229 ;; This function is called by:
  6230 ;;		_sendMessage
  6231 ;;		_nrf24l01Service
  6232 ;; This function uses a non-reentrant model
  6233 ;;
  6234                           
  6235                           
  6236                           ;psect for function _memset
  6237  15AB                     _memset:	
  6238                           
  6239                           ;incstack = 0
  6240                           ; Regs used in _memset: [wreg+fsr1l+fsr1h+status,2+status,0]
  6241  15AB  0020               	movlb	0	; select bank0
  6242  15AC  0821               	movf	memset@p1+1,w
  6243  15AD  00A7               	movwf	memset@p+1
  6244  15AE  0820               	movf	memset@p1,w
  6245  15AF  00A6               	movwf	memset@p
  6246  15B0                     l2327:	
  6247  15B0  3001               	movlw	1
  6248  15B1  02A4               	subwf	memset@n,f
  6249  15B2  3000               	movlw	0
  6250  15B3  3BA5               	subwfb	memset@n+1,f
  6251  15B4  0A24               	incf	memset@n,w
  6252  15B5  1903               	btfsc	3,2
  6253  15B6  0A25               	incf	memset@n+1,w
  6254  15B7  1903               	btfsc	3,2
  6255  15B8  0008               	return
  6256  15B9  0826               	movf	memset@p,w
  6257  15BA  0086               	movwf	6
  6258  15BB  0827               	movf	memset@p+1,w
  6259  15BC  0087               	movwf	7
  6260  15BD  0822               	movf	memset@c,w
  6261  15BE  0081               	movwf	1
  6262  15BF  3001               	movlw	1
  6263  15C0  07A6               	addwf	memset@p,f
  6264  15C1  3000               	movlw	0
  6265  15C2  3DA7               	addwfc	memset@p+1,f
  6266  15C3  2DB0               	goto	l2327
  6267  15C4                     __end_of_memset:	
  6268                           ;	Return value of _memset is never used
  6269                           
  6270                           
  6271                           	psect	text22
  6272  0E18                     __ptext22:	
  6273 ;; *************** function _ftoa *****************
  6274 ;; Defined at:
  6275 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\ftoa.c"
  6276 ;; Parameters:    Size  Location     Type
  6277 ;;  f               3    6[BANK1 ] float 
  6278 ;;  status          1    9[BANK1 ] PTR int 
  6279 ;;		 -> sendMessage@status(2), 
  6280 ;; Auto vars:     Size  Location     Type
  6281 ;;  l               4   14[BANK1 ] unsigned long 
  6282 ;;  rem             4   10[BANK1 ] unsigned long 
  6283 ;;  cp              1   18[BANK1 ] PTR unsigned char 
  6284 ;;		 -> ftoa@buf(17), 
  6285 ;; Return value:  Size  Location     Type
  6286 ;;                  1    wreg      PTR unsigned char 
  6287 ;; Registers used:
  6288 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6289 ;; Tracked objects:
  6290 ;;		On entry : 0/0
  6291 ;;		On exit  : 0/0
  6292 ;;		Unchanged: 0/0
  6293 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6294 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  6295 ;;      Locals:         0       0       9       0       0       0       0       0       0       0       0       0       
      +0       0
  6296 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6297 ;;      Totals:         0       1      13       0       0       0       0       0       0       0       0       0       
      +0       0
  6298 ;;Total ram usage:       14 bytes
  6299 ;; Hardware stack levels used:    1
  6300 ;; Hardware stack levels required when called:   10
  6301 ;; This function calls:
  6302 ;;		___ftge
  6303 ;;		___ftmul
  6304 ;;		___ftneg
  6305 ;;		___ftsub
  6306 ;;		___fttol
  6307 ;;		___lltoft
  6308 ;;		_sprintf
  6309 ;; This function is called by:
  6310 ;;		_sendMessage
  6311 ;; This function uses a non-reentrant model
  6312 ;;
  6313                           
  6314                           
  6315                           ;psect for function _ftoa
  6316  0E18                     _ftoa:	
  6317                           
  6318                           ;incstack = 0
  6319                           ; Regs used in _ftoa: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6320  0E18  3055               	movlw	(low (ftoa@buf| (0+256)))& (0+255)
  6321  0E19  0020               	movlb	0	; select bank0
  6322  0E1A  00EF               	movwf	??_ftoa
  6323  0E1B  086F               	movf	??_ftoa,w
  6324  0E1C  0021               	movlb	1	; select bank1
  6325  0E1D  00B2               	movwf	ftoa@cp^(0+128)
  6326  0E1E  0826               	movf	ftoa@f^(0+128),w
  6327  0E1F  0020               	movlb	0	; select bank0
  6328  0E20  00A0               	movwf	___ftge@ff1
  6329  0E21  0021               	movlb	1	; select bank1
  6330  0E22  0827               	movf	(ftoa@f+1)^(0+128),w
  6331  0E23  0020               	movlb	0	; select bank0
  6332  0E24  00A1               	movwf	___ftge@ff1+1
  6333  0E25  0021               	movlb	1	; select bank1
  6334  0E26  0828               	movf	(ftoa@f+2)^(0+128),w
  6335  0E27  0020               	movlb	0	; select bank0
  6336  0E28  00A2               	movwf	___ftge@ff1+2
  6337  0E29  3000               	movlw	0
  6338  0E2A  00A3               	movwf	___ftge@ff2
  6339  0E2B  3000               	movlw	0
  6340  0E2C  00A4               	movwf	___ftge@ff2+1
  6341  0E2D  3000               	movlw	0
  6342  0E2E  00A5               	movwf	___ftge@ff2+2
  6343  0E2F  3188  20A7  318E   	fcall	___ftge
  6344  0E32  1803               	btfsc	3,0
  6345  0E33  2E5E               	goto	l2925
  6346  0E34  302D               	movlw	45
  6347  0E35  0020               	movlb	0	; select bank0
  6348  0E36  00EF               	movwf	??_ftoa
  6349  0E37  0021               	movlb	1	; select bank1
  6350  0E38  0832               	movf	ftoa@cp^(0+128),w
  6351  0E39  0086               	movwf	6
  6352  0E3A  3001               	movlw	1	; select bank2/3
  6353  0E3B  0087               	movwf	7
  6354  0E3C  0020               	movlb	0	; select bank0
  6355  0E3D  086F               	movf	??_ftoa,w
  6356  0E3E  0081               	movwf	1
  6357  0E3F  3001               	movlw	1
  6358  0E40  00EF               	movwf	??_ftoa
  6359  0E41  086F               	movf	??_ftoa,w
  6360  0E42  0021               	movlb	1	; select bank1
  6361  0E43  07B2               	addwf	ftoa@cp^(0+128),f
  6362  0E44  0826               	movf	ftoa@f^(0+128),w
  6363  0E45  0020               	movlb	0	; select bank0
  6364  0E46  00D7               	movwf	___ftneg@f1
  6365  0E47  0021               	movlb	1	; select bank1
  6366  0E48  0827               	movf	(ftoa@f+1)^(0+128),w
  6367  0E49  0020               	movlb	0	; select bank0
  6368  0E4A  00D8               	movwf	___ftneg@f1+1
  6369  0E4B  0021               	movlb	1	; select bank1
  6370  0E4C  0828               	movf	(ftoa@f+2)^(0+128),w
  6371  0E4D  0020               	movlb	0	; select bank0
  6372  0E4E  00D9               	movwf	___ftneg@f1+2
  6373  0E4F  3195  2542  318E   	fcall	___ftneg
  6374  0E52  0020               	movlb	0	; select bank0
  6375  0E53  0857               	movf	?___ftneg,w
  6376  0E54  0021               	movlb	1	; select bank1
  6377  0E55  00A6               	movwf	ftoa@f^(0+128)
  6378  0E56  0020               	movlb	0	; select bank0
  6379  0E57  0858               	movf	?___ftneg+1,w
  6380  0E58  0021               	movlb	1	; select bank1
  6381  0E59  00A7               	movwf	(ftoa@f+1)^(0+128)
  6382  0E5A  0020               	movlb	0	; select bank0
  6383  0E5B  0859               	movf	?___ftneg+2,w
  6384  0E5C  0021               	movlb	1	; select bank1
  6385  0E5D  00A8               	movwf	(ftoa@f+2)^(0+128)
  6386  0E5E                     l2925:	
  6387  0E5E  0021               	movlb	1	; select bank1
  6388  0E5F  0826               	movf	ftoa@f^(0+128),w
  6389  0E60  0020               	movlb	0	; select bank0
  6390  0E61  00E7               	movwf	___fttol@f1
  6391  0E62  0021               	movlb	1	; select bank1
  6392  0E63  0827               	movf	(ftoa@f+1)^(0+128),w
  6393  0E64  0020               	movlb	0	; select bank0
  6394  0E65  00E8               	movwf	___fttol@f1+1
  6395  0E66  0021               	movlb	1	; select bank1
  6396  0E67  0828               	movf	(ftoa@f+2)^(0+128),w
  6397  0E68  0020               	movlb	0	; select bank0
  6398  0E69  00E9               	movwf	___fttol@f1+2
  6399  0E6A  318C  242A  318E   	fcall	___fttol
  6400  0E6D  0020               	movlb	0	; select bank0
  6401  0E6E  086A               	movf	?___fttol+3,w
  6402  0E6F  0021               	movlb	1	; select bank1
  6403  0E70  00B1               	movwf	(ftoa@l+3)^(0+128)
  6404  0E71  0020               	movlb	0	; select bank0
  6405  0E72  0869               	movf	?___fttol+2,w
  6406  0E73  0021               	movlb	1	; select bank1
  6407  0E74  00B0               	movwf	(ftoa@l+2)^(0+128)
  6408  0E75  0020               	movlb	0	; select bank0
  6409  0E76  0868               	movf	?___fttol+1,w
  6410  0E77  0021               	movlb	1	; select bank1
  6411  0E78  00AF               	movwf	(ftoa@l+1)^(0+128)
  6412  0E79  0020               	movlb	0	; select bank0
  6413  0E7A  0867               	movf	?___fttol,w
  6414  0E7B  0021               	movlb	1	; select bank1
  6415  0E7C  00AE               	movwf	ftoa@l^(0+128)
  6416  0E7D  0831               	movf	(ftoa@l+3)^(0+128),w
  6417  0E7E  0020               	movlb	0	; select bank0
  6418  0E7F  00AB               	movwf	___lltoft@c+3
  6419  0E80  0021               	movlb	1	; select bank1
  6420  0E81  0830               	movf	(ftoa@l+2)^(0+128),w
  6421  0E82  0020               	movlb	0	; select bank0
  6422  0E83  00AA               	movwf	___lltoft@c+2
  6423  0E84  0021               	movlb	1	; select bank1
  6424  0E85  082F               	movf	(ftoa@l+1)^(0+128),w
  6425  0E86  0020               	movlb	0	; select bank0
  6426  0E87  00A9               	movwf	___lltoft@c+1
  6427  0E88  0021               	movlb	1	; select bank1
  6428  0E89  082E               	movf	ftoa@l^(0+128),w
  6429  0E8A  0020               	movlb	0	; select bank0
  6430  0E8B  00A8               	movwf	___lltoft@c
  6431  0E8C  3197  27AA  318E   	fcall	___lltoft
  6432  0E8F  0020               	movlb	0	; select bank0
  6433  0E90  0828               	movf	?___lltoft,w
  6434  0E91  00BB               	movwf	___ftsub@f2
  6435  0E92  0829               	movf	?___lltoft+1,w
  6436  0E93  00BC               	movwf	___ftsub@f2+1
  6437  0E94  082A               	movf	?___lltoft+2,w
  6438  0E95  00BD               	movwf	___ftsub@f2+2
  6439  0E96  0021               	movlb	1	; select bank1
  6440  0E97  0826               	movf	ftoa@f^(0+128),w
  6441  0E98  0020               	movlb	0	; select bank0
  6442  0E99  00BE               	movwf	___ftsub@f1
  6443  0E9A  0021               	movlb	1	; select bank1
  6444  0E9B  0827               	movf	(ftoa@f+1)^(0+128),w
  6445  0E9C  0020               	movlb	0	; select bank0
  6446  0E9D  00BF               	movwf	___ftsub@f1+1
  6447  0E9E  0021               	movlb	1	; select bank1
  6448  0E9F  0828               	movf	(ftoa@f+2)^(0+128),w
  6449  0EA0  0020               	movlb	0	; select bank0
  6450  0EA1  00C0               	movwf	___ftsub@f1+2
  6451  0EA2  3196  264D  318E   	fcall	___ftsub
  6452  0EA5  0020               	movlb	0	; select bank0
  6453  0EA6  083B               	movf	?___ftsub,w
  6454  0EA7  0021               	movlb	1	; select bank1
  6455  0EA8  00A6               	movwf	ftoa@f^(0+128)
  6456  0EA9  0020               	movlb	0	; select bank0
  6457  0EAA  083C               	movf	?___ftsub+1,w
  6458  0EAB  0021               	movlb	1	; select bank1
  6459  0EAC  00A7               	movwf	(ftoa@f+1)^(0+128)
  6460  0EAD  0020               	movlb	0	; select bank0
  6461  0EAE  083D               	movf	?___ftsub+2,w
  6462  0EAF  0021               	movlb	1	; select bank1
  6463  0EB0  00A8               	movwf	(ftoa@f+2)^(0+128)
  6464  0EB1  0826               	movf	ftoa@f^(0+128),w
  6465  0EB2  0020               	movlb	0	; select bank0
  6466  0EB3  00DA               	movwf	___ftmul@f2
  6467  0EB4  0021               	movlb	1	; select bank1
  6468  0EB5  0827               	movf	(ftoa@f+1)^(0+128),w
  6469  0EB6  0020               	movlb	0	; select bank0
  6470  0EB7  00DB               	movwf	___ftmul@f2+1
  6471  0EB8  0021               	movlb	1	; select bank1
  6472  0EB9  0828               	movf	(ftoa@f+2)^(0+128),w
  6473  0EBA  0020               	movlb	0	; select bank0
  6474  0EBB  00DC               	movwf	___ftmul@f2+2
  6475  0EBC  3024               	movlw	36
  6476  0EBD  00D7               	movwf	___ftmul@f1
  6477  0EBE  3074               	movlw	116
  6478  0EBF  00D8               	movwf	___ftmul@f1+1
  6479  0EC0  3049               	movlw	73
  6480  0EC1  00D9               	movwf	___ftmul@f1+2
  6481  0EC2  3187  272F  318E   	fcall	___ftmul
  6482  0EC5  0020               	movlb	0	; select bank0
  6483  0EC6  0857               	movf	?___ftmul,w
  6484  0EC7  00E7               	movwf	___fttol@f1
  6485  0EC8  0858               	movf	?___ftmul+1,w
  6486  0EC9  00E8               	movwf	___fttol@f1+1
  6487  0ECA  0859               	movf	?___ftmul+2,w
  6488  0ECB  00E9               	movwf	___fttol@f1+2
  6489  0ECC  318C  242A  318E   	fcall	___fttol
  6490  0ECF  0020               	movlb	0	; select bank0
  6491  0ED0  086A               	movf	?___fttol+3,w
  6492  0ED1  0021               	movlb	1	; select bank1
  6493  0ED2  00AD               	movwf	(ftoa@rem+3)^(0+128)
  6494  0ED3  0020               	movlb	0	; select bank0
  6495  0ED4  0869               	movf	?___fttol+2,w
  6496  0ED5  0021               	movlb	1	; select bank1
  6497  0ED6  00AC               	movwf	(ftoa@rem+2)^(0+128)
  6498  0ED7  0020               	movlb	0	; select bank0
  6499  0ED8  0868               	movf	?___fttol+1,w
  6500  0ED9  0021               	movlb	1	; select bank1
  6501  0EDA  00AB               	movwf	(ftoa@rem+1)^(0+128)
  6502  0EDB  0020               	movlb	0	; select bank0
  6503  0EDC  0867               	movf	?___fttol,w
  6504  0EDD  0021               	movlb	1	; select bank1
  6505  0EDE  00AA               	movwf	ftoa@rem^(0+128)
  6506  0EDF  3029               	movlw	low (STR_10| (0+32768))
  6507  0EE0  0020               	movlb	0	; select bank0
  6508  0EE1  00B8               	movwf	sprintf@f
  6509  0EE2  3098               	movlw	high (STR_10| (0+32768))
  6510  0EE3  00B9               	movwf	sprintf@f+1
  6511  0EE4  0021               	movlb	1	; select bank1
  6512  0EE5  0831               	movf	(ftoa@l+3)^(0+128),w
  6513  0EE6  0020               	movlb	0	; select bank0
  6514  0EE7  00BD               	movwf	?_sprintf+5
  6515  0EE8  0021               	movlb	1	; select bank1
  6516  0EE9  0830               	movf	(ftoa@l+2)^(0+128),w
  6517  0EEA  0020               	movlb	0	; select bank0
  6518  0EEB  00BC               	movwf	?_sprintf+4
  6519  0EEC  0021               	movlb	1	; select bank1
  6520  0EED  082F               	movf	(ftoa@l+1)^(0+128),w
  6521  0EEE  0020               	movlb	0	; select bank0
  6522  0EEF  00BB               	movwf	?_sprintf+3
  6523  0EF0  0021               	movlb	1	; select bank1
  6524  0EF1  082E               	movf	ftoa@l^(0+128),w
  6525  0EF2  0020               	movlb	0	; select bank0
  6526  0EF3  00BA               	movwf	?_sprintf+2
  6527  0EF4  0021               	movlb	1	; select bank1
  6528  0EF5  082D               	movf	(ftoa@rem+3)^(0+128),w
  6529  0EF6  0020               	movlb	0	; select bank0
  6530  0EF7  00C1               	movwf	?_sprintf+9
  6531  0EF8  0021               	movlb	1	; select bank1
  6532  0EF9  082C               	movf	(ftoa@rem+2)^(0+128),w
  6533  0EFA  0020               	movlb	0	; select bank0
  6534  0EFB  00C0               	movwf	?_sprintf+8
  6535  0EFC  0021               	movlb	1	; select bank1
  6536  0EFD  082B               	movf	(ftoa@rem+1)^(0+128),w
  6537  0EFE  0020               	movlb	0	; select bank0
  6538  0EFF  00BF               	movwf	?_sprintf+7
  6539  0F00  0021               	movlb	1	; select bank1
  6540  0F01  082A               	movf	ftoa@rem^(0+128),w
  6541  0F02  0020               	movlb	0	; select bank0
  6542  0F03  00BE               	movwf	?_sprintf+6
  6543  0F04  0021               	movlb	1	; select bank1
  6544  0F05  0832               	movf	ftoa@cp^(0+128),w
  6545  0F06  3180  2036         	fcall	_sprintf
  6546  0F08  3055               	movlw	(low (ftoa@buf| (0+256)))& (0+255)
  6547  0F09  0008               	return
  6548  0F0A                     __end_of_ftoa:	
  6549                           
  6550                           	psect	text23
  6551  0036                     __ptext23:	
  6552 ;; *************** function _sprintf *****************
  6553 ;; Defined at:
  6554 ;;		line 500 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\doprnt.c"
  6555 ;; Parameters:    Size  Location     Type
  6556 ;;  sp              1    wreg     PTR unsigned char 
  6557 ;;		 -> ftoa@buf(17), 
  6558 ;;  f               2   24[BANK0 ] PTR const unsigned char 
  6559 ;;		 -> STR_10(11), 
  6560 ;; Auto vars:     Size  Location     Type
  6561 ;;  sp              1   46[BANK0 ] PTR unsigned char 
  6562 ;;		 -> ftoa@buf(17), 
  6563 ;;  val             4   42[BANK0 ] unsigned long 
  6564 ;;  tmpval          4    0        struct .
  6565 ;;  prec            2   49[BANK0 ] int 
  6566 ;;  width           2   47[BANK0 ] int 
  6567 ;;  cp              2    0        PTR const unsigned char 
  6568 ;;  len             2    0        unsigned int 
  6569 ;;  c               1   51[BANK0 ] unsigned char 
  6570 ;;  ap              1   41[BANK0 ] PTR void [1]
  6571 ;;		 -> ?_sprintf(2), 
  6572 ;;  flag            1   40[BANK0 ] unsigned char 
  6573 ;; Return value:  Size  Location     Type
  6574 ;;                  2   24[BANK0 ] int 
  6575 ;; Registers used:
  6576 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6577 ;; Tracked objects:
  6578 ;;		On entry : 0/0
  6579 ;;		On exit  : 0/0
  6580 ;;		Unchanged: 0/0
  6581 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6582 ;;      Params:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6583 ;;      Locals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6584 ;;      Temps:          0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6585 ;;      Totals:         0      28       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6586 ;;Total ram usage:       28 bytes
  6587 ;; Hardware stack levels used:    1
  6588 ;; Hardware stack levels required when called:    8
  6589 ;; This function calls:
  6590 ;;		___lldiv
  6591 ;;		___llmod
  6592 ;;		___wmul
  6593 ;;		_isdigit
  6594 ;; This function is called by:
  6595 ;;		_ftoa
  6596 ;; This function uses a non-reentrant model
  6597 ;;
  6598                           
  6599                           
  6600                           ;psect for function _sprintf
  6601  0036                     _sprintf:	
  6602                           
  6603                           ;incstack = 0
  6604                           ; Regs used in _sprintf: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6605                           ;sprintf@sp stored from wreg
  6606  0036  0020               	movlb	0	; select bank0
  6607  0037  00CE               	movwf	sprintf@sp
  6608                           
  6609                           ;doprnt.c: 502: va_list ap;;doprnt.c: 507: char c;;doprnt.c: 509: int width;;doprnt.c: 5
      +                          12: int prec;;doprnt.c: 520: unsigned char flag;;doprnt.c: 535: union {;doprnt.c: 536: u
      +                          nsigned long vd;;doprnt.c: 537: double integ;;doprnt.c: 538: } tmpval;;doprnt.c: 540: un
      +                          signed long val;;doprnt.c: 541: unsigned len;;doprnt.c: 542: const char * cp;;doprnt.c: 
      +                          545: *ap = __va_start();
  6610  0038  303A               	movlw	(low ((?_sprintf| 0+2)))& (0+255)
  6611  0039  00C2               	movwf	??_sprintf
  6612  003A  0842               	movf	??_sprintf,w
  6613  003B  00C9               	movwf	sprintf@ap
  6614  003C                     l2723:	
  6615                           ;doprnt.c: 548: while((c = *f++)) {
  6616                           
  6617  003C  0839               	movf	sprintf@f+1,w
  6618  003D  00C3               	movwf	??_sprintf+1
  6619  003E  0838               	movf	sprintf@f,w
  6620  003F  00C2               	movwf	??_sprintf
  6621  0040  0AB8               	incf	sprintf@f,f
  6622  0041  1903               	skipnz
  6623  0042  0AB9               	incf	sprintf@f+1,f
  6624  0043  0842               	movf	??_sprintf,w
  6625  0044  0084               	movwf	4
  6626  0045  0843               	movf	??_sprintf+1,w
  6627  0046  0085               	movwf	5
  6628  0047  0800               	movf	0,w	;code access
  6629  0048  00C4               	movwf	??_sprintf+2
  6630  0049  0844               	movf	??_sprintf+2,w
  6631  004A  00D3               	movwf	sprintf@c
  6632  004B  0853               	movf	sprintf@c,w
  6633  004C  1903               	btfsc	3,2
  6634  004D  29FD               	goto	l2725
  6635                           
  6636                           ;doprnt.c: 550: if(c != '%')
  6637  004E  3025               	movlw	37
  6638  004F  0653               	xorwf	sprintf@c,w
  6639  0050  1903               	btfsc	3,2
  6640  0051  285F               	goto	l2635
  6641                           
  6642                           ;doprnt.c: 552: {;doprnt.c: 553: ((*sp++ = (c)));
  6643  0052  0853               	movf	sprintf@c,w
  6644  0053  00C2               	movwf	??_sprintf
  6645  0054  084E               	movf	sprintf@sp,w
  6646  0055  0086               	movwf	6
  6647  0056  3001               	movlw	1	; select bank2/3
  6648  0057  0087               	movwf	7
  6649  0058  0842               	movf	??_sprintf,w
  6650  0059  0081               	movwf	1
  6651  005A  3001               	movlw	1
  6652  005B  00C2               	movwf	??_sprintf
  6653  005C  0842               	movf	??_sprintf,w
  6654  005D  07CE               	addwf	sprintf@sp,f
  6655                           
  6656                           ;doprnt.c: 554: continue;
  6657  005E  283C               	goto	l2723
  6658  005F                     l2635:	
  6659                           
  6660                           ;doprnt.c: 555: };doprnt.c: 558: width = 0;
  6661  005F  01CF               	clrf	sprintf@width
  6662  0060  01D0               	clrf	sprintf@width+1
  6663                           
  6664                           ;doprnt.c: 560: flag = 0;
  6665  0061  01C8               	clrf	sprintf@flag
  6666                           
  6667                           ;doprnt.c: 609: if(isdigit((unsigned)*f)) {
  6668  0062  0838               	movf	sprintf@f,w
  6669  0063  0084               	movwf	4
  6670  0064  0839               	movf	sprintf@f+1,w
  6671  0065  0085               	movwf	5
  6672  0066  0800               	movf	0,w	;code access
  6673  0067  3195  2558  3180   	fcall	_isdigit
  6674  006A  1C03               	btfss	3,0
  6675  006B  289D               	goto	l2649
  6676                           
  6677                           ;doprnt.c: 610: width = 0;
  6678  006C  0020               	movlb	0	; select bank0
  6679  006D  01CF               	clrf	sprintf@width
  6680  006E  01D0               	clrf	sprintf@width+1
  6681  006F                     l2641:	
  6682                           ;doprnt.c: 611: do {
  6683                           
  6684                           
  6685                           ;doprnt.c: 612: width *= 10;
  6686  006F  300A               	movlw	10
  6687  0070  0020               	movlb	0	; select bank0
  6688  0071  00A0               	movwf	___wmul@multiplier
  6689  0072  3000               	movlw	0
  6690  0073  00A1               	movwf	___wmul@multiplier+1
  6691  0074  0850               	movf	sprintf@width+1,w
  6692  0075  00A3               	movwf	___wmul@multiplicand+1
  6693  0076  084F               	movf	sprintf@width,w
  6694  0077  00A2               	movwf	___wmul@multiplicand
  6695  0078  3187  27E3  3180   	fcall	___wmul
  6696  007B  0020               	movlb	0	; select bank0
  6697  007C  0821               	movf	?___wmul+1,w
  6698  007D  00D0               	movwf	sprintf@width+1
  6699  007E  0820               	movf	?___wmul,w
  6700  007F  00CF               	movwf	sprintf@width
  6701                           
  6702                           ;doprnt.c: 613: width += *f++ - '0';
  6703  0080  0838               	movf	sprintf@f,w
  6704  0081  0084               	movwf	4
  6705  0082  0839               	movf	sprintf@f+1,w
  6706  0083  0085               	movwf	5
  6707  0084  0800               	movf	0,w	;code access
  6708  0085  3ED0               	addlw	208
  6709  0086  00C2               	movwf	??_sprintf
  6710  0087  30FF               	movlw	255
  6711  0088  1803               	skipnc
  6712  0089  3000               	movlw	0
  6713  008A  00C3               	movwf	??_sprintf+1
  6714  008B  0842               	movf	??_sprintf,w
  6715  008C  07CF               	addwf	sprintf@width,f
  6716  008D  0843               	movf	??_sprintf+1,w
  6717  008E  3DD0               	addwfc	sprintf@width+1,f
  6718  008F  3001               	movlw	1
  6719  0090  07B8               	addwf	sprintf@f,f
  6720  0091  3000               	movlw	0
  6721  0092  3DB9               	addwfc	sprintf@f+1,f
  6722                           
  6723                           ;doprnt.c: 614: } while(isdigit((unsigned)*f));
  6724  0093  0838               	movf	sprintf@f,w
  6725  0094  0084               	movwf	4
  6726  0095  0839               	movf	sprintf@f+1,w
  6727  0096  0085               	movwf	5
  6728  0097  0800               	movf	0,w	;code access
  6729  0098  3195  2558  3180   	fcall	_isdigit
  6730  009B  1803               	btfsc	3,0
  6731  009C  286F               	goto	l2641
  6732  009D                     l2649:	
  6733                           
  6734                           ;doprnt.c: 620: };doprnt.c: 623: if(*f == '.') {
  6735  009D  0020               	movlb	0	; select bank0
  6736  009E  0838               	movf	sprintf@f,w
  6737  009F  0084               	movwf	4
  6738  00A0  0839               	movf	sprintf@f+1,w
  6739  00A1  0085               	movwf	5
  6740  00A2  0012               	moviw fsr0++
  6741  00A3  3A2E               	xorlw	46
  6742  00A4  1D03               	btfss	3,2
  6743  00A5  28DB               	goto	l2661
  6744                           
  6745                           ;doprnt.c: 625: f++;
  6746  00A6  3001               	movlw	1
  6747  00A7  07B8               	addwf	sprintf@f,f
  6748  00A8  3000               	movlw	0
  6749  00A9  3DB9               	addwfc	sprintf@f+1,f
  6750                           
  6751                           ;doprnt.c: 639: {;doprnt.c: 640: prec = 0;
  6752  00AA  01D1               	clrf	sprintf@prec
  6753  00AB  01D2               	clrf	sprintf@prec+1
  6754  00AC                     l2659:	
  6755                           ;doprnt.c: 641: while(isdigit((unsigned)*f))
  6756                           
  6757  00AC  0838               	movf	sprintf@f,w
  6758  00AD  0084               	movwf	4
  6759  00AE  0839               	movf	sprintf@f+1,w
  6760  00AF  0085               	movwf	5
  6761  00B0  0800               	movf	0,w	;code access
  6762  00B1  3195  2558  3180   	fcall	_isdigit
  6763  00B4  1C03               	btfss	3,0
  6764  00B5  28E6               	goto	l2667
  6765                           
  6766                           ;doprnt.c: 642: prec = prec*10 + *f++ - '0';
  6767  00B6  0020               	movlb	0	; select bank0
  6768  00B7  0838               	movf	sprintf@f,w
  6769  00B8  0084               	movwf	4
  6770  00B9  0839               	movf	sprintf@f+1,w
  6771  00BA  0085               	movwf	5
  6772  00BB  0800               	movf	0,w	;code access
  6773  00BC  00C2               	movwf	??_sprintf
  6774  00BD  01C3               	clrf	??_sprintf+1
  6775  00BE  0852               	movf	sprintf@prec+1,w
  6776  00BF  00A1               	movwf	___wmul@multiplier+1
  6777  00C0  0851               	movf	sprintf@prec,w
  6778  00C1  00A0               	movwf	___wmul@multiplier
  6779  00C2  300A               	movlw	10
  6780  00C3  00A2               	movwf	___wmul@multiplicand
  6781  00C4  3000               	movlw	0
  6782  00C5  00A3               	movwf	___wmul@multiplicand+1
  6783  00C6  3187  27E3  3180   	fcall	___wmul
  6784  00C9  0020               	movlb	0	; select bank0
  6785  00CA  0842               	movf	??_sprintf,w
  6786  00CB  0720               	addwf	?___wmul,w
  6787  00CC  00C4               	movwf	??_sprintf+2
  6788  00CD  0843               	movf	??_sprintf+1,w
  6789  00CE  3D21               	addwfc	?___wmul+1,w
  6790  00CF  00C5               	movwf	??_sprintf+3
  6791  00D0  0844               	movf	??_sprintf+2,w
  6792  00D1  3ED0               	addlw	208
  6793  00D2  00D1               	movwf	sprintf@prec
  6794  00D3  30FF               	movlw	255
  6795  00D4  3D45               	addwfc	??_sprintf+3,w
  6796  00D5  00D2               	movwf	sprintf@prec+1
  6797  00D6  3001               	movlw	1
  6798  00D7  07B8               	addwf	sprintf@f,f
  6799  00D8  3000               	movlw	0
  6800  00D9  3DB9               	addwfc	sprintf@f+1,f
  6801  00DA  28AC               	goto	l2659
  6802  00DB                     l2661:	
  6803                           ;doprnt.c: 643: };doprnt.c: 644: } else {
  6804                           
  6805                           
  6806                           ;doprnt.c: 645: prec = 0;
  6807  00DB  0020               	movlb	0	; select bank0
  6808  00DC  01D1               	clrf	sprintf@prec
  6809  00DD  01D2               	clrf	sprintf@prec+1
  6810                           
  6811                           ;doprnt.c: 654: switch(c = *f++) {
  6812                           
  6813                           ;doprnt.c: 649: };doprnt.c: 652: loop:
  6814  00DE  28E6               	goto	l2667
  6815  00DF                     l435:	
  6816                           ;doprnt.c: 660: case 'l':
  6817                           
  6818                           ;doprnt.c: 657: goto alldone;
  6819                           
  6820                           ;doprnt.c: 656: case 0:
  6821                           
  6822                           
  6823                           ;doprnt.c: 662: flag |= 0x10;
  6824  00DF  1648               	bsf	sprintf@flag,4
  6825                           
  6826                           ;doprnt.c: 663: goto loop;
  6827  00E0  28E6               	goto	l2667
  6828  00E1                     l2663:	
  6829                           ;doprnt.c: 836: case 'u':
  6830                           
  6831                           ;doprnt.c: 832: continue;
  6832                           
  6833                           ;doprnt.c: 821: default:
  6834                           
  6835                           
  6836                           ;doprnt.c: 837: flag |= 0xC0;
  6837  00E1  30C0               	movlw	192
  6838  00E2  00C2               	movwf	??_sprintf
  6839  00E3  0842               	movf	??_sprintf,w
  6840  00E4  04C8               	iorwf	sprintf@flag,f
  6841                           
  6842                           ;doprnt.c: 841: }
  6843                           
  6844                           ;doprnt.c: 838: break;
  6845  00E5  28FE               	goto	l438
  6846  00E6                     l2667:	
  6847  00E6  0020               	movlb	0	; select bank0
  6848  00E7  0839               	movf	sprintf@f+1,w
  6849  00E8  00C3               	movwf	??_sprintf+1
  6850  00E9  0838               	movf	sprintf@f,w
  6851  00EA  00C2               	movwf	??_sprintf
  6852  00EB  0AB8               	incf	sprintf@f,f
  6853  00EC  1903               	skipnz
  6854  00ED  0AB9               	incf	sprintf@f+1,f
  6855  00EE  0842               	movf	??_sprintf,w
  6856  00EF  0084               	movwf	4
  6857  00F0  0843               	movf	??_sprintf+1,w
  6858  00F1  0085               	movwf	5
  6859  00F2  0800               	movf	0,w	;code access
  6860  00F3  00D3               	movwf	sprintf@c
  6861                           
  6862                           ; Switch size 1, requested type "space"
  6863                           ; Number of cases is 3, Range of values is 0 to 117
  6864                           ; switch strategies available:
  6865                           ; Name         Instructions Cycles
  6866                           ; simple_byte           10     6 (average)
  6867                           ; direct_byte          242     6 (fixed)
  6868                           ; jumptable            260     6 (fixed)
  6869                           ;	Chosen strategy is simple_byte
  6870  00F4  3A00               	xorlw	0	; case 0
  6871  00F5  1903               	skipnz
  6872  00F6  29FD               	goto	l2725
  6873  00F7  3A6C               	xorlw	108	; case 108
  6874  00F8  1903               	skipnz
  6875  00F9  28DF               	goto	l435
  6876  00FA  3A19               	xorlw	25	; case 117
  6877  00FB  1903               	skipnz
  6878  00FC  28E1               	goto	l2663
  6879  00FD  283C               	goto	l2723
  6880  00FE                     l438:	
  6881                           
  6882                           ;doprnt.c: 1292: {;doprnt.c: 1300: if(flag & 0x10)
  6883  00FE  1E48               	btfss	sprintf@flag,4
  6884  00FF  290D               	goto	l2673
  6885                           
  6886                           ;doprnt.c: 1301: val = (*(unsigned long *)__va_arg((*(unsigned long **)ap), (unsigned lo
      +                          ng)0));
  6887  0100  0849               	movf	sprintf@ap,w
  6888  0101  0086               	movwf	6
  6889  0102  0187               	clrf	7
  6890  0103  3F40               	moviw [0]fsr1
  6891  0104  00CA               	movwf	sprintf@val
  6892  0105  3F41               	moviw [1]fsr1
  6893  0106  00CB               	movwf	sprintf@val+1
  6894  0107  3F42               	moviw [2]fsr1
  6895  0108  00CC               	movwf	sprintf@val+2
  6896  0109  3F43               	moviw [3]fsr1
  6897  010A  00CD               	movwf	sprintf@val+3
  6898  010B  3004               	movlw	4
  6899  010C  291B               	goto	L1
  6900  010D                     l2673:	
  6901                           
  6902                           ;doprnt.c: 1302: else;doprnt.c: 1305: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (
      +                          unsigned)0));
  6903  010D  0849               	movf	sprintf@ap,w
  6904  010E  0086               	movwf	6
  6905  010F  0187               	clrf	7
  6906  0110  3F40               	moviw [0]fsr1
  6907  0111  00C2               	movwf	??_sprintf
  6908  0112  3F41               	moviw [1]fsr1
  6909  0113  00C3               	movwf	??_sprintf+1
  6910  0114  0842               	movf	??_sprintf,w
  6911  0115  00CA               	movwf	sprintf@val
  6912  0116  0843               	movf	??_sprintf+1,w
  6913  0117  00CB               	movwf	sprintf@val+1
  6914  0118  01CC               	clrf	sprintf@val+2
  6915  0119  01CD               	clrf	sprintf@val+3
  6916  011A  3002               	movlw	2
  6917  011B                     L1:	
  6918  011B  00C2               	movwf	??_sprintf
  6919  011C  0842               	movf	??_sprintf,w
  6920  011D  07C9               	addwf	sprintf@ap,f
  6921                           
  6922                           ;doprnt.c: 1306: };doprnt.c: 1309: if(prec == 0 && val == 0)
  6923  011E  0851               	movf	sprintf@prec,w
  6924  011F  0452               	iorwf	sprintf@prec+1,w
  6925  0120  1D03               	btfss	3,2
  6926  0121  292C               	goto	l2683
  6927  0122  084D               	movf	sprintf@val+3,w
  6928  0123  044C               	iorwf	sprintf@val+2,w
  6929  0124  044B               	iorwf	sprintf@val+1,w
  6930  0125  044A               	iorwf	sprintf@val,w
  6931  0126  1D03               	skipz
  6932  0127  292C               	goto	l2683
  6933                           
  6934                           ;doprnt.c: 1310: prec++;
  6935  0128  3001               	movlw	1
  6936  0129  07D1               	addwf	sprintf@prec,f
  6937  012A  3000               	movlw	0
  6938  012B  3DD2               	addwfc	sprintf@prec+1,f
  6939  012C                     l2683:	
  6940                           
  6941                           ;doprnt.c: 1324: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  6942  012C  01D3               	clrf	sprintf@c
  6943  012D  0AD3               	incf	sprintf@c,f
  6944  012E  300A               	movlw	10
  6945  012F  0653               	xorwf	sprintf@c,w
  6946  0130  1903               	btfsc	3,2
  6947  0131  295F               	goto	l2695
  6948  0132                     l2689:	
  6949                           
  6950                           ;doprnt.c: 1325: if(val < dpowers[c])
  6951  0132  0853               	movf	sprintf@c,w
  6952  0133  00C2               	movwf	??_sprintf
  6953  0134  01C3               	clrf	??_sprintf+1
  6954  0135  35C2               	lslf	??_sprintf,f
  6955  0136  0DC3               	rlf	??_sprintf+1,f
  6956  0137  35C2               	lslf	??_sprintf,f
  6957  0138  0DC3               	rlf	??_sprintf+1,f
  6958  0139  3000               	movlw	low (_dpowers| (0+32768))
  6959  013A  0742               	addwf	??_sprintf,w
  6960  013B  0084               	movwf	4
  6961  013C  3098               	movlw	high (_dpowers| (0+32768))
  6962  013D  3D43               	addwfc	??_sprintf+1,w
  6963  013E  0085               	movwf	5
  6964  013F  3F00               	moviw [0]fsr0
  6965  0140  00C4               	movwf	??_sprintf+2
  6966  0141  3F01               	moviw [1]fsr0
  6967  0142  00C5               	movwf	??_sprintf+3
  6968  0143  3F02               	moviw [2]fsr0
  6969  0144  00C6               	movwf	??_sprintf+4
  6970  0145  3F03               	moviw [3]fsr0
  6971  0146  00C7               	movwf	??_sprintf+5
  6972  0147  0847               	movf	??_sprintf+5,w
  6973  0148  024D               	subwf	sprintf@val+3,w
  6974  0149  1D03               	skipz
  6975  014A  2955               	goto	u2755
  6976  014B  0846               	movf	??_sprintf+4,w
  6977  014C  024C               	subwf	sprintf@val+2,w
  6978  014D  1D03               	skipz
  6979  014E  2955               	goto	u2755
  6980  014F  0845               	movf	??_sprintf+3,w
  6981  0150  024B               	subwf	sprintf@val+1,w
  6982  0151  1D03               	skipz
  6983  0152  2955               	goto	u2755
  6984  0153  0844               	movf	??_sprintf+2,w
  6985  0154  024A               	subwf	sprintf@val,w
  6986  0155                     u2755:	
  6987  0155  1C03               	btfss	3,0
  6988  0156  295F               	goto	l2695
  6989                           
  6990                           ;doprnt.c: 1326: break;
  6991  0157  3001               	movlw	1
  6992  0158  00C2               	movwf	??_sprintf
  6993  0159  0842               	movf	??_sprintf,w
  6994  015A  07D3               	addwf	sprintf@c,f
  6995  015B  300A               	movlw	10
  6996  015C  0653               	xorwf	sprintf@c,w
  6997  015D  1D03               	btfss	3,2
  6998  015E  2932               	goto	l2689
  6999  015F                     l2695:	
  7000                           
  7001                           ;doprnt.c: 1358: if(c < prec)
  7002  015F  0852               	movf	sprintf@prec+1,w
  7003  0160  3A80               	xorlw	128
  7004  0161  3C80               	sublw	128
  7005  0162  1D03               	skipz
  7006  0163  2966               	goto	u2775
  7007  0164  0851               	movf	sprintf@prec,w
  7008  0165  0253               	subwf	sprintf@c,w
  7009  0166                     u2775:	
  7010  0166  1803               	skipnc
  7011  0167  296E               	goto	l2699
  7012                           
  7013                           ;doprnt.c: 1359: c = prec;
  7014  0168  0020               	movlb	0	; select bank0
  7015  0169  0851               	movf	sprintf@prec,w
  7016  016A  00C2               	movwf	??_sprintf
  7017  016B  0842               	movf	??_sprintf,w
  7018  016C  00D3               	movwf	sprintf@c
  7019  016D  2982               	goto	l446
  7020  016E                     l2699:	
  7021                           
  7022                           ;doprnt.c: 1360: else if(prec < c)
  7023  016E  0020               	movlb	0	; select bank0
  7024  016F  0852               	movf	sprintf@prec+1,w
  7025  0170  3A80               	xorlw	128
  7026  0171  00C2               	movwf	??_sprintf
  7027  0172  3080               	movlw	128
  7028  0173  0242               	subwf	??_sprintf,w
  7029  0174  1D03               	skipz
  7030  0175  2978               	goto	u2785
  7031  0176  0853               	movf	sprintf@c,w
  7032  0177  0251               	subwf	sprintf@prec,w
  7033  0178                     u2785:	
  7034  0178  1803               	skipnc
  7035  0179  2982               	goto	l446
  7036                           
  7037                           ;doprnt.c: 1361: prec = c;
  7038  017A  0020               	movlb	0	; select bank0
  7039  017B  0853               	movf	sprintf@c,w
  7040  017C  00C2               	movwf	??_sprintf
  7041  017D  01C3               	clrf	??_sprintf+1
  7042  017E  0842               	movf	??_sprintf,w
  7043  017F  00D1               	movwf	sprintf@prec
  7044  0180  0843               	movf	??_sprintf+1,w
  7045  0181  00D2               	movwf	sprintf@prec+1
  7046  0182                     l446:	
  7047                           
  7048                           ;doprnt.c: 1400: if(width > c)
  7049  0182  0020               	movlb	0	; select bank0
  7050  0183  0850               	movf	sprintf@width+1,w
  7051  0184  3A80               	xorlw	128
  7052  0185  3C80               	sublw	128
  7053  0186  1D03               	skipz
  7054  0187  298A               	goto	u2795
  7055  0188  084F               	movf	sprintf@width,w
  7056  0189  0253               	subwf	sprintf@c,w
  7057  018A                     u2795:	
  7058  018A  1803               	skipnc
  7059  018B  2995               	goto	l2705
  7060                           
  7061                           ;doprnt.c: 1401: width -= c;
  7062  018C  0020               	movlb	0	; select bank0
  7063  018D  0853               	movf	sprintf@c,w
  7064  018E  00C2               	movwf	??_sprintf
  7065  018F  01C3               	clrf	??_sprintf+1
  7066  0190  0842               	movf	??_sprintf,w
  7067  0191  02CF               	subwf	sprintf@width,f
  7068  0192  0843               	movf	??_sprintf+1,w
  7069  0193  3BD0               	subwfb	sprintf@width+1,f
  7070  0194  2998               	goto	l2707
  7071  0195                     l2705:	
  7072                           
  7073                           ;doprnt.c: 1402: else;doprnt.c: 1403: width = 0;
  7074  0195  0020               	movlb	0	; select bank0
  7075  0196  01CF               	clrf	sprintf@width
  7076  0197  01D0               	clrf	sprintf@width+1
  7077  0198                     l2707:	
  7078                           
  7079                           ;doprnt.c: 1441: {;doprnt.c: 1443: if(width;doprnt.c: 1447: )
  7080  0198  084F               	movf	sprintf@width,w
  7081  0199  0450               	iorwf	sprintf@width+1,w
  7082  019A  1903               	btfsc	3,2
  7083  019B  29F2               	goto	l2721
  7084                           
  7085                           ;doprnt.c: 1449: ((*sp++ = (' ')));
  7086                           
  7087                           ;doprnt.c: 1448: do
  7088  019C  3020               	movlw	32
  7089  019D  00C2               	movwf	??_sprintf
  7090  019E  084E               	movf	sprintf@sp,w
  7091  019F  0086               	movwf	6
  7092  01A0  3001               	movlw	1	; select bank2/3
  7093  01A1  0087               	movwf	7
  7094  01A2  0842               	movf	??_sprintf,w
  7095  01A3  0081               	movwf	1
  7096  01A4  3001               	movlw	1
  7097  01A5  00C2               	movwf	??_sprintf
  7098  01A6  0842               	movf	??_sprintf,w
  7099  01A7  07CE               	addwf	sprintf@sp,f
  7100                           
  7101                           ;doprnt.c: 1450: while(--width);
  7102  01A8  30FF               	movlw	255
  7103  01A9  07CF               	addwf	sprintf@width,f
  7104  01AA  30FF               	movlw	255
  7105  01AB  3DD0               	addwfc	sprintf@width+1,f
  7106  01AC  2998               	goto	l2707
  7107  01AD                     l2715:	
  7108                           ;doprnt.c: 1488: };doprnt.c: 1493: while(prec--) {
  7109                           
  7110                           
  7111                           ;doprnt.c: 1497: {;doprnt.c: 1508: c = (val / dpowers[prec]) % 10 + '0';
  7112  01AD  3000               	movlw	0
  7113  01AE  00B1               	movwf	___llmod@divisor+3
  7114  01AF  3000               	movlw	0
  7115  01B0  00B0               	movwf	___llmod@divisor+2
  7116  01B1  3000               	movlw	0
  7117  01B2  00AF               	movwf	___llmod@divisor+1
  7118  01B3  300A               	movlw	10
  7119  01B4  00AE               	movwf	___llmod@divisor
  7120  01B5  0852               	movf	sprintf@prec+1,w
  7121  01B6  0085               	movwf	5
  7122  01B7  0851               	movf	sprintf@prec,w
  7123  01B8  0084               	movwf	4
  7124  01B9  3584               	lslf	4,f
  7125  01BA  0D85               	rlf	5,f
  7126  01BB  3584               	lslf	4,f
  7127  01BC  0D85               	rlf	5,f
  7128  01BD  3000               	movlw	low (_dpowers| (0+32768))
  7129  01BE  0784               	addwf	4,f
  7130  01BF  3098               	movlw	high (_dpowers| (0+32768))
  7131  01C0  3D85               	addwfc	5,f
  7132  01C1  3F00               	moviw [0]fsr0
  7133  01C2  00A0               	movwf	___lldiv@divisor
  7134  01C3  3F01               	moviw [1]fsr0
  7135  01C4  00A1               	movwf	___lldiv@divisor+1
  7136  01C5  3F02               	moviw [2]fsr0
  7137  01C6  00A2               	movwf	___lldiv@divisor+2
  7138  01C7  3F03               	moviw [3]fsr0
  7139  01C8  00A3               	movwf	___lldiv@divisor+3
  7140  01C9  084D               	movf	sprintf@val+3,w
  7141  01CA  00A7               	movwf	___lldiv@dividend+3
  7142  01CB  084C               	movf	sprintf@val+2,w
  7143  01CC  00A6               	movwf	___lldiv@dividend+2
  7144  01CD  084B               	movf	sprintf@val+1,w
  7145  01CE  00A5               	movwf	___lldiv@dividend+1
  7146  01CF  084A               	movf	sprintf@val,w
  7147  01D0  00A4               	movwf	___lldiv@dividend
  7148  01D1  3189  21F2  3180   	fcall	___lldiv
  7149  01D4  0020               	movlb	0	; select bank0
  7150  01D5  0823               	movf	?___lldiv+3,w
  7151  01D6  00B5               	movwf	___llmod@dividend+3
  7152  01D7  0822               	movf	?___lldiv+2,w
  7153  01D8  00B4               	movwf	___llmod@dividend+2
  7154  01D9  0821               	movf	?___lldiv+1,w
  7155  01DA  00B3               	movwf	___llmod@dividend+1
  7156  01DB  0820               	movf	?___lldiv,w
  7157  01DC  00B2               	movwf	___llmod@dividend
  7158  01DD  3188  20E3  3180   	fcall	___llmod
  7159  01E0  0020               	movlb	0	; select bank0
  7160  01E1  082E               	movf	?___llmod,w
  7161  01E2  3E30               	addlw	48
  7162  01E3  00C2               	movwf	??_sprintf
  7163  01E4  0842               	movf	??_sprintf,w
  7164  01E5  00D3               	movwf	sprintf@c
  7165                           
  7166                           ;doprnt.c: 1542: };doprnt.c: 1543: ((*sp++ = (c)));
  7167  01E6  0853               	movf	sprintf@c,w
  7168  01E7  00C2               	movwf	??_sprintf
  7169  01E8  084E               	movf	sprintf@sp,w
  7170  01E9  0086               	movwf	6
  7171  01EA  3001               	movlw	1	; select bank2/3
  7172  01EB  0087               	movwf	7
  7173  01EC  0842               	movf	??_sprintf,w
  7174  01ED  0081               	movwf	1
  7175  01EE  3001               	movlw	1
  7176  01EF  00C2               	movwf	??_sprintf
  7177  01F0  0842               	movf	??_sprintf,w
  7178  01F1  07CE               	addwf	sprintf@sp,f
  7179  01F2                     l2721:	
  7180  01F2  30FF               	movlw	255
  7181  01F3  07D1               	addwf	sprintf@prec,f
  7182  01F4  30FF               	movlw	255
  7183  01F5  3DD2               	addwfc	sprintf@prec+1,f
  7184  01F6  0A51               	incf	sprintf@prec,w
  7185  01F7  1D03               	skipz
  7186  01F8  29AD               	goto	l2715
  7187  01F9  0A52               	incf	sprintf@prec+1,w
  7188  01FA  1903               	btfsc	3,2
  7189  01FB  283C               	goto	l2723
  7190  01FC  29AD               	goto	l2715
  7191  01FD                     l2725:	
  7192                           ;doprnt.c: 1544: };doprnt.c: 1552: };doprnt.c: 1554: alldone:
  7193                           
  7194                           
  7195                           ;doprnt.c: 1557: *sp = 0;
  7196  01FD  084E               	movf	sprintf@sp,w
  7197  01FE  0086               	movwf	6
  7198  01FF  3001               	movlw	1	; select bank2/3
  7199  0200  0087               	movwf	7
  7200  0201  0181               	clrf	1
  7201  0202  0008               	return
  7202  0203                     __end_of_sprintf:	
  7203                           ;doprnt.c: 1559: return 0;;	Return value of _sprintf is never used
  7204                           
  7205                           
  7206                           	psect	text24
  7207  1558                     __ptext24:	
  7208 ;; *************** function _isdigit *****************
  7209 ;; Defined at:
  7210 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\isdigit.c"
  7211 ;; Parameters:    Size  Location     Type
  7212 ;;  c               1    wreg     unsigned char 
  7213 ;; Auto vars:     Size  Location     Type
  7214 ;;  c               1    1[BANK0 ] unsigned char 
  7215 ;; Return value:  Size  Location     Type
  7216 ;;		None               void
  7217 ;; Registers used:
  7218 ;;		wreg, status,2, status,0
  7219 ;; Tracked objects:
  7220 ;;		On entry : 0/0
  7221 ;;		On exit  : 0/0
  7222 ;;		Unchanged: 0/0
  7223 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7224 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7225 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7226 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7227 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7228 ;;Total ram usage:        2 bytes
  7229 ;; Hardware stack levels used:    1
  7230 ;; Hardware stack levels required when called:    7
  7231 ;; This function calls:
  7232 ;;		Nothing
  7233 ;; This function is called by:
  7234 ;;		_sprintf
  7235 ;; This function uses a non-reentrant model
  7236 ;;
  7237                           
  7238                           
  7239                           ;psect for function _isdigit
  7240  1558                     _isdigit:	
  7241                           
  7242                           ;incstack = 0
  7243                           ; Regs used in _isdigit: [wreg+status,2+status,0]
  7244                           ;isdigit@c stored from wreg
  7245  1558  0020               	movlb	0	; select bank0
  7246  1559  00A1               	movwf	isdigit@c
  7247  155A  01A0               	clrf	_isdigit$1728
  7248  155B  303A               	movlw	58
  7249  155C  0221               	subwf	isdigit@c,w
  7250  155D  1803               	skipnc
  7251  155E  2D65               	goto	l2377
  7252  155F  3030               	movlw	48
  7253  1560  0221               	subwf	isdigit@c,w
  7254  1561  1C03               	skipc
  7255  1562  2D65               	goto	l2377
  7256  1563  01A0               	clrf	_isdigit$1728
  7257  1564  0AA0               	incf	_isdigit$1728,f
  7258  1565                     l2377:	
  7259  1565  0C20               	rrf	_isdigit$1728,w
  7260  1566  0008               	return
  7261  1567                     __end_of_isdigit:	
  7262                           
  7263                           	psect	text25
  7264  07E3                     __ptext25:	
  7265 ;; *************** function ___wmul *****************
  7266 ;; Defined at:
  7267 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\Umul16.c"
  7268 ;; Parameters:    Size  Location     Type
  7269 ;;  multiplier      2    0[BANK0 ] unsigned int 
  7270 ;;  multiplicand    2    2[BANK0 ] unsigned int 
  7271 ;; Auto vars:     Size  Location     Type
  7272 ;;  product         2    4[BANK0 ] unsigned int 
  7273 ;; Return value:  Size  Location     Type
  7274 ;;                  2    0[BANK0 ] unsigned int 
  7275 ;; Registers used:
  7276 ;;		wreg, status,2, status,0
  7277 ;; Tracked objects:
  7278 ;;		On entry : 0/0
  7279 ;;		On exit  : 0/0
  7280 ;;		Unchanged: 0/0
  7281 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7282 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7283 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7284 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7285 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7286 ;;Total ram usage:        6 bytes
  7287 ;; Hardware stack levels used:    1
  7288 ;; Hardware stack levels required when called:    7
  7289 ;; This function calls:
  7290 ;;		Nothing
  7291 ;; This function is called by:
  7292 ;;		_sprintf
  7293 ;; This function uses a non-reentrant model
  7294 ;;
  7295                           
  7296                           
  7297                           ;psect for function ___wmul
  7298  07E3                     ___wmul:	
  7299                           
  7300                           ;incstack = 0
  7301                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  7302  07E3  0020               	movlb	0	; select bank0
  7303  07E4  01A4               	clrf	___wmul@product
  7304  07E5  01A5               	clrf	___wmul@product+1
  7305  07E6                     l2383:	
  7306  07E6  1C20               	btfss	___wmul@multiplier,0
  7307  07E7  2FEC               	goto	l461
  7308  07E8  0822               	movf	___wmul@multiplicand,w
  7309  07E9  07A4               	addwf	___wmul@product,f
  7310  07EA  0823               	movf	___wmul@multiplicand+1,w
  7311  07EB  3DA5               	addwfc	___wmul@product+1,f
  7312  07EC                     l461:	
  7313  07EC  3001               	movlw	1
  7314  07ED                     u2095:	
  7315  07ED  35A2               	lslf	___wmul@multiplicand,f
  7316  07EE  0DA3               	rlf	___wmul@multiplicand+1,f
  7317  07EF  0B89               	decfsz	9,f
  7318  07F0  2FED               	goto	u2095
  7319  07F1  3001               	movlw	1
  7320  07F2                     u2105:	
  7321  07F2  36A1               	lsrf	___wmul@multiplier+1,f
  7322  07F3  0CA0               	rrf	___wmul@multiplier,f
  7323  07F4  0B89               	decfsz	9,f
  7324  07F5  2FF2               	goto	u2105
  7325  07F6  0820               	movf	___wmul@multiplier,w
  7326  07F7  0421               	iorwf	___wmul@multiplier+1,w
  7327  07F8  1D03               	btfss	3,2
  7328  07F9  2FE6               	goto	l2383
  7329  07FA  0825               	movf	___wmul@product+1,w
  7330  07FB  00A1               	movwf	?___wmul+1
  7331  07FC  0824               	movf	___wmul@product,w
  7332  07FD  00A0               	movwf	?___wmul
  7333  07FE  0008               	return
  7334  07FF                     __end_of___wmul:	
  7335                           
  7336                           	psect	text26
  7337  08E3                     __ptext26:	
  7338 ;; *************** function ___llmod *****************
  7339 ;; Defined at:
  7340 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\llmod.c"
  7341 ;; Parameters:    Size  Location     Type
  7342 ;;  divisor         4   14[BANK0 ] unsigned long 
  7343 ;;  dividend        4   18[BANK0 ] unsigned long 
  7344 ;; Auto vars:     Size  Location     Type
  7345 ;;  counter         1   23[BANK0 ] unsigned char 
  7346 ;; Return value:  Size  Location     Type
  7347 ;;                  4   14[BANK0 ] unsigned long 
  7348 ;; Registers used:
  7349 ;;		wreg, status,2, status,0
  7350 ;; Tracked objects:
  7351 ;;		On entry : 0/0
  7352 ;;		On exit  : 0/0
  7353 ;;		Unchanged: 0/0
  7354 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7355 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7356 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7357 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7358 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7359 ;;Total ram usage:       10 bytes
  7360 ;; Hardware stack levels used:    1
  7361 ;; Hardware stack levels required when called:    7
  7362 ;; This function calls:
  7363 ;;		Nothing
  7364 ;; This function is called by:
  7365 ;;		_sprintf
  7366 ;; This function uses a non-reentrant model
  7367 ;;
  7368                           
  7369                           
  7370                           ;psect for function ___llmod
  7371  08E3                     ___llmod:	
  7372                           
  7373                           ;incstack = 0
  7374                           ; Regs used in ___llmod: [wreg+status,2+status,0]
  7375  08E3  0020               	movlb	0	; select bank0
  7376  08E4  0831               	movf	___llmod@divisor+3,w
  7377  08E5  0430               	iorwf	___llmod@divisor+2,w
  7378  08E6  042F               	iorwf	___llmod@divisor+1,w
  7379  08E7  042E               	iorwf	___llmod@divisor,w
  7380  08E8  1903               	skipnz
  7381  08E9  291D               	goto	l2505
  7382  08EA  01B7               	clrf	___llmod@counter
  7383  08EB  0AB7               	incf	___llmod@counter,f
  7384  08EC                     l2495:	
  7385  08EC  1BB1               	btfsc	___llmod@divisor+3,7
  7386  08ED  28FA               	goto	l2497
  7387  08EE  3001               	movlw	1
  7388  08EF                     u2435:	
  7389  08EF  35AE               	lslf	___llmod@divisor,f
  7390  08F0  0DAF               	rlf	___llmod@divisor+1,f
  7391  08F1  0DB0               	rlf	___llmod@divisor+2,f
  7392  08F2  0DB1               	rlf	___llmod@divisor+3,f
  7393  08F3  0B89               	decfsz	9,f
  7394  08F4  28EF               	goto	u2435
  7395  08F5  3001               	movlw	1
  7396  08F6  00B6               	movwf	??___llmod
  7397  08F7  0836               	movf	??___llmod,w
  7398  08F8  07B7               	addwf	___llmod@counter,f
  7399  08F9  28EC               	goto	l2495
  7400  08FA                     l2497:	
  7401  08FA  0831               	movf	___llmod@divisor+3,w
  7402  08FB  0235               	subwf	___llmod@dividend+3,w
  7403  08FC  1D03               	skipz
  7404  08FD  2908               	goto	u2455
  7405  08FE  0830               	movf	___llmod@divisor+2,w
  7406  08FF  0234               	subwf	___llmod@dividend+2,w
  7407  0900  1D03               	skipz
  7408  0901  2908               	goto	u2455
  7409  0902  082F               	movf	___llmod@divisor+1,w
  7410  0903  0233               	subwf	___llmod@dividend+1,w
  7411  0904  1D03               	skipz
  7412  0905  2908               	goto	u2455
  7413  0906  082E               	movf	___llmod@divisor,w
  7414  0907  0232               	subwf	___llmod@dividend,w
  7415  0908                     u2455:	
  7416  0908  1C03               	skipc
  7417  0909  2912               	goto	l2501
  7418  090A  082E               	movf	___llmod@divisor,w
  7419  090B  02B2               	subwf	___llmod@dividend,f
  7420  090C  082F               	movf	___llmod@divisor+1,w
  7421  090D  3BB3               	subwfb	___llmod@dividend+1,f
  7422  090E  0830               	movf	___llmod@divisor+2,w
  7423  090F  3BB4               	subwfb	___llmod@dividend+2,f
  7424  0910  0831               	movf	___llmod@divisor+3,w
  7425  0911  3BB5               	subwfb	___llmod@dividend+3,f
  7426  0912                     l2501:	
  7427  0912  3001               	movlw	1
  7428  0913                     u2465:	
  7429  0913  36B1               	lsrf	___llmod@divisor+3,f
  7430  0914  0CB0               	rrf	___llmod@divisor+2,f
  7431  0915  0CAF               	rrf	___llmod@divisor+1,f
  7432  0916  0CAE               	rrf	___llmod@divisor,f
  7433  0917  0B89               	decfsz	9,f
  7434  0918  2913               	goto	u2465
  7435  0919  3001               	movlw	1
  7436  091A  02B7               	subwf	___llmod@counter,f
  7437  091B  1D03               	btfss	3,2
  7438  091C  28FA               	goto	l2497
  7439  091D                     l2505:	
  7440  091D  0835               	movf	___llmod@dividend+3,w
  7441  091E  00B1               	movwf	?___llmod+3
  7442  091F  0834               	movf	___llmod@dividend+2,w
  7443  0920  00B0               	movwf	?___llmod+2
  7444  0921  0833               	movf	___llmod@dividend+1,w
  7445  0922  00AF               	movwf	?___llmod+1
  7446  0923  0832               	movf	___llmod@dividend,w
  7447  0924  00AE               	movwf	?___llmod
  7448  0925  0008               	return
  7449  0926                     __end_of___llmod:	
  7450                           
  7451                           	psect	text27
  7452  09F2                     __ptext27:	
  7453 ;; *************** function ___lldiv *****************
  7454 ;; Defined at:
  7455 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\__lldiv.c"
  7456 ;; Parameters:    Size  Location     Type
  7457 ;;  divisor         4    0[BANK0 ] unsigned long 
  7458 ;;  dividend        4    4[BANK0 ] unsigned long 
  7459 ;; Auto vars:     Size  Location     Type
  7460 ;;  quotient        4    9[BANK0 ] unsigned long 
  7461 ;;  counter         1   13[BANK0 ] unsigned char 
  7462 ;; Return value:  Size  Location     Type
  7463 ;;                  4    0[BANK0 ] unsigned long 
  7464 ;; Registers used:
  7465 ;;		wreg, status,2, status,0
  7466 ;; Tracked objects:
  7467 ;;		On entry : 0/0
  7468 ;;		On exit  : 0/0
  7469 ;;		Unchanged: 0/0
  7470 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7471 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7472 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7473 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7474 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7475 ;;Total ram usage:       14 bytes
  7476 ;; Hardware stack levels used:    1
  7477 ;; Hardware stack levels required when called:    7
  7478 ;; This function calls:
  7479 ;;		Nothing
  7480 ;; This function is called by:
  7481 ;;		_sprintf
  7482 ;; This function uses a non-reentrant model
  7483 ;;
  7484                           
  7485                           
  7486                           ;psect for function ___lldiv
  7487  09F2                     ___lldiv:	
  7488                           
  7489                           ;incstack = 0
  7490                           ; Regs used in ___lldiv: [wreg+status,2+status,0]
  7491  09F2  3000               	movlw	0
  7492  09F3  0020               	movlb	0	; select bank0
  7493  09F4  00AC               	movwf	___lldiv@quotient+3
  7494  09F5  3000               	movlw	0
  7495  09F6  00AB               	movwf	___lldiv@quotient+2
  7496  09F7  3000               	movlw	0
  7497  09F8  00AA               	movwf	___lldiv@quotient+1
  7498  09F9  3000               	movlw	0
  7499  09FA  00A9               	movwf	___lldiv@quotient
  7500  09FB  0823               	movf	___lldiv@divisor+3,w
  7501  09FC  0422               	iorwf	___lldiv@divisor+2,w
  7502  09FD  0421               	iorwf	___lldiv@divisor+1,w
  7503  09FE  0420               	iorwf	___lldiv@divisor,w
  7504  09FF  1903               	skipnz
  7505  0A00  2A3C               	goto	l2415
  7506  0A01  01AD               	clrf	___lldiv@counter
  7507  0A02  0AAD               	incf	___lldiv@counter,f
  7508  0A03                     l2401:	
  7509  0A03  1BA3               	btfsc	___lldiv@divisor+3,7
  7510  0A04  2A11               	goto	l2403
  7511  0A05  3001               	movlw	1
  7512  0A06                     u2135:	
  7513  0A06  35A0               	lslf	___lldiv@divisor,f
  7514  0A07  0DA1               	rlf	___lldiv@divisor+1,f
  7515  0A08  0DA2               	rlf	___lldiv@divisor+2,f
  7516  0A09  0DA3               	rlf	___lldiv@divisor+3,f
  7517  0A0A  0B89               	decfsz	9,f
  7518  0A0B  2A06               	goto	u2135
  7519  0A0C  3001               	movlw	1
  7520  0A0D  00A8               	movwf	??___lldiv
  7521  0A0E  0828               	movf	??___lldiv,w
  7522  0A0F  07AD               	addwf	___lldiv@counter,f
  7523  0A10  2A03               	goto	l2401
  7524  0A11                     l2403:	
  7525  0A11  3001               	movlw	1
  7526  0A12                     u2155:	
  7527  0A12  35A9               	lslf	___lldiv@quotient,f
  7528  0A13  0DAA               	rlf	___lldiv@quotient+1,f
  7529  0A14  0DAB               	rlf	___lldiv@quotient+2,f
  7530  0A15  0DAC               	rlf	___lldiv@quotient+3,f
  7531  0A16  0B89               	decfsz	9,f
  7532  0A17  2A12               	goto	u2155
  7533  0A18  0823               	movf	___lldiv@divisor+3,w
  7534  0A19  0227               	subwf	___lldiv@dividend+3,w
  7535  0A1A  1D03               	skipz
  7536  0A1B  2A26               	goto	u2165
  7537  0A1C  0822               	movf	___lldiv@divisor+2,w
  7538  0A1D  0226               	subwf	___lldiv@dividend+2,w
  7539  0A1E  1D03               	skipz
  7540  0A1F  2A26               	goto	u2165
  7541  0A20  0821               	movf	___lldiv@divisor+1,w
  7542  0A21  0225               	subwf	___lldiv@dividend+1,w
  7543  0A22  1D03               	skipz
  7544  0A23  2A26               	goto	u2165
  7545  0A24  0820               	movf	___lldiv@divisor,w
  7546  0A25  0224               	subwf	___lldiv@dividend,w
  7547  0A26                     u2165:	
  7548  0A26  1C03               	skipc
  7549  0A27  2A31               	goto	l2411
  7550  0A28  0820               	movf	___lldiv@divisor,w
  7551  0A29  02A4               	subwf	___lldiv@dividend,f
  7552  0A2A  0821               	movf	___lldiv@divisor+1,w
  7553  0A2B  3BA5               	subwfb	___lldiv@dividend+1,f
  7554  0A2C  0822               	movf	___lldiv@divisor+2,w
  7555  0A2D  3BA6               	subwfb	___lldiv@dividend+2,f
  7556  0A2E  0823               	movf	___lldiv@divisor+3,w
  7557  0A2F  3BA7               	subwfb	___lldiv@dividend+3,f
  7558  0A30  1429               	bsf	___lldiv@quotient,0
  7559  0A31                     l2411:	
  7560  0A31  3001               	movlw	1
  7561  0A32                     u2175:	
  7562  0A32  36A3               	lsrf	___lldiv@divisor+3,f
  7563  0A33  0CA2               	rrf	___lldiv@divisor+2,f
  7564  0A34  0CA1               	rrf	___lldiv@divisor+1,f
  7565  0A35  0CA0               	rrf	___lldiv@divisor,f
  7566  0A36  0B89               	decfsz	9,f
  7567  0A37  2A32               	goto	u2175
  7568  0A38  3001               	movlw	1
  7569  0A39  02AD               	subwf	___lldiv@counter,f
  7570  0A3A  1D03               	btfss	3,2
  7571  0A3B  2A11               	goto	l2403
  7572  0A3C                     l2415:	
  7573  0A3C  082C               	movf	___lldiv@quotient+3,w
  7574  0A3D  00A3               	movwf	?___lldiv+3
  7575  0A3E  082B               	movf	___lldiv@quotient+2,w
  7576  0A3F  00A2               	movwf	?___lldiv+2
  7577  0A40  082A               	movf	___lldiv@quotient+1,w
  7578  0A41  00A1               	movwf	?___lldiv+1
  7579  0A42  0829               	movf	___lldiv@quotient,w
  7580  0A43  00A0               	movwf	?___lldiv
  7581  0A44  0008               	return
  7582  0A45                     __end_of___lldiv:	
  7583                           
  7584                           	psect	text28
  7585  17AA                     __ptext28:	
  7586 ;; *************** function ___lltoft *****************
  7587 ;; Defined at:
  7588 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\lltoft.c"
  7589 ;; Parameters:    Size  Location     Type
  7590 ;;  c               4    8[BANK0 ] unsigned long 
  7591 ;; Auto vars:     Size  Location     Type
  7592 ;;  exp             1   13[BANK0 ] unsigned char 
  7593 ;; Return value:  Size  Location     Type
  7594 ;;                  3    8[BANK0 ] float 
  7595 ;; Registers used:
  7596 ;;		wreg, status,2, status,0, pclath, cstack
  7597 ;; Tracked objects:
  7598 ;;		On entry : 0/0
  7599 ;;		On exit  : 0/0
  7600 ;;		Unchanged: 0/0
  7601 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7602 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7603 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7604 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7605 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7606 ;;Total ram usage:        6 bytes
  7607 ;; Hardware stack levels used:    1
  7608 ;; Hardware stack levels required when called:    8
  7609 ;; This function calls:
  7610 ;;		___ftpack
  7611 ;; This function is called by:
  7612 ;;		_loop
  7613 ;;		_ftoa
  7614 ;; This function uses a non-reentrant model
  7615 ;;
  7616                           
  7617                           
  7618                           ;psect for function ___lltoft
  7619  17AA                     ___lltoft:	
  7620                           
  7621                           ;incstack = 0
  7622                           ; Regs used in ___lltoft: [wreg+status,2+status,0+pclath+cstack]
  7623  17AA  308E               	movlw	142
  7624  17AB  0020               	movlb	0	; select bank0
  7625  17AC  00AC               	movwf	??___lltoft
  7626  17AD  082C               	movf	??___lltoft,w
  7627  17AE  00AD               	movwf	___lltoft@exp
  7628  17AF                     l2875:	
  7629  17AF  30FF               	movlw	255
  7630  17B0  052B               	andwf	___lltoft@c+3,w
  7631  17B1  1903               	btfsc	3,2
  7632  17B2  2FBF               	goto	l2877
  7633  17B3  3001               	movlw	1
  7634  17B4                     u3135:	
  7635  17B4  36AB               	lsrf	___lltoft@c+3,f
  7636  17B5  0CAA               	rrf	___lltoft@c+2,f
  7637  17B6  0CA9               	rrf	___lltoft@c+1,f
  7638  17B7  0CA8               	rrf	___lltoft@c,f
  7639  17B8  0B89               	decfsz	9,f
  7640  17B9  2FB4               	goto	u3135
  7641  17BA  3001               	movlw	1
  7642  17BB  00AC               	movwf	??___lltoft
  7643  17BC  082C               	movf	??___lltoft,w
  7644  17BD  07AD               	addwf	___lltoft@exp,f
  7645  17BE  2FAF               	goto	l2875
  7646  17BF                     l2877:	
  7647  17BF  0828               	movf	___lltoft@c,w
  7648  17C0  00A0               	movwf	___ftpack@arg
  7649  17C1  0829               	movf	___lltoft@c+1,w
  7650  17C2  00A1               	movwf	___ftpack@arg+1
  7651  17C3  082A               	movf	___lltoft@c+2,w
  7652  17C4  00A2               	movwf	___ftpack@arg+2
  7653  17C5  082D               	movf	___lltoft@exp,w
  7654  17C6  00AC               	movwf	??___lltoft
  7655  17C7  082C               	movf	??___lltoft,w
  7656  17C8  00A3               	movwf	___ftpack@exp
  7657  17C9  01A4               	clrf	___ftpack@sign
  7658  17CA  318A  22A8         	fcall	___ftpack
  7659  17CC  0020               	movlb	0	; select bank0
  7660  17CD  0820               	movf	?___ftpack,w
  7661  17CE  00A8               	movwf	?___lltoft
  7662  17CF  0821               	movf	?___ftpack+1,w
  7663  17D0  00A9               	movwf	?___lltoft+1
  7664  17D1  0822               	movf	?___ftpack+2,w
  7665  17D2  00AA               	movwf	?___lltoft+2
  7666  17D3  0008               	return
  7667  17D4                     __end_of___lltoft:	
  7668                           
  7669                           	psect	text29
  7670  0C2A                     __ptext29:	
  7671 ;; *************** function ___fttol *****************
  7672 ;; Defined at:
  7673 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\fttol.c"
  7674 ;; Parameters:    Size  Location     Type
  7675 ;;  f1              3   71[BANK0 ] float 
  7676 ;; Auto vars:     Size  Location     Type
  7677 ;;  lval            4    1[BANK1 ] unsigned long 
  7678 ;;  exp1            1    5[BANK1 ] unsigned char 
  7679 ;;  sign1           1    0[BANK1 ] unsigned char 
  7680 ;; Return value:  Size  Location     Type
  7681 ;;                  4   71[BANK0 ] long 
  7682 ;; Registers used:
  7683 ;;		wreg, status,2, status,0
  7684 ;; Tracked objects:
  7685 ;;		On entry : 0/0
  7686 ;;		On exit  : 0/0
  7687 ;;		Unchanged: 0/0
  7688 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7689 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7690 ;;      Locals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0
  7691 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7692 ;;      Totals:         0       8       6       0       0       0       0       0       0       0       0       0       
      +0       0
  7693 ;;Total ram usage:       14 bytes
  7694 ;; Hardware stack levels used:    1
  7695 ;; Hardware stack levels required when called:    7
  7696 ;; This function calls:
  7697 ;;		Nothing
  7698 ;; This function is called by:
  7699 ;;		_ftoa
  7700 ;; This function uses a non-reentrant model
  7701 ;;
  7702                           
  7703                           
  7704                           ;psect for function ___fttol
  7705  0C2A                     ___fttol:	
  7706                           
  7707                           ;incstack = 0
  7708                           ; Regs used in ___fttol: [wreg+status,2+status,0]
  7709  0C2A  0020               	movlb	0	; select bank0
  7710  0C2B  0867               	movf	___fttol@f1,w
  7711  0C2C  00EB               	movwf	??___fttol
  7712  0C2D  0868               	movf	___fttol@f1+1,w
  7713  0C2E  00EC               	movwf	??___fttol+1
  7714  0C2F  0869               	movf	___fttol@f1+2,w
  7715  0C30  00ED               	movwf	??___fttol+2
  7716  0C31  1003               	clrc
  7717  0C32  0D6C               	rlf	??___fttol+1,w
  7718  0C33  0D6D               	rlf	??___fttol+2,w
  7719  0C34  00EE               	movwf	??___fttol+3
  7720  0C35  086E               	movf	??___fttol+3,w
  7721  0C36  0021               	movlb	1	; select bank1
  7722  0C37  00A5               	movwf	___fttol@exp1^(0+128)
  7723  0C38  0825               	movf	___fttol@exp1^(0+128),w
  7724  0C39  1D03               	btfss	3,2
  7725  0C3A  2C45               	goto	l2835
  7726  0C3B  3000               	movlw	0
  7727  0C3C  0020               	movlb	0	; select bank0
  7728  0C3D  00EA               	movwf	?___fttol+3
  7729  0C3E  3000               	movlw	0
  7730  0C3F  00E9               	movwf	?___fttol+2
  7731  0C40  3000               	movlw	0
  7732  0C41  00E8               	movwf	?___fttol+1
  7733  0C42  3000               	movlw	0
  7734  0C43  00E7               	movwf	?___fttol
  7735  0C44  0008               	return
  7736  0C45                     l2835:	
  7737  0C45  0020               	movlb	0	; select bank0
  7738  0C46  0867               	movf	___fttol@f1,w
  7739  0C47  00EB               	movwf	??___fttol
  7740  0C48  0868               	movf	___fttol@f1+1,w
  7741  0C49  00EC               	movwf	??___fttol+1
  7742  0C4A  0869               	movf	___fttol@f1+2,w
  7743  0C4B  00ED               	movwf	??___fttol+2
  7744  0C4C  3017               	movlw	23
  7745  0C4D                     u3045:	
  7746  0C4D  36ED               	lsrf	??___fttol+2,f
  7747  0C4E  0CEC               	rrf	??___fttol+1,f
  7748  0C4F  0CEB               	rrf	??___fttol,f
  7749  0C50  0B89               	decfsz	9,f
  7750  0C51  2C4D               	goto	u3045
  7751  0C52  086B               	movf	??___fttol,w
  7752  0C53  00EE               	movwf	??___fttol+3
  7753  0C54  086E               	movf	??___fttol+3,w
  7754  0C55  0021               	movlb	1	; select bank1
  7755  0C56  00A0               	movwf	___fttol@sign1^(0+128)
  7756  0C57  0020               	movlb	0	; select bank0
  7757  0C58  17E8               	bsf	___fttol@f1+1,7
  7758  0C59  30FF               	movlw	255
  7759  0C5A  05E7               	andwf	___fttol@f1,f
  7760  0C5B  30FF               	movlw	255
  7761  0C5C  05E8               	andwf	___fttol@f1+1,f
  7762  0C5D  3000               	movlw	0
  7763  0C5E  05E9               	andwf	___fttol@f1+2,f
  7764  0C5F  0867               	movf	___fttol@f1,w
  7765  0C60  0021               	movlb	1	; select bank1
  7766  0C61  00A1               	movwf	___fttol@lval^(0+128)
  7767  0C62  0020               	movlb	0	; select bank0
  7768  0C63  0868               	movf	___fttol@f1+1,w
  7769  0C64  0021               	movlb	1	; select bank1
  7770  0C65  00A2               	movwf	(___fttol@lval^(0+128)+1)
  7771  0C66  0020               	movlb	0	; select bank0
  7772  0C67  0869               	movf	___fttol@f1+2,w
  7773  0C68  0021               	movlb	1	; select bank1
  7774  0C69  00A3               	movwf	(___fttol@lval^(0+128)+2)
  7775  0C6A  01A4               	clrf	(___fttol@lval^(0+128)+3)
  7776  0C6B  308E               	movlw	142
  7777  0C6C  02A5               	subwf	___fttol@exp1^(0+128),f
  7778  0C6D  1FA5               	btfss	___fttol@exp1^(0+128),7
  7779  0C6E  2C8F               	goto	l2855
  7780  0C6F  0825               	movf	___fttol@exp1^(0+128),w
  7781  0C70  3A80               	xorlw	128
  7782  0C71  3E8F               	addlw	143
  7783  0C72  1803               	skipnc
  7784  0C73  2C7E               	goto	l2853
  7785  0C74  3000               	movlw	0
  7786  0C75  0020               	movlb	0	; select bank0
  7787  0C76  00EA               	movwf	?___fttol+3
  7788  0C77  3000               	movlw	0
  7789  0C78  00E9               	movwf	?___fttol+2
  7790  0C79  3000               	movlw	0
  7791  0C7A  00E8               	movwf	?___fttol+1
  7792  0C7B  3000               	movlw	0
  7793  0C7C  00E7               	movwf	?___fttol
  7794  0C7D  0008               	return
  7795  0C7E                     l2853:	
  7796  0C7E  3001               	movlw	1
  7797  0C7F                     u3075:	
  7798  0C7F  0021               	movlb	1	; select bank1
  7799  0C80  36A4               	lsrf	(___fttol@lval+3)^(0+128),f
  7800  0C81  0CA3               	rrf	(___fttol@lval+2)^(0+128),f
  7801  0C82  0CA2               	rrf	(___fttol@lval+1)^(0+128),f
  7802  0C83  0CA1               	rrf	___fttol@lval^(0+128),f
  7803  0C84  0B89               	decfsz	9,f
  7804  0C85  2C7F               	goto	u3075
  7805  0C86  3001               	movlw	1
  7806  0C87  0020               	movlb	0	; select bank0
  7807  0C88  00EB               	movwf	??___fttol
  7808  0C89  086B               	movf	??___fttol,w
  7809  0C8A  0021               	movlb	1	; select bank1
  7810  0C8B  07A5               	addwf	___fttol@exp1^(0+128),f
  7811  0C8C  1903               	btfsc	3,2
  7812  0C8D  2CAB               	goto	l2863
  7813  0C8E  2C7E               	goto	l2853
  7814  0C8F                     l2855:	
  7815  0C8F  3018               	movlw	24
  7816  0C90  0225               	subwf	___fttol@exp1^(0+128),w
  7817  0C91  1C03               	skipc
  7818  0C92  2CA7               	goto	l755
  7819  0C93  3000               	movlw	0
  7820  0C94  0020               	movlb	0	; select bank0
  7821  0C95  00EA               	movwf	?___fttol+3
  7822  0C96  3000               	movlw	0
  7823  0C97  00E9               	movwf	?___fttol+2
  7824  0C98  3000               	movlw	0
  7825  0C99  00E8               	movwf	?___fttol+1
  7826  0C9A  3000               	movlw	0
  7827  0C9B  00E7               	movwf	?___fttol
  7828  0C9C  0008               	return
  7829  0C9D                     l2861:	
  7830  0C9D  3001               	movlw	1
  7831  0C9E                     u3105:	
  7832  0C9E  0021               	movlb	1	; select bank1
  7833  0C9F  35A1               	lslf	___fttol@lval^(0+128),f
  7834  0CA0  0DA2               	rlf	(___fttol@lval+1)^(0+128),f
  7835  0CA1  0DA3               	rlf	(___fttol@lval+2)^(0+128),f
  7836  0CA2  0DA4               	rlf	(___fttol@lval+3)^(0+128),f
  7837  0CA3  0B89               	decfsz	9,f
  7838  0CA4  2C9E               	goto	u3105
  7839  0CA5  3001               	movlw	1
  7840  0CA6  02A5               	subwf	___fttol@exp1^(0+128),f
  7841  0CA7                     l755:	
  7842  0CA7  0021               	movlb	1	; select bank1
  7843  0CA8  0825               	movf	___fttol@exp1^(0+128),w
  7844  0CA9  1D03               	btfss	3,2
  7845  0CAA  2C9D               	goto	l2861
  7846  0CAB                     l2863:	
  7847  0CAB  0820               	movf	___fttol@sign1^(0+128),w
  7848  0CAC  1903               	btfsc	3,2
  7849  0CAD  2CB9               	goto	l2867
  7850  0CAE  09A1               	comf	___fttol@lval^(0+128),f
  7851  0CAF  09A2               	comf	(___fttol@lval+1)^(0+128),f
  7852  0CB0  09A3               	comf	(___fttol@lval+2)^(0+128),f
  7853  0CB1  09A4               	comf	(___fttol@lval+3)^(0+128),f
  7854  0CB2  0AA1               	incf	___fttol@lval^(0+128),f
  7855  0CB3  1903               	skipnz
  7856  0CB4  0AA2               	incf	(___fttol@lval+1)^(0+128),f
  7857  0CB5  1903               	skipnz
  7858  0CB6  0AA3               	incf	(___fttol@lval+2)^(0+128),f
  7859  0CB7  1903               	skipnz
  7860  0CB8  0AA4               	incf	(___fttol@lval+3)^(0+128),f
  7861  0CB9                     l2867:	
  7862  0CB9  0824               	movf	(___fttol@lval+3)^(0+128),w
  7863  0CBA  0020               	movlb	0	; select bank0
  7864  0CBB  00EA               	movwf	?___fttol+3
  7865  0CBC  0021               	movlb	1	; select bank1
  7866  0CBD  0823               	movf	(___fttol@lval+2)^(0+128),w
  7867  0CBE  0020               	movlb	0	; select bank0
  7868  0CBF  00E9               	movwf	?___fttol+2
  7869  0CC0  0021               	movlb	1	; select bank1
  7870  0CC1  0822               	movf	(___fttol@lval+1)^(0+128),w
  7871  0CC2  0020               	movlb	0	; select bank0
  7872  0CC3  00E8               	movwf	?___fttol+1
  7873  0CC4  0021               	movlb	1	; select bank1
  7874  0CC5  0821               	movf	___fttol@lval^(0+128),w
  7875  0CC6  0020               	movlb	0	; select bank0
  7876  0CC7  00E7               	movwf	?___fttol
  7877  0CC8  0008               	return
  7878  0CC9                     __end_of___fttol:	
  7879                           
  7880                           	psect	text30
  7881  164D                     __ptext30:	
  7882 ;; *************** function ___ftsub *****************
  7883 ;; Defined at:
  7884 ;;		line 17 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\ftsub.c"
  7885 ;; Parameters:    Size  Location     Type
  7886 ;;  f2              3   27[BANK0 ] float 
  7887 ;;  f1              3   30[BANK0 ] float 
  7888 ;; Auto vars:     Size  Location     Type
  7889 ;;		None
  7890 ;; Return value:  Size  Location     Type
  7891 ;;                  3   27[BANK0 ] float 
  7892 ;; Registers used:
  7893 ;;		wreg, status,2, status,0, pclath, cstack
  7894 ;; Tracked objects:
  7895 ;;		On entry : 0/0
  7896 ;;		On exit  : 0/0
  7897 ;;		Unchanged: 0/0
  7898 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7899 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7900 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7901 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7902 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7903 ;;Total ram usage:        6 bytes
  7904 ;; Hardware stack levels used:    1
  7905 ;; Hardware stack levels required when called:    9
  7906 ;; This function calls:
  7907 ;;		___ftadd
  7908 ;; This function is called by:
  7909 ;;		_ftoa
  7910 ;; This function uses a non-reentrant model
  7911 ;;
  7912                           
  7913                           
  7914                           ;psect for function ___ftsub
  7915  164D                     ___ftsub:	
  7916                           
  7917                           ;incstack = 0
  7918                           ; Regs used in ___ftsub: [wreg+status,2+status,0+pclath+cstack]
  7919  164D  0020               	movlb	0	; select bank0
  7920  164E  083D               	movf	___ftsub@f2+2,w
  7921  164F  043C               	iorwf	___ftsub@f2+1,w
  7922  1650  043B               	iorwf	___ftsub@f2,w
  7923  1651  1903               	skipnz
  7924  1652  2E55               	goto	l2825
  7925  1653  3080               	movlw	128
  7926  1654  06BD               	xorwf	___ftsub@f2+2,f
  7927  1655                     l2825:	
  7928  1655  083E               	movf	___ftsub@f1,w
  7929  1656  00AE               	movwf	___ftadd@f1
  7930  1657  083F               	movf	___ftsub@f1+1,w
  7931  1658  00AF               	movwf	___ftadd@f1+1
  7932  1659  0840               	movf	___ftsub@f1+2,w
  7933  165A  00B0               	movwf	___ftadd@f1+2
  7934  165B  083B               	movf	___ftsub@f2,w
  7935  165C  00B1               	movwf	___ftadd@f2
  7936  165D  083C               	movf	___ftsub@f2+1,w
  7937  165E  00B2               	movwf	___ftadd@f2+1
  7938  165F  083D               	movf	___ftsub@f2+2,w
  7939  1660  00B3               	movwf	___ftadd@f2+2
  7940  1661  318F  270A         	fcall	___ftadd
  7941  1663  0020               	movlb	0	; select bank0
  7942  1664  082E               	movf	?___ftadd,w
  7943  1665  00BB               	movwf	?___ftsub
  7944  1666  082F               	movf	?___ftadd+1,w
  7945  1667  00BC               	movwf	?___ftsub+1
  7946  1668  0830               	movf	?___ftadd+2,w
  7947  1669  00BD               	movwf	?___ftsub+2
  7948  166A  0008               	return
  7949  166B                     __end_of___ftsub:	
  7950                           
  7951                           	psect	text31
  7952  1542                     __ptext31:	
  7953 ;; *************** function ___ftneg *****************
  7954 ;; Defined at:
  7955 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\ftneg.c"
  7956 ;; Parameters:    Size  Location     Type
  7957 ;;  f1              3   55[BANK0 ] float 
  7958 ;; Auto vars:     Size  Location     Type
  7959 ;;		None
  7960 ;; Return value:  Size  Location     Type
  7961 ;;                  3   55[BANK0 ] float 
  7962 ;; Registers used:
  7963 ;;		wreg
  7964 ;; Tracked objects:
  7965 ;;		On entry : 0/0
  7966 ;;		On exit  : 0/0
  7967 ;;		Unchanged: 0/0
  7968 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7969 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7970 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7971 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7972 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7973 ;;Total ram usage:        3 bytes
  7974 ;; Hardware stack levels used:    1
  7975 ;; Hardware stack levels required when called:    7
  7976 ;; This function calls:
  7977 ;;		Nothing
  7978 ;; This function is called by:
  7979 ;;		_loop
  7980 ;;		_ftoa
  7981 ;; This function uses a non-reentrant model
  7982 ;;
  7983                           
  7984                           
  7985                           ;psect for function ___ftneg
  7986  1542                     ___ftneg:	
  7987                           
  7988                           ;incstack = 0
  7989                           ; Regs used in ___ftneg: [wreg]
  7990  1542  0020               	movlb	0	; select bank0
  7991  1543  0859               	movf	___ftneg@f1+2,w
  7992  1544  0458               	iorwf	___ftneg@f1+1,w
  7993  1545  0457               	iorwf	___ftneg@f1,w
  7994  1546  1903               	skipnz
  7995  1547  0008               	return
  7996  1548  3080               	movlw	128
  7997  1549  06D9               	xorwf	___ftneg@f1+2,f
  7998  154A  0008               	return
  7999  154B                     __end_of___ftneg:	
  8000                           
  8001                           	psect	text32
  8002  072F                     __ptext32:	
  8003 ;; *************** function ___ftmul *****************
  8004 ;; Defined at:
  8005 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\ftmul.c"
  8006 ;; Parameters:    Size  Location     Type
  8007 ;;  f1              3   55[BANK0 ] float 
  8008 ;;  f2              3   58[BANK0 ] float 
  8009 ;; Auto vars:     Size  Location     Type
  8010 ;;  f3_as_produc    3   66[BANK0 ] unsigned um
  8011 ;;  sign            1   70[BANK0 ] unsigned char 
  8012 ;;  cntr            1   69[BANK0 ] unsigned char 
  8013 ;;  exp             1   65[BANK0 ] unsigned char 
  8014 ;; Return value:  Size  Location     Type
  8015 ;;                  3   55[BANK0 ] float 
  8016 ;; Registers used:
  8017 ;;		wreg, status,2, status,0, pclath, cstack
  8018 ;; Tracked objects:
  8019 ;;		On entry : 0/0
  8020 ;;		On exit  : 0/0
  8021 ;;		Unchanged: 0/0
  8022 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8023 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8024 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8025 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8026 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8027 ;;Total ram usage:       16 bytes
  8028 ;; Hardware stack levels used:    1
  8029 ;; Hardware stack levels required when called:    8
  8030 ;; This function calls:
  8031 ;;		___ftpack
  8032 ;; This function is called by:
  8033 ;;		_loop
  8034 ;;		_ftoa
  8035 ;; This function uses a non-reentrant model
  8036 ;;
  8037                           
  8038                           
  8039                           ;psect for function ___ftmul
  8040  072F                     ___ftmul:	
  8041                           
  8042                           ;incstack = 0
  8043                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
  8044  072F  0020               	movlb	0	; select bank0
  8045  0730  0857               	movf	___ftmul@f1,w
  8046  0731  00DD               	movwf	??___ftmul
  8047  0732  0858               	movf	___ftmul@f1+1,w
  8048  0733  00DE               	movwf	??___ftmul+1
  8049  0734  0859               	movf	___ftmul@f1+2,w
  8050  0735  00DF               	movwf	??___ftmul+2
  8051  0736  1003               	clrc
  8052  0737  0D5E               	rlf	??___ftmul+1,w
  8053  0738  0D5F               	rlf	??___ftmul+2,w
  8054  0739  00E0               	movwf	??___ftmul+3
  8055  073A  0860               	movf	??___ftmul+3,w
  8056  073B  00E1               	movwf	___ftmul@exp
  8057  073C  0861               	movf	___ftmul@exp,w
  8058  073D  1D03               	btfss	3,2
  8059  073E  2F46               	goto	l2769
  8060  073F  3000               	movlw	0
  8061  0740  00D7               	movwf	?___ftmul
  8062  0741  3000               	movlw	0
  8063  0742  00D8               	movwf	?___ftmul+1
  8064  0743  3000               	movlw	0
  8065  0744  00D9               	movwf	?___ftmul+2
  8066  0745  0008               	return
  8067  0746                     l2769:	
  8068  0746  085A               	movf	___ftmul@f2,w
  8069  0747  00DD               	movwf	??___ftmul
  8070  0748  085B               	movf	___ftmul@f2+1,w
  8071  0749  00DE               	movwf	??___ftmul+1
  8072  074A  085C               	movf	___ftmul@f2+2,w
  8073  074B  00DF               	movwf	??___ftmul+2
  8074  074C  1003               	clrc
  8075  074D  0D5E               	rlf	??___ftmul+1,w
  8076  074E  0D5F               	rlf	??___ftmul+2,w
  8077  074F  00E0               	movwf	??___ftmul+3
  8078  0750  0860               	movf	??___ftmul+3,w
  8079  0751  00E6               	movwf	___ftmul@sign
  8080  0752  0866               	movf	___ftmul@sign,w
  8081  0753  1D03               	btfss	3,2
  8082  0754  2F5C               	goto	l2775
  8083  0755  3000               	movlw	0
  8084  0756  00D7               	movwf	?___ftmul
  8085  0757  3000               	movlw	0
  8086  0758  00D8               	movwf	?___ftmul+1
  8087  0759  3000               	movlw	0
  8088  075A  00D9               	movwf	?___ftmul+2
  8089  075B  0008               	return
  8090  075C                     l2775:	
  8091  075C  0866               	movf	___ftmul@sign,w
  8092  075D  3E7B               	addlw	123
  8093  075E  00DD               	movwf	??___ftmul
  8094  075F  085D               	movf	??___ftmul,w
  8095  0760  07E1               	addwf	___ftmul@exp,f
  8096  0761  0857               	movf	___ftmul@f1,w
  8097  0762  00DD               	movwf	??___ftmul
  8098  0763  0858               	movf	___ftmul@f1+1,w
  8099  0764  00DE               	movwf	??___ftmul+1
  8100  0765  0859               	movf	___ftmul@f1+2,w
  8101  0766  00DF               	movwf	??___ftmul+2
  8102  0767  3010               	movlw	16
  8103  0768                     u2915:	
  8104  0768  36DF               	lsrf	??___ftmul+2,f
  8105  0769  0CDE               	rrf	??___ftmul+1,f
  8106  076A  0CDD               	rrf	??___ftmul,f
  8107  076B  0B89               	decfsz	9,f
  8108  076C  2F68               	goto	u2915
  8109  076D  085D               	movf	??___ftmul,w
  8110  076E  00E0               	movwf	??___ftmul+3
  8111  076F  0860               	movf	??___ftmul+3,w
  8112  0770  00E6               	movwf	___ftmul@sign
  8113  0771  085A               	movf	___ftmul@f2,w
  8114  0772  00DD               	movwf	??___ftmul
  8115  0773  085B               	movf	___ftmul@f2+1,w
  8116  0774  00DE               	movwf	??___ftmul+1
  8117  0775  085C               	movf	___ftmul@f2+2,w
  8118  0776  00DF               	movwf	??___ftmul+2
  8119  0777  3010               	movlw	16
  8120  0778                     u2925:	
  8121  0778  36DF               	lsrf	??___ftmul+2,f
  8122  0779  0CDE               	rrf	??___ftmul+1,f
  8123  077A  0CDD               	rrf	??___ftmul,f
  8124  077B  0B89               	decfsz	9,f
  8125  077C  2F78               	goto	u2925
  8126  077D  085D               	movf	??___ftmul,w
  8127  077E  00E0               	movwf	??___ftmul+3
  8128  077F  0860               	movf	??___ftmul+3,w
  8129  0780  06E6               	xorwf	___ftmul@sign,f
  8130  0781  3080               	movlw	128
  8131  0782  00DD               	movwf	??___ftmul
  8132  0783  085D               	movf	??___ftmul,w
  8133  0784  05E6               	andwf	___ftmul@sign,f
  8134  0785  17D8               	bsf	___ftmul@f1+1,7
  8135  0786  17DB               	bsf	___ftmul@f2+1,7
  8136  0787  30FF               	movlw	255
  8137  0788  05DA               	andwf	___ftmul@f2,f
  8138  0789  30FF               	movlw	255
  8139  078A  05DB               	andwf	___ftmul@f2+1,f
  8140  078B  3000               	movlw	0
  8141  078C  05DC               	andwf	___ftmul@f2+2,f
  8142  078D  3000               	movlw	0
  8143  078E  00E2               	movwf	___ftmul@f3_as_product
  8144  078F  3000               	movlw	0
  8145  0790  00E3               	movwf	___ftmul@f3_as_product+1
  8146  0791  3000               	movlw	0
  8147  0792  00E4               	movwf	___ftmul@f3_as_product+2
  8148  0793  3007               	movlw	7
  8149  0794  00DD               	movwf	??___ftmul
  8150  0795  085D               	movf	??___ftmul,w
  8151  0796  00E5               	movwf	___ftmul@cntr
  8152  0797                     l2787:	
  8153  0797  1C57               	btfss	___ftmul@f1,0
  8154  0798  2F9F               	goto	l2791
  8155  0799  085A               	movf	___ftmul@f2,w
  8156  079A  07E2               	addwf	___ftmul@f3_as_product,f
  8157  079B  085B               	movf	___ftmul@f2+1,w
  8158  079C  3DE3               	addwfc	___ftmul@f3_as_product+1,f
  8159  079D  085C               	movf	___ftmul@f2+2,w
  8160  079E  3DE4               	addwfc	___ftmul@f3_as_product+2,f
  8161  079F                     l2791:	
  8162  079F  3001               	movlw	1
  8163  07A0                     u2945:	
  8164  07A0  36D9               	lsrf	___ftmul@f1+2,f
  8165  07A1  0CD8               	rrf	___ftmul@f1+1,f
  8166  07A2  0CD7               	rrf	___ftmul@f1,f
  8167  07A3  0B89               	decfsz	9,f
  8168  07A4  2FA0               	goto	u2945
  8169  07A5  3001               	movlw	1
  8170  07A6                     u2955:	
  8171  07A6  35DA               	lslf	___ftmul@f2,f
  8172  07A7  0DDB               	rlf	___ftmul@f2+1,f
  8173  07A8  0DDC               	rlf	___ftmul@f2+2,f
  8174  07A9  0B89               	decfsz	9,f
  8175  07AA  2FA6               	goto	u2955
  8176  07AB  3001               	movlw	1
  8177  07AC  02E5               	subwf	___ftmul@cntr,f
  8178  07AD  1D03               	btfss	3,2
  8179  07AE  2F97               	goto	l2787
  8180  07AF  3009               	movlw	9
  8181  07B0  00DD               	movwf	??___ftmul
  8182  07B1  085D               	movf	??___ftmul,w
  8183  07B2  00E5               	movwf	___ftmul@cntr
  8184  07B3                     l2799:	
  8185  07B3  1C57               	btfss	___ftmul@f1,0
  8186  07B4  2FBB               	goto	l2803
  8187  07B5  085A               	movf	___ftmul@f2,w
  8188  07B6  07E2               	addwf	___ftmul@f3_as_product,f
  8189  07B7  085B               	movf	___ftmul@f2+1,w
  8190  07B8  3DE3               	addwfc	___ftmul@f3_as_product+1,f
  8191  07B9  085C               	movf	___ftmul@f2+2,w
  8192  07BA  3DE4               	addwfc	___ftmul@f3_as_product+2,f
  8193  07BB                     l2803:	
  8194  07BB  3001               	movlw	1
  8195  07BC                     u2985:	
  8196  07BC  36D9               	lsrf	___ftmul@f1+2,f
  8197  07BD  0CD8               	rrf	___ftmul@f1+1,f
  8198  07BE  0CD7               	rrf	___ftmul@f1,f
  8199  07BF  0B89               	decfsz	9,f
  8200  07C0  2FBC               	goto	u2985
  8201  07C1  3001               	movlw	1
  8202  07C2                     u2995:	
  8203  07C2  36E4               	lsrf	___ftmul@f3_as_product+2,f
  8204  07C3  0CE3               	rrf	___ftmul@f3_as_product+1,f
  8205  07C4  0CE2               	rrf	___ftmul@f3_as_product,f
  8206  07C5  0B89               	decfsz	9,f
  8207  07C6  2FC2               	goto	u2995
  8208  07C7  3001               	movlw	1
  8209  07C8  02E5               	subwf	___ftmul@cntr,f
  8210  07C9  1D03               	btfss	3,2
  8211  07CA  2FB3               	goto	l2799
  8212  07CB  0862               	movf	___ftmul@f3_as_product,w
  8213  07CC  00A0               	movwf	___ftpack@arg
  8214  07CD  0863               	movf	___ftmul@f3_as_product+1,w
  8215  07CE  00A1               	movwf	___ftpack@arg+1
  8216  07CF  0864               	movf	___ftmul@f3_as_product+2,w
  8217  07D0  00A2               	movwf	___ftpack@arg+2
  8218  07D1  0861               	movf	___ftmul@exp,w
  8219  07D2  00DD               	movwf	??___ftmul
  8220  07D3  085D               	movf	??___ftmul,w
  8221  07D4  00A3               	movwf	___ftpack@exp
  8222  07D5  0866               	movf	___ftmul@sign,w
  8223  07D6  00DE               	movwf	??___ftmul+1
  8224  07D7  085E               	movf	??___ftmul+1,w
  8225  07D8  00A4               	movwf	___ftpack@sign
  8226  07D9  318A  22A8         	fcall	___ftpack
  8227  07DB  0020               	movlb	0	; select bank0
  8228  07DC  0820               	movf	?___ftpack,w
  8229  07DD  00D7               	movwf	?___ftmul
  8230  07DE  0821               	movf	?___ftpack+1,w
  8231  07DF  00D8               	movwf	?___ftmul+1
  8232  07E0  0822               	movf	?___ftpack+2,w
  8233  07E1  00D9               	movwf	?___ftmul+2
  8234  07E2  0008               	return
  8235  07E3                     __end_of___ftmul:	
  8236                           
  8237                           	psect	text33
  8238  08A7                     __ptext33:	
  8239 ;; *************** function ___ftge *****************
  8240 ;; Defined at:
  8241 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\ftge.c"
  8242 ;; Parameters:    Size  Location     Type
  8243 ;;  ff1             3    0[BANK0 ] float 
  8244 ;;  ff2             3    3[BANK0 ] float 
  8245 ;; Auto vars:     Size  Location     Type
  8246 ;;		None
  8247 ;; Return value:  Size  Location     Type
  8248 ;;		None               void
  8249 ;; Registers used:
  8250 ;;		wreg, status,2, status,0
  8251 ;; Tracked objects:
  8252 ;;		On entry : 0/0
  8253 ;;		On exit  : 0/0
  8254 ;;		Unchanged: 0/0
  8255 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8256 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8257 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8258 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8259 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8260 ;;Total ram usage:        9 bytes
  8261 ;; Hardware stack levels used:    1
  8262 ;; Hardware stack levels required when called:    7
  8263 ;; This function calls:
  8264 ;;		Nothing
  8265 ;; This function is called by:
  8266 ;;		_ftoa
  8267 ;; This function uses a non-reentrant model
  8268 ;;
  8269                           
  8270                           
  8271                           ;psect for function ___ftge
  8272  08A7                     ___ftge:	
  8273                           
  8274                           ;incstack = 0
  8275                           ; Regs used in ___ftge: [wreg+status,2+status,0]
  8276  08A7  0020               	movlb	0	; select bank0
  8277  08A8  1FA2               	btfss	___ftge@ff1+2,7
  8278  08A9  28BE               	goto	l2747
  8279  08AA  0920               	comf	___ftge@ff1,w
  8280  08AB  00A6               	movwf	??___ftge
  8281  08AC  0921               	comf	___ftge@ff1+1,w
  8282  08AD  00A7               	movwf	??___ftge+1
  8283  08AE  0922               	comf	___ftge@ff1+2,w
  8284  08AF  00A8               	movwf	??___ftge+2
  8285  08B0  0AA6               	incf	??___ftge,f
  8286  08B1  1903               	skipnz
  8287  08B2  0AA7               	incf	??___ftge+1,f
  8288  08B3  1903               	skipnz
  8289  08B4  0AA8               	incf	??___ftge+2,f
  8290  08B5  3000               	movlw	0
  8291  08B6  0726               	addwf	??___ftge,w
  8292  08B7  00A0               	movwf	___ftge@ff1
  8293  08B8  3000               	movlw	0
  8294  08B9  3D27               	addwfc	??___ftge+1,w
  8295  08BA  00A1               	movwf	___ftge@ff1+1
  8296  08BB  3080               	movlw	128
  8297  08BC  3D28               	addwfc	??___ftge+2,w
  8298  08BD  00A2               	movwf	___ftge@ff1+2
  8299  08BE                     l2747:	
  8300  08BE  1FA5               	btfss	___ftge@ff2+2,7
  8301  08BF  28D4               	goto	l2751
  8302  08C0  0923               	comf	___ftge@ff2,w
  8303  08C1  00A6               	movwf	??___ftge
  8304  08C2  0924               	comf	___ftge@ff2+1,w
  8305  08C3  00A7               	movwf	??___ftge+1
  8306  08C4  0925               	comf	___ftge@ff2+2,w
  8307  08C5  00A8               	movwf	??___ftge+2
  8308  08C6  0AA6               	incf	??___ftge,f
  8309  08C7  1903               	skipnz
  8310  08C8  0AA7               	incf	??___ftge+1,f
  8311  08C9  1903               	skipnz
  8312  08CA  0AA8               	incf	??___ftge+2,f
  8313  08CB  3000               	movlw	0
  8314  08CC  0726               	addwf	??___ftge,w
  8315  08CD  00A3               	movwf	___ftge@ff2
  8316  08CE  3000               	movlw	0
  8317  08CF  3D27               	addwfc	??___ftge+1,w
  8318  08D0  00A4               	movwf	___ftge@ff2+1
  8319  08D1  3080               	movlw	128
  8320  08D2  3D28               	addwfc	??___ftge+2,w
  8321  08D3  00A5               	movwf	___ftge@ff2+2
  8322  08D4                     l2751:	
  8323  08D4  3080               	movlw	128
  8324  08D5  06A2               	xorwf	___ftge@ff1+2,f
  8325  08D6  3080               	movlw	128
  8326  08D7  06A5               	xorwf	___ftge@ff2+2,f
  8327  08D8  0825               	movf	___ftge@ff2+2,w
  8328  08D9  0222               	subwf	___ftge@ff1+2,w
  8329  08DA  1D03               	skipz
  8330  08DB  0008               	return
  8331  08DC  0824               	movf	___ftge@ff2+1,w
  8332  08DD  0221               	subwf	___ftge@ff1+1,w
  8333  08DE  1D03               	skipz
  8334  08DF  0008               	return
  8335  08E0  0823               	movf	___ftge@ff2,w
  8336  08E1  0220               	subwf	___ftge@ff1,w
  8337  08E2  0008               	return
  8338  08E3                     __end_of___ftge:	
  8339                           
  8340                           	psect	text34
  8341  0CC9                     __ptext34:	
  8342 ;; *************** function _getADCValue *****************
  8343 ;; Defined at:
  8344 ;;		line 36 in file "main.c"
  8345 ;; Parameters:    Size  Location     Type
  8346 ;;  channel         1    wreg     unsigned char 
  8347 ;; Auto vars:     Size  Location     Type
  8348 ;;  channel         1   51[BANK0 ] unsigned char 
  8349 ;;  adcSum          3   52[BANK0 ] float 
  8350 ;;  adcLoop         2   49[BANK0 ] unsigned int 
  8351 ;; Return value:  Size  Location     Type
  8352 ;;                  3   43[BANK0 ] float 
  8353 ;; Registers used:
  8354 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8355 ;; Tracked objects:
  8356 ;;		On entry : 0/0
  8357 ;;		On exit  : 0/0
  8358 ;;		Unchanged: 0/0
  8359 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8360 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8361 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8362 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8363 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8364 ;;Total ram usage:       12 bytes
  8365 ;; Hardware stack levels used:    1
  8366 ;; Hardware stack levels required when called:    9
  8367 ;; This function calls:
  8368 ;;		___awtoft
  8369 ;;		___ftadd
  8370 ;;		___ftdiv
  8371 ;;		_doWDTSleep
  8372 ;; This function is called by:
  8373 ;;		_loop
  8374 ;; This function uses a non-reentrant model
  8375 ;;
  8376                           
  8377                           
  8378                           ;psect for function _getADCValue
  8379  0CC9                     _getADCValue:	
  8380                           
  8381                           ;incstack = 0
  8382                           ; Regs used in _getADCValue: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8383                           ;getADCValue@channel stored from wreg
  8384  0CC9  0020               	movlb	0	; select bank0
  8385  0CCA  00D3               	movwf	getADCValue@channel
  8386                           
  8387                           ;main.c: 39: float adcSum = 0;
  8388  0CCB  3000               	movlw	0
  8389  0CCC  00D4               	movwf	getADCValue@adcSum
  8390  0CCD  3000               	movlw	0
  8391  0CCE  00D5               	movwf	getADCValue@adcSum+1
  8392  0CCF  3000               	movlw	0
  8393  0CD0  00D6               	movwf	getADCValue@adcSum+2
  8394                           
  8395                           ;main.c: 40: unsigned int adcLoop = 1000;
  8396  0CD1  30E8               	movlw	232
  8397  0CD2  00D1               	movwf	getADCValue@adcLoop
  8398  0CD3  3003               	movlw	3
  8399  0CD4  00D2               	movwf	getADCValue@adcLoop+1
  8400                           
  8401                           ;main.c: 42: ADCON0bits.CHS = channel;
  8402  0CD5  0853               	movf	getADCValue@channel,w
  8403  0CD6  00CE               	movwf	??_getADCValue
  8404  0CD7  0DCE               	rlf	??_getADCValue,f
  8405  0CD8  0DCE               	rlf	??_getADCValue,f
  8406  0CD9  0021               	movlb	1	; select bank1
  8407  0CDA  081D               	movf	29,w	;volatile
  8408  0CDB  0020               	movlb	0	; select bank0
  8409  0CDC  064E               	xorwf	??_getADCValue,w
  8410  0CDD  3903               	andlw	-253
  8411  0CDE  064E               	xorwf	??_getADCValue,w
  8412  0CDF  0021               	movlb	1	; select bank1
  8413  0CE0  009D               	movwf	29	;volatile
  8414                           
  8415                           ;main.c: 43: FVRCONbits.FVREN = 1;
  8416  0CE1  0022               	movlb	2	; select bank2
  8417  0CE2  1797               	bsf	23,7	;volatile
  8418                           
  8419                           ;main.c: 44: ADCON0bits.ADON = 1;
  8420  0CE3  0021               	movlb	1	; select bank1
  8421  0CE4  141D               	bsf	29,0	;volatile
  8422                           
  8423                           ;main.c: 46: doWDTSleep(0b00000);
  8424  0CE5  3000               	movlw	0
  8425  0CE6  3195  257C  318C   	fcall	_doWDTSleep
  8426  0CE9                     l3099:	
  8427                           ;main.c: 48: while (adcLoop--){
  8428                           
  8429  0CE9  3001               	movlw	1
  8430  0CEA  0020               	movlb	0	; select bank0
  8431  0CEB  02D1               	subwf	getADCValue@adcLoop,f
  8432  0CEC  3000               	movlw	0
  8433  0CED  3BD2               	subwfb	getADCValue@adcLoop+1,f
  8434  0CEE  0A51               	incf	getADCValue@adcLoop,w
  8435  0CEF  1903               	btfsc	3,2
  8436  0CF0  0A52               	incf	getADCValue@adcLoop+1,w
  8437  0CF1  1903               	btfsc	3,2
  8438  0CF2  2D26               	goto	l174
  8439                           
  8440                           ;main.c: 50: ADCON0bits.ADGO = 1;
  8441  0CF3  0021               	movlb	1	; select bank1
  8442  0CF4  149D               	bsf	29,1	;volatile
  8443  0CF5                     l3095:	
  8444                           ;main.c: 52: while (ADCON0bits.ADGO){
  8445                           
  8446  0CF5  0021               	movlb	1	; select bank1
  8447  0CF6  1C9D               	btfss	29,1	;volatile
  8448  0CF7  2CFD               	goto	l3097
  8449                           
  8450                           ;main.c: 53: doWDTSleep(0b00000);
  8451  0CF8  3000               	movlw	0
  8452  0CF9  3195  257C  318C   	fcall	_doWDTSleep
  8453  0CFC  2CF5               	goto	l3095
  8454  0CFD                     l3097:	
  8455                           
  8456                           ;main.c: 54: };main.c: 56: adcSum+= (ADRESL | (ADRESH << 8));
  8457  0CFD  081C               	movf	28,w	;volatile
  8458  0CFE  0020               	movlb	0	; select bank0
  8459  0CFF  00CE               	movwf	??_getADCValue
  8460  0D00  01CF               	clrf	??_getADCValue+1
  8461  0D01  084E               	movf	??_getADCValue,w
  8462  0D02  00CF               	movwf	??_getADCValue+1
  8463  0D03  01CE               	clrf	??_getADCValue
  8464  0D04  084E               	movf	??_getADCValue,w
  8465  0D05  0021               	movlb	1	; select bank1
  8466  0D06  041B               	iorwf	27,w	;volatile
  8467  0D07  0020               	movlb	0	; select bank0
  8468  0D08  00A8               	movwf	___awtoft@c
  8469  0D09  084F               	movf	??_getADCValue+1,w
  8470  0D0A  00A9               	movwf	___awtoft@c+1
  8471  0D0B  3196  26E9  318C   	fcall	___awtoft
  8472  0D0E  0020               	movlb	0	; select bank0
  8473  0D0F  0828               	movf	?___awtoft,w
  8474  0D10  00AE               	movwf	___ftadd@f1
  8475  0D11  0829               	movf	?___awtoft+1,w
  8476  0D12  00AF               	movwf	___ftadd@f1+1
  8477  0D13  082A               	movf	?___awtoft+2,w
  8478  0D14  00B0               	movwf	___ftadd@f1+2
  8479  0D15  0854               	movf	getADCValue@adcSum,w
  8480  0D16  00B1               	movwf	___ftadd@f2
  8481  0D17  0855               	movf	getADCValue@adcSum+1,w
  8482  0D18  00B2               	movwf	___ftadd@f2+1
  8483  0D19  0856               	movf	getADCValue@adcSum+2,w
  8484  0D1A  00B3               	movwf	___ftadd@f2+2
  8485  0D1B  318F  270A  318C   	fcall	___ftadd
  8486  0D1E  0020               	movlb	0	; select bank0
  8487  0D1F  082E               	movf	?___ftadd,w
  8488  0D20  00D4               	movwf	getADCValue@adcSum
  8489  0D21  082F               	movf	?___ftadd+1,w
  8490  0D22  00D5               	movwf	getADCValue@adcSum+1
  8491  0D23  0830               	movf	?___ftadd+2,w
  8492  0D24  00D6               	movwf	getADCValue@adcSum+2
  8493  0D25  2CE9               	goto	l3099
  8494  0D26                     l174:	
  8495                           
  8496                           ;main.c: 58: };main.c: 60: FVRCONbits.FVREN = 0;
  8497  0D26  0022               	movlb	2	; select bank2
  8498  0D27  1397               	bcf	23,7	;volatile
  8499                           
  8500                           ;main.c: 61: ADCON0bits.ADON = 0;
  8501  0D28  0021               	movlb	1	; select bank1
  8502  0D29  101D               	bcf	29,0	;volatile
  8503                           
  8504                           ;main.c: 64: adcSum/= 1000;
  8505  0D2A  3000               	movlw	0
  8506  0D2B  0020               	movlb	0	; select bank0
  8507  0D2C  00BB               	movwf	___ftdiv@f2
  8508  0D2D  307A               	movlw	122
  8509  0D2E  00BC               	movwf	___ftdiv@f2+1
  8510  0D2F  3044               	movlw	68
  8511  0D30  00BD               	movwf	___ftdiv@f2+2
  8512  0D31  0854               	movf	getADCValue@adcSum,w
  8513  0D32  00BE               	movwf	___ftdiv@f1
  8514  0D33  0855               	movf	getADCValue@adcSum+1,w
  8515  0D34  00BF               	movwf	___ftdiv@f1+1
  8516  0D35  0856               	movf	getADCValue@adcSum+2,w
  8517  0D36  00C0               	movwf	___ftdiv@f1+2
  8518  0D37  318D  256F  318C   	fcall	___ftdiv
  8519  0D3A  0020               	movlb	0	; select bank0
  8520  0D3B  083B               	movf	?___ftdiv,w
  8521  0D3C  00D4               	movwf	getADCValue@adcSum
  8522  0D3D  083C               	movf	?___ftdiv+1,w
  8523  0D3E  00D5               	movwf	getADCValue@adcSum+1
  8524  0D3F  083D               	movf	?___ftdiv+2,w
  8525  0D40  00D6               	movwf	getADCValue@adcSum+2
  8526                           
  8527                           ;main.c: 67: if (ADCON1bits.ADPREF == 0b11){
  8528  0D41  0021               	movlb	1	; select bank1
  8529  0D42  081E               	movf	30,w	;volatile
  8530  0D43  3903               	andlw	3
  8531  0D44  3A03               	xorlw	3
  8532  0D45  1903               	btfsc	3,2
  8533  0D46  2D60               	goto	l3111
  8534  0D47  2D67               	goto	l3113
  8535  0D48                     l3107:	
  8536                           ;main.c: 69: case 0b10:
  8537                           
  8538                           ;main.c: 68: switch (FVRCONbits.ADFVR){
  8539                           
  8540                           
  8541                           ;main.c: 70: adcSum/= 500;
  8542  0D48  3000               	movlw	0
  8543  0D49  0020               	movlb	0	; select bank0
  8544  0D4A  00BB               	movwf	___ftdiv@f2
  8545  0D4B  30FA               	movlw	250
  8546  0D4C  00BC               	movwf	___ftdiv@f2+1
  8547  0D4D  3043               	movlw	67
  8548  0D4E  00BD               	movwf	___ftdiv@f2+2
  8549  0D4F  0854               	movf	getADCValue@adcSum,w
  8550  0D50  00BE               	movwf	___ftdiv@f1
  8551  0D51  0855               	movf	getADCValue@adcSum+1,w
  8552  0D52  00BF               	movwf	___ftdiv@f1+1
  8553  0D53  0856               	movf	getADCValue@adcSum+2,w
  8554  0D54  00C0               	movwf	___ftdiv@f1+2
  8555  0D55  318D  256F  318C   	fcall	___ftdiv
  8556  0D58  0020               	movlb	0	; select bank0
  8557  0D59  083B               	movf	?___ftdiv,w
  8558  0D5A  00D4               	movwf	getADCValue@adcSum
  8559  0D5B  083C               	movf	?___ftdiv+1,w
  8560  0D5C  00D5               	movwf	getADCValue@adcSum+1
  8561  0D5D  083D               	movf	?___ftdiv+2,w
  8562  0D5E  00D6               	movwf	getADCValue@adcSum+2
  8563                           
  8564                           ;main.c: 72: }
  8565                           
  8566                           ;main.c: 71: break;
  8567  0D5F  2D67               	goto	l3113
  8568  0D60                     l3111:	
  8569  0D60  0022               	movlb	2	; select bank2
  8570  0D61  0817               	movf	23,w	;volatile
  8571  0D62  3903               	andlw	3
  8572                           
  8573                           ; Switch size 1, requested type "space"
  8574                           ; Number of cases is 1, Range of values is 2 to 2
  8575                           ; switch strategies available:
  8576                           ; Name         Instructions Cycles
  8577                           ; simple_byte            4     3 (average)
  8578                           ; direct_byte           11     9 (fixed)
  8579                           ; jumptable            263     9 (fixed)
  8580                           ;	Chosen strategy is simple_byte
  8581  0D63  3A02               	xorlw	2	; case 2
  8582  0D64  1903               	skipnz
  8583  0D65  2D48               	goto	l3107
  8584  0D66  2D67               	goto	l3113
  8585  0D67                     l3113:	
  8586                           
  8587                           ;main.c: 73: };main.c: 76: return adcSum;
  8588  0D67  0020               	movlb	0	; select bank0
  8589  0D68  0854               	movf	getADCValue@adcSum,w
  8590  0D69  00CB               	movwf	?_getADCValue
  8591  0D6A  0855               	movf	getADCValue@adcSum+1,w
  8592  0D6B  00CC               	movwf	?_getADCValue+1
  8593  0D6C  0856               	movf	getADCValue@adcSum+2,w
  8594  0D6D  00CD               	movwf	?_getADCValue+2
  8595  0D6E  0008               	return
  8596  0D6F                     __end_of_getADCValue:	
  8597                           
  8598                           	psect	text35
  8599  157C                     __ptext35:	
  8600 ;; *************** function _doWDTSleep *****************
  8601 ;; Defined at:
  8602 ;;		line 22 in file "main.c"
  8603 ;; Parameters:    Size  Location     Type
  8604 ;;  wdtps           1    wreg     unsigned char 
  8605 ;; Auto vars:     Size  Location     Type
  8606 ;;  wdtps           1    1[BANK0 ] unsigned char 
  8607 ;; Return value:  Size  Location     Type
  8608 ;;                  1    wreg      void 
  8609 ;; Registers used:
  8610 ;;		wreg, status,2, status,0
  8611 ;; Tracked objects:
  8612 ;;		On entry : 0/0
  8613 ;;		On exit  : 0/0
  8614 ;;		Unchanged: 0/0
  8615 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8616 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8617 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8618 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8619 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8620 ;;Total ram usage:        2 bytes
  8621 ;; Hardware stack levels used:    1
  8622 ;; Hardware stack levels required when called:    7
  8623 ;; This function calls:
  8624 ;;		Nothing
  8625 ;; This function is called by:
  8626 ;;		_getADCValue
  8627 ;;		_sleep
  8628 ;; This function uses a non-reentrant model
  8629 ;;
  8630                           
  8631                           
  8632                           ;psect for function _doWDTSleep
  8633  157C                     _doWDTSleep:	
  8634                           
  8635                           ;incstack = 0
  8636                           ; Regs used in _doWDTSleep: [wreg+status,2+status,0]
  8637                           ;doWDTSleep@wdtps stored from wreg
  8638  157C  0020               	movlb	0	; select bank0
  8639  157D  00A1               	movwf	doWDTSleep@wdtps
  8640                           
  8641                           ;main.c: 25: WDTCONbits.WDTPS = wdtps;
  8642  157E  0821               	movf	doWDTSleep@wdtps,w
  8643  157F  00A0               	movwf	??_doWDTSleep
  8644  1580  0DA0               	rlf	??_doWDTSleep,f
  8645  1581  0021               	movlb	1	; select bank1
  8646  1582  0817               	movf	23,w	;volatile
  8647  1583  0020               	movlb	0	; select bank0
  8648  1584  0620               	xorwf	??_doWDTSleep,w
  8649  1585  39C1               	andlw	-63
  8650  1586  0620               	xorwf	??_doWDTSleep,w
  8651  1587  0021               	movlb	1	; select bank1
  8652  1588  0097               	movwf	23	;volatile
  8653  1589  0063               	sleep	;# 
  8654                           
  8655                           ;main.c: 29: __nop();
  8656  158A  0000               	nop
  8657                           
  8658                           ;main.c: 30: __nop();
  8659  158B  0000               	nop
  8660                           
  8661                           ;main.c: 32: WDTCONbits.WDTPS = 0b01101;
  8662  158C  0021               	movlb	1	; select bank1
  8663  158D  0817               	movf	23,w	;volatile
  8664  158E  39C1               	andlw	-63
  8665  158F  381A               	iorlw	26
  8666  1590  0097               	movwf	23	;volatile
  8667  1591  0064               	clrwdt	;# 
  8668  1592  0008               	return
  8669  1593                     __end_of_doWDTSleep:	
  8670                           
  8671                           	psect	text36
  8672  0D6F                     __ptext36:	
  8673 ;; *************** function ___ftdiv *****************
  8674 ;; Defined at:
  8675 ;;		line 56 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\ftdiv.c"
  8676 ;; Parameters:    Size  Location     Type
  8677 ;;  f2              3   27[BANK0 ] float 
  8678 ;;  f1              3   30[BANK0 ] float 
  8679 ;; Auto vars:     Size  Location     Type
  8680 ;;  f3              3   38[BANK0 ] float 
  8681 ;;  sign            1   42[BANK0 ] unsigned char 
  8682 ;;  exp             1   41[BANK0 ] unsigned char 
  8683 ;;  cntr            1   37[BANK0 ] unsigned char 
  8684 ;; Return value:  Size  Location     Type
  8685 ;;                  3   27[BANK0 ] float 
  8686 ;; Registers used:
  8687 ;;		wreg, status,2, status,0, pclath, cstack
  8688 ;; Tracked objects:
  8689 ;;		On entry : 0/0
  8690 ;;		On exit  : 0/0
  8691 ;;		Unchanged: 0/0
  8692 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8693 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8694 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8695 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8696 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8697 ;;Total ram usage:       16 bytes
  8698 ;; Hardware stack levels used:    1
  8699 ;; Hardware stack levels required when called:    8
  8700 ;; This function calls:
  8701 ;;		___ftpack
  8702 ;; This function is called by:
  8703 ;;		_getADCValue
  8704 ;;		_loop
  8705 ;; This function uses a non-reentrant model
  8706 ;;
  8707                           
  8708                           
  8709                           ;psect for function ___ftdiv
  8710  0D6F                     ___ftdiv:	
  8711                           
  8712                           ;incstack = 0
  8713                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
  8714  0D6F  0020               	movlb	0	; select bank0
  8715  0D70  083E               	movf	___ftdiv@f1,w
  8716  0D71  00C1               	movwf	??___ftdiv
  8717  0D72  083F               	movf	___ftdiv@f1+1,w
  8718  0D73  00C2               	movwf	??___ftdiv+1
  8719  0D74  0840               	movf	___ftdiv@f1+2,w
  8720  0D75  00C3               	movwf	??___ftdiv+2
  8721  0D76  1003               	clrc
  8722  0D77  0D42               	rlf	??___ftdiv+1,w
  8723  0D78  0D43               	rlf	??___ftdiv+2,w
  8724  0D79  00C4               	movwf	??___ftdiv+3
  8725  0D7A  0844               	movf	??___ftdiv+3,w
  8726  0D7B  00C9               	movwf	___ftdiv@exp
  8727  0D7C  0849               	movf	___ftdiv@exp,w
  8728  0D7D  1D03               	btfss	3,2
  8729  0D7E  2D86               	goto	l2989
  8730  0D7F  3000               	movlw	0
  8731  0D80  00BB               	movwf	?___ftdiv
  8732  0D81  3000               	movlw	0
  8733  0D82  00BC               	movwf	?___ftdiv+1
  8734  0D83  3000               	movlw	0
  8735  0D84  00BD               	movwf	?___ftdiv+2
  8736  0D85  0008               	return
  8737  0D86                     l2989:	
  8738  0D86  083B               	movf	___ftdiv@f2,w
  8739  0D87  00C1               	movwf	??___ftdiv
  8740  0D88  083C               	movf	___ftdiv@f2+1,w
  8741  0D89  00C2               	movwf	??___ftdiv+1
  8742  0D8A  083D               	movf	___ftdiv@f2+2,w
  8743  0D8B  00C3               	movwf	??___ftdiv+2
  8744  0D8C  1003               	clrc
  8745  0D8D  0D42               	rlf	??___ftdiv+1,w
  8746  0D8E  0D43               	rlf	??___ftdiv+2,w
  8747  0D8F  00C4               	movwf	??___ftdiv+3
  8748  0D90  0844               	movf	??___ftdiv+3,w
  8749  0D91  00CA               	movwf	___ftdiv@sign
  8750  0D92  084A               	movf	___ftdiv@sign,w
  8751  0D93  1D03               	btfss	3,2
  8752  0D94  2D9C               	goto	l2995
  8753  0D95  3000               	movlw	0
  8754  0D96  00BB               	movwf	?___ftdiv
  8755  0D97  3000               	movlw	0
  8756  0D98  00BC               	movwf	?___ftdiv+1
  8757  0D99  3000               	movlw	0
  8758  0D9A  00BD               	movwf	?___ftdiv+2
  8759  0D9B  0008               	return
  8760  0D9C                     l2995:	
  8761  0D9C  3000               	movlw	0
  8762  0D9D  00C6               	movwf	___ftdiv@f3
  8763  0D9E  3000               	movlw	0
  8764  0D9F  00C7               	movwf	___ftdiv@f3+1
  8765  0DA0  3000               	movlw	0
  8766  0DA1  00C8               	movwf	___ftdiv@f3+2
  8767  0DA2  3089               	movlw	137
  8768  0DA3  074A               	addwf	___ftdiv@sign,w
  8769  0DA4  00C1               	movwf	??___ftdiv
  8770  0DA5  0841               	movf	??___ftdiv,w
  8771  0DA6  02C9               	subwf	___ftdiv@exp,f
  8772  0DA7  083E               	movf	___ftdiv@f1,w
  8773  0DA8  00C1               	movwf	??___ftdiv
  8774  0DA9  083F               	movf	___ftdiv@f1+1,w
  8775  0DAA  00C2               	movwf	??___ftdiv+1
  8776  0DAB  0840               	movf	___ftdiv@f1+2,w
  8777  0DAC  00C3               	movwf	??___ftdiv+2
  8778  0DAD  3010               	movlw	16
  8779  0DAE                     u3255:	
  8780  0DAE  36C3               	lsrf	??___ftdiv+2,f
  8781  0DAF  0CC2               	rrf	??___ftdiv+1,f
  8782  0DB0  0CC1               	rrf	??___ftdiv,f
  8783  0DB1  0B89               	decfsz	9,f
  8784  0DB2  2DAE               	goto	u3255
  8785  0DB3  0841               	movf	??___ftdiv,w
  8786  0DB4  00C4               	movwf	??___ftdiv+3
  8787  0DB5  0844               	movf	??___ftdiv+3,w
  8788  0DB6  00CA               	movwf	___ftdiv@sign
  8789  0DB7  083B               	movf	___ftdiv@f2,w
  8790  0DB8  00C1               	movwf	??___ftdiv
  8791  0DB9  083C               	movf	___ftdiv@f2+1,w
  8792  0DBA  00C2               	movwf	??___ftdiv+1
  8793  0DBB  083D               	movf	___ftdiv@f2+2,w
  8794  0DBC  00C3               	movwf	??___ftdiv+2
  8795  0DBD  3010               	movlw	16
  8796  0DBE                     u3265:	
  8797  0DBE  36C3               	lsrf	??___ftdiv+2,f
  8798  0DBF  0CC2               	rrf	??___ftdiv+1,f
  8799  0DC0  0CC1               	rrf	??___ftdiv,f
  8800  0DC1  0B89               	decfsz	9,f
  8801  0DC2  2DBE               	goto	u3265
  8802  0DC3  0841               	movf	??___ftdiv,w
  8803  0DC4  00C4               	movwf	??___ftdiv+3
  8804  0DC5  0844               	movf	??___ftdiv+3,w
  8805  0DC6  06CA               	xorwf	___ftdiv@sign,f
  8806  0DC7  3080               	movlw	128
  8807  0DC8  00C1               	movwf	??___ftdiv
  8808  0DC9  0841               	movf	??___ftdiv,w
  8809  0DCA  05CA               	andwf	___ftdiv@sign,f
  8810  0DCB  17BF               	bsf	___ftdiv@f1+1,7
  8811  0DCC  30FF               	movlw	255
  8812  0DCD  05BE               	andwf	___ftdiv@f1,f
  8813  0DCE  30FF               	movlw	255
  8814  0DCF  05BF               	andwf	___ftdiv@f1+1,f
  8815  0DD0  3000               	movlw	0
  8816  0DD1  05C0               	andwf	___ftdiv@f1+2,f
  8817  0DD2  17BC               	bsf	___ftdiv@f2+1,7
  8818  0DD3  30FF               	movlw	255
  8819  0DD4  05BB               	andwf	___ftdiv@f2,f
  8820  0DD5  30FF               	movlw	255
  8821  0DD6  05BC               	andwf	___ftdiv@f2+1,f
  8822  0DD7  3000               	movlw	0
  8823  0DD8  05BD               	andwf	___ftdiv@f2+2,f
  8824  0DD9  3018               	movlw	24
  8825  0DDA  00C1               	movwf	??___ftdiv
  8826  0DDB  0841               	movf	??___ftdiv,w
  8827  0DDC  00C5               	movwf	___ftdiv@cntr
  8828  0DDD                     l3009:	
  8829  0DDD  3001               	movlw	1
  8830  0DDE                     u3275:	
  8831  0DDE  35C6               	lslf	___ftdiv@f3,f
  8832  0DDF  0DC7               	rlf	___ftdiv@f3+1,f
  8833  0DE0  0DC8               	rlf	___ftdiv@f3+2,f
  8834  0DE1  0B89               	decfsz	9,f
  8835  0DE2  2DDE               	goto	u3275
  8836  0DE3  083D               	movf	___ftdiv@f2+2,w
  8837  0DE4  0240               	subwf	___ftdiv@f1+2,w
  8838  0DE5  1D03               	skipz
  8839  0DE6  2DED               	goto	u3285
  8840  0DE7  083C               	movf	___ftdiv@f2+1,w
  8841  0DE8  023F               	subwf	___ftdiv@f1+1,w
  8842  0DE9  1D03               	skipz
  8843  0DEA  2DED               	goto	u3285
  8844  0DEB  083B               	movf	___ftdiv@f2,w
  8845  0DEC  023E               	subwf	___ftdiv@f1,w
  8846  0DED                     u3285:	
  8847  0DED  1C03               	skipc
  8848  0DEE  2DF6               	goto	l3017
  8849  0DEF  083B               	movf	___ftdiv@f2,w
  8850  0DF0  02BE               	subwf	___ftdiv@f1,f
  8851  0DF1  083C               	movf	___ftdiv@f2+1,w
  8852  0DF2  3BBF               	subwfb	___ftdiv@f1+1,f
  8853  0DF3  083D               	movf	___ftdiv@f2+2,w
  8854  0DF4  3BC0               	subwfb	___ftdiv@f1+2,f
  8855  0DF5  1446               	bsf	___ftdiv@f3,0
  8856  0DF6                     l3017:	
  8857  0DF6  3001               	movlw	1
  8858  0DF7                     u3295:	
  8859  0DF7  35BE               	lslf	___ftdiv@f1,f
  8860  0DF8  0DBF               	rlf	___ftdiv@f1+1,f
  8861  0DF9  0DC0               	rlf	___ftdiv@f1+2,f
  8862  0DFA  0B89               	decfsz	9,f
  8863  0DFB  2DF7               	goto	u3295
  8864  0DFC  3001               	movlw	1
  8865  0DFD  02C5               	subwf	___ftdiv@cntr,f
  8866  0DFE  1D03               	btfss	3,2
  8867  0DFF  2DDD               	goto	l3009
  8868  0E00  0846               	movf	___ftdiv@f3,w
  8869  0E01  00A0               	movwf	___ftpack@arg
  8870  0E02  0847               	movf	___ftdiv@f3+1,w
  8871  0E03  00A1               	movwf	___ftpack@arg+1
  8872  0E04  0848               	movf	___ftdiv@f3+2,w
  8873  0E05  00A2               	movwf	___ftpack@arg+2
  8874  0E06  0849               	movf	___ftdiv@exp,w
  8875  0E07  00C1               	movwf	??___ftdiv
  8876  0E08  0841               	movf	??___ftdiv,w
  8877  0E09  00A3               	movwf	___ftpack@exp
  8878  0E0A  084A               	movf	___ftdiv@sign,w
  8879  0E0B  00C2               	movwf	??___ftdiv+1
  8880  0E0C  0842               	movf	??___ftdiv+1,w
  8881  0E0D  00A4               	movwf	___ftpack@sign
  8882  0E0E  318A  22A8         	fcall	___ftpack
  8883  0E10  0020               	movlb	0	; select bank0
  8884  0E11  0820               	movf	?___ftpack,w
  8885  0E12  00BB               	movwf	?___ftdiv
  8886  0E13  0821               	movf	?___ftpack+1,w
  8887  0E14  00BC               	movwf	?___ftdiv+1
  8888  0E15  0822               	movf	?___ftpack+2,w
  8889  0E16  00BD               	movwf	?___ftdiv+2
  8890  0E17  0008               	return
  8891  0E18                     __end_of___ftdiv:	
  8892                           
  8893                           	psect	text37
  8894  0F0A                     __ptext37:	
  8895 ;; *************** function ___ftadd *****************
  8896 ;; Defined at:
  8897 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\ftadd.c"
  8898 ;; Parameters:    Size  Location     Type
  8899 ;;  f1              3   14[BANK0 ] float 
  8900 ;;  f2              3   17[BANK0 ] float 
  8901 ;; Auto vars:     Size  Location     Type
  8902 ;;  exp1            1   26[BANK0 ] unsigned char 
  8903 ;;  exp2            1   25[BANK0 ] unsigned char 
  8904 ;;  sign            1   24[BANK0 ] unsigned char 
  8905 ;; Return value:  Size  Location     Type
  8906 ;;                  3   14[BANK0 ] float 
  8907 ;; Registers used:
  8908 ;;		wreg, status,2, status,0, pclath, cstack
  8909 ;; Tracked objects:
  8910 ;;		On entry : 0/0
  8911 ;;		On exit  : 0/0
  8912 ;;		Unchanged: 0/0
  8913 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8914 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8915 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8916 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8917 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8918 ;;Total ram usage:       13 bytes
  8919 ;; Hardware stack levels used:    1
  8920 ;; Hardware stack levels required when called:    8
  8921 ;; This function calls:
  8922 ;;		___ftpack
  8923 ;; This function is called by:
  8924 ;;		_getADCValue
  8925 ;;		_loop
  8926 ;;		___ftsub
  8927 ;; This function uses a non-reentrant model
  8928 ;;
  8929                           
  8930                           
  8931                           ;psect for function ___ftadd
  8932  0F0A                     ___ftadd:	
  8933                           
  8934                           ;incstack = 0
  8935                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
  8936  0F0A  0020               	movlb	0	; select bank0
  8937  0F0B  082E               	movf	___ftadd@f1,w
  8938  0F0C  00B4               	movwf	??___ftadd
  8939  0F0D  082F               	movf	___ftadd@f1+1,w
  8940  0F0E  00B5               	movwf	??___ftadd+1
  8941  0F0F  0830               	movf	___ftadd@f1+2,w
  8942  0F10  00B6               	movwf	??___ftadd+2
  8943  0F11  1003               	clrc
  8944  0F12  0D35               	rlf	??___ftadd+1,w
  8945  0F13  0D36               	rlf	??___ftadd+2,w
  8946  0F14  00B7               	movwf	??___ftadd+3
  8947  0F15  0837               	movf	??___ftadd+3,w
  8948  0F16  00BA               	movwf	___ftadd@exp1
  8949  0F17  0831               	movf	___ftadd@f2,w
  8950  0F18  00B4               	movwf	??___ftadd
  8951  0F19  0832               	movf	___ftadd@f2+1,w
  8952  0F1A  00B5               	movwf	??___ftadd+1
  8953  0F1B  0833               	movf	___ftadd@f2+2,w
  8954  0F1C  00B6               	movwf	??___ftadd+2
  8955  0F1D  1003               	clrc
  8956  0F1E  0D35               	rlf	??___ftadd+1,w
  8957  0F1F  0D36               	rlf	??___ftadd+2,w
  8958  0F20  00B7               	movwf	??___ftadd+3
  8959  0F21  0837               	movf	??___ftadd+3,w
  8960  0F22  00B9               	movwf	___ftadd@exp2
  8961  0F23  083A               	movf	___ftadd@exp1,w
  8962  0F24  1903               	btfsc	3,2
  8963  0F25  2F32               	goto	l2425
  8964  0F26  0839               	movf	___ftadd@exp2,w
  8965  0F27  023A               	subwf	___ftadd@exp1,w
  8966  0F28  1803               	skipnc
  8967  0F29  2F39               	goto	l2429
  8968  0F2A  033A               	decf	___ftadd@exp1,w
  8969  0F2B  3AFF               	xorlw	255
  8970  0F2C  0739               	addwf	___ftadd@exp2,w
  8971  0F2D  00B4               	movwf	??___ftadd
  8972  0F2E  3019               	movlw	25
  8973  0F2F  0234               	subwf	??___ftadd,w
  8974  0F30  1C03               	skipc
  8975  0F31  2F39               	goto	l2429
  8976  0F32                     l2425:	
  8977  0F32  0831               	movf	___ftadd@f2,w
  8978  0F33  00AE               	movwf	?___ftadd
  8979  0F34  0832               	movf	___ftadd@f2+1,w
  8980  0F35  00AF               	movwf	?___ftadd+1
  8981  0F36  0833               	movf	___ftadd@f2+2,w
  8982  0F37  00B0               	movwf	?___ftadd+2
  8983  0F38  0008               	return
  8984  0F39                     l2429:	
  8985  0F39  0839               	movf	___ftadd@exp2,w
  8986  0F3A  1903               	btfsc	3,2
  8987  0F3B  0008               	return
  8988  0F3C  083A               	movf	___ftadd@exp1,w
  8989  0F3D  0239               	subwf	___ftadd@exp2,w
  8990  0F3E  1803               	skipnc
  8991  0F3F  2F48               	goto	l2435
  8992  0F40  0339               	decf	___ftadd@exp2,w
  8993  0F41  3AFF               	xorlw	255
  8994  0F42  073A               	addwf	___ftadd@exp1,w
  8995  0F43  00B4               	movwf	??___ftadd
  8996  0F44  3019               	movlw	25
  8997  0F45  0234               	subwf	??___ftadd,w
  8998  0F46  1803               	btfsc	3,0
  8999  0F47  0008               	return
  9000  0F48                     l2435:	
  9001  0F48  3006               	movlw	6
  9002  0F49  00B4               	movwf	??___ftadd
  9003  0F4A  0834               	movf	??___ftadd,w
  9004  0F4B  00B8               	movwf	___ftadd@sign
  9005  0F4C  1BB0               	btfsc	___ftadd@f1+2,7
  9006  0F4D  17B8               	bsf	___ftadd@sign,7
  9007  0F4E  1BB3               	btfsc	___ftadd@f2+2,7
  9008  0F4F  1738               	bsf	___ftadd@sign,6
  9009  0F50  17AF               	bsf	___ftadd@f1+1,7
  9010  0F51  30FF               	movlw	255
  9011  0F52  05AE               	andwf	___ftadd@f1,f
  9012  0F53  30FF               	movlw	255
  9013  0F54  05AF               	andwf	___ftadd@f1+1,f
  9014  0F55  3000               	movlw	0
  9015  0F56  05B0               	andwf	___ftadd@f1+2,f
  9016  0F57  17B2               	bsf	___ftadd@f2+1,7
  9017  0F58  30FF               	movlw	255
  9018  0F59  05B1               	andwf	___ftadd@f2,f
  9019  0F5A  30FF               	movlw	255
  9020  0F5B  05B2               	andwf	___ftadd@f2+1,f
  9021  0F5C  3000               	movlw	0
  9022  0F5D  05B3               	andwf	___ftadd@f2+2,f
  9023  0F5E  0839               	movf	___ftadd@exp2,w
  9024  0F5F  023A               	subwf	___ftadd@exp1,w
  9025  0F60  1803               	skipnc
  9026  0F61  2F84               	goto	l2457
  9027  0F62                     l2447:	
  9028  0F62  3001               	movlw	1
  9029  0F63                     u2285:	
  9030  0F63  35B1               	lslf	___ftadd@f2,f
  9031  0F64  0DB2               	rlf	___ftadd@f2+1,f
  9032  0F65  0DB3               	rlf	___ftadd@f2+2,f
  9033  0F66  0B89               	decfsz	9,f
  9034  0F67  2F63               	goto	u2285
  9035  0F68  3001               	movlw	1
  9036  0F69  02B9               	subwf	___ftadd@exp2,f
  9037  0F6A  0839               	movf	___ftadd@exp2,w
  9038  0F6B  063A               	xorwf	___ftadd@exp1,w
  9039  0F6C  1903               	skipnz
  9040  0F6D  2F7F               	goto	l2455
  9041  0F6E  3001               	movlw	1
  9042  0F6F  02B8               	subwf	___ftadd@sign,f
  9043  0F70  0838               	movf	___ftadd@sign,w
  9044  0F71  3907               	andlw	7
  9045  0F72  1903               	btfsc	3,2
  9046  0F73  2F7F               	goto	l2455
  9047  0F74  2F62               	goto	l2447
  9048  0F75                     l2453:	
  9049  0F75  3001               	movlw	1
  9050  0F76                     u2315:	
  9051  0F76  36B0               	lsrf	___ftadd@f1+2,f
  9052  0F77  0CAF               	rrf	___ftadd@f1+1,f
  9053  0F78  0CAE               	rrf	___ftadd@f1,f
  9054  0F79  0B89               	decfsz	9,f
  9055  0F7A  2F76               	goto	u2315
  9056  0F7B  3001               	movlw	1
  9057  0F7C  00B4               	movwf	??___ftadd
  9058  0F7D  0834               	movf	??___ftadd,w
  9059  0F7E  07BA               	addwf	___ftadd@exp1,f
  9060  0F7F                     l2455:	
  9061  0F7F  083A               	movf	___ftadd@exp1,w
  9062  0F80  0639               	xorwf	___ftadd@exp2,w
  9063  0F81  1903               	btfsc	3,2
  9064  0F82  2FA9               	goto	l695
  9065  0F83  2F75               	goto	l2453
  9066  0F84                     l2457:	
  9067  0F84  083A               	movf	___ftadd@exp1,w
  9068  0F85  0239               	subwf	___ftadd@exp2,w
  9069  0F86  1803               	skipnc
  9070  0F87  2FA9               	goto	l695
  9071  0F88                     l2459:	
  9072  0F88  3001               	movlw	1
  9073  0F89                     u2345:	
  9074  0F89  35AE               	lslf	___ftadd@f1,f
  9075  0F8A  0DAF               	rlf	___ftadd@f1+1,f
  9076  0F8B  0DB0               	rlf	___ftadd@f1+2,f
  9077  0F8C  0B89               	decfsz	9,f
  9078  0F8D  2F89               	goto	u2345
  9079  0F8E  3001               	movlw	1
  9080  0F8F  02BA               	subwf	___ftadd@exp1,f
  9081  0F90  0839               	movf	___ftadd@exp2,w
  9082  0F91  063A               	xorwf	___ftadd@exp1,w
  9083  0F92  1903               	skipnz
  9084  0F93  2FA5               	goto	l2467
  9085  0F94  3001               	movlw	1
  9086  0F95  02B8               	subwf	___ftadd@sign,f
  9087  0F96  0838               	movf	___ftadd@sign,w
  9088  0F97  3907               	andlw	7
  9089  0F98  1903               	btfsc	3,2
  9090  0F99  2FA5               	goto	l2467
  9091  0F9A  2F88               	goto	l2459
  9092  0F9B                     l2465:	
  9093  0F9B  3001               	movlw	1
  9094  0F9C                     u2375:	
  9095  0F9C  36B3               	lsrf	___ftadd@f2+2,f
  9096  0F9D  0CB2               	rrf	___ftadd@f2+1,f
  9097  0F9E  0CB1               	rrf	___ftadd@f2,f
  9098  0F9F  0B89               	decfsz	9,f
  9099  0FA0  2F9C               	goto	u2375
  9100  0FA1  3001               	movlw	1
  9101  0FA2  00B4               	movwf	??___ftadd
  9102  0FA3  0834               	movf	??___ftadd,w
  9103  0FA4  07B9               	addwf	___ftadd@exp2,f
  9104  0FA5                     l2467:	
  9105  0FA5  083A               	movf	___ftadd@exp1,w
  9106  0FA6  0639               	xorwf	___ftadd@exp2,w
  9107  0FA7  1D03               	skipz
  9108  0FA8  2F9B               	goto	l2465
  9109  0FA9                     l695:	
  9110  0FA9  1FB8               	btfss	___ftadd@sign,7
  9111  0FAA  2FBB               	goto	l2471
  9112  0FAB  30FF               	movlw	255
  9113  0FAC  06AE               	xorwf	___ftadd@f1,f
  9114  0FAD  30FF               	movlw	255
  9115  0FAE  06AF               	xorwf	___ftadd@f1+1,f
  9116  0FAF  30FF               	movlw	255
  9117  0FB0  06B0               	xorwf	___ftadd@f1+2,f
  9118  0FB1  3001               	movlw	1
  9119  0FB2  07AE               	addwf	___ftadd@f1,f
  9120  0FB3  3000               	movlw	0
  9121  0FB4  1803               	skipnc
  9122  0FB5  3001               	movlw	1
  9123  0FB6  07AF               	addwf	___ftadd@f1+1,f
  9124  0FB7  3000               	movlw	0
  9125  0FB8  1803               	skipnc
  9126  0FB9  3001               	movlw	1
  9127  0FBA  07B0               	addwf	___ftadd@f1+2,f
  9128  0FBB                     l2471:	
  9129  0FBB  1F38               	btfss	___ftadd@sign,6
  9130  0FBC  2FCD               	goto	l2475
  9131  0FBD  30FF               	movlw	255
  9132  0FBE  06B1               	xorwf	___ftadd@f2,f
  9133  0FBF  30FF               	movlw	255
  9134  0FC0  06B2               	xorwf	___ftadd@f2+1,f
  9135  0FC1  30FF               	movlw	255
  9136  0FC2  06B3               	xorwf	___ftadd@f2+2,f
  9137  0FC3  3001               	movlw	1
  9138  0FC4  07B1               	addwf	___ftadd@f2,f
  9139  0FC5  3000               	movlw	0
  9140  0FC6  1803               	skipnc
  9141  0FC7  3001               	movlw	1
  9142  0FC8  07B2               	addwf	___ftadd@f2+1,f
  9143  0FC9  3000               	movlw	0
  9144  0FCA  1803               	skipnc
  9145  0FCB  3001               	movlw	1
  9146  0FCC  07B3               	addwf	___ftadd@f2+2,f
  9147  0FCD                     l2475:	
  9148  0FCD  01B8               	clrf	___ftadd@sign
  9149  0FCE  082E               	movf	___ftadd@f1,w
  9150  0FCF  07B1               	addwf	___ftadd@f2,f
  9151  0FD0  082F               	movf	___ftadd@f1+1,w
  9152  0FD1  3DB2               	addwfc	___ftadd@f2+1,f
  9153  0FD2  0830               	movf	___ftadd@f1+2,w
  9154  0FD3  3DB3               	addwfc	___ftadd@f2+2,f
  9155  0FD4  1FB3               	btfss	___ftadd@f2+2,7
  9156  0FD5  2FE8               	goto	l2485
  9157  0FD6  30FF               	movlw	255
  9158  0FD7  06B1               	xorwf	___ftadd@f2,f
  9159  0FD8  30FF               	movlw	255
  9160  0FD9  06B2               	xorwf	___ftadd@f2+1,f
  9161  0FDA  30FF               	movlw	255
  9162  0FDB  06B3               	xorwf	___ftadd@f2+2,f
  9163  0FDC  3001               	movlw	1
  9164  0FDD  07B1               	addwf	___ftadd@f2,f
  9165  0FDE  3000               	movlw	0
  9166  0FDF  1803               	skipnc
  9167  0FE0  3001               	movlw	1
  9168  0FE1  07B2               	addwf	___ftadd@f2+1,f
  9169  0FE2  3000               	movlw	0
  9170  0FE3  1803               	skipnc
  9171  0FE4  3001               	movlw	1
  9172  0FE5  07B3               	addwf	___ftadd@f2+2,f
  9173  0FE6  01B8               	clrf	___ftadd@sign
  9174  0FE7  0AB8               	incf	___ftadd@sign,f
  9175  0FE8                     l2485:	
  9176  0FE8  0831               	movf	___ftadd@f2,w
  9177  0FE9  00A0               	movwf	___ftpack@arg
  9178  0FEA  0832               	movf	___ftadd@f2+1,w
  9179  0FEB  00A1               	movwf	___ftpack@arg+1
  9180  0FEC  0833               	movf	___ftadd@f2+2,w
  9181  0FED  00A2               	movwf	___ftpack@arg+2
  9182  0FEE  083A               	movf	___ftadd@exp1,w
  9183  0FEF  00B4               	movwf	??___ftadd
  9184  0FF0  0834               	movf	??___ftadd,w
  9185  0FF1  00A3               	movwf	___ftpack@exp
  9186  0FF2  0838               	movf	___ftadd@sign,w
  9187  0FF3  00B5               	movwf	??___ftadd+1
  9188  0FF4  0835               	movf	??___ftadd+1,w
  9189  0FF5  00A4               	movwf	___ftpack@sign
  9190  0FF6  318A  22A8         	fcall	___ftpack
  9191  0FF8  0020               	movlb	0	; select bank0
  9192  0FF9  0820               	movf	?___ftpack,w
  9193  0FFA  00AE               	movwf	?___ftadd
  9194  0FFB  0821               	movf	?___ftpack+1,w
  9195  0FFC  00AF               	movwf	?___ftadd+1
  9196  0FFD  0822               	movf	?___ftpack+2,w
  9197  0FFE  00B0               	movwf	?___ftadd+2
  9198  0FFF  0008               	return
  9199  1000                     __end_of___ftadd:	
  9200                           
  9201                           	psect	text38
  9202  16E9                     __ptext38:	
  9203 ;; *************** function ___awtoft *****************
  9204 ;; Defined at:
  9205 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\awtoft.c"
  9206 ;; Parameters:    Size  Location     Type
  9207 ;;  c               2    8[BANK0 ] int 
  9208 ;; Auto vars:     Size  Location     Type
  9209 ;;  sign            1   13[BANK0 ] unsigned char 
  9210 ;; Return value:  Size  Location     Type
  9211 ;;                  3    8[BANK0 ] float 
  9212 ;; Registers used:
  9213 ;;		wreg, status,2, status,0, pclath, cstack
  9214 ;; Tracked objects:
  9215 ;;		On entry : 0/0
  9216 ;;		On exit  : 0/0
  9217 ;;		Unchanged: 0/0
  9218 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9219 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9220 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9221 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9222 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9223 ;;Total ram usage:        6 bytes
  9224 ;; Hardware stack levels used:    1
  9225 ;; Hardware stack levels required when called:    8
  9226 ;; This function calls:
  9227 ;;		___ftpack
  9228 ;; This function is called by:
  9229 ;;		_getADCValue
  9230 ;; This function uses a non-reentrant model
  9231 ;;
  9232                           
  9233                           
  9234                           ;psect for function ___awtoft
  9235  16E9                     ___awtoft:	
  9236                           
  9237                           ;incstack = 0
  9238                           ; Regs used in ___awtoft: [wreg+status,2+status,0+pclath+cstack]
  9239  16E9  0020               	movlb	0	; select bank0
  9240  16EA  01AD               	clrf	___awtoft@sign
  9241  16EB  1FA9               	btfss	___awtoft@c+1,7
  9242  16EC  2EF4               	goto	l2979
  9243  16ED  09A8               	comf	___awtoft@c,f
  9244  16EE  09A9               	comf	___awtoft@c+1,f
  9245  16EF  0AA8               	incf	___awtoft@c,f
  9246  16F0  1903               	skipnz
  9247  16F1  0AA9               	incf	___awtoft@c+1,f
  9248  16F2  01AD               	clrf	___awtoft@sign
  9249  16F3  0AAD               	incf	___awtoft@sign,f
  9250  16F4                     l2979:	
  9251  16F4  0828               	movf	___awtoft@c,w
  9252  16F5  00A0               	movwf	___ftpack@arg
  9253  16F6  0829               	movf	___awtoft@c+1,w
  9254  16F7  00A1               	movwf	___ftpack@arg+1
  9255  16F8  01A2               	clrf	___ftpack@arg+2
  9256  16F9  308E               	movlw	142
  9257  16FA  00AB               	movwf	??___awtoft
  9258  16FB  082B               	movf	??___awtoft,w
  9259  16FC  00A3               	movwf	___ftpack@exp
  9260  16FD  082D               	movf	___awtoft@sign,w
  9261  16FE  00AC               	movwf	??___awtoft+1
  9262  16FF  082C               	movf	??___awtoft+1,w
  9263  1700  00A4               	movwf	___ftpack@sign
  9264  1701  318A  22A8         	fcall	___ftpack
  9265  1703  0020               	movlb	0	; select bank0
  9266  1704  0820               	movf	?___ftpack,w
  9267  1705  00A8               	movwf	?___awtoft
  9268  1706  0821               	movf	?___ftpack+1,w
  9269  1707  00A9               	movwf	?___awtoft+1
  9270  1708  0822               	movf	?___ftpack+2,w
  9271  1709  00AA               	movwf	?___awtoft+2
  9272  170A  0008               	return
  9273  170B                     __end_of___awtoft:	
  9274                           
  9275                           	psect	text39
  9276  15F9                     __ptext39:	
  9277 ;; *************** function ___lbtoft *****************
  9278 ;; Defined at:
  9279 ;;		line 27 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\lbtoft.c"
  9280 ;; Parameters:    Size  Location     Type
  9281 ;;  c               1    wreg     unsigned char 
  9282 ;; Auto vars:     Size  Location     Type
  9283 ;;  c               1   15[BANK0 ] unsigned char 
  9284 ;; Return value:  Size  Location     Type
  9285 ;;                  3    8[BANK0 ] float 
  9286 ;; Registers used:
  9287 ;;		wreg, status,2, status,0, pclath, cstack
  9288 ;; Tracked objects:
  9289 ;;		On entry : 0/0
  9290 ;;		On exit  : 0/0
  9291 ;;		Unchanged: 0/0
  9292 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9293 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9294 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9295 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9296 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9297 ;;Total ram usage:        8 bytes
  9298 ;; Hardware stack levels used:    1
  9299 ;; Hardware stack levels required when called:    8
  9300 ;; This function calls:
  9301 ;;		___ftpack
  9302 ;; This function is called by:
  9303 ;;		_loop
  9304 ;; This function uses a non-reentrant model
  9305 ;;
  9306                           
  9307                           
  9308                           ;psect for function ___lbtoft
  9309  15F9                     ___lbtoft:	
  9310                           
  9311                           ;incstack = 0
  9312                           ; Regs used in ___lbtoft: [wreg+status,2+status,0+pclath+cstack]
  9313                           ;___lbtoft@c stored from wreg
  9314  15F9  0020               	movlb	0	; select bank0
  9315  15FA  00AF               	movwf	___lbtoft@c
  9316  15FB  082F               	movf	___lbtoft@c,w
  9317  15FC  00AB               	movwf	??___lbtoft
  9318  15FD  01AC               	clrf	??___lbtoft+1
  9319  15FE  01AD               	clrf	??___lbtoft+2
  9320  15FF  082B               	movf	??___lbtoft,w
  9321  1600  00A0               	movwf	___ftpack@arg
  9322  1601  082C               	movf	??___lbtoft+1,w
  9323  1602  00A1               	movwf	___ftpack@arg+1
  9324  1603  082D               	movf	??___lbtoft+2,w
  9325  1604  00A2               	movwf	___ftpack@arg+2
  9326  1605  308E               	movlw	142
  9327  1606  00AE               	movwf	??___lbtoft+3
  9328  1607  082E               	movf	??___lbtoft+3,w
  9329  1608  00A3               	movwf	___ftpack@exp
  9330  1609  01A4               	clrf	___ftpack@sign
  9331  160A  318A  22A8         	fcall	___ftpack
  9332  160C  0020               	movlb	0	; select bank0
  9333  160D  0820               	movf	?___ftpack,w
  9334  160E  00A8               	movwf	?___lbtoft
  9335  160F  0821               	movf	?___ftpack+1,w
  9336  1610  00A9               	movwf	?___lbtoft+1
  9337  1611  0822               	movf	?___ftpack+2,w
  9338  1612  00AA               	movwf	?___lbtoft+2
  9339  1613  0008               	return
  9340  1614                     __end_of___lbtoft:	
  9341                           
  9342                           	psect	text40
  9343  1567                     __ptext40:	
  9344 ;; *************** function ___lwtoft *****************
  9345 ;; Defined at:
  9346 ;;		line 28 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\lwtoft.c"
  9347 ;; Parameters:    Size  Location     Type
  9348 ;;  c               2    8[BANK0 ] unsigned int 
  9349 ;; Auto vars:     Size  Location     Type
  9350 ;;		None
  9351 ;; Return value:  Size  Location     Type
  9352 ;;                  3    8[BANK0 ] float 
  9353 ;; Registers used:
  9354 ;;		wreg, status,2, status,0, pclath, cstack
  9355 ;; Tracked objects:
  9356 ;;		On entry : 0/0
  9357 ;;		On exit  : 0/0
  9358 ;;		Unchanged: 0/0
  9359 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9360 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9361 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9362 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9363 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9364 ;;Total ram usage:        4 bytes
  9365 ;; Hardware stack levels used:    1
  9366 ;; Hardware stack levels required when called:    8
  9367 ;; This function calls:
  9368 ;;		___ftpack
  9369 ;; This function is called by:
  9370 ;;		_main
  9371 ;; This function uses a non-reentrant model
  9372 ;;
  9373                           
  9374                           
  9375                           ;psect for function ___lwtoft
  9376  1567                     ___lwtoft:	
  9377                           
  9378                           ;incstack = 0
  9379                           ; Regs used in ___lwtoft: [wreg+status,2+status,0+pclath+cstack]
  9380  1567  0020               	movlb	0	; select bank0
  9381  1568  0828               	movf	___lwtoft@c,w
  9382  1569  00A0               	movwf	___ftpack@arg
  9383  156A  0829               	movf	___lwtoft@c+1,w
  9384  156B  00A1               	movwf	___ftpack@arg+1
  9385  156C  01A2               	clrf	___ftpack@arg+2
  9386  156D  308E               	movlw	142
  9387  156E  00AB               	movwf	??___lwtoft
  9388  156F  082B               	movf	??___lwtoft,w
  9389  1570  00A3               	movwf	___ftpack@exp
  9390  1571  01A4               	clrf	___ftpack@sign
  9391  1572  318A  22A8         	fcall	___ftpack
  9392  1574  0020               	movlb	0	; select bank0
  9393  1575  0820               	movf	?___ftpack,w
  9394  1576  00A8               	movwf	?___lwtoft
  9395  1577  0821               	movf	?___ftpack+1,w
  9396  1578  00A9               	movwf	?___lwtoft+1
  9397  1579  0822               	movf	?___ftpack+2,w
  9398  157A  00AA               	movwf	?___lwtoft+2
  9399  157B  0008               	return
  9400  157C                     __end_of___lwtoft:	
  9401                           
  9402                           	psect	text41
  9403  0AA8                     __ptext41:	
  9404 ;; *************** function ___ftpack *****************
  9405 ;; Defined at:
  9406 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\float.c"
  9407 ;; Parameters:    Size  Location     Type
  9408 ;;  arg             3    0[BANK0 ] unsigned um
  9409 ;;  exp             1    3[BANK0 ] unsigned char 
  9410 ;;  sign            1    4[BANK0 ] unsigned char 
  9411 ;; Auto vars:     Size  Location     Type
  9412 ;;		None
  9413 ;; Return value:  Size  Location     Type
  9414 ;;                  3    0[BANK0 ] float 
  9415 ;; Registers used:
  9416 ;;		wreg, status,2, status,0
  9417 ;; Tracked objects:
  9418 ;;		On entry : 0/0
  9419 ;;		On exit  : 0/0
  9420 ;;		Unchanged: 0/0
  9421 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9422 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9423 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9424 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9425 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9426 ;;Total ram usage:        8 bytes
  9427 ;; Hardware stack levels used:    1
  9428 ;; Hardware stack levels required when called:    7
  9429 ;; This function calls:
  9430 ;;		Nothing
  9431 ;; This function is called by:
  9432 ;;		___awtoft
  9433 ;;		___ftadd
  9434 ;;		___ftdiv
  9435 ;;		___ftmul
  9436 ;;		___lbtoft
  9437 ;;		___lltoft
  9438 ;;		___lwtoft
  9439 ;; This function uses a non-reentrant model
  9440 ;;
  9441                           
  9442                           
  9443                           ;psect for function ___ftpack
  9444  0AA8                     ___ftpack:	
  9445                           
  9446                           ;incstack = 0
  9447                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
  9448  0AA8  0020               	movlb	0	; select bank0
  9449  0AA9  0823               	movf	___ftpack@exp,w
  9450  0AAA  1903               	btfsc	3,2
  9451  0AAB  2AB1               	goto	l2275
  9452  0AAC  0822               	movf	___ftpack@arg+2,w
  9453  0AAD  0421               	iorwf	___ftpack@arg+1,w
  9454  0AAE  0420               	iorwf	___ftpack@arg,w
  9455  0AAF  1D03               	skipz
  9456  0AB0  2AC2               	goto	l2281
  9457  0AB1                     l2275:	
  9458  0AB1  3000               	movlw	0
  9459  0AB2  00A0               	movwf	?___ftpack
  9460  0AB3  3000               	movlw	0
  9461  0AB4  00A1               	movwf	?___ftpack+1
  9462  0AB5  3000               	movlw	0
  9463  0AB6  00A2               	movwf	?___ftpack+2
  9464  0AB7  0008               	return
  9465  0AB8                     l2279:	
  9466  0AB8  3001               	movlw	1
  9467  0AB9  00A5               	movwf	??___ftpack
  9468  0ABA  0825               	movf	??___ftpack,w
  9469  0ABB  07A3               	addwf	___ftpack@exp,f
  9470  0ABC  3001               	movlw	1
  9471  0ABD                     u1895:	
  9472  0ABD  36A2               	lsrf	___ftpack@arg+2,f
  9473  0ABE  0CA1               	rrf	___ftpack@arg+1,f
  9474  0ABF  0CA0               	rrf	___ftpack@arg,f
  9475  0AC0  0B89               	decfsz	9,f
  9476  0AC1  2ABD               	goto	u1895
  9477  0AC2                     l2281:	
  9478  0AC2  30FE               	movlw	254
  9479  0AC3  0522               	andwf	___ftpack@arg+2,w
  9480  0AC4  1903               	btfsc	3,2
  9481  0AC5  2ADB               	goto	l664
  9482  0AC6  2AB8               	goto	l2279
  9483  0AC7                     l2283:	
  9484  0AC7  3001               	movlw	1
  9485  0AC8  00A5               	movwf	??___ftpack
  9486  0AC9  0825               	movf	??___ftpack,w
  9487  0ACA  07A3               	addwf	___ftpack@exp,f
  9488  0ACB  3001               	movlw	1
  9489  0ACC  07A0               	addwf	___ftpack@arg,f
  9490  0ACD  3000               	movlw	0
  9491  0ACE  1803               	skipnc
  9492  0ACF  3001               	movlw	1
  9493  0AD0  07A1               	addwf	___ftpack@arg+1,f
  9494  0AD1  3000               	movlw	0
  9495  0AD2  1803               	skipnc
  9496  0AD3  3001               	movlw	1
  9497  0AD4  07A2               	addwf	___ftpack@arg+2,f
  9498  0AD5  3001               	movlw	1
  9499  0AD6                     u1915:	
  9500  0AD6  36A2               	lsrf	___ftpack@arg+2,f
  9501  0AD7  0CA1               	rrf	___ftpack@arg+1,f
  9502  0AD8  0CA0               	rrf	___ftpack@arg,f
  9503  0AD9  0B89               	decfsz	9,f
  9504  0ADA  2AD6               	goto	u1915
  9505  0ADB                     l664:	
  9506  0ADB  30FF               	movlw	255
  9507  0ADC  0522               	andwf	___ftpack@arg+2,w
  9508  0ADD  1903               	btfsc	3,2
  9509  0ADE  2AE8               	goto	l2291
  9510  0ADF  2AC7               	goto	l2283
  9511  0AE0                     l2289:	
  9512  0AE0  3001               	movlw	1
  9513  0AE1  02A3               	subwf	___ftpack@exp,f
  9514  0AE2  3001               	movlw	1
  9515  0AE3                     u1935:	
  9516  0AE3  35A0               	lslf	___ftpack@arg,f
  9517  0AE4  0DA1               	rlf	___ftpack@arg+1,f
  9518  0AE5  0DA2               	rlf	___ftpack@arg+2,f
  9519  0AE6  0B89               	decfsz	9,f
  9520  0AE7  2AE3               	goto	u1935
  9521  0AE8                     l2291:	
  9522  0AE8  1BA1               	btfsc	___ftpack@arg+1,7
  9523  0AE9  2AEE               	goto	l671
  9524  0AEA  3002               	movlw	2
  9525  0AEB  0223               	subwf	___ftpack@exp,w
  9526  0AEC  1803               	skipnc
  9527  0AED  2AE0               	goto	l2289
  9528  0AEE                     l671:	
  9529  0AEE  1823               	btfsc	___ftpack@exp,0
  9530  0AEF  2AF6               	goto	l672
  9531  0AF0  30FF               	movlw	255
  9532  0AF1  05A0               	andwf	___ftpack@arg,f
  9533  0AF2  307F               	movlw	127
  9534  0AF3  05A1               	andwf	___ftpack@arg+1,f
  9535  0AF4  30FF               	movlw	255
  9536  0AF5  05A2               	andwf	___ftpack@arg+2,f
  9537  0AF6                     l672:	
  9538  0AF6  1003               	clrc
  9539  0AF7  0CA3               	rrf	___ftpack@exp,f
  9540  0AF8  0823               	movf	___ftpack@exp,w
  9541  0AF9  00A5               	movwf	??___ftpack
  9542  0AFA  01A6               	clrf	??___ftpack+1
  9543  0AFB  01A7               	clrf	??___ftpack+2
  9544  0AFC  3010               	movlw	16
  9545  0AFD                     u1975:	
  9546  0AFD  35A5               	lslf	??___ftpack,f
  9547  0AFE  0DA6               	rlf	??___ftpack+1,f
  9548  0AFF  0DA7               	rlf	??___ftpack+2,f
  9549  0B00  0B89               	decfsz	9,f
  9550  0B01  2AFD               	goto	u1975
  9551  0B02  0825               	movf	??___ftpack,w
  9552  0B03  04A0               	iorwf	___ftpack@arg,f
  9553  0B04  0826               	movf	??___ftpack+1,w
  9554  0B05  04A1               	iorwf	___ftpack@arg+1,f
  9555  0B06  0827               	movf	??___ftpack+2,w
  9556  0B07  04A2               	iorwf	___ftpack@arg+2,f
  9557  0B08  0824               	movf	___ftpack@sign,w
  9558  0B09  1903               	btfsc	3,2
  9559  0B0A  0008               	return
  9560  0B0B  17A2               	bsf	___ftpack@arg+2,7
  9561  0B0C  0008               	return
  9562  0B0D                     __end_of___ftpack:	
  9563                           
  9564                           	psect	intentry
  9565  0004                     __pintentry:	
  9566 ;; *************** function _ISR *****************
  9567 ;; Defined at:
  9568 ;;		line 13 in file "main.c"
  9569 ;; Parameters:    Size  Location     Type
  9570 ;;		None
  9571 ;; Auto vars:     Size  Location     Type
  9572 ;;		None
  9573 ;; Return value:  Size  Location     Type
  9574 ;;                  1    wreg      void 
  9575 ;; Registers used:
  9576 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9577 ;; Tracked objects:
  9578 ;;		On entry : 0/0
  9579 ;;		On exit  : 0/0
  9580 ;;		Unchanged: 0/0
  9581 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9582 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9583 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9584 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9585 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9586 ;;Total ram usage:        0 bytes
  9587 ;; Hardware stack levels used:    1
  9588 ;; Hardware stack levels required when called:    6
  9589 ;; This function calls:
  9590 ;;		_nrf24l01ISR
  9591 ;; This function is called by:
  9592 ;;		Interrupt level 1
  9593 ;; This function uses a non-reentrant model
  9594 ;;
  9595                           
  9596  0004                     _ISR:	
  9597                           
  9598                           ;incstack = 0
  9599  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
  9600                           
  9601                           ; Regs used in _ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9602  0005  3180               	pagesel	$
  9603                           
  9604                           ;main.c: 15: if (PIR0bits.INTF){
  9605  0006  0020               	movlb	0	; select bank0
  9606  0007  1C10               	btfss	16,0	;volatile
  9607  0008  280D               	goto	i1l163
  9608                           
  9609                           ;main.c: 16: nrf24l01ISR();
  9610  0009  318A  2245         	fcall	_nrf24l01ISR
  9611                           
  9612                           ;main.c: 17: PIR0bits.INTF = 0;
  9613  000B  0020               	movlb	0	; select bank0
  9614  000C  1010               	bcf	16,0	;volatile
  9615  000D                     i1l163:	
  9616  000D  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
  9617  000E  0009               	retfie
  9618  000F                     __end_of_ISR:	
  9619                           
  9620                           	psect	text43
  9621  0A45                     __ptext43:	
  9622 ;; *************** function _nrf24l01ISR *****************
  9623 ;; Defined at:
  9624 ;;		line 233 in file "nrf24l01.c"
  9625 ;; Parameters:    Size  Location     Type
  9626 ;;		None
  9627 ;; Auto vars:     Size  Location     Type
  9628 ;;		None
  9629 ;; Return value:  Size  Location     Type
  9630 ;;                  1    wreg      void 
  9631 ;; Registers used:
  9632 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9633 ;; Tracked objects:
  9634 ;;		On entry : 0/0
  9635 ;;		On exit  : 0/0
  9636 ;;		Unchanged: 0/0
  9637 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9638 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9639 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9640 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9641 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9642 ;;Total ram usage:        1 bytes
  9643 ;; Hardware stack levels used:    1
  9644 ;; Hardware stack levels required when called:    5
  9645 ;; This function calls:
  9646 ;;		i1_nrf24l01Send
  9647 ;;		i1_nrf24l01Service
  9648 ;;		i1_nrf24l01SetRXMode
  9649 ;; This function is called by:
  9650 ;;		_ISR
  9651 ;; This function uses a non-reentrant model
  9652 ;;
  9653                           
  9654                           
  9655                           ;psect for function _nrf24l01ISR
  9656  0A45                     _nrf24l01ISR:	
  9657                           
  9658                           ;nrf24l01.c: 235: status.statusRegister.byte = nrf24l01Send((unsigned) 0b00000000 | (uns
      +                          igned) 0x07, 0);
  9659                           
  9660                           ;incstack = 0
  9661                           ; Regs used in _nrf24l01ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9662  0A45  01F1               	clrf	i1nrf24l01Send@data
  9663  0A46  3007               	movlw	7
  9664  0A47  3195  25DE  318A   	fcall	i1_nrf24l01Send
  9665  0A4A  00FC               	movwf	??_nrf24l01ISR
  9666  0A4B  087C               	movf	??_nrf24l01ISR,w
  9667  0A4C  0021               	movlb	1	; select bank1
  9668  0A4D  00E8               	movwf	(_status^(0+128)+1)	;volatile
  9669                           
  9670                           ;nrf24l01.c: 237: if (status.statusRegister.TX_DS){
  9671  0A4E  1EE8               	btfss	(_status^(0+128)+1),5	;volatile
  9672  0A4F  2A81               	goto	i1l286
  9673                           
  9674                           ;nrf24l01.c: 239: if (status.TX == statuses.TX.Sending){
  9675  0A50  3036               	movlw	low ((_statuses+2)| (0+32768))
  9676  0A51  0084               	movwf	4
  9677  0A52  3098               	movlw	high ((_statuses+2)| (0+32768))
  9678  0A53  0085               	movwf	5
  9679  0A54  0800               	movf	0,w	;code access
  9680  0A55  00FC               	movwf	??_nrf24l01ISR
  9681  0A56  0867               	movf	_status^(0+128),w	;volatile
  9682  0A57  390F               	andlw	15
  9683  0A58  067C               	xorwf	??_nrf24l01ISR,w
  9684  0A59  1D03               	skipz
  9685  0A5A  2A80               	goto	i1l287
  9686                           
  9687                           ;nrf24l01.c: 241: if (TXPacket.packetData.ACKRequest){
  9688  0A5B  0023               	movlb	3	; select bank3
  9689  0A5C  1D41               	btfss	_TXPacket^(0+384),2
  9690  0A5D  2A73               	goto	i1l3773
  9691                           
  9692                           ;nrf24l01.c: 242: status.TX = statuses.TX.PendingACK;
  9693  0A5E  3037               	movlw	low ((_statuses+3)| (0+32768))
  9694  0A5F  0084               	movwf	4
  9695  0A60  3098               	movlw	high ((_statuses+3)| (0+32768))
  9696  0A61  0085               	movwf	5
  9697  0A62  0800               	movf	0,w	;code access
  9698  0A63  00FC               	movwf	??_nrf24l01ISR
  9699  0A64  0021               	movlb	1	; select bank1
  9700  0A65  0867               	movf	_status^(0+128),w	;volatile
  9701  0A66  067C               	xorwf	??_nrf24l01ISR,w
  9702  0A67  39F0               	andlw	-16
  9703  0A68  067C               	xorwf	??_nrf24l01ISR,w
  9704  0A69  00E7               	movwf	_status^(0+128)	;volatile
  9705                           
  9706                           ;nrf24l01.c: 243: status.retryCount = 0xFF;
  9707  0A6A  30FF               	movlw	255
  9708  0A6B  00FC               	movwf	??_nrf24l01ISR
  9709  0A6C  087C               	movf	??_nrf24l01ISR,w
  9710  0A6D  00EA               	movwf	(_status^(0+128)+3)	;volatile
  9711                           
  9712                           ;nrf24l01.c: 244: nrf24l01SetRXMode(1);
  9713  0A6E  3001               	movlw	1
  9714  0A6F  3197  270B  318A   	fcall	i1_nrf24l01SetRXMode
  9715                           
  9716                           ;nrf24l01.c: 245: }else{
  9717  0A72  2A81               	goto	i1l286
  9718  0A73                     i1l3773:	
  9719                           
  9720                           ;nrf24l01.c: 246: status.TX = statuses.TX.Idle;
  9721  0A73  3034               	movlw	low (_statuses| (0+32768))
  9722  0A74  0084               	movwf	4
  9723  0A75  3098               	movlw	high (_statuses| (0+32768))
  9724  0A76  0085               	movwf	5
  9725  0A77  0800               	movf	0,w	;code access
  9726  0A78  00FC               	movwf	??_nrf24l01ISR
  9727  0A79  0021               	movlb	1	; select bank1
  9728  0A7A  0867               	movf	_status^(0+128),w	;volatile
  9729  0A7B  067C               	xorwf	??_nrf24l01ISR,w
  9730  0A7C  39F0               	andlw	-16
  9731  0A7D  067C               	xorwf	??_nrf24l01ISR,w
  9732  0A7E  00E7               	movwf	_status^(0+128)	;volatile
  9733                           
  9734                           ;nrf24l01.c: 247: };nrf24l01.c: 248: }
  9735  0A7F  2A81               	goto	i1l286
  9736  0A80                     i1l287:	
  9737                           
  9738                           ;nrf24l01.c: 250: else{;nrf24l01.c: 251: status.statusRegister.TX_DS = 0;
  9739  0A80  12E8               	bcf	(_status^(0+128)+1),5	;volatile
  9740  0A81                     i1l286:	
  9741                           
  9742                           ;nrf24l01.c: 252: };nrf24l01.c: 253: };nrf24l01.c: 256: if (status.statusRegister.RX_DR)
      +                          {
  9743  0A81  0021               	movlb	1	; select bank1
  9744  0A82  1F68               	btfss	(_status^(0+128)+1),6	;volatile
  9745  0A83  2A9D               	goto	i1l3779
  9746                           
  9747                           ;nrf24l01.c: 258: if (status.RX == statuses.RX.Idle){
  9748  0A84  3038               	movlw	low ((_statuses+4)| (0+32768))
  9749  0A85  0084               	movwf	4
  9750  0A86  3098               	movlw	high ((_statuses+4)| (0+32768))
  9751  0A87  0085               	movwf	5
  9752  0A88  0800               	movf	0,w	;code access
  9753  0A89  00FC               	movwf	??_nrf24l01ISR
  9754  0A8A  0E67               	swapf	_status^(0+128),w	;volatile
  9755  0A8B  390F               	andlw	15
  9756  0A8C  067C               	xorwf	??_nrf24l01ISR,w
  9757  0A8D  1D03               	skipz
  9758  0A8E  2A9C               	goto	i1l292
  9759                           
  9760                           ;nrf24l01.c: 259: status.RX = statuses.RX.Pending;
  9761  0A8F  3039               	movlw	low ((_statuses+5)| (0+32768))
  9762  0A90  0084               	movwf	4
  9763  0A91  3098               	movlw	high ((_statuses+5)| (0+32768))
  9764  0A92  0085               	movwf	5
  9765  0A93  0800               	movf	0,w	;code access
  9766  0A94  00FC               	movwf	??_nrf24l01ISR
  9767  0A95  0EFC               	swapf	??_nrf24l01ISR,f
  9768  0A96  0867               	movf	_status^(0+128),w	;volatile
  9769  0A97  067C               	xorwf	??_nrf24l01ISR,w
  9770  0A98  390F               	andlw	-241
  9771  0A99  067C               	xorwf	??_nrf24l01ISR,w
  9772  0A9A  00E7               	movwf	_status^(0+128)	;volatile
  9773                           
  9774                           ;nrf24l01.c: 260: }
  9775  0A9B  2A9D               	goto	i1l3779
  9776  0A9C                     i1l292:	
  9777                           
  9778                           ;nrf24l01.c: 262: else{;nrf24l01.c: 263: status.statusRegister.RX_DR = 0;
  9779  0A9C  1368               	bcf	(_status^(0+128)+1),6	;volatile
  9780  0A9D                     i1l3779:	
  9781                           
  9782                           ;nrf24l01.c: 264: };nrf24l01.c: 265: };nrf24l01.c: 268: nrf24l01Send((unsigned) 0b001000
      +                          00 | (unsigned) 0x07, status.statusRegister.byte);
  9783  0A9D  0868               	movf	(_status^(0+128)+1),w	;volatile
  9784  0A9E  00FC               	movwf	??_nrf24l01ISR
  9785  0A9F  087C               	movf	??_nrf24l01ISR,w
  9786  0AA0  00F1               	movwf	i1nrf24l01Send@data
  9787  0AA1  3027               	movlw	39
  9788  0AA2  3195  25DE  318A   	fcall	i1_nrf24l01Send
  9789                           
  9790                           ;nrf24l01.c: 270: nrf24l01Service();
  9791  0AA5  3184  24C8         	fcall	i1_nrf24l01Service
  9792  0AA7  0008               	return
  9793  0AA8                     __end_of_nrf24l01ISR:	
  9794                           
  9795                           	psect	text44
  9796  04C8                     __ptext44:	
  9797 ;; *************** function i1_nrf24l01Service *****************
  9798 ;; Defined at:
  9799 ;;		line 274 in file "nrf24l01.c"
  9800 ;; Parameters:    Size  Location     Type
  9801 ;;		None
  9802 ;; Auto vars:     Size  Location     Type
  9803 ;;  nrf24l01Serv    1   11[COMMON] unsigned char 
  9804 ;;  nrf24l01Serv    1   10[COMMON] unsigned char 
  9805 ;; Return value:  Size  Location     Type
  9806 ;;                  1    wreg      void 
  9807 ;; Registers used:
  9808 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9809 ;; Tracked objects:
  9810 ;;		On entry : 0/0
  9811 ;;		On exit  : 0/0
  9812 ;;		Unchanged: 0/0
  9813 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9814 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9815 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9816 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9817 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9818 ;;Total ram usage:        4 bytes
  9819 ;; Hardware stack levels used:    1
  9820 ;; Hardware stack levels required when called:    4
  9821 ;; This function calls:
  9822 ;;		_nrf24l01CEHigh
  9823 ;;		_nrf24l01CELow
  9824 ;;		_nrf24l01SPIEnd
  9825 ;;		_nrf24l01SPISend
  9826 ;;		_nrf24l01SPIStart
  9827 ;;		i1_memset
  9828 ;;		i1_nrf24l01Send
  9829 ;;		i1_nrf24l01SetRXMode
  9830 ;;		i1_strcmp
  9831 ;;		i1_strlen
  9832 ;; This function is called by:
  9833 ;;		_nrf24l01ISR
  9834 ;; This function uses a non-reentrant model
  9835 ;;
  9836                           
  9837                           
  9838                           ;psect for function i1_nrf24l01Service
  9839  04C8                     i1_nrf24l01Service:	
  9840                           
  9841                           ;nrf24l01.c: 276: unsigned char i;;nrf24l01.c: 278: if (status.TX == statuses.TX.Ready){
  9842                           
  9843                           ;incstack = 0
  9844                           ; Regs used in i1_nrf24l01Service: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9845  04C8  3035               	movlw	low ((_statuses+1)| (0+32768))
  9846  04C9  0084               	movwf	4
  9847  04CA  3098               	movlw	high ((_statuses+1)| (0+32768))
  9848  04CB  0085               	movwf	5
  9849  04CC  0800               	movf	0,w	;code access
  9850  04CD  00F8               	movwf	??i1_nrf24l01Service
  9851  04CE  0021               	movlb	1	; select bank1
  9852  04CF  0867               	movf	_status^(0+128),w	;volatile
  9853  04D0  390F               	andlw	15
  9854  04D1  0678               	xorwf	??i1_nrf24l01Service,w
  9855  04D2  1D03               	skipz
  9856  04D3  2D21               	goto	i1l3699
  9857                           
  9858                           ;nrf24l01.c: 281: nrf24l01SetRXMode(0);
  9859  04D4  3000               	movlw	0
  9860  04D5  3197  270B  3184   	fcall	i1_nrf24l01SetRXMode
  9861                           
  9862                           ;nrf24l01.c: 284: nrf24l01SPIStart();
  9863  04D8  3195  253A  3184   	fcall	_nrf24l01SPIStart
  9864                           
  9865                           ;nrf24l01.c: 287: nrf24l01SPISend((unsigned) 0b10110000);
  9866  04DB  30B0               	movlw	176
  9867  04DC  3195  254B  3184   	fcall	_nrf24l01SPISend
  9868                           
  9869                           ;nrf24l01.c: 289: nrf24l01SPISend(TXPacket.packetData.byte);
  9870  04DF  0023               	movlb	3	; select bank3
  9871  04E0  0841               	movf	_TXPacket^(0+384),w
  9872  04E1  3195  254B  3184   	fcall	_nrf24l01SPISend
  9873                           
  9874                           ;nrf24l01.c: 292: for (i = 0; (i < strlen(TXPacket.Message)) && (i < 32); i++) {
  9875  04E4  01FB               	clrf	i1nrf24l01Service@i
  9876  04E5  2CF3               	goto	i1l3685
  9877  04E6                     i1l3681:	
  9878                           
  9879                           ;nrf24l01.c: 293: nrf24l01SPISend(TXPacket.Message[i]);
  9880  04E6  087B               	movf	i1nrf24l01Service@i,w
  9881  04E7  3EC2               	addlw	(low ((_TXPacket| (0+256)+1)))& (0+255)
  9882  04E8  0086               	movwf	6
  9883  04E9  3001               	movlw	1	; select bank3/4
  9884  04EA  0087               	movwf	7
  9885  04EB  0801               	movf	1,w
  9886  04EC  3195  254B  3184   	fcall	_nrf24l01SPISend
  9887  04EF  3001               	movlw	1
  9888  04F0  00F8               	movwf	??i1_nrf24l01Service
  9889  04F1  0878               	movf	??i1_nrf24l01Service,w
  9890  04F2  07FB               	addwf	i1nrf24l01Service@i,f
  9891  04F3                     i1l3685:	
  9892  04F3  30C2               	movlw	low (_TXPacket+1)
  9893  04F4  00F0               	movwf	i1strlen@s
  9894  04F5  3001               	movlw	high (_TXPacket+1)
  9895  04F6  00F1               	movwf	i1strlen@s+1
  9896  04F7  3196  262F  3184   	fcall	i1_strlen
  9897  04FA  087B               	movf	i1nrf24l01Service@i,w
  9898  04FB  00F8               	movwf	??i1_nrf24l01Service
  9899  04FC  01F9               	clrf	??i1_nrf24l01Service+1
  9900  04FD  0871               	movf	?i1_strlen+1,w
  9901  04FE  0279               	subwf	??i1_nrf24l01Service+1,w
  9902  04FF  1D03               	skipz
  9903  0500  2D03               	goto	u390_25
  9904  0501  0870               	movf	?i1_strlen,w
  9905  0502  0278               	subwf	??i1_nrf24l01Service,w
  9906  0503                     u390_25:	
  9907  0503  1803               	skipnc
  9908  0504  2D09               	goto	i1l3689
  9909  0505  3020               	movlw	32
  9910  0506  027B               	subwf	i1nrf24l01Service@i,w
  9911  0507  1C03               	skipc
  9912  0508  2CE6               	goto	i1l3681
  9913  0509                     i1l3689:	
  9914                           
  9915                           ;nrf24l01.c: 294: };nrf24l01.c: 297: nrf24l01SPIEnd();
  9916  0509  3195  252B  3184   	fcall	_nrf24l01SPIEnd
  9917                           
  9918                           ;nrf24l01.c: 300: status.TX = statuses.TX.Sending;
  9919  050C  3036               	movlw	low ((_statuses+2)| (0+32768))
  9920  050D  0084               	movwf	4
  9921  050E  3098               	movlw	high ((_statuses+2)| (0+32768))
  9922  050F  0085               	movwf	5
  9923  0510  0800               	movf	0,w	;code access
  9924  0511  00F8               	movwf	??i1_nrf24l01Service
  9925  0512  0021               	movlb	1	; select bank1
  9926  0513  0867               	movf	_status^(0+128),w	;volatile
  9927  0514  0678               	xorwf	??i1_nrf24l01Service,w
  9928  0515  39F0               	andlw	-16
  9929  0516  0678               	xorwf	??i1_nrf24l01Service,w
  9930  0517  00E7               	movwf	_status^(0+128)	;volatile
  9931                           
  9932                           ;nrf24l01.c: 303: nrf24l01CEHigh();
  9933  0518  3195  2519  3184   	fcall	_nrf24l01CEHigh
  9934                           
  9935                           ;nrf24l01.c: 304: _delay((unsigned long)((12)*(32000000/4000000.0)));
  9936  051B  3020               	movlw	32
  9937  051C                     u415_27:	
  9938  051C  0B89               	decfsz	9,f
  9939  051D  2D1C               	goto	u415_27
  9940                           
  9941                           ;nrf24l01.c: 305: nrf24l01CELow();
  9942  051E  3195  251C  3184   	fcall	_nrf24l01CELow
  9943  0521                     i1l3699:	
  9944                           
  9945                           ;nrf24l01.c: 306: };nrf24l01.c: 308: if (status.RX == statuses.RX.Pending){
  9946  0521  3039               	movlw	low ((_statuses+5)| (0+32768))
  9947  0522  0084               	movwf	4
  9948  0523  3098               	movlw	high ((_statuses+5)| (0+32768))
  9949  0524  0085               	movwf	5
  9950  0525  0800               	movf	0,w	;code access
  9951  0526  00F8               	movwf	??i1_nrf24l01Service
  9952  0527  0021               	movlb	1	; select bank1
  9953  0528  0E67               	swapf	_status^(0+128),w	;volatile
  9954  0529  390F               	andlw	15
  9955  052A  0678               	xorwf	??i1_nrf24l01Service,w
  9956  052B  1D03               	skipz
  9957  052C  2D9D               	goto	i1l3737
  9958                           
  9959                           ;nrf24l01.c: 311: memset(RXPacket.Message, 0 ,sizeof(RXPacket.Message));
  9960  052D  30A1               	movlw	low (_RXPacket+1)
  9961  052E  00F0               	movwf	i1memset@p1
  9962  052F  3001               	movlw	high (_RXPacket+1)
  9963  0530  00F1               	movwf	i1memset@p1+1
  9964  0531  3000               	movlw	0
  9965  0532  00F2               	movwf	i1memset@c
  9966  0533  00F3               	movwf	i1memset@c+1
  9967  0534  3020               	movlw	32
  9968  0535  00F4               	movwf	i1memset@n
  9969  0536  3000               	movlw	0
  9970  0537  00F5               	movwf	i1memset@n+1
  9971  0538  3195  2593  3184   	fcall	i1_memset
  9972                           
  9973                           ;nrf24l01.c: 312: RXPacket.packetData.byte = 0x00;
  9974  053B  0023               	movlb	3	; select bank3
  9975  053C  01A0               	clrf	_RXPacket^(0+384)
  9976                           
  9977                           ;nrf24l01.c: 315: unsigned char width = nrf24l01Send((unsigned) 0b01100000, 0);
  9978  053D  01F1               	clrf	i1nrf24l01Send@data
  9979  053E  3060               	movlw	96
  9980  053F  3195  25DE  3184   	fcall	i1_nrf24l01Send
  9981  0542  00F8               	movwf	??i1_nrf24l01Service
  9982  0543  0878               	movf	??i1_nrf24l01Service,w
  9983  0544  00FA               	movwf	i1nrf24l01Service@width
  9984                           
  9985                           ;nrf24l01.c: 318: nrf24l01CELow();
  9986  0545  3195  251C  3184   	fcall	_nrf24l01CELow
  9987                           
  9988                           ;nrf24l01.c: 321: nrf24l01SPIStart();
  9989  0548  3195  253A  3184   	fcall	_nrf24l01SPIStart
  9990                           
  9991                           ;nrf24l01.c: 324: nrf24l01SPISend((unsigned) 0b01100001);
  9992  054B  3061               	movlw	97
  9993  054C  3195  254B  3184   	fcall	_nrf24l01SPISend
  9994                           
  9995                           ;nrf24l01.c: 327: RXPacket.packetData.byte = nrf24l01SPISend(0);
  9996  054F  3000               	movlw	0
  9997  0550  3195  254B  3184   	fcall	_nrf24l01SPISend
  9998  0553  00F8               	movwf	??i1_nrf24l01Service
  9999  0554  0878               	movf	??i1_nrf24l01Service,w
 10000  0555  0023               	movlb	3	; select bank3
 10001  0556  00A0               	movwf	_RXPacket^(0+384)
 10002                           
 10003                           ;nrf24l01.c: 328: width--;
 10004  0557  3001               	movlw	1
 10005  0558  02FA               	subwf	i1nrf24l01Service@width,f
 10006                           
 10007                           ;nrf24l01.c: 330: for (i = 0; (i < width) && (i < 32); i++){
 10008  0559  01FB               	clrf	i1nrf24l01Service@i
 10009  055A  2D6B               	goto	i1l3723
 10010  055B                     i1l3719:	
 10011                           
 10012                           ;nrf24l01.c: 332: RXPacket.Message[i] = nrf24l01SPISend(0);
 10013  055B  3000               	movlw	0
 10014  055C  3195  254B  3184   	fcall	_nrf24l01SPISend
 10015  055F  00F8               	movwf	??i1_nrf24l01Service
 10016  0560  087B               	movf	i1nrf24l01Service@i,w
 10017  0561  3EA1               	addlw	(low ((_RXPacket| (0+256)+1)))& (0+255)
 10018  0562  0086               	movwf	6
 10019  0563  3001               	movlw	1	; select bank3/4
 10020  0564  0087               	movwf	7
 10021  0565  0878               	movf	??i1_nrf24l01Service,w
 10022  0566  0081               	movwf	1
 10023  0567  3001               	movlw	1
 10024  0568  00F8               	movwf	??i1_nrf24l01Service
 10025  0569  0878               	movf	??i1_nrf24l01Service,w
 10026  056A  07FB               	addwf	i1nrf24l01Service@i,f
 10027  056B                     i1l3723:	
 10028  056B  087A               	movf	i1nrf24l01Service@width,w
 10029  056C  027B               	subwf	i1nrf24l01Service@i,w
 10030  056D  1803               	skipnc
 10031  056E  2D73               	goto	i1l3727
 10032  056F  3020               	movlw	32
 10033  0570  027B               	subwf	i1nrf24l01Service@i,w
 10034  0571  1C03               	skipc
 10035  0572  2D5B               	goto	i1l3719
 10036  0573                     i1l3727:	
 10037                           
 10038                           ;nrf24l01.c: 333: };nrf24l01.c: 336: nrf24l01SPIEnd();
 10039  0573  3195  252B  3184   	fcall	_nrf24l01SPIEnd
 10040                           
 10041                           ;nrf24l01.c: 339: nrf24l01CEHigh();
 10042  0576  3195  2519  3184   	fcall	_nrf24l01CEHigh
 10043                           
 10044                           ;nrf24l01.c: 342: RXPacket.packetData.Pipe = status.statusRegister.RX_P_NO;
 10045  0579  0021               	movlb	1	; select bank1
 10046  057A  0C68               	rrf	(_status^(0+128)+1),w	;volatile
 10047  057B  3907               	andlw	7
 10048  057C  00F8               	movwf	??i1_nrf24l01Service
 10049  057D  0EF8               	swapf	??i1_nrf24l01Service,f
 10050  057E  0023               	movlb	3	; select bank3
 10051  057F  0820               	movf	_RXPacket^(0+384),w
 10052  0580  0678               	xorwf	??i1_nrf24l01Service,w
 10053  0581  398F               	andlw	-113
 10054  0582  0678               	xorwf	??i1_nrf24l01Service,w
 10055  0583  00A0               	movwf	_RXPacket^(0+384)
 10056                           
 10057                           ;nrf24l01.c: 345: RXPacket.packetData.RPD = nrf24l01Send((unsigned) 0b00000000 | (unsign
      +                          ed) 0x09, 0);
 10058  0584  01F1               	clrf	i1nrf24l01Send@data
 10059  0585  3009               	movlw	9
 10060  0586  3195  25DE  3184   	fcall	i1_nrf24l01Send
 10061  0589  00F8               	movwf	??i1_nrf24l01Service
 10062  058A  0023               	movlb	3	; select bank3
 10063  058B  0820               	movf	_RXPacket^(0+384),w
 10064  058C  0678               	xorwf	??i1_nrf24l01Service,w
 10065  058D  39FE               	andlw	-2
 10066  058E  0678               	xorwf	??i1_nrf24l01Service,w
 10067  058F  00A0               	movwf	_RXPacket^(0+384)
 10068                           
 10069                           ;nrf24l01.c: 347: status.RX = statuses.RX.Ready;
 10070  0590  303A               	movlw	low ((_statuses+6)| (0+32768))
 10071  0591  0084               	movwf	4
 10072  0592  3098               	movlw	high ((_statuses+6)| (0+32768))
 10073  0593  0085               	movwf	5
 10074  0594  0800               	movf	0,w	;code access
 10075  0595  00F8               	movwf	??i1_nrf24l01Service
 10076  0596  0EF8               	swapf	??i1_nrf24l01Service,f
 10077  0597  0021               	movlb	1	; select bank1
 10078  0598  0867               	movf	_status^(0+128),w	;volatile
 10079  0599  0678               	xorwf	??i1_nrf24l01Service,w
 10080  059A  390F               	andlw	-241
 10081  059B  0678               	xorwf	??i1_nrf24l01Service,w
 10082  059C  00E7               	movwf	_status^(0+128)	;volatile
 10083  059D                     i1l3737:	
 10084                           
 10085                           ;nrf24l01.c: 348: };nrf24l01.c: 350: if (status.RX == statuses.RX.Ready){
 10086  059D  303A               	movlw	low ((_statuses+6)| (0+32768))
 10087  059E  0084               	movwf	4
 10088  059F  3098               	movlw	high ((_statuses+6)| (0+32768))
 10089  05A0  0085               	movwf	5
 10090  05A1  0800               	movf	0,w	;code access
 10091  05A2  00F8               	movwf	??i1_nrf24l01Service
 10092  05A3  0E67               	swapf	_status^(0+128),w	;volatile
 10093  05A4  390F               	andlw	15
 10094  05A5  0678               	xorwf	??i1_nrf24l01Service,w
 10095  05A6  1D03               	skipz
 10096  05A7  2DDF               	goto	i1l3749
 10097                           
 10098                           ;nrf24l01.c: 353: if (RXPacket.packetData.IsACK){
 10099  05A8  0023               	movlb	3	; select bank3
 10100  05A9  1DA0               	btfss	_RXPacket^(0+384),3
 10101  05AA  2DDF               	goto	i1l3749
 10102                           
 10103                           ;nrf24l01.c: 355: if (status.TX == statuses.TX.PendingACK){
 10104  05AB  3037               	movlw	low ((_statuses+3)| (0+32768))
 10105  05AC  0084               	movwf	4
 10106  05AD  3098               	movlw	high ((_statuses+3)| (0+32768))
 10107  05AE  0085               	movwf	5
 10108  05AF  0800               	movf	0,w	;code access
 10109  05B0  00F8               	movwf	??i1_nrf24l01Service
 10110  05B1  0021               	movlb	1	; select bank1
 10111  05B2  0867               	movf	_status^(0+128),w	;volatile
 10112  05B3  390F               	andlw	15
 10113  05B4  0678               	xorwf	??i1_nrf24l01Service,w
 10114  05B5  1D03               	skipz
 10115  05B6  2DDF               	goto	i1l3749
 10116                           
 10117                           ;nrf24l01.c: 357: if (strcmp(RXPacket.Message, TXPacket.Message) == 0){
 10118  05B7  30C2               	movlw	(low ((_TXPacket| (0+256)+1)))& (0+255)
 10119  05B8  00F8               	movwf	??i1_nrf24l01Service
 10120  05B9  0878               	movf	??i1_nrf24l01Service,w
 10121  05BA  00F0               	movwf	i1strcmp@s2
 10122  05BB  30A1               	movlw	(low ((_RXPacket| (0+256)+1)))& (0+255)
 10123  05BC  3197  2759  3184   	fcall	i1_strcmp
 10124  05BF  0870               	movf	?i1_strcmp,w
 10125  05C0  0471               	iorwf	?i1_strcmp+1,w
 10126  05C1  1D03               	btfss	3,2
 10127  05C2  2DDF               	goto	i1l3749
 10128                           
 10129                           ;nrf24l01.c: 358: status.TX = statuses.TX.Idle;
 10130  05C3  3034               	movlw	low (_statuses| (0+32768))
 10131  05C4  0084               	movwf	4
 10132  05C5  3098               	movlw	high (_statuses| (0+32768))
 10133  05C6  0085               	movwf	5
 10134  05C7  0800               	movf	0,w	;code access
 10135  05C8  00F8               	movwf	??i1_nrf24l01Service
 10136  05C9  0021               	movlb	1	; select bank1
 10137  05CA  0867               	movf	_status^(0+128),w	;volatile
 10138  05CB  0678               	xorwf	??i1_nrf24l01Service,w
 10139  05CC  39F0               	andlw	-16
 10140  05CD  0678               	xorwf	??i1_nrf24l01Service,w
 10141  05CE  00E7               	movwf	_status^(0+128)	;volatile
 10142                           
 10143                           ;nrf24l01.c: 359: status.RX = statuses.RX.Idle;
 10144  05CF  3038               	movlw	low ((_statuses+4)| (0+32768))
 10145  05D0  0084               	movwf	4
 10146  05D1  3098               	movlw	high ((_statuses+4)| (0+32768))
 10147  05D2  0085               	movwf	5
 10148  05D3  0800               	movf	0,w	;code access
 10149  05D4  00F8               	movwf	??i1_nrf24l01Service
 10150  05D5  0EF8               	swapf	??i1_nrf24l01Service,f
 10151  05D6  0867               	movf	_status^(0+128),w	;volatile
 10152  05D7  0678               	xorwf	??i1_nrf24l01Service,w
 10153  05D8  390F               	andlw	-241
 10154  05D9  0678               	xorwf	??i1_nrf24l01Service,w
 10155  05DA  00E7               	movwf	_status^(0+128)	;volatile
 10156                           
 10157                           ;nrf24l01.c: 361: nrf24l01SetRXMode(0);
 10158  05DB  3000               	movlw	0
 10159  05DC  3197  270B  3184   	fcall	i1_nrf24l01SetRXMode
 10160  05DF                     i1l3749:	
 10161                           
 10162                           ;nrf24l01.c: 363: };nrf24l01.c: 364: };nrf24l01.c: 365: };nrf24l01.c: 368: };nrf24l01.c:
      +                           370: if (status.RX == statuses.RX.Ready){
 10163  05DF  303A               	movlw	low ((_statuses+6)| (0+32768))
 10164  05E0  0084               	movwf	4
 10165  05E1  3098               	movlw	high ((_statuses+6)| (0+32768))
 10166  05E2  0085               	movwf	5
 10167  05E3  0800               	movf	0,w	;code access
 10168  05E4  00F8               	movwf	??i1_nrf24l01Service
 10169  05E5  0021               	movlb	1	; select bank1
 10170  05E6  0E67               	swapf	_status^(0+128),w	;volatile
 10171  05E7  390F               	andlw	15
 10172  05E8  0678               	xorwf	??i1_nrf24l01Service,w
 10173  05E9  1D03               	skipz
 10174  05EA  2DF4               	goto	i1l3753
 10175                           
 10176                           ;nrf24l01.c: 371: counter++;
 10177  05EB  3001               	movlw	1
 10178  05EC  0022               	movlb	2	; select bank2
 10179  05ED  07D1               	addwf	_counter^(0+256),f
 10180  05EE  3000               	movlw	0
 10181  05EF  3DD2               	addwfc	(_counter+1)^(0+256),f
 10182  05F0  3000               	movlw	0
 10183  05F1  3DD3               	addwfc	(_counter+2)^(0+256),f
 10184  05F2  3000               	movlw	0
 10185  05F3  3DD4               	addwfc	(_counter+3)^(0+256),f
 10186  05F4                     i1l3753:	
 10187                           
 10188                           ;nrf24l01.c: 372: };nrf24l01.c: 374: if (status.TX == statuses.TX.PendingACK){
 10189  05F4  3037               	movlw	low ((_statuses+3)| (0+32768))
 10190  05F5  0084               	movwf	4
 10191  05F6  3098               	movlw	high ((_statuses+3)| (0+32768))
 10192  05F7  0085               	movwf	5
 10193  05F8  0800               	movf	0,w	;code access
 10194  05F9  00F8               	movwf	??i1_nrf24l01Service
 10195  05FA  0021               	movlb	1	; select bank1
 10196  05FB  0867               	movf	_status^(0+128),w	;volatile
 10197  05FC  390F               	andlw	15
 10198  05FD  0678               	xorwf	??i1_nrf24l01Service,w
 10199  05FE  1D03               	skipz
 10200  05FF  0008               	return
 10201                           
 10202                           ;nrf24l01.c: 375: if (!status.retryCount--){
 10203  0600  3001               	movlw	1
 10204  0601  02EA               	subwf	(_status^(0+128)+3),f	;volatile
 10205  0602  0A6A               	incf	(_status^(0+128)+3),w	;volatile
 10206  0603  1D03               	btfss	3,2
 10207  0604  0008               	return
 10208                           
 10209                           ;nrf24l01.c: 376: status.TX = statuses.TX.Ready;
 10210  0605  3035               	movlw	low ((_statuses+1)| (0+32768))
 10211  0606  0084               	movwf	4
 10212  0607  3098               	movlw	high ((_statuses+1)| (0+32768))
 10213  0608  0085               	movwf	5
 10214  0609  0800               	movf	0,w	;code access
 10215  060A  00F8               	movwf	??i1_nrf24l01Service
 10216  060B  0867               	movf	_status^(0+128),w	;volatile
 10217  060C  0678               	xorwf	??i1_nrf24l01Service,w
 10218  060D  39F0               	andlw	-16
 10219  060E  0678               	xorwf	??i1_nrf24l01Service,w
 10220  060F  00E7               	movwf	_status^(0+128)	;volatile
 10221  0610  0008               	return
 10222  0611                     __end_ofi1_nrf24l01Service:	
 10223                           
 10224                           	psect	text45
 10225  162F                     __ptext45:	
 10226 ;; *************** function i1_strlen *****************
 10227 ;; Defined at:
 10228 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\strlen.c"
 10229 ;; Parameters:    Size  Location     Type
 10230 ;;  s               2    0[COMMON] PTR const unsigned char 
 10231 ;;		 -> TXPacket.Message(32), TXPacket(33), romDataMap(28), 
 10232 ;; Auto vars:     Size  Location     Type
 10233 ;;  strlen          2    4[COMMON] PTR const unsigned char 
 10234 ;;		 -> TXPacket.Message(32), TXPacket(33), romDataMap(28), 
 10235 ;; Return value:  Size  Location     Type
 10236 ;;                  2    0[COMMON] unsigned int 
 10237 ;; Registers used:
 10238 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 10239 ;; Tracked objects:
 10240 ;;		On entry : 0/0
 10241 ;;		On exit  : 0/0
 10242 ;;		Unchanged: 0/0
 10243 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10244 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10245 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10246 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10247 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10248 ;;Total ram usage:        6 bytes
 10249 ;; Hardware stack levels used:    1
 10250 ;; This function calls:
 10251 ;;		Nothing
 10252 ;; This function is called by:
 10253 ;;		i1_nrf24l01Service
 10254 ;; This function uses a non-reentrant model
 10255 ;;
 10256                           
 10257                           
 10258                           ;psect for function i1_strlen
 10259  162F                     i1_strlen:	
 10260                           
 10261                           ;incstack = 0
 10262                           ; Regs used in i1_strlen: [wreg+fsr1l+fsr1h+status,2+status,0]
 10263  162F  0871               	movf	i1strlen@s+1,w
 10264  1630  00F5               	movwf	i1strlen@cp+1
 10265  1631  0870               	movf	i1strlen@s,w
 10266  1632  00F4               	movwf	i1strlen@cp
 10267  1633                     i1l3649:	
 10268  1633  0874               	movf	i1strlen@cp,w
 10269  1634  0086               	movwf	6
 10270  1635  0875               	movf	i1strlen@cp+1,w
 10271  1636  0087               	movwf	7
 10272  1637  0801               	movf	1,w
 10273  1638  1903               	btfsc	3,2
 10274  1639  2E3F               	goto	i1l3651
 10275  163A  3001               	movlw	1
 10276  163B  07F4               	addwf	i1strlen@cp,f
 10277  163C  3000               	movlw	0
 10278  163D  3DF5               	addwfc	i1strlen@cp+1,f
 10279  163E  2E33               	goto	i1l3649
 10280  163F                     i1l3651:	
 10281  163F  0970               	comf	i1strlen@s,w
 10282  1640  00F2               	movwf	??i1_strlen
 10283  1641  0971               	comf	i1strlen@s+1,w
 10284  1642  00F3               	movwf	??i1_strlen+1
 10285  1643  0AF2               	incf	??i1_strlen,f
 10286  1644  1903               	skipnz
 10287  1645  0AF3               	incf	??i1_strlen+1,f
 10288  1646  0874               	movf	i1strlen@cp,w
 10289  1647  0772               	addwf	??i1_strlen,w
 10290  1648  00F0               	movwf	?i1_strlen
 10291  1649  0875               	movf	i1strlen@cp+1,w
 10292  164A  3D73               	addwfc	??i1_strlen+1,w
 10293  164B  00F1               	movwf	?i1_strlen+1
 10294  164C  0008               	return
 10295  164D                     __end_ofi1_strlen:	
 10296                           
 10297                           	psect	text46
 10298  1759                     __ptext46:	
 10299 ;; *************** function i1_strcmp *****************
 10300 ;; Defined at:
 10301 ;;		line 33 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\strcmp.c"
 10302 ;; Parameters:    Size  Location     Type
 10303 ;;  s1              1    wreg     PTR const unsigned char 
 10304 ;;		 -> RXPacket.Message(32), RXPacket(33), 
 10305 ;;  s2              1    0[COMMON] PTR const unsigned char 
 10306 ;;		 -> TXPacket.Message(32), TXPacket(33), 
 10307 ;; Auto vars:     Size  Location     Type
 10308 ;;  s1              1    4[COMMON] PTR const unsigned char 
 10309 ;;		 -> RXPacket.Message(32), RXPacket(33), 
 10310 ;;  strcmp          1    3[COMMON] char 
 10311 ;; Return value:  Size  Location     Type
 10312 ;;                  2    0[COMMON] int 
 10313 ;; Registers used:
 10314 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0
 10315 ;; Tracked objects:
 10316 ;;		On entry : 0/0
 10317 ;;		On exit  : 0/0
 10318 ;;		Unchanged: 0/0
 10319 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10320 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10321 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10322 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10323 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10324 ;;Total ram usage:        5 bytes
 10325 ;; Hardware stack levels used:    1
 10326 ;; This function calls:
 10327 ;;		Nothing
 10328 ;; This function is called by:
 10329 ;;		i1_nrf24l01Service
 10330 ;; This function uses a non-reentrant model
 10331 ;;
 10332                           
 10333                           
 10334                           ;psect for function i1_strcmp
 10335  1759                     i1_strcmp:	
 10336                           
 10337                           ;incstack = 0
 10338                           ; Regs used in i1_strcmp: [wreg-fsr1h+status,2+status,0]
 10339                           ;i1strcmp@s1 stored from wreg
 10340  1759  00F4               	movwf	i1strcmp@s1
 10341  175A  2F63               	goto	i1l3055
 10342  175B                     i1l3051:	
 10343  175B  3001               	movlw	1
 10344  175C  00F2               	movwf	??i1_strcmp
 10345  175D  0872               	movf	??i1_strcmp,w
 10346  175E  07F4               	addwf	i1strcmp@s1,f
 10347  175F  3001               	movlw	1
 10348  1760  00F2               	movwf	??i1_strcmp
 10349  1761  0872               	movf	??i1_strcmp,w
 10350  1762  07F0               	addwf	i1strcmp@s2,f
 10351  1763                     i1l3055:	
 10352  1763  0874               	movf	i1strcmp@s1,w
 10353  1764  0086               	movwf	6
 10354  1765  3001               	movlw	1	; select bank2/3
 10355  1766  0087               	movwf	7
 10356  1767  0870               	movf	i1strcmp@s2,w
 10357  1768  0084               	movwf	4
 10358  1769  3001               	movlw	1	; select bank2/3
 10359  176A  0085               	movwf	5
 10360  176B  0300               	decf	0,w
 10361  176C  3AFF               	xorlw	255
 10362  176D  0701               	addwf	1,w
 10363  176E  00F2               	movwf	??i1_strcmp
 10364  176F  0872               	movf	??i1_strcmp,w
 10365  1770  00F3               	movwf	i1strcmp@r
 10366  1771  0873               	movf	i1strcmp@r,w
 10367  1772  1D03               	btfss	3,2
 10368  1773  2F7B               	goto	i1l3059
 10369  1774  0874               	movf	i1strcmp@s1,w
 10370  1775  0086               	movwf	6
 10371  1776  3001               	movlw	1	; select bank2/3
 10372  1777  0087               	movwf	7
 10373  1778  0801               	movf	1,w
 10374  1779  1D03               	btfss	3,2
 10375  177A  2F5B               	goto	i1l3051
 10376  177B                     i1l3059:	
 10377  177B  0873               	movf	i1strcmp@r,w
 10378  177C  00F0               	movwf	?i1_strcmp
 10379  177D  01F1               	clrf	?i1_strcmp+1
 10380  177E  1BF0               	btfsc	?i1_strcmp,7
 10381  177F  03F1               	decf	?i1_strcmp+1,f
 10382  1780  0008               	return
 10383  1781                     __end_ofi1_strcmp:	
 10384                           
 10385                           	psect	text47
 10386  170B                     __ptext47:	
 10387 ;; *************** function i1_nrf24l01SetRXMode *****************
 10388 ;; Defined at:
 10389 ;;		line 91 in file "nrf24l01.c"
 10390 ;; Parameters:    Size  Location     Type
 10391 ;;  rxMode          1    wreg     unsigned char 
 10392 ;; Auto vars:     Size  Location     Type
 10393 ;;  rxMode          1    5[COMMON] unsigned char 
 10394 ;; Return value:  Size  Location     Type
 10395 ;;                  1    wreg      void 
 10396 ;; Registers used:
 10397 ;;		wreg, status,2, status,0, pclath, cstack
 10398 ;; Tracked objects:
 10399 ;;		On entry : 0/0
 10400 ;;		On exit  : 0/0
 10401 ;;		Unchanged: 0/0
 10402 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10403 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10404 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10405 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10406 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10407 ;;Total ram usage:        2 bytes
 10408 ;; Hardware stack levels used:    1
 10409 ;; Hardware stack levels required when called:    3
 10410 ;; This function calls:
 10411 ;;		_nrf24l01CEHigh
 10412 ;;		_nrf24l01CELow
 10413 ;;		i1_nrf24l01Send
 10414 ;; This function is called by:
 10415 ;;		_nrf24l01ISR
 10416 ;;		i1_nrf24l01Service
 10417 ;; This function uses a non-reentrant model
 10418 ;;
 10419                           
 10420                           
 10421                           ;psect for function i1_nrf24l01SetRXMode
 10422  170B                     i1_nrf24l01SetRXMode:	
 10423                           
 10424                           ;incstack = 0
 10425                           ; Regs used in i1_nrf24l01SetRXMode: [wreg+status,2+status,0+pclath+cstack]
 10426                           ;i1nrf24l01SetRXMode@rxMode stored from wreg
 10427  170B  00F5               	movwf	i1nrf24l01SetRXMode@rxMode
 10428                           
 10429                           ;nrf24l01.c: 111: if (status.configRegister.PRIM_RX != rxMode){
 10430  170C  0021               	movlb	1	; select bank1
 10431  170D  0869               	movf	(_status^(0+128)+2),w	;volatile
 10432  170E  3901               	andlw	1
 10433  170F  0675               	xorwf	i1nrf24l01SetRXMode@rxMode,w
 10434  1710  1903               	skipnz
 10435  1711  0008               	return
 10436                           
 10437                           ;nrf24l01.c: 114: nrf24l01CELow();
 10438  1712  3195  251C  3197   	fcall	_nrf24l01CELow
 10439                           
 10440                           ;nrf24l01.c: 118: status.configRegister.PRIM_RX = rxMode;
 10441  1715  0C75               	rrf	i1nrf24l01SetRXMode@rxMode,w
 10442  1716  0021               	movlb	1	; select bank1
 10443  1717  1C03               	skipc
 10444  1718  1069               	bcf	(_status^(0+128)+2),0	;volatile
 10445  1719  1803               	skipnc
 10446  171A  1469               	bsf	(_status^(0+128)+2),0	;volatile
 10447                           
 10448                           ;nrf24l01.c: 119: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x00, status.configReg
      +                          ister.byte);
 10449  171B  0869               	movf	(_status^(0+128)+2),w	;volatile
 10450  171C  00F4               	movwf	??i1_nrf24l01SetRXMode
 10451  171D  0874               	movf	??i1_nrf24l01SetRXMode,w
 10452  171E  00F1               	movwf	i1nrf24l01Send@data
 10453  171F  3020               	movlw	32
 10454  1720  3195  25DE  3197   	fcall	i1_nrf24l01Send
 10455                           
 10456                           ;nrf24l01.c: 122: _delay((unsigned long)((120)*(32000000/4000000.0)));
 10457  1723  30C0               	movlw	192
 10458  1724                     u416_27:	
 10459  1724  3200               	nop2
 10460  1725  0B89               	decfsz	9,f
 10461  1726  2F24               	goto	u416_27
 10462                           
 10463                           ;nrf24l01.c: 125: if (rxMode){
 10464  1727  0875               	movf	i1nrf24l01SetRXMode@rxMode,w
 10465  1728  1903               	btfsc	3,2
 10466  1729  0008               	return
 10467                           
 10468                           ;nrf24l01.c: 126: nrf24l01CEHigh();
 10469  172A  3195  2519  3197   	fcall	_nrf24l01CEHigh
 10470                           
 10471                           ;nrf24l01.c: 127: _delay((unsigned long)((120)*(32000000/4000000.0)));
 10472  172D  30C0               	movlw	192
 10473  172E                     u417_27:	
 10474  172E  3200               	nop2
 10475  172F  0B89               	decfsz	9,f
 10476  1730  2F2E               	goto	u417_27
 10477  1731  0008               	return
 10478  1732                     __end_ofi1_nrf24l01SetRXMode:	
 10479                           
 10480                           	psect	text48
 10481  15DE                     __ptext48:	
 10482 ;; *************** function i1_nrf24l01Send *****************
 10483 ;; Defined at:
 10484 ;;		line 46 in file "nrf24l01.c"
 10485 ;; Parameters:    Size  Location     Type
 10486 ;;  command         1    wreg     unsigned char 
 10487 ;;  data            1    1[COMMON] unsigned char 
 10488 ;; Auto vars:     Size  Location     Type
 10489 ;;  command         1    3[COMMON] unsigned char 
 10490 ;; Return value:  Size  Location     Type
 10491 ;;                  1    wreg      unsigned char 
 10492 ;; Registers used:
 10493 ;;		wreg, status,2, status,0, pclath, cstack
 10494 ;; Tracked objects:
 10495 ;;		On entry : 0/0
 10496 ;;		On exit  : 0/0
 10497 ;;		Unchanged: 0/0
 10498 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10499 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10500 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10501 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10502 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10503 ;;Total ram usage:        3 bytes
 10504 ;; Hardware stack levels used:    1
 10505 ;; Hardware stack levels required when called:    2
 10506 ;; This function calls:
 10507 ;;		_enableInterrupts
 10508 ;;		_nrf24l01SPIEnd
 10509 ;;		_nrf24l01SPISend
 10510 ;;		_nrf24l01SPIStart
 10511 ;; This function is called by:
 10512 ;;		_nrf24l01ISR
 10513 ;;		i1_nrf24l01SetRXMode
 10514 ;;		i1_nrf24l01Service
 10515 ;; This function uses a non-reentrant model
 10516 ;;
 10517                           
 10518                           
 10519                           ;psect for function i1_nrf24l01Send
 10520  15DE                     i1_nrf24l01Send:	
 10521                           
 10522                           ;incstack = 0
 10523                           ; Regs used in i1_nrf24l01Send: [wreg+status,2+status,0+pclath+cstack]
 10524                           ;i1nrf24l01Send@command stored from wreg
 10525  15DE  00F3               	movwf	i1nrf24l01Send@command
 10526                           
 10527                           ;nrf24l01.c: 49: enableInterrupts(0);
 10528  15DF  3000               	movlw	0
 10529  15E0  3195  2532  3195   	fcall	_enableInterrupts
 10530                           
 10531                           ;nrf24l01.c: 52: nrf24l01SPIStart();
 10532  15E3  3195  253A  3195   	fcall	_nrf24l01SPIStart
 10533                           
 10534                           ;nrf24l01.c: 55: nrf24l01SPISend(command);
 10535  15E6  0873               	movf	i1nrf24l01Send@command,w
 10536  15E7  3195  254B  3195   	fcall	_nrf24l01SPISend
 10537                           
 10538                           ;nrf24l01.c: 58: data = nrf24l01SPISend(data);
 10539  15EA  0871               	movf	i1nrf24l01Send@data,w
 10540  15EB  3195  254B  3195   	fcall	_nrf24l01SPISend
 10541  15EE  00F2               	movwf	??i1_nrf24l01Send
 10542  15EF  0872               	movf	??i1_nrf24l01Send,w
 10543  15F0  00F1               	movwf	i1nrf24l01Send@data
 10544                           
 10545                           ;nrf24l01.c: 61: nrf24l01SPIEnd();
 10546  15F1  3195  252B  3195   	fcall	_nrf24l01SPIEnd
 10547                           
 10548                           ;nrf24l01.c: 64: enableInterrupts(1);
 10549  15F4  3001               	movlw	1
 10550  15F5  3195  2532         	fcall	_enableInterrupts
 10551                           
 10552                           ;nrf24l01.c: 66: return data;
 10553  15F7  0871               	movf	i1nrf24l01Send@data,w
 10554  15F8  0008               	return
 10555  15F9                     __end_ofi1_nrf24l01Send:	
 10556                           
 10557                           	psect	text49
 10558  153A                     __ptext49:	
 10559 ;; *************** function _nrf24l01SPIStart *****************
 10560 ;; Defined at:
 10561 ;;		line 82 in file "interface.c"
 10562 ;; Parameters:    Size  Location     Type
 10563 ;;		None
 10564 ;; Auto vars:     Size  Location     Type
 10565 ;;		None
 10566 ;; Return value:  Size  Location     Type
 10567 ;;                  1    wreg      void 
 10568 ;; Registers used:
 10569 ;;		wreg, status,2, status,0, pclath, cstack
 10570 ;; Tracked objects:
 10571 ;;		On entry : 0/0
 10572 ;;		On exit  : 0/0
 10573 ;;		Unchanged: 0/0
 10574 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10575 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10576 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10577 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10578 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10579 ;;Total ram usage:        0 bytes
 10580 ;; Hardware stack levels used:    1
 10581 ;; Hardware stack levels required when called:    8
 10582 ;; This function calls:
 10583 ;;		_nrf24l01CSLow
 10584 ;; This function is called by:
 10585 ;;		_nrf24l01Send
 10586 ;;		_nrf24l01SetTXPipe
 10587 ;;		_nrf24l01Service
 10588 ;;		_nrf24l01InitRegisters
 10589 ;;		i1_nrf24l01Send
 10590 ;;		i1_nrf24l01Service
 10591 ;; This function uses a non-reentrant model
 10592 ;;
 10593                           
 10594                           
 10595                           ;psect for function _nrf24l01SPIStart
 10596  153A                     _nrf24l01SPIStart:	
 10597                           
 10598                           ;interface.c: 83: nrf24l01CSLow();
 10599                           
 10600                           ;incstack = 0
 10601 ;; hardware stack exceeded
 10602                           ; Regs used in _nrf24l01SPIStart: [wreg+status,2+status,0+pclath+cstack]
 10603  153A  3195  2522  3195   	fcall	_nrf24l01CSLow
 10604                           
 10605                           ;interface.c: 84: _delay((unsigned long)((10)*(32000000/4000000.0)));
 10606  153D  301A               	movlw	26
 10607  153E                     u418_27:	
 10608  153E  0B89               	decfsz	9,f
 10609  153F  2D3E               	goto	u418_27
 10610  1540  3200               	nop2
 10611  1541  0008               	return
 10612  1542                     __end_of_nrf24l01SPIStart:	
 10613                           
 10614                           	psect	text50
 10615  1522                     __ptext50:	
 10616 ;; *************** function _nrf24l01CSLow *****************
 10617 ;; Defined at:
 10618 ;;		line 17 in file "interface.c"
 10619 ;; Parameters:    Size  Location     Type
 10620 ;;		None
 10621 ;; Auto vars:     Size  Location     Type
 10622 ;;		None
 10623 ;; Return value:  Size  Location     Type
 10624 ;;                  1    wreg      void 
 10625 ;; Registers used:
 10626 ;;		None
 10627 ;; Tracked objects:
 10628 ;;		On entry : 0/0
 10629 ;;		On exit  : 0/0
 10630 ;;		Unchanged: 0/0
 10631 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10632 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10633 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10634 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10635 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10636 ;;Total ram usage:        0 bytes
 10637 ;; Hardware stack levels used:    1
 10638 ;; Hardware stack levels required when called:    7
 10639 ;; This function calls:
 10640 ;;		Nothing
 10641 ;; This function is called by:
 10642 ;;		_nrf24l01SPIStart
 10643 ;; This function uses a non-reentrant model
 10644 ;;
 10645                           
 10646                           
 10647                           ;psect for function _nrf24l01CSLow
 10648  1522                     _nrf24l01CSLow:	
 10649                           
 10650                           ;interface.c: 18: PORTAbits.RA1 = 0;
 10651                           
 10652                           ;incstack = 0
 10653 ;; hardware stack exceeded
 10654                           ; Regs used in _nrf24l01CSLow: []
 10655  1522  0020               	movlb	0	; select bank0
 10656  1523  108C               	bcf	12,1	;volatile
 10657  1524  0008               	return
 10658  1525                     __end_of_nrf24l01CSLow:	
 10659                           
 10660                           	psect	text51
 10661  154B                     __ptext51:	
 10662 ;; *************** function _nrf24l01SPISend *****************
 10663 ;; Defined at:
 10664 ;;		line 69 in file "interface.c"
 10665 ;; Parameters:    Size  Location     Type
 10666 ;;  data            1    wreg     unsigned char 
 10667 ;; Auto vars:     Size  Location     Type
 10668 ;;  data            1    0[COMMON] unsigned char 
 10669 ;; Return value:  Size  Location     Type
 10670 ;;                  1    wreg      unsigned char 
 10671 ;; Registers used:
 10672 ;;		wreg
 10673 ;; Tracked objects:
 10674 ;;		On entry : 0/0
 10675 ;;		On exit  : 0/0
 10676 ;;		Unchanged: 0/0
 10677 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10678 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10679 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10680 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10681 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10682 ;;Total ram usage:        0 bytes
 10683 ;; Hardware stack levels used:    1
 10684 ;; Hardware stack levels required when called:    7
 10685 ;; This function calls:
 10686 ;;		Nothing
 10687 ;; This function is called by:
 10688 ;;		_nrf24l01Send
 10689 ;;		_nrf24l01SetTXPipe
 10690 ;;		_nrf24l01Service
 10691 ;;		_nrf24l01InitRegisters
 10692 ;;		i1_nrf24l01Send
 10693 ;;		i1_nrf24l01Service
 10694 ;; This function uses a non-reentrant model
 10695 ;;
 10696                           
 10697                           
 10698                           ;psect for function _nrf24l01SPISend
 10699  154B                     _nrf24l01SPISend:	
 10700                           
 10701                           ;incstack = 0
 10702 ;; hardware stack exceeded
 10703                           ; Regs used in _nrf24l01SPISend: [wreg]
 10704                           ;nrf24l01SPISend@data stored from wreg
 10705  154B  00F0               	movwf	nrf24l01SPISend@data
 10706                           
 10707                           ;interface.c: 70: SSP1BUF = data;
 10708  154C  0870               	movf	nrf24l01SPISend@data,w
 10709  154D  0024               	movlb	4	; select bank4
 10710  154E  0091               	movwf	17	;volatile
 10711                           
 10712                           ;interface.c: 72: PORTCbits.RC4 = 1;
 10713  154F  0020               	movlb	0	; select bank0
 10714  1550  160E               	bsf	14,4	;volatile
 10715  1551                     i1l56:	
 10716                           ;interface.c: 74: while (!SSP1STATbits.BF){
 10717                           
 10718  1551  0024               	movlb	4	; select bank4
 10719  1552  1814               	btfsc	20,0	;volatile
 10720  1553  2D56               	goto	i1l2307
 10721                           
 10722                           ;interface.c: 75: __nop();
 10723  1554  0000               	nop
 10724  1555  2D51               	goto	i1l56
 10725  1556                     i1l2307:	
 10726                           
 10727                           ;interface.c: 76: };interface.c: 78: return SSP1BUF;
 10728  1556  0811               	movf	17,w	;volatile
 10729  1557  0008               	return
 10730  1558                     __end_of_nrf24l01SPISend:	
 10731                           
 10732                           	psect	text52
 10733  152B                     __ptext52:	
 10734 ;; *************** function _nrf24l01SPIEnd *****************
 10735 ;; Defined at:
 10736 ;;		line 88 in file "interface.c"
 10737 ;; Parameters:    Size  Location     Type
 10738 ;;		None
 10739 ;; Auto vars:     Size  Location     Type
 10740 ;;		None
 10741 ;; Return value:  Size  Location     Type
 10742 ;;                  1    wreg      void 
 10743 ;; Registers used:
 10744 ;;		wreg, status,2, status,0, pclath, cstack
 10745 ;; Tracked objects:
 10746 ;;		On entry : 0/0
 10747 ;;		On exit  : 0/0
 10748 ;;		Unchanged: 0/0
 10749 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10750 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10751 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10752 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10753 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10754 ;;Total ram usage:        0 bytes
 10755 ;; Hardware stack levels used:    1
 10756 ;; Hardware stack levels required when called:    8
 10757 ;; This function calls:
 10758 ;;		_nrf24l01CSHigh
 10759 ;; This function is called by:
 10760 ;;		_nrf24l01Send
 10761 ;;		_nrf24l01SetTXPipe
 10762 ;;		_nrf24l01Service
 10763 ;;		_nrf24l01InitRegisters
 10764 ;;		i1_nrf24l01Send
 10765 ;;		i1_nrf24l01Service
 10766 ;; This function uses a non-reentrant model
 10767 ;;
 10768                           
 10769                           
 10770                           ;psect for function _nrf24l01SPIEnd
 10771  152B                     _nrf24l01SPIEnd:	
 10772                           
 10773                           ;interface.c: 89: _delay((unsigned long)((10)*(32000000/4000000.0)));
 10774                           
 10775                           ;incstack = 0
 10776 ;; hardware stack exceeded
 10777                           ; Regs used in _nrf24l01SPIEnd: [wreg+status,2+status,0+pclath+cstack]
 10778  152B  301A               	movlw	26
 10779  152C                     u419_27:	
 10780  152C  0B89               	decfsz	9,f
 10781  152D  2D2C               	goto	u419_27
 10782  152E  3200               	nop2
 10783                           
 10784                           ;interface.c: 90: nrf24l01CSHigh();
 10785  152F  3195  251F         	fcall	_nrf24l01CSHigh
 10786  1531  0008               	return
 10787  1532                     __end_of_nrf24l01SPIEnd:	
 10788                           
 10789                           	psect	text53
 10790  151F                     __ptext53:	
 10791 ;; *************** function _nrf24l01CSHigh *****************
 10792 ;; Defined at:
 10793 ;;		line 22 in file "interface.c"
 10794 ;; Parameters:    Size  Location     Type
 10795 ;;		None
 10796 ;; Auto vars:     Size  Location     Type
 10797 ;;		None
 10798 ;; Return value:  Size  Location     Type
 10799 ;;                  1    wreg      void 
 10800 ;; Registers used:
 10801 ;;		None
 10802 ;; Tracked objects:
 10803 ;;		On entry : 0/0
 10804 ;;		On exit  : 0/0
 10805 ;;		Unchanged: 0/0
 10806 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10807 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10808 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10809 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10810 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10811 ;;Total ram usage:        0 bytes
 10812 ;; Hardware stack levels used:    1
 10813 ;; Hardware stack levels required when called:    7
 10814 ;; This function calls:
 10815 ;;		Nothing
 10816 ;; This function is called by:
 10817 ;;		_nrf24l01SPIEnd
 10818 ;; This function uses a non-reentrant model
 10819 ;;
 10820                           
 10821                           
 10822                           ;psect for function _nrf24l01CSHigh
 10823  151F                     _nrf24l01CSHigh:	
 10824                           
 10825                           ;interface.c: 23: PORTAbits.RA1 = 1;
 10826                           
 10827                           ;incstack = 0
 10828 ;; hardware stack exceeded
 10829                           ; Regs used in _nrf24l01CSHigh: []
 10830  151F  0020               	movlb	0	; select bank0
 10831  1520  148C               	bsf	12,1	;volatile
 10832  1521  0008               	return
 10833  1522                     __end_of_nrf24l01CSHigh:	
 10834                           
 10835                           	psect	text54
 10836  1532                     __ptext54:	
 10837 ;; *************** function _enableInterrupts *****************
 10838 ;; Defined at:
 10839 ;;		line 94 in file "interface.c"
 10840 ;; Parameters:    Size  Location     Type
 10841 ;;  enable          1    wreg     unsigned char 
 10842 ;; Auto vars:     Size  Location     Type
 10843 ;;  enable          1    0[COMMON] unsigned char 
 10844 ;; Return value:  Size  Location     Type
 10845 ;;                  1    wreg      void 
 10846 ;; Registers used:
 10847 ;;		wreg, status,0
 10848 ;; Tracked objects:
 10849 ;;		On entry : 0/0
 10850 ;;		On exit  : 0/0
 10851 ;;		Unchanged: 0/0
 10852 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10853 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10854 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10855 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10856 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10857 ;;Total ram usage:        0 bytes
 10858 ;; Hardware stack levels used:    1
 10859 ;; Hardware stack levels required when called:    7
 10860 ;; This function calls:
 10861 ;;		Nothing
 10862 ;; This function is called by:
 10863 ;;		_nrf24l01Send
 10864 ;;		i1_nrf24l01Send
 10865 ;; This function uses a non-reentrant model
 10866 ;;
 10867                           
 10868                           
 10869                           ;psect for function _enableInterrupts
 10870  1532                     _enableInterrupts:	
 10871                           
 10872                           ;incstack = 0
 10873 ;; hardware stack exceeded
 10874                           ; Regs used in _enableInterrupts: [wreg+status,0]
 10875                           ;enableInterrupts@enable stored from wreg
 10876  1532  00F0               	movwf	enableInterrupts@enable
 10877                           
 10878                           ;interface.c: 95: PIE0bits.INTE = enable;
 10879  1533  0C70               	rrf	enableInterrupts@enable,w
 10880  1534  0021               	movlb	1	; select bank1
 10881  1535  1C03               	skipc
 10882  1536  1010               	bcf	16,0	;volatile
 10883  1537  1803               	skipnc
 10884  1538  1410               	bsf	16,0	;volatile
 10885  1539  0008               	return
 10886  153A                     __end_of_enableInterrupts:	
 10887                           
 10888                           	psect	text55
 10889  151C                     __ptext55:	
 10890 ;; *************** function _nrf24l01CELow *****************
 10891 ;; Defined at:
 10892 ;;		line 7 in file "interface.c"
 10893 ;; Parameters:    Size  Location     Type
 10894 ;;		None
 10895 ;; Auto vars:     Size  Location     Type
 10896 ;;		None
 10897 ;; Return value:  Size  Location     Type
 10898 ;;                  1    wreg      void 
 10899 ;; Registers used:
 10900 ;;		None
 10901 ;; Tracked objects:
 10902 ;;		On entry : 0/0
 10903 ;;		On exit  : 0/0
 10904 ;;		Unchanged: 0/0
 10905 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10906 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10907 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10908 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10909 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10910 ;;Total ram usage:        0 bytes
 10911 ;; Hardware stack levels used:    1
 10912 ;; Hardware stack levels required when called:    7
 10913 ;; This function calls:
 10914 ;;		Nothing
 10915 ;; This function is called by:
 10916 ;;		_nrf24l01SetRXMode
 10917 ;;		_nrf24l01Service
 10918 ;;		_nrf24l01Init
 10919 ;;		i1_nrf24l01SetRXMode
 10920 ;;		i1_nrf24l01Service
 10921 ;; This function uses a non-reentrant model
 10922 ;;
 10923                           
 10924                           
 10925                           ;psect for function _nrf24l01CELow
 10926  151C                     _nrf24l01CELow:	
 10927                           
 10928                           ;interface.c: 8: PORTAbits.RA0 = 0;
 10929                           
 10930                           ;incstack = 0
 10931 ;; hardware stack exceeded
 10932                           ; Regs used in _nrf24l01CELow: []
 10933  151C  0020               	movlb	0	; select bank0
 10934  151D  100C               	bcf	12,0	;volatile
 10935  151E  0008               	return
 10936  151F                     __end_of_nrf24l01CELow:	
 10937                           
 10938                           	psect	text56
 10939  1519                     __ptext56:	
 10940 ;; *************** function _nrf24l01CEHigh *****************
 10941 ;; Defined at:
 10942 ;;		line 12 in file "interface.c"
 10943 ;; Parameters:    Size  Location     Type
 10944 ;;		None
 10945 ;; Auto vars:     Size  Location     Type
 10946 ;;		None
 10947 ;; Return value:  Size  Location     Type
 10948 ;;                  1    wreg      void 
 10949 ;; Registers used:
 10950 ;;		None
 10951 ;; Tracked objects:
 10952 ;;		On entry : 0/0
 10953 ;;		On exit  : 0/0
 10954 ;;		Unchanged: 0/0
 10955 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10956 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10957 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10958 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10959 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10960 ;;Total ram usage:        0 bytes
 10961 ;; Hardware stack levels used:    1
 10962 ;; Hardware stack levels required when called:    7
 10963 ;; This function calls:
 10964 ;;		Nothing
 10965 ;; This function is called by:
 10966 ;;		_nrf24l01SetRXMode
 10967 ;;		_nrf24l01Service
 10968 ;;		_nrf24l01Init
 10969 ;;		i1_nrf24l01SetRXMode
 10970 ;;		i1_nrf24l01Service
 10971 ;; This function uses a non-reentrant model
 10972 ;;
 10973                           
 10974                           
 10975                           ;psect for function _nrf24l01CEHigh
 10976  1519                     _nrf24l01CEHigh:	
 10977                           
 10978                           ;interface.c: 13: PORTAbits.RA0 = 1;
 10979                           
 10980                           ;incstack = 0
 10981 ;; hardware stack exceeded
 10982                           ; Regs used in _nrf24l01CEHigh: []
 10983  1519  0020               	movlb	0	; select bank0
 10984  151A  140C               	bsf	12,0	;volatile
 10985  151B  0008               	return
 10986  151C                     __end_of_nrf24l01CEHigh:	
 10987                           
 10988                           	psect	text57
 10989  1593                     __ptext57:	
 10990 ;; *************** function i1_memset *****************
 10991 ;; Defined at:
 10992 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\memset.c"
 10993 ;; Parameters:    Size  Location     Type
 10994 ;;  p1              2    0[COMMON] PTR void 
 10995 ;;		 -> RXPacket(33), main@packet(33), loop@packet(33), 
 10996 ;;  c               2    2[COMMON] int 
 10997 ;;  n               2    4[COMMON] unsigned int 
 10998 ;; Auto vars:     Size  Location     Type
 10999 ;;  memset          2    6[COMMON] PTR unsigned char 
 11000 ;;		 -> RXPacket(33), main@packet(33), loop@packet(33), 
 11001 ;; Return value:  Size  Location     Type
 11002 ;;                  1    wreg      PTR void 
 11003 ;; Registers used:
 11004 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 11005 ;; Tracked objects:
 11006 ;;		On entry : 0/0
 11007 ;;		On exit  : 0/0
 11008 ;;		Unchanged: 0/0
 11009 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11010 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11011 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11012 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11013 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11014 ;;Total ram usage:        8 bytes
 11015 ;; Hardware stack levels used:    1
 11016 ;; This function calls:
 11017 ;;		Nothing
 11018 ;; This function is called by:
 11019 ;;		i1_nrf24l01Service
 11020 ;; This function uses a non-reentrant model
 11021 ;;
 11022                           
 11023                           
 11024                           ;psect for function i1_memset
 11025  1593                     i1_memset:	
 11026                           
 11027                           ;incstack = 0
 11028                           ; Regs used in i1_memset: [wreg+fsr1l+fsr1h+status,2+status,0]
 11029  1593  0871               	movf	i1memset@p1+1,w
 11030  1594  00F7               	movwf	i1memset@p+1
 11031  1595  0870               	movf	i1memset@p1,w
 11032  1596  00F6               	movwf	i1memset@p
 11033  1597                     i1l3047:	
 11034  1597  3001               	movlw	1
 11035  1598  02F4               	subwf	i1memset@n,f
 11036  1599  3000               	movlw	0
 11037  159A  3BF5               	subwfb	i1memset@n+1,f
 11038  159B  0A74               	incf	i1memset@n,w
 11039  159C  1903               	btfsc	3,2
 11040  159D  0A75               	incf	i1memset@n+1,w
 11041  159E  1903               	btfsc	3,2
 11042  159F  0008               	return
 11043  15A0  0876               	movf	i1memset@p,w
 11044  15A1  0086               	movwf	6
 11045  15A2  0877               	movf	i1memset@p+1,w
 11046  15A3  0087               	movwf	7
 11047  15A4  0872               	movf	i1memset@c,w
 11048  15A5  0081               	movwf	1
 11049  15A6  3001               	movlw	1
 11050  15A7  07F6               	addwf	i1memset@p,f
 11051  15A8  3000               	movlw	0
 11052  15A9  3DF7               	addwfc	i1memset@p+1,f
 11053  15AA  2D97               	goto	i1l3047
 11054  15AB                     __end_ofi1_memset:	
 11055                           ;	Return value of i1_memset is never used
 11056                           
 11057  007E                     btemp	set	126	;btemp
 11058  007E                     int$flags	set	126
 11059  007E                     wtemp0	set	126


Data Sizes:
    Strings     50
    Constant    56
    Data        1
    BSS         120
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     13      14
    BANK0            80     80      80
    BANK1            80     71      76
    BANK2            80     49      70
    BANK3            80      0      66
    BANK4            80      0      28
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    ftoa@status	PTR int  size(1) Largest target is 2
		 -> sendMessage@status(BANK1[2]), 

    strlen@s	PTR const unsigned char  size(2) Largest target is 33
		 -> TXPacket.Message(BANK3[32]), TXPacket(BANK3[33]), romDataMap(BANK4[28]), 

    strlen@cp	PTR const unsigned char  size(2) Largest target is 33
		 -> TXPacket.Message(BANK3[32]), TXPacket(BANK3[33]), romDataMap(BANK4[28]), 

    strcpy@from	PTR const unsigned char  size(2) Largest target is 33
		 -> romDataMap.name(BANK4[16]), packet.Message(BANK0[32]), packet.Message(BANK0[32]), main@packet(BANK1[33]), 
		 -> STR_8(CODE[4]), loop@packet(BANK2[33]), romDataMap(BANK4[28]), 

    strcpy@to	PTR unsigned char  size(2) Largest target is 33
		 -> TXPacket(BANK3[33]), main@packet(BANK1[33]), loop@packet(BANK2[33]), romDataMap(BANK4[28]), 

    strcpy@cp	PTR unsigned char  size(2) Largest target is 33
		 -> TXPacket(BANK3[33]), main@packet(BANK1[33]), loop@packet(BANK2[33]), romDataMap(BANK4[28]), 

    strcmp@s2	PTR const unsigned char  size(1) Largest target is 33
		 -> TXPacket.Message(BANK3[32]), TXPacket(BANK3[33]), 

    strcmp@s1	PTR const unsigned char  size(1) Largest target is 33
		 -> RXPacket.Message(BANK3[32]), RXPacket(BANK3[33]), 

    strcat@from	PTR const unsigned char  size(2) Largest target is 17
		 -> ftoa@buf(BANK2[17]), STR_9(CODE[5]), STR_7(CODE[6]), STR_6(CODE[5]), 
		 -> STR_5(CODE[7]), STR_4(CODE[5]), STR_3(CODE[5]), STR_2(CODE[2]), 
		 -> STR_1(CODE[2]), 

    strcat@to	PTR unsigned char  size(2) Largest target is 33
		 -> main@packet(BANK1[33]), loop@packet(BANK2[33]), 

    strcat@cp	PTR unsigned char  size(2) Largest target is 33
		 -> main@packet(BANK1[33]), loop@packet(BANK2[33]), 

    memset@p1	PTR void  size(2) Largest target is 33
		 -> RXPacket(BANK3[33]), main@packet(BANK1[33]), loop@packet(BANK2[33]), 

    memset@p	PTR unsigned char  size(2) Largest target is 33
		 -> RXPacket(BANK3[33]), main@packet(BANK1[33]), loop@packet(BANK2[33]), 

    ftoa@cp	PTR unsigned char  size(1) Largest target is 17
		 -> ftoa@buf(BANK2[17]), 

    sprintf@f	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_10(CODE[11]), 

    sprintf@sp	PTR unsigned char  size(1) Largest target is 17
		 -> ftoa@buf(BANK2[17]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    nrf24l01SendPacket@txPacket	PTR struct . size(2) Largest target is 33
		 -> main@packet(BANK1[33]), loop@packet(BANK2[33]), 

    sp__nrf24l01GetRXPacket	PTR struct . size(1) Largest target is 33
		 -> RXPacket(BANK3[33]), 

    nrf24l01GetPipe@name	PTR unsigned char  size(1) Largest target is 28
		 -> romDataMap(BANK4[28]), 

    sp__ftoa	PTR unsigned char  size(1) Largest target is 17
		 -> ftoa@buf(BANK2[17]), 

    sendMessage@topic	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_9(CODE[5]), STR_7(CODE[6]), STR_6(CODE[5]), STR_5(CODE[7]), 
		 -> STR_4(CODE[5]), STR_3(CODE[5]), 

    sp__strcat	PTR unsigned char  size(2) Largest target is 33
		 -> main@packet(BANK1[33]), loop@packet(BANK2[33]), 

    sp__strcpy	PTR unsigned char  size(2) Largest target is 33
		 -> TXPacket(BANK3[33]), main@packet(BANK1[33]), loop@packet(BANK2[33]), romDataMap(BANK4[28]), 

    sp__memset	PTR void  size(2) Largest target is 33
		 -> RXPacket(BANK3[33]), main@packet(BANK1[33]), loop@packet(BANK2[33]), 

    sendMessage@packet	PTR struct . size(2) Largest target is 33
		 -> main@packet(BANK1[33]), loop@packet(BANK2[33]), 

    romData	PTR struct . size(1) Largest target is 28
		 -> romDataMap(BANK4[28]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    _ISR->_nrf24l01ISR
    _nrf24l01ISR->i1_nrf24l01Service
    i1_nrf24l01Service->i1_memset
    i1_nrf24l01SetRXMode->i1_nrf24l01Send

Critical Paths under _main in BANK0

    _nrf24l01Init->_nrf24l01InitRegisters
    _nrf24l01InitRegisters->_nrf24l01SetRXPipe
    _nrf24l01InitRegisters->_nrf24l01SetTXPipe
    _nrf24l01SetTXPipe->___bmul
    _nrf24l01SetRXPipe->_nrf24l01Send
    _nrf24l01GetPipe->___lwmod
    _nrf24l01GetPipe->_strlen
    _sendMessage->_ftoa
    _strcat->_ftoa
    _sleep->_sleepMs
    _nrf24l01SendPacket->_nrf24l01Service
    _nrf24l01Service->_memset
    _nrf24l01SetRXMode->_nrf24l01Send
    _ftoa->___fttol
    _sprintf->___llmod
    ___llmod->___lldiv
    ___lltoft->___ftpack
    ___fttol->___ftmul
    ___ftsub->___ftadd
    ___ftneg->_getADCValue
    ___ftmul->_getADCValue
    _getADCValue->___ftdiv
    ___ftdiv->___ftadd
    ___ftadd->___awtoft
    ___awtoft->___ftpack
    ___lbtoft->___ftpack
    ___lwtoft->___ftpack

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_loop
    _loop->_sendMessage
    _sendMessage->_strcat
    _strcat->_ftoa
    _ftoa->___fttol

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    _main->_loop

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                35    35      0   95816
                                             36 BANK1     35    35      0
                           ___lwtoft
                               _loop
                    _nrf24l01GetPipe
                       _nrf24l01Init
                  _nrf24l01SetTXPipe
                        _sendMessage
                             _strcpy
 ---------------------------------------------------------------------------------
 (1) _nrf24l01Init                                         2     2      0    5538
                                             17 BANK0      2     2      0
                     _nrf24l01CEHigh
                      _nrf24l01CELow
              _nrf24l01InitRegisters
              _nrf24l01InterfaceInit
 ---------------------------------------------------------------------------------
 (2) _nrf24l01InterfaceInit                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _nrf24l01InitRegisters                               10    10      0    5538
                                              7 BANK0     10    10      0
                             ___bmul
                     _nrf24l01SPIEnd
                    _nrf24l01SPISend
                   _nrf24l01SPIStart
                       _nrf24l01Send
                  _nrf24l01SetRXPipe
                  _nrf24l01SetTXPipe
 ---------------------------------------------------------------------------------
 (1) _nrf24l01SetTXPipe                                    3     3      0     314
                                              4 BANK0      3     3      0
                             ___bmul
                     _nrf24l01SPIEnd
                    _nrf24l01SPISend
                   _nrf24l01SPIStart
 ---------------------------------------------------------------------------------
 (2) ___bmul                                               4     3      1     270
                                              0 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (3) _nrf24l01SetRXPipe                                    4     4      0    2380
                                              3 BANK0      4     4      0
                       _nrf24l01Send
 ---------------------------------------------------------------------------------
 (1) _nrf24l01GetPipe                                      5     5      0     762
                                              6 BANK0      5     5      0
                            ___lwmod
                             _strlen
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              6     2      4     337
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (1) _loop                                                50    50      0   59446
                                             35 BANK1      1     1      0
                                              0 BANK2     49    49      0
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___ftneg
                           ___lbtoft
                           ___lltoft
                        _getADCValue
                       _nrf24l01Send
                        _sendMessage
 ---------------------------------------------------------------------------------
 (1) _sendMessage                                         10     3      7   26064
                                             25 BANK1     10     3      7
                           ___lbtoft (ARG)
                           ___lwtoft (ARG)
                               _ftoa
                        _getADCValue (ARG)
                             _memset
                 _nrf24l01SendPacket
                              _sleep
                             _strcat
                             _strcpy
 ---------------------------------------------------------------------------------
 (2) _strcat                                               6     2      4     614
                                             19 BANK1      6     2      4
                               _ftoa (ARG)
 ---------------------------------------------------------------------------------
 (2) _sleep                                                4     2      2     469
                                              5 BANK0      4     2      2
                         _doWDTSleep
                            _sleepMs
 ---------------------------------------------------------------------------------
 (2) _nrf24l01SendPacket                                   4     2      2    6717
                                             12 BANK0      4     2      2
                    _nrf24l01Service
                            _sleepMs
                             _strcpy
 ---------------------------------------------------------------------------------
 (1) _strcpy                                               6     2      4     462
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (3) _sleepMs                                              5     3      2     290
                                              0 BANK0      5     3      2
 ---------------------------------------------------------------------------------
 (3) _nrf24l01Service                                      4     4      0    5855
                                              8 BANK0      4     4      0
                             _memset
                     _nrf24l01CEHigh
                      _nrf24l01CELow
                     _nrf24l01SPIEnd
                    _nrf24l01SPISend
                   _nrf24l01SPIStart
                       _nrf24l01Send
                  _nrf24l01SetRXMode
                             _strcmp
                             _strlen
 ---------------------------------------------------------------------------------
 (4) _strlen                                               6     4      2     216
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (4) _strcmp                                               5     3      2     216
                                              0 BANK0      5     3      2
 ---------------------------------------------------------------------------------
 (4) _nrf24l01SetRXMode                                    2     2      0    2350
                                              3 BANK0      2     2      0
                     _nrf24l01CEHigh
                      _nrf24l01CELow
                       _nrf24l01Send
 ---------------------------------------------------------------------------------
 (5) _nrf24l01Send                                         3     2      1    2284
                                              0 BANK0      3     2      1
                   _enableInterrupts
                     _nrf24l01SPIEnd
                    _nrf24l01SPISend
                   _nrf24l01SPIStart
 ---------------------------------------------------------------------------------
 (13) _nrf24l01SPIStart                                    0     0      0       0
                      _nrf24l01CSLow
 ---------------------------------------------------------------------------------
 (14) _nrf24l01CSLow                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (13) _nrf24l01SPISend                                     1     1      0      22
 ---------------------------------------------------------------------------------
 (13) _nrf24l01SPIEnd                                      0     0      0       0
                     _nrf24l01CSHigh
 ---------------------------------------------------------------------------------
 (14) _nrf24l01CSHigh                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (13) _enableInterrupts                                    1     1      0      22
 ---------------------------------------------------------------------------------
 (12) _nrf24l01CELow                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (12) _nrf24l01CEHigh                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _memset                                               8     2      6     532
                                              0 BANK0      8     2      6
 ---------------------------------------------------------------------------------
 (2) _ftoa                                                14    10      4   15362
                                             79 BANK0      1     1      0
                                              6 BANK1     13     9      4
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                           ___lltoft
                            _sprintf
 ---------------------------------------------------------------------------------
 (3) _sprintf                                             36    26     10    2229
                                             24 BANK0     28    18     10
                            ___lldiv
                            ___llmod
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (4) _isdigit                                              2     2      0      68
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4     448
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (4) ___llmod                                             10     2      8     337
                                             14 BANK0     10     2      8
                            ___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (4) ___lldiv                                             14     6      8     340
                                              0 BANK0     14     6      8
 ---------------------------------------------------------------------------------
 (3) ___lltoft                                             6     2      4    3259
                                              8 BANK0      6     2      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) ___fttol                                             14    10      4     430
                                             71 BANK0      8     4      4
                                              0 BANK1      6     6      0
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftsub                                              6     0      6    4809
                                             27 BANK0      6     0      6
                            ___ftadd
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftneg                                              3     0      3     223
                                             55 BANK0      3     0      3
                            ___ftadd (ARG)
                            ___ftdiv (ARG)
                        _getADCValue (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftmul                                             16    10      6    3694
                                             55 BANK0     16    10      6
                           ___ftpack
                        _getADCValue (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftge                                               9     3      6     314
                                              0 BANK0      9     3      6
 ---------------------------------------------------------------------------------
 (2) _getADCValue                                         12     9      3   11919
                                             43 BANK0     12     9      3
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                         _doWDTSleep
 ---------------------------------------------------------------------------------
 (3) _doWDTSleep                                           2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) ___ftdiv                                             16    10      6    4004
                                             27 BANK0     16    10      6
                            ___ftadd (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) ___ftadd                                             13     7      6    4564
                                             14 BANK0     13     7      6
                           ___awtoft (ARG)
                           ___ftpack
                           ___ftpack (ARG)
 ---------------------------------------------------------------------------------
 (3) ___awtoft                                             6     3      3    3192
                                              8 BANK0      6     3      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___lbtoft                                             8     5      3    3034
                                              8 BANK0      8     5      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (1) ___lwtoft                                             4     1      3    3123
                                              8 BANK0      4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) ___ftpack                                             8     3      5    3012
                                              0 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 14
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (9) _ISR                                                  0     0      0    1756
                        _nrf24l01ISR
 ---------------------------------------------------------------------------------
 (10) _nrf24l01ISR                                         1     1      0    1756
                                             12 COMMON     1     1      0
                     i1_nrf24l01Send
                  i1_nrf24l01Service
                i1_nrf24l01SetRXMode
 ---------------------------------------------------------------------------------
 (11) i1_nrf24l01Service                                   4     4      0    1208
                                              8 COMMON     4     4      0
                     _nrf24l01CEHigh
                      _nrf24l01CELow
                     _nrf24l01SPIEnd
                    _nrf24l01SPISend
                   _nrf24l01SPIStart
                           i1_memset
                     i1_nrf24l01Send
                i1_nrf24l01SetRXMode
                           i1_strcmp
                           i1_strlen
 ---------------------------------------------------------------------------------
 (12) i1_strlen                                            6     4      2     134
                                              0 COMMON     6     4      2
 ---------------------------------------------------------------------------------
 (12) i1_strcmp                                            5     3      2     117
                                              0 COMMON     5     3      2
 ---------------------------------------------------------------------------------
 (11) i1_nrf24l01SetRXMode                                 2     2      0     307
                                              4 COMMON     2     2      0
                     _nrf24l01CEHigh
                      _nrf24l01CELow
                     i1_nrf24l01Send
 ---------------------------------------------------------------------------------
 (12) i1_nrf24l01Send                                      3     2      1     241
                                              1 COMMON     3     2      1
                   _enableInterrupts
                     _nrf24l01SPIEnd
                    _nrf24l01SPISend
                   _nrf24l01SPIStart
 ---------------------------------------------------------------------------------
 (13) _nrf24l01SPIStart                                    0     0      0       0
                      _nrf24l01CSLow
 ---------------------------------------------------------------------------------
 (14) _nrf24l01CSLow                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (13) _nrf24l01SPISend                                     1     1      0      22
 ---------------------------------------------------------------------------------
 (13) _nrf24l01SPIEnd                                      0     0      0       0
                     _nrf24l01CSHigh
 ---------------------------------------------------------------------------------
 (14) _nrf24l01CSHigh                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (13) _enableInterrupts                                    1     1      0      22
 ---------------------------------------------------------------------------------
 (12) _nrf24l01CELow                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (12) _nrf24l01CEHigh                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (12) i1_memset                                            8     2      6     152
                                              0 COMMON     8     2      6
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 14
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   ___lwtoft
     ___ftpack
   _loop
     ___ftadd
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___ftpack (ARG)
     ___ftdiv
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
     ___ftmul
       ___ftpack
       _getADCValue (ARG)
         ___awtoft
           ___ftpack
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftdiv
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
         _doWDTSleep
     ___ftneg
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftdiv (ARG)
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
       _getADCValue (ARG)
         ___awtoft
           ___ftpack
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftdiv
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
         _doWDTSleep
     ___lbtoft
       ___ftpack
     ___lltoft
       ___ftpack
     _getADCValue
       ___awtoft
         ___ftpack
       ___ftadd
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftdiv
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
       _doWDTSleep
     _nrf24l01Send
       _enableInterrupts
       _nrf24l01SPIEnd
         _nrf24l01CSHigh
       _nrf24l01SPISend
       _nrf24l01SPIStart
         _nrf24l01CSLow
     _sendMessage
       ___lbtoft (ARG)
         ___ftpack
       ___lwtoft (ARG)
         ___ftpack
       _ftoa (ARG)
         ___ftge
         ___ftmul
           ___ftpack
           _getADCValue (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
             _doWDTSleep
         ___ftneg
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv (ARG)
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
           _getADCValue (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
             _doWDTSleep
         ___ftsub
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___fttol
           ___ftmul (ARG)
             ___ftpack
             _getADCValue (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               _doWDTSleep
         ___lltoft
           ___ftpack
         _sprintf
           ___lldiv
           ___llmod
             ___lldiv (ARG)
           ___wmul
           _isdigit
       _getADCValue (ARG)
         ___awtoft
           ___ftpack
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftdiv
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
         _doWDTSleep
       _memset (ARG)
       _nrf24l01SendPacket (ARG)
         _nrf24l01Service
           _memset
           _nrf24l01CEHigh
           _nrf24l01CELow
           _nrf24l01SPIEnd
             _nrf24l01CSHigh
           _nrf24l01SPISend
           _nrf24l01SPIStart
             _nrf24l01CSLow
           _nrf24l01Send
             _enableInterrupts
             _nrf24l01SPIEnd
               _nrf24l01CSHigh
             _nrf24l01SPISend
             _nrf24l01SPIStart
               _nrf24l01CSLow
           _nrf24l01SetRXMode
             _nrf24l01CEHigh
             _nrf24l01CELow
             _nrf24l01Send
               _enableInterrupts
               _nrf24l01SPIEnd
                 _nrf24l01CSHigh
               _nrf24l01SPISend
               _nrf24l01SPIStart
                 _nrf24l01CSLow
           _strcmp
           _strlen
         _sleepMs
         _strcpy
       _sleep (ARG)
         _doWDTSleep
         _sleepMs
       _strcat (ARG)
         _ftoa (ARG)
           ___ftge
           ___ftmul
             ___ftpack
             _getADCValue (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               _doWDTSleep
           ___ftneg
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
             _getADCValue (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               _doWDTSleep
           ___ftsub
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
           ___fttol
             ___ftmul (ARG)
               ___ftpack
               _getADCValue (ARG)
                 ___awtoft
                   ___ftpack
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                 _doWDTSleep
           ___lltoft
             ___ftpack
           _sprintf
             ___lldiv
             ___llmod
               ___lldiv (ARG)
             ___wmul
             _isdigit
       _strcpy (ARG)
   _nrf24l01GetPipe
     ___lwmod
     _strlen
   _nrf24l01Init
     _nrf24l01CEHigh
     _nrf24l01CELow
     _nrf24l01InitRegisters
       ___bmul
       _nrf24l01SPIEnd
         _nrf24l01CSHigh
       _nrf24l01SPISend
       _nrf24l01SPIStart
         _nrf24l01CSLow
       _nrf24l01Send
         _enableInterrupts
         _nrf24l01SPIEnd
           _nrf24l01CSHigh
         _nrf24l01SPISend
         _nrf24l01SPIStart
           _nrf24l01CSLow
       _nrf24l01SetRXPipe
         _nrf24l01Send
           _enableInterrupts
           _nrf24l01SPIEnd
             _nrf24l01CSHigh
           _nrf24l01SPISend
           _nrf24l01SPIStart
             _nrf24l01CSLow
       _nrf24l01SetTXPipe
         ___bmul
         _nrf24l01SPIEnd
           _nrf24l01CSHigh
         _nrf24l01SPISend
         _nrf24l01SPIStart
           _nrf24l01CSLow
     _nrf24l01InterfaceInit
   _nrf24l01SetTXPipe
     ___bmul
     _nrf24l01SPIEnd
       _nrf24l01CSHigh
     _nrf24l01SPISend
     _nrf24l01SPIStart
       _nrf24l01CSLow
   _sendMessage
     ___lbtoft (ARG)
       ___ftpack
     ___lwtoft (ARG)
       ___ftpack
     _ftoa (ARG)
       ___ftge
       ___ftmul
         ___ftpack
         _getADCValue (ARG)
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
           _doWDTSleep
       ___ftneg
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
         _getADCValue (ARG)
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
           _doWDTSleep
       ___ftsub
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___lltoft (ARG)
           ___ftpack
       ___fttol
         ___ftmul (ARG)
           ___ftpack
           _getADCValue (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
             _doWDTSleep
       ___lltoft
         ___ftpack
       _sprintf
         ___lldiv
         ___llmod
           ___lldiv (ARG)
         ___wmul
         _isdigit
     _getADCValue (ARG)
       ___awtoft
         ___ftpack
       ___ftadd
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftdiv
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
       _doWDTSleep
     _memset (ARG)
     _nrf24l01SendPacket (ARG)
       _nrf24l01Service
         _memset
         _nrf24l01CEHigh
         _nrf24l01CELow
         _nrf24l01SPIEnd
           _nrf24l01CSHigh
         _nrf24l01SPISend
         _nrf24l01SPIStart
           _nrf24l01CSLow
         _nrf24l01Send
           _enableInterrupts
           _nrf24l01SPIEnd
             _nrf24l01CSHigh
           _nrf24l01SPISend
           _nrf24l01SPIStart
             _nrf24l01CSLow
         _nrf24l01SetRXMode
           _nrf24l01CEHigh
           _nrf24l01CELow
           _nrf24l01Send
             _enableInterrupts
             _nrf24l01SPIEnd
               _nrf24l01CSHigh
             _nrf24l01SPISend
             _nrf24l01SPIStart
               _nrf24l01CSLow
         _strcmp
         _strlen
       _sleepMs
       _strcpy
     _sleep (ARG)
       _doWDTSleep
       _sleepMs
     _strcat (ARG)
       _ftoa (ARG)
         ___ftge
         ___ftmul
           ___ftpack
           _getADCValue (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
             _doWDTSleep
         ___ftneg
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv (ARG)
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
           _getADCValue (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
             _doWDTSleep
         ___ftsub
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___fttol
           ___ftmul (ARG)
             ___ftpack
             _getADCValue (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               _doWDTSleep
         ___lltoft
           ___ftpack
         _sprintf
           ___lldiv
           ___llmod
             ___lldiv (ARG)
           ___wmul
           _isdigit
     _strcpy (ARG)
   _strcpy

 _ISR (ROOT)
   _nrf24l01ISR
     i1_nrf24l01Send
       _enableInterrupts
       _nrf24l01SPIEnd
         _nrf24l01CSHigh
       _nrf24l01SPISend
       _nrf24l01SPIStart
         _nrf24l01CSLow
     i1_nrf24l01Service
       _nrf24l01CEHigh
       _nrf24l01CELow
       _nrf24l01SPIEnd
         _nrf24l01CSHigh
       _nrf24l01SPISend
       _nrf24l01SPIStart
         _nrf24l01CSLow
       i1_memset
       i1_nrf24l01Send
         _enableInterrupts
         _nrf24l01SPIEnd
           _nrf24l01CSHigh
         _nrf24l01SPISend
         _nrf24l01SPIStart
           _nrf24l01CSLow
       i1_nrf24l01SetRXMode
         _nrf24l01CEHigh
         _nrf24l01CELow
         i1_nrf24l01Send
           _enableInterrupts
           _nrf24l01SPIEnd
             _nrf24l01CSHigh
           _nrf24l01SPISend
           _nrf24l01SPIStart
             _nrf24l01CSLow
       i1_strcmp
       i1_strlen
     i1_nrf24l01SetRXMode
       _nrf24l01CEHigh
       _nrf24l01CELow
       i1_nrf24l01Send
         _enableInterrupts
         _nrf24l01SPIEnd
           _nrf24l01CSHigh
         _nrf24l01SPISend
         _nrf24l01SPIStart
           _nrf24l01CSLow

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      D       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     50      50       5      100.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50     47      4C       7       95.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50     31      46       9       87.5%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0      42      11       82.5%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0      1C      13       35.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0     14E      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0     14E      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V2.00 build -1524193055 
Symbol Table                                                                                   Sat Aug 04 09:26:21 2018

                ___bmul@product 0022                     __CFG_CP$OFF 0000                              l52 085F  
              sendMessage@value 00BD                sendMessage@topic 00BB             ___wmul@multiplicand 0022  
           nrf24l01Send@command 0022                    ___ftadd@exp1 003A                    ___ftadd@exp2 0039  
             sendMessage@packet 00B9                     __CFG_LVP$ON 0000                    ___ftadd@sign 0038  
                           l174 0D26                             l435 00DF                             l275 16D5  
                           l461 07EC                             l446 0182                             l438 00FE  
                           l671 0AEE                             l672 0AF6                             l664 0ADB  
                           l755 0CA7                             l695 0FA9                    __CFG_CPD$OFF 0000  
                           _ISR 0004               sendMessage@status 00C1                             wreg 0009  
             sleep@milliseconds 0025                            ?_ISR 0070                    ___ftdiv@cntr 0045  
                  ___ftdiv@sign 004A                  ??_nrf24l01Init 0031                            l3111 0D60  
                          l3017 0DF6                            l3009 0DDD                            l3113 0D67  
                          l2401 0A03                            l3107 0D48                            l2411 0A31  
                          l2403 0A11                            l2501 0912                            l2415 0A3C  
                          l2327 15B0                            l3223 06F8                            l2281 0AC2  
                          l2425 0F32                            l2505 091D                            l2361 178C  
                          l3217 06E9                            l3209 069F                            l2291 0AE8  
                          l2283 0AC7                            l2275 0AB1                            l2435 0F48  
                          l2453 0F75                            l2429 0F39                            l2365 17A4  
                          l2357 1784                            l2541 1619                            l2279 0AB8  
                          l2471 0FBB                            l2455 0F7F                            l2447 0F62  
                          l3095 0CF5                            l2383 07E6                            l2519 0845  
                          l3263 0819                            l2289 0AE0                            l2465 0F9B  
                          l2457 0F84                            l3097 0CFD                            l2377 1565  
                          l2721 01F2                            l2705 0195                            l2641 006F  
                          l3601 02BD                            l2529 0868                            l3265 0825  
                          l3273 083A                  ??_nrf24l01Send 0021                            l2475 0FCD  
                          l2467 0FA5                            l2459 0F88                            l3099 0CE9  
                          l2803 07BB                            l2715 01AD                            l2707 0198  
                          l2635 005F                            l2723 003C                            l3611 02F1  
                          l2731 0803                            l2485 0FE8                            l2725 01FD  
                          l2661 00DB                            l2901 15CC                            l3269 0831  
                          l2751 08D4                            l2495 08EC                            l2663 00E1  
                          l3543 168E                            l3623 033F                            l2911 1743  
                          l2735 0809                            l2825 1655                            l2497 08FA  
                          l2673 010D                            l2649 009D                            l3545 169A  
                          l2913 174B                            l2747 08BE                            l2835 0C45  
                          l2683 012C                            l2667 00E6                            l2659 00AC  
                          l3627 0356                            l3563 0249                            l3555 0224  
                          l3643 09D8                            l2861 0C9D                            l2853 0C7E  
                          l2925 0E5E                            l3573 0264                            l2909 1737  
                          l3813 0874                            l3901 0C26                            l2791 079F  
                          l2775 075C                            l2863 0CAB                            l2855 0C8F  
                          l2695 015F                            l3559 0232                            l3815 0897  
                          l2769 0746                            l2689 0132                            l3593 02A4  
                          l2787 0797                            l2867 0CB9                            l2875 17AF  
                          l2699 016E                            l2877 17BF                            l3597 02B5  
                          l2799 07B3                            l2969 16E1                            l2979 16F4  
                          l2995 0D9C                            l2989 0D86                            STR_1 1868  
                  __CFG_WDTE$ON 0000                            STR_2 1868                            STR_3 1850  
                          STR_4 185A                            STR_5 183E                            STR_6 1855  
                          STR_7 1845                            STR_8 1864                            STR_9 185F  
                          u2105 07F2                            u2135 0A06                            u3105 0C9E  
                          u2315 0F76                            u2155 0A12                            u3045 0C4D  
                          u2165 0A26                            u3214 16DB                            u3135 17B4  
                          u2175 0A32                            u2095 07ED                            u3215 16DA  
                          u2345 0F89                            u3075 0C7F                            u2435 08EF  
                          u4107 0932                            u2285 0F63                            u4117 0941  
                          u2375 0F9C                            u3255 0DAE                            u2455 0908  
                          u4127 025F                            u3265 0DBE                            u2465 0913  
                          u4137 17F1                            u1915 0AD6                            u3275 0DDE  
                          u4147 17FC                            u4075 0885                            u3285 0DED  
                          u3445 081C                            u2494 084D                            u1935 0AE3  
                          u3295 0DF7                            u2495 084B                            u3465 082B  
                          u4097 0BB3                            u2915 0768                            u2755 0155  
                          u3475 0832                            u2925 0778                            u1975 0AFD  
                          u1895 0ABD                            u2775 0166                            u2945 07A0  
                          u2785 0178                            u2955 07A6                            u2795 018A  
                          u3755 0243                            i1l56 1551                            u2985 07BC  
                          u2995 07C2                            _WPUA 020C                            _WPUC 020E  
__size_of_nrf24l01InterfaceInit 001E                    __CFG_WRT$OFF 0000                   __CFG_FCMEN$ON 0000  
 __end_of_nrf24l01InterfaceInit 1689                            _main 0B97                            _ftoa 0E18  
                  ___ftpack@arg 0020                            _loop 037A                    ___ftpack@exp 0023  
                          fsr0h 0005                            fsr1h 0007                            indf0 0000  
                          fsr0l 0004                            indf1 0001                            fsr1l 0006  
                          btemp 007E                   __CFG_BORV$LOW 0000                            start 000F  
         nrf24l01SetRXPipe@pipe 0025                   __CFG_CSWEN$ON 0000               ___bmul@multiplier 0023  
                 __CFG_MCLRE$ON 0000                    ___ftmul@cntr 0065                    ___ftmul@sign 0066  
   __size_of_nrf24l01SendPacket 0045                           ??_ISR 007D                    ___fttol@exp1 00A5  
          __size_of_getADCValue 00A6                 ??_nrf24l01CELow 0070                    ___fttol@lval 00A1  
               ??_nrf24l01CSLow 0070                           ?_main 0070                           ?_ftoa 00A6  
                         ?_loop 0070                 __end_of___ftadd 1000                           STR_10 1829  
               __end_of___ftdiv 0E18                 __end_of___ftneg 154B                 __end_of___lldiv 0A45  
               __end_of___ftmul 07E3                 __end_of___llmod 0926                 __end_of___ftsub 166B  
               __end_of___fttol 0CC9                  __CFG_DEBUG$OFF 0000                           i1l163 000D  
               __end_of___lwmod 083F                           i1l292 0A9C                           i1l286 0A81  
                         i1l287 0A80          enableInterrupts@enable 0070                      i1memset@p1 0070  
                 __CFG_PWRTE$ON 0000           nrf24l01SetTXPipe@pipe 0026                    ___lltoft@exp 002D  
                 ___awtoft@sign 002D                 __end_of_dpowers 1828                 __end_of_isdigit 1567  
                         _sleep 15C4                   ___ftpack@sign 0024                           ftoa@f 00A6  
                         ftoa@l 00AE                  __CFG_BOREN$OFF 0000                 __end_of_sleepMs 086F  
              _enableInterrupts 1532                           status 0003                           wtemp0 007E  
               __end_of_sprintf 0203     __end_ofi1_nrf24l01SetRXMode 1732                __end_ofi1_memset 15AB  
             getADCValue@adcSum 0054                __end_ofi1_strcmp 1781                __end_ofi1_strlen 164D  
              _nrf24l01SPIStart 153A                 __initialization 0011          nrf24l01InitRegisters@i 002F  
                  __end_of_main 0C2A                    __end_of_ftoa 0F0A                    __end_of_loop 04C8  
              ??_nrf24l01CEHigh 0070                      i1strcmp@s1 0074                      i1strcmp@s2 0070  
                        ??_main 00C4                          ??_ftoa 006F                   ___fttol@sign1 00A0  
                        ??_loop 00C3                ??_nrf24l01CSHigh 0070                      i1strlen@cp 0074  
                  ?_sendMessage 00B9                ??_nrf24l01SPIEnd 0070        __size_of_nrf24l01SPISend 000D  
              ___llmod@dividend 0032                          _ADRESH 009C                          _ADRESL 009B  
                        ?_sleep 0025                __end_of___awtoft 170B                          _ANSELA 018C  
                        _ANSELC 018E                __end_of___ftpack 0B0D                __end_of___lbtoft 1614  
              __end_of___lltoft 17D4                          _ODCONA 028C        __size_of_nrf24l01GetPipe 0038  
                        i1l2307 1556                          i1l3051 175B                          _ODCONC 028E  
                        i1l3047 1597                          i1l3055 1763                          i1l3059 177B  
                        i1l3651 163F                          i1l3723 056B                          i1l3727 0573  
                        i1l3719 055B                          i1l3649 1633                          i1l3753 05F4  
                        i1l3737 059D                          i1l3681 04E6                          i1l3749 05DF  
                        i1l3685 04F3                          i1l3773 0A73                          i1l3689 0509  
                        i1l3699 0521                          i1l3779 0A9D                          _INLVLA 038C  
                        _INLVLC 038E                          u415_27 051C                          u416_27 1724  
                        u417_27 172E                __end_of___lwtoft 157C                          u418_27 153E  
                        u419_27 152C                          u390_25 0503               i1_nrf24l01Service 04C8  
            ?i1_nrf24l01Service 0070        __size_of_nrf24l01Service 0177            __size_of_nrf24l01ISR 0063  
                        ___bmul 0800                          ___ftge 08A7         nrf24l01SetRXMode@rxMode 0024  
                        ___wmul 07E3             ??i1_nrf24l01Service 0078                       ??___ftadd 0034  
                __CFG_STVREN$ON 0000                       ??___ftdiv 0041                       ??___ftneg 005A  
                     ??___lldiv 0028                       ??___ftmul 005D                       ??___llmod 0036  
                     ??___ftsub 0041                       ??___fttol 006B                       ??___lwmod 0024  
          __end_of_nrf24l01Init 0969            __end_of_nrf24l01Send 16C8                          _memset 15AB  
         _nrf24l01InitRegisters 0611                          _status 00E7                          _strcat 1732  
                        _strcmp 1781                          _strcpy 1614                          _strlen 1689  
                        ftoa@cp 00B2           ___ftmul@f3_as_product 0062                       ??_isdigit 0020  
                        loop@ta 0123                          loop@vt 0120       i1nrf24l01SetRXMode@rxMode 0075  
                     ??_sleepMs 0022                       ??_sprintf 0042                __end_of_statuses 183E  
     __end_ofi1_nrf24l01Service 0611              getADCValue@adcLoop 0051         __end_of__initialization 0032  
                    ___ftadd@f1 002E                      ___ftadd@f2 0031                      ___ftge@ff1 0020  
                    ___ftge@ff2 0023              getADCValue@channel 0053                      ___ftdiv@f1 003E  
                    ___ftdiv@f2 003B                      ___ftdiv@f3 0046                      ___ftneg@f1 0057  
                    ___awtoft@c 0028                      ___lbtoft@c 002F             ___bmul@multiplicand 0020  
                    ___ftmul@f1 0057                      ___ftmul@f2 005A                      ___ftsub@f1 003E  
                    ___ftsub@f2 003B                      ___fttol@f1 0067                  __pcstackCOMMON 0070  
                  __pidataBANK1 07FF                      ___lltoft@c 0028                      _doWDTSleep 157C  
                 __end_of_sleep 15DE                      ___lwtoft@c 0028                       ?i1_memset 0070  
                     ?i1_strcmp 0070                       ?i1_strlen 0070                         ??_sleep 0027  
                  sprintf@width 004F                     loop@rfSetup 012F                      __pbssBANK1 00E7  
                    __pbssBANK2 0151                      __pbssBANK3 01A0                      __pbssBANK4 0220  
             ??_nrf24l01SPISend 0070          i1nrf24l01Service@width 007A         __size_ofi1_nrf24l01Send 001B  
             ??_nrf24l01GetPipe 0026                      __pmaintext 0B97                         ?___bmul 0020  
                       ?___ftge 0020                         ?___wmul 0020                 __CFG_PPS1WAY$ON 0000  
             _nrf24l01SetRXMode 17D4               _nrf24l01SetRXPipe 16C8          ?_nrf24l01InitRegisters 0070  
                    __pintentry 0004               _nrf24l01SetTXPipe 0969             nrf24l01SPISend@data 0070  
                       ?_memset 0020               ??_nrf24l01Service 0028              ?_nrf24l01SetRXMode 0070  
                     ?___awtoft 0028                       ?___ftpack 0020                       ?___lbtoft 0028  
            ?_nrf24l01SetRXPipe 0070        __end_of_enableInterrupts 153A              ?_nrf24l01SetTXPipe 0070  
                     ?___lltoft 0028             __CFG_RSTOSC$HFINT32 0000                         ?_strcat 00B3  
                       ?_strcmp 0020                         ?_strcpy 0020                         ?_strlen 0020  
                     ?___lwtoft 0028           __end_of_n_ADDRESS_MUL 1829                      ??i1_memset 0076  
          __size_of_sendMessage 008A             ??_nrf24l01SetRXMode 0023        __end_of_nrf24l01SPIStart 1542  
           ??_nrf24l01SetRXPipe 0023             ??_nrf24l01SetTXPipe 0024                      ??i1_strcmp 0072  
                    ??i1_strlen 0072                         _SSP1BUF 0211      __size_ofi1_nrf24l01Service 0149  
         _nrf24l01InterfaceInit 166B            nrf24l01Service@width 002A      __end_of_nrf24l01SendPacket 09F2  
                 ??_getADCValue 004E           __size_of_nrf24l01Init 0043           __size_of_nrf24l01Send 0020  
     __end_of_nrf24l01SetRXMode 1800       __end_of_nrf24l01SetRXPipe 16E9       __end_of_nrf24l01SetTXPipe 09AD  
               __size_of___bmul 0012                 __size_of___ftge 003C                         ___ftadd 0F0A  
                   ?_doWDTSleep 0070                         ___ftdiv 0D6F                         ___ftneg 1542  
                       ___lldiv 09F2                 __size_of___wmul 001C                         ___ftmul 072F  
                       ___llmod 08E3                         ___ftsub 164D                         ___fttol 0C2A  
                       ___lwmod 0812                      ??___awtoft 002B                      ??___ftpack 0025  
                    ??___lbtoft 002B           __end_of_nrf24l01CELow 151F                 __size_of_memset 0019  
         __end_of_nrf24l01CSLow 1525                      ??___lltoft 002C                         __ptext1 0926  
                       __ptext2 166B                         __ptext3 0611                         __ptext4 0969  
                       __ptext5 0800                         __ptext6 16C8                         __ptext7 086F  
                       __ptext8 0812                         __ptext9 037A                      ??___lwtoft 002B  
               __size_of_strcat 0027                 __size_of_strcmp 0029                 __size_of_strcpy 001B  
               __size_of_strlen 001F                    __size_of_ISR 000B                         _counter 0151  
                       _dpowers 1800                         _isdigit 1558                         _romData 00EB  
                       _sleepMs 083F                         _sprintf 0036                         clrloop0 1526  
          end_of_initialization 0032                         ftoa@buf 0155                         ftoa@rem 00AA  
                  _nrf24l01Init 0926                    _nrf24l01Send 16A8                      _romDataMap 0220  
                       memset@c 0022                         memset@n 0024                         memset@p 0026  
              nrf24l01GetPipe@i 002A                 ___lldiv@divisor 0020                 ___lldiv@counter 002D  
  __size_ofi1_nrf24l01SetRXMode 0027                         strcmp@r 0023           i1nrf24l01Send@command 0073  
                       strlen@s 0020             __end_of_getADCValue 0D6F                       _PORTAbits 000C  
                     _PORTCbits 000E                       _TRISAbits 008C                       _TRISCbits 008E  
              nrf24l01Send@data 0020                __CFG_FEXTOSC$OFF 0000             __size_of_doWDTSleep 0017  
                 ??_nrf24l01ISR 007C          ?_nrf24l01InterfaceInit 0070                     ___ftdiv@exp 0049  
                i1_nrf24l01Send 15DE                      main@packet 00C6                nrf24l01Service@i 002B  
    __size_of_nrf24l01SetRXMode 002C      __size_of_nrf24l01SetRXPipe 0021                     ___ftmul@exp 0061  
    __size_of_nrf24l01SetTXPipe 0044                  __end_of___bmul 0812                  __end_of___ftge 08E3  
                __end_of___wmul 07FF                       i1memset@c 0072                       i1memset@n 0074  
                     i1memset@p 0076                  __end_of_memset 15C4                  __end_of_strcat 1759  
                __end_of_strcmp 17AA                  __end_of_strcpy 162F                  __end_of_strlen 16A8  
           start_initialization 0011                 _nrf24l01SPISend 154B                     __end_of_ISR 000F  
                    ftoa@status 00A9               __size_ofi1_memset 0018       nrf24l01SetRXPipe@enRXAddr 0026  
               _nrf24l01GetPipe 086F         __size_of_nrf24l01CEHigh 0003                       i1strcmp@r 0073  
                     i1strlen@s 0070               __size_ofi1_strcmp 0028               __size_ofi1_strlen 001E  
       __size_of_nrf24l01CSHigh 0003          __end_ofi1_nrf24l01Send 15F9         __size_of_nrf24l01SPIEnd 0007  
               ___llmod@divisor 002E                 ___llmod@counter 0037                 _nrf24l01Service 0203  
       ??_nrf24l01InitRegisters 0027                __CFG_LPBOREN$OFF 0000                     _getADCValue 0CC9  
                      ??___bmul 0021                        ??___ftge 0026             __end_of_nrf24l01ISR 0AA8  
                      ??___wmul 0024                     __pdataBANK1 00EB                        ??_memset 0026  
             ?_enableInterrupts 0070                        ??_strcat 0070                        ??_strcmp 0022  
                      ??_strcpy 0024                        ??_strlen 0022               __size_of___awtoft 0022  
             __size_of___ftpack 0065               __size_of___lbtoft 001B              ??_enableInterrupts 0070  
             __size_of___lltoft 002A                     __pbssCOMMON 007D                       ___latbits 0002  
             __size_of___lwtoft 0015                   __pcstackBANK0 0020                   __pcstackBANK1 00A0  
                 __pcstackBANK2 0120                 doWDTSleep@wdtps 0021               ?_nrf24l01SPIStart 0070  
                  _isdigit$1728 0020              ??_nrf24l01SPIStart 0070                 ?i1_nrf24l01Send 0071  
                   sprintf@flag 0048                     sprintf@prec 0051                      loop@packet 0130  
           nrf24l01GetPipe@name 0029             nrf24l01GetPipe@pipe 0028                    ??_doWDTSleep 0020  
                      ?___ftadd 002E                        ?___ftdiv 003B                        ?___ftneg 0057  
                      ?___lldiv 0020                        ?___ftmul 0057                        ?___llmod 002E  
                      ?___ftsub 003B                        ?___fttol 0067                        ?___lwmod 0020  
          __end_of_n_ADDRESS_P0 1850         __end_of_nrf24l01SPISend 1558              i1nrf24l01Send@data 0071  
     nrf24l01InitRegisters@enAA 002D                   ??_sendMessage 00C0              _nrf24l01SendPacket 09AD  
           sleepMs@milliseconds 0020         __end_of_nrf24l01GetPipe 08A7                        ?_isdigit 0070  
                     _loop$1980 0126                       _loop$1981 0129                       _loop$1982 012C  
                      ?_sleepMs 0020             ?_nrf24l01SendPacket 002C                        ?_sprintf 0038  
           i1_nrf24l01SetRXMode 170B              i1nrf24l01Service@i 007B         __end_of_nrf24l01Service 037A  
                __size_of_sleep 001A              __end_of_doWDTSleep 1593                  ___wmul@product 0024  
                   _nrf24l01ISR 0A45                       clear_ram0 1525                        _PIE0bits 0090  
                      _PIR0bits 0010                       _sleepLoop 007D            ??_nrf24l01SendPacket 002E  
          ?i1_nrf24l01SetRXMode 0070                      _ADCON0bits 009D                      _ADCON1bits 009E  
             ___wmul@multiplier 0020                        _WPUAbits 020C                        i1_memset 1593  
                      _RXPacket 01A0                        _TXPacket 01C1                        i1_strcmp 1759  
                      i1_strlen 162F             __end_of_sendMessage 0B97                  _nrf24l01CEHigh 1519  
       ??_nrf24l01InterfaceInit 0020                  _nrf24l01CSHigh 151F                  _nrf24l01SPIEnd 152B  
        __size_of_nrf24l01CELow 0003          __size_of_nrf24l01CSLow 0003           ??i1_nrf24l01SetRXMode 0074  
              __size_of___ftadd 00F6                __size_of___ftdiv 00A9                __size_of___ftneg 0009  
              __size_of___lldiv 0053                __size_of___ftmul 00B4                __size_of___llmod 0043  
              __size_of___ftsub 001E                __size_of___fttol 009F                __size_of___lwmod 002D  
                      ___awtoft 16E9                        ___ftpack 0AA8                        ___lbtoft 15F9  
              ?_nrf24l01SPISend 0070                        ___lltoft 17AA                      _ANSELAbits 018C  
                      ___lwtoft 1567                      _ANSELCbits 018E                ?_nrf24l01GetPipe 0070  
                    sprintf@val 004A                   _n_ADDRESS_MUL 1828                      strcat@from 00B5  
        __end_of_nrf24l01CEHigh 151C                __size_of_isdigit 000F          __end_of_nrf24l01CSHigh 1522  
                      __ptext10 0B0D                        __ptext11 1732                        __ptext20 16A8  
                      __ptext12 15C4                        __ptext21 15AB                        __ptext13 09AD  
                      __ptext30 164D                        __ptext22 0E18                        __ptext14 1614  
                      __ptext31 1542                        __ptext23 0036                        __ptext15 083F  
                      __ptext40 1567                        __ptext32 072F                        __ptext24 1558  
                      __ptext16 0203                        __ptext41 0AA8                        __ptext33 08A7  
                      __ptext25 07E3                        __ptext17 1689                        __ptext50 1522  
                      __ptext34 0CC9                        __ptext26 08E3                        __ptext18 1781  
                      __ptext51 154B                        __ptext43 0A45                        __ptext35 157C  
                      __ptext27 09F2                        __ptext19 17D4                        __ptext52 152B  
                      __ptext44 04C8                        __ptext36 0D6F                        __ptext28 17AA  
                      __ptext53 151F                        __ptext45 162F                        __ptext37 0F0A  
                      __ptext29 0C2A                        __ptext54 1532                        __ptext46 1759  
                      __ptext38 16E9                        __ptext55 151C                        __ptext47 170B  
                      __ptext39 15F9                        __ptext56 1519                        __ptext48 15DE  
                      __ptext57 1593                        __ptext49 153A                __size_of_sleepMs 0030  
                  _SSP1CON1bits 0215          __end_of_nrf24l01SPIEnd 1532                ?_nrf24l01Service 0070  
              __size_of_sprintf 01CD                     _OSCCON1bits 0919                      strcpy@from 0022  
                 __size_of_main 0093                   __size_of_ftoa 00F2                   __size_of_loop 014E  
  nrf24l01InitRegisters@channel 0029    nrf24l01InitRegisters@feature 002B                    sleepMs@wdtps 0024  
                    _RC0PPSbits 0EA0    nrf24l01InitRegisters@rfSetup 002C                      _RC1PPSbits 0EA1  
                  ?_getADCValue 004B                      _RC2PPSbits 0EA2  __size_of_nrf24l01InitRegisters 011E  
 __end_of_nrf24l01InitRegisters 072F                        int$flags 007E    nrf24l01InitRegisters@setupAW 002A  
                    _ODCONAbits 028C                        _statuses 1834                    _SSP1STATbits 0214  
                      main@pipe 00C5      nrf24l01SendPacket@txPacket 002C                   _nrf24l01CELow 151C  
                   _sendMessage 0B0D                   _nrf24l01CSLow 1522                      _INTCONbits 000B  
               ?_nrf24l01CEHigh 0070                      _FVRCONbits 0117                ??i1_nrf24l01Send 0072  
               ?_nrf24l01CSHigh 0070                  __pstringtext10 185F                  __pstringtext11 1864  
                __pstringtext12 1868                  __pstringtext13 0000                        isdigit@c 0021  
                      memset@p1 0020                 ?_nrf24l01SPIEnd 0070                        intlevel1 0000  
                     sprintf@ap 0049                       sprintf@sp 004E                    _n_ADDRESS_P0 184B  
     __size_of_enableInterrupts 0008                ___lwmod@dividend 0022                ___lldiv@dividend 0024  
             __CFG_CLKOUTEN$OFF 0000       __size_of_nrf24l01SPIStart 0008                  ?_nrf24l01CELow 0070  
                 __pstringtext1 1800                   __pstringtext2 1834                   __pstringtext3 184B  
                 __pstringtext4 1828                   __pstringtext5 183E                   __pstringtext6 1845  
                 __pstringtext7 1850                   __pstringtext8 1855                   __pstringtext9 185A  
                ?_nrf24l01CSLow 0070                        sprintf@c 0053                        sprintf@f 0038  
    nrf24l01InitRegisters@DynPD 002E                        strcat@cp 00B7                        strcat@to 00B3  
                      strcmp@s1 0024                        strcmp@s2 0020                ___lldiv@quotient 0029  
               ___lwmod@divisor 0020                        strcpy@cp 0024                        strlen@cp 0024  
                      strcpy@to 0020                 ___lwmod@counter 0025                      _WDTCONbits 0097  
                 ?_nrf24l01Init 0070                   ?_nrf24l01Send 0020                    ?_nrf24l01ISR 0070  
