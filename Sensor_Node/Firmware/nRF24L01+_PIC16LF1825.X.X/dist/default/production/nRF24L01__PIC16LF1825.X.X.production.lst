

Microchip Technology PIC LITE Macro Assembler V2.00 build -1524193055 
                                                                                               Sun Jul 29 16:39:16 2018

Microchip Technology Omniscient Code Generator v2.00 (Free mode) build 20180527130849
     1                           	processor	16LF18325
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK1,global,class=CODE,delta=2
     5                           	psect	stringtext1,global,class=STRCODE,delta=2
     6                           	psect	stringtext2,global,class=STRCODE,delta=2
     7                           	psect	stringtext3,global,class=STRCODE,delta=2
     8                           	psect	stringtext4,global,class=STRCODE,delta=2
     9                           	psect	stringtext5,global,class=STRCODE,delta=2
    10                           	psect	stringtext6,global,class=STRCODE,delta=2
    11                           	psect	stringtext7,global,class=STRCODE,delta=2
    12                           	psect	stringtext8,global,class=STRCODE,delta=2
    13                           	psect	stringtext9,global,class=STRCODE,delta=2
    14                           	psect	stringtext10,global,class=STRCODE,delta=2
    15                           	psect	stringtext11,global,class=STRCODE,delta=2
    16                           	psect	stringtext12,global,class=STRCODE,delta=2
    17                           	psect	cinit,global,class=CODE,merge=1,delta=2
    18                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
    19                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    20                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    21                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    22                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    23                           	psect	clrtext,global,class=CODE,delta=2
    24                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1
    25                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    26                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    27                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    28                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    29                           	psect	text1,local,class=CODE,merge=1,delta=2,group=2
    30                           	psect	text2,local,class=CODE,merge=1,delta=2
    31                           	psect	text3,local,class=CODE,merge=1,delta=2
    32                           	psect	text4,local,class=CODE,merge=1,delta=2
    33                           	psect	text5,local,class=CODE,merge=1,delta=2
    34                           	psect	text6,local,class=CODE,merge=1,delta=2
    35                           	psect	text7,local,class=CODE,merge=1,delta=2,group=1
    36                           	psect	text8,local,class=CODE,merge=1,delta=2
    37                           	psect	text9,local,class=CODE,merge=1,delta=2
    38                           	psect	text10,local,class=CODE,merge=1,delta=2
    39                           	psect	text11,local,class=CODE,merge=1,delta=2
    40                           	psect	text12,local,class=CODE,merge=1,delta=2
    41                           	psect	text13,local,class=CODE,merge=1,delta=2,group=1
    42                           	psect	text14,local,class=CODE,merge=1,delta=2
    43                           	psect	text15,local,class=CODE,merge=1,delta=2,group=2
    44                           	psect	text16,local,class=CODE,merge=1,delta=2
    45                           	psect	text17,local,class=CODE,merge=1,delta=2,group=1
    46                           	psect	text18,local,class=CODE,merge=1,delta=2
    47                           	psect	text19,local,class=CODE,merge=1,delta=2,group=2
    48                           	psect	text20,local,class=CODE,merge=1,delta=2,group=2
    49                           	psect	text21,local,class=CODE,merge=1,delta=2,group=2
    50                           	psect	text22,local,class=CODE,merge=1,delta=2
    51                           	psect	text23,local,class=CODE,merge=1,delta=2,group=2
    52                           	psect	text24,local,class=CODE,merge=1,delta=2,group=1
    53                           	psect	text25,local,class=CODE,merge=1,delta=2,group=1
    54                           	psect	text26,local,class=CODE,merge=1,delta=2,group=1
    55                           	psect	text27,local,class=CODE,merge=1,delta=2,group=1
    56                           	psect	text28,local,class=CODE,merge=1,delta=2,group=1
    57                           	psect	text29,local,class=CODE,merge=1,delta=2,group=1
    58                           	psect	text30,local,class=CODE,merge=1,delta=2,group=1
    59                           	psect	text31,local,class=CODE,merge=1,delta=2,group=1
    60                           	psect	text32,local,class=CODE,merge=1,delta=2,group=1
    61                           	psect	text33,local,class=CODE,merge=1,delta=2
    62                           	psect	text34,local,class=CODE,merge=1,delta=2
    63                           	psect	text35,local,class=CODE,merge=1,delta=2,group=1
    64                           	psect	text36,local,class=CODE,merge=1,delta=2,group=1
    65                           	psect	text37,local,class=CODE,merge=1,delta=2,group=1
    66                           	psect	text38,local,class=CODE,merge=1,delta=2
    67                           	psect	text39,local,class=CODE,merge=1,delta=2
    68                           	psect	text40,local,class=CODE,merge=1,delta=2
    69                           	psect	text41,local,class=CODE,merge=1,delta=2
    70                           	psect	text42,local,class=CODE,merge=1,delta=2,group=1
    71                           	psect	text43,local,class=CODE,merge=1,delta=2,group=1
    72                           	psect	intentry,global,class=CODE,delta=2
    73                           	psect	text45,local,class=CODE,merge=1,delta=2
    74                           	psect	text46,local,class=CODE,merge=1,delta=2
    75                           	psect	text47,local,class=CODE,merge=1,delta=2
    76                           	psect	text48,local,class=CODE,merge=1,delta=2
    77                           	psect	text49,local,class=CODE,merge=1,delta=2
    78                           	psect	text50,local,class=CODE,merge=1,delta=2
    79                           	psect	text51,local,class=CODE,merge=1,delta=2
    80                           	psect	text52,local,class=CODE,merge=1,delta=2
    81                           	psect	text53,local,class=CODE,merge=1,delta=2
    82                           	psect	text54,local,class=CODE,merge=1,delta=2
    83                           	psect	text55,local,class=CODE,merge=1,delta=2
    84                           	psect	text56,local,class=CODE,merge=1,delta=2
    85                           	psect	text57,local,class=CODE,merge=1,delta=2
    86                           	psect	text58,local,class=CODE,merge=1,delta=2
    87                           	psect	text59,local,class=CODE,merge=1,delta=2,group=2
    88                           	psect	text60,local,class=CODE,merge=1,delta=2
    89                           	dabs	1,0x7E,2
    90  0000                     
    91                           ; Version 2.00
    92                           ; Generated 27/05/2018 GMT
    93                           ; 
    94                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
    95                           ; All rights reserved.
    96                           ; 
    97                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    98                           ; 
    99                           ; Redistribution and use in source and binary forms, with or without modification, are
   100                           ; permitted provided that the following conditions are met:
   101                           ; 
   102                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   103                           ;        conditions and the following disclaimer.
   104                           ; 
   105                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   106                           ;        of conditions and the following disclaimer in the documentation and/or other
   107                           ;        materials provided with the distribution.
   108                           ; 
   109                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   110                           ;        software without specific prior written permission.
   111                           ; 
   112                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   113                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   114                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   115                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   116                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   117                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   118                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   119                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   120                           ; 
   121                           ; 
   122                           ; Code-generator required, PIC16LF18325 Definitions
   123                           ; 
   124                           ; SFR Addresses
   125  0000                     	;# 
   126  0001                     	;# 
   127  0002                     	;# 
   128  0003                     	;# 
   129  0004                     	;# 
   130  0005                     	;# 
   131  0006                     	;# 
   132  0007                     	;# 
   133  0008                     	;# 
   134  0009                     	;# 
   135  000A                     	;# 
   136  000B                     	;# 
   137  000C                     	;# 
   138  000E                     	;# 
   139  0010                     	;# 
   140  0011                     	;# 
   141  0012                     	;# 
   142  0013                     	;# 
   143  0014                     	;# 
   144  0015                     	;# 
   145  0015                     	;# 
   146  0016                     	;# 
   147  0016                     	;# 
   148  0017                     	;# 
   149  0018                     	;# 
   150  0019                     	;# 
   151  0019                     	;# 
   152  001A                     	;# 
   153  001B                     	;# 
   154  001C                     	;# 
   155  001D                     	;# 
   156  001E                     	;# 
   157  001F                     	;# 
   158  008C                     	;# 
   159  008E                     	;# 
   160  0090                     	;# 
   161  0091                     	;# 
   162  0092                     	;# 
   163  0093                     	;# 
   164  0094                     	;# 
   165  0097                     	;# 
   166  009B                     	;# 
   167  009B                     	;# 
   168  009C                     	;# 
   169  009D                     	;# 
   170  009E                     	;# 
   171  009F                     	;# 
   172  010C                     	;# 
   173  010E                     	;# 
   174  0111                     	;# 
   175  0112                     	;# 
   176  0113                     	;# 
   177  0114                     	;# 
   178  0115                     	;# 
   179  0116                     	;# 
   180  0117                     	;# 
   181  0118                     	;# 
   182  0119                     	;# 
   183  018C                     	;# 
   184  018E                     	;# 
   185  0199                     	;# 
   186  0199                     	;# 
   187  0199                     	;# 
   188  019A                     	;# 
   189  019A                     	;# 
   190  019A                     	;# 
   191  019B                     	;# 
   192  019B                     	;# 
   193  019B                     	;# 
   194  019B                     	;# 
   195  019B                     	;# 
   196  019C                     	;# 
   197  019C                     	;# 
   198  019C                     	;# 
   199  019D                     	;# 
   200  019D                     	;# 
   201  019D                     	;# 
   202  019E                     	;# 
   203  019E                     	;# 
   204  019E                     	;# 
   205  019F                     	;# 
   206  019F                     	;# 
   207  019F                     	;# 
   208  019F                     	;# 
   209  019F                     	;# 
   210  020C                     	;# 
   211  020E                     	;# 
   212  0211                     	;# 
   213  0211                     	;# 
   214  0212                     	;# 
   215  0212                     	;# 
   216  0213                     	;# 
   217  0213                     	;# 
   218  0214                     	;# 
   219  0214                     	;# 
   220  0215                     	;# 
   221  0215                     	;# 
   222  0215                     	;# 
   223  0215                     	;# 
   224  0216                     	;# 
   225  0216                     	;# 
   226  0217                     	;# 
   227  0217                     	;# 
   228  0219                     	;# 
   229  021A                     	;# 
   230  021B                     	;# 
   231  021C                     	;# 
   232  021D                     	;# 
   233  021D                     	;# 
   234  021E                     	;# 
   235  021F                     	;# 
   236  028C                     	;# 
   237  028E                     	;# 
   238  0291                     	;# 
   239  0291                     	;# 
   240  0292                     	;# 
   241  0293                     	;# 
   242  0294                     	;# 
   243  0295                     	;# 
   244  0295                     	;# 
   245  0296                     	;# 
   246  0297                     	;# 
   247  0298                     	;# 
   248  029F                     	;# 
   249  030C                     	;# 
   250  030E                     	;# 
   251  0311                     	;# 
   252  0311                     	;# 
   253  0312                     	;# 
   254  0313                     	;# 
   255  0314                     	;# 
   256  0315                     	;# 
   257  0315                     	;# 
   258  0316                     	;# 
   259  0317                     	;# 
   260  0318                     	;# 
   261  038C                     	;# 
   262  038E                     	;# 
   263  0391                     	;# 
   264  0392                     	;# 
   265  0393                     	;# 
   266  0397                     	;# 
   267  0398                     	;# 
   268  0399                     	;# 
   269  039A                     	;# 
   270  039C                     	;# 
   271  039D                     	;# 
   272  039E                     	;# 
   273  039F                     	;# 
   274  0411                     	;# 
   275  0411                     	;# 
   276  0412                     	;# 
   277  0413                     	;# 
   278  0414                     	;# 
   279  0415                     	;# 
   280  0416                     	;# 
   281  0417                     	;# 
   282  0418                     	;# 
   283  0418                     	;# 
   284  0419                     	;# 
   285  041A                     	;# 
   286  041B                     	;# 
   287  041C                     	;# 
   288  041D                     	;# 
   289  041E                     	;# 
   290  041F                     	;# 
   291  0498                     	;# 
   292  0498                     	;# 
   293  0499                     	;# 
   294  049A                     	;# 
   295  049B                     	;# 
   296  049B                     	;# 
   297  049C                     	;# 
   298  049D                     	;# 
   299  049E                     	;# 
   300  049F                     	;# 
   301  0617                     	;# 
   302  0618                     	;# 
   303  0619                     	;# 
   304  0619                     	;# 
   305  061A                     	;# 
   306  061B                     	;# 
   307  061C                     	;# 
   308  061C                     	;# 
   309  061F                     	;# 
   310  0691                     	;# 
   311  0692                     	;# 
   312  0693                     	;# 
   313  0694                     	;# 
   314  0695                     	;# 
   315  0696                     	;# 
   316  0697                     	;# 
   317  0698                     	;# 
   318  0699                     	;# 
   319  0711                     	;# 
   320  0712                     	;# 
   321  0713                     	;# 
   322  0714                     	;# 
   323  0715                     	;# 
   324  0716                     	;# 
   325  0717                     	;# 
   326  0718                     	;# 
   327  0719                     	;# 
   328  0891                     	;# 
   329  0891                     	;# 
   330  0891                     	;# 
   331  0891                     	;# 
   332  0891                     	;# 
   333  0891                     	;# 
   334  0892                     	;# 
   335  0892                     	;# 
   336  0892                     	;# 
   337  0893                     	;# 
   338  0893                     	;# 
   339  0893                     	;# 
   340  0893                     	;# 
   341  0893                     	;# 
   342  0893                     	;# 
   343  0894                     	;# 
   344  0894                     	;# 
   345  0894                     	;# 
   346  0895                     	;# 
   347  0895                     	;# 
   348  0895                     	;# 
   349  0896                     	;# 
   350  0896                     	;# 
   351  0896                     	;# 
   352  089B                     	;# 
   353  0911                     	;# 
   354  0912                     	;# 
   355  0913                     	;# 
   356  0914                     	;# 
   357  0915                     	;# 
   358  0916                     	;# 
   359  0918                     	;# 
   360  0919                     	;# 
   361  091A                     	;# 
   362  091B                     	;# 
   363  091C                     	;# 
   364  091D                     	;# 
   365  091E                     	;# 
   366  091F                     	;# 
   367  0E0F                     	;# 
   368  0E10                     	;# 
   369  0E11                     	;# 
   370  0E12                     	;# 
   371  0E13                     	;# 
   372  0E14                     	;# 
   373  0E15                     	;# 
   374  0E16                     	;# 
   375  0E17                     	;# 
   376  0E18                     	;# 
   377  0E19                     	;# 
   378  0E1A                     	;# 
   379  0E1B                     	;# 
   380  0E1C                     	;# 
   381  0E1D                     	;# 
   382  0E1E                     	;# 
   383  0E1F                     	;# 
   384  0E20                     	;# 
   385  0E21                     	;# 
   386  0E22                     	;# 
   387  0E24                     	;# 
   388  0E25                     	;# 
   389  0E28                     	;# 
   390  0E29                     	;# 
   391  0E2A                     	;# 
   392  0E2B                     	;# 
   393  0E2C                     	;# 
   394  0E2D                     	;# 
   395  0E2E                     	;# 
   396  0E2F                     	;# 
   397  0E90                     	;# 
   398  0E91                     	;# 
   399  0E92                     	;# 
   400  0E94                     	;# 
   401  0E95                     	;# 
   402  0EA0                     	;# 
   403  0EA1                     	;# 
   404  0EA2                     	;# 
   405  0EA3                     	;# 
   406  0EA4                     	;# 
   407  0EA5                     	;# 
   408  0F0F                     	;# 
   409  0F10                     	;# 
   410  0F11                     	;# 
   411  0F12                     	;# 
   412  0F13                     	;# 
   413  0F14                     	;# 
   414  0F15                     	;# 
   415  0F16                     	;# 
   416  0F17                     	;# 
   417  0F18                     	;# 
   418  0F19                     	;# 
   419  0F1A                     	;# 
   420  0F1B                     	;# 
   421  0F1C                     	;# 
   422  0F1D                     	;# 
   423  0F1E                     	;# 
   424  0F1F                     	;# 
   425  0F20                     	;# 
   426  0F21                     	;# 
   427  0F22                     	;# 
   428  0F23                     	;# 
   429  0F24                     	;# 
   430  0F25                     	;# 
   431  0F26                     	;# 
   432  0F27                     	;# 
   433  0F28                     	;# 
   434  0F29                     	;# 
   435  0F2A                     	;# 
   436  0F2B                     	;# 
   437  0F2C                     	;# 
   438  0F2D                     	;# 
   439  0F2E                     	;# 
   440  0F2F                     	;# 
   441  0F30                     	;# 
   442  0F31                     	;# 
   443  0F32                     	;# 
   444  0F33                     	;# 
   445  0F34                     	;# 
   446  0F35                     	;# 
   447  0F36                     	;# 
   448  0F37                     	;# 
   449  0FE4                     	;# 
   450  0FE5                     	;# 
   451  0FE6                     	;# 
   452  0FE7                     	;# 
   453  0FE8                     	;# 
   454  0FE9                     	;# 
   455  0FEA                     	;# 
   456  0FEB                     	;# 
   457  0FED                     	;# 
   458  0FEE                     	;# 
   459  0FEF                     	;# 
   460  0000                     	;# 
   461  0001                     	;# 
   462  0002                     	;# 
   463  0003                     	;# 
   464  0004                     	;# 
   465  0005                     	;# 
   466  0006                     	;# 
   467  0007                     	;# 
   468  0008                     	;# 
   469  0009                     	;# 
   470  000A                     	;# 
   471  000B                     	;# 
   472  000C                     	;# 
   473  000E                     	;# 
   474  0010                     	;# 
   475  0011                     	;# 
   476  0012                     	;# 
   477  0013                     	;# 
   478  0014                     	;# 
   479  0015                     	;# 
   480  0015                     	;# 
   481  0016                     	;# 
   482  0016                     	;# 
   483  0017                     	;# 
   484  0018                     	;# 
   485  0019                     	;# 
   486  0019                     	;# 
   487  001A                     	;# 
   488  001B                     	;# 
   489  001C                     	;# 
   490  001D                     	;# 
   491  001E                     	;# 
   492  001F                     	;# 
   493  008C                     	;# 
   494  008E                     	;# 
   495  0090                     	;# 
   496  0091                     	;# 
   497  0092                     	;# 
   498  0093                     	;# 
   499  0094                     	;# 
   500  0097                     	;# 
   501  009B                     	;# 
   502  009B                     	;# 
   503  009C                     	;# 
   504  009D                     	;# 
   505  009E                     	;# 
   506  009F                     	;# 
   507  010C                     	;# 
   508  010E                     	;# 
   509  0111                     	;# 
   510  0112                     	;# 
   511  0113                     	;# 
   512  0114                     	;# 
   513  0115                     	;# 
   514  0116                     	;# 
   515  0117                     	;# 
   516  0118                     	;# 
   517  0119                     	;# 
   518  018C                     	;# 
   519  018E                     	;# 
   520  0199                     	;# 
   521  0199                     	;# 
   522  0199                     	;# 
   523  019A                     	;# 
   524  019A                     	;# 
   525  019A                     	;# 
   526  019B                     	;# 
   527  019B                     	;# 
   528  019B                     	;# 
   529  019B                     	;# 
   530  019B                     	;# 
   531  019C                     	;# 
   532  019C                     	;# 
   533  019C                     	;# 
   534  019D                     	;# 
   535  019D                     	;# 
   536  019D                     	;# 
   537  019E                     	;# 
   538  019E                     	;# 
   539  019E                     	;# 
   540  019F                     	;# 
   541  019F                     	;# 
   542  019F                     	;# 
   543  019F                     	;# 
   544  019F                     	;# 
   545  020C                     	;# 
   546  020E                     	;# 
   547  0211                     	;# 
   548  0211                     	;# 
   549  0212                     	;# 
   550  0212                     	;# 
   551  0213                     	;# 
   552  0213                     	;# 
   553  0214                     	;# 
   554  0214                     	;# 
   555  0215                     	;# 
   556  0215                     	;# 
   557  0215                     	;# 
   558  0215                     	;# 
   559  0216                     	;# 
   560  0216                     	;# 
   561  0217                     	;# 
   562  0217                     	;# 
   563  0219                     	;# 
   564  021A                     	;# 
   565  021B                     	;# 
   566  021C                     	;# 
   567  021D                     	;# 
   568  021D                     	;# 
   569  021E                     	;# 
   570  021F                     	;# 
   571  028C                     	;# 
   572  028E                     	;# 
   573  0291                     	;# 
   574  0291                     	;# 
   575  0292                     	;# 
   576  0293                     	;# 
   577  0294                     	;# 
   578  0295                     	;# 
   579  0295                     	;# 
   580  0296                     	;# 
   581  0297                     	;# 
   582  0298                     	;# 
   583  029F                     	;# 
   584  030C                     	;# 
   585  030E                     	;# 
   586  0311                     	;# 
   587  0311                     	;# 
   588  0312                     	;# 
   589  0313                     	;# 
   590  0314                     	;# 
   591  0315                     	;# 
   592  0315                     	;# 
   593  0316                     	;# 
   594  0317                     	;# 
   595  0318                     	;# 
   596  038C                     	;# 
   597  038E                     	;# 
   598  0391                     	;# 
   599  0392                     	;# 
   600  0393                     	;# 
   601  0397                     	;# 
   602  0398                     	;# 
   603  0399                     	;# 
   604  039A                     	;# 
   605  039C                     	;# 
   606  039D                     	;# 
   607  039E                     	;# 
   608  039F                     	;# 
   609  0411                     	;# 
   610  0411                     	;# 
   611  0412                     	;# 
   612  0413                     	;# 
   613  0414                     	;# 
   614  0415                     	;# 
   615  0416                     	;# 
   616  0417                     	;# 
   617  0418                     	;# 
   618  0418                     	;# 
   619  0419                     	;# 
   620  041A                     	;# 
   621  041B                     	;# 
   622  041C                     	;# 
   623  041D                     	;# 
   624  041E                     	;# 
   625  041F                     	;# 
   626  0498                     	;# 
   627  0498                     	;# 
   628  0499                     	;# 
   629  049A                     	;# 
   630  049B                     	;# 
   631  049B                     	;# 
   632  049C                     	;# 
   633  049D                     	;# 
   634  049E                     	;# 
   635  049F                     	;# 
   636  0617                     	;# 
   637  0618                     	;# 
   638  0619                     	;# 
   639  0619                     	;# 
   640  061A                     	;# 
   641  061B                     	;# 
   642  061C                     	;# 
   643  061C                     	;# 
   644  061F                     	;# 
   645  0691                     	;# 
   646  0692                     	;# 
   647  0693                     	;# 
   648  0694                     	;# 
   649  0695                     	;# 
   650  0696                     	;# 
   651  0697                     	;# 
   652  0698                     	;# 
   653  0699                     	;# 
   654  0711                     	;# 
   655  0712                     	;# 
   656  0713                     	;# 
   657  0714                     	;# 
   658  0715                     	;# 
   659  0716                     	;# 
   660  0717                     	;# 
   661  0718                     	;# 
   662  0719                     	;# 
   663  0891                     	;# 
   664  0891                     	;# 
   665  0891                     	;# 
   666  0891                     	;# 
   667  0891                     	;# 
   668  0891                     	;# 
   669  0892                     	;# 
   670  0892                     	;# 
   671  0892                     	;# 
   672  0893                     	;# 
   673  0893                     	;# 
   674  0893                     	;# 
   675  0893                     	;# 
   676  0893                     	;# 
   677  0893                     	;# 
   678  0894                     	;# 
   679  0894                     	;# 
   680  0894                     	;# 
   681  0895                     	;# 
   682  0895                     	;# 
   683  0895                     	;# 
   684  0896                     	;# 
   685  0896                     	;# 
   686  0896                     	;# 
   687  089B                     	;# 
   688  0911                     	;# 
   689  0912                     	;# 
   690  0913                     	;# 
   691  0914                     	;# 
   692  0915                     	;# 
   693  0916                     	;# 
   694  0918                     	;# 
   695  0919                     	;# 
   696  091A                     	;# 
   697  091B                     	;# 
   698  091C                     	;# 
   699  091D                     	;# 
   700  091E                     	;# 
   701  091F                     	;# 
   702  0E0F                     	;# 
   703  0E10                     	;# 
   704  0E11                     	;# 
   705  0E12                     	;# 
   706  0E13                     	;# 
   707  0E14                     	;# 
   708  0E15                     	;# 
   709  0E16                     	;# 
   710  0E17                     	;# 
   711  0E18                     	;# 
   712  0E19                     	;# 
   713  0E1A                     	;# 
   714  0E1B                     	;# 
   715  0E1C                     	;# 
   716  0E1D                     	;# 
   717  0E1E                     	;# 
   718  0E1F                     	;# 
   719  0E20                     	;# 
   720  0E21                     	;# 
   721  0E22                     	;# 
   722  0E24                     	;# 
   723  0E25                     	;# 
   724  0E28                     	;# 
   725  0E29                     	;# 
   726  0E2A                     	;# 
   727  0E2B                     	;# 
   728  0E2C                     	;# 
   729  0E2D                     	;# 
   730  0E2E                     	;# 
   731  0E2F                     	;# 
   732  0E90                     	;# 
   733  0E91                     	;# 
   734  0E92                     	;# 
   735  0E94                     	;# 
   736  0E95                     	;# 
   737  0EA0                     	;# 
   738  0EA1                     	;# 
   739  0EA2                     	;# 
   740  0EA3                     	;# 
   741  0EA4                     	;# 
   742  0EA5                     	;# 
   743  0F0F                     	;# 
   744  0F10                     	;# 
   745  0F11                     	;# 
   746  0F12                     	;# 
   747  0F13                     	;# 
   748  0F14                     	;# 
   749  0F15                     	;# 
   750  0F16                     	;# 
   751  0F17                     	;# 
   752  0F18                     	;# 
   753  0F19                     	;# 
   754  0F1A                     	;# 
   755  0F1B                     	;# 
   756  0F1C                     	;# 
   757  0F1D                     	;# 
   758  0F1E                     	;# 
   759  0F1F                     	;# 
   760  0F20                     	;# 
   761  0F21                     	;# 
   762  0F22                     	;# 
   763  0F23                     	;# 
   764  0F24                     	;# 
   765  0F25                     	;# 
   766  0F26                     	;# 
   767  0F27                     	;# 
   768  0F28                     	;# 
   769  0F29                     	;# 
   770  0F2A                     	;# 
   771  0F2B                     	;# 
   772  0F2C                     	;# 
   773  0F2D                     	;# 
   774  0F2E                     	;# 
   775  0F2F                     	;# 
   776  0F30                     	;# 
   777  0F31                     	;# 
   778  0F32                     	;# 
   779  0F33                     	;# 
   780  0F34                     	;# 
   781  0F35                     	;# 
   782  0F36                     	;# 
   783  0F37                     	;# 
   784  0FE4                     	;# 
   785  0FE5                     	;# 
   786  0FE6                     	;# 
   787  0FE7                     	;# 
   788  0FE8                     	;# 
   789  0FE9                     	;# 
   790  0FEA                     	;# 
   791  0FEB                     	;# 
   792  0FED                     	;# 
   793  0FEE                     	;# 
   794  0FEF                     	;# 
   795  0000                     	;# 
   796  0001                     	;# 
   797  0002                     	;# 
   798  0003                     	;# 
   799  0004                     	;# 
   800  0005                     	;# 
   801  0006                     	;# 
   802  0007                     	;# 
   803  0008                     	;# 
   804  0009                     	;# 
   805  000A                     	;# 
   806  000B                     	;# 
   807  000C                     	;# 
   808  000E                     	;# 
   809  0010                     	;# 
   810  0011                     	;# 
   811  0012                     	;# 
   812  0013                     	;# 
   813  0014                     	;# 
   814  0015                     	;# 
   815  0015                     	;# 
   816  0016                     	;# 
   817  0016                     	;# 
   818  0017                     	;# 
   819  0018                     	;# 
   820  0019                     	;# 
   821  0019                     	;# 
   822  001A                     	;# 
   823  001B                     	;# 
   824  001C                     	;# 
   825  001D                     	;# 
   826  001E                     	;# 
   827  001F                     	;# 
   828  008C                     	;# 
   829  008E                     	;# 
   830  0090                     	;# 
   831  0091                     	;# 
   832  0092                     	;# 
   833  0093                     	;# 
   834  0094                     	;# 
   835  0097                     	;# 
   836  009B                     	;# 
   837  009B                     	;# 
   838  009C                     	;# 
   839  009D                     	;# 
   840  009E                     	;# 
   841  009F                     	;# 
   842  010C                     	;# 
   843  010E                     	;# 
   844  0111                     	;# 
   845  0112                     	;# 
   846  0113                     	;# 
   847  0114                     	;# 
   848  0115                     	;# 
   849  0116                     	;# 
   850  0117                     	;# 
   851  0118                     	;# 
   852  0119                     	;# 
   853  018C                     	;# 
   854  018E                     	;# 
   855  0199                     	;# 
   856  0199                     	;# 
   857  0199                     	;# 
   858  019A                     	;# 
   859  019A                     	;# 
   860  019A                     	;# 
   861  019B                     	;# 
   862  019B                     	;# 
   863  019B                     	;# 
   864  019B                     	;# 
   865  019B                     	;# 
   866  019C                     	;# 
   867  019C                     	;# 
   868  019C                     	;# 
   869  019D                     	;# 
   870  019D                     	;# 
   871  019D                     	;# 
   872  019E                     	;# 
   873  019E                     	;# 
   874  019E                     	;# 
   875  019F                     	;# 
   876  019F                     	;# 
   877  019F                     	;# 
   878  019F                     	;# 
   879  019F                     	;# 
   880  020C                     	;# 
   881  020E                     	;# 
   882  0211                     	;# 
   883  0211                     	;# 
   884  0212                     	;# 
   885  0212                     	;# 
   886  0213                     	;# 
   887  0213                     	;# 
   888  0214                     	;# 
   889  0214                     	;# 
   890  0215                     	;# 
   891  0215                     	;# 
   892  0215                     	;# 
   893  0215                     	;# 
   894  0216                     	;# 
   895  0216                     	;# 
   896  0217                     	;# 
   897  0217                     	;# 
   898  0219                     	;# 
   899  021A                     	;# 
   900  021B                     	;# 
   901  021C                     	;# 
   902  021D                     	;# 
   903  021D                     	;# 
   904  021E                     	;# 
   905  021F                     	;# 
   906  028C                     	;# 
   907  028E                     	;# 
   908  0291                     	;# 
   909  0291                     	;# 
   910  0292                     	;# 
   911  0293                     	;# 
   912  0294                     	;# 
   913  0295                     	;# 
   914  0295                     	;# 
   915  0296                     	;# 
   916  0297                     	;# 
   917  0298                     	;# 
   918  029F                     	;# 
   919  030C                     	;# 
   920  030E                     	;# 
   921  0311                     	;# 
   922  0311                     	;# 
   923  0312                     	;# 
   924  0313                     	;# 
   925  0314                     	;# 
   926  0315                     	;# 
   927  0315                     	;# 
   928  0316                     	;# 
   929  0317                     	;# 
   930  0318                     	;# 
   931  038C                     	;# 
   932  038E                     	;# 
   933  0391                     	;# 
   934  0392                     	;# 
   935  0393                     	;# 
   936  0397                     	;# 
   937  0398                     	;# 
   938  0399                     	;# 
   939  039A                     	;# 
   940  039C                     	;# 
   941  039D                     	;# 
   942  039E                     	;# 
   943  039F                     	;# 
   944  0411                     	;# 
   945  0411                     	;# 
   946  0412                     	;# 
   947  0413                     	;# 
   948  0414                     	;# 
   949  0415                     	;# 
   950  0416                     	;# 
   951  0417                     	;# 
   952  0418                     	;# 
   953  0418                     	;# 
   954  0419                     	;# 
   955  041A                     	;# 
   956  041B                     	;# 
   957  041C                     	;# 
   958  041D                     	;# 
   959  041E                     	;# 
   960  041F                     	;# 
   961  0498                     	;# 
   962  0498                     	;# 
   963  0499                     	;# 
   964  049A                     	;# 
   965  049B                     	;# 
   966  049B                     	;# 
   967  049C                     	;# 
   968  049D                     	;# 
   969  049E                     	;# 
   970  049F                     	;# 
   971  0617                     	;# 
   972  0618                     	;# 
   973  0619                     	;# 
   974  0619                     	;# 
   975  061A                     	;# 
   976  061B                     	;# 
   977  061C                     	;# 
   978  061C                     	;# 
   979  061F                     	;# 
   980  0691                     	;# 
   981  0692                     	;# 
   982  0693                     	;# 
   983  0694                     	;# 
   984  0695                     	;# 
   985  0696                     	;# 
   986  0697                     	;# 
   987  0698                     	;# 
   988  0699                     	;# 
   989  0711                     	;# 
   990  0712                     	;# 
   991  0713                     	;# 
   992  0714                     	;# 
   993  0715                     	;# 
   994  0716                     	;# 
   995  0717                     	;# 
   996  0718                     	;# 
   997  0719                     	;# 
   998  0891                     	;# 
   999  0891                     	;# 
  1000  0891                     	;# 
  1001  0891                     	;# 
  1002  0891                     	;# 
  1003  0891                     	;# 
  1004  0892                     	;# 
  1005  0892                     	;# 
  1006  0892                     	;# 
  1007  0893                     	;# 
  1008  0893                     	;# 
  1009  0893                     	;# 
  1010  0893                     	;# 
  1011  0893                     	;# 
  1012  0893                     	;# 
  1013  0894                     	;# 
  1014  0894                     	;# 
  1015  0894                     	;# 
  1016  0895                     	;# 
  1017  0895                     	;# 
  1018  0895                     	;# 
  1019  0896                     	;# 
  1020  0896                     	;# 
  1021  0896                     	;# 
  1022  089B                     	;# 
  1023  0911                     	;# 
  1024  0912                     	;# 
  1025  0913                     	;# 
  1026  0914                     	;# 
  1027  0915                     	;# 
  1028  0916                     	;# 
  1029  0918                     	;# 
  1030  0919                     	;# 
  1031  091A                     	;# 
  1032  091B                     	;# 
  1033  091C                     	;# 
  1034  091D                     	;# 
  1035  091E                     	;# 
  1036  091F                     	;# 
  1037  0E0F                     	;# 
  1038  0E10                     	;# 
  1039  0E11                     	;# 
  1040  0E12                     	;# 
  1041  0E13                     	;# 
  1042  0E14                     	;# 
  1043  0E15                     	;# 
  1044  0E16                     	;# 
  1045  0E17                     	;# 
  1046  0E18                     	;# 
  1047  0E19                     	;# 
  1048  0E1A                     	;# 
  1049  0E1B                     	;# 
  1050  0E1C                     	;# 
  1051  0E1D                     	;# 
  1052  0E1E                     	;# 
  1053  0E1F                     	;# 
  1054  0E20                     	;# 
  1055  0E21                     	;# 
  1056  0E22                     	;# 
  1057  0E24                     	;# 
  1058  0E25                     	;# 
  1059  0E28                     	;# 
  1060  0E29                     	;# 
  1061  0E2A                     	;# 
  1062  0E2B                     	;# 
  1063  0E2C                     	;# 
  1064  0E2D                     	;# 
  1065  0E2E                     	;# 
  1066  0E2F                     	;# 
  1067  0E90                     	;# 
  1068  0E91                     	;# 
  1069  0E92                     	;# 
  1070  0E94                     	;# 
  1071  0E95                     	;# 
  1072  0EA0                     	;# 
  1073  0EA1                     	;# 
  1074  0EA2                     	;# 
  1075  0EA3                     	;# 
  1076  0EA4                     	;# 
  1077  0EA5                     	;# 
  1078  0F0F                     	;# 
  1079  0F10                     	;# 
  1080  0F11                     	;# 
  1081  0F12                     	;# 
  1082  0F13                     	;# 
  1083  0F14                     	;# 
  1084  0F15                     	;# 
  1085  0F16                     	;# 
  1086  0F17                     	;# 
  1087  0F18                     	;# 
  1088  0F19                     	;# 
  1089  0F1A                     	;# 
  1090  0F1B                     	;# 
  1091  0F1C                     	;# 
  1092  0F1D                     	;# 
  1093  0F1E                     	;# 
  1094  0F1F                     	;# 
  1095  0F20                     	;# 
  1096  0F21                     	;# 
  1097  0F22                     	;# 
  1098  0F23                     	;# 
  1099  0F24                     	;# 
  1100  0F25                     	;# 
  1101  0F26                     	;# 
  1102  0F27                     	;# 
  1103  0F28                     	;# 
  1104  0F29                     	;# 
  1105  0F2A                     	;# 
  1106  0F2B                     	;# 
  1107  0F2C                     	;# 
  1108  0F2D                     	;# 
  1109  0F2E                     	;# 
  1110  0F2F                     	;# 
  1111  0F30                     	;# 
  1112  0F31                     	;# 
  1113  0F32                     	;# 
  1114  0F33                     	;# 
  1115  0F34                     	;# 
  1116  0F35                     	;# 
  1117  0F36                     	;# 
  1118  0F37                     	;# 
  1119  0FE4                     	;# 
  1120  0FE5                     	;# 
  1121  0FE6                     	;# 
  1122  0FE7                     	;# 
  1123  0FE8                     	;# 
  1124  0FE9                     	;# 
  1125  0FEA                     	;# 
  1126  0FEB                     	;# 
  1127  0FED                     	;# 
  1128  0FEE                     	;# 
  1129  0FEF                     	;# 
  1130  0000                     	;# 
  1131  0001                     	;# 
  1132  0002                     	;# 
  1133  0003                     	;# 
  1134  0004                     	;# 
  1135  0005                     	;# 
  1136  0006                     	;# 
  1137  0007                     	;# 
  1138  0008                     	;# 
  1139  0009                     	;# 
  1140  000A                     	;# 
  1141  000B                     	;# 
  1142  000C                     	;# 
  1143  000E                     	;# 
  1144  0010                     	;# 
  1145  0011                     	;# 
  1146  0012                     	;# 
  1147  0013                     	;# 
  1148  0014                     	;# 
  1149  0015                     	;# 
  1150  0015                     	;# 
  1151  0016                     	;# 
  1152  0016                     	;# 
  1153  0017                     	;# 
  1154  0018                     	;# 
  1155  0019                     	;# 
  1156  0019                     	;# 
  1157  001A                     	;# 
  1158  001B                     	;# 
  1159  001C                     	;# 
  1160  001D                     	;# 
  1161  001E                     	;# 
  1162  001F                     	;# 
  1163  008C                     	;# 
  1164  008E                     	;# 
  1165  0090                     	;# 
  1166  0091                     	;# 
  1167  0092                     	;# 
  1168  0093                     	;# 
  1169  0094                     	;# 
  1170  0097                     	;# 
  1171  009B                     	;# 
  1172  009B                     	;# 
  1173  009C                     	;# 
  1174  009D                     	;# 
  1175  009E                     	;# 
  1176  009F                     	;# 
  1177  010C                     	;# 
  1178  010E                     	;# 
  1179  0111                     	;# 
  1180  0112                     	;# 
  1181  0113                     	;# 
  1182  0114                     	;# 
  1183  0115                     	;# 
  1184  0116                     	;# 
  1185  0117                     	;# 
  1186  0118                     	;# 
  1187  0119                     	;# 
  1188  018C                     	;# 
  1189  018E                     	;# 
  1190  0199                     	;# 
  1191  0199                     	;# 
  1192  0199                     	;# 
  1193  019A                     	;# 
  1194  019A                     	;# 
  1195  019A                     	;# 
  1196  019B                     	;# 
  1197  019B                     	;# 
  1198  019B                     	;# 
  1199  019B                     	;# 
  1200  019B                     	;# 
  1201  019C                     	;# 
  1202  019C                     	;# 
  1203  019C                     	;# 
  1204  019D                     	;# 
  1205  019D                     	;# 
  1206  019D                     	;# 
  1207  019E                     	;# 
  1208  019E                     	;# 
  1209  019E                     	;# 
  1210  019F                     	;# 
  1211  019F                     	;# 
  1212  019F                     	;# 
  1213  019F                     	;# 
  1214  019F                     	;# 
  1215  020C                     	;# 
  1216  020E                     	;# 
  1217  0211                     	;# 
  1218  0211                     	;# 
  1219  0212                     	;# 
  1220  0212                     	;# 
  1221  0213                     	;# 
  1222  0213                     	;# 
  1223  0214                     	;# 
  1224  0214                     	;# 
  1225  0215                     	;# 
  1226  0215                     	;# 
  1227  0215                     	;# 
  1228  0215                     	;# 
  1229  0216                     	;# 
  1230  0216                     	;# 
  1231  0217                     	;# 
  1232  0217                     	;# 
  1233  0219                     	;# 
  1234  021A                     	;# 
  1235  021B                     	;# 
  1236  021C                     	;# 
  1237  021D                     	;# 
  1238  021D                     	;# 
  1239  021E                     	;# 
  1240  021F                     	;# 
  1241  028C                     	;# 
  1242  028E                     	;# 
  1243  0291                     	;# 
  1244  0291                     	;# 
  1245  0292                     	;# 
  1246  0293                     	;# 
  1247  0294                     	;# 
  1248  0295                     	;# 
  1249  0295                     	;# 
  1250  0296                     	;# 
  1251  0297                     	;# 
  1252  0298                     	;# 
  1253  029F                     	;# 
  1254  030C                     	;# 
  1255  030E                     	;# 
  1256  0311                     	;# 
  1257  0311                     	;# 
  1258  0312                     	;# 
  1259  0313                     	;# 
  1260  0314                     	;# 
  1261  0315                     	;# 
  1262  0315                     	;# 
  1263  0316                     	;# 
  1264  0317                     	;# 
  1265  0318                     	;# 
  1266  038C                     	;# 
  1267  038E                     	;# 
  1268  0391                     	;# 
  1269  0392                     	;# 
  1270  0393                     	;# 
  1271  0397                     	;# 
  1272  0398                     	;# 
  1273  0399                     	;# 
  1274  039A                     	;# 
  1275  039C                     	;# 
  1276  039D                     	;# 
  1277  039E                     	;# 
  1278  039F                     	;# 
  1279  0411                     	;# 
  1280  0411                     	;# 
  1281  0412                     	;# 
  1282  0413                     	;# 
  1283  0414                     	;# 
  1284  0415                     	;# 
  1285  0416                     	;# 
  1286  0417                     	;# 
  1287  0418                     	;# 
  1288  0418                     	;# 
  1289  0419                     	;# 
  1290  041A                     	;# 
  1291  041B                     	;# 
  1292  041C                     	;# 
  1293  041D                     	;# 
  1294  041E                     	;# 
  1295  041F                     	;# 
  1296  0498                     	;# 
  1297  0498                     	;# 
  1298  0499                     	;# 
  1299  049A                     	;# 
  1300  049B                     	;# 
  1301  049B                     	;# 
  1302  049C                     	;# 
  1303  049D                     	;# 
  1304  049E                     	;# 
  1305  049F                     	;# 
  1306  0617                     	;# 
  1307  0618                     	;# 
  1308  0619                     	;# 
  1309  0619                     	;# 
  1310  061A                     	;# 
  1311  061B                     	;# 
  1312  061C                     	;# 
  1313  061C                     	;# 
  1314  061F                     	;# 
  1315  0691                     	;# 
  1316  0692                     	;# 
  1317  0693                     	;# 
  1318  0694                     	;# 
  1319  0695                     	;# 
  1320  0696                     	;# 
  1321  0697                     	;# 
  1322  0698                     	;# 
  1323  0699                     	;# 
  1324  0711                     	;# 
  1325  0712                     	;# 
  1326  0713                     	;# 
  1327  0714                     	;# 
  1328  0715                     	;# 
  1329  0716                     	;# 
  1330  0717                     	;# 
  1331  0718                     	;# 
  1332  0719                     	;# 
  1333  0891                     	;# 
  1334  0891                     	;# 
  1335  0891                     	;# 
  1336  0891                     	;# 
  1337  0891                     	;# 
  1338  0891                     	;# 
  1339  0892                     	;# 
  1340  0892                     	;# 
  1341  0892                     	;# 
  1342  0893                     	;# 
  1343  0893                     	;# 
  1344  0893                     	;# 
  1345  0893                     	;# 
  1346  0893                     	;# 
  1347  0893                     	;# 
  1348  0894                     	;# 
  1349  0894                     	;# 
  1350  0894                     	;# 
  1351  0895                     	;# 
  1352  0895                     	;# 
  1353  0895                     	;# 
  1354  0896                     	;# 
  1355  0896                     	;# 
  1356  0896                     	;# 
  1357  089B                     	;# 
  1358  0911                     	;# 
  1359  0912                     	;# 
  1360  0913                     	;# 
  1361  0914                     	;# 
  1362  0915                     	;# 
  1363  0916                     	;# 
  1364  0918                     	;# 
  1365  0919                     	;# 
  1366  091A                     	;# 
  1367  091B                     	;# 
  1368  091C                     	;# 
  1369  091D                     	;# 
  1370  091E                     	;# 
  1371  091F                     	;# 
  1372  0E0F                     	;# 
  1373  0E10                     	;# 
  1374  0E11                     	;# 
  1375  0E12                     	;# 
  1376  0E13                     	;# 
  1377  0E14                     	;# 
  1378  0E15                     	;# 
  1379  0E16                     	;# 
  1380  0E17                     	;# 
  1381  0E18                     	;# 
  1382  0E19                     	;# 
  1383  0E1A                     	;# 
  1384  0E1B                     	;# 
  1385  0E1C                     	;# 
  1386  0E1D                     	;# 
  1387  0E1E                     	;# 
  1388  0E1F                     	;# 
  1389  0E20                     	;# 
  1390  0E21                     	;# 
  1391  0E22                     	;# 
  1392  0E24                     	;# 
  1393  0E25                     	;# 
  1394  0E28                     	;# 
  1395  0E29                     	;# 
  1396  0E2A                     	;# 
  1397  0E2B                     	;# 
  1398  0E2C                     	;# 
  1399  0E2D                     	;# 
  1400  0E2E                     	;# 
  1401  0E2F                     	;# 
  1402  0E90                     	;# 
  1403  0E91                     	;# 
  1404  0E92                     	;# 
  1405  0E94                     	;# 
  1406  0E95                     	;# 
  1407  0EA0                     	;# 
  1408  0EA1                     	;# 
  1409  0EA2                     	;# 
  1410  0EA3                     	;# 
  1411  0EA4                     	;# 
  1412  0EA5                     	;# 
  1413  0F0F                     	;# 
  1414  0F10                     	;# 
  1415  0F11                     	;# 
  1416  0F12                     	;# 
  1417  0F13                     	;# 
  1418  0F14                     	;# 
  1419  0F15                     	;# 
  1420  0F16                     	;# 
  1421  0F17                     	;# 
  1422  0F18                     	;# 
  1423  0F19                     	;# 
  1424  0F1A                     	;# 
  1425  0F1B                     	;# 
  1426  0F1C                     	;# 
  1427  0F1D                     	;# 
  1428  0F1E                     	;# 
  1429  0F1F                     	;# 
  1430  0F20                     	;# 
  1431  0F21                     	;# 
  1432  0F22                     	;# 
  1433  0F23                     	;# 
  1434  0F24                     	;# 
  1435  0F25                     	;# 
  1436  0F26                     	;# 
  1437  0F27                     	;# 
  1438  0F28                     	;# 
  1439  0F29                     	;# 
  1440  0F2A                     	;# 
  1441  0F2B                     	;# 
  1442  0F2C                     	;# 
  1443  0F2D                     	;# 
  1444  0F2E                     	;# 
  1445  0F2F                     	;# 
  1446  0F30                     	;# 
  1447  0F31                     	;# 
  1448  0F32                     	;# 
  1449  0F33                     	;# 
  1450  0F34                     	;# 
  1451  0F35                     	;# 
  1452  0F36                     	;# 
  1453  0F37                     	;# 
  1454  0FE4                     	;# 
  1455  0FE5                     	;# 
  1456  0FE6                     	;# 
  1457  0FE7                     	;# 
  1458  0FE8                     	;# 
  1459  0FE9                     	;# 
  1460  0FEA                     	;# 
  1461  0FEB                     	;# 
  1462  0FED                     	;# 
  1463  0FEE                     	;# 
  1464  0FEF                     	;# 
  1465  0000                     	;# 
  1466  0001                     	;# 
  1467  0002                     	;# 
  1468  0003                     	;# 
  1469  0004                     	;# 
  1470  0005                     	;# 
  1471  0006                     	;# 
  1472  0007                     	;# 
  1473  0008                     	;# 
  1474  0009                     	;# 
  1475  000A                     	;# 
  1476  000B                     	;# 
  1477  000C                     	;# 
  1478  000E                     	;# 
  1479  0010                     	;# 
  1480  0011                     	;# 
  1481  0012                     	;# 
  1482  0013                     	;# 
  1483  0014                     	;# 
  1484  0015                     	;# 
  1485  0015                     	;# 
  1486  0016                     	;# 
  1487  0016                     	;# 
  1488  0017                     	;# 
  1489  0018                     	;# 
  1490  0019                     	;# 
  1491  0019                     	;# 
  1492  001A                     	;# 
  1493  001B                     	;# 
  1494  001C                     	;# 
  1495  001D                     	;# 
  1496  001E                     	;# 
  1497  001F                     	;# 
  1498  008C                     	;# 
  1499  008E                     	;# 
  1500  0090                     	;# 
  1501  0091                     	;# 
  1502  0092                     	;# 
  1503  0093                     	;# 
  1504  0094                     	;# 
  1505  0097                     	;# 
  1506  009B                     	;# 
  1507  009B                     	;# 
  1508  009C                     	;# 
  1509  009D                     	;# 
  1510  009E                     	;# 
  1511  009F                     	;# 
  1512  010C                     	;# 
  1513  010E                     	;# 
  1514  0111                     	;# 
  1515  0112                     	;# 
  1516  0113                     	;# 
  1517  0114                     	;# 
  1518  0115                     	;# 
  1519  0116                     	;# 
  1520  0117                     	;# 
  1521  0118                     	;# 
  1522  0119                     	;# 
  1523  018C                     	;# 
  1524  018E                     	;# 
  1525  0199                     	;# 
  1526  0199                     	;# 
  1527  0199                     	;# 
  1528  019A                     	;# 
  1529  019A                     	;# 
  1530  019A                     	;# 
  1531  019B                     	;# 
  1532  019B                     	;# 
  1533  019B                     	;# 
  1534  019B                     	;# 
  1535  019B                     	;# 
  1536  019C                     	;# 
  1537  019C                     	;# 
  1538  019C                     	;# 
  1539  019D                     	;# 
  1540  019D                     	;# 
  1541  019D                     	;# 
  1542  019E                     	;# 
  1543  019E                     	;# 
  1544  019E                     	;# 
  1545  019F                     	;# 
  1546  019F                     	;# 
  1547  019F                     	;# 
  1548  019F                     	;# 
  1549  019F                     	;# 
  1550  020C                     	;# 
  1551  020E                     	;# 
  1552  0211                     	;# 
  1553  0211                     	;# 
  1554  0212                     	;# 
  1555  0212                     	;# 
  1556  0213                     	;# 
  1557  0213                     	;# 
  1558  0214                     	;# 
  1559  0214                     	;# 
  1560  0215                     	;# 
  1561  0215                     	;# 
  1562  0215                     	;# 
  1563  0215                     	;# 
  1564  0216                     	;# 
  1565  0216                     	;# 
  1566  0217                     	;# 
  1567  0217                     	;# 
  1568  0219                     	;# 
  1569  021A                     	;# 
  1570  021B                     	;# 
  1571  021C                     	;# 
  1572  021D                     	;# 
  1573  021D                     	;# 
  1574  021E                     	;# 
  1575  021F                     	;# 
  1576  028C                     	;# 
  1577  028E                     	;# 
  1578  0291                     	;# 
  1579  0291                     	;# 
  1580  0292                     	;# 
  1581  0293                     	;# 
  1582  0294                     	;# 
  1583  0295                     	;# 
  1584  0295                     	;# 
  1585  0296                     	;# 
  1586  0297                     	;# 
  1587  0298                     	;# 
  1588  029F                     	;# 
  1589  030C                     	;# 
  1590  030E                     	;# 
  1591  0311                     	;# 
  1592  0311                     	;# 
  1593  0312                     	;# 
  1594  0313                     	;# 
  1595  0314                     	;# 
  1596  0315                     	;# 
  1597  0315                     	;# 
  1598  0316                     	;# 
  1599  0317                     	;# 
  1600  0318                     	;# 
  1601  038C                     	;# 
  1602  038E                     	;# 
  1603  0391                     	;# 
  1604  0392                     	;# 
  1605  0393                     	;# 
  1606  0397                     	;# 
  1607  0398                     	;# 
  1608  0399                     	;# 
  1609  039A                     	;# 
  1610  039C                     	;# 
  1611  039D                     	;# 
  1612  039E                     	;# 
  1613  039F                     	;# 
  1614  0411                     	;# 
  1615  0411                     	;# 
  1616  0412                     	;# 
  1617  0413                     	;# 
  1618  0414                     	;# 
  1619  0415                     	;# 
  1620  0416                     	;# 
  1621  0417                     	;# 
  1622  0418                     	;# 
  1623  0418                     	;# 
  1624  0419                     	;# 
  1625  041A                     	;# 
  1626  041B                     	;# 
  1627  041C                     	;# 
  1628  041D                     	;# 
  1629  041E                     	;# 
  1630  041F                     	;# 
  1631  0498                     	;# 
  1632  0498                     	;# 
  1633  0499                     	;# 
  1634  049A                     	;# 
  1635  049B                     	;# 
  1636  049B                     	;# 
  1637  049C                     	;# 
  1638  049D                     	;# 
  1639  049E                     	;# 
  1640  049F                     	;# 
  1641  0617                     	;# 
  1642  0618                     	;# 
  1643  0619                     	;# 
  1644  0619                     	;# 
  1645  061A                     	;# 
  1646  061B                     	;# 
  1647  061C                     	;# 
  1648  061C                     	;# 
  1649  061F                     	;# 
  1650  0691                     	;# 
  1651  0692                     	;# 
  1652  0693                     	;# 
  1653  0694                     	;# 
  1654  0695                     	;# 
  1655  0696                     	;# 
  1656  0697                     	;# 
  1657  0698                     	;# 
  1658  0699                     	;# 
  1659  0711                     	;# 
  1660  0712                     	;# 
  1661  0713                     	;# 
  1662  0714                     	;# 
  1663  0715                     	;# 
  1664  0716                     	;# 
  1665  0717                     	;# 
  1666  0718                     	;# 
  1667  0719                     	;# 
  1668  0891                     	;# 
  1669  0891                     	;# 
  1670  0891                     	;# 
  1671  0891                     	;# 
  1672  0891                     	;# 
  1673  0891                     	;# 
  1674  0892                     	;# 
  1675  0892                     	;# 
  1676  0892                     	;# 
  1677  0893                     	;# 
  1678  0893                     	;# 
  1679  0893                     	;# 
  1680  0893                     	;# 
  1681  0893                     	;# 
  1682  0893                     	;# 
  1683  0894                     	;# 
  1684  0894                     	;# 
  1685  0894                     	;# 
  1686  0895                     	;# 
  1687  0895                     	;# 
  1688  0895                     	;# 
  1689  0896                     	;# 
  1690  0896                     	;# 
  1691  0896                     	;# 
  1692  089B                     	;# 
  1693  0911                     	;# 
  1694  0912                     	;# 
  1695  0913                     	;# 
  1696  0914                     	;# 
  1697  0915                     	;# 
  1698  0916                     	;# 
  1699  0918                     	;# 
  1700  0919                     	;# 
  1701  091A                     	;# 
  1702  091B                     	;# 
  1703  091C                     	;# 
  1704  091D                     	;# 
  1705  091E                     	;# 
  1706  091F                     	;# 
  1707  0E0F                     	;# 
  1708  0E10                     	;# 
  1709  0E11                     	;# 
  1710  0E12                     	;# 
  1711  0E13                     	;# 
  1712  0E14                     	;# 
  1713  0E15                     	;# 
  1714  0E16                     	;# 
  1715  0E17                     	;# 
  1716  0E18                     	;# 
  1717  0E19                     	;# 
  1718  0E1A                     	;# 
  1719  0E1B                     	;# 
  1720  0E1C                     	;# 
  1721  0E1D                     	;# 
  1722  0E1E                     	;# 
  1723  0E1F                     	;# 
  1724  0E20                     	;# 
  1725  0E21                     	;# 
  1726  0E22                     	;# 
  1727  0E24                     	;# 
  1728  0E25                     	;# 
  1729  0E28                     	;# 
  1730  0E29                     	;# 
  1731  0E2A                     	;# 
  1732  0E2B                     	;# 
  1733  0E2C                     	;# 
  1734  0E2D                     	;# 
  1735  0E2E                     	;# 
  1736  0E2F                     	;# 
  1737  0E90                     	;# 
  1738  0E91                     	;# 
  1739  0E92                     	;# 
  1740  0E94                     	;# 
  1741  0E95                     	;# 
  1742  0EA0                     	;# 
  1743  0EA1                     	;# 
  1744  0EA2                     	;# 
  1745  0EA3                     	;# 
  1746  0EA4                     	;# 
  1747  0EA5                     	;# 
  1748  0F0F                     	;# 
  1749  0F10                     	;# 
  1750  0F11                     	;# 
  1751  0F12                     	;# 
  1752  0F13                     	;# 
  1753  0F14                     	;# 
  1754  0F15                     	;# 
  1755  0F16                     	;# 
  1756  0F17                     	;# 
  1757  0F18                     	;# 
  1758  0F19                     	;# 
  1759  0F1A                     	;# 
  1760  0F1B                     	;# 
  1761  0F1C                     	;# 
  1762  0F1D                     	;# 
  1763  0F1E                     	;# 
  1764  0F1F                     	;# 
  1765  0F20                     	;# 
  1766  0F21                     	;# 
  1767  0F22                     	;# 
  1768  0F23                     	;# 
  1769  0F24                     	;# 
  1770  0F25                     	;# 
  1771  0F26                     	;# 
  1772  0F27                     	;# 
  1773  0F28                     	;# 
  1774  0F29                     	;# 
  1775  0F2A                     	;# 
  1776  0F2B                     	;# 
  1777  0F2C                     	;# 
  1778  0F2D                     	;# 
  1779  0F2E                     	;# 
  1780  0F2F                     	;# 
  1781  0F30                     	;# 
  1782  0F31                     	;# 
  1783  0F32                     	;# 
  1784  0F33                     	;# 
  1785  0F34                     	;# 
  1786  0F35                     	;# 
  1787  0F36                     	;# 
  1788  0F37                     	;# 
  1789  0FE4                     	;# 
  1790  0FE5                     	;# 
  1791  0FE6                     	;# 
  1792  0FE7                     	;# 
  1793  0FE8                     	;# 
  1794  0FE9                     	;# 
  1795  0FEA                     	;# 
  1796  0FEB                     	;# 
  1797  0FED                     	;# 
  1798  0FEE                     	;# 
  1799  0FEF                     	;# 
  1800                           
  1801                           	psect	idataBANK1
  1802  1644                     __pidataBANK1:	
  1803                           
  1804                           ;initializer for _romData
  1805  1644  34C1               	retlw	low (_romDataMap| (0+256))
  1806                           
  1807                           	psect	stringtext1
  1808  1000                     __pstringtext1:	
  1809  1000                     _dpowers:	
  1810  1000  3401               	retlw	1
  1811  1001  3400               	retlw	0
  1812  1002  3400               	retlw	0
  1813  1003  3400               	retlw	0
  1814  1004  340A               	retlw	10
  1815  1005  3400               	retlw	0
  1816  1006  3400               	retlw	0
  1817  1007  3400               	retlw	0
  1818  1008  3464               	retlw	100
  1819  1009  3400               	retlw	0
  1820  100A  3400               	retlw	0
  1821  100B  3400               	retlw	0
  1822  100C  34E8               	retlw	232
  1823  100D  3403               	retlw	3
  1824  100E  3400               	retlw	0
  1825  100F  3400               	retlw	0
  1826  1010  3410               	retlw	16
  1827  1011  3427               	retlw	39
  1828  1012  3400               	retlw	0
  1829  1013  3400               	retlw	0
  1830  1014  34A0               	retlw	160
  1831  1015  3486               	retlw	134
  1832  1016  3401               	retlw	1
  1833  1017  3400               	retlw	0
  1834  1018  3440               	retlw	64
  1835  1019  3442               	retlw	66
  1836  101A  340F               	retlw	15
  1837  101B  3400               	retlw	0
  1838  101C  3480               	retlw	128
  1839  101D  3496               	retlw	150
  1840  101E  3498               	retlw	152
  1841  101F  3400               	retlw	0
  1842  1020  3400               	retlw	0
  1843  1021  34E1               	retlw	225
  1844  1022  34F5               	retlw	245
  1845  1023  3405               	retlw	5
  1846  1024  3400               	retlw	0
  1847  1025  34CA               	retlw	202
  1848  1026  349A               	retlw	154
  1849  1027  343B               	retlw	59
  1850  1028                     __end_of_dpowers:	
  1851                           
  1852                           	psect	stringtext2
  1853  1819                     __pstringtext2:	
  1854  1819                     _n_ADDRESS_P0:	
  1855  1819  34AD               	retlw	173
  1856  181A  3487               	retlw	135
  1857  181B  3466               	retlw	102
  1858  181C  34BC               	retlw	188
  1859  181D  34BB               	retlw	187
  1860  181E                     __end_of_n_ADDRESS_P0:	
  1861                           
  1862                           	psect	stringtext3
  1863  1800                     __pstringtext3:	
  1864  1800                     _n_ADDRESS_MUL:	
  1865  1800  3421               	retlw	33
  1866  1801                     __end_of_n_ADDRESS_MUL:	
  1867  000B                     _INTCONbits	set	11
  1868  0003                     _STATUS	set	3
  1869  0010                     _PIR0bits	set	16
  1870  000E                     _PORTCbits	set	14
  1871  000C                     _PORTAbits	set	12
  1872  009E                     _ADCON1bits	set	158
  1873  009C                     _ADRESH	set	156
  1874  009B                     _ADRESL	set	155
  1875  009D                     _ADCON0bits	set	157
  1876  0097                     _WDTCONbits	set	151
  1877  0090                     _PIE0bits	set	144
  1878  008E                     _TRISCbits	set	142
  1879  008C                     _TRISAbits	set	140
  1880  0117                     _FVRCONbits	set	279
  1881  018E                     _ANSELCbits	set	398
  1882  018C                     _ANSELAbits	set	396
  1883  018E                     _ANSELC	set	398
  1884  018C                     _ANSELA	set	396
  1885  020C                     _WPUAbits	set	524
  1886  020E                     _WPUC	set	526
  1887  020C                     _WPUA	set	524
  1888  0211                     _SSP1BUF	set	529
  1889  0214                     _SSP1STATbits	set	532
  1890  0215                     _SSP1CON1bits	set	533
  1891  028C                     _ODCONAbits	set	652
  1892  028E                     _ODCONC	set	654
  1893  028C                     _ODCONA	set	652
  1894  038E                     _INLVLC	set	910
  1895  038C                     _INLVLA	set	908
  1896  0919                     _OSCCON1bits	set	2329
  1897  0EA0                     _RC0PPSbits	set	3744
  1898  0EA2                     _RC2PPSbits	set	3746
  1899  0EA1                     _RC1PPSbits	set	3745
  1900  1801                     STR_10:	
  1901  1801  3425               	retlw	37	;'%'
  1902  1802  346C               	retlw	108	;'l'
  1903  1803  3475               	retlw	117	;'u'
  1904  1804  342E               	retlw	46	;'.'
  1905  1805  3425               	retlw	37	;'%'
  1906  1806  3436               	retlw	54	;'6'
  1907  1807  342E               	retlw	46	;'.'
  1908  1808  3436               	retlw	54	;'6'
  1909  1809  346C               	retlw	108	;'l'
  1910  180A  3475               	retlw	117	;'u'
  1911  180B  3400               	retlw	0
  1912                           
  1913                           	psect	stringtext4
  1914  180C                     __pstringtext4:	
  1915  180C                     STR_6:	
  1916  180C  3441               	retlw	65	;'A'
  1917  180D  344E               	retlw	78	;'N'
  1918  180E  3443               	retlw	67	;'C'
  1919  180F  3433               	retlw	51	;'3'
  1920  1810  346D               	retlw	109	;'m'
  1921  1811  3456               	retlw	86	;'V'
  1922  1812  3400               	retlw	0
  1923                           
  1924                           	psect	stringtext5
  1925  1813                     __pstringtext5:	
  1926  1813                     STR_7:	
  1927  1813  3452               	retlw	82	;'R'
  1928  1814  3446               	retlw	70	;'F'
  1929  1815  3450               	retlw	80	;'P'
  1930  1816  3457               	retlw	87	;'W'
  1931  1817  3452               	retlw	82	;'R'
  1932  1818  3400               	retlw	0
  1933                           
  1934                           	psect	stringtext6
  1935  181E                     __pstringtext6:	
  1936  181E                     STR_4:	
  1937  181E  3454               	retlw	84	;'T'
  1938  181F  3445               	retlw	69	;'E'
  1939  1820  344D               	retlw	77	;'M'
  1940  1821  3450               	retlw	80	;'P'
  1941  1822  3400               	retlw	0
  1942                           
  1943                           	psect	stringtext7
  1944  1823                     __pstringtext7:	
  1945  1823                     STR_5:	
  1946  1823  3456               	retlw	86	;'V'
  1947  1824  3442               	retlw	66	;'B'
  1948  1825  3441               	retlw	65	;'A'
  1949  1826  3454               	retlw	84	;'T'
  1950  1827  3400               	retlw	0
  1951                           
  1952                           	psect	stringtext8
  1953  1828                     __pstringtext8:	
  1954  1828                     STR_9:	
  1955  1828  3442               	retlw	66	;'B'
  1956  1829  344F               	retlw	79	;'O'
  1957  182A  344F               	retlw	79	;'O'
  1958  182B  3454               	retlw	84	;'T'
  1959  182C  3400               	retlw	0
  1960                           
  1961                           	psect	stringtext9
  1962  182D                     __pstringtext9:	
  1963  182D                     STR_8:	
  1964  182D  3455               	retlw	85	;'U'
  1965  182E  3448               	retlw	72	;'H'
  1966  182F  3431               	retlw	49	;'1'
  1967  1830  3400               	retlw	0
  1968                           
  1969                           	psect	stringtext10
  1970  1831                     __pstringtext10:	
  1971  1831                     STR_3:	
  1972  1831  3444               	retlw	68	;'D'
  1973  1832  3442               	retlw	66	;'B'
  1974  1833  3447               	retlw	71	;'G'
  1975  1834  3400               	retlw	0
  1976                           
  1977                           	psect	stringtext11
  1978  1835                     __pstringtext11:	
  1979  1835                     STR_1:	
  1980  1835  342F               	retlw	47	;'/'
  1981  1836  3400               	retlw	0
  1982                           
  1983                           	psect	stringtext12
  1984  0000                     __pstringtext12:	
  1985  1835                     
  1986                           ; #config settings
  1987  0000                     
  1988                           	psect	cinit
  1989  0011                     start_initialization:	
  1990  0011                     __initialization:	
  1991                           
  1992                           ; Initialize objects allocated to BANK1
  1993  0011  0021               	movlb	1	; select bank1
  1994  0012  3196  2644  3180   	fcall	__pidataBANK1	;fetch initializer
  1995  0015  00EB               	movwf	__pdataBANK1& (0+127)
  1996                           
  1997                           ; Clear objects allocated to COMMON
  1998  0016  01FD               	clrf	__pbssCOMMON& (0+127)
  1999                           
  2000                           ; Clear objects allocated to BANK1
  2001  0017  01E8               	clrf	__pbssBANK1& (0+127)
  2002  0018  01E9               	clrf	(__pbssBANK1+1)& (0+127)
  2003  0019  01EA               	clrf	(__pbssBANK1+2)& (0+127)
  2004                           
  2005                           ; Clear objects allocated to BANK2
  2006  001A  3050               	movlw	low __pbssBANK2
  2007  001B  0084               	movwf	4
  2008  001C  3001               	movlw	high __pbssBANK2
  2009  001D  0085               	movwf	5
  2010  001E  3014               	movlw	20
  2011  001F  3196  2651  3180   	fcall	clear_ram0
  2012                           
  2013                           ; Clear objects allocated to BANK3
  2014  0022  30A0               	movlw	low __pbssBANK3
  2015  0023  0084               	movwf	4
  2016  0024  3001               	movlw	high __pbssBANK3
  2017  0025  0085               	movwf	5
  2018  0026  303D               	movlw	61
  2019  0027  3196  2651         	fcall	clear_ram0
  2020  0029                     end_of_initialization:	
  2021                           ;End of C runtime variable initialization code
  2022                           
  2023  0029                     __end_of__initialization:	
  2024  0029  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  2025  002A  0020               	movlb	0
  2026  002B  318F  2F4B         	ljmp	_main	;jump to C main() function
  2027                           
  2028                           	psect	bssCOMMON
  2029  007D                     __pbssCOMMON:	
  2030  007D                     _nrf24l01:	
  2031  007D                     	ds	1
  2032                           
  2033                           	psect	bssBANK1
  2034  00E8                     __pbssBANK1:	
  2035  00E8                     _TXPacket:	
  2036  00E8                     	ds	2
  2037  00EA                     _sleepLoop:	
  2038  00EA                     	ds	1
  2039                           
  2040                           	psect	dataBANK1
  2041  00EB                     __pdataBANK1:	
  2042  00EB                     _romData:	
  2043  00EB                     	ds	1
  2044                           
  2045                           	psect	bssBANK2
  2046  0150                     __pbssBANK2:	
  2047  0150                     _counter:	
  2048  0150                     	ds	3
  2049  0153                     ftoa@buf:	
  2050  0153                     	ds	17
  2051                           
  2052                           	psect	bssBANK3
  2053  01A0                     __pbssBANK3:	
  2054  01A0                     _RXPacket:	
  2055  01A0                     	ds	33
  2056  01C1                     _romDataMap:	
  2057  01C1                     	ds	28
  2058                           
  2059                           	psect	clrtext
  2060  1651                     clear_ram0:	
  2061                           ;	Called with FSR0 containing the base address, and
  2062                           ;	WREG with the size to clear
  2063                           
  2064  1651  0064               	clrwdt	;clear the watchdog before getting into this loop
  2065  1652                     clrloop0:	
  2066  1652  0180               	clrf	0	;clear RAM location pointed to by FSR
  2067  1653  3101               	addfsr 0,1
  2068  1654  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  2069  1655  2E52               	goto	clrloop0	;have we reached the end yet?
  2070  1656  3400               	retlw	0	;all done for this memory range, return
  2071                           
  2072                           	psect	cstackBANK2
  2073  0120                     __pcstackBANK2:	
  2074  0120                     loop@vt:	
  2075                           
  2076                           ; 3 bytes @ 0x0
  2077  0120                     	ds	3
  2078  0123                     loop@ta:	
  2079                           
  2080                           ; 3 bytes @ 0x3
  2081  0123                     	ds	3
  2082  0126                     _loop$2062:	
  2083                           
  2084                           ; 3 bytes @ 0x6
  2085  0126                     	ds	3
  2086  0129                     _loop$2063:	
  2087                           
  2088                           ; 3 bytes @ 0x9
  2089  0129                     	ds	3
  2090  012C                     _loop$882:	
  2091                           
  2092                           ; 2 bytes @ 0xC
  2093  012C                     	ds	2
  2094  012E                     loop@rfSetup:	
  2095                           
  2096                           ; 1 bytes @ 0xE
  2097  012E                     	ds	1
  2098  012F                     loop@packet:	
  2099                           
  2100                           ; 33 bytes @ 0xF
  2101  012F                     	ds	33
  2102                           
  2103                           	psect	cstackBANK1
  2104  00A0                     __pcstackBANK1:	
  2105  00A0                     ___fttol@sign1:	
  2106                           
  2107                           ; 1 bytes @ 0x0
  2108  00A0                     	ds	1
  2109  00A1                     ___fttol@lval:	
  2110                           
  2111                           ; 4 bytes @ 0x1
  2112  00A1                     	ds	4
  2113  00A5                     ___fttol@exp1:	
  2114                           
  2115                           ; 1 bytes @ 0x5
  2116  00A5                     	ds	1
  2117  00A6                     ?_ftoa:	
  2118  00A6                     ftoa@f:	
  2119                           ; 1 bytes @ 0x6
  2120                           
  2121                           
  2122                           ; 3 bytes @ 0x6
  2123  00A6                     	ds	3
  2124  00A9                     ftoa@status:	
  2125                           
  2126                           ; 1 bytes @ 0x9
  2127  00A9                     	ds	1
  2128  00AA                     ftoa@rem:	
  2129                           
  2130                           ; 4 bytes @ 0xA
  2131  00AA                     	ds	4
  2132  00AE                     ftoa@l:	
  2133                           
  2134                           ; 4 bytes @ 0xE
  2135  00AE                     	ds	4
  2136  00B2                     ftoa@cp:	
  2137                           
  2138                           ; 1 bytes @ 0x12
  2139  00B2                     	ds	1
  2140  00B3                     ?_strcat:	
  2141  00B3                     strcat@to:	
  2142                           ; 2 bytes @ 0x13
  2143                           
  2144                           
  2145                           ; 2 bytes @ 0x13
  2146  00B3                     	ds	2
  2147  00B5                     strcat@from:	
  2148                           
  2149                           ; 2 bytes @ 0x15
  2150  00B5                     	ds	2
  2151  00B7                     strcat@cp:	
  2152                           
  2153                           ; 2 bytes @ 0x17
  2154  00B7                     	ds	2
  2155  00B9                     ?_setMessage:	
  2156  00B9                     setMessage@packet:	
  2157                           ; 1 bytes @ 0x19
  2158                           
  2159                           
  2160                           ; 2 bytes @ 0x19
  2161  00B9                     	ds	2
  2162  00BB                     setMessage@topic:	
  2163                           
  2164                           ; 2 bytes @ 0x1B
  2165  00BB                     	ds	2
  2166  00BD                     setMessage@value:	
  2167                           
  2168                           ; 3 bytes @ 0x1D
  2169  00BD                     	ds	3
  2170  00C0                     ??_setMessage:	
  2171                           
  2172                           ; 1 bytes @ 0x20
  2173  00C0                     	ds	1
  2174  00C1                     setMessage@status:	
  2175                           
  2176                           ; 2 bytes @ 0x21
  2177  00C1                     	ds	2
  2178  00C3                     ??_loop:	
  2179                           
  2180                           ; 1 bytes @ 0x23
  2181  00C3                     	ds	1
  2182  00C4                     ??_main:	
  2183                           
  2184                           ; 1 bytes @ 0x24
  2185  00C4                     	ds	1
  2186  00C5                     main@bootStatus:	
  2187                           
  2188                           ; 1 bytes @ 0x25
  2189  00C5                     	ds	1
  2190  00C6                     main@pipe:	
  2191                           
  2192                           ; 1 bytes @ 0x26
  2193  00C6                     	ds	1
  2194  00C7                     main@packet:	
  2195                           
  2196                           ; 33 bytes @ 0x27
  2197  00C7                     	ds	33
  2198                           
  2199                           	psect	cstackCOMMON
  2200  0070                     __pcstackCOMMON:	
  2201  0070                     ?_isdigit:	
  2202  0070                     ?_nrf24l01ISR:	
  2203                           ; 1 bit 
  2204                           
  2205  0070                     ?_nrf24l01GetRXPacket:	
  2206                           ; 1 bytes @ 0x0
  2207                           
  2208  0070                     ?_nrf24l01SendACK:	
  2209                           ; 1 bytes @ 0x0
  2210                           
  2211  0070                     ?_nrf24l01SetRXMode:	
  2212                           ; 1 bytes @ 0x0
  2213                           
  2214  0070                     ?_nrf24l01Init:	
  2215                           ; 1 bytes @ 0x0
  2216                           
  2217  0070                     ?_nrf24l01SetTXPipe:	
  2218                           ; 1 bytes @ 0x0
  2219                           
  2220  0070                     ?_nrf24l01SetRXPipe:	
  2221                           ; 1 bytes @ 0x0
  2222                           
  2223  0070                     ?_nrf24l01CELow:	
  2224                           ; 1 bytes @ 0x0
  2225                           
  2226  0070                     ??_nrf24l01CELow:	
  2227                           ; 1 bytes @ 0x0
  2228                           
  2229  0070                     ?_nrf24l01CEHigh:	
  2230                           ; 1 bytes @ 0x0
  2231                           
  2232  0070                     ??_nrf24l01CEHigh:	
  2233                           ; 1 bytes @ 0x0
  2234                           
  2235  0070                     ?_nrf24l01CSLow:	
  2236                           ; 1 bytes @ 0x0
  2237                           
  2238  0070                     ??_nrf24l01CSLow:	
  2239                           ; 1 bytes @ 0x0
  2240                           
  2241  0070                     ?_nrf24l01CSHigh:	
  2242                           ; 1 bytes @ 0x0
  2243                           
  2244  0070                     ??_nrf24l01CSHigh:	
  2245                           ; 1 bytes @ 0x0
  2246                           
  2247  0070                     ?_nrf24l01InterfaceInit:	
  2248                           ; 1 bytes @ 0x0
  2249                           
  2250  0070                     ?_nrf24l01SPISend:	
  2251                           ; 1 bytes @ 0x0
  2252                           
  2253  0070                     ??_nrf24l01SPISend:	
  2254                           ; 1 bytes @ 0x0
  2255                           
  2256  0070                     ?_nrf24l01SPIStart:	
  2257                           ; 1 bytes @ 0x0
  2258                           
  2259  0070                     ??_nrf24l01SPIStart:	
  2260                           ; 1 bytes @ 0x0
  2261                           
  2262  0070                     ?_nrf24l01SPIEnd:	
  2263                           ; 1 bytes @ 0x0
  2264                           
  2265  0070                     ??_nrf24l01SPIEnd:	
  2266                           ; 1 bytes @ 0x0
  2267                           
  2268  0070                     ?_enableInterrupts:	
  2269                           ; 1 bytes @ 0x0
  2270                           
  2271  0070                     ??_enableInterrupts:	
  2272                           ; 1 bytes @ 0x0
  2273                           
  2274  0070                     ?_exception:	
  2275                           ; 1 bytes @ 0x0
  2276                           
  2277  0070                     ??_exception:	
  2278                           ; 1 bytes @ 0x0
  2279                           
  2280  0070                     ?_ISR:	
  2281                           ; 1 bytes @ 0x0
  2282                           
  2283  0070                     ?_doWDTSleep:	
  2284                           ; 1 bytes @ 0x0
  2285                           
  2286  0070                     ?_handleRXData:	
  2287                           ; 1 bytes @ 0x0
  2288                           
  2289  0070                     ?_checkTXPower:	
  2290                           ; 1 bytes @ 0x0
  2291                           
  2292  0070                     ?_loop:	
  2293                           ; 1 bytes @ 0x0
  2294                           
  2295  0070                     ?_nrf24l01GetPipe:	
  2296                           ; 1 bytes @ 0x0
  2297                           
  2298  0070                     ?_main:	
  2299                           ; 1 bytes @ 0x0
  2300                           
  2301  0070                     ?_nrf24l01CheckACK:	
  2302                           ; 1 bytes @ 0x0
  2303                           
  2304  0070                     ?_nrf24l01ReceivePacket:	
  2305                           ; 1 bytes @ 0x0
  2306                           
  2307  0070                     ?_nrf24l01InitRegisters:	
  2308                           ; 1 bytes @ 0x0
  2309                           
  2310  0070                     ?i1_nrf24l01SetRXMode:	
  2311                           ; 1 bytes @ 0x0
  2312                           
  2313  0070                     ?i1_memset:	
  2314                           ; 1 bytes @ 0x0
  2315                           
  2316  0070                     ?_strcmp:	
  2317                           ; 1 bytes @ 0x0
  2318                           
  2319  0070                     nrf24l01SPISend@data:	
  2320                           ; 2 bytes @ 0x0
  2321                           
  2322  0070                     enableInterrupts@enable:	
  2323                           ; 1 bytes @ 0x0
  2324                           
  2325  0070                     exception@exception:	
  2326                           ; 1 bytes @ 0x0
  2327                           
  2328  0070                     strcmp@s1:	
  2329                           ; 1 bytes @ 0x0
  2330                           
  2331  0070                     i1memset@p1:	
  2332                           ; 2 bytes @ 0x0
  2333                           
  2334                           
  2335                           ; 2 bytes @ 0x0
  2336  0070                     	ds	1
  2337  0071                     ?i1_nrf24l01Send:	
  2338  0071                     i1nrf24l01Send@data:	
  2339                           ; 1 bytes @ 0x1
  2340                           
  2341                           
  2342                           ; 1 bytes @ 0x1
  2343  0071                     	ds	1
  2344  0072                     ??i1_nrf24l01Send:	
  2345  0072                     strcmp@s2:	
  2346                           ; 1 bytes @ 0x2
  2347                           
  2348  0072                     i1memset@c:	
  2349                           ; 1 bytes @ 0x2
  2350                           
  2351                           
  2352                           ; 2 bytes @ 0x2
  2353  0072                     	ds	1
  2354  0073                     ??_strcmp:	
  2355  0073                     i1nrf24l01Send@command:	
  2356                           ; 1 bytes @ 0x3
  2357                           
  2358                           
  2359                           ; 1 bytes @ 0x3
  2360  0073                     	ds	1
  2361  0074                     ??i1_nrf24l01SetRXMode:	
  2362  0074                     strcmp@r:	
  2363                           ; 1 bytes @ 0x4
  2364                           
  2365  0074                     i1memset@n:	
  2366                           ; 1 bytes @ 0x4
  2367                           
  2368                           
  2369                           ; 2 bytes @ 0x4
  2370  0074                     	ds	1
  2371  0075                     i1nrf24l01SetRXMode@config:	
  2372                           
  2373                           ; 1 bytes @ 0x5
  2374  0075                     	ds	1
  2375  0076                     ??i1_memset:	
  2376  0076                     i1nrf24l01SetRXMode@rxMode:	
  2377                           ; 1 bytes @ 0x6
  2378                           
  2379  0076                     i1memset@p:	
  2380                           ; 1 bytes @ 0x6
  2381                           
  2382                           
  2383                           ; 2 bytes @ 0x6
  2384  0076                     	ds	1
  2385  0077                     ??_nrf24l01CheckACK:	
  2386                           
  2387                           ; 1 bytes @ 0x7
  2388  0077                     	ds	1
  2389  0078                     ??_nrf24l01ReceivePacket:	
  2390                           
  2391                           ; 1 bytes @ 0x8
  2392  0078                     	ds	1
  2393  0079                     nrf24l01ReceivePacket@width:	
  2394                           
  2395                           ; 1 bytes @ 0x9
  2396  0079                     	ds	1
  2397  007A                     nrf24l01ReceivePacket@i:	
  2398                           
  2399                           ; 1 bytes @ 0xA
  2400  007A                     	ds	1
  2401  007B                     ??_nrf24l01ISR:	
  2402                           
  2403                           ; 1 bytes @ 0xB
  2404  007B                     	ds	1
  2405  007C                     nrf24l01ISR@status:	
  2406                           
  2407                           ; 1 bytes @ 0xC
  2408  007C                     	ds	1
  2409  007D                     ??_ISR:	
  2410                           
  2411                           	psect	cstackBANK0
  2412  0020                     __pcstackBANK0:	
  2413                           ; 1 bytes @ 0xD
  2414                           
  2415  0020                     ?___ftge:	
  2416  0020                     ??_nrf24l01GetRXPacket:	
  2417                           ; 1 bit 
  2418                           
  2419  0020                     ?_nrf24l01Send:	
  2420                           ; 1 bytes @ 0x0
  2421                           
  2422  0020                     ?_strcpy:	
  2423                           ; 1 bytes @ 0x0
  2424                           
  2425  0020                     ??_isdigit:	
  2426                           ; 1 bytes @ 0x0
  2427                           
  2428  0020                     ??_nrf24l01InterfaceInit:	
  2429                           ; 1 bytes @ 0x0
  2430                           
  2431  0020                     ??_doWDTSleep:	
  2432                           ; 1 bytes @ 0x0
  2433                           
  2434  0020                     ?___bmul:	
  2435                           ; 1 bytes @ 0x0
  2436                           
  2437  0020                     ?_memset:	
  2438                           ; 1 bytes @ 0x0
  2439                           
  2440  0020                     ?_strlen:	
  2441                           ; 2 bytes @ 0x0
  2442                           
  2443  0020                     ?___wmul:	
  2444                           ; 2 bytes @ 0x0
  2445                           
  2446  0020                     ?___lwdiv:	
  2447                           ; 2 bytes @ 0x0
  2448                           
  2449  0020                     ?___lwmod:	
  2450                           ; 2 bytes @ 0x0
  2451                           
  2452  0020                     ?___ftpack:	
  2453                           ; 2 bytes @ 0x0
  2454                           
  2455  0020                     ?___lldiv:	
  2456                           ; 3 bytes @ 0x0
  2457                           
  2458  0020                     nrf24l01Send@data:	
  2459                           ; 4 bytes @ 0x0
  2460                           
  2461  0020                     ___bmul@multiplicand:	
  2462                           ; 1 bytes @ 0x0
  2463                           
  2464  0020                     _isdigit$1811:	
  2465                           ; 1 bytes @ 0x0
  2466                           
  2467  0020                     ___wmul@multiplier:	
  2468                           ; 1 bytes @ 0x0
  2469                           
  2470  0020                     ___lwdiv@divisor:	
  2471                           ; 2 bytes @ 0x0
  2472                           
  2473  0020                     ___lwmod@divisor:	
  2474                           ; 2 bytes @ 0x0
  2475                           
  2476  0020                     memset@p1:	
  2477                           ; 2 bytes @ 0x0
  2478                           
  2479  0020                     strcpy@from:	
  2480                           ; 2 bytes @ 0x0
  2481                           
  2482  0020                     strlen@s:	
  2483                           ; 2 bytes @ 0x0
  2484                           
  2485  0020                     ___ftpack@arg:	
  2486                           ; 2 bytes @ 0x0
  2487                           
  2488  0020                     ___ftge@ff1:	
  2489                           ; 3 bytes @ 0x0
  2490                           
  2491  0020                     ___lldiv@divisor:	
  2492                           ; 3 bytes @ 0x0
  2493                           
  2494                           
  2495                           ; 4 bytes @ 0x0
  2496  0020                     	ds	1
  2497  0021                     ??_nrf24l01Send:	
  2498  0021                     ??___bmul:	
  2499                           ; 1 bytes @ 0x1
  2500                           
  2501  0021                     doWDTSleep@wdtps:	
  2502                           ; 1 bytes @ 0x1
  2503                           
  2504  0021                     isdigit@c:	
  2505                           ; 1 bytes @ 0x1
  2506                           
  2507                           
  2508                           ; 1 bytes @ 0x1
  2509  0021                     	ds	1
  2510  0022                     ??_strlen:	
  2511  0022                     ??_strcpy:	
  2512                           ; 1 bytes @ 0x2
  2513                           
  2514  0022                     nrf24l01Send@command:	
  2515                           ; 1 bytes @ 0x2
  2516                           
  2517  0022                     ___bmul@product:	
  2518                           ; 1 bytes @ 0x2
  2519                           
  2520  0022                     ___wmul@multiplicand:	
  2521                           ; 1 bytes @ 0x2
  2522                           
  2523  0022                     ___lwdiv@dividend:	
  2524                           ; 2 bytes @ 0x2
  2525                           
  2526  0022                     ___lwmod@dividend:	
  2527                           ; 2 bytes @ 0x2
  2528                           
  2529  0022                     memset@c:	
  2530                           ; 2 bytes @ 0x2
  2531                           
  2532                           
  2533                           ; 2 bytes @ 0x2
  2534  0022                     	ds	1
  2535  0023                     ??_nrf24l01SetRXMode:	
  2536  0023                     ?_nrf24l01ChangeTXPower:	
  2537                           ; 1 bytes @ 0x3
  2538                           
  2539  0023                     ??_nrf24l01SetRXPipe:	
  2540                           ; 1 bytes @ 0x3
  2541                           
  2542  0023                     ___bmul@multiplier:	
  2543                           ; 1 bytes @ 0x3
  2544                           
  2545  0023                     ___ftpack@exp:	
  2546                           ; 1 bytes @ 0x3
  2547                           
  2548  0023                     strcpy@to:	
  2549                           ; 1 bytes @ 0x3
  2550                           
  2551  0023                     nrf24l01ChangeTXPower@addPower:	
  2552                           ; 1 bytes @ 0x3
  2553                           
  2554  0023                     ___ftge@ff2:	
  2555                           ; 2 bytes @ 0x3
  2556                           
  2557                           
  2558                           ; 3 bytes @ 0x3
  2559  0023                     	ds	1
  2560  0024                     ??_nrf24l01SetTXPipe:	
  2561  0024                     ??___wmul:	
  2562                           ; 1 bytes @ 0x4
  2563                           
  2564  0024                     ??___lwdiv:	
  2565                           ; 1 bytes @ 0x4
  2566                           
  2567  0024                     ??___lwmod:	
  2568                           ; 1 bytes @ 0x4
  2569                           
  2570  0024                     nrf24l01SetRXMode@config:	
  2571                           ; 1 bytes @ 0x4
  2572                           
  2573  0024                     ___ftpack@sign:	
  2574                           ; 1 bytes @ 0x4
  2575                           
  2576  0024                     strcpy@cp:	
  2577                           ; 1 bytes @ 0x4
  2578                           
  2579  0024                     ___wmul@product:	
  2580                           ; 1 bytes @ 0x4
  2581                           
  2582  0024                     memset@n:	
  2583                           ; 2 bytes @ 0x4
  2584                           
  2585  0024                     strlen@cp:	
  2586                           ; 2 bytes @ 0x4
  2587                           
  2588  0024                     ___lldiv@dividend:	
  2589                           ; 2 bytes @ 0x4
  2590                           
  2591                           
  2592                           ; 4 bytes @ 0x4
  2593  0024                     	ds	1
  2594  0025                     ??_nrf24l01ChangeTXPower:	
  2595  0025                     ??___ftpack:	
  2596                           ; 1 bytes @ 0x5
  2597                           
  2598  0025                     nrf24l01SetRXMode@rxMode:	
  2599                           ; 1 bytes @ 0x5
  2600                           
  2601  0025                     nrf24l01SetRXPipe@pipe:	
  2602                           ; 1 bytes @ 0x5
  2603                           
  2604  0025                     ___lwmod@counter:	
  2605                           ; 1 bytes @ 0x5
  2606                           
  2607  0025                     ___lwdiv@quotient:	
  2608                           ; 1 bytes @ 0x5
  2609                           
  2610                           
  2611                           ; 2 bytes @ 0x5
  2612  0025                     	ds	1
  2613  0026                     ??_memset:	
  2614  0026                     ??_nrf24l01GetPipe:	
  2615                           ; 1 bytes @ 0x6
  2616                           
  2617  0026                     ??___ftge:	
  2618                           ; 1 bytes @ 0x6
  2619                           
  2620  0026                     nrf24l01ChangeTXPower@rfSetup:	
  2621                           ; 1 bytes @ 0x6
  2622                           
  2623  0026                     nrf24l01SetTXPipe@pipe:	
  2624                           ; 1 bytes @ 0x6
  2625                           
  2626  0026                     nrf24l01SetRXPipe@enRXAddr:	
  2627                           ; 1 bytes @ 0x6
  2628                           
  2629  0026                     memset@p:	
  2630                           ; 1 bytes @ 0x6
  2631                           
  2632                           
  2633                           ; 2 bytes @ 0x6
  2634  0026                     	ds	1
  2635  0027                     ?_nrf24l01SendPacket:	
  2636  0027                     ??_checkTXPower:	
  2637                           ; 1 bytes @ 0x7
  2638                           
  2639  0027                     ??_nrf24l01InitRegisters:	
  2640                           ; 1 bytes @ 0x7
  2641                           
  2642  0027                     ___lwdiv@counter:	
  2643                           ; 1 bytes @ 0x7
  2644                           
  2645  0027                     nrf24l01SendPacket@Packet:	
  2646                           ; 1 bytes @ 0x7
  2647                           
  2648                           
  2649                           ; 2 bytes @ 0x7
  2650  0027                     	ds	1
  2651  0028                     ??___lldiv:	
  2652  0028                     ?___awtoft:	
  2653                           ; 1 bytes @ 0x8
  2654                           
  2655  0028                     ?___lbtoft:	
  2656                           ; 3 bytes @ 0x8
  2657                           
  2658  0028                     ?___lltoft:	
  2659                           ; 3 bytes @ 0x8
  2660                           
  2661  0028                     checkTXPower@rxPacket:	
  2662                           ; 3 bytes @ 0x8
  2663                           
  2664  0028                     nrf24l01GetPipe@pipe:	
  2665                           ; 1 bytes @ 0x8
  2666                           
  2667  0028                     ___awtoft@c:	
  2668                           ; 1 bytes @ 0x8
  2669                           
  2670  0028                     ___lltoft@c:	
  2671                           ; 2 bytes @ 0x8
  2672                           
  2673                           
  2674                           ; 4 bytes @ 0x8
  2675  0028                     	ds	1
  2676  0029                     ??_nrf24l01SendPacket:	
  2677  0029                     nrf24l01GetPipe@name:	
  2678                           ; 1 bytes @ 0x9
  2679                           
  2680  0029                     nrf24l01InitRegisters@channel:	
  2681                           ; 1 bytes @ 0x9
  2682                           
  2683  0029                     ___lldiv@quotient:	
  2684                           ; 1 bytes @ 0x9
  2685                           
  2686                           
  2687                           ; 4 bytes @ 0x9
  2688  0029                     	ds	1
  2689  002A                     nrf24l01GetPipe@i:	
  2690  002A                     nrf24l01InitRegisters@setupAW:	
  2691                           ; 1 bytes @ 0xA
  2692                           
  2693                           
  2694                           ; 1 bytes @ 0xA
  2695  002A                     	ds	1
  2696  002B                     ??___awtoft:	
  2697  002B                     ??___lbtoft:	
  2698                           ; 1 bytes @ 0xB
  2699                           
  2700  002B                     nrf24l01InitRegisters@feature:	
  2701                           ; 1 bytes @ 0xB
  2702                           
  2703                           
  2704                           ; 1 bytes @ 0xB
  2705  002B                     	ds	1
  2706  002C                     ??___lltoft:	
  2707  002C                     nrf24l01InitRegisters@rfSetup:	
  2708                           ; 1 bytes @ 0xC
  2709                           
  2710                           
  2711                           ; 1 bytes @ 0xC
  2712  002C                     	ds	1
  2713  002D                     nrf24l01SendPacket@i:	
  2714  002D                     nrf24l01InitRegisters@status:	
  2715                           ; 1 bytes @ 0xD
  2716                           
  2717  002D                     ___lldiv@counter:	
  2718                           ; 1 bytes @ 0xD
  2719                           
  2720  002D                     ___awtoft@sign:	
  2721                           ; 1 bytes @ 0xD
  2722                           
  2723  002D                     ___lltoft@exp:	
  2724                           ; 1 bytes @ 0xD
  2725                           
  2726                           
  2727                           ; 1 bytes @ 0xD
  2728  002D                     	ds	1
  2729  002E                     ??_nrf24l01SendACK:	
  2730  002E                     ?___ftadd:	
  2731                           ; 1 bytes @ 0xE
  2732                           
  2733  002E                     ?___llmod:	
  2734                           ; 3 bytes @ 0xE
  2735                           
  2736  002E                     nrf24l01InitRegisters@enAA:	
  2737                           ; 4 bytes @ 0xE
  2738                           
  2739  002E                     ___ftadd@f1:	
  2740                           ; 1 bytes @ 0xE
  2741                           
  2742  002E                     ___llmod@divisor:	
  2743                           ; 3 bytes @ 0xE
  2744                           
  2745                           
  2746                           ; 4 bytes @ 0xE
  2747  002E                     	ds	1
  2748  002F                     nrf24l01SendACK@packet:	
  2749  002F                     nrf24l01InitRegisters@DynPD:	
  2750                           ; 1 bytes @ 0xF
  2751                           
  2752  002F                     ___lbtoft@c:	
  2753                           ; 1 bytes @ 0xF
  2754                           
  2755                           
  2756                           ; 1 bytes @ 0xF
  2757  002F                     	ds	1
  2758  0030                     ??_handleRXData:	
  2759  0030                     nrf24l01InitRegisters@config:	
  2760                           ; 1 bytes @ 0x10
  2761                           
  2762                           
  2763                           ; 1 bytes @ 0x10
  2764  0030                     	ds	1
  2765  0031                     handleRXData@RXPacket:	
  2766  0031                     nrf24l01InitRegisters@i:	
  2767                           ; 1 bytes @ 0x11
  2768                           
  2769  0031                     ___ftadd@f2:	
  2770                           ; 2 bytes @ 0x11
  2771                           
  2772                           
  2773                           ; 3 bytes @ 0x11
  2774  0031                     	ds	1
  2775  0032                     ?_sleep:	
  2776  0032                     sleep@milliseconds:	
  2777                           ; 1 bytes @ 0x12
  2778                           
  2779  0032                     ___llmod@dividend:	
  2780                           ; 2 bytes @ 0x12
  2781                           
  2782                           
  2783                           ; 4 bytes @ 0x12
  2784  0032                     	ds	1
  2785  0033                     ??_nrf24l01Init:	
  2786                           
  2787                           ; 1 bytes @ 0x13
  2788  0033                     	ds	1
  2789  0034                     ??_sleep:	
  2790  0034                     ??___ftadd:	
  2791                           ; 1 bytes @ 0x14
  2792                           
  2793                           
  2794                           ; 1 bytes @ 0x14
  2795  0034                     	ds	2
  2796  0036                     ??___llmod:	
  2797                           
  2798                           ; 1 bytes @ 0x16
  2799  0036                     	ds	1
  2800  0037                     ___llmod@counter:	
  2801                           
  2802                           ; 1 bytes @ 0x17
  2803  0037                     	ds	1
  2804  0038                     ?_sprintf:	
  2805  0038                     ___ftadd@sign:	
  2806                           ; 2 bytes @ 0x18
  2807                           
  2808  0038                     sprintf@f:	
  2809                           ; 1 bytes @ 0x18
  2810                           
  2811                           
  2812                           ; 2 bytes @ 0x18
  2813  0038                     	ds	1
  2814  0039                     ___ftadd@exp2:	
  2815                           
  2816                           ; 1 bytes @ 0x19
  2817  0039                     	ds	1
  2818  003A                     ___ftadd@exp1:	
  2819                           
  2820                           ; 1 bytes @ 0x1A
  2821  003A                     	ds	1
  2822  003B                     ?___ftdiv:	
  2823  003B                     ?___ftsub:	
  2824                           ; 3 bytes @ 0x1B
  2825                           
  2826  003B                     ___ftdiv@f2:	
  2827                           ; 3 bytes @ 0x1B
  2828                           
  2829  003B                     ___ftsub@f2:	
  2830                           ; 3 bytes @ 0x1B
  2831                           
  2832                           
  2833                           ; 3 bytes @ 0x1B
  2834  003B                     	ds	3
  2835  003E                     ___ftdiv@f1:	
  2836  003E                     ___ftsub@f1:	
  2837                           ; 3 bytes @ 0x1E
  2838                           
  2839                           
  2840                           ; 3 bytes @ 0x1E
  2841  003E                     	ds	3
  2842  0041                     ??___ftdiv:	
  2843  0041                     ??___ftsub:	
  2844                           ; 1 bytes @ 0x21
  2845                           
  2846                           
  2847                           ; 1 bytes @ 0x21
  2848  0041                     	ds	1
  2849  0042                     ??_sprintf:	
  2850                           
  2851                           ; 1 bytes @ 0x22
  2852  0042                     	ds	3
  2853  0045                     ___ftdiv@cntr:	
  2854                           
  2855                           ; 1 bytes @ 0x25
  2856  0045                     	ds	1
  2857  0046                     ___ftdiv@f3:	
  2858                           
  2859                           ; 3 bytes @ 0x26
  2860  0046                     	ds	2
  2861  0048                     sprintf@flag:	
  2862                           
  2863                           ; 1 bytes @ 0x28
  2864  0048                     	ds	1
  2865  0049                     sprintf@ap:	
  2866  0049                     ___ftdiv@exp:	
  2867                           ; 1 bytes @ 0x29
  2868                           
  2869                           
  2870                           ; 1 bytes @ 0x29
  2871  0049                     	ds	1
  2872  004A                     ___ftdiv@sign:	
  2873  004A                     sprintf@val:	
  2874                           ; 1 bytes @ 0x2A
  2875                           
  2876                           
  2877                           ; 4 bytes @ 0x2A
  2878  004A                     	ds	1
  2879  004B                     ?_getADCValue:	
  2880                           
  2881                           ; 3 bytes @ 0x2B
  2882  004B                     	ds	3
  2883  004E                     ??_getADCValue:	
  2884  004E                     sprintf@sp:	
  2885                           ; 1 bytes @ 0x2E
  2886                           
  2887                           
  2888                           ; 1 bytes @ 0x2E
  2889  004E                     	ds	1
  2890  004F                     sprintf@width:	
  2891                           
  2892                           ; 2 bytes @ 0x2F
  2893  004F                     	ds	2
  2894  0051                     getADCValue@adcLoop:	
  2895  0051                     sprintf@prec:	
  2896                           ; 2 bytes @ 0x31
  2897                           
  2898                           
  2899                           ; 2 bytes @ 0x31
  2900  0051                     	ds	2
  2901  0053                     getADCValue@channel:	
  2902  0053                     sprintf@c:	
  2903                           ; 1 bytes @ 0x33
  2904                           
  2905                           
  2906                           ; 1 bytes @ 0x33
  2907  0053                     	ds	1
  2908  0054                     getADCValue@adcSum:	
  2909                           
  2910                           ; 3 bytes @ 0x34
  2911  0054                     	ds	3
  2912  0057                     ?___ftmul:	
  2913  0057                     ?___ftneg:	
  2914                           ; 3 bytes @ 0x37
  2915                           
  2916  0057                     ___ftmul@f1:	
  2917                           ; 3 bytes @ 0x37
  2918                           
  2919  0057                     ___ftneg@f1:	
  2920                           ; 3 bytes @ 0x37
  2921                           
  2922                           
  2923                           ; 3 bytes @ 0x37
  2924  0057                     	ds	3
  2925  005A                     ??___ftneg:	
  2926  005A                     ___ftmul@f2:	
  2927                           ; 1 bytes @ 0x3A
  2928                           
  2929                           
  2930                           ; 3 bytes @ 0x3A
  2931  005A                     	ds	3
  2932  005D                     ??___ftmul:	
  2933                           
  2934                           ; 1 bytes @ 0x3D
  2935  005D                     	ds	4
  2936  0061                     ___ftmul@exp:	
  2937                           
  2938                           ; 1 bytes @ 0x41
  2939  0061                     	ds	1
  2940  0062                     ___ftmul@f3_as_product:	
  2941                           
  2942                           ; 3 bytes @ 0x42
  2943  0062                     	ds	3
  2944  0065                     ___ftmul@cntr:	
  2945                           
  2946                           ; 1 bytes @ 0x45
  2947  0065                     	ds	1
  2948  0066                     ___ftmul@sign:	
  2949                           
  2950                           ; 1 bytes @ 0x46
  2951  0066                     	ds	1
  2952  0067                     ?___fttol:	
  2953  0067                     ___fttol@f1:	
  2954                           ; 4 bytes @ 0x47
  2955                           
  2956                           
  2957                           ; 3 bytes @ 0x47
  2958  0067                     	ds	4
  2959  006B                     ??___fttol:	
  2960                           
  2961                           ; 1 bytes @ 0x4B
  2962  006B                     	ds	4
  2963  006F                     ??_ftoa:	
  2964                           
  2965                           ; 1 bytes @ 0x4F
  2966  006F                     	ds	1
  2967  0070                     ??_strcat:	
  2968                           
  2969                           	psect	maintext
  2970  0F4B                     __pmaintext:	
  2971                           ; 1 bytes @ 0x50
  2972 ;;
  2973 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  2974 ;;
  2975 ;; *************** function _main *****************
  2976 ;; Defined at:
  2977 ;;		line 275 in file "main.c"
  2978 ;; Parameters:    Size  Location     Type
  2979 ;;		None
  2980 ;; Auto vars:     Size  Location     Type
  2981 ;;  packet         33   39[BANK1 ] struct .
  2982 ;;  pipe            1   38[BANK1 ] unsigned char 
  2983 ;;  bootStatus      1   37[BANK1 ] unsigned char 
  2984 ;; Return value:  Size  Location     Type
  2985 ;;                  1    wreg      void 
  2986 ;; Registers used:
  2987 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2988 ;; Tracked objects:
  2989 ;;		On entry : B1F/0
  2990 ;;		On exit  : 0/0
  2991 ;;		Unchanged: 0/0
  2992 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2993 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2994 ;;      Locals:         0       0      35       0       0       0       0       0       0       0       0       0       
      +0       0
  2995 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  2996 ;;      Totals:         0       0      36       0       0       0       0       0       0       0       0       0       
      +0       0
  2997 ;;Total ram usage:       36 bytes
  2998 ;; Hardware stack levels required when called:   16
  2999 ;; This function calls:
  3000 ;;		___lbtoft
  3001 ;;		_loop
  3002 ;;		_nrf24l01GetPipe
  3003 ;;		_nrf24l01Init
  3004 ;;		_nrf24l01SendPacket
  3005 ;;		_nrf24l01SetRXPipe
  3006 ;;		_nrf24l01SetTXPipe
  3007 ;;		_setMessage
  3008 ;;		_sleep
  3009 ;;		_strcpy
  3010 ;; This function is called by:
  3011 ;;		Startup code after reset
  3012 ;; This function uses a non-reentrant model
  3013 ;;
  3014                           
  3015                           
  3016                           ;psect for function _main
  3017  0F4B                     _main:	
  3018                           
  3019                           ;main.c: 277: unsigned char bootStatus = STATUS;
  3020                           
  3021                           ;incstack = 0
  3022                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3023  0F4B  0020               	movlb	0	; select bank0
  3024  0F4C  0803               	movf	3,w	;volatile
  3025  0F4D  0021               	movlb	1	; select bank1
  3026  0F4E  00C4               	movwf	??_main^(0+128)
  3027  0F4F  0844               	movf	??_main^(0+128),w
  3028  0F50  00C5               	movwf	main@bootStatus^(0+128)
  3029                           
  3030                           ;main.c: 280: ANSELA = 0x00;
  3031  0F51  0023               	movlb	3	; select bank3
  3032  0F52  018C               	clrf	12	;volatile
  3033                           
  3034                           ;main.c: 281: ANSELC = 0x00;
  3035  0F53  018E               	clrf	14	;volatile
  3036                           
  3037                           ;main.c: 283: ODCONA = 0x00;
  3038  0F54  0025               	movlb	5	; select bank5
  3039  0F55  018C               	clrf	12	;volatile
  3040                           
  3041                           ;main.c: 284: ODCONC = 0x00;
  3042  0F56  018E               	clrf	14	;volatile
  3043                           
  3044                           ;main.c: 289: INLVLA = 0x00;
  3045  0F57  0027               	movlb	7	; select bank7
  3046  0F58  018C               	clrf	12	;volatile
  3047                           
  3048                           ;main.c: 290: INLVLC = 0x00;
  3049  0F59  018E               	clrf	14	;volatile
  3050                           
  3051                           ;main.c: 292: WPUA = 0x00;
  3052  0F5A  0024               	movlb	4	; select bank4
  3053  0F5B  018C               	clrf	12	;volatile
  3054                           
  3055                           ;main.c: 293: WPUC = 0x00;
  3056  0F5C  018E               	clrf	14	;volatile
  3057                           
  3058                           ;main.c: 295: TRISCbits.TRISC5 = 0;
  3059  0F5D  0021               	movlb	1	; select bank1
  3060  0F5E  128E               	bcf	14,5	;volatile
  3061                           
  3062                           ;main.c: 296: TRISCbits.TRISC4 = 0;
  3063  0F5F  120E               	bcf	14,4	;volatile
  3064                           
  3065                           ;main.c: 298: PORTCbits.RC4 = 0;
  3066  0F60  0020               	movlb	0	; select bank0
  3067  0F61  120E               	bcf	14,4	;volatile
  3068                           
  3069                           ;main.c: 305: INTCONbits.PEIE = 0;
  3070  0F62  130B               	bcf	11,6	;volatile
  3071                           
  3072                           ;main.c: 306: INTCONbits.GIE = 0;
  3073  0F63  138B               	bcf	11,7	;volatile
  3074                           
  3075                           ;main.c: 308: OSCCON1bits.NOSC = 0b000;
  3076  0F64  308F               	movlw	-113
  3077  0F65  0032               	movlb	18	; select bank18
  3078  0F66  0599               	andwf	25,f	;volatile
  3079                           
  3080                           ;main.c: 309: OSCCON1bits.NDIV = 0b000;
  3081  0F67  30F0               	movlw	-16
  3082  0F68  0599               	andwf	25,f	;volatile
  3083                           
  3084                           ;main.c: 311: _delay((unsigned long)((10)*(32000000/4000.0)));
  3085  0F69  3068               	movlw	104
  3086  0F6A  0021               	movlb	1	; select bank1
  3087  0F6B  00C4               	movwf	??_main^(0+128)
  3088  0F6C  30E4               	movlw	228
  3089  0F6D                     u3537:	
  3090  0F6D  0B89               	decfsz	9,f
  3091  0F6E  2F6D               	goto	u3537
  3092  0F6F  0BC4               	decfsz	??_main^(0+128),f
  3093  0F70  2F6D               	goto	u3537
  3094  0F71  0000               	nop
  3095                           
  3096                           ;main.c: 315: strcpy(romData->name, "UH1");
  3097  0F72  302D               	movlw	low (STR_8| (0+32768))
  3098  0F73  0020               	movlb	0	; select bank0
  3099  0F74  00A0               	movwf	strcpy@from
  3100  0F75  3098               	movlw	high (STR_8| (0+32768))
  3101  0F76  00A1               	movwf	strcpy@from+1
  3102  0F77  0021               	movlb	1	; select bank1
  3103  0F78  086B               	movf	_romData^(0+128),w
  3104  0F79  3E01               	addlw	1
  3105  0F7A  3197  2766  318F   	fcall	_strcpy
  3106                           
  3107                           ;main.c: 317: nrf24l01Init();
  3108  0F7D  3188  203D  318F   	fcall	_nrf24l01Init
  3109                           
  3110                           ;main.c: 319: unsigned char pipe = nrf24l01GetPipe(romData->name);
  3111  0F80  0021               	movlb	1	; select bank1
  3112  0F81  086B               	movf	_romData^(0+128),w
  3113  0F82  3E01               	addlw	1
  3114  0F83  3189  216F  318F   	fcall	_nrf24l01GetPipe
  3115  0F86  0021               	movlb	1	; select bank1
  3116  0F87  00C4               	movwf	??_main^(0+128)
  3117  0F88  0844               	movf	??_main^(0+128),w
  3118  0F89  00C6               	movwf	main@pipe^(0+128)
  3119                           
  3120                           ;main.c: 320: nrf24l01SetTXPipe(pipe);
  3121  0F8A  0846               	movf	main@pipe^(0+128),w
  3122  0F8B  318B  2360  318F   	fcall	_nrf24l01SetTXPipe
  3123                           
  3124                           ;main.c: 321: nrf24l01SetRXPipe(pipe);
  3125  0F8E  0021               	movlb	1	; select bank1
  3126  0F8F  0846               	movf	main@pipe^(0+128),w
  3127  0F90  3197  27DF  318F   	fcall	_nrf24l01SetRXPipe
  3128                           
  3129                           ;main.c: 323: counter = pipe;
  3130  0F93  0021               	movlb	1	; select bank1
  3131  0F94  0846               	movf	main@pipe^(0+128),w
  3132  0F95  3188  2000  318F   	fcall	___lbtoft
  3133  0F98  0020               	movlb	0	; select bank0
  3134  0F99  0828               	movf	?___lbtoft,w
  3135  0F9A  0022               	movlb	2	; select bank2
  3136  0F9B  00D0               	movwf	_counter^(0+256)
  3137  0F9C  0020               	movlb	0	; select bank0
  3138  0F9D  0829               	movf	?___lbtoft+1,w
  3139  0F9E  0022               	movlb	2	; select bank2
  3140  0F9F  00D1               	movwf	(_counter+1)^(0+256)
  3141  0FA0  0020               	movlb	0	; select bank0
  3142  0FA1  082A               	movf	?___lbtoft+2,w
  3143  0FA2  0022               	movlb	2	; select bank2
  3144  0FA3  00D2               	movwf	(_counter+2)^(0+256)
  3145                           
  3146                           ;main.c: 326: ADCON0bits.ADON = 0;
  3147  0FA4  0021               	movlb	1	; select bank1
  3148  0FA5  101D               	bcf	29,0	;volatile
  3149                           
  3150                           ;main.c: 329: PORTAbits.RA4 = 0;
  3151  0FA6  0020               	movlb	0	; select bank0
  3152  0FA7  120C               	bcf	12,4	;volatile
  3153                           
  3154                           ;main.c: 330: TRISAbits.TRISA4 = 1;
  3155  0FA8  0021               	movlb	1	; select bank1
  3156  0FA9  160C               	bsf	12,4	;volatile
  3157                           
  3158                           ;main.c: 331: WPUAbits.WPUA4 = 0;
  3159  0FAA  0024               	movlb	4	; select bank4
  3160  0FAB  120C               	bcf	12,4	;volatile
  3161                           
  3162                           ;main.c: 332: ODCONAbits.ODCA4 = 1;
  3163  0FAC  0025               	movlb	5	; select bank5
  3164  0FAD  160C               	bsf	12,4	;volatile
  3165                           
  3166                           ;main.c: 333: ANSELAbits.ANSA4 = 1;
  3167  0FAE  0023               	movlb	3	; select bank3
  3168  0FAF  160C               	bsf	12,4	;volatile
  3169                           
  3170                           ;main.c: 336: ANSELCbits.ANSC3 = 1;
  3171  0FB0  158E               	bsf	14,3	;volatile
  3172                           
  3173                           ;main.c: 337: TRISCbits.TRISC3 = 1;
  3174  0FB1  0021               	movlb	1	; select bank1
  3175  0FB2  158E               	bsf	14,3	;volatile
  3176                           
  3177                           ;main.c: 340: FVRCONbits.TSEN = 0;
  3178  0FB3  0022               	movlb	2	; select bank2
  3179  0FB4  1297               	bcf	23,5	;volatile
  3180                           
  3181                           ;main.c: 341: FVRCONbits.TSRNG = 1;
  3182  0FB5  1617               	bsf	23,4	;volatile
  3183                           
  3184                           ;main.c: 344: FVRCONbits.FVREN = 0;
  3185  0FB6  1397               	bcf	23,7	;volatile
  3186                           
  3187                           ;main.c: 345: FVRCONbits.ADFVR = 0b10;
  3188  0FB7  0817               	movf	23,w	;volatile
  3189  0FB8  39FC               	andlw	-4
  3190  0FB9  3802               	iorlw	2
  3191  0FBA  0097               	movwf	23	;volatile
  3192                           
  3193                           ;main.c: 347: ADCON1bits.ADCS = 0b111;
  3194  0FBB  3070               	movlw	112
  3195  0FBC  0021               	movlb	1	; select bank1
  3196  0FBD  049E               	iorwf	30,f	;volatile
  3197                           
  3198                           ;main.c: 348: ADCON1bits.ADFM = 1;
  3199  0FBE  179E               	bsf	30,7	;volatile
  3200                           
  3201                           ;main.c: 349: ADCON1bits.ADPREF = 0b11;
  3202  0FBF  3003               	movlw	3
  3203  0FC0  049E               	iorwf	30,f	;volatile
  3204                           
  3205                           ;main.c: 350: ADCON1bits.ADNREF = 0b00;
  3206  0FC1  111E               	bcf	30,2	;volatile
  3207                           
  3208                           ;main.c: 353: ADCON0bits.CHS = 3;
  3209  0FC2  081D               	movf	29,w	;volatile
  3210  0FC3  3903               	andlw	-253
  3211  0FC4  380C               	iorlw	12
  3212  0FC5  009D               	movwf	29	;volatile
  3213                           
  3214                           ;main.c: 358: TRISAbits.TRISA2 = 1;
  3215  0FC6  150C               	bsf	12,2	;volatile
  3216                           
  3217                           ;main.c: 359: PIE0bits.INTE = 1;
  3218  0FC7  1410               	bsf	16,0	;volatile
  3219                           
  3220                           ;main.c: 360: INTCONbits.INTEDG = 0;
  3221  0FC8  100B               	bcf	11,0	;volatile
  3222                           
  3223                           ;main.c: 363: TRISAbits.TRISA5 = 0;
  3224  0FC9  128C               	bcf	12,5	;volatile
  3225                           
  3226                           ;main.c: 364: PORTAbits.RA5 = 0;
  3227  0FCA  0020               	movlb	0	; select bank0
  3228  0FCB  128C               	bcf	12,5	;volatile
  3229                           
  3230                           ;main.c: 367: INTCONbits.PEIE = 1;
  3231  0FCC  170B               	bsf	11,6	;volatile
  3232                           
  3233                           ;main.c: 368: INTCONbits.GIE = 1;
  3234  0FCD  178B               	bsf	11,7	;volatile
  3235                           
  3236                           ;main.c: 370: nrf24l01Packet_t packet;;main.c: 372: setMessage(&packet, "BOOT", bootStat
      +                          us);
  3237  0FCE  30C7               	movlw	low main@packet
  3238  0FCF  0021               	movlb	1	; select bank1
  3239  0FD0  00B9               	movwf	setMessage@packet^(0+128)
  3240  0FD1  3000               	movlw	high main@packet
  3241  0FD2  00BA               	movwf	(setMessage@packet+1)^(0+128)
  3242  0FD3  3028               	movlw	low (STR_9| (0+32768))
  3243  0FD4  00BB               	movwf	setMessage@topic^(0+128)
  3244  0FD5  3098               	movlw	high (STR_9| (0+32768))
  3245  0FD6  00BC               	movwf	(setMessage@topic^(0+128)+1)
  3246  0FD7  0845               	movf	main@bootStatus^(0+128),w
  3247  0FD8  3188  2000  318F   	fcall	___lbtoft
  3248  0FDB  0020               	movlb	0	; select bank0
  3249  0FDC  0828               	movf	?___lbtoft,w
  3250  0FDD  0021               	movlb	1	; select bank1
  3251  0FDE  00BD               	movwf	setMessage@value^(0+128)
  3252  0FDF  0020               	movlb	0	; select bank0
  3253  0FE0  0829               	movf	?___lbtoft+1,w
  3254  0FE1  0021               	movlb	1	; select bank1
  3255  0FE2  00BE               	movwf	(setMessage@value+1)^(0+128)
  3256  0FE3  0020               	movlb	0	; select bank0
  3257  0FE4  082A               	movf	?___lbtoft+2,w
  3258  0FE5  0021               	movlb	1	; select bank1
  3259  0FE6  00BF               	movwf	(setMessage@value+2)^(0+128)
  3260  0FE7  3187  2766  318F   	fcall	_setMessage
  3261                           
  3262                           ;main.c: 373: packet.packetData.ACKRequest = 0;
  3263  0FEA  0021               	movlb	1	; select bank1
  3264  0FEB  1147               	bcf	main@packet^(0+128),2
  3265                           
  3266                           ;main.c: 374: nrf24l01SendPacket(&packet);
  3267  0FEC  30C7               	movlw	low main@packet
  3268  0FED  0020               	movlb	0	; select bank0
  3269  0FEE  00A7               	movwf	nrf24l01SendPacket@Packet
  3270  0FEF  3000               	movlw	high main@packet
  3271  0FF0  00A8               	movwf	nrf24l01SendPacket@Packet+1
  3272  0FF1  3186  269A  318F   	fcall	_nrf24l01SendPacket
  3273                           
  3274                           ;main.c: 375: sleep(3000);
  3275  0FF4  30B8               	movlw	184
  3276  0FF5  0020               	movlb	0	; select bank0
  3277  0FF6  00B2               	movwf	sleep@milliseconds
  3278  0FF7  300B               	movlw	11
  3279  0FF8  00B3               	movwf	sleep@milliseconds+1
  3280  0FF9  318A  221E  318F   	fcall	_sleep
  3281  0FFC                     l3611:	
  3282                           ;main.c: 377: while(1){
  3283                           
  3284                           
  3285                           ;main.c: 378: loop();
  3286  0FFC  3181  21FA  318F   	fcall	_loop
  3287  0FFF  2FFC               	goto	l3611
  3288  1000                     __end_of_main:	
  3289                           ;main.c: 379: };main.c: 381: return;
  3290                           
  3291                           
  3292                           	psect	text1
  3293  1766                     __ptext1:	
  3294 ;; *************** function _strcpy *****************
  3295 ;; Defined at:
  3296 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\strcpy.c"
  3297 ;; Parameters:    Size  Location     Type
  3298 ;;  to              1    wreg     PTR unsigned char 
  3299 ;;		 -> romDataMap(28), 
  3300 ;;  from            2    0[BANK0 ] PTR const unsigned char 
  3301 ;;		 -> STR_8(4), 
  3302 ;; Auto vars:     Size  Location     Type
  3303 ;;  to              1    3[BANK0 ] PTR unsigned char 
  3304 ;;		 -> romDataMap(28), 
  3305 ;;  cp              1    4[BANK0 ] PTR unsigned char 
  3306 ;;		 -> romDataMap(28), 
  3307 ;; Return value:  Size  Location     Type
  3308 ;;                  1    wreg      PTR unsigned char 
  3309 ;; Registers used:
  3310 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath
  3311 ;; Tracked objects:
  3312 ;;		On entry : 0/0
  3313 ;;		On exit  : 0/0
  3314 ;;		Unchanged: 0/0
  3315 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3316 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3317 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3318 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3319 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3320 ;;Total ram usage:        5 bytes
  3321 ;; Hardware stack levels used:    1
  3322 ;; Hardware stack levels required when called:    7
  3323 ;; This function calls:
  3324 ;;		Nothing
  3325 ;; This function is called by:
  3326 ;;		_main
  3327 ;; This function uses a non-reentrant model
  3328 ;;
  3329                           
  3330                           
  3331                           ;psect for function _strcpy
  3332  1766                     _strcpy:	
  3333                           
  3334                           ;incstack = 0
  3335                           ; Regs used in _strcpy: [wreg-fsr1h+status,2+status,0+pclath]
  3336                           ;strcpy@to stored from wreg
  3337  1766  0020               	movlb	0	; select bank0
  3338  1767  00A3               	movwf	strcpy@to
  3339  1768  0823               	movf	strcpy@to,w
  3340  1769  00A2               	movwf	??_strcpy
  3341  176A  0822               	movf	??_strcpy,w
  3342  176B  00A4               	movwf	strcpy@cp
  3343  176C                     l3493:	
  3344  176C  0824               	movf	strcpy@cp,w
  3345  176D  0086               	movwf	6
  3346  176E  3001               	movlw	1	; select bank2/3
  3347  176F  0087               	movwf	7
  3348  1770  0820               	movf	strcpy@from,w
  3349  1771  0084               	movwf	4
  3350  1772  0821               	movf	strcpy@from+1,w
  3351  1773  0085               	movwf	5
  3352  1774  0800               	movf	0,w	;code access
  3353  1775  3FC0               	movwi [0]fsr1
  3354  1776  0889               	movf	9,f
  3355  1777  1903               	btfsc	3,2
  3356  1778  0008               	return
  3357  1779  3001               	movlw	1
  3358  177A  00A2               	movwf	??_strcpy
  3359  177B  0822               	movf	??_strcpy,w
  3360  177C  07A4               	addwf	strcpy@cp,f
  3361  177D  3001               	movlw	1
  3362  177E  07A0               	addwf	strcpy@from,f
  3363  177F  3000               	movlw	0
  3364  1780  3DA1               	addwfc	strcpy@from+1,f
  3365  1781  2F6C               	goto	l3493
  3366  1782                     __end_of_strcpy:	
  3367                           ;	Return value of _strcpy is never used
  3368                           
  3369                           
  3370                           	psect	text2
  3371  083D                     __ptext2:	
  3372 ;; *************** function _nrf24l01Init *****************
  3373 ;; Defined at:
  3374 ;;		line 449 in file "nrf24l01.c"
  3375 ;; Parameters:    Size  Location     Type
  3376 ;;		None
  3377 ;; Auto vars:     Size  Location     Type
  3378 ;;		None
  3379 ;; Return value:  Size  Location     Type
  3380 ;;                  1    wreg      void 
  3381 ;; Registers used:
  3382 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3383 ;; Tracked objects:
  3384 ;;		On entry : 0/0
  3385 ;;		On exit  : 0/0
  3386 ;;		Unchanged: 0/0
  3387 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3388 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3389 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3390 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3391 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3392 ;;Total ram usage:        2 bytes
  3393 ;; Hardware stack levels used:    1
  3394 ;; Hardware stack levels required when called:   12
  3395 ;; This function calls:
  3396 ;;		_nrf24l01CEHigh
  3397 ;;		_nrf24l01CELow
  3398 ;;		_nrf24l01InitRegisters
  3399 ;;		_nrf24l01InterfaceInit
  3400 ;; This function is called by:
  3401 ;;		_main
  3402 ;; This function uses a non-reentrant model
  3403 ;;
  3404                           
  3405                           
  3406                           ;psect for function _nrf24l01Init
  3407  083D                     _nrf24l01Init:	
  3408                           
  3409                           ;nrf24l01.c: 452: nrf24l01InterfaceInit();
  3410                           
  3411                           ;incstack = 0
  3412                           ; Regs used in _nrf24l01Init: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3413  083D  3197  274A  3188   	fcall	_nrf24l01InterfaceInit
  3414                           
  3415                           ;nrf24l01.c: 457: nrf24l01CELow();
  3416  0840  3196  2648  3188   	fcall	_nrf24l01CELow
  3417                           
  3418                           ;nrf24l01.c: 459: _delay((unsigned long)((50000)*(32000000/4000000.0)));
  3419  0843  3003               	movlw	3
  3420  0844  0020               	movlb	0	; select bank0
  3421  0845  00B4               	movwf	??_nrf24l01Init+1
  3422  0846  3008               	movlw	8
  3423  0847  00B3               	movwf	??_nrf24l01Init
  3424  0848  3077               	movlw	119
  3425  0849                     u3547:	
  3426  0849  0B89               	decfsz	9,f
  3427  084A  2849               	goto	u3547
  3428  084B  0BB3               	decfsz	??_nrf24l01Init,f
  3429  084C  2849               	goto	u3547
  3430  084D  0BB4               	decfsz	??_nrf24l01Init+1,f
  3431  084E  2849               	goto	u3547
  3432                           
  3433                           ;nrf24l01.c: 461: nrf24l01InitRegisters();
  3434  084F  3183  23AC  3188   	fcall	_nrf24l01InitRegisters
  3435                           
  3436                           ;nrf24l01.c: 463: _delay((unsigned long)((50000)*(32000000/4000000.0)));
  3437  0852  3003               	movlw	3
  3438  0853  0020               	movlb	0	; select bank0
  3439  0854  00B4               	movwf	??_nrf24l01Init+1
  3440  0855  3008               	movlw	8
  3441  0856  00B3               	movwf	??_nrf24l01Init
  3442  0857  3077               	movlw	119
  3443  0858                     u3557:	
  3444  0858  0B89               	decfsz	9,f
  3445  0859  2858               	goto	u3557
  3446  085A  0BB3               	decfsz	??_nrf24l01Init,f
  3447  085B  2858               	goto	u3557
  3448  085C  0BB4               	decfsz	??_nrf24l01Init+1,f
  3449  085D  2858               	goto	u3557
  3450                           
  3451                           ;nrf24l01.c: 465: nrf24l01CEHigh();
  3452  085E  3196  2645         	fcall	_nrf24l01CEHigh
  3453  0860  0008               	return
  3454  0861                     __end_of_nrf24l01Init:	
  3455                           
  3456                           	psect	text3
  3457  174A                     __ptext3:	
  3458 ;; *************** function _nrf24l01InterfaceInit *****************
  3459 ;; Defined at:
  3460 ;;		line 27 in file "interface.c"
  3461 ;; Parameters:    Size  Location     Type
  3462 ;;		None
  3463 ;; Auto vars:     Size  Location     Type
  3464 ;;		None
  3465 ;; Return value:  Size  Location     Type
  3466 ;;                  1    wreg      void 
  3467 ;; Registers used:
  3468 ;;		wreg, status,2, status,0
  3469 ;; Tracked objects:
  3470 ;;		On entry : 0/0
  3471 ;;		On exit  : 0/0
  3472 ;;		Unchanged: 0/0
  3473 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3474 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3475 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3476 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3477 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3478 ;;Total ram usage:        0 bytes
  3479 ;; Hardware stack levels used:    1
  3480 ;; Hardware stack levels required when called:    7
  3481 ;; This function calls:
  3482 ;;		Nothing
  3483 ;; This function is called by:
  3484 ;;		_nrf24l01Init
  3485 ;; This function uses a non-reentrant model
  3486 ;;
  3487                           
  3488                           
  3489                           ;psect for function _nrf24l01InterfaceInit
  3490  174A                     _nrf24l01InterfaceInit:	
  3491                           
  3492                           ;interface.c: 29: TRISAbits.TRISA0 = 0;
  3493                           
  3494                           ;incstack = 0
  3495                           ; Regs used in _nrf24l01InterfaceInit: [wreg+status,2+status,0]
  3496  174A  0021               	movlb	1	; select bank1
  3497  174B  100C               	bcf	12,0	;volatile
  3498                           
  3499                           ;interface.c: 30: TRISAbits.TRISA1 = 0;
  3500  174C  108C               	bcf	12,1	;volatile
  3501                           
  3502                           ;interface.c: 32: TRISCbits.TRISC1 = 1;
  3503  174D  148E               	bsf	14,1	;volatile
  3504                           
  3505                           ;interface.c: 33: TRISCbits.TRISC2 = 0;
  3506  174E  110E               	bcf	14,2	;volatile
  3507                           
  3508                           ;interface.c: 34: TRISCbits.TRISC0 = 0;
  3509  174F  100E               	bcf	14,0	;volatile
  3510                           
  3511                           ;interface.c: 36: SSP1CON1bits.SSPEN = 0;
  3512  1750  0024               	movlb	4	; select bank4
  3513  1751  1295               	bcf	21,5	;volatile
  3514                           
  3515                           ;interface.c: 38: RC1PPSbits.RC1PPS = 0b10001;
  3516  1752  003D               	movlb	29	; select bank29
  3517  1753  0821               	movf	33,w	;volatile
  3518  1754  39E0               	andlw	-32
  3519  1755  3811               	iorlw	17
  3520  1756  00A1               	movwf	33	;volatile
  3521                           
  3522                           ;interface.c: 39: RC2PPSbits.RC2PPS = 0b11001;
  3523  1757  0822               	movf	34,w	;volatile
  3524  1758  39E0               	andlw	-32
  3525  1759  3819               	iorlw	25
  3526  175A  00A2               	movwf	34	;volatile
  3527                           
  3528                           ;interface.c: 40: RC0PPSbits.RC0PPS = 0b11000;
  3529  175B  0820               	movf	32,w	;volatile
  3530  175C  39E0               	andlw	-32
  3531  175D  3818               	iorlw	24
  3532  175E  00A0               	movwf	32	;volatile
  3533                           
  3534                           ;interface.c: 42: SSP1CON1bits.CKP = 0;
  3535  175F  0024               	movlb	4	; select bank4
  3536  1760  1215               	bcf	21,4	;volatile
  3537                           
  3538                           ;interface.c: 43: SSP1STATbits.CKE = 1;
  3539  1761  1714               	bsf	20,6	;volatile
  3540                           
  3541                           ;interface.c: 44: SSP1CON1bits.SSPM = 0b0000;
  3542  1762  30F0               	movlw	-16
  3543  1763  0595               	andwf	21,f	;volatile
  3544                           
  3545                           ;interface.c: 46: SSP1CON1bits.SSPEN = 1;
  3546  1764  1695               	bsf	21,5	;volatile
  3547  1765  0008               	return
  3548  1766                     __end_of_nrf24l01InterfaceInit:	
  3549                           
  3550                           	psect	text4
  3551  03AC                     __ptext4:	
  3552 ;; *************** function _nrf24l01InitRegisters *****************
  3553 ;; Defined at:
  3554 ;;		line 348 in file "nrf24l01.c"
  3555 ;; Parameters:    Size  Location     Type
  3556 ;;		None
  3557 ;; Auto vars:     Size  Location     Type
  3558 ;;  i               2   17[BANK0 ] unsigned int 
  3559 ;;  config          1   16[BANK0 ] struct .
  3560 ;;  DynPD           1   15[BANK0 ] struct .
  3561 ;;  enAA            1   14[BANK0 ] struct .
  3562 ;;  status          1   13[BANK0 ] struct .
  3563 ;;  rfSetup         1   12[BANK0 ] struct .
  3564 ;;  feature         1   11[BANK0 ] struct .
  3565 ;;  setupAW         1   10[BANK0 ] struct .
  3566 ;;  channel         1    9[BANK0 ] struct .
  3567 ;; Return value:  Size  Location     Type
  3568 ;;                  1    wreg      void 
  3569 ;; Registers used:
  3570 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3571 ;; Tracked objects:
  3572 ;;		On entry : 0/0
  3573 ;;		On exit  : 0/0
  3574 ;;		Unchanged: 0/0
  3575 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3576 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3577 ;;      Locals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3578 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3579 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3580 ;;Total ram usage:       12 bytes
  3581 ;; Hardware stack levels used:    1
  3582 ;; Hardware stack levels required when called:   11
  3583 ;; This function calls:
  3584 ;;		___bmul
  3585 ;;		_nrf24l01SPIEnd
  3586 ;;		_nrf24l01SPISend
  3587 ;;		_nrf24l01SPIStart
  3588 ;;		_nrf24l01Send
  3589 ;;		_nrf24l01SetRXPipe
  3590 ;;		_nrf24l01SetTXPipe
  3591 ;; This function is called by:
  3592 ;;		_nrf24l01Init
  3593 ;; This function uses a non-reentrant model
  3594 ;;
  3595                           
  3596                           
  3597                           ;psect for function _nrf24l01InitRegisters
  3598  03AC                     _nrf24l01InitRegisters:	
  3599                           
  3600                           ;nrf24l01.c: 350: n_CONFIG_t config;;nrf24l01.c: 352: config.PWR_UP = 0;
  3601                           
  3602                           ;incstack = 0
  3603                           ; Regs used in _nrf24l01InitRegisters: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3604  03AC  0020               	movlb	0	; select bank0
  3605  03AD  10B0               	bcf	nrf24l01InitRegisters@config,1
  3606                           
  3607                           ;nrf24l01.c: 353: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x00, config.byte);
  3608  03AE  0830               	movf	nrf24l01InitRegisters@config,w
  3609  03AF  00A7               	movwf	??_nrf24l01InitRegisters
  3610  03B0  0827               	movf	??_nrf24l01InitRegisters,w
  3611  03B1  00A0               	movwf	nrf24l01Send@data
  3612  03B2  3020               	movlw	32
  3613  03B3  3197  27BF  3183   	fcall	_nrf24l01Send
  3614                           
  3615                           ;nrf24l01.c: 355: n_SETUP_AW_t setupAW;;nrf24l01.c: 356: setupAW.byte = 0x00;
  3616  03B6  0020               	movlb	0	; select bank0
  3617  03B7  01AA               	clrf	nrf24l01InitRegisters@setupAW
  3618                           
  3619                           ;nrf24l01.c: 357: setupAW.AW = 0b11;
  3620  03B8  3003               	movlw	3
  3621  03B9  04AA               	iorwf	nrf24l01InitRegisters@setupAW,f
  3622                           
  3623                           ;nrf24l01.c: 358: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x02, setupAW.byte);
  3624  03BA  082A               	movf	nrf24l01InitRegisters@setupAW,w
  3625  03BB  00A7               	movwf	??_nrf24l01InitRegisters
  3626  03BC  0827               	movf	??_nrf24l01InitRegisters,w
  3627  03BD  00A0               	movwf	nrf24l01Send@data
  3628  03BE  3022               	movlw	34
  3629  03BF  3197  27BF  3183   	fcall	_nrf24l01Send
  3630                           
  3631                           ;nrf24l01.c: 361: n_RF_CH_t channel;;nrf24l01.c: 362: channel.RF_CH = 2;
  3632  03C2  0020               	movlb	0	; select bank0
  3633  03C3  0829               	movf	nrf24l01InitRegisters@channel,w
  3634  03C4  3980               	andlw	-128
  3635  03C5  3802               	iorlw	2
  3636  03C6  00A9               	movwf	nrf24l01InitRegisters@channel
  3637                           
  3638                           ;nrf24l01.c: 363: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x05, channel.byte);
  3639  03C7  0829               	movf	nrf24l01InitRegisters@channel,w
  3640  03C8  00A7               	movwf	??_nrf24l01InitRegisters
  3641  03C9  0827               	movf	??_nrf24l01InitRegisters,w
  3642  03CA  00A0               	movwf	nrf24l01Send@data
  3643  03CB  3025               	movlw	37
  3644  03CC  3197  27BF  3183   	fcall	_nrf24l01Send
  3645                           
  3646                           ;nrf24l01.c: 366: n_RF_SETUP_t rfSetup;;nrf24l01.c: 367: rfSetup.byte = 0x00;
  3647  03CF  0020               	movlb	0	; select bank0
  3648  03D0  01AC               	clrf	nrf24l01InitRegisters@rfSetup
  3649                           
  3650                           ;nrf24l01.c: 368: rfSetup.RF_DR_LOW = 0;
  3651  03D1  12AC               	bcf	nrf24l01InitRegisters@rfSetup,5
  3652                           
  3653                           ;nrf24l01.c: 369: rfSetup.RF_DR_HIGH = 1;
  3654  03D2  15AC               	bsf	nrf24l01InitRegisters@rfSetup,3
  3655                           
  3656                           ;nrf24l01.c: 370: rfSetup.RF_PWR = 3;
  3657  03D3  3006               	movlw	6
  3658  03D4  04AC               	iorwf	nrf24l01InitRegisters@rfSetup,f
  3659                           
  3660                           ;nrf24l01.c: 371: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x06, rfSetup.byte);
  3661  03D5  082C               	movf	nrf24l01InitRegisters@rfSetup,w
  3662  03D6  00A7               	movwf	??_nrf24l01InitRegisters
  3663  03D7  0827               	movf	??_nrf24l01InitRegisters,w
  3664  03D8  00A0               	movwf	nrf24l01Send@data
  3665  03D9  3026               	movlw	38
  3666  03DA  3197  27BF  3183   	fcall	_nrf24l01Send
  3667                           
  3668                           ;nrf24l01.c: 374: nrf24l01SetRXPipe(0xFF);
  3669  03DD  30FF               	movlw	255
  3670  03DE  3197  27DF  3183   	fcall	_nrf24l01SetRXPipe
  3671                           
  3672                           ;nrf24l01.c: 377: n_EN_AA_t enAA;;nrf24l01.c: 378: enAA.byte = nrf24l01Send((unsigned) 0
      +                          b00000000 | (unsigned) 0x01, 0);
  3673  03E1  0020               	movlb	0	; select bank0
  3674  03E2  01A0               	clrf	nrf24l01Send@data
  3675  03E3  3001               	movlw	1
  3676  03E4  3197  27BF  3183   	fcall	_nrf24l01Send
  3677  03E7  0020               	movlb	0	; select bank0
  3678  03E8  00A7               	movwf	??_nrf24l01InitRegisters
  3679  03E9  0827               	movf	??_nrf24l01InitRegisters,w
  3680  03EA  00AE               	movwf	nrf24l01InitRegisters@enAA
  3681                           
  3682                           ;nrf24l01.c: 379: enAA.ENAA_P0 = 0;
  3683  03EB  102E               	bcf	nrf24l01InitRegisters@enAA,0
  3684                           
  3685                           ;nrf24l01.c: 380: enAA.ENAA_P1 = 0;
  3686  03EC  10AE               	bcf	nrf24l01InitRegisters@enAA,1
  3687                           
  3688                           ;nrf24l01.c: 381: enAA.ENAA_P2 = 0;
  3689  03ED  112E               	bcf	nrf24l01InitRegisters@enAA,2
  3690                           
  3691                           ;nrf24l01.c: 382: enAA.ENAA_P3 = 0;
  3692  03EE  11AE               	bcf	nrf24l01InitRegisters@enAA,3
  3693                           
  3694                           ;nrf24l01.c: 383: enAA.ENAA_P4 = 0;
  3695  03EF  122E               	bcf	nrf24l01InitRegisters@enAA,4
  3696                           
  3697                           ;nrf24l01.c: 384: enAA.ENAA_P5 = 0;
  3698  03F0  12AE               	bcf	nrf24l01InitRegisters@enAA,5
  3699                           
  3700                           ;nrf24l01.c: 385: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x01, enAA.byte);
  3701  03F1  082E               	movf	nrf24l01InitRegisters@enAA,w
  3702  03F2  00A7               	movwf	??_nrf24l01InitRegisters
  3703  03F3  0827               	movf	??_nrf24l01InitRegisters,w
  3704  03F4  00A0               	movwf	nrf24l01Send@data
  3705  03F5  3021               	movlw	33
  3706  03F6  3197  27BF  3183   	fcall	_nrf24l01Send
  3707                           
  3708                           ;nrf24l01.c: 389: n_FEATURE_t feature;;nrf24l01.c: 390: feature.byte = nrf24l01Send((uns
      +                          igned) 0b00000000 | (unsigned) 0x1D, 0);
  3709  03F9  0020               	movlb	0	; select bank0
  3710  03FA  01A0               	clrf	nrf24l01Send@data
  3711  03FB  301D               	movlw	29
  3712  03FC  3197  27BF  3183   	fcall	_nrf24l01Send
  3713  03FF  0020               	movlb	0	; select bank0
  3714  0400  00A7               	movwf	??_nrf24l01InitRegisters
  3715  0401  0827               	movf	??_nrf24l01InitRegisters,w
  3716  0402  00AB               	movwf	nrf24l01InitRegisters@feature
  3717                           
  3718                           ;nrf24l01.c: 391: feature.EN_DPL = 1;
  3719  0403  152B               	bsf	nrf24l01InitRegisters@feature,2
  3720                           
  3721                           ;nrf24l01.c: 392: feature.EN_DYN_ACK = 1;
  3722  0404  142B               	bsf	nrf24l01InitRegisters@feature,0
  3723                           
  3724                           ;nrf24l01.c: 393: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x1D, feature.byte);
  3725  0405  082B               	movf	nrf24l01InitRegisters@feature,w
  3726  0406  00A7               	movwf	??_nrf24l01InitRegisters
  3727  0407  0827               	movf	??_nrf24l01InitRegisters,w
  3728  0408  00A0               	movwf	nrf24l01Send@data
  3729  0409  303D               	movlw	61
  3730  040A  3197  27BF  3183   	fcall	_nrf24l01Send
  3731                           
  3732                           ;nrf24l01.c: 395: n_DYNPD_t DynPD;;nrf24l01.c: 396: DynPD.byte = nrf24l01Send((unsigned)
      +                           0b00000000 | (unsigned) 0x1C, 0);
  3733  040D  0020               	movlb	0	; select bank0
  3734  040E  01A0               	clrf	nrf24l01Send@data
  3735  040F  301C               	movlw	28
  3736  0410  3197  27BF  3183   	fcall	_nrf24l01Send
  3737  0413  0020               	movlb	0	; select bank0
  3738  0414  00A7               	movwf	??_nrf24l01InitRegisters
  3739  0415  0827               	movf	??_nrf24l01InitRegisters,w
  3740  0416  00AF               	movwf	nrf24l01InitRegisters@DynPD
  3741                           
  3742                           ;nrf24l01.c: 397: DynPD.DPL_P0 = 1;
  3743  0417  142F               	bsf	nrf24l01InitRegisters@DynPD,0
  3744                           
  3745                           ;nrf24l01.c: 398: DynPD.DPL_P1 = 1;
  3746  0418  14AF               	bsf	nrf24l01InitRegisters@DynPD,1
  3747                           
  3748                           ;nrf24l01.c: 399: DynPD.DPL_P2 = 1;
  3749  0419  152F               	bsf	nrf24l01InitRegisters@DynPD,2
  3750                           
  3751                           ;nrf24l01.c: 400: DynPD.DPL_P3 = 1;
  3752  041A  15AF               	bsf	nrf24l01InitRegisters@DynPD,3
  3753                           
  3754                           ;nrf24l01.c: 401: DynPD.DPL_P4 = 1;
  3755  041B  162F               	bsf	nrf24l01InitRegisters@DynPD,4
  3756                           
  3757                           ;nrf24l01.c: 402: DynPD.DPL_P5 = 1;
  3758  041C  16AF               	bsf	nrf24l01InitRegisters@DynPD,5
  3759                           
  3760                           ;nrf24l01.c: 403: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x1C, DynPD.byte);
  3761  041D  082F               	movf	nrf24l01InitRegisters@DynPD,w
  3762  041E  00A7               	movwf	??_nrf24l01InitRegisters
  3763  041F  0827               	movf	??_nrf24l01InitRegisters,w
  3764  0420  00A0               	movwf	nrf24l01Send@data
  3765  0421  303C               	movlw	60
  3766  0422  3197  27BF  3183   	fcall	_nrf24l01Send
  3767                           
  3768                           ;nrf24l01.c: 406: unsigned int i;;nrf24l01.c: 407: for (i = 0; i < 6; i++){
  3769  0425  0020               	movlb	0	; select bank0
  3770  0426  01B1               	clrf	nrf24l01InitRegisters@i
  3771  0427  01B2               	clrf	nrf24l01InitRegisters@i+1
  3772  0428  3000               	movlw	0
  3773  0429  0232               	subwf	nrf24l01InitRegisters@i+1,w
  3774  042A  3006               	movlw	6
  3775  042B  1903               	skipnz
  3776  042C  0231               	subwf	nrf24l01InitRegisters@i,w
  3777  042D  1803               	btfsc	3,0
  3778  042E  2C88               	goto	l3325
  3779  042F                     l3311:	
  3780                           
  3781                           ;nrf24l01.c: 409: nrf24l01SPIStart();
  3782  042F  3196  2666  3183   	fcall	_nrf24l01SPIStart
  3783                           
  3784                           ;nrf24l01.c: 410: nrf24l01SPISend((unsigned) 0b00100000 | ((unsigned) 0x0A + i));
  3785  0432  0020               	movlb	0	; select bank0
  3786  0433  0831               	movf	nrf24l01InitRegisters@i,w
  3787  0434  3E0A               	addlw	10
  3788  0435  3820               	iorlw	32
  3789  0436  3196  2677  3183   	fcall	_nrf24l01SPISend
  3790                           
  3791                           ;nrf24l01.c: 412: nrf24l01SPISend(n_ADDRESS_P0[4] + (n_ADDRESS_MUL * i));
  3792  0439  301D               	movlw	low ((_n_ADDRESS_P0+4)| (0+32768))
  3793  043A  0084               	movwf	4
  3794  043B  3098               	movlw	high ((_n_ADDRESS_P0+4)| (0+32768))
  3795  043C  0085               	movwf	5
  3796  043D  0800               	movf	0,w	;code access
  3797  043E  0020               	movlb	0	; select bank0
  3798  043F  00A7               	movwf	??_nrf24l01InitRegisters
  3799  0440  0831               	movf	nrf24l01InitRegisters@i,w
  3800  0441  00A8               	movwf	??_nrf24l01InitRegisters+1
  3801  0442  0828               	movf	??_nrf24l01InitRegisters+1,w
  3802  0443  00A0               	movwf	___bmul@multiplicand
  3803  0444  3000               	movlw	low (_n_ADDRESS_MUL| (0+32768))
  3804  0445  0084               	movwf	4
  3805  0446  3098               	movlw	high (_n_ADDRESS_MUL| (0+32768))
  3806  0447  0085               	movwf	5
  3807  0448  0800               	movf	0,w	;code access
  3808  0449  3196  2693  3183   	fcall	___bmul
  3809  044C  0020               	movlb	0	; select bank0
  3810  044D  0727               	addwf	??_nrf24l01InitRegisters,w
  3811  044E  3196  2677  3183   	fcall	_nrf24l01SPISend
  3812                           
  3813                           ;nrf24l01.c: 414: if (i < 2){
  3814  0451  3000               	movlw	0
  3815  0452  0020               	movlb	0	; select bank0
  3816  0453  0232               	subwf	nrf24l01InitRegisters@i+1,w
  3817  0454  3002               	movlw	2
  3818  0455  1903               	skipnz
  3819  0456  0231               	subwf	nrf24l01InitRegisters@i,w
  3820  0457  1803               	skipnc
  3821  0458  2C79               	goto	l3319
  3822                           
  3823                           ;nrf24l01.c: 415: nrf24l01SPISend(n_ADDRESS_P0[3]);
  3824  0459  301C               	movlw	low ((_n_ADDRESS_P0+3)| (0+32768))
  3825  045A  0084               	movwf	4
  3826  045B  3098               	movlw	high ((_n_ADDRESS_P0+3)| (0+32768))
  3827  045C  0085               	movwf	5
  3828  045D  0800               	movf	0,w	;code access
  3829  045E  3196  2677  3183   	fcall	_nrf24l01SPISend
  3830                           
  3831                           ;nrf24l01.c: 416: nrf24l01SPISend(n_ADDRESS_P0[2]);
  3832  0461  301B               	movlw	low ((_n_ADDRESS_P0+2)| (0+32768))
  3833  0462  0084               	movwf	4
  3834  0463  3098               	movlw	high ((_n_ADDRESS_P0+2)| (0+32768))
  3835  0464  0085               	movwf	5
  3836  0465  0800               	movf	0,w	;code access
  3837  0466  3196  2677  3183   	fcall	_nrf24l01SPISend
  3838                           
  3839                           ;nrf24l01.c: 417: nrf24l01SPISend(n_ADDRESS_P0[1]);
  3840  0469  301A               	movlw	low ((_n_ADDRESS_P0+1)| (0+32768))
  3841  046A  0084               	movwf	4
  3842  046B  3098               	movlw	high ((_n_ADDRESS_P0+1)| (0+32768))
  3843  046C  0085               	movwf	5
  3844  046D  0800               	movf	0,w	;code access
  3845  046E  3196  2677  3183   	fcall	_nrf24l01SPISend
  3846                           
  3847                           ;nrf24l01.c: 418: nrf24l01SPISend(n_ADDRESS_P0[0]);
  3848  0471  3019               	movlw	low (_n_ADDRESS_P0| (0+32768))
  3849  0472  0084               	movwf	4
  3850  0473  3098               	movlw	high (_n_ADDRESS_P0| (0+32768))
  3851  0474  0085               	movwf	5
  3852  0475  0800               	movf	0,w	;code access
  3853  0476  3196  2677  3183   	fcall	_nrf24l01SPISend
  3854  0479                     l3319:	
  3855                           
  3856                           ;nrf24l01.c: 419: };nrf24l01.c: 421: nrf24l01SPIEnd();
  3857  0479  3196  2657  3183   	fcall	_nrf24l01SPIEnd
  3858  047C  3001               	movlw	1
  3859  047D  0020               	movlb	0	; select bank0
  3860  047E  07B1               	addwf	nrf24l01InitRegisters@i,f
  3861  047F  3000               	movlw	0
  3862  0480  3DB2               	addwfc	nrf24l01InitRegisters@i+1,f
  3863  0481  3000               	movlw	0
  3864  0482  0232               	subwf	nrf24l01InitRegisters@i+1,w
  3865  0483  3006               	movlw	6
  3866  0484  1903               	skipnz
  3867  0485  0231               	subwf	nrf24l01InitRegisters@i,w
  3868  0486  1C03               	skipc
  3869  0487  2C2F               	goto	l3311
  3870  0488                     l3325:	
  3871                           
  3872                           ;nrf24l01.c: 422: };nrf24l01.c: 424: nrf24l01SetTXPipe(0);
  3873  0488  3000               	movlw	0
  3874  0489  318B  2360  3183   	fcall	_nrf24l01SetTXPipe
  3875                           
  3876                           ;nrf24l01.c: 428: n_STATUS_t status;;nrf24l01.c: 429: status.byte = 0x00;
  3877  048C  0020               	movlb	0	; select bank0
  3878  048D  01AD               	clrf	nrf24l01InitRegisters@status
  3879                           
  3880                           ;nrf24l01.c: 430: status.RX_DR = 1;
  3881  048E  172D               	bsf	nrf24l01InitRegisters@status,6
  3882                           
  3883                           ;nrf24l01.c: 431: status.TX_DS = 1;
  3884  048F  16AD               	bsf	nrf24l01InitRegisters@status,5
  3885                           
  3886                           ;nrf24l01.c: 432: status.MAX_RT = 1;
  3887  0490  162D               	bsf	nrf24l01InitRegisters@status,4
  3888                           
  3889                           ;nrf24l01.c: 433: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x07, status.byte);
  3890  0491  082D               	movf	nrf24l01InitRegisters@status,w
  3891  0492  00A7               	movwf	??_nrf24l01InitRegisters
  3892  0493  0827               	movf	??_nrf24l01InitRegisters,w
  3893  0494  00A0               	movwf	nrf24l01Send@data
  3894  0495  3027               	movlw	39
  3895  0496  3197  27BF  3183   	fcall	_nrf24l01Send
  3896                           
  3897                           ;nrf24l01.c: 436: nrf24l01Send((unsigned) 0b11100001, 0);
  3898  0499  0020               	movlb	0	; select bank0
  3899  049A  01A0               	clrf	nrf24l01Send@data
  3900  049B  30E1               	movlw	225
  3901  049C  3197  27BF  3183   	fcall	_nrf24l01Send
  3902                           
  3903                           ;nrf24l01.c: 437: nrf24l01Send((unsigned) 0b11100010, 0);
  3904  049F  0020               	movlb	0	; select bank0
  3905  04A0  01A0               	clrf	nrf24l01Send@data
  3906  04A1  30E2               	movlw	226
  3907  04A2  3197  27BF  3183   	fcall	_nrf24l01Send
  3908                           
  3909                           ;nrf24l01.c: 440: config.PRIM_RX = 1;
  3910  04A5  0020               	movlb	0	; select bank0
  3911  04A6  1430               	bsf	nrf24l01InitRegisters@config,0
  3912                           
  3913                           ;nrf24l01.c: 441: config.EN_CRC = 1;
  3914  04A7  15B0               	bsf	nrf24l01InitRegisters@config,3
  3915                           
  3916                           ;nrf24l01.c: 442: config.CRCO = 1;
  3917  04A8  1530               	bsf	nrf24l01InitRegisters@config,2
  3918                           
  3919                           ;nrf24l01.c: 443: config.PWR_UP = 1;
  3920  04A9  14B0               	bsf	nrf24l01InitRegisters@config,1
  3921                           
  3922                           ;nrf24l01.c: 444: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x00, config.byte);
  3923  04AA  0830               	movf	nrf24l01InitRegisters@config,w
  3924  04AB  00A7               	movwf	??_nrf24l01InitRegisters
  3925  04AC  0827               	movf	??_nrf24l01InitRegisters,w
  3926  04AD  00A0               	movwf	nrf24l01Send@data
  3927  04AE  3020               	movlw	32
  3928  04AF  3197  27BF         	fcall	_nrf24l01Send
  3929  04B1  0008               	return
  3930  04B2                     __end_of_nrf24l01InitRegisters:	
  3931                           
  3932                           	psect	text5
  3933  17DF                     __ptext5:	
  3934 ;; *************** function _nrf24l01SetRXPipe *****************
  3935 ;; Defined at:
  3936 ;;		line 327 in file "nrf24l01.c"
  3937 ;; Parameters:    Size  Location     Type
  3938 ;;  pipe            1    wreg     unsigned char 
  3939 ;; Auto vars:     Size  Location     Type
  3940 ;;  pipe            1    5[BANK0 ] unsigned char 
  3941 ;;  enRXAddr        1    6[BANK0 ] struct .
  3942 ;; Return value:  Size  Location     Type
  3943 ;;                  1    wreg      void 
  3944 ;; Registers used:
  3945 ;;		wreg, status,2, status,0, pclath, cstack
  3946 ;; Tracked objects:
  3947 ;;		On entry : 0/0
  3948 ;;		On exit  : 0/0
  3949 ;;		Unchanged: 0/0
  3950 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3951 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3952 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3953 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3954 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3955 ;;Total ram usage:        4 bytes
  3956 ;; Hardware stack levels used:    1
  3957 ;; Hardware stack levels required when called:   10
  3958 ;; This function calls:
  3959 ;;		_nrf24l01Send
  3960 ;; This function is called by:
  3961 ;;		_main
  3962 ;;		_nrf24l01InitRegisters
  3963 ;; This function uses a non-reentrant model
  3964 ;;
  3965                           
  3966                           
  3967                           ;psect for function _nrf24l01SetRXPipe
  3968  17DF                     _nrf24l01SetRXPipe:	
  3969                           
  3970                           ;incstack = 0
  3971                           ; Regs used in _nrf24l01SetRXPipe: [wreg+status,2+status,0+pclath+cstack]
  3972                           ;nrf24l01SetRXPipe@pipe stored from wreg
  3973  17DF  0020               	movlb	0	; select bank0
  3974  17E0  00A5               	movwf	nrf24l01SetRXPipe@pipe
  3975                           
  3976                           ;nrf24l01.c: 329: n_EN_RXADDR_t enRXAddr;;nrf24l01.c: 331: if (pipe > 5){
  3977  17E1  3006               	movlw	6
  3978  17E2  0225               	subwf	nrf24l01SetRXPipe@pipe,w
  3979  17E3  1C03               	skipc
  3980  17E4  2FEC               	goto	l336
  3981                           
  3982                           ;nrf24l01.c: 332: enRXAddr.ERX_P0 = 1;
  3983  17E5  1426               	bsf	nrf24l01SetRXPipe@enRXAddr,0
  3984                           
  3985                           ;nrf24l01.c: 333: enRXAddr.ERX_P1 = 1;
  3986  17E6  14A6               	bsf	nrf24l01SetRXPipe@enRXAddr,1
  3987                           
  3988                           ;nrf24l01.c: 334: enRXAddr.ERX_P2 = 1;
  3989  17E7  1526               	bsf	nrf24l01SetRXPipe@enRXAddr,2
  3990                           
  3991                           ;nrf24l01.c: 335: enRXAddr.ERX_P3 = 1;
  3992  17E8  15A6               	bsf	nrf24l01SetRXPipe@enRXAddr,3
  3993                           
  3994                           ;nrf24l01.c: 336: enRXAddr.ERX_P4 = 1;
  3995  17E9  1626               	bsf	nrf24l01SetRXPipe@enRXAddr,4
  3996                           
  3997                           ;nrf24l01.c: 337: enRXAddr.ERX_P5 = 1;
  3998  17EA  16A6               	bsf	nrf24l01SetRXPipe@enRXAddr,5
  3999                           
  4000                           ;nrf24l01.c: 338: }
  4001  17EB  2FF8               	goto	l2977
  4002  17EC                     l336:	
  4003                           
  4004                           ;nrf24l01.c: 340: else{;nrf24l01.c: 341: enRXAddr.ERX_P0 = 1;
  4005  17EC  1426               	bsf	nrf24l01SetRXPipe@enRXAddr,0
  4006                           
  4007                           ;nrf24l01.c: 342: enRXAddr.byte = (unsigned) enRXAddr.byte << pipe;
  4008  17ED  0826               	movf	nrf24l01SetRXPipe@enRXAddr,w
  4009  17EE  00A3               	movwf	??_nrf24l01SetRXPipe
  4010  17EF  0A25               	incf	nrf24l01SetRXPipe@pipe,w
  4011  17F0  2FF2               	goto	u3024
  4012  17F1                     u3025:	
  4013  17F1  35A3               	lslf	??_nrf24l01SetRXPipe,f
  4014  17F2                     u3024:	
  4015  17F2  0B89               	decfsz	9,f
  4016  17F3  2FF1               	goto	u3025
  4017  17F4  0823               	movf	??_nrf24l01SetRXPipe,w
  4018  17F5  00A4               	movwf	??_nrf24l01SetRXPipe+1
  4019  17F6  0824               	movf	??_nrf24l01SetRXPipe+1,w
  4020  17F7  00A6               	movwf	nrf24l01SetRXPipe@enRXAddr
  4021  17F8                     l2977:	
  4022                           
  4023                           ;nrf24l01.c: 343: };nrf24l01.c: 345: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x0
      +                          2, enRXAddr.byte);
  4024  17F8  0826               	movf	nrf24l01SetRXPipe@enRXAddr,w
  4025  17F9  00A3               	movwf	??_nrf24l01SetRXPipe
  4026  17FA  0823               	movf	??_nrf24l01SetRXPipe,w
  4027  17FB  00A0               	movwf	nrf24l01Send@data
  4028  17FC  3022               	movlw	34
  4029  17FD  3197  27BF         	fcall	_nrf24l01Send
  4030  17FF  0008               	return
  4031  1800                     __end_of_nrf24l01SetRXPipe:	
  4032                           
  4033                           	psect	text6
  4034  096F                     __ptext6:	
  4035 ;; *************** function _nrf24l01GetPipe *****************
  4036 ;; Defined at:
  4037 ;;		line 263 in file "main.c"
  4038 ;; Parameters:    Size  Location     Type
  4039 ;;  name            1    wreg     PTR unsigned char 
  4040 ;;		 -> romDataMap(28), 
  4041 ;; Auto vars:     Size  Location     Type
  4042 ;;  name            1    9[BANK0 ] PTR unsigned char 
  4043 ;;		 -> romDataMap(28), 
  4044 ;;  i               1   10[BANK0 ] unsigned char 
  4045 ;;  pipe            1    8[BANK0 ] unsigned char 
  4046 ;; Return value:  Size  Location     Type
  4047 ;;                  1    wreg      unsigned char 
  4048 ;; Registers used:
  4049 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4050 ;; Tracked objects:
  4051 ;;		On entry : 0/0
  4052 ;;		On exit  : 0/0
  4053 ;;		Unchanged: 0/0
  4054 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4055 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4056 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4057 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4058 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4059 ;;Total ram usage:        5 bytes
  4060 ;; Hardware stack levels used:    1
  4061 ;; Hardware stack levels required when called:    8
  4062 ;; This function calls:
  4063 ;;		___lwmod
  4064 ;;		_strlen
  4065 ;; This function is called by:
  4066 ;;		_main
  4067 ;; This function uses a non-reentrant model
  4068 ;;
  4069                           
  4070                           
  4071                           ;psect for function _nrf24l01GetPipe
  4072  096F                     _nrf24l01GetPipe:	
  4073                           
  4074                           ;incstack = 0
  4075                           ; Regs used in _nrf24l01GetPipe: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4076                           ;nrf24l01GetPipe@name stored from wreg
  4077  096F  0020               	movlb	0	; select bank0
  4078  0970  00A9               	movwf	nrf24l01GetPipe@name
  4079                           
  4080                           ;main.c: 264: unsigned char pipe = 0;
  4081  0971  01A8               	clrf	nrf24l01GetPipe@pipe
  4082                           
  4083                           ;main.c: 265: unsigned char i = 0;
  4084  0972  01AA               	clrf	nrf24l01GetPipe@i
  4085                           
  4086                           ;main.c: 268: for (i = 0; i < strlen(name); i++){
  4087  0973  01AA               	clrf	nrf24l01GetPipe@i
  4088  0974                     l3481:	
  4089  0974  0829               	movf	nrf24l01GetPipe@name,w
  4090  0975  00A0               	movwf	strlen@s
  4091  0976  3001               	movlw	1
  4092  0977  00A1               	movwf	strlen@s+1
  4093  0978  3197  27A0  3189   	fcall	_strlen
  4094  097B  0020               	movlb	0	; select bank0
  4095  097C  082A               	movf	nrf24l01GetPipe@i,w
  4096  097D  00A6               	movwf	??_nrf24l01GetPipe
  4097  097E  01A7               	clrf	??_nrf24l01GetPipe+1
  4098  097F  0821               	movf	?_strlen+1,w
  4099  0980  0227               	subwf	??_nrf24l01GetPipe+1,w
  4100  0981  1D03               	skipz
  4101  0982  2985               	goto	u3505
  4102  0983  0820               	movf	?_strlen,w
  4103  0984  0226               	subwf	??_nrf24l01GetPipe,w
  4104  0985                     u3505:	
  4105  0985  1803               	btfsc	3,0
  4106  0986  2997               	goto	l3483
  4107                           
  4108                           ;main.c: 269: pipe+= name[i];
  4109  0987  082A               	movf	nrf24l01GetPipe@i,w
  4110  0988  0729               	addwf	nrf24l01GetPipe@name,w
  4111  0989  00A6               	movwf	??_nrf24l01GetPipe
  4112  098A  0826               	movf	??_nrf24l01GetPipe,w
  4113  098B  0086               	movwf	6
  4114  098C  3001               	movlw	1	; select bank2/3
  4115  098D  0087               	movwf	7
  4116  098E  0801               	movf	1,w
  4117  098F  00A7               	movwf	??_nrf24l01GetPipe+1
  4118  0990  0827               	movf	??_nrf24l01GetPipe+1,w
  4119  0991  07A8               	addwf	nrf24l01GetPipe@pipe,f
  4120  0992  3001               	movlw	1
  4121  0993  00A6               	movwf	??_nrf24l01GetPipe
  4122  0994  0826               	movf	??_nrf24l01GetPipe,w
  4123  0995  07AA               	addwf	nrf24l01GetPipe@i,f
  4124  0996  2974               	goto	l3481
  4125  0997                     l3483:	
  4126                           
  4127                           ;main.c: 270: };main.c: 272: return (unsigned) pipe % 6;
  4128  0997  3006               	movlw	6
  4129  0998  00A0               	movwf	___lwmod@divisor
  4130  0999  3000               	movlw	0
  4131  099A  00A1               	movwf	___lwmod@divisor+1
  4132  099B  0828               	movf	nrf24l01GetPipe@pipe,w
  4133  099C  00A6               	movwf	??_nrf24l01GetPipe
  4134  099D  01A7               	clrf	??_nrf24l01GetPipe+1
  4135  099E  0826               	movf	??_nrf24l01GetPipe,w
  4136  099F  00A2               	movwf	___lwmod@dividend
  4137  09A0  0827               	movf	??_nrf24l01GetPipe+1,w
  4138  09A1  00A3               	movwf	___lwmod@dividend+1
  4139  09A2  3188  20AF         	fcall	___lwmod
  4140  09A4  0020               	movlb	0	; select bank0
  4141  09A5  0820               	movf	?___lwmod,w
  4142  09A6  0008               	return
  4143  09A7                     __end_of_nrf24l01GetPipe:	
  4144                           
  4145                           	psect	text7
  4146  08AF                     __ptext7:	
  4147 ;; *************** function ___lwmod *****************
  4148 ;; Defined at:
  4149 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\lwmod.c"
  4150 ;; Parameters:    Size  Location     Type
  4151 ;;  divisor         2    0[BANK0 ] unsigned int 
  4152 ;;  dividend        2    2[BANK0 ] unsigned int 
  4153 ;; Auto vars:     Size  Location     Type
  4154 ;;  counter         1    5[BANK0 ] unsigned char 
  4155 ;; Return value:  Size  Location     Type
  4156 ;;                  2    0[BANK0 ] unsigned int 
  4157 ;; Registers used:
  4158 ;;		wreg, status,2, status,0
  4159 ;; Tracked objects:
  4160 ;;		On entry : 0/0
  4161 ;;		On exit  : 0/0
  4162 ;;		Unchanged: 0/0
  4163 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4164 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4165 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4166 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4167 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4168 ;;Total ram usage:        6 bytes
  4169 ;; Hardware stack levels used:    1
  4170 ;; Hardware stack levels required when called:    7
  4171 ;; This function calls:
  4172 ;;		Nothing
  4173 ;; This function is called by:
  4174 ;;		_nrf24l01GetPipe
  4175 ;; This function uses a non-reentrant model
  4176 ;;
  4177                           
  4178                           
  4179                           ;psect for function ___lwmod
  4180  08AF                     ___lwmod:	
  4181                           
  4182                           ;incstack = 0
  4183                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  4184  08AF  0020               	movlb	0	; select bank0
  4185  08B0  0820               	movf	___lwmod@divisor,w
  4186  08B1  0421               	iorwf	___lwmod@divisor+1,w
  4187  08B2  1903               	btfsc	3,2
  4188  08B3  28D7               	goto	l3373
  4189  08B4  01A5               	clrf	___lwmod@counter
  4190  08B5  0AA5               	incf	___lwmod@counter,f
  4191  08B6                     l3363:	
  4192  08B6  1BA1               	btfsc	___lwmod@divisor+1,7
  4193  08B7  28C2               	goto	l3365
  4194  08B8  3001               	movlw	1
  4195  08B9                     u3405:	
  4196  08B9  35A0               	lslf	___lwmod@divisor,f
  4197  08BA  0DA1               	rlf	___lwmod@divisor+1,f
  4198  08BB  0B89               	decfsz	9,f
  4199  08BC  28B9               	goto	u3405
  4200  08BD  3001               	movlw	1
  4201  08BE  00A4               	movwf	??___lwmod
  4202  08BF  0824               	movf	??___lwmod,w
  4203  08C0  07A5               	addwf	___lwmod@counter,f
  4204  08C1  28B6               	goto	l3363
  4205  08C2                     l3365:	
  4206  08C2  0821               	movf	___lwmod@divisor+1,w
  4207  08C3  0223               	subwf	___lwmod@dividend+1,w
  4208  08C4  1D03               	skipz
  4209  08C5  28C8               	goto	u3425
  4210  08C6  0820               	movf	___lwmod@divisor,w
  4211  08C7  0222               	subwf	___lwmod@dividend,w
  4212  08C8                     u3425:	
  4213  08C8  1C03               	skipc
  4214  08C9  28CE               	goto	l3369
  4215  08CA  0820               	movf	___lwmod@divisor,w
  4216  08CB  02A2               	subwf	___lwmod@dividend,f
  4217  08CC  0821               	movf	___lwmod@divisor+1,w
  4218  08CD  3BA3               	subwfb	___lwmod@dividend+1,f
  4219  08CE                     l3369:	
  4220  08CE  3001               	movlw	1
  4221  08CF                     u3435:	
  4222  08CF  36A1               	lsrf	___lwmod@divisor+1,f
  4223  08D0  0CA0               	rrf	___lwmod@divisor,f
  4224  08D1  0B89               	decfsz	9,f
  4225  08D2  28CF               	goto	u3435
  4226  08D3  3001               	movlw	1
  4227  08D4  02A5               	subwf	___lwmod@counter,f
  4228  08D5  1D03               	btfss	3,2
  4229  08D6  28C2               	goto	l3365
  4230  08D7                     l3373:	
  4231  08D7  0823               	movf	___lwmod@dividend+1,w
  4232  08D8  00A1               	movwf	?___lwmod+1
  4233  08D9  0822               	movf	___lwmod@dividend,w
  4234  08DA  00A0               	movwf	?___lwmod
  4235  08DB  0008               	return
  4236  08DC                     __end_of___lwmod:	
  4237                           
  4238                           	psect	text8
  4239  01FA                     __ptext8:	
  4240 ;; *************** function _loop *****************
  4241 ;; Defined at:
  4242 ;;		line 197 in file "main.c"
  4243 ;; Parameters:    Size  Location     Type
  4244 ;;		None
  4245 ;; Auto vars:     Size  Location     Type
  4246 ;;  packet         33   15[BANK2 ] struct .
  4247 ;;  ta              3    3[BANK2 ] float 
  4248 ;;  vt              3    0[BANK2 ] float 
  4249 ;;  rfSetup         1   14[BANK2 ] struct .
  4250 ;; Return value:  Size  Location     Type
  4251 ;;                  1    wreg      void 
  4252 ;; Registers used:
  4253 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4254 ;; Tracked objects:
  4255 ;;		On entry : 0/0
  4256 ;;		On exit  : 0/0
  4257 ;;		Unchanged: 0/0
  4258 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4259 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4260 ;;      Locals:         0       0       0      48       0       0       0       0       0       0       0       0       
      +0       0
  4261 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  4262 ;;      Totals:         0       0       1      48       0       0       0       0       0       0       0       0       
      +0       0
  4263 ;;Total ram usage:       49 bytes
  4264 ;; Hardware stack levels used:    1
  4265 ;; Hardware stack levels required when called:   15
  4266 ;; This function calls:
  4267 ;;		___awtoft
  4268 ;;		___ftadd
  4269 ;;		___ftdiv
  4270 ;;		___ftmul
  4271 ;;		___ftneg
  4272 ;;		___lbtoft
  4273 ;;		_checkTXPower
  4274 ;;		_getADCValue
  4275 ;;		_nrf24l01Send
  4276 ;;		_nrf24l01SendPacket
  4277 ;;		_setMessage
  4278 ;;		_sleep
  4279 ;; This function is called by:
  4280 ;;		_main
  4281 ;; This function uses a non-reentrant model
  4282 ;;
  4283                           
  4284                           
  4285                           ;psect for function _loop
  4286  01FA                     _loop:	
  4287                           
  4288                           ;main.c: 200: nrf24l01Packet_t packet;;main.c: 203: setMessage(&packet, "DBG", counter);
  4289                           
  4290                           ;incstack = 0
  4291                           ; Regs used in _loop: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4292  01FA  302F               	movlw	low loop@packet
  4293  01FB  0021               	movlb	1	; select bank1
  4294  01FC  00B9               	movwf	setMessage@packet^(0+128)
  4295  01FD  3001               	movlw	high loop@packet
  4296  01FE  00BA               	movwf	(setMessage@packet+1)^(0+128)
  4297  01FF  3031               	movlw	low (STR_3| (0+32768))
  4298  0200  00BB               	movwf	setMessage@topic^(0+128)
  4299  0201  3098               	movlw	high (STR_3| (0+32768))
  4300  0202  00BC               	movwf	(setMessage@topic^(0+128)+1)
  4301  0203  0022               	movlb	2	; select bank2
  4302  0204  0850               	movf	_counter^(0+256),w
  4303  0205  0021               	movlb	1	; select bank1
  4304  0206  00BD               	movwf	setMessage@value^(0+128)
  4305  0207  0022               	movlb	2	; select bank2
  4306  0208  0851               	movf	(_counter+1)^(0+256),w
  4307  0209  0021               	movlb	1	; select bank1
  4308  020A  00BE               	movwf	(setMessage@value+1)^(0+128)
  4309  020B  0022               	movlb	2	; select bank2
  4310  020C  0852               	movf	(_counter+2)^(0+256),w
  4311  020D  0021               	movlb	1	; select bank1
  4312  020E  00BF               	movwf	(setMessage@value+2)^(0+128)
  4313  020F  3187  2766  3181   	fcall	_setMessage
  4314                           
  4315                           ;main.c: 204: packet.packetData.ACKRequest = 0;
  4316  0212  0022               	movlb	2	; select bank2
  4317  0213  112F               	bcf	loop@packet^(0+256),2
  4318                           
  4319                           ;main.c: 205: nrf24l01SendPacket(&packet);
  4320  0214  302F               	movlw	low loop@packet
  4321  0215  0020               	movlb	0	; select bank0
  4322  0216  00A7               	movwf	nrf24l01SendPacket@Packet
  4323  0217  3001               	movlw	high loop@packet
  4324  0218  00A8               	movwf	nrf24l01SendPacket@Packet+1
  4325  0219  3186  269A  3181   	fcall	_nrf24l01SendPacket
  4326                           
  4327                           ;main.c: 206: checkTXPower();
  4328  021C  3196  26B7  3181   	fcall	_checkTXPower
  4329                           
  4330                           ;main.c: 207: sleep(2000);
  4331  021F  30D0               	movlw	208
  4332  0220  0020               	movlb	0	; select bank0
  4333  0221  00B2               	movwf	sleep@milliseconds
  4334  0222  3007               	movlw	7
  4335  0223  00B3               	movwf	sleep@milliseconds+1
  4336  0224  318A  221E  3181   	fcall	_sleep
  4337                           
  4338                           ;main.c: 211: FVRCONbits.TSEN = 1;
  4339  0227  0022               	movlb	2	; select bank2
  4340  0228  1697               	bsf	23,5	;volatile
  4341                           
  4342                           ;main.c: 212: float vt = (2.048 - getADCValue(0b111101)) / (FVRCONbits.TSRNG ? 2 : 4);
  4343  0229  1A17               	btfsc	23,4	;volatile
  4344  022A  2A2D               	goto	l3417
  4345  022B  3004               	movlw	4
  4346  022C  2A2E               	goto	L1
  4347  022D                     l3417:	
  4348  022D  3002               	movlw	2
  4349  022E                     L1:	
  4350  022E  00AC               	movwf	_loop$882^(0+256)
  4351  022F  3000               	movlw	0
  4352  0230  00AD               	movwf	(_loop$882^(0+256)+1)
  4353  0231  303D               	movlw	61
  4354  0232  318D  2548  3181   	fcall	_getADCValue
  4355  0235  0020               	movlb	0	; select bank0
  4356  0236  084B               	movf	?_getADCValue,w
  4357  0237  00D7               	movwf	___ftneg@f1
  4358  0238  084C               	movf	?_getADCValue+1,w
  4359  0239  00D8               	movwf	___ftneg@f1+1
  4360  023A  084D               	movf	?_getADCValue+2,w
  4361  023B  00D9               	movwf	___ftneg@f1+2
  4362  023C  3196  266E  3181   	fcall	___ftneg
  4363  023F  0020               	movlb	0	; select bank0
  4364  0240  0857               	movf	?___ftneg,w
  4365  0241  0022               	movlb	2	; select bank2
  4366  0242  00A6               	movwf	_loop$2062^(0+256)
  4367  0243  0020               	movlb	0	; select bank0
  4368  0244  0858               	movf	?___ftneg+1,w
  4369  0245  0022               	movlb	2	; select bank2
  4370  0246  00A7               	movwf	(_loop$2062+1)^(0+256)
  4371  0247  0020               	movlb	0	; select bank0
  4372  0248  0859               	movf	?___ftneg+2,w
  4373  0249  0022               	movlb	2	; select bank2
  4374  024A  00A8               	movwf	(_loop$2062+2)^(0+256)
  4375  024B  082D               	movf	(_loop$882+1)^(0+256),w
  4376  024C  0020               	movlb	0	; select bank0
  4377  024D  00A9               	movwf	___awtoft@c+1
  4378  024E  0022               	movlb	2	; select bank2
  4379  024F  082C               	movf	_loop$882^(0+256),w
  4380  0250  0020               	movlb	0	; select bank0
  4381  0251  00A8               	movwf	___awtoft@c
  4382  0252  3188  201B  3181   	fcall	___awtoft
  4383  0255  0020               	movlb	0	; select bank0
  4384  0256  0828               	movf	?___awtoft,w
  4385  0257  00BB               	movwf	___ftdiv@f2
  4386  0258  0829               	movf	?___awtoft+1,w
  4387  0259  00BC               	movwf	___ftdiv@f2+1
  4388  025A  082A               	movf	?___awtoft+2,w
  4389  025B  00BD               	movwf	___ftdiv@f2+2
  4390  025C  3012               	movlw	18
  4391  025D  00AE               	movwf	___ftadd@f1
  4392  025E  3003               	movlw	3
  4393  025F  00AF               	movwf	___ftadd@f1+1
  4394  0260  3040               	movlw	64
  4395  0261  00B0               	movwf	___ftadd@f1+2
  4396  0262  0022               	movlb	2	; select bank2
  4397  0263  0826               	movf	_loop$2062^(0+256),w
  4398  0264  0020               	movlb	0	; select bank0
  4399  0265  00B1               	movwf	___ftadd@f2
  4400  0266  0022               	movlb	2	; select bank2
  4401  0267  0827               	movf	(_loop$2062+1)^(0+256),w
  4402  0268  0020               	movlb	0	; select bank0
  4403  0269  00B2               	movwf	___ftadd@f2+1
  4404  026A  0022               	movlb	2	; select bank2
  4405  026B  0828               	movf	(_loop$2062+2)^(0+256),w
  4406  026C  0020               	movlb	0	; select bank0
  4407  026D  00B3               	movwf	___ftadd@f2+2
  4408  026E  3184  24B2  3181   	fcall	___ftadd
  4409  0271  0020               	movlb	0	; select bank0
  4410  0272  082E               	movf	?___ftadd,w
  4411  0273  00BE               	movwf	___ftdiv@f1
  4412  0274  082F               	movf	?___ftadd+1,w
  4413  0275  00BF               	movwf	___ftdiv@f1+1
  4414  0276  0830               	movf	?___ftadd+2,w
  4415  0277  00C0               	movwf	___ftdiv@f1+2
  4416  0278  318D  25EE  3181   	fcall	___ftdiv
  4417  027B  0020               	movlb	0	; select bank0
  4418  027C  083B               	movf	?___ftdiv,w
  4419  027D  0022               	movlb	2	; select bank2
  4420  027E  00A0               	movwf	loop@vt^(0+256)
  4421  027F  0020               	movlb	0	; select bank0
  4422  0280  083C               	movf	?___ftdiv+1,w
  4423  0281  0022               	movlb	2	; select bank2
  4424  0282  00A1               	movwf	(loop@vt+1)^(0+256)
  4425  0283  0020               	movlb	0	; select bank0
  4426  0284  083D               	movf	?___ftdiv+2,w
  4427  0285  0022               	movlb	2	; select bank2
  4428  0286  00A2               	movwf	(loop@vt+2)^(0+256)
  4429                           
  4430                           ;main.c: 213: FVRCONbits.TSEN = 0;
  4431  0287  1297               	bcf	23,5	;volatile
  4432                           
  4433                           ;main.c: 221: float ta = (vt / -0.0014) - (0.6063 / -0.0014) - 40 + 14.8;
  4434  0288  30F0               	movlw	240
  4435  0289  0020               	movlb	0	; select bank0
  4436  028A  00AE               	movwf	___ftadd@f1
  4437  028B  30CB               	movlw	203
  4438  028C  00AF               	movwf	___ftadd@f1+1
  4439  028D  3043               	movlw	67
  4440  028E  00B0               	movwf	___ftadd@f1+2
  4441  028F  3080               	movlw	128
  4442  0290  00BB               	movwf	___ftdiv@f2
  4443  0291  30B7               	movlw	183
  4444  0292  00BC               	movwf	___ftdiv@f2+1
  4445  0293  30BA               	movlw	186
  4446  0294  00BD               	movwf	___ftdiv@f2+2
  4447  0295  0022               	movlb	2	; select bank2
  4448  0296  0820               	movf	loop@vt^(0+256),w
  4449  0297  0020               	movlb	0	; select bank0
  4450  0298  00BE               	movwf	___ftdiv@f1
  4451  0299  0022               	movlb	2	; select bank2
  4452  029A  0821               	movf	(loop@vt+1)^(0+256),w
  4453  029B  0020               	movlb	0	; select bank0
  4454  029C  00BF               	movwf	___ftdiv@f1+1
  4455  029D  0022               	movlb	2	; select bank2
  4456  029E  0822               	movf	(loop@vt+2)^(0+256),w
  4457  029F  0020               	movlb	0	; select bank0
  4458  02A0  00C0               	movwf	___ftdiv@f1+2
  4459  02A1  318D  25EE  3181   	fcall	___ftdiv
  4460  02A4  0020               	movlb	0	; select bank0
  4461  02A5  083B               	movf	?___ftdiv,w
  4462  02A6  00B1               	movwf	___ftadd@f2
  4463  02A7  083C               	movf	?___ftdiv+1,w
  4464  02A8  00B2               	movwf	___ftadd@f2+1
  4465  02A9  083D               	movf	?___ftdiv+2,w
  4466  02AA  00B3               	movwf	___ftadd@f2+2
  4467  02AB  3184  24B2  3181   	fcall	___ftadd
  4468  02AE  0020               	movlb	0	; select bank0
  4469  02AF  082E               	movf	?___ftadd,w
  4470  02B0  0022               	movlb	2	; select bank2
  4471  02B1  00A3               	movwf	loop@ta^(0+256)
  4472  02B2  0020               	movlb	0	; select bank0
  4473  02B3  082F               	movf	?___ftadd+1,w
  4474  02B4  0022               	movlb	2	; select bank2
  4475  02B5  00A4               	movwf	(loop@ta+1)^(0+256)
  4476  02B6  0020               	movlb	0	; select bank0
  4477  02B7  0830               	movf	?___ftadd+2,w
  4478  02B8  0022               	movlb	2	; select bank2
  4479  02B9  00A5               	movwf	(loop@ta+2)^(0+256)
  4480                           
  4481                           ;main.c: 223: setMessage(&packet, "TEMP", ta);
  4482  02BA  302F               	movlw	low loop@packet
  4483  02BB  0021               	movlb	1	; select bank1
  4484  02BC  00B9               	movwf	setMessage@packet^(0+128)
  4485  02BD  3001               	movlw	high loop@packet
  4486  02BE  00BA               	movwf	(setMessage@packet+1)^(0+128)
  4487  02BF  301E               	movlw	low (STR_4| (0+32768))
  4488  02C0  00BB               	movwf	setMessage@topic^(0+128)
  4489  02C1  3098               	movlw	high (STR_4| (0+32768))
  4490  02C2  00BC               	movwf	(setMessage@topic^(0+128)+1)
  4491  02C3  0022               	movlb	2	; select bank2
  4492  02C4  0823               	movf	loop@ta^(0+256),w
  4493  02C5  0021               	movlb	1	; select bank1
  4494  02C6  00BD               	movwf	setMessage@value^(0+128)
  4495  02C7  0022               	movlb	2	; select bank2
  4496  02C8  0824               	movf	(loop@ta+1)^(0+256),w
  4497  02C9  0021               	movlb	1	; select bank1
  4498  02CA  00BE               	movwf	(setMessage@value+1)^(0+128)
  4499  02CB  0022               	movlb	2	; select bank2
  4500  02CC  0825               	movf	(loop@ta+2)^(0+256),w
  4501  02CD  0021               	movlb	1	; select bank1
  4502  02CE  00BF               	movwf	(setMessage@value+2)^(0+128)
  4503  02CF  3187  2766  3181   	fcall	_setMessage
  4504                           
  4505                           ;main.c: 224: packet.packetData.ACKRequest = 1;
  4506  02D2  0022               	movlb	2	; select bank2
  4507  02D3  152F               	bsf	loop@packet^(0+256),2
  4508                           
  4509                           ;main.c: 225: nrf24l01SendPacket(&packet);
  4510  02D4  302F               	movlw	low loop@packet
  4511  02D5  0020               	movlb	0	; select bank0
  4512  02D6  00A7               	movwf	nrf24l01SendPacket@Packet
  4513  02D7  3001               	movlw	high loop@packet
  4514  02D8  00A8               	movwf	nrf24l01SendPacket@Packet+1
  4515  02D9  3186  269A  3181   	fcall	_nrf24l01SendPacket
  4516                           
  4517                           ;main.c: 226: checkTXPower();
  4518  02DC  3196  26B7  3181   	fcall	_checkTXPower
  4519                           
  4520                           ;main.c: 227: sleep(2000);
  4521  02DF  30D0               	movlw	208
  4522  02E0  0020               	movlb	0	; select bank0
  4523  02E1  00B2               	movwf	sleep@milliseconds
  4524  02E2  3007               	movlw	7
  4525  02E3  00B3               	movwf	sleep@milliseconds+1
  4526  02E4  318A  221E  3181   	fcall	_sleep
  4527                           
  4528                           ;main.c: 234: ADCON1bits.ADPREF = 0b00;
  4529  02E7  30FC               	movlw	-4
  4530  02E8  0021               	movlb	1	; select bank1
  4531  02E9  059E               	andwf	30,f	;volatile
  4532                           
  4533                           ;main.c: 235: FVRCONbits.ADFVR = 0b10;
  4534  02EA  0022               	movlb	2	; select bank2
  4535  02EB  0817               	movf	23,w	;volatile
  4536  02EC  39FC               	andlw	-4
  4537  02ED  3802               	iorlw	2
  4538  02EE  0097               	movwf	23	;volatile
  4539                           
  4540                           ;main.c: 236: setMessage(&packet, "VBAT", getADCValue(0b000100) * 3.106382978723404);
  4541  02EF  30CF               	movlw	207
  4542  02F0  0020               	movlb	0	; select bank0
  4543  02F1  00D7               	movwf	___ftmul@f1
  4544  02F2  3046               	movlw	70
  4545  02F3  00D8               	movwf	___ftmul@f1+1
  4546  02F4  3040               	movlw	64
  4547  02F5  00D9               	movwf	___ftmul@f1+2
  4548  02F6  3004               	movlw	4
  4549  02F7  318D  2548  3181   	fcall	_getADCValue
  4550  02FA  0020               	movlb	0	; select bank0
  4551  02FB  084B               	movf	?_getADCValue,w
  4552  02FC  00DA               	movwf	___ftmul@f2
  4553  02FD  084C               	movf	?_getADCValue+1,w
  4554  02FE  00DB               	movwf	___ftmul@f2+1
  4555  02FF  084D               	movf	?_getADCValue+2,w
  4556  0300  00DC               	movwf	___ftmul@f2+2
  4557  0301  318E  2697  3181   	fcall	___ftmul
  4558  0304  0020               	movlb	0	; select bank0
  4559  0305  0857               	movf	?___ftmul,w
  4560  0306  0022               	movlb	2	; select bank2
  4561  0307  00A9               	movwf	_loop$2063^(0+256)
  4562  0308  0020               	movlb	0	; select bank0
  4563  0309  0858               	movf	?___ftmul+1,w
  4564  030A  0022               	movlb	2	; select bank2
  4565  030B  00AA               	movwf	(_loop$2063+1)^(0+256)
  4566  030C  0020               	movlb	0	; select bank0
  4567  030D  0859               	movf	?___ftmul+2,w
  4568  030E  0022               	movlb	2	; select bank2
  4569  030F  00AB               	movwf	(_loop$2063+2)^(0+256)
  4570                           
  4571                           ;main.c: 236: setMessage(&packet, "VBAT", getADCValue(0b000100) * 3.106382978723404);
  4572  0310  302F               	movlw	low loop@packet
  4573  0311  0021               	movlb	1	; select bank1
  4574  0312  00B9               	movwf	setMessage@packet^(0+128)
  4575  0313  3001               	movlw	high loop@packet
  4576  0314  00BA               	movwf	(setMessage@packet+1)^(0+128)
  4577  0315  3023               	movlw	low (STR_5| (0+32768))
  4578  0316  00BB               	movwf	setMessage@topic^(0+128)
  4579  0317  3098               	movlw	high (STR_5| (0+32768))
  4580  0318  00BC               	movwf	(setMessage@topic^(0+128)+1)
  4581  0319  0022               	movlb	2	; select bank2
  4582  031A  0829               	movf	_loop$2063^(0+256),w
  4583  031B  0021               	movlb	1	; select bank1
  4584  031C  00BD               	movwf	setMessage@value^(0+128)
  4585  031D  0022               	movlb	2	; select bank2
  4586  031E  082A               	movf	(_loop$2063+1)^(0+256),w
  4587  031F  0021               	movlb	1	; select bank1
  4588  0320  00BE               	movwf	(setMessage@value+1)^(0+128)
  4589  0321  0022               	movlb	2	; select bank2
  4590  0322  082B               	movf	(_loop$2063+2)^(0+256),w
  4591  0323  0021               	movlb	1	; select bank1
  4592  0324  00BF               	movwf	(setMessage@value+2)^(0+128)
  4593  0325  3187  2766  3181   	fcall	_setMessage
  4594                           
  4595                           ;main.c: 237: packet.packetData.ACKRequest = 1;
  4596  0328  0022               	movlb	2	; select bank2
  4597  0329  152F               	bsf	loop@packet^(0+256),2
  4598                           
  4599                           ;main.c: 238: nrf24l01SendPacket(&packet);
  4600  032A  302F               	movlw	low loop@packet
  4601  032B  0020               	movlb	0	; select bank0
  4602  032C  00A7               	movwf	nrf24l01SendPacket@Packet
  4603  032D  3001               	movlw	high loop@packet
  4604  032E  00A8               	movwf	nrf24l01SendPacket@Packet+1
  4605  032F  3186  269A  3181   	fcall	_nrf24l01SendPacket
  4606                           
  4607                           ;main.c: 239: checkTXPower();
  4608  0332  3196  26B7  3181   	fcall	_checkTXPower
  4609                           
  4610                           ;main.c: 240: sleep(2000);
  4611  0335  30D0               	movlw	208
  4612  0336  0020               	movlb	0	; select bank0
  4613  0337  00B2               	movwf	sleep@milliseconds
  4614  0338  3007               	movlw	7
  4615  0339  00B3               	movwf	sleep@milliseconds+1
  4616  033A  318A  221E  3181   	fcall	_sleep
  4617                           
  4618                           ;main.c: 243: setMessage(&packet, "ANC3mV", getADCValue(0b010011));
  4619  033D  302F               	movlw	low loop@packet
  4620  033E  0021               	movlb	1	; select bank1
  4621  033F  00B9               	movwf	setMessage@packet^(0+128)
  4622  0340  3001               	movlw	high loop@packet
  4623  0341  00BA               	movwf	(setMessage@packet+1)^(0+128)
  4624  0342  300C               	movlw	low (STR_6| (0+32768))
  4625  0343  00BB               	movwf	setMessage@topic^(0+128)
  4626  0344  3098               	movlw	high (STR_6| (0+32768))
  4627  0345  00BC               	movwf	(setMessage@topic^(0+128)+1)
  4628  0346  3013               	movlw	19
  4629  0347  318D  2548  3181   	fcall	_getADCValue
  4630  034A  0020               	movlb	0	; select bank0
  4631  034B  084B               	movf	?_getADCValue,w
  4632  034C  0021               	movlb	1	; select bank1
  4633  034D  00BD               	movwf	setMessage@value^(0+128)
  4634  034E  0020               	movlb	0	; select bank0
  4635  034F  084C               	movf	?_getADCValue+1,w
  4636  0350  0021               	movlb	1	; select bank1
  4637  0351  00BE               	movwf	(setMessage@value+1)^(0+128)
  4638  0352  0020               	movlb	0	; select bank0
  4639  0353  084D               	movf	?_getADCValue+2,w
  4640  0354  0021               	movlb	1	; select bank1
  4641  0355  00BF               	movwf	(setMessage@value+2)^(0+128)
  4642  0356  3187  2766  3181   	fcall	_setMessage
  4643                           
  4644                           ;main.c: 244: packet.packetData.ACKRequest = 1;
  4645  0359  0022               	movlb	2	; select bank2
  4646  035A  152F               	bsf	loop@packet^(0+256),2
  4647                           
  4648                           ;main.c: 245: nrf24l01SendPacket(&packet);
  4649  035B  302F               	movlw	low loop@packet
  4650  035C  0020               	movlb	0	; select bank0
  4651  035D  00A7               	movwf	nrf24l01SendPacket@Packet
  4652  035E  3001               	movlw	high loop@packet
  4653  035F  00A8               	movwf	nrf24l01SendPacket@Packet+1
  4654  0360  3186  269A  3181   	fcall	_nrf24l01SendPacket
  4655                           
  4656                           ;main.c: 246: checkTXPower();
  4657  0363  3196  26B7  3181   	fcall	_checkTXPower
  4658                           
  4659                           ;main.c: 247: sleep(2000);
  4660  0366  30D0               	movlw	208
  4661  0367  0020               	movlb	0	; select bank0
  4662  0368  00B2               	movwf	sleep@milliseconds
  4663  0369  3007               	movlw	7
  4664  036A  00B3               	movwf	sleep@milliseconds+1
  4665  036B  318A  221E  3181   	fcall	_sleep
  4666                           
  4667                           ;main.c: 250: n_RF_SETUP_t rfSetup;;main.c: 251: rfSetup.byte = nrf24l01Send((unsigned) 
      +                          0b00000000 | (unsigned) 0x06, 0);
  4668  036E  0020               	movlb	0	; select bank0
  4669  036F  01A0               	clrf	nrf24l01Send@data
  4670  0370  3006               	movlw	6
  4671  0371  3197  27BF  3181   	fcall	_nrf24l01Send
  4672  0374  0021               	movlb	1	; select bank1
  4673  0375  00C3               	movwf	??_loop^(0+128)
  4674  0376  0843               	movf	??_loop^(0+128),w
  4675  0377  0022               	movlb	2	; select bank2
  4676  0378  00AE               	movwf	loop@rfSetup^(0+256)
  4677                           
  4678                           ;main.c: 253: setMessage(&packet, "RFPWR", rfSetup.RF_PWR);
  4679  0379  302F               	movlw	low loop@packet
  4680  037A  0021               	movlb	1	; select bank1
  4681  037B  00B9               	movwf	setMessage@packet^(0+128)
  4682  037C  3001               	movlw	high loop@packet
  4683  037D  00BA               	movwf	(setMessage@packet+1)^(0+128)
  4684  037E  3013               	movlw	low (STR_7| (0+32768))
  4685  037F  00BB               	movwf	setMessage@topic^(0+128)
  4686  0380  3098               	movlw	high (STR_7| (0+32768))
  4687  0381  00BC               	movwf	(setMessage@topic^(0+128)+1)
  4688  0382  0022               	movlb	2	; select bank2
  4689  0383  0C2E               	rrf	loop@rfSetup^(0+256),w
  4690  0384  3903               	andlw	3
  4691  0385  3188  2000  3181   	fcall	___lbtoft
  4692  0388  0020               	movlb	0	; select bank0
  4693  0389  0828               	movf	?___lbtoft,w
  4694  038A  0021               	movlb	1	; select bank1
  4695  038B  00BD               	movwf	setMessage@value^(0+128)
  4696  038C  0020               	movlb	0	; select bank0
  4697  038D  0829               	movf	?___lbtoft+1,w
  4698  038E  0021               	movlb	1	; select bank1
  4699  038F  00BE               	movwf	(setMessage@value+1)^(0+128)
  4700  0390  0020               	movlb	0	; select bank0
  4701  0391  082A               	movf	?___lbtoft+2,w
  4702  0392  0021               	movlb	1	; select bank1
  4703  0393  00BF               	movwf	(setMessage@value+2)^(0+128)
  4704  0394  3187  2766  3181   	fcall	_setMessage
  4705                           
  4706                           ;main.c: 254: packet.packetData.ACKRequest = 1;
  4707  0397  0022               	movlb	2	; select bank2
  4708  0398  152F               	bsf	loop@packet^(0+256),2
  4709                           
  4710                           ;main.c: 255: nrf24l01SendPacket(&packet);
  4711  0399  302F               	movlw	low loop@packet
  4712  039A  0020               	movlb	0	; select bank0
  4713  039B  00A7               	movwf	nrf24l01SendPacket@Packet
  4714  039C  3001               	movlw	high loop@packet
  4715  039D  00A8               	movwf	nrf24l01SendPacket@Packet+1
  4716  039E  3186  269A  3181   	fcall	_nrf24l01SendPacket
  4717                           
  4718                           ;main.c: 256: checkTXPower();
  4719  03A1  3196  26B7  3181   	fcall	_checkTXPower
  4720                           
  4721                           ;main.c: 257: sleep(2000);
  4722  03A4  30D0               	movlw	208
  4723  03A5  0020               	movlb	0	; select bank0
  4724  03A6  00B2               	movwf	sleep@milliseconds
  4725  03A7  3007               	movlw	7
  4726  03A8  00B3               	movwf	sleep@milliseconds+1
  4727  03A9  318A  221E         	fcall	_sleep
  4728  03AB  0008               	return
  4729  03AC                     __end_of_loop:	
  4730                           
  4731                           	psect	text9
  4732  0A1E                     __ptext9:	
  4733 ;; *************** function _sleep *****************
  4734 ;; Defined at:
  4735 ;;		line 72 in file "main.c"
  4736 ;; Parameters:    Size  Location     Type
  4737 ;;  milliseconds    2   18[BANK0 ] unsigned int 
  4738 ;; Auto vars:     Size  Location     Type
  4739 ;;		None
  4740 ;; Return value:  Size  Location     Type
  4741 ;;                  1    wreg      void 
  4742 ;; Registers used:
  4743 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4744 ;; Tracked objects:
  4745 ;;		On entry : 0/0
  4746 ;;		On exit  : 0/0
  4747 ;;		Unchanged: 0/0
  4748 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4749 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4750 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4751 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4752 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4753 ;;Total ram usage:        2 bytes
  4754 ;; Hardware stack levels used:    1
  4755 ;; Hardware stack levels required when called:   14
  4756 ;; This function calls:
  4757 ;;		___lwdiv
  4758 ;;		_doWDTSleep
  4759 ;;		_handleRXData
  4760 ;;		_nrf24l01SetRXMode
  4761 ;; This function is called by:
  4762 ;;		_loop
  4763 ;;		_main
  4764 ;; This function uses a non-reentrant model
  4765 ;;
  4766                           
  4767                           
  4768                           ;psect for function _sleep
  4769  0A1E                     _sleep:	
  4770                           
  4771                           ;main.c: 75: if (!milliseconds){
  4772                           
  4773                           ;incstack = 0
  4774                           ; Regs used in _sleep: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4775  0A1E  0020               	movlb	0	; select bank0
  4776  0A1F  0832               	movf	sleep@milliseconds,w
  4777  0A20  0433               	iorwf	sleep@milliseconds+1,w
  4778  0A21  1D03               	btfss	3,2
  4779  0A22  2A27               	goto	l3121
  4780                           
  4781                           ;main.c: 76: doWDTSleep(0b00000);
  4782  0A23  3000               	movlw	0
  4783  0A24  3196  26CB         	fcall	_doWDTSleep
  4784                           
  4785                           ;main.c: 77: return;
  4786  0A26  0008               	return
  4787  0A27                     l3121:	
  4788                           
  4789                           ;main.c: 78: };main.c: 83: milliseconds = (unsigned int) (milliseconds / (256 + 8));
  4790  0A27  3008               	movlw	8
  4791  0A28  0020               	movlb	0	; select bank0
  4792  0A29  00A0               	movwf	___lwdiv@divisor
  4793  0A2A  3001               	movlw	1
  4794  0A2B  00A1               	movwf	___lwdiv@divisor+1
  4795  0A2C  0833               	movf	sleep@milliseconds+1,w
  4796  0A2D  00A3               	movwf	___lwdiv@dividend+1
  4797  0A2E  0832               	movf	sleep@milliseconds,w
  4798  0A2F  00A2               	movwf	___lwdiv@dividend
  4799  0A30  3189  213A  318A   	fcall	___lwdiv
  4800  0A33  0020               	movlb	0	; select bank0
  4801  0A34  0821               	movf	?___lwdiv+1,w
  4802  0A35  00B3               	movwf	sleep@milliseconds+1
  4803  0A36  0820               	movf	?___lwdiv,w
  4804  0A37  00B2               	movwf	sleep@milliseconds
  4805                           
  4806                           ;main.c: 86: milliseconds++;
  4807  0A38  3001               	movlw	1
  4808  0A39  07B2               	addwf	sleep@milliseconds,f
  4809  0A3A  3000               	movlw	0
  4810  0A3B  3DB3               	addwfc	sleep@milliseconds+1,f
  4811  0A3C                     l3133:	
  4812                           ;main.c: 89: while (--milliseconds){
  4813                           
  4814  0A3C  3001               	movlw	1
  4815  0A3D  0020               	movlb	0	; select bank0
  4816  0A3E  02B2               	subwf	sleep@milliseconds,f
  4817  0A3F  3000               	movlw	0
  4818  0A40  3BB3               	subwfb	sleep@milliseconds+1,f
  4819  0A41  0832               	movf	sleep@milliseconds,w
  4820  0A42  0433               	iorwf	sleep@milliseconds+1,w
  4821  0A43  1903               	btfsc	3,2
  4822  0A44  0008               	return
  4823                           
  4824                           ;main.c: 92: nrf24l01SetRXMode(1);
  4825  0A45  3001               	movlw	1
  4826  0A46  318B  231C  318A   	fcall	_nrf24l01SetRXMode
  4827                           
  4828                           ;main.c: 95: doWDTSleep(3);
  4829  0A49  3003               	movlw	3
  4830  0A4A  3196  26CB  318A   	fcall	_doWDTSleep
  4831                           
  4832                           ;main.c: 98: nrf24l01SetRXMode(0);
  4833  0A4D  3000               	movlw	0
  4834  0A4E  318B  231C  318A   	fcall	_nrf24l01SetRXMode
  4835                           
  4836                           ;main.c: 101: if (nrf24l01.RXPending){
  4837  0A51  1CFD               	btfss	_nrf24l01,1	;volatile
  4838  0A52  2A56               	goto	l3131
  4839                           
  4840                           ;main.c: 102: handleRXData();
  4841  0A53  3196  26A5  318A   	fcall	_handleRXData
  4842  0A56                     l3131:	
  4843                           
  4844                           ;main.c: 103: };main.c: 106: doWDTSleep(0b01000);
  4845  0A56  3008               	movlw	8
  4846  0A57  3196  26CB  318A   	fcall	_doWDTSleep
  4847  0A5A  2A3C               	goto	l3133
  4848  0A5B                     __end_of_sleep:	
  4849                           
  4850                           	psect	text10
  4851  16A5                     __ptext10:	
  4852 ;; *************** function _handleRXData *****************
  4853 ;; Defined at:
  4854 ;;		line 36 in file "main.c"
  4855 ;; Parameters:    Size  Location     Type
  4856 ;;		None
  4857 ;; Auto vars:     Size  Location     Type
  4858 ;;  RXPacket        1   17[BANK0 ] PTR struct .
  4859 ;;		 -> RXPacket(33), 
  4860 ;; Return value:  Size  Location     Type
  4861 ;;                  1    wreg      void 
  4862 ;; Registers used:
  4863 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4864 ;; Tracked objects:
  4865 ;;		On entry : 0/0
  4866 ;;		On exit  : 0/0
  4867 ;;		Unchanged: 0/0
  4868 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4869 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4870 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4871 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4872 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4873 ;;Total ram usage:        2 bytes
  4874 ;; Hardware stack levels used:    1
  4875 ;; Hardware stack levels required when called:   13
  4876 ;; This function calls:
  4877 ;;		_nrf24l01GetRXPacket
  4878 ;;		_nrf24l01SendACK
  4879 ;; This function is called by:
  4880 ;;		_sleep
  4881 ;; This function uses a non-reentrant model
  4882 ;;
  4883                           
  4884                           
  4885                           ;psect for function _handleRXData
  4886  16A5                     _handleRXData:	
  4887                           
  4888                           ;main.c: 38: nrf24l01Packet_t * RXPacket = nrf24l01GetRXPacket();
  4889                           
  4890                           ;incstack = 0
  4891                           ; Regs used in _handleRXData: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4892  16A5  3187  27FE  3196   	fcall	_nrf24l01GetRXPacket
  4893  16A8  0020               	movlb	0	; select bank0
  4894  16A9  00B0               	movwf	??_handleRXData
  4895  16AA  0830               	movf	??_handleRXData,w
  4896  16AB  00B1               	movwf	handleRXData@RXPacket
  4897                           
  4898                           ;main.c: 52: if (RXPacket->packetData.ACKRequest){
  4899  16AC  0831               	movf	handleRXData@RXPacket,w
  4900  16AD  0086               	movwf	6
  4901  16AE  3001               	movlw	1	; select bank2/3
  4902  16AF  0087               	movwf	7
  4903  16B0  1D01               	btfss	1,2
  4904  16B1  2EB5               	goto	l2929
  4905                           
  4906                           ;main.c: 53: nrf24l01SendACK(RXPacket);
  4907  16B2  0831               	movf	handleRXData@RXPacket,w
  4908  16B3  3188  20DC         	fcall	_nrf24l01SendACK
  4909  16B5                     l2929:	
  4910                           
  4911                           ;main.c: 54: };main.c: 68: nrf24l01.RXPending = 0;
  4912  16B5  10FD               	bcf	_nrf24l01,1	;volatile
  4913  16B6  0008               	return
  4914  16B7                     __end_of_handleRXData:	
  4915                           
  4916                           	psect	text11
  4917  08DC                     __ptext11:	
  4918 ;; *************** function _nrf24l01SendACK *****************
  4919 ;; Defined at:
  4920 ;;		line 92 in file "nrf24l01.c"
  4921 ;; Parameters:    Size  Location     Type
  4922 ;;  packet          1    wreg     PTR struct .
  4923 ;;		 -> RXPacket(33), 
  4924 ;; Auto vars:     Size  Location     Type
  4925 ;;  packet          1   15[BANK0 ] PTR struct .
  4926 ;;		 -> RXPacket(33), 
  4927 ;; Return value:  Size  Location     Type
  4928 ;;                  1    wreg      void 
  4929 ;; Registers used:
  4930 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4931 ;; Tracked objects:
  4932 ;;		On entry : 0/0
  4933 ;;		On exit  : 0/0
  4934 ;;		Unchanged: 0/0
  4935 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4936 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4937 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4938 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4939 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4940 ;;Total ram usage:        2 bytes
  4941 ;; Hardware stack levels used:    1
  4942 ;; Hardware stack levels required when called:   12
  4943 ;; This function calls:
  4944 ;;		_nrf24l01SendPacket
  4945 ;;		_nrf24l01SetTXPipe
  4946 ;; This function is called by:
  4947 ;;		_handleRXData
  4948 ;; This function uses a non-reentrant model
  4949 ;;
  4950                           
  4951                           
  4952                           ;psect for function _nrf24l01SendACK
  4953  08DC                     _nrf24l01SendACK:	
  4954                           
  4955                           ;incstack = 0
  4956                           ; Regs used in _nrf24l01SendACK: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4957                           ;nrf24l01SendACK@packet stored from wreg
  4958  08DC  0020               	movlb	0	; select bank0
  4959  08DD  00AF               	movwf	nrf24l01SendACK@packet
  4960                           
  4961                           ;nrf24l01.c: 94: nrf24l01SetTXPipe(packet->packetData.Pipe);
  4962  08DE  082F               	movf	nrf24l01SendACK@packet,w
  4963  08DF  0086               	movwf	6
  4964  08E0  3001               	movlw	1	; select bank2/3
  4965  08E1  0087               	movwf	7
  4966  08E2  0E01               	swapf	1,w
  4967  08E3  3907               	andlw	7
  4968  08E4  318B  2360  3188   	fcall	_nrf24l01SetTXPipe
  4969                           
  4970                           ;nrf24l01.c: 96: packet->packetData.ACKRequest = 0;
  4971  08E7  0020               	movlb	0	; select bank0
  4972  08E8  082F               	movf	nrf24l01SendACK@packet,w
  4973  08E9  0086               	movwf	6
  4974  08EA  3001               	movlw	1	; select bank2/3
  4975  08EB  0087               	movwf	7
  4976  08EC  1101               	bcf	1,2
  4977                           
  4978                           ;nrf24l01.c: 97: packet->packetData.IsACK = 1;
  4979  08ED  082F               	movf	nrf24l01SendACK@packet,w
  4980  08EE  0086               	movwf	6
  4981  08EF  3001               	movlw	1	; select bank2/3
  4982  08F0  0087               	movwf	7
  4983  08F1  1581               	bsf	1,3
  4984                           
  4985                           ;nrf24l01.c: 98: packet->packetData.ACKRPD = packet->packetData.RPD;
  4986  08F2  082F               	movf	nrf24l01SendACK@packet,w
  4987  08F3  0086               	movwf	6
  4988  08F4  3001               	movlw	1	; select bank2/3
  4989  08F5  0087               	movwf	7
  4990  08F6  0801               	movf	1,w
  4991  08F7  3901               	andlw	1
  4992  08F8  00AE               	movwf	??_nrf24l01SendACK
  4993  08F9  082F               	movf	nrf24l01SendACK@packet,w
  4994  08FA  0086               	movwf	6
  4995  08FB  3001               	movlw	1	; select bank2/3
  4996  08FC  0087               	movwf	7
  4997  08FD  0DAE               	rlf	??_nrf24l01SendACK,f
  4998  08FE  0801               	movf	1,w
  4999  08FF  062E               	xorwf	??_nrf24l01SendACK,w
  5000  0900  39FD               	andlw	-3
  5001  0901  062E               	xorwf	??_nrf24l01SendACK,w
  5002  0902  0081               	movwf	1
  5003                           
  5004                           ;nrf24l01.c: 101: nrf24l01SendPacket(packet);
  5005  0903  082F               	movf	nrf24l01SendACK@packet,w
  5006  0904  00A7               	movwf	nrf24l01SendPacket@Packet
  5007  0905  3001               	movlw	1
  5008  0906  00A8               	movwf	nrf24l01SendPacket@Packet+1
  5009  0907  3186  269A         	fcall	_nrf24l01SendPacket
  5010  0909  0008               	return
  5011  090A                     __end_of_nrf24l01SendACK:	
  5012                           
  5013                           	psect	text12
  5014  0B60                     __ptext12:	
  5015 ;; *************** function _nrf24l01SetTXPipe *****************
  5016 ;; Defined at:
  5017 ;;		line 314 in file "nrf24l01.c"
  5018 ;; Parameters:    Size  Location     Type
  5019 ;;  pipe            1    wreg     unsigned char 
  5020 ;; Auto vars:     Size  Location     Type
  5021 ;;  pipe            1    6[BANK0 ] unsigned char 
  5022 ;; Return value:  Size  Location     Type
  5023 ;;                  1    wreg      void 
  5024 ;; Registers used:
  5025 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  5026 ;; Tracked objects:
  5027 ;;		On entry : 0/0
  5028 ;;		On exit  : 0/0
  5029 ;;		Unchanged: 0/0
  5030 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5031 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5032 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5033 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5034 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5035 ;;Total ram usage:        3 bytes
  5036 ;; Hardware stack levels used:    1
  5037 ;; Hardware stack levels required when called:    9
  5038 ;; This function calls:
  5039 ;;		___bmul
  5040 ;;		_nrf24l01SPIEnd
  5041 ;;		_nrf24l01SPISend
  5042 ;;		_nrf24l01SPIStart
  5043 ;; This function is called by:
  5044 ;;		_main
  5045 ;;		_nrf24l01SendACK
  5046 ;;		_nrf24l01InitRegisters
  5047 ;; This function uses a non-reentrant model
  5048 ;;
  5049                           
  5050                           
  5051                           ;psect for function _nrf24l01SetTXPipe
  5052  0B60                     _nrf24l01SetTXPipe:	
  5053                           
  5054                           ;incstack = 0
  5055                           ; Regs used in _nrf24l01SetTXPipe: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  5056                           ;nrf24l01SetTXPipe@pipe stored from wreg
  5057  0B60  0020               	movlb	0	; select bank0
  5058  0B61  00A6               	movwf	nrf24l01SetTXPipe@pipe
  5059                           
  5060                           ;nrf24l01.c: 317: nrf24l01SPIStart();
  5061  0B62  3196  2666  318B   	fcall	_nrf24l01SPIStart
  5062                           
  5063                           ;nrf24l01.c: 318: nrf24l01SPISend((unsigned) 0b00100000 | (unsigned) 0x10);
  5064  0B65  3030               	movlw	48
  5065  0B66  3196  2677  318B   	fcall	_nrf24l01SPISend
  5066                           
  5067                           ;nrf24l01.c: 319: nrf24l01SPISend(n_ADDRESS_P0[4] + (unsigned) (pipe * n_ADDRESS_MUL));
  5068  0B69  301D               	movlw	low ((_n_ADDRESS_P0+4)| (0+32768))
  5069  0B6A  0084               	movwf	4
  5070  0B6B  3098               	movlw	high ((_n_ADDRESS_P0+4)| (0+32768))
  5071  0B6C  0085               	movwf	5
  5072  0B6D  0800               	movf	0,w	;code access
  5073  0B6E  0020               	movlb	0	; select bank0
  5074  0B6F  00A4               	movwf	??_nrf24l01SetTXPipe
  5075  0B70  3000               	movlw	low (_n_ADDRESS_MUL| (0+32768))
  5076  0B71  0084               	movwf	4
  5077  0B72  3098               	movlw	high (_n_ADDRESS_MUL| (0+32768))
  5078  0B73  0085               	movwf	5
  5079  0B74  0800               	movf	0,w	;code access
  5080  0B75  00A5               	movwf	??_nrf24l01SetTXPipe+1
  5081  0B76  0825               	movf	??_nrf24l01SetTXPipe+1,w
  5082  0B77  00A0               	movwf	___bmul@multiplicand
  5083  0B78  0826               	movf	nrf24l01SetTXPipe@pipe,w
  5084  0B79  3196  2693  318B   	fcall	___bmul
  5085  0B7C  0020               	movlb	0	; select bank0
  5086  0B7D  0724               	addwf	??_nrf24l01SetTXPipe,w
  5087  0B7E  3196  2677  318B   	fcall	_nrf24l01SPISend
  5088                           
  5089                           ;nrf24l01.c: 320: nrf24l01SPISend(n_ADDRESS_P0[3]);
  5090  0B81  301C               	movlw	low ((_n_ADDRESS_P0+3)| (0+32768))
  5091  0B82  0084               	movwf	4
  5092  0B83  3098               	movlw	high ((_n_ADDRESS_P0+3)| (0+32768))
  5093  0B84  0085               	movwf	5
  5094  0B85  0800               	movf	0,w	;code access
  5095  0B86  3196  2677  318B   	fcall	_nrf24l01SPISend
  5096                           
  5097                           ;nrf24l01.c: 321: nrf24l01SPISend(n_ADDRESS_P0[2]);
  5098  0B89  301B               	movlw	low ((_n_ADDRESS_P0+2)| (0+32768))
  5099  0B8A  0084               	movwf	4
  5100  0B8B  3098               	movlw	high ((_n_ADDRESS_P0+2)| (0+32768))
  5101  0B8C  0085               	movwf	5
  5102  0B8D  0800               	movf	0,w	;code access
  5103  0B8E  3196  2677  318B   	fcall	_nrf24l01SPISend
  5104                           
  5105                           ;nrf24l01.c: 322: nrf24l01SPISend(n_ADDRESS_P0[1]);
  5106  0B91  301A               	movlw	low ((_n_ADDRESS_P0+1)| (0+32768))
  5107  0B92  0084               	movwf	4
  5108  0B93  3098               	movlw	high ((_n_ADDRESS_P0+1)| (0+32768))
  5109  0B94  0085               	movwf	5
  5110  0B95  0800               	movf	0,w	;code access
  5111  0B96  3196  2677  318B   	fcall	_nrf24l01SPISend
  5112                           
  5113                           ;nrf24l01.c: 323: nrf24l01SPISend(n_ADDRESS_P0[0]);
  5114  0B99  3019               	movlw	low (_n_ADDRESS_P0| (0+32768))
  5115  0B9A  0084               	movwf	4
  5116  0B9B  3098               	movlw	high (_n_ADDRESS_P0| (0+32768))
  5117  0B9C  0085               	movwf	5
  5118  0B9D  0800               	movf	0,w	;code access
  5119  0B9E  3196  2677  318B   	fcall	_nrf24l01SPISend
  5120                           
  5121                           ;nrf24l01.c: 324: nrf24l01SPIEnd();
  5122  0BA1  3196  2657         	fcall	_nrf24l01SPIEnd
  5123  0BA3  0008               	return
  5124  0BA4                     __end_of_nrf24l01SetTXPipe:	
  5125                           
  5126                           	psect	text13
  5127  1693                     __ptext13:	
  5128 ;; *************** function ___bmul *****************
  5129 ;; Defined at:
  5130 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\Umul8.c"
  5131 ;; Parameters:    Size  Location     Type
  5132 ;;  multiplier      1    wreg     unsigned char 
  5133 ;;  multiplicand    1    0[BANK0 ] unsigned char 
  5134 ;; Auto vars:     Size  Location     Type
  5135 ;;  multiplier      1    3[BANK0 ] unsigned char 
  5136 ;;  product         1    2[BANK0 ] unsigned char 
  5137 ;; Return value:  Size  Location     Type
  5138 ;;                  1    wreg      unsigned char 
  5139 ;; Registers used:
  5140 ;;		wreg, status,2, status,0
  5141 ;; Tracked objects:
  5142 ;;		On entry : 0/0
  5143 ;;		On exit  : 0/0
  5144 ;;		Unchanged: 0/0
  5145 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5146 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5147 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5148 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5149 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5150 ;;Total ram usage:        4 bytes
  5151 ;; Hardware stack levels used:    1
  5152 ;; Hardware stack levels required when called:    7
  5153 ;; This function calls:
  5154 ;;		Nothing
  5155 ;; This function is called by:
  5156 ;;		_nrf24l01SetTXPipe
  5157 ;;		_nrf24l01InitRegisters
  5158 ;; This function uses a non-reentrant model
  5159 ;;
  5160                           
  5161                           
  5162                           ;psect for function ___bmul
  5163  1693                     ___bmul:	
  5164                           
  5165                           ;incstack = 0
  5166                           ; Regs used in ___bmul: [wreg+status,2+status,0]
  5167                           ;___bmul@multiplier stored from wreg
  5168  1693  0020               	movlb	0	; select bank0
  5169  1694  00A3               	movwf	___bmul@multiplier
  5170  1695  01A2               	clrf	___bmul@product
  5171  1696                     l2367:	
  5172  1696  1C23               	btfss	___bmul@multiplier,0
  5173  1697  2E9C               	goto	l2371
  5174  1698  0820               	movf	___bmul@multiplicand,w
  5175  1699  00A1               	movwf	??___bmul
  5176  169A  0821               	movf	??___bmul,w
  5177  169B  07A2               	addwf	___bmul@product,f
  5178  169C                     l2371:	
  5179  169C  1003               	clrc
  5180  169D  0DA0               	rlf	___bmul@multiplicand,f
  5181  169E  1003               	clrc
  5182  169F  0CA3               	rrf	___bmul@multiplier,f
  5183  16A0  0823               	movf	___bmul@multiplier,w
  5184  16A1  1D03               	btfss	3,2
  5185  16A2  2E96               	goto	l2367
  5186  16A3  0822               	movf	___bmul@product,w
  5187  16A4  0008               	return
  5188  16A5                     __end_of___bmul:	
  5189                           
  5190                           	psect	text14
  5191  069A                     __ptext14:	
  5192 ;; *************** function _nrf24l01SendPacket *****************
  5193 ;; Defined at:
  5194 ;;		line 178 in file "nrf24l01.c"
  5195 ;; Parameters:    Size  Location     Type
  5196 ;;  Packet          2    7[BANK0 ] PTR struct .
  5197 ;;		 -> RXPacket(33), main@packet(33), loop@packet(33), 
  5198 ;; Auto vars:     Size  Location     Type
  5199 ;;  i               1   13[BANK0 ] unsigned char 
  5200 ;; Return value:  Size  Location     Type
  5201 ;;                  1    wreg      void 
  5202 ;; Registers used:
  5203 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5204 ;; Tracked objects:
  5205 ;;		On entry : 0/0
  5206 ;;		On exit  : 0/0
  5207 ;;		Unchanged: 0/0
  5208 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5209 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5210 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5211 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5212 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5213 ;;Total ram usage:        7 bytes
  5214 ;; Hardware stack levels used:    1
  5215 ;; Hardware stack levels required when called:   11
  5216 ;; This function calls:
  5217 ;;		_enableInterrupts
  5218 ;;		_nrf24l01CEHigh
  5219 ;;		_nrf24l01CELow
  5220 ;;		_nrf24l01ChangeTXPower
  5221 ;;		_nrf24l01SPIEnd
  5222 ;;		_nrf24l01SPISend
  5223 ;;		_nrf24l01SPIStart
  5224 ;;		_nrf24l01SetRXMode
  5225 ;;		_strlen
  5226 ;; This function is called by:
  5227 ;;		_loop
  5228 ;;		_main
  5229 ;;		_nrf24l01SendACK
  5230 ;; This function uses a non-reentrant model
  5231 ;;
  5232                           
  5233                           
  5234                           ;psect for function _nrf24l01SendPacket
  5235  069A                     _nrf24l01SendPacket:	
  5236  069A                     l303:	
  5237                           ;incstack = 0
  5238                           ; Regs used in _nrf24l01SendPacket: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5239                           ;nrf24l01.c: 181: unsigned char i;;nrf24l01.c: 185: RESEND:
  5240                           
  5241                           
  5242                           ;nrf24l01.c: 188: i = 0xFF;
  5243  069A  30FF               	movlw	255
  5244  069B  0020               	movlb	0	; select bank0
  5245  069C  00A9               	movwf	??_nrf24l01SendPacket
  5246  069D  0829               	movf	??_nrf24l01SendPacket,w
  5247  069E  00AD               	movwf	nrf24l01SendPacket@i
  5248  069F                     l2437:	
  5249                           ;nrf24l01.c: 189: while (nrf24l01.TXBusy){
  5250                           
  5251  069F  1C7D               	btfss	_nrf24l01,0	;volatile
  5252  06A0  2EAB               	goto	l2439
  5253                           
  5254                           ;nrf24l01.c: 191: if (!--i) {
  5255  06A1  3001               	movlw	1
  5256  06A2  0020               	movlb	0	; select bank0
  5257  06A3  02AD               	subwf	nrf24l01SendPacket@i,f
  5258  06A4  1903               	btfsc	3,2
  5259  06A5  2E9A               	goto	l303
  5260                           
  5261                           ;nrf24l01.c: 193: };nrf24l01.c: 194: _delay((unsigned long)((100)*(32000000/4000000.0)))
      +                          ;
  5262                           
  5263                           ;nrf24l01.c: 192: goto RESEND;
  5264  06A6  30A0               	movlw	160
  5265  06A7                     u3567:	
  5266  06A7  3200               	nop2
  5267  06A8  0B89               	decfsz	9,f
  5268  06A9  2EA7               	goto	u3567
  5269  06AA  2E9F               	goto	l2437
  5270  06AB                     l2439:	
  5271                           
  5272                           ;nrf24l01.c: 195: };nrf24l01.c: 197: TXPacket = Packet;
  5273  06AB  0020               	movlb	0	; select bank0
  5274  06AC  0828               	movf	nrf24l01SendPacket@Packet+1,w
  5275  06AD  0021               	movlb	1	; select bank1
  5276  06AE  00E9               	movwf	(_TXPacket+1)^(0+128)
  5277  06AF  0020               	movlb	0	; select bank0
  5278  06B0  0827               	movf	nrf24l01SendPacket@Packet,w
  5279  06B1  0021               	movlb	1	; select bank1
  5280  06B2  00E8               	movwf	_TXPacket^(0+128)
  5281                           
  5282                           ;nrf24l01.c: 200: nrf24l01.TXBusy = 1;
  5283  06B3  147D               	bsf	_nrf24l01,0	;volatile
  5284                           
  5285                           ;nrf24l01.c: 203: enableInterrupts(0);
  5286  06B4  3000               	movlw	0
  5287  06B5  3196  265E  3186   	fcall	_enableInterrupts
  5288                           
  5289                           ;nrf24l01.c: 206: nrf24l01SetRXMode(0);
  5290  06B8  3000               	movlw	0
  5291  06B9  318B  231C  3186   	fcall	_nrf24l01SetRXMode
  5292                           
  5293                           ;nrf24l01.c: 209: nrf24l01SPIStart();
  5294  06BC  3196  2666  3186   	fcall	_nrf24l01SPIStart
  5295                           
  5296                           ;nrf24l01.c: 212: nrf24l01SPISend((unsigned) 0b10110000);
  5297  06BF  30B0               	movlw	176
  5298  06C0  3196  2677  3186   	fcall	_nrf24l01SPISend
  5299                           
  5300                           ;nrf24l01.c: 214: nrf24l01SPISend(TXPacket->packetData.byte);
  5301  06C3  0021               	movlb	1	; select bank1
  5302  06C4  0868               	movf	_TXPacket^(0+128),w
  5303  06C5  0086               	movwf	6
  5304  06C6  0869               	movf	(_TXPacket+1)^(0+128),w
  5305  06C7  0087               	movwf	7
  5306  06C8  0801               	movf	1,w
  5307  06C9  3196  2677  3186   	fcall	_nrf24l01SPISend
  5308                           
  5309                           ;nrf24l01.c: 217: for (i = 0; (i < strlen(TXPacket->Message)) && (i < sizeof(TXPacket->M
      +                          essage)); i++){
  5310  06CC  0020               	movlb	0	; select bank0
  5311  06CD  01AD               	clrf	nrf24l01SendPacket@i
  5312  06CE  2EE8               	goto	l2459
  5313  06CF                     l2455:	
  5314                           
  5315                           ;nrf24l01.c: 218: nrf24l01SPISend(TXPacket->Message[i]);
  5316  06CF  082D               	movf	nrf24l01SendPacket@i,w
  5317  06D0  3E01               	addlw	1
  5318  06D1  00A9               	movwf	??_nrf24l01SendPacket
  5319  06D2  3000               	movlw	0
  5320  06D3  1803               	skipnc
  5321  06D4  3001               	movlw	1
  5322  06D5  00AA               	movwf	??_nrf24l01SendPacket+1
  5323  06D6  0829               	movf	??_nrf24l01SendPacket,w
  5324  06D7  0021               	movlb	1	; select bank1
  5325  06D8  0768               	addwf	_TXPacket^(0+128),w
  5326  06D9  0086               	movwf	6
  5327  06DA  0020               	movlb	0	; select bank0
  5328  06DB  082A               	movf	??_nrf24l01SendPacket+1,w
  5329  06DC  0021               	movlb	1	; select bank1
  5330  06DD  3D69               	addwfc	(_TXPacket+1)^(0+128),w
  5331  06DE  0087               	movwf	7
  5332  06DF  0801               	movf	1,w
  5333  06E0  3196  2677  3186   	fcall	_nrf24l01SPISend
  5334  06E3  3001               	movlw	1
  5335  06E4  0020               	movlb	0	; select bank0
  5336  06E5  00A9               	movwf	??_nrf24l01SendPacket
  5337  06E6  0829               	movf	??_nrf24l01SendPacket,w
  5338  06E7  07AD               	addwf	nrf24l01SendPacket@i,f
  5339  06E8                     l2459:	
  5340  06E8  0021               	movlb	1	; select bank1
  5341  06E9  0868               	movf	_TXPacket^(0+128),w
  5342  06EA  3E01               	addlw	1
  5343  06EB  0020               	movlb	0	; select bank0
  5344  06EC  00A9               	movwf	??_nrf24l01SendPacket
  5345  06ED  3000               	movlw	0
  5346  06EE  0021               	movlb	1	; select bank1
  5347  06EF  3D69               	addwfc	(_TXPacket+1)^(0+128),w
  5348  06F0  0020               	movlb	0	; select bank0
  5349  06F1  00AA               	movwf	??_nrf24l01SendPacket+1
  5350  06F2  0829               	movf	??_nrf24l01SendPacket,w
  5351  06F3  00A0               	movwf	strlen@s
  5352  06F4  082A               	movf	??_nrf24l01SendPacket+1,w
  5353  06F5  00A1               	movwf	strlen@s+1
  5354  06F6  3197  27A0  3186   	fcall	_strlen
  5355  06F9  0020               	movlb	0	; select bank0
  5356  06FA  082D               	movf	nrf24l01SendPacket@i,w
  5357  06FB  00AB               	movwf	??_nrf24l01SendPacket+2
  5358  06FC  01AC               	clrf	??_nrf24l01SendPacket+3
  5359  06FD  0821               	movf	?_strlen+1,w
  5360  06FE  022C               	subwf	??_nrf24l01SendPacket+3,w
  5361  06FF  1D03               	skipz
  5362  0700  2F03               	goto	u2015
  5363  0701  0820               	movf	?_strlen,w
  5364  0702  022B               	subwf	??_nrf24l01SendPacket+2,w
  5365  0703                     u2015:	
  5366  0703  1803               	skipnc
  5367  0704  2F09               	goto	l2463
  5368  0705  3020               	movlw	32
  5369  0706  022D               	subwf	nrf24l01SendPacket@i,w
  5370  0707  1C03               	skipc
  5371  0708  2ECF               	goto	l2455
  5372  0709                     l2463:	
  5373                           
  5374                           ;nrf24l01.c: 219: };nrf24l01.c: 222: nrf24l01SPIEnd();
  5375  0709  3196  2657  3186   	fcall	_nrf24l01SPIEnd
  5376                           
  5377                           ;nrf24l01.c: 225: nrf24l01CEHigh();
  5378  070C  3196  2645  3186   	fcall	_nrf24l01CEHigh
  5379                           
  5380                           ;nrf24l01.c: 226: _delay((unsigned long)((20)*(32000000/4000000.0)));
  5381  070F  3035               	movlw	53
  5382  0710                     u3577:	
  5383  0710  0B89               	decfsz	9,f
  5384  0711  2F10               	goto	u3577
  5385  0712  0000               	nop
  5386                           
  5387                           ;nrf24l01.c: 227: nrf24l01CELow();
  5388  0713  3196  2648  3186   	fcall	_nrf24l01CELow
  5389                           
  5390                           ;nrf24l01.c: 230: enableInterrupts(1);
  5391  0716  3001               	movlw	1
  5392  0717  3196  265E  3186   	fcall	_enableInterrupts
  5393                           
  5394                           ;nrf24l01.c: 233: i = 0xFF;
  5395  071A  30FF               	movlw	255
  5396  071B  0020               	movlb	0	; select bank0
  5397  071C  00A9               	movwf	??_nrf24l01SendPacket
  5398  071D  0829               	movf	??_nrf24l01SendPacket,w
  5399  071E  00AD               	movwf	nrf24l01SendPacket@i
  5400  071F                     l2477:	
  5401                           ;nrf24l01.c: 234: while (nrf24l01.TXBusy){
  5402                           
  5403  071F  1C7D               	btfss	_nrf24l01,0	;volatile
  5404  0720  2F2B               	goto	l2479
  5405                           
  5406                           ;nrf24l01.c: 236: if (!--i) {
  5407  0721  3001               	movlw	1
  5408  0722  0020               	movlb	0	; select bank0
  5409  0723  02AD               	subwf	nrf24l01SendPacket@i,f
  5410  0724  1903               	btfsc	3,2
  5411  0725  2E9A               	goto	l303
  5412                           
  5413                           ;nrf24l01.c: 238: };nrf24l01.c: 239: _delay((unsigned long)((100)*(32000000/4000000.0)))
      +                          ;
  5414                           
  5415                           ;nrf24l01.c: 237: goto RESEND;
  5416  0726  30A0               	movlw	160
  5417  0727                     u3587:	
  5418  0727  3200               	nop2
  5419  0728  0B89               	decfsz	9,f
  5420  0729  2F27               	goto	u3587
  5421  072A  2F1F               	goto	l2477
  5422  072B                     l2479:	
  5423                           
  5424                           ;nrf24l01.c: 240: };nrf24l01.c: 244: i = 0xFF;
  5425  072B  30FF               	movlw	255
  5426  072C  0020               	movlb	0	; select bank0
  5427  072D  00A9               	movwf	??_nrf24l01SendPacket
  5428  072E  0829               	movf	??_nrf24l01SendPacket,w
  5429  072F  00AD               	movwf	nrf24l01SendPacket@i
  5430  0730                     l2491:	
  5431                           ;nrf24l01.c: 245: while (TXPacket->packetData.ACKRequest){
  5432                           
  5433  0730  0021               	movlb	1	; select bank1
  5434  0731  0868               	movf	_TXPacket^(0+128),w
  5435  0732  0086               	movwf	6
  5436  0733  0869               	movf	(_TXPacket+1)^(0+128),w
  5437  0734  0087               	movwf	7
  5438  0735  1D01               	btfss	1,2
  5439  0736  0008               	return
  5440                           
  5441                           ;nrf24l01.c: 248: nrf24l01SetRXMode(1);
  5442  0737  3001               	movlw	1
  5443  0738  318B  231C  3186   	fcall	_nrf24l01SetRXMode
  5444                           
  5445                           ;nrf24l01.c: 250: if (!--i) {
  5446  073B  3001               	movlw	1
  5447  073C  0020               	movlb	0	; select bank0
  5448  073D  02AD               	subwf	nrf24l01SendPacket@i,f
  5449  073E  1D03               	btfss	3,2
  5450  073F  2F61               	goto	l2489
  5451                           
  5452                           ;nrf24l01.c: 251: _delay((unsigned long)((50000)*(32000000/4000000.0)));
  5453  0740  3003               	movlw	3
  5454  0741  0020               	movlb	0	; select bank0
  5455  0742  00AA               	movwf	??_nrf24l01SendPacket+1
  5456  0743  3008               	movlw	8
  5457  0744  00A9               	movwf	??_nrf24l01SendPacket
  5458  0745  3077               	movlw	119
  5459  0746                     u3597:	
  5460  0746  0B89               	decfsz	9,f
  5461  0747  2F46               	goto	u3597
  5462  0748  0BA9               	decfsz	??_nrf24l01SendPacket,f
  5463  0749  2F46               	goto	u3597
  5464  074A  0BAA               	decfsz	??_nrf24l01SendPacket+1,f
  5465  074B  2F46               	goto	u3597
  5466                           
  5467                           ;nrf24l01.c: 252: _delay((unsigned long)((50000)*(32000000/4000000.0)));
  5468  074C  3003               	movlw	3
  5469  074D  0020               	movlb	0	; select bank0
  5470  074E  00AA               	movwf	??_nrf24l01SendPacket+1
  5471  074F  3008               	movlw	8
  5472  0750  00A9               	movwf	??_nrf24l01SendPacket
  5473  0751  3077               	movlw	119
  5474  0752                     u3607:	
  5475  0752  0B89               	decfsz	9,f
  5476  0753  2F52               	goto	u3607
  5477  0754  0BA9               	decfsz	??_nrf24l01SendPacket,f
  5478  0755  2F52               	goto	u3607
  5479  0756  0BAA               	decfsz	??_nrf24l01SendPacket+1,f
  5480  0757  2F52               	goto	u3607
  5481                           
  5482                           ;nrf24l01.c: 253: nrf24l01ChangeTXPower(1);
  5483  0758  3001               	movlw	1
  5484  0759  0020               	movlb	0	; select bank0
  5485  075A  00A3               	movwf	nrf24l01ChangeTXPower@addPower
  5486  075B  3000               	movlw	0
  5487  075C  00A4               	movwf	nrf24l01ChangeTXPower@addPower+1
  5488  075D  318A  229A  3186   	fcall	_nrf24l01ChangeTXPower
  5489                           
  5490                           ;nrf24l01.c: 254: goto RESEND;
  5491  0760  2E9A               	goto	l303
  5492  0761                     l2489:	
  5493                           
  5494                           ;nrf24l01.c: 255: };nrf24l01.c: 256: _delay((unsigned long)((100)*(32000000/4000000.0)))
      +                          ;
  5495  0761  30A0               	movlw	160
  5496  0762                     u3617:	
  5497  0762  3200               	nop2
  5498  0763  0B89               	decfsz	9,f
  5499  0764  2F62               	goto	u3617
  5500  0765  2F30               	goto	l2491
  5501  0766                     __end_of_nrf24l01SendPacket:	
  5502                           
  5503                           	psect	text15
  5504  17A0                     __ptext15:	
  5505 ;; *************** function _strlen *****************
  5506 ;; Defined at:
  5507 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\strlen.c"
  5508 ;; Parameters:    Size  Location     Type
  5509 ;;  s               2    0[BANK0 ] PTR const unsigned char 
  5510 ;;		 -> packet.Message(32), packet.Message(32), NULL(0), RXPacket.Message(32), 
  5511 ;;		 -> RXPacket(33), main@packet(33), loop@packet(33), romDataMap(28), 
  5512 ;; Auto vars:     Size  Location     Type
  5513 ;;  cp              2    4[BANK0 ] PTR const unsigned char 
  5514 ;;		 -> packet.Message(32), packet.Message(32), NULL(0), RXPacket.Message(32), 
  5515 ;;		 -> RXPacket(33), main@packet(33), loop@packet(33), romDataMap(28), 
  5516 ;; Return value:  Size  Location     Type
  5517 ;;                  2    0[BANK0 ] unsigned int 
  5518 ;; Registers used:
  5519 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  5520 ;; Tracked objects:
  5521 ;;		On entry : 0/0
  5522 ;;		On exit  : 0/0
  5523 ;;		Unchanged: 0/0
  5524 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5525 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5526 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5527 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5528 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5529 ;;Total ram usage:        6 bytes
  5530 ;; Hardware stack levels used:    1
  5531 ;; Hardware stack levels required when called:    7
  5532 ;; This function calls:
  5533 ;;		Nothing
  5534 ;; This function is called by:
  5535 ;;		_nrf24l01GetPipe
  5536 ;;		_nrf24l01SendPacket
  5537 ;; This function uses a non-reentrant model
  5538 ;;
  5539                           
  5540                           
  5541                           ;psect for function _strlen
  5542  17A0                     _strlen:	
  5543                           
  5544                           ;incstack = 0
  5545                           ; Regs used in _strlen: [wreg+fsr1l+fsr1h+status,2+status,0]
  5546  17A0  0020               	movlb	0	; select bank0
  5547  17A1  0821               	movf	strlen@s+1,w
  5548  17A2  00A5               	movwf	strlen@cp+1
  5549  17A3  0820               	movf	strlen@s,w
  5550  17A4  00A4               	movwf	strlen@cp
  5551  17A5                     l2359:	
  5552  17A5  0824               	movf	strlen@cp,w
  5553  17A6  0086               	movwf	6
  5554  17A7  0825               	movf	strlen@cp+1,w
  5555  17A8  0087               	movwf	7
  5556  17A9  0801               	movf	1,w
  5557  17AA  1903               	btfsc	3,2
  5558  17AB  2FB1               	goto	l2361
  5559  17AC  3001               	movlw	1
  5560  17AD  07A4               	addwf	strlen@cp,f
  5561  17AE  3000               	movlw	0
  5562  17AF  3DA5               	addwfc	strlen@cp+1,f
  5563  17B0  2FA5               	goto	l2359
  5564  17B1                     l2361:	
  5565  17B1  0920               	comf	strlen@s,w
  5566  17B2  00A2               	movwf	??_strlen
  5567  17B3  0921               	comf	strlen@s+1,w
  5568  17B4  00A3               	movwf	??_strlen+1
  5569  17B5  0AA2               	incf	??_strlen,f
  5570  17B6  1903               	skipnz
  5571  17B7  0AA3               	incf	??_strlen+1,f
  5572  17B8  0824               	movf	strlen@cp,w
  5573  17B9  0722               	addwf	??_strlen,w
  5574  17BA  00A0               	movwf	?_strlen
  5575  17BB  0825               	movf	strlen@cp+1,w
  5576  17BC  3D23               	addwfc	??_strlen+1,w
  5577  17BD  00A1               	movwf	?_strlen+1
  5578  17BE  0008               	return
  5579  17BF                     __end_of_strlen:	
  5580                           
  5581                           	psect	text16
  5582  0B1C                     __ptext16:	
  5583 ;; *************** function _nrf24l01SetRXMode *****************
  5584 ;; Defined at:
  5585 ;;		line 54 in file "nrf24l01.c"
  5586 ;; Parameters:    Size  Location     Type
  5587 ;;  rxMode          1    wreg     unsigned char 
  5588 ;; Auto vars:     Size  Location     Type
  5589 ;;  rxMode          1    5[BANK0 ] unsigned char 
  5590 ;;  config          1    4[BANK0 ] struct .
  5591 ;; Return value:  Size  Location     Type
  5592 ;;                  1    wreg      void 
  5593 ;; Registers used:
  5594 ;;		wreg, status,2, status,0, pclath, cstack
  5595 ;; Tracked objects:
  5596 ;;		On entry : 0/0
  5597 ;;		On exit  : 0/0
  5598 ;;		Unchanged: 0/0
  5599 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5600 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5601 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5602 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5603 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5604 ;;Total ram usage:        3 bytes
  5605 ;; Hardware stack levels used:    1
  5606 ;; Hardware stack levels required when called:   10
  5607 ;; This function calls:
  5608 ;;		_nrf24l01CEHigh
  5609 ;;		_nrf24l01CELow
  5610 ;;		_nrf24l01Send
  5611 ;; This function is called by:
  5612 ;;		_sleep
  5613 ;;		_nrf24l01SendPacket
  5614 ;; This function uses a non-reentrant model
  5615 ;;
  5616                           
  5617                           
  5618                           ;psect for function _nrf24l01SetRXMode
  5619  0B1C                     _nrf24l01SetRXMode:	
  5620                           
  5621                           ;incstack = 0
  5622                           ; Regs used in _nrf24l01SetRXMode: [wreg+status,2+status,0+pclath+cstack]
  5623                           ;nrf24l01SetRXMode@rxMode stored from wreg
  5624  0B1C  0020               	movlb	0	; select bank0
  5625  0B1D  00A5               	movwf	nrf24l01SetRXMode@rxMode
  5626                           
  5627                           ;nrf24l01.c: 62: n_CONFIG_t config;;nrf24l01.c: 65: config.byte = nrf24l01Send((unsigned
      +                          ) 0b00000000 | (unsigned) 0x00, 0);
  5628  0B1E  01A0               	clrf	nrf24l01Send@data
  5629  0B1F  3000               	movlw	0
  5630  0B20  3197  27BF  318B   	fcall	_nrf24l01Send
  5631  0B23  0020               	movlb	0	; select bank0
  5632  0B24  00A3               	movwf	??_nrf24l01SetRXMode
  5633  0B25  0823               	movf	??_nrf24l01SetRXMode,w
  5634  0B26  00A4               	movwf	nrf24l01SetRXMode@config
  5635                           
  5636                           ;nrf24l01.c: 68: if (config.PRIM_RX != rxMode){
  5637  0B27  0824               	movf	nrf24l01SetRXMode@config,w
  5638  0B28  3901               	andlw	1
  5639  0B29  0625               	xorwf	nrf24l01SetRXMode@rxMode,w
  5640  0B2A  1903               	skipnz
  5641  0B2B  2B59               	goto	l2337
  5642                           
  5643                           ;nrf24l01.c: 71: nrf24l01CELow();
  5644  0B2C  3196  2648  318B   	fcall	_nrf24l01CELow
  5645                           
  5646                           ;nrf24l01.c: 72: _delay((unsigned long)((200)*(32000000/4000000.0)));
  5647  0B2F  30E4               	movlw	228
  5648  0B30                     u3627:	
  5649  0B30  3200               	nop2
  5650  0B31  3200               	nop2
  5651  0B32  0B89               	decfsz	9,f
  5652  0B33  2B30               	goto	u3627
  5653  0B34  3200               	nop2
  5654  0B35  3200               	nop2
  5655                           
  5656                           ;nrf24l01.c: 75: config.PRIM_RX = rxMode;
  5657  0B36  0020               	movlb	0	; select bank0
  5658  0B37  0825               	movf	nrf24l01SetRXMode@rxMode,w
  5659  0B38  3901               	andlw	1
  5660  0B39  1024               	bcf	nrf24l01SetRXMode@config,0
  5661  0B3A  1D03               	skipz
  5662  0B3B  1424               	bsf	nrf24l01SetRXMode@config,0
  5663                           
  5664                           ;nrf24l01.c: 76: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x00, config.byte);
  5665  0B3C  0824               	movf	nrf24l01SetRXMode@config,w
  5666  0B3D  00A3               	movwf	??_nrf24l01SetRXMode
  5667  0B3E  0823               	movf	??_nrf24l01SetRXMode,w
  5668  0B3F  00A0               	movwf	nrf24l01Send@data
  5669  0B40  3020               	movlw	32
  5670  0B41  3197  27BF  318B   	fcall	_nrf24l01Send
  5671                           
  5672                           ;nrf24l01.c: 79: _delay((unsigned long)((200)*(32000000/4000000.0)));
  5673  0B44  30E4               	movlw	228
  5674  0B45                     u3637:	
  5675  0B45  3200               	nop2
  5676  0B46  3200               	nop2
  5677  0B47  0B89               	decfsz	9,f
  5678  0B48  2B45               	goto	u3637
  5679  0B49  3200               	nop2
  5680  0B4A  3200               	nop2
  5681                           
  5682                           ;nrf24l01.c: 82: if (rxMode){
  5683  0B4B  0020               	movlb	0	; select bank0
  5684  0B4C  0825               	movf	nrf24l01SetRXMode@rxMode,w
  5685  0B4D  1903               	btfsc	3,2
  5686  0B4E  2B59               	goto	l2337
  5687                           
  5688                           ;nrf24l01.c: 83: nrf24l01CEHigh();
  5689  0B4F  3196  2645  318B   	fcall	_nrf24l01CEHigh
  5690                           
  5691                           ;nrf24l01.c: 84: _delay((unsigned long)((200)*(32000000/4000000.0)));
  5692  0B52  30E4               	movlw	228
  5693  0B53                     u3647:	
  5694  0B53  3200               	nop2
  5695  0B54  3200               	nop2
  5696  0B55  0B89               	decfsz	9,f
  5697  0B56  2B53               	goto	u3647
  5698  0B57  3200               	nop2
  5699  0B58  3200               	nop2
  5700  0B59                     l2337:	
  5701                           
  5702                           ;nrf24l01.c: 85: };nrf24l01.c: 86: };nrf24l01.c: 89: nrf24l01.RXMode = rxMode;
  5703  0B59  0020               	movlb	0	; select bank0
  5704  0B5A  0825               	movf	nrf24l01SetRXMode@rxMode,w
  5705  0B5B  3901               	andlw	1
  5706  0B5C  117D               	bcf	_nrf24l01,2	;volatile
  5707  0B5D  1D03               	skipz
  5708  0B5E  157D               	bsf	_nrf24l01,2	;volatile
  5709  0B5F  0008               	return
  5710  0B60                     __end_of_nrf24l01SetRXMode:	
  5711                           
  5712                           	psect	text17
  5713  093A                     __ptext17:	
  5714 ;; *************** function ___lwdiv *****************
  5715 ;; Defined at:
  5716 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\lwdiv.c"
  5717 ;; Parameters:    Size  Location     Type
  5718 ;;  divisor         2    0[BANK0 ] unsigned int 
  5719 ;;  dividend        2    2[BANK0 ] unsigned int 
  5720 ;; Auto vars:     Size  Location     Type
  5721 ;;  quotient        2    5[BANK0 ] unsigned int 
  5722 ;;  counter         1    7[BANK0 ] unsigned char 
  5723 ;; Return value:  Size  Location     Type
  5724 ;;                  2    0[BANK0 ] unsigned int 
  5725 ;; Registers used:
  5726 ;;		wreg, status,2, status,0
  5727 ;; Tracked objects:
  5728 ;;		On entry : 0/0
  5729 ;;		On exit  : 0/0
  5730 ;;		Unchanged: 0/0
  5731 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5732 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5733 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5734 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5735 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5736 ;;Total ram usage:        8 bytes
  5737 ;; Hardware stack levels used:    1
  5738 ;; Hardware stack levels required when called:    7
  5739 ;; This function calls:
  5740 ;;		Nothing
  5741 ;; This function is called by:
  5742 ;;		_sleep
  5743 ;; This function uses a non-reentrant model
  5744 ;;
  5745                           
  5746                           
  5747                           ;psect for function ___lwdiv
  5748  093A                     ___lwdiv:	
  5749                           
  5750                           ;incstack = 0
  5751                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  5752  093A  0020               	movlb	0	; select bank0
  5753  093B  01A5               	clrf	___lwdiv@quotient
  5754  093C  01A6               	clrf	___lwdiv@quotient+1
  5755  093D  0820               	movf	___lwdiv@divisor,w
  5756  093E  0421               	iorwf	___lwdiv@divisor+1,w
  5757  093F  1903               	btfsc	3,2
  5758  0940  296A               	goto	l3069
  5759  0941  01A7               	clrf	___lwdiv@counter
  5760  0942  0AA7               	incf	___lwdiv@counter,f
  5761  0943                     l3057:	
  5762  0943  1BA1               	btfsc	___lwdiv@divisor+1,7
  5763  0944  294F               	goto	l3059
  5764  0945  3001               	movlw	1
  5765  0946                     u3155:	
  5766  0946  35A0               	lslf	___lwdiv@divisor,f
  5767  0947  0DA1               	rlf	___lwdiv@divisor+1,f
  5768  0948  0B89               	decfsz	9,f
  5769  0949  2946               	goto	u3155
  5770  094A  3001               	movlw	1
  5771  094B  00A4               	movwf	??___lwdiv
  5772  094C  0824               	movf	??___lwdiv,w
  5773  094D  07A7               	addwf	___lwdiv@counter,f
  5774  094E  2943               	goto	l3057
  5775  094F                     l3059:	
  5776  094F  3001               	movlw	1
  5777  0950                     u3175:	
  5778  0950  35A5               	lslf	___lwdiv@quotient,f
  5779  0951  0DA6               	rlf	___lwdiv@quotient+1,f
  5780  0952  0B89               	decfsz	9,f
  5781  0953  2950               	goto	u3175
  5782  0954  0821               	movf	___lwdiv@divisor+1,w
  5783  0955  0223               	subwf	___lwdiv@dividend+1,w
  5784  0956  1D03               	skipz
  5785  0957  295A               	goto	u3185
  5786  0958  0820               	movf	___lwdiv@divisor,w
  5787  0959  0222               	subwf	___lwdiv@dividend,w
  5788  095A                     u3185:	
  5789  095A  1C03               	skipc
  5790  095B  2961               	goto	l3065
  5791  095C  0820               	movf	___lwdiv@divisor,w
  5792  095D  02A2               	subwf	___lwdiv@dividend,f
  5793  095E  0821               	movf	___lwdiv@divisor+1,w
  5794  095F  3BA3               	subwfb	___lwdiv@dividend+1,f
  5795  0960  1425               	bsf	___lwdiv@quotient,0
  5796  0961                     l3065:	
  5797  0961  3001               	movlw	1
  5798  0962                     u3195:	
  5799  0962  36A1               	lsrf	___lwdiv@divisor+1,f
  5800  0963  0CA0               	rrf	___lwdiv@divisor,f
  5801  0964  0B89               	decfsz	9,f
  5802  0965  2962               	goto	u3195
  5803  0966  3001               	movlw	1
  5804  0967  02A7               	subwf	___lwdiv@counter,f
  5805  0968  1D03               	btfss	3,2
  5806  0969  294F               	goto	l3059
  5807  096A                     l3069:	
  5808  096A  0826               	movf	___lwdiv@quotient+1,w
  5809  096B  00A1               	movwf	?___lwdiv+1
  5810  096C  0825               	movf	___lwdiv@quotient,w
  5811  096D  00A0               	movwf	?___lwdiv
  5812  096E  0008               	return
  5813  096F                     __end_of___lwdiv:	
  5814                           
  5815                           	psect	text18
  5816  0766                     __ptext18:	
  5817 ;; *************** function _setMessage *****************
  5818 ;; Defined at:
  5819 ;;		line 174 in file "main.c"
  5820 ;; Parameters:    Size  Location     Type
  5821 ;;  packet          2   25[BANK1 ] PTR struct .
  5822 ;;		 -> main@packet(33), loop@packet(33), 
  5823 ;;  topic           2   27[BANK1 ] PTR const unsigned char 
  5824 ;;		 -> STR_9(5), STR_7(6), STR_6(7), STR_5(5), 
  5825 ;;		 -> STR_4(5), STR_3(4), 
  5826 ;;  value           3   29[BANK1 ] float 
  5827 ;; Auto vars:     Size  Location     Type
  5828 ;;  status          2   33[BANK1 ] int 
  5829 ;; Return value:  Size  Location     Type
  5830 ;;                  1    wreg      void 
  5831 ;; Registers used:
  5832 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5833 ;; Tracked objects:
  5834 ;;		On entry : 0/0
  5835 ;;		On exit  : 0/0
  5836 ;;		Unchanged: 0/0
  5837 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5838 ;;      Params:         0       0       7       0       0       0       0       0       0       0       0       0       
      +0       0
  5839 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  5840 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  5841 ;;      Totals:         0       0      10       0       0       0       0       0       0       0       0       0       
      +0       0
  5842 ;;Total ram usage:       10 bytes
  5843 ;; Hardware stack levels used:    1
  5844 ;; Hardware stack levels required when called:   11
  5845 ;; This function calls:
  5846 ;;		_ftoa
  5847 ;;		_memset
  5848 ;;		_strcat
  5849 ;; This function is called by:
  5850 ;;		_loop
  5851 ;;		_main
  5852 ;; This function uses a non-reentrant model
  5853 ;;
  5854                           
  5855                           
  5856                           ;psect for function _setMessage
  5857  0766                     _setMessage:	
  5858                           
  5859                           ;main.c: 175: memset(packet->Message, 0, sizeof(packet->Message));
  5860                           
  5861                           ;incstack = 0
  5862                           ; Regs used in _setMessage: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5863  0766  0021               	movlb	1	; select bank1
  5864  0767  0839               	movf	setMessage@packet^(0+128),w
  5865  0768  3E01               	addlw	1
  5866  0769  0020               	movlb	0	; select bank0
  5867  076A  00A0               	movwf	memset@p1
  5868  076B  3000               	movlw	0
  5869  076C  0021               	movlb	1	; select bank1
  5870  076D  3D3A               	addwfc	(setMessage@packet+1)^(0+128),w
  5871  076E  0020               	movlb	0	; select bank0
  5872  076F  00A1               	movwf	memset@p1+1
  5873  0770  3000               	movlw	0
  5874  0771  00A2               	movwf	memset@c
  5875  0772  00A3               	movwf	memset@c+1
  5876  0773  3020               	movlw	32
  5877  0774  00A4               	movwf	memset@n
  5878  0775  3000               	movlw	0
  5879  0776  00A5               	movwf	memset@n+1
  5880  0777  3196  26FA  3187   	fcall	_memset
  5881                           
  5882                           ;main.c: 177: strcat(packet->Message, romData->name);
  5883  077A  0021               	movlb	1	; select bank1
  5884  077B  0839               	movf	setMessage@packet^(0+128),w
  5885  077C  3E01               	addlw	1
  5886  077D  00B3               	movwf	strcat@to^(0+128)
  5887  077E  3000               	movlw	0
  5888  077F  3D3A               	addwfc	(setMessage@packet+1)^(0+128),w
  5889  0780  00B4               	movwf	(strcat@to+1)^(0+128)
  5890  0781  086B               	movf	_romData^(0+128),w
  5891  0782  3E01               	addlw	1
  5892  0783  00B5               	movwf	strcat@from^(0+128)
  5893  0784  3001               	movlw	1
  5894  0785  00B6               	movwf	(strcat@from+1)^(0+128)
  5895  0786  3188  2088  3187   	fcall	_strcat
  5896                           
  5897                           ;main.c: 179: strcat(packet->Message, "/");
  5898  0789  0021               	movlb	1	; select bank1
  5899  078A  0839               	movf	setMessage@packet^(0+128),w
  5900  078B  3E01               	addlw	1
  5901  078C  00B3               	movwf	strcat@to^(0+128)
  5902  078D  3000               	movlw	0
  5903  078E  3D3A               	addwfc	(setMessage@packet+1)^(0+128),w
  5904  078F  00B4               	movwf	(strcat@to+1)^(0+128)
  5905  0790  3035               	movlw	low (STR_1| (0+32768))
  5906  0791  00B5               	movwf	strcat@from^(0+128)
  5907  0792  3098               	movlw	high (STR_1| (0+32768))
  5908  0793  00B6               	movwf	(strcat@from^(0+128)+1)
  5909  0794  3188  2088  3187   	fcall	_strcat
  5910                           
  5911                           ;main.c: 180: strcat(packet->Message, topic);
  5912  0797  0021               	movlb	1	; select bank1
  5913  0798  0839               	movf	setMessage@packet^(0+128),w
  5914  0799  3E01               	addlw	1
  5915  079A  00B3               	movwf	strcat@to^(0+128)
  5916  079B  3000               	movlw	0
  5917  079C  3D3A               	addwfc	(setMessage@packet+1)^(0+128),w
  5918  079D  00B4               	movwf	(strcat@to+1)^(0+128)
  5919  079E  083C               	movf	(setMessage@topic+1)^(0+128),w
  5920  079F  00B6               	movwf	(strcat@from+1)^(0+128)
  5921  07A0  083B               	movf	setMessage@topic^(0+128),w
  5922  07A1  00B5               	movwf	strcat@from^(0+128)
  5923  07A2  3188  2088  3187   	fcall	_strcat
  5924                           
  5925                           ;main.c: 182: int status;;main.c: 183: strcat(packet->Message, "/");
  5926  07A5  0021               	movlb	1	; select bank1
  5927  07A6  0839               	movf	setMessage@packet^(0+128),w
  5928  07A7  3E01               	addlw	1
  5929  07A8  00B3               	movwf	strcat@to^(0+128)
  5930  07A9  3000               	movlw	0
  5931  07AA  3D3A               	addwfc	(setMessage@packet+1)^(0+128),w
  5932  07AB  00B4               	movwf	(strcat@to+1)^(0+128)
  5933  07AC  3035               	movlw	low (STR_1| (0+32768))
  5934  07AD  00B5               	movwf	strcat@from^(0+128)
  5935  07AE  3098               	movlw	high (STR_1| (0+32768))
  5936  07AF  00B6               	movwf	(strcat@from^(0+128)+1)
  5937  07B0  3188  2088  3187   	fcall	_strcat
  5938                           
  5939                           ;main.c: 184: strcat(packet->Message, ftoa(value, &status));
  5940  07B3  0021               	movlb	1	; select bank1
  5941  07B4  0839               	movf	setMessage@packet^(0+128),w
  5942  07B5  3E01               	addlw	1
  5943  07B6  00B3               	movwf	strcat@to^(0+128)
  5944  07B7  3000               	movlw	0
  5945  07B8  3D3A               	addwfc	(setMessage@packet+1)^(0+128),w
  5946  07B9  00B4               	movwf	(strcat@to+1)^(0+128)
  5947  07BA  083D               	movf	setMessage@value^(0+128),w
  5948  07BB  00A6               	movwf	ftoa@f^(0+128)
  5949  07BC  083E               	movf	(setMessage@value+1)^(0+128),w
  5950  07BD  00A7               	movwf	(ftoa@f+1)^(0+128)
  5951  07BE  083F               	movf	(setMessage@value+2)^(0+128),w
  5952  07BF  00A8               	movwf	(ftoa@f+2)^(0+128)
  5953  07C0  30C1               	movlw	(low (setMessage@status| 0))& (0+255)
  5954  07C1  00C0               	movwf	??_setMessage^(0+128)
  5955  07C2  0840               	movf	??_setMessage^(0+128),w
  5956  07C3  00A9               	movwf	ftoa@status^(0+128)
  5957  07C4  3185  25A8  3187   	fcall	_ftoa
  5958  07C7  0021               	movlb	1	; select bank1
  5959  07C8  00B5               	movwf	strcat@from^(0+128)
  5960  07C9  3001               	movlw	1
  5961  07CA  00B6               	movwf	(strcat@from+1)^(0+128)
  5962  07CB  3188  2088         	fcall	_strcat
  5963                           
  5964                           ;main.c: 186: packet->packetData.byte = 0;
  5965  07CD  0021               	movlb	1	; select bank1
  5966  07CE  0839               	movf	setMessage@packet^(0+128),w
  5967  07CF  0086               	movwf	6
  5968  07D0  083A               	movf	(setMessage@packet+1)^(0+128),w
  5969  07D1  0087               	movwf	7
  5970  07D2  0181               	clrf	1
  5971  07D3  0008               	return
  5972  07D4                     __end_of_setMessage:	
  5973                           
  5974                           	psect	text19
  5975  0888                     __ptext19:	
  5976 ;; *************** function _strcat *****************
  5977 ;; Defined at:
  5978 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\strcat.c"
  5979 ;; Parameters:    Size  Location     Type
  5980 ;;  to              2   19[BANK1 ] PTR unsigned char 
  5981 ;;		 -> main@packet(33), loop@packet(33), 
  5982 ;;  from            2   21[BANK1 ] PTR const unsigned char 
  5983 ;;		 -> romDataMap.name(16), ftoa@buf(17), STR_9(5), STR_7(6), 
  5984 ;;		 -> STR_6(7), STR_5(5), STR_4(5), STR_3(4), 
  5985 ;;		 -> STR_2(2), STR_1(2), romDataMap(28), 
  5986 ;; Auto vars:     Size  Location     Type
  5987 ;;  cp              2   23[BANK1 ] PTR unsigned char 
  5988 ;;		 -> main@packet(33), loop@packet(33), 
  5989 ;; Return value:  Size  Location     Type
  5990 ;;                  2   19[BANK1 ] PTR unsigned char 
  5991 ;; Registers used:
  5992 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath
  5993 ;; Tracked objects:
  5994 ;;		On entry : 0/0
  5995 ;;		On exit  : 0/0
  5996 ;;		Unchanged: 0/0
  5997 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5998 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  5999 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  6000 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6001 ;;      Totals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0
  6002 ;;Total ram usage:        6 bytes
  6003 ;; Hardware stack levels used:    1
  6004 ;; Hardware stack levels required when called:    7
  6005 ;; This function calls:
  6006 ;;		Nothing
  6007 ;; This function is called by:
  6008 ;;		_setMessage
  6009 ;; This function uses a non-reentrant model
  6010 ;;
  6011                           
  6012                           
  6013                           ;psect for function _strcat
  6014  0888                     _strcat:	
  6015                           
  6016                           ;incstack = 0
  6017                           ; Regs used in _strcat: [wreg-fsr1h+status,2+status,0+pclath]
  6018  0888  0021               	movlb	1	; select bank1
  6019  0889  0834               	movf	(strcat@to+1)^(0+128),w
  6020  088A  00B8               	movwf	(strcat@cp+1)^(0+128)
  6021  088B  0833               	movf	strcat@to^(0+128),w
  6022  088C  00B7               	movwf	strcat@cp^(0+128)
  6023  088D                     l2943:	
  6024  088D  0837               	movf	strcat@cp^(0+128),w
  6025  088E  0086               	movwf	6
  6026  088F  0838               	movf	(strcat@cp+1)^(0+128),w
  6027  0890  0087               	movwf	7
  6028  0891  0801               	movf	1,w
  6029  0892  1903               	btfsc	3,2
  6030  0893  28A1               	goto	l2947
  6031  0894  3001               	movlw	1
  6032  0895  07B7               	addwf	strcat@cp^(0+128),f
  6033  0896  3000               	movlw	0
  6034  0897  3DB8               	addwfc	(strcat@cp+1)^(0+128),f
  6035  0898  288D               	goto	l2943
  6036  0899                     l2945:	
  6037  0899  3001               	movlw	1
  6038  089A  07B7               	addwf	strcat@cp^(0+128),f
  6039  089B  3000               	movlw	0
  6040  089C  3DB8               	addwfc	(strcat@cp+1)^(0+128),f
  6041  089D  3001               	movlw	1
  6042  089E  07B5               	addwf	strcat@from^(0+128),f
  6043  089F  3000               	movlw	0
  6044  08A0  3DB6               	addwfc	(strcat@from+1)^(0+128),f
  6045  08A1                     l2947:	
  6046  08A1  0837               	movf	strcat@cp^(0+128),w
  6047  08A2  0086               	movwf	6
  6048  08A3  0838               	movf	(strcat@cp+1)^(0+128),w
  6049  08A4  0087               	movwf	7
  6050  08A5  0835               	movf	strcat@from^(0+128),w
  6051  08A6  0084               	movwf	4
  6052  08A7  0836               	movf	(strcat@from+1)^(0+128),w
  6053  08A8  0085               	movwf	5
  6054  08A9  0800               	movf	0,w	;code access
  6055  08AA  3FC0               	movwi [0]fsr1
  6056  08AB  0889               	movf	9,f
  6057  08AC  1903               	btfsc	3,2
  6058  08AD  0008               	return
  6059  08AE  2899               	goto	l2945
  6060  08AF                     __end_of_strcat:	
  6061                           ;	Return value of _strcat is never used
  6062                           
  6063                           
  6064                           	psect	text20
  6065  16FA                     __ptext20:	
  6066 ;; *************** function _memset *****************
  6067 ;; Defined at:
  6068 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\memset.c"
  6069 ;; Parameters:    Size  Location     Type
  6070 ;;  p1              2    0[BANK0 ] PTR void 
  6071 ;;		 -> RXPacket(33), main@packet(33), loop@packet(33), 
  6072 ;;  c               2    2[BANK0 ] int 
  6073 ;;  n               2    4[BANK0 ] unsigned int 
  6074 ;; Auto vars:     Size  Location     Type
  6075 ;;  p               2    6[BANK0 ] PTR unsigned char 
  6076 ;;		 -> RXPacket(33), main@packet(33), loop@packet(33), 
  6077 ;; Return value:  Size  Location     Type
  6078 ;;                  2    0[BANK0 ] PTR void 
  6079 ;; Registers used:
  6080 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  6081 ;; Tracked objects:
  6082 ;;		On entry : 0/0
  6083 ;;		On exit  : 0/0
  6084 ;;		Unchanged: 0/0
  6085 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6086 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6087 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6088 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6089 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6090 ;;Total ram usage:        8 bytes
  6091 ;; Hardware stack levels used:    1
  6092 ;; Hardware stack levels required when called:    7
  6093 ;; This function calls:
  6094 ;;		Nothing
  6095 ;; This function is called by:
  6096 ;;		_setMessage
  6097 ;; This function uses a non-reentrant model
  6098 ;;
  6099                           
  6100                           
  6101                           ;psect for function _memset
  6102  16FA                     _memset:	
  6103                           
  6104                           ;incstack = 0
  6105                           ; Regs used in _memset: [wreg+fsr1l+fsr1h+status,2+status,0]
  6106  16FA  0020               	movlb	0	; select bank0
  6107  16FB  0821               	movf	memset@p1+1,w
  6108  16FC  00A7               	movwf	memset@p+1
  6109  16FD  0820               	movf	memset@p1,w
  6110  16FE  00A6               	movwf	memset@p
  6111  16FF                     l2937:	
  6112  16FF  3001               	movlw	1
  6113  1700  02A4               	subwf	memset@n,f
  6114  1701  3000               	movlw	0
  6115  1702  3BA5               	subwfb	memset@n+1,f
  6116  1703  0A24               	incf	memset@n,w
  6117  1704  1903               	btfsc	3,2
  6118  1705  0A25               	incf	memset@n+1,w
  6119  1706  1903               	btfsc	3,2
  6120  1707  0008               	return
  6121  1708  0826               	movf	memset@p,w
  6122  1709  0086               	movwf	6
  6123  170A  0827               	movf	memset@p+1,w
  6124  170B  0087               	movwf	7
  6125  170C  0822               	movf	memset@c,w
  6126  170D  0081               	movwf	1
  6127  170E  3001               	movlw	1
  6128  170F  07A6               	addwf	memset@p,f
  6129  1710  3000               	movlw	0
  6130  1711  3DA7               	addwfc	memset@p+1,f
  6131  1712  2EFF               	goto	l2937
  6132  1713                     __end_of_memset:	
  6133                           ;	Return value of _memset is never used
  6134                           
  6135                           
  6136                           	psect	text21
  6137  05A8                     __ptext21:	
  6138 ;; *************** function _ftoa *****************
  6139 ;; Defined at:
  6140 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\ftoa.c"
  6141 ;; Parameters:    Size  Location     Type
  6142 ;;  f               3    6[BANK1 ] float 
  6143 ;;  status          1    9[BANK1 ] PTR int 
  6144 ;;		 -> setMessage@status(2), 
  6145 ;; Auto vars:     Size  Location     Type
  6146 ;;  l               4   14[BANK1 ] unsigned long 
  6147 ;;  rem             4   10[BANK1 ] unsigned long 
  6148 ;;  cp              1   18[BANK1 ] PTR unsigned char 
  6149 ;;		 -> ftoa@buf(17), 
  6150 ;; Return value:  Size  Location     Type
  6151 ;;                  1    wreg      PTR unsigned char 
  6152 ;; Registers used:
  6153 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6154 ;; Tracked objects:
  6155 ;;		On entry : 0/0
  6156 ;;		On exit  : 0/0
  6157 ;;		Unchanged: 0/0
  6158 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6159 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  6160 ;;      Locals:         0       0       9       0       0       0       0       0       0       0       0       0       
      +0       0
  6161 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6162 ;;      Totals:         0       1      13       0       0       0       0       0       0       0       0       0       
      +0       0
  6163 ;;Total ram usage:       14 bytes
  6164 ;; Hardware stack levels used:    1
  6165 ;; Hardware stack levels required when called:   10
  6166 ;; This function calls:
  6167 ;;		___ftge
  6168 ;;		___ftmul
  6169 ;;		___ftneg
  6170 ;;		___ftsub
  6171 ;;		___fttol
  6172 ;;		___lltoft
  6173 ;;		_sprintf
  6174 ;; This function is called by:
  6175 ;;		_setMessage
  6176 ;; This function uses a non-reentrant model
  6177 ;;
  6178                           
  6179                           
  6180                           ;psect for function _ftoa
  6181  05A8                     _ftoa:	
  6182                           
  6183                           ;incstack = 0
  6184                           ; Regs used in _ftoa: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6185  05A8  3053               	movlw	(low (ftoa@buf| (0+256)))& (0+255)
  6186  05A9  0020               	movlb	0	; select bank0
  6187  05AA  00EF               	movwf	??_ftoa
  6188  05AB  086F               	movf	??_ftoa,w
  6189  05AC  0021               	movlb	1	; select bank1
  6190  05AD  00B2               	movwf	ftoa@cp^(0+128)
  6191  05AE  0826               	movf	ftoa@f^(0+128),w
  6192  05AF  0020               	movlb	0	; select bank0
  6193  05B0  00A0               	movwf	___ftge@ff1
  6194  05B1  0021               	movlb	1	; select bank1
  6195  05B2  0827               	movf	(ftoa@f+1)^(0+128),w
  6196  05B3  0020               	movlb	0	; select bank0
  6197  05B4  00A1               	movwf	___ftge@ff1+1
  6198  05B5  0021               	movlb	1	; select bank1
  6199  05B6  0828               	movf	(ftoa@f+2)^(0+128),w
  6200  05B7  0020               	movlb	0	; select bank0
  6201  05B8  00A2               	movwf	___ftge@ff1+2
  6202  05B9  3000               	movlw	0
  6203  05BA  00A3               	movwf	___ftge@ff2
  6204  05BB  3000               	movlw	0
  6205  05BC  00A4               	movwf	___ftge@ff2+1
  6206  05BD  3000               	movlw	0
  6207  05BE  00A5               	movwf	___ftge@ff2+2
  6208  05BF  3189  21E2  3185   	fcall	___ftge
  6209  05C2  1803               	btfsc	3,0
  6210  05C3  2DEE               	goto	l2959
  6211  05C4  302D               	movlw	45
  6212  05C5  0020               	movlb	0	; select bank0
  6213  05C6  00EF               	movwf	??_ftoa
  6214  05C7  0021               	movlb	1	; select bank1
  6215  05C8  0832               	movf	ftoa@cp^(0+128),w
  6216  05C9  0086               	movwf	6
  6217  05CA  3001               	movlw	1	; select bank2/3
  6218  05CB  0087               	movwf	7
  6219  05CC  0020               	movlb	0	; select bank0
  6220  05CD  086F               	movf	??_ftoa,w
  6221  05CE  0081               	movwf	1
  6222  05CF  3001               	movlw	1
  6223  05D0  00EF               	movwf	??_ftoa
  6224  05D1  086F               	movf	??_ftoa,w
  6225  05D2  0021               	movlb	1	; select bank1
  6226  05D3  07B2               	addwf	ftoa@cp^(0+128),f
  6227  05D4  0826               	movf	ftoa@f^(0+128),w
  6228  05D5  0020               	movlb	0	; select bank0
  6229  05D6  00D7               	movwf	___ftneg@f1
  6230  05D7  0021               	movlb	1	; select bank1
  6231  05D8  0827               	movf	(ftoa@f+1)^(0+128),w
  6232  05D9  0020               	movlb	0	; select bank0
  6233  05DA  00D8               	movwf	___ftneg@f1+1
  6234  05DB  0021               	movlb	1	; select bank1
  6235  05DC  0828               	movf	(ftoa@f+2)^(0+128),w
  6236  05DD  0020               	movlb	0	; select bank0
  6237  05DE  00D9               	movwf	___ftneg@f1+2
  6238  05DF  3196  266E  3185   	fcall	___ftneg
  6239  05E2  0020               	movlb	0	; select bank0
  6240  05E3  0857               	movf	?___ftneg,w
  6241  05E4  0021               	movlb	1	; select bank1
  6242  05E5  00A6               	movwf	ftoa@f^(0+128)
  6243  05E6  0020               	movlb	0	; select bank0
  6244  05E7  0858               	movf	?___ftneg+1,w
  6245  05E8  0021               	movlb	1	; select bank1
  6246  05E9  00A7               	movwf	(ftoa@f+1)^(0+128)
  6247  05EA  0020               	movlb	0	; select bank0
  6248  05EB  0859               	movf	?___ftneg+2,w
  6249  05EC  0021               	movlb	1	; select bank1
  6250  05ED  00A8               	movwf	(ftoa@f+2)^(0+128)
  6251  05EE                     l2959:	
  6252  05EE  0021               	movlb	1	; select bank1
  6253  05EF  0826               	movf	ftoa@f^(0+128),w
  6254  05F0  0020               	movlb	0	; select bank0
  6255  05F1  00E7               	movwf	___fttol@f1
  6256  05F2  0021               	movlb	1	; select bank1
  6257  05F3  0827               	movf	(ftoa@f+1)^(0+128),w
  6258  05F4  0020               	movlb	0	; select bank0
  6259  05F5  00E8               	movwf	___fttol@f1+1
  6260  05F6  0021               	movlb	1	; select bank1
  6261  05F7  0828               	movf	(ftoa@f+2)^(0+128),w
  6262  05F8  0020               	movlb	0	; select bank0
  6263  05F9  00E9               	movwf	___fttol@f1+2
  6264  05FA  318C  24A9  3185   	fcall	___fttol
  6265  05FD  0020               	movlb	0	; select bank0
  6266  05FE  086A               	movf	?___fttol+3,w
  6267  05FF  0021               	movlb	1	; select bank1
  6268  0600  00B1               	movwf	(ftoa@l+3)^(0+128)
  6269  0601  0020               	movlb	0	; select bank0
  6270  0602  0869               	movf	?___fttol+2,w
  6271  0603  0021               	movlb	1	; select bank1
  6272  0604  00B0               	movwf	(ftoa@l+2)^(0+128)
  6273  0605  0020               	movlb	0	; select bank0
  6274  0606  0868               	movf	?___fttol+1,w
  6275  0607  0021               	movlb	1	; select bank1
  6276  0608  00AF               	movwf	(ftoa@l+1)^(0+128)
  6277  0609  0020               	movlb	0	; select bank0
  6278  060A  0867               	movf	?___fttol,w
  6279  060B  0021               	movlb	1	; select bank1
  6280  060C  00AE               	movwf	ftoa@l^(0+128)
  6281  060D  0831               	movf	(ftoa@l+3)^(0+128),w
  6282  060E  0020               	movlb	0	; select bank0
  6283  060F  00AB               	movwf	___lltoft@c+3
  6284  0610  0021               	movlb	1	; select bank1
  6285  0611  0830               	movf	(ftoa@l+2)^(0+128),w
  6286  0612  0020               	movlb	0	; select bank0
  6287  0613  00AA               	movwf	___lltoft@c+2
  6288  0614  0021               	movlb	1	; select bank1
  6289  0615  082F               	movf	(ftoa@l+1)^(0+128),w
  6290  0616  0020               	movlb	0	; select bank0
  6291  0617  00A9               	movwf	___lltoft@c+1
  6292  0618  0021               	movlb	1	; select bank1
  6293  0619  082E               	movf	ftoa@l^(0+128),w
  6294  061A  0020               	movlb	0	; select bank0
  6295  061B  00A8               	movwf	___lltoft@c
  6296  061C  3187  27D4  3185   	fcall	___lltoft
  6297  061F  0020               	movlb	0	; select bank0
  6298  0620  0828               	movf	?___lltoft,w
  6299  0621  00BB               	movwf	___ftsub@f2
  6300  0622  0829               	movf	?___lltoft+1,w
  6301  0623  00BC               	movwf	___ftsub@f2+1
  6302  0624  082A               	movf	?___lltoft+2,w
  6303  0625  00BD               	movwf	___ftsub@f2+2
  6304  0626  0021               	movlb	1	; select bank1
  6305  0627  0826               	movf	ftoa@f^(0+128),w
  6306  0628  0020               	movlb	0	; select bank0
  6307  0629  00BE               	movwf	___ftsub@f1
  6308  062A  0021               	movlb	1	; select bank1
  6309  062B  0827               	movf	(ftoa@f+1)^(0+128),w
  6310  062C  0020               	movlb	0	; select bank0
  6311  062D  00BF               	movwf	___ftsub@f1+1
  6312  062E  0021               	movlb	1	; select bank1
  6313  062F  0828               	movf	(ftoa@f+2)^(0+128),w
  6314  0630  0020               	movlb	0	; select bank0
  6315  0631  00C0               	movwf	___ftsub@f1+2
  6316  0632  3197  2782  3185   	fcall	___ftsub
  6317  0635  0020               	movlb	0	; select bank0
  6318  0636  083B               	movf	?___ftsub,w
  6319  0637  0021               	movlb	1	; select bank1
  6320  0638  00A6               	movwf	ftoa@f^(0+128)
  6321  0639  0020               	movlb	0	; select bank0
  6322  063A  083C               	movf	?___ftsub+1,w
  6323  063B  0021               	movlb	1	; select bank1
  6324  063C  00A7               	movwf	(ftoa@f+1)^(0+128)
  6325  063D  0020               	movlb	0	; select bank0
  6326  063E  083D               	movf	?___ftsub+2,w
  6327  063F  0021               	movlb	1	; select bank1
  6328  0640  00A8               	movwf	(ftoa@f+2)^(0+128)
  6329  0641  0826               	movf	ftoa@f^(0+128),w
  6330  0642  0020               	movlb	0	; select bank0
  6331  0643  00DA               	movwf	___ftmul@f2
  6332  0644  0021               	movlb	1	; select bank1
  6333  0645  0827               	movf	(ftoa@f+1)^(0+128),w
  6334  0646  0020               	movlb	0	; select bank0
  6335  0647  00DB               	movwf	___ftmul@f2+1
  6336  0648  0021               	movlb	1	; select bank1
  6337  0649  0828               	movf	(ftoa@f+2)^(0+128),w
  6338  064A  0020               	movlb	0	; select bank0
  6339  064B  00DC               	movwf	___ftmul@f2+2
  6340  064C  3024               	movlw	36
  6341  064D  00D7               	movwf	___ftmul@f1
  6342  064E  3074               	movlw	116
  6343  064F  00D8               	movwf	___ftmul@f1+1
  6344  0650  3049               	movlw	73
  6345  0651  00D9               	movwf	___ftmul@f1+2
  6346  0652  318E  2697  3185   	fcall	___ftmul
  6347  0655  0020               	movlb	0	; select bank0
  6348  0656  0857               	movf	?___ftmul,w
  6349  0657  00E7               	movwf	___fttol@f1
  6350  0658  0858               	movf	?___ftmul+1,w
  6351  0659  00E8               	movwf	___fttol@f1+1
  6352  065A  0859               	movf	?___ftmul+2,w
  6353  065B  00E9               	movwf	___fttol@f1+2
  6354  065C  318C  24A9  3185   	fcall	___fttol
  6355  065F  0020               	movlb	0	; select bank0
  6356  0660  086A               	movf	?___fttol+3,w
  6357  0661  0021               	movlb	1	; select bank1
  6358  0662  00AD               	movwf	(ftoa@rem+3)^(0+128)
  6359  0663  0020               	movlb	0	; select bank0
  6360  0664  0869               	movf	?___fttol+2,w
  6361  0665  0021               	movlb	1	; select bank1
  6362  0666  00AC               	movwf	(ftoa@rem+2)^(0+128)
  6363  0667  0020               	movlb	0	; select bank0
  6364  0668  0868               	movf	?___fttol+1,w
  6365  0669  0021               	movlb	1	; select bank1
  6366  066A  00AB               	movwf	(ftoa@rem+1)^(0+128)
  6367  066B  0020               	movlb	0	; select bank0
  6368  066C  0867               	movf	?___fttol,w
  6369  066D  0021               	movlb	1	; select bank1
  6370  066E  00AA               	movwf	ftoa@rem^(0+128)
  6371  066F  3001               	movlw	low (STR_10| (0+32768))
  6372  0670  0020               	movlb	0	; select bank0
  6373  0671  00B8               	movwf	sprintf@f
  6374  0672  3098               	movlw	high (STR_10| (0+32768))
  6375  0673  00B9               	movwf	sprintf@f+1
  6376  0674  0021               	movlb	1	; select bank1
  6377  0675  0831               	movf	(ftoa@l+3)^(0+128),w
  6378  0676  0020               	movlb	0	; select bank0
  6379  0677  00BD               	movwf	?_sprintf+5
  6380  0678  0021               	movlb	1	; select bank1
  6381  0679  0830               	movf	(ftoa@l+2)^(0+128),w
  6382  067A  0020               	movlb	0	; select bank0
  6383  067B  00BC               	movwf	?_sprintf+4
  6384  067C  0021               	movlb	1	; select bank1
  6385  067D  082F               	movf	(ftoa@l+1)^(0+128),w
  6386  067E  0020               	movlb	0	; select bank0
  6387  067F  00BB               	movwf	?_sprintf+3
  6388  0680  0021               	movlb	1	; select bank1
  6389  0681  082E               	movf	ftoa@l^(0+128),w
  6390  0682  0020               	movlb	0	; select bank0
  6391  0683  00BA               	movwf	?_sprintf+2
  6392  0684  0021               	movlb	1	; select bank1
  6393  0685  082D               	movf	(ftoa@rem+3)^(0+128),w
  6394  0686  0020               	movlb	0	; select bank0
  6395  0687  00C1               	movwf	?_sprintf+9
  6396  0688  0021               	movlb	1	; select bank1
  6397  0689  082C               	movf	(ftoa@rem+2)^(0+128),w
  6398  068A  0020               	movlb	0	; select bank0
  6399  068B  00C0               	movwf	?_sprintf+8
  6400  068C  0021               	movlb	1	; select bank1
  6401  068D  082B               	movf	(ftoa@rem+1)^(0+128),w
  6402  068E  0020               	movlb	0	; select bank0
  6403  068F  00BF               	movwf	?_sprintf+7
  6404  0690  0021               	movlb	1	; select bank1
  6405  0691  082A               	movf	ftoa@rem^(0+128),w
  6406  0692  0020               	movlb	0	; select bank0
  6407  0693  00BE               	movwf	?_sprintf+6
  6408  0694  0021               	movlb	1	; select bank1
  6409  0695  0832               	movf	ftoa@cp^(0+128),w
  6410  0696  3180  202D         	fcall	_sprintf
  6411  0698  3053               	movlw	(low (ftoa@buf| (0+256)))& (0+255)
  6412  0699  0008               	return
  6413  069A                     __end_of_ftoa:	
  6414                           
  6415                           	psect	text22
  6416  002D                     __ptext22:	
  6417 ;; *************** function _sprintf *****************
  6418 ;; Defined at:
  6419 ;;		line 500 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\doprnt.c"
  6420 ;; Parameters:    Size  Location     Type
  6421 ;;  sp              1    wreg     PTR unsigned char 
  6422 ;;		 -> ftoa@buf(17), 
  6423 ;;  f               2   24[BANK0 ] PTR const unsigned char 
  6424 ;;		 -> STR_10(11), 
  6425 ;; Auto vars:     Size  Location     Type
  6426 ;;  sp              1   46[BANK0 ] PTR unsigned char 
  6427 ;;		 -> ftoa@buf(17), 
  6428 ;;  val             4   42[BANK0 ] unsigned long 
  6429 ;;  tmpval          4    0        struct .
  6430 ;;  prec            2   49[BANK0 ] int 
  6431 ;;  width           2   47[BANK0 ] int 
  6432 ;;  cp              2    0        PTR const unsigned char 
  6433 ;;  len             2    0        unsigned int 
  6434 ;;  c               1   51[BANK0 ] unsigned char 
  6435 ;;  ap              1   41[BANK0 ] PTR void [1]
  6436 ;;		 -> ?_sprintf(2), 
  6437 ;;  flag            1   40[BANK0 ] unsigned char 
  6438 ;; Return value:  Size  Location     Type
  6439 ;;                  2   24[BANK0 ] int 
  6440 ;; Registers used:
  6441 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6442 ;; Tracked objects:
  6443 ;;		On entry : 0/0
  6444 ;;		On exit  : 0/0
  6445 ;;		Unchanged: 0/0
  6446 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6447 ;;      Params:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6448 ;;      Locals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6449 ;;      Temps:          0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6450 ;;      Totals:         0      28       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6451 ;;Total ram usage:       28 bytes
  6452 ;; Hardware stack levels used:    1
  6453 ;; Hardware stack levels required when called:    8
  6454 ;; This function calls:
  6455 ;;		___lldiv
  6456 ;;		___llmod
  6457 ;;		___wmul
  6458 ;;		_isdigit
  6459 ;; This function is called by:
  6460 ;;		_ftoa
  6461 ;; This function uses a non-reentrant model
  6462 ;;
  6463                           
  6464                           
  6465                           ;psect for function _sprintf
  6466  002D                     _sprintf:	
  6467                           
  6468                           ;incstack = 0
  6469                           ; Regs used in _sprintf: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6470                           ;sprintf@sp stored from wreg
  6471  002D  0020               	movlb	0	; select bank0
  6472  002E  00CE               	movwf	sprintf@sp
  6473                           
  6474                           ;doprnt.c: 502: va_list ap;;doprnt.c: 507: char c;;doprnt.c: 509: int width;;doprnt.c: 5
      +                          12: int prec;;doprnt.c: 520: unsigned char flag;;doprnt.c: 535: union {;doprnt.c: 536: u
      +                          nsigned long vd;;doprnt.c: 537: double integ;;doprnt.c: 538: } tmpval;;doprnt.c: 540: un
      +                          signed long val;;doprnt.c: 541: unsigned len;;doprnt.c: 542: const char * cp;;doprnt.c: 
      +                          545: *ap = __va_start();
  6475  002F  303A               	movlw	(low ((?_sprintf| 0+2)))& (0+255)
  6476  0030  00C2               	movwf	??_sprintf
  6477  0031  0842               	movf	??_sprintf,w
  6478  0032  00C9               	movwf	sprintf@ap
  6479  0033                     l2761:	
  6480                           ;doprnt.c: 548: while((c = *f++)) {
  6481                           
  6482  0033  0839               	movf	sprintf@f+1,w
  6483  0034  00C3               	movwf	??_sprintf+1
  6484  0035  0838               	movf	sprintf@f,w
  6485  0036  00C2               	movwf	??_sprintf
  6486  0037  0AB8               	incf	sprintf@f,f
  6487  0038  1903               	skipnz
  6488  0039  0AB9               	incf	sprintf@f+1,f
  6489  003A  0842               	movf	??_sprintf,w
  6490  003B  0084               	movwf	4
  6491  003C  0843               	movf	??_sprintf+1,w
  6492  003D  0085               	movwf	5
  6493  003E  0800               	movf	0,w	;code access
  6494  003F  00C4               	movwf	??_sprintf+2
  6495  0040  0844               	movf	??_sprintf+2,w
  6496  0041  00D3               	movwf	sprintf@c
  6497  0042  0853               	movf	sprintf@c,w
  6498  0043  1903               	btfsc	3,2
  6499  0044  29F4               	goto	l2763
  6500                           
  6501                           ;doprnt.c: 550: if(c != '%')
  6502  0045  3025               	movlw	37
  6503  0046  0653               	xorwf	sprintf@c,w
  6504  0047  1903               	btfsc	3,2
  6505  0048  2856               	goto	l2673
  6506                           
  6507                           ;doprnt.c: 552: {;doprnt.c: 553: ((*sp++ = (c)));
  6508  0049  0853               	movf	sprintf@c,w
  6509  004A  00C2               	movwf	??_sprintf
  6510  004B  084E               	movf	sprintf@sp,w
  6511  004C  0086               	movwf	6
  6512  004D  3001               	movlw	1	; select bank2/3
  6513  004E  0087               	movwf	7
  6514  004F  0842               	movf	??_sprintf,w
  6515  0050  0081               	movwf	1
  6516  0051  3001               	movlw	1
  6517  0052  00C2               	movwf	??_sprintf
  6518  0053  0842               	movf	??_sprintf,w
  6519  0054  07CE               	addwf	sprintf@sp,f
  6520                           
  6521                           ;doprnt.c: 554: continue;
  6522  0055  2833               	goto	l2761
  6523  0056                     l2673:	
  6524                           
  6525                           ;doprnt.c: 555: };doprnt.c: 558: width = 0;
  6526  0056  01CF               	clrf	sprintf@width
  6527  0057  01D0               	clrf	sprintf@width+1
  6528                           
  6529                           ;doprnt.c: 560: flag = 0;
  6530  0058  01C8               	clrf	sprintf@flag
  6531                           
  6532                           ;doprnt.c: 609: if(isdigit((unsigned)*f)) {
  6533  0059  0838               	movf	sprintf@f,w
  6534  005A  0084               	movwf	4
  6535  005B  0839               	movf	sprintf@f+1,w
  6536  005C  0085               	movwf	5
  6537  005D  0800               	movf	0,w	;code access
  6538  005E  3196  2684  3180   	fcall	_isdigit
  6539  0061  1C03               	btfss	3,0
  6540  0062  2894               	goto	l2687
  6541                           
  6542                           ;doprnt.c: 610: width = 0;
  6543  0063  0020               	movlb	0	; select bank0
  6544  0064  01CF               	clrf	sprintf@width
  6545  0065  01D0               	clrf	sprintf@width+1
  6546  0066                     l2679:	
  6547                           ;doprnt.c: 611: do {
  6548                           
  6549                           
  6550                           ;doprnt.c: 612: width *= 10;
  6551  0066  300A               	movlw	10
  6552  0067  0020               	movlb	0	; select bank0
  6553  0068  00A0               	movwf	___wmul@multiplier
  6554  0069  3000               	movlw	0
  6555  006A  00A1               	movwf	___wmul@multiplier+1
  6556  006B  0850               	movf	sprintf@width+1,w
  6557  006C  00A3               	movwf	___wmul@multiplicand+1
  6558  006D  084F               	movf	sprintf@width,w
  6559  006E  00A2               	movwf	___wmul@multiplicand
  6560  006F  3197  272E  3180   	fcall	___wmul
  6561  0072  0020               	movlb	0	; select bank0
  6562  0073  0821               	movf	?___wmul+1,w
  6563  0074  00D0               	movwf	sprintf@width+1
  6564  0075  0820               	movf	?___wmul,w
  6565  0076  00CF               	movwf	sprintf@width
  6566                           
  6567                           ;doprnt.c: 613: width += *f++ - '0';
  6568  0077  0838               	movf	sprintf@f,w
  6569  0078  0084               	movwf	4
  6570  0079  0839               	movf	sprintf@f+1,w
  6571  007A  0085               	movwf	5
  6572  007B  0800               	movf	0,w	;code access
  6573  007C  3ED0               	addlw	208
  6574  007D  00C2               	movwf	??_sprintf
  6575  007E  30FF               	movlw	255
  6576  007F  1803               	skipnc
  6577  0080  3000               	movlw	0
  6578  0081  00C3               	movwf	??_sprintf+1
  6579  0082  0842               	movf	??_sprintf,w
  6580  0083  07CF               	addwf	sprintf@width,f
  6581  0084  0843               	movf	??_sprintf+1,w
  6582  0085  3DD0               	addwfc	sprintf@width+1,f
  6583  0086  3001               	movlw	1
  6584  0087  07B8               	addwf	sprintf@f,f
  6585  0088  3000               	movlw	0
  6586  0089  3DB9               	addwfc	sprintf@f+1,f
  6587                           
  6588                           ;doprnt.c: 614: } while(isdigit((unsigned)*f));
  6589  008A  0838               	movf	sprintf@f,w
  6590  008B  0084               	movwf	4
  6591  008C  0839               	movf	sprintf@f+1,w
  6592  008D  0085               	movwf	5
  6593  008E  0800               	movf	0,w	;code access
  6594  008F  3196  2684  3180   	fcall	_isdigit
  6595  0092  1803               	btfsc	3,0
  6596  0093  2866               	goto	l2679
  6597  0094                     l2687:	
  6598                           
  6599                           ;doprnt.c: 620: };doprnt.c: 623: if(*f == '.') {
  6600  0094  0020               	movlb	0	; select bank0
  6601  0095  0838               	movf	sprintf@f,w
  6602  0096  0084               	movwf	4
  6603  0097  0839               	movf	sprintf@f+1,w
  6604  0098  0085               	movwf	5
  6605  0099  0012               	moviw fsr0++
  6606  009A  3A2E               	xorlw	46
  6607  009B  1D03               	btfss	3,2
  6608  009C  28D2               	goto	l2699
  6609                           
  6610                           ;doprnt.c: 625: f++;
  6611  009D  3001               	movlw	1
  6612  009E  07B8               	addwf	sprintf@f,f
  6613  009F  3000               	movlw	0
  6614  00A0  3DB9               	addwfc	sprintf@f+1,f
  6615                           
  6616                           ;doprnt.c: 639: {;doprnt.c: 640: prec = 0;
  6617  00A1  01D1               	clrf	sprintf@prec
  6618  00A2  01D2               	clrf	sprintf@prec+1
  6619  00A3                     l2697:	
  6620                           ;doprnt.c: 641: while(isdigit((unsigned)*f))
  6621                           
  6622  00A3  0838               	movf	sprintf@f,w
  6623  00A4  0084               	movwf	4
  6624  00A5  0839               	movf	sprintf@f+1,w
  6625  00A6  0085               	movwf	5
  6626  00A7  0800               	movf	0,w	;code access
  6627  00A8  3196  2684  3180   	fcall	_isdigit
  6628  00AB  1C03               	btfss	3,0
  6629  00AC  28DD               	goto	l2705
  6630                           
  6631                           ;doprnt.c: 642: prec = prec*10 + *f++ - '0';
  6632  00AD  0020               	movlb	0	; select bank0
  6633  00AE  0838               	movf	sprintf@f,w
  6634  00AF  0084               	movwf	4
  6635  00B0  0839               	movf	sprintf@f+1,w
  6636  00B1  0085               	movwf	5
  6637  00B2  0800               	movf	0,w	;code access
  6638  00B3  00C2               	movwf	??_sprintf
  6639  00B4  01C3               	clrf	??_sprintf+1
  6640  00B5  0852               	movf	sprintf@prec+1,w
  6641  00B6  00A1               	movwf	___wmul@multiplier+1
  6642  00B7  0851               	movf	sprintf@prec,w
  6643  00B8  00A0               	movwf	___wmul@multiplier
  6644  00B9  300A               	movlw	10
  6645  00BA  00A2               	movwf	___wmul@multiplicand
  6646  00BB  3000               	movlw	0
  6647  00BC  00A3               	movwf	___wmul@multiplicand+1
  6648  00BD  3197  272E  3180   	fcall	___wmul
  6649  00C0  0020               	movlb	0	; select bank0
  6650  00C1  0842               	movf	??_sprintf,w
  6651  00C2  0720               	addwf	?___wmul,w
  6652  00C3  00C4               	movwf	??_sprintf+2
  6653  00C4  0843               	movf	??_sprintf+1,w
  6654  00C5  3D21               	addwfc	?___wmul+1,w
  6655  00C6  00C5               	movwf	??_sprintf+3
  6656  00C7  0844               	movf	??_sprintf+2,w
  6657  00C8  3ED0               	addlw	208
  6658  00C9  00D1               	movwf	sprintf@prec
  6659  00CA  30FF               	movlw	255
  6660  00CB  3D45               	addwfc	??_sprintf+3,w
  6661  00CC  00D2               	movwf	sprintf@prec+1
  6662  00CD  3001               	movlw	1
  6663  00CE  07B8               	addwf	sprintf@f,f
  6664  00CF  3000               	movlw	0
  6665  00D0  3DB9               	addwfc	sprintf@f+1,f
  6666  00D1  28A3               	goto	l2697
  6667  00D2                     l2699:	
  6668                           ;doprnt.c: 643: };doprnt.c: 644: } else {
  6669                           
  6670                           
  6671                           ;doprnt.c: 645: prec = 0;
  6672  00D2  0020               	movlb	0	; select bank0
  6673  00D3  01D1               	clrf	sprintf@prec
  6674  00D4  01D2               	clrf	sprintf@prec+1
  6675                           
  6676                           ;doprnt.c: 654: switch(c = *f++) {
  6677                           
  6678                           ;doprnt.c: 649: };doprnt.c: 652: loop:
  6679  00D5  28DD               	goto	l2705
  6680  00D6                     l457:	
  6681                           ;doprnt.c: 660: case 'l':
  6682                           
  6683                           ;doprnt.c: 657: goto alldone;
  6684                           
  6685                           ;doprnt.c: 656: case 0:
  6686                           
  6687                           
  6688                           ;doprnt.c: 662: flag |= 0x10;
  6689  00D6  1648               	bsf	sprintf@flag,4
  6690                           
  6691                           ;doprnt.c: 663: goto loop;
  6692  00D7  28DD               	goto	l2705
  6693  00D8                     l2701:	
  6694                           ;doprnt.c: 836: case 'u':
  6695                           
  6696                           ;doprnt.c: 832: continue;
  6697                           
  6698                           ;doprnt.c: 821: default:
  6699                           
  6700                           
  6701                           ;doprnt.c: 837: flag |= 0xC0;
  6702  00D8  30C0               	movlw	192
  6703  00D9  00C2               	movwf	??_sprintf
  6704  00DA  0842               	movf	??_sprintf,w
  6705  00DB  04C8               	iorwf	sprintf@flag,f
  6706                           
  6707                           ;doprnt.c: 841: }
  6708                           
  6709                           ;doprnt.c: 838: break;
  6710  00DC  28F5               	goto	l460
  6711  00DD                     l2705:	
  6712  00DD  0020               	movlb	0	; select bank0
  6713  00DE  0839               	movf	sprintf@f+1,w
  6714  00DF  00C3               	movwf	??_sprintf+1
  6715  00E0  0838               	movf	sprintf@f,w
  6716  00E1  00C2               	movwf	??_sprintf
  6717  00E2  0AB8               	incf	sprintf@f,f
  6718  00E3  1903               	skipnz
  6719  00E4  0AB9               	incf	sprintf@f+1,f
  6720  00E5  0842               	movf	??_sprintf,w
  6721  00E6  0084               	movwf	4
  6722  00E7  0843               	movf	??_sprintf+1,w
  6723  00E8  0085               	movwf	5
  6724  00E9  0800               	movf	0,w	;code access
  6725  00EA  00D3               	movwf	sprintf@c
  6726                           
  6727                           ; Switch size 1, requested type "space"
  6728                           ; Number of cases is 3, Range of values is 0 to 117
  6729                           ; switch strategies available:
  6730                           ; Name         Instructions Cycles
  6731                           ; simple_byte           10     6 (average)
  6732                           ; direct_byte          242     6 (fixed)
  6733                           ; jumptable            260     6 (fixed)
  6734                           ;	Chosen strategy is simple_byte
  6735  00EB  3A00               	xorlw	0	; case 0
  6736  00EC  1903               	skipnz
  6737  00ED  29F4               	goto	l2763
  6738  00EE  3A6C               	xorlw	108	; case 108
  6739  00EF  1903               	skipnz
  6740  00F0  28D6               	goto	l457
  6741  00F1  3A19               	xorlw	25	; case 117
  6742  00F2  1903               	skipnz
  6743  00F3  28D8               	goto	l2701
  6744  00F4  2833               	goto	l2761
  6745  00F5                     l460:	
  6746                           
  6747                           ;doprnt.c: 1292: {;doprnt.c: 1300: if(flag & 0x10)
  6748  00F5  1E48               	btfss	sprintf@flag,4
  6749  00F6  2904               	goto	l2711
  6750                           
  6751                           ;doprnt.c: 1301: val = (*(unsigned long *)__va_arg((*(unsigned long **)ap), (unsigned lo
      +                          ng)0));
  6752  00F7  0849               	movf	sprintf@ap,w
  6753  00F8  0086               	movwf	6
  6754  00F9  0187               	clrf	7
  6755  00FA  3F40               	moviw [0]fsr1
  6756  00FB  00CA               	movwf	sprintf@val
  6757  00FC  3F41               	moviw [1]fsr1
  6758  00FD  00CB               	movwf	sprintf@val+1
  6759  00FE  3F42               	moviw [2]fsr1
  6760  00FF  00CC               	movwf	sprintf@val+2
  6761  0100  3F43               	moviw [3]fsr1
  6762  0101  00CD               	movwf	sprintf@val+3
  6763  0102  3004               	movlw	4
  6764  0103  2912               	goto	L2
  6765  0104                     l2711:	
  6766                           
  6767                           ;doprnt.c: 1302: else;doprnt.c: 1305: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (
      +                          unsigned)0));
  6768  0104  0849               	movf	sprintf@ap,w
  6769  0105  0086               	movwf	6
  6770  0106  0187               	clrf	7
  6771  0107  3F40               	moviw [0]fsr1
  6772  0108  00C2               	movwf	??_sprintf
  6773  0109  3F41               	moviw [1]fsr1
  6774  010A  00C3               	movwf	??_sprintf+1
  6775  010B  0842               	movf	??_sprintf,w
  6776  010C  00CA               	movwf	sprintf@val
  6777  010D  0843               	movf	??_sprintf+1,w
  6778  010E  00CB               	movwf	sprintf@val+1
  6779  010F  01CC               	clrf	sprintf@val+2
  6780  0110  01CD               	clrf	sprintf@val+3
  6781  0111  3002               	movlw	2
  6782  0112                     L2:	
  6783  0112  00C2               	movwf	??_sprintf
  6784  0113  0842               	movf	??_sprintf,w
  6785  0114  07C9               	addwf	sprintf@ap,f
  6786                           
  6787                           ;doprnt.c: 1306: };doprnt.c: 1309: if(prec == 0 && val == 0)
  6788  0115  0851               	movf	sprintf@prec,w
  6789  0116  0452               	iorwf	sprintf@prec+1,w
  6790  0117  1D03               	btfss	3,2
  6791  0118  2923               	goto	l2721
  6792  0119  084D               	movf	sprintf@val+3,w
  6793  011A  044C               	iorwf	sprintf@val+2,w
  6794  011B  044B               	iorwf	sprintf@val+1,w
  6795  011C  044A               	iorwf	sprintf@val,w
  6796  011D  1D03               	skipz
  6797  011E  2923               	goto	l2721
  6798                           
  6799                           ;doprnt.c: 1310: prec++;
  6800  011F  3001               	movlw	1
  6801  0120  07D1               	addwf	sprintf@prec,f
  6802  0121  3000               	movlw	0
  6803  0122  3DD2               	addwfc	sprintf@prec+1,f
  6804  0123                     l2721:	
  6805                           
  6806                           ;doprnt.c: 1324: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  6807  0123  01D3               	clrf	sprintf@c
  6808  0124  0AD3               	incf	sprintf@c,f
  6809  0125  300A               	movlw	10
  6810  0126  0653               	xorwf	sprintf@c,w
  6811  0127  1903               	btfsc	3,2
  6812  0128  2956               	goto	l2733
  6813  0129                     l2727:	
  6814                           
  6815                           ;doprnt.c: 1325: if(val < dpowers[c])
  6816  0129  0853               	movf	sprintf@c,w
  6817  012A  00C2               	movwf	??_sprintf
  6818  012B  01C3               	clrf	??_sprintf+1
  6819  012C  35C2               	lslf	??_sprintf,f
  6820  012D  0DC3               	rlf	??_sprintf+1,f
  6821  012E  35C2               	lslf	??_sprintf,f
  6822  012F  0DC3               	rlf	??_sprintf+1,f
  6823  0130  3000               	movlw	low (_dpowers| (0+32768))
  6824  0131  0742               	addwf	??_sprintf,w
  6825  0132  0084               	movwf	4
  6826  0133  3090               	movlw	high (_dpowers| (0+32768))
  6827  0134  3D43               	addwfc	??_sprintf+1,w
  6828  0135  0085               	movwf	5
  6829  0136  3F00               	moviw [0]fsr0
  6830  0137  00C4               	movwf	??_sprintf+2
  6831  0138  3F01               	moviw [1]fsr0
  6832  0139  00C5               	movwf	??_sprintf+3
  6833  013A  3F02               	moviw [2]fsr0
  6834  013B  00C6               	movwf	??_sprintf+4
  6835  013C  3F03               	moviw [3]fsr0
  6836  013D  00C7               	movwf	??_sprintf+5
  6837  013E  0847               	movf	??_sprintf+5,w
  6838  013F  024D               	subwf	sprintf@val+3,w
  6839  0140  1D03               	skipz
  6840  0141  294C               	goto	u2585
  6841  0142  0846               	movf	??_sprintf+4,w
  6842  0143  024C               	subwf	sprintf@val+2,w
  6843  0144  1D03               	skipz
  6844  0145  294C               	goto	u2585
  6845  0146  0845               	movf	??_sprintf+3,w
  6846  0147  024B               	subwf	sprintf@val+1,w
  6847  0148  1D03               	skipz
  6848  0149  294C               	goto	u2585
  6849  014A  0844               	movf	??_sprintf+2,w
  6850  014B  024A               	subwf	sprintf@val,w
  6851  014C                     u2585:	
  6852  014C  1C03               	btfss	3,0
  6853  014D  2956               	goto	l2733
  6854                           
  6855                           ;doprnt.c: 1326: break;
  6856  014E  3001               	movlw	1
  6857  014F  00C2               	movwf	??_sprintf
  6858  0150  0842               	movf	??_sprintf,w
  6859  0151  07D3               	addwf	sprintf@c,f
  6860  0152  300A               	movlw	10
  6861  0153  0653               	xorwf	sprintf@c,w
  6862  0154  1D03               	btfss	3,2
  6863  0155  2929               	goto	l2727
  6864  0156                     l2733:	
  6865                           
  6866                           ;doprnt.c: 1358: if(c < prec)
  6867  0156  0852               	movf	sprintf@prec+1,w
  6868  0157  3A80               	xorlw	128
  6869  0158  3C80               	sublw	128
  6870  0159  1D03               	skipz
  6871  015A  295D               	goto	u2605
  6872  015B  0851               	movf	sprintf@prec,w
  6873  015C  0253               	subwf	sprintf@c,w
  6874  015D                     u2605:	
  6875  015D  1803               	skipnc
  6876  015E  2965               	goto	l2737
  6877                           
  6878                           ;doprnt.c: 1359: c = prec;
  6879  015F  0020               	movlb	0	; select bank0
  6880  0160  0851               	movf	sprintf@prec,w
  6881  0161  00C2               	movwf	??_sprintf
  6882  0162  0842               	movf	??_sprintf,w
  6883  0163  00D3               	movwf	sprintf@c
  6884  0164  2979               	goto	l468
  6885  0165                     l2737:	
  6886                           
  6887                           ;doprnt.c: 1360: else if(prec < c)
  6888  0165  0020               	movlb	0	; select bank0
  6889  0166  0852               	movf	sprintf@prec+1,w
  6890  0167  3A80               	xorlw	128
  6891  0168  00C2               	movwf	??_sprintf
  6892  0169  3080               	movlw	128
  6893  016A  0242               	subwf	??_sprintf,w
  6894  016B  1D03               	skipz
  6895  016C  296F               	goto	u2615
  6896  016D  0853               	movf	sprintf@c,w
  6897  016E  0251               	subwf	sprintf@prec,w
  6898  016F                     u2615:	
  6899  016F  1803               	skipnc
  6900  0170  2979               	goto	l468
  6901                           
  6902                           ;doprnt.c: 1361: prec = c;
  6903  0171  0020               	movlb	0	; select bank0
  6904  0172  0853               	movf	sprintf@c,w
  6905  0173  00C2               	movwf	??_sprintf
  6906  0174  01C3               	clrf	??_sprintf+1
  6907  0175  0842               	movf	??_sprintf,w
  6908  0176  00D1               	movwf	sprintf@prec
  6909  0177  0843               	movf	??_sprintf+1,w
  6910  0178  00D2               	movwf	sprintf@prec+1
  6911  0179                     l468:	
  6912                           
  6913                           ;doprnt.c: 1400: if(width > c)
  6914  0179  0020               	movlb	0	; select bank0
  6915  017A  0850               	movf	sprintf@width+1,w
  6916  017B  3A80               	xorlw	128
  6917  017C  3C80               	sublw	128
  6918  017D  1D03               	skipz
  6919  017E  2981               	goto	u2625
  6920  017F  084F               	movf	sprintf@width,w
  6921  0180  0253               	subwf	sprintf@c,w
  6922  0181                     u2625:	
  6923  0181  1803               	skipnc
  6924  0182  298C               	goto	l2743
  6925                           
  6926                           ;doprnt.c: 1401: width -= c;
  6927  0183  0020               	movlb	0	; select bank0
  6928  0184  0853               	movf	sprintf@c,w
  6929  0185  00C2               	movwf	??_sprintf
  6930  0186  01C3               	clrf	??_sprintf+1
  6931  0187  0842               	movf	??_sprintf,w
  6932  0188  02CF               	subwf	sprintf@width,f
  6933  0189  0843               	movf	??_sprintf+1,w
  6934  018A  3BD0               	subwfb	sprintf@width+1,f
  6935  018B  298F               	goto	l2745
  6936  018C                     l2743:	
  6937                           
  6938                           ;doprnt.c: 1402: else;doprnt.c: 1403: width = 0;
  6939  018C  0020               	movlb	0	; select bank0
  6940  018D  01CF               	clrf	sprintf@width
  6941  018E  01D0               	clrf	sprintf@width+1
  6942  018F                     l2745:	
  6943                           
  6944                           ;doprnt.c: 1441: {;doprnt.c: 1443: if(width;doprnt.c: 1447: )
  6945  018F  084F               	movf	sprintf@width,w
  6946  0190  0450               	iorwf	sprintf@width+1,w
  6947  0191  1903               	btfsc	3,2
  6948  0192  29E9               	goto	l2759
  6949                           
  6950                           ;doprnt.c: 1449: ((*sp++ = (' ')));
  6951                           
  6952                           ;doprnt.c: 1448: do
  6953  0193  3020               	movlw	32
  6954  0194  00C2               	movwf	??_sprintf
  6955  0195  084E               	movf	sprintf@sp,w
  6956  0196  0086               	movwf	6
  6957  0197  3001               	movlw	1	; select bank2/3
  6958  0198  0087               	movwf	7
  6959  0199  0842               	movf	??_sprintf,w
  6960  019A  0081               	movwf	1
  6961  019B  3001               	movlw	1
  6962  019C  00C2               	movwf	??_sprintf
  6963  019D  0842               	movf	??_sprintf,w
  6964  019E  07CE               	addwf	sprintf@sp,f
  6965                           
  6966                           ;doprnt.c: 1450: while(--width);
  6967  019F  30FF               	movlw	255
  6968  01A0  07CF               	addwf	sprintf@width,f
  6969  01A1  30FF               	movlw	255
  6970  01A2  3DD0               	addwfc	sprintf@width+1,f
  6971  01A3  298F               	goto	l2745
  6972  01A4                     l2753:	
  6973                           ;doprnt.c: 1488: };doprnt.c: 1493: while(prec--) {
  6974                           
  6975                           
  6976                           ;doprnt.c: 1497: {;doprnt.c: 1508: c = (val / dpowers[prec]) % 10 + '0';
  6977  01A4  3000               	movlw	0
  6978  01A5  00B1               	movwf	___llmod@divisor+3
  6979  01A6  3000               	movlw	0
  6980  01A7  00B0               	movwf	___llmod@divisor+2
  6981  01A8  3000               	movlw	0
  6982  01A9  00AF               	movwf	___llmod@divisor+1
  6983  01AA  300A               	movlw	10
  6984  01AB  00AE               	movwf	___llmod@divisor
  6985  01AC  0852               	movf	sprintf@prec+1,w
  6986  01AD  0085               	movwf	5
  6987  01AE  0851               	movf	sprintf@prec,w
  6988  01AF  0084               	movwf	4
  6989  01B0  3584               	lslf	4,f
  6990  01B1  0D85               	rlf	5,f
  6991  01B2  3584               	lslf	4,f
  6992  01B3  0D85               	rlf	5,f
  6993  01B4  3000               	movlw	low (_dpowers| (0+32768))
  6994  01B5  0784               	addwf	4,f
  6995  01B6  3090               	movlw	high (_dpowers| (0+32768))
  6996  01B7  3D85               	addwfc	5,f
  6997  01B8  3F00               	moviw [0]fsr0
  6998  01B9  00A0               	movwf	___lldiv@divisor
  6999  01BA  3F01               	moviw [1]fsr0
  7000  01BB  00A1               	movwf	___lldiv@divisor+1
  7001  01BC  3F02               	moviw [2]fsr0
  7002  01BD  00A2               	movwf	___lldiv@divisor+2
  7003  01BE  3F03               	moviw [3]fsr0
  7004  01BF  00A3               	movwf	___lldiv@divisor+3
  7005  01C0  084D               	movf	sprintf@val+3,w
  7006  01C1  00A7               	movwf	___lldiv@dividend+3
  7007  01C2  084C               	movf	sprintf@val+2,w
  7008  01C3  00A6               	movwf	___lldiv@dividend+2
  7009  01C4  084B               	movf	sprintf@val+1,w
  7010  01C5  00A5               	movwf	___lldiv@dividend+1
  7011  01C6  084A               	movf	sprintf@val,w
  7012  01C7  00A4               	movwf	___lldiv@dividend
  7013  01C8  318B  23F1  3180   	fcall	___lldiv
  7014  01CB  0020               	movlb	0	; select bank0
  7015  01CC  0823               	movf	?___lldiv+3,w
  7016  01CD  00B5               	movwf	___llmod@dividend+3
  7017  01CE  0822               	movf	?___lldiv+2,w
  7018  01CF  00B4               	movwf	___llmod@dividend+2
  7019  01D0  0821               	movf	?___lldiv+1,w
  7020  01D1  00B3               	movwf	___llmod@dividend+1
  7021  01D2  0820               	movf	?___lldiv,w
  7022  01D3  00B2               	movwf	___llmod@dividend
  7023  01D4  318A  22D9  3180   	fcall	___llmod
  7024  01D7  0020               	movlb	0	; select bank0
  7025  01D8  082E               	movf	?___llmod,w
  7026  01D9  3E30               	addlw	48
  7027  01DA  00C2               	movwf	??_sprintf
  7028  01DB  0842               	movf	??_sprintf,w
  7029  01DC  00D3               	movwf	sprintf@c
  7030                           
  7031                           ;doprnt.c: 1542: };doprnt.c: 1543: ((*sp++ = (c)));
  7032  01DD  0853               	movf	sprintf@c,w
  7033  01DE  00C2               	movwf	??_sprintf
  7034  01DF  084E               	movf	sprintf@sp,w
  7035  01E0  0086               	movwf	6
  7036  01E1  3001               	movlw	1	; select bank2/3
  7037  01E2  0087               	movwf	7
  7038  01E3  0842               	movf	??_sprintf,w
  7039  01E4  0081               	movwf	1
  7040  01E5  3001               	movlw	1
  7041  01E6  00C2               	movwf	??_sprintf
  7042  01E7  0842               	movf	??_sprintf,w
  7043  01E8  07CE               	addwf	sprintf@sp,f
  7044  01E9                     l2759:	
  7045  01E9  30FF               	movlw	255
  7046  01EA  07D1               	addwf	sprintf@prec,f
  7047  01EB  30FF               	movlw	255
  7048  01EC  3DD2               	addwfc	sprintf@prec+1,f
  7049  01ED  0A51               	incf	sprintf@prec,w
  7050  01EE  1D03               	skipz
  7051  01EF  29A4               	goto	l2753
  7052  01F0  0A52               	incf	sprintf@prec+1,w
  7053  01F1  1903               	btfsc	3,2
  7054  01F2  2833               	goto	l2761
  7055  01F3  29A4               	goto	l2753
  7056  01F4                     l2763:	
  7057                           ;doprnt.c: 1544: };doprnt.c: 1552: };doprnt.c: 1554: alldone:
  7058                           
  7059                           
  7060                           ;doprnt.c: 1557: *sp = 0;
  7061  01F4  084E               	movf	sprintf@sp,w
  7062  01F5  0086               	movwf	6
  7063  01F6  3001               	movlw	1	; select bank2/3
  7064  01F7  0087               	movwf	7
  7065  01F8  0181               	clrf	1
  7066  01F9  0008               	return
  7067  01FA                     __end_of_sprintf:	
  7068                           ;doprnt.c: 1559: return 0;;	Return value of _sprintf is never used
  7069                           
  7070                           
  7071                           	psect	text23
  7072  1684                     __ptext23:	
  7073 ;; *************** function _isdigit *****************
  7074 ;; Defined at:
  7075 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\isdigit.c"
  7076 ;; Parameters:    Size  Location     Type
  7077 ;;  c               1    wreg     unsigned char 
  7078 ;; Auto vars:     Size  Location     Type
  7079 ;;  c               1    1[BANK0 ] unsigned char 
  7080 ;; Return value:  Size  Location     Type
  7081 ;;		None               void
  7082 ;; Registers used:
  7083 ;;		wreg, status,2, status,0
  7084 ;; Tracked objects:
  7085 ;;		On entry : 0/0
  7086 ;;		On exit  : 0/0
  7087 ;;		Unchanged: 0/0
  7088 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7089 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7090 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7091 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7092 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7093 ;;Total ram usage:        2 bytes
  7094 ;; Hardware stack levels used:    1
  7095 ;; Hardware stack levels required when called:    7
  7096 ;; This function calls:
  7097 ;;		Nothing
  7098 ;; This function is called by:
  7099 ;;		_sprintf
  7100 ;; This function uses a non-reentrant model
  7101 ;;
  7102                           
  7103                           
  7104                           ;psect for function _isdigit
  7105  1684                     _isdigit:	
  7106                           
  7107                           ;incstack = 0
  7108                           ; Regs used in _isdigit: [wreg+status,2+status,0]
  7109                           ;isdigit@c stored from wreg
  7110  1684  0020               	movlb	0	; select bank0
  7111  1685  00A1               	movwf	isdigit@c
  7112  1686  01A0               	clrf	_isdigit$1811
  7113  1687  303A               	movlw	58
  7114  1688  0221               	subwf	isdigit@c,w
  7115  1689  1803               	skipnc
  7116  168A  2E91               	goto	l2515
  7117  168B  3030               	movlw	48
  7118  168C  0221               	subwf	isdigit@c,w
  7119  168D  1C03               	skipc
  7120  168E  2E91               	goto	l2515
  7121  168F  01A0               	clrf	_isdigit$1811
  7122  1690  0AA0               	incf	_isdigit$1811,f
  7123  1691                     l2515:	
  7124  1691  0C20               	rrf	_isdigit$1811,w
  7125  1692  0008               	return
  7126  1693                     __end_of_isdigit:	
  7127                           
  7128                           	psect	text24
  7129  172E                     __ptext24:	
  7130 ;; *************** function ___wmul *****************
  7131 ;; Defined at:
  7132 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\Umul16.c"
  7133 ;; Parameters:    Size  Location     Type
  7134 ;;  multiplier      2    0[BANK0 ] unsigned int 
  7135 ;;  multiplicand    2    2[BANK0 ] unsigned int 
  7136 ;; Auto vars:     Size  Location     Type
  7137 ;;  product         2    4[BANK0 ] unsigned int 
  7138 ;; Return value:  Size  Location     Type
  7139 ;;                  2    0[BANK0 ] unsigned int 
  7140 ;; Registers used:
  7141 ;;		wreg, status,2, status,0
  7142 ;; Tracked objects:
  7143 ;;		On entry : 0/0
  7144 ;;		On exit  : 0/0
  7145 ;;		Unchanged: 0/0
  7146 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7147 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7148 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7149 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7150 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7151 ;;Total ram usage:        6 bytes
  7152 ;; Hardware stack levels used:    1
  7153 ;; Hardware stack levels required when called:    7
  7154 ;; This function calls:
  7155 ;;		Nothing
  7156 ;; This function is called by:
  7157 ;;		_sprintf
  7158 ;; This function uses a non-reentrant model
  7159 ;;
  7160                           
  7161                           
  7162                           ;psect for function ___wmul
  7163  172E                     ___wmul:	
  7164                           
  7165                           ;incstack = 0
  7166                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  7167  172E  0020               	movlb	0	; select bank0
  7168  172F  01A4               	clrf	___wmul@product
  7169  1730  01A5               	clrf	___wmul@product+1
  7170  1731                     l2521:	
  7171  1731  1C20               	btfss	___wmul@multiplier,0
  7172  1732  2F37               	goto	l483
  7173  1733  0822               	movf	___wmul@multiplicand,w
  7174  1734  07A4               	addwf	___wmul@product,f
  7175  1735  0823               	movf	___wmul@multiplicand+1,w
  7176  1736  3DA5               	addwfc	___wmul@product+1,f
  7177  1737                     l483:	
  7178  1737  3001               	movlw	1
  7179  1738                     u2105:	
  7180  1738  35A2               	lslf	___wmul@multiplicand,f
  7181  1739  0DA3               	rlf	___wmul@multiplicand+1,f
  7182  173A  0B89               	decfsz	9,f
  7183  173B  2F38               	goto	u2105
  7184  173C  3001               	movlw	1
  7185  173D                     u2115:	
  7186  173D  36A1               	lsrf	___wmul@multiplier+1,f
  7187  173E  0CA0               	rrf	___wmul@multiplier,f
  7188  173F  0B89               	decfsz	9,f
  7189  1740  2F3D               	goto	u2115
  7190  1741  0820               	movf	___wmul@multiplier,w
  7191  1742  0421               	iorwf	___wmul@multiplier+1,w
  7192  1743  1D03               	btfss	3,2
  7193  1744  2F31               	goto	l2521
  7194  1745  0825               	movf	___wmul@product+1,w
  7195  1746  00A1               	movwf	?___wmul+1
  7196  1747  0824               	movf	___wmul@product,w
  7197  1748  00A0               	movwf	?___wmul
  7198  1749  0008               	return
  7199  174A                     __end_of___wmul:	
  7200                           
  7201                           	psect	text25
  7202  0AD9                     __ptext25:	
  7203 ;; *************** function ___llmod *****************
  7204 ;; Defined at:
  7205 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\llmod.c"
  7206 ;; Parameters:    Size  Location     Type
  7207 ;;  divisor         4   14[BANK0 ] unsigned long 
  7208 ;;  dividend        4   18[BANK0 ] unsigned long 
  7209 ;; Auto vars:     Size  Location     Type
  7210 ;;  counter         1   23[BANK0 ] unsigned char 
  7211 ;; Return value:  Size  Location     Type
  7212 ;;                  4   14[BANK0 ] unsigned long 
  7213 ;; Registers used:
  7214 ;;		wreg, status,2, status,0
  7215 ;; Tracked objects:
  7216 ;;		On entry : 0/0
  7217 ;;		On exit  : 0/0
  7218 ;;		Unchanged: 0/0
  7219 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7220 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7221 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7222 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7223 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7224 ;;Total ram usage:       10 bytes
  7225 ;; Hardware stack levels used:    1
  7226 ;; Hardware stack levels required when called:    7
  7227 ;; This function calls:
  7228 ;;		Nothing
  7229 ;; This function is called by:
  7230 ;;		_sprintf
  7231 ;; This function uses a non-reentrant model
  7232 ;;
  7233                           
  7234                           
  7235                           ;psect for function ___llmod
  7236  0AD9                     ___llmod:	
  7237                           
  7238                           ;incstack = 0
  7239                           ; Regs used in ___llmod: [wreg+status,2+status,0]
  7240  0AD9  0020               	movlb	0	; select bank0
  7241  0ADA  0831               	movf	___llmod@divisor+3,w
  7242  0ADB  0430               	iorwf	___llmod@divisor+2,w
  7243  0ADC  042F               	iorwf	___llmod@divisor+1,w
  7244  0ADD  042E               	iorwf	___llmod@divisor,w
  7245  0ADE  1903               	skipnz
  7246  0ADF  2B13               	goto	l2643
  7247  0AE0  01B7               	clrf	___llmod@counter
  7248  0AE1  0AB7               	incf	___llmod@counter,f
  7249  0AE2                     l2633:	
  7250  0AE2  1BB1               	btfsc	___llmod@divisor+3,7
  7251  0AE3  2AF0               	goto	l2635
  7252  0AE4  3001               	movlw	1
  7253  0AE5                     u2445:	
  7254  0AE5  35AE               	lslf	___llmod@divisor,f
  7255  0AE6  0DAF               	rlf	___llmod@divisor+1,f
  7256  0AE7  0DB0               	rlf	___llmod@divisor+2,f
  7257  0AE8  0DB1               	rlf	___llmod@divisor+3,f
  7258  0AE9  0B89               	decfsz	9,f
  7259  0AEA  2AE5               	goto	u2445
  7260  0AEB  3001               	movlw	1
  7261  0AEC  00B6               	movwf	??___llmod
  7262  0AED  0836               	movf	??___llmod,w
  7263  0AEE  07B7               	addwf	___llmod@counter,f
  7264  0AEF  2AE2               	goto	l2633
  7265  0AF0                     l2635:	
  7266  0AF0  0831               	movf	___llmod@divisor+3,w
  7267  0AF1  0235               	subwf	___llmod@dividend+3,w
  7268  0AF2  1D03               	skipz
  7269  0AF3  2AFE               	goto	u2465
  7270  0AF4  0830               	movf	___llmod@divisor+2,w
  7271  0AF5  0234               	subwf	___llmod@dividend+2,w
  7272  0AF6  1D03               	skipz
  7273  0AF7  2AFE               	goto	u2465
  7274  0AF8  082F               	movf	___llmod@divisor+1,w
  7275  0AF9  0233               	subwf	___llmod@dividend+1,w
  7276  0AFA  1D03               	skipz
  7277  0AFB  2AFE               	goto	u2465
  7278  0AFC  082E               	movf	___llmod@divisor,w
  7279  0AFD  0232               	subwf	___llmod@dividend,w
  7280  0AFE                     u2465:	
  7281  0AFE  1C03               	skipc
  7282  0AFF  2B08               	goto	l2639
  7283  0B00  082E               	movf	___llmod@divisor,w
  7284  0B01  02B2               	subwf	___llmod@dividend,f
  7285  0B02  082F               	movf	___llmod@divisor+1,w
  7286  0B03  3BB3               	subwfb	___llmod@dividend+1,f
  7287  0B04  0830               	movf	___llmod@divisor+2,w
  7288  0B05  3BB4               	subwfb	___llmod@dividend+2,f
  7289  0B06  0831               	movf	___llmod@divisor+3,w
  7290  0B07  3BB5               	subwfb	___llmod@dividend+3,f
  7291  0B08                     l2639:	
  7292  0B08  3001               	movlw	1
  7293  0B09                     u2475:	
  7294  0B09  36B1               	lsrf	___llmod@divisor+3,f
  7295  0B0A  0CB0               	rrf	___llmod@divisor+2,f
  7296  0B0B  0CAF               	rrf	___llmod@divisor+1,f
  7297  0B0C  0CAE               	rrf	___llmod@divisor,f
  7298  0B0D  0B89               	decfsz	9,f
  7299  0B0E  2B09               	goto	u2475
  7300  0B0F  3001               	movlw	1
  7301  0B10  02B7               	subwf	___llmod@counter,f
  7302  0B11  1D03               	btfss	3,2
  7303  0B12  2AF0               	goto	l2635
  7304  0B13                     l2643:	
  7305  0B13  0835               	movf	___llmod@dividend+3,w
  7306  0B14  00B1               	movwf	?___llmod+3
  7307  0B15  0834               	movf	___llmod@dividend+2,w
  7308  0B16  00B0               	movwf	?___llmod+2
  7309  0B17  0833               	movf	___llmod@dividend+1,w
  7310  0B18  00AF               	movwf	?___llmod+1
  7311  0B19  0832               	movf	___llmod@dividend,w
  7312  0B1A  00AE               	movwf	?___llmod
  7313  0B1B  0008               	return
  7314  0B1C                     __end_of___llmod:	
  7315                           
  7316                           	psect	text26
  7317  0BF1                     __ptext26:	
  7318 ;; *************** function ___lldiv *****************
  7319 ;; Defined at:
  7320 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\__lldiv.c"
  7321 ;; Parameters:    Size  Location     Type
  7322 ;;  divisor         4    0[BANK0 ] unsigned long 
  7323 ;;  dividend        4    4[BANK0 ] unsigned long 
  7324 ;; Auto vars:     Size  Location     Type
  7325 ;;  quotient        4    9[BANK0 ] unsigned long 
  7326 ;;  counter         1   13[BANK0 ] unsigned char 
  7327 ;; Return value:  Size  Location     Type
  7328 ;;                  4    0[BANK0 ] unsigned long 
  7329 ;; Registers used:
  7330 ;;		wreg, status,2, status,0
  7331 ;; Tracked objects:
  7332 ;;		On entry : 0/0
  7333 ;;		On exit  : 0/0
  7334 ;;		Unchanged: 0/0
  7335 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7336 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7337 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7338 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7339 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7340 ;;Total ram usage:       14 bytes
  7341 ;; Hardware stack levels used:    1
  7342 ;; Hardware stack levels required when called:    7
  7343 ;; This function calls:
  7344 ;;		Nothing
  7345 ;; This function is called by:
  7346 ;;		_sprintf
  7347 ;; This function uses a non-reentrant model
  7348 ;;
  7349                           
  7350                           
  7351                           ;psect for function ___lldiv
  7352  0BF1                     ___lldiv:	
  7353                           
  7354                           ;incstack = 0
  7355                           ; Regs used in ___lldiv: [wreg+status,2+status,0]
  7356  0BF1  3000               	movlw	0
  7357  0BF2  0020               	movlb	0	; select bank0
  7358  0BF3  00AC               	movwf	___lldiv@quotient+3
  7359  0BF4  3000               	movlw	0
  7360  0BF5  00AB               	movwf	___lldiv@quotient+2
  7361  0BF6  3000               	movlw	0
  7362  0BF7  00AA               	movwf	___lldiv@quotient+1
  7363  0BF8  3000               	movlw	0
  7364  0BF9  00A9               	movwf	___lldiv@quotient
  7365  0BFA  0823               	movf	___lldiv@divisor+3,w
  7366  0BFB  0422               	iorwf	___lldiv@divisor+2,w
  7367  0BFC  0421               	iorwf	___lldiv@divisor+1,w
  7368  0BFD  0420               	iorwf	___lldiv@divisor,w
  7369  0BFE  1903               	skipnz
  7370  0BFF  2C3B               	goto	l2553
  7371  0C00  01AD               	clrf	___lldiv@counter
  7372  0C01  0AAD               	incf	___lldiv@counter,f
  7373  0C02                     l2539:	
  7374  0C02  1BA3               	btfsc	___lldiv@divisor+3,7
  7375  0C03  2C10               	goto	l2541
  7376  0C04  3001               	movlw	1
  7377  0C05                     u2145:	
  7378  0C05  35A0               	lslf	___lldiv@divisor,f
  7379  0C06  0DA1               	rlf	___lldiv@divisor+1,f
  7380  0C07  0DA2               	rlf	___lldiv@divisor+2,f
  7381  0C08  0DA3               	rlf	___lldiv@divisor+3,f
  7382  0C09  0B89               	decfsz	9,f
  7383  0C0A  2C05               	goto	u2145
  7384  0C0B  3001               	movlw	1
  7385  0C0C  00A8               	movwf	??___lldiv
  7386  0C0D  0828               	movf	??___lldiv,w
  7387  0C0E  07AD               	addwf	___lldiv@counter,f
  7388  0C0F  2C02               	goto	l2539
  7389  0C10                     l2541:	
  7390  0C10  3001               	movlw	1
  7391  0C11                     u2165:	
  7392  0C11  35A9               	lslf	___lldiv@quotient,f
  7393  0C12  0DAA               	rlf	___lldiv@quotient+1,f
  7394  0C13  0DAB               	rlf	___lldiv@quotient+2,f
  7395  0C14  0DAC               	rlf	___lldiv@quotient+3,f
  7396  0C15  0B89               	decfsz	9,f
  7397  0C16  2C11               	goto	u2165
  7398  0C17  0823               	movf	___lldiv@divisor+3,w
  7399  0C18  0227               	subwf	___lldiv@dividend+3,w
  7400  0C19  1D03               	skipz
  7401  0C1A  2C25               	goto	u2175
  7402  0C1B  0822               	movf	___lldiv@divisor+2,w
  7403  0C1C  0226               	subwf	___lldiv@dividend+2,w
  7404  0C1D  1D03               	skipz
  7405  0C1E  2C25               	goto	u2175
  7406  0C1F  0821               	movf	___lldiv@divisor+1,w
  7407  0C20  0225               	subwf	___lldiv@dividend+1,w
  7408  0C21  1D03               	skipz
  7409  0C22  2C25               	goto	u2175
  7410  0C23  0820               	movf	___lldiv@divisor,w
  7411  0C24  0224               	subwf	___lldiv@dividend,w
  7412  0C25                     u2175:	
  7413  0C25  1C03               	skipc
  7414  0C26  2C30               	goto	l2549
  7415  0C27  0820               	movf	___lldiv@divisor,w
  7416  0C28  02A4               	subwf	___lldiv@dividend,f
  7417  0C29  0821               	movf	___lldiv@divisor+1,w
  7418  0C2A  3BA5               	subwfb	___lldiv@dividend+1,f
  7419  0C2B  0822               	movf	___lldiv@divisor+2,w
  7420  0C2C  3BA6               	subwfb	___lldiv@dividend+2,f
  7421  0C2D  0823               	movf	___lldiv@divisor+3,w
  7422  0C2E  3BA7               	subwfb	___lldiv@dividend+3,f
  7423  0C2F  1429               	bsf	___lldiv@quotient,0
  7424  0C30                     l2549:	
  7425  0C30  3001               	movlw	1
  7426  0C31                     u2185:	
  7427  0C31  36A3               	lsrf	___lldiv@divisor+3,f
  7428  0C32  0CA2               	rrf	___lldiv@divisor+2,f
  7429  0C33  0CA1               	rrf	___lldiv@divisor+1,f
  7430  0C34  0CA0               	rrf	___lldiv@divisor,f
  7431  0C35  0B89               	decfsz	9,f
  7432  0C36  2C31               	goto	u2185
  7433  0C37  3001               	movlw	1
  7434  0C38  02AD               	subwf	___lldiv@counter,f
  7435  0C39  1D03               	btfss	3,2
  7436  0C3A  2C10               	goto	l2541
  7437  0C3B                     l2553:	
  7438  0C3B  082C               	movf	___lldiv@quotient+3,w
  7439  0C3C  00A3               	movwf	?___lldiv+3
  7440  0C3D  082B               	movf	___lldiv@quotient+2,w
  7441  0C3E  00A2               	movwf	?___lldiv+2
  7442  0C3F  082A               	movf	___lldiv@quotient+1,w
  7443  0C40  00A1               	movwf	?___lldiv+1
  7444  0C41  0829               	movf	___lldiv@quotient,w
  7445  0C42  00A0               	movwf	?___lldiv
  7446  0C43  0008               	return
  7447  0C44                     __end_of___lldiv:	
  7448                           
  7449                           	psect	text27
  7450  07D4                     __ptext27:	
  7451 ;; *************** function ___lltoft *****************
  7452 ;; Defined at:
  7453 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\lltoft.c"
  7454 ;; Parameters:    Size  Location     Type
  7455 ;;  c               4    8[BANK0 ] unsigned long 
  7456 ;; Auto vars:     Size  Location     Type
  7457 ;;  exp             1   13[BANK0 ] unsigned char 
  7458 ;; Return value:  Size  Location     Type
  7459 ;;                  3    8[BANK0 ] float 
  7460 ;; Registers used:
  7461 ;;		wreg, status,2, status,0, pclath, cstack
  7462 ;; Tracked objects:
  7463 ;;		On entry : 0/0
  7464 ;;		On exit  : 0/0
  7465 ;;		Unchanged: 0/0
  7466 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7467 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7468 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7469 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7470 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7471 ;;Total ram usage:        6 bytes
  7472 ;; Hardware stack levels used:    1
  7473 ;; Hardware stack levels required when called:    8
  7474 ;; This function calls:
  7475 ;;		___ftpack
  7476 ;; This function is called by:
  7477 ;;		_ftoa
  7478 ;; This function uses a non-reentrant model
  7479 ;;
  7480                           
  7481                           
  7482                           ;psect for function ___lltoft
  7483  07D4                     ___lltoft:	
  7484                           
  7485                           ;incstack = 0
  7486                           ; Regs used in ___lltoft: [wreg+status,2+status,0+pclath+cstack]
  7487  07D4  308E               	movlw	142
  7488  07D5  0020               	movlb	0	; select bank0
  7489  07D6  00AC               	movwf	??___lltoft
  7490  07D7  082C               	movf	??___lltoft,w
  7491  07D8  00AD               	movwf	___lltoft@exp
  7492  07D9                     l2899:	
  7493  07D9  30FF               	movlw	255
  7494  07DA  052B               	andwf	___lltoft@c+3,w
  7495  07DB  1903               	btfsc	3,2
  7496  07DC  2FE9               	goto	l2901
  7497  07DD  3001               	movlw	1
  7498  07DE                     u2945:	
  7499  07DE  36AB               	lsrf	___lltoft@c+3,f
  7500  07DF  0CAA               	rrf	___lltoft@c+2,f
  7501  07E0  0CA9               	rrf	___lltoft@c+1,f
  7502  07E1  0CA8               	rrf	___lltoft@c,f
  7503  07E2  0B89               	decfsz	9,f
  7504  07E3  2FDE               	goto	u2945
  7505  07E4  3001               	movlw	1
  7506  07E5  00AC               	movwf	??___lltoft
  7507  07E6  082C               	movf	??___lltoft,w
  7508  07E7  07AD               	addwf	___lltoft@exp,f
  7509  07E8  2FD9               	goto	l2899
  7510  07E9                     l2901:	
  7511  07E9  0828               	movf	___lltoft@c,w
  7512  07EA  00A0               	movwf	___ftpack@arg
  7513  07EB  0829               	movf	___lltoft@c+1,w
  7514  07EC  00A1               	movwf	___ftpack@arg+1
  7515  07ED  082A               	movf	___lltoft@c+2,w
  7516  07EE  00A2               	movwf	___ftpack@arg+2
  7517  07EF  082D               	movf	___lltoft@exp,w
  7518  07F0  00AC               	movwf	??___lltoft
  7519  07F1  082C               	movf	??___lltoft,w
  7520  07F2  00A3               	movwf	___ftpack@exp
  7521  07F3  01A4               	clrf	___ftpack@sign
  7522  07F4  318C  2444         	fcall	___ftpack
  7523  07F6  0020               	movlb	0	; select bank0
  7524  07F7  0820               	movf	?___ftpack,w
  7525  07F8  00A8               	movwf	?___lltoft
  7526  07F9  0821               	movf	?___ftpack+1,w
  7527  07FA  00A9               	movwf	?___lltoft+1
  7528  07FB  0822               	movf	?___ftpack+2,w
  7529  07FC  00AA               	movwf	?___lltoft+2
  7530  07FD  0008               	return
  7531  07FE                     __end_of___lltoft:	
  7532                           
  7533                           	psect	text28
  7534  0CA9                     __ptext28:	
  7535 ;; *************** function ___fttol *****************
  7536 ;; Defined at:
  7537 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\fttol.c"
  7538 ;; Parameters:    Size  Location     Type
  7539 ;;  f1              3   71[BANK0 ] float 
  7540 ;; Auto vars:     Size  Location     Type
  7541 ;;  lval            4    1[BANK1 ] unsigned long 
  7542 ;;  exp1            1    5[BANK1 ] unsigned char 
  7543 ;;  sign1           1    0[BANK1 ] unsigned char 
  7544 ;; Return value:  Size  Location     Type
  7545 ;;                  4   71[BANK0 ] long 
  7546 ;; Registers used:
  7547 ;;		wreg, status,2, status,0
  7548 ;; Tracked objects:
  7549 ;;		On entry : 0/0
  7550 ;;		On exit  : 0/0
  7551 ;;		Unchanged: 0/0
  7552 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7553 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7554 ;;      Locals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0
  7555 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7556 ;;      Totals:         0       8       6       0       0       0       0       0       0       0       0       0       
      +0       0
  7557 ;;Total ram usage:       14 bytes
  7558 ;; Hardware stack levels used:    1
  7559 ;; Hardware stack levels required when called:    7
  7560 ;; This function calls:
  7561 ;;		Nothing
  7562 ;; This function is called by:
  7563 ;;		_ftoa
  7564 ;; This function uses a non-reentrant model
  7565 ;;
  7566                           
  7567                           
  7568                           ;psect for function ___fttol
  7569  0CA9                     ___fttol:	
  7570                           
  7571                           ;incstack = 0
  7572                           ; Regs used in ___fttol: [wreg+status,2+status,0]
  7573  0CA9  0020               	movlb	0	; select bank0
  7574  0CAA  0867               	movf	___fttol@f1,w
  7575  0CAB  00EB               	movwf	??___fttol
  7576  0CAC  0868               	movf	___fttol@f1+1,w
  7577  0CAD  00EC               	movwf	??___fttol+1
  7578  0CAE  0869               	movf	___fttol@f1+2,w
  7579  0CAF  00ED               	movwf	??___fttol+2
  7580  0CB0  1003               	clrc
  7581  0CB1  0D6C               	rlf	??___fttol+1,w
  7582  0CB2  0D6D               	rlf	??___fttol+2,w
  7583  0CB3  00EE               	movwf	??___fttol+3
  7584  0CB4  086E               	movf	??___fttol+3,w
  7585  0CB5  0021               	movlb	1	; select bank1
  7586  0CB6  00A5               	movwf	___fttol@exp1^(0+128)
  7587  0CB7  0825               	movf	___fttol@exp1^(0+128),w
  7588  0CB8  1D03               	btfss	3,2
  7589  0CB9  2CC4               	goto	l2859
  7590  0CBA  3000               	movlw	0
  7591  0CBB  0020               	movlb	0	; select bank0
  7592  0CBC  00EA               	movwf	?___fttol+3
  7593  0CBD  3000               	movlw	0
  7594  0CBE  00E9               	movwf	?___fttol+2
  7595  0CBF  3000               	movlw	0
  7596  0CC0  00E8               	movwf	?___fttol+1
  7597  0CC1  3000               	movlw	0
  7598  0CC2  00E7               	movwf	?___fttol
  7599  0CC3  0008               	return
  7600  0CC4                     l2859:	
  7601  0CC4  0020               	movlb	0	; select bank0
  7602  0CC5  0867               	movf	___fttol@f1,w
  7603  0CC6  00EB               	movwf	??___fttol
  7604  0CC7  0868               	movf	___fttol@f1+1,w
  7605  0CC8  00EC               	movwf	??___fttol+1
  7606  0CC9  0869               	movf	___fttol@f1+2,w
  7607  0CCA  00ED               	movwf	??___fttol+2
  7608  0CCB  3017               	movlw	23
  7609  0CCC                     u2855:	
  7610  0CCC  36ED               	lsrf	??___fttol+2,f
  7611  0CCD  0CEC               	rrf	??___fttol+1,f
  7612  0CCE  0CEB               	rrf	??___fttol,f
  7613  0CCF  0B89               	decfsz	9,f
  7614  0CD0  2CCC               	goto	u2855
  7615  0CD1  086B               	movf	??___fttol,w
  7616  0CD2  00EE               	movwf	??___fttol+3
  7617  0CD3  086E               	movf	??___fttol+3,w
  7618  0CD4  0021               	movlb	1	; select bank1
  7619  0CD5  00A0               	movwf	___fttol@sign1^(0+128)
  7620  0CD6  0020               	movlb	0	; select bank0
  7621  0CD7  17E8               	bsf	___fttol@f1+1,7
  7622  0CD8  30FF               	movlw	255
  7623  0CD9  05E7               	andwf	___fttol@f1,f
  7624  0CDA  30FF               	movlw	255
  7625  0CDB  05E8               	andwf	___fttol@f1+1,f
  7626  0CDC  3000               	movlw	0
  7627  0CDD  05E9               	andwf	___fttol@f1+2,f
  7628  0CDE  0867               	movf	___fttol@f1,w
  7629  0CDF  0021               	movlb	1	; select bank1
  7630  0CE0  00A1               	movwf	___fttol@lval^(0+128)
  7631  0CE1  0020               	movlb	0	; select bank0
  7632  0CE2  0868               	movf	___fttol@f1+1,w
  7633  0CE3  0021               	movlb	1	; select bank1
  7634  0CE4  00A2               	movwf	(___fttol@lval^(0+128)+1)
  7635  0CE5  0020               	movlb	0	; select bank0
  7636  0CE6  0869               	movf	___fttol@f1+2,w
  7637  0CE7  0021               	movlb	1	; select bank1
  7638  0CE8  00A3               	movwf	(___fttol@lval^(0+128)+2)
  7639  0CE9  01A4               	clrf	(___fttol@lval^(0+128)+3)
  7640  0CEA  308E               	movlw	142
  7641  0CEB  02A5               	subwf	___fttol@exp1^(0+128),f
  7642  0CEC  1FA5               	btfss	___fttol@exp1^(0+128),7
  7643  0CED  2D0E               	goto	l2879
  7644  0CEE  0825               	movf	___fttol@exp1^(0+128),w
  7645  0CEF  3A80               	xorlw	128
  7646  0CF0  3E8F               	addlw	143
  7647  0CF1  1803               	skipnc
  7648  0CF2  2CFD               	goto	l2877
  7649  0CF3  3000               	movlw	0
  7650  0CF4  0020               	movlb	0	; select bank0
  7651  0CF5  00EA               	movwf	?___fttol+3
  7652  0CF6  3000               	movlw	0
  7653  0CF7  00E9               	movwf	?___fttol+2
  7654  0CF8  3000               	movlw	0
  7655  0CF9  00E8               	movwf	?___fttol+1
  7656  0CFA  3000               	movlw	0
  7657  0CFB  00E7               	movwf	?___fttol
  7658  0CFC  0008               	return
  7659  0CFD                     l2877:	
  7660  0CFD  3001               	movlw	1
  7661  0CFE                     u2885:	
  7662  0CFE  0021               	movlb	1	; select bank1
  7663  0CFF  36A4               	lsrf	(___fttol@lval+3)^(0+128),f
  7664  0D00  0CA3               	rrf	(___fttol@lval+2)^(0+128),f
  7665  0D01  0CA2               	rrf	(___fttol@lval+1)^(0+128),f
  7666  0D02  0CA1               	rrf	___fttol@lval^(0+128),f
  7667  0D03  0B89               	decfsz	9,f
  7668  0D04  2CFE               	goto	u2885
  7669  0D05  3001               	movlw	1
  7670  0D06  0020               	movlb	0	; select bank0
  7671  0D07  00EB               	movwf	??___fttol
  7672  0D08  086B               	movf	??___fttol,w
  7673  0D09  0021               	movlb	1	; select bank1
  7674  0D0A  07A5               	addwf	___fttol@exp1^(0+128),f
  7675  0D0B  1903               	btfsc	3,2
  7676  0D0C  2D2A               	goto	l2887
  7677  0D0D  2CFD               	goto	l2877
  7678  0D0E                     l2879:	
  7679  0D0E  3018               	movlw	24
  7680  0D0F  0225               	subwf	___fttol@exp1^(0+128),w
  7681  0D10  1C03               	skipc
  7682  0D11  2D26               	goto	l777
  7683  0D12  3000               	movlw	0
  7684  0D13  0020               	movlb	0	; select bank0
  7685  0D14  00EA               	movwf	?___fttol+3
  7686  0D15  3000               	movlw	0
  7687  0D16  00E9               	movwf	?___fttol+2
  7688  0D17  3000               	movlw	0
  7689  0D18  00E8               	movwf	?___fttol+1
  7690  0D19  3000               	movlw	0
  7691  0D1A  00E7               	movwf	?___fttol
  7692  0D1B  0008               	return
  7693  0D1C                     l2885:	
  7694  0D1C  3001               	movlw	1
  7695  0D1D                     u2915:	
  7696  0D1D  0021               	movlb	1	; select bank1
  7697  0D1E  35A1               	lslf	___fttol@lval^(0+128),f
  7698  0D1F  0DA2               	rlf	(___fttol@lval+1)^(0+128),f
  7699  0D20  0DA3               	rlf	(___fttol@lval+2)^(0+128),f
  7700  0D21  0DA4               	rlf	(___fttol@lval+3)^(0+128),f
  7701  0D22  0B89               	decfsz	9,f
  7702  0D23  2D1D               	goto	u2915
  7703  0D24  3001               	movlw	1
  7704  0D25  02A5               	subwf	___fttol@exp1^(0+128),f
  7705  0D26                     l777:	
  7706  0D26  0021               	movlb	1	; select bank1
  7707  0D27  0825               	movf	___fttol@exp1^(0+128),w
  7708  0D28  1D03               	btfss	3,2
  7709  0D29  2D1C               	goto	l2885
  7710  0D2A                     l2887:	
  7711  0D2A  0820               	movf	___fttol@sign1^(0+128),w
  7712  0D2B  1903               	btfsc	3,2
  7713  0D2C  2D38               	goto	l2891
  7714  0D2D  09A1               	comf	___fttol@lval^(0+128),f
  7715  0D2E  09A2               	comf	(___fttol@lval+1)^(0+128),f
  7716  0D2F  09A3               	comf	(___fttol@lval+2)^(0+128),f
  7717  0D30  09A4               	comf	(___fttol@lval+3)^(0+128),f
  7718  0D31  0AA1               	incf	___fttol@lval^(0+128),f
  7719  0D32  1903               	skipnz
  7720  0D33  0AA2               	incf	(___fttol@lval+1)^(0+128),f
  7721  0D34  1903               	skipnz
  7722  0D35  0AA3               	incf	(___fttol@lval+2)^(0+128),f
  7723  0D36  1903               	skipnz
  7724  0D37  0AA4               	incf	(___fttol@lval+3)^(0+128),f
  7725  0D38                     l2891:	
  7726  0D38  0824               	movf	(___fttol@lval+3)^(0+128),w
  7727  0D39  0020               	movlb	0	; select bank0
  7728  0D3A  00EA               	movwf	?___fttol+3
  7729  0D3B  0021               	movlb	1	; select bank1
  7730  0D3C  0823               	movf	(___fttol@lval+2)^(0+128),w
  7731  0D3D  0020               	movlb	0	; select bank0
  7732  0D3E  00E9               	movwf	?___fttol+2
  7733  0D3F  0021               	movlb	1	; select bank1
  7734  0D40  0822               	movf	(___fttol@lval+1)^(0+128),w
  7735  0D41  0020               	movlb	0	; select bank0
  7736  0D42  00E8               	movwf	?___fttol+1
  7737  0D43  0021               	movlb	1	; select bank1
  7738  0D44  0821               	movf	___fttol@lval^(0+128),w
  7739  0D45  0020               	movlb	0	; select bank0
  7740  0D46  00E7               	movwf	?___fttol
  7741  0D47  0008               	return
  7742  0D48                     __end_of___fttol:	
  7743                           
  7744                           	psect	text29
  7745  1782                     __ptext29:	
  7746 ;; *************** function ___ftsub *****************
  7747 ;; Defined at:
  7748 ;;		line 17 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\ftsub.c"
  7749 ;; Parameters:    Size  Location     Type
  7750 ;;  f2              3   27[BANK0 ] float 
  7751 ;;  f1              3   30[BANK0 ] float 
  7752 ;; Auto vars:     Size  Location     Type
  7753 ;;		None
  7754 ;; Return value:  Size  Location     Type
  7755 ;;                  3   27[BANK0 ] float 
  7756 ;; Registers used:
  7757 ;;		wreg, status,2, status,0, pclath, cstack
  7758 ;; Tracked objects:
  7759 ;;		On entry : 0/0
  7760 ;;		On exit  : 0/0
  7761 ;;		Unchanged: 0/0
  7762 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7763 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7764 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7765 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7766 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7767 ;;Total ram usage:        6 bytes
  7768 ;; Hardware stack levels used:    1
  7769 ;; Hardware stack levels required when called:    9
  7770 ;; This function calls:
  7771 ;;		___ftadd
  7772 ;; This function is called by:
  7773 ;;		_ftoa
  7774 ;; This function uses a non-reentrant model
  7775 ;;
  7776                           
  7777                           
  7778                           ;psect for function ___ftsub
  7779  1782                     ___ftsub:	
  7780                           
  7781                           ;incstack = 0
  7782                           ; Regs used in ___ftsub: [wreg+status,2+status,0+pclath+cstack]
  7783  1782  0020               	movlb	0	; select bank0
  7784  1783  083D               	movf	___ftsub@f2+2,w
  7785  1784  043C               	iorwf	___ftsub@f2+1,w
  7786  1785  043B               	iorwf	___ftsub@f2,w
  7787  1786  1903               	skipnz
  7788  1787  2F8A               	goto	l2849
  7789  1788  3080               	movlw	128
  7790  1789  06BD               	xorwf	___ftsub@f2+2,f
  7791  178A                     l2849:	
  7792  178A  083E               	movf	___ftsub@f1,w
  7793  178B  00AE               	movwf	___ftadd@f1
  7794  178C  083F               	movf	___ftsub@f1+1,w
  7795  178D  00AF               	movwf	___ftadd@f1+1
  7796  178E  0840               	movf	___ftsub@f1+2,w
  7797  178F  00B0               	movwf	___ftadd@f1+2
  7798  1790  083B               	movf	___ftsub@f2,w
  7799  1791  00B1               	movwf	___ftadd@f2
  7800  1792  083C               	movf	___ftsub@f2+1,w
  7801  1793  00B2               	movwf	___ftadd@f2+1
  7802  1794  083D               	movf	___ftsub@f2+2,w
  7803  1795  00B3               	movwf	___ftadd@f2+2
  7804  1796  3184  24B2         	fcall	___ftadd
  7805  1798  0020               	movlb	0	; select bank0
  7806  1799  082E               	movf	?___ftadd,w
  7807  179A  00BB               	movwf	?___ftsub
  7808  179B  082F               	movf	?___ftadd+1,w
  7809  179C  00BC               	movwf	?___ftsub+1
  7810  179D  0830               	movf	?___ftadd+2,w
  7811  179E  00BD               	movwf	?___ftsub+2
  7812  179F  0008               	return
  7813  17A0                     __end_of___ftsub:	
  7814                           
  7815                           	psect	text30
  7816  166E                     __ptext30:	
  7817 ;; *************** function ___ftneg *****************
  7818 ;; Defined at:
  7819 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\ftneg.c"
  7820 ;; Parameters:    Size  Location     Type
  7821 ;;  f1              3   55[BANK0 ] float 
  7822 ;; Auto vars:     Size  Location     Type
  7823 ;;		None
  7824 ;; Return value:  Size  Location     Type
  7825 ;;                  3   55[BANK0 ] float 
  7826 ;; Registers used:
  7827 ;;		wreg
  7828 ;; Tracked objects:
  7829 ;;		On entry : 0/0
  7830 ;;		On exit  : 0/0
  7831 ;;		Unchanged: 0/0
  7832 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7833 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7834 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7835 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7836 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7837 ;;Total ram usage:        3 bytes
  7838 ;; Hardware stack levels used:    1
  7839 ;; Hardware stack levels required when called:    7
  7840 ;; This function calls:
  7841 ;;		Nothing
  7842 ;; This function is called by:
  7843 ;;		_loop
  7844 ;;		_ftoa
  7845 ;; This function uses a non-reentrant model
  7846 ;;
  7847                           
  7848                           
  7849                           ;psect for function ___ftneg
  7850  166E                     ___ftneg:	
  7851                           
  7852                           ;incstack = 0
  7853                           ; Regs used in ___ftneg: [wreg]
  7854  166E  0020               	movlb	0	; select bank0
  7855  166F  0859               	movf	___ftneg@f1+2,w
  7856  1670  0458               	iorwf	___ftneg@f1+1,w
  7857  1671  0457               	iorwf	___ftneg@f1,w
  7858  1672  1903               	skipnz
  7859  1673  0008               	return
  7860  1674  3080               	movlw	128
  7861  1675  06D9               	xorwf	___ftneg@f1+2,f
  7862  1676  0008               	return
  7863  1677                     __end_of___ftneg:	
  7864                           
  7865                           	psect	text31
  7866  0E97                     __ptext31:	
  7867 ;; *************** function ___ftmul *****************
  7868 ;; Defined at:
  7869 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\ftmul.c"
  7870 ;; Parameters:    Size  Location     Type
  7871 ;;  f1              3   55[BANK0 ] float 
  7872 ;;  f2              3   58[BANK0 ] float 
  7873 ;; Auto vars:     Size  Location     Type
  7874 ;;  f3_as_produc    3   66[BANK0 ] unsigned um
  7875 ;;  sign            1   70[BANK0 ] unsigned char 
  7876 ;;  cntr            1   69[BANK0 ] unsigned char 
  7877 ;;  exp             1   65[BANK0 ] unsigned char 
  7878 ;; Return value:  Size  Location     Type
  7879 ;;                  3   55[BANK0 ] float 
  7880 ;; Registers used:
  7881 ;;		wreg, status,2, status,0, pclath, cstack
  7882 ;; Tracked objects:
  7883 ;;		On entry : 0/0
  7884 ;;		On exit  : 0/0
  7885 ;;		Unchanged: 0/0
  7886 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7887 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7888 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7889 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7890 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7891 ;;Total ram usage:       16 bytes
  7892 ;; Hardware stack levels used:    1
  7893 ;; Hardware stack levels required when called:    8
  7894 ;; This function calls:
  7895 ;;		___ftpack
  7896 ;; This function is called by:
  7897 ;;		_loop
  7898 ;;		_ftoa
  7899 ;; This function uses a non-reentrant model
  7900 ;;
  7901                           
  7902                           
  7903                           ;psect for function ___ftmul
  7904  0E97                     ___ftmul:	
  7905                           
  7906                           ;incstack = 0
  7907                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
  7908  0E97  0020               	movlb	0	; select bank0
  7909  0E98  0857               	movf	___ftmul@f1,w
  7910  0E99  00DD               	movwf	??___ftmul
  7911  0E9A  0858               	movf	___ftmul@f1+1,w
  7912  0E9B  00DE               	movwf	??___ftmul+1
  7913  0E9C  0859               	movf	___ftmul@f1+2,w
  7914  0E9D  00DF               	movwf	??___ftmul+2
  7915  0E9E  1003               	clrc
  7916  0E9F  0D5E               	rlf	??___ftmul+1,w
  7917  0EA0  0D5F               	rlf	??___ftmul+2,w
  7918  0EA1  00E0               	movwf	??___ftmul+3
  7919  0EA2  0860               	movf	??___ftmul+3,w
  7920  0EA3  00E1               	movwf	___ftmul@exp
  7921  0EA4  0861               	movf	___ftmul@exp,w
  7922  0EA5  1D03               	btfss	3,2
  7923  0EA6  2EAE               	goto	l2793
  7924  0EA7  3000               	movlw	0
  7925  0EA8  00D7               	movwf	?___ftmul
  7926  0EA9  3000               	movlw	0
  7927  0EAA  00D8               	movwf	?___ftmul+1
  7928  0EAB  3000               	movlw	0
  7929  0EAC  00D9               	movwf	?___ftmul+2
  7930  0EAD  0008               	return
  7931  0EAE                     l2793:	
  7932  0EAE  085A               	movf	___ftmul@f2,w
  7933  0EAF  00DD               	movwf	??___ftmul
  7934  0EB0  085B               	movf	___ftmul@f2+1,w
  7935  0EB1  00DE               	movwf	??___ftmul+1
  7936  0EB2  085C               	movf	___ftmul@f2+2,w
  7937  0EB3  00DF               	movwf	??___ftmul+2
  7938  0EB4  1003               	clrc
  7939  0EB5  0D5E               	rlf	??___ftmul+1,w
  7940  0EB6  0D5F               	rlf	??___ftmul+2,w
  7941  0EB7  00E0               	movwf	??___ftmul+3
  7942  0EB8  0860               	movf	??___ftmul+3,w
  7943  0EB9  00E6               	movwf	___ftmul@sign
  7944  0EBA  0866               	movf	___ftmul@sign,w
  7945  0EBB  1D03               	btfss	3,2
  7946  0EBC  2EC4               	goto	l2799
  7947  0EBD  3000               	movlw	0
  7948  0EBE  00D7               	movwf	?___ftmul
  7949  0EBF  3000               	movlw	0
  7950  0EC0  00D8               	movwf	?___ftmul+1
  7951  0EC1  3000               	movlw	0
  7952  0EC2  00D9               	movwf	?___ftmul+2
  7953  0EC3  0008               	return
  7954  0EC4                     l2799:	
  7955  0EC4  0866               	movf	___ftmul@sign,w
  7956  0EC5  3E7B               	addlw	123
  7957  0EC6  00DD               	movwf	??___ftmul
  7958  0EC7  085D               	movf	??___ftmul,w
  7959  0EC8  07E1               	addwf	___ftmul@exp,f
  7960  0EC9  0857               	movf	___ftmul@f1,w
  7961  0ECA  00DD               	movwf	??___ftmul
  7962  0ECB  0858               	movf	___ftmul@f1+1,w
  7963  0ECC  00DE               	movwf	??___ftmul+1
  7964  0ECD  0859               	movf	___ftmul@f1+2,w
  7965  0ECE  00DF               	movwf	??___ftmul+2
  7966  0ECF  3010               	movlw	16
  7967  0ED0                     u2725:	
  7968  0ED0  36DF               	lsrf	??___ftmul+2,f
  7969  0ED1  0CDE               	rrf	??___ftmul+1,f
  7970  0ED2  0CDD               	rrf	??___ftmul,f
  7971  0ED3  0B89               	decfsz	9,f
  7972  0ED4  2ED0               	goto	u2725
  7973  0ED5  085D               	movf	??___ftmul,w
  7974  0ED6  00E0               	movwf	??___ftmul+3
  7975  0ED7  0860               	movf	??___ftmul+3,w
  7976  0ED8  00E6               	movwf	___ftmul@sign
  7977  0ED9  085A               	movf	___ftmul@f2,w
  7978  0EDA  00DD               	movwf	??___ftmul
  7979  0EDB  085B               	movf	___ftmul@f2+1,w
  7980  0EDC  00DE               	movwf	??___ftmul+1
  7981  0EDD  085C               	movf	___ftmul@f2+2,w
  7982  0EDE  00DF               	movwf	??___ftmul+2
  7983  0EDF  3010               	movlw	16
  7984  0EE0                     u2735:	
  7985  0EE0  36DF               	lsrf	??___ftmul+2,f
  7986  0EE1  0CDE               	rrf	??___ftmul+1,f
  7987  0EE2  0CDD               	rrf	??___ftmul,f
  7988  0EE3  0B89               	decfsz	9,f
  7989  0EE4  2EE0               	goto	u2735
  7990  0EE5  085D               	movf	??___ftmul,w
  7991  0EE6  00E0               	movwf	??___ftmul+3
  7992  0EE7  0860               	movf	??___ftmul+3,w
  7993  0EE8  06E6               	xorwf	___ftmul@sign,f
  7994  0EE9  3080               	movlw	128
  7995  0EEA  00DD               	movwf	??___ftmul
  7996  0EEB  085D               	movf	??___ftmul,w
  7997  0EEC  05E6               	andwf	___ftmul@sign,f
  7998  0EED  17D8               	bsf	___ftmul@f1+1,7
  7999  0EEE  17DB               	bsf	___ftmul@f2+1,7
  8000  0EEF  30FF               	movlw	255
  8001  0EF0  05DA               	andwf	___ftmul@f2,f
  8002  0EF1  30FF               	movlw	255
  8003  0EF2  05DB               	andwf	___ftmul@f2+1,f
  8004  0EF3  3000               	movlw	0
  8005  0EF4  05DC               	andwf	___ftmul@f2+2,f
  8006  0EF5  3000               	movlw	0
  8007  0EF6  00E2               	movwf	___ftmul@f3_as_product
  8008  0EF7  3000               	movlw	0
  8009  0EF8  00E3               	movwf	___ftmul@f3_as_product+1
  8010  0EF9  3000               	movlw	0
  8011  0EFA  00E4               	movwf	___ftmul@f3_as_product+2
  8012  0EFB  3007               	movlw	7
  8013  0EFC  00DD               	movwf	??___ftmul
  8014  0EFD  085D               	movf	??___ftmul,w
  8015  0EFE  00E5               	movwf	___ftmul@cntr
  8016  0EFF                     l2811:	
  8017  0EFF  1C57               	btfss	___ftmul@f1,0
  8018  0F00  2F07               	goto	l2815
  8019  0F01  085A               	movf	___ftmul@f2,w
  8020  0F02  07E2               	addwf	___ftmul@f3_as_product,f
  8021  0F03  085B               	movf	___ftmul@f2+1,w
  8022  0F04  3DE3               	addwfc	___ftmul@f3_as_product+1,f
  8023  0F05  085C               	movf	___ftmul@f2+2,w
  8024  0F06  3DE4               	addwfc	___ftmul@f3_as_product+2,f
  8025  0F07                     l2815:	
  8026  0F07  3001               	movlw	1
  8027  0F08                     u2755:	
  8028  0F08  36D9               	lsrf	___ftmul@f1+2,f
  8029  0F09  0CD8               	rrf	___ftmul@f1+1,f
  8030  0F0A  0CD7               	rrf	___ftmul@f1,f
  8031  0F0B  0B89               	decfsz	9,f
  8032  0F0C  2F08               	goto	u2755
  8033  0F0D  3001               	movlw	1
  8034  0F0E                     u2765:	
  8035  0F0E  35DA               	lslf	___ftmul@f2,f
  8036  0F0F  0DDB               	rlf	___ftmul@f2+1,f
  8037  0F10  0DDC               	rlf	___ftmul@f2+2,f
  8038  0F11  0B89               	decfsz	9,f
  8039  0F12  2F0E               	goto	u2765
  8040  0F13  3001               	movlw	1
  8041  0F14  02E5               	subwf	___ftmul@cntr,f
  8042  0F15  1D03               	btfss	3,2
  8043  0F16  2EFF               	goto	l2811
  8044  0F17  3009               	movlw	9
  8045  0F18  00DD               	movwf	??___ftmul
  8046  0F19  085D               	movf	??___ftmul,w
  8047  0F1A  00E5               	movwf	___ftmul@cntr
  8048  0F1B                     l2823:	
  8049  0F1B  1C57               	btfss	___ftmul@f1,0
  8050  0F1C  2F23               	goto	l2827
  8051  0F1D  085A               	movf	___ftmul@f2,w
  8052  0F1E  07E2               	addwf	___ftmul@f3_as_product,f
  8053  0F1F  085B               	movf	___ftmul@f2+1,w
  8054  0F20  3DE3               	addwfc	___ftmul@f3_as_product+1,f
  8055  0F21  085C               	movf	___ftmul@f2+2,w
  8056  0F22  3DE4               	addwfc	___ftmul@f3_as_product+2,f
  8057  0F23                     l2827:	
  8058  0F23  3001               	movlw	1
  8059  0F24                     u2795:	
  8060  0F24  36D9               	lsrf	___ftmul@f1+2,f
  8061  0F25  0CD8               	rrf	___ftmul@f1+1,f
  8062  0F26  0CD7               	rrf	___ftmul@f1,f
  8063  0F27  0B89               	decfsz	9,f
  8064  0F28  2F24               	goto	u2795
  8065  0F29  3001               	movlw	1
  8066  0F2A                     u2805:	
  8067  0F2A  36E4               	lsrf	___ftmul@f3_as_product+2,f
  8068  0F2B  0CE3               	rrf	___ftmul@f3_as_product+1,f
  8069  0F2C  0CE2               	rrf	___ftmul@f3_as_product,f
  8070  0F2D  0B89               	decfsz	9,f
  8071  0F2E  2F2A               	goto	u2805
  8072  0F2F  3001               	movlw	1
  8073  0F30  02E5               	subwf	___ftmul@cntr,f
  8074  0F31  1D03               	btfss	3,2
  8075  0F32  2F1B               	goto	l2823
  8076  0F33  0862               	movf	___ftmul@f3_as_product,w
  8077  0F34  00A0               	movwf	___ftpack@arg
  8078  0F35  0863               	movf	___ftmul@f3_as_product+1,w
  8079  0F36  00A1               	movwf	___ftpack@arg+1
  8080  0F37  0864               	movf	___ftmul@f3_as_product+2,w
  8081  0F38  00A2               	movwf	___ftpack@arg+2
  8082  0F39  0861               	movf	___ftmul@exp,w
  8083  0F3A  00DD               	movwf	??___ftmul
  8084  0F3B  085D               	movf	??___ftmul,w
  8085  0F3C  00A3               	movwf	___ftpack@exp
  8086  0F3D  0866               	movf	___ftmul@sign,w
  8087  0F3E  00DE               	movwf	??___ftmul+1
  8088  0F3F  085E               	movf	??___ftmul+1,w
  8089  0F40  00A4               	movwf	___ftpack@sign
  8090  0F41  318C  2444         	fcall	___ftpack
  8091  0F43  0020               	movlb	0	; select bank0
  8092  0F44  0820               	movf	?___ftpack,w
  8093  0F45  00D7               	movwf	?___ftmul
  8094  0F46  0821               	movf	?___ftpack+1,w
  8095  0F47  00D8               	movwf	?___ftmul+1
  8096  0F48  0822               	movf	?___ftpack+2,w
  8097  0F49  00D9               	movwf	?___ftmul+2
  8098  0F4A  0008               	return
  8099  0F4B                     __end_of___ftmul:	
  8100                           
  8101                           	psect	text32
  8102  09E2                     __ptext32:	
  8103 ;; *************** function ___ftge *****************
  8104 ;; Defined at:
  8105 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\ftge.c"
  8106 ;; Parameters:    Size  Location     Type
  8107 ;;  ff1             3    0[BANK0 ] float 
  8108 ;;  ff2             3    3[BANK0 ] float 
  8109 ;; Auto vars:     Size  Location     Type
  8110 ;;		None
  8111 ;; Return value:  Size  Location     Type
  8112 ;;		None               void
  8113 ;; Registers used:
  8114 ;;		wreg, status,2, status,0
  8115 ;; Tracked objects:
  8116 ;;		On entry : 0/0
  8117 ;;		On exit  : 0/0
  8118 ;;		Unchanged: 0/0
  8119 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8120 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8121 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8122 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8123 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8124 ;;Total ram usage:        9 bytes
  8125 ;; Hardware stack levels used:    1
  8126 ;; Hardware stack levels required when called:    7
  8127 ;; This function calls:
  8128 ;;		Nothing
  8129 ;; This function is called by:
  8130 ;;		_ftoa
  8131 ;; This function uses a non-reentrant model
  8132 ;;
  8133                           
  8134                           
  8135                           ;psect for function ___ftge
  8136  09E2                     ___ftge:	
  8137                           
  8138                           ;incstack = 0
  8139                           ; Regs used in ___ftge: [wreg+status,2+status,0]
  8140  09E2  0020               	movlb	0	; select bank0
  8141  09E3  1FA2               	btfss	___ftge@ff1+2,7
  8142  09E4  29F9               	goto	l2771
  8143  09E5  0920               	comf	___ftge@ff1,w
  8144  09E6  00A6               	movwf	??___ftge
  8145  09E7  0921               	comf	___ftge@ff1+1,w
  8146  09E8  00A7               	movwf	??___ftge+1
  8147  09E9  0922               	comf	___ftge@ff1+2,w
  8148  09EA  00A8               	movwf	??___ftge+2
  8149  09EB  0AA6               	incf	??___ftge,f
  8150  09EC  1903               	skipnz
  8151  09ED  0AA7               	incf	??___ftge+1,f
  8152  09EE  1903               	skipnz
  8153  09EF  0AA8               	incf	??___ftge+2,f
  8154  09F0  3000               	movlw	0
  8155  09F1  0726               	addwf	??___ftge,w
  8156  09F2  00A0               	movwf	___ftge@ff1
  8157  09F3  3000               	movlw	0
  8158  09F4  3D27               	addwfc	??___ftge+1,w
  8159  09F5  00A1               	movwf	___ftge@ff1+1
  8160  09F6  3080               	movlw	128
  8161  09F7  3D28               	addwfc	??___ftge+2,w
  8162  09F8  00A2               	movwf	___ftge@ff1+2
  8163  09F9                     l2771:	
  8164  09F9  1FA5               	btfss	___ftge@ff2+2,7
  8165  09FA  2A0F               	goto	l2775
  8166  09FB  0923               	comf	___ftge@ff2,w
  8167  09FC  00A6               	movwf	??___ftge
  8168  09FD  0924               	comf	___ftge@ff2+1,w
  8169  09FE  00A7               	movwf	??___ftge+1
  8170  09FF  0925               	comf	___ftge@ff2+2,w
  8171  0A00  00A8               	movwf	??___ftge+2
  8172  0A01  0AA6               	incf	??___ftge,f
  8173  0A02  1903               	skipnz
  8174  0A03  0AA7               	incf	??___ftge+1,f
  8175  0A04  1903               	skipnz
  8176  0A05  0AA8               	incf	??___ftge+2,f
  8177  0A06  3000               	movlw	0
  8178  0A07  0726               	addwf	??___ftge,w
  8179  0A08  00A3               	movwf	___ftge@ff2
  8180  0A09  3000               	movlw	0
  8181  0A0A  3D27               	addwfc	??___ftge+1,w
  8182  0A0B  00A4               	movwf	___ftge@ff2+1
  8183  0A0C  3080               	movlw	128
  8184  0A0D  3D28               	addwfc	??___ftge+2,w
  8185  0A0E  00A5               	movwf	___ftge@ff2+2
  8186  0A0F                     l2775:	
  8187  0A0F  3080               	movlw	128
  8188  0A10  06A2               	xorwf	___ftge@ff1+2,f
  8189  0A11  3080               	movlw	128
  8190  0A12  06A5               	xorwf	___ftge@ff2+2,f
  8191  0A13  0825               	movf	___ftge@ff2+2,w
  8192  0A14  0222               	subwf	___ftge@ff1+2,w
  8193  0A15  1D03               	skipz
  8194  0A16  0008               	return
  8195  0A17  0824               	movf	___ftge@ff2+1,w
  8196  0A18  0221               	subwf	___ftge@ff1+1,w
  8197  0A19  1D03               	skipz
  8198  0A1A  0008               	return
  8199  0A1B  0823               	movf	___ftge@ff2,w
  8200  0A1C  0220               	subwf	___ftge@ff1,w
  8201  0A1D  0008               	return
  8202  0A1E                     __end_of___ftge:	
  8203                           
  8204                           	psect	text33
  8205  0D48                     __ptext33:	
  8206 ;; *************** function _getADCValue *****************
  8207 ;; Defined at:
  8208 ;;		line 110 in file "main.c"
  8209 ;; Parameters:    Size  Location     Type
  8210 ;;  channel         1    wreg     unsigned char 
  8211 ;; Auto vars:     Size  Location     Type
  8212 ;;  channel         1   51[BANK0 ] unsigned char 
  8213 ;;  adcSum          3   52[BANK0 ] float 
  8214 ;;  adcLoop         2   49[BANK0 ] unsigned int 
  8215 ;; Return value:  Size  Location     Type
  8216 ;;                  3   43[BANK0 ] float 
  8217 ;; Registers used:
  8218 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8219 ;; Tracked objects:
  8220 ;;		On entry : 0/0
  8221 ;;		On exit  : 0/0
  8222 ;;		Unchanged: 0/0
  8223 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8224 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8225 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8226 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8227 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8228 ;;Total ram usage:       12 bytes
  8229 ;; Hardware stack levels used:    1
  8230 ;; Hardware stack levels required when called:    9
  8231 ;; This function calls:
  8232 ;;		___awtoft
  8233 ;;		___ftadd
  8234 ;;		___ftdiv
  8235 ;;		_doWDTSleep
  8236 ;; This function is called by:
  8237 ;;		_loop
  8238 ;; This function uses a non-reentrant model
  8239 ;;
  8240                           
  8241                           
  8242                           ;psect for function _getADCValue
  8243  0D48                     _getADCValue:	
  8244                           
  8245                           ;incstack = 0
  8246                           ; Regs used in _getADCValue: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8247                           ;getADCValue@channel stored from wreg
  8248  0D48  0020               	movlb	0	; select bank0
  8249  0D49  00D3               	movwf	getADCValue@channel
  8250                           
  8251                           ;main.c: 113: float adcSum = 0;
  8252  0D4A  3000               	movlw	0
  8253  0D4B  00D4               	movwf	getADCValue@adcSum
  8254  0D4C  3000               	movlw	0
  8255  0D4D  00D5               	movwf	getADCValue@adcSum+1
  8256  0D4E  3000               	movlw	0
  8257  0D4F  00D6               	movwf	getADCValue@adcSum+2
  8258                           
  8259                           ;main.c: 114: unsigned int adcLoop = 1000;
  8260  0D50  30E8               	movlw	232
  8261  0D51  00D1               	movwf	getADCValue@adcLoop
  8262  0D52  3003               	movlw	3
  8263  0D53  00D2               	movwf	getADCValue@adcLoop+1
  8264                           
  8265                           ;main.c: 116: ADCON0bits.CHS = channel;
  8266  0D54  0853               	movf	getADCValue@channel,w
  8267  0D55  00CE               	movwf	??_getADCValue
  8268  0D56  0DCE               	rlf	??_getADCValue,f
  8269  0D57  0DCE               	rlf	??_getADCValue,f
  8270  0D58  0021               	movlb	1	; select bank1
  8271  0D59  081D               	movf	29,w	;volatile
  8272  0D5A  0020               	movlb	0	; select bank0
  8273  0D5B  064E               	xorwf	??_getADCValue,w
  8274  0D5C  3903               	andlw	-253
  8275  0D5D  064E               	xorwf	??_getADCValue,w
  8276  0D5E  0021               	movlb	1	; select bank1
  8277  0D5F  009D               	movwf	29	;volatile
  8278                           
  8279                           ;main.c: 117: FVRCONbits.FVREN = 1;
  8280  0D60  0022               	movlb	2	; select bank2
  8281  0D61  1797               	bsf	23,7	;volatile
  8282                           
  8283                           ;main.c: 118: ADCON0bits.ADON = 1;
  8284  0D62  0021               	movlb	1	; select bank1
  8285  0D63  141D               	bsf	29,0	;volatile
  8286                           
  8287                           ;main.c: 120: doWDTSleep(0b00000);
  8288  0D64  3000               	movlw	0
  8289  0D65  3196  26CB  318D   	fcall	_doWDTSleep
  8290  0D68                     l3151:	
  8291                           ;main.c: 122: while (adcLoop--){
  8292                           
  8293  0D68  3001               	movlw	1
  8294  0D69  0020               	movlb	0	; select bank0
  8295  0D6A  02D1               	subwf	getADCValue@adcLoop,f
  8296  0D6B  3000               	movlw	0
  8297  0D6C  3BD2               	subwfb	getADCValue@adcLoop+1,f
  8298  0D6D  0A51               	incf	getADCValue@adcLoop,w
  8299  0D6E  1903               	btfsc	3,2
  8300  0D6F  0A52               	incf	getADCValue@adcLoop+1,w
  8301  0D70  1903               	btfsc	3,2
  8302  0D71  2DA5               	goto	l190
  8303                           
  8304                           ;main.c: 124: ADCON0bits.ADGO = 1;
  8305  0D72  0021               	movlb	1	; select bank1
  8306  0D73  149D               	bsf	29,1	;volatile
  8307  0D74                     l3147:	
  8308                           ;main.c: 126: while (ADCON0bits.ADGO){
  8309                           
  8310  0D74  0021               	movlb	1	; select bank1
  8311  0D75  1C9D               	btfss	29,1	;volatile
  8312  0D76  2D7C               	goto	l3149
  8313                           
  8314                           ;main.c: 127: doWDTSleep(0b00000);
  8315  0D77  3000               	movlw	0
  8316  0D78  3196  26CB  318D   	fcall	_doWDTSleep
  8317  0D7B  2D74               	goto	l3147
  8318  0D7C                     l3149:	
  8319                           
  8320                           ;main.c: 128: };main.c: 130: adcSum+= (ADRESL | (ADRESH << 8));
  8321  0D7C  081C               	movf	28,w	;volatile
  8322  0D7D  0020               	movlb	0	; select bank0
  8323  0D7E  00CE               	movwf	??_getADCValue
  8324  0D7F  01CF               	clrf	??_getADCValue+1
  8325  0D80  084E               	movf	??_getADCValue,w
  8326  0D81  00CF               	movwf	??_getADCValue+1
  8327  0D82  01CE               	clrf	??_getADCValue
  8328  0D83  084E               	movf	??_getADCValue,w
  8329  0D84  0021               	movlb	1	; select bank1
  8330  0D85  041B               	iorwf	27,w	;volatile
  8331  0D86  0020               	movlb	0	; select bank0
  8332  0D87  00A8               	movwf	___awtoft@c
  8333  0D88  084F               	movf	??_getADCValue+1,w
  8334  0D89  00A9               	movwf	___awtoft@c+1
  8335  0D8A  3188  201B  318D   	fcall	___awtoft
  8336  0D8D  0020               	movlb	0	; select bank0
  8337  0D8E  0828               	movf	?___awtoft,w
  8338  0D8F  00AE               	movwf	___ftadd@f1
  8339  0D90  0829               	movf	?___awtoft+1,w
  8340  0D91  00AF               	movwf	___ftadd@f1+1
  8341  0D92  082A               	movf	?___awtoft+2,w
  8342  0D93  00B0               	movwf	___ftadd@f1+2
  8343  0D94  0854               	movf	getADCValue@adcSum,w
  8344  0D95  00B1               	movwf	___ftadd@f2
  8345  0D96  0855               	movf	getADCValue@adcSum+1,w
  8346  0D97  00B2               	movwf	___ftadd@f2+1
  8347  0D98  0856               	movf	getADCValue@adcSum+2,w
  8348  0D99  00B3               	movwf	___ftadd@f2+2
  8349  0D9A  3184  24B2  318D   	fcall	___ftadd
  8350  0D9D  0020               	movlb	0	; select bank0
  8351  0D9E  082E               	movf	?___ftadd,w
  8352  0D9F  00D4               	movwf	getADCValue@adcSum
  8353  0DA0  082F               	movf	?___ftadd+1,w
  8354  0DA1  00D5               	movwf	getADCValue@adcSum+1
  8355  0DA2  0830               	movf	?___ftadd+2,w
  8356  0DA3  00D6               	movwf	getADCValue@adcSum+2
  8357  0DA4  2D68               	goto	l3151
  8358  0DA5                     l190:	
  8359                           
  8360                           ;main.c: 132: };main.c: 134: FVRCONbits.FVREN = 0;
  8361  0DA5  0022               	movlb	2	; select bank2
  8362  0DA6  1397               	bcf	23,7	;volatile
  8363                           
  8364                           ;main.c: 135: ADCON0bits.ADON = 0;
  8365  0DA7  0021               	movlb	1	; select bank1
  8366  0DA8  101D               	bcf	29,0	;volatile
  8367                           
  8368                           ;main.c: 138: adcSum/= 1000;
  8369  0DA9  3000               	movlw	0
  8370  0DAA  0020               	movlb	0	; select bank0
  8371  0DAB  00BB               	movwf	___ftdiv@f2
  8372  0DAC  307A               	movlw	122
  8373  0DAD  00BC               	movwf	___ftdiv@f2+1
  8374  0DAE  3044               	movlw	68
  8375  0DAF  00BD               	movwf	___ftdiv@f2+2
  8376  0DB0  0854               	movf	getADCValue@adcSum,w
  8377  0DB1  00BE               	movwf	___ftdiv@f1
  8378  0DB2  0855               	movf	getADCValue@adcSum+1,w
  8379  0DB3  00BF               	movwf	___ftdiv@f1+1
  8380  0DB4  0856               	movf	getADCValue@adcSum+2,w
  8381  0DB5  00C0               	movwf	___ftdiv@f1+2
  8382  0DB6  318D  25EE  318D   	fcall	___ftdiv
  8383  0DB9  0020               	movlb	0	; select bank0
  8384  0DBA  083B               	movf	?___ftdiv,w
  8385  0DBB  00D4               	movwf	getADCValue@adcSum
  8386  0DBC  083C               	movf	?___ftdiv+1,w
  8387  0DBD  00D5               	movwf	getADCValue@adcSum+1
  8388  0DBE  083D               	movf	?___ftdiv+2,w
  8389  0DBF  00D6               	movwf	getADCValue@adcSum+2
  8390                           
  8391                           ;main.c: 141: if (ADCON1bits.ADPREF == 0b11){
  8392  0DC0  0021               	movlb	1	; select bank1
  8393  0DC1  081E               	movf	30,w	;volatile
  8394  0DC2  3903               	andlw	3
  8395  0DC3  3A03               	xorlw	3
  8396  0DC4  1903               	btfsc	3,2
  8397  0DC5  2DDF               	goto	l3163
  8398  0DC6  2DE6               	goto	l3165
  8399  0DC7                     l3159:	
  8400                           ;main.c: 143: case 0b10:
  8401                           
  8402                           ;main.c: 142: switch (FVRCONbits.ADFVR){
  8403                           
  8404                           
  8405                           ;main.c: 144: adcSum/= 500;
  8406  0DC7  3000               	movlw	0
  8407  0DC8  0020               	movlb	0	; select bank0
  8408  0DC9  00BB               	movwf	___ftdiv@f2
  8409  0DCA  30FA               	movlw	250
  8410  0DCB  00BC               	movwf	___ftdiv@f2+1
  8411  0DCC  3043               	movlw	67
  8412  0DCD  00BD               	movwf	___ftdiv@f2+2
  8413  0DCE  0854               	movf	getADCValue@adcSum,w
  8414  0DCF  00BE               	movwf	___ftdiv@f1
  8415  0DD0  0855               	movf	getADCValue@adcSum+1,w
  8416  0DD1  00BF               	movwf	___ftdiv@f1+1
  8417  0DD2  0856               	movf	getADCValue@adcSum+2,w
  8418  0DD3  00C0               	movwf	___ftdiv@f1+2
  8419  0DD4  318D  25EE  318D   	fcall	___ftdiv
  8420  0DD7  0020               	movlb	0	; select bank0
  8421  0DD8  083B               	movf	?___ftdiv,w
  8422  0DD9  00D4               	movwf	getADCValue@adcSum
  8423  0DDA  083C               	movf	?___ftdiv+1,w
  8424  0DDB  00D5               	movwf	getADCValue@adcSum+1
  8425  0DDC  083D               	movf	?___ftdiv+2,w
  8426  0DDD  00D6               	movwf	getADCValue@adcSum+2
  8427                           
  8428                           ;main.c: 146: }
  8429                           
  8430                           ;main.c: 145: break;
  8431  0DDE  2DE6               	goto	l3165
  8432  0DDF                     l3163:	
  8433  0DDF  0022               	movlb	2	; select bank2
  8434  0DE0  0817               	movf	23,w	;volatile
  8435  0DE1  3903               	andlw	3
  8436                           
  8437                           ; Switch size 1, requested type "space"
  8438                           ; Number of cases is 1, Range of values is 2 to 2
  8439                           ; switch strategies available:
  8440                           ; Name         Instructions Cycles
  8441                           ; simple_byte            4     3 (average)
  8442                           ; direct_byte           11     9 (fixed)
  8443                           ; jumptable            263     9 (fixed)
  8444                           ;	Chosen strategy is simple_byte
  8445  0DE2  3A02               	xorlw	2	; case 2
  8446  0DE3  1903               	skipnz
  8447  0DE4  2DC7               	goto	l3159
  8448  0DE5  2DE6               	goto	l3165
  8449  0DE6                     l3165:	
  8450                           
  8451                           ;main.c: 147: };main.c: 150: return adcSum;
  8452  0DE6  0020               	movlb	0	; select bank0
  8453  0DE7  0854               	movf	getADCValue@adcSum,w
  8454  0DE8  00CB               	movwf	?_getADCValue
  8455  0DE9  0855               	movf	getADCValue@adcSum+1,w
  8456  0DEA  00CC               	movwf	?_getADCValue+1
  8457  0DEB  0856               	movf	getADCValue@adcSum+2,w
  8458  0DEC  00CD               	movwf	?_getADCValue+2
  8459  0DED  0008               	return
  8460  0DEE                     __end_of_getADCValue:	
  8461                           
  8462                           	psect	text34
  8463  16CB                     __ptext34:	
  8464 ;; *************** function _doWDTSleep *****************
  8465 ;; Defined at:
  8466 ;;		line 22 in file "main.c"
  8467 ;; Parameters:    Size  Location     Type
  8468 ;;  wdtps           1    wreg     unsigned char 
  8469 ;; Auto vars:     Size  Location     Type
  8470 ;;  wdtps           1    1[BANK0 ] unsigned char 
  8471 ;; Return value:  Size  Location     Type
  8472 ;;                  1    wreg      void 
  8473 ;; Registers used:
  8474 ;;		wreg, status,2, status,0
  8475 ;; Tracked objects:
  8476 ;;		On entry : 0/0
  8477 ;;		On exit  : 0/0
  8478 ;;		Unchanged: 0/0
  8479 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8480 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8481 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8482 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8483 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8484 ;;Total ram usage:        2 bytes
  8485 ;; Hardware stack levels used:    1
  8486 ;; Hardware stack levels required when called:    7
  8487 ;; This function calls:
  8488 ;;		Nothing
  8489 ;; This function is called by:
  8490 ;;		_sleep
  8491 ;;		_getADCValue
  8492 ;; This function uses a non-reentrant model
  8493 ;;
  8494                           
  8495                           
  8496                           ;psect for function _doWDTSleep
  8497  16CB                     _doWDTSleep:	
  8498                           
  8499                           ;incstack = 0
  8500                           ; Regs used in _doWDTSleep: [wreg+status,2+status,0]
  8501                           ;doWDTSleep@wdtps stored from wreg
  8502  16CB  0020               	movlb	0	; select bank0
  8503  16CC  00A1               	movwf	doWDTSleep@wdtps
  8504                           
  8505                           ;main.c: 25: WDTCONbits.WDTPS = wdtps;
  8506  16CD  0821               	movf	doWDTSleep@wdtps,w
  8507  16CE  00A0               	movwf	??_doWDTSleep
  8508  16CF  0DA0               	rlf	??_doWDTSleep,f
  8509  16D0  0021               	movlb	1	; select bank1
  8510  16D1  0817               	movf	23,w	;volatile
  8511  16D2  0020               	movlb	0	; select bank0
  8512  16D3  0620               	xorwf	??_doWDTSleep,w
  8513  16D4  39C1               	andlw	-63
  8514  16D5  0620               	xorwf	??_doWDTSleep,w
  8515  16D6  0021               	movlb	1	; select bank1
  8516  16D7  0097               	movwf	23	;volatile
  8517  16D8  0063               	sleep	;# 
  8518                           
  8519                           ;main.c: 29: __nop();
  8520  16D9  0000               	nop
  8521                           
  8522                           ;main.c: 30: __nop();
  8523  16DA  0000               	nop
  8524                           
  8525                           ;main.c: 32: WDTCONbits.WDTPS = 0b01101;
  8526  16DB  0021               	movlb	1	; select bank1
  8527  16DC  0817               	movf	23,w	;volatile
  8528  16DD  39C1               	andlw	-63
  8529  16DE  381A               	iorlw	26
  8530  16DF  0097               	movwf	23	;volatile
  8531  16E0  0064               	clrwdt	;# 
  8532  16E1  0008               	return
  8533  16E2                     __end_of_doWDTSleep:	
  8534                           
  8535                           	psect	text35
  8536  0DEE                     __ptext35:	
  8537 ;; *************** function ___ftdiv *****************
  8538 ;; Defined at:
  8539 ;;		line 56 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\ftdiv.c"
  8540 ;; Parameters:    Size  Location     Type
  8541 ;;  f2              3   27[BANK0 ] float 
  8542 ;;  f1              3   30[BANK0 ] float 
  8543 ;; Auto vars:     Size  Location     Type
  8544 ;;  f3              3   38[BANK0 ] float 
  8545 ;;  sign            1   42[BANK0 ] unsigned char 
  8546 ;;  exp             1   41[BANK0 ] unsigned char 
  8547 ;;  cntr            1   37[BANK0 ] unsigned char 
  8548 ;; Return value:  Size  Location     Type
  8549 ;;                  3   27[BANK0 ] float 
  8550 ;; Registers used:
  8551 ;;		wreg, status,2, status,0, pclath, cstack
  8552 ;; Tracked objects:
  8553 ;;		On entry : 0/0
  8554 ;;		On exit  : 0/0
  8555 ;;		Unchanged: 0/0
  8556 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8557 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8558 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8559 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8560 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8561 ;;Total ram usage:       16 bytes
  8562 ;; Hardware stack levels used:    1
  8563 ;; Hardware stack levels required when called:    8
  8564 ;; This function calls:
  8565 ;;		___ftpack
  8566 ;; This function is called by:
  8567 ;;		_getADCValue
  8568 ;;		_loop
  8569 ;; This function uses a non-reentrant model
  8570 ;;
  8571                           
  8572                           
  8573                           ;psect for function ___ftdiv
  8574  0DEE                     ___ftdiv:	
  8575                           
  8576                           ;incstack = 0
  8577                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
  8578  0DEE  0020               	movlb	0	; select bank0
  8579  0DEF  083E               	movf	___ftdiv@f1,w
  8580  0DF0  00C1               	movwf	??___ftdiv
  8581  0DF1  083F               	movf	___ftdiv@f1+1,w
  8582  0DF2  00C2               	movwf	??___ftdiv+1
  8583  0DF3  0840               	movf	___ftdiv@f1+2,w
  8584  0DF4  00C3               	movwf	??___ftdiv+2
  8585  0DF5  1003               	clrc
  8586  0DF6  0D42               	rlf	??___ftdiv+1,w
  8587  0DF7  0D43               	rlf	??___ftdiv+2,w
  8588  0DF8  00C4               	movwf	??___ftdiv+3
  8589  0DF9  0844               	movf	??___ftdiv+3,w
  8590  0DFA  00C9               	movwf	___ftdiv@exp
  8591  0DFB  0849               	movf	___ftdiv@exp,w
  8592  0DFC  1D03               	btfss	3,2
  8593  0DFD  2E05               	goto	l3011
  8594  0DFE  3000               	movlw	0
  8595  0DFF  00BB               	movwf	?___ftdiv
  8596  0E00  3000               	movlw	0
  8597  0E01  00BC               	movwf	?___ftdiv+1
  8598  0E02  3000               	movlw	0
  8599  0E03  00BD               	movwf	?___ftdiv+2
  8600  0E04  0008               	return
  8601  0E05                     l3011:	
  8602  0E05  083B               	movf	___ftdiv@f2,w
  8603  0E06  00C1               	movwf	??___ftdiv
  8604  0E07  083C               	movf	___ftdiv@f2+1,w
  8605  0E08  00C2               	movwf	??___ftdiv+1
  8606  0E09  083D               	movf	___ftdiv@f2+2,w
  8607  0E0A  00C3               	movwf	??___ftdiv+2
  8608  0E0B  1003               	clrc
  8609  0E0C  0D42               	rlf	??___ftdiv+1,w
  8610  0E0D  0D43               	rlf	??___ftdiv+2,w
  8611  0E0E  00C4               	movwf	??___ftdiv+3
  8612  0E0F  0844               	movf	??___ftdiv+3,w
  8613  0E10  00CA               	movwf	___ftdiv@sign
  8614  0E11  084A               	movf	___ftdiv@sign,w
  8615  0E12  1D03               	btfss	3,2
  8616  0E13  2E1B               	goto	l3017
  8617  0E14  3000               	movlw	0
  8618  0E15  00BB               	movwf	?___ftdiv
  8619  0E16  3000               	movlw	0
  8620  0E17  00BC               	movwf	?___ftdiv+1
  8621  0E18  3000               	movlw	0
  8622  0E19  00BD               	movwf	?___ftdiv+2
  8623  0E1A  0008               	return
  8624  0E1B                     l3017:	
  8625  0E1B  3000               	movlw	0
  8626  0E1C  00C6               	movwf	___ftdiv@f3
  8627  0E1D  3000               	movlw	0
  8628  0E1E  00C7               	movwf	___ftdiv@f3+1
  8629  0E1F  3000               	movlw	0
  8630  0E20  00C8               	movwf	___ftdiv@f3+2
  8631  0E21  3089               	movlw	137
  8632  0E22  074A               	addwf	___ftdiv@sign,w
  8633  0E23  00C1               	movwf	??___ftdiv
  8634  0E24  0841               	movf	??___ftdiv,w
  8635  0E25  02C9               	subwf	___ftdiv@exp,f
  8636  0E26  083E               	movf	___ftdiv@f1,w
  8637  0E27  00C1               	movwf	??___ftdiv
  8638  0E28  083F               	movf	___ftdiv@f1+1,w
  8639  0E29  00C2               	movwf	??___ftdiv+1
  8640  0E2A  0840               	movf	___ftdiv@f1+2,w
  8641  0E2B  00C3               	movwf	??___ftdiv+2
  8642  0E2C  3010               	movlw	16
  8643  0E2D                     u3085:	
  8644  0E2D  36C3               	lsrf	??___ftdiv+2,f
  8645  0E2E  0CC2               	rrf	??___ftdiv+1,f
  8646  0E2F  0CC1               	rrf	??___ftdiv,f
  8647  0E30  0B89               	decfsz	9,f
  8648  0E31  2E2D               	goto	u3085
  8649  0E32  0841               	movf	??___ftdiv,w
  8650  0E33  00C4               	movwf	??___ftdiv+3
  8651  0E34  0844               	movf	??___ftdiv+3,w
  8652  0E35  00CA               	movwf	___ftdiv@sign
  8653  0E36  083B               	movf	___ftdiv@f2,w
  8654  0E37  00C1               	movwf	??___ftdiv
  8655  0E38  083C               	movf	___ftdiv@f2+1,w
  8656  0E39  00C2               	movwf	??___ftdiv+1
  8657  0E3A  083D               	movf	___ftdiv@f2+2,w
  8658  0E3B  00C3               	movwf	??___ftdiv+2
  8659  0E3C  3010               	movlw	16
  8660  0E3D                     u3095:	
  8661  0E3D  36C3               	lsrf	??___ftdiv+2,f
  8662  0E3E  0CC2               	rrf	??___ftdiv+1,f
  8663  0E3F  0CC1               	rrf	??___ftdiv,f
  8664  0E40  0B89               	decfsz	9,f
  8665  0E41  2E3D               	goto	u3095
  8666  0E42  0841               	movf	??___ftdiv,w
  8667  0E43  00C4               	movwf	??___ftdiv+3
  8668  0E44  0844               	movf	??___ftdiv+3,w
  8669  0E45  06CA               	xorwf	___ftdiv@sign,f
  8670  0E46  3080               	movlw	128
  8671  0E47  00C1               	movwf	??___ftdiv
  8672  0E48  0841               	movf	??___ftdiv,w
  8673  0E49  05CA               	andwf	___ftdiv@sign,f
  8674  0E4A  17BF               	bsf	___ftdiv@f1+1,7
  8675  0E4B  30FF               	movlw	255
  8676  0E4C  05BE               	andwf	___ftdiv@f1,f
  8677  0E4D  30FF               	movlw	255
  8678  0E4E  05BF               	andwf	___ftdiv@f1+1,f
  8679  0E4F  3000               	movlw	0
  8680  0E50  05C0               	andwf	___ftdiv@f1+2,f
  8681  0E51  17BC               	bsf	___ftdiv@f2+1,7
  8682  0E52  30FF               	movlw	255
  8683  0E53  05BB               	andwf	___ftdiv@f2,f
  8684  0E54  30FF               	movlw	255
  8685  0E55  05BC               	andwf	___ftdiv@f2+1,f
  8686  0E56  3000               	movlw	0
  8687  0E57  05BD               	andwf	___ftdiv@f2+2,f
  8688  0E58  3018               	movlw	24
  8689  0E59  00C1               	movwf	??___ftdiv
  8690  0E5A  0841               	movf	??___ftdiv,w
  8691  0E5B  00C5               	movwf	___ftdiv@cntr
  8692  0E5C                     l3031:	
  8693  0E5C  3001               	movlw	1
  8694  0E5D                     u3105:	
  8695  0E5D  35C6               	lslf	___ftdiv@f3,f
  8696  0E5E  0DC7               	rlf	___ftdiv@f3+1,f
  8697  0E5F  0DC8               	rlf	___ftdiv@f3+2,f
  8698  0E60  0B89               	decfsz	9,f
  8699  0E61  2E5D               	goto	u3105
  8700  0E62  083D               	movf	___ftdiv@f2+2,w
  8701  0E63  0240               	subwf	___ftdiv@f1+2,w
  8702  0E64  1D03               	skipz
  8703  0E65  2E6C               	goto	u3115
  8704  0E66  083C               	movf	___ftdiv@f2+1,w
  8705  0E67  023F               	subwf	___ftdiv@f1+1,w
  8706  0E68  1D03               	skipz
  8707  0E69  2E6C               	goto	u3115
  8708  0E6A  083B               	movf	___ftdiv@f2,w
  8709  0E6B  023E               	subwf	___ftdiv@f1,w
  8710  0E6C                     u3115:	
  8711  0E6C  1C03               	skipc
  8712  0E6D  2E75               	goto	l3039
  8713  0E6E  083B               	movf	___ftdiv@f2,w
  8714  0E6F  02BE               	subwf	___ftdiv@f1,f
  8715  0E70  083C               	movf	___ftdiv@f2+1,w
  8716  0E71  3BBF               	subwfb	___ftdiv@f1+1,f
  8717  0E72  083D               	movf	___ftdiv@f2+2,w
  8718  0E73  3BC0               	subwfb	___ftdiv@f1+2,f
  8719  0E74  1446               	bsf	___ftdiv@f3,0
  8720  0E75                     l3039:	
  8721  0E75  3001               	movlw	1
  8722  0E76                     u3125:	
  8723  0E76  35BE               	lslf	___ftdiv@f1,f
  8724  0E77  0DBF               	rlf	___ftdiv@f1+1,f
  8725  0E78  0DC0               	rlf	___ftdiv@f1+2,f
  8726  0E79  0B89               	decfsz	9,f
  8727  0E7A  2E76               	goto	u3125
  8728  0E7B  3001               	movlw	1
  8729  0E7C  02C5               	subwf	___ftdiv@cntr,f
  8730  0E7D  1D03               	btfss	3,2
  8731  0E7E  2E5C               	goto	l3031
  8732  0E7F  0846               	movf	___ftdiv@f3,w
  8733  0E80  00A0               	movwf	___ftpack@arg
  8734  0E81  0847               	movf	___ftdiv@f3+1,w
  8735  0E82  00A1               	movwf	___ftpack@arg+1
  8736  0E83  0848               	movf	___ftdiv@f3+2,w
  8737  0E84  00A2               	movwf	___ftpack@arg+2
  8738  0E85  0849               	movf	___ftdiv@exp,w
  8739  0E86  00C1               	movwf	??___ftdiv
  8740  0E87  0841               	movf	??___ftdiv,w
  8741  0E88  00A3               	movwf	___ftpack@exp
  8742  0E89  084A               	movf	___ftdiv@sign,w
  8743  0E8A  00C2               	movwf	??___ftdiv+1
  8744  0E8B  0842               	movf	??___ftdiv+1,w
  8745  0E8C  00A4               	movwf	___ftpack@sign
  8746  0E8D  318C  2444         	fcall	___ftpack
  8747  0E8F  0020               	movlb	0	; select bank0
  8748  0E90  0820               	movf	?___ftpack,w
  8749  0E91  00BB               	movwf	?___ftdiv
  8750  0E92  0821               	movf	?___ftpack+1,w
  8751  0E93  00BC               	movwf	?___ftdiv+1
  8752  0E94  0822               	movf	?___ftpack+2,w
  8753  0E95  00BD               	movwf	?___ftdiv+2
  8754  0E96  0008               	return
  8755  0E97                     __end_of___ftdiv:	
  8756                           
  8757                           	psect	text36
  8758  04B2                     __ptext36:	
  8759 ;; *************** function ___ftadd *****************
  8760 ;; Defined at:
  8761 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\ftadd.c"
  8762 ;; Parameters:    Size  Location     Type
  8763 ;;  f1              3   14[BANK0 ] float 
  8764 ;;  f2              3   17[BANK0 ] float 
  8765 ;; Auto vars:     Size  Location     Type
  8766 ;;  exp1            1   26[BANK0 ] unsigned char 
  8767 ;;  exp2            1   25[BANK0 ] unsigned char 
  8768 ;;  sign            1   24[BANK0 ] unsigned char 
  8769 ;; Return value:  Size  Location     Type
  8770 ;;                  3   14[BANK0 ] float 
  8771 ;; Registers used:
  8772 ;;		wreg, status,2, status,0, pclath, cstack
  8773 ;; Tracked objects:
  8774 ;;		On entry : 0/0
  8775 ;;		On exit  : 0/0
  8776 ;;		Unchanged: 0/0
  8777 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8778 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8779 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8780 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8781 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8782 ;;Total ram usage:       13 bytes
  8783 ;; Hardware stack levels used:    1
  8784 ;; Hardware stack levels required when called:    8
  8785 ;; This function calls:
  8786 ;;		___ftpack
  8787 ;; This function is called by:
  8788 ;;		_getADCValue
  8789 ;;		_loop
  8790 ;;		___ftsub
  8791 ;; This function uses a non-reentrant model
  8792 ;;
  8793                           
  8794                           
  8795                           ;psect for function ___ftadd
  8796  04B2                     ___ftadd:	
  8797                           
  8798                           ;incstack = 0
  8799                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
  8800  04B2  0020               	movlb	0	; select bank0
  8801  04B3  082E               	movf	___ftadd@f1,w
  8802  04B4  00B4               	movwf	??___ftadd
  8803  04B5  082F               	movf	___ftadd@f1+1,w
  8804  04B6  00B5               	movwf	??___ftadd+1
  8805  04B7  0830               	movf	___ftadd@f1+2,w
  8806  04B8  00B6               	movwf	??___ftadd+2
  8807  04B9  1003               	clrc
  8808  04BA  0D35               	rlf	??___ftadd+1,w
  8809  04BB  0D36               	rlf	??___ftadd+2,w
  8810  04BC  00B7               	movwf	??___ftadd+3
  8811  04BD  0837               	movf	??___ftadd+3,w
  8812  04BE  00BA               	movwf	___ftadd@exp1
  8813  04BF  0831               	movf	___ftadd@f2,w
  8814  04C0  00B4               	movwf	??___ftadd
  8815  04C1  0832               	movf	___ftadd@f2+1,w
  8816  04C2  00B5               	movwf	??___ftadd+1
  8817  04C3  0833               	movf	___ftadd@f2+2,w
  8818  04C4  00B6               	movwf	??___ftadd+2
  8819  04C5  1003               	clrc
  8820  04C6  0D35               	rlf	??___ftadd+1,w
  8821  04C7  0D36               	rlf	??___ftadd+2,w
  8822  04C8  00B7               	movwf	??___ftadd+3
  8823  04C9  0837               	movf	??___ftadd+3,w
  8824  04CA  00B9               	movwf	___ftadd@exp2
  8825  04CB  083A               	movf	___ftadd@exp1,w
  8826  04CC  1903               	btfsc	3,2
  8827  04CD  2CDA               	goto	l2563
  8828  04CE  0839               	movf	___ftadd@exp2,w
  8829  04CF  023A               	subwf	___ftadd@exp1,w
  8830  04D0  1803               	skipnc
  8831  04D1  2CE1               	goto	l2567
  8832  04D2  033A               	decf	___ftadd@exp1,w
  8833  04D3  3AFF               	xorlw	255
  8834  04D4  0739               	addwf	___ftadd@exp2,w
  8835  04D5  00B4               	movwf	??___ftadd
  8836  04D6  3019               	movlw	25
  8837  04D7  0234               	subwf	??___ftadd,w
  8838  04D8  1C03               	skipc
  8839  04D9  2CE1               	goto	l2567
  8840  04DA                     l2563:	
  8841  04DA  0831               	movf	___ftadd@f2,w
  8842  04DB  00AE               	movwf	?___ftadd
  8843  04DC  0832               	movf	___ftadd@f2+1,w
  8844  04DD  00AF               	movwf	?___ftadd+1
  8845  04DE  0833               	movf	___ftadd@f2+2,w
  8846  04DF  00B0               	movwf	?___ftadd+2
  8847  04E0  0008               	return
  8848  04E1                     l2567:	
  8849  04E1  0839               	movf	___ftadd@exp2,w
  8850  04E2  1903               	btfsc	3,2
  8851  04E3  0008               	return
  8852  04E4  083A               	movf	___ftadd@exp1,w
  8853  04E5  0239               	subwf	___ftadd@exp2,w
  8854  04E6  1803               	skipnc
  8855  04E7  2CF0               	goto	l2573
  8856  04E8  0339               	decf	___ftadd@exp2,w
  8857  04E9  3AFF               	xorlw	255
  8858  04EA  073A               	addwf	___ftadd@exp1,w
  8859  04EB  00B4               	movwf	??___ftadd
  8860  04EC  3019               	movlw	25
  8861  04ED  0234               	subwf	??___ftadd,w
  8862  04EE  1803               	btfsc	3,0
  8863  04EF  0008               	return
  8864  04F0                     l2573:	
  8865  04F0  3006               	movlw	6
  8866  04F1  00B4               	movwf	??___ftadd
  8867  04F2  0834               	movf	??___ftadd,w
  8868  04F3  00B8               	movwf	___ftadd@sign
  8869  04F4  1BB0               	btfsc	___ftadd@f1+2,7
  8870  04F5  17B8               	bsf	___ftadd@sign,7
  8871  04F6  1BB3               	btfsc	___ftadd@f2+2,7
  8872  04F7  1738               	bsf	___ftadd@sign,6
  8873  04F8  17AF               	bsf	___ftadd@f1+1,7
  8874  04F9  30FF               	movlw	255
  8875  04FA  05AE               	andwf	___ftadd@f1,f
  8876  04FB  30FF               	movlw	255
  8877  04FC  05AF               	andwf	___ftadd@f1+1,f
  8878  04FD  3000               	movlw	0
  8879  04FE  05B0               	andwf	___ftadd@f1+2,f
  8880  04FF  17B2               	bsf	___ftadd@f2+1,7
  8881  0500  30FF               	movlw	255
  8882  0501  05B1               	andwf	___ftadd@f2,f
  8883  0502  30FF               	movlw	255
  8884  0503  05B2               	andwf	___ftadd@f2+1,f
  8885  0504  3000               	movlw	0
  8886  0505  05B3               	andwf	___ftadd@f2+2,f
  8887  0506  0839               	movf	___ftadd@exp2,w
  8888  0507  023A               	subwf	___ftadd@exp1,w
  8889  0508  1803               	skipnc
  8890  0509  2D2C               	goto	l2595
  8891  050A                     l2585:	
  8892  050A  3001               	movlw	1
  8893  050B                     u2295:	
  8894  050B  35B1               	lslf	___ftadd@f2,f
  8895  050C  0DB2               	rlf	___ftadd@f2+1,f
  8896  050D  0DB3               	rlf	___ftadd@f2+2,f
  8897  050E  0B89               	decfsz	9,f
  8898  050F  2D0B               	goto	u2295
  8899  0510  3001               	movlw	1
  8900  0511  02B9               	subwf	___ftadd@exp2,f
  8901  0512  0839               	movf	___ftadd@exp2,w
  8902  0513  063A               	xorwf	___ftadd@exp1,w
  8903  0514  1903               	skipnz
  8904  0515  2D27               	goto	l2593
  8905  0516  3001               	movlw	1
  8906  0517  02B8               	subwf	___ftadd@sign,f
  8907  0518  0838               	movf	___ftadd@sign,w
  8908  0519  3907               	andlw	7
  8909  051A  1903               	btfsc	3,2
  8910  051B  2D27               	goto	l2593
  8911  051C  2D0A               	goto	l2585
  8912  051D                     l2591:	
  8913  051D  3001               	movlw	1
  8914  051E                     u2325:	
  8915  051E  36B0               	lsrf	___ftadd@f1+2,f
  8916  051F  0CAF               	rrf	___ftadd@f1+1,f
  8917  0520  0CAE               	rrf	___ftadd@f1,f
  8918  0521  0B89               	decfsz	9,f
  8919  0522  2D1E               	goto	u2325
  8920  0523  3001               	movlw	1
  8921  0524  00B4               	movwf	??___ftadd
  8922  0525  0834               	movf	??___ftadd,w
  8923  0526  07BA               	addwf	___ftadd@exp1,f
  8924  0527                     l2593:	
  8925  0527  083A               	movf	___ftadd@exp1,w
  8926  0528  0639               	xorwf	___ftadd@exp2,w
  8927  0529  1903               	btfsc	3,2
  8928  052A  2D51               	goto	l717
  8929  052B  2D1D               	goto	l2591
  8930  052C                     l2595:	
  8931  052C  083A               	movf	___ftadd@exp1,w
  8932  052D  0239               	subwf	___ftadd@exp2,w
  8933  052E  1803               	skipnc
  8934  052F  2D51               	goto	l717
  8935  0530                     l2597:	
  8936  0530  3001               	movlw	1
  8937  0531                     u2355:	
  8938  0531  35AE               	lslf	___ftadd@f1,f
  8939  0532  0DAF               	rlf	___ftadd@f1+1,f
  8940  0533  0DB0               	rlf	___ftadd@f1+2,f
  8941  0534  0B89               	decfsz	9,f
  8942  0535  2D31               	goto	u2355
  8943  0536  3001               	movlw	1
  8944  0537  02BA               	subwf	___ftadd@exp1,f
  8945  0538  0839               	movf	___ftadd@exp2,w
  8946  0539  063A               	xorwf	___ftadd@exp1,w
  8947  053A  1903               	skipnz
  8948  053B  2D4D               	goto	l2605
  8949  053C  3001               	movlw	1
  8950  053D  02B8               	subwf	___ftadd@sign,f
  8951  053E  0838               	movf	___ftadd@sign,w
  8952  053F  3907               	andlw	7
  8953  0540  1903               	btfsc	3,2
  8954  0541  2D4D               	goto	l2605
  8955  0542  2D30               	goto	l2597
  8956  0543                     l2603:	
  8957  0543  3001               	movlw	1
  8958  0544                     u2385:	
  8959  0544  36B3               	lsrf	___ftadd@f2+2,f
  8960  0545  0CB2               	rrf	___ftadd@f2+1,f
  8961  0546  0CB1               	rrf	___ftadd@f2,f
  8962  0547  0B89               	decfsz	9,f
  8963  0548  2D44               	goto	u2385
  8964  0549  3001               	movlw	1
  8965  054A  00B4               	movwf	??___ftadd
  8966  054B  0834               	movf	??___ftadd,w
  8967  054C  07B9               	addwf	___ftadd@exp2,f
  8968  054D                     l2605:	
  8969  054D  083A               	movf	___ftadd@exp1,w
  8970  054E  0639               	xorwf	___ftadd@exp2,w
  8971  054F  1D03               	skipz
  8972  0550  2D43               	goto	l2603
  8973  0551                     l717:	
  8974  0551  1FB8               	btfss	___ftadd@sign,7
  8975  0552  2D63               	goto	l2609
  8976  0553  30FF               	movlw	255
  8977  0554  06AE               	xorwf	___ftadd@f1,f
  8978  0555  30FF               	movlw	255
  8979  0556  06AF               	xorwf	___ftadd@f1+1,f
  8980  0557  30FF               	movlw	255
  8981  0558  06B0               	xorwf	___ftadd@f1+2,f
  8982  0559  3001               	movlw	1
  8983  055A  07AE               	addwf	___ftadd@f1,f
  8984  055B  3000               	movlw	0
  8985  055C  1803               	skipnc
  8986  055D  3001               	movlw	1
  8987  055E  07AF               	addwf	___ftadd@f1+1,f
  8988  055F  3000               	movlw	0
  8989  0560  1803               	skipnc
  8990  0561  3001               	movlw	1
  8991  0562  07B0               	addwf	___ftadd@f1+2,f
  8992  0563                     l2609:	
  8993  0563  1F38               	btfss	___ftadd@sign,6
  8994  0564  2D75               	goto	l2613
  8995  0565  30FF               	movlw	255
  8996  0566  06B1               	xorwf	___ftadd@f2,f
  8997  0567  30FF               	movlw	255
  8998  0568  06B2               	xorwf	___ftadd@f2+1,f
  8999  0569  30FF               	movlw	255
  9000  056A  06B3               	xorwf	___ftadd@f2+2,f
  9001  056B  3001               	movlw	1
  9002  056C  07B1               	addwf	___ftadd@f2,f
  9003  056D  3000               	movlw	0
  9004  056E  1803               	skipnc
  9005  056F  3001               	movlw	1
  9006  0570  07B2               	addwf	___ftadd@f2+1,f
  9007  0571  3000               	movlw	0
  9008  0572  1803               	skipnc
  9009  0573  3001               	movlw	1
  9010  0574  07B3               	addwf	___ftadd@f2+2,f
  9011  0575                     l2613:	
  9012  0575  01B8               	clrf	___ftadd@sign
  9013  0576  082E               	movf	___ftadd@f1,w
  9014  0577  07B1               	addwf	___ftadd@f2,f
  9015  0578  082F               	movf	___ftadd@f1+1,w
  9016  0579  3DB2               	addwfc	___ftadd@f2+1,f
  9017  057A  0830               	movf	___ftadd@f1+2,w
  9018  057B  3DB3               	addwfc	___ftadd@f2+2,f
  9019  057C  1FB3               	btfss	___ftadd@f2+2,7
  9020  057D  2D90               	goto	l2623
  9021  057E  30FF               	movlw	255
  9022  057F  06B1               	xorwf	___ftadd@f2,f
  9023  0580  30FF               	movlw	255
  9024  0581  06B2               	xorwf	___ftadd@f2+1,f
  9025  0582  30FF               	movlw	255
  9026  0583  06B3               	xorwf	___ftadd@f2+2,f
  9027  0584  3001               	movlw	1
  9028  0585  07B1               	addwf	___ftadd@f2,f
  9029  0586  3000               	movlw	0
  9030  0587  1803               	skipnc
  9031  0588  3001               	movlw	1
  9032  0589  07B2               	addwf	___ftadd@f2+1,f
  9033  058A  3000               	movlw	0
  9034  058B  1803               	skipnc
  9035  058C  3001               	movlw	1
  9036  058D  07B3               	addwf	___ftadd@f2+2,f
  9037  058E  01B8               	clrf	___ftadd@sign
  9038  058F  0AB8               	incf	___ftadd@sign,f
  9039  0590                     l2623:	
  9040  0590  0831               	movf	___ftadd@f2,w
  9041  0591  00A0               	movwf	___ftpack@arg
  9042  0592  0832               	movf	___ftadd@f2+1,w
  9043  0593  00A1               	movwf	___ftpack@arg+1
  9044  0594  0833               	movf	___ftadd@f2+2,w
  9045  0595  00A2               	movwf	___ftpack@arg+2
  9046  0596  083A               	movf	___ftadd@exp1,w
  9047  0597  00B4               	movwf	??___ftadd
  9048  0598  0834               	movf	??___ftadd,w
  9049  0599  00A3               	movwf	___ftpack@exp
  9050  059A  0838               	movf	___ftadd@sign,w
  9051  059B  00B5               	movwf	??___ftadd+1
  9052  059C  0835               	movf	??___ftadd+1,w
  9053  059D  00A4               	movwf	___ftpack@sign
  9054  059E  318C  2444         	fcall	___ftpack
  9055  05A0  0020               	movlb	0	; select bank0
  9056  05A1  0820               	movf	?___ftpack,w
  9057  05A2  00AE               	movwf	?___ftadd
  9058  05A3  0821               	movf	?___ftpack+1,w
  9059  05A4  00AF               	movwf	?___ftadd+1
  9060  05A5  0822               	movf	?___ftpack+2,w
  9061  05A6  00B0               	movwf	?___ftadd+2
  9062  05A7  0008               	return
  9063  05A8                     __end_of___ftadd:	
  9064                           
  9065                           	psect	text37
  9066  081B                     __ptext37:	
  9067 ;; *************** function ___awtoft *****************
  9068 ;; Defined at:
  9069 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\awtoft.c"
  9070 ;; Parameters:    Size  Location     Type
  9071 ;;  c               2    8[BANK0 ] int 
  9072 ;; Auto vars:     Size  Location     Type
  9073 ;;  sign            1   13[BANK0 ] unsigned char 
  9074 ;; Return value:  Size  Location     Type
  9075 ;;                  3    8[BANK0 ] float 
  9076 ;; Registers used:
  9077 ;;		wreg, status,2, status,0, pclath, cstack
  9078 ;; Tracked objects:
  9079 ;;		On entry : 0/0
  9080 ;;		On exit  : 0/0
  9081 ;;		Unchanged: 0/0
  9082 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9083 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9084 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9085 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9086 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9087 ;;Total ram usage:        6 bytes
  9088 ;; Hardware stack levels used:    1
  9089 ;; Hardware stack levels required when called:    8
  9090 ;; This function calls:
  9091 ;;		___ftpack
  9092 ;; This function is called by:
  9093 ;;		_getADCValue
  9094 ;;		_loop
  9095 ;; This function uses a non-reentrant model
  9096 ;;
  9097                           
  9098                           
  9099                           ;psect for function ___awtoft
  9100  081B                     ___awtoft:	
  9101                           
  9102                           ;incstack = 0
  9103                           ; Regs used in ___awtoft: [wreg+status,2+status,0+pclath+cstack]
  9104  081B  0020               	movlb	0	; select bank0
  9105  081C  01AD               	clrf	___awtoft@sign
  9106  081D  1FA9               	btfss	___awtoft@c+1,7
  9107  081E  2826               	goto	l3001
  9108  081F  09A8               	comf	___awtoft@c,f
  9109  0820  09A9               	comf	___awtoft@c+1,f
  9110  0821  0AA8               	incf	___awtoft@c,f
  9111  0822  1903               	skipnz
  9112  0823  0AA9               	incf	___awtoft@c+1,f
  9113  0824  01AD               	clrf	___awtoft@sign
  9114  0825  0AAD               	incf	___awtoft@sign,f
  9115  0826                     l3001:	
  9116  0826  0828               	movf	___awtoft@c,w
  9117  0827  00A0               	movwf	___ftpack@arg
  9118  0828  0829               	movf	___awtoft@c+1,w
  9119  0829  00A1               	movwf	___ftpack@arg+1
  9120  082A  01A2               	clrf	___ftpack@arg+2
  9121  082B  308E               	movlw	142
  9122  082C  00AB               	movwf	??___awtoft
  9123  082D  082B               	movf	??___awtoft,w
  9124  082E  00A3               	movwf	___ftpack@exp
  9125  082F  082D               	movf	___awtoft@sign,w
  9126  0830  00AC               	movwf	??___awtoft+1
  9127  0831  082C               	movf	??___awtoft+1,w
  9128  0832  00A4               	movwf	___ftpack@sign
  9129  0833  318C  2444         	fcall	___ftpack
  9130  0835  0020               	movlb	0	; select bank0
  9131  0836  0820               	movf	?___ftpack,w
  9132  0837  00A8               	movwf	?___awtoft
  9133  0838  0821               	movf	?___ftpack+1,w
  9134  0839  00A9               	movwf	?___awtoft+1
  9135  083A  0822               	movf	?___ftpack+2,w
  9136  083B  00AA               	movwf	?___awtoft+2
  9137  083C  0008               	return
  9138  083D                     __end_of___awtoft:	
  9139                           
  9140                           	psect	text38
  9141  16B7                     __ptext38:	
  9142 ;; *************** function _checkTXPower *****************
  9143 ;; Defined at:
  9144 ;;		line 189 in file "main.c"
  9145 ;; Parameters:    Size  Location     Type
  9146 ;;		None
  9147 ;; Auto vars:     Size  Location     Type
  9148 ;;  rxPacket        1    8[BANK0 ] PTR struct .
  9149 ;;		 -> RXPacket(33), 
  9150 ;; Return value:  Size  Location     Type
  9151 ;;                  1    wreg      void 
  9152 ;; Registers used:
  9153 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9154 ;; Tracked objects:
  9155 ;;		On entry : 0/0
  9156 ;;		On exit  : 0/0
  9157 ;;		Unchanged: 0/0
  9158 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9159 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9160 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9161 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9162 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9163 ;;Total ram usage:        2 bytes
  9164 ;; Hardware stack levels used:    1
  9165 ;; Hardware stack levels required when called:   11
  9166 ;; This function calls:
  9167 ;;		_nrf24l01ChangeTXPower
  9168 ;;		_nrf24l01GetRXPacket
  9169 ;; This function is called by:
  9170 ;;		_loop
  9171 ;; This function uses a non-reentrant model
  9172 ;;
  9173                           
  9174                           
  9175                           ;psect for function _checkTXPower
  9176  16B7                     _checkTXPower:	
  9177                           
  9178                           ;main.c: 190: nrf24l01Packet_t * rxPacket = nrf24l01GetRXPacket();
  9179                           
  9180                           ;incstack = 0
  9181                           ; Regs used in _checkTXPower: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9182  16B7  3187  27FE  3196   	fcall	_nrf24l01GetRXPacket
  9183  16BA  0020               	movlb	0	; select bank0
  9184  16BB  00A7               	movwf	??_checkTXPower
  9185  16BC  0827               	movf	??_checkTXPower,w
  9186  16BD  00A8               	movwf	checkTXPower@rxPacket
  9187                           
  9188                           ;main.c: 192: if (rxPacket->packetData.ACKRPD){
  9189  16BE  0828               	movf	checkTXPower@rxPacket,w
  9190  16BF  0086               	movwf	6
  9191  16C0  3001               	movlw	1	; select bank2/3
  9192  16C1  0087               	movwf	7
  9193  16C2  1C81               	btfss	1,1
  9194  16C3  0008               	return
  9195                           
  9196                           ;main.c: 193: nrf24l01ChangeTXPower(-1);
  9197  16C4  30FF               	movlw	255
  9198  16C5  00A3               	movwf	nrf24l01ChangeTXPower@addPower
  9199  16C6  30FF               	movlw	255
  9200  16C7  00A4               	movwf	nrf24l01ChangeTXPower@addPower+1
  9201  16C8  318A  229A         	fcall	_nrf24l01ChangeTXPower
  9202  16CA  0008               	return
  9203  16CB                     __end_of_checkTXPower:	
  9204                           
  9205                           	psect	text39
  9206  07FE                     __ptext39:	
  9207 ;; *************** function _nrf24l01GetRXPacket *****************
  9208 ;; Defined at:
  9209 ;;		line 139 in file "nrf24l01.c"
  9210 ;; Parameters:    Size  Location     Type
  9211 ;;		None
  9212 ;; Auto vars:     Size  Location     Type
  9213 ;;		None
  9214 ;; Return value:  Size  Location     Type
  9215 ;;                  1    wreg      PTR struct .
  9216 ;; Registers used:
  9217 ;;		wreg
  9218 ;; Tracked objects:
  9219 ;;		On entry : 0/0
  9220 ;;		On exit  : 0/0
  9221 ;;		Unchanged: 0/0
  9222 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9223 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9224 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9225 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9226 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9227 ;;Total ram usage:        0 bytes
  9228 ;; Hardware stack levels used:    1
  9229 ;; Hardware stack levels required when called:    7
  9230 ;; This function calls:
  9231 ;;		Nothing
  9232 ;; This function is called by:
  9233 ;;		_handleRXData
  9234 ;;		_checkTXPower
  9235 ;; This function uses a non-reentrant model
  9236 ;;
  9237                           
  9238                           
  9239                           ;psect for function _nrf24l01GetRXPacket
  9240  07FE                     _nrf24l01GetRXPacket:	
  9241                           
  9242                           ;nrf24l01.c: 140: return &RXPacket;
  9243                           
  9244                           ;incstack = 0
  9245                           ; Regs used in _nrf24l01GetRXPacket: [wreg]
  9246  07FE  30A0               	movlw	(low (_RXPacket| (0+256)))& (0+255)
  9247  07FF  0008               	return
  9248  0800                     __end_of_nrf24l01GetRXPacket:	
  9249                           
  9250                           	psect	text40
  9251  0A9A                     __ptext40:	
  9252 ;; *************** function _nrf24l01ChangeTXPower *****************
  9253 ;; Defined at:
  9254 ;;		line 33 in file "nrf24l01.c"
  9255 ;; Parameters:    Size  Location     Type
  9256 ;;  addPower        2    3[BANK0 ] int 
  9257 ;; Auto vars:     Size  Location     Type
  9258 ;;  rfSetup         1    6[BANK0 ] struct .
  9259 ;; Return value:  Size  Location     Type
  9260 ;;                  1    wreg      void 
  9261 ;; Registers used:
  9262 ;;		wreg, status,2, status,0, pclath, cstack
  9263 ;; Tracked objects:
  9264 ;;		On entry : 0/0
  9265 ;;		On exit  : 0/0
  9266 ;;		Unchanged: 0/0
  9267 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9268 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9269 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9270 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9271 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9272 ;;Total ram usage:        4 bytes
  9273 ;; Hardware stack levels used:    1
  9274 ;; Hardware stack levels required when called:   10
  9275 ;; This function calls:
  9276 ;;		_nrf24l01Send
  9277 ;; This function is called by:
  9278 ;;		_checkTXPower
  9279 ;;		_nrf24l01SendPacket
  9280 ;; This function uses a non-reentrant model
  9281 ;;
  9282                           
  9283                           
  9284                           ;psect for function _nrf24l01ChangeTXPower
  9285  0A9A                     _nrf24l01ChangeTXPower:	
  9286                           
  9287                           ;nrf24l01.c: 35: n_RF_SETUP_t rfSetup;;nrf24l01.c: 36: rfSetup.byte = nrf24l01Send((unsi
      +                          gned) 0b00000000 | (unsigned) 0x06, 0);
  9288                           
  9289                           ;incstack = 0
  9290                           ; Regs used in _nrf24l01ChangeTXPower: [wreg+status,2+status,0+pclath+cstack]
  9291  0A9A  0020               	movlb	0	; select bank0
  9292  0A9B  01A0               	clrf	nrf24l01Send@data
  9293  0A9C  3006               	movlw	6
  9294  0A9D  3197  27BF  318A   	fcall	_nrf24l01Send
  9295  0AA0  0020               	movlb	0	; select bank0
  9296  0AA1  00A5               	movwf	??_nrf24l01ChangeTXPower
  9297  0AA2  0825               	movf	??_nrf24l01ChangeTXPower,w
  9298  0AA3  00A6               	movwf	nrf24l01ChangeTXPower@rfSetup
  9299                           
  9300                           ;nrf24l01.c: 38: if (addPower > 0){
  9301  0AA4  0824               	movf	nrf24l01ChangeTXPower@addPower+1,w
  9302  0AA5  3A80               	xorlw	128
  9303  0AA6  00A5               	movwf	??_nrf24l01ChangeTXPower
  9304  0AA7  3080               	movlw	128
  9305  0AA8  0225               	subwf	??_nrf24l01ChangeTXPower,w
  9306  0AA9  1D03               	skipz
  9307  0AAA  2AAD               	goto	u1795
  9308  0AAB  3001               	movlw	1
  9309  0AAC  0223               	subwf	nrf24l01ChangeTXPower@addPower,w
  9310  0AAD                     u1795:	
  9311  0AAD  1C03               	skipc
  9312  0AAE  2ABF               	goto	l2347
  9313                           
  9314                           ;nrf24l01.c: 39: if (rfSetup.RF_PWR < 3){
  9315  0AAF  0020               	movlb	0	; select bank0
  9316  0AB0  0C26               	rrf	nrf24l01ChangeTXPower@rfSetup,w
  9317  0AB1  3903               	andlw	3
  9318  0AB2  3A03               	xorlw	3
  9319  0AB3  1903               	skipnz
  9320  0AB4  2ABF               	goto	l2347
  9321                           
  9322                           ;nrf24l01.c: 40: rfSetup.RF_PWR++;
  9323  0AB5  0C26               	rrf	nrf24l01ChangeTXPower@rfSetup,w
  9324  0AB6  3903               	andlw	3
  9325  0AB7  00A5               	movwf	??_nrf24l01ChangeTXPower
  9326  0AB8  0AA5               	incf	??_nrf24l01ChangeTXPower,f
  9327  0AB9  0DA5               	rlf	??_nrf24l01ChangeTXPower,f
  9328  0ABA  0826               	movf	nrf24l01ChangeTXPower@rfSetup,w
  9329  0ABB  0625               	xorwf	??_nrf24l01ChangeTXPower,w
  9330  0ABC  39F9               	andlw	-7
  9331  0ABD  0625               	xorwf	??_nrf24l01ChangeTXPower,w
  9332  0ABE  00A6               	movwf	nrf24l01ChangeTXPower@rfSetup
  9333  0ABF                     l2347:	
  9334                           
  9335                           ;nrf24l01.c: 41: };nrf24l01.c: 42: };nrf24l01.c: 44: if (addPower < 0){
  9336  0ABF  0020               	movlb	0	; select bank0
  9337  0AC0  1FA4               	btfss	nrf24l01ChangeTXPower@addPower+1,7
  9338  0AC1  2AD1               	goto	l2353
  9339                           
  9340                           ;nrf24l01.c: 45: if (rfSetup.RF_PWR > 0){
  9341  0AC2  0C26               	rrf	nrf24l01ChangeTXPower@rfSetup,w
  9342  0AC3  3903               	andlw	3
  9343  0AC4  3A00               	xorlw	0
  9344  0AC5  1903               	skipnz
  9345  0AC6  2AD1               	goto	l2353
  9346                           
  9347                           ;nrf24l01.c: 46: rfSetup.RF_PWR--;
  9348  0AC7  0C26               	rrf	nrf24l01ChangeTXPower@rfSetup,w
  9349  0AC8  3903               	andlw	3
  9350  0AC9  00A5               	movwf	??_nrf24l01ChangeTXPower
  9351  0ACA  03A5               	decf	??_nrf24l01ChangeTXPower,f
  9352  0ACB  0DA5               	rlf	??_nrf24l01ChangeTXPower,f
  9353  0ACC  0826               	movf	nrf24l01ChangeTXPower@rfSetup,w
  9354  0ACD  0625               	xorwf	??_nrf24l01ChangeTXPower,w
  9355  0ACE  39F9               	andlw	-7
  9356  0ACF  0625               	xorwf	??_nrf24l01ChangeTXPower,w
  9357  0AD0  00A6               	movwf	nrf24l01ChangeTXPower@rfSetup
  9358  0AD1                     l2353:	
  9359                           
  9360                           ;nrf24l01.c: 47: };nrf24l01.c: 48: };nrf24l01.c: 50: nrf24l01Send((unsigned) 0b00100000 
      +                          | (unsigned) 0x06, rfSetup.byte);
  9361  0AD1  0826               	movf	nrf24l01ChangeTXPower@rfSetup,w
  9362  0AD2  00A5               	movwf	??_nrf24l01ChangeTXPower
  9363  0AD3  0825               	movf	??_nrf24l01ChangeTXPower,w
  9364  0AD4  00A0               	movwf	nrf24l01Send@data
  9365  0AD5  3026               	movlw	38
  9366  0AD6  3197  27BF         	fcall	_nrf24l01Send
  9367  0AD8  0008               	return
  9368  0AD9                     __end_of_nrf24l01ChangeTXPower:	
  9369                           
  9370                           	psect	text41
  9371  17BF                     __ptext41:	
  9372 ;; *************** function _nrf24l01Send *****************
  9373 ;; Defined at:
  9374 ;;		line 9 in file "nrf24l01.c"
  9375 ;; Parameters:    Size  Location     Type
  9376 ;;  command         1    wreg     unsigned char 
  9377 ;;  data            1    0[BANK0 ] unsigned char 
  9378 ;; Auto vars:     Size  Location     Type
  9379 ;;  command         1    2[BANK0 ] unsigned char 
  9380 ;; Return value:  Size  Location     Type
  9381 ;;                  1    wreg      unsigned char 
  9382 ;; Registers used:
  9383 ;;		wreg, status,2, status,0, pclath, cstack
  9384 ;; Tracked objects:
  9385 ;;		On entry : 0/0
  9386 ;;		On exit  : 0/0
  9387 ;;		Unchanged: 0/0
  9388 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9389 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9390 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9391 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9392 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9393 ;;Total ram usage:        3 bytes
  9394 ;; Hardware stack levels used:    1
  9395 ;; Hardware stack levels required when called:    9
  9396 ;; This function calls:
  9397 ;;		_enableInterrupts
  9398 ;;		_nrf24l01SPIEnd
  9399 ;;		_nrf24l01SPISend
  9400 ;;		_nrf24l01SPIStart
  9401 ;; This function is called by:
  9402 ;;		_loop
  9403 ;;		_nrf24l01ChangeTXPower
  9404 ;;		_nrf24l01SetRXMode
  9405 ;;		_nrf24l01SetRXPipe
  9406 ;;		_nrf24l01InitRegisters
  9407 ;; This function uses a non-reentrant model
  9408 ;;
  9409                           
  9410                           
  9411                           ;psect for function _nrf24l01Send
  9412  17BF                     _nrf24l01Send:	
  9413                           
  9414                           ;incstack = 0
  9415                           ; Regs used in _nrf24l01Send: [wreg+status,2+status,0+pclath+cstack]
  9416                           ;nrf24l01Send@command stored from wreg
  9417  17BF  0020               	movlb	0	; select bank0
  9418  17C0  00A2               	movwf	nrf24l01Send@command
  9419                           
  9420                           ;nrf24l01.c: 12: enableInterrupts(0);
  9421  17C1  3000               	movlw	0
  9422  17C2  3196  265E  3197   	fcall	_enableInterrupts
  9423                           
  9424                           ;nrf24l01.c: 15: nrf24l01SPIStart();
  9425  17C5  3196  2666  3197   	fcall	_nrf24l01SPIStart
  9426                           
  9427                           ;nrf24l01.c: 18: nrf24l01SPISend(command);
  9428  17C8  0020               	movlb	0	; select bank0
  9429  17C9  0822               	movf	nrf24l01Send@command,w
  9430  17CA  3196  2677  3197   	fcall	_nrf24l01SPISend
  9431                           
  9432                           ;nrf24l01.c: 21: data = nrf24l01SPISend(data);
  9433  17CD  0020               	movlb	0	; select bank0
  9434  17CE  0820               	movf	nrf24l01Send@data,w
  9435  17CF  3196  2677  3197   	fcall	_nrf24l01SPISend
  9436  17D2  0020               	movlb	0	; select bank0
  9437  17D3  00A1               	movwf	??_nrf24l01Send
  9438  17D4  0821               	movf	??_nrf24l01Send,w
  9439  17D5  00A0               	movwf	nrf24l01Send@data
  9440                           
  9441                           ;nrf24l01.c: 24: nrf24l01SPIEnd();
  9442  17D6  3196  2657  3197   	fcall	_nrf24l01SPIEnd
  9443                           
  9444                           ;nrf24l01.c: 27: enableInterrupts(1);
  9445  17D9  3001               	movlw	1
  9446  17DA  3196  265E         	fcall	_enableInterrupts
  9447                           
  9448                           ;nrf24l01.c: 29: return data;
  9449  17DC  0020               	movlb	0	; select bank0
  9450  17DD  0820               	movf	nrf24l01Send@data,w
  9451  17DE  0008               	return
  9452  17DF                     __end_of_nrf24l01Send:	
  9453                           
  9454                           	psect	text42
  9455  0800                     __ptext42:	
  9456 ;; *************** function ___lbtoft *****************
  9457 ;; Defined at:
  9458 ;;		line 27 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\lbtoft.c"
  9459 ;; Parameters:    Size  Location     Type
  9460 ;;  c               1    wreg     unsigned char 
  9461 ;; Auto vars:     Size  Location     Type
  9462 ;;  c               1   15[BANK0 ] unsigned char 
  9463 ;; Return value:  Size  Location     Type
  9464 ;;                  3    8[BANK0 ] float 
  9465 ;; Registers used:
  9466 ;;		wreg, status,2, status,0, pclath, cstack
  9467 ;; Tracked objects:
  9468 ;;		On entry : 0/0
  9469 ;;		On exit  : 0/0
  9470 ;;		Unchanged: 0/0
  9471 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9472 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9473 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9474 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9475 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9476 ;;Total ram usage:        8 bytes
  9477 ;; Hardware stack levels used:    1
  9478 ;; Hardware stack levels required when called:    8
  9479 ;; This function calls:
  9480 ;;		___ftpack
  9481 ;; This function is called by:
  9482 ;;		_loop
  9483 ;;		_main
  9484 ;; This function uses a non-reentrant model
  9485 ;;
  9486                           
  9487                           
  9488                           ;psect for function ___lbtoft
  9489  0800                     ___lbtoft:	
  9490                           
  9491                           ;incstack = 0
  9492                           ; Regs used in ___lbtoft: [wreg+status,2+status,0+pclath+cstack]
  9493                           ;___lbtoft@c stored from wreg
  9494  0800  0020               	movlb	0	; select bank0
  9495  0801  00AF               	movwf	___lbtoft@c
  9496  0802  082F               	movf	___lbtoft@c,w
  9497  0803  00AB               	movwf	??___lbtoft
  9498  0804  01AC               	clrf	??___lbtoft+1
  9499  0805  01AD               	clrf	??___lbtoft+2
  9500  0806  082B               	movf	??___lbtoft,w
  9501  0807  00A0               	movwf	___ftpack@arg
  9502  0808  082C               	movf	??___lbtoft+1,w
  9503  0809  00A1               	movwf	___ftpack@arg+1
  9504  080A  082D               	movf	??___lbtoft+2,w
  9505  080B  00A2               	movwf	___ftpack@arg+2
  9506  080C  308E               	movlw	142
  9507  080D  00AE               	movwf	??___lbtoft+3
  9508  080E  082E               	movf	??___lbtoft+3,w
  9509  080F  00A3               	movwf	___ftpack@exp
  9510  0810  01A4               	clrf	___ftpack@sign
  9511  0811  318C  2444         	fcall	___ftpack
  9512  0813  0020               	movlb	0	; select bank0
  9513  0814  0820               	movf	?___ftpack,w
  9514  0815  00A8               	movwf	?___lbtoft
  9515  0816  0821               	movf	?___ftpack+1,w
  9516  0817  00A9               	movwf	?___lbtoft+1
  9517  0818  0822               	movf	?___ftpack+2,w
  9518  0819  00AA               	movwf	?___lbtoft+2
  9519  081A  0008               	return
  9520  081B                     __end_of___lbtoft:	
  9521                           
  9522                           	psect	text43
  9523  0C44                     __ptext43:	
  9524 ;; *************** function ___ftpack *****************
  9525 ;; Defined at:
  9526 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\float.c"
  9527 ;; Parameters:    Size  Location     Type
  9528 ;;  arg             3    0[BANK0 ] unsigned um
  9529 ;;  exp             1    3[BANK0 ] unsigned char 
  9530 ;;  sign            1    4[BANK0 ] unsigned char 
  9531 ;; Auto vars:     Size  Location     Type
  9532 ;;		None
  9533 ;; Return value:  Size  Location     Type
  9534 ;;                  3    0[BANK0 ] float 
  9535 ;; Registers used:
  9536 ;;		wreg, status,2, status,0
  9537 ;; Tracked objects:
  9538 ;;		On entry : 0/0
  9539 ;;		On exit  : 0/0
  9540 ;;		Unchanged: 0/0
  9541 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9542 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9543 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9544 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9545 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9546 ;;Total ram usage:        8 bytes
  9547 ;; Hardware stack levels used:    1
  9548 ;; Hardware stack levels required when called:    7
  9549 ;; This function calls:
  9550 ;;		Nothing
  9551 ;; This function is called by:
  9552 ;;		___awtoft
  9553 ;;		___ftadd
  9554 ;;		___ftdiv
  9555 ;;		___ftmul
  9556 ;;		___lbtoft
  9557 ;;		___lltoft
  9558 ;; This function uses a non-reentrant model
  9559 ;;
  9560                           
  9561                           
  9562                           ;psect for function ___ftpack
  9563  0C44                     ___ftpack:	
  9564                           
  9565                           ;incstack = 0
  9566                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
  9567  0C44  0020               	movlb	0	; select bank0
  9568  0C45  0823               	movf	___ftpack@exp,w
  9569  0C46  1903               	btfsc	3,2
  9570  0C47  2C4D               	goto	l2383
  9571  0C48  0822               	movf	___ftpack@arg+2,w
  9572  0C49  0421               	iorwf	___ftpack@arg+1,w
  9573  0C4A  0420               	iorwf	___ftpack@arg,w
  9574  0C4B  1D03               	skipz
  9575  0C4C  2C5E               	goto	l2389
  9576  0C4D                     l2383:	
  9577  0C4D  3000               	movlw	0
  9578  0C4E  00A0               	movwf	?___ftpack
  9579  0C4F  3000               	movlw	0
  9580  0C50  00A1               	movwf	?___ftpack+1
  9581  0C51  3000               	movlw	0
  9582  0C52  00A2               	movwf	?___ftpack+2
  9583  0C53  0008               	return
  9584  0C54                     l2387:	
  9585  0C54  3001               	movlw	1
  9586  0C55  00A5               	movwf	??___ftpack
  9587  0C56  0825               	movf	??___ftpack,w
  9588  0C57  07A3               	addwf	___ftpack@exp,f
  9589  0C58  3001               	movlw	1
  9590  0C59                     u1885:	
  9591  0C59  36A2               	lsrf	___ftpack@arg+2,f
  9592  0C5A  0CA1               	rrf	___ftpack@arg+1,f
  9593  0C5B  0CA0               	rrf	___ftpack@arg,f
  9594  0C5C  0B89               	decfsz	9,f
  9595  0C5D  2C59               	goto	u1885
  9596  0C5E                     l2389:	
  9597  0C5E  30FE               	movlw	254
  9598  0C5F  0522               	andwf	___ftpack@arg+2,w
  9599  0C60  1903               	btfsc	3,2
  9600  0C61  2C77               	goto	l686
  9601  0C62  2C54               	goto	l2387
  9602  0C63                     l2391:	
  9603  0C63  3001               	movlw	1
  9604  0C64  00A5               	movwf	??___ftpack
  9605  0C65  0825               	movf	??___ftpack,w
  9606  0C66  07A3               	addwf	___ftpack@exp,f
  9607  0C67  3001               	movlw	1
  9608  0C68  07A0               	addwf	___ftpack@arg,f
  9609  0C69  3000               	movlw	0
  9610  0C6A  1803               	skipnc
  9611  0C6B  3001               	movlw	1
  9612  0C6C  07A1               	addwf	___ftpack@arg+1,f
  9613  0C6D  3000               	movlw	0
  9614  0C6E  1803               	skipnc
  9615  0C6F  3001               	movlw	1
  9616  0C70  07A2               	addwf	___ftpack@arg+2,f
  9617  0C71  3001               	movlw	1
  9618  0C72                     u1905:	
  9619  0C72  36A2               	lsrf	___ftpack@arg+2,f
  9620  0C73  0CA1               	rrf	___ftpack@arg+1,f
  9621  0C74  0CA0               	rrf	___ftpack@arg,f
  9622  0C75  0B89               	decfsz	9,f
  9623  0C76  2C72               	goto	u1905
  9624  0C77                     l686:	
  9625  0C77  30FF               	movlw	255
  9626  0C78  0522               	andwf	___ftpack@arg+2,w
  9627  0C79  1903               	btfsc	3,2
  9628  0C7A  2C84               	goto	l2399
  9629  0C7B  2C63               	goto	l2391
  9630  0C7C                     l2397:	
  9631  0C7C  3001               	movlw	1
  9632  0C7D  02A3               	subwf	___ftpack@exp,f
  9633  0C7E  3001               	movlw	1
  9634  0C7F                     u1925:	
  9635  0C7F  35A0               	lslf	___ftpack@arg,f
  9636  0C80  0DA1               	rlf	___ftpack@arg+1,f
  9637  0C81  0DA2               	rlf	___ftpack@arg+2,f
  9638  0C82  0B89               	decfsz	9,f
  9639  0C83  2C7F               	goto	u1925
  9640  0C84                     l2399:	
  9641  0C84  1BA1               	btfsc	___ftpack@arg+1,7
  9642  0C85  2C8A               	goto	l693
  9643  0C86  3002               	movlw	2
  9644  0C87  0223               	subwf	___ftpack@exp,w
  9645  0C88  1803               	skipnc
  9646  0C89  2C7C               	goto	l2397
  9647  0C8A                     l693:	
  9648  0C8A  1823               	btfsc	___ftpack@exp,0
  9649  0C8B  2C92               	goto	l694
  9650  0C8C  30FF               	movlw	255
  9651  0C8D  05A0               	andwf	___ftpack@arg,f
  9652  0C8E  307F               	movlw	127
  9653  0C8F  05A1               	andwf	___ftpack@arg+1,f
  9654  0C90  30FF               	movlw	255
  9655  0C91  05A2               	andwf	___ftpack@arg+2,f
  9656  0C92                     l694:	
  9657  0C92  1003               	clrc
  9658  0C93  0CA3               	rrf	___ftpack@exp,f
  9659  0C94  0823               	movf	___ftpack@exp,w
  9660  0C95  00A5               	movwf	??___ftpack
  9661  0C96  01A6               	clrf	??___ftpack+1
  9662  0C97  01A7               	clrf	??___ftpack+2
  9663  0C98  3010               	movlw	16
  9664  0C99                     u1965:	
  9665  0C99  35A5               	lslf	??___ftpack,f
  9666  0C9A  0DA6               	rlf	??___ftpack+1,f
  9667  0C9B  0DA7               	rlf	??___ftpack+2,f
  9668  0C9C  0B89               	decfsz	9,f
  9669  0C9D  2C99               	goto	u1965
  9670  0C9E  0825               	movf	??___ftpack,w
  9671  0C9F  04A0               	iorwf	___ftpack@arg,f
  9672  0CA0  0826               	movf	??___ftpack+1,w
  9673  0CA1  04A1               	iorwf	___ftpack@arg+1,f
  9674  0CA2  0827               	movf	??___ftpack+2,w
  9675  0CA3  04A2               	iorwf	___ftpack@arg+2,f
  9676  0CA4  0824               	movf	___ftpack@sign,w
  9677  0CA5  1903               	btfsc	3,2
  9678  0CA6  0008               	return
  9679  0CA7  17A2               	bsf	___ftpack@arg+2,7
  9680  0CA8  0008               	return
  9681  0CA9                     __end_of___ftpack:	
  9682                           
  9683                           	psect	intentry
  9684  0004                     __pintentry:	
  9685 ;; *************** function _ISR *****************
  9686 ;; Defined at:
  9687 ;;		line 14 in file "main.c"
  9688 ;; Parameters:    Size  Location     Type
  9689 ;;		None
  9690 ;; Auto vars:     Size  Location     Type
  9691 ;;		None
  9692 ;; Return value:  Size  Location     Type
  9693 ;;                  1    wreg      void 
  9694 ;; Registers used:
  9695 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9696 ;; Tracked objects:
  9697 ;;		On entry : 0/0
  9698 ;;		On exit  : 0/0
  9699 ;;		Unchanged: 0/0
  9700 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9701 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9702 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9703 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9704 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9705 ;;Total ram usage:        0 bytes
  9706 ;; Hardware stack levels used:    1
  9707 ;; Hardware stack levels required when called:    6
  9708 ;; This function calls:
  9709 ;;		_nrf24l01ISR
  9710 ;; This function is called by:
  9711 ;;		Interrupt level 1
  9712 ;; This function uses a non-reentrant model
  9713 ;;
  9714                           
  9715  0004                     _ISR:	
  9716                           
  9717                           ;incstack = 0
  9718  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
  9719                           
  9720                           ; Regs used in _ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9721  0005  3180               	pagesel	$
  9722                           
  9723                           ;main.c: 16: if (PIR0bits.INTF){
  9724  0006  0020               	movlb	0	; select bank0
  9725  0007  1C10               	btfss	16,0	;volatile
  9726  0008  280D               	goto	i1l167
  9727                           
  9728                           ;main.c: 17: nrf24l01ISR();
  9729  0009  3189  21A7         	fcall	_nrf24l01ISR
  9730                           
  9731                           ;main.c: 18: PIR0bits.INTF = 0;
  9732  000B  0020               	movlb	0	; select bank0
  9733  000C  1010               	bcf	16,0	;volatile
  9734  000D                     i1l167:	
  9735  000D  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
  9736  000E  0009               	retfie
  9737  000F                     __end_of_ISR:	
  9738                           
  9739                           	psect	text45
  9740  09A7                     __ptext45:	
  9741 ;; *************** function _nrf24l01ISR *****************
  9742 ;; Defined at:
  9743 ;;		line 260 in file "nrf24l01.c"
  9744 ;; Parameters:    Size  Location     Type
  9745 ;;		None
  9746 ;; Auto vars:     Size  Location     Type
  9747 ;;  status          1   12[COMMON] struct .
  9748 ;; Return value:  Size  Location     Type
  9749 ;;                  1    wreg      void 
  9750 ;; Registers used:
  9751 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9752 ;; Tracked objects:
  9753 ;;		On entry : 0/0
  9754 ;;		On exit  : 0/0
  9755 ;;		Unchanged: 0/0
  9756 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9757 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9758 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9759 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9760 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9761 ;;Total ram usage:        2 bytes
  9762 ;; Hardware stack levels used:    1
  9763 ;; Hardware stack levels required when called:    5
  9764 ;; This function calls:
  9765 ;;		_exception
  9766 ;;		_nrf24l01CheckACK
  9767 ;;		_nrf24l01ReceivePacket
  9768 ;;		i1_nrf24l01Send
  9769 ;; This function is called by:
  9770 ;;		_ISR
  9771 ;; This function uses a non-reentrant model
  9772 ;;
  9773                           
  9774                           
  9775                           ;psect for function _nrf24l01ISR
  9776  09A7                     _nrf24l01ISR:	
  9777                           
  9778                           ;nrf24l01.c: 262: n_STATUS_t status;;nrf24l01.c: 263: status.byte = nrf24l01Send((unsign
      +                          ed) 0b00000000 | (unsigned) 0x07, 0);
  9779                           
  9780                           ;incstack = 0
  9781                           ; Regs used in _nrf24l01ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9782  09A7  01F1               	clrf	i1nrf24l01Send@data
  9783  09A8  3007               	movlw	7
  9784  09A9  3197  2713  3189   	fcall	i1_nrf24l01Send
  9785  09AC  00FB               	movwf	??_nrf24l01ISR
  9786  09AD  087B               	movf	??_nrf24l01ISR,w
  9787  09AE  00FC               	movwf	nrf24l01ISR@status
  9788                           
  9789                           ;nrf24l01.c: 268: };nrf24l01.c: 271: if (status.byte == 0xFF){
  9790  09AF  0A7C               	incf	nrf24l01ISR@status,w
  9791  09B0  1D03               	btfss	3,2
  9792  09B1  29B6               	goto	i1l3385
  9793                           
  9794                           ;nrf24l01.c: 272: exception(2);
  9795  09B2  3002               	movlw	2
  9796  09B3  3180  2002  3189   	fcall	_exception
  9797  09B6                     i1l3385:	
  9798                           
  9799                           ;nrf24l01.c: 273: };nrf24l01.c: 275: if (status.TX_DS){
  9800  09B6  1AFC               	btfsc	nrf24l01ISR@status,5
  9801                           
  9802                           ;nrf24l01.c: 278: nrf24l01.TXBusy = 0;
  9803  09B7  107D               	bcf	_nrf24l01,0	;volatile
  9804                           
  9805                           ;nrf24l01.c: 279: };nrf24l01.c: 282: if (status.RX_DR){
  9806  09B8  1F7C               	btfss	nrf24l01ISR@status,6
  9807  09B9  29DA               	goto	i1l3401
  9808                           
  9809                           ;nrf24l01.c: 285: if (!nrf24l01.RXPending){
  9810  09BA  18FD               	btfsc	_nrf24l01,1	;volatile
  9811  09BB  29D9               	goto	i1l328
  9812                           
  9813                           ;nrf24l01.c: 288: nrf24l01.RXPending = 1;
  9814  09BC  14FD               	bsf	_nrf24l01,1	;volatile
  9815                           
  9816                           ;nrf24l01.c: 290: nrf24l01ReceivePacket();
  9817  09BD  318B  23A4  3189   	fcall	_nrf24l01ReceivePacket
  9818                           
  9819                           ;nrf24l01.c: 293: RXPacket.packetData.RPD = nrf24l01Send((unsigned) 0b00000000 | (unsign
      +                          ed) 0x09, 0);
  9820  09C0  01F1               	clrf	i1nrf24l01Send@data
  9821  09C1  3009               	movlw	9
  9822  09C2  3197  2713  3189   	fcall	i1_nrf24l01Send
  9823  09C5  00FB               	movwf	??_nrf24l01ISR
  9824  09C6  0023               	movlb	3	; select bank3
  9825  09C7  0820               	movf	_RXPacket^(0+384),w
  9826  09C8  067B               	xorwf	??_nrf24l01ISR,w
  9827  09C9  39FE               	andlw	-2
  9828  09CA  067B               	xorwf	??_nrf24l01ISR,w
  9829  09CB  00A0               	movwf	_RXPacket^(0+384)
  9830                           
  9831                           ;nrf24l01.c: 296: RXPacket.packetData.Pipe = status.RX_P_NO;
  9832  09CC  0C7C               	rrf	nrf24l01ISR@status,w
  9833  09CD  3907               	andlw	7
  9834  09CE  00FB               	movwf	??_nrf24l01ISR
  9835  09CF  0EFB               	swapf	??_nrf24l01ISR,f
  9836  09D0  0820               	movf	_RXPacket^(0+384),w
  9837  09D1  067B               	xorwf	??_nrf24l01ISR,w
  9838  09D2  398F               	andlw	-113
  9839  09D3  067B               	xorwf	??_nrf24l01ISR,w
  9840  09D4  00A0               	movwf	_RXPacket^(0+384)
  9841                           
  9842                           ;nrf24l01.c: 298: nrf24l01CheckACK();
  9843  09D5  3189  210A  3189   	fcall	_nrf24l01CheckACK
  9844                           
  9845                           ;nrf24l01.c: 299: }
  9846  09D8  29DA               	goto	i1l3401
  9847  09D9                     i1l328:	
  9848                           
  9849                           ;nrf24l01.c: 302: else{;nrf24l01.c: 305: status.RX_DR = 0;
  9850  09D9  137C               	bcf	nrf24l01ISR@status,6
  9851  09DA                     i1l3401:	
  9852                           
  9853                           ;nrf24l01.c: 306: };nrf24l01.c: 308: };nrf24l01.c: 311: nrf24l01Send((unsigned) 0b001000
      +                          00 | (unsigned) 0x07, status.byte);
  9854  09DA  087C               	movf	nrf24l01ISR@status,w
  9855  09DB  00FB               	movwf	??_nrf24l01ISR
  9856  09DC  087B               	movf	??_nrf24l01ISR,w
  9857  09DD  00F1               	movwf	i1nrf24l01Send@data
  9858  09DE  3027               	movlw	39
  9859  09DF  3197  2713         	fcall	i1_nrf24l01Send
  9860  09E1  0008               	return
  9861  09E2                     __end_of_nrf24l01ISR:	
  9862                           
  9863                           	psect	text46
  9864  0BA4                     __ptext46:	
  9865 ;; *************** function _nrf24l01ReceivePacket *****************
  9866 ;; Defined at:
  9867 ;;		line 143 in file "nrf24l01.c"
  9868 ;; Parameters:    Size  Location     Type
  9869 ;;		None
  9870 ;; Auto vars:     Size  Location     Type
  9871 ;;  i               1   10[COMMON] unsigned char 
  9872 ;;  width           1    9[COMMON] unsigned char 
  9873 ;; Return value:  Size  Location     Type
  9874 ;;                  1    wreg      void 
  9875 ;; Registers used:
  9876 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9877 ;; Tracked objects:
  9878 ;;		On entry : 0/0
  9879 ;;		On exit  : 0/0
  9880 ;;		Unchanged: 0/0
  9881 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9882 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9883 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9884 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9885 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9886 ;;Total ram usage:        3 bytes
  9887 ;; Hardware stack levels used:    1
  9888 ;; Hardware stack levels required when called:    3
  9889 ;; This function calls:
  9890 ;;		_nrf24l01CEHigh
  9891 ;;		_nrf24l01CELow
  9892 ;;		_nrf24l01SPIEnd
  9893 ;;		_nrf24l01SPISend
  9894 ;;		_nrf24l01SPIStart
  9895 ;;		i1_memset
  9896 ;;		i1_nrf24l01Send
  9897 ;; This function is called by:
  9898 ;;		_nrf24l01ISR
  9899 ;; This function uses a non-reentrant model
  9900 ;;
  9901                           
  9902                           
  9903                           ;psect for function _nrf24l01ReceivePacket
  9904  0BA4                     _nrf24l01ReceivePacket:	
  9905                           
  9906                           ;nrf24l01.c: 146: memset(RXPacket.Message, 0 ,sizeof(RXPacket.Message));
  9907                           
  9908                           ;incstack = 0
  9909                           ; Regs used in _nrf24l01ReceivePacket: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  9910  0BA4  30A1               	movlw	low (_RXPacket+1)
  9911  0BA5  00F0               	movwf	i1memset@p1
  9912  0BA6  3001               	movlw	high (_RXPacket+1)
  9913  0BA7  00F1               	movwf	i1memset@p1+1
  9914  0BA8  3000               	movlw	0
  9915  0BA9  00F2               	movwf	i1memset@c
  9916  0BAA  00F3               	movwf	i1memset@c+1
  9917  0BAB  3020               	movlw	32
  9918  0BAC  00F4               	movwf	i1memset@n
  9919  0BAD  3000               	movlw	0
  9920  0BAE  00F5               	movwf	i1memset@n+1
  9921  0BAF  3196  26E2  318B   	fcall	i1_memset
  9922                           
  9923                           ;nrf24l01.c: 147: RXPacket.packetData.byte = 0x00;
  9924  0BB2  0023               	movlb	3	; select bank3
  9925  0BB3  01A0               	clrf	_RXPacket^(0+384)
  9926                           
  9927                           ;nrf24l01.c: 150: unsigned char width = nrf24l01Send((unsigned) 0b01100000, 0);
  9928  0BB4  01F1               	clrf	i1nrf24l01Send@data
  9929  0BB5  3060               	movlw	96
  9930  0BB6  3197  2713  318B   	fcall	i1_nrf24l01Send
  9931  0BB9  00F8               	movwf	??_nrf24l01ReceivePacket
  9932  0BBA  0878               	movf	??_nrf24l01ReceivePacket,w
  9933  0BBB  00F9               	movwf	nrf24l01ReceivePacket@width
  9934                           
  9935                           ;nrf24l01.c: 151: unsigned char i = 0;
  9936  0BBC  01FA               	clrf	nrf24l01ReceivePacket@i
  9937                           
  9938                           ;nrf24l01.c: 154: nrf24l01CELow();
  9939  0BBD  3196  2648  318B   	fcall	_nrf24l01CELow
  9940                           
  9941                           ;nrf24l01.c: 157: nrf24l01SPIStart();
  9942  0BC0  3196  2666  318B   	fcall	_nrf24l01SPIStart
  9943                           
  9944                           ;nrf24l01.c: 160: nrf24l01SPISend((unsigned) 0b01100001);
  9945  0BC3  3061               	movlw	97
  9946  0BC4  3196  2677  318B   	fcall	_nrf24l01SPISend
  9947                           
  9948                           ;nrf24l01.c: 163: RXPacket.packetData.byte = nrf24l01SPISend(0);
  9949  0BC7  3000               	movlw	0
  9950  0BC8  3196  2677  318B   	fcall	_nrf24l01SPISend
  9951  0BCB  00F8               	movwf	??_nrf24l01ReceivePacket
  9952  0BCC  0878               	movf	??_nrf24l01ReceivePacket,w
  9953  0BCD  0023               	movlb	3	; select bank3
  9954  0BCE  00A0               	movwf	_RXPacket^(0+384)
  9955                           
  9956                           ;nrf24l01.c: 164: width--;
  9957  0BCF  3001               	movlw	1
  9958  0BD0  02F9               	subwf	nrf24l01ReceivePacket@width,f
  9959                           
  9960                           ;nrf24l01.c: 166: for (i = 0; (i < width) && (i < sizeof(RXPacket.Message)); i++){
  9961  0BD1  01FA               	clrf	nrf24l01ReceivePacket@i
  9962  0BD2  2BE3               	goto	i1l3231
  9963  0BD3                     i1l3227:	
  9964                           
  9965                           ;nrf24l01.c: 168: RXPacket.Message[i] = nrf24l01SPISend(0);
  9966  0BD3  3000               	movlw	0
  9967  0BD4  3196  2677  318B   	fcall	_nrf24l01SPISend
  9968  0BD7  00F8               	movwf	??_nrf24l01ReceivePacket
  9969  0BD8  087A               	movf	nrf24l01ReceivePacket@i,w
  9970  0BD9  3EA1               	addlw	(low ((_RXPacket| (0+256)+1)))& (0+255)
  9971  0BDA  0086               	movwf	6
  9972  0BDB  3001               	movlw	1	; select bank3/4
  9973  0BDC  0087               	movwf	7
  9974  0BDD  0878               	movf	??_nrf24l01ReceivePacket,w
  9975  0BDE  0081               	movwf	1
  9976  0BDF  3001               	movlw	1
  9977  0BE0  00F8               	movwf	??_nrf24l01ReceivePacket
  9978  0BE1  0878               	movf	??_nrf24l01ReceivePacket,w
  9979  0BE2  07FA               	addwf	nrf24l01ReceivePacket@i,f
  9980  0BE3                     i1l3231:	
  9981  0BE3  0879               	movf	nrf24l01ReceivePacket@width,w
  9982  0BE4  027A               	subwf	nrf24l01ReceivePacket@i,w
  9983  0BE5  1803               	skipnc
  9984  0BE6  2BEB               	goto	i1l3235
  9985  0BE7  3020               	movlw	32
  9986  0BE8  027A               	subwf	nrf24l01ReceivePacket@i,w
  9987  0BE9  1C03               	skipc
  9988  0BEA  2BD3               	goto	i1l3227
  9989  0BEB                     i1l3235:	
  9990                           
  9991                           ;nrf24l01.c: 169: };nrf24l01.c: 172: nrf24l01SPIEnd();
  9992  0BEB  3196  2657  318B   	fcall	_nrf24l01SPIEnd
  9993                           
  9994                           ;nrf24l01.c: 175: nrf24l01CEHigh();
  9995  0BEE  3196  2645         	fcall	_nrf24l01CEHigh
  9996  0BF0  0008               	return
  9997  0BF1                     __end_of_nrf24l01ReceivePacket:	
  9998                           
  9999                           	psect	text47
 10000  16E2                     __ptext47:	
 10001 ;; *************** function i1_memset *****************
 10002 ;; Defined at:
 10003 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\memset.c"
 10004 ;; Parameters:    Size  Location     Type
 10005 ;;  p1              2    0[COMMON] PTR void 
 10006 ;;		 -> RXPacket(33), main@packet(33), loop@packet(33), 
 10007 ;;  c               2    2[COMMON] int 
 10008 ;;  n               2    4[COMMON] unsigned int 
 10009 ;; Auto vars:     Size  Location     Type
 10010 ;;  memset          2    6[COMMON] PTR unsigned char 
 10011 ;;		 -> RXPacket(33), main@packet(33), loop@packet(33), 
 10012 ;; Return value:  Size  Location     Type
 10013 ;;                  1    wreg      PTR void 
 10014 ;; Registers used:
 10015 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 10016 ;; Tracked objects:
 10017 ;;		On entry : 0/0
 10018 ;;		On exit  : 0/0
 10019 ;;		Unchanged: 0/0
 10020 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10021 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10022 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10023 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10024 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10025 ;;Total ram usage:        8 bytes
 10026 ;; Hardware stack levels used:    1
 10027 ;; This function calls:
 10028 ;;		Nothing
 10029 ;; This function is called by:
 10030 ;;		_nrf24l01ReceivePacket
 10031 ;; This function uses a non-reentrant model
 10032 ;;
 10033                           
 10034                           
 10035                           ;psect for function i1_memset
 10036  16E2                     i1_memset:	
 10037                           
 10038                           ;incstack = 0
 10039                           ; Regs used in i1_memset: [wreg+fsr1l+fsr1h+status,2+status,0]
 10040  16E2  0871               	movf	i1memset@p1+1,w
 10041  16E3  00F7               	movwf	i1memset@p+1
 10042  16E4  0870               	movf	i1memset@p1,w
 10043  16E5  00F6               	movwf	i1memset@p
 10044  16E6                     i1l3101:	
 10045  16E6  3001               	movlw	1
 10046  16E7  02F4               	subwf	i1memset@n,f
 10047  16E8  3000               	movlw	0
 10048  16E9  3BF5               	subwfb	i1memset@n+1,f
 10049  16EA  0A74               	incf	i1memset@n,w
 10050  16EB  1903               	btfsc	3,2
 10051  16EC  0A75               	incf	i1memset@n+1,w
 10052  16ED  1903               	btfsc	3,2
 10053  16EE  0008               	return
 10054  16EF  0876               	movf	i1memset@p,w
 10055  16F0  0086               	movwf	6
 10056  16F1  0877               	movf	i1memset@p+1,w
 10057  16F2  0087               	movwf	7
 10058  16F3  0872               	movf	i1memset@c,w
 10059  16F4  0081               	movwf	1
 10060  16F5  3001               	movlw	1
 10061  16F6  07F6               	addwf	i1memset@p,f
 10062  16F7  3000               	movlw	0
 10063  16F8  3DF7               	addwfc	i1memset@p+1,f
 10064  16F9  2EE6               	goto	i1l3101
 10065  16FA                     __end_ofi1_memset:	
 10066                           ;	Return value of i1_memset is never used
 10067                           
 10068                           
 10069                           	psect	text48
 10070  090A                     __ptext48:	
 10071 ;; *************** function _nrf24l01CheckACK *****************
 10072 ;; Defined at:
 10073 ;;		line 104 in file "nrf24l01.c"
 10074 ;; Parameters:    Size  Location     Type
 10075 ;;		None
 10076 ;; Auto vars:     Size  Location     Type
 10077 ;;		None
 10078 ;; Return value:  Size  Location     Type
 10079 ;;                  1    wreg      void 
 10080 ;; Registers used:
 10081 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10082 ;; Tracked objects:
 10083 ;;		On entry : 0/0
 10084 ;;		On exit  : 0/0
 10085 ;;		Unchanged: 0/0
 10086 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10087 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10088 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10089 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10090 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10091 ;;Total ram usage:        3 bytes
 10092 ;; Hardware stack levels used:    1
 10093 ;; Hardware stack levels required when called:    4
 10094 ;; This function calls:
 10095 ;;		_strcmp
 10096 ;;		i1_nrf24l01SetRXMode
 10097 ;; This function is called by:
 10098 ;;		_nrf24l01ISR
 10099 ;; This function uses a non-reentrant model
 10100 ;;
 10101                           
 10102                           
 10103                           ;psect for function _nrf24l01CheckACK
 10104  090A                     _nrf24l01CheckACK:	
 10105                           
 10106                           ;nrf24l01.c: 105: TXPacket->packetData.ACKRequest = 0;
 10107                           
 10108                           ;incstack = 0
 10109                           ; Regs used in _nrf24l01CheckACK: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10110  090A  0021               	movlb	1	; select bank1
 10111  090B  0868               	movf	_TXPacket^(0+128),w
 10112  090C  0086               	movwf	6
 10113  090D  0869               	movf	(_TXPacket+1)^(0+128),w
 10114  090E  0087               	movwf	7
 10115  090F  1101               	bcf	1,2
 10116                           
 10117                           ;nrf24l01.c: 110: if (!RXPacket.packetData.IsACK){
 10118  0910  0023               	movlb	3	; select bank3
 10119  0911  1DA0               	btfss	_RXPacket^(0+384),3
 10120  0912  0008               	return
 10121                           
 10122                           ;nrf24l01.c: 112: };nrf24l01.c: 115: nrf24l01.RXPending = 0;
 10123                           
 10124                           ;nrf24l01.c: 111: return;
 10125  0913  10FD               	bcf	_nrf24l01,1	;volatile
 10126                           
 10127                           ;nrf24l01.c: 118: if (!TXPacket->packetData.ACKRequest){
 10128  0914  0021               	movlb	1	; select bank1
 10129  0915  0868               	movf	_TXPacket^(0+128),w
 10130  0916  0086               	movwf	6
 10131  0917  0869               	movf	(_TXPacket+1)^(0+128),w
 10132  0918  0087               	movwf	7
 10133  0919  1D01               	btfss	1,2
 10134  091A  0008               	return
 10135                           
 10136                           ;nrf24l01.c: 120: };nrf24l01.c: 123: if (strcmp(TXPacket->Message, RXPacket.Message) != 
      +                          0){
 10137                           
 10138                           ;nrf24l01.c: 119: return;
 10139  091B  0868               	movf	_TXPacket^(0+128),w
 10140  091C  3E01               	addlw	1
 10141  091D  00F7               	movwf	??_nrf24l01CheckACK
 10142  091E  3000               	movlw	0
 10143  091F  3D69               	addwfc	(_TXPacket+1)^(0+128),w
 10144  0920  00F8               	movwf	??_nrf24l01CheckACK+1
 10145  0921  0877               	movf	??_nrf24l01CheckACK,w
 10146  0922  00F0               	movwf	strcmp@s1
 10147  0923  0878               	movf	??_nrf24l01CheckACK+1,w
 10148  0924  00F1               	movwf	strcmp@s1+1
 10149  0925  30A1               	movlw	(low ((_RXPacket| (0+256)+1)))& (0+255)
 10150  0926  00F9               	movwf	??_nrf24l01CheckACK+2
 10151  0927  0879               	movf	??_nrf24l01CheckACK+2,w
 10152  0928  00F2               	movwf	strcmp@s2
 10153  0929  3188  2061  3189   	fcall	_strcmp
 10154  092C  0870               	movf	?_strcmp,w
 10155  092D  0471               	iorwf	?_strcmp+1,w
 10156  092E  1D03               	btfss	3,2
 10157  092F  0008               	return
 10158                           
 10159                           ;nrf24l01.c: 125: };nrf24l01.c: 132: TXPacket->packetData.ACKRequest = 0;
 10160                           
 10161                           ;nrf24l01.c: 124: return;
 10162  0930  0021               	movlb	1	; select bank1
 10163  0931  0868               	movf	_TXPacket^(0+128),w
 10164  0932  0086               	movwf	6
 10165  0933  0869               	movf	(_TXPacket+1)^(0+128),w
 10166  0934  0087               	movwf	7
 10167  0935  1101               	bcf	1,2
 10168                           
 10169                           ;nrf24l01.c: 135: nrf24l01SetRXMode(0);
 10170  0936  3000               	movlw	0
 10171  0937  318A  225B         	fcall	i1_nrf24l01SetRXMode
 10172  0939  0008               	return
 10173  093A                     __end_of_nrf24l01CheckACK:	
 10174                           
 10175                           	psect	text49
 10176  0A5B                     __ptext49:	
 10177 ;; *************** function i1_nrf24l01SetRXMode *****************
 10178 ;; Defined at:
 10179 ;;		line 54 in file "nrf24l01.c"
 10180 ;; Parameters:    Size  Location     Type
 10181 ;;  rxMode          1    wreg     unsigned char 
 10182 ;; Auto vars:     Size  Location     Type
 10183 ;;  rxMode          1    6[COMMON] unsigned char 
 10184 ;;  nrf24l01SetR    1    5[COMMON] struct .
 10185 ;; Return value:  Size  Location     Type
 10186 ;;                  1    wreg      void 
 10187 ;; Registers used:
 10188 ;;		wreg, status,2, status,0, pclath, cstack
 10189 ;; Tracked objects:
 10190 ;;		On entry : 0/0
 10191 ;;		On exit  : 0/0
 10192 ;;		Unchanged: 0/0
 10193 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10194 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10195 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10196 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10197 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10198 ;;Total ram usage:        3 bytes
 10199 ;; Hardware stack levels used:    1
 10200 ;; Hardware stack levels required when called:    3
 10201 ;; This function calls:
 10202 ;;		_nrf24l01CEHigh
 10203 ;;		_nrf24l01CELow
 10204 ;;		i1_nrf24l01Send
 10205 ;; This function is called by:
 10206 ;;		_nrf24l01CheckACK
 10207 ;; This function uses a non-reentrant model
 10208 ;;
 10209                           
 10210                           
 10211                           ;psect for function i1_nrf24l01SetRXMode
 10212  0A5B                     i1_nrf24l01SetRXMode:	
 10213                           
 10214                           ;incstack = 0
 10215                           ; Regs used in i1_nrf24l01SetRXMode: [wreg+status,2+status,0+pclath+cstack]
 10216                           ;i1nrf24l01SetRXMode@rxMode stored from wreg
 10217  0A5B  00F6               	movwf	i1nrf24l01SetRXMode@rxMode
 10218                           
 10219                           ;nrf24l01.c: 62: n_CONFIG_t config;;nrf24l01.c: 65: config.byte = nrf24l01Send((unsigned
      +                          ) 0b00000000 | (unsigned) 0x00, 0);
 10220  0A5C  01F1               	clrf	i1nrf24l01Send@data
 10221  0A5D  3000               	movlw	0
 10222  0A5E  3197  2713  318A   	fcall	i1_nrf24l01Send
 10223  0A61  00F4               	movwf	??i1_nrf24l01SetRXMode
 10224  0A62  0874               	movf	??i1_nrf24l01SetRXMode,w
 10225  0A63  00F5               	movwf	i1nrf24l01SetRXMode@config
 10226                           
 10227                           ;nrf24l01.c: 68: if (config.PRIM_RX != rxMode){
 10228  0A64  0875               	movf	i1nrf24l01SetRXMode@config,w
 10229  0A65  3901               	andlw	1
 10230  0A66  0676               	xorwf	i1nrf24l01SetRXMode@rxMode,w
 10231  0A67  1903               	skipnz
 10232  0A68  2A94               	goto	i1l3093
 10233                           
 10234                           ;nrf24l01.c: 71: nrf24l01CELow();
 10235  0A69  3196  2648  318A   	fcall	_nrf24l01CELow
 10236                           
 10237                           ;nrf24l01.c: 72: _delay((unsigned long)((200)*(32000000/4000000.0)));
 10238  0A6C  30E4               	movlw	228
 10239  0A6D                     u365_27:	
 10240  0A6D  3200               	nop2
 10241  0A6E  3200               	nop2
 10242  0A6F  0B89               	decfsz	9,f
 10243  0A70  2A6D               	goto	u365_27
 10244  0A71  3200               	nop2
 10245  0A72  3200               	nop2
 10246                           
 10247                           ;nrf24l01.c: 75: config.PRIM_RX = rxMode;
 10248  0A73  0876               	movf	i1nrf24l01SetRXMode@rxMode,w
 10249  0A74  3901               	andlw	1
 10250  0A75  1075               	bcf	i1nrf24l01SetRXMode@config,0
 10251  0A76  1D03               	skipz
 10252  0A77  1475               	bsf	i1nrf24l01SetRXMode@config,0
 10253                           
 10254                           ;nrf24l01.c: 76: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x00, config.byte);
 10255  0A78  0875               	movf	i1nrf24l01SetRXMode@config,w
 10256  0A79  00F4               	movwf	??i1_nrf24l01SetRXMode
 10257  0A7A  0874               	movf	??i1_nrf24l01SetRXMode,w
 10258  0A7B  00F1               	movwf	i1nrf24l01Send@data
 10259  0A7C  3020               	movlw	32
 10260  0A7D  3197  2713  318A   	fcall	i1_nrf24l01Send
 10261                           
 10262                           ;nrf24l01.c: 79: _delay((unsigned long)((200)*(32000000/4000000.0)));
 10263  0A80  30E4               	movlw	228
 10264  0A81                     u366_27:	
 10265  0A81  3200               	nop2
 10266  0A82  3200               	nop2
 10267  0A83  0B89               	decfsz	9,f
 10268  0A84  2A81               	goto	u366_27
 10269  0A85  3200               	nop2
 10270  0A86  3200               	nop2
 10271                           
 10272                           ;nrf24l01.c: 82: if (rxMode){
 10273  0A87  0876               	movf	i1nrf24l01SetRXMode@rxMode,w
 10274  0A88  1903               	btfsc	3,2
 10275  0A89  2A94               	goto	i1l3093
 10276                           
 10277                           ;nrf24l01.c: 83: nrf24l01CEHigh();
 10278  0A8A  3196  2645  318A   	fcall	_nrf24l01CEHigh
 10279                           
 10280                           ;nrf24l01.c: 84: _delay((unsigned long)((200)*(32000000/4000000.0)));
 10281  0A8D  30E4               	movlw	228
 10282  0A8E                     u367_27:	
 10283  0A8E  3200               	nop2
 10284  0A8F  3200               	nop2
 10285  0A90  0B89               	decfsz	9,f
 10286  0A91  2A8E               	goto	u367_27
 10287  0A92  3200               	nop2
 10288  0A93  3200               	nop2
 10289  0A94                     i1l3093:	
 10290                           
 10291                           ;nrf24l01.c: 85: };nrf24l01.c: 86: };nrf24l01.c: 89: nrf24l01.RXMode = rxMode;
 10292  0A94  0876               	movf	i1nrf24l01SetRXMode@rxMode,w
 10293  0A95  3901               	andlw	1
 10294  0A96  117D               	bcf	_nrf24l01,2	;volatile
 10295  0A97  1D03               	skipz
 10296  0A98  157D               	bsf	_nrf24l01,2	;volatile
 10297  0A99  0008               	return
 10298  0A9A                     __end_ofi1_nrf24l01SetRXMode:	
 10299                           
 10300                           	psect	text50
 10301  1713                     __ptext50:	
 10302 ;; *************** function i1_nrf24l01Send *****************
 10303 ;; Defined at:
 10304 ;;		line 9 in file "nrf24l01.c"
 10305 ;; Parameters:    Size  Location     Type
 10306 ;;  command         1    wreg     unsigned char 
 10307 ;;  data            1    1[COMMON] unsigned char 
 10308 ;; Auto vars:     Size  Location     Type
 10309 ;;  command         1    3[COMMON] unsigned char 
 10310 ;; Return value:  Size  Location     Type
 10311 ;;                  1    wreg      unsigned char 
 10312 ;; Registers used:
 10313 ;;		wreg, status,2, status,0, pclath, cstack
 10314 ;; Tracked objects:
 10315 ;;		On entry : 0/0
 10316 ;;		On exit  : 0/0
 10317 ;;		Unchanged: 0/0
 10318 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10319 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10320 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10321 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10322 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10323 ;;Total ram usage:        3 bytes
 10324 ;; Hardware stack levels used:    1
 10325 ;; Hardware stack levels required when called:    2
 10326 ;; This function calls:
 10327 ;;		_enableInterrupts
 10328 ;;		_nrf24l01SPIEnd
 10329 ;;		_nrf24l01SPISend
 10330 ;;		_nrf24l01SPIStart
 10331 ;; This function is called by:
 10332 ;;		_nrf24l01ReceivePacket
 10333 ;;		_nrf24l01ISR
 10334 ;;		i1_nrf24l01SetRXMode
 10335 ;; This function uses a non-reentrant model
 10336 ;;
 10337                           
 10338                           
 10339                           ;psect for function i1_nrf24l01Send
 10340  1713                     i1_nrf24l01Send:	
 10341                           
 10342                           ;incstack = 0
 10343                           ; Regs used in i1_nrf24l01Send: [wreg+status,2+status,0+pclath+cstack]
 10344                           ;i1nrf24l01Send@command stored from wreg
 10345  1713  00F3               	movwf	i1nrf24l01Send@command
 10346                           
 10347                           ;nrf24l01.c: 12: enableInterrupts(0);
 10348  1714  3000               	movlw	0
 10349  1715  3196  265E  3197   	fcall	_enableInterrupts
 10350                           
 10351                           ;nrf24l01.c: 15: nrf24l01SPIStart();
 10352  1718  3196  2666  3197   	fcall	_nrf24l01SPIStart
 10353                           
 10354                           ;nrf24l01.c: 18: nrf24l01SPISend(command);
 10355  171B  0873               	movf	i1nrf24l01Send@command,w
 10356  171C  3196  2677  3197   	fcall	_nrf24l01SPISend
 10357                           
 10358                           ;nrf24l01.c: 21: data = nrf24l01SPISend(data);
 10359  171F  0871               	movf	i1nrf24l01Send@data,w
 10360  1720  3196  2677  3197   	fcall	_nrf24l01SPISend
 10361  1723  00F2               	movwf	??i1_nrf24l01Send
 10362  1724  0872               	movf	??i1_nrf24l01Send,w
 10363  1725  00F1               	movwf	i1nrf24l01Send@data
 10364                           
 10365                           ;nrf24l01.c: 24: nrf24l01SPIEnd();
 10366  1726  3196  2657  3197   	fcall	_nrf24l01SPIEnd
 10367                           
 10368                           ;nrf24l01.c: 27: enableInterrupts(1);
 10369  1729  3001               	movlw	1
 10370  172A  3196  265E         	fcall	_enableInterrupts
 10371                           
 10372                           ;nrf24l01.c: 29: return data;
 10373  172C  0871               	movf	i1nrf24l01Send@data,w
 10374  172D  0008               	return
 10375  172E                     __end_ofi1_nrf24l01Send:	
 10376                           
 10377                           	psect	text51
 10378  1666                     __ptext51:	
 10379 ;; *************** function _nrf24l01SPIStart *****************
 10380 ;; Defined at:
 10381 ;;		line 64 in file "interface.c"
 10382 ;; Parameters:    Size  Location     Type
 10383 ;;		None
 10384 ;; Auto vars:     Size  Location     Type
 10385 ;;		None
 10386 ;; Return value:  Size  Location     Type
 10387 ;;                  1    wreg      void 
 10388 ;; Registers used:
 10389 ;;		wreg, status,2, status,0, pclath, cstack
 10390 ;; Tracked objects:
 10391 ;;		On entry : 0/0
 10392 ;;		On exit  : 0/0
 10393 ;;		Unchanged: 0/0
 10394 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10395 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10396 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10397 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10398 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10399 ;;Total ram usage:        0 bytes
 10400 ;; Hardware stack levels used:    1
 10401 ;; Hardware stack levels required when called:    8
 10402 ;; This function calls:
 10403 ;;		_nrf24l01CSLow
 10404 ;; This function is called by:
 10405 ;;		_nrf24l01Send
 10406 ;;		_nrf24l01ReceivePacket
 10407 ;;		_nrf24l01SendPacket
 10408 ;;		_nrf24l01SetTXPipe
 10409 ;;		_nrf24l01InitRegisters
 10410 ;;		i1_nrf24l01Send
 10411 ;; This function uses a non-reentrant model
 10412 ;;
 10413                           
 10414                           
 10415                           ;psect for function _nrf24l01SPIStart
 10416  1666                     _nrf24l01SPIStart:	
 10417                           
 10418                           ;interface.c: 65: nrf24l01CSLow();
 10419                           
 10420                           ;incstack = 0
 10421 ;; hardware stack exceeded
 10422                           ; Regs used in _nrf24l01SPIStart: [wreg+status,2+status,0+pclath+cstack]
 10423  1666  3196  264E  3196   	fcall	_nrf24l01CSLow
 10424                           
 10425                           ;interface.c: 66: _delay((unsigned long)((10)*(32000000/4000000.0)));
 10426  1669  301A               	movlw	26
 10427  166A                     u368_27:	
 10428  166A  0B89               	decfsz	9,f
 10429  166B  2E6A               	goto	u368_27
 10430  166C  3200               	nop2
 10431  166D  0008               	return
 10432  166E                     __end_of_nrf24l01SPIStart:	
 10433                           
 10434                           	psect	text52
 10435  164E                     __ptext52:	
 10436 ;; *************** function _nrf24l01CSLow *****************
 10437 ;; Defined at:
 10438 ;;		line 17 in file "interface.c"
 10439 ;; Parameters:    Size  Location     Type
 10440 ;;		None
 10441 ;; Auto vars:     Size  Location     Type
 10442 ;;		None
 10443 ;; Return value:  Size  Location     Type
 10444 ;;                  1    wreg      void 
 10445 ;; Registers used:
 10446 ;;		None
 10447 ;; Tracked objects:
 10448 ;;		On entry : 0/0
 10449 ;;		On exit  : 0/0
 10450 ;;		Unchanged: 0/0
 10451 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10452 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10453 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10454 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10455 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10456 ;;Total ram usage:        0 bytes
 10457 ;; Hardware stack levels used:    1
 10458 ;; Hardware stack levels required when called:    7
 10459 ;; This function calls:
 10460 ;;		Nothing
 10461 ;; This function is called by:
 10462 ;;		_nrf24l01SPIStart
 10463 ;; This function uses a non-reentrant model
 10464 ;;
 10465                           
 10466                           
 10467                           ;psect for function _nrf24l01CSLow
 10468  164E                     _nrf24l01CSLow:	
 10469                           
 10470                           ;interface.c: 18: PORTAbits.RA1 = 0;
 10471                           
 10472                           ;incstack = 0
 10473 ;; hardware stack exceeded
 10474                           ; Regs used in _nrf24l01CSLow: []
 10475  164E  0020               	movlb	0	; select bank0
 10476  164F  108C               	bcf	12,1	;volatile
 10477  1650  0008               	return
 10478  1651                     __end_of_nrf24l01CSLow:	
 10479                           
 10480                           	psect	text53
 10481  1677                     __ptext53:	
 10482 ;; *************** function _nrf24l01SPISend *****************
 10483 ;; Defined at:
 10484 ;;		line 51 in file "interface.c"
 10485 ;; Parameters:    Size  Location     Type
 10486 ;;  data            1    wreg     unsigned char 
 10487 ;; Auto vars:     Size  Location     Type
 10488 ;;  data            1    0[COMMON] unsigned char 
 10489 ;; Return value:  Size  Location     Type
 10490 ;;                  1    wreg      unsigned char 
 10491 ;; Registers used:
 10492 ;;		wreg
 10493 ;; Tracked objects:
 10494 ;;		On entry : 0/0
 10495 ;;		On exit  : 0/0
 10496 ;;		Unchanged: 0/0
 10497 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10498 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10499 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10500 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10501 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10502 ;;Total ram usage:        0 bytes
 10503 ;; Hardware stack levels used:    1
 10504 ;; Hardware stack levels required when called:    7
 10505 ;; This function calls:
 10506 ;;		Nothing
 10507 ;; This function is called by:
 10508 ;;		_nrf24l01Send
 10509 ;;		_nrf24l01ReceivePacket
 10510 ;;		_nrf24l01SendPacket
 10511 ;;		_nrf24l01SetTXPipe
 10512 ;;		_nrf24l01InitRegisters
 10513 ;;		i1_nrf24l01Send
 10514 ;; This function uses a non-reentrant model
 10515 ;;
 10516                           
 10517                           
 10518                           ;psect for function _nrf24l01SPISend
 10519  1677                     _nrf24l01SPISend:	
 10520                           
 10521                           ;incstack = 0
 10522 ;; hardware stack exceeded
 10523                           ; Regs used in _nrf24l01SPISend: [wreg]
 10524                           ;nrf24l01SPISend@data stored from wreg
 10525  1677  00F0               	movwf	nrf24l01SPISend@data
 10526                           
 10527                           ;interface.c: 52: SSP1BUF = data;
 10528  1678  0870               	movf	nrf24l01SPISend@data,w
 10529  1679  0024               	movlb	4	; select bank4
 10530  167A  0091               	movwf	17	;volatile
 10531                           
 10532                           ;interface.c: 54: PORTCbits.RC4 = 1;
 10533  167B  0020               	movlb	0	; select bank0
 10534  167C  160E               	bsf	14,4	;volatile
 10535  167D                     i1l48:	
 10536                           ;interface.c: 56: while (!SSP1STATbits.BF){
 10537                           
 10538  167D  0024               	movlb	4	; select bank4
 10539  167E  1814               	btfsc	20,0	;volatile
 10540  167F  2E82               	goto	i1l2415
 10541                           
 10542                           ;interface.c: 57: __nop();
 10543  1680  0000               	nop
 10544  1681  2E7D               	goto	i1l48
 10545  1682                     i1l2415:	
 10546                           
 10547                           ;interface.c: 58: };interface.c: 60: return SSP1BUF;
 10548  1682  0811               	movf	17,w	;volatile
 10549  1683  0008               	return
 10550  1684                     __end_of_nrf24l01SPISend:	
 10551                           
 10552                           	psect	text54
 10553  1657                     __ptext54:	
 10554 ;; *************** function _nrf24l01SPIEnd *****************
 10555 ;; Defined at:
 10556 ;;		line 70 in file "interface.c"
 10557 ;; Parameters:    Size  Location     Type
 10558 ;;		None
 10559 ;; Auto vars:     Size  Location     Type
 10560 ;;		None
 10561 ;; Return value:  Size  Location     Type
 10562 ;;                  1    wreg      void 
 10563 ;; Registers used:
 10564 ;;		wreg, status,2, status,0, pclath, cstack
 10565 ;; Tracked objects:
 10566 ;;		On entry : 0/0
 10567 ;;		On exit  : 0/0
 10568 ;;		Unchanged: 0/0
 10569 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10570 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10571 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10572 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10573 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10574 ;;Total ram usage:        0 bytes
 10575 ;; Hardware stack levels used:    1
 10576 ;; Hardware stack levels required when called:    8
 10577 ;; This function calls:
 10578 ;;		_nrf24l01CSHigh
 10579 ;; This function is called by:
 10580 ;;		_nrf24l01Send
 10581 ;;		_nrf24l01ReceivePacket
 10582 ;;		_nrf24l01SendPacket
 10583 ;;		_nrf24l01SetTXPipe
 10584 ;;		_nrf24l01InitRegisters
 10585 ;;		i1_nrf24l01Send
 10586 ;; This function uses a non-reentrant model
 10587 ;;
 10588                           
 10589                           
 10590                           ;psect for function _nrf24l01SPIEnd
 10591  1657                     _nrf24l01SPIEnd:	
 10592                           
 10593                           ;interface.c: 71: _delay((unsigned long)((10)*(32000000/4000000.0)));
 10594                           
 10595                           ;incstack = 0
 10596 ;; hardware stack exceeded
 10597                           ; Regs used in _nrf24l01SPIEnd: [wreg+status,2+status,0+pclath+cstack]
 10598  1657  301A               	movlw	26
 10599  1658                     u369_27:	
 10600  1658  0B89               	decfsz	9,f
 10601  1659  2E58               	goto	u369_27
 10602  165A  3200               	nop2
 10603                           
 10604                           ;interface.c: 72: nrf24l01CSHigh();
 10605  165B  3196  264B         	fcall	_nrf24l01CSHigh
 10606  165D  0008               	return
 10607  165E                     __end_of_nrf24l01SPIEnd:	
 10608                           
 10609                           	psect	text55
 10610  164B                     __ptext55:	
 10611 ;; *************** function _nrf24l01CSHigh *****************
 10612 ;; Defined at:
 10613 ;;		line 22 in file "interface.c"
 10614 ;; Parameters:    Size  Location     Type
 10615 ;;		None
 10616 ;; Auto vars:     Size  Location     Type
 10617 ;;		None
 10618 ;; Return value:  Size  Location     Type
 10619 ;;                  1    wreg      void 
 10620 ;; Registers used:
 10621 ;;		None
 10622 ;; Tracked objects:
 10623 ;;		On entry : 0/0
 10624 ;;		On exit  : 0/0
 10625 ;;		Unchanged: 0/0
 10626 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10627 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10628 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10629 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10630 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10631 ;;Total ram usage:        0 bytes
 10632 ;; Hardware stack levels used:    1
 10633 ;; Hardware stack levels required when called:    7
 10634 ;; This function calls:
 10635 ;;		Nothing
 10636 ;; This function is called by:
 10637 ;;		_nrf24l01SPIEnd
 10638 ;; This function uses a non-reentrant model
 10639 ;;
 10640                           
 10641                           
 10642                           ;psect for function _nrf24l01CSHigh
 10643  164B                     _nrf24l01CSHigh:	
 10644                           
 10645                           ;interface.c: 23: PORTAbits.RA1 = 1;
 10646                           
 10647                           ;incstack = 0
 10648 ;; hardware stack exceeded
 10649                           ; Regs used in _nrf24l01CSHigh: []
 10650  164B  0020               	movlb	0	; select bank0
 10651  164C  148C               	bsf	12,1	;volatile
 10652  164D  0008               	return
 10653  164E                     __end_of_nrf24l01CSHigh:	
 10654                           
 10655                           	psect	text56
 10656  165E                     __ptext56:	
 10657 ;; *************** function _enableInterrupts *****************
 10658 ;; Defined at:
 10659 ;;		line 76 in file "interface.c"
 10660 ;; Parameters:    Size  Location     Type
 10661 ;;  enable          1    wreg     unsigned char 
 10662 ;; Auto vars:     Size  Location     Type
 10663 ;;  enable          1    0[COMMON] unsigned char 
 10664 ;; Return value:  Size  Location     Type
 10665 ;;                  1    wreg      void 
 10666 ;; Registers used:
 10667 ;;		wreg, status,0
 10668 ;; Tracked objects:
 10669 ;;		On entry : 0/0
 10670 ;;		On exit  : 0/0
 10671 ;;		Unchanged: 0/0
 10672 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10673 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10674 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10675 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10676 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10677 ;;Total ram usage:        0 bytes
 10678 ;; Hardware stack levels used:    1
 10679 ;; Hardware stack levels required when called:    7
 10680 ;; This function calls:
 10681 ;;		Nothing
 10682 ;; This function is called by:
 10683 ;;		_nrf24l01Send
 10684 ;;		_nrf24l01SendPacket
 10685 ;;		i1_nrf24l01Send
 10686 ;; This function uses a non-reentrant model
 10687 ;;
 10688                           
 10689                           
 10690                           ;psect for function _enableInterrupts
 10691  165E                     _enableInterrupts:	
 10692                           
 10693                           ;incstack = 0
 10694 ;; hardware stack exceeded
 10695                           ; Regs used in _enableInterrupts: [wreg+status,0]
 10696                           ;enableInterrupts@enable stored from wreg
 10697  165E  00F0               	movwf	enableInterrupts@enable
 10698                           
 10699                           ;interface.c: 77: PIE0bits.INTE = enable;
 10700  165F  0C70               	rrf	enableInterrupts@enable,w
 10701  1660  0021               	movlb	1	; select bank1
 10702  1661  1C03               	skipc
 10703  1662  1010               	bcf	16,0	;volatile
 10704  1663  1803               	skipnc
 10705  1664  1410               	bsf	16,0	;volatile
 10706  1665  0008               	return
 10707  1666                     __end_of_enableInterrupts:	
 10708                           
 10709                           	psect	text57
 10710  1648                     __ptext57:	
 10711 ;; *************** function _nrf24l01CELow *****************
 10712 ;; Defined at:
 10713 ;;		line 7 in file "interface.c"
 10714 ;; Parameters:    Size  Location     Type
 10715 ;;		None
 10716 ;; Auto vars:     Size  Location     Type
 10717 ;;		None
 10718 ;; Return value:  Size  Location     Type
 10719 ;;                  1    wreg      void 
 10720 ;; Registers used:
 10721 ;;		None
 10722 ;; Tracked objects:
 10723 ;;		On entry : 0/0
 10724 ;;		On exit  : 0/0
 10725 ;;		Unchanged: 0/0
 10726 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10727 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10728 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10729 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10730 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10731 ;;Total ram usage:        0 bytes
 10732 ;; Hardware stack levels used:    1
 10733 ;; Hardware stack levels required when called:    7
 10734 ;; This function calls:
 10735 ;;		Nothing
 10736 ;; This function is called by:
 10737 ;;		_nrf24l01SetRXMode
 10738 ;;		_nrf24l01ReceivePacket
 10739 ;;		_nrf24l01SendPacket
 10740 ;;		_nrf24l01Init
 10741 ;;		i1_nrf24l01SetRXMode
 10742 ;; This function uses a non-reentrant model
 10743 ;;
 10744                           
 10745                           
 10746                           ;psect for function _nrf24l01CELow
 10747  1648                     _nrf24l01CELow:	
 10748                           
 10749                           ;interface.c: 8: PORTAbits.RA0 = 0;
 10750                           
 10751                           ;incstack = 0
 10752 ;; hardware stack exceeded
 10753                           ; Regs used in _nrf24l01CELow: []
 10754  1648  0020               	movlb	0	; select bank0
 10755  1649  100C               	bcf	12,0	;volatile
 10756  164A  0008               	return
 10757  164B                     __end_of_nrf24l01CELow:	
 10758                           
 10759                           	psect	text58
 10760  1645                     __ptext58:	
 10761 ;; *************** function _nrf24l01CEHigh *****************
 10762 ;; Defined at:
 10763 ;;		line 12 in file "interface.c"
 10764 ;; Parameters:    Size  Location     Type
 10765 ;;		None
 10766 ;; Auto vars:     Size  Location     Type
 10767 ;;		None
 10768 ;; Return value:  Size  Location     Type
 10769 ;;                  1    wreg      void 
 10770 ;; Registers used:
 10771 ;;		None
 10772 ;; Tracked objects:
 10773 ;;		On entry : 0/0
 10774 ;;		On exit  : 0/0
 10775 ;;		Unchanged: 0/0
 10776 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10777 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10778 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10779 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10780 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10781 ;;Total ram usage:        0 bytes
 10782 ;; Hardware stack levels used:    1
 10783 ;; Hardware stack levels required when called:    7
 10784 ;; This function calls:
 10785 ;;		Nothing
 10786 ;; This function is called by:
 10787 ;;		_nrf24l01SetRXMode
 10788 ;;		_nrf24l01ReceivePacket
 10789 ;;		_nrf24l01SendPacket
 10790 ;;		_nrf24l01Init
 10791 ;;		i1_nrf24l01SetRXMode
 10792 ;; This function uses a non-reentrant model
 10793 ;;
 10794                           
 10795                           
 10796                           ;psect for function _nrf24l01CEHigh
 10797  1645                     _nrf24l01CEHigh:	
 10798                           
 10799                           ;interface.c: 13: PORTAbits.RA0 = 1;
 10800                           
 10801                           ;incstack = 0
 10802 ;; hardware stack exceeded
 10803                           ; Regs used in _nrf24l01CEHigh: []
 10804  1645  0020               	movlb	0	; select bank0
 10805  1646  140C               	bsf	12,0	;volatile
 10806  1647  0008               	return
 10807  1648                     __end_of_nrf24l01CEHigh:	
 10808                           
 10809                           	psect	text59
 10810  0861                     __ptext59:	
 10811 ;; *************** function _strcmp *****************
 10812 ;; Defined at:
 10813 ;;		line 33 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\strcmp.c"
 10814 ;; Parameters:    Size  Location     Type
 10815 ;;  s1              2    0[COMMON] PTR const unsigned char 
 10816 ;;		 -> packet.Message(32), packet.Message(32), NULL(0), RXPacket.Message(32), 
 10817 ;;		 -> RXPacket(33), main@packet(33), loop@packet(33), 
 10818 ;;  s2              1    2[COMMON] PTR const unsigned char 
 10819 ;;		 -> RXPacket.Message(32), RXPacket(33), 
 10820 ;; Auto vars:     Size  Location     Type
 10821 ;;  r               1    4[COMMON] char 
 10822 ;; Return value:  Size  Location     Type
 10823 ;;                  2    0[COMMON] int 
 10824 ;; Registers used:
 10825 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0
 10826 ;; Tracked objects:
 10827 ;;		On entry : 0/0
 10828 ;;		On exit  : 0/0
 10829 ;;		Unchanged: 0/0
 10830 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10831 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10832 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10833 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10834 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10835 ;;Total ram usage:        5 bytes
 10836 ;; Hardware stack levels used:    1
 10837 ;; This function calls:
 10838 ;;		Nothing
 10839 ;; This function is called by:
 10840 ;;		_nrf24l01CheckACK
 10841 ;; This function uses a non-reentrant model
 10842 ;;
 10843                           
 10844                           
 10845                           ;psect for function _strcmp
 10846  0861                     _strcmp:	
 10847                           
 10848                           ;incstack = 0
 10849                           ; Regs used in _strcmp: [wreg-fsr1h+status,2+status,0]
 10850  0861  286A               	goto	i1l2985
 10851  0862                     i1l2981:	
 10852  0862  3001               	movlw	1
 10853  0863  07F0               	addwf	strcmp@s1,f
 10854  0864  3000               	movlw	0
 10855  0865  3DF1               	addwfc	strcmp@s1+1,f
 10856  0866  3001               	movlw	1
 10857  0867  00F3               	movwf	??_strcmp
 10858  0868  0873               	movf	??_strcmp,w
 10859  0869  07F2               	addwf	strcmp@s2,f
 10860  086A                     i1l2985:	
 10861  086A  0870               	movf	strcmp@s1,w
 10862  086B  0086               	movwf	6
 10863  086C  0871               	movf	strcmp@s1+1,w
 10864  086D  0087               	movwf	7
 10865  086E  0872               	movf	strcmp@s2,w
 10866  086F  0084               	movwf	4
 10867  0870  3001               	movlw	1	; select bank2/3
 10868  0871  0085               	movwf	5
 10869  0872  0300               	decf	0,w
 10870  0873  3AFF               	xorlw	255
 10871  0874  0701               	addwf	1,w
 10872  0875  00F3               	movwf	??_strcmp
 10873  0876  0873               	movf	??_strcmp,w
 10874  0877  00F4               	movwf	strcmp@r
 10875  0878  0874               	movf	strcmp@r,w
 10876  0879  1D03               	btfss	3,2
 10877  087A  2882               	goto	i1l2989
 10878  087B  0870               	movf	strcmp@s1,w
 10879  087C  0086               	movwf	6
 10880  087D  0871               	movf	strcmp@s1+1,w
 10881  087E  0087               	movwf	7
 10882  087F  0801               	movf	1,w
 10883  0880  1D03               	btfss	3,2
 10884  0881  2862               	goto	i1l2981
 10885  0882                     i1l2989:	
 10886  0882  0874               	movf	strcmp@r,w
 10887  0883  00F0               	movwf	?_strcmp
 10888  0884  01F1               	clrf	?_strcmp+1
 10889  0885  1BF0               	btfsc	?_strcmp,7
 10890  0886  03F1               	decf	?_strcmp+1,f
 10891  0887  0008               	return
 10892  0888                     __end_of_strcmp:	
 10893                           
 10894                           	psect	text60
 10895  0002                     __ptext60:	
 10896 ;; *************** function _exception *****************
 10897 ;; Defined at:
 10898 ;;		line 80 in file "interface.c"
 10899 ;; Parameters:    Size  Location     Type
 10900 ;;  exception       1    wreg     unsigned char 
 10901 ;; Auto vars:     Size  Location     Type
 10902 ;;  exception       1    0[COMMON] unsigned char 
 10903 ;; Return value:  Size  Location     Type
 10904 ;;                  1    wreg      void 
 10905 ;; Registers used:
 10906 ;;		wreg
 10907 ;; Tracked objects:
 10908 ;;		On entry : 0/0
 10909 ;;		On exit  : 0/0
 10910 ;;		Unchanged: 0/0
 10911 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10912 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10913 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10914 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10915 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10916 ;;Total ram usage:        0 bytes
 10917 ;; Hardware stack levels used:    1
 10918 ;; This function calls:
 10919 ;;		Nothing
 10920 ;; This function is called by:
 10921 ;;		_nrf24l01ISR
 10922 ;; This function uses a non-reentrant model
 10923 ;;
 10924                           
 10925                           
 10926                           ;psect for function _exception
 10927  0002                     _exception:	
 10928                           
 10929                           ;incstack = 0
 10930                           ; Regs used in _exception: [wreg]
 10931  0002  0001               	reset	;# 
 10932  0003  0008               	return
 10933  0004                     __end_of_exception:	
 10934  007E                     btemp	set	126	;btemp
 10935  007E                     int$flags	set	126
 10936  007E                     wtemp0	set	126


Data Sizes:
    Strings     49
    Constant    46
    Data        1
    BSS         85
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     13      14
    BANK0            80     80      80
    BANK1            80     72      76
    BANK2            80     48      68
    BANK3            80      0      61
    BANK4            80      0       0
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    ftoa@status	PTR int  size(1) Largest target is 2
		 -> setMessage@status(BANK1[2]), 

    strlen@s	PTR const unsigned char  size(2) Largest target is 33
		 -> packet.Message(BANK0[32]), packet.Message(BANK0[32]), NULL(NULL[0]), RXPacket.Message(BANK3[32]), 
		 -> RXPacket(BANK3[33]), main@packet(BANK1[33]), loop@packet(BANK2[33]), romDataMap(BANK3[28]), 

    strlen@cp	PTR const unsigned char  size(2) Largest target is 33
		 -> packet.Message(BANK0[32]), packet.Message(BANK0[32]), NULL(NULL[0]), RXPacket.Message(BANK3[32]), 
		 -> RXPacket(BANK3[33]), main@packet(BANK1[33]), loop@packet(BANK2[33]), romDataMap(BANK3[28]), 

    strcpy@from	PTR const unsigned char  size(2) Largest target is 4
		 -> STR_8(CODE[4]), 

    strcpy@to	PTR unsigned char  size(1) Largest target is 28
		 -> romDataMap(BANK3[28]), 

    strcpy@cp	PTR unsigned char  size(1) Largest target is 28
		 -> romDataMap(BANK3[28]), 

    strcmp@s2	PTR const unsigned char  size(1) Largest target is 33
		 -> RXPacket.Message(BANK3[32]), RXPacket(BANK3[33]), 

    strcmp@s1	PTR const unsigned char  size(2) Largest target is 33
		 -> packet.Message(BANK0[32]), packet.Message(BANK0[32]), NULL(NULL[0]), RXPacket.Message(BANK3[32]), 
		 -> RXPacket(BANK3[33]), main@packet(BANK1[33]), loop@packet(BANK2[33]), 

    strcat@from	PTR const unsigned char  size(2) Largest target is 28
		 -> romDataMap.name(BANK3[16]), ftoa@buf(BANK2[17]), STR_9(CODE[5]), STR_7(CODE[6]), 
		 -> STR_6(CODE[7]), STR_5(CODE[5]), STR_4(CODE[5]), STR_3(CODE[4]), 
		 -> STR_2(CODE[2]), STR_1(CODE[2]), romDataMap(BANK3[28]), 

    strcat@to	PTR unsigned char  size(2) Largest target is 33
		 -> main@packet(BANK1[33]), loop@packet(BANK2[33]), 

    strcat@cp	PTR unsigned char  size(2) Largest target is 33
		 -> main@packet(BANK1[33]), loop@packet(BANK2[33]), 

    memset@p1	PTR void  size(2) Largest target is 33
		 -> RXPacket(BANK3[33]), main@packet(BANK1[33]), loop@packet(BANK2[33]), 

    memset@p	PTR unsigned char  size(2) Largest target is 33
		 -> RXPacket(BANK3[33]), main@packet(BANK1[33]), loop@packet(BANK2[33]), 

    ftoa@cp	PTR unsigned char  size(1) Largest target is 17
		 -> ftoa@buf(BANK2[17]), 

    sprintf@f	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_10(CODE[11]), 

    sprintf@sp	PTR unsigned char  size(1) Largest target is 17
		 -> ftoa@buf(BANK2[17]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    nrf24l01SendPacket@Packet	PTR struct . size(2) Largest target is 33
		 -> RXPacket(BANK3[33]), main@packet(BANK1[33]), loop@packet(BANK2[33]), 

    TXPacket	PTR struct . size(2) Largest target is 33
		 -> NULL(NULL[0]), RXPacket(BANK3[33]), main@packet(BANK1[33]), loop@packet(BANK2[33]), 

    nrf24l01SendACK@packet	PTR struct . size(1) Largest target is 33
		 -> RXPacket(BANK3[33]), 

    sp__strcpy	PTR unsigned char  size(1) Largest target is 28
		 -> romDataMap(BANK3[28]), 

    nrf24l01GetPipe@name	PTR unsigned char  size(1) Largest target is 28
		 -> romDataMap(BANK3[28]), 

    checkTXPower@rxPacket	PTR struct . size(1) Largest target is 33
		 -> RXPacket(BANK3[33]), 

    sp__ftoa	PTR unsigned char  size(1) Largest target is 17
		 -> ftoa@buf(BANK2[17]), 

    setMessage@topic	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_9(CODE[5]), STR_7(CODE[6]), STR_6(CODE[7]), STR_5(CODE[5]), 
		 -> STR_4(CODE[5]), STR_3(CODE[4]), 

    sp__strcat	PTR unsigned char  size(2) Largest target is 33
		 -> main@packet(BANK1[33]), loop@packet(BANK2[33]), 

    sp__memset	PTR void  size(2) Largest target is 33
		 -> RXPacket(BANK3[33]), main@packet(BANK1[33]), loop@packet(BANK2[33]), 

    setMessage@packet	PTR struct . size(2) Largest target is 33
		 -> main@packet(BANK1[33]), loop@packet(BANK2[33]), 

    sp__nrf24l01GetRXPacket	PTR struct . size(1) Largest target is 33
		 -> RXPacket(BANK3[33]), 

    handleRXData@RXPacket	PTR struct . size(1) Largest target is 33
		 -> RXPacket(BANK3[33]), 

    romData	PTR struct . size(1) Largest target is 28
		 -> romDataMap(BANK3[28]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    _ISR->_nrf24l01ISR
    _nrf24l01ISR->_nrf24l01ReceivePacket
    _nrf24l01ReceivePacket->i1_memset
    _nrf24l01CheckACK->i1_nrf24l01SetRXMode
    i1_nrf24l01SetRXMode->i1_nrf24l01Send

Critical Paths under _main in BANK0

    _nrf24l01Init->_nrf24l01InitRegisters
    _nrf24l01InitRegisters->_nrf24l01SetRXPipe
    _nrf24l01InitRegisters->_nrf24l01SetTXPipe
    _nrf24l01SetRXPipe->_nrf24l01Send
    _nrf24l01GetPipe->___lwmod
    _nrf24l01GetPipe->_strlen
    _sleep->_handleRXData
    _handleRXData->_nrf24l01SendACK
    _nrf24l01SendACK->_nrf24l01SendPacket
    _nrf24l01SetTXPipe->___bmul
    _nrf24l01SendPacket->_nrf24l01ChangeTXPower
    _nrf24l01SetRXMode->_nrf24l01Send
    _setMessage->_ftoa
    _strcat->_ftoa
    _ftoa->___fttol
    _sprintf->___llmod
    ___llmod->___lldiv
    ___lltoft->___ftpack
    ___fttol->___ftmul
    ___ftsub->___ftadd
    ___ftneg->_getADCValue
    ___ftmul->_getADCValue
    _getADCValue->___ftdiv
    ___ftdiv->___ftadd
    ___ftadd->___awtoft
    ___awtoft->___ftpack
    _checkTXPower->_nrf24l01ChangeTXPower
    _nrf24l01ChangeTXPower->_nrf24l01Send
    ___lbtoft->___ftpack

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_loop
    _loop->_setMessage
    _setMessage->_strcat
    _strcat->_ftoa
    _ftoa->___fttol

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    _main->_loop

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                36    36      0  112166
                                             36 BANK1     36    36      0
                           ___lbtoft
                               _loop
                    _nrf24l01GetPipe
                       _nrf24l01Init
                 _nrf24l01SendPacket
                  _nrf24l01SetRXPipe
                  _nrf24l01SetTXPipe
                         _setMessage
                              _sleep
                             _strcpy
 ---------------------------------------------------------------------------------
 (1) _strcpy                                               5     3      2     200
                                              0 BANK0      5     3      2
 ---------------------------------------------------------------------------------
 (1) _nrf24l01Init                                         2     2      0    5331
                                             19 BANK0      2     2      0
                     _nrf24l01CEHigh
                      _nrf24l01CELow
              _nrf24l01InitRegisters
              _nrf24l01InterfaceInit
 ---------------------------------------------------------------------------------
 (2) _nrf24l01InterfaceInit                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _nrf24l01InitRegisters                               12    12      0    5331
                                              7 BANK0     12    12      0
                             ___bmul
                     _nrf24l01SPIEnd
                    _nrf24l01SPISend
                   _nrf24l01SPIStart
                       _nrf24l01Send
                  _nrf24l01SetRXPipe
                  _nrf24l01SetTXPipe
 ---------------------------------------------------------------------------------
 (1) _nrf24l01SetRXPipe                                    4     4      0    2239
                                              3 BANK0      4     4      0
                       _nrf24l01Send
 ---------------------------------------------------------------------------------
 (1) _nrf24l01GetPipe                                      5     5      0     658
                                              6 BANK0      5     5      0
                            ___lwmod
                             _strlen
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              6     2      4     337
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (1) _loop                                                49    49      0   67877
                                             35 BANK1      1     1      0
                                              0 BANK2     48    48      0
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___ftneg
                           ___lbtoft
                       _checkTXPower
                        _getADCValue
                       _nrf24l01Send
                 _nrf24l01SendPacket
                         _setMessage
                              _sleep
 ---------------------------------------------------------------------------------
 (1) _sleep                                                2     0      2    9132
                                             18 BANK0      2     0      2
                            ___lwdiv
                         _doWDTSleep
                       _handleRXData
                  _nrf24l01SetRXMode
 ---------------------------------------------------------------------------------
 (2) _handleRXData                                         2     2      0    5891
                                             16 BANK0      2     2      0
                _nrf24l01GetRXPacket
                    _nrf24l01SendACK
 ---------------------------------------------------------------------------------
 (3) _nrf24l01SendACK                                      2     2      0    5846
                                             14 BANK0      2     2      0
                 _nrf24l01SendPacket
                  _nrf24l01SetTXPipe
 ---------------------------------------------------------------------------------
 (4) _nrf24l01SetTXPipe                                    3     3      0     314
                                              4 BANK0      3     3      0
                             ___bmul
                     _nrf24l01SPIEnd
                    _nrf24l01SPISend
                   _nrf24l01SPIStart
 ---------------------------------------------------------------------------------
 (5) ___bmul                                               4     3      1     270
                                              0 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (4) _nrf24l01SendPacket                                   7     5      2    5364
                                              7 BANK0      7     5      2
                   _enableInterrupts
                     _nrf24l01CEHigh
                      _nrf24l01CELow
              _nrf24l01ChangeTXPower
                     _nrf24l01SPIEnd
                    _nrf24l01SPISend
                   _nrf24l01SPIStart
                  _nrf24l01SetRXMode
                             _strlen
 ---------------------------------------------------------------------------------
 (5) _strlen                                               6     4      2     170
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (2) _nrf24l01SetRXMode                                    3     3      0    2277
                                              3 BANK0      3     3      0
                     _nrf24l01CEHigh
                      _nrf24l01CELow
                       _nrf24l01Send
 ---------------------------------------------------------------------------------
 (13) _nrf24l01CELow                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (13) _nrf24l01CEHigh                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              8     4      4     340
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (1) _setMessage                                          10     3      7   17903
                                             25 BANK1     10     3      7
                           ___lbtoft (ARG)
                               _ftoa
                        _getADCValue (ARG)
                             _memset
                             _strcat
 ---------------------------------------------------------------------------------
 (2) _strcat                                               6     2      4     743
                                             19 BANK1      6     2      4
                               _ftoa (ARG)
 ---------------------------------------------------------------------------------
 (2) _memset                                               8     2      6     476
                                              0 BANK0      8     2      6
 ---------------------------------------------------------------------------------
 (2) _ftoa                                                14    10      4   15156
                                             79 BANK0      1     1      0
                                              6 BANK1     13     9      4
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                           ___lltoft
                            _sprintf
 ---------------------------------------------------------------------------------
 (3) _sprintf                                             36    26     10    2229
                                             24 BANK0     28    18     10
                            ___lldiv
                            ___llmod
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (4) _isdigit                                              2     2      0      68
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4     448
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (4) ___llmod                                             10     2      8     337
                                             14 BANK0     10     2      8
                            ___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (4) ___lldiv                                             14     6      8     340
                                              0 BANK0     14     6      8
 ---------------------------------------------------------------------------------
 (3) ___lltoft                                             6     2      4    3131
                                              8 BANK0      6     2      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) ___fttol                                             14    10      4     430
                                             71 BANK0      8     4      4
                                              0 BANK1      6     6      0
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftsub                                              6     0      6    4770
                                             27 BANK0      6     0      6
                            ___ftadd
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftneg                                              3     0      3     223
                                             55 BANK0      3     0      3
                            ___ftadd (ARG)
                            ___ftdiv (ARG)
                        _getADCValue (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftmul                                             16    10      6    3655
                                             55 BANK0     16    10      6
                           ___ftpack
                        _getADCValue (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftge                                               9     3      6     314
                                              0 BANK0      9     3      6
 ---------------------------------------------------------------------------------
 (2) _getADCValue                                         12     9      3   11891
                                             43 BANK0     12     9      3
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                         _doWDTSleep
 ---------------------------------------------------------------------------------
 (2) _doWDTSleep                                           2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) ___ftdiv                                             16    10      6    3965
                                             27 BANK0     16    10      6
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) ___ftadd                                             13     7      6    4525
                                             14 BANK0     13     7      6
                           ___awtoft (ARG)
                           ___ftpack
                           ___ftpack (ARG)
 ---------------------------------------------------------------------------------
 (3) ___awtoft                                             6     3      3    3242
                                              8 BANK0      6     3      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) _checkTXPower                                         2     2      0    2457
                                              7 BANK0      2     2      0
              _nrf24l01ChangeTXPower
                _nrf24l01GetRXPacket
 ---------------------------------------------------------------------------------
 (3) _nrf24l01GetRXPacket                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _nrf24l01ChangeTXPower                                4     2      2    2434
                                              3 BANK0      4     2      2
                       _nrf24l01Send
 ---------------------------------------------------------------------------------
 (3) _nrf24l01Send                                         3     2      1    2143
                                              0 BANK0      3     2      1
                   _enableInterrupts
                     _nrf24l01SPIEnd
                    _nrf24l01SPISend
                   _nrf24l01SPIStart
 ---------------------------------------------------------------------------------
 (13) _nrf24l01SPIStart                                    0     0      0       0
                      _nrf24l01CSLow
 ---------------------------------------------------------------------------------
 (14) _nrf24l01CSLow                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (13) _nrf24l01SPISend                                     1     1      0      22
 ---------------------------------------------------------------------------------
 (13) _nrf24l01SPIEnd                                      0     0      0       0
                     _nrf24l01CSHigh
 ---------------------------------------------------------------------------------
 (14) _nrf24l01CSHigh                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (13) _enableInterrupts                                    1     1      0      22
 ---------------------------------------------------------------------------------
 (2) ___lbtoft                                             8     5      3    2995
                                              8 BANK0      8     5      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) ___ftpack                                             8     3      5    2973
                                              0 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 14
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (10) _ISR                                                 0     0      0    1556
                        _nrf24l01ISR
 ---------------------------------------------------------------------------------
 (11) _nrf24l01ISR                                         2     2      0    1556
                                             11 COMMON     2     2      0
                          _exception
                   _nrf24l01CheckACK
              _nrf24l01ReceivePacket
                     i1_nrf24l01Send
 ---------------------------------------------------------------------------------
 (12) _nrf24l01ReceivePacket                               3     3      0     534
                                              8 COMMON     3     3      0
                     _nrf24l01CEHigh
                      _nrf24l01CELow
                     _nrf24l01SPIEnd
                    _nrf24l01SPISend
                   _nrf24l01SPIStart
                           i1_memset
                     i1_nrf24l01Send
 ---------------------------------------------------------------------------------
 (13) i1_memset                                            8     2      6     152
                                              0 COMMON     8     2      6
 ---------------------------------------------------------------------------------
 (12) _nrf24l01CheckACK                                    3     3      0     621
                                              7 COMMON     3     3      0
                             _strcmp
                i1_nrf24l01SetRXMode
 ---------------------------------------------------------------------------------
 (13) i1_nrf24l01SetRXMode                                 3     3      0     401
                                              4 COMMON     3     3      0
                     _nrf24l01CEHigh
                      _nrf24l01CELow
                     i1_nrf24l01Send
 ---------------------------------------------------------------------------------
 (12) i1_nrf24l01Send                                      3     2      1     267
                                              1 COMMON     3     2      1
                   _enableInterrupts
                     _nrf24l01SPIEnd
                    _nrf24l01SPISend
                   _nrf24l01SPIStart
 ---------------------------------------------------------------------------------
 (13) _nrf24l01SPIStart                                    0     0      0       0
                      _nrf24l01CSLow
 ---------------------------------------------------------------------------------
 (14) _nrf24l01CSLow                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (13) _nrf24l01SPISend                                     1     1      0      22
 ---------------------------------------------------------------------------------
 (13) _nrf24l01SPIEnd                                      0     0      0       0
                     _nrf24l01CSHigh
 ---------------------------------------------------------------------------------
 (14) _nrf24l01CSHigh                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (13) _enableInterrupts                                    1     1      0      22
 ---------------------------------------------------------------------------------
 (13) _nrf24l01CELow                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (13) _nrf24l01CEHigh                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (13) _strcmp                                              5     2      3     220
                                              0 COMMON     5     2      3
 ---------------------------------------------------------------------------------
 (12) _exception                                           1     1      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 14
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   ___lbtoft
     ___ftpack
   _loop
     ___awtoft
       ___ftpack
     ___ftadd
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___ftpack (ARG)
     ___ftdiv
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
     ___ftmul
       ___ftpack
       _getADCValue (ARG)
         ___awtoft
           ___ftpack
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftdiv
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
         _doWDTSleep
     ___ftneg
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
       _getADCValue (ARG)
         ___awtoft
           ___ftpack
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftdiv
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
         _doWDTSleep
     ___lbtoft
       ___ftpack
     _checkTXPower
       _nrf24l01ChangeTXPower
         _nrf24l01Send
           _enableInterrupts
           _nrf24l01SPIEnd
             _nrf24l01CSHigh
           _nrf24l01SPISend
           _nrf24l01SPIStart
             _nrf24l01CSLow
       _nrf24l01GetRXPacket
     _getADCValue
       ___awtoft
         ___ftpack
       ___ftadd
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftdiv
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
       _doWDTSleep
     _nrf24l01Send
       _enableInterrupts
       _nrf24l01SPIEnd
         _nrf24l01CSHigh
       _nrf24l01SPISend
       _nrf24l01SPIStart
         _nrf24l01CSLow
     _nrf24l01SendPacket
       _enableInterrupts
       _nrf24l01CEHigh
       _nrf24l01CELow
       _nrf24l01ChangeTXPower
         _nrf24l01Send
           _enableInterrupts
           _nrf24l01SPIEnd
             _nrf24l01CSHigh
           _nrf24l01SPISend
           _nrf24l01SPIStart
             _nrf24l01CSLow
       _nrf24l01SPIEnd
         _nrf24l01CSHigh
       _nrf24l01SPISend
       _nrf24l01SPIStart
         _nrf24l01CSLow
       _nrf24l01SetRXMode
         _nrf24l01CEHigh
         _nrf24l01CELow
         _nrf24l01Send
           _enableInterrupts
           _nrf24l01SPIEnd
             _nrf24l01CSHigh
           _nrf24l01SPISend
           _nrf24l01SPIStart
             _nrf24l01CSLow
       _strlen
     _setMessage
       ___lbtoft (ARG)
         ___ftpack
       _ftoa (ARG)
         ___ftge
         ___ftmul
           ___ftpack
           _getADCValue (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
             _doWDTSleep
         ___ftneg
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
           _getADCValue (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
             _doWDTSleep
         ___ftsub
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___fttol
           ___ftmul (ARG)
             ___ftpack
             _getADCValue (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               _doWDTSleep
         ___lltoft
           ___ftpack
         _sprintf
           ___lldiv
           ___llmod
             ___lldiv (ARG)
           ___wmul
           _isdigit
       _getADCValue (ARG)
         ___awtoft
           ___ftpack
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftdiv
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
         _doWDTSleep
       _memset (ARG)
       _strcat (ARG)
         _ftoa (ARG)
           ___ftge
           ___ftmul
             ___ftpack
             _getADCValue (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               _doWDTSleep
           ___ftneg
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
             _getADCValue (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               _doWDTSleep
           ___ftsub
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
           ___fttol
             ___ftmul (ARG)
               ___ftpack
               _getADCValue (ARG)
                 ___awtoft
                   ___ftpack
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                 _doWDTSleep
           ___lltoft
             ___ftpack
           _sprintf
             ___lldiv
             ___llmod
               ___lldiv (ARG)
             ___wmul
             _isdigit
     _sleep
       ___lwdiv
       _doWDTSleep
       _handleRXData
         _nrf24l01GetRXPacket
         _nrf24l01SendACK
           _nrf24l01SendPacket
             _enableInterrupts
             _nrf24l01CEHigh
             _nrf24l01CELow
             _nrf24l01ChangeTXPower
               _nrf24l01Send
                 _enableInterrupts
                 _nrf24l01SPIEnd
                   _nrf24l01CSHigh
                 _nrf24l01SPISend
                 _nrf24l01SPIStart
                   _nrf24l01CSLow
             _nrf24l01SPIEnd
               _nrf24l01CSHigh
             _nrf24l01SPISend
             _nrf24l01SPIStart
               _nrf24l01CSLow
             _nrf24l01SetRXMode
               _nrf24l01CEHigh
               _nrf24l01CELow
               _nrf24l01Send
                 _enableInterrupts
                 _nrf24l01SPIEnd
                   _nrf24l01CSHigh
                 _nrf24l01SPISend
                 _nrf24l01SPIStart
                   _nrf24l01CSLow
             _strlen
           _nrf24l01SetTXPipe
             ___bmul
             _nrf24l01SPIEnd
               _nrf24l01CSHigh
             _nrf24l01SPISend
             _nrf24l01SPIStart
               _nrf24l01CSLow
       _nrf24l01SetRXMode
         _nrf24l01CEHigh
         _nrf24l01CELow
         _nrf24l01Send
           _enableInterrupts
           _nrf24l01SPIEnd
             _nrf24l01CSHigh
           _nrf24l01SPISend
           _nrf24l01SPIStart
             _nrf24l01CSLow
   _nrf24l01GetPipe
     ___lwmod
     _strlen
   _nrf24l01Init
     _nrf24l01CEHigh
     _nrf24l01CELow
     _nrf24l01InitRegisters
       ___bmul
       _nrf24l01SPIEnd
         _nrf24l01CSHigh
       _nrf24l01SPISend
       _nrf24l01SPIStart
         _nrf24l01CSLow
       _nrf24l01Send
         _enableInterrupts
         _nrf24l01SPIEnd
           _nrf24l01CSHigh
         _nrf24l01SPISend
         _nrf24l01SPIStart
           _nrf24l01CSLow
       _nrf24l01SetRXPipe
         _nrf24l01Send
           _enableInterrupts
           _nrf24l01SPIEnd
             _nrf24l01CSHigh
           _nrf24l01SPISend
           _nrf24l01SPIStart
             _nrf24l01CSLow
       _nrf24l01SetTXPipe
         ___bmul
         _nrf24l01SPIEnd
           _nrf24l01CSHigh
         _nrf24l01SPISend
         _nrf24l01SPIStart
           _nrf24l01CSLow
     _nrf24l01InterfaceInit
   _nrf24l01SendPacket
     _enableInterrupts
     _nrf24l01CEHigh
     _nrf24l01CELow
     _nrf24l01ChangeTXPower
       _nrf24l01Send
         _enableInterrupts
         _nrf24l01SPIEnd
           _nrf24l01CSHigh
         _nrf24l01SPISend
         _nrf24l01SPIStart
           _nrf24l01CSLow
     _nrf24l01SPIEnd
       _nrf24l01CSHigh
     _nrf24l01SPISend
     _nrf24l01SPIStart
       _nrf24l01CSLow
     _nrf24l01SetRXMode
       _nrf24l01CEHigh
       _nrf24l01CELow
       _nrf24l01Send
         _enableInterrupts
         _nrf24l01SPIEnd
           _nrf24l01CSHigh
         _nrf24l01SPISend
         _nrf24l01SPIStart
           _nrf24l01CSLow
     _strlen
   _nrf24l01SetRXPipe
     _nrf24l01Send
       _enableInterrupts
       _nrf24l01SPIEnd
         _nrf24l01CSHigh
       _nrf24l01SPISend
       _nrf24l01SPIStart
         _nrf24l01CSLow
   _nrf24l01SetTXPipe
     ___bmul
     _nrf24l01SPIEnd
       _nrf24l01CSHigh
     _nrf24l01SPISend
     _nrf24l01SPIStart
       _nrf24l01CSLow
   _setMessage
     ___lbtoft (ARG)
       ___ftpack
     _ftoa (ARG)
       ___ftge
       ___ftmul
         ___ftpack
         _getADCValue (ARG)
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
           _doWDTSleep
       ___ftneg
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
         _getADCValue (ARG)
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
           _doWDTSleep
       ___ftsub
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___lltoft (ARG)
           ___ftpack
       ___fttol
         ___ftmul (ARG)
           ___ftpack
           _getADCValue (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
             _doWDTSleep
       ___lltoft
         ___ftpack
       _sprintf
         ___lldiv
         ___llmod
           ___lldiv (ARG)
         ___wmul
         _isdigit
     _getADCValue (ARG)
       ___awtoft
         ___ftpack
       ___ftadd
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftdiv
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
       _doWDTSleep
     _memset (ARG)
     _strcat (ARG)
       _ftoa (ARG)
         ___ftge
         ___ftmul
           ___ftpack
           _getADCValue (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
             _doWDTSleep
         ___ftneg
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
           _getADCValue (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
             _doWDTSleep
         ___ftsub
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___fttol
           ___ftmul (ARG)
             ___ftpack
             _getADCValue (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               _doWDTSleep
         ___lltoft
           ___ftpack
         _sprintf
           ___lldiv
           ___llmod
             ___lldiv (ARG)
           ___wmul
           _isdigit
   _sleep
     ___lwdiv
     _doWDTSleep
     _handleRXData
       _nrf24l01GetRXPacket
       _nrf24l01SendACK
         _nrf24l01SendPacket
           _enableInterrupts
           _nrf24l01CEHigh
           _nrf24l01CELow
           _nrf24l01ChangeTXPower
             _nrf24l01Send
               _enableInterrupts
               _nrf24l01SPIEnd
                 _nrf24l01CSHigh
               _nrf24l01SPISend
               _nrf24l01SPIStart
                 _nrf24l01CSLow
           _nrf24l01SPIEnd
             _nrf24l01CSHigh
           _nrf24l01SPISend
           _nrf24l01SPIStart
             _nrf24l01CSLow
           _nrf24l01SetRXMode
             _nrf24l01CEHigh
             _nrf24l01CELow
             _nrf24l01Send
               _enableInterrupts
               _nrf24l01SPIEnd
                 _nrf24l01CSHigh
               _nrf24l01SPISend
               _nrf24l01SPIStart
                 _nrf24l01CSLow
           _strlen
         _nrf24l01SetTXPipe
           ___bmul
           _nrf24l01SPIEnd
             _nrf24l01CSHigh
           _nrf24l01SPISend
           _nrf24l01SPIStart
             _nrf24l01CSLow
     _nrf24l01SetRXMode
       _nrf24l01CEHigh
       _nrf24l01CELow
       _nrf24l01Send
         _enableInterrupts
         _nrf24l01SPIEnd
           _nrf24l01CSHigh
         _nrf24l01SPISend
         _nrf24l01SPIStart
           _nrf24l01CSLow
   _strcpy

 _ISR (ROOT)
   _nrf24l01ISR
     _exception
     _nrf24l01CheckACK
       _strcmp
       i1_nrf24l01SetRXMode
         _nrf24l01CEHigh
         _nrf24l01CELow
         i1_nrf24l01Send
           _enableInterrupts
           _nrf24l01SPIEnd
             _nrf24l01CSHigh
           _nrf24l01SPISend
           _nrf24l01SPIStart
             _nrf24l01CSLow
     _nrf24l01ReceivePacket
       _nrf24l01CEHigh
       _nrf24l01CELow
       _nrf24l01SPIEnd
         _nrf24l01CSHigh
       _nrf24l01SPISend
       _nrf24l01SPIStart
         _nrf24l01CSLow
       i1_memset
       i1_nrf24l01Send
         _enableInterrupts
         _nrf24l01SPIEnd
           _nrf24l01CSHigh
         _nrf24l01SPISend
         _nrf24l01SPIStart
           _nrf24l01CSLow
     i1_nrf24l01Send
       _enableInterrupts
       _nrf24l01SPIEnd
         _nrf24l01CSHigh
       _nrf24l01SPISend
       _nrf24l01SPIStart
         _nrf24l01CSLow

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      D       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     50      50       5      100.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50     48      4C       7       95.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50     30      44       9       85.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0      3D      11       76.3%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0     12B      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0     12B      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V2.00 build -1524193055 
Symbol Table                                                                                   Sun Jul 29 16:39:16 2018

                ___bmul@product 0022                     __CFG_CP$OFF 0000             ___wmul@multiplicand 0022  
           nrf24l01Send@command 0022                    ___ftadd@exp1 003A                    ___ftadd@exp2 0039  
                   __CFG_LVP$ON 0000                    ___ftadd@sign 0038                             l303 069A  
                           l190 0DA5                             l336 17EC                             l460 00F5  
                           l457 00D6                             l483 1737                             l468 0179  
                           l717 0551                             l693 0C8A                             l694 0C92  
                           l686 0C77                             l777 0D26                    __CFG_CPD$OFF 0000  
                           _ISR 0004                             wreg 0009               sleep@milliseconds 0032  
           nrf24l01SendPacket@i 002D                            ?_ISR 0070                    ___ftdiv@cntr 0045  
                  ___ftdiv@sign 004A                  ??_nrf24l01Init 0033                            l3001 0826  
                          l3011 0E05                            l3031 0E5C                            l3017 0E1B  
                          l3121 0A27                            l3131 0A56                            l3133 0A3C  
                          l3039 0E75                            l3151 0D68                            l3311 042F  
                          l2353 0AD1                            l2521 1731                            l3065 0961  
                          l3057 0943                            l2337 0B59                            l2361 17B1  
                          l2347 0ABF                            l2603 0543                            l3163 0DDF  
                          l3147 0D74                            l2515 1691                            l3059 094F  
                          l2371 169C                            l2613 0575                            l2605 054D  
                          l3165 0DE6                            l3149 0D7C                            l2541 0C10  
                          l2701 00D8                            l3069 096A                            l2437 069F  
                          l3325 0488                            l2391 0C63                            l2383 0C4D  
                          l2623 0590                            l3159 0DC7                            l2711 0104  
                          l2359 17A5                            l2463 0709                            l2455 06CF  
                          l2439 06AB                            l2367 1696                            l3319 0479  
                          l2609 0563                            l2553 0C3B                            l2633 0AE2  
                          l2721 0123                            l2705 00DD                            l3417 022D  
                ??_nrf24l01Send 0021                            l2387 0C54                            l2563 04DA  
                          l2811 0EFF                            l2539 0C02                            l2635 0AF0  
                          l2643 0B13                            l2491 0730                            l2459 06E8  
                          l3363 08B6                            l3611 0FFC                            l2397 0C7C  
                          l2389 0C5E                            l2573 04F0                            l2901 07E9  
                          l2549 0C30                            l2733 0156                            l2477 071F  
                          l3365 08C2                            l3373 08D7                            l2399 0C84  
                          l2591 051D                            l2567 04E1                            l2823 0F1B  
                          l2815 0F07                            l2639 0B08                            l2743 018C  
                          l2727 0129                            l2479 072B                            l2593 0527  
                          l2585 050A                            l2753 01A4                            l2745 018F  
                          l2737 0165                            l2673 0056                            l2761 0033  
                          l2489 0761                            l3369 08CE                            l3481 0974  
                          l2595 052C                            l2771 09F9                            l2827 0F23  
                          l2763 01F4                            l3483 0997                            l2597 0530  
                          l3493 176C                            l2775 0A0F                            l2759 01E9  
                          l2679 0066                            l2687 0094                            l2943 088D  
                          l2793 0EAE                            l2849 178A                            l2697 00A3  
                          l2937 16FF                            l2945 0899                            l2929 16B5  
                          l2891 0D38                            l2859 0CC4                            l2699 00D2  
                          l2947 08A1                            l2885 0D1C                            l2877 0CFD  
                          l2799 0EC4                            l2887 0D2A                            l2879 0D0E  
                          l2959 05EE                            l2977 17F8                            l2899 07D9  
                          STR_1 1835                    __CFG_WDTE$ON 0000                            STR_2 1835  
                          STR_3 1831                            STR_4 181E                            STR_5 1823  
                          STR_6 180C                            STR_7 1813                            STR_8 182D  
                          STR_9 1828                            u2015 0703                            u2105 1738  
                          u2115 173D                            u3024 17F2                            u3105 0E5D  
                          u2145 0C05                            u3025 17F1                            u3115 0E6C  
                          u2325 051E                            u3125 0E76                            u2165 0C11  
                          u2175 0C25                            u2185 0C31                            u2355 0531  
                          u3155 0946                            u3085 0E2D                            u2445 0AE5  
                          u2605 015D                            u3405 08B9                            u2295 050B  
                          u3095 0E3D                            u2615 016F                            u3175 0950  
                          u1905 0C72                            u2385 0544                            u2465 0AFE  
                          u2625 0181                            u3185 095A                            u3425 08C8  
                          u3505 0985                            u2475 0B09                            u3195 0962  
                          u3435 08CF                            u1925 0C7F                            u2805 0F2A  
                          u2725 0ED0                            u2735 0EE0                            u3607 0752  
                          u2585 014C                            u3617 0762                            u3537 0F6D  
                          u1795 0AAD                            u2755 0F08                            u2915 0D1D  
                          u3627 0B30                            u3547 0849                            u1965 0C99  
                          u1885 0C59                            u2765 0F0E                            u3637 0B45  
                          u3557 0858                            u2855 0CCC                            u3647 0B53  
                          u3567 06A7                            u2945 07DE                            u3577 0710  
                          u2795 0F24                            u3587 0727                            u2885 0CFE  
                          u3597 0746                            i1l48 167D                            _WPUA 020C  
                          _WPUC 020E  __size_of_nrf24l01InterfaceInit 001C                    __CFG_WRT$OFF 0000  
                 __CFG_FCMEN$ON 0000   __end_of_nrf24l01InterfaceInit 1766                            _main 0F4B  
                          _ftoa 05A8                    ___ftpack@arg 0020                            _loop 01FA  
                  ___ftpack@exp 0023                            fsr0h 0005                            fsr1h 0007  
                          indf0 0000                            fsr0l 0004                            indf1 0001  
                          fsr1l 0006                            btemp 007E  __size_of_nrf24l01ReceivePacket 004D  
                 __CFG_BORV$LOW 0000   __end_of_nrf24l01ReceivePacket 0BF1                            start 000F  
         nrf24l01SetRXPipe@pipe 0025                   __CFG_CSWEN$ON 0000               ___bmul@multiplier 0023  
                 __CFG_MCLRE$ON 0000                    ___ftmul@cntr 0065                    ___ftmul@sign 0066  
   __size_of_nrf24l01SendPacket 00CC                           ??_ISR 007D                    ___fttol@exp1 00A5  
          __size_of_getADCValue 00A6                 ??_nrf24l01CELow 0070                    ___fttol@lval 00A1  
               ??_nrf24l01CSLow 0070                           ?_main 0070                           ?_ftoa 00A6  
                         ?_loop 0070                 __end_of___ftadd 05A8                           STR_10 1801  
               __end_of___ftdiv 0E97                 __end_of___ftneg 1677                 __end_of___lldiv 0C44  
               __end_of___ftmul 0F4B                 __end_of___llmod 0B1C                 __end_of___ftsub 17A0  
               __end_of___fttol 0D48                  __CFG_DEBUG$OFF 0000                 __end_of___lwdiv 096F  
                         i1l167 000D                           i1l328 09D9                 __end_of___lwmod 08DC  
        enableInterrupts@enable 0070                      i1memset@p1 0070                   __CFG_PWRTE$ON 0000  
         nrf24l01SetTXPipe@pipe 0026                    ___lltoft@exp 002D                   ___awtoft@sign 002D  
               __end_of_dpowers 1028                 __end_of_isdigit 1693                           _sleep 0A1E  
                 ___ftpack@sign 0024                           ftoa@f 00A6                           ftoa@l 00AE  
                __CFG_BOREN$OFF 0000                _enableInterrupts 165E                           status 0003  
                         wtemp0 007E                 __end_of_sprintf 01FA     __end_ofi1_nrf24l01SetRXMode 0A9A  
              __end_ofi1_memset 16FA  __size_of_nrf24l01ChangeTXPower 003F               getADCValue@adcSum 0054  
 __end_of_nrf24l01ChangeTXPower 0AD9                _nrf24l01SPIStart 1666                 __initialization 0011  
              _nrf24l01CheckACK 090A          nrf24l01InitRegisters@i 0031                    __end_of_main 1000  
                  __end_of_ftoa 069A            __end_of_handleRXData 16B7                    __end_of_loop 03AC  
  nrf24l01ChangeTXPower@rfSetup 0026                ??_nrf24l01CEHigh 0070                          ??_main 00C4  
                        ??_ftoa 006F                   ___fttol@sign1 00A0                          ??_loop 00C3  
              ??_nrf24l01CSHigh 0070                ??_nrf24l01SPIEnd 0070             _nrf24l01GetRXPacket 07FE  
      __size_of_nrf24l01SPISend 000D                ___llmod@dividend 0032                          _ADRESH 009C  
                        _ADRESL 009B                          ?_sleep 0032                __end_of___awtoft 083D  
                        _ANSELA 018C                          _ANSELC 018E                __end_of___ftpack 0CA9  
              __end_of___lbtoft 081B                __end_of___lltoft 07FE                          i1l3101 16E6  
                        _ODCONA 028C        __size_of_nrf24l01GetPipe 0038                          _ODCONC 028E  
                        i1l2415 1682                          i1l3231 0BE3                          i1l3401 09DA  
                        i1l3235 0BEB                          i1l3227 0BD3                          i1l3093 0A94  
                        i1l3385 09B6                          i1l2981 0862                          i1l2985 086A  
                        i1l2989 0882                          _INLVLA 038C                          _INLVLC 038E  
         __size_of_checkTXPower 0014                          u365_27 0A6D                          u366_27 0A81  
                        u367_27 0A8E                          u368_27 166A                          u369_27 1658  
                        _STATUS 0003        __size_of_nrf24l01SendACK 002E            ?_nrf24l01GetRXPacket 0070  
          __size_of_nrf24l01ISR 003B         nrf24l01SetRXMode@config 0024                          ___bmul 1693  
                        ___ftge 09E2         nrf24l01SetRXMode@rxMode 0025                          ___wmul 172E  
                     ??___ftadd 0034                  __CFG_STVREN$ON 0000                       ??___ftdiv 0041  
                     ??___ftneg 005A                       ??___lldiv 0028                       ??___ftmul 005D  
                     ??___llmod 0036                       ??___ftsub 0041                       ??___fttol 006B  
                     ??___lwdiv 0024                       ??___lwmod 0024            __end_of_nrf24l01Init 0861  
          __end_of_nrf24l01Send 17DF                          _memset 16FA           _nrf24l01InitRegisters 03AC  
                        _strcat 0888                          _strcmp 0861                          _strcpy 1766  
                        _strlen 17A0                          ftoa@cp 00B2           ___ftmul@f3_as_product 0062  
     i1nrf24l01SetRXMode@config 0075                       ??_isdigit 0020                          loop@ta 0123  
                        loop@vt 0120       i1nrf24l01SetRXMode@rxMode 0076                    _checkTXPower 16B7  
                     ??_sprintf 0042              getADCValue@adcLoop 0051         __end_of__initialization 0029  
                    ___ftadd@f1 002E                      ___ftadd@f2 0031                      ___ftge@ff1 0020  
                    ___ftge@ff2 0023           ??_nrf24l01GetRXPacket 0020        nrf24l01SendPacket@Packet 0027  
            getADCValue@channel 0053                      ___ftdiv@f1 003E                      ___ftdiv@f2 003B  
                    ___ftdiv@f3 0046                      ___ftneg@f1 0057                      ___awtoft@c 0028  
                    ___lbtoft@c 002F             ___bmul@multiplicand 0020                      ___ftmul@f1 0057  
                    ___ftmul@f2 005A                      ___ftsub@f1 003E                      ___ftsub@f2 003B  
                    ___fttol@f1 0067                  __pcstackCOMMON 0070                    __pidataBANK1 1644  
                    ___lltoft@c 0028                      _doWDTSleep 16CB                   __end_of_sleep 0A5B  
                     ?i1_memset 0070                         ??_sleep 0034                    sprintf@width 004F  
                   loop@rfSetup 012E                      __pbssBANK1 00E8                      __pbssBANK2 0150  
                    __pbssBANK3 01A0               ??_nrf24l01SPISend 0070              __size_of_exception 0002  
         __size_of_handleRXData 0012         __size_ofi1_nrf24l01Send 001B               ??_nrf24l01GetPipe 0026  
                    __pmaintext 0F4B                  main@bootStatus 00C5                         ?___bmul 0020  
                       ?___ftge 0020                         ?___wmul 0020               ??_nrf24l01SendACK 002E  
               __CFG_PPS1WAY$ON 0000               _nrf24l01SetRXMode 0B1C               _nrf24l01SetRXPipe 17DF  
        ?_nrf24l01InitRegisters 0070                      __pintentry 0004               _nrf24l01SetTXPipe 0B60  
           nrf24l01SPISend@data 0070                         ?_memset 0020              ?_nrf24l01SetRXMode 0070  
                     ?___awtoft 0028                       ?___ftpack 0020                       ?___lbtoft 0028  
            ?_nrf24l01SetRXPipe 0070        __end_of_enableInterrupts 1666              ?_nrf24l01SetTXPipe 0070  
                     ?___lltoft 0028             __CFG_RSTOSC$HFINT32 0000                         ?_strcat 00B3  
                       ?_strcmp 0070                         ?_strcpy 0020                         ?_strlen 0020  
         __end_of_n_ADDRESS_MUL 1801                      ??i1_memset 0076             ??_nrf24l01SetRXMode 0023  
      __end_of_nrf24l01SPIStart 166E             ??_nrf24l01SetRXPipe 0023             ??_nrf24l01SetTXPipe 0024  
                       _SSP1BUF 0211        __end_of_nrf24l01CheckACK 093A                    _handleRXData 16A5  
         _nrf24l01InterfaceInit 174A      __end_of_nrf24l01SendPacket 0766                   ??_getADCValue 004E  
         __size_of_nrf24l01Init 0024           __size_of_nrf24l01Send 0020       __end_of_nrf24l01SetRXMode 0B60  
     __end_of_nrf24l01SetRXPipe 1800       __end_of_nrf24l01SetTXPipe 0BA4           _nrf24l01ReceivePacket 0BA4  
               __size_of___bmul 0012                 __size_of___ftge 003C                         ___ftadd 04B2  
                   ?_doWDTSleep 0070                         ___ftdiv 0DEE                         ___ftneg 166E  
                       ___lldiv 0BF1                 __size_of___wmul 001C                         ___ftmul 0E97  
                       ___llmod 0AD9                         ___ftsub 1782                         ___fttol 0CA9  
                       ___lwdiv 093A                         ___lwmod 08AF                      ??___awtoft 002B  
                    ??___ftpack 0025                      ??___lbtoft 002B           __end_of_nrf24l01CELow 164B  
               __size_of_memset 0019           __end_of_nrf24l01CSLow 1651                      ??___lltoft 002C  
                       __ptext1 1766                         __ptext2 083D                         __ptext3 174A  
                       __ptext4 03AC                         __ptext5 17DF                         __ptext6 096F  
                       __ptext7 08AF                         __ptext8 01FA                         __ptext9 0A1E  
               __size_of_strcat 0027                 __size_of_strcmp 0027               __end_of_exception 0004  
               __size_of_strcpy 001C                 __size_of_strlen 001F                    __size_of_ISR 000B  
                       _counter 0150                         _dpowers 1000                         _isdigit 1684  
                       _romData 00EB                         _sprintf 002D                         clrloop0 1652  
          end_of_initialization 0029                         ftoa@buf 0153                         ftoa@rem 00AA  
                  _nrf24l01Init 083D                      _setMessage 0766                    _nrf24l01Send 17BF  
                    _romDataMap 01C1                         memset@c 0022                         memset@n 0024  
                       memset@p 0026                nrf24l01GetPipe@i 002A                 ___lldiv@divisor 0020  
               ___lldiv@counter 002D           _nrf24l01ChangeTXPower 0A9A                setMessage@packet 00B9  
  __size_ofi1_nrf24l01SetRXMode 003F                setMessage@status 00C1                         strcmp@r 0074  
         i1nrf24l01Send@command 0073                         strlen@s 0020             __end_of_getADCValue 0DEE  
                     _PORTAbits 000C                       _PORTCbits 000E                       _TRISAbits 008C  
                     _TRISCbits 008E                nrf24l01Send@data 0020                __CFG_FEXTOSC$OFF 0000  
           __size_of_doWDTSleep 0017                   ??_nrf24l01ISR 007B          ?_nrf24l01InterfaceInit 0070  
                   ___ftdiv@exp 0049                  i1_nrf24l01Send 1713                      main@packet 00C7  
        ?_nrf24l01ReceivePacket 0070      __size_of_nrf24l01SetRXMode 0044      __size_of_nrf24l01SetRXPipe 0021  
                   ___ftmul@exp 0061      __size_of_nrf24l01SetTXPipe 0044                  __end_of___bmul 16A5  
                __end_of___ftge 0A1E                  __end_of___wmul 174A                       i1memset@c 0072  
                     i1memset@n 0074                       i1memset@p 0076                  __end_of_memset 1713  
                __end_of_strcat 08AF                  __end_of_strcmp 0888                  __end_of_strcpy 1782  
                __end_of_strlen 17BF             start_initialization 0011                 _nrf24l01SPISend 1677  
                   __end_of_ISR 000F                      ftoa@status 00A9               __size_ofi1_memset 0018  
     nrf24l01SetRXPipe@enRXAddr 0026                 _nrf24l01GetPipe 096F     __end_of_nrf24l01GetRXPacket 0800  
       __size_of_nrf24l01CEHigh 0003         __size_of_nrf24l01CSHigh 0003                     ?_setMessage 00B9  
        __end_ofi1_nrf24l01Send 172E                 _nrf24l01SendACK 08DC         __size_of_nrf24l01SPIEnd 0007  
               ___llmod@divisor 002E                 ___llmod@counter 0037          ?_nrf24l01ChangeTXPower 0023  
       ??_nrf24l01InitRegisters 0027                __CFG_LPBOREN$OFF 0000                     _getADCValue 0D48  
                      ??___bmul 0021                        ??___ftge 0026             __end_of_nrf24l01ISR 09E2  
                      ??___wmul 0024                     __pdataBANK1 00EB                        ??_memset 0026  
             ?_enableInterrupts 0070                        ??_strcat 0070                        ??_strcmp 0073  
                      ??_strcpy 0022                        ??_strlen 0022               __size_of___awtoft 0022  
             __size_of___ftpack 0065               __size_of___lbtoft 001B              ??_enableInterrupts 0070  
             __size_of___lltoft 002A                     __pbssCOMMON 007D                       ___latbits 0002  
                 __pcstackBANK0 0020                   __pcstackBANK1 00A0                   __pcstackBANK2 0120  
               doWDTSleep@wdtps 0021               ?_nrf24l01SPIStart 0070            checkTXPower@rxPacket 0028  
                  _isdigit$1811 0020               ?_nrf24l01CheckACK 0070              ??_nrf24l01SPIStart 0070  
            ??_nrf24l01CheckACK 0077                 ?i1_nrf24l01Send 0071                     sprintf@flag 0048  
                   sprintf@prec 0051                      loop@packet 012F             nrf24l01GetPipe@name 0029  
           nrf24l01GetPipe@pipe 0028                ___lwdiv@dividend 0022                    ??_doWDTSleep 0020  
                      ?___ftadd 002E                        ?___ftdiv 003B                        ?___ftneg 0057  
                      ?___lldiv 0020                        ?___ftmul 0057                        ?___llmod 002E  
                      ?___ftsub 003B                        ?___fttol 0067                        ?___lwdiv 0020  
                      ?___lwmod 0020            __end_of_n_ADDRESS_P0 181E         __end_of_nrf24l01SPISend 1684  
            i1nrf24l01Send@data 0071       nrf24l01InitRegisters@enAA 002E             __size_of_setMessage 006E  
            _nrf24l01SendPacket 069A         __end_of_nrf24l01GetPipe 09A7                        ?_isdigit 0070  
                     _loop$2062 0126                       _loop$2063 0129         __end_of_nrf24l01SendACK 090A  
                     _exception 0002             ?_nrf24l01SendPacket 0027                ___lwdiv@quotient 0025  
                      ?_sprintf 0038             i1_nrf24l01SetRXMode 0A5B                  __size_of_sleep 003D  
            __end_of_doWDTSleep 16E2                  ___wmul@product 0024                     _nrf24l01ISR 09A7  
                     clear_ram0 1651                        _PIE0bits 0090                        _PIR0bits 0010  
                     _sleepLoop 00EA            ??_nrf24l01SendPacket 0029                 setMessage@value 00BD  
               setMessage@topic 00BB            ?i1_nrf24l01SetRXMode 0070                      _ADCON0bits 009D  
                    _ADCON1bits 009E               ___wmul@multiplier 0020                        _WPUAbits 020C  
                      i1_memset 16E2                   ?_checkTXPower 0070                        _RXPacket 01A0  
                      _TXPacket 00E8                      ?_exception 0070                  _nrf24l01CEHigh 1645  
       ??_nrf24l01InterfaceInit 0020                  _nrf24l01CSHigh 164B               nrf24l01ISR@status 007C  
                _nrf24l01SPIEnd 1657         ??_nrf24l01ReceivePacket 0078          __size_of_nrf24l01CELow 0003  
        __size_of_nrf24l01CSLow 0003           ??i1_nrf24l01SetRXMode 0074                __size_of___ftadd 00F6  
              __size_of___ftdiv 00A9                __size_of___ftneg 0009                __size_of___lldiv 0053  
              __size_of___ftmul 00B4                __size_of___llmod 0043                __size_of___ftsub 001E  
              __size_of___fttol 009F           nrf24l01SendACK@packet 002F                __size_of___lwdiv 0035  
              __size_of___lwmod 002D                        ___awtoft 081B                        ___ftpack 0C44  
                      ___lbtoft 0800                ?_nrf24l01SPISend 0070                        ___lltoft 07D4  
                    _ANSELAbits 018C                      _ANSELCbits 018E                  ??_checkTXPower 0027  
              ?_nrf24l01GetPipe 0070                      sprintf@val 004A                   _n_ADDRESS_MUL 1800  
                    strcat@from 00B5          __end_of_nrf24l01CEHigh 1648                __size_of_isdigit 000F  
               ___lwdiv@divisor 0020          __end_of_nrf24l01CSHigh 164E                ?_nrf24l01SendACK 0070  
               ___lwdiv@counter 0027                        __ptext10 16A5                        __ptext11 08DC  
                      __ptext20 16FA                        __ptext12 0B60                        __ptext21 05A8  
                      __ptext13 1693                        __ptext30 166E                        __ptext22 002D  
                      __ptext14 069A                        __ptext31 0E97                        __ptext23 1684  
                      __ptext15 17A0                        __ptext40 0A9A                        __ptext32 09E2  
                      __ptext24 172E                        __ptext16 0B1C                        __ptext41 17BF  
                      __ptext33 0D48                        __ptext25 0AD9                        __ptext17 093A  
                      __ptext50 1713                        __ptext42 0800                        __ptext34 16CB  
                      __ptext26 0BF1                        __ptext18 0766                        __ptext51 1666  
                      __ptext43 0C44                        __ptext35 0DEE                        __ptext27 07D4  
                      __ptext19 0888                        __ptext60 0002                        __ptext52 164E  
                      __ptext36 04B2                        __ptext28 0CA9                        __ptext53 1677  
                      __ptext45 09A7                        __ptext37 081B                        __ptext29 1782  
                      __ptext54 1657                        __ptext46 0BA4                        __ptext38 16B7  
                      __ptext55 164B                        __ptext47 16E2                        __ptext39 07FE  
                      __ptext56 165E                        __ptext48 090A                        __ptext57 1648  
                      __ptext49 0A5B                        __ptext58 1645                        __ptext59 0861  
                  _SSP1CON1bits 0215          __end_of_nrf24l01SPIEnd 165E                        _nrf24l01 007D  
              __size_of_sprintf 01CD                     _OSCCON1bits 0919                    ??_setMessage 00C0  
                    strcpy@from 0020   nrf24l01ChangeTXPower@addPower 0023                        _loop$882 012C  
       ??_nrf24l01ChangeTXPower 0025                   __size_of_main 00B5                   __size_of_ftoa 00F2  
                 __size_of_loop 01B2    nrf24l01InitRegisters@channel 0029    nrf24l01InitRegisters@feature 002B  
            exception@exception 0070                      _RC0PPSbits 0EA0    nrf24l01InitRegisters@rfSetup 002C  
                    _RC1PPSbits 0EA1                    ?_getADCValue 004B                      _RC2PPSbits 0EA2  
__size_of_nrf24l01InitRegisters 0106   __end_of_nrf24l01InitRegisters 04B2                        int$flags 007E  
  nrf24l01InitRegisters@setupAW 002A                      _ODCONAbits 028C                    _SSP1STATbits 0214  
                      main@pipe 00C6          nrf24l01ReceivePacket@i 007A                   _nrf24l01CELow 1648  
                 _nrf24l01CSLow 164E              __end_of_setMessage 07D4                      _INTCONbits 000B  
               ?_nrf24l01CEHigh 0070                      _FVRCONbits 0117                ??i1_nrf24l01Send 0072  
                   ??_exception 0070                 ?_nrf24l01CSHigh 0070                  __pstringtext10 1831  
                __pstringtext11 1835                  __pstringtext12 0000                        isdigit@c 0021  
                      memset@p1 0020                   ?_handleRXData 0070                 ?_nrf24l01SPIEnd 0070  
          handleRXData@RXPacket 0031                        intlevel1 0000                       sprintf@ap 0049  
                     sprintf@sp 004E                    _n_ADDRESS_P0 1819       __size_of_enableInterrupts 0008  
              ___lwmod@dividend 0022                ___lldiv@dividend 0024               __CFG_CLKOUTEN$OFF 0000  
  __size_of_nrf24l01GetRXPacket 0002     nrf24l01InitRegisters@config 0030       __size_of_nrf24l01SPIStart 0008  
     __size_of_nrf24l01CheckACK 0030     nrf24l01InitRegisters@status 002D      nrf24l01ReceivePacket@width 0079  
                ?_nrf24l01CELow 0070                   __pstringtext1 1000                   __pstringtext2 1819  
                 __pstringtext3 1800                   __pstringtext4 180C                   __pstringtext5 1813  
                 __pstringtext6 181E                   __pstringtext7 1823                   __pstringtext8 1828  
                 __pstringtext9 182D                  ?_nrf24l01CSLow 0070                        sprintf@c 0053  
                      sprintf@f 0038      nrf24l01InitRegisters@DynPD 002F                        strcat@cp 00B7  
                      strcat@to 00B3                        strcmp@s1 0070                        strcmp@s2 0072  
              ___lldiv@quotient 0029                 ___lwmod@divisor 0020                        strcpy@cp 0024  
                      strlen@cp 0024                        strcpy@to 0023                 ___lwmod@counter 0025  
                ??_handleRXData 0030                      _WDTCONbits 0097                   ?_nrf24l01Init 0070  
                 ?_nrf24l01Send 0020                    ?_nrf24l01ISR 0070            __end_of_checkTXPower 16CB  
