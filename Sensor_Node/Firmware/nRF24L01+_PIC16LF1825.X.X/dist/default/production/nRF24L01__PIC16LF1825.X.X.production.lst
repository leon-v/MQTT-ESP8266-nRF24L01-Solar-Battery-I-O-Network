

Microchip Technology PIC LITE Macro Assembler V2.00 build -1524193055 
                                                                                               Thu Jul 26 15:05:29 2018

Microchip Technology Omniscient Code Generator v2.00 (Free mode) build 20180527130849
     1                           	processor	16LF18325
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK3,global,class=CODE,delta=2
     5                           	psect	stringtext1,global,class=STRCODE,delta=2
     6                           	psect	stringtext2,global,class=STRCODE,delta=2
     7                           	psect	stringtext3,global,class=STRCODE,delta=2
     8                           	psect	stringtext4,global,class=STRCODE,delta=2
     9                           	psect	stringtext5,global,class=STRCODE,delta=2
    10                           	psect	stringtext6,global,class=STRCODE,delta=2
    11                           	psect	stringtext7,global,class=STRCODE,delta=2
    12                           	psect	stringtext8,global,class=STRCODE,delta=2
    13                           	psect	stringtext9,global,class=STRCODE,delta=2
    14                           	psect	stringtext10,global,class=STRCODE,delta=2
    15                           	psect	stringtext11,global,class=STRCODE,delta=2
    16                           	psect	stringtext12,global,class=STRCODE,delta=2
    17                           	psect	cinit,global,class=CODE,merge=1,delta=2
    18                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
    19                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    20                           	psect	dataBANK3,global,class=BANK3,space=1,delta=1
    21                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1
    22                           	psect	clrtext,global,class=CODE,delta=2
    23                           	psect	cstackBANK3,global,class=BANK3,space=1,delta=1
    24                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1
    25                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    26                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    27                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    28                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    29                           	psect	text1,local,class=CODE,merge=1,delta=2
    30                           	psect	text2,local,class=CODE,merge=1,delta=2
    31                           	psect	text3,local,class=CODE,merge=1,delta=2
    32                           	psect	text4,local,class=CODE,merge=1,delta=2
    33                           	psect	text5,local,class=CODE,merge=1,delta=2
    34                           	psect	text6,local,class=CODE,merge=1,delta=2,group=1
    35                           	psect	text7,local,class=CODE,merge=1,delta=2
    36                           	psect	text8,local,class=CODE,merge=1,delta=2
    37                           	psect	text9,local,class=CODE,merge=1,delta=2,group=2
    38                           	psect	text10,local,class=CODE,merge=1,delta=2,group=2
    39                           	psect	text11,local,class=CODE,merge=1,delta=2,group=2
    40                           	psect	text12,local,class=CODE,merge=1,delta=2
    41                           	psect	text13,local,class=CODE,merge=1,delta=2,group=1
    42                           	psect	text14,local,class=CODE,merge=1,delta=2,group=1
    43                           	psect	text15,local,class=CODE,merge=1,delta=2,group=1
    44                           	psect	text16,local,class=CODE,merge=1,delta=2,group=1
    45                           	psect	text17,local,class=CODE,merge=1,delta=2,group=1
    46                           	psect	text18,local,class=CODE,merge=1,delta=2,group=1
    47                           	psect	text19,local,class=CODE,merge=1,delta=2
    48                           	psect	text20,local,class=CODE,merge=1,delta=2,group=1
    49                           	psect	text21,local,class=CODE,merge=1,delta=2,group=1
    50                           	psect	text22,local,class=CODE,merge=1,delta=2
    51                           	psect	text23,local,class=CODE,merge=1,delta=2
    52                           	psect	text24,local,class=CODE,merge=1,delta=2,group=2
    53                           	psect	text25,local,class=CODE,merge=1,delta=2,group=2
    54                           	psect	text26,local,class=CODE,merge=1,delta=2,group=2
    55                           	psect	text27,local,class=CODE,merge=1,delta=2,group=2
    56                           	psect	text28,local,class=CODE,merge=1,delta=2,group=2
    57                           	psect	text29,local,class=CODE,merge=1,delta=2
    58                           	psect	text30,local,class=CODE,merge=1,delta=2
    59                           	psect	text31,local,class=CODE,merge=1,delta=2
    60                           	psect	text32,local,class=CODE,merge=1,delta=2
    61                           	psect	text33,local,class=CODE,merge=1,delta=2,group=2
    62                           	psect	text34,local,class=CODE,merge=1,delta=2
    63                           	psect	text35,local,class=CODE,merge=1,delta=2
    64                           	psect	text36,local,class=CODE,merge=1,delta=2
    65                           	psect	text37,local,class=CODE,merge=1,delta=2
    66                           	psect	text38,local,class=CODE,merge=1,delta=2,group=2
    67                           	psect	text39,local,class=CODE,merge=1,delta=2,group=2
    68                           	psect	text40,local,class=CODE,merge=1,delta=2,group=2
    69                           	psect	text41,local,class=CODE,merge=1,delta=2,group=2
    70                           	psect	text42,local,class=CODE,merge=1,delta=2,group=1
    71                           	psect	text43,local,class=CODE,merge=1,delta=2,group=1
    72                           	psect	text44,local,class=CODE,merge=1,delta=2,group=1
    73                           	psect	text45,local,class=CODE,merge=1,delta=2,group=1
    74                           	psect	text46,local,class=CODE,merge=1,delta=2,group=1
    75                           	psect	text47,local,class=CODE,merge=1,delta=2,group=1
    76                           	psect	text48,local,class=CODE,merge=1,delta=2,group=1
    77                           	psect	text49,local,class=CODE,merge=1,delta=2,group=1
    78                           	psect	text50,local,class=CODE,merge=1,delta=2,group=1
    79                           	psect	text51,local,class=CODE,merge=1,delta=2,group=1
    80                           	psect	intentry,global,class=CODE,delta=2
    81                           	psect	text53,local,class=CODE,merge=1,delta=2
    82                           	psect	text54,local,class=CODE,merge=1,delta=2
    83                           	psect	text55,local,class=CODE,merge=1,delta=2
    84                           	psect	text56,local,class=CODE,merge=1,delta=2
    85                           	psect	text57,local,class=CODE,merge=1,delta=2
    86                           	psect	text58,local,class=CODE,merge=1,delta=2
    87                           	psect	text59,local,class=CODE,merge=1,delta=2
    88                           	psect	text60,local,class=CODE,merge=1,delta=2
    89                           	psect	text61,local,class=CODE,merge=1,delta=2
    90                           	psect	text62,local,class=CODE,merge=1,delta=2
    91                           	psect	text63,local,class=CODE,merge=1,delta=2
    92                           	psect	text64,local,class=CODE,merge=1,delta=2
    93                           	psect	text65,local,class=CODE,merge=1,delta=2
    94                           	psect	text66,local,class=CODE,merge=1,delta=2
    95                           	psect	text67,local,class=CODE,merge=1,delta=2,group=2
    96                           	psect	text68,local,class=CODE,merge=1,delta=2
    97                           	dabs	1,0x7E,2
    98  0000                     
    99                           ; Version 2.00
   100                           ; Generated 27/05/2018 GMT
   101                           ; 
   102                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
   103                           ; All rights reserved.
   104                           ; 
   105                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   106                           ; 
   107                           ; Redistribution and use in source and binary forms, with or without modification, are
   108                           ; permitted provided that the following conditions are met:
   109                           ; 
   110                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   111                           ;        conditions and the following disclaimer.
   112                           ; 
   113                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   114                           ;        of conditions and the following disclaimer in the documentation and/or other
   115                           ;        materials provided with the distribution.
   116                           ; 
   117                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   118                           ;        software without specific prior written permission.
   119                           ; 
   120                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   121                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   122                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   123                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   124                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   125                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   126                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   127                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   128                           ; 
   129                           ; 
   130                           ; Code-generator required, PIC16LF18325 Definitions
   131                           ; 
   132                           ; SFR Addresses
   133  0000                     	;# 
   134  0001                     	;# 
   135  0002                     	;# 
   136  0003                     	;# 
   137  0004                     	;# 
   138  0005                     	;# 
   139  0006                     	;# 
   140  0007                     	;# 
   141  0008                     	;# 
   142  0009                     	;# 
   143  000A                     	;# 
   144  000B                     	;# 
   145  000C                     	;# 
   146  000E                     	;# 
   147  0010                     	;# 
   148  0011                     	;# 
   149  0012                     	;# 
   150  0013                     	;# 
   151  0014                     	;# 
   152  0015                     	;# 
   153  0015                     	;# 
   154  0016                     	;# 
   155  0016                     	;# 
   156  0017                     	;# 
   157  0018                     	;# 
   158  0019                     	;# 
   159  0019                     	;# 
   160  001A                     	;# 
   161  001B                     	;# 
   162  001C                     	;# 
   163  001D                     	;# 
   164  001E                     	;# 
   165  001F                     	;# 
   166  008C                     	;# 
   167  008E                     	;# 
   168  0090                     	;# 
   169  0091                     	;# 
   170  0092                     	;# 
   171  0093                     	;# 
   172  0094                     	;# 
   173  0097                     	;# 
   174  009B                     	;# 
   175  009B                     	;# 
   176  009C                     	;# 
   177  009D                     	;# 
   178  009E                     	;# 
   179  009F                     	;# 
   180  010C                     	;# 
   181  010E                     	;# 
   182  0111                     	;# 
   183  0112                     	;# 
   184  0113                     	;# 
   185  0114                     	;# 
   186  0115                     	;# 
   187  0116                     	;# 
   188  0117                     	;# 
   189  0118                     	;# 
   190  0119                     	;# 
   191  018C                     	;# 
   192  018E                     	;# 
   193  0199                     	;# 
   194  0199                     	;# 
   195  0199                     	;# 
   196  019A                     	;# 
   197  019A                     	;# 
   198  019A                     	;# 
   199  019B                     	;# 
   200  019B                     	;# 
   201  019B                     	;# 
   202  019B                     	;# 
   203  019B                     	;# 
   204  019C                     	;# 
   205  019C                     	;# 
   206  019C                     	;# 
   207  019D                     	;# 
   208  019D                     	;# 
   209  019D                     	;# 
   210  019E                     	;# 
   211  019E                     	;# 
   212  019E                     	;# 
   213  019F                     	;# 
   214  019F                     	;# 
   215  019F                     	;# 
   216  019F                     	;# 
   217  019F                     	;# 
   218  020C                     	;# 
   219  020E                     	;# 
   220  0211                     	;# 
   221  0211                     	;# 
   222  0212                     	;# 
   223  0212                     	;# 
   224  0213                     	;# 
   225  0213                     	;# 
   226  0214                     	;# 
   227  0214                     	;# 
   228  0215                     	;# 
   229  0215                     	;# 
   230  0215                     	;# 
   231  0215                     	;# 
   232  0216                     	;# 
   233  0216                     	;# 
   234  0217                     	;# 
   235  0217                     	;# 
   236  0219                     	;# 
   237  021A                     	;# 
   238  021B                     	;# 
   239  021C                     	;# 
   240  021D                     	;# 
   241  021D                     	;# 
   242  021E                     	;# 
   243  021F                     	;# 
   244  028C                     	;# 
   245  028E                     	;# 
   246  0291                     	;# 
   247  0291                     	;# 
   248  0292                     	;# 
   249  0293                     	;# 
   250  0294                     	;# 
   251  0295                     	;# 
   252  0295                     	;# 
   253  0296                     	;# 
   254  0297                     	;# 
   255  0298                     	;# 
   256  029F                     	;# 
   257  030C                     	;# 
   258  030E                     	;# 
   259  0311                     	;# 
   260  0311                     	;# 
   261  0312                     	;# 
   262  0313                     	;# 
   263  0314                     	;# 
   264  0315                     	;# 
   265  0315                     	;# 
   266  0316                     	;# 
   267  0317                     	;# 
   268  0318                     	;# 
   269  038C                     	;# 
   270  038E                     	;# 
   271  0391                     	;# 
   272  0392                     	;# 
   273  0393                     	;# 
   274  0397                     	;# 
   275  0398                     	;# 
   276  0399                     	;# 
   277  039A                     	;# 
   278  039C                     	;# 
   279  039D                     	;# 
   280  039E                     	;# 
   281  039F                     	;# 
   282  0411                     	;# 
   283  0411                     	;# 
   284  0412                     	;# 
   285  0413                     	;# 
   286  0414                     	;# 
   287  0415                     	;# 
   288  0416                     	;# 
   289  0417                     	;# 
   290  0418                     	;# 
   291  0418                     	;# 
   292  0419                     	;# 
   293  041A                     	;# 
   294  041B                     	;# 
   295  041C                     	;# 
   296  041D                     	;# 
   297  041E                     	;# 
   298  041F                     	;# 
   299  0498                     	;# 
   300  0498                     	;# 
   301  0499                     	;# 
   302  049A                     	;# 
   303  049B                     	;# 
   304  049B                     	;# 
   305  049C                     	;# 
   306  049D                     	;# 
   307  049E                     	;# 
   308  049F                     	;# 
   309  0617                     	;# 
   310  0618                     	;# 
   311  0619                     	;# 
   312  0619                     	;# 
   313  061A                     	;# 
   314  061B                     	;# 
   315  061C                     	;# 
   316  061C                     	;# 
   317  061F                     	;# 
   318  0691                     	;# 
   319  0692                     	;# 
   320  0693                     	;# 
   321  0694                     	;# 
   322  0695                     	;# 
   323  0696                     	;# 
   324  0697                     	;# 
   325  0698                     	;# 
   326  0699                     	;# 
   327  0711                     	;# 
   328  0712                     	;# 
   329  0713                     	;# 
   330  0714                     	;# 
   331  0715                     	;# 
   332  0716                     	;# 
   333  0717                     	;# 
   334  0718                     	;# 
   335  0719                     	;# 
   336  0891                     	;# 
   337  0891                     	;# 
   338  0891                     	;# 
   339  0891                     	;# 
   340  0891                     	;# 
   341  0891                     	;# 
   342  0892                     	;# 
   343  0892                     	;# 
   344  0892                     	;# 
   345  0893                     	;# 
   346  0893                     	;# 
   347  0893                     	;# 
   348  0893                     	;# 
   349  0893                     	;# 
   350  0893                     	;# 
   351  0894                     	;# 
   352  0894                     	;# 
   353  0894                     	;# 
   354  0895                     	;# 
   355  0895                     	;# 
   356  0895                     	;# 
   357  0896                     	;# 
   358  0896                     	;# 
   359  0896                     	;# 
   360  089B                     	;# 
   361  0911                     	;# 
   362  0912                     	;# 
   363  0913                     	;# 
   364  0914                     	;# 
   365  0915                     	;# 
   366  0916                     	;# 
   367  0918                     	;# 
   368  0919                     	;# 
   369  091A                     	;# 
   370  091B                     	;# 
   371  091C                     	;# 
   372  091D                     	;# 
   373  091E                     	;# 
   374  091F                     	;# 
   375  0E0F                     	;# 
   376  0E10                     	;# 
   377  0E11                     	;# 
   378  0E12                     	;# 
   379  0E13                     	;# 
   380  0E14                     	;# 
   381  0E15                     	;# 
   382  0E16                     	;# 
   383  0E17                     	;# 
   384  0E18                     	;# 
   385  0E19                     	;# 
   386  0E1A                     	;# 
   387  0E1B                     	;# 
   388  0E1C                     	;# 
   389  0E1D                     	;# 
   390  0E1E                     	;# 
   391  0E1F                     	;# 
   392  0E20                     	;# 
   393  0E21                     	;# 
   394  0E22                     	;# 
   395  0E24                     	;# 
   396  0E25                     	;# 
   397  0E28                     	;# 
   398  0E29                     	;# 
   399  0E2A                     	;# 
   400  0E2B                     	;# 
   401  0E2C                     	;# 
   402  0E2D                     	;# 
   403  0E2E                     	;# 
   404  0E2F                     	;# 
   405  0E90                     	;# 
   406  0E91                     	;# 
   407  0E92                     	;# 
   408  0E94                     	;# 
   409  0E95                     	;# 
   410  0EA0                     	;# 
   411  0EA1                     	;# 
   412  0EA2                     	;# 
   413  0EA3                     	;# 
   414  0EA4                     	;# 
   415  0EA5                     	;# 
   416  0F0F                     	;# 
   417  0F10                     	;# 
   418  0F11                     	;# 
   419  0F12                     	;# 
   420  0F13                     	;# 
   421  0F14                     	;# 
   422  0F15                     	;# 
   423  0F16                     	;# 
   424  0F17                     	;# 
   425  0F18                     	;# 
   426  0F19                     	;# 
   427  0F1A                     	;# 
   428  0F1B                     	;# 
   429  0F1C                     	;# 
   430  0F1D                     	;# 
   431  0F1E                     	;# 
   432  0F1F                     	;# 
   433  0F20                     	;# 
   434  0F21                     	;# 
   435  0F22                     	;# 
   436  0F23                     	;# 
   437  0F24                     	;# 
   438  0F25                     	;# 
   439  0F26                     	;# 
   440  0F27                     	;# 
   441  0F28                     	;# 
   442  0F29                     	;# 
   443  0F2A                     	;# 
   444  0F2B                     	;# 
   445  0F2C                     	;# 
   446  0F2D                     	;# 
   447  0F2E                     	;# 
   448  0F2F                     	;# 
   449  0F30                     	;# 
   450  0F31                     	;# 
   451  0F32                     	;# 
   452  0F33                     	;# 
   453  0F34                     	;# 
   454  0F35                     	;# 
   455  0F36                     	;# 
   456  0F37                     	;# 
   457  0FE4                     	;# 
   458  0FE5                     	;# 
   459  0FE6                     	;# 
   460  0FE7                     	;# 
   461  0FE8                     	;# 
   462  0FE9                     	;# 
   463  0FEA                     	;# 
   464  0FEB                     	;# 
   465  0FED                     	;# 
   466  0FEE                     	;# 
   467  0FEF                     	;# 
   468  0000                     	;# 
   469  0001                     	;# 
   470  0002                     	;# 
   471  0003                     	;# 
   472  0004                     	;# 
   473  0005                     	;# 
   474  0006                     	;# 
   475  0007                     	;# 
   476  0008                     	;# 
   477  0009                     	;# 
   478  000A                     	;# 
   479  000B                     	;# 
   480  000C                     	;# 
   481  000E                     	;# 
   482  0010                     	;# 
   483  0011                     	;# 
   484  0012                     	;# 
   485  0013                     	;# 
   486  0014                     	;# 
   487  0015                     	;# 
   488  0015                     	;# 
   489  0016                     	;# 
   490  0016                     	;# 
   491  0017                     	;# 
   492  0018                     	;# 
   493  0019                     	;# 
   494  0019                     	;# 
   495  001A                     	;# 
   496  001B                     	;# 
   497  001C                     	;# 
   498  001D                     	;# 
   499  001E                     	;# 
   500  001F                     	;# 
   501  008C                     	;# 
   502  008E                     	;# 
   503  0090                     	;# 
   504  0091                     	;# 
   505  0092                     	;# 
   506  0093                     	;# 
   507  0094                     	;# 
   508  0097                     	;# 
   509  009B                     	;# 
   510  009B                     	;# 
   511  009C                     	;# 
   512  009D                     	;# 
   513  009E                     	;# 
   514  009F                     	;# 
   515  010C                     	;# 
   516  010E                     	;# 
   517  0111                     	;# 
   518  0112                     	;# 
   519  0113                     	;# 
   520  0114                     	;# 
   521  0115                     	;# 
   522  0116                     	;# 
   523  0117                     	;# 
   524  0118                     	;# 
   525  0119                     	;# 
   526  018C                     	;# 
   527  018E                     	;# 
   528  0199                     	;# 
   529  0199                     	;# 
   530  0199                     	;# 
   531  019A                     	;# 
   532  019A                     	;# 
   533  019A                     	;# 
   534  019B                     	;# 
   535  019B                     	;# 
   536  019B                     	;# 
   537  019B                     	;# 
   538  019B                     	;# 
   539  019C                     	;# 
   540  019C                     	;# 
   541  019C                     	;# 
   542  019D                     	;# 
   543  019D                     	;# 
   544  019D                     	;# 
   545  019E                     	;# 
   546  019E                     	;# 
   547  019E                     	;# 
   548  019F                     	;# 
   549  019F                     	;# 
   550  019F                     	;# 
   551  019F                     	;# 
   552  019F                     	;# 
   553  020C                     	;# 
   554  020E                     	;# 
   555  0211                     	;# 
   556  0211                     	;# 
   557  0212                     	;# 
   558  0212                     	;# 
   559  0213                     	;# 
   560  0213                     	;# 
   561  0214                     	;# 
   562  0214                     	;# 
   563  0215                     	;# 
   564  0215                     	;# 
   565  0215                     	;# 
   566  0215                     	;# 
   567  0216                     	;# 
   568  0216                     	;# 
   569  0217                     	;# 
   570  0217                     	;# 
   571  0219                     	;# 
   572  021A                     	;# 
   573  021B                     	;# 
   574  021C                     	;# 
   575  021D                     	;# 
   576  021D                     	;# 
   577  021E                     	;# 
   578  021F                     	;# 
   579  028C                     	;# 
   580  028E                     	;# 
   581  0291                     	;# 
   582  0291                     	;# 
   583  0292                     	;# 
   584  0293                     	;# 
   585  0294                     	;# 
   586  0295                     	;# 
   587  0295                     	;# 
   588  0296                     	;# 
   589  0297                     	;# 
   590  0298                     	;# 
   591  029F                     	;# 
   592  030C                     	;# 
   593  030E                     	;# 
   594  0311                     	;# 
   595  0311                     	;# 
   596  0312                     	;# 
   597  0313                     	;# 
   598  0314                     	;# 
   599  0315                     	;# 
   600  0315                     	;# 
   601  0316                     	;# 
   602  0317                     	;# 
   603  0318                     	;# 
   604  038C                     	;# 
   605  038E                     	;# 
   606  0391                     	;# 
   607  0392                     	;# 
   608  0393                     	;# 
   609  0397                     	;# 
   610  0398                     	;# 
   611  0399                     	;# 
   612  039A                     	;# 
   613  039C                     	;# 
   614  039D                     	;# 
   615  039E                     	;# 
   616  039F                     	;# 
   617  0411                     	;# 
   618  0411                     	;# 
   619  0412                     	;# 
   620  0413                     	;# 
   621  0414                     	;# 
   622  0415                     	;# 
   623  0416                     	;# 
   624  0417                     	;# 
   625  0418                     	;# 
   626  0418                     	;# 
   627  0419                     	;# 
   628  041A                     	;# 
   629  041B                     	;# 
   630  041C                     	;# 
   631  041D                     	;# 
   632  041E                     	;# 
   633  041F                     	;# 
   634  0498                     	;# 
   635  0498                     	;# 
   636  0499                     	;# 
   637  049A                     	;# 
   638  049B                     	;# 
   639  049B                     	;# 
   640  049C                     	;# 
   641  049D                     	;# 
   642  049E                     	;# 
   643  049F                     	;# 
   644  0617                     	;# 
   645  0618                     	;# 
   646  0619                     	;# 
   647  0619                     	;# 
   648  061A                     	;# 
   649  061B                     	;# 
   650  061C                     	;# 
   651  061C                     	;# 
   652  061F                     	;# 
   653  0691                     	;# 
   654  0692                     	;# 
   655  0693                     	;# 
   656  0694                     	;# 
   657  0695                     	;# 
   658  0696                     	;# 
   659  0697                     	;# 
   660  0698                     	;# 
   661  0699                     	;# 
   662  0711                     	;# 
   663  0712                     	;# 
   664  0713                     	;# 
   665  0714                     	;# 
   666  0715                     	;# 
   667  0716                     	;# 
   668  0717                     	;# 
   669  0718                     	;# 
   670  0719                     	;# 
   671  0891                     	;# 
   672  0891                     	;# 
   673  0891                     	;# 
   674  0891                     	;# 
   675  0891                     	;# 
   676  0891                     	;# 
   677  0892                     	;# 
   678  0892                     	;# 
   679  0892                     	;# 
   680  0893                     	;# 
   681  0893                     	;# 
   682  0893                     	;# 
   683  0893                     	;# 
   684  0893                     	;# 
   685  0893                     	;# 
   686  0894                     	;# 
   687  0894                     	;# 
   688  0894                     	;# 
   689  0895                     	;# 
   690  0895                     	;# 
   691  0895                     	;# 
   692  0896                     	;# 
   693  0896                     	;# 
   694  0896                     	;# 
   695  089B                     	;# 
   696  0911                     	;# 
   697  0912                     	;# 
   698  0913                     	;# 
   699  0914                     	;# 
   700  0915                     	;# 
   701  0916                     	;# 
   702  0918                     	;# 
   703  0919                     	;# 
   704  091A                     	;# 
   705  091B                     	;# 
   706  091C                     	;# 
   707  091D                     	;# 
   708  091E                     	;# 
   709  091F                     	;# 
   710  0E0F                     	;# 
   711  0E10                     	;# 
   712  0E11                     	;# 
   713  0E12                     	;# 
   714  0E13                     	;# 
   715  0E14                     	;# 
   716  0E15                     	;# 
   717  0E16                     	;# 
   718  0E17                     	;# 
   719  0E18                     	;# 
   720  0E19                     	;# 
   721  0E1A                     	;# 
   722  0E1B                     	;# 
   723  0E1C                     	;# 
   724  0E1D                     	;# 
   725  0E1E                     	;# 
   726  0E1F                     	;# 
   727  0E20                     	;# 
   728  0E21                     	;# 
   729  0E22                     	;# 
   730  0E24                     	;# 
   731  0E25                     	;# 
   732  0E28                     	;# 
   733  0E29                     	;# 
   734  0E2A                     	;# 
   735  0E2B                     	;# 
   736  0E2C                     	;# 
   737  0E2D                     	;# 
   738  0E2E                     	;# 
   739  0E2F                     	;# 
   740  0E90                     	;# 
   741  0E91                     	;# 
   742  0E92                     	;# 
   743  0E94                     	;# 
   744  0E95                     	;# 
   745  0EA0                     	;# 
   746  0EA1                     	;# 
   747  0EA2                     	;# 
   748  0EA3                     	;# 
   749  0EA4                     	;# 
   750  0EA5                     	;# 
   751  0F0F                     	;# 
   752  0F10                     	;# 
   753  0F11                     	;# 
   754  0F12                     	;# 
   755  0F13                     	;# 
   756  0F14                     	;# 
   757  0F15                     	;# 
   758  0F16                     	;# 
   759  0F17                     	;# 
   760  0F18                     	;# 
   761  0F19                     	;# 
   762  0F1A                     	;# 
   763  0F1B                     	;# 
   764  0F1C                     	;# 
   765  0F1D                     	;# 
   766  0F1E                     	;# 
   767  0F1F                     	;# 
   768  0F20                     	;# 
   769  0F21                     	;# 
   770  0F22                     	;# 
   771  0F23                     	;# 
   772  0F24                     	;# 
   773  0F25                     	;# 
   774  0F26                     	;# 
   775  0F27                     	;# 
   776  0F28                     	;# 
   777  0F29                     	;# 
   778  0F2A                     	;# 
   779  0F2B                     	;# 
   780  0F2C                     	;# 
   781  0F2D                     	;# 
   782  0F2E                     	;# 
   783  0F2F                     	;# 
   784  0F30                     	;# 
   785  0F31                     	;# 
   786  0F32                     	;# 
   787  0F33                     	;# 
   788  0F34                     	;# 
   789  0F35                     	;# 
   790  0F36                     	;# 
   791  0F37                     	;# 
   792  0FE4                     	;# 
   793  0FE5                     	;# 
   794  0FE6                     	;# 
   795  0FE7                     	;# 
   796  0FE8                     	;# 
   797  0FE9                     	;# 
   798  0FEA                     	;# 
   799  0FEB                     	;# 
   800  0FED                     	;# 
   801  0FEE                     	;# 
   802  0FEF                     	;# 
   803  0000                     	;# 
   804  0001                     	;# 
   805  0002                     	;# 
   806  0003                     	;# 
   807  0004                     	;# 
   808  0005                     	;# 
   809  0006                     	;# 
   810  0007                     	;# 
   811  0008                     	;# 
   812  0009                     	;# 
   813  000A                     	;# 
   814  000B                     	;# 
   815  000C                     	;# 
   816  000E                     	;# 
   817  0010                     	;# 
   818  0011                     	;# 
   819  0012                     	;# 
   820  0013                     	;# 
   821  0014                     	;# 
   822  0015                     	;# 
   823  0015                     	;# 
   824  0016                     	;# 
   825  0016                     	;# 
   826  0017                     	;# 
   827  0018                     	;# 
   828  0019                     	;# 
   829  0019                     	;# 
   830  001A                     	;# 
   831  001B                     	;# 
   832  001C                     	;# 
   833  001D                     	;# 
   834  001E                     	;# 
   835  001F                     	;# 
   836  008C                     	;# 
   837  008E                     	;# 
   838  0090                     	;# 
   839  0091                     	;# 
   840  0092                     	;# 
   841  0093                     	;# 
   842  0094                     	;# 
   843  0097                     	;# 
   844  009B                     	;# 
   845  009B                     	;# 
   846  009C                     	;# 
   847  009D                     	;# 
   848  009E                     	;# 
   849  009F                     	;# 
   850  010C                     	;# 
   851  010E                     	;# 
   852  0111                     	;# 
   853  0112                     	;# 
   854  0113                     	;# 
   855  0114                     	;# 
   856  0115                     	;# 
   857  0116                     	;# 
   858  0117                     	;# 
   859  0118                     	;# 
   860  0119                     	;# 
   861  018C                     	;# 
   862  018E                     	;# 
   863  0199                     	;# 
   864  0199                     	;# 
   865  0199                     	;# 
   866  019A                     	;# 
   867  019A                     	;# 
   868  019A                     	;# 
   869  019B                     	;# 
   870  019B                     	;# 
   871  019B                     	;# 
   872  019B                     	;# 
   873  019B                     	;# 
   874  019C                     	;# 
   875  019C                     	;# 
   876  019C                     	;# 
   877  019D                     	;# 
   878  019D                     	;# 
   879  019D                     	;# 
   880  019E                     	;# 
   881  019E                     	;# 
   882  019E                     	;# 
   883  019F                     	;# 
   884  019F                     	;# 
   885  019F                     	;# 
   886  019F                     	;# 
   887  019F                     	;# 
   888  020C                     	;# 
   889  020E                     	;# 
   890  0211                     	;# 
   891  0211                     	;# 
   892  0212                     	;# 
   893  0212                     	;# 
   894  0213                     	;# 
   895  0213                     	;# 
   896  0214                     	;# 
   897  0214                     	;# 
   898  0215                     	;# 
   899  0215                     	;# 
   900  0215                     	;# 
   901  0215                     	;# 
   902  0216                     	;# 
   903  0216                     	;# 
   904  0217                     	;# 
   905  0217                     	;# 
   906  0219                     	;# 
   907  021A                     	;# 
   908  021B                     	;# 
   909  021C                     	;# 
   910  021D                     	;# 
   911  021D                     	;# 
   912  021E                     	;# 
   913  021F                     	;# 
   914  028C                     	;# 
   915  028E                     	;# 
   916  0291                     	;# 
   917  0291                     	;# 
   918  0292                     	;# 
   919  0293                     	;# 
   920  0294                     	;# 
   921  0295                     	;# 
   922  0295                     	;# 
   923  0296                     	;# 
   924  0297                     	;# 
   925  0298                     	;# 
   926  029F                     	;# 
   927  030C                     	;# 
   928  030E                     	;# 
   929  0311                     	;# 
   930  0311                     	;# 
   931  0312                     	;# 
   932  0313                     	;# 
   933  0314                     	;# 
   934  0315                     	;# 
   935  0315                     	;# 
   936  0316                     	;# 
   937  0317                     	;# 
   938  0318                     	;# 
   939  038C                     	;# 
   940  038E                     	;# 
   941  0391                     	;# 
   942  0392                     	;# 
   943  0393                     	;# 
   944  0397                     	;# 
   945  0398                     	;# 
   946  0399                     	;# 
   947  039A                     	;# 
   948  039C                     	;# 
   949  039D                     	;# 
   950  039E                     	;# 
   951  039F                     	;# 
   952  0411                     	;# 
   953  0411                     	;# 
   954  0412                     	;# 
   955  0413                     	;# 
   956  0414                     	;# 
   957  0415                     	;# 
   958  0416                     	;# 
   959  0417                     	;# 
   960  0418                     	;# 
   961  0418                     	;# 
   962  0419                     	;# 
   963  041A                     	;# 
   964  041B                     	;# 
   965  041C                     	;# 
   966  041D                     	;# 
   967  041E                     	;# 
   968  041F                     	;# 
   969  0498                     	;# 
   970  0498                     	;# 
   971  0499                     	;# 
   972  049A                     	;# 
   973  049B                     	;# 
   974  049B                     	;# 
   975  049C                     	;# 
   976  049D                     	;# 
   977  049E                     	;# 
   978  049F                     	;# 
   979  0617                     	;# 
   980  0618                     	;# 
   981  0619                     	;# 
   982  0619                     	;# 
   983  061A                     	;# 
   984  061B                     	;# 
   985  061C                     	;# 
   986  061C                     	;# 
   987  061F                     	;# 
   988  0691                     	;# 
   989  0692                     	;# 
   990  0693                     	;# 
   991  0694                     	;# 
   992  0695                     	;# 
   993  0696                     	;# 
   994  0697                     	;# 
   995  0698                     	;# 
   996  0699                     	;# 
   997  0711                     	;# 
   998  0712                     	;# 
   999  0713                     	;# 
  1000  0714                     	;# 
  1001  0715                     	;# 
  1002  0716                     	;# 
  1003  0717                     	;# 
  1004  0718                     	;# 
  1005  0719                     	;# 
  1006  0891                     	;# 
  1007  0891                     	;# 
  1008  0891                     	;# 
  1009  0891                     	;# 
  1010  0891                     	;# 
  1011  0891                     	;# 
  1012  0892                     	;# 
  1013  0892                     	;# 
  1014  0892                     	;# 
  1015  0893                     	;# 
  1016  0893                     	;# 
  1017  0893                     	;# 
  1018  0893                     	;# 
  1019  0893                     	;# 
  1020  0893                     	;# 
  1021  0894                     	;# 
  1022  0894                     	;# 
  1023  0894                     	;# 
  1024  0895                     	;# 
  1025  0895                     	;# 
  1026  0895                     	;# 
  1027  0896                     	;# 
  1028  0896                     	;# 
  1029  0896                     	;# 
  1030  089B                     	;# 
  1031  0911                     	;# 
  1032  0912                     	;# 
  1033  0913                     	;# 
  1034  0914                     	;# 
  1035  0915                     	;# 
  1036  0916                     	;# 
  1037  0918                     	;# 
  1038  0919                     	;# 
  1039  091A                     	;# 
  1040  091B                     	;# 
  1041  091C                     	;# 
  1042  091D                     	;# 
  1043  091E                     	;# 
  1044  091F                     	;# 
  1045  0E0F                     	;# 
  1046  0E10                     	;# 
  1047  0E11                     	;# 
  1048  0E12                     	;# 
  1049  0E13                     	;# 
  1050  0E14                     	;# 
  1051  0E15                     	;# 
  1052  0E16                     	;# 
  1053  0E17                     	;# 
  1054  0E18                     	;# 
  1055  0E19                     	;# 
  1056  0E1A                     	;# 
  1057  0E1B                     	;# 
  1058  0E1C                     	;# 
  1059  0E1D                     	;# 
  1060  0E1E                     	;# 
  1061  0E1F                     	;# 
  1062  0E20                     	;# 
  1063  0E21                     	;# 
  1064  0E22                     	;# 
  1065  0E24                     	;# 
  1066  0E25                     	;# 
  1067  0E28                     	;# 
  1068  0E29                     	;# 
  1069  0E2A                     	;# 
  1070  0E2B                     	;# 
  1071  0E2C                     	;# 
  1072  0E2D                     	;# 
  1073  0E2E                     	;# 
  1074  0E2F                     	;# 
  1075  0E90                     	;# 
  1076  0E91                     	;# 
  1077  0E92                     	;# 
  1078  0E94                     	;# 
  1079  0E95                     	;# 
  1080  0EA0                     	;# 
  1081  0EA1                     	;# 
  1082  0EA2                     	;# 
  1083  0EA3                     	;# 
  1084  0EA4                     	;# 
  1085  0EA5                     	;# 
  1086  0F0F                     	;# 
  1087  0F10                     	;# 
  1088  0F11                     	;# 
  1089  0F12                     	;# 
  1090  0F13                     	;# 
  1091  0F14                     	;# 
  1092  0F15                     	;# 
  1093  0F16                     	;# 
  1094  0F17                     	;# 
  1095  0F18                     	;# 
  1096  0F19                     	;# 
  1097  0F1A                     	;# 
  1098  0F1B                     	;# 
  1099  0F1C                     	;# 
  1100  0F1D                     	;# 
  1101  0F1E                     	;# 
  1102  0F1F                     	;# 
  1103  0F20                     	;# 
  1104  0F21                     	;# 
  1105  0F22                     	;# 
  1106  0F23                     	;# 
  1107  0F24                     	;# 
  1108  0F25                     	;# 
  1109  0F26                     	;# 
  1110  0F27                     	;# 
  1111  0F28                     	;# 
  1112  0F29                     	;# 
  1113  0F2A                     	;# 
  1114  0F2B                     	;# 
  1115  0F2C                     	;# 
  1116  0F2D                     	;# 
  1117  0F2E                     	;# 
  1118  0F2F                     	;# 
  1119  0F30                     	;# 
  1120  0F31                     	;# 
  1121  0F32                     	;# 
  1122  0F33                     	;# 
  1123  0F34                     	;# 
  1124  0F35                     	;# 
  1125  0F36                     	;# 
  1126  0F37                     	;# 
  1127  0FE4                     	;# 
  1128  0FE5                     	;# 
  1129  0FE6                     	;# 
  1130  0FE7                     	;# 
  1131  0FE8                     	;# 
  1132  0FE9                     	;# 
  1133  0FEA                     	;# 
  1134  0FEB                     	;# 
  1135  0FED                     	;# 
  1136  0FEE                     	;# 
  1137  0FEF                     	;# 
  1138  0000                     	;# 
  1139  0001                     	;# 
  1140  0002                     	;# 
  1141  0003                     	;# 
  1142  0004                     	;# 
  1143  0005                     	;# 
  1144  0006                     	;# 
  1145  0007                     	;# 
  1146  0008                     	;# 
  1147  0009                     	;# 
  1148  000A                     	;# 
  1149  000B                     	;# 
  1150  000C                     	;# 
  1151  000E                     	;# 
  1152  0010                     	;# 
  1153  0011                     	;# 
  1154  0012                     	;# 
  1155  0013                     	;# 
  1156  0014                     	;# 
  1157  0015                     	;# 
  1158  0015                     	;# 
  1159  0016                     	;# 
  1160  0016                     	;# 
  1161  0017                     	;# 
  1162  0018                     	;# 
  1163  0019                     	;# 
  1164  0019                     	;# 
  1165  001A                     	;# 
  1166  001B                     	;# 
  1167  001C                     	;# 
  1168  001D                     	;# 
  1169  001E                     	;# 
  1170  001F                     	;# 
  1171  008C                     	;# 
  1172  008E                     	;# 
  1173  0090                     	;# 
  1174  0091                     	;# 
  1175  0092                     	;# 
  1176  0093                     	;# 
  1177  0094                     	;# 
  1178  0097                     	;# 
  1179  009B                     	;# 
  1180  009B                     	;# 
  1181  009C                     	;# 
  1182  009D                     	;# 
  1183  009E                     	;# 
  1184  009F                     	;# 
  1185  010C                     	;# 
  1186  010E                     	;# 
  1187  0111                     	;# 
  1188  0112                     	;# 
  1189  0113                     	;# 
  1190  0114                     	;# 
  1191  0115                     	;# 
  1192  0116                     	;# 
  1193  0117                     	;# 
  1194  0118                     	;# 
  1195  0119                     	;# 
  1196  018C                     	;# 
  1197  018E                     	;# 
  1198  0199                     	;# 
  1199  0199                     	;# 
  1200  0199                     	;# 
  1201  019A                     	;# 
  1202  019A                     	;# 
  1203  019A                     	;# 
  1204  019B                     	;# 
  1205  019B                     	;# 
  1206  019B                     	;# 
  1207  019B                     	;# 
  1208  019B                     	;# 
  1209  019C                     	;# 
  1210  019C                     	;# 
  1211  019C                     	;# 
  1212  019D                     	;# 
  1213  019D                     	;# 
  1214  019D                     	;# 
  1215  019E                     	;# 
  1216  019E                     	;# 
  1217  019E                     	;# 
  1218  019F                     	;# 
  1219  019F                     	;# 
  1220  019F                     	;# 
  1221  019F                     	;# 
  1222  019F                     	;# 
  1223  020C                     	;# 
  1224  020E                     	;# 
  1225  0211                     	;# 
  1226  0211                     	;# 
  1227  0212                     	;# 
  1228  0212                     	;# 
  1229  0213                     	;# 
  1230  0213                     	;# 
  1231  0214                     	;# 
  1232  0214                     	;# 
  1233  0215                     	;# 
  1234  0215                     	;# 
  1235  0215                     	;# 
  1236  0215                     	;# 
  1237  0216                     	;# 
  1238  0216                     	;# 
  1239  0217                     	;# 
  1240  0217                     	;# 
  1241  0219                     	;# 
  1242  021A                     	;# 
  1243  021B                     	;# 
  1244  021C                     	;# 
  1245  021D                     	;# 
  1246  021D                     	;# 
  1247  021E                     	;# 
  1248  021F                     	;# 
  1249  028C                     	;# 
  1250  028E                     	;# 
  1251  0291                     	;# 
  1252  0291                     	;# 
  1253  0292                     	;# 
  1254  0293                     	;# 
  1255  0294                     	;# 
  1256  0295                     	;# 
  1257  0295                     	;# 
  1258  0296                     	;# 
  1259  0297                     	;# 
  1260  0298                     	;# 
  1261  029F                     	;# 
  1262  030C                     	;# 
  1263  030E                     	;# 
  1264  0311                     	;# 
  1265  0311                     	;# 
  1266  0312                     	;# 
  1267  0313                     	;# 
  1268  0314                     	;# 
  1269  0315                     	;# 
  1270  0315                     	;# 
  1271  0316                     	;# 
  1272  0317                     	;# 
  1273  0318                     	;# 
  1274  038C                     	;# 
  1275  038E                     	;# 
  1276  0391                     	;# 
  1277  0392                     	;# 
  1278  0393                     	;# 
  1279  0397                     	;# 
  1280  0398                     	;# 
  1281  0399                     	;# 
  1282  039A                     	;# 
  1283  039C                     	;# 
  1284  039D                     	;# 
  1285  039E                     	;# 
  1286  039F                     	;# 
  1287  0411                     	;# 
  1288  0411                     	;# 
  1289  0412                     	;# 
  1290  0413                     	;# 
  1291  0414                     	;# 
  1292  0415                     	;# 
  1293  0416                     	;# 
  1294  0417                     	;# 
  1295  0418                     	;# 
  1296  0418                     	;# 
  1297  0419                     	;# 
  1298  041A                     	;# 
  1299  041B                     	;# 
  1300  041C                     	;# 
  1301  041D                     	;# 
  1302  041E                     	;# 
  1303  041F                     	;# 
  1304  0498                     	;# 
  1305  0498                     	;# 
  1306  0499                     	;# 
  1307  049A                     	;# 
  1308  049B                     	;# 
  1309  049B                     	;# 
  1310  049C                     	;# 
  1311  049D                     	;# 
  1312  049E                     	;# 
  1313  049F                     	;# 
  1314  0617                     	;# 
  1315  0618                     	;# 
  1316  0619                     	;# 
  1317  0619                     	;# 
  1318  061A                     	;# 
  1319  061B                     	;# 
  1320  061C                     	;# 
  1321  061C                     	;# 
  1322  061F                     	;# 
  1323  0691                     	;# 
  1324  0692                     	;# 
  1325  0693                     	;# 
  1326  0694                     	;# 
  1327  0695                     	;# 
  1328  0696                     	;# 
  1329  0697                     	;# 
  1330  0698                     	;# 
  1331  0699                     	;# 
  1332  0711                     	;# 
  1333  0712                     	;# 
  1334  0713                     	;# 
  1335  0714                     	;# 
  1336  0715                     	;# 
  1337  0716                     	;# 
  1338  0717                     	;# 
  1339  0718                     	;# 
  1340  0719                     	;# 
  1341  0891                     	;# 
  1342  0891                     	;# 
  1343  0891                     	;# 
  1344  0891                     	;# 
  1345  0891                     	;# 
  1346  0891                     	;# 
  1347  0892                     	;# 
  1348  0892                     	;# 
  1349  0892                     	;# 
  1350  0893                     	;# 
  1351  0893                     	;# 
  1352  0893                     	;# 
  1353  0893                     	;# 
  1354  0893                     	;# 
  1355  0893                     	;# 
  1356  0894                     	;# 
  1357  0894                     	;# 
  1358  0894                     	;# 
  1359  0895                     	;# 
  1360  0895                     	;# 
  1361  0895                     	;# 
  1362  0896                     	;# 
  1363  0896                     	;# 
  1364  0896                     	;# 
  1365  089B                     	;# 
  1366  0911                     	;# 
  1367  0912                     	;# 
  1368  0913                     	;# 
  1369  0914                     	;# 
  1370  0915                     	;# 
  1371  0916                     	;# 
  1372  0918                     	;# 
  1373  0919                     	;# 
  1374  091A                     	;# 
  1375  091B                     	;# 
  1376  091C                     	;# 
  1377  091D                     	;# 
  1378  091E                     	;# 
  1379  091F                     	;# 
  1380  0E0F                     	;# 
  1381  0E10                     	;# 
  1382  0E11                     	;# 
  1383  0E12                     	;# 
  1384  0E13                     	;# 
  1385  0E14                     	;# 
  1386  0E15                     	;# 
  1387  0E16                     	;# 
  1388  0E17                     	;# 
  1389  0E18                     	;# 
  1390  0E19                     	;# 
  1391  0E1A                     	;# 
  1392  0E1B                     	;# 
  1393  0E1C                     	;# 
  1394  0E1D                     	;# 
  1395  0E1E                     	;# 
  1396  0E1F                     	;# 
  1397  0E20                     	;# 
  1398  0E21                     	;# 
  1399  0E22                     	;# 
  1400  0E24                     	;# 
  1401  0E25                     	;# 
  1402  0E28                     	;# 
  1403  0E29                     	;# 
  1404  0E2A                     	;# 
  1405  0E2B                     	;# 
  1406  0E2C                     	;# 
  1407  0E2D                     	;# 
  1408  0E2E                     	;# 
  1409  0E2F                     	;# 
  1410  0E90                     	;# 
  1411  0E91                     	;# 
  1412  0E92                     	;# 
  1413  0E94                     	;# 
  1414  0E95                     	;# 
  1415  0EA0                     	;# 
  1416  0EA1                     	;# 
  1417  0EA2                     	;# 
  1418  0EA3                     	;# 
  1419  0EA4                     	;# 
  1420  0EA5                     	;# 
  1421  0F0F                     	;# 
  1422  0F10                     	;# 
  1423  0F11                     	;# 
  1424  0F12                     	;# 
  1425  0F13                     	;# 
  1426  0F14                     	;# 
  1427  0F15                     	;# 
  1428  0F16                     	;# 
  1429  0F17                     	;# 
  1430  0F18                     	;# 
  1431  0F19                     	;# 
  1432  0F1A                     	;# 
  1433  0F1B                     	;# 
  1434  0F1C                     	;# 
  1435  0F1D                     	;# 
  1436  0F1E                     	;# 
  1437  0F1F                     	;# 
  1438  0F20                     	;# 
  1439  0F21                     	;# 
  1440  0F22                     	;# 
  1441  0F23                     	;# 
  1442  0F24                     	;# 
  1443  0F25                     	;# 
  1444  0F26                     	;# 
  1445  0F27                     	;# 
  1446  0F28                     	;# 
  1447  0F29                     	;# 
  1448  0F2A                     	;# 
  1449  0F2B                     	;# 
  1450  0F2C                     	;# 
  1451  0F2D                     	;# 
  1452  0F2E                     	;# 
  1453  0F2F                     	;# 
  1454  0F30                     	;# 
  1455  0F31                     	;# 
  1456  0F32                     	;# 
  1457  0F33                     	;# 
  1458  0F34                     	;# 
  1459  0F35                     	;# 
  1460  0F36                     	;# 
  1461  0F37                     	;# 
  1462  0FE4                     	;# 
  1463  0FE5                     	;# 
  1464  0FE6                     	;# 
  1465  0FE7                     	;# 
  1466  0FE8                     	;# 
  1467  0FE9                     	;# 
  1468  0FEA                     	;# 
  1469  0FEB                     	;# 
  1470  0FED                     	;# 
  1471  0FEE                     	;# 
  1472  0FEF                     	;# 
  1473  0000                     	;# 
  1474  0001                     	;# 
  1475  0002                     	;# 
  1476  0003                     	;# 
  1477  0004                     	;# 
  1478  0005                     	;# 
  1479  0006                     	;# 
  1480  0007                     	;# 
  1481  0008                     	;# 
  1482  0009                     	;# 
  1483  000A                     	;# 
  1484  000B                     	;# 
  1485  000C                     	;# 
  1486  000E                     	;# 
  1487  0010                     	;# 
  1488  0011                     	;# 
  1489  0012                     	;# 
  1490  0013                     	;# 
  1491  0014                     	;# 
  1492  0015                     	;# 
  1493  0015                     	;# 
  1494  0016                     	;# 
  1495  0016                     	;# 
  1496  0017                     	;# 
  1497  0018                     	;# 
  1498  0019                     	;# 
  1499  0019                     	;# 
  1500  001A                     	;# 
  1501  001B                     	;# 
  1502  001C                     	;# 
  1503  001D                     	;# 
  1504  001E                     	;# 
  1505  001F                     	;# 
  1506  008C                     	;# 
  1507  008E                     	;# 
  1508  0090                     	;# 
  1509  0091                     	;# 
  1510  0092                     	;# 
  1511  0093                     	;# 
  1512  0094                     	;# 
  1513  0097                     	;# 
  1514  009B                     	;# 
  1515  009B                     	;# 
  1516  009C                     	;# 
  1517  009D                     	;# 
  1518  009E                     	;# 
  1519  009F                     	;# 
  1520  010C                     	;# 
  1521  010E                     	;# 
  1522  0111                     	;# 
  1523  0112                     	;# 
  1524  0113                     	;# 
  1525  0114                     	;# 
  1526  0115                     	;# 
  1527  0116                     	;# 
  1528  0117                     	;# 
  1529  0118                     	;# 
  1530  0119                     	;# 
  1531  018C                     	;# 
  1532  018E                     	;# 
  1533  0199                     	;# 
  1534  0199                     	;# 
  1535  0199                     	;# 
  1536  019A                     	;# 
  1537  019A                     	;# 
  1538  019A                     	;# 
  1539  019B                     	;# 
  1540  019B                     	;# 
  1541  019B                     	;# 
  1542  019B                     	;# 
  1543  019B                     	;# 
  1544  019C                     	;# 
  1545  019C                     	;# 
  1546  019C                     	;# 
  1547  019D                     	;# 
  1548  019D                     	;# 
  1549  019D                     	;# 
  1550  019E                     	;# 
  1551  019E                     	;# 
  1552  019E                     	;# 
  1553  019F                     	;# 
  1554  019F                     	;# 
  1555  019F                     	;# 
  1556  019F                     	;# 
  1557  019F                     	;# 
  1558  020C                     	;# 
  1559  020E                     	;# 
  1560  0211                     	;# 
  1561  0211                     	;# 
  1562  0212                     	;# 
  1563  0212                     	;# 
  1564  0213                     	;# 
  1565  0213                     	;# 
  1566  0214                     	;# 
  1567  0214                     	;# 
  1568  0215                     	;# 
  1569  0215                     	;# 
  1570  0215                     	;# 
  1571  0215                     	;# 
  1572  0216                     	;# 
  1573  0216                     	;# 
  1574  0217                     	;# 
  1575  0217                     	;# 
  1576  0219                     	;# 
  1577  021A                     	;# 
  1578  021B                     	;# 
  1579  021C                     	;# 
  1580  021D                     	;# 
  1581  021D                     	;# 
  1582  021E                     	;# 
  1583  021F                     	;# 
  1584  028C                     	;# 
  1585  028E                     	;# 
  1586  0291                     	;# 
  1587  0291                     	;# 
  1588  0292                     	;# 
  1589  0293                     	;# 
  1590  0294                     	;# 
  1591  0295                     	;# 
  1592  0295                     	;# 
  1593  0296                     	;# 
  1594  0297                     	;# 
  1595  0298                     	;# 
  1596  029F                     	;# 
  1597  030C                     	;# 
  1598  030E                     	;# 
  1599  0311                     	;# 
  1600  0311                     	;# 
  1601  0312                     	;# 
  1602  0313                     	;# 
  1603  0314                     	;# 
  1604  0315                     	;# 
  1605  0315                     	;# 
  1606  0316                     	;# 
  1607  0317                     	;# 
  1608  0318                     	;# 
  1609  038C                     	;# 
  1610  038E                     	;# 
  1611  0391                     	;# 
  1612  0392                     	;# 
  1613  0393                     	;# 
  1614  0397                     	;# 
  1615  0398                     	;# 
  1616  0399                     	;# 
  1617  039A                     	;# 
  1618  039C                     	;# 
  1619  039D                     	;# 
  1620  039E                     	;# 
  1621  039F                     	;# 
  1622  0411                     	;# 
  1623  0411                     	;# 
  1624  0412                     	;# 
  1625  0413                     	;# 
  1626  0414                     	;# 
  1627  0415                     	;# 
  1628  0416                     	;# 
  1629  0417                     	;# 
  1630  0418                     	;# 
  1631  0418                     	;# 
  1632  0419                     	;# 
  1633  041A                     	;# 
  1634  041B                     	;# 
  1635  041C                     	;# 
  1636  041D                     	;# 
  1637  041E                     	;# 
  1638  041F                     	;# 
  1639  0498                     	;# 
  1640  0498                     	;# 
  1641  0499                     	;# 
  1642  049A                     	;# 
  1643  049B                     	;# 
  1644  049B                     	;# 
  1645  049C                     	;# 
  1646  049D                     	;# 
  1647  049E                     	;# 
  1648  049F                     	;# 
  1649  0617                     	;# 
  1650  0618                     	;# 
  1651  0619                     	;# 
  1652  0619                     	;# 
  1653  061A                     	;# 
  1654  061B                     	;# 
  1655  061C                     	;# 
  1656  061C                     	;# 
  1657  061F                     	;# 
  1658  0691                     	;# 
  1659  0692                     	;# 
  1660  0693                     	;# 
  1661  0694                     	;# 
  1662  0695                     	;# 
  1663  0696                     	;# 
  1664  0697                     	;# 
  1665  0698                     	;# 
  1666  0699                     	;# 
  1667  0711                     	;# 
  1668  0712                     	;# 
  1669  0713                     	;# 
  1670  0714                     	;# 
  1671  0715                     	;# 
  1672  0716                     	;# 
  1673  0717                     	;# 
  1674  0718                     	;# 
  1675  0719                     	;# 
  1676  0891                     	;# 
  1677  0891                     	;# 
  1678  0891                     	;# 
  1679  0891                     	;# 
  1680  0891                     	;# 
  1681  0891                     	;# 
  1682  0892                     	;# 
  1683  0892                     	;# 
  1684  0892                     	;# 
  1685  0893                     	;# 
  1686  0893                     	;# 
  1687  0893                     	;# 
  1688  0893                     	;# 
  1689  0893                     	;# 
  1690  0893                     	;# 
  1691  0894                     	;# 
  1692  0894                     	;# 
  1693  0894                     	;# 
  1694  0895                     	;# 
  1695  0895                     	;# 
  1696  0895                     	;# 
  1697  0896                     	;# 
  1698  0896                     	;# 
  1699  0896                     	;# 
  1700  089B                     	;# 
  1701  0911                     	;# 
  1702  0912                     	;# 
  1703  0913                     	;# 
  1704  0914                     	;# 
  1705  0915                     	;# 
  1706  0916                     	;# 
  1707  0918                     	;# 
  1708  0919                     	;# 
  1709  091A                     	;# 
  1710  091B                     	;# 
  1711  091C                     	;# 
  1712  091D                     	;# 
  1713  091E                     	;# 
  1714  091F                     	;# 
  1715  0E0F                     	;# 
  1716  0E10                     	;# 
  1717  0E11                     	;# 
  1718  0E12                     	;# 
  1719  0E13                     	;# 
  1720  0E14                     	;# 
  1721  0E15                     	;# 
  1722  0E16                     	;# 
  1723  0E17                     	;# 
  1724  0E18                     	;# 
  1725  0E19                     	;# 
  1726  0E1A                     	;# 
  1727  0E1B                     	;# 
  1728  0E1C                     	;# 
  1729  0E1D                     	;# 
  1730  0E1E                     	;# 
  1731  0E1F                     	;# 
  1732  0E20                     	;# 
  1733  0E21                     	;# 
  1734  0E22                     	;# 
  1735  0E24                     	;# 
  1736  0E25                     	;# 
  1737  0E28                     	;# 
  1738  0E29                     	;# 
  1739  0E2A                     	;# 
  1740  0E2B                     	;# 
  1741  0E2C                     	;# 
  1742  0E2D                     	;# 
  1743  0E2E                     	;# 
  1744  0E2F                     	;# 
  1745  0E90                     	;# 
  1746  0E91                     	;# 
  1747  0E92                     	;# 
  1748  0E94                     	;# 
  1749  0E95                     	;# 
  1750  0EA0                     	;# 
  1751  0EA1                     	;# 
  1752  0EA2                     	;# 
  1753  0EA3                     	;# 
  1754  0EA4                     	;# 
  1755  0EA5                     	;# 
  1756  0F0F                     	;# 
  1757  0F10                     	;# 
  1758  0F11                     	;# 
  1759  0F12                     	;# 
  1760  0F13                     	;# 
  1761  0F14                     	;# 
  1762  0F15                     	;# 
  1763  0F16                     	;# 
  1764  0F17                     	;# 
  1765  0F18                     	;# 
  1766  0F19                     	;# 
  1767  0F1A                     	;# 
  1768  0F1B                     	;# 
  1769  0F1C                     	;# 
  1770  0F1D                     	;# 
  1771  0F1E                     	;# 
  1772  0F1F                     	;# 
  1773  0F20                     	;# 
  1774  0F21                     	;# 
  1775  0F22                     	;# 
  1776  0F23                     	;# 
  1777  0F24                     	;# 
  1778  0F25                     	;# 
  1779  0F26                     	;# 
  1780  0F27                     	;# 
  1781  0F28                     	;# 
  1782  0F29                     	;# 
  1783  0F2A                     	;# 
  1784  0F2B                     	;# 
  1785  0F2C                     	;# 
  1786  0F2D                     	;# 
  1787  0F2E                     	;# 
  1788  0F2F                     	;# 
  1789  0F30                     	;# 
  1790  0F31                     	;# 
  1791  0F32                     	;# 
  1792  0F33                     	;# 
  1793  0F34                     	;# 
  1794  0F35                     	;# 
  1795  0F36                     	;# 
  1796  0F37                     	;# 
  1797  0FE4                     	;# 
  1798  0FE5                     	;# 
  1799  0FE6                     	;# 
  1800  0FE7                     	;# 
  1801  0FE8                     	;# 
  1802  0FE9                     	;# 
  1803  0FEA                     	;# 
  1804  0FEB                     	;# 
  1805  0FED                     	;# 
  1806  0FEE                     	;# 
  1807  0FEF                     	;# 
  1808                           
  1809                           	psect	idataBANK3
  1810  1250                     __pidataBANK3:	
  1811                           
  1812                           ;initializer for _romData
  1813  1250  3441               	retlw	low (_romDataMap| (0+512))
  1814                           
  1815                           	psect	stringtext1
  1816  1800                     __pstringtext1:	
  1817  1800                     _dpowers:	
  1818  1800  3401               	retlw	1
  1819  1801  3400               	retlw	0
  1820  1802  3400               	retlw	0
  1821  1803  3400               	retlw	0
  1822  1804  340A               	retlw	10
  1823  1805  3400               	retlw	0
  1824  1806  3400               	retlw	0
  1825  1807  3400               	retlw	0
  1826  1808  3464               	retlw	100
  1827  1809  3400               	retlw	0
  1828  180A  3400               	retlw	0
  1829  180B  3400               	retlw	0
  1830  180C  34E8               	retlw	232
  1831  180D  3403               	retlw	3
  1832  180E  3400               	retlw	0
  1833  180F  3400               	retlw	0
  1834  1810  3410               	retlw	16
  1835  1811  3427               	retlw	39
  1836  1812  3400               	retlw	0
  1837  1813  3400               	retlw	0
  1838  1814  34A0               	retlw	160
  1839  1815  3486               	retlw	134
  1840  1816  3401               	retlw	1
  1841  1817  3400               	retlw	0
  1842  1818  3440               	retlw	64
  1843  1819  3442               	retlw	66
  1844  181A  340F               	retlw	15
  1845  181B  3400               	retlw	0
  1846  181C  3480               	retlw	128
  1847  181D  3496               	retlw	150
  1848  181E  3498               	retlw	152
  1849  181F  3400               	retlw	0
  1850  1820  3400               	retlw	0
  1851  1821  34E1               	retlw	225
  1852  1822  34F5               	retlw	245
  1853  1823  3405               	retlw	5
  1854  1824  3400               	retlw	0
  1855  1825  34CA               	retlw	202
  1856  1826  349A               	retlw	154
  1857  1827  343B               	retlw	59
  1858  1828                     __end_of_dpowers:	
  1859                           
  1860                           	psect	stringtext2
  1861  1841                     __pstringtext2:	
  1862  1841                     _n_ADDRESS_P0:	
  1863  1841  34AD               	retlw	173
  1864  1842  3487               	retlw	135
  1865  1843  3466               	retlw	102
  1866  1844  34BC               	retlw	188
  1867  1845  34BB               	retlw	187
  1868  1846                     __end_of_n_ADDRESS_P0:	
  1869                           
  1870                           	psect	stringtext3
  1871  1828                     __pstringtext3:	
  1872  1828                     _n_ADDRESS_MUL:	
  1873  1828  3421               	retlw	33
  1874  1829                     __end_of_n_ADDRESS_MUL:	
  1875  000B                     _INTCONbits	set	11
  1876  0003                     _STATUSbits	set	3
  1877  0010                     _PIR0bits	set	16
  1878  000E                     _PORTCbits	set	14
  1879  000C                     _PORTAbits	set	12
  1880  009E                     _ADCON1bits	set	158
  1881  009C                     _ADRESH	set	156
  1882  009B                     _ADRESL	set	155
  1883  009D                     _ADCON0bits	set	157
  1884  0097                     _WDTCONbits	set	151
  1885  0090                     _PIE0bits	set	144
  1886  008E                     _TRISCbits	set	142
  1887  008C                     _TRISAbits	set	140
  1888  0117                     _FVRCONbits	set	279
  1889  018E                     _ANSELCbits	set	398
  1890  018C                     _ANSELAbits	set	396
  1891  018E                     _ANSELC	set	398
  1892  018C                     _ANSELA	set	396
  1893  020C                     _WPUAbits	set	524
  1894  020E                     _WPUC	set	526
  1895  020C                     _WPUA	set	524
  1896  0211                     _SSP1BUF	set	529
  1897  0214                     _SSP1STATbits	set	532
  1898  0215                     _SSP1CON1bits	set	533
  1899  028C                     _ODCONAbits	set	652
  1900  028E                     _ODCONC	set	654
  1901  028C                     _ODCONA	set	652
  1902  038E                     _INLVLC	set	910
  1903  038C                     _INLVLA	set	908
  1904  0919                     _OSCCON1bits	set	2329
  1905  0EA0                     _RC0PPSbits	set	3744
  1906  0EA2                     _RC2PPSbits	set	3746
  1907  0EA1                     _RC1PPSbits	set	3745
  1908  1829                     STR_13:	
  1909  1829  3425               	retlw	37	;'%'
  1910  182A  346C               	retlw	108	;'l'
  1911  182B  3475               	retlw	117	;'u'
  1912  182C  342E               	retlw	46	;'.'
  1913  182D  3425               	retlw	37	;'%'
  1914  182E  3436               	retlw	54	;'6'
  1915  182F  342E               	retlw	46	;'.'
  1916  1830  3436               	retlw	54	;'6'
  1917  1831  346C               	retlw	108	;'l'
  1918  1832  3475               	retlw	117	;'u'
  1919  1833  3400               	retlw	0
  1920                           
  1921                           	psect	stringtext4
  1922  1834                     __pstringtext4:	
  1923  1834                     STR_9:	
  1924  1834  3441               	retlw	65	;'A'
  1925  1835  344E               	retlw	78	;'N'
  1926  1836  3443               	retlw	67	;'C'
  1927  1837  3433               	retlw	51	;'3'
  1928  1838  346D               	retlw	109	;'m'
  1929  1839  3456               	retlw	86	;'V'
  1930  183A  3400               	retlw	0
  1931                           
  1932                           	psect	stringtext5
  1933  183B                     __pstringtext5:	
  1934  183B                     STR_10:	
  1935  183B  3452               	retlw	82	;'R'
  1936  183C  3446               	retlw	70	;'F'
  1937  183D  3450               	retlw	80	;'P'
  1938  183E  3457               	retlw	87	;'W'
  1939  183F  3452               	retlw	82	;'R'
  1940  1840  3400               	retlw	0
  1941                           
  1942                           	psect	stringtext6
  1943  1846                     __pstringtext6:	
  1944  1846                     STR_7:	
  1945  1846  3454               	retlw	84	;'T'
  1946  1847  3445               	retlw	69	;'E'
  1947  1848  344D               	retlw	77	;'M'
  1948  1849  3450               	retlw	80	;'P'
  1949  184A  3400               	retlw	0
  1950                           
  1951                           	psect	stringtext7
  1952  184B                     __pstringtext7:	
  1953  184B                     STR_8:	
  1954  184B  3456               	retlw	86	;'V'
  1955  184C  3442               	retlw	66	;'B'
  1956  184D  3441               	retlw	65	;'A'
  1957  184E  3454               	retlw	84	;'T'
  1958  184F  3400               	retlw	0
  1959                           
  1960                           	psect	stringtext8
  1961  1850                     __pstringtext8:	
  1962  1850                     STR_12:	
  1963  1850  3442               	retlw	66	;'B'
  1964  1851  344F               	retlw	79	;'O'
  1965  1852  344F               	retlw	79	;'O'
  1966  1853  3454               	retlw	84	;'T'
  1967  1854  3400               	retlw	0
  1968                           
  1969                           	psect	stringtext9
  1970  1855                     __pstringtext9:	
  1971  1855                     STR_6:	
  1972  1855  3444               	retlw	68	;'D'
  1973  1856  3442               	retlw	66	;'B'
  1974  1857  3447               	retlw	71	;'G'
  1975  1858  3400               	retlw	0
  1976                           
  1977                           	psect	stringtext10
  1978  1859                     __pstringtext10:	
  1979  1859                     STR_11:	
  1980  1859  3455               	retlw	85	;'U'
  1981  185A  3457               	retlw	87	;'W'
  1982  185B  3454               	retlw	84	;'T'
  1983  185C  3400               	retlw	0
  1984                           
  1985                           	psect	stringtext11
  1986  185D                     __pstringtext11:	
  1987  185D                     STR_1:	
  1988  185D  342F               	retlw	47	;'/'
  1989  185E  3400               	retlw	0
  1990                           
  1991                           	psect	stringtext12
  1992  0000                     __pstringtext12:	
  1993  185D                     
  1994                           ; #config settings
  1995  0000                     
  1996                           	psect	cinit
  1997  0011                     start_initialization:	
  1998  0011                     __initialization:	
  1999                           
  2000                           ; Initialize objects allocated to BANK3
  2001  0011  0023               	movlb	3	; select bank3
  2002  0012  3192  2250  3180   	fcall	__pidataBANK3	;fetch initializer
  2003  0015  00DA               	movwf	__pdataBANK3& (0+127)
  2004                           
  2005                           ; Clear objects allocated to COMMON
  2006  0016  01FD               	clrf	__pbssCOMMON& (0+127)
  2007                           
  2008                           ; Clear objects allocated to BANK3
  2009  0017  30C2               	movlw	low __pbssBANK3
  2010  0018  0084               	movwf	4
  2011  0019  3001               	movlw	high __pbssBANK3
  2012  001A  0085               	movwf	5
  2013  001B  3018               	movlw	24
  2014  001C  3192  225A  3180   	fcall	clear_ram0
  2015                           
  2016                           ; Clear objects allocated to BANK4
  2017  001F  3020               	movlw	low __pbssBANK4
  2018  0020  0084               	movwf	4
  2019  0021  3002               	movlw	high __pbssBANK4
  2020  0022  0085               	movwf	5
  2021  0023  303D               	movlw	61
  2022  0024  3192  225A         	fcall	clear_ram0
  2023  0026                     end_of_initialization:	
  2024                           ;End of C runtime variable initialization code
  2025                           
  2026  0026                     __end_of__initialization:	
  2027  0026  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  2028  0027  0020               	movlb	0
  2029  0028  318B  2B4D         	ljmp	_main	;jump to C main() function
  2030                           
  2031                           	psect	bssCOMMON
  2032  007D                     __pbssCOMMON:	
  2033  007D                     _nrf24l01:	
  2034  007D                     	ds	1
  2035                           
  2036                           	psect	bssBANK3
  2037  01C2                     __pbssBANK3:	
  2038  01C2                     _counter:	
  2039  01C2                     	ds	3
  2040  01C5                     _TXPacket:	
  2041  01C5                     	ds	2
  2042  01C7                     strtok@sp:	
  2043  01C7                     	ds	1
  2044  01C8                     _sleepLoop:	
  2045  01C8                     	ds	1
  2046  01C9                     ftoa@buf:	
  2047  01C9                     	ds	17
  2048                           
  2049                           	psect	dataBANK3
  2050  01DA                     __pdataBANK3:	
  2051  01DA                     _romData:	
  2052  01DA                     	ds	1
  2053                           
  2054                           	psect	bssBANK4
  2055  0220                     __pbssBANK4:	
  2056  0220                     _RXPacket:	
  2057  0220                     	ds	33
  2058  0241                     _romDataMap:	
  2059  0241                     	ds	28
  2060                           
  2061                           	psect	clrtext
  2062  125A                     clear_ram0:	
  2063                           ;	Called with FSR0 containing the base address, and
  2064                           ;	WREG with the size to clear
  2065                           
  2066  125A  0064               	clrwdt	;clear the watchdog before getting into this loop
  2067  125B                     clrloop0:	
  2068  125B  0180               	clrf	0	;clear RAM location pointed to by FSR
  2069  125C  3101               	addfsr 0,1
  2070  125D  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  2071  125E  2A5B               	goto	clrloop0	;have we reached the end yet?
  2072  125F  3400               	retlw	0	;all done for this memory range, return
  2073                           
  2074                           	psect	cstackBANK3
  2075  01A0                     __pcstackBANK3:	
  2076  01A0                     main@pipe:	
  2077                           
  2078                           ; 1 bytes @ 0x0
  2079  01A0                     	ds	1
  2080  01A1                     main@packet:	
  2081                           
  2082                           ; 33 bytes @ 0x1
  2083  01A1                     	ds	33
  2084                           
  2085                           	psect	cstackBANK2
  2086  0120                     __pcstackBANK2:	
  2087  0120                     checkRxData@value:	
  2088                           
  2089                           ; 32 bytes @ 0x0
  2090  0120                     	ds	32
  2091  0140                     loop@vt:	
  2092                           
  2093                           ; 3 bytes @ 0x20
  2094  0140                     	ds	3
  2095  0143                     loop@ta:	
  2096                           
  2097                           ; 3 bytes @ 0x23
  2098  0143                     	ds	3
  2099  0146                     _loop$2153:	
  2100                           
  2101                           ; 3 bytes @ 0x26
  2102  0146                     	ds	3
  2103  0149                     _loop$2154:	
  2104                           
  2105                           ; 3 bytes @ 0x29
  2106  0149                     	ds	3
  2107  014C                     _loop$920:	
  2108                           
  2109                           ; 2 bytes @ 0x2C
  2110  014C                     	ds	2
  2111  014E                     loop@rfSetup:	
  2112                           
  2113                           ; 1 bytes @ 0x2E
  2114  014E                     	ds	1
  2115  014F                     loop@packet:	
  2116                           
  2117                           ; 33 bytes @ 0x2F
  2118  014F                     	ds	33
  2119                           
  2120                           	psect	cstackBANK1
  2121  00A0                     __pcstackBANK1:	
  2122  00A0                     ___fttol@sign1:	
  2123  00A0                     strtod@eexp:	
  2124                           ; 1 bytes @ 0x0
  2125                           
  2126                           
  2127                           ; 1 bytes @ 0x0
  2128  00A0                     	ds	1
  2129  00A1                     strtod@flags:	
  2130  00A1                     ___fttol@lval:	
  2131                           ; 1 bytes @ 0x1
  2132                           
  2133                           
  2134                           ; 4 bytes @ 0x1
  2135  00A1                     	ds	1
  2136  00A2                     strtod@expon:	
  2137                           
  2138                           ; 1 bytes @ 0x2
  2139  00A2                     	ds	1
  2140  00A3                     strtod@_u:	
  2141                           
  2142                           ; 4 bytes @ 0x3
  2143  00A3                     	ds	2
  2144  00A5                     ___fttol@exp1:	
  2145                           
  2146                           ; 1 bytes @ 0x5
  2147  00A5                     	ds	1
  2148  00A6                     ?_ftoa:	
  2149  00A6                     ftoa@f:	
  2150                           ; 1 bytes @ 0x6
  2151                           
  2152                           
  2153                           ; 3 bytes @ 0x6
  2154  00A6                     	ds	1
  2155  00A7                     strtod@s:	
  2156                           
  2157                           ; 1 bytes @ 0x7
  2158  00A7                     	ds	1
  2159  00A8                     ?_atof:	
  2160                           
  2161                           ; 3 bytes @ 0x8
  2162  00A8                     	ds	1
  2163  00A9                     ftoa@status:	
  2164                           
  2165                           ; 1 bytes @ 0x9
  2166  00A9                     	ds	1
  2167  00AA                     ftoa@rem:	
  2168                           
  2169                           ; 4 bytes @ 0xA
  2170  00AA                     	ds	2
  2171  00AC                     checkRxData@name:	
  2172                           
  2173                           ; 32 bytes @ 0xC
  2174  00AC                     	ds	2
  2175  00AE                     ftoa@l:	
  2176                           
  2177                           ; 4 bytes @ 0xE
  2178  00AE                     	ds	4
  2179  00B2                     ftoa@cp:	
  2180                           
  2181                           ; 1 bytes @ 0x12
  2182  00B2                     	ds	1
  2183  00B3                     ?_strcat:	
  2184  00B3                     strcat@from:	
  2185                           ; 1 bytes @ 0x13
  2186                           
  2187                           
  2188                           ; 2 bytes @ 0x13
  2189  00B3                     	ds	2
  2190  00B5                     ??_strcat:	
  2191                           
  2192                           ; 1 bytes @ 0x15
  2193  00B5                     	ds	1
  2194  00B6                     strcat@cp:	
  2195                           
  2196                           ; 1 bytes @ 0x16
  2197  00B6                     	ds	1
  2198  00B7                     strcat@to:	
  2199                           
  2200                           ; 1 bytes @ 0x17
  2201  00B7                     	ds	1
  2202  00B8                     ?_setMessage:	
  2203  00B8                     setMessage@topic:	
  2204                           ; 1 bytes @ 0x18
  2205                           
  2206                           
  2207                           ; 2 bytes @ 0x18
  2208  00B8                     	ds	2
  2209  00BA                     setMessage@value:	
  2210                           
  2211                           ; 3 bytes @ 0x1A
  2212  00BA                     	ds	3
  2213  00BD                     ??_setMessage:	
  2214                           
  2215                           ; 1 bytes @ 0x1D
  2216  00BD                     	ds	1
  2217  00BE                     setMessage@status:	
  2218                           
  2219                           ; 2 bytes @ 0x1E
  2220  00BE                     	ds	2
  2221  00C0                     setMessage@packet:	
  2222                           
  2223                           ; 1 bytes @ 0x20
  2224  00C0                     	ds	12
  2225  00CC                     checkRxData@topic:	
  2226                           
  2227                           ; 32 bytes @ 0x2C
  2228  00CC                     	ds	32
  2229  00EC                     checkRxData@RXPacket:	
  2230                           
  2231                           ; 1 bytes @ 0x4C
  2232  00EC                     	ds	1
  2233  00ED                     checkRxData@strings:	
  2234                           
  2235                           ; 1 bytes @ 0x4D
  2236  00ED                     	ds	1
  2237  00EE                     ??_loop:	
  2238                           
  2239                           ; 1 bytes @ 0x4E
  2240  00EE                     	ds	1
  2241  00EF                     ??_main:	
  2242                           
  2243                           ; 1 bytes @ 0x4F
  2244  00EF                     	ds	1
  2245                           
  2246                           	psect	cstackCOMMON
  2247  0070                     __pcstackCOMMON:	
  2248  0070                     ?_isdigit:	
  2249  0070                     ?_isspace:	
  2250                           ; 1 bit 
  2251                           
  2252  0070                     ?_nrf24l01ISR:	
  2253                           ; 1 bit 
  2254                           
  2255  0070                     ?_nrf24l01SetRXMode:	
  2256                           ; 1 bytes @ 0x0
  2257                           
  2258  0070                     ?_nrf24l01GetRXPacket:	
  2259                           ; 1 bytes @ 0x0
  2260                           
  2261  0070                     ?_nrf24l01SendACK:	
  2262                           ; 1 bytes @ 0x0
  2263                           
  2264  0070                     ?_nrf24l01Init:	
  2265                           ; 1 bytes @ 0x0
  2266                           
  2267  0070                     ?_nrf24l01SetTXPipe:	
  2268                           ; 1 bytes @ 0x0
  2269                           
  2270  0070                     ?_nrf24l01SetRXPipe:	
  2271                           ; 1 bytes @ 0x0
  2272                           
  2273  0070                     ?_nrf24l01CELow:	
  2274                           ; 1 bytes @ 0x0
  2275                           
  2276  0070                     ??_nrf24l01CELow:	
  2277                           ; 1 bytes @ 0x0
  2278                           
  2279  0070                     ?_nrf24l01CEHigh:	
  2280                           ; 1 bytes @ 0x0
  2281                           
  2282  0070                     ??_nrf24l01CEHigh:	
  2283                           ; 1 bytes @ 0x0
  2284                           
  2285  0070                     ?_nrf24l01CSLow:	
  2286                           ; 1 bytes @ 0x0
  2287                           
  2288  0070                     ??_nrf24l01CSLow:	
  2289                           ; 1 bytes @ 0x0
  2290                           
  2291  0070                     ?_nrf24l01CSHigh:	
  2292                           ; 1 bytes @ 0x0
  2293                           
  2294  0070                     ??_nrf24l01CSHigh:	
  2295                           ; 1 bytes @ 0x0
  2296                           
  2297  0070                     ?_nrf24l01InterfaceInit:	
  2298                           ; 1 bytes @ 0x0
  2299                           
  2300  0070                     ?_nrf24l01SPISend:	
  2301                           ; 1 bytes @ 0x0
  2302                           
  2303  0070                     ??_nrf24l01SPISend:	
  2304                           ; 1 bytes @ 0x0
  2305                           
  2306  0070                     ?_nrf24l01SPIStart:	
  2307                           ; 1 bytes @ 0x0
  2308                           
  2309  0070                     ??_nrf24l01SPIStart:	
  2310                           ; 1 bytes @ 0x0
  2311                           
  2312  0070                     ?_nrf24l01SPIEnd:	
  2313                           ; 1 bytes @ 0x0
  2314                           
  2315  0070                     ??_nrf24l01SPIEnd:	
  2316                           ; 1 bytes @ 0x0
  2317                           
  2318  0070                     ?_enableInterrupts:	
  2319                           ; 1 bytes @ 0x0
  2320                           
  2321  0070                     ??_enableInterrupts:	
  2322                           ; 1 bytes @ 0x0
  2323                           
  2324  0070                     ?_exception:	
  2325                           ; 1 bytes @ 0x0
  2326                           
  2327  0070                     ??_exception:	
  2328                           ; 1 bytes @ 0x0
  2329                           
  2330  0070                     ?_ISR:	
  2331                           ; 1 bytes @ 0x0
  2332                           
  2333  0070                     ?_sleep:	
  2334                           ; 1 bytes @ 0x0
  2335                           
  2336  0070                     ?_checkRxData:	
  2337                           ; 1 bytes @ 0x0
  2338                           
  2339  0070                     ?_checkTXPower:	
  2340                           ; 1 bytes @ 0x0
  2341                           
  2342  0070                     ?_loop:	
  2343                           ; 1 bytes @ 0x0
  2344                           
  2345  0070                     ?_nrf24l01GetPipe:	
  2346                           ; 1 bytes @ 0x0
  2347                           
  2348  0070                     ?_main:	
  2349                           ; 1 bytes @ 0x0
  2350                           
  2351  0070                     ?_nrf24l01CheckACK:	
  2352                           ; 1 bytes @ 0x0
  2353                           
  2354  0070                     ?_nrf24l01ReceivePacket:	
  2355                           ; 1 bytes @ 0x0
  2356                           
  2357  0070                     ?_nrf24l01InitRegisters:	
  2358                           ; 1 bytes @ 0x0
  2359                           
  2360  0070                     ?i1_nrf24l01SetRXMode:	
  2361                           ; 1 bytes @ 0x0
  2362                           
  2363  0070                     ?i1_memset:	
  2364                           ; 1 bytes @ 0x0
  2365                           
  2366  0070                     ?_strcmp:	
  2367                           ; 1 bytes @ 0x0
  2368                           
  2369  0070                     nrf24l01SPISend@data:	
  2370                           ; 2 bytes @ 0x0
  2371                           
  2372  0070                     enableInterrupts@enable:	
  2373                           ; 1 bytes @ 0x0
  2374                           
  2375  0070                     exception@exception:	
  2376                           ; 1 bytes @ 0x0
  2377                           
  2378  0070                     strcmp@s1:	
  2379                           ; 1 bytes @ 0x0
  2380                           
  2381  0070                     i1memset@p1:	
  2382                           ; 2 bytes @ 0x0
  2383                           
  2384                           
  2385                           ; 2 bytes @ 0x0
  2386  0070                     	ds	1
  2387  0071                     ?i1_nrf24l01Send:	
  2388  0071                     i1nrf24l01Send@data:	
  2389                           ; 1 bytes @ 0x1
  2390                           
  2391                           
  2392                           ; 1 bytes @ 0x1
  2393  0071                     	ds	1
  2394  0072                     ??i1_nrf24l01Send:	
  2395  0072                     strcmp@s2:	
  2396                           ; 1 bytes @ 0x2
  2397                           
  2398  0072                     i1memset@c:	
  2399                           ; 1 bytes @ 0x2
  2400                           
  2401                           
  2402                           ; 2 bytes @ 0x2
  2403  0072                     	ds	1
  2404  0073                     ??_strcmp:	
  2405  0073                     i1nrf24l01Send@command:	
  2406                           ; 1 bytes @ 0x3
  2407                           
  2408                           
  2409                           ; 1 bytes @ 0x3
  2410  0073                     	ds	1
  2411  0074                     ??i1_nrf24l01SetRXMode:	
  2412  0074                     strcmp@r:	
  2413                           ; 1 bytes @ 0x4
  2414                           
  2415  0074                     i1memset@n:	
  2416                           ; 1 bytes @ 0x4
  2417                           
  2418                           
  2419                           ; 2 bytes @ 0x4
  2420  0074                     	ds	1
  2421  0075                     i1nrf24l01SetRXMode@config:	
  2422                           
  2423                           ; 1 bytes @ 0x5
  2424  0075                     	ds	1
  2425  0076                     ??i1_memset:	
  2426  0076                     i1nrf24l01SetRXMode@rxMode:	
  2427                           ; 1 bytes @ 0x6
  2428                           
  2429  0076                     i1memset@p:	
  2430                           ; 1 bytes @ 0x6
  2431                           
  2432                           
  2433                           ; 2 bytes @ 0x6
  2434  0076                     	ds	1
  2435  0077                     ??_nrf24l01CheckACK:	
  2436                           
  2437                           ; 1 bytes @ 0x7
  2438  0077                     	ds	1
  2439  0078                     ??_nrf24l01ReceivePacket:	
  2440                           
  2441                           ; 1 bytes @ 0x8
  2442  0078                     	ds	1
  2443  0079                     nrf24l01ReceivePacket@width:	
  2444                           
  2445                           ; 1 bytes @ 0x9
  2446  0079                     	ds	1
  2447  007A                     nrf24l01ReceivePacket@i:	
  2448                           
  2449                           ; 1 bytes @ 0xA
  2450  007A                     	ds	1
  2451  007B                     ??_nrf24l01ISR:	
  2452                           
  2453                           ; 1 bytes @ 0xB
  2454  007B                     	ds	1
  2455  007C                     nrf24l01ISR@status:	
  2456                           
  2457                           ; 1 bytes @ 0xC
  2458  007C                     	ds	1
  2459  007D                     ??_ISR:	
  2460                           
  2461                           	psect	cstackBANK0
  2462  0020                     __pcstackBANK0:	
  2463                           ; 1 bytes @ 0xD
  2464                           
  2465  0020                     ?___ftge:	
  2466  0020                     ??_nrf24l01GetRXPacket:	
  2467                           ; 1 bit 
  2468                           
  2469  0020                     ?_nrf24l01Send:	
  2470                           ; 1 bytes @ 0x0
  2471                           
  2472  0020                     ??_isdigit:	
  2473                           ; 1 bytes @ 0x0
  2474                           
  2475  0020                     ??_isspace:	
  2476                           ; 1 bytes @ 0x0
  2477                           
  2478  0020                     ??_nrf24l01InterfaceInit:	
  2479                           ; 1 bytes @ 0x0
  2480                           
  2481  0020                     ??_sleep:	
  2482                           ; 1 bytes @ 0x0
  2483                           
  2484  0020                     ?___bmul:	
  2485                           ; 1 bytes @ 0x0
  2486                           
  2487  0020                     ?_strcpy:	
  2488                           ; 1 bytes @ 0x0
  2489                           
  2490  0020                     ?_memset:	
  2491                           ; 2 bytes @ 0x0
  2492                           
  2493  0020                     ?_strlen:	
  2494                           ; 2 bytes @ 0x0
  2495                           
  2496  0020                     ?_strchr:	
  2497                           ; 2 bytes @ 0x0
  2498                           
  2499  0020                     ?___wmul:	
  2500                           ; 2 bytes @ 0x0
  2501                           
  2502  0020                     ?___lwmod:	
  2503                           ; 2 bytes @ 0x0
  2504                           
  2505  0020                     ?___ftpack:	
  2506                           ; 2 bytes @ 0x0
  2507                           
  2508  0020                     ?___lmul:	
  2509                           ; 3 bytes @ 0x0
  2510                           
  2511  0020                     ?___lldiv:	
  2512                           ; 4 bytes @ 0x0
  2513                           
  2514  0020                     nrf24l01Send@data:	
  2515                           ; 4 bytes @ 0x0
  2516                           
  2517  0020                     ___bmul@multiplicand:	
  2518                           ; 1 bytes @ 0x0
  2519                           
  2520  0020                     _isdigit$1866:	
  2521                           ; 1 bytes @ 0x0
  2522                           
  2523  0020                     _isspace$1869:	
  2524                           ; 1 bytes @ 0x0
  2525                           
  2526  0020                     ___wmul@multiplier:	
  2527                           ; 1 bytes @ 0x0
  2528                           
  2529  0020                     ___lwmod@divisor:	
  2530                           ; 2 bytes @ 0x0
  2531                           
  2532  0020                     memset@p1:	
  2533                           ; 2 bytes @ 0x0
  2534                           
  2535  0020                     strcpy@to:	
  2536                           ; 2 bytes @ 0x0
  2537                           
  2538  0020                     strlen@s:	
  2539                           ; 2 bytes @ 0x0
  2540                           
  2541  0020                     strchr@ptr:	
  2542                           ; 2 bytes @ 0x0
  2543                           
  2544  0020                     ___ftpack@arg:	
  2545                           ; 2 bytes @ 0x0
  2546                           
  2547  0020                     ___ftge@ff1:	
  2548                           ; 3 bytes @ 0x0
  2549                           
  2550  0020                     ___lmul@multiplier:	
  2551                           ; 3 bytes @ 0x0
  2552                           
  2553  0020                     ___lldiv@divisor:	
  2554                           ; 4 bytes @ 0x0
  2555                           
  2556                           
  2557                           ; 4 bytes @ 0x0
  2558  0020                     	ds	1
  2559  0021                     ??_nrf24l01Send:	
  2560  0021                     ??___bmul:	
  2561                           ; 1 bytes @ 0x1
  2562                           
  2563  0021                     sleep@wdps:	
  2564                           ; 1 bytes @ 0x1
  2565                           
  2566  0021                     isdigit@c:	
  2567                           ; 1 bytes @ 0x1
  2568                           
  2569  0021                     isspace@c:	
  2570                           ; 1 bytes @ 0x1
  2571                           
  2572                           
  2573                           ; 1 bytes @ 0x1
  2574  0021                     	ds	1
  2575  0022                     ??_strlen:	
  2576  0022                     nrf24l01Send@command:	
  2577                           ; 1 bytes @ 0x2
  2578                           
  2579  0022                     ___bmul@product:	
  2580                           ; 1 bytes @ 0x2
  2581                           
  2582  0022                     ___wmul@multiplicand:	
  2583                           ; 1 bytes @ 0x2
  2584                           
  2585  0022                     ___lwmod@dividend:	
  2586                           ; 2 bytes @ 0x2
  2587                           
  2588  0022                     memset@c:	
  2589                           ; 2 bytes @ 0x2
  2590                           
  2591  0022                     strcpy@from:	
  2592                           ; 2 bytes @ 0x2
  2593                           
  2594  0022                     strchr@chr:	
  2595                           ; 2 bytes @ 0x2
  2596                           
  2597                           
  2598                           ; 2 bytes @ 0x2
  2599  0022                     	ds	1
  2600  0023                     ??_nrf24l01SetRXMode:	
  2601  0023                     ?_nrf24l01ChangeTXPower:	
  2602                           ; 1 bytes @ 0x3
  2603                           
  2604  0023                     ??_nrf24l01SetRXPipe:	
  2605                           ; 1 bytes @ 0x3
  2606                           
  2607  0023                     ___bmul@multiplier:	
  2608                           ; 1 bytes @ 0x3
  2609                           
  2610  0023                     ___ftpack@exp:	
  2611                           ; 1 bytes @ 0x3
  2612                           
  2613  0023                     nrf24l01ChangeTXPower@addPower:	
  2614                           ; 1 bytes @ 0x3
  2615                           
  2616  0023                     ___ftge@ff2:	
  2617                           ; 2 bytes @ 0x3
  2618                           
  2619                           
  2620                           ; 3 bytes @ 0x3
  2621  0023                     	ds	1
  2622  0024                     ??_strcpy:	
  2623  0024                     ??_nrf24l01SetTXPipe:	
  2624                           ; 1 bytes @ 0x4
  2625                           
  2626  0024                     ??_strchr:	
  2627                           ; 1 bytes @ 0x4
  2628                           
  2629  0024                     ??___wmul:	
  2630                           ; 1 bytes @ 0x4
  2631                           
  2632  0024                     ??___lwmod:	
  2633                           ; 1 bytes @ 0x4
  2634                           
  2635  0024                     nrf24l01SetRXMode@config:	
  2636                           ; 1 bytes @ 0x4
  2637                           
  2638  0024                     ___ftpack@sign:	
  2639                           ; 1 bytes @ 0x4
  2640                           
  2641  0024                     ___wmul@product:	
  2642                           ; 1 bytes @ 0x4
  2643                           
  2644  0024                     memset@n:	
  2645                           ; 2 bytes @ 0x4
  2646                           
  2647  0024                     strcpy@cp:	
  2648                           ; 2 bytes @ 0x4
  2649                           
  2650  0024                     strlen@cp:	
  2651                           ; 2 bytes @ 0x4
  2652                           
  2653  0024                     ___lmul@multiplicand:	
  2654                           ; 2 bytes @ 0x4
  2655                           
  2656  0024                     ___lldiv@dividend:	
  2657                           ; 4 bytes @ 0x4
  2658                           
  2659                           
  2660                           ; 4 bytes @ 0x4
  2661  0024                     	ds	1
  2662  0025                     ??_nrf24l01ChangeTXPower:	
  2663  0025                     ??___ftpack:	
  2664                           ; 1 bytes @ 0x5
  2665                           
  2666  0025                     nrf24l01SetRXMode@rxMode:	
  2667                           ; 1 bytes @ 0x5
  2668                           
  2669  0025                     nrf24l01SetRXPipe@pipe:	
  2670                           ; 1 bytes @ 0x5
  2671                           
  2672  0025                     ___lwmod@counter:	
  2673                           ; 1 bytes @ 0x5
  2674                           
  2675                           
  2676                           ; 1 bytes @ 0x5
  2677  0025                     	ds	1
  2678  0026                     ??_memset:	
  2679  0026                     ??_nrf24l01GetPipe:	
  2680                           ; 1 bytes @ 0x6
  2681                           
  2682  0026                     ??___ftge:	
  2683                           ; 1 bytes @ 0x6
  2684                           
  2685  0026                     nrf24l01ChangeTXPower@rfSetup:	
  2686                           ; 1 bytes @ 0x6
  2687                           
  2688  0026                     nrf24l01SetTXPipe@pipe:	
  2689                           ; 1 bytes @ 0x6
  2690                           
  2691  0026                     nrf24l01SetRXPipe@enRXAddr:	
  2692                           ; 1 bytes @ 0x6
  2693                           
  2694  0026                     memset@p:	
  2695                           ; 1 bytes @ 0x6
  2696                           
  2697                           
  2698                           ; 2 bytes @ 0x6
  2699  0026                     	ds	1
  2700  0027                     ?_nrf24l01SendPacket:	
  2701  0027                     ??_checkTXPower:	
  2702                           ; 1 bytes @ 0x7
  2703                           
  2704  0027                     ??_nrf24l01InitRegisters:	
  2705                           ; 1 bytes @ 0x7
  2706                           
  2707  0027                     ?_strspn:	
  2708                           ; 1 bytes @ 0x7
  2709                           
  2710  0027                     ?_strcspn:	
  2711                           ; 2 bytes @ 0x7
  2712                           
  2713  0027                     nrf24l01SendPacket@Packet:	
  2714                           ; 2 bytes @ 0x7
  2715                           
  2716  0027                     strcspn@s2:	
  2717                           ; 2 bytes @ 0x7
  2718                           
  2719  0027                     strspn@s2:	
  2720                           ; 2 bytes @ 0x7
  2721                           
  2722                           
  2723                           ; 2 bytes @ 0x7
  2724  0027                     	ds	1
  2725  0028                     ??___lmul:	
  2726  0028                     ??___lldiv:	
  2727                           ; 1 bytes @ 0x8
  2728                           
  2729  0028                     ?___altoft:	
  2730                           ; 1 bytes @ 0x8
  2731                           
  2732  0028                     ?___awtoft:	
  2733                           ; 3 bytes @ 0x8
  2734                           
  2735  0028                     ?___lbtoft:	
  2736                           ; 3 bytes @ 0x8
  2737                           
  2738  0028                     ?___lltoft:	
  2739                           ; 3 bytes @ 0x8
  2740                           
  2741  0028                     ?___lwtoft:	
  2742                           ; 3 bytes @ 0x8
  2743                           
  2744  0028                     checkTXPower@rxPacket:	
  2745                           ; 3 bytes @ 0x8
  2746                           
  2747  0028                     nrf24l01GetPipe@pipe:	
  2748                           ; 1 bytes @ 0x8
  2749                           
  2750  0028                     ___awtoft@c:	
  2751                           ; 1 bytes @ 0x8
  2752                           
  2753  0028                     ___lwtoft@c:	
  2754                           ; 2 bytes @ 0x8
  2755                           
  2756  0028                     ___lmul@product:	
  2757                           ; 2 bytes @ 0x8
  2758                           
  2759  0028                     ___altoft@c:	
  2760                           ; 4 bytes @ 0x8
  2761                           
  2762  0028                     ___lltoft@c:	
  2763                           ; 4 bytes @ 0x8
  2764                           
  2765                           
  2766                           ; 4 bytes @ 0x8
  2767  0028                     	ds	1
  2768  0029                     ??_nrf24l01SendPacket:	
  2769  0029                     ??_strspn:	
  2770                           ; 1 bytes @ 0x9
  2771                           
  2772  0029                     ??_strcspn:	
  2773                           ; 1 bytes @ 0x9
  2774                           
  2775  0029                     nrf24l01GetPipe@name:	
  2776                           ; 1 bytes @ 0x9
  2777                           
  2778  0029                     nrf24l01InitRegisters@channel:	
  2779                           ; 1 bytes @ 0x9
  2780                           
  2781  0029                     ___lldiv@quotient:	
  2782                           ; 1 bytes @ 0x9
  2783                           
  2784                           
  2785                           ; 4 bytes @ 0x9
  2786  0029                     	ds	1
  2787  002A                     nrf24l01GetPipe@i:	
  2788  002A                     nrf24l01InitRegisters@setupAW:	
  2789                           ; 1 bytes @ 0xA
  2790                           
  2791                           
  2792                           ; 1 bytes @ 0xA
  2793  002A                     	ds	1
  2794  002B                     ??___awtoft:	
  2795  002B                     ??___lbtoft:	
  2796                           ; 1 bytes @ 0xB
  2797                           
  2798  002B                     ??___lwtoft:	
  2799                           ; 1 bytes @ 0xB
  2800                           
  2801  002B                     nrf24l01InitRegisters@feature:	
  2802                           ; 1 bytes @ 0xB
  2803                           
  2804  002B                     strcspn@i:	
  2805                           ; 1 bytes @ 0xB
  2806                           
  2807  002B                     strspn@i:	
  2808                           ; 2 bytes @ 0xB
  2809                           
  2810                           
  2811                           ; 2 bytes @ 0xB
  2812  002B                     	ds	1
  2813  002C                     ??___altoft:	
  2814  002C                     ??___lltoft:	
  2815                           ; 1 bytes @ 0xC
  2816                           
  2817  002C                     nrf24l01InitRegisters@rfSetup:	
  2818                           ; 1 bytes @ 0xC
  2819                           
  2820                           
  2821                           ; 1 bytes @ 0xC
  2822  002C                     	ds	1
  2823  002D                     nrf24l01SendPacket@i:	
  2824  002D                     nrf24l01InitRegisters@status:	
  2825                           ; 1 bytes @ 0xD
  2826                           
  2827  002D                     ___lldiv@counter:	
  2828                           ; 1 bytes @ 0xD
  2829                           
  2830  002D                     ___awtoft@sign:	
  2831                           ; 1 bytes @ 0xD
  2832                           
  2833  002D                     ___lltoft@exp:	
  2834                           ; 1 bytes @ 0xD
  2835                           
  2836  002D                     strcspn@s1:	
  2837                           ; 1 bytes @ 0xD
  2838                           
  2839  002D                     strspn@s1:	
  2840                           ; 1 bytes @ 0xD
  2841                           
  2842                           
  2843                           ; 1 bytes @ 0xD
  2844  002D                     	ds	1
  2845  002E                     ??_nrf24l01SendACK:	
  2846  002E                     ?_strtok:	
  2847                           ; 1 bytes @ 0xE
  2848                           
  2849  002E                     ?___ftadd:	
  2850                           ; 1 bytes @ 0xE
  2851                           
  2852  002E                     ?___llmod:	
  2853                           ; 3 bytes @ 0xE
  2854                           
  2855  002E                     nrf24l01InitRegisters@enAA:	
  2856                           ; 4 bytes @ 0xE
  2857                           
  2858  002E                     ___altoft@exp:	
  2859                           ; 1 bytes @ 0xE
  2860                           
  2861  002E                     strtok@s2:	
  2862                           ; 1 bytes @ 0xE
  2863                           
  2864  002E                     ___ftadd@f1:	
  2865                           ; 2 bytes @ 0xE
  2866                           
  2867  002E                     ___llmod@divisor:	
  2868                           ; 3 bytes @ 0xE
  2869                           
  2870                           
  2871                           ; 4 bytes @ 0xE
  2872  002E                     	ds	1
  2873  002F                     nrf24l01SendACK@packet:	
  2874  002F                     nrf24l01InitRegisters@DynPD:	
  2875                           ; 1 bytes @ 0xF
  2876                           
  2877  002F                     ___altoft@sign:	
  2878                           ; 1 bytes @ 0xF
  2879                           
  2880  002F                     ___lbtoft@c:	
  2881                           ; 1 bytes @ 0xF
  2882                           
  2883                           
  2884                           ; 1 bytes @ 0xF
  2885  002F                     	ds	1
  2886  0030                     ??_strtok:	
  2887  0030                     nrf24l01InitRegisters@config:	
  2888                           ; 1 bytes @ 0x10
  2889                           
  2890                           
  2891                           ; 1 bytes @ 0x10
  2892  0030                     	ds	1
  2893  0031                     nrf24l01InitRegisters@i:	
  2894  0031                     ___ftadd@f2:	
  2895                           ; 2 bytes @ 0x11
  2896                           
  2897                           
  2898                           ; 3 bytes @ 0x11
  2899  0031                     	ds	1
  2900  0032                     ___llmod@dividend:	
  2901                           
  2902                           ; 4 bytes @ 0x12
  2903  0032                     	ds	1
  2904  0033                     ??_nrf24l01Init:	
  2905  0033                     strtok@s1:	
  2906                           ; 1 bytes @ 0x13
  2907                           
  2908                           
  2909                           ; 1 bytes @ 0x13
  2910  0033                     	ds	1
  2911  0034                     ??___ftadd:	
  2912                           
  2913                           ; 1 bytes @ 0x14
  2914  0034                     	ds	2
  2915  0036                     ??___llmod:	
  2916                           
  2917                           ; 1 bytes @ 0x16
  2918  0036                     	ds	1
  2919  0037                     ___llmod@counter:	
  2920                           
  2921                           ; 1 bytes @ 0x17
  2922  0037                     	ds	1
  2923  0038                     ?_sprintf:	
  2924  0038                     ___ftadd@sign:	
  2925                           ; 2 bytes @ 0x18
  2926                           
  2927  0038                     sprintf@f:	
  2928                           ; 1 bytes @ 0x18
  2929                           
  2930                           
  2931                           ; 2 bytes @ 0x18
  2932  0038                     	ds	1
  2933  0039                     ___ftadd@exp2:	
  2934                           
  2935                           ; 1 bytes @ 0x19
  2936  0039                     	ds	1
  2937  003A                     ___ftadd@exp1:	
  2938                           
  2939                           ; 1 bytes @ 0x1A
  2940  003A                     	ds	1
  2941  003B                     ?___ftdiv:	
  2942  003B                     ?___ftsub:	
  2943                           ; 3 bytes @ 0x1B
  2944                           
  2945  003B                     ___ftdiv@f2:	
  2946                           ; 3 bytes @ 0x1B
  2947                           
  2948  003B                     ___ftsub@f2:	
  2949                           ; 3 bytes @ 0x1B
  2950                           
  2951                           
  2952                           ; 3 bytes @ 0x1B
  2953  003B                     	ds	3
  2954  003E                     ___ftdiv@f1:	
  2955  003E                     ___ftsub@f1:	
  2956                           ; 3 bytes @ 0x1E
  2957                           
  2958                           
  2959                           ; 3 bytes @ 0x1E
  2960  003E                     	ds	3
  2961  0041                     ??___ftdiv:	
  2962  0041                     ??___ftsub:	
  2963                           ; 1 bytes @ 0x21
  2964                           
  2965                           
  2966                           ; 1 bytes @ 0x21
  2967  0041                     	ds	1
  2968  0042                     ??_sprintf:	
  2969                           
  2970                           ; 1 bytes @ 0x22
  2971  0042                     	ds	3
  2972  0045                     ___ftdiv@cntr:	
  2973                           
  2974                           ; 1 bytes @ 0x25
  2975  0045                     	ds	1
  2976  0046                     ___ftdiv@f3:	
  2977                           
  2978                           ; 3 bytes @ 0x26
  2979  0046                     	ds	2
  2980  0048                     sprintf@flag:	
  2981                           
  2982                           ; 1 bytes @ 0x28
  2983  0048                     	ds	1
  2984  0049                     sprintf@ap:	
  2985  0049                     ___ftdiv@exp:	
  2986                           ; 1 bytes @ 0x29
  2987                           
  2988                           
  2989                           ; 1 bytes @ 0x29
  2990  0049                     	ds	1
  2991  004A                     ___ftdiv@sign:	
  2992  004A                     sprintf@val:	
  2993                           ; 1 bytes @ 0x2A
  2994                           
  2995                           
  2996                           ; 4 bytes @ 0x2A
  2997  004A                     	ds	1
  2998  004B                     ?_getADCValue:	
  2999                           
  3000                           ; 3 bytes @ 0x2B
  3001  004B                     	ds	3
  3002  004E                     ??_getADCValue:	
  3003  004E                     sprintf@sp:	
  3004                           ; 1 bytes @ 0x2E
  3005                           
  3006                           
  3007                           ; 1 bytes @ 0x2E
  3008  004E                     	ds	1
  3009  004F                     sprintf@width:	
  3010                           
  3011                           ; 2 bytes @ 0x2F
  3012  004F                     	ds	2
  3013  0051                     getADCValue@adcLoop:	
  3014  0051                     sprintf@prec:	
  3015                           ; 2 bytes @ 0x31
  3016                           
  3017                           
  3018                           ; 2 bytes @ 0x31
  3019  0051                     	ds	2
  3020  0053                     getADCValue@channel:	
  3021  0053                     sprintf@c:	
  3022                           ; 1 bytes @ 0x33
  3023                           
  3024                           
  3025                           ; 1 bytes @ 0x33
  3026  0053                     	ds	1
  3027  0054                     getADCValue@adcSum:	
  3028                           
  3029                           ; 3 bytes @ 0x34
  3030  0054                     	ds	3
  3031  0057                     ?___ftmul:	
  3032  0057                     ?___ftneg:	
  3033                           ; 3 bytes @ 0x37
  3034                           
  3035  0057                     ___ftmul@f1:	
  3036                           ; 3 bytes @ 0x37
  3037                           
  3038  0057                     ___ftneg@f1:	
  3039                           ; 3 bytes @ 0x37
  3040                           
  3041                           
  3042                           ; 3 bytes @ 0x37
  3043  0057                     	ds	3
  3044  005A                     ??___ftneg:	
  3045  005A                     ___ftmul@f2:	
  3046                           ; 1 bytes @ 0x3A
  3047                           
  3048                           
  3049                           ; 3 bytes @ 0x3A
  3050  005A                     	ds	3
  3051  005D                     ??___ftmul:	
  3052                           
  3053                           ; 1 bytes @ 0x3D
  3054  005D                     	ds	4
  3055  0061                     ___ftmul@exp:	
  3056                           
  3057                           ; 1 bytes @ 0x41
  3058  0061                     	ds	1
  3059  0062                     ___ftmul@f3_as_product:	
  3060                           
  3061                           ; 3 bytes @ 0x42
  3062  0062                     	ds	3
  3063  0065                     ___ftmul@cntr:	
  3064                           
  3065                           ; 1 bytes @ 0x45
  3066  0065                     	ds	1
  3067  0066                     ___ftmul@sign:	
  3068                           
  3069                           ; 1 bytes @ 0x46
  3070  0066                     	ds	1
  3071  0067                     ?_strtod:	
  3072  0067                     ?___fttol:	
  3073                           ; 3 bytes @ 0x47
  3074                           
  3075  0067                     strtod@res:	
  3076                           ; 4 bytes @ 0x47
  3077                           
  3078  0067                     ___fttol@f1:	
  3079                           ; 1 bytes @ 0x47
  3080                           
  3081                           
  3082                           ; 3 bytes @ 0x47
  3083  0067                     	ds	3
  3084  006A                     ??_strtod:	
  3085                           
  3086                           ; 1 bytes @ 0x4A
  3087  006A                     	ds	1
  3088  006B                     ??___fttol:	
  3089                           
  3090                           ; 1 bytes @ 0x4B
  3091  006B                     	ds	3
  3092  006E                     ??_atof:	
  3093  006E                     atof@s:	
  3094                           ; 1 bytes @ 0x4E
  3095                           
  3096                           
  3097                           ; 1 bytes @ 0x4E
  3098  006E                     	ds	1
  3099  006F                     ??_ftoa:	
  3100  006F                     ??_checkRxData:	
  3101                           ; 1 bytes @ 0x4F
  3102                           
  3103                           
  3104                           ; 1 bytes @ 0x4F
  3105  006F                     	ds	1
  3106                           
  3107                           	psect	maintext
  3108  0B4D                     __pmaintext:	
  3109 ;;
  3110 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  3111 ;;
  3112 ;; *************** function _main *****************
  3113 ;; Defined at:
  3114 ;;		line 220 in file "main.c"
  3115 ;; Parameters:    Size  Location     Type
  3116 ;;		None
  3117 ;; Auto vars:     Size  Location     Type
  3118 ;;  packet         33    1[BANK3 ] struct .
  3119 ;;  pipe            1    0[BANK3 ] unsigned char 
  3120 ;; Return value:  Size  Location     Type
  3121 ;;                  1    wreg      void 
  3122 ;; Registers used:
  3123 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3124 ;; Tracked objects:
  3125 ;;		On entry : B1F/0
  3126 ;;		On exit  : 0/0
  3127 ;;		Unchanged: 0/0
  3128 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3129 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3130 ;;      Locals:         0       0       0       0      34       0       0       0       0       0       0       0       
      +0       0
  3131 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  3132 ;;      Totals:         0       0       1       0      34       0       0       0       0       0       0       0       
      +0       0
  3133 ;;Total ram usage:       35 bytes
  3134 ;; Hardware stack levels required when called:   15
  3135 ;; This function calls:
  3136 ;;		___lwtoft
  3137 ;;		_loop
  3138 ;;		_nrf24l01GetPipe
  3139 ;;		_nrf24l01Init
  3140 ;;		_nrf24l01SendPacket
  3141 ;;		_nrf24l01SetRXPipe
  3142 ;;		_nrf24l01SetTXPipe
  3143 ;;		_setMessage
  3144 ;;		_sleep
  3145 ;;		_strcpy
  3146 ;; This function is called by:
  3147 ;;		Startup code after reset
  3148 ;; This function uses a non-reentrant model
  3149 ;;
  3150                           
  3151                           
  3152                           ;psect for function _main
  3153  0B4D                     _main:	
  3154                           
  3155                           ;main.c: 223: ANSELA = 0x00;
  3156                           
  3157                           ;incstack = 0
  3158                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3159  0B4D  0023               	movlb	3	; select bank3
  3160  0B4E  018C               	clrf	12	;volatile
  3161                           
  3162                           ;main.c: 224: ANSELC = 0x00;
  3163  0B4F  018E               	clrf	14	;volatile
  3164                           
  3165                           ;main.c: 226: ODCONA = 0x00;
  3166  0B50  0025               	movlb	5	; select bank5
  3167  0B51  018C               	clrf	12	;volatile
  3168                           
  3169                           ;main.c: 227: ODCONC = 0x00;
  3170  0B52  018E               	clrf	14	;volatile
  3171                           
  3172                           ;main.c: 232: INLVLA = 0x00;
  3173  0B53  0027               	movlb	7	; select bank7
  3174  0B54  018C               	clrf	12	;volatile
  3175                           
  3176                           ;main.c: 233: INLVLC = 0x00;
  3177  0B55  018E               	clrf	14	;volatile
  3178                           
  3179                           ;main.c: 235: WPUA = 0x00;
  3180  0B56  0024               	movlb	4	; select bank4
  3181  0B57  018C               	clrf	12	;volatile
  3182                           
  3183                           ;main.c: 236: WPUC = 0x00;
  3184  0B58  018E               	clrf	14	;volatile
  3185                           
  3186                           ;main.c: 238: TRISCbits.TRISC5 = 0;
  3187  0B59  0021               	movlb	1	; select bank1
  3188  0B5A  128E               	bcf	14,5	;volatile
  3189                           
  3190                           ;main.c: 239: TRISCbits.TRISC4 = 0;
  3191  0B5B  120E               	bcf	14,4	;volatile
  3192                           
  3193                           ;main.c: 241: PORTCbits.RC4 = 0;
  3194  0B5C  0020               	movlb	0	; select bank0
  3195  0B5D  120E               	bcf	14,4	;volatile
  3196                           
  3197                           ;main.c: 248: INTCONbits.PEIE = 0;
  3198  0B5E  130B               	bcf	11,6	;volatile
  3199                           
  3200                           ;main.c: 249: INTCONbits.GIE = 0;
  3201  0B5F  138B               	bcf	11,7	;volatile
  3202                           
  3203                           ;main.c: 251: OSCCON1bits.NOSC = 0b000;
  3204  0B60  308F               	movlw	-113
  3205  0B61  0032               	movlb	18	; select bank18
  3206  0B62  0599               	andwf	25,f	;volatile
  3207                           
  3208                           ;main.c: 252: OSCCON1bits.NDIV = 0b000;
  3209  0B63  30F0               	movlw	-16
  3210  0B64  0599               	andwf	25,f	;volatile
  3211                           
  3212                           ;main.c: 254: _delay((unsigned long)((10)*(32000000/4000.0)));
  3213  0B65  3068               	movlw	104
  3214  0B66  0021               	movlb	1	; select bank1
  3215  0B67  00EF               	movwf	??_main^(0+128)
  3216  0B68  30E4               	movlw	228
  3217  0B69                     u4477:	
  3218  0B69  0B89               	decfsz	9,f
  3219  0B6A  2B69               	goto	u4477
  3220  0B6B  0BEF               	decfsz	??_main^(0+128),f
  3221  0B6C  2B69               	goto	u4477
  3222  0B6D  0000               	nop
  3223                           
  3224                           ;main.c: 258: strcpy(romData->name, "UWT");
  3225  0B6E  0023               	movlb	3	; select bank3
  3226  0B6F  085A               	movf	_romData^(0+384),w
  3227  0B70  3E01               	addlw	1
  3228  0B71  0020               	movlb	0	; select bank0
  3229  0B72  00A0               	movwf	strcpy@to
  3230  0B73  3002               	movlw	2
  3231  0B74  00A1               	movwf	strcpy@to+1
  3232  0B75  3059               	movlw	low (STR_11| (0+32768))
  3233  0B76  00A2               	movwf	strcpy@from
  3234  0B77  3098               	movlw	high (STR_11| (0+32768))
  3235  0B78  00A3               	movwf	strcpy@from+1
  3236  0B79  3193  2399  318B   	fcall	_strcpy
  3237                           
  3238                           ;main.c: 260: nrf24l01Init();
  3239  0B7C  3194  248C  318B   	fcall	_nrf24l01Init
  3240                           
  3241                           ;main.c: 262: unsigned char pipe = nrf24l01GetPipe(romData->name);
  3242  0B7F  0023               	movlb	3	; select bank3
  3243  0B80  085A               	movf	_romData^(0+384),w
  3244  0B81  3E01               	addlw	1
  3245  0B82  3188  2000  318B   	fcall	_nrf24l01GetPipe
  3246  0B85  0021               	movlb	1	; select bank1
  3247  0B86  00EF               	movwf	??_main^(0+128)
  3248  0B87  086F               	movf	??_main^(0+128),w
  3249  0B88  0023               	movlb	3	; select bank3
  3250  0B89  00A0               	movwf	main@pipe^(0+384)
  3251                           
  3252                           ;main.c: 263: nrf24l01SetTXPipe(pipe);
  3253  0B8A  0820               	movf	main@pipe^(0+384),w
  3254  0B8B  3197  27BC  318B   	fcall	_nrf24l01SetTXPipe
  3255                           
  3256                           ;main.c: 264: nrf24l01SetRXPipe(pipe);
  3257  0B8E  0023               	movlb	3	; select bank3
  3258  0B8F  0820               	movf	main@pipe^(0+384),w
  3259  0B90  3194  2449  318B   	fcall	_nrf24l01SetRXPipe
  3260                           
  3261                           ;main.c: 268: ADCON0bits.ADON = 0;
  3262  0B93  0021               	movlb	1	; select bank1
  3263  0B94  101D               	bcf	29,0	;volatile
  3264                           
  3265                           ;main.c: 271: PORTAbits.RA4 = 0;
  3266  0B95  0020               	movlb	0	; select bank0
  3267  0B96  120C               	bcf	12,4	;volatile
  3268                           
  3269                           ;main.c: 272: TRISAbits.TRISA4 = 1;
  3270  0B97  0021               	movlb	1	; select bank1
  3271  0B98  160C               	bsf	12,4	;volatile
  3272                           
  3273                           ;main.c: 273: WPUAbits.WPUA4 = 0;
  3274  0B99  0024               	movlb	4	; select bank4
  3275  0B9A  120C               	bcf	12,4	;volatile
  3276                           
  3277                           ;main.c: 274: ODCONAbits.ODCA4 = 1;
  3278  0B9B  0025               	movlb	5	; select bank5
  3279  0B9C  160C               	bsf	12,4	;volatile
  3280                           
  3281                           ;main.c: 275: ANSELAbits.ANSA4 = 1;
  3282  0B9D  0023               	movlb	3	; select bank3
  3283  0B9E  160C               	bsf	12,4	;volatile
  3284                           
  3285                           ;main.c: 278: ANSELCbits.ANSC3 = 1;
  3286  0B9F  158E               	bsf	14,3	;volatile
  3287                           
  3288                           ;main.c: 279: TRISCbits.TRISC3 = 1;
  3289  0BA0  0021               	movlb	1	; select bank1
  3290  0BA1  158E               	bsf	14,3	;volatile
  3291                           
  3292                           ;main.c: 282: FVRCONbits.TSEN = 1;
  3293  0BA2  0022               	movlb	2	; select bank2
  3294  0BA3  1697               	bsf	23,5	;volatile
  3295                           
  3296                           ;main.c: 283: FVRCONbits.TSRNG = 1;
  3297  0BA4  1617               	bsf	23,4	;volatile
  3298                           
  3299                           ;main.c: 286: FVRCONbits.FVREN = 0;
  3300  0BA5  1397               	bcf	23,7	;volatile
  3301                           
  3302                           ;main.c: 287: FVRCONbits.ADFVR = 0b10;
  3303  0BA6  0817               	movf	23,w	;volatile
  3304  0BA7  39FC               	andlw	-4
  3305  0BA8  3802               	iorlw	2
  3306  0BA9  0097               	movwf	23	;volatile
  3307                           
  3308                           ;main.c: 289: ADCON1bits.ADCS = 0b111;
  3309  0BAA  3070               	movlw	112
  3310  0BAB  0021               	movlb	1	; select bank1
  3311  0BAC  049E               	iorwf	30,f	;volatile
  3312                           
  3313                           ;main.c: 290: ADCON1bits.ADFM = 1;
  3314  0BAD  179E               	bsf	30,7	;volatile
  3315                           
  3316                           ;main.c: 291: ADCON1bits.ADPREF = 0b11;
  3317  0BAE  3003               	movlw	3
  3318  0BAF  049E               	iorwf	30,f	;volatile
  3319                           
  3320                           ;main.c: 292: ADCON1bits.ADNREF = 0b00;
  3321  0BB0  111E               	bcf	30,2	;volatile
  3322                           
  3323                           ;main.c: 295: ADCON0bits.CHS = 3;
  3324  0BB1  081D               	movf	29,w	;volatile
  3325  0BB2  3903               	andlw	-253
  3326  0BB3  380C               	iorlw	12
  3327  0BB4  009D               	movwf	29	;volatile
  3328                           
  3329                           ;main.c: 300: TRISAbits.TRISA2 = 1;
  3330  0BB5  150C               	bsf	12,2	;volatile
  3331                           
  3332                           ;main.c: 301: PIE0bits.INTE = 1;
  3333  0BB6  1410               	bsf	16,0	;volatile
  3334                           
  3335                           ;main.c: 302: INTCONbits.INTEDG = 0;
  3336  0BB7  100B               	bcf	11,0	;volatile
  3337                           
  3338                           ;main.c: 305: TRISAbits.TRISA5 = 0;
  3339  0BB8  128C               	bcf	12,5	;volatile
  3340                           
  3341                           ;main.c: 306: PORTAbits.RA5 = 0;
  3342  0BB9  0020               	movlb	0	; select bank0
  3343  0BBA  128C               	bcf	12,5	;volatile
  3344                           
  3345                           ;main.c: 309: INTCONbits.PEIE = 1;
  3346  0BBB  170B               	bsf	11,6	;volatile
  3347                           
  3348                           ;main.c: 310: INTCONbits.GIE = 1;
  3349  0BBC  178B               	bsf	11,7	;volatile
  3350                           
  3351                           ;main.c: 312: nrf24l01Packet_t packet;;main.c: 314: setMessage(&packet, "BOOT", romData-
      +                          >bootMode);
  3352  0BBD  3050               	movlw	low (STR_12| (0+32768))
  3353  0BBE  0021               	movlb	1	; select bank1
  3354  0BBF  00B8               	movwf	setMessage@topic^(0+128)
  3355  0BC0  3098               	movlw	high (STR_12| (0+32768))
  3356  0BC1  00B9               	movwf	(setMessage@topic^(0+128)+1)
  3357  0BC2  0023               	movlb	3	; select bank3
  3358  0BC3  085A               	movf	_romData^(0+384),w
  3359  0BC4  3E11               	addlw	17
  3360  0BC5  0086               	movwf	6
  3361  0BC6  3002               	movlw	2	; select bank4/5
  3362  0BC7  0087               	movwf	7
  3363  0BC8  3F40               	moviw [0]fsr1
  3364  0BC9  0020               	movlb	0	; select bank0
  3365  0BCA  00A8               	movwf	___lwtoft@c
  3366  0BCB  3F41               	moviw [1]fsr1
  3367  0BCC  00A9               	movwf	___lwtoft@c+1
  3368  0BCD  3192  22E8  318B   	fcall	___lwtoft
  3369  0BD0  0020               	movlb	0	; select bank0
  3370  0BD1  0828               	movf	?___lwtoft,w
  3371  0BD2  0021               	movlb	1	; select bank1
  3372  0BD3  00BA               	movwf	setMessage@value^(0+128)
  3373  0BD4  0020               	movlb	0	; select bank0
  3374  0BD5  0829               	movf	?___lwtoft+1,w
  3375  0BD6  0021               	movlb	1	; select bank1
  3376  0BD7  00BB               	movwf	(setMessage@value+1)^(0+128)
  3377  0BD8  0020               	movlb	0	; select bank0
  3378  0BD9  082A               	movf	?___lwtoft+2,w
  3379  0BDA  0021               	movlb	1	; select bank1
  3380  0BDB  00BC               	movwf	(setMessage@value+2)^(0+128)
  3381  0BDC  30A1               	movlw	(low (main@packet| (0+256)))& (0+255)
  3382  0BDD  3189  2174  318B   	fcall	_setMessage
  3383                           
  3384                           ;main.c: 315: packet.packetData.byte = 0;
  3385  0BE0  0023               	movlb	3	; select bank3
  3386  0BE1  01A1               	clrf	main@packet^(0+384)
  3387                           
  3388                           ;main.c: 316: packet.packetData.ACKRequest = 0;
  3389  0BE2  1121               	bcf	main@packet^(0+384),2
  3390                           
  3391                           ;main.c: 317: nrf24l01SendPacket(&packet);
  3392  0BE3  30A1               	movlw	low main@packet
  3393  0BE4  0020               	movlb	0	; select bank0
  3394  0BE5  00A7               	movwf	nrf24l01SendPacket@Packet
  3395  0BE6  3001               	movlw	high main@packet
  3396  0BE7  00A8               	movwf	nrf24l01SendPacket@Packet+1
  3397  0BE8  318D  2550  318B   	fcall	_nrf24l01SendPacket
  3398                           
  3399                           ;main.c: 318: sleep(10);
  3400  0BEB  300A               	movlw	10
  3401  0BEC  3193  237E  318B   	fcall	_sleep
  3402  0BEF                     l4212:	
  3403                           ;main.c: 320: while(1){
  3404                           
  3405                           
  3406                           ;main.c: 321: loop();
  3407  0BEF  3184  24CE  318B   	fcall	_loop
  3408  0BF2  2BEF               	goto	l4212
  3409  0BF3                     __end_of_main:	
  3410                           ;main.c: 322: };main.c: 324: return;
  3411                           
  3412                           
  3413                           	psect	text1
  3414  148C                     __ptext1:	
  3415 ;; *************** function _nrf24l01Init *****************
  3416 ;; Defined at:
  3417 ;;		line 444 in file "nrf24l01.c"
  3418 ;; Parameters:    Size  Location     Type
  3419 ;;		None
  3420 ;; Auto vars:     Size  Location     Type
  3421 ;;		None
  3422 ;; Return value:  Size  Location     Type
  3423 ;;                  1    wreg      void 
  3424 ;; Registers used:
  3425 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3426 ;; Tracked objects:
  3427 ;;		On entry : 0/0
  3428 ;;		On exit  : 0/0
  3429 ;;		Unchanged: 0/0
  3430 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3431 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3432 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3433 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3434 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3435 ;;Total ram usage:        2 bytes
  3436 ;; Hardware stack levels used:    1
  3437 ;; Hardware stack levels required when called:   12
  3438 ;; This function calls:
  3439 ;;		_nrf24l01CEHigh
  3440 ;;		_nrf24l01CELow
  3441 ;;		_nrf24l01InitRegisters
  3442 ;;		_nrf24l01InterfaceInit
  3443 ;; This function is called by:
  3444 ;;		_main
  3445 ;; This function uses a non-reentrant model
  3446 ;;
  3447                           
  3448                           
  3449                           ;psect for function _nrf24l01Init
  3450  148C                     _nrf24l01Init:	
  3451                           
  3452                           ;nrf24l01.c: 447: nrf24l01InterfaceInit();
  3453                           
  3454                           ;incstack = 0
  3455                           ; Regs used in _nrf24l01Init: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3456  148C  3193  23D0  3194   	fcall	_nrf24l01InterfaceInit
  3457                           
  3458                           ;nrf24l01.c: 452: nrf24l01CELow();
  3459  148F  3192  2254  3194   	fcall	_nrf24l01CELow
  3460                           
  3461                           ;nrf24l01.c: 454: _delay((unsigned long)((50000)*(32000000/4000000.0)));
  3462  1492  3003               	movlw	3
  3463  1493  0020               	movlb	0	; select bank0
  3464  1494  00B4               	movwf	??_nrf24l01Init+1
  3465  1495  3008               	movlw	8
  3466  1496  00B3               	movwf	??_nrf24l01Init
  3467  1497  3077               	movlw	119
  3468  1498                     u4487:	
  3469  1498  0B89               	decfsz	9,f
  3470  1499  2C98               	goto	u4487
  3471  149A  0BB3               	decfsz	??_nrf24l01Init,f
  3472  149B  2C98               	goto	u4487
  3473  149C  0BB4               	decfsz	??_nrf24l01Init+1,f
  3474  149D  2C98               	goto	u4487
  3475                           
  3476                           ;nrf24l01.c: 456: nrf24l01InitRegisters();
  3477  149E  3186  2656  3194   	fcall	_nrf24l01InitRegisters
  3478                           
  3479                           ;nrf24l01.c: 458: _delay((unsigned long)((50000)*(32000000/4000000.0)));
  3480  14A1  3003               	movlw	3
  3481  14A2  0020               	movlb	0	; select bank0
  3482  14A3  00B4               	movwf	??_nrf24l01Init+1
  3483  14A4  3008               	movlw	8
  3484  14A5  00B3               	movwf	??_nrf24l01Init
  3485  14A6  3077               	movlw	119
  3486  14A7                     u4497:	
  3487  14A7  0B89               	decfsz	9,f
  3488  14A8  2CA7               	goto	u4497
  3489  14A9  0BB3               	decfsz	??_nrf24l01Init,f
  3490  14AA  2CA7               	goto	u4497
  3491  14AB  0BB4               	decfsz	??_nrf24l01Init+1,f
  3492  14AC  2CA7               	goto	u4497
  3493                           
  3494                           ;nrf24l01.c: 460: nrf24l01CEHigh();
  3495  14AD  3192  2251         	fcall	_nrf24l01CEHigh
  3496  14AF  0008               	return
  3497  14B0                     __end_of_nrf24l01Init:	
  3498                           
  3499                           	psect	text2
  3500  13D0                     __ptext2:	
  3501 ;; *************** function _nrf24l01InterfaceInit *****************
  3502 ;; Defined at:
  3503 ;;		line 27 in file "interface.c"
  3504 ;; Parameters:    Size  Location     Type
  3505 ;;		None
  3506 ;; Auto vars:     Size  Location     Type
  3507 ;;		None
  3508 ;; Return value:  Size  Location     Type
  3509 ;;                  1    wreg      void 
  3510 ;; Registers used:
  3511 ;;		wreg, status,2, status,0
  3512 ;; Tracked objects:
  3513 ;;		On entry : 0/0
  3514 ;;		On exit  : 0/0
  3515 ;;		Unchanged: 0/0
  3516 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3517 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3518 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3519 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3520 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3521 ;;Total ram usage:        0 bytes
  3522 ;; Hardware stack levels used:    1
  3523 ;; Hardware stack levels required when called:    7
  3524 ;; This function calls:
  3525 ;;		Nothing
  3526 ;; This function is called by:
  3527 ;;		_nrf24l01Init
  3528 ;; This function uses a non-reentrant model
  3529 ;;
  3530                           
  3531                           
  3532                           ;psect for function _nrf24l01InterfaceInit
  3533  13D0                     _nrf24l01InterfaceInit:	
  3534                           
  3535                           ;interface.c: 29: TRISAbits.TRISA0 = 0;
  3536                           
  3537                           ;incstack = 0
  3538                           ; Regs used in _nrf24l01InterfaceInit: [wreg+status,2+status,0]
  3539  13D0  0021               	movlb	1	; select bank1
  3540  13D1  100C               	bcf	12,0	;volatile
  3541                           
  3542                           ;interface.c: 30: TRISAbits.TRISA1 = 0;
  3543  13D2  108C               	bcf	12,1	;volatile
  3544                           
  3545                           ;interface.c: 32: TRISCbits.TRISC1 = 1;
  3546  13D3  148E               	bsf	14,1	;volatile
  3547                           
  3548                           ;interface.c: 33: TRISCbits.TRISC2 = 0;
  3549  13D4  110E               	bcf	14,2	;volatile
  3550                           
  3551                           ;interface.c: 34: TRISCbits.TRISC0 = 0;
  3552  13D5  100E               	bcf	14,0	;volatile
  3553                           
  3554                           ;interface.c: 36: SSP1CON1bits.SSPEN = 0;
  3555  13D6  0024               	movlb	4	; select bank4
  3556  13D7  1295               	bcf	21,5	;volatile
  3557                           
  3558                           ;interface.c: 38: RC1PPSbits.RC1PPS = 0b10001;
  3559  13D8  003D               	movlb	29	; select bank29
  3560  13D9  0821               	movf	33,w	;volatile
  3561  13DA  39E0               	andlw	-32
  3562  13DB  3811               	iorlw	17
  3563  13DC  00A1               	movwf	33	;volatile
  3564                           
  3565                           ;interface.c: 39: RC2PPSbits.RC2PPS = 0b11001;
  3566  13DD  0822               	movf	34,w	;volatile
  3567  13DE  39E0               	andlw	-32
  3568  13DF  3819               	iorlw	25
  3569  13E0  00A2               	movwf	34	;volatile
  3570                           
  3571                           ;interface.c: 40: RC0PPSbits.RC0PPS = 0b11000;
  3572  13E1  0820               	movf	32,w	;volatile
  3573  13E2  39E0               	andlw	-32
  3574  13E3  3818               	iorlw	24
  3575  13E4  00A0               	movwf	32	;volatile
  3576                           
  3577                           ;interface.c: 42: SSP1CON1bits.CKP = 0;
  3578  13E5  0024               	movlb	4	; select bank4
  3579  13E6  1215               	bcf	21,4	;volatile
  3580                           
  3581                           ;interface.c: 43: SSP1STATbits.CKE = 1;
  3582  13E7  1714               	bsf	20,6	;volatile
  3583                           
  3584                           ;interface.c: 44: SSP1CON1bits.SSPM = 0b0000;
  3585  13E8  30F0               	movlw	-16
  3586  13E9  0595               	andwf	21,f	;volatile
  3587                           
  3588                           ;interface.c: 46: SSP1CON1bits.SSPEN = 1;
  3589  13EA  1695               	bsf	21,5	;volatile
  3590  13EB  0008               	return
  3591  13EC                     __end_of_nrf24l01InterfaceInit:	
  3592                           
  3593                           	psect	text3
  3594  0656                     __ptext3:	
  3595 ;; *************** function _nrf24l01InitRegisters *****************
  3596 ;; Defined at:
  3597 ;;		line 343 in file "nrf24l01.c"
  3598 ;; Parameters:    Size  Location     Type
  3599 ;;		None
  3600 ;; Auto vars:     Size  Location     Type
  3601 ;;  i               2   17[BANK0 ] unsigned int 
  3602 ;;  config          1   16[BANK0 ] struct .
  3603 ;;  DynPD           1   15[BANK0 ] struct .
  3604 ;;  enAA            1   14[BANK0 ] struct .
  3605 ;;  status          1   13[BANK0 ] struct .
  3606 ;;  rfSetup         1   12[BANK0 ] struct .
  3607 ;;  feature         1   11[BANK0 ] struct .
  3608 ;;  setupAW         1   10[BANK0 ] struct .
  3609 ;;  channel         1    9[BANK0 ] struct .
  3610 ;; Return value:  Size  Location     Type
  3611 ;;                  1    wreg      void 
  3612 ;; Registers used:
  3613 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3614 ;; Tracked objects:
  3615 ;;		On entry : 0/0
  3616 ;;		On exit  : 0/0
  3617 ;;		Unchanged: 0/0
  3618 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3619 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3620 ;;      Locals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3621 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3622 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3623 ;;Total ram usage:       12 bytes
  3624 ;; Hardware stack levels used:    1
  3625 ;; Hardware stack levels required when called:   11
  3626 ;; This function calls:
  3627 ;;		___bmul
  3628 ;;		_nrf24l01SPIEnd
  3629 ;;		_nrf24l01SPISend
  3630 ;;		_nrf24l01SPIStart
  3631 ;;		_nrf24l01Send
  3632 ;;		_nrf24l01SetRXPipe
  3633 ;;		_nrf24l01SetTXPipe
  3634 ;; This function is called by:
  3635 ;;		_nrf24l01Init
  3636 ;; This function uses a non-reentrant model
  3637 ;;
  3638                           
  3639                           
  3640                           ;psect for function _nrf24l01InitRegisters
  3641  0656                     _nrf24l01InitRegisters:	
  3642                           
  3643                           ;nrf24l01.c: 345: n_CONFIG_t config;;nrf24l01.c: 347: config.PWR_UP = 0;
  3644                           
  3645                           ;incstack = 0
  3646                           ; Regs used in _nrf24l01InitRegisters: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3647  0656  0020               	movlb	0	; select bank0
  3648  0657  10B0               	bcf	nrf24l01InitRegisters@config,1
  3649                           
  3650                           ;nrf24l01.c: 348: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x00, config.byte);
  3651  0658  0830               	movf	nrf24l01InitRegisters@config,w
  3652  0659  00A7               	movwf	??_nrf24l01InitRegisters
  3653  065A  0827               	movf	??_nrf24l01InitRegisters,w
  3654  065B  00A0               	movwf	nrf24l01Send@data
  3655  065C  3020               	movlw	32
  3656  065D  3194  2429  3186   	fcall	_nrf24l01Send
  3657                           
  3658                           ;nrf24l01.c: 350: n_SETUP_AW_t setupAW;;nrf24l01.c: 351: setupAW.byte = 0x00;
  3659  0660  0020               	movlb	0	; select bank0
  3660  0661  01AA               	clrf	nrf24l01InitRegisters@setupAW
  3661                           
  3662                           ;nrf24l01.c: 352: setupAW.AW = 0b11;
  3663  0662  3003               	movlw	3
  3664  0663  04AA               	iorwf	nrf24l01InitRegisters@setupAW,f
  3665                           
  3666                           ;nrf24l01.c: 353: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x02, setupAW.byte);
  3667  0664  082A               	movf	nrf24l01InitRegisters@setupAW,w
  3668  0665  00A7               	movwf	??_nrf24l01InitRegisters
  3669  0666  0827               	movf	??_nrf24l01InitRegisters,w
  3670  0667  00A0               	movwf	nrf24l01Send@data
  3671  0668  3022               	movlw	34
  3672  0669  3194  2429  3186   	fcall	_nrf24l01Send
  3673                           
  3674                           ;nrf24l01.c: 356: n_RF_CH_t channel;;nrf24l01.c: 357: channel.RF_CH = 2;
  3675  066C  0020               	movlb	0	; select bank0
  3676  066D  0829               	movf	nrf24l01InitRegisters@channel,w
  3677  066E  3980               	andlw	-128
  3678  066F  3802               	iorlw	2
  3679  0670  00A9               	movwf	nrf24l01InitRegisters@channel
  3680                           
  3681                           ;nrf24l01.c: 358: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x05, channel.byte);
  3682  0671  0829               	movf	nrf24l01InitRegisters@channel,w
  3683  0672  00A7               	movwf	??_nrf24l01InitRegisters
  3684  0673  0827               	movf	??_nrf24l01InitRegisters,w
  3685  0674  00A0               	movwf	nrf24l01Send@data
  3686  0675  3025               	movlw	37
  3687  0676  3194  2429  3186   	fcall	_nrf24l01Send
  3688                           
  3689                           ;nrf24l01.c: 361: n_RF_SETUP_t rfSetup;;nrf24l01.c: 362: rfSetup.byte = 0x00;
  3690  0679  0020               	movlb	0	; select bank0
  3691  067A  01AC               	clrf	nrf24l01InitRegisters@rfSetup
  3692                           
  3693                           ;nrf24l01.c: 363: rfSetup.RF_DR_LOW = 0;
  3694  067B  12AC               	bcf	nrf24l01InitRegisters@rfSetup,5
  3695                           
  3696                           ;nrf24l01.c: 364: rfSetup.RF_DR_HIGH = 1;
  3697  067C  15AC               	bsf	nrf24l01InitRegisters@rfSetup,3
  3698                           
  3699                           ;nrf24l01.c: 365: rfSetup.RF_PWR = 3;
  3700  067D  3006               	movlw	6
  3701  067E  04AC               	iorwf	nrf24l01InitRegisters@rfSetup,f
  3702                           
  3703                           ;nrf24l01.c: 366: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x06, rfSetup.byte);
  3704  067F  082C               	movf	nrf24l01InitRegisters@rfSetup,w
  3705  0680  00A7               	movwf	??_nrf24l01InitRegisters
  3706  0681  0827               	movf	??_nrf24l01InitRegisters,w
  3707  0682  00A0               	movwf	nrf24l01Send@data
  3708  0683  3026               	movlw	38
  3709  0684  3194  2429  3186   	fcall	_nrf24l01Send
  3710                           
  3711                           ;nrf24l01.c: 369: nrf24l01SetRXPipe(0xFF);
  3712  0687  30FF               	movlw	255
  3713  0688  3194  2449  3186   	fcall	_nrf24l01SetRXPipe
  3714                           
  3715                           ;nrf24l01.c: 372: n_EN_AA_t enAA;;nrf24l01.c: 373: enAA.byte = nrf24l01Send((unsigned) 0
      +                          b00000000 | (unsigned) 0x01, 0);
  3716  068B  0020               	movlb	0	; select bank0
  3717  068C  01A0               	clrf	nrf24l01Send@data
  3718  068D  3001               	movlw	1
  3719  068E  3194  2429  3186   	fcall	_nrf24l01Send
  3720  0691  0020               	movlb	0	; select bank0
  3721  0692  00A7               	movwf	??_nrf24l01InitRegisters
  3722  0693  0827               	movf	??_nrf24l01InitRegisters,w
  3723  0694  00AE               	movwf	nrf24l01InitRegisters@enAA
  3724                           
  3725                           ;nrf24l01.c: 374: enAA.ENAA_P0 = 0;
  3726  0695  102E               	bcf	nrf24l01InitRegisters@enAA,0
  3727                           
  3728                           ;nrf24l01.c: 375: enAA.ENAA_P1 = 0;
  3729  0696  10AE               	bcf	nrf24l01InitRegisters@enAA,1
  3730                           
  3731                           ;nrf24l01.c: 376: enAA.ENAA_P2 = 0;
  3732  0697  112E               	bcf	nrf24l01InitRegisters@enAA,2
  3733                           
  3734                           ;nrf24l01.c: 377: enAA.ENAA_P3 = 0;
  3735  0698  11AE               	bcf	nrf24l01InitRegisters@enAA,3
  3736                           
  3737                           ;nrf24l01.c: 378: enAA.ENAA_P4 = 0;
  3738  0699  122E               	bcf	nrf24l01InitRegisters@enAA,4
  3739                           
  3740                           ;nrf24l01.c: 379: enAA.ENAA_P5 = 0;
  3741  069A  12AE               	bcf	nrf24l01InitRegisters@enAA,5
  3742                           
  3743                           ;nrf24l01.c: 380: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x01, enAA.byte);
  3744  069B  082E               	movf	nrf24l01InitRegisters@enAA,w
  3745  069C  00A7               	movwf	??_nrf24l01InitRegisters
  3746  069D  0827               	movf	??_nrf24l01InitRegisters,w
  3747  069E  00A0               	movwf	nrf24l01Send@data
  3748  069F  3021               	movlw	33
  3749  06A0  3194  2429  3186   	fcall	_nrf24l01Send
  3750                           
  3751                           ;nrf24l01.c: 384: n_FEATURE_t feature;;nrf24l01.c: 385: feature.byte = nrf24l01Send((uns
      +                          igned) 0b00000000 | (unsigned) 0x1D, 0);
  3752  06A3  0020               	movlb	0	; select bank0
  3753  06A4  01A0               	clrf	nrf24l01Send@data
  3754  06A5  301D               	movlw	29
  3755  06A6  3194  2429  3186   	fcall	_nrf24l01Send
  3756  06A9  0020               	movlb	0	; select bank0
  3757  06AA  00A7               	movwf	??_nrf24l01InitRegisters
  3758  06AB  0827               	movf	??_nrf24l01InitRegisters,w
  3759  06AC  00AB               	movwf	nrf24l01InitRegisters@feature
  3760                           
  3761                           ;nrf24l01.c: 386: feature.EN_DPL = 1;
  3762  06AD  152B               	bsf	nrf24l01InitRegisters@feature,2
  3763                           
  3764                           ;nrf24l01.c: 387: feature.EN_DYN_ACK = 1;
  3765  06AE  142B               	bsf	nrf24l01InitRegisters@feature,0
  3766                           
  3767                           ;nrf24l01.c: 388: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x1D, feature.byte);
  3768  06AF  082B               	movf	nrf24l01InitRegisters@feature,w
  3769  06B0  00A7               	movwf	??_nrf24l01InitRegisters
  3770  06B1  0827               	movf	??_nrf24l01InitRegisters,w
  3771  06B2  00A0               	movwf	nrf24l01Send@data
  3772  06B3  303D               	movlw	61
  3773  06B4  3194  2429  3186   	fcall	_nrf24l01Send
  3774                           
  3775                           ;nrf24l01.c: 390: n_DYNPD_t DynPD;;nrf24l01.c: 391: DynPD.byte = nrf24l01Send((unsigned)
      +                           0b00000000 | (unsigned) 0x1C, 0);
  3776  06B7  0020               	movlb	0	; select bank0
  3777  06B8  01A0               	clrf	nrf24l01Send@data
  3778  06B9  301C               	movlw	28
  3779  06BA  3194  2429  3186   	fcall	_nrf24l01Send
  3780  06BD  0020               	movlb	0	; select bank0
  3781  06BE  00A7               	movwf	??_nrf24l01InitRegisters
  3782  06BF  0827               	movf	??_nrf24l01InitRegisters,w
  3783  06C0  00AF               	movwf	nrf24l01InitRegisters@DynPD
  3784                           
  3785                           ;nrf24l01.c: 392: DynPD.DPL_P0 = 1;
  3786  06C1  142F               	bsf	nrf24l01InitRegisters@DynPD,0
  3787                           
  3788                           ;nrf24l01.c: 393: DynPD.DPL_P1 = 1;
  3789  06C2  14AF               	bsf	nrf24l01InitRegisters@DynPD,1
  3790                           
  3791                           ;nrf24l01.c: 394: DynPD.DPL_P2 = 1;
  3792  06C3  152F               	bsf	nrf24l01InitRegisters@DynPD,2
  3793                           
  3794                           ;nrf24l01.c: 395: DynPD.DPL_P3 = 1;
  3795  06C4  15AF               	bsf	nrf24l01InitRegisters@DynPD,3
  3796                           
  3797                           ;nrf24l01.c: 396: DynPD.DPL_P4 = 1;
  3798  06C5  162F               	bsf	nrf24l01InitRegisters@DynPD,4
  3799                           
  3800                           ;nrf24l01.c: 397: DynPD.DPL_P5 = 1;
  3801  06C6  16AF               	bsf	nrf24l01InitRegisters@DynPD,5
  3802                           
  3803                           ;nrf24l01.c: 398: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x1C, DynPD.byte);
  3804  06C7  082F               	movf	nrf24l01InitRegisters@DynPD,w
  3805  06C8  00A7               	movwf	??_nrf24l01InitRegisters
  3806  06C9  0827               	movf	??_nrf24l01InitRegisters,w
  3807  06CA  00A0               	movwf	nrf24l01Send@data
  3808  06CB  303C               	movlw	60
  3809  06CC  3194  2429  3186   	fcall	_nrf24l01Send
  3810                           
  3811                           ;nrf24l01.c: 401: unsigned int i;;nrf24l01.c: 402: for (i = 0; i < 6; i++){
  3812  06CF  0020               	movlb	0	; select bank0
  3813  06D0  01B1               	clrf	nrf24l01InitRegisters@i
  3814  06D1  01B2               	clrf	nrf24l01InitRegisters@i+1
  3815  06D2  3000               	movlw	0
  3816  06D3  0232               	subwf	nrf24l01InitRegisters@i+1,w
  3817  06D4  3006               	movlw	6
  3818  06D5  1903               	skipnz
  3819  06D6  0231               	subwf	nrf24l01InitRegisters@i,w
  3820  06D7  1803               	btfsc	3,0
  3821  06D8  2F32               	goto	l3930
  3822  06D9                     l3916:	
  3823                           
  3824                           ;nrf24l01.c: 404: nrf24l01SPIStart();
  3825  06D9  3192  226F  3186   	fcall	_nrf24l01SPIStart
  3826                           
  3827                           ;nrf24l01.c: 405: nrf24l01SPISend((unsigned) 0b00100000 | ((unsigned) 0x0A + i));
  3828  06DC  0020               	movlb	0	; select bank0
  3829  06DD  0831               	movf	nrf24l01InitRegisters@i,w
  3830  06DE  3E0A               	addlw	10
  3831  06DF  3820               	iorlw	32
  3832  06E0  3192  2280  3186   	fcall	_nrf24l01SPISend
  3833                           
  3834                           ;nrf24l01.c: 407: nrf24l01SPISend(n_ADDRESS_P0[4] + (n_ADDRESS_MUL * i));
  3835  06E3  3045               	movlw	low ((_n_ADDRESS_P0+4)| (0+32768))
  3836  06E4  0084               	movwf	4
  3837  06E5  3098               	movlw	high ((_n_ADDRESS_P0+4)| (0+32768))
  3838  06E6  0085               	movwf	5
  3839  06E7  0800               	movf	0,w	;code access
  3840  06E8  0020               	movlb	0	; select bank0
  3841  06E9  00A7               	movwf	??_nrf24l01InitRegisters
  3842  06EA  0831               	movf	nrf24l01InitRegisters@i,w
  3843  06EB  00A8               	movwf	??_nrf24l01InitRegisters+1
  3844  06EC  0828               	movf	??_nrf24l01InitRegisters+1,w
  3845  06ED  00A0               	movwf	___bmul@multiplicand
  3846  06EE  3028               	movlw	low (_n_ADDRESS_MUL| (0+32768))
  3847  06EF  0084               	movwf	4
  3848  06F0  3098               	movlw	high (_n_ADDRESS_MUL| (0+32768))
  3849  06F1  0085               	movwf	5
  3850  06F2  0800               	movf	0,w	;code access
  3851  06F3  3192  229C  3186   	fcall	___bmul
  3852  06F6  0020               	movlb	0	; select bank0
  3853  06F7  0727               	addwf	??_nrf24l01InitRegisters,w
  3854  06F8  3192  2280  3186   	fcall	_nrf24l01SPISend
  3855                           
  3856                           ;nrf24l01.c: 409: if (i < 2){
  3857  06FB  3000               	movlw	0
  3858  06FC  0020               	movlb	0	; select bank0
  3859  06FD  0232               	subwf	nrf24l01InitRegisters@i+1,w
  3860  06FE  3002               	movlw	2
  3861  06FF  1903               	skipnz
  3862  0700  0231               	subwf	nrf24l01InitRegisters@i,w
  3863  0701  1803               	skipnc
  3864  0702  2F23               	goto	l3924
  3865                           
  3866                           ;nrf24l01.c: 410: nrf24l01SPISend(n_ADDRESS_P0[3]);
  3867  0703  3044               	movlw	low ((_n_ADDRESS_P0+3)| (0+32768))
  3868  0704  0084               	movwf	4
  3869  0705  3098               	movlw	high ((_n_ADDRESS_P0+3)| (0+32768))
  3870  0706  0085               	movwf	5
  3871  0707  0800               	movf	0,w	;code access
  3872  0708  3192  2280  3186   	fcall	_nrf24l01SPISend
  3873                           
  3874                           ;nrf24l01.c: 411: nrf24l01SPISend(n_ADDRESS_P0[2]);
  3875  070B  3043               	movlw	low ((_n_ADDRESS_P0+2)| (0+32768))
  3876  070C  0084               	movwf	4
  3877  070D  3098               	movlw	high ((_n_ADDRESS_P0+2)| (0+32768))
  3878  070E  0085               	movwf	5
  3879  070F  0800               	movf	0,w	;code access
  3880  0710  3192  2280  3186   	fcall	_nrf24l01SPISend
  3881                           
  3882                           ;nrf24l01.c: 412: nrf24l01SPISend(n_ADDRESS_P0[1]);
  3883  0713  3042               	movlw	low ((_n_ADDRESS_P0+1)| (0+32768))
  3884  0714  0084               	movwf	4
  3885  0715  3098               	movlw	high ((_n_ADDRESS_P0+1)| (0+32768))
  3886  0716  0085               	movwf	5
  3887  0717  0800               	movf	0,w	;code access
  3888  0718  3192  2280  3186   	fcall	_nrf24l01SPISend
  3889                           
  3890                           ;nrf24l01.c: 413: nrf24l01SPISend(n_ADDRESS_P0[0]);
  3891  071B  3041               	movlw	low (_n_ADDRESS_P0| (0+32768))
  3892  071C  0084               	movwf	4
  3893  071D  3098               	movlw	high (_n_ADDRESS_P0| (0+32768))
  3894  071E  0085               	movwf	5
  3895  071F  0800               	movf	0,w	;code access
  3896  0720  3192  2280  3186   	fcall	_nrf24l01SPISend
  3897  0723                     l3924:	
  3898                           
  3899                           ;nrf24l01.c: 414: };nrf24l01.c: 416: nrf24l01SPIEnd();
  3900  0723  3192  2260  3186   	fcall	_nrf24l01SPIEnd
  3901  0726  3001               	movlw	1
  3902  0727  0020               	movlb	0	; select bank0
  3903  0728  07B1               	addwf	nrf24l01InitRegisters@i,f
  3904  0729  3000               	movlw	0
  3905  072A  3DB2               	addwfc	nrf24l01InitRegisters@i+1,f
  3906  072B  3000               	movlw	0
  3907  072C  0232               	subwf	nrf24l01InitRegisters@i+1,w
  3908  072D  3006               	movlw	6
  3909  072E  1903               	skipnz
  3910  072F  0231               	subwf	nrf24l01InitRegisters@i,w
  3911  0730  1C03               	skipc
  3912  0731  2ED9               	goto	l3916
  3913  0732                     l3930:	
  3914                           
  3915                           ;nrf24l01.c: 417: };nrf24l01.c: 419: nrf24l01SetTXPipe(0);
  3916  0732  3000               	movlw	0
  3917  0733  3197  27BC  3186   	fcall	_nrf24l01SetTXPipe
  3918                           
  3919                           ;nrf24l01.c: 423: n_STATUS_t status;;nrf24l01.c: 424: status.byte = 0x00;
  3920  0736  0020               	movlb	0	; select bank0
  3921  0737  01AD               	clrf	nrf24l01InitRegisters@status
  3922                           
  3923                           ;nrf24l01.c: 425: status.RX_DR = 1;
  3924  0738  172D               	bsf	nrf24l01InitRegisters@status,6
  3925                           
  3926                           ;nrf24l01.c: 426: status.TX_DS = 1;
  3927  0739  16AD               	bsf	nrf24l01InitRegisters@status,5
  3928                           
  3929                           ;nrf24l01.c: 427: status.MAX_RT = 1;
  3930  073A  162D               	bsf	nrf24l01InitRegisters@status,4
  3931                           
  3932                           ;nrf24l01.c: 428: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x07, status.byte);
  3933  073B  082D               	movf	nrf24l01InitRegisters@status,w
  3934  073C  00A7               	movwf	??_nrf24l01InitRegisters
  3935  073D  0827               	movf	??_nrf24l01InitRegisters,w
  3936  073E  00A0               	movwf	nrf24l01Send@data
  3937  073F  3027               	movlw	39
  3938  0740  3194  2429  3186   	fcall	_nrf24l01Send
  3939                           
  3940                           ;nrf24l01.c: 431: nrf24l01Send((unsigned) 0b11100001, 0);
  3941  0743  0020               	movlb	0	; select bank0
  3942  0744  01A0               	clrf	nrf24l01Send@data
  3943  0745  30E1               	movlw	225
  3944  0746  3194  2429  3186   	fcall	_nrf24l01Send
  3945                           
  3946                           ;nrf24l01.c: 432: nrf24l01Send((unsigned) 0b11100010, 0);
  3947  0749  0020               	movlb	0	; select bank0
  3948  074A  01A0               	clrf	nrf24l01Send@data
  3949  074B  30E2               	movlw	226
  3950  074C  3194  2429  3186   	fcall	_nrf24l01Send
  3951                           
  3952                           ;nrf24l01.c: 435: config.PRIM_RX = 1;
  3953  074F  0020               	movlb	0	; select bank0
  3954  0750  1430               	bsf	nrf24l01InitRegisters@config,0
  3955                           
  3956                           ;nrf24l01.c: 436: config.EN_CRC = 1;
  3957  0751  15B0               	bsf	nrf24l01InitRegisters@config,3
  3958                           
  3959                           ;nrf24l01.c: 437: config.CRCO = 1;
  3960  0752  1530               	bsf	nrf24l01InitRegisters@config,2
  3961                           
  3962                           ;nrf24l01.c: 438: config.PWR_UP = 1;
  3963  0753  14B0               	bsf	nrf24l01InitRegisters@config,1
  3964                           
  3965                           ;nrf24l01.c: 439: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x00, config.byte);
  3966  0754  0830               	movf	nrf24l01InitRegisters@config,w
  3967  0755  00A7               	movwf	??_nrf24l01InitRegisters
  3968  0756  0827               	movf	??_nrf24l01InitRegisters,w
  3969  0757  00A0               	movwf	nrf24l01Send@data
  3970  0758  3020               	movlw	32
  3971  0759  3194  2429         	fcall	_nrf24l01Send
  3972  075B  0008               	return
  3973  075C                     __end_of_nrf24l01InitRegisters:	
  3974                           
  3975                           	psect	text4
  3976  1449                     __ptext4:	
  3977 ;; *************** function _nrf24l01SetRXPipe *****************
  3978 ;; Defined at:
  3979 ;;		line 322 in file "nrf24l01.c"
  3980 ;; Parameters:    Size  Location     Type
  3981 ;;  pipe            1    wreg     unsigned char 
  3982 ;; Auto vars:     Size  Location     Type
  3983 ;;  pipe            1    5[BANK0 ] unsigned char 
  3984 ;;  enRXAddr        1    6[BANK0 ] struct .
  3985 ;; Return value:  Size  Location     Type
  3986 ;;                  1    wreg      void 
  3987 ;; Registers used:
  3988 ;;		wreg, status,2, status,0, pclath, cstack
  3989 ;; Tracked objects:
  3990 ;;		On entry : 0/0
  3991 ;;		On exit  : 0/0
  3992 ;;		Unchanged: 0/0
  3993 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3994 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3995 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3996 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3997 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3998 ;;Total ram usage:        4 bytes
  3999 ;; Hardware stack levels used:    1
  4000 ;; Hardware stack levels required when called:   10
  4001 ;; This function calls:
  4002 ;;		_nrf24l01Send
  4003 ;; This function is called by:
  4004 ;;		_main
  4005 ;;		_nrf24l01InitRegisters
  4006 ;; This function uses a non-reentrant model
  4007 ;;
  4008                           
  4009                           
  4010                           ;psect for function _nrf24l01SetRXPipe
  4011  1449                     _nrf24l01SetRXPipe:	
  4012                           
  4013                           ;incstack = 0
  4014                           ; Regs used in _nrf24l01SetRXPipe: [wreg+status,2+status,0+pclath+cstack]
  4015                           ;nrf24l01SetRXPipe@pipe stored from wreg
  4016  1449  0020               	movlb	0	; select bank0
  4017  144A  00A5               	movwf	nrf24l01SetRXPipe@pipe
  4018                           
  4019                           ;nrf24l01.c: 324: n_EN_RXADDR_t enRXAddr;;nrf24l01.c: 326: if (pipe > 5){
  4020  144B  3006               	movlw	6
  4021  144C  0225               	subwf	nrf24l01SetRXPipe@pipe,w
  4022  144D  1C03               	skipc
  4023  144E  2C56               	goto	l335
  4024                           
  4025                           ;nrf24l01.c: 327: enRXAddr.ERX_P0 = 1;
  4026  144F  1426               	bsf	nrf24l01SetRXPipe@enRXAddr,0
  4027                           
  4028                           ;nrf24l01.c: 328: enRXAddr.ERX_P1 = 1;
  4029  1450  14A6               	bsf	nrf24l01SetRXPipe@enRXAddr,1
  4030                           
  4031                           ;nrf24l01.c: 329: enRXAddr.ERX_P2 = 1;
  4032  1451  1526               	bsf	nrf24l01SetRXPipe@enRXAddr,2
  4033                           
  4034                           ;nrf24l01.c: 330: enRXAddr.ERX_P3 = 1;
  4035  1452  15A6               	bsf	nrf24l01SetRXPipe@enRXAddr,3
  4036                           
  4037                           ;nrf24l01.c: 331: enRXAddr.ERX_P4 = 1;
  4038  1453  1626               	bsf	nrf24l01SetRXPipe@enRXAddr,4
  4039                           
  4040                           ;nrf24l01.c: 332: enRXAddr.ERX_P5 = 1;
  4041  1454  16A6               	bsf	nrf24l01SetRXPipe@enRXAddr,5
  4042                           
  4043                           ;nrf24l01.c: 333: }
  4044  1455  2C62               	goto	l3666
  4045  1456                     l335:	
  4046                           
  4047                           ;nrf24l01.c: 335: else{;nrf24l01.c: 336: enRXAddr.ERX_P0 = 1;
  4048  1456  1426               	bsf	nrf24l01SetRXPipe@enRXAddr,0
  4049                           
  4050                           ;nrf24l01.c: 337: enRXAddr.byte = (unsigned) enRXAddr.byte << pipe;
  4051  1457  0826               	movf	nrf24l01SetRXPipe@enRXAddr,w
  4052  1458  00A3               	movwf	??_nrf24l01SetRXPipe
  4053  1459  0A25               	incf	nrf24l01SetRXPipe@pipe,w
  4054  145A  2C5C               	goto	u4124
  4055  145B                     u4125:	
  4056  145B  35A3               	lslf	??_nrf24l01SetRXPipe,f
  4057  145C                     u4124:	
  4058  145C  0B89               	decfsz	9,f
  4059  145D  2C5B               	goto	u4125
  4060  145E  0823               	movf	??_nrf24l01SetRXPipe,w
  4061  145F  00A4               	movwf	??_nrf24l01SetRXPipe+1
  4062  1460  0824               	movf	??_nrf24l01SetRXPipe+1,w
  4063  1461  00A6               	movwf	nrf24l01SetRXPipe@enRXAddr
  4064  1462                     l3666:	
  4065                           
  4066                           ;nrf24l01.c: 338: };nrf24l01.c: 340: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x0
      +                          2, enRXAddr.byte);
  4067  1462  0826               	movf	nrf24l01SetRXPipe@enRXAddr,w
  4068  1463  00A3               	movwf	??_nrf24l01SetRXPipe
  4069  1464  0823               	movf	??_nrf24l01SetRXPipe,w
  4070  1465  00A0               	movwf	nrf24l01Send@data
  4071  1466  3022               	movlw	34
  4072  1467  3194  2429         	fcall	_nrf24l01Send
  4073  1469  0008               	return
  4074  146A                     __end_of_nrf24l01SetRXPipe:	
  4075                           
  4076                           	psect	text5
  4077  0800                     __ptext5:	
  4078 ;; *************** function _nrf24l01GetPipe *****************
  4079 ;; Defined at:
  4080 ;;		line 208 in file "main.c"
  4081 ;; Parameters:    Size  Location     Type
  4082 ;;  name            1    wreg     PTR unsigned char 
  4083 ;;		 -> romDataMap(28), 
  4084 ;; Auto vars:     Size  Location     Type
  4085 ;;  name            1    9[BANK0 ] PTR unsigned char 
  4086 ;;		 -> romDataMap(28), 
  4087 ;;  i               1   10[BANK0 ] unsigned char 
  4088 ;;  pipe            1    8[BANK0 ] unsigned char 
  4089 ;; Return value:  Size  Location     Type
  4090 ;;                  1    wreg      unsigned char 
  4091 ;; Registers used:
  4092 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4093 ;; Tracked objects:
  4094 ;;		On entry : 0/0
  4095 ;;		On exit  : 0/0
  4096 ;;		Unchanged: 0/0
  4097 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4098 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4099 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4100 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4101 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4102 ;;Total ram usage:        5 bytes
  4103 ;; Hardware stack levels used:    1
  4104 ;; Hardware stack levels required when called:    8
  4105 ;; This function calls:
  4106 ;;		___lwmod
  4107 ;;		_strlen
  4108 ;; This function is called by:
  4109 ;;		_main
  4110 ;; This function uses a non-reentrant model
  4111 ;;
  4112                           
  4113                           
  4114                           ;psect for function _nrf24l01GetPipe
  4115  0800                     _nrf24l01GetPipe:	
  4116                           
  4117                           ;incstack = 0
  4118                           ; Regs used in _nrf24l01GetPipe: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4119                           ;nrf24l01GetPipe@name stored from wreg
  4120  0800  0020               	movlb	0	; select bank0
  4121  0801  00A9               	movwf	nrf24l01GetPipe@name
  4122                           
  4123                           ;main.c: 209: unsigned char pipe = 0;
  4124  0802  01A8               	clrf	nrf24l01GetPipe@pipe
  4125                           
  4126                           ;main.c: 210: unsigned char i = 0;
  4127  0803  01AA               	clrf	nrf24l01GetPipe@i
  4128                           
  4129                           ;main.c: 213: for (i = 0; i < strlen(name); i++){
  4130  0804  01AA               	clrf	nrf24l01GetPipe@i
  4131  0805                     l4100:	
  4132  0805  0829               	movf	nrf24l01GetPipe@name,w
  4133  0806  00A0               	movwf	strlen@s
  4134  0807  3002               	movlw	2
  4135  0808  00A1               	movwf	strlen@s+1
  4136  0809  3194  240A  3188   	fcall	_strlen
  4137  080C  0020               	movlb	0	; select bank0
  4138  080D  082A               	movf	nrf24l01GetPipe@i,w
  4139  080E  00A6               	movwf	??_nrf24l01GetPipe
  4140  080F  01A7               	clrf	??_nrf24l01GetPipe+1
  4141  0810  0821               	movf	?_strlen+1,w
  4142  0811  0227               	subwf	??_nrf24l01GetPipe+1,w
  4143  0812  1D03               	skipz
  4144  0813  2816               	goto	u4455
  4145  0814  0820               	movf	?_strlen,w
  4146  0815  0226               	subwf	??_nrf24l01GetPipe,w
  4147  0816                     u4455:	
  4148  0816  1803               	btfsc	3,0
  4149  0817  2828               	goto	l4102
  4150                           
  4151                           ;main.c: 214: pipe+= name[i];
  4152  0818  082A               	movf	nrf24l01GetPipe@i,w
  4153  0819  0729               	addwf	nrf24l01GetPipe@name,w
  4154  081A  00A6               	movwf	??_nrf24l01GetPipe
  4155  081B  0826               	movf	??_nrf24l01GetPipe,w
  4156  081C  0086               	movwf	6
  4157  081D  3002               	movlw	2	; select bank4/5
  4158  081E  0087               	movwf	7
  4159  081F  0801               	movf	1,w
  4160  0820  00A7               	movwf	??_nrf24l01GetPipe+1
  4161  0821  0827               	movf	??_nrf24l01GetPipe+1,w
  4162  0822  07A8               	addwf	nrf24l01GetPipe@pipe,f
  4163  0823  3001               	movlw	1
  4164  0824  00A6               	movwf	??_nrf24l01GetPipe
  4165  0825  0826               	movf	??_nrf24l01GetPipe,w
  4166  0826  07AA               	addwf	nrf24l01GetPipe@i,f
  4167  0827  2805               	goto	l4100
  4168  0828                     l4102:	
  4169                           
  4170                           ;main.c: 215: };main.c: 217: return (unsigned) pipe % 6;
  4171  0828  3006               	movlw	6
  4172  0829  00A0               	movwf	___lwmod@divisor
  4173  082A  3000               	movlw	0
  4174  082B  00A1               	movwf	___lwmod@divisor+1
  4175  082C  0828               	movf	nrf24l01GetPipe@pipe,w
  4176  082D  00A6               	movwf	??_nrf24l01GetPipe
  4177  082E  01A7               	clrf	??_nrf24l01GetPipe+1
  4178  082F  0826               	movf	??_nrf24l01GetPipe,w
  4179  0830  00A2               	movwf	___lwmod@dividend
  4180  0831  0827               	movf	??_nrf24l01GetPipe+1,w
  4181  0832  00A3               	movwf	___lwmod@dividend+1
  4182  0833  3195  2553         	fcall	___lwmod
  4183  0835  0020               	movlb	0	; select bank0
  4184  0836  0820               	movf	?___lwmod,w
  4185  0837  0008               	return
  4186  0838                     __end_of_nrf24l01GetPipe:	
  4187                           
  4188                           	psect	text6
  4189  1553                     __ptext6:	
  4190 ;; *************** function ___lwmod *****************
  4191 ;; Defined at:
  4192 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\lwmod.c"
  4193 ;; Parameters:    Size  Location     Type
  4194 ;;  divisor         2    0[BANK0 ] unsigned int 
  4195 ;;  dividend        2    2[BANK0 ] unsigned int 
  4196 ;; Auto vars:     Size  Location     Type
  4197 ;;  counter         1    5[BANK0 ] unsigned char 
  4198 ;; Return value:  Size  Location     Type
  4199 ;;                  2    0[BANK0 ] unsigned int 
  4200 ;; Registers used:
  4201 ;;		wreg, status,2, status,0
  4202 ;; Tracked objects:
  4203 ;;		On entry : 0/0
  4204 ;;		On exit  : 0/0
  4205 ;;		Unchanged: 0/0
  4206 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4207 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4208 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4209 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4210 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4211 ;;Total ram usage:        6 bytes
  4212 ;; Hardware stack levels used:    1
  4213 ;; Hardware stack levels required when called:    7
  4214 ;; This function calls:
  4215 ;;		Nothing
  4216 ;; This function is called by:
  4217 ;;		_nrf24l01GetPipe
  4218 ;; This function uses a non-reentrant model
  4219 ;;
  4220                           
  4221                           
  4222                           ;psect for function ___lwmod
  4223  1553                     ___lwmod:	
  4224                           
  4225                           ;incstack = 0
  4226                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  4227  1553  0020               	movlb	0	; select bank0
  4228  1554  0820               	movf	___lwmod@divisor,w
  4229  1555  0421               	iorwf	___lwmod@divisor+1,w
  4230  1556  1903               	btfsc	3,2
  4231  1557  2D7B               	goto	l3978
  4232  1558  01A5               	clrf	___lwmod@counter
  4233  1559  0AA5               	incf	___lwmod@counter,f
  4234  155A                     l3968:	
  4235  155A  1BA1               	btfsc	___lwmod@divisor+1,7
  4236  155B  2D66               	goto	l3970
  4237  155C  3001               	movlw	1
  4238  155D                     u4335:	
  4239  155D  35A0               	lslf	___lwmod@divisor,f
  4240  155E  0DA1               	rlf	___lwmod@divisor+1,f
  4241  155F  0B89               	decfsz	9,f
  4242  1560  2D5D               	goto	u4335
  4243  1561  3001               	movlw	1
  4244  1562  00A4               	movwf	??___lwmod
  4245  1563  0824               	movf	??___lwmod,w
  4246  1564  07A5               	addwf	___lwmod@counter,f
  4247  1565  2D5A               	goto	l3968
  4248  1566                     l3970:	
  4249  1566  0821               	movf	___lwmod@divisor+1,w
  4250  1567  0223               	subwf	___lwmod@dividend+1,w
  4251  1568  1D03               	skipz
  4252  1569  2D6C               	goto	u4355
  4253  156A  0820               	movf	___lwmod@divisor,w
  4254  156B  0222               	subwf	___lwmod@dividend,w
  4255  156C                     u4355:	
  4256  156C  1C03               	skipc
  4257  156D  2D72               	goto	l3974
  4258  156E  0820               	movf	___lwmod@divisor,w
  4259  156F  02A2               	subwf	___lwmod@dividend,f
  4260  1570  0821               	movf	___lwmod@divisor+1,w
  4261  1571  3BA3               	subwfb	___lwmod@dividend+1,f
  4262  1572                     l3974:	
  4263  1572  3001               	movlw	1
  4264  1573                     u4365:	
  4265  1573  36A1               	lsrf	___lwmod@divisor+1,f
  4266  1574  0CA0               	rrf	___lwmod@divisor,f
  4267  1575  0B89               	decfsz	9,f
  4268  1576  2D73               	goto	u4365
  4269  1577  3001               	movlw	1
  4270  1578  02A5               	subwf	___lwmod@counter,f
  4271  1579  1D03               	btfss	3,2
  4272  157A  2D66               	goto	l3970
  4273  157B                     l3978:	
  4274  157B  0823               	movf	___lwmod@dividend+1,w
  4275  157C  00A1               	movwf	?___lwmod+1
  4276  157D  0822               	movf	___lwmod@dividend,w
  4277  157E  00A0               	movwf	?___lwmod
  4278  157F  0008               	return
  4279  1580                     __end_of___lwmod:	
  4280                           
  4281                           	psect	text7
  4282  04CE                     __ptext7:	
  4283 ;; *************** function _loop *****************
  4284 ;; Defined at:
  4285 ;;		line 137 in file "main.c"
  4286 ;; Parameters:    Size  Location     Type
  4287 ;;		None
  4288 ;; Auto vars:     Size  Location     Type
  4289 ;;  packet         33   47[BANK2 ] struct .
  4290 ;;  ta              3   35[BANK2 ] float 
  4291 ;;  vt              3   32[BANK2 ] float 
  4292 ;;  rfSetup         1   46[BANK2 ] struct .
  4293 ;; Return value:  Size  Location     Type
  4294 ;;                  1    wreg      void 
  4295 ;; Registers used:
  4296 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4297 ;; Tracked objects:
  4298 ;;		On entry : 0/0
  4299 ;;		On exit  : 0/0
  4300 ;;		Unchanged: 0/0
  4301 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4302 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4303 ;;      Locals:         0       0       0      48       0       0       0       0       0       0       0       0       
      +0       0
  4304 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  4305 ;;      Totals:         0       0       1      48       0       0       0       0       0       0       0       0       
      +0       0
  4306 ;;Total ram usage:       49 bytes
  4307 ;; Hardware stack levels used:    1
  4308 ;; Hardware stack levels required when called:   14
  4309 ;; This function calls:
  4310 ;;		___awtoft
  4311 ;;		___ftadd
  4312 ;;		___ftdiv
  4313 ;;		___ftmul
  4314 ;;		___ftneg
  4315 ;;		___lbtoft
  4316 ;;		_checkRxData
  4317 ;;		_checkTXPower
  4318 ;;		_getADCValue
  4319 ;;		_nrf24l01Send
  4320 ;;		_nrf24l01SendPacket
  4321 ;;		_setMessage
  4322 ;;		_sleep
  4323 ;; This function is called by:
  4324 ;;		_main
  4325 ;; This function uses a non-reentrant model
  4326 ;;
  4327                           
  4328                           
  4329                           ;psect for function _loop
  4330  04CE                     _loop:	
  4331                           
  4332                           ;main.c: 139: nrf24l01Packet_t packet;;main.c: 141: setMessage(&packet, "DBG", counter);
  4333                           
  4334                           ;incstack = 0
  4335                           ; Regs used in _loop: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4336  04CE  3055               	movlw	low (STR_6| (0+32768))
  4337  04CF  0021               	movlb	1	; select bank1
  4338  04D0  00B8               	movwf	setMessage@topic^(0+128)
  4339  04D1  3098               	movlw	high (STR_6| (0+32768))
  4340  04D2  00B9               	movwf	(setMessage@topic^(0+128)+1)
  4341  04D3  0023               	movlb	3	; select bank3
  4342  04D4  0842               	movf	_counter^(0+384),w
  4343  04D5  0021               	movlb	1	; select bank1
  4344  04D6  00BA               	movwf	setMessage@value^(0+128)
  4345  04D7  0023               	movlb	3	; select bank3
  4346  04D8  0843               	movf	(_counter+1)^(0+384),w
  4347  04D9  0021               	movlb	1	; select bank1
  4348  04DA  00BB               	movwf	(setMessage@value+1)^(0+128)
  4349  04DB  0023               	movlb	3	; select bank3
  4350  04DC  0844               	movf	(_counter+2)^(0+384),w
  4351  04DD  0021               	movlb	1	; select bank1
  4352  04DE  00BC               	movwf	(setMessage@value+2)^(0+128)
  4353  04DF  304F               	movlw	(low (loop@packet| (0+256)))& (0+255)
  4354  04E0  3189  2174  3184   	fcall	_setMessage
  4355                           
  4356                           ;main.c: 142: packet.packetData.byte = 0;
  4357  04E3  0022               	movlb	2	; select bank2
  4358  04E4  01CF               	clrf	loop@packet^(0+256)
  4359                           
  4360                           ;main.c: 143: packet.packetData.ACKRequest = 0;
  4361  04E5  114F               	bcf	loop@packet^(0+256),2
  4362                           
  4363                           ;main.c: 144: nrf24l01SendPacket(&packet);
  4364  04E6  304F               	movlw	low loop@packet
  4365  04E7  0020               	movlb	0	; select bank0
  4366  04E8  00A7               	movwf	nrf24l01SendPacket@Packet
  4367  04E9  3001               	movlw	high loop@packet
  4368  04EA  00A8               	movwf	nrf24l01SendPacket@Packet+1
  4369  04EB  318D  2550  3184   	fcall	_nrf24l01SendPacket
  4370                           
  4371                           ;main.c: 145: checkTXPower();
  4372  04EE  3192  22D4  3184   	fcall	_checkTXPower
  4373                           
  4374                           ;main.c: 146: sleep(10);
  4375  04F1  300A               	movlw	10
  4376  04F2  3193  237E  3184   	fcall	_sleep
  4377                           
  4378                           ;main.c: 150: FVRCONbits.TSEN = 1;
  4379  04F5  0022               	movlb	2	; select bank2
  4380  04F6  1697               	bsf	23,5	;volatile
  4381                           
  4382                           ;main.c: 151: float vt = (2.048 - getADCValue(0b111101)) / (FVRCONbits.TSRNG ? 2 : 4);
  4383  04F7  1A17               	btfsc	23,4	;volatile
  4384  04F8  2CFB               	goto	l4032
  4385  04F9  3004               	movlw	4
  4386  04FA  2CFC               	goto	L1
  4387  04FB                     l4032:	
  4388  04FB  3002               	movlw	2
  4389  04FC                     L1:	
  4390  04FC  00CC               	movwf	_loop$920^(0+256)
  4391  04FD  3000               	movlw	0
  4392  04FE  00CD               	movwf	(_loop$920^(0+256)+1)
  4393  04FF  303D               	movlw	61
  4394  0500  318A  22B9  3184   	fcall	_getADCValue
  4395  0503  0020               	movlb	0	; select bank0
  4396  0504  084B               	movf	?_getADCValue,w
  4397  0505  00D7               	movwf	___ftneg@f1
  4398  0506  084C               	movf	?_getADCValue+1,w
  4399  0507  00D8               	movwf	___ftneg@f1+1
  4400  0508  084D               	movf	?_getADCValue+2,w
  4401  0509  00D9               	movwf	___ftneg@f1+2
  4402  050A  3192  2277  3184   	fcall	___ftneg
  4403  050D  0020               	movlb	0	; select bank0
  4404  050E  0857               	movf	?___ftneg,w
  4405  050F  0022               	movlb	2	; select bank2
  4406  0510  00C6               	movwf	_loop$2153^(0+256)
  4407  0511  0020               	movlb	0	; select bank0
  4408  0512  0858               	movf	?___ftneg+1,w
  4409  0513  0022               	movlb	2	; select bank2
  4410  0514  00C7               	movwf	(_loop$2153+1)^(0+256)
  4411  0515  0020               	movlb	0	; select bank0
  4412  0516  0859               	movf	?___ftneg+2,w
  4413  0517  0022               	movlb	2	; select bank2
  4414  0518  00C8               	movwf	(_loop$2153+2)^(0+256)
  4415  0519  084D               	movf	(_loop$920+1)^(0+256),w
  4416  051A  0020               	movlb	0	; select bank0
  4417  051B  00A9               	movwf	___awtoft@c+1
  4418  051C  0022               	movlb	2	; select bank2
  4419  051D  084C               	movf	_loop$920^(0+256),w
  4420  051E  0020               	movlb	0	; select bank0
  4421  051F  00A8               	movwf	___awtoft@c
  4422  0520  3194  246A  3184   	fcall	___awtoft
  4423  0523  0020               	movlb	0	; select bank0
  4424  0524  0828               	movf	?___awtoft,w
  4425  0525  00BB               	movwf	___ftdiv@f2
  4426  0526  0829               	movf	?___awtoft+1,w
  4427  0527  00BC               	movwf	___ftdiv@f2+1
  4428  0528  082A               	movf	?___awtoft+2,w
  4429  0529  00BD               	movwf	___ftdiv@f2+2
  4430  052A  3012               	movlw	18
  4431  052B  00AE               	movwf	___ftadd@f1
  4432  052C  3003               	movlw	3
  4433  052D  00AF               	movwf	___ftadd@f1+1
  4434  052E  3040               	movlw	64
  4435  052F  00B0               	movwf	___ftadd@f1+2
  4436  0530  0022               	movlb	2	; select bank2
  4437  0531  0846               	movf	_loop$2153^(0+256),w
  4438  0532  0020               	movlb	0	; select bank0
  4439  0533  00B1               	movwf	___ftadd@f2
  4440  0534  0022               	movlb	2	; select bank2
  4441  0535  0847               	movf	(_loop$2153+1)^(0+256),w
  4442  0536  0020               	movlb	0	; select bank0
  4443  0537  00B2               	movwf	___ftadd@f2+1
  4444  0538  0022               	movlb	2	; select bank2
  4445  0539  0848               	movf	(_loop$2153+2)^(0+256),w
  4446  053A  0020               	movlb	0	; select bank0
  4447  053B  00B3               	movwf	___ftadd@f2+2
  4448  053C  318F  270A  3184   	fcall	___ftadd
  4449  053F  0020               	movlb	0	; select bank0
  4450  0540  082E               	movf	?___ftadd,w
  4451  0541  00BE               	movwf	___ftdiv@f1
  4452  0542  082F               	movf	?___ftadd+1,w
  4453  0543  00BF               	movwf	___ftdiv@f1+1
  4454  0544  0830               	movf	?___ftadd+2,w
  4455  0545  00C0               	movwf	___ftdiv@f1+2
  4456  0546  318B  23F3  3184   	fcall	___ftdiv
  4457  0549  0020               	movlb	0	; select bank0
  4458  054A  083B               	movf	?___ftdiv,w
  4459  054B  0022               	movlb	2	; select bank2
  4460  054C  00C0               	movwf	loop@vt^(0+256)
  4461  054D  0020               	movlb	0	; select bank0
  4462  054E  083C               	movf	?___ftdiv+1,w
  4463  054F  0022               	movlb	2	; select bank2
  4464  0550  00C1               	movwf	(loop@vt+1)^(0+256)
  4465  0551  0020               	movlb	0	; select bank0
  4466  0552  083D               	movf	?___ftdiv+2,w
  4467  0553  0022               	movlb	2	; select bank2
  4468  0554  00C2               	movwf	(loop@vt+2)^(0+256)
  4469                           
  4470                           ;main.c: 152: FVRCONbits.TSEN = 0;
  4471  0555  1297               	bcf	23,5	;volatile
  4472                           
  4473                           ;main.c: 160: float ta = (vt / -0.0014) - (0.6063 / -0.0014) - 40;
  4474  0556  3089               	movlw	137
  4475  0557  0020               	movlb	0	; select bank0
  4476  0558  00AE               	movwf	___ftadd@f1
  4477  0559  30C4               	movlw	196
  4478  055A  00AF               	movwf	___ftadd@f1+1
  4479  055B  3043               	movlw	67
  4480  055C  00B0               	movwf	___ftadd@f1+2
  4481  055D  3080               	movlw	128
  4482  055E  00BB               	movwf	___ftdiv@f2
  4483  055F  30B7               	movlw	183
  4484  0560  00BC               	movwf	___ftdiv@f2+1
  4485  0561  30BA               	movlw	186
  4486  0562  00BD               	movwf	___ftdiv@f2+2
  4487  0563  0022               	movlb	2	; select bank2
  4488  0564  0840               	movf	loop@vt^(0+256),w
  4489  0565  0020               	movlb	0	; select bank0
  4490  0566  00BE               	movwf	___ftdiv@f1
  4491  0567  0022               	movlb	2	; select bank2
  4492  0568  0841               	movf	(loop@vt+1)^(0+256),w
  4493  0569  0020               	movlb	0	; select bank0
  4494  056A  00BF               	movwf	___ftdiv@f1+1
  4495  056B  0022               	movlb	2	; select bank2
  4496  056C  0842               	movf	(loop@vt+2)^(0+256),w
  4497  056D  0020               	movlb	0	; select bank0
  4498  056E  00C0               	movwf	___ftdiv@f1+2
  4499  056F  318B  23F3  3184   	fcall	___ftdiv
  4500  0572  0020               	movlb	0	; select bank0
  4501  0573  083B               	movf	?___ftdiv,w
  4502  0574  00B1               	movwf	___ftadd@f2
  4503  0575  083C               	movf	?___ftdiv+1,w
  4504  0576  00B2               	movwf	___ftadd@f2+1
  4505  0577  083D               	movf	?___ftdiv+2,w
  4506  0578  00B3               	movwf	___ftadd@f2+2
  4507  0579  318F  270A  3184   	fcall	___ftadd
  4508  057C  0020               	movlb	0	; select bank0
  4509  057D  082E               	movf	?___ftadd,w
  4510  057E  0022               	movlb	2	; select bank2
  4511  057F  00C3               	movwf	loop@ta^(0+256)
  4512  0580  0020               	movlb	0	; select bank0
  4513  0581  082F               	movf	?___ftadd+1,w
  4514  0582  0022               	movlb	2	; select bank2
  4515  0583  00C4               	movwf	(loop@ta+1)^(0+256)
  4516  0584  0020               	movlb	0	; select bank0
  4517  0585  0830               	movf	?___ftadd+2,w
  4518  0586  0022               	movlb	2	; select bank2
  4519  0587  00C5               	movwf	(loop@ta+2)^(0+256)
  4520                           
  4521                           ;main.c: 162: setMessage(&packet, "TEMP", ta);
  4522  0588  3046               	movlw	low (STR_7| (0+32768))
  4523  0589  0021               	movlb	1	; select bank1
  4524  058A  00B8               	movwf	setMessage@topic^(0+128)
  4525  058B  3098               	movlw	high (STR_7| (0+32768))
  4526  058C  00B9               	movwf	(setMessage@topic^(0+128)+1)
  4527  058D  0022               	movlb	2	; select bank2
  4528  058E  0843               	movf	loop@ta^(0+256),w
  4529  058F  0021               	movlb	1	; select bank1
  4530  0590  00BA               	movwf	setMessage@value^(0+128)
  4531  0591  0022               	movlb	2	; select bank2
  4532  0592  0844               	movf	(loop@ta+1)^(0+256),w
  4533  0593  0021               	movlb	1	; select bank1
  4534  0594  00BB               	movwf	(setMessage@value+1)^(0+128)
  4535  0595  0022               	movlb	2	; select bank2
  4536  0596  0845               	movf	(loop@ta+2)^(0+256),w
  4537  0597  0021               	movlb	1	; select bank1
  4538  0598  00BC               	movwf	(setMessage@value+2)^(0+128)
  4539  0599  304F               	movlw	(low (loop@packet| (0+256)))& (0+255)
  4540  059A  3189  2174  3184   	fcall	_setMessage
  4541                           
  4542                           ;main.c: 163: packet.packetData.byte = 0;
  4543  059D  0022               	movlb	2	; select bank2
  4544  059E  01CF               	clrf	loop@packet^(0+256)
  4545                           
  4546                           ;main.c: 164: packet.packetData.ACKRequest = 1;
  4547  059F  154F               	bsf	loop@packet^(0+256),2
  4548                           
  4549                           ;main.c: 165: nrf24l01SendPacket(&packet);
  4550  05A0  304F               	movlw	low loop@packet
  4551  05A1  0020               	movlb	0	; select bank0
  4552  05A2  00A7               	movwf	nrf24l01SendPacket@Packet
  4553  05A3  3001               	movlw	high loop@packet
  4554  05A4  00A8               	movwf	nrf24l01SendPacket@Packet+1
  4555  05A5  318D  2550  3184   	fcall	_nrf24l01SendPacket
  4556                           
  4557                           ;main.c: 166: checkTXPower();
  4558  05A8  3192  22D4  3184   	fcall	_checkTXPower
  4559                           
  4560                           ;main.c: 168: checkRxData();
  4561  05AB  318A  222C  3184   	fcall	_checkRxData
  4562                           
  4563                           ;main.c: 175: setMessage(&packet, "VBAT", getADCValue(0b000100) * 3.106382978723404);
  4564  05AE  30CF               	movlw	207
  4565  05AF  0020               	movlb	0	; select bank0
  4566  05B0  00D7               	movwf	___ftmul@f1
  4567  05B1  3046               	movlw	70
  4568  05B2  00D8               	movwf	___ftmul@f1+1
  4569  05B3  3040               	movlw	64
  4570  05B4  00D9               	movwf	___ftmul@f1+2
  4571  05B5  3004               	movlw	4
  4572  05B6  318A  22B9  3184   	fcall	_getADCValue
  4573  05B9  0020               	movlb	0	; select bank0
  4574  05BA  084B               	movf	?_getADCValue,w
  4575  05BB  00DA               	movwf	___ftmul@f2
  4576  05BC  084C               	movf	?_getADCValue+1,w
  4577  05BD  00DB               	movwf	___ftmul@f2+1
  4578  05BE  084D               	movf	?_getADCValue+2,w
  4579  05BF  00DC               	movwf	___ftmul@f2+2
  4580  05C0  318C  249C  3184   	fcall	___ftmul
  4581  05C3  0020               	movlb	0	; select bank0
  4582  05C4  0857               	movf	?___ftmul,w
  4583  05C5  0022               	movlb	2	; select bank2
  4584  05C6  00C9               	movwf	_loop$2154^(0+256)
  4585  05C7  0020               	movlb	0	; select bank0
  4586  05C8  0858               	movf	?___ftmul+1,w
  4587  05C9  0022               	movlb	2	; select bank2
  4588  05CA  00CA               	movwf	(_loop$2154+1)^(0+256)
  4589  05CB  0020               	movlb	0	; select bank0
  4590  05CC  0859               	movf	?___ftmul+2,w
  4591  05CD  0022               	movlb	2	; select bank2
  4592  05CE  00CB               	movwf	(_loop$2154+2)^(0+256)
  4593                           
  4594                           ;main.c: 175: setMessage(&packet, "VBAT", getADCValue(0b000100) * 3.106382978723404);
  4595  05CF  304B               	movlw	low (STR_8| (0+32768))
  4596  05D0  0021               	movlb	1	; select bank1
  4597  05D1  00B8               	movwf	setMessage@topic^(0+128)
  4598  05D2  3098               	movlw	high (STR_8| (0+32768))
  4599  05D3  00B9               	movwf	(setMessage@topic^(0+128)+1)
  4600  05D4  0022               	movlb	2	; select bank2
  4601  05D5  0849               	movf	_loop$2154^(0+256),w
  4602  05D6  0021               	movlb	1	; select bank1
  4603  05D7  00BA               	movwf	setMessage@value^(0+128)
  4604  05D8  0022               	movlb	2	; select bank2
  4605  05D9  084A               	movf	(_loop$2154+1)^(0+256),w
  4606  05DA  0021               	movlb	1	; select bank1
  4607  05DB  00BB               	movwf	(setMessage@value+1)^(0+128)
  4608  05DC  0022               	movlb	2	; select bank2
  4609  05DD  084B               	movf	(_loop$2154+2)^(0+256),w
  4610  05DE  0021               	movlb	1	; select bank1
  4611  05DF  00BC               	movwf	(setMessage@value+2)^(0+128)
  4612  05E0  304F               	movlw	(low (loop@packet| (0+256)))& (0+255)
  4613  05E1  3189  2174  3184   	fcall	_setMessage
  4614                           
  4615                           ;main.c: 176: packet.packetData.byte = 0;
  4616  05E4  0022               	movlb	2	; select bank2
  4617  05E5  01CF               	clrf	loop@packet^(0+256)
  4618                           
  4619                           ;main.c: 177: packet.packetData.ACKRequest = 1;
  4620  05E6  154F               	bsf	loop@packet^(0+256),2
  4621                           
  4622                           ;main.c: 178: nrf24l01SendPacket(&packet);
  4623  05E7  304F               	movlw	low loop@packet
  4624  05E8  0020               	movlb	0	; select bank0
  4625  05E9  00A7               	movwf	nrf24l01SendPacket@Packet
  4626  05EA  3001               	movlw	high loop@packet
  4627  05EB  00A8               	movwf	nrf24l01SendPacket@Packet+1
  4628  05EC  318D  2550  3184   	fcall	_nrf24l01SendPacket
  4629                           
  4630                           ;main.c: 179: checkTXPower();
  4631  05EF  3192  22D4  3184   	fcall	_checkTXPower
  4632                           
  4633                           ;main.c: 181: checkRxData();
  4634  05F2  318A  222C  3184   	fcall	_checkRxData
  4635                           
  4636                           ;main.c: 184: setMessage(&packet, "ANC3mV", getADCValue(0b010011));
  4637  05F5  3034               	movlw	low (STR_9| (0+32768))
  4638  05F6  0021               	movlb	1	; select bank1
  4639  05F7  00B8               	movwf	setMessage@topic^(0+128)
  4640  05F8  3098               	movlw	high (STR_9| (0+32768))
  4641  05F9  00B9               	movwf	(setMessage@topic^(0+128)+1)
  4642  05FA  3013               	movlw	19
  4643  05FB  318A  22B9  3184   	fcall	_getADCValue
  4644  05FE  0020               	movlb	0	; select bank0
  4645  05FF  084B               	movf	?_getADCValue,w
  4646  0600  0021               	movlb	1	; select bank1
  4647  0601  00BA               	movwf	setMessage@value^(0+128)
  4648  0602  0020               	movlb	0	; select bank0
  4649  0603  084C               	movf	?_getADCValue+1,w
  4650  0604  0021               	movlb	1	; select bank1
  4651  0605  00BB               	movwf	(setMessage@value+1)^(0+128)
  4652  0606  0020               	movlb	0	; select bank0
  4653  0607  084D               	movf	?_getADCValue+2,w
  4654  0608  0021               	movlb	1	; select bank1
  4655  0609  00BC               	movwf	(setMessage@value+2)^(0+128)
  4656  060A  304F               	movlw	(low (loop@packet| (0+256)))& (0+255)
  4657  060B  3189  2174  3184   	fcall	_setMessage
  4658                           
  4659                           ;main.c: 185: packet.packetData.byte = 0;
  4660  060E  0022               	movlb	2	; select bank2
  4661  060F  01CF               	clrf	loop@packet^(0+256)
  4662                           
  4663                           ;main.c: 186: packet.packetData.ACKRequest = 1;
  4664  0610  154F               	bsf	loop@packet^(0+256),2
  4665                           
  4666                           ;main.c: 187: nrf24l01SendPacket(&packet);
  4667  0611  304F               	movlw	low loop@packet
  4668  0612  0020               	movlb	0	; select bank0
  4669  0613  00A7               	movwf	nrf24l01SendPacket@Packet
  4670  0614  3001               	movlw	high loop@packet
  4671  0615  00A8               	movwf	nrf24l01SendPacket@Packet+1
  4672  0616  318D  2550  3184   	fcall	_nrf24l01SendPacket
  4673                           
  4674                           ;main.c: 188: checkTXPower();
  4675  0619  3192  22D4  3184   	fcall	_checkTXPower
  4676                           
  4677                           ;main.c: 190: checkRxData();
  4678  061C  318A  222C  3184   	fcall	_checkRxData
  4679                           
  4680                           ;main.c: 193: n_RF_SETUP_t rfSetup;;main.c: 194: rfSetup.byte = nrf24l01Send((unsigned) 
      +                          0b00000000 | (unsigned) 0x06, 0);
  4681  061F  0020               	movlb	0	; select bank0
  4682  0620  01A0               	clrf	nrf24l01Send@data
  4683  0621  3006               	movlw	6
  4684  0622  3194  2429  3184   	fcall	_nrf24l01Send
  4685  0625  0021               	movlb	1	; select bank1
  4686  0626  00EE               	movwf	??_loop^(0+128)
  4687  0627  086E               	movf	??_loop^(0+128),w
  4688  0628  0022               	movlb	2	; select bank2
  4689  0629  00CE               	movwf	loop@rfSetup^(0+256)
  4690                           
  4691                           ;main.c: 196: setMessage(&packet, "RFPWR", rfSetup.RF_PWR);
  4692  062A  303B               	movlw	low (STR_10| (0+32768))
  4693  062B  0021               	movlb	1	; select bank1
  4694  062C  00B8               	movwf	setMessage@topic^(0+128)
  4695  062D  3098               	movlw	high (STR_10| (0+32768))
  4696  062E  00B9               	movwf	(setMessage@topic^(0+128)+1)
  4697  062F  0022               	movlb	2	; select bank2
  4698  0630  0C4E               	rrf	loop@rfSetup^(0+256),w
  4699  0631  3903               	andlw	3
  4700  0632  3193  2363  3184   	fcall	___lbtoft
  4701  0635  0020               	movlb	0	; select bank0
  4702  0636  0828               	movf	?___lbtoft,w
  4703  0637  0021               	movlb	1	; select bank1
  4704  0638  00BA               	movwf	setMessage@value^(0+128)
  4705  0639  0020               	movlb	0	; select bank0
  4706  063A  0829               	movf	?___lbtoft+1,w
  4707  063B  0021               	movlb	1	; select bank1
  4708  063C  00BB               	movwf	(setMessage@value+1)^(0+128)
  4709  063D  0020               	movlb	0	; select bank0
  4710  063E  082A               	movf	?___lbtoft+2,w
  4711  063F  0021               	movlb	1	; select bank1
  4712  0640  00BC               	movwf	(setMessage@value+2)^(0+128)
  4713  0641  304F               	movlw	(low (loop@packet| (0+256)))& (0+255)
  4714  0642  3189  2174  3184   	fcall	_setMessage
  4715                           
  4716                           ;main.c: 197: packet.packetData.byte = 0;
  4717  0645  0022               	movlb	2	; select bank2
  4718  0646  01CF               	clrf	loop@packet^(0+256)
  4719                           
  4720                           ;main.c: 198: packet.packetData.ACKRequest = 1;
  4721  0647  154F               	bsf	loop@packet^(0+256),2
  4722                           
  4723                           ;main.c: 199: nrf24l01SendPacket(&packet);
  4724  0648  304F               	movlw	low loop@packet
  4725  0649  0020               	movlb	0	; select bank0
  4726  064A  00A7               	movwf	nrf24l01SendPacket@Packet
  4727  064B  3001               	movlw	high loop@packet
  4728  064C  00A8               	movwf	nrf24l01SendPacket@Packet+1
  4729  064D  318D  2550  3184   	fcall	_nrf24l01SendPacket
  4730                           
  4731                           ;main.c: 200: checkTXPower();
  4732  0650  3192  22D4  3184   	fcall	_checkTXPower
  4733                           
  4734                           ;main.c: 202: checkRxData();
  4735  0653  318A  222C         	fcall	_checkRxData
  4736  0655  0008               	return
  4737  0656                     __end_of_loop:	
  4738                           
  4739                           	psect	text8
  4740  0974                     __ptext8:	
  4741 ;; *************** function _setMessage *****************
  4742 ;; Defined at:
  4743 ;;		line 116 in file "main.c"
  4744 ;; Parameters:    Size  Location     Type
  4745 ;;  packet          1    wreg     PTR struct .
  4746 ;;		 -> main@packet(33), loop@packet(33), 
  4747 ;;  topic           2   24[BANK1 ] PTR const unsigned char 
  4748 ;;		 -> STR_12(5), STR_10(6), STR_9(7), STR_8(5), 
  4749 ;;		 -> STR_7(5), STR_6(4), 
  4750 ;;  value           3   26[BANK1 ] float 
  4751 ;; Auto vars:     Size  Location     Type
  4752 ;;  packet          1   32[BANK1 ] PTR struct .
  4753 ;;		 -> main@packet(33), loop@packet(33), 
  4754 ;;  status          2   30[BANK1 ] int 
  4755 ;; Return value:  Size  Location     Type
  4756 ;;                  1    wreg      void 
  4757 ;; Registers used:
  4758 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4759 ;; Tracked objects:
  4760 ;;		On entry : 0/0
  4761 ;;		On exit  : 0/0
  4762 ;;		Unchanged: 0/0
  4763 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4764 ;;      Params:         0       0       5       0       0       0       0       0       0       0       0       0       
      +0       0
  4765 ;;      Locals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0
  4766 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  4767 ;;      Totals:         0       0       9       0       0       0       0       0       0       0       0       0       
      +0       0
  4768 ;;Total ram usage:        9 bytes
  4769 ;; Hardware stack levels used:    1
  4770 ;; Hardware stack levels required when called:   11
  4771 ;; This function calls:
  4772 ;;		_ftoa
  4773 ;;		_memset
  4774 ;;		_strcat
  4775 ;; This function is called by:
  4776 ;;		_loop
  4777 ;;		_main
  4778 ;; This function uses a non-reentrant model
  4779 ;;
  4780                           
  4781                           
  4782                           ;psect for function _setMessage
  4783  0974                     _setMessage:	
  4784                           
  4785                           ;incstack = 0
  4786                           ; Regs used in _setMessage: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4787                           ;setMessage@packet stored from wreg
  4788  0974  0021               	movlb	1	; select bank1
  4789  0975  00C0               	movwf	setMessage@packet^(0+128)
  4790                           
  4791                           ;main.c: 117: memset(packet->Message, 0, sizeof(packet->Message));
  4792  0976  0840               	movf	setMessage@packet^(0+128),w
  4793  0977  3E01               	addlw	1
  4794  0978  0020               	movlb	0	; select bank0
  4795  0979  00A0               	movwf	memset@p1
  4796  097A  3001               	movlw	1
  4797  097B  00A1               	movwf	memset@p1+1
  4798  097C  3000               	movlw	0
  4799  097D  00A2               	movwf	memset@c
  4800  097E  00A3               	movwf	memset@c+1
  4801  097F  3020               	movlw	32
  4802  0980  00A4               	movwf	memset@n
  4803  0981  3000               	movlw	0
  4804  0982  00A5               	movwf	memset@n+1
  4805  0983  3193  2315  3189   	fcall	_memset
  4806                           
  4807                           ;main.c: 119: strcat(packet->Message, romData->name);
  4808  0986  0023               	movlb	3	; select bank3
  4809  0987  085A               	movf	_romData^(0+384),w
  4810  0988  3E01               	addlw	1
  4811  0989  0021               	movlb	1	; select bank1
  4812  098A  00B3               	movwf	strcat@from^(0+128)
  4813  098B  3002               	movlw	2
  4814  098C  00B4               	movwf	(strcat@from+1)^(0+128)
  4815  098D  0840               	movf	setMessage@packet^(0+128),w
  4816  098E  3E01               	addlw	1
  4817  098F  3194  24D7  3189   	fcall	_strcat
  4818                           
  4819                           ;main.c: 121: strcat(packet->Message, "/");
  4820  0992  305D               	movlw	low (STR_1| (0+32768))
  4821  0993  0021               	movlb	1	; select bank1
  4822  0994  00B3               	movwf	strcat@from^(0+128)
  4823  0995  3098               	movlw	high (STR_1| (0+32768))
  4824  0996  00B4               	movwf	(strcat@from^(0+128)+1)
  4825  0997  0840               	movf	setMessage@packet^(0+128),w
  4826  0998  3E01               	addlw	1
  4827  0999  3194  24D7  3189   	fcall	_strcat
  4828                           
  4829                           ;main.c: 122: strcat(packet->Message, topic);
  4830  099C  0021               	movlb	1	; select bank1
  4831  099D  0839               	movf	(setMessage@topic+1)^(0+128),w
  4832  099E  00B4               	movwf	(strcat@from+1)^(0+128)
  4833  099F  0838               	movf	setMessage@topic^(0+128),w
  4834  09A0  00B3               	movwf	strcat@from^(0+128)
  4835  09A1  0840               	movf	setMessage@packet^(0+128),w
  4836  09A2  3E01               	addlw	1
  4837  09A3  3194  24D7  3189   	fcall	_strcat
  4838                           
  4839                           ;main.c: 124: int status;;main.c: 125: strcat(packet->Message, "/");
  4840  09A6  305D               	movlw	low (STR_1| (0+32768))
  4841  09A7  0021               	movlb	1	; select bank1
  4842  09A8  00B3               	movwf	strcat@from^(0+128)
  4843  09A9  3098               	movlw	high (STR_1| (0+32768))
  4844  09AA  00B4               	movwf	(strcat@from^(0+128)+1)
  4845  09AB  0840               	movf	setMessage@packet^(0+128),w
  4846  09AC  3E01               	addlw	1
  4847  09AD  3194  24D7  3189   	fcall	_strcat
  4848                           
  4849                           ;main.c: 126: strcat(packet->Message, ftoa(value, &status));
  4850  09B0  0021               	movlb	1	; select bank1
  4851  09B1  083A               	movf	setMessage@value^(0+128),w
  4852  09B2  00A6               	movwf	ftoa@f^(0+128)
  4853  09B3  083B               	movf	(setMessage@value+1)^(0+128),w
  4854  09B4  00A7               	movwf	(ftoa@f+1)^(0+128)
  4855  09B5  083C               	movf	(setMessage@value+2)^(0+128),w
  4856  09B6  00A8               	movwf	(ftoa@f+2)^(0+128)
  4857  09B7  30BE               	movlw	(low (setMessage@status| 0))& (0+255)
  4858  09B8  00BD               	movwf	??_setMessage^(0+128)
  4859  09B9  083D               	movf	??_setMessage^(0+128),w
  4860  09BA  00A9               	movwf	ftoa@status^(0+128)
  4861  09BB  318E  2618  3189   	fcall	_ftoa
  4862  09BE  0021               	movlb	1	; select bank1
  4863  09BF  00B3               	movwf	strcat@from^(0+128)
  4864  09C0  3001               	movlw	1
  4865  09C1  00B4               	movwf	(strcat@from+1)^(0+128)
  4866  09C2  0840               	movf	setMessage@packet^(0+128),w
  4867  09C3  3E01               	addlw	1
  4868  09C4  3194  24D7         	fcall	_strcat
  4869  09C6  0008               	return
  4870  09C7                     __end_of_setMessage:	
  4871                           
  4872                           	psect	text9
  4873  14D7                     __ptext9:	
  4874 ;; *************** function _strcat *****************
  4875 ;; Defined at:
  4876 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\strcat.c"
  4877 ;; Parameters:    Size  Location     Type
  4878 ;;  to              1    wreg     PTR unsigned char 
  4879 ;;		 -> main@packet(33), loop@packet(33), 
  4880 ;;  from            2   19[BANK1 ] PTR const unsigned char 
  4881 ;;		 -> romDataMap.name(16), ftoa@buf(17), STR_12(5), STR_10(6), 
  4882 ;;		 -> STR_9(7), STR_8(5), STR_7(5), STR_6(4), 
  4883 ;;		 -> STR_5(2), STR_4(2), romDataMap(28), 
  4884 ;; Auto vars:     Size  Location     Type
  4885 ;;  to              1   23[BANK1 ] PTR unsigned char 
  4886 ;;		 -> main@packet(33), loop@packet(33), 
  4887 ;;  cp              1   22[BANK1 ] PTR unsigned char 
  4888 ;;		 -> main@packet(33), loop@packet(33), 
  4889 ;; Return value:  Size  Location     Type
  4890 ;;                  1    wreg      PTR unsigned char 
  4891 ;; Registers used:
  4892 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath
  4893 ;; Tracked objects:
  4894 ;;		On entry : 0/0
  4895 ;;		On exit  : 0/0
  4896 ;;		Unchanged: 0/0
  4897 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4898 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  4899 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  4900 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  4901 ;;      Totals:         0       0       5       0       0       0       0       0       0       0       0       0       
      +0       0
  4902 ;;Total ram usage:        5 bytes
  4903 ;; Hardware stack levels used:    1
  4904 ;; Hardware stack levels required when called:    7
  4905 ;; This function calls:
  4906 ;;		Nothing
  4907 ;; This function is called by:
  4908 ;;		_setMessage
  4909 ;; This function uses a non-reentrant model
  4910 ;;
  4911                           
  4912                           
  4913                           ;psect for function _strcat
  4914  14D7                     _strcat:	
  4915                           
  4916                           ;incstack = 0
  4917                           ; Regs used in _strcat: [wreg-fsr1h+status,2+status,0+pclath]
  4918                           ;strcat@to stored from wreg
  4919  14D7  0021               	movlb	1	; select bank1
  4920  14D8  00B7               	movwf	strcat@to^(0+128)
  4921  14D9  0837               	movf	strcat@to^(0+128),w
  4922  14DA  00B5               	movwf	??_strcat^(0+128)
  4923  14DB  0835               	movf	??_strcat^(0+128),w
  4924  14DC  00B6               	movwf	strcat@cp^(0+128)
  4925  14DD                     l3630:	
  4926  14DD  0836               	movf	strcat@cp^(0+128),w
  4927  14DE  0086               	movwf	6
  4928  14DF  3001               	movlw	1	; select bank2/3
  4929  14E0  0087               	movwf	7
  4930  14E1  0801               	movf	1,w
  4931  14E2  1903               	btfsc	3,2
  4932  14E3  2CF1               	goto	l3636
  4933  14E4  3001               	movlw	1
  4934  14E5  00B5               	movwf	??_strcat^(0+128)
  4935  14E6  0835               	movf	??_strcat^(0+128),w
  4936  14E7  07B6               	addwf	strcat@cp^(0+128),f
  4937  14E8  2CDD               	goto	l3630
  4938  14E9                     l3632:	
  4939  14E9  3001               	movlw	1
  4940  14EA  00B5               	movwf	??_strcat^(0+128)
  4941  14EB  0835               	movf	??_strcat^(0+128),w
  4942  14EC  07B6               	addwf	strcat@cp^(0+128),f
  4943  14ED  3001               	movlw	1
  4944  14EE  07B3               	addwf	strcat@from^(0+128),f
  4945  14EF  3000               	movlw	0
  4946  14F0  3DB4               	addwfc	(strcat@from+1)^(0+128),f
  4947  14F1                     l3636:	
  4948  14F1  0836               	movf	strcat@cp^(0+128),w
  4949  14F2  0086               	movwf	6
  4950  14F3  3001               	movlw	1	; select bank2/3
  4951  14F4  0087               	movwf	7
  4952  14F5  0833               	movf	strcat@from^(0+128),w
  4953  14F6  0084               	movwf	4
  4954  14F7  0834               	movf	(strcat@from+1)^(0+128),w
  4955  14F8  0085               	movwf	5
  4956  14F9  0800               	movf	0,w	;code access
  4957  14FA  3FC0               	movwi [0]fsr1
  4958  14FB  0889               	movf	9,f
  4959  14FC  1903               	btfsc	3,2
  4960  14FD  0008               	return
  4961  14FE  2CE9               	goto	l3632
  4962  14FF                     __end_of_strcat:	
  4963                           ;	Return value of _strcat is never used
  4964                           
  4965                           
  4966                           	psect	text10
  4967  1315                     __ptext10:	
  4968 ;; *************** function _memset *****************
  4969 ;; Defined at:
  4970 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\memset.c"
  4971 ;; Parameters:    Size  Location     Type
  4972 ;;  p1              2    0[BANK0 ] PTR void 
  4973 ;;		 -> RXPacket(33), main@packet(33), loop@packet(33), 
  4974 ;;  c               2    2[BANK0 ] int 
  4975 ;;  n               2    4[BANK0 ] unsigned int 
  4976 ;; Auto vars:     Size  Location     Type
  4977 ;;  p               2    6[BANK0 ] PTR unsigned char 
  4978 ;;		 -> RXPacket(33), main@packet(33), loop@packet(33), 
  4979 ;; Return value:  Size  Location     Type
  4980 ;;                  2    0[BANK0 ] PTR void 
  4981 ;; Registers used:
  4982 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  4983 ;; Tracked objects:
  4984 ;;		On entry : 0/0
  4985 ;;		On exit  : 0/0
  4986 ;;		Unchanged: 0/0
  4987 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4988 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4989 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4990 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4991 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4992 ;;Total ram usage:        8 bytes
  4993 ;; Hardware stack levels used:    1
  4994 ;; Hardware stack levels required when called:    7
  4995 ;; This function calls:
  4996 ;;		Nothing
  4997 ;; This function is called by:
  4998 ;;		_setMessage
  4999 ;; This function uses a non-reentrant model
  5000 ;;
  5001                           
  5002                           
  5003                           ;psect for function _memset
  5004  1315                     _memset:	
  5005                           
  5006                           ;incstack = 0
  5007                           ; Regs used in _memset: [wreg+fsr1l+fsr1h+status,2+status,0]
  5008  1315  0020               	movlb	0	; select bank0
  5009  1316  0821               	movf	memset@p1+1,w
  5010  1317  00A7               	movwf	memset@p+1
  5011  1318  0820               	movf	memset@p1,w
  5012  1319  00A6               	movwf	memset@p
  5013  131A                     l3624:	
  5014  131A  3001               	movlw	1
  5015  131B  02A4               	subwf	memset@n,f
  5016  131C  3000               	movlw	0
  5017  131D  3BA5               	subwfb	memset@n+1,f
  5018  131E  0A24               	incf	memset@n,w
  5019  131F  1903               	btfsc	3,2
  5020  1320  0A25               	incf	memset@n+1,w
  5021  1321  1903               	btfsc	3,2
  5022  1322  0008               	return
  5023  1323  0826               	movf	memset@p,w
  5024  1324  0086               	movwf	6
  5025  1325  0827               	movf	memset@p+1,w
  5026  1326  0087               	movwf	7
  5027  1327  0822               	movf	memset@c,w
  5028  1328  0081               	movwf	1
  5029  1329  3001               	movlw	1
  5030  132A  07A6               	addwf	memset@p,f
  5031  132B  3000               	movlw	0
  5032  132C  3DA7               	addwfc	memset@p+1,f
  5033  132D  2B1A               	goto	l3624
  5034  132E                     __end_of_memset:	
  5035                           ;	Return value of _memset is never used
  5036                           
  5037                           
  5038                           	psect	text11
  5039  0E18                     __ptext11:	
  5040 ;; *************** function _ftoa *****************
  5041 ;; Defined at:
  5042 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\ftoa.c"
  5043 ;; Parameters:    Size  Location     Type
  5044 ;;  f               3    6[BANK1 ] float 
  5045 ;;  status          1    9[BANK1 ] PTR int 
  5046 ;;		 -> setMessage@status(2), 
  5047 ;; Auto vars:     Size  Location     Type
  5048 ;;  l               4   14[BANK1 ] unsigned long 
  5049 ;;  rem             4   10[BANK1 ] unsigned long 
  5050 ;;  cp              1   18[BANK1 ] PTR unsigned char 
  5051 ;;		 -> ftoa@buf(17), 
  5052 ;; Return value:  Size  Location     Type
  5053 ;;                  1    wreg      PTR unsigned char 
  5054 ;; Registers used:
  5055 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5056 ;; Tracked objects:
  5057 ;;		On entry : 0/0
  5058 ;;		On exit  : 0/0
  5059 ;;		Unchanged: 0/0
  5060 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5061 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  5062 ;;      Locals:         0       0       9       0       0       0       0       0       0       0       0       0       
      +0       0
  5063 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5064 ;;      Totals:         0       1      13       0       0       0       0       0       0       0       0       0       
      +0       0
  5065 ;;Total ram usage:       14 bytes
  5066 ;; Hardware stack levels used:    1
  5067 ;; Hardware stack levels required when called:   10
  5068 ;; This function calls:
  5069 ;;		___ftge
  5070 ;;		___ftmul
  5071 ;;		___ftneg
  5072 ;;		___ftsub
  5073 ;;		___fttol
  5074 ;;		___lltoft
  5075 ;;		_sprintf
  5076 ;; This function is called by:
  5077 ;;		_setMessage
  5078 ;; This function uses a non-reentrant model
  5079 ;;
  5080                           
  5081                           
  5082                           ;psect for function _ftoa
  5083  0E18                     _ftoa:	
  5084                           
  5085                           ;incstack = 0
  5086                           ; Regs used in _ftoa: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5087  0E18  30C9               	movlw	(low (ftoa@buf| (0+256)))& (0+255)
  5088  0E19  0020               	movlb	0	; select bank0
  5089  0E1A  00EF               	movwf	??_ftoa
  5090  0E1B  086F               	movf	??_ftoa,w
  5091  0E1C  0021               	movlb	1	; select bank1
  5092  0E1D  00B2               	movwf	ftoa@cp^(0+128)
  5093  0E1E  0826               	movf	ftoa@f^(0+128),w
  5094  0E1F  0020               	movlb	0	; select bank0
  5095  0E20  00A0               	movwf	___ftge@ff1
  5096  0E21  0021               	movlb	1	; select bank1
  5097  0E22  0827               	movf	(ftoa@f+1)^(0+128),w
  5098  0E23  0020               	movlb	0	; select bank0
  5099  0E24  00A1               	movwf	___ftge@ff1+1
  5100  0E25  0021               	movlb	1	; select bank1
  5101  0E26  0828               	movf	(ftoa@f+2)^(0+128),w
  5102  0E27  0020               	movlb	0	; select bank0
  5103  0E28  00A2               	movwf	___ftge@ff1+2
  5104  0E29  3000               	movlw	0
  5105  0E2A  00A3               	movwf	___ftge@ff2
  5106  0E2B  3000               	movlw	0
  5107  0E2C  00A4               	movwf	___ftge@ff2+1
  5108  0E2D  3000               	movlw	0
  5109  0E2E  00A5               	movwf	___ftge@ff2+2
  5110  0E2F  3196  263E  318E   	fcall	___ftge
  5111  0E32  1803               	btfsc	3,0
  5112  0E33  2E5E               	goto	l3648
  5113  0E34  302D               	movlw	45
  5114  0E35  0020               	movlb	0	; select bank0
  5115  0E36  00EF               	movwf	??_ftoa
  5116  0E37  0021               	movlb	1	; select bank1
  5117  0E38  0832               	movf	ftoa@cp^(0+128),w
  5118  0E39  0086               	movwf	6
  5119  0E3A  3001               	movlw	1	; select bank2/3
  5120  0E3B  0087               	movwf	7
  5121  0E3C  0020               	movlb	0	; select bank0
  5122  0E3D  086F               	movf	??_ftoa,w
  5123  0E3E  0081               	movwf	1
  5124  0E3F  3001               	movlw	1
  5125  0E40  00EF               	movwf	??_ftoa
  5126  0E41  086F               	movf	??_ftoa,w
  5127  0E42  0021               	movlb	1	; select bank1
  5128  0E43  07B2               	addwf	ftoa@cp^(0+128),f
  5129  0E44  0826               	movf	ftoa@f^(0+128),w
  5130  0E45  0020               	movlb	0	; select bank0
  5131  0E46  00D7               	movwf	___ftneg@f1
  5132  0E47  0021               	movlb	1	; select bank1
  5133  0E48  0827               	movf	(ftoa@f+1)^(0+128),w
  5134  0E49  0020               	movlb	0	; select bank0
  5135  0E4A  00D8               	movwf	___ftneg@f1+1
  5136  0E4B  0021               	movlb	1	; select bank1
  5137  0E4C  0828               	movf	(ftoa@f+2)^(0+128),w
  5138  0E4D  0020               	movlb	0	; select bank0
  5139  0E4E  00D9               	movwf	___ftneg@f1+2
  5140  0E4F  3192  2277  318E   	fcall	___ftneg
  5141  0E52  0020               	movlb	0	; select bank0
  5142  0E53  0857               	movf	?___ftneg,w
  5143  0E54  0021               	movlb	1	; select bank1
  5144  0E55  00A6               	movwf	ftoa@f^(0+128)
  5145  0E56  0020               	movlb	0	; select bank0
  5146  0E57  0858               	movf	?___ftneg+1,w
  5147  0E58  0021               	movlb	1	; select bank1
  5148  0E59  00A7               	movwf	(ftoa@f+1)^(0+128)
  5149  0E5A  0020               	movlb	0	; select bank0
  5150  0E5B  0859               	movf	?___ftneg+2,w
  5151  0E5C  0021               	movlb	1	; select bank1
  5152  0E5D  00A8               	movwf	(ftoa@f+2)^(0+128)
  5153  0E5E                     l3648:	
  5154  0E5E  0021               	movlb	1	; select bank1
  5155  0E5F  0826               	movf	ftoa@f^(0+128),w
  5156  0E60  0020               	movlb	0	; select bank0
  5157  0E61  00E7               	movwf	___fttol@f1
  5158  0E62  0021               	movlb	1	; select bank1
  5159  0E63  0827               	movf	(ftoa@f+1)^(0+128),w
  5160  0E64  0020               	movlb	0	; select bank0
  5161  0E65  00E8               	movwf	___fttol@f1+1
  5162  0E66  0021               	movlb	1	; select bank1
  5163  0E67  0828               	movf	(ftoa@f+2)^(0+128),w
  5164  0E68  0020               	movlb	0	; select bank0
  5165  0E69  00E9               	movwf	___fttol@f1+2
  5166  0E6A  3187  275C  318E   	fcall	___fttol
  5167  0E6D  0020               	movlb	0	; select bank0
  5168  0E6E  086A               	movf	?___fttol+3,w
  5169  0E6F  0021               	movlb	1	; select bank1
  5170  0E70  00B1               	movwf	(ftoa@l+3)^(0+128)
  5171  0E71  0020               	movlb	0	; select bank0
  5172  0E72  0869               	movf	?___fttol+2,w
  5173  0E73  0021               	movlb	1	; select bank1
  5174  0E74  00B0               	movwf	(ftoa@l+2)^(0+128)
  5175  0E75  0020               	movlb	0	; select bank0
  5176  0E76  0868               	movf	?___fttol+1,w
  5177  0E77  0021               	movlb	1	; select bank1
  5178  0E78  00AF               	movwf	(ftoa@l+1)^(0+128)
  5179  0E79  0020               	movlb	0	; select bank0
  5180  0E7A  0867               	movf	?___fttol,w
  5181  0E7B  0021               	movlb	1	; select bank1
  5182  0E7C  00AE               	movwf	ftoa@l^(0+128)
  5183  0E7D  0831               	movf	(ftoa@l+3)^(0+128),w
  5184  0E7E  0020               	movlb	0	; select bank0
  5185  0E7F  00AB               	movwf	___lltoft@c+3
  5186  0E80  0021               	movlb	1	; select bank1
  5187  0E81  0830               	movf	(ftoa@l+2)^(0+128),w
  5188  0E82  0020               	movlb	0	; select bank0
  5189  0E83  00AA               	movwf	___lltoft@c+2
  5190  0E84  0021               	movlb	1	; select bank1
  5191  0E85  082F               	movf	(ftoa@l+1)^(0+128),w
  5192  0E86  0020               	movlb	0	; select bank0
  5193  0E87  00A9               	movwf	___lltoft@c+1
  5194  0E88  0021               	movlb	1	; select bank1
  5195  0E89  082E               	movf	ftoa@l^(0+128),w
  5196  0E8A  0020               	movlb	0	; select bank0
  5197  0E8B  00A8               	movwf	___lltoft@c
  5198  0E8C  3195  2529  318E   	fcall	___lltoft
  5199  0E8F  0020               	movlb	0	; select bank0
  5200  0E90  0828               	movf	?___lltoft,w
  5201  0E91  00BB               	movwf	___ftsub@f2
  5202  0E92  0829               	movf	?___lltoft+1,w
  5203  0E93  00BC               	movwf	___ftsub@f2+1
  5204  0E94  082A               	movf	?___lltoft+2,w
  5205  0E95  00BD               	movwf	___ftsub@f2+2
  5206  0E96  0021               	movlb	1	; select bank1
  5207  0E97  0826               	movf	ftoa@f^(0+128),w
  5208  0E98  0020               	movlb	0	; select bank0
  5209  0E99  00BE               	movwf	___ftsub@f1
  5210  0E9A  0021               	movlb	1	; select bank1
  5211  0E9B  0827               	movf	(ftoa@f+1)^(0+128),w
  5212  0E9C  0020               	movlb	0	; select bank0
  5213  0E9D  00BF               	movwf	___ftsub@f1+1
  5214  0E9E  0021               	movlb	1	; select bank1
  5215  0E9F  0828               	movf	(ftoa@f+2)^(0+128),w
  5216  0EA0  0020               	movlb	0	; select bank0
  5217  0EA1  00C0               	movwf	___ftsub@f1+2
  5218  0EA2  3193  23EC  318E   	fcall	___ftsub
  5219  0EA5  0020               	movlb	0	; select bank0
  5220  0EA6  083B               	movf	?___ftsub,w
  5221  0EA7  0021               	movlb	1	; select bank1
  5222  0EA8  00A6               	movwf	ftoa@f^(0+128)
  5223  0EA9  0020               	movlb	0	; select bank0
  5224  0EAA  083C               	movf	?___ftsub+1,w
  5225  0EAB  0021               	movlb	1	; select bank1
  5226  0EAC  00A7               	movwf	(ftoa@f+1)^(0+128)
  5227  0EAD  0020               	movlb	0	; select bank0
  5228  0EAE  083D               	movf	?___ftsub+2,w
  5229  0EAF  0021               	movlb	1	; select bank1
  5230  0EB0  00A8               	movwf	(ftoa@f+2)^(0+128)
  5231  0EB1  0826               	movf	ftoa@f^(0+128),w
  5232  0EB2  0020               	movlb	0	; select bank0
  5233  0EB3  00DA               	movwf	___ftmul@f2
  5234  0EB4  0021               	movlb	1	; select bank1
  5235  0EB5  0827               	movf	(ftoa@f+1)^(0+128),w
  5236  0EB6  0020               	movlb	0	; select bank0
  5237  0EB7  00DB               	movwf	___ftmul@f2+1
  5238  0EB8  0021               	movlb	1	; select bank1
  5239  0EB9  0828               	movf	(ftoa@f+2)^(0+128),w
  5240  0EBA  0020               	movlb	0	; select bank0
  5241  0EBB  00DC               	movwf	___ftmul@f2+2
  5242  0EBC  3024               	movlw	36
  5243  0EBD  00D7               	movwf	___ftmul@f1
  5244  0EBE  3074               	movlw	116
  5245  0EBF  00D8               	movwf	___ftmul@f1+1
  5246  0EC0  3049               	movlw	73
  5247  0EC1  00D9               	movwf	___ftmul@f1+2
  5248  0EC2  318C  249C  318E   	fcall	___ftmul
  5249  0EC5  0020               	movlb	0	; select bank0
  5250  0EC6  0857               	movf	?___ftmul,w
  5251  0EC7  00E7               	movwf	___fttol@f1
  5252  0EC8  0858               	movf	?___ftmul+1,w
  5253  0EC9  00E8               	movwf	___fttol@f1+1
  5254  0ECA  0859               	movf	?___ftmul+2,w
  5255  0ECB  00E9               	movwf	___fttol@f1+2
  5256  0ECC  3187  275C  318E   	fcall	___fttol
  5257  0ECF  0020               	movlb	0	; select bank0
  5258  0ED0  086A               	movf	?___fttol+3,w
  5259  0ED1  0021               	movlb	1	; select bank1
  5260  0ED2  00AD               	movwf	(ftoa@rem+3)^(0+128)
  5261  0ED3  0020               	movlb	0	; select bank0
  5262  0ED4  0869               	movf	?___fttol+2,w
  5263  0ED5  0021               	movlb	1	; select bank1
  5264  0ED6  00AC               	movwf	(ftoa@rem+2)^(0+128)
  5265  0ED7  0020               	movlb	0	; select bank0
  5266  0ED8  0868               	movf	?___fttol+1,w
  5267  0ED9  0021               	movlb	1	; select bank1
  5268  0EDA  00AB               	movwf	(ftoa@rem+1)^(0+128)
  5269  0EDB  0020               	movlb	0	; select bank0
  5270  0EDC  0867               	movf	?___fttol,w
  5271  0EDD  0021               	movlb	1	; select bank1
  5272  0EDE  00AA               	movwf	ftoa@rem^(0+128)
  5273  0EDF  3029               	movlw	low (STR_13| (0+32768))
  5274  0EE0  0020               	movlb	0	; select bank0
  5275  0EE1  00B8               	movwf	sprintf@f
  5276  0EE2  3098               	movlw	high (STR_13| (0+32768))
  5277  0EE3  00B9               	movwf	sprintf@f+1
  5278  0EE4  0021               	movlb	1	; select bank1
  5279  0EE5  0831               	movf	(ftoa@l+3)^(0+128),w
  5280  0EE6  0020               	movlb	0	; select bank0
  5281  0EE7  00BD               	movwf	?_sprintf+5
  5282  0EE8  0021               	movlb	1	; select bank1
  5283  0EE9  0830               	movf	(ftoa@l+2)^(0+128),w
  5284  0EEA  0020               	movlb	0	; select bank0
  5285  0EEB  00BC               	movwf	?_sprintf+4
  5286  0EEC  0021               	movlb	1	; select bank1
  5287  0EED  082F               	movf	(ftoa@l+1)^(0+128),w
  5288  0EEE  0020               	movlb	0	; select bank0
  5289  0EEF  00BB               	movwf	?_sprintf+3
  5290  0EF0  0021               	movlb	1	; select bank1
  5291  0EF1  082E               	movf	ftoa@l^(0+128),w
  5292  0EF2  0020               	movlb	0	; select bank0
  5293  0EF3  00BA               	movwf	?_sprintf+2
  5294  0EF4  0021               	movlb	1	; select bank1
  5295  0EF5  082D               	movf	(ftoa@rem+3)^(0+128),w
  5296  0EF6  0020               	movlb	0	; select bank0
  5297  0EF7  00C1               	movwf	?_sprintf+9
  5298  0EF8  0021               	movlb	1	; select bank1
  5299  0EF9  082C               	movf	(ftoa@rem+2)^(0+128),w
  5300  0EFA  0020               	movlb	0	; select bank0
  5301  0EFB  00C0               	movwf	?_sprintf+8
  5302  0EFC  0021               	movlb	1	; select bank1
  5303  0EFD  082B               	movf	(ftoa@rem+1)^(0+128),w
  5304  0EFE  0020               	movlb	0	; select bank0
  5305  0EFF  00BF               	movwf	?_sprintf+7
  5306  0F00  0021               	movlb	1	; select bank1
  5307  0F01  082A               	movf	ftoa@rem^(0+128),w
  5308  0F02  0020               	movlb	0	; select bank0
  5309  0F03  00BE               	movwf	?_sprintf+6
  5310  0F04  0021               	movlb	1	; select bank1
  5311  0F05  0832               	movf	ftoa@cp^(0+128),w
  5312  0F06  3183  2301         	fcall	_sprintf
  5313  0F08  30C9               	movlw	(low (ftoa@buf| (0+256)))& (0+255)
  5314  0F09  0008               	return
  5315  0F0A                     __end_of_ftoa:	
  5316                           
  5317                           	psect	text12
  5318  0301                     __ptext12:	
  5319 ;; *************** function _sprintf *****************
  5320 ;; Defined at:
  5321 ;;		line 500 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\doprnt.c"
  5322 ;; Parameters:    Size  Location     Type
  5323 ;;  sp              1    wreg     PTR unsigned char 
  5324 ;;		 -> ftoa@buf(17), 
  5325 ;;  f               2   24[BANK0 ] PTR const unsigned char 
  5326 ;;		 -> STR_13(11), 
  5327 ;; Auto vars:     Size  Location     Type
  5328 ;;  sp              1   46[BANK0 ] PTR unsigned char 
  5329 ;;		 -> ftoa@buf(17), 
  5330 ;;  val             4   42[BANK0 ] unsigned long 
  5331 ;;  tmpval          4    0        struct .
  5332 ;;  prec            2   49[BANK0 ] int 
  5333 ;;  width           2   47[BANK0 ] int 
  5334 ;;  cp              2    0        PTR const unsigned char 
  5335 ;;  len             2    0        unsigned int 
  5336 ;;  c               1   51[BANK0 ] unsigned char 
  5337 ;;  ap              1   41[BANK0 ] PTR void [1]
  5338 ;;		 -> ?_sprintf(2), 
  5339 ;;  flag            1   40[BANK0 ] unsigned char 
  5340 ;; Return value:  Size  Location     Type
  5341 ;;                  2   24[BANK0 ] int 
  5342 ;; Registers used:
  5343 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5344 ;; Tracked objects:
  5345 ;;		On entry : 0/0
  5346 ;;		On exit  : 0/0
  5347 ;;		Unchanged: 0/0
  5348 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5349 ;;      Params:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5350 ;;      Locals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5351 ;;      Temps:          0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5352 ;;      Totals:         0      28       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5353 ;;Total ram usage:       28 bytes
  5354 ;; Hardware stack levels used:    1
  5355 ;; Hardware stack levels required when called:    8
  5356 ;; This function calls:
  5357 ;;		___lldiv
  5358 ;;		___llmod
  5359 ;;		___wmul
  5360 ;;		_isdigit
  5361 ;; This function is called by:
  5362 ;;		_ftoa
  5363 ;; This function uses a non-reentrant model
  5364 ;;
  5365                           
  5366                           
  5367                           ;psect for function _sprintf
  5368  0301                     _sprintf:	
  5369                           
  5370                           ;incstack = 0
  5371                           ; Regs used in _sprintf: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5372                           ;sprintf@sp stored from wreg
  5373  0301  0020               	movlb	0	; select bank0
  5374  0302  00CE               	movwf	sprintf@sp
  5375                           
  5376                           ;doprnt.c: 502: va_list ap;;doprnt.c: 507: char c;;doprnt.c: 509: int width;;doprnt.c: 5
      +                          12: int prec;;doprnt.c: 520: unsigned char flag;;doprnt.c: 535: union {;doprnt.c: 536: u
      +                          nsigned long vd;;doprnt.c: 537: double integ;;doprnt.c: 538: } tmpval;;doprnt.c: 540: un
      +                          signed long val;;doprnt.c: 541: unsigned len;;doprnt.c: 542: const char * cp;;doprnt.c: 
      +                          545: *ap = __va_start();
  5377  0303  303A               	movlw	(low ((?_sprintf| 0+2)))& (0+255)
  5378  0304  00C2               	movwf	??_sprintf
  5379  0305  0842               	movf	??_sprintf,w
  5380  0306  00C9               	movwf	sprintf@ap
  5381  0307                     l3280:	
  5382                           ;doprnt.c: 548: while((c = *f++)) {
  5383                           
  5384  0307  0839               	movf	sprintf@f+1,w
  5385  0308  00C3               	movwf	??_sprintf+1
  5386  0309  0838               	movf	sprintf@f,w
  5387  030A  00C2               	movwf	??_sprintf
  5388  030B  0AB8               	incf	sprintf@f,f
  5389  030C  1903               	skipnz
  5390  030D  0AB9               	incf	sprintf@f+1,f
  5391  030E  0842               	movf	??_sprintf,w
  5392  030F  0084               	movwf	4
  5393  0310  0843               	movf	??_sprintf+1,w
  5394  0311  0085               	movwf	5
  5395  0312  0800               	movf	0,w	;code access
  5396  0313  00C4               	movwf	??_sprintf+2
  5397  0314  0844               	movf	??_sprintf+2,w
  5398  0315  00D3               	movwf	sprintf@c
  5399  0316  0853               	movf	sprintf@c,w
  5400  0317  1903               	btfsc	3,2
  5401  0318  2CC8               	goto	l3282
  5402                           
  5403                           ;doprnt.c: 550: if(c != '%')
  5404  0319  3025               	movlw	37
  5405  031A  0653               	xorwf	sprintf@c,w
  5406  031B  1903               	btfsc	3,2
  5407  031C  2B2A               	goto	l3192
  5408                           
  5409                           ;doprnt.c: 552: {;doprnt.c: 553: ((*sp++ = (c)));
  5410  031D  0853               	movf	sprintf@c,w
  5411  031E  00C2               	movwf	??_sprintf
  5412  031F  084E               	movf	sprintf@sp,w
  5413  0320  0086               	movwf	6
  5414  0321  3001               	movlw	1	; select bank2/3
  5415  0322  0087               	movwf	7
  5416  0323  0842               	movf	??_sprintf,w
  5417  0324  0081               	movwf	1
  5418  0325  3001               	movlw	1
  5419  0326  00C2               	movwf	??_sprintf
  5420  0327  0842               	movf	??_sprintf,w
  5421  0328  07CE               	addwf	sprintf@sp,f
  5422                           
  5423                           ;doprnt.c: 554: continue;
  5424  0329  2B07               	goto	l3280
  5425  032A                     l3192:	
  5426                           
  5427                           ;doprnt.c: 555: };doprnt.c: 558: width = 0;
  5428  032A  01CF               	clrf	sprintf@width
  5429  032B  01D0               	clrf	sprintf@width+1
  5430                           
  5431                           ;doprnt.c: 560: flag = 0;
  5432  032C  01C8               	clrf	sprintf@flag
  5433                           
  5434                           ;doprnt.c: 609: if(isdigit((unsigned)*f)) {
  5435  032D  0838               	movf	sprintf@f,w
  5436  032E  0084               	movwf	4
  5437  032F  0839               	movf	sprintf@f+1,w
  5438  0330  0085               	movwf	5
  5439  0331  0800               	movf	0,w	;code access
  5440  0332  3192  228D  3183   	fcall	_isdigit
  5441  0335  1C03               	btfss	3,0
  5442  0336  2B68               	goto	l3206
  5443                           
  5444                           ;doprnt.c: 610: width = 0;
  5445  0337  0020               	movlb	0	; select bank0
  5446  0338  01CF               	clrf	sprintf@width
  5447  0339  01D0               	clrf	sprintf@width+1
  5448  033A                     l3198:	
  5449                           ;doprnt.c: 611: do {
  5450                           
  5451                           
  5452                           ;doprnt.c: 612: width *= 10;
  5453  033A  300A               	movlw	10
  5454  033B  0020               	movlb	0	; select bank0
  5455  033C  00A0               	movwf	___wmul@multiplier
  5456  033D  3000               	movlw	0
  5457  033E  00A1               	movwf	___wmul@multiplier+1
  5458  033F  0850               	movf	sprintf@width+1,w
  5459  0340  00A3               	movwf	___wmul@multiplicand+1
  5460  0341  084F               	movf	sprintf@width,w
  5461  0342  00A2               	movwf	___wmul@multiplicand
  5462  0343  3193  23B4  3183   	fcall	___wmul
  5463  0346  0020               	movlb	0	; select bank0
  5464  0347  0821               	movf	?___wmul+1,w
  5465  0348  00D0               	movwf	sprintf@width+1
  5466  0349  0820               	movf	?___wmul,w
  5467  034A  00CF               	movwf	sprintf@width
  5468                           
  5469                           ;doprnt.c: 613: width += *f++ - '0';
  5470  034B  0838               	movf	sprintf@f,w
  5471  034C  0084               	movwf	4
  5472  034D  0839               	movf	sprintf@f+1,w
  5473  034E  0085               	movwf	5
  5474  034F  0800               	movf	0,w	;code access
  5475  0350  3ED0               	addlw	208
  5476  0351  00C2               	movwf	??_sprintf
  5477  0352  30FF               	movlw	255
  5478  0353  1803               	skipnc
  5479  0354  3000               	movlw	0
  5480  0355  00C3               	movwf	??_sprintf+1
  5481  0356  0842               	movf	??_sprintf,w
  5482  0357  07CF               	addwf	sprintf@width,f
  5483  0358  0843               	movf	??_sprintf+1,w
  5484  0359  3DD0               	addwfc	sprintf@width+1,f
  5485  035A  3001               	movlw	1
  5486  035B  07B8               	addwf	sprintf@f,f
  5487  035C  3000               	movlw	0
  5488  035D  3DB9               	addwfc	sprintf@f+1,f
  5489                           
  5490                           ;doprnt.c: 614: } while(isdigit((unsigned)*f));
  5491  035E  0838               	movf	sprintf@f,w
  5492  035F  0084               	movwf	4
  5493  0360  0839               	movf	sprintf@f+1,w
  5494  0361  0085               	movwf	5
  5495  0362  0800               	movf	0,w	;code access
  5496  0363  3192  228D  3183   	fcall	_isdigit
  5497  0366  1803               	btfsc	3,0
  5498  0367  2B3A               	goto	l3198
  5499  0368                     l3206:	
  5500                           
  5501                           ;doprnt.c: 620: };doprnt.c: 623: if(*f == '.') {
  5502  0368  0020               	movlb	0	; select bank0
  5503  0369  0838               	movf	sprintf@f,w
  5504  036A  0084               	movwf	4
  5505  036B  0839               	movf	sprintf@f+1,w
  5506  036C  0085               	movwf	5
  5507  036D  0012               	moviw fsr0++
  5508  036E  3A2E               	xorlw	46
  5509  036F  1D03               	btfss	3,2
  5510  0370  2BA6               	goto	l3218
  5511                           
  5512                           ;doprnt.c: 625: f++;
  5513  0371  3001               	movlw	1
  5514  0372  07B8               	addwf	sprintf@f,f
  5515  0373  3000               	movlw	0
  5516  0374  3DB9               	addwfc	sprintf@f+1,f
  5517                           
  5518                           ;doprnt.c: 639: {;doprnt.c: 640: prec = 0;
  5519  0375  01D1               	clrf	sprintf@prec
  5520  0376  01D2               	clrf	sprintf@prec+1
  5521  0377                     l3216:	
  5522                           ;doprnt.c: 641: while(isdigit((unsigned)*f))
  5523                           
  5524  0377  0838               	movf	sprintf@f,w
  5525  0378  0084               	movwf	4
  5526  0379  0839               	movf	sprintf@f+1,w
  5527  037A  0085               	movwf	5
  5528  037B  0800               	movf	0,w	;code access
  5529  037C  3192  228D  3183   	fcall	_isdigit
  5530  037F  1C03               	btfss	3,0
  5531  0380  2BB1               	goto	l3224
  5532                           
  5533                           ;doprnt.c: 642: prec = prec*10 + *f++ - '0';
  5534  0381  0020               	movlb	0	; select bank0
  5535  0382  0838               	movf	sprintf@f,w
  5536  0383  0084               	movwf	4
  5537  0384  0839               	movf	sprintf@f+1,w
  5538  0385  0085               	movwf	5
  5539  0386  0800               	movf	0,w	;code access
  5540  0387  00C2               	movwf	??_sprintf
  5541  0388  01C3               	clrf	??_sprintf+1
  5542  0389  0852               	movf	sprintf@prec+1,w
  5543  038A  00A1               	movwf	___wmul@multiplier+1
  5544  038B  0851               	movf	sprintf@prec,w
  5545  038C  00A0               	movwf	___wmul@multiplier
  5546  038D  300A               	movlw	10
  5547  038E  00A2               	movwf	___wmul@multiplicand
  5548  038F  3000               	movlw	0
  5549  0390  00A3               	movwf	___wmul@multiplicand+1
  5550  0391  3193  23B4  3183   	fcall	___wmul
  5551  0394  0020               	movlb	0	; select bank0
  5552  0395  0842               	movf	??_sprintf,w
  5553  0396  0720               	addwf	?___wmul,w
  5554  0397  00C4               	movwf	??_sprintf+2
  5555  0398  0843               	movf	??_sprintf+1,w
  5556  0399  3D21               	addwfc	?___wmul+1,w
  5557  039A  00C5               	movwf	??_sprintf+3
  5558  039B  0844               	movf	??_sprintf+2,w
  5559  039C  3ED0               	addlw	208
  5560  039D  00D1               	movwf	sprintf@prec
  5561  039E  30FF               	movlw	255
  5562  039F  3D45               	addwfc	??_sprintf+3,w
  5563  03A0  00D2               	movwf	sprintf@prec+1
  5564  03A1  3001               	movlw	1
  5565  03A2  07B8               	addwf	sprintf@f,f
  5566  03A3  3000               	movlw	0
  5567  03A4  3DB9               	addwfc	sprintf@f+1,f
  5568  03A5  2B77               	goto	l3216
  5569  03A6                     l3218:	
  5570                           ;doprnt.c: 643: };doprnt.c: 644: } else {
  5571                           
  5572                           
  5573                           ;doprnt.c: 645: prec = 0;
  5574  03A6  0020               	movlb	0	; select bank0
  5575  03A7  01D1               	clrf	sprintf@prec
  5576  03A8  01D2               	clrf	sprintf@prec+1
  5577                           
  5578                           ;doprnt.c: 654: switch(c = *f++) {
  5579                           
  5580                           ;doprnt.c: 649: };doprnt.c: 652: loop:
  5581  03A9  2BB1               	goto	l3224
  5582  03AA                     l456:	
  5583                           ;doprnt.c: 660: case 'l':
  5584                           
  5585                           ;doprnt.c: 657: goto alldone;
  5586                           
  5587                           ;doprnt.c: 656: case 0:
  5588                           
  5589                           
  5590                           ;doprnt.c: 662: flag |= 0x10;
  5591  03AA  1648               	bsf	sprintf@flag,4
  5592                           
  5593                           ;doprnt.c: 663: goto loop;
  5594  03AB  2BB1               	goto	l3224
  5595  03AC                     l3220:	
  5596                           ;doprnt.c: 836: case 'u':
  5597                           
  5598                           ;doprnt.c: 832: continue;
  5599                           
  5600                           ;doprnt.c: 821: default:
  5601                           
  5602                           
  5603                           ;doprnt.c: 837: flag |= 0xC0;
  5604  03AC  30C0               	movlw	192
  5605  03AD  00C2               	movwf	??_sprintf
  5606  03AE  0842               	movf	??_sprintf,w
  5607  03AF  04C8               	iorwf	sprintf@flag,f
  5608                           
  5609                           ;doprnt.c: 841: }
  5610                           
  5611                           ;doprnt.c: 838: break;
  5612  03B0  2BC9               	goto	l459
  5613  03B1                     l3224:	
  5614  03B1  0020               	movlb	0	; select bank0
  5615  03B2  0839               	movf	sprintf@f+1,w
  5616  03B3  00C3               	movwf	??_sprintf+1
  5617  03B4  0838               	movf	sprintf@f,w
  5618  03B5  00C2               	movwf	??_sprintf
  5619  03B6  0AB8               	incf	sprintf@f,f
  5620  03B7  1903               	skipnz
  5621  03B8  0AB9               	incf	sprintf@f+1,f
  5622  03B9  0842               	movf	??_sprintf,w
  5623  03BA  0084               	movwf	4
  5624  03BB  0843               	movf	??_sprintf+1,w
  5625  03BC  0085               	movwf	5
  5626  03BD  0800               	movf	0,w	;code access
  5627  03BE  00D3               	movwf	sprintf@c
  5628                           
  5629                           ; Switch size 1, requested type "space"
  5630                           ; Number of cases is 3, Range of values is 0 to 117
  5631                           ; switch strategies available:
  5632                           ; Name         Instructions Cycles
  5633                           ; simple_byte           10     6 (average)
  5634                           ; direct_byte          242     6 (fixed)
  5635                           ; jumptable            260     6 (fixed)
  5636                           ;	Chosen strategy is simple_byte
  5637  03BF  3A00               	xorlw	0	; case 0
  5638  03C0  1903               	skipnz
  5639  03C1  2CC8               	goto	l3282
  5640  03C2  3A6C               	xorlw	108	; case 108
  5641  03C3  1903               	skipnz
  5642  03C4  2BAA               	goto	l456
  5643  03C5  3A19               	xorlw	25	; case 117
  5644  03C6  1903               	skipnz
  5645  03C7  2BAC               	goto	l3220
  5646  03C8  2B07               	goto	l3280
  5647  03C9                     l459:	
  5648                           
  5649                           ;doprnt.c: 1292: {;doprnt.c: 1300: if(flag & 0x10)
  5650  03C9  1E48               	btfss	sprintf@flag,4
  5651  03CA  2BD8               	goto	l3230
  5652                           
  5653                           ;doprnt.c: 1301: val = (*(unsigned long *)__va_arg((*(unsigned long **)ap), (unsigned lo
      +                          ng)0));
  5654  03CB  0849               	movf	sprintf@ap,w
  5655  03CC  0086               	movwf	6
  5656  03CD  0187               	clrf	7
  5657  03CE  3F40               	moviw [0]fsr1
  5658  03CF  00CA               	movwf	sprintf@val
  5659  03D0  3F41               	moviw [1]fsr1
  5660  03D1  00CB               	movwf	sprintf@val+1
  5661  03D2  3F42               	moviw [2]fsr1
  5662  03D3  00CC               	movwf	sprintf@val+2
  5663  03D4  3F43               	moviw [3]fsr1
  5664  03D5  00CD               	movwf	sprintf@val+3
  5665  03D6  3004               	movlw	4
  5666  03D7  2BE6               	goto	L2
  5667  03D8                     l3230:	
  5668                           
  5669                           ;doprnt.c: 1302: else;doprnt.c: 1305: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (
      +                          unsigned)0));
  5670  03D8  0849               	movf	sprintf@ap,w
  5671  03D9  0086               	movwf	6
  5672  03DA  0187               	clrf	7
  5673  03DB  3F40               	moviw [0]fsr1
  5674  03DC  00C2               	movwf	??_sprintf
  5675  03DD  3F41               	moviw [1]fsr1
  5676  03DE  00C3               	movwf	??_sprintf+1
  5677  03DF  0842               	movf	??_sprintf,w
  5678  03E0  00CA               	movwf	sprintf@val
  5679  03E1  0843               	movf	??_sprintf+1,w
  5680  03E2  00CB               	movwf	sprintf@val+1
  5681  03E3  01CC               	clrf	sprintf@val+2
  5682  03E4  01CD               	clrf	sprintf@val+3
  5683  03E5  3002               	movlw	2
  5684  03E6                     L2:	
  5685  03E6  00C2               	movwf	??_sprintf
  5686  03E7  0842               	movf	??_sprintf,w
  5687  03E8  07C9               	addwf	sprintf@ap,f
  5688                           
  5689                           ;doprnt.c: 1306: };doprnt.c: 1309: if(prec == 0 && val == 0)
  5690  03E9  0851               	movf	sprintf@prec,w
  5691  03EA  0452               	iorwf	sprintf@prec+1,w
  5692  03EB  1D03               	btfss	3,2
  5693  03EC  2BF7               	goto	l3240
  5694  03ED  084D               	movf	sprintf@val+3,w
  5695  03EE  044C               	iorwf	sprintf@val+2,w
  5696  03EF  044B               	iorwf	sprintf@val+1,w
  5697  03F0  044A               	iorwf	sprintf@val,w
  5698  03F1  1D03               	skipz
  5699  03F2  2BF7               	goto	l3240
  5700                           
  5701                           ;doprnt.c: 1310: prec++;
  5702  03F3  3001               	movlw	1
  5703  03F4  07D1               	addwf	sprintf@prec,f
  5704  03F5  3000               	movlw	0
  5705  03F6  3DD2               	addwfc	sprintf@prec+1,f
  5706  03F7                     l3240:	
  5707                           
  5708                           ;doprnt.c: 1324: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  5709  03F7  01D3               	clrf	sprintf@c
  5710  03F8  0AD3               	incf	sprintf@c,f
  5711  03F9  300A               	movlw	10
  5712  03FA  0653               	xorwf	sprintf@c,w
  5713  03FB  1903               	btfsc	3,2
  5714  03FC  2C2A               	goto	l3252
  5715  03FD                     l3246:	
  5716                           
  5717                           ;doprnt.c: 1325: if(val < dpowers[c])
  5718  03FD  0853               	movf	sprintf@c,w
  5719  03FE  00C2               	movwf	??_sprintf
  5720  03FF  01C3               	clrf	??_sprintf+1
  5721  0400  35C2               	lslf	??_sprintf,f
  5722  0401  0DC3               	rlf	??_sprintf+1,f
  5723  0402  35C2               	lslf	??_sprintf,f
  5724  0403  0DC3               	rlf	??_sprintf+1,f
  5725  0404  3000               	movlw	low (_dpowers| (0+32768))
  5726  0405  0742               	addwf	??_sprintf,w
  5727  0406  0084               	movwf	4
  5728  0407  3098               	movlw	high (_dpowers| (0+32768))
  5729  0408  3D43               	addwfc	??_sprintf+1,w
  5730  0409  0085               	movwf	5
  5731  040A  3F00               	moviw [0]fsr0
  5732  040B  00C4               	movwf	??_sprintf+2
  5733  040C  3F01               	moviw [1]fsr0
  5734  040D  00C5               	movwf	??_sprintf+3
  5735  040E  3F02               	moviw [2]fsr0
  5736  040F  00C6               	movwf	??_sprintf+4
  5737  0410  3F03               	moviw [3]fsr0
  5738  0411  00C7               	movwf	??_sprintf+5
  5739  0412  0847               	movf	??_sprintf+5,w
  5740  0413  024D               	subwf	sprintf@val+3,w
  5741  0414  1D03               	skipz
  5742  0415  2C20               	goto	u3415
  5743  0416  0846               	movf	??_sprintf+4,w
  5744  0417  024C               	subwf	sprintf@val+2,w
  5745  0418  1D03               	skipz
  5746  0419  2C20               	goto	u3415
  5747  041A  0845               	movf	??_sprintf+3,w
  5748  041B  024B               	subwf	sprintf@val+1,w
  5749  041C  1D03               	skipz
  5750  041D  2C20               	goto	u3415
  5751  041E  0844               	movf	??_sprintf+2,w
  5752  041F  024A               	subwf	sprintf@val,w
  5753  0420                     u3415:	
  5754  0420  1C03               	btfss	3,0
  5755  0421  2C2A               	goto	l3252
  5756                           
  5757                           ;doprnt.c: 1326: break;
  5758  0422  3001               	movlw	1
  5759  0423  00C2               	movwf	??_sprintf
  5760  0424  0842               	movf	??_sprintf,w
  5761  0425  07D3               	addwf	sprintf@c,f
  5762  0426  300A               	movlw	10
  5763  0427  0653               	xorwf	sprintf@c,w
  5764  0428  1D03               	btfss	3,2
  5765  0429  2BFD               	goto	l3246
  5766  042A                     l3252:	
  5767                           
  5768                           ;doprnt.c: 1358: if(c < prec)
  5769  042A  0852               	movf	sprintf@prec+1,w
  5770  042B  3A80               	xorlw	128
  5771  042C  3C80               	sublw	128
  5772  042D  1D03               	skipz
  5773  042E  2C31               	goto	u3435
  5774  042F  0851               	movf	sprintf@prec,w
  5775  0430  0253               	subwf	sprintf@c,w
  5776  0431                     u3435:	
  5777  0431  1803               	skipnc
  5778  0432  2C39               	goto	l3256
  5779                           
  5780                           ;doprnt.c: 1359: c = prec;
  5781  0433  0020               	movlb	0	; select bank0
  5782  0434  0851               	movf	sprintf@prec,w
  5783  0435  00C2               	movwf	??_sprintf
  5784  0436  0842               	movf	??_sprintf,w
  5785  0437  00D3               	movwf	sprintf@c
  5786  0438  2C4D               	goto	l467
  5787  0439                     l3256:	
  5788                           
  5789                           ;doprnt.c: 1360: else if(prec < c)
  5790  0439  0020               	movlb	0	; select bank0
  5791  043A  0852               	movf	sprintf@prec+1,w
  5792  043B  3A80               	xorlw	128
  5793  043C  00C2               	movwf	??_sprintf
  5794  043D  3080               	movlw	128
  5795  043E  0242               	subwf	??_sprintf,w
  5796  043F  1D03               	skipz
  5797  0440  2C43               	goto	u3445
  5798  0441  0853               	movf	sprintf@c,w
  5799  0442  0251               	subwf	sprintf@prec,w
  5800  0443                     u3445:	
  5801  0443  1803               	skipnc
  5802  0444  2C4D               	goto	l467
  5803                           
  5804                           ;doprnt.c: 1361: prec = c;
  5805  0445  0020               	movlb	0	; select bank0
  5806  0446  0853               	movf	sprintf@c,w
  5807  0447  00C2               	movwf	??_sprintf
  5808  0448  01C3               	clrf	??_sprintf+1
  5809  0449  0842               	movf	??_sprintf,w
  5810  044A  00D1               	movwf	sprintf@prec
  5811  044B  0843               	movf	??_sprintf+1,w
  5812  044C  00D2               	movwf	sprintf@prec+1
  5813  044D                     l467:	
  5814                           
  5815                           ;doprnt.c: 1400: if(width > c)
  5816  044D  0020               	movlb	0	; select bank0
  5817  044E  0850               	movf	sprintf@width+1,w
  5818  044F  3A80               	xorlw	128
  5819  0450  3C80               	sublw	128
  5820  0451  1D03               	skipz
  5821  0452  2C55               	goto	u3455
  5822  0453  084F               	movf	sprintf@width,w
  5823  0454  0253               	subwf	sprintf@c,w
  5824  0455                     u3455:	
  5825  0455  1803               	skipnc
  5826  0456  2C60               	goto	l3262
  5827                           
  5828                           ;doprnt.c: 1401: width -= c;
  5829  0457  0020               	movlb	0	; select bank0
  5830  0458  0853               	movf	sprintf@c,w
  5831  0459  00C2               	movwf	??_sprintf
  5832  045A  01C3               	clrf	??_sprintf+1
  5833  045B  0842               	movf	??_sprintf,w
  5834  045C  02CF               	subwf	sprintf@width,f
  5835  045D  0843               	movf	??_sprintf+1,w
  5836  045E  3BD0               	subwfb	sprintf@width+1,f
  5837  045F  2C63               	goto	l3264
  5838  0460                     l3262:	
  5839                           
  5840                           ;doprnt.c: 1402: else;doprnt.c: 1403: width = 0;
  5841  0460  0020               	movlb	0	; select bank0
  5842  0461  01CF               	clrf	sprintf@width
  5843  0462  01D0               	clrf	sprintf@width+1
  5844  0463                     l3264:	
  5845                           
  5846                           ;doprnt.c: 1441: {;doprnt.c: 1443: if(width;doprnt.c: 1447: )
  5847  0463  084F               	movf	sprintf@width,w
  5848  0464  0450               	iorwf	sprintf@width+1,w
  5849  0465  1903               	btfsc	3,2
  5850  0466  2CBD               	goto	l3278
  5851                           
  5852                           ;doprnt.c: 1449: ((*sp++ = (' ')));
  5853                           
  5854                           ;doprnt.c: 1448: do
  5855  0467  3020               	movlw	32
  5856  0468  00C2               	movwf	??_sprintf
  5857  0469  084E               	movf	sprintf@sp,w
  5858  046A  0086               	movwf	6
  5859  046B  3001               	movlw	1	; select bank2/3
  5860  046C  0087               	movwf	7
  5861  046D  0842               	movf	??_sprintf,w
  5862  046E  0081               	movwf	1
  5863  046F  3001               	movlw	1
  5864  0470  00C2               	movwf	??_sprintf
  5865  0471  0842               	movf	??_sprintf,w
  5866  0472  07CE               	addwf	sprintf@sp,f
  5867                           
  5868                           ;doprnt.c: 1450: while(--width);
  5869  0473  30FF               	movlw	255
  5870  0474  07CF               	addwf	sprintf@width,f
  5871  0475  30FF               	movlw	255
  5872  0476  3DD0               	addwfc	sprintf@width+1,f
  5873  0477  2C63               	goto	l3264
  5874  0478                     l3272:	
  5875                           ;doprnt.c: 1488: };doprnt.c: 1493: while(prec--) {
  5876                           
  5877                           
  5878                           ;doprnt.c: 1497: {;doprnt.c: 1508: c = (val / dpowers[prec]) % 10 + '0';
  5879  0478  3000               	movlw	0
  5880  0479  00B1               	movwf	___llmod@divisor+3
  5881  047A  3000               	movlw	0
  5882  047B  00B0               	movwf	___llmod@divisor+2
  5883  047C  3000               	movlw	0
  5884  047D  00AF               	movwf	___llmod@divisor+1
  5885  047E  300A               	movlw	10
  5886  047F  00AE               	movwf	___llmod@divisor
  5887  0480  0852               	movf	sprintf@prec+1,w
  5888  0481  0085               	movwf	5
  5889  0482  0851               	movf	sprintf@prec,w
  5890  0483  0084               	movwf	4
  5891  0484  3584               	lslf	4,f
  5892  0485  0D85               	rlf	5,f
  5893  0486  3584               	lslf	4,f
  5894  0487  0D85               	rlf	5,f
  5895  0488  3000               	movlw	low (_dpowers| (0+32768))
  5896  0489  0784               	addwf	4,f
  5897  048A  3098               	movlw	high (_dpowers| (0+32768))
  5898  048B  3D85               	addwfc	5,f
  5899  048C  3F00               	moviw [0]fsr0
  5900  048D  00A0               	movwf	___lldiv@divisor
  5901  048E  3F01               	moviw [1]fsr0
  5902  048F  00A1               	movwf	___lldiv@divisor+1
  5903  0490  3F02               	moviw [2]fsr0
  5904  0491  00A2               	movwf	___lldiv@divisor+2
  5905  0492  3F03               	moviw [3]fsr0
  5906  0493  00A3               	movwf	___lldiv@divisor+3
  5907  0494  084D               	movf	sprintf@val+3,w
  5908  0495  00A7               	movwf	___lldiv@dividend+3
  5909  0496  084C               	movf	sprintf@val+2,w
  5910  0497  00A6               	movwf	___lldiv@dividend+2
  5911  0498  084B               	movf	sprintf@val+1,w
  5912  0499  00A5               	movwf	___lldiv@dividend+1
  5913  049A  084A               	movf	sprintf@val,w
  5914  049B  00A4               	movwf	___lldiv@dividend
  5915  049C  3189  2121  3183   	fcall	___lldiv
  5916  049F  0020               	movlb	0	; select bank0
  5917  04A0  0823               	movf	?___lldiv+3,w
  5918  04A1  00B5               	movwf	___llmod@dividend+3
  5919  04A2  0822               	movf	?___lldiv+2,w
  5920  04A3  00B4               	movwf	___llmod@dividend+2
  5921  04A4  0821               	movf	?___lldiv+1,w
  5922  04A5  00B3               	movwf	___llmod@dividend+1
  5923  04A6  0820               	movf	?___lldiv,w
  5924  04A7  00B2               	movwf	___llmod@dividend
  5925  04A8  3197  2735  3183   	fcall	___llmod
  5926  04AB  0020               	movlb	0	; select bank0
  5927  04AC  082E               	movf	?___llmod,w
  5928  04AD  3E30               	addlw	48
  5929  04AE  00C2               	movwf	??_sprintf
  5930  04AF  0842               	movf	??_sprintf,w
  5931  04B0  00D3               	movwf	sprintf@c
  5932                           
  5933                           ;doprnt.c: 1542: };doprnt.c: 1543: ((*sp++ = (c)));
  5934  04B1  0853               	movf	sprintf@c,w
  5935  04B2  00C2               	movwf	??_sprintf
  5936  04B3  084E               	movf	sprintf@sp,w
  5937  04B4  0086               	movwf	6
  5938  04B5  3001               	movlw	1	; select bank2/3
  5939  04B6  0087               	movwf	7
  5940  04B7  0842               	movf	??_sprintf,w
  5941  04B8  0081               	movwf	1
  5942  04B9  3001               	movlw	1
  5943  04BA  00C2               	movwf	??_sprintf
  5944  04BB  0842               	movf	??_sprintf,w
  5945  04BC  07CE               	addwf	sprintf@sp,f
  5946  04BD                     l3278:	
  5947  04BD  30FF               	movlw	255
  5948  04BE  07D1               	addwf	sprintf@prec,f
  5949  04BF  30FF               	movlw	255
  5950  04C0  3DD2               	addwfc	sprintf@prec+1,f
  5951  04C1  0A51               	incf	sprintf@prec,w
  5952  04C2  1D03               	skipz
  5953  04C3  2C78               	goto	l3272
  5954  04C4  0A52               	incf	sprintf@prec+1,w
  5955  04C5  1903               	btfsc	3,2
  5956  04C6  2B07               	goto	l3280
  5957  04C7  2C78               	goto	l3272
  5958  04C8                     l3282:	
  5959                           ;doprnt.c: 1544: };doprnt.c: 1552: };doprnt.c: 1554: alldone:
  5960                           
  5961                           
  5962                           ;doprnt.c: 1557: *sp = 0;
  5963  04C8  084E               	movf	sprintf@sp,w
  5964  04C9  0086               	movwf	6
  5965  04CA  3001               	movlw	1	; select bank2/3
  5966  04CB  0087               	movwf	7
  5967  04CC  0181               	clrf	1
  5968  04CD  0008               	return
  5969  04CE                     __end_of_sprintf:	
  5970                           ;doprnt.c: 1559: return 0;;	Return value of _sprintf is never used
  5971                           
  5972                           
  5973                           	psect	text13
  5974  13B4                     __ptext13:	
  5975 ;; *************** function ___wmul *****************
  5976 ;; Defined at:
  5977 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\Umul16.c"
  5978 ;; Parameters:    Size  Location     Type
  5979 ;;  multiplier      2    0[BANK0 ] unsigned int 
  5980 ;;  multiplicand    2    2[BANK0 ] unsigned int 
  5981 ;; Auto vars:     Size  Location     Type
  5982 ;;  product         2    4[BANK0 ] unsigned int 
  5983 ;; Return value:  Size  Location     Type
  5984 ;;                  2    0[BANK0 ] unsigned int 
  5985 ;; Registers used:
  5986 ;;		wreg, status,2, status,0
  5987 ;; Tracked objects:
  5988 ;;		On entry : 0/0
  5989 ;;		On exit  : 0/0
  5990 ;;		Unchanged: 0/0
  5991 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5992 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5993 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5994 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5995 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5996 ;;Total ram usage:        6 bytes
  5997 ;; Hardware stack levels used:    1
  5998 ;; Hardware stack levels required when called:    7
  5999 ;; This function calls:
  6000 ;;		Nothing
  6001 ;; This function is called by:
  6002 ;;		_sprintf
  6003 ;; This function uses a non-reentrant model
  6004 ;;
  6005                           
  6006                           
  6007                           ;psect for function ___wmul
  6008  13B4                     ___wmul:	
  6009                           
  6010                           ;incstack = 0
  6011                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  6012  13B4  0020               	movlb	0	; select bank0
  6013  13B5  01A4               	clrf	___wmul@product
  6014  13B6  01A5               	clrf	___wmul@product+1
  6015  13B7                     l2800:	
  6016  13B7  1C20               	btfss	___wmul@multiplier,0
  6017  13B8  2BBD               	goto	l482
  6018  13B9  0822               	movf	___wmul@multiplicand,w
  6019  13BA  07A4               	addwf	___wmul@product,f
  6020  13BB  0823               	movf	___wmul@multiplicand+1,w
  6021  13BC  3DA5               	addwfc	___wmul@product+1,f
  6022  13BD                     l482:	
  6023  13BD  3001               	movlw	1
  6024  13BE                     u2475:	
  6025  13BE  35A2               	lslf	___wmul@multiplicand,f
  6026  13BF  0DA3               	rlf	___wmul@multiplicand+1,f
  6027  13C0  0B89               	decfsz	9,f
  6028  13C1  2BBE               	goto	u2475
  6029  13C2  3001               	movlw	1
  6030  13C3                     u2485:	
  6031  13C3  36A1               	lsrf	___wmul@multiplier+1,f
  6032  13C4  0CA0               	rrf	___wmul@multiplier,f
  6033  13C5  0B89               	decfsz	9,f
  6034  13C6  2BC3               	goto	u2485
  6035  13C7  0820               	movf	___wmul@multiplier,w
  6036  13C8  0421               	iorwf	___wmul@multiplier+1,w
  6037  13C9  1D03               	btfss	3,2
  6038  13CA  2BB7               	goto	l2800
  6039  13CB  0825               	movf	___wmul@product+1,w
  6040  13CC  00A1               	movwf	?___wmul+1
  6041  13CD  0824               	movf	___wmul@product,w
  6042  13CE  00A0               	movwf	?___wmul
  6043  13CF  0008               	return
  6044  13D0                     __end_of___wmul:	
  6045                           
  6046                           	psect	text14
  6047  1735                     __ptext14:	
  6048 ;; *************** function ___llmod *****************
  6049 ;; Defined at:
  6050 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\llmod.c"
  6051 ;; Parameters:    Size  Location     Type
  6052 ;;  divisor         4   14[BANK0 ] unsigned long 
  6053 ;;  dividend        4   18[BANK0 ] unsigned long 
  6054 ;; Auto vars:     Size  Location     Type
  6055 ;;  counter         1   23[BANK0 ] unsigned char 
  6056 ;; Return value:  Size  Location     Type
  6057 ;;                  4   14[BANK0 ] unsigned long 
  6058 ;; Registers used:
  6059 ;;		wreg, status,2, status,0
  6060 ;; Tracked objects:
  6061 ;;		On entry : 0/0
  6062 ;;		On exit  : 0/0
  6063 ;;		Unchanged: 0/0
  6064 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6065 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6066 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6067 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6068 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6069 ;;Total ram usage:       10 bytes
  6070 ;; Hardware stack levels used:    1
  6071 ;; Hardware stack levels required when called:    7
  6072 ;; This function calls:
  6073 ;;		Nothing
  6074 ;; This function is called by:
  6075 ;;		_sprintf
  6076 ;; This function uses a non-reentrant model
  6077 ;;
  6078                           
  6079                           
  6080                           ;psect for function ___llmod
  6081  1735                     ___llmod:	
  6082                           
  6083                           ;incstack = 0
  6084                           ; Regs used in ___llmod: [wreg+status,2+status,0]
  6085  1735  0020               	movlb	0	; select bank0
  6086  1736  0831               	movf	___llmod@divisor+3,w
  6087  1737  0430               	iorwf	___llmod@divisor+2,w
  6088  1738  042F               	iorwf	___llmod@divisor+1,w
  6089  1739  042E               	iorwf	___llmod@divisor,w
  6090  173A  1903               	skipnz
  6091  173B  2F6F               	goto	l3086
  6092  173C  01B7               	clrf	___llmod@counter
  6093  173D  0AB7               	incf	___llmod@counter,f
  6094  173E                     l3076:	
  6095  173E  1BB1               	btfsc	___llmod@divisor+3,7
  6096  173F  2F4C               	goto	l3078
  6097  1740  3001               	movlw	1
  6098  1741                     u3145:	
  6099  1741  35AE               	lslf	___llmod@divisor,f
  6100  1742  0DAF               	rlf	___llmod@divisor+1,f
  6101  1743  0DB0               	rlf	___llmod@divisor+2,f
  6102  1744  0DB1               	rlf	___llmod@divisor+3,f
  6103  1745  0B89               	decfsz	9,f
  6104  1746  2F41               	goto	u3145
  6105  1747  3001               	movlw	1
  6106  1748  00B6               	movwf	??___llmod
  6107  1749  0836               	movf	??___llmod,w
  6108  174A  07B7               	addwf	___llmod@counter,f
  6109  174B  2F3E               	goto	l3076
  6110  174C                     l3078:	
  6111  174C  0831               	movf	___llmod@divisor+3,w
  6112  174D  0235               	subwf	___llmod@dividend+3,w
  6113  174E  1D03               	skipz
  6114  174F  2F5A               	goto	u3165
  6115  1750  0830               	movf	___llmod@divisor+2,w
  6116  1751  0234               	subwf	___llmod@dividend+2,w
  6117  1752  1D03               	skipz
  6118  1753  2F5A               	goto	u3165
  6119  1754  082F               	movf	___llmod@divisor+1,w
  6120  1755  0233               	subwf	___llmod@dividend+1,w
  6121  1756  1D03               	skipz
  6122  1757  2F5A               	goto	u3165
  6123  1758  082E               	movf	___llmod@divisor,w
  6124  1759  0232               	subwf	___llmod@dividend,w
  6125  175A                     u3165:	
  6126  175A  1C03               	skipc
  6127  175B  2F64               	goto	l3082
  6128  175C  082E               	movf	___llmod@divisor,w
  6129  175D  02B2               	subwf	___llmod@dividend,f
  6130  175E  082F               	movf	___llmod@divisor+1,w
  6131  175F  3BB3               	subwfb	___llmod@dividend+1,f
  6132  1760  0830               	movf	___llmod@divisor+2,w
  6133  1761  3BB4               	subwfb	___llmod@dividend+2,f
  6134  1762  0831               	movf	___llmod@divisor+3,w
  6135  1763  3BB5               	subwfb	___llmod@dividend+3,f
  6136  1764                     l3082:	
  6137  1764  3001               	movlw	1
  6138  1765                     u3175:	
  6139  1765  36B1               	lsrf	___llmod@divisor+3,f
  6140  1766  0CB0               	rrf	___llmod@divisor+2,f
  6141  1767  0CAF               	rrf	___llmod@divisor+1,f
  6142  1768  0CAE               	rrf	___llmod@divisor,f
  6143  1769  0B89               	decfsz	9,f
  6144  176A  2F65               	goto	u3175
  6145  176B  3001               	movlw	1
  6146  176C  02B7               	subwf	___llmod@counter,f
  6147  176D  1D03               	btfss	3,2
  6148  176E  2F4C               	goto	l3078
  6149  176F                     l3086:	
  6150  176F  0835               	movf	___llmod@dividend+3,w
  6151  1770  00B1               	movwf	?___llmod+3
  6152  1771  0834               	movf	___llmod@dividend+2,w
  6153  1772  00B0               	movwf	?___llmod+2
  6154  1773  0833               	movf	___llmod@dividend+1,w
  6155  1774  00AF               	movwf	?___llmod+1
  6156  1775  0832               	movf	___llmod@dividend,w
  6157  1776  00AE               	movwf	?___llmod
  6158  1777  0008               	return
  6159  1778                     __end_of___llmod:	
  6160                           
  6161                           	psect	text15
  6162  0921                     __ptext15:	
  6163 ;; *************** function ___lldiv *****************
  6164 ;; Defined at:
  6165 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\__lldiv.c"
  6166 ;; Parameters:    Size  Location     Type
  6167 ;;  divisor         4    0[BANK0 ] unsigned long 
  6168 ;;  dividend        4    4[BANK0 ] unsigned long 
  6169 ;; Auto vars:     Size  Location     Type
  6170 ;;  quotient        4    9[BANK0 ] unsigned long 
  6171 ;;  counter         1   13[BANK0 ] unsigned char 
  6172 ;; Return value:  Size  Location     Type
  6173 ;;                  4    0[BANK0 ] unsigned long 
  6174 ;; Registers used:
  6175 ;;		wreg, status,2, status,0
  6176 ;; Tracked objects:
  6177 ;;		On entry : 0/0
  6178 ;;		On exit  : 0/0
  6179 ;;		Unchanged: 0/0
  6180 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6181 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6182 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6183 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6184 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6185 ;;Total ram usage:       14 bytes
  6186 ;; Hardware stack levels used:    1
  6187 ;; Hardware stack levels required when called:    7
  6188 ;; This function calls:
  6189 ;;		Nothing
  6190 ;; This function is called by:
  6191 ;;		_sprintf
  6192 ;; This function uses a non-reentrant model
  6193 ;;
  6194                           
  6195                           
  6196                           ;psect for function ___lldiv
  6197  0921                     ___lldiv:	
  6198                           
  6199                           ;incstack = 0
  6200                           ; Regs used in ___lldiv: [wreg+status,2+status,0]
  6201  0921  3000               	movlw	0
  6202  0922  0020               	movlb	0	; select bank0
  6203  0923  00AC               	movwf	___lldiv@quotient+3
  6204  0924  3000               	movlw	0
  6205  0925  00AB               	movwf	___lldiv@quotient+2
  6206  0926  3000               	movlw	0
  6207  0927  00AA               	movwf	___lldiv@quotient+1
  6208  0928  3000               	movlw	0
  6209  0929  00A9               	movwf	___lldiv@quotient
  6210  092A  0823               	movf	___lldiv@divisor+3,w
  6211  092B  0422               	iorwf	___lldiv@divisor+2,w
  6212  092C  0421               	iorwf	___lldiv@divisor+1,w
  6213  092D  0420               	iorwf	___lldiv@divisor,w
  6214  092E  1903               	skipnz
  6215  092F  296B               	goto	l2860
  6216  0930  01AD               	clrf	___lldiv@counter
  6217  0931  0AAD               	incf	___lldiv@counter,f
  6218  0932                     l2846:	
  6219  0932  1BA3               	btfsc	___lldiv@divisor+3,7
  6220  0933  2940               	goto	l2848
  6221  0934  3001               	movlw	1
  6222  0935                     u2575:	
  6223  0935  35A0               	lslf	___lldiv@divisor,f
  6224  0936  0DA1               	rlf	___lldiv@divisor+1,f
  6225  0937  0DA2               	rlf	___lldiv@divisor+2,f
  6226  0938  0DA3               	rlf	___lldiv@divisor+3,f
  6227  0939  0B89               	decfsz	9,f
  6228  093A  2935               	goto	u2575
  6229  093B  3001               	movlw	1
  6230  093C  00A8               	movwf	??___lldiv
  6231  093D  0828               	movf	??___lldiv,w
  6232  093E  07AD               	addwf	___lldiv@counter,f
  6233  093F  2932               	goto	l2846
  6234  0940                     l2848:	
  6235  0940  3001               	movlw	1
  6236  0941                     u2595:	
  6237  0941  35A9               	lslf	___lldiv@quotient,f
  6238  0942  0DAA               	rlf	___lldiv@quotient+1,f
  6239  0943  0DAB               	rlf	___lldiv@quotient+2,f
  6240  0944  0DAC               	rlf	___lldiv@quotient+3,f
  6241  0945  0B89               	decfsz	9,f
  6242  0946  2941               	goto	u2595
  6243  0947  0823               	movf	___lldiv@divisor+3,w
  6244  0948  0227               	subwf	___lldiv@dividend+3,w
  6245  0949  1D03               	skipz
  6246  094A  2955               	goto	u2605
  6247  094B  0822               	movf	___lldiv@divisor+2,w
  6248  094C  0226               	subwf	___lldiv@dividend+2,w
  6249  094D  1D03               	skipz
  6250  094E  2955               	goto	u2605
  6251  094F  0821               	movf	___lldiv@divisor+1,w
  6252  0950  0225               	subwf	___lldiv@dividend+1,w
  6253  0951  1D03               	skipz
  6254  0952  2955               	goto	u2605
  6255  0953  0820               	movf	___lldiv@divisor,w
  6256  0954  0224               	subwf	___lldiv@dividend,w
  6257  0955                     u2605:	
  6258  0955  1C03               	skipc
  6259  0956  2960               	goto	l2856
  6260  0957  0820               	movf	___lldiv@divisor,w
  6261  0958  02A4               	subwf	___lldiv@dividend,f
  6262  0959  0821               	movf	___lldiv@divisor+1,w
  6263  095A  3BA5               	subwfb	___lldiv@dividend+1,f
  6264  095B  0822               	movf	___lldiv@divisor+2,w
  6265  095C  3BA6               	subwfb	___lldiv@dividend+2,f
  6266  095D  0823               	movf	___lldiv@divisor+3,w
  6267  095E  3BA7               	subwfb	___lldiv@dividend+3,f
  6268  095F  1429               	bsf	___lldiv@quotient,0
  6269  0960                     l2856:	
  6270  0960  3001               	movlw	1
  6271  0961                     u2615:	
  6272  0961  36A3               	lsrf	___lldiv@divisor+3,f
  6273  0962  0CA2               	rrf	___lldiv@divisor+2,f
  6274  0963  0CA1               	rrf	___lldiv@divisor+1,f
  6275  0964  0CA0               	rrf	___lldiv@divisor,f
  6276  0965  0B89               	decfsz	9,f
  6277  0966  2961               	goto	u2615
  6278  0967  3001               	movlw	1
  6279  0968  02AD               	subwf	___lldiv@counter,f
  6280  0969  1D03               	btfss	3,2
  6281  096A  2940               	goto	l2848
  6282  096B                     l2860:	
  6283  096B  082C               	movf	___lldiv@quotient+3,w
  6284  096C  00A3               	movwf	?___lldiv+3
  6285  096D  082B               	movf	___lldiv@quotient+2,w
  6286  096E  00A2               	movwf	?___lldiv+2
  6287  096F  082A               	movf	___lldiv@quotient+1,w
  6288  0970  00A1               	movwf	?___lldiv+1
  6289  0971  0829               	movf	___lldiv@quotient,w
  6290  0972  00A0               	movwf	?___lldiv
  6291  0973  0008               	return
  6292  0974                     __end_of___lldiv:	
  6293                           
  6294                           	psect	text16
  6295  1529                     __ptext16:	
  6296 ;; *************** function ___lltoft *****************
  6297 ;; Defined at:
  6298 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\lltoft.c"
  6299 ;; Parameters:    Size  Location     Type
  6300 ;;  c               4    8[BANK0 ] unsigned long 
  6301 ;; Auto vars:     Size  Location     Type
  6302 ;;  exp             1   13[BANK0 ] unsigned char 
  6303 ;; Return value:  Size  Location     Type
  6304 ;;                  3    8[BANK0 ] float 
  6305 ;; Registers used:
  6306 ;;		wreg, status,2, status,0, pclath, cstack
  6307 ;; Tracked objects:
  6308 ;;		On entry : 0/0
  6309 ;;		On exit  : 0/0
  6310 ;;		Unchanged: 0/0
  6311 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6312 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6313 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6314 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6315 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6316 ;;Total ram usage:        6 bytes
  6317 ;; Hardware stack levels used:    1
  6318 ;; Hardware stack levels required when called:    8
  6319 ;; This function calls:
  6320 ;;		___ftpack
  6321 ;; This function is called by:
  6322 ;;		_ftoa
  6323 ;; This function uses a non-reentrant model
  6324 ;;
  6325                           
  6326                           
  6327                           ;psect for function ___lltoft
  6328  1529                     ___lltoft:	
  6329                           
  6330                           ;incstack = 0
  6331                           ; Regs used in ___lltoft: [wreg+status,2+status,0+pclath+cstack]
  6332  1529  308E               	movlw	142
  6333  152A  0020               	movlb	0	; select bank0
  6334  152B  00AC               	movwf	??___lltoft
  6335  152C  082C               	movf	??___lltoft,w
  6336  152D  00AD               	movwf	___lltoft@exp
  6337  152E                     l3340:	
  6338  152E  30FF               	movlw	255
  6339  152F  052B               	andwf	___lltoft@c+3,w
  6340  1530  1903               	btfsc	3,2
  6341  1531  2D3E               	goto	l3342
  6342  1532  3001               	movlw	1
  6343  1533                     u3615:	
  6344  1533  36AB               	lsrf	___lltoft@c+3,f
  6345  1534  0CAA               	rrf	___lltoft@c+2,f
  6346  1535  0CA9               	rrf	___lltoft@c+1,f
  6347  1536  0CA8               	rrf	___lltoft@c,f
  6348  1537  0B89               	decfsz	9,f
  6349  1538  2D33               	goto	u3615
  6350  1539  3001               	movlw	1
  6351  153A  00AC               	movwf	??___lltoft
  6352  153B  082C               	movf	??___lltoft,w
  6353  153C  07AD               	addwf	___lltoft@exp,f
  6354  153D  2D2E               	goto	l3340
  6355  153E                     l3342:	
  6356  153E  0828               	movf	___lltoft@c,w
  6357  153F  00A0               	movwf	___ftpack@arg
  6358  1540  0829               	movf	___lltoft@c+1,w
  6359  1541  00A1               	movwf	___ftpack@arg+1
  6360  1542  082A               	movf	___lltoft@c+2,w
  6361  1543  00A2               	movwf	___ftpack@arg+2
  6362  1544  082D               	movf	___lltoft@exp,w
  6363  1545  00AC               	movwf	??___lltoft
  6364  1546  082C               	movf	??___lltoft,w
  6365  1547  00A3               	movwf	___ftpack@exp
  6366  1548  01A4               	clrf	___ftpack@sign
  6367  1549  3189  21C7         	fcall	___ftpack
  6368  154B  0020               	movlb	0	; select bank0
  6369  154C  0820               	movf	?___ftpack,w
  6370  154D  00A8               	movwf	?___lltoft
  6371  154E  0821               	movf	?___ftpack+1,w
  6372  154F  00A9               	movwf	?___lltoft+1
  6373  1550  0822               	movf	?___ftpack+2,w
  6374  1551  00AA               	movwf	?___lltoft+2
  6375  1552  0008               	return
  6376  1553                     __end_of___lltoft:	
  6377                           
  6378                           	psect	text17
  6379  075C                     __ptext17:	
  6380 ;; *************** function ___fttol *****************
  6381 ;; Defined at:
  6382 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\fttol.c"
  6383 ;; Parameters:    Size  Location     Type
  6384 ;;  f1              3   71[BANK0 ] float 
  6385 ;; Auto vars:     Size  Location     Type
  6386 ;;  lval            4    1[BANK1 ] unsigned long 
  6387 ;;  exp1            1    5[BANK1 ] unsigned char 
  6388 ;;  sign1           1    0[BANK1 ] unsigned char 
  6389 ;; Return value:  Size  Location     Type
  6390 ;;                  4   71[BANK0 ] long 
  6391 ;; Registers used:
  6392 ;;		wreg, status,2, status,0
  6393 ;; Tracked objects:
  6394 ;;		On entry : 0/0
  6395 ;;		On exit  : 0/0
  6396 ;;		Unchanged: 0/0
  6397 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6398 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6399 ;;      Locals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0
  6400 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6401 ;;      Totals:         0       8       6       0       0       0       0       0       0       0       0       0       
      +0       0
  6402 ;;Total ram usage:       14 bytes
  6403 ;; Hardware stack levels used:    1
  6404 ;; Hardware stack levels required when called:    7
  6405 ;; This function calls:
  6406 ;;		Nothing
  6407 ;; This function is called by:
  6408 ;;		_ftoa
  6409 ;; This function uses a non-reentrant model
  6410 ;;
  6411                           
  6412                           
  6413                           ;psect for function ___fttol
  6414  075C                     ___fttol:	
  6415                           
  6416                           ;incstack = 0
  6417                           ; Regs used in ___fttol: [wreg+status,2+status,0]
  6418  075C  0020               	movlb	0	; select bank0
  6419  075D  0867               	movf	___fttol@f1,w
  6420  075E  00EB               	movwf	??___fttol
  6421  075F  0868               	movf	___fttol@f1+1,w
  6422  0760  00EC               	movwf	??___fttol+1
  6423  0761  0869               	movf	___fttol@f1+2,w
  6424  0762  00ED               	movwf	??___fttol+2
  6425  0763  1003               	clrc
  6426  0764  0D6C               	rlf	??___fttol+1,w
  6427  0765  0D6D               	rlf	??___fttol+2,w
  6428  0766  00EE               	movwf	??___fttol+3
  6429  0767  086E               	movf	??___fttol+3,w
  6430  0768  0021               	movlb	1	; select bank1
  6431  0769  00A5               	movwf	___fttol@exp1^(0+128)
  6432  076A  0825               	movf	___fttol@exp1^(0+128),w
  6433  076B  1D03               	btfss	3,2
  6434  076C  2F77               	goto	l3300
  6435  076D  3000               	movlw	0
  6436  076E  0020               	movlb	0	; select bank0
  6437  076F  00EA               	movwf	?___fttol+3
  6438  0770  3000               	movlw	0
  6439  0771  00E9               	movwf	?___fttol+2
  6440  0772  3000               	movlw	0
  6441  0773  00E8               	movwf	?___fttol+1
  6442  0774  3000               	movlw	0
  6443  0775  00E7               	movwf	?___fttol
  6444  0776  0008               	return
  6445  0777                     l3300:	
  6446  0777  0020               	movlb	0	; select bank0
  6447  0778  0867               	movf	___fttol@f1,w
  6448  0779  00EB               	movwf	??___fttol
  6449  077A  0868               	movf	___fttol@f1+1,w
  6450  077B  00EC               	movwf	??___fttol+1
  6451  077C  0869               	movf	___fttol@f1+2,w
  6452  077D  00ED               	movwf	??___fttol+2
  6453  077E  3017               	movlw	23
  6454  077F                     u3525:	
  6455  077F  36ED               	lsrf	??___fttol+2,f
  6456  0780  0CEC               	rrf	??___fttol+1,f
  6457  0781  0CEB               	rrf	??___fttol,f
  6458  0782  0B89               	decfsz	9,f
  6459  0783  2F7F               	goto	u3525
  6460  0784  086B               	movf	??___fttol,w
  6461  0785  00EE               	movwf	??___fttol+3
  6462  0786  086E               	movf	??___fttol+3,w
  6463  0787  0021               	movlb	1	; select bank1
  6464  0788  00A0               	movwf	___fttol@sign1^(0+128)
  6465  0789  0020               	movlb	0	; select bank0
  6466  078A  17E8               	bsf	___fttol@f1+1,7
  6467  078B  30FF               	movlw	255
  6468  078C  05E7               	andwf	___fttol@f1,f
  6469  078D  30FF               	movlw	255
  6470  078E  05E8               	andwf	___fttol@f1+1,f
  6471  078F  3000               	movlw	0
  6472  0790  05E9               	andwf	___fttol@f1+2,f
  6473  0791  0867               	movf	___fttol@f1,w
  6474  0792  0021               	movlb	1	; select bank1
  6475  0793  00A1               	movwf	___fttol@lval^(0+128)
  6476  0794  0020               	movlb	0	; select bank0
  6477  0795  0868               	movf	___fttol@f1+1,w
  6478  0796  0021               	movlb	1	; select bank1
  6479  0797  00A2               	movwf	(___fttol@lval^(0+128)+1)
  6480  0798  0020               	movlb	0	; select bank0
  6481  0799  0869               	movf	___fttol@f1+2,w
  6482  079A  0021               	movlb	1	; select bank1
  6483  079B  00A3               	movwf	(___fttol@lval^(0+128)+2)
  6484  079C  01A4               	clrf	(___fttol@lval^(0+128)+3)
  6485  079D  308E               	movlw	142
  6486  079E  02A5               	subwf	___fttol@exp1^(0+128),f
  6487  079F  1FA5               	btfss	___fttol@exp1^(0+128),7
  6488  07A0  2FC1               	goto	l3320
  6489  07A1  0825               	movf	___fttol@exp1^(0+128),w
  6490  07A2  3A80               	xorlw	128
  6491  07A3  3E8F               	addlw	143
  6492  07A4  1803               	skipnc
  6493  07A5  2FB0               	goto	l3318
  6494  07A6  3000               	movlw	0
  6495  07A7  0020               	movlb	0	; select bank0
  6496  07A8  00EA               	movwf	?___fttol+3
  6497  07A9  3000               	movlw	0
  6498  07AA  00E9               	movwf	?___fttol+2
  6499  07AB  3000               	movlw	0
  6500  07AC  00E8               	movwf	?___fttol+1
  6501  07AD  3000               	movlw	0
  6502  07AE  00E7               	movwf	?___fttol
  6503  07AF  0008               	return
  6504  07B0                     l3318:	
  6505  07B0  3001               	movlw	1
  6506  07B1                     u3555:	
  6507  07B1  0021               	movlb	1	; select bank1
  6508  07B2  36A4               	lsrf	(___fttol@lval+3)^(0+128),f
  6509  07B3  0CA3               	rrf	(___fttol@lval+2)^(0+128),f
  6510  07B4  0CA2               	rrf	(___fttol@lval+1)^(0+128),f
  6511  07B5  0CA1               	rrf	___fttol@lval^(0+128),f
  6512  07B6  0B89               	decfsz	9,f
  6513  07B7  2FB1               	goto	u3555
  6514  07B8  3001               	movlw	1
  6515  07B9  0020               	movlb	0	; select bank0
  6516  07BA  00EB               	movwf	??___fttol
  6517  07BB  086B               	movf	??___fttol,w
  6518  07BC  0021               	movlb	1	; select bank1
  6519  07BD  07A5               	addwf	___fttol@exp1^(0+128),f
  6520  07BE  1903               	btfsc	3,2
  6521  07BF  2FDD               	goto	l3328
  6522  07C0  2FB0               	goto	l3318
  6523  07C1                     l3320:	
  6524  07C1  3018               	movlw	24
  6525  07C2  0225               	subwf	___fttol@exp1^(0+128),w
  6526  07C3  1C03               	skipc
  6527  07C4  2FD9               	goto	l776
  6528  07C5  3000               	movlw	0
  6529  07C6  0020               	movlb	0	; select bank0
  6530  07C7  00EA               	movwf	?___fttol+3
  6531  07C8  3000               	movlw	0
  6532  07C9  00E9               	movwf	?___fttol+2
  6533  07CA  3000               	movlw	0
  6534  07CB  00E8               	movwf	?___fttol+1
  6535  07CC  3000               	movlw	0
  6536  07CD  00E7               	movwf	?___fttol
  6537  07CE  0008               	return
  6538  07CF                     l3326:	
  6539  07CF  3001               	movlw	1
  6540  07D0                     u3585:	
  6541  07D0  0021               	movlb	1	; select bank1
  6542  07D1  35A1               	lslf	___fttol@lval^(0+128),f
  6543  07D2  0DA2               	rlf	(___fttol@lval+1)^(0+128),f
  6544  07D3  0DA3               	rlf	(___fttol@lval+2)^(0+128),f
  6545  07D4  0DA4               	rlf	(___fttol@lval+3)^(0+128),f
  6546  07D5  0B89               	decfsz	9,f
  6547  07D6  2FD0               	goto	u3585
  6548  07D7  3001               	movlw	1
  6549  07D8  02A5               	subwf	___fttol@exp1^(0+128),f
  6550  07D9                     l776:	
  6551  07D9  0021               	movlb	1	; select bank1
  6552  07DA  0825               	movf	___fttol@exp1^(0+128),w
  6553  07DB  1D03               	btfss	3,2
  6554  07DC  2FCF               	goto	l3326
  6555  07DD                     l3328:	
  6556  07DD  0820               	movf	___fttol@sign1^(0+128),w
  6557  07DE  1903               	btfsc	3,2
  6558  07DF  2FEB               	goto	l3332
  6559  07E0  09A1               	comf	___fttol@lval^(0+128),f
  6560  07E1  09A2               	comf	(___fttol@lval+1)^(0+128),f
  6561  07E2  09A3               	comf	(___fttol@lval+2)^(0+128),f
  6562  07E3  09A4               	comf	(___fttol@lval+3)^(0+128),f
  6563  07E4  0AA1               	incf	___fttol@lval^(0+128),f
  6564  07E5  1903               	skipnz
  6565  07E6  0AA2               	incf	(___fttol@lval+1)^(0+128),f
  6566  07E7  1903               	skipnz
  6567  07E8  0AA3               	incf	(___fttol@lval+2)^(0+128),f
  6568  07E9  1903               	skipnz
  6569  07EA  0AA4               	incf	(___fttol@lval+3)^(0+128),f
  6570  07EB                     l3332:	
  6571  07EB  0824               	movf	(___fttol@lval+3)^(0+128),w
  6572  07EC  0020               	movlb	0	; select bank0
  6573  07ED  00EA               	movwf	?___fttol+3
  6574  07EE  0021               	movlb	1	; select bank1
  6575  07EF  0823               	movf	(___fttol@lval+2)^(0+128),w
  6576  07F0  0020               	movlb	0	; select bank0
  6577  07F1  00E9               	movwf	?___fttol+2
  6578  07F2  0021               	movlb	1	; select bank1
  6579  07F3  0822               	movf	(___fttol@lval+1)^(0+128),w
  6580  07F4  0020               	movlb	0	; select bank0
  6581  07F5  00E8               	movwf	?___fttol+1
  6582  07F6  0021               	movlb	1	; select bank1
  6583  07F7  0821               	movf	___fttol@lval^(0+128),w
  6584  07F8  0020               	movlb	0	; select bank0
  6585  07F9  00E7               	movwf	?___fttol
  6586  07FA  0008               	return
  6587  07FB                     __end_of___fttol:	
  6588                           
  6589                           	psect	text18
  6590  13EC                     __ptext18:	
  6591 ;; *************** function ___ftsub *****************
  6592 ;; Defined at:
  6593 ;;		line 17 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\ftsub.c"
  6594 ;; Parameters:    Size  Location     Type
  6595 ;;  f2              3   27[BANK0 ] float 
  6596 ;;  f1              3   30[BANK0 ] float 
  6597 ;; Auto vars:     Size  Location     Type
  6598 ;;		None
  6599 ;; Return value:  Size  Location     Type
  6600 ;;                  3   27[BANK0 ] float 
  6601 ;; Registers used:
  6602 ;;		wreg, status,2, status,0, pclath, cstack
  6603 ;; Tracked objects:
  6604 ;;		On entry : 0/0
  6605 ;;		On exit  : 0/0
  6606 ;;		Unchanged: 0/0
  6607 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6608 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6609 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6610 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6611 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6612 ;;Total ram usage:        6 bytes
  6613 ;; Hardware stack levels used:    1
  6614 ;; Hardware stack levels required when called:    9
  6615 ;; This function calls:
  6616 ;;		___ftadd
  6617 ;; This function is called by:
  6618 ;;		_ftoa
  6619 ;; This function uses a non-reentrant model
  6620 ;;
  6621                           
  6622                           
  6623                           ;psect for function ___ftsub
  6624  13EC                     ___ftsub:	
  6625                           
  6626                           ;incstack = 0
  6627                           ; Regs used in ___ftsub: [wreg+status,2+status,0+pclath+cstack]
  6628  13EC  0020               	movlb	0	; select bank0
  6629  13ED  083D               	movf	___ftsub@f2+2,w
  6630  13EE  043C               	iorwf	___ftsub@f2+1,w
  6631  13EF  043B               	iorwf	___ftsub@f2,w
  6632  13F0  1903               	skipnz
  6633  13F1  2BF4               	goto	l3290
  6634  13F2  3080               	movlw	128
  6635  13F3  06BD               	xorwf	___ftsub@f2+2,f
  6636  13F4                     l3290:	
  6637  13F4  083E               	movf	___ftsub@f1,w
  6638  13F5  00AE               	movwf	___ftadd@f1
  6639  13F6  083F               	movf	___ftsub@f1+1,w
  6640  13F7  00AF               	movwf	___ftadd@f1+1
  6641  13F8  0840               	movf	___ftsub@f1+2,w
  6642  13F9  00B0               	movwf	___ftadd@f1+2
  6643  13FA  083B               	movf	___ftsub@f2,w
  6644  13FB  00B1               	movwf	___ftadd@f2
  6645  13FC  083C               	movf	___ftsub@f2+1,w
  6646  13FD  00B2               	movwf	___ftadd@f2+1
  6647  13FE  083D               	movf	___ftsub@f2+2,w
  6648  13FF  00B3               	movwf	___ftadd@f2+2
  6649  1400  318F  270A         	fcall	___ftadd
  6650  1402  0020               	movlb	0	; select bank0
  6651  1403  082E               	movf	?___ftadd,w
  6652  1404  00BB               	movwf	?___ftsub
  6653  1405  082F               	movf	?___ftadd+1,w
  6654  1406  00BC               	movwf	?___ftsub+1
  6655  1407  0830               	movf	?___ftadd+2,w
  6656  1408  00BD               	movwf	?___ftsub+2
  6657  1409  0008               	return
  6658  140A                     __end_of___ftsub:	
  6659                           
  6660                           	psect	text19
  6661  0AB9                     __ptext19:	
  6662 ;; *************** function _getADCValue *****************
  6663 ;; Defined at:
  6664 ;;		line 43 in file "main.c"
  6665 ;; Parameters:    Size  Location     Type
  6666 ;;  channel         1    wreg     unsigned char 
  6667 ;; Auto vars:     Size  Location     Type
  6668 ;;  channel         1   51[BANK0 ] unsigned char 
  6669 ;;  adcSum          3   52[BANK0 ] float 
  6670 ;;  adcLoop         2   49[BANK0 ] unsigned int 
  6671 ;; Return value:  Size  Location     Type
  6672 ;;                  3   43[BANK0 ] float 
  6673 ;; Registers used:
  6674 ;;		wreg, status,2, status,0, pclath, cstack
  6675 ;; Tracked objects:
  6676 ;;		On entry : 0/0
  6677 ;;		On exit  : 0/0
  6678 ;;		Unchanged: 0/0
  6679 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6680 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6681 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6682 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6683 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6684 ;;Total ram usage:       12 bytes
  6685 ;; Hardware stack levels used:    1
  6686 ;; Hardware stack levels required when called:    9
  6687 ;; This function calls:
  6688 ;;		___awtoft
  6689 ;;		___ftadd
  6690 ;;		___ftdiv
  6691 ;;		_sleep
  6692 ;; This function is called by:
  6693 ;;		_loop
  6694 ;; This function uses a non-reentrant model
  6695 ;;
  6696                           
  6697                           
  6698                           ;psect for function _getADCValue
  6699  0AB9                     _getADCValue:	
  6700                           
  6701                           ;incstack = 0
  6702                           ; Regs used in _getADCValue: [wreg+status,2+status,0+pclath+cstack]
  6703                           ;getADCValue@channel stored from wreg
  6704  0AB9  0020               	movlb	0	; select bank0
  6705  0ABA  00D3               	movwf	getADCValue@channel
  6706                           
  6707                           ;main.c: 46: float adcSum = 0;
  6708  0ABB  3000               	movlw	0
  6709  0ABC  00D4               	movwf	getADCValue@adcSum
  6710  0ABD  3000               	movlw	0
  6711  0ABE  00D5               	movwf	getADCValue@adcSum+1
  6712  0ABF  3000               	movlw	0
  6713  0AC0  00D6               	movwf	getADCValue@adcSum+2
  6714                           
  6715                           ;main.c: 47: unsigned int adcLoop = 1000;
  6716  0AC1  30E8               	movlw	232
  6717  0AC2  00D1               	movwf	getADCValue@adcLoop
  6718  0AC3  3003               	movlw	3
  6719  0AC4  00D2               	movwf	getADCValue@adcLoop+1
  6720                           
  6721                           ;main.c: 49: ADCON0bits.CHS = channel;
  6722  0AC5  0853               	movf	getADCValue@channel,w
  6723  0AC6  00CE               	movwf	??_getADCValue
  6724  0AC7  0DCE               	rlf	??_getADCValue,f
  6725  0AC8  0DCE               	rlf	??_getADCValue,f
  6726  0AC9  0021               	movlb	1	; select bank1
  6727  0ACA  081D               	movf	29,w	;volatile
  6728  0ACB  0020               	movlb	0	; select bank0
  6729  0ACC  064E               	xorwf	??_getADCValue,w
  6730  0ACD  3903               	andlw	-253
  6731  0ACE  064E               	xorwf	??_getADCValue,w
  6732  0ACF  0021               	movlb	1	; select bank1
  6733  0AD0  009D               	movwf	29	;volatile
  6734                           
  6735                           ;main.c: 50: FVRCONbits.FVREN = 1;
  6736  0AD1  0022               	movlb	2	; select bank2
  6737  0AD2  1797               	bsf	23,7	;volatile
  6738                           
  6739                           ;main.c: 51: ADCON0bits.ADON = 1;
  6740  0AD3  0021               	movlb	1	; select bank1
  6741  0AD4  141D               	bsf	29,0	;volatile
  6742                           
  6743                           ;main.c: 53: sleep(0);
  6744  0AD5  3000               	movlw	0
  6745  0AD6  3193  237E  318A   	fcall	_sleep
  6746  0AD9                     l3752:	
  6747                           ;main.c: 55: while (adcLoop--){
  6748                           
  6749  0AD9  3001               	movlw	1
  6750  0ADA  0020               	movlb	0	; select bank0
  6751  0ADB  02D1               	subwf	getADCValue@adcLoop,f
  6752  0ADC  3000               	movlw	0
  6753  0ADD  3BD2               	subwfb	getADCValue@adcLoop+1,f
  6754  0ADE  0A51               	incf	getADCValue@adcLoop,w
  6755  0ADF  1903               	btfsc	3,2
  6756  0AE0  0A52               	incf	getADCValue@adcLoop+1,w
  6757  0AE1  1903               	btfsc	3,2
  6758  0AE2  2B16               	goto	l186
  6759                           
  6760                           ;main.c: 57: ADCON0bits.ADGO = 1;
  6761  0AE3  0021               	movlb	1	; select bank1
  6762  0AE4  149D               	bsf	29,1	;volatile
  6763  0AE5                     l3748:	
  6764                           ;main.c: 59: while (ADCON0bits.ADGO){
  6765                           
  6766  0AE5  0021               	movlb	1	; select bank1
  6767  0AE6  1C9D               	btfss	29,1	;volatile
  6768  0AE7  2AED               	goto	l3750
  6769                           
  6770                           ;main.c: 60: sleep(0);
  6771  0AE8  3000               	movlw	0
  6772  0AE9  3193  237E  318A   	fcall	_sleep
  6773  0AEC  2AE5               	goto	l3748
  6774  0AED                     l3750:	
  6775                           
  6776                           ;main.c: 61: };main.c: 63: adcSum+= (ADRESL | (ADRESH << 8));
  6777  0AED  081C               	movf	28,w	;volatile
  6778  0AEE  0020               	movlb	0	; select bank0
  6779  0AEF  00CE               	movwf	??_getADCValue
  6780  0AF0  01CF               	clrf	??_getADCValue+1
  6781  0AF1  084E               	movf	??_getADCValue,w
  6782  0AF2  00CF               	movwf	??_getADCValue+1
  6783  0AF3  01CE               	clrf	??_getADCValue
  6784  0AF4  084E               	movf	??_getADCValue,w
  6785  0AF5  0021               	movlb	1	; select bank1
  6786  0AF6  041B               	iorwf	27,w	;volatile
  6787  0AF7  0020               	movlb	0	; select bank0
  6788  0AF8  00A8               	movwf	___awtoft@c
  6789  0AF9  084F               	movf	??_getADCValue+1,w
  6790  0AFA  00A9               	movwf	___awtoft@c+1
  6791  0AFB  3194  246A  318A   	fcall	___awtoft
  6792  0AFE  0020               	movlb	0	; select bank0
  6793  0AFF  0828               	movf	?___awtoft,w
  6794  0B00  00AE               	movwf	___ftadd@f1
  6795  0B01  0829               	movf	?___awtoft+1,w
  6796  0B02  00AF               	movwf	___ftadd@f1+1
  6797  0B03  082A               	movf	?___awtoft+2,w
  6798  0B04  00B0               	movwf	___ftadd@f1+2
  6799  0B05  0854               	movf	getADCValue@adcSum,w
  6800  0B06  00B1               	movwf	___ftadd@f2
  6801  0B07  0855               	movf	getADCValue@adcSum+1,w
  6802  0B08  00B2               	movwf	___ftadd@f2+1
  6803  0B09  0856               	movf	getADCValue@adcSum+2,w
  6804  0B0A  00B3               	movwf	___ftadd@f2+2
  6805  0B0B  318F  270A  318A   	fcall	___ftadd
  6806  0B0E  0020               	movlb	0	; select bank0
  6807  0B0F  082E               	movf	?___ftadd,w
  6808  0B10  00D4               	movwf	getADCValue@adcSum
  6809  0B11  082F               	movf	?___ftadd+1,w
  6810  0B12  00D5               	movwf	getADCValue@adcSum+1
  6811  0B13  0830               	movf	?___ftadd+2,w
  6812  0B14  00D6               	movwf	getADCValue@adcSum+2
  6813  0B15  2AD9               	goto	l3752
  6814  0B16                     l186:	
  6815                           
  6816                           ;main.c: 65: };main.c: 67: FVRCONbits.FVREN = 0;
  6817  0B16  0022               	movlb	2	; select bank2
  6818  0B17  1397               	bcf	23,7	;volatile
  6819                           
  6820                           ;main.c: 68: ADCON0bits.ADON = 0;
  6821  0B18  0021               	movlb	1	; select bank1
  6822  0B19  101D               	bcf	29,0	;volatile
  6823                           
  6824                           ;main.c: 71: adcSum/= 1000;
  6825  0B1A  3000               	movlw	0
  6826  0B1B  0020               	movlb	0	; select bank0
  6827  0B1C  00BB               	movwf	___ftdiv@f2
  6828  0B1D  307A               	movlw	122
  6829  0B1E  00BC               	movwf	___ftdiv@f2+1
  6830  0B1F  3044               	movlw	68
  6831  0B20  00BD               	movwf	___ftdiv@f2+2
  6832  0B21  0854               	movf	getADCValue@adcSum,w
  6833  0B22  00BE               	movwf	___ftdiv@f1
  6834  0B23  0855               	movf	getADCValue@adcSum+1,w
  6835  0B24  00BF               	movwf	___ftdiv@f1+1
  6836  0B25  0856               	movf	getADCValue@adcSum+2,w
  6837  0B26  00C0               	movwf	___ftdiv@f1+2
  6838  0B27  318B  23F3  318A   	fcall	___ftdiv
  6839  0B2A  0020               	movlb	0	; select bank0
  6840  0B2B  083B               	movf	?___ftdiv,w
  6841  0B2C  00D4               	movwf	getADCValue@adcSum
  6842  0B2D  083C               	movf	?___ftdiv+1,w
  6843  0B2E  00D5               	movwf	getADCValue@adcSum+1
  6844  0B2F  083D               	movf	?___ftdiv+2,w
  6845  0B30  00D6               	movwf	getADCValue@adcSum+2
  6846                           
  6847                           ;main.c: 72: adcSum/= 500;
  6848  0B31  3000               	movlw	0
  6849  0B32  00BB               	movwf	___ftdiv@f2
  6850  0B33  30FA               	movlw	250
  6851  0B34  00BC               	movwf	___ftdiv@f2+1
  6852  0B35  3043               	movlw	67
  6853  0B36  00BD               	movwf	___ftdiv@f2+2
  6854  0B37  0854               	movf	getADCValue@adcSum,w
  6855  0B38  00BE               	movwf	___ftdiv@f1
  6856  0B39  0855               	movf	getADCValue@adcSum+1,w
  6857  0B3A  00BF               	movwf	___ftdiv@f1+1
  6858  0B3B  0856               	movf	getADCValue@adcSum+2,w
  6859  0B3C  00C0               	movwf	___ftdiv@f1+2
  6860  0B3D  318B  23F3         	fcall	___ftdiv
  6861  0B3F  0020               	movlb	0	; select bank0
  6862  0B40  083B               	movf	?___ftdiv,w
  6863  0B41  00D4               	movwf	getADCValue@adcSum
  6864  0B42  083C               	movf	?___ftdiv+1,w
  6865  0B43  00D5               	movwf	getADCValue@adcSum+1
  6866  0B44  083D               	movf	?___ftdiv+2,w
  6867  0B45  00D6               	movwf	getADCValue@adcSum+2
  6868                           
  6869                           ;main.c: 74: return adcSum;
  6870  0B46  0854               	movf	getADCValue@adcSum,w
  6871  0B47  00CB               	movwf	?_getADCValue
  6872  0B48  0855               	movf	getADCValue@adcSum+1,w
  6873  0B49  00CC               	movwf	?_getADCValue+1
  6874  0B4A  0856               	movf	getADCValue@adcSum+2,w
  6875  0B4B  00CD               	movwf	?_getADCValue+2
  6876  0B4C  0008               	return
  6877  0B4D                     __end_of_getADCValue:	
  6878                           
  6879                           	psect	text20
  6880  0F0A                     __ptext20:	
  6881 ;; *************** function ___ftadd *****************
  6882 ;; Defined at:
  6883 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\ftadd.c"
  6884 ;; Parameters:    Size  Location     Type
  6885 ;;  f1              3   14[BANK0 ] float 
  6886 ;;  f2              3   17[BANK0 ] float 
  6887 ;; Auto vars:     Size  Location     Type
  6888 ;;  exp1            1   26[BANK0 ] unsigned char 
  6889 ;;  exp2            1   25[BANK0 ] unsigned char 
  6890 ;;  sign            1   24[BANK0 ] unsigned char 
  6891 ;; Return value:  Size  Location     Type
  6892 ;;                  3   14[BANK0 ] float 
  6893 ;; Registers used:
  6894 ;;		wreg, status,2, status,0, pclath, cstack
  6895 ;; Tracked objects:
  6896 ;;		On entry : 0/0
  6897 ;;		On exit  : 0/0
  6898 ;;		Unchanged: 0/0
  6899 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6900 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6901 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6902 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6903 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6904 ;;Total ram usage:       13 bytes
  6905 ;; Hardware stack levels used:    1
  6906 ;; Hardware stack levels required when called:    8
  6907 ;; This function calls:
  6908 ;;		___ftpack
  6909 ;; This function is called by:
  6910 ;;		_getADCValue
  6911 ;;		_loop
  6912 ;;		___ftsub
  6913 ;; This function uses a non-reentrant model
  6914 ;;
  6915                           
  6916                           
  6917                           ;psect for function ___ftadd
  6918  0F0A                     ___ftadd:	
  6919                           
  6920                           ;incstack = 0
  6921                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
  6922  0F0A  0020               	movlb	0	; select bank0
  6923  0F0B  082E               	movf	___ftadd@f1,w
  6924  0F0C  00B4               	movwf	??___ftadd
  6925  0F0D  082F               	movf	___ftadd@f1+1,w
  6926  0F0E  00B5               	movwf	??___ftadd+1
  6927  0F0F  0830               	movf	___ftadd@f1+2,w
  6928  0F10  00B6               	movwf	??___ftadd+2
  6929  0F11  1003               	clrc
  6930  0F12  0D35               	rlf	??___ftadd+1,w
  6931  0F13  0D36               	rlf	??___ftadd+2,w
  6932  0F14  00B7               	movwf	??___ftadd+3
  6933  0F15  0837               	movf	??___ftadd+3,w
  6934  0F16  00BA               	movwf	___ftadd@exp1
  6935  0F17  0831               	movf	___ftadd@f2,w
  6936  0F18  00B4               	movwf	??___ftadd
  6937  0F19  0832               	movf	___ftadd@f2+1,w
  6938  0F1A  00B5               	movwf	??___ftadd+1
  6939  0F1B  0833               	movf	___ftadd@f2+2,w
  6940  0F1C  00B6               	movwf	??___ftadd+2
  6941  0F1D  1003               	clrc
  6942  0F1E  0D35               	rlf	??___ftadd+1,w
  6943  0F1F  0D36               	rlf	??___ftadd+2,w
  6944  0F20  00B7               	movwf	??___ftadd+3
  6945  0F21  0837               	movf	??___ftadd+3,w
  6946  0F22  00B9               	movwf	___ftadd@exp2
  6947  0F23  083A               	movf	___ftadd@exp1,w
  6948  0F24  1903               	btfsc	3,2
  6949  0F25  2F32               	goto	l2886
  6950  0F26  0839               	movf	___ftadd@exp2,w
  6951  0F27  023A               	subwf	___ftadd@exp1,w
  6952  0F28  1803               	skipnc
  6953  0F29  2F39               	goto	l2890
  6954  0F2A  033A               	decf	___ftadd@exp1,w
  6955  0F2B  3AFF               	xorlw	255
  6956  0F2C  0739               	addwf	___ftadd@exp2,w
  6957  0F2D  00B4               	movwf	??___ftadd
  6958  0F2E  3019               	movlw	25
  6959  0F2F  0234               	subwf	??___ftadd,w
  6960  0F30  1C03               	skipc
  6961  0F31  2F39               	goto	l2890
  6962  0F32                     l2886:	
  6963  0F32  0831               	movf	___ftadd@f2,w
  6964  0F33  00AE               	movwf	?___ftadd
  6965  0F34  0832               	movf	___ftadd@f2+1,w
  6966  0F35  00AF               	movwf	?___ftadd+1
  6967  0F36  0833               	movf	___ftadd@f2+2,w
  6968  0F37  00B0               	movwf	?___ftadd+2
  6969  0F38  0008               	return
  6970  0F39                     l2890:	
  6971  0F39  0839               	movf	___ftadd@exp2,w
  6972  0F3A  1903               	btfsc	3,2
  6973  0F3B  0008               	return
  6974  0F3C  083A               	movf	___ftadd@exp1,w
  6975  0F3D  0239               	subwf	___ftadd@exp2,w
  6976  0F3E  1803               	skipnc
  6977  0F3F  2F48               	goto	l2896
  6978  0F40  0339               	decf	___ftadd@exp2,w
  6979  0F41  3AFF               	xorlw	255
  6980  0F42  073A               	addwf	___ftadd@exp1,w
  6981  0F43  00B4               	movwf	??___ftadd
  6982  0F44  3019               	movlw	25
  6983  0F45  0234               	subwf	??___ftadd,w
  6984  0F46  1803               	btfsc	3,0
  6985  0F47  0008               	return
  6986  0F48                     l2896:	
  6987  0F48  3006               	movlw	6
  6988  0F49  00B4               	movwf	??___ftadd
  6989  0F4A  0834               	movf	??___ftadd,w
  6990  0F4B  00B8               	movwf	___ftadd@sign
  6991  0F4C  1BB0               	btfsc	___ftadd@f1+2,7
  6992  0F4D  17B8               	bsf	___ftadd@sign,7
  6993  0F4E  1BB3               	btfsc	___ftadd@f2+2,7
  6994  0F4F  1738               	bsf	___ftadd@sign,6
  6995  0F50  17AF               	bsf	___ftadd@f1+1,7
  6996  0F51  30FF               	movlw	255
  6997  0F52  05AE               	andwf	___ftadd@f1,f
  6998  0F53  30FF               	movlw	255
  6999  0F54  05AF               	andwf	___ftadd@f1+1,f
  7000  0F55  3000               	movlw	0
  7001  0F56  05B0               	andwf	___ftadd@f1+2,f
  7002  0F57  17B2               	bsf	___ftadd@f2+1,7
  7003  0F58  30FF               	movlw	255
  7004  0F59  05B1               	andwf	___ftadd@f2,f
  7005  0F5A  30FF               	movlw	255
  7006  0F5B  05B2               	andwf	___ftadd@f2+1,f
  7007  0F5C  3000               	movlw	0
  7008  0F5D  05B3               	andwf	___ftadd@f2+2,f
  7009  0F5E  0839               	movf	___ftadd@exp2,w
  7010  0F5F  023A               	subwf	___ftadd@exp1,w
  7011  0F60  1803               	skipnc
  7012  0F61  2F84               	goto	l2918
  7013  0F62                     l2908:	
  7014  0F62  3001               	movlw	1
  7015  0F63                     u2755:	
  7016  0F63  35B1               	lslf	___ftadd@f2,f
  7017  0F64  0DB2               	rlf	___ftadd@f2+1,f
  7018  0F65  0DB3               	rlf	___ftadd@f2+2,f
  7019  0F66  0B89               	decfsz	9,f
  7020  0F67  2F63               	goto	u2755
  7021  0F68  3001               	movlw	1
  7022  0F69  02B9               	subwf	___ftadd@exp2,f
  7023  0F6A  0839               	movf	___ftadd@exp2,w
  7024  0F6B  063A               	xorwf	___ftadd@exp1,w
  7025  0F6C  1903               	skipnz
  7026  0F6D  2F7F               	goto	l2916
  7027  0F6E  3001               	movlw	1
  7028  0F6F  02B8               	subwf	___ftadd@sign,f
  7029  0F70  0838               	movf	___ftadd@sign,w
  7030  0F71  3907               	andlw	7
  7031  0F72  1903               	btfsc	3,2
  7032  0F73  2F7F               	goto	l2916
  7033  0F74  2F62               	goto	l2908
  7034  0F75                     l2914:	
  7035  0F75  3001               	movlw	1
  7036  0F76                     u2785:	
  7037  0F76  36B0               	lsrf	___ftadd@f1+2,f
  7038  0F77  0CAF               	rrf	___ftadd@f1+1,f
  7039  0F78  0CAE               	rrf	___ftadd@f1,f
  7040  0F79  0B89               	decfsz	9,f
  7041  0F7A  2F76               	goto	u2785
  7042  0F7B  3001               	movlw	1
  7043  0F7C  00B4               	movwf	??___ftadd
  7044  0F7D  0834               	movf	??___ftadd,w
  7045  0F7E  07BA               	addwf	___ftadd@exp1,f
  7046  0F7F                     l2916:	
  7047  0F7F  083A               	movf	___ftadd@exp1,w
  7048  0F80  0639               	xorwf	___ftadd@exp2,w
  7049  0F81  1903               	btfsc	3,2
  7050  0F82  2FA9               	goto	l716
  7051  0F83  2F75               	goto	l2914
  7052  0F84                     l2918:	
  7053  0F84  083A               	movf	___ftadd@exp1,w
  7054  0F85  0239               	subwf	___ftadd@exp2,w
  7055  0F86  1803               	skipnc
  7056  0F87  2FA9               	goto	l716
  7057  0F88                     l2920:	
  7058  0F88  3001               	movlw	1
  7059  0F89                     u2815:	
  7060  0F89  35AE               	lslf	___ftadd@f1,f
  7061  0F8A  0DAF               	rlf	___ftadd@f1+1,f
  7062  0F8B  0DB0               	rlf	___ftadd@f1+2,f
  7063  0F8C  0B89               	decfsz	9,f
  7064  0F8D  2F89               	goto	u2815
  7065  0F8E  3001               	movlw	1
  7066  0F8F  02BA               	subwf	___ftadd@exp1,f
  7067  0F90  0839               	movf	___ftadd@exp2,w
  7068  0F91  063A               	xorwf	___ftadd@exp1,w
  7069  0F92  1903               	skipnz
  7070  0F93  2FA5               	goto	l2928
  7071  0F94  3001               	movlw	1
  7072  0F95  02B8               	subwf	___ftadd@sign,f
  7073  0F96  0838               	movf	___ftadd@sign,w
  7074  0F97  3907               	andlw	7
  7075  0F98  1903               	btfsc	3,2
  7076  0F99  2FA5               	goto	l2928
  7077  0F9A  2F88               	goto	l2920
  7078  0F9B                     l2926:	
  7079  0F9B  3001               	movlw	1
  7080  0F9C                     u2845:	
  7081  0F9C  36B3               	lsrf	___ftadd@f2+2,f
  7082  0F9D  0CB2               	rrf	___ftadd@f2+1,f
  7083  0F9E  0CB1               	rrf	___ftadd@f2,f
  7084  0F9F  0B89               	decfsz	9,f
  7085  0FA0  2F9C               	goto	u2845
  7086  0FA1  3001               	movlw	1
  7087  0FA2  00B4               	movwf	??___ftadd
  7088  0FA3  0834               	movf	??___ftadd,w
  7089  0FA4  07B9               	addwf	___ftadd@exp2,f
  7090  0FA5                     l2928:	
  7091  0FA5  083A               	movf	___ftadd@exp1,w
  7092  0FA6  0639               	xorwf	___ftadd@exp2,w
  7093  0FA7  1D03               	skipz
  7094  0FA8  2F9B               	goto	l2926
  7095  0FA9                     l716:	
  7096  0FA9  1FB8               	btfss	___ftadd@sign,7
  7097  0FAA  2FBB               	goto	l2932
  7098  0FAB  30FF               	movlw	255
  7099  0FAC  06AE               	xorwf	___ftadd@f1,f
  7100  0FAD  30FF               	movlw	255
  7101  0FAE  06AF               	xorwf	___ftadd@f1+1,f
  7102  0FAF  30FF               	movlw	255
  7103  0FB0  06B0               	xorwf	___ftadd@f1+2,f
  7104  0FB1  3001               	movlw	1
  7105  0FB2  07AE               	addwf	___ftadd@f1,f
  7106  0FB3  3000               	movlw	0
  7107  0FB4  1803               	skipnc
  7108  0FB5  3001               	movlw	1
  7109  0FB6  07AF               	addwf	___ftadd@f1+1,f
  7110  0FB7  3000               	movlw	0
  7111  0FB8  1803               	skipnc
  7112  0FB9  3001               	movlw	1
  7113  0FBA  07B0               	addwf	___ftadd@f1+2,f
  7114  0FBB                     l2932:	
  7115  0FBB  1F38               	btfss	___ftadd@sign,6
  7116  0FBC  2FCD               	goto	l2936
  7117  0FBD  30FF               	movlw	255
  7118  0FBE  06B1               	xorwf	___ftadd@f2,f
  7119  0FBF  30FF               	movlw	255
  7120  0FC0  06B2               	xorwf	___ftadd@f2+1,f
  7121  0FC1  30FF               	movlw	255
  7122  0FC2  06B3               	xorwf	___ftadd@f2+2,f
  7123  0FC3  3001               	movlw	1
  7124  0FC4  07B1               	addwf	___ftadd@f2,f
  7125  0FC5  3000               	movlw	0
  7126  0FC6  1803               	skipnc
  7127  0FC7  3001               	movlw	1
  7128  0FC8  07B2               	addwf	___ftadd@f2+1,f
  7129  0FC9  3000               	movlw	0
  7130  0FCA  1803               	skipnc
  7131  0FCB  3001               	movlw	1
  7132  0FCC  07B3               	addwf	___ftadd@f2+2,f
  7133  0FCD                     l2936:	
  7134  0FCD  01B8               	clrf	___ftadd@sign
  7135  0FCE  082E               	movf	___ftadd@f1,w
  7136  0FCF  07B1               	addwf	___ftadd@f2,f
  7137  0FD0  082F               	movf	___ftadd@f1+1,w
  7138  0FD1  3DB2               	addwfc	___ftadd@f2+1,f
  7139  0FD2  0830               	movf	___ftadd@f1+2,w
  7140  0FD3  3DB3               	addwfc	___ftadd@f2+2,f
  7141  0FD4  1FB3               	btfss	___ftadd@f2+2,7
  7142  0FD5  2FE8               	goto	l2946
  7143  0FD6  30FF               	movlw	255
  7144  0FD7  06B1               	xorwf	___ftadd@f2,f
  7145  0FD8  30FF               	movlw	255
  7146  0FD9  06B2               	xorwf	___ftadd@f2+1,f
  7147  0FDA  30FF               	movlw	255
  7148  0FDB  06B3               	xorwf	___ftadd@f2+2,f
  7149  0FDC  3001               	movlw	1
  7150  0FDD  07B1               	addwf	___ftadd@f2,f
  7151  0FDE  3000               	movlw	0
  7152  0FDF  1803               	skipnc
  7153  0FE0  3001               	movlw	1
  7154  0FE1  07B2               	addwf	___ftadd@f2+1,f
  7155  0FE2  3000               	movlw	0
  7156  0FE3  1803               	skipnc
  7157  0FE4  3001               	movlw	1
  7158  0FE5  07B3               	addwf	___ftadd@f2+2,f
  7159  0FE6  01B8               	clrf	___ftadd@sign
  7160  0FE7  0AB8               	incf	___ftadd@sign,f
  7161  0FE8                     l2946:	
  7162  0FE8  0831               	movf	___ftadd@f2,w
  7163  0FE9  00A0               	movwf	___ftpack@arg
  7164  0FEA  0832               	movf	___ftadd@f2+1,w
  7165  0FEB  00A1               	movwf	___ftpack@arg+1
  7166  0FEC  0833               	movf	___ftadd@f2+2,w
  7167  0FED  00A2               	movwf	___ftpack@arg+2
  7168  0FEE  083A               	movf	___ftadd@exp1,w
  7169  0FEF  00B4               	movwf	??___ftadd
  7170  0FF0  0834               	movf	??___ftadd,w
  7171  0FF1  00A3               	movwf	___ftpack@exp
  7172  0FF2  0838               	movf	___ftadd@sign,w
  7173  0FF3  00B5               	movwf	??___ftadd+1
  7174  0FF4  0835               	movf	??___ftadd+1,w
  7175  0FF5  00A4               	movwf	___ftpack@sign
  7176  0FF6  3189  21C7         	fcall	___ftpack
  7177  0FF8  0020               	movlb	0	; select bank0
  7178  0FF9  0820               	movf	?___ftpack,w
  7179  0FFA  00AE               	movwf	?___ftadd
  7180  0FFB  0821               	movf	?___ftpack+1,w
  7181  0FFC  00AF               	movwf	?___ftadd+1
  7182  0FFD  0822               	movf	?___ftpack+2,w
  7183  0FFE  00B0               	movwf	?___ftadd+2
  7184  0FFF  0008               	return
  7185  1000                     __end_of___ftadd:	
  7186                           
  7187                           	psect	text21
  7188  146A                     __ptext21:	
  7189 ;; *************** function ___awtoft *****************
  7190 ;; Defined at:
  7191 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\awtoft.c"
  7192 ;; Parameters:    Size  Location     Type
  7193 ;;  c               2    8[BANK0 ] int 
  7194 ;; Auto vars:     Size  Location     Type
  7195 ;;  sign            1   13[BANK0 ] unsigned char 
  7196 ;; Return value:  Size  Location     Type
  7197 ;;                  3    8[BANK0 ] float 
  7198 ;; Registers used:
  7199 ;;		wreg, status,2, status,0, pclath, cstack
  7200 ;; Tracked objects:
  7201 ;;		On entry : 0/0
  7202 ;;		On exit  : 0/0
  7203 ;;		Unchanged: 0/0
  7204 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7205 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7206 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7207 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7208 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7209 ;;Total ram usage:        6 bytes
  7210 ;; Hardware stack levels used:    1
  7211 ;; Hardware stack levels required when called:    8
  7212 ;; This function calls:
  7213 ;;		___ftpack
  7214 ;; This function is called by:
  7215 ;;		_getADCValue
  7216 ;;		_loop
  7217 ;; This function uses a non-reentrant model
  7218 ;;
  7219                           
  7220                           
  7221                           ;psect for function ___awtoft
  7222  146A                     ___awtoft:	
  7223                           
  7224                           ;incstack = 0
  7225                           ; Regs used in ___awtoft: [wreg+status,2+status,0+pclath+cstack]
  7226  146A  0020               	movlb	0	; select bank0
  7227  146B  01AD               	clrf	___awtoft@sign
  7228  146C  1FA9               	btfss	___awtoft@c+1,7
  7229  146D  2C75               	goto	l3690
  7230  146E  09A8               	comf	___awtoft@c,f
  7231  146F  09A9               	comf	___awtoft@c+1,f
  7232  1470  0AA8               	incf	___awtoft@c,f
  7233  1471  1903               	skipnz
  7234  1472  0AA9               	incf	___awtoft@c+1,f
  7235  1473  01AD               	clrf	___awtoft@sign
  7236  1474  0AAD               	incf	___awtoft@sign,f
  7237  1475                     l3690:	
  7238  1475  0828               	movf	___awtoft@c,w
  7239  1476  00A0               	movwf	___ftpack@arg
  7240  1477  0829               	movf	___awtoft@c+1,w
  7241  1478  00A1               	movwf	___ftpack@arg+1
  7242  1479  01A2               	clrf	___ftpack@arg+2
  7243  147A  308E               	movlw	142
  7244  147B  00AB               	movwf	??___awtoft
  7245  147C  082B               	movf	??___awtoft,w
  7246  147D  00A3               	movwf	___ftpack@exp
  7247  147E  082D               	movf	___awtoft@sign,w
  7248  147F  00AC               	movwf	??___awtoft+1
  7249  1480  082C               	movf	??___awtoft+1,w
  7250  1481  00A4               	movwf	___ftpack@sign
  7251  1482  3189  21C7         	fcall	___ftpack
  7252  1484  0020               	movlb	0	; select bank0
  7253  1485  0820               	movf	?___ftpack,w
  7254  1486  00A8               	movwf	?___awtoft
  7255  1487  0821               	movf	?___ftpack+1,w
  7256  1488  00A9               	movwf	?___awtoft+1
  7257  1489  0822               	movf	?___ftpack+2,w
  7258  148A  00AA               	movwf	?___awtoft+2
  7259  148B  0008               	return
  7260  148C                     __end_of___awtoft:	
  7261                           
  7262                           	psect	text22
  7263  12D4                     __ptext22:	
  7264 ;; *************** function _checkTXPower *****************
  7265 ;; Defined at:
  7266 ;;		line 129 in file "main.c"
  7267 ;; Parameters:    Size  Location     Type
  7268 ;;		None
  7269 ;; Auto vars:     Size  Location     Type
  7270 ;;  rxPacket        1    8[BANK0 ] PTR struct .
  7271 ;;		 -> RXPacket(33), 
  7272 ;; Return value:  Size  Location     Type
  7273 ;;                  1    wreg      void 
  7274 ;; Registers used:
  7275 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7276 ;; Tracked objects:
  7277 ;;		On entry : 0/0
  7278 ;;		On exit  : 0/0
  7279 ;;		Unchanged: 0/0
  7280 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7281 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7282 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7283 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7284 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7285 ;;Total ram usage:        2 bytes
  7286 ;; Hardware stack levels used:    1
  7287 ;; Hardware stack levels required when called:   11
  7288 ;; This function calls:
  7289 ;;		_nrf24l01ChangeTXPower
  7290 ;;		_nrf24l01GetRXPacket
  7291 ;; This function is called by:
  7292 ;;		_loop
  7293 ;; This function uses a non-reentrant model
  7294 ;;
  7295                           
  7296                           
  7297                           ;psect for function _checkTXPower
  7298  12D4                     _checkTXPower:	
  7299                           
  7300                           ;main.c: 130: nrf24l01Packet_t * rxPacket = nrf24l01GetRXPacket();
  7301                           
  7302                           ;incstack = 0
  7303                           ; Regs used in _checkTXPower: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7304  12D4  3187  27FE  3192   	fcall	_nrf24l01GetRXPacket
  7305  12D7  0020               	movlb	0	; select bank0
  7306  12D8  00A7               	movwf	??_checkTXPower
  7307  12D9  0827               	movf	??_checkTXPower,w
  7308  12DA  00A8               	movwf	checkTXPower@rxPacket
  7309                           
  7310                           ;main.c: 132: if (rxPacket->packetData.ACKRPD){
  7311  12DB  0828               	movf	checkTXPower@rxPacket,w
  7312  12DC  0086               	movwf	6
  7313  12DD  3002               	movlw	2	; select bank4/5
  7314  12DE  0087               	movwf	7
  7315  12DF  1C81               	btfss	1,1
  7316  12E0  0008               	return
  7317                           
  7318                           ;main.c: 133: nrf24l01ChangeTXPower(-1);
  7319  12E1  30FF               	movlw	255
  7320  12E2  00A3               	movwf	nrf24l01ChangeTXPower@addPower
  7321  12E3  30FF               	movlw	255
  7322  12E4  00A4               	movwf	nrf24l01ChangeTXPower@addPower+1
  7323  12E5  3196  26F6         	fcall	_nrf24l01ChangeTXPower
  7324  12E7  0008               	return
  7325  12E8                     __end_of_checkTXPower:	
  7326                           
  7327                           	psect	text23
  7328  0A2C                     __ptext23:	
  7329 ;; *************** function _checkRxData *****************
  7330 ;; Defined at:
  7331 ;;		line 79 in file "main.c"
  7332 ;; Parameters:    Size  Location     Type
  7333 ;;		None
  7334 ;; Auto vars:     Size  Location     Type
  7335 ;;  value          32    0[BANK2 ] unsigned char [32]
  7336 ;;  topic          32   44[BANK1 ] unsigned char [32]
  7337 ;;  name           32   12[BANK1 ] unsigned char [32]
  7338 ;;  strings         1   77[BANK1 ] PTR unsigned char 
  7339 ;;		 -> RXPacket(33), NULL(0), 
  7340 ;;  RXPacket        1   76[BANK1 ] PTR struct .
  7341 ;;		 -> RXPacket(33), 
  7342 ;; Return value:  Size  Location     Type
  7343 ;;                  1    wreg      void 
  7344 ;; Registers used:
  7345 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7346 ;; Tracked objects:
  7347 ;;		On entry : 0/0
  7348 ;;		On exit  : 0/0
  7349 ;;		Unchanged: 0/0
  7350 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7351 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7352 ;;      Locals:         0       0      66      32       0       0       0       0       0       0       0       0       
      +0       0
  7353 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7354 ;;      Totals:         0       1      66      32       0       0       0       0       0       0       0       0       
      +0       0
  7355 ;;Total ram usage:       99 bytes
  7356 ;; Hardware stack levels used:    1
  7357 ;; Hardware stack levels required when called:   13
  7358 ;; This function calls:
  7359 ;;		_atof
  7360 ;;		_nrf24l01GetRXPacket
  7361 ;;		_nrf24l01SendACK
  7362 ;;		_nrf24l01SetRXMode
  7363 ;;		_sleep
  7364 ;;		_strcpy
  7365 ;;		_strtok
  7366 ;; This function is called by:
  7367 ;;		_loop
  7368 ;; This function uses a non-reentrant model
  7369 ;;
  7370                           
  7371                           
  7372                           ;psect for function _checkRxData
  7373  0A2C                     _checkRxData:	
  7374                           
  7375                           ;main.c: 81: nrf24l01SetRXMode(1);
  7376                           
  7377                           ;incstack = 0
  7378                           ; Regs used in _checkRxData: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7379  0A2C  3001               	movlw	1
  7380  0A2D  3197  2778  318A   	fcall	_nrf24l01SetRXMode
  7381                           
  7382                           ;main.c: 83: sleep(10);
  7383  0A30  300A               	movlw	10
  7384  0A31  3193  237E  318A   	fcall	_sleep
  7385                           
  7386                           ;main.c: 85: if (!nrf24l01.RXPending){
  7387  0A34  1CFD               	btfss	_nrf24l01,1	;volatile
  7388  0A35  0008               	return
  7389                           
  7390                           ;main.c: 87: };main.c: 89: nrf24l01Packet_t * RXPacket = nrf24l01GetRXPacket();
  7391                           
  7392                           ;main.c: 86: return;
  7393  0A36  3187  27FE  318A   	fcall	_nrf24l01GetRXPacket
  7394  0A39  0020               	movlb	0	; select bank0
  7395  0A3A  00EF               	movwf	??_checkRxData
  7396  0A3B  086F               	movf	??_checkRxData,w
  7397  0A3C  0021               	movlb	1	; select bank1
  7398  0A3D  00EC               	movwf	checkRxData@RXPacket^(0+128)
  7399                           
  7400                           ;main.c: 92: if (RXPacket->packetData.ACKRequest){
  7401  0A3E  086C               	movf	checkRxData@RXPacket^(0+128),w
  7402  0A3F  0086               	movwf	6
  7403  0A40  3002               	movlw	2	; select bank4/5
  7404  0A41  0087               	movwf	7
  7405  0A42  1D01               	btfss	1,2
  7406  0A43  2A48               	goto	l192
  7407                           
  7408                           ;main.c: 93: nrf24l01SendACK(RXPacket);
  7409  0A44  086C               	movf	checkRxData@RXPacket^(0+128),w
  7410  0A45  3195  2580  318A   	fcall	_nrf24l01SendACK
  7411  0A48                     l192:	
  7412                           
  7413                           ;main.c: 94: };main.c: 96: char* strings = strtok(RXPacket->Message, "/");
  7414  0A48  305D               	movlw	low (STR_1| (0+32768))
  7415  0A49  0020               	movlb	0	; select bank0
  7416  0A4A  00AE               	movwf	strtok@s2
  7417  0A4B  3098               	movlw	high (STR_1| (0+32768))
  7418  0A4C  00AF               	movwf	strtok@s2+1
  7419  0A4D  0021               	movlb	1	; select bank1
  7420  0A4E  086C               	movf	checkRxData@RXPacket^(0+128),w
  7421  0A4F  3E01               	addlw	1
  7422  0A50  3188  20CE  318A   	fcall	_strtok
  7423  0A53  0020               	movlb	0	; select bank0
  7424  0A54  00EF               	movwf	??_checkRxData
  7425  0A55  086F               	movf	??_checkRxData,w
  7426  0A56  0021               	movlb	1	; select bank1
  7427  0A57  00ED               	movwf	checkRxData@strings^(0+128)
  7428                           
  7429                           ;main.c: 98: char name[32];;main.c: 99: strcpy(name, strings);
  7430  0A58  30AC               	movlw	low checkRxData@name
  7431  0A59  0020               	movlb	0	; select bank0
  7432  0A5A  00A0               	movwf	strcpy@to
  7433  0A5B  3000               	movlw	high checkRxData@name
  7434  0A5C  00A1               	movwf	strcpy@to+1
  7435  0A5D  0021               	movlb	1	; select bank1
  7436  0A5E  086D               	movf	checkRxData@strings^(0+128),w
  7437  0A5F  0020               	movlb	0	; select bank0
  7438  0A60  00A2               	movwf	strcpy@from
  7439  0A61  39FF               	andlw	255
  7440  0A62  1D03               	skipz
  7441  0A63  3002               	movlw	2
  7442  0A64  00A3               	movwf	strcpy@from+1
  7443  0A65  3193  2399  318A   	fcall	_strcpy
  7444                           
  7445                           ;main.c: 100: strings = strtok((0), "/");
  7446  0A68  305D               	movlw	low (STR_1| (0+32768))
  7447  0A69  0020               	movlb	0	; select bank0
  7448  0A6A  00AE               	movwf	strtok@s2
  7449  0A6B  3098               	movlw	high (STR_1| (0+32768))
  7450  0A6C  00AF               	movwf	strtok@s2+1
  7451  0A6D  3000               	movlw	0
  7452  0A6E  3188  20CE  318A   	fcall	_strtok
  7453  0A71  0020               	movlb	0	; select bank0
  7454  0A72  00EF               	movwf	??_checkRxData
  7455  0A73  086F               	movf	??_checkRxData,w
  7456  0A74  0021               	movlb	1	; select bank1
  7457  0A75  00ED               	movwf	checkRxData@strings^(0+128)
  7458                           
  7459                           ;main.c: 102: char topic[32];;main.c: 103: strcpy(topic, strings);
  7460  0A76  30CC               	movlw	low checkRxData@topic
  7461  0A77  0020               	movlb	0	; select bank0
  7462  0A78  00A0               	movwf	strcpy@to
  7463  0A79  3000               	movlw	high checkRxData@topic
  7464  0A7A  00A1               	movwf	strcpy@to+1
  7465  0A7B  0021               	movlb	1	; select bank1
  7466  0A7C  086D               	movf	checkRxData@strings^(0+128),w
  7467  0A7D  0020               	movlb	0	; select bank0
  7468  0A7E  00A2               	movwf	strcpy@from
  7469  0A7F  39FF               	andlw	255
  7470  0A80  1D03               	skipz
  7471  0A81  3002               	movlw	2
  7472  0A82  00A3               	movwf	strcpy@from+1
  7473  0A83  3193  2399  318A   	fcall	_strcpy
  7474                           
  7475                           ;main.c: 104: strings = strtok((0), "/");
  7476  0A86  305D               	movlw	low (STR_1| (0+32768))
  7477  0A87  0020               	movlb	0	; select bank0
  7478  0A88  00AE               	movwf	strtok@s2
  7479  0A89  3098               	movlw	high (STR_1| (0+32768))
  7480  0A8A  00AF               	movwf	strtok@s2+1
  7481  0A8B  3000               	movlw	0
  7482  0A8C  3188  20CE  318A   	fcall	_strtok
  7483  0A8F  0020               	movlb	0	; select bank0
  7484  0A90  00EF               	movwf	??_checkRxData
  7485  0A91  086F               	movf	??_checkRxData,w
  7486  0A92  0021               	movlb	1	; select bank1
  7487  0A93  00ED               	movwf	checkRxData@strings^(0+128)
  7488                           
  7489                           ;main.c: 106: char value[32];;main.c: 107: strcpy(value, strings);
  7490  0A94  3020               	movlw	low checkRxData@value
  7491  0A95  0020               	movlb	0	; select bank0
  7492  0A96  00A0               	movwf	strcpy@to
  7493  0A97  3001               	movlw	high checkRxData@value
  7494  0A98  00A1               	movwf	strcpy@to+1
  7495  0A99  0021               	movlb	1	; select bank1
  7496  0A9A  086D               	movf	checkRxData@strings^(0+128),w
  7497  0A9B  0020               	movlb	0	; select bank0
  7498  0A9C  00A2               	movwf	strcpy@from
  7499  0A9D  39FF               	andlw	255
  7500  0A9E  1D03               	skipz
  7501  0A9F  3002               	movlw	2
  7502  0AA0  00A3               	movwf	strcpy@from+1
  7503  0AA1  3193  2399  318A   	fcall	_strcpy
  7504                           
  7505                           ;main.c: 109: counter = atof(value);
  7506  0AA4  3020               	movlw	(low (checkRxData@value| (0+256)))& (0+255)
  7507  0AA5  3192  22C1  318A   	fcall	_atof
  7508  0AA8  0021               	movlb	1	; select bank1
  7509  0AA9  0828               	movf	?_atof^(0+128),w
  7510  0AAA  0023               	movlb	3	; select bank3
  7511  0AAB  00C2               	movwf	_counter^(0+384)
  7512  0AAC  0021               	movlb	1	; select bank1
  7513  0AAD  0829               	movf	(?_atof+1)^(0+128),w
  7514  0AAE  0023               	movlb	3	; select bank3
  7515  0AAF  00C3               	movwf	(_counter+1)^(0+384)
  7516  0AB0  0021               	movlb	1	; select bank1
  7517  0AB1  082A               	movf	(?_atof+2)^(0+128),w
  7518  0AB2  0023               	movlb	3	; select bank3
  7519  0AB3  00C4               	movwf	(_counter+2)^(0+384)
  7520                           
  7521                           ;main.c: 111: nrf24l01.RXPending = 0;
  7522  0AB4  10FD               	bcf	_nrf24l01,1	;volatile
  7523                           
  7524                           ;main.c: 113: nrf24l01SetRXMode(0);
  7525  0AB5  3000               	movlw	0
  7526  0AB6  3197  2778         	fcall	_nrf24l01SetRXMode
  7527  0AB8  0008               	return
  7528  0AB9                     __end_of_checkRxData:	
  7529                           
  7530                           	psect	text24
  7531  08CE                     __ptext24:	
  7532 ;; *************** function _strtok *****************
  7533 ;; Defined at:
  7534 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\strtok.c"
  7535 ;; Parameters:    Size  Location     Type
  7536 ;;  s1              1    wreg     PTR unsigned char 
  7537 ;;		 -> RXPacket(33), NULL(0), 
  7538 ;;  s2              2   14[BANK0 ] PTR const unsigned char 
  7539 ;;		 -> STR_3(2), STR_2(2), STR_1(2), 
  7540 ;; Auto vars:     Size  Location     Type
  7541 ;;  s1              1   19[BANK0 ] PTR unsigned char 
  7542 ;;		 -> RXPacket(33), NULL(0), 
  7543 ;; Return value:  Size  Location     Type
  7544 ;;                  1    wreg      PTR unsigned char 
  7545 ;; Registers used:
  7546 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7547 ;; Tracked objects:
  7548 ;;		On entry : 0/0
  7549 ;;		On exit  : 0/0
  7550 ;;		Unchanged: 0/0
  7551 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7552 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7553 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7554 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7555 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7556 ;;Total ram usage:        6 bytes
  7557 ;; Hardware stack levels used:    1
  7558 ;; Hardware stack levels required when called:    9
  7559 ;; This function calls:
  7560 ;;		_strcspn
  7561 ;;		_strspn
  7562 ;; This function is called by:
  7563 ;;		_checkRxData
  7564 ;; This function uses a non-reentrant model
  7565 ;;
  7566                           
  7567                           
  7568                           ;psect for function _strtok
  7569  08CE                     _strtok:	
  7570                           
  7571                           ;incstack = 0
  7572                           ; Regs used in _strtok: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7573                           ;strtok@s1 stored from wreg
  7574  08CE  0020               	movlb	0	; select bank0
  7575  08CF  00B3               	movwf	strtok@s1
  7576  08D0  0833               	movf	strtok@s1,w
  7577  08D1  1D03               	btfss	3,2
  7578  08D2  28D9               	goto	l3580
  7579  08D3  0023               	movlb	3	; select bank3
  7580  08D4  0847               	movf	strtok@sp^(0+384),w
  7581  08D5  0020               	movlb	0	; select bank0
  7582  08D6  00B0               	movwf	??_strtok
  7583  08D7  0830               	movf	??_strtok,w
  7584  08D8  00B3               	movwf	strtok@s1
  7585  08D9                     l3580:	
  7586  08D9  0833               	movf	strtok@s1,w
  7587  08DA  1D03               	btfss	3,2
  7588  08DB  28DE               	goto	l3586
  7589  08DC  3000               	movlw	0
  7590  08DD  0008               	return
  7591  08DE                     l3586:	
  7592  08DE  082F               	movf	strtok@s2+1,w
  7593  08DF  00A8               	movwf	strspn@s2+1
  7594  08E0  082E               	movf	strtok@s2,w
  7595  08E1  00A7               	movwf	strspn@s2
  7596  08E2  0833               	movf	strtok@s1,w
  7597  08E3  3196  260E  3188   	fcall	_strspn
  7598  08E6  0020               	movlb	0	; select bank0
  7599  08E7  0827               	movf	?_strspn,w
  7600  08E8  00B0               	movwf	??_strtok
  7601  08E9  0830               	movf	??_strtok,w
  7602  08EA  07B3               	addwf	strtok@s1,f
  7603  08EB  0833               	movf	strtok@s1,w
  7604  08EC  0086               	movwf	6
  7605  08ED  3002               	movlw	2	; select bank4/5
  7606  08EE  0087               	movwf	7
  7607  08EF  0801               	movf	1,w
  7608  08F0  1D03               	btfss	3,2
  7609  08F1  28F6               	goto	l3594
  7610  08F2  0023               	movlb	3	; select bank3
  7611  08F3  01C7               	clrf	strtok@sp^(0+384)
  7612  08F4  3000               	movlw	0
  7613  08F5  0008               	return
  7614  08F6                     l3594:	
  7615  08F6  0020               	movlb	0	; select bank0
  7616  08F7  082F               	movf	strtok@s2+1,w
  7617  08F8  00A8               	movwf	strcspn@s2+1
  7618  08F9  082E               	movf	strtok@s2,w
  7619  08FA  00A7               	movwf	strcspn@s2
  7620  08FB  0833               	movf	strtok@s1,w
  7621  08FC  3195  25DE  3188   	fcall	_strcspn
  7622  08FF  0020               	movlb	0	; select bank0
  7623  0900  0827               	movf	?_strcspn,w
  7624  0901  00B0               	movwf	??_strtok
  7625  0902  0828               	movf	?_strcspn+1,w
  7626  0903  00B1               	movwf	??_strtok+1
  7627  0904  0833               	movf	strtok@s1,w
  7628  0905  0730               	addwf	??_strtok,w
  7629  0906  00B2               	movwf	??_strtok+2
  7630  0907  0832               	movf	??_strtok+2,w
  7631  0908  0023               	movlb	3	; select bank3
  7632  0909  00C7               	movwf	strtok@sp^(0+384)
  7633  090A  0847               	movf	strtok@sp^(0+384),w
  7634  090B  0086               	movwf	6
  7635  090C  3002               	movlw	2	; select bank4/5
  7636  090D  0087               	movwf	7
  7637  090E  0801               	movf	1,w
  7638  090F  1903               	btfsc	3,2
  7639  0910  291D               	goto	l3602
  7640  0911  0847               	movf	strtok@sp^(0+384),w
  7641  0912  0086               	movwf	6
  7642  0913  3002               	movlw	2	; select bank4/5
  7643  0914  0087               	movwf	7
  7644  0915  0181               	clrf	1
  7645  0916  3001               	movlw	1
  7646  0917  0020               	movlb	0	; select bank0
  7647  0918  00B0               	movwf	??_strtok
  7648  0919  0830               	movf	??_strtok,w
  7649  091A  0023               	movlb	3	; select bank3
  7650  091B  07C7               	addwf	strtok@sp^(0+384),f
  7651  091C  291E               	goto	l3604
  7652  091D                     l3602:	
  7653  091D  01C7               	clrf	strtok@sp^(0+384)
  7654  091E                     l3604:	
  7655  091E  0020               	movlb	0	; select bank0
  7656  091F  0833               	movf	strtok@s1,w
  7657  0920  0008               	return
  7658  0921                     __end_of_strtok:	
  7659                           
  7660                           	psect	text25
  7661  160E                     __ptext25:	
  7662 ;; *************** function _strspn *****************
  7663 ;; Defined at:
  7664 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\strspn.c"
  7665 ;; Parameters:    Size  Location     Type
  7666 ;;  s1              1    wreg     PTR const unsigned char 
  7667 ;;		 -> RXPacket(33), NULL(0), 
  7668 ;;  s2              2    7[BANK0 ] PTR const unsigned char 
  7669 ;;		 -> STR_3(2), STR_2(2), STR_1(2), 
  7670 ;; Auto vars:     Size  Location     Type
  7671 ;;  s1              1   13[BANK0 ] PTR const unsigned char 
  7672 ;;		 -> RXPacket(33), NULL(0), 
  7673 ;;  i               2   11[BANK0 ] unsigned int 
  7674 ;; Return value:  Size  Location     Type
  7675 ;;                  2    7[BANK0 ] unsigned int 
  7676 ;; Registers used:
  7677 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7678 ;; Tracked objects:
  7679 ;;		On entry : 0/0
  7680 ;;		On exit  : 0/0
  7681 ;;		Unchanged: 0/0
  7682 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7683 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7684 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7685 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7686 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7687 ;;Total ram usage:        7 bytes
  7688 ;; Hardware stack levels used:    1
  7689 ;; Hardware stack levels required when called:    8
  7690 ;; This function calls:
  7691 ;;		_strchr
  7692 ;; This function is called by:
  7693 ;;		_strtok
  7694 ;; This function uses a non-reentrant model
  7695 ;;
  7696                           
  7697                           
  7698                           ;psect for function _strspn
  7699  160E                     _strspn:	
  7700                           
  7701                           ;incstack = 0
  7702                           ; Regs used in _strspn: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7703                           ;strspn@s1 stored from wreg
  7704  160E  0020               	movlb	0	; select bank0
  7705  160F  00AD               	movwf	strspn@s1
  7706  1610  01AB               	clrf	strspn@i
  7707  1611  01AC               	clrf	strspn@i+1
  7708  1612  2E1B               	goto	l3516
  7709  1613                     l3514:	
  7710  1613  3001               	movlw	1
  7711  1614  00A9               	movwf	??_strspn
  7712  1615  0829               	movf	??_strspn,w
  7713  1616  07AD               	addwf	strspn@s1,f
  7714  1617  3001               	movlw	1
  7715  1618  07AB               	addwf	strspn@i,f
  7716  1619  3000               	movlw	0
  7717  161A  3DAC               	addwfc	strspn@i+1,f
  7718  161B                     l3516:	
  7719  161B  082D               	movf	strspn@s1,w
  7720  161C  0086               	movwf	6
  7721  161D  3002               	movlw	2	; select bank4/5
  7722  161E  0087               	movwf	7
  7723  161F  0801               	movf	1,w
  7724  1620  1903               	btfsc	3,2
  7725  1621  2E39               	goto	l3520
  7726  1622  0828               	movf	strspn@s2+1,w
  7727  1623  00A1               	movwf	strchr@ptr+1
  7728  1624  0827               	movf	strspn@s2,w
  7729  1625  00A0               	movwf	strchr@ptr
  7730  1626  082D               	movf	strspn@s1,w
  7731  1627  0086               	movwf	6
  7732  1628  3002               	movlw	2	; select bank4/5
  7733  1629  0087               	movwf	7
  7734  162A  0801               	movf	1,w
  7735  162B  00A9               	movwf	??_strspn
  7736  162C  01AA               	clrf	??_strspn+1
  7737  162D  0829               	movf	??_strspn,w
  7738  162E  00A2               	movwf	strchr@chr
  7739  162F  082A               	movf	??_strspn+1,w
  7740  1630  00A3               	movwf	strchr@chr+1
  7741  1631  3193  232E  3196   	fcall	_strchr
  7742  1634  0020               	movlb	0	; select bank0
  7743  1635  0820               	movf	?_strchr,w
  7744  1636  0421               	iorwf	?_strchr+1,w
  7745  1637  1D03               	btfss	3,2
  7746  1638  2E13               	goto	l3514
  7747  1639                     l3520:	
  7748  1639  082C               	movf	strspn@i+1,w
  7749  163A  00A8               	movwf	?_strspn+1
  7750  163B  082B               	movf	strspn@i,w
  7751  163C  00A7               	movwf	?_strspn
  7752  163D  0008               	return
  7753  163E                     __end_of_strspn:	
  7754                           
  7755                           	psect	text26
  7756  15DE                     __ptext26:	
  7757 ;; *************** function _strcspn *****************
  7758 ;; Defined at:
  7759 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\strcspn.c"
  7760 ;; Parameters:    Size  Location     Type
  7761 ;;  s1              1    wreg     PTR const unsigned char 
  7762 ;;		 -> RXPacket(33), NULL(0), 
  7763 ;;  s2              2    7[BANK0 ] PTR const unsigned char 
  7764 ;;		 -> STR_3(2), STR_2(2), STR_1(2), 
  7765 ;; Auto vars:     Size  Location     Type
  7766 ;;  s1              1   13[BANK0 ] PTR const unsigned char 
  7767 ;;		 -> RXPacket(33), NULL(0), 
  7768 ;;  i               2   11[BANK0 ] unsigned int 
  7769 ;; Return value:  Size  Location     Type
  7770 ;;                  2    7[BANK0 ] unsigned int 
  7771 ;; Registers used:
  7772 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7773 ;; Tracked objects:
  7774 ;;		On entry : 0/0
  7775 ;;		On exit  : 0/0
  7776 ;;		Unchanged: 0/0
  7777 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7778 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7779 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7780 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7781 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7782 ;;Total ram usage:        7 bytes
  7783 ;; Hardware stack levels used:    1
  7784 ;; Hardware stack levels required when called:    8
  7785 ;; This function calls:
  7786 ;;		_strchr
  7787 ;; This function is called by:
  7788 ;;		_strtok
  7789 ;; This function uses a non-reentrant model
  7790 ;;
  7791                           
  7792                           
  7793                           ;psect for function _strcspn
  7794  15DE                     _strcspn:	
  7795                           
  7796                           ;incstack = 0
  7797                           ; Regs used in _strcspn: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7798                           ;strcspn@s1 stored from wreg
  7799  15DE  0020               	movlb	0	; select bank0
  7800  15DF  00AD               	movwf	strcspn@s1
  7801  15E0  01AB               	clrf	strcspn@i
  7802  15E1  01AC               	clrf	strcspn@i+1
  7803  15E2  2DEB               	goto	l3528
  7804  15E3                     l3526:	
  7805  15E3  3001               	movlw	1
  7806  15E4  00A9               	movwf	??_strcspn
  7807  15E5  0829               	movf	??_strcspn,w
  7808  15E6  07AD               	addwf	strcspn@s1,f
  7809  15E7  3001               	movlw	1
  7810  15E8  07AB               	addwf	strcspn@i,f
  7811  15E9  3000               	movlw	0
  7812  15EA  3DAC               	addwfc	strcspn@i+1,f
  7813  15EB                     l3528:	
  7814  15EB  082D               	movf	strcspn@s1,w
  7815  15EC  0086               	movwf	6
  7816  15ED  3002               	movlw	2	; select bank4/5
  7817  15EE  0087               	movwf	7
  7818  15EF  0801               	movf	1,w
  7819  15F0  1903               	btfsc	3,2
  7820  15F1  2E09               	goto	l3532
  7821  15F2  0828               	movf	strcspn@s2+1,w
  7822  15F3  00A1               	movwf	strchr@ptr+1
  7823  15F4  0827               	movf	strcspn@s2,w
  7824  15F5  00A0               	movwf	strchr@ptr
  7825  15F6  082D               	movf	strcspn@s1,w
  7826  15F7  0086               	movwf	6
  7827  15F8  3002               	movlw	2	; select bank4/5
  7828  15F9  0087               	movwf	7
  7829  15FA  0801               	movf	1,w
  7830  15FB  00A9               	movwf	??_strcspn
  7831  15FC  01AA               	clrf	??_strcspn+1
  7832  15FD  0829               	movf	??_strcspn,w
  7833  15FE  00A2               	movwf	strchr@chr
  7834  15FF  082A               	movf	??_strcspn+1,w
  7835  1600  00A3               	movwf	strchr@chr+1
  7836  1601  3193  232E  3195   	fcall	_strchr
  7837  1604  0020               	movlb	0	; select bank0
  7838  1605  0820               	movf	?_strchr,w
  7839  1606  0421               	iorwf	?_strchr+1,w
  7840  1607  1903               	btfsc	3,2
  7841  1608  2DE3               	goto	l3526
  7842  1609                     l3532:	
  7843  1609  082C               	movf	strcspn@i+1,w
  7844  160A  00A8               	movwf	?_strcspn+1
  7845  160B  082B               	movf	strcspn@i,w
  7846  160C  00A7               	movwf	?_strcspn
  7847  160D  0008               	return
  7848  160E                     __end_of_strcspn:	
  7849                           
  7850                           	psect	text27
  7851  132E                     __ptext27:	
  7852 ;; *************** function _strchr *****************
  7853 ;; Defined at:
  7854 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\strchr.c"
  7855 ;; Parameters:    Size  Location     Type
  7856 ;;  ptr             2    0[BANK0 ] PTR const unsigned char 
  7857 ;;		 -> STR_3(2), STR_2(2), STR_1(2), 
  7858 ;;  chr             2    2[BANK0 ] int 
  7859 ;; Auto vars:     Size  Location     Type
  7860 ;;		None
  7861 ;; Return value:  Size  Location     Type
  7862 ;;                  2    0[BANK0 ] PTR unsigned char 
  7863 ;; Registers used:
  7864 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath
  7865 ;; Tracked objects:
  7866 ;;		On entry : 0/0
  7867 ;;		On exit  : 0/0
  7868 ;;		Unchanged: 0/0
  7869 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7870 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7871 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7872 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7873 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7874 ;;Total ram usage:        7 bytes
  7875 ;; Hardware stack levels used:    1
  7876 ;; Hardware stack levels required when called:    7
  7877 ;; This function calls:
  7878 ;;		Nothing
  7879 ;; This function is called by:
  7880 ;;		_strcspn
  7881 ;;		_strspn
  7882 ;; This function uses a non-reentrant model
  7883 ;;
  7884                           
  7885                           
  7886                           ;psect for function _strchr
  7887  132E                     _strchr:	
  7888  132E                     l1039:	
  7889                           ;incstack = 0
  7890                           ; Regs used in _strchr: [wreg-fsr0h+status,2+status,0+pclath]
  7891                           
  7892  132E  0020               	movlb	0	; select bank0
  7893  132F  0820               	movf	strchr@ptr,w
  7894  1330  0084               	movwf	4
  7895  1331  0821               	movf	strchr@ptr+1,w
  7896  1332  0085               	movwf	5
  7897  1333  0800               	movf	0,w	;code access
  7898  1334  0622               	xorwf	strchr@chr,w
  7899  1335  1903               	btfsc	3,2
  7900  1336  0008               	return
  7901  1337  0821               	movf	strchr@ptr+1,w
  7902  1338  00A5               	movwf	??_strchr+1
  7903  1339  0820               	movf	strchr@ptr,w
  7904  133A  00A4               	movwf	??_strchr
  7905  133B  0AA0               	incf	strchr@ptr,f
  7906  133C  1903               	skipnz
  7907  133D  0AA1               	incf	strchr@ptr+1,f
  7908  133E  0824               	movf	??_strchr,w
  7909  133F  0084               	movwf	4
  7910  1340  0825               	movf	??_strchr+1,w
  7911  1341  0085               	movwf	5
  7912  1342  0012               	moviw fsr0++
  7913  1343  1D03               	btfss	3,2
  7914  1344  2B2E               	goto	l1039
  7915  1345  01A0               	clrf	?_strchr
  7916  1346  01A1               	clrf	?_strchr+1
  7917  1347  0008               	return
  7918  1348                     __end_of_strchr:	
  7919                           
  7920                           	psect	text28
  7921  1399                     __ptext28:	
  7922 ;; *************** function _strcpy *****************
  7923 ;; Defined at:
  7924 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\strcpy.c"
  7925 ;; Parameters:    Size  Location     Type
  7926 ;;  to              2    0[BANK0 ] PTR unsigned char 
  7927 ;;		 -> checkRxData@value(32), checkRxData@topic(32), checkRxData@name(32), romDataMap(28), 
  7928 ;;  from            2    2[BANK0 ] PTR const unsigned char 
  7929 ;;		 -> RXPacket(33), STR_11(4), NULL(0), 
  7930 ;; Auto vars:     Size  Location     Type
  7931 ;;  cp              2    4[BANK0 ] PTR unsigned char 
  7932 ;;		 -> checkRxData@value(32), checkRxData@topic(32), checkRxData@name(32), romDataMap(28), 
  7933 ;; Return value:  Size  Location     Type
  7934 ;;                  2    0[BANK0 ] PTR unsigned char 
  7935 ;; Registers used:
  7936 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, pclath
  7937 ;; Tracked objects:
  7938 ;;		On entry : 0/0
  7939 ;;		On exit  : 0/0
  7940 ;;		Unchanged: 0/0
  7941 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7942 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7943 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7944 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7945 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7946 ;;Total ram usage:        6 bytes
  7947 ;; Hardware stack levels used:    1
  7948 ;; Hardware stack levels required when called:    7
  7949 ;; This function calls:
  7950 ;;		Nothing
  7951 ;; This function is called by:
  7952 ;;		_checkRxData
  7953 ;;		_main
  7954 ;; This function uses a non-reentrant model
  7955 ;;
  7956                           
  7957                           
  7958                           ;psect for function _strcpy
  7959  1399                     _strcpy:	
  7960                           
  7961                           ;incstack = 0
  7962                           ; Regs used in _strcpy: [wreg-fsr1h+pclath]
  7963  1399  0020               	movlb	0	; select bank0
  7964  139A  0821               	movf	strcpy@to+1,w
  7965  139B  00A5               	movwf	strcpy@cp+1
  7966  139C  0820               	movf	strcpy@to,w
  7967  139D  00A4               	movwf	strcpy@cp
  7968  139E                     l3612:	
  7969  139E  0824               	movf	strcpy@cp,w
  7970  139F  0086               	movwf	6
  7971  13A0  0825               	movf	strcpy@cp+1,w
  7972  13A1  0087               	movwf	7
  7973  13A2  0822               	movf	strcpy@from,w
  7974  13A3  0084               	movwf	4
  7975  13A4  0823               	movf	strcpy@from+1,w
  7976  13A5  0085               	movwf	5
  7977  13A6  0800               	movf	0,w	;code access
  7978  13A7  3FC0               	movwi [0]fsr1
  7979  13A8  0889               	movf	9,f
  7980  13A9  1903               	btfsc	3,2
  7981  13AA  0008               	return
  7982  13AB  3001               	movlw	1
  7983  13AC  07A4               	addwf	strcpy@cp,f
  7984  13AD  3000               	movlw	0
  7985  13AE  3DA5               	addwfc	strcpy@cp+1,f
  7986  13AF  3001               	movlw	1
  7987  13B0  07A2               	addwf	strcpy@from,f
  7988  13B1  3000               	movlw	0
  7989  13B2  3DA3               	addwfc	strcpy@from+1,f
  7990  13B3  2B9E               	goto	l3612
  7991  13B4                     __end_of_strcpy:	
  7992                           ;	Return value of _strcpy is never used
  7993                           
  7994                           
  7995                           	psect	text29
  7996  137E                     __ptext29:	
  7997 ;; *************** function _sleep *****************
  7998 ;; Defined at:
  7999 ;;		line 22 in file "main.c"
  8000 ;; Parameters:    Size  Location     Type
  8001 ;;  wdps            1    wreg     unsigned char 
  8002 ;; Auto vars:     Size  Location     Type
  8003 ;;  wdps            1    1[BANK0 ] unsigned char 
  8004 ;; Return value:  Size  Location     Type
  8005 ;;                  1    wreg      void 
  8006 ;; Registers used:
  8007 ;;		wreg, status,2, status,0
  8008 ;; Tracked objects:
  8009 ;;		On entry : 0/0
  8010 ;;		On exit  : 0/0
  8011 ;;		Unchanged: 0/0
  8012 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8013 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8014 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8015 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8016 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8017 ;;Total ram usage:        2 bytes
  8018 ;; Hardware stack levels used:    1
  8019 ;; Hardware stack levels required when called:    7
  8020 ;; This function calls:
  8021 ;;		Nothing
  8022 ;; This function is called by:
  8023 ;;		_getADCValue
  8024 ;;		_checkRxData
  8025 ;;		_loop
  8026 ;;		_main
  8027 ;; This function uses a non-reentrant model
  8028 ;;
  8029                           
  8030                           
  8031                           ;psect for function _sleep
  8032  137E                     _sleep:	
  8033                           
  8034                           ;incstack = 0
  8035                           ; Regs used in _sleep: [wreg+status,2+status,0]
  8036                           ;sleep@wdps stored from wreg
  8037  137E  0020               	movlb	0	; select bank0
  8038  137F  00A1               	movwf	sleep@wdps
  8039                           
  8040                           ;main.c: 24: WDTCONbits.WDTPS = wdps;
  8041  1380  0821               	movf	sleep@wdps,w
  8042  1381  00A0               	movwf	??_sleep
  8043  1382  0DA0               	rlf	??_sleep,f
  8044  1383  0021               	movlb	1	; select bank1
  8045  1384  0817               	movf	23,w	;volatile
  8046  1385  0020               	movlb	0	; select bank0
  8047  1386  0620               	xorwf	??_sleep,w
  8048  1387  39C1               	andlw	-63
  8049  1388  0620               	xorwf	??_sleep,w
  8050  1389  0021               	movlb	1	; select bank1
  8051  138A  0097               	movwf	23	;volatile
  8052  138B                     l174:	
  8053                           ;main.c: 26: while (1){
  8054                           
  8055  138B  0063               	sleep	;# 
  8056                           
  8057                           ;main.c: 29: __nop();
  8058  138C  0000               	nop
  8059                           
  8060                           ;main.c: 30: __nop();
  8061  138D  0000               	nop
  8062                           
  8063                           ;main.c: 32: if (!STATUSbits.nTO && !STATUSbits.nPD) {
  8064  138E  0020               	movlb	0	; select bank0
  8065  138F  1E03               	btfss	3,4	;volatile
  8066  1390  1983               	btfsc	3,3	;volatile
  8067  1391  2B8B               	goto	l174
  8068                           
  8069                           ;main.c: 35: WDTCONbits.WDTPS = 13;
  8070  1392  0021               	movlb	1	; select bank1
  8071  1393  0817               	movf	23,w	;volatile
  8072  1394  39C1               	andlw	-63
  8073  1395  381A               	iorlw	26
  8074  1396  0097               	movwf	23	;volatile
  8075  1397  0064               	clrwdt	;# 
  8076                           
  8077                           ;main.c: 38: return;
  8078  1398  0008               	return
  8079  1399                     __end_of_sleep:	
  8080                           
  8081                           	psect	text30
  8082  1580                     __ptext30:	
  8083 ;; *************** function _nrf24l01SendACK *****************
  8084 ;; Defined at:
  8085 ;;		line 86 in file "nrf24l01.c"
  8086 ;; Parameters:    Size  Location     Type
  8087 ;;  packet          1    wreg     PTR struct .
  8088 ;;		 -> RXPacket(33), 
  8089 ;; Auto vars:     Size  Location     Type
  8090 ;;  packet          1   15[BANK0 ] PTR struct .
  8091 ;;		 -> RXPacket(33), 
  8092 ;; Return value:  Size  Location     Type
  8093 ;;                  1    wreg      void 
  8094 ;; Registers used:
  8095 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8096 ;; Tracked objects:
  8097 ;;		On entry : 0/0
  8098 ;;		On exit  : 0/0
  8099 ;;		Unchanged: 0/0
  8100 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8101 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8102 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8103 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8104 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8105 ;;Total ram usage:        2 bytes
  8106 ;; Hardware stack levels used:    1
  8107 ;; Hardware stack levels required when called:   12
  8108 ;; This function calls:
  8109 ;;		_nrf24l01SendPacket
  8110 ;;		_nrf24l01SetTXPipe
  8111 ;; This function is called by:
  8112 ;;		_checkRxData
  8113 ;; This function uses a non-reentrant model
  8114 ;;
  8115                           
  8116                           
  8117                           ;psect for function _nrf24l01SendACK
  8118  1580                     _nrf24l01SendACK:	
  8119                           
  8120                           ;incstack = 0
  8121                           ; Regs used in _nrf24l01SendACK: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8122                           ;nrf24l01SendACK@packet stored from wreg
  8123  1580  0020               	movlb	0	; select bank0
  8124  1581  00AF               	movwf	nrf24l01SendACK@packet
  8125                           
  8126                           ;nrf24l01.c: 88: nrf24l01SetTXPipe(packet->packetData.Pipe);
  8127  1582  082F               	movf	nrf24l01SendACK@packet,w
  8128  1583  0086               	movwf	6
  8129  1584  3002               	movlw	2	; select bank4/5
  8130  1585  0087               	movwf	7
  8131  1586  0E01               	swapf	1,w
  8132  1587  3907               	andlw	7
  8133  1588  3197  27BC  3195   	fcall	_nrf24l01SetTXPipe
  8134                           
  8135                           ;nrf24l01.c: 90: packet->packetData.ACKRequest = 0;
  8136  158B  0020               	movlb	0	; select bank0
  8137  158C  082F               	movf	nrf24l01SendACK@packet,w
  8138  158D  0086               	movwf	6
  8139  158E  3002               	movlw	2	; select bank4/5
  8140  158F  0087               	movwf	7
  8141  1590  1101               	bcf	1,2
  8142                           
  8143                           ;nrf24l01.c: 91: packet->packetData.IsACK = 1;
  8144  1591  082F               	movf	nrf24l01SendACK@packet,w
  8145  1592  0086               	movwf	6
  8146  1593  3002               	movlw	2	; select bank4/5
  8147  1594  0087               	movwf	7
  8148  1595  1581               	bsf	1,3
  8149                           
  8150                           ;nrf24l01.c: 92: packet->packetData.ACKRPD = packet->packetData.RPD;
  8151  1596  082F               	movf	nrf24l01SendACK@packet,w
  8152  1597  0086               	movwf	6
  8153  1598  3002               	movlw	2	; select bank4/5
  8154  1599  0087               	movwf	7
  8155  159A  0801               	movf	1,w
  8156  159B  3901               	andlw	1
  8157  159C  00AE               	movwf	??_nrf24l01SendACK
  8158  159D  082F               	movf	nrf24l01SendACK@packet,w
  8159  159E  0086               	movwf	6
  8160  159F  3002               	movlw	2	; select bank4/5
  8161  15A0  0087               	movwf	7
  8162  15A1  0DAE               	rlf	??_nrf24l01SendACK,f
  8163  15A2  0801               	movf	1,w
  8164  15A3  062E               	xorwf	??_nrf24l01SendACK,w
  8165  15A4  39FD               	andlw	-3
  8166  15A5  062E               	xorwf	??_nrf24l01SendACK,w
  8167  15A6  0081               	movwf	1
  8168                           
  8169                           ;nrf24l01.c: 95: nrf24l01SendPacket(packet);
  8170  15A7  082F               	movf	nrf24l01SendACK@packet,w
  8171  15A8  00A7               	movwf	nrf24l01SendPacket@Packet
  8172  15A9  3002               	movlw	2
  8173  15AA  00A8               	movwf	nrf24l01SendPacket@Packet+1
  8174  15AB  318D  2550         	fcall	_nrf24l01SendPacket
  8175  15AD  0008               	return
  8176  15AE                     __end_of_nrf24l01SendACK:	
  8177                           
  8178                           	psect	text31
  8179  17BC                     __ptext31:	
  8180 ;; *************** function _nrf24l01SetTXPipe *****************
  8181 ;; Defined at:
  8182 ;;		line 309 in file "nrf24l01.c"
  8183 ;; Parameters:    Size  Location     Type
  8184 ;;  pipe            1    wreg     unsigned char 
  8185 ;; Auto vars:     Size  Location     Type
  8186 ;;  pipe            1    6[BANK0 ] unsigned char 
  8187 ;; Return value:  Size  Location     Type
  8188 ;;                  1    wreg      void 
  8189 ;; Registers used:
  8190 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8191 ;; Tracked objects:
  8192 ;;		On entry : 0/0
  8193 ;;		On exit  : 0/0
  8194 ;;		Unchanged: 0/0
  8195 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8196 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8197 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8198 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8199 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8200 ;;Total ram usage:        3 bytes
  8201 ;; Hardware stack levels used:    1
  8202 ;; Hardware stack levels required when called:    9
  8203 ;; This function calls:
  8204 ;;		___bmul
  8205 ;;		_nrf24l01SPIEnd
  8206 ;;		_nrf24l01SPISend
  8207 ;;		_nrf24l01SPIStart
  8208 ;; This function is called by:
  8209 ;;		_main
  8210 ;;		_nrf24l01SendACK
  8211 ;;		_nrf24l01InitRegisters
  8212 ;; This function uses a non-reentrant model
  8213 ;;
  8214                           
  8215                           
  8216                           ;psect for function _nrf24l01SetTXPipe
  8217  17BC                     _nrf24l01SetTXPipe:	
  8218                           
  8219                           ;incstack = 0
  8220                           ; Regs used in _nrf24l01SetTXPipe: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8221                           ;nrf24l01SetTXPipe@pipe stored from wreg
  8222  17BC  0020               	movlb	0	; select bank0
  8223  17BD  00A6               	movwf	nrf24l01SetTXPipe@pipe
  8224                           
  8225                           ;nrf24l01.c: 312: nrf24l01SPIStart();
  8226  17BE  3192  226F  3197   	fcall	_nrf24l01SPIStart
  8227                           
  8228                           ;nrf24l01.c: 313: nrf24l01SPISend((unsigned) 0b00100000 | (unsigned) 0x10);
  8229  17C1  3030               	movlw	48
  8230  17C2  3192  2280  3197   	fcall	_nrf24l01SPISend
  8231                           
  8232                           ;nrf24l01.c: 314: nrf24l01SPISend(n_ADDRESS_P0[4] + (unsigned) (pipe * n_ADDRESS_MUL));
  8233  17C5  3045               	movlw	low ((_n_ADDRESS_P0+4)| (0+32768))
  8234  17C6  0084               	movwf	4
  8235  17C7  3098               	movlw	high ((_n_ADDRESS_P0+4)| (0+32768))
  8236  17C8  0085               	movwf	5
  8237  17C9  0800               	movf	0,w	;code access
  8238  17CA  0020               	movlb	0	; select bank0
  8239  17CB  00A4               	movwf	??_nrf24l01SetTXPipe
  8240  17CC  3028               	movlw	low (_n_ADDRESS_MUL| (0+32768))
  8241  17CD  0084               	movwf	4
  8242  17CE  3098               	movlw	high (_n_ADDRESS_MUL| (0+32768))
  8243  17CF  0085               	movwf	5
  8244  17D0  0800               	movf	0,w	;code access
  8245  17D1  00A5               	movwf	??_nrf24l01SetTXPipe+1
  8246  17D2  0825               	movf	??_nrf24l01SetTXPipe+1,w
  8247  17D3  00A0               	movwf	___bmul@multiplicand
  8248  17D4  0826               	movf	nrf24l01SetTXPipe@pipe,w
  8249  17D5  3192  229C  3197   	fcall	___bmul
  8250  17D8  0020               	movlb	0	; select bank0
  8251  17D9  0724               	addwf	??_nrf24l01SetTXPipe,w
  8252  17DA  3192  2280  3197   	fcall	_nrf24l01SPISend
  8253                           
  8254                           ;nrf24l01.c: 315: nrf24l01SPISend(n_ADDRESS_P0[3]);
  8255  17DD  3044               	movlw	low ((_n_ADDRESS_P0+3)| (0+32768))
  8256  17DE  0084               	movwf	4
  8257  17DF  3098               	movlw	high ((_n_ADDRESS_P0+3)| (0+32768))
  8258  17E0  0085               	movwf	5
  8259  17E1  0800               	movf	0,w	;code access
  8260  17E2  3192  2280  3197   	fcall	_nrf24l01SPISend
  8261                           
  8262                           ;nrf24l01.c: 316: nrf24l01SPISend(n_ADDRESS_P0[2]);
  8263  17E5  3043               	movlw	low ((_n_ADDRESS_P0+2)| (0+32768))
  8264  17E6  0084               	movwf	4
  8265  17E7  3098               	movlw	high ((_n_ADDRESS_P0+2)| (0+32768))
  8266  17E8  0085               	movwf	5
  8267  17E9  0800               	movf	0,w	;code access
  8268  17EA  3192  2280  3197   	fcall	_nrf24l01SPISend
  8269                           
  8270                           ;nrf24l01.c: 317: nrf24l01SPISend(n_ADDRESS_P0[1]);
  8271  17ED  3042               	movlw	low ((_n_ADDRESS_P0+1)| (0+32768))
  8272  17EE  0084               	movwf	4
  8273  17EF  3098               	movlw	high ((_n_ADDRESS_P0+1)| (0+32768))
  8274  17F0  0085               	movwf	5
  8275  17F1  0800               	movf	0,w	;code access
  8276  17F2  3192  2280  3197   	fcall	_nrf24l01SPISend
  8277                           
  8278                           ;nrf24l01.c: 318: nrf24l01SPISend(n_ADDRESS_P0[0]);
  8279  17F5  3041               	movlw	low (_n_ADDRESS_P0| (0+32768))
  8280  17F6  0084               	movwf	4
  8281  17F7  3098               	movlw	high (_n_ADDRESS_P0| (0+32768))
  8282  17F8  0085               	movwf	5
  8283  17F9  0800               	movf	0,w	;code access
  8284  17FA  3192  2280  3197   	fcall	_nrf24l01SPISend
  8285                           
  8286                           ;nrf24l01.c: 319: nrf24l01SPIEnd();
  8287  17FD  3192  2260         	fcall	_nrf24l01SPIEnd
  8288  17FF  0008               	return
  8289  1800                     __end_of_nrf24l01SetTXPipe:	
  8290                           
  8291                           	psect	text32
  8292  0D50                     __ptext32:	
  8293 ;; *************** function _nrf24l01SendPacket *****************
  8294 ;; Defined at:
  8295 ;;		line 170 in file "nrf24l01.c"
  8296 ;; Parameters:    Size  Location     Type
  8297 ;;  Packet          2    7[BANK0 ] PTR struct .
  8298 ;;		 -> RXPacket(33), main@packet(33), loop@packet(33), 
  8299 ;; Auto vars:     Size  Location     Type
  8300 ;;  i               1   13[BANK0 ] unsigned char 
  8301 ;; Return value:  Size  Location     Type
  8302 ;;                  1    wreg      void 
  8303 ;; Registers used:
  8304 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8305 ;; Tracked objects:
  8306 ;;		On entry : 0/0
  8307 ;;		On exit  : 0/0
  8308 ;;		Unchanged: 0/0
  8309 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8310 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8311 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8312 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8313 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8314 ;;Total ram usage:        7 bytes
  8315 ;; Hardware stack levels used:    1
  8316 ;; Hardware stack levels required when called:   11
  8317 ;; This function calls:
  8318 ;;		_enableInterrupts
  8319 ;;		_nrf24l01CEHigh
  8320 ;;		_nrf24l01CELow
  8321 ;;		_nrf24l01ChangeTXPower
  8322 ;;		_nrf24l01SPIEnd
  8323 ;;		_nrf24l01SPISend
  8324 ;;		_nrf24l01SPIStart
  8325 ;;		_nrf24l01SetRXMode
  8326 ;;		_strlen
  8327 ;; This function is called by:
  8328 ;;		_loop
  8329 ;;		_main
  8330 ;;		_nrf24l01SendACK
  8331 ;; This function uses a non-reentrant model
  8332 ;;
  8333                           
  8334                           
  8335                           ;psect for function _nrf24l01SendPacket
  8336  0D50                     _nrf24l01SendPacket:	
  8337                           
  8338                           ;nrf24l01.c: 172: TXPacket = Packet;
  8339                           
  8340                           ;incstack = 0
  8341                           ; Regs used in _nrf24l01SendPacket: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8342  0D50  0020               	movlb	0	; select bank0
  8343  0D51  0828               	movf	nrf24l01SendPacket@Packet+1,w
  8344  0D52  0023               	movlb	3	; select bank3
  8345  0D53  00C6               	movwf	(_TXPacket+1)^(0+384)
  8346  0D54  0020               	movlb	0	; select bank0
  8347  0D55  0827               	movf	nrf24l01SendPacket@Packet,w
  8348  0D56  0023               	movlb	3	; select bank3
  8349  0D57  00C5               	movwf	_TXPacket^(0+384)
  8350  0D58                     l300:	
  8351                           ;nrf24l01.c: 175: unsigned char i;;nrf24l01.c: 179: RESEND:
  8352                           
  8353                           
  8354                           ;nrf24l01.c: 182: i = 0xFF;
  8355  0D58  30FF               	movlw	255
  8356  0D59  0020               	movlb	0	; select bank0
  8357  0D5A  00A9               	movwf	??_nrf24l01SendPacket
  8358  0D5B  0829               	movf	??_nrf24l01SendPacket,w
  8359  0D5C  00AD               	movwf	nrf24l01SendPacket@i
  8360  0D5D                     l3126:	
  8361                           ;nrf24l01.c: 183: while (nrf24l01.TXBusy){
  8362                           
  8363  0D5D  1C7D               	btfss	_nrf24l01,0	;volatile
  8364  0D5E  2D69               	goto	l304
  8365                           
  8366                           ;nrf24l01.c: 184: if (!--i) {
  8367  0D5F  3001               	movlw	1
  8368  0D60  0020               	movlb	0	; select bank0
  8369  0D61  02AD               	subwf	nrf24l01SendPacket@i,f
  8370  0D62  1903               	btfsc	3,2
  8371  0D63  2D58               	goto	l300
  8372                           
  8373                           ;nrf24l01.c: 186: };nrf24l01.c: 187: _delay((unsigned long)((100)*(32000000/4000000.0)))
      +                          ;
  8374                           
  8375                           ;nrf24l01.c: 185: goto RESEND;
  8376  0D64  30A0               	movlw	160
  8377  0D65                     u4507:	
  8378  0D65  3200               	nop2
  8379  0D66  0B89               	decfsz	9,f
  8380  0D67  2D65               	goto	u4507
  8381  0D68  2D5D               	goto	l3126
  8382  0D69                     l304:	
  8383                           
  8384                           ;nrf24l01.c: 188: };nrf24l01.c: 191: nrf24l01.TXBusy = 1;
  8385  0D69  147D               	bsf	_nrf24l01,0	;volatile
  8386                           
  8387                           ;nrf24l01.c: 194: enableInterrupts(0);
  8388  0D6A  3000               	movlw	0
  8389  0D6B  3192  2267  318D   	fcall	_enableInterrupts
  8390                           
  8391                           ;nrf24l01.c: 197: nrf24l01SetRXMode(0);
  8392  0D6E  3000               	movlw	0
  8393  0D6F  3197  2778  318D   	fcall	_nrf24l01SetRXMode
  8394                           
  8395                           ;nrf24l01.c: 200: nrf24l01SPIStart();
  8396  0D72  3192  226F  318D   	fcall	_nrf24l01SPIStart
  8397                           
  8398                           ;nrf24l01.c: 203: nrf24l01SPISend((unsigned) 0b10110000);
  8399  0D75  30B0               	movlw	176
  8400  0D76  3192  2280  318D   	fcall	_nrf24l01SPISend
  8401                           
  8402                           ;nrf24l01.c: 205: nrf24l01SPISend(TXPacket->packetData.byte);
  8403  0D79  0023               	movlb	3	; select bank3
  8404  0D7A  0845               	movf	_TXPacket^(0+384),w
  8405  0D7B  0086               	movwf	6
  8406  0D7C  0846               	movf	(_TXPacket+1)^(0+384),w
  8407  0D7D  0087               	movwf	7
  8408  0D7E  0801               	movf	1,w
  8409  0D7F  3192  2280  318D   	fcall	_nrf24l01SPISend
  8410                           
  8411                           ;nrf24l01.c: 208: for (i = 0; (i < strlen(TXPacket->Message)) && (i < sizeof(TXPacket->M
      +                          essage)); i++){
  8412  0D82  0020               	movlb	0	; select bank0
  8413  0D83  01AD               	clrf	nrf24l01SendPacket@i
  8414  0D84  2D9E               	goto	l3138
  8415  0D85                     l3134:	
  8416                           
  8417                           ;nrf24l01.c: 209: nrf24l01SPISend(TXPacket->Message[i]);
  8418  0D85  082D               	movf	nrf24l01SendPacket@i,w
  8419  0D86  3E01               	addlw	1
  8420  0D87  00A9               	movwf	??_nrf24l01SendPacket
  8421  0D88  3000               	movlw	0
  8422  0D89  1803               	skipnc
  8423  0D8A  3001               	movlw	1
  8424  0D8B  00AA               	movwf	??_nrf24l01SendPacket+1
  8425  0D8C  0829               	movf	??_nrf24l01SendPacket,w
  8426  0D8D  0023               	movlb	3	; select bank3
  8427  0D8E  0745               	addwf	_TXPacket^(0+384),w
  8428  0D8F  0086               	movwf	6
  8429  0D90  0020               	movlb	0	; select bank0
  8430  0D91  082A               	movf	??_nrf24l01SendPacket+1,w
  8431  0D92  0023               	movlb	3	; select bank3
  8432  0D93  3D46               	addwfc	(_TXPacket+1)^(0+384),w
  8433  0D94  0087               	movwf	7
  8434  0D95  0801               	movf	1,w
  8435  0D96  3192  2280  318D   	fcall	_nrf24l01SPISend
  8436  0D99  3001               	movlw	1
  8437  0D9A  0020               	movlb	0	; select bank0
  8438  0D9B  00A9               	movwf	??_nrf24l01SendPacket
  8439  0D9C  0829               	movf	??_nrf24l01SendPacket,w
  8440  0D9D  07AD               	addwf	nrf24l01SendPacket@i,f
  8441  0D9E                     l3138:	
  8442  0D9E  0023               	movlb	3	; select bank3
  8443  0D9F  0845               	movf	_TXPacket^(0+384),w
  8444  0DA0  3E01               	addlw	1
  8445  0DA1  0020               	movlb	0	; select bank0
  8446  0DA2  00A9               	movwf	??_nrf24l01SendPacket
  8447  0DA3  3000               	movlw	0
  8448  0DA4  0023               	movlb	3	; select bank3
  8449  0DA5  3D46               	addwfc	(_TXPacket+1)^(0+384),w
  8450  0DA6  0020               	movlb	0	; select bank0
  8451  0DA7  00AA               	movwf	??_nrf24l01SendPacket+1
  8452  0DA8  0829               	movf	??_nrf24l01SendPacket,w
  8453  0DA9  00A0               	movwf	strlen@s
  8454  0DAA  082A               	movf	??_nrf24l01SendPacket+1,w
  8455  0DAB  00A1               	movwf	strlen@s+1
  8456  0DAC  3194  240A  318D   	fcall	_strlen
  8457  0DAF  0020               	movlb	0	; select bank0
  8458  0DB0  082D               	movf	nrf24l01SendPacket@i,w
  8459  0DB1  00AB               	movwf	??_nrf24l01SendPacket+2
  8460  0DB2  01AC               	clrf	??_nrf24l01SendPacket+3
  8461  0DB3  0821               	movf	?_strlen+1,w
  8462  0DB4  022C               	subwf	??_nrf24l01SendPacket+3,w
  8463  0DB5  1D03               	skipz
  8464  0DB6  2DB9               	goto	u3265
  8465  0DB7  0820               	movf	?_strlen,w
  8466  0DB8  022B               	subwf	??_nrf24l01SendPacket+2,w
  8467  0DB9                     u3265:	
  8468  0DB9  1803               	skipnc
  8469  0DBA  2DBF               	goto	l3142
  8470  0DBB  3020               	movlw	32
  8471  0DBC  022D               	subwf	nrf24l01SendPacket@i,w
  8472  0DBD  1C03               	skipc
  8473  0DBE  2D85               	goto	l3134
  8474  0DBF                     l3142:	
  8475                           
  8476                           ;nrf24l01.c: 210: };nrf24l01.c: 213: nrf24l01SPIEnd();
  8477  0DBF  3192  2260  318D   	fcall	_nrf24l01SPIEnd
  8478                           
  8479                           ;nrf24l01.c: 216: nrf24l01CEHigh();
  8480  0DC2  3192  2251  318D   	fcall	_nrf24l01CEHigh
  8481                           
  8482                           ;nrf24l01.c: 217: _delay((unsigned long)((20)*(32000000/4000000.0)));
  8483  0DC5  3035               	movlw	53
  8484  0DC6                     u4517:	
  8485  0DC6  0B89               	decfsz	9,f
  8486  0DC7  2DC6               	goto	u4517
  8487  0DC8  0000               	nop
  8488                           
  8489                           ;nrf24l01.c: 218: nrf24l01CELow();
  8490  0DC9  3192  2254  318D   	fcall	_nrf24l01CELow
  8491                           
  8492                           ;nrf24l01.c: 221: enableInterrupts(1);
  8493  0DCC  3001               	movlw	1
  8494  0DCD  3192  2267  318D   	fcall	_enableInterrupts
  8495                           
  8496                           ;nrf24l01.c: 224: i = 0xFF;
  8497  0DD0  30FF               	movlw	255
  8498  0DD1  0020               	movlb	0	; select bank0
  8499  0DD2  00A9               	movwf	??_nrf24l01SendPacket
  8500  0DD3  0829               	movf	??_nrf24l01SendPacket,w
  8501  0DD4  00AD               	movwf	nrf24l01SendPacket@i
  8502  0DD5                     l3156:	
  8503                           ;nrf24l01.c: 225: while (nrf24l01.TXBusy){
  8504                           
  8505  0DD5  1C7D               	btfss	_nrf24l01,0	;volatile
  8506  0DD6  2DE1               	goto	l3158
  8507                           
  8508                           ;nrf24l01.c: 226: if (!--i) {
  8509  0DD7  3001               	movlw	1
  8510  0DD8  0020               	movlb	0	; select bank0
  8511  0DD9  02AD               	subwf	nrf24l01SendPacket@i,f
  8512  0DDA  1903               	btfsc	3,2
  8513  0DDB  2D58               	goto	l300
  8514                           
  8515                           ;nrf24l01.c: 228: };nrf24l01.c: 229: _delay((unsigned long)((100)*(32000000/4000000.0)))
      +                          ;
  8516                           
  8517                           ;nrf24l01.c: 227: goto RESEND;
  8518  0DDC  30A0               	movlw	160
  8519  0DDD                     u4527:	
  8520  0DDD  3200               	nop2
  8521  0DDE  0B89               	decfsz	9,f
  8522  0DDF  2DDD               	goto	u4527
  8523  0DE0  2DD5               	goto	l3156
  8524  0DE1                     l3158:	
  8525                           
  8526                           ;nrf24l01.c: 230: };nrf24l01.c: 234: i = 0xFF;
  8527  0DE1  30FF               	movlw	255
  8528  0DE2  0020               	movlb	0	; select bank0
  8529  0DE3  00A9               	movwf	??_nrf24l01SendPacket
  8530  0DE4  0829               	movf	??_nrf24l01SendPacket,w
  8531  0DE5  00AD               	movwf	nrf24l01SendPacket@i
  8532  0DE6                     l3168:	
  8533                           ;nrf24l01.c: 235: while (TXPacket->packetData.ACKRequest){
  8534                           
  8535  0DE6  0023               	movlb	3	; select bank3
  8536  0DE7  0845               	movf	_TXPacket^(0+384),w
  8537  0DE8  0086               	movwf	6
  8538  0DE9  0846               	movf	(_TXPacket+1)^(0+384),w
  8539  0DEA  0087               	movwf	7
  8540  0DEB  1D01               	btfss	1,2
  8541  0DEC  0008               	return
  8542                           
  8543                           ;nrf24l01.c: 236: if (!--i) {
  8544  0DED  3001               	movlw	1
  8545  0DEE  0020               	movlb	0	; select bank0
  8546  0DEF  02AD               	subwf	nrf24l01SendPacket@i,f
  8547  0DF0  1D03               	btfss	3,2
  8548  0DF1  2E13               	goto	l3166
  8549                           
  8550                           ;nrf24l01.c: 237: _delay((unsigned long)((50000)*(32000000/4000000.0)));
  8551  0DF2  3003               	movlw	3
  8552  0DF3  0020               	movlb	0	; select bank0
  8553  0DF4  00AA               	movwf	??_nrf24l01SendPacket+1
  8554  0DF5  3008               	movlw	8
  8555  0DF6  00A9               	movwf	??_nrf24l01SendPacket
  8556  0DF7  3077               	movlw	119
  8557  0DF8                     u4537:	
  8558  0DF8  0B89               	decfsz	9,f
  8559  0DF9  2DF8               	goto	u4537
  8560  0DFA  0BA9               	decfsz	??_nrf24l01SendPacket,f
  8561  0DFB  2DF8               	goto	u4537
  8562  0DFC  0BAA               	decfsz	??_nrf24l01SendPacket+1,f
  8563  0DFD  2DF8               	goto	u4537
  8564                           
  8565                           ;nrf24l01.c: 238: _delay((unsigned long)((50000)*(32000000/4000000.0)));
  8566  0DFE  3003               	movlw	3
  8567  0DFF  0020               	movlb	0	; select bank0
  8568  0E00  00AA               	movwf	??_nrf24l01SendPacket+1
  8569  0E01  3008               	movlw	8
  8570  0E02  00A9               	movwf	??_nrf24l01SendPacket
  8571  0E03  3077               	movlw	119
  8572  0E04                     u4547:	
  8573  0E04  0B89               	decfsz	9,f
  8574  0E05  2E04               	goto	u4547
  8575  0E06  0BA9               	decfsz	??_nrf24l01SendPacket,f
  8576  0E07  2E04               	goto	u4547
  8577  0E08  0BAA               	decfsz	??_nrf24l01SendPacket+1,f
  8578  0E09  2E04               	goto	u4547
  8579                           
  8580                           ;nrf24l01.c: 239: nrf24l01ChangeTXPower(1);
  8581  0E0A  3001               	movlw	1
  8582  0E0B  0020               	movlb	0	; select bank0
  8583  0E0C  00A3               	movwf	nrf24l01ChangeTXPower@addPower
  8584  0E0D  3000               	movlw	0
  8585  0E0E  00A4               	movwf	nrf24l01ChangeTXPower@addPower+1
  8586  0E0F  3196  26F6  318D   	fcall	_nrf24l01ChangeTXPower
  8587                           
  8588                           ;nrf24l01.c: 240: goto RESEND;
  8589  0E12  2D58               	goto	l300
  8590  0E13                     l3166:	
  8591                           
  8592                           ;nrf24l01.c: 241: };nrf24l01.c: 242: _delay((unsigned long)((100)*(32000000/4000000.0)))
      +                          ;
  8593  0E13  30A0               	movlw	160
  8594  0E14                     u4557:	
  8595  0E14  3200               	nop2
  8596  0E15  0B89               	decfsz	9,f
  8597  0E16  2E14               	goto	u4557
  8598  0E17  2DE6               	goto	l3168
  8599  0E18                     __end_of_nrf24l01SendPacket:	
  8600                           
  8601                           	psect	text33
  8602  140A                     __ptext33:	
  8603 ;; *************** function _strlen *****************
  8604 ;; Defined at:
  8605 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\strlen.c"
  8606 ;; Parameters:    Size  Location     Type
  8607 ;;  s               2    0[BANK0 ] PTR const unsigned char 
  8608 ;;		 -> packet.Message(32), packet.Message(32), RXPacket.Message(32), RXPacket(33), 
  8609 ;;		 -> main@packet(33), loop@packet(33), NULL(0), romDataMap(28), 
  8610 ;; Auto vars:     Size  Location     Type
  8611 ;;  cp              2    4[BANK0 ] PTR const unsigned char 
  8612 ;;		 -> packet.Message(32), packet.Message(32), RXPacket.Message(32), RXPacket(33), 
  8613 ;;		 -> main@packet(33), loop@packet(33), NULL(0), romDataMap(28), 
  8614 ;; Return value:  Size  Location     Type
  8615 ;;                  2    0[BANK0 ] unsigned int 
  8616 ;; Registers used:
  8617 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  8618 ;; Tracked objects:
  8619 ;;		On entry : 0/0
  8620 ;;		On exit  : 0/0
  8621 ;;		Unchanged: 0/0
  8622 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8623 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8624 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8625 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8626 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8627 ;;Total ram usage:        6 bytes
  8628 ;; Hardware stack levels used:    1
  8629 ;; Hardware stack levels required when called:    7
  8630 ;; This function calls:
  8631 ;;		Nothing
  8632 ;; This function is called by:
  8633 ;;		_nrf24l01GetPipe
  8634 ;;		_nrf24l01SendPacket
  8635 ;; This function uses a non-reentrant model
  8636 ;;
  8637                           
  8638                           
  8639                           ;psect for function _strlen
  8640  140A                     _strlen:	
  8641                           
  8642                           ;incstack = 0
  8643                           ; Regs used in _strlen: [wreg+fsr1l+fsr1h+status,2+status,0]
  8644  140A  0020               	movlb	0	; select bank0
  8645  140B  0821               	movf	strlen@s+1,w
  8646  140C  00A5               	movwf	strlen@cp+1
  8647  140D  0820               	movf	strlen@s,w
  8648  140E  00A4               	movwf	strlen@cp
  8649  140F                     l2780:	
  8650  140F  0824               	movf	strlen@cp,w
  8651  1410  0086               	movwf	6
  8652  1411  0825               	movf	strlen@cp+1,w
  8653  1412  0087               	movwf	7
  8654  1413  0801               	movf	1,w
  8655  1414  1903               	btfsc	3,2
  8656  1415  2C1B               	goto	l2782
  8657  1416  3001               	movlw	1
  8658  1417  07A4               	addwf	strlen@cp,f
  8659  1418  3000               	movlw	0
  8660  1419  3DA5               	addwfc	strlen@cp+1,f
  8661  141A  2C0F               	goto	l2780
  8662  141B                     l2782:	
  8663  141B  0920               	comf	strlen@s,w
  8664  141C  00A2               	movwf	??_strlen
  8665  141D  0921               	comf	strlen@s+1,w
  8666  141E  00A3               	movwf	??_strlen+1
  8667  141F  0AA2               	incf	??_strlen,f
  8668  1420  1903               	skipnz
  8669  1421  0AA3               	incf	??_strlen+1,f
  8670  1422  0824               	movf	strlen@cp,w
  8671  1423  0722               	addwf	??_strlen,w
  8672  1424  00A0               	movwf	?_strlen
  8673  1425  0825               	movf	strlen@cp+1,w
  8674  1426  3D23               	addwfc	??_strlen+1,w
  8675  1427  00A1               	movwf	?_strlen+1
  8676  1428  0008               	return
  8677  1429                     __end_of_strlen:	
  8678                           
  8679                           	psect	text34
  8680  1778                     __ptext34:	
  8681 ;; *************** function _nrf24l01SetRXMode *****************
  8682 ;; Defined at:
  8683 ;;		line 54 in file "nrf24l01.c"
  8684 ;; Parameters:    Size  Location     Type
  8685 ;;  rxMode          1    wreg     unsigned char 
  8686 ;; Auto vars:     Size  Location     Type
  8687 ;;  rxMode          1    5[BANK0 ] unsigned char 
  8688 ;;  config          1    4[BANK0 ] struct .
  8689 ;; Return value:  Size  Location     Type
  8690 ;;                  1    wreg      void 
  8691 ;; Registers used:
  8692 ;;		wreg, status,2, status,0, pclath, cstack
  8693 ;; Tracked objects:
  8694 ;;		On entry : 0/0
  8695 ;;		On exit  : 0/0
  8696 ;;		Unchanged: 0/0
  8697 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8698 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8699 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8700 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8701 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8702 ;;Total ram usage:        3 bytes
  8703 ;; Hardware stack levels used:    1
  8704 ;; Hardware stack levels required when called:   10
  8705 ;; This function calls:
  8706 ;;		_nrf24l01CEHigh
  8707 ;;		_nrf24l01CELow
  8708 ;;		_nrf24l01Send
  8709 ;; This function is called by:
  8710 ;;		_checkRxData
  8711 ;;		_nrf24l01SendPacket
  8712 ;; This function uses a non-reentrant model
  8713 ;;
  8714                           
  8715                           
  8716                           ;psect for function _nrf24l01SetRXMode
  8717  1778                     _nrf24l01SetRXMode:	
  8718                           
  8719                           ;incstack = 0
  8720                           ; Regs used in _nrf24l01SetRXMode: [wreg+status,2+status,0+pclath+cstack]
  8721                           ;nrf24l01SetRXMode@rxMode stored from wreg
  8722  1778  0020               	movlb	0	; select bank0
  8723  1779  00A5               	movwf	nrf24l01SetRXMode@rxMode
  8724                           
  8725                           ;nrf24l01.c: 56: n_CONFIG_t config;;nrf24l01.c: 59: config.byte = nrf24l01Send((unsigned
      +                          ) 0b00000000 | (unsigned) 0x00, 0);
  8726  177A  01A0               	clrf	nrf24l01Send@data
  8727  177B  3000               	movlw	0
  8728  177C  3194  2429  3197   	fcall	_nrf24l01Send
  8729  177F  0020               	movlb	0	; select bank0
  8730  1780  00A3               	movwf	??_nrf24l01SetRXMode
  8731  1781  0823               	movf	??_nrf24l01SetRXMode,w
  8732  1782  00A4               	movwf	nrf24l01SetRXMode@config
  8733                           
  8734                           ;nrf24l01.c: 62: if (config.PRIM_RX != rxMode){
  8735  1783  0824               	movf	nrf24l01SetRXMode@config,w
  8736  1784  3901               	andlw	1
  8737  1785  0625               	xorwf	nrf24l01SetRXMode@rxMode,w
  8738  1786  1903               	skipnz
  8739  1787  2FB5               	goto	l2758
  8740                           
  8741                           ;nrf24l01.c: 65: nrf24l01CELow();
  8742  1788  3192  2254  3197   	fcall	_nrf24l01CELow
  8743                           
  8744                           ;nrf24l01.c: 66: _delay((unsigned long)((200)*(32000000/4000000.0)));
  8745  178B  30E4               	movlw	228
  8746  178C                     u4567:	
  8747  178C  3200               	nop2
  8748  178D  3200               	nop2
  8749  178E  0B89               	decfsz	9,f
  8750  178F  2F8C               	goto	u4567
  8751  1790  3200               	nop2
  8752  1791  3200               	nop2
  8753                           
  8754                           ;nrf24l01.c: 69: config.PRIM_RX = rxMode;
  8755  1792  0020               	movlb	0	; select bank0
  8756  1793  0825               	movf	nrf24l01SetRXMode@rxMode,w
  8757  1794  3901               	andlw	1
  8758  1795  1024               	bcf	nrf24l01SetRXMode@config,0
  8759  1796  1D03               	skipz
  8760  1797  1424               	bsf	nrf24l01SetRXMode@config,0
  8761                           
  8762                           ;nrf24l01.c: 70: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x00, config.byte);
  8763  1798  0824               	movf	nrf24l01SetRXMode@config,w
  8764  1799  00A3               	movwf	??_nrf24l01SetRXMode
  8765  179A  0823               	movf	??_nrf24l01SetRXMode,w
  8766  179B  00A0               	movwf	nrf24l01Send@data
  8767  179C  3020               	movlw	32
  8768  179D  3194  2429  3197   	fcall	_nrf24l01Send
  8769                           
  8770                           ;nrf24l01.c: 73: _delay((unsigned long)((200)*(32000000/4000000.0)));
  8771  17A0  30E4               	movlw	228
  8772  17A1                     u4577:	
  8773  17A1  3200               	nop2
  8774  17A2  3200               	nop2
  8775  17A3  0B89               	decfsz	9,f
  8776  17A4  2FA1               	goto	u4577
  8777  17A5  3200               	nop2
  8778  17A6  3200               	nop2
  8779                           
  8780                           ;nrf24l01.c: 76: if (rxMode){
  8781  17A7  0020               	movlb	0	; select bank0
  8782  17A8  0825               	movf	nrf24l01SetRXMode@rxMode,w
  8783  17A9  1903               	btfsc	3,2
  8784  17AA  2FB5               	goto	l2758
  8785                           
  8786                           ;nrf24l01.c: 77: nrf24l01CEHigh();
  8787  17AB  3192  2251  3197   	fcall	_nrf24l01CEHigh
  8788                           
  8789                           ;nrf24l01.c: 78: _delay((unsigned long)((200)*(32000000/4000000.0)));
  8790  17AE  30E4               	movlw	228
  8791  17AF                     u4587:	
  8792  17AF  3200               	nop2
  8793  17B0  3200               	nop2
  8794  17B1  0B89               	decfsz	9,f
  8795  17B2  2FAF               	goto	u4587
  8796  17B3  3200               	nop2
  8797  17B4  3200               	nop2
  8798  17B5                     l2758:	
  8799                           
  8800                           ;nrf24l01.c: 79: };nrf24l01.c: 80: };nrf24l01.c: 83: nrf24l01.RXMode = rxMode;
  8801  17B5  0020               	movlb	0	; select bank0
  8802  17B6  0825               	movf	nrf24l01SetRXMode@rxMode,w
  8803  17B7  3901               	andlw	1
  8804  17B8  117D               	bcf	_nrf24l01,2	;volatile
  8805  17B9  1D03               	skipz
  8806  17BA  157D               	bsf	_nrf24l01,2	;volatile
  8807  17BB  0008               	return
  8808  17BC                     __end_of_nrf24l01SetRXMode:	
  8809                           
  8810                           	psect	text35
  8811  16F6                     __ptext35:	
  8812 ;; *************** function _nrf24l01ChangeTXPower *****************
  8813 ;; Defined at:
  8814 ;;		line 33 in file "nrf24l01.c"
  8815 ;; Parameters:    Size  Location     Type
  8816 ;;  addPower        2    3[BANK0 ] int 
  8817 ;; Auto vars:     Size  Location     Type
  8818 ;;  rfSetup         1    6[BANK0 ] struct .
  8819 ;; Return value:  Size  Location     Type
  8820 ;;                  1    wreg      void 
  8821 ;; Registers used:
  8822 ;;		wreg, status,2, status,0, pclath, cstack
  8823 ;; Tracked objects:
  8824 ;;		On entry : 0/0
  8825 ;;		On exit  : 0/0
  8826 ;;		Unchanged: 0/0
  8827 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8828 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8829 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8830 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8831 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8832 ;;Total ram usage:        4 bytes
  8833 ;; Hardware stack levels used:    1
  8834 ;; Hardware stack levels required when called:   10
  8835 ;; This function calls:
  8836 ;;		_nrf24l01Send
  8837 ;; This function is called by:
  8838 ;;		_checkTXPower
  8839 ;;		_nrf24l01SendPacket
  8840 ;; This function uses a non-reentrant model
  8841 ;;
  8842                           
  8843                           
  8844                           ;psect for function _nrf24l01ChangeTXPower
  8845  16F6                     _nrf24l01ChangeTXPower:	
  8846                           
  8847                           ;nrf24l01.c: 35: n_RF_SETUP_t rfSetup;;nrf24l01.c: 36: rfSetup.byte = nrf24l01Send((unsi
      +                          gned) 0b00000000 | (unsigned) 0x06, 0);
  8848                           
  8849                           ;incstack = 0
  8850                           ; Regs used in _nrf24l01ChangeTXPower: [wreg+status,2+status,0+pclath+cstack]
  8851  16F6  0020               	movlb	0	; select bank0
  8852  16F7  01A0               	clrf	nrf24l01Send@data
  8853  16F8  3006               	movlw	6
  8854  16F9  3194  2429  3196   	fcall	_nrf24l01Send
  8855  16FC  0020               	movlb	0	; select bank0
  8856  16FD  00A5               	movwf	??_nrf24l01ChangeTXPower
  8857  16FE  0825               	movf	??_nrf24l01ChangeTXPower,w
  8858  16FF  00A6               	movwf	nrf24l01ChangeTXPower@rfSetup
  8859                           
  8860                           ;nrf24l01.c: 38: if (addPower > 0){
  8861  1700  0824               	movf	nrf24l01ChangeTXPower@addPower+1,w
  8862  1701  3A80               	xorlw	128
  8863  1702  00A5               	movwf	??_nrf24l01ChangeTXPower
  8864  1703  3080               	movlw	128
  8865  1704  0225               	subwf	??_nrf24l01ChangeTXPower,w
  8866  1705  1D03               	skipz
  8867  1706  2F09               	goto	u2395
  8868  1707  3001               	movlw	1
  8869  1708  0223               	subwf	nrf24l01ChangeTXPower@addPower,w
  8870  1709                     u2395:	
  8871  1709  1C03               	skipc
  8872  170A  2F1B               	goto	l2768
  8873                           
  8874                           ;nrf24l01.c: 39: if (rfSetup.RF_PWR < 3){
  8875  170B  0020               	movlb	0	; select bank0
  8876  170C  0C26               	rrf	nrf24l01ChangeTXPower@rfSetup,w
  8877  170D  3903               	andlw	3
  8878  170E  3A03               	xorlw	3
  8879  170F  1903               	skipnz
  8880  1710  2F1B               	goto	l2768
  8881                           
  8882                           ;nrf24l01.c: 40: rfSetup.RF_PWR++;
  8883  1711  0C26               	rrf	nrf24l01ChangeTXPower@rfSetup,w
  8884  1712  3903               	andlw	3
  8885  1713  00A5               	movwf	??_nrf24l01ChangeTXPower
  8886  1714  0AA5               	incf	??_nrf24l01ChangeTXPower,f
  8887  1715  0DA5               	rlf	??_nrf24l01ChangeTXPower,f
  8888  1716  0826               	movf	nrf24l01ChangeTXPower@rfSetup,w
  8889  1717  0625               	xorwf	??_nrf24l01ChangeTXPower,w
  8890  1718  39F9               	andlw	-7
  8891  1719  0625               	xorwf	??_nrf24l01ChangeTXPower,w
  8892  171A  00A6               	movwf	nrf24l01ChangeTXPower@rfSetup
  8893  171B                     l2768:	
  8894                           
  8895                           ;nrf24l01.c: 41: };nrf24l01.c: 42: };nrf24l01.c: 44: if (addPower < 0){
  8896  171B  0020               	movlb	0	; select bank0
  8897  171C  1FA4               	btfss	nrf24l01ChangeTXPower@addPower+1,7
  8898  171D  2F2D               	goto	l2774
  8899                           
  8900                           ;nrf24l01.c: 45: if (rfSetup.RF_PWR > 0){
  8901  171E  0C26               	rrf	nrf24l01ChangeTXPower@rfSetup,w
  8902  171F  3903               	andlw	3
  8903  1720  3A00               	xorlw	0
  8904  1721  1903               	skipnz
  8905  1722  2F2D               	goto	l2774
  8906                           
  8907                           ;nrf24l01.c: 46: rfSetup.RF_PWR--;
  8908  1723  0C26               	rrf	nrf24l01ChangeTXPower@rfSetup,w
  8909  1724  3903               	andlw	3
  8910  1725  00A5               	movwf	??_nrf24l01ChangeTXPower
  8911  1726  03A5               	decf	??_nrf24l01ChangeTXPower,f
  8912  1727  0DA5               	rlf	??_nrf24l01ChangeTXPower,f
  8913  1728  0826               	movf	nrf24l01ChangeTXPower@rfSetup,w
  8914  1729  0625               	xorwf	??_nrf24l01ChangeTXPower,w
  8915  172A  39F9               	andlw	-7
  8916  172B  0625               	xorwf	??_nrf24l01ChangeTXPower,w
  8917  172C  00A6               	movwf	nrf24l01ChangeTXPower@rfSetup
  8918  172D                     l2774:	
  8919                           
  8920                           ;nrf24l01.c: 47: };nrf24l01.c: 48: };nrf24l01.c: 50: nrf24l01Send((unsigned) 0b00100000 
      +                          | (unsigned) 0x06, rfSetup.byte);
  8921  172D  0826               	movf	nrf24l01ChangeTXPower@rfSetup,w
  8922  172E  00A5               	movwf	??_nrf24l01ChangeTXPower
  8923  172F  0825               	movf	??_nrf24l01ChangeTXPower,w
  8924  1730  00A0               	movwf	nrf24l01Send@data
  8925  1731  3026               	movlw	38
  8926  1732  3194  2429         	fcall	_nrf24l01Send
  8927  1734  0008               	return
  8928  1735                     __end_of_nrf24l01ChangeTXPower:	
  8929                           
  8930                           	psect	text36
  8931  1429                     __ptext36:	
  8932 ;; *************** function _nrf24l01Send *****************
  8933 ;; Defined at:
  8934 ;;		line 9 in file "nrf24l01.c"
  8935 ;; Parameters:    Size  Location     Type
  8936 ;;  command         1    wreg     unsigned char 
  8937 ;;  data            1    0[BANK0 ] unsigned char 
  8938 ;; Auto vars:     Size  Location     Type
  8939 ;;  command         1    2[BANK0 ] unsigned char 
  8940 ;; Return value:  Size  Location     Type
  8941 ;;                  1    wreg      unsigned char 
  8942 ;; Registers used:
  8943 ;;		wreg, status,2, status,0, pclath, cstack
  8944 ;; Tracked objects:
  8945 ;;		On entry : 0/0
  8946 ;;		On exit  : 0/0
  8947 ;;		Unchanged: 0/0
  8948 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8949 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8950 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8951 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8952 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8953 ;;Total ram usage:        3 bytes
  8954 ;; Hardware stack levels used:    1
  8955 ;; Hardware stack levels required when called:    9
  8956 ;; This function calls:
  8957 ;;		_enableInterrupts
  8958 ;;		_nrf24l01SPIEnd
  8959 ;;		_nrf24l01SPISend
  8960 ;;		_nrf24l01SPIStart
  8961 ;; This function is called by:
  8962 ;;		_loop
  8963 ;;		_nrf24l01ChangeTXPower
  8964 ;;		_nrf24l01SetRXMode
  8965 ;;		_nrf24l01SetRXPipe
  8966 ;;		_nrf24l01InitRegisters
  8967 ;; This function uses a non-reentrant model
  8968 ;;
  8969                           
  8970                           
  8971                           ;psect for function _nrf24l01Send
  8972  1429                     _nrf24l01Send:	
  8973                           
  8974                           ;incstack = 0
  8975                           ; Regs used in _nrf24l01Send: [wreg+status,2+status,0+pclath+cstack]
  8976                           ;nrf24l01Send@command stored from wreg
  8977  1429  0020               	movlb	0	; select bank0
  8978  142A  00A2               	movwf	nrf24l01Send@command
  8979                           
  8980                           ;nrf24l01.c: 12: enableInterrupts(0);
  8981  142B  3000               	movlw	0
  8982  142C  3192  2267  3194   	fcall	_enableInterrupts
  8983                           
  8984                           ;nrf24l01.c: 15: nrf24l01SPIStart();
  8985  142F  3192  226F  3194   	fcall	_nrf24l01SPIStart
  8986                           
  8987                           ;nrf24l01.c: 18: nrf24l01SPISend(command);
  8988  1432  0020               	movlb	0	; select bank0
  8989  1433  0822               	movf	nrf24l01Send@command,w
  8990  1434  3192  2280  3194   	fcall	_nrf24l01SPISend
  8991                           
  8992                           ;nrf24l01.c: 21: data = nrf24l01SPISend(data);
  8993  1437  0020               	movlb	0	; select bank0
  8994  1438  0820               	movf	nrf24l01Send@data,w
  8995  1439  3192  2280  3194   	fcall	_nrf24l01SPISend
  8996  143C  0020               	movlb	0	; select bank0
  8997  143D  00A1               	movwf	??_nrf24l01Send
  8998  143E  0821               	movf	??_nrf24l01Send,w
  8999  143F  00A0               	movwf	nrf24l01Send@data
  9000                           
  9001                           ;nrf24l01.c: 24: nrf24l01SPIEnd();
  9002  1440  3192  2260  3194   	fcall	_nrf24l01SPIEnd
  9003                           
  9004                           ;nrf24l01.c: 27: enableInterrupts(1);
  9005  1443  3001               	movlw	1
  9006  1444  3192  2267         	fcall	_enableInterrupts
  9007                           
  9008                           ;nrf24l01.c: 29: return data;
  9009  1446  0020               	movlb	0	; select bank0
  9010  1447  0820               	movf	nrf24l01Send@data,w
  9011  1448  0008               	return
  9012  1449                     __end_of_nrf24l01Send:	
  9013                           
  9014                           	psect	text37
  9015  07FE                     __ptext37:	
  9016 ;; *************** function _nrf24l01GetRXPacket *****************
  9017 ;; Defined at:
  9018 ;;		line 131 in file "nrf24l01.c"
  9019 ;; Parameters:    Size  Location     Type
  9020 ;;		None
  9021 ;; Auto vars:     Size  Location     Type
  9022 ;;		None
  9023 ;; Return value:  Size  Location     Type
  9024 ;;                  1    wreg      PTR struct .
  9025 ;; Registers used:
  9026 ;;		wreg
  9027 ;; Tracked objects:
  9028 ;;		On entry : 0/0
  9029 ;;		On exit  : 0/0
  9030 ;;		Unchanged: 0/0
  9031 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9032 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9033 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9034 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9035 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9036 ;;Total ram usage:        0 bytes
  9037 ;; Hardware stack levels used:    1
  9038 ;; Hardware stack levels required when called:    7
  9039 ;; This function calls:
  9040 ;;		Nothing
  9041 ;; This function is called by:
  9042 ;;		_checkRxData
  9043 ;;		_checkTXPower
  9044 ;; This function uses a non-reentrant model
  9045 ;;
  9046                           
  9047                           
  9048                           ;psect for function _nrf24l01GetRXPacket
  9049  07FE                     _nrf24l01GetRXPacket:	
  9050                           
  9051                           ;nrf24l01.c: 132: return &RXPacket;
  9052                           
  9053                           ;incstack = 0
  9054                           ; Regs used in _nrf24l01GetRXPacket: [wreg]
  9055  07FE  3020               	movlw	(low (_RXPacket| (0+512)))& (0+255)
  9056  07FF  0008               	return
  9057  0800                     __end_of_nrf24l01GetRXPacket:	
  9058                           
  9059                           	psect	text38
  9060  12C1                     __ptext38:	
  9061 ;; *************** function _atof *****************
  9062 ;; Defined at:
  9063 ;;		line 200 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\atof.c"
  9064 ;; Parameters:    Size  Location     Type
  9065 ;;  s               1    wreg     PTR const unsigned char 
  9066 ;;		 -> checkRxData@value(32), 
  9067 ;; Auto vars:     Size  Location     Type
  9068 ;;  s               1   78[BANK0 ] PTR const unsigned char 
  9069 ;;		 -> checkRxData@value(32), 
  9070 ;; Return value:  Size  Location     Type
  9071 ;;                  3    8[BANK1 ] PTR const unsigned char 
  9072 ;; Registers used:
  9073 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9074 ;; Tracked objects:
  9075 ;;		On entry : 0/0
  9076 ;;		On exit  : 0/0
  9077 ;;		Unchanged: 0/0
  9078 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9079 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  9080 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9081 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9082 ;;      Totals:         0       1       4       0       0       0       0       0       0       0       0       0       
      +0       0
  9083 ;;Total ram usage:        5 bytes
  9084 ;; Hardware stack levels used:    1
  9085 ;; Hardware stack levels required when called:   10
  9086 ;; This function calls:
  9087 ;;		_strtod
  9088 ;; This function is called by:
  9089 ;;		_checkRxData
  9090 ;; This function uses a non-reentrant model
  9091 ;;
  9092                           
  9093                           
  9094                           ;psect for function _atof
  9095  12C1                     _atof:	
  9096                           
  9097                           ;incstack = 0
  9098                           ; Regs used in _atof: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9099                           ;atof@s stored from wreg
  9100  12C1  0020               	movlb	0	; select bank0
  9101  12C2  00EE               	movwf	atof@s
  9102  12C3  01E7               	clrf	strtod@res
  9103  12C4  086E               	movf	atof@s,w
  9104  12C5  3180  202A         	fcall	_strtod
  9105  12C7  0020               	movlb	0	; select bank0
  9106  12C8  0867               	movf	?_strtod,w
  9107  12C9  0021               	movlb	1	; select bank1
  9108  12CA  00A8               	movwf	?_atof^(0+128)
  9109  12CB  0020               	movlb	0	; select bank0
  9110  12CC  0868               	movf	?_strtod+1,w
  9111  12CD  0021               	movlb	1	; select bank1
  9112  12CE  00A9               	movwf	(?_atof+1)^(0+128)
  9113  12CF  0020               	movlb	0	; select bank0
  9114  12D0  0869               	movf	?_strtod+2,w
  9115  12D1  0021               	movlb	1	; select bank1
  9116  12D2  00AA               	movwf	(?_atof+2)^(0+128)
  9117  12D3  0008               	return
  9118  12D4                     __end_of_atof:	
  9119                           
  9120                           	psect	text39
  9121  002A                     __ptext39:	
  9122 ;; *************** function _strtod *****************
  9123 ;; Defined at:
  9124 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\atof.c"
  9125 ;; Parameters:    Size  Location     Type
  9126 ;;  s               1    wreg     PTR const unsigned char 
  9127 ;;		 -> checkRxData@value(32), 
  9128 ;;  res             1   71[BANK0 ] PTR PTR const unsigned c
  9129 ;;		 -> NULL(0), 
  9130 ;; Auto vars:     Size  Location     Type
  9131 ;;  s               1    7[BANK1 ] PTR const unsigned char 
  9132 ;;		 -> checkRxData@value(32), 
  9133 ;;  _u              4    3[BANK1 ] struct .
  9134 ;;  expon           1    2[BANK1 ] char 
  9135 ;;  flags           1    1[BANK1 ] unsigned char 
  9136 ;;  eexp            1    0[BANK1 ] char 
  9137 ;; Return value:  Size  Location     Type
  9138 ;;                  3   71[BANK0 ] char 
  9139 ;; Registers used:
  9140 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9141 ;; Tracked objects:
  9142 ;;		On entry : 0/0
  9143 ;;		On exit  : 0/0
  9144 ;;		Unchanged: 0/0
  9145 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9146 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9147 ;;      Locals:         0       0       8       0       0       0       0       0       0       0       0       0       
      +0       0
  9148 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9149 ;;      Totals:         0       7       8       0       0       0       0       0       0       0       0       0       
      +0       0
  9150 ;;Total ram usage:       15 bytes
  9151 ;; Hardware stack levels used:    1
  9152 ;; Hardware stack levels required when called:    9
  9153 ;; This function calls:
  9154 ;;		___altoft
  9155 ;;		___bmul
  9156 ;;		___ftdiv
  9157 ;;		___ftge
  9158 ;;		___ftmul
  9159 ;;		___ftneg
  9160 ;;		___lmul
  9161 ;;		_isdigit
  9162 ;;		_isspace
  9163 ;; This function is called by:
  9164 ;;		_atof
  9165 ;; This function uses a non-reentrant model
  9166 ;;
  9167                           
  9168                           
  9169                           ;psect for function _strtod
  9170  002A                     _strtod:	
  9171                           
  9172                           ;incstack = 0
  9173                           ; Regs used in _strtod: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9174                           ;strtod@s stored from wreg
  9175  002A  0021               	movlb	1	; select bank1
  9176  002B  00A7               	movwf	strtod@s^(0+128)
  9177  002C  0020               	movlb	0	; select bank0
  9178  002D  0867               	movf	strtod@res,w
  9179  002E  1903               	btfsc	3,2
  9180  002F  2839               	goto	l3352
  9181  0030  0021               	movlb	1	; select bank1
  9182  0031  0827               	movf	strtod@s^(0+128),w
  9183  0032  0020               	movlb	0	; select bank0
  9184  0033  00EA               	movwf	??_strtod
  9185  0034  0867               	movf	strtod@res,w
  9186  0035  0086               	movwf	6
  9187  0036  0187               	clrf	7
  9188  0037  086A               	movf	??_strtod,w
  9189  0038  0081               	movwf	1
  9190  0039                     l3352:	
  9191  0039  0021               	movlb	1	; select bank1
  9192  003A  0827               	movf	strtod@s^(0+128),w
  9193  003B  0086               	movwf	6
  9194  003C  3001               	movlw	1	; select bank2/3
  9195  003D  0087               	movwf	7
  9196  003E  0801               	movf	1,w
  9197  003F  00A0               	movwf	strtod@eexp^(0+128)
  9198  0040  3192  22AE  3180   	fcall	_isspace
  9199  0043  1C03               	btfss	3,0
  9200  0044  284C               	goto	l3354
  9201  0045  3001               	movlw	1
  9202  0046  0020               	movlb	0	; select bank0
  9203  0047  00EA               	movwf	??_strtod
  9204  0048  086A               	movf	??_strtod,w
  9205  0049  0021               	movlb	1	; select bank1
  9206  004A  07A7               	addwf	strtod@s^(0+128),f
  9207  004B  2839               	goto	l3352
  9208  004C                     l3354:	
  9209  004C  0021               	movlb	1	; select bank1
  9210  004D  01A1               	clrf	strtod@flags^(0+128)
  9211  004E  302D               	movlw	45
  9212  004F  0620               	xorwf	strtod@eexp^(0+128),w
  9213  0050  1D03               	btfss	3,2
  9214  0051  2855               	goto	l3362
  9215  0052  01A1               	clrf	strtod@flags^(0+128)
  9216  0053  0AA1               	incf	strtod@flags^(0+128),f
  9217  0054  2859               	goto	l3364
  9218  0055                     l3362:	
  9219  0055  302B               	movlw	43
  9220  0056  0620               	xorwf	strtod@eexp^(0+128),w
  9221  0057  1D03               	btfss	3,2
  9222  0058  285F               	goto	l3366
  9223  0059                     l3364:	
  9224  0059  3001               	movlw	1
  9225  005A  0020               	movlb	0	; select bank0
  9226  005B  00EA               	movwf	??_strtod
  9227  005C  086A               	movf	??_strtod,w
  9228  005D  0021               	movlb	1	; select bank1
  9229  005E  07A7               	addwf	strtod@s^(0+128),f
  9230  005F                     l3366:	
  9231  005F  01A0               	clrf	strtod@eexp^(0+128)
  9232  0060  3000               	movlw	0
  9233  0061  00A6               	movwf	(strtod@_u+3)^(0+128)
  9234  0062  3000               	movlw	0
  9235  0063  00A5               	movwf	(strtod@_u+2)^(0+128)
  9236  0064  3000               	movlw	0
  9237  0065  00A4               	movwf	(strtod@_u+1)^(0+128)
  9238  0066  3000               	movlw	0
  9239  0067  00A3               	movwf	strtod@_u^(0+128)
  9240  0068  01A2               	clrf	strtod@expon^(0+128)
  9241  0069  2879               	goto	l3372
  9242  006A                     l3374:	
  9243  006A  0827               	movf	strtod@s^(0+128),w
  9244  006B  0086               	movwf	6
  9245  006C  3001               	movlw	1	; select bank2/3
  9246  006D  0087               	movwf	7
  9247  006E  302E               	movlw	46
  9248  006F  0601               	xorwf	1,w
  9249  0070  1D03               	btfss	3,2
  9250  0071  287B               	goto	l3380
  9251  0072  1621               	bsf	strtod@flags^(0+128),4
  9252  0073                     L3:	
  9253  0073  3001               	movlw	1
  9254  0074  0020               	movlb	0	; select bank0
  9255  0075  00EA               	movwf	??_strtod
  9256  0076  086A               	movf	??_strtod,w
  9257  0077  0021               	movlb	1	; select bank1
  9258  0078  07A7               	addwf	strtod@s^(0+128),f
  9259  0079                     l3372:	
  9260  0079  1E21               	btfss	strtod@flags^(0+128),4
  9261  007A  286A               	goto	l3374
  9262  007B                     l3380:	
  9263  007B  0827               	movf	strtod@s^(0+128),w
  9264  007C  0086               	movwf	6
  9265  007D  3001               	movlw	1	; select bank2/3
  9266  007E  0087               	movwf	7
  9267  007F  0801               	movf	1,w
  9268  0080  3192  228D  3180   	fcall	_isdigit
  9269  0083  1C03               	btfss	3,0
  9270  0084  28E9               	goto	l3396
  9271  0085  0021               	movlb	1	; select bank1
  9272  0086  14A1               	bsf	strtod@flags^(0+128),1
  9273  0087  3008               	movlw	8
  9274  0088  0620               	xorwf	strtod@eexp^(0+128),w
  9275  0089  1903               	btfsc	3,2
  9276  008A  28E0               	goto	l907
  9277  008B  1E21               	btfss	strtod@flags^(0+128),4
  9278  008C  2893               	goto	l908
  9279  008D  30FF               	movlw	255
  9280  008E  0020               	movlb	0	; select bank0
  9281  008F  00EA               	movwf	??_strtod
  9282  0090  086A               	movf	??_strtod,w
  9283  0091  0021               	movlb	1	; select bank1
  9284  0092  07A2               	addwf	strtod@expon^(0+128),f
  9285  0093                     l908:	
  9286  0093  3001               	movlw	1
  9287  0094  0020               	movlb	0	; select bank0
  9288  0095  00EA               	movwf	??_strtod
  9289  0096  086A               	movf	??_strtod,w
  9290  0097  0021               	movlb	1	; select bank1
  9291  0098  07A0               	addwf	strtod@eexp^(0+128),f
  9292  0099  3000               	movlw	0
  9293  009A  0020               	movlb	0	; select bank0
  9294  009B  00A3               	movwf	___lmul@multiplier+3
  9295  009C  3000               	movlw	0
  9296  009D  00A2               	movwf	___lmul@multiplier+2
  9297  009E  3000               	movlw	0
  9298  009F  00A1               	movwf	___lmul@multiplier+1
  9299  00A0  300A               	movlw	10
  9300  00A1  00A0               	movwf	___lmul@multiplier
  9301  00A2  0021               	movlb	1	; select bank1
  9302  00A3  0826               	movf	(strtod@_u+3)^(0+128),w
  9303  00A4  0020               	movlb	0	; select bank0
  9304  00A5  00A7               	movwf	___lmul@multiplicand+3
  9305  00A6  0021               	movlb	1	; select bank1
  9306  00A7  0825               	movf	(strtod@_u+2)^(0+128),w
  9307  00A8  0020               	movlb	0	; select bank0
  9308  00A9  00A6               	movwf	___lmul@multiplicand+2
  9309  00AA  0021               	movlb	1	; select bank1
  9310  00AB  0824               	movf	(strtod@_u+1)^(0+128),w
  9311  00AC  0020               	movlb	0	; select bank0
  9312  00AD  00A5               	movwf	___lmul@multiplicand+1
  9313  00AE  0021               	movlb	1	; select bank1
  9314  00AF  0823               	movf	strtod@_u^(0+128),w
  9315  00B0  0020               	movlb	0	; select bank0
  9316  00B1  00A4               	movwf	___lmul@multiplicand
  9317  00B2  3195  25AE  3180   	fcall	___lmul
  9318  00B5  0020               	movlb	0	; select bank0
  9319  00B6  0823               	movf	?___lmul+3,w
  9320  00B7  0021               	movlb	1	; select bank1
  9321  00B8  00A6               	movwf	(strtod@_u+3)^(0+128)
  9322  00B9  0020               	movlb	0	; select bank0
  9323  00BA  0822               	movf	?___lmul+2,w
  9324  00BB  0021               	movlb	1	; select bank1
  9325  00BC  00A5               	movwf	(strtod@_u+2)^(0+128)
  9326  00BD  0020               	movlb	0	; select bank0
  9327  00BE  0821               	movf	?___lmul+1,w
  9328  00BF  0021               	movlb	1	; select bank1
  9329  00C0  00A4               	movwf	(strtod@_u+1)^(0+128)
  9330  00C1  0020               	movlb	0	; select bank0
  9331  00C2  0820               	movf	?___lmul,w
  9332  00C3  0021               	movlb	1	; select bank1
  9333  00C4  00A3               	movwf	strtod@_u^(0+128)
  9334  00C5  0827               	movf	strtod@s^(0+128),w
  9335  00C6  0086               	movwf	6
  9336  00C7  3001               	movlw	1	; select bank2/3
  9337  00C8  0087               	movwf	7
  9338  00C9  0801               	movf	1,w
  9339  00CA  3ED0               	addlw	208
  9340  00CB  0020               	movlb	0	; select bank0
  9341  00CC  00EA               	movwf	??_strtod
  9342  00CD  01EB               	clrf	??_strtod+1
  9343  00CE  01EC               	clrf	??_strtod+2
  9344  00CF  01ED               	clrf	??_strtod+3
  9345  00D0  086A               	movf	??_strtod,w
  9346  00D1  0021               	movlb	1	; select bank1
  9347  00D2  07A3               	addwf	strtod@_u^(0+128),f
  9348  00D3  0020               	movlb	0	; select bank0
  9349  00D4  086B               	movf	??_strtod+1,w
  9350  00D5  0021               	movlb	1	; select bank1
  9351  00D6  3DA4               	addwfc	(strtod@_u+1)^(0+128),f
  9352  00D7  0020               	movlb	0	; select bank0
  9353  00D8  086C               	movf	??_strtod+2,w
  9354  00D9  0021               	movlb	1	; select bank1
  9355  00DA  3DA5               	addwfc	(strtod@_u+2)^(0+128),f
  9356  00DB  0020               	movlb	0	; select bank0
  9357  00DC  086D               	movf	??_strtod+3,w
  9358  00DD  0021               	movlb	1	; select bank1
  9359  00DE  3DA6               	addwfc	(strtod@_u+3)^(0+128),f
  9360  00DF  2873               	goto	L3
  9361  00E0                     l907:	
  9362  00E0  1A21               	btfsc	strtod@flags^(0+128),4
  9363  00E1  2873               	goto	L3
  9364  00E2  3001               	movlw	1
  9365  00E3  0020               	movlb	0	; select bank0
  9366  00E4  00EA               	movwf	??_strtod
  9367  00E5  086A               	movf	??_strtod,w
  9368  00E6  0021               	movlb	1	; select bank1
  9369  00E7  07A2               	addwf	strtod@expon^(0+128),f
  9370  00E8  2873               	goto	L3
  9371  00E9                     l3396:	
  9372  00E9  0021               	movlb	1	; select bank1
  9373  00EA  01A0               	clrf	strtod@eexp^(0+128)
  9374  00EB  0827               	movf	strtod@s^(0+128),w
  9375  00EC  0086               	movwf	6
  9376  00ED  3001               	movlw	1	; select bank2/3
  9377  00EE  0087               	movwf	7
  9378  00EF  3065               	movlw	101
  9379  00F0  0601               	xorwf	1,w
  9380  00F1  1903               	btfsc	3,2
  9381  00F2  28FB               	goto	l3402
  9382  00F3  0827               	movf	strtod@s^(0+128),w
  9383  00F4  0086               	movwf	6
  9384  00F5  3001               	movlw	1	; select bank2/3
  9385  00F6  0087               	movwf	7
  9386  00F7  3045               	movlw	69
  9387  00F8  0601               	xorwf	1,w
  9388  00F9  1D03               	btfss	3,2
  9389  00FA  2988               	goto	l3436
  9390  00FB                     l3402:	
  9391  00FB  3001               	movlw	1
  9392  00FC  0020               	movlb	0	; select bank0
  9393  00FD  00EA               	movwf	??_strtod
  9394  00FE  086A               	movf	??_strtod,w
  9395  00FF  0021               	movlb	1	; select bank1
  9396  0100  07A7               	addwf	strtod@s^(0+128),f
  9397  0101  0827               	movf	strtod@s^(0+128),w
  9398  0102  0086               	movwf	6
  9399  0103  3001               	movlw	1	; select bank2/3
  9400  0104  0087               	movwf	7
  9401  0105  302D               	movlw	45
  9402  0106  0601               	xorwf	1,w
  9403  0107  1D03               	btfss	3,2
  9404  0108  290B               	goto	l3408
  9405  0109  15A1               	bsf	strtod@flags^(0+128),3
  9406  010A  2913               	goto	l3412
  9407  010B                     l3408:	
  9408  010B  0827               	movf	strtod@s^(0+128),w
  9409  010C  0086               	movwf	6
  9410  010D  3001               	movlw	1	; select bank2/3
  9411  010E  0087               	movwf	7
  9412  010F  302B               	movlw	43
  9413  0110  0601               	xorwf	1,w
  9414  0111  1D03               	btfss	3,2
  9415  0112  2919               	goto	l3414
  9416  0113                     l3412:	
  9417  0113  3001               	movlw	1
  9418  0114  0020               	movlb	0	; select bank0
  9419  0115  00EA               	movwf	??_strtod
  9420  0116  086A               	movf	??_strtod,w
  9421  0117  0021               	movlb	1	; select bank1
  9422  0118  07A7               	addwf	strtod@s^(0+128),f
  9423  0119                     l3414:	
  9424  0119  0827               	movf	strtod@s^(0+128),w
  9425  011A  0086               	movwf	6
  9426  011B  3001               	movlw	1	; select bank2/3
  9427  011C  0087               	movwf	7
  9428  011D  3030               	movlw	48
  9429  011E  0601               	xorwf	1,w
  9430  011F  1903               	btfsc	3,2
  9431  0120  2913               	goto	l3412
  9432  0121  0827               	movf	strtod@s^(0+128),w
  9433  0122  0086               	movwf	6
  9434  0123  3001               	movlw	1	; select bank2/3
  9435  0124  0087               	movwf	7
  9436  0125  0801               	movf	1,w
  9437  0126  3192  228D  3180   	fcall	_isdigit
  9438  0129  1C03               	btfss	3,0
  9439  012A  2983               	goto	l3432
  9440  012B  0021               	movlb	1	; select bank1
  9441  012C  0827               	movf	strtod@s^(0+128),w
  9442  012D  0086               	movwf	6
  9443  012E  3001               	movlw	1	; select bank2/3
  9444  012F  0087               	movwf	7
  9445  0130  0801               	movf	1,w
  9446  0131  3ED0               	addlw	208
  9447  0132  0020               	movlb	0	; select bank0
  9448  0133  00EA               	movwf	??_strtod
  9449  0134  086A               	movf	??_strtod,w
  9450  0135  0021               	movlb	1	; select bank1
  9451  0136  00A0               	movwf	strtod@eexp^(0+128)
  9452  0137  3001               	movlw	1
  9453  0138  0020               	movlb	0	; select bank0
  9454  0139  00EA               	movwf	??_strtod
  9455  013A  086A               	movf	??_strtod,w
  9456  013B  0021               	movlb	1	; select bank1
  9457  013C  07A7               	addwf	strtod@s^(0+128),f
  9458  013D  0827               	movf	strtod@s^(0+128),w
  9459  013E  0086               	movwf	6
  9460  013F  3001               	movlw	1	; select bank2/3
  9461  0140  0087               	movwf	7
  9462  0141  0801               	movf	1,w
  9463  0142  3192  228D  3180   	fcall	_isdigit
  9464  0145  1C03               	btfss	3,0
  9465  0146  2983               	goto	l3432
  9466  0147  0021               	movlb	1	; select bank1
  9467  0148  0827               	movf	strtod@s^(0+128),w
  9468  0149  0086               	movwf	6
  9469  014A  3001               	movlw	1	; select bank2/3
  9470  014B  0087               	movwf	7
  9471  014C  300A               	movlw	10
  9472  014D  0020               	movlb	0	; select bank0
  9473  014E  00EA               	movwf	??_strtod
  9474  014F  086A               	movf	??_strtod,w
  9475  0150  00A0               	movwf	___bmul@multiplicand
  9476  0151  0021               	movlb	1	; select bank1
  9477  0152  0820               	movf	strtod@eexp^(0+128),w
  9478  0153  3192  229C  3180   	fcall	___bmul
  9479  0156  0701               	addwf	1,w
  9480  0157  3ED0               	addlw	-48
  9481  0158  0020               	movlb	0	; select bank0
  9482  0159  00EB               	movwf	??_strtod+1
  9483  015A  086B               	movf	??_strtod+1,w
  9484  015B  0021               	movlb	1	; select bank1
  9485  015C  00A0               	movwf	strtod@eexp^(0+128)
  9486  015D  3001               	movlw	1
  9487  015E  0020               	movlb	0	; select bank0
  9488  015F  00EA               	movwf	??_strtod
  9489  0160  086A               	movf	??_strtod,w
  9490  0161  0021               	movlb	1	; select bank1
  9491  0162  07A7               	addwf	strtod@s^(0+128),f
  9492  0163  0827               	movf	strtod@s^(0+128),w
  9493  0164  0086               	movwf	6
  9494  0165  3001               	movlw	1	; select bank2/3
  9495  0166  0087               	movwf	7
  9496  0167  0801               	movf	1,w
  9497  0168  3192  228D  3180   	fcall	_isdigit
  9498  016B  1C03               	btfss	3,0
  9499  016C  2983               	goto	l3432
  9500  016D  0021               	movlb	1	; select bank1
  9501  016E  0827               	movf	strtod@s^(0+128),w
  9502  016F  0086               	movwf	6
  9503  0170  3001               	movlw	1	; select bank2/3
  9504  0171  0087               	movwf	7
  9505  0172  300A               	movlw	10
  9506  0173  0020               	movlb	0	; select bank0
  9507  0174  00EA               	movwf	??_strtod
  9508  0175  086A               	movf	??_strtod,w
  9509  0176  00A0               	movwf	___bmul@multiplicand
  9510  0177  0021               	movlb	1	; select bank1
  9511  0178  0820               	movf	strtod@eexp^(0+128),w
  9512  0179  3192  229C  3180   	fcall	___bmul
  9513  017C  0701               	addwf	1,w
  9514  017D  3ED0               	addlw	-48
  9515  017E  0020               	movlb	0	; select bank0
  9516  017F  00EB               	movwf	??_strtod+1
  9517  0180  086B               	movf	??_strtod+1,w
  9518  0181  0021               	movlb	1	; select bank1
  9519  0182  00A0               	movwf	strtod@eexp^(0+128)
  9520  0183                     l3432:	
  9521  0183  0021               	movlb	1	; select bank1
  9522  0184  1DA1               	btfss	strtod@flags^(0+128),3
  9523  0185  2988               	goto	l3436
  9524  0186  09A0               	comf	strtod@eexp^(0+128),f
  9525  0187  0AA0               	incf	strtod@eexp^(0+128),f
  9526  0188                     l3436:	
  9527  0188  0820               	movf	strtod@eexp^(0+128),w
  9528  0189  0020               	movlb	0	; select bank0
  9529  018A  00EA               	movwf	??_strtod
  9530  018B  086A               	movf	??_strtod,w
  9531  018C  0021               	movlb	1	; select bank1
  9532  018D  07A2               	addwf	strtod@expon^(0+128),f
  9533  018E  0020               	movlb	0	; select bank0
  9534  018F  0867               	movf	strtod@res,w
  9535  0190  1903               	btfsc	3,2
  9536  0191  299D               	goto	l3444
  9537  0192  0021               	movlb	1	; select bank1
  9538  0193  1CA1               	btfss	strtod@flags^(0+128),1
  9539  0194  299D               	goto	l3444
  9540  0195  0827               	movf	strtod@s^(0+128),w
  9541  0196  0020               	movlb	0	; select bank0
  9542  0197  00EA               	movwf	??_strtod
  9543  0198  0867               	movf	strtod@res,w
  9544  0199  0086               	movwf	6
  9545  019A  0187               	clrf	7
  9546  019B  086A               	movf	??_strtod,w
  9547  019C  0081               	movwf	1
  9548  019D                     l3444:	
  9549  019D  0021               	movlb	1	; select bank1
  9550  019E  0826               	movf	(strtod@_u+3)^(0+128),w
  9551  019F  0020               	movlb	0	; select bank0
  9552  01A0  00AB               	movwf	___altoft@c+3
  9553  01A1  0021               	movlb	1	; select bank1
  9554  01A2  0825               	movf	(strtod@_u+2)^(0+128),w
  9555  01A3  0020               	movlb	0	; select bank0
  9556  01A4  00AA               	movwf	___altoft@c+2
  9557  01A5  0021               	movlb	1	; select bank1
  9558  01A6  0824               	movf	(strtod@_u+1)^(0+128),w
  9559  01A7  0020               	movlb	0	; select bank0
  9560  01A8  00A9               	movwf	___altoft@c+1
  9561  01A9  0021               	movlb	1	; select bank1
  9562  01AA  0823               	movf	strtod@_u^(0+128),w
  9563  01AB  0020               	movlb	0	; select bank0
  9564  01AC  00A8               	movwf	___altoft@c
  9565  01AD  3196  267A  3180   	fcall	___altoft
  9566  01B0  0020               	movlb	0	; select bank0
  9567  01B1  0828               	movf	?___altoft,w
  9568  01B2  0021               	movlb	1	; select bank1
  9569  01B3  00A3               	movwf	strtod@_u^(0+128)
  9570  01B4  0020               	movlb	0	; select bank0
  9571  01B5  0829               	movf	?___altoft+1,w
  9572  01B6  0021               	movlb	1	; select bank1
  9573  01B7  00A4               	movwf	(strtod@_u+1)^(0+128)
  9574  01B8  0020               	movlb	0	; select bank0
  9575  01B9  082A               	movf	?___altoft+2,w
  9576  01BA  0021               	movlb	1	; select bank1
  9577  01BB  00A5               	movwf	(strtod@_u+2)^(0+128)
  9578  01BC  0825               	movf	(strtod@_u+2)^(0+128),w
  9579  01BD  0424               	iorwf	(strtod@_u+1)^(0+128),w
  9580  01BE  0423               	iorwf	strtod@_u^(0+128),w
  9581  01BF  1D03               	skipz
  9582  01C0  29C9               	goto	l925
  9583  01C1  3000               	movlw	0
  9584  01C2  0020               	movlb	0	; select bank0
  9585  01C3  00E7               	movwf	?_strtod
  9586  01C4  3000               	movlw	0
  9587  01C5  00E8               	movwf	?_strtod+1
  9588  01C6  3000               	movlw	0
  9589  01C7  00E9               	movwf	?_strtod+2
  9590  01C8  0008               	return
  9591  01C9                     l925:	
  9592  01C9  1FA2               	btfss	strtod@expon^(0+128),7
  9593  01CA  2A4F               	goto	l3478
  9594  01CB  09A2               	comf	strtod@expon^(0+128),f
  9595  01CC  0AA2               	incf	strtod@expon^(0+128),f
  9596  01CD                     l3458:	
  9597  01CD  0822               	movf	strtod@expon^(0+128),w
  9598  01CE  3A80               	xorlw	128
  9599  01CF  3E76               	addlw	-138
  9600  01D0  1C03               	btfss	3,0
  9601  01D1  2A23               	goto	l3464
  9602  01D2  3003               	movlw	3
  9603  01D3  0020               	movlb	0	; select bank0
  9604  01D4  00BB               	movwf	___ftdiv@f2
  9605  01D5  3015               	movlw	21
  9606  01D6  00BC               	movwf	___ftdiv@f2+1
  9607  01D7  3050               	movlw	80
  9608  01D8  00BD               	movwf	___ftdiv@f2+2
  9609  01D9  0021               	movlb	1	; select bank1
  9610  01DA  0823               	movf	strtod@_u^(0+128),w
  9611  01DB  0020               	movlb	0	; select bank0
  9612  01DC  00BE               	movwf	___ftdiv@f1
  9613  01DD  0021               	movlb	1	; select bank1
  9614  01DE  0824               	movf	(strtod@_u+1)^(0+128),w
  9615  01DF  0020               	movlb	0	; select bank0
  9616  01E0  00BF               	movwf	___ftdiv@f1+1
  9617  01E1  0021               	movlb	1	; select bank1
  9618  01E2  0825               	movf	(strtod@_u+2)^(0+128),w
  9619  01E3  0020               	movlb	0	; select bank0
  9620  01E4  00C0               	movwf	___ftdiv@f1+2
  9621  01E5  318B  23F3  3180   	fcall	___ftdiv
  9622  01E8  0020               	movlb	0	; select bank0
  9623  01E9  083B               	movf	?___ftdiv,w
  9624  01EA  0021               	movlb	1	; select bank1
  9625  01EB  00A3               	movwf	strtod@_u^(0+128)
  9626  01EC  0020               	movlb	0	; select bank0
  9627  01ED  083C               	movf	?___ftdiv+1,w
  9628  01EE  0021               	movlb	1	; select bank1
  9629  01EF  00A4               	movwf	(strtod@_u+1)^(0+128)
  9630  01F0  0020               	movlb	0	; select bank0
  9631  01F1  083D               	movf	?___ftdiv+2,w
  9632  01F2  0021               	movlb	1	; select bank1
  9633  01F3  00A5               	movwf	(strtod@_u+2)^(0+128)
  9634  01F4  30F6               	movlw	246
  9635  01F5  0020               	movlb	0	; select bank0
  9636  01F6  00EA               	movwf	??_strtod
  9637  01F7  086A               	movf	??_strtod,w
  9638  01F8  0021               	movlb	1	; select bank1
  9639  01F9  07A2               	addwf	strtod@expon^(0+128),f
  9640  01FA  29CD               	goto	l3458
  9641  01FB                     l3460:	
  9642  01FB  3000               	movlw	0
  9643  01FC  0020               	movlb	0	; select bank0
  9644  01FD  00BB               	movwf	___ftdiv@f2
  9645  01FE  3020               	movlw	32
  9646  01FF  00BC               	movwf	___ftdiv@f2+1
  9647  0200  3041               	movlw	65
  9648  0201  00BD               	movwf	___ftdiv@f2+2
  9649  0202  0021               	movlb	1	; select bank1
  9650  0203  0823               	movf	strtod@_u^(0+128),w
  9651  0204  0020               	movlb	0	; select bank0
  9652  0205  00BE               	movwf	___ftdiv@f1
  9653  0206  0021               	movlb	1	; select bank1
  9654  0207  0824               	movf	(strtod@_u+1)^(0+128),w
  9655  0208  0020               	movlb	0	; select bank0
  9656  0209  00BF               	movwf	___ftdiv@f1+1
  9657  020A  0021               	movlb	1	; select bank1
  9658  020B  0825               	movf	(strtod@_u+2)^(0+128),w
  9659  020C  0020               	movlb	0	; select bank0
  9660  020D  00C0               	movwf	___ftdiv@f1+2
  9661  020E  318B  23F3  3180   	fcall	___ftdiv
  9662  0211  0020               	movlb	0	; select bank0
  9663  0212  083B               	movf	?___ftdiv,w
  9664  0213  0021               	movlb	1	; select bank1
  9665  0214  00A3               	movwf	strtod@_u^(0+128)
  9666  0215  0020               	movlb	0	; select bank0
  9667  0216  083C               	movf	?___ftdiv+1,w
  9668  0217  0021               	movlb	1	; select bank1
  9669  0218  00A4               	movwf	(strtod@_u+1)^(0+128)
  9670  0219  0020               	movlb	0	; select bank0
  9671  021A  083D               	movf	?___ftdiv+2,w
  9672  021B  0021               	movlb	1	; select bank1
  9673  021C  00A5               	movwf	(strtod@_u+2)^(0+128)
  9674  021D  30FF               	movlw	255
  9675  021E  0020               	movlb	0	; select bank0
  9676  021F  00EA               	movwf	??_strtod
  9677  0220  086A               	movf	??_strtod,w
  9678  0221  0021               	movlb	1	; select bank1
  9679  0222  07A2               	addwf	strtod@expon^(0+128),f
  9680  0223                     l3464:	
  9681  0223  0822               	movf	strtod@expon^(0+128),w
  9682  0224  1D03               	btfss	3,2
  9683  0225  29FB               	goto	l3460
  9684  0226  0823               	movf	strtod@_u^(0+128),w
  9685  0227  0020               	movlb	0	; select bank0
  9686  0228  00A0               	movwf	___ftge@ff1
  9687  0229  0021               	movlb	1	; select bank1
  9688  022A  0824               	movf	(strtod@_u+1)^(0+128),w
  9689  022B  0020               	movlb	0	; select bank0
  9690  022C  00A1               	movwf	___ftge@ff1+1
  9691  022D  0021               	movlb	1	; select bank1
  9692  022E  0825               	movf	(strtod@_u+2)^(0+128),w
  9693  022F  0020               	movlb	0	; select bank0
  9694  0230  00A2               	movwf	___ftge@ff1+2
  9695  0231  3000               	movlw	0
  9696  0232  00A3               	movwf	___ftge@ff2
  9697  0233  3080               	movlw	128
  9698  0234  00A4               	movwf	___ftge@ff2+1
  9699  0235  3000               	movlw	0
  9700  0236  00A5               	movwf	___ftge@ff2+2
  9701  0237  3196  263E  3180   	fcall	___ftge
  9702  023A  1803               	btfsc	3,0
  9703  023B  2AD9               	goto	l936
  9704  023C  0021               	movlb	1	; select bank1
  9705  023D  1C21               	btfss	strtod@flags^(0+128),0
  9706  023E  2A47               	goto	l3474
  9707  023F  3000               	movlw	0
  9708  0240  0020               	movlb	0	; select bank0
  9709  0241  00E7               	movwf	?_strtod
  9710  0242  3080               	movlw	128
  9711  0243  00E8               	movwf	?_strtod+1
  9712  0244  3080               	movlw	128
  9713  0245  00E9               	movwf	?_strtod+2
  9714  0246  0008               	return
  9715  0247                     l3474:	
  9716  0247  3000               	movlw	0
  9717  0248  0020               	movlb	0	; select bank0
  9718  0249  00E7               	movwf	?_strtod
  9719  024A  3080               	movlw	128
  9720  024B  00E8               	movwf	?_strtod+1
  9721  024C  3000               	movlw	0
  9722  024D  00E9               	movwf	?_strtod+2
  9723  024E  0008               	return
  9724  024F                     l3478:	
  9725  024F  0021               	movlb	1	; select bank1
  9726  0250  0822               	movf	strtod@expon^(0+128),w
  9727  0251  3A80               	xorlw	128
  9728  0252  3E7F               	addlw	-129
  9729  0253  1803               	btfsc	3,0
  9730  0254  2A7E               	goto	l3486
  9731  0255  2AD9               	goto	l936
  9732  0256                     l3482:	
  9733  0256  3003               	movlw	3
  9734  0257  0020               	movlb	0	; select bank0
  9735  0258  00D7               	movwf	___ftmul@f1
  9736  0259  3015               	movlw	21
  9737  025A  00D8               	movwf	___ftmul@f1+1
  9738  025B  3050               	movlw	80
  9739  025C  00D9               	movwf	___ftmul@f1+2
  9740  025D  0021               	movlb	1	; select bank1
  9741  025E  0823               	movf	strtod@_u^(0+128),w
  9742  025F  0020               	movlb	0	; select bank0
  9743  0260  00DA               	movwf	___ftmul@f2
  9744  0261  0021               	movlb	1	; select bank1
  9745  0262  0824               	movf	(strtod@_u+1)^(0+128),w
  9746  0263  0020               	movlb	0	; select bank0
  9747  0264  00DB               	movwf	___ftmul@f2+1
  9748  0265  0021               	movlb	1	; select bank1
  9749  0266  0825               	movf	(strtod@_u+2)^(0+128),w
  9750  0267  0020               	movlb	0	; select bank0
  9751  0268  00DC               	movwf	___ftmul@f2+2
  9752  0269  318C  249C  3180   	fcall	___ftmul
  9753  026C  0020               	movlb	0	; select bank0
  9754  026D  0857               	movf	?___ftmul,w
  9755  026E  0021               	movlb	1	; select bank1
  9756  026F  00A3               	movwf	strtod@_u^(0+128)
  9757  0270  0020               	movlb	0	; select bank0
  9758  0271  0858               	movf	?___ftmul+1,w
  9759  0272  0021               	movlb	1	; select bank1
  9760  0273  00A4               	movwf	(strtod@_u+1)^(0+128)
  9761  0274  0020               	movlb	0	; select bank0
  9762  0275  0859               	movf	?___ftmul+2,w
  9763  0276  0021               	movlb	1	; select bank1
  9764  0277  00A5               	movwf	(strtod@_u+2)^(0+128)
  9765  0278  30F6               	movlw	246
  9766  0279  0020               	movlb	0	; select bank0
  9767  027A  00EA               	movwf	??_strtod
  9768  027B  086A               	movf	??_strtod,w
  9769  027C  0021               	movlb	1	; select bank1
  9770  027D  07A2               	addwf	strtod@expon^(0+128),f
  9771  027E                     l3486:	
  9772  027E  300A               	movlw	10
  9773  027F  0222               	subwf	strtod@expon^(0+128),w
  9774  0280  1C03               	btfss	3,0
  9775  0281  2AAB               	goto	l3492
  9776  0282  2A56               	goto	l3482
  9777  0283                     l3488:	
  9778  0283  3000               	movlw	0
  9779  0284  0020               	movlb	0	; select bank0
  9780  0285  00D7               	movwf	___ftmul@f1
  9781  0286  3020               	movlw	32
  9782  0287  00D8               	movwf	___ftmul@f1+1
  9783  0288  3041               	movlw	65
  9784  0289  00D9               	movwf	___ftmul@f1+2
  9785  028A  0021               	movlb	1	; select bank1
  9786  028B  0823               	movf	strtod@_u^(0+128),w
  9787  028C  0020               	movlb	0	; select bank0
  9788  028D  00DA               	movwf	___ftmul@f2
  9789  028E  0021               	movlb	1	; select bank1
  9790  028F  0824               	movf	(strtod@_u+1)^(0+128),w
  9791  0290  0020               	movlb	0	; select bank0
  9792  0291  00DB               	movwf	___ftmul@f2+1
  9793  0292  0021               	movlb	1	; select bank1
  9794  0293  0825               	movf	(strtod@_u+2)^(0+128),w
  9795  0294  0020               	movlb	0	; select bank0
  9796  0295  00DC               	movwf	___ftmul@f2+2
  9797  0296  318C  249C  3180   	fcall	___ftmul
  9798  0299  0020               	movlb	0	; select bank0
  9799  029A  0857               	movf	?___ftmul,w
  9800  029B  0021               	movlb	1	; select bank1
  9801  029C  00A3               	movwf	strtod@_u^(0+128)
  9802  029D  0020               	movlb	0	; select bank0
  9803  029E  0858               	movf	?___ftmul+1,w
  9804  029F  0021               	movlb	1	; select bank1
  9805  02A0  00A4               	movwf	(strtod@_u+1)^(0+128)
  9806  02A1  0020               	movlb	0	; select bank0
  9807  02A2  0859               	movf	?___ftmul+2,w
  9808  02A3  0021               	movlb	1	; select bank1
  9809  02A4  00A5               	movwf	(strtod@_u+2)^(0+128)
  9810  02A5  30FF               	movlw	255
  9811  02A6  0020               	movlb	0	; select bank0
  9812  02A7  00EA               	movwf	??_strtod
  9813  02A8  086A               	movf	??_strtod,w
  9814  02A9  0021               	movlb	1	; select bank1
  9815  02AA  07A2               	addwf	strtod@expon^(0+128),f
  9816  02AB                     l3492:	
  9817  02AB  0822               	movf	strtod@expon^(0+128),w
  9818  02AC  1D03               	btfss	3,2
  9819  02AD  2A83               	goto	l3488
  9820  02AE  30FF               	movlw	255
  9821  02AF  0020               	movlb	0	; select bank0
  9822  02B0  00A0               	movwf	___ftge@ff1
  9823  02B1  307F               	movlw	127
  9824  02B2  00A1               	movwf	___ftge@ff1+1
  9825  02B3  307F               	movlw	127
  9826  02B4  00A2               	movwf	___ftge@ff1+2
  9827  02B5  0021               	movlb	1	; select bank1
  9828  02B6  0823               	movf	strtod@_u^(0+128),w
  9829  02B7  0020               	movlb	0	; select bank0
  9830  02B8  00A3               	movwf	___ftge@ff2
  9831  02B9  0021               	movlb	1	; select bank1
  9832  02BA  0824               	movf	(strtod@_u+1)^(0+128),w
  9833  02BB  0020               	movlb	0	; select bank0
  9834  02BC  00A4               	movwf	___ftge@ff2+1
  9835  02BD  0021               	movlb	1	; select bank1
  9836  02BE  0825               	movf	(strtod@_u+2)^(0+128),w
  9837  02BF  0020               	movlb	0	; select bank0
  9838  02C0  00A5               	movwf	___ftge@ff2+2
  9839  02C1  3196  263E  3180   	fcall	___ftge
  9840  02C4  1803               	btfsc	3,0
  9841  02C5  2AD9               	goto	l936
  9842  02C6  0021               	movlb	1	; select bank1
  9843  02C7  1C21               	btfss	strtod@flags^(0+128),0
  9844  02C8  2AD1               	goto	l3502
  9845  02C9  3000               	movlw	0
  9846  02CA  0020               	movlb	0	; select bank0
  9847  02CB  00E7               	movwf	?_strtod
  9848  02CC  3080               	movlw	128
  9849  02CD  00E8               	movwf	?_strtod+1
  9850  02CE  3080               	movlw	128
  9851  02CF  00E9               	movwf	?_strtod+2
  9852  02D0  0008               	return
  9853  02D1                     l3502:	
  9854  02D1  3000               	movlw	0
  9855  02D2  0020               	movlb	0	; select bank0
  9856  02D3  00E7               	movwf	?_strtod
  9857  02D4  3080               	movlw	128
  9858  02D5  00E8               	movwf	?_strtod+1
  9859  02D6  3000               	movlw	0
  9860  02D7  00E9               	movwf	?_strtod+2
  9861  02D8  0008               	return
  9862  02D9                     l936:	
  9863  02D9  0021               	movlb	1	; select bank1
  9864  02DA  1C21               	btfss	strtod@flags^(0+128),0
  9865  02DB  2AF5               	goto	l3508
  9866  02DC  0823               	movf	strtod@_u^(0+128),w
  9867  02DD  0020               	movlb	0	; select bank0
  9868  02DE  00D7               	movwf	___ftneg@f1
  9869  02DF  0021               	movlb	1	; select bank1
  9870  02E0  0824               	movf	(strtod@_u+1)^(0+128),w
  9871  02E1  0020               	movlb	0	; select bank0
  9872  02E2  00D8               	movwf	___ftneg@f1+1
  9873  02E3  0021               	movlb	1	; select bank1
  9874  02E4  0825               	movf	(strtod@_u+2)^(0+128),w
  9875  02E5  0020               	movlb	0	; select bank0
  9876  02E6  00D9               	movwf	___ftneg@f1+2
  9877  02E7  3192  2277         	fcall	___ftneg
  9878  02E9  0020               	movlb	0	; select bank0
  9879  02EA  0857               	movf	?___ftneg,w
  9880  02EB  0021               	movlb	1	; select bank1
  9881  02EC  00A3               	movwf	strtod@_u^(0+128)
  9882  02ED  0020               	movlb	0	; select bank0
  9883  02EE  0858               	movf	?___ftneg+1,w
  9884  02EF  0021               	movlb	1	; select bank1
  9885  02F0  00A4               	movwf	(strtod@_u+1)^(0+128)
  9886  02F1  0020               	movlb	0	; select bank0
  9887  02F2  0859               	movf	?___ftneg+2,w
  9888  02F3  0021               	movlb	1	; select bank1
  9889  02F4  00A5               	movwf	(strtod@_u+2)^(0+128)
  9890  02F5                     l3508:	
  9891  02F5  0823               	movf	strtod@_u^(0+128),w
  9892  02F6  0020               	movlb	0	; select bank0
  9893  02F7  00E7               	movwf	?_strtod
  9894  02F8  0021               	movlb	1	; select bank1
  9895  02F9  0824               	movf	(strtod@_u+1)^(0+128),w
  9896  02FA  0020               	movlb	0	; select bank0
  9897  02FB  00E8               	movwf	?_strtod+1
  9898  02FC  0021               	movlb	1	; select bank1
  9899  02FD  0825               	movf	(strtod@_u+2)^(0+128),w
  9900  02FE  0020               	movlb	0	; select bank0
  9901  02FF  00E9               	movwf	?_strtod+2
  9902  0300  0008               	return
  9903  0301                     __end_of_strtod:	
  9904                           
  9905                           	psect	text40
  9906  12AE                     __ptext40:	
  9907 ;; *************** function _isspace *****************
  9908 ;; Defined at:
  9909 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\isspace.c"
  9910 ;; Parameters:    Size  Location     Type
  9911 ;;  c               1    wreg     unsigned char 
  9912 ;; Auto vars:     Size  Location     Type
  9913 ;;  c               1    1[BANK0 ] unsigned char 
  9914 ;; Return value:  Size  Location     Type
  9915 ;;		None               void
  9916 ;; Registers used:
  9917 ;;		wreg, status,2, status,0
  9918 ;; Tracked objects:
  9919 ;;		On entry : 0/0
  9920 ;;		On exit  : 0/0
  9921 ;;		Unchanged: 0/0
  9922 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9923 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9924 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9925 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9926 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9927 ;;Total ram usage:        2 bytes
  9928 ;; Hardware stack levels used:    1
  9929 ;; Hardware stack levels required when called:    7
  9930 ;; This function calls:
  9931 ;;		Nothing
  9932 ;; This function is called by:
  9933 ;;		_strtod
  9934 ;; This function uses a non-reentrant model
  9935 ;;
  9936                           
  9937                           
  9938                           ;psect for function _isspace
  9939  12AE                     _isspace:	
  9940                           
  9941                           ;incstack = 0
  9942                           ; Regs used in _isspace: [wreg+status,2+status,0]
  9943                           ;isspace@c stored from wreg
  9944  12AE  0020               	movlb	0	; select bank0
  9945  12AF  00A1               	movwf	isspace@c
  9946  12B0  01A0               	clrf	_isspace$1869
  9947  12B1  0AA0               	incf	_isspace$1869,f
  9948  12B2  3020               	movlw	32
  9949  12B3  0621               	xorwf	isspace@c,w
  9950  12B4  1903               	btfsc	3,2
  9951  12B5  2ABF               	goto	l3100
  9952  12B6  300E               	movlw	14
  9953  12B7  0221               	subwf	isspace@c,w
  9954  12B8  1803               	skipnc
  9955  12B9  2ABE               	goto	l3098
  9956  12BA  3009               	movlw	9
  9957  12BB  0221               	subwf	isspace@c,w
  9958  12BC  1803               	skipnc
  9959  12BD  2ABF               	goto	l3100
  9960  12BE                     l3098:	
  9961  12BE  01A0               	clrf	_isspace$1869
  9962  12BF                     l3100:	
  9963  12BF  0C20               	rrf	_isspace$1869,w
  9964  12C0  0008               	return
  9965  12C1                     __end_of_isspace:	
  9966                           
  9967                           	psect	text41
  9968  128D                     __ptext41:	
  9969 ;; *************** function _isdigit *****************
  9970 ;; Defined at:
  9971 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\isdigit.c"
  9972 ;; Parameters:    Size  Location     Type
  9973 ;;  c               1    wreg     unsigned char 
  9974 ;; Auto vars:     Size  Location     Type
  9975 ;;  c               1    1[BANK0 ] unsigned char 
  9976 ;; Return value:  Size  Location     Type
  9977 ;;		None               void
  9978 ;; Registers used:
  9979 ;;		wreg, status,2, status,0
  9980 ;; Tracked objects:
  9981 ;;		On entry : 0/0
  9982 ;;		On exit  : 0/0
  9983 ;;		Unchanged: 0/0
  9984 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9985 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9986 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9987 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9988 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9989 ;;Total ram usage:        2 bytes
  9990 ;; Hardware stack levels used:    1
  9991 ;; Hardware stack levels required when called:    7
  9992 ;; This function calls:
  9993 ;;		Nothing
  9994 ;; This function is called by:
  9995 ;;		_sprintf
  9996 ;;		_strtod
  9997 ;; This function uses a non-reentrant model
  9998 ;;
  9999                           
 10000                           
 10001                           ;psect for function _isdigit
 10002  128D                     _isdigit:	
 10003                           
 10004                           ;incstack = 0
 10005                           ; Regs used in _isdigit: [wreg+status,2+status,0]
 10006                           ;isdigit@c stored from wreg
 10007  128D  0020               	movlb	0	; select bank0
 10008  128E  00A1               	movwf	isdigit@c
 10009  128F  01A0               	clrf	_isdigit$1866
 10010  1290  303A               	movlw	58
 10011  1291  0221               	subwf	isdigit@c,w
 10012  1292  1803               	skipnc
 10013  1293  2A9A               	goto	l2794
 10014  1294  3030               	movlw	48
 10015  1295  0221               	subwf	isdigit@c,w
 10016  1296  1C03               	skipc
 10017  1297  2A9A               	goto	l2794
 10018  1298  01A0               	clrf	_isdigit$1866
 10019  1299  0AA0               	incf	_isdigit$1866,f
 10020  129A                     l2794:	
 10021  129A  0C20               	rrf	_isdigit$1866,w
 10022  129B  0008               	return
 10023  129C                     __end_of_isdigit:	
 10024                           
 10025                           	psect	text42
 10026  15AE                     __ptext42:	
 10027 ;; *************** function ___lmul *****************
 10028 ;; Defined at:
 10029 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\Umul32.c"
 10030 ;; Parameters:    Size  Location     Type
 10031 ;;  multiplier      4    0[BANK0 ] unsigned long 
 10032 ;;  multiplicand    4    4[BANK0 ] unsigned long 
 10033 ;; Auto vars:     Size  Location     Type
 10034 ;;  product         4    8[BANK0 ] unsigned long 
 10035 ;; Return value:  Size  Location     Type
 10036 ;;                  4    0[BANK0 ] unsigned long 
 10037 ;; Registers used:
 10038 ;;		wreg, status,2, status,0
 10039 ;; Tracked objects:
 10040 ;;		On entry : 0/0
 10041 ;;		On exit  : 0/0
 10042 ;;		Unchanged: 0/0
 10043 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10044 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10045 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10046 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10047 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10048 ;;Total ram usage:       12 bytes
 10049 ;; Hardware stack levels used:    1
 10050 ;; Hardware stack levels required when called:    7
 10051 ;; This function calls:
 10052 ;;		Nothing
 10053 ;; This function is called by:
 10054 ;;		_strtod
 10055 ;; This function uses a non-reentrant model
 10056 ;;
 10057                           
 10058                           
 10059                           ;psect for function ___lmul
 10060  15AE                     ___lmul:	
 10061                           
 10062                           ;incstack = 0
 10063                           ; Regs used in ___lmul: [wreg+status,2+status,0]
 10064  15AE  3000               	movlw	0
 10065  15AF  0020               	movlb	0	; select bank0
 10066  15B0  00AB               	movwf	___lmul@product+3
 10067  15B1  3000               	movlw	0
 10068  15B2  00AA               	movwf	___lmul@product+2
 10069  15B3  3000               	movlw	0
 10070  15B4  00A9               	movwf	___lmul@product+1
 10071  15B5  3000               	movlw	0
 10072  15B6  00A8               	movwf	___lmul@product
 10073  15B7                     l2814:	
 10074  15B7  1C20               	btfss	___lmul@multiplier,0
 10075  15B8  2DC1               	goto	l2818
 10076  15B9  0824               	movf	___lmul@multiplicand,w
 10077  15BA  07A8               	addwf	___lmul@product,f
 10078  15BB  0825               	movf	___lmul@multiplicand+1,w
 10079  15BC  3DA9               	addwfc	___lmul@product+1,f
 10080  15BD  0826               	movf	___lmul@multiplicand+2,w
 10081  15BE  3DAA               	addwfc	___lmul@product+2,f
 10082  15BF  0827               	movf	___lmul@multiplicand+3,w
 10083  15C0  3DAB               	addwfc	___lmul@product+3,f
 10084  15C1                     l2818:	
 10085  15C1  3001               	movlw	1
 10086  15C2                     u2515:	
 10087  15C2  35A4               	lslf	___lmul@multiplicand,f
 10088  15C3  0DA5               	rlf	___lmul@multiplicand+1,f
 10089  15C4  0DA6               	rlf	___lmul@multiplicand+2,f
 10090  15C5  0DA7               	rlf	___lmul@multiplicand+3,f
 10091  15C6  0B89               	decfsz	9,f
 10092  15C7  2DC2               	goto	u2515
 10093  15C8  3001               	movlw	1
 10094  15C9                     u2525:	
 10095  15C9  36A3               	lsrf	___lmul@multiplier+3,f
 10096  15CA  0CA2               	rrf	___lmul@multiplier+2,f
 10097  15CB  0CA1               	rrf	___lmul@multiplier+1,f
 10098  15CC  0CA0               	rrf	___lmul@multiplier,f
 10099  15CD  0B89               	decfsz	9,f
 10100  15CE  2DC9               	goto	u2525
 10101  15CF  0823               	movf	___lmul@multiplier+3,w
 10102  15D0  0422               	iorwf	___lmul@multiplier+2,w
 10103  15D1  0421               	iorwf	___lmul@multiplier+1,w
 10104  15D2  0420               	iorwf	___lmul@multiplier,w
 10105  15D3  1D03               	skipz
 10106  15D4  2DB7               	goto	l2814
 10107  15D5  082B               	movf	___lmul@product+3,w
 10108  15D6  00A3               	movwf	?___lmul+3
 10109  15D7  082A               	movf	___lmul@product+2,w
 10110  15D8  00A2               	movwf	?___lmul+2
 10111  15D9  0829               	movf	___lmul@product+1,w
 10112  15DA  00A1               	movwf	?___lmul+1
 10113  15DB  0828               	movf	___lmul@product,w
 10114  15DC  00A0               	movwf	?___lmul
 10115  15DD  0008               	return
 10116  15DE                     __end_of___lmul:	
 10117                           
 10118                           	psect	text43
 10119  1277                     __ptext43:	
 10120 ;; *************** function ___ftneg *****************
 10121 ;; Defined at:
 10122 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\ftneg.c"
 10123 ;; Parameters:    Size  Location     Type
 10124 ;;  f1              3   55[BANK0 ] float 
 10125 ;; Auto vars:     Size  Location     Type
 10126 ;;		None
 10127 ;; Return value:  Size  Location     Type
 10128 ;;                  3   55[BANK0 ] float 
 10129 ;; Registers used:
 10130 ;;		wreg
 10131 ;; Tracked objects:
 10132 ;;		On entry : 0/0
 10133 ;;		On exit  : 0/0
 10134 ;;		Unchanged: 0/0
 10135 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10136 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10137 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10138 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10139 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10140 ;;Total ram usage:        3 bytes
 10141 ;; Hardware stack levels used:    1
 10142 ;; Hardware stack levels required when called:    7
 10143 ;; This function calls:
 10144 ;;		Nothing
 10145 ;; This function is called by:
 10146 ;;		_loop
 10147 ;;		_strtod
 10148 ;;		_ftoa
 10149 ;; This function uses a non-reentrant model
 10150 ;;
 10151                           
 10152                           
 10153                           ;psect for function ___ftneg
 10154  1277                     ___ftneg:	
 10155                           
 10156                           ;incstack = 0
 10157                           ; Regs used in ___ftneg: [wreg]
 10158  1277  0020               	movlb	0	; select bank0
 10159  1278  0859               	movf	___ftneg@f1+2,w
 10160  1279  0458               	iorwf	___ftneg@f1+1,w
 10161  127A  0457               	iorwf	___ftneg@f1,w
 10162  127B  1903               	skipnz
 10163  127C  0008               	return
 10164  127D  3080               	movlw	128
 10165  127E  06D9               	xorwf	___ftneg@f1+2,f
 10166  127F  0008               	return
 10167  1280                     __end_of___ftneg:	
 10168                           
 10169                           	psect	text44
 10170  0C9C                     __ptext44:	
 10171 ;; *************** function ___ftmul *****************
 10172 ;; Defined at:
 10173 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\ftmul.c"
 10174 ;; Parameters:    Size  Location     Type
 10175 ;;  f1              3   55[BANK0 ] float 
 10176 ;;  f2              3   58[BANK0 ] float 
 10177 ;; Auto vars:     Size  Location     Type
 10178 ;;  f3_as_produc    3   66[BANK0 ] unsigned um
 10179 ;;  sign            1   70[BANK0 ] unsigned char 
 10180 ;;  cntr            1   69[BANK0 ] unsigned char 
 10181 ;;  exp             1   65[BANK0 ] unsigned char 
 10182 ;; Return value:  Size  Location     Type
 10183 ;;                  3   55[BANK0 ] float 
 10184 ;; Registers used:
 10185 ;;		wreg, status,2, status,0, pclath, cstack
 10186 ;; Tracked objects:
 10187 ;;		On entry : 0/0
 10188 ;;		On exit  : 0/0
 10189 ;;		Unchanged: 0/0
 10190 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10191 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10192 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10193 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10194 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10195 ;;Total ram usage:       16 bytes
 10196 ;; Hardware stack levels used:    1
 10197 ;; Hardware stack levels required when called:    8
 10198 ;; This function calls:
 10199 ;;		___ftpack
 10200 ;; This function is called by:
 10201 ;;		_loop
 10202 ;;		_strtod
 10203 ;;		_ftoa
 10204 ;; This function uses a non-reentrant model
 10205 ;;
 10206                           
 10207                           
 10208                           ;psect for function ___ftmul
 10209  0C9C                     ___ftmul:	
 10210                           
 10211                           ;incstack = 0
 10212                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
 10213  0C9C  0020               	movlb	0	; select bank0
 10214  0C9D  0857               	movf	___ftmul@f1,w
 10215  0C9E  00DD               	movwf	??___ftmul
 10216  0C9F  0858               	movf	___ftmul@f1+1,w
 10217  0CA0  00DE               	movwf	??___ftmul+1
 10218  0CA1  0859               	movf	___ftmul@f1+2,w
 10219  0CA2  00DF               	movwf	??___ftmul+2
 10220  0CA3  1003               	clrc
 10221  0CA4  0D5E               	rlf	??___ftmul+1,w
 10222  0CA5  0D5F               	rlf	??___ftmul+2,w
 10223  0CA6  00E0               	movwf	??___ftmul+3
 10224  0CA7  0860               	movf	??___ftmul+3,w
 10225  0CA8  00E1               	movwf	___ftmul@exp
 10226  0CA9  0861               	movf	___ftmul@exp,w
 10227  0CAA  1D03               	btfss	3,2
 10228  0CAB  2CB3               	goto	l3018
 10229  0CAC  3000               	movlw	0
 10230  0CAD  00D7               	movwf	?___ftmul
 10231  0CAE  3000               	movlw	0
 10232  0CAF  00D8               	movwf	?___ftmul+1
 10233  0CB0  3000               	movlw	0
 10234  0CB1  00D9               	movwf	?___ftmul+2
 10235  0CB2  0008               	return
 10236  0CB3                     l3018:	
 10237  0CB3  085A               	movf	___ftmul@f2,w
 10238  0CB4  00DD               	movwf	??___ftmul
 10239  0CB5  085B               	movf	___ftmul@f2+1,w
 10240  0CB6  00DE               	movwf	??___ftmul+1
 10241  0CB7  085C               	movf	___ftmul@f2+2,w
 10242  0CB8  00DF               	movwf	??___ftmul+2
 10243  0CB9  1003               	clrc
 10244  0CBA  0D5E               	rlf	??___ftmul+1,w
 10245  0CBB  0D5F               	rlf	??___ftmul+2,w
 10246  0CBC  00E0               	movwf	??___ftmul+3
 10247  0CBD  0860               	movf	??___ftmul+3,w
 10248  0CBE  00E6               	movwf	___ftmul@sign
 10249  0CBF  0866               	movf	___ftmul@sign,w
 10250  0CC0  1D03               	btfss	3,2
 10251  0CC1  2CC9               	goto	l3024
 10252  0CC2  3000               	movlw	0
 10253  0CC3  00D7               	movwf	?___ftmul
 10254  0CC4  3000               	movlw	0
 10255  0CC5  00D8               	movwf	?___ftmul+1
 10256  0CC6  3000               	movlw	0
 10257  0CC7  00D9               	movwf	?___ftmul+2
 10258  0CC8  0008               	return
 10259  0CC9                     l3024:	
 10260  0CC9  0866               	movf	___ftmul@sign,w
 10261  0CCA  3E7B               	addlw	123
 10262  0CCB  00DD               	movwf	??___ftmul
 10263  0CCC  085D               	movf	??___ftmul,w
 10264  0CCD  07E1               	addwf	___ftmul@exp,f
 10265  0CCE  0857               	movf	___ftmul@f1,w
 10266  0CCF  00DD               	movwf	??___ftmul
 10267  0CD0  0858               	movf	___ftmul@f1+1,w
 10268  0CD1  00DE               	movwf	??___ftmul+1
 10269  0CD2  0859               	movf	___ftmul@f1+2,w
 10270  0CD3  00DF               	movwf	??___ftmul+2
 10271  0CD4  3010               	movlw	16
 10272  0CD5                     u3025:	
 10273  0CD5  36DF               	lsrf	??___ftmul+2,f
 10274  0CD6  0CDE               	rrf	??___ftmul+1,f
 10275  0CD7  0CDD               	rrf	??___ftmul,f
 10276  0CD8  0B89               	decfsz	9,f
 10277  0CD9  2CD5               	goto	u3025
 10278  0CDA  085D               	movf	??___ftmul,w
 10279  0CDB  00E0               	movwf	??___ftmul+3
 10280  0CDC  0860               	movf	??___ftmul+3,w
 10281  0CDD  00E6               	movwf	___ftmul@sign
 10282  0CDE  085A               	movf	___ftmul@f2,w
 10283  0CDF  00DD               	movwf	??___ftmul
 10284  0CE0  085B               	movf	___ftmul@f2+1,w
 10285  0CE1  00DE               	movwf	??___ftmul+1
 10286  0CE2  085C               	movf	___ftmul@f2+2,w
 10287  0CE3  00DF               	movwf	??___ftmul+2
 10288  0CE4  3010               	movlw	16
 10289  0CE5                     u3035:	
 10290  0CE5  36DF               	lsrf	??___ftmul+2,f
 10291  0CE6  0CDE               	rrf	??___ftmul+1,f
 10292  0CE7  0CDD               	rrf	??___ftmul,f
 10293  0CE8  0B89               	decfsz	9,f
 10294  0CE9  2CE5               	goto	u3035
 10295  0CEA  085D               	movf	??___ftmul,w
 10296  0CEB  00E0               	movwf	??___ftmul+3
 10297  0CEC  0860               	movf	??___ftmul+3,w
 10298  0CED  06E6               	xorwf	___ftmul@sign,f
 10299  0CEE  3080               	movlw	128
 10300  0CEF  00DD               	movwf	??___ftmul
 10301  0CF0  085D               	movf	??___ftmul,w
 10302  0CF1  05E6               	andwf	___ftmul@sign,f
 10303  0CF2  17D8               	bsf	___ftmul@f1+1,7
 10304  0CF3  17DB               	bsf	___ftmul@f2+1,7
 10305  0CF4  30FF               	movlw	255
 10306  0CF5  05DA               	andwf	___ftmul@f2,f
 10307  0CF6  30FF               	movlw	255
 10308  0CF7  05DB               	andwf	___ftmul@f2+1,f
 10309  0CF8  3000               	movlw	0
 10310  0CF9  05DC               	andwf	___ftmul@f2+2,f
 10311  0CFA  3000               	movlw	0
 10312  0CFB  00E2               	movwf	___ftmul@f3_as_product
 10313  0CFC  3000               	movlw	0
 10314  0CFD  00E3               	movwf	___ftmul@f3_as_product+1
 10315  0CFE  3000               	movlw	0
 10316  0CFF  00E4               	movwf	___ftmul@f3_as_product+2
 10317  0D00  3007               	movlw	7
 10318  0D01  00DD               	movwf	??___ftmul
 10319  0D02  085D               	movf	??___ftmul,w
 10320  0D03  00E5               	movwf	___ftmul@cntr
 10321  0D04                     l3036:	
 10322  0D04  1C57               	btfss	___ftmul@f1,0
 10323  0D05  2D0C               	goto	l3040
 10324  0D06  085A               	movf	___ftmul@f2,w
 10325  0D07  07E2               	addwf	___ftmul@f3_as_product,f
 10326  0D08  085B               	movf	___ftmul@f2+1,w
 10327  0D09  3DE3               	addwfc	___ftmul@f3_as_product+1,f
 10328  0D0A  085C               	movf	___ftmul@f2+2,w
 10329  0D0B  3DE4               	addwfc	___ftmul@f3_as_product+2,f
 10330  0D0C                     l3040:	
 10331  0D0C  3001               	movlw	1
 10332  0D0D                     u3055:	
 10333  0D0D  36D9               	lsrf	___ftmul@f1+2,f
 10334  0D0E  0CD8               	rrf	___ftmul@f1+1,f
 10335  0D0F  0CD7               	rrf	___ftmul@f1,f
 10336  0D10  0B89               	decfsz	9,f
 10337  0D11  2D0D               	goto	u3055
 10338  0D12  3001               	movlw	1
 10339  0D13                     u3065:	
 10340  0D13  35DA               	lslf	___ftmul@f2,f
 10341  0D14  0DDB               	rlf	___ftmul@f2+1,f
 10342  0D15  0DDC               	rlf	___ftmul@f2+2,f
 10343  0D16  0B89               	decfsz	9,f
 10344  0D17  2D13               	goto	u3065
 10345  0D18  3001               	movlw	1
 10346  0D19  02E5               	subwf	___ftmul@cntr,f
 10347  0D1A  1D03               	btfss	3,2
 10348  0D1B  2D04               	goto	l3036
 10349  0D1C  3009               	movlw	9
 10350  0D1D  00DD               	movwf	??___ftmul
 10351  0D1E  085D               	movf	??___ftmul,w
 10352  0D1F  00E5               	movwf	___ftmul@cntr
 10353  0D20                     l3048:	
 10354  0D20  1C57               	btfss	___ftmul@f1,0
 10355  0D21  2D28               	goto	l3052
 10356  0D22  085A               	movf	___ftmul@f2,w
 10357  0D23  07E2               	addwf	___ftmul@f3_as_product,f
 10358  0D24  085B               	movf	___ftmul@f2+1,w
 10359  0D25  3DE3               	addwfc	___ftmul@f3_as_product+1,f
 10360  0D26  085C               	movf	___ftmul@f2+2,w
 10361  0D27  3DE4               	addwfc	___ftmul@f3_as_product+2,f
 10362  0D28                     l3052:	
 10363  0D28  3001               	movlw	1
 10364  0D29                     u3095:	
 10365  0D29  36D9               	lsrf	___ftmul@f1+2,f
 10366  0D2A  0CD8               	rrf	___ftmul@f1+1,f
 10367  0D2B  0CD7               	rrf	___ftmul@f1,f
 10368  0D2C  0B89               	decfsz	9,f
 10369  0D2D  2D29               	goto	u3095
 10370  0D2E  3001               	movlw	1
 10371  0D2F                     u3105:	
 10372  0D2F  36E4               	lsrf	___ftmul@f3_as_product+2,f
 10373  0D30  0CE3               	rrf	___ftmul@f3_as_product+1,f
 10374  0D31  0CE2               	rrf	___ftmul@f3_as_product,f
 10375  0D32  0B89               	decfsz	9,f
 10376  0D33  2D2F               	goto	u3105
 10377  0D34  3001               	movlw	1
 10378  0D35  02E5               	subwf	___ftmul@cntr,f
 10379  0D36  1D03               	btfss	3,2
 10380  0D37  2D20               	goto	l3048
 10381  0D38  0862               	movf	___ftmul@f3_as_product,w
 10382  0D39  00A0               	movwf	___ftpack@arg
 10383  0D3A  0863               	movf	___ftmul@f3_as_product+1,w
 10384  0D3B  00A1               	movwf	___ftpack@arg+1
 10385  0D3C  0864               	movf	___ftmul@f3_as_product+2,w
 10386  0D3D  00A2               	movwf	___ftpack@arg+2
 10387  0D3E  0861               	movf	___ftmul@exp,w
 10388  0D3F  00DD               	movwf	??___ftmul
 10389  0D40  085D               	movf	??___ftmul,w
 10390  0D41  00A3               	movwf	___ftpack@exp
 10391  0D42  0866               	movf	___ftmul@sign,w
 10392  0D43  00DE               	movwf	??___ftmul+1
 10393  0D44  085E               	movf	??___ftmul+1,w
 10394  0D45  00A4               	movwf	___ftpack@sign
 10395  0D46  3189  21C7         	fcall	___ftpack
 10396  0D48  0020               	movlb	0	; select bank0
 10397  0D49  0820               	movf	?___ftpack,w
 10398  0D4A  00D7               	movwf	?___ftmul
 10399  0D4B  0821               	movf	?___ftpack+1,w
 10400  0D4C  00D8               	movwf	?___ftmul+1
 10401  0D4D  0822               	movf	?___ftpack+2,w
 10402  0D4E  00D9               	movwf	?___ftmul+2
 10403  0D4F  0008               	return
 10404  0D50                     __end_of___ftmul:	
 10405                           
 10406                           	psect	text45
 10407  163E                     __ptext45:	
 10408 ;; *************** function ___ftge *****************
 10409 ;; Defined at:
 10410 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\ftge.c"
 10411 ;; Parameters:    Size  Location     Type
 10412 ;;  ff1             3    0[BANK0 ] float 
 10413 ;;  ff2             3    3[BANK0 ] float 
 10414 ;; Auto vars:     Size  Location     Type
 10415 ;;		None
 10416 ;; Return value:  Size  Location     Type
 10417 ;;		None               void
 10418 ;; Registers used:
 10419 ;;		wreg, status,2, status,0
 10420 ;; Tracked objects:
 10421 ;;		On entry : 0/0
 10422 ;;		On exit  : 0/0
 10423 ;;		Unchanged: 0/0
 10424 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10425 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10426 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10427 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10428 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10429 ;;Total ram usage:        9 bytes
 10430 ;; Hardware stack levels used:    1
 10431 ;; Hardware stack levels required when called:    7
 10432 ;; This function calls:
 10433 ;;		Nothing
 10434 ;; This function is called by:
 10435 ;;		_strtod
 10436 ;;		_ftoa
 10437 ;; This function uses a non-reentrant model
 10438 ;;
 10439                           
 10440                           
 10441                           ;psect for function ___ftge
 10442  163E                     ___ftge:	
 10443                           
 10444                           ;incstack = 0
 10445                           ; Regs used in ___ftge: [wreg+status,2+status,0]
 10446  163E  0020               	movlb	0	; select bank0
 10447  163F  1FA2               	btfss	___ftge@ff1+2,7
 10448  1640  2E55               	goto	l2996
 10449  1641  0920               	comf	___ftge@ff1,w
 10450  1642  00A6               	movwf	??___ftge
 10451  1643  0921               	comf	___ftge@ff1+1,w
 10452  1644  00A7               	movwf	??___ftge+1
 10453  1645  0922               	comf	___ftge@ff1+2,w
 10454  1646  00A8               	movwf	??___ftge+2
 10455  1647  0AA6               	incf	??___ftge,f
 10456  1648  1903               	skipnz
 10457  1649  0AA7               	incf	??___ftge+1,f
 10458  164A  1903               	skipnz
 10459  164B  0AA8               	incf	??___ftge+2,f
 10460  164C  3000               	movlw	0
 10461  164D  0726               	addwf	??___ftge,w
 10462  164E  00A0               	movwf	___ftge@ff1
 10463  164F  3000               	movlw	0
 10464  1650  3D27               	addwfc	??___ftge+1,w
 10465  1651  00A1               	movwf	___ftge@ff1+1
 10466  1652  3080               	movlw	128
 10467  1653  3D28               	addwfc	??___ftge+2,w
 10468  1654  00A2               	movwf	___ftge@ff1+2
 10469  1655                     l2996:	
 10470  1655  1FA5               	btfss	___ftge@ff2+2,7
 10471  1656  2E6B               	goto	l3000
 10472  1657  0923               	comf	___ftge@ff2,w
 10473  1658  00A6               	movwf	??___ftge
 10474  1659  0924               	comf	___ftge@ff2+1,w
 10475  165A  00A7               	movwf	??___ftge+1
 10476  165B  0925               	comf	___ftge@ff2+2,w
 10477  165C  00A8               	movwf	??___ftge+2
 10478  165D  0AA6               	incf	??___ftge,f
 10479  165E  1903               	skipnz
 10480  165F  0AA7               	incf	??___ftge+1,f
 10481  1660  1903               	skipnz
 10482  1661  0AA8               	incf	??___ftge+2,f
 10483  1662  3000               	movlw	0
 10484  1663  0726               	addwf	??___ftge,w
 10485  1664  00A3               	movwf	___ftge@ff2
 10486  1665  3000               	movlw	0
 10487  1666  3D27               	addwfc	??___ftge+1,w
 10488  1667  00A4               	movwf	___ftge@ff2+1
 10489  1668  3080               	movlw	128
 10490  1669  3D28               	addwfc	??___ftge+2,w
 10491  166A  00A5               	movwf	___ftge@ff2+2
 10492  166B                     l3000:	
 10493  166B  3080               	movlw	128
 10494  166C  06A2               	xorwf	___ftge@ff1+2,f
 10495  166D  3080               	movlw	128
 10496  166E  06A5               	xorwf	___ftge@ff2+2,f
 10497  166F  0825               	movf	___ftge@ff2+2,w
 10498  1670  0222               	subwf	___ftge@ff1+2,w
 10499  1671  1D03               	skipz
 10500  1672  0008               	return
 10501  1673  0824               	movf	___ftge@ff2+1,w
 10502  1674  0221               	subwf	___ftge@ff1+1,w
 10503  1675  1D03               	skipz
 10504  1676  0008               	return
 10505  1677  0823               	movf	___ftge@ff2,w
 10506  1678  0220               	subwf	___ftge@ff1,w
 10507  1679  0008               	return
 10508  167A                     __end_of___ftge:	
 10509                           
 10510                           	psect	text46
 10511  0BF3                     __ptext46:	
 10512 ;; *************** function ___ftdiv *****************
 10513 ;; Defined at:
 10514 ;;		line 56 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\ftdiv.c"
 10515 ;; Parameters:    Size  Location     Type
 10516 ;;  f2              3   27[BANK0 ] float 
 10517 ;;  f1              3   30[BANK0 ] float 
 10518 ;; Auto vars:     Size  Location     Type
 10519 ;;  f3              3   38[BANK0 ] float 
 10520 ;;  sign            1   42[BANK0 ] unsigned char 
 10521 ;;  exp             1   41[BANK0 ] unsigned char 
 10522 ;;  cntr            1   37[BANK0 ] unsigned char 
 10523 ;; Return value:  Size  Location     Type
 10524 ;;                  3   27[BANK0 ] float 
 10525 ;; Registers used:
 10526 ;;		wreg, status,2, status,0, pclath, cstack
 10527 ;; Tracked objects:
 10528 ;;		On entry : 0/0
 10529 ;;		On exit  : 0/0
 10530 ;;		Unchanged: 0/0
 10531 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10532 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10533 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10534 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10535 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10536 ;;Total ram usage:       16 bytes
 10537 ;; Hardware stack levels used:    1
 10538 ;; Hardware stack levels required when called:    8
 10539 ;; This function calls:
 10540 ;;		___ftpack
 10541 ;; This function is called by:
 10542 ;;		_getADCValue
 10543 ;;		_loop
 10544 ;;		_strtod
 10545 ;; This function uses a non-reentrant model
 10546 ;;
 10547                           
 10548                           
 10549                           ;psect for function ___ftdiv
 10550  0BF3                     ___ftdiv:	
 10551                           
 10552                           ;incstack = 0
 10553                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
 10554  0BF3  0020               	movlb	0	; select bank0
 10555  0BF4  083E               	movf	___ftdiv@f1,w
 10556  0BF5  00C1               	movwf	??___ftdiv
 10557  0BF6  083F               	movf	___ftdiv@f1+1,w
 10558  0BF7  00C2               	movwf	??___ftdiv+1
 10559  0BF8  0840               	movf	___ftdiv@f1+2,w
 10560  0BF9  00C3               	movwf	??___ftdiv+2
 10561  0BFA  1003               	clrc
 10562  0BFB  0D42               	rlf	??___ftdiv+1,w
 10563  0BFC  0D43               	rlf	??___ftdiv+2,w
 10564  0BFD  00C4               	movwf	??___ftdiv+3
 10565  0BFE  0844               	movf	??___ftdiv+3,w
 10566  0BFF  00C9               	movwf	___ftdiv@exp
 10567  0C00  0849               	movf	___ftdiv@exp,w
 10568  0C01  1D03               	btfss	3,2
 10569  0C02  2C0A               	goto	l2956
 10570  0C03  3000               	movlw	0
 10571  0C04  00BB               	movwf	?___ftdiv
 10572  0C05  3000               	movlw	0
 10573  0C06  00BC               	movwf	?___ftdiv+1
 10574  0C07  3000               	movlw	0
 10575  0C08  00BD               	movwf	?___ftdiv+2
 10576  0C09  0008               	return
 10577  0C0A                     l2956:	
 10578  0C0A  083B               	movf	___ftdiv@f2,w
 10579  0C0B  00C1               	movwf	??___ftdiv
 10580  0C0C  083C               	movf	___ftdiv@f2+1,w
 10581  0C0D  00C2               	movwf	??___ftdiv+1
 10582  0C0E  083D               	movf	___ftdiv@f2+2,w
 10583  0C0F  00C3               	movwf	??___ftdiv+2
 10584  0C10  1003               	clrc
 10585  0C11  0D42               	rlf	??___ftdiv+1,w
 10586  0C12  0D43               	rlf	??___ftdiv+2,w
 10587  0C13  00C4               	movwf	??___ftdiv+3
 10588  0C14  0844               	movf	??___ftdiv+3,w
 10589  0C15  00CA               	movwf	___ftdiv@sign
 10590  0C16  084A               	movf	___ftdiv@sign,w
 10591  0C17  1D03               	btfss	3,2
 10592  0C18  2C20               	goto	l2962
 10593  0C19  3000               	movlw	0
 10594  0C1A  00BB               	movwf	?___ftdiv
 10595  0C1B  3000               	movlw	0
 10596  0C1C  00BC               	movwf	?___ftdiv+1
 10597  0C1D  3000               	movlw	0
 10598  0C1E  00BD               	movwf	?___ftdiv+2
 10599  0C1F  0008               	return
 10600  0C20                     l2962:	
 10601  0C20  3000               	movlw	0
 10602  0C21  00C6               	movwf	___ftdiv@f3
 10603  0C22  3000               	movlw	0
 10604  0C23  00C7               	movwf	___ftdiv@f3+1
 10605  0C24  3000               	movlw	0
 10606  0C25  00C8               	movwf	___ftdiv@f3+2
 10607  0C26  3089               	movlw	137
 10608  0C27  074A               	addwf	___ftdiv@sign,w
 10609  0C28  00C1               	movwf	??___ftdiv
 10610  0C29  0841               	movf	??___ftdiv,w
 10611  0C2A  02C9               	subwf	___ftdiv@exp,f
 10612  0C2B  083E               	movf	___ftdiv@f1,w
 10613  0C2C  00C1               	movwf	??___ftdiv
 10614  0C2D  083F               	movf	___ftdiv@f1+1,w
 10615  0C2E  00C2               	movwf	??___ftdiv+1
 10616  0C2F  0840               	movf	___ftdiv@f1+2,w
 10617  0C30  00C3               	movwf	??___ftdiv+2
 10618  0C31  3010               	movlw	16
 10619  0C32                     u2915:	
 10620  0C32  36C3               	lsrf	??___ftdiv+2,f
 10621  0C33  0CC2               	rrf	??___ftdiv+1,f
 10622  0C34  0CC1               	rrf	??___ftdiv,f
 10623  0C35  0B89               	decfsz	9,f
 10624  0C36  2C32               	goto	u2915
 10625  0C37  0841               	movf	??___ftdiv,w
 10626  0C38  00C4               	movwf	??___ftdiv+3
 10627  0C39  0844               	movf	??___ftdiv+3,w
 10628  0C3A  00CA               	movwf	___ftdiv@sign
 10629  0C3B  083B               	movf	___ftdiv@f2,w
 10630  0C3C  00C1               	movwf	??___ftdiv
 10631  0C3D  083C               	movf	___ftdiv@f2+1,w
 10632  0C3E  00C2               	movwf	??___ftdiv+1
 10633  0C3F  083D               	movf	___ftdiv@f2+2,w
 10634  0C40  00C3               	movwf	??___ftdiv+2
 10635  0C41  3010               	movlw	16
 10636  0C42                     u2925:	
 10637  0C42  36C3               	lsrf	??___ftdiv+2,f
 10638  0C43  0CC2               	rrf	??___ftdiv+1,f
 10639  0C44  0CC1               	rrf	??___ftdiv,f
 10640  0C45  0B89               	decfsz	9,f
 10641  0C46  2C42               	goto	u2925
 10642  0C47  0841               	movf	??___ftdiv,w
 10643  0C48  00C4               	movwf	??___ftdiv+3
 10644  0C49  0844               	movf	??___ftdiv+3,w
 10645  0C4A  06CA               	xorwf	___ftdiv@sign,f
 10646  0C4B  3080               	movlw	128
 10647  0C4C  00C1               	movwf	??___ftdiv
 10648  0C4D  0841               	movf	??___ftdiv,w
 10649  0C4E  05CA               	andwf	___ftdiv@sign,f
 10650  0C4F  17BF               	bsf	___ftdiv@f1+1,7
 10651  0C50  30FF               	movlw	255
 10652  0C51  05BE               	andwf	___ftdiv@f1,f
 10653  0C52  30FF               	movlw	255
 10654  0C53  05BF               	andwf	___ftdiv@f1+1,f
 10655  0C54  3000               	movlw	0
 10656  0C55  05C0               	andwf	___ftdiv@f1+2,f
 10657  0C56  17BC               	bsf	___ftdiv@f2+1,7
 10658  0C57  30FF               	movlw	255
 10659  0C58  05BB               	andwf	___ftdiv@f2,f
 10660  0C59  30FF               	movlw	255
 10661  0C5A  05BC               	andwf	___ftdiv@f2+1,f
 10662  0C5B  3000               	movlw	0
 10663  0C5C  05BD               	andwf	___ftdiv@f2+2,f
 10664  0C5D  3018               	movlw	24
 10665  0C5E  00C1               	movwf	??___ftdiv
 10666  0C5F  0841               	movf	??___ftdiv,w
 10667  0C60  00C5               	movwf	___ftdiv@cntr
 10668  0C61                     l2976:	
 10669  0C61  3001               	movlw	1
 10670  0C62                     u2935:	
 10671  0C62  35C6               	lslf	___ftdiv@f3,f
 10672  0C63  0DC7               	rlf	___ftdiv@f3+1,f
 10673  0C64  0DC8               	rlf	___ftdiv@f3+2,f
 10674  0C65  0B89               	decfsz	9,f
 10675  0C66  2C62               	goto	u2935
 10676  0C67  083D               	movf	___ftdiv@f2+2,w
 10677  0C68  0240               	subwf	___ftdiv@f1+2,w
 10678  0C69  1D03               	skipz
 10679  0C6A  2C71               	goto	u2945
 10680  0C6B  083C               	movf	___ftdiv@f2+1,w
 10681  0C6C  023F               	subwf	___ftdiv@f1+1,w
 10682  0C6D  1D03               	skipz
 10683  0C6E  2C71               	goto	u2945
 10684  0C6F  083B               	movf	___ftdiv@f2,w
 10685  0C70  023E               	subwf	___ftdiv@f1,w
 10686  0C71                     u2945:	
 10687  0C71  1C03               	skipc
 10688  0C72  2C7A               	goto	l2984
 10689  0C73  083B               	movf	___ftdiv@f2,w
 10690  0C74  02BE               	subwf	___ftdiv@f1,f
 10691  0C75  083C               	movf	___ftdiv@f2+1,w
 10692  0C76  3BBF               	subwfb	___ftdiv@f1+1,f
 10693  0C77  083D               	movf	___ftdiv@f2+2,w
 10694  0C78  3BC0               	subwfb	___ftdiv@f1+2,f
 10695  0C79  1446               	bsf	___ftdiv@f3,0
 10696  0C7A                     l2984:	
 10697  0C7A  3001               	movlw	1
 10698  0C7B                     u2955:	
 10699  0C7B  35BE               	lslf	___ftdiv@f1,f
 10700  0C7C  0DBF               	rlf	___ftdiv@f1+1,f
 10701  0C7D  0DC0               	rlf	___ftdiv@f1+2,f
 10702  0C7E  0B89               	decfsz	9,f
 10703  0C7F  2C7B               	goto	u2955
 10704  0C80  3001               	movlw	1
 10705  0C81  02C5               	subwf	___ftdiv@cntr,f
 10706  0C82  1D03               	btfss	3,2
 10707  0C83  2C61               	goto	l2976
 10708  0C84  0846               	movf	___ftdiv@f3,w
 10709  0C85  00A0               	movwf	___ftpack@arg
 10710  0C86  0847               	movf	___ftdiv@f3+1,w
 10711  0C87  00A1               	movwf	___ftpack@arg+1
 10712  0C88  0848               	movf	___ftdiv@f3+2,w
 10713  0C89  00A2               	movwf	___ftpack@arg+2
 10714  0C8A  0849               	movf	___ftdiv@exp,w
 10715  0C8B  00C1               	movwf	??___ftdiv
 10716  0C8C  0841               	movf	??___ftdiv,w
 10717  0C8D  00A3               	movwf	___ftpack@exp
 10718  0C8E  084A               	movf	___ftdiv@sign,w
 10719  0C8F  00C2               	movwf	??___ftdiv+1
 10720  0C90  0842               	movf	??___ftdiv+1,w
 10721  0C91  00A4               	movwf	___ftpack@sign
 10722  0C92  3189  21C7         	fcall	___ftpack
 10723  0C94  0020               	movlb	0	; select bank0
 10724  0C95  0820               	movf	?___ftpack,w
 10725  0C96  00BB               	movwf	?___ftdiv
 10726  0C97  0821               	movf	?___ftpack+1,w
 10727  0C98  00BC               	movwf	?___ftdiv+1
 10728  0C99  0822               	movf	?___ftpack+2,w
 10729  0C9A  00BD               	movwf	?___ftdiv+2
 10730  0C9B  0008               	return
 10731  0C9C                     __end_of___ftdiv:	
 10732                           
 10733                           	psect	text47
 10734  129C                     __ptext47:	
 10735 ;; *************** function ___bmul *****************
 10736 ;; Defined at:
 10737 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\Umul8.c"
 10738 ;; Parameters:    Size  Location     Type
 10739 ;;  multiplier      1    wreg     unsigned char 
 10740 ;;  multiplicand    1    0[BANK0 ] unsigned char 
 10741 ;; Auto vars:     Size  Location     Type
 10742 ;;  multiplier      1    3[BANK0 ] unsigned char 
 10743 ;;  product         1    2[BANK0 ] unsigned char 
 10744 ;; Return value:  Size  Location     Type
 10745 ;;                  1    wreg      unsigned char 
 10746 ;; Registers used:
 10747 ;;		wreg, status,2, status,0
 10748 ;; Tracked objects:
 10749 ;;		On entry : 0/0
 10750 ;;		On exit  : 0/0
 10751 ;;		Unchanged: 0/0
 10752 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10753 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10754 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10755 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10756 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10757 ;;Total ram usage:        4 bytes
 10758 ;; Hardware stack levels used:    1
 10759 ;; Hardware stack levels required when called:    7
 10760 ;; This function calls:
 10761 ;;		Nothing
 10762 ;; This function is called by:
 10763 ;;		_nrf24l01SetTXPipe
 10764 ;;		_nrf24l01InitRegisters
 10765 ;;		_strtod
 10766 ;; This function uses a non-reentrant model
 10767 ;;
 10768                           
 10769                           
 10770                           ;psect for function ___bmul
 10771  129C                     ___bmul:	
 10772                           
 10773                           ;incstack = 0
 10774                           ; Regs used in ___bmul: [wreg+status,2+status,0]
 10775                           ;___bmul@multiplier stored from wreg
 10776  129C  0020               	movlb	0	; select bank0
 10777  129D  00A3               	movwf	___bmul@multiplier
 10778  129E  01A2               	clrf	___bmul@product
 10779  129F                     l2828:	
 10780  129F  1C23               	btfss	___bmul@multiplier,0
 10781  12A0  2AA5               	goto	l2832
 10782  12A1  0820               	movf	___bmul@multiplicand,w
 10783  12A2  00A1               	movwf	??___bmul
 10784  12A3  0821               	movf	??___bmul,w
 10785  12A4  07A2               	addwf	___bmul@product,f
 10786  12A5                     l2832:	
 10787  12A5  1003               	clrc
 10788  12A6  0DA0               	rlf	___bmul@multiplicand,f
 10789  12A7  1003               	clrc
 10790  12A8  0CA3               	rrf	___bmul@multiplier,f
 10791  12A9  0823               	movf	___bmul@multiplier,w
 10792  12AA  1D03               	btfss	3,2
 10793  12AB  2A9F               	goto	l2828
 10794  12AC  0822               	movf	___bmul@product,w
 10795  12AD  0008               	return
 10796  12AE                     __end_of___bmul:	
 10797                           
 10798                           	psect	text48
 10799  167A                     __ptext48:	
 10800 ;; *************** function ___altoft *****************
 10801 ;; Defined at:
 10802 ;;		line 42 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\altoft.c"
 10803 ;; Parameters:    Size  Location     Type
 10804 ;;  c               4    8[BANK0 ] long 
 10805 ;; Auto vars:     Size  Location     Type
 10806 ;;  sign            1   15[BANK0 ] unsigned char 
 10807 ;;  exp             1   14[BANK0 ] unsigned char 
 10808 ;; Return value:  Size  Location     Type
 10809 ;;                  3    8[BANK0 ] float 
 10810 ;; Registers used:
 10811 ;;		wreg, status,2, status,0, pclath, cstack
 10812 ;; Tracked objects:
 10813 ;;		On entry : 0/0
 10814 ;;		On exit  : 0/0
 10815 ;;		Unchanged: 0/0
 10816 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10817 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10818 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10819 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10820 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10821 ;;Total ram usage:        8 bytes
 10822 ;; Hardware stack levels used:    1
 10823 ;; Hardware stack levels required when called:    8
 10824 ;; This function calls:
 10825 ;;		___ftpack
 10826 ;; This function is called by:
 10827 ;;		_strtod
 10828 ;; This function uses a non-reentrant model
 10829 ;;
 10830                           
 10831                           
 10832                           ;psect for function ___altoft
 10833  167A                     ___altoft:	
 10834                           
 10835                           ;incstack = 0
 10836                           ; Regs used in ___altoft: [wreg+status,2+status,0+pclath+cstack]
 10837  167A  0020               	movlb	0	; select bank0
 10838  167B  01AF               	clrf	___altoft@sign
 10839  167C  308E               	movlw	142
 10840  167D  00AC               	movwf	??___altoft
 10841  167E  082C               	movf	??___altoft,w
 10842  167F  00AE               	movwf	___altoft@exp
 10843  1680  1FAB               	btfss	___altoft@c+3,7
 10844  1681  2E8F               	goto	l2874
 10845  1682  09A8               	comf	___altoft@c,f
 10846  1683  09A9               	comf	___altoft@c+1,f
 10847  1684  09AA               	comf	___altoft@c+2,f
 10848  1685  09AB               	comf	___altoft@c+3,f
 10849  1686  0AA8               	incf	___altoft@c,f
 10850  1687  1903               	skipnz
 10851  1688  0AA9               	incf	___altoft@c+1,f
 10852  1689  1903               	skipnz
 10853  168A  0AAA               	incf	___altoft@c+2,f
 10854  168B  1903               	skipnz
 10855  168C  0AAB               	incf	___altoft@c+3,f
 10856  168D  01AF               	clrf	___altoft@sign
 10857  168E  0AAF               	incf	___altoft@sign,f
 10858  168F                     l2874:	
 10859  168F  30FF               	movlw	255
 10860  1690  052B               	andwf	___altoft@c+3,w
 10861  1691  1903               	btfsc	3,2
 10862  1692  2E9F               	goto	l2876
 10863  1693  3001               	movlw	1
 10864  1694                     u2645:	
 10865  1694  36AB               	lsrf	___altoft@c+3,f
 10866  1695  0CAA               	rrf	___altoft@c+2,f
 10867  1696  0CA9               	rrf	___altoft@c+1,f
 10868  1697  0CA8               	rrf	___altoft@c,f
 10869  1698  0B89               	decfsz	9,f
 10870  1699  2E94               	goto	u2645
 10871  169A  3001               	movlw	1
 10872  169B  00AC               	movwf	??___altoft
 10873  169C  082C               	movf	??___altoft,w
 10874  169D  07AE               	addwf	___altoft@exp,f
 10875  169E  2E8F               	goto	l2874
 10876  169F                     l2876:	
 10877  169F  0828               	movf	___altoft@c,w
 10878  16A0  00A0               	movwf	___ftpack@arg
 10879  16A1  0829               	movf	___altoft@c+1,w
 10880  16A2  00A1               	movwf	___ftpack@arg+1
 10881  16A3  082A               	movf	___altoft@c+2,w
 10882  16A4  00A2               	movwf	___ftpack@arg+2
 10883  16A5  082E               	movf	___altoft@exp,w
 10884  16A6  00AC               	movwf	??___altoft
 10885  16A7  082C               	movf	??___altoft,w
 10886  16A8  00A3               	movwf	___ftpack@exp
 10887  16A9  082F               	movf	___altoft@sign,w
 10888  16AA  00AD               	movwf	??___altoft+1
 10889  16AB  082D               	movf	??___altoft+1,w
 10890  16AC  00A4               	movwf	___ftpack@sign
 10891  16AD  3189  21C7         	fcall	___ftpack
 10892  16AF  0020               	movlb	0	; select bank0
 10893  16B0  0820               	movf	?___ftpack,w
 10894  16B1  00A8               	movwf	?___altoft
 10895  16B2  0821               	movf	?___ftpack+1,w
 10896  16B3  00A9               	movwf	?___altoft+1
 10897  16B4  0822               	movf	?___ftpack+2,w
 10898  16B5  00AA               	movwf	?___altoft+2
 10899  16B6  0008               	return
 10900  16B7                     __end_of___altoft:	
 10901                           
 10902                           	psect	text49
 10903  1363                     __ptext49:	
 10904 ;; *************** function ___lbtoft *****************
 10905 ;; Defined at:
 10906 ;;		line 27 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\lbtoft.c"
 10907 ;; Parameters:    Size  Location     Type
 10908 ;;  c               1    wreg     unsigned char 
 10909 ;; Auto vars:     Size  Location     Type
 10910 ;;  c               1   15[BANK0 ] unsigned char 
 10911 ;; Return value:  Size  Location     Type
 10912 ;;                  3    8[BANK0 ] float 
 10913 ;; Registers used:
 10914 ;;		wreg, status,2, status,0, pclath, cstack
 10915 ;; Tracked objects:
 10916 ;;		On entry : 0/0
 10917 ;;		On exit  : 0/0
 10918 ;;		Unchanged: 0/0
 10919 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10920 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10921 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10922 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10923 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10924 ;;Total ram usage:        8 bytes
 10925 ;; Hardware stack levels used:    1
 10926 ;; Hardware stack levels required when called:    8
 10927 ;; This function calls:
 10928 ;;		___ftpack
 10929 ;; This function is called by:
 10930 ;;		_loop
 10931 ;; This function uses a non-reentrant model
 10932 ;;
 10933                           
 10934                           
 10935                           ;psect for function ___lbtoft
 10936  1363                     ___lbtoft:	
 10937                           
 10938                           ;incstack = 0
 10939                           ; Regs used in ___lbtoft: [wreg+status,2+status,0+pclath+cstack]
 10940                           ;___lbtoft@c stored from wreg
 10941  1363  0020               	movlb	0	; select bank0
 10942  1364  00AF               	movwf	___lbtoft@c
 10943  1365  082F               	movf	___lbtoft@c,w
 10944  1366  00AB               	movwf	??___lbtoft
 10945  1367  01AC               	clrf	??___lbtoft+1
 10946  1368  01AD               	clrf	??___lbtoft+2
 10947  1369  082B               	movf	??___lbtoft,w
 10948  136A  00A0               	movwf	___ftpack@arg
 10949  136B  082C               	movf	??___lbtoft+1,w
 10950  136C  00A1               	movwf	___ftpack@arg+1
 10951  136D  082D               	movf	??___lbtoft+2,w
 10952  136E  00A2               	movwf	___ftpack@arg+2
 10953  136F  308E               	movlw	142
 10954  1370  00AE               	movwf	??___lbtoft+3
 10955  1371  082E               	movf	??___lbtoft+3,w
 10956  1372  00A3               	movwf	___ftpack@exp
 10957  1373  01A4               	clrf	___ftpack@sign
 10958  1374  3189  21C7         	fcall	___ftpack
 10959  1376  0020               	movlb	0	; select bank0
 10960  1377  0820               	movf	?___ftpack,w
 10961  1378  00A8               	movwf	?___lbtoft
 10962  1379  0821               	movf	?___ftpack+1,w
 10963  137A  00A9               	movwf	?___lbtoft+1
 10964  137B  0822               	movf	?___ftpack+2,w
 10965  137C  00AA               	movwf	?___lbtoft+2
 10966  137D  0008               	return
 10967  137E                     __end_of___lbtoft:	
 10968                           
 10969                           	psect	text50
 10970  12E8                     __ptext50:	
 10971 ;; *************** function ___lwtoft *****************
 10972 ;; Defined at:
 10973 ;;		line 28 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\lwtoft.c"
 10974 ;; Parameters:    Size  Location     Type
 10975 ;;  c               2    8[BANK0 ] unsigned int 
 10976 ;; Auto vars:     Size  Location     Type
 10977 ;;		None
 10978 ;; Return value:  Size  Location     Type
 10979 ;;                  3    8[BANK0 ] float 
 10980 ;; Registers used:
 10981 ;;		wreg, status,2, status,0, pclath, cstack
 10982 ;; Tracked objects:
 10983 ;;		On entry : 0/0
 10984 ;;		On exit  : 0/0
 10985 ;;		Unchanged: 0/0
 10986 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10987 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10988 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10989 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10990 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10991 ;;Total ram usage:        4 bytes
 10992 ;; Hardware stack levels used:    1
 10993 ;; Hardware stack levels required when called:    8
 10994 ;; This function calls:
 10995 ;;		___ftpack
 10996 ;; This function is called by:
 10997 ;;		_main
 10998 ;; This function uses a non-reentrant model
 10999 ;;
 11000                           
 11001                           
 11002                           ;psect for function ___lwtoft
 11003  12E8                     ___lwtoft:	
 11004                           
 11005                           ;incstack = 0
 11006                           ; Regs used in ___lwtoft: [wreg+status,2+status,0+pclath+cstack]
 11007  12E8  0020               	movlb	0	; select bank0
 11008  12E9  0828               	movf	___lwtoft@c,w
 11009  12EA  00A0               	movwf	___ftpack@arg
 11010  12EB  0829               	movf	___lwtoft@c+1,w
 11011  12EC  00A1               	movwf	___ftpack@arg+1
 11012  12ED  01A2               	clrf	___ftpack@arg+2
 11013  12EE  308E               	movlw	142
 11014  12EF  00AB               	movwf	??___lwtoft
 11015  12F0  082B               	movf	??___lwtoft,w
 11016  12F1  00A3               	movwf	___ftpack@exp
 11017  12F2  01A4               	clrf	___ftpack@sign
 11018  12F3  3189  21C7         	fcall	___ftpack
 11019  12F5  0020               	movlb	0	; select bank0
 11020  12F6  0820               	movf	?___ftpack,w
 11021  12F7  00A8               	movwf	?___lwtoft
 11022  12F8  0821               	movf	?___ftpack+1,w
 11023  12F9  00A9               	movwf	?___lwtoft+1
 11024  12FA  0822               	movf	?___ftpack+2,w
 11025  12FB  00AA               	movwf	?___lwtoft+2
 11026  12FC  0008               	return
 11027  12FD                     __end_of___lwtoft:	
 11028                           
 11029                           	psect	text51
 11030  09C7                     __ptext51:	
 11031 ;; *************** function ___ftpack *****************
 11032 ;; Defined at:
 11033 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\float.c"
 11034 ;; Parameters:    Size  Location     Type
 11035 ;;  arg             3    0[BANK0 ] unsigned um
 11036 ;;  exp             1    3[BANK0 ] unsigned char 
 11037 ;;  sign            1    4[BANK0 ] unsigned char 
 11038 ;; Auto vars:     Size  Location     Type
 11039 ;;		None
 11040 ;; Return value:  Size  Location     Type
 11041 ;;                  3    0[BANK0 ] float 
 11042 ;; Registers used:
 11043 ;;		wreg, status,2, status,0
 11044 ;; Tracked objects:
 11045 ;;		On entry : 0/0
 11046 ;;		On exit  : 0/0
 11047 ;;		Unchanged: 0/0
 11048 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11049 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11050 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11051 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11052 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11053 ;;Total ram usage:        8 bytes
 11054 ;; Hardware stack levels used:    1
 11055 ;; Hardware stack levels required when called:    7
 11056 ;; This function calls:
 11057 ;;		Nothing
 11058 ;; This function is called by:
 11059 ;;		___altoft
 11060 ;;		___awtoft
 11061 ;;		___ftadd
 11062 ;;		___ftdiv
 11063 ;;		___ftmul
 11064 ;;		___lbtoft
 11065 ;;		___lltoft
 11066 ;;		___lwtoft
 11067 ;; This function uses a non-reentrant model
 11068 ;;
 11069                           
 11070                           
 11071                           ;psect for function ___ftpack
 11072  09C7                     ___ftpack:	
 11073                           
 11074                           ;incstack = 0
 11075                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
 11076  09C7  0020               	movlb	0	; select bank0
 11077  09C8  0823               	movf	___ftpack@exp,w
 11078  09C9  1903               	btfsc	3,2
 11079  09CA  29D0               	goto	l2692
 11080  09CB  0822               	movf	___ftpack@arg+2,w
 11081  09CC  0421               	iorwf	___ftpack@arg+1,w
 11082  09CD  0420               	iorwf	___ftpack@arg,w
 11083  09CE  1D03               	skipz
 11084  09CF  29E1               	goto	l2698
 11085  09D0                     l2692:	
 11086  09D0  3000               	movlw	0
 11087  09D1  00A0               	movwf	?___ftpack
 11088  09D2  3000               	movlw	0
 11089  09D3  00A1               	movwf	?___ftpack+1
 11090  09D4  3000               	movlw	0
 11091  09D5  00A2               	movwf	?___ftpack+2
 11092  09D6  0008               	return
 11093  09D7                     l2696:	
 11094  09D7  3001               	movlw	1
 11095  09D8  00A5               	movwf	??___ftpack
 11096  09D9  0825               	movf	??___ftpack,w
 11097  09DA  07A3               	addwf	___ftpack@exp,f
 11098  09DB  3001               	movlw	1
 11099  09DC                     u2265:	
 11100  09DC  36A2               	lsrf	___ftpack@arg+2,f
 11101  09DD  0CA1               	rrf	___ftpack@arg+1,f
 11102  09DE  0CA0               	rrf	___ftpack@arg,f
 11103  09DF  0B89               	decfsz	9,f
 11104  09E0  29DC               	goto	u2265
 11105  09E1                     l2698:	
 11106  09E1  30FE               	movlw	254
 11107  09E2  0522               	andwf	___ftpack@arg+2,w
 11108  09E3  1903               	btfsc	3,2
 11109  09E4  29FA               	goto	l685
 11110  09E5  29D7               	goto	l2696
 11111  09E6                     l2700:	
 11112  09E6  3001               	movlw	1
 11113  09E7  00A5               	movwf	??___ftpack
 11114  09E8  0825               	movf	??___ftpack,w
 11115  09E9  07A3               	addwf	___ftpack@exp,f
 11116  09EA  3001               	movlw	1
 11117  09EB  07A0               	addwf	___ftpack@arg,f
 11118  09EC  3000               	movlw	0
 11119  09ED  1803               	skipnc
 11120  09EE  3001               	movlw	1
 11121  09EF  07A1               	addwf	___ftpack@arg+1,f
 11122  09F0  3000               	movlw	0
 11123  09F1  1803               	skipnc
 11124  09F2  3001               	movlw	1
 11125  09F3  07A2               	addwf	___ftpack@arg+2,f
 11126  09F4  3001               	movlw	1
 11127  09F5                     u2285:	
 11128  09F5  36A2               	lsrf	___ftpack@arg+2,f
 11129  09F6  0CA1               	rrf	___ftpack@arg+1,f
 11130  09F7  0CA0               	rrf	___ftpack@arg,f
 11131  09F8  0B89               	decfsz	9,f
 11132  09F9  29F5               	goto	u2285
 11133  09FA                     l685:	
 11134  09FA  30FF               	movlw	255
 11135  09FB  0522               	andwf	___ftpack@arg+2,w
 11136  09FC  1903               	btfsc	3,2
 11137  09FD  2A07               	goto	l2708
 11138  09FE  29E6               	goto	l2700
 11139  09FF                     l2706:	
 11140  09FF  3001               	movlw	1
 11141  0A00  02A3               	subwf	___ftpack@exp,f
 11142  0A01  3001               	movlw	1
 11143  0A02                     u2305:	
 11144  0A02  35A0               	lslf	___ftpack@arg,f
 11145  0A03  0DA1               	rlf	___ftpack@arg+1,f
 11146  0A04  0DA2               	rlf	___ftpack@arg+2,f
 11147  0A05  0B89               	decfsz	9,f
 11148  0A06  2A02               	goto	u2305
 11149  0A07                     l2708:	
 11150  0A07  1BA1               	btfsc	___ftpack@arg+1,7
 11151  0A08  2A0D               	goto	l692
 11152  0A09  3002               	movlw	2
 11153  0A0A  0223               	subwf	___ftpack@exp,w
 11154  0A0B  1803               	skipnc
 11155  0A0C  29FF               	goto	l2706
 11156  0A0D                     l692:	
 11157  0A0D  1823               	btfsc	___ftpack@exp,0
 11158  0A0E  2A15               	goto	l693
 11159  0A0F  30FF               	movlw	255
 11160  0A10  05A0               	andwf	___ftpack@arg,f
 11161  0A11  307F               	movlw	127
 11162  0A12  05A1               	andwf	___ftpack@arg+1,f
 11163  0A13  30FF               	movlw	255
 11164  0A14  05A2               	andwf	___ftpack@arg+2,f
 11165  0A15                     l693:	
 11166  0A15  1003               	clrc
 11167  0A16  0CA3               	rrf	___ftpack@exp,f
 11168  0A17  0823               	movf	___ftpack@exp,w
 11169  0A18  00A5               	movwf	??___ftpack
 11170  0A19  01A6               	clrf	??___ftpack+1
 11171  0A1A  01A7               	clrf	??___ftpack+2
 11172  0A1B  3010               	movlw	16
 11173  0A1C                     u2345:	
 11174  0A1C  35A5               	lslf	??___ftpack,f
 11175  0A1D  0DA6               	rlf	??___ftpack+1,f
 11176  0A1E  0DA7               	rlf	??___ftpack+2,f
 11177  0A1F  0B89               	decfsz	9,f
 11178  0A20  2A1C               	goto	u2345
 11179  0A21  0825               	movf	??___ftpack,w
 11180  0A22  04A0               	iorwf	___ftpack@arg,f
 11181  0A23  0826               	movf	??___ftpack+1,w
 11182  0A24  04A1               	iorwf	___ftpack@arg+1,f
 11183  0A25  0827               	movf	??___ftpack+2,w
 11184  0A26  04A2               	iorwf	___ftpack@arg+2,f
 11185  0A27  0824               	movf	___ftpack@sign,w
 11186  0A28  1903               	btfsc	3,2
 11187  0A29  0008               	return
 11188  0A2A  17A2               	bsf	___ftpack@arg+2,7
 11189  0A2B  0008               	return
 11190  0A2C                     __end_of___ftpack:	
 11191                           
 11192                           	psect	intentry
 11193  0004                     __pintentry:	
 11194 ;; *************** function _ISR *****************
 11195 ;; Defined at:
 11196 ;;		line 14 in file "main.c"
 11197 ;; Parameters:    Size  Location     Type
 11198 ;;		None
 11199 ;; Auto vars:     Size  Location     Type
 11200 ;;		None
 11201 ;; Return value:  Size  Location     Type
 11202 ;;                  1    wreg      void 
 11203 ;; Registers used:
 11204 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11205 ;; Tracked objects:
 11206 ;;		On entry : 0/0
 11207 ;;		On exit  : 0/0
 11208 ;;		Unchanged: 0/0
 11209 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11210 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11211 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11212 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11213 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11214 ;;Total ram usage:        0 bytes
 11215 ;; Hardware stack levels used:    1
 11216 ;; Hardware stack levels required when called:    6
 11217 ;; This function calls:
 11218 ;;		_nrf24l01ISR
 11219 ;; This function is called by:
 11220 ;;		Interrupt level 1
 11221 ;; This function uses a non-reentrant model
 11222 ;;
 11223                           
 11224  0004                     _ISR:	
 11225                           
 11226                           ;incstack = 0
 11227  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
 11228                           
 11229                           ; Regs used in _ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 11230  0005  3180               	pagesel	$
 11231                           
 11232                           ;main.c: 16: if (PIR0bits.INTF){
 11233  0006  0020               	movlb	0	; select bank0
 11234  0007  1C10               	btfss	16,0	;volatile
 11235  0008  280D               	goto	i1l171
 11236                           
 11237                           ;main.c: 17: nrf24l01ISR();
 11238  0009  3188  2038         	fcall	_nrf24l01ISR
 11239                           
 11240                           ;main.c: 18: PIR0bits.INTF = 0;
 11241  000B  0020               	movlb	0	; select bank0
 11242  000C  1010               	bcf	16,0	;volatile
 11243  000D                     i1l171:	
 11244  000D  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
 11245  000E  0009               	retfie
 11246  000F                     __end_of_ISR:	
 11247                           
 11248                           	psect	text53
 11249  0838                     __ptext53:	
 11250 ;; *************** function _nrf24l01ISR *****************
 11251 ;; Defined at:
 11252 ;;		line 246 in file "nrf24l01.c"
 11253 ;; Parameters:    Size  Location     Type
 11254 ;;		None
 11255 ;; Auto vars:     Size  Location     Type
 11256 ;;  status          1   12[COMMON] struct .
 11257 ;; Return value:  Size  Location     Type
 11258 ;;                  1    wreg      void 
 11259 ;; Registers used:
 11260 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11261 ;; Tracked objects:
 11262 ;;		On entry : 0/0
 11263 ;;		On exit  : 0/0
 11264 ;;		Unchanged: 0/0
 11265 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11266 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11267 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11268 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11269 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11270 ;;Total ram usage:        2 bytes
 11271 ;; Hardware stack levels used:    1
 11272 ;; Hardware stack levels required when called:    5
 11273 ;; This function calls:
 11274 ;;		_exception
 11275 ;;		_nrf24l01CheckACK
 11276 ;;		_nrf24l01ReceivePacket
 11277 ;;		i1_nrf24l01Send
 11278 ;;		i1_nrf24l01SetRXMode
 11279 ;; This function is called by:
 11280 ;;		_ISR
 11281 ;; This function uses a non-reentrant model
 11282 ;;
 11283                           
 11284                           
 11285                           ;psect for function _nrf24l01ISR
 11286  0838                     _nrf24l01ISR:	
 11287                           
 11288                           ;nrf24l01.c: 248: n_STATUS_t status;;nrf24l01.c: 249: status.byte = nrf24l01Send((unsign
      +                          ed) 0b00000000 | (unsigned) 0x07, 0);
 11289                           
 11290                           ;incstack = 0
 11291                           ; Regs used in _nrf24l01ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 11292  0838  01F1               	clrf	i1nrf24l01Send@data
 11293  0839  3007               	movlw	7
 11294  083A  3193  2348  3188   	fcall	i1_nrf24l01Send
 11295  083D  00FB               	movwf	??_nrf24l01ISR
 11296  083E  087B               	movf	??_nrf24l01ISR,w
 11297  083F  00FC               	movwf	nrf24l01ISR@status
 11298                           
 11299                           ;nrf24l01.c: 254: };nrf24l01.c: 257: if (status.byte == 0xFF){
 11300  0840  0A7C               	incf	nrf24l01ISR@status,w
 11301  0841  1D03               	btfss	3,2
 11302  0842  2847               	goto	i1l3990
 11303                           
 11304                           ;nrf24l01.c: 258: exception(2);
 11305  0843  3002               	movlw	2
 11306  0844  3180  2002  3188   	fcall	_exception
 11307  0847                     i1l3990:	
 11308                           
 11309                           ;nrf24l01.c: 259: };nrf24l01.c: 261: if (status.TX_DS){
 11310  0847  1EFC               	btfss	nrf24l01ISR@status,5
 11311  0848  2857               	goto	i1l3998
 11312                           
 11313                           ;nrf24l01.c: 264: nrf24l01.TXBusy = 0;
 11314  0849  107D               	bcf	_nrf24l01,0	;volatile
 11315                           
 11316                           ;nrf24l01.c: 267: if (!nrf24l01.RXMode){
 11317  084A  197D               	btfsc	_nrf24l01,2	;volatile
 11318  084B  2857               	goto	i1l3998
 11319                           
 11320                           ;nrf24l01.c: 268: if (TXPacket->packetData.ACKRequest){
 11321  084C  0023               	movlb	3	; select bank3
 11322  084D  0845               	movf	_TXPacket^(0+384),w
 11323  084E  0086               	movwf	6
 11324  084F  0846               	movf	(_TXPacket+1)^(0+384),w
 11325  0850  0087               	movwf	7
 11326  0851  1D01               	btfss	1,2
 11327  0852  2857               	goto	i1l3998
 11328                           
 11329                           ;nrf24l01.c: 271: nrf24l01SetRXMode(1);
 11330  0853  3001               	movlw	1
 11331  0854  3196  26B7  3188   	fcall	i1_nrf24l01SetRXMode
 11332  0857                     i1l3998:	
 11333                           
 11334                           ;nrf24l01.c: 272: };nrf24l01.c: 273: };nrf24l01.c: 274: };nrf24l01.c: 277: if (status.RX
      +                          _DR){
 11335  0857  1F7C               	btfss	nrf24l01ISR@status,6
 11336  0858  2879               	goto	i1l4012
 11337                           
 11338                           ;nrf24l01.c: 280: if (!nrf24l01.RXPending){
 11339  0859  18FD               	btfsc	_nrf24l01,1	;volatile
 11340  085A  2878               	goto	i1l327
 11341                           
 11342                           ;nrf24l01.c: 283: nrf24l01.RXPending = 1;
 11343  085B  14FD               	bsf	_nrf24l01,1	;volatile
 11344                           
 11345                           ;nrf24l01.c: 285: nrf24l01ReceivePacket();
 11346  085C  3188  2081  3188   	fcall	_nrf24l01ReceivePacket
 11347                           
 11348                           ;nrf24l01.c: 288: RXPacket.packetData.RPD = nrf24l01Send((unsigned) 0b00000000 | (unsign
      +                          ed) 0x09, 0);
 11349  085F  01F1               	clrf	i1nrf24l01Send@data
 11350  0860  3009               	movlw	9
 11351  0861  3193  2348  3188   	fcall	i1_nrf24l01Send
 11352  0864  00FB               	movwf	??_nrf24l01ISR
 11353  0865  0024               	movlb	4	; select bank4
 11354  0866  0820               	movf	_RXPacket^(0+512),w
 11355  0867  067B               	xorwf	??_nrf24l01ISR,w
 11356  0868  39FE               	andlw	-2
 11357  0869  067B               	xorwf	??_nrf24l01ISR,w
 11358  086A  00A0               	movwf	_RXPacket^(0+512)
 11359                           
 11360                           ;nrf24l01.c: 291: RXPacket.packetData.Pipe = status.RX_P_NO;
 11361  086B  0C7C               	rrf	nrf24l01ISR@status,w
 11362  086C  3907               	andlw	7
 11363  086D  00FB               	movwf	??_nrf24l01ISR
 11364  086E  0EFB               	swapf	??_nrf24l01ISR,f
 11365  086F  0820               	movf	_RXPacket^(0+512),w
 11366  0870  067B               	xorwf	??_nrf24l01ISR,w
 11367  0871  398F               	andlw	-113
 11368  0872  067B               	xorwf	??_nrf24l01ISR,w
 11369  0873  00A0               	movwf	_RXPacket^(0+512)
 11370                           
 11371                           ;nrf24l01.c: 293: nrf24l01CheckACK();
 11372  0874  3194  24FF  3188   	fcall	_nrf24l01CheckACK
 11373                           
 11374                           ;nrf24l01.c: 294: }
 11375  0877  2879               	goto	i1l4012
 11376  0878                     i1l327:	
 11377                           
 11378                           ;nrf24l01.c: 297: else{;nrf24l01.c: 300: status.RX_DR = 0;
 11379  0878  137C               	bcf	nrf24l01ISR@status,6
 11380  0879                     i1l4012:	
 11381                           
 11382                           ;nrf24l01.c: 301: };nrf24l01.c: 303: };nrf24l01.c: 306: nrf24l01Send((unsigned) 0b001000
      +                          00 | (unsigned) 0x07, status.byte);
 11383  0879  087C               	movf	nrf24l01ISR@status,w
 11384  087A  00FB               	movwf	??_nrf24l01ISR
 11385  087B  087B               	movf	??_nrf24l01ISR,w
 11386  087C  00F1               	movwf	i1nrf24l01Send@data
 11387  087D  3027               	movlw	39
 11388  087E  3193  2348         	fcall	i1_nrf24l01Send
 11389  0880  0008               	return
 11390  0881                     __end_of_nrf24l01ISR:	
 11391                           
 11392                           	psect	text54
 11393  0881                     __ptext54:	
 11394 ;; *************** function _nrf24l01ReceivePacket *****************
 11395 ;; Defined at:
 11396 ;;		line 135 in file "nrf24l01.c"
 11397 ;; Parameters:    Size  Location     Type
 11398 ;;		None
 11399 ;; Auto vars:     Size  Location     Type
 11400 ;;  i               1   10[COMMON] unsigned char 
 11401 ;;  width           1    9[COMMON] unsigned char 
 11402 ;; Return value:  Size  Location     Type
 11403 ;;                  1    wreg      void 
 11404 ;; Registers used:
 11405 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11406 ;; Tracked objects:
 11407 ;;		On entry : 0/0
 11408 ;;		On exit  : 0/0
 11409 ;;		Unchanged: 0/0
 11410 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11411 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11412 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11413 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11414 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11415 ;;Total ram usage:        3 bytes
 11416 ;; Hardware stack levels used:    1
 11417 ;; Hardware stack levels required when called:    3
 11418 ;; This function calls:
 11419 ;;		_nrf24l01CEHigh
 11420 ;;		_nrf24l01CELow
 11421 ;;		_nrf24l01SPIEnd
 11422 ;;		_nrf24l01SPISend
 11423 ;;		_nrf24l01SPIStart
 11424 ;;		i1_memset
 11425 ;;		i1_nrf24l01Send
 11426 ;; This function is called by:
 11427 ;;		_nrf24l01ISR
 11428 ;; This function uses a non-reentrant model
 11429 ;;
 11430                           
 11431                           
 11432                           ;psect for function _nrf24l01ReceivePacket
 11433  0881                     _nrf24l01ReceivePacket:	
 11434                           
 11435                           ;nrf24l01.c: 138: memset(RXPacket.Message, 0 ,sizeof(RXPacket.Message));
 11436                           
 11437                           ;incstack = 0
 11438                           ; Regs used in _nrf24l01ReceivePacket: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 11439  0881  3021               	movlw	low (_RXPacket+1)
 11440  0882  00F0               	movwf	i1memset@p1
 11441  0883  3002               	movlw	high (_RXPacket+1)
 11442  0884  00F1               	movwf	i1memset@p1+1
 11443  0885  3000               	movlw	0
 11444  0886  00F2               	movwf	i1memset@c
 11445  0887  00F3               	movwf	i1memset@c+1
 11446  0888  3020               	movlw	32
 11447  0889  00F4               	movwf	i1memset@n
 11448  088A  3000               	movlw	0
 11449  088B  00F5               	movwf	i1memset@n+1
 11450  088C  3192  22FD  3188   	fcall	i1_memset
 11451                           
 11452                           ;nrf24l01.c: 139: RXPacket.packetData.byte = 0x00;
 11453  088F  0024               	movlb	4	; select bank4
 11454  0890  01A0               	clrf	_RXPacket^(0+512)
 11455                           
 11456                           ;nrf24l01.c: 142: unsigned char width = nrf24l01Send((unsigned) 0b01100000, 0);
 11457  0891  01F1               	clrf	i1nrf24l01Send@data
 11458  0892  3060               	movlw	96
 11459  0893  3193  2348  3188   	fcall	i1_nrf24l01Send
 11460  0896  00F8               	movwf	??_nrf24l01ReceivePacket
 11461  0897  0878               	movf	??_nrf24l01ReceivePacket,w
 11462  0898  00F9               	movwf	nrf24l01ReceivePacket@width
 11463                           
 11464                           ;nrf24l01.c: 143: unsigned char i = 0;
 11465  0899  01FA               	clrf	nrf24l01ReceivePacket@i
 11466                           
 11467                           ;nrf24l01.c: 146: nrf24l01CELow();
 11468  089A  3192  2254  3188   	fcall	_nrf24l01CELow
 11469                           
 11470                           ;nrf24l01.c: 149: nrf24l01SPIStart();
 11471  089D  3192  226F  3188   	fcall	_nrf24l01SPIStart
 11472                           
 11473                           ;nrf24l01.c: 152: nrf24l01SPISend((unsigned) 0b01100001);
 11474  08A0  3061               	movlw	97
 11475  08A1  3192  2280  3188   	fcall	_nrf24l01SPISend
 11476                           
 11477                           ;nrf24l01.c: 155: RXPacket.packetData.byte = nrf24l01SPISend(0);
 11478  08A4  3000               	movlw	0
 11479  08A5  3192  2280  3188   	fcall	_nrf24l01SPISend
 11480  08A8  00F8               	movwf	??_nrf24l01ReceivePacket
 11481  08A9  0878               	movf	??_nrf24l01ReceivePacket,w
 11482  08AA  0024               	movlb	4	; select bank4
 11483  08AB  00A0               	movwf	_RXPacket^(0+512)
 11484                           
 11485                           ;nrf24l01.c: 156: width--;
 11486  08AC  3001               	movlw	1
 11487  08AD  02F9               	subwf	nrf24l01ReceivePacket@width,f
 11488                           
 11489                           ;nrf24l01.c: 158: for (i = 0; (i < width) && (i < sizeof(RXPacket.Message)); i++){
 11490  08AE  01FA               	clrf	nrf24l01ReceivePacket@i
 11491  08AF  28C0               	goto	i1l3836
 11492  08B0                     i1l3832:	
 11493                           
 11494                           ;nrf24l01.c: 160: RXPacket.Message[i] = nrf24l01SPISend(0);
 11495  08B0  3000               	movlw	0
 11496  08B1  3192  2280  3188   	fcall	_nrf24l01SPISend
 11497  08B4  00F8               	movwf	??_nrf24l01ReceivePacket
 11498  08B5  087A               	movf	nrf24l01ReceivePacket@i,w
 11499  08B6  3E21               	addlw	(low ((_RXPacket| (0+512)+1)))& (0+255)
 11500  08B7  0086               	movwf	6
 11501  08B8  3002               	movlw	2	; select bank4/5
 11502  08B9  0087               	movwf	7
 11503  08BA  0878               	movf	??_nrf24l01ReceivePacket,w
 11504  08BB  0081               	movwf	1
 11505  08BC  3001               	movlw	1
 11506  08BD  00F8               	movwf	??_nrf24l01ReceivePacket
 11507  08BE  0878               	movf	??_nrf24l01ReceivePacket,w
 11508  08BF  07FA               	addwf	nrf24l01ReceivePacket@i,f
 11509  08C0                     i1l3836:	
 11510  08C0  0879               	movf	nrf24l01ReceivePacket@width,w
 11511  08C1  027A               	subwf	nrf24l01ReceivePacket@i,w
 11512  08C2  1803               	skipnc
 11513  08C3  28C8               	goto	i1l3840
 11514  08C4  3020               	movlw	32
 11515  08C5  027A               	subwf	nrf24l01ReceivePacket@i,w
 11516  08C6  1C03               	skipc
 11517  08C7  28B0               	goto	i1l3832
 11518  08C8                     i1l3840:	
 11519                           
 11520                           ;nrf24l01.c: 161: };nrf24l01.c: 164: nrf24l01SPIEnd();
 11521  08C8  3192  2260  3188   	fcall	_nrf24l01SPIEnd
 11522                           
 11523                           ;nrf24l01.c: 167: nrf24l01CEHigh();
 11524  08CB  3192  2251         	fcall	_nrf24l01CEHigh
 11525  08CD  0008               	return
 11526  08CE                     __end_of_nrf24l01ReceivePacket:	
 11527                           
 11528                           	psect	text55
 11529  12FD                     __ptext55:	
 11530 ;; *************** function i1_memset *****************
 11531 ;; Defined at:
 11532 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\memset.c"
 11533 ;; Parameters:    Size  Location     Type
 11534 ;;  p1              2    0[COMMON] PTR void 
 11535 ;;		 -> RXPacket(33), main@packet(33), loop@packet(33), 
 11536 ;;  c               2    2[COMMON] int 
 11537 ;;  n               2    4[COMMON] unsigned int 
 11538 ;; Auto vars:     Size  Location     Type
 11539 ;;  memset          2    6[COMMON] PTR unsigned char 
 11540 ;;		 -> RXPacket(33), main@packet(33), loop@packet(33), 
 11541 ;; Return value:  Size  Location     Type
 11542 ;;                  1    wreg      PTR void 
 11543 ;; Registers used:
 11544 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 11545 ;; Tracked objects:
 11546 ;;		On entry : 0/0
 11547 ;;		On exit  : 0/0
 11548 ;;		Unchanged: 0/0
 11549 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11550 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11551 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11552 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11553 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11554 ;;Total ram usage:        8 bytes
 11555 ;; Hardware stack levels used:    1
 11556 ;; This function calls:
 11557 ;;		Nothing
 11558 ;; This function is called by:
 11559 ;;		_nrf24l01ReceivePacket
 11560 ;; This function uses a non-reentrant model
 11561 ;;
 11562                           
 11563                           
 11564                           ;psect for function i1_memset
 11565  12FD                     i1_memset:	
 11566                           
 11567                           ;incstack = 0
 11568                           ; Regs used in i1_memset: [wreg+fsr1l+fsr1h+status,2+status,0]
 11569  12FD  0871               	movf	i1memset@p1+1,w
 11570  12FE  00F7               	movwf	i1memset@p+1
 11571  12FF  0870               	movf	i1memset@p1,w
 11572  1300  00F6               	movwf	i1memset@p
 11573  1301                     i1l3722:	
 11574  1301  3001               	movlw	1
 11575  1302  02F4               	subwf	i1memset@n,f
 11576  1303  3000               	movlw	0
 11577  1304  3BF5               	subwfb	i1memset@n+1,f
 11578  1305  0A74               	incf	i1memset@n,w
 11579  1306  1903               	btfsc	3,2
 11580  1307  0A75               	incf	i1memset@n+1,w
 11581  1308  1903               	btfsc	3,2
 11582  1309  0008               	return
 11583  130A  0876               	movf	i1memset@p,w
 11584  130B  0086               	movwf	6
 11585  130C  0877               	movf	i1memset@p+1,w
 11586  130D  0087               	movwf	7
 11587  130E  0872               	movf	i1memset@c,w
 11588  130F  0081               	movwf	1
 11589  1310  3001               	movlw	1
 11590  1311  07F6               	addwf	i1memset@p,f
 11591  1312  3000               	movlw	0
 11592  1313  3DF7               	addwfc	i1memset@p+1,f
 11593  1314  2B01               	goto	i1l3722
 11594  1315                     __end_ofi1_memset:	
 11595                           ;	Return value of i1_memset is never used
 11596                           
 11597                           
 11598                           	psect	text56
 11599  14FF                     __ptext56:	
 11600 ;; *************** function _nrf24l01CheckACK *****************
 11601 ;; Defined at:
 11602 ;;		line 98 in file "nrf24l01.c"
 11603 ;; Parameters:    Size  Location     Type
 11604 ;;		None
 11605 ;; Auto vars:     Size  Location     Type
 11606 ;;		None
 11607 ;; Return value:  Size  Location     Type
 11608 ;;                  1    wreg      void 
 11609 ;; Registers used:
 11610 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11611 ;; Tracked objects:
 11612 ;;		On entry : 0/0
 11613 ;;		On exit  : 0/0
 11614 ;;		Unchanged: 0/0
 11615 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11616 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11617 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11618 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11619 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11620 ;;Total ram usage:        3 bytes
 11621 ;; Hardware stack levels used:    1
 11622 ;; Hardware stack levels required when called:    4
 11623 ;; This function calls:
 11624 ;;		_strcmp
 11625 ;;		i1_nrf24l01SetRXMode
 11626 ;; This function is called by:
 11627 ;;		_nrf24l01ISR
 11628 ;; This function uses a non-reentrant model
 11629 ;;
 11630                           
 11631                           
 11632                           ;psect for function _nrf24l01CheckACK
 11633  14FF                     _nrf24l01CheckACK:	
 11634                           
 11635                           ;nrf24l01.c: 102: if (!RXPacket.packetData.IsACK){
 11636                           
 11637                           ;incstack = 0
 11638                           ; Regs used in _nrf24l01CheckACK: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 11639  14FF  0024               	movlb	4	; select bank4
 11640  1500  1DA0               	btfss	_RXPacket^(0+512),3
 11641  1501  0008               	return
 11642                           
 11643                           ;nrf24l01.c: 104: };nrf24l01.c: 107: nrf24l01.RXPending = 0;
 11644                           
 11645                           ;nrf24l01.c: 103: return;
 11646  1502  10FD               	bcf	_nrf24l01,1	;volatile
 11647                           
 11648                           ;nrf24l01.c: 110: if (!TXPacket->packetData.ACKRequest){
 11649  1503  0023               	movlb	3	; select bank3
 11650  1504  0845               	movf	_TXPacket^(0+384),w
 11651  1505  0086               	movwf	6
 11652  1506  0846               	movf	(_TXPacket+1)^(0+384),w
 11653  1507  0087               	movwf	7
 11654  1508  1D01               	btfss	1,2
 11655  1509  0008               	return
 11656                           
 11657                           ;nrf24l01.c: 112: };nrf24l01.c: 115: if (strcmp(TXPacket->Message, RXPacket.Message) != 
      +                          0){
 11658                           
 11659                           ;nrf24l01.c: 111: return;
 11660  150A  0845               	movf	_TXPacket^(0+384),w
 11661  150B  3E01               	addlw	1
 11662  150C  00F7               	movwf	??_nrf24l01CheckACK
 11663  150D  3000               	movlw	0
 11664  150E  3D46               	addwfc	(_TXPacket+1)^(0+384),w
 11665  150F  00F8               	movwf	??_nrf24l01CheckACK+1
 11666  1510  0877               	movf	??_nrf24l01CheckACK,w
 11667  1511  00F0               	movwf	strcmp@s1
 11668  1512  0878               	movf	??_nrf24l01CheckACK+1,w
 11669  1513  00F1               	movwf	strcmp@s1+1
 11670  1514  3021               	movlw	(low ((_RXPacket| (0+512)+1)))& (0+255)
 11671  1515  00F9               	movwf	??_nrf24l01CheckACK+2
 11672  1516  0879               	movf	??_nrf24l01CheckACK+2,w
 11673  1517  00F2               	movwf	strcmp@s2
 11674  1518  3194  24B0  3194   	fcall	_strcmp
 11675  151B  0870               	movf	?_strcmp,w
 11676  151C  0471               	iorwf	?_strcmp+1,w
 11677  151D  1D03               	btfss	3,2
 11678  151E  0008               	return
 11679                           
 11680                           ;nrf24l01.c: 117: };nrf24l01.c: 124: TXPacket->packetData.ACKRequest = 0;
 11681                           
 11682                           ;nrf24l01.c: 116: return;
 11683  151F  0023               	movlb	3	; select bank3
 11684  1520  0845               	movf	_TXPacket^(0+384),w
 11685  1521  0086               	movwf	6
 11686  1522  0846               	movf	(_TXPacket+1)^(0+384),w
 11687  1523  0087               	movwf	7
 11688  1524  1101               	bcf	1,2
 11689                           
 11690                           ;nrf24l01.c: 127: nrf24l01SetRXMode(0);
 11691  1525  3000               	movlw	0
 11692  1526  3196  26B7         	fcall	i1_nrf24l01SetRXMode
 11693  1528  0008               	return
 11694  1529                     __end_of_nrf24l01CheckACK:	
 11695                           
 11696                           	psect	text57
 11697  16B7                     __ptext57:	
 11698 ;; *************** function i1_nrf24l01SetRXMode *****************
 11699 ;; Defined at:
 11700 ;;		line 54 in file "nrf24l01.c"
 11701 ;; Parameters:    Size  Location     Type
 11702 ;;  rxMode          1    wreg     unsigned char 
 11703 ;; Auto vars:     Size  Location     Type
 11704 ;;  rxMode          1    6[COMMON] unsigned char 
 11705 ;;  nrf24l01SetR    1    5[COMMON] struct .
 11706 ;; Return value:  Size  Location     Type
 11707 ;;                  1    wreg      void 
 11708 ;; Registers used:
 11709 ;;		wreg, status,2, status,0, pclath, cstack
 11710 ;; Tracked objects:
 11711 ;;		On entry : 0/0
 11712 ;;		On exit  : 0/0
 11713 ;;		Unchanged: 0/0
 11714 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11715 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11716 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11717 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11718 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11719 ;;Total ram usage:        3 bytes
 11720 ;; Hardware stack levels used:    1
 11721 ;; Hardware stack levels required when called:    3
 11722 ;; This function calls:
 11723 ;;		_nrf24l01CEHigh
 11724 ;;		_nrf24l01CELow
 11725 ;;		i1_nrf24l01Send
 11726 ;; This function is called by:
 11727 ;;		_nrf24l01CheckACK
 11728 ;;		_nrf24l01ISR
 11729 ;; This function uses a non-reentrant model
 11730 ;;
 11731                           
 11732                           
 11733                           ;psect for function i1_nrf24l01SetRXMode
 11734  16B7                     i1_nrf24l01SetRXMode:	
 11735                           
 11736                           ;incstack = 0
 11737                           ; Regs used in i1_nrf24l01SetRXMode: [wreg+status,2+status,0+pclath+cstack]
 11738                           ;i1nrf24l01SetRXMode@rxMode stored from wreg
 11739  16B7  00F6               	movwf	i1nrf24l01SetRXMode@rxMode
 11740                           
 11741                           ;nrf24l01.c: 56: n_CONFIG_t config;;nrf24l01.c: 59: config.byte = nrf24l01Send((unsigned
      +                          ) 0b00000000 | (unsigned) 0x00, 0);
 11742  16B8  01F1               	clrf	i1nrf24l01Send@data
 11743  16B9  3000               	movlw	0
 11744  16BA  3193  2348  3196   	fcall	i1_nrf24l01Send
 11745  16BD  00F4               	movwf	??i1_nrf24l01SetRXMode
 11746  16BE  0874               	movf	??i1_nrf24l01SetRXMode,w
 11747  16BF  00F5               	movwf	i1nrf24l01SetRXMode@config
 11748                           
 11749                           ;nrf24l01.c: 62: if (config.PRIM_RX != rxMode){
 11750  16C0  0875               	movf	i1nrf24l01SetRXMode@config,w
 11751  16C1  3901               	andlw	1
 11752  16C2  0676               	xorwf	i1nrf24l01SetRXMode@rxMode,w
 11753  16C3  1903               	skipnz
 11754  16C4  2EF0               	goto	i1l3714
 11755                           
 11756                           ;nrf24l01.c: 65: nrf24l01CELow();
 11757  16C5  3192  2254  3196   	fcall	_nrf24l01CELow
 11758                           
 11759                           ;nrf24l01.c: 66: _delay((unsigned long)((200)*(32000000/4000000.0)));
 11760  16C8  30E4               	movlw	228
 11761  16C9                     u459_27:	
 11762  16C9  3200               	nop2
 11763  16CA  3200               	nop2
 11764  16CB  0B89               	decfsz	9,f
 11765  16CC  2EC9               	goto	u459_27
 11766  16CD  3200               	nop2
 11767  16CE  3200               	nop2
 11768                           
 11769                           ;nrf24l01.c: 69: config.PRIM_RX = rxMode;
 11770  16CF  0876               	movf	i1nrf24l01SetRXMode@rxMode,w
 11771  16D0  3901               	andlw	1
 11772  16D1  1075               	bcf	i1nrf24l01SetRXMode@config,0
 11773  16D2  1D03               	skipz
 11774  16D3  1475               	bsf	i1nrf24l01SetRXMode@config,0
 11775                           
 11776                           ;nrf24l01.c: 70: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x00, config.byte);
 11777  16D4  0875               	movf	i1nrf24l01SetRXMode@config,w
 11778  16D5  00F4               	movwf	??i1_nrf24l01SetRXMode
 11779  16D6  0874               	movf	??i1_nrf24l01SetRXMode,w
 11780  16D7  00F1               	movwf	i1nrf24l01Send@data
 11781  16D8  3020               	movlw	32
 11782  16D9  3193  2348  3196   	fcall	i1_nrf24l01Send
 11783                           
 11784                           ;nrf24l01.c: 73: _delay((unsigned long)((200)*(32000000/4000000.0)));
 11785  16DC  30E4               	movlw	228
 11786  16DD                     u460_27:	
 11787  16DD  3200               	nop2
 11788  16DE  3200               	nop2
 11789  16DF  0B89               	decfsz	9,f
 11790  16E0  2EDD               	goto	u460_27
 11791  16E1  3200               	nop2
 11792  16E2  3200               	nop2
 11793                           
 11794                           ;nrf24l01.c: 76: if (rxMode){
 11795  16E3  0876               	movf	i1nrf24l01SetRXMode@rxMode,w
 11796  16E4  1903               	btfsc	3,2
 11797  16E5  2EF0               	goto	i1l3714
 11798                           
 11799                           ;nrf24l01.c: 77: nrf24l01CEHigh();
 11800  16E6  3192  2251  3196   	fcall	_nrf24l01CEHigh
 11801                           
 11802                           ;nrf24l01.c: 78: _delay((unsigned long)((200)*(32000000/4000000.0)));
 11803  16E9  30E4               	movlw	228
 11804  16EA                     u461_27:	
 11805  16EA  3200               	nop2
 11806  16EB  3200               	nop2
 11807  16EC  0B89               	decfsz	9,f
 11808  16ED  2EEA               	goto	u461_27
 11809  16EE  3200               	nop2
 11810  16EF  3200               	nop2
 11811  16F0                     i1l3714:	
 11812                           
 11813                           ;nrf24l01.c: 79: };nrf24l01.c: 80: };nrf24l01.c: 83: nrf24l01.RXMode = rxMode;
 11814  16F0  0876               	movf	i1nrf24l01SetRXMode@rxMode,w
 11815  16F1  3901               	andlw	1
 11816  16F2  117D               	bcf	_nrf24l01,2	;volatile
 11817  16F3  1D03               	skipz
 11818  16F4  157D               	bsf	_nrf24l01,2	;volatile
 11819  16F5  0008               	return
 11820  16F6                     __end_ofi1_nrf24l01SetRXMode:	
 11821                           
 11822                           	psect	text58
 11823  1348                     __ptext58:	
 11824 ;; *************** function i1_nrf24l01Send *****************
 11825 ;; Defined at:
 11826 ;;		line 9 in file "nrf24l01.c"
 11827 ;; Parameters:    Size  Location     Type
 11828 ;;  command         1    wreg     unsigned char 
 11829 ;;  data            1    1[COMMON] unsigned char 
 11830 ;; Auto vars:     Size  Location     Type
 11831 ;;  command         1    3[COMMON] unsigned char 
 11832 ;; Return value:  Size  Location     Type
 11833 ;;                  1    wreg      unsigned char 
 11834 ;; Registers used:
 11835 ;;		wreg, status,2, status,0, pclath, cstack
 11836 ;; Tracked objects:
 11837 ;;		On entry : 0/0
 11838 ;;		On exit  : 0/0
 11839 ;;		Unchanged: 0/0
 11840 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11841 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11842 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11843 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11844 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11845 ;;Total ram usage:        3 bytes
 11846 ;; Hardware stack levels used:    1
 11847 ;; Hardware stack levels required when called:    2
 11848 ;; This function calls:
 11849 ;;		_enableInterrupts
 11850 ;;		_nrf24l01SPIEnd
 11851 ;;		_nrf24l01SPISend
 11852 ;;		_nrf24l01SPIStart
 11853 ;; This function is called by:
 11854 ;;		_nrf24l01ReceivePacket
 11855 ;;		_nrf24l01ISR
 11856 ;;		i1_nrf24l01SetRXMode
 11857 ;; This function uses a non-reentrant model
 11858 ;;
 11859                           
 11860                           
 11861                           ;psect for function i1_nrf24l01Send
 11862  1348                     i1_nrf24l01Send:	
 11863                           
 11864                           ;incstack = 0
 11865                           ; Regs used in i1_nrf24l01Send: [wreg+status,2+status,0+pclath+cstack]
 11866                           ;i1nrf24l01Send@command stored from wreg
 11867  1348  00F3               	movwf	i1nrf24l01Send@command
 11868                           
 11869                           ;nrf24l01.c: 12: enableInterrupts(0);
 11870  1349  3000               	movlw	0
 11871  134A  3192  2267  3193   	fcall	_enableInterrupts
 11872                           
 11873                           ;nrf24l01.c: 15: nrf24l01SPIStart();
 11874  134D  3192  226F  3193   	fcall	_nrf24l01SPIStart
 11875                           
 11876                           ;nrf24l01.c: 18: nrf24l01SPISend(command);
 11877  1350  0873               	movf	i1nrf24l01Send@command,w
 11878  1351  3192  2280  3193   	fcall	_nrf24l01SPISend
 11879                           
 11880                           ;nrf24l01.c: 21: data = nrf24l01SPISend(data);
 11881  1354  0871               	movf	i1nrf24l01Send@data,w
 11882  1355  3192  2280  3193   	fcall	_nrf24l01SPISend
 11883  1358  00F2               	movwf	??i1_nrf24l01Send
 11884  1359  0872               	movf	??i1_nrf24l01Send,w
 11885  135A  00F1               	movwf	i1nrf24l01Send@data
 11886                           
 11887                           ;nrf24l01.c: 24: nrf24l01SPIEnd();
 11888  135B  3192  2260  3193   	fcall	_nrf24l01SPIEnd
 11889                           
 11890                           ;nrf24l01.c: 27: enableInterrupts(1);
 11891  135E  3001               	movlw	1
 11892  135F  3192  2267         	fcall	_enableInterrupts
 11893                           
 11894                           ;nrf24l01.c: 29: return data;
 11895  1361  0871               	movf	i1nrf24l01Send@data,w
 11896  1362  0008               	return
 11897  1363                     __end_ofi1_nrf24l01Send:	
 11898                           
 11899                           	psect	text59
 11900  126F                     __ptext59:	
 11901 ;; *************** function _nrf24l01SPIStart *****************
 11902 ;; Defined at:
 11903 ;;		line 64 in file "interface.c"
 11904 ;; Parameters:    Size  Location     Type
 11905 ;;		None
 11906 ;; Auto vars:     Size  Location     Type
 11907 ;;		None
 11908 ;; Return value:  Size  Location     Type
 11909 ;;                  1    wreg      void 
 11910 ;; Registers used:
 11911 ;;		wreg, status,2, status,0, pclath, cstack
 11912 ;; Tracked objects:
 11913 ;;		On entry : 0/0
 11914 ;;		On exit  : 0/0
 11915 ;;		Unchanged: 0/0
 11916 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11917 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11918 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11919 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11920 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11921 ;;Total ram usage:        0 bytes
 11922 ;; Hardware stack levels used:    1
 11923 ;; Hardware stack levels required when called:    8
 11924 ;; This function calls:
 11925 ;;		_nrf24l01CSLow
 11926 ;; This function is called by:
 11927 ;;		_nrf24l01Send
 11928 ;;		_nrf24l01ReceivePacket
 11929 ;;		_nrf24l01SendPacket
 11930 ;;		_nrf24l01SetTXPipe
 11931 ;;		_nrf24l01InitRegisters
 11932 ;;		i1_nrf24l01Send
 11933 ;; This function uses a non-reentrant model
 11934 ;;
 11935                           
 11936                           
 11937                           ;psect for function _nrf24l01SPIStart
 11938  126F                     _nrf24l01SPIStart:	
 11939                           
 11940                           ;interface.c: 65: nrf24l01CSLow();
 11941                           
 11942                           ;incstack = 0
 11943 ;; hardware stack exceeded
 11944                           ; Regs used in _nrf24l01SPIStart: [wreg+status,2+status,0+pclath+cstack]
 11945  126F  3187  27FB  3192   	fcall	_nrf24l01CSLow
 11946                           
 11947                           ;interface.c: 66: _delay((unsigned long)((10)*(32000000/4000000.0)));
 11948  1272  301A               	movlw	26
 11949  1273                     u462_27:	
 11950  1273  0B89               	decfsz	9,f
 11951  1274  2A73               	goto	u462_27
 11952  1275  3200               	nop2
 11953  1276  0008               	return
 11954  1277                     __end_of_nrf24l01SPIStart:	
 11955                           
 11956                           	psect	text60
 11957  07FB                     __ptext60:	
 11958 ;; *************** function _nrf24l01CSLow *****************
 11959 ;; Defined at:
 11960 ;;		line 17 in file "interface.c"
 11961 ;; Parameters:    Size  Location     Type
 11962 ;;		None
 11963 ;; Auto vars:     Size  Location     Type
 11964 ;;		None
 11965 ;; Return value:  Size  Location     Type
 11966 ;;                  1    wreg      void 
 11967 ;; Registers used:
 11968 ;;		None
 11969 ;; Tracked objects:
 11970 ;;		On entry : 0/0
 11971 ;;		On exit  : 0/0
 11972 ;;		Unchanged: 0/0
 11973 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11974 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11975 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11976 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11977 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11978 ;;Total ram usage:        0 bytes
 11979 ;; Hardware stack levels used:    1
 11980 ;; Hardware stack levels required when called:    7
 11981 ;; This function calls:
 11982 ;;		Nothing
 11983 ;; This function is called by:
 11984 ;;		_nrf24l01SPIStart
 11985 ;; This function uses a non-reentrant model
 11986 ;;
 11987                           
 11988                           
 11989                           ;psect for function _nrf24l01CSLow
 11990  07FB                     _nrf24l01CSLow:	
 11991                           
 11992                           ;interface.c: 18: PORTAbits.RA1 = 0;
 11993                           
 11994                           ;incstack = 0
 11995 ;; hardware stack exceeded
 11996                           ; Regs used in _nrf24l01CSLow: []
 11997  07FB  0020               	movlb	0	; select bank0
 11998  07FC  108C               	bcf	12,1	;volatile
 11999  07FD  0008               	return
 12000  07FE                     __end_of_nrf24l01CSLow:	
 12001                           
 12002                           	psect	text61
 12003  1280                     __ptext61:	
 12004 ;; *************** function _nrf24l01SPISend *****************
 12005 ;; Defined at:
 12006 ;;		line 51 in file "interface.c"
 12007 ;; Parameters:    Size  Location     Type
 12008 ;;  data            1    wreg     unsigned char 
 12009 ;; Auto vars:     Size  Location     Type
 12010 ;;  data            1    0[COMMON] unsigned char 
 12011 ;; Return value:  Size  Location     Type
 12012 ;;                  1    wreg      unsigned char 
 12013 ;; Registers used:
 12014 ;;		wreg
 12015 ;; Tracked objects:
 12016 ;;		On entry : 0/0
 12017 ;;		On exit  : 0/0
 12018 ;;		Unchanged: 0/0
 12019 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12020 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12021 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12022 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12023 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12024 ;;Total ram usage:        0 bytes
 12025 ;; Hardware stack levels used:    1
 12026 ;; Hardware stack levels required when called:    7
 12027 ;; This function calls:
 12028 ;;		Nothing
 12029 ;; This function is called by:
 12030 ;;		_nrf24l01Send
 12031 ;;		_nrf24l01ReceivePacket
 12032 ;;		_nrf24l01SendPacket
 12033 ;;		_nrf24l01SetTXPipe
 12034 ;;		_nrf24l01InitRegisters
 12035 ;;		i1_nrf24l01Send
 12036 ;; This function uses a non-reentrant model
 12037 ;;
 12038                           
 12039                           
 12040                           ;psect for function _nrf24l01SPISend
 12041  1280                     _nrf24l01SPISend:	
 12042                           
 12043                           ;incstack = 0
 12044 ;; hardware stack exceeded
 12045                           ; Regs used in _nrf24l01SPISend: [wreg]
 12046                           ;nrf24l01SPISend@data stored from wreg
 12047  1280  00F0               	movwf	nrf24l01SPISend@data
 12048                           
 12049                           ;interface.c: 52: SSP1BUF = data;
 12050  1281  0870               	movf	nrf24l01SPISend@data,w
 12051  1282  0024               	movlb	4	; select bank4
 12052  1283  0091               	movwf	17	;volatile
 12053                           
 12054                           ;interface.c: 54: PORTCbits.RC4 = 1;
 12055  1284  0020               	movlb	0	; select bank0
 12056  1285  160E               	bsf	14,4	;volatile
 12057  1286                     i1l48:	
 12058                           ;interface.c: 56: while (!SSP1STATbits.BF){
 12059                           
 12060  1286  0024               	movlb	4	; select bank4
 12061  1287  1814               	btfsc	20,0	;volatile
 12062  1288  2A8B               	goto	i1l2724
 12063                           
 12064                           ;interface.c: 57: __nop();
 12065  1289  0000               	nop
 12066  128A  2A86               	goto	i1l48
 12067  128B                     i1l2724:	
 12068                           
 12069                           ;interface.c: 58: };interface.c: 60: return SSP1BUF;
 12070  128B  0811               	movf	17,w	;volatile
 12071  128C  0008               	return
 12072  128D                     __end_of_nrf24l01SPISend:	
 12073                           
 12074                           	psect	text62
 12075  1260                     __ptext62:	
 12076 ;; *************** function _nrf24l01SPIEnd *****************
 12077 ;; Defined at:
 12078 ;;		line 70 in file "interface.c"
 12079 ;; Parameters:    Size  Location     Type
 12080 ;;		None
 12081 ;; Auto vars:     Size  Location     Type
 12082 ;;		None
 12083 ;; Return value:  Size  Location     Type
 12084 ;;                  1    wreg      void 
 12085 ;; Registers used:
 12086 ;;		wreg, status,2, status,0, pclath, cstack
 12087 ;; Tracked objects:
 12088 ;;		On entry : 0/0
 12089 ;;		On exit  : 0/0
 12090 ;;		Unchanged: 0/0
 12091 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12092 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12093 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12094 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12095 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12096 ;;Total ram usage:        0 bytes
 12097 ;; Hardware stack levels used:    1
 12098 ;; Hardware stack levels required when called:    8
 12099 ;; This function calls:
 12100 ;;		_nrf24l01CSHigh
 12101 ;; This function is called by:
 12102 ;;		_nrf24l01Send
 12103 ;;		_nrf24l01ReceivePacket
 12104 ;;		_nrf24l01SendPacket
 12105 ;;		_nrf24l01SetTXPipe
 12106 ;;		_nrf24l01InitRegisters
 12107 ;;		i1_nrf24l01Send
 12108 ;; This function uses a non-reentrant model
 12109 ;;
 12110                           
 12111                           
 12112                           ;psect for function _nrf24l01SPIEnd
 12113  1260                     _nrf24l01SPIEnd:	
 12114                           
 12115                           ;interface.c: 71: _delay((unsigned long)((10)*(32000000/4000000.0)));
 12116                           
 12117                           ;incstack = 0
 12118 ;; hardware stack exceeded
 12119                           ; Regs used in _nrf24l01SPIEnd: [wreg+status,2+status,0+pclath+cstack]
 12120  1260  301A               	movlw	26
 12121  1261                     u463_27:	
 12122  1261  0B89               	decfsz	9,f
 12123  1262  2A61               	goto	u463_27
 12124  1263  3200               	nop2
 12125                           
 12126                           ;interface.c: 72: nrf24l01CSHigh();
 12127  1264  3192  2257         	fcall	_nrf24l01CSHigh
 12128  1266  0008               	return
 12129  1267                     __end_of_nrf24l01SPIEnd:	
 12130                           
 12131                           	psect	text63
 12132  1257                     __ptext63:	
 12133 ;; *************** function _nrf24l01CSHigh *****************
 12134 ;; Defined at:
 12135 ;;		line 22 in file "interface.c"
 12136 ;; Parameters:    Size  Location     Type
 12137 ;;		None
 12138 ;; Auto vars:     Size  Location     Type
 12139 ;;		None
 12140 ;; Return value:  Size  Location     Type
 12141 ;;                  1    wreg      void 
 12142 ;; Registers used:
 12143 ;;		None
 12144 ;; Tracked objects:
 12145 ;;		On entry : 0/0
 12146 ;;		On exit  : 0/0
 12147 ;;		Unchanged: 0/0
 12148 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12149 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12150 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12151 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12152 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12153 ;;Total ram usage:        0 bytes
 12154 ;; Hardware stack levels used:    1
 12155 ;; Hardware stack levels required when called:    7
 12156 ;; This function calls:
 12157 ;;		Nothing
 12158 ;; This function is called by:
 12159 ;;		_nrf24l01SPIEnd
 12160 ;; This function uses a non-reentrant model
 12161 ;;
 12162                           
 12163                           
 12164                           ;psect for function _nrf24l01CSHigh
 12165  1257                     _nrf24l01CSHigh:	
 12166                           
 12167                           ;interface.c: 23: PORTAbits.RA1 = 1;
 12168                           
 12169                           ;incstack = 0
 12170 ;; hardware stack exceeded
 12171                           ; Regs used in _nrf24l01CSHigh: []
 12172  1257  0020               	movlb	0	; select bank0
 12173  1258  148C               	bsf	12,1	;volatile
 12174  1259  0008               	return
 12175  125A                     __end_of_nrf24l01CSHigh:	
 12176                           
 12177                           	psect	text64
 12178  1267                     __ptext64:	
 12179 ;; *************** function _enableInterrupts *****************
 12180 ;; Defined at:
 12181 ;;		line 76 in file "interface.c"
 12182 ;; Parameters:    Size  Location     Type
 12183 ;;  enable          1    wreg     unsigned char 
 12184 ;; Auto vars:     Size  Location     Type
 12185 ;;  enable          1    0[COMMON] unsigned char 
 12186 ;; Return value:  Size  Location     Type
 12187 ;;                  1    wreg      void 
 12188 ;; Registers used:
 12189 ;;		wreg, status,0
 12190 ;; Tracked objects:
 12191 ;;		On entry : 0/0
 12192 ;;		On exit  : 0/0
 12193 ;;		Unchanged: 0/0
 12194 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12195 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12196 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12197 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12198 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12199 ;;Total ram usage:        0 bytes
 12200 ;; Hardware stack levels used:    1
 12201 ;; Hardware stack levels required when called:    7
 12202 ;; This function calls:
 12203 ;;		Nothing
 12204 ;; This function is called by:
 12205 ;;		_nrf24l01Send
 12206 ;;		_nrf24l01SendPacket
 12207 ;;		i1_nrf24l01Send
 12208 ;; This function uses a non-reentrant model
 12209 ;;
 12210                           
 12211                           
 12212                           ;psect for function _enableInterrupts
 12213  1267                     _enableInterrupts:	
 12214                           
 12215                           ;incstack = 0
 12216 ;; hardware stack exceeded
 12217                           ; Regs used in _enableInterrupts: [wreg+status,0]
 12218                           ;enableInterrupts@enable stored from wreg
 12219  1267  00F0               	movwf	enableInterrupts@enable
 12220                           
 12221                           ;interface.c: 77: PIE0bits.INTE = enable;
 12222  1268  0C70               	rrf	enableInterrupts@enable,w
 12223  1269  0021               	movlb	1	; select bank1
 12224  126A  1C03               	skipc
 12225  126B  1010               	bcf	16,0	;volatile
 12226  126C  1803               	skipnc
 12227  126D  1410               	bsf	16,0	;volatile
 12228  126E  0008               	return
 12229  126F                     __end_of_enableInterrupts:	
 12230                           
 12231                           	psect	text65
 12232  1254                     __ptext65:	
 12233 ;; *************** function _nrf24l01CELow *****************
 12234 ;; Defined at:
 12235 ;;		line 7 in file "interface.c"
 12236 ;; Parameters:    Size  Location     Type
 12237 ;;		None
 12238 ;; Auto vars:     Size  Location     Type
 12239 ;;		None
 12240 ;; Return value:  Size  Location     Type
 12241 ;;                  1    wreg      void 
 12242 ;; Registers used:
 12243 ;;		None
 12244 ;; Tracked objects:
 12245 ;;		On entry : 0/0
 12246 ;;		On exit  : 0/0
 12247 ;;		Unchanged: 0/0
 12248 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12249 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12250 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12251 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12252 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12253 ;;Total ram usage:        0 bytes
 12254 ;; Hardware stack levels used:    1
 12255 ;; Hardware stack levels required when called:    7
 12256 ;; This function calls:
 12257 ;;		Nothing
 12258 ;; This function is called by:
 12259 ;;		_nrf24l01SetRXMode
 12260 ;;		_nrf24l01ReceivePacket
 12261 ;;		_nrf24l01SendPacket
 12262 ;;		_nrf24l01Init
 12263 ;;		i1_nrf24l01SetRXMode
 12264 ;; This function uses a non-reentrant model
 12265 ;;
 12266                           
 12267                           
 12268                           ;psect for function _nrf24l01CELow
 12269  1254                     _nrf24l01CELow:	
 12270                           
 12271                           ;interface.c: 8: PORTAbits.RA0 = 0;
 12272                           
 12273                           ;incstack = 0
 12274 ;; hardware stack exceeded
 12275                           ; Regs used in _nrf24l01CELow: []
 12276  1254  0020               	movlb	0	; select bank0
 12277  1255  100C               	bcf	12,0	;volatile
 12278  1256  0008               	return
 12279  1257                     __end_of_nrf24l01CELow:	
 12280                           
 12281                           	psect	text66
 12282  1251                     __ptext66:	
 12283 ;; *************** function _nrf24l01CEHigh *****************
 12284 ;; Defined at:
 12285 ;;		line 12 in file "interface.c"
 12286 ;; Parameters:    Size  Location     Type
 12287 ;;		None
 12288 ;; Auto vars:     Size  Location     Type
 12289 ;;		None
 12290 ;; Return value:  Size  Location     Type
 12291 ;;                  1    wreg      void 
 12292 ;; Registers used:
 12293 ;;		None
 12294 ;; Tracked objects:
 12295 ;;		On entry : 0/0
 12296 ;;		On exit  : 0/0
 12297 ;;		Unchanged: 0/0
 12298 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12299 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12300 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12301 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12302 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12303 ;;Total ram usage:        0 bytes
 12304 ;; Hardware stack levels used:    1
 12305 ;; Hardware stack levels required when called:    7
 12306 ;; This function calls:
 12307 ;;		Nothing
 12308 ;; This function is called by:
 12309 ;;		_nrf24l01SetRXMode
 12310 ;;		_nrf24l01ReceivePacket
 12311 ;;		_nrf24l01SendPacket
 12312 ;;		_nrf24l01Init
 12313 ;;		i1_nrf24l01SetRXMode
 12314 ;; This function uses a non-reentrant model
 12315 ;;
 12316                           
 12317                           
 12318                           ;psect for function _nrf24l01CEHigh
 12319  1251                     _nrf24l01CEHigh:	
 12320                           
 12321                           ;interface.c: 13: PORTAbits.RA0 = 1;
 12322                           
 12323                           ;incstack = 0
 12324 ;; hardware stack exceeded
 12325                           ; Regs used in _nrf24l01CEHigh: []
 12326  1251  0020               	movlb	0	; select bank0
 12327  1252  140C               	bsf	12,0	;volatile
 12328  1253  0008               	return
 12329  1254                     __end_of_nrf24l01CEHigh:	
 12330                           
 12331                           	psect	text67
 12332  14B0                     __ptext67:	
 12333 ;; *************** function _strcmp *****************
 12334 ;; Defined at:
 12335 ;;		line 33 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\strcmp.c"
 12336 ;; Parameters:    Size  Location     Type
 12337 ;;  s1              2    0[COMMON] PTR const unsigned char 
 12338 ;;		 -> packet.Message(32), packet.Message(32), RXPacket.Message(32), RXPacket(33), 
 12339 ;;		 -> main@packet(33), loop@packet(33), NULL(0), 
 12340 ;;  s2              1    2[COMMON] PTR const unsigned char 
 12341 ;;		 -> RXPacket.Message(32), RXPacket(33), 
 12342 ;; Auto vars:     Size  Location     Type
 12343 ;;  r               1    4[COMMON] char 
 12344 ;; Return value:  Size  Location     Type
 12345 ;;                  2    0[COMMON] int 
 12346 ;; Registers used:
 12347 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0
 12348 ;; Tracked objects:
 12349 ;;		On entry : 0/0
 12350 ;;		On exit  : 0/0
 12351 ;;		Unchanged: 0/0
 12352 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12353 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12354 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12355 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12356 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12357 ;;Total ram usage:        5 bytes
 12358 ;; Hardware stack levels used:    1
 12359 ;; This function calls:
 12360 ;;		Nothing
 12361 ;; This function is called by:
 12362 ;;		_nrf24l01CheckACK
 12363 ;; This function uses a non-reentrant model
 12364 ;;
 12365                           
 12366                           
 12367                           ;psect for function _strcmp
 12368  14B0                     _strcmp:	
 12369                           
 12370                           ;incstack = 0
 12371                           ; Regs used in _strcmp: [wreg-fsr1h+status,2+status,0]
 12372  14B0  2CB9               	goto	i1l3674
 12373  14B1                     i1l3670:	
 12374  14B1  3001               	movlw	1
 12375  14B2  07F0               	addwf	strcmp@s1,f
 12376  14B3  3000               	movlw	0
 12377  14B4  3DF1               	addwfc	strcmp@s1+1,f
 12378  14B5  3001               	movlw	1
 12379  14B6  00F3               	movwf	??_strcmp
 12380  14B7  0873               	movf	??_strcmp,w
 12381  14B8  07F2               	addwf	strcmp@s2,f
 12382  14B9                     i1l3674:	
 12383  14B9  0870               	movf	strcmp@s1,w
 12384  14BA  0086               	movwf	6
 12385  14BB  0871               	movf	strcmp@s1+1,w
 12386  14BC  0087               	movwf	7
 12387  14BD  0872               	movf	strcmp@s2,w
 12388  14BE  0084               	movwf	4
 12389  14BF  3002               	movlw	2	; select bank4/5
 12390  14C0  0085               	movwf	5
 12391  14C1  0300               	decf	0,w
 12392  14C2  3AFF               	xorlw	255
 12393  14C3  0701               	addwf	1,w
 12394  14C4  00F3               	movwf	??_strcmp
 12395  14C5  0873               	movf	??_strcmp,w
 12396  14C6  00F4               	movwf	strcmp@r
 12397  14C7  0874               	movf	strcmp@r,w
 12398  14C8  1D03               	btfss	3,2
 12399  14C9  2CD1               	goto	i1l3678
 12400  14CA  0870               	movf	strcmp@s1,w
 12401  14CB  0086               	movwf	6
 12402  14CC  0871               	movf	strcmp@s1+1,w
 12403  14CD  0087               	movwf	7
 12404  14CE  0801               	movf	1,w
 12405  14CF  1D03               	btfss	3,2
 12406  14D0  2CB1               	goto	i1l3670
 12407  14D1                     i1l3678:	
 12408  14D1  0874               	movf	strcmp@r,w
 12409  14D2  00F0               	movwf	?_strcmp
 12410  14D3  01F1               	clrf	?_strcmp+1
 12411  14D4  1BF0               	btfsc	?_strcmp,7
 12412  14D5  03F1               	decf	?_strcmp+1,f
 12413  14D6  0008               	return
 12414  14D7                     __end_of_strcmp:	
 12415                           
 12416                           	psect	text68
 12417  0002                     __ptext68:	
 12418 ;; *************** function _exception *****************
 12419 ;; Defined at:
 12420 ;;		line 80 in file "interface.c"
 12421 ;; Parameters:    Size  Location     Type
 12422 ;;  exception       1    wreg     unsigned char 
 12423 ;; Auto vars:     Size  Location     Type
 12424 ;;  exception       1    0[COMMON] unsigned char 
 12425 ;; Return value:  Size  Location     Type
 12426 ;;                  1    wreg      void 
 12427 ;; Registers used:
 12428 ;;		wreg
 12429 ;; Tracked objects:
 12430 ;;		On entry : 0/0
 12431 ;;		On exit  : 0/0
 12432 ;;		Unchanged: 0/0
 12433 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12434 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12435 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12436 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12437 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12438 ;;Total ram usage:        0 bytes
 12439 ;; Hardware stack levels used:    1
 12440 ;; This function calls:
 12441 ;;		Nothing
 12442 ;; This function is called by:
 12443 ;;		_nrf24l01ISR
 12444 ;; This function uses a non-reentrant model
 12445 ;;
 12446                           
 12447                           
 12448                           ;psect for function _exception
 12449  0002                     _exception:	
 12450                           
 12451                           ;incstack = 0
 12452                           ; Regs used in _exception: [wreg]
 12453  0002  0001               	reset	;# 
 12454  0003  0008               	return
 12455  0004                     __end_of_exception:	
 12456  007E                     btemp	set	126	;btemp
 12457  007E                     int$flags	set	126
 12458  007E                     wtemp0	set	126


Data Sizes:
    Strings     49
    Constant    46
    Data        1
    BSS         86
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     13      14
    BANK0            80     80      80
    BANK1            80     80      80
    BANK2            80     80      80
    BANK3            80     34      59
    BANK4            80      0      61
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    ftoa@status	PTR int  size(1) Largest target is 2
		 -> setMessage@status(BANK1[2]), 

    strchr@ptr	PTR const unsigned char  size(2) Largest target is 2
		 -> STR_3(CODE[2]), STR_2(CODE[2]), STR_1(CODE[2]), 

    strspn@s2	PTR const unsigned char  size(2) Largest target is 2
		 -> STR_3(CODE[2]), STR_2(CODE[2]), STR_1(CODE[2]), 

    strspn@s1	PTR const unsigned char  size(1) Largest target is 33
		 -> RXPacket(BANK4[33]), NULL(NULL[0]), 

    sp__strchr	PTR unsigned char  size(2) Largest target is 2
		 -> STR_3(CODE[2]), STR_2(CODE[2]), NULL(NULL[0]), STR_1(CODE[2]), 

    strcspn@s2	PTR const unsigned char  size(2) Largest target is 2
		 -> STR_3(CODE[2]), STR_2(CODE[2]), STR_1(CODE[2]), 

    strcspn@s1	PTR const unsigned char  size(1) Largest target is 33
		 -> RXPacket(BANK4[33]), NULL(NULL[0]), 

    strtok@s2	PTR const unsigned char  size(2) Largest target is 2
		 -> STR_3(CODE[2]), STR_2(CODE[2]), STR_1(CODE[2]), 

    strtok@sp	PTR unsigned char  size(1) Largest target is 33
		 -> RXPacket(BANK4[33]), NULL(NULL[0]), 

    strtok@s1	PTR unsigned char  size(1) Largest target is 33
		 -> RXPacket(BANK4[33]), NULL(NULL[0]), 

    strlen@s	PTR const unsigned char  size(2) Largest target is 33
		 -> packet.Message(BANK0[32]), packet.Message(BANK0[32]), RXPacket.Message(BANK4[32]), RXPacket(BANK4[33]), 
		 -> main@packet(BANK3[33]), loop@packet(BANK2[33]), NULL(NULL[0]), romDataMap(BANK4[28]), 

    strlen@cp	PTR const unsigned char  size(2) Largest target is 33
		 -> packet.Message(BANK0[32]), packet.Message(BANK0[32]), RXPacket.Message(BANK4[32]), RXPacket(BANK4[33]), 
		 -> main@packet(BANK3[33]), loop@packet(BANK2[33]), NULL(NULL[0]), romDataMap(BANK4[28]), 

    strcpy@from	PTR const unsigned char  size(2) Largest target is 33
		 -> RXPacket(BANK4[33]), STR_11(CODE[4]), NULL(NULL[0]), 

    strcpy@to	PTR unsigned char  size(2) Largest target is 32
		 -> checkRxData@value(BANK2[32]), checkRxData@topic(BANK1[32]), checkRxData@name(BANK1[32]), romDataMap(BANK4[28]), 

    strcpy@cp	PTR unsigned char  size(2) Largest target is 32
		 -> checkRxData@value(BANK2[32]), checkRxData@topic(BANK1[32]), checkRxData@name(BANK1[32]), romDataMap(BANK4[28]), 

    strcmp@s2	PTR const unsigned char  size(1) Largest target is 33
		 -> RXPacket.Message(BANK4[32]), RXPacket(BANK4[33]), 

    strcmp@s1	PTR const unsigned char  size(2) Largest target is 33
		 -> packet.Message(BANK0[32]), packet.Message(BANK0[32]), RXPacket.Message(BANK4[32]), RXPacket(BANK4[33]), 
		 -> main@packet(BANK3[33]), loop@packet(BANK2[33]), NULL(NULL[0]), 

    strcat@from	PTR const unsigned char  size(2) Largest target is 28
		 -> romDataMap.name(BANK4[16]), ftoa@buf(BANK3[17]), STR_12(CODE[5]), STR_10(CODE[6]), 
		 -> STR_9(CODE[7]), STR_8(CODE[5]), STR_7(CODE[5]), STR_6(CODE[4]), 
		 -> STR_5(CODE[2]), STR_4(CODE[2]), romDataMap(BANK4[28]), 

    strcat@to	PTR unsigned char  size(1) Largest target is 33
		 -> main@packet(BANK3[33]), loop@packet(BANK2[33]), 

    strcat@cp	PTR unsigned char  size(1) Largest target is 33
		 -> main@packet(BANK3[33]), loop@packet(BANK2[33]), 

    memset@p1	PTR void  size(2) Largest target is 33
		 -> RXPacket(BANK4[33]), main@packet(BANK3[33]), loop@packet(BANK2[33]), 

    memset@p	PTR unsigned char  size(2) Largest target is 33
		 -> RXPacket(BANK4[33]), main@packet(BANK3[33]), loop@packet(BANK2[33]), 

    ftoa@cp	PTR unsigned char  size(1) Largest target is 17
		 -> ftoa@buf(BANK3[17]), 

    atof@s	PTR const unsigned char  size(1) Largest target is 32
		 -> checkRxData@value(BANK2[32]), 

    strtod@s	PTR const unsigned char  size(1) Largest target is 32
		 -> checkRxData@value(BANK2[32]), 

    strtod@res	PTR PTR const unsigned char  size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    sprintf@f	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_13(CODE[11]), 

    sprintf@sp	PTR unsigned char  size(1) Largest target is 17
		 -> ftoa@buf(BANK3[17]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    nrf24l01SendPacket@Packet	PTR struct . size(2) Largest target is 33
		 -> RXPacket(BANK4[33]), main@packet(BANK3[33]), loop@packet(BANK2[33]), 

    TXPacket	PTR struct . size(2) Largest target is 33
		 -> RXPacket(BANK4[33]), main@packet(BANK3[33]), loop@packet(BANK2[33]), NULL(NULL[0]), 

    nrf24l01SendACK@packet	PTR struct . size(1) Largest target is 33
		 -> RXPacket(BANK4[33]), 

    nrf24l01GetPipe@name	PTR unsigned char  size(1) Largest target is 28
		 -> romDataMap(BANK4[28]), 

    checkTXPower@rxPacket	PTR struct . size(1) Largest target is 33
		 -> RXPacket(BANK4[33]), 

    sp__ftoa	PTR unsigned char  size(1) Largest target is 17
		 -> ftoa@buf(BANK3[17]), 

    setMessage@topic	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_12(CODE[5]), STR_10(CODE[6]), STR_9(CODE[7]), STR_8(CODE[5]), 
		 -> STR_7(CODE[5]), STR_6(CODE[4]), 

    sp__strcat	PTR unsigned char  size(1) Largest target is 33
		 -> main@packet(BANK3[33]), loop@packet(BANK2[33]), 

    sp__memset	PTR void  size(2) Largest target is 33
		 -> RXPacket(BANK4[33]), main@packet(BANK3[33]), loop@packet(BANK2[33]), 

    setMessage@packet	PTR struct . size(1) Largest target is 33
		 -> main@packet(BANK3[33]), loop@packet(BANK2[33]), 

    sp__strcpy	PTR unsigned char  size(2) Largest target is 32
		 -> checkRxData@value(BANK2[32]), checkRxData@topic(BANK1[32]), checkRxData@name(BANK1[32]), romDataMap(BANK4[28]), 

    sp__strtok	PTR unsigned char  size(1) Largest target is 33
		 -> RXPacket(BANK4[33]), NULL(NULL[0]), 

    checkRxData@strings	PTR unsigned char  size(1) Largest target is 33
		 -> RXPacket(BANK4[33]), NULL(NULL[0]), 

    sp__nrf24l01GetRXPacket	PTR struct . size(1) Largest target is 33
		 -> RXPacket(BANK4[33]), 

    checkRxData@RXPacket	PTR struct . size(1) Largest target is 33
		 -> RXPacket(BANK4[33]), 

    romData	PTR struct . size(1) Largest target is 28
		 -> romDataMap(BANK4[28]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    _ISR->_nrf24l01ISR
    _nrf24l01ISR->_nrf24l01ReceivePacket
    _nrf24l01ReceivePacket->i1_memset
    _nrf24l01CheckACK->i1_nrf24l01SetRXMode
    i1_nrf24l01SetRXMode->i1_nrf24l01Send

Critical Paths under _main in BANK0

    _nrf24l01Init->_nrf24l01InitRegisters
    _nrf24l01InitRegisters->_nrf24l01SetRXPipe
    _nrf24l01InitRegisters->_nrf24l01SetTXPipe
    _nrf24l01SetRXPipe->_nrf24l01Send
    _nrf24l01GetPipe->___lwmod
    _nrf24l01GetPipe->_strlen
    _loop->_checkRxData
    _setMessage->_ftoa
    _strcat->_ftoa
    _ftoa->___fttol
    _sprintf->___llmod
    ___llmod->___lldiv
    ___lltoft->___ftpack
    ___fttol->___ftmul
    ___ftsub->___ftadd
    _getADCValue->___ftdiv
    ___ftadd->___awtoft
    ___awtoft->___ftpack
    _checkTXPower->_nrf24l01ChangeTXPower
    _checkRxData->_atof
    _strtok->_strcspn
    _strtok->_strspn
    _strspn->_strchr
    _strcspn->_strchr
    _nrf24l01SendACK->_nrf24l01SendPacket
    _nrf24l01SetTXPipe->___bmul
    _nrf24l01SendPacket->_nrf24l01ChangeTXPower
    _nrf24l01SetRXMode->_nrf24l01Send
    _nrf24l01ChangeTXPower->_nrf24l01Send
    _atof->_strtod
    _strtod->___ftmul
    ___ftneg->_getADCValue
    ___ftmul->_getADCValue
    ___ftdiv->___ftadd
    ___altoft->___ftpack
    ___lbtoft->___ftpack
    ___lwtoft->___ftpack

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_loop
    _loop->_checkRxData
    _setMessage->_strcat
    _strcat->_ftoa
    _ftoa->___fttol
    _checkRxData->_atof
    _atof->_strtod

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    _main->_loop
    _loop->_checkRxData

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                35    35      0  124804
                                             79 BANK1      1     1      0
                                              0 BANK3     34    34      0
                           ___lwtoft
                               _loop
                    _nrf24l01GetPipe
                       _nrf24l01Init
                 _nrf24l01SendPacket
                  _nrf24l01SetRXPipe
                  _nrf24l01SetTXPipe
                         _setMessage
                              _sleep
                             _strcpy
 ---------------------------------------------------------------------------------
 (1) _nrf24l01Init                                         2     2      0    5687
                                             19 BANK0      2     2      0
                     _nrf24l01CEHigh
                      _nrf24l01CELow
              _nrf24l01InitRegisters
              _nrf24l01InterfaceInit
 ---------------------------------------------------------------------------------
 (2) _nrf24l01InterfaceInit                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _nrf24l01InitRegisters                               12    12      0    5687
                                              7 BANK0     12    12      0
                             ___bmul
                     _nrf24l01SPIEnd
                    _nrf24l01SPISend
                   _nrf24l01SPIStart
                       _nrf24l01Send
                  _nrf24l01SetRXPipe
                  _nrf24l01SetTXPipe
 ---------------------------------------------------------------------------------
 (1) _nrf24l01SetRXPipe                                    4     4      0    2239
                                              3 BANK0      4     4      0
                       _nrf24l01Send
 ---------------------------------------------------------------------------------
 (1) _nrf24l01GetPipe                                      5     5      0     658
                                              6 BANK0      5     5      0
                            ___lwmod
                             _strlen
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              6     2      4     337
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (1) _loop                                                49    49      0   87610
                                             78 BANK1      1     1      0
                                             32 BANK2     48    48      0
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___ftneg
                           ___lbtoft
                        _checkRxData
                       _checkTXPower
                        _getADCValue
                       _nrf24l01Send
                 _nrf24l01SendPacket
                         _setMessage
                              _sleep
 ---------------------------------------------------------------------------------
 (1) _setMessage                                           9     4      5   18872
                                             24 BANK1      9     4      5
                           ___lbtoft (ARG)
                           ___lwtoft (ARG)
                               _ftoa
                        _getADCValue (ARG)
                             _memset
                             _strcat
 ---------------------------------------------------------------------------------
 (2) _strcat                                               5     3      2     723
                                             19 BANK1      5     3      2
                               _ftoa (ARG)
 ---------------------------------------------------------------------------------
 (2) _memset                                               8     2      6     476
                                              0 BANK0      8     2      6
 ---------------------------------------------------------------------------------
 (2) _ftoa                                                14    10      4   16191
                                             79 BANK0      1     1      0
                                              6 BANK1     13     9      4
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                           ___lltoft
                            _sprintf
 ---------------------------------------------------------------------------------
 (3) _sprintf                                             36    26     10    2229
                                             24 BANK0     28    18     10
                            ___lldiv
                            ___llmod
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4     448
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (4) ___llmod                                             10     2      8     337
                                             14 BANK0     10     2      8
                            ___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (4) ___lldiv                                             14     6      8     340
                                              0 BANK0     14     6      8
 ---------------------------------------------------------------------------------
 (3) ___lltoft                                             6     2      4    3209
                                              8 BANK0      6     2      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) ___fttol                                             14    10      4     430
                                             71 BANK0      8     4      4
                                              0 BANK1      6     6      0
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftsub                                              6     0      6    4848
                                             27 BANK0      6     0      6
                            ___ftadd
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (2) _getADCValue                                         12     9      3   12481
                                             43 BANK0     12     9      3
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                              _sleep
 ---------------------------------------------------------------------------------
 (4) ___ftadd                                             13     7      6    4603
                                             14 BANK0     13     7      6
                           ___awtoft (ARG)
                           ___ftpack
                           ___ftpack (ARG)
 ---------------------------------------------------------------------------------
 (3) ___awtoft                                             6     3      3    3320
                                              8 BANK0      6     3      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) _checkTXPower                                         2     2      0    2457
                                              7 BANK0      2     2      0
              _nrf24l01ChangeTXPower
                _nrf24l01GetRXPacket
 ---------------------------------------------------------------------------------
 (2) _checkRxData                                         99    99      0   26090
                                             79 BANK0      1     1      0
                                             12 BANK1     66    66      0
                                              0 BANK2     32    32      0
                               _atof
                _nrf24l01GetRXPacket
                    _nrf24l01SendACK
                  _nrf24l01SetRXMode
                              _sleep
                             _strcpy
                             _strtok
 ---------------------------------------------------------------------------------
 (3) _strtok                                               6     4      2    1895
                                             14 BANK0      6     4      2
                            _strcspn
                             _strspn
 ---------------------------------------------------------------------------------
 (4) _strspn                                               7     5      2     660
                                              7 BANK0      7     5      2
                             _strchr
 ---------------------------------------------------------------------------------
 (4) _strcspn                                              7     5      2     660
                                              7 BANK0      7     5      2
                             _strchr
 ---------------------------------------------------------------------------------
 (5) _strchr                                               7     3      4     444
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (1) _strcpy                                               6     2      4     591
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (1) _sleep                                                2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) _nrf24l01SendACK                                      2     2      0    6024
                                             14 BANK0      2     2      0
                 _nrf24l01SendPacket
                  _nrf24l01SetTXPipe
 ---------------------------------------------------------------------------------
 (1) _nrf24l01SetTXPipe                                    3     3      0     492
                                              4 BANK0      3     3      0
                             ___bmul
                     _nrf24l01SPIEnd
                    _nrf24l01SPISend
                   _nrf24l01SPIStart
 ---------------------------------------------------------------------------------
 (1) _nrf24l01SendPacket                                   7     5      2    5364
                                              7 BANK0      7     5      2
                   _enableInterrupts
                     _nrf24l01CEHigh
                      _nrf24l01CELow
              _nrf24l01ChangeTXPower
                     _nrf24l01SPIEnd
                    _nrf24l01SPISend
                   _nrf24l01SPIStart
                  _nrf24l01SetRXMode
                             _strlen
 ---------------------------------------------------------------------------------
 (2) _strlen                                               6     4      2     170
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (2) _nrf24l01SetRXMode                                    3     3      0    2277
                                              3 BANK0      3     3      0
                     _nrf24l01CEHigh
                      _nrf24l01CELow
                       _nrf24l01Send
 ---------------------------------------------------------------------------------
 (12) _nrf24l01CELow                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (12) _nrf24l01CEHigh                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _nrf24l01ChangeTXPower                                4     2      2    2434
                                              3 BANK0      4     2      2
                       _nrf24l01Send
 ---------------------------------------------------------------------------------
 (2) _nrf24l01Send                                         3     2      1    2143
                                              0 BANK0      3     2      1
                   _enableInterrupts
                     _nrf24l01SPIEnd
                    _nrf24l01SPISend
                   _nrf24l01SPIStart
 ---------------------------------------------------------------------------------
 (13) _nrf24l01SPIStart                                    0     0      0       0
                      _nrf24l01CSLow
 ---------------------------------------------------------------------------------
 (14) _nrf24l01CSLow                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (13) _nrf24l01SPISend                                     1     1      0      22
 ---------------------------------------------------------------------------------
 (13) _nrf24l01SPIEnd                                      0     0      0       0
                     _nrf24l01CSHigh
 ---------------------------------------------------------------------------------
 (14) _nrf24l01CSHigh                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (13) _enableInterrupts                                    1     1      0      22
 ---------------------------------------------------------------------------------
 (3) _nrf24l01GetRXPacket                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _atof                                                 5     1      4   15036
                                             78 BANK0      1     1      0
                                              8 BANK1      4     0      4
                             _strtod
 ---------------------------------------------------------------------------------
 (4) _strtod                                              15    12      3   14978
                                             71 BANK0      7     4      3
                                              0 BANK1      8     8      0
                           ___altoft
                             ___bmul
                            ___ftdiv
                             ___ftge
                            ___ftmul
                            ___ftneg
                             ___lmul
                            _isdigit
                            _isspace
 ---------------------------------------------------------------------------------
 (5) _isspace                                              2     2      0      90
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _isdigit                                              2     2      0      68
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (5) ___lmul                                              12     4      8     270
                                              0 BANK0     12     4      8
 ---------------------------------------------------------------------------------
 (3) ___ftneg                                              3     0      3     312
                                             55 BANK0      3     0      3
                            ___ftadd (ARG)
                            ___ftdiv (ARG)
                        _getADCValue (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftmul                                             16    10      6    4089
                                             55 BANK0     16    10      6
                           ___ftpack
                        _getADCValue (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftge                                               9     3      6     670
                                              0 BANK0      9     3      6
 ---------------------------------------------------------------------------------
 (3) ___ftdiv                                             16    10      6    4399
                                             27 BANK0     16    10      6
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___bmul                                               4     3      1     448
                                              0 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (5) ___altoft                                             8     4      4    3278
                                              8 BANK0      8     4      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___lbtoft                                             8     5      3    3073
                                              8 BANK0      8     5      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (1) ___lwtoft                                             4     1      3    3162
                                              8 BANK0      4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) ___ftpack                                             8     3      5    3051
                                              0 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 14
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (9) _ISR                                                  0     0      0    1957
                        _nrf24l01ISR
 ---------------------------------------------------------------------------------
 (10) _nrf24l01ISR                                         2     2      0    1957
                                             11 COMMON     2     2      0
                          _exception
                   _nrf24l01CheckACK
              _nrf24l01ReceivePacket
                     i1_nrf24l01Send
                i1_nrf24l01SetRXMode
 ---------------------------------------------------------------------------------
 (11) _nrf24l01ReceivePacket                               3     3      0     534
                                              8 COMMON     3     3      0
                     _nrf24l01CEHigh
                      _nrf24l01CELow
                     _nrf24l01SPIEnd
                    _nrf24l01SPISend
                   _nrf24l01SPIStart
                           i1_memset
                     i1_nrf24l01Send
 ---------------------------------------------------------------------------------
 (12) i1_memset                                            8     2      6     152
                                              0 COMMON     8     2      6
 ---------------------------------------------------------------------------------
 (11) _nrf24l01CheckACK                                    3     3      0     621
                                              7 COMMON     3     3      0
                             _strcmp
                i1_nrf24l01SetRXMode
 ---------------------------------------------------------------------------------
 (11) i1_nrf24l01SetRXMode                                 3     3      0     401
                                              4 COMMON     3     3      0
                     _nrf24l01CEHigh
                      _nrf24l01CELow
                     i1_nrf24l01Send
 ---------------------------------------------------------------------------------
 (12) i1_nrf24l01Send                                      3     2      1     267
                                              1 COMMON     3     2      1
                   _enableInterrupts
                     _nrf24l01SPIEnd
                    _nrf24l01SPISend
                   _nrf24l01SPIStart
 ---------------------------------------------------------------------------------
 (13) _nrf24l01SPIStart                                    0     0      0       0
                      _nrf24l01CSLow
 ---------------------------------------------------------------------------------
 (14) _nrf24l01CSLow                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (13) _nrf24l01SPISend                                     1     1      0      22
 ---------------------------------------------------------------------------------
 (13) _nrf24l01SPIEnd                                      0     0      0       0
                     _nrf24l01CSHigh
 ---------------------------------------------------------------------------------
 (14) _nrf24l01CSHigh                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (13) _enableInterrupts                                    1     1      0      22
 ---------------------------------------------------------------------------------
 (12) _nrf24l01CELow                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (12) _nrf24l01CEHigh                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (12) _strcmp                                              5     2      3     220
                                              0 COMMON     5     2      3
 ---------------------------------------------------------------------------------
 (11) _exception                                           1     1      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 14
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   ___lwtoft
     ___ftpack
   _loop
     ___awtoft
       ___ftpack
     ___ftadd
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___ftpack (ARG)
     ___ftdiv
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
     ___ftmul
       ___ftpack
       _getADCValue (ARG)
         ___awtoft
           ___ftpack
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftdiv
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
         _sleep
     ___ftneg
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
       _getADCValue (ARG)
         ___awtoft
           ___ftpack
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftdiv
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
         _sleep
     ___lbtoft
       ___ftpack
     _checkRxData
       _atof
         _strtod
           ___altoft
             ___ftpack
           ___bmul
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftge
           ___ftmul
             ___ftpack
             _getADCValue (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               _sleep
           ___ftneg
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
             _getADCValue (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               _sleep
           ___lmul
           _isdigit
           _isspace
       _nrf24l01GetRXPacket
       _nrf24l01SendACK
         _nrf24l01SendPacket
           _enableInterrupts
           _nrf24l01CEHigh
           _nrf24l01CELow
           _nrf24l01ChangeTXPower
             _nrf24l01Send
               _enableInterrupts
               _nrf24l01SPIEnd
                 _nrf24l01CSHigh
               _nrf24l01SPISend
               _nrf24l01SPIStart
                 _nrf24l01CSLow
           _nrf24l01SPIEnd
             _nrf24l01CSHigh
           _nrf24l01SPISend
           _nrf24l01SPIStart
             _nrf24l01CSLow
           _nrf24l01SetRXMode
             _nrf24l01CEHigh
             _nrf24l01CELow
             _nrf24l01Send
               _enableInterrupts
               _nrf24l01SPIEnd
                 _nrf24l01CSHigh
               _nrf24l01SPISend
               _nrf24l01SPIStart
                 _nrf24l01CSLow
           _strlen
         _nrf24l01SetTXPipe
           ___bmul
           _nrf24l01SPIEnd
             _nrf24l01CSHigh
           _nrf24l01SPISend
           _nrf24l01SPIStart
             _nrf24l01CSLow
       _nrf24l01SetRXMode
         _nrf24l01CEHigh
         _nrf24l01CELow
         _nrf24l01Send
           _enableInterrupts
           _nrf24l01SPIEnd
             _nrf24l01CSHigh
           _nrf24l01SPISend
           _nrf24l01SPIStart
             _nrf24l01CSLow
       _sleep
       _strcpy
       _strtok
         _strcspn
           _strchr
         _strspn
           _strchr
     _checkTXPower
       _nrf24l01ChangeTXPower
         _nrf24l01Send
           _enableInterrupts
           _nrf24l01SPIEnd
             _nrf24l01CSHigh
           _nrf24l01SPISend
           _nrf24l01SPIStart
             _nrf24l01CSLow
       _nrf24l01GetRXPacket
     _getADCValue
       ___awtoft
         ___ftpack
       ___ftadd
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftdiv
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
       _sleep
     _nrf24l01Send
       _enableInterrupts
       _nrf24l01SPIEnd
         _nrf24l01CSHigh
       _nrf24l01SPISend
       _nrf24l01SPIStart
         _nrf24l01CSLow
     _nrf24l01SendPacket
       _enableInterrupts
       _nrf24l01CEHigh
       _nrf24l01CELow
       _nrf24l01ChangeTXPower
         _nrf24l01Send
           _enableInterrupts
           _nrf24l01SPIEnd
             _nrf24l01CSHigh
           _nrf24l01SPISend
           _nrf24l01SPIStart
             _nrf24l01CSLow
       _nrf24l01SPIEnd
         _nrf24l01CSHigh
       _nrf24l01SPISend
       _nrf24l01SPIStart
         _nrf24l01CSLow
       _nrf24l01SetRXMode
         _nrf24l01CEHigh
         _nrf24l01CELow
         _nrf24l01Send
           _enableInterrupts
           _nrf24l01SPIEnd
             _nrf24l01CSHigh
           _nrf24l01SPISend
           _nrf24l01SPIStart
             _nrf24l01CSLow
       _strlen
     _setMessage
       ___lbtoft (ARG)
         ___ftpack
       ___lwtoft (ARG)
         ___ftpack
       _ftoa (ARG)
         ___ftge
         ___ftmul
           ___ftpack
           _getADCValue (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
             _sleep
         ___ftneg
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
           _getADCValue (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
             _sleep
         ___ftsub
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___fttol
           ___ftmul (ARG)
             ___ftpack
             _getADCValue (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               _sleep
         ___lltoft
           ___ftpack
         _sprintf
           ___lldiv
           ___llmod
             ___lldiv (ARG)
           ___wmul
           _isdigit
       _getADCValue (ARG)
         ___awtoft
           ___ftpack
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftdiv
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
         _sleep
       _memset (ARG)
       _strcat (ARG)
         _ftoa (ARG)
           ___ftge
           ___ftmul
             ___ftpack
             _getADCValue (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               _sleep
           ___ftneg
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
             _getADCValue (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               _sleep
           ___ftsub
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
           ___fttol
             ___ftmul (ARG)
               ___ftpack
               _getADCValue (ARG)
                 ___awtoft
                   ___ftpack
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                 _sleep
           ___lltoft
             ___ftpack
           _sprintf
             ___lldiv
             ___llmod
               ___lldiv (ARG)
             ___wmul
             _isdigit
     _sleep
   _nrf24l01GetPipe
     ___lwmod
     _strlen
   _nrf24l01Init
     _nrf24l01CEHigh
     _nrf24l01CELow
     _nrf24l01InitRegisters
       ___bmul
       _nrf24l01SPIEnd
         _nrf24l01CSHigh
       _nrf24l01SPISend
       _nrf24l01SPIStart
         _nrf24l01CSLow
       _nrf24l01Send
         _enableInterrupts
         _nrf24l01SPIEnd
           _nrf24l01CSHigh
         _nrf24l01SPISend
         _nrf24l01SPIStart
           _nrf24l01CSLow
       _nrf24l01SetRXPipe
         _nrf24l01Send
           _enableInterrupts
           _nrf24l01SPIEnd
             _nrf24l01CSHigh
           _nrf24l01SPISend
           _nrf24l01SPIStart
             _nrf24l01CSLow
       _nrf24l01SetTXPipe
         ___bmul
         _nrf24l01SPIEnd
           _nrf24l01CSHigh
         _nrf24l01SPISend
         _nrf24l01SPIStart
           _nrf24l01CSLow
     _nrf24l01InterfaceInit
   _nrf24l01SendPacket
     _enableInterrupts
     _nrf24l01CEHigh
     _nrf24l01CELow
     _nrf24l01ChangeTXPower
       _nrf24l01Send
         _enableInterrupts
         _nrf24l01SPIEnd
           _nrf24l01CSHigh
         _nrf24l01SPISend
         _nrf24l01SPIStart
           _nrf24l01CSLow
     _nrf24l01SPIEnd
       _nrf24l01CSHigh
     _nrf24l01SPISend
     _nrf24l01SPIStart
       _nrf24l01CSLow
     _nrf24l01SetRXMode
       _nrf24l01CEHigh
       _nrf24l01CELow
       _nrf24l01Send
         _enableInterrupts
         _nrf24l01SPIEnd
           _nrf24l01CSHigh
         _nrf24l01SPISend
         _nrf24l01SPIStart
           _nrf24l01CSLow
     _strlen
   _nrf24l01SetRXPipe
     _nrf24l01Send
       _enableInterrupts
       _nrf24l01SPIEnd
         _nrf24l01CSHigh
       _nrf24l01SPISend
       _nrf24l01SPIStart
         _nrf24l01CSLow
   _nrf24l01SetTXPipe
     ___bmul
     _nrf24l01SPIEnd
       _nrf24l01CSHigh
     _nrf24l01SPISend
     _nrf24l01SPIStart
       _nrf24l01CSLow
   _setMessage
     ___lbtoft (ARG)
       ___ftpack
     ___lwtoft (ARG)
       ___ftpack
     _ftoa (ARG)
       ___ftge
       ___ftmul
         ___ftpack
         _getADCValue (ARG)
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
           _sleep
       ___ftneg
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
         _getADCValue (ARG)
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
           _sleep
       ___ftsub
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___lltoft (ARG)
           ___ftpack
       ___fttol
         ___ftmul (ARG)
           ___ftpack
           _getADCValue (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
             _sleep
       ___lltoft
         ___ftpack
       _sprintf
         ___lldiv
         ___llmod
           ___lldiv (ARG)
         ___wmul
         _isdigit
     _getADCValue (ARG)
       ___awtoft
         ___ftpack
       ___ftadd
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftdiv
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
       _sleep
     _memset (ARG)
     _strcat (ARG)
       _ftoa (ARG)
         ___ftge
         ___ftmul
           ___ftpack
           _getADCValue (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
             _sleep
         ___ftneg
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
           _getADCValue (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
             _sleep
         ___ftsub
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___fttol
           ___ftmul (ARG)
             ___ftpack
             _getADCValue (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               _sleep
         ___lltoft
           ___ftpack
         _sprintf
           ___lldiv
           ___llmod
             ___lldiv (ARG)
           ___wmul
           _isdigit
   _sleep
   _strcpy

 _ISR (ROOT)
   _nrf24l01ISR
     _exception
     _nrf24l01CheckACK
       _strcmp
       i1_nrf24l01SetRXMode
         _nrf24l01CEHigh
         _nrf24l01CELow
         i1_nrf24l01Send
           _enableInterrupts
           _nrf24l01SPIEnd
             _nrf24l01CSHigh
           _nrf24l01SPISend
           _nrf24l01SPIStart
             _nrf24l01CSLow
     _nrf24l01ReceivePacket
       _nrf24l01CEHigh
       _nrf24l01CELow
       _nrf24l01SPIEnd
         _nrf24l01CSHigh
       _nrf24l01SPISend
       _nrf24l01SPIStart
         _nrf24l01CSLow
       i1_memset
       i1_nrf24l01Send
         _enableInterrupts
         _nrf24l01SPIEnd
           _nrf24l01CSHigh
         _nrf24l01SPISend
         _nrf24l01SPIStart
           _nrf24l01CSLow
     i1_nrf24l01Send
       _enableInterrupts
       _nrf24l01SPIEnd
         _nrf24l01CSHigh
       _nrf24l01SPISend
       _nrf24l01SPIStart
         _nrf24l01CSLow
     i1_nrf24l01SetRXMode
       _nrf24l01CEHigh
       _nrf24l01CELow
       i1_nrf24l01Send
         _enableInterrupts
         _nrf24l01SPIEnd
           _nrf24l01CSHigh
         _nrf24l01SPISend
         _nrf24l01SPIStart
           _nrf24l01CSLow

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      D       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     50      50       5      100.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50     50      50       7      100.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50     50      50       9      100.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50     22      3B      11       73.8%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0      3D      13       76.3%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0     176      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0     176      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V2.00 build -1524193055 
Symbol Table                                                                                   Thu Jul 26 15:05:29 2018

                  ___altoft@exp 002E                  ___bmul@product 0022                     __CFG_CP$OFF 0000  
                 ___altoft@sign 002F             ___wmul@multiplicand 0022             nrf24l01Send@command 0022  
                  ___ftadd@exp1 003A                    ___ftadd@exp2 0039                     __CFG_LVP$ON 0000  
                  ___ftadd@sign 0038                             l300 0D58                             l304 0D69  
                           l174 138B                             l335 1456                             l192 0A48  
                           l186 0B16                             l456 03AA                             l482 13BD  
                           l467 044D                             l459 03C9                             l716 0FA9  
                           l907 00E0                             l692 0A0D                             l908 0093  
                           l693 0A15                             l685 09FA                             l925 01C9  
                           l936 02D9                             l776 07D9                    __CFG_CPD$OFF 0000  
                           _ISR 0004                             wreg 0009             nrf24l01SendPacket@i 002D  
                          ?_ISR 0070                    ___ftdiv@cntr 0045                    ___ftdiv@sign 004A  
                ??_nrf24l01Init 0033                            l1039 132E                            l3000 166B  
                          l3100 12BF                            l3040 0D0C                            l3024 0CC9  
                          l3018 0CB3                            l3052 0D28                            l3036 0D04  
                          l3300 0777                            l3220 03AC                            l4100 0805  
                          l3142 0DBF                            l3134 0D85                            l3126 0D5D  
                          l3230 03D8                            l3206 0368                            l4102 0828  
                          l3048 0D20                            l3320 07C1                            l3240 03F7  
                          l3224 03B1                            l3216 0377                            l4032 04FB  
                          l3402 00FB                            l3138 0D9E                            l3082 1764  
                          l3218 03A6                            l2700 09E6                            l3412 0113  
                          l3156 0DD5                            l3332 07EB                            l3340 152E  
                          l3076 173E                            l3252 042A                            l4212 0BEF  
                          l3502 02D1                            l3414 0119                            l3166 0E13  
                          l3158 0DE1                            l3326 07CF                            l3318 07B0  
                          l3342 153E                            l3078 174C                            l3086 176F  
                          l3262 0460                            l3246 03FD                            l3432 0183  
                          l3408 010B                            l3352 0039                            l3168 0DE6  
                          l3520 1639                            l3328 07DD                            l2800 13B7  
                          l3272 0478                            l3264 0463                            l3256 0439  
                          l3192 032A                            l3280 0307                  ??_nrf24l01Send 0021  
                          l2706 09FF                            l3098 12BE                            l3362 0055  
                          l3354 004C                            l3514 1613                            l3602 091D  
                          l3290 13F4                            l3282 04C8                            l2708 0A07  
                          l3508 02F5                            l3460 01FB                            l3444 019D  
                          l3436 0188                            l3380 007B                            l3372 0079  
                          l3364 0059                            l3612 139E                            l3532 1609  
                          l3516 161B                            l3604 091E                            l2814 15B7  
                          l3374 006A                            l3366 005F                            l3526 15E3  
                          l3278 04BD                            l3198 033A                            l3630 14DD  
                          l2832 12A5                            l3464 0223                            l3528 15EB  
                          l2920 0F88                            l3624 131A                            l3632 14E9  
                          l2818 15C1                            l3482 0256                            l3474 0247  
                          l3458 01CD                            l2914 0F75                            l2692 09D0  
                          l2828 129F                            l3492 02AB                            l3396 00E9  
                          l2780 140F                            l3580 08D9                            l2932 0FBB  
                          l2916 0F7F                            l2908 0F62                            l2860 096B  
                          l3636 14F1                            l3486 027E                            l3478 024F  
                          l2774 172D                            l2758 17B5                            l2782 141B  
                          l2926 0F9B                            l2918 0F84                            l3750 0AED  
                          l2846 0932                            l2696 09D7                            l3488 0283  
                          l2768 171B                            l2936 0FCD                            l2928 0FA5  
                          l3752 0AD9                            l2856 0960                            l2848 0940  
                          l3648 0E5E                            l2698 09E1                            l2874 168F  
                          l2962 0C20                            l2794 129A                            l3594 08F6  
                          l3586 08DE                            l3690 1475                            l2946 0FE8  
                          l2890 0F39                            l3666 1462                            l3930 0732  
                          l2876 169F                            l2956 0C0A                            l3748 0AE5  
                          l3924 0723                            l3916 06D9                            l2886 0F32  
                          l2984 0C7A                            l2976 0C61                            l2896 0F48  
                          l3970 1566                            l2996 1655                            l3974 1572  
                          l3968 155A                            l3978 157B                            STR_1 185D  
                  __CFG_WDTE$ON 0000                            STR_2 185D                            STR_3 185D  
                          STR_4 185D                            STR_5 185D                            STR_6 1855  
                          STR_7 1846                            STR_8 184B                            STR_9 1834  
                          u2305 0A02                            u3105 0D2F                            u3025 0CD5  
                          u3035 0CE5                            u3055 0D0D                            u2345 0A1C  
                          u2265 09DC                            u3065 0D13                            u3145 1741  
                          u2515 15C2                            u4124 145C                            u2285 09F5  
                          u2525 15C9                            u2605 0955                            u3165 175A  
                          u4125 145B                            u3095 0D29                            u2615 0961  
                          u3175 1765                            u3415 0420                            u3265 0DB9  
                          u2395 1709                            u2475 13BE                            u3435 0431  
                          u2645 1694                            u3525 077F                            u2485 13C3  
                          u3445 0443                            u2815 0F89                            u3615 1533  
                          u2575 0935                            u3455 0455                            u4335 155D  
                          u2915 0C32                            u4507 0D65                            u2755 0F63  
                          u3555 07B1                            u2595 0941                            u4355 156C  
                          u2925 0C42                            u4517 0DC6                            u2845 0F9C  
                          u4365 1573                            u2935 0C62                            u4527 0DDD  
                          u4455 0816                            u2945 0C71                            u4537 0DF8  
                          u2785 0F76                            u3585 07D0                            u2955 0C7B  
                          u4547 0E04                            u4557 0E14                            u4477 0B69  
                          u4567 178C                            u4487 1498                            i1l48 1286  
                          u4577 17A1                            u4497 14A7                            u4587 17AF  
                          _WPUA 020C                            _WPUC 020E  __size_of_nrf24l01InterfaceInit 001C  
                  __CFG_WRT$OFF 0000                   __CFG_FCMEN$ON 0000   __end_of_nrf24l01InterfaceInit 13EC  
                          _atof 12C1                            _main 0B4D                            _ftoa 0E18  
                  ___ftpack@arg 0020                            _loop 04CE                    ___ftpack@exp 0023  
                          fsr0h 0005                            fsr1h 0007                            indf0 0000  
                          fsr0l 0004                            indf1 0001                            fsr1l 0006  
                          btemp 007E  __size_of_nrf24l01ReceivePacket 004D                   __CFG_BORV$LOW 0000  
 __end_of_nrf24l01ReceivePacket 08CE                            start 000F           nrf24l01SetRXPipe@pipe 0025  
                 __CFG_CSWEN$ON 0000               ___bmul@multiplier 0023                   __CFG_MCLRE$ON 0000  
                  ___ftmul@cntr 0065                    ___ftmul@sign 0066     __size_of_nrf24l01SendPacket 00C8  
                         ??_ISR 007D                    ___fttol@exp1 00A5            __size_of_getADCValue 0094  
               ??_nrf24l01CELow 0070                    ___fttol@lval 00A1                 ??_nrf24l01CSLow 0070  
                         ?_atof 00A8                           ?_main 0070                           ?_ftoa 00A6  
                         ?_loop 0070                 __end_of___ftadd 1000                           STR_10 183B  
                         STR_11 1859                           STR_12 1850                           STR_13 1829  
               __end_of___ftdiv 0C9C                 __end_of___ftneg 1280                 __end_of___lldiv 0974  
               __end_of___ftmul 0D50                 __end_of___llmod 1778                 __end_of___ftsub 140A  
               __end_of___fttol 07FB                  __CFG_DEBUG$OFF 0000                           i1l171 000D  
                         i1l327 0878                 __end_of___lwmod 1580          enableInterrupts@enable 0070  
          __size_of_checkRxData 008D                      i1memset@p1 0070             ___lmul@multiplicand 0024  
                 __CFG_PWRTE$ON 0000           nrf24l01SetTXPipe@pipe 0026                    ___lltoft@exp 002D  
                 ___awtoft@sign 002D                 __end_of_dpowers 1828                 __end_of_isdigit 129C  
                         _sleep 137E                   ___ftpack@sign 0024                           atof@s 006E  
                         ftoa@f 00A6                           ftoa@l 00AE                 __end_of_isspace 12C1  
                __CFG_BOREN$OFF 0000                _enableInterrupts 1267                           status 0003  
                         wtemp0 007E                 __end_of_sprintf 04CE     __end_ofi1_nrf24l01SetRXMode 16F6  
              __end_ofi1_memset 1315                 __end_of_strcspn 160E  __size_of_nrf24l01ChangeTXPower 003F  
             getADCValue@adcSum 0054   __end_of_nrf24l01ChangeTXPower 1735                _nrf24l01SPIStart 126F  
               __initialization 0011                _nrf24l01CheckACK 14FF          nrf24l01InitRegisters@i 0031  
                  __end_of_atof 12D4                    __end_of_main 0BF3                    __end_of_ftoa 0F0A  
                  __end_of_loop 0656    nrf24l01ChangeTXPower@rfSetup 0026                ??_nrf24l01CEHigh 0070  
                        ??_atof 006E                          ??_main 00EF                          ??_ftoa 006F  
                 ___fttol@sign1 00A0                          ??_loop 00EE                ??_nrf24l01CSHigh 0070  
              ??_nrf24l01SPIEnd 0070             _nrf24l01GetRXPacket 07FE        __size_of_nrf24l01SPISend 000D  
              __end_of___altoft 16B7                ___llmod@dividend 0032                          _ADRESH 009C  
                        _ADRESL 009B                          ?_sleep 0070                __end_of___awtoft 148C  
                        _ANSELA 018C                          _ANSELC 018E                __end_of___ftpack 0A2C  
              __end_of___lbtoft 137E                __end_of___lltoft 1553                          _ODCONA 028C  
      __size_of_nrf24l01GetPipe 0038                          _ODCONC 028E                          i1l4012 0879  
                        i1l2724 128B                          i1l3714 16F0                          i1l3722 1301  
                        i1l3670 14B1                          i1l3840 08C8                          i1l3832 08B0  
                        i1l3674 14B9                          i1l3836 08C0                          i1l3678 14D1  
                        i1l3990 0847                          i1l3998 0857                          _INLVLA 038C  
                        _INLVLC 038E           __size_of_checkTXPower 0014                __end_of___lwtoft 12FD  
                        u460_27 16DD                          u461_27 16EA                          u462_27 1273  
                        u463_27 1261                          u459_27 16C9        __size_of_nrf24l01SendACK 002E  
          ?_nrf24l01GetRXPacket 0070            __size_of_nrf24l01ISR 0049         nrf24l01SetRXMode@config 0024  
                        ___bmul 129C                          ___ftge 163E                          ___lmul 15AE  
       nrf24l01SetRXMode@rxMode 0025                          ___wmul 13B4                       ??___ftadd 0034  
                __CFG_STVREN$ON 0000                       ??___ftdiv 0041                       ??___ftneg 005A  
                     ??___lldiv 0028                       ??___ftmul 005D                       ??___llmod 0036  
                     ??___ftsub 0041                       ??___fttol 006B                       ??___lwmod 0024  
          __end_of_nrf24l01Init 14B0            __end_of_nrf24l01Send 1449                          _memset 1315  
         _nrf24l01InitRegisters 0656                          _strcat 14D7                          _strchr 132E  
                        _strcmp 14B0                          _strcpy 1399                          _strlen 140A  
                        _strtod 002A                          _strtok 08CE                          _strspn 160E  
                        ftoa@cp 00B2           ___ftmul@f3_as_product 0062       i1nrf24l01SetRXMode@config 0075  
                     ??_isdigit 0020                          loop@ta 0143                          loop@vt 0140  
     i1nrf24l01SetRXMode@rxMode 0076                    _checkTXPower 12D4                       ??_isspace 0020  
                     ??_sprintf 0042                       ??_strcspn 0029              getADCValue@adcLoop 0051  
       __end_of__initialization 0026                      ___altoft@c 0028                      ___ftadd@f1 002E  
                    ___ftadd@f2 0031                      ___ftge@ff1 0020                      ___ftge@ff2 0023  
         ??_nrf24l01GetRXPacket 0020        nrf24l01SendPacket@Packet 0027              getADCValue@channel 0053  
                    ___ftdiv@f1 003E                      ___ftdiv@f2 003B                      ___ftdiv@f3 0046  
                    ___ftneg@f1 0057                      ___awtoft@c 0028                      ___lbtoft@c 002F  
           ___bmul@multiplicand 0020                      ___ftmul@f1 0057                      ___ftmul@f2 005A  
                    ___ftsub@f1 003E                      ___ftsub@f2 003B                      ___fttol@f1 0067  
                __pcstackCOMMON 0070                    __pidataBANK3 1250                      ___lltoft@c 0028  
                 __end_of_sleep 1399                      ___lwtoft@c 0028                       ?i1_memset 0070  
                       ??_sleep 0020                    sprintf@width 004F                     loop@rfSetup 014E  
                    __pbssBANK3 01C2                      __pbssBANK4 0220               ??_nrf24l01SPISend 0070  
            __size_of_exception 0002              checkRxData@strings 00ED         __size_ofi1_nrf24l01Send 001B  
             ??_nrf24l01GetPipe 0026                      __pmaintext 0B4D                         ?___bmul 0020  
                       ?___ftge 0020                         ?___lmul 0020                         ?___wmul 0020  
             ??_nrf24l01SendACK 002E                 __CFG_PPS1WAY$ON 0000               _nrf24l01SetRXMode 1778  
             _nrf24l01SetRXPipe 1449          ?_nrf24l01InitRegisters 0070                      __pintentry 0004  
             _nrf24l01SetTXPipe 17BC                       ?___altoft 0028             nrf24l01SPISend@data 0070  
                       ?_memset 0020                  ___lmul@product 0028              ?_nrf24l01SetRXMode 0070  
                     ?___awtoft 0028                       ?___ftpack 0020                       ?___lbtoft 0028  
            ?_nrf24l01SetRXPipe 0070        __end_of_enableInterrupts 126F              ?_nrf24l01SetTXPipe 0070  
                     ?___lltoft 0028             __CFG_RSTOSC$HFINT32 0000                         ?_strcat 00B3  
                       ?_strchr 0020                         ?_strcmp 0070                         ?_strcpy 0020  
                       ?_strlen 0020                       ?___lwtoft 0028                         ?_strtod 0067  
                       ?_strtok 002E                         ?_strspn 0027           __end_of_n_ADDRESS_MUL 1829  
                    ??i1_memset 0076             ??_nrf24l01SetRXMode 0023        __end_of_nrf24l01SPIStart 1277  
           ??_nrf24l01SetRXPipe 0023             ??_nrf24l01SetTXPipe 0024                         _SSP1BUF 0211  
      __end_of_nrf24l01CheckACK 1529           _nrf24l01InterfaceInit 13D0      __end_of_nrf24l01SendPacket 0E18  
                 ??_getADCValue 004E           __size_of_nrf24l01Init 0024           __size_of_nrf24l01Send 0020  
     __end_of_nrf24l01SetRXMode 17BC       __end_of_nrf24l01SetRXPipe 146A       __end_of_nrf24l01SetTXPipe 1800  
         _nrf24l01ReceivePacket 0881                 __size_of___bmul 0012                 __size_of___ftge 003C  
               __size_of___lmul 0030                         ___ftadd 0F0A                         ___ftdiv 0BF3  
                       ___ftneg 1277                         ___lldiv 0921                 __size_of___wmul 001C  
                       ___ftmul 0C9C                         ___llmod 1735                         ___ftsub 13EC  
                       ___fttol 075C                         ___lwmod 1553                      ??___altoft 002C  
                    ??___awtoft 002B                      ??___ftpack 0025                      ??___lbtoft 002B  
         __end_of_nrf24l01CELow 1257                 __size_of_memset 0019                   ??_checkRxData 006F  
         __end_of_nrf24l01CSLow 07FE                      ??___lltoft 002C                         __ptext1 148C  
                       __ptext2 13D0                         __ptext3 0656                         __ptext4 1449  
                       __ptext5 0800                         __ptext6 1553                         __ptext7 04CE  
                       __ptext8 0974                         __ptext9 14D7                      ??___lwtoft 002B  
               __size_of_strcat 0028                 __size_of_strchr 001A                 __size_of_strcmp 0027  
             __end_of_exception 0004                 __size_of_strcpy 001B                 __size_of_strlen 001F  
                  __size_of_ISR 000B                 __size_of_strtod 02D7                 __size_of_strtok 0053  
               __size_of_strspn 0030                         _counter 01C2                         _dpowers 1800  
                       _isdigit 128D                         _isspace 12AE                         _romData 01DA  
                       _sprintf 0301                         clrloop0 125B                         _strcspn 15DE  
          end_of_initialization 0026                         ftoa@buf 01C9                         ftoa@rem 00AA  
                  _nrf24l01Init 148C                      _setMessage 0974                    _nrf24l01Send 1429  
                    _romDataMap 0241                         memset@c 0022                         memset@n 0024  
                       memset@p 0026                nrf24l01GetPipe@i 002A                 ___lldiv@divisor 0020  
               ___lldiv@counter 002D           _nrf24l01ChangeTXPower 16F6                setMessage@packet 00C0  
  __size_ofi1_nrf24l01SetRXMode 003F                setMessage@status 00BE                         strcmp@r 0074  
         i1nrf24l01Send@command 0073                         strlen@s 0020             __end_of_getADCValue 0B4D  
                       strtod@s 00A7                         strspn@i 002B                       _PORTAbits 000C  
                     _PORTCbits 000E                       _TRISAbits 008C                       _TRISCbits 008E  
              nrf24l01Send@data 0020             __end_of_checkRxData 0AB9                __CFG_FEXTOSC$OFF 0000  
                 ??_nrf24l01ISR 007B          ?_nrf24l01InterfaceInit 0070                     ___ftdiv@exp 0049  
                i1_nrf24l01Send 1348             checkRxData@RXPacket 00EC                      main@packet 01A1  
        ?_nrf24l01ReceivePacket 0070      __size_of_nrf24l01SetRXMode 0044      __size_of_nrf24l01SetRXPipe 0021  
                   ___ftmul@exp 0061      __size_of_nrf24l01SetTXPipe 0044                  __end_of___bmul 12AE  
                __end_of___ftge 167A                  __end_of___lmul 15DE                  __end_of___wmul 13D0  
                     i1memset@c 0072                       i1memset@n 0074                       i1memset@p 0076  
                __end_of_memset 132E                  __end_of_strcat 14FF                  __end_of_strchr 1348  
                __end_of_strcmp 14D7                  __end_of_strcpy 13B4                  __end_of_strlen 1429  
                __end_of_strtod 0301                  __end_of_strtok 0921                  __end_of_strspn 163E  
           start_initialization 0011                 _nrf24l01SPISend 1280                     __end_of_ISR 000F  
                    ftoa@status 00A9               __size_ofi1_memset 0018       nrf24l01SetRXPipe@enRXAddr 0026  
               _nrf24l01GetPipe 0800     __end_of_nrf24l01GetRXPacket 0800         __size_of_nrf24l01CEHigh 0003  
       __size_of_nrf24l01CSHigh 0003                     ?_setMessage 00B8          __end_ofi1_nrf24l01Send 1363  
               _nrf24l01SendACK 1580         __size_of_nrf24l01SPIEnd 0007                 ___llmod@divisor 002E  
               ___llmod@counter 0037          ?_nrf24l01ChangeTXPower 0023         ??_nrf24l01InitRegisters 0027  
              __CFG_LPBOREN$OFF 0000                     _getADCValue 0AB9                        ??___bmul 0021  
                      ??___ftge 0026                        ??___lmul 0028             __end_of_nrf24l01ISR 0881  
                      ??___wmul 0024                     __pdataBANK3 01DA                        ??_memset 0026  
             ?_enableInterrupts 0070                     _checkRxData 0A2C                        ??_strcat 00B5  
                      ??_strchr 0024                        ??_strcmp 0073                        ??_strcpy 0024  
                      ??_strlen 0022                        ??_strtod 006A                        ??_strtok 0030  
                      ??_strspn 0029               __size_of___altoft 003D               __size_of___awtoft 0022  
             __size_of___ftpack 0065               __size_of___lbtoft 001B              ??_enableInterrupts 0070  
             __size_of___lltoft 002A                     __pbssCOMMON 007D                       ___latbits 0002  
             __size_of___lwtoft 0015                   __pcstackBANK0 0020                   __pcstackBANK1 00A0  
                 __pcstackBANK2 0120                   __pcstackBANK3 01A0               ?_nrf24l01SPIStart 0070  
          checkTXPower@rxPacket 0028                    _isdigit$1866 0020               ?_nrf24l01CheckACK 0070  
            ??_nrf24l01SPIStart 0070              ??_nrf24l01CheckACK 0077                 ?i1_nrf24l01Send 0071  
                   sprintf@flag 0048                     sprintf@prec 0051                      loop@packet 014F  
           nrf24l01GetPipe@name 0029             nrf24l01GetPipe@pipe 0028                        ?___ftadd 002E  
                      ?___ftdiv 003B                        ?___ftneg 0057                        ?___lldiv 0020  
                      ?___ftmul 0057                        ?___llmod 002E                        ?___ftsub 003B  
                      ?___fttol 0067                        ?___lwmod 0020            __end_of_n_ADDRESS_P0 1846  
       __end_of_nrf24l01SPISend 128D              i1nrf24l01Send@data 0071       nrf24l01InitRegisters@enAA 002E  
           __size_of_setMessage 0053              _nrf24l01SendPacket 0D50         __end_of_nrf24l01GetPipe 0838  
                      ?_isdigit 0070                       _loop$2153 0146                       _loop$2154 0149  
                      ?_isspace 0070         __end_of_nrf24l01SendACK 15AE                       _exception 0002  
           ?_nrf24l01SendPacket 0027                        ?_sprintf 0038             i1_nrf24l01SetRXMode 16B7  
                      ?_strcspn 0027                  __size_of_sleep 001B                  ___wmul@product 0024  
                   _nrf24l01ISR 0838                       clear_ram0 125A                        _PIE0bits 0090  
                      _PIR0bits 0010                       _sleepLoop 01C8            ??_nrf24l01SendPacket 0029  
               setMessage@value 00BA                 setMessage@topic 00B8            ?i1_nrf24l01SetRXMode 0070  
                   strtod@flags 00A1                     strtod@expon 00A2                      _ADCON0bits 009D  
                    _ADCON1bits 009E               ___wmul@multiplier 0020                        _WPUAbits 020C  
                      i1_memset 12FD                   ?_checkTXPower 0070                        _RXPacket 0220  
                      _TXPacket 01C5                    _isspace$1869 0020                      ?_exception 0070  
                _nrf24l01CEHigh 1251               ___lmul@multiplier 0020         ??_nrf24l01InterfaceInit 0020  
                _nrf24l01CSHigh 1257               nrf24l01ISR@status 007C                  _nrf24l01SPIEnd 1260  
       ??_nrf24l01ReceivePacket 0078          __size_of_nrf24l01CELow 0003          __size_of_nrf24l01CSLow 0003  
         ??i1_nrf24l01SetRXMode 0074                __size_of___ftadd 00F6                __size_of___ftdiv 00A9  
              __size_of___ftneg 0009                __size_of___lldiv 0053                        ___altoft 167A  
              __size_of___ftmul 00B4                __size_of___llmod 0043                __size_of___ftsub 001E  
              __size_of___fttol 009F           nrf24l01SendACK@packet 002F                __size_of___lwmod 002D  
                      ___awtoft 146A                        ___ftpack 09C7                        ___lbtoft 1363  
              ?_nrf24l01SPISend 0070                        ___lltoft 1529                      _ANSELAbits 018C  
                      ___lwtoft 12E8                      _ANSELCbits 018E                  ??_checkTXPower 0027  
              ?_nrf24l01GetPipe 0070                      sprintf@val 004A                checkRxData@value 0120  
                 _n_ADDRESS_MUL 1828                      strcat@from 00B3                checkRxData@topic 00CC  
        __end_of_nrf24l01CEHigh 1254                __size_of_isdigit 000F          __end_of_nrf24l01CSHigh 125A  
              ?_nrf24l01SendACK 0070                __size_of_isspace 0013                        __ptext10 1315  
                      __ptext11 0E18                        __ptext20 0F0A                        __ptext12 0301  
                      __ptext21 146A                        __ptext13 13B4                        __ptext30 1580  
                      __ptext22 12D4                        __ptext14 1735                        __ptext31 17BC  
                      __ptext23 0A2C                        __ptext15 0921                        __ptext40 12AE  
                      __ptext32 0D50                        __ptext24 08CE                        __ptext16 1529  
                      __ptext41 128D                        __ptext33 140A                        __ptext25 160E  
                      __ptext17 075C                        __ptext50 12E8                        __ptext42 15AE  
                      __ptext34 1778                        __ptext26 15DE                        __ptext18 13EC  
                      __ptext51 09C7                        __ptext43 1277                        __ptext35 16F6  
                      __ptext27 132E                        __ptext19 0AB9                        __ptext60 07FB  
                      __ptext44 0C9C                        __ptext36 1429                        __ptext28 1399  
                      __ptext61 1280                        __ptext53 0838                        __ptext45 163E  
                      __ptext37 07FE                        __ptext29 137E                        __ptext62 1260  
                      __ptext54 0881                        __ptext46 0BF3                        __ptext38 12C1  
                      __ptext63 1257                        __ptext55 12FD                        __ptext47 129C  
                      __ptext39 002A                        __ptext64 1267                        __ptext56 14FF  
                      __ptext48 167A                        __ptext65 1254                        __ptext57 16B7  
                      __ptext49 1363                        __ptext66 1251                        __ptext58 1348  
                      __ptext67 14B0                        __ptext59 126F                        __ptext68 0002  
                  _SSP1CON1bits 0215          __end_of_nrf24l01SPIEnd 1267                        _nrf24l01 007D  
              __size_of_sprintf 01CD                     _OSCCON1bits 0919                    ??_setMessage 00BD  
              __size_of_strcspn 0030                      strcpy@from 0022   nrf24l01ChangeTXPower@addPower 0023  
                      _loop$920 014C         ??_nrf24l01ChangeTXPower 0025                   __size_of_atof 0013  
                 __size_of_main 00A6                   __size_of_ftoa 00F2                   __size_of_loop 0188  
  nrf24l01InitRegisters@channel 0029                       sleep@wdps 0021    nrf24l01InitRegisters@feature 002B  
            exception@exception 0070                      _RC0PPSbits 0EA0    nrf24l01InitRegisters@rfSetup 002C  
                    _RC1PPSbits 0EA1                    ?_getADCValue 004B                      _RC2PPSbits 0EA2  
__size_of_nrf24l01InitRegisters 0106                      strtod@eexp 00A0   __end_of_nrf24l01InitRegisters 075C  
                      int$flags 007E    nrf24l01InitRegisters@setupAW 002A                      _ODCONAbits 028C  
                  _SSP1STATbits 0214                        main@pipe 01A0          nrf24l01ReceivePacket@i 007A  
                  ?_checkRxData 0070                   _nrf24l01CELow 1254                   _nrf24l01CSLow 07FB  
            __end_of_setMessage 09C7                      _INTCONbits 000B                 ?_nrf24l01CEHigh 0070  
                    _FVRCONbits 0117                ??i1_nrf24l01Send 0072                     ??_exception 0070  
               ?_nrf24l01CSHigh 0070                  __pstringtext10 1859                  __pstringtext11 185D  
                __pstringtext12 0000                        isdigit@c 0021                        memset@p1 0020  
               ?_nrf24l01SPIEnd 0070                        intlevel1 0000                       sprintf@ap 0049  
               checkRxData@name 00AC                       sprintf@sp 004E                    _n_ADDRESS_P0 1841  
     __size_of_enableInterrupts 0008                       strchr@chr 0022                ___lwmod@dividend 0022  
                     strchr@ptr 0020                        isspace@c 0021                ___lldiv@dividend 0024  
             __CFG_CLKOUTEN$OFF 0000                       strcspn@s1 002D                       strcspn@s2 0027  
  __size_of_nrf24l01GetRXPacket 0002     nrf24l01InitRegisters@config 0030       __size_of_nrf24l01SPIStart 0008  
                     strtod@res 0067       __size_of_nrf24l01CheckACK 002A     nrf24l01InitRegisters@status 002D  
    nrf24l01ReceivePacket@width 0079                  ?_nrf24l01CELow 0070                   __pstringtext1 1800  
                 __pstringtext2 1841                   __pstringtext3 1828                   __pstringtext4 1834  
                 __pstringtext5 183B                   __pstringtext6 1846                   __pstringtext7 184B  
                 __pstringtext8 1850                   __pstringtext9 1855                  ?_nrf24l01CSLow 0070  
                      sprintf@c 0053                        sprintf@f 0038      nrf24l01InitRegisters@DynPD 002F  
                      strcat@cp 00B6                        strcat@to 00B7                        strcmp@s1 0070  
                      strcmp@s2 0072                ___lldiv@quotient 0029                 ___lwmod@divisor 0020  
                      strcpy@cp 0024                        strlen@cp 0024                        strcpy@to 0020  
               ___lwmod@counter 0025                        strcspn@i 002B                        strtod@_u 00A3  
                      strtok@s1 0033                        strtok@s2 002E                        strspn@s1 002D  
                      strspn@s2 0027                        strtok@sp 01C7                      _WDTCONbits 0097  
                 ?_nrf24l01Init 0070                   ?_nrf24l01Send 0020                      _STATUSbits 0003  
                  ?_nrf24l01ISR 0070            __end_of_checkTXPower 12E8  
