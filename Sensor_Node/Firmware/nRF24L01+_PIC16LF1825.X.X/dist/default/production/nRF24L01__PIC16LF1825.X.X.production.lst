

Microchip Technology PIC LITE Macro Assembler V2.00 build -1524193055 
                                                                                               Thu Aug 02 13:26:33 2018

Microchip Technology Omniscient Code Generator v2.00 (Free mode) build 20180527130849
     1                           	processor	16LF18325
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK1,global,class=CODE,delta=2
     5                           	psect	stringtext1,global,class=STRCODE,delta=2
     6                           	psect	stringtext2,global,class=STRCODE,delta=2
     7                           	psect	stringtext3,global,class=STRCODE,delta=2
     8                           	psect	stringtext4,global,class=STRCODE,delta=2
     9                           	psect	stringtext5,global,class=STRCODE,delta=2
    10                           	psect	stringtext6,global,class=STRCODE,delta=2
    11                           	psect	stringtext7,global,class=STRCODE,delta=2
    12                           	psect	stringtext8,global,class=STRCODE,delta=2
    13                           	psect	stringtext9,global,class=STRCODE,delta=2
    14                           	psect	stringtext10,global,class=STRCODE,delta=2
    15                           	psect	stringtext11,global,class=STRCODE,delta=2
    16                           	psect	stringtext12,global,class=STRCODE,delta=2
    17                           	psect	stringtext13,global,class=STRCODE,delta=2
    18                           	psect	stringtext14,global,class=STRCODE,delta=2
    19                           	psect	stringtext15,global,class=STRCODE,delta=2
    20                           	psect	stringtext16,global,class=STRCODE,delta=2
    21                           	psect	stringtext17,global,class=STRCODE,delta=2
    22                           	psect	cinit,global,class=CODE,merge=1,delta=2
    23                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    24                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    25                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    26                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    27                           	psect	clrtext,global,class=CODE,delta=2
    28                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1
    29                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    30                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    31                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    32                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    33                           	psect	text1,local,class=CODE,merge=1,delta=2
    34                           	psect	text2,local,class=CODE,merge=1,delta=2
    35                           	psect	text3,local,class=CODE,merge=1,delta=2
    36                           	psect	text4,local,class=CODE,merge=1,delta=2
    37                           	psect	text5,local,class=CODE,merge=1,delta=2,group=1
    38                           	psect	text6,local,class=CODE,merge=1,delta=2
    39                           	psect	text7,local,class=CODE,merge=1,delta=2
    40                           	psect	text8,local,class=CODE,merge=1,delta=2,group=1
    41                           	psect	text9,local,class=CODE,merge=1,delta=2
    42                           	psect	text10,local,class=CODE,merge=1,delta=2
    43                           	psect	text11,local,class=CODE,merge=1,delta=2,group=2
    44                           	psect	text12,local,class=CODE,merge=1,delta=2,group=2
    45                           	psect	text13,local,class=CODE,merge=1,delta=2
    46                           	psect	text14,local,class=CODE,merge=1,delta=2
    47                           	psect	text15,local,class=CODE,merge=1,delta=2
    48                           	psect	text16,local,class=CODE,merge=1,delta=2,group=2
    49                           	psect	text17,local,class=CODE,merge=1,delta=2
    50                           	psect	text18,local,class=CODE,merge=1,delta=2
    51                           	psect	text19,local,class=CODE,merge=1,delta=2,group=2
    52                           	psect	text20,local,class=CODE,merge=1,delta=2,group=2
    53                           	psect	text21,local,class=CODE,merge=1,delta=2
    54                           	psect	text22,local,class=CODE,merge=1,delta=2,group=2
    55                           	psect	text23,local,class=CODE,merge=1,delta=2,group=1
    56                           	psect	text24,local,class=CODE,merge=1,delta=2,group=1
    57                           	psect	text25,local,class=CODE,merge=1,delta=2,group=1
    58                           	psect	text26,local,class=CODE,merge=1,delta=2,group=1
    59                           	psect	text27,local,class=CODE,merge=1,delta=2,group=1
    60                           	psect	text28,local,class=CODE,merge=1,delta=2,group=1
    61                           	psect	text29,local,class=CODE,merge=1,delta=2,group=1
    62                           	psect	text30,local,class=CODE,merge=1,delta=2,group=1
    63                           	psect	text31,local,class=CODE,merge=1,delta=2,group=1
    64                           	psect	text32,local,class=CODE,merge=1,delta=2
    65                           	psect	text33,local,class=CODE,merge=1,delta=2
    66                           	psect	text34,local,class=CODE,merge=1,delta=2,group=1
    67                           	psect	text35,local,class=CODE,merge=1,delta=2,group=1
    68                           	psect	text36,local,class=CODE,merge=1,delta=2,group=1
    69                           	psect	text37,local,class=CODE,merge=1,delta=2,group=1
    70                           	psect	text38,local,class=CODE,merge=1,delta=2,group=1
    71                           	psect	text39,local,class=CODE,merge=1,delta=2,group=1
    72                           	psect	intentry,global,class=CODE,delta=2
    73                           	psect	text41,local,class=CODE,merge=1,delta=2
    74                           	psect	text42,local,class=CODE,merge=1,delta=2
    75                           	psect	text43,local,class=CODE,merge=1,delta=2
    76                           	psect	text44,local,class=CODE,merge=1,delta=2
    77                           	psect	text45,local,class=CODE,merge=1,delta=2
    78                           	psect	text46,local,class=CODE,merge=1,delta=2
    79                           	psect	text47,local,class=CODE,merge=1,delta=2
    80                           	psect	text48,local,class=CODE,merge=1,delta=2
    81                           	psect	text49,local,class=CODE,merge=1,delta=2
    82                           	psect	text50,local,class=CODE,merge=1,delta=2
    83                           	psect	text51,local,class=CODE,merge=1,delta=2
    84                           	psect	text52,local,class=CODE,merge=1,delta=2
    85                           	psect	text53,local,class=CODE,merge=1,delta=2
    86                           	psect	text54,local,class=CODE,merge=1,delta=2
    87                           	dabs	1,0x7E,2
    88  0000                     
    89                           ; Version 2.00
    90                           ; Generated 27/05/2018 GMT
    91                           ; 
    92                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
    93                           ; All rights reserved.
    94                           ; 
    95                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    96                           ; 
    97                           ; Redistribution and use in source and binary forms, with or without modification, are
    98                           ; permitted provided that the following conditions are met:
    99                           ; 
   100                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   101                           ;        conditions and the following disclaimer.
   102                           ; 
   103                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   104                           ;        of conditions and the following disclaimer in the documentation and/or other
   105                           ;        materials provided with the distribution.
   106                           ; 
   107                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   108                           ;        software without specific prior written permission.
   109                           ; 
   110                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   111                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   112                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   113                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   114                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   115                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   116                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   117                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   118                           ; 
   119                           ; 
   120                           ; Code-generator required, PIC16LF18325 Definitions
   121                           ; 
   122                           ; SFR Addresses
   123  0000                     	;# 
   124  0001                     	;# 
   125  0002                     	;# 
   126  0003                     	;# 
   127  0004                     	;# 
   128  0005                     	;# 
   129  0006                     	;# 
   130  0007                     	;# 
   131  0008                     	;# 
   132  0009                     	;# 
   133  000A                     	;# 
   134  000B                     	;# 
   135  000C                     	;# 
   136  000E                     	;# 
   137  0010                     	;# 
   138  0011                     	;# 
   139  0012                     	;# 
   140  0013                     	;# 
   141  0014                     	;# 
   142  0015                     	;# 
   143  0015                     	;# 
   144  0016                     	;# 
   145  0016                     	;# 
   146  0017                     	;# 
   147  0018                     	;# 
   148  0019                     	;# 
   149  0019                     	;# 
   150  001A                     	;# 
   151  001B                     	;# 
   152  001C                     	;# 
   153  001D                     	;# 
   154  001E                     	;# 
   155  001F                     	;# 
   156  008C                     	;# 
   157  008E                     	;# 
   158  0090                     	;# 
   159  0091                     	;# 
   160  0092                     	;# 
   161  0093                     	;# 
   162  0094                     	;# 
   163  0097                     	;# 
   164  009B                     	;# 
   165  009B                     	;# 
   166  009C                     	;# 
   167  009D                     	;# 
   168  009E                     	;# 
   169  009F                     	;# 
   170  010C                     	;# 
   171  010E                     	;# 
   172  0111                     	;# 
   173  0112                     	;# 
   174  0113                     	;# 
   175  0114                     	;# 
   176  0115                     	;# 
   177  0116                     	;# 
   178  0117                     	;# 
   179  0118                     	;# 
   180  0119                     	;# 
   181  018C                     	;# 
   182  018E                     	;# 
   183  0199                     	;# 
   184  0199                     	;# 
   185  0199                     	;# 
   186  019A                     	;# 
   187  019A                     	;# 
   188  019A                     	;# 
   189  019B                     	;# 
   190  019B                     	;# 
   191  019B                     	;# 
   192  019B                     	;# 
   193  019B                     	;# 
   194  019C                     	;# 
   195  019C                     	;# 
   196  019C                     	;# 
   197  019D                     	;# 
   198  019D                     	;# 
   199  019D                     	;# 
   200  019E                     	;# 
   201  019E                     	;# 
   202  019E                     	;# 
   203  019F                     	;# 
   204  019F                     	;# 
   205  019F                     	;# 
   206  019F                     	;# 
   207  019F                     	;# 
   208  020C                     	;# 
   209  020E                     	;# 
   210  0211                     	;# 
   211  0211                     	;# 
   212  0212                     	;# 
   213  0212                     	;# 
   214  0213                     	;# 
   215  0213                     	;# 
   216  0214                     	;# 
   217  0214                     	;# 
   218  0215                     	;# 
   219  0215                     	;# 
   220  0215                     	;# 
   221  0215                     	;# 
   222  0216                     	;# 
   223  0216                     	;# 
   224  0217                     	;# 
   225  0217                     	;# 
   226  0219                     	;# 
   227  021A                     	;# 
   228  021B                     	;# 
   229  021C                     	;# 
   230  021D                     	;# 
   231  021D                     	;# 
   232  021E                     	;# 
   233  021F                     	;# 
   234  028C                     	;# 
   235  028E                     	;# 
   236  0291                     	;# 
   237  0291                     	;# 
   238  0292                     	;# 
   239  0293                     	;# 
   240  0294                     	;# 
   241  0295                     	;# 
   242  0295                     	;# 
   243  0296                     	;# 
   244  0297                     	;# 
   245  0298                     	;# 
   246  029F                     	;# 
   247  030C                     	;# 
   248  030E                     	;# 
   249  0311                     	;# 
   250  0311                     	;# 
   251  0312                     	;# 
   252  0313                     	;# 
   253  0314                     	;# 
   254  0315                     	;# 
   255  0315                     	;# 
   256  0316                     	;# 
   257  0317                     	;# 
   258  0318                     	;# 
   259  038C                     	;# 
   260  038E                     	;# 
   261  0391                     	;# 
   262  0392                     	;# 
   263  0393                     	;# 
   264  0397                     	;# 
   265  0398                     	;# 
   266  0399                     	;# 
   267  039A                     	;# 
   268  039C                     	;# 
   269  039D                     	;# 
   270  039E                     	;# 
   271  039F                     	;# 
   272  0411                     	;# 
   273  0411                     	;# 
   274  0412                     	;# 
   275  0413                     	;# 
   276  0414                     	;# 
   277  0415                     	;# 
   278  0416                     	;# 
   279  0417                     	;# 
   280  0418                     	;# 
   281  0418                     	;# 
   282  0419                     	;# 
   283  041A                     	;# 
   284  041B                     	;# 
   285  041C                     	;# 
   286  041D                     	;# 
   287  041E                     	;# 
   288  041F                     	;# 
   289  0498                     	;# 
   290  0498                     	;# 
   291  0499                     	;# 
   292  049A                     	;# 
   293  049B                     	;# 
   294  049B                     	;# 
   295  049C                     	;# 
   296  049D                     	;# 
   297  049E                     	;# 
   298  049F                     	;# 
   299  0617                     	;# 
   300  0618                     	;# 
   301  0619                     	;# 
   302  0619                     	;# 
   303  061A                     	;# 
   304  061B                     	;# 
   305  061C                     	;# 
   306  061C                     	;# 
   307  061F                     	;# 
   308  0691                     	;# 
   309  0692                     	;# 
   310  0693                     	;# 
   311  0694                     	;# 
   312  0695                     	;# 
   313  0696                     	;# 
   314  0697                     	;# 
   315  0698                     	;# 
   316  0699                     	;# 
   317  0711                     	;# 
   318  0712                     	;# 
   319  0713                     	;# 
   320  0714                     	;# 
   321  0715                     	;# 
   322  0716                     	;# 
   323  0717                     	;# 
   324  0718                     	;# 
   325  0719                     	;# 
   326  0891                     	;# 
   327  0891                     	;# 
   328  0891                     	;# 
   329  0891                     	;# 
   330  0891                     	;# 
   331  0891                     	;# 
   332  0892                     	;# 
   333  0892                     	;# 
   334  0892                     	;# 
   335  0893                     	;# 
   336  0893                     	;# 
   337  0893                     	;# 
   338  0893                     	;# 
   339  0893                     	;# 
   340  0893                     	;# 
   341  0894                     	;# 
   342  0894                     	;# 
   343  0894                     	;# 
   344  0895                     	;# 
   345  0895                     	;# 
   346  0895                     	;# 
   347  0896                     	;# 
   348  0896                     	;# 
   349  0896                     	;# 
   350  089B                     	;# 
   351  0911                     	;# 
   352  0912                     	;# 
   353  0913                     	;# 
   354  0914                     	;# 
   355  0915                     	;# 
   356  0916                     	;# 
   357  0918                     	;# 
   358  0919                     	;# 
   359  091A                     	;# 
   360  091B                     	;# 
   361  091C                     	;# 
   362  091D                     	;# 
   363  091E                     	;# 
   364  091F                     	;# 
   365  0E0F                     	;# 
   366  0E10                     	;# 
   367  0E11                     	;# 
   368  0E12                     	;# 
   369  0E13                     	;# 
   370  0E14                     	;# 
   371  0E15                     	;# 
   372  0E16                     	;# 
   373  0E17                     	;# 
   374  0E18                     	;# 
   375  0E19                     	;# 
   376  0E1A                     	;# 
   377  0E1B                     	;# 
   378  0E1C                     	;# 
   379  0E1D                     	;# 
   380  0E1E                     	;# 
   381  0E1F                     	;# 
   382  0E20                     	;# 
   383  0E21                     	;# 
   384  0E22                     	;# 
   385  0E24                     	;# 
   386  0E25                     	;# 
   387  0E28                     	;# 
   388  0E29                     	;# 
   389  0E2A                     	;# 
   390  0E2B                     	;# 
   391  0E2C                     	;# 
   392  0E2D                     	;# 
   393  0E2E                     	;# 
   394  0E2F                     	;# 
   395  0E90                     	;# 
   396  0E91                     	;# 
   397  0E92                     	;# 
   398  0E94                     	;# 
   399  0E95                     	;# 
   400  0EA0                     	;# 
   401  0EA1                     	;# 
   402  0EA2                     	;# 
   403  0EA3                     	;# 
   404  0EA4                     	;# 
   405  0EA5                     	;# 
   406  0F0F                     	;# 
   407  0F10                     	;# 
   408  0F11                     	;# 
   409  0F12                     	;# 
   410  0F13                     	;# 
   411  0F14                     	;# 
   412  0F15                     	;# 
   413  0F16                     	;# 
   414  0F17                     	;# 
   415  0F18                     	;# 
   416  0F19                     	;# 
   417  0F1A                     	;# 
   418  0F1B                     	;# 
   419  0F1C                     	;# 
   420  0F1D                     	;# 
   421  0F1E                     	;# 
   422  0F1F                     	;# 
   423  0F20                     	;# 
   424  0F21                     	;# 
   425  0F22                     	;# 
   426  0F23                     	;# 
   427  0F24                     	;# 
   428  0F25                     	;# 
   429  0F26                     	;# 
   430  0F27                     	;# 
   431  0F28                     	;# 
   432  0F29                     	;# 
   433  0F2A                     	;# 
   434  0F2B                     	;# 
   435  0F2C                     	;# 
   436  0F2D                     	;# 
   437  0F2E                     	;# 
   438  0F2F                     	;# 
   439  0F30                     	;# 
   440  0F31                     	;# 
   441  0F32                     	;# 
   442  0F33                     	;# 
   443  0F34                     	;# 
   444  0F35                     	;# 
   445  0F36                     	;# 
   446  0F37                     	;# 
   447  0FE4                     	;# 
   448  0FE5                     	;# 
   449  0FE6                     	;# 
   450  0FE7                     	;# 
   451  0FE8                     	;# 
   452  0FE9                     	;# 
   453  0FEA                     	;# 
   454  0FEB                     	;# 
   455  0FED                     	;# 
   456  0FEE                     	;# 
   457  0FEF                     	;# 
   458  0000                     	;# 
   459  0001                     	;# 
   460  0002                     	;# 
   461  0003                     	;# 
   462  0004                     	;# 
   463  0005                     	;# 
   464  0006                     	;# 
   465  0007                     	;# 
   466  0008                     	;# 
   467  0009                     	;# 
   468  000A                     	;# 
   469  000B                     	;# 
   470  000C                     	;# 
   471  000E                     	;# 
   472  0010                     	;# 
   473  0011                     	;# 
   474  0012                     	;# 
   475  0013                     	;# 
   476  0014                     	;# 
   477  0015                     	;# 
   478  0015                     	;# 
   479  0016                     	;# 
   480  0016                     	;# 
   481  0017                     	;# 
   482  0018                     	;# 
   483  0019                     	;# 
   484  0019                     	;# 
   485  001A                     	;# 
   486  001B                     	;# 
   487  001C                     	;# 
   488  001D                     	;# 
   489  001E                     	;# 
   490  001F                     	;# 
   491  008C                     	;# 
   492  008E                     	;# 
   493  0090                     	;# 
   494  0091                     	;# 
   495  0092                     	;# 
   496  0093                     	;# 
   497  0094                     	;# 
   498  0097                     	;# 
   499  009B                     	;# 
   500  009B                     	;# 
   501  009C                     	;# 
   502  009D                     	;# 
   503  009E                     	;# 
   504  009F                     	;# 
   505  010C                     	;# 
   506  010E                     	;# 
   507  0111                     	;# 
   508  0112                     	;# 
   509  0113                     	;# 
   510  0114                     	;# 
   511  0115                     	;# 
   512  0116                     	;# 
   513  0117                     	;# 
   514  0118                     	;# 
   515  0119                     	;# 
   516  018C                     	;# 
   517  018E                     	;# 
   518  0199                     	;# 
   519  0199                     	;# 
   520  0199                     	;# 
   521  019A                     	;# 
   522  019A                     	;# 
   523  019A                     	;# 
   524  019B                     	;# 
   525  019B                     	;# 
   526  019B                     	;# 
   527  019B                     	;# 
   528  019B                     	;# 
   529  019C                     	;# 
   530  019C                     	;# 
   531  019C                     	;# 
   532  019D                     	;# 
   533  019D                     	;# 
   534  019D                     	;# 
   535  019E                     	;# 
   536  019E                     	;# 
   537  019E                     	;# 
   538  019F                     	;# 
   539  019F                     	;# 
   540  019F                     	;# 
   541  019F                     	;# 
   542  019F                     	;# 
   543  020C                     	;# 
   544  020E                     	;# 
   545  0211                     	;# 
   546  0211                     	;# 
   547  0212                     	;# 
   548  0212                     	;# 
   549  0213                     	;# 
   550  0213                     	;# 
   551  0214                     	;# 
   552  0214                     	;# 
   553  0215                     	;# 
   554  0215                     	;# 
   555  0215                     	;# 
   556  0215                     	;# 
   557  0216                     	;# 
   558  0216                     	;# 
   559  0217                     	;# 
   560  0217                     	;# 
   561  0219                     	;# 
   562  021A                     	;# 
   563  021B                     	;# 
   564  021C                     	;# 
   565  021D                     	;# 
   566  021D                     	;# 
   567  021E                     	;# 
   568  021F                     	;# 
   569  028C                     	;# 
   570  028E                     	;# 
   571  0291                     	;# 
   572  0291                     	;# 
   573  0292                     	;# 
   574  0293                     	;# 
   575  0294                     	;# 
   576  0295                     	;# 
   577  0295                     	;# 
   578  0296                     	;# 
   579  0297                     	;# 
   580  0298                     	;# 
   581  029F                     	;# 
   582  030C                     	;# 
   583  030E                     	;# 
   584  0311                     	;# 
   585  0311                     	;# 
   586  0312                     	;# 
   587  0313                     	;# 
   588  0314                     	;# 
   589  0315                     	;# 
   590  0315                     	;# 
   591  0316                     	;# 
   592  0317                     	;# 
   593  0318                     	;# 
   594  038C                     	;# 
   595  038E                     	;# 
   596  0391                     	;# 
   597  0392                     	;# 
   598  0393                     	;# 
   599  0397                     	;# 
   600  0398                     	;# 
   601  0399                     	;# 
   602  039A                     	;# 
   603  039C                     	;# 
   604  039D                     	;# 
   605  039E                     	;# 
   606  039F                     	;# 
   607  0411                     	;# 
   608  0411                     	;# 
   609  0412                     	;# 
   610  0413                     	;# 
   611  0414                     	;# 
   612  0415                     	;# 
   613  0416                     	;# 
   614  0417                     	;# 
   615  0418                     	;# 
   616  0418                     	;# 
   617  0419                     	;# 
   618  041A                     	;# 
   619  041B                     	;# 
   620  041C                     	;# 
   621  041D                     	;# 
   622  041E                     	;# 
   623  041F                     	;# 
   624  0498                     	;# 
   625  0498                     	;# 
   626  0499                     	;# 
   627  049A                     	;# 
   628  049B                     	;# 
   629  049B                     	;# 
   630  049C                     	;# 
   631  049D                     	;# 
   632  049E                     	;# 
   633  049F                     	;# 
   634  0617                     	;# 
   635  0618                     	;# 
   636  0619                     	;# 
   637  0619                     	;# 
   638  061A                     	;# 
   639  061B                     	;# 
   640  061C                     	;# 
   641  061C                     	;# 
   642  061F                     	;# 
   643  0691                     	;# 
   644  0692                     	;# 
   645  0693                     	;# 
   646  0694                     	;# 
   647  0695                     	;# 
   648  0696                     	;# 
   649  0697                     	;# 
   650  0698                     	;# 
   651  0699                     	;# 
   652  0711                     	;# 
   653  0712                     	;# 
   654  0713                     	;# 
   655  0714                     	;# 
   656  0715                     	;# 
   657  0716                     	;# 
   658  0717                     	;# 
   659  0718                     	;# 
   660  0719                     	;# 
   661  0891                     	;# 
   662  0891                     	;# 
   663  0891                     	;# 
   664  0891                     	;# 
   665  0891                     	;# 
   666  0891                     	;# 
   667  0892                     	;# 
   668  0892                     	;# 
   669  0892                     	;# 
   670  0893                     	;# 
   671  0893                     	;# 
   672  0893                     	;# 
   673  0893                     	;# 
   674  0893                     	;# 
   675  0893                     	;# 
   676  0894                     	;# 
   677  0894                     	;# 
   678  0894                     	;# 
   679  0895                     	;# 
   680  0895                     	;# 
   681  0895                     	;# 
   682  0896                     	;# 
   683  0896                     	;# 
   684  0896                     	;# 
   685  089B                     	;# 
   686  0911                     	;# 
   687  0912                     	;# 
   688  0913                     	;# 
   689  0914                     	;# 
   690  0915                     	;# 
   691  0916                     	;# 
   692  0918                     	;# 
   693  0919                     	;# 
   694  091A                     	;# 
   695  091B                     	;# 
   696  091C                     	;# 
   697  091D                     	;# 
   698  091E                     	;# 
   699  091F                     	;# 
   700  0E0F                     	;# 
   701  0E10                     	;# 
   702  0E11                     	;# 
   703  0E12                     	;# 
   704  0E13                     	;# 
   705  0E14                     	;# 
   706  0E15                     	;# 
   707  0E16                     	;# 
   708  0E17                     	;# 
   709  0E18                     	;# 
   710  0E19                     	;# 
   711  0E1A                     	;# 
   712  0E1B                     	;# 
   713  0E1C                     	;# 
   714  0E1D                     	;# 
   715  0E1E                     	;# 
   716  0E1F                     	;# 
   717  0E20                     	;# 
   718  0E21                     	;# 
   719  0E22                     	;# 
   720  0E24                     	;# 
   721  0E25                     	;# 
   722  0E28                     	;# 
   723  0E29                     	;# 
   724  0E2A                     	;# 
   725  0E2B                     	;# 
   726  0E2C                     	;# 
   727  0E2D                     	;# 
   728  0E2E                     	;# 
   729  0E2F                     	;# 
   730  0E90                     	;# 
   731  0E91                     	;# 
   732  0E92                     	;# 
   733  0E94                     	;# 
   734  0E95                     	;# 
   735  0EA0                     	;# 
   736  0EA1                     	;# 
   737  0EA2                     	;# 
   738  0EA3                     	;# 
   739  0EA4                     	;# 
   740  0EA5                     	;# 
   741  0F0F                     	;# 
   742  0F10                     	;# 
   743  0F11                     	;# 
   744  0F12                     	;# 
   745  0F13                     	;# 
   746  0F14                     	;# 
   747  0F15                     	;# 
   748  0F16                     	;# 
   749  0F17                     	;# 
   750  0F18                     	;# 
   751  0F19                     	;# 
   752  0F1A                     	;# 
   753  0F1B                     	;# 
   754  0F1C                     	;# 
   755  0F1D                     	;# 
   756  0F1E                     	;# 
   757  0F1F                     	;# 
   758  0F20                     	;# 
   759  0F21                     	;# 
   760  0F22                     	;# 
   761  0F23                     	;# 
   762  0F24                     	;# 
   763  0F25                     	;# 
   764  0F26                     	;# 
   765  0F27                     	;# 
   766  0F28                     	;# 
   767  0F29                     	;# 
   768  0F2A                     	;# 
   769  0F2B                     	;# 
   770  0F2C                     	;# 
   771  0F2D                     	;# 
   772  0F2E                     	;# 
   773  0F2F                     	;# 
   774  0F30                     	;# 
   775  0F31                     	;# 
   776  0F32                     	;# 
   777  0F33                     	;# 
   778  0F34                     	;# 
   779  0F35                     	;# 
   780  0F36                     	;# 
   781  0F37                     	;# 
   782  0FE4                     	;# 
   783  0FE5                     	;# 
   784  0FE6                     	;# 
   785  0FE7                     	;# 
   786  0FE8                     	;# 
   787  0FE9                     	;# 
   788  0FEA                     	;# 
   789  0FEB                     	;# 
   790  0FED                     	;# 
   791  0FEE                     	;# 
   792  0FEF                     	;# 
   793  0000                     	;# 
   794  0001                     	;# 
   795  0002                     	;# 
   796  0003                     	;# 
   797  0004                     	;# 
   798  0005                     	;# 
   799  0006                     	;# 
   800  0007                     	;# 
   801  0008                     	;# 
   802  0009                     	;# 
   803  000A                     	;# 
   804  000B                     	;# 
   805  000C                     	;# 
   806  000E                     	;# 
   807  0010                     	;# 
   808  0011                     	;# 
   809  0012                     	;# 
   810  0013                     	;# 
   811  0014                     	;# 
   812  0015                     	;# 
   813  0015                     	;# 
   814  0016                     	;# 
   815  0016                     	;# 
   816  0017                     	;# 
   817  0018                     	;# 
   818  0019                     	;# 
   819  0019                     	;# 
   820  001A                     	;# 
   821  001B                     	;# 
   822  001C                     	;# 
   823  001D                     	;# 
   824  001E                     	;# 
   825  001F                     	;# 
   826  008C                     	;# 
   827  008E                     	;# 
   828  0090                     	;# 
   829  0091                     	;# 
   830  0092                     	;# 
   831  0093                     	;# 
   832  0094                     	;# 
   833  0097                     	;# 
   834  009B                     	;# 
   835  009B                     	;# 
   836  009C                     	;# 
   837  009D                     	;# 
   838  009E                     	;# 
   839  009F                     	;# 
   840  010C                     	;# 
   841  010E                     	;# 
   842  0111                     	;# 
   843  0112                     	;# 
   844  0113                     	;# 
   845  0114                     	;# 
   846  0115                     	;# 
   847  0116                     	;# 
   848  0117                     	;# 
   849  0118                     	;# 
   850  0119                     	;# 
   851  018C                     	;# 
   852  018E                     	;# 
   853  0199                     	;# 
   854  0199                     	;# 
   855  0199                     	;# 
   856  019A                     	;# 
   857  019A                     	;# 
   858  019A                     	;# 
   859  019B                     	;# 
   860  019B                     	;# 
   861  019B                     	;# 
   862  019B                     	;# 
   863  019B                     	;# 
   864  019C                     	;# 
   865  019C                     	;# 
   866  019C                     	;# 
   867  019D                     	;# 
   868  019D                     	;# 
   869  019D                     	;# 
   870  019E                     	;# 
   871  019E                     	;# 
   872  019E                     	;# 
   873  019F                     	;# 
   874  019F                     	;# 
   875  019F                     	;# 
   876  019F                     	;# 
   877  019F                     	;# 
   878  020C                     	;# 
   879  020E                     	;# 
   880  0211                     	;# 
   881  0211                     	;# 
   882  0212                     	;# 
   883  0212                     	;# 
   884  0213                     	;# 
   885  0213                     	;# 
   886  0214                     	;# 
   887  0214                     	;# 
   888  0215                     	;# 
   889  0215                     	;# 
   890  0215                     	;# 
   891  0215                     	;# 
   892  0216                     	;# 
   893  0216                     	;# 
   894  0217                     	;# 
   895  0217                     	;# 
   896  0219                     	;# 
   897  021A                     	;# 
   898  021B                     	;# 
   899  021C                     	;# 
   900  021D                     	;# 
   901  021D                     	;# 
   902  021E                     	;# 
   903  021F                     	;# 
   904  028C                     	;# 
   905  028E                     	;# 
   906  0291                     	;# 
   907  0291                     	;# 
   908  0292                     	;# 
   909  0293                     	;# 
   910  0294                     	;# 
   911  0295                     	;# 
   912  0295                     	;# 
   913  0296                     	;# 
   914  0297                     	;# 
   915  0298                     	;# 
   916  029F                     	;# 
   917  030C                     	;# 
   918  030E                     	;# 
   919  0311                     	;# 
   920  0311                     	;# 
   921  0312                     	;# 
   922  0313                     	;# 
   923  0314                     	;# 
   924  0315                     	;# 
   925  0315                     	;# 
   926  0316                     	;# 
   927  0317                     	;# 
   928  0318                     	;# 
   929  038C                     	;# 
   930  038E                     	;# 
   931  0391                     	;# 
   932  0392                     	;# 
   933  0393                     	;# 
   934  0397                     	;# 
   935  0398                     	;# 
   936  0399                     	;# 
   937  039A                     	;# 
   938  039C                     	;# 
   939  039D                     	;# 
   940  039E                     	;# 
   941  039F                     	;# 
   942  0411                     	;# 
   943  0411                     	;# 
   944  0412                     	;# 
   945  0413                     	;# 
   946  0414                     	;# 
   947  0415                     	;# 
   948  0416                     	;# 
   949  0417                     	;# 
   950  0418                     	;# 
   951  0418                     	;# 
   952  0419                     	;# 
   953  041A                     	;# 
   954  041B                     	;# 
   955  041C                     	;# 
   956  041D                     	;# 
   957  041E                     	;# 
   958  041F                     	;# 
   959  0498                     	;# 
   960  0498                     	;# 
   961  0499                     	;# 
   962  049A                     	;# 
   963  049B                     	;# 
   964  049B                     	;# 
   965  049C                     	;# 
   966  049D                     	;# 
   967  049E                     	;# 
   968  049F                     	;# 
   969  0617                     	;# 
   970  0618                     	;# 
   971  0619                     	;# 
   972  0619                     	;# 
   973  061A                     	;# 
   974  061B                     	;# 
   975  061C                     	;# 
   976  061C                     	;# 
   977  061F                     	;# 
   978  0691                     	;# 
   979  0692                     	;# 
   980  0693                     	;# 
   981  0694                     	;# 
   982  0695                     	;# 
   983  0696                     	;# 
   984  0697                     	;# 
   985  0698                     	;# 
   986  0699                     	;# 
   987  0711                     	;# 
   988  0712                     	;# 
   989  0713                     	;# 
   990  0714                     	;# 
   991  0715                     	;# 
   992  0716                     	;# 
   993  0717                     	;# 
   994  0718                     	;# 
   995  0719                     	;# 
   996  0891                     	;# 
   997  0891                     	;# 
   998  0891                     	;# 
   999  0891                     	;# 
  1000  0891                     	;# 
  1001  0891                     	;# 
  1002  0892                     	;# 
  1003  0892                     	;# 
  1004  0892                     	;# 
  1005  0893                     	;# 
  1006  0893                     	;# 
  1007  0893                     	;# 
  1008  0893                     	;# 
  1009  0893                     	;# 
  1010  0893                     	;# 
  1011  0894                     	;# 
  1012  0894                     	;# 
  1013  0894                     	;# 
  1014  0895                     	;# 
  1015  0895                     	;# 
  1016  0895                     	;# 
  1017  0896                     	;# 
  1018  0896                     	;# 
  1019  0896                     	;# 
  1020  089B                     	;# 
  1021  0911                     	;# 
  1022  0912                     	;# 
  1023  0913                     	;# 
  1024  0914                     	;# 
  1025  0915                     	;# 
  1026  0916                     	;# 
  1027  0918                     	;# 
  1028  0919                     	;# 
  1029  091A                     	;# 
  1030  091B                     	;# 
  1031  091C                     	;# 
  1032  091D                     	;# 
  1033  091E                     	;# 
  1034  091F                     	;# 
  1035  0E0F                     	;# 
  1036  0E10                     	;# 
  1037  0E11                     	;# 
  1038  0E12                     	;# 
  1039  0E13                     	;# 
  1040  0E14                     	;# 
  1041  0E15                     	;# 
  1042  0E16                     	;# 
  1043  0E17                     	;# 
  1044  0E18                     	;# 
  1045  0E19                     	;# 
  1046  0E1A                     	;# 
  1047  0E1B                     	;# 
  1048  0E1C                     	;# 
  1049  0E1D                     	;# 
  1050  0E1E                     	;# 
  1051  0E1F                     	;# 
  1052  0E20                     	;# 
  1053  0E21                     	;# 
  1054  0E22                     	;# 
  1055  0E24                     	;# 
  1056  0E25                     	;# 
  1057  0E28                     	;# 
  1058  0E29                     	;# 
  1059  0E2A                     	;# 
  1060  0E2B                     	;# 
  1061  0E2C                     	;# 
  1062  0E2D                     	;# 
  1063  0E2E                     	;# 
  1064  0E2F                     	;# 
  1065  0E90                     	;# 
  1066  0E91                     	;# 
  1067  0E92                     	;# 
  1068  0E94                     	;# 
  1069  0E95                     	;# 
  1070  0EA0                     	;# 
  1071  0EA1                     	;# 
  1072  0EA2                     	;# 
  1073  0EA3                     	;# 
  1074  0EA4                     	;# 
  1075  0EA5                     	;# 
  1076  0F0F                     	;# 
  1077  0F10                     	;# 
  1078  0F11                     	;# 
  1079  0F12                     	;# 
  1080  0F13                     	;# 
  1081  0F14                     	;# 
  1082  0F15                     	;# 
  1083  0F16                     	;# 
  1084  0F17                     	;# 
  1085  0F18                     	;# 
  1086  0F19                     	;# 
  1087  0F1A                     	;# 
  1088  0F1B                     	;# 
  1089  0F1C                     	;# 
  1090  0F1D                     	;# 
  1091  0F1E                     	;# 
  1092  0F1F                     	;# 
  1093  0F20                     	;# 
  1094  0F21                     	;# 
  1095  0F22                     	;# 
  1096  0F23                     	;# 
  1097  0F24                     	;# 
  1098  0F25                     	;# 
  1099  0F26                     	;# 
  1100  0F27                     	;# 
  1101  0F28                     	;# 
  1102  0F29                     	;# 
  1103  0F2A                     	;# 
  1104  0F2B                     	;# 
  1105  0F2C                     	;# 
  1106  0F2D                     	;# 
  1107  0F2E                     	;# 
  1108  0F2F                     	;# 
  1109  0F30                     	;# 
  1110  0F31                     	;# 
  1111  0F32                     	;# 
  1112  0F33                     	;# 
  1113  0F34                     	;# 
  1114  0F35                     	;# 
  1115  0F36                     	;# 
  1116  0F37                     	;# 
  1117  0FE4                     	;# 
  1118  0FE5                     	;# 
  1119  0FE6                     	;# 
  1120  0FE7                     	;# 
  1121  0FE8                     	;# 
  1122  0FE9                     	;# 
  1123  0FEA                     	;# 
  1124  0FEB                     	;# 
  1125  0FED                     	;# 
  1126  0FEE                     	;# 
  1127  0FEF                     	;# 
  1128  0000                     	;# 
  1129  0001                     	;# 
  1130  0002                     	;# 
  1131  0003                     	;# 
  1132  0004                     	;# 
  1133  0005                     	;# 
  1134  0006                     	;# 
  1135  0007                     	;# 
  1136  0008                     	;# 
  1137  0009                     	;# 
  1138  000A                     	;# 
  1139  000B                     	;# 
  1140  000C                     	;# 
  1141  000E                     	;# 
  1142  0010                     	;# 
  1143  0011                     	;# 
  1144  0012                     	;# 
  1145  0013                     	;# 
  1146  0014                     	;# 
  1147  0015                     	;# 
  1148  0015                     	;# 
  1149  0016                     	;# 
  1150  0016                     	;# 
  1151  0017                     	;# 
  1152  0018                     	;# 
  1153  0019                     	;# 
  1154  0019                     	;# 
  1155  001A                     	;# 
  1156  001B                     	;# 
  1157  001C                     	;# 
  1158  001D                     	;# 
  1159  001E                     	;# 
  1160  001F                     	;# 
  1161  008C                     	;# 
  1162  008E                     	;# 
  1163  0090                     	;# 
  1164  0091                     	;# 
  1165  0092                     	;# 
  1166  0093                     	;# 
  1167  0094                     	;# 
  1168  0097                     	;# 
  1169  009B                     	;# 
  1170  009B                     	;# 
  1171  009C                     	;# 
  1172  009D                     	;# 
  1173  009E                     	;# 
  1174  009F                     	;# 
  1175  010C                     	;# 
  1176  010E                     	;# 
  1177  0111                     	;# 
  1178  0112                     	;# 
  1179  0113                     	;# 
  1180  0114                     	;# 
  1181  0115                     	;# 
  1182  0116                     	;# 
  1183  0117                     	;# 
  1184  0118                     	;# 
  1185  0119                     	;# 
  1186  018C                     	;# 
  1187  018E                     	;# 
  1188  0199                     	;# 
  1189  0199                     	;# 
  1190  0199                     	;# 
  1191  019A                     	;# 
  1192  019A                     	;# 
  1193  019A                     	;# 
  1194  019B                     	;# 
  1195  019B                     	;# 
  1196  019B                     	;# 
  1197  019B                     	;# 
  1198  019B                     	;# 
  1199  019C                     	;# 
  1200  019C                     	;# 
  1201  019C                     	;# 
  1202  019D                     	;# 
  1203  019D                     	;# 
  1204  019D                     	;# 
  1205  019E                     	;# 
  1206  019E                     	;# 
  1207  019E                     	;# 
  1208  019F                     	;# 
  1209  019F                     	;# 
  1210  019F                     	;# 
  1211  019F                     	;# 
  1212  019F                     	;# 
  1213  020C                     	;# 
  1214  020E                     	;# 
  1215  0211                     	;# 
  1216  0211                     	;# 
  1217  0212                     	;# 
  1218  0212                     	;# 
  1219  0213                     	;# 
  1220  0213                     	;# 
  1221  0214                     	;# 
  1222  0214                     	;# 
  1223  0215                     	;# 
  1224  0215                     	;# 
  1225  0215                     	;# 
  1226  0215                     	;# 
  1227  0216                     	;# 
  1228  0216                     	;# 
  1229  0217                     	;# 
  1230  0217                     	;# 
  1231  0219                     	;# 
  1232  021A                     	;# 
  1233  021B                     	;# 
  1234  021C                     	;# 
  1235  021D                     	;# 
  1236  021D                     	;# 
  1237  021E                     	;# 
  1238  021F                     	;# 
  1239  028C                     	;# 
  1240  028E                     	;# 
  1241  0291                     	;# 
  1242  0291                     	;# 
  1243  0292                     	;# 
  1244  0293                     	;# 
  1245  0294                     	;# 
  1246  0295                     	;# 
  1247  0295                     	;# 
  1248  0296                     	;# 
  1249  0297                     	;# 
  1250  0298                     	;# 
  1251  029F                     	;# 
  1252  030C                     	;# 
  1253  030E                     	;# 
  1254  0311                     	;# 
  1255  0311                     	;# 
  1256  0312                     	;# 
  1257  0313                     	;# 
  1258  0314                     	;# 
  1259  0315                     	;# 
  1260  0315                     	;# 
  1261  0316                     	;# 
  1262  0317                     	;# 
  1263  0318                     	;# 
  1264  038C                     	;# 
  1265  038E                     	;# 
  1266  0391                     	;# 
  1267  0392                     	;# 
  1268  0393                     	;# 
  1269  0397                     	;# 
  1270  0398                     	;# 
  1271  0399                     	;# 
  1272  039A                     	;# 
  1273  039C                     	;# 
  1274  039D                     	;# 
  1275  039E                     	;# 
  1276  039F                     	;# 
  1277  0411                     	;# 
  1278  0411                     	;# 
  1279  0412                     	;# 
  1280  0413                     	;# 
  1281  0414                     	;# 
  1282  0415                     	;# 
  1283  0416                     	;# 
  1284  0417                     	;# 
  1285  0418                     	;# 
  1286  0418                     	;# 
  1287  0419                     	;# 
  1288  041A                     	;# 
  1289  041B                     	;# 
  1290  041C                     	;# 
  1291  041D                     	;# 
  1292  041E                     	;# 
  1293  041F                     	;# 
  1294  0498                     	;# 
  1295  0498                     	;# 
  1296  0499                     	;# 
  1297  049A                     	;# 
  1298  049B                     	;# 
  1299  049B                     	;# 
  1300  049C                     	;# 
  1301  049D                     	;# 
  1302  049E                     	;# 
  1303  049F                     	;# 
  1304  0617                     	;# 
  1305  0618                     	;# 
  1306  0619                     	;# 
  1307  0619                     	;# 
  1308  061A                     	;# 
  1309  061B                     	;# 
  1310  061C                     	;# 
  1311  061C                     	;# 
  1312  061F                     	;# 
  1313  0691                     	;# 
  1314  0692                     	;# 
  1315  0693                     	;# 
  1316  0694                     	;# 
  1317  0695                     	;# 
  1318  0696                     	;# 
  1319  0697                     	;# 
  1320  0698                     	;# 
  1321  0699                     	;# 
  1322  0711                     	;# 
  1323  0712                     	;# 
  1324  0713                     	;# 
  1325  0714                     	;# 
  1326  0715                     	;# 
  1327  0716                     	;# 
  1328  0717                     	;# 
  1329  0718                     	;# 
  1330  0719                     	;# 
  1331  0891                     	;# 
  1332  0891                     	;# 
  1333  0891                     	;# 
  1334  0891                     	;# 
  1335  0891                     	;# 
  1336  0891                     	;# 
  1337  0892                     	;# 
  1338  0892                     	;# 
  1339  0892                     	;# 
  1340  0893                     	;# 
  1341  0893                     	;# 
  1342  0893                     	;# 
  1343  0893                     	;# 
  1344  0893                     	;# 
  1345  0893                     	;# 
  1346  0894                     	;# 
  1347  0894                     	;# 
  1348  0894                     	;# 
  1349  0895                     	;# 
  1350  0895                     	;# 
  1351  0895                     	;# 
  1352  0896                     	;# 
  1353  0896                     	;# 
  1354  0896                     	;# 
  1355  089B                     	;# 
  1356  0911                     	;# 
  1357  0912                     	;# 
  1358  0913                     	;# 
  1359  0914                     	;# 
  1360  0915                     	;# 
  1361  0916                     	;# 
  1362  0918                     	;# 
  1363  0919                     	;# 
  1364  091A                     	;# 
  1365  091B                     	;# 
  1366  091C                     	;# 
  1367  091D                     	;# 
  1368  091E                     	;# 
  1369  091F                     	;# 
  1370  0E0F                     	;# 
  1371  0E10                     	;# 
  1372  0E11                     	;# 
  1373  0E12                     	;# 
  1374  0E13                     	;# 
  1375  0E14                     	;# 
  1376  0E15                     	;# 
  1377  0E16                     	;# 
  1378  0E17                     	;# 
  1379  0E18                     	;# 
  1380  0E19                     	;# 
  1381  0E1A                     	;# 
  1382  0E1B                     	;# 
  1383  0E1C                     	;# 
  1384  0E1D                     	;# 
  1385  0E1E                     	;# 
  1386  0E1F                     	;# 
  1387  0E20                     	;# 
  1388  0E21                     	;# 
  1389  0E22                     	;# 
  1390  0E24                     	;# 
  1391  0E25                     	;# 
  1392  0E28                     	;# 
  1393  0E29                     	;# 
  1394  0E2A                     	;# 
  1395  0E2B                     	;# 
  1396  0E2C                     	;# 
  1397  0E2D                     	;# 
  1398  0E2E                     	;# 
  1399  0E2F                     	;# 
  1400  0E90                     	;# 
  1401  0E91                     	;# 
  1402  0E92                     	;# 
  1403  0E94                     	;# 
  1404  0E95                     	;# 
  1405  0EA0                     	;# 
  1406  0EA1                     	;# 
  1407  0EA2                     	;# 
  1408  0EA3                     	;# 
  1409  0EA4                     	;# 
  1410  0EA5                     	;# 
  1411  0F0F                     	;# 
  1412  0F10                     	;# 
  1413  0F11                     	;# 
  1414  0F12                     	;# 
  1415  0F13                     	;# 
  1416  0F14                     	;# 
  1417  0F15                     	;# 
  1418  0F16                     	;# 
  1419  0F17                     	;# 
  1420  0F18                     	;# 
  1421  0F19                     	;# 
  1422  0F1A                     	;# 
  1423  0F1B                     	;# 
  1424  0F1C                     	;# 
  1425  0F1D                     	;# 
  1426  0F1E                     	;# 
  1427  0F1F                     	;# 
  1428  0F20                     	;# 
  1429  0F21                     	;# 
  1430  0F22                     	;# 
  1431  0F23                     	;# 
  1432  0F24                     	;# 
  1433  0F25                     	;# 
  1434  0F26                     	;# 
  1435  0F27                     	;# 
  1436  0F28                     	;# 
  1437  0F29                     	;# 
  1438  0F2A                     	;# 
  1439  0F2B                     	;# 
  1440  0F2C                     	;# 
  1441  0F2D                     	;# 
  1442  0F2E                     	;# 
  1443  0F2F                     	;# 
  1444  0F30                     	;# 
  1445  0F31                     	;# 
  1446  0F32                     	;# 
  1447  0F33                     	;# 
  1448  0F34                     	;# 
  1449  0F35                     	;# 
  1450  0F36                     	;# 
  1451  0F37                     	;# 
  1452  0FE4                     	;# 
  1453  0FE5                     	;# 
  1454  0FE6                     	;# 
  1455  0FE7                     	;# 
  1456  0FE8                     	;# 
  1457  0FE9                     	;# 
  1458  0FEA                     	;# 
  1459  0FEB                     	;# 
  1460  0FED                     	;# 
  1461  0FEE                     	;# 
  1462  0FEF                     	;# 
  1463  0000                     	;# 
  1464  0001                     	;# 
  1465  0002                     	;# 
  1466  0003                     	;# 
  1467  0004                     	;# 
  1468  0005                     	;# 
  1469  0006                     	;# 
  1470  0007                     	;# 
  1471  0008                     	;# 
  1472  0009                     	;# 
  1473  000A                     	;# 
  1474  000B                     	;# 
  1475  000C                     	;# 
  1476  000E                     	;# 
  1477  0010                     	;# 
  1478  0011                     	;# 
  1479  0012                     	;# 
  1480  0013                     	;# 
  1481  0014                     	;# 
  1482  0015                     	;# 
  1483  0015                     	;# 
  1484  0016                     	;# 
  1485  0016                     	;# 
  1486  0017                     	;# 
  1487  0018                     	;# 
  1488  0019                     	;# 
  1489  0019                     	;# 
  1490  001A                     	;# 
  1491  001B                     	;# 
  1492  001C                     	;# 
  1493  001D                     	;# 
  1494  001E                     	;# 
  1495  001F                     	;# 
  1496  008C                     	;# 
  1497  008E                     	;# 
  1498  0090                     	;# 
  1499  0091                     	;# 
  1500  0092                     	;# 
  1501  0093                     	;# 
  1502  0094                     	;# 
  1503  0097                     	;# 
  1504  009B                     	;# 
  1505  009B                     	;# 
  1506  009C                     	;# 
  1507  009D                     	;# 
  1508  009E                     	;# 
  1509  009F                     	;# 
  1510  010C                     	;# 
  1511  010E                     	;# 
  1512  0111                     	;# 
  1513  0112                     	;# 
  1514  0113                     	;# 
  1515  0114                     	;# 
  1516  0115                     	;# 
  1517  0116                     	;# 
  1518  0117                     	;# 
  1519  0118                     	;# 
  1520  0119                     	;# 
  1521  018C                     	;# 
  1522  018E                     	;# 
  1523  0199                     	;# 
  1524  0199                     	;# 
  1525  0199                     	;# 
  1526  019A                     	;# 
  1527  019A                     	;# 
  1528  019A                     	;# 
  1529  019B                     	;# 
  1530  019B                     	;# 
  1531  019B                     	;# 
  1532  019B                     	;# 
  1533  019B                     	;# 
  1534  019C                     	;# 
  1535  019C                     	;# 
  1536  019C                     	;# 
  1537  019D                     	;# 
  1538  019D                     	;# 
  1539  019D                     	;# 
  1540  019E                     	;# 
  1541  019E                     	;# 
  1542  019E                     	;# 
  1543  019F                     	;# 
  1544  019F                     	;# 
  1545  019F                     	;# 
  1546  019F                     	;# 
  1547  019F                     	;# 
  1548  020C                     	;# 
  1549  020E                     	;# 
  1550  0211                     	;# 
  1551  0211                     	;# 
  1552  0212                     	;# 
  1553  0212                     	;# 
  1554  0213                     	;# 
  1555  0213                     	;# 
  1556  0214                     	;# 
  1557  0214                     	;# 
  1558  0215                     	;# 
  1559  0215                     	;# 
  1560  0215                     	;# 
  1561  0215                     	;# 
  1562  0216                     	;# 
  1563  0216                     	;# 
  1564  0217                     	;# 
  1565  0217                     	;# 
  1566  0219                     	;# 
  1567  021A                     	;# 
  1568  021B                     	;# 
  1569  021C                     	;# 
  1570  021D                     	;# 
  1571  021D                     	;# 
  1572  021E                     	;# 
  1573  021F                     	;# 
  1574  028C                     	;# 
  1575  028E                     	;# 
  1576  0291                     	;# 
  1577  0291                     	;# 
  1578  0292                     	;# 
  1579  0293                     	;# 
  1580  0294                     	;# 
  1581  0295                     	;# 
  1582  0295                     	;# 
  1583  0296                     	;# 
  1584  0297                     	;# 
  1585  0298                     	;# 
  1586  029F                     	;# 
  1587  030C                     	;# 
  1588  030E                     	;# 
  1589  0311                     	;# 
  1590  0311                     	;# 
  1591  0312                     	;# 
  1592  0313                     	;# 
  1593  0314                     	;# 
  1594  0315                     	;# 
  1595  0315                     	;# 
  1596  0316                     	;# 
  1597  0317                     	;# 
  1598  0318                     	;# 
  1599  038C                     	;# 
  1600  038E                     	;# 
  1601  0391                     	;# 
  1602  0392                     	;# 
  1603  0393                     	;# 
  1604  0397                     	;# 
  1605  0398                     	;# 
  1606  0399                     	;# 
  1607  039A                     	;# 
  1608  039C                     	;# 
  1609  039D                     	;# 
  1610  039E                     	;# 
  1611  039F                     	;# 
  1612  0411                     	;# 
  1613  0411                     	;# 
  1614  0412                     	;# 
  1615  0413                     	;# 
  1616  0414                     	;# 
  1617  0415                     	;# 
  1618  0416                     	;# 
  1619  0417                     	;# 
  1620  0418                     	;# 
  1621  0418                     	;# 
  1622  0419                     	;# 
  1623  041A                     	;# 
  1624  041B                     	;# 
  1625  041C                     	;# 
  1626  041D                     	;# 
  1627  041E                     	;# 
  1628  041F                     	;# 
  1629  0498                     	;# 
  1630  0498                     	;# 
  1631  0499                     	;# 
  1632  049A                     	;# 
  1633  049B                     	;# 
  1634  049B                     	;# 
  1635  049C                     	;# 
  1636  049D                     	;# 
  1637  049E                     	;# 
  1638  049F                     	;# 
  1639  0617                     	;# 
  1640  0618                     	;# 
  1641  0619                     	;# 
  1642  0619                     	;# 
  1643  061A                     	;# 
  1644  061B                     	;# 
  1645  061C                     	;# 
  1646  061C                     	;# 
  1647  061F                     	;# 
  1648  0691                     	;# 
  1649  0692                     	;# 
  1650  0693                     	;# 
  1651  0694                     	;# 
  1652  0695                     	;# 
  1653  0696                     	;# 
  1654  0697                     	;# 
  1655  0698                     	;# 
  1656  0699                     	;# 
  1657  0711                     	;# 
  1658  0712                     	;# 
  1659  0713                     	;# 
  1660  0714                     	;# 
  1661  0715                     	;# 
  1662  0716                     	;# 
  1663  0717                     	;# 
  1664  0718                     	;# 
  1665  0719                     	;# 
  1666  0891                     	;# 
  1667  0891                     	;# 
  1668  0891                     	;# 
  1669  0891                     	;# 
  1670  0891                     	;# 
  1671  0891                     	;# 
  1672  0892                     	;# 
  1673  0892                     	;# 
  1674  0892                     	;# 
  1675  0893                     	;# 
  1676  0893                     	;# 
  1677  0893                     	;# 
  1678  0893                     	;# 
  1679  0893                     	;# 
  1680  0893                     	;# 
  1681  0894                     	;# 
  1682  0894                     	;# 
  1683  0894                     	;# 
  1684  0895                     	;# 
  1685  0895                     	;# 
  1686  0895                     	;# 
  1687  0896                     	;# 
  1688  0896                     	;# 
  1689  0896                     	;# 
  1690  089B                     	;# 
  1691  0911                     	;# 
  1692  0912                     	;# 
  1693  0913                     	;# 
  1694  0914                     	;# 
  1695  0915                     	;# 
  1696  0916                     	;# 
  1697  0918                     	;# 
  1698  0919                     	;# 
  1699  091A                     	;# 
  1700  091B                     	;# 
  1701  091C                     	;# 
  1702  091D                     	;# 
  1703  091E                     	;# 
  1704  091F                     	;# 
  1705  0E0F                     	;# 
  1706  0E10                     	;# 
  1707  0E11                     	;# 
  1708  0E12                     	;# 
  1709  0E13                     	;# 
  1710  0E14                     	;# 
  1711  0E15                     	;# 
  1712  0E16                     	;# 
  1713  0E17                     	;# 
  1714  0E18                     	;# 
  1715  0E19                     	;# 
  1716  0E1A                     	;# 
  1717  0E1B                     	;# 
  1718  0E1C                     	;# 
  1719  0E1D                     	;# 
  1720  0E1E                     	;# 
  1721  0E1F                     	;# 
  1722  0E20                     	;# 
  1723  0E21                     	;# 
  1724  0E22                     	;# 
  1725  0E24                     	;# 
  1726  0E25                     	;# 
  1727  0E28                     	;# 
  1728  0E29                     	;# 
  1729  0E2A                     	;# 
  1730  0E2B                     	;# 
  1731  0E2C                     	;# 
  1732  0E2D                     	;# 
  1733  0E2E                     	;# 
  1734  0E2F                     	;# 
  1735  0E90                     	;# 
  1736  0E91                     	;# 
  1737  0E92                     	;# 
  1738  0E94                     	;# 
  1739  0E95                     	;# 
  1740  0EA0                     	;# 
  1741  0EA1                     	;# 
  1742  0EA2                     	;# 
  1743  0EA3                     	;# 
  1744  0EA4                     	;# 
  1745  0EA5                     	;# 
  1746  0F0F                     	;# 
  1747  0F10                     	;# 
  1748  0F11                     	;# 
  1749  0F12                     	;# 
  1750  0F13                     	;# 
  1751  0F14                     	;# 
  1752  0F15                     	;# 
  1753  0F16                     	;# 
  1754  0F17                     	;# 
  1755  0F18                     	;# 
  1756  0F19                     	;# 
  1757  0F1A                     	;# 
  1758  0F1B                     	;# 
  1759  0F1C                     	;# 
  1760  0F1D                     	;# 
  1761  0F1E                     	;# 
  1762  0F1F                     	;# 
  1763  0F20                     	;# 
  1764  0F21                     	;# 
  1765  0F22                     	;# 
  1766  0F23                     	;# 
  1767  0F24                     	;# 
  1768  0F25                     	;# 
  1769  0F26                     	;# 
  1770  0F27                     	;# 
  1771  0F28                     	;# 
  1772  0F29                     	;# 
  1773  0F2A                     	;# 
  1774  0F2B                     	;# 
  1775  0F2C                     	;# 
  1776  0F2D                     	;# 
  1777  0F2E                     	;# 
  1778  0F2F                     	;# 
  1779  0F30                     	;# 
  1780  0F31                     	;# 
  1781  0F32                     	;# 
  1782  0F33                     	;# 
  1783  0F34                     	;# 
  1784  0F35                     	;# 
  1785  0F36                     	;# 
  1786  0F37                     	;# 
  1787  0FE4                     	;# 
  1788  0FE5                     	;# 
  1789  0FE6                     	;# 
  1790  0FE7                     	;# 
  1791  0FE8                     	;# 
  1792  0FE9                     	;# 
  1793  0FEA                     	;# 
  1794  0FEB                     	;# 
  1795  0FED                     	;# 
  1796  0FEE                     	;# 
  1797  0FEF                     	;# 
  1798                           
  1799                           	psect	idataBANK1
  1800  0003                     __pidataBANK1:	
  1801                           
  1802                           ;initializer for _romData
  1803  0003  34C1               	retlw	low (_romDataMap| (0+256))
  1804                           
  1805                           	psect	stringtext1
  1806  1800                     __pstringtext1:	
  1807  1800                     _dpowers:	
  1808  1800  3401               	retlw	1
  1809  1801  3400               	retlw	0
  1810  1802  3400               	retlw	0
  1811  1803  3400               	retlw	0
  1812  1804  340A               	retlw	10
  1813  1805  3400               	retlw	0
  1814  1806  3400               	retlw	0
  1815  1807  3400               	retlw	0
  1816  1808  3464               	retlw	100
  1817  1809  3400               	retlw	0
  1818  180A  3400               	retlw	0
  1819  180B  3400               	retlw	0
  1820  180C  34E8               	retlw	232
  1821  180D  3403               	retlw	3
  1822  180E  3400               	retlw	0
  1823  180F  3400               	retlw	0
  1824  1810  3410               	retlw	16
  1825  1811  3427               	retlw	39
  1826  1812  3400               	retlw	0
  1827  1813  3400               	retlw	0
  1828  1814  34A0               	retlw	160
  1829  1815  3486               	retlw	134
  1830  1816  3401               	retlw	1
  1831  1817  3400               	retlw	0
  1832  1818  3440               	retlw	64
  1833  1819  3442               	retlw	66
  1834  181A  340F               	retlw	15
  1835  181B  3400               	retlw	0
  1836  181C  3480               	retlw	128
  1837  181D  3496               	retlw	150
  1838  181E  3498               	retlw	152
  1839  181F  3400               	retlw	0
  1840  1820  3400               	retlw	0
  1841  1821  34E1               	retlw	225
  1842  1822  34F5               	retlw	245
  1843  1823  3405               	retlw	5
  1844  1824  3400               	retlw	0
  1845  1825  34CA               	retlw	202
  1846  1826  349A               	retlw	154
  1847  1827  343B               	retlw	59
  1848  1828                     __end_of_dpowers:	
  1849                           
  1850                           	psect	stringtext2
  1851  1834                     __pstringtext2:	
  1852  1834                     _statuses:	
  1853  1834  3400               	retlw	0
  1854  1835  3401               	retlw	1
  1855  1836  3402               	retlw	2
  1856  1837  3403               	retlw	3
  1857  1838  3404               	retlw	4
  1858  1839  3400               	retlw	0
  1859  183A  3401               	retlw	1
  1860  183B  3402               	retlw	2
  1861  183C  3403               	retlw	3
  1862  183D  3404               	retlw	4
  1863  183E  3405               	retlw	5
  1864  183F                     __end_of_statuses:	
  1865                           
  1866                           	psect	stringtext3
  1867  184C                     __pstringtext3:	
  1868  184C                     _n_ADDRESS_P0:	
  1869  184C  34AD               	retlw	173
  1870  184D  3487               	retlw	135
  1871  184E  3466               	retlw	102
  1872  184F  34BC               	retlw	188
  1873  1850  34BB               	retlw	187
  1874  1851                     __end_of_n_ADDRESS_P0:	
  1875                           
  1876                           	psect	stringtext4
  1877  1828                     __pstringtext4:	
  1878  1828                     _n_ADDRESS_MUL:	
  1879  1828  3421               	retlw	33
  1880  1829                     __end_of_n_ADDRESS_MUL:	
  1881  000B                     _INTCONbits	set	11
  1882  0010                     _PIR0bits	set	16
  1883  000E                     _PORTCbits	set	14
  1884  000C                     _PORTAbits	set	12
  1885  009E                     _ADCON1bits	set	158
  1886  009C                     _ADRESH	set	156
  1887  009B                     _ADRESL	set	155
  1888  009D                     _ADCON0bits	set	157
  1889  0097                     _WDTCONbits	set	151
  1890  0090                     _PIE0bits	set	144
  1891  008E                     _TRISCbits	set	142
  1892  008C                     _TRISAbits	set	140
  1893  0117                     _FVRCONbits	set	279
  1894  018E                     _ANSELCbits	set	398
  1895  018C                     _ANSELAbits	set	396
  1896  018E                     _ANSELC	set	398
  1897  018C                     _ANSELA	set	396
  1898  020C                     _WPUAbits	set	524
  1899  020E                     _WPUC	set	526
  1900  020C                     _WPUA	set	524
  1901  0211                     _SSP1BUF	set	529
  1902  0214                     _SSP1STATbits	set	532
  1903  0215                     _SSP1CON1bits	set	533
  1904  028C                     _ODCONAbits	set	652
  1905  028E                     _ODCONC	set	654
  1906  028C                     _ODCONA	set	652
  1907  038E                     _INLVLC	set	910
  1908  038C                     _INLVLA	set	908
  1909  0919                     _OSCCON1bits	set	2329
  1910  0EA0                     _RC0PPSbits	set	3744
  1911  0EA2                     _RC2PPSbits	set	3746
  1912  0EA1                     _RC1PPSbits	set	3745
  1913  1829                     STR_14:	
  1914  1829  3425               	retlw	37	;'%'
  1915  182A  346C               	retlw	108	;'l'
  1916  182B  3475               	retlw	117	;'u'
  1917  182C  342E               	retlw	46	;'.'
  1918  182D  3425               	retlw	37	;'%'
  1919  182E  3436               	retlw	54	;'6'
  1920  182F  342E               	retlw	46	;'.'
  1921  1830  3436               	retlw	54	;'6'
  1922  1831  346C               	retlw	108	;'l'
  1923  1832  3475               	retlw	117	;'u'
  1924  1833  3400               	retlw	0
  1925                           
  1926                           	psect	stringtext5
  1927  183F                     __pstringtext5:	
  1928  183F                     STR_6:	
  1929  183F  3441               	retlw	65	;'A'
  1930  1840  344E               	retlw	78	;'N'
  1931  1841  3443               	retlw	67	;'C'
  1932  1842  3433               	retlw	51	;'3'
  1933  1843  346D               	retlw	109	;'m'
  1934  1844  3456               	retlw	86	;'V'
  1935  1845  3400               	retlw	0
  1936                           
  1937                           	psect	stringtext6
  1938  1846                     __pstringtext6:	
  1939  1846                     STR_10:	
  1940  1846  3452               	retlw	82	;'R'
  1941  1847  3446               	retlw	70	;'F'
  1942  1848  3450               	retlw	80	;'P'
  1943  1849  3457               	retlw	87	;'W'
  1944  184A  3452               	retlw	82	;'R'
  1945  184B  3400               	retlw	0
  1946                           
  1947                           	psect	stringtext7
  1948  1851                     __pstringtext7:	
  1949  1851                     STR_3:	
  1950  1851  3444               	retlw	68	;'D'
  1951  1852  3442               	retlw	66	;'B'
  1952  1853  3447               	retlw	71	;'G'
  1953  1854  3431               	retlw	49	;'1'
  1954  1855  3400               	retlw	0
  1955                           
  1956                           	psect	stringtext8
  1957  1856                     __pstringtext8:	
  1958  1856                     STR_5:	
  1959  1856  3444               	retlw	68	;'D'
  1960  1857  3442               	retlw	66	;'B'
  1961  1858  3447               	retlw	71	;'G'
  1962  1859  3432               	retlw	50	;'2'
  1963  185A  3400               	retlw	0
  1964                           
  1965                           	psect	stringtext9
  1966  185B                     __pstringtext9:	
  1967  185B                     STR_7:	
  1968  185B  3444               	retlw	68	;'D'
  1969  185C  3442               	retlw	66	;'B'
  1970  185D  3447               	retlw	71	;'G'
  1971  185E  3433               	retlw	51	;'3'
  1972  185F  3400               	retlw	0
  1973                           
  1974                           	psect	stringtext10
  1975  1860                     __pstringtext10:	
  1976  1860                     STR_9:	
  1977  1860  3444               	retlw	68	;'D'
  1978  1861  3442               	retlw	66	;'B'
  1979  1862  3447               	retlw	71	;'G'
  1980  1863  3434               	retlw	52	;'4'
  1981  1864  3400               	retlw	0
  1982                           
  1983                           	psect	stringtext11
  1984  1865                     __pstringtext11:	
  1985  1865                     STR_11:	
  1986  1865  3444               	retlw	68	;'D'
  1987  1866  3442               	retlw	66	;'B'
  1988  1867  3447               	retlw	71	;'G'
  1989  1868  3435               	retlw	53	;'5'
  1990  1869  3400               	retlw	0
  1991                           
  1992                           	psect	stringtext12
  1993  186A                     __pstringtext12:	
  1994  186A                     STR_8:	
  1995  186A  3454               	retlw	84	;'T'
  1996  186B  3445               	retlw	69	;'E'
  1997  186C  344D               	retlw	77	;'M'
  1998  186D  3450               	retlw	80	;'P'
  1999  186E  3400               	retlw	0
  2000                           
  2001                           	psect	stringtext13
  2002  186F                     __pstringtext13:	
  2003  186F                     STR_4:	
  2004  186F  3456               	retlw	86	;'V'
  2005  1870  3442               	retlw	66	;'B'
  2006  1871  3441               	retlw	65	;'A'
  2007  1872  3454               	retlw	84	;'T'
  2008  1873  3400               	retlw	0
  2009                           
  2010                           	psect	stringtext14
  2011  1874                     __pstringtext14:	
  2012  1874                     STR_13:	
  2013  1874  3442               	retlw	66	;'B'
  2014  1875  344F               	retlw	79	;'O'
  2015  1876  344F               	retlw	79	;'O'
  2016  1877  3454               	retlw	84	;'T'
  2017  1878  3400               	retlw	0
  2018                           
  2019                           	psect	stringtext15
  2020  1879                     __pstringtext15:	
  2021  1879                     STR_12:	
  2022  1879  3455               	retlw	85	;'U'
  2023  187A  3457               	retlw	87	;'W'
  2024  187B  3454               	retlw	84	;'T'
  2025  187C  3400               	retlw	0
  2026                           
  2027                           	psect	stringtext16
  2028  187D                     __pstringtext16:	
  2029  187D                     STR_1:	
  2030  187D  342F               	retlw	47	;'/'
  2031  187E  3400               	retlw	0
  2032                           
  2033                           	psect	stringtext17
  2034  0000                     __pstringtext17:	
  2035  187D                     
  2036                           ; #config settings
  2037  0000                     
  2038                           	psect	cinit
  2039  0011                     start_initialization:	
  2040  0011                     __initialization:	
  2041                           
  2042                           ; Initialize objects allocated to BANK1
  2043  0011  0021               	movlb	1	; select bank1
  2044  0012  3180  2003  3180   	fcall	__pidataBANK1	;fetch initializer
  2045  0015  00ED               	movwf	__pdataBANK1& (0+127)
  2046                           
  2047                           ; Clear objects allocated to BANK1
  2048  0016  01E7               	clrf	__pbssBANK1& (0+127)
  2049  0017  01E8               	clrf	(__pbssBANK1+1)& (0+127)
  2050  0018  01E9               	clrf	(__pbssBANK1+2)& (0+127)
  2051  0019  01EA               	clrf	(__pbssBANK1+3)& (0+127)
  2052  001A  01EB               	clrf	(__pbssBANK1+4)& (0+127)
  2053  001B  01EC               	clrf	(__pbssBANK1+5)& (0+127)
  2054                           
  2055                           ; Clear objects allocated to BANK2
  2056  001C  3051               	movlw	low __pbssBANK2
  2057  001D  0084               	movwf	4
  2058  001E  3001               	movlw	high __pbssBANK2
  2059  001F  0085               	movwf	5
  2060  0020  3015               	movlw	21
  2061  0021  3195  2515  3180   	fcall	clear_ram0
  2062                           
  2063                           ; Clear objects allocated to BANK3
  2064  0024  30A0               	movlw	low __pbssBANK3
  2065  0025  0084               	movwf	4
  2066  0026  3001               	movlw	high __pbssBANK3
  2067  0027  0085               	movwf	5
  2068  0028  303D               	movlw	61
  2069  0029  3195  2515         	fcall	clear_ram0
  2070  002B                     end_of_initialization:	
  2071                           ;End of C runtime variable initialization code
  2072                           
  2073  002B                     __end_of__initialization:	
  2074  002B  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  2075  002C  0020               	movlb	0
  2076  002D  318A  2AE3         	ljmp	_main	;jump to C main() function
  2077                           
  2078                           	psect	bssBANK1
  2079  00E7                     __pbssBANK1:	
  2080  00E7                     _status:	
  2081  00E7                     	ds	3
  2082  00EA                     _TXPacket:	
  2083  00EA                     	ds	2
  2084  00EC                     _sleepLoop:	
  2085  00EC                     	ds	1
  2086                           
  2087                           	psect	dataBANK1
  2088  00ED                     __pdataBANK1:	
  2089  00ED                     _romData:	
  2090  00ED                     	ds	1
  2091                           
  2092                           	psect	bssBANK2
  2093  0151                     __pbssBANK2:	
  2094  0151                     _counter:	
  2095  0151                     	ds	4
  2096  0155                     ftoa@buf:	
  2097  0155                     	ds	17
  2098                           
  2099                           	psect	bssBANK3
  2100  01A0                     __pbssBANK3:	
  2101  01A0                     _RXPacket:	
  2102  01A0                     	ds	33
  2103  01C1                     _romDataMap:	
  2104  01C1                     	ds	28
  2105                           
  2106                           	psect	clrtext
  2107  1515                     clear_ram0:	
  2108                           ;	Called with FSR0 containing the base address, and
  2109                           ;	WREG with the size to clear
  2110                           
  2111  1515  0064               	clrwdt	;clear the watchdog before getting into this loop
  2112  1516                     clrloop0:	
  2113  1516  0180               	clrf	0	;clear RAM location pointed to by FSR
  2114  1517  3101               	addfsr 0,1
  2115  1518  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  2116  1519  2D16               	goto	clrloop0	;have we reached the end yet?
  2117  151A  3400               	retlw	0	;all done for this memory range, return
  2118                           
  2119                           	psect	cstackBANK2
  2120  0120                     __pcstackBANK2:	
  2121  0120                     loop@vt:	
  2122                           
  2123                           ; 3 bytes @ 0x0
  2124  0120                     	ds	3
  2125  0123                     loop@ta:	
  2126                           
  2127                           ; 3 bytes @ 0x3
  2128  0123                     	ds	3
  2129  0126                     _loop$1948:	
  2130                           
  2131                           ; 3 bytes @ 0x6
  2132  0126                     	ds	3
  2133  0129                     _loop$1949:	
  2134                           
  2135                           ; 3 bytes @ 0x9
  2136  0129                     	ds	3
  2137  012C                     loop@rfSetup:	
  2138                           
  2139                           ; 1 bytes @ 0xC
  2140  012C                     	ds	1
  2141  012D                     _loop$1947:	
  2142                           
  2143                           ; 3 bytes @ 0xD
  2144  012D                     	ds	3
  2145  0130                     loop@packet:	
  2146                           
  2147                           ; 33 bytes @ 0x10
  2148  0130                     	ds	33
  2149                           
  2150                           	psect	cstackBANK1
  2151  00A0                     __pcstackBANK1:	
  2152  00A0                     ___fttol@sign1:	
  2153                           
  2154                           ; 1 bytes @ 0x0
  2155  00A0                     	ds	1
  2156  00A1                     ___fttol@lval:	
  2157                           
  2158                           ; 4 bytes @ 0x1
  2159  00A1                     	ds	4
  2160  00A5                     ___fttol@exp1:	
  2161                           
  2162                           ; 1 bytes @ 0x5
  2163  00A5                     	ds	1
  2164  00A6                     ?_ftoa:	
  2165  00A6                     ftoa@f:	
  2166                           ; 1 bytes @ 0x6
  2167                           
  2168                           
  2169                           ; 3 bytes @ 0x6
  2170  00A6                     	ds	3
  2171  00A9                     ftoa@status:	
  2172                           
  2173                           ; 1 bytes @ 0x9
  2174  00A9                     	ds	1
  2175  00AA                     ftoa@rem:	
  2176                           
  2177                           ; 4 bytes @ 0xA
  2178  00AA                     	ds	4
  2179  00AE                     ftoa@l:	
  2180                           
  2181                           ; 4 bytes @ 0xE
  2182  00AE                     	ds	4
  2183  00B2                     ftoa@cp:	
  2184                           
  2185                           ; 1 bytes @ 0x12
  2186  00B2                     	ds	1
  2187  00B3                     ?_strcat:	
  2188  00B3                     strcat@to:	
  2189                           ; 2 bytes @ 0x13
  2190                           
  2191                           
  2192                           ; 2 bytes @ 0x13
  2193  00B3                     	ds	2
  2194  00B5                     strcat@from:	
  2195                           
  2196                           ; 2 bytes @ 0x15
  2197  00B5                     	ds	2
  2198  00B7                     strcat@cp:	
  2199                           
  2200                           ; 2 bytes @ 0x17
  2201  00B7                     	ds	2
  2202  00B9                     ?_sendMessage:	
  2203  00B9                     sendMessage@packet:	
  2204                           ; 1 bytes @ 0x19
  2205                           
  2206                           
  2207                           ; 2 bytes @ 0x19
  2208  00B9                     	ds	2
  2209  00BB                     sendMessage@topic:	
  2210                           
  2211                           ; 2 bytes @ 0x1B
  2212  00BB                     	ds	2
  2213  00BD                     sendMessage@value:	
  2214                           
  2215                           ; 3 bytes @ 0x1D
  2216  00BD                     	ds	3
  2217  00C0                     ??_sendMessage:	
  2218                           
  2219                           ; 1 bytes @ 0x20
  2220  00C0                     	ds	1
  2221  00C1                     sendMessage@status:	
  2222                           
  2223                           ; 2 bytes @ 0x21
  2224  00C1                     	ds	2
  2225  00C3                     ??_loop:	
  2226                           
  2227                           ; 1 bytes @ 0x23
  2228  00C3                     	ds	1
  2229  00C4                     ??_main:	
  2230                           
  2231                           ; 1 bytes @ 0x24
  2232  00C4                     	ds	1
  2233  00C5                     main@pipe:	
  2234                           
  2235                           ; 1 bytes @ 0x25
  2236  00C5                     	ds	1
  2237  00C6                     main@packet:	
  2238                           
  2239                           ; 33 bytes @ 0x26
  2240  00C6                     	ds	33
  2241                           
  2242                           	psect	cstackCOMMON
  2243  0070                     __pcstackCOMMON:	
  2244  0070                     ?_isdigit:	
  2245  0070                     ?_nrf24l01ISR:	
  2246                           ; 1 bit 
  2247                           
  2248  0070                     ?_nrf24l01Init:	
  2249                           ; 1 bytes @ 0x0
  2250                           
  2251  0070                     ?_nrf24l01SetTXPipe:	
  2252                           ; 1 bytes @ 0x0
  2253                           
  2254  0070                     ?_nrf24l01Service:	
  2255                           ; 1 bytes @ 0x0
  2256                           
  2257  0070                     ?_nrf24l01CELow:	
  2258                           ; 1 bytes @ 0x0
  2259                           
  2260  0070                     ??_nrf24l01CELow:	
  2261                           ; 1 bytes @ 0x0
  2262                           
  2263  0070                     ?_nrf24l01CEHigh:	
  2264                           ; 1 bytes @ 0x0
  2265                           
  2266  0070                     ??_nrf24l01CEHigh:	
  2267                           ; 1 bytes @ 0x0
  2268                           
  2269  0070                     ?_nrf24l01CSLow:	
  2270                           ; 1 bytes @ 0x0
  2271                           
  2272  0070                     ??_nrf24l01CSLow:	
  2273                           ; 1 bytes @ 0x0
  2274                           
  2275  0070                     ?_nrf24l01CSHigh:	
  2276                           ; 1 bytes @ 0x0
  2277                           
  2278  0070                     ??_nrf24l01CSHigh:	
  2279                           ; 1 bytes @ 0x0
  2280                           
  2281  0070                     ?_nrf24l01InterfaceInit:	
  2282                           ; 1 bytes @ 0x0
  2283                           
  2284  0070                     ?_nrf24l01SPISend:	
  2285                           ; 1 bytes @ 0x0
  2286                           
  2287  0070                     ??_nrf24l01SPISend:	
  2288                           ; 1 bytes @ 0x0
  2289                           
  2290  0070                     ?_nrf24l01SPIStart:	
  2291                           ; 1 bytes @ 0x0
  2292                           
  2293  0070                     ??_nrf24l01SPIStart:	
  2294                           ; 1 bytes @ 0x0
  2295                           
  2296  0070                     ?_nrf24l01SPIEnd:	
  2297                           ; 1 bytes @ 0x0
  2298                           
  2299  0070                     ??_nrf24l01SPIEnd:	
  2300                           ; 1 bytes @ 0x0
  2301                           
  2302  0070                     ?_enableInterrupts:	
  2303                           ; 1 bytes @ 0x0
  2304                           
  2305  0070                     ??_enableInterrupts:	
  2306                           ; 1 bytes @ 0x0
  2307                           
  2308  0070                     ?_ISR:	
  2309                           ; 1 bytes @ 0x0
  2310                           
  2311  0070                     ?_doWDTSleep:	
  2312                           ; 1 bytes @ 0x0
  2313                           
  2314  0070                     ?_loop:	
  2315                           ; 1 bytes @ 0x0
  2316                           
  2317  0070                     ?_nrf24l01GetPipe:	
  2318                           ; 1 bytes @ 0x0
  2319                           
  2320  0070                     ?_main:	
  2321                           ; 1 bytes @ 0x0
  2322                           
  2323  0070                     ?_nrf24l01SetRXMode:	
  2324                           ; 1 bytes @ 0x0
  2325                           
  2326  0070                     ?_nrf24l01SetRXPipe:	
  2327                           ; 1 bytes @ 0x0
  2328                           
  2329  0070                     ?_nrf24l01InitRegisters:	
  2330                           ; 1 bytes @ 0x0
  2331                           
  2332  0070                     ?i1_nrf24l01SetRXMode:	
  2333                           ; 1 bytes @ 0x0
  2334                           
  2335  0070                     ?i1_nrf24l01Service:	
  2336                           ; 1 bytes @ 0x0
  2337                           
  2338  0070                     ?i1_memset:	
  2339                           ; 1 bytes @ 0x0
  2340                           
  2341  0070                     ?i1_strlen:	
  2342                           ; 1 bytes @ 0x0
  2343                           
  2344  0070                     nrf24l01SPISend@data:	
  2345                           ; 2 bytes @ 0x0
  2346                           
  2347  0070                     enableInterrupts@enable:	
  2348                           ; 1 bytes @ 0x0
  2349                           
  2350  0070                     i1memset@c:	
  2351                           ; 1 bytes @ 0x0
  2352                           
  2353  0070                     i1strlen@s:	
  2354                           ; 2 bytes @ 0x0
  2355                           
  2356                           
  2357                           ; 2 bytes @ 0x0
  2358  0070                     	ds	1
  2359  0071                     ?i1_nrf24l01Send:	
  2360  0071                     i1nrf24l01Send@data:	
  2361                           ; 1 bytes @ 0x1
  2362                           
  2363                           
  2364                           ; 1 bytes @ 0x1
  2365  0071                     	ds	1
  2366  0072                     ??i1_nrf24l01Send:	
  2367  0072                     ??i1_strlen:	
  2368                           ; 1 bytes @ 0x2
  2369                           
  2370  0072                     i1memset@n:	
  2371                           ; 1 bytes @ 0x2
  2372                           
  2373                           
  2374                           ; 2 bytes @ 0x2
  2375  0072                     	ds	1
  2376  0073                     i1nrf24l01Send@command:	
  2377                           
  2378                           ; 1 bytes @ 0x3
  2379  0073                     	ds	1
  2380  0074                     ??i1_nrf24l01SetRXMode:	
  2381  0074                     ??i1_memset:	
  2382                           ; 1 bytes @ 0x4
  2383                           
  2384  0074                     i1strlen@cp:	
  2385                           ; 1 bytes @ 0x4
  2386                           
  2387                           
  2388                           ; 2 bytes @ 0x4
  2389  0074                     	ds	1
  2390  0075                     i1nrf24l01SetRXMode@rxMode:	
  2391  0075                     i1memset@p1:	
  2392                           ; 1 bytes @ 0x5
  2393                           
  2394                           
  2395                           ; 1 bytes @ 0x5
  2396  0075                     	ds	1
  2397  0076                     i1memset@p:	
  2398                           
  2399                           ; 1 bytes @ 0x6
  2400  0076                     	ds	1
  2401  0077                     ??i1_nrf24l01Service:	
  2402                           
  2403                           ; 1 bytes @ 0x7
  2404  0077                     	ds	4
  2405  007B                     i1nrf24l01Service@width:	
  2406                           
  2407                           ; 1 bytes @ 0xB
  2408  007B                     	ds	1
  2409  007C                     i1nrf24l01Service@i:	
  2410                           
  2411                           ; 1 bytes @ 0xC
  2412  007C                     	ds	1
  2413  007D                     ??_nrf24l01ISR:	
  2414                           
  2415                           ; 1 bytes @ 0xD
  2416  007D                     	ds	1
  2417  007E                     ??_ISR:	
  2418                           
  2419                           	psect	cstackBANK0
  2420  0020                     __pcstackBANK0:	
  2421                           ; 1 bytes @ 0xE
  2422                           
  2423  0020                     ?___ftge:	
  2424  0020                     ?_nrf24l01Send:	
  2425                           ; 1 bit 
  2426                           
  2427  0020                     ?_memset:	
  2428                           ; 1 bytes @ 0x0
  2429                           
  2430  0020                     ??_isdigit:	
  2431                           ; 1 bytes @ 0x0
  2432                           
  2433  0020                     ??_nrf24l01InterfaceInit:	
  2434                           ; 1 bytes @ 0x0
  2435                           
  2436  0020                     ??_doWDTSleep:	
  2437                           ; 1 bytes @ 0x0
  2438                           
  2439  0020                     ?___bmul:	
  2440                           ; 1 bytes @ 0x0
  2441                           
  2442  0020                     ?_strcpy:	
  2443                           ; 1 bytes @ 0x0
  2444                           
  2445  0020                     ?_strlen:	
  2446                           ; 2 bytes @ 0x0
  2447                           
  2448  0020                     ?___wmul:	
  2449                           ; 2 bytes @ 0x0
  2450                           
  2451  0020                     ?___lwmod:	
  2452                           ; 2 bytes @ 0x0
  2453                           
  2454  0020                     ?___ftpack:	
  2455                           ; 2 bytes @ 0x0
  2456                           
  2457  0020                     ?___lldiv:	
  2458                           ; 3 bytes @ 0x0
  2459                           
  2460  0020                     nrf24l01Send@data:	
  2461                           ; 4 bytes @ 0x0
  2462                           
  2463  0020                     ___bmul@multiplicand:	
  2464                           ; 1 bytes @ 0x0
  2465                           
  2466  0020                     _isdigit$1700:	
  2467                           ; 1 bytes @ 0x0
  2468                           
  2469  0020                     ___wmul@multiplier:	
  2470                           ; 1 bytes @ 0x0
  2471                           
  2472  0020                     ___lwmod@divisor:	
  2473                           ; 2 bytes @ 0x0
  2474                           
  2475  0020                     memset@c:	
  2476                           ; 2 bytes @ 0x0
  2477                           
  2478  0020                     strcpy@to:	
  2479                           ; 2 bytes @ 0x0
  2480                           
  2481  0020                     strlen@s:	
  2482                           ; 2 bytes @ 0x0
  2483                           
  2484  0020                     ___ftpack@arg:	
  2485                           ; 2 bytes @ 0x0
  2486                           
  2487  0020                     ___ftge@ff1:	
  2488                           ; 3 bytes @ 0x0
  2489                           
  2490  0020                     ___lldiv@divisor:	
  2491                           ; 3 bytes @ 0x0
  2492                           
  2493                           
  2494                           ; 4 bytes @ 0x0
  2495  0020                     	ds	1
  2496  0021                     ??_nrf24l01Send:	
  2497  0021                     ??___bmul:	
  2498                           ; 1 bytes @ 0x1
  2499                           
  2500  0021                     doWDTSleep@wdtps:	
  2501                           ; 1 bytes @ 0x1
  2502                           
  2503  0021                     isdigit@c:	
  2504                           ; 1 bytes @ 0x1
  2505                           
  2506                           
  2507                           ; 1 bytes @ 0x1
  2508  0021                     	ds	1
  2509  0022                     ??_strlen:	
  2510  0022                     ?_sleep:	
  2511                           ; 1 bytes @ 0x2
  2512                           
  2513  0022                     nrf24l01Send@command:	
  2514                           ; 1 bytes @ 0x2
  2515                           
  2516  0022                     ___bmul@product:	
  2517                           ; 1 bytes @ 0x2
  2518                           
  2519  0022                     sleep@milliseconds:	
  2520                           ; 1 bytes @ 0x2
  2521                           
  2522  0022                     ___wmul@multiplicand:	
  2523                           ; 2 bytes @ 0x2
  2524                           
  2525  0022                     ___lwmod@dividend:	
  2526                           ; 2 bytes @ 0x2
  2527                           
  2528  0022                     memset@n:	
  2529                           ; 2 bytes @ 0x2
  2530                           
  2531  0022                     strcpy@from:	
  2532                           ; 2 bytes @ 0x2
  2533                           
  2534                           
  2535                           ; 2 bytes @ 0x2
  2536  0022                     	ds	1
  2537  0023                     ??_nrf24l01SetRXMode:	
  2538  0023                     ??_nrf24l01SetRXPipe:	
  2539                           ; 1 bytes @ 0x3
  2540                           
  2541  0023                     ___bmul@multiplier:	
  2542                           ; 1 bytes @ 0x3
  2543                           
  2544  0023                     ___ftpack@exp:	
  2545                           ; 1 bytes @ 0x3
  2546                           
  2547  0023                     ___ftge@ff2:	
  2548                           ; 1 bytes @ 0x3
  2549                           
  2550                           
  2551                           ; 3 bytes @ 0x3
  2552  0023                     	ds	1
  2553  0024                     ??_strcpy:	
  2554  0024                     ??_nrf24l01SetTXPipe:	
  2555                           ; 1 bytes @ 0x4
  2556                           
  2557  0024                     ??_memset:	
  2558                           ; 1 bytes @ 0x4
  2559                           
  2560  0024                     ??_sleep:	
  2561                           ; 1 bytes @ 0x4
  2562                           
  2563  0024                     ??___wmul:	
  2564                           ; 1 bytes @ 0x4
  2565                           
  2566  0024                     ??___lwmod:	
  2567                           ; 1 bytes @ 0x4
  2568                           
  2569  0024                     nrf24l01SetRXMode@rxMode:	
  2570                           ; 1 bytes @ 0x4
  2571                           
  2572  0024                     ___ftpack@sign:	
  2573                           ; 1 bytes @ 0x4
  2574                           
  2575  0024                     ___wmul@product:	
  2576                           ; 1 bytes @ 0x4
  2577                           
  2578  0024                     strcpy@cp:	
  2579                           ; 2 bytes @ 0x4
  2580                           
  2581  0024                     strlen@cp:	
  2582                           ; 2 bytes @ 0x4
  2583                           
  2584  0024                     ___lldiv@dividend:	
  2585                           ; 2 bytes @ 0x4
  2586                           
  2587                           
  2588                           ; 4 bytes @ 0x4
  2589  0024                     	ds	1
  2590  0025                     ??___ftpack:	
  2591  0025                     nrf24l01SetRXPipe@pipe:	
  2592                           ; 1 bytes @ 0x5
  2593                           
  2594  0025                     ___lwmod@counter:	
  2595                           ; 1 bytes @ 0x5
  2596                           
  2597  0025                     memset@p1:	
  2598                           ; 1 bytes @ 0x5
  2599                           
  2600                           
  2601                           ; 1 bytes @ 0x5
  2602  0025                     	ds	1
  2603  0026                     ??_nrf24l01GetPipe:	
  2604  0026                     ??___ftge:	
  2605                           ; 1 bytes @ 0x6
  2606                           
  2607  0026                     nrf24l01SetTXPipe@pipe:	
  2608                           ; 1 bytes @ 0x6
  2609                           
  2610  0026                     nrf24l01SetRXPipe@enRXAddr:	
  2611                           ; 1 bytes @ 0x6
  2612                           
  2613  0026                     memset@p:	
  2614                           ; 1 bytes @ 0x6
  2615                           
  2616                           
  2617                           ; 1 bytes @ 0x6
  2618  0026                     	ds	1
  2619  0027                     ??_nrf24l01Service:	
  2620  0027                     ??_nrf24l01InitRegisters:	
  2621                           ; 1 bytes @ 0x7
  2622                           
  2623                           
  2624                           ; 1 bytes @ 0x7
  2625  0027                     	ds	1
  2626  0028                     ??___lldiv:	
  2627  0028                     ?___awtoft:	
  2628                           ; 1 bytes @ 0x8
  2629                           
  2630  0028                     ?___lbtoft:	
  2631                           ; 3 bytes @ 0x8
  2632                           
  2633  0028                     ?___lltoft:	
  2634                           ; 3 bytes @ 0x8
  2635                           
  2636  0028                     ?___lwtoft:	
  2637                           ; 3 bytes @ 0x8
  2638                           
  2639  0028                     nrf24l01GetPipe@pipe:	
  2640                           ; 3 bytes @ 0x8
  2641                           
  2642  0028                     ___awtoft@c:	
  2643                           ; 1 bytes @ 0x8
  2644                           
  2645  0028                     ___lwtoft@c:	
  2646                           ; 2 bytes @ 0x8
  2647                           
  2648  0028                     ___lltoft@c:	
  2649                           ; 2 bytes @ 0x8
  2650                           
  2651                           
  2652                           ; 4 bytes @ 0x8
  2653  0028                     	ds	1
  2654  0029                     nrf24l01GetPipe@name:	
  2655  0029                     nrf24l01InitRegisters@channel:	
  2656                           ; 1 bytes @ 0x9
  2657                           
  2658  0029                     ___lldiv@quotient:	
  2659                           ; 1 bytes @ 0x9
  2660                           
  2661                           
  2662                           ; 4 bytes @ 0x9
  2663  0029                     	ds	1
  2664  002A                     nrf24l01GetPipe@i:	
  2665  002A                     nrf24l01InitRegisters@setupAW:	
  2666                           ; 1 bytes @ 0xA
  2667                           
  2668                           
  2669                           ; 1 bytes @ 0xA
  2670  002A                     	ds	1
  2671  002B                     ??___awtoft:	
  2672  002B                     ??___lbtoft:	
  2673                           ; 1 bytes @ 0xB
  2674                           
  2675  002B                     ??___lwtoft:	
  2676                           ; 1 bytes @ 0xB
  2677                           
  2678  002B                     nrf24l01Service@width:	
  2679                           ; 1 bytes @ 0xB
  2680                           
  2681  002B                     nrf24l01InitRegisters@feature:	
  2682                           ; 1 bytes @ 0xB
  2683                           
  2684                           
  2685                           ; 1 bytes @ 0xB
  2686  002B                     	ds	1
  2687  002C                     ??___lltoft:	
  2688  002C                     nrf24l01Service@i:	
  2689                           ; 1 bytes @ 0xC
  2690                           
  2691  002C                     nrf24l01InitRegisters@rfSetup:	
  2692                           ; 1 bytes @ 0xC
  2693                           
  2694                           
  2695                           ; 1 bytes @ 0xC
  2696  002C                     	ds	1
  2697  002D                     ?_nrf24l01SendPacket:	
  2698  002D                     nrf24l01InitRegisters@enAA:	
  2699                           ; 2 bytes @ 0xD
  2700                           
  2701  002D                     ___lldiv@counter:	
  2702                           ; 1 bytes @ 0xD
  2703                           
  2704  002D                     ___awtoft@sign:	
  2705                           ; 1 bytes @ 0xD
  2706                           
  2707  002D                     ___lltoft@exp:	
  2708                           ; 1 bytes @ 0xD
  2709                           
  2710  002D                     nrf24l01SendPacket@txPacket:	
  2711                           ; 1 bytes @ 0xD
  2712                           
  2713                           
  2714                           ; 2 bytes @ 0xD
  2715  002D                     	ds	1
  2716  002E                     ?___ftadd:	
  2717  002E                     ?___llmod:	
  2718                           ; 3 bytes @ 0xE
  2719                           
  2720  002E                     nrf24l01InitRegisters@DynPD:	
  2721                           ; 4 bytes @ 0xE
  2722                           
  2723  002E                     ___ftadd@f1:	
  2724                           ; 1 bytes @ 0xE
  2725                           
  2726  002E                     ___llmod@divisor:	
  2727                           ; 3 bytes @ 0xE
  2728                           
  2729                           
  2730                           ; 4 bytes @ 0xE
  2731  002E                     	ds	1
  2732  002F                     ??_nrf24l01SendPacket:	
  2733  002F                     ___lbtoft@c:	
  2734                           ; 1 bytes @ 0xF
  2735                           
  2736  002F                     nrf24l01InitRegisters@i:	
  2737                           ; 1 bytes @ 0xF
  2738                           
  2739                           
  2740                           ; 2 bytes @ 0xF
  2741  002F                     	ds	2
  2742  0031                     ??_nrf24l01Init:	
  2743  0031                     ___ftadd@f2:	
  2744                           ; 1 bytes @ 0x11
  2745                           
  2746                           
  2747                           ; 3 bytes @ 0x11
  2748  0031                     	ds	1
  2749  0032                     ___llmod@dividend:	
  2750                           
  2751                           ; 4 bytes @ 0x12
  2752  0032                     	ds	2
  2753  0034                     ??___ftadd:	
  2754                           
  2755                           ; 1 bytes @ 0x14
  2756  0034                     	ds	2
  2757  0036                     ??___llmod:	
  2758                           
  2759                           ; 1 bytes @ 0x16
  2760  0036                     	ds	1
  2761  0037                     ___llmod@counter:	
  2762                           
  2763                           ; 1 bytes @ 0x17
  2764  0037                     	ds	1
  2765  0038                     ?_sprintf:	
  2766  0038                     ___ftadd@sign:	
  2767                           ; 2 bytes @ 0x18
  2768                           
  2769  0038                     sprintf@f:	
  2770                           ; 1 bytes @ 0x18
  2771                           
  2772                           
  2773                           ; 2 bytes @ 0x18
  2774  0038                     	ds	1
  2775  0039                     ___ftadd@exp2:	
  2776                           
  2777                           ; 1 bytes @ 0x19
  2778  0039                     	ds	1
  2779  003A                     ___ftadd@exp1:	
  2780                           
  2781                           ; 1 bytes @ 0x1A
  2782  003A                     	ds	1
  2783  003B                     ?___ftdiv:	
  2784  003B                     ?___ftsub:	
  2785                           ; 3 bytes @ 0x1B
  2786                           
  2787  003B                     ___ftdiv@f2:	
  2788                           ; 3 bytes @ 0x1B
  2789                           
  2790  003B                     ___ftsub@f2:	
  2791                           ; 3 bytes @ 0x1B
  2792                           
  2793                           
  2794                           ; 3 bytes @ 0x1B
  2795  003B                     	ds	3
  2796  003E                     ___ftdiv@f1:	
  2797  003E                     ___ftsub@f1:	
  2798                           ; 3 bytes @ 0x1E
  2799                           
  2800                           
  2801                           ; 3 bytes @ 0x1E
  2802  003E                     	ds	3
  2803  0041                     ??___ftdiv:	
  2804  0041                     ??___ftsub:	
  2805                           ; 1 bytes @ 0x21
  2806                           
  2807                           
  2808                           ; 1 bytes @ 0x21
  2809  0041                     	ds	1
  2810  0042                     ??_sprintf:	
  2811                           
  2812                           ; 1 bytes @ 0x22
  2813  0042                     	ds	3
  2814  0045                     ___ftdiv@cntr:	
  2815                           
  2816                           ; 1 bytes @ 0x25
  2817  0045                     	ds	1
  2818  0046                     ___ftdiv@f3:	
  2819                           
  2820                           ; 3 bytes @ 0x26
  2821  0046                     	ds	2
  2822  0048                     sprintf@flag:	
  2823                           
  2824                           ; 1 bytes @ 0x28
  2825  0048                     	ds	1
  2826  0049                     sprintf@ap:	
  2827  0049                     ___ftdiv@exp:	
  2828                           ; 1 bytes @ 0x29
  2829                           
  2830                           
  2831                           ; 1 bytes @ 0x29
  2832  0049                     	ds	1
  2833  004A                     ___ftdiv@sign:	
  2834  004A                     sprintf@val:	
  2835                           ; 1 bytes @ 0x2A
  2836                           
  2837                           
  2838                           ; 4 bytes @ 0x2A
  2839  004A                     	ds	1
  2840  004B                     ?_getADCValue:	
  2841                           
  2842                           ; 3 bytes @ 0x2B
  2843  004B                     	ds	3
  2844  004E                     ??_getADCValue:	
  2845  004E                     sprintf@sp:	
  2846                           ; 1 bytes @ 0x2E
  2847                           
  2848                           
  2849                           ; 1 bytes @ 0x2E
  2850  004E                     	ds	1
  2851  004F                     sprintf@width:	
  2852                           
  2853                           ; 2 bytes @ 0x2F
  2854  004F                     	ds	2
  2855  0051                     getADCValue@adcLoop:	
  2856  0051                     sprintf@prec:	
  2857                           ; 2 bytes @ 0x31
  2858                           
  2859                           
  2860                           ; 2 bytes @ 0x31
  2861  0051                     	ds	2
  2862  0053                     getADCValue@channel:	
  2863  0053                     sprintf@c:	
  2864                           ; 1 bytes @ 0x33
  2865                           
  2866                           
  2867                           ; 1 bytes @ 0x33
  2868  0053                     	ds	1
  2869  0054                     getADCValue@adcSum:	
  2870                           
  2871                           ; 3 bytes @ 0x34
  2872  0054                     	ds	3
  2873  0057                     ?___ftmul:	
  2874  0057                     ?___ftneg:	
  2875                           ; 3 bytes @ 0x37
  2876                           
  2877  0057                     ___ftmul@f1:	
  2878                           ; 3 bytes @ 0x37
  2879                           
  2880  0057                     ___ftneg@f1:	
  2881                           ; 3 bytes @ 0x37
  2882                           
  2883                           
  2884                           ; 3 bytes @ 0x37
  2885  0057                     	ds	3
  2886  005A                     ??___ftneg:	
  2887  005A                     ___ftmul@f2:	
  2888                           ; 1 bytes @ 0x3A
  2889                           
  2890                           
  2891                           ; 3 bytes @ 0x3A
  2892  005A                     	ds	3
  2893  005D                     ??___ftmul:	
  2894                           
  2895                           ; 1 bytes @ 0x3D
  2896  005D                     	ds	4
  2897  0061                     ___ftmul@exp:	
  2898                           
  2899                           ; 1 bytes @ 0x41
  2900  0061                     	ds	1
  2901  0062                     ___ftmul@f3_as_product:	
  2902                           
  2903                           ; 3 bytes @ 0x42
  2904  0062                     	ds	3
  2905  0065                     ___ftmul@cntr:	
  2906                           
  2907                           ; 1 bytes @ 0x45
  2908  0065                     	ds	1
  2909  0066                     ___ftmul@sign:	
  2910                           
  2911                           ; 1 bytes @ 0x46
  2912  0066                     	ds	1
  2913  0067                     ?___fttol:	
  2914  0067                     ___fttol@f1:	
  2915                           ; 4 bytes @ 0x47
  2916                           
  2917                           
  2918                           ; 3 bytes @ 0x47
  2919  0067                     	ds	4
  2920  006B                     ??___fttol:	
  2921                           
  2922                           ; 1 bytes @ 0x4B
  2923  006B                     	ds	4
  2924  006F                     ??_ftoa:	
  2925                           
  2926                           ; 1 bytes @ 0x4F
  2927  006F                     	ds	1
  2928  0070                     ??_strcat:	
  2929                           
  2930                           	psect	maintext
  2931  0AE3                     __pmaintext:	
  2932                           ; 1 bytes @ 0x50
  2933 ;;
  2934 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  2935 ;;
  2936 ;; *************** function _main *****************
  2937 ;; Defined at:
  2938 ;;		line 180 in file "main.c"
  2939 ;; Parameters:    Size  Location     Type
  2940 ;;		None
  2941 ;; Auto vars:     Size  Location     Type
  2942 ;;  packet         33   38[BANK1 ] struct .
  2943 ;;  pipe            1   37[BANK1 ] unsigned char 
  2944 ;; Return value:  Size  Location     Type
  2945 ;;                  1    wreg      void 
  2946 ;; Registers used:
  2947 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2948 ;; Tracked objects:
  2949 ;;		On entry : B1F/0
  2950 ;;		On exit  : 0/0
  2951 ;;		Unchanged: 0/0
  2952 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2953 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2954 ;;      Locals:         0       0      34       0       0       0       0       0       0       0       0       0       
      +0       0
  2955 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  2956 ;;      Totals:         0       0      35       0       0       0       0       0       0       0       0       0       
      +0       0
  2957 ;;Total ram usage:       35 bytes
  2958 ;; Hardware stack levels required when called:   15
  2959 ;; This function calls:
  2960 ;;		___lwtoft
  2961 ;;		_loop
  2962 ;;		_nrf24l01GetPipe
  2963 ;;		_nrf24l01Init
  2964 ;;		_nrf24l01SetTXPipe
  2965 ;;		_sendMessage
  2966 ;;		_strcpy
  2967 ;; This function is called by:
  2968 ;;		Startup code after reset
  2969 ;; This function uses a non-reentrant model
  2970 ;;
  2971                           
  2972                           
  2973                           ;psect for function _main
  2974  0AE3                     _main:	
  2975                           
  2976                           ;main.c: 183: ANSELA = 0x00;
  2977                           
  2978                           ;incstack = 0
  2979                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  2980  0AE3  0023               	movlb	3	; select bank3
  2981  0AE4  018C               	clrf	12	;volatile
  2982                           
  2983                           ;main.c: 184: ANSELC = 0x00;
  2984  0AE5  018E               	clrf	14	;volatile
  2985                           
  2986                           ;main.c: 186: ODCONA = 0x00;
  2987  0AE6  0025               	movlb	5	; select bank5
  2988  0AE7  018C               	clrf	12	;volatile
  2989                           
  2990                           ;main.c: 187: ODCONC = 0x00;
  2991  0AE8  018E               	clrf	14	;volatile
  2992                           
  2993                           ;main.c: 192: INLVLA = 0x00;
  2994  0AE9  0027               	movlb	7	; select bank7
  2995  0AEA  018C               	clrf	12	;volatile
  2996                           
  2997                           ;main.c: 193: INLVLC = 0x00;
  2998  0AEB  018E               	clrf	14	;volatile
  2999                           
  3000                           ;main.c: 195: WPUA = 0x00;
  3001  0AEC  0024               	movlb	4	; select bank4
  3002  0AED  018C               	clrf	12	;volatile
  3003                           
  3004                           ;main.c: 196: WPUC = 0x00;
  3005  0AEE  018E               	clrf	14	;volatile
  3006                           
  3007                           ;main.c: 198: TRISCbits.TRISC5 = 0;
  3008  0AEF  0021               	movlb	1	; select bank1
  3009  0AF0  128E               	bcf	14,5	;volatile
  3010                           
  3011                           ;main.c: 199: TRISCbits.TRISC4 = 0;
  3012  0AF1  120E               	bcf	14,4	;volatile
  3013                           
  3014                           ;main.c: 201: PORTCbits.RC4 = 0;
  3015  0AF2  0020               	movlb	0	; select bank0
  3016  0AF3  120E               	bcf	14,4	;volatile
  3017                           
  3018                           ;main.c: 208: INTCONbits.PEIE = 0;
  3019  0AF4  130B               	bcf	11,6	;volatile
  3020                           
  3021                           ;main.c: 209: INTCONbits.GIE = 0;
  3022  0AF5  138B               	bcf	11,7	;volatile
  3023                           
  3024                           ;main.c: 211: OSCCON1bits.NOSC = 0b000;
  3025  0AF6  308F               	movlw	-113
  3026  0AF7  0032               	movlb	18	; select bank18
  3027  0AF8  0599               	andwf	25,f	;volatile
  3028                           
  3029                           ;main.c: 212: OSCCON1bits.NDIV = 0b000;
  3030  0AF9  30F0               	movlw	-16
  3031  0AFA  0599               	andwf	25,f	;volatile
  3032                           
  3033                           ;main.c: 214: _delay((unsigned long)((10)*(32000000/4000.0)));
  3034  0AFB  3068               	movlw	104
  3035  0AFC  0021               	movlb	1	; select bank1
  3036  0AFD  00C4               	movwf	??_main^(0+128)
  3037  0AFE  30E4               	movlw	228
  3038  0AFF                     u3557:	
  3039  0AFF  0B89               	decfsz	9,f
  3040  0B00  2AFF               	goto	u3557
  3041  0B01  0BC4               	decfsz	??_main^(0+128),f
  3042  0B02  2AFF               	goto	u3557
  3043  0B03  0000               	nop
  3044                           
  3045                           ;main.c: 218: strcpy(romData->name, "UWT");
  3046  0B04  0021               	movlb	1	; select bank1
  3047  0B05  086D               	movf	_romData^(0+128),w
  3048  0B06  3E01               	addlw	1
  3049  0B07  0020               	movlb	0	; select bank0
  3050  0B08  00A0               	movwf	strcpy@to
  3051  0B09  3001               	movlw	1
  3052  0B0A  00A1               	movwf	strcpy@to+1
  3053  0B0B  3079               	movlw	low (STR_12| (0+32768))
  3054  0B0C  00A2               	movwf	strcpy@from
  3055  0B0D  3098               	movlw	high (STR_12| (0+32768))
  3056  0B0E  00A3               	movwf	strcpy@from+1
  3057  0B0F  3195  25D1  318A   	fcall	_strcpy
  3058                           
  3059                           ;main.c: 220: nrf24l01Init();
  3060  0B12  3188  20CF  318A   	fcall	_nrf24l01Init
  3061                           
  3062                           ;main.c: 222: unsigned char pipe = nrf24l01GetPipe(romData->name);
  3063  0B15  0021               	movlb	1	; select bank1
  3064  0B16  086D               	movf	_romData^(0+128),w
  3065  0B17  3E01               	addlw	1
  3066  0B18  3197  27C8  318A   	fcall	_nrf24l01GetPipe
  3067  0B1B  0021               	movlb	1	; select bank1
  3068  0B1C  00C4               	movwf	??_main^(0+128)
  3069  0B1D  0844               	movf	??_main^(0+128),w
  3070  0B1E  00C5               	movwf	main@pipe^(0+128)
  3071                           
  3072                           ;main.c: 223: nrf24l01SetTXPipe(pipe);
  3073  0B1F  0845               	movf	main@pipe^(0+128),w
  3074  0B20  3189  2112  318A   	fcall	_nrf24l01SetTXPipe
  3075                           
  3076                           ;main.c: 228: ADCON0bits.ADON = 0;
  3077  0B23  0021               	movlb	1	; select bank1
  3078  0B24  101D               	bcf	29,0	;volatile
  3079                           
  3080                           ;main.c: 231: PORTAbits.RA4 = 0;
  3081  0B25  0020               	movlb	0	; select bank0
  3082  0B26  120C               	bcf	12,4	;volatile
  3083                           
  3084                           ;main.c: 232: TRISAbits.TRISA4 = 1;
  3085  0B27  0021               	movlb	1	; select bank1
  3086  0B28  160C               	bsf	12,4	;volatile
  3087                           
  3088                           ;main.c: 233: WPUAbits.WPUA4 = 0;
  3089  0B29  0024               	movlb	4	; select bank4
  3090  0B2A  120C               	bcf	12,4	;volatile
  3091                           
  3092                           ;main.c: 234: ODCONAbits.ODCA4 = 1;
  3093  0B2B  0025               	movlb	5	; select bank5
  3094  0B2C  160C               	bsf	12,4	;volatile
  3095                           
  3096                           ;main.c: 235: ANSELAbits.ANSA4 = 1;
  3097  0B2D  0023               	movlb	3	; select bank3
  3098  0B2E  160C               	bsf	12,4	;volatile
  3099                           
  3100                           ;main.c: 238: ANSELCbits.ANSC3 = 1;
  3101  0B2F  158E               	bsf	14,3	;volatile
  3102                           
  3103                           ;main.c: 239: TRISCbits.TRISC3 = 1;
  3104  0B30  0021               	movlb	1	; select bank1
  3105  0B31  158E               	bsf	14,3	;volatile
  3106                           
  3107                           ;main.c: 242: FVRCONbits.TSEN = 1;
  3108  0B32  0022               	movlb	2	; select bank2
  3109  0B33  1697               	bsf	23,5	;volatile
  3110                           
  3111                           ;main.c: 243: FVRCONbits.TSRNG = 1;
  3112  0B34  1617               	bsf	23,4	;volatile
  3113                           
  3114                           ;main.c: 246: FVRCONbits.FVREN = 0;
  3115  0B35  1397               	bcf	23,7	;volatile
  3116                           
  3117                           ;main.c: 247: FVRCONbits.ADFVR = 0b10;
  3118  0B36  0817               	movf	23,w	;volatile
  3119  0B37  39FC               	andlw	-4
  3120  0B38  3802               	iorlw	2
  3121  0B39  0097               	movwf	23	;volatile
  3122                           
  3123                           ;main.c: 249: ADCON1bits.ADCS = 0b111;
  3124  0B3A  3070               	movlw	112
  3125  0B3B  0021               	movlb	1	; select bank1
  3126  0B3C  049E               	iorwf	30,f	;volatile
  3127                           
  3128                           ;main.c: 250: ADCON1bits.ADFM = 1;
  3129  0B3D  179E               	bsf	30,7	;volatile
  3130                           
  3131                           ;main.c: 251: ADCON1bits.ADPREF = 0b11;
  3132  0B3E  3003               	movlw	3
  3133  0B3F  049E               	iorwf	30,f	;volatile
  3134                           
  3135                           ;main.c: 252: ADCON1bits.ADNREF = 0b00;
  3136  0B40  111E               	bcf	30,2	;volatile
  3137                           
  3138                           ;main.c: 255: ADCON0bits.CHS = 3;
  3139  0B41  081D               	movf	29,w	;volatile
  3140  0B42  3903               	andlw	-253
  3141  0B43  380C               	iorlw	12
  3142  0B44  009D               	movwf	29	;volatile
  3143                           
  3144                           ;main.c: 260: TRISAbits.TRISA2 = 1;
  3145  0B45  150C               	bsf	12,2	;volatile
  3146                           
  3147                           ;main.c: 261: PIE0bits.INTE = 1;
  3148  0B46  1410               	bsf	16,0	;volatile
  3149                           
  3150                           ;main.c: 262: INTCONbits.INTEDG = 0;
  3151  0B47  100B               	bcf	11,0	;volatile
  3152                           
  3153                           ;main.c: 265: TRISAbits.TRISA5 = 0;
  3154  0B48  128C               	bcf	12,5	;volatile
  3155                           
  3156                           ;main.c: 266: PORTAbits.RA5 = 0;
  3157  0B49  0020               	movlb	0	; select bank0
  3158  0B4A  128C               	bcf	12,5	;volatile
  3159                           
  3160                           ;main.c: 269: INTCONbits.PEIE = 1;
  3161  0B4B  170B               	bsf	11,6	;volatile
  3162                           
  3163                           ;main.c: 270: INTCONbits.GIE = 1;
  3164  0B4C  178B               	bsf	11,7	;volatile
  3165                           
  3166                           ;main.c: 272: nrf24l01Packet_t packet;;main.c: 274: sendMessage(&packet, "BOOT", romData
      +                          ->bootMode);
  3167  0B4D  30C6               	movlw	low main@packet
  3168  0B4E  0021               	movlb	1	; select bank1
  3169  0B4F  00B9               	movwf	sendMessage@packet^(0+128)
  3170  0B50  3000               	movlw	high main@packet
  3171  0B51  00BA               	movwf	(sendMessage@packet+1)^(0+128)
  3172  0B52  3074               	movlw	low (STR_13| (0+32768))
  3173  0B53  00BB               	movwf	sendMessage@topic^(0+128)
  3174  0B54  3098               	movlw	high (STR_13| (0+32768))
  3175  0B55  00BC               	movwf	(sendMessage@topic^(0+128)+1)
  3176  0B56  086D               	movf	_romData^(0+128),w
  3177  0B57  3E11               	addlw	17
  3178  0B58  0086               	movwf	6
  3179  0B59  3001               	movlw	1	; select bank2/3
  3180  0B5A  0087               	movwf	7
  3181  0B5B  3F40               	moviw [0]fsr1
  3182  0B5C  0020               	movlb	0	; select bank0
  3183  0B5D  00A8               	movwf	___lwtoft@c
  3184  0B5E  3F41               	moviw [1]fsr1
  3185  0B5F  00A9               	movwf	___lwtoft@c+1
  3186  0B60  3188  2000  318A   	fcall	___lwtoft
  3187  0B63  0020               	movlb	0	; select bank0
  3188  0B64  0828               	movf	?___lwtoft,w
  3189  0B65  0021               	movlb	1	; select bank1
  3190  0B66  00BD               	movwf	sendMessage@value^(0+128)
  3191  0B67  0020               	movlb	0	; select bank0
  3192  0B68  0829               	movf	?___lwtoft+1,w
  3193  0B69  0021               	movlb	1	; select bank1
  3194  0B6A  00BE               	movwf	(sendMessage@value+1)^(0+128)
  3195  0B6B  0020               	movlb	0	; select bank0
  3196  0B6C  082A               	movf	?___lwtoft+2,w
  3197  0B6D  0021               	movlb	1	; select bank1
  3198  0B6E  00BF               	movwf	(sendMessage@value+2)^(0+128)
  3199  0B6F  318A  226D  318A   	fcall	_sendMessage
  3200  0B72                     l3418:	
  3201                           ;main.c: 276: while(1){
  3202                           
  3203                           
  3204                           ;main.c: 277: loop();
  3205  0B72  3180  202F  318A   	fcall	_loop
  3206  0B75  2B72               	goto	l3418
  3207  0B76                     __end_of_main:	
  3208                           ;main.c: 278: };main.c: 280: return;
  3209                           
  3210                           
  3211                           	psect	text1
  3212  08CF                     __ptext1:	
  3213 ;; *************** function _nrf24l01Init *****************
  3214 ;; Defined at:
  3215 ;;		line 479 in file "nrf24l01.c"
  3216 ;; Parameters:    Size  Location     Type
  3217 ;;		None
  3218 ;; Auto vars:     Size  Location     Type
  3219 ;;		None
  3220 ;; Return value:  Size  Location     Type
  3221 ;;                  1    wreg      void 
  3222 ;; Registers used:
  3223 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3224 ;; Tracked objects:
  3225 ;;		On entry : 0/0
  3226 ;;		On exit  : 0/0
  3227 ;;		Unchanged: 0/0
  3228 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3229 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3230 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3231 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3232 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3233 ;;Total ram usage:        2 bytes
  3234 ;; Hardware stack levels used:    1
  3235 ;; Hardware stack levels required when called:   12
  3236 ;; This function calls:
  3237 ;;		_nrf24l01CEHigh
  3238 ;;		_nrf24l01CELow
  3239 ;;		_nrf24l01InitRegisters
  3240 ;;		_nrf24l01InterfaceInit
  3241 ;; This function is called by:
  3242 ;;		_main
  3243 ;; This function uses a non-reentrant model
  3244 ;;
  3245                           
  3246                           
  3247                           ;psect for function _nrf24l01Init
  3248  08CF                     _nrf24l01Init:	
  3249                           
  3250                           ;nrf24l01.c: 482: nrf24l01InterfaceInit();
  3251                           
  3252                           ;incstack = 0
  3253                           ; Regs used in _nrf24l01Init: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3254  08CF  3196  2624  3188   	fcall	_nrf24l01InterfaceInit
  3255                           
  3256                           ;nrf24l01.c: 487: nrf24l01CELow();
  3257  08D2  3195  250F  3188   	fcall	_nrf24l01CELow
  3258                           
  3259                           ;nrf24l01.c: 489: _delay((unsigned long)((50000)*(32000000/4000000.0)));
  3260  08D5  3003               	movlw	3
  3261  08D6  0020               	movlb	0	; select bank0
  3262  08D7  00B2               	movwf	??_nrf24l01Init+1
  3263  08D8  3008               	movlw	8
  3264  08D9  00B1               	movwf	??_nrf24l01Init
  3265  08DA  3077               	movlw	119
  3266  08DB                     u3567:	
  3267  08DB  0B89               	decfsz	9,f
  3268  08DC  28DB               	goto	u3567
  3269  08DD  0BB1               	decfsz	??_nrf24l01Init,f
  3270  08DE  28DB               	goto	u3567
  3271  08DF  0BB2               	decfsz	??_nrf24l01Init+1,f
  3272  08E0  28DB               	goto	u3567
  3273                           
  3274                           ;nrf24l01.c: 491: nrf24l01InitRegisters();
  3275  08E1  3185  256E  3188   	fcall	_nrf24l01InitRegisters
  3276                           
  3277                           ;nrf24l01.c: 493: _delay((unsigned long)((50000)*(32000000/4000000.0)));
  3278  08E4  3003               	movlw	3
  3279  08E5  0020               	movlb	0	; select bank0
  3280  08E6  00B2               	movwf	??_nrf24l01Init+1
  3281  08E7  3008               	movlw	8
  3282  08E8  00B1               	movwf	??_nrf24l01Init
  3283  08E9  3077               	movlw	119
  3284  08EA                     u3577:	
  3285  08EA  0B89               	decfsz	9,f
  3286  08EB  28EA               	goto	u3577
  3287  08EC  0BB1               	decfsz	??_nrf24l01Init,f
  3288  08ED  28EA               	goto	u3577
  3289  08EE  0BB2               	decfsz	??_nrf24l01Init+1,f
  3290  08EF  28EA               	goto	u3577
  3291                           
  3292                           ;nrf24l01.c: 495: nrf24l01CEHigh();
  3293  08F0  3195  250C         	fcall	_nrf24l01CEHigh
  3294                           
  3295                           ;nrf24l01.c: 497: status.TX = statuses.TX.Idle;
  3296  08F2  3034               	movlw	low (_statuses| (0+32768))
  3297  08F3  0084               	movwf	4
  3298  08F4  3098               	movlw	high (_statuses| (0+32768))
  3299  08F5  0085               	movwf	5
  3300  08F6  0800               	movf	0,w	;code access
  3301  08F7  0020               	movlb	0	; select bank0
  3302  08F8  00B1               	movwf	??_nrf24l01Init
  3303  08F9  0021               	movlb	1	; select bank1
  3304  08FA  0867               	movf	_status^(0+128),w	;volatile
  3305  08FB  0020               	movlb	0	; select bank0
  3306  08FC  0631               	xorwf	??_nrf24l01Init,w
  3307  08FD  39F0               	andlw	-16
  3308  08FE  0631               	xorwf	??_nrf24l01Init,w
  3309  08FF  0021               	movlb	1	; select bank1
  3310  0900  00E7               	movwf	_status^(0+128)	;volatile
  3311                           
  3312                           ;nrf24l01.c: 498: status.RX = statuses.RX.Idle;
  3313  0901  3039               	movlw	low ((_statuses+5)| (0+32768))
  3314  0902  0084               	movwf	4
  3315  0903  3098               	movlw	high ((_statuses+5)| (0+32768))
  3316  0904  0085               	movwf	5
  3317  0905  0800               	movf	0,w	;code access
  3318  0906  0020               	movlb	0	; select bank0
  3319  0907  00B1               	movwf	??_nrf24l01Init
  3320  0908  0EB1               	swapf	??_nrf24l01Init,f
  3321  0909  0021               	movlb	1	; select bank1
  3322  090A  0867               	movf	_status^(0+128),w	;volatile
  3323  090B  0020               	movlb	0	; select bank0
  3324  090C  0631               	xorwf	??_nrf24l01Init,w
  3325  090D  390F               	andlw	-241
  3326  090E  0631               	xorwf	??_nrf24l01Init,w
  3327  090F  0021               	movlb	1	; select bank1
  3328  0910  00E7               	movwf	_status^(0+128)	;volatile
  3329  0911  0008               	return
  3330  0912                     __end_of_nrf24l01Init:	
  3331                           
  3332                           	psect	text2
  3333  1624                     __ptext2:	
  3334 ;; *************** function _nrf24l01InterfaceInit *****************
  3335 ;; Defined at:
  3336 ;;		line 27 in file "interface.c"
  3337 ;; Parameters:    Size  Location     Type
  3338 ;;		None
  3339 ;; Auto vars:     Size  Location     Type
  3340 ;;		None
  3341 ;; Return value:  Size  Location     Type
  3342 ;;                  1    wreg      void 
  3343 ;; Registers used:
  3344 ;;		wreg, status,2, status,0
  3345 ;; Tracked objects:
  3346 ;;		On entry : 0/0
  3347 ;;		On exit  : 0/0
  3348 ;;		Unchanged: 0/0
  3349 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3350 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3351 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3352 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3353 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3354 ;;Total ram usage:        0 bytes
  3355 ;; Hardware stack levels used:    1
  3356 ;; Hardware stack levels required when called:    7
  3357 ;; This function calls:
  3358 ;;		Nothing
  3359 ;; This function is called by:
  3360 ;;		_nrf24l01Init
  3361 ;; This function uses a non-reentrant model
  3362 ;;
  3363                           
  3364                           
  3365                           ;psect for function _nrf24l01InterfaceInit
  3366  1624                     _nrf24l01InterfaceInit:	
  3367                           
  3368                           ;interface.c: 29: TRISAbits.TRISA0 = 0;
  3369                           
  3370                           ;incstack = 0
  3371                           ; Regs used in _nrf24l01InterfaceInit: [wreg+status,2+status,0]
  3372  1624  0021               	movlb	1	; select bank1
  3373  1625  100C               	bcf	12,0	;volatile
  3374                           
  3375                           ;interface.c: 30: TRISAbits.TRISA1 = 0;
  3376  1626  108C               	bcf	12,1	;volatile
  3377                           
  3378                           ;interface.c: 32: TRISCbits.TRISC1 = 1;
  3379  1627  148E               	bsf	14,1	;volatile
  3380                           
  3381                           ;interface.c: 33: TRISCbits.TRISC2 = 0;
  3382  1628  110E               	bcf	14,2	;volatile
  3383                           
  3384                           ;interface.c: 34: TRISCbits.TRISC0 = 0;
  3385  1629  100E               	bcf	14,0	;volatile
  3386                           
  3387                           ;interface.c: 36: SSP1CON1bits.SSPEN = 0;
  3388  162A  0024               	movlb	4	; select bank4
  3389  162B  1295               	bcf	21,5	;volatile
  3390                           
  3391                           ;interface.c: 38: RC1PPSbits.RC1PPS = 0b10001;
  3392  162C  003D               	movlb	29	; select bank29
  3393  162D  0821               	movf	33,w	;volatile
  3394  162E  39E0               	andlw	-32
  3395  162F  3811               	iorlw	17
  3396  1630  00A1               	movwf	33	;volatile
  3397                           
  3398                           ;interface.c: 39: RC2PPSbits.RC2PPS = 0b11001;
  3399  1631  0822               	movf	34,w	;volatile
  3400  1632  39E0               	andlw	-32
  3401  1633  3819               	iorlw	25
  3402  1634  00A2               	movwf	34	;volatile
  3403                           
  3404                           ;interface.c: 40: RC0PPSbits.RC0PPS = 0b11000;
  3405  1635  0820               	movf	32,w	;volatile
  3406  1636  39E0               	andlw	-32
  3407  1637  3818               	iorlw	24
  3408  1638  00A0               	movwf	32	;volatile
  3409                           
  3410                           ;interface.c: 42: SSP1CON1bits.CKP = 0;
  3411  1639  0024               	movlb	4	; select bank4
  3412  163A  1215               	bcf	21,4	;volatile
  3413                           
  3414                           ;interface.c: 43: SSP1STATbits.CKE = 1;
  3415  163B  1714               	bsf	20,6	;volatile
  3416                           
  3417                           ;interface.c: 44: SSP1CON1bits.SSPM = 0b0000;
  3418  163C  30F0               	movlw	-16
  3419  163D  0595               	andwf	21,f	;volatile
  3420                           
  3421                           ;interface.c: 46: SSP1CON1bits.SSPEN = 1;
  3422  163E  1695               	bsf	21,5	;volatile
  3423  163F  0008               	return
  3424  1640                     __end_of_nrf24l01InterfaceInit:	
  3425                           
  3426                           	psect	text3
  3427  056E                     __ptext3:	
  3428 ;; *************** function _nrf24l01InitRegisters *****************
  3429 ;; Defined at:
  3430 ;;		line 379 in file "nrf24l01.c"
  3431 ;; Parameters:    Size  Location     Type
  3432 ;;		None
  3433 ;; Auto vars:     Size  Location     Type
  3434 ;;  i               2   15[BANK0 ] unsigned int 
  3435 ;;  DynPD           1   14[BANK0 ] struct .
  3436 ;;  enAA            1   13[BANK0 ] struct .
  3437 ;;  rfSetup         1   12[BANK0 ] struct .
  3438 ;;  feature         1   11[BANK0 ] struct .
  3439 ;;  setupAW         1   10[BANK0 ] struct .
  3440 ;;  channel         1    9[BANK0 ] struct .
  3441 ;; Return value:  Size  Location     Type
  3442 ;;                  1    wreg      void 
  3443 ;; Registers used:
  3444 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3445 ;; Tracked objects:
  3446 ;;		On entry : 0/0
  3447 ;;		On exit  : 0/0
  3448 ;;		Unchanged: 0/0
  3449 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3450 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3451 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3452 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3453 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3454 ;;Total ram usage:       10 bytes
  3455 ;; Hardware stack levels used:    1
  3456 ;; Hardware stack levels required when called:   11
  3457 ;; This function calls:
  3458 ;;		___bmul
  3459 ;;		_nrf24l01SPIEnd
  3460 ;;		_nrf24l01SPISend
  3461 ;;		_nrf24l01SPIStart
  3462 ;;		_nrf24l01Send
  3463 ;;		_nrf24l01SetRXPipe
  3464 ;;		_nrf24l01SetTXPipe
  3465 ;; This function is called by:
  3466 ;;		_nrf24l01Init
  3467 ;; This function uses a non-reentrant model
  3468 ;;
  3469                           
  3470                           
  3471                           ;psect for function _nrf24l01InitRegisters
  3472  056E                     _nrf24l01InitRegisters:	
  3473                           
  3474                           ;nrf24l01.c: 381: status.configRegister.byte = nrf24l01Send((unsigned) 0b00000000 | (uns
      +                          igned) 0x00, 0);
  3475                           
  3476                           ;incstack = 0
  3477                           ; Regs used in _nrf24l01InitRegisters: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3478  056E  0020               	movlb	0	; select bank0
  3479  056F  01A0               	clrf	nrf24l01Send@data
  3480  0570  3000               	movlw	0
  3481  0571  3196  269B  3185   	fcall	_nrf24l01Send
  3482  0574  0020               	movlb	0	; select bank0
  3483  0575  00A7               	movwf	??_nrf24l01InitRegisters
  3484  0576  0827               	movf	??_nrf24l01InitRegisters,w
  3485  0577  0021               	movlb	1	; select bank1
  3486  0578  00E9               	movwf	(_status^(0+128)+2)	;volatile
  3487                           
  3488                           ;nrf24l01.c: 383: status.configRegister.PWR_UP = 0;
  3489  0579  10E9               	bcf	(_status^(0+128)+2),1	;volatile
  3490                           
  3491                           ;nrf24l01.c: 384: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x00, status.configReg
      +                          ister.byte);
  3492  057A  0869               	movf	(_status^(0+128)+2),w	;volatile
  3493  057B  0020               	movlb	0	; select bank0
  3494  057C  00A7               	movwf	??_nrf24l01InitRegisters
  3495  057D  0827               	movf	??_nrf24l01InitRegisters,w
  3496  057E  00A0               	movwf	nrf24l01Send@data
  3497  057F  3020               	movlw	32
  3498  0580  3196  269B  3185   	fcall	_nrf24l01Send
  3499                           
  3500                           ;nrf24l01.c: 386: n_SETUP_AW_t setupAW;;nrf24l01.c: 387: setupAW.byte = 0x00;
  3501  0583  0020               	movlb	0	; select bank0
  3502  0584  01AA               	clrf	nrf24l01InitRegisters@setupAW
  3503                           
  3504                           ;nrf24l01.c: 388: setupAW.AW = 0b11;
  3505  0585  3003               	movlw	3
  3506  0586  04AA               	iorwf	nrf24l01InitRegisters@setupAW,f
  3507                           
  3508                           ;nrf24l01.c: 389: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x03, setupAW.byte);
  3509  0587  082A               	movf	nrf24l01InitRegisters@setupAW,w
  3510  0588  00A7               	movwf	??_nrf24l01InitRegisters
  3511  0589  0827               	movf	??_nrf24l01InitRegisters,w
  3512  058A  00A0               	movwf	nrf24l01Send@data
  3513  058B  3023               	movlw	35
  3514  058C  3196  269B  3185   	fcall	_nrf24l01Send
  3515                           
  3516                           ;nrf24l01.c: 392: n_RF_CH_t channel;;nrf24l01.c: 393: channel.RF_CH = 2;
  3517  058F  0020               	movlb	0	; select bank0
  3518  0590  0829               	movf	nrf24l01InitRegisters@channel,w
  3519  0591  3980               	andlw	-128
  3520  0592  3802               	iorlw	2
  3521  0593  00A9               	movwf	nrf24l01InitRegisters@channel
  3522                           
  3523                           ;nrf24l01.c: 394: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x05, channel.byte);
  3524  0594  0829               	movf	nrf24l01InitRegisters@channel,w
  3525  0595  00A7               	movwf	??_nrf24l01InitRegisters
  3526  0596  0827               	movf	??_nrf24l01InitRegisters,w
  3527  0597  00A0               	movwf	nrf24l01Send@data
  3528  0598  3025               	movlw	37
  3529  0599  3196  269B  3185   	fcall	_nrf24l01Send
  3530                           
  3531                           ;nrf24l01.c: 397: n_RF_SETUP_t rfSetup;;nrf24l01.c: 398: rfSetup.byte = 0x00;
  3532  059C  0020               	movlb	0	; select bank0
  3533  059D  01AC               	clrf	nrf24l01InitRegisters@rfSetup
  3534                           
  3535                           ;nrf24l01.c: 399: rfSetup.RF_DR_LOW = 0;
  3536  059E  12AC               	bcf	nrf24l01InitRegisters@rfSetup,5
  3537                           
  3538                           ;nrf24l01.c: 400: rfSetup.RF_DR_HIGH = 1;
  3539  059F  15AC               	bsf	nrf24l01InitRegisters@rfSetup,3
  3540                           
  3541                           ;nrf24l01.c: 401: rfSetup.RF_PWR = 3;
  3542  05A0  3006               	movlw	6
  3543  05A1  04AC               	iorwf	nrf24l01InitRegisters@rfSetup,f
  3544                           
  3545                           ;nrf24l01.c: 402: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x06, rfSetup.byte);
  3546  05A2  082C               	movf	nrf24l01InitRegisters@rfSetup,w
  3547  05A3  00A7               	movwf	??_nrf24l01InitRegisters
  3548  05A4  0827               	movf	??_nrf24l01InitRegisters,w
  3549  05A5  00A0               	movwf	nrf24l01Send@data
  3550  05A6  3026               	movlw	38
  3551  05A7  3196  269B  3185   	fcall	_nrf24l01Send
  3552                           
  3553                           ;nrf24l01.c: 405: nrf24l01SetRXPipe(0xFF);
  3554  05AA  30FF               	movlw	255
  3555  05AB  3196  26BB  3185   	fcall	_nrf24l01SetRXPipe
  3556                           
  3557                           ;nrf24l01.c: 408: n_EN_AA_t enAA;;nrf24l01.c: 409: enAA.byte = nrf24l01Send((unsigned) 0
      +                          b00000000 | (unsigned) 0x01, 0);
  3558  05AE  0020               	movlb	0	; select bank0
  3559  05AF  01A0               	clrf	nrf24l01Send@data
  3560  05B0  3001               	movlw	1
  3561  05B1  3196  269B  3185   	fcall	_nrf24l01Send
  3562  05B4  0020               	movlb	0	; select bank0
  3563  05B5  00A7               	movwf	??_nrf24l01InitRegisters
  3564  05B6  0827               	movf	??_nrf24l01InitRegisters,w
  3565  05B7  00AD               	movwf	nrf24l01InitRegisters@enAA
  3566                           
  3567                           ;nrf24l01.c: 410: enAA.ENAA_P0 = 0;
  3568  05B8  102D               	bcf	nrf24l01InitRegisters@enAA,0
  3569                           
  3570                           ;nrf24l01.c: 411: enAA.ENAA_P1 = 0;
  3571  05B9  10AD               	bcf	nrf24l01InitRegisters@enAA,1
  3572                           
  3573                           ;nrf24l01.c: 412: enAA.ENAA_P2 = 0;
  3574  05BA  112D               	bcf	nrf24l01InitRegisters@enAA,2
  3575                           
  3576                           ;nrf24l01.c: 413: enAA.ENAA_P3 = 0;
  3577  05BB  11AD               	bcf	nrf24l01InitRegisters@enAA,3
  3578                           
  3579                           ;nrf24l01.c: 414: enAA.ENAA_P4 = 0;
  3580  05BC  122D               	bcf	nrf24l01InitRegisters@enAA,4
  3581                           
  3582                           ;nrf24l01.c: 415: enAA.ENAA_P5 = 0;
  3583  05BD  12AD               	bcf	nrf24l01InitRegisters@enAA,5
  3584                           
  3585                           ;nrf24l01.c: 416: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x01, enAA.byte);
  3586  05BE  082D               	movf	nrf24l01InitRegisters@enAA,w
  3587  05BF  00A7               	movwf	??_nrf24l01InitRegisters
  3588  05C0  0827               	movf	??_nrf24l01InitRegisters,w
  3589  05C1  00A0               	movwf	nrf24l01Send@data
  3590  05C2  3021               	movlw	33
  3591  05C3  3196  269B  3185   	fcall	_nrf24l01Send
  3592                           
  3593                           ;nrf24l01.c: 420: n_FEATURE_t feature;;nrf24l01.c: 421: feature.byte = nrf24l01Send((uns
      +                          igned) 0b00000000 | (unsigned) 0x1D, 0);
  3594  05C6  0020               	movlb	0	; select bank0
  3595  05C7  01A0               	clrf	nrf24l01Send@data
  3596  05C8  301D               	movlw	29
  3597  05C9  3196  269B  3185   	fcall	_nrf24l01Send
  3598  05CC  0020               	movlb	0	; select bank0
  3599  05CD  00A7               	movwf	??_nrf24l01InitRegisters
  3600  05CE  0827               	movf	??_nrf24l01InitRegisters,w
  3601  05CF  00AB               	movwf	nrf24l01InitRegisters@feature
  3602                           
  3603                           ;nrf24l01.c: 422: feature.EN_DPL = 1;
  3604  05D0  152B               	bsf	nrf24l01InitRegisters@feature,2
  3605                           
  3606                           ;nrf24l01.c: 423: feature.EN_DYN_ACK = 1;
  3607  05D1  142B               	bsf	nrf24l01InitRegisters@feature,0
  3608                           
  3609                           ;nrf24l01.c: 424: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x1D, feature.byte);
  3610  05D2  082B               	movf	nrf24l01InitRegisters@feature,w
  3611  05D3  00A7               	movwf	??_nrf24l01InitRegisters
  3612  05D4  0827               	movf	??_nrf24l01InitRegisters,w
  3613  05D5  00A0               	movwf	nrf24l01Send@data
  3614  05D6  303D               	movlw	61
  3615  05D7  3196  269B  3185   	fcall	_nrf24l01Send
  3616                           
  3617                           ;nrf24l01.c: 426: n_DYNPD_t DynPD;;nrf24l01.c: 427: DynPD.byte = nrf24l01Send((unsigned)
      +                           0b00000000 | (unsigned) 0x1C, 0);
  3618  05DA  0020               	movlb	0	; select bank0
  3619  05DB  01A0               	clrf	nrf24l01Send@data
  3620  05DC  301C               	movlw	28
  3621  05DD  3196  269B  3185   	fcall	_nrf24l01Send
  3622  05E0  0020               	movlb	0	; select bank0
  3623  05E1  00A7               	movwf	??_nrf24l01InitRegisters
  3624  05E2  0827               	movf	??_nrf24l01InitRegisters,w
  3625  05E3  00AE               	movwf	nrf24l01InitRegisters@DynPD
  3626                           
  3627                           ;nrf24l01.c: 428: DynPD.DPL_P0 = 1;
  3628  05E4  142E               	bsf	nrf24l01InitRegisters@DynPD,0
  3629                           
  3630                           ;nrf24l01.c: 429: DynPD.DPL_P1 = 1;
  3631  05E5  14AE               	bsf	nrf24l01InitRegisters@DynPD,1
  3632                           
  3633                           ;nrf24l01.c: 430: DynPD.DPL_P2 = 1;
  3634  05E6  152E               	bsf	nrf24l01InitRegisters@DynPD,2
  3635                           
  3636                           ;nrf24l01.c: 431: DynPD.DPL_P3 = 1;
  3637  05E7  15AE               	bsf	nrf24l01InitRegisters@DynPD,3
  3638                           
  3639                           ;nrf24l01.c: 432: DynPD.DPL_P4 = 1;
  3640  05E8  162E               	bsf	nrf24l01InitRegisters@DynPD,4
  3641                           
  3642                           ;nrf24l01.c: 433: DynPD.DPL_P5 = 1;
  3643  05E9  16AE               	bsf	nrf24l01InitRegisters@DynPD,5
  3644                           
  3645                           ;nrf24l01.c: 434: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x1C, DynPD.byte);
  3646  05EA  082E               	movf	nrf24l01InitRegisters@DynPD,w
  3647  05EB  00A7               	movwf	??_nrf24l01InitRegisters
  3648  05EC  0827               	movf	??_nrf24l01InitRegisters,w
  3649  05ED  00A0               	movwf	nrf24l01Send@data
  3650  05EE  303C               	movlw	60
  3651  05EF  3196  269B  3185   	fcall	_nrf24l01Send
  3652                           
  3653                           ;nrf24l01.c: 437: unsigned int i;;nrf24l01.c: 438: for (i = 0; i < 6; i++){
  3654  05F2  0020               	movlb	0	; select bank0
  3655  05F3  01AF               	clrf	nrf24l01InitRegisters@i
  3656  05F4  01B0               	clrf	nrf24l01InitRegisters@i+1
  3657  05F5  3000               	movlw	0
  3658  05F6  0230               	subwf	nrf24l01InitRegisters@i+1,w
  3659  05F7  3006               	movlw	6
  3660  05F8  1903               	skipnz
  3661  05F9  022F               	subwf	nrf24l01InitRegisters@i,w
  3662  05FA  1803               	btfsc	3,0
  3663  05FB  2E55               	goto	l3118
  3664  05FC                     l3104:	
  3665                           
  3666                           ;nrf24l01.c: 440: nrf24l01SPIStart();
  3667  05FC  3195  252A  3185   	fcall	_nrf24l01SPIStart
  3668                           
  3669                           ;nrf24l01.c: 441: nrf24l01SPISend((unsigned) 0b00100000 | ((unsigned) 0x0A + i));
  3670  05FF  0020               	movlb	0	; select bank0
  3671  0600  082F               	movf	nrf24l01InitRegisters@i,w
  3672  0601  3E0A               	addlw	10
  3673  0602  3820               	iorlw	32
  3674  0603  3195  253B  3185   	fcall	_nrf24l01SPISend
  3675                           
  3676                           ;nrf24l01.c: 443: nrf24l01SPISend(n_ADDRESS_P0[4] + (n_ADDRESS_MUL * i));
  3677  0606  3050               	movlw	low ((_n_ADDRESS_P0+4)| (0+32768))
  3678  0607  0084               	movwf	4
  3679  0608  3098               	movlw	high ((_n_ADDRESS_P0+4)| (0+32768))
  3680  0609  0085               	movwf	5
  3681  060A  0800               	movf	0,w	;code access
  3682  060B  0020               	movlb	0	; select bank0
  3683  060C  00A7               	movwf	??_nrf24l01InitRegisters
  3684  060D  082F               	movf	nrf24l01InitRegisters@i,w
  3685  060E  00A8               	movwf	??_nrf24l01InitRegisters+1
  3686  060F  0828               	movf	??_nrf24l01InitRegisters+1,w
  3687  0610  00A0               	movwf	___bmul@multiplicand
  3688  0611  3028               	movlw	low (_n_ADDRESS_MUL| (0+32768))
  3689  0612  0084               	movwf	4
  3690  0613  3098               	movlw	high (_n_ADDRESS_MUL| (0+32768))
  3691  0614  0085               	movwf	5
  3692  0615  0800               	movf	0,w	;code access
  3693  0616  3195  2557  3185   	fcall	___bmul
  3694  0619  0020               	movlb	0	; select bank0
  3695  061A  0727               	addwf	??_nrf24l01InitRegisters,w
  3696  061B  3195  253B  3185   	fcall	_nrf24l01SPISend
  3697                           
  3698                           ;nrf24l01.c: 445: if (i < 2){
  3699  061E  3000               	movlw	0
  3700  061F  0020               	movlb	0	; select bank0
  3701  0620  0230               	subwf	nrf24l01InitRegisters@i+1,w
  3702  0621  3002               	movlw	2
  3703  0622  1903               	skipnz
  3704  0623  022F               	subwf	nrf24l01InitRegisters@i,w
  3705  0624  1803               	skipnc
  3706  0625  2E46               	goto	l3112
  3707                           
  3708                           ;nrf24l01.c: 446: nrf24l01SPISend(n_ADDRESS_P0[3]);
  3709  0626  304F               	movlw	low ((_n_ADDRESS_P0+3)| (0+32768))
  3710  0627  0084               	movwf	4
  3711  0628  3098               	movlw	high ((_n_ADDRESS_P0+3)| (0+32768))
  3712  0629  0085               	movwf	5
  3713  062A  0800               	movf	0,w	;code access
  3714  062B  3195  253B  3185   	fcall	_nrf24l01SPISend
  3715                           
  3716                           ;nrf24l01.c: 447: nrf24l01SPISend(n_ADDRESS_P0[2]);
  3717  062E  304E               	movlw	low ((_n_ADDRESS_P0+2)| (0+32768))
  3718  062F  0084               	movwf	4
  3719  0630  3098               	movlw	high ((_n_ADDRESS_P0+2)| (0+32768))
  3720  0631  0085               	movwf	5
  3721  0632  0800               	movf	0,w	;code access
  3722  0633  3195  253B  3185   	fcall	_nrf24l01SPISend
  3723                           
  3724                           ;nrf24l01.c: 448: nrf24l01SPISend(n_ADDRESS_P0[1]);
  3725  0636  304D               	movlw	low ((_n_ADDRESS_P0+1)| (0+32768))
  3726  0637  0084               	movwf	4
  3727  0638  3098               	movlw	high ((_n_ADDRESS_P0+1)| (0+32768))
  3728  0639  0085               	movwf	5
  3729  063A  0800               	movf	0,w	;code access
  3730  063B  3195  253B  3185   	fcall	_nrf24l01SPISend
  3731                           
  3732                           ;nrf24l01.c: 449: nrf24l01SPISend(n_ADDRESS_P0[0]);
  3733  063E  304C               	movlw	low (_n_ADDRESS_P0| (0+32768))
  3734  063F  0084               	movwf	4
  3735  0640  3098               	movlw	high (_n_ADDRESS_P0| (0+32768))
  3736  0641  0085               	movwf	5
  3737  0642  0800               	movf	0,w	;code access
  3738  0643  3195  253B  3185   	fcall	_nrf24l01SPISend
  3739  0646                     l3112:	
  3740                           
  3741                           ;nrf24l01.c: 450: };nrf24l01.c: 452: nrf24l01SPIEnd();
  3742  0646  3195  251B  3185   	fcall	_nrf24l01SPIEnd
  3743  0649  3001               	movlw	1
  3744  064A  0020               	movlb	0	; select bank0
  3745  064B  07AF               	addwf	nrf24l01InitRegisters@i,f
  3746  064C  3000               	movlw	0
  3747  064D  3DB0               	addwfc	nrf24l01InitRegisters@i+1,f
  3748  064E  3000               	movlw	0
  3749  064F  0230               	subwf	nrf24l01InitRegisters@i+1,w
  3750  0650  3006               	movlw	6
  3751  0651  1903               	skipnz
  3752  0652  022F               	subwf	nrf24l01InitRegisters@i,w
  3753  0653  1C03               	skipc
  3754  0654  2DFC               	goto	l3104
  3755  0655                     l3118:	
  3756                           
  3757                           ;nrf24l01.c: 453: };nrf24l01.c: 455: nrf24l01SetTXPipe(0);
  3758  0655  3000               	movlw	0
  3759  0656  3189  2112  3185   	fcall	_nrf24l01SetTXPipe
  3760                           
  3761                           ;nrf24l01.c: 459: status.statusRegister.byte = 0x00;
  3762  0659  0021               	movlb	1	; select bank1
  3763  065A  01E8               	clrf	(_status^(0+128)+1)	;volatile
  3764                           
  3765                           ;nrf24l01.c: 460: status.statusRegister.RX_DR = 1;
  3766  065B  1768               	bsf	(_status^(0+128)+1),6	;volatile
  3767                           
  3768                           ;nrf24l01.c: 461: status.statusRegister.TX_DS = 1;
  3769  065C  16E8               	bsf	(_status^(0+128)+1),5	;volatile
  3770                           
  3771                           ;nrf24l01.c: 462: status.statusRegister.MAX_RT = 1;
  3772  065D  1668               	bsf	(_status^(0+128)+1),4	;volatile
  3773                           
  3774                           ;nrf24l01.c: 463: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x07, status.statusReg
      +                          ister.byte);
  3775  065E  0868               	movf	(_status^(0+128)+1),w	;volatile
  3776  065F  0020               	movlb	0	; select bank0
  3777  0660  00A7               	movwf	??_nrf24l01InitRegisters
  3778  0661  0827               	movf	??_nrf24l01InitRegisters,w
  3779  0662  00A0               	movwf	nrf24l01Send@data
  3780  0663  3027               	movlw	39
  3781  0664  3196  269B  3185   	fcall	_nrf24l01Send
  3782                           
  3783                           ;nrf24l01.c: 465: status.statusRegister.byte = nrf24l01Send((unsigned) 0b00000000 | (uns
      +                          igned) 0x07, 0);
  3784  0667  0020               	movlb	0	; select bank0
  3785  0668  01A0               	clrf	nrf24l01Send@data
  3786  0669  3007               	movlw	7
  3787  066A  3196  269B  3185   	fcall	_nrf24l01Send
  3788  066D  0020               	movlb	0	; select bank0
  3789  066E  00A7               	movwf	??_nrf24l01InitRegisters
  3790  066F  0827               	movf	??_nrf24l01InitRegisters,w
  3791  0670  0021               	movlb	1	; select bank1
  3792  0671  00E8               	movwf	(_status^(0+128)+1)	;volatile
  3793                           
  3794                           ;nrf24l01.c: 468: nrf24l01Send((unsigned) 0b11100001, 0);
  3795  0672  0020               	movlb	0	; select bank0
  3796  0673  01A0               	clrf	nrf24l01Send@data
  3797  0674  30E1               	movlw	225
  3798  0675  3196  269B  3185   	fcall	_nrf24l01Send
  3799                           
  3800                           ;nrf24l01.c: 469: nrf24l01Send((unsigned) 0b11100010, 0);
  3801  0678  0020               	movlb	0	; select bank0
  3802  0679  01A0               	clrf	nrf24l01Send@data
  3803  067A  30E2               	movlw	226
  3804  067B  3196  269B  3185   	fcall	_nrf24l01Send
  3805                           
  3806                           ;nrf24l01.c: 472: status.configRegister.PRIM_RX = 0;
  3807  067E  0021               	movlb	1	; select bank1
  3808  067F  1069               	bcf	(_status^(0+128)+2),0	;volatile
  3809                           
  3810                           ;nrf24l01.c: 473: status.configRegister.EN_CRC = 1;
  3811  0680  15E9               	bsf	(_status^(0+128)+2),3	;volatile
  3812                           
  3813                           ;nrf24l01.c: 474: status.configRegister.CRCO = 1;
  3814  0681  1569               	bsf	(_status^(0+128)+2),2	;volatile
  3815                           
  3816                           ;nrf24l01.c: 475: status.configRegister.PWR_UP = 1;
  3817  0682  14E9               	bsf	(_status^(0+128)+2),1	;volatile
  3818                           
  3819                           ;nrf24l01.c: 476: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x00, status.configReg
      +                          ister.byte);
  3820  0683  0869               	movf	(_status^(0+128)+2),w	;volatile
  3821  0684  0020               	movlb	0	; select bank0
  3822  0685  00A7               	movwf	??_nrf24l01InitRegisters
  3823  0686  0827               	movf	??_nrf24l01InitRegisters,w
  3824  0687  00A0               	movwf	nrf24l01Send@data
  3825  0688  3020               	movlw	32
  3826  0689  3196  269B         	fcall	_nrf24l01Send
  3827  068B  0008               	return
  3828  068C                     __end_of_nrf24l01InitRegisters:	
  3829                           
  3830                           	psect	text4
  3831  0912                     __ptext4:	
  3832 ;; *************** function _nrf24l01SetTXPipe *****************
  3833 ;; Defined at:
  3834 ;;		line 181 in file "nrf24l01.c"
  3835 ;; Parameters:    Size  Location     Type
  3836 ;;  pipe            1    wreg     unsigned char 
  3837 ;; Auto vars:     Size  Location     Type
  3838 ;;  pipe            1    6[BANK0 ] unsigned char 
  3839 ;; Return value:  Size  Location     Type
  3840 ;;                  1    wreg      void 
  3841 ;; Registers used:
  3842 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3843 ;; Tracked objects:
  3844 ;;		On entry : 0/0
  3845 ;;		On exit  : 0/0
  3846 ;;		Unchanged: 0/0
  3847 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3848 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3849 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3850 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3851 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3852 ;;Total ram usage:        3 bytes
  3853 ;; Hardware stack levels used:    1
  3854 ;; Hardware stack levels required when called:    9
  3855 ;; This function calls:
  3856 ;;		___bmul
  3857 ;;		_nrf24l01SPIEnd
  3858 ;;		_nrf24l01SPISend
  3859 ;;		_nrf24l01SPIStart
  3860 ;; This function is called by:
  3861 ;;		_main
  3862 ;;		_nrf24l01InitRegisters
  3863 ;; This function uses a non-reentrant model
  3864 ;;
  3865                           
  3866                           
  3867                           ;psect for function _nrf24l01SetTXPipe
  3868  0912                     _nrf24l01SetTXPipe:	
  3869                           
  3870                           ;incstack = 0
  3871                           ; Regs used in _nrf24l01SetTXPipe: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3872                           ;nrf24l01SetTXPipe@pipe stored from wreg
  3873  0912  0020               	movlb	0	; select bank0
  3874  0913  00A6               	movwf	nrf24l01SetTXPipe@pipe
  3875                           
  3876                           ;nrf24l01.c: 184: nrf24l01SPIStart();
  3877  0914  3195  252A  3189   	fcall	_nrf24l01SPIStart
  3878                           
  3879                           ;nrf24l01.c: 185: nrf24l01SPISend((unsigned) 0b00100000 | (unsigned) 0x10);
  3880  0917  3030               	movlw	48
  3881  0918  3195  253B  3189   	fcall	_nrf24l01SPISend
  3882                           
  3883                           ;nrf24l01.c: 186: nrf24l01SPISend(n_ADDRESS_P0[4] + (unsigned) (pipe * n_ADDRESS_MUL));
  3884  091B  3050               	movlw	low ((_n_ADDRESS_P0+4)| (0+32768))
  3885  091C  0084               	movwf	4
  3886  091D  3098               	movlw	high ((_n_ADDRESS_P0+4)| (0+32768))
  3887  091E  0085               	movwf	5
  3888  091F  0800               	movf	0,w	;code access
  3889  0920  0020               	movlb	0	; select bank0
  3890  0921  00A4               	movwf	??_nrf24l01SetTXPipe
  3891  0922  3028               	movlw	low (_n_ADDRESS_MUL| (0+32768))
  3892  0923  0084               	movwf	4
  3893  0924  3098               	movlw	high (_n_ADDRESS_MUL| (0+32768))
  3894  0925  0085               	movwf	5
  3895  0926  0800               	movf	0,w	;code access
  3896  0927  00A5               	movwf	??_nrf24l01SetTXPipe+1
  3897  0928  0825               	movf	??_nrf24l01SetTXPipe+1,w
  3898  0929  00A0               	movwf	___bmul@multiplicand
  3899  092A  0826               	movf	nrf24l01SetTXPipe@pipe,w
  3900  092B  3195  2557  3189   	fcall	___bmul
  3901  092E  0020               	movlb	0	; select bank0
  3902  092F  0724               	addwf	??_nrf24l01SetTXPipe,w
  3903  0930  3195  253B  3189   	fcall	_nrf24l01SPISend
  3904                           
  3905                           ;nrf24l01.c: 187: nrf24l01SPISend(n_ADDRESS_P0[3]);
  3906  0933  304F               	movlw	low ((_n_ADDRESS_P0+3)| (0+32768))
  3907  0934  0084               	movwf	4
  3908  0935  3098               	movlw	high ((_n_ADDRESS_P0+3)| (0+32768))
  3909  0936  0085               	movwf	5
  3910  0937  0800               	movf	0,w	;code access
  3911  0938  3195  253B  3189   	fcall	_nrf24l01SPISend
  3912                           
  3913                           ;nrf24l01.c: 188: nrf24l01SPISend(n_ADDRESS_P0[2]);
  3914  093B  304E               	movlw	low ((_n_ADDRESS_P0+2)| (0+32768))
  3915  093C  0084               	movwf	4
  3916  093D  3098               	movlw	high ((_n_ADDRESS_P0+2)| (0+32768))
  3917  093E  0085               	movwf	5
  3918  093F  0800               	movf	0,w	;code access
  3919  0940  3195  253B  3189   	fcall	_nrf24l01SPISend
  3920                           
  3921                           ;nrf24l01.c: 189: nrf24l01SPISend(n_ADDRESS_P0[1]);
  3922  0943  304D               	movlw	low ((_n_ADDRESS_P0+1)| (0+32768))
  3923  0944  0084               	movwf	4
  3924  0945  3098               	movlw	high ((_n_ADDRESS_P0+1)| (0+32768))
  3925  0946  0085               	movwf	5
  3926  0947  0800               	movf	0,w	;code access
  3927  0948  3195  253B  3189   	fcall	_nrf24l01SPISend
  3928                           
  3929                           ;nrf24l01.c: 190: nrf24l01SPISend(n_ADDRESS_P0[0]);
  3930  094B  304C               	movlw	low (_n_ADDRESS_P0| (0+32768))
  3931  094C  0084               	movwf	4
  3932  094D  3098               	movlw	high (_n_ADDRESS_P0| (0+32768))
  3933  094E  0085               	movwf	5
  3934  094F  0800               	movf	0,w	;code access
  3935  0950  3195  253B  3189   	fcall	_nrf24l01SPISend
  3936                           
  3937                           ;nrf24l01.c: 191: nrf24l01SPIEnd();
  3938  0953  3195  251B         	fcall	_nrf24l01SPIEnd
  3939  0955  0008               	return
  3940  0956                     __end_of_nrf24l01SetTXPipe:	
  3941                           
  3942                           	psect	text5
  3943  1557                     __ptext5:	
  3944 ;; *************** function ___bmul *****************
  3945 ;; Defined at:
  3946 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\Umul8.c"
  3947 ;; Parameters:    Size  Location     Type
  3948 ;;  multiplier      1    wreg     unsigned char 
  3949 ;;  multiplicand    1    0[BANK0 ] unsigned char 
  3950 ;; Auto vars:     Size  Location     Type
  3951 ;;  multiplier      1    3[BANK0 ] unsigned char 
  3952 ;;  product         1    2[BANK0 ] unsigned char 
  3953 ;; Return value:  Size  Location     Type
  3954 ;;                  1    wreg      unsigned char 
  3955 ;; Registers used:
  3956 ;;		wreg, status,2, status,0
  3957 ;; Tracked objects:
  3958 ;;		On entry : 0/0
  3959 ;;		On exit  : 0/0
  3960 ;;		Unchanged: 0/0
  3961 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3962 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3963 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3964 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3965 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3966 ;;Total ram usage:        4 bytes
  3967 ;; Hardware stack levels used:    1
  3968 ;; Hardware stack levels required when called:    7
  3969 ;; This function calls:
  3970 ;;		Nothing
  3971 ;; This function is called by:
  3972 ;;		_nrf24l01SetTXPipe
  3973 ;;		_nrf24l01InitRegisters
  3974 ;; This function uses a non-reentrant model
  3975 ;;
  3976                           
  3977                           
  3978                           ;psect for function ___bmul
  3979  1557                     ___bmul:	
  3980                           
  3981                           ;incstack = 0
  3982                           ; Regs used in ___bmul: [wreg+status,2+status,0]
  3983                           ;___bmul@multiplier stored from wreg
  3984  1557  0020               	movlb	0	; select bank0
  3985  1558  00A3               	movwf	___bmul@multiplier
  3986  1559  01A2               	clrf	___bmul@product
  3987  155A                     l2634:	
  3988  155A  1C23               	btfss	___bmul@multiplier,0
  3989  155B  2D60               	goto	l2638
  3990  155C  0820               	movf	___bmul@multiplicand,w
  3991  155D  00A1               	movwf	??___bmul
  3992  155E  0821               	movf	??___bmul,w
  3993  155F  07A2               	addwf	___bmul@product,f
  3994  1560                     l2638:	
  3995  1560  1003               	clrc
  3996  1561  0DA0               	rlf	___bmul@multiplicand,f
  3997  1562  1003               	clrc
  3998  1563  0CA3               	rrf	___bmul@multiplier,f
  3999  1564  0823               	movf	___bmul@multiplier,w
  4000  1565  1D03               	btfss	3,2
  4001  1566  2D5A               	goto	l2634
  4002  1567  0822               	movf	___bmul@product,w
  4003  1568  0008               	return
  4004  1569                     __end_of___bmul:	
  4005                           
  4006                           	psect	text6
  4007  16BB                     __ptext6:	
  4008 ;; *************** function _nrf24l01SetRXPipe *****************
  4009 ;; Defined at:
  4010 ;;		line 194 in file "nrf24l01.c"
  4011 ;; Parameters:    Size  Location     Type
  4012 ;;  pipe            1    wreg     unsigned char 
  4013 ;; Auto vars:     Size  Location     Type
  4014 ;;  pipe            1    5[BANK0 ] unsigned char 
  4015 ;;  enRXAddr        1    6[BANK0 ] struct .
  4016 ;; Return value:  Size  Location     Type
  4017 ;;                  1    wreg      void 
  4018 ;; Registers used:
  4019 ;;		wreg, status,2, status,0, pclath, cstack
  4020 ;; Tracked objects:
  4021 ;;		On entry : 0/0
  4022 ;;		On exit  : 0/0
  4023 ;;		Unchanged: 0/0
  4024 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4025 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4026 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4027 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4028 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4029 ;;Total ram usage:        4 bytes
  4030 ;; Hardware stack levels used:    1
  4031 ;; Hardware stack levels required when called:   10
  4032 ;; This function calls:
  4033 ;;		_nrf24l01Send
  4034 ;; This function is called by:
  4035 ;;		_nrf24l01InitRegisters
  4036 ;; This function uses a non-reentrant model
  4037 ;;
  4038                           
  4039                           
  4040                           ;psect for function _nrf24l01SetRXPipe
  4041  16BB                     _nrf24l01SetRXPipe:	
  4042                           
  4043                           ;incstack = 0
  4044                           ; Regs used in _nrf24l01SetRXPipe: [wreg+status,2+status,0+pclath+cstack]
  4045                           ;nrf24l01SetRXPipe@pipe stored from wreg
  4046  16BB  0020               	movlb	0	; select bank0
  4047  16BC  00A5               	movwf	nrf24l01SetRXPipe@pipe
  4048                           
  4049                           ;nrf24l01.c: 196: n_EN_RXADDR_t enRXAddr;;nrf24l01.c: 198: if (pipe > 5){
  4050  16BD  3006               	movlw	6
  4051  16BE  0225               	subwf	nrf24l01SetRXPipe@pipe,w
  4052  16BF  1C03               	skipc
  4053  16C0  2EC8               	goto	l261
  4054                           
  4055                           ;nrf24l01.c: 199: enRXAddr.ERX_P0 = 1;
  4056  16C1  1426               	bsf	nrf24l01SetRXPipe@enRXAddr,0
  4057                           
  4058                           ;nrf24l01.c: 200: enRXAddr.ERX_P1 = 1;
  4059  16C2  14A6               	bsf	nrf24l01SetRXPipe@enRXAddr,1
  4060                           
  4061                           ;nrf24l01.c: 201: enRXAddr.ERX_P2 = 1;
  4062  16C3  1526               	bsf	nrf24l01SetRXPipe@enRXAddr,2
  4063                           
  4064                           ;nrf24l01.c: 202: enRXAddr.ERX_P3 = 1;
  4065  16C4  15A6               	bsf	nrf24l01SetRXPipe@enRXAddr,3
  4066                           
  4067                           ;nrf24l01.c: 203: enRXAddr.ERX_P4 = 1;
  4068  16C5  1626               	bsf	nrf24l01SetRXPipe@enRXAddr,4
  4069                           
  4070                           ;nrf24l01.c: 204: enRXAddr.ERX_P5 = 1;
  4071  16C6  16A6               	bsf	nrf24l01SetRXPipe@enRXAddr,5
  4072                           
  4073                           ;nrf24l01.c: 205: }
  4074  16C7  2ED4               	goto	l2874
  4075  16C8                     l261:	
  4076                           
  4077                           ;nrf24l01.c: 207: else{;nrf24l01.c: 208: enRXAddr.ERX_P0 = 1;
  4078  16C8  1426               	bsf	nrf24l01SetRXPipe@enRXAddr,0
  4079                           
  4080                           ;nrf24l01.c: 209: enRXAddr.byte = (unsigned) enRXAddr.byte << pipe;
  4081  16C9  0826               	movf	nrf24l01SetRXPipe@enRXAddr,w
  4082  16CA  00A3               	movwf	??_nrf24l01SetRXPipe
  4083  16CB  0A25               	incf	nrf24l01SetRXPipe@pipe,w
  4084  16CC  2ECE               	goto	u3064
  4085  16CD                     u3065:	
  4086  16CD  35A3               	lslf	??_nrf24l01SetRXPipe,f
  4087  16CE                     u3064:	
  4088  16CE  0B89               	decfsz	9,f
  4089  16CF  2ECD               	goto	u3065
  4090  16D0  0823               	movf	??_nrf24l01SetRXPipe,w
  4091  16D1  00A4               	movwf	??_nrf24l01SetRXPipe+1
  4092  16D2  0824               	movf	??_nrf24l01SetRXPipe+1,w
  4093  16D3  00A6               	movwf	nrf24l01SetRXPipe@enRXAddr
  4094  16D4                     l2874:	
  4095                           
  4096                           ;nrf24l01.c: 210: };nrf24l01.c: 212: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x0
      +                          2, enRXAddr.byte);
  4097  16D4  0826               	movf	nrf24l01SetRXPipe@enRXAddr,w
  4098  16D5  00A3               	movwf	??_nrf24l01SetRXPipe
  4099  16D6  0823               	movf	??_nrf24l01SetRXPipe,w
  4100  16D7  00A0               	movwf	nrf24l01Send@data
  4101  16D8  3022               	movlw	34
  4102  16D9  3196  269B         	fcall	_nrf24l01Send
  4103  16DB  0008               	return
  4104  16DC                     __end_of_nrf24l01SetRXPipe:	
  4105                           
  4106                           	psect	text7
  4107  17C8                     __ptext7:	
  4108 ;; *************** function _nrf24l01GetPipe *****************
  4109 ;; Defined at:
  4110 ;;		line 168 in file "main.c"
  4111 ;; Parameters:    Size  Location     Type
  4112 ;;  name            1    wreg     PTR unsigned char 
  4113 ;;		 -> romDataMap(28), 
  4114 ;; Auto vars:     Size  Location     Type
  4115 ;;  name            1    9[BANK0 ] PTR unsigned char 
  4116 ;;		 -> romDataMap(28), 
  4117 ;;  i               1   10[BANK0 ] unsigned char 
  4118 ;;  pipe            1    8[BANK0 ] unsigned char 
  4119 ;; Return value:  Size  Location     Type
  4120 ;;                  1    wreg      unsigned char 
  4121 ;; Registers used:
  4122 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4123 ;; Tracked objects:
  4124 ;;		On entry : 0/0
  4125 ;;		On exit  : 0/0
  4126 ;;		Unchanged: 0/0
  4127 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4128 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4129 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4130 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4131 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4132 ;;Total ram usage:        5 bytes
  4133 ;; Hardware stack levels used:    1
  4134 ;; Hardware stack levels required when called:    8
  4135 ;; This function calls:
  4136 ;;		___lwmod
  4137 ;;		_strlen
  4138 ;; This function is called by:
  4139 ;;		_main
  4140 ;; This function uses a non-reentrant model
  4141 ;;
  4142                           
  4143                           
  4144                           ;psect for function _nrf24l01GetPipe
  4145  17C8                     _nrf24l01GetPipe:	
  4146                           
  4147                           ;incstack = 0
  4148                           ; Regs used in _nrf24l01GetPipe: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4149                           ;nrf24l01GetPipe@name stored from wreg
  4150  17C8  0020               	movlb	0	; select bank0
  4151  17C9  00A9               	movwf	nrf24l01GetPipe@name
  4152                           
  4153                           ;main.c: 169: unsigned char pipe = 0;
  4154  17CA  01A8               	clrf	nrf24l01GetPipe@pipe
  4155                           
  4156                           ;main.c: 170: unsigned char i = 0;
  4157  17CB  01AA               	clrf	nrf24l01GetPipe@i
  4158                           
  4159                           ;main.c: 173: for (i = 0; i < strlen(name); i++){
  4160  17CC  01AA               	clrf	nrf24l01GetPipe@i
  4161  17CD                     l3312:	
  4162  17CD  0829               	movf	nrf24l01GetPipe@name,w
  4163  17CE  00A0               	movwf	strlen@s
  4164  17CF  3001               	movlw	1
  4165  17D0  00A1               	movwf	strlen@s+1
  4166  17D1  3196  267C  3197   	fcall	_strlen
  4167  17D4  0020               	movlb	0	; select bank0
  4168  17D5  082A               	movf	nrf24l01GetPipe@i,w
  4169  17D6  00A6               	movwf	??_nrf24l01GetPipe
  4170  17D7  01A7               	clrf	??_nrf24l01GetPipe+1
  4171  17D8  0821               	movf	?_strlen+1,w
  4172  17D9  0227               	subwf	??_nrf24l01GetPipe+1,w
  4173  17DA  1D03               	skipz
  4174  17DB  2FDE               	goto	u3495
  4175  17DC  0820               	movf	?_strlen,w
  4176  17DD  0226               	subwf	??_nrf24l01GetPipe,w
  4177  17DE                     u3495:	
  4178  17DE  1803               	btfsc	3,0
  4179  17DF  2FF0               	goto	l3314
  4180                           
  4181                           ;main.c: 174: pipe+= name[i];
  4182  17E0  082A               	movf	nrf24l01GetPipe@i,w
  4183  17E1  0729               	addwf	nrf24l01GetPipe@name,w
  4184  17E2  00A6               	movwf	??_nrf24l01GetPipe
  4185  17E3  0826               	movf	??_nrf24l01GetPipe,w
  4186  17E4  0086               	movwf	6
  4187  17E5  3001               	movlw	1	; select bank2/3
  4188  17E6  0087               	movwf	7
  4189  17E7  0801               	movf	1,w
  4190  17E8  00A7               	movwf	??_nrf24l01GetPipe+1
  4191  17E9  0827               	movf	??_nrf24l01GetPipe+1,w
  4192  17EA  07A8               	addwf	nrf24l01GetPipe@pipe,f
  4193  17EB  3001               	movlw	1
  4194  17EC  00A6               	movwf	??_nrf24l01GetPipe
  4195  17ED  0826               	movf	??_nrf24l01GetPipe,w
  4196  17EE  07AA               	addwf	nrf24l01GetPipe@i,f
  4197  17EF  2FCD               	goto	l3312
  4198  17F0                     l3314:	
  4199                           
  4200                           ;main.c: 175: };main.c: 177: return (unsigned) pipe % 6;
  4201  17F0  3006               	movlw	6
  4202  17F1  00A0               	movwf	___lwmod@divisor
  4203  17F2  3000               	movlw	0
  4204  17F3  00A1               	movwf	___lwmod@divisor+1
  4205  17F4  0828               	movf	nrf24l01GetPipe@pipe,w
  4206  17F5  00A6               	movwf	??_nrf24l01GetPipe
  4207  17F6  01A7               	clrf	??_nrf24l01GetPipe+1
  4208  17F7  0826               	movf	??_nrf24l01GetPipe,w
  4209  17F8  00A2               	movwf	___lwmod@dividend
  4210  17F9  0827               	movf	??_nrf24l01GetPipe+1,w
  4211  17FA  00A3               	movwf	___lwmod@dividend+1
  4212  17FB  3197  279B         	fcall	___lwmod
  4213  17FD  0020               	movlb	0	; select bank0
  4214  17FE  0820               	movf	?___lwmod,w
  4215  17FF  0008               	return
  4216  1800                     __end_of_nrf24l01GetPipe:	
  4217                           
  4218                           	psect	text8
  4219  179B                     __ptext8:	
  4220 ;; *************** function ___lwmod *****************
  4221 ;; Defined at:
  4222 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\lwmod.c"
  4223 ;; Parameters:    Size  Location     Type
  4224 ;;  divisor         2    0[BANK0 ] unsigned int 
  4225 ;;  dividend        2    2[BANK0 ] unsigned int 
  4226 ;; Auto vars:     Size  Location     Type
  4227 ;;  counter         1    5[BANK0 ] unsigned char 
  4228 ;; Return value:  Size  Location     Type
  4229 ;;                  2    0[BANK0 ] unsigned int 
  4230 ;; Registers used:
  4231 ;;		wreg, status,2, status,0
  4232 ;; Tracked objects:
  4233 ;;		On entry : 0/0
  4234 ;;		On exit  : 0/0
  4235 ;;		Unchanged: 0/0
  4236 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4237 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4238 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4239 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4240 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4241 ;;Total ram usage:        6 bytes
  4242 ;; Hardware stack levels used:    1
  4243 ;; Hardware stack levels required when called:    7
  4244 ;; This function calls:
  4245 ;;		Nothing
  4246 ;; This function is called by:
  4247 ;;		_nrf24l01GetPipe
  4248 ;; This function uses a non-reentrant model
  4249 ;;
  4250                           
  4251                           
  4252                           ;psect for function ___lwmod
  4253  179B                     ___lwmod:	
  4254                           
  4255                           ;incstack = 0
  4256                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  4257  179B  0020               	movlb	0	; select bank0
  4258  179C  0820               	movf	___lwmod@divisor,w
  4259  179D  0421               	iorwf	___lwmod@divisor+1,w
  4260  179E  1903               	btfsc	3,2
  4261  179F  2FC3               	goto	l3168
  4262  17A0  01A5               	clrf	___lwmod@counter
  4263  17A1  0AA5               	incf	___lwmod@counter,f
  4264  17A2                     l3158:	
  4265  17A2  1BA1               	btfsc	___lwmod@divisor+1,7
  4266  17A3  2FAE               	goto	l3160
  4267  17A4  3001               	movlw	1
  4268  17A5                     u3315:	
  4269  17A5  35A0               	lslf	___lwmod@divisor,f
  4270  17A6  0DA1               	rlf	___lwmod@divisor+1,f
  4271  17A7  0B89               	decfsz	9,f
  4272  17A8  2FA5               	goto	u3315
  4273  17A9  3001               	movlw	1
  4274  17AA  00A4               	movwf	??___lwmod
  4275  17AB  0824               	movf	??___lwmod,w
  4276  17AC  07A5               	addwf	___lwmod@counter,f
  4277  17AD  2FA2               	goto	l3158
  4278  17AE                     l3160:	
  4279  17AE  0821               	movf	___lwmod@divisor+1,w
  4280  17AF  0223               	subwf	___lwmod@dividend+1,w
  4281  17B0  1D03               	skipz
  4282  17B1  2FB4               	goto	u3335
  4283  17B2  0820               	movf	___lwmod@divisor,w
  4284  17B3  0222               	subwf	___lwmod@dividend,w
  4285  17B4                     u3335:	
  4286  17B4  1C03               	skipc
  4287  17B5  2FBA               	goto	l3164
  4288  17B6  0820               	movf	___lwmod@divisor,w
  4289  17B7  02A2               	subwf	___lwmod@dividend,f
  4290  17B8  0821               	movf	___lwmod@divisor+1,w
  4291  17B9  3BA3               	subwfb	___lwmod@dividend+1,f
  4292  17BA                     l3164:	
  4293  17BA  3001               	movlw	1
  4294  17BB                     u3345:	
  4295  17BB  36A1               	lsrf	___lwmod@divisor+1,f
  4296  17BC  0CA0               	rrf	___lwmod@divisor,f
  4297  17BD  0B89               	decfsz	9,f
  4298  17BE  2FBB               	goto	u3345
  4299  17BF  3001               	movlw	1
  4300  17C0  02A5               	subwf	___lwmod@counter,f
  4301  17C1  1D03               	btfss	3,2
  4302  17C2  2FAE               	goto	l3160
  4303  17C3                     l3168:	
  4304  17C3  0823               	movf	___lwmod@dividend+1,w
  4305  17C4  00A1               	movwf	?___lwmod+1
  4306  17C5  0822               	movf	___lwmod@dividend,w
  4307  17C6  00A0               	movwf	?___lwmod
  4308  17C7  0008               	return
  4309  17C8                     __end_of___lwmod:	
  4310                           
  4311                           	psect	text9
  4312  002F                     __ptext9:	
  4313 ;; *************** function _loop *****************
  4314 ;; Defined at:
  4315 ;;		line 126 in file "main.c"
  4316 ;; Parameters:    Size  Location     Type
  4317 ;;		None
  4318 ;; Auto vars:     Size  Location     Type
  4319 ;;  packet         33   16[BANK2 ] struct .
  4320 ;;  ta              3    3[BANK2 ] float 
  4321 ;;  vt              3    0[BANK2 ] float 
  4322 ;;  rfSetup         1   12[BANK2 ] struct .
  4323 ;; Return value:  Size  Location     Type
  4324 ;;                  1    wreg      void 
  4325 ;; Registers used:
  4326 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4327 ;; Tracked objects:
  4328 ;;		On entry : 0/0
  4329 ;;		On exit  : 0/0
  4330 ;;		Unchanged: 0/0
  4331 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4332 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4333 ;;      Locals:         0       0       0      49       0       0       0       0       0       0       0       0       
      +0       0
  4334 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  4335 ;;      Totals:         0       0       1      49       0       0       0       0       0       0       0       0       
      +0       0
  4336 ;;Total ram usage:       50 bytes
  4337 ;; Hardware stack levels used:    1
  4338 ;; Hardware stack levels required when called:   14
  4339 ;; This function calls:
  4340 ;;		___ftadd
  4341 ;;		___ftdiv
  4342 ;;		___ftmul
  4343 ;;		___ftneg
  4344 ;;		___lbtoft
  4345 ;;		___lltoft
  4346 ;;		_getADCValue
  4347 ;;		_nrf24l01Send
  4348 ;;		_sendMessage
  4349 ;; This function is called by:
  4350 ;;		_main
  4351 ;; This function uses a non-reentrant model
  4352 ;;
  4353                           
  4354                           
  4355                           ;psect for function _loop
  4356  002F                     _loop:	
  4357                           
  4358                           ;main.c: 128: nrf24l01Packet_t packet;;main.c: 130: sendMessage(&packet, "DBG1", counter
      +                          );
  4359                           
  4360                           ;incstack = 0
  4361                           ; Regs used in _loop: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4362  002F  0022               	movlb	2	; select bank2
  4363  0030  0854               	movf	(_counter+3)^(0+256),w
  4364  0031  0020               	movlb	0	; select bank0
  4365  0032  00AB               	movwf	___lltoft@c+3
  4366  0033  0022               	movlb	2	; select bank2
  4367  0034  0853               	movf	(_counter+2)^(0+256),w
  4368  0035  0020               	movlb	0	; select bank0
  4369  0036  00AA               	movwf	___lltoft@c+2
  4370  0037  0022               	movlb	2	; select bank2
  4371  0038  0852               	movf	(_counter+1)^(0+256),w
  4372  0039  0020               	movlb	0	; select bank0
  4373  003A  00A9               	movwf	___lltoft@c+1
  4374  003B  0022               	movlb	2	; select bank2
  4375  003C  0851               	movf	_counter^(0+256),w
  4376  003D  0020               	movlb	0	; select bank0
  4377  003E  00A8               	movwf	___lltoft@c
  4378  003F  3197  2747  3180   	fcall	___lltoft
  4379  0042  0020               	movlb	0	; select bank0
  4380  0043  0828               	movf	?___lltoft,w
  4381  0044  0022               	movlb	2	; select bank2
  4382  0045  00AD               	movwf	_loop$1947^(0+256)
  4383  0046  0020               	movlb	0	; select bank0
  4384  0047  0829               	movf	?___lltoft+1,w
  4385  0048  0022               	movlb	2	; select bank2
  4386  0049  00AE               	movwf	(_loop$1947+1)^(0+256)
  4387  004A  0020               	movlb	0	; select bank0
  4388  004B  082A               	movf	?___lltoft+2,w
  4389  004C  0022               	movlb	2	; select bank2
  4390  004D  00AF               	movwf	(_loop$1947+2)^(0+256)
  4391                           
  4392                           ;main.c: 128: nrf24l01Packet_t packet;;main.c: 130: sendMessage(&packet, "DBG1", counter
      +                          );
  4393  004E  3030               	movlw	low loop@packet
  4394  004F  0021               	movlb	1	; select bank1
  4395  0050  00B9               	movwf	sendMessage@packet^(0+128)
  4396  0051  3001               	movlw	high loop@packet
  4397  0052  00BA               	movwf	(sendMessage@packet+1)^(0+128)
  4398  0053  3051               	movlw	low (STR_3| (0+32768))
  4399  0054  00BB               	movwf	sendMessage@topic^(0+128)
  4400  0055  3098               	movlw	high (STR_3| (0+32768))
  4401  0056  00BC               	movwf	(sendMessage@topic^(0+128)+1)
  4402  0057  0022               	movlb	2	; select bank2
  4403  0058  082D               	movf	_loop$1947^(0+256),w
  4404  0059  0021               	movlb	1	; select bank1
  4405  005A  00BD               	movwf	sendMessage@value^(0+128)
  4406  005B  0022               	movlb	2	; select bank2
  4407  005C  082E               	movf	(_loop$1947+1)^(0+256),w
  4408  005D  0021               	movlb	1	; select bank1
  4409  005E  00BE               	movwf	(sendMessage@value+1)^(0+128)
  4410  005F  0022               	movlb	2	; select bank2
  4411  0060  082F               	movf	(_loop$1947+2)^(0+256),w
  4412  0061  0021               	movlb	1	; select bank1
  4413  0062  00BF               	movwf	(sendMessage@value+2)^(0+128)
  4414  0063  318A  226D  3180   	fcall	_sendMessage
  4415                           
  4416                           ;main.c: 136: sendMessage(&packet, "VBAT", getADCValue(0b000100) * 3.106382978723404);
  4417  0066  30CF               	movlw	207
  4418  0067  0020               	movlb	0	; select bank0
  4419  0068  00D7               	movwf	___ftmul@f1
  4420  0069  3046               	movlw	70
  4421  006A  00D8               	movwf	___ftmul@f1+1
  4422  006B  3040               	movlw	64
  4423  006C  00D9               	movwf	___ftmul@f1+2
  4424  006D  3004               	movlw	4
  4425  006E  318C  2415  3180   	fcall	_getADCValue
  4426  0071  0020               	movlb	0	; select bank0
  4427  0072  084B               	movf	?_getADCValue,w
  4428  0073  00DA               	movwf	___ftmul@f2
  4429  0074  084C               	movf	?_getADCValue+1,w
  4430  0075  00DB               	movwf	___ftmul@f2+1
  4431  0076  084D               	movf	?_getADCValue+2,w
  4432  0077  00DC               	movwf	___ftmul@f2+2
  4433  0078  318D  2564  3180   	fcall	___ftmul
  4434  007B  0020               	movlb	0	; select bank0
  4435  007C  0857               	movf	?___ftmul,w
  4436  007D  0022               	movlb	2	; select bank2
  4437  007E  00A6               	movwf	_loop$1948^(0+256)
  4438  007F  0020               	movlb	0	; select bank0
  4439  0080  0858               	movf	?___ftmul+1,w
  4440  0081  0022               	movlb	2	; select bank2
  4441  0082  00A7               	movwf	(_loop$1948+1)^(0+256)
  4442  0083  0020               	movlb	0	; select bank0
  4443  0084  0859               	movf	?___ftmul+2,w
  4444  0085  0022               	movlb	2	; select bank2
  4445  0086  00A8               	movwf	(_loop$1948+2)^(0+256)
  4446                           
  4447                           ;main.c: 136: sendMessage(&packet, "VBAT", getADCValue(0b000100) * 3.106382978723404);
  4448  0087  3030               	movlw	low loop@packet
  4449  0088  0021               	movlb	1	; select bank1
  4450  0089  00B9               	movwf	sendMessage@packet^(0+128)
  4451  008A  3001               	movlw	high loop@packet
  4452  008B  00BA               	movwf	(sendMessage@packet+1)^(0+128)
  4453  008C  306F               	movlw	low (STR_4| (0+32768))
  4454  008D  00BB               	movwf	sendMessage@topic^(0+128)
  4455  008E  3098               	movlw	high (STR_4| (0+32768))
  4456  008F  00BC               	movwf	(sendMessage@topic^(0+128)+1)
  4457  0090  0022               	movlb	2	; select bank2
  4458  0091  0826               	movf	_loop$1948^(0+256),w
  4459  0092  0021               	movlb	1	; select bank1
  4460  0093  00BD               	movwf	sendMessage@value^(0+128)
  4461  0094  0022               	movlb	2	; select bank2
  4462  0095  0827               	movf	(_loop$1948+1)^(0+256),w
  4463  0096  0021               	movlb	1	; select bank1
  4464  0097  00BE               	movwf	(sendMessage@value+1)^(0+128)
  4465  0098  0022               	movlb	2	; select bank2
  4466  0099  0828               	movf	(_loop$1948+2)^(0+256),w
  4467  009A  0021               	movlb	1	; select bank1
  4468  009B  00BF               	movwf	(sendMessage@value+2)^(0+128)
  4469  009C  318A  226D  3180   	fcall	_sendMessage
  4470                           
  4471                           ;main.c: 138: sendMessage(&packet, "DBG2", counter);
  4472  009F  0022               	movlb	2	; select bank2
  4473  00A0  0854               	movf	(_counter+3)^(0+256),w
  4474  00A1  0020               	movlb	0	; select bank0
  4475  00A2  00AB               	movwf	___lltoft@c+3
  4476  00A3  0022               	movlb	2	; select bank2
  4477  00A4  0853               	movf	(_counter+2)^(0+256),w
  4478  00A5  0020               	movlb	0	; select bank0
  4479  00A6  00AA               	movwf	___lltoft@c+2
  4480  00A7  0022               	movlb	2	; select bank2
  4481  00A8  0852               	movf	(_counter+1)^(0+256),w
  4482  00A9  0020               	movlb	0	; select bank0
  4483  00AA  00A9               	movwf	___lltoft@c+1
  4484  00AB  0022               	movlb	2	; select bank2
  4485  00AC  0851               	movf	_counter^(0+256),w
  4486  00AD  0020               	movlb	0	; select bank0
  4487  00AE  00A8               	movwf	___lltoft@c
  4488  00AF  3197  2747  3180   	fcall	___lltoft
  4489  00B2  0020               	movlb	0	; select bank0
  4490  00B3  0828               	movf	?___lltoft,w
  4491  00B4  0022               	movlb	2	; select bank2
  4492  00B5  00AD               	movwf	_loop$1947^(0+256)
  4493  00B6  0020               	movlb	0	; select bank0
  4494  00B7  0829               	movf	?___lltoft+1,w
  4495  00B8  0022               	movlb	2	; select bank2
  4496  00B9  00AE               	movwf	(_loop$1947+1)^(0+256)
  4497  00BA  0020               	movlb	0	; select bank0
  4498  00BB  082A               	movf	?___lltoft+2,w
  4499  00BC  0022               	movlb	2	; select bank2
  4500  00BD  00AF               	movwf	(_loop$1947+2)^(0+256)
  4501                           
  4502                           ;main.c: 138: sendMessage(&packet, "DBG2", counter);
  4503  00BE  3030               	movlw	low loop@packet
  4504  00BF  0021               	movlb	1	; select bank1
  4505  00C0  00B9               	movwf	sendMessage@packet^(0+128)
  4506  00C1  3001               	movlw	high loop@packet
  4507  00C2  00BA               	movwf	(sendMessage@packet+1)^(0+128)
  4508  00C3  3056               	movlw	low (STR_5| (0+32768))
  4509  00C4  00BB               	movwf	sendMessage@topic^(0+128)
  4510  00C5  3098               	movlw	high (STR_5| (0+32768))
  4511  00C6  00BC               	movwf	(sendMessage@topic^(0+128)+1)
  4512  00C7  0022               	movlb	2	; select bank2
  4513  00C8  082D               	movf	_loop$1947^(0+256),w
  4514  00C9  0021               	movlb	1	; select bank1
  4515  00CA  00BD               	movwf	sendMessage@value^(0+128)
  4516  00CB  0022               	movlb	2	; select bank2
  4517  00CC  082E               	movf	(_loop$1947+1)^(0+256),w
  4518  00CD  0021               	movlb	1	; select bank1
  4519  00CE  00BE               	movwf	(sendMessage@value+1)^(0+128)
  4520  00CF  0022               	movlb	2	; select bank2
  4521  00D0  082F               	movf	(_loop$1947+2)^(0+256),w
  4522  00D1  0021               	movlb	1	; select bank1
  4523  00D2  00BF               	movwf	(sendMessage@value+2)^(0+128)
  4524  00D3  318A  226D  3180   	fcall	_sendMessage
  4525                           
  4526                           ;main.c: 141: sendMessage(&packet, "ANC3mV", getADCValue(0b010011));
  4527  00D6  3030               	movlw	low loop@packet
  4528  00D7  0021               	movlb	1	; select bank1
  4529  00D8  00B9               	movwf	sendMessage@packet^(0+128)
  4530  00D9  3001               	movlw	high loop@packet
  4531  00DA  00BA               	movwf	(sendMessage@packet+1)^(0+128)
  4532  00DB  303F               	movlw	low (STR_6| (0+32768))
  4533  00DC  00BB               	movwf	sendMessage@topic^(0+128)
  4534  00DD  3098               	movlw	high (STR_6| (0+32768))
  4535  00DE  00BC               	movwf	(sendMessage@topic^(0+128)+1)
  4536  00DF  3013               	movlw	19
  4537  00E0  318C  2415  3180   	fcall	_getADCValue
  4538  00E3  0020               	movlb	0	; select bank0
  4539  00E4  084B               	movf	?_getADCValue,w
  4540  00E5  0021               	movlb	1	; select bank1
  4541  00E6  00BD               	movwf	sendMessage@value^(0+128)
  4542  00E7  0020               	movlb	0	; select bank0
  4543  00E8  084C               	movf	?_getADCValue+1,w
  4544  00E9  0021               	movlb	1	; select bank1
  4545  00EA  00BE               	movwf	(sendMessage@value+1)^(0+128)
  4546  00EB  0020               	movlb	0	; select bank0
  4547  00EC  084D               	movf	?_getADCValue+2,w
  4548  00ED  0021               	movlb	1	; select bank1
  4549  00EE  00BF               	movwf	(sendMessage@value+2)^(0+128)
  4550  00EF  318A  226D  3180   	fcall	_sendMessage
  4551                           
  4552                           ;main.c: 144: sendMessage(&packet, "DBG3", counter);
  4553  00F2  0022               	movlb	2	; select bank2
  4554  00F3  0854               	movf	(_counter+3)^(0+256),w
  4555  00F4  0020               	movlb	0	; select bank0
  4556  00F5  00AB               	movwf	___lltoft@c+3
  4557  00F6  0022               	movlb	2	; select bank2
  4558  00F7  0853               	movf	(_counter+2)^(0+256),w
  4559  00F8  0020               	movlb	0	; select bank0
  4560  00F9  00AA               	movwf	___lltoft@c+2
  4561  00FA  0022               	movlb	2	; select bank2
  4562  00FB  0852               	movf	(_counter+1)^(0+256),w
  4563  00FC  0020               	movlb	0	; select bank0
  4564  00FD  00A9               	movwf	___lltoft@c+1
  4565  00FE  0022               	movlb	2	; select bank2
  4566  00FF  0851               	movf	_counter^(0+256),w
  4567  0100  0020               	movlb	0	; select bank0
  4568  0101  00A8               	movwf	___lltoft@c
  4569  0102  3197  2747  3180   	fcall	___lltoft
  4570  0105  0020               	movlb	0	; select bank0
  4571  0106  0828               	movf	?___lltoft,w
  4572  0107  0022               	movlb	2	; select bank2
  4573  0108  00AD               	movwf	_loop$1947^(0+256)
  4574  0109  0020               	movlb	0	; select bank0
  4575  010A  0829               	movf	?___lltoft+1,w
  4576  010B  0022               	movlb	2	; select bank2
  4577  010C  00AE               	movwf	(_loop$1947+1)^(0+256)
  4578  010D  0020               	movlb	0	; select bank0
  4579  010E  082A               	movf	?___lltoft+2,w
  4580  010F  0022               	movlb	2	; select bank2
  4581  0110  00AF               	movwf	(_loop$1947+2)^(0+256)
  4582                           
  4583                           ;main.c: 144: sendMessage(&packet, "DBG3", counter);
  4584  0111  3030               	movlw	low loop@packet
  4585  0112  0021               	movlb	1	; select bank1
  4586  0113  00B9               	movwf	sendMessage@packet^(0+128)
  4587  0114  3001               	movlw	high loop@packet
  4588  0115  00BA               	movwf	(sendMessage@packet+1)^(0+128)
  4589  0116  305B               	movlw	low (STR_7| (0+32768))
  4590  0117  00BB               	movwf	sendMessage@topic^(0+128)
  4591  0118  3098               	movlw	high (STR_7| (0+32768))
  4592  0119  00BC               	movwf	(sendMessage@topic^(0+128)+1)
  4593  011A  0022               	movlb	2	; select bank2
  4594  011B  082D               	movf	_loop$1947^(0+256),w
  4595  011C  0021               	movlb	1	; select bank1
  4596  011D  00BD               	movwf	sendMessage@value^(0+128)
  4597  011E  0022               	movlb	2	; select bank2
  4598  011F  082E               	movf	(_loop$1947+1)^(0+256),w
  4599  0120  0021               	movlb	1	; select bank1
  4600  0121  00BE               	movwf	(sendMessage@value+1)^(0+128)
  4601  0122  0022               	movlb	2	; select bank2
  4602  0123  082F               	movf	(_loop$1947+2)^(0+256),w
  4603  0124  0021               	movlb	1	; select bank1
  4604  0125  00BF               	movwf	(sendMessage@value+2)^(0+128)
  4605  0126  318A  226D  3180   	fcall	_sendMessage
  4606                           
  4607                           ;main.c: 147: FVRCONbits.TSEN = 1;
  4608  0129  0022               	movlb	2	; select bank2
  4609  012A  1697               	bsf	23,5	;volatile
  4610                           
  4611                           ;main.c: 148: float vt = (2.048 - getADCValue(0b111101)) / 2;
  4612  012B  303D               	movlw	61
  4613  012C  318C  2415  3180   	fcall	_getADCValue
  4614  012F  0020               	movlb	0	; select bank0
  4615  0130  084B               	movf	?_getADCValue,w
  4616  0131  00D7               	movwf	___ftneg@f1
  4617  0132  084C               	movf	?_getADCValue+1,w
  4618  0133  00D8               	movwf	___ftneg@f1+1
  4619  0134  084D               	movf	?_getADCValue+2,w
  4620  0135  00D9               	movwf	___ftneg@f1+2
  4621  0136  3195  2532  3180   	fcall	___ftneg
  4622  0139  0020               	movlb	0	; select bank0
  4623  013A  0857               	movf	?___ftneg,w
  4624  013B  0022               	movlb	2	; select bank2
  4625  013C  00A9               	movwf	_loop$1949^(0+256)
  4626  013D  0020               	movlb	0	; select bank0
  4627  013E  0858               	movf	?___ftneg+1,w
  4628  013F  0022               	movlb	2	; select bank2
  4629  0140  00AA               	movwf	(_loop$1949+1)^(0+256)
  4630  0141  0020               	movlb	0	; select bank0
  4631  0142  0859               	movf	?___ftneg+2,w
  4632  0143  0022               	movlb	2	; select bank2
  4633  0144  00AB               	movwf	(_loop$1949+2)^(0+256)
  4634                           
  4635                           ;main.c: 148: float vt = (2.048 - getADCValue(0b111101)) / 2;
  4636  0145  3000               	movlw	0
  4637  0146  0020               	movlb	0	; select bank0
  4638  0147  00BB               	movwf	___ftdiv@f2
  4639  0148  3000               	movlw	0
  4640  0149  00BC               	movwf	___ftdiv@f2+1
  4641  014A  3040               	movlw	64
  4642  014B  00BD               	movwf	___ftdiv@f2+2
  4643  014C  3012               	movlw	18
  4644  014D  00AE               	movwf	___ftadd@f1
  4645  014E  3003               	movlw	3
  4646  014F  00AF               	movwf	___ftadd@f1+1
  4647  0150  3040               	movlw	64
  4648  0151  00B0               	movwf	___ftadd@f1+2
  4649  0152  0022               	movlb	2	; select bank2
  4650  0153  0829               	movf	_loop$1949^(0+256),w
  4651  0154  0020               	movlb	0	; select bank0
  4652  0155  00B1               	movwf	___ftadd@f2
  4653  0156  0022               	movlb	2	; select bank2
  4654  0157  082A               	movf	(_loop$1949+1)^(0+256),w
  4655  0158  0020               	movlb	0	; select bank0
  4656  0159  00B2               	movwf	___ftadd@f2+1
  4657  015A  0022               	movlb	2	; select bank2
  4658  015B  082B               	movf	(_loop$1949+2)^(0+256),w
  4659  015C  0020               	movlb	0	; select bank0
  4660  015D  00B3               	movwf	___ftadd@f2+2
  4661  015E  318F  270A  3180   	fcall	___ftadd
  4662  0161  0020               	movlb	0	; select bank0
  4663  0162  082E               	movf	?___ftadd,w
  4664  0163  00BE               	movwf	___ftdiv@f1
  4665  0164  082F               	movf	?___ftadd+1,w
  4666  0165  00BF               	movwf	___ftdiv@f1+1
  4667  0166  0830               	movf	?___ftadd+2,w
  4668  0167  00C0               	movwf	___ftdiv@f1+2
  4669  0168  318C  24BB  3180   	fcall	___ftdiv
  4670  016B  0020               	movlb	0	; select bank0
  4671  016C  083B               	movf	?___ftdiv,w
  4672  016D  0022               	movlb	2	; select bank2
  4673  016E  00A0               	movwf	loop@vt^(0+256)
  4674  016F  0020               	movlb	0	; select bank0
  4675  0170  083C               	movf	?___ftdiv+1,w
  4676  0171  0022               	movlb	2	; select bank2
  4677  0172  00A1               	movwf	(loop@vt+1)^(0+256)
  4678  0173  0020               	movlb	0	; select bank0
  4679  0174  083D               	movf	?___ftdiv+2,w
  4680  0175  0022               	movlb	2	; select bank2
  4681  0176  00A2               	movwf	(loop@vt+2)^(0+256)
  4682                           
  4683                           ;main.c: 149: FVRCONbits.TSEN = 0;
  4684  0177  1297               	bcf	23,5	;volatile
  4685                           
  4686                           ;main.c: 154: float ta = (vt / -0.00132) - (0.6063 / -0.00132) - 40;
  4687  0178  30A9               	movlw	169
  4688  0179  0020               	movlb	0	; select bank0
  4689  017A  00AE               	movwf	___ftadd@f1
  4690  017B  30D1               	movlw	209
  4691  017C  00AF               	movwf	___ftadd@f1+1
  4692  017D  3043               	movlw	67
  4693  017E  00B0               	movwf	___ftadd@f1+2
  4694  017F  3004               	movlw	4
  4695  0180  00BB               	movwf	___ftdiv@f2
  4696  0181  30AD               	movlw	173
  4697  0182  00BC               	movwf	___ftdiv@f2+1
  4698  0183  30BA               	movlw	186
  4699  0184  00BD               	movwf	___ftdiv@f2+2
  4700  0185  0022               	movlb	2	; select bank2
  4701  0186  0820               	movf	loop@vt^(0+256),w
  4702  0187  0020               	movlb	0	; select bank0
  4703  0188  00BE               	movwf	___ftdiv@f1
  4704  0189  0022               	movlb	2	; select bank2
  4705  018A  0821               	movf	(loop@vt+1)^(0+256),w
  4706  018B  0020               	movlb	0	; select bank0
  4707  018C  00BF               	movwf	___ftdiv@f1+1
  4708  018D  0022               	movlb	2	; select bank2
  4709  018E  0822               	movf	(loop@vt+2)^(0+256),w
  4710  018F  0020               	movlb	0	; select bank0
  4711  0190  00C0               	movwf	___ftdiv@f1+2
  4712  0191  318C  24BB  3180   	fcall	___ftdiv
  4713  0194  0020               	movlb	0	; select bank0
  4714  0195  083B               	movf	?___ftdiv,w
  4715  0196  00B1               	movwf	___ftadd@f2
  4716  0197  083C               	movf	?___ftdiv+1,w
  4717  0198  00B2               	movwf	___ftadd@f2+1
  4718  0199  083D               	movf	?___ftdiv+2,w
  4719  019A  00B3               	movwf	___ftadd@f2+2
  4720  019B  318F  270A  3180   	fcall	___ftadd
  4721  019E  0020               	movlb	0	; select bank0
  4722  019F  082E               	movf	?___ftadd,w
  4723  01A0  0022               	movlb	2	; select bank2
  4724  01A1  00A3               	movwf	loop@ta^(0+256)
  4725  01A2  0020               	movlb	0	; select bank0
  4726  01A3  082F               	movf	?___ftadd+1,w
  4727  01A4  0022               	movlb	2	; select bank2
  4728  01A5  00A4               	movwf	(loop@ta+1)^(0+256)
  4729  01A6  0020               	movlb	0	; select bank0
  4730  01A7  0830               	movf	?___ftadd+2,w
  4731  01A8  0022               	movlb	2	; select bank2
  4732  01A9  00A5               	movwf	(loop@ta+2)^(0+256)
  4733                           
  4734                           ;main.c: 156: sendMessage(&packet, "TEMP", ta);
  4735  01AA  3030               	movlw	low loop@packet
  4736  01AB  0021               	movlb	1	; select bank1
  4737  01AC  00B9               	movwf	sendMessage@packet^(0+128)
  4738  01AD  3001               	movlw	high loop@packet
  4739  01AE  00BA               	movwf	(sendMessage@packet+1)^(0+128)
  4740  01AF  306A               	movlw	low (STR_8| (0+32768))
  4741  01B0  00BB               	movwf	sendMessage@topic^(0+128)
  4742  01B1  3098               	movlw	high (STR_8| (0+32768))
  4743  01B2  00BC               	movwf	(sendMessage@topic^(0+128)+1)
  4744  01B3  0022               	movlb	2	; select bank2
  4745  01B4  0823               	movf	loop@ta^(0+256),w
  4746  01B5  0021               	movlb	1	; select bank1
  4747  01B6  00BD               	movwf	sendMessage@value^(0+128)
  4748  01B7  0022               	movlb	2	; select bank2
  4749  01B8  0824               	movf	(loop@ta+1)^(0+256),w
  4750  01B9  0021               	movlb	1	; select bank1
  4751  01BA  00BE               	movwf	(sendMessage@value+1)^(0+128)
  4752  01BB  0022               	movlb	2	; select bank2
  4753  01BC  0825               	movf	(loop@ta+2)^(0+256),w
  4754  01BD  0021               	movlb	1	; select bank1
  4755  01BE  00BF               	movwf	(sendMessage@value+2)^(0+128)
  4756  01BF  318A  226D  3180   	fcall	_sendMessage
  4757                           
  4758                           ;main.c: 158: sendMessage(&packet, "DBG4", counter);
  4759  01C2  0022               	movlb	2	; select bank2
  4760  01C3  0854               	movf	(_counter+3)^(0+256),w
  4761  01C4  0020               	movlb	0	; select bank0
  4762  01C5  00AB               	movwf	___lltoft@c+3
  4763  01C6  0022               	movlb	2	; select bank2
  4764  01C7  0853               	movf	(_counter+2)^(0+256),w
  4765  01C8  0020               	movlb	0	; select bank0
  4766  01C9  00AA               	movwf	___lltoft@c+2
  4767  01CA  0022               	movlb	2	; select bank2
  4768  01CB  0852               	movf	(_counter+1)^(0+256),w
  4769  01CC  0020               	movlb	0	; select bank0
  4770  01CD  00A9               	movwf	___lltoft@c+1
  4771  01CE  0022               	movlb	2	; select bank2
  4772  01CF  0851               	movf	_counter^(0+256),w
  4773  01D0  0020               	movlb	0	; select bank0
  4774  01D1  00A8               	movwf	___lltoft@c
  4775  01D2  3197  2747  3180   	fcall	___lltoft
  4776  01D5  0020               	movlb	0	; select bank0
  4777  01D6  0828               	movf	?___lltoft,w
  4778  01D7  0022               	movlb	2	; select bank2
  4779  01D8  00AD               	movwf	_loop$1947^(0+256)
  4780  01D9  0020               	movlb	0	; select bank0
  4781  01DA  0829               	movf	?___lltoft+1,w
  4782  01DB  0022               	movlb	2	; select bank2
  4783  01DC  00AE               	movwf	(_loop$1947+1)^(0+256)
  4784  01DD  0020               	movlb	0	; select bank0
  4785  01DE  082A               	movf	?___lltoft+2,w
  4786  01DF  0022               	movlb	2	; select bank2
  4787  01E0  00AF               	movwf	(_loop$1947+2)^(0+256)
  4788                           
  4789                           ;main.c: 158: sendMessage(&packet, "DBG4", counter);
  4790  01E1  3030               	movlw	low loop@packet
  4791  01E2  0021               	movlb	1	; select bank1
  4792  01E3  00B9               	movwf	sendMessage@packet^(0+128)
  4793  01E4  3001               	movlw	high loop@packet
  4794  01E5  00BA               	movwf	(sendMessage@packet+1)^(0+128)
  4795  01E6  3060               	movlw	low (STR_9| (0+32768))
  4796  01E7  00BB               	movwf	sendMessage@topic^(0+128)
  4797  01E8  3098               	movlw	high (STR_9| (0+32768))
  4798  01E9  00BC               	movwf	(sendMessage@topic^(0+128)+1)
  4799  01EA  0022               	movlb	2	; select bank2
  4800  01EB  082D               	movf	_loop$1947^(0+256),w
  4801  01EC  0021               	movlb	1	; select bank1
  4802  01ED  00BD               	movwf	sendMessage@value^(0+128)
  4803  01EE  0022               	movlb	2	; select bank2
  4804  01EF  082E               	movf	(_loop$1947+1)^(0+256),w
  4805  01F0  0021               	movlb	1	; select bank1
  4806  01F1  00BE               	movwf	(sendMessage@value+1)^(0+128)
  4807  01F2  0022               	movlb	2	; select bank2
  4808  01F3  082F               	movf	(_loop$1947+2)^(0+256),w
  4809  01F4  0021               	movlb	1	; select bank1
  4810  01F5  00BF               	movwf	(sendMessage@value+2)^(0+128)
  4811  01F6  318A  226D  3180   	fcall	_sendMessage
  4812                           
  4813                           ;main.c: 160: n_RF_SETUP_t rfSetup;;main.c: 161: rfSetup.byte = nrf24l01Send((unsigned) 
      +                          0b00000000 | (unsigned) 0x06, 0);
  4814  01F9  0020               	movlb	0	; select bank0
  4815  01FA  01A0               	clrf	nrf24l01Send@data
  4816  01FB  3006               	movlw	6
  4817  01FC  3196  269B  3180   	fcall	_nrf24l01Send
  4818  01FF  0021               	movlb	1	; select bank1
  4819  0200  00C3               	movwf	??_loop^(0+128)
  4820  0201  0843               	movf	??_loop^(0+128),w
  4821  0202  0022               	movlb	2	; select bank2
  4822  0203  00AC               	movwf	loop@rfSetup^(0+256)
  4823                           
  4824                           ;main.c: 163: sendMessage(&packet, "RFPWR", rfSetup.RF_PWR);
  4825  0204  3030               	movlw	low loop@packet
  4826  0205  0021               	movlb	1	; select bank1
  4827  0206  00B9               	movwf	sendMessage@packet^(0+128)
  4828  0207  3001               	movlw	high loop@packet
  4829  0208  00BA               	movwf	(sendMessage@packet+1)^(0+128)
  4830  0209  3046               	movlw	low (STR_10| (0+32768))
  4831  020A  00BB               	movwf	sendMessage@topic^(0+128)
  4832  020B  3098               	movlw	high (STR_10| (0+32768))
  4833  020C  00BC               	movwf	(sendMessage@topic^(0+128)+1)
  4834  020D  0022               	movlb	2	; select bank2
  4835  020E  0C2C               	rrf	loop@rfSetup^(0+256),w
  4836  020F  3903               	andlw	3
  4837  0210  3195  25B6  3180   	fcall	___lbtoft
  4838  0213  0020               	movlb	0	; select bank0
  4839  0214  0828               	movf	?___lbtoft,w
  4840  0215  0021               	movlb	1	; select bank1
  4841  0216  00BD               	movwf	sendMessage@value^(0+128)
  4842  0217  0020               	movlb	0	; select bank0
  4843  0218  0829               	movf	?___lbtoft+1,w
  4844  0219  0021               	movlb	1	; select bank1
  4845  021A  00BE               	movwf	(sendMessage@value+1)^(0+128)
  4846  021B  0020               	movlb	0	; select bank0
  4847  021C  082A               	movf	?___lbtoft+2,w
  4848  021D  0021               	movlb	1	; select bank1
  4849  021E  00BF               	movwf	(sendMessage@value+2)^(0+128)
  4850  021F  318A  226D  3180   	fcall	_sendMessage
  4851                           
  4852                           ;main.c: 165: sendMessage(&packet, "DBG5", counter);
  4853  0222  0022               	movlb	2	; select bank2
  4854  0223  0854               	movf	(_counter+3)^(0+256),w
  4855  0224  0020               	movlb	0	; select bank0
  4856  0225  00AB               	movwf	___lltoft@c+3
  4857  0226  0022               	movlb	2	; select bank2
  4858  0227  0853               	movf	(_counter+2)^(0+256),w
  4859  0228  0020               	movlb	0	; select bank0
  4860  0229  00AA               	movwf	___lltoft@c+2
  4861  022A  0022               	movlb	2	; select bank2
  4862  022B  0852               	movf	(_counter+1)^(0+256),w
  4863  022C  0020               	movlb	0	; select bank0
  4864  022D  00A9               	movwf	___lltoft@c+1
  4865  022E  0022               	movlb	2	; select bank2
  4866  022F  0851               	movf	_counter^(0+256),w
  4867  0230  0020               	movlb	0	; select bank0
  4868  0231  00A8               	movwf	___lltoft@c
  4869  0232  3197  2747  3180   	fcall	___lltoft
  4870  0235  0020               	movlb	0	; select bank0
  4871  0236  0828               	movf	?___lltoft,w
  4872  0237  0022               	movlb	2	; select bank2
  4873  0238  00AD               	movwf	_loop$1947^(0+256)
  4874  0239  0020               	movlb	0	; select bank0
  4875  023A  0829               	movf	?___lltoft+1,w
  4876  023B  0022               	movlb	2	; select bank2
  4877  023C  00AE               	movwf	(_loop$1947+1)^(0+256)
  4878  023D  0020               	movlb	0	; select bank0
  4879  023E  082A               	movf	?___lltoft+2,w
  4880  023F  0022               	movlb	2	; select bank2
  4881  0240  00AF               	movwf	(_loop$1947+2)^(0+256)
  4882                           
  4883                           ;main.c: 165: sendMessage(&packet, "DBG5", counter);
  4884  0241  3030               	movlw	low loop@packet
  4885  0242  0021               	movlb	1	; select bank1
  4886  0243  00B9               	movwf	sendMessage@packet^(0+128)
  4887  0244  3001               	movlw	high loop@packet
  4888  0245  00BA               	movwf	(sendMessage@packet+1)^(0+128)
  4889  0246  3065               	movlw	low (STR_11| (0+32768))
  4890  0247  00BB               	movwf	sendMessage@topic^(0+128)
  4891  0248  3098               	movlw	high (STR_11| (0+32768))
  4892  0249  00BC               	movwf	(sendMessage@topic^(0+128)+1)
  4893  024A  0022               	movlb	2	; select bank2
  4894  024B  082D               	movf	_loop$1947^(0+256),w
  4895  024C  0021               	movlb	1	; select bank1
  4896  024D  00BD               	movwf	sendMessage@value^(0+128)
  4897  024E  0022               	movlb	2	; select bank2
  4898  024F  082E               	movf	(_loop$1947+1)^(0+256),w
  4899  0250  0021               	movlb	1	; select bank1
  4900  0251  00BE               	movwf	(sendMessage@value+1)^(0+128)
  4901  0252  0022               	movlb	2	; select bank2
  4902  0253  082F               	movf	(_loop$1947+2)^(0+256),w
  4903  0254  0021               	movlb	1	; select bank1
  4904  0255  00BF               	movwf	(sendMessage@value+2)^(0+128)
  4905  0256  318A  226D         	fcall	_sendMessage
  4906  0258  0008               	return
  4907  0259                     __end_of_loop:	
  4908                           
  4909                           	psect	text10
  4910  0A6D                     __ptext10:	
  4911 ;; *************** function _sendMessage *****************
  4912 ;; Defined at:
  4913 ;;		line 104 in file "main.c"
  4914 ;; Parameters:    Size  Location     Type
  4915 ;;  packet          2   25[BANK1 ] PTR struct .
  4916 ;;		 -> main@packet(33), loop@packet(33), 
  4917 ;;  topic           2   27[BANK1 ] PTR const unsigned char 
  4918 ;;		 -> STR_13(5), STR_11(5), STR_10(6), STR_9(5), 
  4919 ;;		 -> STR_8(5), STR_7(5), STR_6(7), STR_5(5), 
  4920 ;;		 -> STR_4(5), STR_3(5), 
  4921 ;;  value           3   29[BANK1 ] float 
  4922 ;; Auto vars:     Size  Location     Type
  4923 ;;  status          2   33[BANK1 ] int 
  4924 ;; Return value:  Size  Location     Type
  4925 ;;                  1    wreg      void 
  4926 ;; Registers used:
  4927 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4928 ;; Tracked objects:
  4929 ;;		On entry : 0/0
  4930 ;;		On exit  : 0/0
  4931 ;;		Unchanged: 0/0
  4932 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4933 ;;      Params:         0       0       7       0       0       0       0       0       0       0       0       0       
      +0       0
  4934 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  4935 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  4936 ;;      Totals:         0       0      10       0       0       0       0       0       0       0       0       0       
      +0       0
  4937 ;;Total ram usage:       10 bytes
  4938 ;; Hardware stack levels used:    1
  4939 ;; Hardware stack levels required when called:   13
  4940 ;; This function calls:
  4941 ;;		_ftoa
  4942 ;;		_nrf24l01SendPacket
  4943 ;;		_sleep
  4944 ;;		_strcat
  4945 ;;		_strcpy
  4946 ;; This function is called by:
  4947 ;;		_loop
  4948 ;;		_main
  4949 ;; This function uses a non-reentrant model
  4950 ;;
  4951                           
  4952                           
  4953                           ;psect for function _sendMessage
  4954  0A6D                     _sendMessage:	
  4955                           
  4956                           ;main.c: 106: int status;;main.c: 108: strcpy(packet->Message, romData->name);
  4957                           
  4958                           ;incstack = 0
  4959                           ; Regs used in _sendMessage: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4960  0A6D  0021               	movlb	1	; select bank1
  4961  0A6E  0839               	movf	sendMessage@packet^(0+128),w
  4962  0A6F  3E01               	addlw	1
  4963  0A70  0020               	movlb	0	; select bank0
  4964  0A71  00A0               	movwf	strcpy@to
  4965  0A72  3000               	movlw	0
  4966  0A73  0021               	movlb	1	; select bank1
  4967  0A74  3D3A               	addwfc	(sendMessage@packet+1)^(0+128),w
  4968  0A75  0020               	movlb	0	; select bank0
  4969  0A76  00A1               	movwf	strcpy@to+1
  4970  0A77  0021               	movlb	1	; select bank1
  4971  0A78  086D               	movf	_romData^(0+128),w
  4972  0A79  3E01               	addlw	1
  4973  0A7A  0020               	movlb	0	; select bank0
  4974  0A7B  00A2               	movwf	strcpy@from
  4975  0A7C  3001               	movlw	1
  4976  0A7D  00A3               	movwf	strcpy@from+1
  4977  0A7E  3195  25D1  318A   	fcall	_strcpy
  4978                           
  4979                           ;main.c: 109: strcat(packet->Message, "/");
  4980  0A81  0021               	movlb	1	; select bank1
  4981  0A82  0839               	movf	sendMessage@packet^(0+128),w
  4982  0A83  3E01               	addlw	1
  4983  0A84  00B3               	movwf	strcat@to^(0+128)
  4984  0A85  3000               	movlw	0
  4985  0A86  3D3A               	addwfc	(sendMessage@packet+1)^(0+128),w
  4986  0A87  00B4               	movwf	(strcat@to+1)^(0+128)
  4987  0A88  307D               	movlw	low (STR_1| (0+32768))
  4988  0A89  00B5               	movwf	strcat@from^(0+128)
  4989  0A8A  3098               	movlw	high (STR_1| (0+32768))
  4990  0A8B  00B6               	movwf	(strcat@from^(0+128)+1)
  4991  0A8C  3197  2720  318A   	fcall	_strcat
  4992                           
  4993                           ;main.c: 110: strcat(packet->Message, topic);
  4994  0A8F  0021               	movlb	1	; select bank1
  4995  0A90  0839               	movf	sendMessage@packet^(0+128),w
  4996  0A91  3E01               	addlw	1
  4997  0A92  00B3               	movwf	strcat@to^(0+128)
  4998  0A93  3000               	movlw	0
  4999  0A94  3D3A               	addwfc	(sendMessage@packet+1)^(0+128),w
  5000  0A95  00B4               	movwf	(strcat@to+1)^(0+128)
  5001  0A96  083C               	movf	(sendMessage@topic+1)^(0+128),w
  5002  0A97  00B6               	movwf	(strcat@from+1)^(0+128)
  5003  0A98  083B               	movf	sendMessage@topic^(0+128),w
  5004  0A99  00B5               	movwf	strcat@from^(0+128)
  5005  0A9A  3197  2720  318A   	fcall	_strcat
  5006                           
  5007                           ;main.c: 111: strcat(packet->Message, "/");
  5008  0A9D  0021               	movlb	1	; select bank1
  5009  0A9E  0839               	movf	sendMessage@packet^(0+128),w
  5010  0A9F  3E01               	addlw	1
  5011  0AA0  00B3               	movwf	strcat@to^(0+128)
  5012  0AA1  3000               	movlw	0
  5013  0AA2  3D3A               	addwfc	(sendMessage@packet+1)^(0+128),w
  5014  0AA3  00B4               	movwf	(strcat@to+1)^(0+128)
  5015  0AA4  307D               	movlw	low (STR_1| (0+32768))
  5016  0AA5  00B5               	movwf	strcat@from^(0+128)
  5017  0AA6  3098               	movlw	high (STR_1| (0+32768))
  5018  0AA7  00B6               	movwf	(strcat@from^(0+128)+1)
  5019  0AA8  3197  2720  318A   	fcall	_strcat
  5020                           
  5021                           ;main.c: 112: strcat(packet->Message, ftoa(value, &status));
  5022  0AAB  0021               	movlb	1	; select bank1
  5023  0AAC  0839               	movf	sendMessage@packet^(0+128),w
  5024  0AAD  3E01               	addlw	1
  5025  0AAE  00B3               	movwf	strcat@to^(0+128)
  5026  0AAF  3000               	movlw	0
  5027  0AB0  3D3A               	addwfc	(sendMessage@packet+1)^(0+128),w
  5028  0AB1  00B4               	movwf	(strcat@to+1)^(0+128)
  5029  0AB2  083D               	movf	sendMessage@value^(0+128),w
  5030  0AB3  00A6               	movwf	ftoa@f^(0+128)
  5031  0AB4  083E               	movf	(sendMessage@value+1)^(0+128),w
  5032  0AB5  00A7               	movwf	(ftoa@f+1)^(0+128)
  5033  0AB6  083F               	movf	(sendMessage@value+2)^(0+128),w
  5034  0AB7  00A8               	movwf	(ftoa@f+2)^(0+128)
  5035  0AB8  30C1               	movlw	(low (sendMessage@status| 0))& (0+255)
  5036  0AB9  00C0               	movwf	??_sendMessage^(0+128)
  5037  0ABA  0840               	movf	??_sendMessage^(0+128),w
  5038  0ABB  00A9               	movwf	ftoa@status^(0+128)
  5039  0ABC  318E  2618  318A   	fcall	_ftoa
  5040  0ABF  0021               	movlb	1	; select bank1
  5041  0AC0  00B5               	movwf	strcat@from^(0+128)
  5042  0AC1  3001               	movlw	1
  5043  0AC2  00B6               	movwf	(strcat@from+1)^(0+128)
  5044  0AC3  3197  2720  318A   	fcall	_strcat
  5045                           
  5046                           ;main.c: 117: packet->packetData.byte = 0;
  5047  0AC6  0021               	movlb	1	; select bank1
  5048  0AC7  0839               	movf	sendMessage@packet^(0+128),w
  5049  0AC8  0086               	movwf	6
  5050  0AC9  083A               	movf	(sendMessage@packet+1)^(0+128),w
  5051  0ACA  0087               	movwf	7
  5052  0ACB  0181               	clrf	1
  5053                           
  5054                           ;main.c: 118: packet->packetData.ACKRequest = 1;
  5055  0ACC  0839               	movf	sendMessage@packet^(0+128),w
  5056  0ACD  0086               	movwf	6
  5057  0ACE  083A               	movf	(sendMessage@packet+1)^(0+128),w
  5058  0ACF  0087               	movwf	7
  5059  0AD0  1501               	bsf	1,2
  5060                           
  5061                           ;main.c: 120: nrf24l01SendPacket(packet);
  5062  0AD1  083A               	movf	(sendMessage@packet+1)^(0+128),w
  5063  0AD2  0020               	movlb	0	; select bank0
  5064  0AD3  00AE               	movwf	nrf24l01SendPacket@txPacket+1
  5065  0AD4  0021               	movlb	1	; select bank1
  5066  0AD5  0839               	movf	sendMessage@packet^(0+128),w
  5067  0AD6  0020               	movlb	0	; select bank0
  5068  0AD7  00AD               	movwf	nrf24l01SendPacket@txPacket
  5069  0AD8  3197  2771  318A   	fcall	_nrf24l01SendPacket
  5070                           
  5071                           ;main.c: 122: sleep(2000);
  5072  0ADB  30D0               	movlw	208
  5073  0ADC  0020               	movlb	0	; select bank0
  5074  0ADD  00A2               	movwf	sleep@milliseconds
  5075  0ADE  3007               	movlw	7
  5076  0ADF  00A3               	movwf	sleep@milliseconds+1
  5077  0AE0  3196  26FE         	fcall	_sleep
  5078  0AE2  0008               	return
  5079  0AE3                     __end_of_sendMessage:	
  5080                           
  5081                           	psect	text11
  5082  15D1                     __ptext11:	
  5083 ;; *************** function _strcpy *****************
  5084 ;; Defined at:
  5085 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\strcpy.c"
  5086 ;; Parameters:    Size  Location     Type
  5087 ;;  to              2    0[BANK0 ] PTR unsigned char 
  5088 ;;		 -> main@packet(33), loop@packet(33), romDataMap(28), 
  5089 ;;  from            2    2[BANK0 ] PTR const unsigned char 
  5090 ;;		 -> romDataMap.name(16), STR_12(4), romDataMap(28), 
  5091 ;; Auto vars:     Size  Location     Type
  5092 ;;  cp              2    4[BANK0 ] PTR unsigned char 
  5093 ;;		 -> main@packet(33), loop@packet(33), romDataMap(28), 
  5094 ;; Return value:  Size  Location     Type
  5095 ;;                  2    0[BANK0 ] PTR unsigned char 
  5096 ;; Registers used:
  5097 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, pclath
  5098 ;; Tracked objects:
  5099 ;;		On entry : 0/0
  5100 ;;		On exit  : 0/0
  5101 ;;		Unchanged: 0/0
  5102 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5103 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5104 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5105 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5106 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5107 ;;Total ram usage:        6 bytes
  5108 ;; Hardware stack levels used:    1
  5109 ;; Hardware stack levels required when called:    7
  5110 ;; This function calls:
  5111 ;;		Nothing
  5112 ;; This function is called by:
  5113 ;;		_sendMessage
  5114 ;;		_main
  5115 ;; This function uses a non-reentrant model
  5116 ;;
  5117                           
  5118                           
  5119                           ;psect for function _strcpy
  5120  15D1                     _strcpy:	
  5121                           
  5122                           ;incstack = 0
  5123                           ; Regs used in _strcpy: [wreg-fsr1h+pclath]
  5124  15D1  0020               	movlb	0	; select bank0
  5125  15D2  0821               	movf	strcpy@to+1,w
  5126  15D3  00A5               	movwf	strcpy@cp+1
  5127  15D4  0820               	movf	strcpy@to,w
  5128  15D5  00A4               	movwf	strcpy@cp
  5129  15D6                     l2808:	
  5130  15D6  0824               	movf	strcpy@cp,w
  5131  15D7  0086               	movwf	6
  5132  15D8  0825               	movf	strcpy@cp+1,w
  5133  15D9  0087               	movwf	7
  5134  15DA  0822               	movf	strcpy@from,w
  5135  15DB  0084               	movwf	4
  5136  15DC  0823               	movf	strcpy@from+1,w
  5137  15DD  0085               	movwf	5
  5138  15DE  0800               	movf	0,w	;code access
  5139  15DF  3FC0               	movwi [0]fsr1
  5140  15E0  0889               	movf	9,f
  5141  15E1  1903               	btfsc	3,2
  5142  15E2  0008               	return
  5143  15E3  3001               	movlw	1
  5144  15E4  07A4               	addwf	strcpy@cp,f
  5145  15E5  3000               	movlw	0
  5146  15E6  3DA5               	addwfc	strcpy@cp+1,f
  5147  15E7  3001               	movlw	1
  5148  15E8  07A2               	addwf	strcpy@from,f
  5149  15E9  3000               	movlw	0
  5150  15EA  3DA3               	addwfc	strcpy@from+1,f
  5151  15EB  2DD6               	goto	l2808
  5152  15EC                     __end_of_strcpy:	
  5153                           ;	Return value of _strcpy is never used
  5154                           
  5155                           
  5156                           	psect	text12
  5157  1720                     __ptext12:	
  5158 ;; *************** function _strcat *****************
  5159 ;; Defined at:
  5160 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\strcat.c"
  5161 ;; Parameters:    Size  Location     Type
  5162 ;;  to              2   19[BANK1 ] PTR unsigned char 
  5163 ;;		 -> main@packet(33), loop@packet(33), 
  5164 ;;  from            2   21[BANK1 ] PTR const unsigned char 
  5165 ;;		 -> ftoa@buf(17), STR_13(5), STR_11(5), STR_10(6), 
  5166 ;;		 -> STR_9(5), STR_8(5), STR_7(5), STR_6(7), 
  5167 ;;		 -> STR_5(5), STR_4(5), STR_3(5), STR_2(2), 
  5168 ;;		 -> STR_1(2), 
  5169 ;; Auto vars:     Size  Location     Type
  5170 ;;  cp              2   23[BANK1 ] PTR unsigned char 
  5171 ;;		 -> main@packet(33), loop@packet(33), 
  5172 ;; Return value:  Size  Location     Type
  5173 ;;                  2   19[BANK1 ] PTR unsigned char 
  5174 ;; Registers used:
  5175 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath
  5176 ;; Tracked objects:
  5177 ;;		On entry : 0/0
  5178 ;;		On exit  : 0/0
  5179 ;;		Unchanged: 0/0
  5180 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5181 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  5182 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  5183 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5184 ;;      Totals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0
  5185 ;;Total ram usage:        6 bytes
  5186 ;; Hardware stack levels used:    1
  5187 ;; Hardware stack levels required when called:    7
  5188 ;; This function calls:
  5189 ;;		Nothing
  5190 ;; This function is called by:
  5191 ;;		_sendMessage
  5192 ;; This function uses a non-reentrant model
  5193 ;;
  5194                           
  5195                           
  5196                           ;psect for function _strcat
  5197  1720                     _strcat:	
  5198                           
  5199                           ;incstack = 0
  5200                           ; Regs used in _strcat: [wreg-fsr1h+status,2+status,0+pclath]
  5201  1720  0021               	movlb	1	; select bank1
  5202  1721  0834               	movf	(strcat@to+1)^(0+128),w
  5203  1722  00B8               	movwf	(strcat@cp+1)^(0+128)
  5204  1723  0833               	movf	strcat@to^(0+128),w
  5205  1724  00B7               	movwf	strcat@cp^(0+128)
  5206  1725                     l2814:	
  5207  1725  0837               	movf	strcat@cp^(0+128),w
  5208  1726  0086               	movwf	6
  5209  1727  0838               	movf	(strcat@cp+1)^(0+128),w
  5210  1728  0087               	movwf	7
  5211  1729  0801               	movf	1,w
  5212  172A  1903               	btfsc	3,2
  5213  172B  2F39               	goto	l2818
  5214  172C  3001               	movlw	1
  5215  172D  07B7               	addwf	strcat@cp^(0+128),f
  5216  172E  3000               	movlw	0
  5217  172F  3DB8               	addwfc	(strcat@cp+1)^(0+128),f
  5218  1730  2F25               	goto	l2814
  5219  1731                     l2816:	
  5220  1731  3001               	movlw	1
  5221  1732  07B7               	addwf	strcat@cp^(0+128),f
  5222  1733  3000               	movlw	0
  5223  1734  3DB8               	addwfc	(strcat@cp+1)^(0+128),f
  5224  1735  3001               	movlw	1
  5225  1736  07B5               	addwf	strcat@from^(0+128),f
  5226  1737  3000               	movlw	0
  5227  1738  3DB6               	addwfc	(strcat@from+1)^(0+128),f
  5228  1739                     l2818:	
  5229  1739  0837               	movf	strcat@cp^(0+128),w
  5230  173A  0086               	movwf	6
  5231  173B  0838               	movf	(strcat@cp+1)^(0+128),w
  5232  173C  0087               	movwf	7
  5233  173D  0835               	movf	strcat@from^(0+128),w
  5234  173E  0084               	movwf	4
  5235  173F  0836               	movf	(strcat@from+1)^(0+128),w
  5236  1740  0085               	movwf	5
  5237  1741  0800               	movf	0,w	;code access
  5238  1742  3FC0               	movwi [0]fsr1
  5239  1743  0889               	movf	9,f
  5240  1744  1903               	btfsc	3,2
  5241  1745  0008               	return
  5242  1746  2F31               	goto	l2816
  5243  1747                     __end_of_strcat:	
  5244                           ;	Return value of _strcat is never used
  5245                           
  5246                           
  5247                           	psect	text13
  5248  16FE                     __ptext13:	
  5249 ;; *************** function _sleep *****************
  5250 ;; Defined at:
  5251 ;;		line 78 in file "main.c"
  5252 ;; Parameters:    Size  Location     Type
  5253 ;;  milliseconds    2    2[BANK0 ] unsigned int 
  5254 ;; Auto vars:     Size  Location     Type
  5255 ;;		None
  5256 ;; Return value:  Size  Location     Type
  5257 ;;                  1    wreg      void 
  5258 ;; Registers used:
  5259 ;;		wreg, status,2, status,0, pclath, cstack
  5260 ;; Tracked objects:
  5261 ;;		On entry : 0/0
  5262 ;;		On exit  : 0/0
  5263 ;;		Unchanged: 0/0
  5264 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5265 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5266 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5267 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5268 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5269 ;;Total ram usage:        4 bytes
  5270 ;; Hardware stack levels used:    1
  5271 ;; Hardware stack levels required when called:    8
  5272 ;; This function calls:
  5273 ;;		_doWDTSleep
  5274 ;; This function is called by:
  5275 ;;		_sendMessage
  5276 ;; This function uses a non-reentrant model
  5277 ;;
  5278                           
  5279                           
  5280                           ;psect for function _sleep
  5281  16FE                     _sleep:	
  5282                           
  5283                           ;main.c: 81: milliseconds = (unsigned int) (milliseconds / (128 + 128));
  5284                           
  5285                           ;incstack = 0
  5286                           ; Regs used in _sleep: [wreg+status,2+status,0+pclath+cstack]
  5287  16FE  0020               	movlb	0	; select bank0
  5288  16FF  0823               	movf	sleep@milliseconds+1,w
  5289  1700  00A5               	movwf	??_sleep+1
  5290  1701  0822               	movf	sleep@milliseconds,w
  5291  1702  00A4               	movwf	??_sleep
  5292  1703  0825               	movf	??_sleep+1,w
  5293  1704  00A4               	movwf	??_sleep
  5294  1705  01A5               	clrf	??_sleep+1
  5295  1706  0824               	movf	??_sleep,w
  5296  1707  00A2               	movwf	sleep@milliseconds
  5297  1708  0825               	movf	??_sleep+1,w
  5298  1709  00A3               	movwf	sleep@milliseconds+1
  5299                           
  5300                           ;main.c: 84: milliseconds++;
  5301  170A  3001               	movlw	1
  5302  170B  07A2               	addwf	sleep@milliseconds,f
  5303  170C  3000               	movlw	0
  5304  170D  3DA3               	addwfc	sleep@milliseconds+1,f
  5305  170E                     l2802:	
  5306                           ;main.c: 87: while (--milliseconds){
  5307                           
  5308  170E  3001               	movlw	1
  5309  170F  0020               	movlb	0	; select bank0
  5310  1710  02A2               	subwf	sleep@milliseconds,f
  5311  1711  3000               	movlw	0
  5312  1712  3BA3               	subwfb	sleep@milliseconds+1,f
  5313  1713  0822               	movf	sleep@milliseconds,w
  5314  1714  0423               	iorwf	sleep@milliseconds+1,w
  5315  1715  1903               	btfsc	3,2
  5316  1716  0008               	return
  5317                           
  5318                           ;main.c: 93: doWDTSleep(0b00111);
  5319  1717  3007               	movlw	7
  5320  1718  3195  2569  3196   	fcall	_doWDTSleep
  5321                           
  5322                           ;main.c: 99: doWDTSleep(0b00111);
  5323  171B  3007               	movlw	7
  5324  171C  3195  2569  3196   	fcall	_doWDTSleep
  5325  171F  2F0E               	goto	l2802
  5326  1720                     __end_of_sleep:	
  5327                           
  5328                           	psect	text14
  5329  1771                     __ptext14:	
  5330 ;; *************** function _nrf24l01SendPacket *****************
  5331 ;; Defined at:
  5332 ;;		line 218 in file "nrf24l01.c"
  5333 ;; Parameters:    Size  Location     Type
  5334 ;;  txPacket        2   13[BANK0 ] PTR struct .
  5335 ;;		 -> main@packet(33), loop@packet(33), 
  5336 ;; Auto vars:     Size  Location     Type
  5337 ;;		None
  5338 ;; Return value:  Size  Location     Type
  5339 ;;                  2   13[BANK0 ] unsigned int 
  5340 ;; Registers used:
  5341 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5342 ;; Tracked objects:
  5343 ;;		On entry : 0/0
  5344 ;;		On exit  : 0/0
  5345 ;;		Unchanged: 0/0
  5346 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5347 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5348 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5349 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5350 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5351 ;;Total ram usage:        3 bytes
  5352 ;; Hardware stack levels used:    1
  5353 ;; Hardware stack levels required when called:   12
  5354 ;; This function calls:
  5355 ;;		_nrf24l01Service
  5356 ;; This function is called by:
  5357 ;;		_sendMessage
  5358 ;; This function uses a non-reentrant model
  5359 ;;
  5360                           
  5361                           
  5362                           ;psect for function _nrf24l01SendPacket
  5363  1771                     _nrf24l01SendPacket:	
  5364                           
  5365                           ;nrf24l01.c: 220: nrf24l01Service();
  5366                           
  5367                           ;incstack = 0
  5368                           ; Regs used in _nrf24l01SendPacket: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5369  1771  3184  2426  3197   	fcall	_nrf24l01Service
  5370                           
  5371                           ;nrf24l01.c: 222: if (status.TX == statuses.TX.Idle){
  5372  1774  3034               	movlw	low (_statuses| (0+32768))
  5373  1775  0084               	movwf	4
  5374  1776  3098               	movlw	high (_statuses| (0+32768))
  5375  1777  0085               	movwf	5
  5376  1778  0800               	movf	0,w	;code access
  5377  1779  0020               	movlb	0	; select bank0
  5378  177A  00AF               	movwf	??_nrf24l01SendPacket
  5379  177B  0021               	movlb	1	; select bank1
  5380  177C  0867               	movf	_status^(0+128),w	;volatile
  5381  177D  390F               	andlw	15
  5382  177E  0020               	movlb	0	; select bank0
  5383  177F  062F               	xorwf	??_nrf24l01SendPacket,w
  5384  1780  1D03               	skipz
  5385  1781  0008               	return
  5386                           
  5387                           ;nrf24l01.c: 224: TXPacket = txPacket;
  5388  1782  082E               	movf	nrf24l01SendPacket@txPacket+1,w
  5389  1783  0021               	movlb	1	; select bank1
  5390  1784  00EB               	movwf	(_TXPacket+1)^(0+128)
  5391  1785  0020               	movlb	0	; select bank0
  5392  1786  082D               	movf	nrf24l01SendPacket@txPacket,w
  5393  1787  0021               	movlb	1	; select bank1
  5394  1788  00EA               	movwf	_TXPacket^(0+128)
  5395                           
  5396                           ;nrf24l01.c: 225: status.TX = statuses.TX.Ready;
  5397  1789  3035               	movlw	low ((_statuses+1)| (0+32768))
  5398  178A  0084               	movwf	4
  5399  178B  3098               	movlw	high ((_statuses+1)| (0+32768))
  5400  178C  0085               	movwf	5
  5401  178D  0800               	movf	0,w	;code access
  5402  178E  0020               	movlb	0	; select bank0
  5403  178F  00AF               	movwf	??_nrf24l01SendPacket
  5404  1790  0021               	movlb	1	; select bank1
  5405  1791  0867               	movf	_status^(0+128),w	;volatile
  5406  1792  0020               	movlb	0	; select bank0
  5407  1793  062F               	xorwf	??_nrf24l01SendPacket,w
  5408  1794  39F0               	andlw	-16
  5409  1795  062F               	xorwf	??_nrf24l01SendPacket,w
  5410  1796  0021               	movlb	1	; select bank1
  5411  1797  00E7               	movwf	_status^(0+128)	;volatile
  5412                           
  5413                           ;nrf24l01.c: 227: nrf24l01Service();
  5414  1798  3184  2426         	fcall	_nrf24l01Service
  5415                           
  5416                           ;nrf24l01.c: 229: return 1;;	Return value of _nrf24l01SendPacket is never used
  5417  179A  0008               	return
  5418  179B                     __end_of_nrf24l01SendPacket:	
  5419                           ;nrf24l01.c: 230: };nrf24l01.c: 232: return 0;;	Return value of _nrf24l01SendPacket is n
      +                          ever used
  5420                           
  5421                           
  5422                           	psect	text15
  5423  0426                     __ptext15:	
  5424 ;; *************** function _nrf24l01Service *****************
  5425 ;; Defined at:
  5426 ;;		line 269 in file "nrf24l01.c"
  5427 ;; Parameters:    Size  Location     Type
  5428 ;;		None
  5429 ;; Auto vars:     Size  Location     Type
  5430 ;;  width           1   11[BANK0 ] unsigned char 
  5431 ;;  i               1   12[BANK0 ] unsigned char 
  5432 ;; Return value:  Size  Location     Type
  5433 ;;                  1    wreg      void 
  5434 ;; Registers used:
  5435 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5436 ;; Tracked objects:
  5437 ;;		On entry : 0/0
  5438 ;;		On exit  : 0/0
  5439 ;;		Unchanged: 0/0
  5440 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5441 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5442 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5443 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5444 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5445 ;;Total ram usage:        6 bytes
  5446 ;; Hardware stack levels used:    1
  5447 ;; Hardware stack levels required when called:   11
  5448 ;; This function calls:
  5449 ;;		_memset
  5450 ;;		_nrf24l01CEHigh
  5451 ;;		_nrf24l01CELow
  5452 ;;		_nrf24l01SPIEnd
  5453 ;;		_nrf24l01SPISend
  5454 ;;		_nrf24l01SPIStart
  5455 ;;		_nrf24l01Send
  5456 ;;		_nrf24l01SetRXMode
  5457 ;;		_strlen
  5458 ;; This function is called by:
  5459 ;;		_nrf24l01SendPacket
  5460 ;; This function uses a non-reentrant model
  5461 ;;
  5462                           
  5463                           
  5464                           ;psect for function _nrf24l01Service
  5465  0426                     _nrf24l01Service:	
  5466                           
  5467                           ;nrf24l01.c: 271: unsigned char i;;nrf24l01.c: 273: if (status.TX == statuses.TX.Ready){
  5468                           
  5469                           ;incstack = 0
  5470                           ; Regs used in _nrf24l01Service: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5471  0426  3035               	movlw	low ((_statuses+1)| (0+32768))
  5472  0427  0084               	movwf	4
  5473  0428  3098               	movlw	high ((_statuses+1)| (0+32768))
  5474  0429  0085               	movwf	5
  5475  042A  0800               	movf	0,w	;code access
  5476  042B  0020               	movlb	0	; select bank0
  5477  042C  00A7               	movwf	??_nrf24l01Service
  5478  042D  0021               	movlb	1	; select bank1
  5479  042E  0867               	movf	_status^(0+128),w	;volatile
  5480  042F  390F               	andlw	15
  5481  0430  0020               	movlb	0	; select bank0
  5482  0431  0627               	xorwf	??_nrf24l01Service,w
  5483  0432  1D03               	skipz
  5484  0433  2CA0               	goto	l2482
  5485                           
  5486                           ;nrf24l01.c: 276: nrf24l01SetRXMode(0);
  5487  0434  3000               	movlw	0
  5488  0435  3189  21A9  3184   	fcall	_nrf24l01SetRXMode
  5489                           
  5490                           ;nrf24l01.c: 279: nrf24l01SPIStart();
  5491  0438  3195  252A  3184   	fcall	_nrf24l01SPIStart
  5492                           
  5493                           ;nrf24l01.c: 282: nrf24l01SPISend((unsigned) 0b10110000);
  5494  043B  30B0               	movlw	176
  5495  043C  3195  253B  3184   	fcall	_nrf24l01SPISend
  5496                           
  5497                           ;nrf24l01.c: 284: nrf24l01SPISend(TXPacket->packetData.byte);
  5498  043F  0021               	movlb	1	; select bank1
  5499  0440  086A               	movf	_TXPacket^(0+128),w
  5500  0441  0086               	movwf	6
  5501  0442  086B               	movf	(_TXPacket+1)^(0+128),w
  5502  0443  0087               	movwf	7
  5503  0444  0801               	movf	1,w
  5504  0445  3195  253B  3184   	fcall	_nrf24l01SPISend
  5505                           
  5506                           ;nrf24l01.c: 287: for (i = 0; (i < strlen(TXPacket->Message)) && (i < 31); i++) {
  5507  0448  0020               	movlb	0	; select bank0
  5508  0449  01AC               	clrf	nrf24l01Service@i
  5509  044A  2C64               	goto	l2466
  5510  044B                     l2462:	
  5511                           
  5512                           ;nrf24l01.c: 288: nrf24l01SPISend(TXPacket->Message[i]);
  5513  044B  082C               	movf	nrf24l01Service@i,w
  5514  044C  3E01               	addlw	1
  5515  044D  00A7               	movwf	??_nrf24l01Service
  5516  044E  3000               	movlw	0
  5517  044F  1803               	skipnc
  5518  0450  3001               	movlw	1
  5519  0451  00A8               	movwf	??_nrf24l01Service+1
  5520  0452  0827               	movf	??_nrf24l01Service,w
  5521  0453  0021               	movlb	1	; select bank1
  5522  0454  076A               	addwf	_TXPacket^(0+128),w
  5523  0455  0086               	movwf	6
  5524  0456  0020               	movlb	0	; select bank0
  5525  0457  0828               	movf	??_nrf24l01Service+1,w
  5526  0458  0021               	movlb	1	; select bank1
  5527  0459  3D6B               	addwfc	(_TXPacket+1)^(0+128),w
  5528  045A  0087               	movwf	7
  5529  045B  0801               	movf	1,w
  5530  045C  3195  253B  3184   	fcall	_nrf24l01SPISend
  5531  045F  3001               	movlw	1
  5532  0460  0020               	movlb	0	; select bank0
  5533  0461  00A7               	movwf	??_nrf24l01Service
  5534  0462  0827               	movf	??_nrf24l01Service,w
  5535  0463  07AC               	addwf	nrf24l01Service@i,f
  5536  0464                     l2466:	
  5537  0464  0021               	movlb	1	; select bank1
  5538  0465  086A               	movf	_TXPacket^(0+128),w
  5539  0466  3E01               	addlw	1
  5540  0467  0020               	movlb	0	; select bank0
  5541  0468  00A7               	movwf	??_nrf24l01Service
  5542  0469  3000               	movlw	0
  5543  046A  0021               	movlb	1	; select bank1
  5544  046B  3D6B               	addwfc	(_TXPacket+1)^(0+128),w
  5545  046C  0020               	movlb	0	; select bank0
  5546  046D  00A8               	movwf	??_nrf24l01Service+1
  5547  046E  0827               	movf	??_nrf24l01Service,w
  5548  046F  00A0               	movwf	strlen@s
  5549  0470  0828               	movf	??_nrf24l01Service+1,w
  5550  0471  00A1               	movwf	strlen@s+1
  5551  0472  3196  267C  3184   	fcall	_strlen
  5552  0475  0020               	movlb	0	; select bank0
  5553  0476  082C               	movf	nrf24l01Service@i,w
  5554  0477  00A9               	movwf	??_nrf24l01Service+2
  5555  0478  01AA               	clrf	??_nrf24l01Service+3
  5556  0479  0821               	movf	?_strlen+1,w
  5557  047A  022A               	subwf	??_nrf24l01Service+3,w
  5558  047B  1D03               	skipz
  5559  047C  2C7F               	goto	u2425
  5560  047D  0820               	movf	?_strlen,w
  5561  047E  0229               	subwf	??_nrf24l01Service+2,w
  5562  047F                     u2425:	
  5563  047F  1803               	skipnc
  5564  0480  2C85               	goto	l2470
  5565  0481  301F               	movlw	31
  5566  0482  022C               	subwf	nrf24l01Service@i,w
  5567  0483  1C03               	skipc
  5568  0484  2C4B               	goto	l2462
  5569  0485                     l2470:	
  5570                           
  5571                           ;nrf24l01.c: 289: };nrf24l01.c: 292: nrf24l01SPIEnd();
  5572  0485  3195  251B  3184   	fcall	_nrf24l01SPIEnd
  5573                           
  5574                           ;nrf24l01.c: 295: status.TX = statuses.TX.Sending;
  5575  0488  3036               	movlw	low ((_statuses+2)| (0+32768))
  5576  0489  0084               	movwf	4
  5577  048A  3098               	movlw	high ((_statuses+2)| (0+32768))
  5578  048B  0085               	movwf	5
  5579  048C  0800               	movf	0,w	;code access
  5580  048D  0020               	movlb	0	; select bank0
  5581  048E  00A7               	movwf	??_nrf24l01Service
  5582  048F  0021               	movlb	1	; select bank1
  5583  0490  0867               	movf	_status^(0+128),w	;volatile
  5584  0491  0020               	movlb	0	; select bank0
  5585  0492  0627               	xorwf	??_nrf24l01Service,w
  5586  0493  39F0               	andlw	-16
  5587  0494  0627               	xorwf	??_nrf24l01Service,w
  5588  0495  0021               	movlb	1	; select bank1
  5589  0496  00E7               	movwf	_status^(0+128)	;volatile
  5590                           
  5591                           ;nrf24l01.c: 298: nrf24l01CEHigh();
  5592  0497  3195  250C  3184   	fcall	_nrf24l01CEHigh
  5593                           
  5594                           ;nrf24l01.c: 299: _delay((unsigned long)((12)*(32000000/4000000.0)));
  5595  049A  3020               	movlw	32
  5596  049B                     u3587:	
  5597  049B  0B89               	decfsz	9,f
  5598  049C  2C9B               	goto	u3587
  5599                           
  5600                           ;nrf24l01.c: 300: nrf24l01CELow();
  5601  049D  3195  250F  3184   	fcall	_nrf24l01CELow
  5602  04A0                     l2482:	
  5603                           
  5604                           ;nrf24l01.c: 306: };nrf24l01.c: 308: if (status.TX == statuses.TX.Sent){
  5605  04A0  3037               	movlw	low ((_statuses+3)| (0+32768))
  5606  04A1  0084               	movwf	4
  5607  04A2  3098               	movlw	high ((_statuses+3)| (0+32768))
  5608  04A3  0085               	movwf	5
  5609  04A4  0800               	movf	0,w	;code access
  5610  04A5  0020               	movlb	0	; select bank0
  5611  04A6  00A7               	movwf	??_nrf24l01Service
  5612  04A7  0021               	movlb	1	; select bank1
  5613  04A8  0867               	movf	_status^(0+128),w	;volatile
  5614  04A9  390F               	andlw	15
  5615  04AA  0020               	movlb	0	; select bank0
  5616  04AB  0627               	xorwf	??_nrf24l01Service,w
  5617  04AC  1D03               	skipz
  5618  04AD  2CC8               	goto	l286
  5619                           
  5620                           ;nrf24l01.c: 311: if (TXPacket->packetData.ACKRequest){
  5621  04AE  0021               	movlb	1	; select bank1
  5622  04AF  086A               	movf	_TXPacket^(0+128),w
  5623  04B0  0086               	movwf	6
  5624  04B1  086B               	movf	(_TXPacket+1)^(0+128),w
  5625  04B2  0087               	movwf	7
  5626  04B3  1D01               	btfss	1,2
  5627  04B4  2CB9               	goto	l2488
  5628                           
  5629                           ;nrf24l01.c: 312: status.TX = statuses.TX.PendingACK;
  5630  04B5  3038               	movlw	low ((_statuses+4)| (0+32768))
  5631  04B6  0084               	movwf	4
  5632  04B7  3098               	movlw	high ((_statuses+4)| (0+32768))
  5633  04B8  2CBC               	goto	L1
  5634  04B9                     l2488:	
  5635                           ;nrf24l01.c: 313: }
  5636                           
  5637                           
  5638                           ;nrf24l01.c: 316: else{;nrf24l01.c: 317: status.TX = statuses.TX.Idle;
  5639  04B9  3034               	movlw	low (_statuses| (0+32768))
  5640  04BA  0084               	movwf	4
  5641  04BB  3098               	movlw	high (_statuses| (0+32768))
  5642  04BC                     L1:	
  5643  04BC  0085               	movwf	5
  5644  04BD  0800               	movf	0,w	;code access
  5645  04BE  0020               	movlb	0	; select bank0
  5646  04BF  00A7               	movwf	??_nrf24l01Service
  5647  04C0  0021               	movlb	1	; select bank1
  5648  04C1  0867               	movf	_status^(0+128),w	;volatile
  5649  04C2  0020               	movlb	0	; select bank0
  5650  04C3  0627               	xorwf	??_nrf24l01Service,w
  5651  04C4  39F0               	andlw	-16
  5652  04C5  0627               	xorwf	??_nrf24l01Service,w
  5653  04C6  0021               	movlb	1	; select bank1
  5654  04C7  00E7               	movwf	_status^(0+128)	;volatile
  5655  04C8                     l286:	
  5656                           
  5657                           ;nrf24l01.c: 318: };nrf24l01.c: 319: };nrf24l01.c: 322: if (status.TX == statuses.TX.Pen
      +                          dingACK){
  5658  04C8  3038               	movlw	low ((_statuses+4)| (0+32768))
  5659  04C9  0084               	movwf	4
  5660  04CA  3098               	movlw	high ((_statuses+4)| (0+32768))
  5661  04CB  0085               	movwf	5
  5662  04CC  0800               	movf	0,w	;code access
  5663  04CD  0020               	movlb	0	; select bank0
  5664  04CE  00A7               	movwf	??_nrf24l01Service
  5665  04CF  0021               	movlb	1	; select bank1
  5666  04D0  0867               	movf	_status^(0+128),w	;volatile
  5667  04D1  390F               	andlw	15
  5668  04D2  0020               	movlb	0	; select bank0
  5669  04D3  0627               	xorwf	??_nrf24l01Service,w
  5670  04D4  1D03               	skipz
  5671  04D5  2CE4               	goto	l289
  5672                           
  5673                           ;nrf24l01.c: 329: status.TX = statuses.TX.Idle;
  5674  04D6  3034               	movlw	low (_statuses| (0+32768))
  5675  04D7  0084               	movwf	4
  5676  04D8  3098               	movlw	high (_statuses| (0+32768))
  5677  04D9  0085               	movwf	5
  5678  04DA  0800               	movf	0,w	;code access
  5679  04DB  00A7               	movwf	??_nrf24l01Service
  5680  04DC  0021               	movlb	1	; select bank1
  5681  04DD  0867               	movf	_status^(0+128),w	;volatile
  5682  04DE  0020               	movlb	0	; select bank0
  5683  04DF  0627               	xorwf	??_nrf24l01Service,w
  5684  04E0  39F0               	andlw	-16
  5685  04E1  0627               	xorwf	??_nrf24l01Service,w
  5686  04E2  0021               	movlb	1	; select bank1
  5687  04E3  00E7               	movwf	_status^(0+128)	;volatile
  5688  04E4                     l289:	
  5689                           
  5690                           ;nrf24l01.c: 330: };nrf24l01.c: 332: if (status.RX == statuses.RX.Pending){
  5691  04E4  303A               	movlw	low ((_statuses+6)| (0+32768))
  5692  04E5  0084               	movwf	4
  5693  04E6  3098               	movlw	high ((_statuses+6)| (0+32768))
  5694  04E7  0085               	movwf	5
  5695  04E8  0800               	movf	0,w	;code access
  5696  04E9  0020               	movlb	0	; select bank0
  5697  04EA  00A7               	movwf	??_nrf24l01Service
  5698  04EB  0021               	movlb	1	; select bank1
  5699  04EC  0E67               	swapf	_status^(0+128),w	;volatile
  5700  04ED  390F               	andlw	15
  5701  04EE  0020               	movlb	0	; select bank0
  5702  04EF  0627               	xorwf	??_nrf24l01Service,w
  5703  04F0  1D03               	skipz
  5704  04F1  0008               	return
  5705                           
  5706                           ;nrf24l01.c: 335: memset(RXPacket.Message, 0 ,sizeof(RXPacket.Message));
  5707  04F2  3000               	movlw	0
  5708  04F3  00A0               	movwf	memset@c
  5709  04F4  00A1               	movwf	memset@c+1
  5710  04F5  3020               	movlw	32
  5711  04F6  00A2               	movwf	memset@n
  5712  04F7  3000               	movlw	0
  5713  04F8  00A3               	movwf	memset@n+1
  5714  04F9  30A1               	movlw	(low ((_RXPacket| (0+256)+1)))& (0+255)
  5715  04FA  3196  2608  3184   	fcall	_memset
  5716                           
  5717                           ;nrf24l01.c: 336: RXPacket.packetData.byte = 0x00;
  5718  04FD  0023               	movlb	3	; select bank3
  5719  04FE  01A0               	clrf	_RXPacket^(0+384)
  5720                           
  5721                           ;nrf24l01.c: 339: unsigned char width = nrf24l01Send((unsigned) 0b01100000, 0);
  5722  04FF  0020               	movlb	0	; select bank0
  5723  0500  01A0               	clrf	nrf24l01Send@data
  5724  0501  3060               	movlw	96
  5725  0502  3196  269B  3184   	fcall	_nrf24l01Send
  5726  0505  0020               	movlb	0	; select bank0
  5727  0506  00A7               	movwf	??_nrf24l01Service
  5728  0507  0827               	movf	??_nrf24l01Service,w
  5729  0508  00AB               	movwf	nrf24l01Service@width
  5730                           
  5731                           ;nrf24l01.c: 342: nrf24l01CELow();
  5732  0509  3195  250F  3184   	fcall	_nrf24l01CELow
  5733                           
  5734                           ;nrf24l01.c: 345: nrf24l01SPIStart();
  5735  050C  3195  252A  3184   	fcall	_nrf24l01SPIStart
  5736                           
  5737                           ;nrf24l01.c: 348: nrf24l01SPISend((unsigned) 0b01100001);
  5738  050F  3061               	movlw	97
  5739  0510  3195  253B  3184   	fcall	_nrf24l01SPISend
  5740                           
  5741                           ;nrf24l01.c: 351: RXPacket.packetData.byte = nrf24l01SPISend(0);
  5742  0513  3000               	movlw	0
  5743  0514  3195  253B  3184   	fcall	_nrf24l01SPISend
  5744  0517  0020               	movlb	0	; select bank0
  5745  0518  00A7               	movwf	??_nrf24l01Service
  5746  0519  0827               	movf	??_nrf24l01Service,w
  5747  051A  0023               	movlb	3	; select bank3
  5748  051B  00A0               	movwf	_RXPacket^(0+384)
  5749                           
  5750                           ;nrf24l01.c: 352: width--;
  5751  051C  3001               	movlw	1
  5752  051D  0020               	movlb	0	; select bank0
  5753  051E  02AB               	subwf	nrf24l01Service@width,f
  5754                           
  5755                           ;nrf24l01.c: 354: for (i = 0; (i < width) && (i < sizeof(RXPacket.Message)); i++){
  5756  051F  01AC               	clrf	nrf24l01Service@i
  5757  0520  2D32               	goto	l2514
  5758  0521                     l2510:	
  5759                           
  5760                           ;nrf24l01.c: 356: RXPacket.Message[i] = nrf24l01SPISend(0);
  5761  0521  3000               	movlw	0
  5762  0522  3195  253B  3184   	fcall	_nrf24l01SPISend
  5763  0525  0020               	movlb	0	; select bank0
  5764  0526  00A7               	movwf	??_nrf24l01Service
  5765  0527  082C               	movf	nrf24l01Service@i,w
  5766  0528  3EA1               	addlw	(low ((_RXPacket| (0+256)+1)))& (0+255)
  5767  0529  0086               	movwf	6
  5768  052A  3001               	movlw	1	; select bank3/4
  5769  052B  0087               	movwf	7
  5770  052C  0827               	movf	??_nrf24l01Service,w
  5771  052D  0081               	movwf	1
  5772  052E  3001               	movlw	1
  5773  052F  00A7               	movwf	??_nrf24l01Service
  5774  0530  0827               	movf	??_nrf24l01Service,w
  5775  0531  07AC               	addwf	nrf24l01Service@i,f
  5776  0532                     l2514:	
  5777  0532  082B               	movf	nrf24l01Service@width,w
  5778  0533  022C               	subwf	nrf24l01Service@i,w
  5779  0534  1803               	skipnc
  5780  0535  2D3A               	goto	l2518
  5781  0536  3020               	movlw	32
  5782  0537  022C               	subwf	nrf24l01Service@i,w
  5783  0538  1C03               	skipc
  5784  0539  2D21               	goto	l2510
  5785  053A                     l2518:	
  5786                           
  5787                           ;nrf24l01.c: 357: };nrf24l01.c: 360: nrf24l01SPIEnd();
  5788  053A  3195  251B  3184   	fcall	_nrf24l01SPIEnd
  5789                           
  5790                           ;nrf24l01.c: 363: nrf24l01CEHigh();
  5791  053D  3195  250C  3184   	fcall	_nrf24l01CEHigh
  5792                           
  5793                           ;nrf24l01.c: 366: RXPacket.packetData.Pipe = status.statusRegister.RX_P_NO;
  5794  0540  0021               	movlb	1	; select bank1
  5795  0541  0C68               	rrf	(_status^(0+128)+1),w	;volatile
  5796  0542  3907               	andlw	7
  5797  0543  0020               	movlb	0	; select bank0
  5798  0544  00A7               	movwf	??_nrf24l01Service
  5799  0545  0EA7               	swapf	??_nrf24l01Service,f
  5800  0546  0023               	movlb	3	; select bank3
  5801  0547  0820               	movf	_RXPacket^(0+384),w
  5802  0548  0020               	movlb	0	; select bank0
  5803  0549  0627               	xorwf	??_nrf24l01Service,w
  5804  054A  398F               	andlw	-113
  5805  054B  0627               	xorwf	??_nrf24l01Service,w
  5806  054C  0023               	movlb	3	; select bank3
  5807  054D  00A0               	movwf	_RXPacket^(0+384)
  5808                           
  5809                           ;nrf24l01.c: 369: RXPacket.packetData.RPD = nrf24l01Send((unsigned) 0b00000000 | (unsign
      +                          ed) 0x09, 0);
  5810  054E  0020               	movlb	0	; select bank0
  5811  054F  01A0               	clrf	nrf24l01Send@data
  5812  0550  3009               	movlw	9
  5813  0551  3196  269B         	fcall	_nrf24l01Send
  5814  0553  0020               	movlb	0	; select bank0
  5815  0554  00A7               	movwf	??_nrf24l01Service
  5816  0555  0023               	movlb	3	; select bank3
  5817  0556  0820               	movf	_RXPacket^(0+384),w
  5818  0557  0020               	movlb	0	; select bank0
  5819  0558  0627               	xorwf	??_nrf24l01Service,w
  5820  0559  39FE               	andlw	-2
  5821  055A  0627               	xorwf	??_nrf24l01Service,w
  5822  055B  0023               	movlb	3	; select bank3
  5823  055C  00A0               	movwf	_RXPacket^(0+384)
  5824                           
  5825                           ;nrf24l01.c: 371: status.RX = statuses.RX.Ready;
  5826  055D  303B               	movlw	low ((_statuses+7)| (0+32768))
  5827  055E  0084               	movwf	4
  5828  055F  3098               	movlw	high ((_statuses+7)| (0+32768))
  5829  0560  0085               	movwf	5
  5830  0561  0800               	movf	0,w	;code access
  5831  0562  0020               	movlb	0	; select bank0
  5832  0563  00A7               	movwf	??_nrf24l01Service
  5833  0564  0EA7               	swapf	??_nrf24l01Service,f
  5834  0565  0021               	movlb	1	; select bank1
  5835  0566  0867               	movf	_status^(0+128),w	;volatile
  5836  0567  0020               	movlb	0	; select bank0
  5837  0568  0627               	xorwf	??_nrf24l01Service,w
  5838  0569  390F               	andlw	-241
  5839  056A  0627               	xorwf	??_nrf24l01Service,w
  5840  056B  0021               	movlb	1	; select bank1
  5841  056C  00E7               	movwf	_status^(0+128)	;volatile
  5842  056D  0008               	return
  5843  056E                     __end_of_nrf24l01Service:	
  5844                           
  5845                           	psect	text16
  5846  167C                     __ptext16:	
  5847 ;; *************** function _strlen *****************
  5848 ;; Defined at:
  5849 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\strlen.c"
  5850 ;; Parameters:    Size  Location     Type
  5851 ;;  s               2    0[BANK0 ] PTR const unsigned char 
  5852 ;;		 -> packet.Message(32), packet.Message(32), NULL(0), main@packet(33), 
  5853 ;;		 -> loop@packet(33), romDataMap(28), 
  5854 ;; Auto vars:     Size  Location     Type
  5855 ;;  cp              2    4[BANK0 ] PTR const unsigned char 
  5856 ;;		 -> packet.Message(32), packet.Message(32), NULL(0), main@packet(33), 
  5857 ;;		 -> loop@packet(33), romDataMap(28), 
  5858 ;; Return value:  Size  Location     Type
  5859 ;;                  2    0[BANK0 ] unsigned int 
  5860 ;; Registers used:
  5861 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  5862 ;; Tracked objects:
  5863 ;;		On entry : 0/0
  5864 ;;		On exit  : 0/0
  5865 ;;		Unchanged: 0/0
  5866 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5867 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5868 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5869 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5870 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5871 ;;Total ram usage:        6 bytes
  5872 ;; Hardware stack levels used:    1
  5873 ;; Hardware stack levels required when called:    7
  5874 ;; This function calls:
  5875 ;;		Nothing
  5876 ;; This function is called by:
  5877 ;;		_nrf24l01GetPipe
  5878 ;;		_nrf24l01Service
  5879 ;; This function uses a non-reentrant model
  5880 ;;
  5881                           
  5882                           
  5883                           ;psect for function _strlen
  5884  167C                     _strlen:	
  5885                           
  5886                           ;incstack = 0
  5887                           ; Regs used in _strlen: [wreg+fsr1l+fsr1h+status,2+status,0]
  5888  167C  0020               	movlb	0	; select bank0
  5889  167D  0821               	movf	strlen@s+1,w
  5890  167E  00A5               	movwf	strlen@cp+1
  5891  167F  0820               	movf	strlen@s,w
  5892  1680  00A4               	movwf	strlen@cp
  5893  1681                     l2256:	
  5894  1681  0824               	movf	strlen@cp,w
  5895  1682  0086               	movwf	6
  5896  1683  0825               	movf	strlen@cp+1,w
  5897  1684  0087               	movwf	7
  5898  1685  0801               	movf	1,w
  5899  1686  1903               	btfsc	3,2
  5900  1687  2E8D               	goto	l2258
  5901  1688  3001               	movlw	1
  5902  1689  07A4               	addwf	strlen@cp,f
  5903  168A  3000               	movlw	0
  5904  168B  3DA5               	addwfc	strlen@cp+1,f
  5905  168C  2E81               	goto	l2256
  5906  168D                     l2258:	
  5907  168D  0920               	comf	strlen@s,w
  5908  168E  00A2               	movwf	??_strlen
  5909  168F  0921               	comf	strlen@s+1,w
  5910  1690  00A3               	movwf	??_strlen+1
  5911  1691  0AA2               	incf	??_strlen,f
  5912  1692  1903               	skipnz
  5913  1693  0AA3               	incf	??_strlen+1,f
  5914  1694  0824               	movf	strlen@cp,w
  5915  1695  0722               	addwf	??_strlen,w
  5916  1696  00A0               	movwf	?_strlen
  5917  1697  0825               	movf	strlen@cp+1,w
  5918  1698  3D23               	addwfc	??_strlen+1,w
  5919  1699  00A1               	movwf	?_strlen+1
  5920  169A  0008               	return
  5921  169B                     __end_of_strlen:	
  5922                           
  5923                           	psect	text17
  5924  09A9                     __ptext17:	
  5925 ;; *************** function _nrf24l01SetRXMode *****************
  5926 ;; Defined at:
  5927 ;;		line 91 in file "nrf24l01.c"
  5928 ;; Parameters:    Size  Location     Type
  5929 ;;  rxMode          1    wreg     unsigned char 
  5930 ;; Auto vars:     Size  Location     Type
  5931 ;;  rxMode          1    4[BANK0 ] unsigned char 
  5932 ;; Return value:  Size  Location     Type
  5933 ;;                  1    wreg      void 
  5934 ;; Registers used:
  5935 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  5936 ;; Tracked objects:
  5937 ;;		On entry : 0/0
  5938 ;;		On exit  : 0/0
  5939 ;;		Unchanged: 0/0
  5940 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5941 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5942 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5943 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5944 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5945 ;;Total ram usage:        2 bytes
  5946 ;; Hardware stack levels used:    1
  5947 ;; Hardware stack levels required when called:   10
  5948 ;; This function calls:
  5949 ;;		_nrf24l01CEHigh
  5950 ;;		_nrf24l01CELow
  5951 ;;		_nrf24l01Send
  5952 ;; This function is called by:
  5953 ;;		_nrf24l01Service
  5954 ;; This function uses a non-reentrant model
  5955 ;;
  5956                           
  5957                           
  5958                           ;psect for function _nrf24l01SetRXMode
  5959  09A9                     _nrf24l01SetRXMode:	
  5960                           
  5961                           ;incstack = 0
  5962                           ; Regs used in _nrf24l01SetRXMode: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  5963                           ;nrf24l01SetRXMode@rxMode stored from wreg
  5964  09A9  0020               	movlb	0	; select bank0
  5965  09AA  00A4               	movwf	nrf24l01SetRXMode@rxMode
  5966                           
  5967                           ;nrf24l01.c: 93: if (rxMode){
  5968  09AB  0824               	movf	nrf24l01SetRXMode@rxMode,w
  5969  09AC  1903               	btfsc	3,2
  5970  09AD  29BB               	goto	l2268
  5971                           
  5972                           ;nrf24l01.c: 94: if (status.TX == statuses.TX.Sending){
  5973  09AE  3036               	movlw	low ((_statuses+2)| (0+32768))
  5974  09AF  0084               	movwf	4
  5975  09B0  3098               	movlw	high ((_statuses+2)| (0+32768))
  5976  09B1  0085               	movwf	5
  5977  09B2  0800               	movf	0,w	;code access
  5978  09B3  00A3               	movwf	??_nrf24l01SetRXMode
  5979  09B4  0021               	movlb	1	; select bank1
  5980  09B5  0867               	movf	_status^(0+128),w	;volatile
  5981  09B6  390F               	andlw	15
  5982  09B7  0020               	movlb	0	; select bank0
  5983  09B8  0623               	xorwf	??_nrf24l01SetRXMode,w
  5984  09B9  1903               	btfsc	3,2
  5985  09BA  0008               	return
  5986  09BB                     l2268:	
  5987                           ;nrf24l01.c: 95: return;
  5988                           
  5989                           
  5990                           ;nrf24l01.c: 96: };nrf24l01.c: 97: };nrf24l01.c: 99: if (!rxMode){
  5991  09BB  0824               	movf	nrf24l01SetRXMode@rxMode,w
  5992  09BC  1D03               	btfss	3,2
  5993  09BD  29CB               	goto	l2274
  5994                           
  5995                           ;nrf24l01.c: 100: if (status.TX == statuses.TX.PendingACK){
  5996  09BE  3038               	movlw	low ((_statuses+4)| (0+32768))
  5997  09BF  0084               	movwf	4
  5998  09C0  3098               	movlw	high ((_statuses+4)| (0+32768))
  5999  09C1  0085               	movwf	5
  6000  09C2  0800               	movf	0,w	;code access
  6001  09C3  00A3               	movwf	??_nrf24l01SetRXMode
  6002  09C4  0021               	movlb	1	; select bank1
  6003  09C5  0867               	movf	_status^(0+128),w	;volatile
  6004  09C6  390F               	andlw	15
  6005  09C7  0020               	movlb	0	; select bank0
  6006  09C8  0623               	xorwf	??_nrf24l01SetRXMode,w
  6007  09C9  1903               	btfsc	3,2
  6008  09CA  0008               	return
  6009  09CB                     l2274:	
  6010                           ;nrf24l01.c: 101: return;
  6011                           
  6012                           
  6013                           ;nrf24l01.c: 102: };nrf24l01.c: 103: };nrf24l01.c: 109: if (status.configRegister.PRIM_R
      +                          X != rxMode){
  6014  09CB  0021               	movlb	1	; select bank1
  6015  09CC  0869               	movf	(_status^(0+128)+2),w	;volatile
  6016  09CD  3901               	andlw	1
  6017  09CE  0020               	movlb	0	; select bank0
  6018  09CF  0624               	xorwf	nrf24l01SetRXMode@rxMode,w
  6019  09D0  1903               	skipnz
  6020  09D1  0008               	return
  6021                           
  6022                           ;nrf24l01.c: 112: nrf24l01CELow();
  6023  09D2  3195  250F  3189   	fcall	_nrf24l01CELow
  6024                           
  6025                           ;nrf24l01.c: 113: _delay((unsigned long)((2000)*(32000000/4000000.0)));
  6026  09D5  3015               	movlw	21
  6027  09D6  0020               	movlb	0	; select bank0
  6028  09D7  00A3               	movwf	??_nrf24l01SetRXMode
  6029  09D8  30C6               	movlw	198
  6030  09D9                     u3597:	
  6031  09D9  0B89               	decfsz	9,f
  6032  09DA  29D9               	goto	u3597
  6033  09DB  0BA3               	decfsz	??_nrf24l01SetRXMode,f
  6034  09DC  29D9               	goto	u3597
  6035  09DD  0000               	nop
  6036                           
  6037                           ;nrf24l01.c: 116: status.configRegister.PRIM_RX = rxMode;
  6038  09DE  0020               	movlb	0	; select bank0
  6039  09DF  0C24               	rrf	nrf24l01SetRXMode@rxMode,w
  6040  09E0  0021               	movlb	1	; select bank1
  6041  09E1  1C03               	skipc
  6042  09E2  1069               	bcf	(_status^(0+128)+2),0	;volatile
  6043  09E3  1803               	skipnc
  6044  09E4  1469               	bsf	(_status^(0+128)+2),0	;volatile
  6045                           
  6046                           ;nrf24l01.c: 117: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x00, status.configReg
      +                          ister.byte);
  6047  09E5  0869               	movf	(_status^(0+128)+2),w	;volatile
  6048  09E6  0020               	movlb	0	; select bank0
  6049  09E7  00A3               	movwf	??_nrf24l01SetRXMode
  6050  09E8  0823               	movf	??_nrf24l01SetRXMode,w
  6051  09E9  00A0               	movwf	nrf24l01Send@data
  6052  09EA  3020               	movlw	32
  6053  09EB  3196  269B  3189   	fcall	_nrf24l01Send
  6054                           
  6055                           ;nrf24l01.c: 120: _delay((unsigned long)((2000)*(32000000/4000000.0)));
  6056  09EE  3015               	movlw	21
  6057  09EF  0020               	movlb	0	; select bank0
  6058  09F0  00A3               	movwf	??_nrf24l01SetRXMode
  6059  09F1  30C6               	movlw	198
  6060  09F2                     u3607:	
  6061  09F2  0B89               	decfsz	9,f
  6062  09F3  29F2               	goto	u3607
  6063  09F4  0BA3               	decfsz	??_nrf24l01SetRXMode,f
  6064  09F5  29F2               	goto	u3607
  6065  09F6  0000               	nop
  6066                           
  6067                           ;nrf24l01.c: 123: if (rxMode){
  6068  09F7  0020               	movlb	0	; select bank0
  6069  09F8  0824               	movf	nrf24l01SetRXMode@rxMode,w
  6070  09F9  1903               	btfsc	3,2
  6071  09FA  0008               	return
  6072                           
  6073                           ;nrf24l01.c: 124: nrf24l01CEHigh();
  6074  09FB  3195  250C  3189   	fcall	_nrf24l01CEHigh
  6075                           
  6076                           ;nrf24l01.c: 125: _delay((unsigned long)((2000)*(32000000/4000000.0)));
  6077  09FE  3015               	movlw	21
  6078  09FF  0020               	movlb	0	; select bank0
  6079  0A00  00A3               	movwf	??_nrf24l01SetRXMode
  6080  0A01  30C6               	movlw	198
  6081  0A02                     u3617:	
  6082  0A02  0B89               	decfsz	9,f
  6083  0A03  2A02               	goto	u3617
  6084  0A04  0BA3               	decfsz	??_nrf24l01SetRXMode,f
  6085  0A05  2A02               	goto	u3617
  6086  0A06  0000               	nop
  6087  0A07  0008               	return
  6088  0A08                     __end_of_nrf24l01SetRXMode:	
  6089                           
  6090                           	psect	text18
  6091  169B                     __ptext18:	
  6092 ;; *************** function _nrf24l01Send *****************
  6093 ;; Defined at:
  6094 ;;		line 46 in file "nrf24l01.c"
  6095 ;; Parameters:    Size  Location     Type
  6096 ;;  command         1    wreg     unsigned char 
  6097 ;;  data            1    0[BANK0 ] unsigned char 
  6098 ;; Auto vars:     Size  Location     Type
  6099 ;;  command         1    2[BANK0 ] unsigned char 
  6100 ;; Return value:  Size  Location     Type
  6101 ;;                  1    wreg      unsigned char 
  6102 ;; Registers used:
  6103 ;;		wreg, status,2, status,0, pclath, cstack
  6104 ;; Tracked objects:
  6105 ;;		On entry : 0/0
  6106 ;;		On exit  : 0/0
  6107 ;;		Unchanged: 0/0
  6108 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6109 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6110 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6111 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6112 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6113 ;;Total ram usage:        3 bytes
  6114 ;; Hardware stack levels used:    1
  6115 ;; Hardware stack levels required when called:    9
  6116 ;; This function calls:
  6117 ;;		_enableInterrupts
  6118 ;;		_nrf24l01SPIEnd
  6119 ;;		_nrf24l01SPISend
  6120 ;;		_nrf24l01SPIStart
  6121 ;; This function is called by:
  6122 ;;		_loop
  6123 ;;		_nrf24l01SetRXMode
  6124 ;;		_nrf24l01SetRXPipe
  6125 ;;		_nrf24l01Service
  6126 ;;		_nrf24l01InitRegisters
  6127 ;;		_nrf24l01ChangeTXPower
  6128 ;; This function uses a non-reentrant model
  6129 ;;
  6130                           
  6131                           
  6132                           ;psect for function _nrf24l01Send
  6133  169B                     _nrf24l01Send:	
  6134                           
  6135                           ;incstack = 0
  6136                           ; Regs used in _nrf24l01Send: [wreg+status,2+status,0+pclath+cstack]
  6137                           ;nrf24l01Send@command stored from wreg
  6138  169B  0020               	movlb	0	; select bank0
  6139  169C  00A2               	movwf	nrf24l01Send@command
  6140                           
  6141                           ;nrf24l01.c: 49: enableInterrupts(0);
  6142  169D  3000               	movlw	0
  6143  169E  3195  2522  3196   	fcall	_enableInterrupts
  6144                           
  6145                           ;nrf24l01.c: 52: nrf24l01SPIStart();
  6146  16A1  3195  252A  3196   	fcall	_nrf24l01SPIStart
  6147                           
  6148                           ;nrf24l01.c: 55: nrf24l01SPISend(command);
  6149  16A4  0020               	movlb	0	; select bank0
  6150  16A5  0822               	movf	nrf24l01Send@command,w
  6151  16A6  3195  253B  3196   	fcall	_nrf24l01SPISend
  6152                           
  6153                           ;nrf24l01.c: 58: data = nrf24l01SPISend(data);
  6154  16A9  0020               	movlb	0	; select bank0
  6155  16AA  0820               	movf	nrf24l01Send@data,w
  6156  16AB  3195  253B  3196   	fcall	_nrf24l01SPISend
  6157  16AE  0020               	movlb	0	; select bank0
  6158  16AF  00A1               	movwf	??_nrf24l01Send
  6159  16B0  0821               	movf	??_nrf24l01Send,w
  6160  16B1  00A0               	movwf	nrf24l01Send@data
  6161                           
  6162                           ;nrf24l01.c: 61: nrf24l01SPIEnd();
  6163  16B2  3195  251B  3196   	fcall	_nrf24l01SPIEnd
  6164                           
  6165                           ;nrf24l01.c: 64: enableInterrupts(1);
  6166  16B5  3001               	movlw	1
  6167  16B6  3195  2522         	fcall	_enableInterrupts
  6168                           
  6169                           ;nrf24l01.c: 66: return data;
  6170  16B8  0020               	movlb	0	; select bank0
  6171  16B9  0820               	movf	nrf24l01Send@data,w
  6172  16BA  0008               	return
  6173  16BB                     __end_of_nrf24l01Send:	
  6174                           
  6175                           	psect	text19
  6176  1608                     __ptext19:	
  6177 ;; *************** function _memset *****************
  6178 ;; Defined at:
  6179 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\memset.c"
  6180 ;; Parameters:    Size  Location     Type
  6181 ;;  p1              1    wreg     PTR void 
  6182 ;;		 -> RXPacket(33), 
  6183 ;;  c               2    0[BANK0 ] int 
  6184 ;;  n               2    2[BANK0 ] unsigned int 
  6185 ;; Auto vars:     Size  Location     Type
  6186 ;;  p1              1    5[BANK0 ] PTR void 
  6187 ;;		 -> RXPacket(33), 
  6188 ;;  p               1    6[BANK0 ] PTR unsigned char 
  6189 ;;		 -> RXPacket(33), 
  6190 ;; Return value:  Size  Location     Type
  6191 ;;                  1    wreg      PTR void 
  6192 ;; Registers used:
  6193 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  6194 ;; Tracked objects:
  6195 ;;		On entry : 0/0
  6196 ;;		On exit  : 0/0
  6197 ;;		Unchanged: 0/0
  6198 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6199 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6200 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6201 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6202 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6203 ;;Total ram usage:        7 bytes
  6204 ;; Hardware stack levels used:    1
  6205 ;; Hardware stack levels required when called:    7
  6206 ;; This function calls:
  6207 ;;		Nothing
  6208 ;; This function is called by:
  6209 ;;		_nrf24l01Service
  6210 ;; This function uses a non-reentrant model
  6211 ;;
  6212                           
  6213                           
  6214                           ;psect for function _memset
  6215  1608                     _memset:	
  6216                           
  6217                           ;incstack = 0
  6218                           ; Regs used in _memset: [wreg+fsr1l+fsr1h+status,2+status,0]
  6219                           ;memset@p1 stored from wreg
  6220  1608  0020               	movlb	0	; select bank0
  6221  1609  00A5               	movwf	memset@p1
  6222  160A  0825               	movf	memset@p1,w
  6223  160B  00A4               	movwf	??_memset
  6224  160C  0824               	movf	??_memset,w
  6225  160D  00A6               	movwf	memset@p
  6226  160E                     l2298:	
  6227  160E  3001               	movlw	1
  6228  160F  02A2               	subwf	memset@n,f
  6229  1610  3000               	movlw	0
  6230  1611  3BA3               	subwfb	memset@n+1,f
  6231  1612  0A22               	incf	memset@n,w
  6232  1613  1903               	btfsc	3,2
  6233  1614  0A23               	incf	memset@n+1,w
  6234  1615  1903               	btfsc	3,2
  6235  1616  0008               	return
  6236  1617  0820               	movf	memset@c,w
  6237  1618  00A4               	movwf	??_memset
  6238  1619  0826               	movf	memset@p,w
  6239  161A  0086               	movwf	6
  6240  161B  3001               	movlw	1	; select bank2/3
  6241  161C  0087               	movwf	7
  6242  161D  0824               	movf	??_memset,w
  6243  161E  0081               	movwf	1
  6244  161F  3001               	movlw	1
  6245  1620  00A4               	movwf	??_memset
  6246  1621  0824               	movf	??_memset,w
  6247  1622  07A6               	addwf	memset@p,f
  6248  1623  2E0E               	goto	l2298
  6249  1624                     __end_of_memset:	
  6250                           ;	Return value of _memset is never used
  6251                           
  6252                           
  6253                           	psect	text20
  6254  0E18                     __ptext20:	
  6255 ;; *************** function _ftoa *****************
  6256 ;; Defined at:
  6257 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\ftoa.c"
  6258 ;; Parameters:    Size  Location     Type
  6259 ;;  f               3    6[BANK1 ] float 
  6260 ;;  status          1    9[BANK1 ] PTR int 
  6261 ;;		 -> sendMessage@status(2), 
  6262 ;; Auto vars:     Size  Location     Type
  6263 ;;  l               4   14[BANK1 ] unsigned long 
  6264 ;;  rem             4   10[BANK1 ] unsigned long 
  6265 ;;  cp              1   18[BANK1 ] PTR unsigned char 
  6266 ;;		 -> ftoa@buf(17), 
  6267 ;; Return value:  Size  Location     Type
  6268 ;;                  1    wreg      PTR unsigned char 
  6269 ;; Registers used:
  6270 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6271 ;; Tracked objects:
  6272 ;;		On entry : 0/0
  6273 ;;		On exit  : 0/0
  6274 ;;		Unchanged: 0/0
  6275 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6276 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  6277 ;;      Locals:         0       0       9       0       0       0       0       0       0       0       0       0       
      +0       0
  6278 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6279 ;;      Totals:         0       1      13       0       0       0       0       0       0       0       0       0       
      +0       0
  6280 ;;Total ram usage:       14 bytes
  6281 ;; Hardware stack levels used:    1
  6282 ;; Hardware stack levels required when called:   10
  6283 ;; This function calls:
  6284 ;;		___ftge
  6285 ;;		___ftmul
  6286 ;;		___ftneg
  6287 ;;		___ftsub
  6288 ;;		___fttol
  6289 ;;		___lltoft
  6290 ;;		_sprintf
  6291 ;; This function is called by:
  6292 ;;		_sendMessage
  6293 ;; This function uses a non-reentrant model
  6294 ;;
  6295                           
  6296                           
  6297                           ;psect for function _ftoa
  6298  0E18                     _ftoa:	
  6299                           
  6300                           ;incstack = 0
  6301                           ; Regs used in _ftoa: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6302  0E18  3055               	movlw	(low (ftoa@buf| (0+256)))& (0+255)
  6303  0E19  0020               	movlb	0	; select bank0
  6304  0E1A  00EF               	movwf	??_ftoa
  6305  0E1B  086F               	movf	??_ftoa,w
  6306  0E1C  0021               	movlb	1	; select bank1
  6307  0E1D  00B2               	movwf	ftoa@cp^(0+128)
  6308  0E1E  0826               	movf	ftoa@f^(0+128),w
  6309  0E1F  0020               	movlb	0	; select bank0
  6310  0E20  00A0               	movwf	___ftge@ff1
  6311  0E21  0021               	movlb	1	; select bank1
  6312  0E22  0827               	movf	(ftoa@f+1)^(0+128),w
  6313  0E23  0020               	movlb	0	; select bank0
  6314  0E24  00A1               	movwf	___ftge@ff1+1
  6315  0E25  0021               	movlb	1	; select bank1
  6316  0E26  0828               	movf	(ftoa@f+2)^(0+128),w
  6317  0E27  0020               	movlb	0	; select bank0
  6318  0E28  00A2               	movwf	___ftge@ff1+2
  6319  0E29  3000               	movlw	0
  6320  0E2A  00A3               	movwf	___ftge@ff2
  6321  0E2B  3000               	movlw	0
  6322  0E2C  00A4               	movwf	___ftge@ff2+1
  6323  0E2D  3000               	movlw	0
  6324  0E2E  00A5               	movwf	___ftge@ff2+2
  6325  0E2F  3188  2050  318E   	fcall	___ftge
  6326  0E32  1803               	btfsc	3,0
  6327  0E33  2E5E               	goto	l2830
  6328  0E34  302D               	movlw	45
  6329  0E35  0020               	movlb	0	; select bank0
  6330  0E36  00EF               	movwf	??_ftoa
  6331  0E37  0021               	movlb	1	; select bank1
  6332  0E38  0832               	movf	ftoa@cp^(0+128),w
  6333  0E39  0086               	movwf	6
  6334  0E3A  3001               	movlw	1	; select bank2/3
  6335  0E3B  0087               	movwf	7
  6336  0E3C  0020               	movlb	0	; select bank0
  6337  0E3D  086F               	movf	??_ftoa,w
  6338  0E3E  0081               	movwf	1
  6339  0E3F  3001               	movlw	1
  6340  0E40  00EF               	movwf	??_ftoa
  6341  0E41  086F               	movf	??_ftoa,w
  6342  0E42  0021               	movlb	1	; select bank1
  6343  0E43  07B2               	addwf	ftoa@cp^(0+128),f
  6344  0E44  0826               	movf	ftoa@f^(0+128),w
  6345  0E45  0020               	movlb	0	; select bank0
  6346  0E46  00D7               	movwf	___ftneg@f1
  6347  0E47  0021               	movlb	1	; select bank1
  6348  0E48  0827               	movf	(ftoa@f+1)^(0+128),w
  6349  0E49  0020               	movlb	0	; select bank0
  6350  0E4A  00D8               	movwf	___ftneg@f1+1
  6351  0E4B  0021               	movlb	1	; select bank1
  6352  0E4C  0828               	movf	(ftoa@f+2)^(0+128),w
  6353  0E4D  0020               	movlb	0	; select bank0
  6354  0E4E  00D9               	movwf	___ftneg@f1+2
  6355  0E4F  3195  2532  318E   	fcall	___ftneg
  6356  0E52  0020               	movlb	0	; select bank0
  6357  0E53  0857               	movf	?___ftneg,w
  6358  0E54  0021               	movlb	1	; select bank1
  6359  0E55  00A6               	movwf	ftoa@f^(0+128)
  6360  0E56  0020               	movlb	0	; select bank0
  6361  0E57  0858               	movf	?___ftneg+1,w
  6362  0E58  0021               	movlb	1	; select bank1
  6363  0E59  00A7               	movwf	(ftoa@f+1)^(0+128)
  6364  0E5A  0020               	movlb	0	; select bank0
  6365  0E5B  0859               	movf	?___ftneg+2,w
  6366  0E5C  0021               	movlb	1	; select bank1
  6367  0E5D  00A8               	movwf	(ftoa@f+2)^(0+128)
  6368  0E5E                     l2830:	
  6369  0E5E  0021               	movlb	1	; select bank1
  6370  0E5F  0826               	movf	ftoa@f^(0+128),w
  6371  0E60  0020               	movlb	0	; select bank0
  6372  0E61  00E7               	movwf	___fttol@f1
  6373  0E62  0021               	movlb	1	; select bank1
  6374  0E63  0827               	movf	(ftoa@f+1)^(0+128),w
  6375  0E64  0020               	movlb	0	; select bank0
  6376  0E65  00E8               	movwf	___fttol@f1+1
  6377  0E66  0021               	movlb	1	; select bank1
  6378  0E67  0828               	movf	(ftoa@f+2)^(0+128),w
  6379  0E68  0020               	movlb	0	; select bank0
  6380  0E69  00E9               	movwf	___fttol@f1+2
  6381  0E6A  318B  2376  318E   	fcall	___fttol
  6382  0E6D  0020               	movlb	0	; select bank0
  6383  0E6E  086A               	movf	?___fttol+3,w
  6384  0E6F  0021               	movlb	1	; select bank1
  6385  0E70  00B1               	movwf	(ftoa@l+3)^(0+128)
  6386  0E71  0020               	movlb	0	; select bank0
  6387  0E72  0869               	movf	?___fttol+2,w
  6388  0E73  0021               	movlb	1	; select bank1
  6389  0E74  00B0               	movwf	(ftoa@l+2)^(0+128)
  6390  0E75  0020               	movlb	0	; select bank0
  6391  0E76  0868               	movf	?___fttol+1,w
  6392  0E77  0021               	movlb	1	; select bank1
  6393  0E78  00AF               	movwf	(ftoa@l+1)^(0+128)
  6394  0E79  0020               	movlb	0	; select bank0
  6395  0E7A  0867               	movf	?___fttol,w
  6396  0E7B  0021               	movlb	1	; select bank1
  6397  0E7C  00AE               	movwf	ftoa@l^(0+128)
  6398  0E7D  0831               	movf	(ftoa@l+3)^(0+128),w
  6399  0E7E  0020               	movlb	0	; select bank0
  6400  0E7F  00AB               	movwf	___lltoft@c+3
  6401  0E80  0021               	movlb	1	; select bank1
  6402  0E81  0830               	movf	(ftoa@l+2)^(0+128),w
  6403  0E82  0020               	movlb	0	; select bank0
  6404  0E83  00AA               	movwf	___lltoft@c+2
  6405  0E84  0021               	movlb	1	; select bank1
  6406  0E85  082F               	movf	(ftoa@l+1)^(0+128),w
  6407  0E86  0020               	movlb	0	; select bank0
  6408  0E87  00A9               	movwf	___lltoft@c+1
  6409  0E88  0021               	movlb	1	; select bank1
  6410  0E89  082E               	movf	ftoa@l^(0+128),w
  6411  0E8A  0020               	movlb	0	; select bank0
  6412  0E8B  00A8               	movwf	___lltoft@c
  6413  0E8C  3197  2747  318E   	fcall	___lltoft
  6414  0E8F  0020               	movlb	0	; select bank0
  6415  0E90  0828               	movf	?___lltoft,w
  6416  0E91  00BB               	movwf	___ftsub@f2
  6417  0E92  0829               	movf	?___lltoft+1,w
  6418  0E93  00BC               	movwf	___ftsub@f2+1
  6419  0E94  082A               	movf	?___lltoft+2,w
  6420  0E95  00BD               	movwf	___ftsub@f2+2
  6421  0E96  0021               	movlb	1	; select bank1
  6422  0E97  0826               	movf	ftoa@f^(0+128),w
  6423  0E98  0020               	movlb	0	; select bank0
  6424  0E99  00BE               	movwf	___ftsub@f1
  6425  0E9A  0021               	movlb	1	; select bank1
  6426  0E9B  0827               	movf	(ftoa@f+1)^(0+128),w
  6427  0E9C  0020               	movlb	0	; select bank0
  6428  0E9D  00BF               	movwf	___ftsub@f1+1
  6429  0E9E  0021               	movlb	1	; select bank1
  6430  0E9F  0828               	movf	(ftoa@f+2)^(0+128),w
  6431  0EA0  0020               	movlb	0	; select bank0
  6432  0EA1  00C0               	movwf	___ftsub@f1+2
  6433  0EA2  3196  265E  318E   	fcall	___ftsub
  6434  0EA5  0020               	movlb	0	; select bank0
  6435  0EA6  083B               	movf	?___ftsub,w
  6436  0EA7  0021               	movlb	1	; select bank1
  6437  0EA8  00A6               	movwf	ftoa@f^(0+128)
  6438  0EA9  0020               	movlb	0	; select bank0
  6439  0EAA  083C               	movf	?___ftsub+1,w
  6440  0EAB  0021               	movlb	1	; select bank1
  6441  0EAC  00A7               	movwf	(ftoa@f+1)^(0+128)
  6442  0EAD  0020               	movlb	0	; select bank0
  6443  0EAE  083D               	movf	?___ftsub+2,w
  6444  0EAF  0021               	movlb	1	; select bank1
  6445  0EB0  00A8               	movwf	(ftoa@f+2)^(0+128)
  6446  0EB1  0826               	movf	ftoa@f^(0+128),w
  6447  0EB2  0020               	movlb	0	; select bank0
  6448  0EB3  00DA               	movwf	___ftmul@f2
  6449  0EB4  0021               	movlb	1	; select bank1
  6450  0EB5  0827               	movf	(ftoa@f+1)^(0+128),w
  6451  0EB6  0020               	movlb	0	; select bank0
  6452  0EB7  00DB               	movwf	___ftmul@f2+1
  6453  0EB8  0021               	movlb	1	; select bank1
  6454  0EB9  0828               	movf	(ftoa@f+2)^(0+128),w
  6455  0EBA  0020               	movlb	0	; select bank0
  6456  0EBB  00DC               	movwf	___ftmul@f2+2
  6457  0EBC  3024               	movlw	36
  6458  0EBD  00D7               	movwf	___ftmul@f1
  6459  0EBE  3074               	movlw	116
  6460  0EBF  00D8               	movwf	___ftmul@f1+1
  6461  0EC0  3049               	movlw	73
  6462  0EC1  00D9               	movwf	___ftmul@f1+2
  6463  0EC2  318D  2564  318E   	fcall	___ftmul
  6464  0EC5  0020               	movlb	0	; select bank0
  6465  0EC6  0857               	movf	?___ftmul,w
  6466  0EC7  00E7               	movwf	___fttol@f1
  6467  0EC8  0858               	movf	?___ftmul+1,w
  6468  0EC9  00E8               	movwf	___fttol@f1+1
  6469  0ECA  0859               	movf	?___ftmul+2,w
  6470  0ECB  00E9               	movwf	___fttol@f1+2
  6471  0ECC  318B  2376  318E   	fcall	___fttol
  6472  0ECF  0020               	movlb	0	; select bank0
  6473  0ED0  086A               	movf	?___fttol+3,w
  6474  0ED1  0021               	movlb	1	; select bank1
  6475  0ED2  00AD               	movwf	(ftoa@rem+3)^(0+128)
  6476  0ED3  0020               	movlb	0	; select bank0
  6477  0ED4  0869               	movf	?___fttol+2,w
  6478  0ED5  0021               	movlb	1	; select bank1
  6479  0ED6  00AC               	movwf	(ftoa@rem+2)^(0+128)
  6480  0ED7  0020               	movlb	0	; select bank0
  6481  0ED8  0868               	movf	?___fttol+1,w
  6482  0ED9  0021               	movlb	1	; select bank1
  6483  0EDA  00AB               	movwf	(ftoa@rem+1)^(0+128)
  6484  0EDB  0020               	movlb	0	; select bank0
  6485  0EDC  0867               	movf	?___fttol,w
  6486  0EDD  0021               	movlb	1	; select bank1
  6487  0EDE  00AA               	movwf	ftoa@rem^(0+128)
  6488  0EDF  3029               	movlw	low (STR_14| (0+32768))
  6489  0EE0  0020               	movlb	0	; select bank0
  6490  0EE1  00B8               	movwf	sprintf@f
  6491  0EE2  3098               	movlw	high (STR_14| (0+32768))
  6492  0EE3  00B9               	movwf	sprintf@f+1
  6493  0EE4  0021               	movlb	1	; select bank1
  6494  0EE5  0831               	movf	(ftoa@l+3)^(0+128),w
  6495  0EE6  0020               	movlb	0	; select bank0
  6496  0EE7  00BD               	movwf	?_sprintf+5
  6497  0EE8  0021               	movlb	1	; select bank1
  6498  0EE9  0830               	movf	(ftoa@l+2)^(0+128),w
  6499  0EEA  0020               	movlb	0	; select bank0
  6500  0EEB  00BC               	movwf	?_sprintf+4
  6501  0EEC  0021               	movlb	1	; select bank1
  6502  0EED  082F               	movf	(ftoa@l+1)^(0+128),w
  6503  0EEE  0020               	movlb	0	; select bank0
  6504  0EEF  00BB               	movwf	?_sprintf+3
  6505  0EF0  0021               	movlb	1	; select bank1
  6506  0EF1  082E               	movf	ftoa@l^(0+128),w
  6507  0EF2  0020               	movlb	0	; select bank0
  6508  0EF3  00BA               	movwf	?_sprintf+2
  6509  0EF4  0021               	movlb	1	; select bank1
  6510  0EF5  082D               	movf	(ftoa@rem+3)^(0+128),w
  6511  0EF6  0020               	movlb	0	; select bank0
  6512  0EF7  00C1               	movwf	?_sprintf+9
  6513  0EF8  0021               	movlb	1	; select bank1
  6514  0EF9  082C               	movf	(ftoa@rem+2)^(0+128),w
  6515  0EFA  0020               	movlb	0	; select bank0
  6516  0EFB  00C0               	movwf	?_sprintf+8
  6517  0EFC  0021               	movlb	1	; select bank1
  6518  0EFD  082B               	movf	(ftoa@rem+1)^(0+128),w
  6519  0EFE  0020               	movlb	0	; select bank0
  6520  0EFF  00BF               	movwf	?_sprintf+7
  6521  0F00  0021               	movlb	1	; select bank1
  6522  0F01  082A               	movf	ftoa@rem^(0+128),w
  6523  0F02  0020               	movlb	0	; select bank0
  6524  0F03  00BE               	movwf	?_sprintf+6
  6525  0F04  0021               	movlb	1	; select bank1
  6526  0F05  0832               	movf	ftoa@cp^(0+128),w
  6527  0F06  3182  2259         	fcall	_sprintf
  6528  0F08  3055               	movlw	(low (ftoa@buf| (0+256)))& (0+255)
  6529  0F09  0008               	return
  6530  0F0A                     __end_of_ftoa:	
  6531                           
  6532                           	psect	text21
  6533  0259                     __ptext21:	
  6534 ;; *************** function _sprintf *****************
  6535 ;; Defined at:
  6536 ;;		line 500 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\doprnt.c"
  6537 ;; Parameters:    Size  Location     Type
  6538 ;;  sp              1    wreg     PTR unsigned char 
  6539 ;;		 -> ftoa@buf(17), 
  6540 ;;  f               2   24[BANK0 ] PTR const unsigned char 
  6541 ;;		 -> STR_14(11), 
  6542 ;; Auto vars:     Size  Location     Type
  6543 ;;  sp              1   46[BANK0 ] PTR unsigned char 
  6544 ;;		 -> ftoa@buf(17), 
  6545 ;;  val             4   42[BANK0 ] unsigned long 
  6546 ;;  tmpval          4    0        struct .
  6547 ;;  prec            2   49[BANK0 ] int 
  6548 ;;  width           2   47[BANK0 ] int 
  6549 ;;  cp              2    0        PTR const unsigned char 
  6550 ;;  len             2    0        unsigned int 
  6551 ;;  c               1   51[BANK0 ] unsigned char 
  6552 ;;  ap              1   41[BANK0 ] PTR void [1]
  6553 ;;		 -> ?_sprintf(2), 
  6554 ;;  flag            1   40[BANK0 ] unsigned char 
  6555 ;; Return value:  Size  Location     Type
  6556 ;;                  2   24[BANK0 ] int 
  6557 ;; Registers used:
  6558 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6559 ;; Tracked objects:
  6560 ;;		On entry : 0/0
  6561 ;;		On exit  : 0/0
  6562 ;;		Unchanged: 0/0
  6563 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6564 ;;      Params:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6565 ;;      Locals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6566 ;;      Temps:          0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6567 ;;      Totals:         0      28       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6568 ;;Total ram usage:       28 bytes
  6569 ;; Hardware stack levels used:    1
  6570 ;; Hardware stack levels required when called:    8
  6571 ;; This function calls:
  6572 ;;		___lldiv
  6573 ;;		___llmod
  6574 ;;		___wmul
  6575 ;;		_isdigit
  6576 ;; This function is called by:
  6577 ;;		_ftoa
  6578 ;; This function uses a non-reentrant model
  6579 ;;
  6580                           
  6581                           
  6582                           ;psect for function _sprintf
  6583  0259                     _sprintf:	
  6584                           
  6585                           ;incstack = 0
  6586                           ; Regs used in _sprintf: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6587                           ;sprintf@sp stored from wreg
  6588  0259  0020               	movlb	0	; select bank0
  6589  025A  00CE               	movwf	sprintf@sp
  6590                           
  6591                           ;doprnt.c: 502: va_list ap;;doprnt.c: 507: char c;;doprnt.c: 509: int width;;doprnt.c: 5
      +                          12: int prec;;doprnt.c: 520: unsigned char flag;;doprnt.c: 535: union {;doprnt.c: 536: u
      +                          nsigned long vd;;doprnt.c: 537: double integ;;doprnt.c: 538: } tmpval;;doprnt.c: 540: un
      +                          signed long val;;doprnt.c: 541: unsigned len;;doprnt.c: 542: const char * cp;;doprnt.c: 
      +                          545: *ap = __va_start();
  6592  025B  303A               	movlw	(low ((?_sprintf| 0+2)))& (0+255)
  6593  025C  00C2               	movwf	??_sprintf
  6594  025D  0842               	movf	??_sprintf,w
  6595  025E  00C9               	movwf	sprintf@ap
  6596  025F                     l2626:	
  6597                           ;doprnt.c: 548: while((c = *f++)) {
  6598                           
  6599  025F  0839               	movf	sprintf@f+1,w
  6600  0260  00C3               	movwf	??_sprintf+1
  6601  0261  0838               	movf	sprintf@f,w
  6602  0262  00C2               	movwf	??_sprintf
  6603  0263  0AB8               	incf	sprintf@f,f
  6604  0264  1903               	skipnz
  6605  0265  0AB9               	incf	sprintf@f+1,f
  6606  0266  0842               	movf	??_sprintf,w
  6607  0267  0084               	movwf	4
  6608  0268  0843               	movf	??_sprintf+1,w
  6609  0269  0085               	movwf	5
  6610  026A  0800               	movf	0,w	;code access
  6611  026B  00C4               	movwf	??_sprintf+2
  6612  026C  0844               	movf	??_sprintf+2,w
  6613  026D  00D3               	movwf	sprintf@c
  6614  026E  0853               	movf	sprintf@c,w
  6615  026F  1903               	btfsc	3,2
  6616  0270  2C20               	goto	l2628
  6617                           
  6618                           ;doprnt.c: 550: if(c != '%')
  6619  0271  3025               	movlw	37
  6620  0272  0653               	xorwf	sprintf@c,w
  6621  0273  1903               	btfsc	3,2
  6622  0274  2A82               	goto	l2538
  6623                           
  6624                           ;doprnt.c: 552: {;doprnt.c: 553: ((*sp++ = (c)));
  6625  0275  0853               	movf	sprintf@c,w
  6626  0276  00C2               	movwf	??_sprintf
  6627  0277  084E               	movf	sprintf@sp,w
  6628  0278  0086               	movwf	6
  6629  0279  3001               	movlw	1	; select bank2/3
  6630  027A  0087               	movwf	7
  6631  027B  0842               	movf	??_sprintf,w
  6632  027C  0081               	movwf	1
  6633  027D  3001               	movlw	1
  6634  027E  00C2               	movwf	??_sprintf
  6635  027F  0842               	movf	??_sprintf,w
  6636  0280  07CE               	addwf	sprintf@sp,f
  6637                           
  6638                           ;doprnt.c: 554: continue;
  6639  0281  2A5F               	goto	l2626
  6640  0282                     l2538:	
  6641                           
  6642                           ;doprnt.c: 555: };doprnt.c: 558: width = 0;
  6643  0282  01CF               	clrf	sprintf@width
  6644  0283  01D0               	clrf	sprintf@width+1
  6645                           
  6646                           ;doprnt.c: 560: flag = 0;
  6647  0284  01C8               	clrf	sprintf@flag
  6648                           
  6649                           ;doprnt.c: 609: if(isdigit((unsigned)*f)) {
  6650  0285  0838               	movf	sprintf@f,w
  6651  0286  0084               	movwf	4
  6652  0287  0839               	movf	sprintf@f+1,w
  6653  0288  0085               	movwf	5
  6654  0289  0800               	movf	0,w	;code access
  6655  028A  3195  2548  3182   	fcall	_isdigit
  6656  028D  1C03               	btfss	3,0
  6657  028E  2AC0               	goto	l2552
  6658                           
  6659                           ;doprnt.c: 610: width = 0;
  6660  028F  0020               	movlb	0	; select bank0
  6661  0290  01CF               	clrf	sprintf@width
  6662  0291  01D0               	clrf	sprintf@width+1
  6663  0292                     l2544:	
  6664                           ;doprnt.c: 611: do {
  6665                           
  6666                           
  6667                           ;doprnt.c: 612: width *= 10;
  6668  0292  300A               	movlw	10
  6669  0293  0020               	movlb	0	; select bank0
  6670  0294  00A0               	movwf	___wmul@multiplier
  6671  0295  3000               	movlw	0
  6672  0296  00A1               	movwf	___wmul@multiplier+1
  6673  0297  0850               	movf	sprintf@width+1,w
  6674  0298  00A3               	movwf	___wmul@multiplicand+1
  6675  0299  084F               	movf	sprintf@width,w
  6676  029A  00A2               	movwf	___wmul@multiplicand
  6677  029B  3195  25EC  3182   	fcall	___wmul
  6678  029E  0020               	movlb	0	; select bank0
  6679  029F  0821               	movf	?___wmul+1,w
  6680  02A0  00D0               	movwf	sprintf@width+1
  6681  02A1  0820               	movf	?___wmul,w
  6682  02A2  00CF               	movwf	sprintf@width
  6683                           
  6684                           ;doprnt.c: 613: width += *f++ - '0';
  6685  02A3  0838               	movf	sprintf@f,w
  6686  02A4  0084               	movwf	4
  6687  02A5  0839               	movf	sprintf@f+1,w
  6688  02A6  0085               	movwf	5
  6689  02A7  0800               	movf	0,w	;code access
  6690  02A8  3ED0               	addlw	208
  6691  02A9  00C2               	movwf	??_sprintf
  6692  02AA  30FF               	movlw	255
  6693  02AB  1803               	skipnc
  6694  02AC  3000               	movlw	0
  6695  02AD  00C3               	movwf	??_sprintf+1
  6696  02AE  0842               	movf	??_sprintf,w
  6697  02AF  07CF               	addwf	sprintf@width,f
  6698  02B0  0843               	movf	??_sprintf+1,w
  6699  02B1  3DD0               	addwfc	sprintf@width+1,f
  6700  02B2  3001               	movlw	1
  6701  02B3  07B8               	addwf	sprintf@f,f
  6702  02B4  3000               	movlw	0
  6703  02B5  3DB9               	addwfc	sprintf@f+1,f
  6704                           
  6705                           ;doprnt.c: 614: } while(isdigit((unsigned)*f));
  6706  02B6  0838               	movf	sprintf@f,w
  6707  02B7  0084               	movwf	4
  6708  02B8  0839               	movf	sprintf@f+1,w
  6709  02B9  0085               	movwf	5
  6710  02BA  0800               	movf	0,w	;code access
  6711  02BB  3195  2548  3182   	fcall	_isdigit
  6712  02BE  1803               	btfsc	3,0
  6713  02BF  2A92               	goto	l2544
  6714  02C0                     l2552:	
  6715                           
  6716                           ;doprnt.c: 620: };doprnt.c: 623: if(*f == '.') {
  6717  02C0  0020               	movlb	0	; select bank0
  6718  02C1  0838               	movf	sprintf@f,w
  6719  02C2  0084               	movwf	4
  6720  02C3  0839               	movf	sprintf@f+1,w
  6721  02C4  0085               	movwf	5
  6722  02C5  0012               	moviw fsr0++
  6723  02C6  3A2E               	xorlw	46
  6724  02C7  1D03               	btfss	3,2
  6725  02C8  2AFE               	goto	l2564
  6726                           
  6727                           ;doprnt.c: 625: f++;
  6728  02C9  3001               	movlw	1
  6729  02CA  07B8               	addwf	sprintf@f,f
  6730  02CB  3000               	movlw	0
  6731  02CC  3DB9               	addwfc	sprintf@f+1,f
  6732                           
  6733                           ;doprnt.c: 639: {;doprnt.c: 640: prec = 0;
  6734  02CD  01D1               	clrf	sprintf@prec
  6735  02CE  01D2               	clrf	sprintf@prec+1
  6736  02CF                     l2562:	
  6737                           ;doprnt.c: 641: while(isdigit((unsigned)*f))
  6738                           
  6739  02CF  0838               	movf	sprintf@f,w
  6740  02D0  0084               	movwf	4
  6741  02D1  0839               	movf	sprintf@f+1,w
  6742  02D2  0085               	movwf	5
  6743  02D3  0800               	movf	0,w	;code access
  6744  02D4  3195  2548  3182   	fcall	_isdigit
  6745  02D7  1C03               	btfss	3,0
  6746  02D8  2B09               	goto	l2570
  6747                           
  6748                           ;doprnt.c: 642: prec = prec*10 + *f++ - '0';
  6749  02D9  0020               	movlb	0	; select bank0
  6750  02DA  0838               	movf	sprintf@f,w
  6751  02DB  0084               	movwf	4
  6752  02DC  0839               	movf	sprintf@f+1,w
  6753  02DD  0085               	movwf	5
  6754  02DE  0800               	movf	0,w	;code access
  6755  02DF  00C2               	movwf	??_sprintf
  6756  02E0  01C3               	clrf	??_sprintf+1
  6757  02E1  0852               	movf	sprintf@prec+1,w
  6758  02E2  00A1               	movwf	___wmul@multiplier+1
  6759  02E3  0851               	movf	sprintf@prec,w
  6760  02E4  00A0               	movwf	___wmul@multiplier
  6761  02E5  300A               	movlw	10
  6762  02E6  00A2               	movwf	___wmul@multiplicand
  6763  02E7  3000               	movlw	0
  6764  02E8  00A3               	movwf	___wmul@multiplicand+1
  6765  02E9  3195  25EC  3182   	fcall	___wmul
  6766  02EC  0020               	movlb	0	; select bank0
  6767  02ED  0842               	movf	??_sprintf,w
  6768  02EE  0720               	addwf	?___wmul,w
  6769  02EF  00C4               	movwf	??_sprintf+2
  6770  02F0  0843               	movf	??_sprintf+1,w
  6771  02F1  3D21               	addwfc	?___wmul+1,w
  6772  02F2  00C5               	movwf	??_sprintf+3
  6773  02F3  0844               	movf	??_sprintf+2,w
  6774  02F4  3ED0               	addlw	208
  6775  02F5  00D1               	movwf	sprintf@prec
  6776  02F6  30FF               	movlw	255
  6777  02F7  3D45               	addwfc	??_sprintf+3,w
  6778  02F8  00D2               	movwf	sprintf@prec+1
  6779  02F9  3001               	movlw	1
  6780  02FA  07B8               	addwf	sprintf@f,f
  6781  02FB  3000               	movlw	0
  6782  02FC  3DB9               	addwfc	sprintf@f+1,f
  6783  02FD  2ACF               	goto	l2562
  6784  02FE                     l2564:	
  6785                           ;doprnt.c: 643: };doprnt.c: 644: } else {
  6786                           
  6787                           
  6788                           ;doprnt.c: 645: prec = 0;
  6789  02FE  0020               	movlb	0	; select bank0
  6790  02FF  01D1               	clrf	sprintf@prec
  6791  0300  01D2               	clrf	sprintf@prec+1
  6792                           
  6793                           ;doprnt.c: 654: switch(c = *f++) {
  6794                           
  6795                           ;doprnt.c: 649: };doprnt.c: 652: loop:
  6796  0301  2B09               	goto	l2570
  6797  0302                     l416:	
  6798                           ;doprnt.c: 660: case 'l':
  6799                           
  6800                           ;doprnt.c: 657: goto alldone;
  6801                           
  6802                           ;doprnt.c: 656: case 0:
  6803                           
  6804                           
  6805                           ;doprnt.c: 662: flag |= 0x10;
  6806  0302  1648               	bsf	sprintf@flag,4
  6807                           
  6808                           ;doprnt.c: 663: goto loop;
  6809  0303  2B09               	goto	l2570
  6810  0304                     l2566:	
  6811                           ;doprnt.c: 836: case 'u':
  6812                           
  6813                           ;doprnt.c: 832: continue;
  6814                           
  6815                           ;doprnt.c: 821: default:
  6816                           
  6817                           
  6818                           ;doprnt.c: 837: flag |= 0xC0;
  6819  0304  30C0               	movlw	192
  6820  0305  00C2               	movwf	??_sprintf
  6821  0306  0842               	movf	??_sprintf,w
  6822  0307  04C8               	iorwf	sprintf@flag,f
  6823                           
  6824                           ;doprnt.c: 841: }
  6825                           
  6826                           ;doprnt.c: 838: break;
  6827  0308  2B21               	goto	l419
  6828  0309                     l2570:	
  6829  0309  0020               	movlb	0	; select bank0
  6830  030A  0839               	movf	sprintf@f+1,w
  6831  030B  00C3               	movwf	??_sprintf+1
  6832  030C  0838               	movf	sprintf@f,w
  6833  030D  00C2               	movwf	??_sprintf
  6834  030E  0AB8               	incf	sprintf@f,f
  6835  030F  1903               	skipnz
  6836  0310  0AB9               	incf	sprintf@f+1,f
  6837  0311  0842               	movf	??_sprintf,w
  6838  0312  0084               	movwf	4
  6839  0313  0843               	movf	??_sprintf+1,w
  6840  0314  0085               	movwf	5
  6841  0315  0800               	movf	0,w	;code access
  6842  0316  00D3               	movwf	sprintf@c
  6843                           
  6844                           ; Switch size 1, requested type "space"
  6845                           ; Number of cases is 3, Range of values is 0 to 117
  6846                           ; switch strategies available:
  6847                           ; Name         Instructions Cycles
  6848                           ; simple_byte           10     6 (average)
  6849                           ; direct_byte          242     6 (fixed)
  6850                           ; jumptable            260     6 (fixed)
  6851                           ;	Chosen strategy is simple_byte
  6852  0317  3A00               	xorlw	0	; case 0
  6853  0318  1903               	skipnz
  6854  0319  2C20               	goto	l2628
  6855  031A  3A6C               	xorlw	108	; case 108
  6856  031B  1903               	skipnz
  6857  031C  2B02               	goto	l416
  6858  031D  3A19               	xorlw	25	; case 117
  6859  031E  1903               	skipnz
  6860  031F  2B04               	goto	l2566
  6861  0320  2A5F               	goto	l2626
  6862  0321                     l419:	
  6863                           
  6864                           ;doprnt.c: 1292: {;doprnt.c: 1300: if(flag & 0x10)
  6865  0321  1E48               	btfss	sprintf@flag,4
  6866  0322  2B30               	goto	l2576
  6867                           
  6868                           ;doprnt.c: 1301: val = (*(unsigned long *)__va_arg((*(unsigned long **)ap), (unsigned lo
      +                          ng)0));
  6869  0323  0849               	movf	sprintf@ap,w
  6870  0324  0086               	movwf	6
  6871  0325  0187               	clrf	7
  6872  0326  3F40               	moviw [0]fsr1
  6873  0327  00CA               	movwf	sprintf@val
  6874  0328  3F41               	moviw [1]fsr1
  6875  0329  00CB               	movwf	sprintf@val+1
  6876  032A  3F42               	moviw [2]fsr1
  6877  032B  00CC               	movwf	sprintf@val+2
  6878  032C  3F43               	moviw [3]fsr1
  6879  032D  00CD               	movwf	sprintf@val+3
  6880  032E  3004               	movlw	4
  6881  032F  2B3E               	goto	L2
  6882  0330                     l2576:	
  6883                           
  6884                           ;doprnt.c: 1302: else;doprnt.c: 1305: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (
      +                          unsigned)0));
  6885  0330  0849               	movf	sprintf@ap,w
  6886  0331  0086               	movwf	6
  6887  0332  0187               	clrf	7
  6888  0333  3F40               	moviw [0]fsr1
  6889  0334  00C2               	movwf	??_sprintf
  6890  0335  3F41               	moviw [1]fsr1
  6891  0336  00C3               	movwf	??_sprintf+1
  6892  0337  0842               	movf	??_sprintf,w
  6893  0338  00CA               	movwf	sprintf@val
  6894  0339  0843               	movf	??_sprintf+1,w
  6895  033A  00CB               	movwf	sprintf@val+1
  6896  033B  01CC               	clrf	sprintf@val+2
  6897  033C  01CD               	clrf	sprintf@val+3
  6898  033D  3002               	movlw	2
  6899  033E                     L2:	
  6900  033E  00C2               	movwf	??_sprintf
  6901  033F  0842               	movf	??_sprintf,w
  6902  0340  07C9               	addwf	sprintf@ap,f
  6903                           
  6904                           ;doprnt.c: 1306: };doprnt.c: 1309: if(prec == 0 && val == 0)
  6905  0341  0851               	movf	sprintf@prec,w
  6906  0342  0452               	iorwf	sprintf@prec+1,w
  6907  0343  1D03               	btfss	3,2
  6908  0344  2B4F               	goto	l2586
  6909  0345  084D               	movf	sprintf@val+3,w
  6910  0346  044C               	iorwf	sprintf@val+2,w
  6911  0347  044B               	iorwf	sprintf@val+1,w
  6912  0348  044A               	iorwf	sprintf@val,w
  6913  0349  1D03               	skipz
  6914  034A  2B4F               	goto	l2586
  6915                           
  6916                           ;doprnt.c: 1310: prec++;
  6917  034B  3001               	movlw	1
  6918  034C  07D1               	addwf	sprintf@prec,f
  6919  034D  3000               	movlw	0
  6920  034E  3DD2               	addwfc	sprintf@prec+1,f
  6921  034F                     l2586:	
  6922                           
  6923                           ;doprnt.c: 1324: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  6924  034F  01D3               	clrf	sprintf@c
  6925  0350  0AD3               	incf	sprintf@c,f
  6926  0351  300A               	movlw	10
  6927  0352  0653               	xorwf	sprintf@c,w
  6928  0353  1903               	btfsc	3,2
  6929  0354  2B82               	goto	l2598
  6930  0355                     l2592:	
  6931                           
  6932                           ;doprnt.c: 1325: if(val < dpowers[c])
  6933  0355  0853               	movf	sprintf@c,w
  6934  0356  00C2               	movwf	??_sprintf
  6935  0357  01C3               	clrf	??_sprintf+1
  6936  0358  35C2               	lslf	??_sprintf,f
  6937  0359  0DC3               	rlf	??_sprintf+1,f
  6938  035A  35C2               	lslf	??_sprintf,f
  6939  035B  0DC3               	rlf	??_sprintf+1,f
  6940  035C  3000               	movlw	low (_dpowers| (0+32768))
  6941  035D  0742               	addwf	??_sprintf,w
  6942  035E  0084               	movwf	4
  6943  035F  3098               	movlw	high (_dpowers| (0+32768))
  6944  0360  3D43               	addwfc	??_sprintf+1,w
  6945  0361  0085               	movwf	5
  6946  0362  3F00               	moviw [0]fsr0
  6947  0363  00C4               	movwf	??_sprintf+2
  6948  0364  3F01               	moviw [1]fsr0
  6949  0365  00C5               	movwf	??_sprintf+3
  6950  0366  3F02               	moviw [2]fsr0
  6951  0367  00C6               	movwf	??_sprintf+4
  6952  0368  3F03               	moviw [3]fsr0
  6953  0369  00C7               	movwf	??_sprintf+5
  6954  036A  0847               	movf	??_sprintf+5,w
  6955  036B  024D               	subwf	sprintf@val+3,w
  6956  036C  1D03               	skipz
  6957  036D  2B78               	goto	u2595
  6958  036E  0846               	movf	??_sprintf+4,w
  6959  036F  024C               	subwf	sprintf@val+2,w
  6960  0370  1D03               	skipz
  6961  0371  2B78               	goto	u2595
  6962  0372  0845               	movf	??_sprintf+3,w
  6963  0373  024B               	subwf	sprintf@val+1,w
  6964  0374  1D03               	skipz
  6965  0375  2B78               	goto	u2595
  6966  0376  0844               	movf	??_sprintf+2,w
  6967  0377  024A               	subwf	sprintf@val,w
  6968  0378                     u2595:	
  6969  0378  1C03               	btfss	3,0
  6970  0379  2B82               	goto	l2598
  6971                           
  6972                           ;doprnt.c: 1326: break;
  6973  037A  3001               	movlw	1
  6974  037B  00C2               	movwf	??_sprintf
  6975  037C  0842               	movf	??_sprintf,w
  6976  037D  07D3               	addwf	sprintf@c,f
  6977  037E  300A               	movlw	10
  6978  037F  0653               	xorwf	sprintf@c,w
  6979  0380  1D03               	btfss	3,2
  6980  0381  2B55               	goto	l2592
  6981  0382                     l2598:	
  6982                           
  6983                           ;doprnt.c: 1358: if(c < prec)
  6984  0382  0852               	movf	sprintf@prec+1,w
  6985  0383  3A80               	xorlw	128
  6986  0384  3C80               	sublw	128
  6987  0385  1D03               	skipz
  6988  0386  2B89               	goto	u2615
  6989  0387  0851               	movf	sprintf@prec,w
  6990  0388  0253               	subwf	sprintf@c,w
  6991  0389                     u2615:	
  6992  0389  1803               	skipnc
  6993  038A  2B91               	goto	l2602
  6994                           
  6995                           ;doprnt.c: 1359: c = prec;
  6996  038B  0020               	movlb	0	; select bank0
  6997  038C  0851               	movf	sprintf@prec,w
  6998  038D  00C2               	movwf	??_sprintf
  6999  038E  0842               	movf	??_sprintf,w
  7000  038F  00D3               	movwf	sprintf@c
  7001  0390  2BA5               	goto	l427
  7002  0391                     l2602:	
  7003                           
  7004                           ;doprnt.c: 1360: else if(prec < c)
  7005  0391  0020               	movlb	0	; select bank0
  7006  0392  0852               	movf	sprintf@prec+1,w
  7007  0393  3A80               	xorlw	128
  7008  0394  00C2               	movwf	??_sprintf
  7009  0395  3080               	movlw	128
  7010  0396  0242               	subwf	??_sprintf,w
  7011  0397  1D03               	skipz
  7012  0398  2B9B               	goto	u2625
  7013  0399  0853               	movf	sprintf@c,w
  7014  039A  0251               	subwf	sprintf@prec,w
  7015  039B                     u2625:	
  7016  039B  1803               	skipnc
  7017  039C  2BA5               	goto	l427
  7018                           
  7019                           ;doprnt.c: 1361: prec = c;
  7020  039D  0020               	movlb	0	; select bank0
  7021  039E  0853               	movf	sprintf@c,w
  7022  039F  00C2               	movwf	??_sprintf
  7023  03A0  01C3               	clrf	??_sprintf+1
  7024  03A1  0842               	movf	??_sprintf,w
  7025  03A2  00D1               	movwf	sprintf@prec
  7026  03A3  0843               	movf	??_sprintf+1,w
  7027  03A4  00D2               	movwf	sprintf@prec+1
  7028  03A5                     l427:	
  7029                           
  7030                           ;doprnt.c: 1400: if(width > c)
  7031  03A5  0020               	movlb	0	; select bank0
  7032  03A6  0850               	movf	sprintf@width+1,w
  7033  03A7  3A80               	xorlw	128
  7034  03A8  3C80               	sublw	128
  7035  03A9  1D03               	skipz
  7036  03AA  2BAD               	goto	u2635
  7037  03AB  084F               	movf	sprintf@width,w
  7038  03AC  0253               	subwf	sprintf@c,w
  7039  03AD                     u2635:	
  7040  03AD  1803               	skipnc
  7041  03AE  2BB8               	goto	l2608
  7042                           
  7043                           ;doprnt.c: 1401: width -= c;
  7044  03AF  0020               	movlb	0	; select bank0
  7045  03B0  0853               	movf	sprintf@c,w
  7046  03B1  00C2               	movwf	??_sprintf
  7047  03B2  01C3               	clrf	??_sprintf+1
  7048  03B3  0842               	movf	??_sprintf,w
  7049  03B4  02CF               	subwf	sprintf@width,f
  7050  03B5  0843               	movf	??_sprintf+1,w
  7051  03B6  3BD0               	subwfb	sprintf@width+1,f
  7052  03B7  2BBB               	goto	l2610
  7053  03B8                     l2608:	
  7054                           
  7055                           ;doprnt.c: 1402: else;doprnt.c: 1403: width = 0;
  7056  03B8  0020               	movlb	0	; select bank0
  7057  03B9  01CF               	clrf	sprintf@width
  7058  03BA  01D0               	clrf	sprintf@width+1
  7059  03BB                     l2610:	
  7060                           
  7061                           ;doprnt.c: 1441: {;doprnt.c: 1443: if(width;doprnt.c: 1447: )
  7062  03BB  084F               	movf	sprintf@width,w
  7063  03BC  0450               	iorwf	sprintf@width+1,w
  7064  03BD  1903               	btfsc	3,2
  7065  03BE  2C15               	goto	l2624
  7066                           
  7067                           ;doprnt.c: 1449: ((*sp++ = (' ')));
  7068                           
  7069                           ;doprnt.c: 1448: do
  7070  03BF  3020               	movlw	32
  7071  03C0  00C2               	movwf	??_sprintf
  7072  03C1  084E               	movf	sprintf@sp,w
  7073  03C2  0086               	movwf	6
  7074  03C3  3001               	movlw	1	; select bank2/3
  7075  03C4  0087               	movwf	7
  7076  03C5  0842               	movf	??_sprintf,w
  7077  03C6  0081               	movwf	1
  7078  03C7  3001               	movlw	1
  7079  03C8  00C2               	movwf	??_sprintf
  7080  03C9  0842               	movf	??_sprintf,w
  7081  03CA  07CE               	addwf	sprintf@sp,f
  7082                           
  7083                           ;doprnt.c: 1450: while(--width);
  7084  03CB  30FF               	movlw	255
  7085  03CC  07CF               	addwf	sprintf@width,f
  7086  03CD  30FF               	movlw	255
  7087  03CE  3DD0               	addwfc	sprintf@width+1,f
  7088  03CF  2BBB               	goto	l2610
  7089  03D0                     l2618:	
  7090                           ;doprnt.c: 1488: };doprnt.c: 1493: while(prec--) {
  7091                           
  7092                           
  7093                           ;doprnt.c: 1497: {;doprnt.c: 1508: c = (val / dpowers[prec]) % 10 + '0';
  7094  03D0  3000               	movlw	0
  7095  03D1  00B1               	movwf	___llmod@divisor+3
  7096  03D2  3000               	movlw	0
  7097  03D3  00B0               	movwf	___llmod@divisor+2
  7098  03D4  3000               	movlw	0
  7099  03D5  00AF               	movwf	___llmod@divisor+1
  7100  03D6  300A               	movlw	10
  7101  03D7  00AE               	movwf	___llmod@divisor
  7102  03D8  0852               	movf	sprintf@prec+1,w
  7103  03D9  0085               	movwf	5
  7104  03DA  0851               	movf	sprintf@prec,w
  7105  03DB  0084               	movwf	4
  7106  03DC  3584               	lslf	4,f
  7107  03DD  0D85               	rlf	5,f
  7108  03DE  3584               	lslf	4,f
  7109  03DF  0D85               	rlf	5,f
  7110  03E0  3000               	movlw	low (_dpowers| (0+32768))
  7111  03E1  0784               	addwf	4,f
  7112  03E2  3098               	movlw	high (_dpowers| (0+32768))
  7113  03E3  3D85               	addwfc	5,f
  7114  03E4  3F00               	moviw [0]fsr0
  7115  03E5  00A0               	movwf	___lldiv@divisor
  7116  03E6  3F01               	moviw [1]fsr0
  7117  03E7  00A1               	movwf	___lldiv@divisor+1
  7118  03E8  3F02               	moviw [2]fsr0
  7119  03E9  00A2               	movwf	___lldiv@divisor+2
  7120  03EA  3F03               	moviw [3]fsr0
  7121  03EB  00A3               	movwf	___lldiv@divisor+3
  7122  03EC  084D               	movf	sprintf@val+3,w
  7123  03ED  00A7               	movwf	___lldiv@dividend+3
  7124  03EE  084C               	movf	sprintf@val+2,w
  7125  03EF  00A6               	movwf	___lldiv@dividend+2
  7126  03F0  084B               	movf	sprintf@val+1,w
  7127  03F1  00A5               	movwf	___lldiv@dividend+1
  7128  03F2  084A               	movf	sprintf@val,w
  7129  03F3  00A4               	movwf	___lldiv@dividend
  7130  03F4  3189  2156  3182   	fcall	___lldiv
  7131  03F7  0020               	movlb	0	; select bank0
  7132  03F8  0823               	movf	?___lldiv+3,w
  7133  03F9  00B5               	movwf	___llmod@dividend+3
  7134  03FA  0822               	movf	?___lldiv+2,w
  7135  03FB  00B4               	movwf	___llmod@dividend+2
  7136  03FC  0821               	movf	?___lldiv+1,w
  7137  03FD  00B3               	movwf	___llmod@dividend+1
  7138  03FE  0820               	movf	?___lldiv,w
  7139  03FF  00B2               	movwf	___llmod@dividend
  7140  0400  3188  208C  3182   	fcall	___llmod
  7141  0403  0020               	movlb	0	; select bank0
  7142  0404  082E               	movf	?___llmod,w
  7143  0405  3E30               	addlw	48
  7144  0406  00C2               	movwf	??_sprintf
  7145  0407  0842               	movf	??_sprintf,w
  7146  0408  00D3               	movwf	sprintf@c
  7147                           
  7148                           ;doprnt.c: 1542: };doprnt.c: 1543: ((*sp++ = (c)));
  7149  0409  0853               	movf	sprintf@c,w
  7150  040A  00C2               	movwf	??_sprintf
  7151  040B  084E               	movf	sprintf@sp,w
  7152  040C  0086               	movwf	6
  7153  040D  3001               	movlw	1	; select bank2/3
  7154  040E  0087               	movwf	7
  7155  040F  0842               	movf	??_sprintf,w
  7156  0410  0081               	movwf	1
  7157  0411  3001               	movlw	1
  7158  0412  00C2               	movwf	??_sprintf
  7159  0413  0842               	movf	??_sprintf,w
  7160  0414  07CE               	addwf	sprintf@sp,f
  7161  0415                     l2624:	
  7162  0415  30FF               	movlw	255
  7163  0416  07D1               	addwf	sprintf@prec,f
  7164  0417  30FF               	movlw	255
  7165  0418  3DD2               	addwfc	sprintf@prec+1,f
  7166  0419  0A51               	incf	sprintf@prec,w
  7167  041A  1D03               	skipz
  7168  041B  2BD0               	goto	l2618
  7169  041C  0A52               	incf	sprintf@prec+1,w
  7170  041D  1903               	btfsc	3,2
  7171  041E  2A5F               	goto	l2626
  7172  041F  2BD0               	goto	l2618
  7173  0420                     l2628:	
  7174                           ;doprnt.c: 1544: };doprnt.c: 1552: };doprnt.c: 1554: alldone:
  7175                           
  7176                           
  7177                           ;doprnt.c: 1557: *sp = 0;
  7178  0420  084E               	movf	sprintf@sp,w
  7179  0421  0086               	movwf	6
  7180  0422  3001               	movlw	1	; select bank2/3
  7181  0423  0087               	movwf	7
  7182  0424  0181               	clrf	1
  7183  0425  0008               	return
  7184  0426                     __end_of_sprintf:	
  7185                           ;doprnt.c: 1559: return 0;;	Return value of _sprintf is never used
  7186                           
  7187                           
  7188                           	psect	text22
  7189  1548                     __ptext22:	
  7190 ;; *************** function _isdigit *****************
  7191 ;; Defined at:
  7192 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\isdigit.c"
  7193 ;; Parameters:    Size  Location     Type
  7194 ;;  c               1    wreg     unsigned char 
  7195 ;; Auto vars:     Size  Location     Type
  7196 ;;  c               1    1[BANK0 ] unsigned char 
  7197 ;; Return value:  Size  Location     Type
  7198 ;;		None               void
  7199 ;; Registers used:
  7200 ;;		wreg, status,2, status,0
  7201 ;; Tracked objects:
  7202 ;;		On entry : 0/0
  7203 ;;		On exit  : 0/0
  7204 ;;		Unchanged: 0/0
  7205 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7206 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7207 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7208 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7209 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7210 ;;Total ram usage:        2 bytes
  7211 ;; Hardware stack levels used:    1
  7212 ;; Hardware stack levels required when called:    7
  7213 ;; This function calls:
  7214 ;;		Nothing
  7215 ;; This function is called by:
  7216 ;;		_sprintf
  7217 ;; This function uses a non-reentrant model
  7218 ;;
  7219                           
  7220                           
  7221                           ;psect for function _isdigit
  7222  1548                     _isdigit:	
  7223                           
  7224                           ;incstack = 0
  7225                           ; Regs used in _isdigit: [wreg+status,2+status,0]
  7226                           ;isdigit@c stored from wreg
  7227  1548  0020               	movlb	0	; select bank0
  7228  1549  00A1               	movwf	isdigit@c
  7229  154A  01A0               	clrf	_isdigit$1700
  7230  154B  303A               	movlw	58
  7231  154C  0221               	subwf	isdigit@c,w
  7232  154D  1803               	skipnc
  7233  154E  2D55               	goto	l2308
  7234  154F  3030               	movlw	48
  7235  1550  0221               	subwf	isdigit@c,w
  7236  1551  1C03               	skipc
  7237  1552  2D55               	goto	l2308
  7238  1553  01A0               	clrf	_isdigit$1700
  7239  1554  0AA0               	incf	_isdigit$1700,f
  7240  1555                     l2308:	
  7241  1555  0C20               	rrf	_isdigit$1700,w
  7242  1556  0008               	return
  7243  1557                     __end_of_isdigit:	
  7244                           
  7245                           	psect	text23
  7246  15EC                     __ptext23:	
  7247 ;; *************** function ___wmul *****************
  7248 ;; Defined at:
  7249 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\Umul16.c"
  7250 ;; Parameters:    Size  Location     Type
  7251 ;;  multiplier      2    0[BANK0 ] unsigned int 
  7252 ;;  multiplicand    2    2[BANK0 ] unsigned int 
  7253 ;; Auto vars:     Size  Location     Type
  7254 ;;  product         2    4[BANK0 ] unsigned int 
  7255 ;; Return value:  Size  Location     Type
  7256 ;;                  2    0[BANK0 ] unsigned int 
  7257 ;; Registers used:
  7258 ;;		wreg, status,2, status,0
  7259 ;; Tracked objects:
  7260 ;;		On entry : 0/0
  7261 ;;		On exit  : 0/0
  7262 ;;		Unchanged: 0/0
  7263 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7264 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7265 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7266 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7267 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7268 ;;Total ram usage:        6 bytes
  7269 ;; Hardware stack levels used:    1
  7270 ;; Hardware stack levels required when called:    7
  7271 ;; This function calls:
  7272 ;;		Nothing
  7273 ;; This function is called by:
  7274 ;;		_sprintf
  7275 ;; This function uses a non-reentrant model
  7276 ;;
  7277                           
  7278                           
  7279                           ;psect for function ___wmul
  7280  15EC                     ___wmul:	
  7281                           
  7282                           ;incstack = 0
  7283                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  7284  15EC  0020               	movlb	0	; select bank0
  7285  15ED  01A4               	clrf	___wmul@product
  7286  15EE  01A5               	clrf	___wmul@product+1
  7287  15EF                     l2314:	
  7288  15EF  1C20               	btfss	___wmul@multiplier,0
  7289  15F0  2DF5               	goto	l442
  7290  15F1  0822               	movf	___wmul@multiplicand,w
  7291  15F2  07A4               	addwf	___wmul@product,f
  7292  15F3  0823               	movf	___wmul@multiplicand+1,w
  7293  15F4  3DA5               	addwfc	___wmul@product+1,f
  7294  15F5                     l442:	
  7295  15F5  3001               	movlw	1
  7296  15F6                     u2025:	
  7297  15F6  35A2               	lslf	___wmul@multiplicand,f
  7298  15F7  0DA3               	rlf	___wmul@multiplicand+1,f
  7299  15F8  0B89               	decfsz	9,f
  7300  15F9  2DF6               	goto	u2025
  7301  15FA  3001               	movlw	1
  7302  15FB                     u2035:	
  7303  15FB  36A1               	lsrf	___wmul@multiplier+1,f
  7304  15FC  0CA0               	rrf	___wmul@multiplier,f
  7305  15FD  0B89               	decfsz	9,f
  7306  15FE  2DFB               	goto	u2035
  7307  15FF  0820               	movf	___wmul@multiplier,w
  7308  1600  0421               	iorwf	___wmul@multiplier+1,w
  7309  1601  1D03               	btfss	3,2
  7310  1602  2DEF               	goto	l2314
  7311  1603  0825               	movf	___wmul@product+1,w
  7312  1604  00A1               	movwf	?___wmul+1
  7313  1605  0824               	movf	___wmul@product,w
  7314  1606  00A0               	movwf	?___wmul
  7315  1607  0008               	return
  7316  1608                     __end_of___wmul:	
  7317                           
  7318                           	psect	text24
  7319  088C                     __ptext24:	
  7320 ;; *************** function ___llmod *****************
  7321 ;; Defined at:
  7322 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\llmod.c"
  7323 ;; Parameters:    Size  Location     Type
  7324 ;;  divisor         4   14[BANK0 ] unsigned long 
  7325 ;;  dividend        4   18[BANK0 ] unsigned long 
  7326 ;; Auto vars:     Size  Location     Type
  7327 ;;  counter         1   23[BANK0 ] unsigned char 
  7328 ;; Return value:  Size  Location     Type
  7329 ;;                  4   14[BANK0 ] unsigned long 
  7330 ;; Registers used:
  7331 ;;		wreg, status,2, status,0
  7332 ;; Tracked objects:
  7333 ;;		On entry : 0/0
  7334 ;;		On exit  : 0/0
  7335 ;;		Unchanged: 0/0
  7336 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7337 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7338 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7339 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7340 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7341 ;;Total ram usage:       10 bytes
  7342 ;; Hardware stack levels used:    1
  7343 ;; Hardware stack levels required when called:    7
  7344 ;; This function calls:
  7345 ;;		Nothing
  7346 ;; This function is called by:
  7347 ;;		_sprintf
  7348 ;; This function uses a non-reentrant model
  7349 ;;
  7350                           
  7351                           
  7352                           ;psect for function ___llmod
  7353  088C                     ___llmod:	
  7354                           
  7355                           ;incstack = 0
  7356                           ; Regs used in ___llmod: [wreg+status,2+status,0]
  7357  088C  0020               	movlb	0	; select bank0
  7358  088D  0831               	movf	___llmod@divisor+3,w
  7359  088E  0430               	iorwf	___llmod@divisor+2,w
  7360  088F  042F               	iorwf	___llmod@divisor+1,w
  7361  0890  042E               	iorwf	___llmod@divisor,w
  7362  0891  1903               	skipnz
  7363  0892  28C6               	goto	l2436
  7364  0893  01B7               	clrf	___llmod@counter
  7365  0894  0AB7               	incf	___llmod@counter,f
  7366  0895                     l2426:	
  7367  0895  1BB1               	btfsc	___llmod@divisor+3,7
  7368  0896  28A3               	goto	l2428
  7369  0897  3001               	movlw	1
  7370  0898                     u2365:	
  7371  0898  35AE               	lslf	___llmod@divisor,f
  7372  0899  0DAF               	rlf	___llmod@divisor+1,f
  7373  089A  0DB0               	rlf	___llmod@divisor+2,f
  7374  089B  0DB1               	rlf	___llmod@divisor+3,f
  7375  089C  0B89               	decfsz	9,f
  7376  089D  2898               	goto	u2365
  7377  089E  3001               	movlw	1
  7378  089F  00B6               	movwf	??___llmod
  7379  08A0  0836               	movf	??___llmod,w
  7380  08A1  07B7               	addwf	___llmod@counter,f
  7381  08A2  2895               	goto	l2426
  7382  08A3                     l2428:	
  7383  08A3  0831               	movf	___llmod@divisor+3,w
  7384  08A4  0235               	subwf	___llmod@dividend+3,w
  7385  08A5  1D03               	skipz
  7386  08A6  28B1               	goto	u2385
  7387  08A7  0830               	movf	___llmod@divisor+2,w
  7388  08A8  0234               	subwf	___llmod@dividend+2,w
  7389  08A9  1D03               	skipz
  7390  08AA  28B1               	goto	u2385
  7391  08AB  082F               	movf	___llmod@divisor+1,w
  7392  08AC  0233               	subwf	___llmod@dividend+1,w
  7393  08AD  1D03               	skipz
  7394  08AE  28B1               	goto	u2385
  7395  08AF  082E               	movf	___llmod@divisor,w
  7396  08B0  0232               	subwf	___llmod@dividend,w
  7397  08B1                     u2385:	
  7398  08B1  1C03               	skipc
  7399  08B2  28BB               	goto	l2432
  7400  08B3  082E               	movf	___llmod@divisor,w
  7401  08B4  02B2               	subwf	___llmod@dividend,f
  7402  08B5  082F               	movf	___llmod@divisor+1,w
  7403  08B6  3BB3               	subwfb	___llmod@dividend+1,f
  7404  08B7  0830               	movf	___llmod@divisor+2,w
  7405  08B8  3BB4               	subwfb	___llmod@dividend+2,f
  7406  08B9  0831               	movf	___llmod@divisor+3,w
  7407  08BA  3BB5               	subwfb	___llmod@dividend+3,f
  7408  08BB                     l2432:	
  7409  08BB  3001               	movlw	1
  7410  08BC                     u2395:	
  7411  08BC  36B1               	lsrf	___llmod@divisor+3,f
  7412  08BD  0CB0               	rrf	___llmod@divisor+2,f
  7413  08BE  0CAF               	rrf	___llmod@divisor+1,f
  7414  08BF  0CAE               	rrf	___llmod@divisor,f
  7415  08C0  0B89               	decfsz	9,f
  7416  08C1  28BC               	goto	u2395
  7417  08C2  3001               	movlw	1
  7418  08C3  02B7               	subwf	___llmod@counter,f
  7419  08C4  1D03               	btfss	3,2
  7420  08C5  28A3               	goto	l2428
  7421  08C6                     l2436:	
  7422  08C6  0835               	movf	___llmod@dividend+3,w
  7423  08C7  00B1               	movwf	?___llmod+3
  7424  08C8  0834               	movf	___llmod@dividend+2,w
  7425  08C9  00B0               	movwf	?___llmod+2
  7426  08CA  0833               	movf	___llmod@dividend+1,w
  7427  08CB  00AF               	movwf	?___llmod+1
  7428  08CC  0832               	movf	___llmod@dividend,w
  7429  08CD  00AE               	movwf	?___llmod
  7430  08CE  0008               	return
  7431  08CF                     __end_of___llmod:	
  7432                           
  7433                           	psect	text25
  7434  0956                     __ptext25:	
  7435 ;; *************** function ___lldiv *****************
  7436 ;; Defined at:
  7437 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\__lldiv.c"
  7438 ;; Parameters:    Size  Location     Type
  7439 ;;  divisor         4    0[BANK0 ] unsigned long 
  7440 ;;  dividend        4    4[BANK0 ] unsigned long 
  7441 ;; Auto vars:     Size  Location     Type
  7442 ;;  quotient        4    9[BANK0 ] unsigned long 
  7443 ;;  counter         1   13[BANK0 ] unsigned char 
  7444 ;; Return value:  Size  Location     Type
  7445 ;;                  4    0[BANK0 ] unsigned long 
  7446 ;; Registers used:
  7447 ;;		wreg, status,2, status,0
  7448 ;; Tracked objects:
  7449 ;;		On entry : 0/0
  7450 ;;		On exit  : 0/0
  7451 ;;		Unchanged: 0/0
  7452 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7453 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7454 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7455 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7456 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7457 ;;Total ram usage:       14 bytes
  7458 ;; Hardware stack levels used:    1
  7459 ;; Hardware stack levels required when called:    7
  7460 ;; This function calls:
  7461 ;;		Nothing
  7462 ;; This function is called by:
  7463 ;;		_sprintf
  7464 ;; This function uses a non-reentrant model
  7465 ;;
  7466                           
  7467                           
  7468                           ;psect for function ___lldiv
  7469  0956                     ___lldiv:	
  7470                           
  7471                           ;incstack = 0
  7472                           ; Regs used in ___lldiv: [wreg+status,2+status,0]
  7473  0956  3000               	movlw	0
  7474  0957  0020               	movlb	0	; select bank0
  7475  0958  00AC               	movwf	___lldiv@quotient+3
  7476  0959  3000               	movlw	0
  7477  095A  00AB               	movwf	___lldiv@quotient+2
  7478  095B  3000               	movlw	0
  7479  095C  00AA               	movwf	___lldiv@quotient+1
  7480  095D  3000               	movlw	0
  7481  095E  00A9               	movwf	___lldiv@quotient
  7482  095F  0823               	movf	___lldiv@divisor+3,w
  7483  0960  0422               	iorwf	___lldiv@divisor+2,w
  7484  0961  0421               	iorwf	___lldiv@divisor+1,w
  7485  0962  0420               	iorwf	___lldiv@divisor,w
  7486  0963  1903               	skipnz
  7487  0964  29A0               	goto	l2346
  7488  0965  01AD               	clrf	___lldiv@counter
  7489  0966  0AAD               	incf	___lldiv@counter,f
  7490  0967                     l2332:	
  7491  0967  1BA3               	btfsc	___lldiv@divisor+3,7
  7492  0968  2975               	goto	l2334
  7493  0969  3001               	movlw	1
  7494  096A                     u2065:	
  7495  096A  35A0               	lslf	___lldiv@divisor,f
  7496  096B  0DA1               	rlf	___lldiv@divisor+1,f
  7497  096C  0DA2               	rlf	___lldiv@divisor+2,f
  7498  096D  0DA3               	rlf	___lldiv@divisor+3,f
  7499  096E  0B89               	decfsz	9,f
  7500  096F  296A               	goto	u2065
  7501  0970  3001               	movlw	1
  7502  0971  00A8               	movwf	??___lldiv
  7503  0972  0828               	movf	??___lldiv,w
  7504  0973  07AD               	addwf	___lldiv@counter,f
  7505  0974  2967               	goto	l2332
  7506  0975                     l2334:	
  7507  0975  3001               	movlw	1
  7508  0976                     u2085:	
  7509  0976  35A9               	lslf	___lldiv@quotient,f
  7510  0977  0DAA               	rlf	___lldiv@quotient+1,f
  7511  0978  0DAB               	rlf	___lldiv@quotient+2,f
  7512  0979  0DAC               	rlf	___lldiv@quotient+3,f
  7513  097A  0B89               	decfsz	9,f
  7514  097B  2976               	goto	u2085
  7515  097C  0823               	movf	___lldiv@divisor+3,w
  7516  097D  0227               	subwf	___lldiv@dividend+3,w
  7517  097E  1D03               	skipz
  7518  097F  298A               	goto	u2095
  7519  0980  0822               	movf	___lldiv@divisor+2,w
  7520  0981  0226               	subwf	___lldiv@dividend+2,w
  7521  0982  1D03               	skipz
  7522  0983  298A               	goto	u2095
  7523  0984  0821               	movf	___lldiv@divisor+1,w
  7524  0985  0225               	subwf	___lldiv@dividend+1,w
  7525  0986  1D03               	skipz
  7526  0987  298A               	goto	u2095
  7527  0988  0820               	movf	___lldiv@divisor,w
  7528  0989  0224               	subwf	___lldiv@dividend,w
  7529  098A                     u2095:	
  7530  098A  1C03               	skipc
  7531  098B  2995               	goto	l2342
  7532  098C  0820               	movf	___lldiv@divisor,w
  7533  098D  02A4               	subwf	___lldiv@dividend,f
  7534  098E  0821               	movf	___lldiv@divisor+1,w
  7535  098F  3BA5               	subwfb	___lldiv@dividend+1,f
  7536  0990  0822               	movf	___lldiv@divisor+2,w
  7537  0991  3BA6               	subwfb	___lldiv@dividend+2,f
  7538  0992  0823               	movf	___lldiv@divisor+3,w
  7539  0993  3BA7               	subwfb	___lldiv@dividend+3,f
  7540  0994  1429               	bsf	___lldiv@quotient,0
  7541  0995                     l2342:	
  7542  0995  3001               	movlw	1
  7543  0996                     u2105:	
  7544  0996  36A3               	lsrf	___lldiv@divisor+3,f
  7545  0997  0CA2               	rrf	___lldiv@divisor+2,f
  7546  0998  0CA1               	rrf	___lldiv@divisor+1,f
  7547  0999  0CA0               	rrf	___lldiv@divisor,f
  7548  099A  0B89               	decfsz	9,f
  7549  099B  2996               	goto	u2105
  7550  099C  3001               	movlw	1
  7551  099D  02AD               	subwf	___lldiv@counter,f
  7552  099E  1D03               	btfss	3,2
  7553  099F  2975               	goto	l2334
  7554  09A0                     l2346:	
  7555  09A0  082C               	movf	___lldiv@quotient+3,w
  7556  09A1  00A3               	movwf	?___lldiv+3
  7557  09A2  082B               	movf	___lldiv@quotient+2,w
  7558  09A3  00A2               	movwf	?___lldiv+2
  7559  09A4  082A               	movf	___lldiv@quotient+1,w
  7560  09A5  00A1               	movwf	?___lldiv+1
  7561  09A6  0829               	movf	___lldiv@quotient,w
  7562  09A7  00A0               	movwf	?___lldiv
  7563  09A8  0008               	return
  7564  09A9                     __end_of___lldiv:	
  7565                           
  7566                           	psect	text26
  7567  1747                     __ptext26:	
  7568 ;; *************** function ___lltoft *****************
  7569 ;; Defined at:
  7570 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\lltoft.c"
  7571 ;; Parameters:    Size  Location     Type
  7572 ;;  c               4    8[BANK0 ] unsigned long 
  7573 ;; Auto vars:     Size  Location     Type
  7574 ;;  exp             1   13[BANK0 ] unsigned char 
  7575 ;; Return value:  Size  Location     Type
  7576 ;;                  3    8[BANK0 ] float 
  7577 ;; Registers used:
  7578 ;;		wreg, status,2, status,0, pclath, cstack
  7579 ;; Tracked objects:
  7580 ;;		On entry : 0/0
  7581 ;;		On exit  : 0/0
  7582 ;;		Unchanged: 0/0
  7583 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7584 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7585 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7586 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7587 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7588 ;;Total ram usage:        6 bytes
  7589 ;; Hardware stack levels used:    1
  7590 ;; Hardware stack levels required when called:    8
  7591 ;; This function calls:
  7592 ;;		___ftpack
  7593 ;; This function is called by:
  7594 ;;		_loop
  7595 ;;		_ftoa
  7596 ;; This function uses a non-reentrant model
  7597 ;;
  7598                           
  7599                           
  7600                           ;psect for function ___lltoft
  7601  1747                     ___lltoft:	
  7602                           
  7603                           ;incstack = 0
  7604                           ; Regs used in ___lltoft: [wreg+status,2+status,0+pclath+cstack]
  7605  1747  308E               	movlw	142
  7606  1748  0020               	movlb	0	; select bank0
  7607  1749  00AC               	movwf	??___lltoft
  7608  174A  082C               	movf	??___lltoft,w
  7609  174B  00AD               	movwf	___lltoft@exp
  7610  174C                     l2778:	
  7611  174C  30FF               	movlw	255
  7612  174D  052B               	andwf	___lltoft@c+3,w
  7613  174E  1903               	btfsc	3,2
  7614  174F  2F5C               	goto	l2780
  7615  1750  3001               	movlw	1
  7616  1751                     u2975:	
  7617  1751  36AB               	lsrf	___lltoft@c+3,f
  7618  1752  0CAA               	rrf	___lltoft@c+2,f
  7619  1753  0CA9               	rrf	___lltoft@c+1,f
  7620  1754  0CA8               	rrf	___lltoft@c,f
  7621  1755  0B89               	decfsz	9,f
  7622  1756  2F51               	goto	u2975
  7623  1757  3001               	movlw	1
  7624  1758  00AC               	movwf	??___lltoft
  7625  1759  082C               	movf	??___lltoft,w
  7626  175A  07AD               	addwf	___lltoft@exp,f
  7627  175B  2F4C               	goto	l2778
  7628  175C                     l2780:	
  7629  175C  0828               	movf	___lltoft@c,w
  7630  175D  00A0               	movwf	___ftpack@arg
  7631  175E  0829               	movf	___lltoft@c+1,w
  7632  175F  00A1               	movwf	___ftpack@arg+1
  7633  1760  082A               	movf	___lltoft@c+2,w
  7634  1761  00A2               	movwf	___ftpack@arg+2
  7635  1762  082D               	movf	___lltoft@exp,w
  7636  1763  00AC               	movwf	??___lltoft
  7637  1764  082C               	movf	??___lltoft,w
  7638  1765  00A3               	movwf	___ftpack@exp
  7639  1766  01A4               	clrf	___ftpack@sign
  7640  1767  318A  2208         	fcall	___ftpack
  7641  1769  0020               	movlb	0	; select bank0
  7642  176A  0820               	movf	?___ftpack,w
  7643  176B  00A8               	movwf	?___lltoft
  7644  176C  0821               	movf	?___ftpack+1,w
  7645  176D  00A9               	movwf	?___lltoft+1
  7646  176E  0822               	movf	?___ftpack+2,w
  7647  176F  00AA               	movwf	?___lltoft+2
  7648  1770  0008               	return
  7649  1771                     __end_of___lltoft:	
  7650                           
  7651                           	psect	text27
  7652  0B76                     __ptext27:	
  7653 ;; *************** function ___fttol *****************
  7654 ;; Defined at:
  7655 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\fttol.c"
  7656 ;; Parameters:    Size  Location     Type
  7657 ;;  f1              3   71[BANK0 ] float 
  7658 ;; Auto vars:     Size  Location     Type
  7659 ;;  lval            4    1[BANK1 ] unsigned long 
  7660 ;;  exp1            1    5[BANK1 ] unsigned char 
  7661 ;;  sign1           1    0[BANK1 ] unsigned char 
  7662 ;; Return value:  Size  Location     Type
  7663 ;;                  4   71[BANK0 ] long 
  7664 ;; Registers used:
  7665 ;;		wreg, status,2, status,0
  7666 ;; Tracked objects:
  7667 ;;		On entry : 0/0
  7668 ;;		On exit  : 0/0
  7669 ;;		Unchanged: 0/0
  7670 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7671 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7672 ;;      Locals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0
  7673 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7674 ;;      Totals:         0       8       6       0       0       0       0       0       0       0       0       0       
      +0       0
  7675 ;;Total ram usage:       14 bytes
  7676 ;; Hardware stack levels used:    1
  7677 ;; Hardware stack levels required when called:    7
  7678 ;; This function calls:
  7679 ;;		Nothing
  7680 ;; This function is called by:
  7681 ;;		_ftoa
  7682 ;; This function uses a non-reentrant model
  7683 ;;
  7684                           
  7685                           
  7686                           ;psect for function ___fttol
  7687  0B76                     ___fttol:	
  7688                           
  7689                           ;incstack = 0
  7690                           ; Regs used in ___fttol: [wreg+status,2+status,0]
  7691  0B76  0020               	movlb	0	; select bank0
  7692  0B77  0867               	movf	___fttol@f1,w
  7693  0B78  00EB               	movwf	??___fttol
  7694  0B79  0868               	movf	___fttol@f1+1,w
  7695  0B7A  00EC               	movwf	??___fttol+1
  7696  0B7B  0869               	movf	___fttol@f1+2,w
  7697  0B7C  00ED               	movwf	??___fttol+2
  7698  0B7D  1003               	clrc
  7699  0B7E  0D6C               	rlf	??___fttol+1,w
  7700  0B7F  0D6D               	rlf	??___fttol+2,w
  7701  0B80  00EE               	movwf	??___fttol+3
  7702  0B81  086E               	movf	??___fttol+3,w
  7703  0B82  0021               	movlb	1	; select bank1
  7704  0B83  00A5               	movwf	___fttol@exp1^(0+128)
  7705  0B84  0825               	movf	___fttol@exp1^(0+128),w
  7706  0B85  1D03               	btfss	3,2
  7707  0B86  2B91               	goto	l2738
  7708  0B87  3000               	movlw	0
  7709  0B88  0020               	movlb	0	; select bank0
  7710  0B89  00EA               	movwf	?___fttol+3
  7711  0B8A  3000               	movlw	0
  7712  0B8B  00E9               	movwf	?___fttol+2
  7713  0B8C  3000               	movlw	0
  7714  0B8D  00E8               	movwf	?___fttol+1
  7715  0B8E  3000               	movlw	0
  7716  0B8F  00E7               	movwf	?___fttol
  7717  0B90  0008               	return
  7718  0B91                     l2738:	
  7719  0B91  0020               	movlb	0	; select bank0
  7720  0B92  0867               	movf	___fttol@f1,w
  7721  0B93  00EB               	movwf	??___fttol
  7722  0B94  0868               	movf	___fttol@f1+1,w
  7723  0B95  00EC               	movwf	??___fttol+1
  7724  0B96  0869               	movf	___fttol@f1+2,w
  7725  0B97  00ED               	movwf	??___fttol+2
  7726  0B98  3017               	movlw	23
  7727  0B99                     u2885:	
  7728  0B99  36ED               	lsrf	??___fttol+2,f
  7729  0B9A  0CEC               	rrf	??___fttol+1,f
  7730  0B9B  0CEB               	rrf	??___fttol,f
  7731  0B9C  0B89               	decfsz	9,f
  7732  0B9D  2B99               	goto	u2885
  7733  0B9E  086B               	movf	??___fttol,w
  7734  0B9F  00EE               	movwf	??___fttol+3
  7735  0BA0  086E               	movf	??___fttol+3,w
  7736  0BA1  0021               	movlb	1	; select bank1
  7737  0BA2  00A0               	movwf	___fttol@sign1^(0+128)
  7738  0BA3  0020               	movlb	0	; select bank0
  7739  0BA4  17E8               	bsf	___fttol@f1+1,7
  7740  0BA5  30FF               	movlw	255
  7741  0BA6  05E7               	andwf	___fttol@f1,f
  7742  0BA7  30FF               	movlw	255
  7743  0BA8  05E8               	andwf	___fttol@f1+1,f
  7744  0BA9  3000               	movlw	0
  7745  0BAA  05E9               	andwf	___fttol@f1+2,f
  7746  0BAB  0867               	movf	___fttol@f1,w
  7747  0BAC  0021               	movlb	1	; select bank1
  7748  0BAD  00A1               	movwf	___fttol@lval^(0+128)
  7749  0BAE  0020               	movlb	0	; select bank0
  7750  0BAF  0868               	movf	___fttol@f1+1,w
  7751  0BB0  0021               	movlb	1	; select bank1
  7752  0BB1  00A2               	movwf	(___fttol@lval^(0+128)+1)
  7753  0BB2  0020               	movlb	0	; select bank0
  7754  0BB3  0869               	movf	___fttol@f1+2,w
  7755  0BB4  0021               	movlb	1	; select bank1
  7756  0BB5  00A3               	movwf	(___fttol@lval^(0+128)+2)
  7757  0BB6  01A4               	clrf	(___fttol@lval^(0+128)+3)
  7758  0BB7  308E               	movlw	142
  7759  0BB8  02A5               	subwf	___fttol@exp1^(0+128),f
  7760  0BB9  1FA5               	btfss	___fttol@exp1^(0+128),7
  7761  0BBA  2BDB               	goto	l2758
  7762  0BBB  0825               	movf	___fttol@exp1^(0+128),w
  7763  0BBC  3A80               	xorlw	128
  7764  0BBD  3E8F               	addlw	143
  7765  0BBE  1803               	skipnc
  7766  0BBF  2BCA               	goto	l2756
  7767  0BC0  3000               	movlw	0
  7768  0BC1  0020               	movlb	0	; select bank0
  7769  0BC2  00EA               	movwf	?___fttol+3
  7770  0BC3  3000               	movlw	0
  7771  0BC4  00E9               	movwf	?___fttol+2
  7772  0BC5  3000               	movlw	0
  7773  0BC6  00E8               	movwf	?___fttol+1
  7774  0BC7  3000               	movlw	0
  7775  0BC8  00E7               	movwf	?___fttol
  7776  0BC9  0008               	return
  7777  0BCA                     l2756:	
  7778  0BCA  3001               	movlw	1
  7779  0BCB                     u2915:	
  7780  0BCB  0021               	movlb	1	; select bank1
  7781  0BCC  36A4               	lsrf	(___fttol@lval+3)^(0+128),f
  7782  0BCD  0CA3               	rrf	(___fttol@lval+2)^(0+128),f
  7783  0BCE  0CA2               	rrf	(___fttol@lval+1)^(0+128),f
  7784  0BCF  0CA1               	rrf	___fttol@lval^(0+128),f
  7785  0BD0  0B89               	decfsz	9,f
  7786  0BD1  2BCB               	goto	u2915
  7787  0BD2  3001               	movlw	1
  7788  0BD3  0020               	movlb	0	; select bank0
  7789  0BD4  00EB               	movwf	??___fttol
  7790  0BD5  086B               	movf	??___fttol,w
  7791  0BD6  0021               	movlb	1	; select bank1
  7792  0BD7  07A5               	addwf	___fttol@exp1^(0+128),f
  7793  0BD8  1903               	btfsc	3,2
  7794  0BD9  2BF7               	goto	l2766
  7795  0BDA  2BCA               	goto	l2756
  7796  0BDB                     l2758:	
  7797  0BDB  3018               	movlw	24
  7798  0BDC  0225               	subwf	___fttol@exp1^(0+128),w
  7799  0BDD  1C03               	skipc
  7800  0BDE  2BF3               	goto	l736
  7801  0BDF  3000               	movlw	0
  7802  0BE0  0020               	movlb	0	; select bank0
  7803  0BE1  00EA               	movwf	?___fttol+3
  7804  0BE2  3000               	movlw	0
  7805  0BE3  00E9               	movwf	?___fttol+2
  7806  0BE4  3000               	movlw	0
  7807  0BE5  00E8               	movwf	?___fttol+1
  7808  0BE6  3000               	movlw	0
  7809  0BE7  00E7               	movwf	?___fttol
  7810  0BE8  0008               	return
  7811  0BE9                     l2764:	
  7812  0BE9  3001               	movlw	1
  7813  0BEA                     u2945:	
  7814  0BEA  0021               	movlb	1	; select bank1
  7815  0BEB  35A1               	lslf	___fttol@lval^(0+128),f
  7816  0BEC  0DA2               	rlf	(___fttol@lval+1)^(0+128),f
  7817  0BED  0DA3               	rlf	(___fttol@lval+2)^(0+128),f
  7818  0BEE  0DA4               	rlf	(___fttol@lval+3)^(0+128),f
  7819  0BEF  0B89               	decfsz	9,f
  7820  0BF0  2BEA               	goto	u2945
  7821  0BF1  3001               	movlw	1
  7822  0BF2  02A5               	subwf	___fttol@exp1^(0+128),f
  7823  0BF3                     l736:	
  7824  0BF3  0021               	movlb	1	; select bank1
  7825  0BF4  0825               	movf	___fttol@exp1^(0+128),w
  7826  0BF5  1D03               	btfss	3,2
  7827  0BF6  2BE9               	goto	l2764
  7828  0BF7                     l2766:	
  7829  0BF7  0820               	movf	___fttol@sign1^(0+128),w
  7830  0BF8  1903               	btfsc	3,2
  7831  0BF9  2C05               	goto	l2770
  7832  0BFA  09A1               	comf	___fttol@lval^(0+128),f
  7833  0BFB  09A2               	comf	(___fttol@lval+1)^(0+128),f
  7834  0BFC  09A3               	comf	(___fttol@lval+2)^(0+128),f
  7835  0BFD  09A4               	comf	(___fttol@lval+3)^(0+128),f
  7836  0BFE  0AA1               	incf	___fttol@lval^(0+128),f
  7837  0BFF  1903               	skipnz
  7838  0C00  0AA2               	incf	(___fttol@lval+1)^(0+128),f
  7839  0C01  1903               	skipnz
  7840  0C02  0AA3               	incf	(___fttol@lval+2)^(0+128),f
  7841  0C03  1903               	skipnz
  7842  0C04  0AA4               	incf	(___fttol@lval+3)^(0+128),f
  7843  0C05                     l2770:	
  7844  0C05  0824               	movf	(___fttol@lval+3)^(0+128),w
  7845  0C06  0020               	movlb	0	; select bank0
  7846  0C07  00EA               	movwf	?___fttol+3
  7847  0C08  0021               	movlb	1	; select bank1
  7848  0C09  0823               	movf	(___fttol@lval+2)^(0+128),w
  7849  0C0A  0020               	movlb	0	; select bank0
  7850  0C0B  00E9               	movwf	?___fttol+2
  7851  0C0C  0021               	movlb	1	; select bank1
  7852  0C0D  0822               	movf	(___fttol@lval+1)^(0+128),w
  7853  0C0E  0020               	movlb	0	; select bank0
  7854  0C0F  00E8               	movwf	?___fttol+1
  7855  0C10  0021               	movlb	1	; select bank1
  7856  0C11  0821               	movf	___fttol@lval^(0+128),w
  7857  0C12  0020               	movlb	0	; select bank0
  7858  0C13  00E7               	movwf	?___fttol
  7859  0C14  0008               	return
  7860  0C15                     __end_of___fttol:	
  7861                           
  7862                           	psect	text28
  7863  165E                     __ptext28:	
  7864 ;; *************** function ___ftsub *****************
  7865 ;; Defined at:
  7866 ;;		line 17 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\ftsub.c"
  7867 ;; Parameters:    Size  Location     Type
  7868 ;;  f2              3   27[BANK0 ] float 
  7869 ;;  f1              3   30[BANK0 ] float 
  7870 ;; Auto vars:     Size  Location     Type
  7871 ;;		None
  7872 ;; Return value:  Size  Location     Type
  7873 ;;                  3   27[BANK0 ] float 
  7874 ;; Registers used:
  7875 ;;		wreg, status,2, status,0, pclath, cstack
  7876 ;; Tracked objects:
  7877 ;;		On entry : 0/0
  7878 ;;		On exit  : 0/0
  7879 ;;		Unchanged: 0/0
  7880 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7881 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7882 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7883 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7884 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7885 ;;Total ram usage:        6 bytes
  7886 ;; Hardware stack levels used:    1
  7887 ;; Hardware stack levels required when called:    9
  7888 ;; This function calls:
  7889 ;;		___ftadd
  7890 ;; This function is called by:
  7891 ;;		_ftoa
  7892 ;; This function uses a non-reentrant model
  7893 ;;
  7894                           
  7895                           
  7896                           ;psect for function ___ftsub
  7897  165E                     ___ftsub:	
  7898                           
  7899                           ;incstack = 0
  7900                           ; Regs used in ___ftsub: [wreg+status,2+status,0+pclath+cstack]
  7901  165E  0020               	movlb	0	; select bank0
  7902  165F  083D               	movf	___ftsub@f2+2,w
  7903  1660  043C               	iorwf	___ftsub@f2+1,w
  7904  1661  043B               	iorwf	___ftsub@f2,w
  7905  1662  1903               	skipnz
  7906  1663  2E66               	goto	l2728
  7907  1664  3080               	movlw	128
  7908  1665  06BD               	xorwf	___ftsub@f2+2,f
  7909  1666                     l2728:	
  7910  1666  083E               	movf	___ftsub@f1,w
  7911  1667  00AE               	movwf	___ftadd@f1
  7912  1668  083F               	movf	___ftsub@f1+1,w
  7913  1669  00AF               	movwf	___ftadd@f1+1
  7914  166A  0840               	movf	___ftsub@f1+2,w
  7915  166B  00B0               	movwf	___ftadd@f1+2
  7916  166C  083B               	movf	___ftsub@f2,w
  7917  166D  00B1               	movwf	___ftadd@f2
  7918  166E  083C               	movf	___ftsub@f2+1,w
  7919  166F  00B2               	movwf	___ftadd@f2+1
  7920  1670  083D               	movf	___ftsub@f2+2,w
  7921  1671  00B3               	movwf	___ftadd@f2+2
  7922  1672  318F  270A         	fcall	___ftadd
  7923  1674  0020               	movlb	0	; select bank0
  7924  1675  082E               	movf	?___ftadd,w
  7925  1676  00BB               	movwf	?___ftsub
  7926  1677  082F               	movf	?___ftadd+1,w
  7927  1678  00BC               	movwf	?___ftsub+1
  7928  1679  0830               	movf	?___ftadd+2,w
  7929  167A  00BD               	movwf	?___ftsub+2
  7930  167B  0008               	return
  7931  167C                     __end_of___ftsub:	
  7932                           
  7933                           	psect	text29
  7934  1532                     __ptext29:	
  7935 ;; *************** function ___ftneg *****************
  7936 ;; Defined at:
  7937 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\ftneg.c"
  7938 ;; Parameters:    Size  Location     Type
  7939 ;;  f1              3   55[BANK0 ] float 
  7940 ;; Auto vars:     Size  Location     Type
  7941 ;;		None
  7942 ;; Return value:  Size  Location     Type
  7943 ;;                  3   55[BANK0 ] float 
  7944 ;; Registers used:
  7945 ;;		wreg
  7946 ;; Tracked objects:
  7947 ;;		On entry : 0/0
  7948 ;;		On exit  : 0/0
  7949 ;;		Unchanged: 0/0
  7950 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7951 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7952 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7953 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7954 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7955 ;;Total ram usage:        3 bytes
  7956 ;; Hardware stack levels used:    1
  7957 ;; Hardware stack levels required when called:    7
  7958 ;; This function calls:
  7959 ;;		Nothing
  7960 ;; This function is called by:
  7961 ;;		_loop
  7962 ;;		_ftoa
  7963 ;; This function uses a non-reentrant model
  7964 ;;
  7965                           
  7966                           
  7967                           ;psect for function ___ftneg
  7968  1532                     ___ftneg:	
  7969                           
  7970                           ;incstack = 0
  7971                           ; Regs used in ___ftneg: [wreg]
  7972  1532  0020               	movlb	0	; select bank0
  7973  1533  0859               	movf	___ftneg@f1+2,w
  7974  1534  0458               	iorwf	___ftneg@f1+1,w
  7975  1535  0457               	iorwf	___ftneg@f1,w
  7976  1536  1903               	skipnz
  7977  1537  0008               	return
  7978  1538  3080               	movlw	128
  7979  1539  06D9               	xorwf	___ftneg@f1+2,f
  7980  153A  0008               	return
  7981  153B                     __end_of___ftneg:	
  7982                           
  7983                           	psect	text30
  7984  0D64                     __ptext30:	
  7985 ;; *************** function ___ftmul *****************
  7986 ;; Defined at:
  7987 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\ftmul.c"
  7988 ;; Parameters:    Size  Location     Type
  7989 ;;  f1              3   55[BANK0 ] float 
  7990 ;;  f2              3   58[BANK0 ] float 
  7991 ;; Auto vars:     Size  Location     Type
  7992 ;;  f3_as_produc    3   66[BANK0 ] unsigned um
  7993 ;;  sign            1   70[BANK0 ] unsigned char 
  7994 ;;  cntr            1   69[BANK0 ] unsigned char 
  7995 ;;  exp             1   65[BANK0 ] unsigned char 
  7996 ;; Return value:  Size  Location     Type
  7997 ;;                  3   55[BANK0 ] float 
  7998 ;; Registers used:
  7999 ;;		wreg, status,2, status,0, pclath, cstack
  8000 ;; Tracked objects:
  8001 ;;		On entry : 0/0
  8002 ;;		On exit  : 0/0
  8003 ;;		Unchanged: 0/0
  8004 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8005 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8006 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8007 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8008 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8009 ;;Total ram usage:       16 bytes
  8010 ;; Hardware stack levels used:    1
  8011 ;; Hardware stack levels required when called:    8
  8012 ;; This function calls:
  8013 ;;		___ftpack
  8014 ;; This function is called by:
  8015 ;;		_loop
  8016 ;;		_ftoa
  8017 ;; This function uses a non-reentrant model
  8018 ;;
  8019                           
  8020                           
  8021                           ;psect for function ___ftmul
  8022  0D64                     ___ftmul:	
  8023                           
  8024                           ;incstack = 0
  8025                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
  8026  0D64  0020               	movlb	0	; select bank0
  8027  0D65  0857               	movf	___ftmul@f1,w
  8028  0D66  00DD               	movwf	??___ftmul
  8029  0D67  0858               	movf	___ftmul@f1+1,w
  8030  0D68  00DE               	movwf	??___ftmul+1
  8031  0D69  0859               	movf	___ftmul@f1+2,w
  8032  0D6A  00DF               	movwf	??___ftmul+2
  8033  0D6B  1003               	clrc
  8034  0D6C  0D5E               	rlf	??___ftmul+1,w
  8035  0D6D  0D5F               	rlf	??___ftmul+2,w
  8036  0D6E  00E0               	movwf	??___ftmul+3
  8037  0D6F  0860               	movf	??___ftmul+3,w
  8038  0D70  00E1               	movwf	___ftmul@exp
  8039  0D71  0861               	movf	___ftmul@exp,w
  8040  0D72  1D03               	btfss	3,2
  8041  0D73  2D7B               	goto	l2672
  8042  0D74  3000               	movlw	0
  8043  0D75  00D7               	movwf	?___ftmul
  8044  0D76  3000               	movlw	0
  8045  0D77  00D8               	movwf	?___ftmul+1
  8046  0D78  3000               	movlw	0
  8047  0D79  00D9               	movwf	?___ftmul+2
  8048  0D7A  0008               	return
  8049  0D7B                     l2672:	
  8050  0D7B  085A               	movf	___ftmul@f2,w
  8051  0D7C  00DD               	movwf	??___ftmul
  8052  0D7D  085B               	movf	___ftmul@f2+1,w
  8053  0D7E  00DE               	movwf	??___ftmul+1
  8054  0D7F  085C               	movf	___ftmul@f2+2,w
  8055  0D80  00DF               	movwf	??___ftmul+2
  8056  0D81  1003               	clrc
  8057  0D82  0D5E               	rlf	??___ftmul+1,w
  8058  0D83  0D5F               	rlf	??___ftmul+2,w
  8059  0D84  00E0               	movwf	??___ftmul+3
  8060  0D85  0860               	movf	??___ftmul+3,w
  8061  0D86  00E6               	movwf	___ftmul@sign
  8062  0D87  0866               	movf	___ftmul@sign,w
  8063  0D88  1D03               	btfss	3,2
  8064  0D89  2D91               	goto	l2678
  8065  0D8A  3000               	movlw	0
  8066  0D8B  00D7               	movwf	?___ftmul
  8067  0D8C  3000               	movlw	0
  8068  0D8D  00D8               	movwf	?___ftmul+1
  8069  0D8E  3000               	movlw	0
  8070  0D8F  00D9               	movwf	?___ftmul+2
  8071  0D90  0008               	return
  8072  0D91                     l2678:	
  8073  0D91  0866               	movf	___ftmul@sign,w
  8074  0D92  3E7B               	addlw	123
  8075  0D93  00DD               	movwf	??___ftmul
  8076  0D94  085D               	movf	??___ftmul,w
  8077  0D95  07E1               	addwf	___ftmul@exp,f
  8078  0D96  0857               	movf	___ftmul@f1,w
  8079  0D97  00DD               	movwf	??___ftmul
  8080  0D98  0858               	movf	___ftmul@f1+1,w
  8081  0D99  00DE               	movwf	??___ftmul+1
  8082  0D9A  0859               	movf	___ftmul@f1+2,w
  8083  0D9B  00DF               	movwf	??___ftmul+2
  8084  0D9C  3010               	movlw	16
  8085  0D9D                     u2755:	
  8086  0D9D  36DF               	lsrf	??___ftmul+2,f
  8087  0D9E  0CDE               	rrf	??___ftmul+1,f
  8088  0D9F  0CDD               	rrf	??___ftmul,f
  8089  0DA0  0B89               	decfsz	9,f
  8090  0DA1  2D9D               	goto	u2755
  8091  0DA2  085D               	movf	??___ftmul,w
  8092  0DA3  00E0               	movwf	??___ftmul+3
  8093  0DA4  0860               	movf	??___ftmul+3,w
  8094  0DA5  00E6               	movwf	___ftmul@sign
  8095  0DA6  085A               	movf	___ftmul@f2,w
  8096  0DA7  00DD               	movwf	??___ftmul
  8097  0DA8  085B               	movf	___ftmul@f2+1,w
  8098  0DA9  00DE               	movwf	??___ftmul+1
  8099  0DAA  085C               	movf	___ftmul@f2+2,w
  8100  0DAB  00DF               	movwf	??___ftmul+2
  8101  0DAC  3010               	movlw	16
  8102  0DAD                     u2765:	
  8103  0DAD  36DF               	lsrf	??___ftmul+2,f
  8104  0DAE  0CDE               	rrf	??___ftmul+1,f
  8105  0DAF  0CDD               	rrf	??___ftmul,f
  8106  0DB0  0B89               	decfsz	9,f
  8107  0DB1  2DAD               	goto	u2765
  8108  0DB2  085D               	movf	??___ftmul,w
  8109  0DB3  00E0               	movwf	??___ftmul+3
  8110  0DB4  0860               	movf	??___ftmul+3,w
  8111  0DB5  06E6               	xorwf	___ftmul@sign,f
  8112  0DB6  3080               	movlw	128
  8113  0DB7  00DD               	movwf	??___ftmul
  8114  0DB8  085D               	movf	??___ftmul,w
  8115  0DB9  05E6               	andwf	___ftmul@sign,f
  8116  0DBA  17D8               	bsf	___ftmul@f1+1,7
  8117  0DBB  17DB               	bsf	___ftmul@f2+1,7
  8118  0DBC  30FF               	movlw	255
  8119  0DBD  05DA               	andwf	___ftmul@f2,f
  8120  0DBE  30FF               	movlw	255
  8121  0DBF  05DB               	andwf	___ftmul@f2+1,f
  8122  0DC0  3000               	movlw	0
  8123  0DC1  05DC               	andwf	___ftmul@f2+2,f
  8124  0DC2  3000               	movlw	0
  8125  0DC3  00E2               	movwf	___ftmul@f3_as_product
  8126  0DC4  3000               	movlw	0
  8127  0DC5  00E3               	movwf	___ftmul@f3_as_product+1
  8128  0DC6  3000               	movlw	0
  8129  0DC7  00E4               	movwf	___ftmul@f3_as_product+2
  8130  0DC8  3007               	movlw	7
  8131  0DC9  00DD               	movwf	??___ftmul
  8132  0DCA  085D               	movf	??___ftmul,w
  8133  0DCB  00E5               	movwf	___ftmul@cntr
  8134  0DCC                     l2690:	
  8135  0DCC  1C57               	btfss	___ftmul@f1,0
  8136  0DCD  2DD4               	goto	l2694
  8137  0DCE  085A               	movf	___ftmul@f2,w
  8138  0DCF  07E2               	addwf	___ftmul@f3_as_product,f
  8139  0DD0  085B               	movf	___ftmul@f2+1,w
  8140  0DD1  3DE3               	addwfc	___ftmul@f3_as_product+1,f
  8141  0DD2  085C               	movf	___ftmul@f2+2,w
  8142  0DD3  3DE4               	addwfc	___ftmul@f3_as_product+2,f
  8143  0DD4                     l2694:	
  8144  0DD4  3001               	movlw	1
  8145  0DD5                     u2785:	
  8146  0DD5  36D9               	lsrf	___ftmul@f1+2,f
  8147  0DD6  0CD8               	rrf	___ftmul@f1+1,f
  8148  0DD7  0CD7               	rrf	___ftmul@f1,f
  8149  0DD8  0B89               	decfsz	9,f
  8150  0DD9  2DD5               	goto	u2785
  8151  0DDA  3001               	movlw	1
  8152  0DDB                     u2795:	
  8153  0DDB  35DA               	lslf	___ftmul@f2,f
  8154  0DDC  0DDB               	rlf	___ftmul@f2+1,f
  8155  0DDD  0DDC               	rlf	___ftmul@f2+2,f
  8156  0DDE  0B89               	decfsz	9,f
  8157  0DDF  2DDB               	goto	u2795
  8158  0DE0  3001               	movlw	1
  8159  0DE1  02E5               	subwf	___ftmul@cntr,f
  8160  0DE2  1D03               	btfss	3,2
  8161  0DE3  2DCC               	goto	l2690
  8162  0DE4  3009               	movlw	9
  8163  0DE5  00DD               	movwf	??___ftmul
  8164  0DE6  085D               	movf	??___ftmul,w
  8165  0DE7  00E5               	movwf	___ftmul@cntr
  8166  0DE8                     l2702:	
  8167  0DE8  1C57               	btfss	___ftmul@f1,0
  8168  0DE9  2DF0               	goto	l2706
  8169  0DEA  085A               	movf	___ftmul@f2,w
  8170  0DEB  07E2               	addwf	___ftmul@f3_as_product,f
  8171  0DEC  085B               	movf	___ftmul@f2+1,w
  8172  0DED  3DE3               	addwfc	___ftmul@f3_as_product+1,f
  8173  0DEE  085C               	movf	___ftmul@f2+2,w
  8174  0DEF  3DE4               	addwfc	___ftmul@f3_as_product+2,f
  8175  0DF0                     l2706:	
  8176  0DF0  3001               	movlw	1
  8177  0DF1                     u2825:	
  8178  0DF1  36D9               	lsrf	___ftmul@f1+2,f
  8179  0DF2  0CD8               	rrf	___ftmul@f1+1,f
  8180  0DF3  0CD7               	rrf	___ftmul@f1,f
  8181  0DF4  0B89               	decfsz	9,f
  8182  0DF5  2DF1               	goto	u2825
  8183  0DF6  3001               	movlw	1
  8184  0DF7                     u2835:	
  8185  0DF7  36E4               	lsrf	___ftmul@f3_as_product+2,f
  8186  0DF8  0CE3               	rrf	___ftmul@f3_as_product+1,f
  8187  0DF9  0CE2               	rrf	___ftmul@f3_as_product,f
  8188  0DFA  0B89               	decfsz	9,f
  8189  0DFB  2DF7               	goto	u2835
  8190  0DFC  3001               	movlw	1
  8191  0DFD  02E5               	subwf	___ftmul@cntr,f
  8192  0DFE  1D03               	btfss	3,2
  8193  0DFF  2DE8               	goto	l2702
  8194  0E00  0862               	movf	___ftmul@f3_as_product,w
  8195  0E01  00A0               	movwf	___ftpack@arg
  8196  0E02  0863               	movf	___ftmul@f3_as_product+1,w
  8197  0E03  00A1               	movwf	___ftpack@arg+1
  8198  0E04  0864               	movf	___ftmul@f3_as_product+2,w
  8199  0E05  00A2               	movwf	___ftpack@arg+2
  8200  0E06  0861               	movf	___ftmul@exp,w
  8201  0E07  00DD               	movwf	??___ftmul
  8202  0E08  085D               	movf	??___ftmul,w
  8203  0E09  00A3               	movwf	___ftpack@exp
  8204  0E0A  0866               	movf	___ftmul@sign,w
  8205  0E0B  00DE               	movwf	??___ftmul+1
  8206  0E0C  085E               	movf	??___ftmul+1,w
  8207  0E0D  00A4               	movwf	___ftpack@sign
  8208  0E0E  318A  2208         	fcall	___ftpack
  8209  0E10  0020               	movlb	0	; select bank0
  8210  0E11  0820               	movf	?___ftpack,w
  8211  0E12  00D7               	movwf	?___ftmul
  8212  0E13  0821               	movf	?___ftpack+1,w
  8213  0E14  00D8               	movwf	?___ftmul+1
  8214  0E15  0822               	movf	?___ftpack+2,w
  8215  0E16  00D9               	movwf	?___ftmul+2
  8216  0E17  0008               	return
  8217  0E18                     __end_of___ftmul:	
  8218                           
  8219                           	psect	text31
  8220  0850                     __ptext31:	
  8221 ;; *************** function ___ftge *****************
  8222 ;; Defined at:
  8223 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\ftge.c"
  8224 ;; Parameters:    Size  Location     Type
  8225 ;;  ff1             3    0[BANK0 ] float 
  8226 ;;  ff2             3    3[BANK0 ] float 
  8227 ;; Auto vars:     Size  Location     Type
  8228 ;;		None
  8229 ;; Return value:  Size  Location     Type
  8230 ;;		None               void
  8231 ;; Registers used:
  8232 ;;		wreg, status,2, status,0
  8233 ;; Tracked objects:
  8234 ;;		On entry : 0/0
  8235 ;;		On exit  : 0/0
  8236 ;;		Unchanged: 0/0
  8237 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8238 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8239 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8240 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8241 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8242 ;;Total ram usage:        9 bytes
  8243 ;; Hardware stack levels used:    1
  8244 ;; Hardware stack levels required when called:    7
  8245 ;; This function calls:
  8246 ;;		Nothing
  8247 ;; This function is called by:
  8248 ;;		_ftoa
  8249 ;; This function uses a non-reentrant model
  8250 ;;
  8251                           
  8252                           
  8253                           ;psect for function ___ftge
  8254  0850                     ___ftge:	
  8255                           
  8256                           ;incstack = 0
  8257                           ; Regs used in ___ftge: [wreg+status,2+status,0]
  8258  0850  0020               	movlb	0	; select bank0
  8259  0851  1FA2               	btfss	___ftge@ff1+2,7
  8260  0852  2867               	goto	l2650
  8261  0853  0920               	comf	___ftge@ff1,w
  8262  0854  00A6               	movwf	??___ftge
  8263  0855  0921               	comf	___ftge@ff1+1,w
  8264  0856  00A7               	movwf	??___ftge+1
  8265  0857  0922               	comf	___ftge@ff1+2,w
  8266  0858  00A8               	movwf	??___ftge+2
  8267  0859  0AA6               	incf	??___ftge,f
  8268  085A  1903               	skipnz
  8269  085B  0AA7               	incf	??___ftge+1,f
  8270  085C  1903               	skipnz
  8271  085D  0AA8               	incf	??___ftge+2,f
  8272  085E  3000               	movlw	0
  8273  085F  0726               	addwf	??___ftge,w
  8274  0860  00A0               	movwf	___ftge@ff1
  8275  0861  3000               	movlw	0
  8276  0862  3D27               	addwfc	??___ftge+1,w
  8277  0863  00A1               	movwf	___ftge@ff1+1
  8278  0864  3080               	movlw	128
  8279  0865  3D28               	addwfc	??___ftge+2,w
  8280  0866  00A2               	movwf	___ftge@ff1+2
  8281  0867                     l2650:	
  8282  0867  1FA5               	btfss	___ftge@ff2+2,7
  8283  0868  287D               	goto	l2654
  8284  0869  0923               	comf	___ftge@ff2,w
  8285  086A  00A6               	movwf	??___ftge
  8286  086B  0924               	comf	___ftge@ff2+1,w
  8287  086C  00A7               	movwf	??___ftge+1
  8288  086D  0925               	comf	___ftge@ff2+2,w
  8289  086E  00A8               	movwf	??___ftge+2
  8290  086F  0AA6               	incf	??___ftge,f
  8291  0870  1903               	skipnz
  8292  0871  0AA7               	incf	??___ftge+1,f
  8293  0872  1903               	skipnz
  8294  0873  0AA8               	incf	??___ftge+2,f
  8295  0874  3000               	movlw	0
  8296  0875  0726               	addwf	??___ftge,w
  8297  0876  00A3               	movwf	___ftge@ff2
  8298  0877  3000               	movlw	0
  8299  0878  3D27               	addwfc	??___ftge+1,w
  8300  0879  00A4               	movwf	___ftge@ff2+1
  8301  087A  3080               	movlw	128
  8302  087B  3D28               	addwfc	??___ftge+2,w
  8303  087C  00A5               	movwf	___ftge@ff2+2
  8304  087D                     l2654:	
  8305  087D  3080               	movlw	128
  8306  087E  06A2               	xorwf	___ftge@ff1+2,f
  8307  087F  3080               	movlw	128
  8308  0880  06A5               	xorwf	___ftge@ff2+2,f
  8309  0881  0825               	movf	___ftge@ff2+2,w
  8310  0882  0222               	subwf	___ftge@ff1+2,w
  8311  0883  1D03               	skipz
  8312  0884  0008               	return
  8313  0885  0824               	movf	___ftge@ff2+1,w
  8314  0886  0221               	subwf	___ftge@ff1+1,w
  8315  0887  1D03               	skipz
  8316  0888  0008               	return
  8317  0889  0823               	movf	___ftge@ff2,w
  8318  088A  0220               	subwf	___ftge@ff1,w
  8319  088B  0008               	return
  8320  088C                     __end_of___ftge:	
  8321                           
  8322                           	psect	text32
  8323  0C15                     __ptext32:	
  8324 ;; *************** function _getADCValue *****************
  8325 ;; Defined at:
  8326 ;;		line 35 in file "main.c"
  8327 ;; Parameters:    Size  Location     Type
  8328 ;;  channel         1    wreg     unsigned char 
  8329 ;; Auto vars:     Size  Location     Type
  8330 ;;  channel         1   51[BANK0 ] unsigned char 
  8331 ;;  adcSum          3   52[BANK0 ] float 
  8332 ;;  adcLoop         2   49[BANK0 ] unsigned int 
  8333 ;; Return value:  Size  Location     Type
  8334 ;;                  3   43[BANK0 ] float 
  8335 ;; Registers used:
  8336 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8337 ;; Tracked objects:
  8338 ;;		On entry : 0/0
  8339 ;;		On exit  : 0/0
  8340 ;;		Unchanged: 0/0
  8341 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8342 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8343 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8344 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8345 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8346 ;;Total ram usage:       12 bytes
  8347 ;; Hardware stack levels used:    1
  8348 ;; Hardware stack levels required when called:    9
  8349 ;; This function calls:
  8350 ;;		___awtoft
  8351 ;;		___ftadd
  8352 ;;		___ftdiv
  8353 ;;		_doWDTSleep
  8354 ;; This function is called by:
  8355 ;;		_loop
  8356 ;; This function uses a non-reentrant model
  8357 ;;
  8358                           
  8359                           
  8360                           ;psect for function _getADCValue
  8361  0C15                     _getADCValue:	
  8362                           
  8363                           ;incstack = 0
  8364                           ; Regs used in _getADCValue: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8365                           ;getADCValue@channel stored from wreg
  8366  0C15  0020               	movlb	0	; select bank0
  8367  0C16  00D3               	movwf	getADCValue@channel
  8368                           
  8369                           ;main.c: 38: float adcSum = 0;
  8370  0C17  3000               	movlw	0
  8371  0C18  00D4               	movwf	getADCValue@adcSum
  8372  0C19  3000               	movlw	0
  8373  0C1A  00D5               	movwf	getADCValue@adcSum+1
  8374  0C1B  3000               	movlw	0
  8375  0C1C  00D6               	movwf	getADCValue@adcSum+2
  8376                           
  8377                           ;main.c: 39: unsigned int adcLoop = 1000;
  8378  0C1D  30E8               	movlw	232
  8379  0C1E  00D1               	movwf	getADCValue@adcLoop
  8380  0C1F  3003               	movlw	3
  8381  0C20  00D2               	movwf	getADCValue@adcLoop+1
  8382                           
  8383                           ;main.c: 41: ADCON0bits.CHS = channel;
  8384  0C21  0853               	movf	getADCValue@channel,w
  8385  0C22  00CE               	movwf	??_getADCValue
  8386  0C23  0DCE               	rlf	??_getADCValue,f
  8387  0C24  0DCE               	rlf	??_getADCValue,f
  8388  0C25  0021               	movlb	1	; select bank1
  8389  0C26  081D               	movf	29,w	;volatile
  8390  0C27  0020               	movlb	0	; select bank0
  8391  0C28  064E               	xorwf	??_getADCValue,w
  8392  0C29  3903               	andlw	-253
  8393  0C2A  064E               	xorwf	??_getADCValue,w
  8394  0C2B  0021               	movlb	1	; select bank1
  8395  0C2C  009D               	movwf	29	;volatile
  8396                           
  8397                           ;main.c: 42: FVRCONbits.FVREN = 1;
  8398  0C2D  0022               	movlb	2	; select bank2
  8399  0C2E  1797               	bsf	23,7	;volatile
  8400                           
  8401                           ;main.c: 43: ADCON0bits.ADON = 1;
  8402  0C2F  0021               	movlb	1	; select bank1
  8403  0C30  141D               	bsf	29,0	;volatile
  8404                           
  8405                           ;main.c: 45: doWDTSleep(0b00000);
  8406  0C31  3000               	movlw	0
  8407  0C32  3195  2569  318C   	fcall	_doWDTSleep
  8408  0C35                     l3004:	
  8409                           ;main.c: 47: while (adcLoop--){
  8410                           
  8411  0C35  3001               	movlw	1
  8412  0C36  0020               	movlb	0	; select bank0
  8413  0C37  02D1               	subwf	getADCValue@adcLoop,f
  8414  0C38  3000               	movlw	0
  8415  0C39  3BD2               	subwfb	getADCValue@adcLoop+1,f
  8416  0C3A  0A51               	incf	getADCValue@adcLoop,w
  8417  0C3B  1903               	btfsc	3,2
  8418  0C3C  0A52               	incf	getADCValue@adcLoop+1,w
  8419  0C3D  1903               	btfsc	3,2
  8420  0C3E  2C72               	goto	l162
  8421                           
  8422                           ;main.c: 49: ADCON0bits.ADGO = 1;
  8423  0C3F  0021               	movlb	1	; select bank1
  8424  0C40  149D               	bsf	29,1	;volatile
  8425  0C41                     l3000:	
  8426                           ;main.c: 51: while (ADCON0bits.ADGO){
  8427                           
  8428  0C41  0021               	movlb	1	; select bank1
  8429  0C42  1C9D               	btfss	29,1	;volatile
  8430  0C43  2C49               	goto	l3002
  8431                           
  8432                           ;main.c: 52: doWDTSleep(0b00000);
  8433  0C44  3000               	movlw	0
  8434  0C45  3195  2569  318C   	fcall	_doWDTSleep
  8435  0C48  2C41               	goto	l3000
  8436  0C49                     l3002:	
  8437                           
  8438                           ;main.c: 53: };main.c: 55: adcSum+= (ADRESL | (ADRESH << 8));
  8439  0C49  081C               	movf	28,w	;volatile
  8440  0C4A  0020               	movlb	0	; select bank0
  8441  0C4B  00CE               	movwf	??_getADCValue
  8442  0C4C  01CF               	clrf	??_getADCValue+1
  8443  0C4D  084E               	movf	??_getADCValue,w
  8444  0C4E  00CF               	movwf	??_getADCValue+1
  8445  0C4F  01CE               	clrf	??_getADCValue
  8446  0C50  084E               	movf	??_getADCValue,w
  8447  0C51  0021               	movlb	1	; select bank1
  8448  0C52  041B               	iorwf	27,w	;volatile
  8449  0C53  0020               	movlb	0	; select bank0
  8450  0C54  00A8               	movwf	___awtoft@c
  8451  0C55  084F               	movf	??_getADCValue+1,w
  8452  0C56  00A9               	movwf	___awtoft@c+1
  8453  0C57  3196  26DC  318C   	fcall	___awtoft
  8454  0C5A  0020               	movlb	0	; select bank0
  8455  0C5B  0828               	movf	?___awtoft,w
  8456  0C5C  00AE               	movwf	___ftadd@f1
  8457  0C5D  0829               	movf	?___awtoft+1,w
  8458  0C5E  00AF               	movwf	___ftadd@f1+1
  8459  0C5F  082A               	movf	?___awtoft+2,w
  8460  0C60  00B0               	movwf	___ftadd@f1+2
  8461  0C61  0854               	movf	getADCValue@adcSum,w
  8462  0C62  00B1               	movwf	___ftadd@f2
  8463  0C63  0855               	movf	getADCValue@adcSum+1,w
  8464  0C64  00B2               	movwf	___ftadd@f2+1
  8465  0C65  0856               	movf	getADCValue@adcSum+2,w
  8466  0C66  00B3               	movwf	___ftadd@f2+2
  8467  0C67  318F  270A  318C   	fcall	___ftadd
  8468  0C6A  0020               	movlb	0	; select bank0
  8469  0C6B  082E               	movf	?___ftadd,w
  8470  0C6C  00D4               	movwf	getADCValue@adcSum
  8471  0C6D  082F               	movf	?___ftadd+1,w
  8472  0C6E  00D5               	movwf	getADCValue@adcSum+1
  8473  0C6F  0830               	movf	?___ftadd+2,w
  8474  0C70  00D6               	movwf	getADCValue@adcSum+2
  8475  0C71  2C35               	goto	l3004
  8476  0C72                     l162:	
  8477                           
  8478                           ;main.c: 57: };main.c: 59: FVRCONbits.FVREN = 0;
  8479  0C72  0022               	movlb	2	; select bank2
  8480  0C73  1397               	bcf	23,7	;volatile
  8481                           
  8482                           ;main.c: 60: ADCON0bits.ADON = 0;
  8483  0C74  0021               	movlb	1	; select bank1
  8484  0C75  101D               	bcf	29,0	;volatile
  8485                           
  8486                           ;main.c: 63: adcSum/= 1000;
  8487  0C76  3000               	movlw	0
  8488  0C77  0020               	movlb	0	; select bank0
  8489  0C78  00BB               	movwf	___ftdiv@f2
  8490  0C79  307A               	movlw	122
  8491  0C7A  00BC               	movwf	___ftdiv@f2+1
  8492  0C7B  3044               	movlw	68
  8493  0C7C  00BD               	movwf	___ftdiv@f2+2
  8494  0C7D  0854               	movf	getADCValue@adcSum,w
  8495  0C7E  00BE               	movwf	___ftdiv@f1
  8496  0C7F  0855               	movf	getADCValue@adcSum+1,w
  8497  0C80  00BF               	movwf	___ftdiv@f1+1
  8498  0C81  0856               	movf	getADCValue@adcSum+2,w
  8499  0C82  00C0               	movwf	___ftdiv@f1+2
  8500  0C83  318C  24BB  318C   	fcall	___ftdiv
  8501  0C86  0020               	movlb	0	; select bank0
  8502  0C87  083B               	movf	?___ftdiv,w
  8503  0C88  00D4               	movwf	getADCValue@adcSum
  8504  0C89  083C               	movf	?___ftdiv+1,w
  8505  0C8A  00D5               	movwf	getADCValue@adcSum+1
  8506  0C8B  083D               	movf	?___ftdiv+2,w
  8507  0C8C  00D6               	movwf	getADCValue@adcSum+2
  8508                           
  8509                           ;main.c: 66: if (ADCON1bits.ADPREF == 0b11){
  8510  0C8D  0021               	movlb	1	; select bank1
  8511  0C8E  081E               	movf	30,w	;volatile
  8512  0C8F  3903               	andlw	3
  8513  0C90  3A03               	xorlw	3
  8514  0C91  1903               	btfsc	3,2
  8515  0C92  2CAC               	goto	l3016
  8516  0C93  2CB3               	goto	l3018
  8517  0C94                     l3012:	
  8518                           ;main.c: 68: case 0b10:
  8519                           
  8520                           ;main.c: 67: switch (FVRCONbits.ADFVR){
  8521                           
  8522                           
  8523                           ;main.c: 69: adcSum/= 500;
  8524  0C94  3000               	movlw	0
  8525  0C95  0020               	movlb	0	; select bank0
  8526  0C96  00BB               	movwf	___ftdiv@f2
  8527  0C97  30FA               	movlw	250
  8528  0C98  00BC               	movwf	___ftdiv@f2+1
  8529  0C99  3043               	movlw	67
  8530  0C9A  00BD               	movwf	___ftdiv@f2+2
  8531  0C9B  0854               	movf	getADCValue@adcSum,w
  8532  0C9C  00BE               	movwf	___ftdiv@f1
  8533  0C9D  0855               	movf	getADCValue@adcSum+1,w
  8534  0C9E  00BF               	movwf	___ftdiv@f1+1
  8535  0C9F  0856               	movf	getADCValue@adcSum+2,w
  8536  0CA0  00C0               	movwf	___ftdiv@f1+2
  8537  0CA1  318C  24BB  318C   	fcall	___ftdiv
  8538  0CA4  0020               	movlb	0	; select bank0
  8539  0CA5  083B               	movf	?___ftdiv,w
  8540  0CA6  00D4               	movwf	getADCValue@adcSum
  8541  0CA7  083C               	movf	?___ftdiv+1,w
  8542  0CA8  00D5               	movwf	getADCValue@adcSum+1
  8543  0CA9  083D               	movf	?___ftdiv+2,w
  8544  0CAA  00D6               	movwf	getADCValue@adcSum+2
  8545                           
  8546                           ;main.c: 71: }
  8547                           
  8548                           ;main.c: 70: break;
  8549  0CAB  2CB3               	goto	l3018
  8550  0CAC                     l3016:	
  8551  0CAC  0022               	movlb	2	; select bank2
  8552  0CAD  0817               	movf	23,w	;volatile
  8553  0CAE  3903               	andlw	3
  8554                           
  8555                           ; Switch size 1, requested type "space"
  8556                           ; Number of cases is 1, Range of values is 2 to 2
  8557                           ; switch strategies available:
  8558                           ; Name         Instructions Cycles
  8559                           ; simple_byte            4     3 (average)
  8560                           ; direct_byte           11     9 (fixed)
  8561                           ; jumptable            263     9 (fixed)
  8562                           ;	Chosen strategy is simple_byte
  8563  0CAF  3A02               	xorlw	2	; case 2
  8564  0CB0  1903               	skipnz
  8565  0CB1  2C94               	goto	l3012
  8566  0CB2  2CB3               	goto	l3018
  8567  0CB3                     l3018:	
  8568                           
  8569                           ;main.c: 72: };main.c: 75: return adcSum;
  8570  0CB3  0020               	movlb	0	; select bank0
  8571  0CB4  0854               	movf	getADCValue@adcSum,w
  8572  0CB5  00CB               	movwf	?_getADCValue
  8573  0CB6  0855               	movf	getADCValue@adcSum+1,w
  8574  0CB7  00CC               	movwf	?_getADCValue+1
  8575  0CB8  0856               	movf	getADCValue@adcSum+2,w
  8576  0CB9  00CD               	movwf	?_getADCValue+2
  8577  0CBA  0008               	return
  8578  0CBB                     __end_of_getADCValue:	
  8579                           
  8580                           	psect	text33
  8581  1569                     __ptext33:	
  8582 ;; *************** function _doWDTSleep *****************
  8583 ;; Defined at:
  8584 ;;		line 21 in file "main.c"
  8585 ;; Parameters:    Size  Location     Type
  8586 ;;  wdtps           1    wreg     unsigned char 
  8587 ;; Auto vars:     Size  Location     Type
  8588 ;;  wdtps           1    1[BANK0 ] unsigned char 
  8589 ;; Return value:  Size  Location     Type
  8590 ;;                  1    wreg      void 
  8591 ;; Registers used:
  8592 ;;		wreg, status,2, status,0
  8593 ;; Tracked objects:
  8594 ;;		On entry : 0/0
  8595 ;;		On exit  : 0/0
  8596 ;;		Unchanged: 0/0
  8597 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8598 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8599 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8600 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8601 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8602 ;;Total ram usage:        2 bytes
  8603 ;; Hardware stack levels used:    1
  8604 ;; Hardware stack levels required when called:    7
  8605 ;; This function calls:
  8606 ;;		Nothing
  8607 ;; This function is called by:
  8608 ;;		_getADCValue
  8609 ;;		_sleep
  8610 ;; This function uses a non-reentrant model
  8611 ;;
  8612                           
  8613                           
  8614                           ;psect for function _doWDTSleep
  8615  1569                     _doWDTSleep:	
  8616                           
  8617                           ;incstack = 0
  8618                           ; Regs used in _doWDTSleep: [wreg+status,2+status,0]
  8619                           ;doWDTSleep@wdtps stored from wreg
  8620  1569  0020               	movlb	0	; select bank0
  8621  156A  00A1               	movwf	doWDTSleep@wdtps
  8622                           
  8623                           ;main.c: 24: WDTCONbits.WDTPS = wdtps;
  8624  156B  0821               	movf	doWDTSleep@wdtps,w
  8625  156C  00A0               	movwf	??_doWDTSleep
  8626  156D  0DA0               	rlf	??_doWDTSleep,f
  8627  156E  0021               	movlb	1	; select bank1
  8628  156F  0817               	movf	23,w	;volatile
  8629  1570  0020               	movlb	0	; select bank0
  8630  1571  0620               	xorwf	??_doWDTSleep,w
  8631  1572  39C1               	andlw	-63
  8632  1573  0620               	xorwf	??_doWDTSleep,w
  8633  1574  0021               	movlb	1	; select bank1
  8634  1575  0097               	movwf	23	;volatile
  8635  1576  0063               	sleep	;# 
  8636                           
  8637                           ;main.c: 28: __nop();
  8638  1577  0000               	nop
  8639                           
  8640                           ;main.c: 29: __nop();
  8641  1578  0000               	nop
  8642                           
  8643                           ;main.c: 31: WDTCONbits.WDTPS = 0b01101;
  8644  1579  0021               	movlb	1	; select bank1
  8645  157A  0817               	movf	23,w	;volatile
  8646  157B  39C1               	andlw	-63
  8647  157C  381A               	iorlw	26
  8648  157D  0097               	movwf	23	;volatile
  8649  157E  0064               	clrwdt	;# 
  8650  157F  0008               	return
  8651  1580                     __end_of_doWDTSleep:	
  8652                           
  8653                           	psect	text34
  8654  0CBB                     __ptext34:	
  8655 ;; *************** function ___ftdiv *****************
  8656 ;; Defined at:
  8657 ;;		line 56 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\ftdiv.c"
  8658 ;; Parameters:    Size  Location     Type
  8659 ;;  f2              3   27[BANK0 ] float 
  8660 ;;  f1              3   30[BANK0 ] float 
  8661 ;; Auto vars:     Size  Location     Type
  8662 ;;  f3              3   38[BANK0 ] float 
  8663 ;;  sign            1   42[BANK0 ] unsigned char 
  8664 ;;  exp             1   41[BANK0 ] unsigned char 
  8665 ;;  cntr            1   37[BANK0 ] unsigned char 
  8666 ;; Return value:  Size  Location     Type
  8667 ;;                  3   27[BANK0 ] float 
  8668 ;; Registers used:
  8669 ;;		wreg, status,2, status,0, pclath, cstack
  8670 ;; Tracked objects:
  8671 ;;		On entry : 0/0
  8672 ;;		On exit  : 0/0
  8673 ;;		Unchanged: 0/0
  8674 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8675 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8676 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8677 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8678 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8679 ;;Total ram usage:       16 bytes
  8680 ;; Hardware stack levels used:    1
  8681 ;; Hardware stack levels required when called:    8
  8682 ;; This function calls:
  8683 ;;		___ftpack
  8684 ;; This function is called by:
  8685 ;;		_getADCValue
  8686 ;;		_loop
  8687 ;; This function uses a non-reentrant model
  8688 ;;
  8689                           
  8690                           
  8691                           ;psect for function ___ftdiv
  8692  0CBB                     ___ftdiv:	
  8693                           
  8694                           ;incstack = 0
  8695                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
  8696  0CBB  0020               	movlb	0	; select bank0
  8697  0CBC  083E               	movf	___ftdiv@f1,w
  8698  0CBD  00C1               	movwf	??___ftdiv
  8699  0CBE  083F               	movf	___ftdiv@f1+1,w
  8700  0CBF  00C2               	movwf	??___ftdiv+1
  8701  0CC0  0840               	movf	___ftdiv@f1+2,w
  8702  0CC1  00C3               	movwf	??___ftdiv+2
  8703  0CC2  1003               	clrc
  8704  0CC3  0D42               	rlf	??___ftdiv+1,w
  8705  0CC4  0D43               	rlf	??___ftdiv+2,w
  8706  0CC5  00C4               	movwf	??___ftdiv+3
  8707  0CC6  0844               	movf	??___ftdiv+3,w
  8708  0CC7  00C9               	movwf	___ftdiv@exp
  8709  0CC8  0849               	movf	___ftdiv@exp,w
  8710  0CC9  1D03               	btfss	3,2
  8711  0CCA  2CD2               	goto	l2894
  8712  0CCB  3000               	movlw	0
  8713  0CCC  00BB               	movwf	?___ftdiv
  8714  0CCD  3000               	movlw	0
  8715  0CCE  00BC               	movwf	?___ftdiv+1
  8716  0CCF  3000               	movlw	0
  8717  0CD0  00BD               	movwf	?___ftdiv+2
  8718  0CD1  0008               	return
  8719  0CD2                     l2894:	
  8720  0CD2  083B               	movf	___ftdiv@f2,w
  8721  0CD3  00C1               	movwf	??___ftdiv
  8722  0CD4  083C               	movf	___ftdiv@f2+1,w
  8723  0CD5  00C2               	movwf	??___ftdiv+1
  8724  0CD6  083D               	movf	___ftdiv@f2+2,w
  8725  0CD7  00C3               	movwf	??___ftdiv+2
  8726  0CD8  1003               	clrc
  8727  0CD9  0D42               	rlf	??___ftdiv+1,w
  8728  0CDA  0D43               	rlf	??___ftdiv+2,w
  8729  0CDB  00C4               	movwf	??___ftdiv+3
  8730  0CDC  0844               	movf	??___ftdiv+3,w
  8731  0CDD  00CA               	movwf	___ftdiv@sign
  8732  0CDE  084A               	movf	___ftdiv@sign,w
  8733  0CDF  1D03               	btfss	3,2
  8734  0CE0  2CE8               	goto	l2900
  8735  0CE1  3000               	movlw	0
  8736  0CE2  00BB               	movwf	?___ftdiv
  8737  0CE3  3000               	movlw	0
  8738  0CE4  00BC               	movwf	?___ftdiv+1
  8739  0CE5  3000               	movlw	0
  8740  0CE6  00BD               	movwf	?___ftdiv+2
  8741  0CE7  0008               	return
  8742  0CE8                     l2900:	
  8743  0CE8  3000               	movlw	0
  8744  0CE9  00C6               	movwf	___ftdiv@f3
  8745  0CEA  3000               	movlw	0
  8746  0CEB  00C7               	movwf	___ftdiv@f3+1
  8747  0CEC  3000               	movlw	0
  8748  0CED  00C8               	movwf	___ftdiv@f3+2
  8749  0CEE  3089               	movlw	137
  8750  0CEF  074A               	addwf	___ftdiv@sign,w
  8751  0CF0  00C1               	movwf	??___ftdiv
  8752  0CF1  0841               	movf	??___ftdiv,w
  8753  0CF2  02C9               	subwf	___ftdiv@exp,f
  8754  0CF3  083E               	movf	___ftdiv@f1,w
  8755  0CF4  00C1               	movwf	??___ftdiv
  8756  0CF5  083F               	movf	___ftdiv@f1+1,w
  8757  0CF6  00C2               	movwf	??___ftdiv+1
  8758  0CF7  0840               	movf	___ftdiv@f1+2,w
  8759  0CF8  00C3               	movwf	??___ftdiv+2
  8760  0CF9  3010               	movlw	16
  8761  0CFA                     u3105:	
  8762  0CFA  36C3               	lsrf	??___ftdiv+2,f
  8763  0CFB  0CC2               	rrf	??___ftdiv+1,f
  8764  0CFC  0CC1               	rrf	??___ftdiv,f
  8765  0CFD  0B89               	decfsz	9,f
  8766  0CFE  2CFA               	goto	u3105
  8767  0CFF  0841               	movf	??___ftdiv,w
  8768  0D00  00C4               	movwf	??___ftdiv+3
  8769  0D01  0844               	movf	??___ftdiv+3,w
  8770  0D02  00CA               	movwf	___ftdiv@sign
  8771  0D03  083B               	movf	___ftdiv@f2,w
  8772  0D04  00C1               	movwf	??___ftdiv
  8773  0D05  083C               	movf	___ftdiv@f2+1,w
  8774  0D06  00C2               	movwf	??___ftdiv+1
  8775  0D07  083D               	movf	___ftdiv@f2+2,w
  8776  0D08  00C3               	movwf	??___ftdiv+2
  8777  0D09  3010               	movlw	16
  8778  0D0A                     u3115:	
  8779  0D0A  36C3               	lsrf	??___ftdiv+2,f
  8780  0D0B  0CC2               	rrf	??___ftdiv+1,f
  8781  0D0C  0CC1               	rrf	??___ftdiv,f
  8782  0D0D  0B89               	decfsz	9,f
  8783  0D0E  2D0A               	goto	u3115
  8784  0D0F  0841               	movf	??___ftdiv,w
  8785  0D10  00C4               	movwf	??___ftdiv+3
  8786  0D11  0844               	movf	??___ftdiv+3,w
  8787  0D12  06CA               	xorwf	___ftdiv@sign,f
  8788  0D13  3080               	movlw	128
  8789  0D14  00C1               	movwf	??___ftdiv
  8790  0D15  0841               	movf	??___ftdiv,w
  8791  0D16  05CA               	andwf	___ftdiv@sign,f
  8792  0D17  17BF               	bsf	___ftdiv@f1+1,7
  8793  0D18  30FF               	movlw	255
  8794  0D19  05BE               	andwf	___ftdiv@f1,f
  8795  0D1A  30FF               	movlw	255
  8796  0D1B  05BF               	andwf	___ftdiv@f1+1,f
  8797  0D1C  3000               	movlw	0
  8798  0D1D  05C0               	andwf	___ftdiv@f1+2,f
  8799  0D1E  17BC               	bsf	___ftdiv@f2+1,7
  8800  0D1F  30FF               	movlw	255
  8801  0D20  05BB               	andwf	___ftdiv@f2,f
  8802  0D21  30FF               	movlw	255
  8803  0D22  05BC               	andwf	___ftdiv@f2+1,f
  8804  0D23  3000               	movlw	0
  8805  0D24  05BD               	andwf	___ftdiv@f2+2,f
  8806  0D25  3018               	movlw	24
  8807  0D26  00C1               	movwf	??___ftdiv
  8808  0D27  0841               	movf	??___ftdiv,w
  8809  0D28  00C5               	movwf	___ftdiv@cntr
  8810  0D29                     l2914:	
  8811  0D29  3001               	movlw	1
  8812  0D2A                     u3125:	
  8813  0D2A  35C6               	lslf	___ftdiv@f3,f
  8814  0D2B  0DC7               	rlf	___ftdiv@f3+1,f
  8815  0D2C  0DC8               	rlf	___ftdiv@f3+2,f
  8816  0D2D  0B89               	decfsz	9,f
  8817  0D2E  2D2A               	goto	u3125
  8818  0D2F  083D               	movf	___ftdiv@f2+2,w
  8819  0D30  0240               	subwf	___ftdiv@f1+2,w
  8820  0D31  1D03               	skipz
  8821  0D32  2D39               	goto	u3135
  8822  0D33  083C               	movf	___ftdiv@f2+1,w
  8823  0D34  023F               	subwf	___ftdiv@f1+1,w
  8824  0D35  1D03               	skipz
  8825  0D36  2D39               	goto	u3135
  8826  0D37  083B               	movf	___ftdiv@f2,w
  8827  0D38  023E               	subwf	___ftdiv@f1,w
  8828  0D39                     u3135:	
  8829  0D39  1C03               	skipc
  8830  0D3A  2D42               	goto	l2922
  8831  0D3B  083B               	movf	___ftdiv@f2,w
  8832  0D3C  02BE               	subwf	___ftdiv@f1,f
  8833  0D3D  083C               	movf	___ftdiv@f2+1,w
  8834  0D3E  3BBF               	subwfb	___ftdiv@f1+1,f
  8835  0D3F  083D               	movf	___ftdiv@f2+2,w
  8836  0D40  3BC0               	subwfb	___ftdiv@f1+2,f
  8837  0D41  1446               	bsf	___ftdiv@f3,0
  8838  0D42                     l2922:	
  8839  0D42  3001               	movlw	1
  8840  0D43                     u3145:	
  8841  0D43  35BE               	lslf	___ftdiv@f1,f
  8842  0D44  0DBF               	rlf	___ftdiv@f1+1,f
  8843  0D45  0DC0               	rlf	___ftdiv@f1+2,f
  8844  0D46  0B89               	decfsz	9,f
  8845  0D47  2D43               	goto	u3145
  8846  0D48  3001               	movlw	1
  8847  0D49  02C5               	subwf	___ftdiv@cntr,f
  8848  0D4A  1D03               	btfss	3,2
  8849  0D4B  2D29               	goto	l2914
  8850  0D4C  0846               	movf	___ftdiv@f3,w
  8851  0D4D  00A0               	movwf	___ftpack@arg
  8852  0D4E  0847               	movf	___ftdiv@f3+1,w
  8853  0D4F  00A1               	movwf	___ftpack@arg+1
  8854  0D50  0848               	movf	___ftdiv@f3+2,w
  8855  0D51  00A2               	movwf	___ftpack@arg+2
  8856  0D52  0849               	movf	___ftdiv@exp,w
  8857  0D53  00C1               	movwf	??___ftdiv
  8858  0D54  0841               	movf	??___ftdiv,w
  8859  0D55  00A3               	movwf	___ftpack@exp
  8860  0D56  084A               	movf	___ftdiv@sign,w
  8861  0D57  00C2               	movwf	??___ftdiv+1
  8862  0D58  0842               	movf	??___ftdiv+1,w
  8863  0D59  00A4               	movwf	___ftpack@sign
  8864  0D5A  318A  2208         	fcall	___ftpack
  8865  0D5C  0020               	movlb	0	; select bank0
  8866  0D5D  0820               	movf	?___ftpack,w
  8867  0D5E  00BB               	movwf	?___ftdiv
  8868  0D5F  0821               	movf	?___ftpack+1,w
  8869  0D60  00BC               	movwf	?___ftdiv+1
  8870  0D61  0822               	movf	?___ftpack+2,w
  8871  0D62  00BD               	movwf	?___ftdiv+2
  8872  0D63  0008               	return
  8873  0D64                     __end_of___ftdiv:	
  8874                           
  8875                           	psect	text35
  8876  0F0A                     __ptext35:	
  8877 ;; *************** function ___ftadd *****************
  8878 ;; Defined at:
  8879 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\ftadd.c"
  8880 ;; Parameters:    Size  Location     Type
  8881 ;;  f1              3   14[BANK0 ] float 
  8882 ;;  f2              3   17[BANK0 ] float 
  8883 ;; Auto vars:     Size  Location     Type
  8884 ;;  exp1            1   26[BANK0 ] unsigned char 
  8885 ;;  exp2            1   25[BANK0 ] unsigned char 
  8886 ;;  sign            1   24[BANK0 ] unsigned char 
  8887 ;; Return value:  Size  Location     Type
  8888 ;;                  3   14[BANK0 ] float 
  8889 ;; Registers used:
  8890 ;;		wreg, status,2, status,0, pclath, cstack
  8891 ;; Tracked objects:
  8892 ;;		On entry : 0/0
  8893 ;;		On exit  : 0/0
  8894 ;;		Unchanged: 0/0
  8895 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8896 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8897 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8898 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8899 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8900 ;;Total ram usage:       13 bytes
  8901 ;; Hardware stack levels used:    1
  8902 ;; Hardware stack levels required when called:    8
  8903 ;; This function calls:
  8904 ;;		___ftpack
  8905 ;; This function is called by:
  8906 ;;		_getADCValue
  8907 ;;		_loop
  8908 ;;		___ftsub
  8909 ;; This function uses a non-reentrant model
  8910 ;;
  8911                           
  8912                           
  8913                           ;psect for function ___ftadd
  8914  0F0A                     ___ftadd:	
  8915                           
  8916                           ;incstack = 0
  8917                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
  8918  0F0A  0020               	movlb	0	; select bank0
  8919  0F0B  082E               	movf	___ftadd@f1,w
  8920  0F0C  00B4               	movwf	??___ftadd
  8921  0F0D  082F               	movf	___ftadd@f1+1,w
  8922  0F0E  00B5               	movwf	??___ftadd+1
  8923  0F0F  0830               	movf	___ftadd@f1+2,w
  8924  0F10  00B6               	movwf	??___ftadd+2
  8925  0F11  1003               	clrc
  8926  0F12  0D35               	rlf	??___ftadd+1,w
  8927  0F13  0D36               	rlf	??___ftadd+2,w
  8928  0F14  00B7               	movwf	??___ftadd+3
  8929  0F15  0837               	movf	??___ftadd+3,w
  8930  0F16  00BA               	movwf	___ftadd@exp1
  8931  0F17  0831               	movf	___ftadd@f2,w
  8932  0F18  00B4               	movwf	??___ftadd
  8933  0F19  0832               	movf	___ftadd@f2+1,w
  8934  0F1A  00B5               	movwf	??___ftadd+1
  8935  0F1B  0833               	movf	___ftadd@f2+2,w
  8936  0F1C  00B6               	movwf	??___ftadd+2
  8937  0F1D  1003               	clrc
  8938  0F1E  0D35               	rlf	??___ftadd+1,w
  8939  0F1F  0D36               	rlf	??___ftadd+2,w
  8940  0F20  00B7               	movwf	??___ftadd+3
  8941  0F21  0837               	movf	??___ftadd+3,w
  8942  0F22  00B9               	movwf	___ftadd@exp2
  8943  0F23  083A               	movf	___ftadd@exp1,w
  8944  0F24  1903               	btfsc	3,2
  8945  0F25  2F32               	goto	l2356
  8946  0F26  0839               	movf	___ftadd@exp2,w
  8947  0F27  023A               	subwf	___ftadd@exp1,w
  8948  0F28  1803               	skipnc
  8949  0F29  2F39               	goto	l2360
  8950  0F2A  033A               	decf	___ftadd@exp1,w
  8951  0F2B  3AFF               	xorlw	255
  8952  0F2C  0739               	addwf	___ftadd@exp2,w
  8953  0F2D  00B4               	movwf	??___ftadd
  8954  0F2E  3019               	movlw	25
  8955  0F2F  0234               	subwf	??___ftadd,w
  8956  0F30  1C03               	skipc
  8957  0F31  2F39               	goto	l2360
  8958  0F32                     l2356:	
  8959  0F32  0831               	movf	___ftadd@f2,w
  8960  0F33  00AE               	movwf	?___ftadd
  8961  0F34  0832               	movf	___ftadd@f2+1,w
  8962  0F35  00AF               	movwf	?___ftadd+1
  8963  0F36  0833               	movf	___ftadd@f2+2,w
  8964  0F37  00B0               	movwf	?___ftadd+2
  8965  0F38  0008               	return
  8966  0F39                     l2360:	
  8967  0F39  0839               	movf	___ftadd@exp2,w
  8968  0F3A  1903               	btfsc	3,2
  8969  0F3B  0008               	return
  8970  0F3C  083A               	movf	___ftadd@exp1,w
  8971  0F3D  0239               	subwf	___ftadd@exp2,w
  8972  0F3E  1803               	skipnc
  8973  0F3F  2F48               	goto	l2366
  8974  0F40  0339               	decf	___ftadd@exp2,w
  8975  0F41  3AFF               	xorlw	255
  8976  0F42  073A               	addwf	___ftadd@exp1,w
  8977  0F43  00B4               	movwf	??___ftadd
  8978  0F44  3019               	movlw	25
  8979  0F45  0234               	subwf	??___ftadd,w
  8980  0F46  1803               	btfsc	3,0
  8981  0F47  0008               	return
  8982  0F48                     l2366:	
  8983  0F48  3006               	movlw	6
  8984  0F49  00B4               	movwf	??___ftadd
  8985  0F4A  0834               	movf	??___ftadd,w
  8986  0F4B  00B8               	movwf	___ftadd@sign
  8987  0F4C  1BB0               	btfsc	___ftadd@f1+2,7
  8988  0F4D  17B8               	bsf	___ftadd@sign,7
  8989  0F4E  1BB3               	btfsc	___ftadd@f2+2,7
  8990  0F4F  1738               	bsf	___ftadd@sign,6
  8991  0F50  17AF               	bsf	___ftadd@f1+1,7
  8992  0F51  30FF               	movlw	255
  8993  0F52  05AE               	andwf	___ftadd@f1,f
  8994  0F53  30FF               	movlw	255
  8995  0F54  05AF               	andwf	___ftadd@f1+1,f
  8996  0F55  3000               	movlw	0
  8997  0F56  05B0               	andwf	___ftadd@f1+2,f
  8998  0F57  17B2               	bsf	___ftadd@f2+1,7
  8999  0F58  30FF               	movlw	255
  9000  0F59  05B1               	andwf	___ftadd@f2,f
  9001  0F5A  30FF               	movlw	255
  9002  0F5B  05B2               	andwf	___ftadd@f2+1,f
  9003  0F5C  3000               	movlw	0
  9004  0F5D  05B3               	andwf	___ftadd@f2+2,f
  9005  0F5E  0839               	movf	___ftadd@exp2,w
  9006  0F5F  023A               	subwf	___ftadd@exp1,w
  9007  0F60  1803               	skipnc
  9008  0F61  2F84               	goto	l2388
  9009  0F62                     l2378:	
  9010  0F62  3001               	movlw	1
  9011  0F63                     u2215:	
  9012  0F63  35B1               	lslf	___ftadd@f2,f
  9013  0F64  0DB2               	rlf	___ftadd@f2+1,f
  9014  0F65  0DB3               	rlf	___ftadd@f2+2,f
  9015  0F66  0B89               	decfsz	9,f
  9016  0F67  2F63               	goto	u2215
  9017  0F68  3001               	movlw	1
  9018  0F69  02B9               	subwf	___ftadd@exp2,f
  9019  0F6A  0839               	movf	___ftadd@exp2,w
  9020  0F6B  063A               	xorwf	___ftadd@exp1,w
  9021  0F6C  1903               	skipnz
  9022  0F6D  2F7F               	goto	l2386
  9023  0F6E  3001               	movlw	1
  9024  0F6F  02B8               	subwf	___ftadd@sign,f
  9025  0F70  0838               	movf	___ftadd@sign,w
  9026  0F71  3907               	andlw	7
  9027  0F72  1903               	btfsc	3,2
  9028  0F73  2F7F               	goto	l2386
  9029  0F74  2F62               	goto	l2378
  9030  0F75                     l2384:	
  9031  0F75  3001               	movlw	1
  9032  0F76                     u2245:	
  9033  0F76  36B0               	lsrf	___ftadd@f1+2,f
  9034  0F77  0CAF               	rrf	___ftadd@f1+1,f
  9035  0F78  0CAE               	rrf	___ftadd@f1,f
  9036  0F79  0B89               	decfsz	9,f
  9037  0F7A  2F76               	goto	u2245
  9038  0F7B  3001               	movlw	1
  9039  0F7C  00B4               	movwf	??___ftadd
  9040  0F7D  0834               	movf	??___ftadd,w
  9041  0F7E  07BA               	addwf	___ftadd@exp1,f
  9042  0F7F                     l2386:	
  9043  0F7F  083A               	movf	___ftadd@exp1,w
  9044  0F80  0639               	xorwf	___ftadd@exp2,w
  9045  0F81  1903               	btfsc	3,2
  9046  0F82  2FA9               	goto	l676
  9047  0F83  2F75               	goto	l2384
  9048  0F84                     l2388:	
  9049  0F84  083A               	movf	___ftadd@exp1,w
  9050  0F85  0239               	subwf	___ftadd@exp2,w
  9051  0F86  1803               	skipnc
  9052  0F87  2FA9               	goto	l676
  9053  0F88                     l2390:	
  9054  0F88  3001               	movlw	1
  9055  0F89                     u2275:	
  9056  0F89  35AE               	lslf	___ftadd@f1,f
  9057  0F8A  0DAF               	rlf	___ftadd@f1+1,f
  9058  0F8B  0DB0               	rlf	___ftadd@f1+2,f
  9059  0F8C  0B89               	decfsz	9,f
  9060  0F8D  2F89               	goto	u2275
  9061  0F8E  3001               	movlw	1
  9062  0F8F  02BA               	subwf	___ftadd@exp1,f
  9063  0F90  0839               	movf	___ftadd@exp2,w
  9064  0F91  063A               	xorwf	___ftadd@exp1,w
  9065  0F92  1903               	skipnz
  9066  0F93  2FA5               	goto	l2398
  9067  0F94  3001               	movlw	1
  9068  0F95  02B8               	subwf	___ftadd@sign,f
  9069  0F96  0838               	movf	___ftadd@sign,w
  9070  0F97  3907               	andlw	7
  9071  0F98  1903               	btfsc	3,2
  9072  0F99  2FA5               	goto	l2398
  9073  0F9A  2F88               	goto	l2390
  9074  0F9B                     l2396:	
  9075  0F9B  3001               	movlw	1
  9076  0F9C                     u2305:	
  9077  0F9C  36B3               	lsrf	___ftadd@f2+2,f
  9078  0F9D  0CB2               	rrf	___ftadd@f2+1,f
  9079  0F9E  0CB1               	rrf	___ftadd@f2,f
  9080  0F9F  0B89               	decfsz	9,f
  9081  0FA0  2F9C               	goto	u2305
  9082  0FA1  3001               	movlw	1
  9083  0FA2  00B4               	movwf	??___ftadd
  9084  0FA3  0834               	movf	??___ftadd,w
  9085  0FA4  07B9               	addwf	___ftadd@exp2,f
  9086  0FA5                     l2398:	
  9087  0FA5  083A               	movf	___ftadd@exp1,w
  9088  0FA6  0639               	xorwf	___ftadd@exp2,w
  9089  0FA7  1D03               	skipz
  9090  0FA8  2F9B               	goto	l2396
  9091  0FA9                     l676:	
  9092  0FA9  1FB8               	btfss	___ftadd@sign,7
  9093  0FAA  2FBB               	goto	l2402
  9094  0FAB  30FF               	movlw	255
  9095  0FAC  06AE               	xorwf	___ftadd@f1,f
  9096  0FAD  30FF               	movlw	255
  9097  0FAE  06AF               	xorwf	___ftadd@f1+1,f
  9098  0FAF  30FF               	movlw	255
  9099  0FB0  06B0               	xorwf	___ftadd@f1+2,f
  9100  0FB1  3001               	movlw	1
  9101  0FB2  07AE               	addwf	___ftadd@f1,f
  9102  0FB3  3000               	movlw	0
  9103  0FB4  1803               	skipnc
  9104  0FB5  3001               	movlw	1
  9105  0FB6  07AF               	addwf	___ftadd@f1+1,f
  9106  0FB7  3000               	movlw	0
  9107  0FB8  1803               	skipnc
  9108  0FB9  3001               	movlw	1
  9109  0FBA  07B0               	addwf	___ftadd@f1+2,f
  9110  0FBB                     l2402:	
  9111  0FBB  1F38               	btfss	___ftadd@sign,6
  9112  0FBC  2FCD               	goto	l2406
  9113  0FBD  30FF               	movlw	255
  9114  0FBE  06B1               	xorwf	___ftadd@f2,f
  9115  0FBF  30FF               	movlw	255
  9116  0FC0  06B2               	xorwf	___ftadd@f2+1,f
  9117  0FC1  30FF               	movlw	255
  9118  0FC2  06B3               	xorwf	___ftadd@f2+2,f
  9119  0FC3  3001               	movlw	1
  9120  0FC4  07B1               	addwf	___ftadd@f2,f
  9121  0FC5  3000               	movlw	0
  9122  0FC6  1803               	skipnc
  9123  0FC7  3001               	movlw	1
  9124  0FC8  07B2               	addwf	___ftadd@f2+1,f
  9125  0FC9  3000               	movlw	0
  9126  0FCA  1803               	skipnc
  9127  0FCB  3001               	movlw	1
  9128  0FCC  07B3               	addwf	___ftadd@f2+2,f
  9129  0FCD                     l2406:	
  9130  0FCD  01B8               	clrf	___ftadd@sign
  9131  0FCE  082E               	movf	___ftadd@f1,w
  9132  0FCF  07B1               	addwf	___ftadd@f2,f
  9133  0FD0  082F               	movf	___ftadd@f1+1,w
  9134  0FD1  3DB2               	addwfc	___ftadd@f2+1,f
  9135  0FD2  0830               	movf	___ftadd@f1+2,w
  9136  0FD3  3DB3               	addwfc	___ftadd@f2+2,f
  9137  0FD4  1FB3               	btfss	___ftadd@f2+2,7
  9138  0FD5  2FE8               	goto	l2416
  9139  0FD6  30FF               	movlw	255
  9140  0FD7  06B1               	xorwf	___ftadd@f2,f
  9141  0FD8  30FF               	movlw	255
  9142  0FD9  06B2               	xorwf	___ftadd@f2+1,f
  9143  0FDA  30FF               	movlw	255
  9144  0FDB  06B3               	xorwf	___ftadd@f2+2,f
  9145  0FDC  3001               	movlw	1
  9146  0FDD  07B1               	addwf	___ftadd@f2,f
  9147  0FDE  3000               	movlw	0
  9148  0FDF  1803               	skipnc
  9149  0FE0  3001               	movlw	1
  9150  0FE1  07B2               	addwf	___ftadd@f2+1,f
  9151  0FE2  3000               	movlw	0
  9152  0FE3  1803               	skipnc
  9153  0FE4  3001               	movlw	1
  9154  0FE5  07B3               	addwf	___ftadd@f2+2,f
  9155  0FE6  01B8               	clrf	___ftadd@sign
  9156  0FE7  0AB8               	incf	___ftadd@sign,f
  9157  0FE8                     l2416:	
  9158  0FE8  0831               	movf	___ftadd@f2,w
  9159  0FE9  00A0               	movwf	___ftpack@arg
  9160  0FEA  0832               	movf	___ftadd@f2+1,w
  9161  0FEB  00A1               	movwf	___ftpack@arg+1
  9162  0FEC  0833               	movf	___ftadd@f2+2,w
  9163  0FED  00A2               	movwf	___ftpack@arg+2
  9164  0FEE  083A               	movf	___ftadd@exp1,w
  9165  0FEF  00B4               	movwf	??___ftadd
  9166  0FF0  0834               	movf	??___ftadd,w
  9167  0FF1  00A3               	movwf	___ftpack@exp
  9168  0FF2  0838               	movf	___ftadd@sign,w
  9169  0FF3  00B5               	movwf	??___ftadd+1
  9170  0FF4  0835               	movf	??___ftadd+1,w
  9171  0FF5  00A4               	movwf	___ftpack@sign
  9172  0FF6  318A  2208         	fcall	___ftpack
  9173  0FF8  0020               	movlb	0	; select bank0
  9174  0FF9  0820               	movf	?___ftpack,w
  9175  0FFA  00AE               	movwf	?___ftadd
  9176  0FFB  0821               	movf	?___ftpack+1,w
  9177  0FFC  00AF               	movwf	?___ftadd+1
  9178  0FFD  0822               	movf	?___ftpack+2,w
  9179  0FFE  00B0               	movwf	?___ftadd+2
  9180  0FFF  0008               	return
  9181  1000                     __end_of___ftadd:	
  9182                           
  9183                           	psect	text36
  9184  16DC                     __ptext36:	
  9185 ;; *************** function ___awtoft *****************
  9186 ;; Defined at:
  9187 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\awtoft.c"
  9188 ;; Parameters:    Size  Location     Type
  9189 ;;  c               2    8[BANK0 ] int 
  9190 ;; Auto vars:     Size  Location     Type
  9191 ;;  sign            1   13[BANK0 ] unsigned char 
  9192 ;; Return value:  Size  Location     Type
  9193 ;;                  3    8[BANK0 ] float 
  9194 ;; Registers used:
  9195 ;;		wreg, status,2, status,0, pclath, cstack
  9196 ;; Tracked objects:
  9197 ;;		On entry : 0/0
  9198 ;;		On exit  : 0/0
  9199 ;;		Unchanged: 0/0
  9200 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9201 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9202 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9203 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9204 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9205 ;;Total ram usage:        6 bytes
  9206 ;; Hardware stack levels used:    1
  9207 ;; Hardware stack levels required when called:    8
  9208 ;; This function calls:
  9209 ;;		___ftpack
  9210 ;; This function is called by:
  9211 ;;		_getADCValue
  9212 ;; This function uses a non-reentrant model
  9213 ;;
  9214                           
  9215                           
  9216                           ;psect for function ___awtoft
  9217  16DC                     ___awtoft:	
  9218                           
  9219                           ;incstack = 0
  9220                           ; Regs used in ___awtoft: [wreg+status,2+status,0+pclath+cstack]
  9221  16DC  0020               	movlb	0	; select bank0
  9222  16DD  01AD               	clrf	___awtoft@sign
  9223  16DE  1FA9               	btfss	___awtoft@c+1,7
  9224  16DF  2EE7               	goto	l2884
  9225  16E0  09A8               	comf	___awtoft@c,f
  9226  16E1  09A9               	comf	___awtoft@c+1,f
  9227  16E2  0AA8               	incf	___awtoft@c,f
  9228  16E3  1903               	skipnz
  9229  16E4  0AA9               	incf	___awtoft@c+1,f
  9230  16E5  01AD               	clrf	___awtoft@sign
  9231  16E6  0AAD               	incf	___awtoft@sign,f
  9232  16E7                     l2884:	
  9233  16E7  0828               	movf	___awtoft@c,w
  9234  16E8  00A0               	movwf	___ftpack@arg
  9235  16E9  0829               	movf	___awtoft@c+1,w
  9236  16EA  00A1               	movwf	___ftpack@arg+1
  9237  16EB  01A2               	clrf	___ftpack@arg+2
  9238  16EC  308E               	movlw	142
  9239  16ED  00AB               	movwf	??___awtoft
  9240  16EE  082B               	movf	??___awtoft,w
  9241  16EF  00A3               	movwf	___ftpack@exp
  9242  16F0  082D               	movf	___awtoft@sign,w
  9243  16F1  00AC               	movwf	??___awtoft+1
  9244  16F2  082C               	movf	??___awtoft+1,w
  9245  16F3  00A4               	movwf	___ftpack@sign
  9246  16F4  318A  2208         	fcall	___ftpack
  9247  16F6  0020               	movlb	0	; select bank0
  9248  16F7  0820               	movf	?___ftpack,w
  9249  16F8  00A8               	movwf	?___awtoft
  9250  16F9  0821               	movf	?___ftpack+1,w
  9251  16FA  00A9               	movwf	?___awtoft+1
  9252  16FB  0822               	movf	?___ftpack+2,w
  9253  16FC  00AA               	movwf	?___awtoft+2
  9254  16FD  0008               	return
  9255  16FE                     __end_of___awtoft:	
  9256                           
  9257                           	psect	text37
  9258  15B6                     __ptext37:	
  9259 ;; *************** function ___lbtoft *****************
  9260 ;; Defined at:
  9261 ;;		line 27 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\lbtoft.c"
  9262 ;; Parameters:    Size  Location     Type
  9263 ;;  c               1    wreg     unsigned char 
  9264 ;; Auto vars:     Size  Location     Type
  9265 ;;  c               1   15[BANK0 ] unsigned char 
  9266 ;; Return value:  Size  Location     Type
  9267 ;;                  3    8[BANK0 ] float 
  9268 ;; Registers used:
  9269 ;;		wreg, status,2, status,0, pclath, cstack
  9270 ;; Tracked objects:
  9271 ;;		On entry : 0/0
  9272 ;;		On exit  : 0/0
  9273 ;;		Unchanged: 0/0
  9274 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9275 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9276 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9277 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9278 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9279 ;;Total ram usage:        8 bytes
  9280 ;; Hardware stack levels used:    1
  9281 ;; Hardware stack levels required when called:    8
  9282 ;; This function calls:
  9283 ;;		___ftpack
  9284 ;; This function is called by:
  9285 ;;		_loop
  9286 ;; This function uses a non-reentrant model
  9287 ;;
  9288                           
  9289                           
  9290                           ;psect for function ___lbtoft
  9291  15B6                     ___lbtoft:	
  9292                           
  9293                           ;incstack = 0
  9294                           ; Regs used in ___lbtoft: [wreg+status,2+status,0+pclath+cstack]
  9295                           ;___lbtoft@c stored from wreg
  9296  15B6  0020               	movlb	0	; select bank0
  9297  15B7  00AF               	movwf	___lbtoft@c
  9298  15B8  082F               	movf	___lbtoft@c,w
  9299  15B9  00AB               	movwf	??___lbtoft
  9300  15BA  01AC               	clrf	??___lbtoft+1
  9301  15BB  01AD               	clrf	??___lbtoft+2
  9302  15BC  082B               	movf	??___lbtoft,w
  9303  15BD  00A0               	movwf	___ftpack@arg
  9304  15BE  082C               	movf	??___lbtoft+1,w
  9305  15BF  00A1               	movwf	___ftpack@arg+1
  9306  15C0  082D               	movf	??___lbtoft+2,w
  9307  15C1  00A2               	movwf	___ftpack@arg+2
  9308  15C2  308E               	movlw	142
  9309  15C3  00AE               	movwf	??___lbtoft+3
  9310  15C4  082E               	movf	??___lbtoft+3,w
  9311  15C5  00A3               	movwf	___ftpack@exp
  9312  15C6  01A4               	clrf	___ftpack@sign
  9313  15C7  318A  2208         	fcall	___ftpack
  9314  15C9  0020               	movlb	0	; select bank0
  9315  15CA  0820               	movf	?___ftpack,w
  9316  15CB  00A8               	movwf	?___lbtoft
  9317  15CC  0821               	movf	?___ftpack+1,w
  9318  15CD  00A9               	movwf	?___lbtoft+1
  9319  15CE  0822               	movf	?___ftpack+2,w
  9320  15CF  00AA               	movwf	?___lbtoft+2
  9321  15D0  0008               	return
  9322  15D1                     __end_of___lbtoft:	
  9323                           
  9324                           	psect	text38
  9325  0800                     __ptext38:	
  9326 ;; *************** function ___lwtoft *****************
  9327 ;; Defined at:
  9328 ;;		line 28 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\lwtoft.c"
  9329 ;; Parameters:    Size  Location     Type
  9330 ;;  c               2    8[BANK0 ] unsigned int 
  9331 ;; Auto vars:     Size  Location     Type
  9332 ;;		None
  9333 ;; Return value:  Size  Location     Type
  9334 ;;                  3    8[BANK0 ] float 
  9335 ;; Registers used:
  9336 ;;		wreg, status,2, status,0, pclath, cstack
  9337 ;; Tracked objects:
  9338 ;;		On entry : 0/0
  9339 ;;		On exit  : 0/0
  9340 ;;		Unchanged: 0/0
  9341 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9342 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9343 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9344 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9345 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9346 ;;Total ram usage:        4 bytes
  9347 ;; Hardware stack levels used:    1
  9348 ;; Hardware stack levels required when called:    8
  9349 ;; This function calls:
  9350 ;;		___ftpack
  9351 ;; This function is called by:
  9352 ;;		_main
  9353 ;; This function uses a non-reentrant model
  9354 ;;
  9355                           
  9356                           
  9357                           ;psect for function ___lwtoft
  9358  0800                     ___lwtoft:	
  9359                           
  9360                           ;incstack = 0
  9361                           ; Regs used in ___lwtoft: [wreg+status,2+status,0+pclath+cstack]
  9362  0800  0020               	movlb	0	; select bank0
  9363  0801  0828               	movf	___lwtoft@c,w
  9364  0802  00A0               	movwf	___ftpack@arg
  9365  0803  0829               	movf	___lwtoft@c+1,w
  9366  0804  00A1               	movwf	___ftpack@arg+1
  9367  0805  01A2               	clrf	___ftpack@arg+2
  9368  0806  308E               	movlw	142
  9369  0807  00AB               	movwf	??___lwtoft
  9370  0808  082B               	movf	??___lwtoft,w
  9371  0809  00A3               	movwf	___ftpack@exp
  9372  080A  01A4               	clrf	___ftpack@sign
  9373  080B  318A  2208         	fcall	___ftpack
  9374  080D  0020               	movlb	0	; select bank0
  9375  080E  0820               	movf	?___ftpack,w
  9376  080F  00A8               	movwf	?___lwtoft
  9377  0810  0821               	movf	?___ftpack+1,w
  9378  0811  00A9               	movwf	?___lwtoft+1
  9379  0812  0822               	movf	?___ftpack+2,w
  9380  0813  00AA               	movwf	?___lwtoft+2
  9381  0814  0008               	return
  9382  0815                     __end_of___lwtoft:	
  9383                           
  9384                           	psect	text39
  9385  0A08                     __ptext39:	
  9386 ;; *************** function ___ftpack *****************
  9387 ;; Defined at:
  9388 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\float.c"
  9389 ;; Parameters:    Size  Location     Type
  9390 ;;  arg             3    0[BANK0 ] unsigned um
  9391 ;;  exp             1    3[BANK0 ] unsigned char 
  9392 ;;  sign            1    4[BANK0 ] unsigned char 
  9393 ;; Auto vars:     Size  Location     Type
  9394 ;;		None
  9395 ;; Return value:  Size  Location     Type
  9396 ;;                  3    0[BANK0 ] float 
  9397 ;; Registers used:
  9398 ;;		wreg, status,2, status,0
  9399 ;; Tracked objects:
  9400 ;;		On entry : 0/0
  9401 ;;		On exit  : 0/0
  9402 ;;		Unchanged: 0/0
  9403 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9404 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9405 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9406 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9407 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9408 ;;Total ram usage:        8 bytes
  9409 ;; Hardware stack levels used:    1
  9410 ;; Hardware stack levels required when called:    7
  9411 ;; This function calls:
  9412 ;;		Nothing
  9413 ;; This function is called by:
  9414 ;;		___awtoft
  9415 ;;		___ftadd
  9416 ;;		___ftdiv
  9417 ;;		___ftmul
  9418 ;;		___lbtoft
  9419 ;;		___lltoft
  9420 ;;		___lwtoft
  9421 ;; This function uses a non-reentrant model
  9422 ;;
  9423                           
  9424                           
  9425                           ;psect for function ___ftpack
  9426  0A08                     ___ftpack:	
  9427                           
  9428                           ;incstack = 0
  9429                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
  9430  0A08  0020               	movlb	0	; select bank0
  9431  0A09  0823               	movf	___ftpack@exp,w
  9432  0A0A  1903               	btfsc	3,2
  9433  0A0B  2A11               	goto	l2206
  9434  0A0C  0822               	movf	___ftpack@arg+2,w
  9435  0A0D  0421               	iorwf	___ftpack@arg+1,w
  9436  0A0E  0420               	iorwf	___ftpack@arg,w
  9437  0A0F  1D03               	skipz
  9438  0A10  2A22               	goto	l2212
  9439  0A11                     l2206:	
  9440  0A11  3000               	movlw	0
  9441  0A12  00A0               	movwf	?___ftpack
  9442  0A13  3000               	movlw	0
  9443  0A14  00A1               	movwf	?___ftpack+1
  9444  0A15  3000               	movlw	0
  9445  0A16  00A2               	movwf	?___ftpack+2
  9446  0A17  0008               	return
  9447  0A18                     l2210:	
  9448  0A18  3001               	movlw	1
  9449  0A19  00A5               	movwf	??___ftpack
  9450  0A1A  0825               	movf	??___ftpack,w
  9451  0A1B  07A3               	addwf	___ftpack@exp,f
  9452  0A1C  3001               	movlw	1
  9453  0A1D                     u1805:	
  9454  0A1D  36A2               	lsrf	___ftpack@arg+2,f
  9455  0A1E  0CA1               	rrf	___ftpack@arg+1,f
  9456  0A1F  0CA0               	rrf	___ftpack@arg,f
  9457  0A20  0B89               	decfsz	9,f
  9458  0A21  2A1D               	goto	u1805
  9459  0A22                     l2212:	
  9460  0A22  30FE               	movlw	254
  9461  0A23  0522               	andwf	___ftpack@arg+2,w
  9462  0A24  1903               	btfsc	3,2
  9463  0A25  2A3B               	goto	l645
  9464  0A26  2A18               	goto	l2210
  9465  0A27                     l2214:	
  9466  0A27  3001               	movlw	1
  9467  0A28  00A5               	movwf	??___ftpack
  9468  0A29  0825               	movf	??___ftpack,w
  9469  0A2A  07A3               	addwf	___ftpack@exp,f
  9470  0A2B  3001               	movlw	1
  9471  0A2C  07A0               	addwf	___ftpack@arg,f
  9472  0A2D  3000               	movlw	0
  9473  0A2E  1803               	skipnc
  9474  0A2F  3001               	movlw	1
  9475  0A30  07A1               	addwf	___ftpack@arg+1,f
  9476  0A31  3000               	movlw	0
  9477  0A32  1803               	skipnc
  9478  0A33  3001               	movlw	1
  9479  0A34  07A2               	addwf	___ftpack@arg+2,f
  9480  0A35  3001               	movlw	1
  9481  0A36                     u1825:	
  9482  0A36  36A2               	lsrf	___ftpack@arg+2,f
  9483  0A37  0CA1               	rrf	___ftpack@arg+1,f
  9484  0A38  0CA0               	rrf	___ftpack@arg,f
  9485  0A39  0B89               	decfsz	9,f
  9486  0A3A  2A36               	goto	u1825
  9487  0A3B                     l645:	
  9488  0A3B  30FF               	movlw	255
  9489  0A3C  0522               	andwf	___ftpack@arg+2,w
  9490  0A3D  1903               	btfsc	3,2
  9491  0A3E  2A48               	goto	l2222
  9492  0A3F  2A27               	goto	l2214
  9493  0A40                     l2220:	
  9494  0A40  3001               	movlw	1
  9495  0A41  02A3               	subwf	___ftpack@exp,f
  9496  0A42  3001               	movlw	1
  9497  0A43                     u1845:	
  9498  0A43  35A0               	lslf	___ftpack@arg,f
  9499  0A44  0DA1               	rlf	___ftpack@arg+1,f
  9500  0A45  0DA2               	rlf	___ftpack@arg+2,f
  9501  0A46  0B89               	decfsz	9,f
  9502  0A47  2A43               	goto	u1845
  9503  0A48                     l2222:	
  9504  0A48  1BA1               	btfsc	___ftpack@arg+1,7
  9505  0A49  2A4E               	goto	l652
  9506  0A4A  3002               	movlw	2
  9507  0A4B  0223               	subwf	___ftpack@exp,w
  9508  0A4C  1803               	skipnc
  9509  0A4D  2A40               	goto	l2220
  9510  0A4E                     l652:	
  9511  0A4E  1823               	btfsc	___ftpack@exp,0
  9512  0A4F  2A56               	goto	l653
  9513  0A50  30FF               	movlw	255
  9514  0A51  05A0               	andwf	___ftpack@arg,f
  9515  0A52  307F               	movlw	127
  9516  0A53  05A1               	andwf	___ftpack@arg+1,f
  9517  0A54  30FF               	movlw	255
  9518  0A55  05A2               	andwf	___ftpack@arg+2,f
  9519  0A56                     l653:	
  9520  0A56  1003               	clrc
  9521  0A57  0CA3               	rrf	___ftpack@exp,f
  9522  0A58  0823               	movf	___ftpack@exp,w
  9523  0A59  00A5               	movwf	??___ftpack
  9524  0A5A  01A6               	clrf	??___ftpack+1
  9525  0A5B  01A7               	clrf	??___ftpack+2
  9526  0A5C  3010               	movlw	16
  9527  0A5D                     u1885:	
  9528  0A5D  35A5               	lslf	??___ftpack,f
  9529  0A5E  0DA6               	rlf	??___ftpack+1,f
  9530  0A5F  0DA7               	rlf	??___ftpack+2,f
  9531  0A60  0B89               	decfsz	9,f
  9532  0A61  2A5D               	goto	u1885
  9533  0A62  0825               	movf	??___ftpack,w
  9534  0A63  04A0               	iorwf	___ftpack@arg,f
  9535  0A64  0826               	movf	??___ftpack+1,w
  9536  0A65  04A1               	iorwf	___ftpack@arg+1,f
  9537  0A66  0827               	movf	??___ftpack+2,w
  9538  0A67  04A2               	iorwf	___ftpack@arg+2,f
  9539  0A68  0824               	movf	___ftpack@sign,w
  9540  0A69  1903               	btfsc	3,2
  9541  0A6A  0008               	return
  9542  0A6B  17A2               	bsf	___ftpack@arg+2,7
  9543  0A6C  0008               	return
  9544  0A6D                     __end_of___ftpack:	
  9545                           
  9546                           	psect	intentry
  9547  0004                     __pintentry:	
  9548 ;; *************** function _ISR *****************
  9549 ;; Defined at:
  9550 ;;		line 13 in file "main.c"
  9551 ;; Parameters:    Size  Location     Type
  9552 ;;		None
  9553 ;; Auto vars:     Size  Location     Type
  9554 ;;		None
  9555 ;; Return value:  Size  Location     Type
  9556 ;;                  1    wreg      void 
  9557 ;; Registers used:
  9558 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9559 ;; Tracked objects:
  9560 ;;		On entry : 0/0
  9561 ;;		On exit  : 0/0
  9562 ;;		Unchanged: 0/0
  9563 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9564 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9565 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9566 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9567 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9568 ;;Total ram usage:        0 bytes
  9569 ;; Hardware stack levels used:    1
  9570 ;; Hardware stack levels required when called:    6
  9571 ;; This function calls:
  9572 ;;		_nrf24l01ISR
  9573 ;; This function is called by:
  9574 ;;		Interrupt level 1
  9575 ;; This function uses a non-reentrant model
  9576 ;;
  9577                           
  9578  0004                     _ISR:	
  9579                           
  9580                           ;incstack = 0
  9581  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
  9582                           
  9583                           ; Regs used in _ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9584  0005  3180               	pagesel	$
  9585                           
  9586                           ;main.c: 15: if (PIR0bits.INTF){
  9587  0006  0020               	movlb	0	; select bank0
  9588  0007  1C10               	btfss	16,0	;volatile
  9589  0008  280D               	goto	i1l151
  9590                           
  9591                           ;main.c: 16: nrf24l01ISR();
  9592  0009  3188  2015         	fcall	_nrf24l01ISR
  9593                           
  9594                           ;main.c: 17: PIR0bits.INTF = 0;
  9595  000B  0020               	movlb	0	; select bank0
  9596  000C  1010               	bcf	16,0	;volatile
  9597  000D                     i1l151:	
  9598  000D  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
  9599  000E  0009               	retfie
  9600  000F                     __end_of_ISR:	
  9601                           
  9602                           	psect	text41
  9603  0815                     __ptext41:	
  9604 ;; *************** function _nrf24l01ISR *****************
  9605 ;; Defined at:
  9606 ;;		line 235 in file "nrf24l01.c"
  9607 ;; Parameters:    Size  Location     Type
  9608 ;;		None
  9609 ;; Auto vars:     Size  Location     Type
  9610 ;;		None
  9611 ;; Return value:  Size  Location     Type
  9612 ;;                  1    wreg      void 
  9613 ;; Registers used:
  9614 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9615 ;; Tracked objects:
  9616 ;;		On entry : 0/0
  9617 ;;		On exit  : 0/0
  9618 ;;		Unchanged: 0/0
  9619 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9620 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9621 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9622 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9623 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9624 ;;Total ram usage:        1 bytes
  9625 ;; Hardware stack levels used:    1
  9626 ;; Hardware stack levels required when called:    5
  9627 ;; This function calls:
  9628 ;;		i1_nrf24l01Send
  9629 ;;		i1_nrf24l01Service
  9630 ;; This function is called by:
  9631 ;;		_ISR
  9632 ;; This function uses a non-reentrant model
  9633 ;;
  9634                           
  9635                           
  9636                           ;psect for function _nrf24l01ISR
  9637  0815                     _nrf24l01ISR:	
  9638                           
  9639                           ;nrf24l01.c: 237: status.statusRegister.byte = nrf24l01Send((unsigned) 0b00000000 | (uns
      +                          igned) 0x07, 0);
  9640                           
  9641                           ;incstack = 0
  9642                           ; Regs used in _nrf24l01ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9643  0815  01F1               	clrf	i1nrf24l01Send@data
  9644  0816  3007               	movlw	7
  9645  0817  3195  259B  3188   	fcall	i1_nrf24l01Send
  9646  081A  00FD               	movwf	??_nrf24l01ISR
  9647  081B  087D               	movf	??_nrf24l01ISR,w
  9648  081C  0021               	movlb	1	; select bank1
  9649  081D  00E8               	movwf	(_status^(0+128)+1)	;volatile
  9650                           
  9651                           ;nrf24l01.c: 239: if (status.statusRegister.TX_DS){
  9652  081E  1EE8               	btfss	(_status^(0+128)+1),5	;volatile
  9653  081F  2838               	goto	i1l270
  9654                           
  9655                           ;nrf24l01.c: 241: if (status.TX == statuses.TX.Sending){
  9656  0820  3036               	movlw	low ((_statuses+2)| (0+32768))
  9657  0821  0084               	movwf	4
  9658  0822  3098               	movlw	high ((_statuses+2)| (0+32768))
  9659  0823  0085               	movwf	5
  9660  0824  0800               	movf	0,w	;code access
  9661  0825  00FD               	movwf	??_nrf24l01ISR
  9662  0826  0867               	movf	_status^(0+128),w	;volatile
  9663  0827  390F               	andlw	15
  9664  0828  067D               	xorwf	??_nrf24l01ISR,w
  9665  0829  1D03               	skipz
  9666  082A  2837               	goto	i1l271
  9667                           
  9668                           ;nrf24l01.c: 242: status.TX = statuses.TX.Sent;
  9669  082B  3037               	movlw	low ((_statuses+3)| (0+32768))
  9670  082C  0084               	movwf	4
  9671  082D  3098               	movlw	high ((_statuses+3)| (0+32768))
  9672  082E  0085               	movwf	5
  9673  082F  0800               	movf	0,w	;code access
  9674  0830  00FD               	movwf	??_nrf24l01ISR
  9675  0831  0867               	movf	_status^(0+128),w	;volatile
  9676  0832  067D               	xorwf	??_nrf24l01ISR,w
  9677  0833  39F0               	andlw	-16
  9678  0834  067D               	xorwf	??_nrf24l01ISR,w
  9679  0835  00E7               	movwf	_status^(0+128)	;volatile
  9680                           
  9681                           ;nrf24l01.c: 243: }
  9682  0836  2838               	goto	i1l270
  9683  0837                     i1l271:	
  9684                           
  9685                           ;nrf24l01.c: 245: else{;nrf24l01.c: 246: status.statusRegister.TX_DS = 0;
  9686  0837  12E8               	bcf	(_status^(0+128)+1),5	;volatile
  9687  0838                     i1l270:	
  9688                           
  9689                           ;nrf24l01.c: 247: };nrf24l01.c: 248: };nrf24l01.c: 251: if (status.statusRegister.RX_DR)
      +                          {
  9690  0838  1F68               	btfss	(_status^(0+128)+1),6	;volatile
  9691  0839  2845               	goto	i1l3264
  9692                           
  9693                           ;nrf24l01.c: 253: if (status.RX == statuses.RX.Idle){
  9694  083A  3039               	movlw	low ((_statuses+5)| (0+32768))
  9695  083B  0084               	movwf	4
  9696  083C  3098               	movlw	high ((_statuses+5)| (0+32768))
  9697  083D  0085               	movwf	5
  9698  083E  0800               	movf	0,w	;code access
  9699  083F  00FD               	movwf	??_nrf24l01ISR
  9700  0840  0E67               	swapf	_status^(0+128),w	;volatile
  9701  0841  390F               	andlw	15
  9702  0842  067D               	xorwf	??_nrf24l01ISR,w
  9703  0843  1D03               	skipz
  9704                           
  9705                           ;nrf24l01.c: 257: else{;nrf24l01.c: 258: status.statusRegister.RX_DR = 0;
  9706                           
  9707                           ;nrf24l01.c: 255: }
  9708  0844  1368               	bcf	(_status^(0+128)+1),6	;volatile
  9709  0845                     i1l3264:	
  9710                           
  9711                           ;nrf24l01.c: 259: };nrf24l01.c: 260: };nrf24l01.c: 263: nrf24l01Send((unsigned) 0b001000
      +                          00 | (unsigned) 0x07, status.statusRegister.byte);
  9712  0845  0868               	movf	(_status^(0+128)+1),w	;volatile
  9713  0846  00FD               	movwf	??_nrf24l01ISR
  9714  0847  087D               	movf	??_nrf24l01ISR,w
  9715  0848  00F1               	movwf	i1nrf24l01Send@data
  9716  0849  3027               	movlw	39
  9717  084A  3195  259B  3188   	fcall	i1_nrf24l01Send
  9718                           
  9719                           ;nrf24l01.c: 265: nrf24l01Service();
  9720  084D  3186  268C         	fcall	i1_nrf24l01Service
  9721  084F  0008               	return
  9722  0850                     __end_of_nrf24l01ISR:	
  9723                           
  9724                           	psect	text42
  9725  068C                     __ptext42:	
  9726 ;; *************** function i1_nrf24l01Service *****************
  9727 ;; Defined at:
  9728 ;;		line 269 in file "nrf24l01.c"
  9729 ;; Parameters:    Size  Location     Type
  9730 ;;		None
  9731 ;; Auto vars:     Size  Location     Type
  9732 ;;  nrf24l01Serv    1   12[COMMON] unsigned char 
  9733 ;;  nrf24l01Serv    1   11[COMMON] unsigned char 
  9734 ;; Return value:  Size  Location     Type
  9735 ;;                  1    wreg      void 
  9736 ;; Registers used:
  9737 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9738 ;; Tracked objects:
  9739 ;;		On entry : 0/0
  9740 ;;		On exit  : 0/0
  9741 ;;		Unchanged: 0/0
  9742 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9743 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9744 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9745 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9746 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9747 ;;Total ram usage:        6 bytes
  9748 ;; Hardware stack levels used:    1
  9749 ;; Hardware stack levels required when called:    4
  9750 ;; This function calls:
  9751 ;;		_nrf24l01CEHigh
  9752 ;;		_nrf24l01CELow
  9753 ;;		_nrf24l01SPIEnd
  9754 ;;		_nrf24l01SPISend
  9755 ;;		_nrf24l01SPIStart
  9756 ;;		i1_memset
  9757 ;;		i1_nrf24l01Send
  9758 ;;		i1_nrf24l01SetRXMode
  9759 ;;		i1_strlen
  9760 ;; This function is called by:
  9761 ;;		_nrf24l01ISR
  9762 ;; This function uses a non-reentrant model
  9763 ;;
  9764                           
  9765                           
  9766                           ;psect for function i1_nrf24l01Service
  9767  068C                     i1_nrf24l01Service:	
  9768                           
  9769                           ;nrf24l01.c: 271: unsigned char i;;nrf24l01.c: 273: if (status.TX == statuses.TX.Ready){
  9770                           
  9771                           ;incstack = 0
  9772                           ; Regs used in i1_nrf24l01Service: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9773  068C  3035               	movlw	low ((_statuses+1)| (0+32768))
  9774  068D  0084               	movwf	4
  9775  068E  3098               	movlw	high ((_statuses+1)| (0+32768))
  9776  068F  0085               	movwf	5
  9777  0690  0800               	movf	0,w	;code access
  9778  0691  00F7               	movwf	??i1_nrf24l01Service
  9779  0692  0021               	movlb	1	; select bank1
  9780  0693  0867               	movf	_status^(0+128),w	;volatile
  9781  0694  390F               	andlw	15
  9782  0695  0677               	xorwf	??i1_nrf24l01Service,w
  9783  0696  1D03               	skipz
  9784  0697  2EF9               	goto	i1l3204
  9785                           
  9786                           ;nrf24l01.c: 276: nrf24l01SetRXMode(0);
  9787  0698  3000               	movlw	0
  9788  0699  3187  27A8  3186   	fcall	i1_nrf24l01SetRXMode
  9789                           
  9790                           ;nrf24l01.c: 279: nrf24l01SPIStart();
  9791  069C  3195  252A  3186   	fcall	_nrf24l01SPIStart
  9792                           
  9793                           ;nrf24l01.c: 282: nrf24l01SPISend((unsigned) 0b10110000);
  9794  069F  30B0               	movlw	176
  9795  06A0  3195  253B  3186   	fcall	_nrf24l01SPISend
  9796                           
  9797                           ;nrf24l01.c: 284: nrf24l01SPISend(TXPacket->packetData.byte);
  9798  06A3  0021               	movlb	1	; select bank1
  9799  06A4  086A               	movf	_TXPacket^(0+128),w
  9800  06A5  0086               	movwf	6
  9801  06A6  086B               	movf	(_TXPacket+1)^(0+128),w
  9802  06A7  0087               	movwf	7
  9803  06A8  0801               	movf	1,w
  9804  06A9  3195  253B  3186   	fcall	_nrf24l01SPISend
  9805                           
  9806                           ;nrf24l01.c: 287: for (i = 0; (i < strlen(TXPacket->Message)) && (i < 31); i++) {
  9807  06AC  01FC               	clrf	i1nrf24l01Service@i
  9808  06AD  2EC4               	goto	i1l3188
  9809  06AE                     i1l3184:	
  9810                           
  9811                           ;nrf24l01.c: 288: nrf24l01SPISend(TXPacket->Message[i]);
  9812  06AE  087C               	movf	i1nrf24l01Service@i,w
  9813  06AF  3E01               	addlw	1
  9814  06B0  00F7               	movwf	??i1_nrf24l01Service
  9815  06B1  3000               	movlw	0
  9816  06B2  1803               	skipnc
  9817  06B3  3001               	movlw	1
  9818  06B4  00F8               	movwf	??i1_nrf24l01Service+1
  9819  06B5  0877               	movf	??i1_nrf24l01Service,w
  9820  06B6  0021               	movlb	1	; select bank1
  9821  06B7  076A               	addwf	_TXPacket^(0+128),w
  9822  06B8  0086               	movwf	6
  9823  06B9  0878               	movf	??i1_nrf24l01Service+1,w
  9824  06BA  3D6B               	addwfc	(_TXPacket+1)^(0+128),w
  9825  06BB  0087               	movwf	7
  9826  06BC  0801               	movf	1,w
  9827  06BD  3195  253B  3186   	fcall	_nrf24l01SPISend
  9828  06C0  3001               	movlw	1
  9829  06C1  00F7               	movwf	??i1_nrf24l01Service
  9830  06C2  0877               	movf	??i1_nrf24l01Service,w
  9831  06C3  07FC               	addwf	i1nrf24l01Service@i,f
  9832  06C4                     i1l3188:	
  9833  06C4  0021               	movlb	1	; select bank1
  9834  06C5  086A               	movf	_TXPacket^(0+128),w
  9835  06C6  3E01               	addlw	1
  9836  06C7  00F7               	movwf	??i1_nrf24l01Service
  9837  06C8  3000               	movlw	0
  9838  06C9  3D6B               	addwfc	(_TXPacket+1)^(0+128),w
  9839  06CA  00F8               	movwf	??i1_nrf24l01Service+1
  9840  06CB  0877               	movf	??i1_nrf24l01Service,w
  9841  06CC  00F0               	movwf	i1strlen@s
  9842  06CD  0878               	movf	??i1_nrf24l01Service+1,w
  9843  06CE  00F1               	movwf	i1strlen@s+1
  9844  06CF  3196  2640  3186   	fcall	i1_strlen
  9845  06D2  087C               	movf	i1nrf24l01Service@i,w
  9846  06D3  00F9               	movwf	??i1_nrf24l01Service+2
  9847  06D4  01FA               	clrf	??i1_nrf24l01Service+3
  9848  06D5  0871               	movf	?i1_strlen+1,w
  9849  06D6  027A               	subwf	??i1_nrf24l01Service+3,w
  9850  06D7  1D03               	skipz
  9851  06D8  2EDB               	goto	u337_25
  9852  06D9  0870               	movf	?i1_strlen,w
  9853  06DA  0279               	subwf	??i1_nrf24l01Service+2,w
  9854  06DB                     u337_25:	
  9855  06DB  1803               	skipnc
  9856  06DC  2EE1               	goto	i1l3192
  9857  06DD  301F               	movlw	31
  9858  06DE  027C               	subwf	i1nrf24l01Service@i,w
  9859  06DF  1C03               	skipc
  9860  06E0  2EAE               	goto	i1l3184
  9861  06E1                     i1l3192:	
  9862                           
  9863                           ;nrf24l01.c: 289: };nrf24l01.c: 292: nrf24l01SPIEnd();
  9864  06E1  3195  251B  3186   	fcall	_nrf24l01SPIEnd
  9865                           
  9866                           ;nrf24l01.c: 295: status.TX = statuses.TX.Sending;
  9867  06E4  3036               	movlw	low ((_statuses+2)| (0+32768))
  9868  06E5  0084               	movwf	4
  9869  06E6  3098               	movlw	high ((_statuses+2)| (0+32768))
  9870  06E7  0085               	movwf	5
  9871  06E8  0800               	movf	0,w	;code access
  9872  06E9  00F7               	movwf	??i1_nrf24l01Service
  9873  06EA  0021               	movlb	1	; select bank1
  9874  06EB  0867               	movf	_status^(0+128),w	;volatile
  9875  06EC  0677               	xorwf	??i1_nrf24l01Service,w
  9876  06ED  39F0               	andlw	-16
  9877  06EE  0677               	xorwf	??i1_nrf24l01Service,w
  9878  06EF  00E7               	movwf	_status^(0+128)	;volatile
  9879                           
  9880                           ;nrf24l01.c: 298: nrf24l01CEHigh();
  9881  06F0  3195  250C  3186   	fcall	_nrf24l01CEHigh
  9882                           
  9883                           ;nrf24l01.c: 299: _delay((unsigned long)((12)*(32000000/4000000.0)));
  9884  06F3  3020               	movlw	32
  9885  06F4                     u362_27:	
  9886  06F4  0B89               	decfsz	9,f
  9887  06F5  2EF4               	goto	u362_27
  9888                           
  9889                           ;nrf24l01.c: 300: nrf24l01CELow();
  9890  06F6  3195  250F  3186   	fcall	_nrf24l01CELow
  9891  06F9                     i1l3204:	
  9892                           
  9893                           ;nrf24l01.c: 306: };nrf24l01.c: 308: if (status.TX == statuses.TX.Sent){
  9894  06F9  3037               	movlw	low ((_statuses+3)| (0+32768))
  9895  06FA  0084               	movwf	4
  9896  06FB  3098               	movlw	high ((_statuses+3)| (0+32768))
  9897  06FC  0085               	movwf	5
  9898  06FD  0800               	movf	0,w	;code access
  9899  06FE  00F7               	movwf	??i1_nrf24l01Service
  9900  06FF  0021               	movlb	1	; select bank1
  9901  0700  0867               	movf	_status^(0+128),w	;volatile
  9902  0701  390F               	andlw	15
  9903  0702  0677               	xorwf	??i1_nrf24l01Service,w
  9904  0703  1D03               	skipz
  9905  0704  2F1A               	goto	i1l286
  9906                           
  9907                           ;nrf24l01.c: 311: if (TXPacket->packetData.ACKRequest){
  9908  0705  086A               	movf	_TXPacket^(0+128),w
  9909  0706  0086               	movwf	6
  9910  0707  086B               	movf	(_TXPacket+1)^(0+128),w
  9911  0708  0087               	movwf	7
  9912  0709  1D01               	btfss	1,2
  9913  070A  2F0F               	goto	i1l3210
  9914                           
  9915                           ;nrf24l01.c: 312: status.TX = statuses.TX.PendingACK;
  9916  070B  3038               	movlw	low ((_statuses+4)| (0+32768))
  9917  070C  0084               	movwf	4
  9918  070D  3098               	movlw	high ((_statuses+4)| (0+32768))
  9919  070E  2F12               	goto	L4
  9920  070F                     i1l3210:	
  9921                           ;nrf24l01.c: 313: }
  9922                           
  9923                           
  9924                           ;nrf24l01.c: 316: else{;nrf24l01.c: 317: status.TX = statuses.TX.Idle;
  9925  070F  3034               	movlw	low (_statuses| (0+32768))
  9926  0710  0084               	movwf	4
  9927  0711  3098               	movlw	high (_statuses| (0+32768))
  9928  0712                     L4:	
  9929  0712  0085               	movwf	5
  9930  0713  0800               	movf	0,w	;code access
  9931  0714  00F7               	movwf	??i1_nrf24l01Service
  9932  0715  0867               	movf	_status^(0+128),w	;volatile
  9933  0716  0677               	xorwf	??i1_nrf24l01Service,w
  9934  0717  39F0               	andlw	-16
  9935  0718  0677               	xorwf	??i1_nrf24l01Service,w
  9936  0719  00E7               	movwf	_status^(0+128)	;volatile
  9937  071A                     i1l286:	
  9938                           
  9939                           ;nrf24l01.c: 318: };nrf24l01.c: 319: };nrf24l01.c: 322: if (status.TX == statuses.TX.Pen
      +                          dingACK){
  9940  071A  3038               	movlw	low ((_statuses+4)| (0+32768))
  9941  071B  0084               	movwf	4
  9942  071C  3098               	movlw	high ((_statuses+4)| (0+32768))
  9943  071D  0085               	movwf	5
  9944  071E  0800               	movf	0,w	;code access
  9945  071F  00F7               	movwf	??i1_nrf24l01Service
  9946  0720  0867               	movf	_status^(0+128),w	;volatile
  9947  0721  390F               	andlw	15
  9948  0722  0677               	xorwf	??i1_nrf24l01Service,w
  9949  0723  1D03               	skipz
  9950  0724  2F30               	goto	i1l289
  9951                           
  9952                           ;nrf24l01.c: 329: status.TX = statuses.TX.Idle;
  9953  0725  3034               	movlw	low (_statuses| (0+32768))
  9954  0726  0084               	movwf	4
  9955  0727  3098               	movlw	high (_statuses| (0+32768))
  9956  0728  0085               	movwf	5
  9957  0729  0800               	movf	0,w	;code access
  9958  072A  00F7               	movwf	??i1_nrf24l01Service
  9959  072B  0867               	movf	_status^(0+128),w	;volatile
  9960  072C  0677               	xorwf	??i1_nrf24l01Service,w
  9961  072D  39F0               	andlw	-16
  9962  072E  0677               	xorwf	??i1_nrf24l01Service,w
  9963  072F  00E7               	movwf	_status^(0+128)	;volatile
  9964  0730                     i1l289:	
  9965                           
  9966                           ;nrf24l01.c: 330: };nrf24l01.c: 332: if (status.RX == statuses.RX.Pending){
  9967  0730  303A               	movlw	low ((_statuses+6)| (0+32768))
  9968  0731  0084               	movwf	4
  9969  0732  3098               	movlw	high ((_statuses+6)| (0+32768))
  9970  0733  0085               	movwf	5
  9971  0734  0800               	movf	0,w	;code access
  9972  0735  00F7               	movwf	??i1_nrf24l01Service
  9973  0736  0E67               	swapf	_status^(0+128),w	;volatile
  9974  0737  390F               	andlw	15
  9975  0738  0677               	xorwf	??i1_nrf24l01Service,w
  9976  0739  1D03               	skipz
  9977  073A  0008               	return
  9978                           
  9979                           ;nrf24l01.c: 335: memset(RXPacket.Message, 0 ,sizeof(RXPacket.Message));
  9980  073B  3000               	movlw	0
  9981  073C  00F0               	movwf	i1memset@c
  9982  073D  00F1               	movwf	i1memset@c+1
  9983  073E  3020               	movlw	32
  9984  073F  00F2               	movwf	i1memset@n
  9985  0740  3000               	movlw	0
  9986  0741  00F3               	movwf	i1memset@n+1
  9987  0742  30A1               	movlw	(low ((_RXPacket| (0+256)+1)))& (0+255)
  9988  0743  3195  2580  3186   	fcall	i1_memset
  9989                           
  9990                           ;nrf24l01.c: 336: RXPacket.packetData.byte = 0x00;
  9991  0746  0023               	movlb	3	; select bank3
  9992  0747  01A0               	clrf	_RXPacket^(0+384)
  9993                           
  9994                           ;nrf24l01.c: 339: unsigned char width = nrf24l01Send((unsigned) 0b01100000, 0);
  9995  0748  01F1               	clrf	i1nrf24l01Send@data
  9996  0749  3060               	movlw	96
  9997  074A  3195  259B  3186   	fcall	i1_nrf24l01Send
  9998  074D  00F7               	movwf	??i1_nrf24l01Service
  9999  074E  0877               	movf	??i1_nrf24l01Service,w
 10000  074F  00FB               	movwf	i1nrf24l01Service@width
 10001                           
 10002                           ;nrf24l01.c: 342: nrf24l01CELow();
 10003  0750  3195  250F  3186   	fcall	_nrf24l01CELow
 10004                           
 10005                           ;nrf24l01.c: 345: nrf24l01SPIStart();
 10006  0753  3195  252A  3186   	fcall	_nrf24l01SPIStart
 10007                           
 10008                           ;nrf24l01.c: 348: nrf24l01SPISend((unsigned) 0b01100001);
 10009  0756  3061               	movlw	97
 10010  0757  3195  253B  3186   	fcall	_nrf24l01SPISend
 10011                           
 10012                           ;nrf24l01.c: 351: RXPacket.packetData.byte = nrf24l01SPISend(0);
 10013  075A  3000               	movlw	0
 10014  075B  3195  253B  3186   	fcall	_nrf24l01SPISend
 10015  075E  00F7               	movwf	??i1_nrf24l01Service
 10016  075F  0877               	movf	??i1_nrf24l01Service,w
 10017  0760  0023               	movlb	3	; select bank3
 10018  0761  00A0               	movwf	_RXPacket^(0+384)
 10019                           
 10020                           ;nrf24l01.c: 352: width--;
 10021  0762  3001               	movlw	1
 10022  0763  02FB               	subwf	i1nrf24l01Service@width,f
 10023                           
 10024                           ;nrf24l01.c: 354: for (i = 0; (i < width) && (i < sizeof(RXPacket.Message)); i++){
 10025  0764  01FC               	clrf	i1nrf24l01Service@i
 10026  0765  2F76               	goto	i1l3236
 10027  0766                     i1l3232:	
 10028                           
 10029                           ;nrf24l01.c: 356: RXPacket.Message[i] = nrf24l01SPISend(0);
 10030  0766  3000               	movlw	0
 10031  0767  3195  253B  3186   	fcall	_nrf24l01SPISend
 10032  076A  00F7               	movwf	??i1_nrf24l01Service
 10033  076B  087C               	movf	i1nrf24l01Service@i,w
 10034  076C  3EA1               	addlw	(low ((_RXPacket| (0+256)+1)))& (0+255)
 10035  076D  0086               	movwf	6
 10036  076E  3001               	movlw	1	; select bank3/4
 10037  076F  0087               	movwf	7
 10038  0770  0877               	movf	??i1_nrf24l01Service,w
 10039  0771  0081               	movwf	1
 10040  0772  3001               	movlw	1
 10041  0773  00F7               	movwf	??i1_nrf24l01Service
 10042  0774  0877               	movf	??i1_nrf24l01Service,w
 10043  0775  07FC               	addwf	i1nrf24l01Service@i,f
 10044  0776                     i1l3236:	
 10045  0776  087B               	movf	i1nrf24l01Service@width,w
 10046  0777  027C               	subwf	i1nrf24l01Service@i,w
 10047  0778  1803               	skipnc
 10048  0779  2F7E               	goto	i1l3240
 10049  077A  3020               	movlw	32
 10050  077B  027C               	subwf	i1nrf24l01Service@i,w
 10051  077C  1C03               	skipc
 10052  077D  2F66               	goto	i1l3232
 10053  077E                     i1l3240:	
 10054                           
 10055                           ;nrf24l01.c: 357: };nrf24l01.c: 360: nrf24l01SPIEnd();
 10056  077E  3195  251B  3186   	fcall	_nrf24l01SPIEnd
 10057                           
 10058                           ;nrf24l01.c: 363: nrf24l01CEHigh();
 10059  0781  3195  250C  3186   	fcall	_nrf24l01CEHigh
 10060                           
 10061                           ;nrf24l01.c: 366: RXPacket.packetData.Pipe = status.statusRegister.RX_P_NO;
 10062  0784  0021               	movlb	1	; select bank1
 10063  0785  0C68               	rrf	(_status^(0+128)+1),w	;volatile
 10064  0786  3907               	andlw	7
 10065  0787  00F7               	movwf	??i1_nrf24l01Service
 10066  0788  0EF7               	swapf	??i1_nrf24l01Service,f
 10067  0789  0023               	movlb	3	; select bank3
 10068  078A  0820               	movf	_RXPacket^(0+384),w
 10069  078B  0677               	xorwf	??i1_nrf24l01Service,w
 10070  078C  398F               	andlw	-113
 10071  078D  0677               	xorwf	??i1_nrf24l01Service,w
 10072  078E  00A0               	movwf	_RXPacket^(0+384)
 10073                           
 10074                           ;nrf24l01.c: 369: RXPacket.packetData.RPD = nrf24l01Send((unsigned) 0b00000000 | (unsign
      +                          ed) 0x09, 0);
 10075  078F  01F1               	clrf	i1nrf24l01Send@data
 10076  0790  3009               	movlw	9
 10077  0791  3195  259B         	fcall	i1_nrf24l01Send
 10078  0793  00F7               	movwf	??i1_nrf24l01Service
 10079  0794  0023               	movlb	3	; select bank3
 10080  0795  0820               	movf	_RXPacket^(0+384),w
 10081  0796  0677               	xorwf	??i1_nrf24l01Service,w
 10082  0797  39FE               	andlw	-2
 10083  0798  0677               	xorwf	??i1_nrf24l01Service,w
 10084  0799  00A0               	movwf	_RXPacket^(0+384)
 10085                           
 10086                           ;nrf24l01.c: 371: status.RX = statuses.RX.Ready;
 10087  079A  303B               	movlw	low ((_statuses+7)| (0+32768))
 10088  079B  0084               	movwf	4
 10089  079C  3098               	movlw	high ((_statuses+7)| (0+32768))
 10090  079D  0085               	movwf	5
 10091  079E  0800               	movf	0,w	;code access
 10092  079F  00F7               	movwf	??i1_nrf24l01Service
 10093  07A0  0EF7               	swapf	??i1_nrf24l01Service,f
 10094  07A1  0021               	movlb	1	; select bank1
 10095  07A2  0867               	movf	_status^(0+128),w	;volatile
 10096  07A3  0677               	xorwf	??i1_nrf24l01Service,w
 10097  07A4  390F               	andlw	-241
 10098  07A5  0677               	xorwf	??i1_nrf24l01Service,w
 10099  07A6  00E7               	movwf	_status^(0+128)	;volatile
 10100  07A7  0008               	return
 10101  07A8                     __end_ofi1_nrf24l01Service:	
 10102                           
 10103                           	psect	text43
 10104  1640                     __ptext43:	
 10105 ;; *************** function i1_strlen *****************
 10106 ;; Defined at:
 10107 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\strlen.c"
 10108 ;; Parameters:    Size  Location     Type
 10109 ;;  s               2    0[COMMON] PTR const unsigned char 
 10110 ;;		 -> packet.Message(32), packet.Message(32), NULL(0), main@packet(33), 
 10111 ;;		 -> loop@packet(33), romDataMap(28), 
 10112 ;; Auto vars:     Size  Location     Type
 10113 ;;  strlen          2    4[COMMON] PTR const unsigned char 
 10114 ;;		 -> packet.Message(32), packet.Message(32), NULL(0), main@packet(33), 
 10115 ;;		 -> loop@packet(33), romDataMap(28), 
 10116 ;; Return value:  Size  Location     Type
 10117 ;;                  2    0[COMMON] unsigned int 
 10118 ;; Registers used:
 10119 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 10120 ;; Tracked objects:
 10121 ;;		On entry : 0/0
 10122 ;;		On exit  : 0/0
 10123 ;;		Unchanged: 0/0
 10124 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10125 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10126 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10127 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10128 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10129 ;;Total ram usage:        6 bytes
 10130 ;; Hardware stack levels used:    1
 10131 ;; This function calls:
 10132 ;;		Nothing
 10133 ;; This function is called by:
 10134 ;;		i1_nrf24l01Service
 10135 ;; This function uses a non-reentrant model
 10136 ;;
 10137                           
 10138                           
 10139                           ;psect for function i1_strlen
 10140  1640                     i1_strlen:	
 10141                           
 10142                           ;incstack = 0
 10143                           ; Regs used in i1_strlen: [wreg+fsr1l+fsr1h+status,2+status,0]
 10144  1640  0871               	movf	i1strlen@s+1,w
 10145  1641  00F5               	movwf	i1strlen@cp+1
 10146  1642  0870               	movf	i1strlen@s,w
 10147  1643  00F4               	movwf	i1strlen@cp
 10148  1644                     i1l2972:	
 10149  1644  0874               	movf	i1strlen@cp,w
 10150  1645  0086               	movwf	6
 10151  1646  0875               	movf	i1strlen@cp+1,w
 10152  1647  0087               	movwf	7
 10153  1648  0801               	movf	1,w
 10154  1649  1903               	btfsc	3,2
 10155  164A  2E50               	goto	i1l2974
 10156  164B  3001               	movlw	1
 10157  164C  07F4               	addwf	i1strlen@cp,f
 10158  164D  3000               	movlw	0
 10159  164E  3DF5               	addwfc	i1strlen@cp+1,f
 10160  164F  2E44               	goto	i1l2972
 10161  1650                     i1l2974:	
 10162  1650  0970               	comf	i1strlen@s,w
 10163  1651  00F2               	movwf	??i1_strlen
 10164  1652  0971               	comf	i1strlen@s+1,w
 10165  1653  00F3               	movwf	??i1_strlen+1
 10166  1654  0AF2               	incf	??i1_strlen,f
 10167  1655  1903               	skipnz
 10168  1656  0AF3               	incf	??i1_strlen+1,f
 10169  1657  0874               	movf	i1strlen@cp,w
 10170  1658  0772               	addwf	??i1_strlen,w
 10171  1659  00F0               	movwf	?i1_strlen
 10172  165A  0875               	movf	i1strlen@cp+1,w
 10173  165B  3D73               	addwfc	??i1_strlen+1,w
 10174  165C  00F1               	movwf	?i1_strlen+1
 10175  165D  0008               	return
 10176  165E                     __end_ofi1_strlen:	
 10177                           
 10178                           	psect	text44
 10179  07A8                     __ptext44:	
 10180 ;; *************** function i1_nrf24l01SetRXMode *****************
 10181 ;; Defined at:
 10182 ;;		line 91 in file "nrf24l01.c"
 10183 ;; Parameters:    Size  Location     Type
 10184 ;;  rxMode          1    wreg     unsigned char 
 10185 ;; Auto vars:     Size  Location     Type
 10186 ;;  rxMode          1    5[COMMON] unsigned char 
 10187 ;; Return value:  Size  Location     Type
 10188 ;;                  1    wreg      void 
 10189 ;; Registers used:
 10190 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 10191 ;; Tracked objects:
 10192 ;;		On entry : 0/0
 10193 ;;		On exit  : 0/0
 10194 ;;		Unchanged: 0/0
 10195 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10196 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10197 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10198 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10199 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10200 ;;Total ram usage:        2 bytes
 10201 ;; Hardware stack levels used:    1
 10202 ;; Hardware stack levels required when called:    3
 10203 ;; This function calls:
 10204 ;;		_nrf24l01CEHigh
 10205 ;;		_nrf24l01CELow
 10206 ;;		i1_nrf24l01Send
 10207 ;; This function is called by:
 10208 ;;		i1_nrf24l01Service
 10209 ;; This function uses a non-reentrant model
 10210 ;;
 10211                           
 10212                           
 10213                           ;psect for function i1_nrf24l01SetRXMode
 10214  07A8                     i1_nrf24l01SetRXMode:	
 10215                           
 10216                           ;incstack = 0
 10217                           ; Regs used in i1_nrf24l01SetRXMode: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 10218                           ;i1nrf24l01SetRXMode@rxMode stored from wreg
 10219  07A8  00F5               	movwf	i1nrf24l01SetRXMode@rxMode
 10220                           
 10221                           ;nrf24l01.c: 93: if (rxMode){
 10222  07A9  0875               	movf	i1nrf24l01SetRXMode@rxMode,w
 10223  07AA  1903               	btfsc	3,2
 10224  07AB  2FB8               	goto	i1l2936
 10225                           
 10226                           ;nrf24l01.c: 94: if (status.TX == statuses.TX.Sending){
 10227  07AC  3036               	movlw	low ((_statuses+2)| (0+32768))
 10228  07AD  0084               	movwf	4
 10229  07AE  3098               	movlw	high ((_statuses+2)| (0+32768))
 10230  07AF  0085               	movwf	5
 10231  07B0  0800               	movf	0,w	;code access
 10232  07B1  00F4               	movwf	??i1_nrf24l01SetRXMode
 10233  07B2  0021               	movlb	1	; select bank1
 10234  07B3  0867               	movf	_status^(0+128),w	;volatile
 10235  07B4  390F               	andlw	15
 10236  07B5  0674               	xorwf	??i1_nrf24l01SetRXMode,w
 10237  07B6  1903               	btfsc	3,2
 10238  07B7  0008               	return
 10239  07B8                     i1l2936:	
 10240                           ;nrf24l01.c: 95: return;
 10241                           
 10242                           
 10243                           ;nrf24l01.c: 96: };nrf24l01.c: 97: };nrf24l01.c: 99: if (!rxMode){
 10244  07B8  0875               	movf	i1nrf24l01SetRXMode@rxMode,w
 10245  07B9  1D03               	btfss	3,2
 10246  07BA  2FC7               	goto	i1l2942
 10247                           
 10248                           ;nrf24l01.c: 100: if (status.TX == statuses.TX.PendingACK){
 10249  07BB  3038               	movlw	low ((_statuses+4)| (0+32768))
 10250  07BC  0084               	movwf	4
 10251  07BD  3098               	movlw	high ((_statuses+4)| (0+32768))
 10252  07BE  0085               	movwf	5
 10253  07BF  0800               	movf	0,w	;code access
 10254  07C0  00F4               	movwf	??i1_nrf24l01SetRXMode
 10255  07C1  0021               	movlb	1	; select bank1
 10256  07C2  0867               	movf	_status^(0+128),w	;volatile
 10257  07C3  390F               	andlw	15
 10258  07C4  0674               	xorwf	??i1_nrf24l01SetRXMode,w
 10259  07C5  1903               	btfsc	3,2
 10260  07C6  0008               	return
 10261  07C7                     i1l2942:	
 10262                           ;nrf24l01.c: 101: return;
 10263                           
 10264                           
 10265                           ;nrf24l01.c: 102: };nrf24l01.c: 103: };nrf24l01.c: 109: if (status.configRegister.PRIM_R
      +                          X != rxMode){
 10266  07C7  0021               	movlb	1	; select bank1
 10267  07C8  0869               	movf	(_status^(0+128)+2),w	;volatile
 10268  07C9  3901               	andlw	1
 10269  07CA  0675               	xorwf	i1nrf24l01SetRXMode@rxMode,w
 10270  07CB  1903               	skipnz
 10271  07CC  0008               	return
 10272                           
 10273                           ;nrf24l01.c: 112: nrf24l01CELow();
 10274  07CD  3195  250F  3187   	fcall	_nrf24l01CELow
 10275                           
 10276                           ;nrf24l01.c: 113: _delay((unsigned long)((2000)*(32000000/4000000.0)));
 10277  07D0  3015               	movlw	21
 10278  07D1  00F4               	movwf	??i1_nrf24l01SetRXMode
 10279  07D2  30C6               	movlw	198
 10280  07D3                     u363_27:	
 10281  07D3  0B89               	decfsz	9,f
 10282  07D4  2FD3               	goto	u363_27
 10283  07D5  0BF4               	decfsz	??i1_nrf24l01SetRXMode,f
 10284  07D6  2FD3               	goto	u363_27
 10285  07D7  3200               	nop2
 10286                           
 10287                           ;nrf24l01.c: 116: status.configRegister.PRIM_RX = rxMode;
 10288  07D8  0C75               	rrf	i1nrf24l01SetRXMode@rxMode,w
 10289  07D9  0021               	movlb	1	; select bank1
 10290  07DA  1C03               	skipc
 10291  07DB  1069               	bcf	(_status^(0+128)+2),0	;volatile
 10292  07DC  1803               	skipnc
 10293  07DD  1469               	bsf	(_status^(0+128)+2),0	;volatile
 10294                           
 10295                           ;nrf24l01.c: 117: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x00, status.configReg
      +                          ister.byte);
 10296  07DE  0869               	movf	(_status^(0+128)+2),w	;volatile
 10297  07DF  00F4               	movwf	??i1_nrf24l01SetRXMode
 10298  07E0  0874               	movf	??i1_nrf24l01SetRXMode,w
 10299  07E1  00F1               	movwf	i1nrf24l01Send@data
 10300  07E2  3020               	movlw	32
 10301  07E3  3195  259B  3187   	fcall	i1_nrf24l01Send
 10302                           
 10303                           ;nrf24l01.c: 120: _delay((unsigned long)((2000)*(32000000/4000000.0)));
 10304  07E6  3015               	movlw	21
 10305  07E7  00F4               	movwf	??i1_nrf24l01SetRXMode
 10306  07E8  30C6               	movlw	198
 10307  07E9                     u364_27:	
 10308  07E9  0B89               	decfsz	9,f
 10309  07EA  2FE9               	goto	u364_27
 10310  07EB  0BF4               	decfsz	??i1_nrf24l01SetRXMode,f
 10311  07EC  2FE9               	goto	u364_27
 10312  07ED  3200               	nop2
 10313                           
 10314                           ;nrf24l01.c: 123: if (rxMode){
 10315  07EE  0875               	movf	i1nrf24l01SetRXMode@rxMode,w
 10316  07EF  1903               	btfsc	3,2
 10317  07F0  0008               	return
 10318                           
 10319                           ;nrf24l01.c: 124: nrf24l01CEHigh();
 10320  07F1  3195  250C  3187   	fcall	_nrf24l01CEHigh
 10321                           
 10322                           ;nrf24l01.c: 125: _delay((unsigned long)((2000)*(32000000/4000000.0)));
 10323  07F4  3015               	movlw	21
 10324  07F5  00F4               	movwf	??i1_nrf24l01SetRXMode
 10325  07F6  30C6               	movlw	198
 10326  07F7                     u365_27:	
 10327  07F7  0B89               	decfsz	9,f
 10328  07F8  2FF7               	goto	u365_27
 10329  07F9  0BF4               	decfsz	??i1_nrf24l01SetRXMode,f
 10330  07FA  2FF7               	goto	u365_27
 10331  07FB  3200               	nop2
 10332  07FC  0008               	return
 10333  07FD                     __end_ofi1_nrf24l01SetRXMode:	
 10334                           
 10335                           	psect	text45
 10336  159B                     __ptext45:	
 10337 ;; *************** function i1_nrf24l01Send *****************
 10338 ;; Defined at:
 10339 ;;		line 46 in file "nrf24l01.c"
 10340 ;; Parameters:    Size  Location     Type
 10341 ;;  command         1    wreg     unsigned char 
 10342 ;;  data            1    1[COMMON] unsigned char 
 10343 ;; Auto vars:     Size  Location     Type
 10344 ;;  command         1    3[COMMON] unsigned char 
 10345 ;; Return value:  Size  Location     Type
 10346 ;;                  1    wreg      unsigned char 
 10347 ;; Registers used:
 10348 ;;		wreg, status,2, status,0, pclath, cstack
 10349 ;; Tracked objects:
 10350 ;;		On entry : 0/0
 10351 ;;		On exit  : 0/0
 10352 ;;		Unchanged: 0/0
 10353 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10354 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10355 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10356 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10357 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10358 ;;Total ram usage:        3 bytes
 10359 ;; Hardware stack levels used:    1
 10360 ;; Hardware stack levels required when called:    2
 10361 ;; This function calls:
 10362 ;;		_enableInterrupts
 10363 ;;		_nrf24l01SPIEnd
 10364 ;;		_nrf24l01SPISend
 10365 ;;		_nrf24l01SPIStart
 10366 ;; This function is called by:
 10367 ;;		_nrf24l01ISR
 10368 ;;		i1_nrf24l01SetRXMode
 10369 ;;		i1_nrf24l01Service
 10370 ;; This function uses a non-reentrant model
 10371 ;;
 10372                           
 10373                           
 10374                           ;psect for function i1_nrf24l01Send
 10375  159B                     i1_nrf24l01Send:	
 10376                           
 10377                           ;incstack = 0
 10378                           ; Regs used in i1_nrf24l01Send: [wreg+status,2+status,0+pclath+cstack]
 10379                           ;i1nrf24l01Send@command stored from wreg
 10380  159B  00F3               	movwf	i1nrf24l01Send@command
 10381                           
 10382                           ;nrf24l01.c: 49: enableInterrupts(0);
 10383  159C  3000               	movlw	0
 10384  159D  3195  2522  3195   	fcall	_enableInterrupts
 10385                           
 10386                           ;nrf24l01.c: 52: nrf24l01SPIStart();
 10387  15A0  3195  252A  3195   	fcall	_nrf24l01SPIStart
 10388                           
 10389                           ;nrf24l01.c: 55: nrf24l01SPISend(command);
 10390  15A3  0873               	movf	i1nrf24l01Send@command,w
 10391  15A4  3195  253B  3195   	fcall	_nrf24l01SPISend
 10392                           
 10393                           ;nrf24l01.c: 58: data = nrf24l01SPISend(data);
 10394  15A7  0871               	movf	i1nrf24l01Send@data,w
 10395  15A8  3195  253B  3195   	fcall	_nrf24l01SPISend
 10396  15AB  00F2               	movwf	??i1_nrf24l01Send
 10397  15AC  0872               	movf	??i1_nrf24l01Send,w
 10398  15AD  00F1               	movwf	i1nrf24l01Send@data
 10399                           
 10400                           ;nrf24l01.c: 61: nrf24l01SPIEnd();
 10401  15AE  3195  251B  3195   	fcall	_nrf24l01SPIEnd
 10402                           
 10403                           ;nrf24l01.c: 64: enableInterrupts(1);
 10404  15B1  3001               	movlw	1
 10405  15B2  3195  2522         	fcall	_enableInterrupts
 10406                           
 10407                           ;nrf24l01.c: 66: return data;
 10408  15B4  0871               	movf	i1nrf24l01Send@data,w
 10409  15B5  0008               	return
 10410  15B6                     __end_ofi1_nrf24l01Send:	
 10411                           
 10412                           	psect	text46
 10413  152A                     __ptext46:	
 10414 ;; *************** function _nrf24l01SPIStart *****************
 10415 ;; Defined at:
 10416 ;;		line 64 in file "interface.c"
 10417 ;; Parameters:    Size  Location     Type
 10418 ;;		None
 10419 ;; Auto vars:     Size  Location     Type
 10420 ;;		None
 10421 ;; Return value:  Size  Location     Type
 10422 ;;                  1    wreg      void 
 10423 ;; Registers used:
 10424 ;;		wreg, status,2, status,0, pclath, cstack
 10425 ;; Tracked objects:
 10426 ;;		On entry : 0/0
 10427 ;;		On exit  : 0/0
 10428 ;;		Unchanged: 0/0
 10429 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10430 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10431 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10432 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10433 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10434 ;;Total ram usage:        0 bytes
 10435 ;; Hardware stack levels used:    1
 10436 ;; Hardware stack levels required when called:    8
 10437 ;; This function calls:
 10438 ;;		_nrf24l01CSLow
 10439 ;; This function is called by:
 10440 ;;		_nrf24l01Send
 10441 ;;		_nrf24l01SetTXPipe
 10442 ;;		_nrf24l01Service
 10443 ;;		_nrf24l01InitRegisters
 10444 ;;		i1_nrf24l01Send
 10445 ;;		i1_nrf24l01Service
 10446 ;; This function uses a non-reentrant model
 10447 ;;
 10448                           
 10449                           
 10450                           ;psect for function _nrf24l01SPIStart
 10451  152A                     _nrf24l01SPIStart:	
 10452                           
 10453                           ;interface.c: 65: nrf24l01CSLow();
 10454                           
 10455                           ;incstack = 0
 10456 ;; hardware stack exceeded
 10457                           ; Regs used in _nrf24l01SPIStart: [wreg+status,2+status,0+pclath+cstack]
 10458  152A  3187  27FD  3195   	fcall	_nrf24l01CSLow
 10459                           
 10460                           ;interface.c: 66: _delay((unsigned long)((10)*(32000000/4000000.0)));
 10461  152D  301A               	movlw	26
 10462  152E                     u366_27:	
 10463  152E  0B89               	decfsz	9,f
 10464  152F  2D2E               	goto	u366_27
 10465  1530  3200               	nop2
 10466  1531  0008               	return
 10467  1532                     __end_of_nrf24l01SPIStart:	
 10468                           
 10469                           	psect	text47
 10470  07FD                     __ptext47:	
 10471 ;; *************** function _nrf24l01CSLow *****************
 10472 ;; Defined at:
 10473 ;;		line 17 in file "interface.c"
 10474 ;; Parameters:    Size  Location     Type
 10475 ;;		None
 10476 ;; Auto vars:     Size  Location     Type
 10477 ;;		None
 10478 ;; Return value:  Size  Location     Type
 10479 ;;                  1    wreg      void 
 10480 ;; Registers used:
 10481 ;;		None
 10482 ;; Tracked objects:
 10483 ;;		On entry : 0/0
 10484 ;;		On exit  : 0/0
 10485 ;;		Unchanged: 0/0
 10486 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10487 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10488 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10489 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10490 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10491 ;;Total ram usage:        0 bytes
 10492 ;; Hardware stack levels used:    1
 10493 ;; Hardware stack levels required when called:    7
 10494 ;; This function calls:
 10495 ;;		Nothing
 10496 ;; This function is called by:
 10497 ;;		_nrf24l01SPIStart
 10498 ;; This function uses a non-reentrant model
 10499 ;;
 10500                           
 10501                           
 10502                           ;psect for function _nrf24l01CSLow
 10503  07FD                     _nrf24l01CSLow:	
 10504                           
 10505                           ;interface.c: 18: PORTAbits.RA1 = 0;
 10506                           
 10507                           ;incstack = 0
 10508 ;; hardware stack exceeded
 10509                           ; Regs used in _nrf24l01CSLow: []
 10510  07FD  0020               	movlb	0	; select bank0
 10511  07FE  108C               	bcf	12,1	;volatile
 10512  07FF  0008               	return
 10513  0800                     __end_of_nrf24l01CSLow:	
 10514                           
 10515                           	psect	text48
 10516  153B                     __ptext48:	
 10517 ;; *************** function _nrf24l01SPISend *****************
 10518 ;; Defined at:
 10519 ;;		line 51 in file "interface.c"
 10520 ;; Parameters:    Size  Location     Type
 10521 ;;  data            1    wreg     unsigned char 
 10522 ;; Auto vars:     Size  Location     Type
 10523 ;;  data            1    0[COMMON] unsigned char 
 10524 ;; Return value:  Size  Location     Type
 10525 ;;                  1    wreg      unsigned char 
 10526 ;; Registers used:
 10527 ;;		wreg
 10528 ;; Tracked objects:
 10529 ;;		On entry : 0/0
 10530 ;;		On exit  : 0/0
 10531 ;;		Unchanged: 0/0
 10532 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10533 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10534 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10535 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10536 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10537 ;;Total ram usage:        0 bytes
 10538 ;; Hardware stack levels used:    1
 10539 ;; Hardware stack levels required when called:    7
 10540 ;; This function calls:
 10541 ;;		Nothing
 10542 ;; This function is called by:
 10543 ;;		_nrf24l01Send
 10544 ;;		_nrf24l01SetTXPipe
 10545 ;;		_nrf24l01Service
 10546 ;;		_nrf24l01InitRegisters
 10547 ;;		i1_nrf24l01Send
 10548 ;;		i1_nrf24l01Service
 10549 ;; This function uses a non-reentrant model
 10550 ;;
 10551                           
 10552                           
 10553                           ;psect for function _nrf24l01SPISend
 10554  153B                     _nrf24l01SPISend:	
 10555                           
 10556                           ;incstack = 0
 10557 ;; hardware stack exceeded
 10558                           ; Regs used in _nrf24l01SPISend: [wreg]
 10559                           ;nrf24l01SPISend@data stored from wreg
 10560  153B  00F0               	movwf	nrf24l01SPISend@data
 10561                           
 10562                           ;interface.c: 52: SSP1BUF = data;
 10563  153C  0870               	movf	nrf24l01SPISend@data,w
 10564  153D  0024               	movlb	4	; select bank4
 10565  153E  0091               	movwf	17	;volatile
 10566                           
 10567                           ;interface.c: 54: PORTCbits.RC4 = 1;
 10568  153F  0020               	movlb	0	; select bank0
 10569  1540  160E               	bsf	14,4	;volatile
 10570  1541                     i1l48:	
 10571                           ;interface.c: 56: while (!SSP1STATbits.BF){
 10572                           
 10573  1541  0024               	movlb	4	; select bank4
 10574  1542  1814               	btfsc	20,0	;volatile
 10575  1543  2D46               	goto	i1l2238
 10576                           
 10577                           ;interface.c: 57: __nop();
 10578  1544  0000               	nop
 10579  1545  2D41               	goto	i1l48
 10580  1546                     i1l2238:	
 10581                           
 10582                           ;interface.c: 58: };interface.c: 60: return SSP1BUF;
 10583  1546  0811               	movf	17,w	;volatile
 10584  1547  0008               	return
 10585  1548                     __end_of_nrf24l01SPISend:	
 10586                           
 10587                           	psect	text49
 10588  151B                     __ptext49:	
 10589 ;; *************** function _nrf24l01SPIEnd *****************
 10590 ;; Defined at:
 10591 ;;		line 70 in file "interface.c"
 10592 ;; Parameters:    Size  Location     Type
 10593 ;;		None
 10594 ;; Auto vars:     Size  Location     Type
 10595 ;;		None
 10596 ;; Return value:  Size  Location     Type
 10597 ;;                  1    wreg      void 
 10598 ;; Registers used:
 10599 ;;		wreg, status,2, status,0, pclath, cstack
 10600 ;; Tracked objects:
 10601 ;;		On entry : 0/0
 10602 ;;		On exit  : 0/0
 10603 ;;		Unchanged: 0/0
 10604 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10605 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10606 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10607 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10608 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10609 ;;Total ram usage:        0 bytes
 10610 ;; Hardware stack levels used:    1
 10611 ;; Hardware stack levels required when called:    8
 10612 ;; This function calls:
 10613 ;;		_nrf24l01CSHigh
 10614 ;; This function is called by:
 10615 ;;		_nrf24l01Send
 10616 ;;		_nrf24l01SetTXPipe
 10617 ;;		_nrf24l01Service
 10618 ;;		_nrf24l01InitRegisters
 10619 ;;		i1_nrf24l01Send
 10620 ;;		i1_nrf24l01Service
 10621 ;; This function uses a non-reentrant model
 10622 ;;
 10623                           
 10624                           
 10625                           ;psect for function _nrf24l01SPIEnd
 10626  151B                     _nrf24l01SPIEnd:	
 10627                           
 10628                           ;interface.c: 71: _delay((unsigned long)((10)*(32000000/4000000.0)));
 10629                           
 10630                           ;incstack = 0
 10631 ;; hardware stack exceeded
 10632                           ; Regs used in _nrf24l01SPIEnd: [wreg+status,2+status,0+pclath+cstack]
 10633  151B  301A               	movlw	26
 10634  151C                     u367_27:	
 10635  151C  0B89               	decfsz	9,f
 10636  151D  2D1C               	goto	u367_27
 10637  151E  3200               	nop2
 10638                           
 10639                           ;interface.c: 72: nrf24l01CSHigh();
 10640  151F  3195  2512         	fcall	_nrf24l01CSHigh
 10641  1521  0008               	return
 10642  1522                     __end_of_nrf24l01SPIEnd:	
 10643                           
 10644                           	psect	text50
 10645  1512                     __ptext50:	
 10646 ;; *************** function _nrf24l01CSHigh *****************
 10647 ;; Defined at:
 10648 ;;		line 22 in file "interface.c"
 10649 ;; Parameters:    Size  Location     Type
 10650 ;;		None
 10651 ;; Auto vars:     Size  Location     Type
 10652 ;;		None
 10653 ;; Return value:  Size  Location     Type
 10654 ;;                  1    wreg      void 
 10655 ;; Registers used:
 10656 ;;		None
 10657 ;; Tracked objects:
 10658 ;;		On entry : 0/0
 10659 ;;		On exit  : 0/0
 10660 ;;		Unchanged: 0/0
 10661 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10662 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10663 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10664 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10665 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10666 ;;Total ram usage:        0 bytes
 10667 ;; Hardware stack levels used:    1
 10668 ;; Hardware stack levels required when called:    7
 10669 ;; This function calls:
 10670 ;;		Nothing
 10671 ;; This function is called by:
 10672 ;;		_nrf24l01SPIEnd
 10673 ;; This function uses a non-reentrant model
 10674 ;;
 10675                           
 10676                           
 10677                           ;psect for function _nrf24l01CSHigh
 10678  1512                     _nrf24l01CSHigh:	
 10679                           
 10680                           ;interface.c: 23: PORTAbits.RA1 = 1;
 10681                           
 10682                           ;incstack = 0
 10683 ;; hardware stack exceeded
 10684                           ; Regs used in _nrf24l01CSHigh: []
 10685  1512  0020               	movlb	0	; select bank0
 10686  1513  148C               	bsf	12,1	;volatile
 10687  1514  0008               	return
 10688  1515                     __end_of_nrf24l01CSHigh:	
 10689                           
 10690                           	psect	text51
 10691  1522                     __ptext51:	
 10692 ;; *************** function _enableInterrupts *****************
 10693 ;; Defined at:
 10694 ;;		line 76 in file "interface.c"
 10695 ;; Parameters:    Size  Location     Type
 10696 ;;  enable          1    wreg     unsigned char 
 10697 ;; Auto vars:     Size  Location     Type
 10698 ;;  enable          1    0[COMMON] unsigned char 
 10699 ;; Return value:  Size  Location     Type
 10700 ;;                  1    wreg      void 
 10701 ;; Registers used:
 10702 ;;		wreg, status,0
 10703 ;; Tracked objects:
 10704 ;;		On entry : 0/0
 10705 ;;		On exit  : 0/0
 10706 ;;		Unchanged: 0/0
 10707 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10708 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10709 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10710 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10711 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10712 ;;Total ram usage:        0 bytes
 10713 ;; Hardware stack levels used:    1
 10714 ;; Hardware stack levels required when called:    7
 10715 ;; This function calls:
 10716 ;;		Nothing
 10717 ;; This function is called by:
 10718 ;;		_nrf24l01Send
 10719 ;;		i1_nrf24l01Send
 10720 ;; This function uses a non-reentrant model
 10721 ;;
 10722                           
 10723                           
 10724                           ;psect for function _enableInterrupts
 10725  1522                     _enableInterrupts:	
 10726                           
 10727                           ;incstack = 0
 10728 ;; hardware stack exceeded
 10729                           ; Regs used in _enableInterrupts: [wreg+status,0]
 10730                           ;enableInterrupts@enable stored from wreg
 10731  1522  00F0               	movwf	enableInterrupts@enable
 10732                           
 10733                           ;interface.c: 77: PIE0bits.INTE = enable;
 10734  1523  0C70               	rrf	enableInterrupts@enable,w
 10735  1524  0021               	movlb	1	; select bank1
 10736  1525  1C03               	skipc
 10737  1526  1010               	bcf	16,0	;volatile
 10738  1527  1803               	skipnc
 10739  1528  1410               	bsf	16,0	;volatile
 10740  1529  0008               	return
 10741  152A                     __end_of_enableInterrupts:	
 10742                           
 10743                           	psect	text52
 10744  150F                     __ptext52:	
 10745 ;; *************** function _nrf24l01CELow *****************
 10746 ;; Defined at:
 10747 ;;		line 7 in file "interface.c"
 10748 ;; Parameters:    Size  Location     Type
 10749 ;;		None
 10750 ;; Auto vars:     Size  Location     Type
 10751 ;;		None
 10752 ;; Return value:  Size  Location     Type
 10753 ;;                  1    wreg      void 
 10754 ;; Registers used:
 10755 ;;		None
 10756 ;; Tracked objects:
 10757 ;;		On entry : 0/0
 10758 ;;		On exit  : 0/0
 10759 ;;		Unchanged: 0/0
 10760 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10761 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10762 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10763 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10764 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10765 ;;Total ram usage:        0 bytes
 10766 ;; Hardware stack levels used:    1
 10767 ;; Hardware stack levels required when called:    7
 10768 ;; This function calls:
 10769 ;;		Nothing
 10770 ;; This function is called by:
 10771 ;;		_nrf24l01SetRXMode
 10772 ;;		_nrf24l01Service
 10773 ;;		_nrf24l01Init
 10774 ;;		i1_nrf24l01SetRXMode
 10775 ;;		i1_nrf24l01Service
 10776 ;; This function uses a non-reentrant model
 10777 ;;
 10778                           
 10779                           
 10780                           ;psect for function _nrf24l01CELow
 10781  150F                     _nrf24l01CELow:	
 10782                           
 10783                           ;interface.c: 8: PORTAbits.RA0 = 0;
 10784                           
 10785                           ;incstack = 0
 10786 ;; hardware stack exceeded
 10787                           ; Regs used in _nrf24l01CELow: []
 10788  150F  0020               	movlb	0	; select bank0
 10789  1510  100C               	bcf	12,0	;volatile
 10790  1511  0008               	return
 10791  1512                     __end_of_nrf24l01CELow:	
 10792                           
 10793                           	psect	text53
 10794  150C                     __ptext53:	
 10795 ;; *************** function _nrf24l01CEHigh *****************
 10796 ;; Defined at:
 10797 ;;		line 12 in file "interface.c"
 10798 ;; Parameters:    Size  Location     Type
 10799 ;;		None
 10800 ;; Auto vars:     Size  Location     Type
 10801 ;;		None
 10802 ;; Return value:  Size  Location     Type
 10803 ;;                  1    wreg      void 
 10804 ;; Registers used:
 10805 ;;		None
 10806 ;; Tracked objects:
 10807 ;;		On entry : 0/0
 10808 ;;		On exit  : 0/0
 10809 ;;		Unchanged: 0/0
 10810 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10811 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10812 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10813 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10814 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10815 ;;Total ram usage:        0 bytes
 10816 ;; Hardware stack levels used:    1
 10817 ;; Hardware stack levels required when called:    7
 10818 ;; This function calls:
 10819 ;;		Nothing
 10820 ;; This function is called by:
 10821 ;;		_nrf24l01SetRXMode
 10822 ;;		_nrf24l01Service
 10823 ;;		_nrf24l01Init
 10824 ;;		i1_nrf24l01SetRXMode
 10825 ;;		i1_nrf24l01Service
 10826 ;; This function uses a non-reentrant model
 10827 ;;
 10828                           
 10829                           
 10830                           ;psect for function _nrf24l01CEHigh
 10831  150C                     _nrf24l01CEHigh:	
 10832                           
 10833                           ;interface.c: 13: PORTAbits.RA0 = 1;
 10834                           
 10835                           ;incstack = 0
 10836 ;; hardware stack exceeded
 10837                           ; Regs used in _nrf24l01CEHigh: []
 10838  150C  0020               	movlb	0	; select bank0
 10839  150D  140C               	bsf	12,0	;volatile
 10840  150E  0008               	return
 10841  150F                     __end_of_nrf24l01CEHigh:	
 10842                           
 10843                           	psect	text54
 10844  1580                     __ptext54:	
 10845 ;; *************** function i1_memset *****************
 10846 ;; Defined at:
 10847 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\memset.c"
 10848 ;; Parameters:    Size  Location     Type
 10849 ;;  p1              1    wreg     PTR void 
 10850 ;;		 -> RXPacket(33), 
 10851 ;;  c               2    0[COMMON] int 
 10852 ;;  n               2    2[COMMON] unsigned int 
 10853 ;; Auto vars:     Size  Location     Type
 10854 ;;  p1              1    5[COMMON] PTR void 
 10855 ;;		 -> RXPacket(33), 
 10856 ;;  memset          1    6[COMMON] PTR unsigned char 
 10857 ;;		 -> RXPacket(33), 
 10858 ;; Return value:  Size  Location     Type
 10859 ;;                  1    wreg      PTR void 
 10860 ;; Registers used:
 10861 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 10862 ;; Tracked objects:
 10863 ;;		On entry : 0/0
 10864 ;;		On exit  : 0/0
 10865 ;;		Unchanged: 0/0
 10866 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10867 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10868 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10869 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10870 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10871 ;;Total ram usage:        7 bytes
 10872 ;; Hardware stack levels used:    1
 10873 ;; This function calls:
 10874 ;;		Nothing
 10875 ;; This function is called by:
 10876 ;;		i1_nrf24l01Service
 10877 ;; This function uses a non-reentrant model
 10878 ;;
 10879                           
 10880                           
 10881                           ;psect for function i1_memset
 10882  1580                     i1_memset:	
 10883                           
 10884                           ;incstack = 0
 10885                           ; Regs used in i1_memset: [wreg+fsr1l+fsr1h+status,2+status,0]
 10886                           ;i1memset@p1 stored from wreg
 10887  1580  00F5               	movwf	i1memset@p1
 10888  1581  0875               	movf	i1memset@p1,w
 10889  1582  00F4               	movwf	??i1_memset
 10890  1583  0874               	movf	??i1_memset,w
 10891  1584  00F6               	movwf	i1memset@p
 10892  1585                     i1l2966:	
 10893  1585  3001               	movlw	1
 10894  1586  02F2               	subwf	i1memset@n,f
 10895  1587  3000               	movlw	0
 10896  1588  3BF3               	subwfb	i1memset@n+1,f
 10897  1589  0A72               	incf	i1memset@n,w
 10898  158A  1903               	btfsc	3,2
 10899  158B  0A73               	incf	i1memset@n+1,w
 10900  158C  1903               	btfsc	3,2
 10901  158D  0008               	return
 10902  158E  0870               	movf	i1memset@c,w
 10903  158F  00F4               	movwf	??i1_memset
 10904  1590  0876               	movf	i1memset@p,w
 10905  1591  0086               	movwf	6
 10906  1592  3001               	movlw	1	; select bank2/3
 10907  1593  0087               	movwf	7
 10908  1594  0874               	movf	??i1_memset,w
 10909  1595  0081               	movwf	1
 10910  1596  3001               	movlw	1
 10911  1597  00F4               	movwf	??i1_memset
 10912  1598  0874               	movf	??i1_memset,w
 10913  1599  07F6               	addwf	i1memset@p,f
 10914  159A  2D85               	goto	i1l2966
 10915  159B                     __end_ofi1_memset:	
 10916                           ;	Return value of i1_memset is never used
 10917                           
 10918  007E                     btemp	set	126	;btemp
 10919  007E                     int$flags	set	126
 10920  007E                     wtemp0	set	126


Data Sizes:
    Strings     70
    Constant    57
    Data        1
    BSS         88
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     80      80
    BANK1            80     71      78
    BANK2            80     49      70
    BANK3            80      0      61
    BANK4            80      0       0
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    ftoa@status	PTR int  size(1) Largest target is 2
		 -> sendMessage@status(BANK1[2]), 

    strlen@s	PTR const unsigned char  size(2) Largest target is 33
		 -> packet.Message(BANK0[32]), packet.Message(BANK0[32]), NULL(NULL[0]), main@packet(BANK1[33]), 
		 -> loop@packet(BANK2[33]), romDataMap(BANK3[28]), 

    strlen@cp	PTR const unsigned char  size(2) Largest target is 33
		 -> packet.Message(BANK0[32]), packet.Message(BANK0[32]), NULL(NULL[0]), main@packet(BANK1[33]), 
		 -> loop@packet(BANK2[33]), romDataMap(BANK3[28]), 

    strcpy@from	PTR const unsigned char  size(2) Largest target is 28
		 -> romDataMap.name(BANK3[16]), STR_12(CODE[4]), romDataMap(BANK3[28]), 

    strcpy@to	PTR unsigned char  size(2) Largest target is 33
		 -> main@packet(BANK1[33]), loop@packet(BANK2[33]), romDataMap(BANK3[28]), 

    strcpy@cp	PTR unsigned char  size(2) Largest target is 33
		 -> main@packet(BANK1[33]), loop@packet(BANK2[33]), romDataMap(BANK3[28]), 

    strcat@from	PTR const unsigned char  size(2) Largest target is 17
		 -> ftoa@buf(BANK2[17]), STR_13(CODE[5]), STR_11(CODE[5]), STR_10(CODE[6]), 
		 -> STR_9(CODE[5]), STR_8(CODE[5]), STR_7(CODE[5]), STR_6(CODE[7]), 
		 -> STR_5(CODE[5]), STR_4(CODE[5]), STR_3(CODE[5]), STR_2(CODE[2]), 
		 -> STR_1(CODE[2]), 

    strcat@to	PTR unsigned char  size(2) Largest target is 33
		 -> main@packet(BANK1[33]), loop@packet(BANK2[33]), 

    strcat@cp	PTR unsigned char  size(2) Largest target is 33
		 -> main@packet(BANK1[33]), loop@packet(BANK2[33]), 

    memset@p1	PTR void  size(1) Largest target is 33
		 -> RXPacket(BANK3[33]), 

    memset@p	PTR unsigned char  size(1) Largest target is 33
		 -> RXPacket(BANK3[33]), 

    ftoa@cp	PTR unsigned char  size(1) Largest target is 17
		 -> ftoa@buf(BANK2[17]), 

    sprintf@f	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_14(CODE[11]), 

    sprintf@sp	PTR unsigned char  size(1) Largest target is 17
		 -> ftoa@buf(BANK2[17]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    sp__memset	PTR void  size(1) Largest target is 33
		 -> RXPacket(BANK3[33]), 

    nrf24l01SendPacket@txPacket	PTR struct . size(2) Largest target is 33
		 -> main@packet(BANK1[33]), loop@packet(BANK2[33]), 

    TXPacket	PTR struct . size(2) Largest target is 33
		 -> NULL(NULL[0]), main@packet(BANK1[33]), loop@packet(BANK2[33]), 

    sp__nrf24l01GetRXPacket	PTR struct . size(1) Largest target is 33
		 -> RXPacket(BANK3[33]), 

    nrf24l01GetPipe@name	PTR unsigned char  size(1) Largest target is 28
		 -> romDataMap(BANK3[28]), 

    sp__ftoa	PTR unsigned char  size(1) Largest target is 17
		 -> ftoa@buf(BANK2[17]), 

    sendMessage@topic	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_13(CODE[5]), STR_11(CODE[5]), STR_10(CODE[6]), STR_9(CODE[5]), 
		 -> STR_8(CODE[5]), STR_7(CODE[5]), STR_6(CODE[7]), STR_5(CODE[5]), 
		 -> STR_4(CODE[5]), STR_3(CODE[5]), 

    sp__strcat	PTR unsigned char  size(2) Largest target is 33
		 -> main@packet(BANK1[33]), loop@packet(BANK2[33]), 

    sp__strcpy	PTR unsigned char  size(2) Largest target is 33
		 -> main@packet(BANK1[33]), loop@packet(BANK2[33]), romDataMap(BANK3[28]), 

    sendMessage@packet	PTR struct . size(2) Largest target is 33
		 -> main@packet(BANK1[33]), loop@packet(BANK2[33]), 

    romData	PTR struct . size(1) Largest target is 28
		 -> romDataMap(BANK3[28]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    _ISR->_nrf24l01ISR
    _nrf24l01ISR->i1_nrf24l01Service
    i1_nrf24l01Service->i1_memset
    i1_nrf24l01SetRXMode->i1_nrf24l01Send

Critical Paths under _main in BANK0

    _nrf24l01Init->_nrf24l01InitRegisters
    _nrf24l01InitRegisters->_nrf24l01SetRXPipe
    _nrf24l01InitRegisters->_nrf24l01SetTXPipe
    _nrf24l01SetTXPipe->___bmul
    _nrf24l01SetRXPipe->_nrf24l01Send
    _nrf24l01GetPipe->___lwmod
    _nrf24l01GetPipe->_strlen
    _sendMessage->_ftoa
    _strcat->_ftoa
    _sleep->_doWDTSleep
    _nrf24l01SendPacket->_nrf24l01Service
    _nrf24l01Service->_memset
    _nrf24l01SetRXMode->_nrf24l01Send
    _ftoa->___fttol
    _sprintf->___llmod
    ___llmod->___lldiv
    ___lltoft->___ftpack
    ___fttol->___ftmul
    ___ftsub->___ftadd
    ___ftneg->_getADCValue
    ___ftmul->_getADCValue
    _getADCValue->___ftdiv
    ___ftdiv->___ftadd
    ___ftadd->___awtoft
    ___awtoft->___ftpack
    ___lbtoft->___ftpack
    ___lwtoft->___ftpack

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_loop
    _loop->_sendMessage
    _sendMessage->_strcat
    _strcat->_ftoa
    _ftoa->___fttol

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    _main->_loop

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                35    35      0   93100
                                             36 BANK1     35    35      0
                           ___lwtoft
                               _loop
                    _nrf24l01GetPipe
                       _nrf24l01Init
                  _nrf24l01SetTXPipe
                        _sendMessage
                             _strcpy
 ---------------------------------------------------------------------------------
 (1) _nrf24l01Init                                         2     2      0    5538
                                             17 BANK0      2     2      0
                     _nrf24l01CEHigh
                      _nrf24l01CELow
              _nrf24l01InitRegisters
              _nrf24l01InterfaceInit
 ---------------------------------------------------------------------------------
 (2) _nrf24l01InterfaceInit                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _nrf24l01InitRegisters                               10    10      0    5538
                                              7 BANK0     10    10      0
                             ___bmul
                     _nrf24l01SPIEnd
                    _nrf24l01SPISend
                   _nrf24l01SPIStart
                       _nrf24l01Send
                  _nrf24l01SetRXPipe
                  _nrf24l01SetTXPipe
 ---------------------------------------------------------------------------------
 (1) _nrf24l01SetTXPipe                                    3     3      0     314
                                              4 BANK0      3     3      0
                             ___bmul
                     _nrf24l01SPIEnd
                    _nrf24l01SPISend
                   _nrf24l01SPIStart
 ---------------------------------------------------------------------------------
 (2) ___bmul                                               4     3      1     270
                                              0 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (3) _nrf24l01SetRXPipe                                    4     4      0    2380
                                              3 BANK0      4     4      0
                       _nrf24l01Send
 ---------------------------------------------------------------------------------
 (1) _nrf24l01GetPipe                                      5     5      0     658
                                              6 BANK0      5     5      0
                            ___lwmod
                             _strlen
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              6     2      4     337
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (1) _loop                                                50    50      0   58427
                                             35 BANK1      1     1      0
                                              0 BANK2     49    49      0
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___ftneg
                           ___lbtoft
                           ___lltoft
                        _getADCValue
                       _nrf24l01Send
                        _sendMessage
 ---------------------------------------------------------------------------------
 (1) _sendMessage                                         10     3      7   24646
                                             25 BANK1     10     3      7
                           ___lbtoft (ARG)
                           ___lwtoft (ARG)
                               _ftoa
                        _getADCValue (ARG)
                 _nrf24l01SendPacket
                              _sleep
                             _strcat
                             _strcpy
 ---------------------------------------------------------------------------------
 (1) _strcpy                                               6     2      4     333
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (2) _strcat                                               6     2      4     614
                                             19 BANK1      6     2      4
                               _ftoa (ARG)
 ---------------------------------------------------------------------------------
 (2) _sleep                                                4     2      2     157
                                              2 BANK0      4     2      2
                         _doWDTSleep
 ---------------------------------------------------------------------------------
 (2) _nrf24l01SendPacket                                   3     1      2    5402
                                             13 BANK0      3     1      2
                    _nrf24l01Service
 ---------------------------------------------------------------------------------
 (3) _nrf24l01Service                                      6     6      0    5340
                                              7 BANK0      6     6      0
                             _memset
                     _nrf24l01CEHigh
                      _nrf24l01CELow
                     _nrf24l01SPIEnd
                    _nrf24l01SPISend
                   _nrf24l01SPIStart
                       _nrf24l01Send
                  _nrf24l01SetRXMode
                             _strlen
 ---------------------------------------------------------------------------------
 (4) _strlen                                               6     4      2     170
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (4) _nrf24l01SetRXMode                                    2     2      0    2394
                                              3 BANK0      2     2      0
                     _nrf24l01CEHigh
                      _nrf24l01CELow
                       _nrf24l01Send
 ---------------------------------------------------------------------------------
 (5) _nrf24l01Send                                         3     2      1    2284
                                              0 BANK0      3     2      1
                   _enableInterrupts
                     _nrf24l01SPIEnd
                    _nrf24l01SPISend
                   _nrf24l01SPIStart
 ---------------------------------------------------------------------------------
 (14) _nrf24l01SPIStart                                    0     0      0       0
                      _nrf24l01CSLow
 ---------------------------------------------------------------------------------
 (15) _nrf24l01CSLow                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (14) _nrf24l01SPISend                                     1     1      0      22
 ---------------------------------------------------------------------------------
 (14) _nrf24l01SPIEnd                                      0     0      0       0
                     _nrf24l01CSHigh
 ---------------------------------------------------------------------------------
 (15) _nrf24l01CSHigh                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (14) _enableInterrupts                                    1     1      0      22
 ---------------------------------------------------------------------------------
 (13) _nrf24l01CELow                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (13) _nrf24l01CEHigh                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _memset                                               7     3      4     310
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (2) _ftoa                                                14    10      4   15718
                                             79 BANK0      1     1      0
                                              6 BANK1     13     9      4
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                           ___lltoft
                            _sprintf
 ---------------------------------------------------------------------------------
 (3) _sprintf                                             36    26     10    2229
                                             24 BANK0     28    18     10
                            ___lldiv
                            ___llmod
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (4) _isdigit                                              2     2      0      68
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4     448
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (4) ___llmod                                             10     2      8     337
                                             14 BANK0     10     2      8
                            ___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (4) ___lldiv                                             14     6      8     340
                                              0 BANK0     14     6      8
 ---------------------------------------------------------------------------------
 (3) ___lltoft                                             6     2      4    3615
                                              8 BANK0      6     2      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) ___fttol                                             14    10      4     430
                                             71 BANK0      8     4      4
                                              0 BANK1      6     6      0
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftsub                                              6     0      6    4809
                                             27 BANK0      6     0      6
                            ___ftadd
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftneg                                              3     0      3     223
                                             55 BANK0      3     0      3
                            ___ftadd (ARG)
                            ___ftdiv (ARG)
                        _getADCValue (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftmul                                             16    10      6    3694
                                             55 BANK0     16    10      6
                           ___ftpack
                        _getADCValue (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftge                                               9     3      6     314
                                              0 BANK0      9     3      6
 ---------------------------------------------------------------------------------
 (2) _getADCValue                                         12     9      3   11919
                                             43 BANK0     12     9      3
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                         _doWDTSleep
 ---------------------------------------------------------------------------------
 (3) _doWDTSleep                                           2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) ___ftdiv                                             16    10      6    4004
                                             27 BANK0     16    10      6
                            ___ftadd (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) ___ftadd                                             13     7      6    4564
                                             14 BANK0     13     7      6
                           ___awtoft (ARG)
                           ___ftpack
                           ___ftpack (ARG)
 ---------------------------------------------------------------------------------
 (3) ___awtoft                                             6     3      3    3192
                                              8 BANK0      6     3      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___lbtoft                                             8     5      3    3034
                                              8 BANK0      8     5      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (1) ___lwtoft                                             4     1      3    3123
                                              8 BANK0      4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) ___ftpack                                             8     3      5    3012
                                              0 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 15
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (9) _ISR                                                  0     0      0    1257
                        _nrf24l01ISR
 ---------------------------------------------------------------------------------
 (10) _nrf24l01ISR                                         1     1      0    1257
                                             13 COMMON     1     1      0
                     i1_nrf24l01Send
                  i1_nrf24l01Service
 ---------------------------------------------------------------------------------
 (11) i1_nrf24l01Service                                   6     6      0    1016
                                              7 COMMON     6     6      0
                     _nrf24l01CEHigh
                      _nrf24l01CELow
                     _nrf24l01SPIEnd
                    _nrf24l01SPISend
                   _nrf24l01SPIStart
                           i1_memset
                     i1_nrf24l01Send
                i1_nrf24l01SetRXMode
                           i1_strlen
 ---------------------------------------------------------------------------------
 (12) i1_strlen                                            6     4      2      94
                                              0 COMMON     6     4      2
 ---------------------------------------------------------------------------------
 (12) i1_nrf24l01SetRXMode                                 2     2      0     351
                                              4 COMMON     2     2      0
                     _nrf24l01CEHigh
                      _nrf24l01CELow
                     i1_nrf24l01Send
 ---------------------------------------------------------------------------------
 (13) i1_nrf24l01Send                                      3     2      1     241
                                              1 COMMON     3     2      1
                   _enableInterrupts
                     _nrf24l01SPIEnd
                    _nrf24l01SPISend
                   _nrf24l01SPIStart
 ---------------------------------------------------------------------------------
 (14) _nrf24l01SPIStart                                    0     0      0       0
                      _nrf24l01CSLow
 ---------------------------------------------------------------------------------
 (15) _nrf24l01CSLow                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (14) _nrf24l01SPISend                                     1     1      0      22
 ---------------------------------------------------------------------------------
 (14) _nrf24l01SPIEnd                                      0     0      0       0
                     _nrf24l01CSHigh
 ---------------------------------------------------------------------------------
 (15) _nrf24l01CSHigh                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (14) _enableInterrupts                                    1     1      0      22
 ---------------------------------------------------------------------------------
 (13) _nrf24l01CELow                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (13) _nrf24l01CEHigh                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (12) i1_memset                                            7     3      4     148
                                              0 COMMON     7     3      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 15
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   ___lwtoft
     ___ftpack
   _loop
     ___ftadd
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___ftpack (ARG)
     ___ftdiv
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
     ___ftmul
       ___ftpack
       _getADCValue (ARG)
         ___awtoft
           ___ftpack
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftdiv
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
         _doWDTSleep
     ___ftneg
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftdiv (ARG)
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
       _getADCValue (ARG)
         ___awtoft
           ___ftpack
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftdiv
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
         _doWDTSleep
     ___lbtoft
       ___ftpack
     ___lltoft
       ___ftpack
     _getADCValue
       ___awtoft
         ___ftpack
       ___ftadd
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftdiv
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
       _doWDTSleep
     _nrf24l01Send
       _enableInterrupts
       _nrf24l01SPIEnd
         _nrf24l01CSHigh
       _nrf24l01SPISend
       _nrf24l01SPIStart
         _nrf24l01CSLow
     _sendMessage
       ___lbtoft (ARG)
         ___ftpack
       ___lwtoft (ARG)
         ___ftpack
       _ftoa (ARG)
         ___ftge
         ___ftmul
           ___ftpack
           _getADCValue (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
             _doWDTSleep
         ___ftneg
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv (ARG)
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
           _getADCValue (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
             _doWDTSleep
         ___ftsub
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___fttol
           ___ftmul (ARG)
             ___ftpack
             _getADCValue (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               _doWDTSleep
         ___lltoft
           ___ftpack
         _sprintf
           ___lldiv
           ___llmod
             ___lldiv (ARG)
           ___wmul
           _isdigit
       _getADCValue (ARG)
         ___awtoft
           ___ftpack
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftdiv
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
         _doWDTSleep
       _nrf24l01SendPacket (ARG)
         _nrf24l01Service
           _memset
           _nrf24l01CEHigh
           _nrf24l01CELow
           _nrf24l01SPIEnd
             _nrf24l01CSHigh
           _nrf24l01SPISend
           _nrf24l01SPIStart
             _nrf24l01CSLow
           _nrf24l01Send
             _enableInterrupts
             _nrf24l01SPIEnd
               _nrf24l01CSHigh
             _nrf24l01SPISend
             _nrf24l01SPIStart
               _nrf24l01CSLow
           _nrf24l01SetRXMode
             _nrf24l01CEHigh
             _nrf24l01CELow
             _nrf24l01Send
               _enableInterrupts
               _nrf24l01SPIEnd
                 _nrf24l01CSHigh
               _nrf24l01SPISend
               _nrf24l01SPIStart
                 _nrf24l01CSLow
           _strlen
       _sleep (ARG)
         _doWDTSleep
       _strcat (ARG)
         _ftoa (ARG)
           ___ftge
           ___ftmul
             ___ftpack
             _getADCValue (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               _doWDTSleep
           ___ftneg
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
             _getADCValue (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               _doWDTSleep
           ___ftsub
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
           ___fttol
             ___ftmul (ARG)
               ___ftpack
               _getADCValue (ARG)
                 ___awtoft
                   ___ftpack
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                 _doWDTSleep
           ___lltoft
             ___ftpack
           _sprintf
             ___lldiv
             ___llmod
               ___lldiv (ARG)
             ___wmul
             _isdigit
       _strcpy (ARG)
   _nrf24l01GetPipe
     ___lwmod
     _strlen
   _nrf24l01Init
     _nrf24l01CEHigh
     _nrf24l01CELow
     _nrf24l01InitRegisters
       ___bmul
       _nrf24l01SPIEnd
         _nrf24l01CSHigh
       _nrf24l01SPISend
       _nrf24l01SPIStart
         _nrf24l01CSLow
       _nrf24l01Send
         _enableInterrupts
         _nrf24l01SPIEnd
           _nrf24l01CSHigh
         _nrf24l01SPISend
         _nrf24l01SPIStart
           _nrf24l01CSLow
       _nrf24l01SetRXPipe
         _nrf24l01Send
           _enableInterrupts
           _nrf24l01SPIEnd
             _nrf24l01CSHigh
           _nrf24l01SPISend
           _nrf24l01SPIStart
             _nrf24l01CSLow
       _nrf24l01SetTXPipe
         ___bmul
         _nrf24l01SPIEnd
           _nrf24l01CSHigh
         _nrf24l01SPISend
         _nrf24l01SPIStart
           _nrf24l01CSLow
     _nrf24l01InterfaceInit
   _nrf24l01SetTXPipe
     ___bmul
     _nrf24l01SPIEnd
       _nrf24l01CSHigh
     _nrf24l01SPISend
     _nrf24l01SPIStart
       _nrf24l01CSLow
   _sendMessage
     ___lbtoft (ARG)
       ___ftpack
     ___lwtoft (ARG)
       ___ftpack
     _ftoa (ARG)
       ___ftge
       ___ftmul
         ___ftpack
         _getADCValue (ARG)
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
           _doWDTSleep
       ___ftneg
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
         _getADCValue (ARG)
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
           _doWDTSleep
       ___ftsub
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___lltoft (ARG)
           ___ftpack
       ___fttol
         ___ftmul (ARG)
           ___ftpack
           _getADCValue (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
             _doWDTSleep
       ___lltoft
         ___ftpack
       _sprintf
         ___lldiv
         ___llmod
           ___lldiv (ARG)
         ___wmul
         _isdigit
     _getADCValue (ARG)
       ___awtoft
         ___ftpack
       ___ftadd
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftdiv
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
       _doWDTSleep
     _nrf24l01SendPacket (ARG)
       _nrf24l01Service
         _memset
         _nrf24l01CEHigh
         _nrf24l01CELow
         _nrf24l01SPIEnd
           _nrf24l01CSHigh
         _nrf24l01SPISend
         _nrf24l01SPIStart
           _nrf24l01CSLow
         _nrf24l01Send
           _enableInterrupts
           _nrf24l01SPIEnd
             _nrf24l01CSHigh
           _nrf24l01SPISend
           _nrf24l01SPIStart
             _nrf24l01CSLow
         _nrf24l01SetRXMode
           _nrf24l01CEHigh
           _nrf24l01CELow
           _nrf24l01Send
             _enableInterrupts
             _nrf24l01SPIEnd
               _nrf24l01CSHigh
             _nrf24l01SPISend
             _nrf24l01SPIStart
               _nrf24l01CSLow
         _strlen
     _sleep (ARG)
       _doWDTSleep
     _strcat (ARG)
       _ftoa (ARG)
         ___ftge
         ___ftmul
           ___ftpack
           _getADCValue (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
             _doWDTSleep
         ___ftneg
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv (ARG)
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
           _getADCValue (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
             _doWDTSleep
         ___ftsub
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___fttol
           ___ftmul (ARG)
             ___ftpack
             _getADCValue (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               _doWDTSleep
         ___lltoft
           ___ftpack
         _sprintf
           ___lldiv
           ___llmod
             ___lldiv (ARG)
           ___wmul
           _isdigit
     _strcpy (ARG)
   _strcpy

 _ISR (ROOT)
   _nrf24l01ISR
     i1_nrf24l01Send
       _enableInterrupts
       _nrf24l01SPIEnd
         _nrf24l01CSHigh
       _nrf24l01SPISend
       _nrf24l01SPIStart
         _nrf24l01CSLow
     i1_nrf24l01Service
       _nrf24l01CEHigh
       _nrf24l01CELow
       _nrf24l01SPIEnd
         _nrf24l01CSHigh
       _nrf24l01SPISend
       _nrf24l01SPIStart
         _nrf24l01CSLow
       i1_memset
       i1_nrf24l01Send
         _enableInterrupts
         _nrf24l01SPIEnd
           _nrf24l01CSHigh
         _nrf24l01SPISend
         _nrf24l01SPIStart
           _nrf24l01CSLow
       i1_nrf24l01SetRXMode
         _nrf24l01CEHigh
         _nrf24l01CELow
         i1_nrf24l01Send
           _enableInterrupts
           _nrf24l01SPIEnd
             _nrf24l01CSHigh
           _nrf24l01SPISend
           _nrf24l01SPIStart
             _nrf24l01CSLow
       i1_strlen

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      E       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     50      50       5      100.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50     47      4E       7       97.5%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50     31      46       9       87.5%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0      3D      11       76.3%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0     12F      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0     12F      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V2.00 build -1524193055 
Symbol Table                                                                                   Thu Aug 02 13:26:33 2018

                ___bmul@product 0022                     __CFG_CP$OFF 0000                sendMessage@value 00BD  
              sendMessage@topic 00BB             ___wmul@multiplicand 0022             nrf24l01Send@command 0022  
                  ___ftadd@exp1 003A                    ___ftadd@exp2 0039               sendMessage@packet 00B9  
                   __CFG_LVP$ON 0000                    ___ftadd@sign 0038                             l162 0C72  
                           l261 16C8                             l416 0302                             l442 15F5  
                           l427 03A5                             l419 0321                             l286 04C8  
                           l289 04E4                             l652 0A4E                             l653 0A56  
                           l645 0A3B                             l736 0BF3                             l676 0FA9  
                  __CFG_CPD$OFF 0000                             _ISR 0004               sendMessage@status 00C1  
                           wreg 0009               sleep@milliseconds 0022                            ?_ISR 0070  
                  ___ftdiv@cntr 0045                    ___ftdiv@sign 004A                  ??_nrf24l01Init 0031  
                          l3000 0C41                            l2210 0A18                            l3002 0C49  
                          l2220 0A40                            l2212 0A22                            l3012 0C94  
                          l3004 0C35                            l2222 0A48                            l2214 0A27  
                          l2206 0A11                            l3016 0CAC                            l3112 0646  
                          l3104 05FC                            l2402 0FBB                            l3018 0CB3  
                          l2314 15EF                            l2332 0967                            l2308 1555  
                          l2406 0FCD                            l2342 0995                            l2334 0975  
                          l2510 0521                            l3118 0655                            l2416 0FE8  
                          l2360 0F39                            l2432 08BB                            l2256 1681  
                          l3160 17AE                            l3312 17CD                            l2346 09A0  
                          l2426 0895                            l2610 03BB                            l2602 0391  
                          l2274 09CB                            l2258 168D                            l2514 0532  
                          l3314 17F0                            l2356 0F32                            l2428 08A3  
                          l2436 08C6                            l2268 09BB                            l3164 17BA  
                          l2390 0F88                            l2366 0F48                            l2702 0DE8  
                          l2518 053A                            l2470 0485                            l2462 044B  
                          l3158 17A2                            l2384 0F75                            l2624 0415  
                          l2608 03B8                            l2544 0292                            l2552 02C0  
                          l3168 17C3                  ??_nrf24l01Send 0021                            l2386 0F7F  
                          l2378 0F62                            l2650 0867                            l2706 0DF0  
                          l2618 03D0                            l2570 0309                            l2562 02CF  
                          l2538 0282                            l2626 025F                            l2298 160E  
                          l2466 0464                            l2482 04A0                            l2802 170E  
                          l2634 155A                            l3418 0B72                            l2396 0F9B  
                          l2388 0F84                            l2900 0CE8                            l2628 0420  
                          l2564 02FE                            l2398 0FA5                            l2654 087D  
                          l2566 0304                            l2830 0E5E                            l2814 1725  
                          l2638 1560                            l2672 0D7B                            l2728 1666  
                          l2592 0355                            l2576 0330                            l2488 04B9  
                          l2816 1731                            l2808 15D6                            l2922 0D42  
                          l2914 0D29                            l2690 0DCC                            l2770 0C05  
                          l2738 0B91                            l2586 034F                            l2818 1739  
                          l2764 0BE9                            l2756 0BCA                            l2780 175C  
                          l2694 0DD4                            l2678 0D91                            l2766 0BF7  
                          l2758 0BDB                            l2598 0382                            l2778 174C  
                          l2874 16D4                            l2884 16E7                            l2894 0CD2  
                          STR_1 187D                    __CFG_WDTE$ON 0000                            STR_2 187D  
                          STR_3 1851                            STR_4 186F                            STR_5 1856  
                          STR_6 183F                            STR_7 185B                            STR_8 186A  
                          STR_9 1860                            u2105 0996                            u2025 15F6  
                          u2035 15FB                            u2215 0F63                            u2305 0F9C  
                          u3105 0CFA                            u2065 096A                            u3115 0D0A  
                          u2245 0F76                            u3125 0D2A                            u2085 0976  
                          u3135 0D39                            u2095 098A                            u3064 16CE  
                          u3145 0D43                            u2425 047F                            u3065 16CD  
                          u2275 0F89                            u3315 17A5                            u1805 0A1D  
                          u2365 0898                            u2615 0389                            u3335 17B4  
                          u1825 0A36                            u2385 08B1                            u2625 039B  
                          u3345 17BB                            u2395 08BC                            u2635 03AD  
                          u1845 0A43                            u3607 09F2                            u2825 0DF1  
                          u3617 0A02                            u2835 0DF7                            u2755 0D9D  
                          u2915 0BCB                            u2595 0378                            u1885 0A5D  
                          u2765 0DAD                            u3557 0AFF                            u3495 17DE  
                          u3567 08DB                            u2785 0DD5                            u2945 0BEA  
                          u3577 08EA                            u2795 0DDB                            u3587 049B  
                          u2885 0B99                            u3597 09D9                            u2975 1751  
                          i1l48 1541                            _WPUA 020C                            _WPUC 020E  
__size_of_nrf24l01InterfaceInit 001C                    __CFG_WRT$OFF 0000                   __CFG_FCMEN$ON 0000  
 __end_of_nrf24l01InterfaceInit 1640                            _main 0AE3                            _ftoa 0E18  
                  ___ftpack@arg 0020                            _loop 002F                    ___ftpack@exp 0023  
                          fsr0h 0005                            fsr1h 0007                            indf0 0000  
                          fsr0l 0004                            indf1 0001                            fsr1l 0006  
                          btemp 007E                   __CFG_BORV$LOW 0000                            start 000F  
         nrf24l01SetRXPipe@pipe 0025                   __CFG_CSWEN$ON 0000               ___bmul@multiplier 0023  
                 __CFG_MCLRE$ON 0000                    ___ftmul@cntr 0065                    ___ftmul@sign 0066  
   __size_of_nrf24l01SendPacket 002A                           ??_ISR 007E                    ___fttol@exp1 00A5  
          __size_of_getADCValue 00A6                 ??_nrf24l01CELow 0070                    ___fttol@lval 00A1  
               ??_nrf24l01CSLow 0070                           ?_main 0070                           ?_ftoa 00A6  
                         ?_loop 0070                 __end_of___ftadd 1000                           STR_10 1846  
                         STR_11 1865                           STR_12 1879                           STR_13 1874  
                         STR_14 1829                 __end_of___ftdiv 0D64                 __end_of___ftneg 153B  
               __end_of___lldiv 09A9                 __end_of___ftmul 0E18                 __end_of___llmod 08CF  
               __end_of___ftsub 167C                 __end_of___fttol 0C15                  __CFG_DEBUG$OFF 0000  
                         i1l151 000D                           i1l270 0838                           i1l271 0837  
               __end_of___lwmod 17C8                           i1l286 071A                           i1l289 0730  
        enableInterrupts@enable 0070                      i1memset@p1 0075                   __CFG_PWRTE$ON 0000  
         nrf24l01SetTXPipe@pipe 0026                    ___lltoft@exp 002D                   ___awtoft@sign 002D  
               __end_of_dpowers 1828                 __end_of_isdigit 1557                           _sleep 16FE  
                 ___ftpack@sign 0024                           ftoa@f 00A6                           ftoa@l 00AE  
                __CFG_BOREN$OFF 0000                _enableInterrupts 1522                           status 0003  
                         wtemp0 007E                 __end_of_sprintf 0426     __end_ofi1_nrf24l01SetRXMode 07FD  
              __end_ofi1_memset 159B               getADCValue@adcSum 0054                __end_ofi1_strlen 165E  
              _nrf24l01SPIStart 152A                 __initialization 0011          nrf24l01InitRegisters@i 002F  
                  __end_of_main 0B76                    __end_of_ftoa 0F0A                    __end_of_loop 0259  
              ??_nrf24l01CEHigh 0070                          ??_main 00C4                          ??_ftoa 006F  
                 ___fttol@sign1 00A0                          ??_loop 00C3                ??_nrf24l01CSHigh 0070  
                    i1strlen@cp 0074                    ?_sendMessage 00B9                ??_nrf24l01SPIEnd 0070  
      __size_of_nrf24l01SPISend 000D                ___llmod@dividend 0032                          _ADRESH 009C  
                        _ADRESL 009B                          ?_sleep 0022                __end_of___awtoft 16FE  
                        _ANSELA 018C                          _ANSELC 018E                __end_of___ftpack 0A6D  
              __end_of___lbtoft 15D1                __end_of___lltoft 1771                          _ODCONA 028C  
                        i1l3210 070F        __size_of_nrf24l01GetPipe 0038                          _ODCONC 028E  
                        i1l3204 06F9                          i1l2238 1546                          i1l3240 077E  
                        i1l3232 0766                          i1l3236 0776                          i1l3192 06E1  
                        i1l3184 06AE                          i1l3264 0845                          i1l3188 06C4  
                        i1l2942 07C7                          i1l2936 07B8                          i1l2972 1644  
                        i1l2966 1585                          i1l2974 1650                          _INLVLA 038C  
                        _INLVLC 038E                          u337_25 06DB                __end_of___lwtoft 0815  
                        u362_27 06F4                          u363_27 07D3                          u364_27 07E9  
                        u365_27 07F7                          u366_27 152E               i1_nrf24l01Service 068C  
                        u367_27 151C              ?i1_nrf24l01Service 0070        __size_of_nrf24l01Service 0148  
          __size_of_nrf24l01ISR 003B                          ___bmul 1557                          ___ftge 0850  
       nrf24l01SetRXMode@rxMode 0024                          ___wmul 15EC             ??i1_nrf24l01Service 0077  
                     ??___ftadd 0034                  __CFG_STVREN$ON 0000                       ??___ftdiv 0041  
                     ??___ftneg 005A                       ??___lldiv 0028                       ??___ftmul 005D  
                     ??___llmod 0036                       ??___ftsub 0041                       ??___fttol 006B  
                     ??___lwmod 0024            __end_of_nrf24l01Init 0912            __end_of_nrf24l01Send 16BB  
                        _memset 1608           _nrf24l01InitRegisters 056E                          _status 00E7  
                        _strcat 1720                          _strcpy 15D1                          _strlen 167C  
                        ftoa@cp 00B2           ___ftmul@f3_as_product 0062                       ??_isdigit 0020  
                        loop@ta 0123                          loop@vt 0120       i1nrf24l01SetRXMode@rxMode 0075  
                     ??_sprintf 0042                __end_of_statuses 183F       __end_ofi1_nrf24l01Service 07A8  
            getADCValue@adcLoop 0051         __end_of__initialization 002B                      ___ftadd@f1 002E  
                    ___ftadd@f2 0031                      ___ftge@ff1 0020                      ___ftge@ff2 0023  
            getADCValue@channel 0053                      ___ftdiv@f1 003E                      ___ftdiv@f2 003B  
                    ___ftdiv@f3 0046                      ___ftneg@f1 0057                      ___awtoft@c 0028  
                    ___lbtoft@c 002F             ___bmul@multiplicand 0020                      ___ftmul@f1 0057  
                    ___ftmul@f2 005A                      ___ftsub@f1 003E                      ___ftsub@f2 003B  
                    ___fttol@f1 0067                  __pcstackCOMMON 0070                    __pidataBANK1 0003  
                    ___lltoft@c 0028                      _doWDTSleep 1569                   __end_of_sleep 1720  
                    ___lwtoft@c 0028                       ?i1_memset 0070                       ?i1_strlen 0070  
                       ??_sleep 0024                    sprintf@width 004F                     loop@rfSetup 012C  
                    __pbssBANK1 00E7                      __pbssBANK2 0151                      __pbssBANK3 01A0  
             ??_nrf24l01SPISend 0070          i1nrf24l01Service@width 007B         __size_ofi1_nrf24l01Send 001B  
             ??_nrf24l01GetPipe 0026                      __pmaintext 0AE3                         ?___bmul 0020  
                       ?___ftge 0020                         ?___wmul 0020                 __CFG_PPS1WAY$ON 0000  
             _nrf24l01SetRXMode 09A9               _nrf24l01SetRXPipe 16BB          ?_nrf24l01InitRegisters 0070  
                    __pintentry 0004               _nrf24l01SetTXPipe 0912             nrf24l01SPISend@data 0070  
                       ?_memset 0020               ??_nrf24l01Service 0027              ?_nrf24l01SetRXMode 0070  
                     ?___awtoft 0028                       ?___ftpack 0020                       ?___lbtoft 0028  
            ?_nrf24l01SetRXPipe 0070        __end_of_enableInterrupts 152A              ?_nrf24l01SetTXPipe 0070  
                     ?___lltoft 0028             __CFG_RSTOSC$HFINT32 0000                         ?_strcat 00B3  
                       ?_strcpy 0020                         ?_strlen 0020                       ?___lwtoft 0028  
         __end_of_n_ADDRESS_MUL 1829                      ??i1_memset 0074            __size_of_sendMessage 0076  
           ??_nrf24l01SetRXMode 0023        __end_of_nrf24l01SPIStart 1532             ??_nrf24l01SetRXPipe 0023  
           ??_nrf24l01SetTXPipe 0024                      ??i1_strlen 0072                         _SSP1BUF 0211  
    __size_ofi1_nrf24l01Service 011C           _nrf24l01InterfaceInit 1624            nrf24l01Service@width 002B  
    __end_of_nrf24l01SendPacket 179B                   ??_getADCValue 004E           __size_of_nrf24l01Init 0043  
         __size_of_nrf24l01Send 0020       __end_of_nrf24l01SetRXMode 0A08       __end_of_nrf24l01SetRXPipe 16DC  
     __end_of_nrf24l01SetTXPipe 0956                 __size_of___bmul 0012                 __size_of___ftge 003C  
                       ___ftadd 0F0A                     ?_doWDTSleep 0070                         ___ftdiv 0CBB  
                       ___ftneg 1532                         ___lldiv 0956                 __size_of___wmul 001C  
                       ___ftmul 0D64                         ___llmod 088C                         ___ftsub 165E  
                       ___fttol 0B76                         ___lwmod 179B                      ??___awtoft 002B  
                    ??___ftpack 0025                      ??___lbtoft 002B           __end_of_nrf24l01CELow 1512  
               __size_of_memset 001C           __end_of_nrf24l01CSLow 0800                      ??___lltoft 002C  
                       __ptext1 08CF                         __ptext2 1624                         __ptext3 056E  
                       __ptext4 0912                         __ptext5 1557                         __ptext6 16BB  
                       __ptext7 17C8                         __ptext8 179B                         __ptext9 002F  
                    ??___lwtoft 002B                 __size_of_strcat 0027                 __size_of_strcpy 001B  
               __size_of_strlen 001F                    __size_of_ISR 000B                         _counter 0151  
                       _dpowers 1800                         _isdigit 1548                         _romData 00ED  
                       _sprintf 0259                         clrloop0 1516            end_of_initialization 002B  
                       ftoa@buf 0155                         ftoa@rem 00AA                    _nrf24l01Init 08CF  
                  _nrf24l01Send 169B                      _romDataMap 01C1                         memset@c 0020  
                       memset@n 0022                         memset@p 0026                nrf24l01GetPipe@i 002A  
               ___lldiv@divisor 0020                 ___lldiv@counter 002D    __size_ofi1_nrf24l01SetRXMode 0055  
         i1nrf24l01Send@command 0073                         strlen@s 0020             __end_of_getADCValue 0CBB  
                     _PORTAbits 000C                       _PORTCbits 000E                       _TRISAbits 008C  
                     _TRISCbits 008E                nrf24l01Send@data 0020                __CFG_FEXTOSC$OFF 0000  
           __size_of_doWDTSleep 0017                   ??_nrf24l01ISR 007D          ?_nrf24l01InterfaceInit 0070  
                   ___ftdiv@exp 0049                  i1_nrf24l01Send 159B                      main@packet 00C6  
              nrf24l01Service@i 002C      __size_of_nrf24l01SetRXMode 005F      __size_of_nrf24l01SetRXPipe 0021  
                   ___ftmul@exp 0061      __size_of_nrf24l01SetTXPipe 0044                  __end_of___bmul 1569  
                __end_of___ftge 088C                  __end_of___wmul 1608                       i1memset@c 0070  
                     i1memset@n 0072                       i1memset@p 0076                  __end_of_memset 1624  
                __end_of_strcat 1747                  __end_of_strcpy 15EC                  __end_of_strlen 169B  
           start_initialization 0011                 _nrf24l01SPISend 153B                     __end_of_ISR 000F  
                    ftoa@status 00A9               __size_ofi1_memset 001B       nrf24l01SetRXPipe@enRXAddr 0026  
               _nrf24l01GetPipe 17C8         __size_of_nrf24l01CEHigh 0003                       i1strlen@s 0070  
             __size_ofi1_strlen 001E         __size_of_nrf24l01CSHigh 0003          __end_ofi1_nrf24l01Send 15B6  
       __size_of_nrf24l01SPIEnd 0007                 ___llmod@divisor 002E                 ___llmod@counter 0037  
               _nrf24l01Service 0426         ??_nrf24l01InitRegisters 0027                __CFG_LPBOREN$OFF 0000  
                   _getADCValue 0C15                        ??___bmul 0021                        ??___ftge 0026  
           __end_of_nrf24l01ISR 0850                        ??___wmul 0024                     __pdataBANK1 00ED  
                      ??_memset 0024               ?_enableInterrupts 0070                        ??_strcat 0070  
                      ??_strcpy 0024                        ??_strlen 0022               __size_of___awtoft 0022  
             __size_of___ftpack 0065               __size_of___lbtoft 001B              ??_enableInterrupts 0070  
             __size_of___lltoft 002A                       ___latbits 0002               __size_of___lwtoft 0015  
                 __pcstackBANK0 0020                   __pcstackBANK1 00A0                   __pcstackBANK2 0120  
               doWDTSleep@wdtps 0021               ?_nrf24l01SPIStart 0070                    _isdigit$1700 0020  
            ??_nrf24l01SPIStart 0070                 ?i1_nrf24l01Send 0071                     sprintf@flag 0048  
                   sprintf@prec 0051                      loop@packet 0130             nrf24l01GetPipe@name 0029  
           nrf24l01GetPipe@pipe 0028                    ??_doWDTSleep 0020                        ?___ftadd 002E  
                      ?___ftdiv 003B                        ?___ftneg 0057                        ?___lldiv 0020  
                      ?___ftmul 0057                        ?___llmod 002E                        ?___ftsub 003B  
                      ?___fttol 0067                        ?___lwmod 0020            __end_of_n_ADDRESS_P0 1851  
       __end_of_nrf24l01SPISend 1548              i1nrf24l01Send@data 0071       nrf24l01InitRegisters@enAA 002D  
                 ??_sendMessage 00C0              _nrf24l01SendPacket 1771         __end_of_nrf24l01GetPipe 1800  
                      ?_isdigit 0070                       _loop$1947 012D                       _loop$1948 0126  
                     _loop$1949 0129             ?_nrf24l01SendPacket 002D                        ?_sprintf 0038  
           i1_nrf24l01SetRXMode 07A8              i1nrf24l01Service@i 007C         __end_of_nrf24l01Service 056E  
                __size_of_sleep 0022              __end_of_doWDTSleep 1580                  ___wmul@product 0024  
                   _nrf24l01ISR 0815                       clear_ram0 1515                        _PIE0bits 0090  
                      _PIR0bits 0010                       _sleepLoop 00EC            ??_nrf24l01SendPacket 002F  
          ?i1_nrf24l01SetRXMode 0070                      _ADCON0bits 009D                      _ADCON1bits 009E  
             ___wmul@multiplier 0020                        _WPUAbits 020C                        i1_memset 1580  
                      _RXPacket 01A0                        _TXPacket 00EA                        i1_strlen 1640  
           __end_of_sendMessage 0AE3                  _nrf24l01CEHigh 150C         ??_nrf24l01InterfaceInit 0020  
                _nrf24l01CSHigh 1512                  _nrf24l01SPIEnd 151B          __size_of_nrf24l01CELow 0003  
        __size_of_nrf24l01CSLow 0003           ??i1_nrf24l01SetRXMode 0074                __size_of___ftadd 00F6  
              __size_of___ftdiv 00A9                __size_of___ftneg 0009                __size_of___lldiv 0053  
              __size_of___ftmul 00B4                __size_of___llmod 0043                __size_of___ftsub 001E  
              __size_of___fttol 009F                __size_of___lwmod 002D                        ___awtoft 16DC  
                      ___ftpack 0A08                        ___lbtoft 15B6                ?_nrf24l01SPISend 0070  
                      ___lltoft 1747                      _ANSELAbits 018C                        ___lwtoft 0800  
                    _ANSELCbits 018E                ?_nrf24l01GetPipe 0070                      sprintf@val 004A  
                 _n_ADDRESS_MUL 1828                      strcat@from 00B5          __end_of_nrf24l01CEHigh 150F  
              __size_of_isdigit 000F          __end_of_nrf24l01CSHigh 1515                        __ptext10 0A6D  
                      __ptext11 15D1                        __ptext20 0E18                        __ptext12 1720  
                      __ptext21 0259                        __ptext13 16FE                        __ptext30 0D64  
                      __ptext22 1548                        __ptext14 1771                        __ptext31 0850  
                      __ptext23 15EC                        __ptext15 0426                        __ptext32 0C15  
                      __ptext24 088C                        __ptext16 167C                        __ptext41 0815  
                      __ptext33 1569                        __ptext25 0956                        __ptext17 09A9  
                      __ptext50 1512                        __ptext42 068C                        __ptext34 0CBB  
                      __ptext26 1747                        __ptext18 169B                        __ptext51 1522  
                      __ptext43 1640                        __ptext35 0F0A                        __ptext27 0B76  
                      __ptext19 1608                        __ptext52 150F                        __ptext44 07A8  
                      __ptext36 16DC                        __ptext28 165E                        __ptext53 150C  
                      __ptext45 159B                        __ptext37 15B6                        __ptext29 1532  
                      __ptext54 1580                        __ptext46 152A                        __ptext38 0800  
                      __ptext47 07FD                        __ptext39 0A08                        __ptext48 153B  
                      __ptext49 151B                    _SSP1CON1bits 0215          __end_of_nrf24l01SPIEnd 1522  
              ?_nrf24l01Service 0070                __size_of_sprintf 01CD                     _OSCCON1bits 0919  
                    strcpy@from 0022                   __size_of_main 0093                   __size_of_ftoa 00F2  
                 __size_of_loop 022A    nrf24l01InitRegisters@channel 0029    nrf24l01InitRegisters@feature 002B  
                    _RC0PPSbits 0EA0    nrf24l01InitRegisters@rfSetup 002C                      _RC1PPSbits 0EA1  
                  ?_getADCValue 004B                      _RC2PPSbits 0EA2  __size_of_nrf24l01InitRegisters 011E  
 __end_of_nrf24l01InitRegisters 068C                        int$flags 007E    nrf24l01InitRegisters@setupAW 002A  
                    _ODCONAbits 028C                        _statuses 1834                    _SSP1STATbits 0214  
                      main@pipe 00C5      nrf24l01SendPacket@txPacket 002D                   _nrf24l01CELow 150F  
                   _sendMessage 0A6D                   _nrf24l01CSLow 07FD                      _INTCONbits 000B  
               ?_nrf24l01CEHigh 0070                      _FVRCONbits 0117                ??i1_nrf24l01Send 0072  
               ?_nrf24l01CSHigh 0070                  __pstringtext10 1860                  __pstringtext11 1865  
                __pstringtext12 186A                  __pstringtext13 186F                  __pstringtext14 1874  
                __pstringtext15 1879                  __pstringtext16 187D                  __pstringtext17 0000  
                      isdigit@c 0021                        memset@p1 0025                 ?_nrf24l01SPIEnd 0070  
                      intlevel1 0000                       sprintf@ap 0049                       sprintf@sp 004E  
                  _n_ADDRESS_P0 184C       __size_of_enableInterrupts 0008                ___lwmod@dividend 0022  
              ___lldiv@dividend 0024               __CFG_CLKOUTEN$OFF 0000       __size_of_nrf24l01SPIStart 0008  
                ?_nrf24l01CELow 0070                   __pstringtext1 1800                   __pstringtext2 1834  
                 __pstringtext3 184C                   __pstringtext4 1828                   __pstringtext5 183F  
                 __pstringtext6 1846                   __pstringtext7 1851                   __pstringtext8 1856  
                 __pstringtext9 185B                  ?_nrf24l01CSLow 0070                        sprintf@c 0053  
                      sprintf@f 0038      nrf24l01InitRegisters@DynPD 002E                        strcat@cp 00B7  
                      strcat@to 00B3                ___lldiv@quotient 0029                 ___lwmod@divisor 0020  
                      strcpy@cp 0024                        strlen@cp 0024                        strcpy@to 0020  
               ___lwmod@counter 0025                      _WDTCONbits 0097                   ?_nrf24l01Init 0070  
                 ?_nrf24l01Send 0020                    ?_nrf24l01ISR 0070  
