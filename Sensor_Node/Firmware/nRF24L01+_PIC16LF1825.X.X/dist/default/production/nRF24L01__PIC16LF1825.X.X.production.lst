

Microchip Technology PIC LITE Macro Assembler V2.00 build -1524193055 
                                                                                               Sat Jul 28 08:05:14 2018

Microchip Technology Omniscient Code Generator v2.00 (Free mode) build 20180527130849
     1                           	processor	16LF18325
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK1,global,class=CODE,delta=2
     5                           	psect	stringtext1,global,class=STRCODE,delta=2
     6                           	psect	stringtext2,global,class=STRCODE,delta=2
     7                           	psect	stringtext3,global,class=STRCODE,delta=2
     8                           	psect	stringtext4,global,class=STRCODE,delta=2
     9                           	psect	stringtext5,global,class=STRCODE,delta=2
    10                           	psect	stringtext6,global,class=STRCODE,delta=2
    11                           	psect	stringtext7,global,class=STRCODE,delta=2
    12                           	psect	stringtext8,global,class=STRCODE,delta=2
    13                           	psect	stringtext9,global,class=STRCODE,delta=2
    14                           	psect	stringtext10,global,class=STRCODE,delta=2
    15                           	psect	stringtext11,global,class=STRCODE,delta=2
    16                           	psect	stringtext12,global,class=STRCODE,delta=2
    17                           	psect	cinit,global,class=CODE,merge=1,delta=2
    18                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
    19                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    20                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    21                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    22                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    23                           	psect	clrtext,global,class=CODE,delta=2
    24                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1
    25                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    26                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    27                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    28                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    29                           	psect	text1,local,class=CODE,merge=1,delta=2,group=2
    30                           	psect	text2,local,class=CODE,merge=1,delta=2
    31                           	psect	text3,local,class=CODE,merge=1,delta=2
    32                           	psect	text4,local,class=CODE,merge=1,delta=2
    33                           	psect	text5,local,class=CODE,merge=1,delta=2
    34                           	psect	text6,local,class=CODE,merge=1,delta=2
    35                           	psect	text7,local,class=CODE,merge=1,delta=2,group=1
    36                           	psect	text8,local,class=CODE,merge=1,delta=2
    37                           	psect	text9,local,class=CODE,merge=1,delta=2
    38                           	psect	text10,local,class=CODE,merge=1,delta=2
    39                           	psect	text11,local,class=CODE,merge=1,delta=2
    40                           	psect	text12,local,class=CODE,merge=1,delta=2
    41                           	psect	text13,local,class=CODE,merge=1,delta=2,group=1
    42                           	psect	text14,local,class=CODE,merge=1,delta=2
    43                           	psect	text15,local,class=CODE,merge=1,delta=2,group=2
    44                           	psect	text16,local,class=CODE,merge=1,delta=2
    45                           	psect	text17,local,class=CODE,merge=1,delta=2,group=1
    46                           	psect	text18,local,class=CODE,merge=1,delta=2
    47                           	psect	text19,local,class=CODE,merge=1,delta=2,group=2
    48                           	psect	text20,local,class=CODE,merge=1,delta=2,group=2
    49                           	psect	text21,local,class=CODE,merge=1,delta=2,group=2
    50                           	psect	text22,local,class=CODE,merge=1,delta=2
    51                           	psect	text23,local,class=CODE,merge=1,delta=2,group=2
    52                           	psect	text24,local,class=CODE,merge=1,delta=2,group=1
    53                           	psect	text25,local,class=CODE,merge=1,delta=2,group=1
    54                           	psect	text26,local,class=CODE,merge=1,delta=2,group=1
    55                           	psect	text27,local,class=CODE,merge=1,delta=2,group=1
    56                           	psect	text28,local,class=CODE,merge=1,delta=2,group=1
    57                           	psect	text29,local,class=CODE,merge=1,delta=2,group=1
    58                           	psect	text30,local,class=CODE,merge=1,delta=2,group=1
    59                           	psect	text31,local,class=CODE,merge=1,delta=2,group=1
    60                           	psect	text32,local,class=CODE,merge=1,delta=2,group=1
    61                           	psect	text33,local,class=CODE,merge=1,delta=2
    62                           	psect	text34,local,class=CODE,merge=1,delta=2
    63                           	psect	text35,local,class=CODE,merge=1,delta=2,group=1
    64                           	psect	text36,local,class=CODE,merge=1,delta=2,group=1
    65                           	psect	text37,local,class=CODE,merge=1,delta=2,group=1
    66                           	psect	text38,local,class=CODE,merge=1,delta=2
    67                           	psect	text39,local,class=CODE,merge=1,delta=2
    68                           	psect	text40,local,class=CODE,merge=1,delta=2
    69                           	psect	text41,local,class=CODE,merge=1,delta=2
    70                           	psect	text42,local,class=CODE,merge=1,delta=2,group=1
    71                           	psect	text43,local,class=CODE,merge=1,delta=2,group=1
    72                           	psect	intentry,global,class=CODE,delta=2
    73                           	psect	text45,local,class=CODE,merge=1,delta=2
    74                           	psect	text46,local,class=CODE,merge=1,delta=2
    75                           	psect	text47,local,class=CODE,merge=1,delta=2
    76                           	psect	text48,local,class=CODE,merge=1,delta=2
    77                           	psect	text49,local,class=CODE,merge=1,delta=2
    78                           	psect	text50,local,class=CODE,merge=1,delta=2
    79                           	psect	text51,local,class=CODE,merge=1,delta=2
    80                           	psect	text52,local,class=CODE,merge=1,delta=2
    81                           	psect	text53,local,class=CODE,merge=1,delta=2
    82                           	psect	text54,local,class=CODE,merge=1,delta=2
    83                           	psect	text55,local,class=CODE,merge=1,delta=2
    84                           	psect	text56,local,class=CODE,merge=1,delta=2
    85                           	psect	text57,local,class=CODE,merge=1,delta=2
    86                           	psect	text58,local,class=CODE,merge=1,delta=2
    87                           	psect	text59,local,class=CODE,merge=1,delta=2,group=2
    88                           	psect	text60,local,class=CODE,merge=1,delta=2
    89                           	dabs	1,0x7E,2
    90  0000                     
    91                           ; Version 2.00
    92                           ; Generated 27/05/2018 GMT
    93                           ; 
    94                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
    95                           ; All rights reserved.
    96                           ; 
    97                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    98                           ; 
    99                           ; Redistribution and use in source and binary forms, with or without modification, are
   100                           ; permitted provided that the following conditions are met:
   101                           ; 
   102                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   103                           ;        conditions and the following disclaimer.
   104                           ; 
   105                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   106                           ;        of conditions and the following disclaimer in the documentation and/or other
   107                           ;        materials provided with the distribution.
   108                           ; 
   109                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   110                           ;        software without specific prior written permission.
   111                           ; 
   112                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   113                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   114                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   115                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   116                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   117                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   118                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   119                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   120                           ; 
   121                           ; 
   122                           ; Code-generator required, PIC16LF18325 Definitions
   123                           ; 
   124                           ; SFR Addresses
   125  0000                     	;# 
   126  0001                     	;# 
   127  0002                     	;# 
   128  0003                     	;# 
   129  0004                     	;# 
   130  0005                     	;# 
   131  0006                     	;# 
   132  0007                     	;# 
   133  0008                     	;# 
   134  0009                     	;# 
   135  000A                     	;# 
   136  000B                     	;# 
   137  000C                     	;# 
   138  000E                     	;# 
   139  0010                     	;# 
   140  0011                     	;# 
   141  0012                     	;# 
   142  0013                     	;# 
   143  0014                     	;# 
   144  0015                     	;# 
   145  0015                     	;# 
   146  0016                     	;# 
   147  0016                     	;# 
   148  0017                     	;# 
   149  0018                     	;# 
   150  0019                     	;# 
   151  0019                     	;# 
   152  001A                     	;# 
   153  001B                     	;# 
   154  001C                     	;# 
   155  001D                     	;# 
   156  001E                     	;# 
   157  001F                     	;# 
   158  008C                     	;# 
   159  008E                     	;# 
   160  0090                     	;# 
   161  0091                     	;# 
   162  0092                     	;# 
   163  0093                     	;# 
   164  0094                     	;# 
   165  0097                     	;# 
   166  009B                     	;# 
   167  009B                     	;# 
   168  009C                     	;# 
   169  009D                     	;# 
   170  009E                     	;# 
   171  009F                     	;# 
   172  010C                     	;# 
   173  010E                     	;# 
   174  0111                     	;# 
   175  0112                     	;# 
   176  0113                     	;# 
   177  0114                     	;# 
   178  0115                     	;# 
   179  0116                     	;# 
   180  0117                     	;# 
   181  0118                     	;# 
   182  0119                     	;# 
   183  018C                     	;# 
   184  018E                     	;# 
   185  0199                     	;# 
   186  0199                     	;# 
   187  0199                     	;# 
   188  019A                     	;# 
   189  019A                     	;# 
   190  019A                     	;# 
   191  019B                     	;# 
   192  019B                     	;# 
   193  019B                     	;# 
   194  019B                     	;# 
   195  019B                     	;# 
   196  019C                     	;# 
   197  019C                     	;# 
   198  019C                     	;# 
   199  019D                     	;# 
   200  019D                     	;# 
   201  019D                     	;# 
   202  019E                     	;# 
   203  019E                     	;# 
   204  019E                     	;# 
   205  019F                     	;# 
   206  019F                     	;# 
   207  019F                     	;# 
   208  019F                     	;# 
   209  019F                     	;# 
   210  020C                     	;# 
   211  020E                     	;# 
   212  0211                     	;# 
   213  0211                     	;# 
   214  0212                     	;# 
   215  0212                     	;# 
   216  0213                     	;# 
   217  0213                     	;# 
   218  0214                     	;# 
   219  0214                     	;# 
   220  0215                     	;# 
   221  0215                     	;# 
   222  0215                     	;# 
   223  0215                     	;# 
   224  0216                     	;# 
   225  0216                     	;# 
   226  0217                     	;# 
   227  0217                     	;# 
   228  0219                     	;# 
   229  021A                     	;# 
   230  021B                     	;# 
   231  021C                     	;# 
   232  021D                     	;# 
   233  021D                     	;# 
   234  021E                     	;# 
   235  021F                     	;# 
   236  028C                     	;# 
   237  028E                     	;# 
   238  0291                     	;# 
   239  0291                     	;# 
   240  0292                     	;# 
   241  0293                     	;# 
   242  0294                     	;# 
   243  0295                     	;# 
   244  0295                     	;# 
   245  0296                     	;# 
   246  0297                     	;# 
   247  0298                     	;# 
   248  029F                     	;# 
   249  030C                     	;# 
   250  030E                     	;# 
   251  0311                     	;# 
   252  0311                     	;# 
   253  0312                     	;# 
   254  0313                     	;# 
   255  0314                     	;# 
   256  0315                     	;# 
   257  0315                     	;# 
   258  0316                     	;# 
   259  0317                     	;# 
   260  0318                     	;# 
   261  038C                     	;# 
   262  038E                     	;# 
   263  0391                     	;# 
   264  0392                     	;# 
   265  0393                     	;# 
   266  0397                     	;# 
   267  0398                     	;# 
   268  0399                     	;# 
   269  039A                     	;# 
   270  039C                     	;# 
   271  039D                     	;# 
   272  039E                     	;# 
   273  039F                     	;# 
   274  0411                     	;# 
   275  0411                     	;# 
   276  0412                     	;# 
   277  0413                     	;# 
   278  0414                     	;# 
   279  0415                     	;# 
   280  0416                     	;# 
   281  0417                     	;# 
   282  0418                     	;# 
   283  0418                     	;# 
   284  0419                     	;# 
   285  041A                     	;# 
   286  041B                     	;# 
   287  041C                     	;# 
   288  041D                     	;# 
   289  041E                     	;# 
   290  041F                     	;# 
   291  0498                     	;# 
   292  0498                     	;# 
   293  0499                     	;# 
   294  049A                     	;# 
   295  049B                     	;# 
   296  049B                     	;# 
   297  049C                     	;# 
   298  049D                     	;# 
   299  049E                     	;# 
   300  049F                     	;# 
   301  0617                     	;# 
   302  0618                     	;# 
   303  0619                     	;# 
   304  0619                     	;# 
   305  061A                     	;# 
   306  061B                     	;# 
   307  061C                     	;# 
   308  061C                     	;# 
   309  061F                     	;# 
   310  0691                     	;# 
   311  0692                     	;# 
   312  0693                     	;# 
   313  0694                     	;# 
   314  0695                     	;# 
   315  0696                     	;# 
   316  0697                     	;# 
   317  0698                     	;# 
   318  0699                     	;# 
   319  0711                     	;# 
   320  0712                     	;# 
   321  0713                     	;# 
   322  0714                     	;# 
   323  0715                     	;# 
   324  0716                     	;# 
   325  0717                     	;# 
   326  0718                     	;# 
   327  0719                     	;# 
   328  0891                     	;# 
   329  0891                     	;# 
   330  0891                     	;# 
   331  0891                     	;# 
   332  0891                     	;# 
   333  0891                     	;# 
   334  0892                     	;# 
   335  0892                     	;# 
   336  0892                     	;# 
   337  0893                     	;# 
   338  0893                     	;# 
   339  0893                     	;# 
   340  0893                     	;# 
   341  0893                     	;# 
   342  0893                     	;# 
   343  0894                     	;# 
   344  0894                     	;# 
   345  0894                     	;# 
   346  0895                     	;# 
   347  0895                     	;# 
   348  0895                     	;# 
   349  0896                     	;# 
   350  0896                     	;# 
   351  0896                     	;# 
   352  089B                     	;# 
   353  0911                     	;# 
   354  0912                     	;# 
   355  0913                     	;# 
   356  0914                     	;# 
   357  0915                     	;# 
   358  0916                     	;# 
   359  0918                     	;# 
   360  0919                     	;# 
   361  091A                     	;# 
   362  091B                     	;# 
   363  091C                     	;# 
   364  091D                     	;# 
   365  091E                     	;# 
   366  091F                     	;# 
   367  0E0F                     	;# 
   368  0E10                     	;# 
   369  0E11                     	;# 
   370  0E12                     	;# 
   371  0E13                     	;# 
   372  0E14                     	;# 
   373  0E15                     	;# 
   374  0E16                     	;# 
   375  0E17                     	;# 
   376  0E18                     	;# 
   377  0E19                     	;# 
   378  0E1A                     	;# 
   379  0E1B                     	;# 
   380  0E1C                     	;# 
   381  0E1D                     	;# 
   382  0E1E                     	;# 
   383  0E1F                     	;# 
   384  0E20                     	;# 
   385  0E21                     	;# 
   386  0E22                     	;# 
   387  0E24                     	;# 
   388  0E25                     	;# 
   389  0E28                     	;# 
   390  0E29                     	;# 
   391  0E2A                     	;# 
   392  0E2B                     	;# 
   393  0E2C                     	;# 
   394  0E2D                     	;# 
   395  0E2E                     	;# 
   396  0E2F                     	;# 
   397  0E90                     	;# 
   398  0E91                     	;# 
   399  0E92                     	;# 
   400  0E94                     	;# 
   401  0E95                     	;# 
   402  0EA0                     	;# 
   403  0EA1                     	;# 
   404  0EA2                     	;# 
   405  0EA3                     	;# 
   406  0EA4                     	;# 
   407  0EA5                     	;# 
   408  0F0F                     	;# 
   409  0F10                     	;# 
   410  0F11                     	;# 
   411  0F12                     	;# 
   412  0F13                     	;# 
   413  0F14                     	;# 
   414  0F15                     	;# 
   415  0F16                     	;# 
   416  0F17                     	;# 
   417  0F18                     	;# 
   418  0F19                     	;# 
   419  0F1A                     	;# 
   420  0F1B                     	;# 
   421  0F1C                     	;# 
   422  0F1D                     	;# 
   423  0F1E                     	;# 
   424  0F1F                     	;# 
   425  0F20                     	;# 
   426  0F21                     	;# 
   427  0F22                     	;# 
   428  0F23                     	;# 
   429  0F24                     	;# 
   430  0F25                     	;# 
   431  0F26                     	;# 
   432  0F27                     	;# 
   433  0F28                     	;# 
   434  0F29                     	;# 
   435  0F2A                     	;# 
   436  0F2B                     	;# 
   437  0F2C                     	;# 
   438  0F2D                     	;# 
   439  0F2E                     	;# 
   440  0F2F                     	;# 
   441  0F30                     	;# 
   442  0F31                     	;# 
   443  0F32                     	;# 
   444  0F33                     	;# 
   445  0F34                     	;# 
   446  0F35                     	;# 
   447  0F36                     	;# 
   448  0F37                     	;# 
   449  0FE4                     	;# 
   450  0FE5                     	;# 
   451  0FE6                     	;# 
   452  0FE7                     	;# 
   453  0FE8                     	;# 
   454  0FE9                     	;# 
   455  0FEA                     	;# 
   456  0FEB                     	;# 
   457  0FED                     	;# 
   458  0FEE                     	;# 
   459  0FEF                     	;# 
   460  0000                     	;# 
   461  0001                     	;# 
   462  0002                     	;# 
   463  0003                     	;# 
   464  0004                     	;# 
   465  0005                     	;# 
   466  0006                     	;# 
   467  0007                     	;# 
   468  0008                     	;# 
   469  0009                     	;# 
   470  000A                     	;# 
   471  000B                     	;# 
   472  000C                     	;# 
   473  000E                     	;# 
   474  0010                     	;# 
   475  0011                     	;# 
   476  0012                     	;# 
   477  0013                     	;# 
   478  0014                     	;# 
   479  0015                     	;# 
   480  0015                     	;# 
   481  0016                     	;# 
   482  0016                     	;# 
   483  0017                     	;# 
   484  0018                     	;# 
   485  0019                     	;# 
   486  0019                     	;# 
   487  001A                     	;# 
   488  001B                     	;# 
   489  001C                     	;# 
   490  001D                     	;# 
   491  001E                     	;# 
   492  001F                     	;# 
   493  008C                     	;# 
   494  008E                     	;# 
   495  0090                     	;# 
   496  0091                     	;# 
   497  0092                     	;# 
   498  0093                     	;# 
   499  0094                     	;# 
   500  0097                     	;# 
   501  009B                     	;# 
   502  009B                     	;# 
   503  009C                     	;# 
   504  009D                     	;# 
   505  009E                     	;# 
   506  009F                     	;# 
   507  010C                     	;# 
   508  010E                     	;# 
   509  0111                     	;# 
   510  0112                     	;# 
   511  0113                     	;# 
   512  0114                     	;# 
   513  0115                     	;# 
   514  0116                     	;# 
   515  0117                     	;# 
   516  0118                     	;# 
   517  0119                     	;# 
   518  018C                     	;# 
   519  018E                     	;# 
   520  0199                     	;# 
   521  0199                     	;# 
   522  0199                     	;# 
   523  019A                     	;# 
   524  019A                     	;# 
   525  019A                     	;# 
   526  019B                     	;# 
   527  019B                     	;# 
   528  019B                     	;# 
   529  019B                     	;# 
   530  019B                     	;# 
   531  019C                     	;# 
   532  019C                     	;# 
   533  019C                     	;# 
   534  019D                     	;# 
   535  019D                     	;# 
   536  019D                     	;# 
   537  019E                     	;# 
   538  019E                     	;# 
   539  019E                     	;# 
   540  019F                     	;# 
   541  019F                     	;# 
   542  019F                     	;# 
   543  019F                     	;# 
   544  019F                     	;# 
   545  020C                     	;# 
   546  020E                     	;# 
   547  0211                     	;# 
   548  0211                     	;# 
   549  0212                     	;# 
   550  0212                     	;# 
   551  0213                     	;# 
   552  0213                     	;# 
   553  0214                     	;# 
   554  0214                     	;# 
   555  0215                     	;# 
   556  0215                     	;# 
   557  0215                     	;# 
   558  0215                     	;# 
   559  0216                     	;# 
   560  0216                     	;# 
   561  0217                     	;# 
   562  0217                     	;# 
   563  0219                     	;# 
   564  021A                     	;# 
   565  021B                     	;# 
   566  021C                     	;# 
   567  021D                     	;# 
   568  021D                     	;# 
   569  021E                     	;# 
   570  021F                     	;# 
   571  028C                     	;# 
   572  028E                     	;# 
   573  0291                     	;# 
   574  0291                     	;# 
   575  0292                     	;# 
   576  0293                     	;# 
   577  0294                     	;# 
   578  0295                     	;# 
   579  0295                     	;# 
   580  0296                     	;# 
   581  0297                     	;# 
   582  0298                     	;# 
   583  029F                     	;# 
   584  030C                     	;# 
   585  030E                     	;# 
   586  0311                     	;# 
   587  0311                     	;# 
   588  0312                     	;# 
   589  0313                     	;# 
   590  0314                     	;# 
   591  0315                     	;# 
   592  0315                     	;# 
   593  0316                     	;# 
   594  0317                     	;# 
   595  0318                     	;# 
   596  038C                     	;# 
   597  038E                     	;# 
   598  0391                     	;# 
   599  0392                     	;# 
   600  0393                     	;# 
   601  0397                     	;# 
   602  0398                     	;# 
   603  0399                     	;# 
   604  039A                     	;# 
   605  039C                     	;# 
   606  039D                     	;# 
   607  039E                     	;# 
   608  039F                     	;# 
   609  0411                     	;# 
   610  0411                     	;# 
   611  0412                     	;# 
   612  0413                     	;# 
   613  0414                     	;# 
   614  0415                     	;# 
   615  0416                     	;# 
   616  0417                     	;# 
   617  0418                     	;# 
   618  0418                     	;# 
   619  0419                     	;# 
   620  041A                     	;# 
   621  041B                     	;# 
   622  041C                     	;# 
   623  041D                     	;# 
   624  041E                     	;# 
   625  041F                     	;# 
   626  0498                     	;# 
   627  0498                     	;# 
   628  0499                     	;# 
   629  049A                     	;# 
   630  049B                     	;# 
   631  049B                     	;# 
   632  049C                     	;# 
   633  049D                     	;# 
   634  049E                     	;# 
   635  049F                     	;# 
   636  0617                     	;# 
   637  0618                     	;# 
   638  0619                     	;# 
   639  0619                     	;# 
   640  061A                     	;# 
   641  061B                     	;# 
   642  061C                     	;# 
   643  061C                     	;# 
   644  061F                     	;# 
   645  0691                     	;# 
   646  0692                     	;# 
   647  0693                     	;# 
   648  0694                     	;# 
   649  0695                     	;# 
   650  0696                     	;# 
   651  0697                     	;# 
   652  0698                     	;# 
   653  0699                     	;# 
   654  0711                     	;# 
   655  0712                     	;# 
   656  0713                     	;# 
   657  0714                     	;# 
   658  0715                     	;# 
   659  0716                     	;# 
   660  0717                     	;# 
   661  0718                     	;# 
   662  0719                     	;# 
   663  0891                     	;# 
   664  0891                     	;# 
   665  0891                     	;# 
   666  0891                     	;# 
   667  0891                     	;# 
   668  0891                     	;# 
   669  0892                     	;# 
   670  0892                     	;# 
   671  0892                     	;# 
   672  0893                     	;# 
   673  0893                     	;# 
   674  0893                     	;# 
   675  0893                     	;# 
   676  0893                     	;# 
   677  0893                     	;# 
   678  0894                     	;# 
   679  0894                     	;# 
   680  0894                     	;# 
   681  0895                     	;# 
   682  0895                     	;# 
   683  0895                     	;# 
   684  0896                     	;# 
   685  0896                     	;# 
   686  0896                     	;# 
   687  089B                     	;# 
   688  0911                     	;# 
   689  0912                     	;# 
   690  0913                     	;# 
   691  0914                     	;# 
   692  0915                     	;# 
   693  0916                     	;# 
   694  0918                     	;# 
   695  0919                     	;# 
   696  091A                     	;# 
   697  091B                     	;# 
   698  091C                     	;# 
   699  091D                     	;# 
   700  091E                     	;# 
   701  091F                     	;# 
   702  0E0F                     	;# 
   703  0E10                     	;# 
   704  0E11                     	;# 
   705  0E12                     	;# 
   706  0E13                     	;# 
   707  0E14                     	;# 
   708  0E15                     	;# 
   709  0E16                     	;# 
   710  0E17                     	;# 
   711  0E18                     	;# 
   712  0E19                     	;# 
   713  0E1A                     	;# 
   714  0E1B                     	;# 
   715  0E1C                     	;# 
   716  0E1D                     	;# 
   717  0E1E                     	;# 
   718  0E1F                     	;# 
   719  0E20                     	;# 
   720  0E21                     	;# 
   721  0E22                     	;# 
   722  0E24                     	;# 
   723  0E25                     	;# 
   724  0E28                     	;# 
   725  0E29                     	;# 
   726  0E2A                     	;# 
   727  0E2B                     	;# 
   728  0E2C                     	;# 
   729  0E2D                     	;# 
   730  0E2E                     	;# 
   731  0E2F                     	;# 
   732  0E90                     	;# 
   733  0E91                     	;# 
   734  0E92                     	;# 
   735  0E94                     	;# 
   736  0E95                     	;# 
   737  0EA0                     	;# 
   738  0EA1                     	;# 
   739  0EA2                     	;# 
   740  0EA3                     	;# 
   741  0EA4                     	;# 
   742  0EA5                     	;# 
   743  0F0F                     	;# 
   744  0F10                     	;# 
   745  0F11                     	;# 
   746  0F12                     	;# 
   747  0F13                     	;# 
   748  0F14                     	;# 
   749  0F15                     	;# 
   750  0F16                     	;# 
   751  0F17                     	;# 
   752  0F18                     	;# 
   753  0F19                     	;# 
   754  0F1A                     	;# 
   755  0F1B                     	;# 
   756  0F1C                     	;# 
   757  0F1D                     	;# 
   758  0F1E                     	;# 
   759  0F1F                     	;# 
   760  0F20                     	;# 
   761  0F21                     	;# 
   762  0F22                     	;# 
   763  0F23                     	;# 
   764  0F24                     	;# 
   765  0F25                     	;# 
   766  0F26                     	;# 
   767  0F27                     	;# 
   768  0F28                     	;# 
   769  0F29                     	;# 
   770  0F2A                     	;# 
   771  0F2B                     	;# 
   772  0F2C                     	;# 
   773  0F2D                     	;# 
   774  0F2E                     	;# 
   775  0F2F                     	;# 
   776  0F30                     	;# 
   777  0F31                     	;# 
   778  0F32                     	;# 
   779  0F33                     	;# 
   780  0F34                     	;# 
   781  0F35                     	;# 
   782  0F36                     	;# 
   783  0F37                     	;# 
   784  0FE4                     	;# 
   785  0FE5                     	;# 
   786  0FE6                     	;# 
   787  0FE7                     	;# 
   788  0FE8                     	;# 
   789  0FE9                     	;# 
   790  0FEA                     	;# 
   791  0FEB                     	;# 
   792  0FED                     	;# 
   793  0FEE                     	;# 
   794  0FEF                     	;# 
   795  0000                     	;# 
   796  0001                     	;# 
   797  0002                     	;# 
   798  0003                     	;# 
   799  0004                     	;# 
   800  0005                     	;# 
   801  0006                     	;# 
   802  0007                     	;# 
   803  0008                     	;# 
   804  0009                     	;# 
   805  000A                     	;# 
   806  000B                     	;# 
   807  000C                     	;# 
   808  000E                     	;# 
   809  0010                     	;# 
   810  0011                     	;# 
   811  0012                     	;# 
   812  0013                     	;# 
   813  0014                     	;# 
   814  0015                     	;# 
   815  0015                     	;# 
   816  0016                     	;# 
   817  0016                     	;# 
   818  0017                     	;# 
   819  0018                     	;# 
   820  0019                     	;# 
   821  0019                     	;# 
   822  001A                     	;# 
   823  001B                     	;# 
   824  001C                     	;# 
   825  001D                     	;# 
   826  001E                     	;# 
   827  001F                     	;# 
   828  008C                     	;# 
   829  008E                     	;# 
   830  0090                     	;# 
   831  0091                     	;# 
   832  0092                     	;# 
   833  0093                     	;# 
   834  0094                     	;# 
   835  0097                     	;# 
   836  009B                     	;# 
   837  009B                     	;# 
   838  009C                     	;# 
   839  009D                     	;# 
   840  009E                     	;# 
   841  009F                     	;# 
   842  010C                     	;# 
   843  010E                     	;# 
   844  0111                     	;# 
   845  0112                     	;# 
   846  0113                     	;# 
   847  0114                     	;# 
   848  0115                     	;# 
   849  0116                     	;# 
   850  0117                     	;# 
   851  0118                     	;# 
   852  0119                     	;# 
   853  018C                     	;# 
   854  018E                     	;# 
   855  0199                     	;# 
   856  0199                     	;# 
   857  0199                     	;# 
   858  019A                     	;# 
   859  019A                     	;# 
   860  019A                     	;# 
   861  019B                     	;# 
   862  019B                     	;# 
   863  019B                     	;# 
   864  019B                     	;# 
   865  019B                     	;# 
   866  019C                     	;# 
   867  019C                     	;# 
   868  019C                     	;# 
   869  019D                     	;# 
   870  019D                     	;# 
   871  019D                     	;# 
   872  019E                     	;# 
   873  019E                     	;# 
   874  019E                     	;# 
   875  019F                     	;# 
   876  019F                     	;# 
   877  019F                     	;# 
   878  019F                     	;# 
   879  019F                     	;# 
   880  020C                     	;# 
   881  020E                     	;# 
   882  0211                     	;# 
   883  0211                     	;# 
   884  0212                     	;# 
   885  0212                     	;# 
   886  0213                     	;# 
   887  0213                     	;# 
   888  0214                     	;# 
   889  0214                     	;# 
   890  0215                     	;# 
   891  0215                     	;# 
   892  0215                     	;# 
   893  0215                     	;# 
   894  0216                     	;# 
   895  0216                     	;# 
   896  0217                     	;# 
   897  0217                     	;# 
   898  0219                     	;# 
   899  021A                     	;# 
   900  021B                     	;# 
   901  021C                     	;# 
   902  021D                     	;# 
   903  021D                     	;# 
   904  021E                     	;# 
   905  021F                     	;# 
   906  028C                     	;# 
   907  028E                     	;# 
   908  0291                     	;# 
   909  0291                     	;# 
   910  0292                     	;# 
   911  0293                     	;# 
   912  0294                     	;# 
   913  0295                     	;# 
   914  0295                     	;# 
   915  0296                     	;# 
   916  0297                     	;# 
   917  0298                     	;# 
   918  029F                     	;# 
   919  030C                     	;# 
   920  030E                     	;# 
   921  0311                     	;# 
   922  0311                     	;# 
   923  0312                     	;# 
   924  0313                     	;# 
   925  0314                     	;# 
   926  0315                     	;# 
   927  0315                     	;# 
   928  0316                     	;# 
   929  0317                     	;# 
   930  0318                     	;# 
   931  038C                     	;# 
   932  038E                     	;# 
   933  0391                     	;# 
   934  0392                     	;# 
   935  0393                     	;# 
   936  0397                     	;# 
   937  0398                     	;# 
   938  0399                     	;# 
   939  039A                     	;# 
   940  039C                     	;# 
   941  039D                     	;# 
   942  039E                     	;# 
   943  039F                     	;# 
   944  0411                     	;# 
   945  0411                     	;# 
   946  0412                     	;# 
   947  0413                     	;# 
   948  0414                     	;# 
   949  0415                     	;# 
   950  0416                     	;# 
   951  0417                     	;# 
   952  0418                     	;# 
   953  0418                     	;# 
   954  0419                     	;# 
   955  041A                     	;# 
   956  041B                     	;# 
   957  041C                     	;# 
   958  041D                     	;# 
   959  041E                     	;# 
   960  041F                     	;# 
   961  0498                     	;# 
   962  0498                     	;# 
   963  0499                     	;# 
   964  049A                     	;# 
   965  049B                     	;# 
   966  049B                     	;# 
   967  049C                     	;# 
   968  049D                     	;# 
   969  049E                     	;# 
   970  049F                     	;# 
   971  0617                     	;# 
   972  0618                     	;# 
   973  0619                     	;# 
   974  0619                     	;# 
   975  061A                     	;# 
   976  061B                     	;# 
   977  061C                     	;# 
   978  061C                     	;# 
   979  061F                     	;# 
   980  0691                     	;# 
   981  0692                     	;# 
   982  0693                     	;# 
   983  0694                     	;# 
   984  0695                     	;# 
   985  0696                     	;# 
   986  0697                     	;# 
   987  0698                     	;# 
   988  0699                     	;# 
   989  0711                     	;# 
   990  0712                     	;# 
   991  0713                     	;# 
   992  0714                     	;# 
   993  0715                     	;# 
   994  0716                     	;# 
   995  0717                     	;# 
   996  0718                     	;# 
   997  0719                     	;# 
   998  0891                     	;# 
   999  0891                     	;# 
  1000  0891                     	;# 
  1001  0891                     	;# 
  1002  0891                     	;# 
  1003  0891                     	;# 
  1004  0892                     	;# 
  1005  0892                     	;# 
  1006  0892                     	;# 
  1007  0893                     	;# 
  1008  0893                     	;# 
  1009  0893                     	;# 
  1010  0893                     	;# 
  1011  0893                     	;# 
  1012  0893                     	;# 
  1013  0894                     	;# 
  1014  0894                     	;# 
  1015  0894                     	;# 
  1016  0895                     	;# 
  1017  0895                     	;# 
  1018  0895                     	;# 
  1019  0896                     	;# 
  1020  0896                     	;# 
  1021  0896                     	;# 
  1022  089B                     	;# 
  1023  0911                     	;# 
  1024  0912                     	;# 
  1025  0913                     	;# 
  1026  0914                     	;# 
  1027  0915                     	;# 
  1028  0916                     	;# 
  1029  0918                     	;# 
  1030  0919                     	;# 
  1031  091A                     	;# 
  1032  091B                     	;# 
  1033  091C                     	;# 
  1034  091D                     	;# 
  1035  091E                     	;# 
  1036  091F                     	;# 
  1037  0E0F                     	;# 
  1038  0E10                     	;# 
  1039  0E11                     	;# 
  1040  0E12                     	;# 
  1041  0E13                     	;# 
  1042  0E14                     	;# 
  1043  0E15                     	;# 
  1044  0E16                     	;# 
  1045  0E17                     	;# 
  1046  0E18                     	;# 
  1047  0E19                     	;# 
  1048  0E1A                     	;# 
  1049  0E1B                     	;# 
  1050  0E1C                     	;# 
  1051  0E1D                     	;# 
  1052  0E1E                     	;# 
  1053  0E1F                     	;# 
  1054  0E20                     	;# 
  1055  0E21                     	;# 
  1056  0E22                     	;# 
  1057  0E24                     	;# 
  1058  0E25                     	;# 
  1059  0E28                     	;# 
  1060  0E29                     	;# 
  1061  0E2A                     	;# 
  1062  0E2B                     	;# 
  1063  0E2C                     	;# 
  1064  0E2D                     	;# 
  1065  0E2E                     	;# 
  1066  0E2F                     	;# 
  1067  0E90                     	;# 
  1068  0E91                     	;# 
  1069  0E92                     	;# 
  1070  0E94                     	;# 
  1071  0E95                     	;# 
  1072  0EA0                     	;# 
  1073  0EA1                     	;# 
  1074  0EA2                     	;# 
  1075  0EA3                     	;# 
  1076  0EA4                     	;# 
  1077  0EA5                     	;# 
  1078  0F0F                     	;# 
  1079  0F10                     	;# 
  1080  0F11                     	;# 
  1081  0F12                     	;# 
  1082  0F13                     	;# 
  1083  0F14                     	;# 
  1084  0F15                     	;# 
  1085  0F16                     	;# 
  1086  0F17                     	;# 
  1087  0F18                     	;# 
  1088  0F19                     	;# 
  1089  0F1A                     	;# 
  1090  0F1B                     	;# 
  1091  0F1C                     	;# 
  1092  0F1D                     	;# 
  1093  0F1E                     	;# 
  1094  0F1F                     	;# 
  1095  0F20                     	;# 
  1096  0F21                     	;# 
  1097  0F22                     	;# 
  1098  0F23                     	;# 
  1099  0F24                     	;# 
  1100  0F25                     	;# 
  1101  0F26                     	;# 
  1102  0F27                     	;# 
  1103  0F28                     	;# 
  1104  0F29                     	;# 
  1105  0F2A                     	;# 
  1106  0F2B                     	;# 
  1107  0F2C                     	;# 
  1108  0F2D                     	;# 
  1109  0F2E                     	;# 
  1110  0F2F                     	;# 
  1111  0F30                     	;# 
  1112  0F31                     	;# 
  1113  0F32                     	;# 
  1114  0F33                     	;# 
  1115  0F34                     	;# 
  1116  0F35                     	;# 
  1117  0F36                     	;# 
  1118  0F37                     	;# 
  1119  0FE4                     	;# 
  1120  0FE5                     	;# 
  1121  0FE6                     	;# 
  1122  0FE7                     	;# 
  1123  0FE8                     	;# 
  1124  0FE9                     	;# 
  1125  0FEA                     	;# 
  1126  0FEB                     	;# 
  1127  0FED                     	;# 
  1128  0FEE                     	;# 
  1129  0FEF                     	;# 
  1130  0000                     	;# 
  1131  0001                     	;# 
  1132  0002                     	;# 
  1133  0003                     	;# 
  1134  0004                     	;# 
  1135  0005                     	;# 
  1136  0006                     	;# 
  1137  0007                     	;# 
  1138  0008                     	;# 
  1139  0009                     	;# 
  1140  000A                     	;# 
  1141  000B                     	;# 
  1142  000C                     	;# 
  1143  000E                     	;# 
  1144  0010                     	;# 
  1145  0011                     	;# 
  1146  0012                     	;# 
  1147  0013                     	;# 
  1148  0014                     	;# 
  1149  0015                     	;# 
  1150  0015                     	;# 
  1151  0016                     	;# 
  1152  0016                     	;# 
  1153  0017                     	;# 
  1154  0018                     	;# 
  1155  0019                     	;# 
  1156  0019                     	;# 
  1157  001A                     	;# 
  1158  001B                     	;# 
  1159  001C                     	;# 
  1160  001D                     	;# 
  1161  001E                     	;# 
  1162  001F                     	;# 
  1163  008C                     	;# 
  1164  008E                     	;# 
  1165  0090                     	;# 
  1166  0091                     	;# 
  1167  0092                     	;# 
  1168  0093                     	;# 
  1169  0094                     	;# 
  1170  0097                     	;# 
  1171  009B                     	;# 
  1172  009B                     	;# 
  1173  009C                     	;# 
  1174  009D                     	;# 
  1175  009E                     	;# 
  1176  009F                     	;# 
  1177  010C                     	;# 
  1178  010E                     	;# 
  1179  0111                     	;# 
  1180  0112                     	;# 
  1181  0113                     	;# 
  1182  0114                     	;# 
  1183  0115                     	;# 
  1184  0116                     	;# 
  1185  0117                     	;# 
  1186  0118                     	;# 
  1187  0119                     	;# 
  1188  018C                     	;# 
  1189  018E                     	;# 
  1190  0199                     	;# 
  1191  0199                     	;# 
  1192  0199                     	;# 
  1193  019A                     	;# 
  1194  019A                     	;# 
  1195  019A                     	;# 
  1196  019B                     	;# 
  1197  019B                     	;# 
  1198  019B                     	;# 
  1199  019B                     	;# 
  1200  019B                     	;# 
  1201  019C                     	;# 
  1202  019C                     	;# 
  1203  019C                     	;# 
  1204  019D                     	;# 
  1205  019D                     	;# 
  1206  019D                     	;# 
  1207  019E                     	;# 
  1208  019E                     	;# 
  1209  019E                     	;# 
  1210  019F                     	;# 
  1211  019F                     	;# 
  1212  019F                     	;# 
  1213  019F                     	;# 
  1214  019F                     	;# 
  1215  020C                     	;# 
  1216  020E                     	;# 
  1217  0211                     	;# 
  1218  0211                     	;# 
  1219  0212                     	;# 
  1220  0212                     	;# 
  1221  0213                     	;# 
  1222  0213                     	;# 
  1223  0214                     	;# 
  1224  0214                     	;# 
  1225  0215                     	;# 
  1226  0215                     	;# 
  1227  0215                     	;# 
  1228  0215                     	;# 
  1229  0216                     	;# 
  1230  0216                     	;# 
  1231  0217                     	;# 
  1232  0217                     	;# 
  1233  0219                     	;# 
  1234  021A                     	;# 
  1235  021B                     	;# 
  1236  021C                     	;# 
  1237  021D                     	;# 
  1238  021D                     	;# 
  1239  021E                     	;# 
  1240  021F                     	;# 
  1241  028C                     	;# 
  1242  028E                     	;# 
  1243  0291                     	;# 
  1244  0291                     	;# 
  1245  0292                     	;# 
  1246  0293                     	;# 
  1247  0294                     	;# 
  1248  0295                     	;# 
  1249  0295                     	;# 
  1250  0296                     	;# 
  1251  0297                     	;# 
  1252  0298                     	;# 
  1253  029F                     	;# 
  1254  030C                     	;# 
  1255  030E                     	;# 
  1256  0311                     	;# 
  1257  0311                     	;# 
  1258  0312                     	;# 
  1259  0313                     	;# 
  1260  0314                     	;# 
  1261  0315                     	;# 
  1262  0315                     	;# 
  1263  0316                     	;# 
  1264  0317                     	;# 
  1265  0318                     	;# 
  1266  038C                     	;# 
  1267  038E                     	;# 
  1268  0391                     	;# 
  1269  0392                     	;# 
  1270  0393                     	;# 
  1271  0397                     	;# 
  1272  0398                     	;# 
  1273  0399                     	;# 
  1274  039A                     	;# 
  1275  039C                     	;# 
  1276  039D                     	;# 
  1277  039E                     	;# 
  1278  039F                     	;# 
  1279  0411                     	;# 
  1280  0411                     	;# 
  1281  0412                     	;# 
  1282  0413                     	;# 
  1283  0414                     	;# 
  1284  0415                     	;# 
  1285  0416                     	;# 
  1286  0417                     	;# 
  1287  0418                     	;# 
  1288  0418                     	;# 
  1289  0419                     	;# 
  1290  041A                     	;# 
  1291  041B                     	;# 
  1292  041C                     	;# 
  1293  041D                     	;# 
  1294  041E                     	;# 
  1295  041F                     	;# 
  1296  0498                     	;# 
  1297  0498                     	;# 
  1298  0499                     	;# 
  1299  049A                     	;# 
  1300  049B                     	;# 
  1301  049B                     	;# 
  1302  049C                     	;# 
  1303  049D                     	;# 
  1304  049E                     	;# 
  1305  049F                     	;# 
  1306  0617                     	;# 
  1307  0618                     	;# 
  1308  0619                     	;# 
  1309  0619                     	;# 
  1310  061A                     	;# 
  1311  061B                     	;# 
  1312  061C                     	;# 
  1313  061C                     	;# 
  1314  061F                     	;# 
  1315  0691                     	;# 
  1316  0692                     	;# 
  1317  0693                     	;# 
  1318  0694                     	;# 
  1319  0695                     	;# 
  1320  0696                     	;# 
  1321  0697                     	;# 
  1322  0698                     	;# 
  1323  0699                     	;# 
  1324  0711                     	;# 
  1325  0712                     	;# 
  1326  0713                     	;# 
  1327  0714                     	;# 
  1328  0715                     	;# 
  1329  0716                     	;# 
  1330  0717                     	;# 
  1331  0718                     	;# 
  1332  0719                     	;# 
  1333  0891                     	;# 
  1334  0891                     	;# 
  1335  0891                     	;# 
  1336  0891                     	;# 
  1337  0891                     	;# 
  1338  0891                     	;# 
  1339  0892                     	;# 
  1340  0892                     	;# 
  1341  0892                     	;# 
  1342  0893                     	;# 
  1343  0893                     	;# 
  1344  0893                     	;# 
  1345  0893                     	;# 
  1346  0893                     	;# 
  1347  0893                     	;# 
  1348  0894                     	;# 
  1349  0894                     	;# 
  1350  0894                     	;# 
  1351  0895                     	;# 
  1352  0895                     	;# 
  1353  0895                     	;# 
  1354  0896                     	;# 
  1355  0896                     	;# 
  1356  0896                     	;# 
  1357  089B                     	;# 
  1358  0911                     	;# 
  1359  0912                     	;# 
  1360  0913                     	;# 
  1361  0914                     	;# 
  1362  0915                     	;# 
  1363  0916                     	;# 
  1364  0918                     	;# 
  1365  0919                     	;# 
  1366  091A                     	;# 
  1367  091B                     	;# 
  1368  091C                     	;# 
  1369  091D                     	;# 
  1370  091E                     	;# 
  1371  091F                     	;# 
  1372  0E0F                     	;# 
  1373  0E10                     	;# 
  1374  0E11                     	;# 
  1375  0E12                     	;# 
  1376  0E13                     	;# 
  1377  0E14                     	;# 
  1378  0E15                     	;# 
  1379  0E16                     	;# 
  1380  0E17                     	;# 
  1381  0E18                     	;# 
  1382  0E19                     	;# 
  1383  0E1A                     	;# 
  1384  0E1B                     	;# 
  1385  0E1C                     	;# 
  1386  0E1D                     	;# 
  1387  0E1E                     	;# 
  1388  0E1F                     	;# 
  1389  0E20                     	;# 
  1390  0E21                     	;# 
  1391  0E22                     	;# 
  1392  0E24                     	;# 
  1393  0E25                     	;# 
  1394  0E28                     	;# 
  1395  0E29                     	;# 
  1396  0E2A                     	;# 
  1397  0E2B                     	;# 
  1398  0E2C                     	;# 
  1399  0E2D                     	;# 
  1400  0E2E                     	;# 
  1401  0E2F                     	;# 
  1402  0E90                     	;# 
  1403  0E91                     	;# 
  1404  0E92                     	;# 
  1405  0E94                     	;# 
  1406  0E95                     	;# 
  1407  0EA0                     	;# 
  1408  0EA1                     	;# 
  1409  0EA2                     	;# 
  1410  0EA3                     	;# 
  1411  0EA4                     	;# 
  1412  0EA5                     	;# 
  1413  0F0F                     	;# 
  1414  0F10                     	;# 
  1415  0F11                     	;# 
  1416  0F12                     	;# 
  1417  0F13                     	;# 
  1418  0F14                     	;# 
  1419  0F15                     	;# 
  1420  0F16                     	;# 
  1421  0F17                     	;# 
  1422  0F18                     	;# 
  1423  0F19                     	;# 
  1424  0F1A                     	;# 
  1425  0F1B                     	;# 
  1426  0F1C                     	;# 
  1427  0F1D                     	;# 
  1428  0F1E                     	;# 
  1429  0F1F                     	;# 
  1430  0F20                     	;# 
  1431  0F21                     	;# 
  1432  0F22                     	;# 
  1433  0F23                     	;# 
  1434  0F24                     	;# 
  1435  0F25                     	;# 
  1436  0F26                     	;# 
  1437  0F27                     	;# 
  1438  0F28                     	;# 
  1439  0F29                     	;# 
  1440  0F2A                     	;# 
  1441  0F2B                     	;# 
  1442  0F2C                     	;# 
  1443  0F2D                     	;# 
  1444  0F2E                     	;# 
  1445  0F2F                     	;# 
  1446  0F30                     	;# 
  1447  0F31                     	;# 
  1448  0F32                     	;# 
  1449  0F33                     	;# 
  1450  0F34                     	;# 
  1451  0F35                     	;# 
  1452  0F36                     	;# 
  1453  0F37                     	;# 
  1454  0FE4                     	;# 
  1455  0FE5                     	;# 
  1456  0FE6                     	;# 
  1457  0FE7                     	;# 
  1458  0FE8                     	;# 
  1459  0FE9                     	;# 
  1460  0FEA                     	;# 
  1461  0FEB                     	;# 
  1462  0FED                     	;# 
  1463  0FEE                     	;# 
  1464  0FEF                     	;# 
  1465  0000                     	;# 
  1466  0001                     	;# 
  1467  0002                     	;# 
  1468  0003                     	;# 
  1469  0004                     	;# 
  1470  0005                     	;# 
  1471  0006                     	;# 
  1472  0007                     	;# 
  1473  0008                     	;# 
  1474  0009                     	;# 
  1475  000A                     	;# 
  1476  000B                     	;# 
  1477  000C                     	;# 
  1478  000E                     	;# 
  1479  0010                     	;# 
  1480  0011                     	;# 
  1481  0012                     	;# 
  1482  0013                     	;# 
  1483  0014                     	;# 
  1484  0015                     	;# 
  1485  0015                     	;# 
  1486  0016                     	;# 
  1487  0016                     	;# 
  1488  0017                     	;# 
  1489  0018                     	;# 
  1490  0019                     	;# 
  1491  0019                     	;# 
  1492  001A                     	;# 
  1493  001B                     	;# 
  1494  001C                     	;# 
  1495  001D                     	;# 
  1496  001E                     	;# 
  1497  001F                     	;# 
  1498  008C                     	;# 
  1499  008E                     	;# 
  1500  0090                     	;# 
  1501  0091                     	;# 
  1502  0092                     	;# 
  1503  0093                     	;# 
  1504  0094                     	;# 
  1505  0097                     	;# 
  1506  009B                     	;# 
  1507  009B                     	;# 
  1508  009C                     	;# 
  1509  009D                     	;# 
  1510  009E                     	;# 
  1511  009F                     	;# 
  1512  010C                     	;# 
  1513  010E                     	;# 
  1514  0111                     	;# 
  1515  0112                     	;# 
  1516  0113                     	;# 
  1517  0114                     	;# 
  1518  0115                     	;# 
  1519  0116                     	;# 
  1520  0117                     	;# 
  1521  0118                     	;# 
  1522  0119                     	;# 
  1523  018C                     	;# 
  1524  018E                     	;# 
  1525  0199                     	;# 
  1526  0199                     	;# 
  1527  0199                     	;# 
  1528  019A                     	;# 
  1529  019A                     	;# 
  1530  019A                     	;# 
  1531  019B                     	;# 
  1532  019B                     	;# 
  1533  019B                     	;# 
  1534  019B                     	;# 
  1535  019B                     	;# 
  1536  019C                     	;# 
  1537  019C                     	;# 
  1538  019C                     	;# 
  1539  019D                     	;# 
  1540  019D                     	;# 
  1541  019D                     	;# 
  1542  019E                     	;# 
  1543  019E                     	;# 
  1544  019E                     	;# 
  1545  019F                     	;# 
  1546  019F                     	;# 
  1547  019F                     	;# 
  1548  019F                     	;# 
  1549  019F                     	;# 
  1550  020C                     	;# 
  1551  020E                     	;# 
  1552  0211                     	;# 
  1553  0211                     	;# 
  1554  0212                     	;# 
  1555  0212                     	;# 
  1556  0213                     	;# 
  1557  0213                     	;# 
  1558  0214                     	;# 
  1559  0214                     	;# 
  1560  0215                     	;# 
  1561  0215                     	;# 
  1562  0215                     	;# 
  1563  0215                     	;# 
  1564  0216                     	;# 
  1565  0216                     	;# 
  1566  0217                     	;# 
  1567  0217                     	;# 
  1568  0219                     	;# 
  1569  021A                     	;# 
  1570  021B                     	;# 
  1571  021C                     	;# 
  1572  021D                     	;# 
  1573  021D                     	;# 
  1574  021E                     	;# 
  1575  021F                     	;# 
  1576  028C                     	;# 
  1577  028E                     	;# 
  1578  0291                     	;# 
  1579  0291                     	;# 
  1580  0292                     	;# 
  1581  0293                     	;# 
  1582  0294                     	;# 
  1583  0295                     	;# 
  1584  0295                     	;# 
  1585  0296                     	;# 
  1586  0297                     	;# 
  1587  0298                     	;# 
  1588  029F                     	;# 
  1589  030C                     	;# 
  1590  030E                     	;# 
  1591  0311                     	;# 
  1592  0311                     	;# 
  1593  0312                     	;# 
  1594  0313                     	;# 
  1595  0314                     	;# 
  1596  0315                     	;# 
  1597  0315                     	;# 
  1598  0316                     	;# 
  1599  0317                     	;# 
  1600  0318                     	;# 
  1601  038C                     	;# 
  1602  038E                     	;# 
  1603  0391                     	;# 
  1604  0392                     	;# 
  1605  0393                     	;# 
  1606  0397                     	;# 
  1607  0398                     	;# 
  1608  0399                     	;# 
  1609  039A                     	;# 
  1610  039C                     	;# 
  1611  039D                     	;# 
  1612  039E                     	;# 
  1613  039F                     	;# 
  1614  0411                     	;# 
  1615  0411                     	;# 
  1616  0412                     	;# 
  1617  0413                     	;# 
  1618  0414                     	;# 
  1619  0415                     	;# 
  1620  0416                     	;# 
  1621  0417                     	;# 
  1622  0418                     	;# 
  1623  0418                     	;# 
  1624  0419                     	;# 
  1625  041A                     	;# 
  1626  041B                     	;# 
  1627  041C                     	;# 
  1628  041D                     	;# 
  1629  041E                     	;# 
  1630  041F                     	;# 
  1631  0498                     	;# 
  1632  0498                     	;# 
  1633  0499                     	;# 
  1634  049A                     	;# 
  1635  049B                     	;# 
  1636  049B                     	;# 
  1637  049C                     	;# 
  1638  049D                     	;# 
  1639  049E                     	;# 
  1640  049F                     	;# 
  1641  0617                     	;# 
  1642  0618                     	;# 
  1643  0619                     	;# 
  1644  0619                     	;# 
  1645  061A                     	;# 
  1646  061B                     	;# 
  1647  061C                     	;# 
  1648  061C                     	;# 
  1649  061F                     	;# 
  1650  0691                     	;# 
  1651  0692                     	;# 
  1652  0693                     	;# 
  1653  0694                     	;# 
  1654  0695                     	;# 
  1655  0696                     	;# 
  1656  0697                     	;# 
  1657  0698                     	;# 
  1658  0699                     	;# 
  1659  0711                     	;# 
  1660  0712                     	;# 
  1661  0713                     	;# 
  1662  0714                     	;# 
  1663  0715                     	;# 
  1664  0716                     	;# 
  1665  0717                     	;# 
  1666  0718                     	;# 
  1667  0719                     	;# 
  1668  0891                     	;# 
  1669  0891                     	;# 
  1670  0891                     	;# 
  1671  0891                     	;# 
  1672  0891                     	;# 
  1673  0891                     	;# 
  1674  0892                     	;# 
  1675  0892                     	;# 
  1676  0892                     	;# 
  1677  0893                     	;# 
  1678  0893                     	;# 
  1679  0893                     	;# 
  1680  0893                     	;# 
  1681  0893                     	;# 
  1682  0893                     	;# 
  1683  0894                     	;# 
  1684  0894                     	;# 
  1685  0894                     	;# 
  1686  0895                     	;# 
  1687  0895                     	;# 
  1688  0895                     	;# 
  1689  0896                     	;# 
  1690  0896                     	;# 
  1691  0896                     	;# 
  1692  089B                     	;# 
  1693  0911                     	;# 
  1694  0912                     	;# 
  1695  0913                     	;# 
  1696  0914                     	;# 
  1697  0915                     	;# 
  1698  0916                     	;# 
  1699  0918                     	;# 
  1700  0919                     	;# 
  1701  091A                     	;# 
  1702  091B                     	;# 
  1703  091C                     	;# 
  1704  091D                     	;# 
  1705  091E                     	;# 
  1706  091F                     	;# 
  1707  0E0F                     	;# 
  1708  0E10                     	;# 
  1709  0E11                     	;# 
  1710  0E12                     	;# 
  1711  0E13                     	;# 
  1712  0E14                     	;# 
  1713  0E15                     	;# 
  1714  0E16                     	;# 
  1715  0E17                     	;# 
  1716  0E18                     	;# 
  1717  0E19                     	;# 
  1718  0E1A                     	;# 
  1719  0E1B                     	;# 
  1720  0E1C                     	;# 
  1721  0E1D                     	;# 
  1722  0E1E                     	;# 
  1723  0E1F                     	;# 
  1724  0E20                     	;# 
  1725  0E21                     	;# 
  1726  0E22                     	;# 
  1727  0E24                     	;# 
  1728  0E25                     	;# 
  1729  0E28                     	;# 
  1730  0E29                     	;# 
  1731  0E2A                     	;# 
  1732  0E2B                     	;# 
  1733  0E2C                     	;# 
  1734  0E2D                     	;# 
  1735  0E2E                     	;# 
  1736  0E2F                     	;# 
  1737  0E90                     	;# 
  1738  0E91                     	;# 
  1739  0E92                     	;# 
  1740  0E94                     	;# 
  1741  0E95                     	;# 
  1742  0EA0                     	;# 
  1743  0EA1                     	;# 
  1744  0EA2                     	;# 
  1745  0EA3                     	;# 
  1746  0EA4                     	;# 
  1747  0EA5                     	;# 
  1748  0F0F                     	;# 
  1749  0F10                     	;# 
  1750  0F11                     	;# 
  1751  0F12                     	;# 
  1752  0F13                     	;# 
  1753  0F14                     	;# 
  1754  0F15                     	;# 
  1755  0F16                     	;# 
  1756  0F17                     	;# 
  1757  0F18                     	;# 
  1758  0F19                     	;# 
  1759  0F1A                     	;# 
  1760  0F1B                     	;# 
  1761  0F1C                     	;# 
  1762  0F1D                     	;# 
  1763  0F1E                     	;# 
  1764  0F1F                     	;# 
  1765  0F20                     	;# 
  1766  0F21                     	;# 
  1767  0F22                     	;# 
  1768  0F23                     	;# 
  1769  0F24                     	;# 
  1770  0F25                     	;# 
  1771  0F26                     	;# 
  1772  0F27                     	;# 
  1773  0F28                     	;# 
  1774  0F29                     	;# 
  1775  0F2A                     	;# 
  1776  0F2B                     	;# 
  1777  0F2C                     	;# 
  1778  0F2D                     	;# 
  1779  0F2E                     	;# 
  1780  0F2F                     	;# 
  1781  0F30                     	;# 
  1782  0F31                     	;# 
  1783  0F32                     	;# 
  1784  0F33                     	;# 
  1785  0F34                     	;# 
  1786  0F35                     	;# 
  1787  0F36                     	;# 
  1788  0F37                     	;# 
  1789  0FE4                     	;# 
  1790  0FE5                     	;# 
  1791  0FE6                     	;# 
  1792  0FE7                     	;# 
  1793  0FE8                     	;# 
  1794  0FE9                     	;# 
  1795  0FEA                     	;# 
  1796  0FEB                     	;# 
  1797  0FED                     	;# 
  1798  0FEE                     	;# 
  1799  0FEF                     	;# 
  1800                           
  1801                           	psect	idataBANK1
  1802  0800                     __pidataBANK1:	
  1803                           
  1804                           ;initializer for _romData
  1805  0800  34C1               	retlw	low (_romDataMap| (0+256))
  1806                           
  1807                           	psect	stringtext1
  1808  1000                     __pstringtext1:	
  1809  1000                     _dpowers:	
  1810  1000  3401               	retlw	1
  1811  1001  3400               	retlw	0
  1812  1002  3400               	retlw	0
  1813  1003  3400               	retlw	0
  1814  1004  340A               	retlw	10
  1815  1005  3400               	retlw	0
  1816  1006  3400               	retlw	0
  1817  1007  3400               	retlw	0
  1818  1008  3464               	retlw	100
  1819  1009  3400               	retlw	0
  1820  100A  3400               	retlw	0
  1821  100B  3400               	retlw	0
  1822  100C  34E8               	retlw	232
  1823  100D  3403               	retlw	3
  1824  100E  3400               	retlw	0
  1825  100F  3400               	retlw	0
  1826  1010  3410               	retlw	16
  1827  1011  3427               	retlw	39
  1828  1012  3400               	retlw	0
  1829  1013  3400               	retlw	0
  1830  1014  34A0               	retlw	160
  1831  1015  3486               	retlw	134
  1832  1016  3401               	retlw	1
  1833  1017  3400               	retlw	0
  1834  1018  3440               	retlw	64
  1835  1019  3442               	retlw	66
  1836  101A  340F               	retlw	15
  1837  101B  3400               	retlw	0
  1838  101C  3480               	retlw	128
  1839  101D  3496               	retlw	150
  1840  101E  3498               	retlw	152
  1841  101F  3400               	retlw	0
  1842  1020  3400               	retlw	0
  1843  1021  34E1               	retlw	225
  1844  1022  34F5               	retlw	245
  1845  1023  3405               	retlw	5
  1846  1024  3400               	retlw	0
  1847  1025  34CA               	retlw	202
  1848  1026  349A               	retlw	154
  1849  1027  343B               	retlw	59
  1850  1028                     __end_of_dpowers:	
  1851                           
  1852                           	psect	stringtext2
  1853  1819                     __pstringtext2:	
  1854  1819                     _n_ADDRESS_P0:	
  1855  1819  34AD               	retlw	173
  1856  181A  3487               	retlw	135
  1857  181B  3466               	retlw	102
  1858  181C  34BC               	retlw	188
  1859  181D  34BB               	retlw	187
  1860  181E                     __end_of_n_ADDRESS_P0:	
  1861                           
  1862                           	psect	stringtext3
  1863  1800                     __pstringtext3:	
  1864  1800                     _n_ADDRESS_MUL:	
  1865  1800  3421               	retlw	33
  1866  1801                     __end_of_n_ADDRESS_MUL:	
  1867  000B                     _INTCONbits	set	11
  1868  0003                     _STATUS	set	3
  1869  0010                     _PIR0bits	set	16
  1870  000E                     _PORTCbits	set	14
  1871  000C                     _PORTAbits	set	12
  1872  009E                     _ADCON1bits	set	158
  1873  009C                     _ADRESH	set	156
  1874  009B                     _ADRESL	set	155
  1875  009D                     _ADCON0bits	set	157
  1876  0097                     _WDTCONbits	set	151
  1877  0090                     _PIE0bits	set	144
  1878  008E                     _TRISCbits	set	142
  1879  008C                     _TRISAbits	set	140
  1880  0117                     _FVRCONbits	set	279
  1881  018E                     _ANSELCbits	set	398
  1882  018C                     _ANSELAbits	set	396
  1883  018E                     _ANSELC	set	398
  1884  018C                     _ANSELA	set	396
  1885  020C                     _WPUAbits	set	524
  1886  020E                     _WPUC	set	526
  1887  020C                     _WPUA	set	524
  1888  0211                     _SSP1BUF	set	529
  1889  0214                     _SSP1STATbits	set	532
  1890  0215                     _SSP1CON1bits	set	533
  1891  028C                     _ODCONAbits	set	652
  1892  028E                     _ODCONC	set	654
  1893  028C                     _ODCONA	set	652
  1894  038E                     _INLVLC	set	910
  1895  038C                     _INLVLA	set	908
  1896  0919                     _OSCCON1bits	set	2329
  1897  0EA0                     _RC0PPSbits	set	3744
  1898  0EA2                     _RC2PPSbits	set	3746
  1899  0EA1                     _RC1PPSbits	set	3745
  1900  1801                     STR_10:	
  1901  1801  3425               	retlw	37	;'%'
  1902  1802  346C               	retlw	108	;'l'
  1903  1803  3475               	retlw	117	;'u'
  1904  1804  342E               	retlw	46	;'.'
  1905  1805  3425               	retlw	37	;'%'
  1906  1806  3436               	retlw	54	;'6'
  1907  1807  342E               	retlw	46	;'.'
  1908  1808  3436               	retlw	54	;'6'
  1909  1809  346C               	retlw	108	;'l'
  1910  180A  3475               	retlw	117	;'u'
  1911  180B  3400               	retlw	0
  1912                           
  1913                           	psect	stringtext4
  1914  180C                     __pstringtext4:	
  1915  180C                     STR_6:	
  1916  180C  3441               	retlw	65	;'A'
  1917  180D  344E               	retlw	78	;'N'
  1918  180E  3443               	retlw	67	;'C'
  1919  180F  3433               	retlw	51	;'3'
  1920  1810  346D               	retlw	109	;'m'
  1921  1811  3456               	retlw	86	;'V'
  1922  1812  3400               	retlw	0
  1923                           
  1924                           	psect	stringtext5
  1925  1813                     __pstringtext5:	
  1926  1813                     STR_7:	
  1927  1813  3452               	retlw	82	;'R'
  1928  1814  3446               	retlw	70	;'F'
  1929  1815  3450               	retlw	80	;'P'
  1930  1816  3457               	retlw	87	;'W'
  1931  1817  3452               	retlw	82	;'R'
  1932  1818  3400               	retlw	0
  1933                           
  1934                           	psect	stringtext6
  1935  181E                     __pstringtext6:	
  1936  181E                     STR_4:	
  1937  181E  3454               	retlw	84	;'T'
  1938  181F  3445               	retlw	69	;'E'
  1939  1820  344D               	retlw	77	;'M'
  1940  1821  3450               	retlw	80	;'P'
  1941  1822  3400               	retlw	0
  1942                           
  1943                           	psect	stringtext7
  1944  1823                     __pstringtext7:	
  1945  1823                     STR_5:	
  1946  1823  3456               	retlw	86	;'V'
  1947  1824  3442               	retlw	66	;'B'
  1948  1825  3441               	retlw	65	;'A'
  1949  1826  3454               	retlw	84	;'T'
  1950  1827  3400               	retlw	0
  1951                           
  1952                           	psect	stringtext8
  1953  1828                     __pstringtext8:	
  1954  1828                     STR_9:	
  1955  1828  3442               	retlw	66	;'B'
  1956  1829  344F               	retlw	79	;'O'
  1957  182A  344F               	retlw	79	;'O'
  1958  182B  3454               	retlw	84	;'T'
  1959  182C  3400               	retlw	0
  1960                           
  1961                           	psect	stringtext9
  1962  182D                     __pstringtext9:	
  1963  182D                     STR_8:	
  1964  182D  3455               	retlw	85	;'U'
  1965  182E  3448               	retlw	72	;'H'
  1966  182F  3431               	retlw	49	;'1'
  1967  1830  3400               	retlw	0
  1968                           
  1969                           	psect	stringtext10
  1970  1831                     __pstringtext10:	
  1971  1831                     STR_3:	
  1972  1831  3444               	retlw	68	;'D'
  1973  1832  3442               	retlw	66	;'B'
  1974  1833  3447               	retlw	71	;'G'
  1975  1834  3400               	retlw	0
  1976                           
  1977                           	psect	stringtext11
  1978  1835                     __pstringtext11:	
  1979  1835                     STR_1:	
  1980  1835  342F               	retlw	47	;'/'
  1981  1836  3400               	retlw	0
  1982                           
  1983                           	psect	stringtext12
  1984  0000                     __pstringtext12:	
  1985  1835                     
  1986                           ; #config settings
  1987  0000                     
  1988                           	psect	cinit
  1989  0011                     start_initialization:	
  1990  0011                     __initialization:	
  1991                           
  1992                           ; Initialize objects allocated to BANK1
  1993  0011  0021               	movlb	1	; select bank1
  1994  0012  3188  2000  3180   	fcall	__pidataBANK1	;fetch initializer
  1995  0015  00EB               	movwf	__pdataBANK1& (0+127)
  1996                           
  1997                           ; Clear objects allocated to COMMON
  1998  0016  01FD               	clrf	__pbssCOMMON& (0+127)
  1999                           
  2000                           ; Clear objects allocated to BANK1
  2001  0017  01E8               	clrf	__pbssBANK1& (0+127)
  2002  0018  01E9               	clrf	(__pbssBANK1+1)& (0+127)
  2003  0019  01EA               	clrf	(__pbssBANK1+2)& (0+127)
  2004                           
  2005                           ; Clear objects allocated to BANK2
  2006  001A  3050               	movlw	low __pbssBANK2
  2007  001B  0084               	movwf	4
  2008  001C  3001               	movlw	high __pbssBANK2
  2009  001D  0085               	movwf	5
  2010  001E  3014               	movlw	20
  2011  001F  3196  2677  3180   	fcall	clear_ram0
  2012                           
  2013                           ; Clear objects allocated to BANK3
  2014  0022  30A0               	movlw	low __pbssBANK3
  2015  0023  0084               	movwf	4
  2016  0024  3001               	movlw	high __pbssBANK3
  2017  0025  0085               	movwf	5
  2018  0026  303D               	movlw	61
  2019  0027  3196  2677         	fcall	clear_ram0
  2020  0029                     end_of_initialization:	
  2021                           ;End of C runtime variable initialization code
  2022                           
  2023  0029                     __end_of__initialization:	
  2024  0029  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  2025  002A  0020               	movlb	0
  2026  002B  318D  2DFE         	ljmp	_main	;jump to C main() function
  2027                           
  2028                           	psect	bssCOMMON
  2029  007D                     __pbssCOMMON:	
  2030  007D                     _nrf24l01:	
  2031  007D                     	ds	1
  2032                           
  2033                           	psect	bssBANK1
  2034  00E8                     __pbssBANK1:	
  2035  00E8                     _TXPacket:	
  2036  00E8                     	ds	2
  2037  00EA                     _sleepLoop:	
  2038  00EA                     	ds	1
  2039                           
  2040                           	psect	dataBANK1
  2041  00EB                     __pdataBANK1:	
  2042  00EB                     _romData:	
  2043  00EB                     	ds	1
  2044                           
  2045                           	psect	bssBANK2
  2046  0150                     __pbssBANK2:	
  2047  0150                     _counter:	
  2048  0150                     	ds	3
  2049  0153                     ftoa@buf:	
  2050  0153                     	ds	17
  2051                           
  2052                           	psect	bssBANK3
  2053  01A0                     __pbssBANK3:	
  2054  01A0                     _RXPacket:	
  2055  01A0                     	ds	33
  2056  01C1                     _romDataMap:	
  2057  01C1                     	ds	28
  2058                           
  2059                           	psect	clrtext
  2060  1677                     clear_ram0:	
  2061                           ;	Called with FSR0 containing the base address, and
  2062                           ;	WREG with the size to clear
  2063                           
  2064  1677  0064               	clrwdt	;clear the watchdog before getting into this loop
  2065  1678                     clrloop0:	
  2066  1678  0180               	clrf	0	;clear RAM location pointed to by FSR
  2067  1679  3101               	addfsr 0,1
  2068  167A  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  2069  167B  2E78               	goto	clrloop0	;have we reached the end yet?
  2070  167C  3400               	retlw	0	;all done for this memory range, return
  2071                           
  2072                           	psect	cstackBANK2
  2073  0120                     __pcstackBANK2:	
  2074  0120                     loop@vt:	
  2075                           
  2076                           ; 3 bytes @ 0x0
  2077  0120                     	ds	3
  2078  0123                     loop@ta:	
  2079                           
  2080                           ; 3 bytes @ 0x3
  2081  0123                     	ds	3
  2082  0126                     _loop$2063:	
  2083                           
  2084                           ; 3 bytes @ 0x6
  2085  0126                     	ds	3
  2086  0129                     _loop$2064:	
  2087                           
  2088                           ; 3 bytes @ 0x9
  2089  0129                     	ds	3
  2090  012C                     _loop$877:	
  2091                           
  2092                           ; 2 bytes @ 0xC
  2093  012C                     	ds	2
  2094  012E                     loop@rfSetup:	
  2095                           
  2096                           ; 1 bytes @ 0xE
  2097  012E                     	ds	1
  2098  012F                     loop@packet:	
  2099                           
  2100                           ; 33 bytes @ 0xF
  2101  012F                     	ds	33
  2102                           
  2103                           	psect	cstackBANK1
  2104  00A0                     __pcstackBANK1:	
  2105  00A0                     ___fttol@sign1:	
  2106                           
  2107                           ; 1 bytes @ 0x0
  2108  00A0                     	ds	1
  2109  00A1                     ___fttol@lval:	
  2110                           
  2111                           ; 4 bytes @ 0x1
  2112  00A1                     	ds	4
  2113  00A5                     ___fttol@exp1:	
  2114                           
  2115                           ; 1 bytes @ 0x5
  2116  00A5                     	ds	1
  2117  00A6                     ?_ftoa:	
  2118  00A6                     ftoa@f:	
  2119                           ; 1 bytes @ 0x6
  2120                           
  2121                           
  2122                           ; 3 bytes @ 0x6
  2123  00A6                     	ds	3
  2124  00A9                     ftoa@status:	
  2125                           
  2126                           ; 1 bytes @ 0x9
  2127  00A9                     	ds	1
  2128  00AA                     ftoa@rem:	
  2129                           
  2130                           ; 4 bytes @ 0xA
  2131  00AA                     	ds	4
  2132  00AE                     ftoa@l:	
  2133                           
  2134                           ; 4 bytes @ 0xE
  2135  00AE                     	ds	4
  2136  00B2                     ftoa@cp:	
  2137                           
  2138                           ; 1 bytes @ 0x12
  2139  00B2                     	ds	1
  2140  00B3                     ?_strcat:	
  2141  00B3                     strcat@to:	
  2142                           ; 2 bytes @ 0x13
  2143                           
  2144                           
  2145                           ; 2 bytes @ 0x13
  2146  00B3                     	ds	2
  2147  00B5                     strcat@from:	
  2148                           
  2149                           ; 2 bytes @ 0x15
  2150  00B5                     	ds	2
  2151  00B7                     strcat@cp:	
  2152                           
  2153                           ; 2 bytes @ 0x17
  2154  00B7                     	ds	2
  2155  00B9                     ?_setMessage:	
  2156  00B9                     setMessage@packet:	
  2157                           ; 1 bytes @ 0x19
  2158                           
  2159                           
  2160                           ; 2 bytes @ 0x19
  2161  00B9                     	ds	2
  2162  00BB                     setMessage@topic:	
  2163                           
  2164                           ; 2 bytes @ 0x1B
  2165  00BB                     	ds	2
  2166  00BD                     setMessage@value:	
  2167                           
  2168                           ; 3 bytes @ 0x1D
  2169  00BD                     	ds	3
  2170  00C0                     ??_setMessage:	
  2171                           
  2172                           ; 1 bytes @ 0x20
  2173  00C0                     	ds	1
  2174  00C1                     setMessage@status:	
  2175                           
  2176                           ; 2 bytes @ 0x21
  2177  00C1                     	ds	2
  2178  00C3                     ??_loop:	
  2179                           
  2180                           ; 1 bytes @ 0x23
  2181  00C3                     	ds	1
  2182  00C4                     ??_main:	
  2183                           
  2184                           ; 1 bytes @ 0x24
  2185  00C4                     	ds	1
  2186  00C5                     main@bootStatus:	
  2187                           
  2188                           ; 1 bytes @ 0x25
  2189  00C5                     	ds	1
  2190  00C6                     main@pipe:	
  2191                           
  2192                           ; 1 bytes @ 0x26
  2193  00C6                     	ds	1
  2194  00C7                     main@packet:	
  2195                           
  2196                           ; 33 bytes @ 0x27
  2197  00C7                     	ds	33
  2198                           
  2199                           	psect	cstackCOMMON
  2200  0070                     __pcstackCOMMON:	
  2201  0070                     ?_isdigit:	
  2202  0070                     ?_nrf24l01ISR:	
  2203                           ; 1 bit 
  2204                           
  2205  0070                     ?_nrf24l01GetRXPacket:	
  2206                           ; 1 bytes @ 0x0
  2207                           
  2208  0070                     ?_nrf24l01SendACK:	
  2209                           ; 1 bytes @ 0x0
  2210                           
  2211  0070                     ?_nrf24l01SetRXMode:	
  2212                           ; 1 bytes @ 0x0
  2213                           
  2214  0070                     ?_nrf24l01Init:	
  2215                           ; 1 bytes @ 0x0
  2216                           
  2217  0070                     ?_nrf24l01SetTXPipe:	
  2218                           ; 1 bytes @ 0x0
  2219                           
  2220  0070                     ?_nrf24l01SetRXPipe:	
  2221                           ; 1 bytes @ 0x0
  2222                           
  2223  0070                     ?_nrf24l01CELow:	
  2224                           ; 1 bytes @ 0x0
  2225                           
  2226  0070                     ??_nrf24l01CELow:	
  2227                           ; 1 bytes @ 0x0
  2228                           
  2229  0070                     ?_nrf24l01CEHigh:	
  2230                           ; 1 bytes @ 0x0
  2231                           
  2232  0070                     ??_nrf24l01CEHigh:	
  2233                           ; 1 bytes @ 0x0
  2234                           
  2235  0070                     ?_nrf24l01CSLow:	
  2236                           ; 1 bytes @ 0x0
  2237                           
  2238  0070                     ??_nrf24l01CSLow:	
  2239                           ; 1 bytes @ 0x0
  2240                           
  2241  0070                     ?_nrf24l01CSHigh:	
  2242                           ; 1 bytes @ 0x0
  2243                           
  2244  0070                     ??_nrf24l01CSHigh:	
  2245                           ; 1 bytes @ 0x0
  2246                           
  2247  0070                     ?_nrf24l01InterfaceInit:	
  2248                           ; 1 bytes @ 0x0
  2249                           
  2250  0070                     ?_nrf24l01SPISend:	
  2251                           ; 1 bytes @ 0x0
  2252                           
  2253  0070                     ??_nrf24l01SPISend:	
  2254                           ; 1 bytes @ 0x0
  2255                           
  2256  0070                     ?_nrf24l01SPIStart:	
  2257                           ; 1 bytes @ 0x0
  2258                           
  2259  0070                     ??_nrf24l01SPIStart:	
  2260                           ; 1 bytes @ 0x0
  2261                           
  2262  0070                     ?_nrf24l01SPIEnd:	
  2263                           ; 1 bytes @ 0x0
  2264                           
  2265  0070                     ??_nrf24l01SPIEnd:	
  2266                           ; 1 bytes @ 0x0
  2267                           
  2268  0070                     ?_enableInterrupts:	
  2269                           ; 1 bytes @ 0x0
  2270                           
  2271  0070                     ??_enableInterrupts:	
  2272                           ; 1 bytes @ 0x0
  2273                           
  2274  0070                     ?_exception:	
  2275                           ; 1 bytes @ 0x0
  2276                           
  2277  0070                     ??_exception:	
  2278                           ; 1 bytes @ 0x0
  2279                           
  2280  0070                     ?_ISR:	
  2281                           ; 1 bytes @ 0x0
  2282                           
  2283  0070                     ?_doWDTSleep:	
  2284                           ; 1 bytes @ 0x0
  2285                           
  2286  0070                     ?_handleRXData:	
  2287                           ; 1 bytes @ 0x0
  2288                           
  2289  0070                     ?_checkTXPower:	
  2290                           ; 1 bytes @ 0x0
  2291                           
  2292  0070                     ?_loop:	
  2293                           ; 1 bytes @ 0x0
  2294                           
  2295  0070                     ?_nrf24l01GetPipe:	
  2296                           ; 1 bytes @ 0x0
  2297                           
  2298  0070                     ?_main:	
  2299                           ; 1 bytes @ 0x0
  2300                           
  2301  0070                     ?_nrf24l01CheckACK:	
  2302                           ; 1 bytes @ 0x0
  2303                           
  2304  0070                     ?_nrf24l01ReceivePacket:	
  2305                           ; 1 bytes @ 0x0
  2306                           
  2307  0070                     ?_nrf24l01InitRegisters:	
  2308                           ; 1 bytes @ 0x0
  2309                           
  2310  0070                     ?i1_nrf24l01SetRXMode:	
  2311                           ; 1 bytes @ 0x0
  2312                           
  2313  0070                     ?i1_memset:	
  2314                           ; 1 bytes @ 0x0
  2315                           
  2316  0070                     ?_strcmp:	
  2317                           ; 1 bytes @ 0x0
  2318                           
  2319  0070                     nrf24l01SPISend@data:	
  2320                           ; 2 bytes @ 0x0
  2321                           
  2322  0070                     enableInterrupts@enable:	
  2323                           ; 1 bytes @ 0x0
  2324                           
  2325  0070                     exception@exception:	
  2326                           ; 1 bytes @ 0x0
  2327                           
  2328  0070                     strcmp@s1:	
  2329                           ; 1 bytes @ 0x0
  2330                           
  2331  0070                     i1memset@p1:	
  2332                           ; 2 bytes @ 0x0
  2333                           
  2334                           
  2335                           ; 2 bytes @ 0x0
  2336  0070                     	ds	1
  2337  0071                     ?i1_nrf24l01Send:	
  2338  0071                     i1nrf24l01Send@data:	
  2339                           ; 1 bytes @ 0x1
  2340                           
  2341                           
  2342                           ; 1 bytes @ 0x1
  2343  0071                     	ds	1
  2344  0072                     ??i1_nrf24l01Send:	
  2345  0072                     strcmp@s2:	
  2346                           ; 1 bytes @ 0x2
  2347                           
  2348  0072                     i1memset@c:	
  2349                           ; 1 bytes @ 0x2
  2350                           
  2351                           
  2352                           ; 2 bytes @ 0x2
  2353  0072                     	ds	1
  2354  0073                     ??_strcmp:	
  2355  0073                     i1nrf24l01Send@command:	
  2356                           ; 1 bytes @ 0x3
  2357                           
  2358                           
  2359                           ; 1 bytes @ 0x3
  2360  0073                     	ds	1
  2361  0074                     ??i1_nrf24l01SetRXMode:	
  2362  0074                     strcmp@r:	
  2363                           ; 1 bytes @ 0x4
  2364                           
  2365  0074                     i1memset@n:	
  2366                           ; 1 bytes @ 0x4
  2367                           
  2368                           
  2369                           ; 2 bytes @ 0x4
  2370  0074                     	ds	1
  2371  0075                     i1nrf24l01SetRXMode@config:	
  2372                           
  2373                           ; 1 bytes @ 0x5
  2374  0075                     	ds	1
  2375  0076                     ??i1_memset:	
  2376  0076                     i1nrf24l01SetRXMode@rxMode:	
  2377                           ; 1 bytes @ 0x6
  2378                           
  2379  0076                     i1memset@p:	
  2380                           ; 1 bytes @ 0x6
  2381                           
  2382                           
  2383                           ; 2 bytes @ 0x6
  2384  0076                     	ds	1
  2385  0077                     ??_nrf24l01CheckACK:	
  2386                           
  2387                           ; 1 bytes @ 0x7
  2388  0077                     	ds	1
  2389  0078                     ??_nrf24l01ReceivePacket:	
  2390                           
  2391                           ; 1 bytes @ 0x8
  2392  0078                     	ds	1
  2393  0079                     nrf24l01ReceivePacket@width:	
  2394                           
  2395                           ; 1 bytes @ 0x9
  2396  0079                     	ds	1
  2397  007A                     nrf24l01ReceivePacket@i:	
  2398                           
  2399                           ; 1 bytes @ 0xA
  2400  007A                     	ds	1
  2401  007B                     ??_nrf24l01ISR:	
  2402                           
  2403                           ; 1 bytes @ 0xB
  2404  007B                     	ds	1
  2405  007C                     nrf24l01ISR@status:	
  2406                           
  2407                           ; 1 bytes @ 0xC
  2408  007C                     	ds	1
  2409  007D                     ??_ISR:	
  2410                           
  2411                           	psect	cstackBANK0
  2412  0020                     __pcstackBANK0:	
  2413                           ; 1 bytes @ 0xD
  2414                           
  2415  0020                     ?___ftge:	
  2416  0020                     ??_nrf24l01GetRXPacket:	
  2417                           ; 1 bit 
  2418                           
  2419  0020                     ?_nrf24l01Send:	
  2420                           ; 1 bytes @ 0x0
  2421                           
  2422  0020                     ?_strcpy:	
  2423                           ; 1 bytes @ 0x0
  2424                           
  2425  0020                     ??_isdigit:	
  2426                           ; 1 bytes @ 0x0
  2427                           
  2428  0020                     ??_nrf24l01InterfaceInit:	
  2429                           ; 1 bytes @ 0x0
  2430                           
  2431  0020                     ??_doWDTSleep:	
  2432                           ; 1 bytes @ 0x0
  2433                           
  2434  0020                     ?___bmul:	
  2435                           ; 1 bytes @ 0x0
  2436                           
  2437  0020                     ?_memset:	
  2438                           ; 1 bytes @ 0x0
  2439                           
  2440  0020                     ?_strlen:	
  2441                           ; 2 bytes @ 0x0
  2442                           
  2443  0020                     ?___wmul:	
  2444                           ; 2 bytes @ 0x0
  2445                           
  2446  0020                     ?___lwdiv:	
  2447                           ; 2 bytes @ 0x0
  2448                           
  2449  0020                     ?___lwmod:	
  2450                           ; 2 bytes @ 0x0
  2451                           
  2452  0020                     ?___ftpack:	
  2453                           ; 2 bytes @ 0x0
  2454                           
  2455  0020                     ?___lldiv:	
  2456                           ; 3 bytes @ 0x0
  2457                           
  2458  0020                     nrf24l01Send@data:	
  2459                           ; 4 bytes @ 0x0
  2460                           
  2461  0020                     ___bmul@multiplicand:	
  2462                           ; 1 bytes @ 0x0
  2463                           
  2464  0020                     _isdigit$1812:	
  2465                           ; 1 bytes @ 0x0
  2466                           
  2467  0020                     ___wmul@multiplier:	
  2468                           ; 1 bytes @ 0x0
  2469                           
  2470  0020                     ___lwdiv@divisor:	
  2471                           ; 2 bytes @ 0x0
  2472                           
  2473  0020                     ___lwmod@divisor:	
  2474                           ; 2 bytes @ 0x0
  2475                           
  2476  0020                     memset@p1:	
  2477                           ; 2 bytes @ 0x0
  2478                           
  2479  0020                     strcpy@from:	
  2480                           ; 2 bytes @ 0x0
  2481                           
  2482  0020                     strlen@s:	
  2483                           ; 2 bytes @ 0x0
  2484                           
  2485  0020                     ___ftpack@arg:	
  2486                           ; 2 bytes @ 0x0
  2487                           
  2488  0020                     ___ftge@ff1:	
  2489                           ; 3 bytes @ 0x0
  2490                           
  2491  0020                     ___lldiv@divisor:	
  2492                           ; 3 bytes @ 0x0
  2493                           
  2494                           
  2495                           ; 4 bytes @ 0x0
  2496  0020                     	ds	1
  2497  0021                     ??_nrf24l01Send:	
  2498  0021                     ??___bmul:	
  2499                           ; 1 bytes @ 0x1
  2500                           
  2501  0021                     doWDTSleep@wdtps:	
  2502                           ; 1 bytes @ 0x1
  2503                           
  2504  0021                     isdigit@c:	
  2505                           ; 1 bytes @ 0x1
  2506                           
  2507                           
  2508                           ; 1 bytes @ 0x1
  2509  0021                     	ds	1
  2510  0022                     ??_strlen:	
  2511  0022                     ??_strcpy:	
  2512                           ; 1 bytes @ 0x2
  2513                           
  2514  0022                     nrf24l01Send@command:	
  2515                           ; 1 bytes @ 0x2
  2516                           
  2517  0022                     ___bmul@product:	
  2518                           ; 1 bytes @ 0x2
  2519                           
  2520  0022                     ___wmul@multiplicand:	
  2521                           ; 1 bytes @ 0x2
  2522                           
  2523  0022                     ___lwdiv@dividend:	
  2524                           ; 2 bytes @ 0x2
  2525                           
  2526  0022                     ___lwmod@dividend:	
  2527                           ; 2 bytes @ 0x2
  2528                           
  2529  0022                     memset@c:	
  2530                           ; 2 bytes @ 0x2
  2531                           
  2532                           
  2533                           ; 2 bytes @ 0x2
  2534  0022                     	ds	1
  2535  0023                     ??_nrf24l01SetRXMode:	
  2536  0023                     ?_nrf24l01ChangeTXPower:	
  2537                           ; 1 bytes @ 0x3
  2538                           
  2539  0023                     ??_nrf24l01SetRXPipe:	
  2540                           ; 1 bytes @ 0x3
  2541                           
  2542  0023                     ___bmul@multiplier:	
  2543                           ; 1 bytes @ 0x3
  2544                           
  2545  0023                     ___ftpack@exp:	
  2546                           ; 1 bytes @ 0x3
  2547                           
  2548  0023                     strcpy@to:	
  2549                           ; 1 bytes @ 0x3
  2550                           
  2551  0023                     nrf24l01ChangeTXPower@addPower:	
  2552                           ; 1 bytes @ 0x3
  2553                           
  2554  0023                     ___ftge@ff2:	
  2555                           ; 2 bytes @ 0x3
  2556                           
  2557                           
  2558                           ; 3 bytes @ 0x3
  2559  0023                     	ds	1
  2560  0024                     ??_nrf24l01SetTXPipe:	
  2561  0024                     ??___wmul:	
  2562                           ; 1 bytes @ 0x4
  2563                           
  2564  0024                     ??___lwdiv:	
  2565                           ; 1 bytes @ 0x4
  2566                           
  2567  0024                     ??___lwmod:	
  2568                           ; 1 bytes @ 0x4
  2569                           
  2570  0024                     nrf24l01SetRXMode@config:	
  2571                           ; 1 bytes @ 0x4
  2572                           
  2573  0024                     ___ftpack@sign:	
  2574                           ; 1 bytes @ 0x4
  2575                           
  2576  0024                     strcpy@cp:	
  2577                           ; 1 bytes @ 0x4
  2578                           
  2579  0024                     ___wmul@product:	
  2580                           ; 1 bytes @ 0x4
  2581                           
  2582  0024                     memset@n:	
  2583                           ; 2 bytes @ 0x4
  2584                           
  2585  0024                     strlen@cp:	
  2586                           ; 2 bytes @ 0x4
  2587                           
  2588  0024                     ___lldiv@dividend:	
  2589                           ; 2 bytes @ 0x4
  2590                           
  2591                           
  2592                           ; 4 bytes @ 0x4
  2593  0024                     	ds	1
  2594  0025                     ??_nrf24l01ChangeTXPower:	
  2595  0025                     ??___ftpack:	
  2596                           ; 1 bytes @ 0x5
  2597                           
  2598  0025                     nrf24l01SetRXMode@rxMode:	
  2599                           ; 1 bytes @ 0x5
  2600                           
  2601  0025                     nrf24l01SetRXPipe@pipe:	
  2602                           ; 1 bytes @ 0x5
  2603                           
  2604  0025                     ___lwmod@counter:	
  2605                           ; 1 bytes @ 0x5
  2606                           
  2607  0025                     ___lwdiv@quotient:	
  2608                           ; 1 bytes @ 0x5
  2609                           
  2610                           
  2611                           ; 2 bytes @ 0x5
  2612  0025                     	ds	1
  2613  0026                     ??_memset:	
  2614  0026                     ??_nrf24l01GetPipe:	
  2615                           ; 1 bytes @ 0x6
  2616                           
  2617  0026                     ??___ftge:	
  2618                           ; 1 bytes @ 0x6
  2619                           
  2620  0026                     nrf24l01ChangeTXPower@rfSetup:	
  2621                           ; 1 bytes @ 0x6
  2622                           
  2623  0026                     nrf24l01SetTXPipe@pipe:	
  2624                           ; 1 bytes @ 0x6
  2625                           
  2626  0026                     nrf24l01SetRXPipe@enRXAddr:	
  2627                           ; 1 bytes @ 0x6
  2628                           
  2629  0026                     memset@p:	
  2630                           ; 1 bytes @ 0x6
  2631                           
  2632                           
  2633                           ; 2 bytes @ 0x6
  2634  0026                     	ds	1
  2635  0027                     ?_nrf24l01SendPacket:	
  2636  0027                     ??_checkTXPower:	
  2637                           ; 1 bytes @ 0x7
  2638                           
  2639  0027                     ??_nrf24l01InitRegisters:	
  2640                           ; 1 bytes @ 0x7
  2641                           
  2642  0027                     ___lwdiv@counter:	
  2643                           ; 1 bytes @ 0x7
  2644                           
  2645  0027                     nrf24l01SendPacket@Packet:	
  2646                           ; 1 bytes @ 0x7
  2647                           
  2648                           
  2649                           ; 2 bytes @ 0x7
  2650  0027                     	ds	1
  2651  0028                     ??___lldiv:	
  2652  0028                     ?___awtoft:	
  2653                           ; 1 bytes @ 0x8
  2654                           
  2655  0028                     ?___lbtoft:	
  2656                           ; 3 bytes @ 0x8
  2657                           
  2658  0028                     ?___lltoft:	
  2659                           ; 3 bytes @ 0x8
  2660                           
  2661  0028                     checkTXPower@rxPacket:	
  2662                           ; 3 bytes @ 0x8
  2663                           
  2664  0028                     nrf24l01GetPipe@pipe:	
  2665                           ; 1 bytes @ 0x8
  2666                           
  2667  0028                     ___awtoft@c:	
  2668                           ; 1 bytes @ 0x8
  2669                           
  2670  0028                     ___lltoft@c:	
  2671                           ; 2 bytes @ 0x8
  2672                           
  2673                           
  2674                           ; 4 bytes @ 0x8
  2675  0028                     	ds	1
  2676  0029                     ??_nrf24l01SendPacket:	
  2677  0029                     nrf24l01GetPipe@name:	
  2678                           ; 1 bytes @ 0x9
  2679                           
  2680  0029                     nrf24l01InitRegisters@channel:	
  2681                           ; 1 bytes @ 0x9
  2682                           
  2683  0029                     ___lldiv@quotient:	
  2684                           ; 1 bytes @ 0x9
  2685                           
  2686                           
  2687                           ; 4 bytes @ 0x9
  2688  0029                     	ds	1
  2689  002A                     nrf24l01GetPipe@i:	
  2690  002A                     nrf24l01InitRegisters@setupAW:	
  2691                           ; 1 bytes @ 0xA
  2692                           
  2693                           
  2694                           ; 1 bytes @ 0xA
  2695  002A                     	ds	1
  2696  002B                     ??___awtoft:	
  2697  002B                     ??___lbtoft:	
  2698                           ; 1 bytes @ 0xB
  2699                           
  2700  002B                     nrf24l01InitRegisters@feature:	
  2701                           ; 1 bytes @ 0xB
  2702                           
  2703                           
  2704                           ; 1 bytes @ 0xB
  2705  002B                     	ds	1
  2706  002C                     ??___lltoft:	
  2707  002C                     nrf24l01InitRegisters@rfSetup:	
  2708                           ; 1 bytes @ 0xC
  2709                           
  2710                           
  2711                           ; 1 bytes @ 0xC
  2712  002C                     	ds	1
  2713  002D                     nrf24l01SendPacket@i:	
  2714  002D                     nrf24l01InitRegisters@status:	
  2715                           ; 1 bytes @ 0xD
  2716                           
  2717  002D                     ___lldiv@counter:	
  2718                           ; 1 bytes @ 0xD
  2719                           
  2720  002D                     ___awtoft@sign:	
  2721                           ; 1 bytes @ 0xD
  2722                           
  2723  002D                     ___lltoft@exp:	
  2724                           ; 1 bytes @ 0xD
  2725                           
  2726                           
  2727                           ; 1 bytes @ 0xD
  2728  002D                     	ds	1
  2729  002E                     ??_nrf24l01SendACK:	
  2730  002E                     ?___ftadd:	
  2731                           ; 1 bytes @ 0xE
  2732                           
  2733  002E                     ?___llmod:	
  2734                           ; 3 bytes @ 0xE
  2735                           
  2736  002E                     nrf24l01InitRegisters@enAA:	
  2737                           ; 4 bytes @ 0xE
  2738                           
  2739  002E                     ___ftadd@f1:	
  2740                           ; 1 bytes @ 0xE
  2741                           
  2742  002E                     ___llmod@divisor:	
  2743                           ; 3 bytes @ 0xE
  2744                           
  2745                           
  2746                           ; 4 bytes @ 0xE
  2747  002E                     	ds	1
  2748  002F                     nrf24l01SendACK@packet:	
  2749  002F                     nrf24l01InitRegisters@DynPD:	
  2750                           ; 1 bytes @ 0xF
  2751                           
  2752  002F                     ___lbtoft@c:	
  2753                           ; 1 bytes @ 0xF
  2754                           
  2755                           
  2756                           ; 1 bytes @ 0xF
  2757  002F                     	ds	1
  2758  0030                     ??_handleRXData:	
  2759  0030                     nrf24l01InitRegisters@config:	
  2760                           ; 1 bytes @ 0x10
  2761                           
  2762                           
  2763                           ; 1 bytes @ 0x10
  2764  0030                     	ds	1
  2765  0031                     handleRXData@RXPacket:	
  2766  0031                     nrf24l01InitRegisters@i:	
  2767                           ; 1 bytes @ 0x11
  2768                           
  2769  0031                     ___ftadd@f2:	
  2770                           ; 2 bytes @ 0x11
  2771                           
  2772                           
  2773                           ; 3 bytes @ 0x11
  2774  0031                     	ds	1
  2775  0032                     ?_sleep:	
  2776  0032                     sleep@milliseconds:	
  2777                           ; 1 bytes @ 0x12
  2778                           
  2779  0032                     ___llmod@dividend:	
  2780                           ; 2 bytes @ 0x12
  2781                           
  2782                           
  2783                           ; 4 bytes @ 0x12
  2784  0032                     	ds	1
  2785  0033                     ??_nrf24l01Init:	
  2786                           
  2787                           ; 1 bytes @ 0x13
  2788  0033                     	ds	1
  2789  0034                     ??_sleep:	
  2790  0034                     ??___ftadd:	
  2791                           ; 1 bytes @ 0x14
  2792                           
  2793                           
  2794                           ; 1 bytes @ 0x14
  2795  0034                     	ds	2
  2796  0036                     ??___llmod:	
  2797                           
  2798                           ; 1 bytes @ 0x16
  2799  0036                     	ds	1
  2800  0037                     ___llmod@counter:	
  2801                           
  2802                           ; 1 bytes @ 0x17
  2803  0037                     	ds	1
  2804  0038                     ?_sprintf:	
  2805  0038                     ___ftadd@sign:	
  2806                           ; 2 bytes @ 0x18
  2807                           
  2808  0038                     sprintf@f:	
  2809                           ; 1 bytes @ 0x18
  2810                           
  2811                           
  2812                           ; 2 bytes @ 0x18
  2813  0038                     	ds	1
  2814  0039                     ___ftadd@exp2:	
  2815                           
  2816                           ; 1 bytes @ 0x19
  2817  0039                     	ds	1
  2818  003A                     ___ftadd@exp1:	
  2819                           
  2820                           ; 1 bytes @ 0x1A
  2821  003A                     	ds	1
  2822  003B                     ?___ftdiv:	
  2823  003B                     ?___ftsub:	
  2824                           ; 3 bytes @ 0x1B
  2825                           
  2826  003B                     ___ftdiv@f2:	
  2827                           ; 3 bytes @ 0x1B
  2828                           
  2829  003B                     ___ftsub@f2:	
  2830                           ; 3 bytes @ 0x1B
  2831                           
  2832                           
  2833                           ; 3 bytes @ 0x1B
  2834  003B                     	ds	3
  2835  003E                     ___ftdiv@f1:	
  2836  003E                     ___ftsub@f1:	
  2837                           ; 3 bytes @ 0x1E
  2838                           
  2839                           
  2840                           ; 3 bytes @ 0x1E
  2841  003E                     	ds	3
  2842  0041                     ??___ftdiv:	
  2843  0041                     ??___ftsub:	
  2844                           ; 1 bytes @ 0x21
  2845                           
  2846                           
  2847                           ; 1 bytes @ 0x21
  2848  0041                     	ds	1
  2849  0042                     ??_sprintf:	
  2850                           
  2851                           ; 1 bytes @ 0x22
  2852  0042                     	ds	3
  2853  0045                     ___ftdiv@cntr:	
  2854                           
  2855                           ; 1 bytes @ 0x25
  2856  0045                     	ds	1
  2857  0046                     ___ftdiv@f3:	
  2858                           
  2859                           ; 3 bytes @ 0x26
  2860  0046                     	ds	2
  2861  0048                     sprintf@flag:	
  2862                           
  2863                           ; 1 bytes @ 0x28
  2864  0048                     	ds	1
  2865  0049                     sprintf@ap:	
  2866  0049                     ___ftdiv@exp:	
  2867                           ; 1 bytes @ 0x29
  2868                           
  2869                           
  2870                           ; 1 bytes @ 0x29
  2871  0049                     	ds	1
  2872  004A                     ___ftdiv@sign:	
  2873  004A                     sprintf@val:	
  2874                           ; 1 bytes @ 0x2A
  2875                           
  2876                           
  2877                           ; 4 bytes @ 0x2A
  2878  004A                     	ds	1
  2879  004B                     ?_getADCValue:	
  2880                           
  2881                           ; 3 bytes @ 0x2B
  2882  004B                     	ds	3
  2883  004E                     ??_getADCValue:	
  2884  004E                     sprintf@sp:	
  2885                           ; 1 bytes @ 0x2E
  2886                           
  2887                           
  2888                           ; 1 bytes @ 0x2E
  2889  004E                     	ds	1
  2890  004F                     sprintf@width:	
  2891                           
  2892                           ; 2 bytes @ 0x2F
  2893  004F                     	ds	2
  2894  0051                     getADCValue@adcLoop:	
  2895  0051                     sprintf@prec:	
  2896                           ; 2 bytes @ 0x31
  2897                           
  2898                           
  2899                           ; 2 bytes @ 0x31
  2900  0051                     	ds	2
  2901  0053                     getADCValue@channel:	
  2902  0053                     sprintf@c:	
  2903                           ; 1 bytes @ 0x33
  2904                           
  2905                           
  2906                           ; 1 bytes @ 0x33
  2907  0053                     	ds	1
  2908  0054                     getADCValue@adcSum:	
  2909                           
  2910                           ; 3 bytes @ 0x34
  2911  0054                     	ds	3
  2912  0057                     ?___ftmul:	
  2913  0057                     ?___ftneg:	
  2914                           ; 3 bytes @ 0x37
  2915                           
  2916  0057                     ___ftmul@f1:	
  2917                           ; 3 bytes @ 0x37
  2918                           
  2919  0057                     ___ftneg@f1:	
  2920                           ; 3 bytes @ 0x37
  2921                           
  2922                           
  2923                           ; 3 bytes @ 0x37
  2924  0057                     	ds	3
  2925  005A                     ??___ftneg:	
  2926  005A                     ___ftmul@f2:	
  2927                           ; 1 bytes @ 0x3A
  2928                           
  2929                           
  2930                           ; 3 bytes @ 0x3A
  2931  005A                     	ds	3
  2932  005D                     ??___ftmul:	
  2933                           
  2934                           ; 1 bytes @ 0x3D
  2935  005D                     	ds	4
  2936  0061                     ___ftmul@exp:	
  2937                           
  2938                           ; 1 bytes @ 0x41
  2939  0061                     	ds	1
  2940  0062                     ___ftmul@f3_as_product:	
  2941                           
  2942                           ; 3 bytes @ 0x42
  2943  0062                     	ds	3
  2944  0065                     ___ftmul@cntr:	
  2945                           
  2946                           ; 1 bytes @ 0x45
  2947  0065                     	ds	1
  2948  0066                     ___ftmul@sign:	
  2949                           
  2950                           ; 1 bytes @ 0x46
  2951  0066                     	ds	1
  2952  0067                     ?___fttol:	
  2953  0067                     ___fttol@f1:	
  2954                           ; 4 bytes @ 0x47
  2955                           
  2956                           
  2957                           ; 3 bytes @ 0x47
  2958  0067                     	ds	4
  2959  006B                     ??___fttol:	
  2960                           
  2961                           ; 1 bytes @ 0x4B
  2962  006B                     	ds	4
  2963  006F                     ??_ftoa:	
  2964                           
  2965                           ; 1 bytes @ 0x4F
  2966  006F                     	ds	1
  2967  0070                     ??_strcat:	
  2968                           
  2969                           	psect	maintext
  2970  0DFE                     __pmaintext:	
  2971                           ; 1 bytes @ 0x50
  2972 ;;
  2973 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  2974 ;;
  2975 ;; *************** function _main *****************
  2976 ;; Defined at:
  2977 ;;		line 245 in file "main.c"
  2978 ;; Parameters:    Size  Location     Type
  2979 ;;		None
  2980 ;; Auto vars:     Size  Location     Type
  2981 ;;  packet         33   39[BANK1 ] struct .
  2982 ;;  pipe            1   38[BANK1 ] unsigned char 
  2983 ;;  bootStatus      1   37[BANK1 ] unsigned char 
  2984 ;; Return value:  Size  Location     Type
  2985 ;;                  1    wreg      void 
  2986 ;; Registers used:
  2987 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2988 ;; Tracked objects:
  2989 ;;		On entry : B1F/0
  2990 ;;		On exit  : 0/0
  2991 ;;		Unchanged: 0/0
  2992 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2993 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2994 ;;      Locals:         0       0      35       0       0       0       0       0       0       0       0       0       
      +0       0
  2995 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  2996 ;;      Totals:         0       0      36       0       0       0       0       0       0       0       0       0       
      +0       0
  2997 ;;Total ram usage:       36 bytes
  2998 ;; Hardware stack levels required when called:   16
  2999 ;; This function calls:
  3000 ;;		___lbtoft
  3001 ;;		_loop
  3002 ;;		_nrf24l01GetPipe
  3003 ;;		_nrf24l01Init
  3004 ;;		_nrf24l01SendPacket
  3005 ;;		_nrf24l01SetRXPipe
  3006 ;;		_nrf24l01SetTXPipe
  3007 ;;		_setMessage
  3008 ;;		_sleep
  3009 ;;		_strcpy
  3010 ;; This function is called by:
  3011 ;;		Startup code after reset
  3012 ;; This function uses a non-reentrant model
  3013 ;;
  3014                           
  3015                           
  3016                           ;psect for function _main
  3017  0DFE                     _main:	
  3018                           
  3019                           ;main.c: 247: unsigned char bootStatus = STATUS;
  3020                           
  3021                           ;incstack = 0
  3022                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3023  0DFE  0020               	movlb	0	; select bank0
  3024  0DFF  0803               	movf	3,w	;volatile
  3025  0E00  0021               	movlb	1	; select bank1
  3026  0E01  00C4               	movwf	??_main^(0+128)
  3027  0E02  0844               	movf	??_main^(0+128),w
  3028  0E03  00C5               	movwf	main@bootStatus^(0+128)
  3029                           
  3030                           ;main.c: 250: ANSELA = 0x00;
  3031  0E04  0023               	movlb	3	; select bank3
  3032  0E05  018C               	clrf	12	;volatile
  3033                           
  3034                           ;main.c: 251: ANSELC = 0x00;
  3035  0E06  018E               	clrf	14	;volatile
  3036                           
  3037                           ;main.c: 253: ODCONA = 0x00;
  3038  0E07  0025               	movlb	5	; select bank5
  3039  0E08  018C               	clrf	12	;volatile
  3040                           
  3041                           ;main.c: 254: ODCONC = 0x00;
  3042  0E09  018E               	clrf	14	;volatile
  3043                           
  3044                           ;main.c: 259: INLVLA = 0x00;
  3045  0E0A  0027               	movlb	7	; select bank7
  3046  0E0B  018C               	clrf	12	;volatile
  3047                           
  3048                           ;main.c: 260: INLVLC = 0x00;
  3049  0E0C  018E               	clrf	14	;volatile
  3050                           
  3051                           ;main.c: 262: WPUA = 0x00;
  3052  0E0D  0024               	movlb	4	; select bank4
  3053  0E0E  018C               	clrf	12	;volatile
  3054                           
  3055                           ;main.c: 263: WPUC = 0x00;
  3056  0E0F  018E               	clrf	14	;volatile
  3057                           
  3058                           ;main.c: 265: TRISCbits.TRISC5 = 0;
  3059  0E10  0021               	movlb	1	; select bank1
  3060  0E11  128E               	bcf	14,5	;volatile
  3061                           
  3062                           ;main.c: 266: TRISCbits.TRISC4 = 0;
  3063  0E12  120E               	bcf	14,4	;volatile
  3064                           
  3065                           ;main.c: 268: PORTCbits.RC4 = 0;
  3066  0E13  0020               	movlb	0	; select bank0
  3067  0E14  120E               	bcf	14,4	;volatile
  3068                           
  3069                           ;main.c: 275: INTCONbits.PEIE = 0;
  3070  0E15  130B               	bcf	11,6	;volatile
  3071                           
  3072                           ;main.c: 276: INTCONbits.GIE = 0;
  3073  0E16  138B               	bcf	11,7	;volatile
  3074                           
  3075                           ;main.c: 278: OSCCON1bits.NOSC = 0b000;
  3076  0E17  308F               	movlw	-113
  3077  0E18  0032               	movlb	18	; select bank18
  3078  0E19  0599               	andwf	25,f	;volatile
  3079                           
  3080                           ;main.c: 279: OSCCON1bits.NDIV = 0b000;
  3081  0E1A  30F0               	movlw	-16
  3082  0E1B  0599               	andwf	25,f	;volatile
  3083                           
  3084                           ;main.c: 281: _delay((unsigned long)((10)*(32000000/4000.0)));
  3085  0E1C  3068               	movlw	104
  3086  0E1D  0021               	movlb	1	; select bank1
  3087  0E1E  00C4               	movwf	??_main^(0+128)
  3088  0E1F  30E4               	movlw	228
  3089  0E20                     u3557:	
  3090  0E20  0B89               	decfsz	9,f
  3091  0E21  2E20               	goto	u3557
  3092  0E22  0BC4               	decfsz	??_main^(0+128),f
  3093  0E23  2E20               	goto	u3557
  3094  0E24  0000               	nop
  3095                           
  3096                           ;main.c: 285: strcpy(romData->name, "UH1");
  3097  0E25  302D               	movlw	low (STR_8| (0+32768))
  3098  0E26  0020               	movlb	0	; select bank0
  3099  0E27  00A0               	movwf	strcpy@from
  3100  0E28  3098               	movlw	high (STR_8| (0+32768))
  3101  0E29  00A1               	movwf	strcpy@from+1
  3102  0E2A  0021               	movlb	1	; select bank1
  3103  0E2B  086B               	movf	_romData^(0+128),w
  3104  0E2C  3E01               	addlw	1
  3105  0E2D  3197  27A7  318D   	fcall	_strcpy
  3106                           
  3107                           ;main.c: 287: nrf24l01Init();
  3108  0E30  3188  2064  318D   	fcall	_nrf24l01Init
  3109                           
  3110                           ;main.c: 289: unsigned char pipe = nrf24l01GetPipe(romData->name);
  3111  0E33  0021               	movlb	1	; select bank1
  3112  0E34  086B               	movf	_romData^(0+128),w
  3113  0E35  3E01               	addlw	1
  3114  0E36  3189  21BA  318D   	fcall	_nrf24l01GetPipe
  3115  0E39  0021               	movlb	1	; select bank1
  3116  0E3A  00C4               	movwf	??_main^(0+128)
  3117  0E3B  0844               	movf	??_main^(0+128),w
  3118  0E3C  00C6               	movwf	main@pipe^(0+128)
  3119                           
  3120                           ;main.c: 290: nrf24l01SetTXPipe(pipe);
  3121  0E3D  0846               	movf	main@pipe^(0+128),w
  3122  0E3E  318B  2370  318D   	fcall	_nrf24l01SetTXPipe
  3123                           
  3124                           ;main.c: 291: nrf24l01SetRXPipe(pipe);
  3125  0E41  0021               	movlb	1	; select bank1
  3126  0E42  0846               	movf	main@pipe^(0+128),w
  3127  0E43  3188  2021  318D   	fcall	_nrf24l01SetRXPipe
  3128                           
  3129                           ;main.c: 295: ADCON0bits.ADON = 0;
  3130  0E46  0021               	movlb	1	; select bank1
  3131  0E47  101D               	bcf	29,0	;volatile
  3132                           
  3133                           ;main.c: 298: PORTAbits.RA4 = 0;
  3134  0E48  0020               	movlb	0	; select bank0
  3135  0E49  120C               	bcf	12,4	;volatile
  3136                           
  3137                           ;main.c: 299: TRISAbits.TRISA4 = 1;
  3138  0E4A  0021               	movlb	1	; select bank1
  3139  0E4B  160C               	bsf	12,4	;volatile
  3140                           
  3141                           ;main.c: 300: WPUAbits.WPUA4 = 0;
  3142  0E4C  0024               	movlb	4	; select bank4
  3143  0E4D  120C               	bcf	12,4	;volatile
  3144                           
  3145                           ;main.c: 301: ODCONAbits.ODCA4 = 1;
  3146  0E4E  0025               	movlb	5	; select bank5
  3147  0E4F  160C               	bsf	12,4	;volatile
  3148                           
  3149                           ;main.c: 302: ANSELAbits.ANSA4 = 1;
  3150  0E50  0023               	movlb	3	; select bank3
  3151  0E51  160C               	bsf	12,4	;volatile
  3152                           
  3153                           ;main.c: 305: ANSELCbits.ANSC3 = 1;
  3154  0E52  158E               	bsf	14,3	;volatile
  3155                           
  3156                           ;main.c: 306: TRISCbits.TRISC3 = 1;
  3157  0E53  0021               	movlb	1	; select bank1
  3158  0E54  158E               	bsf	14,3	;volatile
  3159                           
  3160                           ;main.c: 309: FVRCONbits.TSEN = 1;
  3161  0E55  0022               	movlb	2	; select bank2
  3162  0E56  1697               	bsf	23,5	;volatile
  3163                           
  3164                           ;main.c: 310: FVRCONbits.TSRNG = 1;
  3165  0E57  1617               	bsf	23,4	;volatile
  3166                           
  3167                           ;main.c: 313: FVRCONbits.FVREN = 0;
  3168  0E58  1397               	bcf	23,7	;volatile
  3169                           
  3170                           ;main.c: 314: FVRCONbits.ADFVR = 0b10;
  3171  0E59  0817               	movf	23,w	;volatile
  3172  0E5A  39FC               	andlw	-4
  3173  0E5B  3802               	iorlw	2
  3174  0E5C  0097               	movwf	23	;volatile
  3175                           
  3176                           ;main.c: 316: ADCON1bits.ADCS = 0b111;
  3177  0E5D  3070               	movlw	112
  3178  0E5E  0021               	movlb	1	; select bank1
  3179  0E5F  049E               	iorwf	30,f	;volatile
  3180                           
  3181                           ;main.c: 317: ADCON1bits.ADFM = 1;
  3182  0E60  179E               	bsf	30,7	;volatile
  3183                           
  3184                           ;main.c: 318: ADCON1bits.ADPREF = 0b11;
  3185  0E61  3003               	movlw	3
  3186  0E62  049E               	iorwf	30,f	;volatile
  3187                           
  3188                           ;main.c: 319: ADCON1bits.ADNREF = 0b00;
  3189  0E63  111E               	bcf	30,2	;volatile
  3190                           
  3191                           ;main.c: 322: ADCON0bits.CHS = 3;
  3192  0E64  081D               	movf	29,w	;volatile
  3193  0E65  3903               	andlw	-253
  3194  0E66  380C               	iorlw	12
  3195  0E67  009D               	movwf	29	;volatile
  3196                           
  3197                           ;main.c: 327: TRISAbits.TRISA2 = 1;
  3198  0E68  150C               	bsf	12,2	;volatile
  3199                           
  3200                           ;main.c: 328: PIE0bits.INTE = 1;
  3201  0E69  1410               	bsf	16,0	;volatile
  3202                           
  3203                           ;main.c: 329: INTCONbits.INTEDG = 0;
  3204  0E6A  100B               	bcf	11,0	;volatile
  3205                           
  3206                           ;main.c: 332: TRISAbits.TRISA5 = 0;
  3207  0E6B  128C               	bcf	12,5	;volatile
  3208                           
  3209                           ;main.c: 333: PORTAbits.RA5 = 0;
  3210  0E6C  0020               	movlb	0	; select bank0
  3211  0E6D  128C               	bcf	12,5	;volatile
  3212                           
  3213                           ;main.c: 336: INTCONbits.PEIE = 1;
  3214  0E6E  170B               	bsf	11,6	;volatile
  3215                           
  3216                           ;main.c: 337: INTCONbits.GIE = 1;
  3217  0E6F  178B               	bsf	11,7	;volatile
  3218                           
  3219                           ;main.c: 339: nrf24l01Packet_t packet;;main.c: 341: setMessage(&packet, "BOOT", bootStat
      +                          us);
  3220  0E70  30C7               	movlw	low main@packet
  3221  0E71  0021               	movlb	1	; select bank1
  3222  0E72  00B9               	movwf	setMessage@packet^(0+128)
  3223  0E73  3000               	movlw	high main@packet
  3224  0E74  00BA               	movwf	(setMessage@packet+1)^(0+128)
  3225  0E75  3028               	movlw	low (STR_9| (0+32768))
  3226  0E76  00BB               	movwf	setMessage@topic^(0+128)
  3227  0E77  3098               	movlw	high (STR_9| (0+32768))
  3228  0E78  00BC               	movwf	(setMessage@topic^(0+128)+1)
  3229  0E79  0845               	movf	main@bootStatus^(0+128),w
  3230  0E7A  3197  2754  318D   	fcall	___lbtoft
  3231  0E7D  0020               	movlb	0	; select bank0
  3232  0E7E  0828               	movf	?___lbtoft,w
  3233  0E7F  0021               	movlb	1	; select bank1
  3234  0E80  00BD               	movwf	setMessage@value^(0+128)
  3235  0E81  0020               	movlb	0	; select bank0
  3236  0E82  0829               	movf	?___lbtoft+1,w
  3237  0E83  0021               	movlb	1	; select bank1
  3238  0E84  00BE               	movwf	(setMessage@value+1)^(0+128)
  3239  0E85  0020               	movlb	0	; select bank0
  3240  0E86  082A               	movf	?___lbtoft+2,w
  3241  0E87  0021               	movlb	1	; select bank1
  3242  0E88  00BF               	movwf	(setMessage@value+2)^(0+128)
  3243  0E89  318D  2502  318D   	fcall	_setMessage
  3244                           
  3245                           ;main.c: 342: packet.packetData.byte = 0;
  3246  0E8C  0021               	movlb	1	; select bank1
  3247  0E8D  01C7               	clrf	main@packet^(0+128)
  3248                           
  3249                           ;main.c: 343: packet.packetData.ACKRequest = 0;
  3250  0E8E  1147               	bcf	main@packet^(0+128),2
  3251                           
  3252                           ;main.c: 344: nrf24l01SendPacket(&packet);
  3253  0E8F  30C7               	movlw	low main@packet
  3254  0E90  0020               	movlb	0	; select bank0
  3255  0E91  00A7               	movwf	nrf24l01SendPacket@Packet
  3256  0E92  3000               	movlw	high main@packet
  3257  0E93  00A8               	movwf	nrf24l01SendPacket@Packet+1
  3258  0E94  3186  2697  318D   	fcall	_nrf24l01SendPacket
  3259                           
  3260                           ;main.c: 345: sleep(3000);
  3261  0E97  30B8               	movlw	184
  3262  0E98  0020               	movlb	0	; select bank0
  3263  0E99  00B2               	movwf	sleep@milliseconds
  3264  0E9A  300B               	movlw	11
  3265  0E9B  00B3               	movwf	sleep@milliseconds+1
  3266  0E9C  318A  222E  318D   	fcall	_sleep
  3267  0E9F                     l3603:	
  3268                           ;main.c: 347: while(1){
  3269                           
  3270                           
  3271                           ;main.c: 348: loop();
  3272  0E9F  3181  21FA  318D   	fcall	_loop
  3273  0EA2  2E9F               	goto	l3603
  3274  0EA3                     __end_of_main:	
  3275                           ;main.c: 349: };main.c: 351: return;
  3276                           
  3277                           
  3278                           	psect	text1
  3279  17A7                     __ptext1:	
  3280 ;; *************** function _strcpy *****************
  3281 ;; Defined at:
  3282 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\strcpy.c"
  3283 ;; Parameters:    Size  Location     Type
  3284 ;;  to              1    wreg     PTR unsigned char 
  3285 ;;		 -> romDataMap(28), 
  3286 ;;  from            2    0[BANK0 ] PTR const unsigned char 
  3287 ;;		 -> STR_8(4), 
  3288 ;; Auto vars:     Size  Location     Type
  3289 ;;  to              1    3[BANK0 ] PTR unsigned char 
  3290 ;;		 -> romDataMap(28), 
  3291 ;;  cp              1    4[BANK0 ] PTR unsigned char 
  3292 ;;		 -> romDataMap(28), 
  3293 ;; Return value:  Size  Location     Type
  3294 ;;                  1    wreg      PTR unsigned char 
  3295 ;; Registers used:
  3296 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath
  3297 ;; Tracked objects:
  3298 ;;		On entry : 0/0
  3299 ;;		On exit  : 0/0
  3300 ;;		Unchanged: 0/0
  3301 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3302 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3303 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3304 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3305 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3306 ;;Total ram usage:        5 bytes
  3307 ;; Hardware stack levels used:    1
  3308 ;; Hardware stack levels required when called:    7
  3309 ;; This function calls:
  3310 ;;		Nothing
  3311 ;; This function is called by:
  3312 ;;		_main
  3313 ;; This function uses a non-reentrant model
  3314 ;;
  3315                           
  3316                           
  3317                           ;psect for function _strcpy
  3318  17A7                     _strcpy:	
  3319                           
  3320                           ;incstack = 0
  3321                           ; Regs used in _strcpy: [wreg-fsr1h+status,2+status,0+pclath]
  3322                           ;strcpy@to stored from wreg
  3323  17A7  0020               	movlb	0	; select bank0
  3324  17A8  00A3               	movwf	strcpy@to
  3325  17A9  0823               	movf	strcpy@to,w
  3326  17AA  00A2               	movwf	??_strcpy
  3327  17AB  0822               	movf	??_strcpy,w
  3328  17AC  00A4               	movwf	strcpy@cp
  3329  17AD                     l3485:	
  3330  17AD  0824               	movf	strcpy@cp,w
  3331  17AE  0086               	movwf	6
  3332  17AF  3001               	movlw	1	; select bank2/3
  3333  17B0  0087               	movwf	7
  3334  17B1  0820               	movf	strcpy@from,w
  3335  17B2  0084               	movwf	4
  3336  17B3  0821               	movf	strcpy@from+1,w
  3337  17B4  0085               	movwf	5
  3338  17B5  0800               	movf	0,w	;code access
  3339  17B6  3FC0               	movwi [0]fsr1
  3340  17B7  0889               	movf	9,f
  3341  17B8  1903               	btfsc	3,2
  3342  17B9  0008               	return
  3343  17BA  3001               	movlw	1
  3344  17BB  00A2               	movwf	??_strcpy
  3345  17BC  0822               	movf	??_strcpy,w
  3346  17BD  07A4               	addwf	strcpy@cp,f
  3347  17BE  3001               	movlw	1
  3348  17BF  07A0               	addwf	strcpy@from,f
  3349  17C0  3000               	movlw	0
  3350  17C1  3DA1               	addwfc	strcpy@from+1,f
  3351  17C2  2FAD               	goto	l3485
  3352  17C3                     __end_of_strcpy:	
  3353                           ;	Return value of _strcpy is never used
  3354                           
  3355                           
  3356                           	psect	text2
  3357  0864                     __ptext2:	
  3358 ;; *************** function _nrf24l01Init *****************
  3359 ;; Defined at:
  3360 ;;		line 453 in file "nrf24l01.c"
  3361 ;; Parameters:    Size  Location     Type
  3362 ;;		None
  3363 ;; Auto vars:     Size  Location     Type
  3364 ;;		None
  3365 ;; Return value:  Size  Location     Type
  3366 ;;                  1    wreg      void 
  3367 ;; Registers used:
  3368 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3369 ;; Tracked objects:
  3370 ;;		On entry : 0/0
  3371 ;;		On exit  : 0/0
  3372 ;;		Unchanged: 0/0
  3373 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3374 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3375 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3376 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3377 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3378 ;;Total ram usage:        2 bytes
  3379 ;; Hardware stack levels used:    1
  3380 ;; Hardware stack levels required when called:   12
  3381 ;; This function calls:
  3382 ;;		_nrf24l01CEHigh
  3383 ;;		_nrf24l01CELow
  3384 ;;		_nrf24l01InitRegisters
  3385 ;;		_nrf24l01InterfaceInit
  3386 ;; This function is called by:
  3387 ;;		_main
  3388 ;; This function uses a non-reentrant model
  3389 ;;
  3390                           
  3391                           
  3392                           ;psect for function _nrf24l01Init
  3393  0864                     _nrf24l01Init:	
  3394                           
  3395                           ;nrf24l01.c: 456: nrf24l01InterfaceInit();
  3396                           
  3397                           ;incstack = 0
  3398                           ; Regs used in _nrf24l01Init: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3399  0864  3197  278B  3188   	fcall	_nrf24l01InterfaceInit
  3400                           
  3401                           ;nrf24l01.c: 461: nrf24l01CELow();
  3402  0867  3196  266E  3188   	fcall	_nrf24l01CELow
  3403                           
  3404                           ;nrf24l01.c: 463: _delay((unsigned long)((50000)*(32000000/4000000.0)));
  3405  086A  3003               	movlw	3
  3406  086B  0020               	movlb	0	; select bank0
  3407  086C  00B4               	movwf	??_nrf24l01Init+1
  3408  086D  3008               	movlw	8
  3409  086E  00B3               	movwf	??_nrf24l01Init
  3410  086F  3077               	movlw	119
  3411  0870                     u3567:	
  3412  0870  0B89               	decfsz	9,f
  3413  0871  2870               	goto	u3567
  3414  0872  0BB3               	decfsz	??_nrf24l01Init,f
  3415  0873  2870               	goto	u3567
  3416  0874  0BB4               	decfsz	??_nrf24l01Init+1,f
  3417  0875  2870               	goto	u3567
  3418                           
  3419                           ;nrf24l01.c: 465: nrf24l01InitRegisters();
  3420  0876  3183  23A9  3188   	fcall	_nrf24l01InitRegisters
  3421                           
  3422                           ;nrf24l01.c: 467: _delay((unsigned long)((50000)*(32000000/4000000.0)));
  3423  0879  3003               	movlw	3
  3424  087A  0020               	movlb	0	; select bank0
  3425  087B  00B4               	movwf	??_nrf24l01Init+1
  3426  087C  3008               	movlw	8
  3427  087D  00B3               	movwf	??_nrf24l01Init
  3428  087E  3077               	movlw	119
  3429  087F                     u3577:	
  3430  087F  0B89               	decfsz	9,f
  3431  0880  287F               	goto	u3577
  3432  0881  0BB3               	decfsz	??_nrf24l01Init,f
  3433  0882  287F               	goto	u3577
  3434  0883  0BB4               	decfsz	??_nrf24l01Init+1,f
  3435  0884  287F               	goto	u3577
  3436                           
  3437                           ;nrf24l01.c: 469: nrf24l01CEHigh();
  3438  0885  3196  266B         	fcall	_nrf24l01CEHigh
  3439  0887  0008               	return
  3440  0888                     __end_of_nrf24l01Init:	
  3441                           
  3442                           	psect	text3
  3443  178B                     __ptext3:	
  3444 ;; *************** function _nrf24l01InterfaceInit *****************
  3445 ;; Defined at:
  3446 ;;		line 27 in file "interface.c"
  3447 ;; Parameters:    Size  Location     Type
  3448 ;;		None
  3449 ;; Auto vars:     Size  Location     Type
  3450 ;;		None
  3451 ;; Return value:  Size  Location     Type
  3452 ;;                  1    wreg      void 
  3453 ;; Registers used:
  3454 ;;		wreg, status,2, status,0
  3455 ;; Tracked objects:
  3456 ;;		On entry : 0/0
  3457 ;;		On exit  : 0/0
  3458 ;;		Unchanged: 0/0
  3459 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3460 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3461 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3462 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3463 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3464 ;;Total ram usage:        0 bytes
  3465 ;; Hardware stack levels used:    1
  3466 ;; Hardware stack levels required when called:    7
  3467 ;; This function calls:
  3468 ;;		Nothing
  3469 ;; This function is called by:
  3470 ;;		_nrf24l01Init
  3471 ;; This function uses a non-reentrant model
  3472 ;;
  3473                           
  3474                           
  3475                           ;psect for function _nrf24l01InterfaceInit
  3476  178B                     _nrf24l01InterfaceInit:	
  3477                           
  3478                           ;interface.c: 29: TRISAbits.TRISA0 = 0;
  3479                           
  3480                           ;incstack = 0
  3481                           ; Regs used in _nrf24l01InterfaceInit: [wreg+status,2+status,0]
  3482  178B  0021               	movlb	1	; select bank1
  3483  178C  100C               	bcf	12,0	;volatile
  3484                           
  3485                           ;interface.c: 30: TRISAbits.TRISA1 = 0;
  3486  178D  108C               	bcf	12,1	;volatile
  3487                           
  3488                           ;interface.c: 32: TRISCbits.TRISC1 = 1;
  3489  178E  148E               	bsf	14,1	;volatile
  3490                           
  3491                           ;interface.c: 33: TRISCbits.TRISC2 = 0;
  3492  178F  110E               	bcf	14,2	;volatile
  3493                           
  3494                           ;interface.c: 34: TRISCbits.TRISC0 = 0;
  3495  1790  100E               	bcf	14,0	;volatile
  3496                           
  3497                           ;interface.c: 36: SSP1CON1bits.SSPEN = 0;
  3498  1791  0024               	movlb	4	; select bank4
  3499  1792  1295               	bcf	21,5	;volatile
  3500                           
  3501                           ;interface.c: 38: RC1PPSbits.RC1PPS = 0b10001;
  3502  1793  003D               	movlb	29	; select bank29
  3503  1794  0821               	movf	33,w	;volatile
  3504  1795  39E0               	andlw	-32
  3505  1796  3811               	iorlw	17
  3506  1797  00A1               	movwf	33	;volatile
  3507                           
  3508                           ;interface.c: 39: RC2PPSbits.RC2PPS = 0b11001;
  3509  1798  0822               	movf	34,w	;volatile
  3510  1799  39E0               	andlw	-32
  3511  179A  3819               	iorlw	25
  3512  179B  00A2               	movwf	34	;volatile
  3513                           
  3514                           ;interface.c: 40: RC0PPSbits.RC0PPS = 0b11000;
  3515  179C  0820               	movf	32,w	;volatile
  3516  179D  39E0               	andlw	-32
  3517  179E  3818               	iorlw	24
  3518  179F  00A0               	movwf	32	;volatile
  3519                           
  3520                           ;interface.c: 42: SSP1CON1bits.CKP = 0;
  3521  17A0  0024               	movlb	4	; select bank4
  3522  17A1  1215               	bcf	21,4	;volatile
  3523                           
  3524                           ;interface.c: 43: SSP1STATbits.CKE = 1;
  3525  17A2  1714               	bsf	20,6	;volatile
  3526                           
  3527                           ;interface.c: 44: SSP1CON1bits.SSPM = 0b0000;
  3528  17A3  30F0               	movlw	-16
  3529  17A4  0595               	andwf	21,f	;volatile
  3530                           
  3531                           ;interface.c: 46: SSP1CON1bits.SSPEN = 1;
  3532  17A5  1695               	bsf	21,5	;volatile
  3533  17A6  0008               	return
  3534  17A7                     __end_of_nrf24l01InterfaceInit:	
  3535                           
  3536                           	psect	text4
  3537  03A9                     __ptext4:	
  3538 ;; *************** function _nrf24l01InitRegisters *****************
  3539 ;; Defined at:
  3540 ;;		line 352 in file "nrf24l01.c"
  3541 ;; Parameters:    Size  Location     Type
  3542 ;;		None
  3543 ;; Auto vars:     Size  Location     Type
  3544 ;;  i               2   17[BANK0 ] unsigned int 
  3545 ;;  config          1   16[BANK0 ] struct .
  3546 ;;  DynPD           1   15[BANK0 ] struct .
  3547 ;;  enAA            1   14[BANK0 ] struct .
  3548 ;;  status          1   13[BANK0 ] struct .
  3549 ;;  rfSetup         1   12[BANK0 ] struct .
  3550 ;;  feature         1   11[BANK0 ] struct .
  3551 ;;  setupAW         1   10[BANK0 ] struct .
  3552 ;;  channel         1    9[BANK0 ] struct .
  3553 ;; Return value:  Size  Location     Type
  3554 ;;                  1    wreg      void 
  3555 ;; Registers used:
  3556 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3557 ;; Tracked objects:
  3558 ;;		On entry : 0/0
  3559 ;;		On exit  : 0/0
  3560 ;;		Unchanged: 0/0
  3561 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3562 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3563 ;;      Locals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3564 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3565 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3566 ;;Total ram usage:       12 bytes
  3567 ;; Hardware stack levels used:    1
  3568 ;; Hardware stack levels required when called:   11
  3569 ;; This function calls:
  3570 ;;		___bmul
  3571 ;;		_nrf24l01SPIEnd
  3572 ;;		_nrf24l01SPISend
  3573 ;;		_nrf24l01SPIStart
  3574 ;;		_nrf24l01Send
  3575 ;;		_nrf24l01SetRXPipe
  3576 ;;		_nrf24l01SetTXPipe
  3577 ;; This function is called by:
  3578 ;;		_nrf24l01Init
  3579 ;; This function uses a non-reentrant model
  3580 ;;
  3581                           
  3582                           
  3583                           ;psect for function _nrf24l01InitRegisters
  3584  03A9                     _nrf24l01InitRegisters:	
  3585                           
  3586                           ;nrf24l01.c: 354: n_CONFIG_t config;;nrf24l01.c: 356: config.PWR_UP = 0;
  3587                           
  3588                           ;incstack = 0
  3589                           ; Regs used in _nrf24l01InitRegisters: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3590  03A9  0020               	movlb	0	; select bank0
  3591  03AA  10B0               	bcf	nrf24l01InitRegisters@config,1
  3592                           
  3593                           ;nrf24l01.c: 357: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x00, config.byte);
  3594  03AB  0830               	movf	nrf24l01InitRegisters@config,w
  3595  03AC  00A7               	movwf	??_nrf24l01InitRegisters
  3596  03AD  0827               	movf	??_nrf24l01InitRegisters,w
  3597  03AE  00A0               	movwf	nrf24l01Send@data
  3598  03AF  3020               	movlw	32
  3599  03B0  3188  2001  3183   	fcall	_nrf24l01Send
  3600                           
  3601                           ;nrf24l01.c: 359: n_SETUP_AW_t setupAW;;nrf24l01.c: 360: setupAW.byte = 0x00;
  3602  03B3  0020               	movlb	0	; select bank0
  3603  03B4  01AA               	clrf	nrf24l01InitRegisters@setupAW
  3604                           
  3605                           ;nrf24l01.c: 361: setupAW.AW = 0b11;
  3606  03B5  3003               	movlw	3
  3607  03B6  04AA               	iorwf	nrf24l01InitRegisters@setupAW,f
  3608                           
  3609                           ;nrf24l01.c: 362: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x02, setupAW.byte);
  3610  03B7  082A               	movf	nrf24l01InitRegisters@setupAW,w
  3611  03B8  00A7               	movwf	??_nrf24l01InitRegisters
  3612  03B9  0827               	movf	??_nrf24l01InitRegisters,w
  3613  03BA  00A0               	movwf	nrf24l01Send@data
  3614  03BB  3022               	movlw	34
  3615  03BC  3188  2001  3183   	fcall	_nrf24l01Send
  3616                           
  3617                           ;nrf24l01.c: 365: n_RF_CH_t channel;;nrf24l01.c: 366: channel.RF_CH = 2;
  3618  03BF  0020               	movlb	0	; select bank0
  3619  03C0  0829               	movf	nrf24l01InitRegisters@channel,w
  3620  03C1  3980               	andlw	-128
  3621  03C2  3802               	iorlw	2
  3622  03C3  00A9               	movwf	nrf24l01InitRegisters@channel
  3623                           
  3624                           ;nrf24l01.c: 367: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x05, channel.byte);
  3625  03C4  0829               	movf	nrf24l01InitRegisters@channel,w
  3626  03C5  00A7               	movwf	??_nrf24l01InitRegisters
  3627  03C6  0827               	movf	??_nrf24l01InitRegisters,w
  3628  03C7  00A0               	movwf	nrf24l01Send@data
  3629  03C8  3025               	movlw	37
  3630  03C9  3188  2001  3183   	fcall	_nrf24l01Send
  3631                           
  3632                           ;nrf24l01.c: 370: n_RF_SETUP_t rfSetup;;nrf24l01.c: 371: rfSetup.byte = 0x00;
  3633  03CC  0020               	movlb	0	; select bank0
  3634  03CD  01AC               	clrf	nrf24l01InitRegisters@rfSetup
  3635                           
  3636                           ;nrf24l01.c: 372: rfSetup.RF_DR_LOW = 0;
  3637  03CE  12AC               	bcf	nrf24l01InitRegisters@rfSetup,5
  3638                           
  3639                           ;nrf24l01.c: 373: rfSetup.RF_DR_HIGH = 1;
  3640  03CF  15AC               	bsf	nrf24l01InitRegisters@rfSetup,3
  3641                           
  3642                           ;nrf24l01.c: 374: rfSetup.RF_PWR = 3;
  3643  03D0  3006               	movlw	6
  3644  03D1  04AC               	iorwf	nrf24l01InitRegisters@rfSetup,f
  3645                           
  3646                           ;nrf24l01.c: 375: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x06, rfSetup.byte);
  3647  03D2  082C               	movf	nrf24l01InitRegisters@rfSetup,w
  3648  03D3  00A7               	movwf	??_nrf24l01InitRegisters
  3649  03D4  0827               	movf	??_nrf24l01InitRegisters,w
  3650  03D5  00A0               	movwf	nrf24l01Send@data
  3651  03D6  3026               	movlw	38
  3652  03D7  3188  2001  3183   	fcall	_nrf24l01Send
  3653                           
  3654                           ;nrf24l01.c: 378: nrf24l01SetRXPipe(0xFF);
  3655  03DA  30FF               	movlw	255
  3656  03DB  3188  2021  3183   	fcall	_nrf24l01SetRXPipe
  3657                           
  3658                           ;nrf24l01.c: 381: n_EN_AA_t enAA;;nrf24l01.c: 382: enAA.byte = nrf24l01Send((unsigned) 0
      +                          b00000000 | (unsigned) 0x01, 0);
  3659  03DE  0020               	movlb	0	; select bank0
  3660  03DF  01A0               	clrf	nrf24l01Send@data
  3661  03E0  3001               	movlw	1
  3662  03E1  3188  2001  3183   	fcall	_nrf24l01Send
  3663  03E4  0020               	movlb	0	; select bank0
  3664  03E5  00A7               	movwf	??_nrf24l01InitRegisters
  3665  03E6  0827               	movf	??_nrf24l01InitRegisters,w
  3666  03E7  00AE               	movwf	nrf24l01InitRegisters@enAA
  3667                           
  3668                           ;nrf24l01.c: 383: enAA.ENAA_P0 = 0;
  3669  03E8  102E               	bcf	nrf24l01InitRegisters@enAA,0
  3670                           
  3671                           ;nrf24l01.c: 384: enAA.ENAA_P1 = 0;
  3672  03E9  10AE               	bcf	nrf24l01InitRegisters@enAA,1
  3673                           
  3674                           ;nrf24l01.c: 385: enAA.ENAA_P2 = 0;
  3675  03EA  112E               	bcf	nrf24l01InitRegisters@enAA,2
  3676                           
  3677                           ;nrf24l01.c: 386: enAA.ENAA_P3 = 0;
  3678  03EB  11AE               	bcf	nrf24l01InitRegisters@enAA,3
  3679                           
  3680                           ;nrf24l01.c: 387: enAA.ENAA_P4 = 0;
  3681  03EC  122E               	bcf	nrf24l01InitRegisters@enAA,4
  3682                           
  3683                           ;nrf24l01.c: 388: enAA.ENAA_P5 = 0;
  3684  03ED  12AE               	bcf	nrf24l01InitRegisters@enAA,5
  3685                           
  3686                           ;nrf24l01.c: 389: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x01, enAA.byte);
  3687  03EE  082E               	movf	nrf24l01InitRegisters@enAA,w
  3688  03EF  00A7               	movwf	??_nrf24l01InitRegisters
  3689  03F0  0827               	movf	??_nrf24l01InitRegisters,w
  3690  03F1  00A0               	movwf	nrf24l01Send@data
  3691  03F2  3021               	movlw	33
  3692  03F3  3188  2001  3183   	fcall	_nrf24l01Send
  3693                           
  3694                           ;nrf24l01.c: 393: n_FEATURE_t feature;;nrf24l01.c: 394: feature.byte = nrf24l01Send((uns
      +                          igned) 0b00000000 | (unsigned) 0x1D, 0);
  3695  03F6  0020               	movlb	0	; select bank0
  3696  03F7  01A0               	clrf	nrf24l01Send@data
  3697  03F8  301D               	movlw	29
  3698  03F9  3188  2001  3183   	fcall	_nrf24l01Send
  3699  03FC  0020               	movlb	0	; select bank0
  3700  03FD  00A7               	movwf	??_nrf24l01InitRegisters
  3701  03FE  0827               	movf	??_nrf24l01InitRegisters,w
  3702  03FF  00AB               	movwf	nrf24l01InitRegisters@feature
  3703                           
  3704                           ;nrf24l01.c: 395: feature.EN_DPL = 1;
  3705  0400  152B               	bsf	nrf24l01InitRegisters@feature,2
  3706                           
  3707                           ;nrf24l01.c: 396: feature.EN_DYN_ACK = 1;
  3708  0401  142B               	bsf	nrf24l01InitRegisters@feature,0
  3709                           
  3710                           ;nrf24l01.c: 397: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x1D, feature.byte);
  3711  0402  082B               	movf	nrf24l01InitRegisters@feature,w
  3712  0403  00A7               	movwf	??_nrf24l01InitRegisters
  3713  0404  0827               	movf	??_nrf24l01InitRegisters,w
  3714  0405  00A0               	movwf	nrf24l01Send@data
  3715  0406  303D               	movlw	61
  3716  0407  3188  2001  3183   	fcall	_nrf24l01Send
  3717                           
  3718                           ;nrf24l01.c: 399: n_DYNPD_t DynPD;;nrf24l01.c: 400: DynPD.byte = nrf24l01Send((unsigned)
      +                           0b00000000 | (unsigned) 0x1C, 0);
  3719  040A  0020               	movlb	0	; select bank0
  3720  040B  01A0               	clrf	nrf24l01Send@data
  3721  040C  301C               	movlw	28
  3722  040D  3188  2001  3183   	fcall	_nrf24l01Send
  3723  0410  0020               	movlb	0	; select bank0
  3724  0411  00A7               	movwf	??_nrf24l01InitRegisters
  3725  0412  0827               	movf	??_nrf24l01InitRegisters,w
  3726  0413  00AF               	movwf	nrf24l01InitRegisters@DynPD
  3727                           
  3728                           ;nrf24l01.c: 401: DynPD.DPL_P0 = 1;
  3729  0414  142F               	bsf	nrf24l01InitRegisters@DynPD,0
  3730                           
  3731                           ;nrf24l01.c: 402: DynPD.DPL_P1 = 1;
  3732  0415  14AF               	bsf	nrf24l01InitRegisters@DynPD,1
  3733                           
  3734                           ;nrf24l01.c: 403: DynPD.DPL_P2 = 1;
  3735  0416  152F               	bsf	nrf24l01InitRegisters@DynPD,2
  3736                           
  3737                           ;nrf24l01.c: 404: DynPD.DPL_P3 = 1;
  3738  0417  15AF               	bsf	nrf24l01InitRegisters@DynPD,3
  3739                           
  3740                           ;nrf24l01.c: 405: DynPD.DPL_P4 = 1;
  3741  0418  162F               	bsf	nrf24l01InitRegisters@DynPD,4
  3742                           
  3743                           ;nrf24l01.c: 406: DynPD.DPL_P5 = 1;
  3744  0419  16AF               	bsf	nrf24l01InitRegisters@DynPD,5
  3745                           
  3746                           ;nrf24l01.c: 407: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x1C, DynPD.byte);
  3747  041A  082F               	movf	nrf24l01InitRegisters@DynPD,w
  3748  041B  00A7               	movwf	??_nrf24l01InitRegisters
  3749  041C  0827               	movf	??_nrf24l01InitRegisters,w
  3750  041D  00A0               	movwf	nrf24l01Send@data
  3751  041E  303C               	movlw	60
  3752  041F  3188  2001  3183   	fcall	_nrf24l01Send
  3753                           
  3754                           ;nrf24l01.c: 410: unsigned int i;;nrf24l01.c: 411: for (i = 0; i < 6; i++){
  3755  0422  0020               	movlb	0	; select bank0
  3756  0423  01B1               	clrf	nrf24l01InitRegisters@i
  3757  0424  01B2               	clrf	nrf24l01InitRegisters@i+1
  3758  0425  3000               	movlw	0
  3759  0426  0232               	subwf	nrf24l01InitRegisters@i+1,w
  3760  0427  3006               	movlw	6
  3761  0428  1903               	skipnz
  3762  0429  0231               	subwf	nrf24l01InitRegisters@i,w
  3763  042A  1803               	btfsc	3,0
  3764  042B  2C85               	goto	l3303
  3765  042C                     l3289:	
  3766                           
  3767                           ;nrf24l01.c: 413: nrf24l01SPIStart();
  3768  042C  3196  268C  3183   	fcall	_nrf24l01SPIStart
  3769                           
  3770                           ;nrf24l01.c: 414: nrf24l01SPISend((unsigned) 0b00100000 | ((unsigned) 0x0A + i));
  3771  042F  0020               	movlb	0	; select bank0
  3772  0430  0831               	movf	nrf24l01InitRegisters@i,w
  3773  0431  3E0A               	addlw	10
  3774  0432  3820               	iorlw	32
  3775  0433  3196  269D  3183   	fcall	_nrf24l01SPISend
  3776                           
  3777                           ;nrf24l01.c: 416: nrf24l01SPISend(n_ADDRESS_P0[4] + (n_ADDRESS_MUL * i));
  3778  0436  301D               	movlw	low ((_n_ADDRESS_P0+4)| (0+32768))
  3779  0437  0084               	movwf	4
  3780  0438  3098               	movlw	high ((_n_ADDRESS_P0+4)| (0+32768))
  3781  0439  0085               	movwf	5
  3782  043A  0800               	movf	0,w	;code access
  3783  043B  0020               	movlb	0	; select bank0
  3784  043C  00A7               	movwf	??_nrf24l01InitRegisters
  3785  043D  0831               	movf	nrf24l01InitRegisters@i,w
  3786  043E  00A8               	movwf	??_nrf24l01InitRegisters+1
  3787  043F  0828               	movf	??_nrf24l01InitRegisters+1,w
  3788  0440  00A0               	movwf	___bmul@multiplicand
  3789  0441  3000               	movlw	low (_n_ADDRESS_MUL| (0+32768))
  3790  0442  0084               	movwf	4
  3791  0443  3098               	movlw	high (_n_ADDRESS_MUL| (0+32768))
  3792  0444  0085               	movwf	5
  3793  0445  0800               	movf	0,w	;code access
  3794  0446  3196  26B9  3183   	fcall	___bmul
  3795  0449  0020               	movlb	0	; select bank0
  3796  044A  0727               	addwf	??_nrf24l01InitRegisters,w
  3797  044B  3196  269D  3183   	fcall	_nrf24l01SPISend
  3798                           
  3799                           ;nrf24l01.c: 418: if (i < 2){
  3800  044E  3000               	movlw	0
  3801  044F  0020               	movlb	0	; select bank0
  3802  0450  0232               	subwf	nrf24l01InitRegisters@i+1,w
  3803  0451  3002               	movlw	2
  3804  0452  1903               	skipnz
  3805  0453  0231               	subwf	nrf24l01InitRegisters@i,w
  3806  0454  1803               	skipnc
  3807  0455  2C76               	goto	l3297
  3808                           
  3809                           ;nrf24l01.c: 419: nrf24l01SPISend(n_ADDRESS_P0[3]);
  3810  0456  301C               	movlw	low ((_n_ADDRESS_P0+3)| (0+32768))
  3811  0457  0084               	movwf	4
  3812  0458  3098               	movlw	high ((_n_ADDRESS_P0+3)| (0+32768))
  3813  0459  0085               	movwf	5
  3814  045A  0800               	movf	0,w	;code access
  3815  045B  3196  269D  3183   	fcall	_nrf24l01SPISend
  3816                           
  3817                           ;nrf24l01.c: 420: nrf24l01SPISend(n_ADDRESS_P0[2]);
  3818  045E  301B               	movlw	low ((_n_ADDRESS_P0+2)| (0+32768))
  3819  045F  0084               	movwf	4
  3820  0460  3098               	movlw	high ((_n_ADDRESS_P0+2)| (0+32768))
  3821  0461  0085               	movwf	5
  3822  0462  0800               	movf	0,w	;code access
  3823  0463  3196  269D  3183   	fcall	_nrf24l01SPISend
  3824                           
  3825                           ;nrf24l01.c: 421: nrf24l01SPISend(n_ADDRESS_P0[1]);
  3826  0466  301A               	movlw	low ((_n_ADDRESS_P0+1)| (0+32768))
  3827  0467  0084               	movwf	4
  3828  0468  3098               	movlw	high ((_n_ADDRESS_P0+1)| (0+32768))
  3829  0469  0085               	movwf	5
  3830  046A  0800               	movf	0,w	;code access
  3831  046B  3196  269D  3183   	fcall	_nrf24l01SPISend
  3832                           
  3833                           ;nrf24l01.c: 422: nrf24l01SPISend(n_ADDRESS_P0[0]);
  3834  046E  3019               	movlw	low (_n_ADDRESS_P0| (0+32768))
  3835  046F  0084               	movwf	4
  3836  0470  3098               	movlw	high (_n_ADDRESS_P0| (0+32768))
  3837  0471  0085               	movwf	5
  3838  0472  0800               	movf	0,w	;code access
  3839  0473  3196  269D  3183   	fcall	_nrf24l01SPISend
  3840  0476                     l3297:	
  3841                           
  3842                           ;nrf24l01.c: 423: };nrf24l01.c: 425: nrf24l01SPIEnd();
  3843  0476  3196  267D  3183   	fcall	_nrf24l01SPIEnd
  3844  0479  3001               	movlw	1
  3845  047A  0020               	movlb	0	; select bank0
  3846  047B  07B1               	addwf	nrf24l01InitRegisters@i,f
  3847  047C  3000               	movlw	0
  3848  047D  3DB2               	addwfc	nrf24l01InitRegisters@i+1,f
  3849  047E  3000               	movlw	0
  3850  047F  0232               	subwf	nrf24l01InitRegisters@i+1,w
  3851  0480  3006               	movlw	6
  3852  0481  1903               	skipnz
  3853  0482  0231               	subwf	nrf24l01InitRegisters@i,w
  3854  0483  1C03               	skipc
  3855  0484  2C2C               	goto	l3289
  3856  0485                     l3303:	
  3857                           
  3858                           ;nrf24l01.c: 426: };nrf24l01.c: 428: nrf24l01SetTXPipe(0);
  3859  0485  3000               	movlw	0
  3860  0486  318B  2370  3183   	fcall	_nrf24l01SetTXPipe
  3861                           
  3862                           ;nrf24l01.c: 432: n_STATUS_t status;;nrf24l01.c: 433: status.byte = 0x00;
  3863  0489  0020               	movlb	0	; select bank0
  3864  048A  01AD               	clrf	nrf24l01InitRegisters@status
  3865                           
  3866                           ;nrf24l01.c: 434: status.RX_DR = 1;
  3867  048B  172D               	bsf	nrf24l01InitRegisters@status,6
  3868                           
  3869                           ;nrf24l01.c: 435: status.TX_DS = 1;
  3870  048C  16AD               	bsf	nrf24l01InitRegisters@status,5
  3871                           
  3872                           ;nrf24l01.c: 436: status.MAX_RT = 1;
  3873  048D  162D               	bsf	nrf24l01InitRegisters@status,4
  3874                           
  3875                           ;nrf24l01.c: 437: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x07, status.byte);
  3876  048E  082D               	movf	nrf24l01InitRegisters@status,w
  3877  048F  00A7               	movwf	??_nrf24l01InitRegisters
  3878  0490  0827               	movf	??_nrf24l01InitRegisters,w
  3879  0491  00A0               	movwf	nrf24l01Send@data
  3880  0492  3027               	movlw	39
  3881  0493  3188  2001  3183   	fcall	_nrf24l01Send
  3882                           
  3883                           ;nrf24l01.c: 440: nrf24l01Send((unsigned) 0b11100001, 0);
  3884  0496  0020               	movlb	0	; select bank0
  3885  0497  01A0               	clrf	nrf24l01Send@data
  3886  0498  30E1               	movlw	225
  3887  0499  3188  2001  3183   	fcall	_nrf24l01Send
  3888                           
  3889                           ;nrf24l01.c: 441: nrf24l01Send((unsigned) 0b11100010, 0);
  3890  049C  0020               	movlb	0	; select bank0
  3891  049D  01A0               	clrf	nrf24l01Send@data
  3892  049E  30E2               	movlw	226
  3893  049F  3188  2001  3183   	fcall	_nrf24l01Send
  3894                           
  3895                           ;nrf24l01.c: 444: config.PRIM_RX = 1;
  3896  04A2  0020               	movlb	0	; select bank0
  3897  04A3  1430               	bsf	nrf24l01InitRegisters@config,0
  3898                           
  3899                           ;nrf24l01.c: 445: config.EN_CRC = 1;
  3900  04A4  15B0               	bsf	nrf24l01InitRegisters@config,3
  3901                           
  3902                           ;nrf24l01.c: 446: config.CRCO = 1;
  3903  04A5  1530               	bsf	nrf24l01InitRegisters@config,2
  3904                           
  3905                           ;nrf24l01.c: 447: config.PWR_UP = 1;
  3906  04A6  14B0               	bsf	nrf24l01InitRegisters@config,1
  3907                           
  3908                           ;nrf24l01.c: 448: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x00, config.byte);
  3909  04A7  0830               	movf	nrf24l01InitRegisters@config,w
  3910  04A8  00A7               	movwf	??_nrf24l01InitRegisters
  3911  04A9  0827               	movf	??_nrf24l01InitRegisters,w
  3912  04AA  00A0               	movwf	nrf24l01Send@data
  3913  04AB  3020               	movlw	32
  3914  04AC  3188  2001         	fcall	_nrf24l01Send
  3915  04AE  0008               	return
  3916  04AF                     __end_of_nrf24l01InitRegisters:	
  3917                           
  3918                           	psect	text5
  3919  0821                     __ptext5:	
  3920 ;; *************** function _nrf24l01SetRXPipe *****************
  3921 ;; Defined at:
  3922 ;;		line 331 in file "nrf24l01.c"
  3923 ;; Parameters:    Size  Location     Type
  3924 ;;  pipe            1    wreg     unsigned char 
  3925 ;; Auto vars:     Size  Location     Type
  3926 ;;  pipe            1    5[BANK0 ] unsigned char 
  3927 ;;  enRXAddr        1    6[BANK0 ] struct .
  3928 ;; Return value:  Size  Location     Type
  3929 ;;                  1    wreg      void 
  3930 ;; Registers used:
  3931 ;;		wreg, status,2, status,0, pclath, cstack
  3932 ;; Tracked objects:
  3933 ;;		On entry : 0/0
  3934 ;;		On exit  : 0/0
  3935 ;;		Unchanged: 0/0
  3936 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3937 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3938 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3939 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3940 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3941 ;;Total ram usage:        4 bytes
  3942 ;; Hardware stack levels used:    1
  3943 ;; Hardware stack levels required when called:   10
  3944 ;; This function calls:
  3945 ;;		_nrf24l01Send
  3946 ;; This function is called by:
  3947 ;;		_main
  3948 ;;		_nrf24l01InitRegisters
  3949 ;; This function uses a non-reentrant model
  3950 ;;
  3951                           
  3952                           
  3953                           ;psect for function _nrf24l01SetRXPipe
  3954  0821                     _nrf24l01SetRXPipe:	
  3955                           
  3956                           ;incstack = 0
  3957                           ; Regs used in _nrf24l01SetRXPipe: [wreg+status,2+status,0+pclath+cstack]
  3958                           ;nrf24l01SetRXPipe@pipe stored from wreg
  3959  0821  0020               	movlb	0	; select bank0
  3960  0822  00A5               	movwf	nrf24l01SetRXPipe@pipe
  3961                           
  3962                           ;nrf24l01.c: 333: n_EN_RXADDR_t enRXAddr;;nrf24l01.c: 335: if (pipe > 5){
  3963  0823  3006               	movlw	6
  3964  0824  0225               	subwf	nrf24l01SetRXPipe@pipe,w
  3965  0825  1C03               	skipc
  3966  0826  282E               	goto	l334
  3967                           
  3968                           ;nrf24l01.c: 336: enRXAddr.ERX_P0 = 1;
  3969  0827  1426               	bsf	nrf24l01SetRXPipe@enRXAddr,0
  3970                           
  3971                           ;nrf24l01.c: 337: enRXAddr.ERX_P1 = 1;
  3972  0828  14A6               	bsf	nrf24l01SetRXPipe@enRXAddr,1
  3973                           
  3974                           ;nrf24l01.c: 338: enRXAddr.ERX_P2 = 1;
  3975  0829  1526               	bsf	nrf24l01SetRXPipe@enRXAddr,2
  3976                           
  3977                           ;nrf24l01.c: 339: enRXAddr.ERX_P3 = 1;
  3978  082A  15A6               	bsf	nrf24l01SetRXPipe@enRXAddr,3
  3979                           
  3980                           ;nrf24l01.c: 340: enRXAddr.ERX_P4 = 1;
  3981  082B  1626               	bsf	nrf24l01SetRXPipe@enRXAddr,4
  3982                           
  3983                           ;nrf24l01.c: 341: enRXAddr.ERX_P5 = 1;
  3984  082C  16A6               	bsf	nrf24l01SetRXPipe@enRXAddr,5
  3985                           
  3986                           ;nrf24l01.c: 342: }
  3987  082D  283A               	goto	l2969
  3988  082E                     l334:	
  3989                           
  3990                           ;nrf24l01.c: 344: else{;nrf24l01.c: 345: enRXAddr.ERX_P0 = 1;
  3991  082E  1426               	bsf	nrf24l01SetRXPipe@enRXAddr,0
  3992                           
  3993                           ;nrf24l01.c: 346: enRXAddr.byte = (unsigned) enRXAddr.byte << pipe;
  3994  082F  0826               	movf	nrf24l01SetRXPipe@enRXAddr,w
  3995  0830  00A3               	movwf	??_nrf24l01SetRXPipe
  3996  0831  0A25               	incf	nrf24l01SetRXPipe@pipe,w
  3997  0832  2834               	goto	u3034
  3998  0833                     u3035:	
  3999  0833  35A3               	lslf	??_nrf24l01SetRXPipe,f
  4000  0834                     u3034:	
  4001  0834  0B89               	decfsz	9,f
  4002  0835  2833               	goto	u3035
  4003  0836  0823               	movf	??_nrf24l01SetRXPipe,w
  4004  0837  00A4               	movwf	??_nrf24l01SetRXPipe+1
  4005  0838  0824               	movf	??_nrf24l01SetRXPipe+1,w
  4006  0839  00A6               	movwf	nrf24l01SetRXPipe@enRXAddr
  4007  083A                     l2969:	
  4008                           
  4009                           ;nrf24l01.c: 347: };nrf24l01.c: 349: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x0
      +                          2, enRXAddr.byte);
  4010  083A  0826               	movf	nrf24l01SetRXPipe@enRXAddr,w
  4011  083B  00A3               	movwf	??_nrf24l01SetRXPipe
  4012  083C  0823               	movf	??_nrf24l01SetRXPipe,w
  4013  083D  00A0               	movwf	nrf24l01Send@data
  4014  083E  3022               	movlw	34
  4015  083F  3188  2001         	fcall	_nrf24l01Send
  4016  0841  0008               	return
  4017  0842                     __end_of_nrf24l01SetRXPipe:	
  4018                           
  4019                           	psect	text6
  4020  09BA                     __ptext6:	
  4021 ;; *************** function _nrf24l01GetPipe *****************
  4022 ;; Defined at:
  4023 ;;		line 233 in file "main.c"
  4024 ;; Parameters:    Size  Location     Type
  4025 ;;  name            1    wreg     PTR unsigned char 
  4026 ;;		 -> romDataMap(28), 
  4027 ;; Auto vars:     Size  Location     Type
  4028 ;;  name            1    9[BANK0 ] PTR unsigned char 
  4029 ;;		 -> romDataMap(28), 
  4030 ;;  i               1   10[BANK0 ] unsigned char 
  4031 ;;  pipe            1    8[BANK0 ] unsigned char 
  4032 ;; Return value:  Size  Location     Type
  4033 ;;                  1    wreg      unsigned char 
  4034 ;; Registers used:
  4035 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4036 ;; Tracked objects:
  4037 ;;		On entry : 0/0
  4038 ;;		On exit  : 0/0
  4039 ;;		Unchanged: 0/0
  4040 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4041 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4042 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4043 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4044 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4045 ;;Total ram usage:        5 bytes
  4046 ;; Hardware stack levels used:    1
  4047 ;; Hardware stack levels required when called:    8
  4048 ;; This function calls:
  4049 ;;		___lwmod
  4050 ;;		_strlen
  4051 ;; This function is called by:
  4052 ;;		_main
  4053 ;; This function uses a non-reentrant model
  4054 ;;
  4055                           
  4056                           
  4057                           ;psect for function _nrf24l01GetPipe
  4058  09BA                     _nrf24l01GetPipe:	
  4059                           
  4060                           ;incstack = 0
  4061                           ; Regs used in _nrf24l01GetPipe: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4062                           ;nrf24l01GetPipe@name stored from wreg
  4063  09BA  0020               	movlb	0	; select bank0
  4064  09BB  00A9               	movwf	nrf24l01GetPipe@name
  4065                           
  4066                           ;main.c: 234: unsigned char pipe = 0;
  4067  09BC  01A8               	clrf	nrf24l01GetPipe@pipe
  4068                           
  4069                           ;main.c: 235: unsigned char i = 0;
  4070  09BD  01AA               	clrf	nrf24l01GetPipe@i
  4071                           
  4072                           ;main.c: 238: for (i = 0; i < strlen(name); i++){
  4073  09BE  01AA               	clrf	nrf24l01GetPipe@i
  4074  09BF                     l3473:	
  4075  09BF  0829               	movf	nrf24l01GetPipe@name,w
  4076  09C0  00A0               	movwf	strlen@s
  4077  09C1  3001               	movlw	1
  4078  09C2  00A1               	movwf	strlen@s+1
  4079  09C3  3197  27E1  3189   	fcall	_strlen
  4080  09C6  0020               	movlb	0	; select bank0
  4081  09C7  082A               	movf	nrf24l01GetPipe@i,w
  4082  09C8  00A6               	movwf	??_nrf24l01GetPipe
  4083  09C9  01A7               	clrf	??_nrf24l01GetPipe+1
  4084  09CA  0821               	movf	?_strlen+1,w
  4085  09CB  0227               	subwf	??_nrf24l01GetPipe+1,w
  4086  09CC  1D03               	skipz
  4087  09CD  29D0               	goto	u3525
  4088  09CE  0820               	movf	?_strlen,w
  4089  09CF  0226               	subwf	??_nrf24l01GetPipe,w
  4090  09D0                     u3525:	
  4091  09D0  1803               	btfsc	3,0
  4092  09D1  29E2               	goto	l3475
  4093                           
  4094                           ;main.c: 239: pipe+= name[i];
  4095  09D2  082A               	movf	nrf24l01GetPipe@i,w
  4096  09D3  0729               	addwf	nrf24l01GetPipe@name,w
  4097  09D4  00A6               	movwf	??_nrf24l01GetPipe
  4098  09D5  0826               	movf	??_nrf24l01GetPipe,w
  4099  09D6  0086               	movwf	6
  4100  09D7  3001               	movlw	1	; select bank2/3
  4101  09D8  0087               	movwf	7
  4102  09D9  0801               	movf	1,w
  4103  09DA  00A7               	movwf	??_nrf24l01GetPipe+1
  4104  09DB  0827               	movf	??_nrf24l01GetPipe+1,w
  4105  09DC  07A8               	addwf	nrf24l01GetPipe@pipe,f
  4106  09DD  3001               	movlw	1
  4107  09DE  00A6               	movwf	??_nrf24l01GetPipe
  4108  09DF  0826               	movf	??_nrf24l01GetPipe,w
  4109  09E0  07AA               	addwf	nrf24l01GetPipe@i,f
  4110  09E1  29BF               	goto	l3473
  4111  09E2                     l3475:	
  4112                           
  4113                           ;main.c: 240: };main.c: 242: return (unsigned) pipe % 6;
  4114  09E2  3006               	movlw	6
  4115  09E3  00A0               	movwf	___lwmod@divisor
  4116  09E4  3000               	movlw	0
  4117  09E5  00A1               	movwf	___lwmod@divisor+1
  4118  09E6  0828               	movf	nrf24l01GetPipe@pipe,w
  4119  09E7  00A6               	movwf	??_nrf24l01GetPipe
  4120  09E8  01A7               	clrf	??_nrf24l01GetPipe+1
  4121  09E9  0826               	movf	??_nrf24l01GetPipe,w
  4122  09EA  00A2               	movwf	___lwmod@dividend
  4123  09EB  0827               	movf	??_nrf24l01GetPipe+1,w
  4124  09EC  00A3               	movwf	___lwmod@dividend+1
  4125  09ED  3189  212A         	fcall	___lwmod
  4126  09EF  0020               	movlb	0	; select bank0
  4127  09F0  0820               	movf	?___lwmod,w
  4128  09F1  0008               	return
  4129  09F2                     __end_of_nrf24l01GetPipe:	
  4130                           
  4131                           	psect	text7
  4132  092A                     __ptext7:	
  4133 ;; *************** function ___lwmod *****************
  4134 ;; Defined at:
  4135 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\lwmod.c"
  4136 ;; Parameters:    Size  Location     Type
  4137 ;;  divisor         2    0[BANK0 ] unsigned int 
  4138 ;;  dividend        2    2[BANK0 ] unsigned int 
  4139 ;; Auto vars:     Size  Location     Type
  4140 ;;  counter         1    5[BANK0 ] unsigned char 
  4141 ;; Return value:  Size  Location     Type
  4142 ;;                  2    0[BANK0 ] unsigned int 
  4143 ;; Registers used:
  4144 ;;		wreg, status,2, status,0
  4145 ;; Tracked objects:
  4146 ;;		On entry : 0/0
  4147 ;;		On exit  : 0/0
  4148 ;;		Unchanged: 0/0
  4149 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4150 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4151 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4152 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4153 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4154 ;;Total ram usage:        6 bytes
  4155 ;; Hardware stack levels used:    1
  4156 ;; Hardware stack levels required when called:    7
  4157 ;; This function calls:
  4158 ;;		Nothing
  4159 ;; This function is called by:
  4160 ;;		_nrf24l01GetPipe
  4161 ;; This function uses a non-reentrant model
  4162 ;;
  4163                           
  4164                           
  4165                           ;psect for function ___lwmod
  4166  092A                     ___lwmod:	
  4167                           
  4168                           ;incstack = 0
  4169                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  4170  092A  0020               	movlb	0	; select bank0
  4171  092B  0820               	movf	___lwmod@divisor,w
  4172  092C  0421               	iorwf	___lwmod@divisor+1,w
  4173  092D  1903               	btfsc	3,2
  4174  092E  2952               	goto	l3351
  4175  092F  01A5               	clrf	___lwmod@counter
  4176  0930  0AA5               	incf	___lwmod@counter,f
  4177  0931                     l3341:	
  4178  0931  1BA1               	btfsc	___lwmod@divisor+1,7
  4179  0932  293D               	goto	l3343
  4180  0933  3001               	movlw	1
  4181  0934                     u3405:	
  4182  0934  35A0               	lslf	___lwmod@divisor,f
  4183  0935  0DA1               	rlf	___lwmod@divisor+1,f
  4184  0936  0B89               	decfsz	9,f
  4185  0937  2934               	goto	u3405
  4186  0938  3001               	movlw	1
  4187  0939  00A4               	movwf	??___lwmod
  4188  093A  0824               	movf	??___lwmod,w
  4189  093B  07A5               	addwf	___lwmod@counter,f
  4190  093C  2931               	goto	l3341
  4191  093D                     l3343:	
  4192  093D  0821               	movf	___lwmod@divisor+1,w
  4193  093E  0223               	subwf	___lwmod@dividend+1,w
  4194  093F  1D03               	skipz
  4195  0940  2943               	goto	u3425
  4196  0941  0820               	movf	___lwmod@divisor,w
  4197  0942  0222               	subwf	___lwmod@dividend,w
  4198  0943                     u3425:	
  4199  0943  1C03               	skipc
  4200  0944  2949               	goto	l3347
  4201  0945  0820               	movf	___lwmod@divisor,w
  4202  0946  02A2               	subwf	___lwmod@dividend,f
  4203  0947  0821               	movf	___lwmod@divisor+1,w
  4204  0948  3BA3               	subwfb	___lwmod@dividend+1,f
  4205  0949                     l3347:	
  4206  0949  3001               	movlw	1
  4207  094A                     u3435:	
  4208  094A  36A1               	lsrf	___lwmod@divisor+1,f
  4209  094B  0CA0               	rrf	___lwmod@divisor,f
  4210  094C  0B89               	decfsz	9,f
  4211  094D  294A               	goto	u3435
  4212  094E  3001               	movlw	1
  4213  094F  02A5               	subwf	___lwmod@counter,f
  4214  0950  1D03               	btfss	3,2
  4215  0951  293D               	goto	l3343
  4216  0952                     l3351:	
  4217  0952  0823               	movf	___lwmod@dividend+1,w
  4218  0953  00A1               	movwf	?___lwmod+1
  4219  0954  0822               	movf	___lwmod@dividend,w
  4220  0955  00A0               	movwf	?___lwmod
  4221  0956  0008               	return
  4222  0957                     __end_of___lwmod:	
  4223                           
  4224                           	psect	text8
  4225  01FA                     __ptext8:	
  4226 ;; *************** function _loop *****************
  4227 ;; Defined at:
  4228 ;;		line 165 in file "main.c"
  4229 ;; Parameters:    Size  Location     Type
  4230 ;;		None
  4231 ;; Auto vars:     Size  Location     Type
  4232 ;;  packet         33   15[BANK2 ] struct .
  4233 ;;  ta              3    3[BANK2 ] float 
  4234 ;;  vt              3    0[BANK2 ] float 
  4235 ;;  rfSetup         1   14[BANK2 ] struct .
  4236 ;; Return value:  Size  Location     Type
  4237 ;;                  1    wreg      void 
  4238 ;; Registers used:
  4239 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4240 ;; Tracked objects:
  4241 ;;		On entry : 0/0
  4242 ;;		On exit  : 0/0
  4243 ;;		Unchanged: 0/0
  4244 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4245 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4246 ;;      Locals:         0       0       0      48       0       0       0       0       0       0       0       0       
      +0       0
  4247 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  4248 ;;      Totals:         0       0       1      48       0       0       0       0       0       0       0       0       
      +0       0
  4249 ;;Total ram usage:       49 bytes
  4250 ;; Hardware stack levels used:    1
  4251 ;; Hardware stack levels required when called:   15
  4252 ;; This function calls:
  4253 ;;		___awtoft
  4254 ;;		___ftadd
  4255 ;;		___ftdiv
  4256 ;;		___ftmul
  4257 ;;		___ftneg
  4258 ;;		___lbtoft
  4259 ;;		_checkTXPower
  4260 ;;		_getADCValue
  4261 ;;		_nrf24l01Send
  4262 ;;		_nrf24l01SendPacket
  4263 ;;		_setMessage
  4264 ;;		_sleep
  4265 ;; This function is called by:
  4266 ;;		_main
  4267 ;; This function uses a non-reentrant model
  4268 ;;
  4269                           
  4270                           
  4271                           ;psect for function _loop
  4272  01FA                     _loop:	
  4273                           
  4274                           ;main.c: 168: nrf24l01Packet_t packet;;main.c: 170: setMessage(&packet, "DBG", counter);
  4275                           
  4276                           ;incstack = 0
  4277                           ; Regs used in _loop: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4278  01FA  302F               	movlw	low loop@packet
  4279  01FB  0021               	movlb	1	; select bank1
  4280  01FC  00B9               	movwf	setMessage@packet^(0+128)
  4281  01FD  3001               	movlw	high loop@packet
  4282  01FE  00BA               	movwf	(setMessage@packet+1)^(0+128)
  4283  01FF  3031               	movlw	low (STR_3| (0+32768))
  4284  0200  00BB               	movwf	setMessage@topic^(0+128)
  4285  0201  3098               	movlw	high (STR_3| (0+32768))
  4286  0202  00BC               	movwf	(setMessage@topic^(0+128)+1)
  4287  0203  0022               	movlb	2	; select bank2
  4288  0204  0850               	movf	_counter^(0+256),w
  4289  0205  0021               	movlb	1	; select bank1
  4290  0206  00BD               	movwf	setMessage@value^(0+128)
  4291  0207  0022               	movlb	2	; select bank2
  4292  0208  0851               	movf	(_counter+1)^(0+256),w
  4293  0209  0021               	movlb	1	; select bank1
  4294  020A  00BE               	movwf	(setMessage@value+1)^(0+128)
  4295  020B  0022               	movlb	2	; select bank2
  4296  020C  0852               	movf	(_counter+2)^(0+256),w
  4297  020D  0021               	movlb	1	; select bank1
  4298  020E  00BF               	movwf	(setMessage@value+2)^(0+128)
  4299  020F  318D  2502  3181   	fcall	_setMessage
  4300                           
  4301                           ;main.c: 171: packet.packetData.byte = 0;
  4302  0212  0022               	movlb	2	; select bank2
  4303  0213  01AF               	clrf	loop@packet^(0+256)
  4304                           
  4305                           ;main.c: 172: packet.packetData.ACKRequest = 0;
  4306  0214  112F               	bcf	loop@packet^(0+256),2
  4307                           
  4308                           ;main.c: 173: nrf24l01SendPacket(&packet);
  4309  0215  302F               	movlw	low loop@packet
  4310  0216  0020               	movlb	0	; select bank0
  4311  0217  00A7               	movwf	nrf24l01SendPacket@Packet
  4312  0218  3001               	movlw	high loop@packet
  4313  0219  00A8               	movwf	nrf24l01SendPacket@Packet+1
  4314  021A  3186  2697  3181   	fcall	_nrf24l01SendPacket
  4315                           
  4316                           ;main.c: 174: checkTXPower();
  4317  021D  3196  26DD  3181   	fcall	_checkTXPower
  4318                           
  4319                           ;main.c: 175: sleep(2000);
  4320  0220  30D0               	movlw	208
  4321  0221  0020               	movlb	0	; select bank0
  4322  0222  00B2               	movwf	sleep@milliseconds
  4323  0223  3007               	movlw	7
  4324  0224  00B3               	movwf	sleep@milliseconds+1
  4325  0225  318A  222E  3181   	fcall	_sleep
  4326                           
  4327                           ;main.c: 179: FVRCONbits.TSEN = 1;
  4328  0228  0022               	movlb	2	; select bank2
  4329  0229  1697               	bsf	23,5	;volatile
  4330                           
  4331                           ;main.c: 180: float vt = (2.048 - getADCValue(0b111101)) / (FVRCONbits.TSRNG ? 2 : 4);
  4332  022A  1A17               	btfsc	23,4	;volatile
  4333  022B  2A2E               	goto	l3405
  4334  022C  3004               	movlw	4
  4335  022D  2A2F               	goto	L1
  4336  022E                     l3405:	
  4337  022E  3002               	movlw	2
  4338  022F                     L1:	
  4339  022F  00AC               	movwf	_loop$877^(0+256)
  4340  0230  3000               	movlw	0
  4341  0231  00AD               	movwf	(_loop$877^(0+256)+1)
  4342  0232  303D               	movlw	61
  4343  0233  318D  256A  3181   	fcall	_getADCValue
  4344  0236  0020               	movlb	0	; select bank0
  4345  0237  084B               	movf	?_getADCValue,w
  4346  0238  00D7               	movwf	___ftneg@f1
  4347  0239  084C               	movf	?_getADCValue+1,w
  4348  023A  00D8               	movwf	___ftneg@f1+1
  4349  023B  084D               	movf	?_getADCValue+2,w
  4350  023C  00D9               	movwf	___ftneg@f1+2
  4351  023D  3196  2694  3181   	fcall	___ftneg
  4352  0240  0020               	movlb	0	; select bank0
  4353  0241  0857               	movf	?___ftneg,w
  4354  0242  0022               	movlb	2	; select bank2
  4355  0243  00A6               	movwf	_loop$2063^(0+256)
  4356  0244  0020               	movlb	0	; select bank0
  4357  0245  0858               	movf	?___ftneg+1,w
  4358  0246  0022               	movlb	2	; select bank2
  4359  0247  00A7               	movwf	(_loop$2063+1)^(0+256)
  4360  0248  0020               	movlb	0	; select bank0
  4361  0249  0859               	movf	?___ftneg+2,w
  4362  024A  0022               	movlb	2	; select bank2
  4363  024B  00A8               	movwf	(_loop$2063+2)^(0+256)
  4364  024C  082D               	movf	(_loop$877+1)^(0+256),w
  4365  024D  0020               	movlb	0	; select bank0
  4366  024E  00A9               	movwf	___awtoft@c+1
  4367  024F  0022               	movlb	2	; select bank2
  4368  0250  082C               	movf	_loop$877^(0+256),w
  4369  0251  0020               	movlb	0	; select bank0
  4370  0252  00A8               	movwf	___awtoft@c
  4371  0253  3188  2042  3181   	fcall	___awtoft
  4372  0256  0020               	movlb	0	; select bank0
  4373  0257  0828               	movf	?___awtoft,w
  4374  0258  00BB               	movwf	___ftdiv@f2
  4375  0259  0829               	movf	?___awtoft+1,w
  4376  025A  00BC               	movwf	___ftdiv@f2+1
  4377  025B  082A               	movf	?___awtoft+2,w
  4378  025C  00BD               	movwf	___ftdiv@f2+2
  4379  025D  3012               	movlw	18
  4380  025E  00AE               	movwf	___ftadd@f1
  4381  025F  3003               	movlw	3
  4382  0260  00AF               	movwf	___ftadd@f1+1
  4383  0261  3040               	movlw	64
  4384  0262  00B0               	movwf	___ftadd@f1+2
  4385  0263  0022               	movlb	2	; select bank2
  4386  0264  0826               	movf	_loop$2063^(0+256),w
  4387  0265  0020               	movlb	0	; select bank0
  4388  0266  00B1               	movwf	___ftadd@f2
  4389  0267  0022               	movlb	2	; select bank2
  4390  0268  0827               	movf	(_loop$2063+1)^(0+256),w
  4391  0269  0020               	movlb	0	; select bank0
  4392  026A  00B2               	movwf	___ftadd@f2+1
  4393  026B  0022               	movlb	2	; select bank2
  4394  026C  0828               	movf	(_loop$2063+2)^(0+256),w
  4395  026D  0020               	movlb	0	; select bank0
  4396  026E  00B3               	movwf	___ftadd@f2+2
  4397  026F  3184  24AF  3181   	fcall	___ftadd
  4398  0272  0020               	movlb	0	; select bank0
  4399  0273  082E               	movf	?___ftadd,w
  4400  0274  00BE               	movwf	___ftdiv@f1
  4401  0275  082F               	movf	?___ftadd+1,w
  4402  0276  00BF               	movwf	___ftdiv@f1+1
  4403  0277  0830               	movf	?___ftadd+2,w
  4404  0278  00C0               	movwf	___ftdiv@f1+2
  4405  0279  318E  26A3  3181   	fcall	___ftdiv
  4406  027C  0020               	movlb	0	; select bank0
  4407  027D  083B               	movf	?___ftdiv,w
  4408  027E  0022               	movlb	2	; select bank2
  4409  027F  00A0               	movwf	loop@vt^(0+256)
  4410  0280  0020               	movlb	0	; select bank0
  4411  0281  083C               	movf	?___ftdiv+1,w
  4412  0282  0022               	movlb	2	; select bank2
  4413  0283  00A1               	movwf	(loop@vt+1)^(0+256)
  4414  0284  0020               	movlb	0	; select bank0
  4415  0285  083D               	movf	?___ftdiv+2,w
  4416  0286  0022               	movlb	2	; select bank2
  4417  0287  00A2               	movwf	(loop@vt+2)^(0+256)
  4418                           
  4419                           ;main.c: 181: FVRCONbits.TSEN = 0;
  4420  0288  1297               	bcf	23,5	;volatile
  4421                           
  4422                           ;main.c: 189: float ta = (vt / -0.0014) - (0.6063 / -0.0014) - 40 + 14.8;
  4423  0289  30F0               	movlw	240
  4424  028A  0020               	movlb	0	; select bank0
  4425  028B  00AE               	movwf	___ftadd@f1
  4426  028C  30CB               	movlw	203
  4427  028D  00AF               	movwf	___ftadd@f1+1
  4428  028E  3043               	movlw	67
  4429  028F  00B0               	movwf	___ftadd@f1+2
  4430  0290  3080               	movlw	128
  4431  0291  00BB               	movwf	___ftdiv@f2
  4432  0292  30B7               	movlw	183
  4433  0293  00BC               	movwf	___ftdiv@f2+1
  4434  0294  30BA               	movlw	186
  4435  0295  00BD               	movwf	___ftdiv@f2+2
  4436  0296  0022               	movlb	2	; select bank2
  4437  0297  0820               	movf	loop@vt^(0+256),w
  4438  0298  0020               	movlb	0	; select bank0
  4439  0299  00BE               	movwf	___ftdiv@f1
  4440  029A  0022               	movlb	2	; select bank2
  4441  029B  0821               	movf	(loop@vt+1)^(0+256),w
  4442  029C  0020               	movlb	0	; select bank0
  4443  029D  00BF               	movwf	___ftdiv@f1+1
  4444  029E  0022               	movlb	2	; select bank2
  4445  029F  0822               	movf	(loop@vt+2)^(0+256),w
  4446  02A0  0020               	movlb	0	; select bank0
  4447  02A1  00C0               	movwf	___ftdiv@f1+2
  4448  02A2  318E  26A3  3181   	fcall	___ftdiv
  4449  02A5  0020               	movlb	0	; select bank0
  4450  02A6  083B               	movf	?___ftdiv,w
  4451  02A7  00B1               	movwf	___ftadd@f2
  4452  02A8  083C               	movf	?___ftdiv+1,w
  4453  02A9  00B2               	movwf	___ftadd@f2+1
  4454  02AA  083D               	movf	?___ftdiv+2,w
  4455  02AB  00B3               	movwf	___ftadd@f2+2
  4456  02AC  3184  24AF  3181   	fcall	___ftadd
  4457  02AF  0020               	movlb	0	; select bank0
  4458  02B0  082E               	movf	?___ftadd,w
  4459  02B1  0022               	movlb	2	; select bank2
  4460  02B2  00A3               	movwf	loop@ta^(0+256)
  4461  02B3  0020               	movlb	0	; select bank0
  4462  02B4  082F               	movf	?___ftadd+1,w
  4463  02B5  0022               	movlb	2	; select bank2
  4464  02B6  00A4               	movwf	(loop@ta+1)^(0+256)
  4465  02B7  0020               	movlb	0	; select bank0
  4466  02B8  0830               	movf	?___ftadd+2,w
  4467  02B9  0022               	movlb	2	; select bank2
  4468  02BA  00A5               	movwf	(loop@ta+2)^(0+256)
  4469                           
  4470                           ;main.c: 191: setMessage(&packet, "TEMP", ta);
  4471  02BB  302F               	movlw	low loop@packet
  4472  02BC  0021               	movlb	1	; select bank1
  4473  02BD  00B9               	movwf	setMessage@packet^(0+128)
  4474  02BE  3001               	movlw	high loop@packet
  4475  02BF  00BA               	movwf	(setMessage@packet+1)^(0+128)
  4476  02C0  301E               	movlw	low (STR_4| (0+32768))
  4477  02C1  00BB               	movwf	setMessage@topic^(0+128)
  4478  02C2  3098               	movlw	high (STR_4| (0+32768))
  4479  02C3  00BC               	movwf	(setMessage@topic^(0+128)+1)
  4480  02C4  0022               	movlb	2	; select bank2
  4481  02C5  0823               	movf	loop@ta^(0+256),w
  4482  02C6  0021               	movlb	1	; select bank1
  4483  02C7  00BD               	movwf	setMessage@value^(0+128)
  4484  02C8  0022               	movlb	2	; select bank2
  4485  02C9  0824               	movf	(loop@ta+1)^(0+256),w
  4486  02CA  0021               	movlb	1	; select bank1
  4487  02CB  00BE               	movwf	(setMessage@value+1)^(0+128)
  4488  02CC  0022               	movlb	2	; select bank2
  4489  02CD  0825               	movf	(loop@ta+2)^(0+256),w
  4490  02CE  0021               	movlb	1	; select bank1
  4491  02CF  00BF               	movwf	(setMessage@value+2)^(0+128)
  4492  02D0  318D  2502  3181   	fcall	_setMessage
  4493                           
  4494                           ;main.c: 192: packet.packetData.byte = 0;
  4495  02D3  0022               	movlb	2	; select bank2
  4496  02D4  01AF               	clrf	loop@packet^(0+256)
  4497                           
  4498                           ;main.c: 193: packet.packetData.ACKRequest = 0;
  4499  02D5  112F               	bcf	loop@packet^(0+256),2
  4500                           
  4501                           ;main.c: 194: nrf24l01SendPacket(&packet);
  4502  02D6  302F               	movlw	low loop@packet
  4503  02D7  0020               	movlb	0	; select bank0
  4504  02D8  00A7               	movwf	nrf24l01SendPacket@Packet
  4505  02D9  3001               	movlw	high loop@packet
  4506  02DA  00A8               	movwf	nrf24l01SendPacket@Packet+1
  4507  02DB  3186  2697  3181   	fcall	_nrf24l01SendPacket
  4508                           
  4509                           ;main.c: 195: checkTXPower();
  4510  02DE  3196  26DD  3181   	fcall	_checkTXPower
  4511                           
  4512                           ;main.c: 196: sleep(2000);
  4513  02E1  30D0               	movlw	208
  4514  02E2  0020               	movlb	0	; select bank0
  4515  02E3  00B2               	movwf	sleep@milliseconds
  4516  02E4  3007               	movlw	7
  4517  02E5  00B3               	movwf	sleep@milliseconds+1
  4518  02E6  318A  222E  3181   	fcall	_sleep
  4519                           
  4520                           ;main.c: 203: setMessage(&packet, "VBAT", getADCValue(0b000100) * 3.106382978723404);
  4521  02E9  30CF               	movlw	207
  4522  02EA  0020               	movlb	0	; select bank0
  4523  02EB  00D7               	movwf	___ftmul@f1
  4524  02EC  3046               	movlw	70
  4525  02ED  00D8               	movwf	___ftmul@f1+1
  4526  02EE  3040               	movlw	64
  4527  02EF  00D9               	movwf	___ftmul@f1+2
  4528  02F0  3004               	movlw	4
  4529  02F1  318D  256A  3181   	fcall	_getADCValue
  4530  02F4  0020               	movlb	0	; select bank0
  4531  02F5  084B               	movf	?_getADCValue,w
  4532  02F6  00DA               	movwf	___ftmul@f2
  4533  02F7  084C               	movf	?_getADCValue+1,w
  4534  02F8  00DB               	movwf	___ftmul@f2+1
  4535  02F9  084D               	movf	?_getADCValue+2,w
  4536  02FA  00DC               	movwf	___ftmul@f2+2
  4537  02FB  318F  274C  3181   	fcall	___ftmul
  4538  02FE  0020               	movlb	0	; select bank0
  4539  02FF  0857               	movf	?___ftmul,w
  4540  0300  0022               	movlb	2	; select bank2
  4541  0301  00A9               	movwf	_loop$2064^(0+256)
  4542  0302  0020               	movlb	0	; select bank0
  4543  0303  0858               	movf	?___ftmul+1,w
  4544  0304  0022               	movlb	2	; select bank2
  4545  0305  00AA               	movwf	(_loop$2064+1)^(0+256)
  4546  0306  0020               	movlb	0	; select bank0
  4547  0307  0859               	movf	?___ftmul+2,w
  4548  0308  0022               	movlb	2	; select bank2
  4549  0309  00AB               	movwf	(_loop$2064+2)^(0+256)
  4550                           
  4551                           ;main.c: 203: setMessage(&packet, "VBAT", getADCValue(0b000100) * 3.106382978723404);
  4552  030A  302F               	movlw	low loop@packet
  4553  030B  0021               	movlb	1	; select bank1
  4554  030C  00B9               	movwf	setMessage@packet^(0+128)
  4555  030D  3001               	movlw	high loop@packet
  4556  030E  00BA               	movwf	(setMessage@packet+1)^(0+128)
  4557  030F  3023               	movlw	low (STR_5| (0+32768))
  4558  0310  00BB               	movwf	setMessage@topic^(0+128)
  4559  0311  3098               	movlw	high (STR_5| (0+32768))
  4560  0312  00BC               	movwf	(setMessage@topic^(0+128)+1)
  4561  0313  0022               	movlb	2	; select bank2
  4562  0314  0829               	movf	_loop$2064^(0+256),w
  4563  0315  0021               	movlb	1	; select bank1
  4564  0316  00BD               	movwf	setMessage@value^(0+128)
  4565  0317  0022               	movlb	2	; select bank2
  4566  0318  082A               	movf	(_loop$2064+1)^(0+256),w
  4567  0319  0021               	movlb	1	; select bank1
  4568  031A  00BE               	movwf	(setMessage@value+1)^(0+128)
  4569  031B  0022               	movlb	2	; select bank2
  4570  031C  082B               	movf	(_loop$2064+2)^(0+256),w
  4571  031D  0021               	movlb	1	; select bank1
  4572  031E  00BF               	movwf	(setMessage@value+2)^(0+128)
  4573  031F  318D  2502  3181   	fcall	_setMessage
  4574                           
  4575                           ;main.c: 204: packet.packetData.byte = 0;
  4576  0322  0022               	movlb	2	; select bank2
  4577  0323  01AF               	clrf	loop@packet^(0+256)
  4578                           
  4579                           ;main.c: 205: packet.packetData.ACKRequest = 0;
  4580  0324  112F               	bcf	loop@packet^(0+256),2
  4581                           
  4582                           ;main.c: 206: nrf24l01SendPacket(&packet);
  4583  0325  302F               	movlw	low loop@packet
  4584  0326  0020               	movlb	0	; select bank0
  4585  0327  00A7               	movwf	nrf24l01SendPacket@Packet
  4586  0328  3001               	movlw	high loop@packet
  4587  0329  00A8               	movwf	nrf24l01SendPacket@Packet+1
  4588  032A  3186  2697  3181   	fcall	_nrf24l01SendPacket
  4589                           
  4590                           ;main.c: 207: checkTXPower();
  4591  032D  3196  26DD  3181   	fcall	_checkTXPower
  4592                           
  4593                           ;main.c: 208: sleep(2000);
  4594  0330  30D0               	movlw	208
  4595  0331  0020               	movlb	0	; select bank0
  4596  0332  00B2               	movwf	sleep@milliseconds
  4597  0333  3007               	movlw	7
  4598  0334  00B3               	movwf	sleep@milliseconds+1
  4599  0335  318A  222E  3181   	fcall	_sleep
  4600                           
  4601                           ;main.c: 211: setMessage(&packet, "ANC3mV", getADCValue(0b010011));
  4602  0338  302F               	movlw	low loop@packet
  4603  0339  0021               	movlb	1	; select bank1
  4604  033A  00B9               	movwf	setMessage@packet^(0+128)
  4605  033B  3001               	movlw	high loop@packet
  4606  033C  00BA               	movwf	(setMessage@packet+1)^(0+128)
  4607  033D  300C               	movlw	low (STR_6| (0+32768))
  4608  033E  00BB               	movwf	setMessage@topic^(0+128)
  4609  033F  3098               	movlw	high (STR_6| (0+32768))
  4610  0340  00BC               	movwf	(setMessage@topic^(0+128)+1)
  4611  0341  3013               	movlw	19
  4612  0342  318D  256A  3181   	fcall	_getADCValue
  4613  0345  0020               	movlb	0	; select bank0
  4614  0346  084B               	movf	?_getADCValue,w
  4615  0347  0021               	movlb	1	; select bank1
  4616  0348  00BD               	movwf	setMessage@value^(0+128)
  4617  0349  0020               	movlb	0	; select bank0
  4618  034A  084C               	movf	?_getADCValue+1,w
  4619  034B  0021               	movlb	1	; select bank1
  4620  034C  00BE               	movwf	(setMessage@value+1)^(0+128)
  4621  034D  0020               	movlb	0	; select bank0
  4622  034E  084D               	movf	?_getADCValue+2,w
  4623  034F  0021               	movlb	1	; select bank1
  4624  0350  00BF               	movwf	(setMessage@value+2)^(0+128)
  4625  0351  318D  2502  3181   	fcall	_setMessage
  4626                           
  4627                           ;main.c: 212: packet.packetData.byte = 0;
  4628  0354  0022               	movlb	2	; select bank2
  4629  0355  01AF               	clrf	loop@packet^(0+256)
  4630                           
  4631                           ;main.c: 213: packet.packetData.ACKRequest = 0;
  4632  0356  112F               	bcf	loop@packet^(0+256),2
  4633                           
  4634                           ;main.c: 214: nrf24l01SendPacket(&packet);
  4635  0357  302F               	movlw	low loop@packet
  4636  0358  0020               	movlb	0	; select bank0
  4637  0359  00A7               	movwf	nrf24l01SendPacket@Packet
  4638  035A  3001               	movlw	high loop@packet
  4639  035B  00A8               	movwf	nrf24l01SendPacket@Packet+1
  4640  035C  3186  2697  3181   	fcall	_nrf24l01SendPacket
  4641                           
  4642                           ;main.c: 215: checkTXPower();
  4643  035F  3196  26DD  3181   	fcall	_checkTXPower
  4644                           
  4645                           ;main.c: 216: sleep(2000);
  4646  0362  30D0               	movlw	208
  4647  0363  0020               	movlb	0	; select bank0
  4648  0364  00B2               	movwf	sleep@milliseconds
  4649  0365  3007               	movlw	7
  4650  0366  00B3               	movwf	sleep@milliseconds+1
  4651  0367  318A  222E  3181   	fcall	_sleep
  4652                           
  4653                           ;main.c: 219: n_RF_SETUP_t rfSetup;;main.c: 220: rfSetup.byte = nrf24l01Send((unsigned) 
      +                          0b00000000 | (unsigned) 0x06, 0);
  4654  036A  0020               	movlb	0	; select bank0
  4655  036B  01A0               	clrf	nrf24l01Send@data
  4656  036C  3006               	movlw	6
  4657  036D  3188  2001  3181   	fcall	_nrf24l01Send
  4658  0370  0021               	movlb	1	; select bank1
  4659  0371  00C3               	movwf	??_loop^(0+128)
  4660  0372  0843               	movf	??_loop^(0+128),w
  4661  0373  0022               	movlb	2	; select bank2
  4662  0374  00AE               	movwf	loop@rfSetup^(0+256)
  4663                           
  4664                           ;main.c: 222: setMessage(&packet, "RFPWR", rfSetup.RF_PWR);
  4665  0375  302F               	movlw	low loop@packet
  4666  0376  0021               	movlb	1	; select bank1
  4667  0377  00B9               	movwf	setMessage@packet^(0+128)
  4668  0378  3001               	movlw	high loop@packet
  4669  0379  00BA               	movwf	(setMessage@packet+1)^(0+128)
  4670  037A  3013               	movlw	low (STR_7| (0+32768))
  4671  037B  00BB               	movwf	setMessage@topic^(0+128)
  4672  037C  3098               	movlw	high (STR_7| (0+32768))
  4673  037D  00BC               	movwf	(setMessage@topic^(0+128)+1)
  4674  037E  0022               	movlb	2	; select bank2
  4675  037F  0C2E               	rrf	loop@rfSetup^(0+256),w
  4676  0380  3903               	andlw	3
  4677  0381  3197  2754  3181   	fcall	___lbtoft
  4678  0384  0020               	movlb	0	; select bank0
  4679  0385  0828               	movf	?___lbtoft,w
  4680  0386  0021               	movlb	1	; select bank1
  4681  0387  00BD               	movwf	setMessage@value^(0+128)
  4682  0388  0020               	movlb	0	; select bank0
  4683  0389  0829               	movf	?___lbtoft+1,w
  4684  038A  0021               	movlb	1	; select bank1
  4685  038B  00BE               	movwf	(setMessage@value+1)^(0+128)
  4686  038C  0020               	movlb	0	; select bank0
  4687  038D  082A               	movf	?___lbtoft+2,w
  4688  038E  0021               	movlb	1	; select bank1
  4689  038F  00BF               	movwf	(setMessage@value+2)^(0+128)
  4690  0390  318D  2502  3181   	fcall	_setMessage
  4691                           
  4692                           ;main.c: 223: packet.packetData.byte = 0;
  4693  0393  0022               	movlb	2	; select bank2
  4694  0394  01AF               	clrf	loop@packet^(0+256)
  4695                           
  4696                           ;main.c: 224: packet.packetData.ACKRequest = 0;
  4697  0395  112F               	bcf	loop@packet^(0+256),2
  4698                           
  4699                           ;main.c: 225: nrf24l01SendPacket(&packet);
  4700  0396  302F               	movlw	low loop@packet
  4701  0397  0020               	movlb	0	; select bank0
  4702  0398  00A7               	movwf	nrf24l01SendPacket@Packet
  4703  0399  3001               	movlw	high loop@packet
  4704  039A  00A8               	movwf	nrf24l01SendPacket@Packet+1
  4705  039B  3186  2697  3181   	fcall	_nrf24l01SendPacket
  4706                           
  4707                           ;main.c: 226: checkTXPower();
  4708  039E  3196  26DD  3181   	fcall	_checkTXPower
  4709                           
  4710                           ;main.c: 227: sleep(2000);
  4711  03A1  30D0               	movlw	208
  4712  03A2  0020               	movlb	0	; select bank0
  4713  03A3  00B2               	movwf	sleep@milliseconds
  4714  03A4  3007               	movlw	7
  4715  03A5  00B3               	movwf	sleep@milliseconds+1
  4716  03A6  318A  222E         	fcall	_sleep
  4717  03A8  0008               	return
  4718  03A9                     __end_of_loop:	
  4719                           
  4720                           	psect	text9
  4721  0A2E                     __ptext9:	
  4722 ;; *************** function _sleep *****************
  4723 ;; Defined at:
  4724 ;;		line 72 in file "main.c"
  4725 ;; Parameters:    Size  Location     Type
  4726 ;;  milliseconds    2   18[BANK0 ] unsigned int 
  4727 ;; Auto vars:     Size  Location     Type
  4728 ;;		None
  4729 ;; Return value:  Size  Location     Type
  4730 ;;                  1    wreg      void 
  4731 ;; Registers used:
  4732 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4733 ;; Tracked objects:
  4734 ;;		On entry : 0/0
  4735 ;;		On exit  : 0/0
  4736 ;;		Unchanged: 0/0
  4737 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4738 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4739 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4740 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4741 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4742 ;;Total ram usage:        2 bytes
  4743 ;; Hardware stack levels used:    1
  4744 ;; Hardware stack levels required when called:   14
  4745 ;; This function calls:
  4746 ;;		___lwdiv
  4747 ;;		_doWDTSleep
  4748 ;;		_handleRXData
  4749 ;;		_nrf24l01SetRXMode
  4750 ;; This function is called by:
  4751 ;;		_loop
  4752 ;;		_main
  4753 ;; This function uses a non-reentrant model
  4754 ;;
  4755                           
  4756                           
  4757                           ;psect for function _sleep
  4758  0A2E                     _sleep:	
  4759                           
  4760                           ;main.c: 75: if (!milliseconds){
  4761                           
  4762                           ;incstack = 0
  4763                           ; Regs used in _sleep: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4764  0A2E  0020               	movlb	0	; select bank0
  4765  0A2F  0832               	movf	sleep@milliseconds,w
  4766  0A30  0433               	iorwf	sleep@milliseconds+1,w
  4767  0A31  1D03               	btfss	3,2
  4768  0A32  2A37               	goto	l3113
  4769                           
  4770                           ;main.c: 76: doWDTSleep(0b00000);
  4771  0A33  3000               	movlw	0
  4772  0A34  3196  26F1         	fcall	_doWDTSleep
  4773                           
  4774                           ;main.c: 77: return;
  4775  0A36  0008               	return
  4776  0A37                     l3113:	
  4777                           
  4778                           ;main.c: 78: };main.c: 83: milliseconds = (unsigned int) (milliseconds / (256 + 2));
  4779  0A37  3002               	movlw	2
  4780  0A38  0020               	movlb	0	; select bank0
  4781  0A39  00A0               	movwf	___lwdiv@divisor
  4782  0A3A  3001               	movlw	1
  4783  0A3B  00A1               	movwf	___lwdiv@divisor+1
  4784  0A3C  0833               	movf	sleep@milliseconds+1,w
  4785  0A3D  00A3               	movwf	___lwdiv@dividend+1
  4786  0A3E  0832               	movf	sleep@milliseconds,w
  4787  0A3F  00A2               	movwf	___lwdiv@dividend
  4788  0A40  3189  2185  318A   	fcall	___lwdiv
  4789  0A43  0020               	movlb	0	; select bank0
  4790  0A44  0821               	movf	?___lwdiv+1,w
  4791  0A45  00B3               	movwf	sleep@milliseconds+1
  4792  0A46  0820               	movf	?___lwdiv,w
  4793  0A47  00B2               	movwf	sleep@milliseconds
  4794                           
  4795                           ;main.c: 86: milliseconds++;
  4796  0A48  3001               	movlw	1
  4797  0A49  07B2               	addwf	sleep@milliseconds,f
  4798  0A4A  3000               	movlw	0
  4799  0A4B  3DB3               	addwfc	sleep@milliseconds+1,f
  4800  0A4C                     l3125:	
  4801                           ;main.c: 89: while (--milliseconds){
  4802                           
  4803  0A4C  3001               	movlw	1
  4804  0A4D  0020               	movlb	0	; select bank0
  4805  0A4E  02B2               	subwf	sleep@milliseconds,f
  4806  0A4F  3000               	movlw	0
  4807  0A50  3BB3               	subwfb	sleep@milliseconds+1,f
  4808  0A51  0832               	movf	sleep@milliseconds,w
  4809  0A52  0433               	iorwf	sleep@milliseconds+1,w
  4810  0A53  1903               	btfsc	3,2
  4811  0A54  0008               	return
  4812                           
  4813                           ;main.c: 92: nrf24l01SetRXMode(1);
  4814  0A55  3001               	movlw	1
  4815  0A56  318B  232C  318A   	fcall	_nrf24l01SetRXMode
  4816                           
  4817                           ;main.c: 95: doWDTSleep(3);
  4818  0A59  3003               	movlw	3
  4819  0A5A  3196  26F1  318A   	fcall	_doWDTSleep
  4820                           
  4821                           ;main.c: 98: nrf24l01SetRXMode(0);
  4822  0A5D  3000               	movlw	0
  4823  0A5E  318B  232C  318A   	fcall	_nrf24l01SetRXMode
  4824                           
  4825                           ;main.c: 101: if (nrf24l01.RXPending){
  4826  0A61  1CFD               	btfss	_nrf24l01,1	;volatile
  4827  0A62  2A66               	goto	l3123
  4828                           
  4829                           ;main.c: 102: handleRXData();
  4830  0A63  3196  26CB  318A   	fcall	_handleRXData
  4831  0A66                     l3123:	
  4832                           
  4833                           ;main.c: 103: };main.c: 106: doWDTSleep(0b01000);
  4834  0A66  3008               	movlw	8
  4835  0A67  3196  26F1  318A   	fcall	_doWDTSleep
  4836  0A6A  2A4C               	goto	l3125
  4837  0A6B                     __end_of_sleep:	
  4838                           
  4839                           	psect	text10
  4840  16CB                     __ptext10:	
  4841 ;; *************** function _handleRXData *****************
  4842 ;; Defined at:
  4843 ;;		line 36 in file "main.c"
  4844 ;; Parameters:    Size  Location     Type
  4845 ;;		None
  4846 ;; Auto vars:     Size  Location     Type
  4847 ;;  RXPacket        1   17[BANK0 ] PTR struct .
  4848 ;;		 -> RXPacket(33), 
  4849 ;; Return value:  Size  Location     Type
  4850 ;;                  1    wreg      void 
  4851 ;; Registers used:
  4852 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4853 ;; Tracked objects:
  4854 ;;		On entry : 0/0
  4855 ;;		On exit  : 0/0
  4856 ;;		Unchanged: 0/0
  4857 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4858 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4859 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4860 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4861 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4862 ;;Total ram usage:        2 bytes
  4863 ;; Hardware stack levels used:    1
  4864 ;; Hardware stack levels required when called:   13
  4865 ;; This function calls:
  4866 ;;		_nrf24l01GetRXPacket
  4867 ;;		_nrf24l01SendACK
  4868 ;; This function is called by:
  4869 ;;		_sleep
  4870 ;; This function uses a non-reentrant model
  4871 ;;
  4872                           
  4873                           
  4874                           ;psect for function _handleRXData
  4875  16CB                     _handleRXData:	
  4876                           
  4877                           ;main.c: 38: nrf24l01Packet_t * RXPacket = nrf24l01GetRXPacket();
  4878                           
  4879                           ;incstack = 0
  4880                           ; Regs used in _handleRXData: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4881  16CB  3187  27FE  3196   	fcall	_nrf24l01GetRXPacket
  4882  16CE  0020               	movlb	0	; select bank0
  4883  16CF  00B0               	movwf	??_handleRXData
  4884  16D0  0830               	movf	??_handleRXData,w
  4885  16D1  00B1               	movwf	handleRXData@RXPacket
  4886                           
  4887                           ;main.c: 52: if (RXPacket->packetData.ACKRequest){
  4888  16D2  0831               	movf	handleRXData@RXPacket,w
  4889  16D3  0086               	movwf	6
  4890  16D4  3001               	movlw	1	; select bank2/3
  4891  16D5  0087               	movwf	7
  4892  16D6  1D01               	btfss	1,2
  4893  16D7  2EDB               	goto	l2921
  4894                           
  4895                           ;main.c: 53: nrf24l01SendACK(RXPacket);
  4896  16D8  0831               	movf	handleRXData@RXPacket,w
  4897  16D9  3189  2157         	fcall	_nrf24l01SendACK
  4898  16DB                     l2921:	
  4899                           
  4900                           ;main.c: 54: };main.c: 68: nrf24l01.RXPending = 0;
  4901  16DB  10FD               	bcf	_nrf24l01,1	;volatile
  4902  16DC  0008               	return
  4903  16DD                     __end_of_handleRXData:	
  4904                           
  4905                           	psect	text11
  4906  0957                     __ptext11:	
  4907 ;; *************** function _nrf24l01SendACK *****************
  4908 ;; Defined at:
  4909 ;;		line 92 in file "nrf24l01.c"
  4910 ;; Parameters:    Size  Location     Type
  4911 ;;  packet          1    wreg     PTR struct .
  4912 ;;		 -> RXPacket(33), 
  4913 ;; Auto vars:     Size  Location     Type
  4914 ;;  packet          1   15[BANK0 ] PTR struct .
  4915 ;;		 -> RXPacket(33), 
  4916 ;; Return value:  Size  Location     Type
  4917 ;;                  1    wreg      void 
  4918 ;; Registers used:
  4919 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4920 ;; Tracked objects:
  4921 ;;		On entry : 0/0
  4922 ;;		On exit  : 0/0
  4923 ;;		Unchanged: 0/0
  4924 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4925 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4926 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4927 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4928 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4929 ;;Total ram usage:        2 bytes
  4930 ;; Hardware stack levels used:    1
  4931 ;; Hardware stack levels required when called:   12
  4932 ;; This function calls:
  4933 ;;		_nrf24l01SendPacket
  4934 ;;		_nrf24l01SetTXPipe
  4935 ;; This function is called by:
  4936 ;;		_handleRXData
  4937 ;; This function uses a non-reentrant model
  4938 ;;
  4939                           
  4940                           
  4941                           ;psect for function _nrf24l01SendACK
  4942  0957                     _nrf24l01SendACK:	
  4943                           
  4944                           ;incstack = 0
  4945                           ; Regs used in _nrf24l01SendACK: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4946                           ;nrf24l01SendACK@packet stored from wreg
  4947  0957  0020               	movlb	0	; select bank0
  4948  0958  00AF               	movwf	nrf24l01SendACK@packet
  4949                           
  4950                           ;nrf24l01.c: 94: nrf24l01SetTXPipe(packet->packetData.Pipe);
  4951  0959  082F               	movf	nrf24l01SendACK@packet,w
  4952  095A  0086               	movwf	6
  4953  095B  3001               	movlw	1	; select bank2/3
  4954  095C  0087               	movwf	7
  4955  095D  0E01               	swapf	1,w
  4956  095E  3907               	andlw	7
  4957  095F  318B  2370  3189   	fcall	_nrf24l01SetTXPipe
  4958                           
  4959                           ;nrf24l01.c: 96: packet->packetData.ACKRequest = 0;
  4960  0962  0020               	movlb	0	; select bank0
  4961  0963  082F               	movf	nrf24l01SendACK@packet,w
  4962  0964  0086               	movwf	6
  4963  0965  3001               	movlw	1	; select bank2/3
  4964  0966  0087               	movwf	7
  4965  0967  1101               	bcf	1,2
  4966                           
  4967                           ;nrf24l01.c: 97: packet->packetData.IsACK = 1;
  4968  0968  082F               	movf	nrf24l01SendACK@packet,w
  4969  0969  0086               	movwf	6
  4970  096A  3001               	movlw	1	; select bank2/3
  4971  096B  0087               	movwf	7
  4972  096C  1581               	bsf	1,3
  4973                           
  4974                           ;nrf24l01.c: 98: packet->packetData.ACKRPD = packet->packetData.RPD;
  4975  096D  082F               	movf	nrf24l01SendACK@packet,w
  4976  096E  0086               	movwf	6
  4977  096F  3001               	movlw	1	; select bank2/3
  4978  0970  0087               	movwf	7
  4979  0971  0801               	movf	1,w
  4980  0972  3901               	andlw	1
  4981  0973  00AE               	movwf	??_nrf24l01SendACK
  4982  0974  082F               	movf	nrf24l01SendACK@packet,w
  4983  0975  0086               	movwf	6
  4984  0976  3001               	movlw	1	; select bank2/3
  4985  0977  0087               	movwf	7
  4986  0978  0DAE               	rlf	??_nrf24l01SendACK,f
  4987  0979  0801               	movf	1,w
  4988  097A  062E               	xorwf	??_nrf24l01SendACK,w
  4989  097B  39FD               	andlw	-3
  4990  097C  062E               	xorwf	??_nrf24l01SendACK,w
  4991  097D  0081               	movwf	1
  4992                           
  4993                           ;nrf24l01.c: 101: nrf24l01SendPacket(packet);
  4994  097E  082F               	movf	nrf24l01SendACK@packet,w
  4995  097F  00A7               	movwf	nrf24l01SendPacket@Packet
  4996  0980  3001               	movlw	1
  4997  0981  00A8               	movwf	nrf24l01SendPacket@Packet+1
  4998  0982  3186  2697         	fcall	_nrf24l01SendPacket
  4999  0984  0008               	return
  5000  0985                     __end_of_nrf24l01SendACK:	
  5001                           
  5002                           	psect	text12
  5003  0B70                     __ptext12:	
  5004 ;; *************** function _nrf24l01SetTXPipe *****************
  5005 ;; Defined at:
  5006 ;;		line 318 in file "nrf24l01.c"
  5007 ;; Parameters:    Size  Location     Type
  5008 ;;  pipe            1    wreg     unsigned char 
  5009 ;; Auto vars:     Size  Location     Type
  5010 ;;  pipe            1    6[BANK0 ] unsigned char 
  5011 ;; Return value:  Size  Location     Type
  5012 ;;                  1    wreg      void 
  5013 ;; Registers used:
  5014 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  5015 ;; Tracked objects:
  5016 ;;		On entry : 0/0
  5017 ;;		On exit  : 0/0
  5018 ;;		Unchanged: 0/0
  5019 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5020 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5021 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5022 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5023 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5024 ;;Total ram usage:        3 bytes
  5025 ;; Hardware stack levels used:    1
  5026 ;; Hardware stack levels required when called:    9
  5027 ;; This function calls:
  5028 ;;		___bmul
  5029 ;;		_nrf24l01SPIEnd
  5030 ;;		_nrf24l01SPISend
  5031 ;;		_nrf24l01SPIStart
  5032 ;; This function is called by:
  5033 ;;		_main
  5034 ;;		_nrf24l01SendACK
  5035 ;;		_nrf24l01InitRegisters
  5036 ;; This function uses a non-reentrant model
  5037 ;;
  5038                           
  5039                           
  5040                           ;psect for function _nrf24l01SetTXPipe
  5041  0B70                     _nrf24l01SetTXPipe:	
  5042                           
  5043                           ;incstack = 0
  5044                           ; Regs used in _nrf24l01SetTXPipe: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  5045                           ;nrf24l01SetTXPipe@pipe stored from wreg
  5046  0B70  0020               	movlb	0	; select bank0
  5047  0B71  00A6               	movwf	nrf24l01SetTXPipe@pipe
  5048                           
  5049                           ;nrf24l01.c: 321: nrf24l01SPIStart();
  5050  0B72  3196  268C  318B   	fcall	_nrf24l01SPIStart
  5051                           
  5052                           ;nrf24l01.c: 322: nrf24l01SPISend((unsigned) 0b00100000 | (unsigned) 0x10);
  5053  0B75  3030               	movlw	48
  5054  0B76  3196  269D  318B   	fcall	_nrf24l01SPISend
  5055                           
  5056                           ;nrf24l01.c: 323: nrf24l01SPISend(n_ADDRESS_P0[4] + (unsigned) (pipe * n_ADDRESS_MUL));
  5057  0B79  301D               	movlw	low ((_n_ADDRESS_P0+4)| (0+32768))
  5058  0B7A  0084               	movwf	4
  5059  0B7B  3098               	movlw	high ((_n_ADDRESS_P0+4)| (0+32768))
  5060  0B7C  0085               	movwf	5
  5061  0B7D  0800               	movf	0,w	;code access
  5062  0B7E  0020               	movlb	0	; select bank0
  5063  0B7F  00A4               	movwf	??_nrf24l01SetTXPipe
  5064  0B80  3000               	movlw	low (_n_ADDRESS_MUL| (0+32768))
  5065  0B81  0084               	movwf	4
  5066  0B82  3098               	movlw	high (_n_ADDRESS_MUL| (0+32768))
  5067  0B83  0085               	movwf	5
  5068  0B84  0800               	movf	0,w	;code access
  5069  0B85  00A5               	movwf	??_nrf24l01SetTXPipe+1
  5070  0B86  0825               	movf	??_nrf24l01SetTXPipe+1,w
  5071  0B87  00A0               	movwf	___bmul@multiplicand
  5072  0B88  0826               	movf	nrf24l01SetTXPipe@pipe,w
  5073  0B89  3196  26B9  318B   	fcall	___bmul
  5074  0B8C  0020               	movlb	0	; select bank0
  5075  0B8D  0724               	addwf	??_nrf24l01SetTXPipe,w
  5076  0B8E  3196  269D  318B   	fcall	_nrf24l01SPISend
  5077                           
  5078                           ;nrf24l01.c: 324: nrf24l01SPISend(n_ADDRESS_P0[3]);
  5079  0B91  301C               	movlw	low ((_n_ADDRESS_P0+3)| (0+32768))
  5080  0B92  0084               	movwf	4
  5081  0B93  3098               	movlw	high ((_n_ADDRESS_P0+3)| (0+32768))
  5082  0B94  0085               	movwf	5
  5083  0B95  0800               	movf	0,w	;code access
  5084  0B96  3196  269D  318B   	fcall	_nrf24l01SPISend
  5085                           
  5086                           ;nrf24l01.c: 325: nrf24l01SPISend(n_ADDRESS_P0[2]);
  5087  0B99  301B               	movlw	low ((_n_ADDRESS_P0+2)| (0+32768))
  5088  0B9A  0084               	movwf	4
  5089  0B9B  3098               	movlw	high ((_n_ADDRESS_P0+2)| (0+32768))
  5090  0B9C  0085               	movwf	5
  5091  0B9D  0800               	movf	0,w	;code access
  5092  0B9E  3196  269D  318B   	fcall	_nrf24l01SPISend
  5093                           
  5094                           ;nrf24l01.c: 326: nrf24l01SPISend(n_ADDRESS_P0[1]);
  5095  0BA1  301A               	movlw	low ((_n_ADDRESS_P0+1)| (0+32768))
  5096  0BA2  0084               	movwf	4
  5097  0BA3  3098               	movlw	high ((_n_ADDRESS_P0+1)| (0+32768))
  5098  0BA4  0085               	movwf	5
  5099  0BA5  0800               	movf	0,w	;code access
  5100  0BA6  3196  269D  318B   	fcall	_nrf24l01SPISend
  5101                           
  5102                           ;nrf24l01.c: 327: nrf24l01SPISend(n_ADDRESS_P0[0]);
  5103  0BA9  3019               	movlw	low (_n_ADDRESS_P0| (0+32768))
  5104  0BAA  0084               	movwf	4
  5105  0BAB  3098               	movlw	high (_n_ADDRESS_P0| (0+32768))
  5106  0BAC  0085               	movwf	5
  5107  0BAD  0800               	movf	0,w	;code access
  5108  0BAE  3196  269D  318B   	fcall	_nrf24l01SPISend
  5109                           
  5110                           ;nrf24l01.c: 328: nrf24l01SPIEnd();
  5111  0BB1  3196  267D         	fcall	_nrf24l01SPIEnd
  5112  0BB3  0008               	return
  5113  0BB4                     __end_of_nrf24l01SetTXPipe:	
  5114                           
  5115                           	psect	text13
  5116  16B9                     __ptext13:	
  5117 ;; *************** function ___bmul *****************
  5118 ;; Defined at:
  5119 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\Umul8.c"
  5120 ;; Parameters:    Size  Location     Type
  5121 ;;  multiplier      1    wreg     unsigned char 
  5122 ;;  multiplicand    1    0[BANK0 ] unsigned char 
  5123 ;; Auto vars:     Size  Location     Type
  5124 ;;  multiplier      1    3[BANK0 ] unsigned char 
  5125 ;;  product         1    2[BANK0 ] unsigned char 
  5126 ;; Return value:  Size  Location     Type
  5127 ;;                  1    wreg      unsigned char 
  5128 ;; Registers used:
  5129 ;;		wreg, status,2, status,0
  5130 ;; Tracked objects:
  5131 ;;		On entry : 0/0
  5132 ;;		On exit  : 0/0
  5133 ;;		Unchanged: 0/0
  5134 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5135 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5136 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5137 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5138 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5139 ;;Total ram usage:        4 bytes
  5140 ;; Hardware stack levels used:    1
  5141 ;; Hardware stack levels required when called:    7
  5142 ;; This function calls:
  5143 ;;		Nothing
  5144 ;; This function is called by:
  5145 ;;		_nrf24l01SetTXPipe
  5146 ;;		_nrf24l01InitRegisters
  5147 ;; This function uses a non-reentrant model
  5148 ;;
  5149                           
  5150                           
  5151                           ;psect for function ___bmul
  5152  16B9                     ___bmul:	
  5153                           
  5154                           ;incstack = 0
  5155                           ; Regs used in ___bmul: [wreg+status,2+status,0]
  5156                           ;___bmul@multiplier stored from wreg
  5157  16B9  0020               	movlb	0	; select bank0
  5158  16BA  00A3               	movwf	___bmul@multiplier
  5159  16BB  01A2               	clrf	___bmul@product
  5160  16BC                     l2361:	
  5161  16BC  1C23               	btfss	___bmul@multiplier,0
  5162  16BD  2EC2               	goto	l2365
  5163  16BE  0820               	movf	___bmul@multiplicand,w
  5164  16BF  00A1               	movwf	??___bmul
  5165  16C0  0821               	movf	??___bmul,w
  5166  16C1  07A2               	addwf	___bmul@product,f
  5167  16C2                     l2365:	
  5168  16C2  1003               	clrc
  5169  16C3  0DA0               	rlf	___bmul@multiplicand,f
  5170  16C4  1003               	clrc
  5171  16C5  0CA3               	rrf	___bmul@multiplier,f
  5172  16C6  0823               	movf	___bmul@multiplier,w
  5173  16C7  1D03               	btfss	3,2
  5174  16C8  2EBC               	goto	l2361
  5175  16C9  0822               	movf	___bmul@product,w
  5176  16CA  0008               	return
  5177  16CB                     __end_of___bmul:	
  5178                           
  5179                           	psect	text14
  5180  0697                     __ptext14:	
  5181 ;; *************** function _nrf24l01SendPacket *****************
  5182 ;; Defined at:
  5183 ;;		line 176 in file "nrf24l01.c"
  5184 ;; Parameters:    Size  Location     Type
  5185 ;;  Packet          2    7[BANK0 ] PTR struct .
  5186 ;;		 -> RXPacket(33), main@packet(33), loop@packet(33), 
  5187 ;; Auto vars:     Size  Location     Type
  5188 ;;  i               1   13[BANK0 ] unsigned char 
  5189 ;; Return value:  Size  Location     Type
  5190 ;;                  1    wreg      void 
  5191 ;; Registers used:
  5192 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5193 ;; Tracked objects:
  5194 ;;		On entry : 0/0
  5195 ;;		On exit  : 0/0
  5196 ;;		Unchanged: 0/0
  5197 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5198 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5199 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5200 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5201 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5202 ;;Total ram usage:        7 bytes
  5203 ;; Hardware stack levels used:    1
  5204 ;; Hardware stack levels required when called:   11
  5205 ;; This function calls:
  5206 ;;		_enableInterrupts
  5207 ;;		_nrf24l01CEHigh
  5208 ;;		_nrf24l01CELow
  5209 ;;		_nrf24l01ChangeTXPower
  5210 ;;		_nrf24l01SPIEnd
  5211 ;;		_nrf24l01SPISend
  5212 ;;		_nrf24l01SPIStart
  5213 ;;		_nrf24l01SetRXMode
  5214 ;;		_strlen
  5215 ;; This function is called by:
  5216 ;;		_loop
  5217 ;;		_main
  5218 ;;		_nrf24l01SendACK
  5219 ;; This function uses a non-reentrant model
  5220 ;;
  5221                           
  5222                           
  5223                           ;psect for function _nrf24l01SendPacket
  5224  0697                     _nrf24l01SendPacket:	
  5225  0697                     l299:	
  5226                           ;incstack = 0
  5227                           ; Regs used in _nrf24l01SendPacket: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5228                           ;nrf24l01.c: 179: unsigned char i;;nrf24l01.c: 183: RESEND:
  5229                           
  5230                           
  5231                           ;nrf24l01.c: 186: i = 0xFF;
  5232  0697  30FF               	movlw	255
  5233  0698  0020               	movlb	0	; select bank0
  5234  0699  00A9               	movwf	??_nrf24l01SendPacket
  5235  069A  0829               	movf	??_nrf24l01SendPacket,w
  5236  069B  00AD               	movwf	nrf24l01SendPacket@i
  5237  069C                     l2431:	
  5238                           ;nrf24l01.c: 187: while (nrf24l01.TXBusy){
  5239                           
  5240  069C  1C7D               	btfss	_nrf24l01,0	;volatile
  5241  069D  2EA8               	goto	l2433
  5242                           
  5243                           ;nrf24l01.c: 189: if (!--i) {
  5244  069E  3001               	movlw	1
  5245  069F  0020               	movlb	0	; select bank0
  5246  06A0  02AD               	subwf	nrf24l01SendPacket@i,f
  5247  06A1  1903               	btfsc	3,2
  5248  06A2  2E97               	goto	l299
  5249                           
  5250                           ;nrf24l01.c: 191: };nrf24l01.c: 192: _delay((unsigned long)((100)*(32000000/4000000.0)))
      +                          ;
  5251                           
  5252                           ;nrf24l01.c: 190: goto RESEND;
  5253  06A3  30A0               	movlw	160
  5254  06A4                     u3587:	
  5255  06A4  3200               	nop2
  5256  06A5  0B89               	decfsz	9,f
  5257  06A6  2EA4               	goto	u3587
  5258  06A7  2E9C               	goto	l2431
  5259  06A8                     l2433:	
  5260                           
  5261                           ;nrf24l01.c: 193: };nrf24l01.c: 195: TXPacket = Packet;
  5262  06A8  0020               	movlb	0	; select bank0
  5263  06A9  0828               	movf	nrf24l01SendPacket@Packet+1,w
  5264  06AA  0021               	movlb	1	; select bank1
  5265  06AB  00E9               	movwf	(_TXPacket+1)^(0+128)
  5266  06AC  0020               	movlb	0	; select bank0
  5267  06AD  0827               	movf	nrf24l01SendPacket@Packet,w
  5268  06AE  0021               	movlb	1	; select bank1
  5269  06AF  00E8               	movwf	_TXPacket^(0+128)
  5270                           
  5271                           ;nrf24l01.c: 198: nrf24l01.TXBusy = 1;
  5272  06B0  147D               	bsf	_nrf24l01,0	;volatile
  5273                           
  5274                           ;nrf24l01.c: 201: enableInterrupts(0);
  5275  06B1  3000               	movlw	0
  5276  06B2  3196  2684  3186   	fcall	_enableInterrupts
  5277                           
  5278                           ;nrf24l01.c: 204: nrf24l01SetRXMode(0);
  5279  06B5  3000               	movlw	0
  5280  06B6  318B  232C  3186   	fcall	_nrf24l01SetRXMode
  5281                           
  5282                           ;nrf24l01.c: 207: nrf24l01SPIStart();
  5283  06B9  3196  268C  3186   	fcall	_nrf24l01SPIStart
  5284                           
  5285                           ;nrf24l01.c: 210: nrf24l01SPISend((unsigned) 0b10110000);
  5286  06BC  30B0               	movlw	176
  5287  06BD  3196  269D  3186   	fcall	_nrf24l01SPISend
  5288                           
  5289                           ;nrf24l01.c: 212: nrf24l01SPISend(TXPacket->packetData.byte);
  5290  06C0  0021               	movlb	1	; select bank1
  5291  06C1  0868               	movf	_TXPacket^(0+128),w
  5292  06C2  0086               	movwf	6
  5293  06C3  0869               	movf	(_TXPacket+1)^(0+128),w
  5294  06C4  0087               	movwf	7
  5295  06C5  0801               	movf	1,w
  5296  06C6  3196  269D  3186   	fcall	_nrf24l01SPISend
  5297                           
  5298                           ;nrf24l01.c: 215: for (i = 0; (i < strlen(TXPacket->Message)) && (i < sizeof(TXPacket->M
      +                          essage)); i++){
  5299  06C9  0020               	movlb	0	; select bank0
  5300  06CA  01AD               	clrf	nrf24l01SendPacket@i
  5301  06CB  2EE5               	goto	l2453
  5302  06CC                     l2449:	
  5303                           
  5304                           ;nrf24l01.c: 216: nrf24l01SPISend(TXPacket->Message[i]);
  5305  06CC  082D               	movf	nrf24l01SendPacket@i,w
  5306  06CD  3E01               	addlw	1
  5307  06CE  00A9               	movwf	??_nrf24l01SendPacket
  5308  06CF  3000               	movlw	0
  5309  06D0  1803               	skipnc
  5310  06D1  3001               	movlw	1
  5311  06D2  00AA               	movwf	??_nrf24l01SendPacket+1
  5312  06D3  0829               	movf	??_nrf24l01SendPacket,w
  5313  06D4  0021               	movlb	1	; select bank1
  5314  06D5  0768               	addwf	_TXPacket^(0+128),w
  5315  06D6  0086               	movwf	6
  5316  06D7  0020               	movlb	0	; select bank0
  5317  06D8  082A               	movf	??_nrf24l01SendPacket+1,w
  5318  06D9  0021               	movlb	1	; select bank1
  5319  06DA  3D69               	addwfc	(_TXPacket+1)^(0+128),w
  5320  06DB  0087               	movwf	7
  5321  06DC  0801               	movf	1,w
  5322  06DD  3196  269D  3186   	fcall	_nrf24l01SPISend
  5323  06E0  3001               	movlw	1
  5324  06E1  0020               	movlb	0	; select bank0
  5325  06E2  00A9               	movwf	??_nrf24l01SendPacket
  5326  06E3  0829               	movf	??_nrf24l01SendPacket,w
  5327  06E4  07AD               	addwf	nrf24l01SendPacket@i,f
  5328  06E5                     l2453:	
  5329  06E5  0021               	movlb	1	; select bank1
  5330  06E6  0868               	movf	_TXPacket^(0+128),w
  5331  06E7  3E01               	addlw	1
  5332  06E8  0020               	movlb	0	; select bank0
  5333  06E9  00A9               	movwf	??_nrf24l01SendPacket
  5334  06EA  3000               	movlw	0
  5335  06EB  0021               	movlb	1	; select bank1
  5336  06EC  3D69               	addwfc	(_TXPacket+1)^(0+128),w
  5337  06ED  0020               	movlb	0	; select bank0
  5338  06EE  00AA               	movwf	??_nrf24l01SendPacket+1
  5339  06EF  0829               	movf	??_nrf24l01SendPacket,w
  5340  06F0  00A0               	movwf	strlen@s
  5341  06F1  082A               	movf	??_nrf24l01SendPacket+1,w
  5342  06F2  00A1               	movwf	strlen@s+1
  5343  06F3  3197  27E1  3186   	fcall	_strlen
  5344  06F6  0020               	movlb	0	; select bank0
  5345  06F7  082D               	movf	nrf24l01SendPacket@i,w
  5346  06F8  00AB               	movwf	??_nrf24l01SendPacket+2
  5347  06F9  01AC               	clrf	??_nrf24l01SendPacket+3
  5348  06FA  0821               	movf	?_strlen+1,w
  5349  06FB  022C               	subwf	??_nrf24l01SendPacket+3,w
  5350  06FC  1D03               	skipz
  5351  06FD  2F00               	goto	u2025
  5352  06FE  0820               	movf	?_strlen,w
  5353  06FF  022B               	subwf	??_nrf24l01SendPacket+2,w
  5354  0700                     u2025:	
  5355  0700  1803               	skipnc
  5356  0701  2F06               	goto	l2457
  5357  0702  3020               	movlw	32
  5358  0703  022D               	subwf	nrf24l01SendPacket@i,w
  5359  0704  1C03               	skipc
  5360  0705  2ECC               	goto	l2449
  5361  0706                     l2457:	
  5362                           
  5363                           ;nrf24l01.c: 217: };nrf24l01.c: 220: nrf24l01SPIEnd();
  5364  0706  3196  267D  3186   	fcall	_nrf24l01SPIEnd
  5365                           
  5366                           ;nrf24l01.c: 223: nrf24l01CEHigh();
  5367  0709  3196  266B  3186   	fcall	_nrf24l01CEHigh
  5368                           
  5369                           ;nrf24l01.c: 224: _delay((unsigned long)((20)*(32000000/4000000.0)));
  5370  070C  3035               	movlw	53
  5371  070D                     u3597:	
  5372  070D  0B89               	decfsz	9,f
  5373  070E  2F0D               	goto	u3597
  5374  070F  0000               	nop
  5375                           
  5376                           ;nrf24l01.c: 225: nrf24l01CELow();
  5377  0710  3196  266E  3186   	fcall	_nrf24l01CELow
  5378                           
  5379                           ;nrf24l01.c: 228: enableInterrupts(1);
  5380  0713  3001               	movlw	1
  5381  0714  3196  2684  3186   	fcall	_enableInterrupts
  5382                           
  5383                           ;nrf24l01.c: 231: i = 0xFF;
  5384  0717  30FF               	movlw	255
  5385  0718  0020               	movlb	0	; select bank0
  5386  0719  00A9               	movwf	??_nrf24l01SendPacket
  5387  071A  0829               	movf	??_nrf24l01SendPacket,w
  5388  071B  00AD               	movwf	nrf24l01SendPacket@i
  5389  071C                     l2471:	
  5390                           ;nrf24l01.c: 232: while (nrf24l01.TXBusy){
  5391                           
  5392  071C  1C7D               	btfss	_nrf24l01,0	;volatile
  5393  071D  2F28               	goto	l2473
  5394                           
  5395                           ;nrf24l01.c: 234: if (!--i) {
  5396  071E  3001               	movlw	1
  5397  071F  0020               	movlb	0	; select bank0
  5398  0720  02AD               	subwf	nrf24l01SendPacket@i,f
  5399  0721  1903               	btfsc	3,2
  5400  0722  2E97               	goto	l299
  5401                           
  5402                           ;nrf24l01.c: 236: };nrf24l01.c: 237: _delay((unsigned long)((100)*(32000000/4000000.0)))
      +                          ;
  5403                           
  5404                           ;nrf24l01.c: 235: goto RESEND;
  5405  0723  30A0               	movlw	160
  5406  0724                     u3607:	
  5407  0724  3200               	nop2
  5408  0725  0B89               	decfsz	9,f
  5409  0726  2F24               	goto	u3607
  5410  0727  2F1C               	goto	l2471
  5411  0728                     l2473:	
  5412                           
  5413                           ;nrf24l01.c: 238: };nrf24l01.c: 242: i = 0xFF;
  5414  0728  30FF               	movlw	255
  5415  0729  0020               	movlb	0	; select bank0
  5416  072A  00A9               	movwf	??_nrf24l01SendPacket
  5417  072B  0829               	movf	??_nrf24l01SendPacket,w
  5418  072C  00AD               	movwf	nrf24l01SendPacket@i
  5419  072D                     l2483:	
  5420                           ;nrf24l01.c: 243: while (TXPacket->packetData.ACKRequest){
  5421                           
  5422  072D  0021               	movlb	1	; select bank1
  5423  072E  0868               	movf	_TXPacket^(0+128),w
  5424  072F  0086               	movwf	6
  5425  0730  0869               	movf	(_TXPacket+1)^(0+128),w
  5426  0731  0087               	movwf	7
  5427  0732  1D01               	btfss	1,2
  5428  0733  0008               	return
  5429                           
  5430                           ;nrf24l01.c: 245: if (!--i) {
  5431  0734  3001               	movlw	1
  5432  0735  0020               	movlb	0	; select bank0
  5433  0736  02AD               	subwf	nrf24l01SendPacket@i,f
  5434  0737  1D03               	btfss	3,2
  5435  0738  2F5A               	goto	l2481
  5436                           
  5437                           ;nrf24l01.c: 246: _delay((unsigned long)((50000)*(32000000/4000000.0)));
  5438  0739  3003               	movlw	3
  5439  073A  0020               	movlb	0	; select bank0
  5440  073B  00AA               	movwf	??_nrf24l01SendPacket+1
  5441  073C  3008               	movlw	8
  5442  073D  00A9               	movwf	??_nrf24l01SendPacket
  5443  073E  3077               	movlw	119
  5444  073F                     u3617:	
  5445  073F  0B89               	decfsz	9,f
  5446  0740  2F3F               	goto	u3617
  5447  0741  0BA9               	decfsz	??_nrf24l01SendPacket,f
  5448  0742  2F3F               	goto	u3617
  5449  0743  0BAA               	decfsz	??_nrf24l01SendPacket+1,f
  5450  0744  2F3F               	goto	u3617
  5451                           
  5452                           ;nrf24l01.c: 247: _delay((unsigned long)((50000)*(32000000/4000000.0)));
  5453  0745  3003               	movlw	3
  5454  0746  0020               	movlb	0	; select bank0
  5455  0747  00AA               	movwf	??_nrf24l01SendPacket+1
  5456  0748  3008               	movlw	8
  5457  0749  00A9               	movwf	??_nrf24l01SendPacket
  5458  074A  3077               	movlw	119
  5459  074B                     u3627:	
  5460  074B  0B89               	decfsz	9,f
  5461  074C  2F4B               	goto	u3627
  5462  074D  0BA9               	decfsz	??_nrf24l01SendPacket,f
  5463  074E  2F4B               	goto	u3627
  5464  074F  0BAA               	decfsz	??_nrf24l01SendPacket+1,f
  5465  0750  2F4B               	goto	u3627
  5466                           
  5467                           ;nrf24l01.c: 248: nrf24l01ChangeTXPower(1);
  5468  0751  3001               	movlw	1
  5469  0752  0020               	movlb	0	; select bank0
  5470  0753  00A3               	movwf	nrf24l01ChangeTXPower@addPower
  5471  0754  3000               	movlw	0
  5472  0755  00A4               	movwf	nrf24l01ChangeTXPower@addPower+1
  5473  0756  318A  22AA  3186   	fcall	_nrf24l01ChangeTXPower
  5474                           
  5475                           ;nrf24l01.c: 249: goto RESEND;
  5476  0759  2E97               	goto	l299
  5477  075A                     l2481:	
  5478                           
  5479                           ;nrf24l01.c: 250: };nrf24l01.c: 251: _delay((unsigned long)((100)*(32000000/4000000.0)))
      +                          ;
  5480  075A  30A0               	movlw	160
  5481  075B                     u3637:	
  5482  075B  3200               	nop2
  5483  075C  0B89               	decfsz	9,f
  5484  075D  2F5B               	goto	u3637
  5485  075E  2F2D               	goto	l2483
  5486  075F                     __end_of_nrf24l01SendPacket:	
  5487                           
  5488                           	psect	text15
  5489  17E1                     __ptext15:	
  5490 ;; *************** function _strlen *****************
  5491 ;; Defined at:
  5492 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\strlen.c"
  5493 ;; Parameters:    Size  Location     Type
  5494 ;;  s               2    0[BANK0 ] PTR const unsigned char 
  5495 ;;		 -> packet.Message(32), packet.Message(32), NULL(0), RXPacket.Message(32), 
  5496 ;;		 -> RXPacket(33), main@packet(33), loop@packet(33), romDataMap(28), 
  5497 ;; Auto vars:     Size  Location     Type
  5498 ;;  cp              2    4[BANK0 ] PTR const unsigned char 
  5499 ;;		 -> packet.Message(32), packet.Message(32), NULL(0), RXPacket.Message(32), 
  5500 ;;		 -> RXPacket(33), main@packet(33), loop@packet(33), romDataMap(28), 
  5501 ;; Return value:  Size  Location     Type
  5502 ;;                  2    0[BANK0 ] unsigned int 
  5503 ;; Registers used:
  5504 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  5505 ;; Tracked objects:
  5506 ;;		On entry : 0/0
  5507 ;;		On exit  : 0/0
  5508 ;;		Unchanged: 0/0
  5509 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5510 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5511 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5512 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5513 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5514 ;;Total ram usage:        6 bytes
  5515 ;; Hardware stack levels used:    1
  5516 ;; Hardware stack levels required when called:    7
  5517 ;; This function calls:
  5518 ;;		Nothing
  5519 ;; This function is called by:
  5520 ;;		_nrf24l01GetPipe
  5521 ;;		_nrf24l01SendPacket
  5522 ;; This function uses a non-reentrant model
  5523 ;;
  5524                           
  5525                           
  5526                           ;psect for function _strlen
  5527  17E1                     _strlen:	
  5528                           
  5529                           ;incstack = 0
  5530                           ; Regs used in _strlen: [wreg+fsr1l+fsr1h+status,2+status,0]
  5531  17E1  0020               	movlb	0	; select bank0
  5532  17E2  0821               	movf	strlen@s+1,w
  5533  17E3  00A5               	movwf	strlen@cp+1
  5534  17E4  0820               	movf	strlen@s,w
  5535  17E5  00A4               	movwf	strlen@cp
  5536  17E6                     l2353:	
  5537  17E6  0824               	movf	strlen@cp,w
  5538  17E7  0086               	movwf	6
  5539  17E8  0825               	movf	strlen@cp+1,w
  5540  17E9  0087               	movwf	7
  5541  17EA  0801               	movf	1,w
  5542  17EB  1903               	btfsc	3,2
  5543  17EC  2FF2               	goto	l2355
  5544  17ED  3001               	movlw	1
  5545  17EE  07A4               	addwf	strlen@cp,f
  5546  17EF  3000               	movlw	0
  5547  17F0  3DA5               	addwfc	strlen@cp+1,f
  5548  17F1  2FE6               	goto	l2353
  5549  17F2                     l2355:	
  5550  17F2  0920               	comf	strlen@s,w
  5551  17F3  00A2               	movwf	??_strlen
  5552  17F4  0921               	comf	strlen@s+1,w
  5553  17F5  00A3               	movwf	??_strlen+1
  5554  17F6  0AA2               	incf	??_strlen,f
  5555  17F7  1903               	skipnz
  5556  17F8  0AA3               	incf	??_strlen+1,f
  5557  17F9  0824               	movf	strlen@cp,w
  5558  17FA  0722               	addwf	??_strlen,w
  5559  17FB  00A0               	movwf	?_strlen
  5560  17FC  0825               	movf	strlen@cp+1,w
  5561  17FD  3D23               	addwfc	??_strlen+1,w
  5562  17FE  00A1               	movwf	?_strlen+1
  5563  17FF  0008               	return
  5564  1800                     __end_of_strlen:	
  5565                           
  5566                           	psect	text16
  5567  0B2C                     __ptext16:	
  5568 ;; *************** function _nrf24l01SetRXMode *****************
  5569 ;; Defined at:
  5570 ;;		line 54 in file "nrf24l01.c"
  5571 ;; Parameters:    Size  Location     Type
  5572 ;;  rxMode          1    wreg     unsigned char 
  5573 ;; Auto vars:     Size  Location     Type
  5574 ;;  rxMode          1    5[BANK0 ] unsigned char 
  5575 ;;  config          1    4[BANK0 ] struct .
  5576 ;; Return value:  Size  Location     Type
  5577 ;;                  1    wreg      void 
  5578 ;; Registers used:
  5579 ;;		wreg, status,2, status,0, pclath, cstack
  5580 ;; Tracked objects:
  5581 ;;		On entry : 0/0
  5582 ;;		On exit  : 0/0
  5583 ;;		Unchanged: 0/0
  5584 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5585 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5586 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5587 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5588 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5589 ;;Total ram usage:        3 bytes
  5590 ;; Hardware stack levels used:    1
  5591 ;; Hardware stack levels required when called:   10
  5592 ;; This function calls:
  5593 ;;		_nrf24l01CEHigh
  5594 ;;		_nrf24l01CELow
  5595 ;;		_nrf24l01Send
  5596 ;; This function is called by:
  5597 ;;		_sleep
  5598 ;;		_nrf24l01SendPacket
  5599 ;; This function uses a non-reentrant model
  5600 ;;
  5601                           
  5602                           
  5603                           ;psect for function _nrf24l01SetRXMode
  5604  0B2C                     _nrf24l01SetRXMode:	
  5605                           
  5606                           ;incstack = 0
  5607                           ; Regs used in _nrf24l01SetRXMode: [wreg+status,2+status,0+pclath+cstack]
  5608                           ;nrf24l01SetRXMode@rxMode stored from wreg
  5609  0B2C  0020               	movlb	0	; select bank0
  5610  0B2D  00A5               	movwf	nrf24l01SetRXMode@rxMode
  5611                           
  5612                           ;nrf24l01.c: 62: n_CONFIG_t config;;nrf24l01.c: 65: config.byte = nrf24l01Send((unsigned
      +                          ) 0b00000000 | (unsigned) 0x00, 0);
  5613  0B2E  01A0               	clrf	nrf24l01Send@data
  5614  0B2F  3000               	movlw	0
  5615  0B30  3188  2001  318B   	fcall	_nrf24l01Send
  5616  0B33  0020               	movlb	0	; select bank0
  5617  0B34  00A3               	movwf	??_nrf24l01SetRXMode
  5618  0B35  0823               	movf	??_nrf24l01SetRXMode,w
  5619  0B36  00A4               	movwf	nrf24l01SetRXMode@config
  5620                           
  5621                           ;nrf24l01.c: 68: if (config.PRIM_RX != rxMode){
  5622  0B37  0824               	movf	nrf24l01SetRXMode@config,w
  5623  0B38  3901               	andlw	1
  5624  0B39  0625               	xorwf	nrf24l01SetRXMode@rxMode,w
  5625  0B3A  1903               	skipnz
  5626  0B3B  2B69               	goto	l2331
  5627                           
  5628                           ;nrf24l01.c: 71: nrf24l01CELow();
  5629  0B3C  3196  266E  318B   	fcall	_nrf24l01CELow
  5630                           
  5631                           ;nrf24l01.c: 72: _delay((unsigned long)((200)*(32000000/4000000.0)));
  5632  0B3F  30E4               	movlw	228
  5633  0B40                     u3647:	
  5634  0B40  3200               	nop2
  5635  0B41  3200               	nop2
  5636  0B42  0B89               	decfsz	9,f
  5637  0B43  2B40               	goto	u3647
  5638  0B44  3200               	nop2
  5639  0B45  3200               	nop2
  5640                           
  5641                           ;nrf24l01.c: 75: config.PRIM_RX = rxMode;
  5642  0B46  0020               	movlb	0	; select bank0
  5643  0B47  0825               	movf	nrf24l01SetRXMode@rxMode,w
  5644  0B48  3901               	andlw	1
  5645  0B49  1024               	bcf	nrf24l01SetRXMode@config,0
  5646  0B4A  1D03               	skipz
  5647  0B4B  1424               	bsf	nrf24l01SetRXMode@config,0
  5648                           
  5649                           ;nrf24l01.c: 76: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x00, config.byte);
  5650  0B4C  0824               	movf	nrf24l01SetRXMode@config,w
  5651  0B4D  00A3               	movwf	??_nrf24l01SetRXMode
  5652  0B4E  0823               	movf	??_nrf24l01SetRXMode,w
  5653  0B4F  00A0               	movwf	nrf24l01Send@data
  5654  0B50  3020               	movlw	32
  5655  0B51  3188  2001  318B   	fcall	_nrf24l01Send
  5656                           
  5657                           ;nrf24l01.c: 79: _delay((unsigned long)((200)*(32000000/4000000.0)));
  5658  0B54  30E4               	movlw	228
  5659  0B55                     u3657:	
  5660  0B55  3200               	nop2
  5661  0B56  3200               	nop2
  5662  0B57  0B89               	decfsz	9,f
  5663  0B58  2B55               	goto	u3657
  5664  0B59  3200               	nop2
  5665  0B5A  3200               	nop2
  5666                           
  5667                           ;nrf24l01.c: 82: if (rxMode){
  5668  0B5B  0020               	movlb	0	; select bank0
  5669  0B5C  0825               	movf	nrf24l01SetRXMode@rxMode,w
  5670  0B5D  1903               	btfsc	3,2
  5671  0B5E  2B69               	goto	l2331
  5672                           
  5673                           ;nrf24l01.c: 83: nrf24l01CEHigh();
  5674  0B5F  3196  266B  318B   	fcall	_nrf24l01CEHigh
  5675                           
  5676                           ;nrf24l01.c: 84: _delay((unsigned long)((200)*(32000000/4000000.0)));
  5677  0B62  30E4               	movlw	228
  5678  0B63                     u3667:	
  5679  0B63  3200               	nop2
  5680  0B64  3200               	nop2
  5681  0B65  0B89               	decfsz	9,f
  5682  0B66  2B63               	goto	u3667
  5683  0B67  3200               	nop2
  5684  0B68  3200               	nop2
  5685  0B69                     l2331:	
  5686                           
  5687                           ;nrf24l01.c: 85: };nrf24l01.c: 86: };nrf24l01.c: 89: nrf24l01.RXMode = rxMode;
  5688  0B69  0020               	movlb	0	; select bank0
  5689  0B6A  0825               	movf	nrf24l01SetRXMode@rxMode,w
  5690  0B6B  3901               	andlw	1
  5691  0B6C  117D               	bcf	_nrf24l01,2	;volatile
  5692  0B6D  1D03               	skipz
  5693  0B6E  157D               	bsf	_nrf24l01,2	;volatile
  5694  0B6F  0008               	return
  5695  0B70                     __end_of_nrf24l01SetRXMode:	
  5696                           
  5697                           	psect	text17
  5698  0985                     __ptext17:	
  5699 ;; *************** function ___lwdiv *****************
  5700 ;; Defined at:
  5701 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\lwdiv.c"
  5702 ;; Parameters:    Size  Location     Type
  5703 ;;  divisor         2    0[BANK0 ] unsigned int 
  5704 ;;  dividend        2    2[BANK0 ] unsigned int 
  5705 ;; Auto vars:     Size  Location     Type
  5706 ;;  quotient        2    5[BANK0 ] unsigned int 
  5707 ;;  counter         1    7[BANK0 ] unsigned char 
  5708 ;; Return value:  Size  Location     Type
  5709 ;;                  2    0[BANK0 ] unsigned int 
  5710 ;; Registers used:
  5711 ;;		wreg, status,2, status,0
  5712 ;; Tracked objects:
  5713 ;;		On entry : 0/0
  5714 ;;		On exit  : 0/0
  5715 ;;		Unchanged: 0/0
  5716 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5717 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5718 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5719 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5720 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5721 ;;Total ram usage:        8 bytes
  5722 ;; Hardware stack levels used:    1
  5723 ;; Hardware stack levels required when called:    7
  5724 ;; This function calls:
  5725 ;;		Nothing
  5726 ;; This function is called by:
  5727 ;;		_sleep
  5728 ;; This function uses a non-reentrant model
  5729 ;;
  5730                           
  5731                           
  5732                           ;psect for function ___lwdiv
  5733  0985                     ___lwdiv:	
  5734                           
  5735                           ;incstack = 0
  5736                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  5737  0985  0020               	movlb	0	; select bank0
  5738  0986  01A5               	clrf	___lwdiv@quotient
  5739  0987  01A6               	clrf	___lwdiv@quotient+1
  5740  0988  0820               	movf	___lwdiv@divisor,w
  5741  0989  0421               	iorwf	___lwdiv@divisor+1,w
  5742  098A  1903               	btfsc	3,2
  5743  098B  29B5               	goto	l3061
  5744  098C  01A7               	clrf	___lwdiv@counter
  5745  098D  0AA7               	incf	___lwdiv@counter,f
  5746  098E                     l3049:	
  5747  098E  1BA1               	btfsc	___lwdiv@divisor+1,7
  5748  098F  299A               	goto	l3051
  5749  0990  3001               	movlw	1
  5750  0991                     u3165:	
  5751  0991  35A0               	lslf	___lwdiv@divisor,f
  5752  0992  0DA1               	rlf	___lwdiv@divisor+1,f
  5753  0993  0B89               	decfsz	9,f
  5754  0994  2991               	goto	u3165
  5755  0995  3001               	movlw	1
  5756  0996  00A4               	movwf	??___lwdiv
  5757  0997  0824               	movf	??___lwdiv,w
  5758  0998  07A7               	addwf	___lwdiv@counter,f
  5759  0999  298E               	goto	l3049
  5760  099A                     l3051:	
  5761  099A  3001               	movlw	1
  5762  099B                     u3185:	
  5763  099B  35A5               	lslf	___lwdiv@quotient,f
  5764  099C  0DA6               	rlf	___lwdiv@quotient+1,f
  5765  099D  0B89               	decfsz	9,f
  5766  099E  299B               	goto	u3185
  5767  099F  0821               	movf	___lwdiv@divisor+1,w
  5768  09A0  0223               	subwf	___lwdiv@dividend+1,w
  5769  09A1  1D03               	skipz
  5770  09A2  29A5               	goto	u3195
  5771  09A3  0820               	movf	___lwdiv@divisor,w
  5772  09A4  0222               	subwf	___lwdiv@dividend,w
  5773  09A5                     u3195:	
  5774  09A5  1C03               	skipc
  5775  09A6  29AC               	goto	l3057
  5776  09A7  0820               	movf	___lwdiv@divisor,w
  5777  09A8  02A2               	subwf	___lwdiv@dividend,f
  5778  09A9  0821               	movf	___lwdiv@divisor+1,w
  5779  09AA  3BA3               	subwfb	___lwdiv@dividend+1,f
  5780  09AB  1425               	bsf	___lwdiv@quotient,0
  5781  09AC                     l3057:	
  5782  09AC  3001               	movlw	1
  5783  09AD                     u3205:	
  5784  09AD  36A1               	lsrf	___lwdiv@divisor+1,f
  5785  09AE  0CA0               	rrf	___lwdiv@divisor,f
  5786  09AF  0B89               	decfsz	9,f
  5787  09B0  29AD               	goto	u3205
  5788  09B1  3001               	movlw	1
  5789  09B2  02A7               	subwf	___lwdiv@counter,f
  5790  09B3  1D03               	btfss	3,2
  5791  09B4  299A               	goto	l3051
  5792  09B5                     l3061:	
  5793  09B5  0826               	movf	___lwdiv@quotient+1,w
  5794  09B6  00A1               	movwf	?___lwdiv+1
  5795  09B7  0825               	movf	___lwdiv@quotient,w
  5796  09B8  00A0               	movwf	?___lwdiv
  5797  09B9  0008               	return
  5798  09BA                     __end_of___lwdiv:	
  5799                           
  5800                           	psect	text18
  5801  0D02                     __ptext18:	
  5802 ;; *************** function _setMessage *****************
  5803 ;; Defined at:
  5804 ;;		line 144 in file "main.c"
  5805 ;; Parameters:    Size  Location     Type
  5806 ;;  packet          2   25[BANK1 ] PTR struct .
  5807 ;;		 -> main@packet(33), loop@packet(33), 
  5808 ;;  topic           2   27[BANK1 ] PTR const unsigned char 
  5809 ;;		 -> STR_9(5), STR_7(6), STR_6(7), STR_5(5), 
  5810 ;;		 -> STR_4(5), STR_3(4), 
  5811 ;;  value           3   29[BANK1 ] float 
  5812 ;; Auto vars:     Size  Location     Type
  5813 ;;  status          2   33[BANK1 ] int 
  5814 ;; Return value:  Size  Location     Type
  5815 ;;                  1    wreg      void 
  5816 ;; Registers used:
  5817 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5818 ;; Tracked objects:
  5819 ;;		On entry : 0/0
  5820 ;;		On exit  : 0/0
  5821 ;;		Unchanged: 0/0
  5822 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5823 ;;      Params:         0       0       7       0       0       0       0       0       0       0       0       0       
      +0       0
  5824 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  5825 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  5826 ;;      Totals:         0       0      10       0       0       0       0       0       0       0       0       0       
      +0       0
  5827 ;;Total ram usage:       10 bytes
  5828 ;; Hardware stack levels used:    1
  5829 ;; Hardware stack levels required when called:   11
  5830 ;; This function calls:
  5831 ;;		_ftoa
  5832 ;;		_memset
  5833 ;;		_strcat
  5834 ;; This function is called by:
  5835 ;;		_loop
  5836 ;;		_main
  5837 ;; This function uses a non-reentrant model
  5838 ;;
  5839                           
  5840                           
  5841                           ;psect for function _setMessage
  5842  0D02                     _setMessage:	
  5843                           
  5844                           ;main.c: 145: memset(packet->Message, 0, sizeof(packet->Message));
  5845                           
  5846                           ;incstack = 0
  5847                           ; Regs used in _setMessage: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5848  0D02  0021               	movlb	1	; select bank1
  5849  0D03  0839               	movf	setMessage@packet^(0+128),w
  5850  0D04  3E01               	addlw	1
  5851  0D05  0020               	movlb	0	; select bank0
  5852  0D06  00A0               	movwf	memset@p1
  5853  0D07  3000               	movlw	0
  5854  0D08  0021               	movlb	1	; select bank1
  5855  0D09  3D3A               	addwfc	(setMessage@packet+1)^(0+128),w
  5856  0D0A  0020               	movlb	0	; select bank0
  5857  0D0B  00A1               	movwf	memset@p1+1
  5858  0D0C  3000               	movlw	0
  5859  0D0D  00A2               	movwf	memset@c
  5860  0D0E  00A3               	movwf	memset@c+1
  5861  0D0F  3020               	movlw	32
  5862  0D10  00A4               	movwf	memset@n
  5863  0D11  3000               	movlw	0
  5864  0D12  00A5               	movwf	memset@n+1
  5865  0D13  3197  2720  318D   	fcall	_memset
  5866                           
  5867                           ;main.c: 147: strcat(packet->Message, romData->name);
  5868  0D16  0021               	movlb	1	; select bank1
  5869  0D17  0839               	movf	setMessage@packet^(0+128),w
  5870  0D18  3E01               	addlw	1
  5871  0D19  00B3               	movwf	strcat@to^(0+128)
  5872  0D1A  3000               	movlw	0
  5873  0D1B  3D3A               	addwfc	(setMessage@packet+1)^(0+128),w
  5874  0D1C  00B4               	movwf	(strcat@to+1)^(0+128)
  5875  0D1D  086B               	movf	_romData^(0+128),w
  5876  0D1E  3E01               	addlw	1
  5877  0D1F  00B5               	movwf	strcat@from^(0+128)
  5878  0D20  3001               	movlw	1
  5879  0D21  00B6               	movwf	(strcat@from+1)^(0+128)
  5880  0D22  3188  20AF  318D   	fcall	_strcat
  5881                           
  5882                           ;main.c: 149: strcat(packet->Message, "/");
  5883  0D25  0021               	movlb	1	; select bank1
  5884  0D26  0839               	movf	setMessage@packet^(0+128),w
  5885  0D27  3E01               	addlw	1
  5886  0D28  00B3               	movwf	strcat@to^(0+128)
  5887  0D29  3000               	movlw	0
  5888  0D2A  3D3A               	addwfc	(setMessage@packet+1)^(0+128),w
  5889  0D2B  00B4               	movwf	(strcat@to+1)^(0+128)
  5890  0D2C  3035               	movlw	low (STR_1| (0+32768))
  5891  0D2D  00B5               	movwf	strcat@from^(0+128)
  5892  0D2E  3098               	movlw	high (STR_1| (0+32768))
  5893  0D2F  00B6               	movwf	(strcat@from^(0+128)+1)
  5894  0D30  3188  20AF  318D   	fcall	_strcat
  5895                           
  5896                           ;main.c: 150: strcat(packet->Message, topic);
  5897  0D33  0021               	movlb	1	; select bank1
  5898  0D34  0839               	movf	setMessage@packet^(0+128),w
  5899  0D35  3E01               	addlw	1
  5900  0D36  00B3               	movwf	strcat@to^(0+128)
  5901  0D37  3000               	movlw	0
  5902  0D38  3D3A               	addwfc	(setMessage@packet+1)^(0+128),w
  5903  0D39  00B4               	movwf	(strcat@to+1)^(0+128)
  5904  0D3A  083C               	movf	(setMessage@topic+1)^(0+128),w
  5905  0D3B  00B6               	movwf	(strcat@from+1)^(0+128)
  5906  0D3C  083B               	movf	setMessage@topic^(0+128),w
  5907  0D3D  00B5               	movwf	strcat@from^(0+128)
  5908  0D3E  3188  20AF  318D   	fcall	_strcat
  5909                           
  5910                           ;main.c: 152: int status;;main.c: 153: strcat(packet->Message, "/");
  5911  0D41  0021               	movlb	1	; select bank1
  5912  0D42  0839               	movf	setMessage@packet^(0+128),w
  5913  0D43  3E01               	addlw	1
  5914  0D44  00B3               	movwf	strcat@to^(0+128)
  5915  0D45  3000               	movlw	0
  5916  0D46  3D3A               	addwfc	(setMessage@packet+1)^(0+128),w
  5917  0D47  00B4               	movwf	(strcat@to+1)^(0+128)
  5918  0D48  3035               	movlw	low (STR_1| (0+32768))
  5919  0D49  00B5               	movwf	strcat@from^(0+128)
  5920  0D4A  3098               	movlw	high (STR_1| (0+32768))
  5921  0D4B  00B6               	movwf	(strcat@from^(0+128)+1)
  5922  0D4C  3188  20AF  318D   	fcall	_strcat
  5923                           
  5924                           ;main.c: 154: strcat(packet->Message, ftoa(value, &status));
  5925  0D4F  0021               	movlb	1	; select bank1
  5926  0D50  0839               	movf	setMessage@packet^(0+128),w
  5927  0D51  3E01               	addlw	1
  5928  0D52  00B3               	movwf	strcat@to^(0+128)
  5929  0D53  3000               	movlw	0
  5930  0D54  3D3A               	addwfc	(setMessage@packet+1)^(0+128),w
  5931  0D55  00B4               	movwf	(strcat@to+1)^(0+128)
  5932  0D56  083D               	movf	setMessage@value^(0+128),w
  5933  0D57  00A6               	movwf	ftoa@f^(0+128)
  5934  0D58  083E               	movf	(setMessage@value+1)^(0+128),w
  5935  0D59  00A7               	movwf	(ftoa@f+1)^(0+128)
  5936  0D5A  083F               	movf	(setMessage@value+2)^(0+128),w
  5937  0D5B  00A8               	movwf	(ftoa@f+2)^(0+128)
  5938  0D5C  30C1               	movlw	(low (setMessage@status| 0))& (0+255)
  5939  0D5D  00C0               	movwf	??_setMessage^(0+128)
  5940  0D5E  0840               	movf	??_setMessage^(0+128),w
  5941  0D5F  00A9               	movwf	ftoa@status^(0+128)
  5942  0D60  3185  25A5  318D   	fcall	_ftoa
  5943  0D63  0021               	movlb	1	; select bank1
  5944  0D64  00B5               	movwf	strcat@from^(0+128)
  5945  0D65  3001               	movlw	1
  5946  0D66  00B6               	movwf	(strcat@from+1)^(0+128)
  5947  0D67  3188  20AF         	fcall	_strcat
  5948  0D69  0008               	return
  5949  0D6A                     __end_of_setMessage:	
  5950                           
  5951                           	psect	text19
  5952  08AF                     __ptext19:	
  5953 ;; *************** function _strcat *****************
  5954 ;; Defined at:
  5955 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\strcat.c"
  5956 ;; Parameters:    Size  Location     Type
  5957 ;;  to              2   19[BANK1 ] PTR unsigned char 
  5958 ;;		 -> main@packet(33), loop@packet(33), 
  5959 ;;  from            2   21[BANK1 ] PTR const unsigned char 
  5960 ;;		 -> romDataMap.name(16), ftoa@buf(17), STR_9(5), STR_7(6), 
  5961 ;;		 -> STR_6(7), STR_5(5), STR_4(5), STR_3(4), 
  5962 ;;		 -> STR_2(2), STR_1(2), romDataMap(28), 
  5963 ;; Auto vars:     Size  Location     Type
  5964 ;;  cp              2   23[BANK1 ] PTR unsigned char 
  5965 ;;		 -> main@packet(33), loop@packet(33), 
  5966 ;; Return value:  Size  Location     Type
  5967 ;;                  2   19[BANK1 ] PTR unsigned char 
  5968 ;; Registers used:
  5969 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath
  5970 ;; Tracked objects:
  5971 ;;		On entry : 0/0
  5972 ;;		On exit  : 0/0
  5973 ;;		Unchanged: 0/0
  5974 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5975 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  5976 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  5977 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5978 ;;      Totals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0
  5979 ;;Total ram usage:        6 bytes
  5980 ;; Hardware stack levels used:    1
  5981 ;; Hardware stack levels required when called:    7
  5982 ;; This function calls:
  5983 ;;		Nothing
  5984 ;; This function is called by:
  5985 ;;		_setMessage
  5986 ;; This function uses a non-reentrant model
  5987 ;;
  5988                           
  5989                           
  5990                           ;psect for function _strcat
  5991  08AF                     _strcat:	
  5992                           
  5993                           ;incstack = 0
  5994                           ; Regs used in _strcat: [wreg-fsr1h+status,2+status,0+pclath]
  5995  08AF  0021               	movlb	1	; select bank1
  5996  08B0  0834               	movf	(strcat@to+1)^(0+128),w
  5997  08B1  00B8               	movwf	(strcat@cp+1)^(0+128)
  5998  08B2  0833               	movf	strcat@to^(0+128),w
  5999  08B3  00B7               	movwf	strcat@cp^(0+128)
  6000  08B4                     l2935:	
  6001  08B4  0837               	movf	strcat@cp^(0+128),w
  6002  08B5  0086               	movwf	6
  6003  08B6  0838               	movf	(strcat@cp+1)^(0+128),w
  6004  08B7  0087               	movwf	7
  6005  08B8  0801               	movf	1,w
  6006  08B9  1903               	btfsc	3,2
  6007  08BA  28C8               	goto	l2939
  6008  08BB  3001               	movlw	1
  6009  08BC  07B7               	addwf	strcat@cp^(0+128),f
  6010  08BD  3000               	movlw	0
  6011  08BE  3DB8               	addwfc	(strcat@cp+1)^(0+128),f
  6012  08BF  28B4               	goto	l2935
  6013  08C0                     l2937:	
  6014  08C0  3001               	movlw	1
  6015  08C1  07B7               	addwf	strcat@cp^(0+128),f
  6016  08C2  3000               	movlw	0
  6017  08C3  3DB8               	addwfc	(strcat@cp+1)^(0+128),f
  6018  08C4  3001               	movlw	1
  6019  08C5  07B5               	addwf	strcat@from^(0+128),f
  6020  08C6  3000               	movlw	0
  6021  08C7  3DB6               	addwfc	(strcat@from+1)^(0+128),f
  6022  08C8                     l2939:	
  6023  08C8  0837               	movf	strcat@cp^(0+128),w
  6024  08C9  0086               	movwf	6
  6025  08CA  0838               	movf	(strcat@cp+1)^(0+128),w
  6026  08CB  0087               	movwf	7
  6027  08CC  0835               	movf	strcat@from^(0+128),w
  6028  08CD  0084               	movwf	4
  6029  08CE  0836               	movf	(strcat@from+1)^(0+128),w
  6030  08CF  0085               	movwf	5
  6031  08D0  0800               	movf	0,w	;code access
  6032  08D1  3FC0               	movwi [0]fsr1
  6033  08D2  0889               	movf	9,f
  6034  08D3  1903               	btfsc	3,2
  6035  08D4  0008               	return
  6036  08D5  28C0               	goto	l2937
  6037  08D6                     __end_of_strcat:	
  6038                           ;	Return value of _strcat is never used
  6039                           
  6040                           
  6041                           	psect	text20
  6042  1720                     __ptext20:	
  6043 ;; *************** function _memset *****************
  6044 ;; Defined at:
  6045 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\memset.c"
  6046 ;; Parameters:    Size  Location     Type
  6047 ;;  p1              2    0[BANK0 ] PTR void 
  6048 ;;		 -> RXPacket(33), main@packet(33), loop@packet(33), 
  6049 ;;  c               2    2[BANK0 ] int 
  6050 ;;  n               2    4[BANK0 ] unsigned int 
  6051 ;; Auto vars:     Size  Location     Type
  6052 ;;  p               2    6[BANK0 ] PTR unsigned char 
  6053 ;;		 -> RXPacket(33), main@packet(33), loop@packet(33), 
  6054 ;; Return value:  Size  Location     Type
  6055 ;;                  2    0[BANK0 ] PTR void 
  6056 ;; Registers used:
  6057 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  6058 ;; Tracked objects:
  6059 ;;		On entry : 0/0
  6060 ;;		On exit  : 0/0
  6061 ;;		Unchanged: 0/0
  6062 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6063 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6064 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6065 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6066 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6067 ;;Total ram usage:        8 bytes
  6068 ;; Hardware stack levels used:    1
  6069 ;; Hardware stack levels required when called:    7
  6070 ;; This function calls:
  6071 ;;		Nothing
  6072 ;; This function is called by:
  6073 ;;		_setMessage
  6074 ;; This function uses a non-reentrant model
  6075 ;;
  6076                           
  6077                           
  6078                           ;psect for function _memset
  6079  1720                     _memset:	
  6080                           
  6081                           ;incstack = 0
  6082                           ; Regs used in _memset: [wreg+fsr1l+fsr1h+status,2+status,0]
  6083  1720  0020               	movlb	0	; select bank0
  6084  1721  0821               	movf	memset@p1+1,w
  6085  1722  00A7               	movwf	memset@p+1
  6086  1723  0820               	movf	memset@p1,w
  6087  1724  00A6               	movwf	memset@p
  6088  1725                     l2929:	
  6089  1725  3001               	movlw	1
  6090  1726  02A4               	subwf	memset@n,f
  6091  1727  3000               	movlw	0
  6092  1728  3BA5               	subwfb	memset@n+1,f
  6093  1729  0A24               	incf	memset@n,w
  6094  172A  1903               	btfsc	3,2
  6095  172B  0A25               	incf	memset@n+1,w
  6096  172C  1903               	btfsc	3,2
  6097  172D  0008               	return
  6098  172E  0826               	movf	memset@p,w
  6099  172F  0086               	movwf	6
  6100  1730  0827               	movf	memset@p+1,w
  6101  1731  0087               	movwf	7
  6102  1732  0822               	movf	memset@c,w
  6103  1733  0081               	movwf	1
  6104  1734  3001               	movlw	1
  6105  1735  07A6               	addwf	memset@p,f
  6106  1736  3000               	movlw	0
  6107  1737  3DA7               	addwfc	memset@p+1,f
  6108  1738  2F25               	goto	l2929
  6109  1739                     __end_of_memset:	
  6110                           ;	Return value of _memset is never used
  6111                           
  6112                           
  6113                           	psect	text21
  6114  05A5                     __ptext21:	
  6115 ;; *************** function _ftoa *****************
  6116 ;; Defined at:
  6117 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\ftoa.c"
  6118 ;; Parameters:    Size  Location     Type
  6119 ;;  f               3    6[BANK1 ] float 
  6120 ;;  status          1    9[BANK1 ] PTR int 
  6121 ;;		 -> setMessage@status(2), 
  6122 ;; Auto vars:     Size  Location     Type
  6123 ;;  l               4   14[BANK1 ] unsigned long 
  6124 ;;  rem             4   10[BANK1 ] unsigned long 
  6125 ;;  cp              1   18[BANK1 ] PTR unsigned char 
  6126 ;;		 -> ftoa@buf(17), 
  6127 ;; Return value:  Size  Location     Type
  6128 ;;                  1    wreg      PTR unsigned char 
  6129 ;; Registers used:
  6130 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6131 ;; Tracked objects:
  6132 ;;		On entry : 0/0
  6133 ;;		On exit  : 0/0
  6134 ;;		Unchanged: 0/0
  6135 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6136 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  6137 ;;      Locals:         0       0       9       0       0       0       0       0       0       0       0       0       
      +0       0
  6138 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6139 ;;      Totals:         0       1      13       0       0       0       0       0       0       0       0       0       
      +0       0
  6140 ;;Total ram usage:       14 bytes
  6141 ;; Hardware stack levels used:    1
  6142 ;; Hardware stack levels required when called:   10
  6143 ;; This function calls:
  6144 ;;		___ftge
  6145 ;;		___ftmul
  6146 ;;		___ftneg
  6147 ;;		___ftsub
  6148 ;;		___fttol
  6149 ;;		___lltoft
  6150 ;;		_sprintf
  6151 ;; This function is called by:
  6152 ;;		_setMessage
  6153 ;; This function uses a non-reentrant model
  6154 ;;
  6155                           
  6156                           
  6157                           ;psect for function _ftoa
  6158  05A5                     _ftoa:	
  6159                           
  6160                           ;incstack = 0
  6161                           ; Regs used in _ftoa: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6162  05A5  3053               	movlw	(low (ftoa@buf| (0+256)))& (0+255)
  6163  05A6  0020               	movlb	0	; select bank0
  6164  05A7  00EF               	movwf	??_ftoa
  6165  05A8  086F               	movf	??_ftoa,w
  6166  05A9  0021               	movlb	1	; select bank1
  6167  05AA  00B2               	movwf	ftoa@cp^(0+128)
  6168  05AB  0826               	movf	ftoa@f^(0+128),w
  6169  05AC  0020               	movlb	0	; select bank0
  6170  05AD  00A0               	movwf	___ftge@ff1
  6171  05AE  0021               	movlb	1	; select bank1
  6172  05AF  0827               	movf	(ftoa@f+1)^(0+128),w
  6173  05B0  0020               	movlb	0	; select bank0
  6174  05B1  00A1               	movwf	___ftge@ff1+1
  6175  05B2  0021               	movlb	1	; select bank1
  6176  05B3  0828               	movf	(ftoa@f+2)^(0+128),w
  6177  05B4  0020               	movlb	0	; select bank0
  6178  05B5  00A2               	movwf	___ftge@ff1+2
  6179  05B6  3000               	movlw	0
  6180  05B7  00A3               	movwf	___ftge@ff2
  6181  05B8  3000               	movlw	0
  6182  05B9  00A4               	movwf	___ftge@ff2+1
  6183  05BA  3000               	movlw	0
  6184  05BB  00A5               	movwf	___ftge@ff2+2
  6185  05BC  3189  21F2  3185   	fcall	___ftge
  6186  05BF  1803               	btfsc	3,0
  6187  05C0  2DEB               	goto	l2951
  6188  05C1  302D               	movlw	45
  6189  05C2  0020               	movlb	0	; select bank0
  6190  05C3  00EF               	movwf	??_ftoa
  6191  05C4  0021               	movlb	1	; select bank1
  6192  05C5  0832               	movf	ftoa@cp^(0+128),w
  6193  05C6  0086               	movwf	6
  6194  05C7  3001               	movlw	1	; select bank2/3
  6195  05C8  0087               	movwf	7
  6196  05C9  0020               	movlb	0	; select bank0
  6197  05CA  086F               	movf	??_ftoa,w
  6198  05CB  0081               	movwf	1
  6199  05CC  3001               	movlw	1
  6200  05CD  00EF               	movwf	??_ftoa
  6201  05CE  086F               	movf	??_ftoa,w
  6202  05CF  0021               	movlb	1	; select bank1
  6203  05D0  07B2               	addwf	ftoa@cp^(0+128),f
  6204  05D1  0826               	movf	ftoa@f^(0+128),w
  6205  05D2  0020               	movlb	0	; select bank0
  6206  05D3  00D7               	movwf	___ftneg@f1
  6207  05D4  0021               	movlb	1	; select bank1
  6208  05D5  0827               	movf	(ftoa@f+1)^(0+128),w
  6209  05D6  0020               	movlb	0	; select bank0
  6210  05D7  00D8               	movwf	___ftneg@f1+1
  6211  05D8  0021               	movlb	1	; select bank1
  6212  05D9  0828               	movf	(ftoa@f+2)^(0+128),w
  6213  05DA  0020               	movlb	0	; select bank0
  6214  05DB  00D9               	movwf	___ftneg@f1+2
  6215  05DC  3196  2694  3185   	fcall	___ftneg
  6216  05DF  0020               	movlb	0	; select bank0
  6217  05E0  0857               	movf	?___ftneg,w
  6218  05E1  0021               	movlb	1	; select bank1
  6219  05E2  00A6               	movwf	ftoa@f^(0+128)
  6220  05E3  0020               	movlb	0	; select bank0
  6221  05E4  0858               	movf	?___ftneg+1,w
  6222  05E5  0021               	movlb	1	; select bank1
  6223  05E6  00A7               	movwf	(ftoa@f+1)^(0+128)
  6224  05E7  0020               	movlb	0	; select bank0
  6225  05E8  0859               	movf	?___ftneg+2,w
  6226  05E9  0021               	movlb	1	; select bank1
  6227  05EA  00A8               	movwf	(ftoa@f+2)^(0+128)
  6228  05EB                     l2951:	
  6229  05EB  0021               	movlb	1	; select bank1
  6230  05EC  0826               	movf	ftoa@f^(0+128),w
  6231  05ED  0020               	movlb	0	; select bank0
  6232  05EE  00E7               	movwf	___fttol@f1
  6233  05EF  0021               	movlb	1	; select bank1
  6234  05F0  0827               	movf	(ftoa@f+1)^(0+128),w
  6235  05F1  0020               	movlb	0	; select bank0
  6236  05F2  00E8               	movwf	___fttol@f1+1
  6237  05F3  0021               	movlb	1	; select bank1
  6238  05F4  0828               	movf	(ftoa@f+2)^(0+128),w
  6239  05F5  0020               	movlb	0	; select bank0
  6240  05F6  00E9               	movwf	___fttol@f1+2
  6241  05F7  3187  275F  3185   	fcall	___fttol
  6242  05FA  0020               	movlb	0	; select bank0
  6243  05FB  086A               	movf	?___fttol+3,w
  6244  05FC  0021               	movlb	1	; select bank1
  6245  05FD  00B1               	movwf	(ftoa@l+3)^(0+128)
  6246  05FE  0020               	movlb	0	; select bank0
  6247  05FF  0869               	movf	?___fttol+2,w
  6248  0600  0021               	movlb	1	; select bank1
  6249  0601  00B0               	movwf	(ftoa@l+2)^(0+128)
  6250  0602  0020               	movlb	0	; select bank0
  6251  0603  0868               	movf	?___fttol+1,w
  6252  0604  0021               	movlb	1	; select bank1
  6253  0605  00AF               	movwf	(ftoa@l+1)^(0+128)
  6254  0606  0020               	movlb	0	; select bank0
  6255  0607  0867               	movf	?___fttol,w
  6256  0608  0021               	movlb	1	; select bank1
  6257  0609  00AE               	movwf	ftoa@l^(0+128)
  6258  060A  0831               	movf	(ftoa@l+3)^(0+128),w
  6259  060B  0020               	movlb	0	; select bank0
  6260  060C  00AB               	movwf	___lltoft@c+3
  6261  060D  0021               	movlb	1	; select bank1
  6262  060E  0830               	movf	(ftoa@l+2)^(0+128),w
  6263  060F  0020               	movlb	0	; select bank0
  6264  0610  00AA               	movwf	___lltoft@c+2
  6265  0611  0021               	movlb	1	; select bank1
  6266  0612  082F               	movf	(ftoa@l+1)^(0+128),w
  6267  0613  0020               	movlb	0	; select bank0
  6268  0614  00A9               	movwf	___lltoft@c+1
  6269  0615  0021               	movlb	1	; select bank1
  6270  0616  082E               	movf	ftoa@l^(0+128),w
  6271  0617  0020               	movlb	0	; select bank0
  6272  0618  00A8               	movwf	___lltoft@c
  6273  0619  3189  2100  3185   	fcall	___lltoft
  6274  061C  0020               	movlb	0	; select bank0
  6275  061D  0828               	movf	?___lltoft,w
  6276  061E  00BB               	movwf	___ftsub@f2
  6277  061F  0829               	movf	?___lltoft+1,w
  6278  0620  00BC               	movwf	___ftsub@f2+1
  6279  0621  082A               	movf	?___lltoft+2,w
  6280  0622  00BD               	movwf	___ftsub@f2+2
  6281  0623  0021               	movlb	1	; select bank1
  6282  0624  0826               	movf	ftoa@f^(0+128),w
  6283  0625  0020               	movlb	0	; select bank0
  6284  0626  00BE               	movwf	___ftsub@f1
  6285  0627  0021               	movlb	1	; select bank1
  6286  0628  0827               	movf	(ftoa@f+1)^(0+128),w
  6287  0629  0020               	movlb	0	; select bank0
  6288  062A  00BF               	movwf	___ftsub@f1+1
  6289  062B  0021               	movlb	1	; select bank1
  6290  062C  0828               	movf	(ftoa@f+2)^(0+128),w
  6291  062D  0020               	movlb	0	; select bank0
  6292  062E  00C0               	movwf	___ftsub@f1+2
  6293  062F  3197  27C3  3185   	fcall	___ftsub
  6294  0632  0020               	movlb	0	; select bank0
  6295  0633  083B               	movf	?___ftsub,w
  6296  0634  0021               	movlb	1	; select bank1
  6297  0635  00A6               	movwf	ftoa@f^(0+128)
  6298  0636  0020               	movlb	0	; select bank0
  6299  0637  083C               	movf	?___ftsub+1,w
  6300  0638  0021               	movlb	1	; select bank1
  6301  0639  00A7               	movwf	(ftoa@f+1)^(0+128)
  6302  063A  0020               	movlb	0	; select bank0
  6303  063B  083D               	movf	?___ftsub+2,w
  6304  063C  0021               	movlb	1	; select bank1
  6305  063D  00A8               	movwf	(ftoa@f+2)^(0+128)
  6306  063E  0826               	movf	ftoa@f^(0+128),w
  6307  063F  0020               	movlb	0	; select bank0
  6308  0640  00DA               	movwf	___ftmul@f2
  6309  0641  0021               	movlb	1	; select bank1
  6310  0642  0827               	movf	(ftoa@f+1)^(0+128),w
  6311  0643  0020               	movlb	0	; select bank0
  6312  0644  00DB               	movwf	___ftmul@f2+1
  6313  0645  0021               	movlb	1	; select bank1
  6314  0646  0828               	movf	(ftoa@f+2)^(0+128),w
  6315  0647  0020               	movlb	0	; select bank0
  6316  0648  00DC               	movwf	___ftmul@f2+2
  6317  0649  3024               	movlw	36
  6318  064A  00D7               	movwf	___ftmul@f1
  6319  064B  3074               	movlw	116
  6320  064C  00D8               	movwf	___ftmul@f1+1
  6321  064D  3049               	movlw	73
  6322  064E  00D9               	movwf	___ftmul@f1+2
  6323  064F  318F  274C  3185   	fcall	___ftmul
  6324  0652  0020               	movlb	0	; select bank0
  6325  0653  0857               	movf	?___ftmul,w
  6326  0654  00E7               	movwf	___fttol@f1
  6327  0655  0858               	movf	?___ftmul+1,w
  6328  0656  00E8               	movwf	___fttol@f1+1
  6329  0657  0859               	movf	?___ftmul+2,w
  6330  0658  00E9               	movwf	___fttol@f1+2
  6331  0659  3187  275F  3185   	fcall	___fttol
  6332  065C  0020               	movlb	0	; select bank0
  6333  065D  086A               	movf	?___fttol+3,w
  6334  065E  0021               	movlb	1	; select bank1
  6335  065F  00AD               	movwf	(ftoa@rem+3)^(0+128)
  6336  0660  0020               	movlb	0	; select bank0
  6337  0661  0869               	movf	?___fttol+2,w
  6338  0662  0021               	movlb	1	; select bank1
  6339  0663  00AC               	movwf	(ftoa@rem+2)^(0+128)
  6340  0664  0020               	movlb	0	; select bank0
  6341  0665  0868               	movf	?___fttol+1,w
  6342  0666  0021               	movlb	1	; select bank1
  6343  0667  00AB               	movwf	(ftoa@rem+1)^(0+128)
  6344  0668  0020               	movlb	0	; select bank0
  6345  0669  0867               	movf	?___fttol,w
  6346  066A  0021               	movlb	1	; select bank1
  6347  066B  00AA               	movwf	ftoa@rem^(0+128)
  6348  066C  3001               	movlw	low (STR_10| (0+32768))
  6349  066D  0020               	movlb	0	; select bank0
  6350  066E  00B8               	movwf	sprintf@f
  6351  066F  3098               	movlw	high (STR_10| (0+32768))
  6352  0670  00B9               	movwf	sprintf@f+1
  6353  0671  0021               	movlb	1	; select bank1
  6354  0672  0831               	movf	(ftoa@l+3)^(0+128),w
  6355  0673  0020               	movlb	0	; select bank0
  6356  0674  00BD               	movwf	?_sprintf+5
  6357  0675  0021               	movlb	1	; select bank1
  6358  0676  0830               	movf	(ftoa@l+2)^(0+128),w
  6359  0677  0020               	movlb	0	; select bank0
  6360  0678  00BC               	movwf	?_sprintf+4
  6361  0679  0021               	movlb	1	; select bank1
  6362  067A  082F               	movf	(ftoa@l+1)^(0+128),w
  6363  067B  0020               	movlb	0	; select bank0
  6364  067C  00BB               	movwf	?_sprintf+3
  6365  067D  0021               	movlb	1	; select bank1
  6366  067E  082E               	movf	ftoa@l^(0+128),w
  6367  067F  0020               	movlb	0	; select bank0
  6368  0680  00BA               	movwf	?_sprintf+2
  6369  0681  0021               	movlb	1	; select bank1
  6370  0682  082D               	movf	(ftoa@rem+3)^(0+128),w
  6371  0683  0020               	movlb	0	; select bank0
  6372  0684  00C1               	movwf	?_sprintf+9
  6373  0685  0021               	movlb	1	; select bank1
  6374  0686  082C               	movf	(ftoa@rem+2)^(0+128),w
  6375  0687  0020               	movlb	0	; select bank0
  6376  0688  00C0               	movwf	?_sprintf+8
  6377  0689  0021               	movlb	1	; select bank1
  6378  068A  082B               	movf	(ftoa@rem+1)^(0+128),w
  6379  068B  0020               	movlb	0	; select bank0
  6380  068C  00BF               	movwf	?_sprintf+7
  6381  068D  0021               	movlb	1	; select bank1
  6382  068E  082A               	movf	ftoa@rem^(0+128),w
  6383  068F  0020               	movlb	0	; select bank0
  6384  0690  00BE               	movwf	?_sprintf+6
  6385  0691  0021               	movlb	1	; select bank1
  6386  0692  0832               	movf	ftoa@cp^(0+128),w
  6387  0693  3180  202D         	fcall	_sprintf
  6388  0695  3053               	movlw	(low (ftoa@buf| (0+256)))& (0+255)
  6389  0696  0008               	return
  6390  0697                     __end_of_ftoa:	
  6391                           
  6392                           	psect	text22
  6393  002D                     __ptext22:	
  6394 ;; *************** function _sprintf *****************
  6395 ;; Defined at:
  6396 ;;		line 500 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\doprnt.c"
  6397 ;; Parameters:    Size  Location     Type
  6398 ;;  sp              1    wreg     PTR unsigned char 
  6399 ;;		 -> ftoa@buf(17), 
  6400 ;;  f               2   24[BANK0 ] PTR const unsigned char 
  6401 ;;		 -> STR_10(11), 
  6402 ;; Auto vars:     Size  Location     Type
  6403 ;;  sp              1   46[BANK0 ] PTR unsigned char 
  6404 ;;		 -> ftoa@buf(17), 
  6405 ;;  val             4   42[BANK0 ] unsigned long 
  6406 ;;  tmpval          4    0        struct .
  6407 ;;  prec            2   49[BANK0 ] int 
  6408 ;;  width           2   47[BANK0 ] int 
  6409 ;;  cp              2    0        PTR const unsigned char 
  6410 ;;  len             2    0        unsigned int 
  6411 ;;  c               1   51[BANK0 ] unsigned char 
  6412 ;;  ap              1   41[BANK0 ] PTR void [1]
  6413 ;;		 -> ?_sprintf(2), 
  6414 ;;  flag            1   40[BANK0 ] unsigned char 
  6415 ;; Return value:  Size  Location     Type
  6416 ;;                  2   24[BANK0 ] int 
  6417 ;; Registers used:
  6418 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6419 ;; Tracked objects:
  6420 ;;		On entry : 0/0
  6421 ;;		On exit  : 0/0
  6422 ;;		Unchanged: 0/0
  6423 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6424 ;;      Params:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6425 ;;      Locals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6426 ;;      Temps:          0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6427 ;;      Totals:         0      28       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6428 ;;Total ram usage:       28 bytes
  6429 ;; Hardware stack levels used:    1
  6430 ;; Hardware stack levels required when called:    8
  6431 ;; This function calls:
  6432 ;;		___lldiv
  6433 ;;		___llmod
  6434 ;;		___wmul
  6435 ;;		_isdigit
  6436 ;; This function is called by:
  6437 ;;		_ftoa
  6438 ;; This function uses a non-reentrant model
  6439 ;;
  6440                           
  6441                           
  6442                           ;psect for function _sprintf
  6443  002D                     _sprintf:	
  6444                           
  6445                           ;incstack = 0
  6446                           ; Regs used in _sprintf: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6447                           ;sprintf@sp stored from wreg
  6448  002D  0020               	movlb	0	; select bank0
  6449  002E  00CE               	movwf	sprintf@sp
  6450                           
  6451                           ;doprnt.c: 502: va_list ap;;doprnt.c: 507: char c;;doprnt.c: 509: int width;;doprnt.c: 5
      +                          12: int prec;;doprnt.c: 520: unsigned char flag;;doprnt.c: 535: union {;doprnt.c: 536: u
      +                          nsigned long vd;;doprnt.c: 537: double integ;;doprnt.c: 538: } tmpval;;doprnt.c: 540: un
      +                          signed long val;;doprnt.c: 541: unsigned len;;doprnt.c: 542: const char * cp;;doprnt.c: 
      +                          545: *ap = __va_start();
  6452  002F  303A               	movlw	(low ((?_sprintf| 0+2)))& (0+255)
  6453  0030  00C2               	movwf	??_sprintf
  6454  0031  0842               	movf	??_sprintf,w
  6455  0032  00C9               	movwf	sprintf@ap
  6456  0033                     l2753:	
  6457                           ;doprnt.c: 548: while((c = *f++)) {
  6458                           
  6459  0033  0839               	movf	sprintf@f+1,w
  6460  0034  00C3               	movwf	??_sprintf+1
  6461  0035  0838               	movf	sprintf@f,w
  6462  0036  00C2               	movwf	??_sprintf
  6463  0037  0AB8               	incf	sprintf@f,f
  6464  0038  1903               	skipnz
  6465  0039  0AB9               	incf	sprintf@f+1,f
  6466  003A  0842               	movf	??_sprintf,w
  6467  003B  0084               	movwf	4
  6468  003C  0843               	movf	??_sprintf+1,w
  6469  003D  0085               	movwf	5
  6470  003E  0800               	movf	0,w	;code access
  6471  003F  00C4               	movwf	??_sprintf+2
  6472  0040  0844               	movf	??_sprintf+2,w
  6473  0041  00D3               	movwf	sprintf@c
  6474  0042  0853               	movf	sprintf@c,w
  6475  0043  1903               	btfsc	3,2
  6476  0044  29F4               	goto	l2755
  6477                           
  6478                           ;doprnt.c: 550: if(c != '%')
  6479  0045  3025               	movlw	37
  6480  0046  0653               	xorwf	sprintf@c,w
  6481  0047  1903               	btfsc	3,2
  6482  0048  2856               	goto	l2665
  6483                           
  6484                           ;doprnt.c: 552: {;doprnt.c: 553: ((*sp++ = (c)));
  6485  0049  0853               	movf	sprintf@c,w
  6486  004A  00C2               	movwf	??_sprintf
  6487  004B  084E               	movf	sprintf@sp,w
  6488  004C  0086               	movwf	6
  6489  004D  3001               	movlw	1	; select bank2/3
  6490  004E  0087               	movwf	7
  6491  004F  0842               	movf	??_sprintf,w
  6492  0050  0081               	movwf	1
  6493  0051  3001               	movlw	1
  6494  0052  00C2               	movwf	??_sprintf
  6495  0053  0842               	movf	??_sprintf,w
  6496  0054  07CE               	addwf	sprintf@sp,f
  6497                           
  6498                           ;doprnt.c: 554: continue;
  6499  0055  2833               	goto	l2753
  6500  0056                     l2665:	
  6501                           
  6502                           ;doprnt.c: 555: };doprnt.c: 558: width = 0;
  6503  0056  01CF               	clrf	sprintf@width
  6504  0057  01D0               	clrf	sprintf@width+1
  6505                           
  6506                           ;doprnt.c: 560: flag = 0;
  6507  0058  01C8               	clrf	sprintf@flag
  6508                           
  6509                           ;doprnt.c: 609: if(isdigit((unsigned)*f)) {
  6510  0059  0838               	movf	sprintf@f,w
  6511  005A  0084               	movwf	4
  6512  005B  0839               	movf	sprintf@f+1,w
  6513  005C  0085               	movwf	5
  6514  005D  0800               	movf	0,w	;code access
  6515  005E  3196  26AA  3180   	fcall	_isdigit
  6516  0061  1C03               	btfss	3,0
  6517  0062  2894               	goto	l2679
  6518                           
  6519                           ;doprnt.c: 610: width = 0;
  6520  0063  0020               	movlb	0	; select bank0
  6521  0064  01CF               	clrf	sprintf@width
  6522  0065  01D0               	clrf	sprintf@width+1
  6523  0066                     l2671:	
  6524                           ;doprnt.c: 611: do {
  6525                           
  6526                           
  6527                           ;doprnt.c: 612: width *= 10;
  6528  0066  300A               	movlw	10
  6529  0067  0020               	movlb	0	; select bank0
  6530  0068  00A0               	movwf	___wmul@multiplier
  6531  0069  3000               	movlw	0
  6532  006A  00A1               	movwf	___wmul@multiplier+1
  6533  006B  0850               	movf	sprintf@width+1,w
  6534  006C  00A3               	movwf	___wmul@multiplicand+1
  6535  006D  084F               	movf	sprintf@width,w
  6536  006E  00A2               	movwf	___wmul@multiplicand
  6537  006F  3197  276F  3180   	fcall	___wmul
  6538  0072  0020               	movlb	0	; select bank0
  6539  0073  0821               	movf	?___wmul+1,w
  6540  0074  00D0               	movwf	sprintf@width+1
  6541  0075  0820               	movf	?___wmul,w
  6542  0076  00CF               	movwf	sprintf@width
  6543                           
  6544                           ;doprnt.c: 613: width += *f++ - '0';
  6545  0077  0838               	movf	sprintf@f,w
  6546  0078  0084               	movwf	4
  6547  0079  0839               	movf	sprintf@f+1,w
  6548  007A  0085               	movwf	5
  6549  007B  0800               	movf	0,w	;code access
  6550  007C  3ED0               	addlw	208
  6551  007D  00C2               	movwf	??_sprintf
  6552  007E  30FF               	movlw	255
  6553  007F  1803               	skipnc
  6554  0080  3000               	movlw	0
  6555  0081  00C3               	movwf	??_sprintf+1
  6556  0082  0842               	movf	??_sprintf,w
  6557  0083  07CF               	addwf	sprintf@width,f
  6558  0084  0843               	movf	??_sprintf+1,w
  6559  0085  3DD0               	addwfc	sprintf@width+1,f
  6560  0086  3001               	movlw	1
  6561  0087  07B8               	addwf	sprintf@f,f
  6562  0088  3000               	movlw	0
  6563  0089  3DB9               	addwfc	sprintf@f+1,f
  6564                           
  6565                           ;doprnt.c: 614: } while(isdigit((unsigned)*f));
  6566  008A  0838               	movf	sprintf@f,w
  6567  008B  0084               	movwf	4
  6568  008C  0839               	movf	sprintf@f+1,w
  6569  008D  0085               	movwf	5
  6570  008E  0800               	movf	0,w	;code access
  6571  008F  3196  26AA  3180   	fcall	_isdigit
  6572  0092  1803               	btfsc	3,0
  6573  0093  2866               	goto	l2671
  6574  0094                     l2679:	
  6575                           
  6576                           ;doprnt.c: 620: };doprnt.c: 623: if(*f == '.') {
  6577  0094  0020               	movlb	0	; select bank0
  6578  0095  0838               	movf	sprintf@f,w
  6579  0096  0084               	movwf	4
  6580  0097  0839               	movf	sprintf@f+1,w
  6581  0098  0085               	movwf	5
  6582  0099  0012               	moviw fsr0++
  6583  009A  3A2E               	xorlw	46
  6584  009B  1D03               	btfss	3,2
  6585  009C  28D2               	goto	l2691
  6586                           
  6587                           ;doprnt.c: 625: f++;
  6588  009D  3001               	movlw	1
  6589  009E  07B8               	addwf	sprintf@f,f
  6590  009F  3000               	movlw	0
  6591  00A0  3DB9               	addwfc	sprintf@f+1,f
  6592                           
  6593                           ;doprnt.c: 639: {;doprnt.c: 640: prec = 0;
  6594  00A1  01D1               	clrf	sprintf@prec
  6595  00A2  01D2               	clrf	sprintf@prec+1
  6596  00A3                     l2689:	
  6597                           ;doprnt.c: 641: while(isdigit((unsigned)*f))
  6598                           
  6599  00A3  0838               	movf	sprintf@f,w
  6600  00A4  0084               	movwf	4
  6601  00A5  0839               	movf	sprintf@f+1,w
  6602  00A6  0085               	movwf	5
  6603  00A7  0800               	movf	0,w	;code access
  6604  00A8  3196  26AA  3180   	fcall	_isdigit
  6605  00AB  1C03               	btfss	3,0
  6606  00AC  28DD               	goto	l2697
  6607                           
  6608                           ;doprnt.c: 642: prec = prec*10 + *f++ - '0';
  6609  00AD  0020               	movlb	0	; select bank0
  6610  00AE  0838               	movf	sprintf@f,w
  6611  00AF  0084               	movwf	4
  6612  00B0  0839               	movf	sprintf@f+1,w
  6613  00B1  0085               	movwf	5
  6614  00B2  0800               	movf	0,w	;code access
  6615  00B3  00C2               	movwf	??_sprintf
  6616  00B4  01C3               	clrf	??_sprintf+1
  6617  00B5  0852               	movf	sprintf@prec+1,w
  6618  00B6  00A1               	movwf	___wmul@multiplier+1
  6619  00B7  0851               	movf	sprintf@prec,w
  6620  00B8  00A0               	movwf	___wmul@multiplier
  6621  00B9  300A               	movlw	10
  6622  00BA  00A2               	movwf	___wmul@multiplicand
  6623  00BB  3000               	movlw	0
  6624  00BC  00A3               	movwf	___wmul@multiplicand+1
  6625  00BD  3197  276F  3180   	fcall	___wmul
  6626  00C0  0020               	movlb	0	; select bank0
  6627  00C1  0842               	movf	??_sprintf,w
  6628  00C2  0720               	addwf	?___wmul,w
  6629  00C3  00C4               	movwf	??_sprintf+2
  6630  00C4  0843               	movf	??_sprintf+1,w
  6631  00C5  3D21               	addwfc	?___wmul+1,w
  6632  00C6  00C5               	movwf	??_sprintf+3
  6633  00C7  0844               	movf	??_sprintf+2,w
  6634  00C8  3ED0               	addlw	208
  6635  00C9  00D1               	movwf	sprintf@prec
  6636  00CA  30FF               	movlw	255
  6637  00CB  3D45               	addwfc	??_sprintf+3,w
  6638  00CC  00D2               	movwf	sprintf@prec+1
  6639  00CD  3001               	movlw	1
  6640  00CE  07B8               	addwf	sprintf@f,f
  6641  00CF  3000               	movlw	0
  6642  00D0  3DB9               	addwfc	sprintf@f+1,f
  6643  00D1  28A3               	goto	l2689
  6644  00D2                     l2691:	
  6645                           ;doprnt.c: 643: };doprnt.c: 644: } else {
  6646                           
  6647                           
  6648                           ;doprnt.c: 645: prec = 0;
  6649  00D2  0020               	movlb	0	; select bank0
  6650  00D3  01D1               	clrf	sprintf@prec
  6651  00D4  01D2               	clrf	sprintf@prec+1
  6652                           
  6653                           ;doprnt.c: 654: switch(c = *f++) {
  6654                           
  6655                           ;doprnt.c: 649: };doprnt.c: 652: loop:
  6656  00D5  28DD               	goto	l2697
  6657  00D6                     l455:	
  6658                           ;doprnt.c: 660: case 'l':
  6659                           
  6660                           ;doprnt.c: 657: goto alldone;
  6661                           
  6662                           ;doprnt.c: 656: case 0:
  6663                           
  6664                           
  6665                           ;doprnt.c: 662: flag |= 0x10;
  6666  00D6  1648               	bsf	sprintf@flag,4
  6667                           
  6668                           ;doprnt.c: 663: goto loop;
  6669  00D7  28DD               	goto	l2697
  6670  00D8                     l2693:	
  6671                           ;doprnt.c: 836: case 'u':
  6672                           
  6673                           ;doprnt.c: 832: continue;
  6674                           
  6675                           ;doprnt.c: 821: default:
  6676                           
  6677                           
  6678                           ;doprnt.c: 837: flag |= 0xC0;
  6679  00D8  30C0               	movlw	192
  6680  00D9  00C2               	movwf	??_sprintf
  6681  00DA  0842               	movf	??_sprintf,w
  6682  00DB  04C8               	iorwf	sprintf@flag,f
  6683                           
  6684                           ;doprnt.c: 841: }
  6685                           
  6686                           ;doprnt.c: 838: break;
  6687  00DC  28F5               	goto	l458
  6688  00DD                     l2697:	
  6689  00DD  0020               	movlb	0	; select bank0
  6690  00DE  0839               	movf	sprintf@f+1,w
  6691  00DF  00C3               	movwf	??_sprintf+1
  6692  00E0  0838               	movf	sprintf@f,w
  6693  00E1  00C2               	movwf	??_sprintf
  6694  00E2  0AB8               	incf	sprintf@f,f
  6695  00E3  1903               	skipnz
  6696  00E4  0AB9               	incf	sprintf@f+1,f
  6697  00E5  0842               	movf	??_sprintf,w
  6698  00E6  0084               	movwf	4
  6699  00E7  0843               	movf	??_sprintf+1,w
  6700  00E8  0085               	movwf	5
  6701  00E9  0800               	movf	0,w	;code access
  6702  00EA  00D3               	movwf	sprintf@c
  6703                           
  6704                           ; Switch size 1, requested type "space"
  6705                           ; Number of cases is 3, Range of values is 0 to 117
  6706                           ; switch strategies available:
  6707                           ; Name         Instructions Cycles
  6708                           ; simple_byte           10     6 (average)
  6709                           ; direct_byte          242     6 (fixed)
  6710                           ; jumptable            260     6 (fixed)
  6711                           ;	Chosen strategy is simple_byte
  6712  00EB  3A00               	xorlw	0	; case 0
  6713  00EC  1903               	skipnz
  6714  00ED  29F4               	goto	l2755
  6715  00EE  3A6C               	xorlw	108	; case 108
  6716  00EF  1903               	skipnz
  6717  00F0  28D6               	goto	l455
  6718  00F1  3A19               	xorlw	25	; case 117
  6719  00F2  1903               	skipnz
  6720  00F3  28D8               	goto	l2693
  6721  00F4  2833               	goto	l2753
  6722  00F5                     l458:	
  6723                           
  6724                           ;doprnt.c: 1292: {;doprnt.c: 1300: if(flag & 0x10)
  6725  00F5  1E48               	btfss	sprintf@flag,4
  6726  00F6  2904               	goto	l2703
  6727                           
  6728                           ;doprnt.c: 1301: val = (*(unsigned long *)__va_arg((*(unsigned long **)ap), (unsigned lo
      +                          ng)0));
  6729  00F7  0849               	movf	sprintf@ap,w
  6730  00F8  0086               	movwf	6
  6731  00F9  0187               	clrf	7
  6732  00FA  3F40               	moviw [0]fsr1
  6733  00FB  00CA               	movwf	sprintf@val
  6734  00FC  3F41               	moviw [1]fsr1
  6735  00FD  00CB               	movwf	sprintf@val+1
  6736  00FE  3F42               	moviw [2]fsr1
  6737  00FF  00CC               	movwf	sprintf@val+2
  6738  0100  3F43               	moviw [3]fsr1
  6739  0101  00CD               	movwf	sprintf@val+3
  6740  0102  3004               	movlw	4
  6741  0103  2912               	goto	L2
  6742  0104                     l2703:	
  6743                           
  6744                           ;doprnt.c: 1302: else;doprnt.c: 1305: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (
      +                          unsigned)0));
  6745  0104  0849               	movf	sprintf@ap,w
  6746  0105  0086               	movwf	6
  6747  0106  0187               	clrf	7
  6748  0107  3F40               	moviw [0]fsr1
  6749  0108  00C2               	movwf	??_sprintf
  6750  0109  3F41               	moviw [1]fsr1
  6751  010A  00C3               	movwf	??_sprintf+1
  6752  010B  0842               	movf	??_sprintf,w
  6753  010C  00CA               	movwf	sprintf@val
  6754  010D  0843               	movf	??_sprintf+1,w
  6755  010E  00CB               	movwf	sprintf@val+1
  6756  010F  01CC               	clrf	sprintf@val+2
  6757  0110  01CD               	clrf	sprintf@val+3
  6758  0111  3002               	movlw	2
  6759  0112                     L2:	
  6760  0112  00C2               	movwf	??_sprintf
  6761  0113  0842               	movf	??_sprintf,w
  6762  0114  07C9               	addwf	sprintf@ap,f
  6763                           
  6764                           ;doprnt.c: 1306: };doprnt.c: 1309: if(prec == 0 && val == 0)
  6765  0115  0851               	movf	sprintf@prec,w
  6766  0116  0452               	iorwf	sprintf@prec+1,w
  6767  0117  1D03               	btfss	3,2
  6768  0118  2923               	goto	l2713
  6769  0119  084D               	movf	sprintf@val+3,w
  6770  011A  044C               	iorwf	sprintf@val+2,w
  6771  011B  044B               	iorwf	sprintf@val+1,w
  6772  011C  044A               	iorwf	sprintf@val,w
  6773  011D  1D03               	skipz
  6774  011E  2923               	goto	l2713
  6775                           
  6776                           ;doprnt.c: 1310: prec++;
  6777  011F  3001               	movlw	1
  6778  0120  07D1               	addwf	sprintf@prec,f
  6779  0121  3000               	movlw	0
  6780  0122  3DD2               	addwfc	sprintf@prec+1,f
  6781  0123                     l2713:	
  6782                           
  6783                           ;doprnt.c: 1324: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  6784  0123  01D3               	clrf	sprintf@c
  6785  0124  0AD3               	incf	sprintf@c,f
  6786  0125  300A               	movlw	10
  6787  0126  0653               	xorwf	sprintf@c,w
  6788  0127  1903               	btfsc	3,2
  6789  0128  2956               	goto	l2725
  6790  0129                     l2719:	
  6791                           
  6792                           ;doprnt.c: 1325: if(val < dpowers[c])
  6793  0129  0853               	movf	sprintf@c,w
  6794  012A  00C2               	movwf	??_sprintf
  6795  012B  01C3               	clrf	??_sprintf+1
  6796  012C  35C2               	lslf	??_sprintf,f
  6797  012D  0DC3               	rlf	??_sprintf+1,f
  6798  012E  35C2               	lslf	??_sprintf,f
  6799  012F  0DC3               	rlf	??_sprintf+1,f
  6800  0130  3000               	movlw	low (_dpowers| (0+32768))
  6801  0131  0742               	addwf	??_sprintf,w
  6802  0132  0084               	movwf	4
  6803  0133  3090               	movlw	high (_dpowers| (0+32768))
  6804  0134  3D43               	addwfc	??_sprintf+1,w
  6805  0135  0085               	movwf	5
  6806  0136  3F00               	moviw [0]fsr0
  6807  0137  00C4               	movwf	??_sprintf+2
  6808  0138  3F01               	moviw [1]fsr0
  6809  0139  00C5               	movwf	??_sprintf+3
  6810  013A  3F02               	moviw [2]fsr0
  6811  013B  00C6               	movwf	??_sprintf+4
  6812  013C  3F03               	moviw [3]fsr0
  6813  013D  00C7               	movwf	??_sprintf+5
  6814  013E  0847               	movf	??_sprintf+5,w
  6815  013F  024D               	subwf	sprintf@val+3,w
  6816  0140  1D03               	skipz
  6817  0141  294C               	goto	u2595
  6818  0142  0846               	movf	??_sprintf+4,w
  6819  0143  024C               	subwf	sprintf@val+2,w
  6820  0144  1D03               	skipz
  6821  0145  294C               	goto	u2595
  6822  0146  0845               	movf	??_sprintf+3,w
  6823  0147  024B               	subwf	sprintf@val+1,w
  6824  0148  1D03               	skipz
  6825  0149  294C               	goto	u2595
  6826  014A  0844               	movf	??_sprintf+2,w
  6827  014B  024A               	subwf	sprintf@val,w
  6828  014C                     u2595:	
  6829  014C  1C03               	btfss	3,0
  6830  014D  2956               	goto	l2725
  6831                           
  6832                           ;doprnt.c: 1326: break;
  6833  014E  3001               	movlw	1
  6834  014F  00C2               	movwf	??_sprintf
  6835  0150  0842               	movf	??_sprintf,w
  6836  0151  07D3               	addwf	sprintf@c,f
  6837  0152  300A               	movlw	10
  6838  0153  0653               	xorwf	sprintf@c,w
  6839  0154  1D03               	btfss	3,2
  6840  0155  2929               	goto	l2719
  6841  0156                     l2725:	
  6842                           
  6843                           ;doprnt.c: 1358: if(c < prec)
  6844  0156  0852               	movf	sprintf@prec+1,w
  6845  0157  3A80               	xorlw	128
  6846  0158  3C80               	sublw	128
  6847  0159  1D03               	skipz
  6848  015A  295D               	goto	u2615
  6849  015B  0851               	movf	sprintf@prec,w
  6850  015C  0253               	subwf	sprintf@c,w
  6851  015D                     u2615:	
  6852  015D  1803               	skipnc
  6853  015E  2965               	goto	l2729
  6854                           
  6855                           ;doprnt.c: 1359: c = prec;
  6856  015F  0020               	movlb	0	; select bank0
  6857  0160  0851               	movf	sprintf@prec,w
  6858  0161  00C2               	movwf	??_sprintf
  6859  0162  0842               	movf	??_sprintf,w
  6860  0163  00D3               	movwf	sprintf@c
  6861  0164  2979               	goto	l466
  6862  0165                     l2729:	
  6863                           
  6864                           ;doprnt.c: 1360: else if(prec < c)
  6865  0165  0020               	movlb	0	; select bank0
  6866  0166  0852               	movf	sprintf@prec+1,w
  6867  0167  3A80               	xorlw	128
  6868  0168  00C2               	movwf	??_sprintf
  6869  0169  3080               	movlw	128
  6870  016A  0242               	subwf	??_sprintf,w
  6871  016B  1D03               	skipz
  6872  016C  296F               	goto	u2625
  6873  016D  0853               	movf	sprintf@c,w
  6874  016E  0251               	subwf	sprintf@prec,w
  6875  016F                     u2625:	
  6876  016F  1803               	skipnc
  6877  0170  2979               	goto	l466
  6878                           
  6879                           ;doprnt.c: 1361: prec = c;
  6880  0171  0020               	movlb	0	; select bank0
  6881  0172  0853               	movf	sprintf@c,w
  6882  0173  00C2               	movwf	??_sprintf
  6883  0174  01C3               	clrf	??_sprintf+1
  6884  0175  0842               	movf	??_sprintf,w
  6885  0176  00D1               	movwf	sprintf@prec
  6886  0177  0843               	movf	??_sprintf+1,w
  6887  0178  00D2               	movwf	sprintf@prec+1
  6888  0179                     l466:	
  6889                           
  6890                           ;doprnt.c: 1400: if(width > c)
  6891  0179  0020               	movlb	0	; select bank0
  6892  017A  0850               	movf	sprintf@width+1,w
  6893  017B  3A80               	xorlw	128
  6894  017C  3C80               	sublw	128
  6895  017D  1D03               	skipz
  6896  017E  2981               	goto	u2635
  6897  017F  084F               	movf	sprintf@width,w
  6898  0180  0253               	subwf	sprintf@c,w
  6899  0181                     u2635:	
  6900  0181  1803               	skipnc
  6901  0182  298C               	goto	l2735
  6902                           
  6903                           ;doprnt.c: 1401: width -= c;
  6904  0183  0020               	movlb	0	; select bank0
  6905  0184  0853               	movf	sprintf@c,w
  6906  0185  00C2               	movwf	??_sprintf
  6907  0186  01C3               	clrf	??_sprintf+1
  6908  0187  0842               	movf	??_sprintf,w
  6909  0188  02CF               	subwf	sprintf@width,f
  6910  0189  0843               	movf	??_sprintf+1,w
  6911  018A  3BD0               	subwfb	sprintf@width+1,f
  6912  018B  298F               	goto	l2737
  6913  018C                     l2735:	
  6914                           
  6915                           ;doprnt.c: 1402: else;doprnt.c: 1403: width = 0;
  6916  018C  0020               	movlb	0	; select bank0
  6917  018D  01CF               	clrf	sprintf@width
  6918  018E  01D0               	clrf	sprintf@width+1
  6919  018F                     l2737:	
  6920                           
  6921                           ;doprnt.c: 1441: {;doprnt.c: 1443: if(width;doprnt.c: 1447: )
  6922  018F  084F               	movf	sprintf@width,w
  6923  0190  0450               	iorwf	sprintf@width+1,w
  6924  0191  1903               	btfsc	3,2
  6925  0192  29E9               	goto	l2751
  6926                           
  6927                           ;doprnt.c: 1449: ((*sp++ = (' ')));
  6928                           
  6929                           ;doprnt.c: 1448: do
  6930  0193  3020               	movlw	32
  6931  0194  00C2               	movwf	??_sprintf
  6932  0195  084E               	movf	sprintf@sp,w
  6933  0196  0086               	movwf	6
  6934  0197  3001               	movlw	1	; select bank2/3
  6935  0198  0087               	movwf	7
  6936  0199  0842               	movf	??_sprintf,w
  6937  019A  0081               	movwf	1
  6938  019B  3001               	movlw	1
  6939  019C  00C2               	movwf	??_sprintf
  6940  019D  0842               	movf	??_sprintf,w
  6941  019E  07CE               	addwf	sprintf@sp,f
  6942                           
  6943                           ;doprnt.c: 1450: while(--width);
  6944  019F  30FF               	movlw	255
  6945  01A0  07CF               	addwf	sprintf@width,f
  6946  01A1  30FF               	movlw	255
  6947  01A2  3DD0               	addwfc	sprintf@width+1,f
  6948  01A3  298F               	goto	l2737
  6949  01A4                     l2745:	
  6950                           ;doprnt.c: 1488: };doprnt.c: 1493: while(prec--) {
  6951                           
  6952                           
  6953                           ;doprnt.c: 1497: {;doprnt.c: 1508: c = (val / dpowers[prec]) % 10 + '0';
  6954  01A4  3000               	movlw	0
  6955  01A5  00B1               	movwf	___llmod@divisor+3
  6956  01A6  3000               	movlw	0
  6957  01A7  00B0               	movwf	___llmod@divisor+2
  6958  01A8  3000               	movlw	0
  6959  01A9  00AF               	movwf	___llmod@divisor+1
  6960  01AA  300A               	movlw	10
  6961  01AB  00AE               	movwf	___llmod@divisor
  6962  01AC  0852               	movf	sprintf@prec+1,w
  6963  01AD  0085               	movwf	5
  6964  01AE  0851               	movf	sprintf@prec,w
  6965  01AF  0084               	movwf	4
  6966  01B0  3584               	lslf	4,f
  6967  01B1  0D85               	rlf	5,f
  6968  01B2  3584               	lslf	4,f
  6969  01B3  0D85               	rlf	5,f
  6970  01B4  3000               	movlw	low (_dpowers| (0+32768))
  6971  01B5  0784               	addwf	4,f
  6972  01B6  3090               	movlw	high (_dpowers| (0+32768))
  6973  01B7  3D85               	addwfc	5,f
  6974  01B8  3F00               	moviw [0]fsr0
  6975  01B9  00A0               	movwf	___lldiv@divisor
  6976  01BA  3F01               	moviw [1]fsr0
  6977  01BB  00A1               	movwf	___lldiv@divisor+1
  6978  01BC  3F02               	moviw [2]fsr0
  6979  01BD  00A2               	movwf	___lldiv@divisor+2
  6980  01BE  3F03               	moviw [3]fsr0
  6981  01BF  00A3               	movwf	___lldiv@divisor+3
  6982  01C0  084D               	movf	sprintf@val+3,w
  6983  01C1  00A7               	movwf	___lldiv@dividend+3
  6984  01C2  084C               	movf	sprintf@val+2,w
  6985  01C3  00A6               	movwf	___lldiv@dividend+2
  6986  01C4  084B               	movf	sprintf@val+1,w
  6987  01C5  00A5               	movwf	___lldiv@dividend+1
  6988  01C6  084A               	movf	sprintf@val,w
  6989  01C7  00A4               	movwf	___lldiv@dividend
  6990  01C8  318C  244A  3180   	fcall	___lldiv
  6991  01CB  0020               	movlb	0	; select bank0
  6992  01CC  0823               	movf	?___lldiv+3,w
  6993  01CD  00B5               	movwf	___llmod@dividend+3
  6994  01CE  0822               	movf	?___lldiv+2,w
  6995  01CF  00B4               	movwf	___llmod@dividend+2
  6996  01D0  0821               	movf	?___lldiv+1,w
  6997  01D1  00B3               	movwf	___llmod@dividend+1
  6998  01D2  0820               	movf	?___lldiv,w
  6999  01D3  00B2               	movwf	___llmod@dividend
  7000  01D4  318A  22E9  3180   	fcall	___llmod
  7001  01D7  0020               	movlb	0	; select bank0
  7002  01D8  082E               	movf	?___llmod,w
  7003  01D9  3E30               	addlw	48
  7004  01DA  00C2               	movwf	??_sprintf
  7005  01DB  0842               	movf	??_sprintf,w
  7006  01DC  00D3               	movwf	sprintf@c
  7007                           
  7008                           ;doprnt.c: 1542: };doprnt.c: 1543: ((*sp++ = (c)));
  7009  01DD  0853               	movf	sprintf@c,w
  7010  01DE  00C2               	movwf	??_sprintf
  7011  01DF  084E               	movf	sprintf@sp,w
  7012  01E0  0086               	movwf	6
  7013  01E1  3001               	movlw	1	; select bank2/3
  7014  01E2  0087               	movwf	7
  7015  01E3  0842               	movf	??_sprintf,w
  7016  01E4  0081               	movwf	1
  7017  01E5  3001               	movlw	1
  7018  01E6  00C2               	movwf	??_sprintf
  7019  01E7  0842               	movf	??_sprintf,w
  7020  01E8  07CE               	addwf	sprintf@sp,f
  7021  01E9                     l2751:	
  7022  01E9  30FF               	movlw	255
  7023  01EA  07D1               	addwf	sprintf@prec,f
  7024  01EB  30FF               	movlw	255
  7025  01EC  3DD2               	addwfc	sprintf@prec+1,f
  7026  01ED  0A51               	incf	sprintf@prec,w
  7027  01EE  1D03               	skipz
  7028  01EF  29A4               	goto	l2745
  7029  01F0  0A52               	incf	sprintf@prec+1,w
  7030  01F1  1903               	btfsc	3,2
  7031  01F2  2833               	goto	l2753
  7032  01F3  29A4               	goto	l2745
  7033  01F4                     l2755:	
  7034                           ;doprnt.c: 1544: };doprnt.c: 1552: };doprnt.c: 1554: alldone:
  7035                           
  7036                           
  7037                           ;doprnt.c: 1557: *sp = 0;
  7038  01F4  084E               	movf	sprintf@sp,w
  7039  01F5  0086               	movwf	6
  7040  01F6  3001               	movlw	1	; select bank2/3
  7041  01F7  0087               	movwf	7
  7042  01F8  0181               	clrf	1
  7043  01F9  0008               	return
  7044  01FA                     __end_of_sprintf:	
  7045                           ;doprnt.c: 1559: return 0;;	Return value of _sprintf is never used
  7046                           
  7047                           
  7048                           	psect	text23
  7049  16AA                     __ptext23:	
  7050 ;; *************** function _isdigit *****************
  7051 ;; Defined at:
  7052 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\isdigit.c"
  7053 ;; Parameters:    Size  Location     Type
  7054 ;;  c               1    wreg     unsigned char 
  7055 ;; Auto vars:     Size  Location     Type
  7056 ;;  c               1    1[BANK0 ] unsigned char 
  7057 ;; Return value:  Size  Location     Type
  7058 ;;		None               void
  7059 ;; Registers used:
  7060 ;;		wreg, status,2, status,0
  7061 ;; Tracked objects:
  7062 ;;		On entry : 0/0
  7063 ;;		On exit  : 0/0
  7064 ;;		Unchanged: 0/0
  7065 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7066 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7067 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7068 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7069 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7070 ;;Total ram usage:        2 bytes
  7071 ;; Hardware stack levels used:    1
  7072 ;; Hardware stack levels required when called:    7
  7073 ;; This function calls:
  7074 ;;		Nothing
  7075 ;; This function is called by:
  7076 ;;		_sprintf
  7077 ;; This function uses a non-reentrant model
  7078 ;;
  7079                           
  7080                           
  7081                           ;psect for function _isdigit
  7082  16AA                     _isdigit:	
  7083                           
  7084                           ;incstack = 0
  7085                           ; Regs used in _isdigit: [wreg+status,2+status,0]
  7086                           ;isdigit@c stored from wreg
  7087  16AA  0020               	movlb	0	; select bank0
  7088  16AB  00A1               	movwf	isdigit@c
  7089  16AC  01A0               	clrf	_isdigit$1812
  7090  16AD  303A               	movlw	58
  7091  16AE  0221               	subwf	isdigit@c,w
  7092  16AF  1803               	skipnc
  7093  16B0  2EB7               	goto	l2507
  7094  16B1  3030               	movlw	48
  7095  16B2  0221               	subwf	isdigit@c,w
  7096  16B3  1C03               	skipc
  7097  16B4  2EB7               	goto	l2507
  7098  16B5  01A0               	clrf	_isdigit$1812
  7099  16B6  0AA0               	incf	_isdigit$1812,f
  7100  16B7                     l2507:	
  7101  16B7  0C20               	rrf	_isdigit$1812,w
  7102  16B8  0008               	return
  7103  16B9                     __end_of_isdigit:	
  7104                           
  7105                           	psect	text24
  7106  176F                     __ptext24:	
  7107 ;; *************** function ___wmul *****************
  7108 ;; Defined at:
  7109 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\Umul16.c"
  7110 ;; Parameters:    Size  Location     Type
  7111 ;;  multiplier      2    0[BANK0 ] unsigned int 
  7112 ;;  multiplicand    2    2[BANK0 ] unsigned int 
  7113 ;; Auto vars:     Size  Location     Type
  7114 ;;  product         2    4[BANK0 ] unsigned int 
  7115 ;; Return value:  Size  Location     Type
  7116 ;;                  2    0[BANK0 ] unsigned int 
  7117 ;; Registers used:
  7118 ;;		wreg, status,2, status,0
  7119 ;; Tracked objects:
  7120 ;;		On entry : 0/0
  7121 ;;		On exit  : 0/0
  7122 ;;		Unchanged: 0/0
  7123 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7124 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7125 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7126 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7127 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7128 ;;Total ram usage:        6 bytes
  7129 ;; Hardware stack levels used:    1
  7130 ;; Hardware stack levels required when called:    7
  7131 ;; This function calls:
  7132 ;;		Nothing
  7133 ;; This function is called by:
  7134 ;;		_sprintf
  7135 ;; This function uses a non-reentrant model
  7136 ;;
  7137                           
  7138                           
  7139                           ;psect for function ___wmul
  7140  176F                     ___wmul:	
  7141                           
  7142                           ;incstack = 0
  7143                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  7144  176F  0020               	movlb	0	; select bank0
  7145  1770  01A4               	clrf	___wmul@product
  7146  1771  01A5               	clrf	___wmul@product+1
  7147  1772                     l2513:	
  7148  1772  1C20               	btfss	___wmul@multiplier,0
  7149  1773  2F78               	goto	l481
  7150  1774  0822               	movf	___wmul@multiplicand,w
  7151  1775  07A4               	addwf	___wmul@product,f
  7152  1776  0823               	movf	___wmul@multiplicand+1,w
  7153  1777  3DA5               	addwfc	___wmul@product+1,f
  7154  1778                     l481:	
  7155  1778  3001               	movlw	1
  7156  1779                     u2115:	
  7157  1779  35A2               	lslf	___wmul@multiplicand,f
  7158  177A  0DA3               	rlf	___wmul@multiplicand+1,f
  7159  177B  0B89               	decfsz	9,f
  7160  177C  2F79               	goto	u2115
  7161  177D  3001               	movlw	1
  7162  177E                     u2125:	
  7163  177E  36A1               	lsrf	___wmul@multiplier+1,f
  7164  177F  0CA0               	rrf	___wmul@multiplier,f
  7165  1780  0B89               	decfsz	9,f
  7166  1781  2F7E               	goto	u2125
  7167  1782  0820               	movf	___wmul@multiplier,w
  7168  1783  0421               	iorwf	___wmul@multiplier+1,w
  7169  1784  1D03               	btfss	3,2
  7170  1785  2F72               	goto	l2513
  7171  1786  0825               	movf	___wmul@product+1,w
  7172  1787  00A1               	movwf	?___wmul+1
  7173  1788  0824               	movf	___wmul@product,w
  7174  1789  00A0               	movwf	?___wmul
  7175  178A  0008               	return
  7176  178B                     __end_of___wmul:	
  7177                           
  7178                           	psect	text25
  7179  0AE9                     __ptext25:	
  7180 ;; *************** function ___llmod *****************
  7181 ;; Defined at:
  7182 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\llmod.c"
  7183 ;; Parameters:    Size  Location     Type
  7184 ;;  divisor         4   14[BANK0 ] unsigned long 
  7185 ;;  dividend        4   18[BANK0 ] unsigned long 
  7186 ;; Auto vars:     Size  Location     Type
  7187 ;;  counter         1   23[BANK0 ] unsigned char 
  7188 ;; Return value:  Size  Location     Type
  7189 ;;                  4   14[BANK0 ] unsigned long 
  7190 ;; Registers used:
  7191 ;;		wreg, status,2, status,0
  7192 ;; Tracked objects:
  7193 ;;		On entry : 0/0
  7194 ;;		On exit  : 0/0
  7195 ;;		Unchanged: 0/0
  7196 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7197 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7198 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7199 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7200 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7201 ;;Total ram usage:       10 bytes
  7202 ;; Hardware stack levels used:    1
  7203 ;; Hardware stack levels required when called:    7
  7204 ;; This function calls:
  7205 ;;		Nothing
  7206 ;; This function is called by:
  7207 ;;		_sprintf
  7208 ;; This function uses a non-reentrant model
  7209 ;;
  7210                           
  7211                           
  7212                           ;psect for function ___llmod
  7213  0AE9                     ___llmod:	
  7214                           
  7215                           ;incstack = 0
  7216                           ; Regs used in ___llmod: [wreg+status,2+status,0]
  7217  0AE9  0020               	movlb	0	; select bank0
  7218  0AEA  0831               	movf	___llmod@divisor+3,w
  7219  0AEB  0430               	iorwf	___llmod@divisor+2,w
  7220  0AEC  042F               	iorwf	___llmod@divisor+1,w
  7221  0AED  042E               	iorwf	___llmod@divisor,w
  7222  0AEE  1903               	skipnz
  7223  0AEF  2B23               	goto	l2635
  7224  0AF0  01B7               	clrf	___llmod@counter
  7225  0AF1  0AB7               	incf	___llmod@counter,f
  7226  0AF2                     l2625:	
  7227  0AF2  1BB1               	btfsc	___llmod@divisor+3,7
  7228  0AF3  2B00               	goto	l2627
  7229  0AF4  3001               	movlw	1
  7230  0AF5                     u2455:	
  7231  0AF5  35AE               	lslf	___llmod@divisor,f
  7232  0AF6  0DAF               	rlf	___llmod@divisor+1,f
  7233  0AF7  0DB0               	rlf	___llmod@divisor+2,f
  7234  0AF8  0DB1               	rlf	___llmod@divisor+3,f
  7235  0AF9  0B89               	decfsz	9,f
  7236  0AFA  2AF5               	goto	u2455
  7237  0AFB  3001               	movlw	1
  7238  0AFC  00B6               	movwf	??___llmod
  7239  0AFD  0836               	movf	??___llmod,w
  7240  0AFE  07B7               	addwf	___llmod@counter,f
  7241  0AFF  2AF2               	goto	l2625
  7242  0B00                     l2627:	
  7243  0B00  0831               	movf	___llmod@divisor+3,w
  7244  0B01  0235               	subwf	___llmod@dividend+3,w
  7245  0B02  1D03               	skipz
  7246  0B03  2B0E               	goto	u2475
  7247  0B04  0830               	movf	___llmod@divisor+2,w
  7248  0B05  0234               	subwf	___llmod@dividend+2,w
  7249  0B06  1D03               	skipz
  7250  0B07  2B0E               	goto	u2475
  7251  0B08  082F               	movf	___llmod@divisor+1,w
  7252  0B09  0233               	subwf	___llmod@dividend+1,w
  7253  0B0A  1D03               	skipz
  7254  0B0B  2B0E               	goto	u2475
  7255  0B0C  082E               	movf	___llmod@divisor,w
  7256  0B0D  0232               	subwf	___llmod@dividend,w
  7257  0B0E                     u2475:	
  7258  0B0E  1C03               	skipc
  7259  0B0F  2B18               	goto	l2631
  7260  0B10  082E               	movf	___llmod@divisor,w
  7261  0B11  02B2               	subwf	___llmod@dividend,f
  7262  0B12  082F               	movf	___llmod@divisor+1,w
  7263  0B13  3BB3               	subwfb	___llmod@dividend+1,f
  7264  0B14  0830               	movf	___llmod@divisor+2,w
  7265  0B15  3BB4               	subwfb	___llmod@dividend+2,f
  7266  0B16  0831               	movf	___llmod@divisor+3,w
  7267  0B17  3BB5               	subwfb	___llmod@dividend+3,f
  7268  0B18                     l2631:	
  7269  0B18  3001               	movlw	1
  7270  0B19                     u2485:	
  7271  0B19  36B1               	lsrf	___llmod@divisor+3,f
  7272  0B1A  0CB0               	rrf	___llmod@divisor+2,f
  7273  0B1B  0CAF               	rrf	___llmod@divisor+1,f
  7274  0B1C  0CAE               	rrf	___llmod@divisor,f
  7275  0B1D  0B89               	decfsz	9,f
  7276  0B1E  2B19               	goto	u2485
  7277  0B1F  3001               	movlw	1
  7278  0B20  02B7               	subwf	___llmod@counter,f
  7279  0B21  1D03               	btfss	3,2
  7280  0B22  2B00               	goto	l2627
  7281  0B23                     l2635:	
  7282  0B23  0835               	movf	___llmod@dividend+3,w
  7283  0B24  00B1               	movwf	?___llmod+3
  7284  0B25  0834               	movf	___llmod@dividend+2,w
  7285  0B26  00B0               	movwf	?___llmod+2
  7286  0B27  0833               	movf	___llmod@dividend+1,w
  7287  0B28  00AF               	movwf	?___llmod+1
  7288  0B29  0832               	movf	___llmod@dividend,w
  7289  0B2A  00AE               	movwf	?___llmod
  7290  0B2B  0008               	return
  7291  0B2C                     __end_of___llmod:	
  7292                           
  7293                           	psect	text26
  7294  0C4A                     __ptext26:	
  7295 ;; *************** function ___lldiv *****************
  7296 ;; Defined at:
  7297 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\__lldiv.c"
  7298 ;; Parameters:    Size  Location     Type
  7299 ;;  divisor         4    0[BANK0 ] unsigned long 
  7300 ;;  dividend        4    4[BANK0 ] unsigned long 
  7301 ;; Auto vars:     Size  Location     Type
  7302 ;;  quotient        4    9[BANK0 ] unsigned long 
  7303 ;;  counter         1   13[BANK0 ] unsigned char 
  7304 ;; Return value:  Size  Location     Type
  7305 ;;                  4    0[BANK0 ] unsigned long 
  7306 ;; Registers used:
  7307 ;;		wreg, status,2, status,0
  7308 ;; Tracked objects:
  7309 ;;		On entry : 0/0
  7310 ;;		On exit  : 0/0
  7311 ;;		Unchanged: 0/0
  7312 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7313 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7314 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7315 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7316 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7317 ;;Total ram usage:       14 bytes
  7318 ;; Hardware stack levels used:    1
  7319 ;; Hardware stack levels required when called:    7
  7320 ;; This function calls:
  7321 ;;		Nothing
  7322 ;; This function is called by:
  7323 ;;		_sprintf
  7324 ;; This function uses a non-reentrant model
  7325 ;;
  7326                           
  7327                           
  7328                           ;psect for function ___lldiv
  7329  0C4A                     ___lldiv:	
  7330                           
  7331                           ;incstack = 0
  7332                           ; Regs used in ___lldiv: [wreg+status,2+status,0]
  7333  0C4A  3000               	movlw	0
  7334  0C4B  0020               	movlb	0	; select bank0
  7335  0C4C  00AC               	movwf	___lldiv@quotient+3
  7336  0C4D  3000               	movlw	0
  7337  0C4E  00AB               	movwf	___lldiv@quotient+2
  7338  0C4F  3000               	movlw	0
  7339  0C50  00AA               	movwf	___lldiv@quotient+1
  7340  0C51  3000               	movlw	0
  7341  0C52  00A9               	movwf	___lldiv@quotient
  7342  0C53  0823               	movf	___lldiv@divisor+3,w
  7343  0C54  0422               	iorwf	___lldiv@divisor+2,w
  7344  0C55  0421               	iorwf	___lldiv@divisor+1,w
  7345  0C56  0420               	iorwf	___lldiv@divisor,w
  7346  0C57  1903               	skipnz
  7347  0C58  2C94               	goto	l2545
  7348  0C59  01AD               	clrf	___lldiv@counter
  7349  0C5A  0AAD               	incf	___lldiv@counter,f
  7350  0C5B                     l2531:	
  7351  0C5B  1BA3               	btfsc	___lldiv@divisor+3,7
  7352  0C5C  2C69               	goto	l2533
  7353  0C5D  3001               	movlw	1
  7354  0C5E                     u2155:	
  7355  0C5E  35A0               	lslf	___lldiv@divisor,f
  7356  0C5F  0DA1               	rlf	___lldiv@divisor+1,f
  7357  0C60  0DA2               	rlf	___lldiv@divisor+2,f
  7358  0C61  0DA3               	rlf	___lldiv@divisor+3,f
  7359  0C62  0B89               	decfsz	9,f
  7360  0C63  2C5E               	goto	u2155
  7361  0C64  3001               	movlw	1
  7362  0C65  00A8               	movwf	??___lldiv
  7363  0C66  0828               	movf	??___lldiv,w
  7364  0C67  07AD               	addwf	___lldiv@counter,f
  7365  0C68  2C5B               	goto	l2531
  7366  0C69                     l2533:	
  7367  0C69  3001               	movlw	1
  7368  0C6A                     u2175:	
  7369  0C6A  35A9               	lslf	___lldiv@quotient,f
  7370  0C6B  0DAA               	rlf	___lldiv@quotient+1,f
  7371  0C6C  0DAB               	rlf	___lldiv@quotient+2,f
  7372  0C6D  0DAC               	rlf	___lldiv@quotient+3,f
  7373  0C6E  0B89               	decfsz	9,f
  7374  0C6F  2C6A               	goto	u2175
  7375  0C70  0823               	movf	___lldiv@divisor+3,w
  7376  0C71  0227               	subwf	___lldiv@dividend+3,w
  7377  0C72  1D03               	skipz
  7378  0C73  2C7E               	goto	u2185
  7379  0C74  0822               	movf	___lldiv@divisor+2,w
  7380  0C75  0226               	subwf	___lldiv@dividend+2,w
  7381  0C76  1D03               	skipz
  7382  0C77  2C7E               	goto	u2185
  7383  0C78  0821               	movf	___lldiv@divisor+1,w
  7384  0C79  0225               	subwf	___lldiv@dividend+1,w
  7385  0C7A  1D03               	skipz
  7386  0C7B  2C7E               	goto	u2185
  7387  0C7C  0820               	movf	___lldiv@divisor,w
  7388  0C7D  0224               	subwf	___lldiv@dividend,w
  7389  0C7E                     u2185:	
  7390  0C7E  1C03               	skipc
  7391  0C7F  2C89               	goto	l2541
  7392  0C80  0820               	movf	___lldiv@divisor,w
  7393  0C81  02A4               	subwf	___lldiv@dividend,f
  7394  0C82  0821               	movf	___lldiv@divisor+1,w
  7395  0C83  3BA5               	subwfb	___lldiv@dividend+1,f
  7396  0C84  0822               	movf	___lldiv@divisor+2,w
  7397  0C85  3BA6               	subwfb	___lldiv@dividend+2,f
  7398  0C86  0823               	movf	___lldiv@divisor+3,w
  7399  0C87  3BA7               	subwfb	___lldiv@dividend+3,f
  7400  0C88  1429               	bsf	___lldiv@quotient,0
  7401  0C89                     l2541:	
  7402  0C89  3001               	movlw	1
  7403  0C8A                     u2195:	
  7404  0C8A  36A3               	lsrf	___lldiv@divisor+3,f
  7405  0C8B  0CA2               	rrf	___lldiv@divisor+2,f
  7406  0C8C  0CA1               	rrf	___lldiv@divisor+1,f
  7407  0C8D  0CA0               	rrf	___lldiv@divisor,f
  7408  0C8E  0B89               	decfsz	9,f
  7409  0C8F  2C8A               	goto	u2195
  7410  0C90  3001               	movlw	1
  7411  0C91  02AD               	subwf	___lldiv@counter,f
  7412  0C92  1D03               	btfss	3,2
  7413  0C93  2C69               	goto	l2533
  7414  0C94                     l2545:	
  7415  0C94  082C               	movf	___lldiv@quotient+3,w
  7416  0C95  00A3               	movwf	?___lldiv+3
  7417  0C96  082B               	movf	___lldiv@quotient+2,w
  7418  0C97  00A2               	movwf	?___lldiv+2
  7419  0C98  082A               	movf	___lldiv@quotient+1,w
  7420  0C99  00A1               	movwf	?___lldiv+1
  7421  0C9A  0829               	movf	___lldiv@quotient,w
  7422  0C9B  00A0               	movwf	?___lldiv
  7423  0C9C  0008               	return
  7424  0C9D                     __end_of___lldiv:	
  7425                           
  7426                           	psect	text27
  7427  0900                     __ptext27:	
  7428 ;; *************** function ___lltoft *****************
  7429 ;; Defined at:
  7430 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\lltoft.c"
  7431 ;; Parameters:    Size  Location     Type
  7432 ;;  c               4    8[BANK0 ] unsigned long 
  7433 ;; Auto vars:     Size  Location     Type
  7434 ;;  exp             1   13[BANK0 ] unsigned char 
  7435 ;; Return value:  Size  Location     Type
  7436 ;;                  3    8[BANK0 ] float 
  7437 ;; Registers used:
  7438 ;;		wreg, status,2, status,0, pclath, cstack
  7439 ;; Tracked objects:
  7440 ;;		On entry : 0/0
  7441 ;;		On exit  : 0/0
  7442 ;;		Unchanged: 0/0
  7443 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7444 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7445 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7446 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7447 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7448 ;;Total ram usage:        6 bytes
  7449 ;; Hardware stack levels used:    1
  7450 ;; Hardware stack levels required when called:    8
  7451 ;; This function calls:
  7452 ;;		___ftpack
  7453 ;; This function is called by:
  7454 ;;		_ftoa
  7455 ;; This function uses a non-reentrant model
  7456 ;;
  7457                           
  7458                           
  7459                           ;psect for function ___lltoft
  7460  0900                     ___lltoft:	
  7461                           
  7462                           ;incstack = 0
  7463                           ; Regs used in ___lltoft: [wreg+status,2+status,0+pclath+cstack]
  7464  0900  308E               	movlw	142
  7465  0901  0020               	movlb	0	; select bank0
  7466  0902  00AC               	movwf	??___lltoft
  7467  0903  082C               	movf	??___lltoft,w
  7468  0904  00AD               	movwf	___lltoft@exp
  7469  0905                     l2891:	
  7470  0905  30FF               	movlw	255
  7471  0906  052B               	andwf	___lltoft@c+3,w
  7472  0907  1903               	btfsc	3,2
  7473  0908  2915               	goto	l2893
  7474  0909  3001               	movlw	1
  7475  090A                     u2955:	
  7476  090A  36AB               	lsrf	___lltoft@c+3,f
  7477  090B  0CAA               	rrf	___lltoft@c+2,f
  7478  090C  0CA9               	rrf	___lltoft@c+1,f
  7479  090D  0CA8               	rrf	___lltoft@c,f
  7480  090E  0B89               	decfsz	9,f
  7481  090F  290A               	goto	u2955
  7482  0910  3001               	movlw	1
  7483  0911  00AC               	movwf	??___lltoft
  7484  0912  082C               	movf	??___lltoft,w
  7485  0913  07AD               	addwf	___lltoft@exp,f
  7486  0914  2905               	goto	l2891
  7487  0915                     l2893:	
  7488  0915  0828               	movf	___lltoft@c,w
  7489  0916  00A0               	movwf	___ftpack@arg
  7490  0917  0829               	movf	___lltoft@c+1,w
  7491  0918  00A1               	movwf	___ftpack@arg+1
  7492  0919  082A               	movf	___lltoft@c+2,w
  7493  091A  00A2               	movwf	___ftpack@arg+2
  7494  091B  082D               	movf	___lltoft@exp,w
  7495  091C  00AC               	movwf	??___lltoft
  7496  091D  082C               	movf	??___lltoft,w
  7497  091E  00A3               	movwf	___ftpack@exp
  7498  091F  01A4               	clrf	___ftpack@sign
  7499  0920  318C  249D         	fcall	___ftpack
  7500  0922  0020               	movlb	0	; select bank0
  7501  0923  0820               	movf	?___ftpack,w
  7502  0924  00A8               	movwf	?___lltoft
  7503  0925  0821               	movf	?___ftpack+1,w
  7504  0926  00A9               	movwf	?___lltoft+1
  7505  0927  0822               	movf	?___ftpack+2,w
  7506  0928  00AA               	movwf	?___lltoft+2
  7507  0929  0008               	return
  7508  092A                     __end_of___lltoft:	
  7509                           
  7510                           	psect	text28
  7511  075F                     __ptext28:	
  7512 ;; *************** function ___fttol *****************
  7513 ;; Defined at:
  7514 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\fttol.c"
  7515 ;; Parameters:    Size  Location     Type
  7516 ;;  f1              3   71[BANK0 ] float 
  7517 ;; Auto vars:     Size  Location     Type
  7518 ;;  lval            4    1[BANK1 ] unsigned long 
  7519 ;;  exp1            1    5[BANK1 ] unsigned char 
  7520 ;;  sign1           1    0[BANK1 ] unsigned char 
  7521 ;; Return value:  Size  Location     Type
  7522 ;;                  4   71[BANK0 ] long 
  7523 ;; Registers used:
  7524 ;;		wreg, status,2, status,0
  7525 ;; Tracked objects:
  7526 ;;		On entry : 0/0
  7527 ;;		On exit  : 0/0
  7528 ;;		Unchanged: 0/0
  7529 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7530 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7531 ;;      Locals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0
  7532 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7533 ;;      Totals:         0       8       6       0       0       0       0       0       0       0       0       0       
      +0       0
  7534 ;;Total ram usage:       14 bytes
  7535 ;; Hardware stack levels used:    1
  7536 ;; Hardware stack levels required when called:    7
  7537 ;; This function calls:
  7538 ;;		Nothing
  7539 ;; This function is called by:
  7540 ;;		_ftoa
  7541 ;; This function uses a non-reentrant model
  7542 ;;
  7543                           
  7544                           
  7545                           ;psect for function ___fttol
  7546  075F                     ___fttol:	
  7547                           
  7548                           ;incstack = 0
  7549                           ; Regs used in ___fttol: [wreg+status,2+status,0]
  7550  075F  0020               	movlb	0	; select bank0
  7551  0760  0867               	movf	___fttol@f1,w
  7552  0761  00EB               	movwf	??___fttol
  7553  0762  0868               	movf	___fttol@f1+1,w
  7554  0763  00EC               	movwf	??___fttol+1
  7555  0764  0869               	movf	___fttol@f1+2,w
  7556  0765  00ED               	movwf	??___fttol+2
  7557  0766  1003               	clrc
  7558  0767  0D6C               	rlf	??___fttol+1,w
  7559  0768  0D6D               	rlf	??___fttol+2,w
  7560  0769  00EE               	movwf	??___fttol+3
  7561  076A  086E               	movf	??___fttol+3,w
  7562  076B  0021               	movlb	1	; select bank1
  7563  076C  00A5               	movwf	___fttol@exp1^(0+128)
  7564  076D  0825               	movf	___fttol@exp1^(0+128),w
  7565  076E  1D03               	btfss	3,2
  7566  076F  2F7A               	goto	l2851
  7567  0770  3000               	movlw	0
  7568  0771  0020               	movlb	0	; select bank0
  7569  0772  00EA               	movwf	?___fttol+3
  7570  0773  3000               	movlw	0
  7571  0774  00E9               	movwf	?___fttol+2
  7572  0775  3000               	movlw	0
  7573  0776  00E8               	movwf	?___fttol+1
  7574  0777  3000               	movlw	0
  7575  0778  00E7               	movwf	?___fttol
  7576  0779  0008               	return
  7577  077A                     l2851:	
  7578  077A  0020               	movlb	0	; select bank0
  7579  077B  0867               	movf	___fttol@f1,w
  7580  077C  00EB               	movwf	??___fttol
  7581  077D  0868               	movf	___fttol@f1+1,w
  7582  077E  00EC               	movwf	??___fttol+1
  7583  077F  0869               	movf	___fttol@f1+2,w
  7584  0780  00ED               	movwf	??___fttol+2
  7585  0781  3017               	movlw	23
  7586  0782                     u2865:	
  7587  0782  36ED               	lsrf	??___fttol+2,f
  7588  0783  0CEC               	rrf	??___fttol+1,f
  7589  0784  0CEB               	rrf	??___fttol,f
  7590  0785  0B89               	decfsz	9,f
  7591  0786  2F82               	goto	u2865
  7592  0787  086B               	movf	??___fttol,w
  7593  0788  00EE               	movwf	??___fttol+3
  7594  0789  086E               	movf	??___fttol+3,w
  7595  078A  0021               	movlb	1	; select bank1
  7596  078B  00A0               	movwf	___fttol@sign1^(0+128)
  7597  078C  0020               	movlb	0	; select bank0
  7598  078D  17E8               	bsf	___fttol@f1+1,7
  7599  078E  30FF               	movlw	255
  7600  078F  05E7               	andwf	___fttol@f1,f
  7601  0790  30FF               	movlw	255
  7602  0791  05E8               	andwf	___fttol@f1+1,f
  7603  0792  3000               	movlw	0
  7604  0793  05E9               	andwf	___fttol@f1+2,f
  7605  0794  0867               	movf	___fttol@f1,w
  7606  0795  0021               	movlb	1	; select bank1
  7607  0796  00A1               	movwf	___fttol@lval^(0+128)
  7608  0797  0020               	movlb	0	; select bank0
  7609  0798  0868               	movf	___fttol@f1+1,w
  7610  0799  0021               	movlb	1	; select bank1
  7611  079A  00A2               	movwf	(___fttol@lval^(0+128)+1)
  7612  079B  0020               	movlb	0	; select bank0
  7613  079C  0869               	movf	___fttol@f1+2,w
  7614  079D  0021               	movlb	1	; select bank1
  7615  079E  00A3               	movwf	(___fttol@lval^(0+128)+2)
  7616  079F  01A4               	clrf	(___fttol@lval^(0+128)+3)
  7617  07A0  308E               	movlw	142
  7618  07A1  02A5               	subwf	___fttol@exp1^(0+128),f
  7619  07A2  1FA5               	btfss	___fttol@exp1^(0+128),7
  7620  07A3  2FC4               	goto	l2871
  7621  07A4  0825               	movf	___fttol@exp1^(0+128),w
  7622  07A5  3A80               	xorlw	128
  7623  07A6  3E8F               	addlw	143
  7624  07A7  1803               	skipnc
  7625  07A8  2FB3               	goto	l2869
  7626  07A9  3000               	movlw	0
  7627  07AA  0020               	movlb	0	; select bank0
  7628  07AB  00EA               	movwf	?___fttol+3
  7629  07AC  3000               	movlw	0
  7630  07AD  00E9               	movwf	?___fttol+2
  7631  07AE  3000               	movlw	0
  7632  07AF  00E8               	movwf	?___fttol+1
  7633  07B0  3000               	movlw	0
  7634  07B1  00E7               	movwf	?___fttol
  7635  07B2  0008               	return
  7636  07B3                     l2869:	
  7637  07B3  3001               	movlw	1
  7638  07B4                     u2895:	
  7639  07B4  0021               	movlb	1	; select bank1
  7640  07B5  36A4               	lsrf	(___fttol@lval+3)^(0+128),f
  7641  07B6  0CA3               	rrf	(___fttol@lval+2)^(0+128),f
  7642  07B7  0CA2               	rrf	(___fttol@lval+1)^(0+128),f
  7643  07B8  0CA1               	rrf	___fttol@lval^(0+128),f
  7644  07B9  0B89               	decfsz	9,f
  7645  07BA  2FB4               	goto	u2895
  7646  07BB  3001               	movlw	1
  7647  07BC  0020               	movlb	0	; select bank0
  7648  07BD  00EB               	movwf	??___fttol
  7649  07BE  086B               	movf	??___fttol,w
  7650  07BF  0021               	movlb	1	; select bank1
  7651  07C0  07A5               	addwf	___fttol@exp1^(0+128),f
  7652  07C1  1903               	btfsc	3,2
  7653  07C2  2FE0               	goto	l2879
  7654  07C3  2FB3               	goto	l2869
  7655  07C4                     l2871:	
  7656  07C4  3018               	movlw	24
  7657  07C5  0225               	subwf	___fttol@exp1^(0+128),w
  7658  07C6  1C03               	skipc
  7659  07C7  2FDC               	goto	l775
  7660  07C8  3000               	movlw	0
  7661  07C9  0020               	movlb	0	; select bank0
  7662  07CA  00EA               	movwf	?___fttol+3
  7663  07CB  3000               	movlw	0
  7664  07CC  00E9               	movwf	?___fttol+2
  7665  07CD  3000               	movlw	0
  7666  07CE  00E8               	movwf	?___fttol+1
  7667  07CF  3000               	movlw	0
  7668  07D0  00E7               	movwf	?___fttol
  7669  07D1  0008               	return
  7670  07D2                     l2877:	
  7671  07D2  3001               	movlw	1
  7672  07D3                     u2925:	
  7673  07D3  0021               	movlb	1	; select bank1
  7674  07D4  35A1               	lslf	___fttol@lval^(0+128),f
  7675  07D5  0DA2               	rlf	(___fttol@lval+1)^(0+128),f
  7676  07D6  0DA3               	rlf	(___fttol@lval+2)^(0+128),f
  7677  07D7  0DA4               	rlf	(___fttol@lval+3)^(0+128),f
  7678  07D8  0B89               	decfsz	9,f
  7679  07D9  2FD3               	goto	u2925
  7680  07DA  3001               	movlw	1
  7681  07DB  02A5               	subwf	___fttol@exp1^(0+128),f
  7682  07DC                     l775:	
  7683  07DC  0021               	movlb	1	; select bank1
  7684  07DD  0825               	movf	___fttol@exp1^(0+128),w
  7685  07DE  1D03               	btfss	3,2
  7686  07DF  2FD2               	goto	l2877
  7687  07E0                     l2879:	
  7688  07E0  0820               	movf	___fttol@sign1^(0+128),w
  7689  07E1  1903               	btfsc	3,2
  7690  07E2  2FEE               	goto	l2883
  7691  07E3  09A1               	comf	___fttol@lval^(0+128),f
  7692  07E4  09A2               	comf	(___fttol@lval+1)^(0+128),f
  7693  07E5  09A3               	comf	(___fttol@lval+2)^(0+128),f
  7694  07E6  09A4               	comf	(___fttol@lval+3)^(0+128),f
  7695  07E7  0AA1               	incf	___fttol@lval^(0+128),f
  7696  07E8  1903               	skipnz
  7697  07E9  0AA2               	incf	(___fttol@lval+1)^(0+128),f
  7698  07EA  1903               	skipnz
  7699  07EB  0AA3               	incf	(___fttol@lval+2)^(0+128),f
  7700  07EC  1903               	skipnz
  7701  07ED  0AA4               	incf	(___fttol@lval+3)^(0+128),f
  7702  07EE                     l2883:	
  7703  07EE  0824               	movf	(___fttol@lval+3)^(0+128),w
  7704  07EF  0020               	movlb	0	; select bank0
  7705  07F0  00EA               	movwf	?___fttol+3
  7706  07F1  0021               	movlb	1	; select bank1
  7707  07F2  0823               	movf	(___fttol@lval+2)^(0+128),w
  7708  07F3  0020               	movlb	0	; select bank0
  7709  07F4  00E9               	movwf	?___fttol+2
  7710  07F5  0021               	movlb	1	; select bank1
  7711  07F6  0822               	movf	(___fttol@lval+1)^(0+128),w
  7712  07F7  0020               	movlb	0	; select bank0
  7713  07F8  00E8               	movwf	?___fttol+1
  7714  07F9  0021               	movlb	1	; select bank1
  7715  07FA  0821               	movf	___fttol@lval^(0+128),w
  7716  07FB  0020               	movlb	0	; select bank0
  7717  07FC  00E7               	movwf	?___fttol
  7718  07FD  0008               	return
  7719  07FE                     __end_of___fttol:	
  7720                           
  7721                           	psect	text29
  7722  17C3                     __ptext29:	
  7723 ;; *************** function ___ftsub *****************
  7724 ;; Defined at:
  7725 ;;		line 17 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\ftsub.c"
  7726 ;; Parameters:    Size  Location     Type
  7727 ;;  f2              3   27[BANK0 ] float 
  7728 ;;  f1              3   30[BANK0 ] float 
  7729 ;; Auto vars:     Size  Location     Type
  7730 ;;		None
  7731 ;; Return value:  Size  Location     Type
  7732 ;;                  3   27[BANK0 ] float 
  7733 ;; Registers used:
  7734 ;;		wreg, status,2, status,0, pclath, cstack
  7735 ;; Tracked objects:
  7736 ;;		On entry : 0/0
  7737 ;;		On exit  : 0/0
  7738 ;;		Unchanged: 0/0
  7739 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7740 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7741 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7742 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7743 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7744 ;;Total ram usage:        6 bytes
  7745 ;; Hardware stack levels used:    1
  7746 ;; Hardware stack levels required when called:    9
  7747 ;; This function calls:
  7748 ;;		___ftadd
  7749 ;; This function is called by:
  7750 ;;		_ftoa
  7751 ;; This function uses a non-reentrant model
  7752 ;;
  7753                           
  7754                           
  7755                           ;psect for function ___ftsub
  7756  17C3                     ___ftsub:	
  7757                           
  7758                           ;incstack = 0
  7759                           ; Regs used in ___ftsub: [wreg+status,2+status,0+pclath+cstack]
  7760  17C3  0020               	movlb	0	; select bank0
  7761  17C4  083D               	movf	___ftsub@f2+2,w
  7762  17C5  043C               	iorwf	___ftsub@f2+1,w
  7763  17C6  043B               	iorwf	___ftsub@f2,w
  7764  17C7  1903               	skipnz
  7765  17C8  2FCB               	goto	l2841
  7766  17C9  3080               	movlw	128
  7767  17CA  06BD               	xorwf	___ftsub@f2+2,f
  7768  17CB                     l2841:	
  7769  17CB  083E               	movf	___ftsub@f1,w
  7770  17CC  00AE               	movwf	___ftadd@f1
  7771  17CD  083F               	movf	___ftsub@f1+1,w
  7772  17CE  00AF               	movwf	___ftadd@f1+1
  7773  17CF  0840               	movf	___ftsub@f1+2,w
  7774  17D0  00B0               	movwf	___ftadd@f1+2
  7775  17D1  083B               	movf	___ftsub@f2,w
  7776  17D2  00B1               	movwf	___ftadd@f2
  7777  17D3  083C               	movf	___ftsub@f2+1,w
  7778  17D4  00B2               	movwf	___ftadd@f2+1
  7779  17D5  083D               	movf	___ftsub@f2+2,w
  7780  17D6  00B3               	movwf	___ftadd@f2+2
  7781  17D7  3184  24AF         	fcall	___ftadd
  7782  17D9  0020               	movlb	0	; select bank0
  7783  17DA  082E               	movf	?___ftadd,w
  7784  17DB  00BB               	movwf	?___ftsub
  7785  17DC  082F               	movf	?___ftadd+1,w
  7786  17DD  00BC               	movwf	?___ftsub+1
  7787  17DE  0830               	movf	?___ftadd+2,w
  7788  17DF  00BD               	movwf	?___ftsub+2
  7789  17E0  0008               	return
  7790  17E1                     __end_of___ftsub:	
  7791                           
  7792                           	psect	text30
  7793  1694                     __ptext30:	
  7794 ;; *************** function ___ftneg *****************
  7795 ;; Defined at:
  7796 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\ftneg.c"
  7797 ;; Parameters:    Size  Location     Type
  7798 ;;  f1              3   55[BANK0 ] float 
  7799 ;; Auto vars:     Size  Location     Type
  7800 ;;		None
  7801 ;; Return value:  Size  Location     Type
  7802 ;;                  3   55[BANK0 ] float 
  7803 ;; Registers used:
  7804 ;;		wreg
  7805 ;; Tracked objects:
  7806 ;;		On entry : 0/0
  7807 ;;		On exit  : 0/0
  7808 ;;		Unchanged: 0/0
  7809 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7810 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7811 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7812 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7813 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7814 ;;Total ram usage:        3 bytes
  7815 ;; Hardware stack levels used:    1
  7816 ;; Hardware stack levels required when called:    7
  7817 ;; This function calls:
  7818 ;;		Nothing
  7819 ;; This function is called by:
  7820 ;;		_loop
  7821 ;;		_ftoa
  7822 ;; This function uses a non-reentrant model
  7823 ;;
  7824                           
  7825                           
  7826                           ;psect for function ___ftneg
  7827  1694                     ___ftneg:	
  7828                           
  7829                           ;incstack = 0
  7830                           ; Regs used in ___ftneg: [wreg]
  7831  1694  0020               	movlb	0	; select bank0
  7832  1695  0859               	movf	___ftneg@f1+2,w
  7833  1696  0458               	iorwf	___ftneg@f1+1,w
  7834  1697  0457               	iorwf	___ftneg@f1,w
  7835  1698  1903               	skipnz
  7836  1699  0008               	return
  7837  169A  3080               	movlw	128
  7838  169B  06D9               	xorwf	___ftneg@f1+2,f
  7839  169C  0008               	return
  7840  169D                     __end_of___ftneg:	
  7841                           
  7842                           	psect	text31
  7843  0F4C                     __ptext31:	
  7844 ;; *************** function ___ftmul *****************
  7845 ;; Defined at:
  7846 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\ftmul.c"
  7847 ;; Parameters:    Size  Location     Type
  7848 ;;  f1              3   55[BANK0 ] float 
  7849 ;;  f2              3   58[BANK0 ] float 
  7850 ;; Auto vars:     Size  Location     Type
  7851 ;;  f3_as_produc    3   66[BANK0 ] unsigned um
  7852 ;;  sign            1   70[BANK0 ] unsigned char 
  7853 ;;  cntr            1   69[BANK0 ] unsigned char 
  7854 ;;  exp             1   65[BANK0 ] unsigned char 
  7855 ;; Return value:  Size  Location     Type
  7856 ;;                  3   55[BANK0 ] float 
  7857 ;; Registers used:
  7858 ;;		wreg, status,2, status,0, pclath, cstack
  7859 ;; Tracked objects:
  7860 ;;		On entry : 0/0
  7861 ;;		On exit  : 0/0
  7862 ;;		Unchanged: 0/0
  7863 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7864 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7865 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7866 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7867 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7868 ;;Total ram usage:       16 bytes
  7869 ;; Hardware stack levels used:    1
  7870 ;; Hardware stack levels required when called:    8
  7871 ;; This function calls:
  7872 ;;		___ftpack
  7873 ;; This function is called by:
  7874 ;;		_loop
  7875 ;;		_ftoa
  7876 ;; This function uses a non-reentrant model
  7877 ;;
  7878                           
  7879                           
  7880                           ;psect for function ___ftmul
  7881  0F4C                     ___ftmul:	
  7882                           
  7883                           ;incstack = 0
  7884                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
  7885  0F4C  0020               	movlb	0	; select bank0
  7886  0F4D  0857               	movf	___ftmul@f1,w
  7887  0F4E  00DD               	movwf	??___ftmul
  7888  0F4F  0858               	movf	___ftmul@f1+1,w
  7889  0F50  00DE               	movwf	??___ftmul+1
  7890  0F51  0859               	movf	___ftmul@f1+2,w
  7891  0F52  00DF               	movwf	??___ftmul+2
  7892  0F53  1003               	clrc
  7893  0F54  0D5E               	rlf	??___ftmul+1,w
  7894  0F55  0D5F               	rlf	??___ftmul+2,w
  7895  0F56  00E0               	movwf	??___ftmul+3
  7896  0F57  0860               	movf	??___ftmul+3,w
  7897  0F58  00E1               	movwf	___ftmul@exp
  7898  0F59  0861               	movf	___ftmul@exp,w
  7899  0F5A  1D03               	btfss	3,2
  7900  0F5B  2F63               	goto	l2785
  7901  0F5C  3000               	movlw	0
  7902  0F5D  00D7               	movwf	?___ftmul
  7903  0F5E  3000               	movlw	0
  7904  0F5F  00D8               	movwf	?___ftmul+1
  7905  0F60  3000               	movlw	0
  7906  0F61  00D9               	movwf	?___ftmul+2
  7907  0F62  0008               	return
  7908  0F63                     l2785:	
  7909  0F63  085A               	movf	___ftmul@f2,w
  7910  0F64  00DD               	movwf	??___ftmul
  7911  0F65  085B               	movf	___ftmul@f2+1,w
  7912  0F66  00DE               	movwf	??___ftmul+1
  7913  0F67  085C               	movf	___ftmul@f2+2,w
  7914  0F68  00DF               	movwf	??___ftmul+2
  7915  0F69  1003               	clrc
  7916  0F6A  0D5E               	rlf	??___ftmul+1,w
  7917  0F6B  0D5F               	rlf	??___ftmul+2,w
  7918  0F6C  00E0               	movwf	??___ftmul+3
  7919  0F6D  0860               	movf	??___ftmul+3,w
  7920  0F6E  00E6               	movwf	___ftmul@sign
  7921  0F6F  0866               	movf	___ftmul@sign,w
  7922  0F70  1D03               	btfss	3,2
  7923  0F71  2F79               	goto	l2791
  7924  0F72  3000               	movlw	0
  7925  0F73  00D7               	movwf	?___ftmul
  7926  0F74  3000               	movlw	0
  7927  0F75  00D8               	movwf	?___ftmul+1
  7928  0F76  3000               	movlw	0
  7929  0F77  00D9               	movwf	?___ftmul+2
  7930  0F78  0008               	return
  7931  0F79                     l2791:	
  7932  0F79  0866               	movf	___ftmul@sign,w
  7933  0F7A  3E7B               	addlw	123
  7934  0F7B  00DD               	movwf	??___ftmul
  7935  0F7C  085D               	movf	??___ftmul,w
  7936  0F7D  07E1               	addwf	___ftmul@exp,f
  7937  0F7E  0857               	movf	___ftmul@f1,w
  7938  0F7F  00DD               	movwf	??___ftmul
  7939  0F80  0858               	movf	___ftmul@f1+1,w
  7940  0F81  00DE               	movwf	??___ftmul+1
  7941  0F82  0859               	movf	___ftmul@f1+2,w
  7942  0F83  00DF               	movwf	??___ftmul+2
  7943  0F84  3010               	movlw	16
  7944  0F85                     u2735:	
  7945  0F85  36DF               	lsrf	??___ftmul+2,f
  7946  0F86  0CDE               	rrf	??___ftmul+1,f
  7947  0F87  0CDD               	rrf	??___ftmul,f
  7948  0F88  0B89               	decfsz	9,f
  7949  0F89  2F85               	goto	u2735
  7950  0F8A  085D               	movf	??___ftmul,w
  7951  0F8B  00E0               	movwf	??___ftmul+3
  7952  0F8C  0860               	movf	??___ftmul+3,w
  7953  0F8D  00E6               	movwf	___ftmul@sign
  7954  0F8E  085A               	movf	___ftmul@f2,w
  7955  0F8F  00DD               	movwf	??___ftmul
  7956  0F90  085B               	movf	___ftmul@f2+1,w
  7957  0F91  00DE               	movwf	??___ftmul+1
  7958  0F92  085C               	movf	___ftmul@f2+2,w
  7959  0F93  00DF               	movwf	??___ftmul+2
  7960  0F94  3010               	movlw	16
  7961  0F95                     u2745:	
  7962  0F95  36DF               	lsrf	??___ftmul+2,f
  7963  0F96  0CDE               	rrf	??___ftmul+1,f
  7964  0F97  0CDD               	rrf	??___ftmul,f
  7965  0F98  0B89               	decfsz	9,f
  7966  0F99  2F95               	goto	u2745
  7967  0F9A  085D               	movf	??___ftmul,w
  7968  0F9B  00E0               	movwf	??___ftmul+3
  7969  0F9C  0860               	movf	??___ftmul+3,w
  7970  0F9D  06E6               	xorwf	___ftmul@sign,f
  7971  0F9E  3080               	movlw	128
  7972  0F9F  00DD               	movwf	??___ftmul
  7973  0FA0  085D               	movf	??___ftmul,w
  7974  0FA1  05E6               	andwf	___ftmul@sign,f
  7975  0FA2  17D8               	bsf	___ftmul@f1+1,7
  7976  0FA3  17DB               	bsf	___ftmul@f2+1,7
  7977  0FA4  30FF               	movlw	255
  7978  0FA5  05DA               	andwf	___ftmul@f2,f
  7979  0FA6  30FF               	movlw	255
  7980  0FA7  05DB               	andwf	___ftmul@f2+1,f
  7981  0FA8  3000               	movlw	0
  7982  0FA9  05DC               	andwf	___ftmul@f2+2,f
  7983  0FAA  3000               	movlw	0
  7984  0FAB  00E2               	movwf	___ftmul@f3_as_product
  7985  0FAC  3000               	movlw	0
  7986  0FAD  00E3               	movwf	___ftmul@f3_as_product+1
  7987  0FAE  3000               	movlw	0
  7988  0FAF  00E4               	movwf	___ftmul@f3_as_product+2
  7989  0FB0  3007               	movlw	7
  7990  0FB1  00DD               	movwf	??___ftmul
  7991  0FB2  085D               	movf	??___ftmul,w
  7992  0FB3  00E5               	movwf	___ftmul@cntr
  7993  0FB4                     l2803:	
  7994  0FB4  1C57               	btfss	___ftmul@f1,0
  7995  0FB5  2FBC               	goto	l2807
  7996  0FB6  085A               	movf	___ftmul@f2,w
  7997  0FB7  07E2               	addwf	___ftmul@f3_as_product,f
  7998  0FB8  085B               	movf	___ftmul@f2+1,w
  7999  0FB9  3DE3               	addwfc	___ftmul@f3_as_product+1,f
  8000  0FBA  085C               	movf	___ftmul@f2+2,w
  8001  0FBB  3DE4               	addwfc	___ftmul@f3_as_product+2,f
  8002  0FBC                     l2807:	
  8003  0FBC  3001               	movlw	1
  8004  0FBD                     u2765:	
  8005  0FBD  36D9               	lsrf	___ftmul@f1+2,f
  8006  0FBE  0CD8               	rrf	___ftmul@f1+1,f
  8007  0FBF  0CD7               	rrf	___ftmul@f1,f
  8008  0FC0  0B89               	decfsz	9,f
  8009  0FC1  2FBD               	goto	u2765
  8010  0FC2  3001               	movlw	1
  8011  0FC3                     u2775:	
  8012  0FC3  35DA               	lslf	___ftmul@f2,f
  8013  0FC4  0DDB               	rlf	___ftmul@f2+1,f
  8014  0FC5  0DDC               	rlf	___ftmul@f2+2,f
  8015  0FC6  0B89               	decfsz	9,f
  8016  0FC7  2FC3               	goto	u2775
  8017  0FC8  3001               	movlw	1
  8018  0FC9  02E5               	subwf	___ftmul@cntr,f
  8019  0FCA  1D03               	btfss	3,2
  8020  0FCB  2FB4               	goto	l2803
  8021  0FCC  3009               	movlw	9
  8022  0FCD  00DD               	movwf	??___ftmul
  8023  0FCE  085D               	movf	??___ftmul,w
  8024  0FCF  00E5               	movwf	___ftmul@cntr
  8025  0FD0                     l2815:	
  8026  0FD0  1C57               	btfss	___ftmul@f1,0
  8027  0FD1  2FD8               	goto	l2819
  8028  0FD2  085A               	movf	___ftmul@f2,w
  8029  0FD3  07E2               	addwf	___ftmul@f3_as_product,f
  8030  0FD4  085B               	movf	___ftmul@f2+1,w
  8031  0FD5  3DE3               	addwfc	___ftmul@f3_as_product+1,f
  8032  0FD6  085C               	movf	___ftmul@f2+2,w
  8033  0FD7  3DE4               	addwfc	___ftmul@f3_as_product+2,f
  8034  0FD8                     l2819:	
  8035  0FD8  3001               	movlw	1
  8036  0FD9                     u2805:	
  8037  0FD9  36D9               	lsrf	___ftmul@f1+2,f
  8038  0FDA  0CD8               	rrf	___ftmul@f1+1,f
  8039  0FDB  0CD7               	rrf	___ftmul@f1,f
  8040  0FDC  0B89               	decfsz	9,f
  8041  0FDD  2FD9               	goto	u2805
  8042  0FDE  3001               	movlw	1
  8043  0FDF                     u2815:	
  8044  0FDF  36E4               	lsrf	___ftmul@f3_as_product+2,f
  8045  0FE0  0CE3               	rrf	___ftmul@f3_as_product+1,f
  8046  0FE1  0CE2               	rrf	___ftmul@f3_as_product,f
  8047  0FE2  0B89               	decfsz	9,f
  8048  0FE3  2FDF               	goto	u2815
  8049  0FE4  3001               	movlw	1
  8050  0FE5  02E5               	subwf	___ftmul@cntr,f
  8051  0FE6  1D03               	btfss	3,2
  8052  0FE7  2FD0               	goto	l2815
  8053  0FE8  0862               	movf	___ftmul@f3_as_product,w
  8054  0FE9  00A0               	movwf	___ftpack@arg
  8055  0FEA  0863               	movf	___ftmul@f3_as_product+1,w
  8056  0FEB  00A1               	movwf	___ftpack@arg+1
  8057  0FEC  0864               	movf	___ftmul@f3_as_product+2,w
  8058  0FED  00A2               	movwf	___ftpack@arg+2
  8059  0FEE  0861               	movf	___ftmul@exp,w
  8060  0FEF  00DD               	movwf	??___ftmul
  8061  0FF0  085D               	movf	??___ftmul,w
  8062  0FF1  00A3               	movwf	___ftpack@exp
  8063  0FF2  0866               	movf	___ftmul@sign,w
  8064  0FF3  00DE               	movwf	??___ftmul+1
  8065  0FF4  085E               	movf	??___ftmul+1,w
  8066  0FF5  00A4               	movwf	___ftpack@sign
  8067  0FF6  318C  249D         	fcall	___ftpack
  8068  0FF8  0020               	movlb	0	; select bank0
  8069  0FF9  0820               	movf	?___ftpack,w
  8070  0FFA  00D7               	movwf	?___ftmul
  8071  0FFB  0821               	movf	?___ftpack+1,w
  8072  0FFC  00D8               	movwf	?___ftmul+1
  8073  0FFD  0822               	movf	?___ftpack+2,w
  8074  0FFE  00D9               	movwf	?___ftmul+2
  8075  0FFF  0008               	return
  8076  1000                     __end_of___ftmul:	
  8077                           
  8078                           	psect	text32
  8079  09F2                     __ptext32:	
  8080 ;; *************** function ___ftge *****************
  8081 ;; Defined at:
  8082 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\ftge.c"
  8083 ;; Parameters:    Size  Location     Type
  8084 ;;  ff1             3    0[BANK0 ] float 
  8085 ;;  ff2             3    3[BANK0 ] float 
  8086 ;; Auto vars:     Size  Location     Type
  8087 ;;		None
  8088 ;; Return value:  Size  Location     Type
  8089 ;;		None               void
  8090 ;; Registers used:
  8091 ;;		wreg, status,2, status,0
  8092 ;; Tracked objects:
  8093 ;;		On entry : 0/0
  8094 ;;		On exit  : 0/0
  8095 ;;		Unchanged: 0/0
  8096 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8097 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8098 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8099 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8100 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8101 ;;Total ram usage:        9 bytes
  8102 ;; Hardware stack levels used:    1
  8103 ;; Hardware stack levels required when called:    7
  8104 ;; This function calls:
  8105 ;;		Nothing
  8106 ;; This function is called by:
  8107 ;;		_ftoa
  8108 ;; This function uses a non-reentrant model
  8109 ;;
  8110                           
  8111                           
  8112                           ;psect for function ___ftge
  8113  09F2                     ___ftge:	
  8114                           
  8115                           ;incstack = 0
  8116                           ; Regs used in ___ftge: [wreg+status,2+status,0]
  8117  09F2  0020               	movlb	0	; select bank0
  8118  09F3  1FA2               	btfss	___ftge@ff1+2,7
  8119  09F4  2A09               	goto	l2763
  8120  09F5  0920               	comf	___ftge@ff1,w
  8121  09F6  00A6               	movwf	??___ftge
  8122  09F7  0921               	comf	___ftge@ff1+1,w
  8123  09F8  00A7               	movwf	??___ftge+1
  8124  09F9  0922               	comf	___ftge@ff1+2,w
  8125  09FA  00A8               	movwf	??___ftge+2
  8126  09FB  0AA6               	incf	??___ftge,f
  8127  09FC  1903               	skipnz
  8128  09FD  0AA7               	incf	??___ftge+1,f
  8129  09FE  1903               	skipnz
  8130  09FF  0AA8               	incf	??___ftge+2,f
  8131  0A00  3000               	movlw	0
  8132  0A01  0726               	addwf	??___ftge,w
  8133  0A02  00A0               	movwf	___ftge@ff1
  8134  0A03  3000               	movlw	0
  8135  0A04  3D27               	addwfc	??___ftge+1,w
  8136  0A05  00A1               	movwf	___ftge@ff1+1
  8137  0A06  3080               	movlw	128
  8138  0A07  3D28               	addwfc	??___ftge+2,w
  8139  0A08  00A2               	movwf	___ftge@ff1+2
  8140  0A09                     l2763:	
  8141  0A09  1FA5               	btfss	___ftge@ff2+2,7
  8142  0A0A  2A1F               	goto	l2767
  8143  0A0B  0923               	comf	___ftge@ff2,w
  8144  0A0C  00A6               	movwf	??___ftge
  8145  0A0D  0924               	comf	___ftge@ff2+1,w
  8146  0A0E  00A7               	movwf	??___ftge+1
  8147  0A0F  0925               	comf	___ftge@ff2+2,w
  8148  0A10  00A8               	movwf	??___ftge+2
  8149  0A11  0AA6               	incf	??___ftge,f
  8150  0A12  1903               	skipnz
  8151  0A13  0AA7               	incf	??___ftge+1,f
  8152  0A14  1903               	skipnz
  8153  0A15  0AA8               	incf	??___ftge+2,f
  8154  0A16  3000               	movlw	0
  8155  0A17  0726               	addwf	??___ftge,w
  8156  0A18  00A3               	movwf	___ftge@ff2
  8157  0A19  3000               	movlw	0
  8158  0A1A  3D27               	addwfc	??___ftge+1,w
  8159  0A1B  00A4               	movwf	___ftge@ff2+1
  8160  0A1C  3080               	movlw	128
  8161  0A1D  3D28               	addwfc	??___ftge+2,w
  8162  0A1E  00A5               	movwf	___ftge@ff2+2
  8163  0A1F                     l2767:	
  8164  0A1F  3080               	movlw	128
  8165  0A20  06A2               	xorwf	___ftge@ff1+2,f
  8166  0A21  3080               	movlw	128
  8167  0A22  06A5               	xorwf	___ftge@ff2+2,f
  8168  0A23  0825               	movf	___ftge@ff2+2,w
  8169  0A24  0222               	subwf	___ftge@ff1+2,w
  8170  0A25  1D03               	skipz
  8171  0A26  0008               	return
  8172  0A27  0824               	movf	___ftge@ff2+1,w
  8173  0A28  0221               	subwf	___ftge@ff1+1,w
  8174  0A29  1D03               	skipz
  8175  0A2A  0008               	return
  8176  0A2B  0823               	movf	___ftge@ff2,w
  8177  0A2C  0220               	subwf	___ftge@ff1,w
  8178  0A2D  0008               	return
  8179  0A2E                     __end_of___ftge:	
  8180                           
  8181                           	psect	text33
  8182  0D6A                     __ptext33:	
  8183 ;; *************** function _getADCValue *****************
  8184 ;; Defined at:
  8185 ;;		line 110 in file "main.c"
  8186 ;; Parameters:    Size  Location     Type
  8187 ;;  channel         1    wreg     unsigned char 
  8188 ;; Auto vars:     Size  Location     Type
  8189 ;;  channel         1   51[BANK0 ] unsigned char 
  8190 ;;  adcSum          3   52[BANK0 ] float 
  8191 ;;  adcLoop         2   49[BANK0 ] unsigned int 
  8192 ;; Return value:  Size  Location     Type
  8193 ;;                  3   43[BANK0 ] float 
  8194 ;; Registers used:
  8195 ;;		wreg, status,2, status,0, pclath, cstack
  8196 ;; Tracked objects:
  8197 ;;		On entry : 0/0
  8198 ;;		On exit  : 0/0
  8199 ;;		Unchanged: 0/0
  8200 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8201 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8202 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8203 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8204 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8205 ;;Total ram usage:       12 bytes
  8206 ;; Hardware stack levels used:    1
  8207 ;; Hardware stack levels required when called:    9
  8208 ;; This function calls:
  8209 ;;		___awtoft
  8210 ;;		___ftadd
  8211 ;;		___ftdiv
  8212 ;;		_doWDTSleep
  8213 ;; This function is called by:
  8214 ;;		_loop
  8215 ;; This function uses a non-reentrant model
  8216 ;;
  8217                           
  8218                           
  8219                           ;psect for function _getADCValue
  8220  0D6A                     _getADCValue:	
  8221                           
  8222                           ;incstack = 0
  8223                           ; Regs used in _getADCValue: [wreg+status,2+status,0+pclath+cstack]
  8224                           ;getADCValue@channel stored from wreg
  8225  0D6A  0020               	movlb	0	; select bank0
  8226  0D6B  00D3               	movwf	getADCValue@channel
  8227                           
  8228                           ;main.c: 113: float adcSum = 0;
  8229  0D6C  3000               	movlw	0
  8230  0D6D  00D4               	movwf	getADCValue@adcSum
  8231  0D6E  3000               	movlw	0
  8232  0D6F  00D5               	movwf	getADCValue@adcSum+1
  8233  0D70  3000               	movlw	0
  8234  0D71  00D6               	movwf	getADCValue@adcSum+2
  8235                           
  8236                           ;main.c: 114: unsigned int adcLoop = 1000;
  8237  0D72  30E8               	movlw	232
  8238  0D73  00D1               	movwf	getADCValue@adcLoop
  8239  0D74  3003               	movlw	3
  8240  0D75  00D2               	movwf	getADCValue@adcLoop+1
  8241                           
  8242                           ;main.c: 116: ADCON0bits.CHS = channel;
  8243  0D76  0853               	movf	getADCValue@channel,w
  8244  0D77  00CE               	movwf	??_getADCValue
  8245  0D78  0DCE               	rlf	??_getADCValue,f
  8246  0D79  0DCE               	rlf	??_getADCValue,f
  8247  0D7A  0021               	movlb	1	; select bank1
  8248  0D7B  081D               	movf	29,w	;volatile
  8249  0D7C  0020               	movlb	0	; select bank0
  8250  0D7D  064E               	xorwf	??_getADCValue,w
  8251  0D7E  3903               	andlw	-253
  8252  0D7F  064E               	xorwf	??_getADCValue,w
  8253  0D80  0021               	movlb	1	; select bank1
  8254  0D81  009D               	movwf	29	;volatile
  8255                           
  8256                           ;main.c: 117: FVRCONbits.FVREN = 1;
  8257  0D82  0022               	movlb	2	; select bank2
  8258  0D83  1797               	bsf	23,7	;volatile
  8259                           
  8260                           ;main.c: 118: ADCON0bits.ADON = 1;
  8261  0D84  0021               	movlb	1	; select bank1
  8262  0D85  141D               	bsf	29,0	;volatile
  8263                           
  8264                           ;main.c: 120: doWDTSleep(0b00000);
  8265  0D86  3000               	movlw	0
  8266  0D87  3196  26F1  318D   	fcall	_doWDTSleep
  8267  0D8A                     l3143:	
  8268                           ;main.c: 122: while (adcLoop--){
  8269                           
  8270  0D8A  3001               	movlw	1
  8271  0D8B  0020               	movlb	0	; select bank0
  8272  0D8C  02D1               	subwf	getADCValue@adcLoop,f
  8273  0D8D  3000               	movlw	0
  8274  0D8E  3BD2               	subwfb	getADCValue@adcLoop+1,f
  8275  0D8F  0A51               	incf	getADCValue@adcLoop,w
  8276  0D90  1903               	btfsc	3,2
  8277  0D91  0A52               	incf	getADCValue@adcLoop+1,w
  8278  0D92  1903               	btfsc	3,2
  8279  0D93  2DC7               	goto	l190
  8280                           
  8281                           ;main.c: 124: ADCON0bits.ADGO = 1;
  8282  0D94  0021               	movlb	1	; select bank1
  8283  0D95  149D               	bsf	29,1	;volatile
  8284  0D96                     l3139:	
  8285                           ;main.c: 126: while (ADCON0bits.ADGO){
  8286                           
  8287  0D96  0021               	movlb	1	; select bank1
  8288  0D97  1C9D               	btfss	29,1	;volatile
  8289  0D98  2D9E               	goto	l3141
  8290                           
  8291                           ;main.c: 127: doWDTSleep(0b00000);
  8292  0D99  3000               	movlw	0
  8293  0D9A  3196  26F1  318D   	fcall	_doWDTSleep
  8294  0D9D  2D96               	goto	l3139
  8295  0D9E                     l3141:	
  8296                           
  8297                           ;main.c: 128: };main.c: 130: adcSum+= (ADRESL | (ADRESH << 8));
  8298  0D9E  081C               	movf	28,w	;volatile
  8299  0D9F  0020               	movlb	0	; select bank0
  8300  0DA0  00CE               	movwf	??_getADCValue
  8301  0DA1  01CF               	clrf	??_getADCValue+1
  8302  0DA2  084E               	movf	??_getADCValue,w
  8303  0DA3  00CF               	movwf	??_getADCValue+1
  8304  0DA4  01CE               	clrf	??_getADCValue
  8305  0DA5  084E               	movf	??_getADCValue,w
  8306  0DA6  0021               	movlb	1	; select bank1
  8307  0DA7  041B               	iorwf	27,w	;volatile
  8308  0DA8  0020               	movlb	0	; select bank0
  8309  0DA9  00A8               	movwf	___awtoft@c
  8310  0DAA  084F               	movf	??_getADCValue+1,w
  8311  0DAB  00A9               	movwf	___awtoft@c+1
  8312  0DAC  3188  2042  318D   	fcall	___awtoft
  8313  0DAF  0020               	movlb	0	; select bank0
  8314  0DB0  0828               	movf	?___awtoft,w
  8315  0DB1  00AE               	movwf	___ftadd@f1
  8316  0DB2  0829               	movf	?___awtoft+1,w
  8317  0DB3  00AF               	movwf	___ftadd@f1+1
  8318  0DB4  082A               	movf	?___awtoft+2,w
  8319  0DB5  00B0               	movwf	___ftadd@f1+2
  8320  0DB6  0854               	movf	getADCValue@adcSum,w
  8321  0DB7  00B1               	movwf	___ftadd@f2
  8322  0DB8  0855               	movf	getADCValue@adcSum+1,w
  8323  0DB9  00B2               	movwf	___ftadd@f2+1
  8324  0DBA  0856               	movf	getADCValue@adcSum+2,w
  8325  0DBB  00B3               	movwf	___ftadd@f2+2
  8326  0DBC  3184  24AF  318D   	fcall	___ftadd
  8327  0DBF  0020               	movlb	0	; select bank0
  8328  0DC0  082E               	movf	?___ftadd,w
  8329  0DC1  00D4               	movwf	getADCValue@adcSum
  8330  0DC2  082F               	movf	?___ftadd+1,w
  8331  0DC3  00D5               	movwf	getADCValue@adcSum+1
  8332  0DC4  0830               	movf	?___ftadd+2,w
  8333  0DC5  00D6               	movwf	getADCValue@adcSum+2
  8334  0DC6  2D8A               	goto	l3143
  8335  0DC7                     l190:	
  8336                           
  8337                           ;main.c: 132: };main.c: 134: FVRCONbits.FVREN = 0;
  8338  0DC7  0022               	movlb	2	; select bank2
  8339  0DC8  1397               	bcf	23,7	;volatile
  8340                           
  8341                           ;main.c: 135: ADCON0bits.ADON = 0;
  8342  0DC9  0021               	movlb	1	; select bank1
  8343  0DCA  101D               	bcf	29,0	;volatile
  8344                           
  8345                           ;main.c: 138: adcSum/= 1000;
  8346  0DCB  3000               	movlw	0
  8347  0DCC  0020               	movlb	0	; select bank0
  8348  0DCD  00BB               	movwf	___ftdiv@f2
  8349  0DCE  307A               	movlw	122
  8350  0DCF  00BC               	movwf	___ftdiv@f2+1
  8351  0DD0  3044               	movlw	68
  8352  0DD1  00BD               	movwf	___ftdiv@f2+2
  8353  0DD2  0854               	movf	getADCValue@adcSum,w
  8354  0DD3  00BE               	movwf	___ftdiv@f1
  8355  0DD4  0855               	movf	getADCValue@adcSum+1,w
  8356  0DD5  00BF               	movwf	___ftdiv@f1+1
  8357  0DD6  0856               	movf	getADCValue@adcSum+2,w
  8358  0DD7  00C0               	movwf	___ftdiv@f1+2
  8359  0DD8  318E  26A3  318D   	fcall	___ftdiv
  8360  0DDB  0020               	movlb	0	; select bank0
  8361  0DDC  083B               	movf	?___ftdiv,w
  8362  0DDD  00D4               	movwf	getADCValue@adcSum
  8363  0DDE  083C               	movf	?___ftdiv+1,w
  8364  0DDF  00D5               	movwf	getADCValue@adcSum+1
  8365  0DE0  083D               	movf	?___ftdiv+2,w
  8366  0DE1  00D6               	movwf	getADCValue@adcSum+2
  8367                           
  8368                           ;main.c: 139: adcSum/= 500;
  8369  0DE2  3000               	movlw	0
  8370  0DE3  00BB               	movwf	___ftdiv@f2
  8371  0DE4  30FA               	movlw	250
  8372  0DE5  00BC               	movwf	___ftdiv@f2+1
  8373  0DE6  3043               	movlw	67
  8374  0DE7  00BD               	movwf	___ftdiv@f2+2
  8375  0DE8  0854               	movf	getADCValue@adcSum,w
  8376  0DE9  00BE               	movwf	___ftdiv@f1
  8377  0DEA  0855               	movf	getADCValue@adcSum+1,w
  8378  0DEB  00BF               	movwf	___ftdiv@f1+1
  8379  0DEC  0856               	movf	getADCValue@adcSum+2,w
  8380  0DED  00C0               	movwf	___ftdiv@f1+2
  8381  0DEE  318E  26A3         	fcall	___ftdiv
  8382  0DF0  0020               	movlb	0	; select bank0
  8383  0DF1  083B               	movf	?___ftdiv,w
  8384  0DF2  00D4               	movwf	getADCValue@adcSum
  8385  0DF3  083C               	movf	?___ftdiv+1,w
  8386  0DF4  00D5               	movwf	getADCValue@adcSum+1
  8387  0DF5  083D               	movf	?___ftdiv+2,w
  8388  0DF6  00D6               	movwf	getADCValue@adcSum+2
  8389                           
  8390                           ;main.c: 141: return adcSum;
  8391  0DF7  0854               	movf	getADCValue@adcSum,w
  8392  0DF8  00CB               	movwf	?_getADCValue
  8393  0DF9  0855               	movf	getADCValue@adcSum+1,w
  8394  0DFA  00CC               	movwf	?_getADCValue+1
  8395  0DFB  0856               	movf	getADCValue@adcSum+2,w
  8396  0DFC  00CD               	movwf	?_getADCValue+2
  8397  0DFD  0008               	return
  8398  0DFE                     __end_of_getADCValue:	
  8399                           
  8400                           	psect	text34
  8401  16F1                     __ptext34:	
  8402 ;; *************** function _doWDTSleep *****************
  8403 ;; Defined at:
  8404 ;;		line 22 in file "main.c"
  8405 ;; Parameters:    Size  Location     Type
  8406 ;;  wdtps           1    wreg     unsigned char 
  8407 ;; Auto vars:     Size  Location     Type
  8408 ;;  wdtps           1    1[BANK0 ] unsigned char 
  8409 ;; Return value:  Size  Location     Type
  8410 ;;                  1    wreg      void 
  8411 ;; Registers used:
  8412 ;;		wreg, status,2, status,0
  8413 ;; Tracked objects:
  8414 ;;		On entry : 0/0
  8415 ;;		On exit  : 0/0
  8416 ;;		Unchanged: 0/0
  8417 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8418 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8419 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8420 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8421 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8422 ;;Total ram usage:        2 bytes
  8423 ;; Hardware stack levels used:    1
  8424 ;; Hardware stack levels required when called:    7
  8425 ;; This function calls:
  8426 ;;		Nothing
  8427 ;; This function is called by:
  8428 ;;		_sleep
  8429 ;;		_getADCValue
  8430 ;; This function uses a non-reentrant model
  8431 ;;
  8432                           
  8433                           
  8434                           ;psect for function _doWDTSleep
  8435  16F1                     _doWDTSleep:	
  8436                           
  8437                           ;incstack = 0
  8438                           ; Regs used in _doWDTSleep: [wreg+status,2+status,0]
  8439                           ;doWDTSleep@wdtps stored from wreg
  8440  16F1  0020               	movlb	0	; select bank0
  8441  16F2  00A1               	movwf	doWDTSleep@wdtps
  8442                           
  8443                           ;main.c: 25: WDTCONbits.WDTPS = wdtps;
  8444  16F3  0821               	movf	doWDTSleep@wdtps,w
  8445  16F4  00A0               	movwf	??_doWDTSleep
  8446  16F5  0DA0               	rlf	??_doWDTSleep,f
  8447  16F6  0021               	movlb	1	; select bank1
  8448  16F7  0817               	movf	23,w	;volatile
  8449  16F8  0020               	movlb	0	; select bank0
  8450  16F9  0620               	xorwf	??_doWDTSleep,w
  8451  16FA  39C1               	andlw	-63
  8452  16FB  0620               	xorwf	??_doWDTSleep,w
  8453  16FC  0021               	movlb	1	; select bank1
  8454  16FD  0097               	movwf	23	;volatile
  8455  16FE  0063               	sleep	;# 
  8456                           
  8457                           ;main.c: 29: __nop();
  8458  16FF  0000               	nop
  8459                           
  8460                           ;main.c: 30: __nop();
  8461  1700  0000               	nop
  8462                           
  8463                           ;main.c: 32: WDTCONbits.WDTPS = 0b01101;
  8464  1701  0021               	movlb	1	; select bank1
  8465  1702  0817               	movf	23,w	;volatile
  8466  1703  39C1               	andlw	-63
  8467  1704  381A               	iorlw	26
  8468  1705  0097               	movwf	23	;volatile
  8469  1706  0064               	clrwdt	;# 
  8470  1707  0008               	return
  8471  1708                     __end_of_doWDTSleep:	
  8472                           
  8473                           	psect	text35
  8474  0EA3                     __ptext35:	
  8475 ;; *************** function ___ftdiv *****************
  8476 ;; Defined at:
  8477 ;;		line 56 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\ftdiv.c"
  8478 ;; Parameters:    Size  Location     Type
  8479 ;;  f2              3   27[BANK0 ] float 
  8480 ;;  f1              3   30[BANK0 ] float 
  8481 ;; Auto vars:     Size  Location     Type
  8482 ;;  f3              3   38[BANK0 ] float 
  8483 ;;  sign            1   42[BANK0 ] unsigned char 
  8484 ;;  exp             1   41[BANK0 ] unsigned char 
  8485 ;;  cntr            1   37[BANK0 ] unsigned char 
  8486 ;; Return value:  Size  Location     Type
  8487 ;;                  3   27[BANK0 ] float 
  8488 ;; Registers used:
  8489 ;;		wreg, status,2, status,0, pclath, cstack
  8490 ;; Tracked objects:
  8491 ;;		On entry : 0/0
  8492 ;;		On exit  : 0/0
  8493 ;;		Unchanged: 0/0
  8494 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8495 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8496 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8497 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8498 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8499 ;;Total ram usage:       16 bytes
  8500 ;; Hardware stack levels used:    1
  8501 ;; Hardware stack levels required when called:    8
  8502 ;; This function calls:
  8503 ;;		___ftpack
  8504 ;; This function is called by:
  8505 ;;		_getADCValue
  8506 ;;		_loop
  8507 ;; This function uses a non-reentrant model
  8508 ;;
  8509                           
  8510                           
  8511                           ;psect for function ___ftdiv
  8512  0EA3                     ___ftdiv:	
  8513                           
  8514                           ;incstack = 0
  8515                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
  8516  0EA3  0020               	movlb	0	; select bank0
  8517  0EA4  083E               	movf	___ftdiv@f1,w
  8518  0EA5  00C1               	movwf	??___ftdiv
  8519  0EA6  083F               	movf	___ftdiv@f1+1,w
  8520  0EA7  00C2               	movwf	??___ftdiv+1
  8521  0EA8  0840               	movf	___ftdiv@f1+2,w
  8522  0EA9  00C3               	movwf	??___ftdiv+2
  8523  0EAA  1003               	clrc
  8524  0EAB  0D42               	rlf	??___ftdiv+1,w
  8525  0EAC  0D43               	rlf	??___ftdiv+2,w
  8526  0EAD  00C4               	movwf	??___ftdiv+3
  8527  0EAE  0844               	movf	??___ftdiv+3,w
  8528  0EAF  00C9               	movwf	___ftdiv@exp
  8529  0EB0  0849               	movf	___ftdiv@exp,w
  8530  0EB1  1D03               	btfss	3,2
  8531  0EB2  2EBA               	goto	l3003
  8532  0EB3  3000               	movlw	0
  8533  0EB4  00BB               	movwf	?___ftdiv
  8534  0EB5  3000               	movlw	0
  8535  0EB6  00BC               	movwf	?___ftdiv+1
  8536  0EB7  3000               	movlw	0
  8537  0EB8  00BD               	movwf	?___ftdiv+2
  8538  0EB9  0008               	return
  8539  0EBA                     l3003:	
  8540  0EBA  083B               	movf	___ftdiv@f2,w
  8541  0EBB  00C1               	movwf	??___ftdiv
  8542  0EBC  083C               	movf	___ftdiv@f2+1,w
  8543  0EBD  00C2               	movwf	??___ftdiv+1
  8544  0EBE  083D               	movf	___ftdiv@f2+2,w
  8545  0EBF  00C3               	movwf	??___ftdiv+2
  8546  0EC0  1003               	clrc
  8547  0EC1  0D42               	rlf	??___ftdiv+1,w
  8548  0EC2  0D43               	rlf	??___ftdiv+2,w
  8549  0EC3  00C4               	movwf	??___ftdiv+3
  8550  0EC4  0844               	movf	??___ftdiv+3,w
  8551  0EC5  00CA               	movwf	___ftdiv@sign
  8552  0EC6  084A               	movf	___ftdiv@sign,w
  8553  0EC7  1D03               	btfss	3,2
  8554  0EC8  2ED0               	goto	l3009
  8555  0EC9  3000               	movlw	0
  8556  0ECA  00BB               	movwf	?___ftdiv
  8557  0ECB  3000               	movlw	0
  8558  0ECC  00BC               	movwf	?___ftdiv+1
  8559  0ECD  3000               	movlw	0
  8560  0ECE  00BD               	movwf	?___ftdiv+2
  8561  0ECF  0008               	return
  8562  0ED0                     l3009:	
  8563  0ED0  3000               	movlw	0
  8564  0ED1  00C6               	movwf	___ftdiv@f3
  8565  0ED2  3000               	movlw	0
  8566  0ED3  00C7               	movwf	___ftdiv@f3+1
  8567  0ED4  3000               	movlw	0
  8568  0ED5  00C8               	movwf	___ftdiv@f3+2
  8569  0ED6  3089               	movlw	137
  8570  0ED7  074A               	addwf	___ftdiv@sign,w
  8571  0ED8  00C1               	movwf	??___ftdiv
  8572  0ED9  0841               	movf	??___ftdiv,w
  8573  0EDA  02C9               	subwf	___ftdiv@exp,f
  8574  0EDB  083E               	movf	___ftdiv@f1,w
  8575  0EDC  00C1               	movwf	??___ftdiv
  8576  0EDD  083F               	movf	___ftdiv@f1+1,w
  8577  0EDE  00C2               	movwf	??___ftdiv+1
  8578  0EDF  0840               	movf	___ftdiv@f1+2,w
  8579  0EE0  00C3               	movwf	??___ftdiv+2
  8580  0EE1  3010               	movlw	16
  8581  0EE2                     u3095:	
  8582  0EE2  36C3               	lsrf	??___ftdiv+2,f
  8583  0EE3  0CC2               	rrf	??___ftdiv+1,f
  8584  0EE4  0CC1               	rrf	??___ftdiv,f
  8585  0EE5  0B89               	decfsz	9,f
  8586  0EE6  2EE2               	goto	u3095
  8587  0EE7  0841               	movf	??___ftdiv,w
  8588  0EE8  00C4               	movwf	??___ftdiv+3
  8589  0EE9  0844               	movf	??___ftdiv+3,w
  8590  0EEA  00CA               	movwf	___ftdiv@sign
  8591  0EEB  083B               	movf	___ftdiv@f2,w
  8592  0EEC  00C1               	movwf	??___ftdiv
  8593  0EED  083C               	movf	___ftdiv@f2+1,w
  8594  0EEE  00C2               	movwf	??___ftdiv+1
  8595  0EEF  083D               	movf	___ftdiv@f2+2,w
  8596  0EF0  00C3               	movwf	??___ftdiv+2
  8597  0EF1  3010               	movlw	16
  8598  0EF2                     u3105:	
  8599  0EF2  36C3               	lsrf	??___ftdiv+2,f
  8600  0EF3  0CC2               	rrf	??___ftdiv+1,f
  8601  0EF4  0CC1               	rrf	??___ftdiv,f
  8602  0EF5  0B89               	decfsz	9,f
  8603  0EF6  2EF2               	goto	u3105
  8604  0EF7  0841               	movf	??___ftdiv,w
  8605  0EF8  00C4               	movwf	??___ftdiv+3
  8606  0EF9  0844               	movf	??___ftdiv+3,w
  8607  0EFA  06CA               	xorwf	___ftdiv@sign,f
  8608  0EFB  3080               	movlw	128
  8609  0EFC  00C1               	movwf	??___ftdiv
  8610  0EFD  0841               	movf	??___ftdiv,w
  8611  0EFE  05CA               	andwf	___ftdiv@sign,f
  8612  0EFF  17BF               	bsf	___ftdiv@f1+1,7
  8613  0F00  30FF               	movlw	255
  8614  0F01  05BE               	andwf	___ftdiv@f1,f
  8615  0F02  30FF               	movlw	255
  8616  0F03  05BF               	andwf	___ftdiv@f1+1,f
  8617  0F04  3000               	movlw	0
  8618  0F05  05C0               	andwf	___ftdiv@f1+2,f
  8619  0F06  17BC               	bsf	___ftdiv@f2+1,7
  8620  0F07  30FF               	movlw	255
  8621  0F08  05BB               	andwf	___ftdiv@f2,f
  8622  0F09  30FF               	movlw	255
  8623  0F0A  05BC               	andwf	___ftdiv@f2+1,f
  8624  0F0B  3000               	movlw	0
  8625  0F0C  05BD               	andwf	___ftdiv@f2+2,f
  8626  0F0D  3018               	movlw	24
  8627  0F0E  00C1               	movwf	??___ftdiv
  8628  0F0F  0841               	movf	??___ftdiv,w
  8629  0F10  00C5               	movwf	___ftdiv@cntr
  8630  0F11                     l3023:	
  8631  0F11  3001               	movlw	1
  8632  0F12                     u3115:	
  8633  0F12  35C6               	lslf	___ftdiv@f3,f
  8634  0F13  0DC7               	rlf	___ftdiv@f3+1,f
  8635  0F14  0DC8               	rlf	___ftdiv@f3+2,f
  8636  0F15  0B89               	decfsz	9,f
  8637  0F16  2F12               	goto	u3115
  8638  0F17  083D               	movf	___ftdiv@f2+2,w
  8639  0F18  0240               	subwf	___ftdiv@f1+2,w
  8640  0F19  1D03               	skipz
  8641  0F1A  2F21               	goto	u3125
  8642  0F1B  083C               	movf	___ftdiv@f2+1,w
  8643  0F1C  023F               	subwf	___ftdiv@f1+1,w
  8644  0F1D  1D03               	skipz
  8645  0F1E  2F21               	goto	u3125
  8646  0F1F  083B               	movf	___ftdiv@f2,w
  8647  0F20  023E               	subwf	___ftdiv@f1,w
  8648  0F21                     u3125:	
  8649  0F21  1C03               	skipc
  8650  0F22  2F2A               	goto	l3031
  8651  0F23  083B               	movf	___ftdiv@f2,w
  8652  0F24  02BE               	subwf	___ftdiv@f1,f
  8653  0F25  083C               	movf	___ftdiv@f2+1,w
  8654  0F26  3BBF               	subwfb	___ftdiv@f1+1,f
  8655  0F27  083D               	movf	___ftdiv@f2+2,w
  8656  0F28  3BC0               	subwfb	___ftdiv@f1+2,f
  8657  0F29  1446               	bsf	___ftdiv@f3,0
  8658  0F2A                     l3031:	
  8659  0F2A  3001               	movlw	1
  8660  0F2B                     u3135:	
  8661  0F2B  35BE               	lslf	___ftdiv@f1,f
  8662  0F2C  0DBF               	rlf	___ftdiv@f1+1,f
  8663  0F2D  0DC0               	rlf	___ftdiv@f1+2,f
  8664  0F2E  0B89               	decfsz	9,f
  8665  0F2F  2F2B               	goto	u3135
  8666  0F30  3001               	movlw	1
  8667  0F31  02C5               	subwf	___ftdiv@cntr,f
  8668  0F32  1D03               	btfss	3,2
  8669  0F33  2F11               	goto	l3023
  8670  0F34  0846               	movf	___ftdiv@f3,w
  8671  0F35  00A0               	movwf	___ftpack@arg
  8672  0F36  0847               	movf	___ftdiv@f3+1,w
  8673  0F37  00A1               	movwf	___ftpack@arg+1
  8674  0F38  0848               	movf	___ftdiv@f3+2,w
  8675  0F39  00A2               	movwf	___ftpack@arg+2
  8676  0F3A  0849               	movf	___ftdiv@exp,w
  8677  0F3B  00C1               	movwf	??___ftdiv
  8678  0F3C  0841               	movf	??___ftdiv,w
  8679  0F3D  00A3               	movwf	___ftpack@exp
  8680  0F3E  084A               	movf	___ftdiv@sign,w
  8681  0F3F  00C2               	movwf	??___ftdiv+1
  8682  0F40  0842               	movf	??___ftdiv+1,w
  8683  0F41  00A4               	movwf	___ftpack@sign
  8684  0F42  318C  249D         	fcall	___ftpack
  8685  0F44  0020               	movlb	0	; select bank0
  8686  0F45  0820               	movf	?___ftpack,w
  8687  0F46  00BB               	movwf	?___ftdiv
  8688  0F47  0821               	movf	?___ftpack+1,w
  8689  0F48  00BC               	movwf	?___ftdiv+1
  8690  0F49  0822               	movf	?___ftpack+2,w
  8691  0F4A  00BD               	movwf	?___ftdiv+2
  8692  0F4B  0008               	return
  8693  0F4C                     __end_of___ftdiv:	
  8694                           
  8695                           	psect	text36
  8696  04AF                     __ptext36:	
  8697 ;; *************** function ___ftadd *****************
  8698 ;; Defined at:
  8699 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\ftadd.c"
  8700 ;; Parameters:    Size  Location     Type
  8701 ;;  f1              3   14[BANK0 ] float 
  8702 ;;  f2              3   17[BANK0 ] float 
  8703 ;; Auto vars:     Size  Location     Type
  8704 ;;  exp1            1   26[BANK0 ] unsigned char 
  8705 ;;  exp2            1   25[BANK0 ] unsigned char 
  8706 ;;  sign            1   24[BANK0 ] unsigned char 
  8707 ;; Return value:  Size  Location     Type
  8708 ;;                  3   14[BANK0 ] float 
  8709 ;; Registers used:
  8710 ;;		wreg, status,2, status,0, pclath, cstack
  8711 ;; Tracked objects:
  8712 ;;		On entry : 0/0
  8713 ;;		On exit  : 0/0
  8714 ;;		Unchanged: 0/0
  8715 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8716 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8717 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8718 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8719 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8720 ;;Total ram usage:       13 bytes
  8721 ;; Hardware stack levels used:    1
  8722 ;; Hardware stack levels required when called:    8
  8723 ;; This function calls:
  8724 ;;		___ftpack
  8725 ;; This function is called by:
  8726 ;;		_getADCValue
  8727 ;;		_loop
  8728 ;;		___ftsub
  8729 ;; This function uses a non-reentrant model
  8730 ;;
  8731                           
  8732                           
  8733                           ;psect for function ___ftadd
  8734  04AF                     ___ftadd:	
  8735                           
  8736                           ;incstack = 0
  8737                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
  8738  04AF  0020               	movlb	0	; select bank0
  8739  04B0  082E               	movf	___ftadd@f1,w
  8740  04B1  00B4               	movwf	??___ftadd
  8741  04B2  082F               	movf	___ftadd@f1+1,w
  8742  04B3  00B5               	movwf	??___ftadd+1
  8743  04B4  0830               	movf	___ftadd@f1+2,w
  8744  04B5  00B6               	movwf	??___ftadd+2
  8745  04B6  1003               	clrc
  8746  04B7  0D35               	rlf	??___ftadd+1,w
  8747  04B8  0D36               	rlf	??___ftadd+2,w
  8748  04B9  00B7               	movwf	??___ftadd+3
  8749  04BA  0837               	movf	??___ftadd+3,w
  8750  04BB  00BA               	movwf	___ftadd@exp1
  8751  04BC  0831               	movf	___ftadd@f2,w
  8752  04BD  00B4               	movwf	??___ftadd
  8753  04BE  0832               	movf	___ftadd@f2+1,w
  8754  04BF  00B5               	movwf	??___ftadd+1
  8755  04C0  0833               	movf	___ftadd@f2+2,w
  8756  04C1  00B6               	movwf	??___ftadd+2
  8757  04C2  1003               	clrc
  8758  04C3  0D35               	rlf	??___ftadd+1,w
  8759  04C4  0D36               	rlf	??___ftadd+2,w
  8760  04C5  00B7               	movwf	??___ftadd+3
  8761  04C6  0837               	movf	??___ftadd+3,w
  8762  04C7  00B9               	movwf	___ftadd@exp2
  8763  04C8  083A               	movf	___ftadd@exp1,w
  8764  04C9  1903               	btfsc	3,2
  8765  04CA  2CD7               	goto	l2555
  8766  04CB  0839               	movf	___ftadd@exp2,w
  8767  04CC  023A               	subwf	___ftadd@exp1,w
  8768  04CD  1803               	skipnc
  8769  04CE  2CDE               	goto	l2559
  8770  04CF  033A               	decf	___ftadd@exp1,w
  8771  04D0  3AFF               	xorlw	255
  8772  04D1  0739               	addwf	___ftadd@exp2,w
  8773  04D2  00B4               	movwf	??___ftadd
  8774  04D3  3019               	movlw	25
  8775  04D4  0234               	subwf	??___ftadd,w
  8776  04D5  1C03               	skipc
  8777  04D6  2CDE               	goto	l2559
  8778  04D7                     l2555:	
  8779  04D7  0831               	movf	___ftadd@f2,w
  8780  04D8  00AE               	movwf	?___ftadd
  8781  04D9  0832               	movf	___ftadd@f2+1,w
  8782  04DA  00AF               	movwf	?___ftadd+1
  8783  04DB  0833               	movf	___ftadd@f2+2,w
  8784  04DC  00B0               	movwf	?___ftadd+2
  8785  04DD  0008               	return
  8786  04DE                     l2559:	
  8787  04DE  0839               	movf	___ftadd@exp2,w
  8788  04DF  1903               	btfsc	3,2
  8789  04E0  0008               	return
  8790  04E1  083A               	movf	___ftadd@exp1,w
  8791  04E2  0239               	subwf	___ftadd@exp2,w
  8792  04E3  1803               	skipnc
  8793  04E4  2CED               	goto	l2565
  8794  04E5  0339               	decf	___ftadd@exp2,w
  8795  04E6  3AFF               	xorlw	255
  8796  04E7  073A               	addwf	___ftadd@exp1,w
  8797  04E8  00B4               	movwf	??___ftadd
  8798  04E9  3019               	movlw	25
  8799  04EA  0234               	subwf	??___ftadd,w
  8800  04EB  1803               	btfsc	3,0
  8801  04EC  0008               	return
  8802  04ED                     l2565:	
  8803  04ED  3006               	movlw	6
  8804  04EE  00B4               	movwf	??___ftadd
  8805  04EF  0834               	movf	??___ftadd,w
  8806  04F0  00B8               	movwf	___ftadd@sign
  8807  04F1  1BB0               	btfsc	___ftadd@f1+2,7
  8808  04F2  17B8               	bsf	___ftadd@sign,7
  8809  04F3  1BB3               	btfsc	___ftadd@f2+2,7
  8810  04F4  1738               	bsf	___ftadd@sign,6
  8811  04F5  17AF               	bsf	___ftadd@f1+1,7
  8812  04F6  30FF               	movlw	255
  8813  04F7  05AE               	andwf	___ftadd@f1,f
  8814  04F8  30FF               	movlw	255
  8815  04F9  05AF               	andwf	___ftadd@f1+1,f
  8816  04FA  3000               	movlw	0
  8817  04FB  05B0               	andwf	___ftadd@f1+2,f
  8818  04FC  17B2               	bsf	___ftadd@f2+1,7
  8819  04FD  30FF               	movlw	255
  8820  04FE  05B1               	andwf	___ftadd@f2,f
  8821  04FF  30FF               	movlw	255
  8822  0500  05B2               	andwf	___ftadd@f2+1,f
  8823  0501  3000               	movlw	0
  8824  0502  05B3               	andwf	___ftadd@f2+2,f
  8825  0503  0839               	movf	___ftadd@exp2,w
  8826  0504  023A               	subwf	___ftadd@exp1,w
  8827  0505  1803               	skipnc
  8828  0506  2D29               	goto	l2587
  8829  0507                     l2577:	
  8830  0507  3001               	movlw	1
  8831  0508                     u2305:	
  8832  0508  35B1               	lslf	___ftadd@f2,f
  8833  0509  0DB2               	rlf	___ftadd@f2+1,f
  8834  050A  0DB3               	rlf	___ftadd@f2+2,f
  8835  050B  0B89               	decfsz	9,f
  8836  050C  2D08               	goto	u2305
  8837  050D  3001               	movlw	1
  8838  050E  02B9               	subwf	___ftadd@exp2,f
  8839  050F  0839               	movf	___ftadd@exp2,w
  8840  0510  063A               	xorwf	___ftadd@exp1,w
  8841  0511  1903               	skipnz
  8842  0512  2D24               	goto	l2585
  8843  0513  3001               	movlw	1
  8844  0514  02B8               	subwf	___ftadd@sign,f
  8845  0515  0838               	movf	___ftadd@sign,w
  8846  0516  3907               	andlw	7
  8847  0517  1903               	btfsc	3,2
  8848  0518  2D24               	goto	l2585
  8849  0519  2D07               	goto	l2577
  8850  051A                     l2583:	
  8851  051A  3001               	movlw	1
  8852  051B                     u2335:	
  8853  051B  36B0               	lsrf	___ftadd@f1+2,f
  8854  051C  0CAF               	rrf	___ftadd@f1+1,f
  8855  051D  0CAE               	rrf	___ftadd@f1,f
  8856  051E  0B89               	decfsz	9,f
  8857  051F  2D1B               	goto	u2335
  8858  0520  3001               	movlw	1
  8859  0521  00B4               	movwf	??___ftadd
  8860  0522  0834               	movf	??___ftadd,w
  8861  0523  07BA               	addwf	___ftadd@exp1,f
  8862  0524                     l2585:	
  8863  0524  083A               	movf	___ftadd@exp1,w
  8864  0525  0639               	xorwf	___ftadd@exp2,w
  8865  0526  1903               	btfsc	3,2
  8866  0527  2D4E               	goto	l715
  8867  0528  2D1A               	goto	l2583
  8868  0529                     l2587:	
  8869  0529  083A               	movf	___ftadd@exp1,w
  8870  052A  0239               	subwf	___ftadd@exp2,w
  8871  052B  1803               	skipnc
  8872  052C  2D4E               	goto	l715
  8873  052D                     l2589:	
  8874  052D  3001               	movlw	1
  8875  052E                     u2365:	
  8876  052E  35AE               	lslf	___ftadd@f1,f
  8877  052F  0DAF               	rlf	___ftadd@f1+1,f
  8878  0530  0DB0               	rlf	___ftadd@f1+2,f
  8879  0531  0B89               	decfsz	9,f
  8880  0532  2D2E               	goto	u2365
  8881  0533  3001               	movlw	1
  8882  0534  02BA               	subwf	___ftadd@exp1,f
  8883  0535  0839               	movf	___ftadd@exp2,w
  8884  0536  063A               	xorwf	___ftadd@exp1,w
  8885  0537  1903               	skipnz
  8886  0538  2D4A               	goto	l2597
  8887  0539  3001               	movlw	1
  8888  053A  02B8               	subwf	___ftadd@sign,f
  8889  053B  0838               	movf	___ftadd@sign,w
  8890  053C  3907               	andlw	7
  8891  053D  1903               	btfsc	3,2
  8892  053E  2D4A               	goto	l2597
  8893  053F  2D2D               	goto	l2589
  8894  0540                     l2595:	
  8895  0540  3001               	movlw	1
  8896  0541                     u2395:	
  8897  0541  36B3               	lsrf	___ftadd@f2+2,f
  8898  0542  0CB2               	rrf	___ftadd@f2+1,f
  8899  0543  0CB1               	rrf	___ftadd@f2,f
  8900  0544  0B89               	decfsz	9,f
  8901  0545  2D41               	goto	u2395
  8902  0546  3001               	movlw	1
  8903  0547  00B4               	movwf	??___ftadd
  8904  0548  0834               	movf	??___ftadd,w
  8905  0549  07B9               	addwf	___ftadd@exp2,f
  8906  054A                     l2597:	
  8907  054A  083A               	movf	___ftadd@exp1,w
  8908  054B  0639               	xorwf	___ftadd@exp2,w
  8909  054C  1D03               	skipz
  8910  054D  2D40               	goto	l2595
  8911  054E                     l715:	
  8912  054E  1FB8               	btfss	___ftadd@sign,7
  8913  054F  2D60               	goto	l2601
  8914  0550  30FF               	movlw	255
  8915  0551  06AE               	xorwf	___ftadd@f1,f
  8916  0552  30FF               	movlw	255
  8917  0553  06AF               	xorwf	___ftadd@f1+1,f
  8918  0554  30FF               	movlw	255
  8919  0555  06B0               	xorwf	___ftadd@f1+2,f
  8920  0556  3001               	movlw	1
  8921  0557  07AE               	addwf	___ftadd@f1,f
  8922  0558  3000               	movlw	0
  8923  0559  1803               	skipnc
  8924  055A  3001               	movlw	1
  8925  055B  07AF               	addwf	___ftadd@f1+1,f
  8926  055C  3000               	movlw	0
  8927  055D  1803               	skipnc
  8928  055E  3001               	movlw	1
  8929  055F  07B0               	addwf	___ftadd@f1+2,f
  8930  0560                     l2601:	
  8931  0560  1F38               	btfss	___ftadd@sign,6
  8932  0561  2D72               	goto	l2605
  8933  0562  30FF               	movlw	255
  8934  0563  06B1               	xorwf	___ftadd@f2,f
  8935  0564  30FF               	movlw	255
  8936  0565  06B2               	xorwf	___ftadd@f2+1,f
  8937  0566  30FF               	movlw	255
  8938  0567  06B3               	xorwf	___ftadd@f2+2,f
  8939  0568  3001               	movlw	1
  8940  0569  07B1               	addwf	___ftadd@f2,f
  8941  056A  3000               	movlw	0
  8942  056B  1803               	skipnc
  8943  056C  3001               	movlw	1
  8944  056D  07B2               	addwf	___ftadd@f2+1,f
  8945  056E  3000               	movlw	0
  8946  056F  1803               	skipnc
  8947  0570  3001               	movlw	1
  8948  0571  07B3               	addwf	___ftadd@f2+2,f
  8949  0572                     l2605:	
  8950  0572  01B8               	clrf	___ftadd@sign
  8951  0573  082E               	movf	___ftadd@f1,w
  8952  0574  07B1               	addwf	___ftadd@f2,f
  8953  0575  082F               	movf	___ftadd@f1+1,w
  8954  0576  3DB2               	addwfc	___ftadd@f2+1,f
  8955  0577  0830               	movf	___ftadd@f1+2,w
  8956  0578  3DB3               	addwfc	___ftadd@f2+2,f
  8957  0579  1FB3               	btfss	___ftadd@f2+2,7
  8958  057A  2D8D               	goto	l2615
  8959  057B  30FF               	movlw	255
  8960  057C  06B1               	xorwf	___ftadd@f2,f
  8961  057D  30FF               	movlw	255
  8962  057E  06B2               	xorwf	___ftadd@f2+1,f
  8963  057F  30FF               	movlw	255
  8964  0580  06B3               	xorwf	___ftadd@f2+2,f
  8965  0581  3001               	movlw	1
  8966  0582  07B1               	addwf	___ftadd@f2,f
  8967  0583  3000               	movlw	0
  8968  0584  1803               	skipnc
  8969  0585  3001               	movlw	1
  8970  0586  07B2               	addwf	___ftadd@f2+1,f
  8971  0587  3000               	movlw	0
  8972  0588  1803               	skipnc
  8973  0589  3001               	movlw	1
  8974  058A  07B3               	addwf	___ftadd@f2+2,f
  8975  058B  01B8               	clrf	___ftadd@sign
  8976  058C  0AB8               	incf	___ftadd@sign,f
  8977  058D                     l2615:	
  8978  058D  0831               	movf	___ftadd@f2,w
  8979  058E  00A0               	movwf	___ftpack@arg
  8980  058F  0832               	movf	___ftadd@f2+1,w
  8981  0590  00A1               	movwf	___ftpack@arg+1
  8982  0591  0833               	movf	___ftadd@f2+2,w
  8983  0592  00A2               	movwf	___ftpack@arg+2
  8984  0593  083A               	movf	___ftadd@exp1,w
  8985  0594  00B4               	movwf	??___ftadd
  8986  0595  0834               	movf	??___ftadd,w
  8987  0596  00A3               	movwf	___ftpack@exp
  8988  0597  0838               	movf	___ftadd@sign,w
  8989  0598  00B5               	movwf	??___ftadd+1
  8990  0599  0835               	movf	??___ftadd+1,w
  8991  059A  00A4               	movwf	___ftpack@sign
  8992  059B  318C  249D         	fcall	___ftpack
  8993  059D  0020               	movlb	0	; select bank0
  8994  059E  0820               	movf	?___ftpack,w
  8995  059F  00AE               	movwf	?___ftadd
  8996  05A0  0821               	movf	?___ftpack+1,w
  8997  05A1  00AF               	movwf	?___ftadd+1
  8998  05A2  0822               	movf	?___ftpack+2,w
  8999  05A3  00B0               	movwf	?___ftadd+2
  9000  05A4  0008               	return
  9001  05A5                     __end_of___ftadd:	
  9002                           
  9003                           	psect	text37
  9004  0842                     __ptext37:	
  9005 ;; *************** function ___awtoft *****************
  9006 ;; Defined at:
  9007 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\awtoft.c"
  9008 ;; Parameters:    Size  Location     Type
  9009 ;;  c               2    8[BANK0 ] int 
  9010 ;; Auto vars:     Size  Location     Type
  9011 ;;  sign            1   13[BANK0 ] unsigned char 
  9012 ;; Return value:  Size  Location     Type
  9013 ;;                  3    8[BANK0 ] float 
  9014 ;; Registers used:
  9015 ;;		wreg, status,2, status,0, pclath, cstack
  9016 ;; Tracked objects:
  9017 ;;		On entry : 0/0
  9018 ;;		On exit  : 0/0
  9019 ;;		Unchanged: 0/0
  9020 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9021 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9022 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9023 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9024 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9025 ;;Total ram usage:        6 bytes
  9026 ;; Hardware stack levels used:    1
  9027 ;; Hardware stack levels required when called:    8
  9028 ;; This function calls:
  9029 ;;		___ftpack
  9030 ;; This function is called by:
  9031 ;;		_getADCValue
  9032 ;;		_loop
  9033 ;; This function uses a non-reentrant model
  9034 ;;
  9035                           
  9036                           
  9037                           ;psect for function ___awtoft
  9038  0842                     ___awtoft:	
  9039                           
  9040                           ;incstack = 0
  9041                           ; Regs used in ___awtoft: [wreg+status,2+status,0+pclath+cstack]
  9042  0842  0020               	movlb	0	; select bank0
  9043  0843  01AD               	clrf	___awtoft@sign
  9044  0844  1FA9               	btfss	___awtoft@c+1,7
  9045  0845  284D               	goto	l2993
  9046  0846  09A8               	comf	___awtoft@c,f
  9047  0847  09A9               	comf	___awtoft@c+1,f
  9048  0848  0AA8               	incf	___awtoft@c,f
  9049  0849  1903               	skipnz
  9050  084A  0AA9               	incf	___awtoft@c+1,f
  9051  084B  01AD               	clrf	___awtoft@sign
  9052  084C  0AAD               	incf	___awtoft@sign,f
  9053  084D                     l2993:	
  9054  084D  0828               	movf	___awtoft@c,w
  9055  084E  00A0               	movwf	___ftpack@arg
  9056  084F  0829               	movf	___awtoft@c+1,w
  9057  0850  00A1               	movwf	___ftpack@arg+1
  9058  0851  01A2               	clrf	___ftpack@arg+2
  9059  0852  308E               	movlw	142
  9060  0853  00AB               	movwf	??___awtoft
  9061  0854  082B               	movf	??___awtoft,w
  9062  0855  00A3               	movwf	___ftpack@exp
  9063  0856  082D               	movf	___awtoft@sign,w
  9064  0857  00AC               	movwf	??___awtoft+1
  9065  0858  082C               	movf	??___awtoft+1,w
  9066  0859  00A4               	movwf	___ftpack@sign
  9067  085A  318C  249D         	fcall	___ftpack
  9068  085C  0020               	movlb	0	; select bank0
  9069  085D  0820               	movf	?___ftpack,w
  9070  085E  00A8               	movwf	?___awtoft
  9071  085F  0821               	movf	?___ftpack+1,w
  9072  0860  00A9               	movwf	?___awtoft+1
  9073  0861  0822               	movf	?___ftpack+2,w
  9074  0862  00AA               	movwf	?___awtoft+2
  9075  0863  0008               	return
  9076  0864                     __end_of___awtoft:	
  9077                           
  9078                           	psect	text38
  9079  16DD                     __ptext38:	
  9080 ;; *************** function _checkTXPower *****************
  9081 ;; Defined at:
  9082 ;;		line 157 in file "main.c"
  9083 ;; Parameters:    Size  Location     Type
  9084 ;;		None
  9085 ;; Auto vars:     Size  Location     Type
  9086 ;;  rxPacket        1    8[BANK0 ] PTR struct .
  9087 ;;		 -> RXPacket(33), 
  9088 ;; Return value:  Size  Location     Type
  9089 ;;                  1    wreg      void 
  9090 ;; Registers used:
  9091 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9092 ;; Tracked objects:
  9093 ;;		On entry : 0/0
  9094 ;;		On exit  : 0/0
  9095 ;;		Unchanged: 0/0
  9096 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9097 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9098 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9099 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9100 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9101 ;;Total ram usage:        2 bytes
  9102 ;; Hardware stack levels used:    1
  9103 ;; Hardware stack levels required when called:   11
  9104 ;; This function calls:
  9105 ;;		_nrf24l01ChangeTXPower
  9106 ;;		_nrf24l01GetRXPacket
  9107 ;; This function is called by:
  9108 ;;		_loop
  9109 ;; This function uses a non-reentrant model
  9110 ;;
  9111                           
  9112                           
  9113                           ;psect for function _checkTXPower
  9114  16DD                     _checkTXPower:	
  9115                           
  9116                           ;main.c: 158: nrf24l01Packet_t * rxPacket = nrf24l01GetRXPacket();
  9117                           
  9118                           ;incstack = 0
  9119                           ; Regs used in _checkTXPower: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9120  16DD  3187  27FE  3196   	fcall	_nrf24l01GetRXPacket
  9121  16E0  0020               	movlb	0	; select bank0
  9122  16E1  00A7               	movwf	??_checkTXPower
  9123  16E2  0827               	movf	??_checkTXPower,w
  9124  16E3  00A8               	movwf	checkTXPower@rxPacket
  9125                           
  9126                           ;main.c: 160: if (rxPacket->packetData.ACKRPD){
  9127  16E4  0828               	movf	checkTXPower@rxPacket,w
  9128  16E5  0086               	movwf	6
  9129  16E6  3001               	movlw	1	; select bank2/3
  9130  16E7  0087               	movwf	7
  9131  16E8  1C81               	btfss	1,1
  9132  16E9  0008               	return
  9133                           
  9134                           ;main.c: 161: nrf24l01ChangeTXPower(-1);
  9135  16EA  30FF               	movlw	255
  9136  16EB  00A3               	movwf	nrf24l01ChangeTXPower@addPower
  9137  16EC  30FF               	movlw	255
  9138  16ED  00A4               	movwf	nrf24l01ChangeTXPower@addPower+1
  9139  16EE  318A  22AA         	fcall	_nrf24l01ChangeTXPower
  9140  16F0  0008               	return
  9141  16F1                     __end_of_checkTXPower:	
  9142                           
  9143                           	psect	text39
  9144  07FE                     __ptext39:	
  9145 ;; *************** function _nrf24l01GetRXPacket *****************
  9146 ;; Defined at:
  9147 ;;		line 137 in file "nrf24l01.c"
  9148 ;; Parameters:    Size  Location     Type
  9149 ;;		None
  9150 ;; Auto vars:     Size  Location     Type
  9151 ;;		None
  9152 ;; Return value:  Size  Location     Type
  9153 ;;                  1    wreg      PTR struct .
  9154 ;; Registers used:
  9155 ;;		wreg
  9156 ;; Tracked objects:
  9157 ;;		On entry : 0/0
  9158 ;;		On exit  : 0/0
  9159 ;;		Unchanged: 0/0
  9160 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9161 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9162 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9163 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9164 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9165 ;;Total ram usage:        0 bytes
  9166 ;; Hardware stack levels used:    1
  9167 ;; Hardware stack levels required when called:    7
  9168 ;; This function calls:
  9169 ;;		Nothing
  9170 ;; This function is called by:
  9171 ;;		_handleRXData
  9172 ;;		_checkTXPower
  9173 ;; This function uses a non-reentrant model
  9174 ;;
  9175                           
  9176                           
  9177                           ;psect for function _nrf24l01GetRXPacket
  9178  07FE                     _nrf24l01GetRXPacket:	
  9179                           
  9180                           ;nrf24l01.c: 138: return &RXPacket;
  9181                           
  9182                           ;incstack = 0
  9183                           ; Regs used in _nrf24l01GetRXPacket: [wreg]
  9184  07FE  30A0               	movlw	(low (_RXPacket| (0+256)))& (0+255)
  9185  07FF  0008               	return
  9186  0800                     __end_of_nrf24l01GetRXPacket:	
  9187                           
  9188                           	psect	text40
  9189  0AAA                     __ptext40:	
  9190 ;; *************** function _nrf24l01ChangeTXPower *****************
  9191 ;; Defined at:
  9192 ;;		line 33 in file "nrf24l01.c"
  9193 ;; Parameters:    Size  Location     Type
  9194 ;;  addPower        2    3[BANK0 ] int 
  9195 ;; Auto vars:     Size  Location     Type
  9196 ;;  rfSetup         1    6[BANK0 ] struct .
  9197 ;; Return value:  Size  Location     Type
  9198 ;;                  1    wreg      void 
  9199 ;; Registers used:
  9200 ;;		wreg, status,2, status,0, pclath, cstack
  9201 ;; Tracked objects:
  9202 ;;		On entry : 0/0
  9203 ;;		On exit  : 0/0
  9204 ;;		Unchanged: 0/0
  9205 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9206 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9207 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9208 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9209 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9210 ;;Total ram usage:        4 bytes
  9211 ;; Hardware stack levels used:    1
  9212 ;; Hardware stack levels required when called:   10
  9213 ;; This function calls:
  9214 ;;		_nrf24l01Send
  9215 ;; This function is called by:
  9216 ;;		_checkTXPower
  9217 ;;		_nrf24l01SendPacket
  9218 ;; This function uses a non-reentrant model
  9219 ;;
  9220                           
  9221                           
  9222                           ;psect for function _nrf24l01ChangeTXPower
  9223  0AAA                     _nrf24l01ChangeTXPower:	
  9224                           
  9225                           ;nrf24l01.c: 35: n_RF_SETUP_t rfSetup;;nrf24l01.c: 36: rfSetup.byte = nrf24l01Send((unsi
      +                          gned) 0b00000000 | (unsigned) 0x06, 0);
  9226                           
  9227                           ;incstack = 0
  9228                           ; Regs used in _nrf24l01ChangeTXPower: [wreg+status,2+status,0+pclath+cstack]
  9229  0AAA  0020               	movlb	0	; select bank0
  9230  0AAB  01A0               	clrf	nrf24l01Send@data
  9231  0AAC  3006               	movlw	6
  9232  0AAD  3188  2001  318A   	fcall	_nrf24l01Send
  9233  0AB0  0020               	movlb	0	; select bank0
  9234  0AB1  00A5               	movwf	??_nrf24l01ChangeTXPower
  9235  0AB2  0825               	movf	??_nrf24l01ChangeTXPower,w
  9236  0AB3  00A6               	movwf	nrf24l01ChangeTXPower@rfSetup
  9237                           
  9238                           ;nrf24l01.c: 38: if (addPower > 0){
  9239  0AB4  0824               	movf	nrf24l01ChangeTXPower@addPower+1,w
  9240  0AB5  3A80               	xorlw	128
  9241  0AB6  00A5               	movwf	??_nrf24l01ChangeTXPower
  9242  0AB7  3080               	movlw	128
  9243  0AB8  0225               	subwf	??_nrf24l01ChangeTXPower,w
  9244  0AB9  1D03               	skipz
  9245  0ABA  2ABD               	goto	u1805
  9246  0ABB  3001               	movlw	1
  9247  0ABC  0223               	subwf	nrf24l01ChangeTXPower@addPower,w
  9248  0ABD                     u1805:	
  9249  0ABD  1C03               	skipc
  9250  0ABE  2ACF               	goto	l2341
  9251                           
  9252                           ;nrf24l01.c: 39: if (rfSetup.RF_PWR < 3){
  9253  0ABF  0020               	movlb	0	; select bank0
  9254  0AC0  0C26               	rrf	nrf24l01ChangeTXPower@rfSetup,w
  9255  0AC1  3903               	andlw	3
  9256  0AC2  3A03               	xorlw	3
  9257  0AC3  1903               	skipnz
  9258  0AC4  2ACF               	goto	l2341
  9259                           
  9260                           ;nrf24l01.c: 40: rfSetup.RF_PWR++;
  9261  0AC5  0C26               	rrf	nrf24l01ChangeTXPower@rfSetup,w
  9262  0AC6  3903               	andlw	3
  9263  0AC7  00A5               	movwf	??_nrf24l01ChangeTXPower
  9264  0AC8  0AA5               	incf	??_nrf24l01ChangeTXPower,f
  9265  0AC9  0DA5               	rlf	??_nrf24l01ChangeTXPower,f
  9266  0ACA  0826               	movf	nrf24l01ChangeTXPower@rfSetup,w
  9267  0ACB  0625               	xorwf	??_nrf24l01ChangeTXPower,w
  9268  0ACC  39F9               	andlw	-7
  9269  0ACD  0625               	xorwf	??_nrf24l01ChangeTXPower,w
  9270  0ACE  00A6               	movwf	nrf24l01ChangeTXPower@rfSetup
  9271  0ACF                     l2341:	
  9272                           
  9273                           ;nrf24l01.c: 41: };nrf24l01.c: 42: };nrf24l01.c: 44: if (addPower < 0){
  9274  0ACF  0020               	movlb	0	; select bank0
  9275  0AD0  1FA4               	btfss	nrf24l01ChangeTXPower@addPower+1,7
  9276  0AD1  2AE1               	goto	l2347
  9277                           
  9278                           ;nrf24l01.c: 45: if (rfSetup.RF_PWR > 0){
  9279  0AD2  0C26               	rrf	nrf24l01ChangeTXPower@rfSetup,w
  9280  0AD3  3903               	andlw	3
  9281  0AD4  3A00               	xorlw	0
  9282  0AD5  1903               	skipnz
  9283  0AD6  2AE1               	goto	l2347
  9284                           
  9285                           ;nrf24l01.c: 46: rfSetup.RF_PWR--;
  9286  0AD7  0C26               	rrf	nrf24l01ChangeTXPower@rfSetup,w
  9287  0AD8  3903               	andlw	3
  9288  0AD9  00A5               	movwf	??_nrf24l01ChangeTXPower
  9289  0ADA  03A5               	decf	??_nrf24l01ChangeTXPower,f
  9290  0ADB  0DA5               	rlf	??_nrf24l01ChangeTXPower,f
  9291  0ADC  0826               	movf	nrf24l01ChangeTXPower@rfSetup,w
  9292  0ADD  0625               	xorwf	??_nrf24l01ChangeTXPower,w
  9293  0ADE  39F9               	andlw	-7
  9294  0ADF  0625               	xorwf	??_nrf24l01ChangeTXPower,w
  9295  0AE0  00A6               	movwf	nrf24l01ChangeTXPower@rfSetup
  9296  0AE1                     l2347:	
  9297                           
  9298                           ;nrf24l01.c: 47: };nrf24l01.c: 48: };nrf24l01.c: 50: nrf24l01Send((unsigned) 0b00100000 
      +                          | (unsigned) 0x06, rfSetup.byte);
  9299  0AE1  0826               	movf	nrf24l01ChangeTXPower@rfSetup,w
  9300  0AE2  00A5               	movwf	??_nrf24l01ChangeTXPower
  9301  0AE3  0825               	movf	??_nrf24l01ChangeTXPower,w
  9302  0AE4  00A0               	movwf	nrf24l01Send@data
  9303  0AE5  3026               	movlw	38
  9304  0AE6  3188  2001         	fcall	_nrf24l01Send
  9305  0AE8  0008               	return
  9306  0AE9                     __end_of_nrf24l01ChangeTXPower:	
  9307                           
  9308                           	psect	text41
  9309  0801                     __ptext41:	
  9310 ;; *************** function _nrf24l01Send *****************
  9311 ;; Defined at:
  9312 ;;		line 9 in file "nrf24l01.c"
  9313 ;; Parameters:    Size  Location     Type
  9314 ;;  command         1    wreg     unsigned char 
  9315 ;;  data            1    0[BANK0 ] unsigned char 
  9316 ;; Auto vars:     Size  Location     Type
  9317 ;;  command         1    2[BANK0 ] unsigned char 
  9318 ;; Return value:  Size  Location     Type
  9319 ;;                  1    wreg      unsigned char 
  9320 ;; Registers used:
  9321 ;;		wreg, status,2, status,0, pclath, cstack
  9322 ;; Tracked objects:
  9323 ;;		On entry : 0/0
  9324 ;;		On exit  : 0/0
  9325 ;;		Unchanged: 0/0
  9326 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9327 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9328 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9329 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9330 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9331 ;;Total ram usage:        3 bytes
  9332 ;; Hardware stack levels used:    1
  9333 ;; Hardware stack levels required when called:    9
  9334 ;; This function calls:
  9335 ;;		_enableInterrupts
  9336 ;;		_nrf24l01SPIEnd
  9337 ;;		_nrf24l01SPISend
  9338 ;;		_nrf24l01SPIStart
  9339 ;; This function is called by:
  9340 ;;		_loop
  9341 ;;		_nrf24l01ChangeTXPower
  9342 ;;		_nrf24l01SetRXMode
  9343 ;;		_nrf24l01SetRXPipe
  9344 ;;		_nrf24l01InitRegisters
  9345 ;; This function uses a non-reentrant model
  9346 ;;
  9347                           
  9348                           
  9349                           ;psect for function _nrf24l01Send
  9350  0801                     _nrf24l01Send:	
  9351                           
  9352                           ;incstack = 0
  9353                           ; Regs used in _nrf24l01Send: [wreg+status,2+status,0+pclath+cstack]
  9354                           ;nrf24l01Send@command stored from wreg
  9355  0801  0020               	movlb	0	; select bank0
  9356  0802  00A2               	movwf	nrf24l01Send@command
  9357                           
  9358                           ;nrf24l01.c: 12: enableInterrupts(0);
  9359  0803  3000               	movlw	0
  9360  0804  3196  2684  3188   	fcall	_enableInterrupts
  9361                           
  9362                           ;nrf24l01.c: 15: nrf24l01SPIStart();
  9363  0807  3196  268C  3188   	fcall	_nrf24l01SPIStart
  9364                           
  9365                           ;nrf24l01.c: 18: nrf24l01SPISend(command);
  9366  080A  0020               	movlb	0	; select bank0
  9367  080B  0822               	movf	nrf24l01Send@command,w
  9368  080C  3196  269D  3188   	fcall	_nrf24l01SPISend
  9369                           
  9370                           ;nrf24l01.c: 21: data = nrf24l01SPISend(data);
  9371  080F  0020               	movlb	0	; select bank0
  9372  0810  0820               	movf	nrf24l01Send@data,w
  9373  0811  3196  269D  3188   	fcall	_nrf24l01SPISend
  9374  0814  0020               	movlb	0	; select bank0
  9375  0815  00A1               	movwf	??_nrf24l01Send
  9376  0816  0821               	movf	??_nrf24l01Send,w
  9377  0817  00A0               	movwf	nrf24l01Send@data
  9378                           
  9379                           ;nrf24l01.c: 24: nrf24l01SPIEnd();
  9380  0818  3196  267D  3188   	fcall	_nrf24l01SPIEnd
  9381                           
  9382                           ;nrf24l01.c: 27: enableInterrupts(1);
  9383  081B  3001               	movlw	1
  9384  081C  3196  2684         	fcall	_enableInterrupts
  9385                           
  9386                           ;nrf24l01.c: 29: return data;
  9387  081E  0020               	movlb	0	; select bank0
  9388  081F  0820               	movf	nrf24l01Send@data,w
  9389  0820  0008               	return
  9390  0821                     __end_of_nrf24l01Send:	
  9391                           
  9392                           	psect	text42
  9393  1754                     __ptext42:	
  9394 ;; *************** function ___lbtoft *****************
  9395 ;; Defined at:
  9396 ;;		line 27 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\lbtoft.c"
  9397 ;; Parameters:    Size  Location     Type
  9398 ;;  c               1    wreg     unsigned char 
  9399 ;; Auto vars:     Size  Location     Type
  9400 ;;  c               1   15[BANK0 ] unsigned char 
  9401 ;; Return value:  Size  Location     Type
  9402 ;;                  3    8[BANK0 ] float 
  9403 ;; Registers used:
  9404 ;;		wreg, status,2, status,0, pclath, cstack
  9405 ;; Tracked objects:
  9406 ;;		On entry : 0/0
  9407 ;;		On exit  : 0/0
  9408 ;;		Unchanged: 0/0
  9409 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9410 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9411 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9412 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9413 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9414 ;;Total ram usage:        8 bytes
  9415 ;; Hardware stack levels used:    1
  9416 ;; Hardware stack levels required when called:    8
  9417 ;; This function calls:
  9418 ;;		___ftpack
  9419 ;; This function is called by:
  9420 ;;		_loop
  9421 ;;		_main
  9422 ;; This function uses a non-reentrant model
  9423 ;;
  9424                           
  9425                           
  9426                           ;psect for function ___lbtoft
  9427  1754                     ___lbtoft:	
  9428                           
  9429                           ;incstack = 0
  9430                           ; Regs used in ___lbtoft: [wreg+status,2+status,0+pclath+cstack]
  9431                           ;___lbtoft@c stored from wreg
  9432  1754  0020               	movlb	0	; select bank0
  9433  1755  00AF               	movwf	___lbtoft@c
  9434  1756  082F               	movf	___lbtoft@c,w
  9435  1757  00AB               	movwf	??___lbtoft
  9436  1758  01AC               	clrf	??___lbtoft+1
  9437  1759  01AD               	clrf	??___lbtoft+2
  9438  175A  082B               	movf	??___lbtoft,w
  9439  175B  00A0               	movwf	___ftpack@arg
  9440  175C  082C               	movf	??___lbtoft+1,w
  9441  175D  00A1               	movwf	___ftpack@arg+1
  9442  175E  082D               	movf	??___lbtoft+2,w
  9443  175F  00A2               	movwf	___ftpack@arg+2
  9444  1760  308E               	movlw	142
  9445  1761  00AE               	movwf	??___lbtoft+3
  9446  1762  082E               	movf	??___lbtoft+3,w
  9447  1763  00A3               	movwf	___ftpack@exp
  9448  1764  01A4               	clrf	___ftpack@sign
  9449  1765  318C  249D         	fcall	___ftpack
  9450  1767  0020               	movlb	0	; select bank0
  9451  1768  0820               	movf	?___ftpack,w
  9452  1769  00A8               	movwf	?___lbtoft
  9453  176A  0821               	movf	?___ftpack+1,w
  9454  176B  00A9               	movwf	?___lbtoft+1
  9455  176C  0822               	movf	?___ftpack+2,w
  9456  176D  00AA               	movwf	?___lbtoft+2
  9457  176E  0008               	return
  9458  176F                     __end_of___lbtoft:	
  9459                           
  9460                           	psect	text43
  9461  0C9D                     __ptext43:	
  9462 ;; *************** function ___ftpack *****************
  9463 ;; Defined at:
  9464 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\float.c"
  9465 ;; Parameters:    Size  Location     Type
  9466 ;;  arg             3    0[BANK0 ] unsigned um
  9467 ;;  exp             1    3[BANK0 ] unsigned char 
  9468 ;;  sign            1    4[BANK0 ] unsigned char 
  9469 ;; Auto vars:     Size  Location     Type
  9470 ;;		None
  9471 ;; Return value:  Size  Location     Type
  9472 ;;                  3    0[BANK0 ] float 
  9473 ;; Registers used:
  9474 ;;		wreg, status,2, status,0
  9475 ;; Tracked objects:
  9476 ;;		On entry : 0/0
  9477 ;;		On exit  : 0/0
  9478 ;;		Unchanged: 0/0
  9479 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9480 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9481 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9482 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9483 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9484 ;;Total ram usage:        8 bytes
  9485 ;; Hardware stack levels used:    1
  9486 ;; Hardware stack levels required when called:    7
  9487 ;; This function calls:
  9488 ;;		Nothing
  9489 ;; This function is called by:
  9490 ;;		___awtoft
  9491 ;;		___ftadd
  9492 ;;		___ftdiv
  9493 ;;		___ftmul
  9494 ;;		___lbtoft
  9495 ;;		___lltoft
  9496 ;; This function uses a non-reentrant model
  9497 ;;
  9498                           
  9499                           
  9500                           ;psect for function ___ftpack
  9501  0C9D                     ___ftpack:	
  9502                           
  9503                           ;incstack = 0
  9504                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
  9505  0C9D  0020               	movlb	0	; select bank0
  9506  0C9E  0823               	movf	___ftpack@exp,w
  9507  0C9F  1903               	btfsc	3,2
  9508  0CA0  2CA6               	goto	l2377
  9509  0CA1  0822               	movf	___ftpack@arg+2,w
  9510  0CA2  0421               	iorwf	___ftpack@arg+1,w
  9511  0CA3  0420               	iorwf	___ftpack@arg,w
  9512  0CA4  1D03               	skipz
  9513  0CA5  2CB7               	goto	l2383
  9514  0CA6                     l2377:	
  9515  0CA6  3000               	movlw	0
  9516  0CA7  00A0               	movwf	?___ftpack
  9517  0CA8  3000               	movlw	0
  9518  0CA9  00A1               	movwf	?___ftpack+1
  9519  0CAA  3000               	movlw	0
  9520  0CAB  00A2               	movwf	?___ftpack+2
  9521  0CAC  0008               	return
  9522  0CAD                     l2381:	
  9523  0CAD  3001               	movlw	1
  9524  0CAE  00A5               	movwf	??___ftpack
  9525  0CAF  0825               	movf	??___ftpack,w
  9526  0CB0  07A3               	addwf	___ftpack@exp,f
  9527  0CB1  3001               	movlw	1
  9528  0CB2                     u1895:	
  9529  0CB2  36A2               	lsrf	___ftpack@arg+2,f
  9530  0CB3  0CA1               	rrf	___ftpack@arg+1,f
  9531  0CB4  0CA0               	rrf	___ftpack@arg,f
  9532  0CB5  0B89               	decfsz	9,f
  9533  0CB6  2CB2               	goto	u1895
  9534  0CB7                     l2383:	
  9535  0CB7  30FE               	movlw	254
  9536  0CB8  0522               	andwf	___ftpack@arg+2,w
  9537  0CB9  1903               	btfsc	3,2
  9538  0CBA  2CD0               	goto	l684
  9539  0CBB  2CAD               	goto	l2381
  9540  0CBC                     l2385:	
  9541  0CBC  3001               	movlw	1
  9542  0CBD  00A5               	movwf	??___ftpack
  9543  0CBE  0825               	movf	??___ftpack,w
  9544  0CBF  07A3               	addwf	___ftpack@exp,f
  9545  0CC0  3001               	movlw	1
  9546  0CC1  07A0               	addwf	___ftpack@arg,f
  9547  0CC2  3000               	movlw	0
  9548  0CC3  1803               	skipnc
  9549  0CC4  3001               	movlw	1
  9550  0CC5  07A1               	addwf	___ftpack@arg+1,f
  9551  0CC6  3000               	movlw	0
  9552  0CC7  1803               	skipnc
  9553  0CC8  3001               	movlw	1
  9554  0CC9  07A2               	addwf	___ftpack@arg+2,f
  9555  0CCA  3001               	movlw	1
  9556  0CCB                     u1915:	
  9557  0CCB  36A2               	lsrf	___ftpack@arg+2,f
  9558  0CCC  0CA1               	rrf	___ftpack@arg+1,f
  9559  0CCD  0CA0               	rrf	___ftpack@arg,f
  9560  0CCE  0B89               	decfsz	9,f
  9561  0CCF  2CCB               	goto	u1915
  9562  0CD0                     l684:	
  9563  0CD0  30FF               	movlw	255
  9564  0CD1  0522               	andwf	___ftpack@arg+2,w
  9565  0CD2  1903               	btfsc	3,2
  9566  0CD3  2CDD               	goto	l2393
  9567  0CD4  2CBC               	goto	l2385
  9568  0CD5                     l2391:	
  9569  0CD5  3001               	movlw	1
  9570  0CD6  02A3               	subwf	___ftpack@exp,f
  9571  0CD7  3001               	movlw	1
  9572  0CD8                     u1935:	
  9573  0CD8  35A0               	lslf	___ftpack@arg,f
  9574  0CD9  0DA1               	rlf	___ftpack@arg+1,f
  9575  0CDA  0DA2               	rlf	___ftpack@arg+2,f
  9576  0CDB  0B89               	decfsz	9,f
  9577  0CDC  2CD8               	goto	u1935
  9578  0CDD                     l2393:	
  9579  0CDD  1BA1               	btfsc	___ftpack@arg+1,7
  9580  0CDE  2CE3               	goto	l691
  9581  0CDF  3002               	movlw	2
  9582  0CE0  0223               	subwf	___ftpack@exp,w
  9583  0CE1  1803               	skipnc
  9584  0CE2  2CD5               	goto	l2391
  9585  0CE3                     l691:	
  9586  0CE3  1823               	btfsc	___ftpack@exp,0
  9587  0CE4  2CEB               	goto	l692
  9588  0CE5  30FF               	movlw	255
  9589  0CE6  05A0               	andwf	___ftpack@arg,f
  9590  0CE7  307F               	movlw	127
  9591  0CE8  05A1               	andwf	___ftpack@arg+1,f
  9592  0CE9  30FF               	movlw	255
  9593  0CEA  05A2               	andwf	___ftpack@arg+2,f
  9594  0CEB                     l692:	
  9595  0CEB  1003               	clrc
  9596  0CEC  0CA3               	rrf	___ftpack@exp,f
  9597  0CED  0823               	movf	___ftpack@exp,w
  9598  0CEE  00A5               	movwf	??___ftpack
  9599  0CEF  01A6               	clrf	??___ftpack+1
  9600  0CF0  01A7               	clrf	??___ftpack+2
  9601  0CF1  3010               	movlw	16
  9602  0CF2                     u1975:	
  9603  0CF2  35A5               	lslf	??___ftpack,f
  9604  0CF3  0DA6               	rlf	??___ftpack+1,f
  9605  0CF4  0DA7               	rlf	??___ftpack+2,f
  9606  0CF5  0B89               	decfsz	9,f
  9607  0CF6  2CF2               	goto	u1975
  9608  0CF7  0825               	movf	??___ftpack,w
  9609  0CF8  04A0               	iorwf	___ftpack@arg,f
  9610  0CF9  0826               	movf	??___ftpack+1,w
  9611  0CFA  04A1               	iorwf	___ftpack@arg+1,f
  9612  0CFB  0827               	movf	??___ftpack+2,w
  9613  0CFC  04A2               	iorwf	___ftpack@arg+2,f
  9614  0CFD  0824               	movf	___ftpack@sign,w
  9615  0CFE  1903               	btfsc	3,2
  9616  0CFF  0008               	return
  9617  0D00  17A2               	bsf	___ftpack@arg+2,7
  9618  0D01  0008               	return
  9619  0D02                     __end_of___ftpack:	
  9620                           
  9621                           	psect	intentry
  9622  0004                     __pintentry:	
  9623 ;; *************** function _ISR *****************
  9624 ;; Defined at:
  9625 ;;		line 14 in file "main.c"
  9626 ;; Parameters:    Size  Location     Type
  9627 ;;		None
  9628 ;; Auto vars:     Size  Location     Type
  9629 ;;		None
  9630 ;; Return value:  Size  Location     Type
  9631 ;;                  1    wreg      void 
  9632 ;; Registers used:
  9633 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9634 ;; Tracked objects:
  9635 ;;		On entry : 0/0
  9636 ;;		On exit  : 0/0
  9637 ;;		Unchanged: 0/0
  9638 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9639 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9640 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9641 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9642 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9643 ;;Total ram usage:        0 bytes
  9644 ;; Hardware stack levels used:    1
  9645 ;; Hardware stack levels required when called:    6
  9646 ;; This function calls:
  9647 ;;		_nrf24l01ISR
  9648 ;; This function is called by:
  9649 ;;		Interrupt level 1
  9650 ;; This function uses a non-reentrant model
  9651 ;;
  9652                           
  9653  0004                     _ISR:	
  9654                           
  9655                           ;incstack = 0
  9656  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
  9657                           
  9658                           ; Regs used in _ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9659  0005  3180               	pagesel	$
  9660                           
  9661                           ;main.c: 16: if (PIR0bits.INTF){
  9662  0006  0020               	movlb	0	; select bank0
  9663  0007  1C10               	btfss	16,0	;volatile
  9664  0008  280D               	goto	i1l167
  9665                           
  9666                           ;main.c: 17: nrf24l01ISR();
  9667  0009  318B  23B4         	fcall	_nrf24l01ISR
  9668                           
  9669                           ;main.c: 18: PIR0bits.INTF = 0;
  9670  000B  0020               	movlb	0	; select bank0
  9671  000C  1010               	bcf	16,0	;volatile
  9672  000D                     i1l167:	
  9673  000D  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
  9674  000E  0009               	retfie
  9675  000F                     __end_of_ISR:	
  9676                           
  9677                           	psect	text45
  9678  0BB4                     __ptext45:	
  9679 ;; *************** function _nrf24l01ISR *****************
  9680 ;; Defined at:
  9681 ;;		line 255 in file "nrf24l01.c"
  9682 ;; Parameters:    Size  Location     Type
  9683 ;;		None
  9684 ;; Auto vars:     Size  Location     Type
  9685 ;;  status          1   12[COMMON] struct .
  9686 ;; Return value:  Size  Location     Type
  9687 ;;                  1    wreg      void 
  9688 ;; Registers used:
  9689 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9690 ;; Tracked objects:
  9691 ;;		On entry : 0/0
  9692 ;;		On exit  : 0/0
  9693 ;;		Unchanged: 0/0
  9694 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9695 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9696 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9697 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9698 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9699 ;;Total ram usage:        2 bytes
  9700 ;; Hardware stack levels used:    1
  9701 ;; Hardware stack levels required when called:    5
  9702 ;; This function calls:
  9703 ;;		_exception
  9704 ;;		_nrf24l01CheckACK
  9705 ;;		_nrf24l01ReceivePacket
  9706 ;;		i1_nrf24l01Send
  9707 ;;		i1_nrf24l01SetRXMode
  9708 ;; This function is called by:
  9709 ;;		_ISR
  9710 ;; This function uses a non-reentrant model
  9711 ;;
  9712                           
  9713                           
  9714                           ;psect for function _nrf24l01ISR
  9715  0BB4                     _nrf24l01ISR:	
  9716                           
  9717                           ;nrf24l01.c: 257: n_STATUS_t status;;nrf24l01.c: 258: status.byte = nrf24l01Send((unsign
      +                          ed) 0b00000000 | (unsigned) 0x07, 0);
  9718                           
  9719                           ;incstack = 0
  9720                           ; Regs used in _nrf24l01ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9721  0BB4  01F1               	clrf	i1nrf24l01Send@data
  9722  0BB5  3007               	movlw	7
  9723  0BB6  3197  2739  318B   	fcall	i1_nrf24l01Send
  9724  0BB9  00FB               	movwf	??_nrf24l01ISR
  9725  0BBA  087B               	movf	??_nrf24l01ISR,w
  9726  0BBB  00FC               	movwf	nrf24l01ISR@status
  9727                           
  9728                           ;nrf24l01.c: 263: };nrf24l01.c: 266: if (status.byte == 0xFF){
  9729  0BBC  0A7C               	incf	nrf24l01ISR@status,w
  9730  0BBD  1D03               	btfss	3,2
  9731  0BBE  2BC3               	goto	i1l3363
  9732                           
  9733                           ;nrf24l01.c: 267: exception(2);
  9734  0BBF  3002               	movlw	2
  9735  0BC0  3180  2002  318B   	fcall	_exception
  9736  0BC3                     i1l3363:	
  9737                           
  9738                           ;nrf24l01.c: 268: };nrf24l01.c: 270: if (status.TX_DS){
  9739  0BC3  1EFC               	btfss	nrf24l01ISR@status,5
  9740  0BC4  2BD3               	goto	i1l3371
  9741                           
  9742                           ;nrf24l01.c: 273: nrf24l01.TXBusy = 0;
  9743  0BC5  107D               	bcf	_nrf24l01,0	;volatile
  9744                           
  9745                           ;nrf24l01.c: 276: if (!nrf24l01.RXMode){
  9746  0BC6  197D               	btfsc	_nrf24l01,2	;volatile
  9747  0BC7  2BD3               	goto	i1l3371
  9748                           
  9749                           ;nrf24l01.c: 277: if (TXPacket->packetData.ACKRequest){
  9750  0BC8  0021               	movlb	1	; select bank1
  9751  0BC9  0868               	movf	_TXPacket^(0+128),w
  9752  0BCA  0086               	movwf	6
  9753  0BCB  0869               	movf	(_TXPacket+1)^(0+128),w
  9754  0BCC  0087               	movwf	7
  9755  0BCD  1D01               	btfss	1,2
  9756  0BCE  2BD3               	goto	i1l3371
  9757                           
  9758                           ;nrf24l01.c: 280: nrf24l01SetRXMode(1);
  9759  0BCF  3001               	movlw	1
  9760  0BD0  318A  226B  318B   	fcall	i1_nrf24l01SetRXMode
  9761  0BD3                     i1l3371:	
  9762                           
  9763                           ;nrf24l01.c: 281: };nrf24l01.c: 282: };nrf24l01.c: 283: };nrf24l01.c: 286: if (status.RX
      +                          _DR){
  9764  0BD3  1F7C               	btfss	nrf24l01ISR@status,6
  9765  0BD4  2BF5               	goto	i1l3385
  9766                           
  9767                           ;nrf24l01.c: 289: if (!nrf24l01.RXPending){
  9768  0BD5  18FD               	btfsc	_nrf24l01,1	;volatile
  9769  0BD6  2BF4               	goto	i1l326
  9770                           
  9771                           ;nrf24l01.c: 292: nrf24l01.RXPending = 1;
  9772  0BD7  14FD               	bsf	_nrf24l01,1	;volatile
  9773                           
  9774                           ;nrf24l01.c: 294: nrf24l01ReceivePacket();
  9775  0BD8  318B  23FD  318B   	fcall	_nrf24l01ReceivePacket
  9776                           
  9777                           ;nrf24l01.c: 297: RXPacket.packetData.RPD = nrf24l01Send((unsigned) 0b00000000 | (unsign
      +                          ed) 0x09, 0);
  9778  0BDB  01F1               	clrf	i1nrf24l01Send@data
  9779  0BDC  3009               	movlw	9
  9780  0BDD  3197  2739  318B   	fcall	i1_nrf24l01Send
  9781  0BE0  00FB               	movwf	??_nrf24l01ISR
  9782  0BE1  0023               	movlb	3	; select bank3
  9783  0BE2  0820               	movf	_RXPacket^(0+384),w
  9784  0BE3  067B               	xorwf	??_nrf24l01ISR,w
  9785  0BE4  39FE               	andlw	-2
  9786  0BE5  067B               	xorwf	??_nrf24l01ISR,w
  9787  0BE6  00A0               	movwf	_RXPacket^(0+384)
  9788                           
  9789                           ;nrf24l01.c: 300: RXPacket.packetData.Pipe = status.RX_P_NO;
  9790  0BE7  0C7C               	rrf	nrf24l01ISR@status,w
  9791  0BE8  3907               	andlw	7
  9792  0BE9  00FB               	movwf	??_nrf24l01ISR
  9793  0BEA  0EFB               	swapf	??_nrf24l01ISR,f
  9794  0BEB  0820               	movf	_RXPacket^(0+384),w
  9795  0BEC  067B               	xorwf	??_nrf24l01ISR,w
  9796  0BED  398F               	andlw	-113
  9797  0BEE  067B               	xorwf	??_nrf24l01ISR,w
  9798  0BEF  00A0               	movwf	_RXPacket^(0+384)
  9799                           
  9800                           ;nrf24l01.c: 302: nrf24l01CheckACK();
  9801  0BF0  3188  20D6  318B   	fcall	_nrf24l01CheckACK
  9802                           
  9803                           ;nrf24l01.c: 303: }
  9804  0BF3  2BF5               	goto	i1l3385
  9805  0BF4                     i1l326:	
  9806                           
  9807                           ;nrf24l01.c: 306: else{;nrf24l01.c: 309: status.RX_DR = 0;
  9808  0BF4  137C               	bcf	nrf24l01ISR@status,6
  9809  0BF5                     i1l3385:	
  9810                           
  9811                           ;nrf24l01.c: 310: };nrf24l01.c: 312: };nrf24l01.c: 315: nrf24l01Send((unsigned) 0b001000
      +                          00 | (unsigned) 0x07, status.byte);
  9812  0BF5  087C               	movf	nrf24l01ISR@status,w
  9813  0BF6  00FB               	movwf	??_nrf24l01ISR
  9814  0BF7  087B               	movf	??_nrf24l01ISR,w
  9815  0BF8  00F1               	movwf	i1nrf24l01Send@data
  9816  0BF9  3027               	movlw	39
  9817  0BFA  3197  2739         	fcall	i1_nrf24l01Send
  9818  0BFC  0008               	return
  9819  0BFD                     __end_of_nrf24l01ISR:	
  9820                           
  9821                           	psect	text46
  9822  0BFD                     __ptext46:	
  9823 ;; *************** function _nrf24l01ReceivePacket *****************
  9824 ;; Defined at:
  9825 ;;		line 141 in file "nrf24l01.c"
  9826 ;; Parameters:    Size  Location     Type
  9827 ;;		None
  9828 ;; Auto vars:     Size  Location     Type
  9829 ;;  i               1   10[COMMON] unsigned char 
  9830 ;;  width           1    9[COMMON] unsigned char 
  9831 ;; Return value:  Size  Location     Type
  9832 ;;                  1    wreg      void 
  9833 ;; Registers used:
  9834 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9835 ;; Tracked objects:
  9836 ;;		On entry : 0/0
  9837 ;;		On exit  : 0/0
  9838 ;;		Unchanged: 0/0
  9839 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9840 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9841 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9842 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9843 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9844 ;;Total ram usage:        3 bytes
  9845 ;; Hardware stack levels used:    1
  9846 ;; Hardware stack levels required when called:    3
  9847 ;; This function calls:
  9848 ;;		_nrf24l01CEHigh
  9849 ;;		_nrf24l01CELow
  9850 ;;		_nrf24l01SPIEnd
  9851 ;;		_nrf24l01SPISend
  9852 ;;		_nrf24l01SPIStart
  9853 ;;		i1_memset
  9854 ;;		i1_nrf24l01Send
  9855 ;; This function is called by:
  9856 ;;		_nrf24l01ISR
  9857 ;; This function uses a non-reentrant model
  9858 ;;
  9859                           
  9860                           
  9861                           ;psect for function _nrf24l01ReceivePacket
  9862  0BFD                     _nrf24l01ReceivePacket:	
  9863                           
  9864                           ;nrf24l01.c: 144: memset(RXPacket.Message, 0 ,sizeof(RXPacket.Message));
  9865                           
  9866                           ;incstack = 0
  9867                           ; Regs used in _nrf24l01ReceivePacket: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  9868  0BFD  30A1               	movlw	low (_RXPacket+1)
  9869  0BFE  00F0               	movwf	i1memset@p1
  9870  0BFF  3001               	movlw	high (_RXPacket+1)
  9871  0C00  00F1               	movwf	i1memset@p1+1
  9872  0C01  3000               	movlw	0
  9873  0C02  00F2               	movwf	i1memset@c
  9874  0C03  00F3               	movwf	i1memset@c+1
  9875  0C04  3020               	movlw	32
  9876  0C05  00F4               	movwf	i1memset@n
  9877  0C06  3000               	movlw	0
  9878  0C07  00F5               	movwf	i1memset@n+1
  9879  0C08  3197  2708  318B   	fcall	i1_memset
  9880                           
  9881                           ;nrf24l01.c: 145: RXPacket.packetData.byte = 0x00;
  9882  0C0B  0023               	movlb	3	; select bank3
  9883  0C0C  01A0               	clrf	_RXPacket^(0+384)
  9884                           
  9885                           ;nrf24l01.c: 148: unsigned char width = nrf24l01Send((unsigned) 0b01100000, 0);
  9886  0C0D  01F1               	clrf	i1nrf24l01Send@data
  9887  0C0E  3060               	movlw	96
  9888  0C0F  3197  2739  318B   	fcall	i1_nrf24l01Send
  9889  0C12  00F8               	movwf	??_nrf24l01ReceivePacket
  9890  0C13  0878               	movf	??_nrf24l01ReceivePacket,w
  9891  0C14  00F9               	movwf	nrf24l01ReceivePacket@width
  9892                           
  9893                           ;nrf24l01.c: 149: unsigned char i = 0;
  9894  0C15  01FA               	clrf	nrf24l01ReceivePacket@i
  9895                           
  9896                           ;nrf24l01.c: 152: nrf24l01CELow();
  9897  0C16  3196  266E  318B   	fcall	_nrf24l01CELow
  9898                           
  9899                           ;nrf24l01.c: 155: nrf24l01SPIStart();
  9900  0C19  3196  268C  318B   	fcall	_nrf24l01SPIStart
  9901                           
  9902                           ;nrf24l01.c: 158: nrf24l01SPISend((unsigned) 0b01100001);
  9903  0C1C  3061               	movlw	97
  9904  0C1D  3196  269D  318B   	fcall	_nrf24l01SPISend
  9905                           
  9906                           ;nrf24l01.c: 161: RXPacket.packetData.byte = nrf24l01SPISend(0);
  9907  0C20  3000               	movlw	0
  9908  0C21  3196  269D  318B   	fcall	_nrf24l01SPISend
  9909  0C24  00F8               	movwf	??_nrf24l01ReceivePacket
  9910  0C25  0878               	movf	??_nrf24l01ReceivePacket,w
  9911  0C26  0023               	movlb	3	; select bank3
  9912  0C27  00A0               	movwf	_RXPacket^(0+384)
  9913                           
  9914                           ;nrf24l01.c: 162: width--;
  9915  0C28  3001               	movlw	1
  9916  0C29  02F9               	subwf	nrf24l01ReceivePacket@width,f
  9917                           
  9918                           ;nrf24l01.c: 164: for (i = 0; (i < width) && (i < sizeof(RXPacket.Message)); i++){
  9919  0C2A  01FA               	clrf	nrf24l01ReceivePacket@i
  9920  0C2B  2C3C               	goto	i1l3209
  9921  0C2C                     i1l3205:	
  9922                           
  9923                           ;nrf24l01.c: 166: RXPacket.Message[i] = nrf24l01SPISend(0);
  9924  0C2C  3000               	movlw	0
  9925  0C2D  3196  269D  318B   	fcall	_nrf24l01SPISend
  9926  0C30  00F8               	movwf	??_nrf24l01ReceivePacket
  9927  0C31  087A               	movf	nrf24l01ReceivePacket@i,w
  9928  0C32  3EA1               	addlw	(low ((_RXPacket| (0+256)+1)))& (0+255)
  9929  0C33  0086               	movwf	6
  9930  0C34  3001               	movlw	1	; select bank3/4
  9931  0C35  0087               	movwf	7
  9932  0C36  0878               	movf	??_nrf24l01ReceivePacket,w
  9933  0C37  0081               	movwf	1
  9934  0C38  3001               	movlw	1
  9935  0C39  00F8               	movwf	??_nrf24l01ReceivePacket
  9936  0C3A  0878               	movf	??_nrf24l01ReceivePacket,w
  9937  0C3B  07FA               	addwf	nrf24l01ReceivePacket@i,f
  9938  0C3C                     i1l3209:	
  9939  0C3C  0879               	movf	nrf24l01ReceivePacket@width,w
  9940  0C3D  027A               	subwf	nrf24l01ReceivePacket@i,w
  9941  0C3E  1803               	skipnc
  9942  0C3F  2C44               	goto	i1l3213
  9943  0C40  3020               	movlw	32
  9944  0C41  027A               	subwf	nrf24l01ReceivePacket@i,w
  9945  0C42  1C03               	skipc
  9946  0C43  2C2C               	goto	i1l3205
  9947  0C44                     i1l3213:	
  9948                           
  9949                           ;nrf24l01.c: 167: };nrf24l01.c: 170: nrf24l01SPIEnd();
  9950  0C44  3196  267D  318B   	fcall	_nrf24l01SPIEnd
  9951                           
  9952                           ;nrf24l01.c: 173: nrf24l01CEHigh();
  9953  0C47  3196  266B         	fcall	_nrf24l01CEHigh
  9954  0C49  0008               	return
  9955  0C4A                     __end_of_nrf24l01ReceivePacket:	
  9956                           
  9957                           	psect	text47
  9958  1708                     __ptext47:	
  9959 ;; *************** function i1_memset *****************
  9960 ;; Defined at:
  9961 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\memset.c"
  9962 ;; Parameters:    Size  Location     Type
  9963 ;;  p1              2    0[COMMON] PTR void 
  9964 ;;		 -> RXPacket(33), main@packet(33), loop@packet(33), 
  9965 ;;  c               2    2[COMMON] int 
  9966 ;;  n               2    4[COMMON] unsigned int 
  9967 ;; Auto vars:     Size  Location     Type
  9968 ;;  memset          2    6[COMMON] PTR unsigned char 
  9969 ;;		 -> RXPacket(33), main@packet(33), loop@packet(33), 
  9970 ;; Return value:  Size  Location     Type
  9971 ;;                  1    wreg      PTR void 
  9972 ;; Registers used:
  9973 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  9974 ;; Tracked objects:
  9975 ;;		On entry : 0/0
  9976 ;;		On exit  : 0/0
  9977 ;;		Unchanged: 0/0
  9978 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9979 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9980 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9981 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9982 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9983 ;;Total ram usage:        8 bytes
  9984 ;; Hardware stack levels used:    1
  9985 ;; This function calls:
  9986 ;;		Nothing
  9987 ;; This function is called by:
  9988 ;;		_nrf24l01ReceivePacket
  9989 ;; This function uses a non-reentrant model
  9990 ;;
  9991                           
  9992                           
  9993                           ;psect for function i1_memset
  9994  1708                     i1_memset:	
  9995                           
  9996                           ;incstack = 0
  9997                           ; Regs used in i1_memset: [wreg+fsr1l+fsr1h+status,2+status,0]
  9998  1708  0871               	movf	i1memset@p1+1,w
  9999  1709  00F7               	movwf	i1memset@p+1
 10000  170A  0870               	movf	i1memset@p1,w
 10001  170B  00F6               	movwf	i1memset@p
 10002  170C                     i1l3093:	
 10003  170C  3001               	movlw	1
 10004  170D  02F4               	subwf	i1memset@n,f
 10005  170E  3000               	movlw	0
 10006  170F  3BF5               	subwfb	i1memset@n+1,f
 10007  1710  0A74               	incf	i1memset@n,w
 10008  1711  1903               	btfsc	3,2
 10009  1712  0A75               	incf	i1memset@n+1,w
 10010  1713  1903               	btfsc	3,2
 10011  1714  0008               	return
 10012  1715  0876               	movf	i1memset@p,w
 10013  1716  0086               	movwf	6
 10014  1717  0877               	movf	i1memset@p+1,w
 10015  1718  0087               	movwf	7
 10016  1719  0872               	movf	i1memset@c,w
 10017  171A  0081               	movwf	1
 10018  171B  3001               	movlw	1
 10019  171C  07F6               	addwf	i1memset@p,f
 10020  171D  3000               	movlw	0
 10021  171E  3DF7               	addwfc	i1memset@p+1,f
 10022  171F  2F0C               	goto	i1l3093
 10023  1720                     __end_ofi1_memset:	
 10024                           ;	Return value of i1_memset is never used
 10025                           
 10026                           
 10027                           	psect	text48
 10028  08D6                     __ptext48:	
 10029 ;; *************** function _nrf24l01CheckACK *****************
 10030 ;; Defined at:
 10031 ;;		line 104 in file "nrf24l01.c"
 10032 ;; Parameters:    Size  Location     Type
 10033 ;;		None
 10034 ;; Auto vars:     Size  Location     Type
 10035 ;;		None
 10036 ;; Return value:  Size  Location     Type
 10037 ;;                  1    wreg      void 
 10038 ;; Registers used:
 10039 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10040 ;; Tracked objects:
 10041 ;;		On entry : 0/0
 10042 ;;		On exit  : 0/0
 10043 ;;		Unchanged: 0/0
 10044 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10045 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10046 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10047 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10048 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10049 ;;Total ram usage:        3 bytes
 10050 ;; Hardware stack levels used:    1
 10051 ;; Hardware stack levels required when called:    4
 10052 ;; This function calls:
 10053 ;;		_strcmp
 10054 ;;		i1_nrf24l01SetRXMode
 10055 ;; This function is called by:
 10056 ;;		_nrf24l01ISR
 10057 ;; This function uses a non-reentrant model
 10058 ;;
 10059                           
 10060                           
 10061                           ;psect for function _nrf24l01CheckACK
 10062  08D6                     _nrf24l01CheckACK:	
 10063                           
 10064                           ;nrf24l01.c: 108: if (!RXPacket.packetData.IsACK){
 10065                           
 10066                           ;incstack = 0
 10067                           ; Regs used in _nrf24l01CheckACK: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10068  08D6  0023               	movlb	3	; select bank3
 10069  08D7  1DA0               	btfss	_RXPacket^(0+384),3
 10070  08D8  0008               	return
 10071                           
 10072                           ;nrf24l01.c: 110: };nrf24l01.c: 113: nrf24l01.RXPending = 0;
 10073                           
 10074                           ;nrf24l01.c: 109: return;
 10075  08D9  10FD               	bcf	_nrf24l01,1	;volatile
 10076                           
 10077                           ;nrf24l01.c: 116: if (!TXPacket->packetData.ACKRequest){
 10078  08DA  0021               	movlb	1	; select bank1
 10079  08DB  0868               	movf	_TXPacket^(0+128),w
 10080  08DC  0086               	movwf	6
 10081  08DD  0869               	movf	(_TXPacket+1)^(0+128),w
 10082  08DE  0087               	movwf	7
 10083  08DF  1D01               	btfss	1,2
 10084  08E0  0008               	return
 10085                           
 10086                           ;nrf24l01.c: 118: };nrf24l01.c: 121: if (strcmp(TXPacket->Message, RXPacket.Message) != 
      +                          0){
 10087                           
 10088                           ;nrf24l01.c: 117: return;
 10089  08E1  0868               	movf	_TXPacket^(0+128),w
 10090  08E2  3E01               	addlw	1
 10091  08E3  00F7               	movwf	??_nrf24l01CheckACK
 10092  08E4  3000               	movlw	0
 10093  08E5  3D69               	addwfc	(_TXPacket+1)^(0+128),w
 10094  08E6  00F8               	movwf	??_nrf24l01CheckACK+1
 10095  08E7  0877               	movf	??_nrf24l01CheckACK,w
 10096  08E8  00F0               	movwf	strcmp@s1
 10097  08E9  0878               	movf	??_nrf24l01CheckACK+1,w
 10098  08EA  00F1               	movwf	strcmp@s1+1
 10099  08EB  30A1               	movlw	(low ((_RXPacket| (0+256)+1)))& (0+255)
 10100  08EC  00F9               	movwf	??_nrf24l01CheckACK+2
 10101  08ED  0879               	movf	??_nrf24l01CheckACK+2,w
 10102  08EE  00F2               	movwf	strcmp@s2
 10103  08EF  3188  2088  3188   	fcall	_strcmp
 10104  08F2  0870               	movf	?_strcmp,w
 10105  08F3  0471               	iorwf	?_strcmp+1,w
 10106  08F4  1D03               	btfss	3,2
 10107  08F5  0008               	return
 10108                           
 10109                           ;nrf24l01.c: 123: };nrf24l01.c: 130: TXPacket->packetData.ACKRequest = 0;
 10110                           
 10111                           ;nrf24l01.c: 122: return;
 10112  08F6  0021               	movlb	1	; select bank1
 10113  08F7  0868               	movf	_TXPacket^(0+128),w
 10114  08F8  0086               	movwf	6
 10115  08F9  0869               	movf	(_TXPacket+1)^(0+128),w
 10116  08FA  0087               	movwf	7
 10117  08FB  1101               	bcf	1,2
 10118                           
 10119                           ;nrf24l01.c: 133: nrf24l01SetRXMode(0);
 10120  08FC  3000               	movlw	0
 10121  08FD  318A  226B         	fcall	i1_nrf24l01SetRXMode
 10122  08FF  0008               	return
 10123  0900                     __end_of_nrf24l01CheckACK:	
 10124                           
 10125                           	psect	text49
 10126  0A6B                     __ptext49:	
 10127 ;; *************** function i1_nrf24l01SetRXMode *****************
 10128 ;; Defined at:
 10129 ;;		line 54 in file "nrf24l01.c"
 10130 ;; Parameters:    Size  Location     Type
 10131 ;;  rxMode          1    wreg     unsigned char 
 10132 ;; Auto vars:     Size  Location     Type
 10133 ;;  rxMode          1    6[COMMON] unsigned char 
 10134 ;;  nrf24l01SetR    1    5[COMMON] struct .
 10135 ;; Return value:  Size  Location     Type
 10136 ;;                  1    wreg      void 
 10137 ;; Registers used:
 10138 ;;		wreg, status,2, status,0, pclath, cstack
 10139 ;; Tracked objects:
 10140 ;;		On entry : 0/0
 10141 ;;		On exit  : 0/0
 10142 ;;		Unchanged: 0/0
 10143 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10144 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10145 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10146 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10147 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10148 ;;Total ram usage:        3 bytes
 10149 ;; Hardware stack levels used:    1
 10150 ;; Hardware stack levels required when called:    3
 10151 ;; This function calls:
 10152 ;;		_nrf24l01CEHigh
 10153 ;;		_nrf24l01CELow
 10154 ;;		i1_nrf24l01Send
 10155 ;; This function is called by:
 10156 ;;		_nrf24l01CheckACK
 10157 ;;		_nrf24l01ISR
 10158 ;; This function uses a non-reentrant model
 10159 ;;
 10160                           
 10161                           
 10162                           ;psect for function i1_nrf24l01SetRXMode
 10163  0A6B                     i1_nrf24l01SetRXMode:	
 10164                           
 10165                           ;incstack = 0
 10166                           ; Regs used in i1_nrf24l01SetRXMode: [wreg+status,2+status,0+pclath+cstack]
 10167                           ;i1nrf24l01SetRXMode@rxMode stored from wreg
 10168  0A6B  00F6               	movwf	i1nrf24l01SetRXMode@rxMode
 10169                           
 10170                           ;nrf24l01.c: 62: n_CONFIG_t config;;nrf24l01.c: 65: config.byte = nrf24l01Send((unsigned
      +                          ) 0b00000000 | (unsigned) 0x00, 0);
 10171  0A6C  01F1               	clrf	i1nrf24l01Send@data
 10172  0A6D  3000               	movlw	0
 10173  0A6E  3197  2739  318A   	fcall	i1_nrf24l01Send
 10174  0A71  00F4               	movwf	??i1_nrf24l01SetRXMode
 10175  0A72  0874               	movf	??i1_nrf24l01SetRXMode,w
 10176  0A73  00F5               	movwf	i1nrf24l01SetRXMode@config
 10177                           
 10178                           ;nrf24l01.c: 68: if (config.PRIM_RX != rxMode){
 10179  0A74  0875               	movf	i1nrf24l01SetRXMode@config,w
 10180  0A75  3901               	andlw	1
 10181  0A76  0676               	xorwf	i1nrf24l01SetRXMode@rxMode,w
 10182  0A77  1903               	skipnz
 10183  0A78  2AA4               	goto	i1l3085
 10184                           
 10185                           ;nrf24l01.c: 71: nrf24l01CELow();
 10186  0A79  3196  266E  318A   	fcall	_nrf24l01CELow
 10187                           
 10188                           ;nrf24l01.c: 72: _delay((unsigned long)((200)*(32000000/4000000.0)));
 10189  0A7C  30E4               	movlw	228
 10190  0A7D                     u367_27:	
 10191  0A7D  3200               	nop2
 10192  0A7E  3200               	nop2
 10193  0A7F  0B89               	decfsz	9,f
 10194  0A80  2A7D               	goto	u367_27
 10195  0A81  3200               	nop2
 10196  0A82  3200               	nop2
 10197                           
 10198                           ;nrf24l01.c: 75: config.PRIM_RX = rxMode;
 10199  0A83  0876               	movf	i1nrf24l01SetRXMode@rxMode,w
 10200  0A84  3901               	andlw	1
 10201  0A85  1075               	bcf	i1nrf24l01SetRXMode@config,0
 10202  0A86  1D03               	skipz
 10203  0A87  1475               	bsf	i1nrf24l01SetRXMode@config,0
 10204                           
 10205                           ;nrf24l01.c: 76: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x00, config.byte);
 10206  0A88  0875               	movf	i1nrf24l01SetRXMode@config,w
 10207  0A89  00F4               	movwf	??i1_nrf24l01SetRXMode
 10208  0A8A  0874               	movf	??i1_nrf24l01SetRXMode,w
 10209  0A8B  00F1               	movwf	i1nrf24l01Send@data
 10210  0A8C  3020               	movlw	32
 10211  0A8D  3197  2739  318A   	fcall	i1_nrf24l01Send
 10212                           
 10213                           ;nrf24l01.c: 79: _delay((unsigned long)((200)*(32000000/4000000.0)));
 10214  0A90  30E4               	movlw	228
 10215  0A91                     u368_27:	
 10216  0A91  3200               	nop2
 10217  0A92  3200               	nop2
 10218  0A93  0B89               	decfsz	9,f
 10219  0A94  2A91               	goto	u368_27
 10220  0A95  3200               	nop2
 10221  0A96  3200               	nop2
 10222                           
 10223                           ;nrf24l01.c: 82: if (rxMode){
 10224  0A97  0876               	movf	i1nrf24l01SetRXMode@rxMode,w
 10225  0A98  1903               	btfsc	3,2
 10226  0A99  2AA4               	goto	i1l3085
 10227                           
 10228                           ;nrf24l01.c: 83: nrf24l01CEHigh();
 10229  0A9A  3196  266B  318A   	fcall	_nrf24l01CEHigh
 10230                           
 10231                           ;nrf24l01.c: 84: _delay((unsigned long)((200)*(32000000/4000000.0)));
 10232  0A9D  30E4               	movlw	228
 10233  0A9E                     u369_27:	
 10234  0A9E  3200               	nop2
 10235  0A9F  3200               	nop2
 10236  0AA0  0B89               	decfsz	9,f
 10237  0AA1  2A9E               	goto	u369_27
 10238  0AA2  3200               	nop2
 10239  0AA3  3200               	nop2
 10240  0AA4                     i1l3085:	
 10241                           
 10242                           ;nrf24l01.c: 85: };nrf24l01.c: 86: };nrf24l01.c: 89: nrf24l01.RXMode = rxMode;
 10243  0AA4  0876               	movf	i1nrf24l01SetRXMode@rxMode,w
 10244  0AA5  3901               	andlw	1
 10245  0AA6  117D               	bcf	_nrf24l01,2	;volatile
 10246  0AA7  1D03               	skipz
 10247  0AA8  157D               	bsf	_nrf24l01,2	;volatile
 10248  0AA9  0008               	return
 10249  0AAA                     __end_ofi1_nrf24l01SetRXMode:	
 10250                           
 10251                           	psect	text50
 10252  1739                     __ptext50:	
 10253 ;; *************** function i1_nrf24l01Send *****************
 10254 ;; Defined at:
 10255 ;;		line 9 in file "nrf24l01.c"
 10256 ;; Parameters:    Size  Location     Type
 10257 ;;  command         1    wreg     unsigned char 
 10258 ;;  data            1    1[COMMON] unsigned char 
 10259 ;; Auto vars:     Size  Location     Type
 10260 ;;  command         1    3[COMMON] unsigned char 
 10261 ;; Return value:  Size  Location     Type
 10262 ;;                  1    wreg      unsigned char 
 10263 ;; Registers used:
 10264 ;;		wreg, status,2, status,0, pclath, cstack
 10265 ;; Tracked objects:
 10266 ;;		On entry : 0/0
 10267 ;;		On exit  : 0/0
 10268 ;;		Unchanged: 0/0
 10269 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10270 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10271 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10272 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10273 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10274 ;;Total ram usage:        3 bytes
 10275 ;; Hardware stack levels used:    1
 10276 ;; Hardware stack levels required when called:    2
 10277 ;; This function calls:
 10278 ;;		_enableInterrupts
 10279 ;;		_nrf24l01SPIEnd
 10280 ;;		_nrf24l01SPISend
 10281 ;;		_nrf24l01SPIStart
 10282 ;; This function is called by:
 10283 ;;		_nrf24l01ReceivePacket
 10284 ;;		_nrf24l01ISR
 10285 ;;		i1_nrf24l01SetRXMode
 10286 ;; This function uses a non-reentrant model
 10287 ;;
 10288                           
 10289                           
 10290                           ;psect for function i1_nrf24l01Send
 10291  1739                     i1_nrf24l01Send:	
 10292                           
 10293                           ;incstack = 0
 10294                           ; Regs used in i1_nrf24l01Send: [wreg+status,2+status,0+pclath+cstack]
 10295                           ;i1nrf24l01Send@command stored from wreg
 10296  1739  00F3               	movwf	i1nrf24l01Send@command
 10297                           
 10298                           ;nrf24l01.c: 12: enableInterrupts(0);
 10299  173A  3000               	movlw	0
 10300  173B  3196  2684  3197   	fcall	_enableInterrupts
 10301                           
 10302                           ;nrf24l01.c: 15: nrf24l01SPIStart();
 10303  173E  3196  268C  3197   	fcall	_nrf24l01SPIStart
 10304                           
 10305                           ;nrf24l01.c: 18: nrf24l01SPISend(command);
 10306  1741  0873               	movf	i1nrf24l01Send@command,w
 10307  1742  3196  269D  3197   	fcall	_nrf24l01SPISend
 10308                           
 10309                           ;nrf24l01.c: 21: data = nrf24l01SPISend(data);
 10310  1745  0871               	movf	i1nrf24l01Send@data,w
 10311  1746  3196  269D  3197   	fcall	_nrf24l01SPISend
 10312  1749  00F2               	movwf	??i1_nrf24l01Send
 10313  174A  0872               	movf	??i1_nrf24l01Send,w
 10314  174B  00F1               	movwf	i1nrf24l01Send@data
 10315                           
 10316                           ;nrf24l01.c: 24: nrf24l01SPIEnd();
 10317  174C  3196  267D  3197   	fcall	_nrf24l01SPIEnd
 10318                           
 10319                           ;nrf24l01.c: 27: enableInterrupts(1);
 10320  174F  3001               	movlw	1
 10321  1750  3196  2684         	fcall	_enableInterrupts
 10322                           
 10323                           ;nrf24l01.c: 29: return data;
 10324  1752  0871               	movf	i1nrf24l01Send@data,w
 10325  1753  0008               	return
 10326  1754                     __end_ofi1_nrf24l01Send:	
 10327                           
 10328                           	psect	text51
 10329  168C                     __ptext51:	
 10330 ;; *************** function _nrf24l01SPIStart *****************
 10331 ;; Defined at:
 10332 ;;		line 64 in file "interface.c"
 10333 ;; Parameters:    Size  Location     Type
 10334 ;;		None
 10335 ;; Auto vars:     Size  Location     Type
 10336 ;;		None
 10337 ;; Return value:  Size  Location     Type
 10338 ;;                  1    wreg      void 
 10339 ;; Registers used:
 10340 ;;		wreg, status,2, status,0, pclath, cstack
 10341 ;; Tracked objects:
 10342 ;;		On entry : 0/0
 10343 ;;		On exit  : 0/0
 10344 ;;		Unchanged: 0/0
 10345 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10346 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10347 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10348 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10349 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10350 ;;Total ram usage:        0 bytes
 10351 ;; Hardware stack levels used:    1
 10352 ;; Hardware stack levels required when called:    8
 10353 ;; This function calls:
 10354 ;;		_nrf24l01CSLow
 10355 ;; This function is called by:
 10356 ;;		_nrf24l01Send
 10357 ;;		_nrf24l01ReceivePacket
 10358 ;;		_nrf24l01SendPacket
 10359 ;;		_nrf24l01SetTXPipe
 10360 ;;		_nrf24l01InitRegisters
 10361 ;;		i1_nrf24l01Send
 10362 ;; This function uses a non-reentrant model
 10363 ;;
 10364                           
 10365                           
 10366                           ;psect for function _nrf24l01SPIStart
 10367  168C                     _nrf24l01SPIStart:	
 10368                           
 10369                           ;interface.c: 65: nrf24l01CSLow();
 10370                           
 10371                           ;incstack = 0
 10372 ;; hardware stack exceeded
 10373                           ; Regs used in _nrf24l01SPIStart: [wreg+status,2+status,0+pclath+cstack]
 10374  168C  3196  2674  3196   	fcall	_nrf24l01CSLow
 10375                           
 10376                           ;interface.c: 66: _delay((unsigned long)((10)*(32000000/4000000.0)));
 10377  168F  301A               	movlw	26
 10378  1690                     u370_27:	
 10379  1690  0B89               	decfsz	9,f
 10380  1691  2E90               	goto	u370_27
 10381  1692  3200               	nop2
 10382  1693  0008               	return
 10383  1694                     __end_of_nrf24l01SPIStart:	
 10384                           
 10385                           	psect	text52
 10386  1674                     __ptext52:	
 10387 ;; *************** function _nrf24l01CSLow *****************
 10388 ;; Defined at:
 10389 ;;		line 17 in file "interface.c"
 10390 ;; Parameters:    Size  Location     Type
 10391 ;;		None
 10392 ;; Auto vars:     Size  Location     Type
 10393 ;;		None
 10394 ;; Return value:  Size  Location     Type
 10395 ;;                  1    wreg      void 
 10396 ;; Registers used:
 10397 ;;		None
 10398 ;; Tracked objects:
 10399 ;;		On entry : 0/0
 10400 ;;		On exit  : 0/0
 10401 ;;		Unchanged: 0/0
 10402 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10403 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10404 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10405 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10406 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10407 ;;Total ram usage:        0 bytes
 10408 ;; Hardware stack levels used:    1
 10409 ;; Hardware stack levels required when called:    7
 10410 ;; This function calls:
 10411 ;;		Nothing
 10412 ;; This function is called by:
 10413 ;;		_nrf24l01SPIStart
 10414 ;; This function uses a non-reentrant model
 10415 ;;
 10416                           
 10417                           
 10418                           ;psect for function _nrf24l01CSLow
 10419  1674                     _nrf24l01CSLow:	
 10420                           
 10421                           ;interface.c: 18: PORTAbits.RA1 = 0;
 10422                           
 10423                           ;incstack = 0
 10424 ;; hardware stack exceeded
 10425                           ; Regs used in _nrf24l01CSLow: []
 10426  1674  0020               	movlb	0	; select bank0
 10427  1675  108C               	bcf	12,1	;volatile
 10428  1676  0008               	return
 10429  1677                     __end_of_nrf24l01CSLow:	
 10430                           
 10431                           	psect	text53
 10432  169D                     __ptext53:	
 10433 ;; *************** function _nrf24l01SPISend *****************
 10434 ;; Defined at:
 10435 ;;		line 51 in file "interface.c"
 10436 ;; Parameters:    Size  Location     Type
 10437 ;;  data            1    wreg     unsigned char 
 10438 ;; Auto vars:     Size  Location     Type
 10439 ;;  data            1    0[COMMON] unsigned char 
 10440 ;; Return value:  Size  Location     Type
 10441 ;;                  1    wreg      unsigned char 
 10442 ;; Registers used:
 10443 ;;		wreg
 10444 ;; Tracked objects:
 10445 ;;		On entry : 0/0
 10446 ;;		On exit  : 0/0
 10447 ;;		Unchanged: 0/0
 10448 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10449 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10450 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10451 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10452 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10453 ;;Total ram usage:        0 bytes
 10454 ;; Hardware stack levels used:    1
 10455 ;; Hardware stack levels required when called:    7
 10456 ;; This function calls:
 10457 ;;		Nothing
 10458 ;; This function is called by:
 10459 ;;		_nrf24l01Send
 10460 ;;		_nrf24l01ReceivePacket
 10461 ;;		_nrf24l01SendPacket
 10462 ;;		_nrf24l01SetTXPipe
 10463 ;;		_nrf24l01InitRegisters
 10464 ;;		i1_nrf24l01Send
 10465 ;; This function uses a non-reentrant model
 10466 ;;
 10467                           
 10468                           
 10469                           ;psect for function _nrf24l01SPISend
 10470  169D                     _nrf24l01SPISend:	
 10471                           
 10472                           ;incstack = 0
 10473 ;; hardware stack exceeded
 10474                           ; Regs used in _nrf24l01SPISend: [wreg]
 10475                           ;nrf24l01SPISend@data stored from wreg
 10476  169D  00F0               	movwf	nrf24l01SPISend@data
 10477                           
 10478                           ;interface.c: 52: SSP1BUF = data;
 10479  169E  0870               	movf	nrf24l01SPISend@data,w
 10480  169F  0024               	movlb	4	; select bank4
 10481  16A0  0091               	movwf	17	;volatile
 10482                           
 10483                           ;interface.c: 54: PORTCbits.RC4 = 1;
 10484  16A1  0020               	movlb	0	; select bank0
 10485  16A2  160E               	bsf	14,4	;volatile
 10486  16A3                     i1l48:	
 10487                           ;interface.c: 56: while (!SSP1STATbits.BF){
 10488                           
 10489  16A3  0024               	movlb	4	; select bank4
 10490  16A4  1814               	btfsc	20,0	;volatile
 10491  16A5  2EA8               	goto	i1l2409
 10492                           
 10493                           ;interface.c: 57: __nop();
 10494  16A6  0000               	nop
 10495  16A7  2EA3               	goto	i1l48
 10496  16A8                     i1l2409:	
 10497                           
 10498                           ;interface.c: 58: };interface.c: 60: return SSP1BUF;
 10499  16A8  0811               	movf	17,w	;volatile
 10500  16A9  0008               	return
 10501  16AA                     __end_of_nrf24l01SPISend:	
 10502                           
 10503                           	psect	text54
 10504  167D                     __ptext54:	
 10505 ;; *************** function _nrf24l01SPIEnd *****************
 10506 ;; Defined at:
 10507 ;;		line 70 in file "interface.c"
 10508 ;; Parameters:    Size  Location     Type
 10509 ;;		None
 10510 ;; Auto vars:     Size  Location     Type
 10511 ;;		None
 10512 ;; Return value:  Size  Location     Type
 10513 ;;                  1    wreg      void 
 10514 ;; Registers used:
 10515 ;;		wreg, status,2, status,0, pclath, cstack
 10516 ;; Tracked objects:
 10517 ;;		On entry : 0/0
 10518 ;;		On exit  : 0/0
 10519 ;;		Unchanged: 0/0
 10520 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10521 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10522 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10523 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10524 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10525 ;;Total ram usage:        0 bytes
 10526 ;; Hardware stack levels used:    1
 10527 ;; Hardware stack levels required when called:    8
 10528 ;; This function calls:
 10529 ;;		_nrf24l01CSHigh
 10530 ;; This function is called by:
 10531 ;;		_nrf24l01Send
 10532 ;;		_nrf24l01ReceivePacket
 10533 ;;		_nrf24l01SendPacket
 10534 ;;		_nrf24l01SetTXPipe
 10535 ;;		_nrf24l01InitRegisters
 10536 ;;		i1_nrf24l01Send
 10537 ;; This function uses a non-reentrant model
 10538 ;;
 10539                           
 10540                           
 10541                           ;psect for function _nrf24l01SPIEnd
 10542  167D                     _nrf24l01SPIEnd:	
 10543                           
 10544                           ;interface.c: 71: _delay((unsigned long)((10)*(32000000/4000000.0)));
 10545                           
 10546                           ;incstack = 0
 10547 ;; hardware stack exceeded
 10548                           ; Regs used in _nrf24l01SPIEnd: [wreg+status,2+status,0+pclath+cstack]
 10549  167D  301A               	movlw	26
 10550  167E                     u371_27:	
 10551  167E  0B89               	decfsz	9,f
 10552  167F  2E7E               	goto	u371_27
 10553  1680  3200               	nop2
 10554                           
 10555                           ;interface.c: 72: nrf24l01CSHigh();
 10556  1681  3196  2671         	fcall	_nrf24l01CSHigh
 10557  1683  0008               	return
 10558  1684                     __end_of_nrf24l01SPIEnd:	
 10559                           
 10560                           	psect	text55
 10561  1671                     __ptext55:	
 10562 ;; *************** function _nrf24l01CSHigh *****************
 10563 ;; Defined at:
 10564 ;;		line 22 in file "interface.c"
 10565 ;; Parameters:    Size  Location     Type
 10566 ;;		None
 10567 ;; Auto vars:     Size  Location     Type
 10568 ;;		None
 10569 ;; Return value:  Size  Location     Type
 10570 ;;                  1    wreg      void 
 10571 ;; Registers used:
 10572 ;;		None
 10573 ;; Tracked objects:
 10574 ;;		On entry : 0/0
 10575 ;;		On exit  : 0/0
 10576 ;;		Unchanged: 0/0
 10577 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10578 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10579 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10580 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10581 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10582 ;;Total ram usage:        0 bytes
 10583 ;; Hardware stack levels used:    1
 10584 ;; Hardware stack levels required when called:    7
 10585 ;; This function calls:
 10586 ;;		Nothing
 10587 ;; This function is called by:
 10588 ;;		_nrf24l01SPIEnd
 10589 ;; This function uses a non-reentrant model
 10590 ;;
 10591                           
 10592                           
 10593                           ;psect for function _nrf24l01CSHigh
 10594  1671                     _nrf24l01CSHigh:	
 10595                           
 10596                           ;interface.c: 23: PORTAbits.RA1 = 1;
 10597                           
 10598                           ;incstack = 0
 10599 ;; hardware stack exceeded
 10600                           ; Regs used in _nrf24l01CSHigh: []
 10601  1671  0020               	movlb	0	; select bank0
 10602  1672  148C               	bsf	12,1	;volatile
 10603  1673  0008               	return
 10604  1674                     __end_of_nrf24l01CSHigh:	
 10605                           
 10606                           	psect	text56
 10607  1684                     __ptext56:	
 10608 ;; *************** function _enableInterrupts *****************
 10609 ;; Defined at:
 10610 ;;		line 76 in file "interface.c"
 10611 ;; Parameters:    Size  Location     Type
 10612 ;;  enable          1    wreg     unsigned char 
 10613 ;; Auto vars:     Size  Location     Type
 10614 ;;  enable          1    0[COMMON] unsigned char 
 10615 ;; Return value:  Size  Location     Type
 10616 ;;                  1    wreg      void 
 10617 ;; Registers used:
 10618 ;;		wreg, status,0
 10619 ;; Tracked objects:
 10620 ;;		On entry : 0/0
 10621 ;;		On exit  : 0/0
 10622 ;;		Unchanged: 0/0
 10623 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10624 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10625 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10626 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10627 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10628 ;;Total ram usage:        0 bytes
 10629 ;; Hardware stack levels used:    1
 10630 ;; Hardware stack levels required when called:    7
 10631 ;; This function calls:
 10632 ;;		Nothing
 10633 ;; This function is called by:
 10634 ;;		_nrf24l01Send
 10635 ;;		_nrf24l01SendPacket
 10636 ;;		i1_nrf24l01Send
 10637 ;; This function uses a non-reentrant model
 10638 ;;
 10639                           
 10640                           
 10641                           ;psect for function _enableInterrupts
 10642  1684                     _enableInterrupts:	
 10643                           
 10644                           ;incstack = 0
 10645 ;; hardware stack exceeded
 10646                           ; Regs used in _enableInterrupts: [wreg+status,0]
 10647                           ;enableInterrupts@enable stored from wreg
 10648  1684  00F0               	movwf	enableInterrupts@enable
 10649                           
 10650                           ;interface.c: 77: PIE0bits.INTE = enable;
 10651  1685  0C70               	rrf	enableInterrupts@enable,w
 10652  1686  0021               	movlb	1	; select bank1
 10653  1687  1C03               	skipc
 10654  1688  1010               	bcf	16,0	;volatile
 10655  1689  1803               	skipnc
 10656  168A  1410               	bsf	16,0	;volatile
 10657  168B  0008               	return
 10658  168C                     __end_of_enableInterrupts:	
 10659                           
 10660                           	psect	text57
 10661  166E                     __ptext57:	
 10662 ;; *************** function _nrf24l01CELow *****************
 10663 ;; Defined at:
 10664 ;;		line 7 in file "interface.c"
 10665 ;; Parameters:    Size  Location     Type
 10666 ;;		None
 10667 ;; Auto vars:     Size  Location     Type
 10668 ;;		None
 10669 ;; Return value:  Size  Location     Type
 10670 ;;                  1    wreg      void 
 10671 ;; Registers used:
 10672 ;;		None
 10673 ;; Tracked objects:
 10674 ;;		On entry : 0/0
 10675 ;;		On exit  : 0/0
 10676 ;;		Unchanged: 0/0
 10677 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10678 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10679 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10680 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10681 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10682 ;;Total ram usage:        0 bytes
 10683 ;; Hardware stack levels used:    1
 10684 ;; Hardware stack levels required when called:    7
 10685 ;; This function calls:
 10686 ;;		Nothing
 10687 ;; This function is called by:
 10688 ;;		_nrf24l01SetRXMode
 10689 ;;		_nrf24l01ReceivePacket
 10690 ;;		_nrf24l01SendPacket
 10691 ;;		_nrf24l01Init
 10692 ;;		i1_nrf24l01SetRXMode
 10693 ;; This function uses a non-reentrant model
 10694 ;;
 10695                           
 10696                           
 10697                           ;psect for function _nrf24l01CELow
 10698  166E                     _nrf24l01CELow:	
 10699                           
 10700                           ;interface.c: 8: PORTAbits.RA0 = 0;
 10701                           
 10702                           ;incstack = 0
 10703 ;; hardware stack exceeded
 10704                           ; Regs used in _nrf24l01CELow: []
 10705  166E  0020               	movlb	0	; select bank0
 10706  166F  100C               	bcf	12,0	;volatile
 10707  1670  0008               	return
 10708  1671                     __end_of_nrf24l01CELow:	
 10709                           
 10710                           	psect	text58
 10711  166B                     __ptext58:	
 10712 ;; *************** function _nrf24l01CEHigh *****************
 10713 ;; Defined at:
 10714 ;;		line 12 in file "interface.c"
 10715 ;; Parameters:    Size  Location     Type
 10716 ;;		None
 10717 ;; Auto vars:     Size  Location     Type
 10718 ;;		None
 10719 ;; Return value:  Size  Location     Type
 10720 ;;                  1    wreg      void 
 10721 ;; Registers used:
 10722 ;;		None
 10723 ;; Tracked objects:
 10724 ;;		On entry : 0/0
 10725 ;;		On exit  : 0/0
 10726 ;;		Unchanged: 0/0
 10727 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10728 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10729 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10730 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10731 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10732 ;;Total ram usage:        0 bytes
 10733 ;; Hardware stack levels used:    1
 10734 ;; Hardware stack levels required when called:    7
 10735 ;; This function calls:
 10736 ;;		Nothing
 10737 ;; This function is called by:
 10738 ;;		_nrf24l01SetRXMode
 10739 ;;		_nrf24l01ReceivePacket
 10740 ;;		_nrf24l01SendPacket
 10741 ;;		_nrf24l01Init
 10742 ;;		i1_nrf24l01SetRXMode
 10743 ;; This function uses a non-reentrant model
 10744 ;;
 10745                           
 10746                           
 10747                           ;psect for function _nrf24l01CEHigh
 10748  166B                     _nrf24l01CEHigh:	
 10749                           
 10750                           ;interface.c: 13: PORTAbits.RA0 = 1;
 10751                           
 10752                           ;incstack = 0
 10753 ;; hardware stack exceeded
 10754                           ; Regs used in _nrf24l01CEHigh: []
 10755  166B  0020               	movlb	0	; select bank0
 10756  166C  140C               	bsf	12,0	;volatile
 10757  166D  0008               	return
 10758  166E                     __end_of_nrf24l01CEHigh:	
 10759                           
 10760                           	psect	text59
 10761  0888                     __ptext59:	
 10762 ;; *************** function _strcmp *****************
 10763 ;; Defined at:
 10764 ;;		line 33 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\strcmp.c"
 10765 ;; Parameters:    Size  Location     Type
 10766 ;;  s1              2    0[COMMON] PTR const unsigned char 
 10767 ;;		 -> packet.Message(32), packet.Message(32), NULL(0), RXPacket.Message(32), 
 10768 ;;		 -> RXPacket(33), main@packet(33), loop@packet(33), 
 10769 ;;  s2              1    2[COMMON] PTR const unsigned char 
 10770 ;;		 -> RXPacket.Message(32), RXPacket(33), 
 10771 ;; Auto vars:     Size  Location     Type
 10772 ;;  r               1    4[COMMON] char 
 10773 ;; Return value:  Size  Location     Type
 10774 ;;                  2    0[COMMON] int 
 10775 ;; Registers used:
 10776 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0
 10777 ;; Tracked objects:
 10778 ;;		On entry : 0/0
 10779 ;;		On exit  : 0/0
 10780 ;;		Unchanged: 0/0
 10781 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10782 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10783 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10784 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10785 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10786 ;;Total ram usage:        5 bytes
 10787 ;; Hardware stack levels used:    1
 10788 ;; This function calls:
 10789 ;;		Nothing
 10790 ;; This function is called by:
 10791 ;;		_nrf24l01CheckACK
 10792 ;; This function uses a non-reentrant model
 10793 ;;
 10794                           
 10795                           
 10796                           ;psect for function _strcmp
 10797  0888                     _strcmp:	
 10798                           
 10799                           ;incstack = 0
 10800                           ; Regs used in _strcmp: [wreg-fsr1h+status,2+status,0]
 10801  0888  2891               	goto	i1l2977
 10802  0889                     i1l2973:	
 10803  0889  3001               	movlw	1
 10804  088A  07F0               	addwf	strcmp@s1,f
 10805  088B  3000               	movlw	0
 10806  088C  3DF1               	addwfc	strcmp@s1+1,f
 10807  088D  3001               	movlw	1
 10808  088E  00F3               	movwf	??_strcmp
 10809  088F  0873               	movf	??_strcmp,w
 10810  0890  07F2               	addwf	strcmp@s2,f
 10811  0891                     i1l2977:	
 10812  0891  0870               	movf	strcmp@s1,w
 10813  0892  0086               	movwf	6
 10814  0893  0871               	movf	strcmp@s1+1,w
 10815  0894  0087               	movwf	7
 10816  0895  0872               	movf	strcmp@s2,w
 10817  0896  0084               	movwf	4
 10818  0897  3001               	movlw	1	; select bank2/3
 10819  0898  0085               	movwf	5
 10820  0899  0300               	decf	0,w
 10821  089A  3AFF               	xorlw	255
 10822  089B  0701               	addwf	1,w
 10823  089C  00F3               	movwf	??_strcmp
 10824  089D  0873               	movf	??_strcmp,w
 10825  089E  00F4               	movwf	strcmp@r
 10826  089F  0874               	movf	strcmp@r,w
 10827  08A0  1D03               	btfss	3,2
 10828  08A1  28A9               	goto	i1l2981
 10829  08A2  0870               	movf	strcmp@s1,w
 10830  08A3  0086               	movwf	6
 10831  08A4  0871               	movf	strcmp@s1+1,w
 10832  08A5  0087               	movwf	7
 10833  08A6  0801               	movf	1,w
 10834  08A7  1D03               	btfss	3,2
 10835  08A8  2889               	goto	i1l2973
 10836  08A9                     i1l2981:	
 10837  08A9  0874               	movf	strcmp@r,w
 10838  08AA  00F0               	movwf	?_strcmp
 10839  08AB  01F1               	clrf	?_strcmp+1
 10840  08AC  1BF0               	btfsc	?_strcmp,7
 10841  08AD  03F1               	decf	?_strcmp+1,f
 10842  08AE  0008               	return
 10843  08AF                     __end_of_strcmp:	
 10844                           
 10845                           	psect	text60
 10846  0002                     __ptext60:	
 10847 ;; *************** function _exception *****************
 10848 ;; Defined at:
 10849 ;;		line 80 in file "interface.c"
 10850 ;; Parameters:    Size  Location     Type
 10851 ;;  exception       1    wreg     unsigned char 
 10852 ;; Auto vars:     Size  Location     Type
 10853 ;;  exception       1    0[COMMON] unsigned char 
 10854 ;; Return value:  Size  Location     Type
 10855 ;;                  1    wreg      void 
 10856 ;; Registers used:
 10857 ;;		wreg
 10858 ;; Tracked objects:
 10859 ;;		On entry : 0/0
 10860 ;;		On exit  : 0/0
 10861 ;;		Unchanged: 0/0
 10862 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10863 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10864 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10865 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10866 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10867 ;;Total ram usage:        0 bytes
 10868 ;; Hardware stack levels used:    1
 10869 ;; This function calls:
 10870 ;;		Nothing
 10871 ;; This function is called by:
 10872 ;;		_nrf24l01ISR
 10873 ;; This function uses a non-reentrant model
 10874 ;;
 10875                           
 10876                           
 10877                           ;psect for function _exception
 10878  0002                     _exception:	
 10879                           
 10880                           ;incstack = 0
 10881                           ; Regs used in _exception: [wreg]
 10882  0002  0001               	reset	;# 
 10883  0003  0008               	return
 10884  0004                     __end_of_exception:	
 10885  007E                     btemp	set	126	;btemp
 10886  007E                     int$flags	set	126
 10887  007E                     wtemp0	set	126


Data Sizes:
    Strings     49
    Constant    46
    Data        1
    BSS         85
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     13      14
    BANK0            80     80      80
    BANK1            80     72      76
    BANK2            80     48      68
    BANK3            80      0      61
    BANK4            80      0       0
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    ftoa@status	PTR int  size(1) Largest target is 2
		 -> setMessage@status(BANK1[2]), 

    strlen@s	PTR const unsigned char  size(2) Largest target is 33
		 -> packet.Message(BANK0[32]), packet.Message(BANK0[32]), NULL(NULL[0]), RXPacket.Message(BANK3[32]), 
		 -> RXPacket(BANK3[33]), main@packet(BANK1[33]), loop@packet(BANK2[33]), romDataMap(BANK3[28]), 

    strlen@cp	PTR const unsigned char  size(2) Largest target is 33
		 -> packet.Message(BANK0[32]), packet.Message(BANK0[32]), NULL(NULL[0]), RXPacket.Message(BANK3[32]), 
		 -> RXPacket(BANK3[33]), main@packet(BANK1[33]), loop@packet(BANK2[33]), romDataMap(BANK3[28]), 

    strcpy@from	PTR const unsigned char  size(2) Largest target is 4
		 -> STR_8(CODE[4]), 

    strcpy@to	PTR unsigned char  size(1) Largest target is 28
		 -> romDataMap(BANK3[28]), 

    strcpy@cp	PTR unsigned char  size(1) Largest target is 28
		 -> romDataMap(BANK3[28]), 

    strcmp@s2	PTR const unsigned char  size(1) Largest target is 33
		 -> RXPacket.Message(BANK3[32]), RXPacket(BANK3[33]), 

    strcmp@s1	PTR const unsigned char  size(2) Largest target is 33
		 -> packet.Message(BANK0[32]), packet.Message(BANK0[32]), NULL(NULL[0]), RXPacket.Message(BANK3[32]), 
		 -> RXPacket(BANK3[33]), main@packet(BANK1[33]), loop@packet(BANK2[33]), 

    strcat@from	PTR const unsigned char  size(2) Largest target is 28
		 -> romDataMap.name(BANK3[16]), ftoa@buf(BANK2[17]), STR_9(CODE[5]), STR_7(CODE[6]), 
		 -> STR_6(CODE[7]), STR_5(CODE[5]), STR_4(CODE[5]), STR_3(CODE[4]), 
		 -> STR_2(CODE[2]), STR_1(CODE[2]), romDataMap(BANK3[28]), 

    strcat@to	PTR unsigned char  size(2) Largest target is 33
		 -> main@packet(BANK1[33]), loop@packet(BANK2[33]), 

    strcat@cp	PTR unsigned char  size(2) Largest target is 33
		 -> main@packet(BANK1[33]), loop@packet(BANK2[33]), 

    memset@p1	PTR void  size(2) Largest target is 33
		 -> RXPacket(BANK3[33]), main@packet(BANK1[33]), loop@packet(BANK2[33]), 

    memset@p	PTR unsigned char  size(2) Largest target is 33
		 -> RXPacket(BANK3[33]), main@packet(BANK1[33]), loop@packet(BANK2[33]), 

    ftoa@cp	PTR unsigned char  size(1) Largest target is 17
		 -> ftoa@buf(BANK2[17]), 

    sprintf@f	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_10(CODE[11]), 

    sprintf@sp	PTR unsigned char  size(1) Largest target is 17
		 -> ftoa@buf(BANK2[17]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    nrf24l01SendPacket@Packet	PTR struct . size(2) Largest target is 33
		 -> RXPacket(BANK3[33]), main@packet(BANK1[33]), loop@packet(BANK2[33]), 

    TXPacket	PTR struct . size(2) Largest target is 33
		 -> NULL(NULL[0]), RXPacket(BANK3[33]), main@packet(BANK1[33]), loop@packet(BANK2[33]), 

    nrf24l01SendACK@packet	PTR struct . size(1) Largest target is 33
		 -> RXPacket(BANK3[33]), 

    sp__strcpy	PTR unsigned char  size(1) Largest target is 28
		 -> romDataMap(BANK3[28]), 

    nrf24l01GetPipe@name	PTR unsigned char  size(1) Largest target is 28
		 -> romDataMap(BANK3[28]), 

    checkTXPower@rxPacket	PTR struct . size(1) Largest target is 33
		 -> RXPacket(BANK3[33]), 

    sp__ftoa	PTR unsigned char  size(1) Largest target is 17
		 -> ftoa@buf(BANK2[17]), 

    setMessage@topic	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_9(CODE[5]), STR_7(CODE[6]), STR_6(CODE[7]), STR_5(CODE[5]), 
		 -> STR_4(CODE[5]), STR_3(CODE[4]), 

    sp__strcat	PTR unsigned char  size(2) Largest target is 33
		 -> main@packet(BANK1[33]), loop@packet(BANK2[33]), 

    sp__memset	PTR void  size(2) Largest target is 33
		 -> RXPacket(BANK3[33]), main@packet(BANK1[33]), loop@packet(BANK2[33]), 

    setMessage@packet	PTR struct . size(2) Largest target is 33
		 -> main@packet(BANK1[33]), loop@packet(BANK2[33]), 

    sp__nrf24l01GetRXPacket	PTR struct . size(1) Largest target is 33
		 -> RXPacket(BANK3[33]), 

    handleRXData@RXPacket	PTR struct . size(1) Largest target is 33
		 -> RXPacket(BANK3[33]), 

    romData	PTR struct . size(1) Largest target is 28
		 -> romDataMap(BANK3[28]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    _ISR->_nrf24l01ISR
    _nrf24l01ISR->_nrf24l01ReceivePacket
    _nrf24l01ReceivePacket->i1_memset
    _nrf24l01CheckACK->i1_nrf24l01SetRXMode
    i1_nrf24l01SetRXMode->i1_nrf24l01Send

Critical Paths under _main in BANK0

    _nrf24l01Init->_nrf24l01InitRegisters
    _nrf24l01InitRegisters->_nrf24l01SetRXPipe
    _nrf24l01InitRegisters->_nrf24l01SetTXPipe
    _nrf24l01SetRXPipe->_nrf24l01Send
    _nrf24l01GetPipe->___lwmod
    _nrf24l01GetPipe->_strlen
    _sleep->_handleRXData
    _handleRXData->_nrf24l01SendACK
    _nrf24l01SendACK->_nrf24l01SendPacket
    _nrf24l01SetTXPipe->___bmul
    _nrf24l01SendPacket->_nrf24l01ChangeTXPower
    _nrf24l01SetRXMode->_nrf24l01Send
    _setMessage->_ftoa
    _strcat->_ftoa
    _ftoa->___fttol
    _sprintf->___llmod
    ___llmod->___lldiv
    ___lltoft->___ftpack
    ___fttol->___ftmul
    ___ftsub->___ftadd
    ___ftneg->_getADCValue
    ___ftmul->_getADCValue
    _getADCValue->___ftdiv
    ___ftdiv->___ftadd
    ___ftadd->___awtoft
    ___awtoft->___ftpack
    _checkTXPower->_nrf24l01ChangeTXPower
    _nrf24l01ChangeTXPower->_nrf24l01Send
    ___lbtoft->___ftpack

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_loop
    _loop->_setMessage
    _setMessage->_strcat
    _strcat->_ftoa
    _ftoa->___fttol

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    _main->_loop

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                36    36      0  112102
                                             36 BANK1     36    36      0
                           ___lbtoft
                               _loop
                    _nrf24l01GetPipe
                       _nrf24l01Init
                 _nrf24l01SendPacket
                  _nrf24l01SetRXPipe
                  _nrf24l01SetTXPipe
                         _setMessage
                              _sleep
                             _strcpy
 ---------------------------------------------------------------------------------
 (1) _strcpy                                               5     3      2     200
                                              0 BANK0      5     3      2
 ---------------------------------------------------------------------------------
 (1) _nrf24l01Init                                         2     2      0    5331
                                             19 BANK0      2     2      0
                     _nrf24l01CEHigh
                      _nrf24l01CELow
              _nrf24l01InitRegisters
              _nrf24l01InterfaceInit
 ---------------------------------------------------------------------------------
 (2) _nrf24l01InterfaceInit                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _nrf24l01InitRegisters                               12    12      0    5331
                                              7 BANK0     12    12      0
                             ___bmul
                     _nrf24l01SPIEnd
                    _nrf24l01SPISend
                   _nrf24l01SPIStart
                       _nrf24l01Send
                  _nrf24l01SetRXPipe
                  _nrf24l01SetTXPipe
 ---------------------------------------------------------------------------------
 (1) _nrf24l01SetRXPipe                                    4     4      0    2239
                                              3 BANK0      4     4      0
                       _nrf24l01Send
 ---------------------------------------------------------------------------------
 (1) _nrf24l01GetPipe                                      5     5      0     658
                                              6 BANK0      5     5      0
                            ___lwmod
                             _strlen
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              6     2      4     337
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (1) _loop                                                49    49      0   67858
                                             35 BANK1      1     1      0
                                              0 BANK2     48    48      0
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___ftneg
                           ___lbtoft
                       _checkTXPower
                        _getADCValue
                       _nrf24l01Send
                 _nrf24l01SendPacket
                         _setMessage
                              _sleep
 ---------------------------------------------------------------------------------
 (1) _sleep                                                2     0      2    9132
                                             18 BANK0      2     0      2
                            ___lwdiv
                         _doWDTSleep
                       _handleRXData
                  _nrf24l01SetRXMode
 ---------------------------------------------------------------------------------
 (2) _handleRXData                                         2     2      0    5891
                                             16 BANK0      2     2      0
                _nrf24l01GetRXPacket
                    _nrf24l01SendACK
 ---------------------------------------------------------------------------------
 (3) _nrf24l01SendACK                                      2     2      0    5846
                                             14 BANK0      2     2      0
                 _nrf24l01SendPacket
                  _nrf24l01SetTXPipe
 ---------------------------------------------------------------------------------
 (4) _nrf24l01SetTXPipe                                    3     3      0     314
                                              4 BANK0      3     3      0
                             ___bmul
                     _nrf24l01SPIEnd
                    _nrf24l01SPISend
                   _nrf24l01SPIStart
 ---------------------------------------------------------------------------------
 (5) ___bmul                                               4     3      1     270
                                              0 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (4) _nrf24l01SendPacket                                   7     5      2    5364
                                              7 BANK0      7     5      2
                   _enableInterrupts
                     _nrf24l01CEHigh
                      _nrf24l01CELow
              _nrf24l01ChangeTXPower
                     _nrf24l01SPIEnd
                    _nrf24l01SPISend
                   _nrf24l01SPIStart
                  _nrf24l01SetRXMode
                             _strlen
 ---------------------------------------------------------------------------------
 (5) _strlen                                               6     4      2     170
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (2) _nrf24l01SetRXMode                                    3     3      0    2277
                                              3 BANK0      3     3      0
                     _nrf24l01CEHigh
                      _nrf24l01CELow
                       _nrf24l01Send
 ---------------------------------------------------------------------------------
 (13) _nrf24l01CELow                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (13) _nrf24l01CEHigh                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              8     4      4     340
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (1) _setMessage                                          10     3      7   17881
                                             25 BANK1     10     3      7
                           ___lbtoft (ARG)
                               _ftoa
                        _getADCValue (ARG)
                             _memset
                             _strcat
 ---------------------------------------------------------------------------------
 (2) _strcat                                               6     2      4     743
                                             19 BANK1      6     2      4
                               _ftoa (ARG)
 ---------------------------------------------------------------------------------
 (2) _memset                                               8     2      6     476
                                              0 BANK0      8     2      6
 ---------------------------------------------------------------------------------
 (2) _ftoa                                                14    10      4   15156
                                             79 BANK0      1     1      0
                                              6 BANK1     13     9      4
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                           ___lltoft
                            _sprintf
 ---------------------------------------------------------------------------------
 (3) _sprintf                                             36    26     10    2229
                                             24 BANK0     28    18     10
                            ___lldiv
                            ___llmod
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (4) _isdigit                                              2     2      0      68
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4     448
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (4) ___llmod                                             10     2      8     337
                                             14 BANK0     10     2      8
                            ___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (4) ___lldiv                                             14     6      8     340
                                              0 BANK0     14     6      8
 ---------------------------------------------------------------------------------
 (3) ___lltoft                                             6     2      4    3131
                                              8 BANK0      6     2      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) ___fttol                                             14    10      4     430
                                             71 BANK0      8     4      4
                                              0 BANK1      6     6      0
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftsub                                              6     0      6    4770
                                             27 BANK0      6     0      6
                            ___ftadd
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftneg                                              3     0      3     223
                                             55 BANK0      3     0      3
                            ___ftadd (ARG)
                            ___ftdiv (ARG)
                        _getADCValue (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftmul                                             16    10      6    3655
                                             55 BANK0     16    10      6
                           ___ftpack
                        _getADCValue (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftge                                               9     3      6     314
                                              0 BANK0      9     3      6
 ---------------------------------------------------------------------------------
 (2) _getADCValue                                         12     9      3   11891
                                             43 BANK0     12     9      3
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                         _doWDTSleep
 ---------------------------------------------------------------------------------
 (2) _doWDTSleep                                           2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) ___ftdiv                                             16    10      6    3965
                                             27 BANK0     16    10      6
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) ___ftadd                                             13     7      6    4525
                                             14 BANK0     13     7      6
                           ___awtoft (ARG)
                           ___ftpack
                           ___ftpack (ARG)
 ---------------------------------------------------------------------------------
 (3) ___awtoft                                             6     3      3    3242
                                              8 BANK0      6     3      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) _checkTXPower                                         2     2      0    2457
                                              7 BANK0      2     2      0
              _nrf24l01ChangeTXPower
                _nrf24l01GetRXPacket
 ---------------------------------------------------------------------------------
 (3) _nrf24l01GetRXPacket                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _nrf24l01ChangeTXPower                                4     2      2    2434
                                              3 BANK0      4     2      2
                       _nrf24l01Send
 ---------------------------------------------------------------------------------
 (3) _nrf24l01Send                                         3     2      1    2143
                                              0 BANK0      3     2      1
                   _enableInterrupts
                     _nrf24l01SPIEnd
                    _nrf24l01SPISend
                   _nrf24l01SPIStart
 ---------------------------------------------------------------------------------
 (14) _nrf24l01SPIStart                                    0     0      0       0
                      _nrf24l01CSLow
 ---------------------------------------------------------------------------------
 (15) _nrf24l01CSLow                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (14) _nrf24l01SPISend                                     1     1      0      22
 ---------------------------------------------------------------------------------
 (14) _nrf24l01SPIEnd                                      0     0      0       0
                     _nrf24l01CSHigh
 ---------------------------------------------------------------------------------
 (15) _nrf24l01CSHigh                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (14) _enableInterrupts                                    1     1      0      22
 ---------------------------------------------------------------------------------
 (2) ___lbtoft                                             8     5      3    2995
                                              8 BANK0      8     5      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) ___ftpack                                             8     3      5    2973
                                              0 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 15
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (10) _ISR                                                 0     0      0    1957
                        _nrf24l01ISR
 ---------------------------------------------------------------------------------
 (11) _nrf24l01ISR                                         2     2      0    1957
                                             11 COMMON     2     2      0
                          _exception
                   _nrf24l01CheckACK
              _nrf24l01ReceivePacket
                     i1_nrf24l01Send
                i1_nrf24l01SetRXMode
 ---------------------------------------------------------------------------------
 (12) _nrf24l01ReceivePacket                               3     3      0     534
                                              8 COMMON     3     3      0
                     _nrf24l01CEHigh
                      _nrf24l01CELow
                     _nrf24l01SPIEnd
                    _nrf24l01SPISend
                   _nrf24l01SPIStart
                           i1_memset
                     i1_nrf24l01Send
 ---------------------------------------------------------------------------------
 (13) i1_memset                                            8     2      6     152
                                              0 COMMON     8     2      6
 ---------------------------------------------------------------------------------
 (12) _nrf24l01CheckACK                                    3     3      0     621
                                              7 COMMON     3     3      0
                             _strcmp
                i1_nrf24l01SetRXMode
 ---------------------------------------------------------------------------------
 (12) i1_nrf24l01SetRXMode                                 3     3      0     401
                                              4 COMMON     3     3      0
                     _nrf24l01CEHigh
                      _nrf24l01CELow
                     i1_nrf24l01Send
 ---------------------------------------------------------------------------------
 (13) i1_nrf24l01Send                                      3     2      1     267
                                              1 COMMON     3     2      1
                   _enableInterrupts
                     _nrf24l01SPIEnd
                    _nrf24l01SPISend
                   _nrf24l01SPIStart
 ---------------------------------------------------------------------------------
 (14) _nrf24l01SPIStart                                    0     0      0       0
                      _nrf24l01CSLow
 ---------------------------------------------------------------------------------
 (15) _nrf24l01CSLow                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (14) _nrf24l01SPISend                                     1     1      0      22
 ---------------------------------------------------------------------------------
 (14) _nrf24l01SPIEnd                                      0     0      0       0
                     _nrf24l01CSHigh
 ---------------------------------------------------------------------------------
 (15) _nrf24l01CSHigh                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (14) _enableInterrupts                                    1     1      0      22
 ---------------------------------------------------------------------------------
 (13) _nrf24l01CELow                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (13) _nrf24l01CEHigh                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (13) _strcmp                                              5     2      3     220
                                              0 COMMON     5     2      3
 ---------------------------------------------------------------------------------
 (12) _exception                                           1     1      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 15
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   ___lbtoft
     ___ftpack
   _loop
     ___awtoft
       ___ftpack
     ___ftadd
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___ftpack (ARG)
     ___ftdiv
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
     ___ftmul
       ___ftpack
       _getADCValue (ARG)
         ___awtoft
           ___ftpack
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftdiv
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
         _doWDTSleep
     ___ftneg
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
       _getADCValue (ARG)
         ___awtoft
           ___ftpack
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftdiv
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
         _doWDTSleep
     ___lbtoft
       ___ftpack
     _checkTXPower
       _nrf24l01ChangeTXPower
         _nrf24l01Send
           _enableInterrupts
           _nrf24l01SPIEnd
             _nrf24l01CSHigh
           _nrf24l01SPISend
           _nrf24l01SPIStart
             _nrf24l01CSLow
       _nrf24l01GetRXPacket
     _getADCValue
       ___awtoft
         ___ftpack
       ___ftadd
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftdiv
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
       _doWDTSleep
     _nrf24l01Send
       _enableInterrupts
       _nrf24l01SPIEnd
         _nrf24l01CSHigh
       _nrf24l01SPISend
       _nrf24l01SPIStart
         _nrf24l01CSLow
     _nrf24l01SendPacket
       _enableInterrupts
       _nrf24l01CEHigh
       _nrf24l01CELow
       _nrf24l01ChangeTXPower
         _nrf24l01Send
           _enableInterrupts
           _nrf24l01SPIEnd
             _nrf24l01CSHigh
           _nrf24l01SPISend
           _nrf24l01SPIStart
             _nrf24l01CSLow
       _nrf24l01SPIEnd
         _nrf24l01CSHigh
       _nrf24l01SPISend
       _nrf24l01SPIStart
         _nrf24l01CSLow
       _nrf24l01SetRXMode
         _nrf24l01CEHigh
         _nrf24l01CELow
         _nrf24l01Send
           _enableInterrupts
           _nrf24l01SPIEnd
             _nrf24l01CSHigh
           _nrf24l01SPISend
           _nrf24l01SPIStart
             _nrf24l01CSLow
       _strlen
     _setMessage
       ___lbtoft (ARG)
         ___ftpack
       _ftoa (ARG)
         ___ftge
         ___ftmul
           ___ftpack
           _getADCValue (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
             _doWDTSleep
         ___ftneg
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
           _getADCValue (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
             _doWDTSleep
         ___ftsub
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___fttol
           ___ftmul (ARG)
             ___ftpack
             _getADCValue (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               _doWDTSleep
         ___lltoft
           ___ftpack
         _sprintf
           ___lldiv
           ___llmod
             ___lldiv (ARG)
           ___wmul
           _isdigit
       _getADCValue (ARG)
         ___awtoft
           ___ftpack
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftdiv
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
         _doWDTSleep
       _memset (ARG)
       _strcat (ARG)
         _ftoa (ARG)
           ___ftge
           ___ftmul
             ___ftpack
             _getADCValue (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               _doWDTSleep
           ___ftneg
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
             _getADCValue (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               _doWDTSleep
           ___ftsub
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
           ___fttol
             ___ftmul (ARG)
               ___ftpack
               _getADCValue (ARG)
                 ___awtoft
                   ___ftpack
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                 _doWDTSleep
           ___lltoft
             ___ftpack
           _sprintf
             ___lldiv
             ___llmod
               ___lldiv (ARG)
             ___wmul
             _isdigit
     _sleep
       ___lwdiv
       _doWDTSleep
       _handleRXData
         _nrf24l01GetRXPacket
         _nrf24l01SendACK
           _nrf24l01SendPacket
             _enableInterrupts
             _nrf24l01CEHigh
             _nrf24l01CELow
             _nrf24l01ChangeTXPower
               _nrf24l01Send
                 _enableInterrupts
                 _nrf24l01SPIEnd
                   _nrf24l01CSHigh
                 _nrf24l01SPISend
                 _nrf24l01SPIStart
                   _nrf24l01CSLow
             _nrf24l01SPIEnd
               _nrf24l01CSHigh
             _nrf24l01SPISend
             _nrf24l01SPIStart
               _nrf24l01CSLow
             _nrf24l01SetRXMode
               _nrf24l01CEHigh
               _nrf24l01CELow
               _nrf24l01Send
                 _enableInterrupts
                 _nrf24l01SPIEnd
                   _nrf24l01CSHigh
                 _nrf24l01SPISend
                 _nrf24l01SPIStart
                   _nrf24l01CSLow
             _strlen
           _nrf24l01SetTXPipe
             ___bmul
             _nrf24l01SPIEnd
               _nrf24l01CSHigh
             _nrf24l01SPISend
             _nrf24l01SPIStart
               _nrf24l01CSLow
       _nrf24l01SetRXMode
         _nrf24l01CEHigh
         _nrf24l01CELow
         _nrf24l01Send
           _enableInterrupts
           _nrf24l01SPIEnd
             _nrf24l01CSHigh
           _nrf24l01SPISend
           _nrf24l01SPIStart
             _nrf24l01CSLow
   _nrf24l01GetPipe
     ___lwmod
     _strlen
   _nrf24l01Init
     _nrf24l01CEHigh
     _nrf24l01CELow
     _nrf24l01InitRegisters
       ___bmul
       _nrf24l01SPIEnd
         _nrf24l01CSHigh
       _nrf24l01SPISend
       _nrf24l01SPIStart
         _nrf24l01CSLow
       _nrf24l01Send
         _enableInterrupts
         _nrf24l01SPIEnd
           _nrf24l01CSHigh
         _nrf24l01SPISend
         _nrf24l01SPIStart
           _nrf24l01CSLow
       _nrf24l01SetRXPipe
         _nrf24l01Send
           _enableInterrupts
           _nrf24l01SPIEnd
             _nrf24l01CSHigh
           _nrf24l01SPISend
           _nrf24l01SPIStart
             _nrf24l01CSLow
       _nrf24l01SetTXPipe
         ___bmul
         _nrf24l01SPIEnd
           _nrf24l01CSHigh
         _nrf24l01SPISend
         _nrf24l01SPIStart
           _nrf24l01CSLow
     _nrf24l01InterfaceInit
   _nrf24l01SendPacket
     _enableInterrupts
     _nrf24l01CEHigh
     _nrf24l01CELow
     _nrf24l01ChangeTXPower
       _nrf24l01Send
         _enableInterrupts
         _nrf24l01SPIEnd
           _nrf24l01CSHigh
         _nrf24l01SPISend
         _nrf24l01SPIStart
           _nrf24l01CSLow
     _nrf24l01SPIEnd
       _nrf24l01CSHigh
     _nrf24l01SPISend
     _nrf24l01SPIStart
       _nrf24l01CSLow
     _nrf24l01SetRXMode
       _nrf24l01CEHigh
       _nrf24l01CELow
       _nrf24l01Send
         _enableInterrupts
         _nrf24l01SPIEnd
           _nrf24l01CSHigh
         _nrf24l01SPISend
         _nrf24l01SPIStart
           _nrf24l01CSLow
     _strlen
   _nrf24l01SetRXPipe
     _nrf24l01Send
       _enableInterrupts
       _nrf24l01SPIEnd
         _nrf24l01CSHigh
       _nrf24l01SPISend
       _nrf24l01SPIStart
         _nrf24l01CSLow
   _nrf24l01SetTXPipe
     ___bmul
     _nrf24l01SPIEnd
       _nrf24l01CSHigh
     _nrf24l01SPISend
     _nrf24l01SPIStart
       _nrf24l01CSLow
   _setMessage
     ___lbtoft (ARG)
       ___ftpack
     _ftoa (ARG)
       ___ftge
       ___ftmul
         ___ftpack
         _getADCValue (ARG)
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
           _doWDTSleep
       ___ftneg
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
         _getADCValue (ARG)
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
           _doWDTSleep
       ___ftsub
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___lltoft (ARG)
           ___ftpack
       ___fttol
         ___ftmul (ARG)
           ___ftpack
           _getADCValue (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
             _doWDTSleep
       ___lltoft
         ___ftpack
       _sprintf
         ___lldiv
         ___llmod
           ___lldiv (ARG)
         ___wmul
         _isdigit
     _getADCValue (ARG)
       ___awtoft
         ___ftpack
       ___ftadd
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftdiv
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
       _doWDTSleep
     _memset (ARG)
     _strcat (ARG)
       _ftoa (ARG)
         ___ftge
         ___ftmul
           ___ftpack
           _getADCValue (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
             _doWDTSleep
         ___ftneg
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
           _getADCValue (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
             _doWDTSleep
         ___ftsub
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___fttol
           ___ftmul (ARG)
             ___ftpack
             _getADCValue (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               _doWDTSleep
         ___lltoft
           ___ftpack
         _sprintf
           ___lldiv
           ___llmod
             ___lldiv (ARG)
           ___wmul
           _isdigit
   _sleep
     ___lwdiv
     _doWDTSleep
     _handleRXData
       _nrf24l01GetRXPacket
       _nrf24l01SendACK
         _nrf24l01SendPacket
           _enableInterrupts
           _nrf24l01CEHigh
           _nrf24l01CELow
           _nrf24l01ChangeTXPower
             _nrf24l01Send
               _enableInterrupts
               _nrf24l01SPIEnd
                 _nrf24l01CSHigh
               _nrf24l01SPISend
               _nrf24l01SPIStart
                 _nrf24l01CSLow
           _nrf24l01SPIEnd
             _nrf24l01CSHigh
           _nrf24l01SPISend
           _nrf24l01SPIStart
             _nrf24l01CSLow
           _nrf24l01SetRXMode
             _nrf24l01CEHigh
             _nrf24l01CELow
             _nrf24l01Send
               _enableInterrupts
               _nrf24l01SPIEnd
                 _nrf24l01CSHigh
               _nrf24l01SPISend
               _nrf24l01SPIStart
                 _nrf24l01CSLow
           _strlen
         _nrf24l01SetTXPipe
           ___bmul
           _nrf24l01SPIEnd
             _nrf24l01CSHigh
           _nrf24l01SPISend
           _nrf24l01SPIStart
             _nrf24l01CSLow
     _nrf24l01SetRXMode
       _nrf24l01CEHigh
       _nrf24l01CELow
       _nrf24l01Send
         _enableInterrupts
         _nrf24l01SPIEnd
           _nrf24l01CSHigh
         _nrf24l01SPISend
         _nrf24l01SPIStart
           _nrf24l01CSLow
   _strcpy

 _ISR (ROOT)
   _nrf24l01ISR
     _exception
     _nrf24l01CheckACK
       _strcmp
       i1_nrf24l01SetRXMode
         _nrf24l01CEHigh
         _nrf24l01CELow
         i1_nrf24l01Send
           _enableInterrupts
           _nrf24l01SPIEnd
             _nrf24l01CSHigh
           _nrf24l01SPISend
           _nrf24l01SPIStart
             _nrf24l01CSLow
     _nrf24l01ReceivePacket
       _nrf24l01CEHigh
       _nrf24l01CELow
       _nrf24l01SPIEnd
         _nrf24l01CSHigh
       _nrf24l01SPISend
       _nrf24l01SPIStart
         _nrf24l01CSLow
       i1_memset
       i1_nrf24l01Send
         _enableInterrupts
         _nrf24l01SPIEnd
           _nrf24l01CSHigh
         _nrf24l01SPISend
         _nrf24l01SPIStart
           _nrf24l01CSLow
     i1_nrf24l01Send
       _enableInterrupts
       _nrf24l01SPIEnd
         _nrf24l01CSHigh
       _nrf24l01SPISend
       _nrf24l01SPIStart
         _nrf24l01CSLow
     i1_nrf24l01SetRXMode
       _nrf24l01CEHigh
       _nrf24l01CELow
       i1_nrf24l01Send
         _enableInterrupts
         _nrf24l01SPIEnd
           _nrf24l01CSHigh
         _nrf24l01SPISend
         _nrf24l01SPIStart
           _nrf24l01CSLow

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      D       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     50      50       5      100.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50     48      4C       7       95.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50     30      44       9       85.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0      3D      11       76.3%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0     12B      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0     12B      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V2.00 build -1524193055 
Symbol Table                                                                                   Sat Jul 28 08:05:14 2018

                ___bmul@product 0022                     __CFG_CP$OFF 0000             ___wmul@multiplicand 0022  
           nrf24l01Send@command 0022                    ___ftadd@exp1 003A                    ___ftadd@exp2 0039  
                   __CFG_LVP$ON 0000                    ___ftadd@sign 0038                             l190 0DC7  
                           l334 082E                             l455 00D6                             l481 1778  
                           l466 0179                             l458 00F5                             l715 054E  
                           l299 0697                             l691 0CE3                             l692 0CEB  
                           l684 0CD0                             l775 07DC                    __CFG_CPD$OFF 0000  
                           _ISR 0004                             wreg 0009               sleep@milliseconds 0032  
           nrf24l01SendPacket@i 002D                            ?_ISR 0070                    ___ftdiv@cntr 0045  
                  ___ftdiv@sign 004A                  ??_nrf24l01Init 0033                            l3003 0EBA  
                          l3031 0F2A                            l3023 0F11                            l3009 0ED0  
                          l3113 0A37                            l3051 099A                            l2331 0B69  
                          l3123 0A66                            l2341 0ACF                            l3141 0D9E  
                          l3061 09B5                            l3125 0A4C                            l3143 0D8A  
                          l2431 069C                            l3303 0485                            l2601 0560  
                          l2513 1772                            l3057 09AC                            l3049 098E  
                          l2353 17E6                            l2433 06A8                            l2361 16BC  
                          l2347 0AE1                            l3139 0D96                            l2531 0C5B  
                          l2507 16B7                            l2355 17F2                            l2381 0CAD  
                          l2605 0572                            l2541 0C89                            l2533 0C69  
                          l2453 06E5                            l2365 16C2                            l3405 022E  
                          l3341 0931                            l2391 0CD5                            l2383 0CB7  
                          l2615 058D                            l2631 0B18                            l2703 0104  
                          l2471 071C                            l3343 093D                            l3351 0952  
                          l2393 0CDD                            l2385 0CBC                            l2377 0CA6  
                          l2545 0C94                            l2625 0AF2                            l2713 0123  
                          l2481 075A                            l2473 0728                            l2457 0706  
                          l2449 06CC                  ??_nrf24l01Send 0021                            l2555 04D7  
                          l2803 0FB4                            l2627 0B00                            l2635 0B23  
                          l2483 072D                            l3347 0949                            l3603 0E9F  
                          l2565 04ED                            l2725 0156                            l2583 051A  
                          l2559 04DE                            l2815 0FD0                            l2807 0FBC  
                          l2751 01E9                            l2735 018C                            l2719 0129  
                          l2671 0066                            l2585 0524                            l2577 0507  
                          l2841 17CB                            l2745 01A4                            l2737 018F  
                          l2729 0165                            l2665 0056                            l2753 0033  
                          l2921 16DB                            l3473 09BF                            l3297 0476  
                          l3289 042C                            l2595 0540                            l2587 0529  
                          l2763 0A09                            l2819 0FD8                            l2851 077A  
                          l2755 01F4                            l2691 00D2                            l3475 09E2  
                          l2597 054A                            l2589 052D                            l2693 00D8  
                          l3485 17AD                            l2767 0A1F                            l2791 0F79  
                          l2871 07C4                            l2679 0094                            l2951 05EB  
                          l2935 08B4                            l2785 0F63                            l2697 00DD  
                          l2689 00A3                            l2929 1725                            l2937 08C0  
                          l2883 07EE                            l2891 0905                            l2939 08C8  
                          l2877 07D2                            l2869 07B3                            l2893 0915  
                          l2879 07E0                            l2993 084D                            l2969 083A  
                          STR_1 1835                    __CFG_WDTE$ON 0000                            STR_2 1835  
                          STR_3 1831                            STR_4 181E                            STR_5 1823  
                          STR_6 180C                            STR_7 1813                            STR_8 182D  
                          STR_9 1828                            u2025 0700                            u2115 1779  
                          u2125 177E                            u2305 0508                            u3105 0EF2  
                          u3034 0834                            u3115 0F12                            u2155 0C5E  
                          u3035 0833                            u3125 0F21                            u3205 09AD  
                          u2335 051B                            u3135 0F2B                            u2175 0C6A  
                          u2185 0C7E                            u2195 0C8A                            u1805 0ABD  
                          u2365 052E                            u3165 0991                            u3405 0934  
                          u3095 0EE2                            u2455 0AF5                            u2615 015D  
                          u2625 016F                            u3185 099B                            u3425 0943  
                          u1915 0CCB                            u2395 0541                            u2475 0B0E  
                          u2635 0181                            u3195 09A5                            u3435 094A  
                          u2805 0FD9                            u2485 0B19                            u3525 09D0  
                          u1935 0CD8                            u2815 0FDF                            u2735 0F85  
                          u3607 0724                            u2745 0F95                            u3617 073F  
                          u2595 014C                            u3627 074B                            u2765 0FBD  
                          u2925 07D3                            u3637 075B                            u3557 0E20  
                          u1975 0CF2                            u1895 0CB2                            u2775 0FC3  
                          u3647 0B40                            u3567 0870                            u2865 0782  
                          u3657 0B55                            u3577 087F                            u2955 090A  
                          u3667 0B63                            u3587 06A4                            u3597 070D  
                          u2895 07B4                            i1l48 16A3                            _WPUA 020C  
                          _WPUC 020E  __size_of_nrf24l01InterfaceInit 001C                    __CFG_WRT$OFF 0000  
                 __CFG_FCMEN$ON 0000   __end_of_nrf24l01InterfaceInit 17A7                            _main 0DFE  
                          _ftoa 05A5                    ___ftpack@arg 0020                            _loop 01FA  
                  ___ftpack@exp 0023                            fsr0h 0005                            fsr1h 0007  
                          indf0 0000                            fsr0l 0004                            indf1 0001  
                          fsr1l 0006                            btemp 007E  __size_of_nrf24l01ReceivePacket 004D  
                 __CFG_BORV$LOW 0000   __end_of_nrf24l01ReceivePacket 0C4A                            start 000F  
         nrf24l01SetRXPipe@pipe 0025                   __CFG_CSWEN$ON 0000               ___bmul@multiplier 0023  
                 __CFG_MCLRE$ON 0000                    ___ftmul@cntr 0065                    ___ftmul@sign 0066  
   __size_of_nrf24l01SendPacket 00C8                           ??_ISR 007D                    ___fttol@exp1 00A5  
          __size_of_getADCValue 0094                 ??_nrf24l01CELow 0070                    ___fttol@lval 00A1  
               ??_nrf24l01CSLow 0070                           ?_main 0070                           ?_ftoa 00A6  
                         ?_loop 0070                 __end_of___ftadd 05A5                           STR_10 1801  
               __end_of___ftdiv 0F4C                 __end_of___ftneg 169D                 __end_of___lldiv 0C9D  
               __end_of___ftmul 1000                 __end_of___llmod 0B2C                 __end_of___ftsub 17E1  
               __end_of___fttol 07FE                  __CFG_DEBUG$OFF 0000                 __end_of___lwdiv 09BA  
                         i1l326 0BF4                           i1l167 000D                 __end_of___lwmod 0957  
        enableInterrupts@enable 0070                      i1memset@p1 0070                   __CFG_PWRTE$ON 0000  
         nrf24l01SetTXPipe@pipe 0026                    ___lltoft@exp 002D                   ___awtoft@sign 002D  
               __end_of_dpowers 1028                 __end_of_isdigit 16B9                           _sleep 0A2E  
                 ___ftpack@sign 0024                           ftoa@f 00A6                           ftoa@l 00AE  
                __CFG_BOREN$OFF 0000                _enableInterrupts 1684                           status 0003  
                         wtemp0 007E                 __end_of_sprintf 01FA     __end_ofi1_nrf24l01SetRXMode 0AAA  
              __end_ofi1_memset 1720  __size_of_nrf24l01ChangeTXPower 003F               getADCValue@adcSum 0054  
 __end_of_nrf24l01ChangeTXPower 0AE9                _nrf24l01SPIStart 168C                 __initialization 0011  
              _nrf24l01CheckACK 08D6          nrf24l01InitRegisters@i 0031                    __end_of_main 0EA3  
                  __end_of_ftoa 0697            __end_of_handleRXData 16DD                    __end_of_loop 03A9  
  nrf24l01ChangeTXPower@rfSetup 0026                ??_nrf24l01CEHigh 0070                          ??_main 00C4  
                        ??_ftoa 006F                   ___fttol@sign1 00A0                          ??_loop 00C3  
              ??_nrf24l01CSHigh 0070                ??_nrf24l01SPIEnd 0070             _nrf24l01GetRXPacket 07FE  
      __size_of_nrf24l01SPISend 000D                ___llmod@dividend 0032                          _ADRESH 009C  
                        _ADRESL 009B                          ?_sleep 0032                __end_of___awtoft 0864  
                        _ANSELA 018C                          _ANSELC 018E                __end_of___ftpack 0D02  
              __end_of___lbtoft 176F                __end_of___lltoft 092A                          _ODCONA 028C  
      __size_of_nrf24l01GetPipe 0038                          _ODCONC 028E                          i1l3213 0C44  
                        i1l3205 0C2C                          i1l2409 16A8                          i1l3209 0C3C  
                        i1l3085 0AA4                          i1l3093 170C                          i1l3371 0BD3  
                        i1l3363 0BC3                          i1l3385 0BF5                          i1l2981 08A9  
                        i1l2973 0889                          i1l2977 0891                          _INLVLA 038C  
                        _INLVLC 038E           __size_of_checkTXPower 0014                          u370_27 1690  
                        u371_27 167E                          u367_27 0A7D                          u368_27 0A91  
                        u369_27 0A9E                          _STATUS 0003        __size_of_nrf24l01SendACK 002E  
          ?_nrf24l01GetRXPacket 0070            __size_of_nrf24l01ISR 0049         nrf24l01SetRXMode@config 0024  
                        ___bmul 16B9                          ___ftge 09F2         nrf24l01SetRXMode@rxMode 0025  
                        ___wmul 176F                       ??___ftadd 0034                  __CFG_STVREN$ON 0000  
                     ??___ftdiv 0041                       ??___ftneg 005A                       ??___lldiv 0028  
                     ??___ftmul 005D                       ??___llmod 0036                       ??___ftsub 0041  
                     ??___fttol 006B                       ??___lwdiv 0024                       ??___lwmod 0024  
          __end_of_nrf24l01Init 0888            __end_of_nrf24l01Send 0821                          _memset 1720  
         _nrf24l01InitRegisters 03A9                          _strcat 08AF                          _strcmp 0888  
                        _strcpy 17A7                          _strlen 17E1                          ftoa@cp 00B2  
         ___ftmul@f3_as_product 0062       i1nrf24l01SetRXMode@config 0075                       ??_isdigit 0020  
                        loop@ta 0123                          loop@vt 0120       i1nrf24l01SetRXMode@rxMode 0076  
                  _checkTXPower 16DD                       ??_sprintf 0042              getADCValue@adcLoop 0051  
       __end_of__initialization 0029                      ___ftadd@f1 002E                      ___ftadd@f2 0031  
                    ___ftge@ff1 0020                      ___ftge@ff2 0023           ??_nrf24l01GetRXPacket 0020  
      nrf24l01SendPacket@Packet 0027              getADCValue@channel 0053                      ___ftdiv@f1 003E  
                    ___ftdiv@f2 003B                      ___ftdiv@f3 0046                      ___ftneg@f1 0057  
                    ___awtoft@c 0028                      ___lbtoft@c 002F             ___bmul@multiplicand 0020  
                    ___ftmul@f1 0057                      ___ftmul@f2 005A                      ___ftsub@f1 003E  
                    ___ftsub@f2 003B                      ___fttol@f1 0067                  __pcstackCOMMON 0070  
                  __pidataBANK1 0800                      ___lltoft@c 0028                      _doWDTSleep 16F1  
                 __end_of_sleep 0A6B                       ?i1_memset 0070                         ??_sleep 0034  
                  sprintf@width 004F                     loop@rfSetup 012E                      __pbssBANK1 00E8  
                    __pbssBANK2 0150                      __pbssBANK3 01A0               ??_nrf24l01SPISend 0070  
            __size_of_exception 0002           __size_of_handleRXData 0012         __size_ofi1_nrf24l01Send 001B  
             ??_nrf24l01GetPipe 0026                      __pmaintext 0DFE                  main@bootStatus 00C5  
                       ?___bmul 0020                         ?___ftge 0020                         ?___wmul 0020  
             ??_nrf24l01SendACK 002E                 __CFG_PPS1WAY$ON 0000               _nrf24l01SetRXMode 0B2C  
             _nrf24l01SetRXPipe 0821          ?_nrf24l01InitRegisters 0070                      __pintentry 0004  
             _nrf24l01SetTXPipe 0B70             nrf24l01SPISend@data 0070                         ?_memset 0020  
            ?_nrf24l01SetRXMode 0070                       ?___awtoft 0028                       ?___ftpack 0020  
                     ?___lbtoft 0028              ?_nrf24l01SetRXPipe 0070        __end_of_enableInterrupts 168C  
            ?_nrf24l01SetTXPipe 0070                       ?___lltoft 0028             __CFG_RSTOSC$HFINT32 0000  
                       ?_strcat 00B3                         ?_strcmp 0070                         ?_strcpy 0020  
                       ?_strlen 0020           __end_of_n_ADDRESS_MUL 1801                      ??i1_memset 0076  
           ??_nrf24l01SetRXMode 0023        __end_of_nrf24l01SPIStart 1694             ??_nrf24l01SetRXPipe 0023  
           ??_nrf24l01SetTXPipe 0024                         _SSP1BUF 0211        __end_of_nrf24l01CheckACK 0900  
                  _handleRXData 16CB           _nrf24l01InterfaceInit 178B      __end_of_nrf24l01SendPacket 075F  
                 ??_getADCValue 004E           __size_of_nrf24l01Init 0024           __size_of_nrf24l01Send 0020  
     __end_of_nrf24l01SetRXMode 0B70       __end_of_nrf24l01SetRXPipe 0842       __end_of_nrf24l01SetTXPipe 0BB4  
         _nrf24l01ReceivePacket 0BFD                 __size_of___bmul 0012                 __size_of___ftge 003C  
                       ___ftadd 04AF                     ?_doWDTSleep 0070                         ___ftdiv 0EA3  
                       ___ftneg 1694                         ___lldiv 0C4A                 __size_of___wmul 001C  
                       ___ftmul 0F4C                         ___llmod 0AE9                         ___ftsub 17C3  
                       ___fttol 075F                         ___lwdiv 0985                         ___lwmod 092A  
                    ??___awtoft 002B                      ??___ftpack 0025                      ??___lbtoft 002B  
         __end_of_nrf24l01CELow 1671                 __size_of_memset 0019           __end_of_nrf24l01CSLow 1677  
                    ??___lltoft 002C                         __ptext1 17A7                         __ptext2 0864  
                       __ptext3 178B                         __ptext4 03A9                         __ptext5 0821  
                       __ptext6 09BA                         __ptext7 092A                         __ptext8 01FA  
                       __ptext9 0A2E                 __size_of_strcat 0027                 __size_of_strcmp 0027  
             __end_of_exception 0004                 __size_of_strcpy 001C                 __size_of_strlen 001F  
                  __size_of_ISR 000B                         _counter 0150                         _dpowers 1000  
                       _isdigit 16AA                         _romData 00EB                         _sprintf 002D  
                       clrloop0 1678            end_of_initialization 0029                         ftoa@buf 0153  
                       ftoa@rem 00AA                    _nrf24l01Init 0864                      _setMessage 0D02  
                  _nrf24l01Send 0801                      _romDataMap 01C1                         memset@c 0022  
                       memset@n 0024                         memset@p 0026                nrf24l01GetPipe@i 002A  
               ___lldiv@divisor 0020                 ___lldiv@counter 002D           _nrf24l01ChangeTXPower 0AAA  
              setMessage@packet 00B9    __size_ofi1_nrf24l01SetRXMode 003F                setMessage@status 00C1  
                       strcmp@r 0074           i1nrf24l01Send@command 0073                         strlen@s 0020  
           __end_of_getADCValue 0DFE                       _PORTAbits 000C                       _PORTCbits 000E  
                     _TRISAbits 008C                       _TRISCbits 008E                nrf24l01Send@data 0020  
              __CFG_FEXTOSC$OFF 0000             __size_of_doWDTSleep 0017                   ??_nrf24l01ISR 007B  
        ?_nrf24l01InterfaceInit 0070                     ___ftdiv@exp 0049                  i1_nrf24l01Send 1739  
                    main@packet 00C7          ?_nrf24l01ReceivePacket 0070      __size_of_nrf24l01SetRXMode 0044  
    __size_of_nrf24l01SetRXPipe 0021                     ___ftmul@exp 0061      __size_of_nrf24l01SetTXPipe 0044  
                __end_of___bmul 16CB                  __end_of___ftge 0A2E                  __end_of___wmul 178B  
                     i1memset@c 0072                       i1memset@n 0074                       i1memset@p 0076  
                __end_of_memset 1739                  __end_of_strcat 08D6                  __end_of_strcmp 08AF  
                __end_of_strcpy 17C3                  __end_of_strlen 1800             start_initialization 0011  
               _nrf24l01SPISend 169D                     __end_of_ISR 000F                      ftoa@status 00A9  
             __size_ofi1_memset 0018       nrf24l01SetRXPipe@enRXAddr 0026                 _nrf24l01GetPipe 09BA  
   __end_of_nrf24l01GetRXPacket 0800         __size_of_nrf24l01CEHigh 0003         __size_of_nrf24l01CSHigh 0003  
                   ?_setMessage 00B9          __end_ofi1_nrf24l01Send 1754                 _nrf24l01SendACK 0957  
       __size_of_nrf24l01SPIEnd 0007                 ___llmod@divisor 002E                 ___llmod@counter 0037  
        ?_nrf24l01ChangeTXPower 0023         ??_nrf24l01InitRegisters 0027                __CFG_LPBOREN$OFF 0000  
                   _getADCValue 0D6A                        ??___bmul 0021                        ??___ftge 0026  
           __end_of_nrf24l01ISR 0BFD                        ??___wmul 0024                     __pdataBANK1 00EB  
                      ??_memset 0026               ?_enableInterrupts 0070                        ??_strcat 0070  
                      ??_strcmp 0073                        ??_strcpy 0022                        ??_strlen 0022  
             __size_of___awtoft 0022               __size_of___ftpack 0065               __size_of___lbtoft 001B  
            ??_enableInterrupts 0070               __size_of___lltoft 002A                     __pbssCOMMON 007D  
                     ___latbits 0002                   __pcstackBANK0 0020                   __pcstackBANK1 00A0  
                 __pcstackBANK2 0120                 doWDTSleep@wdtps 0021               ?_nrf24l01SPIStart 0070  
          checkTXPower@rxPacket 0028                    _isdigit$1812 0020               ?_nrf24l01CheckACK 0070  
            ??_nrf24l01SPIStart 0070              ??_nrf24l01CheckACK 0077                 ?i1_nrf24l01Send 0071  
                   sprintf@flag 0048                     sprintf@prec 0051                      loop@packet 012F  
           nrf24l01GetPipe@name 0029             nrf24l01GetPipe@pipe 0028                ___lwdiv@dividend 0022  
                  ??_doWDTSleep 0020                        ?___ftadd 002E                        ?___ftdiv 003B  
                      ?___ftneg 0057                        ?___lldiv 0020                        ?___ftmul 0057  
                      ?___llmod 002E                        ?___ftsub 003B                        ?___fttol 0067  
                      ?___lwdiv 0020                        ?___lwmod 0020            __end_of_n_ADDRESS_P0 181E  
       __end_of_nrf24l01SPISend 16AA              i1nrf24l01Send@data 0071       nrf24l01InitRegisters@enAA 002E  
           __size_of_setMessage 0068              _nrf24l01SendPacket 0697         __end_of_nrf24l01GetPipe 09F2  
                      ?_isdigit 0070                       _loop$2063 0126                       _loop$2064 0129  
       __end_of_nrf24l01SendACK 0985                       _exception 0002             ?_nrf24l01SendPacket 0027  
              ___lwdiv@quotient 0025                        ?_sprintf 0038             i1_nrf24l01SetRXMode 0A6B  
                __size_of_sleep 003D              __end_of_doWDTSleep 1708                  ___wmul@product 0024  
                   _nrf24l01ISR 0BB4                       clear_ram0 1677                        _PIE0bits 0090  
                      _PIR0bits 0010                       _sleepLoop 00EA            ??_nrf24l01SendPacket 0029  
               setMessage@value 00BD                 setMessage@topic 00BB            ?i1_nrf24l01SetRXMode 0070  
                    _ADCON0bits 009D                      _ADCON1bits 009E               ___wmul@multiplier 0020  
                      _WPUAbits 020C                        i1_memset 1708                   ?_checkTXPower 0070  
                      _RXPacket 01A0                        _TXPacket 00E8                      ?_exception 0070  
                _nrf24l01CEHigh 166B         ??_nrf24l01InterfaceInit 0020                  _nrf24l01CSHigh 1671  
             nrf24l01ISR@status 007C                  _nrf24l01SPIEnd 167D         ??_nrf24l01ReceivePacket 0078  
        __size_of_nrf24l01CELow 0003          __size_of_nrf24l01CSLow 0003           ??i1_nrf24l01SetRXMode 0074  
              __size_of___ftadd 00F6                __size_of___ftdiv 00A9                __size_of___ftneg 0009  
              __size_of___lldiv 0053                __size_of___ftmul 00B4                __size_of___llmod 0043  
              __size_of___ftsub 001E                __size_of___fttol 009F           nrf24l01SendACK@packet 002F  
              __size_of___lwdiv 0035                __size_of___lwmod 002D                        ___awtoft 0842  
                      ___ftpack 0C9D                        ___lbtoft 1754                ?_nrf24l01SPISend 0070  
                      ___lltoft 0900                      _ANSELAbits 018C                      _ANSELCbits 018E  
                ??_checkTXPower 0027                ?_nrf24l01GetPipe 0070                      sprintf@val 004A  
                 _n_ADDRESS_MUL 1800                      strcat@from 00B5          __end_of_nrf24l01CEHigh 166E  
              __size_of_isdigit 000F                 ___lwdiv@divisor 0020          __end_of_nrf24l01CSHigh 1674  
              ?_nrf24l01SendACK 0070                 ___lwdiv@counter 0027                        __ptext10 16CB  
                      __ptext11 0957                        __ptext20 1720                        __ptext12 0B70  
                      __ptext21 05A5                        __ptext13 16B9                        __ptext30 1694  
                      __ptext22 002D                        __ptext14 0697                        __ptext31 0F4C  
                      __ptext23 16AA                        __ptext15 17E1                        __ptext40 0AAA  
                      __ptext32 09F2                        __ptext24 176F                        __ptext16 0B2C  
                      __ptext41 0801                        __ptext33 0D6A                        __ptext25 0AE9  
                      __ptext17 0985                        __ptext50 1739                        __ptext42 1754  
                      __ptext34 16F1                        __ptext26 0C4A                        __ptext18 0D02  
                      __ptext51 168C                        __ptext43 0C9D                        __ptext35 0EA3  
                      __ptext27 0900                        __ptext19 08AF                        __ptext60 0002  
                      __ptext52 1674                        __ptext36 04AF                        __ptext28 075F  
                      __ptext53 169D                        __ptext45 0BB4                        __ptext37 0842  
                      __ptext29 17C3                        __ptext54 167D                        __ptext46 0BFD  
                      __ptext38 16DD                        __ptext55 1671                        __ptext47 1708  
                      __ptext39 07FE                        __ptext56 1684                        __ptext48 08D6  
                      __ptext57 166E                        __ptext49 0A6B                        __ptext58 166B  
                      __ptext59 0888                    _SSP1CON1bits 0215          __end_of_nrf24l01SPIEnd 1684  
                      _nrf24l01 007D                __size_of_sprintf 01CD                     _OSCCON1bits 0919  
                  ??_setMessage 00C0                      strcpy@from 0020   nrf24l01ChangeTXPower@addPower 0023  
                      _loop$877 012C         ??_nrf24l01ChangeTXPower 0025                   __size_of_main 00A5  
                 __size_of_ftoa 00F2                   __size_of_loop 01AF    nrf24l01InitRegisters@channel 0029  
  nrf24l01InitRegisters@feature 002B              exception@exception 0070                      _RC0PPSbits 0EA0  
  nrf24l01InitRegisters@rfSetup 002C                      _RC1PPSbits 0EA1                    ?_getADCValue 004B  
                    _RC2PPSbits 0EA2  __size_of_nrf24l01InitRegisters 0106   __end_of_nrf24l01InitRegisters 04AF  
                      int$flags 007E    nrf24l01InitRegisters@setupAW 002A                      _ODCONAbits 028C  
                  _SSP1STATbits 0214                        main@pipe 00C6          nrf24l01ReceivePacket@i 007A  
                 _nrf24l01CELow 166E                   _nrf24l01CSLow 1674              __end_of_setMessage 0D6A  
                    _INTCONbits 000B                 ?_nrf24l01CEHigh 0070                      _FVRCONbits 0117  
              ??i1_nrf24l01Send 0072                     ??_exception 0070                 ?_nrf24l01CSHigh 0070  
                __pstringtext10 1831                  __pstringtext11 1835                  __pstringtext12 0000  
                      isdigit@c 0021                        memset@p1 0020                   ?_handleRXData 0070  
               ?_nrf24l01SPIEnd 0070            handleRXData@RXPacket 0031                        intlevel1 0000  
                     sprintf@ap 0049                       sprintf@sp 004E                    _n_ADDRESS_P0 1819  
     __size_of_enableInterrupts 0008                ___lwmod@dividend 0022                ___lldiv@dividend 0024  
             __CFG_CLKOUTEN$OFF 0000    __size_of_nrf24l01GetRXPacket 0002     nrf24l01InitRegisters@config 0030  
     __size_of_nrf24l01SPIStart 0008       __size_of_nrf24l01CheckACK 002A     nrf24l01InitRegisters@status 002D  
    nrf24l01ReceivePacket@width 0079                  ?_nrf24l01CELow 0070                   __pstringtext1 1000  
                 __pstringtext2 1819                   __pstringtext3 1800                   __pstringtext4 180C  
                 __pstringtext5 1813                   __pstringtext6 181E                   __pstringtext7 1823  
                 __pstringtext8 1828                   __pstringtext9 182D                  ?_nrf24l01CSLow 0070  
                      sprintf@c 0053                        sprintf@f 0038      nrf24l01InitRegisters@DynPD 002F  
                      strcat@cp 00B7                        strcat@to 00B3                        strcmp@s1 0070  
                      strcmp@s2 0072                ___lldiv@quotient 0029                 ___lwmod@divisor 0020  
                      strcpy@cp 0024                        strlen@cp 0024                        strcpy@to 0023  
               ___lwmod@counter 0025                  ??_handleRXData 0030                      _WDTCONbits 0097  
                 ?_nrf24l01Init 0070                   ?_nrf24l01Send 0020                    ?_nrf24l01ISR 0070  
          __end_of_checkTXPower 16F1  
