

Microchip Technology PIC LITE Macro Assembler V2.00 build -1524193055 
                                                                                               Thu Jul 26 12:47:22 2018

Microchip Technology Omniscient Code Generator v2.00 (Free mode) build 20180527130849
     1                           	processor	16LF18325
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK1,global,class=CODE,delta=2
     5                           	psect	stringtext1,global,class=STRCODE,delta=2
     6                           	psect	stringtext2,global,class=STRCODE,delta=2
     7                           	psect	stringtext3,global,class=STRCODE,delta=2
     8                           	psect	stringtext4,global,class=STRCODE,delta=2
     9                           	psect	stringtext5,global,class=STRCODE,delta=2
    10                           	psect	stringtext6,global,class=STRCODE,delta=2
    11                           	psect	stringtext7,global,class=STRCODE,delta=2
    12                           	psect	stringtext8,global,class=STRCODE,delta=2
    13                           	psect	stringtext9,global,class=STRCODE,delta=2
    14                           	psect	stringtext10,global,class=STRCODE,delta=2
    15                           	psect	stringtext11,global,class=STRCODE,delta=2
    16                           	psect	cinit,global,class=CODE,merge=1,delta=2
    17                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
    18                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    19                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    20                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    21                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    22                           	psect	clrtext,global,class=CODE,delta=2
    23                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1
    24                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    25                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    26                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    27                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    28                           	psect	text1,local,class=CODE,merge=1,delta=2,group=2
    29                           	psect	text2,local,class=CODE,merge=1,delta=2
    30                           	psect	text3,local,class=CODE,merge=1,delta=2
    31                           	psect	text4,local,class=CODE,merge=1,delta=2
    32                           	psect	text5,local,class=CODE,merge=1,delta=2
    33                           	psect	text6,local,class=CODE,merge=1,delta=2,group=1
    34                           	psect	text7,local,class=CODE,merge=1,delta=2
    35                           	psect	text8,local,class=CODE,merge=1,delta=2
    36                           	psect	text9,local,class=CODE,merge=1,delta=2,group=1
    37                           	psect	text10,local,class=CODE,merge=1,delta=2
    38                           	psect	text11,local,class=CODE,merge=1,delta=2
    39                           	psect	text12,local,class=CODE,merge=1,delta=2,group=2
    40                           	psect	text13,local,class=CODE,merge=1,delta=2,group=2
    41                           	psect	text14,local,class=CODE,merge=1,delta=2,group=2
    42                           	psect	text15,local,class=CODE,merge=1,delta=2
    43                           	psect	text16,local,class=CODE,merge=1,delta=2,group=2
    44                           	psect	text17,local,class=CODE,merge=1,delta=2,group=1
    45                           	psect	text18,local,class=CODE,merge=1,delta=2,group=1
    46                           	psect	text19,local,class=CODE,merge=1,delta=2,group=1
    47                           	psect	text20,local,class=CODE,merge=1,delta=2,group=1
    48                           	psect	text21,local,class=CODE,merge=1,delta=2,group=1
    49                           	psect	text22,local,class=CODE,merge=1,delta=2,group=1
    50                           	psect	text23,local,class=CODE,merge=1,delta=2,group=1
    51                           	psect	text24,local,class=CODE,merge=1,delta=2,group=1
    52                           	psect	text25,local,class=CODE,merge=1,delta=2,group=1
    53                           	psect	text26,local,class=CODE,merge=1,delta=2
    54                           	psect	text27,local,class=CODE,merge=1,delta=2,group=2
    55                           	psect	text28,local,class=CODE,merge=1,delta=2
    56                           	psect	text29,local,class=CODE,merge=1,delta=2
    57                           	psect	text30,local,class=CODE,merge=1,delta=2
    58                           	psect	text31,local,class=CODE,merge=1,delta=2,group=1
    59                           	psect	text32,local,class=CODE,merge=1,delta=2,group=1
    60                           	psect	text33,local,class=CODE,merge=1,delta=2,group=1
    61                           	psect	text34,local,class=CODE,merge=1,delta=2
    62                           	psect	text35,local,class=CODE,merge=1,delta=2
    63                           	psect	text36,local,class=CODE,merge=1,delta=2
    64                           	psect	text37,local,class=CODE,merge=1,delta=2
    65                           	psect	text38,local,class=CODE,merge=1,delta=2,group=1
    66                           	psect	text39,local,class=CODE,merge=1,delta=2,group=1
    67                           	psect	text40,local,class=CODE,merge=1,delta=2,group=1
    68                           	psect	intentry,global,class=CODE,delta=2
    69                           	psect	text42,local,class=CODE,merge=1,delta=2
    70                           	psect	text43,local,class=CODE,merge=1,delta=2
    71                           	psect	text44,local,class=CODE,merge=1,delta=2
    72                           	psect	text45,local,class=CODE,merge=1,delta=2
    73                           	psect	text46,local,class=CODE,merge=1,delta=2
    74                           	psect	text47,local,class=CODE,merge=1,delta=2
    75                           	psect	text48,local,class=CODE,merge=1,delta=2
    76                           	psect	text49,local,class=CODE,merge=1,delta=2
    77                           	psect	text50,local,class=CODE,merge=1,delta=2
    78                           	psect	text51,local,class=CODE,merge=1,delta=2
    79                           	psect	text52,local,class=CODE,merge=1,delta=2
    80                           	psect	text53,local,class=CODE,merge=1,delta=2
    81                           	psect	text54,local,class=CODE,merge=1,delta=2
    82                           	psect	text55,local,class=CODE,merge=1,delta=2
    83                           	psect	text56,local,class=CODE,merge=1,delta=2,group=2
    84                           	psect	text57,local,class=CODE,merge=1,delta=2
    85                           	dabs	1,0x7E,2
    86  0000                     
    87                           ; Version 2.00
    88                           ; Generated 27/05/2018 GMT
    89                           ; 
    90                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
    91                           ; All rights reserved.
    92                           ; 
    93                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    94                           ; 
    95                           ; Redistribution and use in source and binary forms, with or without modification, are
    96                           ; permitted provided that the following conditions are met:
    97                           ; 
    98                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    99                           ;        conditions and the following disclaimer.
   100                           ; 
   101                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   102                           ;        of conditions and the following disclaimer in the documentation and/or other
   103                           ;        materials provided with the distribution.
   104                           ; 
   105                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   106                           ;        software without specific prior written permission.
   107                           ; 
   108                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   109                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   110                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   111                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   112                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   113                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   114                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   115                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   116                           ; 
   117                           ; 
   118                           ; Code-generator required, PIC16LF18325 Definitions
   119                           ; 
   120                           ; SFR Addresses
   121  0000                     	;# 
   122  0001                     	;# 
   123  0002                     	;# 
   124  0003                     	;# 
   125  0004                     	;# 
   126  0005                     	;# 
   127  0006                     	;# 
   128  0007                     	;# 
   129  0008                     	;# 
   130  0009                     	;# 
   131  000A                     	;# 
   132  000B                     	;# 
   133  000C                     	;# 
   134  000E                     	;# 
   135  0010                     	;# 
   136  0011                     	;# 
   137  0012                     	;# 
   138  0013                     	;# 
   139  0014                     	;# 
   140  0015                     	;# 
   141  0015                     	;# 
   142  0016                     	;# 
   143  0016                     	;# 
   144  0017                     	;# 
   145  0018                     	;# 
   146  0019                     	;# 
   147  0019                     	;# 
   148  001A                     	;# 
   149  001B                     	;# 
   150  001C                     	;# 
   151  001D                     	;# 
   152  001E                     	;# 
   153  001F                     	;# 
   154  008C                     	;# 
   155  008E                     	;# 
   156  0090                     	;# 
   157  0091                     	;# 
   158  0092                     	;# 
   159  0093                     	;# 
   160  0094                     	;# 
   161  0097                     	;# 
   162  009B                     	;# 
   163  009B                     	;# 
   164  009C                     	;# 
   165  009D                     	;# 
   166  009E                     	;# 
   167  009F                     	;# 
   168  010C                     	;# 
   169  010E                     	;# 
   170  0111                     	;# 
   171  0112                     	;# 
   172  0113                     	;# 
   173  0114                     	;# 
   174  0115                     	;# 
   175  0116                     	;# 
   176  0117                     	;# 
   177  0118                     	;# 
   178  0119                     	;# 
   179  018C                     	;# 
   180  018E                     	;# 
   181  0199                     	;# 
   182  0199                     	;# 
   183  0199                     	;# 
   184  019A                     	;# 
   185  019A                     	;# 
   186  019A                     	;# 
   187  019B                     	;# 
   188  019B                     	;# 
   189  019B                     	;# 
   190  019B                     	;# 
   191  019B                     	;# 
   192  019C                     	;# 
   193  019C                     	;# 
   194  019C                     	;# 
   195  019D                     	;# 
   196  019D                     	;# 
   197  019D                     	;# 
   198  019E                     	;# 
   199  019E                     	;# 
   200  019E                     	;# 
   201  019F                     	;# 
   202  019F                     	;# 
   203  019F                     	;# 
   204  019F                     	;# 
   205  019F                     	;# 
   206  020C                     	;# 
   207  020E                     	;# 
   208  0211                     	;# 
   209  0211                     	;# 
   210  0212                     	;# 
   211  0212                     	;# 
   212  0213                     	;# 
   213  0213                     	;# 
   214  0214                     	;# 
   215  0214                     	;# 
   216  0215                     	;# 
   217  0215                     	;# 
   218  0215                     	;# 
   219  0215                     	;# 
   220  0216                     	;# 
   221  0216                     	;# 
   222  0217                     	;# 
   223  0217                     	;# 
   224  0219                     	;# 
   225  021A                     	;# 
   226  021B                     	;# 
   227  021C                     	;# 
   228  021D                     	;# 
   229  021D                     	;# 
   230  021E                     	;# 
   231  021F                     	;# 
   232  028C                     	;# 
   233  028E                     	;# 
   234  0291                     	;# 
   235  0291                     	;# 
   236  0292                     	;# 
   237  0293                     	;# 
   238  0294                     	;# 
   239  0295                     	;# 
   240  0295                     	;# 
   241  0296                     	;# 
   242  0297                     	;# 
   243  0298                     	;# 
   244  029F                     	;# 
   245  030C                     	;# 
   246  030E                     	;# 
   247  0311                     	;# 
   248  0311                     	;# 
   249  0312                     	;# 
   250  0313                     	;# 
   251  0314                     	;# 
   252  0315                     	;# 
   253  0315                     	;# 
   254  0316                     	;# 
   255  0317                     	;# 
   256  0318                     	;# 
   257  038C                     	;# 
   258  038E                     	;# 
   259  0391                     	;# 
   260  0392                     	;# 
   261  0393                     	;# 
   262  0397                     	;# 
   263  0398                     	;# 
   264  0399                     	;# 
   265  039A                     	;# 
   266  039C                     	;# 
   267  039D                     	;# 
   268  039E                     	;# 
   269  039F                     	;# 
   270  0411                     	;# 
   271  0411                     	;# 
   272  0412                     	;# 
   273  0413                     	;# 
   274  0414                     	;# 
   275  0415                     	;# 
   276  0416                     	;# 
   277  0417                     	;# 
   278  0418                     	;# 
   279  0418                     	;# 
   280  0419                     	;# 
   281  041A                     	;# 
   282  041B                     	;# 
   283  041C                     	;# 
   284  041D                     	;# 
   285  041E                     	;# 
   286  041F                     	;# 
   287  0498                     	;# 
   288  0498                     	;# 
   289  0499                     	;# 
   290  049A                     	;# 
   291  049B                     	;# 
   292  049B                     	;# 
   293  049C                     	;# 
   294  049D                     	;# 
   295  049E                     	;# 
   296  049F                     	;# 
   297  0617                     	;# 
   298  0618                     	;# 
   299  0619                     	;# 
   300  0619                     	;# 
   301  061A                     	;# 
   302  061B                     	;# 
   303  061C                     	;# 
   304  061C                     	;# 
   305  061F                     	;# 
   306  0691                     	;# 
   307  0692                     	;# 
   308  0693                     	;# 
   309  0694                     	;# 
   310  0695                     	;# 
   311  0696                     	;# 
   312  0697                     	;# 
   313  0698                     	;# 
   314  0699                     	;# 
   315  0711                     	;# 
   316  0712                     	;# 
   317  0713                     	;# 
   318  0714                     	;# 
   319  0715                     	;# 
   320  0716                     	;# 
   321  0717                     	;# 
   322  0718                     	;# 
   323  0719                     	;# 
   324  0891                     	;# 
   325  0891                     	;# 
   326  0891                     	;# 
   327  0891                     	;# 
   328  0891                     	;# 
   329  0891                     	;# 
   330  0892                     	;# 
   331  0892                     	;# 
   332  0892                     	;# 
   333  0893                     	;# 
   334  0893                     	;# 
   335  0893                     	;# 
   336  0893                     	;# 
   337  0893                     	;# 
   338  0893                     	;# 
   339  0894                     	;# 
   340  0894                     	;# 
   341  0894                     	;# 
   342  0895                     	;# 
   343  0895                     	;# 
   344  0895                     	;# 
   345  0896                     	;# 
   346  0896                     	;# 
   347  0896                     	;# 
   348  089B                     	;# 
   349  0911                     	;# 
   350  0912                     	;# 
   351  0913                     	;# 
   352  0914                     	;# 
   353  0915                     	;# 
   354  0916                     	;# 
   355  0918                     	;# 
   356  0919                     	;# 
   357  091A                     	;# 
   358  091B                     	;# 
   359  091C                     	;# 
   360  091D                     	;# 
   361  091E                     	;# 
   362  091F                     	;# 
   363  0E0F                     	;# 
   364  0E10                     	;# 
   365  0E11                     	;# 
   366  0E12                     	;# 
   367  0E13                     	;# 
   368  0E14                     	;# 
   369  0E15                     	;# 
   370  0E16                     	;# 
   371  0E17                     	;# 
   372  0E18                     	;# 
   373  0E19                     	;# 
   374  0E1A                     	;# 
   375  0E1B                     	;# 
   376  0E1C                     	;# 
   377  0E1D                     	;# 
   378  0E1E                     	;# 
   379  0E1F                     	;# 
   380  0E20                     	;# 
   381  0E21                     	;# 
   382  0E22                     	;# 
   383  0E24                     	;# 
   384  0E25                     	;# 
   385  0E28                     	;# 
   386  0E29                     	;# 
   387  0E2A                     	;# 
   388  0E2B                     	;# 
   389  0E2C                     	;# 
   390  0E2D                     	;# 
   391  0E2E                     	;# 
   392  0E2F                     	;# 
   393  0E90                     	;# 
   394  0E91                     	;# 
   395  0E92                     	;# 
   396  0E94                     	;# 
   397  0E95                     	;# 
   398  0EA0                     	;# 
   399  0EA1                     	;# 
   400  0EA2                     	;# 
   401  0EA3                     	;# 
   402  0EA4                     	;# 
   403  0EA5                     	;# 
   404  0F0F                     	;# 
   405  0F10                     	;# 
   406  0F11                     	;# 
   407  0F12                     	;# 
   408  0F13                     	;# 
   409  0F14                     	;# 
   410  0F15                     	;# 
   411  0F16                     	;# 
   412  0F17                     	;# 
   413  0F18                     	;# 
   414  0F19                     	;# 
   415  0F1A                     	;# 
   416  0F1B                     	;# 
   417  0F1C                     	;# 
   418  0F1D                     	;# 
   419  0F1E                     	;# 
   420  0F1F                     	;# 
   421  0F20                     	;# 
   422  0F21                     	;# 
   423  0F22                     	;# 
   424  0F23                     	;# 
   425  0F24                     	;# 
   426  0F25                     	;# 
   427  0F26                     	;# 
   428  0F27                     	;# 
   429  0F28                     	;# 
   430  0F29                     	;# 
   431  0F2A                     	;# 
   432  0F2B                     	;# 
   433  0F2C                     	;# 
   434  0F2D                     	;# 
   435  0F2E                     	;# 
   436  0F2F                     	;# 
   437  0F30                     	;# 
   438  0F31                     	;# 
   439  0F32                     	;# 
   440  0F33                     	;# 
   441  0F34                     	;# 
   442  0F35                     	;# 
   443  0F36                     	;# 
   444  0F37                     	;# 
   445  0FE4                     	;# 
   446  0FE5                     	;# 
   447  0FE6                     	;# 
   448  0FE7                     	;# 
   449  0FE8                     	;# 
   450  0FE9                     	;# 
   451  0FEA                     	;# 
   452  0FEB                     	;# 
   453  0FED                     	;# 
   454  0FEE                     	;# 
   455  0FEF                     	;# 
   456  0000                     	;# 
   457  0001                     	;# 
   458  0002                     	;# 
   459  0003                     	;# 
   460  0004                     	;# 
   461  0005                     	;# 
   462  0006                     	;# 
   463  0007                     	;# 
   464  0008                     	;# 
   465  0009                     	;# 
   466  000A                     	;# 
   467  000B                     	;# 
   468  000C                     	;# 
   469  000E                     	;# 
   470  0010                     	;# 
   471  0011                     	;# 
   472  0012                     	;# 
   473  0013                     	;# 
   474  0014                     	;# 
   475  0015                     	;# 
   476  0015                     	;# 
   477  0016                     	;# 
   478  0016                     	;# 
   479  0017                     	;# 
   480  0018                     	;# 
   481  0019                     	;# 
   482  0019                     	;# 
   483  001A                     	;# 
   484  001B                     	;# 
   485  001C                     	;# 
   486  001D                     	;# 
   487  001E                     	;# 
   488  001F                     	;# 
   489  008C                     	;# 
   490  008E                     	;# 
   491  0090                     	;# 
   492  0091                     	;# 
   493  0092                     	;# 
   494  0093                     	;# 
   495  0094                     	;# 
   496  0097                     	;# 
   497  009B                     	;# 
   498  009B                     	;# 
   499  009C                     	;# 
   500  009D                     	;# 
   501  009E                     	;# 
   502  009F                     	;# 
   503  010C                     	;# 
   504  010E                     	;# 
   505  0111                     	;# 
   506  0112                     	;# 
   507  0113                     	;# 
   508  0114                     	;# 
   509  0115                     	;# 
   510  0116                     	;# 
   511  0117                     	;# 
   512  0118                     	;# 
   513  0119                     	;# 
   514  018C                     	;# 
   515  018E                     	;# 
   516  0199                     	;# 
   517  0199                     	;# 
   518  0199                     	;# 
   519  019A                     	;# 
   520  019A                     	;# 
   521  019A                     	;# 
   522  019B                     	;# 
   523  019B                     	;# 
   524  019B                     	;# 
   525  019B                     	;# 
   526  019B                     	;# 
   527  019C                     	;# 
   528  019C                     	;# 
   529  019C                     	;# 
   530  019D                     	;# 
   531  019D                     	;# 
   532  019D                     	;# 
   533  019E                     	;# 
   534  019E                     	;# 
   535  019E                     	;# 
   536  019F                     	;# 
   537  019F                     	;# 
   538  019F                     	;# 
   539  019F                     	;# 
   540  019F                     	;# 
   541  020C                     	;# 
   542  020E                     	;# 
   543  0211                     	;# 
   544  0211                     	;# 
   545  0212                     	;# 
   546  0212                     	;# 
   547  0213                     	;# 
   548  0213                     	;# 
   549  0214                     	;# 
   550  0214                     	;# 
   551  0215                     	;# 
   552  0215                     	;# 
   553  0215                     	;# 
   554  0215                     	;# 
   555  0216                     	;# 
   556  0216                     	;# 
   557  0217                     	;# 
   558  0217                     	;# 
   559  0219                     	;# 
   560  021A                     	;# 
   561  021B                     	;# 
   562  021C                     	;# 
   563  021D                     	;# 
   564  021D                     	;# 
   565  021E                     	;# 
   566  021F                     	;# 
   567  028C                     	;# 
   568  028E                     	;# 
   569  0291                     	;# 
   570  0291                     	;# 
   571  0292                     	;# 
   572  0293                     	;# 
   573  0294                     	;# 
   574  0295                     	;# 
   575  0295                     	;# 
   576  0296                     	;# 
   577  0297                     	;# 
   578  0298                     	;# 
   579  029F                     	;# 
   580  030C                     	;# 
   581  030E                     	;# 
   582  0311                     	;# 
   583  0311                     	;# 
   584  0312                     	;# 
   585  0313                     	;# 
   586  0314                     	;# 
   587  0315                     	;# 
   588  0315                     	;# 
   589  0316                     	;# 
   590  0317                     	;# 
   591  0318                     	;# 
   592  038C                     	;# 
   593  038E                     	;# 
   594  0391                     	;# 
   595  0392                     	;# 
   596  0393                     	;# 
   597  0397                     	;# 
   598  0398                     	;# 
   599  0399                     	;# 
   600  039A                     	;# 
   601  039C                     	;# 
   602  039D                     	;# 
   603  039E                     	;# 
   604  039F                     	;# 
   605  0411                     	;# 
   606  0411                     	;# 
   607  0412                     	;# 
   608  0413                     	;# 
   609  0414                     	;# 
   610  0415                     	;# 
   611  0416                     	;# 
   612  0417                     	;# 
   613  0418                     	;# 
   614  0418                     	;# 
   615  0419                     	;# 
   616  041A                     	;# 
   617  041B                     	;# 
   618  041C                     	;# 
   619  041D                     	;# 
   620  041E                     	;# 
   621  041F                     	;# 
   622  0498                     	;# 
   623  0498                     	;# 
   624  0499                     	;# 
   625  049A                     	;# 
   626  049B                     	;# 
   627  049B                     	;# 
   628  049C                     	;# 
   629  049D                     	;# 
   630  049E                     	;# 
   631  049F                     	;# 
   632  0617                     	;# 
   633  0618                     	;# 
   634  0619                     	;# 
   635  0619                     	;# 
   636  061A                     	;# 
   637  061B                     	;# 
   638  061C                     	;# 
   639  061C                     	;# 
   640  061F                     	;# 
   641  0691                     	;# 
   642  0692                     	;# 
   643  0693                     	;# 
   644  0694                     	;# 
   645  0695                     	;# 
   646  0696                     	;# 
   647  0697                     	;# 
   648  0698                     	;# 
   649  0699                     	;# 
   650  0711                     	;# 
   651  0712                     	;# 
   652  0713                     	;# 
   653  0714                     	;# 
   654  0715                     	;# 
   655  0716                     	;# 
   656  0717                     	;# 
   657  0718                     	;# 
   658  0719                     	;# 
   659  0891                     	;# 
   660  0891                     	;# 
   661  0891                     	;# 
   662  0891                     	;# 
   663  0891                     	;# 
   664  0891                     	;# 
   665  0892                     	;# 
   666  0892                     	;# 
   667  0892                     	;# 
   668  0893                     	;# 
   669  0893                     	;# 
   670  0893                     	;# 
   671  0893                     	;# 
   672  0893                     	;# 
   673  0893                     	;# 
   674  0894                     	;# 
   675  0894                     	;# 
   676  0894                     	;# 
   677  0895                     	;# 
   678  0895                     	;# 
   679  0895                     	;# 
   680  0896                     	;# 
   681  0896                     	;# 
   682  0896                     	;# 
   683  089B                     	;# 
   684  0911                     	;# 
   685  0912                     	;# 
   686  0913                     	;# 
   687  0914                     	;# 
   688  0915                     	;# 
   689  0916                     	;# 
   690  0918                     	;# 
   691  0919                     	;# 
   692  091A                     	;# 
   693  091B                     	;# 
   694  091C                     	;# 
   695  091D                     	;# 
   696  091E                     	;# 
   697  091F                     	;# 
   698  0E0F                     	;# 
   699  0E10                     	;# 
   700  0E11                     	;# 
   701  0E12                     	;# 
   702  0E13                     	;# 
   703  0E14                     	;# 
   704  0E15                     	;# 
   705  0E16                     	;# 
   706  0E17                     	;# 
   707  0E18                     	;# 
   708  0E19                     	;# 
   709  0E1A                     	;# 
   710  0E1B                     	;# 
   711  0E1C                     	;# 
   712  0E1D                     	;# 
   713  0E1E                     	;# 
   714  0E1F                     	;# 
   715  0E20                     	;# 
   716  0E21                     	;# 
   717  0E22                     	;# 
   718  0E24                     	;# 
   719  0E25                     	;# 
   720  0E28                     	;# 
   721  0E29                     	;# 
   722  0E2A                     	;# 
   723  0E2B                     	;# 
   724  0E2C                     	;# 
   725  0E2D                     	;# 
   726  0E2E                     	;# 
   727  0E2F                     	;# 
   728  0E90                     	;# 
   729  0E91                     	;# 
   730  0E92                     	;# 
   731  0E94                     	;# 
   732  0E95                     	;# 
   733  0EA0                     	;# 
   734  0EA1                     	;# 
   735  0EA2                     	;# 
   736  0EA3                     	;# 
   737  0EA4                     	;# 
   738  0EA5                     	;# 
   739  0F0F                     	;# 
   740  0F10                     	;# 
   741  0F11                     	;# 
   742  0F12                     	;# 
   743  0F13                     	;# 
   744  0F14                     	;# 
   745  0F15                     	;# 
   746  0F16                     	;# 
   747  0F17                     	;# 
   748  0F18                     	;# 
   749  0F19                     	;# 
   750  0F1A                     	;# 
   751  0F1B                     	;# 
   752  0F1C                     	;# 
   753  0F1D                     	;# 
   754  0F1E                     	;# 
   755  0F1F                     	;# 
   756  0F20                     	;# 
   757  0F21                     	;# 
   758  0F22                     	;# 
   759  0F23                     	;# 
   760  0F24                     	;# 
   761  0F25                     	;# 
   762  0F26                     	;# 
   763  0F27                     	;# 
   764  0F28                     	;# 
   765  0F29                     	;# 
   766  0F2A                     	;# 
   767  0F2B                     	;# 
   768  0F2C                     	;# 
   769  0F2D                     	;# 
   770  0F2E                     	;# 
   771  0F2F                     	;# 
   772  0F30                     	;# 
   773  0F31                     	;# 
   774  0F32                     	;# 
   775  0F33                     	;# 
   776  0F34                     	;# 
   777  0F35                     	;# 
   778  0F36                     	;# 
   779  0F37                     	;# 
   780  0FE4                     	;# 
   781  0FE5                     	;# 
   782  0FE6                     	;# 
   783  0FE7                     	;# 
   784  0FE8                     	;# 
   785  0FE9                     	;# 
   786  0FEA                     	;# 
   787  0FEB                     	;# 
   788  0FED                     	;# 
   789  0FEE                     	;# 
   790  0FEF                     	;# 
   791  0000                     	;# 
   792  0001                     	;# 
   793  0002                     	;# 
   794  0003                     	;# 
   795  0004                     	;# 
   796  0005                     	;# 
   797  0006                     	;# 
   798  0007                     	;# 
   799  0008                     	;# 
   800  0009                     	;# 
   801  000A                     	;# 
   802  000B                     	;# 
   803  000C                     	;# 
   804  000E                     	;# 
   805  0010                     	;# 
   806  0011                     	;# 
   807  0012                     	;# 
   808  0013                     	;# 
   809  0014                     	;# 
   810  0015                     	;# 
   811  0015                     	;# 
   812  0016                     	;# 
   813  0016                     	;# 
   814  0017                     	;# 
   815  0018                     	;# 
   816  0019                     	;# 
   817  0019                     	;# 
   818  001A                     	;# 
   819  001B                     	;# 
   820  001C                     	;# 
   821  001D                     	;# 
   822  001E                     	;# 
   823  001F                     	;# 
   824  008C                     	;# 
   825  008E                     	;# 
   826  0090                     	;# 
   827  0091                     	;# 
   828  0092                     	;# 
   829  0093                     	;# 
   830  0094                     	;# 
   831  0097                     	;# 
   832  009B                     	;# 
   833  009B                     	;# 
   834  009C                     	;# 
   835  009D                     	;# 
   836  009E                     	;# 
   837  009F                     	;# 
   838  010C                     	;# 
   839  010E                     	;# 
   840  0111                     	;# 
   841  0112                     	;# 
   842  0113                     	;# 
   843  0114                     	;# 
   844  0115                     	;# 
   845  0116                     	;# 
   846  0117                     	;# 
   847  0118                     	;# 
   848  0119                     	;# 
   849  018C                     	;# 
   850  018E                     	;# 
   851  0199                     	;# 
   852  0199                     	;# 
   853  0199                     	;# 
   854  019A                     	;# 
   855  019A                     	;# 
   856  019A                     	;# 
   857  019B                     	;# 
   858  019B                     	;# 
   859  019B                     	;# 
   860  019B                     	;# 
   861  019B                     	;# 
   862  019C                     	;# 
   863  019C                     	;# 
   864  019C                     	;# 
   865  019D                     	;# 
   866  019D                     	;# 
   867  019D                     	;# 
   868  019E                     	;# 
   869  019E                     	;# 
   870  019E                     	;# 
   871  019F                     	;# 
   872  019F                     	;# 
   873  019F                     	;# 
   874  019F                     	;# 
   875  019F                     	;# 
   876  020C                     	;# 
   877  020E                     	;# 
   878  0211                     	;# 
   879  0211                     	;# 
   880  0212                     	;# 
   881  0212                     	;# 
   882  0213                     	;# 
   883  0213                     	;# 
   884  0214                     	;# 
   885  0214                     	;# 
   886  0215                     	;# 
   887  0215                     	;# 
   888  0215                     	;# 
   889  0215                     	;# 
   890  0216                     	;# 
   891  0216                     	;# 
   892  0217                     	;# 
   893  0217                     	;# 
   894  0219                     	;# 
   895  021A                     	;# 
   896  021B                     	;# 
   897  021C                     	;# 
   898  021D                     	;# 
   899  021D                     	;# 
   900  021E                     	;# 
   901  021F                     	;# 
   902  028C                     	;# 
   903  028E                     	;# 
   904  0291                     	;# 
   905  0291                     	;# 
   906  0292                     	;# 
   907  0293                     	;# 
   908  0294                     	;# 
   909  0295                     	;# 
   910  0295                     	;# 
   911  0296                     	;# 
   912  0297                     	;# 
   913  0298                     	;# 
   914  029F                     	;# 
   915  030C                     	;# 
   916  030E                     	;# 
   917  0311                     	;# 
   918  0311                     	;# 
   919  0312                     	;# 
   920  0313                     	;# 
   921  0314                     	;# 
   922  0315                     	;# 
   923  0315                     	;# 
   924  0316                     	;# 
   925  0317                     	;# 
   926  0318                     	;# 
   927  038C                     	;# 
   928  038E                     	;# 
   929  0391                     	;# 
   930  0392                     	;# 
   931  0393                     	;# 
   932  0397                     	;# 
   933  0398                     	;# 
   934  0399                     	;# 
   935  039A                     	;# 
   936  039C                     	;# 
   937  039D                     	;# 
   938  039E                     	;# 
   939  039F                     	;# 
   940  0411                     	;# 
   941  0411                     	;# 
   942  0412                     	;# 
   943  0413                     	;# 
   944  0414                     	;# 
   945  0415                     	;# 
   946  0416                     	;# 
   947  0417                     	;# 
   948  0418                     	;# 
   949  0418                     	;# 
   950  0419                     	;# 
   951  041A                     	;# 
   952  041B                     	;# 
   953  041C                     	;# 
   954  041D                     	;# 
   955  041E                     	;# 
   956  041F                     	;# 
   957  0498                     	;# 
   958  0498                     	;# 
   959  0499                     	;# 
   960  049A                     	;# 
   961  049B                     	;# 
   962  049B                     	;# 
   963  049C                     	;# 
   964  049D                     	;# 
   965  049E                     	;# 
   966  049F                     	;# 
   967  0617                     	;# 
   968  0618                     	;# 
   969  0619                     	;# 
   970  0619                     	;# 
   971  061A                     	;# 
   972  061B                     	;# 
   973  061C                     	;# 
   974  061C                     	;# 
   975  061F                     	;# 
   976  0691                     	;# 
   977  0692                     	;# 
   978  0693                     	;# 
   979  0694                     	;# 
   980  0695                     	;# 
   981  0696                     	;# 
   982  0697                     	;# 
   983  0698                     	;# 
   984  0699                     	;# 
   985  0711                     	;# 
   986  0712                     	;# 
   987  0713                     	;# 
   988  0714                     	;# 
   989  0715                     	;# 
   990  0716                     	;# 
   991  0717                     	;# 
   992  0718                     	;# 
   993  0719                     	;# 
   994  0891                     	;# 
   995  0891                     	;# 
   996  0891                     	;# 
   997  0891                     	;# 
   998  0891                     	;# 
   999  0891                     	;# 
  1000  0892                     	;# 
  1001  0892                     	;# 
  1002  0892                     	;# 
  1003  0893                     	;# 
  1004  0893                     	;# 
  1005  0893                     	;# 
  1006  0893                     	;# 
  1007  0893                     	;# 
  1008  0893                     	;# 
  1009  0894                     	;# 
  1010  0894                     	;# 
  1011  0894                     	;# 
  1012  0895                     	;# 
  1013  0895                     	;# 
  1014  0895                     	;# 
  1015  0896                     	;# 
  1016  0896                     	;# 
  1017  0896                     	;# 
  1018  089B                     	;# 
  1019  0911                     	;# 
  1020  0912                     	;# 
  1021  0913                     	;# 
  1022  0914                     	;# 
  1023  0915                     	;# 
  1024  0916                     	;# 
  1025  0918                     	;# 
  1026  0919                     	;# 
  1027  091A                     	;# 
  1028  091B                     	;# 
  1029  091C                     	;# 
  1030  091D                     	;# 
  1031  091E                     	;# 
  1032  091F                     	;# 
  1033  0E0F                     	;# 
  1034  0E10                     	;# 
  1035  0E11                     	;# 
  1036  0E12                     	;# 
  1037  0E13                     	;# 
  1038  0E14                     	;# 
  1039  0E15                     	;# 
  1040  0E16                     	;# 
  1041  0E17                     	;# 
  1042  0E18                     	;# 
  1043  0E19                     	;# 
  1044  0E1A                     	;# 
  1045  0E1B                     	;# 
  1046  0E1C                     	;# 
  1047  0E1D                     	;# 
  1048  0E1E                     	;# 
  1049  0E1F                     	;# 
  1050  0E20                     	;# 
  1051  0E21                     	;# 
  1052  0E22                     	;# 
  1053  0E24                     	;# 
  1054  0E25                     	;# 
  1055  0E28                     	;# 
  1056  0E29                     	;# 
  1057  0E2A                     	;# 
  1058  0E2B                     	;# 
  1059  0E2C                     	;# 
  1060  0E2D                     	;# 
  1061  0E2E                     	;# 
  1062  0E2F                     	;# 
  1063  0E90                     	;# 
  1064  0E91                     	;# 
  1065  0E92                     	;# 
  1066  0E94                     	;# 
  1067  0E95                     	;# 
  1068  0EA0                     	;# 
  1069  0EA1                     	;# 
  1070  0EA2                     	;# 
  1071  0EA3                     	;# 
  1072  0EA4                     	;# 
  1073  0EA5                     	;# 
  1074  0F0F                     	;# 
  1075  0F10                     	;# 
  1076  0F11                     	;# 
  1077  0F12                     	;# 
  1078  0F13                     	;# 
  1079  0F14                     	;# 
  1080  0F15                     	;# 
  1081  0F16                     	;# 
  1082  0F17                     	;# 
  1083  0F18                     	;# 
  1084  0F19                     	;# 
  1085  0F1A                     	;# 
  1086  0F1B                     	;# 
  1087  0F1C                     	;# 
  1088  0F1D                     	;# 
  1089  0F1E                     	;# 
  1090  0F1F                     	;# 
  1091  0F20                     	;# 
  1092  0F21                     	;# 
  1093  0F22                     	;# 
  1094  0F23                     	;# 
  1095  0F24                     	;# 
  1096  0F25                     	;# 
  1097  0F26                     	;# 
  1098  0F27                     	;# 
  1099  0F28                     	;# 
  1100  0F29                     	;# 
  1101  0F2A                     	;# 
  1102  0F2B                     	;# 
  1103  0F2C                     	;# 
  1104  0F2D                     	;# 
  1105  0F2E                     	;# 
  1106  0F2F                     	;# 
  1107  0F30                     	;# 
  1108  0F31                     	;# 
  1109  0F32                     	;# 
  1110  0F33                     	;# 
  1111  0F34                     	;# 
  1112  0F35                     	;# 
  1113  0F36                     	;# 
  1114  0F37                     	;# 
  1115  0FE4                     	;# 
  1116  0FE5                     	;# 
  1117  0FE6                     	;# 
  1118  0FE7                     	;# 
  1119  0FE8                     	;# 
  1120  0FE9                     	;# 
  1121  0FEA                     	;# 
  1122  0FEB                     	;# 
  1123  0FED                     	;# 
  1124  0FEE                     	;# 
  1125  0FEF                     	;# 
  1126  0000                     	;# 
  1127  0001                     	;# 
  1128  0002                     	;# 
  1129  0003                     	;# 
  1130  0004                     	;# 
  1131  0005                     	;# 
  1132  0006                     	;# 
  1133  0007                     	;# 
  1134  0008                     	;# 
  1135  0009                     	;# 
  1136  000A                     	;# 
  1137  000B                     	;# 
  1138  000C                     	;# 
  1139  000E                     	;# 
  1140  0010                     	;# 
  1141  0011                     	;# 
  1142  0012                     	;# 
  1143  0013                     	;# 
  1144  0014                     	;# 
  1145  0015                     	;# 
  1146  0015                     	;# 
  1147  0016                     	;# 
  1148  0016                     	;# 
  1149  0017                     	;# 
  1150  0018                     	;# 
  1151  0019                     	;# 
  1152  0019                     	;# 
  1153  001A                     	;# 
  1154  001B                     	;# 
  1155  001C                     	;# 
  1156  001D                     	;# 
  1157  001E                     	;# 
  1158  001F                     	;# 
  1159  008C                     	;# 
  1160  008E                     	;# 
  1161  0090                     	;# 
  1162  0091                     	;# 
  1163  0092                     	;# 
  1164  0093                     	;# 
  1165  0094                     	;# 
  1166  0097                     	;# 
  1167  009B                     	;# 
  1168  009B                     	;# 
  1169  009C                     	;# 
  1170  009D                     	;# 
  1171  009E                     	;# 
  1172  009F                     	;# 
  1173  010C                     	;# 
  1174  010E                     	;# 
  1175  0111                     	;# 
  1176  0112                     	;# 
  1177  0113                     	;# 
  1178  0114                     	;# 
  1179  0115                     	;# 
  1180  0116                     	;# 
  1181  0117                     	;# 
  1182  0118                     	;# 
  1183  0119                     	;# 
  1184  018C                     	;# 
  1185  018E                     	;# 
  1186  0199                     	;# 
  1187  0199                     	;# 
  1188  0199                     	;# 
  1189  019A                     	;# 
  1190  019A                     	;# 
  1191  019A                     	;# 
  1192  019B                     	;# 
  1193  019B                     	;# 
  1194  019B                     	;# 
  1195  019B                     	;# 
  1196  019B                     	;# 
  1197  019C                     	;# 
  1198  019C                     	;# 
  1199  019C                     	;# 
  1200  019D                     	;# 
  1201  019D                     	;# 
  1202  019D                     	;# 
  1203  019E                     	;# 
  1204  019E                     	;# 
  1205  019E                     	;# 
  1206  019F                     	;# 
  1207  019F                     	;# 
  1208  019F                     	;# 
  1209  019F                     	;# 
  1210  019F                     	;# 
  1211  020C                     	;# 
  1212  020E                     	;# 
  1213  0211                     	;# 
  1214  0211                     	;# 
  1215  0212                     	;# 
  1216  0212                     	;# 
  1217  0213                     	;# 
  1218  0213                     	;# 
  1219  0214                     	;# 
  1220  0214                     	;# 
  1221  0215                     	;# 
  1222  0215                     	;# 
  1223  0215                     	;# 
  1224  0215                     	;# 
  1225  0216                     	;# 
  1226  0216                     	;# 
  1227  0217                     	;# 
  1228  0217                     	;# 
  1229  0219                     	;# 
  1230  021A                     	;# 
  1231  021B                     	;# 
  1232  021C                     	;# 
  1233  021D                     	;# 
  1234  021D                     	;# 
  1235  021E                     	;# 
  1236  021F                     	;# 
  1237  028C                     	;# 
  1238  028E                     	;# 
  1239  0291                     	;# 
  1240  0291                     	;# 
  1241  0292                     	;# 
  1242  0293                     	;# 
  1243  0294                     	;# 
  1244  0295                     	;# 
  1245  0295                     	;# 
  1246  0296                     	;# 
  1247  0297                     	;# 
  1248  0298                     	;# 
  1249  029F                     	;# 
  1250  030C                     	;# 
  1251  030E                     	;# 
  1252  0311                     	;# 
  1253  0311                     	;# 
  1254  0312                     	;# 
  1255  0313                     	;# 
  1256  0314                     	;# 
  1257  0315                     	;# 
  1258  0315                     	;# 
  1259  0316                     	;# 
  1260  0317                     	;# 
  1261  0318                     	;# 
  1262  038C                     	;# 
  1263  038E                     	;# 
  1264  0391                     	;# 
  1265  0392                     	;# 
  1266  0393                     	;# 
  1267  0397                     	;# 
  1268  0398                     	;# 
  1269  0399                     	;# 
  1270  039A                     	;# 
  1271  039C                     	;# 
  1272  039D                     	;# 
  1273  039E                     	;# 
  1274  039F                     	;# 
  1275  0411                     	;# 
  1276  0411                     	;# 
  1277  0412                     	;# 
  1278  0413                     	;# 
  1279  0414                     	;# 
  1280  0415                     	;# 
  1281  0416                     	;# 
  1282  0417                     	;# 
  1283  0418                     	;# 
  1284  0418                     	;# 
  1285  0419                     	;# 
  1286  041A                     	;# 
  1287  041B                     	;# 
  1288  041C                     	;# 
  1289  041D                     	;# 
  1290  041E                     	;# 
  1291  041F                     	;# 
  1292  0498                     	;# 
  1293  0498                     	;# 
  1294  0499                     	;# 
  1295  049A                     	;# 
  1296  049B                     	;# 
  1297  049B                     	;# 
  1298  049C                     	;# 
  1299  049D                     	;# 
  1300  049E                     	;# 
  1301  049F                     	;# 
  1302  0617                     	;# 
  1303  0618                     	;# 
  1304  0619                     	;# 
  1305  0619                     	;# 
  1306  061A                     	;# 
  1307  061B                     	;# 
  1308  061C                     	;# 
  1309  061C                     	;# 
  1310  061F                     	;# 
  1311  0691                     	;# 
  1312  0692                     	;# 
  1313  0693                     	;# 
  1314  0694                     	;# 
  1315  0695                     	;# 
  1316  0696                     	;# 
  1317  0697                     	;# 
  1318  0698                     	;# 
  1319  0699                     	;# 
  1320  0711                     	;# 
  1321  0712                     	;# 
  1322  0713                     	;# 
  1323  0714                     	;# 
  1324  0715                     	;# 
  1325  0716                     	;# 
  1326  0717                     	;# 
  1327  0718                     	;# 
  1328  0719                     	;# 
  1329  0891                     	;# 
  1330  0891                     	;# 
  1331  0891                     	;# 
  1332  0891                     	;# 
  1333  0891                     	;# 
  1334  0891                     	;# 
  1335  0892                     	;# 
  1336  0892                     	;# 
  1337  0892                     	;# 
  1338  0893                     	;# 
  1339  0893                     	;# 
  1340  0893                     	;# 
  1341  0893                     	;# 
  1342  0893                     	;# 
  1343  0893                     	;# 
  1344  0894                     	;# 
  1345  0894                     	;# 
  1346  0894                     	;# 
  1347  0895                     	;# 
  1348  0895                     	;# 
  1349  0895                     	;# 
  1350  0896                     	;# 
  1351  0896                     	;# 
  1352  0896                     	;# 
  1353  089B                     	;# 
  1354  0911                     	;# 
  1355  0912                     	;# 
  1356  0913                     	;# 
  1357  0914                     	;# 
  1358  0915                     	;# 
  1359  0916                     	;# 
  1360  0918                     	;# 
  1361  0919                     	;# 
  1362  091A                     	;# 
  1363  091B                     	;# 
  1364  091C                     	;# 
  1365  091D                     	;# 
  1366  091E                     	;# 
  1367  091F                     	;# 
  1368  0E0F                     	;# 
  1369  0E10                     	;# 
  1370  0E11                     	;# 
  1371  0E12                     	;# 
  1372  0E13                     	;# 
  1373  0E14                     	;# 
  1374  0E15                     	;# 
  1375  0E16                     	;# 
  1376  0E17                     	;# 
  1377  0E18                     	;# 
  1378  0E19                     	;# 
  1379  0E1A                     	;# 
  1380  0E1B                     	;# 
  1381  0E1C                     	;# 
  1382  0E1D                     	;# 
  1383  0E1E                     	;# 
  1384  0E1F                     	;# 
  1385  0E20                     	;# 
  1386  0E21                     	;# 
  1387  0E22                     	;# 
  1388  0E24                     	;# 
  1389  0E25                     	;# 
  1390  0E28                     	;# 
  1391  0E29                     	;# 
  1392  0E2A                     	;# 
  1393  0E2B                     	;# 
  1394  0E2C                     	;# 
  1395  0E2D                     	;# 
  1396  0E2E                     	;# 
  1397  0E2F                     	;# 
  1398  0E90                     	;# 
  1399  0E91                     	;# 
  1400  0E92                     	;# 
  1401  0E94                     	;# 
  1402  0E95                     	;# 
  1403  0EA0                     	;# 
  1404  0EA1                     	;# 
  1405  0EA2                     	;# 
  1406  0EA3                     	;# 
  1407  0EA4                     	;# 
  1408  0EA5                     	;# 
  1409  0F0F                     	;# 
  1410  0F10                     	;# 
  1411  0F11                     	;# 
  1412  0F12                     	;# 
  1413  0F13                     	;# 
  1414  0F14                     	;# 
  1415  0F15                     	;# 
  1416  0F16                     	;# 
  1417  0F17                     	;# 
  1418  0F18                     	;# 
  1419  0F19                     	;# 
  1420  0F1A                     	;# 
  1421  0F1B                     	;# 
  1422  0F1C                     	;# 
  1423  0F1D                     	;# 
  1424  0F1E                     	;# 
  1425  0F1F                     	;# 
  1426  0F20                     	;# 
  1427  0F21                     	;# 
  1428  0F22                     	;# 
  1429  0F23                     	;# 
  1430  0F24                     	;# 
  1431  0F25                     	;# 
  1432  0F26                     	;# 
  1433  0F27                     	;# 
  1434  0F28                     	;# 
  1435  0F29                     	;# 
  1436  0F2A                     	;# 
  1437  0F2B                     	;# 
  1438  0F2C                     	;# 
  1439  0F2D                     	;# 
  1440  0F2E                     	;# 
  1441  0F2F                     	;# 
  1442  0F30                     	;# 
  1443  0F31                     	;# 
  1444  0F32                     	;# 
  1445  0F33                     	;# 
  1446  0F34                     	;# 
  1447  0F35                     	;# 
  1448  0F36                     	;# 
  1449  0F37                     	;# 
  1450  0FE4                     	;# 
  1451  0FE5                     	;# 
  1452  0FE6                     	;# 
  1453  0FE7                     	;# 
  1454  0FE8                     	;# 
  1455  0FE9                     	;# 
  1456  0FEA                     	;# 
  1457  0FEB                     	;# 
  1458  0FED                     	;# 
  1459  0FEE                     	;# 
  1460  0FEF                     	;# 
  1461  0000                     	;# 
  1462  0001                     	;# 
  1463  0002                     	;# 
  1464  0003                     	;# 
  1465  0004                     	;# 
  1466  0005                     	;# 
  1467  0006                     	;# 
  1468  0007                     	;# 
  1469  0008                     	;# 
  1470  0009                     	;# 
  1471  000A                     	;# 
  1472  000B                     	;# 
  1473  000C                     	;# 
  1474  000E                     	;# 
  1475  0010                     	;# 
  1476  0011                     	;# 
  1477  0012                     	;# 
  1478  0013                     	;# 
  1479  0014                     	;# 
  1480  0015                     	;# 
  1481  0015                     	;# 
  1482  0016                     	;# 
  1483  0016                     	;# 
  1484  0017                     	;# 
  1485  0018                     	;# 
  1486  0019                     	;# 
  1487  0019                     	;# 
  1488  001A                     	;# 
  1489  001B                     	;# 
  1490  001C                     	;# 
  1491  001D                     	;# 
  1492  001E                     	;# 
  1493  001F                     	;# 
  1494  008C                     	;# 
  1495  008E                     	;# 
  1496  0090                     	;# 
  1497  0091                     	;# 
  1498  0092                     	;# 
  1499  0093                     	;# 
  1500  0094                     	;# 
  1501  0097                     	;# 
  1502  009B                     	;# 
  1503  009B                     	;# 
  1504  009C                     	;# 
  1505  009D                     	;# 
  1506  009E                     	;# 
  1507  009F                     	;# 
  1508  010C                     	;# 
  1509  010E                     	;# 
  1510  0111                     	;# 
  1511  0112                     	;# 
  1512  0113                     	;# 
  1513  0114                     	;# 
  1514  0115                     	;# 
  1515  0116                     	;# 
  1516  0117                     	;# 
  1517  0118                     	;# 
  1518  0119                     	;# 
  1519  018C                     	;# 
  1520  018E                     	;# 
  1521  0199                     	;# 
  1522  0199                     	;# 
  1523  0199                     	;# 
  1524  019A                     	;# 
  1525  019A                     	;# 
  1526  019A                     	;# 
  1527  019B                     	;# 
  1528  019B                     	;# 
  1529  019B                     	;# 
  1530  019B                     	;# 
  1531  019B                     	;# 
  1532  019C                     	;# 
  1533  019C                     	;# 
  1534  019C                     	;# 
  1535  019D                     	;# 
  1536  019D                     	;# 
  1537  019D                     	;# 
  1538  019E                     	;# 
  1539  019E                     	;# 
  1540  019E                     	;# 
  1541  019F                     	;# 
  1542  019F                     	;# 
  1543  019F                     	;# 
  1544  019F                     	;# 
  1545  019F                     	;# 
  1546  020C                     	;# 
  1547  020E                     	;# 
  1548  0211                     	;# 
  1549  0211                     	;# 
  1550  0212                     	;# 
  1551  0212                     	;# 
  1552  0213                     	;# 
  1553  0213                     	;# 
  1554  0214                     	;# 
  1555  0214                     	;# 
  1556  0215                     	;# 
  1557  0215                     	;# 
  1558  0215                     	;# 
  1559  0215                     	;# 
  1560  0216                     	;# 
  1561  0216                     	;# 
  1562  0217                     	;# 
  1563  0217                     	;# 
  1564  0219                     	;# 
  1565  021A                     	;# 
  1566  021B                     	;# 
  1567  021C                     	;# 
  1568  021D                     	;# 
  1569  021D                     	;# 
  1570  021E                     	;# 
  1571  021F                     	;# 
  1572  028C                     	;# 
  1573  028E                     	;# 
  1574  0291                     	;# 
  1575  0291                     	;# 
  1576  0292                     	;# 
  1577  0293                     	;# 
  1578  0294                     	;# 
  1579  0295                     	;# 
  1580  0295                     	;# 
  1581  0296                     	;# 
  1582  0297                     	;# 
  1583  0298                     	;# 
  1584  029F                     	;# 
  1585  030C                     	;# 
  1586  030E                     	;# 
  1587  0311                     	;# 
  1588  0311                     	;# 
  1589  0312                     	;# 
  1590  0313                     	;# 
  1591  0314                     	;# 
  1592  0315                     	;# 
  1593  0315                     	;# 
  1594  0316                     	;# 
  1595  0317                     	;# 
  1596  0318                     	;# 
  1597  038C                     	;# 
  1598  038E                     	;# 
  1599  0391                     	;# 
  1600  0392                     	;# 
  1601  0393                     	;# 
  1602  0397                     	;# 
  1603  0398                     	;# 
  1604  0399                     	;# 
  1605  039A                     	;# 
  1606  039C                     	;# 
  1607  039D                     	;# 
  1608  039E                     	;# 
  1609  039F                     	;# 
  1610  0411                     	;# 
  1611  0411                     	;# 
  1612  0412                     	;# 
  1613  0413                     	;# 
  1614  0414                     	;# 
  1615  0415                     	;# 
  1616  0416                     	;# 
  1617  0417                     	;# 
  1618  0418                     	;# 
  1619  0418                     	;# 
  1620  0419                     	;# 
  1621  041A                     	;# 
  1622  041B                     	;# 
  1623  041C                     	;# 
  1624  041D                     	;# 
  1625  041E                     	;# 
  1626  041F                     	;# 
  1627  0498                     	;# 
  1628  0498                     	;# 
  1629  0499                     	;# 
  1630  049A                     	;# 
  1631  049B                     	;# 
  1632  049B                     	;# 
  1633  049C                     	;# 
  1634  049D                     	;# 
  1635  049E                     	;# 
  1636  049F                     	;# 
  1637  0617                     	;# 
  1638  0618                     	;# 
  1639  0619                     	;# 
  1640  0619                     	;# 
  1641  061A                     	;# 
  1642  061B                     	;# 
  1643  061C                     	;# 
  1644  061C                     	;# 
  1645  061F                     	;# 
  1646  0691                     	;# 
  1647  0692                     	;# 
  1648  0693                     	;# 
  1649  0694                     	;# 
  1650  0695                     	;# 
  1651  0696                     	;# 
  1652  0697                     	;# 
  1653  0698                     	;# 
  1654  0699                     	;# 
  1655  0711                     	;# 
  1656  0712                     	;# 
  1657  0713                     	;# 
  1658  0714                     	;# 
  1659  0715                     	;# 
  1660  0716                     	;# 
  1661  0717                     	;# 
  1662  0718                     	;# 
  1663  0719                     	;# 
  1664  0891                     	;# 
  1665  0891                     	;# 
  1666  0891                     	;# 
  1667  0891                     	;# 
  1668  0891                     	;# 
  1669  0891                     	;# 
  1670  0892                     	;# 
  1671  0892                     	;# 
  1672  0892                     	;# 
  1673  0893                     	;# 
  1674  0893                     	;# 
  1675  0893                     	;# 
  1676  0893                     	;# 
  1677  0893                     	;# 
  1678  0893                     	;# 
  1679  0894                     	;# 
  1680  0894                     	;# 
  1681  0894                     	;# 
  1682  0895                     	;# 
  1683  0895                     	;# 
  1684  0895                     	;# 
  1685  0896                     	;# 
  1686  0896                     	;# 
  1687  0896                     	;# 
  1688  089B                     	;# 
  1689  0911                     	;# 
  1690  0912                     	;# 
  1691  0913                     	;# 
  1692  0914                     	;# 
  1693  0915                     	;# 
  1694  0916                     	;# 
  1695  0918                     	;# 
  1696  0919                     	;# 
  1697  091A                     	;# 
  1698  091B                     	;# 
  1699  091C                     	;# 
  1700  091D                     	;# 
  1701  091E                     	;# 
  1702  091F                     	;# 
  1703  0E0F                     	;# 
  1704  0E10                     	;# 
  1705  0E11                     	;# 
  1706  0E12                     	;# 
  1707  0E13                     	;# 
  1708  0E14                     	;# 
  1709  0E15                     	;# 
  1710  0E16                     	;# 
  1711  0E17                     	;# 
  1712  0E18                     	;# 
  1713  0E19                     	;# 
  1714  0E1A                     	;# 
  1715  0E1B                     	;# 
  1716  0E1C                     	;# 
  1717  0E1D                     	;# 
  1718  0E1E                     	;# 
  1719  0E1F                     	;# 
  1720  0E20                     	;# 
  1721  0E21                     	;# 
  1722  0E22                     	;# 
  1723  0E24                     	;# 
  1724  0E25                     	;# 
  1725  0E28                     	;# 
  1726  0E29                     	;# 
  1727  0E2A                     	;# 
  1728  0E2B                     	;# 
  1729  0E2C                     	;# 
  1730  0E2D                     	;# 
  1731  0E2E                     	;# 
  1732  0E2F                     	;# 
  1733  0E90                     	;# 
  1734  0E91                     	;# 
  1735  0E92                     	;# 
  1736  0E94                     	;# 
  1737  0E95                     	;# 
  1738  0EA0                     	;# 
  1739  0EA1                     	;# 
  1740  0EA2                     	;# 
  1741  0EA3                     	;# 
  1742  0EA4                     	;# 
  1743  0EA5                     	;# 
  1744  0F0F                     	;# 
  1745  0F10                     	;# 
  1746  0F11                     	;# 
  1747  0F12                     	;# 
  1748  0F13                     	;# 
  1749  0F14                     	;# 
  1750  0F15                     	;# 
  1751  0F16                     	;# 
  1752  0F17                     	;# 
  1753  0F18                     	;# 
  1754  0F19                     	;# 
  1755  0F1A                     	;# 
  1756  0F1B                     	;# 
  1757  0F1C                     	;# 
  1758  0F1D                     	;# 
  1759  0F1E                     	;# 
  1760  0F1F                     	;# 
  1761  0F20                     	;# 
  1762  0F21                     	;# 
  1763  0F22                     	;# 
  1764  0F23                     	;# 
  1765  0F24                     	;# 
  1766  0F25                     	;# 
  1767  0F26                     	;# 
  1768  0F27                     	;# 
  1769  0F28                     	;# 
  1770  0F29                     	;# 
  1771  0F2A                     	;# 
  1772  0F2B                     	;# 
  1773  0F2C                     	;# 
  1774  0F2D                     	;# 
  1775  0F2E                     	;# 
  1776  0F2F                     	;# 
  1777  0F30                     	;# 
  1778  0F31                     	;# 
  1779  0F32                     	;# 
  1780  0F33                     	;# 
  1781  0F34                     	;# 
  1782  0F35                     	;# 
  1783  0F36                     	;# 
  1784  0F37                     	;# 
  1785  0FE4                     	;# 
  1786  0FE5                     	;# 
  1787  0FE6                     	;# 
  1788  0FE7                     	;# 
  1789  0FE8                     	;# 
  1790  0FE9                     	;# 
  1791  0FEA                     	;# 
  1792  0FEB                     	;# 
  1793  0FED                     	;# 
  1794  0FEE                     	;# 
  1795  0FEF                     	;# 
  1796                           
  1797                           	psect	idataBANK1
  1798  172D                     __pidataBANK1:	
  1799                           
  1800                           ;initializer for _romData
  1801  172D  34C1               	retlw	low (_romDataMap| (0+256))
  1802                           
  1803                           	psect	stringtext1
  1804  1000                     __pstringtext1:	
  1805  1000                     _dpowers:	
  1806  1000  3401               	retlw	1
  1807  1001  3400               	retlw	0
  1808  1002  3400               	retlw	0
  1809  1003  3400               	retlw	0
  1810  1004  340A               	retlw	10
  1811  1005  3400               	retlw	0
  1812  1006  3400               	retlw	0
  1813  1007  3400               	retlw	0
  1814  1008  3464               	retlw	100
  1815  1009  3400               	retlw	0
  1816  100A  3400               	retlw	0
  1817  100B  3400               	retlw	0
  1818  100C  34E8               	retlw	232
  1819  100D  3403               	retlw	3
  1820  100E  3400               	retlw	0
  1821  100F  3400               	retlw	0
  1822  1010  3410               	retlw	16
  1823  1011  3427               	retlw	39
  1824  1012  3400               	retlw	0
  1825  1013  3400               	retlw	0
  1826  1014  34A0               	retlw	160
  1827  1015  3486               	retlw	134
  1828  1016  3401               	retlw	1
  1829  1017  3400               	retlw	0
  1830  1018  3440               	retlw	64
  1831  1019  3442               	retlw	66
  1832  101A  340F               	retlw	15
  1833  101B  3400               	retlw	0
  1834  101C  3480               	retlw	128
  1835  101D  3496               	retlw	150
  1836  101E  3498               	retlw	152
  1837  101F  3400               	retlw	0
  1838  1020  3400               	retlw	0
  1839  1021  34E1               	retlw	225
  1840  1022  34F5               	retlw	245
  1841  1023  3405               	retlw	5
  1842  1024  3400               	retlw	0
  1843  1025  34CA               	retlw	202
  1844  1026  349A               	retlw	154
  1845  1027  343B               	retlw	59
  1846  1028                     __end_of_dpowers:	
  1847                           
  1848                           	psect	stringtext2
  1849  1819                     __pstringtext2:	
  1850  1819                     _n_ADDRESS_P0:	
  1851  1819  34AD               	retlw	173
  1852  181A  3487               	retlw	135
  1853  181B  3466               	retlw	102
  1854  181C  34BC               	retlw	188
  1855  181D  34BB               	retlw	187
  1856  181E                     __end_of_n_ADDRESS_P0:	
  1857                           
  1858                           	psect	stringtext3
  1859  1800                     __pstringtext3:	
  1860  1800                     _n_ADDRESS_MUL:	
  1861  1800  3421               	retlw	33
  1862  1801                     __end_of_n_ADDRESS_MUL:	
  1863  000B                     _INTCONbits	set	11
  1864  0003                     _STATUSbits	set	3
  1865  0010                     _PIR0bits	set	16
  1866  000E                     _PORTCbits	set	14
  1867  000C                     _PORTAbits	set	12
  1868  009E                     _ADCON1bits	set	158
  1869  009C                     _ADRESH	set	156
  1870  009B                     _ADRESL	set	155
  1871  009D                     _ADCON0bits	set	157
  1872  0097                     _WDTCONbits	set	151
  1873  0090                     _PIE0bits	set	144
  1874  008E                     _TRISCbits	set	142
  1875  008C                     _TRISAbits	set	140
  1876  0117                     _FVRCONbits	set	279
  1877  018E                     _ANSELCbits	set	398
  1878  018C                     _ANSELAbits	set	396
  1879  018E                     _ANSELC	set	398
  1880  018C                     _ANSELA	set	396
  1881  020C                     _WPUAbits	set	524
  1882  020E                     _WPUC	set	526
  1883  020C                     _WPUA	set	524
  1884  0211                     _SSP1BUF	set	529
  1885  0214                     _SSP1STATbits	set	532
  1886  0215                     _SSP1CON1bits	set	533
  1887  028C                     _ODCONAbits	set	652
  1888  028E                     _ODCONC	set	654
  1889  028C                     _ODCONA	set	652
  1890  038E                     _INLVLC	set	910
  1891  038C                     _INLVLA	set	908
  1892  0919                     _OSCCON1bits	set	2329
  1893  0EA0                     _RC0PPSbits	set	3744
  1894  0EA2                     _RC2PPSbits	set	3746
  1895  0EA1                     _RC1PPSbits	set	3745
  1896  1801                     STR_9:	
  1897  1801  3425               	retlw	37	;'%'
  1898  1802  346C               	retlw	108	;'l'
  1899  1803  3475               	retlw	117	;'u'
  1900  1804  342E               	retlw	46	;'.'
  1901  1805  3425               	retlw	37	;'%'
  1902  1806  3436               	retlw	54	;'6'
  1903  1807  342E               	retlw	46	;'.'
  1904  1808  3436               	retlw	54	;'6'
  1905  1809  346C               	retlw	108	;'l'
  1906  180A  3475               	retlw	117	;'u'
  1907  180B  3400               	retlw	0
  1908                           
  1909                           	psect	stringtext4
  1910  180C                     __pstringtext4:	
  1911  180C                     STR_5:	
  1912  180C  3441               	retlw	65	;'A'
  1913  180D  344E               	retlw	78	;'N'
  1914  180E  3443               	retlw	67	;'C'
  1915  180F  3433               	retlw	51	;'3'
  1916  1810  346D               	retlw	109	;'m'
  1917  1811  3456               	retlw	86	;'V'
  1918  1812  3400               	retlw	0
  1919                           
  1920                           	psect	stringtext5
  1921  1813                     __pstringtext5:	
  1922  1813                     STR_6:	
  1923  1813  3452               	retlw	82	;'R'
  1924  1814  3446               	retlw	70	;'F'
  1925  1815  3450               	retlw	80	;'P'
  1926  1816  3457               	retlw	87	;'W'
  1927  1817  3452               	retlw	82	;'R'
  1928  1818  3400               	retlw	0
  1929                           
  1930                           	psect	stringtext6
  1931  181E                     __pstringtext6:	
  1932  181E                     STR_3:	
  1933  181E  3454               	retlw	84	;'T'
  1934  181F  3445               	retlw	69	;'E'
  1935  1820  344D               	retlw	77	;'M'
  1936  1821  3450               	retlw	80	;'P'
  1937  1822  3400               	retlw	0
  1938                           
  1939                           	psect	stringtext7
  1940  1823                     __pstringtext7:	
  1941  1823                     STR_4:	
  1942  1823  3456               	retlw	86	;'V'
  1943  1824  3442               	retlw	66	;'B'
  1944  1825  3441               	retlw	65	;'A'
  1945  1826  3454               	retlw	84	;'T'
  1946  1827  3400               	retlw	0
  1947                           
  1948                           	psect	stringtext8
  1949  1828                     __pstringtext8:	
  1950  1828                     STR_8:	
  1951  1828  3442               	retlw	66	;'B'
  1952  1829  344F               	retlw	79	;'O'
  1953  182A  344F               	retlw	79	;'O'
  1954  182B  3454               	retlw	84	;'T'
  1955  182C  3400               	retlw	0
  1956                           
  1957                           	psect	stringtext9
  1958  182D                     __pstringtext9:	
  1959  182D                     STR_7:	
  1960  182D  3455               	retlw	85	;'U'
  1961  182E  3457               	retlw	87	;'W'
  1962  182F  3454               	retlw	84	;'T'
  1963  1830  3400               	retlw	0
  1964                           
  1965                           	psect	stringtext10
  1966  1831                     __pstringtext10:	
  1967  1831                     STR_1:	
  1968  1831  342F               	retlw	47	;'/'
  1969  1832  3400               	retlw	0
  1970                           
  1971                           	psect	stringtext11
  1972  0000                     __pstringtext11:	
  1973  1831                     
  1974                           ; #config settings
  1975  0000                     
  1976                           	psect	cinit
  1977  0011                     start_initialization:	
  1978  0011                     __initialization:	
  1979                           
  1980                           ; Initialize objects allocated to BANK1
  1981  0011  0021               	movlb	1	; select bank1
  1982  0012  3197  272D  3180   	fcall	__pidataBANK1	;fetch initializer
  1983  0015  00EE               	movwf	__pdataBANK1& (0+127)
  1984                           
  1985                           ; Clear objects allocated to COMMON
  1986  0016  01FD               	clrf	__pbssCOMMON& (0+127)
  1987                           
  1988                           ; Clear objects allocated to BANK1
  1989  0017  30E7               	movlw	low __pbssBANK1
  1990  0018  0084               	movwf	4
  1991  0019  3000               	movlw	high __pbssBANK1
  1992  001A  0085               	movwf	5
  1993  001B  3007               	movlw	7
  1994  001C  3197  2737  3180   	fcall	clear_ram0
  1995                           
  1996                           ; Clear objects allocated to BANK2
  1997  001F  3050               	movlw	low __pbssBANK2
  1998  0020  0084               	movwf	4
  1999  0021  3001               	movlw	high __pbssBANK2
  2000  0022  0085               	movwf	5
  2001  0023  3011               	movlw	17
  2002  0024  3197  2737  3180   	fcall	clear_ram0
  2003                           
  2004                           ; Clear objects allocated to BANK3
  2005  0027  30A0               	movlw	low __pbssBANK3
  2006  0028  0084               	movwf	4
  2007  0029  3001               	movlw	high __pbssBANK3
  2008  002A  0085               	movwf	5
  2009  002B  303D               	movlw	61
  2010  002C  3197  2737         	fcall	clear_ram0
  2011  002E                     end_of_initialization:	
  2012                           ;End of C runtime variable initialization code
  2013                           
  2014  002E                     __end_of__initialization:	
  2015  002E  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  2016  002F  0020               	movlb	0
  2017  0030  318E  2E0E         	ljmp	_main	;jump to C main() function
  2018                           
  2019                           	psect	bssCOMMON
  2020  007D                     __pbssCOMMON:	
  2021  007D                     _nrf24l01:	
  2022  007D                     	ds	1
  2023                           
  2024                           	psect	bssBANK1
  2025  00E7                     __pbssBANK1:	
  2026  00E7                     _counter:	
  2027  00E7                     	ds	4
  2028  00EB                     _TXPacket:	
  2029  00EB                     	ds	2
  2030  00ED                     _sleepLoop:	
  2031  00ED                     	ds	1
  2032                           
  2033                           	psect	dataBANK1
  2034  00EE                     __pdataBANK1:	
  2035  00EE                     _romData:	
  2036  00EE                     	ds	1
  2037                           
  2038                           	psect	bssBANK2
  2039  0150                     __pbssBANK2:	
  2040  0150                     ftoa@buf:	
  2041  0150                     	ds	17
  2042                           
  2043                           	psect	bssBANK3
  2044  01A0                     __pbssBANK3:	
  2045  01A0                     _RXPacket:	
  2046  01A0                     	ds	33
  2047  01C1                     _romDataMap:	
  2048  01C1                     	ds	28
  2049                           
  2050                           	psect	clrtext
  2051  1737                     clear_ram0:	
  2052                           ;	Called with FSR0 containing the base address, and
  2053                           ;	WREG with the size to clear
  2054                           
  2055  1737  0064               	clrwdt	;clear the watchdog before getting into this loop
  2056  1738                     clrloop0:	
  2057  1738  0180               	clrf	0	;clear RAM location pointed to by FSR
  2058  1739  3101               	addfsr 0,1
  2059  173A  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  2060  173B  2F38               	goto	clrloop0	;have we reached the end yet?
  2061  173C  3400               	retlw	0	;all done for this memory range, return
  2062                           
  2063                           	psect	cstackBANK2
  2064  0120                     __pcstackBANK2:	
  2065  0120                     loop@vt:	
  2066                           
  2067                           ; 3 bytes @ 0x0
  2068  0120                     	ds	3
  2069  0123                     loop@ta:	
  2070                           
  2071                           ; 3 bytes @ 0x3
  2072  0123                     	ds	3
  2073  0126                     _loop$2050:	
  2074                           
  2075                           ; 3 bytes @ 0x6
  2076  0126                     	ds	3
  2077  0129                     _loop$2051:	
  2078                           
  2079                           ; 3 bytes @ 0x9
  2080  0129                     	ds	3
  2081  012C                     _loop$865:	
  2082                           
  2083                           ; 2 bytes @ 0xC
  2084  012C                     	ds	2
  2085  012E                     loop@rfSetup:	
  2086                           
  2087                           ; 1 bytes @ 0xE
  2088  012E                     	ds	1
  2089  012F                     loop@packet:	
  2090                           
  2091                           ; 33 bytes @ 0xF
  2092  012F                     	ds	33
  2093                           
  2094                           	psect	cstackBANK1
  2095  00A0                     __pcstackBANK1:	
  2096  00A0                     ___fttol@sign1:	
  2097                           
  2098                           ; 1 bytes @ 0x0
  2099  00A0                     	ds	1
  2100  00A1                     ___fttol@lval:	
  2101                           
  2102                           ; 4 bytes @ 0x1
  2103  00A1                     	ds	4
  2104  00A5                     ___fttol@exp1:	
  2105                           
  2106                           ; 1 bytes @ 0x5
  2107  00A5                     	ds	1
  2108  00A6                     ?_ftoa:	
  2109  00A6                     ftoa@f:	
  2110                           ; 1 bytes @ 0x6
  2111                           
  2112                           
  2113                           ; 3 bytes @ 0x6
  2114  00A6                     	ds	3
  2115  00A9                     ftoa@status:	
  2116                           
  2117                           ; 1 bytes @ 0x9
  2118  00A9                     	ds	1
  2119  00AA                     ftoa@rem:	
  2120                           
  2121                           ; 4 bytes @ 0xA
  2122  00AA                     	ds	4
  2123  00AE                     ftoa@l:	
  2124                           
  2125                           ; 4 bytes @ 0xE
  2126  00AE                     	ds	4
  2127  00B2                     ftoa@cp:	
  2128                           
  2129                           ; 1 bytes @ 0x12
  2130  00B2                     	ds	1
  2131  00B3                     ?_strcat:	
  2132  00B3                     strcat@to:	
  2133                           ; 2 bytes @ 0x13
  2134                           
  2135                           
  2136                           ; 2 bytes @ 0x13
  2137  00B3                     	ds	2
  2138  00B5                     strcat@from:	
  2139                           
  2140                           ; 2 bytes @ 0x15
  2141  00B5                     	ds	2
  2142  00B7                     strcat@cp:	
  2143                           
  2144                           ; 2 bytes @ 0x17
  2145  00B7                     	ds	2
  2146  00B9                     ?_setMessage:	
  2147  00B9                     setMessage@packet:	
  2148                           ; 1 bytes @ 0x19
  2149                           
  2150                           
  2151                           ; 2 bytes @ 0x19
  2152  00B9                     	ds	2
  2153  00BB                     setMessage@topic:	
  2154                           
  2155                           ; 2 bytes @ 0x1B
  2156  00BB                     	ds	2
  2157  00BD                     setMessage@value:	
  2158                           
  2159                           ; 3 bytes @ 0x1D
  2160  00BD                     	ds	3
  2161  00C0                     ??_setMessage:	
  2162                           
  2163                           ; 1 bytes @ 0x20
  2164  00C0                     	ds	1
  2165  00C1                     setMessage@status:	
  2166                           
  2167                           ; 2 bytes @ 0x21
  2168  00C1                     	ds	2
  2169  00C3                     ??_loop:	
  2170                           
  2171                           ; 1 bytes @ 0x23
  2172  00C3                     	ds	1
  2173  00C4                     ??_main:	
  2174                           
  2175                           ; 1 bytes @ 0x24
  2176  00C4                     	ds	1
  2177  00C5                     main@pipe:	
  2178                           
  2179                           ; 1 bytes @ 0x25
  2180  00C5                     	ds	1
  2181  00C6                     main@packet:	
  2182                           
  2183                           ; 33 bytes @ 0x26
  2184  00C6                     	ds	33
  2185                           
  2186                           	psect	cstackCOMMON
  2187  0070                     __pcstackCOMMON:	
  2188  0070                     ?_isdigit:	
  2189  0070                     ?_nrf24l01ISR:	
  2190                           ; 1 bit 
  2191                           
  2192  0070                     ?_nrf24l01SetRXMode:	
  2193                           ; 1 bytes @ 0x0
  2194                           
  2195  0070                     ?_nrf24l01GetRXPacket:	
  2196                           ; 1 bytes @ 0x0
  2197                           
  2198  0070                     ?_nrf24l01Init:	
  2199                           ; 1 bytes @ 0x0
  2200                           
  2201  0070                     ?_nrf24l01SetTXPipe:	
  2202                           ; 1 bytes @ 0x0
  2203                           
  2204  0070                     ?_nrf24l01SetRXPipe:	
  2205                           ; 1 bytes @ 0x0
  2206                           
  2207  0070                     ?_nrf24l01CELow:	
  2208                           ; 1 bytes @ 0x0
  2209                           
  2210  0070                     ??_nrf24l01CELow:	
  2211                           ; 1 bytes @ 0x0
  2212                           
  2213  0070                     ?_nrf24l01CEHigh:	
  2214                           ; 1 bytes @ 0x0
  2215                           
  2216  0070                     ??_nrf24l01CEHigh:	
  2217                           ; 1 bytes @ 0x0
  2218                           
  2219  0070                     ?_nrf24l01CSLow:	
  2220                           ; 1 bytes @ 0x0
  2221                           
  2222  0070                     ??_nrf24l01CSLow:	
  2223                           ; 1 bytes @ 0x0
  2224                           
  2225  0070                     ?_nrf24l01CSHigh:	
  2226                           ; 1 bytes @ 0x0
  2227                           
  2228  0070                     ??_nrf24l01CSHigh:	
  2229                           ; 1 bytes @ 0x0
  2230                           
  2231  0070                     ?_nrf24l01InterfaceInit:	
  2232                           ; 1 bytes @ 0x0
  2233                           
  2234  0070                     ?_nrf24l01SPISend:	
  2235                           ; 1 bytes @ 0x0
  2236                           
  2237  0070                     ??_nrf24l01SPISend:	
  2238                           ; 1 bytes @ 0x0
  2239                           
  2240  0070                     ?_nrf24l01SPIStart:	
  2241                           ; 1 bytes @ 0x0
  2242                           
  2243  0070                     ??_nrf24l01SPIStart:	
  2244                           ; 1 bytes @ 0x0
  2245                           
  2246  0070                     ?_nrf24l01SPIEnd:	
  2247                           ; 1 bytes @ 0x0
  2248                           
  2249  0070                     ??_nrf24l01SPIEnd:	
  2250                           ; 1 bytes @ 0x0
  2251                           
  2252  0070                     ?_enableInterrupts:	
  2253                           ; 1 bytes @ 0x0
  2254                           
  2255  0070                     ??_enableInterrupts:	
  2256                           ; 1 bytes @ 0x0
  2257                           
  2258  0070                     ?_exception:	
  2259                           ; 1 bytes @ 0x0
  2260                           
  2261  0070                     ??_exception:	
  2262                           ; 1 bytes @ 0x0
  2263                           
  2264  0070                     ?_ISR:	
  2265                           ; 1 bytes @ 0x0
  2266                           
  2267  0070                     ?_sleep:	
  2268                           ; 1 bytes @ 0x0
  2269                           
  2270  0070                     ?_checkTXPower:	
  2271                           ; 1 bytes @ 0x0
  2272                           
  2273  0070                     ?_loop:	
  2274                           ; 1 bytes @ 0x0
  2275                           
  2276  0070                     ?_nrf24l01GetPipe:	
  2277                           ; 1 bytes @ 0x0
  2278                           
  2279  0070                     ?_main:	
  2280                           ; 1 bytes @ 0x0
  2281                           
  2282  0070                     ?_nrf24l01CheckACK:	
  2283                           ; 1 bytes @ 0x0
  2284                           
  2285  0070                     ?_nrf24l01ReceivePacket:	
  2286                           ; 1 bytes @ 0x0
  2287                           
  2288  0070                     ?_nrf24l01InitRegisters:	
  2289                           ; 1 bytes @ 0x0
  2290                           
  2291  0070                     ?i1_nrf24l01SetRXMode:	
  2292                           ; 1 bytes @ 0x0
  2293                           
  2294  0070                     ?i1_memset:	
  2295                           ; 1 bytes @ 0x0
  2296                           
  2297  0070                     ?_strcmp:	
  2298                           ; 1 bytes @ 0x0
  2299                           
  2300  0070                     nrf24l01SPISend@data:	
  2301                           ; 2 bytes @ 0x0
  2302                           
  2303  0070                     enableInterrupts@enable:	
  2304                           ; 1 bytes @ 0x0
  2305                           
  2306  0070                     exception@exception:	
  2307                           ; 1 bytes @ 0x0
  2308                           
  2309  0070                     strcmp@s1:	
  2310                           ; 1 bytes @ 0x0
  2311                           
  2312  0070                     i1memset@p1:	
  2313                           ; 2 bytes @ 0x0
  2314                           
  2315                           
  2316                           ; 2 bytes @ 0x0
  2317  0070                     	ds	1
  2318  0071                     ?i1_nrf24l01Send:	
  2319  0071                     i1nrf24l01Send@data:	
  2320                           ; 1 bytes @ 0x1
  2321                           
  2322                           
  2323                           ; 1 bytes @ 0x1
  2324  0071                     	ds	1
  2325  0072                     ??i1_nrf24l01Send:	
  2326  0072                     strcmp@s2:	
  2327                           ; 1 bytes @ 0x2
  2328                           
  2329  0072                     i1memset@c:	
  2330                           ; 1 bytes @ 0x2
  2331                           
  2332                           
  2333                           ; 2 bytes @ 0x2
  2334  0072                     	ds	1
  2335  0073                     ??_strcmp:	
  2336  0073                     i1nrf24l01Send@command:	
  2337                           ; 1 bytes @ 0x3
  2338                           
  2339                           
  2340                           ; 1 bytes @ 0x3
  2341  0073                     	ds	1
  2342  0074                     ??i1_nrf24l01SetRXMode:	
  2343  0074                     strcmp@r:	
  2344                           ; 1 bytes @ 0x4
  2345                           
  2346  0074                     i1memset@n:	
  2347                           ; 1 bytes @ 0x4
  2348                           
  2349                           
  2350                           ; 2 bytes @ 0x4
  2351  0074                     	ds	1
  2352  0075                     i1nrf24l01SetRXMode@config:	
  2353                           
  2354                           ; 1 bytes @ 0x5
  2355  0075                     	ds	1
  2356  0076                     ??i1_memset:	
  2357  0076                     i1nrf24l01SetRXMode@rxMode:	
  2358                           ; 1 bytes @ 0x6
  2359                           
  2360  0076                     i1memset@p:	
  2361                           ; 1 bytes @ 0x6
  2362                           
  2363                           
  2364                           ; 2 bytes @ 0x6
  2365  0076                     	ds	1
  2366  0077                     ??_nrf24l01CheckACK:	
  2367                           
  2368                           ; 1 bytes @ 0x7
  2369  0077                     	ds	1
  2370  0078                     ??_nrf24l01ReceivePacket:	
  2371                           
  2372                           ; 1 bytes @ 0x8
  2373  0078                     	ds	1
  2374  0079                     nrf24l01ReceivePacket@width:	
  2375                           
  2376                           ; 1 bytes @ 0x9
  2377  0079                     	ds	1
  2378  007A                     nrf24l01ReceivePacket@i:	
  2379                           
  2380                           ; 1 bytes @ 0xA
  2381  007A                     	ds	1
  2382  007B                     ??_nrf24l01ISR:	
  2383                           
  2384                           ; 1 bytes @ 0xB
  2385  007B                     	ds	1
  2386  007C                     nrf24l01ISR@status:	
  2387                           
  2388                           ; 1 bytes @ 0xC
  2389  007C                     	ds	1
  2390  007D                     ??_ISR:	
  2391                           
  2392                           	psect	cstackBANK0
  2393  0020                     __pcstackBANK0:	
  2394                           ; 1 bytes @ 0xD
  2395                           
  2396  0020                     ?___ftge:	
  2397  0020                     ??_nrf24l01GetRXPacket:	
  2398                           ; 1 bit 
  2399                           
  2400  0020                     ?_nrf24l01Send:	
  2401                           ; 1 bytes @ 0x0
  2402                           
  2403  0020                     ?_strcpy:	
  2404                           ; 1 bytes @ 0x0
  2405                           
  2406  0020                     ??_isdigit:	
  2407                           ; 1 bytes @ 0x0
  2408                           
  2409  0020                     ??_nrf24l01InterfaceInit:	
  2410                           ; 1 bytes @ 0x0
  2411                           
  2412  0020                     ??_sleep:	
  2413                           ; 1 bytes @ 0x0
  2414                           
  2415  0020                     ?___bmul:	
  2416                           ; 1 bytes @ 0x0
  2417                           
  2418  0020                     ?_memset:	
  2419                           ; 1 bytes @ 0x0
  2420                           
  2421  0020                     ?_strlen:	
  2422                           ; 2 bytes @ 0x0
  2423                           
  2424  0020                     ?___wmul:	
  2425                           ; 2 bytes @ 0x0
  2426                           
  2427  0020                     ?___lwmod:	
  2428                           ; 2 bytes @ 0x0
  2429                           
  2430  0020                     ?___ftpack:	
  2431                           ; 2 bytes @ 0x0
  2432                           
  2433  0020                     ?___lldiv:	
  2434                           ; 3 bytes @ 0x0
  2435                           
  2436  0020                     nrf24l01Send@data:	
  2437                           ; 4 bytes @ 0x0
  2438                           
  2439  0020                     ___bmul@multiplicand:	
  2440                           ; 1 bytes @ 0x0
  2441                           
  2442  0020                     _isdigit$1797:	
  2443                           ; 1 bytes @ 0x0
  2444                           
  2445  0020                     ___wmul@multiplier:	
  2446                           ; 1 bytes @ 0x0
  2447                           
  2448  0020                     ___lwmod@divisor:	
  2449                           ; 2 bytes @ 0x0
  2450                           
  2451  0020                     memset@p1:	
  2452                           ; 2 bytes @ 0x0
  2453                           
  2454  0020                     strcpy@from:	
  2455                           ; 2 bytes @ 0x0
  2456                           
  2457  0020                     strlen@s:	
  2458                           ; 2 bytes @ 0x0
  2459                           
  2460  0020                     ___ftpack@arg:	
  2461                           ; 2 bytes @ 0x0
  2462                           
  2463  0020                     ___ftge@ff1:	
  2464                           ; 3 bytes @ 0x0
  2465                           
  2466  0020                     ___lldiv@divisor:	
  2467                           ; 3 bytes @ 0x0
  2468                           
  2469                           
  2470                           ; 4 bytes @ 0x0
  2471  0020                     	ds	1
  2472  0021                     ??_nrf24l01Send:	
  2473  0021                     ??___bmul:	
  2474                           ; 1 bytes @ 0x1
  2475                           
  2476  0021                     sleep@wdps:	
  2477                           ; 1 bytes @ 0x1
  2478                           
  2479  0021                     isdigit@c:	
  2480                           ; 1 bytes @ 0x1
  2481                           
  2482                           
  2483                           ; 1 bytes @ 0x1
  2484  0021                     	ds	1
  2485  0022                     ??_strlen:	
  2486  0022                     ??_strcpy:	
  2487                           ; 1 bytes @ 0x2
  2488                           
  2489  0022                     nrf24l01Send@command:	
  2490                           ; 1 bytes @ 0x2
  2491                           
  2492  0022                     ___bmul@product:	
  2493                           ; 1 bytes @ 0x2
  2494                           
  2495  0022                     ___wmul@multiplicand:	
  2496                           ; 1 bytes @ 0x2
  2497                           
  2498  0022                     ___lwmod@dividend:	
  2499                           ; 2 bytes @ 0x2
  2500                           
  2501  0022                     memset@c:	
  2502                           ; 2 bytes @ 0x2
  2503                           
  2504                           
  2505                           ; 2 bytes @ 0x2
  2506  0022                     	ds	1
  2507  0023                     ??_nrf24l01SetRXMode:	
  2508  0023                     ?_nrf24l01ChangeTXPower:	
  2509                           ; 1 bytes @ 0x3
  2510                           
  2511  0023                     ??_nrf24l01SetRXPipe:	
  2512                           ; 1 bytes @ 0x3
  2513                           
  2514  0023                     ___bmul@multiplier:	
  2515                           ; 1 bytes @ 0x3
  2516                           
  2517  0023                     ___ftpack@exp:	
  2518                           ; 1 bytes @ 0x3
  2519                           
  2520  0023                     strcpy@to:	
  2521                           ; 1 bytes @ 0x3
  2522                           
  2523  0023                     nrf24l01ChangeTXPower@addPower:	
  2524                           ; 1 bytes @ 0x3
  2525                           
  2526  0023                     ___ftge@ff2:	
  2527                           ; 2 bytes @ 0x3
  2528                           
  2529                           
  2530                           ; 3 bytes @ 0x3
  2531  0023                     	ds	1
  2532  0024                     ??_nrf24l01SetTXPipe:	
  2533  0024                     ??___wmul:	
  2534                           ; 1 bytes @ 0x4
  2535                           
  2536  0024                     ??___lwmod:	
  2537                           ; 1 bytes @ 0x4
  2538                           
  2539  0024                     nrf24l01SetRXMode@config:	
  2540                           ; 1 bytes @ 0x4
  2541                           
  2542  0024                     ___ftpack@sign:	
  2543                           ; 1 bytes @ 0x4
  2544                           
  2545  0024                     strcpy@cp:	
  2546                           ; 1 bytes @ 0x4
  2547                           
  2548  0024                     ___wmul@product:	
  2549                           ; 1 bytes @ 0x4
  2550                           
  2551  0024                     memset@n:	
  2552                           ; 2 bytes @ 0x4
  2553                           
  2554  0024                     strlen@cp:	
  2555                           ; 2 bytes @ 0x4
  2556                           
  2557  0024                     ___lldiv@dividend:	
  2558                           ; 2 bytes @ 0x4
  2559                           
  2560                           
  2561                           ; 4 bytes @ 0x4
  2562  0024                     	ds	1
  2563  0025                     ??_nrf24l01ChangeTXPower:	
  2564  0025                     ??___ftpack:	
  2565                           ; 1 bytes @ 0x5
  2566                           
  2567  0025                     nrf24l01SetRXMode@rxMode:	
  2568                           ; 1 bytes @ 0x5
  2569                           
  2570  0025                     nrf24l01SetRXPipe@pipe:	
  2571                           ; 1 bytes @ 0x5
  2572                           
  2573  0025                     ___lwmod@counter:	
  2574                           ; 1 bytes @ 0x5
  2575                           
  2576                           
  2577                           ; 1 bytes @ 0x5
  2578  0025                     	ds	1
  2579  0026                     ??_memset:	
  2580  0026                     ??_nrf24l01GetPipe:	
  2581                           ; 1 bytes @ 0x6
  2582                           
  2583  0026                     ??___ftge:	
  2584                           ; 1 bytes @ 0x6
  2585                           
  2586  0026                     nrf24l01ChangeTXPower@rfSetup:	
  2587                           ; 1 bytes @ 0x6
  2588                           
  2589  0026                     nrf24l01SetTXPipe@pipe:	
  2590                           ; 1 bytes @ 0x6
  2591                           
  2592  0026                     nrf24l01SetRXPipe@enRXAddr:	
  2593                           ; 1 bytes @ 0x6
  2594                           
  2595  0026                     memset@p:	
  2596                           ; 1 bytes @ 0x6
  2597                           
  2598                           
  2599                           ; 2 bytes @ 0x6
  2600  0026                     	ds	1
  2601  0027                     ?_nrf24l01SendPacket:	
  2602  0027                     ??_checkTXPower:	
  2603                           ; 1 bytes @ 0x7
  2604                           
  2605  0027                     ??_nrf24l01InitRegisters:	
  2606                           ; 1 bytes @ 0x7
  2607                           
  2608  0027                     nrf24l01SendPacket@Packet:	
  2609                           ; 1 bytes @ 0x7
  2610                           
  2611                           
  2612                           ; 2 bytes @ 0x7
  2613  0027                     	ds	1
  2614  0028                     ??___lldiv:	
  2615  0028                     ?___awtoft:	
  2616                           ; 1 bytes @ 0x8
  2617                           
  2618  0028                     ?___lbtoft:	
  2619                           ; 3 bytes @ 0x8
  2620                           
  2621  0028                     ?___lltoft:	
  2622                           ; 3 bytes @ 0x8
  2623                           
  2624  0028                     ?___lwtoft:	
  2625                           ; 3 bytes @ 0x8
  2626                           
  2627  0028                     checkTXPower@rxPacket:	
  2628                           ; 3 bytes @ 0x8
  2629                           
  2630  0028                     nrf24l01GetPipe@pipe:	
  2631                           ; 1 bytes @ 0x8
  2632                           
  2633  0028                     ___awtoft@c:	
  2634                           ; 1 bytes @ 0x8
  2635                           
  2636  0028                     ___lwtoft@c:	
  2637                           ; 2 bytes @ 0x8
  2638                           
  2639  0028                     ___lltoft@c:	
  2640                           ; 2 bytes @ 0x8
  2641                           
  2642                           
  2643                           ; 4 bytes @ 0x8
  2644  0028                     	ds	1
  2645  0029                     ??_nrf24l01SendPacket:	
  2646  0029                     nrf24l01GetPipe@name:	
  2647                           ; 1 bytes @ 0x9
  2648                           
  2649  0029                     nrf24l01InitRegisters@channel:	
  2650                           ; 1 bytes @ 0x9
  2651                           
  2652  0029                     ___lldiv@quotient:	
  2653                           ; 1 bytes @ 0x9
  2654                           
  2655                           
  2656                           ; 4 bytes @ 0x9
  2657  0029                     	ds	1
  2658  002A                     nrf24l01GetPipe@i:	
  2659  002A                     nrf24l01InitRegisters@setupAW:	
  2660                           ; 1 bytes @ 0xA
  2661                           
  2662                           
  2663                           ; 1 bytes @ 0xA
  2664  002A                     	ds	1
  2665  002B                     ??___awtoft:	
  2666  002B                     ??___lbtoft:	
  2667                           ; 1 bytes @ 0xB
  2668                           
  2669  002B                     ??___lwtoft:	
  2670                           ; 1 bytes @ 0xB
  2671                           
  2672  002B                     nrf24l01InitRegisters@feature:	
  2673                           ; 1 bytes @ 0xB
  2674                           
  2675                           
  2676                           ; 1 bytes @ 0xB
  2677  002B                     	ds	1
  2678  002C                     ??___lltoft:	
  2679  002C                     nrf24l01InitRegisters@rfSetup:	
  2680                           ; 1 bytes @ 0xC
  2681                           
  2682                           
  2683                           ; 1 bytes @ 0xC
  2684  002C                     	ds	1
  2685  002D                     nrf24l01SendPacket@i:	
  2686  002D                     nrf24l01InitRegisters@status:	
  2687                           ; 1 bytes @ 0xD
  2688                           
  2689  002D                     ___lldiv@counter:	
  2690                           ; 1 bytes @ 0xD
  2691                           
  2692  002D                     ___awtoft@sign:	
  2693                           ; 1 bytes @ 0xD
  2694                           
  2695  002D                     ___lltoft@exp:	
  2696                           ; 1 bytes @ 0xD
  2697                           
  2698                           
  2699                           ; 1 bytes @ 0xD
  2700  002D                     	ds	1
  2701  002E                     ?___ftadd:	
  2702  002E                     ?___llmod:	
  2703                           ; 3 bytes @ 0xE
  2704                           
  2705  002E                     nrf24l01InitRegisters@enAA:	
  2706                           ; 4 bytes @ 0xE
  2707                           
  2708  002E                     ___ftadd@f1:	
  2709                           ; 1 bytes @ 0xE
  2710                           
  2711  002E                     ___llmod@divisor:	
  2712                           ; 3 bytes @ 0xE
  2713                           
  2714                           
  2715                           ; 4 bytes @ 0xE
  2716  002E                     	ds	1
  2717  002F                     nrf24l01InitRegisters@DynPD:	
  2718  002F                     ___lbtoft@c:	
  2719                           ; 1 bytes @ 0xF
  2720                           
  2721                           
  2722                           ; 1 bytes @ 0xF
  2723  002F                     	ds	1
  2724  0030                     nrf24l01InitRegisters@config:	
  2725                           
  2726                           ; 1 bytes @ 0x10
  2727  0030                     	ds	1
  2728  0031                     nrf24l01InitRegisters@i:	
  2729  0031                     ___ftadd@f2:	
  2730                           ; 2 bytes @ 0x11
  2731                           
  2732                           
  2733                           ; 3 bytes @ 0x11
  2734  0031                     	ds	1
  2735  0032                     ___llmod@dividend:	
  2736                           
  2737                           ; 4 bytes @ 0x12
  2738  0032                     	ds	1
  2739  0033                     ??_nrf24l01Init:	
  2740                           
  2741                           ; 1 bytes @ 0x13
  2742  0033                     	ds	1
  2743  0034                     ??___ftadd:	
  2744                           
  2745                           ; 1 bytes @ 0x14
  2746  0034                     	ds	2
  2747  0036                     ??___llmod:	
  2748                           
  2749                           ; 1 bytes @ 0x16
  2750  0036                     	ds	1
  2751  0037                     ___llmod@counter:	
  2752                           
  2753                           ; 1 bytes @ 0x17
  2754  0037                     	ds	1
  2755  0038                     ?_sprintf:	
  2756  0038                     ___ftadd@sign:	
  2757                           ; 2 bytes @ 0x18
  2758                           
  2759  0038                     sprintf@f:	
  2760                           ; 1 bytes @ 0x18
  2761                           
  2762                           
  2763                           ; 2 bytes @ 0x18
  2764  0038                     	ds	1
  2765  0039                     ___ftadd@exp2:	
  2766                           
  2767                           ; 1 bytes @ 0x19
  2768  0039                     	ds	1
  2769  003A                     ___ftadd@exp1:	
  2770                           
  2771                           ; 1 bytes @ 0x1A
  2772  003A                     	ds	1
  2773  003B                     ?___ftdiv:	
  2774  003B                     ?___ftsub:	
  2775                           ; 3 bytes @ 0x1B
  2776                           
  2777  003B                     ___ftdiv@f2:	
  2778                           ; 3 bytes @ 0x1B
  2779                           
  2780  003B                     ___ftsub@f2:	
  2781                           ; 3 bytes @ 0x1B
  2782                           
  2783                           
  2784                           ; 3 bytes @ 0x1B
  2785  003B                     	ds	3
  2786  003E                     ___ftdiv@f1:	
  2787  003E                     ___ftsub@f1:	
  2788                           ; 3 bytes @ 0x1E
  2789                           
  2790                           
  2791                           ; 3 bytes @ 0x1E
  2792  003E                     	ds	3
  2793  0041                     ??___ftdiv:	
  2794  0041                     ??___ftsub:	
  2795                           ; 1 bytes @ 0x21
  2796                           
  2797                           
  2798                           ; 1 bytes @ 0x21
  2799  0041                     	ds	1
  2800  0042                     ??_sprintf:	
  2801                           
  2802                           ; 1 bytes @ 0x22
  2803  0042                     	ds	3
  2804  0045                     ___ftdiv@cntr:	
  2805                           
  2806                           ; 1 bytes @ 0x25
  2807  0045                     	ds	1
  2808  0046                     ___ftdiv@f3:	
  2809                           
  2810                           ; 3 bytes @ 0x26
  2811  0046                     	ds	2
  2812  0048                     sprintf@flag:	
  2813                           
  2814                           ; 1 bytes @ 0x28
  2815  0048                     	ds	1
  2816  0049                     sprintf@ap:	
  2817  0049                     ___ftdiv@exp:	
  2818                           ; 1 bytes @ 0x29
  2819                           
  2820                           
  2821                           ; 1 bytes @ 0x29
  2822  0049                     	ds	1
  2823  004A                     ___ftdiv@sign:	
  2824  004A                     sprintf@val:	
  2825                           ; 1 bytes @ 0x2A
  2826                           
  2827                           
  2828                           ; 4 bytes @ 0x2A
  2829  004A                     	ds	1
  2830  004B                     ?_getADCValue:	
  2831                           
  2832                           ; 3 bytes @ 0x2B
  2833  004B                     	ds	3
  2834  004E                     ??_getADCValue:	
  2835  004E                     sprintf@sp:	
  2836                           ; 1 bytes @ 0x2E
  2837                           
  2838                           
  2839                           ; 1 bytes @ 0x2E
  2840  004E                     	ds	1
  2841  004F                     sprintf@width:	
  2842                           
  2843                           ; 2 bytes @ 0x2F
  2844  004F                     	ds	2
  2845  0051                     getADCValue@adcLoop:	
  2846  0051                     sprintf@prec:	
  2847                           ; 2 bytes @ 0x31
  2848                           
  2849                           
  2850                           ; 2 bytes @ 0x31
  2851  0051                     	ds	2
  2852  0053                     getADCValue@channel:	
  2853  0053                     sprintf@c:	
  2854                           ; 1 bytes @ 0x33
  2855                           
  2856                           
  2857                           ; 1 bytes @ 0x33
  2858  0053                     	ds	1
  2859  0054                     getADCValue@adcSum:	
  2860                           
  2861                           ; 3 bytes @ 0x34
  2862  0054                     	ds	3
  2863  0057                     ?___ftmul:	
  2864  0057                     ?___ftneg:	
  2865                           ; 3 bytes @ 0x37
  2866                           
  2867  0057                     ___ftmul@f1:	
  2868                           ; 3 bytes @ 0x37
  2869                           
  2870  0057                     ___ftneg@f1:	
  2871                           ; 3 bytes @ 0x37
  2872                           
  2873                           
  2874                           ; 3 bytes @ 0x37
  2875  0057                     	ds	3
  2876  005A                     ??___ftneg:	
  2877  005A                     ___ftmul@f2:	
  2878                           ; 1 bytes @ 0x3A
  2879                           
  2880                           
  2881                           ; 3 bytes @ 0x3A
  2882  005A                     	ds	3
  2883  005D                     ??___ftmul:	
  2884                           
  2885                           ; 1 bytes @ 0x3D
  2886  005D                     	ds	4
  2887  0061                     ___ftmul@exp:	
  2888                           
  2889                           ; 1 bytes @ 0x41
  2890  0061                     	ds	1
  2891  0062                     ___ftmul@f3_as_product:	
  2892                           
  2893                           ; 3 bytes @ 0x42
  2894  0062                     	ds	3
  2895  0065                     ___ftmul@cntr:	
  2896                           
  2897                           ; 1 bytes @ 0x45
  2898  0065                     	ds	1
  2899  0066                     ___ftmul@sign:	
  2900                           
  2901                           ; 1 bytes @ 0x46
  2902  0066                     	ds	1
  2903  0067                     ?___fttol:	
  2904  0067                     ___fttol@f1:	
  2905                           ; 4 bytes @ 0x47
  2906                           
  2907                           
  2908                           ; 3 bytes @ 0x47
  2909  0067                     	ds	4
  2910  006B                     ??___fttol:	
  2911                           
  2912                           ; 1 bytes @ 0x4B
  2913  006B                     	ds	4
  2914  006F                     ??_ftoa:	
  2915                           
  2916                           ; 1 bytes @ 0x4F
  2917  006F                     	ds	1
  2918  0070                     ??_strcat:	
  2919                           
  2920                           	psect	maintext
  2921  0E0E                     __pmaintext:	
  2922                           ; 1 bytes @ 0x50
  2923 ;;
  2924 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  2925 ;;
  2926 ;; *************** function _main *****************
  2927 ;; Defined at:
  2928 ;;		line 195 in file "main.c"
  2929 ;; Parameters:    Size  Location     Type
  2930 ;;		None
  2931 ;; Auto vars:     Size  Location     Type
  2932 ;;  packet         33   38[BANK1 ] struct .
  2933 ;;  pipe            1   37[BANK1 ] unsigned char 
  2934 ;; Return value:  Size  Location     Type
  2935 ;;                  1    wreg      void 
  2936 ;; Registers used:
  2937 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2938 ;; Tracked objects:
  2939 ;;		On entry : B1F/0
  2940 ;;		On exit  : 0/0
  2941 ;;		Unchanged: 0/0
  2942 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2943 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2944 ;;      Locals:         0       0      34       0       0       0       0       0       0       0       0       0       
      +0       0
  2945 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  2946 ;;      Totals:         0       0      35       0       0       0       0       0       0       0       0       0       
      +0       0
  2947 ;;Total ram usage:       35 bytes
  2948 ;; Hardware stack levels required when called:   13
  2949 ;; This function calls:
  2950 ;;		___lwtoft
  2951 ;;		_loop
  2952 ;;		_nrf24l01GetPipe
  2953 ;;		_nrf24l01Init
  2954 ;;		_nrf24l01SendPacket
  2955 ;;		_nrf24l01SetRXPipe
  2956 ;;		_nrf24l01SetTXPipe
  2957 ;;		_setMessage
  2958 ;;		_sleep
  2959 ;;		_strcpy
  2960 ;; This function is called by:
  2961 ;;		Startup code after reset
  2962 ;; This function uses a non-reentrant model
  2963 ;;
  2964                           
  2965                           
  2966                           ;psect for function _main
  2967  0E0E                     _main:	
  2968                           
  2969                           ;main.c: 198: ANSELA = 0x00;
  2970                           
  2971                           ;incstack = 0
  2972                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  2973  0E0E  0023               	movlb	3	; select bank3
  2974  0E0F  018C               	clrf	12	;volatile
  2975                           
  2976                           ;main.c: 199: ANSELC = 0x00;
  2977  0E10  018E               	clrf	14	;volatile
  2978                           
  2979                           ;main.c: 201: ODCONA = 0x00;
  2980  0E11  0025               	movlb	5	; select bank5
  2981  0E12  018C               	clrf	12	;volatile
  2982                           
  2983                           ;main.c: 202: ODCONC = 0x00;
  2984  0E13  018E               	clrf	14	;volatile
  2985                           
  2986                           ;main.c: 207: INLVLA = 0x00;
  2987  0E14  0027               	movlb	7	; select bank7
  2988  0E15  018C               	clrf	12	;volatile
  2989                           
  2990                           ;main.c: 208: INLVLC = 0x00;
  2991  0E16  018E               	clrf	14	;volatile
  2992                           
  2993                           ;main.c: 210: WPUA = 0x00;
  2994  0E17  0024               	movlb	4	; select bank4
  2995  0E18  018C               	clrf	12	;volatile
  2996                           
  2997                           ;main.c: 211: WPUC = 0x00;
  2998  0E19  018E               	clrf	14	;volatile
  2999                           
  3000                           ;main.c: 213: TRISCbits.TRISC5 = 0;
  3001  0E1A  0021               	movlb	1	; select bank1
  3002  0E1B  128E               	bcf	14,5	;volatile
  3003                           
  3004                           ;main.c: 214: TRISCbits.TRISC4 = 0;
  3005  0E1C  120E               	bcf	14,4	;volatile
  3006                           
  3007                           ;main.c: 216: PORTCbits.RC4 = 0;
  3008  0E1D  0020               	movlb	0	; select bank0
  3009  0E1E  120E               	bcf	14,4	;volatile
  3010                           
  3011                           ;main.c: 223: INTCONbits.PEIE = 0;
  3012  0E1F  130B               	bcf	11,6	;volatile
  3013                           
  3014                           ;main.c: 224: INTCONbits.GIE = 0;
  3015  0E20  138B               	bcf	11,7	;volatile
  3016                           
  3017                           ;main.c: 226: OSCCON1bits.NOSC = 0b000;
  3018  0E21  308F               	movlw	-113
  3019  0E22  0032               	movlb	18	; select bank18
  3020  0E23  0599               	andwf	25,f	;volatile
  3021                           
  3022                           ;main.c: 227: OSCCON1bits.NDIV = 0b000;
  3023  0E24  30F0               	movlw	-16
  3024  0E25  0599               	andwf	25,f	;volatile
  3025                           
  3026                           ;main.c: 229: _delay((unsigned long)((10)*(32000000/4000.0)));
  3027  0E26  3068               	movlw	104
  3028  0E27  0021               	movlb	1	; select bank1
  3029  0E28  00C4               	movwf	??_main^(0+128)
  3030  0E29  30E4               	movlw	228
  3031  0E2A                     u3377:	
  3032  0E2A  0B89               	decfsz	9,f
  3033  0E2B  2E2A               	goto	u3377
  3034  0E2C  0BC4               	decfsz	??_main^(0+128),f
  3035  0E2D  2E2A               	goto	u3377
  3036  0E2E  0000               	nop
  3037                           
  3038                           ;main.c: 233: strcpy(romData->name, "UWT");
  3039  0E2F  302D               	movlw	low (STR_7| (0+32768))
  3040  0E30  0020               	movlb	0	; select bank0
  3041  0E31  00A0               	movwf	strcpy@from
  3042  0E32  3098               	movlw	high (STR_7| (0+32768))
  3043  0E33  00A1               	movwf	strcpy@from+1
  3044  0E34  0021               	movlb	1	; select bank1
  3045  0E35  086E               	movf	_romData^(0+128),w
  3046  0E36  3E01               	addlw	1
  3047  0E37  3188  2071  318E   	fcall	_strcpy
  3048                           
  3049                           ;main.c: 235: nrf24l01Init();
  3050  0E3A  3187  27DA  318E   	fcall	_nrf24l01Init
  3051                           
  3052                           ;main.c: 237: unsigned char pipe = nrf24l01GetPipe(romData->name);
  3053  0E3D  0021               	movlb	1	; select bank1
  3054  0E3E  086E               	movf	_romData^(0+128),w
  3055  0E3F  3E01               	addlw	1
  3056  0E40  3189  21FC  318E   	fcall	_nrf24l01GetPipe
  3057  0E43  0021               	movlb	1	; select bank1
  3058  0E44  00C4               	movwf	??_main^(0+128)
  3059  0E45  0844               	movf	??_main^(0+128),w
  3060  0E46  00C5               	movwf	main@pipe^(0+128)
  3061                           
  3062                           ;main.c: 238: nrf24l01SetTXPipe(pipe);
  3063  0E47  0845               	movf	main@pipe^(0+128),w
  3064  0E48  318B  2375  318E   	fcall	_nrf24l01SetTXPipe
  3065                           
  3066                           ;main.c: 239: nrf24l01SetRXPipe(pipe);
  3067  0E4B  0021               	movlb	1	; select bank1
  3068  0E4C  0845               	movf	main@pipe^(0+128),w
  3069  0E4D  3188  20EA  318E   	fcall	_nrf24l01SetRXPipe
  3070                           
  3071                           ;main.c: 243: ADCON0bits.ADON = 0;
  3072  0E50  0021               	movlb	1	; select bank1
  3073  0E51  101D               	bcf	29,0	;volatile
  3074                           
  3075                           ;main.c: 246: PORTAbits.RA4 = 0;
  3076  0E52  0020               	movlb	0	; select bank0
  3077  0E53  120C               	bcf	12,4	;volatile
  3078                           
  3079                           ;main.c: 247: TRISAbits.TRISA4 = 1;
  3080  0E54  0021               	movlb	1	; select bank1
  3081  0E55  160C               	bsf	12,4	;volatile
  3082                           
  3083                           ;main.c: 248: WPUAbits.WPUA4 = 0;
  3084  0E56  0024               	movlb	4	; select bank4
  3085  0E57  120C               	bcf	12,4	;volatile
  3086                           
  3087                           ;main.c: 249: ODCONAbits.ODCA4 = 1;
  3088  0E58  0025               	movlb	5	; select bank5
  3089  0E59  160C               	bsf	12,4	;volatile
  3090                           
  3091                           ;main.c: 250: ANSELAbits.ANSA4 = 1;
  3092  0E5A  0023               	movlb	3	; select bank3
  3093  0E5B  160C               	bsf	12,4	;volatile
  3094                           
  3095                           ;main.c: 253: ANSELCbits.ANSC3 = 1;
  3096  0E5C  158E               	bsf	14,3	;volatile
  3097                           
  3098                           ;main.c: 254: TRISCbits.TRISC3 = 1;
  3099  0E5D  0021               	movlb	1	; select bank1
  3100  0E5E  158E               	bsf	14,3	;volatile
  3101                           
  3102                           ;main.c: 257: FVRCONbits.TSEN = 1;
  3103  0E5F  0022               	movlb	2	; select bank2
  3104  0E60  1697               	bsf	23,5	;volatile
  3105                           
  3106                           ;main.c: 258: FVRCONbits.TSRNG = 1;
  3107  0E61  1617               	bsf	23,4	;volatile
  3108                           
  3109                           ;main.c: 261: FVRCONbits.FVREN = 0;
  3110  0E62  1397               	bcf	23,7	;volatile
  3111                           
  3112                           ;main.c: 262: FVRCONbits.ADFVR = 0b10;
  3113  0E63  0817               	movf	23,w	;volatile
  3114  0E64  39FC               	andlw	-4
  3115  0E65  3802               	iorlw	2
  3116  0E66  0097               	movwf	23	;volatile
  3117                           
  3118                           ;main.c: 264: ADCON1bits.ADCS = 0b111;
  3119  0E67  3070               	movlw	112
  3120  0E68  0021               	movlb	1	; select bank1
  3121  0E69  049E               	iorwf	30,f	;volatile
  3122                           
  3123                           ;main.c: 265: ADCON1bits.ADFM = 1;
  3124  0E6A  179E               	bsf	30,7	;volatile
  3125                           
  3126                           ;main.c: 266: ADCON1bits.ADPREF = 0b11;
  3127  0E6B  3003               	movlw	3
  3128  0E6C  049E               	iorwf	30,f	;volatile
  3129                           
  3130                           ;main.c: 267: ADCON1bits.ADNREF = 0b00;
  3131  0E6D  111E               	bcf	30,2	;volatile
  3132                           
  3133                           ;main.c: 270: ADCON0bits.CHS = 3;
  3134  0E6E  081D               	movf	29,w	;volatile
  3135  0E6F  3903               	andlw	-253
  3136  0E70  380C               	iorlw	12
  3137  0E71  009D               	movwf	29	;volatile
  3138                           
  3139                           ;main.c: 275: TRISAbits.TRISA2 = 1;
  3140  0E72  150C               	bsf	12,2	;volatile
  3141                           
  3142                           ;main.c: 276: PIE0bits.INTE = 1;
  3143  0E73  1410               	bsf	16,0	;volatile
  3144                           
  3145                           ;main.c: 277: INTCONbits.INTEDG = 0;
  3146  0E74  100B               	bcf	11,0	;volatile
  3147                           
  3148                           ;main.c: 280: TRISAbits.TRISA5 = 0;
  3149  0E75  128C               	bcf	12,5	;volatile
  3150                           
  3151                           ;main.c: 281: PORTAbits.RA5 = 0;
  3152  0E76  0020               	movlb	0	; select bank0
  3153  0E77  128C               	bcf	12,5	;volatile
  3154                           
  3155                           ;main.c: 284: INTCONbits.PEIE = 1;
  3156  0E78  170B               	bsf	11,6	;volatile
  3157                           
  3158                           ;main.c: 285: INTCONbits.GIE = 1;
  3159  0E79  178B               	bsf	11,7	;volatile
  3160                           
  3161                           ;main.c: 287: nrf24l01Packet_t packet;;main.c: 289: setMessage(&packet, "BOOT", romData-
      +                          >bootMode);
  3162  0E7A  30C6               	movlw	low main@packet
  3163  0E7B  0021               	movlb	1	; select bank1
  3164  0E7C  00B9               	movwf	setMessage@packet^(0+128)
  3165  0E7D  3000               	movlw	high main@packet
  3166  0E7E  00BA               	movwf	(setMessage@packet+1)^(0+128)
  3167  0E7F  3028               	movlw	low (STR_8| (0+32768))
  3168  0E80  00BB               	movwf	setMessage@topic^(0+128)
  3169  0E81  3098               	movlw	high (STR_8| (0+32768))
  3170  0E82  00BC               	movwf	(setMessage@topic^(0+128)+1)
  3171  0E83  086E               	movf	_romData^(0+128),w
  3172  0E84  3E11               	addlw	17
  3173  0E85  0086               	movwf	6
  3174  0E86  3001               	movlw	1	; select bank2/3
  3175  0E87  0087               	movwf	7
  3176  0E88  3F40               	moviw [0]fsr1
  3177  0E89  0020               	movlb	0	; select bank0
  3178  0E8A  00A8               	movwf	___lwtoft@c
  3179  0E8B  3F41               	moviw [1]fsr1
  3180  0E8C  00A9               	movwf	___lwtoft@c+1
  3181  0E8D  3197  279F  318E   	fcall	___lwtoft
  3182  0E90  0020               	movlb	0	; select bank0
  3183  0E91  0828               	movf	?___lwtoft,w
  3184  0E92  0021               	movlb	1	; select bank1
  3185  0E93  00BD               	movwf	setMessage@value^(0+128)
  3186  0E94  0020               	movlb	0	; select bank0
  3187  0E95  0829               	movf	?___lwtoft+1,w
  3188  0E96  0021               	movlb	1	; select bank1
  3189  0E97  00BE               	movwf	(setMessage@value+1)^(0+128)
  3190  0E98  0020               	movlb	0	; select bank0
  3191  0E99  082A               	movf	?___lwtoft+2,w
  3192  0E9A  0021               	movlb	1	; select bank1
  3193  0E9B  00BF               	movwf	(setMessage@value+2)^(0+128)
  3194  0E9C  318D  2507  318E   	fcall	_setMessage
  3195                           
  3196                           ;main.c: 290: packet.packetData.byte = 0;
  3197  0E9F  0021               	movlb	1	; select bank1
  3198  0EA0  01C6               	clrf	main@packet^(0+128)
  3199                           
  3200                           ;main.c: 291: packet.packetData.ACKRequest = 0;
  3201  0EA1  1146               	bcf	main@packet^(0+128),2
  3202                           
  3203                           ;main.c: 292: nrf24l01SendPacket(&packet);
  3204  0EA2  30C6               	movlw	low main@packet
  3205  0EA3  0020               	movlb	0	; select bank0
  3206  0EA4  00A7               	movwf	nrf24l01SendPacket@Packet
  3207  0EA5  3000               	movlw	high main@packet
  3208  0EA6  00A8               	movwf	nrf24l01SendPacket@Packet+1
  3209  0EA7  3186  265E  318E   	fcall	_nrf24l01SendPacket
  3210                           
  3211                           ;main.c: 293: sleep(10);
  3212  0EAA  300A               	movlw	10
  3213  0EAB  3188  201E  318E   	fcall	_sleep
  3214  0EAE                     l3451:	
  3215                           ;main.c: 295: while(1){
  3216                           
  3217                           
  3218                           ;main.c: 296: loop();
  3219  0EAE  3181  21FF  318E   	fcall	_loop
  3220  0EB1  2EAE               	goto	l3451
  3221  0EB2                     __end_of_main:	
  3222                           ;main.c: 297: };main.c: 299: return;
  3223                           
  3224                           
  3225                           	psect	text1
  3226  0871                     __ptext1:	
  3227 ;; *************** function _strcpy *****************
  3228 ;; Defined at:
  3229 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\strcpy.c"
  3230 ;; Parameters:    Size  Location     Type
  3231 ;;  to              1    wreg     PTR unsigned char 
  3232 ;;		 -> romDataMap(28), 
  3233 ;;  from            2    0[BANK0 ] PTR const unsigned char 
  3234 ;;		 -> STR_7(4), 
  3235 ;; Auto vars:     Size  Location     Type
  3236 ;;  to              1    3[BANK0 ] PTR unsigned char 
  3237 ;;		 -> romDataMap(28), 
  3238 ;;  cp              1    4[BANK0 ] PTR unsigned char 
  3239 ;;		 -> romDataMap(28), 
  3240 ;; Return value:  Size  Location     Type
  3241 ;;                  1    wreg      PTR unsigned char 
  3242 ;; Registers used:
  3243 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath
  3244 ;; Tracked objects:
  3245 ;;		On entry : 0/0
  3246 ;;		On exit  : 0/0
  3247 ;;		Unchanged: 0/0
  3248 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3249 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3250 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3251 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3252 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3253 ;;Total ram usage:        5 bytes
  3254 ;; Hardware stack levels used:    1
  3255 ;; Hardware stack levels required when called:    7
  3256 ;; This function calls:
  3257 ;;		Nothing
  3258 ;; This function is called by:
  3259 ;;		_main
  3260 ;; This function uses a non-reentrant model
  3261 ;;
  3262                           
  3263                           
  3264                           ;psect for function _strcpy
  3265  0871                     _strcpy:	
  3266                           
  3267                           ;incstack = 0
  3268                           ; Regs used in _strcpy: [wreg-fsr1h+status,2+status,0+pclath]
  3269                           ;strcpy@to stored from wreg
  3270  0871  0020               	movlb	0	; select bank0
  3271  0872  00A3               	movwf	strcpy@to
  3272  0873  0823               	movf	strcpy@to,w
  3273  0874  00A2               	movwf	??_strcpy
  3274  0875  0822               	movf	??_strcpy,w
  3275  0876  00A4               	movwf	strcpy@cp
  3276  0877                     l3337:	
  3277  0877  0824               	movf	strcpy@cp,w
  3278  0878  0086               	movwf	6
  3279  0879  3001               	movlw	1	; select bank2/3
  3280  087A  0087               	movwf	7
  3281  087B  0820               	movf	strcpy@from,w
  3282  087C  0084               	movwf	4
  3283  087D  0821               	movf	strcpy@from+1,w
  3284  087E  0085               	movwf	5
  3285  087F  0800               	movf	0,w	;code access
  3286  0880  3FC0               	movwi [0]fsr1
  3287  0881  0889               	movf	9,f
  3288  0882  1903               	btfsc	3,2
  3289  0883  0008               	return
  3290  0884  3001               	movlw	1
  3291  0885  00A2               	movwf	??_strcpy
  3292  0886  0822               	movf	??_strcpy,w
  3293  0887  07A4               	addwf	strcpy@cp,f
  3294  0888  3001               	movlw	1
  3295  0889  07A0               	addwf	strcpy@from,f
  3296  088A  3000               	movlw	0
  3297  088B  3DA1               	addwfc	strcpy@from+1,f
  3298  088C  2877               	goto	l3337
  3299  088D                     __end_of_strcpy:	
  3300                           ;	Return value of _strcpy is never used
  3301                           
  3302                           
  3303                           	psect	text2
  3304  07DA                     __ptext2:	
  3305 ;; *************** function _nrf24l01Init *****************
  3306 ;; Defined at:
  3307 ;;		line 444 in file "nrf24l01.c"
  3308 ;; Parameters:    Size  Location     Type
  3309 ;;		None
  3310 ;; Auto vars:     Size  Location     Type
  3311 ;;		None
  3312 ;; Return value:  Size  Location     Type
  3313 ;;                  1    wreg      void 
  3314 ;; Registers used:
  3315 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3316 ;; Tracked objects:
  3317 ;;		On entry : 0/0
  3318 ;;		On exit  : 0/0
  3319 ;;		Unchanged: 0/0
  3320 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3321 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3322 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3323 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3324 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3325 ;;Total ram usage:        2 bytes
  3326 ;; Hardware stack levels used:    1
  3327 ;; Hardware stack levels required when called:   12
  3328 ;; This function calls:
  3329 ;;		_nrf24l01CEHigh
  3330 ;;		_nrf24l01CELow
  3331 ;;		_nrf24l01InitRegisters
  3332 ;;		_nrf24l01InterfaceInit
  3333 ;; This function is called by:
  3334 ;;		_main
  3335 ;; This function uses a non-reentrant model
  3336 ;;
  3337                           
  3338                           
  3339                           ;psect for function _nrf24l01Init
  3340  07DA                     _nrf24l01Init:	
  3341                           
  3342                           ;nrf24l01.c: 447: nrf24l01InterfaceInit();
  3343                           
  3344                           ;incstack = 0
  3345                           ; Regs used in _nrf24l01Init: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3346  07DA  3188  2055  3187   	fcall	_nrf24l01InterfaceInit
  3347                           
  3348                           ;nrf24l01.c: 452: nrf24l01CELow();
  3349  07DD  3197  2731  3187   	fcall	_nrf24l01CELow
  3350                           
  3351                           ;nrf24l01.c: 454: _delay((unsigned long)((50000)*(32000000/4000000.0)));
  3352  07E0  3003               	movlw	3
  3353  07E1  0020               	movlb	0	; select bank0
  3354  07E2  00B4               	movwf	??_nrf24l01Init+1
  3355  07E3  3008               	movlw	8
  3356  07E4  00B3               	movwf	??_nrf24l01Init
  3357  07E5  3077               	movlw	119
  3358  07E6                     u3387:	
  3359  07E6  0B89               	decfsz	9,f
  3360  07E7  2FE6               	goto	u3387
  3361  07E8  0BB3               	decfsz	??_nrf24l01Init,f
  3362  07E9  2FE6               	goto	u3387
  3363  07EA  0BB4               	decfsz	??_nrf24l01Init+1,f
  3364  07EB  2FE6               	goto	u3387
  3365                           
  3366                           ;nrf24l01.c: 456: nrf24l01InitRegisters();
  3367  07EC  3183  2370  3187   	fcall	_nrf24l01InitRegisters
  3368                           
  3369                           ;nrf24l01.c: 458: _delay((unsigned long)((50000)*(32000000/4000000.0)));
  3370  07EF  3003               	movlw	3
  3371  07F0  0020               	movlb	0	; select bank0
  3372  07F1  00B4               	movwf	??_nrf24l01Init+1
  3373  07F2  3008               	movlw	8
  3374  07F3  00B3               	movwf	??_nrf24l01Init
  3375  07F4  3077               	movlw	119
  3376  07F5                     u3397:	
  3377  07F5  0B89               	decfsz	9,f
  3378  07F6  2FF5               	goto	u3397
  3379  07F7  0BB3               	decfsz	??_nrf24l01Init,f
  3380  07F8  2FF5               	goto	u3397
  3381  07F9  0BB4               	decfsz	??_nrf24l01Init+1,f
  3382  07FA  2FF5               	goto	u3397
  3383                           
  3384                           ;nrf24l01.c: 460: nrf24l01CEHigh();
  3385  07FB  3197  272E         	fcall	_nrf24l01CEHigh
  3386  07FD  0008               	return
  3387  07FE                     __end_of_nrf24l01Init:	
  3388                           
  3389                           	psect	text3
  3390  0855                     __ptext3:	
  3391 ;; *************** function _nrf24l01InterfaceInit *****************
  3392 ;; Defined at:
  3393 ;;		line 27 in file "interface.c"
  3394 ;; Parameters:    Size  Location     Type
  3395 ;;		None
  3396 ;; Auto vars:     Size  Location     Type
  3397 ;;		None
  3398 ;; Return value:  Size  Location     Type
  3399 ;;                  1    wreg      void 
  3400 ;; Registers used:
  3401 ;;		wreg, status,2, status,0
  3402 ;; Tracked objects:
  3403 ;;		On entry : 0/0
  3404 ;;		On exit  : 0/0
  3405 ;;		Unchanged: 0/0
  3406 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3407 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3408 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3409 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3410 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3411 ;;Total ram usage:        0 bytes
  3412 ;; Hardware stack levels used:    1
  3413 ;; Hardware stack levels required when called:    7
  3414 ;; This function calls:
  3415 ;;		Nothing
  3416 ;; This function is called by:
  3417 ;;		_nrf24l01Init
  3418 ;; This function uses a non-reentrant model
  3419 ;;
  3420                           
  3421                           
  3422                           ;psect for function _nrf24l01InterfaceInit
  3423  0855                     _nrf24l01InterfaceInit:	
  3424                           
  3425                           ;interface.c: 29: TRISAbits.TRISA0 = 0;
  3426                           
  3427                           ;incstack = 0
  3428                           ; Regs used in _nrf24l01InterfaceInit: [wreg+status,2+status,0]
  3429  0855  0021               	movlb	1	; select bank1
  3430  0856  100C               	bcf	12,0	;volatile
  3431                           
  3432                           ;interface.c: 30: TRISAbits.TRISA1 = 0;
  3433  0857  108C               	bcf	12,1	;volatile
  3434                           
  3435                           ;interface.c: 32: TRISCbits.TRISC1 = 1;
  3436  0858  148E               	bsf	14,1	;volatile
  3437                           
  3438                           ;interface.c: 33: TRISCbits.TRISC2 = 0;
  3439  0859  110E               	bcf	14,2	;volatile
  3440                           
  3441                           ;interface.c: 34: TRISCbits.TRISC0 = 0;
  3442  085A  100E               	bcf	14,0	;volatile
  3443                           
  3444                           ;interface.c: 36: SSP1CON1bits.SSPEN = 0;
  3445  085B  0024               	movlb	4	; select bank4
  3446  085C  1295               	bcf	21,5	;volatile
  3447                           
  3448                           ;interface.c: 38: RC1PPSbits.RC1PPS = 0b10001;
  3449  085D  003D               	movlb	29	; select bank29
  3450  085E  0821               	movf	33,w	;volatile
  3451  085F  39E0               	andlw	-32
  3452  0860  3811               	iorlw	17
  3453  0861  00A1               	movwf	33	;volatile
  3454                           
  3455                           ;interface.c: 39: RC2PPSbits.RC2PPS = 0b11001;
  3456  0862  0822               	movf	34,w	;volatile
  3457  0863  39E0               	andlw	-32
  3458  0864  3819               	iorlw	25
  3459  0865  00A2               	movwf	34	;volatile
  3460                           
  3461                           ;interface.c: 40: RC0PPSbits.RC0PPS = 0b11000;
  3462  0866  0820               	movf	32,w	;volatile
  3463  0867  39E0               	andlw	-32
  3464  0868  3818               	iorlw	24
  3465  0869  00A0               	movwf	32	;volatile
  3466                           
  3467                           ;interface.c: 42: SSP1CON1bits.CKP = 0;
  3468  086A  0024               	movlb	4	; select bank4
  3469  086B  1215               	bcf	21,4	;volatile
  3470                           
  3471                           ;interface.c: 43: SSP1STATbits.CKE = 1;
  3472  086C  1714               	bsf	20,6	;volatile
  3473                           
  3474                           ;interface.c: 44: SSP1CON1bits.SSPM = 0b0000;
  3475  086D  30F0               	movlw	-16
  3476  086E  0595               	andwf	21,f	;volatile
  3477                           
  3478                           ;interface.c: 46: SSP1CON1bits.SSPEN = 1;
  3479  086F  1695               	bsf	21,5	;volatile
  3480  0870  0008               	return
  3481  0871                     __end_of_nrf24l01InterfaceInit:	
  3482                           
  3483                           	psect	text4
  3484  0370                     __ptext4:	
  3485 ;; *************** function _nrf24l01InitRegisters *****************
  3486 ;; Defined at:
  3487 ;;		line 343 in file "nrf24l01.c"
  3488 ;; Parameters:    Size  Location     Type
  3489 ;;		None
  3490 ;; Auto vars:     Size  Location     Type
  3491 ;;  i               2   17[BANK0 ] unsigned int 
  3492 ;;  config          1   16[BANK0 ] struct .
  3493 ;;  DynPD           1   15[BANK0 ] struct .
  3494 ;;  enAA            1   14[BANK0 ] struct .
  3495 ;;  status          1   13[BANK0 ] struct .
  3496 ;;  rfSetup         1   12[BANK0 ] struct .
  3497 ;;  feature         1   11[BANK0 ] struct .
  3498 ;;  setupAW         1   10[BANK0 ] struct .
  3499 ;;  channel         1    9[BANK0 ] struct .
  3500 ;; Return value:  Size  Location     Type
  3501 ;;                  1    wreg      void 
  3502 ;; Registers used:
  3503 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3504 ;; Tracked objects:
  3505 ;;		On entry : 0/0
  3506 ;;		On exit  : 0/0
  3507 ;;		Unchanged: 0/0
  3508 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3509 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3510 ;;      Locals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3511 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3512 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3513 ;;Total ram usage:       12 bytes
  3514 ;; Hardware stack levels used:    1
  3515 ;; Hardware stack levels required when called:   11
  3516 ;; This function calls:
  3517 ;;		___bmul
  3518 ;;		_nrf24l01SPIEnd
  3519 ;;		_nrf24l01SPISend
  3520 ;;		_nrf24l01SPIStart
  3521 ;;		_nrf24l01Send
  3522 ;;		_nrf24l01SetRXPipe
  3523 ;;		_nrf24l01SetTXPipe
  3524 ;; This function is called by:
  3525 ;;		_nrf24l01Init
  3526 ;; This function uses a non-reentrant model
  3527 ;;
  3528                           
  3529                           
  3530                           ;psect for function _nrf24l01InitRegisters
  3531  0370                     _nrf24l01InitRegisters:	
  3532                           
  3533                           ;nrf24l01.c: 345: n_CONFIG_t config;;nrf24l01.c: 347: config.PWR_UP = 0;
  3534                           
  3535                           ;incstack = 0
  3536                           ; Regs used in _nrf24l01InitRegisters: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3537  0370  0020               	movlb	0	; select bank0
  3538  0371  10B0               	bcf	nrf24l01InitRegisters@config,1
  3539                           
  3540                           ;nrf24l01.c: 348: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x00, config.byte);
  3541  0372  0830               	movf	nrf24l01InitRegisters@config,w
  3542  0373  00A7               	movwf	??_nrf24l01InitRegisters
  3543  0374  0827               	movf	??_nrf24l01InitRegisters,w
  3544  0375  00A0               	movwf	nrf24l01Send@data
  3545  0376  3020               	movlw	32
  3546  0377  3188  20CA  3183   	fcall	_nrf24l01Send
  3547                           
  3548                           ;nrf24l01.c: 350: n_SETUP_AW_t setupAW;;nrf24l01.c: 351: setupAW.byte = 0x00;
  3549  037A  0020               	movlb	0	; select bank0
  3550  037B  01AA               	clrf	nrf24l01InitRegisters@setupAW
  3551                           
  3552                           ;nrf24l01.c: 352: setupAW.AW = 0b11;
  3553  037C  3003               	movlw	3
  3554  037D  04AA               	iorwf	nrf24l01InitRegisters@setupAW,f
  3555                           
  3556                           ;nrf24l01.c: 353: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x02, setupAW.byte);
  3557  037E  082A               	movf	nrf24l01InitRegisters@setupAW,w
  3558  037F  00A7               	movwf	??_nrf24l01InitRegisters
  3559  0380  0827               	movf	??_nrf24l01InitRegisters,w
  3560  0381  00A0               	movwf	nrf24l01Send@data
  3561  0382  3022               	movlw	34
  3562  0383  3188  20CA  3183   	fcall	_nrf24l01Send
  3563                           
  3564                           ;nrf24l01.c: 356: n_RF_CH_t channel;;nrf24l01.c: 357: channel.RF_CH = 2;
  3565  0386  0020               	movlb	0	; select bank0
  3566  0387  0829               	movf	nrf24l01InitRegisters@channel,w
  3567  0388  3980               	andlw	-128
  3568  0389  3802               	iorlw	2
  3569  038A  00A9               	movwf	nrf24l01InitRegisters@channel
  3570                           
  3571                           ;nrf24l01.c: 358: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x05, channel.byte);
  3572  038B  0829               	movf	nrf24l01InitRegisters@channel,w
  3573  038C  00A7               	movwf	??_nrf24l01InitRegisters
  3574  038D  0827               	movf	??_nrf24l01InitRegisters,w
  3575  038E  00A0               	movwf	nrf24l01Send@data
  3576  038F  3025               	movlw	37
  3577  0390  3188  20CA  3183   	fcall	_nrf24l01Send
  3578                           
  3579                           ;nrf24l01.c: 361: n_RF_SETUP_t rfSetup;;nrf24l01.c: 362: rfSetup.byte = 0x00;
  3580  0393  0020               	movlb	0	; select bank0
  3581  0394  01AC               	clrf	nrf24l01InitRegisters@rfSetup
  3582                           
  3583                           ;nrf24l01.c: 363: rfSetup.RF_DR_LOW = 0;
  3584  0395  12AC               	bcf	nrf24l01InitRegisters@rfSetup,5
  3585                           
  3586                           ;nrf24l01.c: 364: rfSetup.RF_DR_HIGH = 1;
  3587  0396  15AC               	bsf	nrf24l01InitRegisters@rfSetup,3
  3588                           
  3589                           ;nrf24l01.c: 365: rfSetup.RF_PWR = 3;
  3590  0397  3006               	movlw	6
  3591  0398  04AC               	iorwf	nrf24l01InitRegisters@rfSetup,f
  3592                           
  3593                           ;nrf24l01.c: 366: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x06, rfSetup.byte);
  3594  0399  082C               	movf	nrf24l01InitRegisters@rfSetup,w
  3595  039A  00A7               	movwf	??_nrf24l01InitRegisters
  3596  039B  0827               	movf	??_nrf24l01InitRegisters,w
  3597  039C  00A0               	movwf	nrf24l01Send@data
  3598  039D  3026               	movlw	38
  3599  039E  3188  20CA  3183   	fcall	_nrf24l01Send
  3600                           
  3601                           ;nrf24l01.c: 369: nrf24l01SetRXPipe(0xFF);
  3602  03A1  30FF               	movlw	255
  3603  03A2  3188  20EA  3183   	fcall	_nrf24l01SetRXPipe
  3604                           
  3605                           ;nrf24l01.c: 372: n_EN_AA_t enAA;;nrf24l01.c: 373: enAA.byte = nrf24l01Send((unsigned) 0
      +                          b00000000 | (unsigned) 0x01, 0);
  3606  03A5  0020               	movlb	0	; select bank0
  3607  03A6  01A0               	clrf	nrf24l01Send@data
  3608  03A7  3001               	movlw	1
  3609  03A8  3188  20CA  3183   	fcall	_nrf24l01Send
  3610  03AB  0020               	movlb	0	; select bank0
  3611  03AC  00A7               	movwf	??_nrf24l01InitRegisters
  3612  03AD  0827               	movf	??_nrf24l01InitRegisters,w
  3613  03AE  00AE               	movwf	nrf24l01InitRegisters@enAA
  3614                           
  3615                           ;nrf24l01.c: 374: enAA.ENAA_P0 = 0;
  3616  03AF  102E               	bcf	nrf24l01InitRegisters@enAA,0
  3617                           
  3618                           ;nrf24l01.c: 375: enAA.ENAA_P1 = 0;
  3619  03B0  10AE               	bcf	nrf24l01InitRegisters@enAA,1
  3620                           
  3621                           ;nrf24l01.c: 376: enAA.ENAA_P2 = 0;
  3622  03B1  112E               	bcf	nrf24l01InitRegisters@enAA,2
  3623                           
  3624                           ;nrf24l01.c: 377: enAA.ENAA_P3 = 0;
  3625  03B2  11AE               	bcf	nrf24l01InitRegisters@enAA,3
  3626                           
  3627                           ;nrf24l01.c: 378: enAA.ENAA_P4 = 0;
  3628  03B3  122E               	bcf	nrf24l01InitRegisters@enAA,4
  3629                           
  3630                           ;nrf24l01.c: 379: enAA.ENAA_P5 = 0;
  3631  03B4  12AE               	bcf	nrf24l01InitRegisters@enAA,5
  3632                           
  3633                           ;nrf24l01.c: 380: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x01, enAA.byte);
  3634  03B5  082E               	movf	nrf24l01InitRegisters@enAA,w
  3635  03B6  00A7               	movwf	??_nrf24l01InitRegisters
  3636  03B7  0827               	movf	??_nrf24l01InitRegisters,w
  3637  03B8  00A0               	movwf	nrf24l01Send@data
  3638  03B9  3021               	movlw	33
  3639  03BA  3188  20CA  3183   	fcall	_nrf24l01Send
  3640                           
  3641                           ;nrf24l01.c: 384: n_FEATURE_t feature;;nrf24l01.c: 385: feature.byte = nrf24l01Send((uns
      +                          igned) 0b00000000 | (unsigned) 0x1D, 0);
  3642  03BD  0020               	movlb	0	; select bank0
  3643  03BE  01A0               	clrf	nrf24l01Send@data
  3644  03BF  301D               	movlw	29
  3645  03C0  3188  20CA  3183   	fcall	_nrf24l01Send
  3646  03C3  0020               	movlb	0	; select bank0
  3647  03C4  00A7               	movwf	??_nrf24l01InitRegisters
  3648  03C5  0827               	movf	??_nrf24l01InitRegisters,w
  3649  03C6  00AB               	movwf	nrf24l01InitRegisters@feature
  3650                           
  3651                           ;nrf24l01.c: 386: feature.EN_DPL = 1;
  3652  03C7  152B               	bsf	nrf24l01InitRegisters@feature,2
  3653                           
  3654                           ;nrf24l01.c: 387: feature.EN_DYN_ACK = 1;
  3655  03C8  142B               	bsf	nrf24l01InitRegisters@feature,0
  3656                           
  3657                           ;nrf24l01.c: 388: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x1D, feature.byte);
  3658  03C9  082B               	movf	nrf24l01InitRegisters@feature,w
  3659  03CA  00A7               	movwf	??_nrf24l01InitRegisters
  3660  03CB  0827               	movf	??_nrf24l01InitRegisters,w
  3661  03CC  00A0               	movwf	nrf24l01Send@data
  3662  03CD  303D               	movlw	61
  3663  03CE  3188  20CA  3183   	fcall	_nrf24l01Send
  3664                           
  3665                           ;nrf24l01.c: 390: n_DYNPD_t DynPD;;nrf24l01.c: 391: DynPD.byte = nrf24l01Send((unsigned)
      +                           0b00000000 | (unsigned) 0x1C, 0);
  3666  03D1  0020               	movlb	0	; select bank0
  3667  03D2  01A0               	clrf	nrf24l01Send@data
  3668  03D3  301C               	movlw	28
  3669  03D4  3188  20CA  3183   	fcall	_nrf24l01Send
  3670  03D7  0020               	movlb	0	; select bank0
  3671  03D8  00A7               	movwf	??_nrf24l01InitRegisters
  3672  03D9  0827               	movf	??_nrf24l01InitRegisters,w
  3673  03DA  00AF               	movwf	nrf24l01InitRegisters@DynPD
  3674                           
  3675                           ;nrf24l01.c: 392: DynPD.DPL_P0 = 1;
  3676  03DB  142F               	bsf	nrf24l01InitRegisters@DynPD,0
  3677                           
  3678                           ;nrf24l01.c: 393: DynPD.DPL_P1 = 1;
  3679  03DC  14AF               	bsf	nrf24l01InitRegisters@DynPD,1
  3680                           
  3681                           ;nrf24l01.c: 394: DynPD.DPL_P2 = 1;
  3682  03DD  152F               	bsf	nrf24l01InitRegisters@DynPD,2
  3683                           
  3684                           ;nrf24l01.c: 395: DynPD.DPL_P3 = 1;
  3685  03DE  15AF               	bsf	nrf24l01InitRegisters@DynPD,3
  3686                           
  3687                           ;nrf24l01.c: 396: DynPD.DPL_P4 = 1;
  3688  03DF  162F               	bsf	nrf24l01InitRegisters@DynPD,4
  3689                           
  3690                           ;nrf24l01.c: 397: DynPD.DPL_P5 = 1;
  3691  03E0  16AF               	bsf	nrf24l01InitRegisters@DynPD,5
  3692                           
  3693                           ;nrf24l01.c: 398: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x1C, DynPD.byte);
  3694  03E1  082F               	movf	nrf24l01InitRegisters@DynPD,w
  3695  03E2  00A7               	movwf	??_nrf24l01InitRegisters
  3696  03E3  0827               	movf	??_nrf24l01InitRegisters,w
  3697  03E4  00A0               	movwf	nrf24l01Send@data
  3698  03E5  303C               	movlw	60
  3699  03E6  3188  20CA  3183   	fcall	_nrf24l01Send
  3700                           
  3701                           ;nrf24l01.c: 401: unsigned int i;;nrf24l01.c: 402: for (i = 0; i < 6; i++){
  3702  03E9  0020               	movlb	0	; select bank0
  3703  03EA  01B1               	clrf	nrf24l01InitRegisters@i
  3704  03EB  01B2               	clrf	nrf24l01InitRegisters@i+1
  3705  03EC  3000               	movlw	0
  3706  03ED  0232               	subwf	nrf24l01InitRegisters@i+1,w
  3707  03EE  3006               	movlw	6
  3708  03EF  1903               	skipnz
  3709  03F0  0231               	subwf	nrf24l01InitRegisters@i,w
  3710  03F1  1803               	btfsc	3,0
  3711  03F2  2C4C               	goto	l3169
  3712  03F3                     l3155:	
  3713                           
  3714                           ;nrf24l01.c: 404: nrf24l01SPIStart();
  3715  03F3  3197  274C  3183   	fcall	_nrf24l01SPIStart
  3716                           
  3717                           ;nrf24l01.c: 405: nrf24l01SPISend((unsigned) 0b00100000 | ((unsigned) 0x0A + i));
  3718  03F6  0020               	movlb	0	; select bank0
  3719  03F7  0831               	movf	nrf24l01InitRegisters@i,w
  3720  03F8  3E0A               	addlw	10
  3721  03F9  3820               	iorlw	32
  3722  03FA  3197  275D  3183   	fcall	_nrf24l01SPISend
  3723                           
  3724                           ;nrf24l01.c: 407: nrf24l01SPISend(n_ADDRESS_P0[4] + (n_ADDRESS_MUL * i));
  3725  03FD  301D               	movlw	low ((_n_ADDRESS_P0+4)| (0+32768))
  3726  03FE  0084               	movwf	4
  3727  03FF  3098               	movlw	high ((_n_ADDRESS_P0+4)| (0+32768))
  3728  0400  0085               	movwf	5
  3729  0401  0800               	movf	0,w	;code access
  3730  0402  0020               	movlb	0	; select bank0
  3731  0403  00A7               	movwf	??_nrf24l01InitRegisters
  3732  0404  0831               	movf	nrf24l01InitRegisters@i,w
  3733  0405  00A8               	movwf	??_nrf24l01InitRegisters+1
  3734  0406  0828               	movf	??_nrf24l01InitRegisters+1,w
  3735  0407  00A0               	movwf	___bmul@multiplicand
  3736  0408  3000               	movlw	low (_n_ADDRESS_MUL| (0+32768))
  3737  0409  0084               	movwf	4
  3738  040A  3098               	movlw	high (_n_ADDRESS_MUL| (0+32768))
  3739  040B  0085               	movwf	5
  3740  040C  0800               	movf	0,w	;code access
  3741  040D  3197  2779  3183   	fcall	___bmul
  3742  0410  0020               	movlb	0	; select bank0
  3743  0411  0727               	addwf	??_nrf24l01InitRegisters,w
  3744  0412  3197  275D  3183   	fcall	_nrf24l01SPISend
  3745                           
  3746                           ;nrf24l01.c: 409: if (i < 2){
  3747  0415  3000               	movlw	0
  3748  0416  0020               	movlb	0	; select bank0
  3749  0417  0232               	subwf	nrf24l01InitRegisters@i+1,w
  3750  0418  3002               	movlw	2
  3751  0419  1903               	skipnz
  3752  041A  0231               	subwf	nrf24l01InitRegisters@i,w
  3753  041B  1803               	skipnc
  3754  041C  2C3D               	goto	l3163
  3755                           
  3756                           ;nrf24l01.c: 410: nrf24l01SPISend(n_ADDRESS_P0[3]);
  3757  041D  301C               	movlw	low ((_n_ADDRESS_P0+3)| (0+32768))
  3758  041E  0084               	movwf	4
  3759  041F  3098               	movlw	high ((_n_ADDRESS_P0+3)| (0+32768))
  3760  0420  0085               	movwf	5
  3761  0421  0800               	movf	0,w	;code access
  3762  0422  3197  275D  3183   	fcall	_nrf24l01SPISend
  3763                           
  3764                           ;nrf24l01.c: 411: nrf24l01SPISend(n_ADDRESS_P0[2]);
  3765  0425  301B               	movlw	low ((_n_ADDRESS_P0+2)| (0+32768))
  3766  0426  0084               	movwf	4
  3767  0427  3098               	movlw	high ((_n_ADDRESS_P0+2)| (0+32768))
  3768  0428  0085               	movwf	5
  3769  0429  0800               	movf	0,w	;code access
  3770  042A  3197  275D  3183   	fcall	_nrf24l01SPISend
  3771                           
  3772                           ;nrf24l01.c: 412: nrf24l01SPISend(n_ADDRESS_P0[1]);
  3773  042D  301A               	movlw	low ((_n_ADDRESS_P0+1)| (0+32768))
  3774  042E  0084               	movwf	4
  3775  042F  3098               	movlw	high ((_n_ADDRESS_P0+1)| (0+32768))
  3776  0430  0085               	movwf	5
  3777  0431  0800               	movf	0,w	;code access
  3778  0432  3197  275D  3183   	fcall	_nrf24l01SPISend
  3779                           
  3780                           ;nrf24l01.c: 413: nrf24l01SPISend(n_ADDRESS_P0[0]);
  3781  0435  3019               	movlw	low (_n_ADDRESS_P0| (0+32768))
  3782  0436  0084               	movwf	4
  3783  0437  3098               	movlw	high (_n_ADDRESS_P0| (0+32768))
  3784  0438  0085               	movwf	5
  3785  0439  0800               	movf	0,w	;code access
  3786  043A  3197  275D  3183   	fcall	_nrf24l01SPISend
  3787  043D                     l3163:	
  3788                           
  3789                           ;nrf24l01.c: 414: };nrf24l01.c: 416: nrf24l01SPIEnd();
  3790  043D  3197  273D  3183   	fcall	_nrf24l01SPIEnd
  3791  0440  3001               	movlw	1
  3792  0441  0020               	movlb	0	; select bank0
  3793  0442  07B1               	addwf	nrf24l01InitRegisters@i,f
  3794  0443  3000               	movlw	0
  3795  0444  3DB2               	addwfc	nrf24l01InitRegisters@i+1,f
  3796  0445  3000               	movlw	0
  3797  0446  0232               	subwf	nrf24l01InitRegisters@i+1,w
  3798  0447  3006               	movlw	6
  3799  0448  1903               	skipnz
  3800  0449  0231               	subwf	nrf24l01InitRegisters@i,w
  3801  044A  1C03               	skipc
  3802  044B  2BF3               	goto	l3155
  3803  044C                     l3169:	
  3804                           
  3805                           ;nrf24l01.c: 417: };nrf24l01.c: 419: nrf24l01SetTXPipe(0);
  3806  044C  3000               	movlw	0
  3807  044D  318B  2375  3183   	fcall	_nrf24l01SetTXPipe
  3808                           
  3809                           ;nrf24l01.c: 423: n_STATUS_t status;;nrf24l01.c: 424: status.byte = 0x00;
  3810  0450  0020               	movlb	0	; select bank0
  3811  0451  01AD               	clrf	nrf24l01InitRegisters@status
  3812                           
  3813                           ;nrf24l01.c: 425: status.RX_DR = 1;
  3814  0452  172D               	bsf	nrf24l01InitRegisters@status,6
  3815                           
  3816                           ;nrf24l01.c: 426: status.TX_DS = 1;
  3817  0453  16AD               	bsf	nrf24l01InitRegisters@status,5
  3818                           
  3819                           ;nrf24l01.c: 427: status.MAX_RT = 1;
  3820  0454  162D               	bsf	nrf24l01InitRegisters@status,4
  3821                           
  3822                           ;nrf24l01.c: 428: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x07, status.byte);
  3823  0455  082D               	movf	nrf24l01InitRegisters@status,w
  3824  0456  00A7               	movwf	??_nrf24l01InitRegisters
  3825  0457  0827               	movf	??_nrf24l01InitRegisters,w
  3826  0458  00A0               	movwf	nrf24l01Send@data
  3827  0459  3027               	movlw	39
  3828  045A  3188  20CA  3183   	fcall	_nrf24l01Send
  3829                           
  3830                           ;nrf24l01.c: 431: nrf24l01Send((unsigned) 0b11100001, 0);
  3831  045D  0020               	movlb	0	; select bank0
  3832  045E  01A0               	clrf	nrf24l01Send@data
  3833  045F  30E1               	movlw	225
  3834  0460  3188  20CA  3183   	fcall	_nrf24l01Send
  3835                           
  3836                           ;nrf24l01.c: 432: nrf24l01Send((unsigned) 0b11100010, 0);
  3837  0463  0020               	movlb	0	; select bank0
  3838  0464  01A0               	clrf	nrf24l01Send@data
  3839  0465  30E2               	movlw	226
  3840  0466  3188  20CA  3183   	fcall	_nrf24l01Send
  3841                           
  3842                           ;nrf24l01.c: 435: config.PRIM_RX = 1;
  3843  0469  0020               	movlb	0	; select bank0
  3844  046A  1430               	bsf	nrf24l01InitRegisters@config,0
  3845                           
  3846                           ;nrf24l01.c: 436: config.EN_CRC = 1;
  3847  046B  15B0               	bsf	nrf24l01InitRegisters@config,3
  3848                           
  3849                           ;nrf24l01.c: 437: config.CRCO = 1;
  3850  046C  1530               	bsf	nrf24l01InitRegisters@config,2
  3851                           
  3852                           ;nrf24l01.c: 438: config.PWR_UP = 1;
  3853  046D  14B0               	bsf	nrf24l01InitRegisters@config,1
  3854                           
  3855                           ;nrf24l01.c: 439: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x00, config.byte);
  3856  046E  0830               	movf	nrf24l01InitRegisters@config,w
  3857  046F  00A7               	movwf	??_nrf24l01InitRegisters
  3858  0470  0827               	movf	??_nrf24l01InitRegisters,w
  3859  0471  00A0               	movwf	nrf24l01Send@data
  3860  0472  3020               	movlw	32
  3861  0473  3188  20CA         	fcall	_nrf24l01Send
  3862  0475  0008               	return
  3863  0476                     __end_of_nrf24l01InitRegisters:	
  3864                           
  3865                           	psect	text5
  3866  0B75                     __ptext5:	
  3867 ;; *************** function _nrf24l01SetTXPipe *****************
  3868 ;; Defined at:
  3869 ;;		line 309 in file "nrf24l01.c"
  3870 ;; Parameters:    Size  Location     Type
  3871 ;;  pipe            1    wreg     unsigned char 
  3872 ;; Auto vars:     Size  Location     Type
  3873 ;;  pipe            1    6[BANK0 ] unsigned char 
  3874 ;; Return value:  Size  Location     Type
  3875 ;;                  1    wreg      void 
  3876 ;; Registers used:
  3877 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3878 ;; Tracked objects:
  3879 ;;		On entry : 0/0
  3880 ;;		On exit  : 0/0
  3881 ;;		Unchanged: 0/0
  3882 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3883 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3884 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3885 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3886 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3887 ;;Total ram usage:        3 bytes
  3888 ;; Hardware stack levels used:    1
  3889 ;; Hardware stack levels required when called:    9
  3890 ;; This function calls:
  3891 ;;		___bmul
  3892 ;;		_nrf24l01SPIEnd
  3893 ;;		_nrf24l01SPISend
  3894 ;;		_nrf24l01SPIStart
  3895 ;; This function is called by:
  3896 ;;		_main
  3897 ;;		_nrf24l01InitRegisters
  3898 ;;		_nrf24l01SendACK
  3899 ;; This function uses a non-reentrant model
  3900 ;;
  3901                           
  3902                           
  3903                           ;psect for function _nrf24l01SetTXPipe
  3904  0B75                     _nrf24l01SetTXPipe:	
  3905                           
  3906                           ;incstack = 0
  3907                           ; Regs used in _nrf24l01SetTXPipe: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3908                           ;nrf24l01SetTXPipe@pipe stored from wreg
  3909  0B75  0020               	movlb	0	; select bank0
  3910  0B76  00A6               	movwf	nrf24l01SetTXPipe@pipe
  3911                           
  3912                           ;nrf24l01.c: 312: nrf24l01SPIStart();
  3913  0B77  3197  274C  318B   	fcall	_nrf24l01SPIStart
  3914                           
  3915                           ;nrf24l01.c: 313: nrf24l01SPISend((unsigned) 0b00100000 | (unsigned) 0x10);
  3916  0B7A  3030               	movlw	48
  3917  0B7B  3197  275D  318B   	fcall	_nrf24l01SPISend
  3918                           
  3919                           ;nrf24l01.c: 314: nrf24l01SPISend(n_ADDRESS_P0[4] + (unsigned) (pipe * n_ADDRESS_MUL));
  3920  0B7E  301D               	movlw	low ((_n_ADDRESS_P0+4)| (0+32768))
  3921  0B7F  0084               	movwf	4
  3922  0B80  3098               	movlw	high ((_n_ADDRESS_P0+4)| (0+32768))
  3923  0B81  0085               	movwf	5
  3924  0B82  0800               	movf	0,w	;code access
  3925  0B83  0020               	movlb	0	; select bank0
  3926  0B84  00A4               	movwf	??_nrf24l01SetTXPipe
  3927  0B85  3000               	movlw	low (_n_ADDRESS_MUL| (0+32768))
  3928  0B86  0084               	movwf	4
  3929  0B87  3098               	movlw	high (_n_ADDRESS_MUL| (0+32768))
  3930  0B88  0085               	movwf	5
  3931  0B89  0800               	movf	0,w	;code access
  3932  0B8A  00A5               	movwf	??_nrf24l01SetTXPipe+1
  3933  0B8B  0825               	movf	??_nrf24l01SetTXPipe+1,w
  3934  0B8C  00A0               	movwf	___bmul@multiplicand
  3935  0B8D  0826               	movf	nrf24l01SetTXPipe@pipe,w
  3936  0B8E  3197  2779  318B   	fcall	___bmul
  3937  0B91  0020               	movlb	0	; select bank0
  3938  0B92  0724               	addwf	??_nrf24l01SetTXPipe,w
  3939  0B93  3197  275D  318B   	fcall	_nrf24l01SPISend
  3940                           
  3941                           ;nrf24l01.c: 315: nrf24l01SPISend(n_ADDRESS_P0[3]);
  3942  0B96  301C               	movlw	low ((_n_ADDRESS_P0+3)| (0+32768))
  3943  0B97  0084               	movwf	4
  3944  0B98  3098               	movlw	high ((_n_ADDRESS_P0+3)| (0+32768))
  3945  0B99  0085               	movwf	5
  3946  0B9A  0800               	movf	0,w	;code access
  3947  0B9B  3197  275D  318B   	fcall	_nrf24l01SPISend
  3948                           
  3949                           ;nrf24l01.c: 316: nrf24l01SPISend(n_ADDRESS_P0[2]);
  3950  0B9E  301B               	movlw	low ((_n_ADDRESS_P0+2)| (0+32768))
  3951  0B9F  0084               	movwf	4
  3952  0BA0  3098               	movlw	high ((_n_ADDRESS_P0+2)| (0+32768))
  3953  0BA1  0085               	movwf	5
  3954  0BA2  0800               	movf	0,w	;code access
  3955  0BA3  3197  275D  318B   	fcall	_nrf24l01SPISend
  3956                           
  3957                           ;nrf24l01.c: 317: nrf24l01SPISend(n_ADDRESS_P0[1]);
  3958  0BA6  301A               	movlw	low ((_n_ADDRESS_P0+1)| (0+32768))
  3959  0BA7  0084               	movwf	4
  3960  0BA8  3098               	movlw	high ((_n_ADDRESS_P0+1)| (0+32768))
  3961  0BA9  0085               	movwf	5
  3962  0BAA  0800               	movf	0,w	;code access
  3963  0BAB  3197  275D  318B   	fcall	_nrf24l01SPISend
  3964                           
  3965                           ;nrf24l01.c: 318: nrf24l01SPISend(n_ADDRESS_P0[0]);
  3966  0BAE  3019               	movlw	low (_n_ADDRESS_P0| (0+32768))
  3967  0BAF  0084               	movwf	4
  3968  0BB0  3098               	movlw	high (_n_ADDRESS_P0| (0+32768))
  3969  0BB1  0085               	movwf	5
  3970  0BB2  0800               	movf	0,w	;code access
  3971  0BB3  3197  275D  318B   	fcall	_nrf24l01SPISend
  3972                           
  3973                           ;nrf24l01.c: 319: nrf24l01SPIEnd();
  3974  0BB6  3197  273D         	fcall	_nrf24l01SPIEnd
  3975  0BB8  0008               	return
  3976  0BB9                     __end_of_nrf24l01SetTXPipe:	
  3977                           
  3978                           	psect	text6
  3979  1779                     __ptext6:	
  3980 ;; *************** function ___bmul *****************
  3981 ;; Defined at:
  3982 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\Umul8.c"
  3983 ;; Parameters:    Size  Location     Type
  3984 ;;  multiplier      1    wreg     unsigned char 
  3985 ;;  multiplicand    1    0[BANK0 ] unsigned char 
  3986 ;; Auto vars:     Size  Location     Type
  3987 ;;  multiplier      1    3[BANK0 ] unsigned char 
  3988 ;;  product         1    2[BANK0 ] unsigned char 
  3989 ;; Return value:  Size  Location     Type
  3990 ;;                  1    wreg      unsigned char 
  3991 ;; Registers used:
  3992 ;;		wreg, status,2, status,0
  3993 ;; Tracked objects:
  3994 ;;		On entry : 0/0
  3995 ;;		On exit  : 0/0
  3996 ;;		Unchanged: 0/0
  3997 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3998 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3999 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4000 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4001 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4002 ;;Total ram usage:        4 bytes
  4003 ;; Hardware stack levels used:    1
  4004 ;; Hardware stack levels required when called:    7
  4005 ;; This function calls:
  4006 ;;		Nothing
  4007 ;; This function is called by:
  4008 ;;		_nrf24l01SetTXPipe
  4009 ;;		_nrf24l01InitRegisters
  4010 ;; This function uses a non-reentrant model
  4011 ;;
  4012                           
  4013                           
  4014                           ;psect for function ___bmul
  4015  1779                     ___bmul:	
  4016                           
  4017                           ;incstack = 0
  4018                           ; Regs used in ___bmul: [wreg+status,2+status,0]
  4019                           ;___bmul@multiplier stored from wreg
  4020  1779  0020               	movlb	0	; select bank0
  4021  177A  00A3               	movwf	___bmul@multiplier
  4022  177B  01A2               	clrf	___bmul@product
  4023  177C                     l2535:	
  4024  177C  1C23               	btfss	___bmul@multiplier,0
  4025  177D  2F82               	goto	l2539
  4026  177E  0820               	movf	___bmul@multiplicand,w
  4027  177F  00A1               	movwf	??___bmul
  4028  1780  0821               	movf	??___bmul,w
  4029  1781  07A2               	addwf	___bmul@product,f
  4030  1782                     l2539:	
  4031  1782  1003               	clrc
  4032  1783  0DA0               	rlf	___bmul@multiplicand,f
  4033  1784  1003               	clrc
  4034  1785  0CA3               	rrf	___bmul@multiplier,f
  4035  1786  0823               	movf	___bmul@multiplier,w
  4036  1787  1D03               	btfss	3,2
  4037  1788  2F7C               	goto	l2535
  4038  1789  0822               	movf	___bmul@product,w
  4039  178A  0008               	return
  4040  178B                     __end_of___bmul:	
  4041                           
  4042                           	psect	text7
  4043  08EA                     __ptext7:	
  4044 ;; *************** function _nrf24l01SetRXPipe *****************
  4045 ;; Defined at:
  4046 ;;		line 322 in file "nrf24l01.c"
  4047 ;; Parameters:    Size  Location     Type
  4048 ;;  pipe            1    wreg     unsigned char 
  4049 ;; Auto vars:     Size  Location     Type
  4050 ;;  pipe            1    5[BANK0 ] unsigned char 
  4051 ;;  enRXAddr        1    6[BANK0 ] struct .
  4052 ;; Return value:  Size  Location     Type
  4053 ;;                  1    wreg      void 
  4054 ;; Registers used:
  4055 ;;		wreg, status,2, status,0, pclath, cstack
  4056 ;; Tracked objects:
  4057 ;;		On entry : 0/0
  4058 ;;		On exit  : 0/0
  4059 ;;		Unchanged: 0/0
  4060 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4061 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4062 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4063 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4064 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4065 ;;Total ram usage:        4 bytes
  4066 ;; Hardware stack levels used:    1
  4067 ;; Hardware stack levels required when called:   10
  4068 ;; This function calls:
  4069 ;;		_nrf24l01Send
  4070 ;; This function is called by:
  4071 ;;		_main
  4072 ;;		_nrf24l01InitRegisters
  4073 ;; This function uses a non-reentrant model
  4074 ;;
  4075                           
  4076                           
  4077                           ;psect for function _nrf24l01SetRXPipe
  4078  08EA                     _nrf24l01SetRXPipe:	
  4079                           
  4080                           ;incstack = 0
  4081                           ; Regs used in _nrf24l01SetRXPipe: [wreg+status,2+status,0+pclath+cstack]
  4082                           ;nrf24l01SetRXPipe@pipe stored from wreg
  4083  08EA  0020               	movlb	0	; select bank0
  4084  08EB  00A5               	movwf	nrf24l01SetRXPipe@pipe
  4085                           
  4086                           ;nrf24l01.c: 324: n_EN_RXADDR_t enRXAddr;;nrf24l01.c: 326: if (pipe > 5){
  4087  08EC  3006               	movlw	6
  4088  08ED  0225               	subwf	nrf24l01SetRXPipe@pipe,w
  4089  08EE  1C03               	skipc
  4090  08EF  28F7               	goto	l328
  4091                           
  4092                           ;nrf24l01.c: 327: enRXAddr.ERX_P0 = 1;
  4093  08F0  1426               	bsf	nrf24l01SetRXPipe@enRXAddr,0
  4094                           
  4095                           ;nrf24l01.c: 328: enRXAddr.ERX_P1 = 1;
  4096  08F1  14A6               	bsf	nrf24l01SetRXPipe@enRXAddr,1
  4097                           
  4098                           ;nrf24l01.c: 329: enRXAddr.ERX_P2 = 1;
  4099  08F2  1526               	bsf	nrf24l01SetRXPipe@enRXAddr,2
  4100                           
  4101                           ;nrf24l01.c: 330: enRXAddr.ERX_P3 = 1;
  4102  08F3  15A6               	bsf	nrf24l01SetRXPipe@enRXAddr,3
  4103                           
  4104                           ;nrf24l01.c: 331: enRXAddr.ERX_P4 = 1;
  4105  08F4  1626               	bsf	nrf24l01SetRXPipe@enRXAddr,4
  4106                           
  4107                           ;nrf24l01.c: 332: enRXAddr.ERX_P5 = 1;
  4108  08F5  16A6               	bsf	nrf24l01SetRXPipe@enRXAddr,5
  4109                           
  4110                           ;nrf24l01.c: 333: }
  4111  08F6  2903               	goto	l2823
  4112  08F7                     l328:	
  4113                           
  4114                           ;nrf24l01.c: 335: else{;nrf24l01.c: 336: enRXAddr.ERX_P0 = 1;
  4115  08F7  1426               	bsf	nrf24l01SetRXPipe@enRXAddr,0
  4116                           
  4117                           ;nrf24l01.c: 337: enRXAddr.byte = (unsigned) enRXAddr.byte << pipe;
  4118  08F8  0826               	movf	nrf24l01SetRXPipe@enRXAddr,w
  4119  08F9  00A3               	movwf	??_nrf24l01SetRXPipe
  4120  08FA  0A25               	incf	nrf24l01SetRXPipe@pipe,w
  4121  08FB  28FD               	goto	u2874
  4122  08FC                     u2875:	
  4123  08FC  35A3               	lslf	??_nrf24l01SetRXPipe,f
  4124  08FD                     u2874:	
  4125  08FD  0B89               	decfsz	9,f
  4126  08FE  28FC               	goto	u2875
  4127  08FF  0823               	movf	??_nrf24l01SetRXPipe,w
  4128  0900  00A4               	movwf	??_nrf24l01SetRXPipe+1
  4129  0901  0824               	movf	??_nrf24l01SetRXPipe+1,w
  4130  0902  00A6               	movwf	nrf24l01SetRXPipe@enRXAddr
  4131  0903                     l2823:	
  4132                           
  4133                           ;nrf24l01.c: 338: };nrf24l01.c: 340: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x0
      +                          2, enRXAddr.byte);
  4134  0903  0826               	movf	nrf24l01SetRXPipe@enRXAddr,w
  4135  0904  00A3               	movwf	??_nrf24l01SetRXPipe
  4136  0905  0823               	movf	??_nrf24l01SetRXPipe,w
  4137  0906  00A0               	movwf	nrf24l01Send@data
  4138  0907  3022               	movlw	34
  4139  0908  3188  20CA         	fcall	_nrf24l01Send
  4140  090A  0008               	return
  4141  090B                     __end_of_nrf24l01SetRXPipe:	
  4142                           
  4143                           	psect	text8
  4144  09FC                     __ptext8:	
  4145 ;; *************** function _nrf24l01GetPipe *****************
  4146 ;; Defined at:
  4147 ;;		line 183 in file "main.c"
  4148 ;; Parameters:    Size  Location     Type
  4149 ;;  name            1    wreg     PTR unsigned char 
  4150 ;;		 -> romDataMap(28), 
  4151 ;; Auto vars:     Size  Location     Type
  4152 ;;  name            1    9[BANK0 ] PTR unsigned char 
  4153 ;;		 -> romDataMap(28), 
  4154 ;;  i               1   10[BANK0 ] unsigned char 
  4155 ;;  pipe            1    8[BANK0 ] unsigned char 
  4156 ;; Return value:  Size  Location     Type
  4157 ;;                  1    wreg      unsigned char 
  4158 ;; Registers used:
  4159 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4160 ;; Tracked objects:
  4161 ;;		On entry : 0/0
  4162 ;;		On exit  : 0/0
  4163 ;;		Unchanged: 0/0
  4164 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4165 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4166 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4167 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4168 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4169 ;;Total ram usage:        5 bytes
  4170 ;; Hardware stack levels used:    1
  4171 ;; Hardware stack levels required when called:    8
  4172 ;; This function calls:
  4173 ;;		___lwmod
  4174 ;;		_strlen
  4175 ;; This function is called by:
  4176 ;;		_main
  4177 ;; This function uses a non-reentrant model
  4178 ;;
  4179                           
  4180                           
  4181                           ;psect for function _nrf24l01GetPipe
  4182  09FC                     _nrf24l01GetPipe:	
  4183                           
  4184                           ;incstack = 0
  4185                           ; Regs used in _nrf24l01GetPipe: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4186                           ;nrf24l01GetPipe@name stored from wreg
  4187  09FC  0020               	movlb	0	; select bank0
  4188  09FD  00A9               	movwf	nrf24l01GetPipe@name
  4189                           
  4190                           ;main.c: 184: unsigned char pipe = 0;
  4191  09FE  01A8               	clrf	nrf24l01GetPipe@pipe
  4192                           
  4193                           ;main.c: 185: unsigned char i = 0;
  4194  09FF  01AA               	clrf	nrf24l01GetPipe@i
  4195                           
  4196                           ;main.c: 188: for (i = 0; i < strlen(name); i++){
  4197  0A00  01AA               	clrf	nrf24l01GetPipe@i
  4198  0A01                     l3325:	
  4199  0A01  0829               	movf	nrf24l01GetPipe@name,w
  4200  0A02  00A0               	movwf	strlen@s
  4201  0A03  3001               	movlw	1
  4202  0A04  00A1               	movwf	strlen@s+1
  4203  0A05  3188  20AB  3189   	fcall	_strlen
  4204  0A08  0020               	movlb	0	; select bank0
  4205  0A09  082A               	movf	nrf24l01GetPipe@i,w
  4206  0A0A  00A6               	movwf	??_nrf24l01GetPipe
  4207  0A0B  01A7               	clrf	??_nrf24l01GetPipe+1
  4208  0A0C  0821               	movf	?_strlen+1,w
  4209  0A0D  0227               	subwf	??_nrf24l01GetPipe+1,w
  4210  0A0E  1D03               	skipz
  4211  0A0F  2A12               	goto	u3345
  4212  0A10  0820               	movf	?_strlen,w
  4213  0A11  0226               	subwf	??_nrf24l01GetPipe,w
  4214  0A12                     u3345:	
  4215  0A12  1803               	btfsc	3,0
  4216  0A13  2A24               	goto	l3327
  4217                           
  4218                           ;main.c: 189: pipe+= name[i];
  4219  0A14  082A               	movf	nrf24l01GetPipe@i,w
  4220  0A15  0729               	addwf	nrf24l01GetPipe@name,w
  4221  0A16  00A6               	movwf	??_nrf24l01GetPipe
  4222  0A17  0826               	movf	??_nrf24l01GetPipe,w
  4223  0A18  0086               	movwf	6
  4224  0A19  3001               	movlw	1	; select bank2/3
  4225  0A1A  0087               	movwf	7
  4226  0A1B  0801               	movf	1,w
  4227  0A1C  00A7               	movwf	??_nrf24l01GetPipe+1
  4228  0A1D  0827               	movf	??_nrf24l01GetPipe+1,w
  4229  0A1E  07A8               	addwf	nrf24l01GetPipe@pipe,f
  4230  0A1F  3001               	movlw	1
  4231  0A20  00A6               	movwf	??_nrf24l01GetPipe
  4232  0A21  0826               	movf	??_nrf24l01GetPipe,w
  4233  0A22  07AA               	addwf	nrf24l01GetPipe@i,f
  4234  0A23  2A01               	goto	l3325
  4235  0A24                     l3327:	
  4236                           
  4237                           ;main.c: 190: };main.c: 192: return (unsigned) pipe % 6;
  4238  0A24  3006               	movlw	6
  4239  0A25  00A0               	movwf	___lwmod@divisor
  4240  0A26  3000               	movlw	0
  4241  0A27  00A1               	movwf	___lwmod@divisor+1
  4242  0A28  0828               	movf	nrf24l01GetPipe@pipe,w
  4243  0A29  00A6               	movwf	??_nrf24l01GetPipe
  4244  0A2A  01A7               	clrf	??_nrf24l01GetPipe+1
  4245  0A2B  0826               	movf	??_nrf24l01GetPipe,w
  4246  0A2C  00A2               	movwf	___lwmod@dividend
  4247  0A2D  0827               	movf	??_nrf24l01GetPipe+1,w
  4248  0A2E  00A3               	movwf	___lwmod@dividend+1
  4249  0A2F  3189  21CF         	fcall	___lwmod
  4250  0A31  0020               	movlb	0	; select bank0
  4251  0A32  0820               	movf	?___lwmod,w
  4252  0A33  0008               	return
  4253  0A34                     __end_of_nrf24l01GetPipe:	
  4254                           
  4255                           	psect	text9
  4256  09CF                     __ptext9:	
  4257 ;; *************** function ___lwmod *****************
  4258 ;; Defined at:
  4259 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\lwmod.c"
  4260 ;; Parameters:    Size  Location     Type
  4261 ;;  divisor         2    0[BANK0 ] unsigned int 
  4262 ;;  dividend        2    2[BANK0 ] unsigned int 
  4263 ;; Auto vars:     Size  Location     Type
  4264 ;;  counter         1    5[BANK0 ] unsigned char 
  4265 ;; Return value:  Size  Location     Type
  4266 ;;                  2    0[BANK0 ] unsigned int 
  4267 ;; Registers used:
  4268 ;;		wreg, status,2, status,0
  4269 ;; Tracked objects:
  4270 ;;		On entry : 0/0
  4271 ;;		On exit  : 0/0
  4272 ;;		Unchanged: 0/0
  4273 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4274 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4275 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4276 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4277 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4278 ;;Total ram usage:        6 bytes
  4279 ;; Hardware stack levels used:    1
  4280 ;; Hardware stack levels required when called:    7
  4281 ;; This function calls:
  4282 ;;		Nothing
  4283 ;; This function is called by:
  4284 ;;		_nrf24l01GetPipe
  4285 ;; This function uses a non-reentrant model
  4286 ;;
  4287                           
  4288                           
  4289                           ;psect for function ___lwmod
  4290  09CF                     ___lwmod:	
  4291                           
  4292                           ;incstack = 0
  4293                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  4294  09CF  0020               	movlb	0	; select bank0
  4295  09D0  0820               	movf	___lwmod@divisor,w
  4296  09D1  0421               	iorwf	___lwmod@divisor+1,w
  4297  09D2  1903               	btfsc	3,2
  4298  09D3  29F7               	goto	l3217
  4299  09D4  01A5               	clrf	___lwmod@counter
  4300  09D5  0AA5               	incf	___lwmod@counter,f
  4301  09D6                     l3207:	
  4302  09D6  1BA1               	btfsc	___lwmod@divisor+1,7
  4303  09D7  29E2               	goto	l3209
  4304  09D8  3001               	movlw	1
  4305  09D9                     u3225:	
  4306  09D9  35A0               	lslf	___lwmod@divisor,f
  4307  09DA  0DA1               	rlf	___lwmod@divisor+1,f
  4308  09DB  0B89               	decfsz	9,f
  4309  09DC  29D9               	goto	u3225
  4310  09DD  3001               	movlw	1
  4311  09DE  00A4               	movwf	??___lwmod
  4312  09DF  0824               	movf	??___lwmod,w
  4313  09E0  07A5               	addwf	___lwmod@counter,f
  4314  09E1  29D6               	goto	l3207
  4315  09E2                     l3209:	
  4316  09E2  0821               	movf	___lwmod@divisor+1,w
  4317  09E3  0223               	subwf	___lwmod@dividend+1,w
  4318  09E4  1D03               	skipz
  4319  09E5  29E8               	goto	u3245
  4320  09E6  0820               	movf	___lwmod@divisor,w
  4321  09E7  0222               	subwf	___lwmod@dividend,w
  4322  09E8                     u3245:	
  4323  09E8  1C03               	skipc
  4324  09E9  29EE               	goto	l3213
  4325  09EA  0820               	movf	___lwmod@divisor,w
  4326  09EB  02A2               	subwf	___lwmod@dividend,f
  4327  09EC  0821               	movf	___lwmod@divisor+1,w
  4328  09ED  3BA3               	subwfb	___lwmod@dividend+1,f
  4329  09EE                     l3213:	
  4330  09EE  3001               	movlw	1
  4331  09EF                     u3255:	
  4332  09EF  36A1               	lsrf	___lwmod@divisor+1,f
  4333  09F0  0CA0               	rrf	___lwmod@divisor,f
  4334  09F1  0B89               	decfsz	9,f
  4335  09F2  29EF               	goto	u3255
  4336  09F3  3001               	movlw	1
  4337  09F4  02A5               	subwf	___lwmod@counter,f
  4338  09F5  1D03               	btfss	3,2
  4339  09F6  29E2               	goto	l3209
  4340  09F7                     l3217:	
  4341  09F7  0823               	movf	___lwmod@dividend+1,w
  4342  09F8  00A1               	movwf	?___lwmod+1
  4343  09F9  0822               	movf	___lwmod@dividend,w
  4344  09FA  00A0               	movwf	?___lwmod
  4345  09FB  0008               	return
  4346  09FC                     __end_of___lwmod:	
  4347                           
  4348                           	psect	text10
  4349  01FF                     __ptext10:	
  4350 ;; *************** function _loop *****************
  4351 ;; Defined at:
  4352 ;;		line 116 in file "main.c"
  4353 ;; Parameters:    Size  Location     Type
  4354 ;;		None
  4355 ;; Auto vars:     Size  Location     Type
  4356 ;;  packet         33   15[BANK2 ] struct .
  4357 ;;  ta              3    3[BANK2 ] float 
  4358 ;;  vt              3    0[BANK2 ] float 
  4359 ;;  rfSetup         1   14[BANK2 ] struct .
  4360 ;; Return value:  Size  Location     Type
  4361 ;;                  1    wreg      void 
  4362 ;; Registers used:
  4363 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4364 ;; Tracked objects:
  4365 ;;		On entry : 0/0
  4366 ;;		On exit  : 0/0
  4367 ;;		Unchanged: 0/0
  4368 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4369 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4370 ;;      Locals:         0       0       0      48       0       0       0       0       0       0       0       0       
      +0       0
  4371 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  4372 ;;      Totals:         0       0       1      48       0       0       0       0       0       0       0       0       
      +0       0
  4373 ;;Total ram usage:       49 bytes
  4374 ;; Hardware stack levels used:    1
  4375 ;; Hardware stack levels required when called:   12
  4376 ;; This function calls:
  4377 ;;		___awtoft
  4378 ;;		___ftadd
  4379 ;;		___ftdiv
  4380 ;;		___ftmul
  4381 ;;		___ftneg
  4382 ;;		___lbtoft
  4383 ;;		_checkTXPower
  4384 ;;		_getADCValue
  4385 ;;		_nrf24l01Send
  4386 ;;		_nrf24l01SendPacket
  4387 ;;		_setMessage
  4388 ;;		_sleep
  4389 ;; This function is called by:
  4390 ;;		_main
  4391 ;; This function uses a non-reentrant model
  4392 ;;
  4393                           
  4394                           
  4395                           ;psect for function _loop
  4396  01FF                     _loop:	
  4397                           
  4398                           ;main.c: 118: nrf24l01Packet_t packet;;main.c: 129: FVRCONbits.TSEN = 1;
  4399                           
  4400                           ;incstack = 0
  4401                           ; Regs used in _loop: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4402  01FF  0022               	movlb	2	; select bank2
  4403  0200  1697               	bsf	23,5	;volatile
  4404                           
  4405                           ;main.c: 130: float vt = (2.048 - getADCValue(0b111101)) / (FVRCONbits.TSRNG ? 2 : 4);
  4406  0201  1A17               	btfsc	23,4	;volatile
  4407  0202  2A05               	goto	l3257
  4408  0203  3004               	movlw	4
  4409  0204  2A06               	goto	L1
  4410  0205                     l3257:	
  4411  0205  3002               	movlw	2
  4412  0206                     L1:	
  4413  0206  00AC               	movwf	_loop$865^(0+256)
  4414  0207  3000               	movlw	0
  4415  0208  00AD               	movwf	(_loop$865^(0+256)+1)
  4416  0209  303D               	movlw	61
  4417  020A  318E  26B2  3181   	fcall	_getADCValue
  4418  020D  0020               	movlb	0	; select bank0
  4419  020E  084B               	movf	?_getADCValue,w
  4420  020F  00D7               	movwf	___ftneg@f1
  4421  0210  084C               	movf	?_getADCValue+1,w
  4422  0211  00D8               	movwf	___ftneg@f1+1
  4423  0212  084D               	movf	?_getADCValue+2,w
  4424  0213  00D9               	movwf	___ftneg@f1+2
  4425  0214  3197  2754  3181   	fcall	___ftneg
  4426  0217  0020               	movlb	0	; select bank0
  4427  0218  0857               	movf	?___ftneg,w
  4428  0219  0022               	movlb	2	; select bank2
  4429  021A  00A6               	movwf	_loop$2050^(0+256)
  4430  021B  0020               	movlb	0	; select bank0
  4431  021C  0858               	movf	?___ftneg+1,w
  4432  021D  0022               	movlb	2	; select bank2
  4433  021E  00A7               	movwf	(_loop$2050+1)^(0+256)
  4434  021F  0020               	movlb	0	; select bank0
  4435  0220  0859               	movf	?___ftneg+2,w
  4436  0221  0022               	movlb	2	; select bank2
  4437  0222  00A8               	movwf	(_loop$2050+2)^(0+256)
  4438  0223  082D               	movf	(_loop$865+1)^(0+256),w
  4439  0224  0020               	movlb	0	; select bank0
  4440  0225  00A9               	movwf	___awtoft@c+1
  4441  0226  0022               	movlb	2	; select bank2
  4442  0227  082C               	movf	_loop$865^(0+256),w
  4443  0228  0020               	movlb	0	; select bank0
  4444  0229  00A8               	movwf	___awtoft@c
  4445  022A  3189  210B  3181   	fcall	___awtoft
  4446  022D  0020               	movlb	0	; select bank0
  4447  022E  0828               	movf	?___awtoft,w
  4448  022F  00BB               	movwf	___ftdiv@f2
  4449  0230  0829               	movf	?___awtoft+1,w
  4450  0231  00BC               	movwf	___ftdiv@f2+1
  4451  0232  082A               	movf	?___awtoft+2,w
  4452  0233  00BD               	movwf	___ftdiv@f2+2
  4453  0234  3012               	movlw	18
  4454  0235  00AE               	movwf	___ftadd@f1
  4455  0236  3003               	movlw	3
  4456  0237  00AF               	movwf	___ftadd@f1+1
  4457  0238  3040               	movlw	64
  4458  0239  00B0               	movwf	___ftadd@f1+2
  4459  023A  0022               	movlb	2	; select bank2
  4460  023B  0826               	movf	_loop$2050^(0+256),w
  4461  023C  0020               	movlb	0	; select bank0
  4462  023D  00B1               	movwf	___ftadd@f2
  4463  023E  0022               	movlb	2	; select bank2
  4464  023F  0827               	movf	(_loop$2050+1)^(0+256),w
  4465  0240  0020               	movlb	0	; select bank0
  4466  0241  00B2               	movwf	___ftadd@f2+1
  4467  0242  0022               	movlb	2	; select bank2
  4468  0243  0828               	movf	(_loop$2050+2)^(0+256),w
  4469  0244  0020               	movlb	0	; select bank0
  4470  0245  00B3               	movwf	___ftadd@f2+2
  4471  0246  3184  2476  3181   	fcall	___ftadd
  4472  0249  0020               	movlb	0	; select bank0
  4473  024A  082E               	movf	?___ftadd,w
  4474  024B  00BE               	movwf	___ftdiv@f1
  4475  024C  082F               	movf	?___ftadd+1,w
  4476  024D  00BF               	movwf	___ftdiv@f1+1
  4477  024E  0830               	movf	?___ftadd+2,w
  4478  024F  00C0               	movwf	___ftdiv@f1+2
  4479  0250  318F  2757  3181   	fcall	___ftdiv
  4480  0253  0020               	movlb	0	; select bank0
  4481  0254  083B               	movf	?___ftdiv,w
  4482  0255  0022               	movlb	2	; select bank2
  4483  0256  00A0               	movwf	loop@vt^(0+256)
  4484  0257  0020               	movlb	0	; select bank0
  4485  0258  083C               	movf	?___ftdiv+1,w
  4486  0259  0022               	movlb	2	; select bank2
  4487  025A  00A1               	movwf	(loop@vt+1)^(0+256)
  4488  025B  0020               	movlb	0	; select bank0
  4489  025C  083D               	movf	?___ftdiv+2,w
  4490  025D  0022               	movlb	2	; select bank2
  4491  025E  00A2               	movwf	(loop@vt+2)^(0+256)
  4492                           
  4493                           ;main.c: 131: FVRCONbits.TSEN = 0;
  4494  025F  1297               	bcf	23,5	;volatile
  4495                           
  4496                           ;main.c: 139: float ta = (vt / -0.0014) - (0.6063 / -0.0014) - 40;
  4497  0260  3089               	movlw	137
  4498  0261  0020               	movlb	0	; select bank0
  4499  0262  00AE               	movwf	___ftadd@f1
  4500  0263  30C4               	movlw	196
  4501  0264  00AF               	movwf	___ftadd@f1+1
  4502  0265  3043               	movlw	67
  4503  0266  00B0               	movwf	___ftadd@f1+2
  4504  0267  3080               	movlw	128
  4505  0268  00BB               	movwf	___ftdiv@f2
  4506  0269  30B7               	movlw	183
  4507  026A  00BC               	movwf	___ftdiv@f2+1
  4508  026B  30BA               	movlw	186
  4509  026C  00BD               	movwf	___ftdiv@f2+2
  4510  026D  0022               	movlb	2	; select bank2
  4511  026E  0820               	movf	loop@vt^(0+256),w
  4512  026F  0020               	movlb	0	; select bank0
  4513  0270  00BE               	movwf	___ftdiv@f1
  4514  0271  0022               	movlb	2	; select bank2
  4515  0272  0821               	movf	(loop@vt+1)^(0+256),w
  4516  0273  0020               	movlb	0	; select bank0
  4517  0274  00BF               	movwf	___ftdiv@f1+1
  4518  0275  0022               	movlb	2	; select bank2
  4519  0276  0822               	movf	(loop@vt+2)^(0+256),w
  4520  0277  0020               	movlb	0	; select bank0
  4521  0278  00C0               	movwf	___ftdiv@f1+2
  4522  0279  318F  2757  3181   	fcall	___ftdiv
  4523  027C  0020               	movlb	0	; select bank0
  4524  027D  083B               	movf	?___ftdiv,w
  4525  027E  00B1               	movwf	___ftadd@f2
  4526  027F  083C               	movf	?___ftdiv+1,w
  4527  0280  00B2               	movwf	___ftadd@f2+1
  4528  0281  083D               	movf	?___ftdiv+2,w
  4529  0282  00B3               	movwf	___ftadd@f2+2
  4530  0283  3184  2476  3181   	fcall	___ftadd
  4531  0286  0020               	movlb	0	; select bank0
  4532  0287  082E               	movf	?___ftadd,w
  4533  0288  0022               	movlb	2	; select bank2
  4534  0289  00A3               	movwf	loop@ta^(0+256)
  4535  028A  0020               	movlb	0	; select bank0
  4536  028B  082F               	movf	?___ftadd+1,w
  4537  028C  0022               	movlb	2	; select bank2
  4538  028D  00A4               	movwf	(loop@ta+1)^(0+256)
  4539  028E  0020               	movlb	0	; select bank0
  4540  028F  0830               	movf	?___ftadd+2,w
  4541  0290  0022               	movlb	2	; select bank2
  4542  0291  00A5               	movwf	(loop@ta+2)^(0+256)
  4543                           
  4544                           ;main.c: 141: setMessage(&packet, "TEMP", ta);
  4545  0292  302F               	movlw	low loop@packet
  4546  0293  0021               	movlb	1	; select bank1
  4547  0294  00B9               	movwf	setMessage@packet^(0+128)
  4548  0295  3001               	movlw	high loop@packet
  4549  0296  00BA               	movwf	(setMessage@packet+1)^(0+128)
  4550  0297  301E               	movlw	low (STR_3| (0+32768))
  4551  0298  00BB               	movwf	setMessage@topic^(0+128)
  4552  0299  3098               	movlw	high (STR_3| (0+32768))
  4553  029A  00BC               	movwf	(setMessage@topic^(0+128)+1)
  4554  029B  0022               	movlb	2	; select bank2
  4555  029C  0823               	movf	loop@ta^(0+256),w
  4556  029D  0021               	movlb	1	; select bank1
  4557  029E  00BD               	movwf	setMessage@value^(0+128)
  4558  029F  0022               	movlb	2	; select bank2
  4559  02A0  0824               	movf	(loop@ta+1)^(0+256),w
  4560  02A1  0021               	movlb	1	; select bank1
  4561  02A2  00BE               	movwf	(setMessage@value+1)^(0+128)
  4562  02A3  0022               	movlb	2	; select bank2
  4563  02A4  0825               	movf	(loop@ta+2)^(0+256),w
  4564  02A5  0021               	movlb	1	; select bank1
  4565  02A6  00BF               	movwf	(setMessage@value+2)^(0+128)
  4566  02A7  318D  2507  3181   	fcall	_setMessage
  4567                           
  4568                           ;main.c: 142: packet.packetData.byte = 0;
  4569  02AA  0022               	movlb	2	; select bank2
  4570  02AB  01AF               	clrf	loop@packet^(0+256)
  4571                           
  4572                           ;main.c: 143: packet.packetData.ACKRequest = 1;
  4573  02AC  152F               	bsf	loop@packet^(0+256),2
  4574                           
  4575                           ;main.c: 144: nrf24l01SendPacket(&packet);
  4576  02AD  302F               	movlw	low loop@packet
  4577  02AE  0020               	movlb	0	; select bank0
  4578  02AF  00A7               	movwf	nrf24l01SendPacket@Packet
  4579  02B0  3001               	movlw	high loop@packet
  4580  02B1  00A8               	movwf	nrf24l01SendPacket@Packet+1
  4581  02B2  3186  265E  3181   	fcall	_nrf24l01SendPacket
  4582                           
  4583                           ;main.c: 145: checkTXPower();
  4584  02B5  3197  278B  3181   	fcall	_checkTXPower
  4585                           
  4586                           ;main.c: 146: sleep(10);
  4587  02B8  300A               	movlw	10
  4588  02B9  3188  201E  3181   	fcall	_sleep
  4589                           
  4590                           ;main.c: 153: setMessage(&packet, "VBAT", getADCValue(0b000100) * 3.106382978723404);
  4591  02BC  30CF               	movlw	207
  4592  02BD  0020               	movlb	0	; select bank0
  4593  02BE  00D7               	movwf	___ftmul@f1
  4594  02BF  3046               	movlw	70
  4595  02C0  00D8               	movwf	___ftmul@f1+1
  4596  02C1  3040               	movlw	64
  4597  02C2  00D9               	movwf	___ftmul@f1+2
  4598  02C3  3004               	movlw	4
  4599  02C4  318E  26B2  3181   	fcall	_getADCValue
  4600  02C7  0020               	movlb	0	; select bank0
  4601  02C8  084B               	movf	?_getADCValue,w
  4602  02C9  00DA               	movwf	___ftmul@f2
  4603  02CA  084C               	movf	?_getADCValue+1,w
  4604  02CB  00DB               	movwf	___ftmul@f2+1
  4605  02CC  084D               	movf	?_getADCValue+2,w
  4606  02CD  00DC               	movwf	___ftmul@f2+2
  4607  02CE  3187  2726  3181   	fcall	___ftmul
  4608  02D1  0020               	movlb	0	; select bank0
  4609  02D2  0857               	movf	?___ftmul,w
  4610  02D3  0022               	movlb	2	; select bank2
  4611  02D4  00A9               	movwf	_loop$2051^(0+256)
  4612  02D5  0020               	movlb	0	; select bank0
  4613  02D6  0858               	movf	?___ftmul+1,w
  4614  02D7  0022               	movlb	2	; select bank2
  4615  02D8  00AA               	movwf	(_loop$2051+1)^(0+256)
  4616  02D9  0020               	movlb	0	; select bank0
  4617  02DA  0859               	movf	?___ftmul+2,w
  4618  02DB  0022               	movlb	2	; select bank2
  4619  02DC  00AB               	movwf	(_loop$2051+2)^(0+256)
  4620                           
  4621                           ;main.c: 153: setMessage(&packet, "VBAT", getADCValue(0b000100) * 3.106382978723404);
  4622  02DD  302F               	movlw	low loop@packet
  4623  02DE  0021               	movlb	1	; select bank1
  4624  02DF  00B9               	movwf	setMessage@packet^(0+128)
  4625  02E0  3001               	movlw	high loop@packet
  4626  02E1  00BA               	movwf	(setMessage@packet+1)^(0+128)
  4627  02E2  3023               	movlw	low (STR_4| (0+32768))
  4628  02E3  00BB               	movwf	setMessage@topic^(0+128)
  4629  02E4  3098               	movlw	high (STR_4| (0+32768))
  4630  02E5  00BC               	movwf	(setMessage@topic^(0+128)+1)
  4631  02E6  0022               	movlb	2	; select bank2
  4632  02E7  0829               	movf	_loop$2051^(0+256),w
  4633  02E8  0021               	movlb	1	; select bank1
  4634  02E9  00BD               	movwf	setMessage@value^(0+128)
  4635  02EA  0022               	movlb	2	; select bank2
  4636  02EB  082A               	movf	(_loop$2051+1)^(0+256),w
  4637  02EC  0021               	movlb	1	; select bank1
  4638  02ED  00BE               	movwf	(setMessage@value+1)^(0+128)
  4639  02EE  0022               	movlb	2	; select bank2
  4640  02EF  082B               	movf	(_loop$2051+2)^(0+256),w
  4641  02F0  0021               	movlb	1	; select bank1
  4642  02F1  00BF               	movwf	(setMessage@value+2)^(0+128)
  4643  02F2  318D  2507  3181   	fcall	_setMessage
  4644                           
  4645                           ;main.c: 154: packet.packetData.byte = 0;
  4646  02F5  0022               	movlb	2	; select bank2
  4647  02F6  01AF               	clrf	loop@packet^(0+256)
  4648                           
  4649                           ;main.c: 155: packet.packetData.ACKRequest = 1;
  4650  02F7  152F               	bsf	loop@packet^(0+256),2
  4651                           
  4652                           ;main.c: 156: nrf24l01SendPacket(&packet);
  4653  02F8  302F               	movlw	low loop@packet
  4654  02F9  0020               	movlb	0	; select bank0
  4655  02FA  00A7               	movwf	nrf24l01SendPacket@Packet
  4656  02FB  3001               	movlw	high loop@packet
  4657  02FC  00A8               	movwf	nrf24l01SendPacket@Packet+1
  4658  02FD  3186  265E  3181   	fcall	_nrf24l01SendPacket
  4659                           
  4660                           ;main.c: 157: checkTXPower();
  4661  0300  3197  278B  3181   	fcall	_checkTXPower
  4662                           
  4663                           ;main.c: 158: sleep(10);
  4664  0303  300A               	movlw	10
  4665  0304  3188  201E  3181   	fcall	_sleep
  4666                           
  4667                           ;main.c: 161: setMessage(&packet, "ANC3mV", getADCValue(0b010011));
  4668  0307  302F               	movlw	low loop@packet
  4669  0308  0021               	movlb	1	; select bank1
  4670  0309  00B9               	movwf	setMessage@packet^(0+128)
  4671  030A  3001               	movlw	high loop@packet
  4672  030B  00BA               	movwf	(setMessage@packet+1)^(0+128)
  4673  030C  300C               	movlw	low (STR_5| (0+32768))
  4674  030D  00BB               	movwf	setMessage@topic^(0+128)
  4675  030E  3098               	movlw	high (STR_5| (0+32768))
  4676  030F  00BC               	movwf	(setMessage@topic^(0+128)+1)
  4677  0310  3013               	movlw	19
  4678  0311  318E  26B2  3181   	fcall	_getADCValue
  4679  0314  0020               	movlb	0	; select bank0
  4680  0315  084B               	movf	?_getADCValue,w
  4681  0316  0021               	movlb	1	; select bank1
  4682  0317  00BD               	movwf	setMessage@value^(0+128)
  4683  0318  0020               	movlb	0	; select bank0
  4684  0319  084C               	movf	?_getADCValue+1,w
  4685  031A  0021               	movlb	1	; select bank1
  4686  031B  00BE               	movwf	(setMessage@value+1)^(0+128)
  4687  031C  0020               	movlb	0	; select bank0
  4688  031D  084D               	movf	?_getADCValue+2,w
  4689  031E  0021               	movlb	1	; select bank1
  4690  031F  00BF               	movwf	(setMessage@value+2)^(0+128)
  4691  0320  318D  2507  3181   	fcall	_setMessage
  4692                           
  4693                           ;main.c: 162: packet.packetData.byte = 0;
  4694  0323  0022               	movlb	2	; select bank2
  4695  0324  01AF               	clrf	loop@packet^(0+256)
  4696                           
  4697                           ;main.c: 163: packet.packetData.ACKRequest = 1;
  4698  0325  152F               	bsf	loop@packet^(0+256),2
  4699                           
  4700                           ;main.c: 164: nrf24l01SendPacket(&packet);
  4701  0326  302F               	movlw	low loop@packet
  4702  0327  0020               	movlb	0	; select bank0
  4703  0328  00A7               	movwf	nrf24l01SendPacket@Packet
  4704  0329  3001               	movlw	high loop@packet
  4705  032A  00A8               	movwf	nrf24l01SendPacket@Packet+1
  4706  032B  3186  265E  3181   	fcall	_nrf24l01SendPacket
  4707                           
  4708                           ;main.c: 165: checkTXPower();
  4709  032E  3197  278B  3181   	fcall	_checkTXPower
  4710                           
  4711                           ;main.c: 166: sleep(10);
  4712  0331  300A               	movlw	10
  4713  0332  3188  201E  3181   	fcall	_sleep
  4714                           
  4715                           ;main.c: 169: n_RF_SETUP_t rfSetup;;main.c: 170: rfSetup.byte = nrf24l01Send((unsigned) 
      +                          0b00000000 | (unsigned) 0x06, 0);
  4716  0335  0020               	movlb	0	; select bank0
  4717  0336  01A0               	clrf	nrf24l01Send@data
  4718  0337  3006               	movlw	6
  4719  0338  3188  20CA  3181   	fcall	_nrf24l01Send
  4720  033B  0021               	movlb	1	; select bank1
  4721  033C  00C3               	movwf	??_loop^(0+128)
  4722  033D  0843               	movf	??_loop^(0+128),w
  4723  033E  0022               	movlb	2	; select bank2
  4724  033F  00AE               	movwf	loop@rfSetup^(0+256)
  4725                           
  4726                           ;main.c: 172: setMessage(&packet, "RFPWR", rfSetup.RF_PWR);
  4727  0340  302F               	movlw	low loop@packet
  4728  0341  0021               	movlb	1	; select bank1
  4729  0342  00B9               	movwf	setMessage@packet^(0+128)
  4730  0343  3001               	movlw	high loop@packet
  4731  0344  00BA               	movwf	(setMessage@packet+1)^(0+128)
  4732  0345  3013               	movlw	low (STR_6| (0+32768))
  4733  0346  00BB               	movwf	setMessage@topic^(0+128)
  4734  0347  3098               	movlw	high (STR_6| (0+32768))
  4735  0348  00BC               	movwf	(setMessage@topic^(0+128)+1)
  4736  0349  0022               	movlb	2	; select bank2
  4737  034A  0C2E               	rrf	loop@rfSetup^(0+256),w
  4738  034B  3903               	andlw	3
  4739  034C  3188  2003  3181   	fcall	___lbtoft
  4740  034F  0020               	movlb	0	; select bank0
  4741  0350  0828               	movf	?___lbtoft,w
  4742  0351  0021               	movlb	1	; select bank1
  4743  0352  00BD               	movwf	setMessage@value^(0+128)
  4744  0353  0020               	movlb	0	; select bank0
  4745  0354  0829               	movf	?___lbtoft+1,w
  4746  0355  0021               	movlb	1	; select bank1
  4747  0356  00BE               	movwf	(setMessage@value+1)^(0+128)
  4748  0357  0020               	movlb	0	; select bank0
  4749  0358  082A               	movf	?___lbtoft+2,w
  4750  0359  0021               	movlb	1	; select bank1
  4751  035A  00BF               	movwf	(setMessage@value+2)^(0+128)
  4752  035B  318D  2507  3181   	fcall	_setMessage
  4753                           
  4754                           ;main.c: 173: packet.packetData.byte = 0;
  4755  035E  0022               	movlb	2	; select bank2
  4756  035F  01AF               	clrf	loop@packet^(0+256)
  4757                           
  4758                           ;main.c: 174: packet.packetData.ACKRequest = 1;
  4759  0360  152F               	bsf	loop@packet^(0+256),2
  4760                           
  4761                           ;main.c: 175: nrf24l01SendPacket(&packet);
  4762  0361  302F               	movlw	low loop@packet
  4763  0362  0020               	movlb	0	; select bank0
  4764  0363  00A7               	movwf	nrf24l01SendPacket@Packet
  4765  0364  3001               	movlw	high loop@packet
  4766  0365  00A8               	movwf	nrf24l01SendPacket@Packet+1
  4767  0366  3186  265E  3181   	fcall	_nrf24l01SendPacket
  4768                           
  4769                           ;main.c: 176: checkTXPower();
  4770  0369  3197  278B  3181   	fcall	_checkTXPower
  4771                           
  4772                           ;main.c: 177: sleep(10);
  4773  036C  300A               	movlw	10
  4774  036D  3188  201E         	fcall	_sleep
  4775  036F  0008               	return
  4776  0370                     __end_of_loop:	
  4777                           
  4778                           	psect	text11
  4779  0D07                     __ptext11:	
  4780 ;; *************** function _setMessage *****************
  4781 ;; Defined at:
  4782 ;;		line 95 in file "main.c"
  4783 ;; Parameters:    Size  Location     Type
  4784 ;;  packet          2   25[BANK1 ] PTR struct .
  4785 ;;		 -> main@packet(33), loop@packet(33), 
  4786 ;;  topic           2   27[BANK1 ] PTR const unsigned char 
  4787 ;;		 -> STR_8(5), STR_6(6), STR_5(7), STR_4(5), 
  4788 ;;		 -> STR_3(5), 
  4789 ;;  value           3   29[BANK1 ] float 
  4790 ;; Auto vars:     Size  Location     Type
  4791 ;;  status          2   33[BANK1 ] int 
  4792 ;; Return value:  Size  Location     Type
  4793 ;;                  1    wreg      void 
  4794 ;; Registers used:
  4795 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4796 ;; Tracked objects:
  4797 ;;		On entry : 0/0
  4798 ;;		On exit  : 0/0
  4799 ;;		Unchanged: 0/0
  4800 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4801 ;;      Params:         0       0       7       0       0       0       0       0       0       0       0       0       
      +0       0
  4802 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  4803 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  4804 ;;      Totals:         0       0      10       0       0       0       0       0       0       0       0       0       
      +0       0
  4805 ;;Total ram usage:       10 bytes
  4806 ;; Hardware stack levels used:    1
  4807 ;; Hardware stack levels required when called:   11
  4808 ;; This function calls:
  4809 ;;		_ftoa
  4810 ;;		_memset
  4811 ;;		_strcat
  4812 ;; This function is called by:
  4813 ;;		_loop
  4814 ;;		_main
  4815 ;; This function uses a non-reentrant model
  4816 ;;
  4817                           
  4818                           
  4819                           ;psect for function _setMessage
  4820  0D07                     _setMessage:	
  4821                           
  4822                           ;main.c: 96: memset(packet->Message, 0, sizeof(packet->Message));
  4823                           
  4824                           ;incstack = 0
  4825                           ; Regs used in _setMessage: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4826  0D07  0021               	movlb	1	; select bank1
  4827  0D08  0839               	movf	setMessage@packet^(0+128),w
  4828  0D09  3E01               	addlw	1
  4829  0D0A  0020               	movlb	0	; select bank0
  4830  0D0B  00A0               	movwf	memset@p1
  4831  0D0C  3000               	movlw	0
  4832  0D0D  0021               	movlb	1	; select bank1
  4833  0D0E  3D3A               	addwfc	(setMessage@packet+1)^(0+128),w
  4834  0D0F  0020               	movlb	0	; select bank0
  4835  0D10  00A1               	movwf	memset@p1+1
  4836  0D11  3000               	movlw	0
  4837  0D12  00A2               	movwf	memset@c
  4838  0D13  00A3               	movwf	memset@c+1
  4839  0D14  3020               	movlw	32
  4840  0D15  00A4               	movwf	memset@n
  4841  0D16  3000               	movlw	0
  4842  0D17  00A5               	movwf	memset@n+1
  4843  0D18  3197  27CC  318D   	fcall	_memset
  4844                           
  4845                           ;main.c: 98: strcat(packet->Message, romData->name);
  4846  0D1B  0021               	movlb	1	; select bank1
  4847  0D1C  0839               	movf	setMessage@packet^(0+128),w
  4848  0D1D  3E01               	addlw	1
  4849  0D1E  00B3               	movwf	strcat@to^(0+128)
  4850  0D1F  3000               	movlw	0
  4851  0D20  3D3A               	addwfc	(setMessage@packet+1)^(0+128),w
  4852  0D21  00B4               	movwf	(strcat@to+1)^(0+128)
  4853  0D22  086E               	movf	_romData^(0+128),w
  4854  0D23  3E01               	addlw	1
  4855  0D24  00B5               	movwf	strcat@from^(0+128)
  4856  0D25  3001               	movlw	1
  4857  0D26  00B6               	movwf	(strcat@from+1)^(0+128)
  4858  0D27  3189  2154  318D   	fcall	_strcat
  4859                           
  4860                           ;main.c: 100: strcat(packet->Message, "/");
  4861  0D2A  0021               	movlb	1	; select bank1
  4862  0D2B  0839               	movf	setMessage@packet^(0+128),w
  4863  0D2C  3E01               	addlw	1
  4864  0D2D  00B3               	movwf	strcat@to^(0+128)
  4865  0D2E  3000               	movlw	0
  4866  0D2F  3D3A               	addwfc	(setMessage@packet+1)^(0+128),w
  4867  0D30  00B4               	movwf	(strcat@to+1)^(0+128)
  4868  0D31  3031               	movlw	low (STR_1| (0+32768))
  4869  0D32  00B5               	movwf	strcat@from^(0+128)
  4870  0D33  3098               	movlw	high (STR_1| (0+32768))
  4871  0D34  00B6               	movwf	(strcat@from^(0+128)+1)
  4872  0D35  3189  2154  318D   	fcall	_strcat
  4873                           
  4874                           ;main.c: 101: strcat(packet->Message, topic);
  4875  0D38  0021               	movlb	1	; select bank1
  4876  0D39  0839               	movf	setMessage@packet^(0+128),w
  4877  0D3A  3E01               	addlw	1
  4878  0D3B  00B3               	movwf	strcat@to^(0+128)
  4879  0D3C  3000               	movlw	0
  4880  0D3D  3D3A               	addwfc	(setMessage@packet+1)^(0+128),w
  4881  0D3E  00B4               	movwf	(strcat@to+1)^(0+128)
  4882  0D3F  083C               	movf	(setMessage@topic+1)^(0+128),w
  4883  0D40  00B6               	movwf	(strcat@from+1)^(0+128)
  4884  0D41  083B               	movf	setMessage@topic^(0+128),w
  4885  0D42  00B5               	movwf	strcat@from^(0+128)
  4886  0D43  3189  2154  318D   	fcall	_strcat
  4887                           
  4888                           ;main.c: 103: int status;;main.c: 104: strcat(packet->Message, "/");
  4889  0D46  0021               	movlb	1	; select bank1
  4890  0D47  0839               	movf	setMessage@packet^(0+128),w
  4891  0D48  3E01               	addlw	1
  4892  0D49  00B3               	movwf	strcat@to^(0+128)
  4893  0D4A  3000               	movlw	0
  4894  0D4B  3D3A               	addwfc	(setMessage@packet+1)^(0+128),w
  4895  0D4C  00B4               	movwf	(strcat@to+1)^(0+128)
  4896  0D4D  3031               	movlw	low (STR_1| (0+32768))
  4897  0D4E  00B5               	movwf	strcat@from^(0+128)
  4898  0D4F  3098               	movlw	high (STR_1| (0+32768))
  4899  0D50  00B6               	movwf	(strcat@from^(0+128)+1)
  4900  0D51  3189  2154  318D   	fcall	_strcat
  4901                           
  4902                           ;main.c: 105: strcat(packet->Message, ftoa(value, &status));
  4903  0D54  0021               	movlb	1	; select bank1
  4904  0D55  0839               	movf	setMessage@packet^(0+128),w
  4905  0D56  3E01               	addlw	1
  4906  0D57  00B3               	movwf	strcat@to^(0+128)
  4907  0D58  3000               	movlw	0
  4908  0D59  3D3A               	addwfc	(setMessage@packet+1)^(0+128),w
  4909  0D5A  00B4               	movwf	(strcat@to+1)^(0+128)
  4910  0D5B  083D               	movf	setMessage@value^(0+128),w
  4911  0D5C  00A6               	movwf	ftoa@f^(0+128)
  4912  0D5D  083E               	movf	(setMessage@value+1)^(0+128),w
  4913  0D5E  00A7               	movwf	(ftoa@f+1)^(0+128)
  4914  0D5F  083F               	movf	(setMessage@value+2)^(0+128),w
  4915  0D60  00A8               	movwf	(ftoa@f+2)^(0+128)
  4916  0D61  30C1               	movlw	(low (setMessage@status| 0))& (0+255)
  4917  0D62  00C0               	movwf	??_setMessage^(0+128)
  4918  0D63  0840               	movf	??_setMessage^(0+128),w
  4919  0D64  00A9               	movwf	ftoa@status^(0+128)
  4920  0D65  3185  256C  318D   	fcall	_ftoa
  4921  0D68  0021               	movlb	1	; select bank1
  4922  0D69  00B5               	movwf	strcat@from^(0+128)
  4923  0D6A  3001               	movlw	1
  4924  0D6B  00B6               	movwf	(strcat@from+1)^(0+128)
  4925  0D6C  3189  2154         	fcall	_strcat
  4926  0D6E  0008               	return
  4927  0D6F                     __end_of_setMessage:	
  4928                           
  4929                           	psect	text12
  4930  0954                     __ptext12:	
  4931 ;; *************** function _strcat *****************
  4932 ;; Defined at:
  4933 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\strcat.c"
  4934 ;; Parameters:    Size  Location     Type
  4935 ;;  to              2   19[BANK1 ] PTR unsigned char 
  4936 ;;		 -> main@packet(33), loop@packet(33), 
  4937 ;;  from            2   21[BANK1 ] PTR const unsigned char 
  4938 ;;		 -> romDataMap.name(16), ftoa@buf(17), STR_8(5), STR_6(6), 
  4939 ;;		 -> STR_5(7), STR_4(5), STR_3(5), STR_2(2), 
  4940 ;;		 -> STR_1(2), romDataMap(28), 
  4941 ;; Auto vars:     Size  Location     Type
  4942 ;;  cp              2   23[BANK1 ] PTR unsigned char 
  4943 ;;		 -> main@packet(33), loop@packet(33), 
  4944 ;; Return value:  Size  Location     Type
  4945 ;;                  2   19[BANK1 ] PTR unsigned char 
  4946 ;; Registers used:
  4947 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath
  4948 ;; Tracked objects:
  4949 ;;		On entry : 0/0
  4950 ;;		On exit  : 0/0
  4951 ;;		Unchanged: 0/0
  4952 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4953 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  4954 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  4955 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4956 ;;      Totals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0
  4957 ;;Total ram usage:        6 bytes
  4958 ;; Hardware stack levels used:    1
  4959 ;; Hardware stack levels required when called:    7
  4960 ;; This function calls:
  4961 ;;		Nothing
  4962 ;; This function is called by:
  4963 ;;		_setMessage
  4964 ;; This function uses a non-reentrant model
  4965 ;;
  4966                           
  4967                           
  4968                           ;psect for function _strcat
  4969  0954                     _strcat:	
  4970                           
  4971                           ;incstack = 0
  4972                           ; Regs used in _strcat: [wreg-fsr1h+status,2+status,0+pclath]
  4973  0954  0021               	movlb	1	; select bank1
  4974  0955  0834               	movf	(strcat@to+1)^(0+128),w
  4975  0956  00B8               	movwf	(strcat@cp+1)^(0+128)
  4976  0957  0833               	movf	strcat@to^(0+128),w
  4977  0958  00B7               	movwf	strcat@cp^(0+128)
  4978  0959                     l2745:	
  4979  0959  0837               	movf	strcat@cp^(0+128),w
  4980  095A  0086               	movwf	6
  4981  095B  0838               	movf	(strcat@cp+1)^(0+128),w
  4982  095C  0087               	movwf	7
  4983  095D  0801               	movf	1,w
  4984  095E  1903               	btfsc	3,2
  4985  095F  296D               	goto	l2749
  4986  0960  3001               	movlw	1
  4987  0961  07B7               	addwf	strcat@cp^(0+128),f
  4988  0962  3000               	movlw	0
  4989  0963  3DB8               	addwfc	(strcat@cp+1)^(0+128),f
  4990  0964  2959               	goto	l2745
  4991  0965                     l2747:	
  4992  0965  3001               	movlw	1
  4993  0966  07B7               	addwf	strcat@cp^(0+128),f
  4994  0967  3000               	movlw	0
  4995  0968  3DB8               	addwfc	(strcat@cp+1)^(0+128),f
  4996  0969  3001               	movlw	1
  4997  096A  07B5               	addwf	strcat@from^(0+128),f
  4998  096B  3000               	movlw	0
  4999  096C  3DB6               	addwfc	(strcat@from+1)^(0+128),f
  5000  096D                     l2749:	
  5001  096D  0837               	movf	strcat@cp^(0+128),w
  5002  096E  0086               	movwf	6
  5003  096F  0838               	movf	(strcat@cp+1)^(0+128),w
  5004  0970  0087               	movwf	7
  5005  0971  0835               	movf	strcat@from^(0+128),w
  5006  0972  0084               	movwf	4
  5007  0973  0836               	movf	(strcat@from+1)^(0+128),w
  5008  0974  0085               	movwf	5
  5009  0975  0800               	movf	0,w	;code access
  5010  0976  3FC0               	movwi [0]fsr1
  5011  0977  0889               	movf	9,f
  5012  0978  1903               	btfsc	3,2
  5013  0979  0008               	return
  5014  097A  2965               	goto	l2747
  5015  097B                     __end_of_strcat:	
  5016                           ;	Return value of _strcat is never used
  5017                           
  5018                           
  5019                           	psect	text13
  5020  17CC                     __ptext13:	
  5021 ;; *************** function _memset *****************
  5022 ;; Defined at:
  5023 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\memset.c"
  5024 ;; Parameters:    Size  Location     Type
  5025 ;;  p1              2    0[BANK0 ] PTR void 
  5026 ;;		 -> RXPacket(33), main@packet(33), loop@packet(33), 
  5027 ;;  c               2    2[BANK0 ] int 
  5028 ;;  n               2    4[BANK0 ] unsigned int 
  5029 ;; Auto vars:     Size  Location     Type
  5030 ;;  p               2    6[BANK0 ] PTR unsigned char 
  5031 ;;		 -> RXPacket(33), main@packet(33), loop@packet(33), 
  5032 ;; Return value:  Size  Location     Type
  5033 ;;                  2    0[BANK0 ] PTR void 
  5034 ;; Registers used:
  5035 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  5036 ;; Tracked objects:
  5037 ;;		On entry : 0/0
  5038 ;;		On exit  : 0/0
  5039 ;;		Unchanged: 0/0
  5040 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5041 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5042 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5043 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5044 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5045 ;;Total ram usage:        8 bytes
  5046 ;; Hardware stack levels used:    1
  5047 ;; Hardware stack levels required when called:    7
  5048 ;; This function calls:
  5049 ;;		Nothing
  5050 ;; This function is called by:
  5051 ;;		_setMessage
  5052 ;; This function uses a non-reentrant model
  5053 ;;
  5054                           
  5055                           
  5056                           ;psect for function _memset
  5057  17CC                     _memset:	
  5058                           
  5059                           ;incstack = 0
  5060                           ; Regs used in _memset: [wreg+fsr1l+fsr1h+status,2+status,0]
  5061  17CC  0020               	movlb	0	; select bank0
  5062  17CD  0821               	movf	memset@p1+1,w
  5063  17CE  00A7               	movwf	memset@p+1
  5064  17CF  0820               	movf	memset@p1,w
  5065  17D0  00A6               	movwf	memset@p
  5066  17D1                     l2739:	
  5067  17D1  3001               	movlw	1
  5068  17D2  02A4               	subwf	memset@n,f
  5069  17D3  3000               	movlw	0
  5070  17D4  3BA5               	subwfb	memset@n+1,f
  5071  17D5  0A24               	incf	memset@n,w
  5072  17D6  1903               	btfsc	3,2
  5073  17D7  0A25               	incf	memset@n+1,w
  5074  17D8  1903               	btfsc	3,2
  5075  17D9  0008               	return
  5076  17DA  0826               	movf	memset@p,w
  5077  17DB  0086               	movwf	6
  5078  17DC  0827               	movf	memset@p+1,w
  5079  17DD  0087               	movwf	7
  5080  17DE  0822               	movf	memset@c,w
  5081  17DF  0081               	movwf	1
  5082  17E0  3001               	movlw	1
  5083  17E1  07A6               	addwf	memset@p,f
  5084  17E2  3000               	movlw	0
  5085  17E3  3DA7               	addwfc	memset@p+1,f
  5086  17E4  2FD1               	goto	l2739
  5087  17E5                     __end_of_memset:	
  5088                           ;	Return value of _memset is never used
  5089                           
  5090                           
  5091                           	psect	text14
  5092  056C                     __ptext14:	
  5093 ;; *************** function _ftoa *****************
  5094 ;; Defined at:
  5095 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\ftoa.c"
  5096 ;; Parameters:    Size  Location     Type
  5097 ;;  f               3    6[BANK1 ] float 
  5098 ;;  status          1    9[BANK1 ] PTR int 
  5099 ;;		 -> setMessage@status(2), 
  5100 ;; Auto vars:     Size  Location     Type
  5101 ;;  l               4   14[BANK1 ] unsigned long 
  5102 ;;  rem             4   10[BANK1 ] unsigned long 
  5103 ;;  cp              1   18[BANK1 ] PTR unsigned char 
  5104 ;;		 -> ftoa@buf(17), 
  5105 ;; Return value:  Size  Location     Type
  5106 ;;                  1    wreg      PTR unsigned char 
  5107 ;; Registers used:
  5108 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5109 ;; Tracked objects:
  5110 ;;		On entry : 0/0
  5111 ;;		On exit  : 0/0
  5112 ;;		Unchanged: 0/0
  5113 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5114 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  5115 ;;      Locals:         0       0       9       0       0       0       0       0       0       0       0       0       
      +0       0
  5116 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5117 ;;      Totals:         0       1      13       0       0       0       0       0       0       0       0       0       
      +0       0
  5118 ;;Total ram usage:       14 bytes
  5119 ;; Hardware stack levels used:    1
  5120 ;; Hardware stack levels required when called:   10
  5121 ;; This function calls:
  5122 ;;		___ftge
  5123 ;;		___ftmul
  5124 ;;		___ftneg
  5125 ;;		___ftsub
  5126 ;;		___fttol
  5127 ;;		___lltoft
  5128 ;;		_sprintf
  5129 ;; This function is called by:
  5130 ;;		_setMessage
  5131 ;; This function uses a non-reentrant model
  5132 ;;
  5133                           
  5134                           
  5135                           ;psect for function _ftoa
  5136  056C                     _ftoa:	
  5137                           
  5138                           ;incstack = 0
  5139                           ; Regs used in _ftoa: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5140  056C  3050               	movlw	(low (ftoa@buf| (0+256)))& (0+255)
  5141  056D  0020               	movlb	0	; select bank0
  5142  056E  00EF               	movwf	??_ftoa
  5143  056F  086F               	movf	??_ftoa,w
  5144  0570  0021               	movlb	1	; select bank1
  5145  0571  00B2               	movwf	ftoa@cp^(0+128)
  5146  0572  0826               	movf	ftoa@f^(0+128),w
  5147  0573  0020               	movlb	0	; select bank0
  5148  0574  00A0               	movwf	___ftge@ff1
  5149  0575  0021               	movlb	1	; select bank1
  5150  0576  0827               	movf	(ftoa@f+1)^(0+128),w
  5151  0577  0020               	movlb	0	; select bank0
  5152  0578  00A1               	movwf	___ftge@ff1+1
  5153  0579  0021               	movlb	1	; select bank1
  5154  057A  0828               	movf	(ftoa@f+2)^(0+128),w
  5155  057B  0020               	movlb	0	; select bank0
  5156  057C  00A2               	movwf	___ftge@ff1+2
  5157  057D  3000               	movlw	0
  5158  057E  00A3               	movwf	___ftge@ff2
  5159  057F  3000               	movlw	0
  5160  0580  00A4               	movwf	___ftge@ff2+1
  5161  0581  3000               	movlw	0
  5162  0582  00A5               	movwf	___ftge@ff2+2
  5163  0583  318A  2234  3185   	fcall	___ftge
  5164  0586  1803               	btfsc	3,0
  5165  0587  2DB2               	goto	l2761
  5166  0588  302D               	movlw	45
  5167  0589  0020               	movlb	0	; select bank0
  5168  058A  00EF               	movwf	??_ftoa
  5169  058B  0021               	movlb	1	; select bank1
  5170  058C  0832               	movf	ftoa@cp^(0+128),w
  5171  058D  0086               	movwf	6
  5172  058E  3001               	movlw	1	; select bank2/3
  5173  058F  0087               	movwf	7
  5174  0590  0020               	movlb	0	; select bank0
  5175  0591  086F               	movf	??_ftoa,w
  5176  0592  0081               	movwf	1
  5177  0593  3001               	movlw	1
  5178  0594  00EF               	movwf	??_ftoa
  5179  0595  086F               	movf	??_ftoa,w
  5180  0596  0021               	movlb	1	; select bank1
  5181  0597  07B2               	addwf	ftoa@cp^(0+128),f
  5182  0598  0826               	movf	ftoa@f^(0+128),w
  5183  0599  0020               	movlb	0	; select bank0
  5184  059A  00D7               	movwf	___ftneg@f1
  5185  059B  0021               	movlb	1	; select bank1
  5186  059C  0827               	movf	(ftoa@f+1)^(0+128),w
  5187  059D  0020               	movlb	0	; select bank0
  5188  059E  00D8               	movwf	___ftneg@f1+1
  5189  059F  0021               	movlb	1	; select bank1
  5190  05A0  0828               	movf	(ftoa@f+2)^(0+128),w
  5191  05A1  0020               	movlb	0	; select bank0
  5192  05A2  00D9               	movwf	___ftneg@f1+2
  5193  05A3  3197  2754  3185   	fcall	___ftneg
  5194  05A6  0020               	movlb	0	; select bank0
  5195  05A7  0857               	movf	?___ftneg,w
  5196  05A8  0021               	movlb	1	; select bank1
  5197  05A9  00A6               	movwf	ftoa@f^(0+128)
  5198  05AA  0020               	movlb	0	; select bank0
  5199  05AB  0858               	movf	?___ftneg+1,w
  5200  05AC  0021               	movlb	1	; select bank1
  5201  05AD  00A7               	movwf	(ftoa@f+1)^(0+128)
  5202  05AE  0020               	movlb	0	; select bank0
  5203  05AF  0859               	movf	?___ftneg+2,w
  5204  05B0  0021               	movlb	1	; select bank1
  5205  05B1  00A8               	movwf	(ftoa@f+2)^(0+128)
  5206  05B2                     l2761:	
  5207  05B2  0021               	movlb	1	; select bank1
  5208  05B3  0826               	movf	ftoa@f^(0+128),w
  5209  05B4  0020               	movlb	0	; select bank0
  5210  05B5  00E7               	movwf	___fttol@f1
  5211  05B6  0021               	movlb	1	; select bank1
  5212  05B7  0827               	movf	(ftoa@f+1)^(0+128),w
  5213  05B8  0020               	movlb	0	; select bank0
  5214  05B9  00E8               	movwf	___fttol@f1+1
  5215  05BA  0021               	movlb	1	; select bank1
  5216  05BB  0828               	movf	(ftoa@f+2)^(0+128),w
  5217  05BC  0020               	movlb	0	; select bank0
  5218  05BD  00E9               	movwf	___fttol@f1+2
  5219  05BE  318D  256F  3185   	fcall	___fttol
  5220  05C1  0020               	movlb	0	; select bank0
  5221  05C2  086A               	movf	?___fttol+3,w
  5222  05C3  0021               	movlb	1	; select bank1
  5223  05C4  00B1               	movwf	(ftoa@l+3)^(0+128)
  5224  05C5  0020               	movlb	0	; select bank0
  5225  05C6  0869               	movf	?___fttol+2,w
  5226  05C7  0021               	movlb	1	; select bank1
  5227  05C8  00B0               	movwf	(ftoa@l+2)^(0+128)
  5228  05C9  0020               	movlb	0	; select bank0
  5229  05CA  0868               	movf	?___fttol+1,w
  5230  05CB  0021               	movlb	1	; select bank1
  5231  05CC  00AF               	movwf	(ftoa@l+1)^(0+128)
  5232  05CD  0020               	movlb	0	; select bank0
  5233  05CE  0867               	movf	?___fttol,w
  5234  05CF  0021               	movlb	1	; select bank1
  5235  05D0  00AE               	movwf	ftoa@l^(0+128)
  5236  05D1  0831               	movf	(ftoa@l+3)^(0+128),w
  5237  05D2  0020               	movlb	0	; select bank0
  5238  05D3  00AB               	movwf	___lltoft@c+3
  5239  05D4  0021               	movlb	1	; select bank1
  5240  05D5  0830               	movf	(ftoa@l+2)^(0+128),w
  5241  05D6  0020               	movlb	0	; select bank0
  5242  05D7  00AA               	movwf	___lltoft@c+2
  5243  05D8  0021               	movlb	1	; select bank1
  5244  05D9  082F               	movf	(ftoa@l+1)^(0+128),w
  5245  05DA  0020               	movlb	0	; select bank0
  5246  05DB  00A9               	movwf	___lltoft@c+1
  5247  05DC  0021               	movlb	1	; select bank1
  5248  05DD  082E               	movf	ftoa@l^(0+128),w
  5249  05DE  0020               	movlb	0	; select bank0
  5250  05DF  00A8               	movwf	___lltoft@c
  5251  05E0  3189  21A5  3185   	fcall	___lltoft
  5252  05E3  0020               	movlb	0	; select bank0
  5253  05E4  0828               	movf	?___lltoft,w
  5254  05E5  00BB               	movwf	___ftsub@f2
  5255  05E6  0829               	movf	?___lltoft+1,w
  5256  05E7  00BC               	movwf	___ftsub@f2+1
  5257  05E8  082A               	movf	?___lltoft+2,w
  5258  05E9  00BD               	movwf	___ftsub@f2+2
  5259  05EA  0021               	movlb	1	; select bank1
  5260  05EB  0826               	movf	ftoa@f^(0+128),w
  5261  05EC  0020               	movlb	0	; select bank0
  5262  05ED  00BE               	movwf	___ftsub@f1
  5263  05EE  0021               	movlb	1	; select bank1
  5264  05EF  0827               	movf	(ftoa@f+1)^(0+128),w
  5265  05F0  0020               	movlb	0	; select bank0
  5266  05F1  00BF               	movwf	___ftsub@f1+1
  5267  05F2  0021               	movlb	1	; select bank1
  5268  05F3  0828               	movf	(ftoa@f+2)^(0+128),w
  5269  05F4  0020               	movlb	0	; select bank0
  5270  05F5  00C0               	movwf	___ftsub@f1+2
  5271  05F6  3188  208D  3185   	fcall	___ftsub
  5272  05F9  0020               	movlb	0	; select bank0
  5273  05FA  083B               	movf	?___ftsub,w
  5274  05FB  0021               	movlb	1	; select bank1
  5275  05FC  00A6               	movwf	ftoa@f^(0+128)
  5276  05FD  0020               	movlb	0	; select bank0
  5277  05FE  083C               	movf	?___ftsub+1,w
  5278  05FF  0021               	movlb	1	; select bank1
  5279  0600  00A7               	movwf	(ftoa@f+1)^(0+128)
  5280  0601  0020               	movlb	0	; select bank0
  5281  0602  083D               	movf	?___ftsub+2,w
  5282  0603  0021               	movlb	1	; select bank1
  5283  0604  00A8               	movwf	(ftoa@f+2)^(0+128)
  5284  0605  0826               	movf	ftoa@f^(0+128),w
  5285  0606  0020               	movlb	0	; select bank0
  5286  0607  00DA               	movwf	___ftmul@f2
  5287  0608  0021               	movlb	1	; select bank1
  5288  0609  0827               	movf	(ftoa@f+1)^(0+128),w
  5289  060A  0020               	movlb	0	; select bank0
  5290  060B  00DB               	movwf	___ftmul@f2+1
  5291  060C  0021               	movlb	1	; select bank1
  5292  060D  0828               	movf	(ftoa@f+2)^(0+128),w
  5293  060E  0020               	movlb	0	; select bank0
  5294  060F  00DC               	movwf	___ftmul@f2+2
  5295  0610  3024               	movlw	36
  5296  0611  00D7               	movwf	___ftmul@f1
  5297  0612  3074               	movlw	116
  5298  0613  00D8               	movwf	___ftmul@f1+1
  5299  0614  3049               	movlw	73
  5300  0615  00D9               	movwf	___ftmul@f1+2
  5301  0616  3187  2726  3185   	fcall	___ftmul
  5302  0619  0020               	movlb	0	; select bank0
  5303  061A  0857               	movf	?___ftmul,w
  5304  061B  00E7               	movwf	___fttol@f1
  5305  061C  0858               	movf	?___ftmul+1,w
  5306  061D  00E8               	movwf	___fttol@f1+1
  5307  061E  0859               	movf	?___ftmul+2,w
  5308  061F  00E9               	movwf	___fttol@f1+2
  5309  0620  318D  256F  3185   	fcall	___fttol
  5310  0623  0020               	movlb	0	; select bank0
  5311  0624  086A               	movf	?___fttol+3,w
  5312  0625  0021               	movlb	1	; select bank1
  5313  0626  00AD               	movwf	(ftoa@rem+3)^(0+128)
  5314  0627  0020               	movlb	0	; select bank0
  5315  0628  0869               	movf	?___fttol+2,w
  5316  0629  0021               	movlb	1	; select bank1
  5317  062A  00AC               	movwf	(ftoa@rem+2)^(0+128)
  5318  062B  0020               	movlb	0	; select bank0
  5319  062C  0868               	movf	?___fttol+1,w
  5320  062D  0021               	movlb	1	; select bank1
  5321  062E  00AB               	movwf	(ftoa@rem+1)^(0+128)
  5322  062F  0020               	movlb	0	; select bank0
  5323  0630  0867               	movf	?___fttol,w
  5324  0631  0021               	movlb	1	; select bank1
  5325  0632  00AA               	movwf	ftoa@rem^(0+128)
  5326  0633  3001               	movlw	low (STR_9| (0+32768))
  5327  0634  0020               	movlb	0	; select bank0
  5328  0635  00B8               	movwf	sprintf@f
  5329  0636  3098               	movlw	high (STR_9| (0+32768))
  5330  0637  00B9               	movwf	sprintf@f+1
  5331  0638  0021               	movlb	1	; select bank1
  5332  0639  0831               	movf	(ftoa@l+3)^(0+128),w
  5333  063A  0020               	movlb	0	; select bank0
  5334  063B  00BD               	movwf	?_sprintf+5
  5335  063C  0021               	movlb	1	; select bank1
  5336  063D  0830               	movf	(ftoa@l+2)^(0+128),w
  5337  063E  0020               	movlb	0	; select bank0
  5338  063F  00BC               	movwf	?_sprintf+4
  5339  0640  0021               	movlb	1	; select bank1
  5340  0641  082F               	movf	(ftoa@l+1)^(0+128),w
  5341  0642  0020               	movlb	0	; select bank0
  5342  0643  00BB               	movwf	?_sprintf+3
  5343  0644  0021               	movlb	1	; select bank1
  5344  0645  082E               	movf	ftoa@l^(0+128),w
  5345  0646  0020               	movlb	0	; select bank0
  5346  0647  00BA               	movwf	?_sprintf+2
  5347  0648  0021               	movlb	1	; select bank1
  5348  0649  082D               	movf	(ftoa@rem+3)^(0+128),w
  5349  064A  0020               	movlb	0	; select bank0
  5350  064B  00C1               	movwf	?_sprintf+9
  5351  064C  0021               	movlb	1	; select bank1
  5352  064D  082C               	movf	(ftoa@rem+2)^(0+128),w
  5353  064E  0020               	movlb	0	; select bank0
  5354  064F  00C0               	movwf	?_sprintf+8
  5355  0650  0021               	movlb	1	; select bank1
  5356  0651  082B               	movf	(ftoa@rem+1)^(0+128),w
  5357  0652  0020               	movlb	0	; select bank0
  5358  0653  00BF               	movwf	?_sprintf+7
  5359  0654  0021               	movlb	1	; select bank1
  5360  0655  082A               	movf	ftoa@rem^(0+128),w
  5361  0656  0020               	movlb	0	; select bank0
  5362  0657  00BE               	movwf	?_sprintf+6
  5363  0658  0021               	movlb	1	; select bank1
  5364  0659  0832               	movf	ftoa@cp^(0+128),w
  5365  065A  3180  2032         	fcall	_sprintf
  5366  065C  3050               	movlw	(low (ftoa@buf| (0+256)))& (0+255)
  5367  065D  0008               	return
  5368  065E                     __end_of_ftoa:	
  5369                           
  5370                           	psect	text15
  5371  0032                     __ptext15:	
  5372 ;; *************** function _sprintf *****************
  5373 ;; Defined at:
  5374 ;;		line 500 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\doprnt.c"
  5375 ;; Parameters:    Size  Location     Type
  5376 ;;  sp              1    wreg     PTR unsigned char 
  5377 ;;		 -> ftoa@buf(17), 
  5378 ;;  f               2   24[BANK0 ] PTR const unsigned char 
  5379 ;;		 -> STR_9(11), 
  5380 ;; Auto vars:     Size  Location     Type
  5381 ;;  sp              1   46[BANK0 ] PTR unsigned char 
  5382 ;;		 -> ftoa@buf(17), 
  5383 ;;  val             4   42[BANK0 ] unsigned long 
  5384 ;;  tmpval          4    0        struct .
  5385 ;;  prec            2   49[BANK0 ] int 
  5386 ;;  width           2   47[BANK0 ] int 
  5387 ;;  cp              2    0        PTR const unsigned char 
  5388 ;;  len             2    0        unsigned int 
  5389 ;;  c               1   51[BANK0 ] unsigned char 
  5390 ;;  ap              1   41[BANK0 ] PTR void [1]
  5391 ;;		 -> ?_sprintf(2), 
  5392 ;;  flag            1   40[BANK0 ] unsigned char 
  5393 ;; Return value:  Size  Location     Type
  5394 ;;                  2   24[BANK0 ] int 
  5395 ;; Registers used:
  5396 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5397 ;; Tracked objects:
  5398 ;;		On entry : 0/0
  5399 ;;		On exit  : 0/0
  5400 ;;		Unchanged: 0/0
  5401 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5402 ;;      Params:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5403 ;;      Locals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5404 ;;      Temps:          0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5405 ;;      Totals:         0      28       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5406 ;;Total ram usage:       28 bytes
  5407 ;; Hardware stack levels used:    1
  5408 ;; Hardware stack levels required when called:    8
  5409 ;; This function calls:
  5410 ;;		___lldiv
  5411 ;;		___llmod
  5412 ;;		___wmul
  5413 ;;		_isdigit
  5414 ;; This function is called by:
  5415 ;;		_ftoa
  5416 ;; This function uses a non-reentrant model
  5417 ;;
  5418                           
  5419                           
  5420                           ;psect for function _sprintf
  5421  0032                     _sprintf:	
  5422                           
  5423                           ;incstack = 0
  5424                           ; Regs used in _sprintf: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5425                           ;sprintf@sp stored from wreg
  5426  0032  0020               	movlb	0	; select bank0
  5427  0033  00CE               	movwf	sprintf@sp
  5428                           
  5429                           ;doprnt.c: 502: va_list ap;;doprnt.c: 507: char c;;doprnt.c: 509: int width;;doprnt.c: 5
      +                          12: int prec;;doprnt.c: 520: unsigned char flag;;doprnt.c: 535: union {;doprnt.c: 536: u
      +                          nsigned long vd;;doprnt.c: 537: double integ;;doprnt.c: 538: } tmpval;;doprnt.c: 540: un
      +                          signed long val;;doprnt.c: 541: unsigned len;;doprnt.c: 542: const char * cp;;doprnt.c: 
      +                          545: *ap = __va_start();
  5430  0034  303A               	movlw	(low ((?_sprintf| 0+2)))& (0+255)
  5431  0035  00C2               	movwf	??_sprintf
  5432  0036  0842               	movf	??_sprintf,w
  5433  0037  00C9               	movwf	sprintf@ap
  5434  0038                     l2527:	
  5435                           ;doprnt.c: 548: while((c = *f++)) {
  5436                           
  5437  0038  0839               	movf	sprintf@f+1,w
  5438  0039  00C3               	movwf	??_sprintf+1
  5439  003A  0838               	movf	sprintf@f,w
  5440  003B  00C2               	movwf	??_sprintf
  5441  003C  0AB8               	incf	sprintf@f,f
  5442  003D  1903               	skipnz
  5443  003E  0AB9               	incf	sprintf@f+1,f
  5444  003F  0842               	movf	??_sprintf,w
  5445  0040  0084               	movwf	4
  5446  0041  0843               	movf	??_sprintf+1,w
  5447  0042  0085               	movwf	5
  5448  0043  0800               	movf	0,w	;code access
  5449  0044  00C4               	movwf	??_sprintf+2
  5450  0045  0844               	movf	??_sprintf+2,w
  5451  0046  00D3               	movwf	sprintf@c
  5452  0047  0853               	movf	sprintf@c,w
  5453  0048  1903               	btfsc	3,2
  5454  0049  29F9               	goto	l2529
  5455                           
  5456                           ;doprnt.c: 550: if(c != '%')
  5457  004A  3025               	movlw	37
  5458  004B  0653               	xorwf	sprintf@c,w
  5459  004C  1903               	btfsc	3,2
  5460  004D  285B               	goto	l2439
  5461                           
  5462                           ;doprnt.c: 552: {;doprnt.c: 553: ((*sp++ = (c)));
  5463  004E  0853               	movf	sprintf@c,w
  5464  004F  00C2               	movwf	??_sprintf
  5465  0050  084E               	movf	sprintf@sp,w
  5466  0051  0086               	movwf	6
  5467  0052  3001               	movlw	1	; select bank2/3
  5468  0053  0087               	movwf	7
  5469  0054  0842               	movf	??_sprintf,w
  5470  0055  0081               	movwf	1
  5471  0056  3001               	movlw	1
  5472  0057  00C2               	movwf	??_sprintf
  5473  0058  0842               	movf	??_sprintf,w
  5474  0059  07CE               	addwf	sprintf@sp,f
  5475                           
  5476                           ;doprnt.c: 554: continue;
  5477  005A  2838               	goto	l2527
  5478  005B                     l2439:	
  5479                           
  5480                           ;doprnt.c: 555: };doprnt.c: 558: width = 0;
  5481  005B  01CF               	clrf	sprintf@width
  5482  005C  01D0               	clrf	sprintf@width+1
  5483                           
  5484                           ;doprnt.c: 560: flag = 0;
  5485  005D  01C8               	clrf	sprintf@flag
  5486                           
  5487                           ;doprnt.c: 609: if(isdigit((unsigned)*f)) {
  5488  005E  0838               	movf	sprintf@f,w
  5489  005F  0084               	movwf	4
  5490  0060  0839               	movf	sprintf@f+1,w
  5491  0061  0085               	movwf	5
  5492  0062  0800               	movf	0,w	;code access
  5493  0063  3197  276A  3180   	fcall	_isdigit
  5494  0066  1C03               	btfss	3,0
  5495  0067  2899               	goto	l2453
  5496                           
  5497                           ;doprnt.c: 610: width = 0;
  5498  0068  0020               	movlb	0	; select bank0
  5499  0069  01CF               	clrf	sprintf@width
  5500  006A  01D0               	clrf	sprintf@width+1
  5501  006B                     l2445:	
  5502                           ;doprnt.c: 611: do {
  5503                           
  5504                           
  5505                           ;doprnt.c: 612: width *= 10;
  5506  006B  300A               	movlw	10
  5507  006C  0020               	movlb	0	; select bank0
  5508  006D  00A0               	movwf	___wmul@multiplier
  5509  006E  3000               	movlw	0
  5510  006F  00A1               	movwf	___wmul@multiplier+1
  5511  0070  0850               	movf	sprintf@width+1,w
  5512  0071  00A3               	movwf	___wmul@multiplicand+1
  5513  0072  084F               	movf	sprintf@width,w
  5514  0073  00A2               	movwf	___wmul@multiplicand
  5515  0074  3188  2039  3180   	fcall	___wmul
  5516  0077  0020               	movlb	0	; select bank0
  5517  0078  0821               	movf	?___wmul+1,w
  5518  0079  00D0               	movwf	sprintf@width+1
  5519  007A  0820               	movf	?___wmul,w
  5520  007B  00CF               	movwf	sprintf@width
  5521                           
  5522                           ;doprnt.c: 613: width += *f++ - '0';
  5523  007C  0838               	movf	sprintf@f,w
  5524  007D  0084               	movwf	4
  5525  007E  0839               	movf	sprintf@f+1,w
  5526  007F  0085               	movwf	5
  5527  0080  0800               	movf	0,w	;code access
  5528  0081  3ED0               	addlw	208
  5529  0082  00C2               	movwf	??_sprintf
  5530  0083  30FF               	movlw	255
  5531  0084  1803               	skipnc
  5532  0085  3000               	movlw	0
  5533  0086  00C3               	movwf	??_sprintf+1
  5534  0087  0842               	movf	??_sprintf,w
  5535  0088  07CF               	addwf	sprintf@width,f
  5536  0089  0843               	movf	??_sprintf+1,w
  5537  008A  3DD0               	addwfc	sprintf@width+1,f
  5538  008B  3001               	movlw	1
  5539  008C  07B8               	addwf	sprintf@f,f
  5540  008D  3000               	movlw	0
  5541  008E  3DB9               	addwfc	sprintf@f+1,f
  5542                           
  5543                           ;doprnt.c: 614: } while(isdigit((unsigned)*f));
  5544  008F  0838               	movf	sprintf@f,w
  5545  0090  0084               	movwf	4
  5546  0091  0839               	movf	sprintf@f+1,w
  5547  0092  0085               	movwf	5
  5548  0093  0800               	movf	0,w	;code access
  5549  0094  3197  276A  3180   	fcall	_isdigit
  5550  0097  1803               	btfsc	3,0
  5551  0098  286B               	goto	l2445
  5552  0099                     l2453:	
  5553                           
  5554                           ;doprnt.c: 620: };doprnt.c: 623: if(*f == '.') {
  5555  0099  0020               	movlb	0	; select bank0
  5556  009A  0838               	movf	sprintf@f,w
  5557  009B  0084               	movwf	4
  5558  009C  0839               	movf	sprintf@f+1,w
  5559  009D  0085               	movwf	5
  5560  009E  0012               	moviw fsr0++
  5561  009F  3A2E               	xorlw	46
  5562  00A0  1D03               	btfss	3,2
  5563  00A1  28D7               	goto	l2465
  5564                           
  5565                           ;doprnt.c: 625: f++;
  5566  00A2  3001               	movlw	1
  5567  00A3  07B8               	addwf	sprintf@f,f
  5568  00A4  3000               	movlw	0
  5569  00A5  3DB9               	addwfc	sprintf@f+1,f
  5570                           
  5571                           ;doprnt.c: 639: {;doprnt.c: 640: prec = 0;
  5572  00A6  01D1               	clrf	sprintf@prec
  5573  00A7  01D2               	clrf	sprintf@prec+1
  5574  00A8                     l2463:	
  5575                           ;doprnt.c: 641: while(isdigit((unsigned)*f))
  5576                           
  5577  00A8  0838               	movf	sprintf@f,w
  5578  00A9  0084               	movwf	4
  5579  00AA  0839               	movf	sprintf@f+1,w
  5580  00AB  0085               	movwf	5
  5581  00AC  0800               	movf	0,w	;code access
  5582  00AD  3197  276A  3180   	fcall	_isdigit
  5583  00B0  1C03               	btfss	3,0
  5584  00B1  28E2               	goto	l2471
  5585                           
  5586                           ;doprnt.c: 642: prec = prec*10 + *f++ - '0';
  5587  00B2  0020               	movlb	0	; select bank0
  5588  00B3  0838               	movf	sprintf@f,w
  5589  00B4  0084               	movwf	4
  5590  00B5  0839               	movf	sprintf@f+1,w
  5591  00B6  0085               	movwf	5
  5592  00B7  0800               	movf	0,w	;code access
  5593  00B8  00C2               	movwf	??_sprintf
  5594  00B9  01C3               	clrf	??_sprintf+1
  5595  00BA  0852               	movf	sprintf@prec+1,w
  5596  00BB  00A1               	movwf	___wmul@multiplier+1
  5597  00BC  0851               	movf	sprintf@prec,w
  5598  00BD  00A0               	movwf	___wmul@multiplier
  5599  00BE  300A               	movlw	10
  5600  00BF  00A2               	movwf	___wmul@multiplicand
  5601  00C0  3000               	movlw	0
  5602  00C1  00A3               	movwf	___wmul@multiplicand+1
  5603  00C2  3188  2039  3180   	fcall	___wmul
  5604  00C5  0020               	movlb	0	; select bank0
  5605  00C6  0842               	movf	??_sprintf,w
  5606  00C7  0720               	addwf	?___wmul,w
  5607  00C8  00C4               	movwf	??_sprintf+2
  5608  00C9  0843               	movf	??_sprintf+1,w
  5609  00CA  3D21               	addwfc	?___wmul+1,w
  5610  00CB  00C5               	movwf	??_sprintf+3
  5611  00CC  0844               	movf	??_sprintf+2,w
  5612  00CD  3ED0               	addlw	208
  5613  00CE  00D1               	movwf	sprintf@prec
  5614  00CF  30FF               	movlw	255
  5615  00D0  3D45               	addwfc	??_sprintf+3,w
  5616  00D1  00D2               	movwf	sprintf@prec+1
  5617  00D2  3001               	movlw	1
  5618  00D3  07B8               	addwf	sprintf@f,f
  5619  00D4  3000               	movlw	0
  5620  00D5  3DB9               	addwfc	sprintf@f+1,f
  5621  00D6  28A8               	goto	l2463
  5622  00D7                     l2465:	
  5623                           ;doprnt.c: 643: };doprnt.c: 644: } else {
  5624                           
  5625                           
  5626                           ;doprnt.c: 645: prec = 0;
  5627  00D7  0020               	movlb	0	; select bank0
  5628  00D8  01D1               	clrf	sprintf@prec
  5629  00D9  01D2               	clrf	sprintf@prec+1
  5630                           
  5631                           ;doprnt.c: 654: switch(c = *f++) {
  5632                           
  5633                           ;doprnt.c: 649: };doprnt.c: 652: loop:
  5634  00DA  28E2               	goto	l2471
  5635  00DB                     l449:	
  5636                           ;doprnt.c: 660: case 'l':
  5637                           
  5638                           ;doprnt.c: 657: goto alldone;
  5639                           
  5640                           ;doprnt.c: 656: case 0:
  5641                           
  5642                           
  5643                           ;doprnt.c: 662: flag |= 0x10;
  5644  00DB  1648               	bsf	sprintf@flag,4
  5645                           
  5646                           ;doprnt.c: 663: goto loop;
  5647  00DC  28E2               	goto	l2471
  5648  00DD                     l2467:	
  5649                           ;doprnt.c: 836: case 'u':
  5650                           
  5651                           ;doprnt.c: 832: continue;
  5652                           
  5653                           ;doprnt.c: 821: default:
  5654                           
  5655                           
  5656                           ;doprnt.c: 837: flag |= 0xC0;
  5657  00DD  30C0               	movlw	192
  5658  00DE  00C2               	movwf	??_sprintf
  5659  00DF  0842               	movf	??_sprintf,w
  5660  00E0  04C8               	iorwf	sprintf@flag,f
  5661                           
  5662                           ;doprnt.c: 841: }
  5663                           
  5664                           ;doprnt.c: 838: break;
  5665  00E1  28FA               	goto	l452
  5666  00E2                     l2471:	
  5667  00E2  0020               	movlb	0	; select bank0
  5668  00E3  0839               	movf	sprintf@f+1,w
  5669  00E4  00C3               	movwf	??_sprintf+1
  5670  00E5  0838               	movf	sprintf@f,w
  5671  00E6  00C2               	movwf	??_sprintf
  5672  00E7  0AB8               	incf	sprintf@f,f
  5673  00E8  1903               	skipnz
  5674  00E9  0AB9               	incf	sprintf@f+1,f
  5675  00EA  0842               	movf	??_sprintf,w
  5676  00EB  0084               	movwf	4
  5677  00EC  0843               	movf	??_sprintf+1,w
  5678  00ED  0085               	movwf	5
  5679  00EE  0800               	movf	0,w	;code access
  5680  00EF  00D3               	movwf	sprintf@c
  5681                           
  5682                           ; Switch size 1, requested type "space"
  5683                           ; Number of cases is 3, Range of values is 0 to 117
  5684                           ; switch strategies available:
  5685                           ; Name         Instructions Cycles
  5686                           ; simple_byte           10     6 (average)
  5687                           ; direct_byte          242     6 (fixed)
  5688                           ; jumptable            260     6 (fixed)
  5689                           ;	Chosen strategy is simple_byte
  5690  00F0  3A00               	xorlw	0	; case 0
  5691  00F1  1903               	skipnz
  5692  00F2  29F9               	goto	l2529
  5693  00F3  3A6C               	xorlw	108	; case 108
  5694  00F4  1903               	skipnz
  5695  00F5  28DB               	goto	l449
  5696  00F6  3A19               	xorlw	25	; case 117
  5697  00F7  1903               	skipnz
  5698  00F8  28DD               	goto	l2467
  5699  00F9  2838               	goto	l2527
  5700  00FA                     l452:	
  5701                           
  5702                           ;doprnt.c: 1292: {;doprnt.c: 1300: if(flag & 0x10)
  5703  00FA  1E48               	btfss	sprintf@flag,4
  5704  00FB  2909               	goto	l2477
  5705                           
  5706                           ;doprnt.c: 1301: val = (*(unsigned long *)__va_arg((*(unsigned long **)ap), (unsigned lo
      +                          ng)0));
  5707  00FC  0849               	movf	sprintf@ap,w
  5708  00FD  0086               	movwf	6
  5709  00FE  0187               	clrf	7
  5710  00FF  3F40               	moviw [0]fsr1
  5711  0100  00CA               	movwf	sprintf@val
  5712  0101  3F41               	moviw [1]fsr1
  5713  0102  00CB               	movwf	sprintf@val+1
  5714  0103  3F42               	moviw [2]fsr1
  5715  0104  00CC               	movwf	sprintf@val+2
  5716  0105  3F43               	moviw [3]fsr1
  5717  0106  00CD               	movwf	sprintf@val+3
  5718  0107  3004               	movlw	4
  5719  0108  2917               	goto	L2
  5720  0109                     l2477:	
  5721                           
  5722                           ;doprnt.c: 1302: else;doprnt.c: 1305: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (
      +                          unsigned)0));
  5723  0109  0849               	movf	sprintf@ap,w
  5724  010A  0086               	movwf	6
  5725  010B  0187               	clrf	7
  5726  010C  3F40               	moviw [0]fsr1
  5727  010D  00C2               	movwf	??_sprintf
  5728  010E  3F41               	moviw [1]fsr1
  5729  010F  00C3               	movwf	??_sprintf+1
  5730  0110  0842               	movf	??_sprintf,w
  5731  0111  00CA               	movwf	sprintf@val
  5732  0112  0843               	movf	??_sprintf+1,w
  5733  0113  00CB               	movwf	sprintf@val+1
  5734  0114  01CC               	clrf	sprintf@val+2
  5735  0115  01CD               	clrf	sprintf@val+3
  5736  0116  3002               	movlw	2
  5737  0117                     L2:	
  5738  0117  00C2               	movwf	??_sprintf
  5739  0118  0842               	movf	??_sprintf,w
  5740  0119  07C9               	addwf	sprintf@ap,f
  5741                           
  5742                           ;doprnt.c: 1306: };doprnt.c: 1309: if(prec == 0 && val == 0)
  5743  011A  0851               	movf	sprintf@prec,w
  5744  011B  0452               	iorwf	sprintf@prec+1,w
  5745  011C  1D03               	btfss	3,2
  5746  011D  2928               	goto	l2487
  5747  011E  084D               	movf	sprintf@val+3,w
  5748  011F  044C               	iorwf	sprintf@val+2,w
  5749  0120  044B               	iorwf	sprintf@val+1,w
  5750  0121  044A               	iorwf	sprintf@val,w
  5751  0122  1D03               	skipz
  5752  0123  2928               	goto	l2487
  5753                           
  5754                           ;doprnt.c: 1310: prec++;
  5755  0124  3001               	movlw	1
  5756  0125  07D1               	addwf	sprintf@prec,f
  5757  0126  3000               	movlw	0
  5758  0127  3DD2               	addwfc	sprintf@prec+1,f
  5759  0128                     l2487:	
  5760                           
  5761                           ;doprnt.c: 1324: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  5762  0128  01D3               	clrf	sprintf@c
  5763  0129  0AD3               	incf	sprintf@c,f
  5764  012A  300A               	movlw	10
  5765  012B  0653               	xorwf	sprintf@c,w
  5766  012C  1903               	btfsc	3,2
  5767  012D  295B               	goto	l2499
  5768  012E                     l2493:	
  5769                           
  5770                           ;doprnt.c: 1325: if(val < dpowers[c])
  5771  012E  0853               	movf	sprintf@c,w
  5772  012F  00C2               	movwf	??_sprintf
  5773  0130  01C3               	clrf	??_sprintf+1
  5774  0131  35C2               	lslf	??_sprintf,f
  5775  0132  0DC3               	rlf	??_sprintf+1,f
  5776  0133  35C2               	lslf	??_sprintf,f
  5777  0134  0DC3               	rlf	??_sprintf+1,f
  5778  0135  3000               	movlw	low (_dpowers| (0+32768))
  5779  0136  0742               	addwf	??_sprintf,w
  5780  0137  0084               	movwf	4
  5781  0138  3090               	movlw	high (_dpowers| (0+32768))
  5782  0139  3D43               	addwfc	??_sprintf+1,w
  5783  013A  0085               	movwf	5
  5784  013B  3F00               	moviw [0]fsr0
  5785  013C  00C4               	movwf	??_sprintf+2
  5786  013D  3F01               	moviw [1]fsr0
  5787  013E  00C5               	movwf	??_sprintf+3
  5788  013F  3F02               	moviw [2]fsr0
  5789  0140  00C6               	movwf	??_sprintf+4
  5790  0141  3F03               	moviw [3]fsr0
  5791  0142  00C7               	movwf	??_sprintf+5
  5792  0143  0847               	movf	??_sprintf+5,w
  5793  0144  024D               	subwf	sprintf@val+3,w
  5794  0145  1D03               	skipz
  5795  0146  2951               	goto	u2335
  5796  0147  0846               	movf	??_sprintf+4,w
  5797  0148  024C               	subwf	sprintf@val+2,w
  5798  0149  1D03               	skipz
  5799  014A  2951               	goto	u2335
  5800  014B  0845               	movf	??_sprintf+3,w
  5801  014C  024B               	subwf	sprintf@val+1,w
  5802  014D  1D03               	skipz
  5803  014E  2951               	goto	u2335
  5804  014F  0844               	movf	??_sprintf+2,w
  5805  0150  024A               	subwf	sprintf@val,w
  5806  0151                     u2335:	
  5807  0151  1C03               	btfss	3,0
  5808  0152  295B               	goto	l2499
  5809                           
  5810                           ;doprnt.c: 1326: break;
  5811  0153  3001               	movlw	1
  5812  0154  00C2               	movwf	??_sprintf
  5813  0155  0842               	movf	??_sprintf,w
  5814  0156  07D3               	addwf	sprintf@c,f
  5815  0157  300A               	movlw	10
  5816  0158  0653               	xorwf	sprintf@c,w
  5817  0159  1D03               	btfss	3,2
  5818  015A  292E               	goto	l2493
  5819  015B                     l2499:	
  5820                           
  5821                           ;doprnt.c: 1358: if(c < prec)
  5822  015B  0852               	movf	sprintf@prec+1,w
  5823  015C  3A80               	xorlw	128
  5824  015D  3C80               	sublw	128
  5825  015E  1D03               	skipz
  5826  015F  2962               	goto	u2355
  5827  0160  0851               	movf	sprintf@prec,w
  5828  0161  0253               	subwf	sprintf@c,w
  5829  0162                     u2355:	
  5830  0162  1803               	skipnc
  5831  0163  296A               	goto	l2503
  5832                           
  5833                           ;doprnt.c: 1359: c = prec;
  5834  0164  0020               	movlb	0	; select bank0
  5835  0165  0851               	movf	sprintf@prec,w
  5836  0166  00C2               	movwf	??_sprintf
  5837  0167  0842               	movf	??_sprintf,w
  5838  0168  00D3               	movwf	sprintf@c
  5839  0169  297E               	goto	l460
  5840  016A                     l2503:	
  5841                           
  5842                           ;doprnt.c: 1360: else if(prec < c)
  5843  016A  0020               	movlb	0	; select bank0
  5844  016B  0852               	movf	sprintf@prec+1,w
  5845  016C  3A80               	xorlw	128
  5846  016D  00C2               	movwf	??_sprintf
  5847  016E  3080               	movlw	128
  5848  016F  0242               	subwf	??_sprintf,w
  5849  0170  1D03               	skipz
  5850  0171  2974               	goto	u2365
  5851  0172  0853               	movf	sprintf@c,w
  5852  0173  0251               	subwf	sprintf@prec,w
  5853  0174                     u2365:	
  5854  0174  1803               	skipnc
  5855  0175  297E               	goto	l460
  5856                           
  5857                           ;doprnt.c: 1361: prec = c;
  5858  0176  0020               	movlb	0	; select bank0
  5859  0177  0853               	movf	sprintf@c,w
  5860  0178  00C2               	movwf	??_sprintf
  5861  0179  01C3               	clrf	??_sprintf+1
  5862  017A  0842               	movf	??_sprintf,w
  5863  017B  00D1               	movwf	sprintf@prec
  5864  017C  0843               	movf	??_sprintf+1,w
  5865  017D  00D2               	movwf	sprintf@prec+1
  5866  017E                     l460:	
  5867                           
  5868                           ;doprnt.c: 1400: if(width > c)
  5869  017E  0020               	movlb	0	; select bank0
  5870  017F  0850               	movf	sprintf@width+1,w
  5871  0180  3A80               	xorlw	128
  5872  0181  3C80               	sublw	128
  5873  0182  1D03               	skipz
  5874  0183  2986               	goto	u2375
  5875  0184  084F               	movf	sprintf@width,w
  5876  0185  0253               	subwf	sprintf@c,w
  5877  0186                     u2375:	
  5878  0186  1803               	skipnc
  5879  0187  2991               	goto	l2509
  5880                           
  5881                           ;doprnt.c: 1401: width -= c;
  5882  0188  0020               	movlb	0	; select bank0
  5883  0189  0853               	movf	sprintf@c,w
  5884  018A  00C2               	movwf	??_sprintf
  5885  018B  01C3               	clrf	??_sprintf+1
  5886  018C  0842               	movf	??_sprintf,w
  5887  018D  02CF               	subwf	sprintf@width,f
  5888  018E  0843               	movf	??_sprintf+1,w
  5889  018F  3BD0               	subwfb	sprintf@width+1,f
  5890  0190  2994               	goto	l2511
  5891  0191                     l2509:	
  5892                           
  5893                           ;doprnt.c: 1402: else;doprnt.c: 1403: width = 0;
  5894  0191  0020               	movlb	0	; select bank0
  5895  0192  01CF               	clrf	sprintf@width
  5896  0193  01D0               	clrf	sprintf@width+1
  5897  0194                     l2511:	
  5898                           
  5899                           ;doprnt.c: 1441: {;doprnt.c: 1443: if(width;doprnt.c: 1447: )
  5900  0194  084F               	movf	sprintf@width,w
  5901  0195  0450               	iorwf	sprintf@width+1,w
  5902  0196  1903               	btfsc	3,2
  5903  0197  29EE               	goto	l2525
  5904                           
  5905                           ;doprnt.c: 1449: ((*sp++ = (' ')));
  5906                           
  5907                           ;doprnt.c: 1448: do
  5908  0198  3020               	movlw	32
  5909  0199  00C2               	movwf	??_sprintf
  5910  019A  084E               	movf	sprintf@sp,w
  5911  019B  0086               	movwf	6
  5912  019C  3001               	movlw	1	; select bank2/3
  5913  019D  0087               	movwf	7
  5914  019E  0842               	movf	??_sprintf,w
  5915  019F  0081               	movwf	1
  5916  01A0  3001               	movlw	1
  5917  01A1  00C2               	movwf	??_sprintf
  5918  01A2  0842               	movf	??_sprintf,w
  5919  01A3  07CE               	addwf	sprintf@sp,f
  5920                           
  5921                           ;doprnt.c: 1450: while(--width);
  5922  01A4  30FF               	movlw	255
  5923  01A5  07CF               	addwf	sprintf@width,f
  5924  01A6  30FF               	movlw	255
  5925  01A7  3DD0               	addwfc	sprintf@width+1,f
  5926  01A8  2994               	goto	l2511
  5927  01A9                     l2519:	
  5928                           ;doprnt.c: 1488: };doprnt.c: 1493: while(prec--) {
  5929                           
  5930                           
  5931                           ;doprnt.c: 1497: {;doprnt.c: 1508: c = (val / dpowers[prec]) % 10 + '0';
  5932  01A9  3000               	movlw	0
  5933  01AA  00B1               	movwf	___llmod@divisor+3
  5934  01AB  3000               	movlw	0
  5935  01AC  00B0               	movwf	___llmod@divisor+2
  5936  01AD  3000               	movlw	0
  5937  01AE  00AF               	movwf	___llmod@divisor+1
  5938  01AF  300A               	movlw	10
  5939  01B0  00AE               	movwf	___llmod@divisor
  5940  01B1  0852               	movf	sprintf@prec+1,w
  5941  01B2  0085               	movwf	5
  5942  01B3  0851               	movf	sprintf@prec,w
  5943  01B4  0084               	movwf	4
  5944  01B5  3584               	lslf	4,f
  5945  01B6  0D85               	rlf	5,f
  5946  01B7  3584               	lslf	4,f
  5947  01B8  0D85               	rlf	5,f
  5948  01B9  3000               	movlw	low (_dpowers| (0+32768))
  5949  01BA  0784               	addwf	4,f
  5950  01BB  3090               	movlw	high (_dpowers| (0+32768))
  5951  01BC  3D85               	addwfc	5,f
  5952  01BD  3F00               	moviw [0]fsr0
  5953  01BE  00A0               	movwf	___lldiv@divisor
  5954  01BF  3F01               	moviw [1]fsr0
  5955  01C0  00A1               	movwf	___lldiv@divisor+1
  5956  01C1  3F02               	moviw [2]fsr0
  5957  01C2  00A2               	movwf	___lldiv@divisor+2
  5958  01C3  3F03               	moviw [3]fsr0
  5959  01C4  00A3               	movwf	___lldiv@divisor+3
  5960  01C5  084D               	movf	sprintf@val+3,w
  5961  01C6  00A7               	movwf	___lldiv@dividend+3
  5962  01C7  084C               	movf	sprintf@val+2,w
  5963  01C8  00A6               	movwf	___lldiv@dividend+2
  5964  01C9  084B               	movf	sprintf@val+1,w
  5965  01CA  00A5               	movwf	___lldiv@dividend+1
  5966  01CB  084A               	movf	sprintf@val,w
  5967  01CC  00A4               	movwf	___lldiv@dividend
  5968  01CD  318C  244F  3180   	fcall	___lldiv
  5969  01D0  0020               	movlb	0	; select bank0
  5970  01D1  0823               	movf	?___lldiv+3,w
  5971  01D2  00B5               	movwf	___llmod@dividend+3
  5972  01D3  0822               	movf	?___lldiv+2,w
  5973  01D4  00B4               	movwf	___llmod@dividend+2
  5974  01D5  0821               	movf	?___lldiv+1,w
  5975  01D6  00B3               	movwf	___llmod@dividend+1
  5976  01D7  0820               	movf	?___lldiv,w
  5977  01D8  00B2               	movwf	___llmod@dividend
  5978  01D9  318A  22EE  3180   	fcall	___llmod
  5979  01DC  0020               	movlb	0	; select bank0
  5980  01DD  082E               	movf	?___llmod,w
  5981  01DE  3E30               	addlw	48
  5982  01DF  00C2               	movwf	??_sprintf
  5983  01E0  0842               	movf	??_sprintf,w
  5984  01E1  00D3               	movwf	sprintf@c
  5985                           
  5986                           ;doprnt.c: 1542: };doprnt.c: 1543: ((*sp++ = (c)));
  5987  01E2  0853               	movf	sprintf@c,w
  5988  01E3  00C2               	movwf	??_sprintf
  5989  01E4  084E               	movf	sprintf@sp,w
  5990  01E5  0086               	movwf	6
  5991  01E6  3001               	movlw	1	; select bank2/3
  5992  01E7  0087               	movwf	7
  5993  01E8  0842               	movf	??_sprintf,w
  5994  01E9  0081               	movwf	1
  5995  01EA  3001               	movlw	1
  5996  01EB  00C2               	movwf	??_sprintf
  5997  01EC  0842               	movf	??_sprintf,w
  5998  01ED  07CE               	addwf	sprintf@sp,f
  5999  01EE                     l2525:	
  6000  01EE  30FF               	movlw	255
  6001  01EF  07D1               	addwf	sprintf@prec,f
  6002  01F0  30FF               	movlw	255
  6003  01F1  3DD2               	addwfc	sprintf@prec+1,f
  6004  01F2  0A51               	incf	sprintf@prec,w
  6005  01F3  1D03               	skipz
  6006  01F4  29A9               	goto	l2519
  6007  01F5  0A52               	incf	sprintf@prec+1,w
  6008  01F6  1903               	btfsc	3,2
  6009  01F7  2838               	goto	l2527
  6010  01F8  29A9               	goto	l2519
  6011  01F9                     l2529:	
  6012                           ;doprnt.c: 1544: };doprnt.c: 1552: };doprnt.c: 1554: alldone:
  6013                           
  6014                           
  6015                           ;doprnt.c: 1557: *sp = 0;
  6016  01F9  084E               	movf	sprintf@sp,w
  6017  01FA  0086               	movwf	6
  6018  01FB  3001               	movlw	1	; select bank2/3
  6019  01FC  0087               	movwf	7
  6020  01FD  0181               	clrf	1
  6021  01FE  0008               	return
  6022  01FF                     __end_of_sprintf:	
  6023                           ;doprnt.c: 1559: return 0;;	Return value of _sprintf is never used
  6024                           
  6025                           
  6026                           	psect	text16
  6027  176A                     __ptext16:	
  6028 ;; *************** function _isdigit *****************
  6029 ;; Defined at:
  6030 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\isdigit.c"
  6031 ;; Parameters:    Size  Location     Type
  6032 ;;  c               1    wreg     unsigned char 
  6033 ;; Auto vars:     Size  Location     Type
  6034 ;;  c               1    1[BANK0 ] unsigned char 
  6035 ;; Return value:  Size  Location     Type
  6036 ;;		None               void
  6037 ;; Registers used:
  6038 ;;		wreg, status,2, status,0
  6039 ;; Tracked objects:
  6040 ;;		On entry : 0/0
  6041 ;;		On exit  : 0/0
  6042 ;;		Unchanged: 0/0
  6043 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6044 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6045 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6046 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6047 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6048 ;;Total ram usage:        2 bytes
  6049 ;; Hardware stack levels used:    1
  6050 ;; Hardware stack levels required when called:    7
  6051 ;; This function calls:
  6052 ;;		Nothing
  6053 ;; This function is called by:
  6054 ;;		_sprintf
  6055 ;; This function uses a non-reentrant model
  6056 ;;
  6057                           
  6058                           
  6059                           ;psect for function _isdigit
  6060  176A                     _isdigit:	
  6061                           
  6062                           ;incstack = 0
  6063                           ; Regs used in _isdigit: [wreg+status,2+status,0]
  6064                           ;isdigit@c stored from wreg
  6065  176A  0020               	movlb	0	; select bank0
  6066  176B  00A1               	movwf	isdigit@c
  6067  176C  01A0               	clrf	_isdigit$1797
  6068  176D  303A               	movlw	58
  6069  176E  0221               	subwf	isdigit@c,w
  6070  176F  1803               	skipnc
  6071  1770  2F77               	goto	l2283
  6072  1771  3030               	movlw	48
  6073  1772  0221               	subwf	isdigit@c,w
  6074  1773  1C03               	skipc
  6075  1774  2F77               	goto	l2283
  6076  1775  01A0               	clrf	_isdigit$1797
  6077  1776  0AA0               	incf	_isdigit$1797,f
  6078  1777                     l2283:	
  6079  1777  0C20               	rrf	_isdigit$1797,w
  6080  1778  0008               	return
  6081  1779                     __end_of_isdigit:	
  6082                           
  6083                           	psect	text17
  6084  0839                     __ptext17:	
  6085 ;; *************** function ___wmul *****************
  6086 ;; Defined at:
  6087 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\Umul16.c"
  6088 ;; Parameters:    Size  Location     Type
  6089 ;;  multiplier      2    0[BANK0 ] unsigned int 
  6090 ;;  multiplicand    2    2[BANK0 ] unsigned int 
  6091 ;; Auto vars:     Size  Location     Type
  6092 ;;  product         2    4[BANK0 ] unsigned int 
  6093 ;; Return value:  Size  Location     Type
  6094 ;;                  2    0[BANK0 ] unsigned int 
  6095 ;; Registers used:
  6096 ;;		wreg, status,2, status,0
  6097 ;; Tracked objects:
  6098 ;;		On entry : 0/0
  6099 ;;		On exit  : 0/0
  6100 ;;		Unchanged: 0/0
  6101 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6102 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6103 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6104 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6105 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6106 ;;Total ram usage:        6 bytes
  6107 ;; Hardware stack levels used:    1
  6108 ;; Hardware stack levels required when called:    7
  6109 ;; This function calls:
  6110 ;;		Nothing
  6111 ;; This function is called by:
  6112 ;;		_sprintf
  6113 ;; This function uses a non-reentrant model
  6114 ;;
  6115                           
  6116                           
  6117                           ;psect for function ___wmul
  6118  0839                     ___wmul:	
  6119                           
  6120                           ;incstack = 0
  6121                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  6122  0839  0020               	movlb	0	; select bank0
  6123  083A  01A4               	clrf	___wmul@product
  6124  083B  01A5               	clrf	___wmul@product+1
  6125  083C                     l2289:	
  6126  083C  1C20               	btfss	___wmul@multiplier,0
  6127  083D  2842               	goto	l475
  6128  083E  0822               	movf	___wmul@multiplicand,w
  6129  083F  07A4               	addwf	___wmul@product,f
  6130  0840  0823               	movf	___wmul@multiplicand+1,w
  6131  0841  3DA5               	addwfc	___wmul@product+1,f
  6132  0842                     l475:	
  6133  0842  3001               	movlw	1
  6134  0843                     u1855:	
  6135  0843  35A2               	lslf	___wmul@multiplicand,f
  6136  0844  0DA3               	rlf	___wmul@multiplicand+1,f
  6137  0845  0B89               	decfsz	9,f
  6138  0846  2843               	goto	u1855
  6139  0847  3001               	movlw	1
  6140  0848                     u1865:	
  6141  0848  36A1               	lsrf	___wmul@multiplier+1,f
  6142  0849  0CA0               	rrf	___wmul@multiplier,f
  6143  084A  0B89               	decfsz	9,f
  6144  084B  2848               	goto	u1865
  6145  084C  0820               	movf	___wmul@multiplier,w
  6146  084D  0421               	iorwf	___wmul@multiplier+1,w
  6147  084E  1D03               	btfss	3,2
  6148  084F  283C               	goto	l2289
  6149  0850  0825               	movf	___wmul@product+1,w
  6150  0851  00A1               	movwf	?___wmul+1
  6151  0852  0824               	movf	___wmul@product,w
  6152  0853  00A0               	movwf	?___wmul
  6153  0854  0008               	return
  6154  0855                     __end_of___wmul:	
  6155                           
  6156                           	psect	text18
  6157  0AEE                     __ptext18:	
  6158 ;; *************** function ___llmod *****************
  6159 ;; Defined at:
  6160 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\llmod.c"
  6161 ;; Parameters:    Size  Location     Type
  6162 ;;  divisor         4   14[BANK0 ] unsigned long 
  6163 ;;  dividend        4   18[BANK0 ] unsigned long 
  6164 ;; Auto vars:     Size  Location     Type
  6165 ;;  counter         1   23[BANK0 ] unsigned char 
  6166 ;; Return value:  Size  Location     Type
  6167 ;;                  4   14[BANK0 ] unsigned long 
  6168 ;; Registers used:
  6169 ;;		wreg, status,2, status,0
  6170 ;; Tracked objects:
  6171 ;;		On entry : 0/0
  6172 ;;		On exit  : 0/0
  6173 ;;		Unchanged: 0/0
  6174 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6175 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6176 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6177 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6178 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6179 ;;Total ram usage:       10 bytes
  6180 ;; Hardware stack levels used:    1
  6181 ;; Hardware stack levels required when called:    7
  6182 ;; This function calls:
  6183 ;;		Nothing
  6184 ;; This function is called by:
  6185 ;;		_sprintf
  6186 ;; This function uses a non-reentrant model
  6187 ;;
  6188                           
  6189                           
  6190                           ;psect for function ___llmod
  6191  0AEE                     ___llmod:	
  6192                           
  6193                           ;incstack = 0
  6194                           ; Regs used in ___llmod: [wreg+status,2+status,0]
  6195  0AEE  0020               	movlb	0	; select bank0
  6196  0AEF  0831               	movf	___llmod@divisor+3,w
  6197  0AF0  0430               	iorwf	___llmod@divisor+2,w
  6198  0AF1  042F               	iorwf	___llmod@divisor+1,w
  6199  0AF2  042E               	iorwf	___llmod@divisor,w
  6200  0AF3  1903               	skipnz
  6201  0AF4  2B28               	goto	l2411
  6202  0AF5  01B7               	clrf	___llmod@counter
  6203  0AF6  0AB7               	incf	___llmod@counter,f
  6204  0AF7                     l2401:	
  6205  0AF7  1BB1               	btfsc	___llmod@divisor+3,7
  6206  0AF8  2B05               	goto	l2403
  6207  0AF9  3001               	movlw	1
  6208  0AFA                     u2195:	
  6209  0AFA  35AE               	lslf	___llmod@divisor,f
  6210  0AFB  0DAF               	rlf	___llmod@divisor+1,f
  6211  0AFC  0DB0               	rlf	___llmod@divisor+2,f
  6212  0AFD  0DB1               	rlf	___llmod@divisor+3,f
  6213  0AFE  0B89               	decfsz	9,f
  6214  0AFF  2AFA               	goto	u2195
  6215  0B00  3001               	movlw	1
  6216  0B01  00B6               	movwf	??___llmod
  6217  0B02  0836               	movf	??___llmod,w
  6218  0B03  07B7               	addwf	___llmod@counter,f
  6219  0B04  2AF7               	goto	l2401
  6220  0B05                     l2403:	
  6221  0B05  0831               	movf	___llmod@divisor+3,w
  6222  0B06  0235               	subwf	___llmod@dividend+3,w
  6223  0B07  1D03               	skipz
  6224  0B08  2B13               	goto	u2215
  6225  0B09  0830               	movf	___llmod@divisor+2,w
  6226  0B0A  0234               	subwf	___llmod@dividend+2,w
  6227  0B0B  1D03               	skipz
  6228  0B0C  2B13               	goto	u2215
  6229  0B0D  082F               	movf	___llmod@divisor+1,w
  6230  0B0E  0233               	subwf	___llmod@dividend+1,w
  6231  0B0F  1D03               	skipz
  6232  0B10  2B13               	goto	u2215
  6233  0B11  082E               	movf	___llmod@divisor,w
  6234  0B12  0232               	subwf	___llmod@dividend,w
  6235  0B13                     u2215:	
  6236  0B13  1C03               	skipc
  6237  0B14  2B1D               	goto	l2407
  6238  0B15  082E               	movf	___llmod@divisor,w
  6239  0B16  02B2               	subwf	___llmod@dividend,f
  6240  0B17  082F               	movf	___llmod@divisor+1,w
  6241  0B18  3BB3               	subwfb	___llmod@dividend+1,f
  6242  0B19  0830               	movf	___llmod@divisor+2,w
  6243  0B1A  3BB4               	subwfb	___llmod@dividend+2,f
  6244  0B1B  0831               	movf	___llmod@divisor+3,w
  6245  0B1C  3BB5               	subwfb	___llmod@dividend+3,f
  6246  0B1D                     l2407:	
  6247  0B1D  3001               	movlw	1
  6248  0B1E                     u2225:	
  6249  0B1E  36B1               	lsrf	___llmod@divisor+3,f
  6250  0B1F  0CB0               	rrf	___llmod@divisor+2,f
  6251  0B20  0CAF               	rrf	___llmod@divisor+1,f
  6252  0B21  0CAE               	rrf	___llmod@divisor,f
  6253  0B22  0B89               	decfsz	9,f
  6254  0B23  2B1E               	goto	u2225
  6255  0B24  3001               	movlw	1
  6256  0B25  02B7               	subwf	___llmod@counter,f
  6257  0B26  1D03               	btfss	3,2
  6258  0B27  2B05               	goto	l2403
  6259  0B28                     l2411:	
  6260  0B28  0835               	movf	___llmod@dividend+3,w
  6261  0B29  00B1               	movwf	?___llmod+3
  6262  0B2A  0834               	movf	___llmod@dividend+2,w
  6263  0B2B  00B0               	movwf	?___llmod+2
  6264  0B2C  0833               	movf	___llmod@dividend+1,w
  6265  0B2D  00AF               	movwf	?___llmod+1
  6266  0B2E  0832               	movf	___llmod@dividend,w
  6267  0B2F  00AE               	movwf	?___llmod
  6268  0B30  0008               	return
  6269  0B31                     __end_of___llmod:	
  6270                           
  6271                           	psect	text19
  6272  0C4F                     __ptext19:	
  6273 ;; *************** function ___lldiv *****************
  6274 ;; Defined at:
  6275 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\__lldiv.c"
  6276 ;; Parameters:    Size  Location     Type
  6277 ;;  divisor         4    0[BANK0 ] unsigned long 
  6278 ;;  dividend        4    4[BANK0 ] unsigned long 
  6279 ;; Auto vars:     Size  Location     Type
  6280 ;;  quotient        4    9[BANK0 ] unsigned long 
  6281 ;;  counter         1   13[BANK0 ] unsigned char 
  6282 ;; Return value:  Size  Location     Type
  6283 ;;                  4    0[BANK0 ] unsigned long 
  6284 ;; Registers used:
  6285 ;;		wreg, status,2, status,0
  6286 ;; Tracked objects:
  6287 ;;		On entry : 0/0
  6288 ;;		On exit  : 0/0
  6289 ;;		Unchanged: 0/0
  6290 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6291 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6292 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6293 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6294 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6295 ;;Total ram usage:       14 bytes
  6296 ;; Hardware stack levels used:    1
  6297 ;; Hardware stack levels required when called:    7
  6298 ;; This function calls:
  6299 ;;		Nothing
  6300 ;; This function is called by:
  6301 ;;		_sprintf
  6302 ;; This function uses a non-reentrant model
  6303 ;;
  6304                           
  6305                           
  6306                           ;psect for function ___lldiv
  6307  0C4F                     ___lldiv:	
  6308                           
  6309                           ;incstack = 0
  6310                           ; Regs used in ___lldiv: [wreg+status,2+status,0]
  6311  0C4F  3000               	movlw	0
  6312  0C50  0020               	movlb	0	; select bank0
  6313  0C51  00AC               	movwf	___lldiv@quotient+3
  6314  0C52  3000               	movlw	0
  6315  0C53  00AB               	movwf	___lldiv@quotient+2
  6316  0C54  3000               	movlw	0
  6317  0C55  00AA               	movwf	___lldiv@quotient+1
  6318  0C56  3000               	movlw	0
  6319  0C57  00A9               	movwf	___lldiv@quotient
  6320  0C58  0823               	movf	___lldiv@divisor+3,w
  6321  0C59  0422               	iorwf	___lldiv@divisor+2,w
  6322  0C5A  0421               	iorwf	___lldiv@divisor+1,w
  6323  0C5B  0420               	iorwf	___lldiv@divisor,w
  6324  0C5C  1903               	skipnz
  6325  0C5D  2C99               	goto	l2321
  6326  0C5E  01AD               	clrf	___lldiv@counter
  6327  0C5F  0AAD               	incf	___lldiv@counter,f
  6328  0C60                     l2307:	
  6329  0C60  1BA3               	btfsc	___lldiv@divisor+3,7
  6330  0C61  2C6E               	goto	l2309
  6331  0C62  3001               	movlw	1
  6332  0C63                     u1895:	
  6333  0C63  35A0               	lslf	___lldiv@divisor,f
  6334  0C64  0DA1               	rlf	___lldiv@divisor+1,f
  6335  0C65  0DA2               	rlf	___lldiv@divisor+2,f
  6336  0C66  0DA3               	rlf	___lldiv@divisor+3,f
  6337  0C67  0B89               	decfsz	9,f
  6338  0C68  2C63               	goto	u1895
  6339  0C69  3001               	movlw	1
  6340  0C6A  00A8               	movwf	??___lldiv
  6341  0C6B  0828               	movf	??___lldiv,w
  6342  0C6C  07AD               	addwf	___lldiv@counter,f
  6343  0C6D  2C60               	goto	l2307
  6344  0C6E                     l2309:	
  6345  0C6E  3001               	movlw	1
  6346  0C6F                     u1915:	
  6347  0C6F  35A9               	lslf	___lldiv@quotient,f
  6348  0C70  0DAA               	rlf	___lldiv@quotient+1,f
  6349  0C71  0DAB               	rlf	___lldiv@quotient+2,f
  6350  0C72  0DAC               	rlf	___lldiv@quotient+3,f
  6351  0C73  0B89               	decfsz	9,f
  6352  0C74  2C6F               	goto	u1915
  6353  0C75  0823               	movf	___lldiv@divisor+3,w
  6354  0C76  0227               	subwf	___lldiv@dividend+3,w
  6355  0C77  1D03               	skipz
  6356  0C78  2C83               	goto	u1925
  6357  0C79  0822               	movf	___lldiv@divisor+2,w
  6358  0C7A  0226               	subwf	___lldiv@dividend+2,w
  6359  0C7B  1D03               	skipz
  6360  0C7C  2C83               	goto	u1925
  6361  0C7D  0821               	movf	___lldiv@divisor+1,w
  6362  0C7E  0225               	subwf	___lldiv@dividend+1,w
  6363  0C7F  1D03               	skipz
  6364  0C80  2C83               	goto	u1925
  6365  0C81  0820               	movf	___lldiv@divisor,w
  6366  0C82  0224               	subwf	___lldiv@dividend,w
  6367  0C83                     u1925:	
  6368  0C83  1C03               	skipc
  6369  0C84  2C8E               	goto	l2317
  6370  0C85  0820               	movf	___lldiv@divisor,w
  6371  0C86  02A4               	subwf	___lldiv@dividend,f
  6372  0C87  0821               	movf	___lldiv@divisor+1,w
  6373  0C88  3BA5               	subwfb	___lldiv@dividend+1,f
  6374  0C89  0822               	movf	___lldiv@divisor+2,w
  6375  0C8A  3BA6               	subwfb	___lldiv@dividend+2,f
  6376  0C8B  0823               	movf	___lldiv@divisor+3,w
  6377  0C8C  3BA7               	subwfb	___lldiv@dividend+3,f
  6378  0C8D  1429               	bsf	___lldiv@quotient,0
  6379  0C8E                     l2317:	
  6380  0C8E  3001               	movlw	1
  6381  0C8F                     u1935:	
  6382  0C8F  36A3               	lsrf	___lldiv@divisor+3,f
  6383  0C90  0CA2               	rrf	___lldiv@divisor+2,f
  6384  0C91  0CA1               	rrf	___lldiv@divisor+1,f
  6385  0C92  0CA0               	rrf	___lldiv@divisor,f
  6386  0C93  0B89               	decfsz	9,f
  6387  0C94  2C8F               	goto	u1935
  6388  0C95  3001               	movlw	1
  6389  0C96  02AD               	subwf	___lldiv@counter,f
  6390  0C97  1D03               	btfss	3,2
  6391  0C98  2C6E               	goto	l2309
  6392  0C99                     l2321:	
  6393  0C99  082C               	movf	___lldiv@quotient+3,w
  6394  0C9A  00A3               	movwf	?___lldiv+3
  6395  0C9B  082B               	movf	___lldiv@quotient+2,w
  6396  0C9C  00A2               	movwf	?___lldiv+2
  6397  0C9D  082A               	movf	___lldiv@quotient+1,w
  6398  0C9E  00A1               	movwf	?___lldiv+1
  6399  0C9F  0829               	movf	___lldiv@quotient,w
  6400  0CA0  00A0               	movwf	?___lldiv
  6401  0CA1  0008               	return
  6402  0CA2                     __end_of___lldiv:	
  6403                           
  6404                           	psect	text20
  6405  09A5                     __ptext20:	
  6406 ;; *************** function ___lltoft *****************
  6407 ;; Defined at:
  6408 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\lltoft.c"
  6409 ;; Parameters:    Size  Location     Type
  6410 ;;  c               4    8[BANK0 ] unsigned long 
  6411 ;; Auto vars:     Size  Location     Type
  6412 ;;  exp             1   13[BANK0 ] unsigned char 
  6413 ;; Return value:  Size  Location     Type
  6414 ;;                  3    8[BANK0 ] float 
  6415 ;; Registers used:
  6416 ;;		wreg, status,2, status,0, pclath, cstack
  6417 ;; Tracked objects:
  6418 ;;		On entry : 0/0
  6419 ;;		On exit  : 0/0
  6420 ;;		Unchanged: 0/0
  6421 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6422 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6423 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6424 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6425 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6426 ;;Total ram usage:        6 bytes
  6427 ;; Hardware stack levels used:    1
  6428 ;; Hardware stack levels required when called:    8
  6429 ;; This function calls:
  6430 ;;		___ftpack
  6431 ;; This function is called by:
  6432 ;;		_ftoa
  6433 ;; This function uses a non-reentrant model
  6434 ;;
  6435                           
  6436                           
  6437                           ;psect for function ___lltoft
  6438  09A5                     ___lltoft:	
  6439                           
  6440                           ;incstack = 0
  6441                           ; Regs used in ___lltoft: [wreg+status,2+status,0+pclath+cstack]
  6442  09A5  308E               	movlw	142
  6443  09A6  0020               	movlb	0	; select bank0
  6444  09A7  00AC               	movwf	??___lltoft
  6445  09A8  082C               	movf	??___lltoft,w
  6446  09A9  00AD               	movwf	___lltoft@exp
  6447  09AA                     l2679:	
  6448  09AA  30FF               	movlw	255
  6449  09AB  052B               	andwf	___lltoft@c+3,w
  6450  09AC  1903               	btfsc	3,2
  6451  09AD  29BA               	goto	l2681
  6452  09AE  3001               	movlw	1
  6453  09AF                     u2715:	
  6454  09AF  36AB               	lsrf	___lltoft@c+3,f
  6455  09B0  0CAA               	rrf	___lltoft@c+2,f
  6456  09B1  0CA9               	rrf	___lltoft@c+1,f
  6457  09B2  0CA8               	rrf	___lltoft@c,f
  6458  09B3  0B89               	decfsz	9,f
  6459  09B4  29AF               	goto	u2715
  6460  09B5  3001               	movlw	1
  6461  09B6  00AC               	movwf	??___lltoft
  6462  09B7  082C               	movf	??___lltoft,w
  6463  09B8  07AD               	addwf	___lltoft@exp,f
  6464  09B9  29AA               	goto	l2679
  6465  09BA                     l2681:	
  6466  09BA  0828               	movf	___lltoft@c,w
  6467  09BB  00A0               	movwf	___ftpack@arg
  6468  09BC  0829               	movf	___lltoft@c+1,w
  6469  09BD  00A1               	movwf	___ftpack@arg+1
  6470  09BE  082A               	movf	___lltoft@c+2,w
  6471  09BF  00A2               	movwf	___ftpack@arg+2
  6472  09C0  082D               	movf	___lltoft@exp,w
  6473  09C1  00AC               	movwf	??___lltoft
  6474  09C2  082C               	movf	??___lltoft,w
  6475  09C3  00A3               	movwf	___ftpack@exp
  6476  09C4  01A4               	clrf	___ftpack@sign
  6477  09C5  318C  24A2         	fcall	___ftpack
  6478  09C7  0020               	movlb	0	; select bank0
  6479  09C8  0820               	movf	?___ftpack,w
  6480  09C9  00A8               	movwf	?___lltoft
  6481  09CA  0821               	movf	?___ftpack+1,w
  6482  09CB  00A9               	movwf	?___lltoft+1
  6483  09CC  0822               	movf	?___ftpack+2,w
  6484  09CD  00AA               	movwf	?___lltoft+2
  6485  09CE  0008               	return
  6486  09CF                     __end_of___lltoft:	
  6487                           
  6488                           	psect	text21
  6489  0D6F                     __ptext21:	
  6490 ;; *************** function ___fttol *****************
  6491 ;; Defined at:
  6492 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\fttol.c"
  6493 ;; Parameters:    Size  Location     Type
  6494 ;;  f1              3   71[BANK0 ] float 
  6495 ;; Auto vars:     Size  Location     Type
  6496 ;;  lval            4    1[BANK1 ] unsigned long 
  6497 ;;  exp1            1    5[BANK1 ] unsigned char 
  6498 ;;  sign1           1    0[BANK1 ] unsigned char 
  6499 ;; Return value:  Size  Location     Type
  6500 ;;                  4   71[BANK0 ] long 
  6501 ;; Registers used:
  6502 ;;		wreg, status,2, status,0
  6503 ;; Tracked objects:
  6504 ;;		On entry : 0/0
  6505 ;;		On exit  : 0/0
  6506 ;;		Unchanged: 0/0
  6507 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6508 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6509 ;;      Locals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0
  6510 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6511 ;;      Totals:         0       8       6       0       0       0       0       0       0       0       0       0       
      +0       0
  6512 ;;Total ram usage:       14 bytes
  6513 ;; Hardware stack levels used:    1
  6514 ;; Hardware stack levels required when called:    7
  6515 ;; This function calls:
  6516 ;;		Nothing
  6517 ;; This function is called by:
  6518 ;;		_ftoa
  6519 ;; This function uses a non-reentrant model
  6520 ;;
  6521                           
  6522                           
  6523                           ;psect for function ___fttol
  6524  0D6F                     ___fttol:	
  6525                           
  6526                           ;incstack = 0
  6527                           ; Regs used in ___fttol: [wreg+status,2+status,0]
  6528  0D6F  0020               	movlb	0	; select bank0
  6529  0D70  0867               	movf	___fttol@f1,w
  6530  0D71  00EB               	movwf	??___fttol
  6531  0D72  0868               	movf	___fttol@f1+1,w
  6532  0D73  00EC               	movwf	??___fttol+1
  6533  0D74  0869               	movf	___fttol@f1+2,w
  6534  0D75  00ED               	movwf	??___fttol+2
  6535  0D76  1003               	clrc
  6536  0D77  0D6C               	rlf	??___fttol+1,w
  6537  0D78  0D6D               	rlf	??___fttol+2,w
  6538  0D79  00EE               	movwf	??___fttol+3
  6539  0D7A  086E               	movf	??___fttol+3,w
  6540  0D7B  0021               	movlb	1	; select bank1
  6541  0D7C  00A5               	movwf	___fttol@exp1^(0+128)
  6542  0D7D  0825               	movf	___fttol@exp1^(0+128),w
  6543  0D7E  1D03               	btfss	3,2
  6544  0D7F  2D8A               	goto	l2639
  6545  0D80  3000               	movlw	0
  6546  0D81  0020               	movlb	0	; select bank0
  6547  0D82  00EA               	movwf	?___fttol+3
  6548  0D83  3000               	movlw	0
  6549  0D84  00E9               	movwf	?___fttol+2
  6550  0D85  3000               	movlw	0
  6551  0D86  00E8               	movwf	?___fttol+1
  6552  0D87  3000               	movlw	0
  6553  0D88  00E7               	movwf	?___fttol
  6554  0D89  0008               	return
  6555  0D8A                     l2639:	
  6556  0D8A  0020               	movlb	0	; select bank0
  6557  0D8B  0867               	movf	___fttol@f1,w
  6558  0D8C  00EB               	movwf	??___fttol
  6559  0D8D  0868               	movf	___fttol@f1+1,w
  6560  0D8E  00EC               	movwf	??___fttol+1
  6561  0D8F  0869               	movf	___fttol@f1+2,w
  6562  0D90  00ED               	movwf	??___fttol+2
  6563  0D91  3017               	movlw	23
  6564  0D92                     u2625:	
  6565  0D92  36ED               	lsrf	??___fttol+2,f
  6566  0D93  0CEC               	rrf	??___fttol+1,f
  6567  0D94  0CEB               	rrf	??___fttol,f
  6568  0D95  0B89               	decfsz	9,f
  6569  0D96  2D92               	goto	u2625
  6570  0D97  086B               	movf	??___fttol,w
  6571  0D98  00EE               	movwf	??___fttol+3
  6572  0D99  086E               	movf	??___fttol+3,w
  6573  0D9A  0021               	movlb	1	; select bank1
  6574  0D9B  00A0               	movwf	___fttol@sign1^(0+128)
  6575  0D9C  0020               	movlb	0	; select bank0
  6576  0D9D  17E8               	bsf	___fttol@f1+1,7
  6577  0D9E  30FF               	movlw	255
  6578  0D9F  05E7               	andwf	___fttol@f1,f
  6579  0DA0  30FF               	movlw	255
  6580  0DA1  05E8               	andwf	___fttol@f1+1,f
  6581  0DA2  3000               	movlw	0
  6582  0DA3  05E9               	andwf	___fttol@f1+2,f
  6583  0DA4  0867               	movf	___fttol@f1,w
  6584  0DA5  0021               	movlb	1	; select bank1
  6585  0DA6  00A1               	movwf	___fttol@lval^(0+128)
  6586  0DA7  0020               	movlb	0	; select bank0
  6587  0DA8  0868               	movf	___fttol@f1+1,w
  6588  0DA9  0021               	movlb	1	; select bank1
  6589  0DAA  00A2               	movwf	(___fttol@lval^(0+128)+1)
  6590  0DAB  0020               	movlb	0	; select bank0
  6591  0DAC  0869               	movf	___fttol@f1+2,w
  6592  0DAD  0021               	movlb	1	; select bank1
  6593  0DAE  00A3               	movwf	(___fttol@lval^(0+128)+2)
  6594  0DAF  01A4               	clrf	(___fttol@lval^(0+128)+3)
  6595  0DB0  308E               	movlw	142
  6596  0DB1  02A5               	subwf	___fttol@exp1^(0+128),f
  6597  0DB2  1FA5               	btfss	___fttol@exp1^(0+128),7
  6598  0DB3  2DD4               	goto	l2659
  6599  0DB4  0825               	movf	___fttol@exp1^(0+128),w
  6600  0DB5  3A80               	xorlw	128
  6601  0DB6  3E8F               	addlw	143
  6602  0DB7  1803               	skipnc
  6603  0DB8  2DC3               	goto	l2657
  6604  0DB9  3000               	movlw	0
  6605  0DBA  0020               	movlb	0	; select bank0
  6606  0DBB  00EA               	movwf	?___fttol+3
  6607  0DBC  3000               	movlw	0
  6608  0DBD  00E9               	movwf	?___fttol+2
  6609  0DBE  3000               	movlw	0
  6610  0DBF  00E8               	movwf	?___fttol+1
  6611  0DC0  3000               	movlw	0
  6612  0DC1  00E7               	movwf	?___fttol
  6613  0DC2  0008               	return
  6614  0DC3                     l2657:	
  6615  0DC3  3001               	movlw	1
  6616  0DC4                     u2655:	
  6617  0DC4  0021               	movlb	1	; select bank1
  6618  0DC5  36A4               	lsrf	(___fttol@lval+3)^(0+128),f
  6619  0DC6  0CA3               	rrf	(___fttol@lval+2)^(0+128),f
  6620  0DC7  0CA2               	rrf	(___fttol@lval+1)^(0+128),f
  6621  0DC8  0CA1               	rrf	___fttol@lval^(0+128),f
  6622  0DC9  0B89               	decfsz	9,f
  6623  0DCA  2DC4               	goto	u2655
  6624  0DCB  3001               	movlw	1
  6625  0DCC  0020               	movlb	0	; select bank0
  6626  0DCD  00EB               	movwf	??___fttol
  6627  0DCE  086B               	movf	??___fttol,w
  6628  0DCF  0021               	movlb	1	; select bank1
  6629  0DD0  07A5               	addwf	___fttol@exp1^(0+128),f
  6630  0DD1  1903               	btfsc	3,2
  6631  0DD2  2DF0               	goto	l2667
  6632  0DD3  2DC3               	goto	l2657
  6633  0DD4                     l2659:	
  6634  0DD4  3018               	movlw	24
  6635  0DD5  0225               	subwf	___fttol@exp1^(0+128),w
  6636  0DD6  1C03               	skipc
  6637  0DD7  2DEC               	goto	l769
  6638  0DD8  3000               	movlw	0
  6639  0DD9  0020               	movlb	0	; select bank0
  6640  0DDA  00EA               	movwf	?___fttol+3
  6641  0DDB  3000               	movlw	0
  6642  0DDC  00E9               	movwf	?___fttol+2
  6643  0DDD  3000               	movlw	0
  6644  0DDE  00E8               	movwf	?___fttol+1
  6645  0DDF  3000               	movlw	0
  6646  0DE0  00E7               	movwf	?___fttol
  6647  0DE1  0008               	return
  6648  0DE2                     l2665:	
  6649  0DE2  3001               	movlw	1
  6650  0DE3                     u2685:	
  6651  0DE3  0021               	movlb	1	; select bank1
  6652  0DE4  35A1               	lslf	___fttol@lval^(0+128),f
  6653  0DE5  0DA2               	rlf	(___fttol@lval+1)^(0+128),f
  6654  0DE6  0DA3               	rlf	(___fttol@lval+2)^(0+128),f
  6655  0DE7  0DA4               	rlf	(___fttol@lval+3)^(0+128),f
  6656  0DE8  0B89               	decfsz	9,f
  6657  0DE9  2DE3               	goto	u2685
  6658  0DEA  3001               	movlw	1
  6659  0DEB  02A5               	subwf	___fttol@exp1^(0+128),f
  6660  0DEC                     l769:	
  6661  0DEC  0021               	movlb	1	; select bank1
  6662  0DED  0825               	movf	___fttol@exp1^(0+128),w
  6663  0DEE  1D03               	btfss	3,2
  6664  0DEF  2DE2               	goto	l2665
  6665  0DF0                     l2667:	
  6666  0DF0  0820               	movf	___fttol@sign1^(0+128),w
  6667  0DF1  1903               	btfsc	3,2
  6668  0DF2  2DFE               	goto	l2671
  6669  0DF3  09A1               	comf	___fttol@lval^(0+128),f
  6670  0DF4  09A2               	comf	(___fttol@lval+1)^(0+128),f
  6671  0DF5  09A3               	comf	(___fttol@lval+2)^(0+128),f
  6672  0DF6  09A4               	comf	(___fttol@lval+3)^(0+128),f
  6673  0DF7  0AA1               	incf	___fttol@lval^(0+128),f
  6674  0DF8  1903               	skipnz
  6675  0DF9  0AA2               	incf	(___fttol@lval+1)^(0+128),f
  6676  0DFA  1903               	skipnz
  6677  0DFB  0AA3               	incf	(___fttol@lval+2)^(0+128),f
  6678  0DFC  1903               	skipnz
  6679  0DFD  0AA4               	incf	(___fttol@lval+3)^(0+128),f
  6680  0DFE                     l2671:	
  6681  0DFE  0824               	movf	(___fttol@lval+3)^(0+128),w
  6682  0DFF  0020               	movlb	0	; select bank0
  6683  0E00  00EA               	movwf	?___fttol+3
  6684  0E01  0021               	movlb	1	; select bank1
  6685  0E02  0823               	movf	(___fttol@lval+2)^(0+128),w
  6686  0E03  0020               	movlb	0	; select bank0
  6687  0E04  00E9               	movwf	?___fttol+2
  6688  0E05  0021               	movlb	1	; select bank1
  6689  0E06  0822               	movf	(___fttol@lval+1)^(0+128),w
  6690  0E07  0020               	movlb	0	; select bank0
  6691  0E08  00E8               	movwf	?___fttol+1
  6692  0E09  0021               	movlb	1	; select bank1
  6693  0E0A  0821               	movf	___fttol@lval^(0+128),w
  6694  0E0B  0020               	movlb	0	; select bank0
  6695  0E0C  00E7               	movwf	?___fttol
  6696  0E0D  0008               	return
  6697  0E0E                     __end_of___fttol:	
  6698                           
  6699                           	psect	text22
  6700  088D                     __ptext22:	
  6701 ;; *************** function ___ftsub *****************
  6702 ;; Defined at:
  6703 ;;		line 17 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\ftsub.c"
  6704 ;; Parameters:    Size  Location     Type
  6705 ;;  f2              3   27[BANK0 ] float 
  6706 ;;  f1              3   30[BANK0 ] float 
  6707 ;; Auto vars:     Size  Location     Type
  6708 ;;		None
  6709 ;; Return value:  Size  Location     Type
  6710 ;;                  3   27[BANK0 ] float 
  6711 ;; Registers used:
  6712 ;;		wreg, status,2, status,0, pclath, cstack
  6713 ;; Tracked objects:
  6714 ;;		On entry : 0/0
  6715 ;;		On exit  : 0/0
  6716 ;;		Unchanged: 0/0
  6717 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6718 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6719 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6720 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6721 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6722 ;;Total ram usage:        6 bytes
  6723 ;; Hardware stack levels used:    1
  6724 ;; Hardware stack levels required when called:    9
  6725 ;; This function calls:
  6726 ;;		___ftadd
  6727 ;; This function is called by:
  6728 ;;		_ftoa
  6729 ;; This function uses a non-reentrant model
  6730 ;;
  6731                           
  6732                           
  6733                           ;psect for function ___ftsub
  6734  088D                     ___ftsub:	
  6735                           
  6736                           ;incstack = 0
  6737                           ; Regs used in ___ftsub: [wreg+status,2+status,0+pclath+cstack]
  6738  088D  0020               	movlb	0	; select bank0
  6739  088E  083D               	movf	___ftsub@f2+2,w
  6740  088F  043C               	iorwf	___ftsub@f2+1,w
  6741  0890  043B               	iorwf	___ftsub@f2,w
  6742  0891  1903               	skipnz
  6743  0892  2895               	goto	l2629
  6744  0893  3080               	movlw	128
  6745  0894  06BD               	xorwf	___ftsub@f2+2,f
  6746  0895                     l2629:	
  6747  0895  083E               	movf	___ftsub@f1,w
  6748  0896  00AE               	movwf	___ftadd@f1
  6749  0897  083F               	movf	___ftsub@f1+1,w
  6750  0898  00AF               	movwf	___ftadd@f1+1
  6751  0899  0840               	movf	___ftsub@f1+2,w
  6752  089A  00B0               	movwf	___ftadd@f1+2
  6753  089B  083B               	movf	___ftsub@f2,w
  6754  089C  00B1               	movwf	___ftadd@f2
  6755  089D  083C               	movf	___ftsub@f2+1,w
  6756  089E  00B2               	movwf	___ftadd@f2+1
  6757  089F  083D               	movf	___ftsub@f2+2,w
  6758  08A0  00B3               	movwf	___ftadd@f2+2
  6759  08A1  3184  2476         	fcall	___ftadd
  6760  08A3  0020               	movlb	0	; select bank0
  6761  08A4  082E               	movf	?___ftadd,w
  6762  08A5  00BB               	movwf	?___ftsub
  6763  08A6  082F               	movf	?___ftadd+1,w
  6764  08A7  00BC               	movwf	?___ftsub+1
  6765  08A8  0830               	movf	?___ftadd+2,w
  6766  08A9  00BD               	movwf	?___ftsub+2
  6767  08AA  0008               	return
  6768  08AB                     __end_of___ftsub:	
  6769                           
  6770                           	psect	text23
  6771  1754                     __ptext23:	
  6772 ;; *************** function ___ftneg *****************
  6773 ;; Defined at:
  6774 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\ftneg.c"
  6775 ;; Parameters:    Size  Location     Type
  6776 ;;  f1              3   55[BANK0 ] float 
  6777 ;; Auto vars:     Size  Location     Type
  6778 ;;		None
  6779 ;; Return value:  Size  Location     Type
  6780 ;;                  3   55[BANK0 ] float 
  6781 ;; Registers used:
  6782 ;;		wreg
  6783 ;; Tracked objects:
  6784 ;;		On entry : 0/0
  6785 ;;		On exit  : 0/0
  6786 ;;		Unchanged: 0/0
  6787 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6788 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6789 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6790 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6791 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6792 ;;Total ram usage:        3 bytes
  6793 ;; Hardware stack levels used:    1
  6794 ;; Hardware stack levels required when called:    7
  6795 ;; This function calls:
  6796 ;;		Nothing
  6797 ;; This function is called by:
  6798 ;;		_loop
  6799 ;;		_ftoa
  6800 ;; This function uses a non-reentrant model
  6801 ;;
  6802                           
  6803                           
  6804                           ;psect for function ___ftneg
  6805  1754                     ___ftneg:	
  6806                           
  6807                           ;incstack = 0
  6808                           ; Regs used in ___ftneg: [wreg]
  6809  1754  0020               	movlb	0	; select bank0
  6810  1755  0859               	movf	___ftneg@f1+2,w
  6811  1756  0458               	iorwf	___ftneg@f1+1,w
  6812  1757  0457               	iorwf	___ftneg@f1,w
  6813  1758  1903               	skipnz
  6814  1759  0008               	return
  6815  175A  3080               	movlw	128
  6816  175B  06D9               	xorwf	___ftneg@f1+2,f
  6817  175C  0008               	return
  6818  175D                     __end_of___ftneg:	
  6819                           
  6820                           	psect	text24
  6821  0726                     __ptext24:	
  6822 ;; *************** function ___ftmul *****************
  6823 ;; Defined at:
  6824 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\ftmul.c"
  6825 ;; Parameters:    Size  Location     Type
  6826 ;;  f1              3   55[BANK0 ] float 
  6827 ;;  f2              3   58[BANK0 ] float 
  6828 ;; Auto vars:     Size  Location     Type
  6829 ;;  f3_as_produc    3   66[BANK0 ] unsigned um
  6830 ;;  sign            1   70[BANK0 ] unsigned char 
  6831 ;;  cntr            1   69[BANK0 ] unsigned char 
  6832 ;;  exp             1   65[BANK0 ] unsigned char 
  6833 ;; Return value:  Size  Location     Type
  6834 ;;                  3   55[BANK0 ] float 
  6835 ;; Registers used:
  6836 ;;		wreg, status,2, status,0, pclath, cstack
  6837 ;; Tracked objects:
  6838 ;;		On entry : 0/0
  6839 ;;		On exit  : 0/0
  6840 ;;		Unchanged: 0/0
  6841 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6842 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6843 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6844 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6845 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6846 ;;Total ram usage:       16 bytes
  6847 ;; Hardware stack levels used:    1
  6848 ;; Hardware stack levels required when called:    8
  6849 ;; This function calls:
  6850 ;;		___ftpack
  6851 ;; This function is called by:
  6852 ;;		_loop
  6853 ;;		_ftoa
  6854 ;; This function uses a non-reentrant model
  6855 ;;
  6856                           
  6857                           
  6858                           ;psect for function ___ftmul
  6859  0726                     ___ftmul:	
  6860                           
  6861                           ;incstack = 0
  6862                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
  6863  0726  0020               	movlb	0	; select bank0
  6864  0727  0857               	movf	___ftmul@f1,w
  6865  0728  00DD               	movwf	??___ftmul
  6866  0729  0858               	movf	___ftmul@f1+1,w
  6867  072A  00DE               	movwf	??___ftmul+1
  6868  072B  0859               	movf	___ftmul@f1+2,w
  6869  072C  00DF               	movwf	??___ftmul+2
  6870  072D  1003               	clrc
  6871  072E  0D5E               	rlf	??___ftmul+1,w
  6872  072F  0D5F               	rlf	??___ftmul+2,w
  6873  0730  00E0               	movwf	??___ftmul+3
  6874  0731  0860               	movf	??___ftmul+3,w
  6875  0732  00E1               	movwf	___ftmul@exp
  6876  0733  0861               	movf	___ftmul@exp,w
  6877  0734  1D03               	btfss	3,2
  6878  0735  2F3D               	goto	l2573
  6879  0736  3000               	movlw	0
  6880  0737  00D7               	movwf	?___ftmul
  6881  0738  3000               	movlw	0
  6882  0739  00D8               	movwf	?___ftmul+1
  6883  073A  3000               	movlw	0
  6884  073B  00D9               	movwf	?___ftmul+2
  6885  073C  0008               	return
  6886  073D                     l2573:	
  6887  073D  085A               	movf	___ftmul@f2,w
  6888  073E  00DD               	movwf	??___ftmul
  6889  073F  085B               	movf	___ftmul@f2+1,w
  6890  0740  00DE               	movwf	??___ftmul+1
  6891  0741  085C               	movf	___ftmul@f2+2,w
  6892  0742  00DF               	movwf	??___ftmul+2
  6893  0743  1003               	clrc
  6894  0744  0D5E               	rlf	??___ftmul+1,w
  6895  0745  0D5F               	rlf	??___ftmul+2,w
  6896  0746  00E0               	movwf	??___ftmul+3
  6897  0747  0860               	movf	??___ftmul+3,w
  6898  0748  00E6               	movwf	___ftmul@sign
  6899  0749  0866               	movf	___ftmul@sign,w
  6900  074A  1D03               	btfss	3,2
  6901  074B  2F53               	goto	l2579
  6902  074C  3000               	movlw	0
  6903  074D  00D7               	movwf	?___ftmul
  6904  074E  3000               	movlw	0
  6905  074F  00D8               	movwf	?___ftmul+1
  6906  0750  3000               	movlw	0
  6907  0751  00D9               	movwf	?___ftmul+2
  6908  0752  0008               	return
  6909  0753                     l2579:	
  6910  0753  0866               	movf	___ftmul@sign,w
  6911  0754  3E7B               	addlw	123
  6912  0755  00DD               	movwf	??___ftmul
  6913  0756  085D               	movf	??___ftmul,w
  6914  0757  07E1               	addwf	___ftmul@exp,f
  6915  0758  0857               	movf	___ftmul@f1,w
  6916  0759  00DD               	movwf	??___ftmul
  6917  075A  0858               	movf	___ftmul@f1+1,w
  6918  075B  00DE               	movwf	??___ftmul+1
  6919  075C  0859               	movf	___ftmul@f1+2,w
  6920  075D  00DF               	movwf	??___ftmul+2
  6921  075E  3010               	movlw	16
  6922  075F                     u2495:	
  6923  075F  36DF               	lsrf	??___ftmul+2,f
  6924  0760  0CDE               	rrf	??___ftmul+1,f
  6925  0761  0CDD               	rrf	??___ftmul,f
  6926  0762  0B89               	decfsz	9,f
  6927  0763  2F5F               	goto	u2495
  6928  0764  085D               	movf	??___ftmul,w
  6929  0765  00E0               	movwf	??___ftmul+3
  6930  0766  0860               	movf	??___ftmul+3,w
  6931  0767  00E6               	movwf	___ftmul@sign
  6932  0768  085A               	movf	___ftmul@f2,w
  6933  0769  00DD               	movwf	??___ftmul
  6934  076A  085B               	movf	___ftmul@f2+1,w
  6935  076B  00DE               	movwf	??___ftmul+1
  6936  076C  085C               	movf	___ftmul@f2+2,w
  6937  076D  00DF               	movwf	??___ftmul+2
  6938  076E  3010               	movlw	16
  6939  076F                     u2505:	
  6940  076F  36DF               	lsrf	??___ftmul+2,f
  6941  0770  0CDE               	rrf	??___ftmul+1,f
  6942  0771  0CDD               	rrf	??___ftmul,f
  6943  0772  0B89               	decfsz	9,f
  6944  0773  2F6F               	goto	u2505
  6945  0774  085D               	movf	??___ftmul,w
  6946  0775  00E0               	movwf	??___ftmul+3
  6947  0776  0860               	movf	??___ftmul+3,w
  6948  0777  06E6               	xorwf	___ftmul@sign,f
  6949  0778  3080               	movlw	128
  6950  0779  00DD               	movwf	??___ftmul
  6951  077A  085D               	movf	??___ftmul,w
  6952  077B  05E6               	andwf	___ftmul@sign,f
  6953  077C  17D8               	bsf	___ftmul@f1+1,7
  6954  077D  17DB               	bsf	___ftmul@f2+1,7
  6955  077E  30FF               	movlw	255
  6956  077F  05DA               	andwf	___ftmul@f2,f
  6957  0780  30FF               	movlw	255
  6958  0781  05DB               	andwf	___ftmul@f2+1,f
  6959  0782  3000               	movlw	0
  6960  0783  05DC               	andwf	___ftmul@f2+2,f
  6961  0784  3000               	movlw	0
  6962  0785  00E2               	movwf	___ftmul@f3_as_product
  6963  0786  3000               	movlw	0
  6964  0787  00E3               	movwf	___ftmul@f3_as_product+1
  6965  0788  3000               	movlw	0
  6966  0789  00E4               	movwf	___ftmul@f3_as_product+2
  6967  078A  3007               	movlw	7
  6968  078B  00DD               	movwf	??___ftmul
  6969  078C  085D               	movf	??___ftmul,w
  6970  078D  00E5               	movwf	___ftmul@cntr
  6971  078E                     l2591:	
  6972  078E  1C57               	btfss	___ftmul@f1,0
  6973  078F  2F96               	goto	l2595
  6974  0790  085A               	movf	___ftmul@f2,w
  6975  0791  07E2               	addwf	___ftmul@f3_as_product,f
  6976  0792  085B               	movf	___ftmul@f2+1,w
  6977  0793  3DE3               	addwfc	___ftmul@f3_as_product+1,f
  6978  0794  085C               	movf	___ftmul@f2+2,w
  6979  0795  3DE4               	addwfc	___ftmul@f3_as_product+2,f
  6980  0796                     l2595:	
  6981  0796  3001               	movlw	1
  6982  0797                     u2525:	
  6983  0797  36D9               	lsrf	___ftmul@f1+2,f
  6984  0798  0CD8               	rrf	___ftmul@f1+1,f
  6985  0799  0CD7               	rrf	___ftmul@f1,f
  6986  079A  0B89               	decfsz	9,f
  6987  079B  2F97               	goto	u2525
  6988  079C  3001               	movlw	1
  6989  079D                     u2535:	
  6990  079D  35DA               	lslf	___ftmul@f2,f
  6991  079E  0DDB               	rlf	___ftmul@f2+1,f
  6992  079F  0DDC               	rlf	___ftmul@f2+2,f
  6993  07A0  0B89               	decfsz	9,f
  6994  07A1  2F9D               	goto	u2535
  6995  07A2  3001               	movlw	1
  6996  07A3  02E5               	subwf	___ftmul@cntr,f
  6997  07A4  1D03               	btfss	3,2
  6998  07A5  2F8E               	goto	l2591
  6999  07A6  3009               	movlw	9
  7000  07A7  00DD               	movwf	??___ftmul
  7001  07A8  085D               	movf	??___ftmul,w
  7002  07A9  00E5               	movwf	___ftmul@cntr
  7003  07AA                     l2603:	
  7004  07AA  1C57               	btfss	___ftmul@f1,0
  7005  07AB  2FB2               	goto	l2607
  7006  07AC  085A               	movf	___ftmul@f2,w
  7007  07AD  07E2               	addwf	___ftmul@f3_as_product,f
  7008  07AE  085B               	movf	___ftmul@f2+1,w
  7009  07AF  3DE3               	addwfc	___ftmul@f3_as_product+1,f
  7010  07B0  085C               	movf	___ftmul@f2+2,w
  7011  07B1  3DE4               	addwfc	___ftmul@f3_as_product+2,f
  7012  07B2                     l2607:	
  7013  07B2  3001               	movlw	1
  7014  07B3                     u2565:	
  7015  07B3  36D9               	lsrf	___ftmul@f1+2,f
  7016  07B4  0CD8               	rrf	___ftmul@f1+1,f
  7017  07B5  0CD7               	rrf	___ftmul@f1,f
  7018  07B6  0B89               	decfsz	9,f
  7019  07B7  2FB3               	goto	u2565
  7020  07B8  3001               	movlw	1
  7021  07B9                     u2575:	
  7022  07B9  36E4               	lsrf	___ftmul@f3_as_product+2,f
  7023  07BA  0CE3               	rrf	___ftmul@f3_as_product+1,f
  7024  07BB  0CE2               	rrf	___ftmul@f3_as_product,f
  7025  07BC  0B89               	decfsz	9,f
  7026  07BD  2FB9               	goto	u2575
  7027  07BE  3001               	movlw	1
  7028  07BF  02E5               	subwf	___ftmul@cntr,f
  7029  07C0  1D03               	btfss	3,2
  7030  07C1  2FAA               	goto	l2603
  7031  07C2  0862               	movf	___ftmul@f3_as_product,w
  7032  07C3  00A0               	movwf	___ftpack@arg
  7033  07C4  0863               	movf	___ftmul@f3_as_product+1,w
  7034  07C5  00A1               	movwf	___ftpack@arg+1
  7035  07C6  0864               	movf	___ftmul@f3_as_product+2,w
  7036  07C7  00A2               	movwf	___ftpack@arg+2
  7037  07C8  0861               	movf	___ftmul@exp,w
  7038  07C9  00DD               	movwf	??___ftmul
  7039  07CA  085D               	movf	??___ftmul,w
  7040  07CB  00A3               	movwf	___ftpack@exp
  7041  07CC  0866               	movf	___ftmul@sign,w
  7042  07CD  00DE               	movwf	??___ftmul+1
  7043  07CE  085E               	movf	??___ftmul+1,w
  7044  07CF  00A4               	movwf	___ftpack@sign
  7045  07D0  318C  24A2         	fcall	___ftpack
  7046  07D2  0020               	movlb	0	; select bank0
  7047  07D3  0820               	movf	?___ftpack,w
  7048  07D4  00D7               	movwf	?___ftmul
  7049  07D5  0821               	movf	?___ftpack+1,w
  7050  07D6  00D8               	movwf	?___ftmul+1
  7051  07D7  0822               	movf	?___ftpack+2,w
  7052  07D8  00D9               	movwf	?___ftmul+2
  7053  07D9  0008               	return
  7054  07DA                     __end_of___ftmul:	
  7055                           
  7056                           	psect	text25
  7057  0A34                     __ptext25:	
  7058 ;; *************** function ___ftge *****************
  7059 ;; Defined at:
  7060 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\ftge.c"
  7061 ;; Parameters:    Size  Location     Type
  7062 ;;  ff1             3    0[BANK0 ] float 
  7063 ;;  ff2             3    3[BANK0 ] float 
  7064 ;; Auto vars:     Size  Location     Type
  7065 ;;		None
  7066 ;; Return value:  Size  Location     Type
  7067 ;;		None               void
  7068 ;; Registers used:
  7069 ;;		wreg, status,2, status,0
  7070 ;; Tracked objects:
  7071 ;;		On entry : 0/0
  7072 ;;		On exit  : 0/0
  7073 ;;		Unchanged: 0/0
  7074 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7075 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7076 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7077 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7078 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7079 ;;Total ram usage:        9 bytes
  7080 ;; Hardware stack levels used:    1
  7081 ;; Hardware stack levels required when called:    7
  7082 ;; This function calls:
  7083 ;;		Nothing
  7084 ;; This function is called by:
  7085 ;;		_ftoa
  7086 ;; This function uses a non-reentrant model
  7087 ;;
  7088                           
  7089                           
  7090                           ;psect for function ___ftge
  7091  0A34                     ___ftge:	
  7092                           
  7093                           ;incstack = 0
  7094                           ; Regs used in ___ftge: [wreg+status,2+status,0]
  7095  0A34  0020               	movlb	0	; select bank0
  7096  0A35  1FA2               	btfss	___ftge@ff1+2,7
  7097  0A36  2A4B               	goto	l2551
  7098  0A37  0920               	comf	___ftge@ff1,w
  7099  0A38  00A6               	movwf	??___ftge
  7100  0A39  0921               	comf	___ftge@ff1+1,w
  7101  0A3A  00A7               	movwf	??___ftge+1
  7102  0A3B  0922               	comf	___ftge@ff1+2,w
  7103  0A3C  00A8               	movwf	??___ftge+2
  7104  0A3D  0AA6               	incf	??___ftge,f
  7105  0A3E  1903               	skipnz
  7106  0A3F  0AA7               	incf	??___ftge+1,f
  7107  0A40  1903               	skipnz
  7108  0A41  0AA8               	incf	??___ftge+2,f
  7109  0A42  3000               	movlw	0
  7110  0A43  0726               	addwf	??___ftge,w
  7111  0A44  00A0               	movwf	___ftge@ff1
  7112  0A45  3000               	movlw	0
  7113  0A46  3D27               	addwfc	??___ftge+1,w
  7114  0A47  00A1               	movwf	___ftge@ff1+1
  7115  0A48  3080               	movlw	128
  7116  0A49  3D28               	addwfc	??___ftge+2,w
  7117  0A4A  00A2               	movwf	___ftge@ff1+2
  7118  0A4B                     l2551:	
  7119  0A4B  1FA5               	btfss	___ftge@ff2+2,7
  7120  0A4C  2A61               	goto	l2555
  7121  0A4D  0923               	comf	___ftge@ff2,w
  7122  0A4E  00A6               	movwf	??___ftge
  7123  0A4F  0924               	comf	___ftge@ff2+1,w
  7124  0A50  00A7               	movwf	??___ftge+1
  7125  0A51  0925               	comf	___ftge@ff2+2,w
  7126  0A52  00A8               	movwf	??___ftge+2
  7127  0A53  0AA6               	incf	??___ftge,f
  7128  0A54  1903               	skipnz
  7129  0A55  0AA7               	incf	??___ftge+1,f
  7130  0A56  1903               	skipnz
  7131  0A57  0AA8               	incf	??___ftge+2,f
  7132  0A58  3000               	movlw	0
  7133  0A59  0726               	addwf	??___ftge,w
  7134  0A5A  00A3               	movwf	___ftge@ff2
  7135  0A5B  3000               	movlw	0
  7136  0A5C  3D27               	addwfc	??___ftge+1,w
  7137  0A5D  00A4               	movwf	___ftge@ff2+1
  7138  0A5E  3080               	movlw	128
  7139  0A5F  3D28               	addwfc	??___ftge+2,w
  7140  0A60  00A5               	movwf	___ftge@ff2+2
  7141  0A61                     l2555:	
  7142  0A61  3080               	movlw	128
  7143  0A62  06A2               	xorwf	___ftge@ff1+2,f
  7144  0A63  3080               	movlw	128
  7145  0A64  06A5               	xorwf	___ftge@ff2+2,f
  7146  0A65  0825               	movf	___ftge@ff2+2,w
  7147  0A66  0222               	subwf	___ftge@ff1+2,w
  7148  0A67  1D03               	skipz
  7149  0A68  0008               	return
  7150  0A69  0824               	movf	___ftge@ff2+1,w
  7151  0A6A  0221               	subwf	___ftge@ff1+1,w
  7152  0A6B  1D03               	skipz
  7153  0A6C  0008               	return
  7154  0A6D  0823               	movf	___ftge@ff2,w
  7155  0A6E  0220               	subwf	___ftge@ff1,w
  7156  0A6F  0008               	return
  7157  0A70                     __end_of___ftge:	
  7158                           
  7159                           	psect	text26
  7160  065E                     __ptext26:	
  7161 ;; *************** function _nrf24l01SendPacket *****************
  7162 ;; Defined at:
  7163 ;;		line 170 in file "nrf24l01.c"
  7164 ;; Parameters:    Size  Location     Type
  7165 ;;  Packet          2    7[BANK0 ] PTR struct .
  7166 ;;		 -> main@packet(33), loop@packet(33), 
  7167 ;; Auto vars:     Size  Location     Type
  7168 ;;  i               1   13[BANK0 ] unsigned char 
  7169 ;; Return value:  Size  Location     Type
  7170 ;;                  1    wreg      void 
  7171 ;; Registers used:
  7172 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7173 ;; Tracked objects:
  7174 ;;		On entry : 0/0
  7175 ;;		On exit  : 0/0
  7176 ;;		Unchanged: 0/0
  7177 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7178 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7179 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7180 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7181 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7182 ;;Total ram usage:        7 bytes
  7183 ;; Hardware stack levels used:    1
  7184 ;; Hardware stack levels required when called:   11
  7185 ;; This function calls:
  7186 ;;		_enableInterrupts
  7187 ;;		_nrf24l01CEHigh
  7188 ;;		_nrf24l01CELow
  7189 ;;		_nrf24l01ChangeTXPower
  7190 ;;		_nrf24l01SPIEnd
  7191 ;;		_nrf24l01SPISend
  7192 ;;		_nrf24l01SPIStart
  7193 ;;		_nrf24l01SetRXMode
  7194 ;;		_strlen
  7195 ;; This function is called by:
  7196 ;;		_loop
  7197 ;;		_main
  7198 ;;		_nrf24l01SendACK
  7199 ;; This function uses a non-reentrant model
  7200 ;;
  7201                           
  7202                           
  7203                           ;psect for function _nrf24l01SendPacket
  7204  065E                     _nrf24l01SendPacket:	
  7205                           
  7206                           ;nrf24l01.c: 172: TXPacket = Packet;
  7207                           
  7208                           ;incstack = 0
  7209                           ; Regs used in _nrf24l01SendPacket: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7210  065E  0020               	movlb	0	; select bank0
  7211  065F  0828               	movf	nrf24l01SendPacket@Packet+1,w
  7212  0660  0021               	movlb	1	; select bank1
  7213  0661  00EC               	movwf	(_TXPacket+1)^(0+128)
  7214  0662  0020               	movlb	0	; select bank0
  7215  0663  0827               	movf	nrf24l01SendPacket@Packet,w
  7216  0664  0021               	movlb	1	; select bank1
  7217  0665  00EB               	movwf	_TXPacket^(0+128)
  7218  0666                     l293:	
  7219                           ;nrf24l01.c: 175: unsigned char i;;nrf24l01.c: 179: RESEND:
  7220                           
  7221                           
  7222                           ;nrf24l01.c: 182: i = 0xFF;
  7223  0666  30FF               	movlw	255
  7224  0667  0020               	movlb	0	; select bank0
  7225  0668  00A9               	movwf	??_nrf24l01SendPacket
  7226  0669  0829               	movf	??_nrf24l01SendPacket,w
  7227  066A  00AD               	movwf	nrf24l01SendPacket@i
  7228  066B                     l2991:	
  7229                           ;nrf24l01.c: 183: while (nrf24l01.TXBusy){
  7230                           
  7231  066B  1C7D               	btfss	_nrf24l01,0	;volatile
  7232  066C  2E77               	goto	l297
  7233                           
  7234                           ;nrf24l01.c: 184: if (!--i) {
  7235  066D  3001               	movlw	1
  7236  066E  0020               	movlb	0	; select bank0
  7237  066F  02AD               	subwf	nrf24l01SendPacket@i,f
  7238  0670  1903               	btfsc	3,2
  7239  0671  2E66               	goto	l293
  7240                           
  7241                           ;nrf24l01.c: 186: };nrf24l01.c: 187: _delay((unsigned long)((100)*(32000000/4000000.0)))
      +                          ;
  7242                           
  7243                           ;nrf24l01.c: 185: goto RESEND;
  7244  0672  30A0               	movlw	160
  7245  0673                     u3407:	
  7246  0673  3200               	nop2
  7247  0674  0B89               	decfsz	9,f
  7248  0675  2E73               	goto	u3407
  7249  0676  2E6B               	goto	l2991
  7250  0677                     l297:	
  7251                           
  7252                           ;nrf24l01.c: 188: };nrf24l01.c: 191: nrf24l01.TXBusy = 1;
  7253  0677  147D               	bsf	_nrf24l01,0	;volatile
  7254                           
  7255                           ;nrf24l01.c: 194: enableInterrupts(0);
  7256  0678  3000               	movlw	0
  7257  0679  3197  2744  3186   	fcall	_enableInterrupts
  7258                           
  7259                           ;nrf24l01.c: 197: nrf24l01SetRXMode(0);
  7260  067C  3000               	movlw	0
  7261  067D  318B  2331  3186   	fcall	_nrf24l01SetRXMode
  7262                           
  7263                           ;nrf24l01.c: 200: nrf24l01SPIStart();
  7264  0680  3197  274C  3186   	fcall	_nrf24l01SPIStart
  7265                           
  7266                           ;nrf24l01.c: 203: nrf24l01SPISend((unsigned) 0b10110000);
  7267  0683  30B0               	movlw	176
  7268  0684  3197  275D  3186   	fcall	_nrf24l01SPISend
  7269                           
  7270                           ;nrf24l01.c: 205: nrf24l01SPISend(TXPacket->packetData.byte);
  7271  0687  0021               	movlb	1	; select bank1
  7272  0688  086B               	movf	_TXPacket^(0+128),w
  7273  0689  0086               	movwf	6
  7274  068A  086C               	movf	(_TXPacket+1)^(0+128),w
  7275  068B  0087               	movwf	7
  7276  068C  0801               	movf	1,w
  7277  068D  3197  275D  3186   	fcall	_nrf24l01SPISend
  7278                           
  7279                           ;nrf24l01.c: 208: for (i = 0; (i < strlen(TXPacket->Message)) && (i < sizeof(TXPacket->M
      +                          essage)); i++){
  7280  0690  0020               	movlb	0	; select bank0
  7281  0691  01AD               	clrf	nrf24l01SendPacket@i
  7282  0692  2EAC               	goto	l3003
  7283  0693                     l2999:	
  7284                           
  7285                           ;nrf24l01.c: 209: nrf24l01SPISend(TXPacket->Message[i]);
  7286  0693  082D               	movf	nrf24l01SendPacket@i,w
  7287  0694  3E01               	addlw	1
  7288  0695  00A9               	movwf	??_nrf24l01SendPacket
  7289  0696  3000               	movlw	0
  7290  0697  1803               	skipnc
  7291  0698  3001               	movlw	1
  7292  0699  00AA               	movwf	??_nrf24l01SendPacket+1
  7293  069A  0829               	movf	??_nrf24l01SendPacket,w
  7294  069B  0021               	movlb	1	; select bank1
  7295  069C  076B               	addwf	_TXPacket^(0+128),w
  7296  069D  0086               	movwf	6
  7297  069E  0020               	movlb	0	; select bank0
  7298  069F  082A               	movf	??_nrf24l01SendPacket+1,w
  7299  06A0  0021               	movlb	1	; select bank1
  7300  06A1  3D6C               	addwfc	(_TXPacket+1)^(0+128),w
  7301  06A2  0087               	movwf	7
  7302  06A3  0801               	movf	1,w
  7303  06A4  3197  275D  3186   	fcall	_nrf24l01SPISend
  7304  06A7  3001               	movlw	1
  7305  06A8  0020               	movlb	0	; select bank0
  7306  06A9  00A9               	movwf	??_nrf24l01SendPacket
  7307  06AA  0829               	movf	??_nrf24l01SendPacket,w
  7308  06AB  07AD               	addwf	nrf24l01SendPacket@i,f
  7309  06AC                     l3003:	
  7310  06AC  0021               	movlb	1	; select bank1
  7311  06AD  086B               	movf	_TXPacket^(0+128),w
  7312  06AE  3E01               	addlw	1
  7313  06AF  0020               	movlb	0	; select bank0
  7314  06B0  00A9               	movwf	??_nrf24l01SendPacket
  7315  06B1  3000               	movlw	0
  7316  06B2  0021               	movlb	1	; select bank1
  7317  06B3  3D6C               	addwfc	(_TXPacket+1)^(0+128),w
  7318  06B4  0020               	movlb	0	; select bank0
  7319  06B5  00AA               	movwf	??_nrf24l01SendPacket+1
  7320  06B6  0829               	movf	??_nrf24l01SendPacket,w
  7321  06B7  00A0               	movwf	strlen@s
  7322  06B8  082A               	movf	??_nrf24l01SendPacket+1,w
  7323  06B9  00A1               	movwf	strlen@s+1
  7324  06BA  3188  20AB  3186   	fcall	_strlen
  7325  06BD  0020               	movlb	0	; select bank0
  7326  06BE  082D               	movf	nrf24l01SendPacket@i,w
  7327  06BF  00AB               	movwf	??_nrf24l01SendPacket+2
  7328  06C0  01AC               	clrf	??_nrf24l01SendPacket+3
  7329  06C1  0821               	movf	?_strlen+1,w
  7330  06C2  022C               	subwf	??_nrf24l01SendPacket+3,w
  7331  06C3  1D03               	skipz
  7332  06C4  2EC7               	goto	u3075
  7333  06C5  0820               	movf	?_strlen,w
  7334  06C6  022B               	subwf	??_nrf24l01SendPacket+2,w
  7335  06C7                     u3075:	
  7336  06C7  1803               	skipnc
  7337  06C8  2ECD               	goto	l3007
  7338  06C9  3020               	movlw	32
  7339  06CA  022D               	subwf	nrf24l01SendPacket@i,w
  7340  06CB  1C03               	skipc
  7341  06CC  2E93               	goto	l2999
  7342  06CD                     l3007:	
  7343                           
  7344                           ;nrf24l01.c: 210: };nrf24l01.c: 213: nrf24l01SPIEnd();
  7345  06CD  3197  273D  3186   	fcall	_nrf24l01SPIEnd
  7346                           
  7347                           ;nrf24l01.c: 216: nrf24l01CEHigh();
  7348  06D0  3197  272E  3186   	fcall	_nrf24l01CEHigh
  7349                           
  7350                           ;nrf24l01.c: 217: _delay((unsigned long)((20)*(32000000/4000000.0)));
  7351  06D3  3035               	movlw	53
  7352  06D4                     u3417:	
  7353  06D4  0B89               	decfsz	9,f
  7354  06D5  2ED4               	goto	u3417
  7355  06D6  0000               	nop
  7356                           
  7357                           ;nrf24l01.c: 218: nrf24l01CELow();
  7358  06D7  3197  2731  3186   	fcall	_nrf24l01CELow
  7359                           
  7360                           ;nrf24l01.c: 221: enableInterrupts(1);
  7361  06DA  3001               	movlw	1
  7362  06DB  3197  2744  3186   	fcall	_enableInterrupts
  7363                           
  7364                           ;nrf24l01.c: 224: i = 0xFF;
  7365  06DE  30FF               	movlw	255
  7366  06DF  0020               	movlb	0	; select bank0
  7367  06E0  00A9               	movwf	??_nrf24l01SendPacket
  7368  06E1  0829               	movf	??_nrf24l01SendPacket,w
  7369  06E2  00AD               	movwf	nrf24l01SendPacket@i
  7370  06E3                     l3021:	
  7371                           ;nrf24l01.c: 225: while (nrf24l01.TXBusy){
  7372                           
  7373  06E3  1C7D               	btfss	_nrf24l01,0	;volatile
  7374  06E4  2EEF               	goto	l3023
  7375                           
  7376                           ;nrf24l01.c: 226: if (!--i) {
  7377  06E5  3001               	movlw	1
  7378  06E6  0020               	movlb	0	; select bank0
  7379  06E7  02AD               	subwf	nrf24l01SendPacket@i,f
  7380  06E8  1903               	btfsc	3,2
  7381  06E9  2E66               	goto	l293
  7382                           
  7383                           ;nrf24l01.c: 228: };nrf24l01.c: 229: _delay((unsigned long)((100)*(32000000/4000000.0)))
      +                          ;
  7384                           
  7385                           ;nrf24l01.c: 227: goto RESEND;
  7386  06EA  30A0               	movlw	160
  7387  06EB                     u3427:	
  7388  06EB  3200               	nop2
  7389  06EC  0B89               	decfsz	9,f
  7390  06ED  2EEB               	goto	u3427
  7391  06EE  2EE3               	goto	l3021
  7392  06EF                     l3023:	
  7393                           
  7394                           ;nrf24l01.c: 230: };nrf24l01.c: 234: i = 0xFF;
  7395  06EF  30FF               	movlw	255
  7396  06F0  0020               	movlb	0	; select bank0
  7397  06F1  00A9               	movwf	??_nrf24l01SendPacket
  7398  06F2  0829               	movf	??_nrf24l01SendPacket,w
  7399  06F3  00AD               	movwf	nrf24l01SendPacket@i
  7400  06F4                     l3033:	
  7401                           ;nrf24l01.c: 235: while (TXPacket->packetData.ACKRequest){
  7402                           
  7403  06F4  0021               	movlb	1	; select bank1
  7404  06F5  086B               	movf	_TXPacket^(0+128),w
  7405  06F6  0086               	movwf	6
  7406  06F7  086C               	movf	(_TXPacket+1)^(0+128),w
  7407  06F8  0087               	movwf	7
  7408  06F9  1D01               	btfss	1,2
  7409  06FA  0008               	return
  7410                           
  7411                           ;nrf24l01.c: 236: if (!--i) {
  7412  06FB  3001               	movlw	1
  7413  06FC  0020               	movlb	0	; select bank0
  7414  06FD  02AD               	subwf	nrf24l01SendPacket@i,f
  7415  06FE  1D03               	btfss	3,2
  7416  06FF  2F21               	goto	l3031
  7417                           
  7418                           ;nrf24l01.c: 237: _delay((unsigned long)((50000)*(32000000/4000000.0)));
  7419  0700  3003               	movlw	3
  7420  0701  0020               	movlb	0	; select bank0
  7421  0702  00AA               	movwf	??_nrf24l01SendPacket+1
  7422  0703  3008               	movlw	8
  7423  0704  00A9               	movwf	??_nrf24l01SendPacket
  7424  0705  3077               	movlw	119
  7425  0706                     u3437:	
  7426  0706  0B89               	decfsz	9,f
  7427  0707  2F06               	goto	u3437
  7428  0708  0BA9               	decfsz	??_nrf24l01SendPacket,f
  7429  0709  2F06               	goto	u3437
  7430  070A  0BAA               	decfsz	??_nrf24l01SendPacket+1,f
  7431  070B  2F06               	goto	u3437
  7432                           
  7433                           ;nrf24l01.c: 238: _delay((unsigned long)((50000)*(32000000/4000000.0)));
  7434  070C  3003               	movlw	3
  7435  070D  0020               	movlb	0	; select bank0
  7436  070E  00AA               	movwf	??_nrf24l01SendPacket+1
  7437  070F  3008               	movlw	8
  7438  0710  00A9               	movwf	??_nrf24l01SendPacket
  7439  0711  3077               	movlw	119
  7440  0712                     u3447:	
  7441  0712  0B89               	decfsz	9,f
  7442  0713  2F12               	goto	u3447
  7443  0714  0BA9               	decfsz	??_nrf24l01SendPacket,f
  7444  0715  2F12               	goto	u3447
  7445  0716  0BAA               	decfsz	??_nrf24l01SendPacket+1,f
  7446  0717  2F12               	goto	u3447
  7447                           
  7448                           ;nrf24l01.c: 239: nrf24l01ChangeTXPower(1);
  7449  0718  3001               	movlw	1
  7450  0719  0020               	movlb	0	; select bank0
  7451  071A  00A3               	movwf	nrf24l01ChangeTXPower@addPower
  7452  071B  3000               	movlw	0
  7453  071C  00A4               	movwf	nrf24l01ChangeTXPower@addPower+1
  7454  071D  318A  22AF  3186   	fcall	_nrf24l01ChangeTXPower
  7455                           
  7456                           ;nrf24l01.c: 240: goto RESEND;
  7457  0720  2E66               	goto	l293
  7458  0721                     l3031:	
  7459                           
  7460                           ;nrf24l01.c: 241: };nrf24l01.c: 242: _delay((unsigned long)((100)*(32000000/4000000.0)))
      +                          ;
  7461  0721  30A0               	movlw	160
  7462  0722                     u3457:	
  7463  0722  3200               	nop2
  7464  0723  0B89               	decfsz	9,f
  7465  0724  2F22               	goto	u3457
  7466  0725  2EF4               	goto	l3033
  7467  0726                     __end_of_nrf24l01SendPacket:	
  7468                           
  7469                           	psect	text27
  7470  08AB                     __ptext27:	
  7471 ;; *************** function _strlen *****************
  7472 ;; Defined at:
  7473 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\strlen.c"
  7474 ;; Parameters:    Size  Location     Type
  7475 ;;  s               2    0[BANK0 ] PTR const unsigned char 
  7476 ;;		 -> packet.Message(32), packet.Message(32), NULL(0), main@packet(33), 
  7477 ;;		 -> loop@packet(33), romDataMap(28), 
  7478 ;; Auto vars:     Size  Location     Type
  7479 ;;  cp              2    4[BANK0 ] PTR const unsigned char 
  7480 ;;		 -> packet.Message(32), packet.Message(32), NULL(0), main@packet(33), 
  7481 ;;		 -> loop@packet(33), romDataMap(28), 
  7482 ;; Return value:  Size  Location     Type
  7483 ;;                  2    0[BANK0 ] unsigned int 
  7484 ;; Registers used:
  7485 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  7486 ;; Tracked objects:
  7487 ;;		On entry : 0/0
  7488 ;;		On exit  : 0/0
  7489 ;;		Unchanged: 0/0
  7490 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7491 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7492 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7493 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7494 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7495 ;;Total ram usage:        6 bytes
  7496 ;; Hardware stack levels used:    1
  7497 ;; Hardware stack levels required when called:    7
  7498 ;; This function calls:
  7499 ;;		Nothing
  7500 ;; This function is called by:
  7501 ;;		_nrf24l01GetPipe
  7502 ;;		_nrf24l01SendPacket
  7503 ;; This function uses a non-reentrant model
  7504 ;;
  7505                           
  7506                           
  7507                           ;psect for function _strlen
  7508  08AB                     _strlen:	
  7509                           
  7510                           ;incstack = 0
  7511                           ; Regs used in _strlen: [wreg+fsr1l+fsr1h+status,2+status,0]
  7512  08AB  0020               	movlb	0	; select bank0
  7513  08AC  0821               	movf	strlen@s+1,w
  7514  08AD  00A5               	movwf	strlen@cp+1
  7515  08AE  0820               	movf	strlen@s,w
  7516  08AF  00A4               	movwf	strlen@cp
  7517  08B0                     l2797:	
  7518  08B0  0824               	movf	strlen@cp,w
  7519  08B1  0086               	movwf	6
  7520  08B2  0825               	movf	strlen@cp+1,w
  7521  08B3  0087               	movwf	7
  7522  08B4  0801               	movf	1,w
  7523  08B5  1903               	btfsc	3,2
  7524  08B6  28BC               	goto	l2799
  7525  08B7  3001               	movlw	1
  7526  08B8  07A4               	addwf	strlen@cp,f
  7527  08B9  3000               	movlw	0
  7528  08BA  3DA5               	addwfc	strlen@cp+1,f
  7529  08BB  28B0               	goto	l2797
  7530  08BC                     l2799:	
  7531  08BC  0920               	comf	strlen@s,w
  7532  08BD  00A2               	movwf	??_strlen
  7533  08BE  0921               	comf	strlen@s+1,w
  7534  08BF  00A3               	movwf	??_strlen+1
  7535  08C0  0AA2               	incf	??_strlen,f
  7536  08C1  1903               	skipnz
  7537  08C2  0AA3               	incf	??_strlen+1,f
  7538  08C3  0824               	movf	strlen@cp,w
  7539  08C4  0722               	addwf	??_strlen,w
  7540  08C5  00A0               	movwf	?_strlen
  7541  08C6  0825               	movf	strlen@cp+1,w
  7542  08C7  3D23               	addwfc	??_strlen+1,w
  7543  08C8  00A1               	movwf	?_strlen+1
  7544  08C9  0008               	return
  7545  08CA                     __end_of_strlen:	
  7546                           
  7547                           	psect	text28
  7548  0B31                     __ptext28:	
  7549 ;; *************** function _nrf24l01SetRXMode *****************
  7550 ;; Defined at:
  7551 ;;		line 54 in file "nrf24l01.c"
  7552 ;; Parameters:    Size  Location     Type
  7553 ;;  rxMode          1    wreg     unsigned char 
  7554 ;; Auto vars:     Size  Location     Type
  7555 ;;  rxMode          1    5[BANK0 ] unsigned char 
  7556 ;;  config          1    4[BANK0 ] struct .
  7557 ;; Return value:  Size  Location     Type
  7558 ;;                  1    wreg      void 
  7559 ;; Registers used:
  7560 ;;		wreg, status,2, status,0, pclath, cstack
  7561 ;; Tracked objects:
  7562 ;;		On entry : 0/0
  7563 ;;		On exit  : 0/0
  7564 ;;		Unchanged: 0/0
  7565 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7566 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7567 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7568 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7569 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7570 ;;Total ram usage:        3 bytes
  7571 ;; Hardware stack levels used:    1
  7572 ;; Hardware stack levels required when called:   10
  7573 ;; This function calls:
  7574 ;;		_nrf24l01CEHigh
  7575 ;;		_nrf24l01CELow
  7576 ;;		_nrf24l01Send
  7577 ;; This function is called by:
  7578 ;;		_nrf24l01SendPacket
  7579 ;;		_checkRxData
  7580 ;; This function uses a non-reentrant model
  7581 ;;
  7582                           
  7583                           
  7584                           ;psect for function _nrf24l01SetRXMode
  7585  0B31                     _nrf24l01SetRXMode:	
  7586                           
  7587                           ;incstack = 0
  7588                           ; Regs used in _nrf24l01SetRXMode: [wreg+status,2+status,0+pclath+cstack]
  7589                           ;nrf24l01SetRXMode@rxMode stored from wreg
  7590  0B31  0020               	movlb	0	; select bank0
  7591  0B32  00A5               	movwf	nrf24l01SetRXMode@rxMode
  7592                           
  7593                           ;nrf24l01.c: 56: n_CONFIG_t config;;nrf24l01.c: 59: config.byte = nrf24l01Send((unsigned
      +                          ) 0b00000000 | (unsigned) 0x00, 0);
  7594  0B33  01A0               	clrf	nrf24l01Send@data
  7595  0B34  3000               	movlw	0
  7596  0B35  3188  20CA  318B   	fcall	_nrf24l01Send
  7597  0B38  0020               	movlb	0	; select bank0
  7598  0B39  00A3               	movwf	??_nrf24l01SetRXMode
  7599  0B3A  0823               	movf	??_nrf24l01SetRXMode,w
  7600  0B3B  00A4               	movwf	nrf24l01SetRXMode@config
  7601                           
  7602                           ;nrf24l01.c: 62: if (config.PRIM_RX != rxMode){
  7603  0B3C  0824               	movf	nrf24l01SetRXMode@config,w
  7604  0B3D  3901               	andlw	1
  7605  0B3E  0625               	xorwf	nrf24l01SetRXMode@rxMode,w
  7606  0B3F  1903               	skipnz
  7607  0B40  2B6E               	goto	l2731
  7608                           
  7609                           ;nrf24l01.c: 65: nrf24l01CELow();
  7610  0B41  3197  2731  318B   	fcall	_nrf24l01CELow
  7611                           
  7612                           ;nrf24l01.c: 66: _delay((unsigned long)((200)*(32000000/4000000.0)));
  7613  0B44  30E4               	movlw	228
  7614  0B45                     u3467:	
  7615  0B45  3200               	nop2
  7616  0B46  3200               	nop2
  7617  0B47  0B89               	decfsz	9,f
  7618  0B48  2B45               	goto	u3467
  7619  0B49  3200               	nop2
  7620  0B4A  3200               	nop2
  7621                           
  7622                           ;nrf24l01.c: 69: config.PRIM_RX = rxMode;
  7623  0B4B  0020               	movlb	0	; select bank0
  7624  0B4C  0825               	movf	nrf24l01SetRXMode@rxMode,w
  7625  0B4D  3901               	andlw	1
  7626  0B4E  1024               	bcf	nrf24l01SetRXMode@config,0
  7627  0B4F  1D03               	skipz
  7628  0B50  1424               	bsf	nrf24l01SetRXMode@config,0
  7629                           
  7630                           ;nrf24l01.c: 70: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x00, config.byte);
  7631  0B51  0824               	movf	nrf24l01SetRXMode@config,w
  7632  0B52  00A3               	movwf	??_nrf24l01SetRXMode
  7633  0B53  0823               	movf	??_nrf24l01SetRXMode,w
  7634  0B54  00A0               	movwf	nrf24l01Send@data
  7635  0B55  3020               	movlw	32
  7636  0B56  3188  20CA  318B   	fcall	_nrf24l01Send
  7637                           
  7638                           ;nrf24l01.c: 73: _delay((unsigned long)((200)*(32000000/4000000.0)));
  7639  0B59  30E4               	movlw	228
  7640  0B5A                     u3477:	
  7641  0B5A  3200               	nop2
  7642  0B5B  3200               	nop2
  7643  0B5C  0B89               	decfsz	9,f
  7644  0B5D  2B5A               	goto	u3477
  7645  0B5E  3200               	nop2
  7646  0B5F  3200               	nop2
  7647                           
  7648                           ;nrf24l01.c: 76: if (rxMode){
  7649  0B60  0020               	movlb	0	; select bank0
  7650  0B61  0825               	movf	nrf24l01SetRXMode@rxMode,w
  7651  0B62  1903               	btfsc	3,2
  7652  0B63  2B6E               	goto	l2731
  7653                           
  7654                           ;nrf24l01.c: 77: nrf24l01CEHigh();
  7655  0B64  3197  272E  318B   	fcall	_nrf24l01CEHigh
  7656                           
  7657                           ;nrf24l01.c: 78: _delay((unsigned long)((200)*(32000000/4000000.0)));
  7658  0B67  30E4               	movlw	228
  7659  0B68                     u3487:	
  7660  0B68  3200               	nop2
  7661  0B69  3200               	nop2
  7662  0B6A  0B89               	decfsz	9,f
  7663  0B6B  2B68               	goto	u3487
  7664  0B6C  3200               	nop2
  7665  0B6D  3200               	nop2
  7666  0B6E                     l2731:	
  7667                           
  7668                           ;nrf24l01.c: 79: };nrf24l01.c: 80: };nrf24l01.c: 83: nrf24l01.RXMode = rxMode;
  7669  0B6E  0020               	movlb	0	; select bank0
  7670  0B6F  0825               	movf	nrf24l01SetRXMode@rxMode,w
  7671  0B70  3901               	andlw	1
  7672  0B71  117D               	bcf	_nrf24l01,2	;volatile
  7673  0B72  1D03               	skipz
  7674  0B73  157D               	bsf	_nrf24l01,2	;volatile
  7675  0B74  0008               	return
  7676  0B75                     __end_of_nrf24l01SetRXMode:	
  7677                           
  7678                           	psect	text29
  7679  0EB2                     __ptext29:	
  7680 ;; *************** function _getADCValue *****************
  7681 ;; Defined at:
  7682 ;;		line 43 in file "main.c"
  7683 ;; Parameters:    Size  Location     Type
  7684 ;;  channel         1    wreg     unsigned char 
  7685 ;; Auto vars:     Size  Location     Type
  7686 ;;  channel         1   51[BANK0 ] unsigned char 
  7687 ;;  adcSum          3   52[BANK0 ] float 
  7688 ;;  adcLoop         2   49[BANK0 ] unsigned int 
  7689 ;; Return value:  Size  Location     Type
  7690 ;;                  3   43[BANK0 ] float 
  7691 ;; Registers used:
  7692 ;;		wreg, status,2, status,0, pclath, cstack
  7693 ;; Tracked objects:
  7694 ;;		On entry : 0/0
  7695 ;;		On exit  : 0/0
  7696 ;;		Unchanged: 0/0
  7697 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7698 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7699 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7700 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7701 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7702 ;;Total ram usage:       12 bytes
  7703 ;; Hardware stack levels used:    1
  7704 ;; Hardware stack levels required when called:    9
  7705 ;; This function calls:
  7706 ;;		___awtoft
  7707 ;;		___ftadd
  7708 ;;		___ftdiv
  7709 ;;		_sleep
  7710 ;; This function is called by:
  7711 ;;		_loop
  7712 ;; This function uses a non-reentrant model
  7713 ;;
  7714                           
  7715                           
  7716                           ;psect for function _getADCValue
  7717  0EB2                     _getADCValue:	
  7718                           
  7719                           ;incstack = 0
  7720                           ; Regs used in _getADCValue: [wreg+status,2+status,0+pclath+cstack]
  7721                           ;getADCValue@channel stored from wreg
  7722  0EB2  0020               	movlb	0	; select bank0
  7723  0EB3  00D3               	movwf	getADCValue@channel
  7724                           
  7725                           ;main.c: 46: float adcSum = 0;
  7726  0EB4  3000               	movlw	0
  7727  0EB5  00D4               	movwf	getADCValue@adcSum
  7728  0EB6  3000               	movlw	0
  7729  0EB7  00D5               	movwf	getADCValue@adcSum+1
  7730  0EB8  3000               	movlw	0
  7731  0EB9  00D6               	movwf	getADCValue@adcSum+2
  7732                           
  7733                           ;main.c: 47: unsigned int adcLoop = 1000;
  7734  0EBA  30E8               	movlw	232
  7735  0EBB  00D1               	movwf	getADCValue@adcLoop
  7736  0EBC  3003               	movlw	3
  7737  0EBD  00D2               	movwf	getADCValue@adcLoop+1
  7738                           
  7739                           ;main.c: 49: ADCON0bits.CHS = channel;
  7740  0EBE  0853               	movf	getADCValue@channel,w
  7741  0EBF  00CE               	movwf	??_getADCValue
  7742  0EC0  0DCE               	rlf	??_getADCValue,f
  7743  0EC1  0DCE               	rlf	??_getADCValue,f
  7744  0EC2  0021               	movlb	1	; select bank1
  7745  0EC3  081D               	movf	29,w	;volatile
  7746  0EC4  0020               	movlb	0	; select bank0
  7747  0EC5  064E               	xorwf	??_getADCValue,w
  7748  0EC6  3903               	andlw	-253
  7749  0EC7  064E               	xorwf	??_getADCValue,w
  7750  0EC8  0021               	movlb	1	; select bank1
  7751  0EC9  009D               	movwf	29	;volatile
  7752                           
  7753                           ;main.c: 50: FVRCONbits.FVREN = 1;
  7754  0ECA  0022               	movlb	2	; select bank2
  7755  0ECB  1797               	bsf	23,7	;volatile
  7756                           
  7757                           ;main.c: 51: ADCON0bits.ADON = 1;
  7758  0ECC  0021               	movlb	1	; select bank1
  7759  0ECD  141D               	bsf	29,0	;volatile
  7760                           
  7761                           ;main.c: 53: sleep(0);
  7762  0ECE  3000               	movlw	0
  7763  0ECF  3188  201E  318E   	fcall	_sleep
  7764                           
  7765                           ;main.c: 55: counter = 0;
  7766  0ED2  3000               	movlw	0
  7767  0ED3  0021               	movlb	1	; select bank1
  7768  0ED4  00EA               	movwf	(_counter+3)^(0+128)
  7769  0ED5  3000               	movlw	0
  7770  0ED6  00E9               	movwf	(_counter+2)^(0+128)
  7771  0ED7  3000               	movlw	0
  7772  0ED8  00E8               	movwf	(_counter+1)^(0+128)
  7773  0ED9  3000               	movlw	0
  7774  0EDA  00E7               	movwf	_counter^(0+128)
  7775  0EDB                     l2957:	
  7776                           ;main.c: 57: while (adcLoop--){
  7777                           
  7778  0EDB  3001               	movlw	1
  7779  0EDC  0020               	movlb	0	; select bank0
  7780  0EDD  02D1               	subwf	getADCValue@adcLoop,f
  7781  0EDE  3000               	movlw	0
  7782  0EDF  3BD2               	subwfb	getADCValue@adcLoop+1,f
  7783  0EE0  0A51               	incf	getADCValue@adcLoop,w
  7784  0EE1  1903               	btfsc	3,2
  7785  0EE2  0A52               	incf	getADCValue@adcLoop+1,w
  7786  0EE3  1903               	btfsc	3,2
  7787  0EE4  2F20               	goto	l180
  7788                           
  7789                           ;main.c: 59: counter++;
  7790  0EE5  3001               	movlw	1
  7791  0EE6  0021               	movlb	1	; select bank1
  7792  0EE7  07E7               	addwf	_counter^(0+128),f
  7793  0EE8  3000               	movlw	0
  7794  0EE9  3DE8               	addwfc	(_counter+1)^(0+128),f
  7795  0EEA  3000               	movlw	0
  7796  0EEB  3DE9               	addwfc	(_counter+2)^(0+128),f
  7797  0EEC  3000               	movlw	0
  7798  0EED  3DEA               	addwfc	(_counter+3)^(0+128),f
  7799                           
  7800                           ;main.c: 61: ADCON0bits.ADGO = 1;
  7801  0EEE  149D               	bsf	29,1	;volatile
  7802  0EEF                     l2953:	
  7803                           ;main.c: 63: while (ADCON0bits.ADGO){
  7804                           
  7805  0EEF  0021               	movlb	1	; select bank1
  7806  0EF0  1C9D               	btfss	29,1	;volatile
  7807  0EF1  2EF7               	goto	l2955
  7808                           
  7809                           ;main.c: 64: sleep(0);
  7810  0EF2  3000               	movlw	0
  7811  0EF3  3188  201E  318E   	fcall	_sleep
  7812  0EF6  2EEF               	goto	l2953
  7813  0EF7                     l2955:	
  7814                           
  7815                           ;main.c: 65: };main.c: 67: adcSum+= (ADRESL | (ADRESH << 8));
  7816  0EF7  081C               	movf	28,w	;volatile
  7817  0EF8  0020               	movlb	0	; select bank0
  7818  0EF9  00CE               	movwf	??_getADCValue
  7819  0EFA  01CF               	clrf	??_getADCValue+1
  7820  0EFB  084E               	movf	??_getADCValue,w
  7821  0EFC  00CF               	movwf	??_getADCValue+1
  7822  0EFD  01CE               	clrf	??_getADCValue
  7823  0EFE  084E               	movf	??_getADCValue,w
  7824  0EFF  0021               	movlb	1	; select bank1
  7825  0F00  041B               	iorwf	27,w	;volatile
  7826  0F01  0020               	movlb	0	; select bank0
  7827  0F02  00A8               	movwf	___awtoft@c
  7828  0F03  084F               	movf	??_getADCValue+1,w
  7829  0F04  00A9               	movwf	___awtoft@c+1
  7830  0F05  3189  210B  318E   	fcall	___awtoft
  7831  0F08  0020               	movlb	0	; select bank0
  7832  0F09  0828               	movf	?___awtoft,w
  7833  0F0A  00AE               	movwf	___ftadd@f1
  7834  0F0B  0829               	movf	?___awtoft+1,w
  7835  0F0C  00AF               	movwf	___ftadd@f1+1
  7836  0F0D  082A               	movf	?___awtoft+2,w
  7837  0F0E  00B0               	movwf	___ftadd@f1+2
  7838  0F0F  0854               	movf	getADCValue@adcSum,w
  7839  0F10  00B1               	movwf	___ftadd@f2
  7840  0F11  0855               	movf	getADCValue@adcSum+1,w
  7841  0F12  00B2               	movwf	___ftadd@f2+1
  7842  0F13  0856               	movf	getADCValue@adcSum+2,w
  7843  0F14  00B3               	movwf	___ftadd@f2+2
  7844  0F15  3184  2476  318E   	fcall	___ftadd
  7845  0F18  0020               	movlb	0	; select bank0
  7846  0F19  082E               	movf	?___ftadd,w
  7847  0F1A  00D4               	movwf	getADCValue@adcSum
  7848  0F1B  082F               	movf	?___ftadd+1,w
  7849  0F1C  00D5               	movwf	getADCValue@adcSum+1
  7850  0F1D  0830               	movf	?___ftadd+2,w
  7851  0F1E  00D6               	movwf	getADCValue@adcSum+2
  7852  0F1F  2EDB               	goto	l2957
  7853  0F20                     l180:	
  7854                           
  7855                           ;main.c: 69: };main.c: 71: FVRCONbits.FVREN = 0;
  7856  0F20  0022               	movlb	2	; select bank2
  7857  0F21  1397               	bcf	23,7	;volatile
  7858                           
  7859                           ;main.c: 72: ADCON0bits.ADON = 0;
  7860  0F22  0021               	movlb	1	; select bank1
  7861  0F23  101D               	bcf	29,0	;volatile
  7862                           
  7863                           ;main.c: 75: adcSum/= 1000;
  7864  0F24  3000               	movlw	0
  7865  0F25  0020               	movlb	0	; select bank0
  7866  0F26  00BB               	movwf	___ftdiv@f2
  7867  0F27  307A               	movlw	122
  7868  0F28  00BC               	movwf	___ftdiv@f2+1
  7869  0F29  3044               	movlw	68
  7870  0F2A  00BD               	movwf	___ftdiv@f2+2
  7871  0F2B  0854               	movf	getADCValue@adcSum,w
  7872  0F2C  00BE               	movwf	___ftdiv@f1
  7873  0F2D  0855               	movf	getADCValue@adcSum+1,w
  7874  0F2E  00BF               	movwf	___ftdiv@f1+1
  7875  0F2F  0856               	movf	getADCValue@adcSum+2,w
  7876  0F30  00C0               	movwf	___ftdiv@f1+2
  7877  0F31  318F  2757  318E   	fcall	___ftdiv
  7878  0F34  0020               	movlb	0	; select bank0
  7879  0F35  083B               	movf	?___ftdiv,w
  7880  0F36  00D4               	movwf	getADCValue@adcSum
  7881  0F37  083C               	movf	?___ftdiv+1,w
  7882  0F38  00D5               	movwf	getADCValue@adcSum+1
  7883  0F39  083D               	movf	?___ftdiv+2,w
  7884  0F3A  00D6               	movwf	getADCValue@adcSum+2
  7885                           
  7886                           ;main.c: 76: adcSum/= 500;
  7887  0F3B  3000               	movlw	0
  7888  0F3C  00BB               	movwf	___ftdiv@f2
  7889  0F3D  30FA               	movlw	250
  7890  0F3E  00BC               	movwf	___ftdiv@f2+1
  7891  0F3F  3043               	movlw	67
  7892  0F40  00BD               	movwf	___ftdiv@f2+2
  7893  0F41  0854               	movf	getADCValue@adcSum,w
  7894  0F42  00BE               	movwf	___ftdiv@f1
  7895  0F43  0855               	movf	getADCValue@adcSum+1,w
  7896  0F44  00BF               	movwf	___ftdiv@f1+1
  7897  0F45  0856               	movf	getADCValue@adcSum+2,w
  7898  0F46  00C0               	movwf	___ftdiv@f1+2
  7899  0F47  318F  2757         	fcall	___ftdiv
  7900  0F49  0020               	movlb	0	; select bank0
  7901  0F4A  083B               	movf	?___ftdiv,w
  7902  0F4B  00D4               	movwf	getADCValue@adcSum
  7903  0F4C  083C               	movf	?___ftdiv+1,w
  7904  0F4D  00D5               	movwf	getADCValue@adcSum+1
  7905  0F4E  083D               	movf	?___ftdiv+2,w
  7906  0F4F  00D6               	movwf	getADCValue@adcSum+2
  7907                           
  7908                           ;main.c: 78: return adcSum;
  7909  0F50  0854               	movf	getADCValue@adcSum,w
  7910  0F51  00CB               	movwf	?_getADCValue
  7911  0F52  0855               	movf	getADCValue@adcSum+1,w
  7912  0F53  00CC               	movwf	?_getADCValue+1
  7913  0F54  0856               	movf	getADCValue@adcSum+2,w
  7914  0F55  00CD               	movwf	?_getADCValue+2
  7915  0F56  0008               	return
  7916  0F57                     __end_of_getADCValue:	
  7917                           
  7918                           	psect	text30
  7919  081E                     __ptext30:	
  7920 ;; *************** function _sleep *****************
  7921 ;; Defined at:
  7922 ;;		line 22 in file "main.c"
  7923 ;; Parameters:    Size  Location     Type
  7924 ;;  wdps            1    wreg     unsigned char 
  7925 ;; Auto vars:     Size  Location     Type
  7926 ;;  wdps            1    1[BANK0 ] unsigned char 
  7927 ;; Return value:  Size  Location     Type
  7928 ;;                  1    wreg      void 
  7929 ;; Registers used:
  7930 ;;		wreg, status,2, status,0
  7931 ;; Tracked objects:
  7932 ;;		On entry : 0/0
  7933 ;;		On exit  : 0/0
  7934 ;;		Unchanged: 0/0
  7935 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7936 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7937 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7938 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7939 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7940 ;;Total ram usage:        2 bytes
  7941 ;; Hardware stack levels used:    1
  7942 ;; Hardware stack levels required when called:    7
  7943 ;; This function calls:
  7944 ;;		Nothing
  7945 ;; This function is called by:
  7946 ;;		_getADCValue
  7947 ;;		_loop
  7948 ;;		_main
  7949 ;;		_checkRxData
  7950 ;; This function uses a non-reentrant model
  7951 ;;
  7952                           
  7953                           
  7954                           ;psect for function _sleep
  7955  081E                     _sleep:	
  7956                           
  7957                           ;incstack = 0
  7958                           ; Regs used in _sleep: [wreg+status,2+status,0]
  7959                           ;sleep@wdps stored from wreg
  7960  081E  0020               	movlb	0	; select bank0
  7961  081F  00A1               	movwf	sleep@wdps
  7962                           
  7963                           ;main.c: 24: WDTCONbits.WDTPS = wdps;
  7964  0820  0821               	movf	sleep@wdps,w
  7965  0821  00A0               	movwf	??_sleep
  7966  0822  0DA0               	rlf	??_sleep,f
  7967  0823  0021               	movlb	1	; select bank1
  7968  0824  0817               	movf	23,w	;volatile
  7969  0825  0020               	movlb	0	; select bank0
  7970  0826  0620               	xorwf	??_sleep,w
  7971  0827  39C1               	andlw	-63
  7972  0828  0620               	xorwf	??_sleep,w
  7973  0829  0021               	movlb	1	; select bank1
  7974  082A  0097               	movwf	23	;volatile
  7975  082B                     l168:	
  7976                           ;main.c: 26: while (1){
  7977                           
  7978  082B  0063               	sleep	;# 
  7979                           
  7980                           ;main.c: 29: __nop();
  7981  082C  0000               	nop
  7982                           
  7983                           ;main.c: 30: __nop();
  7984  082D  0000               	nop
  7985                           
  7986                           ;main.c: 32: if (!STATUSbits.nTO && !STATUSbits.nPD) {
  7987  082E  0020               	movlb	0	; select bank0
  7988  082F  1E03               	btfss	3,4	;volatile
  7989  0830  1983               	btfsc	3,3	;volatile
  7990  0831  282B               	goto	l168
  7991                           
  7992                           ;main.c: 35: WDTCONbits.WDTPS = 13;
  7993  0832  0021               	movlb	1	; select bank1
  7994  0833  0817               	movf	23,w	;volatile
  7995  0834  39C1               	andlw	-63
  7996  0835  381A               	iorlw	26
  7997  0836  0097               	movwf	23	;volatile
  7998  0837  0064               	clrwdt	;# 
  7999                           
  8000                           ;main.c: 38: return;
  8001  0838  0008               	return
  8002  0839                     __end_of_sleep:	
  8003                           
  8004                           	psect	text31
  8005  0F57                     __ptext31:	
  8006 ;; *************** function ___ftdiv *****************
  8007 ;; Defined at:
  8008 ;;		line 56 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\ftdiv.c"
  8009 ;; Parameters:    Size  Location     Type
  8010 ;;  f2              3   27[BANK0 ] float 
  8011 ;;  f1              3   30[BANK0 ] float 
  8012 ;; Auto vars:     Size  Location     Type
  8013 ;;  f3              3   38[BANK0 ] float 
  8014 ;;  sign            1   42[BANK0 ] unsigned char 
  8015 ;;  exp             1   41[BANK0 ] unsigned char 
  8016 ;;  cntr            1   37[BANK0 ] unsigned char 
  8017 ;; Return value:  Size  Location     Type
  8018 ;;                  3   27[BANK0 ] float 
  8019 ;; Registers used:
  8020 ;;		wreg, status,2, status,0, pclath, cstack
  8021 ;; Tracked objects:
  8022 ;;		On entry : 0/0
  8023 ;;		On exit  : 0/0
  8024 ;;		Unchanged: 0/0
  8025 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8026 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8027 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8028 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8029 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8030 ;;Total ram usage:       16 bytes
  8031 ;; Hardware stack levels used:    1
  8032 ;; Hardware stack levels required when called:    8
  8033 ;; This function calls:
  8034 ;;		___ftpack
  8035 ;; This function is called by:
  8036 ;;		_getADCValue
  8037 ;;		_loop
  8038 ;; This function uses a non-reentrant model
  8039 ;;
  8040                           
  8041                           
  8042                           ;psect for function ___ftdiv
  8043  0F57                     ___ftdiv:	
  8044                           
  8045                           ;incstack = 0
  8046                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
  8047  0F57  0020               	movlb	0	; select bank0
  8048  0F58  083E               	movf	___ftdiv@f1,w
  8049  0F59  00C1               	movwf	??___ftdiv
  8050  0F5A  083F               	movf	___ftdiv@f1+1,w
  8051  0F5B  00C2               	movwf	??___ftdiv+1
  8052  0F5C  0840               	movf	___ftdiv@f1+2,w
  8053  0F5D  00C3               	movwf	??___ftdiv+2
  8054  0F5E  1003               	clrc
  8055  0F5F  0D42               	rlf	??___ftdiv+1,w
  8056  0F60  0D43               	rlf	??___ftdiv+2,w
  8057  0F61  00C4               	movwf	??___ftdiv+3
  8058  0F62  0844               	movf	??___ftdiv+3,w
  8059  0F63  00C9               	movwf	___ftdiv@exp
  8060  0F64  0849               	movf	___ftdiv@exp,w
  8061  0F65  1D03               	btfss	3,2
  8062  0F66  2F6E               	goto	l2857
  8063  0F67  3000               	movlw	0
  8064  0F68  00BB               	movwf	?___ftdiv
  8065  0F69  3000               	movlw	0
  8066  0F6A  00BC               	movwf	?___ftdiv+1
  8067  0F6B  3000               	movlw	0
  8068  0F6C  00BD               	movwf	?___ftdiv+2
  8069  0F6D  0008               	return
  8070  0F6E                     l2857:	
  8071  0F6E  083B               	movf	___ftdiv@f2,w
  8072  0F6F  00C1               	movwf	??___ftdiv
  8073  0F70  083C               	movf	___ftdiv@f2+1,w
  8074  0F71  00C2               	movwf	??___ftdiv+1
  8075  0F72  083D               	movf	___ftdiv@f2+2,w
  8076  0F73  00C3               	movwf	??___ftdiv+2
  8077  0F74  1003               	clrc
  8078  0F75  0D42               	rlf	??___ftdiv+1,w
  8079  0F76  0D43               	rlf	??___ftdiv+2,w
  8080  0F77  00C4               	movwf	??___ftdiv+3
  8081  0F78  0844               	movf	??___ftdiv+3,w
  8082  0F79  00CA               	movwf	___ftdiv@sign
  8083  0F7A  084A               	movf	___ftdiv@sign,w
  8084  0F7B  1D03               	btfss	3,2
  8085  0F7C  2F84               	goto	l2863
  8086  0F7D  3000               	movlw	0
  8087  0F7E  00BB               	movwf	?___ftdiv
  8088  0F7F  3000               	movlw	0
  8089  0F80  00BC               	movwf	?___ftdiv+1
  8090  0F81  3000               	movlw	0
  8091  0F82  00BD               	movwf	?___ftdiv+2
  8092  0F83  0008               	return
  8093  0F84                     l2863:	
  8094  0F84  3000               	movlw	0
  8095  0F85  00C6               	movwf	___ftdiv@f3
  8096  0F86  3000               	movlw	0
  8097  0F87  00C7               	movwf	___ftdiv@f3+1
  8098  0F88  3000               	movlw	0
  8099  0F89  00C8               	movwf	___ftdiv@f3+2
  8100  0F8A  3089               	movlw	137
  8101  0F8B  074A               	addwf	___ftdiv@sign,w
  8102  0F8C  00C1               	movwf	??___ftdiv
  8103  0F8D  0841               	movf	??___ftdiv,w
  8104  0F8E  02C9               	subwf	___ftdiv@exp,f
  8105  0F8F  083E               	movf	___ftdiv@f1,w
  8106  0F90  00C1               	movwf	??___ftdiv
  8107  0F91  083F               	movf	___ftdiv@f1+1,w
  8108  0F92  00C2               	movwf	??___ftdiv+1
  8109  0F93  0840               	movf	___ftdiv@f1+2,w
  8110  0F94  00C3               	movwf	??___ftdiv+2
  8111  0F95  3010               	movlw	16
  8112  0F96                     u2935:	
  8113  0F96  36C3               	lsrf	??___ftdiv+2,f
  8114  0F97  0CC2               	rrf	??___ftdiv+1,f
  8115  0F98  0CC1               	rrf	??___ftdiv,f
  8116  0F99  0B89               	decfsz	9,f
  8117  0F9A  2F96               	goto	u2935
  8118  0F9B  0841               	movf	??___ftdiv,w
  8119  0F9C  00C4               	movwf	??___ftdiv+3
  8120  0F9D  0844               	movf	??___ftdiv+3,w
  8121  0F9E  00CA               	movwf	___ftdiv@sign
  8122  0F9F  083B               	movf	___ftdiv@f2,w
  8123  0FA0  00C1               	movwf	??___ftdiv
  8124  0FA1  083C               	movf	___ftdiv@f2+1,w
  8125  0FA2  00C2               	movwf	??___ftdiv+1
  8126  0FA3  083D               	movf	___ftdiv@f2+2,w
  8127  0FA4  00C3               	movwf	??___ftdiv+2
  8128  0FA5  3010               	movlw	16
  8129  0FA6                     u2945:	
  8130  0FA6  36C3               	lsrf	??___ftdiv+2,f
  8131  0FA7  0CC2               	rrf	??___ftdiv+1,f
  8132  0FA8  0CC1               	rrf	??___ftdiv,f
  8133  0FA9  0B89               	decfsz	9,f
  8134  0FAA  2FA6               	goto	u2945
  8135  0FAB  0841               	movf	??___ftdiv,w
  8136  0FAC  00C4               	movwf	??___ftdiv+3
  8137  0FAD  0844               	movf	??___ftdiv+3,w
  8138  0FAE  06CA               	xorwf	___ftdiv@sign,f
  8139  0FAF  3080               	movlw	128
  8140  0FB0  00C1               	movwf	??___ftdiv
  8141  0FB1  0841               	movf	??___ftdiv,w
  8142  0FB2  05CA               	andwf	___ftdiv@sign,f
  8143  0FB3  17BF               	bsf	___ftdiv@f1+1,7
  8144  0FB4  30FF               	movlw	255
  8145  0FB5  05BE               	andwf	___ftdiv@f1,f
  8146  0FB6  30FF               	movlw	255
  8147  0FB7  05BF               	andwf	___ftdiv@f1+1,f
  8148  0FB8  3000               	movlw	0
  8149  0FB9  05C0               	andwf	___ftdiv@f1+2,f
  8150  0FBA  17BC               	bsf	___ftdiv@f2+1,7
  8151  0FBB  30FF               	movlw	255
  8152  0FBC  05BB               	andwf	___ftdiv@f2,f
  8153  0FBD  30FF               	movlw	255
  8154  0FBE  05BC               	andwf	___ftdiv@f2+1,f
  8155  0FBF  3000               	movlw	0
  8156  0FC0  05BD               	andwf	___ftdiv@f2+2,f
  8157  0FC1  3018               	movlw	24
  8158  0FC2  00C1               	movwf	??___ftdiv
  8159  0FC3  0841               	movf	??___ftdiv,w
  8160  0FC4  00C5               	movwf	___ftdiv@cntr
  8161  0FC5                     l2877:	
  8162  0FC5  3001               	movlw	1
  8163  0FC6                     u2955:	
  8164  0FC6  35C6               	lslf	___ftdiv@f3,f
  8165  0FC7  0DC7               	rlf	___ftdiv@f3+1,f
  8166  0FC8  0DC8               	rlf	___ftdiv@f3+2,f
  8167  0FC9  0B89               	decfsz	9,f
  8168  0FCA  2FC6               	goto	u2955
  8169  0FCB  083D               	movf	___ftdiv@f2+2,w
  8170  0FCC  0240               	subwf	___ftdiv@f1+2,w
  8171  0FCD  1D03               	skipz
  8172  0FCE  2FD5               	goto	u2965
  8173  0FCF  083C               	movf	___ftdiv@f2+1,w
  8174  0FD0  023F               	subwf	___ftdiv@f1+1,w
  8175  0FD1  1D03               	skipz
  8176  0FD2  2FD5               	goto	u2965
  8177  0FD3  083B               	movf	___ftdiv@f2,w
  8178  0FD4  023E               	subwf	___ftdiv@f1,w
  8179  0FD5                     u2965:	
  8180  0FD5  1C03               	skipc
  8181  0FD6  2FDE               	goto	l2885
  8182  0FD7  083B               	movf	___ftdiv@f2,w
  8183  0FD8  02BE               	subwf	___ftdiv@f1,f
  8184  0FD9  083C               	movf	___ftdiv@f2+1,w
  8185  0FDA  3BBF               	subwfb	___ftdiv@f1+1,f
  8186  0FDB  083D               	movf	___ftdiv@f2+2,w
  8187  0FDC  3BC0               	subwfb	___ftdiv@f1+2,f
  8188  0FDD  1446               	bsf	___ftdiv@f3,0
  8189  0FDE                     l2885:	
  8190  0FDE  3001               	movlw	1
  8191  0FDF                     u2975:	
  8192  0FDF  35BE               	lslf	___ftdiv@f1,f
  8193  0FE0  0DBF               	rlf	___ftdiv@f1+1,f
  8194  0FE1  0DC0               	rlf	___ftdiv@f1+2,f
  8195  0FE2  0B89               	decfsz	9,f
  8196  0FE3  2FDF               	goto	u2975
  8197  0FE4  3001               	movlw	1
  8198  0FE5  02C5               	subwf	___ftdiv@cntr,f
  8199  0FE6  1D03               	btfss	3,2
  8200  0FE7  2FC5               	goto	l2877
  8201  0FE8  0846               	movf	___ftdiv@f3,w
  8202  0FE9  00A0               	movwf	___ftpack@arg
  8203  0FEA  0847               	movf	___ftdiv@f3+1,w
  8204  0FEB  00A1               	movwf	___ftpack@arg+1
  8205  0FEC  0848               	movf	___ftdiv@f3+2,w
  8206  0FED  00A2               	movwf	___ftpack@arg+2
  8207  0FEE  0849               	movf	___ftdiv@exp,w
  8208  0FEF  00C1               	movwf	??___ftdiv
  8209  0FF0  0841               	movf	??___ftdiv,w
  8210  0FF1  00A3               	movwf	___ftpack@exp
  8211  0FF2  084A               	movf	___ftdiv@sign,w
  8212  0FF3  00C2               	movwf	??___ftdiv+1
  8213  0FF4  0842               	movf	??___ftdiv+1,w
  8214  0FF5  00A4               	movwf	___ftpack@sign
  8215  0FF6  318C  24A2         	fcall	___ftpack
  8216  0FF8  0020               	movlb	0	; select bank0
  8217  0FF9  0820               	movf	?___ftpack,w
  8218  0FFA  00BB               	movwf	?___ftdiv
  8219  0FFB  0821               	movf	?___ftpack+1,w
  8220  0FFC  00BC               	movwf	?___ftdiv+1
  8221  0FFD  0822               	movf	?___ftpack+2,w
  8222  0FFE  00BD               	movwf	?___ftdiv+2
  8223  0FFF  0008               	return
  8224  1000                     __end_of___ftdiv:	
  8225                           
  8226                           	psect	text32
  8227  0476                     __ptext32:	
  8228 ;; *************** function ___ftadd *****************
  8229 ;; Defined at:
  8230 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\ftadd.c"
  8231 ;; Parameters:    Size  Location     Type
  8232 ;;  f1              3   14[BANK0 ] float 
  8233 ;;  f2              3   17[BANK0 ] float 
  8234 ;; Auto vars:     Size  Location     Type
  8235 ;;  exp1            1   26[BANK0 ] unsigned char 
  8236 ;;  exp2            1   25[BANK0 ] unsigned char 
  8237 ;;  sign            1   24[BANK0 ] unsigned char 
  8238 ;; Return value:  Size  Location     Type
  8239 ;;                  3   14[BANK0 ] float 
  8240 ;; Registers used:
  8241 ;;		wreg, status,2, status,0, pclath, cstack
  8242 ;; Tracked objects:
  8243 ;;		On entry : 0/0
  8244 ;;		On exit  : 0/0
  8245 ;;		Unchanged: 0/0
  8246 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8247 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8248 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8249 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8250 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8251 ;;Total ram usage:       13 bytes
  8252 ;; Hardware stack levels used:    1
  8253 ;; Hardware stack levels required when called:    8
  8254 ;; This function calls:
  8255 ;;		___ftpack
  8256 ;; This function is called by:
  8257 ;;		_getADCValue
  8258 ;;		_loop
  8259 ;;		___ftsub
  8260 ;; This function uses a non-reentrant model
  8261 ;;
  8262                           
  8263                           
  8264                           ;psect for function ___ftadd
  8265  0476                     ___ftadd:	
  8266                           
  8267                           ;incstack = 0
  8268                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
  8269  0476  0020               	movlb	0	; select bank0
  8270  0477  082E               	movf	___ftadd@f1,w
  8271  0478  00B4               	movwf	??___ftadd
  8272  0479  082F               	movf	___ftadd@f1+1,w
  8273  047A  00B5               	movwf	??___ftadd+1
  8274  047B  0830               	movf	___ftadd@f1+2,w
  8275  047C  00B6               	movwf	??___ftadd+2
  8276  047D  1003               	clrc
  8277  047E  0D35               	rlf	??___ftadd+1,w
  8278  047F  0D36               	rlf	??___ftadd+2,w
  8279  0480  00B7               	movwf	??___ftadd+3
  8280  0481  0837               	movf	??___ftadd+3,w
  8281  0482  00BA               	movwf	___ftadd@exp1
  8282  0483  0831               	movf	___ftadd@f2,w
  8283  0484  00B4               	movwf	??___ftadd
  8284  0485  0832               	movf	___ftadd@f2+1,w
  8285  0486  00B5               	movwf	??___ftadd+1
  8286  0487  0833               	movf	___ftadd@f2+2,w
  8287  0488  00B6               	movwf	??___ftadd+2
  8288  0489  1003               	clrc
  8289  048A  0D35               	rlf	??___ftadd+1,w
  8290  048B  0D36               	rlf	??___ftadd+2,w
  8291  048C  00B7               	movwf	??___ftadd+3
  8292  048D  0837               	movf	??___ftadd+3,w
  8293  048E  00B9               	movwf	___ftadd@exp2
  8294  048F  083A               	movf	___ftadd@exp1,w
  8295  0490  1903               	btfsc	3,2
  8296  0491  2C9E               	goto	l2331
  8297  0492  0839               	movf	___ftadd@exp2,w
  8298  0493  023A               	subwf	___ftadd@exp1,w
  8299  0494  1803               	skipnc
  8300  0495  2CA5               	goto	l2335
  8301  0496  033A               	decf	___ftadd@exp1,w
  8302  0497  3AFF               	xorlw	255
  8303  0498  0739               	addwf	___ftadd@exp2,w
  8304  0499  00B4               	movwf	??___ftadd
  8305  049A  3019               	movlw	25
  8306  049B  0234               	subwf	??___ftadd,w
  8307  049C  1C03               	skipc
  8308  049D  2CA5               	goto	l2335
  8309  049E                     l2331:	
  8310  049E  0831               	movf	___ftadd@f2,w
  8311  049F  00AE               	movwf	?___ftadd
  8312  04A0  0832               	movf	___ftadd@f2+1,w
  8313  04A1  00AF               	movwf	?___ftadd+1
  8314  04A2  0833               	movf	___ftadd@f2+2,w
  8315  04A3  00B0               	movwf	?___ftadd+2
  8316  04A4  0008               	return
  8317  04A5                     l2335:	
  8318  04A5  0839               	movf	___ftadd@exp2,w
  8319  04A6  1903               	btfsc	3,2
  8320  04A7  0008               	return
  8321  04A8  083A               	movf	___ftadd@exp1,w
  8322  04A9  0239               	subwf	___ftadd@exp2,w
  8323  04AA  1803               	skipnc
  8324  04AB  2CB4               	goto	l2341
  8325  04AC  0339               	decf	___ftadd@exp2,w
  8326  04AD  3AFF               	xorlw	255
  8327  04AE  073A               	addwf	___ftadd@exp1,w
  8328  04AF  00B4               	movwf	??___ftadd
  8329  04B0  3019               	movlw	25
  8330  04B1  0234               	subwf	??___ftadd,w
  8331  04B2  1803               	btfsc	3,0
  8332  04B3  0008               	return
  8333  04B4                     l2341:	
  8334  04B4  3006               	movlw	6
  8335  04B5  00B4               	movwf	??___ftadd
  8336  04B6  0834               	movf	??___ftadd,w
  8337  04B7  00B8               	movwf	___ftadd@sign
  8338  04B8  1BB0               	btfsc	___ftadd@f1+2,7
  8339  04B9  17B8               	bsf	___ftadd@sign,7
  8340  04BA  1BB3               	btfsc	___ftadd@f2+2,7
  8341  04BB  1738               	bsf	___ftadd@sign,6
  8342  04BC  17AF               	bsf	___ftadd@f1+1,7
  8343  04BD  30FF               	movlw	255
  8344  04BE  05AE               	andwf	___ftadd@f1,f
  8345  04BF  30FF               	movlw	255
  8346  04C0  05AF               	andwf	___ftadd@f1+1,f
  8347  04C1  3000               	movlw	0
  8348  04C2  05B0               	andwf	___ftadd@f1+2,f
  8349  04C3  17B2               	bsf	___ftadd@f2+1,7
  8350  04C4  30FF               	movlw	255
  8351  04C5  05B1               	andwf	___ftadd@f2,f
  8352  04C6  30FF               	movlw	255
  8353  04C7  05B2               	andwf	___ftadd@f2+1,f
  8354  04C8  3000               	movlw	0
  8355  04C9  05B3               	andwf	___ftadd@f2+2,f
  8356  04CA  0839               	movf	___ftadd@exp2,w
  8357  04CB  023A               	subwf	___ftadd@exp1,w
  8358  04CC  1803               	skipnc
  8359  04CD  2CF0               	goto	l2363
  8360  04CE                     l2353:	
  8361  04CE  3001               	movlw	1
  8362  04CF                     u2045:	
  8363  04CF  35B1               	lslf	___ftadd@f2,f
  8364  04D0  0DB2               	rlf	___ftadd@f2+1,f
  8365  04D1  0DB3               	rlf	___ftadd@f2+2,f
  8366  04D2  0B89               	decfsz	9,f
  8367  04D3  2CCF               	goto	u2045
  8368  04D4  3001               	movlw	1
  8369  04D5  02B9               	subwf	___ftadd@exp2,f
  8370  04D6  0839               	movf	___ftadd@exp2,w
  8371  04D7  063A               	xorwf	___ftadd@exp1,w
  8372  04D8  1903               	skipnz
  8373  04D9  2CEB               	goto	l2361
  8374  04DA  3001               	movlw	1
  8375  04DB  02B8               	subwf	___ftadd@sign,f
  8376  04DC  0838               	movf	___ftadd@sign,w
  8377  04DD  3907               	andlw	7
  8378  04DE  1903               	btfsc	3,2
  8379  04DF  2CEB               	goto	l2361
  8380  04E0  2CCE               	goto	l2353
  8381  04E1                     l2359:	
  8382  04E1  3001               	movlw	1
  8383  04E2                     u2075:	
  8384  04E2  36B0               	lsrf	___ftadd@f1+2,f
  8385  04E3  0CAF               	rrf	___ftadd@f1+1,f
  8386  04E4  0CAE               	rrf	___ftadd@f1,f
  8387  04E5  0B89               	decfsz	9,f
  8388  04E6  2CE2               	goto	u2075
  8389  04E7  3001               	movlw	1
  8390  04E8  00B4               	movwf	??___ftadd
  8391  04E9  0834               	movf	??___ftadd,w
  8392  04EA  07BA               	addwf	___ftadd@exp1,f
  8393  04EB                     l2361:	
  8394  04EB  083A               	movf	___ftadd@exp1,w
  8395  04EC  0639               	xorwf	___ftadd@exp2,w
  8396  04ED  1903               	btfsc	3,2
  8397  04EE  2D15               	goto	l709
  8398  04EF  2CE1               	goto	l2359
  8399  04F0                     l2363:	
  8400  04F0  083A               	movf	___ftadd@exp1,w
  8401  04F1  0239               	subwf	___ftadd@exp2,w
  8402  04F2  1803               	skipnc
  8403  04F3  2D15               	goto	l709
  8404  04F4                     l2365:	
  8405  04F4  3001               	movlw	1
  8406  04F5                     u2105:	
  8407  04F5  35AE               	lslf	___ftadd@f1,f
  8408  04F6  0DAF               	rlf	___ftadd@f1+1,f
  8409  04F7  0DB0               	rlf	___ftadd@f1+2,f
  8410  04F8  0B89               	decfsz	9,f
  8411  04F9  2CF5               	goto	u2105
  8412  04FA  3001               	movlw	1
  8413  04FB  02BA               	subwf	___ftadd@exp1,f
  8414  04FC  0839               	movf	___ftadd@exp2,w
  8415  04FD  063A               	xorwf	___ftadd@exp1,w
  8416  04FE  1903               	skipnz
  8417  04FF  2D11               	goto	l2373
  8418  0500  3001               	movlw	1
  8419  0501  02B8               	subwf	___ftadd@sign,f
  8420  0502  0838               	movf	___ftadd@sign,w
  8421  0503  3907               	andlw	7
  8422  0504  1903               	btfsc	3,2
  8423  0505  2D11               	goto	l2373
  8424  0506  2CF4               	goto	l2365
  8425  0507                     l2371:	
  8426  0507  3001               	movlw	1
  8427  0508                     u2135:	
  8428  0508  36B3               	lsrf	___ftadd@f2+2,f
  8429  0509  0CB2               	rrf	___ftadd@f2+1,f
  8430  050A  0CB1               	rrf	___ftadd@f2,f
  8431  050B  0B89               	decfsz	9,f
  8432  050C  2D08               	goto	u2135
  8433  050D  3001               	movlw	1
  8434  050E  00B4               	movwf	??___ftadd
  8435  050F  0834               	movf	??___ftadd,w
  8436  0510  07B9               	addwf	___ftadd@exp2,f
  8437  0511                     l2373:	
  8438  0511  083A               	movf	___ftadd@exp1,w
  8439  0512  0639               	xorwf	___ftadd@exp2,w
  8440  0513  1D03               	skipz
  8441  0514  2D07               	goto	l2371
  8442  0515                     l709:	
  8443  0515  1FB8               	btfss	___ftadd@sign,7
  8444  0516  2D27               	goto	l2377
  8445  0517  30FF               	movlw	255
  8446  0518  06AE               	xorwf	___ftadd@f1,f
  8447  0519  30FF               	movlw	255
  8448  051A  06AF               	xorwf	___ftadd@f1+1,f
  8449  051B  30FF               	movlw	255
  8450  051C  06B0               	xorwf	___ftadd@f1+2,f
  8451  051D  3001               	movlw	1
  8452  051E  07AE               	addwf	___ftadd@f1,f
  8453  051F  3000               	movlw	0
  8454  0520  1803               	skipnc
  8455  0521  3001               	movlw	1
  8456  0522  07AF               	addwf	___ftadd@f1+1,f
  8457  0523  3000               	movlw	0
  8458  0524  1803               	skipnc
  8459  0525  3001               	movlw	1
  8460  0526  07B0               	addwf	___ftadd@f1+2,f
  8461  0527                     l2377:	
  8462  0527  1F38               	btfss	___ftadd@sign,6
  8463  0528  2D39               	goto	l2381
  8464  0529  30FF               	movlw	255
  8465  052A  06B1               	xorwf	___ftadd@f2,f
  8466  052B  30FF               	movlw	255
  8467  052C  06B2               	xorwf	___ftadd@f2+1,f
  8468  052D  30FF               	movlw	255
  8469  052E  06B3               	xorwf	___ftadd@f2+2,f
  8470  052F  3001               	movlw	1
  8471  0530  07B1               	addwf	___ftadd@f2,f
  8472  0531  3000               	movlw	0
  8473  0532  1803               	skipnc
  8474  0533  3001               	movlw	1
  8475  0534  07B2               	addwf	___ftadd@f2+1,f
  8476  0535  3000               	movlw	0
  8477  0536  1803               	skipnc
  8478  0537  3001               	movlw	1
  8479  0538  07B3               	addwf	___ftadd@f2+2,f
  8480  0539                     l2381:	
  8481  0539  01B8               	clrf	___ftadd@sign
  8482  053A  082E               	movf	___ftadd@f1,w
  8483  053B  07B1               	addwf	___ftadd@f2,f
  8484  053C  082F               	movf	___ftadd@f1+1,w
  8485  053D  3DB2               	addwfc	___ftadd@f2+1,f
  8486  053E  0830               	movf	___ftadd@f1+2,w
  8487  053F  3DB3               	addwfc	___ftadd@f2+2,f
  8488  0540  1FB3               	btfss	___ftadd@f2+2,7
  8489  0541  2D54               	goto	l2391
  8490  0542  30FF               	movlw	255
  8491  0543  06B1               	xorwf	___ftadd@f2,f
  8492  0544  30FF               	movlw	255
  8493  0545  06B2               	xorwf	___ftadd@f2+1,f
  8494  0546  30FF               	movlw	255
  8495  0547  06B3               	xorwf	___ftadd@f2+2,f
  8496  0548  3001               	movlw	1
  8497  0549  07B1               	addwf	___ftadd@f2,f
  8498  054A  3000               	movlw	0
  8499  054B  1803               	skipnc
  8500  054C  3001               	movlw	1
  8501  054D  07B2               	addwf	___ftadd@f2+1,f
  8502  054E  3000               	movlw	0
  8503  054F  1803               	skipnc
  8504  0550  3001               	movlw	1
  8505  0551  07B3               	addwf	___ftadd@f2+2,f
  8506  0552  01B8               	clrf	___ftadd@sign
  8507  0553  0AB8               	incf	___ftadd@sign,f
  8508  0554                     l2391:	
  8509  0554  0831               	movf	___ftadd@f2,w
  8510  0555  00A0               	movwf	___ftpack@arg
  8511  0556  0832               	movf	___ftadd@f2+1,w
  8512  0557  00A1               	movwf	___ftpack@arg+1
  8513  0558  0833               	movf	___ftadd@f2+2,w
  8514  0559  00A2               	movwf	___ftpack@arg+2
  8515  055A  083A               	movf	___ftadd@exp1,w
  8516  055B  00B4               	movwf	??___ftadd
  8517  055C  0834               	movf	??___ftadd,w
  8518  055D  00A3               	movwf	___ftpack@exp
  8519  055E  0838               	movf	___ftadd@sign,w
  8520  055F  00B5               	movwf	??___ftadd+1
  8521  0560  0835               	movf	??___ftadd+1,w
  8522  0561  00A4               	movwf	___ftpack@sign
  8523  0562  318C  24A2         	fcall	___ftpack
  8524  0564  0020               	movlb	0	; select bank0
  8525  0565  0820               	movf	?___ftpack,w
  8526  0566  00AE               	movwf	?___ftadd
  8527  0567  0821               	movf	?___ftpack+1,w
  8528  0568  00AF               	movwf	?___ftadd+1
  8529  0569  0822               	movf	?___ftpack+2,w
  8530  056A  00B0               	movwf	?___ftadd+2
  8531  056B  0008               	return
  8532  056C                     __end_of___ftadd:	
  8533                           
  8534                           	psect	text33
  8535  090B                     __ptext33:	
  8536 ;; *************** function ___awtoft *****************
  8537 ;; Defined at:
  8538 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\awtoft.c"
  8539 ;; Parameters:    Size  Location     Type
  8540 ;;  c               2    8[BANK0 ] int 
  8541 ;; Auto vars:     Size  Location     Type
  8542 ;;  sign            1   13[BANK0 ] unsigned char 
  8543 ;; Return value:  Size  Location     Type
  8544 ;;                  3    8[BANK0 ] float 
  8545 ;; Registers used:
  8546 ;;		wreg, status,2, status,0, pclath, cstack
  8547 ;; Tracked objects:
  8548 ;;		On entry : 0/0
  8549 ;;		On exit  : 0/0
  8550 ;;		Unchanged: 0/0
  8551 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8552 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8553 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8554 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8555 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8556 ;;Total ram usage:        6 bytes
  8557 ;; Hardware stack levels used:    1
  8558 ;; Hardware stack levels required when called:    8
  8559 ;; This function calls:
  8560 ;;		___ftpack
  8561 ;; This function is called by:
  8562 ;;		_getADCValue
  8563 ;;		_loop
  8564 ;; This function uses a non-reentrant model
  8565 ;;
  8566                           
  8567                           
  8568                           ;psect for function ___awtoft
  8569  090B                     ___awtoft:	
  8570                           
  8571                           ;incstack = 0
  8572                           ; Regs used in ___awtoft: [wreg+status,2+status,0+pclath+cstack]
  8573  090B  0020               	movlb	0	; select bank0
  8574  090C  01AD               	clrf	___awtoft@sign
  8575  090D  1FA9               	btfss	___awtoft@c+1,7
  8576  090E  2916               	goto	l2847
  8577  090F  09A8               	comf	___awtoft@c,f
  8578  0910  09A9               	comf	___awtoft@c+1,f
  8579  0911  0AA8               	incf	___awtoft@c,f
  8580  0912  1903               	skipnz
  8581  0913  0AA9               	incf	___awtoft@c+1,f
  8582  0914  01AD               	clrf	___awtoft@sign
  8583  0915  0AAD               	incf	___awtoft@sign,f
  8584  0916                     l2847:	
  8585  0916  0828               	movf	___awtoft@c,w
  8586  0917  00A0               	movwf	___ftpack@arg
  8587  0918  0829               	movf	___awtoft@c+1,w
  8588  0919  00A1               	movwf	___ftpack@arg+1
  8589  091A  01A2               	clrf	___ftpack@arg+2
  8590  091B  308E               	movlw	142
  8591  091C  00AB               	movwf	??___awtoft
  8592  091D  082B               	movf	??___awtoft,w
  8593  091E  00A3               	movwf	___ftpack@exp
  8594  091F  082D               	movf	___awtoft@sign,w
  8595  0920  00AC               	movwf	??___awtoft+1
  8596  0921  082C               	movf	??___awtoft+1,w
  8597  0922  00A4               	movwf	___ftpack@sign
  8598  0923  318C  24A2         	fcall	___ftpack
  8599  0925  0020               	movlb	0	; select bank0
  8600  0926  0820               	movf	?___ftpack,w
  8601  0927  00A8               	movwf	?___awtoft
  8602  0928  0821               	movf	?___ftpack+1,w
  8603  0929  00A9               	movwf	?___awtoft+1
  8604  092A  0822               	movf	?___ftpack+2,w
  8605  092B  00AA               	movwf	?___awtoft+2
  8606  092C  0008               	return
  8607  092D                     __end_of___awtoft:	
  8608                           
  8609                           	psect	text34
  8610  178B                     __ptext34:	
  8611 ;; *************** function _checkTXPower *****************
  8612 ;; Defined at:
  8613 ;;		line 108 in file "main.c"
  8614 ;; Parameters:    Size  Location     Type
  8615 ;;		None
  8616 ;; Auto vars:     Size  Location     Type
  8617 ;;  rxPacket        1    8[BANK0 ] PTR struct .
  8618 ;;		 -> RXPacket(33), 
  8619 ;; Return value:  Size  Location     Type
  8620 ;;                  1    wreg      void 
  8621 ;; Registers used:
  8622 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8623 ;; Tracked objects:
  8624 ;;		On entry : 0/0
  8625 ;;		On exit  : 0/0
  8626 ;;		Unchanged: 0/0
  8627 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8628 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8629 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8630 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8631 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8632 ;;Total ram usage:        2 bytes
  8633 ;; Hardware stack levels used:    1
  8634 ;; Hardware stack levels required when called:   11
  8635 ;; This function calls:
  8636 ;;		_nrf24l01ChangeTXPower
  8637 ;;		_nrf24l01GetRXPacket
  8638 ;; This function is called by:
  8639 ;;		_loop
  8640 ;; This function uses a non-reentrant model
  8641 ;;
  8642                           
  8643                           
  8644                           ;psect for function _checkTXPower
  8645  178B                     _checkTXPower:	
  8646                           
  8647                           ;main.c: 109: nrf24l01Packet_t * rxPacket = nrf24l01GetRXPacket();
  8648                           
  8649                           ;incstack = 0
  8650                           ; Regs used in _checkTXPower: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8651  178B  3187  27FE  3197   	fcall	_nrf24l01GetRXPacket
  8652  178E  0020               	movlb	0	; select bank0
  8653  178F  00A7               	movwf	??_checkTXPower
  8654  1790  0827               	movf	??_checkTXPower,w
  8655  1791  00A8               	movwf	checkTXPower@rxPacket
  8656                           
  8657                           ;main.c: 111: if (rxPacket->packetData.ACKRPD){
  8658  1792  0828               	movf	checkTXPower@rxPacket,w
  8659  1793  0086               	movwf	6
  8660  1794  3001               	movlw	1	; select bank2/3
  8661  1795  0087               	movwf	7
  8662  1796  1C81               	btfss	1,1
  8663  1797  0008               	return
  8664                           
  8665                           ;main.c: 112: nrf24l01ChangeTXPower(-1);
  8666  1798  30FF               	movlw	255
  8667  1799  00A3               	movwf	nrf24l01ChangeTXPower@addPower
  8668  179A  30FF               	movlw	255
  8669  179B  00A4               	movwf	nrf24l01ChangeTXPower@addPower+1
  8670  179C  318A  22AF         	fcall	_nrf24l01ChangeTXPower
  8671  179E  0008               	return
  8672  179F                     __end_of_checkTXPower:	
  8673                           
  8674                           	psect	text35
  8675  07FE                     __ptext35:	
  8676 ;; *************** function _nrf24l01GetRXPacket *****************
  8677 ;; Defined at:
  8678 ;;		line 131 in file "nrf24l01.c"
  8679 ;; Parameters:    Size  Location     Type
  8680 ;;		None
  8681 ;; Auto vars:     Size  Location     Type
  8682 ;;		None
  8683 ;; Return value:  Size  Location     Type
  8684 ;;                  1    wreg      PTR struct .
  8685 ;; Registers used:
  8686 ;;		wreg
  8687 ;; Tracked objects:
  8688 ;;		On entry : 0/0
  8689 ;;		On exit  : 0/0
  8690 ;;		Unchanged: 0/0
  8691 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8692 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8693 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8694 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8695 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8696 ;;Total ram usage:        0 bytes
  8697 ;; Hardware stack levels used:    1
  8698 ;; Hardware stack levels required when called:    7
  8699 ;; This function calls:
  8700 ;;		Nothing
  8701 ;; This function is called by:
  8702 ;;		_checkTXPower
  8703 ;; This function uses a non-reentrant model
  8704 ;;
  8705                           
  8706                           
  8707                           ;psect for function _nrf24l01GetRXPacket
  8708  07FE                     _nrf24l01GetRXPacket:	
  8709                           
  8710                           ;nrf24l01.c: 132: return &RXPacket;
  8711                           
  8712                           ;incstack = 0
  8713                           ; Regs used in _nrf24l01GetRXPacket: [wreg]
  8714  07FE  30A0               	movlw	(low (_RXPacket| (0+256)))& (0+255)
  8715  07FF  0008               	return
  8716  0800                     __end_of_nrf24l01GetRXPacket:	
  8717                           
  8718                           	psect	text36
  8719  0AAF                     __ptext36:	
  8720 ;; *************** function _nrf24l01ChangeTXPower *****************
  8721 ;; Defined at:
  8722 ;;		line 33 in file "nrf24l01.c"
  8723 ;; Parameters:    Size  Location     Type
  8724 ;;  addPower        2    3[BANK0 ] int 
  8725 ;; Auto vars:     Size  Location     Type
  8726 ;;  rfSetup         1    6[BANK0 ] struct .
  8727 ;; Return value:  Size  Location     Type
  8728 ;;                  1    wreg      void 
  8729 ;; Registers used:
  8730 ;;		wreg, status,2, status,0, pclath, cstack
  8731 ;; Tracked objects:
  8732 ;;		On entry : 0/0
  8733 ;;		On exit  : 0/0
  8734 ;;		Unchanged: 0/0
  8735 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8736 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8737 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8738 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8739 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8740 ;;Total ram usage:        4 bytes
  8741 ;; Hardware stack levels used:    1
  8742 ;; Hardware stack levels required when called:   10
  8743 ;; This function calls:
  8744 ;;		_nrf24l01Send
  8745 ;; This function is called by:
  8746 ;;		_checkTXPower
  8747 ;;		_nrf24l01SendPacket
  8748 ;; This function uses a non-reentrant model
  8749 ;;
  8750                           
  8751                           
  8752                           ;psect for function _nrf24l01ChangeTXPower
  8753  0AAF                     _nrf24l01ChangeTXPower:	
  8754                           
  8755                           ;nrf24l01.c: 35: n_RF_SETUP_t rfSetup;;nrf24l01.c: 36: rfSetup.byte = nrf24l01Send((unsi
      +                          gned) 0b00000000 | (unsigned) 0x06, 0);
  8756                           
  8757                           ;incstack = 0
  8758                           ; Regs used in _nrf24l01ChangeTXPower: [wreg+status,2+status,0+pclath+cstack]
  8759  0AAF  0020               	movlb	0	; select bank0
  8760  0AB0  01A0               	clrf	nrf24l01Send@data
  8761  0AB1  3006               	movlw	6
  8762  0AB2  3188  20CA  318A   	fcall	_nrf24l01Send
  8763  0AB5  0020               	movlb	0	; select bank0
  8764  0AB6  00A5               	movwf	??_nrf24l01ChangeTXPower
  8765  0AB7  0825               	movf	??_nrf24l01ChangeTXPower,w
  8766  0AB8  00A6               	movwf	nrf24l01ChangeTXPower@rfSetup
  8767                           
  8768                           ;nrf24l01.c: 38: if (addPower > 0){
  8769  0AB9  0824               	movf	nrf24l01ChangeTXPower@addPower+1,w
  8770  0ABA  3A80               	xorlw	128
  8771  0ABB  00A5               	movwf	??_nrf24l01ChangeTXPower
  8772  0ABC  3080               	movlw	128
  8773  0ABD  0225               	subwf	??_nrf24l01ChangeTXPower,w
  8774  0ABE  1D03               	skipz
  8775  0ABF  2AC2               	goto	u2815
  8776  0AC0  3001               	movlw	1
  8777  0AC1  0223               	subwf	nrf24l01ChangeTXPower@addPower,w
  8778  0AC2                     u2815:	
  8779  0AC2  1C03               	skipc
  8780  0AC3  2AD4               	goto	l2785
  8781                           
  8782                           ;nrf24l01.c: 39: if (rfSetup.RF_PWR < 3){
  8783  0AC4  0020               	movlb	0	; select bank0
  8784  0AC5  0C26               	rrf	nrf24l01ChangeTXPower@rfSetup,w
  8785  0AC6  3903               	andlw	3
  8786  0AC7  3A03               	xorlw	3
  8787  0AC8  1903               	skipnz
  8788  0AC9  2AD4               	goto	l2785
  8789                           
  8790                           ;nrf24l01.c: 40: rfSetup.RF_PWR++;
  8791  0ACA  0C26               	rrf	nrf24l01ChangeTXPower@rfSetup,w
  8792  0ACB  3903               	andlw	3
  8793  0ACC  00A5               	movwf	??_nrf24l01ChangeTXPower
  8794  0ACD  0AA5               	incf	??_nrf24l01ChangeTXPower,f
  8795  0ACE  0DA5               	rlf	??_nrf24l01ChangeTXPower,f
  8796  0ACF  0826               	movf	nrf24l01ChangeTXPower@rfSetup,w
  8797  0AD0  0625               	xorwf	??_nrf24l01ChangeTXPower,w
  8798  0AD1  39F9               	andlw	-7
  8799  0AD2  0625               	xorwf	??_nrf24l01ChangeTXPower,w
  8800  0AD3  00A6               	movwf	nrf24l01ChangeTXPower@rfSetup
  8801  0AD4                     l2785:	
  8802                           
  8803                           ;nrf24l01.c: 41: };nrf24l01.c: 42: };nrf24l01.c: 44: if (addPower < 0){
  8804  0AD4  0020               	movlb	0	; select bank0
  8805  0AD5  1FA4               	btfss	nrf24l01ChangeTXPower@addPower+1,7
  8806  0AD6  2AE6               	goto	l2791
  8807                           
  8808                           ;nrf24l01.c: 45: if (rfSetup.RF_PWR > 0){
  8809  0AD7  0C26               	rrf	nrf24l01ChangeTXPower@rfSetup,w
  8810  0AD8  3903               	andlw	3
  8811  0AD9  3A00               	xorlw	0
  8812  0ADA  1903               	skipnz
  8813  0ADB  2AE6               	goto	l2791
  8814                           
  8815                           ;nrf24l01.c: 46: rfSetup.RF_PWR--;
  8816  0ADC  0C26               	rrf	nrf24l01ChangeTXPower@rfSetup,w
  8817  0ADD  3903               	andlw	3
  8818  0ADE  00A5               	movwf	??_nrf24l01ChangeTXPower
  8819  0ADF  03A5               	decf	??_nrf24l01ChangeTXPower,f
  8820  0AE0  0DA5               	rlf	??_nrf24l01ChangeTXPower,f
  8821  0AE1  0826               	movf	nrf24l01ChangeTXPower@rfSetup,w
  8822  0AE2  0625               	xorwf	??_nrf24l01ChangeTXPower,w
  8823  0AE3  39F9               	andlw	-7
  8824  0AE4  0625               	xorwf	??_nrf24l01ChangeTXPower,w
  8825  0AE5  00A6               	movwf	nrf24l01ChangeTXPower@rfSetup
  8826  0AE6                     l2791:	
  8827                           
  8828                           ;nrf24l01.c: 47: };nrf24l01.c: 48: };nrf24l01.c: 50: nrf24l01Send((unsigned) 0b00100000 
      +                          | (unsigned) 0x06, rfSetup.byte);
  8829  0AE6  0826               	movf	nrf24l01ChangeTXPower@rfSetup,w
  8830  0AE7  00A5               	movwf	??_nrf24l01ChangeTXPower
  8831  0AE8  0825               	movf	??_nrf24l01ChangeTXPower,w
  8832  0AE9  00A0               	movwf	nrf24l01Send@data
  8833  0AEA  3026               	movlw	38
  8834  0AEB  3188  20CA         	fcall	_nrf24l01Send
  8835  0AED  0008               	return
  8836  0AEE                     __end_of_nrf24l01ChangeTXPower:	
  8837                           
  8838                           	psect	text37
  8839  08CA                     __ptext37:	
  8840 ;; *************** function _nrf24l01Send *****************
  8841 ;; Defined at:
  8842 ;;		line 9 in file "nrf24l01.c"
  8843 ;; Parameters:    Size  Location     Type
  8844 ;;  command         1    wreg     unsigned char 
  8845 ;;  data            1    0[BANK0 ] unsigned char 
  8846 ;; Auto vars:     Size  Location     Type
  8847 ;;  command         1    2[BANK0 ] unsigned char 
  8848 ;; Return value:  Size  Location     Type
  8849 ;;                  1    wreg      unsigned char 
  8850 ;; Registers used:
  8851 ;;		wreg, status,2, status,0, pclath, cstack
  8852 ;; Tracked objects:
  8853 ;;		On entry : 0/0
  8854 ;;		On exit  : 0/0
  8855 ;;		Unchanged: 0/0
  8856 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8857 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8858 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8859 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8860 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8861 ;;Total ram usage:        3 bytes
  8862 ;; Hardware stack levels used:    1
  8863 ;; Hardware stack levels required when called:    9
  8864 ;; This function calls:
  8865 ;;		_enableInterrupts
  8866 ;;		_nrf24l01SPIEnd
  8867 ;;		_nrf24l01SPISend
  8868 ;;		_nrf24l01SPIStart
  8869 ;; This function is called by:
  8870 ;;		_loop
  8871 ;;		_nrf24l01ChangeTXPower
  8872 ;;		_nrf24l01SetRXMode
  8873 ;;		_nrf24l01SetRXPipe
  8874 ;;		_nrf24l01InitRegisters
  8875 ;; This function uses a non-reentrant model
  8876 ;;
  8877                           
  8878                           
  8879                           ;psect for function _nrf24l01Send
  8880  08CA                     _nrf24l01Send:	
  8881                           
  8882                           ;incstack = 0
  8883                           ; Regs used in _nrf24l01Send: [wreg+status,2+status,0+pclath+cstack]
  8884                           ;nrf24l01Send@command stored from wreg
  8885  08CA  0020               	movlb	0	; select bank0
  8886  08CB  00A2               	movwf	nrf24l01Send@command
  8887                           
  8888                           ;nrf24l01.c: 12: enableInterrupts(0);
  8889  08CC  3000               	movlw	0
  8890  08CD  3197  2744  3188   	fcall	_enableInterrupts
  8891                           
  8892                           ;nrf24l01.c: 15: nrf24l01SPIStart();
  8893  08D0  3197  274C  3188   	fcall	_nrf24l01SPIStart
  8894                           
  8895                           ;nrf24l01.c: 18: nrf24l01SPISend(command);
  8896  08D3  0020               	movlb	0	; select bank0
  8897  08D4  0822               	movf	nrf24l01Send@command,w
  8898  08D5  3197  275D  3188   	fcall	_nrf24l01SPISend
  8899                           
  8900                           ;nrf24l01.c: 21: data = nrf24l01SPISend(data);
  8901  08D8  0020               	movlb	0	; select bank0
  8902  08D9  0820               	movf	nrf24l01Send@data,w
  8903  08DA  3197  275D  3188   	fcall	_nrf24l01SPISend
  8904  08DD  0020               	movlb	0	; select bank0
  8905  08DE  00A1               	movwf	??_nrf24l01Send
  8906  08DF  0821               	movf	??_nrf24l01Send,w
  8907  08E0  00A0               	movwf	nrf24l01Send@data
  8908                           
  8909                           ;nrf24l01.c: 24: nrf24l01SPIEnd();
  8910  08E1  3197  273D  3188   	fcall	_nrf24l01SPIEnd
  8911                           
  8912                           ;nrf24l01.c: 27: enableInterrupts(1);
  8913  08E4  3001               	movlw	1
  8914  08E5  3197  2744         	fcall	_enableInterrupts
  8915                           
  8916                           ;nrf24l01.c: 29: return data;
  8917  08E7  0020               	movlb	0	; select bank0
  8918  08E8  0820               	movf	nrf24l01Send@data,w
  8919  08E9  0008               	return
  8920  08EA                     __end_of_nrf24l01Send:	
  8921                           
  8922                           	psect	text38
  8923  0803                     __ptext38:	
  8924 ;; *************** function ___lbtoft *****************
  8925 ;; Defined at:
  8926 ;;		line 27 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\lbtoft.c"
  8927 ;; Parameters:    Size  Location     Type
  8928 ;;  c               1    wreg     unsigned char 
  8929 ;; Auto vars:     Size  Location     Type
  8930 ;;  c               1   15[BANK0 ] unsigned char 
  8931 ;; Return value:  Size  Location     Type
  8932 ;;                  3    8[BANK0 ] float 
  8933 ;; Registers used:
  8934 ;;		wreg, status,2, status,0, pclath, cstack
  8935 ;; Tracked objects:
  8936 ;;		On entry : 0/0
  8937 ;;		On exit  : 0/0
  8938 ;;		Unchanged: 0/0
  8939 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8940 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8941 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8942 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8943 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8944 ;;Total ram usage:        8 bytes
  8945 ;; Hardware stack levels used:    1
  8946 ;; Hardware stack levels required when called:    8
  8947 ;; This function calls:
  8948 ;;		___ftpack
  8949 ;; This function is called by:
  8950 ;;		_loop
  8951 ;; This function uses a non-reentrant model
  8952 ;;
  8953                           
  8954                           
  8955                           ;psect for function ___lbtoft
  8956  0803                     ___lbtoft:	
  8957                           
  8958                           ;incstack = 0
  8959                           ; Regs used in ___lbtoft: [wreg+status,2+status,0+pclath+cstack]
  8960                           ;___lbtoft@c stored from wreg
  8961  0803  0020               	movlb	0	; select bank0
  8962  0804  00AF               	movwf	___lbtoft@c
  8963  0805  082F               	movf	___lbtoft@c,w
  8964  0806  00AB               	movwf	??___lbtoft
  8965  0807  01AC               	clrf	??___lbtoft+1
  8966  0808  01AD               	clrf	??___lbtoft+2
  8967  0809  082B               	movf	??___lbtoft,w
  8968  080A  00A0               	movwf	___ftpack@arg
  8969  080B  082C               	movf	??___lbtoft+1,w
  8970  080C  00A1               	movwf	___ftpack@arg+1
  8971  080D  082D               	movf	??___lbtoft+2,w
  8972  080E  00A2               	movwf	___ftpack@arg+2
  8973  080F  308E               	movlw	142
  8974  0810  00AE               	movwf	??___lbtoft+3
  8975  0811  082E               	movf	??___lbtoft+3,w
  8976  0812  00A3               	movwf	___ftpack@exp
  8977  0813  01A4               	clrf	___ftpack@sign
  8978  0814  318C  24A2         	fcall	___ftpack
  8979  0816  0020               	movlb	0	; select bank0
  8980  0817  0820               	movf	?___ftpack,w
  8981  0818  00A8               	movwf	?___lbtoft
  8982  0819  0821               	movf	?___ftpack+1,w
  8983  081A  00A9               	movwf	?___lbtoft+1
  8984  081B  0822               	movf	?___ftpack+2,w
  8985  081C  00AA               	movwf	?___lbtoft+2
  8986  081D  0008               	return
  8987  081E                     __end_of___lbtoft:	
  8988                           
  8989                           	psect	text39
  8990  179F                     __ptext39:	
  8991 ;; *************** function ___lwtoft *****************
  8992 ;; Defined at:
  8993 ;;		line 28 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\lwtoft.c"
  8994 ;; Parameters:    Size  Location     Type
  8995 ;;  c               2    8[BANK0 ] unsigned int 
  8996 ;; Auto vars:     Size  Location     Type
  8997 ;;		None
  8998 ;; Return value:  Size  Location     Type
  8999 ;;                  3    8[BANK0 ] float 
  9000 ;; Registers used:
  9001 ;;		wreg, status,2, status,0, pclath, cstack
  9002 ;; Tracked objects:
  9003 ;;		On entry : 0/0
  9004 ;;		On exit  : 0/0
  9005 ;;		Unchanged: 0/0
  9006 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9007 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9008 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9009 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9010 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9011 ;;Total ram usage:        4 bytes
  9012 ;; Hardware stack levels used:    1
  9013 ;; Hardware stack levels required when called:    8
  9014 ;; This function calls:
  9015 ;;		___ftpack
  9016 ;; This function is called by:
  9017 ;;		_main
  9018 ;; This function uses a non-reentrant model
  9019 ;;
  9020                           
  9021                           
  9022                           ;psect for function ___lwtoft
  9023  179F                     ___lwtoft:	
  9024                           
  9025                           ;incstack = 0
  9026                           ; Regs used in ___lwtoft: [wreg+status,2+status,0+pclath+cstack]
  9027  179F  0020               	movlb	0	; select bank0
  9028  17A0  0828               	movf	___lwtoft@c,w
  9029  17A1  00A0               	movwf	___ftpack@arg
  9030  17A2  0829               	movf	___lwtoft@c+1,w
  9031  17A3  00A1               	movwf	___ftpack@arg+1
  9032  17A4  01A2               	clrf	___ftpack@arg+2
  9033  17A5  308E               	movlw	142
  9034  17A6  00AB               	movwf	??___lwtoft
  9035  17A7  082B               	movf	??___lwtoft,w
  9036  17A8  00A3               	movwf	___ftpack@exp
  9037  17A9  01A4               	clrf	___ftpack@sign
  9038  17AA  318C  24A2         	fcall	___ftpack
  9039  17AC  0020               	movlb	0	; select bank0
  9040  17AD  0820               	movf	?___ftpack,w
  9041  17AE  00A8               	movwf	?___lwtoft
  9042  17AF  0821               	movf	?___ftpack+1,w
  9043  17B0  00A9               	movwf	?___lwtoft+1
  9044  17B1  0822               	movf	?___ftpack+2,w
  9045  17B2  00AA               	movwf	?___lwtoft+2
  9046  17B3  0008               	return
  9047  17B4                     __end_of___lwtoft:	
  9048                           
  9049                           	psect	text40
  9050  0CA2                     __ptext40:	
  9051 ;; *************** function ___ftpack *****************
  9052 ;; Defined at:
  9053 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\float.c"
  9054 ;; Parameters:    Size  Location     Type
  9055 ;;  arg             3    0[BANK0 ] unsigned um
  9056 ;;  exp             1    3[BANK0 ] unsigned char 
  9057 ;;  sign            1    4[BANK0 ] unsigned char 
  9058 ;; Auto vars:     Size  Location     Type
  9059 ;;		None
  9060 ;; Return value:  Size  Location     Type
  9061 ;;                  3    0[BANK0 ] float 
  9062 ;; Registers used:
  9063 ;;		wreg, status,2, status,0
  9064 ;; Tracked objects:
  9065 ;;		On entry : 0/0
  9066 ;;		On exit  : 0/0
  9067 ;;		Unchanged: 0/0
  9068 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9069 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9070 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9071 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9072 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9073 ;;Total ram usage:        8 bytes
  9074 ;; Hardware stack levels used:    1
  9075 ;; Hardware stack levels required when called:    7
  9076 ;; This function calls:
  9077 ;;		Nothing
  9078 ;; This function is called by:
  9079 ;;		___awtoft
  9080 ;;		___ftadd
  9081 ;;		___ftdiv
  9082 ;;		___ftmul
  9083 ;;		___lbtoft
  9084 ;;		___lltoft
  9085 ;;		___lwtoft
  9086 ;; This function uses a non-reentrant model
  9087 ;;
  9088                           
  9089                           
  9090                           ;psect for function ___ftpack
  9091  0CA2                     ___ftpack:	
  9092                           
  9093                           ;incstack = 0
  9094                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
  9095  0CA2  0020               	movlb	0	; select bank0
  9096  0CA3  0823               	movf	___ftpack@exp,w
  9097  0CA4  1903               	btfsc	3,2
  9098  0CA5  2CAB               	goto	l2229
  9099  0CA6  0822               	movf	___ftpack@arg+2,w
  9100  0CA7  0421               	iorwf	___ftpack@arg+1,w
  9101  0CA8  0420               	iorwf	___ftpack@arg,w
  9102  0CA9  1D03               	skipz
  9103  0CAA  2CBC               	goto	l2235
  9104  0CAB                     l2229:	
  9105  0CAB  3000               	movlw	0
  9106  0CAC  00A0               	movwf	?___ftpack
  9107  0CAD  3000               	movlw	0
  9108  0CAE  00A1               	movwf	?___ftpack+1
  9109  0CAF  3000               	movlw	0
  9110  0CB0  00A2               	movwf	?___ftpack+2
  9111  0CB1  0008               	return
  9112  0CB2                     l2233:	
  9113  0CB2  3001               	movlw	1
  9114  0CB3  00A5               	movwf	??___ftpack
  9115  0CB4  0825               	movf	??___ftpack,w
  9116  0CB5  07A3               	addwf	___ftpack@exp,f
  9117  0CB6  3001               	movlw	1
  9118  0CB7                     u1715:	
  9119  0CB7  36A2               	lsrf	___ftpack@arg+2,f
  9120  0CB8  0CA1               	rrf	___ftpack@arg+1,f
  9121  0CB9  0CA0               	rrf	___ftpack@arg,f
  9122  0CBA  0B89               	decfsz	9,f
  9123  0CBB  2CB7               	goto	u1715
  9124  0CBC                     l2235:	
  9125  0CBC  30FE               	movlw	254
  9126  0CBD  0522               	andwf	___ftpack@arg+2,w
  9127  0CBE  1903               	btfsc	3,2
  9128  0CBF  2CD5               	goto	l678
  9129  0CC0  2CB2               	goto	l2233
  9130  0CC1                     l2237:	
  9131  0CC1  3001               	movlw	1
  9132  0CC2  00A5               	movwf	??___ftpack
  9133  0CC3  0825               	movf	??___ftpack,w
  9134  0CC4  07A3               	addwf	___ftpack@exp,f
  9135  0CC5  3001               	movlw	1
  9136  0CC6  07A0               	addwf	___ftpack@arg,f
  9137  0CC7  3000               	movlw	0
  9138  0CC8  1803               	skipnc
  9139  0CC9  3001               	movlw	1
  9140  0CCA  07A1               	addwf	___ftpack@arg+1,f
  9141  0CCB  3000               	movlw	0
  9142  0CCC  1803               	skipnc
  9143  0CCD  3001               	movlw	1
  9144  0CCE  07A2               	addwf	___ftpack@arg+2,f
  9145  0CCF  3001               	movlw	1
  9146  0CD0                     u1735:	
  9147  0CD0  36A2               	lsrf	___ftpack@arg+2,f
  9148  0CD1  0CA1               	rrf	___ftpack@arg+1,f
  9149  0CD2  0CA0               	rrf	___ftpack@arg,f
  9150  0CD3  0B89               	decfsz	9,f
  9151  0CD4  2CD0               	goto	u1735
  9152  0CD5                     l678:	
  9153  0CD5  30FF               	movlw	255
  9154  0CD6  0522               	andwf	___ftpack@arg+2,w
  9155  0CD7  1903               	btfsc	3,2
  9156  0CD8  2CE2               	goto	l2245
  9157  0CD9  2CC1               	goto	l2237
  9158  0CDA                     l2243:	
  9159  0CDA  3001               	movlw	1
  9160  0CDB  02A3               	subwf	___ftpack@exp,f
  9161  0CDC  3001               	movlw	1
  9162  0CDD                     u1755:	
  9163  0CDD  35A0               	lslf	___ftpack@arg,f
  9164  0CDE  0DA1               	rlf	___ftpack@arg+1,f
  9165  0CDF  0DA2               	rlf	___ftpack@arg+2,f
  9166  0CE0  0B89               	decfsz	9,f
  9167  0CE1  2CDD               	goto	u1755
  9168  0CE2                     l2245:	
  9169  0CE2  1BA1               	btfsc	___ftpack@arg+1,7
  9170  0CE3  2CE8               	goto	l685
  9171  0CE4  3002               	movlw	2
  9172  0CE5  0223               	subwf	___ftpack@exp,w
  9173  0CE6  1803               	skipnc
  9174  0CE7  2CDA               	goto	l2243
  9175  0CE8                     l685:	
  9176  0CE8  1823               	btfsc	___ftpack@exp,0
  9177  0CE9  2CF0               	goto	l686
  9178  0CEA  30FF               	movlw	255
  9179  0CEB  05A0               	andwf	___ftpack@arg,f
  9180  0CEC  307F               	movlw	127
  9181  0CED  05A1               	andwf	___ftpack@arg+1,f
  9182  0CEE  30FF               	movlw	255
  9183  0CEF  05A2               	andwf	___ftpack@arg+2,f
  9184  0CF0                     l686:	
  9185  0CF0  1003               	clrc
  9186  0CF1  0CA3               	rrf	___ftpack@exp,f
  9187  0CF2  0823               	movf	___ftpack@exp,w
  9188  0CF3  00A5               	movwf	??___ftpack
  9189  0CF4  01A6               	clrf	??___ftpack+1
  9190  0CF5  01A7               	clrf	??___ftpack+2
  9191  0CF6  3010               	movlw	16
  9192  0CF7                     u1795:	
  9193  0CF7  35A5               	lslf	??___ftpack,f
  9194  0CF8  0DA6               	rlf	??___ftpack+1,f
  9195  0CF9  0DA7               	rlf	??___ftpack+2,f
  9196  0CFA  0B89               	decfsz	9,f
  9197  0CFB  2CF7               	goto	u1795
  9198  0CFC  0825               	movf	??___ftpack,w
  9199  0CFD  04A0               	iorwf	___ftpack@arg,f
  9200  0CFE  0826               	movf	??___ftpack+1,w
  9201  0CFF  04A1               	iorwf	___ftpack@arg+1,f
  9202  0D00  0827               	movf	??___ftpack+2,w
  9203  0D01  04A2               	iorwf	___ftpack@arg+2,f
  9204  0D02  0824               	movf	___ftpack@sign,w
  9205  0D03  1903               	btfsc	3,2
  9206  0D04  0008               	return
  9207  0D05  17A2               	bsf	___ftpack@arg+2,7
  9208  0D06  0008               	return
  9209  0D07                     __end_of___ftpack:	
  9210                           
  9211                           	psect	intentry
  9212  0004                     __pintentry:	
  9213 ;; *************** function _ISR *****************
  9214 ;; Defined at:
  9215 ;;		line 14 in file "main.c"
  9216 ;; Parameters:    Size  Location     Type
  9217 ;;		None
  9218 ;; Auto vars:     Size  Location     Type
  9219 ;;		None
  9220 ;; Return value:  Size  Location     Type
  9221 ;;                  1    wreg      void 
  9222 ;; Registers used:
  9223 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9224 ;; Tracked objects:
  9225 ;;		On entry : 0/0
  9226 ;;		On exit  : 0/0
  9227 ;;		Unchanged: 0/0
  9228 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9229 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9230 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9231 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9232 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9233 ;;Total ram usage:        0 bytes
  9234 ;; Hardware stack levels used:    1
  9235 ;; Hardware stack levels required when called:    6
  9236 ;; This function calls:
  9237 ;;		_nrf24l01ISR
  9238 ;; This function is called by:
  9239 ;;		Interrupt level 1
  9240 ;; This function uses a non-reentrant model
  9241 ;;
  9242                           
  9243  0004                     _ISR:	
  9244                           
  9245                           ;incstack = 0
  9246  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
  9247                           
  9248                           ; Regs used in _ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9249  0005  3180               	pagesel	$
  9250                           
  9251                           ;main.c: 16: if (PIR0bits.INTF){
  9252  0006  0020               	movlb	0	; select bank0
  9253  0007  1C10               	btfss	16,0	;volatile
  9254  0008  280D               	goto	i1l165
  9255                           
  9256                           ;main.c: 17: nrf24l01ISR();
  9257  0009  318B  23B9         	fcall	_nrf24l01ISR
  9258                           
  9259                           ;main.c: 18: PIR0bits.INTF = 0;
  9260  000B  0020               	movlb	0	; select bank0
  9261  000C  1010               	bcf	16,0	;volatile
  9262  000D                     i1l165:	
  9263  000D  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
  9264  000E  0009               	retfie
  9265  000F                     __end_of_ISR:	
  9266                           
  9267                           	psect	text42
  9268  0BB9                     __ptext42:	
  9269 ;; *************** function _nrf24l01ISR *****************
  9270 ;; Defined at:
  9271 ;;		line 246 in file "nrf24l01.c"
  9272 ;; Parameters:    Size  Location     Type
  9273 ;;		None
  9274 ;; Auto vars:     Size  Location     Type
  9275 ;;  status          1   12[COMMON] struct .
  9276 ;; Return value:  Size  Location     Type
  9277 ;;                  1    wreg      void 
  9278 ;; Registers used:
  9279 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9280 ;; Tracked objects:
  9281 ;;		On entry : 0/0
  9282 ;;		On exit  : 0/0
  9283 ;;		Unchanged: 0/0
  9284 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9285 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9286 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9287 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9288 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9289 ;;Total ram usage:        2 bytes
  9290 ;; Hardware stack levels used:    1
  9291 ;; Hardware stack levels required when called:    5
  9292 ;; This function calls:
  9293 ;;		_exception
  9294 ;;		_nrf24l01CheckACK
  9295 ;;		_nrf24l01ReceivePacket
  9296 ;;		i1_nrf24l01Send
  9297 ;;		i1_nrf24l01SetRXMode
  9298 ;; This function is called by:
  9299 ;;		_ISR
  9300 ;; This function uses a non-reentrant model
  9301 ;;
  9302                           
  9303                           
  9304                           ;psect for function _nrf24l01ISR
  9305  0BB9                     _nrf24l01ISR:	
  9306                           
  9307                           ;nrf24l01.c: 248: n_STATUS_t status;;nrf24l01.c: 249: status.byte = nrf24l01Send((unsign
      +                          ed) 0b00000000 | (unsigned) 0x07, 0);
  9308                           
  9309                           ;incstack = 0
  9310                           ; Regs used in _nrf24l01ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9311  0BB9  01F1               	clrf	i1nrf24l01Send@data
  9312  0BBA  3007               	movlw	7
  9313  0BBB  3197  27E5  318B   	fcall	i1_nrf24l01Send
  9314  0BBE  00FB               	movwf	??_nrf24l01ISR
  9315  0BBF  087B               	movf	??_nrf24l01ISR,w
  9316  0BC0  00FC               	movwf	nrf24l01ISR@status
  9317                           
  9318                           ;nrf24l01.c: 254: };nrf24l01.c: 257: if (status.byte == 0xFF){
  9319  0BC1  0A7C               	incf	nrf24l01ISR@status,w
  9320  0BC2  1D03               	btfss	3,2
  9321  0BC3  2BC8               	goto	i1l3229
  9322                           
  9323                           ;nrf24l01.c: 258: exception(2);
  9324  0BC4  3002               	movlw	2
  9325  0BC5  3180  2002  318B   	fcall	_exception
  9326  0BC8                     i1l3229:	
  9327                           
  9328                           ;nrf24l01.c: 259: };nrf24l01.c: 261: if (status.TX_DS){
  9329  0BC8  1EFC               	btfss	nrf24l01ISR@status,5
  9330  0BC9  2BD8               	goto	i1l3237
  9331                           
  9332                           ;nrf24l01.c: 264: nrf24l01.TXBusy = 0;
  9333  0BCA  107D               	bcf	_nrf24l01,0	;volatile
  9334                           
  9335                           ;nrf24l01.c: 267: if (!nrf24l01.RXMode){
  9336  0BCB  197D               	btfsc	_nrf24l01,2	;volatile
  9337  0BCC  2BD8               	goto	i1l3237
  9338                           
  9339                           ;nrf24l01.c: 268: if (TXPacket->packetData.ACKRequest){
  9340  0BCD  0021               	movlb	1	; select bank1
  9341  0BCE  086B               	movf	_TXPacket^(0+128),w
  9342  0BCF  0086               	movwf	6
  9343  0BD0  086C               	movf	(_TXPacket+1)^(0+128),w
  9344  0BD1  0087               	movwf	7
  9345  0BD2  1D01               	btfss	1,2
  9346  0BD3  2BD8               	goto	i1l3237
  9347                           
  9348                           ;nrf24l01.c: 271: nrf24l01SetRXMode(1);
  9349  0BD4  3001               	movlw	1
  9350  0BD5  318A  2270  318B   	fcall	i1_nrf24l01SetRXMode
  9351  0BD8                     i1l3237:	
  9352                           
  9353                           ;nrf24l01.c: 272: };nrf24l01.c: 273: };nrf24l01.c: 274: };nrf24l01.c: 277: if (status.RX
      +                          _DR){
  9354  0BD8  1F7C               	btfss	nrf24l01ISR@status,6
  9355  0BD9  2BFA               	goto	i1l3251
  9356                           
  9357                           ;nrf24l01.c: 280: if (!nrf24l01.RXPending){
  9358  0BDA  18FD               	btfsc	_nrf24l01,1	;volatile
  9359  0BDB  2BF9               	goto	i1l320
  9360                           
  9361                           ;nrf24l01.c: 283: nrf24l01.RXPending = 1;
  9362  0BDC  14FD               	bsf	_nrf24l01,1	;volatile
  9363                           
  9364                           ;nrf24l01.c: 285: nrf24l01ReceivePacket();
  9365  0BDD  318C  2402  318B   	fcall	_nrf24l01ReceivePacket
  9366                           
  9367                           ;nrf24l01.c: 288: RXPacket.packetData.RPD = nrf24l01Send((unsigned) 0b00000000 | (unsign
      +                          ed) 0x09, 0);
  9368  0BE0  01F1               	clrf	i1nrf24l01Send@data
  9369  0BE1  3009               	movlw	9
  9370  0BE2  3197  27E5  318B   	fcall	i1_nrf24l01Send
  9371  0BE5  00FB               	movwf	??_nrf24l01ISR
  9372  0BE6  0023               	movlb	3	; select bank3
  9373  0BE7  0820               	movf	_RXPacket^(0+384),w
  9374  0BE8  067B               	xorwf	??_nrf24l01ISR,w
  9375  0BE9  39FE               	andlw	-2
  9376  0BEA  067B               	xorwf	??_nrf24l01ISR,w
  9377  0BEB  00A0               	movwf	_RXPacket^(0+384)
  9378                           
  9379                           ;nrf24l01.c: 291: RXPacket.packetData.Pipe = status.RX_P_NO;
  9380  0BEC  0C7C               	rrf	nrf24l01ISR@status,w
  9381  0BED  3907               	andlw	7
  9382  0BEE  00FB               	movwf	??_nrf24l01ISR
  9383  0BEF  0EFB               	swapf	??_nrf24l01ISR,f
  9384  0BF0  0820               	movf	_RXPacket^(0+384),w
  9385  0BF1  067B               	xorwf	??_nrf24l01ISR,w
  9386  0BF2  398F               	andlw	-113
  9387  0BF3  067B               	xorwf	??_nrf24l01ISR,w
  9388  0BF4  00A0               	movwf	_RXPacket^(0+384)
  9389                           
  9390                           ;nrf24l01.c: 293: nrf24l01CheckACK();
  9391  0BF5  3189  217B  318B   	fcall	_nrf24l01CheckACK
  9392                           
  9393                           ;nrf24l01.c: 294: }
  9394  0BF8  2BFA               	goto	i1l3251
  9395  0BF9                     i1l320:	
  9396                           
  9397                           ;nrf24l01.c: 297: else{;nrf24l01.c: 300: status.RX_DR = 0;
  9398  0BF9  137C               	bcf	nrf24l01ISR@status,6
  9399  0BFA                     i1l3251:	
  9400                           
  9401                           ;nrf24l01.c: 301: };nrf24l01.c: 303: };nrf24l01.c: 306: nrf24l01Send((unsigned) 0b001000
      +                          00 | (unsigned) 0x07, status.byte);
  9402  0BFA  087C               	movf	nrf24l01ISR@status,w
  9403  0BFB  00FB               	movwf	??_nrf24l01ISR
  9404  0BFC  087B               	movf	??_nrf24l01ISR,w
  9405  0BFD  00F1               	movwf	i1nrf24l01Send@data
  9406  0BFE  3027               	movlw	39
  9407  0BFF  3197  27E5         	fcall	i1_nrf24l01Send
  9408  0C01  0008               	return
  9409  0C02                     __end_of_nrf24l01ISR:	
  9410                           
  9411                           	psect	text43
  9412  0C02                     __ptext43:	
  9413 ;; *************** function _nrf24l01ReceivePacket *****************
  9414 ;; Defined at:
  9415 ;;		line 135 in file "nrf24l01.c"
  9416 ;; Parameters:    Size  Location     Type
  9417 ;;		None
  9418 ;; Auto vars:     Size  Location     Type
  9419 ;;  i               1   10[COMMON] unsigned char 
  9420 ;;  width           1    9[COMMON] unsigned char 
  9421 ;; Return value:  Size  Location     Type
  9422 ;;                  1    wreg      void 
  9423 ;; Registers used:
  9424 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9425 ;; Tracked objects:
  9426 ;;		On entry : 0/0
  9427 ;;		On exit  : 0/0
  9428 ;;		Unchanged: 0/0
  9429 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9430 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9431 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9432 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9433 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9434 ;;Total ram usage:        3 bytes
  9435 ;; Hardware stack levels used:    1
  9436 ;; Hardware stack levels required when called:    3
  9437 ;; This function calls:
  9438 ;;		_nrf24l01CEHigh
  9439 ;;		_nrf24l01CELow
  9440 ;;		_nrf24l01SPIEnd
  9441 ;;		_nrf24l01SPISend
  9442 ;;		_nrf24l01SPIStart
  9443 ;;		i1_memset
  9444 ;;		i1_nrf24l01Send
  9445 ;; This function is called by:
  9446 ;;		_nrf24l01ISR
  9447 ;; This function uses a non-reentrant model
  9448 ;;
  9449                           
  9450                           
  9451                           ;psect for function _nrf24l01ReceivePacket
  9452  0C02                     _nrf24l01ReceivePacket:	
  9453                           
  9454                           ;nrf24l01.c: 138: memset(RXPacket.Message, 0 ,sizeof(RXPacket.Message));
  9455                           
  9456                           ;incstack = 0
  9457                           ; Regs used in _nrf24l01ReceivePacket: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  9458  0C02  30A1               	movlw	low (_RXPacket+1)
  9459  0C03  00F0               	movwf	i1memset@p1
  9460  0C04  3001               	movlw	high (_RXPacket+1)
  9461  0C05  00F1               	movwf	i1memset@p1+1
  9462  0C06  3000               	movlw	0
  9463  0C07  00F2               	movwf	i1memset@c
  9464  0C08  00F3               	movwf	i1memset@c+1
  9465  0C09  3020               	movlw	32
  9466  0C0A  00F4               	movwf	i1memset@n
  9467  0C0B  3000               	movlw	0
  9468  0C0C  00F5               	movwf	i1memset@n+1
  9469  0C0D  3197  27B4  318C   	fcall	i1_memset
  9470                           
  9471                           ;nrf24l01.c: 139: RXPacket.packetData.byte = 0x00;
  9472  0C10  0023               	movlb	3	; select bank3
  9473  0C11  01A0               	clrf	_RXPacket^(0+384)
  9474                           
  9475                           ;nrf24l01.c: 142: unsigned char width = nrf24l01Send((unsigned) 0b01100000, 0);
  9476  0C12  01F1               	clrf	i1nrf24l01Send@data
  9477  0C13  3060               	movlw	96
  9478  0C14  3197  27E5  318C   	fcall	i1_nrf24l01Send
  9479  0C17  00F8               	movwf	??_nrf24l01ReceivePacket
  9480  0C18  0878               	movf	??_nrf24l01ReceivePacket,w
  9481  0C19  00F9               	movwf	nrf24l01ReceivePacket@width
  9482                           
  9483                           ;nrf24l01.c: 143: unsigned char i = 0;
  9484  0C1A  01FA               	clrf	nrf24l01ReceivePacket@i
  9485                           
  9486                           ;nrf24l01.c: 146: nrf24l01CELow();
  9487  0C1B  3197  2731  318C   	fcall	_nrf24l01CELow
  9488                           
  9489                           ;nrf24l01.c: 149: nrf24l01SPIStart();
  9490  0C1E  3197  274C  318C   	fcall	_nrf24l01SPIStart
  9491                           
  9492                           ;nrf24l01.c: 152: nrf24l01SPISend((unsigned) 0b01100001);
  9493  0C21  3061               	movlw	97
  9494  0C22  3197  275D  318C   	fcall	_nrf24l01SPISend
  9495                           
  9496                           ;nrf24l01.c: 155: RXPacket.packetData.byte = nrf24l01SPISend(0);
  9497  0C25  3000               	movlw	0
  9498  0C26  3197  275D  318C   	fcall	_nrf24l01SPISend
  9499  0C29  00F8               	movwf	??_nrf24l01ReceivePacket
  9500  0C2A  0878               	movf	??_nrf24l01ReceivePacket,w
  9501  0C2B  0023               	movlb	3	; select bank3
  9502  0C2C  00A0               	movwf	_RXPacket^(0+384)
  9503                           
  9504                           ;nrf24l01.c: 156: width--;
  9505  0C2D  3001               	movlw	1
  9506  0C2E  02F9               	subwf	nrf24l01ReceivePacket@width,f
  9507                           
  9508                           ;nrf24l01.c: 158: for (i = 0; (i < width) && (i < sizeof(RXPacket.Message)); i++){
  9509  0C2F  01FA               	clrf	nrf24l01ReceivePacket@i
  9510  0C30  2C41               	goto	i1l3075
  9511  0C31                     i1l3071:	
  9512                           
  9513                           ;nrf24l01.c: 160: RXPacket.Message[i] = nrf24l01SPISend(0);
  9514  0C31  3000               	movlw	0
  9515  0C32  3197  275D  318C   	fcall	_nrf24l01SPISend
  9516  0C35  00F8               	movwf	??_nrf24l01ReceivePacket
  9517  0C36  087A               	movf	nrf24l01ReceivePacket@i,w
  9518  0C37  3EA1               	addlw	(low ((_RXPacket| (0+256)+1)))& (0+255)
  9519  0C38  0086               	movwf	6
  9520  0C39  3001               	movlw	1	; select bank3/4
  9521  0C3A  0087               	movwf	7
  9522  0C3B  0878               	movf	??_nrf24l01ReceivePacket,w
  9523  0C3C  0081               	movwf	1
  9524  0C3D  3001               	movlw	1
  9525  0C3E  00F8               	movwf	??_nrf24l01ReceivePacket
  9526  0C3F  0878               	movf	??_nrf24l01ReceivePacket,w
  9527  0C40  07FA               	addwf	nrf24l01ReceivePacket@i,f
  9528  0C41                     i1l3075:	
  9529  0C41  0879               	movf	nrf24l01ReceivePacket@width,w
  9530  0C42  027A               	subwf	nrf24l01ReceivePacket@i,w
  9531  0C43  1803               	skipnc
  9532  0C44  2C49               	goto	i1l3079
  9533  0C45  3020               	movlw	32
  9534  0C46  027A               	subwf	nrf24l01ReceivePacket@i,w
  9535  0C47  1C03               	skipc
  9536  0C48  2C31               	goto	i1l3071
  9537  0C49                     i1l3079:	
  9538                           
  9539                           ;nrf24l01.c: 161: };nrf24l01.c: 164: nrf24l01SPIEnd();
  9540  0C49  3197  273D  318C   	fcall	_nrf24l01SPIEnd
  9541                           
  9542                           ;nrf24l01.c: 167: nrf24l01CEHigh();
  9543  0C4C  3197  272E         	fcall	_nrf24l01CEHigh
  9544  0C4E  0008               	return
  9545  0C4F                     __end_of_nrf24l01ReceivePacket:	
  9546                           
  9547                           	psect	text44
  9548  17B4                     __ptext44:	
  9549 ;; *************** function i1_memset *****************
  9550 ;; Defined at:
  9551 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\memset.c"
  9552 ;; Parameters:    Size  Location     Type
  9553 ;;  p1              2    0[COMMON] PTR void 
  9554 ;;		 -> RXPacket(33), main@packet(33), loop@packet(33), 
  9555 ;;  c               2    2[COMMON] int 
  9556 ;;  n               2    4[COMMON] unsigned int 
  9557 ;; Auto vars:     Size  Location     Type
  9558 ;;  memset          2    6[COMMON] PTR unsigned char 
  9559 ;;		 -> RXPacket(33), main@packet(33), loop@packet(33), 
  9560 ;; Return value:  Size  Location     Type
  9561 ;;                  1    wreg      PTR void 
  9562 ;; Registers used:
  9563 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  9564 ;; Tracked objects:
  9565 ;;		On entry : 0/0
  9566 ;;		On exit  : 0/0
  9567 ;;		Unchanged: 0/0
  9568 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9569 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9570 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9571 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9572 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9573 ;;Total ram usage:        8 bytes
  9574 ;; Hardware stack levels used:    1
  9575 ;; This function calls:
  9576 ;;		Nothing
  9577 ;; This function is called by:
  9578 ;;		_nrf24l01ReceivePacket
  9579 ;; This function uses a non-reentrant model
  9580 ;;
  9581                           
  9582                           
  9583                           ;psect for function i1_memset
  9584  17B4                     i1_memset:	
  9585                           
  9586                           ;incstack = 0
  9587                           ; Regs used in i1_memset: [wreg+fsr1l+fsr1h+status,2+status,0]
  9588  17B4  0871               	movf	i1memset@p1+1,w
  9589  17B5  00F7               	movwf	i1memset@p+1
  9590  17B6  0870               	movf	i1memset@p1,w
  9591  17B7  00F6               	movwf	i1memset@p
  9592  17B8                     i1l2921:	
  9593  17B8  3001               	movlw	1
  9594  17B9  02F4               	subwf	i1memset@n,f
  9595  17BA  3000               	movlw	0
  9596  17BB  3BF5               	subwfb	i1memset@n+1,f
  9597  17BC  0A74               	incf	i1memset@n,w
  9598  17BD  1903               	btfsc	3,2
  9599  17BE  0A75               	incf	i1memset@n+1,w
  9600  17BF  1903               	btfsc	3,2
  9601  17C0  0008               	return
  9602  17C1  0876               	movf	i1memset@p,w
  9603  17C2  0086               	movwf	6
  9604  17C3  0877               	movf	i1memset@p+1,w
  9605  17C4  0087               	movwf	7
  9606  17C5  0872               	movf	i1memset@c,w
  9607  17C6  0081               	movwf	1
  9608  17C7  3001               	movlw	1
  9609  17C8  07F6               	addwf	i1memset@p,f
  9610  17C9  3000               	movlw	0
  9611  17CA  3DF7               	addwfc	i1memset@p+1,f
  9612  17CB  2FB8               	goto	i1l2921
  9613  17CC                     __end_ofi1_memset:	
  9614                           ;	Return value of i1_memset is never used
  9615                           
  9616                           
  9617                           	psect	text45
  9618  097B                     __ptext45:	
  9619 ;; *************** function _nrf24l01CheckACK *****************
  9620 ;; Defined at:
  9621 ;;		line 98 in file "nrf24l01.c"
  9622 ;; Parameters:    Size  Location     Type
  9623 ;;		None
  9624 ;; Auto vars:     Size  Location     Type
  9625 ;;		None
  9626 ;; Return value:  Size  Location     Type
  9627 ;;                  1    wreg      void 
  9628 ;; Registers used:
  9629 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9630 ;; Tracked objects:
  9631 ;;		On entry : 0/0
  9632 ;;		On exit  : 0/0
  9633 ;;		Unchanged: 0/0
  9634 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9635 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9636 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9637 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9638 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9639 ;;Total ram usage:        3 bytes
  9640 ;; Hardware stack levels used:    1
  9641 ;; Hardware stack levels required when called:    4
  9642 ;; This function calls:
  9643 ;;		_strcmp
  9644 ;;		i1_nrf24l01SetRXMode
  9645 ;; This function is called by:
  9646 ;;		_nrf24l01ISR
  9647 ;; This function uses a non-reentrant model
  9648 ;;
  9649                           
  9650                           
  9651                           ;psect for function _nrf24l01CheckACK
  9652  097B                     _nrf24l01CheckACK:	
  9653                           
  9654                           ;nrf24l01.c: 102: if (!RXPacket.packetData.IsACK){
  9655                           
  9656                           ;incstack = 0
  9657                           ; Regs used in _nrf24l01CheckACK: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9658  097B  0023               	movlb	3	; select bank3
  9659  097C  1DA0               	btfss	_RXPacket^(0+384),3
  9660  097D  0008               	return
  9661                           
  9662                           ;nrf24l01.c: 104: };nrf24l01.c: 107: nrf24l01.RXPending = 0;
  9663                           
  9664                           ;nrf24l01.c: 103: return;
  9665  097E  10FD               	bcf	_nrf24l01,1	;volatile
  9666                           
  9667                           ;nrf24l01.c: 110: if (!TXPacket->packetData.ACKRequest){
  9668  097F  0021               	movlb	1	; select bank1
  9669  0980  086B               	movf	_TXPacket^(0+128),w
  9670  0981  0086               	movwf	6
  9671  0982  086C               	movf	(_TXPacket+1)^(0+128),w
  9672  0983  0087               	movwf	7
  9673  0984  1D01               	btfss	1,2
  9674  0985  0008               	return
  9675                           
  9676                           ;nrf24l01.c: 112: };nrf24l01.c: 115: if (strcmp(TXPacket->Message, RXPacket.Message) != 
      +                          0){
  9677                           
  9678                           ;nrf24l01.c: 111: return;
  9679  0986  086B               	movf	_TXPacket^(0+128),w
  9680  0987  3E01               	addlw	1
  9681  0988  00F7               	movwf	??_nrf24l01CheckACK
  9682  0989  3000               	movlw	0
  9683  098A  3D6C               	addwfc	(_TXPacket+1)^(0+128),w
  9684  098B  00F8               	movwf	??_nrf24l01CheckACK+1
  9685  098C  0877               	movf	??_nrf24l01CheckACK,w
  9686  098D  00F0               	movwf	strcmp@s1
  9687  098E  0878               	movf	??_nrf24l01CheckACK+1,w
  9688  098F  00F1               	movwf	strcmp@s1+1
  9689  0990  30A1               	movlw	(low ((_RXPacket| (0+256)+1)))& (0+255)
  9690  0991  00F9               	movwf	??_nrf24l01CheckACK+2
  9691  0992  0879               	movf	??_nrf24l01CheckACK+2,w
  9692  0993  00F2               	movwf	strcmp@s2
  9693  0994  3189  212D  3189   	fcall	_strcmp
  9694  0997  0870               	movf	?_strcmp,w
  9695  0998  0471               	iorwf	?_strcmp+1,w
  9696  0999  1D03               	btfss	3,2
  9697  099A  0008               	return
  9698                           
  9699                           ;nrf24l01.c: 117: };nrf24l01.c: 124: TXPacket->packetData.ACKRequest = 0;
  9700                           
  9701                           ;nrf24l01.c: 116: return;
  9702  099B  0021               	movlb	1	; select bank1
  9703  099C  086B               	movf	_TXPacket^(0+128),w
  9704  099D  0086               	movwf	6
  9705  099E  086C               	movf	(_TXPacket+1)^(0+128),w
  9706  099F  0087               	movwf	7
  9707  09A0  1101               	bcf	1,2
  9708                           
  9709                           ;nrf24l01.c: 127: nrf24l01SetRXMode(0);
  9710  09A1  3000               	movlw	0
  9711  09A2  318A  2270         	fcall	i1_nrf24l01SetRXMode
  9712  09A4  0008               	return
  9713  09A5                     __end_of_nrf24l01CheckACK:	
  9714                           
  9715                           	psect	text46
  9716  0A70                     __ptext46:	
  9717 ;; *************** function i1_nrf24l01SetRXMode *****************
  9718 ;; Defined at:
  9719 ;;		line 54 in file "nrf24l01.c"
  9720 ;; Parameters:    Size  Location     Type
  9721 ;;  rxMode          1    wreg     unsigned char 
  9722 ;; Auto vars:     Size  Location     Type
  9723 ;;  rxMode          1    6[COMMON] unsigned char 
  9724 ;;  nrf24l01SetR    1    5[COMMON] struct .
  9725 ;; Return value:  Size  Location     Type
  9726 ;;                  1    wreg      void 
  9727 ;; Registers used:
  9728 ;;		wreg, status,2, status,0, pclath, cstack
  9729 ;; Tracked objects:
  9730 ;;		On entry : 0/0
  9731 ;;		On exit  : 0/0
  9732 ;;		Unchanged: 0/0
  9733 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9734 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9735 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9736 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9737 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9738 ;;Total ram usage:        3 bytes
  9739 ;; Hardware stack levels used:    1
  9740 ;; Hardware stack levels required when called:    3
  9741 ;; This function calls:
  9742 ;;		_nrf24l01CEHigh
  9743 ;;		_nrf24l01CELow
  9744 ;;		i1_nrf24l01Send
  9745 ;; This function is called by:
  9746 ;;		_nrf24l01CheckACK
  9747 ;;		_nrf24l01ISR
  9748 ;; This function uses a non-reentrant model
  9749 ;;
  9750                           
  9751                           
  9752                           ;psect for function i1_nrf24l01SetRXMode
  9753  0A70                     i1_nrf24l01SetRXMode:	
  9754                           
  9755                           ;incstack = 0
  9756                           ; Regs used in i1_nrf24l01SetRXMode: [wreg+status,2+status,0+pclath+cstack]
  9757                           ;i1nrf24l01SetRXMode@rxMode stored from wreg
  9758  0A70  00F6               	movwf	i1nrf24l01SetRXMode@rxMode
  9759                           
  9760                           ;nrf24l01.c: 56: n_CONFIG_t config;;nrf24l01.c: 59: config.byte = nrf24l01Send((unsigned
      +                          ) 0b00000000 | (unsigned) 0x00, 0);
  9761  0A71  01F1               	clrf	i1nrf24l01Send@data
  9762  0A72  3000               	movlw	0
  9763  0A73  3197  27E5  318A   	fcall	i1_nrf24l01Send
  9764  0A76  00F4               	movwf	??i1_nrf24l01SetRXMode
  9765  0A77  0874               	movf	??i1_nrf24l01SetRXMode,w
  9766  0A78  00F5               	movwf	i1nrf24l01SetRXMode@config
  9767                           
  9768                           ;nrf24l01.c: 62: if (config.PRIM_RX != rxMode){
  9769  0A79  0875               	movf	i1nrf24l01SetRXMode@config,w
  9770  0A7A  3901               	andlw	1
  9771  0A7B  0676               	xorwf	i1nrf24l01SetRXMode@rxMode,w
  9772  0A7C  1903               	skipnz
  9773  0A7D  2AA9               	goto	i1l2913
  9774                           
  9775                           ;nrf24l01.c: 65: nrf24l01CELow();
  9776  0A7E  3197  2731  318A   	fcall	_nrf24l01CELow
  9777                           
  9778                           ;nrf24l01.c: 66: _delay((unsigned long)((200)*(32000000/4000000.0)));
  9779  0A81  30E4               	movlw	228
  9780  0A82                     u349_27:	
  9781  0A82  3200               	nop2
  9782  0A83  3200               	nop2
  9783  0A84  0B89               	decfsz	9,f
  9784  0A85  2A82               	goto	u349_27
  9785  0A86  3200               	nop2
  9786  0A87  3200               	nop2
  9787                           
  9788                           ;nrf24l01.c: 69: config.PRIM_RX = rxMode;
  9789  0A88  0876               	movf	i1nrf24l01SetRXMode@rxMode,w
  9790  0A89  3901               	andlw	1
  9791  0A8A  1075               	bcf	i1nrf24l01SetRXMode@config,0
  9792  0A8B  1D03               	skipz
  9793  0A8C  1475               	bsf	i1nrf24l01SetRXMode@config,0
  9794                           
  9795                           ;nrf24l01.c: 70: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x00, config.byte);
  9796  0A8D  0875               	movf	i1nrf24l01SetRXMode@config,w
  9797  0A8E  00F4               	movwf	??i1_nrf24l01SetRXMode
  9798  0A8F  0874               	movf	??i1_nrf24l01SetRXMode,w
  9799  0A90  00F1               	movwf	i1nrf24l01Send@data
  9800  0A91  3020               	movlw	32
  9801  0A92  3197  27E5  318A   	fcall	i1_nrf24l01Send
  9802                           
  9803                           ;nrf24l01.c: 73: _delay((unsigned long)((200)*(32000000/4000000.0)));
  9804  0A95  30E4               	movlw	228
  9805  0A96                     u350_27:	
  9806  0A96  3200               	nop2
  9807  0A97  3200               	nop2
  9808  0A98  0B89               	decfsz	9,f
  9809  0A99  2A96               	goto	u350_27
  9810  0A9A  3200               	nop2
  9811  0A9B  3200               	nop2
  9812                           
  9813                           ;nrf24l01.c: 76: if (rxMode){
  9814  0A9C  0876               	movf	i1nrf24l01SetRXMode@rxMode,w
  9815  0A9D  1903               	btfsc	3,2
  9816  0A9E  2AA9               	goto	i1l2913
  9817                           
  9818                           ;nrf24l01.c: 77: nrf24l01CEHigh();
  9819  0A9F  3197  272E  318A   	fcall	_nrf24l01CEHigh
  9820                           
  9821                           ;nrf24l01.c: 78: _delay((unsigned long)((200)*(32000000/4000000.0)));
  9822  0AA2  30E4               	movlw	228
  9823  0AA3                     u351_27:	
  9824  0AA3  3200               	nop2
  9825  0AA4  3200               	nop2
  9826  0AA5  0B89               	decfsz	9,f
  9827  0AA6  2AA3               	goto	u351_27
  9828  0AA7  3200               	nop2
  9829  0AA8  3200               	nop2
  9830  0AA9                     i1l2913:	
  9831                           
  9832                           ;nrf24l01.c: 79: };nrf24l01.c: 80: };nrf24l01.c: 83: nrf24l01.RXMode = rxMode;
  9833  0AA9  0876               	movf	i1nrf24l01SetRXMode@rxMode,w
  9834  0AAA  3901               	andlw	1
  9835  0AAB  117D               	bcf	_nrf24l01,2	;volatile
  9836  0AAC  1D03               	skipz
  9837  0AAD  157D               	bsf	_nrf24l01,2	;volatile
  9838  0AAE  0008               	return
  9839  0AAF                     __end_ofi1_nrf24l01SetRXMode:	
  9840                           
  9841                           	psect	text47
  9842  17E5                     __ptext47:	
  9843 ;; *************** function i1_nrf24l01Send *****************
  9844 ;; Defined at:
  9845 ;;		line 9 in file "nrf24l01.c"
  9846 ;; Parameters:    Size  Location     Type
  9847 ;;  command         1    wreg     unsigned char 
  9848 ;;  data            1    1[COMMON] unsigned char 
  9849 ;; Auto vars:     Size  Location     Type
  9850 ;;  command         1    3[COMMON] unsigned char 
  9851 ;; Return value:  Size  Location     Type
  9852 ;;                  1    wreg      unsigned char 
  9853 ;; Registers used:
  9854 ;;		wreg, status,2, status,0, pclath, cstack
  9855 ;; Tracked objects:
  9856 ;;		On entry : 0/0
  9857 ;;		On exit  : 0/0
  9858 ;;		Unchanged: 0/0
  9859 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9860 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9861 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9862 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9863 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9864 ;;Total ram usage:        3 bytes
  9865 ;; Hardware stack levels used:    1
  9866 ;; Hardware stack levels required when called:    2
  9867 ;; This function calls:
  9868 ;;		_enableInterrupts
  9869 ;;		_nrf24l01SPIEnd
  9870 ;;		_nrf24l01SPISend
  9871 ;;		_nrf24l01SPIStart
  9872 ;; This function is called by:
  9873 ;;		_nrf24l01ReceivePacket
  9874 ;;		_nrf24l01ISR
  9875 ;;		i1_nrf24l01SetRXMode
  9876 ;; This function uses a non-reentrant model
  9877 ;;
  9878                           
  9879                           
  9880                           ;psect for function i1_nrf24l01Send
  9881  17E5                     i1_nrf24l01Send:	
  9882                           
  9883                           ;incstack = 0
  9884                           ; Regs used in i1_nrf24l01Send: [wreg+status,2+status,0+pclath+cstack]
  9885                           ;i1nrf24l01Send@command stored from wreg
  9886  17E5  00F3               	movwf	i1nrf24l01Send@command
  9887                           
  9888                           ;nrf24l01.c: 12: enableInterrupts(0);
  9889  17E6  3000               	movlw	0
  9890  17E7  3197  2744  3197   	fcall	_enableInterrupts
  9891                           
  9892                           ;nrf24l01.c: 15: nrf24l01SPIStart();
  9893  17EA  3197  274C  3197   	fcall	_nrf24l01SPIStart
  9894                           
  9895                           ;nrf24l01.c: 18: nrf24l01SPISend(command);
  9896  17ED  0873               	movf	i1nrf24l01Send@command,w
  9897  17EE  3197  275D  3197   	fcall	_nrf24l01SPISend
  9898                           
  9899                           ;nrf24l01.c: 21: data = nrf24l01SPISend(data);
  9900  17F1  0871               	movf	i1nrf24l01Send@data,w
  9901  17F2  3197  275D  3197   	fcall	_nrf24l01SPISend
  9902  17F5  00F2               	movwf	??i1_nrf24l01Send
  9903  17F6  0872               	movf	??i1_nrf24l01Send,w
  9904  17F7  00F1               	movwf	i1nrf24l01Send@data
  9905                           
  9906                           ;nrf24l01.c: 24: nrf24l01SPIEnd();
  9907  17F8  3197  273D  3197   	fcall	_nrf24l01SPIEnd
  9908                           
  9909                           ;nrf24l01.c: 27: enableInterrupts(1);
  9910  17FB  3001               	movlw	1
  9911  17FC  3197  2744         	fcall	_enableInterrupts
  9912                           
  9913                           ;nrf24l01.c: 29: return data;
  9914  17FE  0871               	movf	i1nrf24l01Send@data,w
  9915  17FF  0008               	return
  9916  1800                     __end_ofi1_nrf24l01Send:	
  9917                           
  9918                           	psect	text48
  9919  174C                     __ptext48:	
  9920 ;; *************** function _nrf24l01SPIStart *****************
  9921 ;; Defined at:
  9922 ;;		line 64 in file "interface.c"
  9923 ;; Parameters:    Size  Location     Type
  9924 ;;		None
  9925 ;; Auto vars:     Size  Location     Type
  9926 ;;		None
  9927 ;; Return value:  Size  Location     Type
  9928 ;;                  1    wreg      void 
  9929 ;; Registers used:
  9930 ;;		wreg, status,2, status,0, pclath, cstack
  9931 ;; Tracked objects:
  9932 ;;		On entry : 0/0
  9933 ;;		On exit  : 0/0
  9934 ;;		Unchanged: 0/0
  9935 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9936 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9937 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9938 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9939 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9940 ;;Total ram usage:        0 bytes
  9941 ;; Hardware stack levels used:    1
  9942 ;; Hardware stack levels required when called:    8
  9943 ;; This function calls:
  9944 ;;		_nrf24l01CSLow
  9945 ;; This function is called by:
  9946 ;;		_nrf24l01Send
  9947 ;;		_nrf24l01ReceivePacket
  9948 ;;		_nrf24l01SendPacket
  9949 ;;		_nrf24l01SetTXPipe
  9950 ;;		_nrf24l01InitRegisters
  9951 ;;		i1_nrf24l01Send
  9952 ;; This function uses a non-reentrant model
  9953 ;;
  9954                           
  9955                           
  9956                           ;psect for function _nrf24l01SPIStart
  9957  174C                     _nrf24l01SPIStart:	
  9958                           
  9959                           ;interface.c: 65: nrf24l01CSLow();
  9960                           
  9961                           ;incstack = 0
  9962 ;; hardware stack exceeded
  9963                           ; Regs used in _nrf24l01SPIStart: [wreg+status,2+status,0+pclath+cstack]
  9964  174C  3188  2000  3197   	fcall	_nrf24l01CSLow
  9965                           
  9966                           ;interface.c: 66: _delay((unsigned long)((10)*(32000000/4000000.0)));
  9967  174F  301A               	movlw	26
  9968  1750                     u352_27:	
  9969  1750  0B89               	decfsz	9,f
  9970  1751  2F50               	goto	u352_27
  9971  1752  3200               	nop2
  9972  1753  0008               	return
  9973  1754                     __end_of_nrf24l01SPIStart:	
  9974                           
  9975                           	psect	text49
  9976  0800                     __ptext49:	
  9977 ;; *************** function _nrf24l01CSLow *****************
  9978 ;; Defined at:
  9979 ;;		line 17 in file "interface.c"
  9980 ;; Parameters:    Size  Location     Type
  9981 ;;		None
  9982 ;; Auto vars:     Size  Location     Type
  9983 ;;		None
  9984 ;; Return value:  Size  Location     Type
  9985 ;;                  1    wreg      void 
  9986 ;; Registers used:
  9987 ;;		None
  9988 ;; Tracked objects:
  9989 ;;		On entry : 0/0
  9990 ;;		On exit  : 0/0
  9991 ;;		Unchanged: 0/0
  9992 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9993 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9994 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9995 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9996 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9997 ;;Total ram usage:        0 bytes
  9998 ;; Hardware stack levels used:    1
  9999 ;; Hardware stack levels required when called:    7
 10000 ;; This function calls:
 10001 ;;		Nothing
 10002 ;; This function is called by:
 10003 ;;		_nrf24l01SPIStart
 10004 ;; This function uses a non-reentrant model
 10005 ;;
 10006                           
 10007                           
 10008                           ;psect for function _nrf24l01CSLow
 10009  0800                     _nrf24l01CSLow:	
 10010                           
 10011                           ;interface.c: 18: PORTAbits.RA1 = 0;
 10012                           
 10013                           ;incstack = 0
 10014 ;; hardware stack exceeded
 10015                           ; Regs used in _nrf24l01CSLow: []
 10016  0800  0020               	movlb	0	; select bank0
 10017  0801  108C               	bcf	12,1	;volatile
 10018  0802  0008               	return
 10019  0803                     __end_of_nrf24l01CSLow:	
 10020                           
 10021                           	psect	text50
 10022  175D                     __ptext50:	
 10023 ;; *************** function _nrf24l01SPISend *****************
 10024 ;; Defined at:
 10025 ;;		line 51 in file "interface.c"
 10026 ;; Parameters:    Size  Location     Type
 10027 ;;  data            1    wreg     unsigned char 
 10028 ;; Auto vars:     Size  Location     Type
 10029 ;;  data            1    0[COMMON] unsigned char 
 10030 ;; Return value:  Size  Location     Type
 10031 ;;                  1    wreg      unsigned char 
 10032 ;; Registers used:
 10033 ;;		wreg
 10034 ;; Tracked objects:
 10035 ;;		On entry : 0/0
 10036 ;;		On exit  : 0/0
 10037 ;;		Unchanged: 0/0
 10038 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10039 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10040 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10041 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10042 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10043 ;;Total ram usage:        0 bytes
 10044 ;; Hardware stack levels used:    1
 10045 ;; Hardware stack levels required when called:    7
 10046 ;; This function calls:
 10047 ;;		Nothing
 10048 ;; This function is called by:
 10049 ;;		_nrf24l01Send
 10050 ;;		_nrf24l01ReceivePacket
 10051 ;;		_nrf24l01SendPacket
 10052 ;;		_nrf24l01SetTXPipe
 10053 ;;		_nrf24l01InitRegisters
 10054 ;;		i1_nrf24l01Send
 10055 ;; This function uses a non-reentrant model
 10056 ;;
 10057                           
 10058                           
 10059                           ;psect for function _nrf24l01SPISend
 10060  175D                     _nrf24l01SPISend:	
 10061                           
 10062                           ;incstack = 0
 10063 ;; hardware stack exceeded
 10064                           ; Regs used in _nrf24l01SPISend: [wreg]
 10065                           ;nrf24l01SPISend@data stored from wreg
 10066  175D  00F0               	movwf	nrf24l01SPISend@data
 10067                           
 10068                           ;interface.c: 52: SSP1BUF = data;
 10069  175E  0870               	movf	nrf24l01SPISend@data,w
 10070  175F  0024               	movlb	4	; select bank4
 10071  1760  0091               	movwf	17	;volatile
 10072                           
 10073                           ;interface.c: 54: PORTCbits.RC4 = 1;
 10074  1761  0020               	movlb	0	; select bank0
 10075  1762  160E               	bsf	14,4	;volatile
 10076  1763                     i1l48:	
 10077                           ;interface.c: 56: while (!SSP1STATbits.BF){
 10078                           
 10079  1763  0024               	movlb	4	; select bank4
 10080  1764  1814               	btfsc	20,0	;volatile
 10081  1765  2F68               	goto	i1l2261
 10082                           
 10083                           ;interface.c: 57: __nop();
 10084  1766  0000               	nop
 10085  1767  2F63               	goto	i1l48
 10086  1768                     i1l2261:	
 10087                           
 10088                           ;interface.c: 58: };interface.c: 60: return SSP1BUF;
 10089  1768  0811               	movf	17,w	;volatile
 10090  1769  0008               	return
 10091  176A                     __end_of_nrf24l01SPISend:	
 10092                           
 10093                           	psect	text51
 10094  173D                     __ptext51:	
 10095 ;; *************** function _nrf24l01SPIEnd *****************
 10096 ;; Defined at:
 10097 ;;		line 70 in file "interface.c"
 10098 ;; Parameters:    Size  Location     Type
 10099 ;;		None
 10100 ;; Auto vars:     Size  Location     Type
 10101 ;;		None
 10102 ;; Return value:  Size  Location     Type
 10103 ;;                  1    wreg      void 
 10104 ;; Registers used:
 10105 ;;		wreg, status,2, status,0, pclath, cstack
 10106 ;; Tracked objects:
 10107 ;;		On entry : 0/0
 10108 ;;		On exit  : 0/0
 10109 ;;		Unchanged: 0/0
 10110 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10111 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10112 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10113 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10114 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10115 ;;Total ram usage:        0 bytes
 10116 ;; Hardware stack levels used:    1
 10117 ;; Hardware stack levels required when called:    8
 10118 ;; This function calls:
 10119 ;;		_nrf24l01CSHigh
 10120 ;; This function is called by:
 10121 ;;		_nrf24l01Send
 10122 ;;		_nrf24l01ReceivePacket
 10123 ;;		_nrf24l01SendPacket
 10124 ;;		_nrf24l01SetTXPipe
 10125 ;;		_nrf24l01InitRegisters
 10126 ;;		i1_nrf24l01Send
 10127 ;; This function uses a non-reentrant model
 10128 ;;
 10129                           
 10130                           
 10131                           ;psect for function _nrf24l01SPIEnd
 10132  173D                     _nrf24l01SPIEnd:	
 10133                           
 10134                           ;interface.c: 71: _delay((unsigned long)((10)*(32000000/4000000.0)));
 10135                           
 10136                           ;incstack = 0
 10137 ;; hardware stack exceeded
 10138                           ; Regs used in _nrf24l01SPIEnd: [wreg+status,2+status,0+pclath+cstack]
 10139  173D  301A               	movlw	26
 10140  173E                     u353_27:	
 10141  173E  0B89               	decfsz	9,f
 10142  173F  2F3E               	goto	u353_27
 10143  1740  3200               	nop2
 10144                           
 10145                           ;interface.c: 72: nrf24l01CSHigh();
 10146  1741  3197  2734         	fcall	_nrf24l01CSHigh
 10147  1743  0008               	return
 10148  1744                     __end_of_nrf24l01SPIEnd:	
 10149                           
 10150                           	psect	text52
 10151  1734                     __ptext52:	
 10152 ;; *************** function _nrf24l01CSHigh *****************
 10153 ;; Defined at:
 10154 ;;		line 22 in file "interface.c"
 10155 ;; Parameters:    Size  Location     Type
 10156 ;;		None
 10157 ;; Auto vars:     Size  Location     Type
 10158 ;;		None
 10159 ;; Return value:  Size  Location     Type
 10160 ;;                  1    wreg      void 
 10161 ;; Registers used:
 10162 ;;		None
 10163 ;; Tracked objects:
 10164 ;;		On entry : 0/0
 10165 ;;		On exit  : 0/0
 10166 ;;		Unchanged: 0/0
 10167 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10168 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10169 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10170 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10171 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10172 ;;Total ram usage:        0 bytes
 10173 ;; Hardware stack levels used:    1
 10174 ;; Hardware stack levels required when called:    7
 10175 ;; This function calls:
 10176 ;;		Nothing
 10177 ;; This function is called by:
 10178 ;;		_nrf24l01SPIEnd
 10179 ;; This function uses a non-reentrant model
 10180 ;;
 10181                           
 10182                           
 10183                           ;psect for function _nrf24l01CSHigh
 10184  1734                     _nrf24l01CSHigh:	
 10185                           
 10186                           ;interface.c: 23: PORTAbits.RA1 = 1;
 10187                           
 10188                           ;incstack = 0
 10189 ;; hardware stack exceeded
 10190                           ; Regs used in _nrf24l01CSHigh: []
 10191  1734  0020               	movlb	0	; select bank0
 10192  1735  148C               	bsf	12,1	;volatile
 10193  1736  0008               	return
 10194  1737                     __end_of_nrf24l01CSHigh:	
 10195                           
 10196                           	psect	text53
 10197  1744                     __ptext53:	
 10198 ;; *************** function _enableInterrupts *****************
 10199 ;; Defined at:
 10200 ;;		line 76 in file "interface.c"
 10201 ;; Parameters:    Size  Location     Type
 10202 ;;  enable          1    wreg     unsigned char 
 10203 ;; Auto vars:     Size  Location     Type
 10204 ;;  enable          1    0[COMMON] unsigned char 
 10205 ;; Return value:  Size  Location     Type
 10206 ;;                  1    wreg      void 
 10207 ;; Registers used:
 10208 ;;		wreg, status,0
 10209 ;; Tracked objects:
 10210 ;;		On entry : 0/0
 10211 ;;		On exit  : 0/0
 10212 ;;		Unchanged: 0/0
 10213 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10214 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10215 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10216 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10217 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10218 ;;Total ram usage:        0 bytes
 10219 ;; Hardware stack levels used:    1
 10220 ;; Hardware stack levels required when called:    7
 10221 ;; This function calls:
 10222 ;;		Nothing
 10223 ;; This function is called by:
 10224 ;;		_nrf24l01Send
 10225 ;;		_nrf24l01SendPacket
 10226 ;;		i1_nrf24l01Send
 10227 ;; This function uses a non-reentrant model
 10228 ;;
 10229                           
 10230                           
 10231                           ;psect for function _enableInterrupts
 10232  1744                     _enableInterrupts:	
 10233                           
 10234                           ;incstack = 0
 10235 ;; hardware stack exceeded
 10236                           ; Regs used in _enableInterrupts: [wreg+status,0]
 10237                           ;enableInterrupts@enable stored from wreg
 10238  1744  00F0               	movwf	enableInterrupts@enable
 10239                           
 10240                           ;interface.c: 77: PIE0bits.INTE = enable;
 10241  1745  0C70               	rrf	enableInterrupts@enable,w
 10242  1746  0021               	movlb	1	; select bank1
 10243  1747  1C03               	skipc
 10244  1748  1010               	bcf	16,0	;volatile
 10245  1749  1803               	skipnc
 10246  174A  1410               	bsf	16,0	;volatile
 10247  174B  0008               	return
 10248  174C                     __end_of_enableInterrupts:	
 10249                           
 10250                           	psect	text54
 10251  1731                     __ptext54:	
 10252 ;; *************** function _nrf24l01CELow *****************
 10253 ;; Defined at:
 10254 ;;		line 7 in file "interface.c"
 10255 ;; Parameters:    Size  Location     Type
 10256 ;;		None
 10257 ;; Auto vars:     Size  Location     Type
 10258 ;;		None
 10259 ;; Return value:  Size  Location     Type
 10260 ;;                  1    wreg      void 
 10261 ;; Registers used:
 10262 ;;		None
 10263 ;; Tracked objects:
 10264 ;;		On entry : 0/0
 10265 ;;		On exit  : 0/0
 10266 ;;		Unchanged: 0/0
 10267 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10268 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10269 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10270 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10271 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10272 ;;Total ram usage:        0 bytes
 10273 ;; Hardware stack levels used:    1
 10274 ;; Hardware stack levels required when called:    7
 10275 ;; This function calls:
 10276 ;;		Nothing
 10277 ;; This function is called by:
 10278 ;;		_nrf24l01SetRXMode
 10279 ;;		_nrf24l01ReceivePacket
 10280 ;;		_nrf24l01SendPacket
 10281 ;;		_nrf24l01Init
 10282 ;;		i1_nrf24l01SetRXMode
 10283 ;; This function uses a non-reentrant model
 10284 ;;
 10285                           
 10286                           
 10287                           ;psect for function _nrf24l01CELow
 10288  1731                     _nrf24l01CELow:	
 10289                           
 10290                           ;interface.c: 8: PORTAbits.RA0 = 0;
 10291                           
 10292                           ;incstack = 0
 10293 ;; hardware stack exceeded
 10294                           ; Regs used in _nrf24l01CELow: []
 10295  1731  0020               	movlb	0	; select bank0
 10296  1732  100C               	bcf	12,0	;volatile
 10297  1733  0008               	return
 10298  1734                     __end_of_nrf24l01CELow:	
 10299                           
 10300                           	psect	text55
 10301  172E                     __ptext55:	
 10302 ;; *************** function _nrf24l01CEHigh *****************
 10303 ;; Defined at:
 10304 ;;		line 12 in file "interface.c"
 10305 ;; Parameters:    Size  Location     Type
 10306 ;;		None
 10307 ;; Auto vars:     Size  Location     Type
 10308 ;;		None
 10309 ;; Return value:  Size  Location     Type
 10310 ;;                  1    wreg      void 
 10311 ;; Registers used:
 10312 ;;		None
 10313 ;; Tracked objects:
 10314 ;;		On entry : 0/0
 10315 ;;		On exit  : 0/0
 10316 ;;		Unchanged: 0/0
 10317 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10318 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10319 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10320 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10321 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10322 ;;Total ram usage:        0 bytes
 10323 ;; Hardware stack levels used:    1
 10324 ;; Hardware stack levels required when called:    7
 10325 ;; This function calls:
 10326 ;;		Nothing
 10327 ;; This function is called by:
 10328 ;;		_nrf24l01SetRXMode
 10329 ;;		_nrf24l01ReceivePacket
 10330 ;;		_nrf24l01SendPacket
 10331 ;;		_nrf24l01Init
 10332 ;;		i1_nrf24l01SetRXMode
 10333 ;; This function uses a non-reentrant model
 10334 ;;
 10335                           
 10336                           
 10337                           ;psect for function _nrf24l01CEHigh
 10338  172E                     _nrf24l01CEHigh:	
 10339                           
 10340                           ;interface.c: 13: PORTAbits.RA0 = 1;
 10341                           
 10342                           ;incstack = 0
 10343 ;; hardware stack exceeded
 10344                           ; Regs used in _nrf24l01CEHigh: []
 10345  172E  0020               	movlb	0	; select bank0
 10346  172F  140C               	bsf	12,0	;volatile
 10347  1730  0008               	return
 10348  1731                     __end_of_nrf24l01CEHigh:	
 10349                           
 10350                           	psect	text56
 10351  092D                     __ptext56:	
 10352 ;; *************** function _strcmp *****************
 10353 ;; Defined at:
 10354 ;;		line 33 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\strcmp.c"
 10355 ;; Parameters:    Size  Location     Type
 10356 ;;  s1              2    0[COMMON] PTR const unsigned char 
 10357 ;;		 -> packet.Message(32), packet.Message(32), NULL(0), main@packet(33), 
 10358 ;;		 -> loop@packet(33), 
 10359 ;;  s2              1    2[COMMON] PTR const unsigned char 
 10360 ;;		 -> RXPacket.Message(32), RXPacket(33), 
 10361 ;; Auto vars:     Size  Location     Type
 10362 ;;  r               1    4[COMMON] char 
 10363 ;; Return value:  Size  Location     Type
 10364 ;;                  2    0[COMMON] int 
 10365 ;; Registers used:
 10366 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0
 10367 ;; Tracked objects:
 10368 ;;		On entry : 0/0
 10369 ;;		On exit  : 0/0
 10370 ;;		Unchanged: 0/0
 10371 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10372 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10373 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10374 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10375 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10376 ;;Total ram usage:        5 bytes
 10377 ;; Hardware stack levels used:    1
 10378 ;; This function calls:
 10379 ;;		Nothing
 10380 ;; This function is called by:
 10381 ;;		_nrf24l01CheckACK
 10382 ;; This function uses a non-reentrant model
 10383 ;;
 10384                           
 10385                           
 10386                           ;psect for function _strcmp
 10387  092D                     _strcmp:	
 10388                           
 10389                           ;incstack = 0
 10390                           ; Regs used in _strcmp: [wreg-fsr1h+status,2+status,0]
 10391  092D  2936               	goto	i1l2831
 10392  092E                     i1l2827:	
 10393  092E  3001               	movlw	1
 10394  092F  07F0               	addwf	strcmp@s1,f
 10395  0930  3000               	movlw	0
 10396  0931  3DF1               	addwfc	strcmp@s1+1,f
 10397  0932  3001               	movlw	1
 10398  0933  00F3               	movwf	??_strcmp
 10399  0934  0873               	movf	??_strcmp,w
 10400  0935  07F2               	addwf	strcmp@s2,f
 10401  0936                     i1l2831:	
 10402  0936  0870               	movf	strcmp@s1,w
 10403  0937  0086               	movwf	6
 10404  0938  0871               	movf	strcmp@s1+1,w
 10405  0939  0087               	movwf	7
 10406  093A  0872               	movf	strcmp@s2,w
 10407  093B  0084               	movwf	4
 10408  093C  3001               	movlw	1	; select bank2/3
 10409  093D  0085               	movwf	5
 10410  093E  0300               	decf	0,w
 10411  093F  3AFF               	xorlw	255
 10412  0940  0701               	addwf	1,w
 10413  0941  00F3               	movwf	??_strcmp
 10414  0942  0873               	movf	??_strcmp,w
 10415  0943  00F4               	movwf	strcmp@r
 10416  0944  0874               	movf	strcmp@r,w
 10417  0945  1D03               	btfss	3,2
 10418  0946  294E               	goto	i1l2835
 10419  0947  0870               	movf	strcmp@s1,w
 10420  0948  0086               	movwf	6
 10421  0949  0871               	movf	strcmp@s1+1,w
 10422  094A  0087               	movwf	7
 10423  094B  0801               	movf	1,w
 10424  094C  1D03               	btfss	3,2
 10425  094D  292E               	goto	i1l2827
 10426  094E                     i1l2835:	
 10427  094E  0874               	movf	strcmp@r,w
 10428  094F  00F0               	movwf	?_strcmp
 10429  0950  01F1               	clrf	?_strcmp+1
 10430  0951  1BF0               	btfsc	?_strcmp,7
 10431  0952  03F1               	decf	?_strcmp+1,f
 10432  0953  0008               	return
 10433  0954                     __end_of_strcmp:	
 10434                           
 10435                           	psect	text57
 10436  0002                     __ptext57:	
 10437 ;; *************** function _exception *****************
 10438 ;; Defined at:
 10439 ;;		line 80 in file "interface.c"
 10440 ;; Parameters:    Size  Location     Type
 10441 ;;  exception       1    wreg     unsigned char 
 10442 ;; Auto vars:     Size  Location     Type
 10443 ;;  exception       1    0[COMMON] unsigned char 
 10444 ;; Return value:  Size  Location     Type
 10445 ;;                  1    wreg      void 
 10446 ;; Registers used:
 10447 ;;		wreg
 10448 ;; Tracked objects:
 10449 ;;		On entry : 0/0
 10450 ;;		On exit  : 0/0
 10451 ;;		Unchanged: 0/0
 10452 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10453 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10454 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10455 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10456 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10457 ;;Total ram usage:        0 bytes
 10458 ;; Hardware stack levels used:    1
 10459 ;; This function calls:
 10460 ;;		Nothing
 10461 ;; This function is called by:
 10462 ;;		_nrf24l01ISR
 10463 ;; This function uses a non-reentrant model
 10464 ;;
 10465                           
 10466                           
 10467                           ;psect for function _exception
 10468  0002                     _exception:	
 10469                           
 10470                           ;incstack = 0
 10471                           ; Regs used in _exception: [wreg]
 10472  0002  0001               	reset	;# 
 10473  0003  0008               	return
 10474  0004                     __end_of_exception:	
 10475  007E                     btemp	set	126	;btemp
 10476  007E                     int$flags	set	126
 10477  007E                     wtemp0	set	126


Data Sizes:
    Strings     45
    Constant    46
    Data        1
    BSS         86
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     13      14
    BANK0            80     80      80
    BANK1            80     71      79
    BANK2            80     48      65
    BANK3            80      0      61
    BANK4            80      0       0
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    ftoa@status	PTR int  size(1) Largest target is 2
		 -> setMessage@status(BANK1[2]), 

    strlen@s	PTR const unsigned char  size(2) Largest target is 33
		 -> packet.Message(BANK0[32]), packet.Message(BANK0[32]), NULL(NULL[0]), main@packet(BANK1[33]), 
		 -> loop@packet(BANK2[33]), romDataMap(BANK3[28]), 

    strlen@cp	PTR const unsigned char  size(2) Largest target is 33
		 -> packet.Message(BANK0[32]), packet.Message(BANK0[32]), NULL(NULL[0]), main@packet(BANK1[33]), 
		 -> loop@packet(BANK2[33]), romDataMap(BANK3[28]), 

    strcpy@from	PTR const unsigned char  size(2) Largest target is 4
		 -> STR_7(CODE[4]), 

    strcpy@to	PTR unsigned char  size(1) Largest target is 28
		 -> romDataMap(BANK3[28]), 

    strcpy@cp	PTR unsigned char  size(1) Largest target is 28
		 -> romDataMap(BANK3[28]), 

    strcmp@s2	PTR const unsigned char  size(1) Largest target is 33
		 -> RXPacket.Message(BANK3[32]), RXPacket(BANK3[33]), 

    strcmp@s1	PTR const unsigned char  size(2) Largest target is 33
		 -> packet.Message(BANK0[32]), packet.Message(BANK0[32]), NULL(NULL[0]), main@packet(BANK1[33]), 
		 -> loop@packet(BANK2[33]), 

    strcat@from	PTR const unsigned char  size(2) Largest target is 28
		 -> romDataMap.name(BANK3[16]), ftoa@buf(BANK2[17]), STR_8(CODE[5]), STR_6(CODE[6]), 
		 -> STR_5(CODE[7]), STR_4(CODE[5]), STR_3(CODE[5]), STR_2(CODE[2]), 
		 -> STR_1(CODE[2]), romDataMap(BANK3[28]), 

    strcat@to	PTR unsigned char  size(2) Largest target is 33
		 -> main@packet(BANK1[33]), loop@packet(BANK2[33]), 

    strcat@cp	PTR unsigned char  size(2) Largest target is 33
		 -> main@packet(BANK1[33]), loop@packet(BANK2[33]), 

    memset@p1	PTR void  size(2) Largest target is 33
		 -> RXPacket(BANK3[33]), main@packet(BANK1[33]), loop@packet(BANK2[33]), 

    memset@p	PTR unsigned char  size(2) Largest target is 33
		 -> RXPacket(BANK3[33]), main@packet(BANK1[33]), loop@packet(BANK2[33]), 

    ftoa@cp	PTR unsigned char  size(1) Largest target is 17
		 -> ftoa@buf(BANK2[17]), 

    sprintf@f	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_9(CODE[11]), 

    sprintf@sp	PTR unsigned char  size(1) Largest target is 17
		 -> ftoa@buf(BANK2[17]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    nrf24l01SendPacket@Packet	PTR struct . size(2) Largest target is 33
		 -> main@packet(BANK1[33]), loop@packet(BANK2[33]), 

    TXPacket	PTR struct . size(2) Largest target is 33
		 -> NULL(NULL[0]), main@packet(BANK1[33]), loop@packet(BANK2[33]), 

    sp__strcpy	PTR unsigned char  size(1) Largest target is 28
		 -> romDataMap(BANK3[28]), 

    nrf24l01GetPipe@name	PTR unsigned char  size(1) Largest target is 28
		 -> romDataMap(BANK3[28]), 

    sp__nrf24l01GetRXPacket	PTR struct . size(1) Largest target is 33
		 -> RXPacket(BANK3[33]), 

    checkTXPower@rxPacket	PTR struct . size(1) Largest target is 33
		 -> RXPacket(BANK3[33]), 

    sp__ftoa	PTR unsigned char  size(1) Largest target is 17
		 -> ftoa@buf(BANK2[17]), 

    setMessage@topic	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_8(CODE[5]), STR_6(CODE[6]), STR_5(CODE[7]), STR_4(CODE[5]), 
		 -> STR_3(CODE[5]), 

    sp__strcat	PTR unsigned char  size(2) Largest target is 33
		 -> main@packet(BANK1[33]), loop@packet(BANK2[33]), 

    sp__memset	PTR void  size(2) Largest target is 33
		 -> RXPacket(BANK3[33]), main@packet(BANK1[33]), loop@packet(BANK2[33]), 

    setMessage@packet	PTR struct . size(2) Largest target is 33
		 -> main@packet(BANK1[33]), loop@packet(BANK2[33]), 

    romData	PTR struct . size(1) Largest target is 28
		 -> romDataMap(BANK3[28]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    _ISR->_nrf24l01ISR
    _nrf24l01ISR->_nrf24l01ReceivePacket
    _nrf24l01ReceivePacket->i1_memset
    _nrf24l01CheckACK->i1_nrf24l01SetRXMode
    i1_nrf24l01SetRXMode->i1_nrf24l01Send

Critical Paths under _main in BANK0

    _nrf24l01Init->_nrf24l01InitRegisters
    _nrf24l01InitRegisters->_nrf24l01SetRXPipe
    _nrf24l01InitRegisters->_nrf24l01SetTXPipe
    _nrf24l01SetTXPipe->___bmul
    _nrf24l01SetRXPipe->_nrf24l01Send
    _nrf24l01GetPipe->___lwmod
    _nrf24l01GetPipe->_strlen
    _setMessage->_ftoa
    _strcat->_ftoa
    _ftoa->___fttol
    _sprintf->___llmod
    ___llmod->___lldiv
    ___lltoft->___ftpack
    ___fttol->___ftmul
    ___ftsub->___ftadd
    ___ftneg->_getADCValue
    ___ftmul->_getADCValue
    _nrf24l01SendPacket->_nrf24l01ChangeTXPower
    _nrf24l01SetRXMode->_nrf24l01Send
    _getADCValue->___ftdiv
    ___ftdiv->___ftadd
    ___ftadd->___awtoft
    ___awtoft->___ftpack
    _checkTXPower->_nrf24l01ChangeTXPower
    _nrf24l01ChangeTXPower->_nrf24l01Send
    ___lbtoft->___ftpack
    ___lwtoft->___ftpack

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_loop
    _loop->_setMessage
    _setMessage->_strcat
    _strcat->_ftoa
    _ftoa->___fttol

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    _main->_loop

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                35    35      0   93971
                                             36 BANK1     35    35      0
                           ___lwtoft
                               _loop
                    _nrf24l01GetPipe
                       _nrf24l01Init
                 _nrf24l01SendPacket
                  _nrf24l01SetRXPipe
                  _nrf24l01SetTXPipe
                         _setMessage
                              _sleep
                             _strcpy
 ---------------------------------------------------------------------------------
 (1) _strcpy                                               5     3      2     200
                                              0 BANK0      5     3      2
 ---------------------------------------------------------------------------------
 (1) _nrf24l01Init                                         2     2      0    5331
                                             19 BANK0      2     2      0
                     _nrf24l01CEHigh
                      _nrf24l01CELow
              _nrf24l01InitRegisters
              _nrf24l01InterfaceInit
 ---------------------------------------------------------------------------------
 (2) _nrf24l01InterfaceInit                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _nrf24l01InitRegisters                               12    12      0    5331
                                              7 BANK0     12    12      0
                             ___bmul
                     _nrf24l01SPIEnd
                    _nrf24l01SPISend
                   _nrf24l01SPIStart
                       _nrf24l01Send
                  _nrf24l01SetRXPipe
                  _nrf24l01SetTXPipe
 ---------------------------------------------------------------------------------
 (1) _nrf24l01SetTXPipe                                    3     3      0     314
                                              4 BANK0      3     3      0
                             ___bmul
                     _nrf24l01SPIEnd
                    _nrf24l01SPISend
                   _nrf24l01SPIStart
 ---------------------------------------------------------------------------------
 (2) ___bmul                                               4     3      1     270
                                              0 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (1) _nrf24l01SetRXPipe                                    4     4      0    2239
                                              3 BANK0      4     4      0
                       _nrf24l01Send
 ---------------------------------------------------------------------------------
 (1) _nrf24l01GetPipe                                      5     5      0     658
                                              6 BANK0      5     5      0
                            ___lwmod
                             _strlen
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              6     2      4     337
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (1) _loop                                                49    49      0   58873
                                             35 BANK1      1     1      0
                                              0 BANK2     48    48      0
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___ftneg
                           ___lbtoft
                       _checkTXPower
                        _getADCValue
                       _nrf24l01Send
                 _nrf24l01SendPacket
                         _setMessage
                              _sleep
 ---------------------------------------------------------------------------------
 (1) _setMessage                                          10     3      7   17780
                                             25 BANK1     10     3      7
                           ___lbtoft (ARG)
                           ___lwtoft (ARG)
                               _ftoa
                        _getADCValue (ARG)
                             _memset
                             _strcat
 ---------------------------------------------------------------------------------
 (2) _strcat                                               6     2      4     743
                                             19 BANK1      6     2      4
                               _ftoa (ARG)
 ---------------------------------------------------------------------------------
 (2) _memset                                               8     2      6     476
                                              0 BANK0      8     2      6
 ---------------------------------------------------------------------------------
 (2) _ftoa                                                14    10      4   15273
                                             79 BANK0      1     1      0
                                              6 BANK1     13     9      4
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                           ___lltoft
                            _sprintf
 ---------------------------------------------------------------------------------
 (3) _sprintf                                             36    26     10    2229
                                             24 BANK0     28    18     10
                            ___lldiv
                            ___llmod
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (4) _isdigit                                              2     2      0      68
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4     448
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (4) ___llmod                                             10     2      8     337
                                             14 BANK0     10     2      8
                            ___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (4) ___lldiv                                             14     6      8     340
                                              0 BANK0     14     6      8
 ---------------------------------------------------------------------------------
 (3) ___lltoft                                             6     2      4    3170
                                              8 BANK0      6     2      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) ___fttol                                             14    10      4     430
                                             71 BANK0      8     4      4
                                              0 BANK1      6     6      0
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftsub                                              6     0      6    4809
                                             27 BANK0      6     0      6
                            ___ftadd
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftneg                                              3     0      3     223
                                             55 BANK0      3     0      3
                            ___ftadd (ARG)
                            ___ftdiv (ARG)
                        _getADCValue (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftmul                                             16    10      6    3694
                                             55 BANK0     16    10      6
                           ___ftpack
                        _getADCValue (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftge                                               9     3      6     314
                                              0 BANK0      9     3      6
 ---------------------------------------------------------------------------------
 (1) _nrf24l01SendPacket                                   7     5      2    5324
                                              7 BANK0      7     5      2
                   _enableInterrupts
                     _nrf24l01CEHigh
                      _nrf24l01CELow
              _nrf24l01ChangeTXPower
                     _nrf24l01SPIEnd
                    _nrf24l01SPISend
                   _nrf24l01SPIStart
                  _nrf24l01SetRXMode
                             _strlen
 ---------------------------------------------------------------------------------
 (2) _strlen                                               6     4      2     170
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (2) _nrf24l01SetRXMode                                    3     3      0    2277
                                              3 BANK0      3     3      0
                     _nrf24l01CEHigh
                      _nrf24l01CELow
                       _nrf24l01Send
 ---------------------------------------------------------------------------------
 (10) _nrf24l01CELow                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _nrf24l01CEHigh                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _getADCValue                                         12     9      3   12008
                                             43 BANK0     12     9      3
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                              _sleep
 ---------------------------------------------------------------------------------
 (1) _sleep                                                2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) ___ftdiv                                             16    10      6    4004
                                             27 BANK0     16    10      6
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) ___ftadd                                             13     7      6    4564
                                             14 BANK0     13     7      6
                           ___awtoft (ARG)
                           ___ftpack
                           ___ftpack (ARG)
 ---------------------------------------------------------------------------------
 (3) ___awtoft                                             6     3      3    3281
                                              8 BANK0      6     3      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) _checkTXPower                                         2     2      0    2457
                                              7 BANK0      2     2      0
              _nrf24l01ChangeTXPower
                _nrf24l01GetRXPacket
 ---------------------------------------------------------------------------------
 (3) _nrf24l01GetRXPacket                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _nrf24l01ChangeTXPower                                4     2      2    2434
                                              3 BANK0      4     2      2
                       _nrf24l01Send
 ---------------------------------------------------------------------------------
 (2) _nrf24l01Send                                         3     2      1    2143
                                              0 BANK0      3     2      1
                   _enableInterrupts
                     _nrf24l01SPIEnd
                    _nrf24l01SPISend
                   _nrf24l01SPIStart
 ---------------------------------------------------------------------------------
 (11) _nrf24l01SPIStart                                    0     0      0       0
                      _nrf24l01CSLow
 ---------------------------------------------------------------------------------
 (12) _nrf24l01CSLow                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (11) _nrf24l01SPISend                                     1     1      0      22
 ---------------------------------------------------------------------------------
 (11) _nrf24l01SPIEnd                                      0     0      0       0
                     _nrf24l01CSHigh
 ---------------------------------------------------------------------------------
 (12) _nrf24l01CSHigh                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (11) _enableInterrupts                                    1     1      0      22
 ---------------------------------------------------------------------------------
 (2) ___lbtoft                                             8     5      3    3034
                                              8 BANK0      8     5      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (1) ___lwtoft                                             4     1      3    3123
                                              8 BANK0      4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) ___ftpack                                             8     3      5    3012
                                              0 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 12
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _ISR                                                  0     0      0    1957
                        _nrf24l01ISR
 ---------------------------------------------------------------------------------
 (8) _nrf24l01ISR                                          2     2      0    1957
                                             11 COMMON     2     2      0
                          _exception
                   _nrf24l01CheckACK
              _nrf24l01ReceivePacket
                     i1_nrf24l01Send
                i1_nrf24l01SetRXMode
 ---------------------------------------------------------------------------------
 (9) _nrf24l01ReceivePacket                                3     3      0     534
                                              8 COMMON     3     3      0
                     _nrf24l01CEHigh
                      _nrf24l01CELow
                     _nrf24l01SPIEnd
                    _nrf24l01SPISend
                   _nrf24l01SPIStart
                           i1_memset
                     i1_nrf24l01Send
 ---------------------------------------------------------------------------------
 (10) i1_memset                                            8     2      6     152
                                              0 COMMON     8     2      6
 ---------------------------------------------------------------------------------
 (9) _nrf24l01CheckACK                                     3     3      0     621
                                              7 COMMON     3     3      0
                             _strcmp
                i1_nrf24l01SetRXMode
 ---------------------------------------------------------------------------------
 (9) i1_nrf24l01SetRXMode                                  3     3      0     401
                                              4 COMMON     3     3      0
                     _nrf24l01CEHigh
                      _nrf24l01CELow
                     i1_nrf24l01Send
 ---------------------------------------------------------------------------------
 (10) i1_nrf24l01Send                                      3     2      1     267
                                              1 COMMON     3     2      1
                   _enableInterrupts
                     _nrf24l01SPIEnd
                    _nrf24l01SPISend
                   _nrf24l01SPIStart
 ---------------------------------------------------------------------------------
 (11) _nrf24l01SPIStart                                    0     0      0       0
                      _nrf24l01CSLow
 ---------------------------------------------------------------------------------
 (12) _nrf24l01CSLow                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (11) _nrf24l01SPISend                                     1     1      0      22
 ---------------------------------------------------------------------------------
 (11) _nrf24l01SPIEnd                                      0     0      0       0
                     _nrf24l01CSHigh
 ---------------------------------------------------------------------------------
 (12) _nrf24l01CSHigh                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (11) _enableInterrupts                                    1     1      0      22
 ---------------------------------------------------------------------------------
 (10) _nrf24l01CELow                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _nrf24l01CEHigh                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _strcmp                                              5     2      3     220
                                              0 COMMON     5     2      3
 ---------------------------------------------------------------------------------
 (9) _exception                                            1     1      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 12
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   ___lwtoft
     ___ftpack
   _loop
     ___awtoft
       ___ftpack
     ___ftadd
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___ftpack (ARG)
     ___ftdiv
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
     ___ftmul
       ___ftpack
       _getADCValue (ARG)
         ___awtoft
           ___ftpack
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftdiv
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
         _sleep
     ___ftneg
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
       _getADCValue (ARG)
         ___awtoft
           ___ftpack
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftdiv
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
         _sleep
     ___lbtoft
       ___ftpack
     _checkTXPower
       _nrf24l01ChangeTXPower
         _nrf24l01Send
           _enableInterrupts
           _nrf24l01SPIEnd
             _nrf24l01CSHigh
           _nrf24l01SPISend
           _nrf24l01SPIStart
             _nrf24l01CSLow
       _nrf24l01GetRXPacket
     _getADCValue
       ___awtoft
         ___ftpack
       ___ftadd
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftdiv
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
       _sleep
     _nrf24l01Send
       _enableInterrupts
       _nrf24l01SPIEnd
         _nrf24l01CSHigh
       _nrf24l01SPISend
       _nrf24l01SPIStart
         _nrf24l01CSLow
     _nrf24l01SendPacket
       _enableInterrupts
       _nrf24l01CEHigh
       _nrf24l01CELow
       _nrf24l01ChangeTXPower
         _nrf24l01Send
           _enableInterrupts
           _nrf24l01SPIEnd
             _nrf24l01CSHigh
           _nrf24l01SPISend
           _nrf24l01SPIStart
             _nrf24l01CSLow
       _nrf24l01SPIEnd
         _nrf24l01CSHigh
       _nrf24l01SPISend
       _nrf24l01SPIStart
         _nrf24l01CSLow
       _nrf24l01SetRXMode
         _nrf24l01CEHigh
         _nrf24l01CELow
         _nrf24l01Send
           _enableInterrupts
           _nrf24l01SPIEnd
             _nrf24l01CSHigh
           _nrf24l01SPISend
           _nrf24l01SPIStart
             _nrf24l01CSLow
       _strlen
     _setMessage
       ___lbtoft (ARG)
         ___ftpack
       ___lwtoft (ARG)
         ___ftpack
       _ftoa (ARG)
         ___ftge
         ___ftmul
           ___ftpack
           _getADCValue (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
             _sleep
         ___ftneg
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
           _getADCValue (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
             _sleep
         ___ftsub
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___fttol
           ___ftmul (ARG)
             ___ftpack
             _getADCValue (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               _sleep
         ___lltoft
           ___ftpack
         _sprintf
           ___lldiv
           ___llmod
             ___lldiv (ARG)
           ___wmul
           _isdigit
       _getADCValue (ARG)
         ___awtoft
           ___ftpack
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftdiv
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
         _sleep
       _memset (ARG)
       _strcat (ARG)
         _ftoa (ARG)
           ___ftge
           ___ftmul
             ___ftpack
             _getADCValue (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               _sleep
           ___ftneg
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
             _getADCValue (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               _sleep
           ___ftsub
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
           ___fttol
             ___ftmul (ARG)
               ___ftpack
               _getADCValue (ARG)
                 ___awtoft
                   ___ftpack
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                 _sleep
           ___lltoft
             ___ftpack
           _sprintf
             ___lldiv
             ___llmod
               ___lldiv (ARG)
             ___wmul
             _isdigit
     _sleep
   _nrf24l01GetPipe
     ___lwmod
     _strlen
   _nrf24l01Init
     _nrf24l01CEHigh
     _nrf24l01CELow
     _nrf24l01InitRegisters
       ___bmul
       _nrf24l01SPIEnd
         _nrf24l01CSHigh
       _nrf24l01SPISend
       _nrf24l01SPIStart
         _nrf24l01CSLow
       _nrf24l01Send
         _enableInterrupts
         _nrf24l01SPIEnd
           _nrf24l01CSHigh
         _nrf24l01SPISend
         _nrf24l01SPIStart
           _nrf24l01CSLow
       _nrf24l01SetRXPipe
         _nrf24l01Send
           _enableInterrupts
           _nrf24l01SPIEnd
             _nrf24l01CSHigh
           _nrf24l01SPISend
           _nrf24l01SPIStart
             _nrf24l01CSLow
       _nrf24l01SetTXPipe
         ___bmul
         _nrf24l01SPIEnd
           _nrf24l01CSHigh
         _nrf24l01SPISend
         _nrf24l01SPIStart
           _nrf24l01CSLow
     _nrf24l01InterfaceInit
   _nrf24l01SendPacket
     _enableInterrupts
     _nrf24l01CEHigh
     _nrf24l01CELow
     _nrf24l01ChangeTXPower
       _nrf24l01Send
         _enableInterrupts
         _nrf24l01SPIEnd
           _nrf24l01CSHigh
         _nrf24l01SPISend
         _nrf24l01SPIStart
           _nrf24l01CSLow
     _nrf24l01SPIEnd
       _nrf24l01CSHigh
     _nrf24l01SPISend
     _nrf24l01SPIStart
       _nrf24l01CSLow
     _nrf24l01SetRXMode
       _nrf24l01CEHigh
       _nrf24l01CELow
       _nrf24l01Send
         _enableInterrupts
         _nrf24l01SPIEnd
           _nrf24l01CSHigh
         _nrf24l01SPISend
         _nrf24l01SPIStart
           _nrf24l01CSLow
     _strlen
   _nrf24l01SetRXPipe
     _nrf24l01Send
       _enableInterrupts
       _nrf24l01SPIEnd
         _nrf24l01CSHigh
       _nrf24l01SPISend
       _nrf24l01SPIStart
         _nrf24l01CSLow
   _nrf24l01SetTXPipe
     ___bmul
     _nrf24l01SPIEnd
       _nrf24l01CSHigh
     _nrf24l01SPISend
     _nrf24l01SPIStart
       _nrf24l01CSLow
   _setMessage
     ___lbtoft (ARG)
       ___ftpack
     ___lwtoft (ARG)
       ___ftpack
     _ftoa (ARG)
       ___ftge
       ___ftmul
         ___ftpack
         _getADCValue (ARG)
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
           _sleep
       ___ftneg
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
         _getADCValue (ARG)
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
           _sleep
       ___ftsub
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___lltoft (ARG)
           ___ftpack
       ___fttol
         ___ftmul (ARG)
           ___ftpack
           _getADCValue (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
             _sleep
       ___lltoft
         ___ftpack
       _sprintf
         ___lldiv
         ___llmod
           ___lldiv (ARG)
         ___wmul
         _isdigit
     _getADCValue (ARG)
       ___awtoft
         ___ftpack
       ___ftadd
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftdiv
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
       _sleep
     _memset (ARG)
     _strcat (ARG)
       _ftoa (ARG)
         ___ftge
         ___ftmul
           ___ftpack
           _getADCValue (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
             _sleep
         ___ftneg
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
           _getADCValue (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
             _sleep
         ___ftsub
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___fttol
           ___ftmul (ARG)
             ___ftpack
             _getADCValue (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               _sleep
         ___lltoft
           ___ftpack
         _sprintf
           ___lldiv
           ___llmod
             ___lldiv (ARG)
           ___wmul
           _isdigit
   _sleep
   _strcpy

 _ISR (ROOT)
   _nrf24l01ISR
     _exception
     _nrf24l01CheckACK
       _strcmp
       i1_nrf24l01SetRXMode
         _nrf24l01CEHigh
         _nrf24l01CELow
         i1_nrf24l01Send
           _enableInterrupts
           _nrf24l01SPIEnd
             _nrf24l01CSHigh
           _nrf24l01SPISend
           _nrf24l01SPIStart
             _nrf24l01CSLow
     _nrf24l01ReceivePacket
       _nrf24l01CEHigh
       _nrf24l01CELow
       _nrf24l01SPIEnd
         _nrf24l01CSHigh
       _nrf24l01SPISend
       _nrf24l01SPIStart
         _nrf24l01CSLow
       i1_memset
       i1_nrf24l01Send
         _enableInterrupts
         _nrf24l01SPIEnd
           _nrf24l01CSHigh
         _nrf24l01SPISend
         _nrf24l01SPIStart
           _nrf24l01CSLow
     i1_nrf24l01Send
       _enableInterrupts
       _nrf24l01SPIEnd
         _nrf24l01CSHigh
       _nrf24l01SPISend
       _nrf24l01SPIStart
         _nrf24l01CSLow
     i1_nrf24l01SetRXMode
       _nrf24l01CEHigh
       _nrf24l01CELow
       i1_nrf24l01Send
         _enableInterrupts
         _nrf24l01SPIEnd
           _nrf24l01CSHigh
         _nrf24l01SPISend
         _nrf24l01SPIStart
           _nrf24l01CSLow

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      D       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     50      50       5      100.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50     47      4F       7       98.8%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50     30      41       9       81.3%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0      3D      11       76.3%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0     12B      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0     12B      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V2.00 build -1524193055 
Symbol Table                                                                                   Thu Jul 26 12:47:22 2018

                ___bmul@product 0022                     __CFG_CP$OFF 0000             ___wmul@multiplicand 0022  
           nrf24l01Send@command 0022                    ___ftadd@exp1 003A                    ___ftadd@exp2 0039  
                   __CFG_LVP$ON 0000                    ___ftadd@sign 0038                             l180 0F20  
                           l168 082B                             l328 08F7                             l460 017E  
                           l452 00FA                             l293 0666                             l297 0677  
                           l449 00DB                             l475 0842                             l709 0515  
                           l685 0CE8                             l686 0CF0                             l678 0CD5  
                           l769 0DEC                    __CFG_CPD$OFF 0000                             _ISR 0004  
                           wreg 0009             nrf24l01SendPacket@i 002D                            ?_ISR 0070  
                  ___ftdiv@cntr 0045                    ___ftdiv@sign 004A                  ??_nrf24l01Init 0033  
                          l3003 06AC                            l3021 06E3                            l3031 0721  
                          l3023 06EF                            l3007 06CD                            l2233 0CB2  
                          l3033 06F4                            l2321 0C99                            l2401 0AF7  
                          l2243 0CDA                            l2235 0CBC                            l2331 049E  
                          l2307 0C60                            l2403 0B05                            l2411 0B28  
                          l2245 0CE2                            l2237 0CC1                            l2229 0CAB  
                          l2341 04B4                            l2317 0C8E                            l2309 0C6E  
                          l3213 09EE                            l2335 04A5                            l2407 0B1D  
                          l2511 0194                            l2503 016A                            l3207 09D6  
                          l2361 04EB                            l2353 04CE                            l3209 09E2  
                          l3217 09F7                            l2371 0507                            l2363 04F0  
                          l2603 07AA                            l2283 1777                            l3163 043D  
                          l3155 03F3                            l2381 0539                            l2373 0511  
                          l2365 04F4                            l2525 01EE                            l2509 0191  
                          l2445 006B                            l2453 0099                            l3325 0A01  
                          l2391 0554                            l2359 04E1                            l2551 0A4B  
                          l2607 07B2                            l2519 01A9                            l2471 00E2  
                          l2463 00A8                            l2439 005B                            l2527 0038  
                          l3327 0A24                            l2535 177C                            l2377 0527  
                          l2289 083C                            l2529 01F9                            l2465 00D7  
                          l3257 0205                            l3169 044C                            l3337 0877  
                ??_nrf24l01Send 0021                            l2731 0B6E                            l2555 0A61  
                          l2467 00DD                            l2539 1782                            l3451 0EAE  
                          l2573 073D                            l2629 0895                            l2493 012E  
                          l2477 0109                            l2591 078E                            l2671 0DFE  
                          l2639 0D8A                            l2487 0128                            l2823 0903  
                          l2665 0DE2                            l2657 0DC3                            l2681 09BA  
                          l2761 05B2                            l2745 0959                            l2595 0796  
                          l2579 0753                            l2667 0DF0                            l2659 0DD4  
                          l2499 015B                            l2739 17D1                            l2747 0965  
                          l2749 096D                            l2791 0AE6                            l2847 0916  
                          l2863 0F84                            l2679 09AA                            l2785 0AD4  
                          l2857 0F6E                            l2953 0EEF                            l2955 0EF7  
                          l2885 0FDE                            l2877 0FC5                            l2957 0EDB  
                          l2797 08B0                            l2799 08BC                            l2991 066B  
                          l2999 0693                            STR_1 1831                    __CFG_WDTE$ON 0000  
                          STR_2 1831                            STR_3 181E                            STR_4 1823  
                          STR_5 180C                            STR_6 1813                            STR_7 182D  
                          STR_8 1828                            STR_9 1801                            u2105 04F5  
                          u2045 04CF                            u2135 0508                            u2215 0B13  
                          u2225 0B1E                            u2075 04E2                            u2335 0151  
                          u2505 076F                            u3225 09D9                            u1715 0CB7  
                          u3075 06C7                            u2195 0AFA                            u2355 0162  
                          u2525 0797                            u2365 0174                            u3245 09E8  
                          u1735 0CD0                            u3407 0673                            u2535 079D  
                          u2375 0186                            u3255 09EF                            u3417 06D4  
                          u2625 0D92                            u3345 0A12                            u1755 0CDD  
                          u3427 06EB                            u2715 09AF                            u1915 0C6F  
                          u3437 0706                            u2565 07B3                            u1925 0C83  
                          u2815 0AC2                            u3447 0712                            u2575 07B9  
                          u2495 075F                            u2655 0DC4                            u1935 0C8F  
                          u1855 0843                            u3457 0722                            u1865 0848  
                          u3377 0E2A                            u1795 0CF7                            u3467 0B45  
                          u3387 07E6                            u3477 0B5A                            u2685 0DE3  
                          u3397 07F5                            u2935 0F96                            u3487 0B68  
                          u1895 0C63                            u2945 0FA6                            u2874 08FD  
                          u2955 0FC6                            u2875 08FC                            u2965 0FD5  
                          u2975 0FDF                            i1l48 1763                            _WPUA 020C  
                          _WPUC 020E  __size_of_nrf24l01InterfaceInit 001C                    __CFG_WRT$OFF 0000  
                 __CFG_FCMEN$ON 0000   __end_of_nrf24l01InterfaceInit 0871                            _main 0E0E  
                          _ftoa 056C                    ___ftpack@arg 0020                            _loop 01FF  
                  ___ftpack@exp 0023                            fsr0h 0005                            fsr1h 0007  
                          indf0 0000                            fsr0l 0004                            indf1 0001  
                          fsr1l 0006                            btemp 007E  __size_of_nrf24l01ReceivePacket 004D  
                 __CFG_BORV$LOW 0000   __end_of_nrf24l01ReceivePacket 0C4F                            start 000F  
         nrf24l01SetRXPipe@pipe 0025                   __CFG_CSWEN$ON 0000               ___bmul@multiplier 0023  
                 __CFG_MCLRE$ON 0000                    ___ftmul@cntr 0065                    ___ftmul@sign 0066  
   __size_of_nrf24l01SendPacket 00C8                           ??_ISR 007D                    ___fttol@exp1 00A5  
          __size_of_getADCValue 00A5                 ??_nrf24l01CELow 0070                    ___fttol@lval 00A1  
               ??_nrf24l01CSLow 0070                           ?_main 0070                           ?_ftoa 00A6  
                         ?_loop 0070                 __end_of___ftadd 056C                 __end_of___ftdiv 1000  
               __end_of___ftneg 175D                 __end_of___lldiv 0CA2                 __end_of___ftmul 07DA  
               __end_of___llmod 0B31                 __end_of___ftsub 08AB                 __end_of___fttol 0E0E  
                __CFG_DEBUG$OFF 0000                           i1l320 0BF9                           i1l165 000D  
               __end_of___lwmod 09FC          enableInterrupts@enable 0070                      i1memset@p1 0070  
                 __CFG_PWRTE$ON 0000           nrf24l01SetTXPipe@pipe 0026                    ___lltoft@exp 002D  
                 ___awtoft@sign 002D                 __end_of_dpowers 1028                 __end_of_isdigit 1779  
                         _sleep 081E                   ___ftpack@sign 0024                           ftoa@f 00A6  
                         ftoa@l 00AE                  __CFG_BOREN$OFF 0000                _enableInterrupts 1744  
                         status 0003                           wtemp0 007E                 __end_of_sprintf 01FF  
   __end_ofi1_nrf24l01SetRXMode 0AAF                __end_ofi1_memset 17CC  __size_of_nrf24l01ChangeTXPower 003F  
             getADCValue@adcSum 0054   __end_of_nrf24l01ChangeTXPower 0AEE                _nrf24l01SPIStart 174C  
               __initialization 0011                _nrf24l01CheckACK 097B          nrf24l01InitRegisters@i 0031  
                  __end_of_main 0EB2                    __end_of_ftoa 065E                    __end_of_loop 0370  
  nrf24l01ChangeTXPower@rfSetup 0026                ??_nrf24l01CEHigh 0070                          ??_main 00C4  
                        ??_ftoa 006F                   ___fttol@sign1 00A0                          ??_loop 00C3  
              ??_nrf24l01CSHigh 0070                ??_nrf24l01SPIEnd 0070             _nrf24l01GetRXPacket 07FE  
      __size_of_nrf24l01SPISend 000D                ___llmod@dividend 0032                          _ADRESH 009C  
                        _ADRESL 009B                          ?_sleep 0070                __end_of___awtoft 092D  
                        _ANSELA 018C                          _ANSELC 018E                __end_of___ftpack 0D07  
              __end_of___lbtoft 081E                __end_of___lltoft 09CF                          _ODCONA 028C  
      __size_of_nrf24l01GetPipe 0038                          _ODCONC 028E                          i1l2261 1768  
                        i1l3071 0C31                          i1l3075 0C41                          i1l3251 0BFA  
                        i1l3237 0BD8                          i1l3229 0BC8                          i1l3079 0C49  
                        i1l2831 0936                          i1l2913 0AA9                          i1l2921 17B8  
                        i1l2835 094E                          i1l2827 092E                          _INLVLA 038C  
                        _INLVLC 038E           __size_of_checkTXPower 0014                          u350_27 0A96  
                        u351_27 0AA3                          u352_27 1750                          u353_27 173E  
              __end_of___lwtoft 17B4                          u349_27 0A82            ?_nrf24l01GetRXPacket 0070  
          __size_of_nrf24l01ISR 0049         nrf24l01SetRXMode@config 0024                          ___bmul 1779  
                        ___ftge 0A34         nrf24l01SetRXMode@rxMode 0025                          ___wmul 0839  
                     ??___ftadd 0034                  __CFG_STVREN$ON 0000                       ??___ftdiv 0041  
                     ??___ftneg 005A                       ??___lldiv 0028                       ??___ftmul 005D  
                     ??___llmod 0036                       ??___ftsub 0041                       ??___fttol 006B  
                     ??___lwmod 0024            __end_of_nrf24l01Init 07FE            __end_of_nrf24l01Send 08EA  
                        _memset 17CC           _nrf24l01InitRegisters 0370                          _strcat 0954  
                        _strcmp 092D                          _strcpy 0871                          _strlen 08AB  
                        ftoa@cp 00B2           ___ftmul@f3_as_product 0062       i1nrf24l01SetRXMode@config 0075  
                     ??_isdigit 0020                          loop@ta 0123                          loop@vt 0120  
     i1nrf24l01SetRXMode@rxMode 0076                    _checkTXPower 178B                       ??_sprintf 0042  
            getADCValue@adcLoop 0051         __end_of__initialization 002E                      ___ftadd@f1 002E  
                    ___ftadd@f2 0031                      ___ftge@ff1 0020                      ___ftge@ff2 0023  
         ??_nrf24l01GetRXPacket 0020        nrf24l01SendPacket@Packet 0027              getADCValue@channel 0053  
                    ___ftdiv@f1 003E                      ___ftdiv@f2 003B                      ___ftdiv@f3 0046  
                    ___ftneg@f1 0057                      ___awtoft@c 0028                      ___lbtoft@c 002F  
           ___bmul@multiplicand 0020                      ___ftmul@f1 0057                      ___ftmul@f2 005A  
                    ___ftsub@f1 003E                      ___ftsub@f2 003B                      ___fttol@f1 0067  
                __pcstackCOMMON 0070                    __pidataBANK1 172D                      ___lltoft@c 0028  
                 __end_of_sleep 0839                      ___lwtoft@c 0028                       ?i1_memset 0070  
                       ??_sleep 0020                    sprintf@width 004F                     loop@rfSetup 012E  
                    __pbssBANK1 00E7                      __pbssBANK2 0150                      __pbssBANK3 01A0  
             ??_nrf24l01SPISend 0070              __size_of_exception 0002         __size_ofi1_nrf24l01Send 001B  
             ??_nrf24l01GetPipe 0026                      __pmaintext 0E0E                         ?___bmul 0020  
                       ?___ftge 0020                         ?___wmul 0020                 __CFG_PPS1WAY$ON 0000  
             _nrf24l01SetRXMode 0B31               _nrf24l01SetRXPipe 08EA          ?_nrf24l01InitRegisters 0070  
                    __pintentry 0004               _nrf24l01SetTXPipe 0B75             nrf24l01SPISend@data 0070  
                       ?_memset 0020              ?_nrf24l01SetRXMode 0070                       ?___awtoft 0028  
                     ?___ftpack 0020                       ?___lbtoft 0028              ?_nrf24l01SetRXPipe 0070  
      __end_of_enableInterrupts 174C              ?_nrf24l01SetTXPipe 0070                       ?___lltoft 0028  
           __CFG_RSTOSC$HFINT32 0000                         ?_strcat 00B3                         ?_strcmp 0070  
                       ?_strcpy 0020                         ?_strlen 0020                       ?___lwtoft 0028  
         __end_of_n_ADDRESS_MUL 1801                      ??i1_memset 0076             ??_nrf24l01SetRXMode 0023  
      __end_of_nrf24l01SPIStart 1754             ??_nrf24l01SetRXPipe 0023             ??_nrf24l01SetTXPipe 0024  
                       _SSP1BUF 0211        __end_of_nrf24l01CheckACK 09A5           _nrf24l01InterfaceInit 0855  
    __end_of_nrf24l01SendPacket 0726                   ??_getADCValue 004E           __size_of_nrf24l01Init 0024  
         __size_of_nrf24l01Send 0020       __end_of_nrf24l01SetRXMode 0B75       __end_of_nrf24l01SetRXPipe 090B  
     __end_of_nrf24l01SetTXPipe 0BB9           _nrf24l01ReceivePacket 0C02                 __size_of___bmul 0012  
               __size_of___ftge 003C                         ___ftadd 0476                         ___ftdiv 0F57  
                       ___ftneg 1754                         ___lldiv 0C4F                 __size_of___wmul 001C  
                       ___ftmul 0726                         ___llmod 0AEE                         ___ftsub 088D  
                       ___fttol 0D6F                         ___lwmod 09CF                      ??___awtoft 002B  
                    ??___ftpack 0025                      ??___lbtoft 002B           __end_of_nrf24l01CELow 1734  
               __size_of_memset 0019           __end_of_nrf24l01CSLow 0803                      ??___lltoft 002C  
                       __ptext1 0871                         __ptext2 07DA                         __ptext3 0855  
                       __ptext4 0370                         __ptext5 0B75                         __ptext6 1779  
                       __ptext7 08EA                         __ptext8 09FC                         __ptext9 09CF  
                    ??___lwtoft 002B                 __size_of_strcat 0027                 __size_of_strcmp 0027  
             __end_of_exception 0004                 __size_of_strcpy 001C                 __size_of_strlen 001F  
                  __size_of_ISR 000B                         _counter 00E7                         _dpowers 1000  
                       _isdigit 176A                         _romData 00EE                         _sprintf 0032  
                       clrloop0 1738            end_of_initialization 002E                         ftoa@buf 0150  
                       ftoa@rem 00AA                    _nrf24l01Init 07DA                      _setMessage 0D07  
                  _nrf24l01Send 08CA                      _romDataMap 01C1                         memset@c 0022  
                       memset@n 0024                         memset@p 0026                nrf24l01GetPipe@i 002A  
               ___lldiv@divisor 0020                 ___lldiv@counter 002D           _nrf24l01ChangeTXPower 0AAF  
              setMessage@packet 00B9    __size_ofi1_nrf24l01SetRXMode 003F                setMessage@status 00C1  
                       strcmp@r 0074           i1nrf24l01Send@command 0073                         strlen@s 0020  
           __end_of_getADCValue 0F57                       _PORTAbits 000C                       _PORTCbits 000E  
                     _TRISAbits 008C                       _TRISCbits 008E                nrf24l01Send@data 0020  
              __CFG_FEXTOSC$OFF 0000                   ??_nrf24l01ISR 007B          ?_nrf24l01InterfaceInit 0070  
                   ___ftdiv@exp 0049                  i1_nrf24l01Send 17E5                      main@packet 00C6  
        ?_nrf24l01ReceivePacket 0070      __size_of_nrf24l01SetRXMode 0044      __size_of_nrf24l01SetRXPipe 0021  
                   ___ftmul@exp 0061      __size_of_nrf24l01SetTXPipe 0044                  __end_of___bmul 178B  
                __end_of___ftge 0A70                  __end_of___wmul 0855                       i1memset@c 0072  
                     i1memset@n 0074                       i1memset@p 0076                  __end_of_memset 17E5  
                __end_of_strcat 097B                  __end_of_strcmp 0954                  __end_of_strcpy 088D  
                __end_of_strlen 08CA             start_initialization 0011                 _nrf24l01SPISend 175D  
                   __end_of_ISR 000F                      ftoa@status 00A9               __size_ofi1_memset 0018  
     nrf24l01SetRXPipe@enRXAddr 0026                 _nrf24l01GetPipe 09FC     __end_of_nrf24l01GetRXPacket 0800  
       __size_of_nrf24l01CEHigh 0003         __size_of_nrf24l01CSHigh 0003                     ?_setMessage 00B9  
        __end_ofi1_nrf24l01Send 1800         __size_of_nrf24l01SPIEnd 0007                 ___llmod@divisor 002E  
               ___llmod@counter 0037          ?_nrf24l01ChangeTXPower 0023         ??_nrf24l01InitRegisters 0027  
              __CFG_LPBOREN$OFF 0000                     _getADCValue 0EB2                        ??___bmul 0021  
                      ??___ftge 0026             __end_of_nrf24l01ISR 0C02                        ??___wmul 0024  
                   __pdataBANK1 00EE                        ??_memset 0026               ?_enableInterrupts 0070  
                      ??_strcat 0070                        ??_strcmp 0073                        ??_strcpy 0022  
                      ??_strlen 0022               __size_of___awtoft 0022               __size_of___ftpack 0065  
             __size_of___lbtoft 001B              ??_enableInterrupts 0070               __size_of___lltoft 002A  
                   __pbssCOMMON 007D                       ___latbits 0002               __size_of___lwtoft 0015  
                 __pcstackBANK0 0020                   __pcstackBANK1 00A0                   __pcstackBANK2 0120  
             ?_nrf24l01SPIStart 0070            checkTXPower@rxPacket 0028                    _isdigit$1797 0020  
             ?_nrf24l01CheckACK 0070              ??_nrf24l01SPIStart 0070              ??_nrf24l01CheckACK 0077  
               ?i1_nrf24l01Send 0071                     sprintf@flag 0048                     sprintf@prec 0051  
                    loop@packet 012F             nrf24l01GetPipe@name 0029             nrf24l01GetPipe@pipe 0028  
                      ?___ftadd 002E                        ?___ftdiv 003B                        ?___ftneg 0057  
                      ?___lldiv 0020                        ?___ftmul 0057                        ?___llmod 002E  
                      ?___ftsub 003B                        ?___fttol 0067                        ?___lwmod 0020  
          __end_of_n_ADDRESS_P0 181E         __end_of_nrf24l01SPISend 176A              i1nrf24l01Send@data 0071  
     nrf24l01InitRegisters@enAA 002E             __size_of_setMessage 0068              _nrf24l01SendPacket 065E  
       __end_of_nrf24l01GetPipe 0A34                        ?_isdigit 0070                       _loop$2050 0126  
                     _loop$2051 0129                       _exception 0002             ?_nrf24l01SendPacket 0027  
                      ?_sprintf 0038             i1_nrf24l01SetRXMode 0A70                  __size_of_sleep 001B  
                ___wmul@product 0024                     _nrf24l01ISR 0BB9                       clear_ram0 1737  
                      _PIE0bits 0090                        _PIR0bits 0010                       _sleepLoop 00ED  
          ??_nrf24l01SendPacket 0029                 setMessage@value 00BD                 setMessage@topic 00BB  
          ?i1_nrf24l01SetRXMode 0070                      _ADCON0bits 009D                      _ADCON1bits 009E  
             ___wmul@multiplier 0020                        _WPUAbits 020C                        i1_memset 17B4  
                 ?_checkTXPower 0070                        _RXPacket 01A0                        _TXPacket 00EB  
                    ?_exception 0070                  _nrf24l01CEHigh 172E         ??_nrf24l01InterfaceInit 0020  
                _nrf24l01CSHigh 1734               nrf24l01ISR@status 007C                  _nrf24l01SPIEnd 173D  
       ??_nrf24l01ReceivePacket 0078          __size_of_nrf24l01CELow 0003          __size_of_nrf24l01CSLow 0003  
         ??i1_nrf24l01SetRXMode 0074                __size_of___ftadd 00F6                __size_of___ftdiv 00A9  
              __size_of___ftneg 0009                __size_of___lldiv 0053                __size_of___ftmul 00B4  
              __size_of___llmod 0043                __size_of___ftsub 001E                __size_of___fttol 009F  
              __size_of___lwmod 002D                        ___awtoft 090B                        ___ftpack 0CA2  
                      ___lbtoft 0803                ?_nrf24l01SPISend 0070                        ___lltoft 09A5  
                    _ANSELAbits 018C                        ___lwtoft 179F                      _ANSELCbits 018E  
                ??_checkTXPower 0027                ?_nrf24l01GetPipe 0070                      sprintf@val 004A  
                 _n_ADDRESS_MUL 1800                      strcat@from 00B5          __end_of_nrf24l01CEHigh 1731  
              __size_of_isdigit 000F          __end_of_nrf24l01CSHigh 1737                        __ptext10 01FF  
                      __ptext11 0D07                        __ptext20 09A5                        __ptext12 0954  
                      __ptext21 0D6F                        __ptext13 17CC                        __ptext30 081E  
                      __ptext22 088D                        __ptext14 056C                        __ptext31 0F57  
                      __ptext23 1754                        __ptext15 0032                        __ptext40 0CA2  
                      __ptext32 0476                        __ptext24 0726                        __ptext16 176A  
                      __ptext33 090B                        __ptext25 0A34                        __ptext17 0839  
                      __ptext50 175D                        __ptext42 0BB9                        __ptext34 178B  
                      __ptext26 065E                        __ptext18 0AEE                        __ptext51 173D  
                      __ptext43 0C02                        __ptext35 07FE                        __ptext27 08AB  
                      __ptext19 0C4F                        __ptext52 1734                        __ptext44 17B4  
                      __ptext36 0AAF                        __ptext28 0B31                        __ptext53 1744  
                      __ptext45 097B                        __ptext37 08CA                        __ptext29 0EB2  
                      __ptext54 1731                        __ptext46 0A70                        __ptext38 0803  
                      __ptext55 172E                        __ptext47 17E5                        __ptext39 179F  
                      __ptext56 092D                        __ptext48 174C                        __ptext57 0002  
                      __ptext49 0800                    _SSP1CON1bits 0215          __end_of_nrf24l01SPIEnd 1744  
                      _nrf24l01 007D                __size_of_sprintf 01CD                     _OSCCON1bits 0919  
                  ??_setMessage 00C0                      strcpy@from 0020   nrf24l01ChangeTXPower@addPower 0023  
                      _loop$865 012C         ??_nrf24l01ChangeTXPower 0025                   __size_of_main 00A4  
                 __size_of_ftoa 00F2                   __size_of_loop 0171    nrf24l01InitRegisters@channel 0029  
                     sleep@wdps 0021    nrf24l01InitRegisters@feature 002B              exception@exception 0070  
                    _RC0PPSbits 0EA0    nrf24l01InitRegisters@rfSetup 002C                      _RC1PPSbits 0EA1  
                  ?_getADCValue 004B                      _RC2PPSbits 0EA2  __size_of_nrf24l01InitRegisters 0106  
 __end_of_nrf24l01InitRegisters 0476                        int$flags 007E    nrf24l01InitRegisters@setupAW 002A  
                    _ODCONAbits 028C                    _SSP1STATbits 0214                        main@pipe 00C5  
        nrf24l01ReceivePacket@i 007A                   _nrf24l01CELow 1731                   _nrf24l01CSLow 0800  
            __end_of_setMessage 0D6F                      _INTCONbits 000B                 ?_nrf24l01CEHigh 0070  
                    _FVRCONbits 0117                ??i1_nrf24l01Send 0072                     ??_exception 0070  
               ?_nrf24l01CSHigh 0070                  __pstringtext10 1831                  __pstringtext11 0000  
                      isdigit@c 0021                        memset@p1 0020                 ?_nrf24l01SPIEnd 0070  
                      intlevel1 0000                       sprintf@ap 0049                       sprintf@sp 004E  
                  _n_ADDRESS_P0 1819       __size_of_enableInterrupts 0008                ___lwmod@dividend 0022  
              ___lldiv@dividend 0024               __CFG_CLKOUTEN$OFF 0000    __size_of_nrf24l01GetRXPacket 0002  
   nrf24l01InitRegisters@config 0030       __size_of_nrf24l01SPIStart 0008       __size_of_nrf24l01CheckACK 002A  
   nrf24l01InitRegisters@status 002D      nrf24l01ReceivePacket@width 0079                  ?_nrf24l01CELow 0070  
                 __pstringtext1 1000                   __pstringtext2 1819                   __pstringtext3 1800  
                 __pstringtext4 180C                   __pstringtext5 1813                   __pstringtext6 181E  
                 __pstringtext7 1823                   __pstringtext8 1828                   __pstringtext9 182D  
                ?_nrf24l01CSLow 0070                        sprintf@c 0053                        sprintf@f 0038  
    nrf24l01InitRegisters@DynPD 002F                        strcat@cp 00B7                        strcat@to 00B3  
                      strcmp@s1 0070                        strcmp@s2 0072                ___lldiv@quotient 0029  
               ___lwmod@divisor 0020                        strcpy@cp 0024                        strlen@cp 0024  
                      strcpy@to 0023                 ___lwmod@counter 0025                      _WDTCONbits 0097  
                 ?_nrf24l01Init 0070                   ?_nrf24l01Send 0020                      _STATUSbits 0003  
                  ?_nrf24l01ISR 0070            __end_of_checkTXPower 179F  
