

Microchip Technology PIC LITE Macro Assembler V2.00 build -1524193055 
                                                                                               Thu Aug 09 10:43:57 2018

Microchip Technology Omniscient Code Generator v2.00 (Free mode) build 20180527130849
     1                           	processor	16LF18325
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK1,global,class=CODE,delta=2
     5                           	psect	stringtext1,global,class=STRCODE,delta=2
     6                           	psect	stringtext2,global,class=STRCODE,delta=2
     7                           	psect	stringtext3,global,class=STRCODE,delta=2
     8                           	psect	stringtext4,global,class=STRCODE,delta=2
     9                           	psect	stringtext5,global,class=STRCODE,delta=2
    10                           	psect	stringtext6,global,class=STRCODE,delta=2
    11                           	psect	stringtext7,global,class=STRCODE,delta=2
    12                           	psect	stringtext8,global,class=STRCODE,delta=2
    13                           	psect	stringtext9,global,class=STRCODE,delta=2
    14                           	psect	stringtext10,global,class=STRCODE,delta=2
    15                           	psect	stringtext11,global,class=STRCODE,delta=2
    16                           	psect	stringtext12,global,class=STRCODE,delta=2
    17                           	psect	stringtext13,global,class=STRCODE,delta=2
    18                           	psect	cinit,global,class=CODE,merge=1,delta=2
    19                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    20                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    21                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    22                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    23                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    24                           	psect	clrtext,global,class=CODE,delta=2
    25                           	psect	cstackBANK4,global,class=BANK4,space=1,delta=1
    26                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    27                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    28                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    29                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    30                           	psect	text1,local,class=CODE,merge=1,delta=2
    31                           	psect	text2,local,class=CODE,merge=1,delta=2
    32                           	psect	text3,local,class=CODE,merge=1,delta=2
    33                           	psect	text4,local,class=CODE,merge=1,delta=2
    34                           	psect	text5,local,class=CODE,merge=1,delta=2,group=1
    35                           	psect	text6,local,class=CODE,merge=1,delta=2
    36                           	psect	text7,local,class=CODE,merge=1,delta=2
    37                           	psect	text8,local,class=CODE,merge=1,delta=2,group=1
    38                           	psect	text9,local,class=CODE,merge=1,delta=2
    39                           	psect	text10,local,class=CODE,merge=1,delta=2
    40                           	psect	text11,local,class=CODE,merge=1,delta=2,group=2
    41                           	psect	text12,local,class=CODE,merge=1,delta=2
    42                           	psect	text13,local,class=CODE,merge=1,delta=2
    43                           	psect	text14,local,class=CODE,merge=1,delta=2,group=2
    44                           	psect	text15,local,class=CODE,merge=1,delta=2
    45                           	psect	text16,local,class=CODE,merge=1,delta=2,group=2
    46                           	psect	text17,local,class=CODE,merge=1,delta=2
    47                           	psect	text18,local,class=CODE,merge=1,delta=2,group=2
    48                           	psect	text19,local,class=CODE,merge=1,delta=2
    49                           	psect	text20,local,class=CODE,merge=1,delta=2
    50                           	psect	text21,local,class=CODE,merge=1,delta=2
    51                           	psect	text22,local,class=CODE,merge=1,delta=2
    52                           	psect	text23,local,class=CODE,merge=1,delta=2
    53                           	psect	text24,local,class=CODE,merge=1,delta=2,group=2
    54                           	psect	text25,local,class=CODE,merge=1,delta=2,group=2
    55                           	psect	text26,local,class=CODE,merge=1,delta=2
    56                           	psect	text27,local,class=CODE,merge=1,delta=2,group=2
    57                           	psect	text28,local,class=CODE,merge=1,delta=2,group=1
    58                           	psect	text29,local,class=CODE,merge=1,delta=2,group=1
    59                           	psect	text30,local,class=CODE,merge=1,delta=2,group=1
    60                           	psect	text31,local,class=CODE,merge=1,delta=2,group=1
    61                           	psect	text32,local,class=CODE,merge=1,delta=2,group=1
    62                           	psect	text33,local,class=CODE,merge=1,delta=2,group=1
    63                           	psect	text34,local,class=CODE,merge=1,delta=2,group=1
    64                           	psect	text35,local,class=CODE,merge=1,delta=2,group=1
    65                           	psect	text36,local,class=CODE,merge=1,delta=2,group=1
    66                           	psect	text37,local,class=CODE,merge=1,delta=2
    67                           	psect	text38,local,class=CODE,merge=1,delta=2
    68                           	psect	text39,local,class=CODE,merge=1,delta=2
    69                           	psect	text40,local,class=CODE,merge=1,delta=2,group=1
    70                           	psect	text41,local,class=CODE,merge=1,delta=2,group=1
    71                           	psect	text42,local,class=CODE,merge=1,delta=2,group=1
    72                           	psect	text43,local,class=CODE,merge=1,delta=2,group=1
    73                           	psect	text44,local,class=CODE,merge=1,delta=2,group=1
    74                           	psect	text45,local,class=CODE,merge=1,delta=2
    75                           	psect	text46,local,class=CODE,merge=1,delta=2
    76                           	psect	intentry,global,class=CODE,delta=2
    77                           	psect	text48,local,class=CODE,merge=1,delta=2
    78                           	dabs	1,0x74,12
    79  0000                     
    80                           ; Version 2.00
    81                           ; Generated 27/05/2018 GMT
    82                           ; 
    83                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
    84                           ; All rights reserved.
    85                           ; 
    86                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    87                           ; 
    88                           ; Redistribution and use in source and binary forms, with or without modification, are
    89                           ; permitted provided that the following conditions are met:
    90                           ; 
    91                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    92                           ;        conditions and the following disclaimer.
    93                           ; 
    94                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    95                           ;        of conditions and the following disclaimer in the documentation and/or other
    96                           ;        materials provided with the distribution.
    97                           ; 
    98                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    99                           ;        software without specific prior written permission.
   100                           ; 
   101                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   102                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   103                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   104                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   105                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   106                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   107                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   108                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   109                           ; 
   110                           ; 
   111                           ; Code-generator required, PIC16LF18325 Definitions
   112                           ; 
   113                           ; SFR Addresses
   114  0000                     	;# 
   115  0001                     	;# 
   116  0002                     	;# 
   117  0003                     	;# 
   118  0004                     	;# 
   119  0005                     	;# 
   120  0006                     	;# 
   121  0007                     	;# 
   122  0008                     	;# 
   123  0009                     	;# 
   124  000A                     	;# 
   125  000B                     	;# 
   126  000C                     	;# 
   127  000E                     	;# 
   128  0010                     	;# 
   129  0011                     	;# 
   130  0012                     	;# 
   131  0013                     	;# 
   132  0014                     	;# 
   133  0015                     	;# 
   134  0015                     	;# 
   135  0016                     	;# 
   136  0016                     	;# 
   137  0017                     	;# 
   138  0018                     	;# 
   139  0019                     	;# 
   140  0019                     	;# 
   141  001A                     	;# 
   142  001B                     	;# 
   143  001C                     	;# 
   144  001D                     	;# 
   145  001E                     	;# 
   146  001F                     	;# 
   147  008C                     	;# 
   148  008E                     	;# 
   149  0090                     	;# 
   150  0091                     	;# 
   151  0092                     	;# 
   152  0093                     	;# 
   153  0094                     	;# 
   154  0097                     	;# 
   155  009B                     	;# 
   156  009B                     	;# 
   157  009C                     	;# 
   158  009D                     	;# 
   159  009E                     	;# 
   160  009F                     	;# 
   161  010C                     	;# 
   162  010E                     	;# 
   163  0111                     	;# 
   164  0112                     	;# 
   165  0113                     	;# 
   166  0114                     	;# 
   167  0115                     	;# 
   168  0116                     	;# 
   169  0117                     	;# 
   170  0118                     	;# 
   171  0119                     	;# 
   172  018C                     	;# 
   173  018E                     	;# 
   174  0199                     	;# 
   175  0199                     	;# 
   176  0199                     	;# 
   177  019A                     	;# 
   178  019A                     	;# 
   179  019A                     	;# 
   180  019B                     	;# 
   181  019B                     	;# 
   182  019B                     	;# 
   183  019B                     	;# 
   184  019B                     	;# 
   185  019C                     	;# 
   186  019C                     	;# 
   187  019C                     	;# 
   188  019D                     	;# 
   189  019D                     	;# 
   190  019D                     	;# 
   191  019E                     	;# 
   192  019E                     	;# 
   193  019E                     	;# 
   194  019F                     	;# 
   195  019F                     	;# 
   196  019F                     	;# 
   197  019F                     	;# 
   198  019F                     	;# 
   199  020C                     	;# 
   200  020E                     	;# 
   201  0211                     	;# 
   202  0211                     	;# 
   203  0212                     	;# 
   204  0212                     	;# 
   205  0213                     	;# 
   206  0213                     	;# 
   207  0214                     	;# 
   208  0214                     	;# 
   209  0215                     	;# 
   210  0215                     	;# 
   211  0215                     	;# 
   212  0215                     	;# 
   213  0216                     	;# 
   214  0216                     	;# 
   215  0217                     	;# 
   216  0217                     	;# 
   217  0219                     	;# 
   218  021A                     	;# 
   219  021B                     	;# 
   220  021C                     	;# 
   221  021D                     	;# 
   222  021D                     	;# 
   223  021E                     	;# 
   224  021F                     	;# 
   225  028C                     	;# 
   226  028E                     	;# 
   227  0291                     	;# 
   228  0291                     	;# 
   229  0292                     	;# 
   230  0293                     	;# 
   231  0294                     	;# 
   232  0295                     	;# 
   233  0295                     	;# 
   234  0296                     	;# 
   235  0297                     	;# 
   236  0298                     	;# 
   237  029F                     	;# 
   238  030C                     	;# 
   239  030E                     	;# 
   240  0311                     	;# 
   241  0311                     	;# 
   242  0312                     	;# 
   243  0313                     	;# 
   244  0314                     	;# 
   245  0315                     	;# 
   246  0315                     	;# 
   247  0316                     	;# 
   248  0317                     	;# 
   249  0318                     	;# 
   250  038C                     	;# 
   251  038E                     	;# 
   252  0391                     	;# 
   253  0392                     	;# 
   254  0393                     	;# 
   255  0397                     	;# 
   256  0398                     	;# 
   257  0399                     	;# 
   258  039A                     	;# 
   259  039C                     	;# 
   260  039D                     	;# 
   261  039E                     	;# 
   262  039F                     	;# 
   263  0411                     	;# 
   264  0411                     	;# 
   265  0412                     	;# 
   266  0413                     	;# 
   267  0414                     	;# 
   268  0415                     	;# 
   269  0416                     	;# 
   270  0417                     	;# 
   271  0418                     	;# 
   272  0418                     	;# 
   273  0419                     	;# 
   274  041A                     	;# 
   275  041B                     	;# 
   276  041C                     	;# 
   277  041D                     	;# 
   278  041E                     	;# 
   279  041F                     	;# 
   280  0498                     	;# 
   281  0498                     	;# 
   282  0499                     	;# 
   283  049A                     	;# 
   284  049B                     	;# 
   285  049B                     	;# 
   286  049C                     	;# 
   287  049D                     	;# 
   288  049E                     	;# 
   289  049F                     	;# 
   290  0617                     	;# 
   291  0618                     	;# 
   292  0619                     	;# 
   293  0619                     	;# 
   294  061A                     	;# 
   295  061B                     	;# 
   296  061C                     	;# 
   297  061C                     	;# 
   298  061F                     	;# 
   299  0691                     	;# 
   300  0692                     	;# 
   301  0693                     	;# 
   302  0694                     	;# 
   303  0695                     	;# 
   304  0696                     	;# 
   305  0697                     	;# 
   306  0698                     	;# 
   307  0699                     	;# 
   308  0711                     	;# 
   309  0712                     	;# 
   310  0713                     	;# 
   311  0714                     	;# 
   312  0715                     	;# 
   313  0716                     	;# 
   314  0717                     	;# 
   315  0718                     	;# 
   316  0719                     	;# 
   317  0891                     	;# 
   318  0891                     	;# 
   319  0891                     	;# 
   320  0891                     	;# 
   321  0891                     	;# 
   322  0891                     	;# 
   323  0892                     	;# 
   324  0892                     	;# 
   325  0892                     	;# 
   326  0893                     	;# 
   327  0893                     	;# 
   328  0893                     	;# 
   329  0893                     	;# 
   330  0893                     	;# 
   331  0893                     	;# 
   332  0894                     	;# 
   333  0894                     	;# 
   334  0894                     	;# 
   335  0895                     	;# 
   336  0895                     	;# 
   337  0895                     	;# 
   338  0896                     	;# 
   339  0896                     	;# 
   340  0896                     	;# 
   341  089B                     	;# 
   342  0911                     	;# 
   343  0912                     	;# 
   344  0913                     	;# 
   345  0914                     	;# 
   346  0915                     	;# 
   347  0916                     	;# 
   348  0918                     	;# 
   349  0919                     	;# 
   350  091A                     	;# 
   351  091B                     	;# 
   352  091C                     	;# 
   353  091D                     	;# 
   354  091E                     	;# 
   355  091F                     	;# 
   356  0E0F                     	;# 
   357  0E10                     	;# 
   358  0E11                     	;# 
   359  0E12                     	;# 
   360  0E13                     	;# 
   361  0E14                     	;# 
   362  0E15                     	;# 
   363  0E16                     	;# 
   364  0E17                     	;# 
   365  0E18                     	;# 
   366  0E19                     	;# 
   367  0E1A                     	;# 
   368  0E1B                     	;# 
   369  0E1C                     	;# 
   370  0E1D                     	;# 
   371  0E1E                     	;# 
   372  0E1F                     	;# 
   373  0E20                     	;# 
   374  0E21                     	;# 
   375  0E22                     	;# 
   376  0E24                     	;# 
   377  0E25                     	;# 
   378  0E28                     	;# 
   379  0E29                     	;# 
   380  0E2A                     	;# 
   381  0E2B                     	;# 
   382  0E2C                     	;# 
   383  0E2D                     	;# 
   384  0E2E                     	;# 
   385  0E2F                     	;# 
   386  0E90                     	;# 
   387  0E91                     	;# 
   388  0E92                     	;# 
   389  0E94                     	;# 
   390  0E95                     	;# 
   391  0EA0                     	;# 
   392  0EA1                     	;# 
   393  0EA2                     	;# 
   394  0EA3                     	;# 
   395  0EA4                     	;# 
   396  0EA5                     	;# 
   397  0F0F                     	;# 
   398  0F10                     	;# 
   399  0F11                     	;# 
   400  0F12                     	;# 
   401  0F13                     	;# 
   402  0F14                     	;# 
   403  0F15                     	;# 
   404  0F16                     	;# 
   405  0F17                     	;# 
   406  0F18                     	;# 
   407  0F19                     	;# 
   408  0F1A                     	;# 
   409  0F1B                     	;# 
   410  0F1C                     	;# 
   411  0F1D                     	;# 
   412  0F1E                     	;# 
   413  0F1F                     	;# 
   414  0F20                     	;# 
   415  0F21                     	;# 
   416  0F22                     	;# 
   417  0F23                     	;# 
   418  0F24                     	;# 
   419  0F25                     	;# 
   420  0F26                     	;# 
   421  0F27                     	;# 
   422  0F28                     	;# 
   423  0F29                     	;# 
   424  0F2A                     	;# 
   425  0F2B                     	;# 
   426  0F2C                     	;# 
   427  0F2D                     	;# 
   428  0F2E                     	;# 
   429  0F2F                     	;# 
   430  0F30                     	;# 
   431  0F31                     	;# 
   432  0F32                     	;# 
   433  0F33                     	;# 
   434  0F34                     	;# 
   435  0F35                     	;# 
   436  0F36                     	;# 
   437  0F37                     	;# 
   438  0FE4                     	;# 
   439  0FE5                     	;# 
   440  0FE6                     	;# 
   441  0FE7                     	;# 
   442  0FE8                     	;# 
   443  0FE9                     	;# 
   444  0FEA                     	;# 
   445  0FEB                     	;# 
   446  0FED                     	;# 
   447  0FEE                     	;# 
   448  0FEF                     	;# 
   449  0000                     	;# 
   450  0001                     	;# 
   451  0002                     	;# 
   452  0003                     	;# 
   453  0004                     	;# 
   454  0005                     	;# 
   455  0006                     	;# 
   456  0007                     	;# 
   457  0008                     	;# 
   458  0009                     	;# 
   459  000A                     	;# 
   460  000B                     	;# 
   461  000C                     	;# 
   462  000E                     	;# 
   463  0010                     	;# 
   464  0011                     	;# 
   465  0012                     	;# 
   466  0013                     	;# 
   467  0014                     	;# 
   468  0015                     	;# 
   469  0015                     	;# 
   470  0016                     	;# 
   471  0016                     	;# 
   472  0017                     	;# 
   473  0018                     	;# 
   474  0019                     	;# 
   475  0019                     	;# 
   476  001A                     	;# 
   477  001B                     	;# 
   478  001C                     	;# 
   479  001D                     	;# 
   480  001E                     	;# 
   481  001F                     	;# 
   482  008C                     	;# 
   483  008E                     	;# 
   484  0090                     	;# 
   485  0091                     	;# 
   486  0092                     	;# 
   487  0093                     	;# 
   488  0094                     	;# 
   489  0097                     	;# 
   490  009B                     	;# 
   491  009B                     	;# 
   492  009C                     	;# 
   493  009D                     	;# 
   494  009E                     	;# 
   495  009F                     	;# 
   496  010C                     	;# 
   497  010E                     	;# 
   498  0111                     	;# 
   499  0112                     	;# 
   500  0113                     	;# 
   501  0114                     	;# 
   502  0115                     	;# 
   503  0116                     	;# 
   504  0117                     	;# 
   505  0118                     	;# 
   506  0119                     	;# 
   507  018C                     	;# 
   508  018E                     	;# 
   509  0199                     	;# 
   510  0199                     	;# 
   511  0199                     	;# 
   512  019A                     	;# 
   513  019A                     	;# 
   514  019A                     	;# 
   515  019B                     	;# 
   516  019B                     	;# 
   517  019B                     	;# 
   518  019B                     	;# 
   519  019B                     	;# 
   520  019C                     	;# 
   521  019C                     	;# 
   522  019C                     	;# 
   523  019D                     	;# 
   524  019D                     	;# 
   525  019D                     	;# 
   526  019E                     	;# 
   527  019E                     	;# 
   528  019E                     	;# 
   529  019F                     	;# 
   530  019F                     	;# 
   531  019F                     	;# 
   532  019F                     	;# 
   533  019F                     	;# 
   534  020C                     	;# 
   535  020E                     	;# 
   536  0211                     	;# 
   537  0211                     	;# 
   538  0212                     	;# 
   539  0212                     	;# 
   540  0213                     	;# 
   541  0213                     	;# 
   542  0214                     	;# 
   543  0214                     	;# 
   544  0215                     	;# 
   545  0215                     	;# 
   546  0215                     	;# 
   547  0215                     	;# 
   548  0216                     	;# 
   549  0216                     	;# 
   550  0217                     	;# 
   551  0217                     	;# 
   552  0219                     	;# 
   553  021A                     	;# 
   554  021B                     	;# 
   555  021C                     	;# 
   556  021D                     	;# 
   557  021D                     	;# 
   558  021E                     	;# 
   559  021F                     	;# 
   560  028C                     	;# 
   561  028E                     	;# 
   562  0291                     	;# 
   563  0291                     	;# 
   564  0292                     	;# 
   565  0293                     	;# 
   566  0294                     	;# 
   567  0295                     	;# 
   568  0295                     	;# 
   569  0296                     	;# 
   570  0297                     	;# 
   571  0298                     	;# 
   572  029F                     	;# 
   573  030C                     	;# 
   574  030E                     	;# 
   575  0311                     	;# 
   576  0311                     	;# 
   577  0312                     	;# 
   578  0313                     	;# 
   579  0314                     	;# 
   580  0315                     	;# 
   581  0315                     	;# 
   582  0316                     	;# 
   583  0317                     	;# 
   584  0318                     	;# 
   585  038C                     	;# 
   586  038E                     	;# 
   587  0391                     	;# 
   588  0392                     	;# 
   589  0393                     	;# 
   590  0397                     	;# 
   591  0398                     	;# 
   592  0399                     	;# 
   593  039A                     	;# 
   594  039C                     	;# 
   595  039D                     	;# 
   596  039E                     	;# 
   597  039F                     	;# 
   598  0411                     	;# 
   599  0411                     	;# 
   600  0412                     	;# 
   601  0413                     	;# 
   602  0414                     	;# 
   603  0415                     	;# 
   604  0416                     	;# 
   605  0417                     	;# 
   606  0418                     	;# 
   607  0418                     	;# 
   608  0419                     	;# 
   609  041A                     	;# 
   610  041B                     	;# 
   611  041C                     	;# 
   612  041D                     	;# 
   613  041E                     	;# 
   614  041F                     	;# 
   615  0498                     	;# 
   616  0498                     	;# 
   617  0499                     	;# 
   618  049A                     	;# 
   619  049B                     	;# 
   620  049B                     	;# 
   621  049C                     	;# 
   622  049D                     	;# 
   623  049E                     	;# 
   624  049F                     	;# 
   625  0617                     	;# 
   626  0618                     	;# 
   627  0619                     	;# 
   628  0619                     	;# 
   629  061A                     	;# 
   630  061B                     	;# 
   631  061C                     	;# 
   632  061C                     	;# 
   633  061F                     	;# 
   634  0691                     	;# 
   635  0692                     	;# 
   636  0693                     	;# 
   637  0694                     	;# 
   638  0695                     	;# 
   639  0696                     	;# 
   640  0697                     	;# 
   641  0698                     	;# 
   642  0699                     	;# 
   643  0711                     	;# 
   644  0712                     	;# 
   645  0713                     	;# 
   646  0714                     	;# 
   647  0715                     	;# 
   648  0716                     	;# 
   649  0717                     	;# 
   650  0718                     	;# 
   651  0719                     	;# 
   652  0891                     	;# 
   653  0891                     	;# 
   654  0891                     	;# 
   655  0891                     	;# 
   656  0891                     	;# 
   657  0891                     	;# 
   658  0892                     	;# 
   659  0892                     	;# 
   660  0892                     	;# 
   661  0893                     	;# 
   662  0893                     	;# 
   663  0893                     	;# 
   664  0893                     	;# 
   665  0893                     	;# 
   666  0893                     	;# 
   667  0894                     	;# 
   668  0894                     	;# 
   669  0894                     	;# 
   670  0895                     	;# 
   671  0895                     	;# 
   672  0895                     	;# 
   673  0896                     	;# 
   674  0896                     	;# 
   675  0896                     	;# 
   676  089B                     	;# 
   677  0911                     	;# 
   678  0912                     	;# 
   679  0913                     	;# 
   680  0914                     	;# 
   681  0915                     	;# 
   682  0916                     	;# 
   683  0918                     	;# 
   684  0919                     	;# 
   685  091A                     	;# 
   686  091B                     	;# 
   687  091C                     	;# 
   688  091D                     	;# 
   689  091E                     	;# 
   690  091F                     	;# 
   691  0E0F                     	;# 
   692  0E10                     	;# 
   693  0E11                     	;# 
   694  0E12                     	;# 
   695  0E13                     	;# 
   696  0E14                     	;# 
   697  0E15                     	;# 
   698  0E16                     	;# 
   699  0E17                     	;# 
   700  0E18                     	;# 
   701  0E19                     	;# 
   702  0E1A                     	;# 
   703  0E1B                     	;# 
   704  0E1C                     	;# 
   705  0E1D                     	;# 
   706  0E1E                     	;# 
   707  0E1F                     	;# 
   708  0E20                     	;# 
   709  0E21                     	;# 
   710  0E22                     	;# 
   711  0E24                     	;# 
   712  0E25                     	;# 
   713  0E28                     	;# 
   714  0E29                     	;# 
   715  0E2A                     	;# 
   716  0E2B                     	;# 
   717  0E2C                     	;# 
   718  0E2D                     	;# 
   719  0E2E                     	;# 
   720  0E2F                     	;# 
   721  0E90                     	;# 
   722  0E91                     	;# 
   723  0E92                     	;# 
   724  0E94                     	;# 
   725  0E95                     	;# 
   726  0EA0                     	;# 
   727  0EA1                     	;# 
   728  0EA2                     	;# 
   729  0EA3                     	;# 
   730  0EA4                     	;# 
   731  0EA5                     	;# 
   732  0F0F                     	;# 
   733  0F10                     	;# 
   734  0F11                     	;# 
   735  0F12                     	;# 
   736  0F13                     	;# 
   737  0F14                     	;# 
   738  0F15                     	;# 
   739  0F16                     	;# 
   740  0F17                     	;# 
   741  0F18                     	;# 
   742  0F19                     	;# 
   743  0F1A                     	;# 
   744  0F1B                     	;# 
   745  0F1C                     	;# 
   746  0F1D                     	;# 
   747  0F1E                     	;# 
   748  0F1F                     	;# 
   749  0F20                     	;# 
   750  0F21                     	;# 
   751  0F22                     	;# 
   752  0F23                     	;# 
   753  0F24                     	;# 
   754  0F25                     	;# 
   755  0F26                     	;# 
   756  0F27                     	;# 
   757  0F28                     	;# 
   758  0F29                     	;# 
   759  0F2A                     	;# 
   760  0F2B                     	;# 
   761  0F2C                     	;# 
   762  0F2D                     	;# 
   763  0F2E                     	;# 
   764  0F2F                     	;# 
   765  0F30                     	;# 
   766  0F31                     	;# 
   767  0F32                     	;# 
   768  0F33                     	;# 
   769  0F34                     	;# 
   770  0F35                     	;# 
   771  0F36                     	;# 
   772  0F37                     	;# 
   773  0FE4                     	;# 
   774  0FE5                     	;# 
   775  0FE6                     	;# 
   776  0FE7                     	;# 
   777  0FE8                     	;# 
   778  0FE9                     	;# 
   779  0FEA                     	;# 
   780  0FEB                     	;# 
   781  0FED                     	;# 
   782  0FEE                     	;# 
   783  0FEF                     	;# 
   784  0000                     	;# 
   785  0001                     	;# 
   786  0002                     	;# 
   787  0003                     	;# 
   788  0004                     	;# 
   789  0005                     	;# 
   790  0006                     	;# 
   791  0007                     	;# 
   792  0008                     	;# 
   793  0009                     	;# 
   794  000A                     	;# 
   795  000B                     	;# 
   796  000C                     	;# 
   797  000E                     	;# 
   798  0010                     	;# 
   799  0011                     	;# 
   800  0012                     	;# 
   801  0013                     	;# 
   802  0014                     	;# 
   803  0015                     	;# 
   804  0015                     	;# 
   805  0016                     	;# 
   806  0016                     	;# 
   807  0017                     	;# 
   808  0018                     	;# 
   809  0019                     	;# 
   810  0019                     	;# 
   811  001A                     	;# 
   812  001B                     	;# 
   813  001C                     	;# 
   814  001D                     	;# 
   815  001E                     	;# 
   816  001F                     	;# 
   817  008C                     	;# 
   818  008E                     	;# 
   819  0090                     	;# 
   820  0091                     	;# 
   821  0092                     	;# 
   822  0093                     	;# 
   823  0094                     	;# 
   824  0097                     	;# 
   825  009B                     	;# 
   826  009B                     	;# 
   827  009C                     	;# 
   828  009D                     	;# 
   829  009E                     	;# 
   830  009F                     	;# 
   831  010C                     	;# 
   832  010E                     	;# 
   833  0111                     	;# 
   834  0112                     	;# 
   835  0113                     	;# 
   836  0114                     	;# 
   837  0115                     	;# 
   838  0116                     	;# 
   839  0117                     	;# 
   840  0118                     	;# 
   841  0119                     	;# 
   842  018C                     	;# 
   843  018E                     	;# 
   844  0199                     	;# 
   845  0199                     	;# 
   846  0199                     	;# 
   847  019A                     	;# 
   848  019A                     	;# 
   849  019A                     	;# 
   850  019B                     	;# 
   851  019B                     	;# 
   852  019B                     	;# 
   853  019B                     	;# 
   854  019B                     	;# 
   855  019C                     	;# 
   856  019C                     	;# 
   857  019C                     	;# 
   858  019D                     	;# 
   859  019D                     	;# 
   860  019D                     	;# 
   861  019E                     	;# 
   862  019E                     	;# 
   863  019E                     	;# 
   864  019F                     	;# 
   865  019F                     	;# 
   866  019F                     	;# 
   867  019F                     	;# 
   868  019F                     	;# 
   869  020C                     	;# 
   870  020E                     	;# 
   871  0211                     	;# 
   872  0211                     	;# 
   873  0212                     	;# 
   874  0212                     	;# 
   875  0213                     	;# 
   876  0213                     	;# 
   877  0214                     	;# 
   878  0214                     	;# 
   879  0215                     	;# 
   880  0215                     	;# 
   881  0215                     	;# 
   882  0215                     	;# 
   883  0216                     	;# 
   884  0216                     	;# 
   885  0217                     	;# 
   886  0217                     	;# 
   887  0219                     	;# 
   888  021A                     	;# 
   889  021B                     	;# 
   890  021C                     	;# 
   891  021D                     	;# 
   892  021D                     	;# 
   893  021E                     	;# 
   894  021F                     	;# 
   895  028C                     	;# 
   896  028E                     	;# 
   897  0291                     	;# 
   898  0291                     	;# 
   899  0292                     	;# 
   900  0293                     	;# 
   901  0294                     	;# 
   902  0295                     	;# 
   903  0295                     	;# 
   904  0296                     	;# 
   905  0297                     	;# 
   906  0298                     	;# 
   907  029F                     	;# 
   908  030C                     	;# 
   909  030E                     	;# 
   910  0311                     	;# 
   911  0311                     	;# 
   912  0312                     	;# 
   913  0313                     	;# 
   914  0314                     	;# 
   915  0315                     	;# 
   916  0315                     	;# 
   917  0316                     	;# 
   918  0317                     	;# 
   919  0318                     	;# 
   920  038C                     	;# 
   921  038E                     	;# 
   922  0391                     	;# 
   923  0392                     	;# 
   924  0393                     	;# 
   925  0397                     	;# 
   926  0398                     	;# 
   927  0399                     	;# 
   928  039A                     	;# 
   929  039C                     	;# 
   930  039D                     	;# 
   931  039E                     	;# 
   932  039F                     	;# 
   933  0411                     	;# 
   934  0411                     	;# 
   935  0412                     	;# 
   936  0413                     	;# 
   937  0414                     	;# 
   938  0415                     	;# 
   939  0416                     	;# 
   940  0417                     	;# 
   941  0418                     	;# 
   942  0418                     	;# 
   943  0419                     	;# 
   944  041A                     	;# 
   945  041B                     	;# 
   946  041C                     	;# 
   947  041D                     	;# 
   948  041E                     	;# 
   949  041F                     	;# 
   950  0498                     	;# 
   951  0498                     	;# 
   952  0499                     	;# 
   953  049A                     	;# 
   954  049B                     	;# 
   955  049B                     	;# 
   956  049C                     	;# 
   957  049D                     	;# 
   958  049E                     	;# 
   959  049F                     	;# 
   960  0617                     	;# 
   961  0618                     	;# 
   962  0619                     	;# 
   963  0619                     	;# 
   964  061A                     	;# 
   965  061B                     	;# 
   966  061C                     	;# 
   967  061C                     	;# 
   968  061F                     	;# 
   969  0691                     	;# 
   970  0692                     	;# 
   971  0693                     	;# 
   972  0694                     	;# 
   973  0695                     	;# 
   974  0696                     	;# 
   975  0697                     	;# 
   976  0698                     	;# 
   977  0699                     	;# 
   978  0711                     	;# 
   979  0712                     	;# 
   980  0713                     	;# 
   981  0714                     	;# 
   982  0715                     	;# 
   983  0716                     	;# 
   984  0717                     	;# 
   985  0718                     	;# 
   986  0719                     	;# 
   987  0891                     	;# 
   988  0891                     	;# 
   989  0891                     	;# 
   990  0891                     	;# 
   991  0891                     	;# 
   992  0891                     	;# 
   993  0892                     	;# 
   994  0892                     	;# 
   995  0892                     	;# 
   996  0893                     	;# 
   997  0893                     	;# 
   998  0893                     	;# 
   999  0893                     	;# 
  1000  0893                     	;# 
  1001  0893                     	;# 
  1002  0894                     	;# 
  1003  0894                     	;# 
  1004  0894                     	;# 
  1005  0895                     	;# 
  1006  0895                     	;# 
  1007  0895                     	;# 
  1008  0896                     	;# 
  1009  0896                     	;# 
  1010  0896                     	;# 
  1011  089B                     	;# 
  1012  0911                     	;# 
  1013  0912                     	;# 
  1014  0913                     	;# 
  1015  0914                     	;# 
  1016  0915                     	;# 
  1017  0916                     	;# 
  1018  0918                     	;# 
  1019  0919                     	;# 
  1020  091A                     	;# 
  1021  091B                     	;# 
  1022  091C                     	;# 
  1023  091D                     	;# 
  1024  091E                     	;# 
  1025  091F                     	;# 
  1026  0E0F                     	;# 
  1027  0E10                     	;# 
  1028  0E11                     	;# 
  1029  0E12                     	;# 
  1030  0E13                     	;# 
  1031  0E14                     	;# 
  1032  0E15                     	;# 
  1033  0E16                     	;# 
  1034  0E17                     	;# 
  1035  0E18                     	;# 
  1036  0E19                     	;# 
  1037  0E1A                     	;# 
  1038  0E1B                     	;# 
  1039  0E1C                     	;# 
  1040  0E1D                     	;# 
  1041  0E1E                     	;# 
  1042  0E1F                     	;# 
  1043  0E20                     	;# 
  1044  0E21                     	;# 
  1045  0E22                     	;# 
  1046  0E24                     	;# 
  1047  0E25                     	;# 
  1048  0E28                     	;# 
  1049  0E29                     	;# 
  1050  0E2A                     	;# 
  1051  0E2B                     	;# 
  1052  0E2C                     	;# 
  1053  0E2D                     	;# 
  1054  0E2E                     	;# 
  1055  0E2F                     	;# 
  1056  0E90                     	;# 
  1057  0E91                     	;# 
  1058  0E92                     	;# 
  1059  0E94                     	;# 
  1060  0E95                     	;# 
  1061  0EA0                     	;# 
  1062  0EA1                     	;# 
  1063  0EA2                     	;# 
  1064  0EA3                     	;# 
  1065  0EA4                     	;# 
  1066  0EA5                     	;# 
  1067  0F0F                     	;# 
  1068  0F10                     	;# 
  1069  0F11                     	;# 
  1070  0F12                     	;# 
  1071  0F13                     	;# 
  1072  0F14                     	;# 
  1073  0F15                     	;# 
  1074  0F16                     	;# 
  1075  0F17                     	;# 
  1076  0F18                     	;# 
  1077  0F19                     	;# 
  1078  0F1A                     	;# 
  1079  0F1B                     	;# 
  1080  0F1C                     	;# 
  1081  0F1D                     	;# 
  1082  0F1E                     	;# 
  1083  0F1F                     	;# 
  1084  0F20                     	;# 
  1085  0F21                     	;# 
  1086  0F22                     	;# 
  1087  0F23                     	;# 
  1088  0F24                     	;# 
  1089  0F25                     	;# 
  1090  0F26                     	;# 
  1091  0F27                     	;# 
  1092  0F28                     	;# 
  1093  0F29                     	;# 
  1094  0F2A                     	;# 
  1095  0F2B                     	;# 
  1096  0F2C                     	;# 
  1097  0F2D                     	;# 
  1098  0F2E                     	;# 
  1099  0F2F                     	;# 
  1100  0F30                     	;# 
  1101  0F31                     	;# 
  1102  0F32                     	;# 
  1103  0F33                     	;# 
  1104  0F34                     	;# 
  1105  0F35                     	;# 
  1106  0F36                     	;# 
  1107  0F37                     	;# 
  1108  0FE4                     	;# 
  1109  0FE5                     	;# 
  1110  0FE6                     	;# 
  1111  0FE7                     	;# 
  1112  0FE8                     	;# 
  1113  0FE9                     	;# 
  1114  0FEA                     	;# 
  1115  0FEB                     	;# 
  1116  0FED                     	;# 
  1117  0FEE                     	;# 
  1118  0FEF                     	;# 
  1119  0000                     	;# 
  1120  0001                     	;# 
  1121  0002                     	;# 
  1122  0003                     	;# 
  1123  0004                     	;# 
  1124  0005                     	;# 
  1125  0006                     	;# 
  1126  0007                     	;# 
  1127  0008                     	;# 
  1128  0009                     	;# 
  1129  000A                     	;# 
  1130  000B                     	;# 
  1131  000C                     	;# 
  1132  000E                     	;# 
  1133  0010                     	;# 
  1134  0011                     	;# 
  1135  0012                     	;# 
  1136  0013                     	;# 
  1137  0014                     	;# 
  1138  0015                     	;# 
  1139  0015                     	;# 
  1140  0016                     	;# 
  1141  0016                     	;# 
  1142  0017                     	;# 
  1143  0018                     	;# 
  1144  0019                     	;# 
  1145  0019                     	;# 
  1146  001A                     	;# 
  1147  001B                     	;# 
  1148  001C                     	;# 
  1149  001D                     	;# 
  1150  001E                     	;# 
  1151  001F                     	;# 
  1152  008C                     	;# 
  1153  008E                     	;# 
  1154  0090                     	;# 
  1155  0091                     	;# 
  1156  0092                     	;# 
  1157  0093                     	;# 
  1158  0094                     	;# 
  1159  0097                     	;# 
  1160  009B                     	;# 
  1161  009B                     	;# 
  1162  009C                     	;# 
  1163  009D                     	;# 
  1164  009E                     	;# 
  1165  009F                     	;# 
  1166  010C                     	;# 
  1167  010E                     	;# 
  1168  0111                     	;# 
  1169  0112                     	;# 
  1170  0113                     	;# 
  1171  0114                     	;# 
  1172  0115                     	;# 
  1173  0116                     	;# 
  1174  0117                     	;# 
  1175  0118                     	;# 
  1176  0119                     	;# 
  1177  018C                     	;# 
  1178  018E                     	;# 
  1179  0199                     	;# 
  1180  0199                     	;# 
  1181  0199                     	;# 
  1182  019A                     	;# 
  1183  019A                     	;# 
  1184  019A                     	;# 
  1185  019B                     	;# 
  1186  019B                     	;# 
  1187  019B                     	;# 
  1188  019B                     	;# 
  1189  019B                     	;# 
  1190  019C                     	;# 
  1191  019C                     	;# 
  1192  019C                     	;# 
  1193  019D                     	;# 
  1194  019D                     	;# 
  1195  019D                     	;# 
  1196  019E                     	;# 
  1197  019E                     	;# 
  1198  019E                     	;# 
  1199  019F                     	;# 
  1200  019F                     	;# 
  1201  019F                     	;# 
  1202  019F                     	;# 
  1203  019F                     	;# 
  1204  020C                     	;# 
  1205  020E                     	;# 
  1206  0211                     	;# 
  1207  0211                     	;# 
  1208  0212                     	;# 
  1209  0212                     	;# 
  1210  0213                     	;# 
  1211  0213                     	;# 
  1212  0214                     	;# 
  1213  0214                     	;# 
  1214  0215                     	;# 
  1215  0215                     	;# 
  1216  0215                     	;# 
  1217  0215                     	;# 
  1218  0216                     	;# 
  1219  0216                     	;# 
  1220  0217                     	;# 
  1221  0217                     	;# 
  1222  0219                     	;# 
  1223  021A                     	;# 
  1224  021B                     	;# 
  1225  021C                     	;# 
  1226  021D                     	;# 
  1227  021D                     	;# 
  1228  021E                     	;# 
  1229  021F                     	;# 
  1230  028C                     	;# 
  1231  028E                     	;# 
  1232  0291                     	;# 
  1233  0291                     	;# 
  1234  0292                     	;# 
  1235  0293                     	;# 
  1236  0294                     	;# 
  1237  0295                     	;# 
  1238  0295                     	;# 
  1239  0296                     	;# 
  1240  0297                     	;# 
  1241  0298                     	;# 
  1242  029F                     	;# 
  1243  030C                     	;# 
  1244  030E                     	;# 
  1245  0311                     	;# 
  1246  0311                     	;# 
  1247  0312                     	;# 
  1248  0313                     	;# 
  1249  0314                     	;# 
  1250  0315                     	;# 
  1251  0315                     	;# 
  1252  0316                     	;# 
  1253  0317                     	;# 
  1254  0318                     	;# 
  1255  038C                     	;# 
  1256  038E                     	;# 
  1257  0391                     	;# 
  1258  0392                     	;# 
  1259  0393                     	;# 
  1260  0397                     	;# 
  1261  0398                     	;# 
  1262  0399                     	;# 
  1263  039A                     	;# 
  1264  039C                     	;# 
  1265  039D                     	;# 
  1266  039E                     	;# 
  1267  039F                     	;# 
  1268  0411                     	;# 
  1269  0411                     	;# 
  1270  0412                     	;# 
  1271  0413                     	;# 
  1272  0414                     	;# 
  1273  0415                     	;# 
  1274  0416                     	;# 
  1275  0417                     	;# 
  1276  0418                     	;# 
  1277  0418                     	;# 
  1278  0419                     	;# 
  1279  041A                     	;# 
  1280  041B                     	;# 
  1281  041C                     	;# 
  1282  041D                     	;# 
  1283  041E                     	;# 
  1284  041F                     	;# 
  1285  0498                     	;# 
  1286  0498                     	;# 
  1287  0499                     	;# 
  1288  049A                     	;# 
  1289  049B                     	;# 
  1290  049B                     	;# 
  1291  049C                     	;# 
  1292  049D                     	;# 
  1293  049E                     	;# 
  1294  049F                     	;# 
  1295  0617                     	;# 
  1296  0618                     	;# 
  1297  0619                     	;# 
  1298  0619                     	;# 
  1299  061A                     	;# 
  1300  061B                     	;# 
  1301  061C                     	;# 
  1302  061C                     	;# 
  1303  061F                     	;# 
  1304  0691                     	;# 
  1305  0692                     	;# 
  1306  0693                     	;# 
  1307  0694                     	;# 
  1308  0695                     	;# 
  1309  0696                     	;# 
  1310  0697                     	;# 
  1311  0698                     	;# 
  1312  0699                     	;# 
  1313  0711                     	;# 
  1314  0712                     	;# 
  1315  0713                     	;# 
  1316  0714                     	;# 
  1317  0715                     	;# 
  1318  0716                     	;# 
  1319  0717                     	;# 
  1320  0718                     	;# 
  1321  0719                     	;# 
  1322  0891                     	;# 
  1323  0891                     	;# 
  1324  0891                     	;# 
  1325  0891                     	;# 
  1326  0891                     	;# 
  1327  0891                     	;# 
  1328  0892                     	;# 
  1329  0892                     	;# 
  1330  0892                     	;# 
  1331  0893                     	;# 
  1332  0893                     	;# 
  1333  0893                     	;# 
  1334  0893                     	;# 
  1335  0893                     	;# 
  1336  0893                     	;# 
  1337  0894                     	;# 
  1338  0894                     	;# 
  1339  0894                     	;# 
  1340  0895                     	;# 
  1341  0895                     	;# 
  1342  0895                     	;# 
  1343  0896                     	;# 
  1344  0896                     	;# 
  1345  0896                     	;# 
  1346  089B                     	;# 
  1347  0911                     	;# 
  1348  0912                     	;# 
  1349  0913                     	;# 
  1350  0914                     	;# 
  1351  0915                     	;# 
  1352  0916                     	;# 
  1353  0918                     	;# 
  1354  0919                     	;# 
  1355  091A                     	;# 
  1356  091B                     	;# 
  1357  091C                     	;# 
  1358  091D                     	;# 
  1359  091E                     	;# 
  1360  091F                     	;# 
  1361  0E0F                     	;# 
  1362  0E10                     	;# 
  1363  0E11                     	;# 
  1364  0E12                     	;# 
  1365  0E13                     	;# 
  1366  0E14                     	;# 
  1367  0E15                     	;# 
  1368  0E16                     	;# 
  1369  0E17                     	;# 
  1370  0E18                     	;# 
  1371  0E19                     	;# 
  1372  0E1A                     	;# 
  1373  0E1B                     	;# 
  1374  0E1C                     	;# 
  1375  0E1D                     	;# 
  1376  0E1E                     	;# 
  1377  0E1F                     	;# 
  1378  0E20                     	;# 
  1379  0E21                     	;# 
  1380  0E22                     	;# 
  1381  0E24                     	;# 
  1382  0E25                     	;# 
  1383  0E28                     	;# 
  1384  0E29                     	;# 
  1385  0E2A                     	;# 
  1386  0E2B                     	;# 
  1387  0E2C                     	;# 
  1388  0E2D                     	;# 
  1389  0E2E                     	;# 
  1390  0E2F                     	;# 
  1391  0E90                     	;# 
  1392  0E91                     	;# 
  1393  0E92                     	;# 
  1394  0E94                     	;# 
  1395  0E95                     	;# 
  1396  0EA0                     	;# 
  1397  0EA1                     	;# 
  1398  0EA2                     	;# 
  1399  0EA3                     	;# 
  1400  0EA4                     	;# 
  1401  0EA5                     	;# 
  1402  0F0F                     	;# 
  1403  0F10                     	;# 
  1404  0F11                     	;# 
  1405  0F12                     	;# 
  1406  0F13                     	;# 
  1407  0F14                     	;# 
  1408  0F15                     	;# 
  1409  0F16                     	;# 
  1410  0F17                     	;# 
  1411  0F18                     	;# 
  1412  0F19                     	;# 
  1413  0F1A                     	;# 
  1414  0F1B                     	;# 
  1415  0F1C                     	;# 
  1416  0F1D                     	;# 
  1417  0F1E                     	;# 
  1418  0F1F                     	;# 
  1419  0F20                     	;# 
  1420  0F21                     	;# 
  1421  0F22                     	;# 
  1422  0F23                     	;# 
  1423  0F24                     	;# 
  1424  0F25                     	;# 
  1425  0F26                     	;# 
  1426  0F27                     	;# 
  1427  0F28                     	;# 
  1428  0F29                     	;# 
  1429  0F2A                     	;# 
  1430  0F2B                     	;# 
  1431  0F2C                     	;# 
  1432  0F2D                     	;# 
  1433  0F2E                     	;# 
  1434  0F2F                     	;# 
  1435  0F30                     	;# 
  1436  0F31                     	;# 
  1437  0F32                     	;# 
  1438  0F33                     	;# 
  1439  0F34                     	;# 
  1440  0F35                     	;# 
  1441  0F36                     	;# 
  1442  0F37                     	;# 
  1443  0FE4                     	;# 
  1444  0FE5                     	;# 
  1445  0FE6                     	;# 
  1446  0FE7                     	;# 
  1447  0FE8                     	;# 
  1448  0FE9                     	;# 
  1449  0FEA                     	;# 
  1450  0FEB                     	;# 
  1451  0FED                     	;# 
  1452  0FEE                     	;# 
  1453  0FEF                     	;# 
  1454  0000                     	;# 
  1455  0001                     	;# 
  1456  0002                     	;# 
  1457  0003                     	;# 
  1458  0004                     	;# 
  1459  0005                     	;# 
  1460  0006                     	;# 
  1461  0007                     	;# 
  1462  0008                     	;# 
  1463  0009                     	;# 
  1464  000A                     	;# 
  1465  000B                     	;# 
  1466  000C                     	;# 
  1467  000E                     	;# 
  1468  0010                     	;# 
  1469  0011                     	;# 
  1470  0012                     	;# 
  1471  0013                     	;# 
  1472  0014                     	;# 
  1473  0015                     	;# 
  1474  0015                     	;# 
  1475  0016                     	;# 
  1476  0016                     	;# 
  1477  0017                     	;# 
  1478  0018                     	;# 
  1479  0019                     	;# 
  1480  0019                     	;# 
  1481  001A                     	;# 
  1482  001B                     	;# 
  1483  001C                     	;# 
  1484  001D                     	;# 
  1485  001E                     	;# 
  1486  001F                     	;# 
  1487  008C                     	;# 
  1488  008E                     	;# 
  1489  0090                     	;# 
  1490  0091                     	;# 
  1491  0092                     	;# 
  1492  0093                     	;# 
  1493  0094                     	;# 
  1494  0097                     	;# 
  1495  009B                     	;# 
  1496  009B                     	;# 
  1497  009C                     	;# 
  1498  009D                     	;# 
  1499  009E                     	;# 
  1500  009F                     	;# 
  1501  010C                     	;# 
  1502  010E                     	;# 
  1503  0111                     	;# 
  1504  0112                     	;# 
  1505  0113                     	;# 
  1506  0114                     	;# 
  1507  0115                     	;# 
  1508  0116                     	;# 
  1509  0117                     	;# 
  1510  0118                     	;# 
  1511  0119                     	;# 
  1512  018C                     	;# 
  1513  018E                     	;# 
  1514  0199                     	;# 
  1515  0199                     	;# 
  1516  0199                     	;# 
  1517  019A                     	;# 
  1518  019A                     	;# 
  1519  019A                     	;# 
  1520  019B                     	;# 
  1521  019B                     	;# 
  1522  019B                     	;# 
  1523  019B                     	;# 
  1524  019B                     	;# 
  1525  019C                     	;# 
  1526  019C                     	;# 
  1527  019C                     	;# 
  1528  019D                     	;# 
  1529  019D                     	;# 
  1530  019D                     	;# 
  1531  019E                     	;# 
  1532  019E                     	;# 
  1533  019E                     	;# 
  1534  019F                     	;# 
  1535  019F                     	;# 
  1536  019F                     	;# 
  1537  019F                     	;# 
  1538  019F                     	;# 
  1539  020C                     	;# 
  1540  020E                     	;# 
  1541  0211                     	;# 
  1542  0211                     	;# 
  1543  0212                     	;# 
  1544  0212                     	;# 
  1545  0213                     	;# 
  1546  0213                     	;# 
  1547  0214                     	;# 
  1548  0214                     	;# 
  1549  0215                     	;# 
  1550  0215                     	;# 
  1551  0215                     	;# 
  1552  0215                     	;# 
  1553  0216                     	;# 
  1554  0216                     	;# 
  1555  0217                     	;# 
  1556  0217                     	;# 
  1557  0219                     	;# 
  1558  021A                     	;# 
  1559  021B                     	;# 
  1560  021C                     	;# 
  1561  021D                     	;# 
  1562  021D                     	;# 
  1563  021E                     	;# 
  1564  021F                     	;# 
  1565  028C                     	;# 
  1566  028E                     	;# 
  1567  0291                     	;# 
  1568  0291                     	;# 
  1569  0292                     	;# 
  1570  0293                     	;# 
  1571  0294                     	;# 
  1572  0295                     	;# 
  1573  0295                     	;# 
  1574  0296                     	;# 
  1575  0297                     	;# 
  1576  0298                     	;# 
  1577  029F                     	;# 
  1578  030C                     	;# 
  1579  030E                     	;# 
  1580  0311                     	;# 
  1581  0311                     	;# 
  1582  0312                     	;# 
  1583  0313                     	;# 
  1584  0314                     	;# 
  1585  0315                     	;# 
  1586  0315                     	;# 
  1587  0316                     	;# 
  1588  0317                     	;# 
  1589  0318                     	;# 
  1590  038C                     	;# 
  1591  038E                     	;# 
  1592  0391                     	;# 
  1593  0392                     	;# 
  1594  0393                     	;# 
  1595  0397                     	;# 
  1596  0398                     	;# 
  1597  0399                     	;# 
  1598  039A                     	;# 
  1599  039C                     	;# 
  1600  039D                     	;# 
  1601  039E                     	;# 
  1602  039F                     	;# 
  1603  0411                     	;# 
  1604  0411                     	;# 
  1605  0412                     	;# 
  1606  0413                     	;# 
  1607  0414                     	;# 
  1608  0415                     	;# 
  1609  0416                     	;# 
  1610  0417                     	;# 
  1611  0418                     	;# 
  1612  0418                     	;# 
  1613  0419                     	;# 
  1614  041A                     	;# 
  1615  041B                     	;# 
  1616  041C                     	;# 
  1617  041D                     	;# 
  1618  041E                     	;# 
  1619  041F                     	;# 
  1620  0498                     	;# 
  1621  0498                     	;# 
  1622  0499                     	;# 
  1623  049A                     	;# 
  1624  049B                     	;# 
  1625  049B                     	;# 
  1626  049C                     	;# 
  1627  049D                     	;# 
  1628  049E                     	;# 
  1629  049F                     	;# 
  1630  0617                     	;# 
  1631  0618                     	;# 
  1632  0619                     	;# 
  1633  0619                     	;# 
  1634  061A                     	;# 
  1635  061B                     	;# 
  1636  061C                     	;# 
  1637  061C                     	;# 
  1638  061F                     	;# 
  1639  0691                     	;# 
  1640  0692                     	;# 
  1641  0693                     	;# 
  1642  0694                     	;# 
  1643  0695                     	;# 
  1644  0696                     	;# 
  1645  0697                     	;# 
  1646  0698                     	;# 
  1647  0699                     	;# 
  1648  0711                     	;# 
  1649  0712                     	;# 
  1650  0713                     	;# 
  1651  0714                     	;# 
  1652  0715                     	;# 
  1653  0716                     	;# 
  1654  0717                     	;# 
  1655  0718                     	;# 
  1656  0719                     	;# 
  1657  0891                     	;# 
  1658  0891                     	;# 
  1659  0891                     	;# 
  1660  0891                     	;# 
  1661  0891                     	;# 
  1662  0891                     	;# 
  1663  0892                     	;# 
  1664  0892                     	;# 
  1665  0892                     	;# 
  1666  0893                     	;# 
  1667  0893                     	;# 
  1668  0893                     	;# 
  1669  0893                     	;# 
  1670  0893                     	;# 
  1671  0893                     	;# 
  1672  0894                     	;# 
  1673  0894                     	;# 
  1674  0894                     	;# 
  1675  0895                     	;# 
  1676  0895                     	;# 
  1677  0895                     	;# 
  1678  0896                     	;# 
  1679  0896                     	;# 
  1680  0896                     	;# 
  1681  089B                     	;# 
  1682  0911                     	;# 
  1683  0912                     	;# 
  1684  0913                     	;# 
  1685  0914                     	;# 
  1686  0915                     	;# 
  1687  0916                     	;# 
  1688  0918                     	;# 
  1689  0919                     	;# 
  1690  091A                     	;# 
  1691  091B                     	;# 
  1692  091C                     	;# 
  1693  091D                     	;# 
  1694  091E                     	;# 
  1695  091F                     	;# 
  1696  0E0F                     	;# 
  1697  0E10                     	;# 
  1698  0E11                     	;# 
  1699  0E12                     	;# 
  1700  0E13                     	;# 
  1701  0E14                     	;# 
  1702  0E15                     	;# 
  1703  0E16                     	;# 
  1704  0E17                     	;# 
  1705  0E18                     	;# 
  1706  0E19                     	;# 
  1707  0E1A                     	;# 
  1708  0E1B                     	;# 
  1709  0E1C                     	;# 
  1710  0E1D                     	;# 
  1711  0E1E                     	;# 
  1712  0E1F                     	;# 
  1713  0E20                     	;# 
  1714  0E21                     	;# 
  1715  0E22                     	;# 
  1716  0E24                     	;# 
  1717  0E25                     	;# 
  1718  0E28                     	;# 
  1719  0E29                     	;# 
  1720  0E2A                     	;# 
  1721  0E2B                     	;# 
  1722  0E2C                     	;# 
  1723  0E2D                     	;# 
  1724  0E2E                     	;# 
  1725  0E2F                     	;# 
  1726  0E90                     	;# 
  1727  0E91                     	;# 
  1728  0E92                     	;# 
  1729  0E94                     	;# 
  1730  0E95                     	;# 
  1731  0EA0                     	;# 
  1732  0EA1                     	;# 
  1733  0EA2                     	;# 
  1734  0EA3                     	;# 
  1735  0EA4                     	;# 
  1736  0EA5                     	;# 
  1737  0F0F                     	;# 
  1738  0F10                     	;# 
  1739  0F11                     	;# 
  1740  0F12                     	;# 
  1741  0F13                     	;# 
  1742  0F14                     	;# 
  1743  0F15                     	;# 
  1744  0F16                     	;# 
  1745  0F17                     	;# 
  1746  0F18                     	;# 
  1747  0F19                     	;# 
  1748  0F1A                     	;# 
  1749  0F1B                     	;# 
  1750  0F1C                     	;# 
  1751  0F1D                     	;# 
  1752  0F1E                     	;# 
  1753  0F1F                     	;# 
  1754  0F20                     	;# 
  1755  0F21                     	;# 
  1756  0F22                     	;# 
  1757  0F23                     	;# 
  1758  0F24                     	;# 
  1759  0F25                     	;# 
  1760  0F26                     	;# 
  1761  0F27                     	;# 
  1762  0F28                     	;# 
  1763  0F29                     	;# 
  1764  0F2A                     	;# 
  1765  0F2B                     	;# 
  1766  0F2C                     	;# 
  1767  0F2D                     	;# 
  1768  0F2E                     	;# 
  1769  0F2F                     	;# 
  1770  0F30                     	;# 
  1771  0F31                     	;# 
  1772  0F32                     	;# 
  1773  0F33                     	;# 
  1774  0F34                     	;# 
  1775  0F35                     	;# 
  1776  0F36                     	;# 
  1777  0F37                     	;# 
  1778  0FE4                     	;# 
  1779  0FE5                     	;# 
  1780  0FE6                     	;# 
  1781  0FE7                     	;# 
  1782  0FE8                     	;# 
  1783  0FE9                     	;# 
  1784  0FEA                     	;# 
  1785  0FEB                     	;# 
  1786  0FED                     	;# 
  1787  0FEE                     	;# 
  1788  0FEF                     	;# 
  1789  0000                     	;# 
  1790  0001                     	;# 
  1791  0002                     	;# 
  1792  0003                     	;# 
  1793  0004                     	;# 
  1794  0005                     	;# 
  1795  0006                     	;# 
  1796  0007                     	;# 
  1797  0008                     	;# 
  1798  0009                     	;# 
  1799  000A                     	;# 
  1800  000B                     	;# 
  1801  000C                     	;# 
  1802  000E                     	;# 
  1803  0010                     	;# 
  1804  0011                     	;# 
  1805  0012                     	;# 
  1806  0013                     	;# 
  1807  0014                     	;# 
  1808  0015                     	;# 
  1809  0015                     	;# 
  1810  0016                     	;# 
  1811  0016                     	;# 
  1812  0017                     	;# 
  1813  0018                     	;# 
  1814  0019                     	;# 
  1815  0019                     	;# 
  1816  001A                     	;# 
  1817  001B                     	;# 
  1818  001C                     	;# 
  1819  001D                     	;# 
  1820  001E                     	;# 
  1821  001F                     	;# 
  1822  008C                     	;# 
  1823  008E                     	;# 
  1824  0090                     	;# 
  1825  0091                     	;# 
  1826  0092                     	;# 
  1827  0093                     	;# 
  1828  0094                     	;# 
  1829  0097                     	;# 
  1830  009B                     	;# 
  1831  009B                     	;# 
  1832  009C                     	;# 
  1833  009D                     	;# 
  1834  009E                     	;# 
  1835  009F                     	;# 
  1836  010C                     	;# 
  1837  010E                     	;# 
  1838  0111                     	;# 
  1839  0112                     	;# 
  1840  0113                     	;# 
  1841  0114                     	;# 
  1842  0115                     	;# 
  1843  0116                     	;# 
  1844  0117                     	;# 
  1845  0118                     	;# 
  1846  0119                     	;# 
  1847  018C                     	;# 
  1848  018E                     	;# 
  1849  0199                     	;# 
  1850  0199                     	;# 
  1851  0199                     	;# 
  1852  019A                     	;# 
  1853  019A                     	;# 
  1854  019A                     	;# 
  1855  019B                     	;# 
  1856  019B                     	;# 
  1857  019B                     	;# 
  1858  019B                     	;# 
  1859  019B                     	;# 
  1860  019C                     	;# 
  1861  019C                     	;# 
  1862  019C                     	;# 
  1863  019D                     	;# 
  1864  019D                     	;# 
  1865  019D                     	;# 
  1866  019E                     	;# 
  1867  019E                     	;# 
  1868  019E                     	;# 
  1869  019F                     	;# 
  1870  019F                     	;# 
  1871  019F                     	;# 
  1872  019F                     	;# 
  1873  019F                     	;# 
  1874  020C                     	;# 
  1875  020E                     	;# 
  1876  0211                     	;# 
  1877  0211                     	;# 
  1878  0212                     	;# 
  1879  0212                     	;# 
  1880  0213                     	;# 
  1881  0213                     	;# 
  1882  0214                     	;# 
  1883  0214                     	;# 
  1884  0215                     	;# 
  1885  0215                     	;# 
  1886  0215                     	;# 
  1887  0215                     	;# 
  1888  0216                     	;# 
  1889  0216                     	;# 
  1890  0217                     	;# 
  1891  0217                     	;# 
  1892  0219                     	;# 
  1893  021A                     	;# 
  1894  021B                     	;# 
  1895  021C                     	;# 
  1896  021D                     	;# 
  1897  021D                     	;# 
  1898  021E                     	;# 
  1899  021F                     	;# 
  1900  028C                     	;# 
  1901  028E                     	;# 
  1902  0291                     	;# 
  1903  0291                     	;# 
  1904  0292                     	;# 
  1905  0293                     	;# 
  1906  0294                     	;# 
  1907  0295                     	;# 
  1908  0295                     	;# 
  1909  0296                     	;# 
  1910  0297                     	;# 
  1911  0298                     	;# 
  1912  029F                     	;# 
  1913  030C                     	;# 
  1914  030E                     	;# 
  1915  0311                     	;# 
  1916  0311                     	;# 
  1917  0312                     	;# 
  1918  0313                     	;# 
  1919  0314                     	;# 
  1920  0315                     	;# 
  1921  0315                     	;# 
  1922  0316                     	;# 
  1923  0317                     	;# 
  1924  0318                     	;# 
  1925  038C                     	;# 
  1926  038E                     	;# 
  1927  0391                     	;# 
  1928  0392                     	;# 
  1929  0393                     	;# 
  1930  0397                     	;# 
  1931  0398                     	;# 
  1932  0399                     	;# 
  1933  039A                     	;# 
  1934  039C                     	;# 
  1935  039D                     	;# 
  1936  039E                     	;# 
  1937  039F                     	;# 
  1938  0411                     	;# 
  1939  0411                     	;# 
  1940  0412                     	;# 
  1941  0413                     	;# 
  1942  0414                     	;# 
  1943  0415                     	;# 
  1944  0416                     	;# 
  1945  0417                     	;# 
  1946  0418                     	;# 
  1947  0418                     	;# 
  1948  0419                     	;# 
  1949  041A                     	;# 
  1950  041B                     	;# 
  1951  041C                     	;# 
  1952  041D                     	;# 
  1953  041E                     	;# 
  1954  041F                     	;# 
  1955  0498                     	;# 
  1956  0498                     	;# 
  1957  0499                     	;# 
  1958  049A                     	;# 
  1959  049B                     	;# 
  1960  049B                     	;# 
  1961  049C                     	;# 
  1962  049D                     	;# 
  1963  049E                     	;# 
  1964  049F                     	;# 
  1965  0617                     	;# 
  1966  0618                     	;# 
  1967  0619                     	;# 
  1968  0619                     	;# 
  1969  061A                     	;# 
  1970  061B                     	;# 
  1971  061C                     	;# 
  1972  061C                     	;# 
  1973  061F                     	;# 
  1974  0691                     	;# 
  1975  0692                     	;# 
  1976  0693                     	;# 
  1977  0694                     	;# 
  1978  0695                     	;# 
  1979  0696                     	;# 
  1980  0697                     	;# 
  1981  0698                     	;# 
  1982  0699                     	;# 
  1983  0711                     	;# 
  1984  0712                     	;# 
  1985  0713                     	;# 
  1986  0714                     	;# 
  1987  0715                     	;# 
  1988  0716                     	;# 
  1989  0717                     	;# 
  1990  0718                     	;# 
  1991  0719                     	;# 
  1992  0891                     	;# 
  1993  0891                     	;# 
  1994  0891                     	;# 
  1995  0891                     	;# 
  1996  0891                     	;# 
  1997  0891                     	;# 
  1998  0892                     	;# 
  1999  0892                     	;# 
  2000  0892                     	;# 
  2001  0893                     	;# 
  2002  0893                     	;# 
  2003  0893                     	;# 
  2004  0893                     	;# 
  2005  0893                     	;# 
  2006  0893                     	;# 
  2007  0894                     	;# 
  2008  0894                     	;# 
  2009  0894                     	;# 
  2010  0895                     	;# 
  2011  0895                     	;# 
  2012  0895                     	;# 
  2013  0896                     	;# 
  2014  0896                     	;# 
  2015  0896                     	;# 
  2016  089B                     	;# 
  2017  0911                     	;# 
  2018  0912                     	;# 
  2019  0913                     	;# 
  2020  0914                     	;# 
  2021  0915                     	;# 
  2022  0916                     	;# 
  2023  0918                     	;# 
  2024  0919                     	;# 
  2025  091A                     	;# 
  2026  091B                     	;# 
  2027  091C                     	;# 
  2028  091D                     	;# 
  2029  091E                     	;# 
  2030  091F                     	;# 
  2031  0E0F                     	;# 
  2032  0E10                     	;# 
  2033  0E11                     	;# 
  2034  0E12                     	;# 
  2035  0E13                     	;# 
  2036  0E14                     	;# 
  2037  0E15                     	;# 
  2038  0E16                     	;# 
  2039  0E17                     	;# 
  2040  0E18                     	;# 
  2041  0E19                     	;# 
  2042  0E1A                     	;# 
  2043  0E1B                     	;# 
  2044  0E1C                     	;# 
  2045  0E1D                     	;# 
  2046  0E1E                     	;# 
  2047  0E1F                     	;# 
  2048  0E20                     	;# 
  2049  0E21                     	;# 
  2050  0E22                     	;# 
  2051  0E24                     	;# 
  2052  0E25                     	;# 
  2053  0E28                     	;# 
  2054  0E29                     	;# 
  2055  0E2A                     	;# 
  2056  0E2B                     	;# 
  2057  0E2C                     	;# 
  2058  0E2D                     	;# 
  2059  0E2E                     	;# 
  2060  0E2F                     	;# 
  2061  0E90                     	;# 
  2062  0E91                     	;# 
  2063  0E92                     	;# 
  2064  0E94                     	;# 
  2065  0E95                     	;# 
  2066  0EA0                     	;# 
  2067  0EA1                     	;# 
  2068  0EA2                     	;# 
  2069  0EA3                     	;# 
  2070  0EA4                     	;# 
  2071  0EA5                     	;# 
  2072  0F0F                     	;# 
  2073  0F10                     	;# 
  2074  0F11                     	;# 
  2075  0F12                     	;# 
  2076  0F13                     	;# 
  2077  0F14                     	;# 
  2078  0F15                     	;# 
  2079  0F16                     	;# 
  2080  0F17                     	;# 
  2081  0F18                     	;# 
  2082  0F19                     	;# 
  2083  0F1A                     	;# 
  2084  0F1B                     	;# 
  2085  0F1C                     	;# 
  2086  0F1D                     	;# 
  2087  0F1E                     	;# 
  2088  0F1F                     	;# 
  2089  0F20                     	;# 
  2090  0F21                     	;# 
  2091  0F22                     	;# 
  2092  0F23                     	;# 
  2093  0F24                     	;# 
  2094  0F25                     	;# 
  2095  0F26                     	;# 
  2096  0F27                     	;# 
  2097  0F28                     	;# 
  2098  0F29                     	;# 
  2099  0F2A                     	;# 
  2100  0F2B                     	;# 
  2101  0F2C                     	;# 
  2102  0F2D                     	;# 
  2103  0F2E                     	;# 
  2104  0F2F                     	;# 
  2105  0F30                     	;# 
  2106  0F31                     	;# 
  2107  0F32                     	;# 
  2108  0F33                     	;# 
  2109  0F34                     	;# 
  2110  0F35                     	;# 
  2111  0F36                     	;# 
  2112  0F37                     	;# 
  2113  0FE4                     	;# 
  2114  0FE5                     	;# 
  2115  0FE6                     	;# 
  2116  0FE7                     	;# 
  2117  0FE8                     	;# 
  2118  0FE9                     	;# 
  2119  0FEA                     	;# 
  2120  0FEB                     	;# 
  2121  0FED                     	;# 
  2122  0FEE                     	;# 
  2123  0FEF                     	;# 
  2124                           
  2125                           	psect	idataBANK1
  2126  07FE                     __pidataBANK1:	
  2127 ;;nrf24l01Service@width	offset	0
  2128 ;;nrf24l01Service@i	offset	1
  2129 ;;strcmp@s1	offset	0
  2130 ;;strcmp@r	offset	1
  2131 ;;strcmp@s2	offset=-1 (param)
  2132 ;;nrf24l01SendTXBuffer@packet	offset	0
  2133 ;;nrf24l01SendTXBuffer@i	offset	1
  2134 ;;nrf24l01SendTXBuffer@width	offset	2
  2135 ;;strlen@s	offset	0
  2136 ;;strlen@cp	offset	1
  2137 ;;nrf24l01SetRXMode@rxMode	offset	0
  2138 ;;nrf24l01Send@command	offset	0
  2139 ;;nrf24l01Send@data	offset=-1 (param)
  2140 ;;nrf24l01SPISend@data	offset	0
  2141 ;;memset@p	offset	0
  2142 ;;memset@p1	offset=-2 (param)
  2143 ;;memset@c	offset=-4 (param)
  2144 ;;memset@n	offset=-6 (param)
  2145 ;;nrf24l01Service@width	offset	0
  2146 ;;nrf24l01Service@i	offset	1
  2147 ;;strcmp@s1	offset	0
  2148 ;;strcmp@r	offset	1
  2149 ;;strcmp@s2	offset=-1 (param)
  2150 ;;nrf24l01SendTXBuffer@packet	offset	0
  2151 ;;nrf24l01SendTXBuffer@i	offset	1
  2152 ;;nrf24l01SendTXBuffer@width	offset	2
  2153 ;;strlen@s	offset	0
  2154 ;;strlen@cp	offset	1
  2155 ;;nrf24l01SetRXMode@rxMode	offset	0
  2156 ;;nrf24l01Send@command	offset	0
  2157 ;;nrf24l01Send@data	offset=-1 (param)
  2158 ;;nrf24l01SPISend@data	offset	0
  2159 ;;memset@p	offset	0
  2160 ;;memset@p1	offset=-2 (param)
  2161 ;;memset@c	offset=-4 (param)
  2162 ;;memset@n	offset=-6 (param)
  2163                           
  2164                           
  2165                           ;initializer for _romData
  2166  07FE  3420               	retlw	low (_romDataMap| (0+256))
  2167                           
  2168                           	psect	stringtext1
  2169  1000                     __pstringtext1:	
  2170  1000                     _dpowers:	
  2171  1000  3401               	retlw	1
  2172  1001  3400               	retlw	0
  2173  1002  3400               	retlw	0
  2174  1003  3400               	retlw	0
  2175  1004  340A               	retlw	10
  2176  1005  3400               	retlw	0
  2177  1006  3400               	retlw	0
  2178  1007  3400               	retlw	0
  2179  1008  3464               	retlw	100
  2180  1009  3400               	retlw	0
  2181  100A  3400               	retlw	0
  2182  100B  3400               	retlw	0
  2183  100C  34E8               	retlw	232
  2184  100D  3403               	retlw	3
  2185  100E  3400               	retlw	0
  2186  100F  3400               	retlw	0
  2187  1010  3410               	retlw	16
  2188  1011  3427               	retlw	39
  2189  1012  3400               	retlw	0
  2190  1013  3400               	retlw	0
  2191  1014  34A0               	retlw	160
  2192  1015  3486               	retlw	134
  2193  1016  3401               	retlw	1
  2194  1017  3400               	retlw	0
  2195  1018  3440               	retlw	64
  2196  1019  3442               	retlw	66
  2197  101A  340F               	retlw	15
  2198  101B  3400               	retlw	0
  2199  101C  3480               	retlw	128
  2200  101D  3496               	retlw	150
  2201  101E  3498               	retlw	152
  2202  101F  3400               	retlw	0
  2203  1020  3400               	retlw	0
  2204  1021  34E1               	retlw	225
  2205  1022  34F5               	retlw	245
  2206  1023  3405               	retlw	5
  2207  1024  3400               	retlw	0
  2208  1025  34CA               	retlw	202
  2209  1026  349A               	retlw	154
  2210  1027  343B               	retlw	59
  2211  1028                     __end_of_dpowers:	
  2212                           
  2213                           	psect	stringtext2
  2214  182B                     __pstringtext2:	
  2215  182B                     _n_ADDRESS_P0:	
  2216  182B  34AD               	retlw	173
  2217  182C  3487               	retlw	135
  2218  182D  3466               	retlw	102
  2219  182E  34BC               	retlw	188
  2220  182F  34BB               	retlw	187
  2221  1830                     __end_of_n_ADDRESS_P0:	
  2222                           
  2223                           	psect	stringtext3
  2224  1800                     __pstringtext3:	
  2225  1800                     _n_ADDRESS_MUL:	
  2226  1800  3421               	retlw	33
  2227  1801                     __end_of_n_ADDRESS_MUL:	
  2228  000B                     _INTCONbits	set	11
  2229  0010                     _PIR0bits	set	16
  2230  000C                     _PORTAbits	set	12
  2231  000E                     _PORTCbits	set	14
  2232  0003                     _STATUSbits	set	3
  2233  009E                     _ADCON1bits	set	158
  2234  009C                     _ADRESH	set	156
  2235  009B                     _ADRESL	set	155
  2236  009D                     _ADCON0bits	set	157
  2237  0090                     _PIE0bits	set	144
  2238  0097                     _WDTCONbits	set	151
  2239  008E                     _TRISCbits	set	142
  2240  008C                     _TRISAbits	set	140
  2241  0117                     _FVRCONbits	set	279
  2242  018E                     _ANSELCbits	set	398
  2243  018C                     _ANSELAbits	set	396
  2244  018E                     _ANSELC	set	398
  2245  018C                     _ANSELA	set	396
  2246  020C                     _WPUAbits	set	524
  2247  020E                     _WPUC	set	526
  2248  020C                     _WPUA	set	524
  2249  0211                     _SSP1BUF	set	529
  2250  0214                     _SSP1STATbits	set	532
  2251  0215                     _SSP1CON1bits	set	533
  2252  028C                     _ODCONAbits	set	652
  2253  028E                     _ODCONC	set	654
  2254  028C                     _ODCONA	set	652
  2255  038E                     _INLVLC	set	910
  2256  038C                     _INLVLA	set	908
  2257  0896                     _NVMCON2	set	2198
  2258  0895                     _NVMCON1bits	set	2197
  2259  0893                     _NVMDATL	set	2195
  2260  0891                     _NVMADRL	set	2193
  2261  0892                     _NVMADRH	set	2194
  2262  0919                     _OSCCON1bits	set	2329
  2263  0EA0                     _RC0PPSbits	set	3744
  2264  0EA2                     _RC2PPSbits	set	3746
  2265  0EA1                     _RC1PPSbits	set	3745
  2266  1801                     STR_11:	
  2267  1801  3425               	retlw	37	;'%'
  2268  1802  346C               	retlw	108	;'l'
  2269  1803  3475               	retlw	117	;'u'
  2270  1804  342E               	retlw	46	;'.'
  2271  1805  3425               	retlw	37	;'%'
  2272  1806  3436               	retlw	54	;'6'
  2273  1807  342E               	retlw	46	;'.'
  2274  1808  3436               	retlw	54	;'6'
  2275  1809  346C               	retlw	108	;'l'
  2276  180A  3475               	retlw	117	;'u'
  2277  180B  3400               	retlw	0
  2278                           
  2279                           	psect	stringtext4
  2280  180C                     __pstringtext4:	
  2281  180C                     STR_5:	
  2282  180C  3441               	retlw	65	;'A'
  2283  180D  344E               	retlw	78	;'N'
  2284  180E  3443               	retlw	67	;'C'
  2285  180F  3433               	retlw	51	;'3'
  2286  1810  346D               	retlw	109	;'m'
  2287  1811  3456               	retlw	86	;'V'
  2288  1812  3400               	retlw	0
  2289                           
  2290                           	psect	stringtext5
  2291  1813                     __pstringtext5:	
  2292  1813                     STR_9:	
  2293  1813  3442               	retlw	66	;'B'
  2294  1814  344F               	retlw	79	;'O'
  2295  1815  344F               	retlw	79	;'O'
  2296  1816  3454               	retlw	84	;'T'
  2297  1817  3430               	retlw	48	;'0'
  2298  1818  3400               	retlw	0
  2299                           
  2300                           	psect	stringtext6
  2301  1819                     __pstringtext6:	
  2302  1819                     STR_10:	
  2303  1819  3442               	retlw	66	;'B'
  2304  181A  344F               	retlw	79	;'O'
  2305  181B  344F               	retlw	79	;'O'
  2306  181C  3454               	retlw	84	;'T'
  2307  181D  3431               	retlw	49	;'1'
  2308  181E  3400               	retlw	0
  2309                           
  2310                           	psect	stringtext7
  2311  181F                     __pstringtext7:	
  2312  181F                     STR_7:	
  2313  181F  3452               	retlw	82	;'R'
  2314  1820  3446               	retlw	70	;'F'
  2315  1821  3450               	retlw	80	;'P'
  2316  1822  3457               	retlw	87	;'W'
  2317  1823  3452               	retlw	82	;'R'
  2318  1824  3400               	retlw	0
  2319                           
  2320                           	psect	stringtext8
  2321  1825                     __pstringtext8:	
  2322  1825                     STR_3:	
  2323  1825  3443               	retlw	67	;'C'
  2324  1826  344F               	retlw	79	;'O'
  2325  1827  3455               	retlw	85	;'U'
  2326  1828  344E               	retlw	78	;'N'
  2327  1829  3454               	retlw	84	;'T'
  2328  182A  3400               	retlw	0
  2329                           
  2330                           	psect	stringtext9
  2331  1830                     __pstringtext9:	
  2332  1830                     STR_6:	
  2333  1830  3454               	retlw	84	;'T'
  2334  1831  3445               	retlw	69	;'E'
  2335  1832  344D               	retlw	77	;'M'
  2336  1833  3450               	retlw	80	;'P'
  2337  1834  3400               	retlw	0
  2338                           
  2339                           	psect	stringtext10
  2340  1835                     __pstringtext10:	
  2341  1835                     STR_4:	
  2342  1835  3456               	retlw	86	;'V'
  2343  1836  3442               	retlw	66	;'B'
  2344  1837  3441               	retlw	65	;'A'
  2345  1838  3454               	retlw	84	;'T'
  2346  1839  3400               	retlw	0
  2347                           
  2348                           	psect	stringtext11
  2349  183A                     __pstringtext11:	
  2350  183A                     STR_8:	
  2351  183A  3455               	retlw	85	;'U'
  2352  183B  3448               	retlw	72	;'H'
  2353  183C  3431               	retlw	49	;'1'
  2354  183D  3400               	retlw	0
  2355                           
  2356                           	psect	stringtext12
  2357  183E                     __pstringtext12:	
  2358  183E                     STR_1:	
  2359  183E  342F               	retlw	47	;'/'
  2360  183F  3400               	retlw	0
  2361                           
  2362                           	psect	stringtext13
  2363  0000                     __pstringtext13:	
  2364  183E                     
  2365                           ; #config settings
  2366  0000                     
  2367                           	psect	cinit
  2368  002D                     start_initialization:	
  2369  002D                     __initialization:	
  2370                           
  2371                           ; Initialize objects allocated to BANK1
  2372  002D  0021               	movlb	1	; select bank1
  2373  002E  3187  27FE  3180   	fcall	__pidataBANK1	;fetch initializer
  2374  0031  00E3               	movwf	__pdataBANK1& (0+127)
  2375                           
  2376                           ; Clear objects allocated to BANK0
  2377  0032  0020               	movlb	0	; select bank0
  2378  0033  01E4               	clrf	__pbssBANK0& (0+127)
  2379  0034  01E5               	clrf	(__pbssBANK0+1)& (0+127)
  2380  0035  01E6               	clrf	(__pbssBANK0+2)& (0+127)
  2381  0036  01E7               	clrf	(__pbssBANK0+3)& (0+127)
  2382  0037  01E8               	clrf	(__pbssBANK0+4)& (0+127)
  2383  0038  01E9               	clrf	(__pbssBANK0+5)& (0+127)
  2384                           
  2385                           ; Clear objects allocated to BANK1
  2386  0039  0021               	movlb	1	; select bank1
  2387  003A  01DD               	clrf	__pbssBANK1& (0+127)
  2388  003B  01DE               	clrf	(__pbssBANK1+1)& (0+127)
  2389  003C  01DF               	clrf	(__pbssBANK1+2)& (0+127)
  2390  003D  01E0               	clrf	(__pbssBANK1+3)& (0+127)
  2391  003E  01E1               	clrf	(__pbssBANK1+4)& (0+127)
  2392  003F  01E2               	clrf	(__pbssBANK1+5)& (0+127)
  2393                           
  2394                           ; Clear objects allocated to BANK2
  2395  0040  3020               	movlw	low __pbssBANK2
  2396  0041  0084               	movwf	4
  2397  0042  3001               	movlw	high __pbssBANK2
  2398  0043  0085               	movwf	5
  2399  0044  302D               	movlw	45
  2400  0045  3197  27A6  3180   	fcall	clear_ram0
  2401                           
  2402                           ; Clear objects allocated to BANK3
  2403  0048  30A0               	movlw	low __pbssBANK3
  2404  0049  0084               	movwf	4
  2405  004A  3001               	movlw	high __pbssBANK3
  2406  004B  0085               	movwf	5
  2407  004C  3042               	movlw	66
  2408  004D  3197  27A6         	fcall	clear_ram0
  2409  004F                     end_of_initialization:	
  2410                           ;End of C runtime variable initialization code
  2411                           
  2412  004F                     __end_of__initialization:	
  2413  004F  0020               	movlb	0
  2414                           
  2415                           ;Initialize the stack pointer (FSR1)
  2416  0050  3071               	movlw	low ___sp
  2417  0051  0086               	movwf	6
  2418  0052  3021               	movlw	high ___sp
  2419  0053  0087               	movwf	7
  2420  0054  3186  2E4E         	ljmp	_main	;jump to C main() function
  2421                           
  2422                           	psect	bssBANK0
  2423  0064                     __pbssBANK0:	
  2424  0064                     _status:	
  2425  0064                     	ds	5
  2426  0069                     _lastTXPacket:	
  2427  0069                     	ds	1
  2428                           
  2429                           	psect	bssBANK1
  2430  00DD                     __pbssBANK1:	
  2431  00DD                     _counter:	
  2432  00DD                     	ds	4
  2433  00E1                     _testCount:	
  2434  00E1                     	ds	2
  2435                           
  2436                           	psect	dataBANK1
  2437  00E3                     __pdataBANK1:	
  2438  00E3                     _romData:	
  2439  00E3                     	ds	1
  2440                           
  2441                           	psect	bssBANK2
  2442  0120                     __pbssBANK2:	
  2443  0120                     _romDataMap:	
  2444  0120                     	ds	28
  2445  013C                     ftoa@buf:	
  2446  013C                     	ds	17
  2447                           
  2448                           	psect	bssBANK3
  2449  01A0                     __pbssBANK3:	
  2450  01A0                     _RXPacket:	
  2451  01A0                     	ds	33
  2452  01C1                     _TXPacket:	
  2453  01C1                     	ds	33
  2454                           
  2455                           	psect	clrtext
  2456  17A6                     clear_ram0:	
  2457                           ;	Called with FSR0 containing the base address, and
  2458                           ;	WREG with the size to clear
  2459                           
  2460  17A6  0064               	clrwdt	;clear the watchdog before getting into this loop
  2461  17A7                     clrloop0:	
  2462  17A7  0180               	clrf	0	;clear RAM location pointed to by FSR
  2463  17A8  3101               	addfsr 0,1
  2464  17A9  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  2465  17AA  2FA7               	goto	clrloop0	;have we reached the end yet?
  2466  17AB  3400               	retlw	0	;all done for this memory range, return
  2467                           
  2468                           	psect	cstackBANK4
  2469  0220                     __pcstackBANK4:	
  2470  0220                     loop@vt:	
  2471                           
  2472                           ; 3 bytes @ 0x0
  2473  0220                     	ds	3
  2474  0223                     loop@ta:	
  2475                           
  2476                           ; 3 bytes @ 0x3
  2477  0223                     	ds	3
  2478  0226                     _loop$2056:	
  2479                           
  2480                           ; 3 bytes @ 0x6
  2481  0226                     	ds	3
  2482  0229                     _loop$2057:	
  2483                           
  2484                           ; 3 bytes @ 0x9
  2485  0229                     	ds	3
  2486  022C                     _loop$2058:	
  2487                           
  2488                           ; 3 bytes @ 0xC
  2489  022C                     	ds	3
  2490  022F                     loop@rfSetup:	
  2491                           
  2492                           ; 1 bytes @ 0xF
  2493  022F                     	ds	1
  2494  0230                     loop@packet:	
  2495                           
  2496                           ; 33 bytes @ 0x10
  2497  0230                     	ds	33
  2498                           
  2499                           	psect	cstackBANK1
  2500  00A0                     __pcstackBANK1:	
  2501  00A0                     ?_ftoa:	
  2502  00A0                     ftoa@f:	
  2503                           ; 1 bytes @ 0x0
  2504                           
  2505                           
  2506                           ; 3 bytes @ 0x0
  2507  00A0                     	ds	3
  2508  00A3                     ftoa@status:	
  2509                           
  2510                           ; 1 bytes @ 0x3
  2511  00A3                     	ds	1
  2512  00A4                     ftoa@rem:	
  2513                           
  2514                           ; 4 bytes @ 0x4
  2515  00A4                     	ds	4
  2516  00A8                     ftoa@l:	
  2517                           
  2518                           ; 4 bytes @ 0x8
  2519  00A8                     	ds	4
  2520  00AC                     ftoa@cp:	
  2521                           
  2522                           ; 1 bytes @ 0xC
  2523  00AC                     	ds	1
  2524  00AD                     ?_strcat:	
  2525  00AD                     strcat@to:	
  2526                           ; 2 bytes @ 0xD
  2527                           
  2528                           
  2529                           ; 2 bytes @ 0xD
  2530  00AD                     	ds	2
  2531  00AF                     strcat@from:	
  2532                           
  2533                           ; 2 bytes @ 0xF
  2534  00AF                     	ds	2
  2535  00B1                     ?_sendMessage:	
  2536  00B1                     sendMessage@packet:	
  2537                           ; 1 bytes @ 0x11
  2538                           
  2539                           
  2540                           ; 2 bytes @ 0x11
  2541  00B1                     	ds	2
  2542  00B3                     sendMessage@topic:	
  2543                           
  2544                           ; 2 bytes @ 0x13
  2545  00B3                     	ds	2
  2546  00B5                     sendMessage@value:	
  2547                           
  2548                           ; 3 bytes @ 0x15
  2549  00B5                     	ds	3
  2550  00B8                     sendMessage@ftoaStatus:	
  2551                           
  2552                           ; 2 bytes @ 0x18
  2553  00B8                     	ds	2
  2554  00BA                     ??_main:	
  2555                           
  2556                           ; 1 bytes @ 0x1A
  2557  00BA                     	ds	1
  2558  00BB                     main@pipe:	
  2559                           
  2560                           ; 1 bytes @ 0x1B
  2561  00BB                     	ds	1
  2562  00BC                     main@packet:	
  2563                           
  2564                           ; 33 bytes @ 0x1C
  2565  00BC                     	ds	33
  2566                           
  2567                           	psect	cstackCOMMON
  2568  0070                     __pcstackCOMMON:	
  2569  0070                     ?_isdigit:	
  2570  0070                     ?_nrf24l01ISR:	
  2571                           ; 1 bit 
  2572                           
  2573  0070                     ??_nrf24l01ISR:	
  2574                           ; 1 bytes @ 0x0
  2575                           
  2576  0070                     ?_EEPROMWrite:	
  2577                           ; 1 bytes @ 0x0
  2578                           
  2579  0070                     ?_nrf24l01Init:	
  2580                           ; 1 bytes @ 0x0
  2581                           
  2582  0070                     ?_nrf24l01SetTXPipe:	
  2583                           ; 1 bytes @ 0x0
  2584                           
  2585  0070                     ?_nrf24l01SetRXPipe:	
  2586                           ; 1 bytes @ 0x0
  2587                           
  2588  0070                     ??_nrf24l01SetRXPipe:	
  2589                           ; 1 bytes @ 0x0
  2590                           
  2591  0070                     ?_EEPROMRead:	
  2592                           ; 1 bytes @ 0x0
  2593                           
  2594  0070                     ??_isdigit:	
  2595                           ; 1 bytes @ 0x0
  2596                           
  2597  0070                     ??___ftpack:	
  2598                           ; 1 bytes @ 0x0
  2599                           
  2600  0070                     ?_nrf24l01InterfaceInit:	
  2601                           ; 1 bytes @ 0x0
  2602                           
  2603  0070                     ??_nrf24l01InterfaceInit:	
  2604                           ; 1 bytes @ 0x0
  2605                           
  2606  0070                     ?_sleepMs:	
  2607                           ; 1 bytes @ 0x0
  2608                           
  2609  0070                     ?_ISR:	
  2610                           ; 1 bytes @ 0x0
  2611                           
  2612  0070                     ?_loop:	
  2613                           ; 1 bytes @ 0x0
  2614                           
  2615  0070                     ?_nrf24l01GetPipe:	
  2616                           ; 1 bytes @ 0x0
  2617                           
  2618  0070                     ?_main:	
  2619                           ; 1 bytes @ 0x0
  2620                           
  2621  0070                     ?_nrf24l01InitRegisters:	
  2622                           ; 1 bytes @ 0x0
  2623                           
  2624  0070                     ?___bmul:	
  2625                           ; 1 bytes @ 0x0
  2626                           
  2627  0070                     ??___lldiv:	
  2628                           ; 1 bytes @ 0x0
  2629                           
  2630  0070                     ??___ftge:	
  2631                           ; 1 bytes @ 0x0
  2632                           
  2633  0070                     ??___llmod:	
  2634                           ; 1 bytes @ 0x0
  2635                           
  2636  0070                     ?_strcpy:	
  2637                           ; 1 bytes @ 0x0
  2638                           
  2639  0070                     ?___wmul:	
  2640                           ; 2 bytes @ 0x0
  2641                           
  2642  0070                     ?___lwmod:	
  2643                           ; 2 bytes @ 0x0
  2644                           
  2645  0070                     ?___awtoft:	
  2646                           ; 2 bytes @ 0x0
  2647                           
  2648  0070                     ?___lbtoft:	
  2649                           ; 3 bytes @ 0x0
  2650                           
  2651  0070                     ?___lltoft:	
  2652                           ; 3 bytes @ 0x0
  2653                           
  2654  0070                     ___bmul@multiplicand:	
  2655                           ; 3 bytes @ 0x0
  2656                           
  2657  0070                     ___llmod@counter:	
  2658                           ; 1 bytes @ 0x0
  2659                           
  2660  0070                     _isdigit$1815:	
  2661                           ; 1 bytes @ 0x0
  2662                           
  2663  0070                     sleepMs@milliseconds:	
  2664                           ; 1 bytes @ 0x0
  2665                           
  2666  0070                     EEPROMWrite@address:	
  2667                           ; 2 bytes @ 0x0
  2668                           
  2669  0070                     EEPROMRead@address:	
  2670                           ; 2 bytes @ 0x0
  2671                           
  2672  0070                     ___wmul@multiplier:	
  2673                           ; 2 bytes @ 0x0
  2674                           
  2675  0070                     ___awtoft@c:	
  2676                           ; 2 bytes @ 0x0
  2677                           
  2678  0070                     ___lwmod@divisor:	
  2679                           ; 2 bytes @ 0x0
  2680                           
  2681  0070                     strcpy@to:	
  2682                           ; 2 bytes @ 0x0
  2683                           
  2684  0070                     ___lltoft@c:	
  2685                           ; 2 bytes @ 0x0
  2686                           
  2687                           
  2688                           ; 4 bytes @ 0x0
  2689  0070                     	ds	1
  2690  0071                     ??___bmul:	
  2691  0071                     nrf24l01SetRXPipe@pipe:	
  2692                           ; 1 bytes @ 0x1
  2693                           
  2694  0071                     ___bmul@product:	
  2695                           ; 1 bytes @ 0x1
  2696                           
  2697  0071                     isdigit@c:	
  2698                           ; 1 bytes @ 0x1
  2699                           
  2700                           
  2701                           ; 1 bytes @ 0x1
  2702  0071                     	ds	1
  2703  0072                     ??_EEPROMRead:	
  2704  0072                     ??_sleepMs:	
  2705                           ; 1 bytes @ 0x2
  2706                           
  2707  0072                     nrf24l01SetRXPipe@enRXAddr:	
  2708                           ; 1 bytes @ 0x2
  2709                           
  2710  0072                     EEPROMWrite@data:	
  2711                           ; 1 bytes @ 0x2
  2712                           
  2713  0072                     ___bmul@multiplier:	
  2714                           ; 1 bytes @ 0x2
  2715                           
  2716  0072                     ___wmul@multiplicand:	
  2717                           ; 1 bytes @ 0x2
  2718                           
  2719  0072                     ___lwmod@dividend:	
  2720                           ; 2 bytes @ 0x2
  2721                           
  2722  0072                     strcpy@from:	
  2723                           ; 2 bytes @ 0x2
  2724                           
  2725                           
  2726                           ; 2 bytes @ 0x2
  2727  0072                     	ds	1
  2728  0073                     ??_EEPROMWrite:	
  2729  0073                     ??_nrf24l01SetTXPipe:	
  2730                           ; 1 bytes @ 0x3
  2731                           
  2732  0073                     ??___awtoft:	
  2733                           ; 1 bytes @ 0x3
  2734                           
  2735  0073                     sleepMs@wdtps:	
  2736                           ; 1 bytes @ 0x3
  2737                           
  2738  0073                     EEPROMWrite@GIEBitValue:	
  2739                           ; 1 bytes @ 0x3
  2740                           
  2741  0073                     ___awtoft@sign:	
  2742                           ; 1 bytes @ 0x3
  2743                           
  2744                           
  2745                           ; 1 bytes @ 0x3
  2746  0073                     	ds	1
  2747  0074                     ??_strcpy:	
  2748  0074                     ??_strcat:	
  2749                           ; 1 bytes @ 0x4
  2750                           
  2751  0074                     ??_ftoa:	
  2752                           ; 1 bytes @ 0x4
  2753                           
  2754  0074                     ??_nrf24l01SendPacket:	
  2755                           ; 1 bytes @ 0x4
  2756                           
  2757  0074                     ??_sleepListren:	
  2758                           ; 1 bytes @ 0x4
  2759                           
  2760  0074                     ??_sendMessage:	
  2761                           ; 1 bytes @ 0x4
  2762                           
  2763  0074                     ??_loop:	
  2764                           ; 1 bytes @ 0x4
  2765                           
  2766  0074                     ??___wmul:	
  2767                           ; 1 bytes @ 0x4
  2768                           
  2769  0074                     ??___ftmul:	
  2770                           ; 1 bytes @ 0x4
  2771                           
  2772  0074                     ??___ftneg:	
  2773                           ; 1 bytes @ 0x4
  2774                           
  2775  0074                     ??___ftsub:	
  2776                           ; 1 bytes @ 0x4
  2777                           
  2778  0074                     ??___fttol:	
  2779                           ; 1 bytes @ 0x4
  2780                           
  2781  0074                     ??___lbtoft:	
  2782                           ; 1 bytes @ 0x4
  2783                           
  2784  0074                     ??___lltoft:	
  2785                           ; 1 bytes @ 0x4
  2786                           
  2787  0074                     ??___lwmod:	
  2788                           ; 1 bytes @ 0x4
  2789                           
  2790                           
  2791                           	psect	cstackBANK0
  2792  0020                     __pcstackBANK0:	
  2793                           ; 1 bytes @ 0x4
  2794                           
  2795  0020                     ??_ISR:	
  2796                           
  2797                           ; 1 bytes @ 0x0
  2798  0020                     	ds	6
  2799  0026                     ?___ftge:	
  2800  0026                     ?_sleepListren:	
  2801                           ; 1 bit 
  2802                           
  2803  0026                     ?___ftpack:	
  2804                           ; 1 bytes @ 0x6
  2805                           
  2806  0026                     ?___lldiv:	
  2807                           ; 3 bytes @ 0x6
  2808                           
  2809  0026                     nrf24l01SetTXPipe@pipe:	
  2810                           ; 4 bytes @ 0x6
  2811                           
  2812  0026                     ___lwmod@counter:	
  2813                           ; 1 bytes @ 0x6
  2814                           
  2815  0026                     sleepListren@seconds:	
  2816                           ; 1 bytes @ 0x6
  2817                           
  2818  0026                     ___wmul@product:	
  2819                           ; 2 bytes @ 0x6
  2820                           
  2821  0026                     strcpy@cp:	
  2822                           ; 2 bytes @ 0x6
  2823                           
  2824  0026                     ___ftpack@arg:	
  2825                           ; 2 bytes @ 0x6
  2826                           
  2827  0026                     ___ftge@ff1:	
  2828                           ; 3 bytes @ 0x6
  2829                           
  2830  0026                     ___lldiv@divisor:	
  2831                           ; 3 bytes @ 0x6
  2832                           
  2833                           
  2834                           ; 4 bytes @ 0x6
  2835  0026                     	ds	1
  2836  0027                     ??_nrf24l01GetPipe:	
  2837  0027                     ??_nrf24l01InitRegisters:	
  2838                           ; 1 bytes @ 0x7
  2839                           
  2840                           
  2841                           ; 1 bytes @ 0x7
  2842  0027                     	ds	1
  2843  0028                     ?_nrf24l01SendPacket:	
  2844  0028                     nrf24l01GetPipe@pipe:	
  2845                           ; 1 bytes @ 0x8
  2846                           
  2847  0028                     nrf24l01InitRegisters@channel:	
  2848                           ; 1 bytes @ 0x8
  2849                           
  2850  0028                     nrf24l01SendPacket@txPacket:	
  2851                           ; 1 bytes @ 0x8
  2852                           
  2853                           
  2854                           ; 2 bytes @ 0x8
  2855  0028                     	ds	1
  2856  0029                     nrf24l01GetPipe@name:	
  2857  0029                     nrf24l01InitRegisters@setupAW:	
  2858                           ; 1 bytes @ 0x9
  2859                           
  2860  0029                     ___ftpack@exp:	
  2861                           ; 1 bytes @ 0x9
  2862                           
  2863  0029                     ___ftge@ff2:	
  2864                           ; 1 bytes @ 0x9
  2865                           
  2866                           
  2867                           ; 3 bytes @ 0x9
  2868  0029                     	ds	1
  2869  002A                     nrf24l01GetPipe@i:	
  2870  002A                     nrf24l01InitRegisters@feature:	
  2871                           ; 1 bytes @ 0xA
  2872                           
  2873  002A                     ___ftpack@sign:	
  2874                           ; 1 bytes @ 0xA
  2875                           
  2876  002A                     ___lldiv@dividend:	
  2877                           ; 1 bytes @ 0xA
  2878                           
  2879                           
  2880                           ; 4 bytes @ 0xA
  2881  002A                     	ds	1
  2882  002B                     ?___ftadd:	
  2883  002B                     nrf24l01InitRegisters@rfSetup:	
  2884                           ; 3 bytes @ 0xB
  2885                           
  2886  002B                     ___lbtoft@c:	
  2887                           ; 1 bytes @ 0xB
  2888                           
  2889  002B                     ___lltoft@exp:	
  2890                           ; 1 bytes @ 0xB
  2891                           
  2892  002B                     ___ftadd@f1:	
  2893                           ; 1 bytes @ 0xB
  2894                           
  2895                           
  2896                           ; 3 bytes @ 0xB
  2897  002B                     	ds	1
  2898  002C                     nrf24l01InitRegisters@enAA:	
  2899                           
  2900                           ; 1 bytes @ 0xC
  2901  002C                     	ds	1
  2902  002D                     nrf24l01InitRegisters@DynPD:	
  2903                           
  2904                           ; 1 bytes @ 0xD
  2905  002D                     	ds	1
  2906  002E                     nrf24l01InitRegisters@i:	
  2907  002E                     ___ftadd@f2:	
  2908                           ; 2 bytes @ 0xE
  2909                           
  2910  002E                     ___lldiv@quotient:	
  2911                           ; 3 bytes @ 0xE
  2912                           
  2913                           
  2914                           ; 4 bytes @ 0xE
  2915  002E                     	ds	2
  2916  0030                     ??_nrf24l01Init:	
  2917                           
  2918                           ; 1 bytes @ 0x10
  2919  0030                     	ds	1
  2920  0031                     ??___ftadd:	
  2921                           
  2922                           ; 1 bytes @ 0x11
  2923  0031                     	ds	1
  2924  0032                     ___lldiv@counter:	
  2925  0032                     ___ftadd@sign:	
  2926                           ; 1 bytes @ 0x12
  2927                           
  2928                           
  2929                           ; 1 bytes @ 0x12
  2930  0032                     	ds	1
  2931  0033                     ?___llmod:	
  2932  0033                     ___ftadd@exp2:	
  2933                           ; 4 bytes @ 0x13
  2934                           
  2935  0033                     ___llmod@divisor:	
  2936                           ; 1 bytes @ 0x13
  2937                           
  2938                           
  2939                           ; 4 bytes @ 0x13
  2940  0033                     	ds	1
  2941  0034                     ___ftadd@exp1:	
  2942                           
  2943                           ; 1 bytes @ 0x14
  2944  0034                     	ds	1
  2945  0035                     ?___ftdiv:	
  2946  0035                     ?___ftsub:	
  2947                           ; 3 bytes @ 0x15
  2948                           
  2949  0035                     ___ftdiv@f2:	
  2950                           ; 3 bytes @ 0x15
  2951                           
  2952  0035                     ___ftsub@f2:	
  2953                           ; 3 bytes @ 0x15
  2954                           
  2955                           
  2956                           ; 3 bytes @ 0x15
  2957  0035                     	ds	2
  2958  0037                     ___llmod@dividend:	
  2959                           
  2960                           ; 4 bytes @ 0x17
  2961  0037                     	ds	1
  2962  0038                     ___ftdiv@f1:	
  2963  0038                     ___ftsub@f1:	
  2964                           ; 3 bytes @ 0x18
  2965                           
  2966                           
  2967                           ; 3 bytes @ 0x18
  2968  0038                     	ds	3
  2969  003B                     ??___ftdiv:	
  2970  003B                     ?_sprintf:	
  2971                           ; 1 bytes @ 0x1B
  2972                           
  2973  003B                     sprintf@f:	
  2974                           ; 2 bytes @ 0x1B
  2975                           
  2976                           
  2977                           ; 2 bytes @ 0x1B
  2978  003B                     	ds	1
  2979  003C                     ___ftdiv@cntr:	
  2980                           
  2981                           ; 1 bytes @ 0x1C
  2982  003C                     	ds	1
  2983  003D                     ___ftdiv@f3:	
  2984                           
  2985                           ; 3 bytes @ 0x1D
  2986  003D                     	ds	3
  2987  0040                     ___ftdiv@exp:	
  2988                           
  2989                           ; 1 bytes @ 0x20
  2990  0040                     	ds	1
  2991  0041                     ___ftdiv@sign:	
  2992                           
  2993                           ; 1 bytes @ 0x21
  2994  0041                     	ds	1
  2995  0042                     ?_getADCValue:	
  2996                           
  2997                           ; 3 bytes @ 0x22
  2998  0042                     	ds	3
  2999  0045                     ??_sprintf:	
  3000  0045                     ??_getADCValue:	
  3001                           ; 1 bytes @ 0x25
  3002                           
  3003                           
  3004                           ; 1 bytes @ 0x25
  3005  0045                     	ds	1
  3006  0046                     getADCValue@channel:	
  3007                           
  3008                           ; 1 bytes @ 0x26
  3009  0046                     	ds	1
  3010  0047                     getADCValue@adcLoop:	
  3011                           
  3012                           ; 2 bytes @ 0x27
  3013  0047                     	ds	2
  3014  0049                     sprintf@flag:	
  3015  0049                     getADCValue@adcSum:	
  3016                           ; 1 bytes @ 0x29
  3017                           
  3018                           
  3019                           ; 3 bytes @ 0x29
  3020  0049                     	ds	1
  3021  004A                     sprintf@ap:	
  3022                           
  3023                           ; 1 bytes @ 0x2A
  3024  004A                     	ds	1
  3025  004B                     sprintf@val:	
  3026                           
  3027                           ; 4 bytes @ 0x2B
  3028  004B                     	ds	1
  3029  004C                     ?___ftmul:	
  3030  004C                     ?___ftneg:	
  3031                           ; 3 bytes @ 0x2C
  3032                           
  3033  004C                     ___ftmul@f1:	
  3034                           ; 3 bytes @ 0x2C
  3035                           
  3036  004C                     ___ftneg@f1:	
  3037                           ; 3 bytes @ 0x2C
  3038                           
  3039                           
  3040                           ; 3 bytes @ 0x2C
  3041  004C                     	ds	3
  3042  004F                     sprintf@sp:	
  3043  004F                     ___ftmul@f2:	
  3044                           ; 1 bytes @ 0x2F
  3045                           
  3046                           
  3047                           ; 3 bytes @ 0x2F
  3048  004F                     	ds	1
  3049  0050                     sprintf@width:	
  3050                           
  3051                           ; 2 bytes @ 0x30
  3052  0050                     	ds	2
  3053  0052                     ___ftmul@exp:	
  3054  0052                     sprintf@prec:	
  3055                           ; 1 bytes @ 0x32
  3056                           
  3057                           
  3058                           ; 2 bytes @ 0x32
  3059  0052                     	ds	1
  3060  0053                     ___ftmul@f3_as_product:	
  3061                           
  3062                           ; 3 bytes @ 0x33
  3063  0053                     	ds	1
  3064  0054                     sprintf@c:	
  3065                           
  3066                           ; 1 bytes @ 0x34
  3067  0054                     	ds	2
  3068  0056                     ___ftmul@cntr:	
  3069                           
  3070                           ; 1 bytes @ 0x36
  3071  0056                     	ds	1
  3072  0057                     ___ftmul@sign:	
  3073                           
  3074                           ; 1 bytes @ 0x37
  3075  0057                     	ds	1
  3076  0058                     ?___fttol:	
  3077  0058                     ___fttol@f1:	
  3078                           ; 4 bytes @ 0x38
  3079                           
  3080                           
  3081                           ; 3 bytes @ 0x38
  3082  0058                     	ds	4
  3083  005C                     ___fttol@sign1:	
  3084                           
  3085                           ; 1 bytes @ 0x3C
  3086  005C                     	ds	1
  3087  005D                     ___fttol@lval:	
  3088                           
  3089                           ; 4 bytes @ 0x3D
  3090  005D                     	ds	4
  3091  0061                     ___fttol@exp1:	
  3092                           
  3093                           ; 1 bytes @ 0x41
  3094  0061                     	ds	1
  3095  0062                     strcat@cp:	
  3096                           
  3097                           ; 2 bytes @ 0x42
  3098  0062                     	ds	2
  3099                           
  3100                           	psect	maintext
  3101  064E                     __pmaintext:	
  3102 ;;
  3103 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  3104 ;;
  3105 ;; *************** function _main *****************
  3106 ;; Defined at:
  3107 ;;		line 152 in file "main.c"
  3108 ;; Parameters:    Size  Location     Type
  3109 ;;		None
  3110 ;; Auto vars:     Size  Location     Type
  3111 ;;  packet         33   28[BANK1 ] struct .
  3112 ;;  pipe            1   27[BANK1 ] unsigned char 
  3113 ;; Return value:  Size  Location     Type
  3114 ;;                  1    wreg      void 
  3115 ;; Registers used:
  3116 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, btemp+0, btemp+1, btemp+8, btemp+9, btemp+10, btemp+11, pclath
      +, cstack
  3117 ;; Tracked objects:
  3118 ;;		On entry : B1F/0
  3119 ;;		On exit  : 0/0
  3120 ;;		Unchanged: 0/0
  3121 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3122 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3123 ;;      Locals:         0       0      34       0       0       0       0       0       0       0       0       0       
      +0       0
  3124 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  3125 ;;      Totals:         0       0      35       0       0       0       0       0       0       0       0       0       
      +0       0
  3126 ;;Total ram usage:       35 bytes
  3127 ;; Hardware stack levels required when called:   15
  3128 ;; This function calls:
  3129 ;;		_EEPROMRead
  3130 ;;		_EEPROMWrite
  3131 ;;		___lbtoft
  3132 ;;		_loop
  3133 ;;		_nrf24l01GetPipe
  3134 ;;		_nrf24l01Init
  3135 ;;		_nrf24l01SetRXPipe
  3136 ;;		_nrf24l01SetTXPipe
  3137 ;;		_sendMessage
  3138 ;;		_strcpy
  3139 ;; This function is called by:
  3140 ;;		Startup code after reset
  3141 ;; This function uses a non-reentrant model
  3142 ;;
  3143                           
  3144                           
  3145                           ;psect for function _main
  3146  064E                     _main:	
  3147                           
  3148                           ;main.c: 155: ANSELA = 0x00;
  3149                           
  3150                           ;incstack = 0
  3151                           ; Regs used in _main: [wreg-fsr0h+fsr1l+fsr1h+status,2-btemp+1+btemp+8-btemp+11+pclath+c
      +                          stack]
  3152  064E  0023               	movlb	3	; select bank3
  3153  064F  018C               	clrf	12	;volatile
  3154                           
  3155                           ;main.c: 156: ANSELC = 0x00;
  3156  0650  018E               	clrf	14	;volatile
  3157                           
  3158                           ;main.c: 158: ODCONA = 0x00;
  3159  0651  0025               	movlb	5	; select bank5
  3160  0652  018C               	clrf	12	;volatile
  3161                           
  3162                           ;main.c: 159: ODCONC = 0x00;
  3163  0653  018E               	clrf	14	;volatile
  3164                           
  3165                           ;main.c: 164: INLVLA = 0x00;
  3166  0654  0027               	movlb	7	; select bank7
  3167  0655  018C               	clrf	12	;volatile
  3168                           
  3169                           ;main.c: 165: INLVLC = 0x00;
  3170  0656  018E               	clrf	14	;volatile
  3171                           
  3172                           ;main.c: 167: WPUA = 0x00;
  3173  0657  0024               	movlb	4	; select bank4
  3174  0658  018C               	clrf	12	;volatile
  3175                           
  3176                           ;main.c: 168: WPUC = 0x00;
  3177  0659  018E               	clrf	14	;volatile
  3178                           
  3179                           ;main.c: 170: TRISCbits.TRISC5 = 0;
  3180  065A  0021               	movlb	1	; select bank1
  3181  065B  128E               	bcf	14,5	;volatile
  3182                           
  3183                           ;main.c: 171: TRISCbits.TRISC4 = 0;
  3184  065C  120E               	bcf	14,4	;volatile
  3185                           
  3186                           ;main.c: 173: PORTCbits.RC4 = 0;
  3187  065D  0020               	movlb	0	; select bank0
  3188  065E  120E               	bcf	14,4	;volatile
  3189                           
  3190                           ;main.c: 180: INTCONbits.PEIE = 0;
  3191  065F  130B               	bcf	11,6	;volatile
  3192                           
  3193                           ;main.c: 181: INTCONbits.GIE = 0;
  3194  0660  138B               	bcf	11,7	;volatile
  3195                           
  3196                           ;main.c: 183: OSCCON1bits.NOSC = 0b000;
  3197  0661  308F               	movlw	-113
  3198  0662  0032               	movlb	18	; select bank18
  3199  0663  0599               	andwf	25,f	;volatile
  3200                           
  3201                           ;main.c: 184: OSCCON1bits.NDIV = 0b000;
  3202  0664  30F0               	movlw	-16
  3203  0665  0599               	andwf	25,f	;volatile
  3204                           
  3205                           ;main.c: 186: _delay((unsigned long)((1000)*(32000000/4000000.0)));
  3206  0666  300B               	movlw	11
  3207  0667  0021               	movlb	1	; select bank1
  3208  0668  00BA               	movwf	??_main^(0+128)
  3209  0669  3062               	movlw	98
  3210  066A                     u5237:	
  3211  066A  0B89               	decfsz	9,f
  3212  066B  2E6A               	goto	u5237
  3213  066C  0BBA               	decfsz	??_main^(0+128),f
  3214  066D  2E6A               	goto	u5237
  3215  066E  0000               	nop
  3216                           
  3217                           ;main.c: 190: strcpy(romData->name, "UH1");
  3218  066F  0021               	movlb	1	; select bank1
  3219  0670  0863               	movf	_romData^(0+128),w
  3220  0671  3E01               	addlw	1
  3221  0672  00F0               	movwf	strcpy@to
  3222  0673  3001               	movlw	1
  3223  0674  00F1               	movwf	strcpy@to+1
  3224  0675  303A               	movlw	low (STR_8| (0+32768))
  3225  0676  00F2               	movwf	strcpy@from
  3226  0677  3098               	movlw	high (STR_8| (0+32768))
  3227  0678  00F3               	movwf	strcpy@from+1
  3228  0679  3188  202B  3186   	fcall	_strcpy
  3229                           
  3230                           ;main.c: 192: nrf24l01Init();
  3231  067C  3189  215F  3186   	fcall	_nrf24l01Init
  3232                           
  3233                           ;main.c: 194: unsigned char pipe = nrf24l01GetPipe(romData->name);
  3234  067F  0021               	movlb	1	; select bank1
  3235  0680  0863               	movf	_romData^(0+128),w
  3236  0681  3E01               	addlw	1
  3237  0682  318A  22C0  3186   	fcall	_nrf24l01GetPipe
  3238  0685  00FF               	movwf	127
  3239  0686  087F               	movf	127,w
  3240  0687  0021               	movlb	1	; select bank1
  3241  0688  00BB               	movwf	main@pipe^(0+128)
  3242                           
  3243                           ;main.c: 195: nrf24l01SetTXPipe(pipe);
  3244  0689  083B               	movf	main@pipe^(0+128),w
  3245  068A  318B  23B5  3186   	fcall	_nrf24l01SetTXPipe
  3246                           
  3247                           ;main.c: 196: nrf24l01SetRXPipe(pipe);
  3248  068D  0021               	movlb	1	; select bank1
  3249  068E  083B               	movf	main@pipe^(0+128),w
  3250  068F  3188  20A2  3186   	fcall	_nrf24l01SetRXPipe
  3251                           
  3252                           ;main.c: 200: ADCON0bits.ADON = 0;
  3253  0692  0021               	movlb	1	; select bank1
  3254  0693  101D               	bcf	29,0	;volatile
  3255                           
  3256                           ;main.c: 203: PORTAbits.RA4 = 0;
  3257  0694  0020               	movlb	0	; select bank0
  3258  0695  120C               	bcf	12,4	;volatile
  3259                           
  3260                           ;main.c: 204: TRISAbits.TRISA4 = 1;
  3261  0696  0021               	movlb	1	; select bank1
  3262  0697  160C               	bsf	12,4	;volatile
  3263                           
  3264                           ;main.c: 205: WPUAbits.WPUA4 = 0;
  3265  0698  0024               	movlb	4	; select bank4
  3266  0699  120C               	bcf	12,4	;volatile
  3267                           
  3268                           ;main.c: 206: ODCONAbits.ODCA4 = 1;
  3269  069A  0025               	movlb	5	; select bank5
  3270  069B  160C               	bsf	12,4	;volatile
  3271                           
  3272                           ;main.c: 207: ANSELAbits.ANSA4 = 1;
  3273  069C  0023               	movlb	3	; select bank3
  3274  069D  160C               	bsf	12,4	;volatile
  3275                           
  3276                           ;main.c: 210: ANSELCbits.ANSC3 = 1;
  3277  069E  158E               	bsf	14,3	;volatile
  3278                           
  3279                           ;main.c: 211: TRISCbits.TRISC3 = 1;
  3280  069F  0021               	movlb	1	; select bank1
  3281  06A0  158E               	bsf	14,3	;volatile
  3282                           
  3283                           ;main.c: 214: FVRCONbits.TSEN = 1;
  3284  06A1  0022               	movlb	2	; select bank2
  3285  06A2  1697               	bsf	23,5	;volatile
  3286                           
  3287                           ;main.c: 215: FVRCONbits.TSRNG = 1;
  3288  06A3  1617               	bsf	23,4	;volatile
  3289                           
  3290                           ;main.c: 218: FVRCONbits.FVREN = 0;
  3291  06A4  1397               	bcf	23,7	;volatile
  3292                           
  3293                           ;main.c: 219: FVRCONbits.ADFVR = 0b10;
  3294  06A5  0817               	movf	23,w	;volatile
  3295  06A6  39FC               	andlw	-4
  3296  06A7  3802               	iorlw	2
  3297  06A8  0097               	movwf	23	;volatile
  3298                           
  3299                           ;main.c: 221: ADCON1bits.ADCS = 0b111;
  3300  06A9  3070               	movlw	112
  3301  06AA  0021               	movlb	1	; select bank1
  3302  06AB  049E               	iorwf	30,f	;volatile
  3303                           
  3304                           ;main.c: 222: ADCON1bits.ADFM = 1;
  3305  06AC  179E               	bsf	30,7	;volatile
  3306                           
  3307                           ;main.c: 223: ADCON1bits.ADPREF = 0b11;
  3308  06AD  3003               	movlw	3
  3309  06AE  049E               	iorwf	30,f	;volatile
  3310                           
  3311                           ;main.c: 224: ADCON1bits.ADNREF = 0b00;
  3312  06AF  111E               	bcf	30,2	;volatile
  3313                           
  3314                           ;main.c: 227: ADCON0bits.CHS = 3;
  3315  06B0  081D               	movf	29,w	;volatile
  3316  06B1  3903               	andlw	-253
  3317  06B2  380C               	iorlw	12
  3318  06B3  009D               	movwf	29	;volatile
  3319                           
  3320                           ;main.c: 232: TRISAbits.TRISA2 = 1;
  3321  06B4  150C               	bsf	12,2	;volatile
  3322                           
  3323                           ;main.c: 233: PIE0bits.INTE = 1;
  3324  06B5  1410               	bsf	16,0	;volatile
  3325                           
  3326                           ;main.c: 234: INTCONbits.INTEDG = 0;
  3327  06B6  100B               	bcf	11,0	;volatile
  3328                           
  3329                           ;main.c: 237: TRISAbits.TRISA5 = 0;
  3330  06B7  128C               	bcf	12,5	;volatile
  3331                           
  3332                           ;main.c: 238: PORTAbits.RA5 = 0;
  3333  06B8  0020               	movlb	0	; select bank0
  3334  06B9  128C               	bcf	12,5	;volatile
  3335                           
  3336                           ;main.c: 241: INTCONbits.PEIE = 1;
  3337  06BA  170B               	bsf	11,6	;volatile
  3338                           
  3339                           ;main.c: 242: INTCONbits.GIE = 1;
  3340  06BB  178B               	bsf	11,7	;volatile
  3341                           
  3342                           ;main.c: 244: nrf24l01Packet_t packet;;main.c: 246: sendMessage(&packet, "BOOT0", EEPROM
      +                          Read(0));
  3343  06BC  30BC               	movlw	low main@packet
  3344  06BD  0021               	movlb	1	; select bank1
  3345  06BE  00B1               	movwf	sendMessage@packet^(0+128)
  3346  06BF  3000               	movlw	high main@packet
  3347  06C0  00B2               	movwf	(sendMessage@packet+1)^(0+128)
  3348  06C1  3013               	movlw	low (STR_9| (0+32768))
  3349  06C2  00B3               	movwf	sendMessage@topic^(0+128)
  3350  06C3  3098               	movlw	high (STR_9| (0+32768))
  3351  06C4  00B4               	movwf	(sendMessage@topic^(0+128)+1)
  3352  06C5  3000               	movlw	0
  3353  06C6  00F0               	movwf	EEPROMRead@address
  3354  06C7  00F1               	movwf	EEPROMRead@address+1
  3355  06C8  3188  20DE  3186   	fcall	_EEPROMRead
  3356  06CB  3188  2010  3186   	fcall	___lbtoft
  3357  06CE  0870               	movf	?___lbtoft,w
  3358  06CF  0021               	movlb	1	; select bank1
  3359  06D0  00B5               	movwf	sendMessage@value^(0+128)
  3360  06D1  0871               	movf	?___lbtoft+1,w
  3361  06D2  00B6               	movwf	(sendMessage@value+1)^(0+128)
  3362  06D3  0872               	movf	?___lbtoft+2,w
  3363  06D4  00B7               	movwf	(sendMessage@value+2)^(0+128)
  3364  06D5  318C  24F7  3186   	fcall	_sendMessage
  3365                           
  3366                           ;main.c: 247: sendMessage(&packet, "BOOT1", EEPROMRead(1));
  3367  06D8  30BC               	movlw	low main@packet
  3368  06D9  0021               	movlb	1	; select bank1
  3369  06DA  00B1               	movwf	sendMessage@packet^(0+128)
  3370  06DB  3000               	movlw	high main@packet
  3371  06DC  00B2               	movwf	(sendMessage@packet+1)^(0+128)
  3372  06DD  3019               	movlw	low (STR_10| (0+32768))
  3373  06DE  00B3               	movwf	sendMessage@topic^(0+128)
  3374  06DF  3098               	movlw	high (STR_10| (0+32768))
  3375  06E0  00B4               	movwf	(sendMessage@topic^(0+128)+1)
  3376  06E1  3001               	movlw	1
  3377  06E2  00F0               	movwf	EEPROMRead@address
  3378  06E3  3000               	movlw	0
  3379  06E4  00F1               	movwf	EEPROMRead@address+1
  3380  06E5  3188  20DE  3186   	fcall	_EEPROMRead
  3381  06E8  3188  2010  3186   	fcall	___lbtoft
  3382  06EB  0870               	movf	?___lbtoft,w
  3383  06EC  0021               	movlb	1	; select bank1
  3384  06ED  00B5               	movwf	sendMessage@value^(0+128)
  3385  06EE  0871               	movf	?___lbtoft+1,w
  3386  06EF  00B6               	movwf	(sendMessage@value+1)^(0+128)
  3387  06F0  0872               	movf	?___lbtoft+2,w
  3388  06F1  00B7               	movwf	(sendMessage@value+2)^(0+128)
  3389  06F2  318C  24F7  3186   	fcall	_sendMessage
  3390                           
  3391                           ;main.c: 251: EEPROMWrite(0, 123);
  3392  06F5  3000               	movlw	0
  3393  06F6  00F0               	movwf	EEPROMWrite@address
  3394  06F7  00F1               	movwf	EEPROMWrite@address+1
  3395  06F8  307B               	movlw	123
  3396  06F9  00FF               	movwf	127
  3397  06FA  087F               	movf	127,w
  3398  06FB  00F2               	movwf	EEPROMWrite@data
  3399  06FC  3188  20FD  3186   	fcall	_EEPROMWrite
  3400                           
  3401                           ;main.c: 252: EEPROMWrite(1, 123);
  3402  06FF  3001               	movlw	1
  3403  0700  00F0               	movwf	EEPROMWrite@address
  3404  0701  3000               	movlw	0
  3405  0702  00F1               	movwf	EEPROMWrite@address+1
  3406  0703  307B               	movlw	123
  3407  0704  00FF               	movwf	127
  3408  0705  087F               	movf	127,w
  3409  0706  00F2               	movwf	EEPROMWrite@data
  3410  0707  3188  20FD  3186   	fcall	_EEPROMWrite
  3411  070A                     l4839:	
  3412                           ;main.c: 254: while(1){
  3413                           
  3414                           
  3415                           ;main.c: 255: loop();
  3416  070A  3182  2223  3186   	fcall	_loop
  3417  070D  2F0A               	goto	l4839
  3418  070E                     __end_of_main:	
  3419                           ;main.c: 256: };main.c: 258: return;
  3420                           
  3421                           
  3422                           	psect	text1
  3423  095F                     __ptext1:	
  3424 ;; *************** function _nrf24l01Init *****************
  3425 ;; Defined at:
  3426 ;;		line 461 in file "nrf24l01.c"
  3427 ;; Parameters:    Size  Location     Type
  3428 ;;		None
  3429 ;; Auto vars:     Size  Location     Type
  3430 ;;		None
  3431 ;; Return value:  Size  Location     Type
  3432 ;;                  1    wreg      void 
  3433 ;; Registers used:
  3434 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, btemp+11, pclath, cstack
  3435 ;; Tracked objects:
  3436 ;;		On entry : 0/0
  3437 ;;		On exit  : 0/0
  3438 ;;		Unchanged: 0/0
  3439 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3440 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3441 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3442 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3443 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3444 ;;Total ram usage:        2 bytes
  3445 ;; Hardware stack levels used:    1
  3446 ;; Hardware stack levels required when called:   11
  3447 ;; This function calls:
  3448 ;;		_nrf24l01InitRegisters
  3449 ;;		_nrf24l01InterfaceInit
  3450 ;; This function is called by:
  3451 ;;		_main
  3452 ;; This function uses a non-reentrant model
  3453 ;;
  3454                           
  3455                           
  3456                           ;psect for function _nrf24l01Init
  3457  095F                     _nrf24l01Init:	
  3458                           
  3459                           ;nrf24l01.c: 464: nrf24l01InterfaceInit();
  3460                           
  3461                           ;incstack = 0
  3462                           ; Regs used in _nrf24l01Init: [wreg-fsr0h+fsr1l+fsr1h+status,2+status,0+btemp+11+pclath+
      +                          cstack]
  3463  095F  3188  20C0  3189   	fcall	_nrf24l01InterfaceInit
  3464                           
  3465                           ;nrf24l01.c: 469: PORTAbits.RA0 = 0;
  3466  0962  0020               	movlb	0	; select bank0
  3467  0963  100C               	bcf	12,0	;volatile
  3468                           
  3469                           ;nrf24l01.c: 471: _delay((unsigned long)((50000)*(32000000/4000000.0)));
  3470  0964  3003               	movlw	3
  3471  0965  0020               	movlb	0	; select bank0
  3472  0966  00B1               	movwf	??_nrf24l01Init+1
  3473  0967  3008               	movlw	8
  3474  0968  00B0               	movwf	??_nrf24l01Init
  3475  0969  3077               	movlw	119
  3476  096A                     u5247:	
  3477  096A  0B89               	decfsz	9,f
  3478  096B  296A               	goto	u5247
  3479  096C  0BB0               	decfsz	??_nrf24l01Init,f
  3480  096D  296A               	goto	u5247
  3481  096E  0BB1               	decfsz	??_nrf24l01Init+1,f
  3482  096F  296A               	goto	u5247
  3483                           
  3484                           ;nrf24l01.c: 473: nrf24l01InitRegisters();
  3485  0970  3183  236A  3189   	fcall	_nrf24l01InitRegisters
  3486                           
  3487                           ;nrf24l01.c: 475: _delay((unsigned long)((50000)*(32000000/4000000.0)));
  3488  0973  3003               	movlw	3
  3489  0974  0020               	movlb	0	; select bank0
  3490  0975  00B1               	movwf	??_nrf24l01Init+1
  3491  0976  3008               	movlw	8
  3492  0977  00B0               	movwf	??_nrf24l01Init
  3493  0978  3077               	movlw	119
  3494  0979                     u5257:	
  3495  0979  0B89               	decfsz	9,f
  3496  097A  2979               	goto	u5257
  3497  097B  0BB0               	decfsz	??_nrf24l01Init,f
  3498  097C  2979               	goto	u5257
  3499  097D  0BB1               	decfsz	??_nrf24l01Init+1,f
  3500  097E  2979               	goto	u5257
  3501                           
  3502                           ;nrf24l01.c: 477: PORTAbits.RA0 = 1;
  3503  097F  0020               	movlb	0	; select bank0
  3504  0980  140C               	bsf	12,0	;volatile
  3505                           
  3506                           ;nrf24l01.c: 479: status.TX = 0;
  3507  0981  01E4               	clrf	_status	;volatile
  3508                           
  3509                           ;nrf24l01.c: 480: status.RX = 0;
  3510  0982  01E5               	clrf	_status+1	;volatile
  3511  0983  0008               	return
  3512  0984                     __end_of_nrf24l01Init:	
  3513                           
  3514                           	psect	text2
  3515  08C0                     __ptext2:	
  3516 ;; *************** function _nrf24l01InterfaceInit *****************
  3517 ;; Defined at:
  3518 ;;		line 8 in file "interface.c"
  3519 ;; Parameters:    Size  Location     Type
  3520 ;;		None
  3521 ;; Auto vars:     Size  Location     Type
  3522 ;;		None
  3523 ;; Return value:  Size  Location     Type
  3524 ;;                  1    wreg      void 
  3525 ;; Registers used:
  3526 ;;		wreg, status,2, status,0
  3527 ;; Tracked objects:
  3528 ;;		On entry : 0/0
  3529 ;;		On exit  : 0/0
  3530 ;;		Unchanged: 0/0
  3531 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3532 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3533 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3534 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3535 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3536 ;;Total ram usage:        0 bytes
  3537 ;; Hardware stack levels used:    1
  3538 ;; Hardware stack levels required when called:    7
  3539 ;; This function calls:
  3540 ;;		Nothing
  3541 ;; This function is called by:
  3542 ;;		_nrf24l01Init
  3543 ;; This function uses a non-reentrant model
  3544 ;;
  3545                           
  3546                           
  3547                           ;psect for function _nrf24l01InterfaceInit
  3548  08C0                     _nrf24l01InterfaceInit:	
  3549                           
  3550                           ;interface.c: 10: TRISAbits.TRISA0 = 0;
  3551                           
  3552                           ;incstack = 0
  3553                           ; Regs used in _nrf24l01InterfaceInit: [wreg+status,2+status,0]
  3554  08C0  0021               	movlb	1	; select bank1
  3555  08C1  100C               	bcf	12,0	;volatile
  3556                           
  3557                           ;interface.c: 11: TRISAbits.TRISA1 = 0;
  3558  08C2  108C               	bcf	12,1	;volatile
  3559                           
  3560                           ;interface.c: 13: TRISCbits.TRISC1 = 1;
  3561  08C3  148E               	bsf	14,1	;volatile
  3562                           
  3563                           ;interface.c: 14: TRISCbits.TRISC2 = 0;
  3564  08C4  110E               	bcf	14,2	;volatile
  3565                           
  3566                           ;interface.c: 15: TRISCbits.TRISC0 = 0;
  3567  08C5  100E               	bcf	14,0	;volatile
  3568                           
  3569                           ;interface.c: 17: SSP1CON1bits.SSPEN = 0;
  3570  08C6  0024               	movlb	4	; select bank4
  3571  08C7  1295               	bcf	21,5	;volatile
  3572                           
  3573                           ;interface.c: 19: RC1PPSbits.RC1PPS = 0b10001;
  3574  08C8  003D               	movlb	29	; select bank29
  3575  08C9  0821               	movf	33,w	;volatile
  3576  08CA  39E0               	andlw	-32
  3577  08CB  3811               	iorlw	17
  3578  08CC  00A1               	movwf	33	;volatile
  3579                           
  3580                           ;interface.c: 20: RC2PPSbits.RC2PPS = 0b11001;
  3581  08CD  0822               	movf	34,w	;volatile
  3582  08CE  39E0               	andlw	-32
  3583  08CF  3819               	iorlw	25
  3584  08D0  00A2               	movwf	34	;volatile
  3585                           
  3586                           ;interface.c: 21: RC0PPSbits.RC0PPS = 0b11000;
  3587  08D1  0820               	movf	32,w	;volatile
  3588  08D2  39E0               	andlw	-32
  3589  08D3  3818               	iorlw	24
  3590  08D4  00A0               	movwf	32	;volatile
  3591                           
  3592                           ;interface.c: 23: SSP1CON1bits.CKP = 0;
  3593  08D5  0024               	movlb	4	; select bank4
  3594  08D6  1215               	bcf	21,4	;volatile
  3595                           
  3596                           ;interface.c: 24: SSP1STATbits.CKE = 1;
  3597  08D7  1714               	bsf	20,6	;volatile
  3598                           
  3599                           ;interface.c: 25: SSP1CON1bits.SSPM = 0b0001;
  3600  08D8  0815               	movf	21,w	;volatile
  3601  08D9  39F0               	andlw	-16
  3602  08DA  3801               	iorlw	1
  3603  08DB  0095               	movwf	21	;volatile
  3604                           
  3605                           ;interface.c: 27: SSP1CON1bits.SSPEN = 1;
  3606  08DC  1695               	bsf	21,5	;volatile
  3607  08DD  0008               	return
  3608  08DE                     __end_of_nrf24l01InterfaceInit:	
  3609                           
  3610                           	psect	text3
  3611  036A                     __ptext3:	
  3612 ;; *************** function _nrf24l01InitRegisters *****************
  3613 ;; Defined at:
  3614 ;;		line 361 in file "nrf24l01.c"
  3615 ;; Parameters:    Size  Location     Type
  3616 ;;		None
  3617 ;; Auto vars:     Size  Location     Type
  3618 ;;  i               2   14[BANK0 ] unsigned int 
  3619 ;;  DynPD           1   13[BANK0 ] struct .
  3620 ;;  enAA            1   12[BANK0 ] struct .
  3621 ;;  rfSetup         1   11[BANK0 ] struct .
  3622 ;;  feature         1   10[BANK0 ] struct .
  3623 ;;  setupAW         1    9[BANK0 ] struct .
  3624 ;;  channel         1    8[BANK0 ] struct .
  3625 ;; Return value:  Size  Location     Type
  3626 ;;                  1    wreg      void 
  3627 ;; Registers used:
  3628 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, btemp+11, pclath, cstack
  3629 ;; Tracked objects:
  3630 ;;		On entry : 0/0
  3631 ;;		On exit  : 0/0
  3632 ;;		Unchanged: 0/0
  3633 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3634 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3635 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3636 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3637 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3638 ;;Total ram usage:        9 bytes
  3639 ;; Hardware stack levels used:    1
  3640 ;; Hardware stack levels required when called:   10
  3641 ;; This function calls:
  3642 ;;		___bmul
  3643 ;;		_nrf24l01SPIEnd
  3644 ;;		_nrf24l01SPISend
  3645 ;;		_nrf24l01SPIStart
  3646 ;;		_nrf24l01Send
  3647 ;;		_nrf24l01SetRXPipe
  3648 ;;		_nrf24l01SetTXPipe
  3649 ;; This function is called by:
  3650 ;;		_nrf24l01Init
  3651 ;; This function uses a non-reentrant model
  3652 ;;
  3653                           
  3654                           
  3655                           ;psect for function _nrf24l01InitRegisters
  3656  036A                     _nrf24l01InitRegisters:	
  3657                           
  3658                           ;nrf24l01.c: 363: status.configRegister.byte = nrf24l01Send((unsigned) 0b00000000 | (uns
      +                          igned) 0x00, 0);
  3659                           
  3660                           ;incstack = 0
  3661                           ; Regs used in _nrf24l01InitRegisters: [wreg-fsr0h+fsr1l+fsr1h+status,2+status,0+btemp+1
      +                          1+pclath+cstack]
  3662  036A  3000               	movlw	0
  3663  036B  001E               	movwi fsr1++
  3664  036C  3000               	movlw	0
  3665  036D  3197  27ED  3183   	fcall	_nrf24l01Send
  3666  0370  00FF               	movwf	127
  3667  0371  087F               	movf	127,w
  3668  0372  0020               	movlb	0	; select bank0
  3669  0373  00E7               	movwf	_status+3	;volatile
  3670                           
  3671                           ;nrf24l01.c: 365: status.configRegister.PWR_UP = 0;
  3672  0374  10E7               	bcf	_status+3,1	;volatile
  3673                           
  3674                           ;nrf24l01.c: 366: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x00, status.configReg
      +                          ister.byte);
  3675  0375  0867               	movf	_status+3,w	;volatile
  3676  0376  001E               	movwi fsr1++
  3677  0377  3020               	movlw	32
  3678  0378  3197  27ED  3183   	fcall	_nrf24l01Send
  3679                           
  3680                           ;nrf24l01.c: 368: n_SETUP_AW_t setupAW;;nrf24l01.c: 369: setupAW.byte = 0x00;
  3681  037B  0020               	movlb	0	; select bank0
  3682  037C  01A9               	clrf	nrf24l01InitRegisters@setupAW
  3683                           
  3684                           ;nrf24l01.c: 370: setupAW.AW = 0b11;
  3685  037D  3003               	movlw	3
  3686  037E  04A9               	iorwf	nrf24l01InitRegisters@setupAW,f
  3687                           
  3688                           ;nrf24l01.c: 371: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x03, setupAW.byte);
  3689  037F  0829               	movf	nrf24l01InitRegisters@setupAW,w
  3690  0380  001E               	movwi fsr1++
  3691  0381  3023               	movlw	35
  3692  0382  3197  27ED  3183   	fcall	_nrf24l01Send
  3693                           
  3694                           ;nrf24l01.c: 374: n_RF_CH_t channel;;nrf24l01.c: 375: channel.RF_CH = 2;
  3695  0385  0020               	movlb	0	; select bank0
  3696  0386  0828               	movf	nrf24l01InitRegisters@channel,w
  3697  0387  3980               	andlw	-128
  3698  0388  3802               	iorlw	2
  3699  0389  00A8               	movwf	nrf24l01InitRegisters@channel
  3700                           
  3701                           ;nrf24l01.c: 376: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x05, channel.byte);
  3702  038A  0828               	movf	nrf24l01InitRegisters@channel,w
  3703  038B  001E               	movwi fsr1++
  3704  038C  3025               	movlw	37
  3705  038D  3197  27ED  3183   	fcall	_nrf24l01Send
  3706                           
  3707                           ;nrf24l01.c: 379: n_RF_SETUP_t rfSetup;;nrf24l01.c: 380: rfSetup.byte = 0x00;
  3708  0390  0020               	movlb	0	; select bank0
  3709  0391  01AB               	clrf	nrf24l01InitRegisters@rfSetup
  3710                           
  3711                           ;nrf24l01.c: 381: rfSetup.RF_DR_LOW = 0;
  3712  0392  12AB               	bcf	nrf24l01InitRegisters@rfSetup,5
  3713                           
  3714                           ;nrf24l01.c: 382: rfSetup.RF_DR_HIGH = 1;
  3715  0393  15AB               	bsf	nrf24l01InitRegisters@rfSetup,3
  3716                           
  3717                           ;nrf24l01.c: 383: rfSetup.RF_PWR = 3;
  3718  0394  3006               	movlw	6
  3719  0395  04AB               	iorwf	nrf24l01InitRegisters@rfSetup,f
  3720                           
  3721                           ;nrf24l01.c: 384: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x06, rfSetup.byte);
  3722  0396  082B               	movf	nrf24l01InitRegisters@rfSetup,w
  3723  0397  001E               	movwi fsr1++
  3724  0398  3026               	movlw	38
  3725  0399  3197  27ED  3183   	fcall	_nrf24l01Send
  3726                           
  3727                           ;nrf24l01.c: 387: nrf24l01SetRXPipe(0xFF);
  3728  039C  30FF               	movlw	255
  3729  039D  3188  20A2  3183   	fcall	_nrf24l01SetRXPipe
  3730                           
  3731                           ;nrf24l01.c: 390: n_EN_AA_t enAA;;nrf24l01.c: 391: enAA.byte = nrf24l01Send((unsigned) 0
      +                          b00000000 | (unsigned) 0x01, 0);
  3732  03A0  3000               	movlw	0
  3733  03A1  001E               	movwi fsr1++
  3734  03A2  3001               	movlw	1
  3735  03A3  3197  27ED  3183   	fcall	_nrf24l01Send
  3736  03A6  00FF               	movwf	127
  3737  03A7  087F               	movf	127,w
  3738  03A8  0020               	movlb	0	; select bank0
  3739  03A9  00AC               	movwf	nrf24l01InitRegisters@enAA
  3740                           
  3741                           ;nrf24l01.c: 392: enAA.ENAA_P0 = 0;
  3742  03AA  102C               	bcf	nrf24l01InitRegisters@enAA,0
  3743                           
  3744                           ;nrf24l01.c: 393: enAA.ENAA_P1 = 0;
  3745  03AB  10AC               	bcf	nrf24l01InitRegisters@enAA,1
  3746                           
  3747                           ;nrf24l01.c: 394: enAA.ENAA_P2 = 0;
  3748  03AC  112C               	bcf	nrf24l01InitRegisters@enAA,2
  3749                           
  3750                           ;nrf24l01.c: 395: enAA.ENAA_P3 = 0;
  3751  03AD  11AC               	bcf	nrf24l01InitRegisters@enAA,3
  3752                           
  3753                           ;nrf24l01.c: 396: enAA.ENAA_P4 = 0;
  3754  03AE  122C               	bcf	nrf24l01InitRegisters@enAA,4
  3755                           
  3756                           ;nrf24l01.c: 397: enAA.ENAA_P5 = 0;
  3757  03AF  12AC               	bcf	nrf24l01InitRegisters@enAA,5
  3758                           
  3759                           ;nrf24l01.c: 398: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x01, enAA.byte);
  3760  03B0  082C               	movf	nrf24l01InitRegisters@enAA,w
  3761  03B1  001E               	movwi fsr1++
  3762  03B2  3021               	movlw	33
  3763  03B3  3197  27ED  3183   	fcall	_nrf24l01Send
  3764                           
  3765                           ;nrf24l01.c: 402: n_FEATURE_t feature;;nrf24l01.c: 403: feature.byte = nrf24l01Send((uns
      +                          igned) 0b00000000 | (unsigned) 0x1D, 0);
  3766  03B6  3000               	movlw	0
  3767  03B7  001E               	movwi fsr1++
  3768  03B8  301D               	movlw	29
  3769  03B9  3197  27ED  3183   	fcall	_nrf24l01Send
  3770  03BC  00FF               	movwf	127
  3771  03BD  087F               	movf	127,w
  3772  03BE  0020               	movlb	0	; select bank0
  3773  03BF  00AA               	movwf	nrf24l01InitRegisters@feature
  3774                           
  3775                           ;nrf24l01.c: 404: feature.EN_DPL = 1;
  3776  03C0  152A               	bsf	nrf24l01InitRegisters@feature,2
  3777                           
  3778                           ;nrf24l01.c: 405: feature.EN_DYN_ACK = 1;
  3779  03C1  142A               	bsf	nrf24l01InitRegisters@feature,0
  3780                           
  3781                           ;nrf24l01.c: 406: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x1D, feature.byte);
  3782  03C2  082A               	movf	nrf24l01InitRegisters@feature,w
  3783  03C3  001E               	movwi fsr1++
  3784  03C4  303D               	movlw	61
  3785  03C5  3197  27ED  3183   	fcall	_nrf24l01Send
  3786                           
  3787                           ;nrf24l01.c: 408: n_DYNPD_t DynPD;;nrf24l01.c: 409: DynPD.byte = nrf24l01Send((unsigned)
      +                           0b00000000 | (unsigned) 0x1C, 0);
  3788  03C8  3000               	movlw	0
  3789  03C9  001E               	movwi fsr1++
  3790  03CA  301C               	movlw	28
  3791  03CB  3197  27ED  3183   	fcall	_nrf24l01Send
  3792  03CE  00FF               	movwf	127
  3793  03CF  087F               	movf	127,w
  3794  03D0  0020               	movlb	0	; select bank0
  3795  03D1  00AD               	movwf	nrf24l01InitRegisters@DynPD
  3796                           
  3797                           ;nrf24l01.c: 410: DynPD.DPL_P0 = 1;
  3798  03D2  142D               	bsf	nrf24l01InitRegisters@DynPD,0
  3799                           
  3800                           ;nrf24l01.c: 411: DynPD.DPL_P1 = 1;
  3801  03D3  14AD               	bsf	nrf24l01InitRegisters@DynPD,1
  3802                           
  3803                           ;nrf24l01.c: 412: DynPD.DPL_P2 = 1;
  3804  03D4  152D               	bsf	nrf24l01InitRegisters@DynPD,2
  3805                           
  3806                           ;nrf24l01.c: 413: DynPD.DPL_P3 = 1;
  3807  03D5  15AD               	bsf	nrf24l01InitRegisters@DynPD,3
  3808                           
  3809                           ;nrf24l01.c: 414: DynPD.DPL_P4 = 1;
  3810  03D6  162D               	bsf	nrf24l01InitRegisters@DynPD,4
  3811                           
  3812                           ;nrf24l01.c: 415: DynPD.DPL_P5 = 1;
  3813  03D7  16AD               	bsf	nrf24l01InitRegisters@DynPD,5
  3814                           
  3815                           ;nrf24l01.c: 416: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x1C, DynPD.byte);
  3816  03D8  082D               	movf	nrf24l01InitRegisters@DynPD,w
  3817  03D9  001E               	movwi fsr1++
  3818  03DA  303C               	movlw	60
  3819  03DB  3197  27ED  3183   	fcall	_nrf24l01Send
  3820                           
  3821                           ;nrf24l01.c: 419: unsigned int i;;nrf24l01.c: 420: for (i = 0; i < 6; i++){
  3822  03DE  0020               	movlb	0	; select bank0
  3823  03DF  01AE               	clrf	nrf24l01InitRegisters@i
  3824  03E0  01AF               	clrf	nrf24l01InitRegisters@i+1
  3825  03E1  3000               	movlw	0
  3826  03E2  022F               	subwf	nrf24l01InitRegisters@i+1,w
  3827  03E3  3006               	movlw	6
  3828  03E4  1903               	skipnz
  3829  03E5  022E               	subwf	nrf24l01InitRegisters@i,w
  3830  03E6  1803               	btfsc	3,0
  3831  03E7  2C41               	goto	l4553
  3832  03E8                     l4537:	
  3833                           
  3834                           ;nrf24l01.c: 422: nrf24l01SPIStart();
  3835  03E8  3197  27C5  3183   	fcall	_nrf24l01SPIStart
  3836                           
  3837                           ;nrf24l01.c: 423: nrf24l01SPISend((unsigned) 0b00100000 | ((unsigned) 0x0A + i));
  3838  03EB  0020               	movlb	0	; select bank0
  3839  03EC  082E               	movf	nrf24l01InitRegisters@i,w
  3840  03ED  3E0A               	addlw	10
  3841  03EE  3820               	iorlw	32
  3842  03EF  3188  2001  3183   	fcall	_nrf24l01SPISend
  3843                           
  3844                           ;nrf24l01.c: 425: nrf24l01SPISend(n_ADDRESS_P0[4] + (n_ADDRESS_MUL * i));
  3845  03F2  302F               	movlw	low ((_n_ADDRESS_P0+4)| (0+32768))
  3846  03F3  0084               	movwf	4
  3847  03F4  3098               	movlw	high ((_n_ADDRESS_P0+4)| (0+32768))
  3848  03F5  0085               	movwf	5
  3849  03F6  0800               	movf	0,w	;code access
  3850  03F7  0020               	movlb	0	; select bank0
  3851  03F8  00A7               	movwf	??_nrf24l01InitRegisters
  3852  03F9  082E               	movf	nrf24l01InitRegisters@i,w
  3853  03FA  00FF               	movwf	127
  3854  03FB  087F               	movf	127,w
  3855  03FC  00F0               	movwf	___bmul@multiplicand
  3856  03FD  3000               	movlw	low (_n_ADDRESS_MUL| (0+32768))
  3857  03FE  0084               	movwf	4
  3858  03FF  3098               	movlw	high (_n_ADDRESS_MUL| (0+32768))
  3859  0400  0085               	movwf	5
  3860  0401  0800               	movf	0,w	;code access
  3861  0402  3197  27DC  3183   	fcall	___bmul
  3862  0405  0020               	movlb	0	; select bank0
  3863  0406  0727               	addwf	??_nrf24l01InitRegisters,w
  3864  0407  3188  2001  3183   	fcall	_nrf24l01SPISend
  3865                           
  3866                           ;nrf24l01.c: 427: if (i < 2){
  3867  040A  3000               	movlw	0
  3868  040B  0020               	movlb	0	; select bank0
  3869  040C  022F               	subwf	nrf24l01InitRegisters@i+1,w
  3870  040D  3002               	movlw	2
  3871  040E  1903               	skipnz
  3872  040F  022E               	subwf	nrf24l01InitRegisters@i,w
  3873  0410  1803               	skipnc
  3874  0411  2C32               	goto	l4547
  3875                           
  3876                           ;nrf24l01.c: 428: nrf24l01SPISend(n_ADDRESS_P0[3]);
  3877  0412  302E               	movlw	low ((_n_ADDRESS_P0+3)| (0+32768))
  3878  0413  0084               	movwf	4
  3879  0414  3098               	movlw	high ((_n_ADDRESS_P0+3)| (0+32768))
  3880  0415  0085               	movwf	5
  3881  0416  0800               	movf	0,w	;code access
  3882  0417  3188  2001  3183   	fcall	_nrf24l01SPISend
  3883                           
  3884                           ;nrf24l01.c: 429: nrf24l01SPISend(n_ADDRESS_P0[2]);
  3885  041A  302D               	movlw	low ((_n_ADDRESS_P0+2)| (0+32768))
  3886  041B  0084               	movwf	4
  3887  041C  3098               	movlw	high ((_n_ADDRESS_P0+2)| (0+32768))
  3888  041D  0085               	movwf	5
  3889  041E  0800               	movf	0,w	;code access
  3890  041F  3188  2001  3183   	fcall	_nrf24l01SPISend
  3891                           
  3892                           ;nrf24l01.c: 430: nrf24l01SPISend(n_ADDRESS_P0[1]);
  3893  0422  302C               	movlw	low ((_n_ADDRESS_P0+1)| (0+32768))
  3894  0423  0084               	movwf	4
  3895  0424  3098               	movlw	high ((_n_ADDRESS_P0+1)| (0+32768))
  3896  0425  0085               	movwf	5
  3897  0426  0800               	movf	0,w	;code access
  3898  0427  3188  2001  3183   	fcall	_nrf24l01SPISend
  3899                           
  3900                           ;nrf24l01.c: 431: nrf24l01SPISend(n_ADDRESS_P0[0]);
  3901  042A  302B               	movlw	low (_n_ADDRESS_P0| (0+32768))
  3902  042B  0084               	movwf	4
  3903  042C  3098               	movlw	high (_n_ADDRESS_P0| (0+32768))
  3904  042D  0085               	movwf	5
  3905  042E  0800               	movf	0,w	;code access
  3906  042F  3188  2001  3183   	fcall	_nrf24l01SPISend
  3907  0432                     l4547:	
  3908                           
  3909                           ;nrf24l01.c: 432: };nrf24l01.c: 434: nrf24l01SPIEnd();
  3910  0432  3197  27BC  3183   	fcall	_nrf24l01SPIEnd
  3911  0435  3001               	movlw	1
  3912  0436  0020               	movlb	0	; select bank0
  3913  0437  07AE               	addwf	nrf24l01InitRegisters@i,f
  3914  0438  3000               	movlw	0
  3915  0439  3DAF               	addwfc	nrf24l01InitRegisters@i+1,f
  3916  043A  3000               	movlw	0
  3917  043B  022F               	subwf	nrf24l01InitRegisters@i+1,w
  3918  043C  3006               	movlw	6
  3919  043D  1903               	skipnz
  3920  043E  022E               	subwf	nrf24l01InitRegisters@i,w
  3921  043F  1C03               	skipc
  3922  0440  2BE8               	goto	l4537
  3923  0441                     l4553:	
  3924                           
  3925                           ;nrf24l01.c: 435: };nrf24l01.c: 437: nrf24l01SetTXPipe(0);
  3926  0441  3000               	movlw	0
  3927  0442  318B  23B5  3183   	fcall	_nrf24l01SetTXPipe
  3928                           
  3929                           ;nrf24l01.c: 441: status.statusRegister.byte = 0x00;
  3930  0445  0020               	movlb	0	; select bank0
  3931  0446  01E6               	clrf	_status+2	;volatile
  3932                           
  3933                           ;nrf24l01.c: 442: status.statusRegister.RX_DR = 1;
  3934  0447  1766               	bsf	_status+2,6	;volatile
  3935                           
  3936                           ;nrf24l01.c: 443: status.statusRegister.TX_DS = 1;
  3937  0448  16E6               	bsf	_status+2,5	;volatile
  3938                           
  3939                           ;nrf24l01.c: 444: status.statusRegister.MAX_RT = 1;
  3940  0449  1666               	bsf	_status+2,4	;volatile
  3941                           
  3942                           ;nrf24l01.c: 445: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x07, status.statusReg
      +                          ister.byte);
  3943  044A  0866               	movf	_status+2,w	;volatile
  3944  044B  001E               	movwi fsr1++
  3945  044C  3027               	movlw	39
  3946  044D  3197  27ED  3183   	fcall	_nrf24l01Send
  3947                           
  3948                           ;nrf24l01.c: 447: status.statusRegister.byte = nrf24l01Send((unsigned) 0b00000000 | (uns
      +                          igned) 0x07, 0);
  3949  0450  3000               	movlw	0
  3950  0451  001E               	movwi fsr1++
  3951  0452  3007               	movlw	7
  3952  0453  3197  27ED  3183   	fcall	_nrf24l01Send
  3953  0456  00FF               	movwf	127
  3954  0457  087F               	movf	127,w
  3955  0458  0020               	movlb	0	; select bank0
  3956  0459  00E6               	movwf	_status+2	;volatile
  3957                           
  3958                           ;nrf24l01.c: 450: nrf24l01Send((unsigned) 0b11100001, 0);
  3959  045A  3000               	movlw	0
  3960  045B  001E               	movwi fsr1++
  3961  045C  30E1               	movlw	225
  3962  045D  3197  27ED  3183   	fcall	_nrf24l01Send
  3963                           
  3964                           ;nrf24l01.c: 451: nrf24l01Send((unsigned) 0b11100010, 0);
  3965  0460  3000               	movlw	0
  3966  0461  001E               	movwi fsr1++
  3967  0462  30E2               	movlw	226
  3968  0463  3197  27ED  3183   	fcall	_nrf24l01Send
  3969                           
  3970                           ;nrf24l01.c: 454: status.configRegister.PRIM_RX = 0;
  3971  0466  0020               	movlb	0	; select bank0
  3972  0467  1067               	bcf	_status+3,0	;volatile
  3973                           
  3974                           ;nrf24l01.c: 455: status.configRegister.EN_CRC = 1;
  3975  0468  15E7               	bsf	_status+3,3	;volatile
  3976                           
  3977                           ;nrf24l01.c: 456: status.configRegister.CRCO = 1;
  3978  0469  1567               	bsf	_status+3,2	;volatile
  3979                           
  3980                           ;nrf24l01.c: 457: status.configRegister.PWR_UP = 1;
  3981  046A  14E7               	bsf	_status+3,1	;volatile
  3982                           
  3983                           ;nrf24l01.c: 458: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x00, status.configReg
      +                          ister.byte);
  3984  046B  0867               	movf	_status+3,w	;volatile
  3985  046C  001E               	movwi fsr1++
  3986  046D  3020               	movlw	32
  3987  046E  3197  27ED         	fcall	_nrf24l01Send
  3988  0470  0008               	return
  3989  0471                     __end_of_nrf24l01InitRegisters:	
  3990                           
  3991                           	psect	text4
  3992  0BB5                     __ptext4:	
  3993 ;; *************** function _nrf24l01SetTXPipe *****************
  3994 ;; Defined at:
  3995 ;;		line 141 in file "nrf24l01.c"
  3996 ;; Parameters:    Size  Location     Type
  3997 ;;  pipe            1    wreg     unsigned char 
  3998 ;; Auto vars:     Size  Location     Type
  3999 ;;  pipe            1    6[BANK0 ] unsigned char 
  4000 ;; Return value:  Size  Location     Type
  4001 ;;                  1    wreg      void 
  4002 ;; Registers used:
  4003 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, btemp+11, pclath, cstack
  4004 ;; Tracked objects:
  4005 ;;		On entry : 0/0
  4006 ;;		On exit  : 0/0
  4007 ;;		Unchanged: 0/0
  4008 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4009 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4010 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4011 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4012 ;;      Totals:         1       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4013 ;;Total ram usage:        2 bytes
  4014 ;; Hardware stack levels used:    1
  4015 ;; Hardware stack levels required when called:    8
  4016 ;; This function calls:
  4017 ;;		___bmul
  4018 ;;		_nrf24l01SPIEnd
  4019 ;;		_nrf24l01SPISend
  4020 ;;		_nrf24l01SPIStart
  4021 ;; This function is called by:
  4022 ;;		_main
  4023 ;;		_nrf24l01InitRegisters
  4024 ;; This function uses a non-reentrant model
  4025 ;;
  4026                           
  4027                           
  4028                           ;psect for function _nrf24l01SetTXPipe
  4029  0BB5                     _nrf24l01SetTXPipe:	
  4030                           
  4031                           ;incstack = 0
  4032                           ; Regs used in _nrf24l01SetTXPipe: [wreg-fsr0h+fsr1l+fsr1h+status,2+status,0+btemp+11+pc
      +                          lath+cstack]
  4033                           ;nrf24l01SetTXPipe@pipe stored from wreg
  4034  0BB5  0020               	movlb	0	; select bank0
  4035  0BB6  00A6               	movwf	nrf24l01SetTXPipe@pipe
  4036                           
  4037                           ;nrf24l01.c: 144: nrf24l01SPIStart();
  4038  0BB7  3197  27C5  318B   	fcall	_nrf24l01SPIStart
  4039                           
  4040                           ;nrf24l01.c: 145: nrf24l01SPISend((unsigned) 0b00100000 | (unsigned) 0x10);
  4041  0BBA  3030               	movlw	48
  4042  0BBB  3188  2001  318B   	fcall	_nrf24l01SPISend
  4043                           
  4044                           ;nrf24l01.c: 146: nrf24l01SPISend(n_ADDRESS_P0[4] + (unsigned) (pipe * n_ADDRESS_MUL));
  4045  0BBE  302F               	movlw	low ((_n_ADDRESS_P0+4)| (0+32768))
  4046  0BBF  0084               	movwf	4
  4047  0BC0  3098               	movlw	high ((_n_ADDRESS_P0+4)| (0+32768))
  4048  0BC1  0085               	movwf	5
  4049  0BC2  0800               	movf	0,w	;code access
  4050  0BC3  00F3               	movwf	??_nrf24l01SetTXPipe
  4051  0BC4  3000               	movlw	low (_n_ADDRESS_MUL| (0+32768))
  4052  0BC5  0084               	movwf	4
  4053  0BC6  3098               	movlw	high (_n_ADDRESS_MUL| (0+32768))
  4054  0BC7  0085               	movwf	5
  4055  0BC8  0800               	movf	0,w	;code access
  4056  0BC9  00FF               	movwf	127
  4057  0BCA  087F               	movf	127,w
  4058  0BCB  00F0               	movwf	___bmul@multiplicand
  4059  0BCC  0020               	movlb	0	; select bank0
  4060  0BCD  0826               	movf	nrf24l01SetTXPipe@pipe,w
  4061  0BCE  3197  27DC  318B   	fcall	___bmul
  4062  0BD1  0773               	addwf	??_nrf24l01SetTXPipe,w
  4063  0BD2  3188  2001  318B   	fcall	_nrf24l01SPISend
  4064                           
  4065                           ;nrf24l01.c: 147: nrf24l01SPISend(n_ADDRESS_P0[3]);
  4066  0BD5  302E               	movlw	low ((_n_ADDRESS_P0+3)| (0+32768))
  4067  0BD6  0084               	movwf	4
  4068  0BD7  3098               	movlw	high ((_n_ADDRESS_P0+3)| (0+32768))
  4069  0BD8  0085               	movwf	5
  4070  0BD9  0800               	movf	0,w	;code access
  4071  0BDA  3188  2001  318B   	fcall	_nrf24l01SPISend
  4072                           
  4073                           ;nrf24l01.c: 148: nrf24l01SPISend(n_ADDRESS_P0[2]);
  4074  0BDD  302D               	movlw	low ((_n_ADDRESS_P0+2)| (0+32768))
  4075  0BDE  0084               	movwf	4
  4076  0BDF  3098               	movlw	high ((_n_ADDRESS_P0+2)| (0+32768))
  4077  0BE0  0085               	movwf	5
  4078  0BE1  0800               	movf	0,w	;code access
  4079  0BE2  3188  2001  318B   	fcall	_nrf24l01SPISend
  4080                           
  4081                           ;nrf24l01.c: 149: nrf24l01SPISend(n_ADDRESS_P0[1]);
  4082  0BE5  302C               	movlw	low ((_n_ADDRESS_P0+1)| (0+32768))
  4083  0BE6  0084               	movwf	4
  4084  0BE7  3098               	movlw	high ((_n_ADDRESS_P0+1)| (0+32768))
  4085  0BE8  0085               	movwf	5
  4086  0BE9  0800               	movf	0,w	;code access
  4087  0BEA  3188  2001  318B   	fcall	_nrf24l01SPISend
  4088                           
  4089                           ;nrf24l01.c: 150: nrf24l01SPISend(n_ADDRESS_P0[0]);
  4090  0BED  302B               	movlw	low (_n_ADDRESS_P0| (0+32768))
  4091  0BEE  0084               	movwf	4
  4092  0BEF  3098               	movlw	high (_n_ADDRESS_P0| (0+32768))
  4093  0BF0  0085               	movwf	5
  4094  0BF1  0800               	movf	0,w	;code access
  4095  0BF2  3188  2001  318B   	fcall	_nrf24l01SPISend
  4096                           
  4097                           ;nrf24l01.c: 151: nrf24l01SPIEnd();
  4098  0BF5  3197  27BC         	fcall	_nrf24l01SPIEnd
  4099  0BF7  0008               	return
  4100  0BF8                     __end_of_nrf24l01SetTXPipe:	
  4101                           
  4102                           	psect	text5
  4103  17DC                     __ptext5:	
  4104 ;; *************** function ___bmul *****************
  4105 ;; Defined at:
  4106 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\Umul8.c"
  4107 ;; Parameters:    Size  Location     Type
  4108 ;;  multiplier      1    wreg     unsigned char 
  4109 ;;  multiplicand    1    0[COMMON] unsigned char 
  4110 ;; Auto vars:     Size  Location     Type
  4111 ;;  multiplier      1    2[COMMON] unsigned char 
  4112 ;;  product         1    1[COMMON] unsigned char 
  4113 ;; Return value:  Size  Location     Type
  4114 ;;                  1    wreg      unsigned char 
  4115 ;; Registers used:
  4116 ;;		wreg, status,2, status,0, btemp+11
  4117 ;; Tracked objects:
  4118 ;;		On entry : 0/0
  4119 ;;		On exit  : 0/0
  4120 ;;		Unchanged: 0/0
  4121 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4122 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4123 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4124 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4125 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4126 ;;Total ram usage:        3 bytes
  4127 ;; Hardware stack levels used:    1
  4128 ;; Hardware stack levels required when called:    7
  4129 ;; This function calls:
  4130 ;;		Nothing
  4131 ;; This function is called by:
  4132 ;;		_nrf24l01SetTXPipe
  4133 ;;		_nrf24l01InitRegisters
  4134 ;; This function uses a non-reentrant model
  4135 ;;
  4136                           
  4137                           
  4138                           ;psect for function ___bmul
  4139  17DC                     ___bmul:	
  4140                           
  4141                           ;incstack = 0
  4142                           ; Regs used in ___bmul: [wreg+status,2+status,0+btemp+11]
  4143                           ;___bmul@multiplier stored from wreg
  4144  17DC  00F2               	movwf	___bmul@multiplier
  4145  17DD  01F1               	clrf	___bmul@product
  4146  17DE                     l3961:	
  4147  17DE  1C72               	btfss	___bmul@multiplier,0
  4148  17DF  2FE4               	goto	l3965
  4149  17E0  0870               	movf	___bmul@multiplicand,w
  4150  17E1  00FF               	movwf	127
  4151  17E2  087F               	movf	127,w
  4152  17E3  07F1               	addwf	___bmul@product,f
  4153  17E4                     l3965:	
  4154  17E4  1003               	clrc
  4155  17E5  0DF0               	rlf	___bmul@multiplicand,f
  4156  17E6  1003               	clrc
  4157  17E7  0CF2               	rrf	___bmul@multiplier,f
  4158  17E8  0872               	movf	___bmul@multiplier,w
  4159  17E9  1D03               	btfss	3,2
  4160  17EA  2FDE               	goto	l3961
  4161  17EB  0871               	movf	___bmul@product,w
  4162  17EC  0008               	return
  4163  17ED                     __end_of___bmul:	
  4164                           
  4165                           	psect	text6
  4166  08A2                     __ptext6:	
  4167 ;; *************** function _nrf24l01SetRXPipe *****************
  4168 ;; Defined at:
  4169 ;;		line 154 in file "nrf24l01.c"
  4170 ;; Parameters:    Size  Location     Type
  4171 ;;  pipe            1    wreg     unsigned char 
  4172 ;; Auto vars:     Size  Location     Type
  4173 ;;  pipe            1    1[COMMON] unsigned char 
  4174 ;;  enRXAddr        1    2[COMMON] struct .
  4175 ;; Return value:  Size  Location     Type
  4176 ;;                  1    wreg      void 
  4177 ;; Registers used:
  4178 ;;		wreg, fsr1l, fsr1h, status,2, status,0, btemp+11, pclath
  4179 ;; Tracked objects:
  4180 ;;		On entry : 0/0
  4181 ;;		On exit  : 0/0
  4182 ;;		Unchanged: 0/0
  4183 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4184 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4185 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4186 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4187 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4188 ;;Total ram usage:        3 bytes
  4189 ;; Hardware stack levels used:    1
  4190 ;; Hardware stack levels required when called:    9
  4191 ;; This function calls:
  4192 ;;		_nrf24l01Send
  4193 ;; This function is called by:
  4194 ;;		_main
  4195 ;;		_nrf24l01InitRegisters
  4196 ;; This function uses a non-reentrant model
  4197 ;;
  4198                           
  4199                           
  4200                           ;psect for function _nrf24l01SetRXPipe
  4201  08A2                     _nrf24l01SetRXPipe:	
  4202                           
  4203                           ;incstack = 0
  4204                           ; Regs used in _nrf24l01SetRXPipe: [wreg+fsr1l+fsr1h+status,2+status,0+btemp+11+pclath]
  4205                           ;nrf24l01SetRXPipe@pipe stored from wreg
  4206  08A2  00F1               	movwf	nrf24l01SetRXPipe@pipe
  4207                           
  4208                           ;nrf24l01.c: 156: n_EN_RXADDR_t enRXAddr;;nrf24l01.c: 158: if (pipe > 5){
  4209  08A3  3006               	movlw	6
  4210  08A4  0271               	subwf	nrf24l01SetRXPipe@pipe,w
  4211  08A5  1C03               	skipc
  4212  08A6  28AE               	goto	l272
  4213                           
  4214                           ;nrf24l01.c: 159: enRXAddr.ERX_P0 = 1;
  4215  08A7  1472               	bsf	nrf24l01SetRXPipe@enRXAddr,0
  4216                           
  4217                           ;nrf24l01.c: 160: enRXAddr.ERX_P1 = 1;
  4218  08A8  14F2               	bsf	nrf24l01SetRXPipe@enRXAddr,1
  4219                           
  4220                           ;nrf24l01.c: 161: enRXAddr.ERX_P2 = 1;
  4221  08A9  1572               	bsf	nrf24l01SetRXPipe@enRXAddr,2
  4222                           
  4223                           ;nrf24l01.c: 162: enRXAddr.ERX_P3 = 1;
  4224  08AA  15F2               	bsf	nrf24l01SetRXPipe@enRXAddr,3
  4225                           
  4226                           ;nrf24l01.c: 163: enRXAddr.ERX_P4 = 1;
  4227  08AB  1672               	bsf	nrf24l01SetRXPipe@enRXAddr,4
  4228                           
  4229                           ;nrf24l01.c: 164: enRXAddr.ERX_P5 = 1;
  4230  08AC  16F2               	bsf	nrf24l01SetRXPipe@enRXAddr,5
  4231                           
  4232                           ;nrf24l01.c: 165: }
  4233  08AD  28BA               	goto	l4205
  4234  08AE                     l272:	
  4235                           
  4236                           ;nrf24l01.c: 167: else{;nrf24l01.c: 168: enRXAddr.ERX_P0 = 1;
  4237  08AE  1472               	bsf	nrf24l01SetRXPipe@enRXAddr,0
  4238                           
  4239                           ;nrf24l01.c: 169: enRXAddr.byte = (unsigned) enRXAddr.byte << pipe;
  4240  08AF  0872               	movf	nrf24l01SetRXPipe@enRXAddr,w
  4241  08B0  00F0               	movwf	??_nrf24l01SetRXPipe
  4242  08B1  0A71               	incf	nrf24l01SetRXPipe@pipe,w
  4243  08B2  28B4               	goto	u4744
  4244  08B3                     u4745:	
  4245  08B3  35F0               	lslf	??_nrf24l01SetRXPipe,f
  4246  08B4                     u4744:	
  4247  08B4  0B89               	decfsz	9,f
  4248  08B5  28B3               	goto	u4745
  4249  08B6  0870               	movf	??_nrf24l01SetRXPipe,w
  4250  08B7  00FF               	movwf	127
  4251  08B8  087F               	movf	127,w
  4252  08B9  00F2               	movwf	nrf24l01SetRXPipe@enRXAddr
  4253  08BA                     l4205:	
  4254                           
  4255                           ;nrf24l01.c: 170: };nrf24l01.c: 172: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x0
      +                          2, enRXAddr.byte);
  4256  08BA  0872               	movf	nrf24l01SetRXPipe@enRXAddr,w
  4257  08BB  001E               	movwi fsr1++
  4258  08BC  3022               	movlw	34
  4259  08BD  3197  27ED         	fcall	_nrf24l01Send
  4260  08BF  0008               	return
  4261  08C0                     __end_of_nrf24l01SetRXPipe:	
  4262                           
  4263                           	psect	text7
  4264  0AC0                     __ptext7:	
  4265 ;; *************** function _nrf24l01GetPipe *****************
  4266 ;; Defined at:
  4267 ;;		line 140 in file "main.c"
  4268 ;; Parameters:    Size  Location     Type
  4269 ;;  name            1    wreg     PTR unsigned char 
  4270 ;;		 -> romDataMap(28), 
  4271 ;; Auto vars:     Size  Location     Type
  4272 ;;  name            1    9[BANK0 ] PTR unsigned char 
  4273 ;;		 -> romDataMap(28), 
  4274 ;;  i               1   10[BANK0 ] unsigned char 
  4275 ;;  pipe            1    8[BANK0 ] unsigned char 
  4276 ;; Return value:  Size  Location     Type
  4277 ;;                  1    wreg      unsigned char 
  4278 ;; Registers used:
  4279 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, btemp+0, btemp+1, btemp+10, btemp+11, pclath, cstack
  4280 ;; Tracked objects:
  4281 ;;		On entry : 0/0
  4282 ;;		On exit  : 0/0
  4283 ;;		Unchanged: 0/0
  4284 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4285 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4286 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4287 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4288 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4289 ;;Total ram usage:        4 bytes
  4290 ;; Hardware stack levels used:    1
  4291 ;; Hardware stack levels required when called:    8
  4292 ;; This function calls:
  4293 ;;		___lwmod
  4294 ;;		_strlen
  4295 ;; This function is called by:
  4296 ;;		_main
  4297 ;; This function uses a non-reentrant model
  4298 ;;
  4299                           
  4300                           
  4301                           ;psect for function _nrf24l01GetPipe
  4302  0AC0                     _nrf24l01GetPipe:	
  4303                           
  4304                           ;incstack = 0
  4305                           ; Regs used in _nrf24l01GetPipe: [wreg-fsr0h+fsr1l+fsr1h+status,2-btemp+1+btemp+10+btemp
      +                          +11+pclath+cstack]
  4306                           ;nrf24l01GetPipe@name stored from wreg
  4307  0AC0  0020               	movlb	0	; select bank0
  4308  0AC1  00A9               	movwf	nrf24l01GetPipe@name
  4309                           
  4310                           ;main.c: 141: unsigned char pipe = 0;
  4311  0AC2  01A8               	clrf	nrf24l01GetPipe@pipe
  4312                           
  4313                           ;main.c: 142: unsigned char i = 0;
  4314  0AC3  01AA               	clrf	nrf24l01GetPipe@i
  4315                           
  4316                           ;main.c: 145: for (i = 0; i < strlen(name); i++){
  4317  0AC4  01AA               	clrf	nrf24l01GetPipe@i
  4318  0AC5                     l4671:	
  4319  0AC5  0829               	movf	nrf24l01GetPipe@name,w
  4320  0AC6  3188  2084  318A   	fcall	_strlen
  4321  0AC9  0020               	movlb	0	; select bank0
  4322  0ACA  082A               	movf	nrf24l01GetPipe@i,w
  4323  0ACB  00FE               	movwf	126
  4324  0ACC  01FF               	clrf	127
  4325  0ACD  0875               	movf	117,w
  4326  0ACE  027F               	subwf	127,w
  4327  0ACF  1D03               	skipz
  4328  0AD0  2AD3               	goto	u5175
  4329  0AD1  0874               	movf	116,w
  4330  0AD2  027E               	subwf	126,w
  4331  0AD3                     u5175:	
  4332  0AD3  1803               	btfsc	3,0
  4333  0AD4  2AE5               	goto	l4673
  4334                           
  4335                           ;main.c: 146: pipe+= name[i];
  4336  0AD5  082A               	movf	nrf24l01GetPipe@i,w
  4337  0AD6  0729               	addwf	nrf24l01GetPipe@name,w
  4338  0AD7  00A7               	movwf	??_nrf24l01GetPipe
  4339  0AD8  0827               	movf	??_nrf24l01GetPipe,w
  4340  0AD9  0084               	movwf	4
  4341  0ADA  3001               	movlw	1	; select bank2/3
  4342  0ADB  0085               	movwf	5
  4343  0ADC  0800               	movf	0,w
  4344  0ADD  00FF               	movwf	127
  4345  0ADE  087F               	movf	127,w
  4346  0ADF  07A8               	addwf	nrf24l01GetPipe@pipe,f
  4347  0AE0  3001               	movlw	1
  4348  0AE1  00FF               	movwf	127
  4349  0AE2  087F               	movf	127,w
  4350  0AE3  07AA               	addwf	nrf24l01GetPipe@i,f
  4351  0AE4  2AC5               	goto	l4671
  4352  0AE5                     l4673:	
  4353                           
  4354                           ;main.c: 147: };main.c: 149: return (unsigned) pipe % 6;
  4355  0AE5  3006               	movlw	6
  4356  0AE6  00F0               	movwf	___lwmod@divisor
  4357  0AE7  3000               	movlw	0
  4358  0AE8  00F1               	movwf	___lwmod@divisor+1
  4359  0AE9  0828               	movf	nrf24l01GetPipe@pipe,w
  4360  0AEA  00FE               	movwf	126
  4361  0AEB  01FF               	clrf	127
  4362  0AEC  087E               	movf	126,w
  4363  0AED  00F2               	movwf	___lwmod@dividend
  4364  0AEE  087F               	movf	127,w
  4365  0AEF  00F3               	movwf	___lwmod@dividend+1
  4366  0AF0  318A  2203         	fcall	___lwmod
  4367  0AF2  0870               	movf	?___lwmod,w
  4368  0AF3  0008               	return
  4369  0AF4                     __end_of_nrf24l01GetPipe:	
  4370                           
  4371                           	psect	text8
  4372  0A03                     __ptext8:	
  4373 ;; *************** function ___lwmod *****************
  4374 ;; Defined at:
  4375 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\lwmod.c"
  4376 ;; Parameters:    Size  Location     Type
  4377 ;;  divisor         2    0[COMMON] unsigned int 
  4378 ;;  dividend        2    2[COMMON] unsigned int 
  4379 ;; Auto vars:     Size  Location     Type
  4380 ;;  counter         1    6[BANK0 ] unsigned char 
  4381 ;; Return value:  Size  Location     Type
  4382 ;;                  2    0[COMMON] unsigned int 
  4383 ;; Registers used:
  4384 ;;		wreg, status,2, status,0, btemp+11
  4385 ;; Tracked objects:
  4386 ;;		On entry : 0/0
  4387 ;;		On exit  : 0/0
  4388 ;;		Unchanged: 0/0
  4389 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4390 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4391 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4392 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4393 ;;      Totals:         4       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4394 ;;Total ram usage:        5 bytes
  4395 ;; Hardware stack levels used:    1
  4396 ;; Hardware stack levels required when called:    7
  4397 ;; This function calls:
  4398 ;;		Nothing
  4399 ;; This function is called by:
  4400 ;;		_nrf24l01GetPipe
  4401 ;; This function uses a non-reentrant model
  4402 ;;
  4403                           
  4404                           
  4405                           ;psect for function ___lwmod
  4406  0A03                     ___lwmod:	
  4407                           
  4408                           ;incstack = 0
  4409                           ; Regs used in ___lwmod: [wreg+status,2+status,0+btemp+11]
  4410  0A03  0870               	movf	___lwmod@divisor,w
  4411  0A04  0471               	iorwf	___lwmod@divisor+1,w
  4412  0A05  1903               	btfsc	3,2
  4413  0A06  2A2B               	goto	l4603
  4414  0A07  0020               	movlb	0	; select bank0
  4415  0A08  01A6               	clrf	___lwmod@counter
  4416  0A09  0AA6               	incf	___lwmod@counter,f
  4417  0A0A                     l4593:	
  4418  0A0A  1BF1               	btfsc	___lwmod@divisor+1,7
  4419  0A0B  2A16               	goto	l4595
  4420  0A0C  3001               	movlw	1
  4421  0A0D                     u5075:	
  4422  0A0D  35F0               	lslf	___lwmod@divisor,f
  4423  0A0E  0DF1               	rlf	___lwmod@divisor+1,f
  4424  0A0F  0B89               	decfsz	9,f
  4425  0A10  2A0D               	goto	u5075
  4426  0A11  3001               	movlw	1
  4427  0A12  00FF               	movwf	127
  4428  0A13  087F               	movf	127,w
  4429  0A14  07A6               	addwf	___lwmod@counter,f
  4430  0A15  2A0A               	goto	l4593
  4431  0A16                     l4595:	
  4432  0A16  0871               	movf	___lwmod@divisor+1,w
  4433  0A17  0273               	subwf	___lwmod@dividend+1,w
  4434  0A18  1D03               	skipz
  4435  0A19  2A1C               	goto	u5095
  4436  0A1A  0870               	movf	___lwmod@divisor,w
  4437  0A1B  0272               	subwf	___lwmod@dividend,w
  4438  0A1C                     u5095:	
  4439  0A1C  1C03               	skipc
  4440  0A1D  2A22               	goto	l4599
  4441  0A1E  0870               	movf	___lwmod@divisor,w
  4442  0A1F  02F2               	subwf	___lwmod@dividend,f
  4443  0A20  0871               	movf	___lwmod@divisor+1,w
  4444  0A21  3BF3               	subwfb	___lwmod@dividend+1,f
  4445  0A22                     l4599:	
  4446  0A22  3001               	movlw	1
  4447  0A23                     u5105:	
  4448  0A23  36F1               	lsrf	___lwmod@divisor+1,f
  4449  0A24  0CF0               	rrf	___lwmod@divisor,f
  4450  0A25  0B89               	decfsz	9,f
  4451  0A26  2A23               	goto	u5105
  4452  0A27  3001               	movlw	1
  4453  0A28  02A6               	subwf	___lwmod@counter,f
  4454  0A29  1D03               	btfss	3,2
  4455  0A2A  2A16               	goto	l4595
  4456  0A2B                     l4603:	
  4457  0A2B  0873               	movf	___lwmod@dividend+1,w
  4458  0A2C  00F1               	movwf	?___lwmod+1
  4459  0A2D  0872               	movf	___lwmod@dividend,w
  4460  0A2E  00F0               	movwf	?___lwmod
  4461  0A2F  0008               	return
  4462  0A30                     __end_of___lwmod:	
  4463                           
  4464                           	psect	text9
  4465  0223                     __ptext9:	
  4466 ;; *************** function _loop *****************
  4467 ;; Defined at:
  4468 ;;		line 97 in file "main.c"
  4469 ;; Parameters:    Size  Location     Type
  4470 ;;		None
  4471 ;; Auto vars:     Size  Location     Type
  4472 ;;  packet         33   16[BANK4 ] struct .
  4473 ;;  ta              3    3[BANK4 ] float 
  4474 ;;  vt              3    0[BANK4 ] float 
  4475 ;;  rfSetup         1   15[BANK4 ] struct .
  4476 ;; Return value:  Size  Location     Type
  4477 ;;                  1    wreg      void 
  4478 ;; Registers used:
  4479 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, btemp+0, btemp+1, btemp+8, btemp+9, btemp+10, btemp+11, pclath
      +, cstack
  4480 ;; Tracked objects:
  4481 ;;		On entry : 0/0
  4482 ;;		On exit  : 0/0
  4483 ;;		Unchanged: 0/0
  4484 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4485 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4486 ;;      Locals:         0       0       0       0       0      49       0       0       0       0       0       0       
      +0       0
  4487 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4488 ;;      Totals:         0       0       0       0       0      49       0       0       0       0       0       0       
      +0       0
  4489 ;;Total ram usage:       49 bytes
  4490 ;; Hardware stack levels used:    1
  4491 ;; Hardware stack levels required when called:   14
  4492 ;; This function calls:
  4493 ;;		_EEPROMWrite
  4494 ;;		___ftadd
  4495 ;;		___ftdiv
  4496 ;;		___ftmul
  4497 ;;		___ftneg
  4498 ;;		___lbtoft
  4499 ;;		___lltoft
  4500 ;;		_getADCValue
  4501 ;;		_nrf24l01Send
  4502 ;;		_sendMessage
  4503 ;; This function is called by:
  4504 ;;		_main
  4505 ;; This function uses a non-reentrant model
  4506 ;;
  4507                           
  4508                           
  4509                           ;psect for function _loop
  4510  0223                     _loop:	
  4511                           
  4512                           ;main.c: 99: nrf24l01Packet_t packet;;main.c: 101: sendMessage(&packet, "COUNT", counter
      +                          );
  4513                           
  4514                           ;incstack = 0
  4515                           ; Regs used in _loop: [wreg-fsr0h+fsr1l+fsr1h+status,2-btemp+1+btemp+8-btemp+11+pclath+c
      +                          stack]
  4516  0223  0021               	movlb	1	; select bank1
  4517  0224  0860               	movf	(_counter+3)^(0+128),w
  4518  0225  00F3               	movwf	___lltoft@c+3
  4519  0226  085F               	movf	(_counter+2)^(0+128),w
  4520  0227  00F2               	movwf	___lltoft@c+2
  4521  0228  085E               	movf	(_counter+1)^(0+128),w
  4522  0229  00F1               	movwf	___lltoft@c+1
  4523  022A  085D               	movf	_counter^(0+128),w
  4524  022B  00F0               	movwf	___lltoft@c
  4525  022C  3189  21AD  3182   	fcall	___lltoft
  4526  022F  0870               	movf	?___lltoft,w
  4527  0230  0024               	movlb	4	; select bank4
  4528  0231  00A6               	movwf	_loop$2056^(0+512)
  4529  0232  0871               	movf	?___lltoft+1,w
  4530  0233  00A7               	movwf	(_loop$2056+1)^(0+512)
  4531  0234  0872               	movf	?___lltoft+2,w
  4532  0235  00A8               	movwf	(_loop$2056+2)^(0+512)
  4533                           
  4534                           ;main.c: 99: nrf24l01Packet_t packet;;main.c: 101: sendMessage(&packet, "COUNT", counter
      +                          );
  4535  0236  3030               	movlw	low loop@packet
  4536  0237  0021               	movlb	1	; select bank1
  4537  0238  00B1               	movwf	sendMessage@packet^(0+128)
  4538  0239  3002               	movlw	high loop@packet
  4539  023A  00B2               	movwf	(sendMessage@packet+1)^(0+128)
  4540  023B  3025               	movlw	low (STR_3| (0+32768))
  4541  023C  00B3               	movwf	sendMessage@topic^(0+128)
  4542  023D  3098               	movlw	high (STR_3| (0+32768))
  4543  023E  00B4               	movwf	(sendMessage@topic^(0+128)+1)
  4544  023F  0024               	movlb	4	; select bank4
  4545  0240  0826               	movf	_loop$2056^(0+512),w
  4546  0241  0021               	movlb	1	; select bank1
  4547  0242  00B5               	movwf	sendMessage@value^(0+128)
  4548  0243  0024               	movlb	4	; select bank4
  4549  0244  0827               	movf	(_loop$2056+1)^(0+512),w
  4550  0245  0021               	movlb	1	; select bank1
  4551  0246  00B6               	movwf	(sendMessage@value+1)^(0+128)
  4552  0247  0024               	movlb	4	; select bank4
  4553  0248  0828               	movf	(_loop$2056+2)^(0+512),w
  4554  0249  0021               	movlb	1	; select bank1
  4555  024A  00B7               	movwf	(sendMessage@value+2)^(0+128)
  4556  024B  318C  24F7  3182   	fcall	_sendMessage
  4557                           
  4558                           ;main.c: 107: sendMessage(&packet, "VBAT", getADCValue(0b000100) * 3.106382978723404);
  4559  024E  30CF               	movlw	207
  4560  024F  0020               	movlb	0	; select bank0
  4561  0250  00CC               	movwf	___ftmul@f1
  4562  0251  3046               	movlw	70
  4563  0252  00CD               	movwf	___ftmul@f1+1
  4564  0253  3040               	movlw	64
  4565  0254  00CE               	movwf	___ftmul@f1+2
  4566  0255  3004               	movlw	4
  4567  0256  318E  26AD  3182   	fcall	_getADCValue
  4568  0259  0020               	movlb	0	; select bank0
  4569  025A  0842               	movf	?_getADCValue,w
  4570  025B  00CF               	movwf	___ftmul@f2
  4571  025C  0843               	movf	?_getADCValue+1,w
  4572  025D  00D0               	movwf	___ftmul@f2+1
  4573  025E  0844               	movf	?_getADCValue+2,w
  4574  025F  00D1               	movwf	___ftmul@f2+2
  4575  0260  3187  270E  3182   	fcall	___ftmul
  4576  0263  0020               	movlb	0	; select bank0
  4577  0264  084C               	movf	?___ftmul,w
  4578  0265  0024               	movlb	4	; select bank4
  4579  0266  00A9               	movwf	_loop$2057^(0+512)
  4580  0267  0020               	movlb	0	; select bank0
  4581  0268  084D               	movf	?___ftmul+1,w
  4582  0269  0024               	movlb	4	; select bank4
  4583  026A  00AA               	movwf	(_loop$2057+1)^(0+512)
  4584  026B  0020               	movlb	0	; select bank0
  4585  026C  084E               	movf	?___ftmul+2,w
  4586  026D  0024               	movlb	4	; select bank4
  4587  026E  00AB               	movwf	(_loop$2057+2)^(0+512)
  4588                           
  4589                           ;main.c: 107: sendMessage(&packet, "VBAT", getADCValue(0b000100) * 3.106382978723404);
  4590  026F  3030               	movlw	low loop@packet
  4591  0270  0021               	movlb	1	; select bank1
  4592  0271  00B1               	movwf	sendMessage@packet^(0+128)
  4593  0272  3002               	movlw	high loop@packet
  4594  0273  00B2               	movwf	(sendMessage@packet+1)^(0+128)
  4595  0274  3035               	movlw	low (STR_4| (0+32768))
  4596  0275  00B3               	movwf	sendMessage@topic^(0+128)
  4597  0276  3098               	movlw	high (STR_4| (0+32768))
  4598  0277  00B4               	movwf	(sendMessage@topic^(0+128)+1)
  4599  0278  0024               	movlb	4	; select bank4
  4600  0279  0829               	movf	_loop$2057^(0+512),w
  4601  027A  0021               	movlb	1	; select bank1
  4602  027B  00B5               	movwf	sendMessage@value^(0+128)
  4603  027C  0024               	movlb	4	; select bank4
  4604  027D  082A               	movf	(_loop$2057+1)^(0+512),w
  4605  027E  0021               	movlb	1	; select bank1
  4606  027F  00B6               	movwf	(sendMessage@value+1)^(0+128)
  4607  0280  0024               	movlb	4	; select bank4
  4608  0281  082B               	movf	(_loop$2057+2)^(0+512),w
  4609  0282  0021               	movlb	1	; select bank1
  4610  0283  00B7               	movwf	(sendMessage@value+2)^(0+128)
  4611  0284  318C  24F7  3182   	fcall	_sendMessage
  4612                           
  4613                           ;main.c: 109: EEPROMWrite(0, (unsigned char) 22);
  4614  0287  3000               	movlw	0
  4615  0288  00F0               	movwf	EEPROMWrite@address
  4616  0289  00F1               	movwf	EEPROMWrite@address+1
  4617  028A  3016               	movlw	22
  4618  028B  00FF               	movwf	127
  4619  028C  087F               	movf	127,w
  4620  028D  00F2               	movwf	EEPROMWrite@data
  4621  028E  3188  20FD  3182   	fcall	_EEPROMWrite
  4622                           
  4623                           ;main.c: 111: sendMessage(&packet, "ANC3mV", getADCValue(0b010011));
  4624  0291  3030               	movlw	low loop@packet
  4625  0292  0021               	movlb	1	; select bank1
  4626  0293  00B1               	movwf	sendMessage@packet^(0+128)
  4627  0294  3002               	movlw	high loop@packet
  4628  0295  00B2               	movwf	(sendMessage@packet+1)^(0+128)
  4629  0296  300C               	movlw	low (STR_5| (0+32768))
  4630  0297  00B3               	movwf	sendMessage@topic^(0+128)
  4631  0298  3098               	movlw	high (STR_5| (0+32768))
  4632  0299  00B4               	movwf	(sendMessage@topic^(0+128)+1)
  4633  029A  3013               	movlw	19
  4634  029B  318E  26AD  3182   	fcall	_getADCValue
  4635  029E  0020               	movlb	0	; select bank0
  4636  029F  0842               	movf	?_getADCValue,w
  4637  02A0  0021               	movlb	1	; select bank1
  4638  02A1  00B5               	movwf	sendMessage@value^(0+128)
  4639  02A2  0020               	movlb	0	; select bank0
  4640  02A3  0843               	movf	?_getADCValue+1,w
  4641  02A4  0021               	movlb	1	; select bank1
  4642  02A5  00B6               	movwf	(sendMessage@value+1)^(0+128)
  4643  02A6  0020               	movlb	0	; select bank0
  4644  02A7  0844               	movf	?_getADCValue+2,w
  4645  02A8  0021               	movlb	1	; select bank1
  4646  02A9  00B7               	movwf	(sendMessage@value+2)^(0+128)
  4647  02AA  318C  24F7  3182   	fcall	_sendMessage
  4648                           
  4649                           ;main.c: 119: FVRCONbits.TSEN = 1;
  4650  02AD  0022               	movlb	2	; select bank2
  4651  02AE  1697               	bsf	23,5	;volatile
  4652                           
  4653                           ;main.c: 120: float vt = (2.048 - getADCValue(0b111101)) / 2;
  4654  02AF  303D               	movlw	61
  4655  02B0  318E  26AD  3182   	fcall	_getADCValue
  4656  02B3  0020               	movlb	0	; select bank0
  4657  02B4  0842               	movf	?_getADCValue,w
  4658  02B5  00CC               	movwf	___ftneg@f1
  4659  02B6  0843               	movf	?_getADCValue+1,w
  4660  02B7  00CD               	movwf	___ftneg@f1+1
  4661  02B8  0844               	movf	?_getADCValue+2,w
  4662  02B9  00CE               	movwf	___ftneg@f1+2
  4663  02BA  3197  27B3  3182   	fcall	___ftneg
  4664  02BD  0020               	movlb	0	; select bank0
  4665  02BE  084C               	movf	?___ftneg,w
  4666  02BF  0024               	movlb	4	; select bank4
  4667  02C0  00AC               	movwf	_loop$2058^(0+512)
  4668  02C1  0020               	movlb	0	; select bank0
  4669  02C2  084D               	movf	?___ftneg+1,w
  4670  02C3  0024               	movlb	4	; select bank4
  4671  02C4  00AD               	movwf	(_loop$2058+1)^(0+512)
  4672  02C5  0020               	movlb	0	; select bank0
  4673  02C6  084E               	movf	?___ftneg+2,w
  4674  02C7  0024               	movlb	4	; select bank4
  4675  02C8  00AE               	movwf	(_loop$2058+2)^(0+512)
  4676                           
  4677                           ;main.c: 120: float vt = (2.048 - getADCValue(0b111101)) / 2;
  4678  02C9  3000               	movlw	0
  4679  02CA  0020               	movlb	0	; select bank0
  4680  02CB  00B5               	movwf	___ftdiv@f2
  4681  02CC  3000               	movlw	0
  4682  02CD  00B6               	movwf	___ftdiv@f2+1
  4683  02CE  3040               	movlw	64
  4684  02CF  00B7               	movwf	___ftdiv@f2+2
  4685  02D0  3012               	movlw	18
  4686  02D1  00AB               	movwf	___ftadd@f1
  4687  02D2  3003               	movlw	3
  4688  02D3  00AC               	movwf	___ftadd@f1+1
  4689  02D4  3040               	movlw	64
  4690  02D5  00AD               	movwf	___ftadd@f1+2
  4691  02D6  0024               	movlb	4	; select bank4
  4692  02D7  082C               	movf	_loop$2058^(0+512),w
  4693  02D8  0020               	movlb	0	; select bank0
  4694  02D9  00AE               	movwf	___ftadd@f2
  4695  02DA  0024               	movlb	4	; select bank4
  4696  02DB  082D               	movf	(_loop$2058+1)^(0+512),w
  4697  02DC  0020               	movlb	0	; select bank0
  4698  02DD  00AF               	movwf	___ftadd@f2+1
  4699  02DE  0024               	movlb	4	; select bank4
  4700  02DF  082E               	movf	(_loop$2058+2)^(0+512),w
  4701  02E0  0020               	movlb	0	; select bank0
  4702  02E1  00B0               	movwf	___ftadd@f2+2
  4703  02E2  3184  2471  3182   	fcall	___ftadd
  4704  02E5  0020               	movlb	0	; select bank0
  4705  02E6  082B               	movf	?___ftadd,w
  4706  02E7  00B8               	movwf	___ftdiv@f1
  4707  02E8  082C               	movf	?___ftadd+1,w
  4708  02E9  00B9               	movwf	___ftdiv@f1+1
  4709  02EA  082D               	movf	?___ftadd+2,w
  4710  02EB  00BA               	movwf	___ftdiv@f1+2
  4711  02EC  318E  2604  3182   	fcall	___ftdiv
  4712  02EF  0020               	movlb	0	; select bank0
  4713  02F0  0835               	movf	?___ftdiv,w
  4714  02F1  0024               	movlb	4	; select bank4
  4715  02F2  00A0               	movwf	loop@vt^(0+512)
  4716  02F3  0020               	movlb	0	; select bank0
  4717  02F4  0836               	movf	?___ftdiv+1,w
  4718  02F5  0024               	movlb	4	; select bank4
  4719  02F6  00A1               	movwf	(loop@vt+1)^(0+512)
  4720  02F7  0020               	movlb	0	; select bank0
  4721  02F8  0837               	movf	?___ftdiv+2,w
  4722  02F9  0024               	movlb	4	; select bank4
  4723  02FA  00A2               	movwf	(loop@vt+2)^(0+512)
  4724                           
  4725                           ;main.c: 121: FVRCONbits.TSEN = 0;
  4726  02FB  0022               	movlb	2	; select bank2
  4727  02FC  1297               	bcf	23,5	;volatile
  4728                           
  4729                           ;main.c: 126: float ta = (vt / -0.00132) - (0.6063 / -0.00132) - 40;
  4730  02FD  30A9               	movlw	169
  4731  02FE  0020               	movlb	0	; select bank0
  4732  02FF  00AB               	movwf	___ftadd@f1
  4733  0300  30D1               	movlw	209
  4734  0301  00AC               	movwf	___ftadd@f1+1
  4735  0302  3043               	movlw	67
  4736  0303  00AD               	movwf	___ftadd@f1+2
  4737  0304  3004               	movlw	4
  4738  0305  00B5               	movwf	___ftdiv@f2
  4739  0306  30AD               	movlw	173
  4740  0307  00B6               	movwf	___ftdiv@f2+1
  4741  0308  30BA               	movlw	186
  4742  0309  00B7               	movwf	___ftdiv@f2+2
  4743  030A  0024               	movlb	4	; select bank4
  4744  030B  0820               	movf	loop@vt^(0+512),w
  4745  030C  0020               	movlb	0	; select bank0
  4746  030D  00B8               	movwf	___ftdiv@f1
  4747  030E  0024               	movlb	4	; select bank4
  4748  030F  0821               	movf	(loop@vt+1)^(0+512),w
  4749  0310  0020               	movlb	0	; select bank0
  4750  0311  00B9               	movwf	___ftdiv@f1+1
  4751  0312  0024               	movlb	4	; select bank4
  4752  0313  0822               	movf	(loop@vt+2)^(0+512),w
  4753  0314  0020               	movlb	0	; select bank0
  4754  0315  00BA               	movwf	___ftdiv@f1+2
  4755  0316  318E  2604  3182   	fcall	___ftdiv
  4756  0319  0020               	movlb	0	; select bank0
  4757  031A  0835               	movf	?___ftdiv,w
  4758  031B  00AE               	movwf	___ftadd@f2
  4759  031C  0836               	movf	?___ftdiv+1,w
  4760  031D  00AF               	movwf	___ftadd@f2+1
  4761  031E  0837               	movf	?___ftdiv+2,w
  4762  031F  00B0               	movwf	___ftadd@f2+2
  4763  0320  3184  2471  3182   	fcall	___ftadd
  4764  0323  0020               	movlb	0	; select bank0
  4765  0324  082B               	movf	?___ftadd,w
  4766  0325  0024               	movlb	4	; select bank4
  4767  0326  00A3               	movwf	loop@ta^(0+512)
  4768  0327  0020               	movlb	0	; select bank0
  4769  0328  082C               	movf	?___ftadd+1,w
  4770  0329  0024               	movlb	4	; select bank4
  4771  032A  00A4               	movwf	(loop@ta+1)^(0+512)
  4772  032B  0020               	movlb	0	; select bank0
  4773  032C  082D               	movf	?___ftadd+2,w
  4774  032D  0024               	movlb	4	; select bank4
  4775  032E  00A5               	movwf	(loop@ta+2)^(0+512)
  4776                           
  4777                           ;main.c: 128: sendMessage(&packet, "TEMP", ta);
  4778  032F  3030               	movlw	low loop@packet
  4779  0330  0021               	movlb	1	; select bank1
  4780  0331  00B1               	movwf	sendMessage@packet^(0+128)
  4781  0332  3002               	movlw	high loop@packet
  4782  0333  00B2               	movwf	(sendMessage@packet+1)^(0+128)
  4783  0334  3030               	movlw	low (STR_6| (0+32768))
  4784  0335  00B3               	movwf	sendMessage@topic^(0+128)
  4785  0336  3098               	movlw	high (STR_6| (0+32768))
  4786  0337  00B4               	movwf	(sendMessage@topic^(0+128)+1)
  4787  0338  0024               	movlb	4	; select bank4
  4788  0339  0823               	movf	loop@ta^(0+512),w
  4789  033A  0021               	movlb	1	; select bank1
  4790  033B  00B5               	movwf	sendMessage@value^(0+128)
  4791  033C  0024               	movlb	4	; select bank4
  4792  033D  0824               	movf	(loop@ta+1)^(0+512),w
  4793  033E  0021               	movlb	1	; select bank1
  4794  033F  00B6               	movwf	(sendMessage@value+1)^(0+128)
  4795  0340  0024               	movlb	4	; select bank4
  4796  0341  0825               	movf	(loop@ta+2)^(0+512),w
  4797  0342  0021               	movlb	1	; select bank1
  4798  0343  00B7               	movwf	(sendMessage@value+2)^(0+128)
  4799  0344  318C  24F7  3182   	fcall	_sendMessage
  4800                           
  4801                           ;main.c: 132: n_RF_SETUP_t rfSetup;;main.c: 133: rfSetup.byte = nrf24l01Send((unsigned) 
      +                          0b00000000 | (unsigned) 0x06, 0);
  4802  0347  3000               	movlw	0
  4803  0348  001E               	movwi fsr1++
  4804  0349  3006               	movlw	6
  4805  034A  3197  27ED  3182   	fcall	_nrf24l01Send
  4806  034D  00FF               	movwf	127
  4807  034E  087F               	movf	127,w
  4808  034F  0024               	movlb	4	; select bank4
  4809  0350  00AF               	movwf	loop@rfSetup^(0+512)
  4810                           
  4811                           ;main.c: 135: sendMessage(&packet, "RFPWR", rfSetup.RF_PWR);
  4812  0351  3030               	movlw	low loop@packet
  4813  0352  0021               	movlb	1	; select bank1
  4814  0353  00B1               	movwf	sendMessage@packet^(0+128)
  4815  0354  3002               	movlw	high loop@packet
  4816  0355  00B2               	movwf	(sendMessage@packet+1)^(0+128)
  4817  0356  301F               	movlw	low (STR_7| (0+32768))
  4818  0357  00B3               	movwf	sendMessage@topic^(0+128)
  4819  0358  3098               	movlw	high (STR_7| (0+32768))
  4820  0359  00B4               	movwf	(sendMessage@topic^(0+128)+1)
  4821  035A  0024               	movlb	4	; select bank4
  4822  035B  0C2F               	rrf	loop@rfSetup^(0+512),w
  4823  035C  3903               	andlw	3
  4824  035D  3188  2010  3182   	fcall	___lbtoft
  4825  0360  0870               	movf	?___lbtoft,w
  4826  0361  0021               	movlb	1	; select bank1
  4827  0362  00B5               	movwf	sendMessage@value^(0+128)
  4828  0363  0871               	movf	?___lbtoft+1,w
  4829  0364  00B6               	movwf	(sendMessage@value+1)^(0+128)
  4830  0365  0872               	movf	?___lbtoft+2,w
  4831  0366  00B7               	movwf	(sendMessage@value+2)^(0+128)
  4832  0367  318C  24F7         	fcall	_sendMessage
  4833  0369  0008               	return
  4834  036A                     __end_of_loop:	
  4835                           
  4836                           	psect	text10
  4837  0CF7                     __ptext10:	
  4838 ;; *************** function _sendMessage *****************
  4839 ;; Defined at:
  4840 ;;		line 77 in file "main.c"
  4841 ;; Parameters:    Size  Location     Type
  4842 ;;  packet          2   17[BANK1 ] PTR struct .
  4843 ;;		 -> main@packet(33), loop@packet(33), 
  4844 ;;  topic           2   19[BANK1 ] PTR const unsigned char 
  4845 ;;		 -> STR_10(6), STR_9(6), STR_7(6), STR_6(5), 
  4846 ;;		 -> STR_5(7), STR_4(5), STR_3(6), 
  4847 ;;  value           3   21[BANK1 ] float 
  4848 ;; Auto vars:     Size  Location     Type
  4849 ;;  ftoaStatus      2   24[BANK1 ] int 
  4850 ;; Return value:  Size  Location     Type
  4851 ;;                  1    wreg      void 
  4852 ;; Registers used:
  4853 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, btemp+0, btemp+1, btemp+8, btemp+9, btemp+10, btemp+11, pclath
      +, cstack
  4854 ;; Tracked objects:
  4855 ;;		On entry : 0/0
  4856 ;;		On exit  : 0/0
  4857 ;;		Unchanged: 0/0
  4858 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4859 ;;      Params:         0       0       7       0       0       0       0       0       0       0       0       0       
      +0       0
  4860 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  4861 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4862 ;;      Totals:         0       0       9       0       0       0       0       0       0       0       0       0       
      +0       0
  4863 ;;Total ram usage:        9 bytes
  4864 ;; Hardware stack levels used:    1
  4865 ;; Hardware stack levels required when called:   13
  4866 ;; This function calls:
  4867 ;;		_ftoa
  4868 ;;		_memset
  4869 ;;		_nrf24l01SendPacket
  4870 ;;		_sleepListren
  4871 ;;		_strcat
  4872 ;;		_strcpy
  4873 ;; This function is called by:
  4874 ;;		_loop
  4875 ;;		_main
  4876 ;; This function uses a non-reentrant model
  4877 ;;
  4878                           
  4879                           
  4880                           ;psect for function _sendMessage
  4881  0CF7                     _sendMessage:	
  4882                           
  4883                           ;main.c: 79: int ftoaStatus;;main.c: 81: memset(packet->Message, 0, sizeof(packet->Messa
      +                          ge));
  4884                           
  4885                           ;incstack = 0
  4886                           ; Regs used in _sendMessage: [wreg-fsr0h+fsr1l+fsr1h+status,2-btemp+1+btemp+8-btemp+11+p
      +                          clath+cstack]
  4887  0CF7  3020               	movlw	32
  4888  0CF8  001E               	movwi fsr1++
  4889  0CF9  3000               	movlw	0
  4890  0CFA  001E               	movwi fsr1++
  4891  0CFB  3000               	movlw	0
  4892  0CFC  001E               	movwi fsr1++
  4893  0CFD  001E               	movwi fsr1++
  4894  0CFE  0021               	movlb	1	; select bank1
  4895  0CFF  0831               	movf	sendMessage@packet^(0+128),w
  4896  0D00  3E01               	addlw	1
  4897  0D01  00FE               	movwf	126
  4898  0D02  3000               	movlw	0
  4899  0D03  3D32               	addwfc	(sendMessage@packet+1)^(0+128),w
  4900  0D04  00FF               	movwf	127
  4901  0D05  087E               	movf	126,w
  4902  0D06  001E               	movwi fsr1++
  4903  0D07  087F               	movf	127,w
  4904  0D08  001E               	movwi fsr1++
  4905  0D09  318A  228E  318C   	fcall	_memset
  4906                           
  4907                           ;main.c: 82: strcpy(packet->Message, romData->name);
  4908  0D0C  0021               	movlb	1	; select bank1
  4909  0D0D  0831               	movf	sendMessage@packet^(0+128),w
  4910  0D0E  3E01               	addlw	1
  4911  0D0F  00F0               	movwf	strcpy@to
  4912  0D10  3000               	movlw	0
  4913  0D11  3D32               	addwfc	(sendMessage@packet+1)^(0+128),w
  4914  0D12  00F1               	movwf	strcpy@to+1
  4915  0D13  0863               	movf	_romData^(0+128),w
  4916  0D14  3E01               	addlw	1
  4917  0D15  00F2               	movwf	strcpy@from
  4918  0D16  3001               	movlw	1
  4919  0D17  00F3               	movwf	strcpy@from+1
  4920  0D18  3188  202B  318C   	fcall	_strcpy
  4921                           
  4922                           ;main.c: 83: strcat(packet->Message, "/");
  4923  0D1B  0021               	movlb	1	; select bank1
  4924  0D1C  0831               	movf	sendMessage@packet^(0+128),w
  4925  0D1D  3E01               	addlw	1
  4926  0D1E  00AD               	movwf	strcat@to^(0+128)
  4927  0D1F  3000               	movlw	0
  4928  0D20  3D32               	addwfc	(sendMessage@packet+1)^(0+128),w
  4929  0D21  00AE               	movwf	(strcat@to+1)^(0+128)
  4930  0D22  303E               	movlw	low (STR_1| (0+32768))
  4931  0D23  00AF               	movwf	strcat@from^(0+128)
  4932  0D24  3098               	movlw	high (STR_1| (0+32768))
  4933  0D25  00B0               	movwf	(strcat@from^(0+128)+1)
  4934  0D26  318A  225F  318C   	fcall	_strcat
  4935                           
  4936                           ;main.c: 84: strcat(packet->Message, topic);
  4937  0D29  0021               	movlb	1	; select bank1
  4938  0D2A  0831               	movf	sendMessage@packet^(0+128),w
  4939  0D2B  3E01               	addlw	1
  4940  0D2C  00AD               	movwf	strcat@to^(0+128)
  4941  0D2D  3000               	movlw	0
  4942  0D2E  3D32               	addwfc	(sendMessage@packet+1)^(0+128),w
  4943  0D2F  00AE               	movwf	(strcat@to+1)^(0+128)
  4944  0D30  0834               	movf	(sendMessage@topic+1)^(0+128),w
  4945  0D31  00B0               	movwf	(strcat@from+1)^(0+128)
  4946  0D32  0833               	movf	sendMessage@topic^(0+128),w
  4947  0D33  00AF               	movwf	strcat@from^(0+128)
  4948  0D34  318A  225F  318C   	fcall	_strcat
  4949                           
  4950                           ;main.c: 85: strcat(packet->Message, "/");
  4951  0D37  0021               	movlb	1	; select bank1
  4952  0D38  0831               	movf	sendMessage@packet^(0+128),w
  4953  0D39  3E01               	addlw	1
  4954  0D3A  00AD               	movwf	strcat@to^(0+128)
  4955  0D3B  3000               	movlw	0
  4956  0D3C  3D32               	addwfc	(sendMessage@packet+1)^(0+128),w
  4957  0D3D  00AE               	movwf	(strcat@to+1)^(0+128)
  4958  0D3E  303E               	movlw	low (STR_1| (0+32768))
  4959  0D3F  00AF               	movwf	strcat@from^(0+128)
  4960  0D40  3098               	movlw	high (STR_1| (0+32768))
  4961  0D41  00B0               	movwf	(strcat@from^(0+128)+1)
  4962  0D42  318A  225F  318C   	fcall	_strcat
  4963                           
  4964                           ;main.c: 86: strcat(packet->Message, ftoa(value, &ftoaStatus));
  4965  0D45  0021               	movlb	1	; select bank1
  4966  0D46  0831               	movf	sendMessage@packet^(0+128),w
  4967  0D47  3E01               	addlw	1
  4968  0D48  00AD               	movwf	strcat@to^(0+128)
  4969  0D49  3000               	movlw	0
  4970  0D4A  3D32               	addwfc	(sendMessage@packet+1)^(0+128),w
  4971  0D4B  00AE               	movwf	(strcat@to+1)^(0+128)
  4972  0D4C  0835               	movf	sendMessage@value^(0+128),w
  4973  0D4D  00A0               	movwf	ftoa@f^(0+128)
  4974  0D4E  0836               	movf	(sendMessage@value+1)^(0+128),w
  4975  0D4F  00A1               	movwf	(ftoa@f+1)^(0+128)
  4976  0D50  0837               	movf	(sendMessage@value+2)^(0+128),w
  4977  0D51  00A2               	movwf	(ftoa@f+2)^(0+128)
  4978  0D52  30B8               	movlw	(low (sendMessage@ftoaStatus| 0))& (0+255)
  4979  0D53  00FF               	movwf	127
  4980  0D54  087F               	movf	127,w
  4981  0D55  00A3               	movwf	ftoa@status^(0+128)
  4982  0D56  3185  2567  318C   	fcall	_ftoa
  4983  0D59  0021               	movlb	1	; select bank1
  4984  0D5A  00AF               	movwf	strcat@from^(0+128)
  4985  0D5B  3001               	movlw	1
  4986  0D5C  00B0               	movwf	(strcat@from+1)^(0+128)
  4987  0D5D  318A  225F  318C   	fcall	_strcat
  4988                           
  4989                           ;main.c: 88: packet->packetData.byte = 0;
  4990  0D60  0021               	movlb	1	; select bank1
  4991  0D61  0831               	movf	sendMessage@packet^(0+128),w
  4992  0D62  0084               	movwf	4
  4993  0D63  0832               	movf	(sendMessage@packet+1)^(0+128),w
  4994  0D64  0085               	movwf	5
  4995  0D65  0180               	clrf	0
  4996                           
  4997                           ;main.c: 89: packet->packetData.ACKRequest = 1;
  4998  0D66  0831               	movf	sendMessage@packet^(0+128),w
  4999  0D67  0084               	movwf	4
  5000  0D68  0832               	movf	(sendMessage@packet+1)^(0+128),w
  5001  0D69  0085               	movwf	5
  5002  0D6A  1500               	bsf	0,2
  5003                           
  5004                           ;main.c: 91: nrf24l01SendPacket(packet);
  5005  0D6B  0832               	movf	(sendMessage@packet+1)^(0+128),w
  5006  0D6C  0020               	movlb	0	; select bank0
  5007  0D6D  00A9               	movwf	nrf24l01SendPacket@txPacket+1
  5008  0D6E  0021               	movlb	1	; select bank1
  5009  0D6F  0831               	movf	sendMessage@packet^(0+128),w
  5010  0D70  0020               	movlb	0	; select bank0
  5011  0D71  00A8               	movwf	nrf24l01SendPacket@txPacket
  5012  0D72  318A  2230  318C   	fcall	_nrf24l01SendPacket
  5013                           
  5014                           ;main.c: 93: sleepListren(2);
  5015  0D75  3002               	movlw	2
  5016  0D76  0020               	movlb	0	; select bank0
  5017  0D77  00A6               	movwf	sleepListren@seconds
  5018  0D78  3000               	movlw	0
  5019  0D79  00A7               	movwf	sleepListren@seconds+1
  5020  0D7A  3189  211C         	fcall	_sleepListren
  5021  0D7C  0008               	return
  5022  0D7D                     __end_of_sendMessage:	
  5023                           
  5024                           	psect	text11
  5025  0A5F                     __ptext11:	
  5026 ;; *************** function _strcat *****************
  5027 ;; Defined at:
  5028 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\strcat.c"
  5029 ;; Parameters:    Size  Location     Type
  5030 ;;  to              2   13[BANK1 ] PTR unsigned char 
  5031 ;;		 -> main@packet(33), loop@packet(33), 
  5032 ;;  from            2   15[BANK1 ] PTR const unsigned char 
  5033 ;;		 -> ftoa@buf(17), STR_10(6), STR_9(6), STR_7(6), 
  5034 ;;		 -> STR_6(5), STR_5(7), STR_4(5), STR_3(6), 
  5035 ;;		 -> STR_2(2), STR_1(2), 
  5036 ;; Auto vars:     Size  Location     Type
  5037 ;;  cp              2   66[BANK0 ] PTR unsigned char 
  5038 ;;		 -> main@packet(33), loop@packet(33), 
  5039 ;; Return value:  Size  Location     Type
  5040 ;;                  2   13[BANK1 ] PTR unsigned char 
  5041 ;; Registers used:
  5042 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+11, pclath
  5043 ;; Tracked objects:
  5044 ;;		On entry : 0/0
  5045 ;;		On exit  : 0/0
  5046 ;;		Unchanged: 0/0
  5047 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5048 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  5049 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5050 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5051 ;;      Totals:         0       2       4       0       0       0       0       0       0       0       0       0       
      +0       0
  5052 ;;Total ram usage:        6 bytes
  5053 ;; Hardware stack levels used:    1
  5054 ;; Hardware stack levels required when called:    7
  5055 ;; This function calls:
  5056 ;;		Nothing
  5057 ;; This function is called by:
  5058 ;;		_sendMessage
  5059 ;; This function uses a non-reentrant model
  5060 ;;
  5061                           
  5062                           
  5063                           ;psect for function _strcat
  5064  0A5F                     _strcat:	
  5065                           
  5066                           ;incstack = 0
  5067                           ; Regs used in _strcat: [wreg-fsr0h+status,2+status,0+btemp+11+pclath]
  5068  0A5F  0021               	movlb	1	; select bank1
  5069  0A60  082E               	movf	(strcat@to+1)^(0+128),w
  5070  0A61  0020               	movlb	0	; select bank0
  5071  0A62  00E3               	movwf	strcat@cp+1
  5072  0A63  0021               	movlb	1	; select bank1
  5073  0A64  082D               	movf	strcat@to^(0+128),w
  5074  0A65  0020               	movlb	0	; select bank0
  5075  0A66  00E2               	movwf	strcat@cp
  5076  0A67                     l4143:	
  5077  0A67  0862               	movf	strcat@cp,w
  5078  0A68  0084               	movwf	4
  5079  0A69  0863               	movf	strcat@cp+1,w
  5080  0A6A  0085               	movwf	5
  5081  0A6B  0800               	movf	0,w
  5082  0A6C  1903               	btfsc	3,2
  5083  0A6D  2A7C               	goto	l4147
  5084  0A6E  3001               	movlw	1
  5085  0A6F  07E2               	addwf	strcat@cp,f
  5086  0A70  3000               	movlw	0
  5087  0A71  3DE3               	addwfc	strcat@cp+1,f
  5088  0A72  2A67               	goto	l4143
  5089  0A73                     l4145:	
  5090  0A73  3001               	movlw	1
  5091  0A74  07E2               	addwf	strcat@cp,f
  5092  0A75  3000               	movlw	0
  5093  0A76  3DE3               	addwfc	strcat@cp+1,f
  5094  0A77  3001               	movlw	1
  5095  0A78  0021               	movlb	1	; select bank1
  5096  0A79  07AF               	addwf	strcat@from^(0+128),f
  5097  0A7A  3000               	movlw	0
  5098  0A7B  3DB0               	addwfc	(strcat@from+1)^(0+128),f
  5099  0A7C                     l4147:	
  5100  0A7C  0021               	movlb	1	; select bank1
  5101  0A7D  082F               	movf	strcat@from^(0+128),w
  5102  0A7E  0084               	movwf	4
  5103  0A7F  0830               	movf	(strcat@from+1)^(0+128),w
  5104  0A80  0085               	movwf	5
  5105  0A81  0800               	movf	0,w	;code access
  5106  0A82  00FF               	movwf	127
  5107  0A83  0020               	movlb	0	; select bank0
  5108  0A84  0862               	movf	strcat@cp,w
  5109  0A85  0084               	movwf	4
  5110  0A86  0863               	movf	strcat@cp+1,w
  5111  0A87  0085               	movwf	5
  5112  0A88  087F               	movf	127,w
  5113  0A89  0080               	movwf	0
  5114  0A8A  0800               	movf	0,w
  5115  0A8B  1903               	btfsc	3,2
  5116  0A8C  0008               	return
  5117  0A8D  2A73               	goto	l4145
  5118  0A8E                     __end_of_strcat:	
  5119                           ;	Return value of _strcat is never used
  5120                           
  5121                           
  5122                           	psect	text12
  5123  091C                     __ptext12:	
  5124 ;; *************** function _sleepListren *****************
  5125 ;; Defined at:
  5126 ;;		line 64 in file "main.c"
  5127 ;; Parameters:    Size  Location     Type
  5128 ;;  seconds         2    6[BANK0 ] unsigned int 
  5129 ;; Auto vars:     Size  Location     Type
  5130 ;;		None
  5131 ;; Return value:  Size  Location     Type
  5132 ;;                  1    wreg      void 
  5133 ;; Registers used:
  5134 ;;		wreg, fsr1l, fsr1h, status,2, status,0, btemp+0, btemp+10, btemp+11, pclath, cstack
  5135 ;; Tracked objects:
  5136 ;;		On entry : 0/0
  5137 ;;		On exit  : 0/0
  5138 ;;		Unchanged: 0/0
  5139 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5140 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5141 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5142 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5143 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5144 ;;Total ram usage:        2 bytes
  5145 ;; Hardware stack levels used:    1
  5146 ;; Hardware stack levels required when called:   10
  5147 ;; This function calls:
  5148 ;;		_nrf24l01SetRXMode
  5149 ;;		_sleepMs
  5150 ;; This function is called by:
  5151 ;;		_sendMessage
  5152 ;; This function uses a non-reentrant model
  5153 ;;
  5154                           
  5155                           
  5156                           ;psect for function _sleepListren
  5157  091C                     _sleepListren:	
  5158  091C                     l4129:	
  5159                           ;main.c: 66: while(seconds--){
  5160                           
  5161                           ;incstack = 0
  5162                           ; Regs used in _sleepListren: [wreg+fsr1l+fsr1h+status,2-btemp+0+btemp+10+btemp+11+pclat
      +                          h+cstack]
  5163                           
  5164  091C  3001               	movlw	1
  5165  091D  0020               	movlb	0	; select bank0
  5166  091E  02A6               	subwf	sleepListren@seconds,f
  5167  091F  3000               	movlw	0
  5168  0920  3BA7               	subwfb	sleepListren@seconds+1,f
  5169  0921  0A26               	incf	sleepListren@seconds,w
  5170  0922  1903               	btfsc	3,2
  5171  0923  0A27               	incf	sleepListren@seconds+1,w
  5172  0924  1903               	btfsc	3,2
  5173  0925  0008               	return
  5174                           
  5175                           ;main.c: 69: nrf24l01SetRXMode(1);
  5176  0926  3001               	movlw	1
  5177  0927  318A  22F4  3189   	fcall	_nrf24l01SetRXMode
  5178                           
  5179                           ;main.c: 70: sleepMs(100);
  5180  092A  3064               	movlw	100
  5181  092B  00F0               	movwf	sleepMs@milliseconds
  5182  092C  3000               	movlw	0
  5183  092D  00F1               	movwf	sleepMs@milliseconds+1
  5184  092E  3189  21D7  3189   	fcall	_sleepMs
  5185                           
  5186                           ;main.c: 72: nrf24l01SetRXMode(1);
  5187  0931  3001               	movlw	1
  5188  0932  318A  22F4  3189   	fcall	_nrf24l01SetRXMode
  5189                           
  5190                           ;main.c: 73: sleepMs(900);
  5191  0935  3084               	movlw	132
  5192  0936  00F0               	movwf	sleepMs@milliseconds
  5193  0937  3003               	movlw	3
  5194  0938  00F1               	movwf	sleepMs@milliseconds+1
  5195  0939  3189  21D7  3189   	fcall	_sleepMs
  5196  093C  291C               	goto	l4129
  5197  093D                     __end_of_sleepListren:	
  5198                           
  5199                           	psect	text13
  5200  0A30                     __ptext13:	
  5201 ;; *************** function _nrf24l01SendPacket *****************
  5202 ;; Defined at:
  5203 ;;		line 177 in file "nrf24l01.c"
  5204 ;; Parameters:    Size  Location     Type
  5205 ;;  txPacket        2    8[BANK0 ] PTR struct .
  5206 ;;		 -> main@packet(33), loop@packet(33), 
  5207 ;; Auto vars:     Size  Location     Type
  5208 ;;		None
  5209 ;; Return value:  Size  Location     Type
  5210 ;;                  1    wreg      void 
  5211 ;; Registers used:
  5212 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, btemp+0, btemp+1, btemp+8, btemp+9, btemp+10, btemp+11, pclath
      +, cstack
  5213 ;; Tracked objects:
  5214 ;;		On entry : 0/0
  5215 ;;		On exit  : 0/0
  5216 ;;		Unchanged: 0/0
  5217 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5218 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5219 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5220 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5221 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5222 ;;Total ram usage:        2 bytes
  5223 ;; Hardware stack levels used:    1
  5224 ;; Hardware stack levels required when called:   12
  5225 ;; This function calls:
  5226 ;;		_nrf24l01Service
  5227 ;;		_sleepMs
  5228 ;;		_strcpy
  5229 ;; This function is called by:
  5230 ;;		_sendMessage
  5231 ;; This function uses a non-reentrant model
  5232 ;;
  5233                           
  5234                           
  5235                           ;psect for function _nrf24l01SendPacket
  5236  0A30                     _nrf24l01SendPacket:	
  5237                           
  5238                           ;nrf24l01.c: 179: strcpy(TXPacket.Message, txPacket->Message);
  5239                           
  5240                           ;incstack = 0
  5241                           ; Regs used in _nrf24l01SendPacket: [wreg-fsr0h+fsr1l+fsr1h+status,2-btemp+1+btemp+8-bte
      +                          mp+11+pclath+cstack]
  5242  0A30  30C2               	movlw	low (_TXPacket+1)
  5243  0A31  00F0               	movwf	strcpy@to
  5244  0A32  3001               	movlw	high (_TXPacket+1)
  5245  0A33  00F1               	movwf	strcpy@to+1
  5246  0A34  0020               	movlb	0	; select bank0
  5247  0A35  0828               	movf	nrf24l01SendPacket@txPacket,w
  5248  0A36  3E01               	addlw	1
  5249  0A37  00FE               	movwf	126
  5250  0A38  3000               	movlw	0
  5251  0A39  3D29               	addwfc	nrf24l01SendPacket@txPacket+1,w
  5252  0A3A  00FF               	movwf	127
  5253  0A3B  087E               	movf	126,w
  5254  0A3C  00F2               	movwf	strcpy@from
  5255  0A3D  087F               	movf	127,w
  5256  0A3E  00F3               	movwf	strcpy@from+1
  5257  0A3F  3188  202B  318A   	fcall	_strcpy
  5258                           
  5259                           ;nrf24l01.c: 180: TXPacket.packetData = txPacket->packetData;
  5260  0A42  0020               	movlb	0	; select bank0
  5261  0A43  0828               	movf	nrf24l01SendPacket@txPacket,w
  5262  0A44  0084               	movwf	4
  5263  0A45  0829               	movf	nrf24l01SendPacket@txPacket+1,w
  5264  0A46  0085               	movwf	5
  5265  0A47  0800               	movf	0,w
  5266  0A48  00FF               	movwf	127
  5267  0A49  087F               	movf	127,w
  5268  0A4A  0023               	movlb	3	; select bank3
  5269  0A4B  00C1               	movwf	_TXPacket^(0+384)
  5270                           
  5271                           ;nrf24l01.c: 182: status.TX = 1;
  5272  0A4C  3001               	movlw	1
  5273  0A4D  00FF               	movwf	127
  5274  0A4E  087F               	movf	127,w
  5275  0A4F  0020               	movlb	0	; select bank0
  5276  0A50  00E4               	movwf	_status	;volatile
  5277  0A51                     l4181:	
  5278                           ;nrf24l01.c: 184: while (status.TX != 0){
  5279                           
  5280  0A51  0864               	movf	_status,w	;volatile
  5281  0A52  1903               	btfsc	3,2
  5282  0A53  0008               	return
  5283                           
  5284                           ;nrf24l01.c: 185: sleepMs(10);
  5285  0A54  300A               	movlw	10
  5286  0A55  00F0               	movwf	sleepMs@milliseconds
  5287  0A56  3000               	movlw	0
  5288  0A57  00F1               	movwf	sleepMs@milliseconds+1
  5289  0A58  3189  21D7  318A   	fcall	_sleepMs
  5290                           
  5291                           ;nrf24l01.c: 186: nrf24l01Service();
  5292  0A5B  318F  2756  318A   	fcall	_nrf24l01Service
  5293  0A5E  2A51               	goto	l4181
  5294  0A5F                     __end_of_nrf24l01SendPacket:	
  5295                           
  5296                           	psect	text14
  5297  082B                     __ptext14:	
  5298 ;; *************** function _strcpy *****************
  5299 ;; Defined at:
  5300 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\strcpy.c"
  5301 ;; Parameters:    Size  Location     Type
  5302 ;;  to              2    0[COMMON] PTR unsigned char 
  5303 ;;		 -> TXPacket(33), main@packet(33), loop@packet(33), romDataMap(28), 
  5304 ;;  from            2    2[COMMON] PTR const unsigned char 
  5305 ;;		 -> romDataMap.name(16), packet.Message(32), packet.Message(32), main@packet(33), 
  5306 ;;		 -> STR_8(4), loop@packet(33), romDataMap(28), 
  5307 ;; Auto vars:     Size  Location     Type
  5308 ;;  cp              2    6[BANK0 ] PTR unsigned char 
  5309 ;;		 -> TXPacket(33), main@packet(33), loop@packet(33), romDataMap(28), 
  5310 ;; Return value:  Size  Location     Type
  5311 ;;                  2    0[COMMON] PTR unsigned char 
  5312 ;; Registers used:
  5313 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+11, pclath
  5314 ;; Tracked objects:
  5315 ;;		On entry : 0/0
  5316 ;;		On exit  : 0/0
  5317 ;;		Unchanged: 0/0
  5318 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5319 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5320 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5321 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5322 ;;      Totals:         4       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5323 ;;Total ram usage:        6 bytes
  5324 ;; Hardware stack levels used:    1
  5325 ;; Hardware stack levels required when called:    7
  5326 ;; This function calls:
  5327 ;;		Nothing
  5328 ;; This function is called by:
  5329 ;;		_sendMessage
  5330 ;;		_main
  5331 ;;		_nrf24l01SendPacket
  5332 ;; This function uses a non-reentrant model
  5333 ;;
  5334                           
  5335                           
  5336                           ;psect for function _strcpy
  5337  082B                     _strcpy:	
  5338                           
  5339                           ;incstack = 0
  5340                           ; Regs used in _strcpy: [wreg-fsr0h+status,2+status,0+btemp+11+pclath]
  5341  082B  0871               	movf	strcpy@to+1,w
  5342  082C  0020               	movlb	0	; select bank0
  5343  082D  00A7               	movwf	strcpy@cp+1
  5344  082E  0870               	movf	strcpy@to,w
  5345  082F  00A6               	movwf	strcpy@cp
  5346  0830                     l3841:	
  5347  0830  0872               	movf	strcpy@from,w
  5348  0831  0084               	movwf	4
  5349  0832  0873               	movf	strcpy@from+1,w
  5350  0833  0085               	movwf	5
  5351  0834  0800               	movf	0,w	;code access
  5352  0835  00FF               	movwf	127
  5353  0836  0826               	movf	strcpy@cp,w
  5354  0837  0084               	movwf	4
  5355  0838  0827               	movf	strcpy@cp+1,w
  5356  0839  0085               	movwf	5
  5357  083A  087F               	movf	127,w
  5358  083B  0080               	movwf	0
  5359  083C  0800               	movf	0,w
  5360  083D  1903               	btfsc	3,2
  5361  083E  0008               	return
  5362  083F  3001               	movlw	1
  5363  0840  07A6               	addwf	strcpy@cp,f
  5364  0841  3000               	movlw	0
  5365  0842  3DA7               	addwfc	strcpy@cp+1,f
  5366  0843  3001               	movlw	1
  5367  0844  07F2               	addwf	strcpy@from,f
  5368  0845  3000               	movlw	0
  5369  0846  3DF3               	addwfc	strcpy@from+1,f
  5370  0847  2830               	goto	l3841
  5371  0848                     __end_of_strcpy:	
  5372                           ;	Return value of _strcpy is never used
  5373                           
  5374                           
  5375                           	psect	text15
  5376  0F56                     __ptext15:	
  5377 ;; *************** function _nrf24l01Service *****************
  5378 ;; Defined at:
  5379 ;;		line 268 in file "nrf24l01.c"
  5380 ;; Parameters:    Size  Location     Type
  5381 ;;		None
  5382 ;; Auto vars:     Size  Location     Type
  5383 ;;  width           1  [STACK] unsigned char 
  5384 ;;  i               1  [STACK] unsigned char 
  5385 ;; Return value:  Size  Location     Type
  5386 ;;                  1    wreg      void 
  5387 ;; Registers used:
  5388 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, btemp+0, btemp+1, btemp+8, btemp+9, btemp+11, pclath
  5389 ;; Tracked objects:
  5390 ;;		On entry : 0/0
  5391 ;;		On exit  : 1F/0
  5392 ;;		Unchanged: 0/0
  5393 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5394 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5395 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5396 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5397 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5398 ;;Total ram usage:        0 bytes
  5399 ;; Hardware stack levels used:    1
  5400 ;; Hardware stack levels required when called:   11
  5401 ;; This function calls:
  5402 ;;		_memset
  5403 ;;		_nrf24l01SPIEnd
  5404 ;;		_nrf24l01SPISend
  5405 ;;		_nrf24l01SPIStart
  5406 ;;		_nrf24l01Send
  5407 ;;		_nrf24l01SendTXBuffer
  5408 ;;		_nrf24l01SetRXMode
  5409 ;;		_strcmp
  5410 ;; This function is called by:
  5411 ;;		_nrf24l01SendPacket
  5412 ;;		_nrf24l01ISR
  5413 ;; This function uses a reentrant model
  5414 ;;
  5415                           
  5416                           
  5417                           ;psect for function _nrf24l01Service
  5418  0F56                     _nrf24l01Service:	
  5419                           
  5420                           ; autosize = 2, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 0, argsize = 0 var
      +                          gsize = 0, retsize = 0 argfudge = 0
  5421  0F56  3142               	addfsr 1,2
  5422                           
  5423                           ;nrf24l01.c: 270: unsigned char i;;nrf24l01.c: 272: if (status.TX == 1){
  5424                           
  5425                           ;incstack = 0
  5426 ;; hardware stack exceeded
  5427                           ; Regs used in _nrf24l01Service: [wreg-fsr0h+fsr1l+fsr1h+status,2-btemp+1+btemp+8+btemp+
      +                          9+btemp+11+pclath]
  5428  0F57  0020               	movlb	0	; select bank0
  5429  0F58  0364               	decf	_status,w	;volatile
  5430  0F59  1D03               	btfss	3,2
  5431  0F5A  2F61               	goto	l4397
  5432                           
  5433                           ;nrf24l01.c: 275: status.TX = 2;
  5434  0F5B  3002               	movlw	2
  5435  0F5C  00E4               	movwf	_status	;volatile
  5436                           
  5437                           ;nrf24l01.c: 276: nrf24l01SendTXBuffer(&TXPacket);
  5438  0F5D  30C1               	movlw	(low (_TXPacket| (0+256)))& (0+255)
  5439  0F5E  318B  23F8  318F   	fcall	_nrf24l01SendTXBuffer
  5440  0F61                     l4397:	
  5441                           
  5442                           ;nrf24l01.c: 277: };nrf24l01.c: 279: if (status.TX == 3){
  5443  0F61  3003               	movlw	3
  5444  0F62  0664               	xorwf	_status,w	;volatile
  5445  0F63  1D03               	btfss	3,2
  5446  0F64  2F6B               	goto	l4403
  5447                           
  5448                           ;nrf24l01.c: 280: if (!status.retryCount--){
  5449  0F65  03E8               	decf	_status+4,f	;volatile
  5450  0F66  0A68               	incf	_status+4,w	;volatile
  5451  0F67  1D03               	btfss	3,2
  5452  0F68  2F6B               	goto	l4403
  5453                           
  5454                           ;nrf24l01.c: 281: status.TX = 1;
  5455  0F69  3001               	movlw	1
  5456  0F6A  00E4               	movwf	_status	;volatile
  5457  0F6B                     l4403:	
  5458                           
  5459                           ;nrf24l01.c: 282: };nrf24l01.c: 283: };nrf24l01.c: 285: if (status.RX == 1){
  5460  0F6B  0365               	decf	_status+1,w	;volatile
  5461  0F6C  1D03               	btfss	3,2
  5462  0F6D  2FCF               	goto	l4439
  5463                           
  5464                           ;nrf24l01.c: 288: memset(RXPacket.Message, 0 ,sizeof(RXPacket.Message));
  5465  0F6E  3020               	movlw	32
  5466  0F6F  001E               	movwi fsr1++
  5467  0F70  3000               	movlw	0
  5468  0F71  001E               	movwi fsr1++
  5469  0F72  3000               	movlw	0
  5470  0F73  001E               	movwi fsr1++
  5471  0F74  001E               	movwi fsr1++
  5472  0F75  30A1               	movlw	(low ((_RXPacket| (0+256)+1)))& (0+255)
  5473  0F76  001E               	movwi fsr1++
  5474  0F77  3001               	movlw	1
  5475  0F78  001E               	movwi fsr1++
  5476  0F79  318A  228E  318F   	fcall	_memset
  5477                           
  5478                           ;nrf24l01.c: 289: RXPacket.packetData.byte = 0x00;
  5479  0F7C  0023               	movlb	3	; select bank3
  5480  0F7D  01A0               	clrf	_RXPacket^(0+384)
  5481                           
  5482                           ;nrf24l01.c: 292: unsigned char width = nrf24l01Send((unsigned) 0b01100000, 0);
  5483  0F7E  3000               	movlw	0
  5484  0F7F  001E               	movwi fsr1++
  5485  0F80  3060               	movlw	96
  5486  0F81  3197  27ED  318F   	fcall	_nrf24l01Send
  5487                           
  5488                           ;stkvar	nrf24l01Service@width @ sp[(-2)+0]
  5489  0F84  3FFE               	movwi [-2]fsr1
  5490                           
  5491                           ;nrf24l01.c: 295: PORTAbits.RA0 = 0;
  5492  0F85  0020               	movlb	0	; select bank0
  5493  0F86  100C               	bcf	12,0	;volatile
  5494                           
  5495                           ;nrf24l01.c: 298: nrf24l01SPIStart();
  5496  0F87  3197  27C5  318F   	fcall	_nrf24l01SPIStart
  5497                           
  5498                           ;nrf24l01.c: 301: nrf24l01SPISend((unsigned) 0b01100001);
  5499  0F8A  3061               	movlw	97
  5500  0F8B  3188  2001  318F   	fcall	_nrf24l01SPISend
  5501                           
  5502                           ;nrf24l01.c: 304: RXPacket.packetData.byte = nrf24l01SPISend(0);
  5503  0F8E  3000               	movlw	0
  5504  0F8F  3188  2001  318F   	fcall	_nrf24l01SPISend
  5505  0F92  0023               	movlb	3	; select bank3
  5506  0F93  00A0               	movwf	_RXPacket^(0+384)
  5507                           
  5508                           ;nrf24l01.c: 305: width--;
  5509                           ;stkvar	nrf24l01Service@width @ sp[(-2)+0]
  5510  0F94  3F7E               	moviw [-2]fsr1
  5511  0F95  00F4               	movwf	116
  5512  0F96  3001               	movlw	1
  5513  0F97  0274               	subwf	116,w
  5514  0F98  3FFE               	movwi [-2]fsr1
  5515                           
  5516                           ;nrf24l01.c: 307: for (i = 0; i < width; i++) {
  5517                           ;stkvar	nrf24l01Service@i @ sp[(-2)+1]
  5518  0F99  3000               	movlw	0
  5519  0F9A  3FFF               	movwi [-1]fsr1
  5520  0F9B                     l4427:	
  5521                           
  5522                           ;stkvar	nrf24l01Service@i @ sp[(-2)+1]
  5523  0F9B  3F7F               	moviw [-1]fsr1
  5524  0F9C  00FF               	movwf	127
  5525                           
  5526                           ;stkvar	nrf24l01Service@width @ sp[(-2)+0]
  5527  0F9D  3F7E               	moviw [-2]fsr1
  5528  0F9E  027F               	subwf	127,w
  5529  0F9F  1803               	btfsc	3,0
  5530  0FA0  2FB0               	goto	l4429
  5531                           
  5532                           ;nrf24l01.c: 309: RXPacket.Message[i] = nrf24l01SPISend(0);
  5533                           ;stkvar	nrf24l01Service@i @ sp[(-2)+1]
  5534  0FA1  3F7F               	moviw [-1]fsr1
  5535  0FA2  3EA1               	addlw	(low ((_RXPacket| (0+256)+1)))& (0+255)
  5536  0FA3  0084               	movwf	4
  5537  0FA4  3001               	movlw	1	; select bank3/4
  5538  0FA5  3001               	movlw	1	; select bank3/4
  5539  0FA6  0085               	movwf	5
  5540  0FA7  3000               	movlw	0
  5541  0FA8  3188  2001  318F   	fcall	_nrf24l01SPISend
  5542  0FAB  0080               	movwf	0
  5543                           
  5544                           ;stkvar	nrf24l01Service@i @ sp[(-2)+1]
  5545  0FAC  3F7F               	moviw [-1]fsr1
  5546  0FAD  3E01               	addlw	1
  5547  0FAE  3FFF               	movwi [-1]fsr1
  5548  0FAF  2F9B               	goto	l4427
  5549  0FB0                     l4429:	
  5550                           
  5551                           ;nrf24l01.c: 310: };nrf24l01.c: 313: nrf24l01SPIEnd();
  5552  0FB0  3197  27BC  318F   	fcall	_nrf24l01SPIEnd
  5553                           
  5554                           ;nrf24l01.c: 316: PORTAbits.RA0 = 1;
  5555  0FB3  0020               	movlb	0	; select bank0
  5556  0FB4  140C               	bsf	12,0	;volatile
  5557                           
  5558                           ;nrf24l01.c: 319: RXPacket.packetData.Pipe = status.statusRegister.RX_P_NO;
  5559  0FB5  0C66               	rrf	_status+2,w	;volatile
  5560  0FB6  3907               	andlw	7
  5561  0FB7  00FF               	movwf	127
  5562  0FB8  0EFF               	swapf	127,f
  5563  0FB9  0023               	movlb	3	; select bank3
  5564  0FBA  0820               	movf	_RXPacket^(0+384),w
  5565  0FBB  067F               	xorwf	127,w
  5566  0FBC  398F               	andlw	-113
  5567  0FBD  067F               	xorwf	127,w
  5568  0FBE  00A0               	movwf	_RXPacket^(0+384)
  5569                           
  5570                           ;nrf24l01.c: 322: RXPacket.packetData.RPD = nrf24l01Send((unsigned) 0b00000000 | (unsign
      +                          ed) 0x09, 0);
  5571  0FBF  3000               	movlw	0
  5572  0FC0  001E               	movwi fsr1++
  5573  0FC1  3009               	movlw	9
  5574  0FC2  3197  27ED  318F   	fcall	_nrf24l01Send
  5575  0FC5  00FF               	movwf	127
  5576  0FC6  0023               	movlb	3	; select bank3
  5577  0FC7  0820               	movf	_RXPacket^(0+384),w
  5578  0FC8  067F               	xorwf	127,w
  5579  0FC9  39FE               	andlw	-2
  5580  0FCA  067F               	xorwf	127,w
  5581  0FCB  00A0               	movwf	_RXPacket^(0+384)
  5582                           
  5583                           ;nrf24l01.c: 324: status.RX = 2;
  5584  0FCC  3002               	movlw	2
  5585  0FCD  0020               	movlb	0	; select bank0
  5586  0FCE  00E5               	movwf	_status+1	;volatile
  5587  0FCF                     l4439:	
  5588                           
  5589                           ;nrf24l01.c: 325: };nrf24l01.c: 327: if (status.RX == 2){
  5590  0FCF  3002               	movlw	2
  5591  0FD0  0665               	xorwf	_status+1,w	;volatile
  5592  0FD1  1D03               	btfss	3,2
  5593  0FD2  2FEC               	goto	l4451
  5594                           
  5595                           ;nrf24l01.c: 330: if (RXPacket.packetData.IsACK){
  5596  0FD3  0023               	movlb	3	; select bank3
  5597  0FD4  1DA0               	btfss	_RXPacket^(0+384),3
  5598  0FD5  2FEC               	goto	l4451
  5599                           
  5600                           ;nrf24l01.c: 332: if (status.TX == 3){
  5601  0FD6  3003               	movlw	3
  5602  0FD7  0020               	movlb	0	; select bank0
  5603  0FD8  0664               	xorwf	_status,w	;volatile
  5604  0FD9  1D03               	btfss	3,2
  5605  0FDA  2FEC               	goto	l4451
  5606                           
  5607                           ;nrf24l01.c: 334: if (strcmp(RXPacket.Message, TXPacket.Message) == 0){
  5608  0FDB  30C2               	movlw	(low ((_TXPacket| (0+256)+1)))& (0+255)
  5609  0FDC  001E               	movwi fsr1++
  5610  0FDD  30A1               	movlw	(low ((_RXPacket| (0+256)+1)))& (0+255)
  5611  0FDE  3189  2184  318F   	fcall	_strcmp
  5612  0FE1  0874               	movf	116,w
  5613  0FE2  0475               	iorwf	117,w
  5614  0FE3  1D03               	btfss	3,2
  5615  0FE4  2FEC               	goto	l4451
  5616                           
  5617                           ;nrf24l01.c: 335: status.TX = 0;
  5618  0FE5  0020               	movlb	0	; select bank0
  5619  0FE6  01E4               	clrf	_status	;volatile
  5620                           
  5621                           ;nrf24l01.c: 336: status.RX = 0;
  5622  0FE7  01E5               	clrf	_status+1	;volatile
  5623                           
  5624                           ;nrf24l01.c: 338: nrf24l01SetRXMode(0);
  5625  0FE8  3000               	movlw	0
  5626  0FE9  318A  22F4  318F   	fcall	_nrf24l01SetRXMode
  5627  0FEC                     l4451:	
  5628                           
  5629                           ;nrf24l01.c: 340: };nrf24l01.c: 341: };nrf24l01.c: 342: };nrf24l01.c: 343: };nrf24l01.c:
      +                           345: if (status.RX == 2){
  5630  0FEC  3002               	movlw	2
  5631  0FED  0020               	movlb	0	; select bank0
  5632  0FEE  0665               	xorwf	_status+1,w	;volatile
  5633  0FEF  1D03               	btfss	3,2
  5634  0FF0  2FF9               	goto	l4459
  5635                           
  5636                           ;nrf24l01.c: 347: if (RXPacket.packetData.ACKRequest){
  5637  0FF1  0023               	movlb	3	; select bank3
  5638  0FF2  1D20               	btfss	_RXPacket^(0+384),2
  5639  0FF3  2FF9               	goto	l4459
  5640                           
  5641                           ;nrf24l01.c: 349: RXPacket.packetData.ACKRequest = 0;
  5642  0FF4  1120               	bcf	_RXPacket^(0+384),2
  5643                           
  5644                           ;nrf24l01.c: 350: RXPacket.packetData.IsACK = 1;
  5645  0FF5  15A0               	bsf	_RXPacket^(0+384),3
  5646                           
  5647                           ;nrf24l01.c: 352: nrf24l01SendTXBuffer(&RXPacket);
  5648  0FF6  30A0               	movlw	(low (_RXPacket| (0+256)))& (0+255)
  5649  0FF7  318B  23F8         	fcall	_nrf24l01SendTXBuffer
  5650  0FF9                     l4459:	
  5651                           
  5652                           ;nrf24l01.c: 353: };nrf24l01.c: 354: };nrf24l01.c: 356: if (status.RX == 2){
  5653  0FF9  3002               	movlw	2
  5654  0FFA  0020               	movlb	0	; select bank0
  5655  0FFB  0665               	xorwf	_status+1,w	;volatile
  5656  0FFC  1903               	btfsc	3,2
  5657                           
  5658                           ;nrf24l01.c: 357: status.RX = 0;
  5659  0FFD  01E5               	clrf	_status+1	;volatile
  5660                           
  5661                           ; _nrf24l01Service: autosize = 2, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 
      +                          0, argsize = 0, vargsize = 0
  5662  0FFE  317E               	addfsr 1,-2
  5663  0FFF  0008               	return
  5664  1000                     __end_of_nrf24l01Service:	
  5665                           
  5666                           	psect	text16
  5667  0984                     __ptext16:	
  5668 ;; *************** function _strcmp *****************
  5669 ;; Defined at:
  5670 ;;		line 33 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\strcmp.c"
  5671 ;; Parameters:    Size  Location     Type
  5672 ;;  s1              1    wreg     PTR const unsigned char 
  5673 ;;		 -> RXPacket.Message(32), RXPacket(33), 
  5674 ;;  s2              1  [STACK] PTR const unsigned char 
  5675 ;;		 -> TXPacket.Message(32), TXPacket(33), 
  5676 ;; Auto vars:     Size  Location     Type
  5677 ;;  s1              1  [STACK] PTR const unsigned char 
  5678 ;;		 -> RXPacket.Message(32), RXPacket(33), 
  5679 ;;  r               1  [STACK] char 
  5680 ;; Return value:  Size  Location     Type
  5681 ;;                  2  [STACK] int 
  5682 ;; Registers used:
  5683 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, btemp+0, btemp+1, btemp+11
  5684 ;; Tracked objects:
  5685 ;;		On entry : 1F/0
  5686 ;;		On exit  : 0/0
  5687 ;;		Unchanged: 0/0
  5688 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5689 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5690 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5691 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5692 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5693 ;;Total ram usage:        0 bytes
  5694 ;; Hardware stack levels used:    1
  5695 ;; Hardware stack levels required when called:    7
  5696 ;; This function calls:
  5697 ;;		Nothing
  5698 ;; This function is called by:
  5699 ;;		_nrf24l01Service
  5700 ;; This function uses a reentrant model
  5701 ;;
  5702                           
  5703                           
  5704                           ;psect for function _strcmp
  5705  0984                     _strcmp:	
  5706                           
  5707                           ; autosize = 2, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 1, argsize = 1 var
      +                          gsize = 0, retsize = 0 argfudge = 0
  5708  0984  3142               	addfsr 1,2
  5709                           
  5710                           ;incstack = 0
  5711 ;; hardware stack exceeded
  5712                           ; Regs used in _strcmp: [wreg-fsr0h+fsr1l+fsr1h+status,2-btemp+1+btemp+11]
  5713                           ;strcmp@s1 stored from wreg
  5714                           ;stkvar	strcmp@s1 @ sp[(-2)+0]
  5715  0985  3FFE               	movwi [-2]fsr1
  5716  0986  2994               	goto	l4241
  5717  0987                     l4243:	
  5718                           
  5719                           ;stkvar	strcmp@s1 @ sp[(-2)+0]
  5720  0987  3F7E               	moviw [-2]fsr1
  5721  0988  0084               	movwf	4
  5722  0989  3001               	movlw	1	; select bank2/3
  5723  098A  0085               	movwf	5
  5724  098B  0800               	movf	0,w
  5725  098C  1903               	btfsc	3,2
  5726  098D  29A6               	goto	l4245
  5727                           
  5728                           ;stkvar	strcmp@s1 @ sp[(-2)+0]
  5729  098E  3F7E               	moviw [-2]fsr1
  5730  098F  3E01               	addlw	1
  5731  0990  3FFE               	movwi [-2]fsr1
  5732                           
  5733                           ;stkvar	strcmp@s2 @ sp[(-2)+-1]
  5734  0991  3F7D               	moviw [-3]fsr1
  5735  0992  3E01               	addlw	1
  5736  0993  3FFD               	movwi [-3]fsr1
  5737  0994                     l4241:	
  5738                           
  5739                           ;stkvar	strcmp@s2 @ sp[(-2)+-1]
  5740  0994  3F7D               	moviw [-3]fsr1
  5741  0995  0084               	movwf	4
  5742  0996  3001               	movlw	1	; select bank2/3
  5743  0997  0085               	movwf	5
  5744  0998  0800               	movf	0,w
  5745  0999  00FF               	movwf	127
  5746                           
  5747                           ;stkvar	strcmp@s1 @ sp[(-2)+0]
  5748  099A  3F7E               	moviw [-2]fsr1
  5749  099B  0084               	movwf	4
  5750  099C  3001               	movlw	1	; select bank2/3
  5751  099D  0085               	movwf	5
  5752  099E  0800               	movf	0,w
  5753  099F  00F4               	movwf	116
  5754  09A0  087F               	movf	127,w
  5755  09A1  0274               	subwf	116,w
  5756                           
  5757                           ;stkvar	strcmp@r @ sp[(-2)+1]
  5758  09A2  3FFF               	movwi [-1]fsr1
  5759  09A3  0889               	movf	9,f
  5760  09A4  1903               	btfsc	3,2
  5761  09A5  2987               	goto	l4243
  5762  09A6                     l4245:	
  5763                           
  5764                           ;stkvar	strcmp@r @ sp[(-2)+1]
  5765  09A6  3F7F               	moviw [-1]fsr1
  5766  09A7  00F4               	movwf	116
  5767  09A8  01F5               	clrf	117
  5768  09A9  1BF4               	btfsc	116,7
  5769  09AA  03F5               	decf	117,f
  5770                           
  5771                           ; _strcmp: autosize = 2, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 1, argsiz
      +                          e = 1, vargsize = 0
  5772  09AB  317D               	addfsr 1,-3
  5773  09AC  0008               	return
  5774  09AD                     __end_of_strcmp:	
  5775                           
  5776                           	psect	text17
  5777  0BF8                     __ptext17:	
  5778 ;; *************** function _nrf24l01SendTXBuffer *****************
  5779 ;; Defined at:
  5780 ;;		line 232 in file "nrf24l01.c"
  5781 ;; Parameters:    Size  Location     Type
  5782 ;;  packet          1    wreg     PTR struct .
  5783 ;;		 -> TXPacket(33), RXPacket(33), 
  5784 ;; Auto vars:     Size  Location     Type
  5785 ;;  packet          1  [STACK] PTR struct .
  5786 ;;		 -> TXPacket(33), RXPacket(33), 
  5787 ;;  i               1  [STACK] unsigned char 
  5788 ;;  width           1  [STACK] unsigned char 
  5789 ;; Return value:  Size  Location     Type
  5790 ;;                  1    wreg      void 
  5791 ;; Registers used:
  5792 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, btemp+0, btemp+1, btemp+11, pclath
  5793 ;; Tracked objects:
  5794 ;;		On entry : 1C/0
  5795 ;;		On exit  : 1F/0
  5796 ;;		Unchanged: 0/0
  5797 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5798 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5799 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5800 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5801 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5802 ;;Total ram usage:        0 bytes
  5803 ;; Hardware stack levels used:    1
  5804 ;; Hardware stack levels required when called:   10
  5805 ;; This function calls:
  5806 ;;		_nrf24l01SPIEnd
  5807 ;;		_nrf24l01SPISend
  5808 ;;		_nrf24l01SPIStart
  5809 ;;		_nrf24l01SetRXMode
  5810 ;;		_strlen
  5811 ;; This function is called by:
  5812 ;;		_nrf24l01Service
  5813 ;; This function uses a reentrant model
  5814 ;;
  5815                           
  5816                           
  5817                           ;psect for function _nrf24l01SendTXBuffer
  5818  0BF8                     _nrf24l01SendTXBuffer:	
  5819                           
  5820                           ; autosize = 3, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 0, argsize = 0 var
      +                          gsize = 0, retsize = 0 argfudge = 0
  5821  0BF8  3143               	addfsr 1,3
  5822                           
  5823                           ;incstack = 0
  5824 ;; hardware stack exceeded
  5825                           ; Regs used in _nrf24l01SendTXBuffer: [wreg-fsr0h+fsr1l+fsr1h+status,2-btemp+1+btemp+11+
      +                          pclath]
  5826                           ;nrf24l01SendTXBuffer@packet stored from wreg
  5827                           ;stkvar	nrf24l01SendTXBuffer@packet @ sp[(-3)+0]
  5828  0BF9  3FFD               	movwi [-3]fsr1
  5829                           
  5830                           ;nrf24l01.c: 234: lastTXPacket = packet;
  5831                           ;stkvar	nrf24l01SendTXBuffer@packet @ sp[(-3)+0]
  5832  0BFA  3F7D               	moviw [-3]fsr1
  5833  0BFB  0020               	movlb	0	; select bank0
  5834  0BFC  00E9               	movwf	_lastTXPacket
  5835                           
  5836                           ;nrf24l01.c: 236: unsigned char i;;nrf24l01.c: 239: nrf24l01SetRXMode(0);
  5837  0BFD  3000               	movlw	0
  5838  0BFE  318A  22F4  318B   	fcall	_nrf24l01SetRXMode
  5839                           
  5840                           ;nrf24l01.c: 242: nrf24l01SPIStart();
  5841  0C01  3197  27C5  318B   	fcall	_nrf24l01SPIStart
  5842                           
  5843                           ;nrf24l01.c: 245: nrf24l01SPISend((unsigned) 0b10110000);
  5844  0C04  30B0               	movlw	176
  5845  0C05  3188  2001  318B   	fcall	_nrf24l01SPISend
  5846                           
  5847                           ;nrf24l01.c: 247: nrf24l01SPISend(lastTXPacket->packetData.byte);
  5848  0C08  0020               	movlb	0	; select bank0
  5849  0C09  0869               	movf	_lastTXPacket,w
  5850  0C0A  0084               	movwf	4
  5851  0C0B  3001               	movlw	1	; select bank2/3
  5852  0C0C  3001               	movlw	1	; select bank2/3
  5853  0C0D  0085               	movwf	5
  5854  0C0E  0800               	movf	0,w
  5855  0C0F  3188  2001  318B   	fcall	_nrf24l01SPISend
  5856                           
  5857                           ;nrf24l01.c: 251: unsigned char width = strlen(lastTXPacket->Message);
  5858  0C12  0020               	movlb	0	; select bank0
  5859  0C13  0869               	movf	_lastTXPacket,w
  5860  0C14  3E01               	addlw	1
  5861  0C15  3188  2084  318B   	fcall	_strlen
  5862  0C18  0874               	movf	116,w
  5863                           
  5864                           ;stkvar	nrf24l01SendTXBuffer@width @ sp[(-3)+2]
  5865  0C19  3FFF               	movwi [-1]fsr1
  5866                           
  5867                           ;nrf24l01.c: 253: for (i = 0; i < width; i++) {
  5868                           ;stkvar	nrf24l01SendTXBuffer@i @ sp[(-3)+1]
  5869  0C1A  3000               	movlw	0
  5870  0C1B  3FFE               	movwi [-2]fsr1
  5871  0C1C                     l4225:	
  5872                           
  5873                           ;stkvar	nrf24l01SendTXBuffer@i @ sp[(-3)+1]
  5874  0C1C  3F7E               	moviw [-2]fsr1
  5875  0C1D  00FF               	movwf	127
  5876                           
  5877                           ;stkvar	nrf24l01SendTXBuffer@width @ sp[(-3)+2]
  5878  0C1E  3F7F               	moviw [-1]fsr1
  5879  0C1F  027F               	subwf	127,w
  5880  0C20  1803               	btfsc	3,0
  5881  0C21  2C33               	goto	l4227
  5882                           
  5883                           ;nrf24l01.c: 254: nrf24l01SPISend(lastTXPacket->Message[i]);
  5884                           ;stkvar	nrf24l01SendTXBuffer@i @ sp[(-3)+1]
  5885  0C22  3F7E               	moviw [-2]fsr1
  5886  0C23  0020               	movlb	0	; select bank0
  5887  0C24  0769               	addwf	_lastTXPacket,w
  5888  0C25  00FF               	movwf	127
  5889  0C26  0A7F               	incf	127,w
  5890  0C27  0084               	movwf	4
  5891  0C28  3001               	movlw	1	; select bank2/3
  5892  0C29  3001               	movlw	1	; select bank2/3
  5893  0C2A  0085               	movwf	5
  5894  0C2B  0800               	movf	0,w
  5895  0C2C  3188  2001  318B   	fcall	_nrf24l01SPISend
  5896                           
  5897                           ;stkvar	nrf24l01SendTXBuffer@i @ sp[(-3)+1]
  5898  0C2F  3F7E               	moviw [-2]fsr1
  5899  0C30  3E01               	addlw	1
  5900  0C31  3FFE               	movwi [-2]fsr1
  5901  0C32  2C1C               	goto	l4225
  5902  0C33                     l4227:	
  5903                           
  5904                           ;nrf24l01.c: 255: };nrf24l01.c: 258: nrf24l01SPIEnd();
  5905  0C33  3197  27BC  318B   	fcall	_nrf24l01SPIEnd
  5906                           
  5907                           ;nrf24l01.c: 261: PORTAbits.RA0 = 1;
  5908  0C36  0020               	movlb	0	; select bank0
  5909  0C37  140C               	bsf	12,0	;volatile
  5910                           
  5911                           ;nrf24l01.c: 262: _delay((unsigned long)((12)*(32000000/4000000.0)));
  5912  0C38  3020               	movlw	32
  5913  0C39                     u5267:	
  5914  0C39  0B89               	decfsz	9,f
  5915  0C3A  2C39               	goto	u5267
  5916                           
  5917                           ;nrf24l01.c: 263: PORTAbits.RA0 = 0;
  5918  0C3B  0020               	movlb	0	; select bank0
  5919  0C3C  100C               	bcf	12,0	;volatile
  5920                           
  5921                           ; _nrf24l01SendTXBuffer: autosize = 3, savesize = 0, parsavesize = 0, tempsize = 0 parsi
      +                          ze = 0, argsize = 0, vargsize = 0
  5922  0C3D  317D               	addfsr 1,-3
  5923  0C3E  0008               	return
  5924  0C3F                     __end_of_nrf24l01SendTXBuffer:	
  5925                           
  5926                           	psect	text18
  5927  0884                     __ptext18:	
  5928 ;; *************** function _strlen *****************
  5929 ;; Defined at:
  5930 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\strlen.c"
  5931 ;; Parameters:    Size  Location     Type
  5932 ;;  s               1    wreg     PTR const unsigned char 
  5933 ;;		 -> NULL(0), RXPacket.Message(32), TXPacket.Message(32), TXPacket(33), 
  5934 ;;		 -> RXPacket(33), romDataMap(28), 
  5935 ;; Auto vars:     Size  Location     Type
  5936 ;;  s               1  [STACK] PTR const unsigned char 
  5937 ;;		 -> NULL(0), RXPacket.Message(32), TXPacket.Message(32), TXPacket(33), 
  5938 ;;		 -> RXPacket(33), romDataMap(28), 
  5939 ;;  cp              1  [STACK] PTR const unsigned char 
  5940 ;;		 -> NULL(0), RXPacket.Message(32), TXPacket.Message(32), TXPacket(33), 
  5941 ;;		 -> RXPacket(33), romDataMap(28), 
  5942 ;; Return value:  Size  Location     Type
  5943 ;;                  2  [STACK] unsigned int 
  5944 ;; Registers used:
  5945 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, btemp+0, btemp+1, btemp+11
  5946 ;; Tracked objects:
  5947 ;;		On entry : 1F/0
  5948 ;;		On exit  : 0/0
  5949 ;;		Unchanged: 0/0
  5950 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5951 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5952 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5953 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5954 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5955 ;;Total ram usage:        0 bytes
  5956 ;; Hardware stack levels used:    1
  5957 ;; Hardware stack levels required when called:    7
  5958 ;; This function calls:
  5959 ;;		Nothing
  5960 ;; This function is called by:
  5961 ;;		_nrf24l01GetPipe
  5962 ;;		_nrf24l01SendTXBuffer
  5963 ;; This function uses a reentrant model
  5964 ;;
  5965                           
  5966                           
  5967                           ;psect for function _strlen
  5968  0884                     _strlen:	
  5969                           
  5970                           ; autosize = 2, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 0, argsize = 0 var
      +                          gsize = 0, retsize = 0 argfudge = 0
  5971  0884  3142               	addfsr 1,2
  5972                           
  5973                           ;incstack = 0
  5974 ;; hardware stack exceeded
  5975                           ; Regs used in _strlen: [wreg-fsr0h+fsr1l+fsr1h+status,2-btemp+1+btemp+11]
  5976                           ;strlen@s stored from wreg
  5977                           ;stkvar	strlen@s @ sp[(-2)+0]
  5978  0885  3FFE               	movwi [-2]fsr1
  5979                           
  5980                           ;stkvar	strlen@s @ sp[(-2)+0]
  5981  0886  0806               	movf	6,w
  5982  0887  0084               	movwf	4
  5983  0888  0807               	movf	7,w
  5984  0889  0085               	movwf	5
  5985  088A  313E               	addfsr 0,-2
  5986                           
  5987                           ;stkvar	strlen@cp @ sp[(-2)+1]
  5988  088B  3F00               	moviw [0]fsr0
  5989  088C  3FFF               	movwi [-1]fsr1
  5990  088D                     l3847:	
  5991                           
  5992                           ;stkvar	strlen@cp @ sp[(-2)+1]
  5993  088D  3F7F               	moviw [-1]fsr1
  5994  088E  0084               	movwf	4
  5995  088F  3001               	movlw	1	; select bank2/3
  5996  0890  0085               	movwf	5
  5997  0891  0800               	movf	0,w
  5998  0892  1903               	btfsc	3,2
  5999  0893  2898               	goto	l3849
  6000                           
  6001                           ;stkvar	strlen@cp @ sp[(-2)+1]
  6002  0894  3F7F               	moviw [-1]fsr1
  6003  0895  3E01               	addlw	1
  6004  0896  3FFF               	movwi [-1]fsr1
  6005  0897  288D               	goto	l3847
  6006  0898                     l3849:	
  6007                           
  6008                           ;stkvar	strlen@cp @ sp[(-2)+1]
  6009  0898  3F7F               	moviw [-1]fsr1
  6010  0899  00FF               	movwf	127
  6011                           
  6012                           ;stkvar	strlen@s @ sp[(-2)+0]
  6013  089A  3F7E               	moviw [-2]fsr1
  6014  089B  027F               	subwf	127,w
  6015  089C  00F4               	movwf	116
  6016  089D  01F5               	clrf	117
  6017  089E  1BF4               	btfsc	116,7
  6018  089F  03F5               	decf	117,f
  6019                           
  6020                           ; _strlen: autosize = 2, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 0, argsiz
      +                          e = 0, vargsize = 0
  6021  08A0  317E               	addfsr 1,-2
  6022  08A1  0008               	return
  6023  08A2                     __end_of_strlen:	
  6024                           
  6025                           	psect	text19
  6026  0AF4                     __ptext19:	
  6027 ;; *************** function _nrf24l01SetRXMode *****************
  6028 ;; Defined at:
  6029 ;;		line 51 in file "nrf24l01.c"
  6030 ;; Parameters:    Size  Location     Type
  6031 ;;  rxMode          1    wreg     unsigned char 
  6032 ;; Auto vars:     Size  Location     Type
  6033 ;;  rxMode          1  [STACK] unsigned char 
  6034 ;; Return value:  Size  Location     Type
  6035 ;;                  1    wreg      void 
  6036 ;; Registers used:
  6037 ;;		wreg, fsr1l, fsr1h, status,2, status,0, btemp+0, btemp+11, pclath
  6038 ;; Tracked objects:
  6039 ;;		On entry : 0/0
  6040 ;;		On exit  : 0/0
  6041 ;;		Unchanged: 0/0
  6042 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6043 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6044 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6045 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6046 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6047 ;;Total ram usage:        0 bytes
  6048 ;; Hardware stack levels used:    1
  6049 ;; Hardware stack levels required when called:    9
  6050 ;; This function calls:
  6051 ;;		_nrf24l01Send
  6052 ;; This function is called by:
  6053 ;;		_sleepListren
  6054 ;;		_nrf24l01ISR
  6055 ;;		_nrf24l01SendTXBuffer
  6056 ;;		_nrf24l01Service
  6057 ;; This function uses a reentrant model
  6058 ;;
  6059                           
  6060                           
  6061                           ;psect for function _nrf24l01SetRXMode
  6062  0AF4                     _nrf24l01SetRXMode:	
  6063                           
  6064                           ; autosize = 1, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 0, argsize = 0 var
      +                          gsize = 0, retsize = 0 argfudge = 0
  6065  0AF4  3141               	addfsr 1,1
  6066                           
  6067                           ;incstack = 0
  6068 ;; hardware stack exceeded
  6069                           ; Regs used in _nrf24l01SetRXMode: [wreg+fsr1l+fsr1h+status,2-btemp+0+btemp+11+pclath]
  6070                           ;nrf24l01SetRXMode@rxMode stored from wreg
  6071                           ;stkvar	nrf24l01SetRXMode@rxMode @ sp[(-1)+0]
  6072  0AF5  3FFF               	movwi [-1]fsr1
  6073                           
  6074                           ;nrf24l01.c: 54: if (rxMode){
  6075                           ;stkvar	nrf24l01SetRXMode@rxMode @ sp[(-1)+0]
  6076  0AF6  3F7F               	moviw [-1]fsr1
  6077  0AF7  1903               	btfsc	3,2
  6078  0AF8  2AFE               	goto	l3813
  6079                           
  6080                           ;nrf24l01.c: 55: if (status.TX == 2){
  6081  0AF9  3002               	movlw	2
  6082  0AFA  0020               	movlb	0	; select bank0
  6083  0AFB  0664               	xorwf	_status,w	;volatile
  6084  0AFC  1903               	btfsc	3,2
  6085  0AFD  2B2D               	goto	l259
  6086  0AFE                     l3813:	
  6087                           
  6088                           ;nrf24l01.c: 57: };nrf24l01.c: 58: };nrf24l01.c: 61: if (!rxMode){
  6089                           ;stkvar	nrf24l01SetRXMode@rxMode @ sp[(-1)+0]
  6090  0AFE  3F7F               	moviw [-1]fsr1
  6091  0AFF  1D03               	btfss	3,2
  6092  0B00  2B06               	goto	l3819
  6093                           
  6094                           ;nrf24l01.c: 62: if (status.TX == 3){
  6095  0B01  3003               	movlw	3
  6096  0B02  0020               	movlb	0	; select bank0
  6097  0B03  0664               	xorwf	_status,w	;volatile
  6098  0B04  1903               	btfsc	3,2
  6099  0B05  2B2D               	goto	l259
  6100  0B06                     l3819:	
  6101                           
  6102                           ;nrf24l01.c: 64: };nrf24l01.c: 65: };nrf24l01.c: 71: if (status.configRegister.PRIM_RX !
      +                          = rxMode){
  6103                           ;stkvar	nrf24l01SetRXMode@rxMode @ sp[(-1)+0]
  6104  0B06  3F7F               	moviw [-1]fsr1
  6105  0B07  00FF               	movwf	127
  6106  0B08  0020               	movlb	0	; select bank0
  6107  0B09  0867               	movf	_status+3,w	;volatile
  6108  0B0A  3901               	andlw	1
  6109  0B0B  067F               	xorwf	127,w
  6110  0B0C  1903               	skipnz
  6111  0B0D  2B2D               	goto	l259
  6112                           
  6113                           ;nrf24l01.c: 74: PORTAbits.RA0 = 0;
  6114  0B0E  100C               	bcf	12,0	;volatile
  6115                           
  6116                           ;nrf24l01.c: 75: _delay((unsigned long)((120)*(32000000/4000000.0)));
  6117  0B0F  30C0               	movlw	192
  6118  0B10                     u5277:	
  6119  0B10  3200               	nop2
  6120  0B11  0B89               	decfsz	9,f
  6121  0B12  2B10               	goto	u5277
  6122                           
  6123                           ;nrf24l01.c: 78: status.configRegister.PRIM_RX = rxMode;
  6124                           ;stkvar	nrf24l01SetRXMode@rxMode @ sp[(-1)+0]
  6125  0B13  3F7F               	moviw [-1]fsr1
  6126  0B14  3901               	andlw	1
  6127  0B15  0020               	movlb	0	; select bank0
  6128  0B16  1D03               	skipz
  6129  0B17  1467               	bsf	_status+3,0	;volatile
  6130  0B18  1903               	skipnz
  6131  0B19  1067               	bcf	_status+3,0	;volatile
  6132                           
  6133                           ;nrf24l01.c: 79: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x00, status.configRegi
      +                          ster.byte);
  6134  0B1A  0867               	movf	_status+3,w	;volatile
  6135  0B1B  001E               	movwi fsr1++
  6136  0B1C  3020               	movlw	32
  6137  0B1D  3197  27ED  318A   	fcall	_nrf24l01Send
  6138                           
  6139                           ;nrf24l01.c: 82: _delay((unsigned long)((120)*(32000000/4000000.0)));
  6140  0B20  30C0               	movlw	192
  6141  0B21                     u5287:	
  6142  0B21  3200               	nop2
  6143  0B22  0B89               	decfsz	9,f
  6144  0B23  2B21               	goto	u5287
  6145                           
  6146                           ;nrf24l01.c: 85: if (rxMode){
  6147                           ;stkvar	nrf24l01SetRXMode@rxMode @ sp[(-1)+0]
  6148  0B24  3F7F               	moviw [-1]fsr1
  6149  0B25  1903               	btfsc	3,2
  6150  0B26  2B2D               	goto	l259
  6151                           
  6152                           ;nrf24l01.c: 86: PORTAbits.RA0 = 1;
  6153  0B27  0020               	movlb	0	; select bank0
  6154  0B28  140C               	bsf	12,0	;volatile
  6155                           
  6156                           ;nrf24l01.c: 87: _delay((unsigned long)((120)*(32000000/4000000.0)));
  6157  0B29  30C0               	movlw	192
  6158  0B2A                     u5297:	
  6159  0B2A  3200               	nop2
  6160  0B2B  0B89               	decfsz	9,f
  6161  0B2C  2B2A               	goto	u5297
  6162  0B2D                     l259:	
  6163                           
  6164                           ; _nrf24l01SetRXMode: autosize = 1, savesize = 0, parsavesize = 0, tempsize = 0 parsize 
      +                          = 0, argsize = 0, vargsize = 0
  6165  0B2D  317F               	addfsr 1,-1
  6166  0B2E  0008               	return
  6167  0B2F                     __end_of_nrf24l01SetRXMode:	
  6168                           
  6169                           	psect	text20
  6170  17ED                     __ptext20:	
  6171 ;; *************** function _nrf24l01Send *****************
  6172 ;; Defined at:
  6173 ;;		line 12 in file "nrf24l01.c"
  6174 ;; Parameters:    Size  Location     Type
  6175 ;;  command         1    wreg     unsigned char 
  6176 ;;  data            1  [STACK] unsigned char 
  6177 ;; Auto vars:     Size  Location     Type
  6178 ;;  command         1  [STACK] unsigned char 
  6179 ;; Return value:  Size  Location     Type
  6180 ;;                  1    wreg      unsigned char 
  6181 ;; Registers used:
  6182 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath
  6183 ;; Tracked objects:
  6184 ;;		On entry : 0/0
  6185 ;;		On exit  : 1F/1
  6186 ;;		Unchanged: 0/0
  6187 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6188 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6189 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6190 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6191 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6192 ;;Total ram usage:        0 bytes
  6193 ;; Hardware stack levels used:    1
  6194 ;; Hardware stack levels required when called:    8
  6195 ;; This function calls:
  6196 ;;		_nrf24l01SPIEnd
  6197 ;;		_nrf24l01SPISend
  6198 ;;		_nrf24l01SPIStart
  6199 ;; This function is called by:
  6200 ;;		_loop
  6201 ;;		_nrf24l01SetRXMode
  6202 ;;		_nrf24l01SetRXPipe
  6203 ;;		_nrf24l01ISR
  6204 ;;		_nrf24l01Service
  6205 ;;		_nrf24l01InitRegisters
  6206 ;;		_nrf24l01ChangeTXPower
  6207 ;; This function uses a reentrant model
  6208 ;;
  6209                           
  6210                           
  6211                           ;psect for function _nrf24l01Send
  6212  17ED                     _nrf24l01Send:	
  6213                           
  6214                           ; autosize = 1, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 1, argsize = 1 var
      +                          gsize = 0, retsize = 0 argfudge = 0
  6215  17ED  3141               	addfsr 1,1
  6216                           
  6217                           ;incstack = 0
  6218 ;; hardware stack exceeded
  6219                           ; Regs used in _nrf24l01Send: [wreg+fsr1l+fsr1h+status,2+status,0+pclath]
  6220                           ;nrf24l01Send@command stored from wreg
  6221                           ;stkvar	nrf24l01Send@command @ sp[(-1)+0]
  6222  17EE  3FFF               	movwi [-1]fsr1
  6223                           
  6224                           ;nrf24l01.c: 15: nrf24l01SPIStart();
  6225  17EF  3197  27C5  3197   	fcall	_nrf24l01SPIStart
  6226                           
  6227                           ;nrf24l01.c: 18: nrf24l01SPISend(command);
  6228                           ;stkvar	nrf24l01Send@command @ sp[(-1)+0]
  6229  17F2  3F7F               	moviw [-1]fsr1
  6230  17F3  3188  2001  3197   	fcall	_nrf24l01SPISend
  6231                           
  6232                           ;nrf24l01.c: 21: data = nrf24l01SPISend(data);
  6233                           ;stkvar	nrf24l01Send@data @ sp[(-1)+-1]
  6234  17F6  3F7E               	moviw [-2]fsr1
  6235  17F7  3188  2001  3197   	fcall	_nrf24l01SPISend
  6236                           
  6237                           ;stkvar	nrf24l01Send@data @ sp[(-1)+-1]
  6238  17FA  3FFE               	movwi [-2]fsr1
  6239                           
  6240                           ;nrf24l01.c: 24: nrf24l01SPIEnd();
  6241  17FB  3197  27BC         	fcall	_nrf24l01SPIEnd
  6242                           
  6243                           ;nrf24l01.c: 26: return data;
  6244                           ;stkvar	nrf24l01Send@data @ sp[(-1)+-1]
  6245  17FD  3F7E               	moviw [-2]fsr1
  6246                           
  6247                           ; _nrf24l01Send: autosize = 1, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 1, 
      +                          argsize = 1, vargsize = 0
  6248  17FE  317E               	addfsr 1,-2
  6249  17FF  0008               	return
  6250  1800                     __end_of_nrf24l01Send:	
  6251                           
  6252                           	psect	text21
  6253  17C5                     __ptext21:	
  6254 ;; *************** function _nrf24l01SPIStart *****************
  6255 ;; Defined at:
  6256 ;;		line 68 in file "interface.c"
  6257 ;; Parameters:    Size  Location     Type
  6258 ;;		None
  6259 ;; Auto vars:     Size  Location     Type
  6260 ;;		None
  6261 ;; Return value:  Size  Location     Type
  6262 ;;                  1    wreg      void 
  6263 ;; Registers used:
  6264 ;;		wreg
  6265 ;; Tracked objects:
  6266 ;;		On entry : 0/0
  6267 ;;		On exit  : 0/0
  6268 ;;		Unchanged: 0/0
  6269 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6270 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6271 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6272 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6273 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6274 ;;Total ram usage:        0 bytes
  6275 ;; Hardware stack levels used:    1
  6276 ;; Hardware stack levels required when called:    7
  6277 ;; This function calls:
  6278 ;;		Nothing
  6279 ;; This function is called by:
  6280 ;;		_nrf24l01Send
  6281 ;;		_nrf24l01SetTXPipe
  6282 ;;		_nrf24l01SendTXBuffer
  6283 ;;		_nrf24l01Service
  6284 ;;		_nrf24l01InitRegisters
  6285 ;; This function uses a reentrant model
  6286 ;;
  6287                           
  6288                           
  6289                           ;psect for function _nrf24l01SPIStart
  6290  17C5                     _nrf24l01SPIStart:	
  6291                           
  6292                           ;interface.c: 69: PIE0bits.INTE = 0;
  6293                           
  6294                           ; autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 0, argsize = 0 var
      +                          gsize = 0, retsize = 0 argfudge = 0
  6295                           ;incstack = 0
  6296 ;; hardware stack exceeded
  6297                           ; Regs used in _nrf24l01SPIStart: [wreg]
  6298  17C5  0021               	movlb	1	; select bank1
  6299  17C6  1010               	bcf	16,0	;volatile
  6300                           
  6301                           ;interface.c: 70: PORTAbits.RA1 = 0;
  6302  17C7  0020               	movlb	0	; select bank0
  6303  17C8  108C               	bcf	12,1	;volatile
  6304                           
  6305                           ;interface.c: 71: _delay((unsigned long)((10)*(32000000/4000000.0)));
  6306  17C9  301A               	movlw	26
  6307  17CA                     u5307:	
  6308  17CA  0B89               	decfsz	9,f
  6309  17CB  2FCA               	goto	u5307
  6310  17CC  3200               	nop2
  6311                           
  6312                           ; _nrf24l01SPIStart: autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize =
      +                           0, argsize = 0, vargsize = 0
  6313  17CD  0008               	return
  6314  17CE                     __end_of_nrf24l01SPIStart:	
  6315                           
  6316                           	psect	text22
  6317  0801                     __ptext22:	
  6318 ;; *************** function _nrf24l01SPISend *****************
  6319 ;; Defined at:
  6320 ;;		line 56 in file "interface.c"
  6321 ;; Parameters:    Size  Location     Type
  6322 ;;  data            1    wreg     unsigned char 
  6323 ;; Auto vars:     Size  Location     Type
  6324 ;;  data            1  [STACK] unsigned char 
  6325 ;; Return value:  Size  Location     Type
  6326 ;;                  1    wreg      unsigned char 
  6327 ;; Registers used:
  6328 ;;		wreg, fsr1l, fsr1h
  6329 ;; Tracked objects:
  6330 ;;		On entry : 0/0
  6331 ;;		On exit  : 1F/4
  6332 ;;		Unchanged: 0/0
  6333 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6334 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6335 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6336 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6337 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6338 ;;Total ram usage:        0 bytes
  6339 ;; Hardware stack levels used:    1
  6340 ;; Hardware stack levels required when called:    7
  6341 ;; This function calls:
  6342 ;;		Nothing
  6343 ;; This function is called by:
  6344 ;;		_nrf24l01Send
  6345 ;;		_nrf24l01SetTXPipe
  6346 ;;		_nrf24l01SendTXBuffer
  6347 ;;		_nrf24l01Service
  6348 ;;		_nrf24l01InitRegisters
  6349 ;; This function uses a reentrant model
  6350 ;;
  6351                           
  6352                           
  6353                           ;psect for function _nrf24l01SPISend
  6354  0801                     _nrf24l01SPISend:	
  6355                           
  6356                           ; autosize = 1, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 0, argsize = 0 var
      +                          gsize = 0, retsize = 0 argfudge = 0
  6357  0801  3141               	addfsr 1,1
  6358                           
  6359                           ;incstack = 0
  6360 ;; hardware stack exceeded
  6361                           ; Regs used in _nrf24l01SPISend: [wreg+fsr1l+fsr1h]
  6362                           ;nrf24l01SPISend@data stored from wreg
  6363                           ;stkvar	nrf24l01SPISend@data @ sp[(-1)+0]
  6364  0802  3FFF               	movwi [-1]fsr1
  6365                           
  6366                           ;interface.c: 57: SSP1BUF = data;
  6367                           ;stkvar	nrf24l01SPISend@data @ sp[(-1)+0]
  6368  0803  3F7F               	moviw [-1]fsr1
  6369  0804  0024               	movlb	4	; select bank4
  6370  0805  0091               	movwf	17	;volatile
  6371                           
  6372                           ;interface.c: 59: PORTCbits.RC4 = 1;
  6373  0806  0020               	movlb	0	; select bank0
  6374  0807  160E               	bsf	14,4	;volatile
  6375  0808                     l53:	
  6376                           ;interface.c: 61: while (!SSP1STATbits.BF){
  6377                           
  6378  0808  0024               	movlb	4	; select bank4
  6379  0809  1814               	btfsc	20,0	;volatile
  6380  080A  280D               	goto	l3573
  6381                           
  6382                           ;interface.c: 62: __nop();
  6383  080B  0000               	nop
  6384  080C  2808               	goto	l53
  6385  080D                     l3573:	
  6386                           
  6387                           ;interface.c: 63: };interface.c: 65: return SSP1BUF;
  6388  080D  0811               	movf	17,w	;volatile
  6389                           
  6390                           ; _nrf24l01SPISend: autosize = 1, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 
      +                          0, argsize = 0, vargsize = 0
  6391  080E  317F               	addfsr 1,-1
  6392  080F  0008               	return
  6393  0810                     __end_of_nrf24l01SPISend:	
  6394                           
  6395                           	psect	text23
  6396  17BC                     __ptext23:	
  6397 ;; *************** function _nrf24l01SPIEnd *****************
  6398 ;; Defined at:
  6399 ;;		line 74 in file "interface.c"
  6400 ;; Parameters:    Size  Location     Type
  6401 ;;		None
  6402 ;; Auto vars:     Size  Location     Type
  6403 ;;		None
  6404 ;; Return value:  Size  Location     Type
  6405 ;;                  1    wreg      void 
  6406 ;; Registers used:
  6407 ;;		wreg
  6408 ;; Tracked objects:
  6409 ;;		On entry : 0/0
  6410 ;;		On exit  : 1F/1
  6411 ;;		Unchanged: 0/0
  6412 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6413 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6414 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6415 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6416 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6417 ;;Total ram usage:        0 bytes
  6418 ;; Hardware stack levels used:    1
  6419 ;; Hardware stack levels required when called:    7
  6420 ;; This function calls:
  6421 ;;		Nothing
  6422 ;; This function is called by:
  6423 ;;		_nrf24l01Send
  6424 ;;		_nrf24l01SetTXPipe
  6425 ;;		_nrf24l01SendTXBuffer
  6426 ;;		_nrf24l01Service
  6427 ;;		_nrf24l01InitRegisters
  6428 ;; This function uses a reentrant model
  6429 ;;
  6430                           
  6431                           
  6432                           ;psect for function _nrf24l01SPIEnd
  6433  17BC                     _nrf24l01SPIEnd:	
  6434                           
  6435                           ;interface.c: 75: _delay((unsigned long)((10)*(32000000/4000000.0)));
  6436                           
  6437                           ; autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 0, argsize = 0 var
      +                          gsize = 0, retsize = 0 argfudge = 0
  6438                           ;incstack = 0
  6439 ;; hardware stack exceeded
  6440                           ; Regs used in _nrf24l01SPIEnd: [wreg]
  6441  17BC  301A               	movlw	26
  6442  17BD                     u5317:	
  6443  17BD  0B89               	decfsz	9,f
  6444  17BE  2FBD               	goto	u5317
  6445  17BF  3200               	nop2
  6446                           
  6447                           ;interface.c: 76: PORTAbits.RA1 = 1;
  6448  17C0  0020               	movlb	0	; select bank0
  6449  17C1  148C               	bsf	12,1	;volatile
  6450                           
  6451                           ;interface.c: 77: PIE0bits.INTE = 1;
  6452  17C2  0021               	movlb	1	; select bank1
  6453  17C3  1410               	bsf	16,0	;volatile
  6454                           
  6455                           ; _nrf24l01SPIEnd: autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 0
      +                          , argsize = 0, vargsize = 0
  6456  17C4  0008               	return
  6457  17C5                     __end_of_nrf24l01SPIEnd:	
  6458                           
  6459                           	psect	text24
  6460  0A8E                     __ptext24:	
  6461 ;; *************** function _memset *****************
  6462 ;; Defined at:
  6463 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\memset.c"
  6464 ;; Parameters:    Size  Location     Type
  6465 ;;  p1              2  [STACK] PTR void 
  6466 ;;		 -> RXPacket(33), main@packet(33), loop@packet(33), 
  6467 ;;  c               2  [STACK] int 
  6468 ;;  n               2  [STACK] unsigned int 
  6469 ;; Auto vars:     Size  Location     Type
  6470 ;;  p               2  [STACK] PTR unsigned char 
  6471 ;;		 -> RXPacket(33), main@packet(33), loop@packet(33), 
  6472 ;; Return value:  Size  Location     Type
  6473 ;;                  2  [STACK] PTR void 
  6474 ;; Registers used:
  6475 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, btemp+0, btemp+8, btemp+9, btemp+11
  6476 ;; Tracked objects:
  6477 ;;		On entry : 1E/1
  6478 ;;		On exit  : 0/0
  6479 ;;		Unchanged: 0/0
  6480 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6481 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6482 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6483 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6484 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6485 ;;Total ram usage:        0 bytes
  6486 ;; Hardware stack levels used:    1
  6487 ;; Hardware stack levels required when called:    7
  6488 ;; This function calls:
  6489 ;;		Nothing
  6490 ;; This function is called by:
  6491 ;;		_sendMessage
  6492 ;;		_nrf24l01Service
  6493 ;; This function uses a reentrant model
  6494 ;;
  6495                           
  6496                           
  6497                           ;psect for function _memset
  6498  0A8E                     _memset:	
  6499                           
  6500                           ; autosize = 2, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 6, argsize = 6 var
      +                          gsize = 0, retsize = 0 argfudge = 0
  6501  0A8E  3142               	addfsr 1,2
  6502                           
  6503                           ;stkvar	memset@p1 @ sp[(-2)+-2]
  6504                           
  6505                           ;incstack = 0
  6506 ;; hardware stack exceeded
  6507                           ; Regs used in _memset: [wreg-fsr0h+fsr1l+fsr1h+status,2-btemp+0+btemp+8+btemp+9+btemp+1
      +                          1]
  6508  0A8F  0806               	movf	6,w
  6509  0A90  0084               	movwf	4
  6510  0A91  0807               	movf	7,w
  6511  0A92  0085               	movwf	5
  6512  0A93  313C               	addfsr 0,-4
  6513                           
  6514                           ;stkvar	memset@p @ sp[(-2)+0]
  6515  0A94  3F00               	moviw [0]fsr0
  6516  0A95  3FFE               	movwi [-2]fsr1
  6517  0A96  3F01               	moviw [1]fsr0
  6518  0A97  3FFF               	movwi [-1]fsr1
  6519  0A98                     l4137:	
  6520                           
  6521                           ;stkvar	memset@n @ sp[(-2)+-6]
  6522  0A98  3F78               	moviw [-8]fsr1
  6523  0A99  00F4               	movwf	116
  6524  0A9A  3001               	movlw	1
  6525  0A9B  0274               	subwf	116,w
  6526  0A9C  3FF8               	movwi [-8]fsr1
  6527  0A9D  3F79               	moviw [-7]fsr1
  6528  0A9E  00F4               	movwf	116
  6529  0A9F  3000               	movlw	0
  6530  0AA0  3B74               	subwfb	116,w
  6531  0AA1  3FF9               	movwi [-7]fsr1
  6532  0AA2  3F78               	moviw [-8]fsr1
  6533  0AA3  3AFF               	xorlw	255
  6534  0AA4  00F4               	movwf	116
  6535  0AA5  3F79               	moviw [-7]fsr1
  6536  0AA6  3AFF               	xorlw	255
  6537  0AA7  04F4               	iorwf	116,f
  6538  0AA8  1903               	btfsc	3,2
  6539  0AA9  2ABE               	goto	l908
  6540                           
  6541                           ;stkvar	memset@c @ sp[(-2)+-4]
  6542  0AAA  3F7A               	moviw [-6]fsr1
  6543  0AAB  00FF               	movwf	127
  6544                           
  6545                           ;stkvar	memset@p @ sp[(-2)+0]
  6546  0AAC  3F7E               	moviw [-2]fsr1
  6547  0AAD  00FC               	movwf	124
  6548  0AAE  3F7F               	moviw [-1]fsr1
  6549  0AAF  00FD               	movwf	125
  6550  0AB0  087C               	movf	124,w
  6551  0AB1  0084               	movwf	4
  6552  0AB2  087D               	movf	125,w
  6553  0AB3  0085               	movwf	5
  6554  0AB4  087F               	movf	127,w
  6555  0AB5  0080               	movwf	0
  6556                           
  6557                           ;stkvar	memset@p @ sp[(-2)+0]
  6558  0AB6  3F7E               	moviw [-2]fsr1
  6559  0AB7  3E01               	addlw	1
  6560  0AB8  3FFE               	movwi [-2]fsr1
  6561  0AB9  01F4               	clrf	116
  6562  0ABA  3F7F               	moviw [-1]fsr1
  6563  0ABB  3D74               	addwfc	116,w
  6564  0ABC  3FFF               	movwi [-1]fsr1
  6565  0ABD  2A98               	goto	l4137
  6566  0ABE                     l908:	
  6567                           
  6568                           ; _memset: autosize = 2, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 6, argsiz
      +                          e = 6, vargsize = 0
  6569  0ABE  3178               	addfsr 1,-8
  6570  0ABF  0008               	return
  6571  0AC0                     __end_of_memset:	
  6572                           
  6573                           	psect	text25
  6574  0567                     __ptext25:	
  6575 ;; *************** function _ftoa *****************
  6576 ;; Defined at:
  6577 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\ftoa.c"
  6578 ;; Parameters:    Size  Location     Type
  6579 ;;  f               3    0[BANK1 ] float 
  6580 ;;  status          1    3[BANK1 ] PTR int 
  6581 ;;		 -> sendMessage@ftoaStatus(2), 
  6582 ;; Auto vars:     Size  Location     Type
  6583 ;;  l               4    8[BANK1 ] unsigned long 
  6584 ;;  rem             4    4[BANK1 ] unsigned long 
  6585 ;;  cp              1   12[BANK1 ] PTR unsigned char 
  6586 ;;		 -> ftoa@buf(17), 
  6587 ;; Return value:  Size  Location     Type
  6588 ;;                  1    wreg      PTR unsigned char 
  6589 ;; Registers used:
  6590 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+8, btemp+9, btemp+10, btemp+11, pclath, cstack
  6591 ;; Tracked objects:
  6592 ;;		On entry : 0/0
  6593 ;;		On exit  : 0/0
  6594 ;;		Unchanged: 0/0
  6595 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6596 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  6597 ;;      Locals:         0       0       9       0       0       0       0       0       0       0       0       0       
      +0       0
  6598 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6599 ;;      Totals:         0       0      13       0       0       0       0       0       0       0       0       0       
      +0       0
  6600 ;;Total ram usage:       13 bytes
  6601 ;; Hardware stack levels used:    1
  6602 ;; Hardware stack levels required when called:   10
  6603 ;; This function calls:
  6604 ;;		___ftge
  6605 ;;		___ftmul
  6606 ;;		___ftneg
  6607 ;;		___ftsub
  6608 ;;		___fttol
  6609 ;;		___lltoft
  6610 ;;		_sprintf
  6611 ;; This function is called by:
  6612 ;;		_sendMessage
  6613 ;; This function uses a non-reentrant model
  6614 ;;
  6615                           
  6616                           
  6617                           ;psect for function _ftoa
  6618  0567                     _ftoa:	
  6619                           
  6620                           ;incstack = 0
  6621                           ; Regs used in _ftoa: [wreg-fsr0h+status,2+status,0+btemp+8-btemp+11+pclath+cstack]
  6622  0567  303C               	movlw	(low (ftoa@buf| (0+256)))& (0+255)
  6623  0568  00FF               	movwf	127
  6624  0569  087F               	movf	127,w
  6625  056A  0021               	movlb	1	; select bank1
  6626  056B  00AC               	movwf	ftoa@cp^(0+128)
  6627  056C  0820               	movf	ftoa@f^(0+128),w
  6628  056D  0020               	movlb	0	; select bank0
  6629  056E  00A6               	movwf	___ftge@ff1
  6630  056F  0021               	movlb	1	; select bank1
  6631  0570  0821               	movf	(ftoa@f+1)^(0+128),w
  6632  0571  0020               	movlb	0	; select bank0
  6633  0572  00A7               	movwf	___ftge@ff1+1
  6634  0573  0021               	movlb	1	; select bank1
  6635  0574  0822               	movf	(ftoa@f+2)^(0+128),w
  6636  0575  0020               	movlb	0	; select bank0
  6637  0576  00A8               	movwf	___ftge@ff1+2
  6638  0577  3000               	movlw	0
  6639  0578  00A9               	movwf	___ftge@ff2
  6640  0579  3000               	movlw	0
  6641  057A  00AA               	movwf	___ftge@ff2+1
  6642  057B  3000               	movlw	0
  6643  057C  00AB               	movwf	___ftge@ff2+2
  6644  057D  3187  27C2  3185   	fcall	___ftge
  6645  0580  1803               	btfsc	3,0
  6646  0581  2DA9               	goto	l4159
  6647  0582  302D               	movlw	45
  6648  0583  00FF               	movwf	127
  6649  0584  0021               	movlb	1	; select bank1
  6650  0585  082C               	movf	ftoa@cp^(0+128),w
  6651  0586  0084               	movwf	4
  6652  0587  3001               	movlw	1	; select bank2/3
  6653  0588  0085               	movwf	5
  6654  0589  087F               	movf	127,w
  6655  058A  0080               	movwf	0
  6656  058B  3001               	movlw	1
  6657  058C  00FF               	movwf	127
  6658  058D  087F               	movf	127,w
  6659  058E  07AC               	addwf	ftoa@cp^(0+128),f
  6660  058F  0820               	movf	ftoa@f^(0+128),w
  6661  0590  0020               	movlb	0	; select bank0
  6662  0591  00CC               	movwf	___ftneg@f1
  6663  0592  0021               	movlb	1	; select bank1
  6664  0593  0821               	movf	(ftoa@f+1)^(0+128),w
  6665  0594  0020               	movlb	0	; select bank0
  6666  0595  00CD               	movwf	___ftneg@f1+1
  6667  0596  0021               	movlb	1	; select bank1
  6668  0597  0822               	movf	(ftoa@f+2)^(0+128),w
  6669  0598  0020               	movlb	0	; select bank0
  6670  0599  00CE               	movwf	___ftneg@f1+2
  6671  059A  3197  27B3  3185   	fcall	___ftneg
  6672  059D  0020               	movlb	0	; select bank0
  6673  059E  084C               	movf	?___ftneg,w
  6674  059F  0021               	movlb	1	; select bank1
  6675  05A0  00A0               	movwf	ftoa@f^(0+128)
  6676  05A1  0020               	movlb	0	; select bank0
  6677  05A2  084D               	movf	?___ftneg+1,w
  6678  05A3  0021               	movlb	1	; select bank1
  6679  05A4  00A1               	movwf	(ftoa@f+1)^(0+128)
  6680  05A5  0020               	movlb	0	; select bank0
  6681  05A6  084E               	movf	?___ftneg+2,w
  6682  05A7  0021               	movlb	1	; select bank1
  6683  05A8  00A2               	movwf	(ftoa@f+2)^(0+128)
  6684  05A9                     l4159:	
  6685  05A9  0021               	movlb	1	; select bank1
  6686  05AA  0820               	movf	ftoa@f^(0+128),w
  6687  05AB  0020               	movlb	0	; select bank0
  6688  05AC  00D8               	movwf	___fttol@f1
  6689  05AD  0021               	movlb	1	; select bank1
  6690  05AE  0821               	movf	(ftoa@f+1)^(0+128),w
  6691  05AF  0020               	movlb	0	; select bank0
  6692  05B0  00D9               	movwf	___fttol@f1+1
  6693  05B1  0021               	movlb	1	; select bank1
  6694  05B2  0822               	movf	(ftoa@f+2)^(0+128),w
  6695  05B3  0020               	movlb	0	; select bank0
  6696  05B4  00DA               	movwf	___fttol@f1+2
  6697  05B5  318D  257D  3185   	fcall	___fttol
  6698  05B8  0020               	movlb	0	; select bank0
  6699  05B9  085B               	movf	?___fttol+3,w
  6700  05BA  0021               	movlb	1	; select bank1
  6701  05BB  00AB               	movwf	(ftoa@l+3)^(0+128)
  6702  05BC  0020               	movlb	0	; select bank0
  6703  05BD  085A               	movf	?___fttol+2,w
  6704  05BE  0021               	movlb	1	; select bank1
  6705  05BF  00AA               	movwf	(ftoa@l+2)^(0+128)
  6706  05C0  0020               	movlb	0	; select bank0
  6707  05C1  0859               	movf	?___fttol+1,w
  6708  05C2  0021               	movlb	1	; select bank1
  6709  05C3  00A9               	movwf	(ftoa@l+1)^(0+128)
  6710  05C4  0020               	movlb	0	; select bank0
  6711  05C5  0858               	movf	?___fttol,w
  6712  05C6  0021               	movlb	1	; select bank1
  6713  05C7  00A8               	movwf	ftoa@l^(0+128)
  6714  05C8  082B               	movf	(ftoa@l+3)^(0+128),w
  6715  05C9  00F3               	movwf	___lltoft@c+3
  6716  05CA  082A               	movf	(ftoa@l+2)^(0+128),w
  6717  05CB  00F2               	movwf	___lltoft@c+2
  6718  05CC  0829               	movf	(ftoa@l+1)^(0+128),w
  6719  05CD  00F1               	movwf	___lltoft@c+1
  6720  05CE  0828               	movf	ftoa@l^(0+128),w
  6721  05CF  00F0               	movwf	___lltoft@c
  6722  05D0  3189  21AD  3185   	fcall	___lltoft
  6723  05D3  0870               	movf	?___lltoft,w
  6724  05D4  0020               	movlb	0	; select bank0
  6725  05D5  00B5               	movwf	___ftsub@f2
  6726  05D6  0871               	movf	?___lltoft+1,w
  6727  05D7  00B6               	movwf	___ftsub@f2+1
  6728  05D8  0872               	movf	?___lltoft+2,w
  6729  05D9  00B7               	movwf	___ftsub@f2+2
  6730  05DA  0021               	movlb	1	; select bank1
  6731  05DB  0820               	movf	ftoa@f^(0+128),w
  6732  05DC  0020               	movlb	0	; select bank0
  6733  05DD  00B8               	movwf	___ftsub@f1
  6734  05DE  0021               	movlb	1	; select bank1
  6735  05DF  0821               	movf	(ftoa@f+1)^(0+128),w
  6736  05E0  0020               	movlb	0	; select bank0
  6737  05E1  00B9               	movwf	___ftsub@f1+1
  6738  05E2  0021               	movlb	1	; select bank1
  6739  05E3  0822               	movf	(ftoa@f+2)^(0+128),w
  6740  05E4  0020               	movlb	0	; select bank0
  6741  05E5  00BA               	movwf	___ftsub@f1+2
  6742  05E6  3188  2048  3185   	fcall	___ftsub
  6743  05E9  0020               	movlb	0	; select bank0
  6744  05EA  0835               	movf	?___ftsub,w
  6745  05EB  0021               	movlb	1	; select bank1
  6746  05EC  00A0               	movwf	ftoa@f^(0+128)
  6747  05ED  0020               	movlb	0	; select bank0
  6748  05EE  0836               	movf	?___ftsub+1,w
  6749  05EF  0021               	movlb	1	; select bank1
  6750  05F0  00A1               	movwf	(ftoa@f+1)^(0+128)
  6751  05F1  0020               	movlb	0	; select bank0
  6752  05F2  0837               	movf	?___ftsub+2,w
  6753  05F3  0021               	movlb	1	; select bank1
  6754  05F4  00A2               	movwf	(ftoa@f+2)^(0+128)
  6755  05F5  0820               	movf	ftoa@f^(0+128),w
  6756  05F6  0020               	movlb	0	; select bank0
  6757  05F7  00CF               	movwf	___ftmul@f2
  6758  05F8  0021               	movlb	1	; select bank1
  6759  05F9  0821               	movf	(ftoa@f+1)^(0+128),w
  6760  05FA  0020               	movlb	0	; select bank0
  6761  05FB  00D0               	movwf	___ftmul@f2+1
  6762  05FC  0021               	movlb	1	; select bank1
  6763  05FD  0822               	movf	(ftoa@f+2)^(0+128),w
  6764  05FE  0020               	movlb	0	; select bank0
  6765  05FF  00D1               	movwf	___ftmul@f2+2
  6766  0600  3024               	movlw	36
  6767  0601  00CC               	movwf	___ftmul@f1
  6768  0602  3074               	movlw	116
  6769  0603  00CD               	movwf	___ftmul@f1+1
  6770  0604  3049               	movlw	73
  6771  0605  00CE               	movwf	___ftmul@f1+2
  6772  0606  3187  270E  3185   	fcall	___ftmul
  6773  0609  0020               	movlb	0	; select bank0
  6774  060A  084C               	movf	?___ftmul,w
  6775  060B  00D8               	movwf	___fttol@f1
  6776  060C  084D               	movf	?___ftmul+1,w
  6777  060D  00D9               	movwf	___fttol@f1+1
  6778  060E  084E               	movf	?___ftmul+2,w
  6779  060F  00DA               	movwf	___fttol@f1+2
  6780  0610  318D  257D  3185   	fcall	___fttol
  6781  0613  0020               	movlb	0	; select bank0
  6782  0614  085B               	movf	?___fttol+3,w
  6783  0615  0021               	movlb	1	; select bank1
  6784  0616  00A7               	movwf	(ftoa@rem+3)^(0+128)
  6785  0617  0020               	movlb	0	; select bank0
  6786  0618  085A               	movf	?___fttol+2,w
  6787  0619  0021               	movlb	1	; select bank1
  6788  061A  00A6               	movwf	(ftoa@rem+2)^(0+128)
  6789  061B  0020               	movlb	0	; select bank0
  6790  061C  0859               	movf	?___fttol+1,w
  6791  061D  0021               	movlb	1	; select bank1
  6792  061E  00A5               	movwf	(ftoa@rem+1)^(0+128)
  6793  061F  0020               	movlb	0	; select bank0
  6794  0620  0858               	movf	?___fttol,w
  6795  0621  0021               	movlb	1	; select bank1
  6796  0622  00A4               	movwf	ftoa@rem^(0+128)
  6797  0623  3001               	movlw	low (STR_11| (0+32768))
  6798  0624  0020               	movlb	0	; select bank0
  6799  0625  00BB               	movwf	sprintf@f
  6800  0626  3098               	movlw	high (STR_11| (0+32768))
  6801  0627  00BC               	movwf	sprintf@f+1
  6802  0628  0021               	movlb	1	; select bank1
  6803  0629  082B               	movf	(ftoa@l+3)^(0+128),w
  6804  062A  0020               	movlb	0	; select bank0
  6805  062B  00C0               	movwf	?_sprintf+5
  6806  062C  0021               	movlb	1	; select bank1
  6807  062D  082A               	movf	(ftoa@l+2)^(0+128),w
  6808  062E  0020               	movlb	0	; select bank0
  6809  062F  00BF               	movwf	?_sprintf+4
  6810  0630  0021               	movlb	1	; select bank1
  6811  0631  0829               	movf	(ftoa@l+1)^(0+128),w
  6812  0632  0020               	movlb	0	; select bank0
  6813  0633  00BE               	movwf	?_sprintf+3
  6814  0634  0021               	movlb	1	; select bank1
  6815  0635  0828               	movf	ftoa@l^(0+128),w
  6816  0636  0020               	movlb	0	; select bank0
  6817  0637  00BD               	movwf	?_sprintf+2
  6818  0638  0021               	movlb	1	; select bank1
  6819  0639  0827               	movf	(ftoa@rem+3)^(0+128),w
  6820  063A  0020               	movlb	0	; select bank0
  6821  063B  00C4               	movwf	?_sprintf+9
  6822  063C  0021               	movlb	1	; select bank1
  6823  063D  0826               	movf	(ftoa@rem+2)^(0+128),w
  6824  063E  0020               	movlb	0	; select bank0
  6825  063F  00C3               	movwf	?_sprintf+8
  6826  0640  0021               	movlb	1	; select bank1
  6827  0641  0825               	movf	(ftoa@rem+1)^(0+128),w
  6828  0642  0020               	movlb	0	; select bank0
  6829  0643  00C2               	movwf	?_sprintf+7
  6830  0644  0021               	movlb	1	; select bank1
  6831  0645  0824               	movf	ftoa@rem^(0+128),w
  6832  0646  0020               	movlb	0	; select bank0
  6833  0647  00C1               	movwf	?_sprintf+6
  6834  0648  0021               	movlb	1	; select bank1
  6835  0649  082C               	movf	ftoa@cp^(0+128),w
  6836  064A  3180  2056         	fcall	_sprintf
  6837  064C  303C               	movlw	(low (ftoa@buf| (0+256)))& (0+255)
  6838  064D  0008               	return
  6839  064E                     __end_of_ftoa:	
  6840                           
  6841                           	psect	text26
  6842  0056                     __ptext26:	
  6843 ;; *************** function _sprintf *****************
  6844 ;; Defined at:
  6845 ;;		line 500 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\doprnt.c"
  6846 ;; Parameters:    Size  Location     Type
  6847 ;;  sp              1    wreg     PTR unsigned char 
  6848 ;;		 -> ftoa@buf(17), 
  6849 ;;  f               2   27[BANK0 ] PTR const unsigned char 
  6850 ;;		 -> STR_11(11), 
  6851 ;; Auto vars:     Size  Location     Type
  6852 ;;  sp              1   47[BANK0 ] PTR unsigned char 
  6853 ;;		 -> ftoa@buf(17), 
  6854 ;;  val             4   43[BANK0 ] unsigned long 
  6855 ;;  tmpval          4    0        struct .
  6856 ;;  prec            2   50[BANK0 ] int 
  6857 ;;  width           2   48[BANK0 ] int 
  6858 ;;  cp              2    0        PTR const unsigned char 
  6859 ;;  len             2    0        unsigned int 
  6860 ;;  c               1   52[BANK0 ] unsigned char 
  6861 ;;  ap              1   42[BANK0 ] PTR void [1]
  6862 ;;		 -> ?_sprintf(2), 
  6863 ;;  flag            1   41[BANK0 ] unsigned char 
  6864 ;; Return value:  Size  Location     Type
  6865 ;;                  2   27[BANK0 ] int 
  6866 ;; Registers used:
  6867 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+8, btemp+9, btemp+10, btemp+11, pclath, cstack
  6868 ;; Tracked objects:
  6869 ;;		On entry : 0/0
  6870 ;;		On exit  : 0/0
  6871 ;;		Unchanged: 0/0
  6872 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6873 ;;      Params:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6874 ;;      Locals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6875 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6876 ;;      Totals:         0      26       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6877 ;;Total ram usage:       26 bytes
  6878 ;; Hardware stack levels used:    1
  6879 ;; Hardware stack levels required when called:    8
  6880 ;; This function calls:
  6881 ;;		___lldiv
  6882 ;;		___llmod
  6883 ;;		___wmul
  6884 ;;		_isdigit
  6885 ;; This function is called by:
  6886 ;;		_ftoa
  6887 ;; This function uses a non-reentrant model
  6888 ;;
  6889                           
  6890                           
  6891                           ;psect for function _sprintf
  6892  0056                     _sprintf:	
  6893                           
  6894                           ;incstack = 0
  6895                           ; Regs used in _sprintf: [wreg-fsr0h+status,2+status,0+btemp+8-btemp+11+pclath+cstack]
  6896                           ;sprintf@sp stored from wreg
  6897  0056  0020               	movlb	0	; select bank0
  6898  0057  00CF               	movwf	sprintf@sp
  6899                           
  6900                           ;doprnt.c: 502: va_list ap;;doprnt.c: 507: char c;;doprnt.c: 509: int width;;doprnt.c: 5
      +                          12: int prec;;doprnt.c: 520: unsigned char flag;;doprnt.c: 535: union {;doprnt.c: 536: u
      +                          nsigned long vd;;doprnt.c: 537: double integ;;doprnt.c: 538: } tmpval;;doprnt.c: 540: un
      +                          signed long val;;doprnt.c: 541: unsigned len;;doprnt.c: 542: const char * cp;;doprnt.c: 
      +                          545: *ap = __va_start();
  6901  0058  303D               	movlw	(low ((?_sprintf| 0+2)))& (0+255)
  6902  0059  00FF               	movwf	127
  6903  005A  087F               	movf	127,w
  6904  005B  00CA               	movwf	sprintf@ap
  6905  005C                     l3953:	
  6906                           ;doprnt.c: 548: while((c = *f++)) {
  6907                           
  6908  005C  083C               	movf	sprintf@f+1,w
  6909  005D  00FF               	movwf	127
  6910  005E  083B               	movf	sprintf@f,w
  6911  005F  00FE               	movwf	126
  6912  0060  0ABB               	incf	sprintf@f,f
  6913  0061  1903               	skipnz
  6914  0062  0ABC               	incf	sprintf@f+1,f
  6915  0063  087E               	movf	126,w
  6916  0064  0084               	movwf	4
  6917  0065  087F               	movf	127,w
  6918  0066  0085               	movwf	5
  6919  0067  0800               	movf	0,w	;code access
  6920  0068  00FF               	movwf	127
  6921  0069  087F               	movf	127,w
  6922  006A  00D4               	movwf	sprintf@c
  6923  006B  0854               	movf	sprintf@c,w
  6924  006C  1903               	btfsc	3,2
  6925  006D  2A1D               	goto	l3955
  6926                           
  6927                           ;doprnt.c: 550: if(c != '%')
  6928  006E  3025               	movlw	37
  6929  006F  0654               	xorwf	sprintf@c,w
  6930  0070  1903               	btfsc	3,2
  6931  0071  287F               	goto	l3861
  6932                           
  6933                           ;doprnt.c: 552: {;doprnt.c: 553: ((*sp++ = (c)));
  6934  0072  0854               	movf	sprintf@c,w
  6935  0073  00FF               	movwf	127
  6936  0074  084F               	movf	sprintf@sp,w
  6937  0075  0084               	movwf	4
  6938  0076  3001               	movlw	1	; select bank2/3
  6939  0077  0085               	movwf	5
  6940  0078  087F               	movf	127,w
  6941  0079  0080               	movwf	0
  6942  007A  3001               	movlw	1
  6943  007B  00FF               	movwf	127
  6944  007C  087F               	movf	127,w
  6945  007D  07CF               	addwf	sprintf@sp,f
  6946                           
  6947                           ;doprnt.c: 554: continue;
  6948  007E  285C               	goto	l3953
  6949  007F                     l3861:	
  6950                           
  6951                           ;doprnt.c: 555: };doprnt.c: 558: width = 0;
  6952  007F  01D0               	clrf	sprintf@width
  6953  0080  01D1               	clrf	sprintf@width+1
  6954                           
  6955                           ;doprnt.c: 560: flag = 0;
  6956  0081  01C9               	clrf	sprintf@flag
  6957                           
  6958                           ;doprnt.c: 609: if(isdigit((unsigned)*f)) {
  6959  0082  083B               	movf	sprintf@f,w
  6960  0083  0084               	movwf	4
  6961  0084  083C               	movf	sprintf@f+1,w
  6962  0085  0085               	movwf	5
  6963  0086  0800               	movf	0,w	;code access
  6964  0087  3197  27CE  3180   	fcall	_isdigit
  6965  008A  1C03               	btfss	3,0
  6966  008B  28BD               	goto	l3875
  6967                           
  6968                           ;doprnt.c: 610: width = 0;
  6969  008C  0020               	movlb	0	; select bank0
  6970  008D  01D0               	clrf	sprintf@width
  6971  008E  01D1               	clrf	sprintf@width+1
  6972  008F                     l3867:	
  6973                           ;doprnt.c: 611: do {
  6974                           
  6975                           
  6976                           ;doprnt.c: 612: width *= 10;
  6977  008F  300A               	movlw	10
  6978  0090  00F0               	movwf	___wmul@multiplier
  6979  0091  3000               	movlw	0
  6980  0092  00F1               	movwf	___wmul@multiplier+1
  6981  0093  0020               	movlb	0	; select bank0
  6982  0094  0851               	movf	sprintf@width+1,w
  6983  0095  00F3               	movwf	___wmul@multiplicand+1
  6984  0096  0850               	movf	sprintf@width,w
  6985  0097  00F2               	movwf	___wmul@multiplicand
  6986  0098  3188  2066  3180   	fcall	___wmul
  6987  009B  0871               	movf	?___wmul+1,w
  6988  009C  0020               	movlb	0	; select bank0
  6989  009D  00D1               	movwf	sprintf@width+1
  6990  009E  0870               	movf	?___wmul,w
  6991  009F  00D0               	movwf	sprintf@width
  6992                           
  6993                           ;doprnt.c: 613: width += *f++ - '0';
  6994  00A0  083B               	movf	sprintf@f,w
  6995  00A1  0084               	movwf	4
  6996  00A2  083C               	movf	sprintf@f+1,w
  6997  00A3  0085               	movwf	5
  6998  00A4  0800               	movf	0,w	;code access
  6999  00A5  3ED0               	addlw	208
  7000  00A6  00FE               	movwf	126
  7001  00A7  30FF               	movlw	255
  7002  00A8  1803               	skipnc
  7003  00A9  3000               	movlw	0
  7004  00AA  00FF               	movwf	127
  7005  00AB  087E               	movf	126,w
  7006  00AC  07D0               	addwf	sprintf@width,f
  7007  00AD  087F               	movf	127,w
  7008  00AE  3DD1               	addwfc	sprintf@width+1,f
  7009  00AF  3001               	movlw	1
  7010  00B0  07BB               	addwf	sprintf@f,f
  7011  00B1  3000               	movlw	0
  7012  00B2  3DBC               	addwfc	sprintf@f+1,f
  7013                           
  7014                           ;doprnt.c: 614: } while(isdigit((unsigned)*f));
  7015  00B3  083B               	movf	sprintf@f,w
  7016  00B4  0084               	movwf	4
  7017  00B5  083C               	movf	sprintf@f+1,w
  7018  00B6  0085               	movwf	5
  7019  00B7  0800               	movf	0,w	;code access
  7020  00B8  3197  27CE  3180   	fcall	_isdigit
  7021  00BB  1803               	btfsc	3,0
  7022  00BC  288F               	goto	l3867
  7023  00BD                     l3875:	
  7024                           
  7025                           ;doprnt.c: 620: };doprnt.c: 623: if(*f == '.') {
  7026  00BD  0020               	movlb	0	; select bank0
  7027  00BE  083B               	movf	sprintf@f,w
  7028  00BF  0084               	movwf	4
  7029  00C0  083C               	movf	sprintf@f+1,w
  7030  00C1  0085               	movwf	5
  7031  00C2  0012               	moviw fsr0++
  7032  00C3  3A2E               	xorlw	46
  7033  00C4  1D03               	btfss	3,2
  7034  00C5  28FB               	goto	l3887
  7035                           
  7036                           ;doprnt.c: 625: f++;
  7037  00C6  3001               	movlw	1
  7038  00C7  07BB               	addwf	sprintf@f,f
  7039  00C8  3000               	movlw	0
  7040  00C9  3DBC               	addwfc	sprintf@f+1,f
  7041                           
  7042                           ;doprnt.c: 639: {;doprnt.c: 640: prec = 0;
  7043  00CA  01D2               	clrf	sprintf@prec
  7044  00CB  01D3               	clrf	sprintf@prec+1
  7045  00CC                     l3885:	
  7046                           ;doprnt.c: 641: while(isdigit((unsigned)*f))
  7047                           
  7048  00CC  083B               	movf	sprintf@f,w
  7049  00CD  0084               	movwf	4
  7050  00CE  083C               	movf	sprintf@f+1,w
  7051  00CF  0085               	movwf	5
  7052  00D0  0800               	movf	0,w	;code access
  7053  00D1  3197  27CE  3180   	fcall	_isdigit
  7054  00D4  1C03               	btfss	3,0
  7055  00D5  2906               	goto	l3893
  7056                           
  7057                           ;doprnt.c: 642: prec = prec*10 + *f++ - '0';
  7058  00D6  0020               	movlb	0	; select bank0
  7059  00D7  083B               	movf	sprintf@f,w
  7060  00D8  0084               	movwf	4
  7061  00D9  083C               	movf	sprintf@f+1,w
  7062  00DA  0085               	movwf	5
  7063  00DB  0800               	movf	0,w	;code access
  7064  00DC  00FE               	movwf	126
  7065  00DD  01FF               	clrf	127
  7066  00DE  0853               	movf	sprintf@prec+1,w
  7067  00DF  00F1               	movwf	___wmul@multiplier+1
  7068  00E0  0852               	movf	sprintf@prec,w
  7069  00E1  00F0               	movwf	___wmul@multiplier
  7070  00E2  300A               	movlw	10
  7071  00E3  00F2               	movwf	___wmul@multiplicand
  7072  00E4  3000               	movlw	0
  7073  00E5  00F3               	movwf	___wmul@multiplicand+1
  7074  00E6  3188  2066  3180   	fcall	___wmul
  7075  00E9  087E               	movf	126,w
  7076  00EA  0770               	addwf	?___wmul,w
  7077  00EB  00FC               	movwf	124
  7078  00EC  087F               	movf	127,w
  7079  00ED  3D71               	addwfc	?___wmul+1,w
  7080  00EE  00FD               	movwf	125
  7081  00EF  087C               	movf	124,w
  7082  00F0  3ED0               	addlw	208
  7083  00F1  0020               	movlb	0	; select bank0
  7084  00F2  00D2               	movwf	sprintf@prec
  7085  00F3  30FF               	movlw	255
  7086  00F4  3D7D               	addwfc	125,w
  7087  00F5  00D3               	movwf	sprintf@prec+1
  7088  00F6  3001               	movlw	1
  7089  00F7  07BB               	addwf	sprintf@f,f
  7090  00F8  3000               	movlw	0
  7091  00F9  3DBC               	addwfc	sprintf@f+1,f
  7092  00FA  28CC               	goto	l3885
  7093  00FB                     l3887:	
  7094                           ;doprnt.c: 643: };doprnt.c: 644: } else {
  7095                           
  7096                           
  7097                           ;doprnt.c: 645: prec = 0;
  7098  00FB  0020               	movlb	0	; select bank0
  7099  00FC  01D2               	clrf	sprintf@prec
  7100  00FD  01D3               	clrf	sprintf@prec+1
  7101                           
  7102                           ;doprnt.c: 654: switch(c = *f++) {
  7103                           
  7104                           ;doprnt.c: 649: };doprnt.c: 652: loop:
  7105  00FE  2906               	goto	l3893
  7106  00FF                     l457:	
  7107                           ;doprnt.c: 660: case 'l':
  7108                           
  7109                           ;doprnt.c: 657: goto alldone;
  7110                           
  7111                           ;doprnt.c: 656: case 0:
  7112                           
  7113                           
  7114                           ;doprnt.c: 662: flag |= 0x10;
  7115  00FF  1649               	bsf	sprintf@flag,4
  7116                           
  7117                           ;doprnt.c: 663: goto loop;
  7118  0100  2906               	goto	l3893
  7119  0101                     l3889:	
  7120                           ;doprnt.c: 836: case 'u':
  7121                           
  7122                           ;doprnt.c: 832: continue;
  7123                           
  7124                           ;doprnt.c: 821: default:
  7125                           
  7126                           
  7127                           ;doprnt.c: 837: flag |= 0xC0;
  7128  0101  30C0               	movlw	192
  7129  0102  00FF               	movwf	127
  7130  0103  087F               	movf	127,w
  7131  0104  04C9               	iorwf	sprintf@flag,f
  7132                           
  7133                           ;doprnt.c: 841: }
  7134                           
  7135                           ;doprnt.c: 838: break;
  7136  0105  291E               	goto	l460
  7137  0106                     l3893:	
  7138  0106  0020               	movlb	0	; select bank0
  7139  0107  083C               	movf	sprintf@f+1,w
  7140  0108  00FF               	movwf	127
  7141  0109  083B               	movf	sprintf@f,w
  7142  010A  00FE               	movwf	126
  7143  010B  0ABB               	incf	sprintf@f,f
  7144  010C  1903               	skipnz
  7145  010D  0ABC               	incf	sprintf@f+1,f
  7146  010E  087E               	movf	126,w
  7147  010F  0084               	movwf	4
  7148  0110  087F               	movf	127,w
  7149  0111  0085               	movwf	5
  7150  0112  0800               	movf	0,w	;code access
  7151  0113  00D4               	movwf	sprintf@c
  7152                           
  7153                           ; Switch size 1, requested type "space"
  7154                           ; Number of cases is 3, Range of values is 0 to 117
  7155                           ; switch strategies available:
  7156                           ; Name         Instructions Cycles
  7157                           ; simple_byte           10     6 (average)
  7158                           ; direct_byte          242     6 (fixed)
  7159                           ; jumptable            260     6 (fixed)
  7160                           ;	Chosen strategy is simple_byte
  7161  0114  3A00               	xorlw	0	; case 0
  7162  0115  1903               	skipnz
  7163  0116  2A1D               	goto	l3955
  7164  0117  3A6C               	xorlw	108	; case 108
  7165  0118  1903               	skipnz
  7166  0119  28FF               	goto	l457
  7167  011A  3A19               	xorlw	25	; case 117
  7168  011B  1903               	skipnz
  7169  011C  2901               	goto	l3889
  7170  011D  285C               	goto	l3953
  7171  011E                     l460:	
  7172                           
  7173                           ;doprnt.c: 1292: {;doprnt.c: 1300: if(flag & 0x10)
  7174  011E  1E49               	btfss	sprintf@flag,4
  7175  011F  292D               	goto	l3899
  7176                           
  7177                           ;doprnt.c: 1301: val = (*(unsigned long *)__va_arg((*(unsigned long **)ap), (unsigned lo
      +                          ng)0));
  7178  0120  084A               	movf	sprintf@ap,w
  7179  0121  0084               	movwf	4
  7180  0122  0185               	clrf	5
  7181  0123  3F00               	moviw [0]fsr0
  7182  0124  00CB               	movwf	sprintf@val
  7183  0125  3F01               	moviw [1]fsr0
  7184  0126  00CC               	movwf	sprintf@val+1
  7185  0127  3F02               	moviw [2]fsr0
  7186  0128  00CD               	movwf	sprintf@val+2
  7187  0129  3F03               	moviw [3]fsr0
  7188  012A  00CE               	movwf	sprintf@val+3
  7189  012B  3004               	movlw	4
  7190  012C  293B               	goto	L1
  7191  012D                     l3899:	
  7192                           
  7193                           ;doprnt.c: 1302: else;doprnt.c: 1305: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (
      +                          unsigned)0));
  7194  012D  084A               	movf	sprintf@ap,w
  7195  012E  0084               	movwf	4
  7196  012F  0185               	clrf	5
  7197  0130  3F00               	moviw [0]fsr0
  7198  0131  00FE               	movwf	126
  7199  0132  3F01               	moviw [1]fsr0
  7200  0133  00FF               	movwf	127
  7201  0134  087E               	movf	126,w
  7202  0135  00CB               	movwf	sprintf@val
  7203  0136  087F               	movf	127,w
  7204  0137  00CC               	movwf	sprintf@val+1
  7205  0138  01CD               	clrf	sprintf@val+2
  7206  0139  01CE               	clrf	sprintf@val+3
  7207  013A  3002               	movlw	2
  7208  013B                     L1:	
  7209  013B  00FF               	movwf	127
  7210  013C  087F               	movf	127,w
  7211  013D  07CA               	addwf	sprintf@ap,f
  7212                           
  7213                           ;doprnt.c: 1306: };doprnt.c: 1309: if(prec == 0 && val == 0)
  7214  013E  0852               	movf	sprintf@prec,w
  7215  013F  0453               	iorwf	sprintf@prec+1,w
  7216  0140  1D03               	btfss	3,2
  7217  0141  294C               	goto	l3909
  7218  0142  084E               	movf	sprintf@val+3,w
  7219  0143  044D               	iorwf	sprintf@val+2,w
  7220  0144  044C               	iorwf	sprintf@val+1,w
  7221  0145  044B               	iorwf	sprintf@val,w
  7222  0146  1D03               	skipz
  7223  0147  294C               	goto	l3909
  7224                           
  7225                           ;doprnt.c: 1310: prec++;
  7226  0148  3001               	movlw	1
  7227  0149  07D2               	addwf	sprintf@prec,f
  7228  014A  3000               	movlw	0
  7229  014B  3DD3               	addwfc	sprintf@prec+1,f
  7230  014C                     l3909:	
  7231                           
  7232                           ;doprnt.c: 1324: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  7233  014C  01D4               	clrf	sprintf@c
  7234  014D  0AD4               	incf	sprintf@c,f
  7235  014E  300A               	movlw	10
  7236  014F  0654               	xorwf	sprintf@c,w
  7237  0150  1903               	btfsc	3,2
  7238  0151  297F               	goto	l3923
  7239  0152                     l3915:	
  7240                           
  7241                           ;doprnt.c: 1325: if(val < dpowers[c])
  7242  0152  0854               	movf	sprintf@c,w
  7243  0153  00FE               	movwf	126
  7244  0154  01FF               	clrf	127
  7245  0155  35FE               	lslf	126,f
  7246  0156  0DFF               	rlf	127,f
  7247  0157  35FE               	lslf	126,f
  7248  0158  0DFF               	rlf	127,f
  7249  0159  3000               	movlw	low (_dpowers| (0+32768))
  7250  015A  077E               	addwf	126,w
  7251  015B  0084               	movwf	4
  7252  015C  3090               	movlw	high (_dpowers| (0+32768))
  7253  015D  3D7F               	addwfc	127,w
  7254  015E  0085               	movwf	5
  7255  015F  3F00               	moviw [0]fsr0
  7256  0160  00C5               	movwf	??_sprintf
  7257  0161  3F01               	moviw [1]fsr0
  7258  0162  00C6               	movwf	??_sprintf+1
  7259  0163  3F02               	moviw [2]fsr0
  7260  0164  00C7               	movwf	??_sprintf+2
  7261  0165  3F03               	moviw [3]fsr0
  7262  0166  00C8               	movwf	??_sprintf+3
  7263  0167  0848               	movf	??_sprintf+3,w
  7264  0168  024E               	subwf	sprintf@val+3,w
  7265  0169  1D03               	skipz
  7266  016A  2975               	goto	u4275
  7267  016B  0847               	movf	??_sprintf+2,w
  7268  016C  024D               	subwf	sprintf@val+2,w
  7269  016D  1D03               	skipz
  7270  016E  2975               	goto	u4275
  7271  016F  0846               	movf	??_sprintf+1,w
  7272  0170  024C               	subwf	sprintf@val+1,w
  7273  0171  1D03               	skipz
  7274  0172  2975               	goto	u4275
  7275  0173  0845               	movf	??_sprintf,w
  7276  0174  024B               	subwf	sprintf@val,w
  7277  0175                     u4275:	
  7278  0175  1C03               	btfss	3,0
  7279  0176  297F               	goto	l3923
  7280                           
  7281                           ;doprnt.c: 1326: break;
  7282  0177  3001               	movlw	1
  7283  0178  00FF               	movwf	127
  7284  0179  087F               	movf	127,w
  7285  017A  07D4               	addwf	sprintf@c,f
  7286  017B  300A               	movlw	10
  7287  017C  0654               	xorwf	sprintf@c,w
  7288  017D  1D03               	btfss	3,2
  7289  017E  2952               	goto	l3915
  7290  017F                     l3923:	
  7291                           
  7292                           ;doprnt.c: 1358: if(c < prec)
  7293  017F  0853               	movf	sprintf@prec+1,w
  7294  0180  3A80               	xorlw	128
  7295  0181  3C80               	sublw	128
  7296  0182  1D03               	skipz
  7297  0183  2986               	goto	u4295
  7298  0184  0852               	movf	sprintf@prec,w
  7299  0185  0254               	subwf	sprintf@c,w
  7300  0186                     u4295:	
  7301  0186  1803               	skipnc
  7302  0187  298E               	goto	l3927
  7303                           
  7304                           ;doprnt.c: 1359: c = prec;
  7305  0188  0020               	movlb	0	; select bank0
  7306  0189  0852               	movf	sprintf@prec,w
  7307  018A  00FF               	movwf	127
  7308  018B  087F               	movf	127,w
  7309  018C  00D4               	movwf	sprintf@c
  7310  018D  29A2               	goto	l3931
  7311  018E                     l3927:	
  7312                           
  7313                           ;doprnt.c: 1360: else if(prec < c)
  7314  018E  0020               	movlb	0	; select bank0
  7315  018F  0853               	movf	sprintf@prec+1,w
  7316  0190  3A80               	xorlw	128
  7317  0191  00C5               	movwf	??_sprintf
  7318  0192  3080               	movlw	128
  7319  0193  0245               	subwf	??_sprintf,w
  7320  0194  1D03               	skipz
  7321  0195  2998               	goto	u4305
  7322  0196  0854               	movf	sprintf@c,w
  7323  0197  0252               	subwf	sprintf@prec,w
  7324  0198                     u4305:	
  7325  0198  1803               	skipnc
  7326  0199  29A2               	goto	l3931
  7327                           
  7328                           ;doprnt.c: 1361: prec = c;
  7329  019A  0020               	movlb	0	; select bank0
  7330  019B  0854               	movf	sprintf@c,w
  7331  019C  00FE               	movwf	126
  7332  019D  01FF               	clrf	127
  7333  019E  087E               	movf	126,w
  7334  019F  00D2               	movwf	sprintf@prec
  7335  01A0  087F               	movf	127,w
  7336  01A1  00D3               	movwf	sprintf@prec+1
  7337  01A2                     l3931:	
  7338                           
  7339                           ;doprnt.c: 1400: if(width > c)
  7340  01A2  0020               	movlb	0	; select bank0
  7341  01A3  0851               	movf	sprintf@width+1,w
  7342  01A4  3A80               	xorlw	128
  7343  01A5  3C80               	sublw	128
  7344  01A6  1D03               	skipz
  7345  01A7  29AA               	goto	u4315
  7346  01A8  0850               	movf	sprintf@width,w
  7347  01A9  0254               	subwf	sprintf@c,w
  7348  01AA                     u4315:	
  7349  01AA  1803               	skipnc
  7350  01AB  29B5               	goto	l3935
  7351                           
  7352                           ;doprnt.c: 1401: width -= c;
  7353  01AC  0020               	movlb	0	; select bank0
  7354  01AD  0854               	movf	sprintf@c,w
  7355  01AE  00FE               	movwf	126
  7356  01AF  01FF               	clrf	127
  7357  01B0  087E               	movf	126,w
  7358  01B1  02D0               	subwf	sprintf@width,f
  7359  01B2  087F               	movf	127,w
  7360  01B3  3BD1               	subwfb	sprintf@width+1,f
  7361  01B4  29B8               	goto	l3937
  7362  01B5                     l3935:	
  7363                           
  7364                           ;doprnt.c: 1402: else;doprnt.c: 1403: width = 0;
  7365  01B5  0020               	movlb	0	; select bank0
  7366  01B6  01D0               	clrf	sprintf@width
  7367  01B7  01D1               	clrf	sprintf@width+1
  7368  01B8                     l3937:	
  7369                           
  7370                           ;doprnt.c: 1441: {;doprnt.c: 1443: if(width;doprnt.c: 1447: )
  7371  01B8  0850               	movf	sprintf@width,w
  7372  01B9  0451               	iorwf	sprintf@width+1,w
  7373  01BA  1903               	btfsc	3,2
  7374  01BB  2A12               	goto	l3951
  7375                           
  7376                           ;doprnt.c: 1449: ((*sp++ = (' ')));
  7377                           
  7378                           ;doprnt.c: 1448: do
  7379  01BC  3020               	movlw	32
  7380  01BD  00FF               	movwf	127
  7381  01BE  084F               	movf	sprintf@sp,w
  7382  01BF  0084               	movwf	4
  7383  01C0  3001               	movlw	1	; select bank2/3
  7384  01C1  0085               	movwf	5
  7385  01C2  087F               	movf	127,w
  7386  01C3  0080               	movwf	0
  7387  01C4  3001               	movlw	1
  7388  01C5  00FF               	movwf	127
  7389  01C6  087F               	movf	127,w
  7390  01C7  07CF               	addwf	sprintf@sp,f
  7391                           
  7392                           ;doprnt.c: 1450: while(--width);
  7393  01C8  30FF               	movlw	255
  7394  01C9  07D0               	addwf	sprintf@width,f
  7395  01CA  30FF               	movlw	255
  7396  01CB  3DD1               	addwfc	sprintf@width+1,f
  7397  01CC  29B8               	goto	l3937
  7398  01CD                     l3945:	
  7399                           ;doprnt.c: 1488: };doprnt.c: 1493: while(prec--) {
  7400                           
  7401                           
  7402                           ;doprnt.c: 1497: {;doprnt.c: 1508: c = (val / dpowers[prec]) % 10 + '0';
  7403  01CD  3000               	movlw	0
  7404  01CE  00B6               	movwf	___llmod@divisor+3
  7405  01CF  3000               	movlw	0
  7406  01D0  00B5               	movwf	___llmod@divisor+2
  7407  01D1  3000               	movlw	0
  7408  01D2  00B4               	movwf	___llmod@divisor+1
  7409  01D3  300A               	movlw	10
  7410  01D4  00B3               	movwf	___llmod@divisor
  7411  01D5  0853               	movf	sprintf@prec+1,w
  7412  01D6  0085               	movwf	5
  7413  01D7  0852               	movf	sprintf@prec,w
  7414  01D8  0084               	movwf	4
  7415  01D9  3584               	lslf	4,f
  7416  01DA  0D85               	rlf	5,f
  7417  01DB  3584               	lslf	4,f
  7418  01DC  0D85               	rlf	5,f
  7419  01DD  3000               	movlw	low (_dpowers| (0+32768))
  7420  01DE  0784               	addwf	4,f
  7421  01DF  3090               	movlw	high (_dpowers| (0+32768))
  7422  01E0  3D85               	addwfc	5,f
  7423  01E1  3F00               	moviw [0]fsr0
  7424  01E2  00A6               	movwf	___lldiv@divisor
  7425  01E3  3F01               	moviw [1]fsr0
  7426  01E4  00A7               	movwf	___lldiv@divisor+1
  7427  01E5  3F02               	moviw [2]fsr0
  7428  01E6  00A8               	movwf	___lldiv@divisor+2
  7429  01E7  3F03               	moviw [3]fsr0
  7430  01E8  00A9               	movwf	___lldiv@divisor+3
  7431  01E9  084E               	movf	sprintf@val+3,w
  7432  01EA  00AD               	movwf	___lldiv@dividend+3
  7433  01EB  084D               	movf	sprintf@val+2,w
  7434  01EC  00AC               	movwf	___lldiv@dividend+2
  7435  01ED  084C               	movf	sprintf@val+1,w
  7436  01EE  00AB               	movwf	___lldiv@dividend+1
  7437  01EF  084B               	movf	sprintf@val,w
  7438  01F0  00AA               	movwf	___lldiv@dividend
  7439  01F1  318C  243F  3180   	fcall	___lldiv
  7440  01F4  0020               	movlb	0	; select bank0
  7441  01F5  0829               	movf	?___lldiv+3,w
  7442  01F6  00BA               	movwf	___llmod@dividend+3
  7443  01F7  0828               	movf	?___lldiv+2,w
  7444  01F8  00B9               	movwf	___llmod@dividend+2
  7445  01F9  0827               	movf	?___lldiv+1,w
  7446  01FA  00B8               	movwf	___llmod@dividend+1
  7447  01FB  0826               	movf	?___lldiv,w
  7448  01FC  00B7               	movwf	___llmod@dividend
  7449  01FD  318B  2372  3180   	fcall	___llmod
  7450  0200  0020               	movlb	0	; select bank0
  7451  0201  0833               	movf	?___llmod,w
  7452  0202  3E30               	addlw	48
  7453  0203  00FF               	movwf	127
  7454  0204  087F               	movf	127,w
  7455  0205  00D4               	movwf	sprintf@c
  7456                           
  7457                           ;doprnt.c: 1542: };doprnt.c: 1543: ((*sp++ = (c)));
  7458  0206  0854               	movf	sprintf@c,w
  7459  0207  00FF               	movwf	127
  7460  0208  084F               	movf	sprintf@sp,w
  7461  0209  0084               	movwf	4
  7462  020A  3001               	movlw	1	; select bank2/3
  7463  020B  0085               	movwf	5
  7464  020C  087F               	movf	127,w
  7465  020D  0080               	movwf	0
  7466  020E  3001               	movlw	1
  7467  020F  00FF               	movwf	127
  7468  0210  087F               	movf	127,w
  7469  0211  07CF               	addwf	sprintf@sp,f
  7470  0212                     l3951:	
  7471  0212  30FF               	movlw	255
  7472  0213  07D2               	addwf	sprintf@prec,f
  7473  0214  30FF               	movlw	255
  7474  0215  3DD3               	addwfc	sprintf@prec+1,f
  7475  0216  0A52               	incf	sprintf@prec,w
  7476  0217  1D03               	skipz
  7477  0218  29CD               	goto	l3945
  7478  0219  0A53               	incf	sprintf@prec+1,w
  7479  021A  1903               	btfsc	3,2
  7480  021B  285C               	goto	l3953
  7481  021C  29CD               	goto	l3945
  7482  021D                     l3955:	
  7483                           ;doprnt.c: 1544: };doprnt.c: 1552: };doprnt.c: 1554: alldone:
  7484                           
  7485                           
  7486                           ;doprnt.c: 1557: *sp = 0;
  7487  021D  084F               	movf	sprintf@sp,w
  7488  021E  0084               	movwf	4
  7489  021F  3001               	movlw	1	; select bank2/3
  7490  0220  0085               	movwf	5
  7491  0221  0180               	clrf	0
  7492  0222  0008               	return
  7493  0223                     __end_of_sprintf:	
  7494                           ;doprnt.c: 1559: return 0;;	Return value of _sprintf is never used
  7495                           
  7496                           
  7497                           	psect	text27
  7498  17CE                     __ptext27:	
  7499 ;; *************** function _isdigit *****************
  7500 ;; Defined at:
  7501 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\isdigit.c"
  7502 ;; Parameters:    Size  Location     Type
  7503 ;;  c               1    wreg     unsigned char 
  7504 ;; Auto vars:     Size  Location     Type
  7505 ;;  c               1    1[COMMON] unsigned char 
  7506 ;; Return value:  Size  Location     Type
  7507 ;;		None               void
  7508 ;; Registers used:
  7509 ;;		wreg, status,2, status,0
  7510 ;; Tracked objects:
  7511 ;;		On entry : 0/0
  7512 ;;		On exit  : 0/0
  7513 ;;		Unchanged: 0/0
  7514 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7515 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7516 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7517 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7518 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7519 ;;Total ram usage:        2 bytes
  7520 ;; Hardware stack levels used:    1
  7521 ;; Hardware stack levels required when called:    7
  7522 ;; This function calls:
  7523 ;;		Nothing
  7524 ;; This function is called by:
  7525 ;;		_sprintf
  7526 ;; This function uses a non-reentrant model
  7527 ;;
  7528                           
  7529                           
  7530                           ;psect for function _isdigit
  7531  17CE                     _isdigit:	
  7532                           
  7533                           ;incstack = 0
  7534                           ; Regs used in _isdigit: [wreg+status,2+status,0]
  7535                           ;isdigit@c stored from wreg
  7536  17CE  00F1               	movwf	isdigit@c
  7537  17CF  01F0               	clrf	_isdigit$1815
  7538  17D0  303A               	movlw	58
  7539  17D1  0271               	subwf	isdigit@c,w
  7540  17D2  1803               	skipnc
  7541  17D3  2FDA               	goto	l3641
  7542  17D4  3030               	movlw	48
  7543  17D5  0271               	subwf	isdigit@c,w
  7544  17D6  1C03               	skipc
  7545  17D7  2FDA               	goto	l3641
  7546  17D8  01F0               	clrf	_isdigit$1815
  7547  17D9  0AF0               	incf	_isdigit$1815,f
  7548  17DA                     l3641:	
  7549  17DA  0C70               	rrf	_isdigit$1815,w
  7550  17DB  0008               	return
  7551  17DC                     __end_of_isdigit:	
  7552                           
  7553                           	psect	text28
  7554  0866                     __ptext28:	
  7555 ;; *************** function ___wmul *****************
  7556 ;; Defined at:
  7557 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\Umul16.c"
  7558 ;; Parameters:    Size  Location     Type
  7559 ;;  multiplier      2    0[COMMON] unsigned int 
  7560 ;;  multiplicand    2    2[COMMON] unsigned int 
  7561 ;; Auto vars:     Size  Location     Type
  7562 ;;  product         2    6[BANK0 ] unsigned int 
  7563 ;; Return value:  Size  Location     Type
  7564 ;;                  2    0[COMMON] unsigned int 
  7565 ;; Registers used:
  7566 ;;		wreg, status,2, status,0
  7567 ;; Tracked objects:
  7568 ;;		On entry : 0/0
  7569 ;;		On exit  : 0/0
  7570 ;;		Unchanged: 0/0
  7571 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7572 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7573 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7574 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7575 ;;      Totals:         4       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7576 ;;Total ram usage:        6 bytes
  7577 ;; Hardware stack levels used:    1
  7578 ;; Hardware stack levels required when called:    7
  7579 ;; This function calls:
  7580 ;;		Nothing
  7581 ;; This function is called by:
  7582 ;;		_sprintf
  7583 ;; This function uses a non-reentrant model
  7584 ;;
  7585                           
  7586                           
  7587                           ;psect for function ___wmul
  7588  0866                     ___wmul:	
  7589                           
  7590                           ;incstack = 0
  7591                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  7592  0866  0020               	movlb	0	; select bank0
  7593  0867  01A6               	clrf	___wmul@product
  7594  0868  01A7               	clrf	___wmul@product+1
  7595  0869                     l3647:	
  7596  0869  1C70               	btfss	___wmul@multiplier,0
  7597  086A  2870               	goto	l483
  7598  086B  0872               	movf	___wmul@multiplicand,w
  7599  086C  0020               	movlb	0	; select bank0
  7600  086D  07A6               	addwf	___wmul@product,f
  7601  086E  0873               	movf	___wmul@multiplicand+1,w
  7602  086F  3DA7               	addwfc	___wmul@product+1,f
  7603  0870                     l483:	
  7604  0870  3001               	movlw	1
  7605  0871                     u3655:	
  7606  0871  35F2               	lslf	___wmul@multiplicand,f
  7607  0872  0DF3               	rlf	___wmul@multiplicand+1,f
  7608  0873  0B89               	decfsz	9,f
  7609  0874  2871               	goto	u3655
  7610  0875  3001               	movlw	1
  7611  0876                     u3665:	
  7612  0876  36F1               	lsrf	___wmul@multiplier+1,f
  7613  0877  0CF0               	rrf	___wmul@multiplier,f
  7614  0878  0B89               	decfsz	9,f
  7615  0879  2876               	goto	u3665
  7616  087A  0870               	movf	___wmul@multiplier,w
  7617  087B  0471               	iorwf	___wmul@multiplier+1,w
  7618  087C  1D03               	btfss	3,2
  7619  087D  2869               	goto	l3647
  7620  087E  0020               	movlb	0	; select bank0
  7621  087F  0827               	movf	___wmul@product+1,w
  7622  0880  00F1               	movwf	?___wmul+1
  7623  0881  0826               	movf	___wmul@product,w
  7624  0882  00F0               	movwf	?___wmul
  7625  0883  0008               	return
  7626  0884                     __end_of___wmul:	
  7627                           
  7628                           	psect	text29
  7629  0B72                     __ptext29:	
  7630 ;; *************** function ___llmod *****************
  7631 ;; Defined at:
  7632 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\llmod.c"
  7633 ;; Parameters:    Size  Location     Type
  7634 ;;  divisor         4   19[BANK0 ] unsigned long 
  7635 ;;  dividend        4   23[BANK0 ] unsigned long 
  7636 ;; Auto vars:     Size  Location     Type
  7637 ;;  counter         1    0[COMMON] unsigned char 
  7638 ;; Return value:  Size  Location     Type
  7639 ;;                  4   19[BANK0 ] unsigned long 
  7640 ;; Registers used:
  7641 ;;		wreg, status,2, status,0, btemp+11
  7642 ;; Tracked objects:
  7643 ;;		On entry : 0/0
  7644 ;;		On exit  : 0/0
  7645 ;;		Unchanged: 0/0
  7646 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7647 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7648 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7649 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7650 ;;      Totals:         1       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7651 ;;Total ram usage:        9 bytes
  7652 ;; Hardware stack levels used:    1
  7653 ;; Hardware stack levels required when called:    7
  7654 ;; This function calls:
  7655 ;;		Nothing
  7656 ;; This function is called by:
  7657 ;;		_sprintf
  7658 ;; This function uses a non-reentrant model
  7659 ;;
  7660                           
  7661                           
  7662                           ;psect for function ___llmod
  7663  0B72                     ___llmod:	
  7664                           
  7665                           ;incstack = 0
  7666                           ; Regs used in ___llmod: [wreg+status,2+status,0+btemp+11]
  7667  0B72  0020               	movlb	0	; select bank0
  7668  0B73  0836               	movf	___llmod@divisor+3,w
  7669  0B74  0435               	iorwf	___llmod@divisor+2,w
  7670  0B75  0434               	iorwf	___llmod@divisor+1,w
  7671  0B76  0433               	iorwf	___llmod@divisor,w
  7672  0B77  1903               	skipnz
  7673  0B78  2BAC               	goto	l3779
  7674  0B79  01F0               	clrf	___llmod@counter
  7675  0B7A  0AF0               	incf	___llmod@counter,f
  7676  0B7B                     l3769:	
  7677  0B7B  1BB6               	btfsc	___llmod@divisor+3,7
  7678  0B7C  2B89               	goto	l3771
  7679  0B7D  3001               	movlw	1
  7680  0B7E                     u3995:	
  7681  0B7E  35B3               	lslf	___llmod@divisor,f
  7682  0B7F  0DB4               	rlf	___llmod@divisor+1,f
  7683  0B80  0DB5               	rlf	___llmod@divisor+2,f
  7684  0B81  0DB6               	rlf	___llmod@divisor+3,f
  7685  0B82  0B89               	decfsz	9,f
  7686  0B83  2B7E               	goto	u3995
  7687  0B84  3001               	movlw	1
  7688  0B85  00FF               	movwf	127
  7689  0B86  087F               	movf	127,w
  7690  0B87  07F0               	addwf	___llmod@counter,f
  7691  0B88  2B7B               	goto	l3769
  7692  0B89                     l3771:	
  7693  0B89  0836               	movf	___llmod@divisor+3,w
  7694  0B8A  023A               	subwf	___llmod@dividend+3,w
  7695  0B8B  1D03               	skipz
  7696  0B8C  2B97               	goto	u4015
  7697  0B8D  0835               	movf	___llmod@divisor+2,w
  7698  0B8E  0239               	subwf	___llmod@dividend+2,w
  7699  0B8F  1D03               	skipz
  7700  0B90  2B97               	goto	u4015
  7701  0B91  0834               	movf	___llmod@divisor+1,w
  7702  0B92  0238               	subwf	___llmod@dividend+1,w
  7703  0B93  1D03               	skipz
  7704  0B94  2B97               	goto	u4015
  7705  0B95  0833               	movf	___llmod@divisor,w
  7706  0B96  0237               	subwf	___llmod@dividend,w
  7707  0B97                     u4015:	
  7708  0B97  1C03               	skipc
  7709  0B98  2BA1               	goto	l3775
  7710  0B99  0833               	movf	___llmod@divisor,w
  7711  0B9A  02B7               	subwf	___llmod@dividend,f
  7712  0B9B  0834               	movf	___llmod@divisor+1,w
  7713  0B9C  3BB8               	subwfb	___llmod@dividend+1,f
  7714  0B9D  0835               	movf	___llmod@divisor+2,w
  7715  0B9E  3BB9               	subwfb	___llmod@dividend+2,f
  7716  0B9F  0836               	movf	___llmod@divisor+3,w
  7717  0BA0  3BBA               	subwfb	___llmod@dividend+3,f
  7718  0BA1                     l3775:	
  7719  0BA1  3001               	movlw	1
  7720  0BA2                     u4025:	
  7721  0BA2  36B6               	lsrf	___llmod@divisor+3,f
  7722  0BA3  0CB5               	rrf	___llmod@divisor+2,f
  7723  0BA4  0CB4               	rrf	___llmod@divisor+1,f
  7724  0BA5  0CB3               	rrf	___llmod@divisor,f
  7725  0BA6  0B89               	decfsz	9,f
  7726  0BA7  2BA2               	goto	u4025
  7727  0BA8  3001               	movlw	1
  7728  0BA9  02F0               	subwf	___llmod@counter,f
  7729  0BAA  1D03               	btfss	3,2
  7730  0BAB  2B89               	goto	l3771
  7731  0BAC                     l3779:	
  7732  0BAC  083A               	movf	___llmod@dividend+3,w
  7733  0BAD  00B6               	movwf	?___llmod+3
  7734  0BAE  0839               	movf	___llmod@dividend+2,w
  7735  0BAF  00B5               	movwf	?___llmod+2
  7736  0BB0  0838               	movf	___llmod@dividend+1,w
  7737  0BB1  00B4               	movwf	?___llmod+1
  7738  0BB2  0837               	movf	___llmod@dividend,w
  7739  0BB3  00B3               	movwf	?___llmod
  7740  0BB4  0008               	return
  7741  0BB5                     __end_of___llmod:	
  7742                           
  7743                           	psect	text30
  7744  0C3F                     __ptext30:	
  7745 ;; *************** function ___lldiv *****************
  7746 ;; Defined at:
  7747 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\__lldiv.c"
  7748 ;; Parameters:    Size  Location     Type
  7749 ;;  divisor         4    6[BANK0 ] unsigned long 
  7750 ;;  dividend        4   10[BANK0 ] unsigned long 
  7751 ;; Auto vars:     Size  Location     Type
  7752 ;;  quotient        4   14[BANK0 ] unsigned long 
  7753 ;;  counter         1   18[BANK0 ] unsigned char 
  7754 ;; Return value:  Size  Location     Type
  7755 ;;                  4    6[BANK0 ] unsigned long 
  7756 ;; Registers used:
  7757 ;;		wreg, status,2, status,0, btemp+11
  7758 ;; Tracked objects:
  7759 ;;		On entry : 0/0
  7760 ;;		On exit  : 0/0
  7761 ;;		Unchanged: 0/0
  7762 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7763 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7764 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7765 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7766 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7767 ;;Total ram usage:       13 bytes
  7768 ;; Hardware stack levels used:    1
  7769 ;; Hardware stack levels required when called:    7
  7770 ;; This function calls:
  7771 ;;		Nothing
  7772 ;; This function is called by:
  7773 ;;		_sprintf
  7774 ;; This function uses a non-reentrant model
  7775 ;;
  7776                           
  7777                           
  7778                           ;psect for function ___lldiv
  7779  0C3F                     ___lldiv:	
  7780                           
  7781                           ;incstack = 0
  7782                           ; Regs used in ___lldiv: [wreg+status,2+status,0+btemp+11]
  7783  0C3F  3000               	movlw	0
  7784  0C40  0020               	movlb	0	; select bank0
  7785  0C41  00B1               	movwf	___lldiv@quotient+3
  7786  0C42  3000               	movlw	0
  7787  0C43  00B0               	movwf	___lldiv@quotient+2
  7788  0C44  3000               	movlw	0
  7789  0C45  00AF               	movwf	___lldiv@quotient+1
  7790  0C46  3000               	movlw	0
  7791  0C47  00AE               	movwf	___lldiv@quotient
  7792  0C48  0829               	movf	___lldiv@divisor+3,w
  7793  0C49  0428               	iorwf	___lldiv@divisor+2,w
  7794  0C4A  0427               	iorwf	___lldiv@divisor+1,w
  7795  0C4B  0426               	iorwf	___lldiv@divisor,w
  7796  0C4C  1903               	skipnz
  7797  0C4D  2C89               	goto	l3681
  7798  0C4E  01B2               	clrf	___lldiv@counter
  7799  0C4F  0AB2               	incf	___lldiv@counter,f
  7800  0C50                     l3667:	
  7801  0C50  1BA9               	btfsc	___lldiv@divisor+3,7
  7802  0C51  2C5E               	goto	l3669
  7803  0C52  3001               	movlw	1
  7804  0C53                     u3695:	
  7805  0C53  35A6               	lslf	___lldiv@divisor,f
  7806  0C54  0DA7               	rlf	___lldiv@divisor+1,f
  7807  0C55  0DA8               	rlf	___lldiv@divisor+2,f
  7808  0C56  0DA9               	rlf	___lldiv@divisor+3,f
  7809  0C57  0B89               	decfsz	9,f
  7810  0C58  2C53               	goto	u3695
  7811  0C59  3001               	movlw	1
  7812  0C5A  00FF               	movwf	127
  7813  0C5B  087F               	movf	127,w
  7814  0C5C  07B2               	addwf	___lldiv@counter,f
  7815  0C5D  2C50               	goto	l3667
  7816  0C5E                     l3669:	
  7817  0C5E  3001               	movlw	1
  7818  0C5F                     u3715:	
  7819  0C5F  35AE               	lslf	___lldiv@quotient,f
  7820  0C60  0DAF               	rlf	___lldiv@quotient+1,f
  7821  0C61  0DB0               	rlf	___lldiv@quotient+2,f
  7822  0C62  0DB1               	rlf	___lldiv@quotient+3,f
  7823  0C63  0B89               	decfsz	9,f
  7824  0C64  2C5F               	goto	u3715
  7825  0C65  0829               	movf	___lldiv@divisor+3,w
  7826  0C66  022D               	subwf	___lldiv@dividend+3,w
  7827  0C67  1D03               	skipz
  7828  0C68  2C73               	goto	u3725
  7829  0C69  0828               	movf	___lldiv@divisor+2,w
  7830  0C6A  022C               	subwf	___lldiv@dividend+2,w
  7831  0C6B  1D03               	skipz
  7832  0C6C  2C73               	goto	u3725
  7833  0C6D  0827               	movf	___lldiv@divisor+1,w
  7834  0C6E  022B               	subwf	___lldiv@dividend+1,w
  7835  0C6F  1D03               	skipz
  7836  0C70  2C73               	goto	u3725
  7837  0C71  0826               	movf	___lldiv@divisor,w
  7838  0C72  022A               	subwf	___lldiv@dividend,w
  7839  0C73                     u3725:	
  7840  0C73  1C03               	skipc
  7841  0C74  2C7E               	goto	l3677
  7842  0C75  0826               	movf	___lldiv@divisor,w
  7843  0C76  02AA               	subwf	___lldiv@dividend,f
  7844  0C77  0827               	movf	___lldiv@divisor+1,w
  7845  0C78  3BAB               	subwfb	___lldiv@dividend+1,f
  7846  0C79  0828               	movf	___lldiv@divisor+2,w
  7847  0C7A  3BAC               	subwfb	___lldiv@dividend+2,f
  7848  0C7B  0829               	movf	___lldiv@divisor+3,w
  7849  0C7C  3BAD               	subwfb	___lldiv@dividend+3,f
  7850  0C7D  142E               	bsf	___lldiv@quotient,0
  7851  0C7E                     l3677:	
  7852  0C7E  3001               	movlw	1
  7853  0C7F                     u3735:	
  7854  0C7F  36A9               	lsrf	___lldiv@divisor+3,f
  7855  0C80  0CA8               	rrf	___lldiv@divisor+2,f
  7856  0C81  0CA7               	rrf	___lldiv@divisor+1,f
  7857  0C82  0CA6               	rrf	___lldiv@divisor,f
  7858  0C83  0B89               	decfsz	9,f
  7859  0C84  2C7F               	goto	u3735
  7860  0C85  3001               	movlw	1
  7861  0C86  02B2               	subwf	___lldiv@counter,f
  7862  0C87  1D03               	btfss	3,2
  7863  0C88  2C5E               	goto	l3669
  7864  0C89                     l3681:	
  7865  0C89  0831               	movf	___lldiv@quotient+3,w
  7866  0C8A  00A9               	movwf	?___lldiv+3
  7867  0C8B  0830               	movf	___lldiv@quotient+2,w
  7868  0C8C  00A8               	movwf	?___lldiv+2
  7869  0C8D  082F               	movf	___lldiv@quotient+1,w
  7870  0C8E  00A7               	movwf	?___lldiv+1
  7871  0C8F  082E               	movf	___lldiv@quotient,w
  7872  0C90  00A6               	movwf	?___lldiv
  7873  0C91  0008               	return
  7874  0C92                     __end_of___lldiv:	
  7875                           
  7876                           	psect	text31
  7877  09AD                     __ptext31:	
  7878 ;; *************** function ___lltoft *****************
  7879 ;; Defined at:
  7880 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\lltoft.c"
  7881 ;; Parameters:    Size  Location     Type
  7882 ;;  c               4    0[COMMON] unsigned long 
  7883 ;; Auto vars:     Size  Location     Type
  7884 ;;  exp             1   11[BANK0 ] unsigned char 
  7885 ;; Return value:  Size  Location     Type
  7886 ;;                  3    0[COMMON] float 
  7887 ;; Registers used:
  7888 ;;		wreg, status,2, status,0, btemp+9, btemp+10, btemp+11, pclath, cstack
  7889 ;; Tracked objects:
  7890 ;;		On entry : 0/0
  7891 ;;		On exit  : 0/0
  7892 ;;		Unchanged: 0/0
  7893 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7894 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7895 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7896 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7897 ;;      Totals:         4       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7898 ;;Total ram usage:        5 bytes
  7899 ;; Hardware stack levels used:    1
  7900 ;; Hardware stack levels required when called:    8
  7901 ;; This function calls:
  7902 ;;		___ftpack
  7903 ;; This function is called by:
  7904 ;;		_loop
  7905 ;;		_ftoa
  7906 ;; This function uses a non-reentrant model
  7907 ;;
  7908                           
  7909                           
  7910                           ;psect for function ___lltoft
  7911  09AD                     ___lltoft:	
  7912                           
  7913                           ;incstack = 0
  7914                           ; Regs used in ___lltoft: [wreg+status,2+status,0+btemp+9-btemp+11+pclath+cstack]
  7915  09AD  308E               	movlw	142
  7916  09AE  00FF               	movwf	127
  7917  09AF  087F               	movf	127,w
  7918  09B0  0020               	movlb	0	; select bank0
  7919  09B1  00AB               	movwf	___lltoft@exp
  7920  09B2                     l4115:	
  7921  09B2  30FF               	movlw	255
  7922  09B3  0573               	andwf	___lltoft@c+3,w
  7923  09B4  1903               	btfsc	3,2
  7924  09B5  29C2               	goto	l4117
  7925  09B6  3001               	movlw	1
  7926  09B7                     u4655:	
  7927  09B7  36F3               	lsrf	___lltoft@c+3,f
  7928  09B8  0CF2               	rrf	___lltoft@c+2,f
  7929  09B9  0CF1               	rrf	___lltoft@c+1,f
  7930  09BA  0CF0               	rrf	___lltoft@c,f
  7931  09BB  0B89               	decfsz	9,f
  7932  09BC  29B7               	goto	u4655
  7933  09BD  3001               	movlw	1
  7934  09BE  00FF               	movwf	127
  7935  09BF  087F               	movf	127,w
  7936  09C0  07AB               	addwf	___lltoft@exp,f
  7937  09C1  29B2               	goto	l4115
  7938  09C2                     l4117:	
  7939  09C2  0870               	movf	___lltoft@c,w
  7940  09C3  00A6               	movwf	___ftpack@arg
  7941  09C4  0871               	movf	___lltoft@c+1,w
  7942  09C5  00A7               	movwf	___ftpack@arg+1
  7943  09C6  0872               	movf	___lltoft@c+2,w
  7944  09C7  00A8               	movwf	___ftpack@arg+2
  7945  09C8  082B               	movf	___lltoft@exp,w
  7946  09C9  00FF               	movwf	127
  7947  09CA  087F               	movf	127,w
  7948  09CB  00A9               	movwf	___ftpack@exp
  7949  09CC  01AA               	clrf	___ftpack@sign
  7950  09CD  318C  2492         	fcall	___ftpack
  7951  09CF  0020               	movlb	0	; select bank0
  7952  09D0  0826               	movf	?___ftpack,w
  7953  09D1  00F0               	movwf	?___lltoft
  7954  09D2  0827               	movf	?___ftpack+1,w
  7955  09D3  00F1               	movwf	?___lltoft+1
  7956  09D4  0828               	movf	?___ftpack+2,w
  7957  09D5  00F2               	movwf	?___lltoft+2
  7958  09D6  0008               	return
  7959  09D7                     __end_of___lltoft:	
  7960                           
  7961                           	psect	text32
  7962  0D7D                     __ptext32:	
  7963 ;; *************** function ___fttol *****************
  7964 ;; Defined at:
  7965 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\fttol.c"
  7966 ;; Parameters:    Size  Location     Type
  7967 ;;  f1              3   56[BANK0 ] float 
  7968 ;; Auto vars:     Size  Location     Type
  7969 ;;  lval            4   61[BANK0 ] unsigned long 
  7970 ;;  exp1            1   65[BANK0 ] unsigned char 
  7971 ;;  sign1           1   60[BANK0 ] unsigned char 
  7972 ;; Return value:  Size  Location     Type
  7973 ;;                  4   56[BANK0 ] long 
  7974 ;; Registers used:
  7975 ;;		wreg, status,2, status,0, btemp+9, btemp+10, btemp+11
  7976 ;; Tracked objects:
  7977 ;;		On entry : 0/0
  7978 ;;		On exit  : 0/0
  7979 ;;		Unchanged: 0/0
  7980 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7981 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7982 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7983 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7984 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7985 ;;Total ram usage:       10 bytes
  7986 ;; Hardware stack levels used:    1
  7987 ;; Hardware stack levels required when called:    7
  7988 ;; This function calls:
  7989 ;;		Nothing
  7990 ;; This function is called by:
  7991 ;;		_ftoa
  7992 ;; This function uses a non-reentrant model
  7993 ;;
  7994                           
  7995                           
  7996                           ;psect for function ___fttol
  7997  0D7D                     ___fttol:	
  7998                           
  7999                           ;incstack = 0
  8000                           ; Regs used in ___fttol: [wreg+status,2+status,0+btemp+9-btemp+11]
  8001  0D7D  0020               	movlb	0	; select bank0
  8002  0D7E  0858               	movf	___fttol@f1,w
  8003  0D7F  00FD               	movwf	125
  8004  0D80  0859               	movf	___fttol@f1+1,w
  8005  0D81  00FE               	movwf	126
  8006  0D82  085A               	movf	___fttol@f1+2,w
  8007  0D83  00FF               	movwf	127
  8008  0D84  1003               	clrc
  8009  0D85  0D7E               	rlf	126,w
  8010  0D86  0D7F               	rlf	127,w
  8011  0D87  00FF               	movwf	127
  8012  0D88  087F               	movf	127,w
  8013  0D89  00E1               	movwf	___fttol@exp1
  8014  0D8A  0861               	movf	___fttol@exp1,w
  8015  0D8B  1D03               	btfss	3,2
  8016  0D8C  2D96               	goto	l4071
  8017  0D8D  3000               	movlw	0
  8018  0D8E  00DB               	movwf	?___fttol+3
  8019  0D8F  3000               	movlw	0
  8020  0D90  00DA               	movwf	?___fttol+2
  8021  0D91  3000               	movlw	0
  8022  0D92  00D9               	movwf	?___fttol+1
  8023  0D93  3000               	movlw	0
  8024  0D94  00D8               	movwf	?___fttol
  8025  0D95  0008               	return
  8026  0D96                     l4071:	
  8027  0D96  0858               	movf	___fttol@f1,w
  8028  0D97  00FD               	movwf	125
  8029  0D98  0859               	movf	___fttol@f1+1,w
  8030  0D99  00FE               	movwf	126
  8031  0D9A  085A               	movf	___fttol@f1+2,w
  8032  0D9B  00FF               	movwf	127
  8033  0D9C  3017               	movlw	23
  8034  0D9D                     u4565:	
  8035  0D9D  36FF               	lsrf	127,f
  8036  0D9E  0CFE               	rrf	126,f
  8037  0D9F  0CFD               	rrf	125,f
  8038  0DA0  0B89               	decfsz	9,f
  8039  0DA1  2D9D               	goto	u4565
  8040  0DA2  087D               	movf	125,w
  8041  0DA3  00FF               	movwf	127
  8042  0DA4  087F               	movf	127,w
  8043  0DA5  00DC               	movwf	___fttol@sign1
  8044  0DA6  17D9               	bsf	___fttol@f1+1,7
  8045  0DA7  30FF               	movlw	255
  8046  0DA8  05D8               	andwf	___fttol@f1,f
  8047  0DA9  30FF               	movlw	255
  8048  0DAA  05D9               	andwf	___fttol@f1+1,f
  8049  0DAB  3000               	movlw	0
  8050  0DAC  05DA               	andwf	___fttol@f1+2,f
  8051  0DAD  0858               	movf	___fttol@f1,w
  8052  0DAE  00DD               	movwf	___fttol@lval
  8053  0DAF  0859               	movf	___fttol@f1+1,w
  8054  0DB0  00DE               	movwf	___fttol@lval+1
  8055  0DB1  085A               	movf	___fttol@f1+2,w
  8056  0DB2  00DF               	movwf	___fttol@lval+2
  8057  0DB3  01E0               	clrf	___fttol@lval+3
  8058  0DB4  308E               	movlw	142
  8059  0DB5  02E1               	subwf	___fttol@exp1,f
  8060  0DB6  1FE1               	btfss	___fttol@exp1,7
  8061  0DB7  2DD4               	goto	l4093
  8062  0DB8  0861               	movf	___fttol@exp1,w
  8063  0DB9  3A80               	xorlw	128
  8064  0DBA  3E8F               	addlw	143
  8065  0DBB  1803               	skipnc
  8066  0DBC  2DC6               	goto	l4089
  8067  0DBD  3000               	movlw	0
  8068  0DBE  00DB               	movwf	?___fttol+3
  8069  0DBF  3000               	movlw	0
  8070  0DC0  00DA               	movwf	?___fttol+2
  8071  0DC1  3000               	movlw	0
  8072  0DC2  00D9               	movwf	?___fttol+1
  8073  0DC3  3000               	movlw	0
  8074  0DC4  00D8               	movwf	?___fttol
  8075  0DC5  0008               	return
  8076  0DC6                     l4089:	
  8077  0DC6  3001               	movlw	1
  8078  0DC7                     u4595:	
  8079  0DC7  36E0               	lsrf	___fttol@lval+3,f
  8080  0DC8  0CDF               	rrf	___fttol@lval+2,f
  8081  0DC9  0CDE               	rrf	___fttol@lval+1,f
  8082  0DCA  0CDD               	rrf	___fttol@lval,f
  8083  0DCB  0B89               	decfsz	9,f
  8084  0DCC  2DC7               	goto	u4595
  8085  0DCD  3001               	movlw	1
  8086  0DCE  00FF               	movwf	127
  8087  0DCF  087F               	movf	127,w
  8088  0DD0  07E1               	addwf	___fttol@exp1,f
  8089  0DD1  1903               	btfsc	3,2
  8090  0DD2  2DED               	goto	l4101
  8091  0DD3  2DC6               	goto	l4089
  8092  0DD4                     l4093:	
  8093  0DD4  3018               	movlw	24
  8094  0DD5  0261               	subwf	___fttol@exp1,w
  8095  0DD6  1C03               	skipc
  8096  0DD7  2DEA               	goto	l777
  8097  0DD8  3000               	movlw	0
  8098  0DD9  00DB               	movwf	?___fttol+3
  8099  0DDA  3000               	movlw	0
  8100  0DDB  00DA               	movwf	?___fttol+2
  8101  0DDC  3000               	movlw	0
  8102  0DDD  00D9               	movwf	?___fttol+1
  8103  0DDE  3000               	movlw	0
  8104  0DDF  00D8               	movwf	?___fttol
  8105  0DE0  0008               	return
  8106  0DE1                     l4099:	
  8107  0DE1  3001               	movlw	1
  8108  0DE2                     u4625:	
  8109  0DE2  35DD               	lslf	___fttol@lval,f
  8110  0DE3  0DDE               	rlf	___fttol@lval+1,f
  8111  0DE4  0DDF               	rlf	___fttol@lval+2,f
  8112  0DE5  0DE0               	rlf	___fttol@lval+3,f
  8113  0DE6  0B89               	decfsz	9,f
  8114  0DE7  2DE2               	goto	u4625
  8115  0DE8  3001               	movlw	1
  8116  0DE9  02E1               	subwf	___fttol@exp1,f
  8117  0DEA                     l777:	
  8118  0DEA  0861               	movf	___fttol@exp1,w
  8119  0DEB  1D03               	btfss	3,2
  8120  0DEC  2DE1               	goto	l4099
  8121  0DED                     l4101:	
  8122  0DED  085C               	movf	___fttol@sign1,w
  8123  0DEE  1903               	btfsc	3,2
  8124  0DEF  2DFB               	goto	l4105
  8125  0DF0  09DD               	comf	___fttol@lval,f
  8126  0DF1  09DE               	comf	___fttol@lval+1,f
  8127  0DF2  09DF               	comf	___fttol@lval+2,f
  8128  0DF3  09E0               	comf	___fttol@lval+3,f
  8129  0DF4  0ADD               	incf	___fttol@lval,f
  8130  0DF5  1903               	skipnz
  8131  0DF6  0ADE               	incf	___fttol@lval+1,f
  8132  0DF7  1903               	skipnz
  8133  0DF8  0ADF               	incf	___fttol@lval+2,f
  8134  0DF9  1903               	skipnz
  8135  0DFA  0AE0               	incf	___fttol@lval+3,f
  8136  0DFB                     l4105:	
  8137  0DFB  0860               	movf	___fttol@lval+3,w
  8138  0DFC  00DB               	movwf	?___fttol+3
  8139  0DFD  085F               	movf	___fttol@lval+2,w
  8140  0DFE  00DA               	movwf	?___fttol+2
  8141  0DFF  085E               	movf	___fttol@lval+1,w
  8142  0E00  00D9               	movwf	?___fttol+1
  8143  0E01  085D               	movf	___fttol@lval,w
  8144  0E02  00D8               	movwf	?___fttol
  8145  0E03  0008               	return
  8146  0E04                     __end_of___fttol:	
  8147                           
  8148                           	psect	text33
  8149  0848                     __ptext33:	
  8150 ;; *************** function ___ftsub *****************
  8151 ;; Defined at:
  8152 ;;		line 17 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\ftsub.c"
  8153 ;; Parameters:    Size  Location     Type
  8154 ;;  f2              3   21[BANK0 ] float 
  8155 ;;  f1              3   24[BANK0 ] float 
  8156 ;; Auto vars:     Size  Location     Type
  8157 ;;		None
  8158 ;; Return value:  Size  Location     Type
  8159 ;;                  3   21[BANK0 ] float 
  8160 ;; Registers used:
  8161 ;;		wreg, status,2, status,0, btemp+9, btemp+10, btemp+11, pclath, cstack
  8162 ;; Tracked objects:
  8163 ;;		On entry : 0/0
  8164 ;;		On exit  : 0/0
  8165 ;;		Unchanged: 0/0
  8166 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8167 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8168 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8169 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8170 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8171 ;;Total ram usage:        6 bytes
  8172 ;; Hardware stack levels used:    1
  8173 ;; Hardware stack levels required when called:    9
  8174 ;; This function calls:
  8175 ;;		___ftadd
  8176 ;; This function is called by:
  8177 ;;		_ftoa
  8178 ;; This function uses a non-reentrant model
  8179 ;;
  8180                           
  8181                           
  8182                           ;psect for function ___ftsub
  8183  0848                     ___ftsub:	
  8184                           
  8185                           ;incstack = 0
  8186                           ; Regs used in ___ftsub: [wreg+status,2+status,0+btemp+9-btemp+11+pclath+cstack]
  8187  0848  0020               	movlb	0	; select bank0
  8188  0849  0837               	movf	___ftsub@f2+2,w
  8189  084A  0436               	iorwf	___ftsub@f2+1,w
  8190  084B  0435               	iorwf	___ftsub@f2,w
  8191  084C  1903               	skipnz
  8192  084D  2850               	goto	l4061
  8193  084E  3080               	movlw	128
  8194  084F  06B7               	xorwf	___ftsub@f2+2,f
  8195  0850                     l4061:	
  8196  0850  0838               	movf	___ftsub@f1,w
  8197  0851  00AB               	movwf	___ftadd@f1
  8198  0852  0839               	movf	___ftsub@f1+1,w
  8199  0853  00AC               	movwf	___ftadd@f1+1
  8200  0854  083A               	movf	___ftsub@f1+2,w
  8201  0855  00AD               	movwf	___ftadd@f1+2
  8202  0856  0835               	movf	___ftsub@f2,w
  8203  0857  00AE               	movwf	___ftadd@f2
  8204  0858  0836               	movf	___ftsub@f2+1,w
  8205  0859  00AF               	movwf	___ftadd@f2+1
  8206  085A  0837               	movf	___ftsub@f2+2,w
  8207  085B  00B0               	movwf	___ftadd@f2+2
  8208  085C  3184  2471         	fcall	___ftadd
  8209  085E  0020               	movlb	0	; select bank0
  8210  085F  082B               	movf	?___ftadd,w
  8211  0860  00B5               	movwf	?___ftsub
  8212  0861  082C               	movf	?___ftadd+1,w
  8213  0862  00B6               	movwf	?___ftsub+1
  8214  0863  082D               	movf	?___ftadd+2,w
  8215  0864  00B7               	movwf	?___ftsub+2
  8216  0865  0008               	return
  8217  0866                     __end_of___ftsub:	
  8218                           
  8219                           	psect	text34
  8220  17B3                     __ptext34:	
  8221 ;; *************** function ___ftneg *****************
  8222 ;; Defined at:
  8223 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\ftneg.c"
  8224 ;; Parameters:    Size  Location     Type
  8225 ;;  f1              3   44[BANK0 ] float 
  8226 ;; Auto vars:     Size  Location     Type
  8227 ;;		None
  8228 ;; Return value:  Size  Location     Type
  8229 ;;                  3   44[BANK0 ] float 
  8230 ;; Registers used:
  8231 ;;		wreg
  8232 ;; Tracked objects:
  8233 ;;		On entry : 0/0
  8234 ;;		On exit  : 0/0
  8235 ;;		Unchanged: 0/0
  8236 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8237 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8238 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8239 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8240 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8241 ;;Total ram usage:        3 bytes
  8242 ;; Hardware stack levels used:    1
  8243 ;; Hardware stack levels required when called:    7
  8244 ;; This function calls:
  8245 ;;		Nothing
  8246 ;; This function is called by:
  8247 ;;		_loop
  8248 ;;		_ftoa
  8249 ;; This function uses a non-reentrant model
  8250 ;;
  8251                           
  8252                           
  8253                           ;psect for function ___ftneg
  8254  17B3                     ___ftneg:	
  8255                           
  8256                           ;incstack = 0
  8257                           ; Regs used in ___ftneg: [wreg]
  8258  17B3  0020               	movlb	0	; select bank0
  8259  17B4  084E               	movf	___ftneg@f1+2,w
  8260  17B5  044D               	iorwf	___ftneg@f1+1,w
  8261  17B6  044C               	iorwf	___ftneg@f1,w
  8262  17B7  1903               	skipnz
  8263  17B8  0008               	return
  8264  17B9  3080               	movlw	128
  8265  17BA  06CE               	xorwf	___ftneg@f1+2,f
  8266  17BB  0008               	return
  8267  17BC                     __end_of___ftneg:	
  8268                           
  8269                           	psect	text35
  8270  070E                     __ptext35:	
  8271 ;; *************** function ___ftmul *****************
  8272 ;; Defined at:
  8273 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\ftmul.c"
  8274 ;; Parameters:    Size  Location     Type
  8275 ;;  f1              3   44[BANK0 ] float 
  8276 ;;  f2              3   47[BANK0 ] float 
  8277 ;; Auto vars:     Size  Location     Type
  8278 ;;  f3_as_produc    3   51[BANK0 ] unsigned um
  8279 ;;  sign            1   55[BANK0 ] unsigned char 
  8280 ;;  cntr            1   54[BANK0 ] unsigned char 
  8281 ;;  exp             1   50[BANK0 ] unsigned char 
  8282 ;; Return value:  Size  Location     Type
  8283 ;;                  3   44[BANK0 ] float 
  8284 ;; Registers used:
  8285 ;;		wreg, status,2, status,0, btemp+9, btemp+10, btemp+11, pclath, cstack
  8286 ;; Tracked objects:
  8287 ;;		On entry : 0/0
  8288 ;;		On exit  : 0/0
  8289 ;;		Unchanged: 0/0
  8290 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8291 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8292 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8293 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8294 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8295 ;;Total ram usage:       12 bytes
  8296 ;; Hardware stack levels used:    1
  8297 ;; Hardware stack levels required when called:    8
  8298 ;; This function calls:
  8299 ;;		___ftpack
  8300 ;; This function is called by:
  8301 ;;		_loop
  8302 ;;		_ftoa
  8303 ;; This function uses a non-reentrant model
  8304 ;;
  8305                           
  8306                           
  8307                           ;psect for function ___ftmul
  8308  070E                     ___ftmul:	
  8309                           
  8310                           ;incstack = 0
  8311                           ; Regs used in ___ftmul: [wreg+status,2+status,0+btemp+9-btemp+11+pclath+cstack]
  8312  070E  0020               	movlb	0	; select bank0
  8313  070F  084C               	movf	___ftmul@f1,w
  8314  0710  00FD               	movwf	125
  8315  0711  084D               	movf	___ftmul@f1+1,w
  8316  0712  00FE               	movwf	126
  8317  0713  084E               	movf	___ftmul@f1+2,w
  8318  0714  00FF               	movwf	127
  8319  0715  1003               	clrc
  8320  0716  0D7E               	rlf	126,w
  8321  0717  0D7F               	rlf	127,w
  8322  0718  00FF               	movwf	127
  8323  0719  087F               	movf	127,w
  8324  071A  00D2               	movwf	___ftmul@exp
  8325  071B  0852               	movf	___ftmul@exp,w
  8326  071C  1D03               	btfss	3,2
  8327  071D  2F25               	goto	l4001
  8328  071E  3000               	movlw	0
  8329  071F  00CC               	movwf	?___ftmul
  8330  0720  3000               	movlw	0
  8331  0721  00CD               	movwf	?___ftmul+1
  8332  0722  3000               	movlw	0
  8333  0723  00CE               	movwf	?___ftmul+2
  8334  0724  0008               	return
  8335  0725                     l4001:	
  8336  0725  084F               	movf	___ftmul@f2,w
  8337  0726  00FD               	movwf	125
  8338  0727  0850               	movf	___ftmul@f2+1,w
  8339  0728  00FE               	movwf	126
  8340  0729  0851               	movf	___ftmul@f2+2,w
  8341  072A  00FF               	movwf	127
  8342  072B  1003               	clrc
  8343  072C  0D7E               	rlf	126,w
  8344  072D  0D7F               	rlf	127,w
  8345  072E  00FF               	movwf	127
  8346  072F  087F               	movf	127,w
  8347  0730  00D7               	movwf	___ftmul@sign
  8348  0731  0857               	movf	___ftmul@sign,w
  8349  0732  1D03               	btfss	3,2
  8350  0733  2F3B               	goto	l4007
  8351  0734  3000               	movlw	0
  8352  0735  00CC               	movwf	?___ftmul
  8353  0736  3000               	movlw	0
  8354  0737  00CD               	movwf	?___ftmul+1
  8355  0738  3000               	movlw	0
  8356  0739  00CE               	movwf	?___ftmul+2
  8357  073A  0008               	return
  8358  073B                     l4007:	
  8359  073B  0857               	movf	___ftmul@sign,w
  8360  073C  3E7B               	addlw	123
  8361  073D  00FF               	movwf	127
  8362  073E  087F               	movf	127,w
  8363  073F  07D2               	addwf	___ftmul@exp,f
  8364  0740  084C               	movf	___ftmul@f1,w
  8365  0741  00FD               	movwf	125
  8366  0742  084D               	movf	___ftmul@f1+1,w
  8367  0743  00FE               	movwf	126
  8368  0744  084E               	movf	___ftmul@f1+2,w
  8369  0745  00FF               	movwf	127
  8370  0746  3010               	movlw	16
  8371  0747                     u4435:	
  8372  0747  36FF               	lsrf	127,f
  8373  0748  0CFE               	rrf	126,f
  8374  0749  0CFD               	rrf	125,f
  8375  074A  0B89               	decfsz	9,f
  8376  074B  2F47               	goto	u4435
  8377  074C  087D               	movf	125,w
  8378  074D  00FF               	movwf	127
  8379  074E  087F               	movf	127,w
  8380  074F  00D7               	movwf	___ftmul@sign
  8381  0750  084F               	movf	___ftmul@f2,w
  8382  0751  00FD               	movwf	125
  8383  0752  0850               	movf	___ftmul@f2+1,w
  8384  0753  00FE               	movwf	126
  8385  0754  0851               	movf	___ftmul@f2+2,w
  8386  0755  00FF               	movwf	127
  8387  0756  3010               	movlw	16
  8388  0757                     u4445:	
  8389  0757  36FF               	lsrf	127,f
  8390  0758  0CFE               	rrf	126,f
  8391  0759  0CFD               	rrf	125,f
  8392  075A  0B89               	decfsz	9,f
  8393  075B  2F57               	goto	u4445
  8394  075C  087D               	movf	125,w
  8395  075D  00FF               	movwf	127
  8396  075E  087F               	movf	127,w
  8397  075F  06D7               	xorwf	___ftmul@sign,f
  8398  0760  3080               	movlw	128
  8399  0761  00FF               	movwf	127
  8400  0762  087F               	movf	127,w
  8401  0763  05D7               	andwf	___ftmul@sign,f
  8402  0764  17CD               	bsf	___ftmul@f1+1,7
  8403  0765  17D0               	bsf	___ftmul@f2+1,7
  8404  0766  30FF               	movlw	255
  8405  0767  05CF               	andwf	___ftmul@f2,f
  8406  0768  30FF               	movlw	255
  8407  0769  05D0               	andwf	___ftmul@f2+1,f
  8408  076A  3000               	movlw	0
  8409  076B  05D1               	andwf	___ftmul@f2+2,f
  8410  076C  3000               	movlw	0
  8411  076D  00D3               	movwf	___ftmul@f3_as_product
  8412  076E  3000               	movlw	0
  8413  076F  00D4               	movwf	___ftmul@f3_as_product+1
  8414  0770  3000               	movlw	0
  8415  0771  00D5               	movwf	___ftmul@f3_as_product+2
  8416  0772  3007               	movlw	7
  8417  0773  00FF               	movwf	127
  8418  0774  087F               	movf	127,w
  8419  0775  00D6               	movwf	___ftmul@cntr
  8420  0776                     l4023:	
  8421  0776  1C4C               	btfss	___ftmul@f1,0
  8422  0777  2F7E               	goto	l4027
  8423  0778  084F               	movf	___ftmul@f2,w
  8424  0779  07D3               	addwf	___ftmul@f3_as_product,f
  8425  077A  0850               	movf	___ftmul@f2+1,w
  8426  077B  3DD4               	addwfc	___ftmul@f3_as_product+1,f
  8427  077C  0851               	movf	___ftmul@f2+2,w
  8428  077D  3DD5               	addwfc	___ftmul@f3_as_product+2,f
  8429  077E                     l4027:	
  8430  077E  3001               	movlw	1
  8431  077F                     u4465:	
  8432  077F  36CE               	lsrf	___ftmul@f1+2,f
  8433  0780  0CCD               	rrf	___ftmul@f1+1,f
  8434  0781  0CCC               	rrf	___ftmul@f1,f
  8435  0782  0B89               	decfsz	9,f
  8436  0783  2F7F               	goto	u4465
  8437  0784  3001               	movlw	1
  8438  0785                     u4475:	
  8439  0785  35CF               	lslf	___ftmul@f2,f
  8440  0786  0DD0               	rlf	___ftmul@f2+1,f
  8441  0787  0DD1               	rlf	___ftmul@f2+2,f
  8442  0788  0B89               	decfsz	9,f
  8443  0789  2F85               	goto	u4475
  8444  078A  3001               	movlw	1
  8445  078B  02D6               	subwf	___ftmul@cntr,f
  8446  078C  1D03               	btfss	3,2
  8447  078D  2F76               	goto	l4023
  8448  078E  3009               	movlw	9
  8449  078F  00FF               	movwf	127
  8450  0790  087F               	movf	127,w
  8451  0791  00D6               	movwf	___ftmul@cntr
  8452  0792                     l4035:	
  8453  0792  1C4C               	btfss	___ftmul@f1,0
  8454  0793  2F9A               	goto	l4039
  8455  0794  084F               	movf	___ftmul@f2,w
  8456  0795  07D3               	addwf	___ftmul@f3_as_product,f
  8457  0796  0850               	movf	___ftmul@f2+1,w
  8458  0797  3DD4               	addwfc	___ftmul@f3_as_product+1,f
  8459  0798  0851               	movf	___ftmul@f2+2,w
  8460  0799  3DD5               	addwfc	___ftmul@f3_as_product+2,f
  8461  079A                     l4039:	
  8462  079A  3001               	movlw	1
  8463  079B                     u4505:	
  8464  079B  36CE               	lsrf	___ftmul@f1+2,f
  8465  079C  0CCD               	rrf	___ftmul@f1+1,f
  8466  079D  0CCC               	rrf	___ftmul@f1,f
  8467  079E  0B89               	decfsz	9,f
  8468  079F  2F9B               	goto	u4505
  8469  07A0  3001               	movlw	1
  8470  07A1                     u4515:	
  8471  07A1  36D5               	lsrf	___ftmul@f3_as_product+2,f
  8472  07A2  0CD4               	rrf	___ftmul@f3_as_product+1,f
  8473  07A3  0CD3               	rrf	___ftmul@f3_as_product,f
  8474  07A4  0B89               	decfsz	9,f
  8475  07A5  2FA1               	goto	u4515
  8476  07A6  3001               	movlw	1
  8477  07A7  02D6               	subwf	___ftmul@cntr,f
  8478  07A8  1D03               	btfss	3,2
  8479  07A9  2F92               	goto	l4035
  8480  07AA  0853               	movf	___ftmul@f3_as_product,w
  8481  07AB  00A6               	movwf	___ftpack@arg
  8482  07AC  0854               	movf	___ftmul@f3_as_product+1,w
  8483  07AD  00A7               	movwf	___ftpack@arg+1
  8484  07AE  0855               	movf	___ftmul@f3_as_product+2,w
  8485  07AF  00A8               	movwf	___ftpack@arg+2
  8486  07B0  0852               	movf	___ftmul@exp,w
  8487  07B1  00FF               	movwf	127
  8488  07B2  087F               	movf	127,w
  8489  07B3  00A9               	movwf	___ftpack@exp
  8490  07B4  0857               	movf	___ftmul@sign,w
  8491  07B5  00FF               	movwf	127
  8492  07B6  087F               	movf	127,w
  8493  07B7  00AA               	movwf	___ftpack@sign
  8494  07B8  318C  2492         	fcall	___ftpack
  8495  07BA  0020               	movlb	0	; select bank0
  8496  07BB  0826               	movf	?___ftpack,w
  8497  07BC  00CC               	movwf	?___ftmul
  8498  07BD  0827               	movf	?___ftpack+1,w
  8499  07BE  00CD               	movwf	?___ftmul+1
  8500  07BF  0828               	movf	?___ftpack+2,w
  8501  07C0  00CE               	movwf	?___ftmul+2
  8502  07C1  0008               	return
  8503  07C2                     __end_of___ftmul:	
  8504                           
  8505                           	psect	text36
  8506  07C2                     __ptext36:	
  8507 ;; *************** function ___ftge *****************
  8508 ;; Defined at:
  8509 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\ftge.c"
  8510 ;; Parameters:    Size  Location     Type
  8511 ;;  ff1             3    6[BANK0 ] float 
  8512 ;;  ff2             3    9[BANK0 ] float 
  8513 ;; Auto vars:     Size  Location     Type
  8514 ;;		None
  8515 ;; Return value:  Size  Location     Type
  8516 ;;		None               void
  8517 ;; Registers used:
  8518 ;;		wreg, status,2, status,0, btemp+9, btemp+10, btemp+11
  8519 ;; Tracked objects:
  8520 ;;		On entry : 0/0
  8521 ;;		On exit  : 0/0
  8522 ;;		Unchanged: 0/0
  8523 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8524 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8525 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8526 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8527 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8528 ;;Total ram usage:        6 bytes
  8529 ;; Hardware stack levels used:    1
  8530 ;; Hardware stack levels required when called:    7
  8531 ;; This function calls:
  8532 ;;		Nothing
  8533 ;; This function is called by:
  8534 ;;		_ftoa
  8535 ;; This function uses a non-reentrant model
  8536 ;;
  8537                           
  8538                           
  8539                           ;psect for function ___ftge
  8540  07C2                     ___ftge:	
  8541                           
  8542                           ;incstack = 0
  8543                           ; Regs used in ___ftge: [wreg+status,2+status,0+btemp+9-btemp+11]
  8544  07C2  0020               	movlb	0	; select bank0
  8545  07C3  1FA8               	btfss	___ftge@ff1+2,7
  8546  07C4  2FD9               	goto	l3979
  8547  07C5  0926               	comf	___ftge@ff1,w
  8548  07C6  00FD               	movwf	125
  8549  07C7  0927               	comf	___ftge@ff1+1,w
  8550  07C8  00FE               	movwf	126
  8551  07C9  0928               	comf	___ftge@ff1+2,w
  8552  07CA  00FF               	movwf	127
  8553  07CB  0AFD               	incf	125,f
  8554  07CC  1903               	skipnz
  8555  07CD  0AFE               	incf	126,f
  8556  07CE  1903               	skipnz
  8557  07CF  0AFF               	incf	127,f
  8558  07D0  3000               	movlw	0
  8559  07D1  077D               	addwf	125,w
  8560  07D2  00A6               	movwf	___ftge@ff1
  8561  07D3  3000               	movlw	0
  8562  07D4  3D7E               	addwfc	126,w
  8563  07D5  00A7               	movwf	___ftge@ff1+1
  8564  07D6  3080               	movlw	128
  8565  07D7  3D7F               	addwfc	127,w
  8566  07D8  00A8               	movwf	___ftge@ff1+2
  8567  07D9                     l3979:	
  8568  07D9  1FAB               	btfss	___ftge@ff2+2,7
  8569  07DA  2FEF               	goto	l3983
  8570  07DB  0929               	comf	___ftge@ff2,w
  8571  07DC  00FD               	movwf	125
  8572  07DD  092A               	comf	___ftge@ff2+1,w
  8573  07DE  00FE               	movwf	126
  8574  07DF  092B               	comf	___ftge@ff2+2,w
  8575  07E0  00FF               	movwf	127
  8576  07E1  0AFD               	incf	125,f
  8577  07E2  1903               	skipnz
  8578  07E3  0AFE               	incf	126,f
  8579  07E4  1903               	skipnz
  8580  07E5  0AFF               	incf	127,f
  8581  07E6  3000               	movlw	0
  8582  07E7  077D               	addwf	125,w
  8583  07E8  00A9               	movwf	___ftge@ff2
  8584  07E9  3000               	movlw	0
  8585  07EA  3D7E               	addwfc	126,w
  8586  07EB  00AA               	movwf	___ftge@ff2+1
  8587  07EC  3080               	movlw	128
  8588  07ED  3D7F               	addwfc	127,w
  8589  07EE  00AB               	movwf	___ftge@ff2+2
  8590  07EF                     l3983:	
  8591  07EF  3080               	movlw	128
  8592  07F0  06A8               	xorwf	___ftge@ff1+2,f
  8593  07F1  3080               	movlw	128
  8594  07F2  06AB               	xorwf	___ftge@ff2+2,f
  8595  07F3  082B               	movf	___ftge@ff2+2,w
  8596  07F4  0228               	subwf	___ftge@ff1+2,w
  8597  07F5  1D03               	skipz
  8598  07F6  0008               	return
  8599  07F7  082A               	movf	___ftge@ff2+1,w
  8600  07F8  0227               	subwf	___ftge@ff1+1,w
  8601  07F9  1D03               	skipz
  8602  07FA  0008               	return
  8603  07FB  0829               	movf	___ftge@ff2,w
  8604  07FC  0226               	subwf	___ftge@ff1,w
  8605  07FD  0008               	return
  8606  07FE                     __end_of___ftge:	
  8607                           
  8608                           	psect	text37
  8609  0EAD                     __ptext37:	
  8610 ;; *************** function _getADCValue *****************
  8611 ;; Defined at:
  8612 ;;		line 21 in file "main.c"
  8613 ;; Parameters:    Size  Location     Type
  8614 ;;  channel         1    wreg     unsigned char 
  8615 ;; Auto vars:     Size  Location     Type
  8616 ;;  channel         1   38[BANK0 ] unsigned char 
  8617 ;;  adcSum          3   41[BANK0 ] float 
  8618 ;;  adcLoop         2   39[BANK0 ] unsigned int 
  8619 ;; Return value:  Size  Location     Type
  8620 ;;                  3   34[BANK0 ] float 
  8621 ;; Registers used:
  8622 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+0, btemp+9, btemp+10, btemp+11, pclath, cstack
  8623 ;; Tracked objects:
  8624 ;;		On entry : 0/0
  8625 ;;		On exit  : 0/0
  8626 ;;		Unchanged: 0/0
  8627 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8628 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8629 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8630 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8631 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8632 ;;Total ram usage:       10 bytes
  8633 ;; Hardware stack levels used:    1
  8634 ;; Hardware stack levels required when called:    9
  8635 ;; This function calls:
  8636 ;;		___awtoft
  8637 ;;		___ftadd
  8638 ;;		___ftdiv
  8639 ;;		_sleepMs
  8640 ;; This function is called by:
  8641 ;;		_loop
  8642 ;; This function uses a non-reentrant model
  8643 ;;
  8644                           
  8645                           
  8646                           ;psect for function _getADCValue
  8647  0EAD                     _getADCValue:	
  8648                           
  8649                           ;incstack = 0
  8650                           ; Regs used in _getADCValue: [wreg-fsr0h+status,2-btemp+0+btemp+9-btemp+11+pclath+cstack
      +                          ]
  8651                           ;getADCValue@channel stored from wreg
  8652  0EAD  0020               	movlb	0	; select bank0
  8653  0EAE  00C6               	movwf	getADCValue@channel
  8654                           
  8655                           ;main.c: 24: float adcSum = 0;
  8656  0EAF  3000               	movlw	0
  8657  0EB0  00C9               	movwf	getADCValue@adcSum
  8658  0EB1  3000               	movlw	0
  8659  0EB2  00CA               	movwf	getADCValue@adcSum+1
  8660  0EB3  3000               	movlw	0
  8661  0EB4  00CB               	movwf	getADCValue@adcSum+2
  8662                           
  8663                           ;main.c: 25: unsigned int adcLoop = 1000;
  8664  0EB5  30E8               	movlw	232
  8665  0EB6  00C7               	movwf	getADCValue@adcLoop
  8666  0EB7  3003               	movlw	3
  8667  0EB8  00C8               	movwf	getADCValue@adcLoop+1
  8668                           
  8669                           ;main.c: 27: ADCON0bits.CHS = channel;
  8670  0EB9  0846               	movf	getADCValue@channel,w
  8671  0EBA  00C5               	movwf	??_getADCValue
  8672  0EBB  0DC5               	rlf	??_getADCValue,f
  8673  0EBC  0DC5               	rlf	??_getADCValue,f
  8674  0EBD  0021               	movlb	1	; select bank1
  8675  0EBE  081D               	movf	29,w	;volatile
  8676  0EBF  0020               	movlb	0	; select bank0
  8677  0EC0  0645               	xorwf	??_getADCValue,w
  8678  0EC1  3903               	andlw	-253
  8679  0EC2  0645               	xorwf	??_getADCValue,w
  8680  0EC3  0021               	movlb	1	; select bank1
  8681  0EC4  009D               	movwf	29	;volatile
  8682                           
  8683                           ;main.c: 28: FVRCONbits.FVREN = 1;
  8684  0EC5  0022               	movlb	2	; select bank2
  8685  0EC6  1797               	bsf	23,7	;volatile
  8686                           
  8687                           ;main.c: 29: ADCON0bits.ADON = 1;
  8688  0EC7  0021               	movlb	1	; select bank1
  8689  0EC8  141D               	bsf	29,0	;volatile
  8690                           
  8691                           ;main.c: 31: sleepMs(1);
  8692  0EC9  3001               	movlw	1
  8693  0ECA  00F0               	movwf	sleepMs@milliseconds
  8694  0ECB  3000               	movlw	0
  8695  0ECC  00F1               	movwf	sleepMs@milliseconds+1
  8696  0ECD  3189  21D7  318E   	fcall	_sleepMs
  8697  0ED0                     l4333:	
  8698                           ;main.c: 33: while (adcLoop--){
  8699                           
  8700  0ED0  3001               	movlw	1
  8701  0ED1  0020               	movlb	0	; select bank0
  8702  0ED2  02C7               	subwf	getADCValue@adcLoop,f
  8703  0ED3  3000               	movlw	0
  8704  0ED4  3BC8               	subwfb	getADCValue@adcLoop+1,f
  8705  0ED5  0A47               	incf	getADCValue@adcLoop,w
  8706  0ED6  1903               	btfsc	3,2
  8707  0ED7  0A48               	incf	getADCValue@adcLoop+1,w
  8708  0ED8  1903               	btfsc	3,2
  8709  0ED9  2F0D               	goto	l171
  8710                           
  8711                           ;main.c: 35: ADCON0bits.ADGO = 1;
  8712  0EDA  0021               	movlb	1	; select bank1
  8713  0EDB  149D               	bsf	29,1	;volatile
  8714  0EDC                     l4329:	
  8715                           ;main.c: 37: while (ADCON0bits.ADGO){
  8716                           
  8717  0EDC  0021               	movlb	1	; select bank1
  8718  0EDD  1C9D               	btfss	29,1	;volatile
  8719  0EDE  2EE7               	goto	l4331
  8720                           
  8721                           ;main.c: 38: sleepMs(1);
  8722  0EDF  3001               	movlw	1
  8723  0EE0  00F0               	movwf	sleepMs@milliseconds
  8724  0EE1  3000               	movlw	0
  8725  0EE2  00F1               	movwf	sleepMs@milliseconds+1
  8726  0EE3  3189  21D7  318E   	fcall	_sleepMs
  8727  0EE6  2EDC               	goto	l4329
  8728  0EE7                     l4331:	
  8729                           
  8730                           ;main.c: 39: };main.c: 41: adcSum+= (ADRESL | (ADRESH << 8));
  8731  0EE7  081C               	movf	28,w	;volatile
  8732  0EE8  00FE               	movwf	126
  8733  0EE9  01FF               	clrf	127
  8734  0EEA  087E               	movf	126,w
  8735  0EEB  00FF               	movwf	127
  8736  0EEC  01FE               	clrf	126
  8737  0EED  087E               	movf	126,w
  8738  0EEE  041B               	iorwf	27,w	;volatile
  8739  0EEF  00F0               	movwf	___awtoft@c
  8740  0EF0  087F               	movf	127,w
  8741  0EF1  00F1               	movwf	___awtoft@c+1
  8742  0EF2  3189  213D  318E   	fcall	___awtoft
  8743  0EF5  0870               	movf	?___awtoft,w
  8744  0EF6  0020               	movlb	0	; select bank0
  8745  0EF7  00AB               	movwf	___ftadd@f1
  8746  0EF8  0871               	movf	?___awtoft+1,w
  8747  0EF9  00AC               	movwf	___ftadd@f1+1
  8748  0EFA  0872               	movf	?___awtoft+2,w
  8749  0EFB  00AD               	movwf	___ftadd@f1+2
  8750  0EFC  0849               	movf	getADCValue@adcSum,w
  8751  0EFD  00AE               	movwf	___ftadd@f2
  8752  0EFE  084A               	movf	getADCValue@adcSum+1,w
  8753  0EFF  00AF               	movwf	___ftadd@f2+1
  8754  0F00  084B               	movf	getADCValue@adcSum+2,w
  8755  0F01  00B0               	movwf	___ftadd@f2+2
  8756  0F02  3184  2471  318E   	fcall	___ftadd
  8757  0F05  0020               	movlb	0	; select bank0
  8758  0F06  082B               	movf	?___ftadd,w
  8759  0F07  00C9               	movwf	getADCValue@adcSum
  8760  0F08  082C               	movf	?___ftadd+1,w
  8761  0F09  00CA               	movwf	getADCValue@adcSum+1
  8762  0F0A  082D               	movf	?___ftadd+2,w
  8763  0F0B  00CB               	movwf	getADCValue@adcSum+2
  8764  0F0C  2ED0               	goto	l4333
  8765  0F0D                     l171:	
  8766                           
  8767                           ;main.c: 43: };main.c: 45: FVRCONbits.FVREN = 0;
  8768  0F0D  0022               	movlb	2	; select bank2
  8769  0F0E  1397               	bcf	23,7	;volatile
  8770                           
  8771                           ;main.c: 46: ADCON0bits.ADON = 0;
  8772  0F0F  0021               	movlb	1	; select bank1
  8773  0F10  101D               	bcf	29,0	;volatile
  8774                           
  8775                           ;main.c: 49: adcSum/= 1000;
  8776  0F11  3000               	movlw	0
  8777  0F12  0020               	movlb	0	; select bank0
  8778  0F13  00B5               	movwf	___ftdiv@f2
  8779  0F14  307A               	movlw	122
  8780  0F15  00B6               	movwf	___ftdiv@f2+1
  8781  0F16  3044               	movlw	68
  8782  0F17  00B7               	movwf	___ftdiv@f2+2
  8783  0F18  0849               	movf	getADCValue@adcSum,w
  8784  0F19  00B8               	movwf	___ftdiv@f1
  8785  0F1A  084A               	movf	getADCValue@adcSum+1,w
  8786  0F1B  00B9               	movwf	___ftdiv@f1+1
  8787  0F1C  084B               	movf	getADCValue@adcSum+2,w
  8788  0F1D  00BA               	movwf	___ftdiv@f1+2
  8789  0F1E  318E  2604  318E   	fcall	___ftdiv
  8790  0F21  0020               	movlb	0	; select bank0
  8791  0F22  0835               	movf	?___ftdiv,w
  8792  0F23  00C9               	movwf	getADCValue@adcSum
  8793  0F24  0836               	movf	?___ftdiv+1,w
  8794  0F25  00CA               	movwf	getADCValue@adcSum+1
  8795  0F26  0837               	movf	?___ftdiv+2,w
  8796  0F27  00CB               	movwf	getADCValue@adcSum+2
  8797                           
  8798                           ;main.c: 52: if (ADCON1bits.ADPREF == 0b11){
  8799  0F28  0021               	movlb	1	; select bank1
  8800  0F29  081E               	movf	30,w	;volatile
  8801  0F2A  3903               	andlw	3
  8802  0F2B  3A03               	xorlw	3
  8803  0F2C  1903               	btfsc	3,2
  8804  0F2D  2F47               	goto	l4345
  8805  0F2E  2F4E               	goto	l4347
  8806  0F2F                     l4341:	
  8807                           ;main.c: 54: case 0b10:
  8808                           
  8809                           ;main.c: 53: switch (FVRCONbits.ADFVR){
  8810                           
  8811                           
  8812                           ;main.c: 55: adcSum/= 500;
  8813  0F2F  3000               	movlw	0
  8814  0F30  0020               	movlb	0	; select bank0
  8815  0F31  00B5               	movwf	___ftdiv@f2
  8816  0F32  30FA               	movlw	250
  8817  0F33  00B6               	movwf	___ftdiv@f2+1
  8818  0F34  3043               	movlw	67
  8819  0F35  00B7               	movwf	___ftdiv@f2+2
  8820  0F36  0849               	movf	getADCValue@adcSum,w
  8821  0F37  00B8               	movwf	___ftdiv@f1
  8822  0F38  084A               	movf	getADCValue@adcSum+1,w
  8823  0F39  00B9               	movwf	___ftdiv@f1+1
  8824  0F3A  084B               	movf	getADCValue@adcSum+2,w
  8825  0F3B  00BA               	movwf	___ftdiv@f1+2
  8826  0F3C  318E  2604  318E   	fcall	___ftdiv
  8827  0F3F  0020               	movlb	0	; select bank0
  8828  0F40  0835               	movf	?___ftdiv,w
  8829  0F41  00C9               	movwf	getADCValue@adcSum
  8830  0F42  0836               	movf	?___ftdiv+1,w
  8831  0F43  00CA               	movwf	getADCValue@adcSum+1
  8832  0F44  0837               	movf	?___ftdiv+2,w
  8833  0F45  00CB               	movwf	getADCValue@adcSum+2
  8834                           
  8835                           ;main.c: 57: }
  8836                           
  8837                           ;main.c: 56: break;
  8838  0F46  2F4E               	goto	l4347
  8839  0F47                     l4345:	
  8840  0F47  0022               	movlb	2	; select bank2
  8841  0F48  0817               	movf	23,w	;volatile
  8842  0F49  3903               	andlw	3
  8843                           
  8844                           ; Switch size 1, requested type "space"
  8845                           ; Number of cases is 1, Range of values is 2 to 2
  8846                           ; switch strategies available:
  8847                           ; Name         Instructions Cycles
  8848                           ; simple_byte            4     3 (average)
  8849                           ; direct_byte           11     9 (fixed)
  8850                           ; jumptable            263     9 (fixed)
  8851                           ;	Chosen strategy is simple_byte
  8852  0F4A  3A02               	xorlw	2	; case 2
  8853  0F4B  1903               	skipnz
  8854  0F4C  2F2F               	goto	l4341
  8855  0F4D  2F4E               	goto	l4347
  8856  0F4E                     l4347:	
  8857                           
  8858                           ;main.c: 58: };main.c: 61: return adcSum;
  8859  0F4E  0020               	movlb	0	; select bank0
  8860  0F4F  0849               	movf	getADCValue@adcSum,w
  8861  0F50  00C2               	movwf	?_getADCValue
  8862  0F51  084A               	movf	getADCValue@adcSum+1,w
  8863  0F52  00C3               	movwf	?_getADCValue+1
  8864  0F53  084B               	movf	getADCValue@adcSum+2,w
  8865  0F54  00C4               	movwf	?_getADCValue+2
  8866  0F55  0008               	return
  8867  0F56                     __end_of_getADCValue:	
  8868                           
  8869                           	psect	text38
  8870  09D7                     __ptext38:	
  8871 ;; *************** function _sleepMs *****************
  8872 ;; Defined at:
  8873 ;;		line 36 in file "interface.c"
  8874 ;; Parameters:    Size  Location     Type
  8875 ;;  milliseconds    2    0[COMMON] unsigned int 
  8876 ;; Auto vars:     Size  Location     Type
  8877 ;;  wdtps           1    3[COMMON] unsigned char 
  8878 ;; Return value:  Size  Location     Type
  8879 ;;                  1    wreg      void 
  8880 ;; Registers used:
  8881 ;;		wreg, status,2, status,0, btemp+10, btemp+11, pclath
  8882 ;; Tracked objects:
  8883 ;;		On entry : 0/0
  8884 ;;		On exit  : 0/0
  8885 ;;		Unchanged: 0/0
  8886 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8887 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8888 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8889 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8890 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8891 ;;Total ram usage:        4 bytes
  8892 ;; Hardware stack levels used:    1
  8893 ;; Hardware stack levels required when called:    8
  8894 ;; This function calls:
  8895 ;;		_resetWDT
  8896 ;; This function is called by:
  8897 ;;		_getADCValue
  8898 ;;		_sleepListren
  8899 ;;		_nrf24l01SendPacket
  8900 ;; This function uses a non-reentrant model
  8901 ;;
  8902                           
  8903                           
  8904                           ;psect for function _sleepMs
  8905  09D7                     _sleepMs:	
  8906                           
  8907                           ;interface.c: 38: unsigned char wdtps;;interface.c: 39: for (wdtps = 0; wdtps <= 0b10010
      +                          ; wdtps++){
  8908                           
  8909                           ;incstack = 0
  8910                           ; Regs used in _sleepMs: [wreg+status,2+status,0+btemp+10+btemp+11+pclath]
  8911  09D7  01F3               	clrf	sleepMs@wdtps
  8912  09D8  3013               	movlw	19
  8913  09D9  0273               	subwf	sleepMs@wdtps,w
  8914  09DA  1803               	btfsc	3,0
  8915  09DB  2A00               	goto	l3805
  8916  09DC                     l3789:	
  8917                           
  8918                           ;interface.c: 40: if ((milliseconds >> wdtps) & 0b1){
  8919  09DC  0871               	movf	sleepMs@milliseconds+1,w
  8920  09DD  00FF               	movwf	127
  8921  09DE  0870               	movf	sleepMs@milliseconds,w
  8922  09DF  00FE               	movwf	126
  8923  09E0  0A73               	incf	sleepMs@wdtps,w
  8924  09E1  29E4               	goto	u4054
  8925  09E2                     u4055:	
  8926  09E2  36FF               	lsrf	127,f
  8927  09E3  0CFE               	rrf	126,f
  8928  09E4                     u4054:	
  8929  09E4  0B89               	decfsz	9,f
  8930  09E5  29E2               	goto	u4055
  8931  09E6  1C7E               	btfss	126,0
  8932  09E7  29F8               	goto	l3801
  8933  09E8                     l3791:	
  8934                           ;interface.c: 41: START_SLEEP:
  8935                           
  8936                           
  8937                           ;interface.c: 42: WDTCONbits.WDTPS = wdtps;
  8938  09E8  0873               	movf	sleepMs@wdtps,w
  8939  09E9  00F2               	movwf	??_sleepMs
  8940  09EA  0DF2               	rlf	??_sleepMs,f
  8941  09EB  0021               	movlb	1	; select bank1
  8942  09EC  0817               	movf	23,w	;volatile
  8943  09ED  0672               	xorwf	??_sleepMs,w
  8944  09EE  39C1               	andlw	-63
  8945  09EF  0672               	xorwf	??_sleepMs,w
  8946  09F0  0097               	movwf	23	;volatile
  8947  09F1  0063               	sleep	;# 
  8948                           
  8949                           ;interface.c: 44: __nop();
  8950  09F2  0000               	nop
  8951                           
  8952                           ;interface.c: 45: __nop();
  8953  09F3  0000               	nop
  8954                           
  8955                           ;interface.c: 47: if( STATUSbits.nTO || STATUSbits.nPD){
  8956  09F4  0020               	movlb	0	; select bank0
  8957  09F5  1E03               	btfss	3,4	;volatile
  8958  09F6  1983               	btfsc	3,3	;volatile
  8959                           
  8960                           ;interface.c: 48: goto START_SLEEP;
  8961  09F7  29E8               	goto	l3791
  8962  09F8                     l3801:	
  8963  09F8  3001               	movlw	1
  8964  09F9  00FF               	movwf	127
  8965  09FA  087F               	movf	127,w
  8966  09FB  07F3               	addwf	sleepMs@wdtps,f
  8967  09FC  3013               	movlw	19
  8968  09FD  0273               	subwf	sleepMs@wdtps,w
  8969  09FE  1C03               	skipc
  8970  09FF  29DC               	goto	l3789
  8971  0A00                     l3805:	
  8972                           
  8973                           ;interface.c: 49: };interface.c: 50: };interface.c: 51: };interface.c: 53: resetWDT();
  8974  0A00  3197  27AC         	fcall	_resetWDT
  8975  0A02  0008               	return
  8976  0A03                     __end_of_sleepMs:	
  8977                           
  8978                           	psect	text39
  8979  17AC                     __ptext39:	
  8980 ;; *************** function _resetWDT *****************
  8981 ;; Defined at:
  8982 ;;		line 31 in file "interface.c"
  8983 ;; Parameters:    Size  Location     Type
  8984 ;;		None
  8985 ;; Auto vars:     Size  Location     Type
  8986 ;;		None
  8987 ;; Return value:  Size  Location     Type
  8988 ;;                  1    wreg      void 
  8989 ;; Registers used:
  8990 ;;		wreg, status,2, status,0
  8991 ;; Tracked objects:
  8992 ;;		On entry : 0/0
  8993 ;;		On exit  : 0/0
  8994 ;;		Unchanged: 0/0
  8995 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8996 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8997 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8998 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8999 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9000 ;;Total ram usage:        0 bytes
  9001 ;; Hardware stack levels used:    1
  9002 ;; Hardware stack levels required when called:    7
  9003 ;; This function calls:
  9004 ;;		Nothing
  9005 ;; This function is called by:
  9006 ;;		_sleepMs
  9007 ;;		_ISR
  9008 ;; This function uses a reentrant model
  9009 ;;
  9010                           
  9011                           
  9012                           ;psect for function _resetWDT
  9013  17AC                     _resetWDT:	
  9014                           
  9015                           ;interface.c: 32: WDTCONbits.WDTPS = 0b01101;
  9016                           
  9017                           ; autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 0, argsize = 0 var
      +                          gsize = 0, retsize = 0 argfudge = 0
  9018                           ;incstack = 0
  9019 ;; hardware stack exceeded
  9020                           ; Regs used in _resetWDT: [wreg+status,2+status,0]
  9021  17AC  0021               	movlb	1	; select bank1
  9022  17AD  0817               	movf	23,w	;volatile
  9023  17AE  39C1               	andlw	-63
  9024  17AF  381A               	iorlw	26
  9025  17B0  0097               	movwf	23	;volatile
  9026  17B1  0064               	clrwdt	;# 
  9027                           
  9028                           ; _resetWDT: autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 0, args
      +                          ize = 0, vargsize = 0
  9029  17B2  0008               	return
  9030  17B3                     __end_of_resetWDT:	
  9031                           
  9032                           	psect	text40
  9033  0E04                     __ptext40:	
  9034 ;; *************** function ___ftdiv *****************
  9035 ;; Defined at:
  9036 ;;		line 56 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\ftdiv.c"
  9037 ;; Parameters:    Size  Location     Type
  9038 ;;  f2              3   21[BANK0 ] float 
  9039 ;;  f1              3   24[BANK0 ] float 
  9040 ;; Auto vars:     Size  Location     Type
  9041 ;;  f3              3   29[BANK0 ] float 
  9042 ;;  sign            1   33[BANK0 ] unsigned char 
  9043 ;;  exp             1   32[BANK0 ] unsigned char 
  9044 ;;  cntr            1   28[BANK0 ] unsigned char 
  9045 ;; Return value:  Size  Location     Type
  9046 ;;                  3   21[BANK0 ] float 
  9047 ;; Registers used:
  9048 ;;		wreg, status,2, status,0, btemp+9, btemp+10, btemp+11, pclath, cstack
  9049 ;; Tracked objects:
  9050 ;;		On entry : 0/0
  9051 ;;		On exit  : 0/0
  9052 ;;		Unchanged: 0/0
  9053 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9054 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9055 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9056 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9057 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9058 ;;Total ram usage:       13 bytes
  9059 ;; Hardware stack levels used:    1
  9060 ;; Hardware stack levels required when called:    8
  9061 ;; This function calls:
  9062 ;;		___ftpack
  9063 ;; This function is called by:
  9064 ;;		_getADCValue
  9065 ;;		_loop
  9066 ;; This function uses a non-reentrant model
  9067 ;;
  9068                           
  9069                           
  9070                           ;psect for function ___ftdiv
  9071  0E04                     ___ftdiv:	
  9072                           
  9073                           ;incstack = 0
  9074                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+btemp+9-btemp+11+pclath+cstack]
  9075  0E04  0020               	movlb	0	; select bank0
  9076  0E05  0838               	movf	___ftdiv@f1,w
  9077  0E06  00FD               	movwf	125
  9078  0E07  0839               	movf	___ftdiv@f1+1,w
  9079  0E08  00FE               	movwf	126
  9080  0E09  083A               	movf	___ftdiv@f1+2,w
  9081  0E0A  00FF               	movwf	127
  9082  0E0B  1003               	clrc
  9083  0E0C  0D7E               	rlf	126,w
  9084  0E0D  0D7F               	rlf	127,w
  9085  0E0E  00FF               	movwf	127
  9086  0E0F  087F               	movf	127,w
  9087  0E10  00C0               	movwf	___ftdiv@exp
  9088  0E11  0840               	movf	___ftdiv@exp,w
  9089  0E12  1D03               	btfss	3,2
  9090  0E13  2E1B               	goto	l4267
  9091  0E14  3000               	movlw	0
  9092  0E15  00B5               	movwf	?___ftdiv
  9093  0E16  3000               	movlw	0
  9094  0E17  00B6               	movwf	?___ftdiv+1
  9095  0E18  3000               	movlw	0
  9096  0E19  00B7               	movwf	?___ftdiv+2
  9097  0E1A  0008               	return
  9098  0E1B                     l4267:	
  9099  0E1B  0835               	movf	___ftdiv@f2,w
  9100  0E1C  00FD               	movwf	125
  9101  0E1D  0836               	movf	___ftdiv@f2+1,w
  9102  0E1E  00FE               	movwf	126
  9103  0E1F  0837               	movf	___ftdiv@f2+2,w
  9104  0E20  00FF               	movwf	127
  9105  0E21  1003               	clrc
  9106  0E22  0D7E               	rlf	126,w
  9107  0E23  0D7F               	rlf	127,w
  9108  0E24  00FF               	movwf	127
  9109  0E25  087F               	movf	127,w
  9110  0E26  00C1               	movwf	___ftdiv@sign
  9111  0E27  0841               	movf	___ftdiv@sign,w
  9112  0E28  1D03               	btfss	3,2
  9113  0E29  2E31               	goto	l4273
  9114  0E2A  3000               	movlw	0
  9115  0E2B  00B5               	movwf	?___ftdiv
  9116  0E2C  3000               	movlw	0
  9117  0E2D  00B6               	movwf	?___ftdiv+1
  9118  0E2E  3000               	movlw	0
  9119  0E2F  00B7               	movwf	?___ftdiv+2
  9120  0E30  0008               	return
  9121  0E31                     l4273:	
  9122  0E31  3000               	movlw	0
  9123  0E32  00BD               	movwf	___ftdiv@f3
  9124  0E33  3000               	movlw	0
  9125  0E34  00BE               	movwf	___ftdiv@f3+1
  9126  0E35  3000               	movlw	0
  9127  0E36  00BF               	movwf	___ftdiv@f3+2
  9128  0E37  3089               	movlw	137
  9129  0E38  0741               	addwf	___ftdiv@sign,w
  9130  0E39  00BB               	movwf	??___ftdiv
  9131  0E3A  083B               	movf	??___ftdiv,w
  9132  0E3B  02C0               	subwf	___ftdiv@exp,f
  9133  0E3C  0838               	movf	___ftdiv@f1,w
  9134  0E3D  00FD               	movwf	125
  9135  0E3E  0839               	movf	___ftdiv@f1+1,w
  9136  0E3F  00FE               	movwf	126
  9137  0E40  083A               	movf	___ftdiv@f1+2,w
  9138  0E41  00FF               	movwf	127
  9139  0E42  3010               	movlw	16
  9140  0E43                     u4815:	
  9141  0E43  36FF               	lsrf	127,f
  9142  0E44  0CFE               	rrf	126,f
  9143  0E45  0CFD               	rrf	125,f
  9144  0E46  0B89               	decfsz	9,f
  9145  0E47  2E43               	goto	u4815
  9146  0E48  087D               	movf	125,w
  9147  0E49  00FF               	movwf	127
  9148  0E4A  087F               	movf	127,w
  9149  0E4B  00C1               	movwf	___ftdiv@sign
  9150  0E4C  0835               	movf	___ftdiv@f2,w
  9151  0E4D  00FD               	movwf	125
  9152  0E4E  0836               	movf	___ftdiv@f2+1,w
  9153  0E4F  00FE               	movwf	126
  9154  0E50  0837               	movf	___ftdiv@f2+2,w
  9155  0E51  00FF               	movwf	127
  9156  0E52  3010               	movlw	16
  9157  0E53                     u4825:	
  9158  0E53  36FF               	lsrf	127,f
  9159  0E54  0CFE               	rrf	126,f
  9160  0E55  0CFD               	rrf	125,f
  9161  0E56  0B89               	decfsz	9,f
  9162  0E57  2E53               	goto	u4825
  9163  0E58  087D               	movf	125,w
  9164  0E59  00FF               	movwf	127
  9165  0E5A  087F               	movf	127,w
  9166  0E5B  06C1               	xorwf	___ftdiv@sign,f
  9167  0E5C  3080               	movlw	128
  9168  0E5D  00FF               	movwf	127
  9169  0E5E  087F               	movf	127,w
  9170  0E5F  05C1               	andwf	___ftdiv@sign,f
  9171  0E60  17B9               	bsf	___ftdiv@f1+1,7
  9172  0E61  30FF               	movlw	255
  9173  0E62  05B8               	andwf	___ftdiv@f1,f
  9174  0E63  30FF               	movlw	255
  9175  0E64  05B9               	andwf	___ftdiv@f1+1,f
  9176  0E65  3000               	movlw	0
  9177  0E66  05BA               	andwf	___ftdiv@f1+2,f
  9178  0E67  17B6               	bsf	___ftdiv@f2+1,7
  9179  0E68  30FF               	movlw	255
  9180  0E69  05B5               	andwf	___ftdiv@f2,f
  9181  0E6A  30FF               	movlw	255
  9182  0E6B  05B6               	andwf	___ftdiv@f2+1,f
  9183  0E6C  3000               	movlw	0
  9184  0E6D  05B7               	andwf	___ftdiv@f2+2,f
  9185  0E6E  3018               	movlw	24
  9186  0E6F  00FF               	movwf	127
  9187  0E70  087F               	movf	127,w
  9188  0E71  00BC               	movwf	___ftdiv@cntr
  9189  0E72                     l4291:	
  9190  0E72  3001               	movlw	1
  9191  0E73                     u4835:	
  9192  0E73  35BD               	lslf	___ftdiv@f3,f
  9193  0E74  0DBE               	rlf	___ftdiv@f3+1,f
  9194  0E75  0DBF               	rlf	___ftdiv@f3+2,f
  9195  0E76  0B89               	decfsz	9,f
  9196  0E77  2E73               	goto	u4835
  9197  0E78  0837               	movf	___ftdiv@f2+2,w
  9198  0E79  023A               	subwf	___ftdiv@f1+2,w
  9199  0E7A  1D03               	skipz
  9200  0E7B  2E82               	goto	u4845
  9201  0E7C  0836               	movf	___ftdiv@f2+1,w
  9202  0E7D  0239               	subwf	___ftdiv@f1+1,w
  9203  0E7E  1D03               	skipz
  9204  0E7F  2E82               	goto	u4845
  9205  0E80  0835               	movf	___ftdiv@f2,w
  9206  0E81  0238               	subwf	___ftdiv@f1,w
  9207  0E82                     u4845:	
  9208  0E82  1C03               	skipc
  9209  0E83  2E8B               	goto	l4299
  9210  0E84  0835               	movf	___ftdiv@f2,w
  9211  0E85  02B8               	subwf	___ftdiv@f1,f
  9212  0E86  0836               	movf	___ftdiv@f2+1,w
  9213  0E87  3BB9               	subwfb	___ftdiv@f1+1,f
  9214  0E88  0837               	movf	___ftdiv@f2+2,w
  9215  0E89  3BBA               	subwfb	___ftdiv@f1+2,f
  9216  0E8A  143D               	bsf	___ftdiv@f3,0
  9217  0E8B                     l4299:	
  9218  0E8B  3001               	movlw	1
  9219  0E8C                     u4855:	
  9220  0E8C  35B8               	lslf	___ftdiv@f1,f
  9221  0E8D  0DB9               	rlf	___ftdiv@f1+1,f
  9222  0E8E  0DBA               	rlf	___ftdiv@f1+2,f
  9223  0E8F  0B89               	decfsz	9,f
  9224  0E90  2E8C               	goto	u4855
  9225  0E91  3001               	movlw	1
  9226  0E92  02BC               	subwf	___ftdiv@cntr,f
  9227  0E93  1D03               	btfss	3,2
  9228  0E94  2E72               	goto	l4291
  9229  0E95  083D               	movf	___ftdiv@f3,w
  9230  0E96  00A6               	movwf	___ftpack@arg
  9231  0E97  083E               	movf	___ftdiv@f3+1,w
  9232  0E98  00A7               	movwf	___ftpack@arg+1
  9233  0E99  083F               	movf	___ftdiv@f3+2,w
  9234  0E9A  00A8               	movwf	___ftpack@arg+2
  9235  0E9B  0840               	movf	___ftdiv@exp,w
  9236  0E9C  00FF               	movwf	127
  9237  0E9D  087F               	movf	127,w
  9238  0E9E  00A9               	movwf	___ftpack@exp
  9239  0E9F  0841               	movf	___ftdiv@sign,w
  9240  0EA0  00FF               	movwf	127
  9241  0EA1  087F               	movf	127,w
  9242  0EA2  00AA               	movwf	___ftpack@sign
  9243  0EA3  318C  2492         	fcall	___ftpack
  9244  0EA5  0020               	movlb	0	; select bank0
  9245  0EA6  0826               	movf	?___ftpack,w
  9246  0EA7  00B5               	movwf	?___ftdiv
  9247  0EA8  0827               	movf	?___ftpack+1,w
  9248  0EA9  00B6               	movwf	?___ftdiv+1
  9249  0EAA  0828               	movf	?___ftpack+2,w
  9250  0EAB  00B7               	movwf	?___ftdiv+2
  9251  0EAC  0008               	return
  9252  0EAD                     __end_of___ftdiv:	
  9253                           
  9254                           	psect	text41
  9255  0471                     __ptext41:	
  9256 ;; *************** function ___ftadd *****************
  9257 ;; Defined at:
  9258 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\ftadd.c"
  9259 ;; Parameters:    Size  Location     Type
  9260 ;;  f1              3   11[BANK0 ] float 
  9261 ;;  f2              3   14[BANK0 ] float 
  9262 ;; Auto vars:     Size  Location     Type
  9263 ;;  exp1            1   20[BANK0 ] unsigned char 
  9264 ;;  exp2            1   19[BANK0 ] unsigned char 
  9265 ;;  sign            1   18[BANK0 ] unsigned char 
  9266 ;; Return value:  Size  Location     Type
  9267 ;;                  3   11[BANK0 ] float 
  9268 ;; Registers used:
  9269 ;;		wreg, status,2, status,0, btemp+9, btemp+10, btemp+11, pclath, cstack
  9270 ;; Tracked objects:
  9271 ;;		On entry : 0/0
  9272 ;;		On exit  : 0/0
  9273 ;;		Unchanged: 0/0
  9274 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9275 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9276 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9277 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9278 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9279 ;;Total ram usage:       10 bytes
  9280 ;; Hardware stack levels used:    1
  9281 ;; Hardware stack levels required when called:    8
  9282 ;; This function calls:
  9283 ;;		___ftpack
  9284 ;; This function is called by:
  9285 ;;		_getADCValue
  9286 ;;		_loop
  9287 ;;		___ftsub
  9288 ;; This function uses a non-reentrant model
  9289 ;;
  9290                           
  9291                           
  9292                           ;psect for function ___ftadd
  9293  0471                     ___ftadd:	
  9294                           
  9295                           ;incstack = 0
  9296                           ; Regs used in ___ftadd: [wreg+status,2+status,0+btemp+9-btemp+11+pclath+cstack]
  9297  0471  0020               	movlb	0	; select bank0
  9298  0472  082B               	movf	___ftadd@f1,w
  9299  0473  00FD               	movwf	125
  9300  0474  082C               	movf	___ftadd@f1+1,w
  9301  0475  00FE               	movwf	126
  9302  0476  082D               	movf	___ftadd@f1+2,w
  9303  0477  00FF               	movwf	127
  9304  0478  1003               	clrc
  9305  0479  0D7E               	rlf	126,w
  9306  047A  0D7F               	rlf	127,w
  9307  047B  00FF               	movwf	127
  9308  047C  087F               	movf	127,w
  9309  047D  00B4               	movwf	___ftadd@exp1
  9310  047E  082E               	movf	___ftadd@f2,w
  9311  047F  00FD               	movwf	125
  9312  0480  082F               	movf	___ftadd@f2+1,w
  9313  0481  00FE               	movwf	126
  9314  0482  0830               	movf	___ftadd@f2+2,w
  9315  0483  00FF               	movwf	127
  9316  0484  1003               	clrc
  9317  0485  0D7E               	rlf	126,w
  9318  0486  0D7F               	rlf	127,w
  9319  0487  00FF               	movwf	127
  9320  0488  087F               	movf	127,w
  9321  0489  00B3               	movwf	___ftadd@exp2
  9322  048A  0834               	movf	___ftadd@exp1,w
  9323  048B  1903               	btfsc	3,2
  9324  048C  2C99               	goto	l3693
  9325  048D  0833               	movf	___ftadd@exp2,w
  9326  048E  0234               	subwf	___ftadd@exp1,w
  9327  048F  1803               	skipnc
  9328  0490  2CA0               	goto	l3697
  9329  0491  0334               	decf	___ftadd@exp1,w
  9330  0492  3AFF               	xorlw	255
  9331  0493  0733               	addwf	___ftadd@exp2,w
  9332  0494  00B1               	movwf	??___ftadd
  9333  0495  3019               	movlw	25
  9334  0496  0231               	subwf	??___ftadd,w
  9335  0497  1C03               	skipc
  9336  0498  2CA0               	goto	l3697
  9337  0499                     l3693:	
  9338  0499  082E               	movf	___ftadd@f2,w
  9339  049A  00AB               	movwf	?___ftadd
  9340  049B  082F               	movf	___ftadd@f2+1,w
  9341  049C  00AC               	movwf	?___ftadd+1
  9342  049D  0830               	movf	___ftadd@f2+2,w
  9343  049E  00AD               	movwf	?___ftadd+2
  9344  049F  0008               	return
  9345  04A0                     l3697:	
  9346  04A0  0833               	movf	___ftadd@exp2,w
  9347  04A1  1903               	btfsc	3,2
  9348  04A2  0008               	return
  9349  04A3  0834               	movf	___ftadd@exp1,w
  9350  04A4  0233               	subwf	___ftadd@exp2,w
  9351  04A5  1803               	skipnc
  9352  04A6  2CAF               	goto	l3703
  9353  04A7  0333               	decf	___ftadd@exp2,w
  9354  04A8  3AFF               	xorlw	255
  9355  04A9  0734               	addwf	___ftadd@exp1,w
  9356  04AA  00B1               	movwf	??___ftadd
  9357  04AB  3019               	movlw	25
  9358  04AC  0231               	subwf	??___ftadd,w
  9359  04AD  1803               	btfsc	3,0
  9360  04AE  0008               	return
  9361  04AF                     l3703:	
  9362  04AF  3006               	movlw	6
  9363  04B0  00FF               	movwf	127
  9364  04B1  087F               	movf	127,w
  9365  04B2  00B2               	movwf	___ftadd@sign
  9366  04B3  1BAD               	btfsc	___ftadd@f1+2,7
  9367  04B4  17B2               	bsf	___ftadd@sign,7
  9368  04B5  1BB0               	btfsc	___ftadd@f2+2,7
  9369  04B6  1732               	bsf	___ftadd@sign,6
  9370  04B7  17AC               	bsf	___ftadd@f1+1,7
  9371  04B8  30FF               	movlw	255
  9372  04B9  05AB               	andwf	___ftadd@f1,f
  9373  04BA  30FF               	movlw	255
  9374  04BB  05AC               	andwf	___ftadd@f1+1,f
  9375  04BC  3000               	movlw	0
  9376  04BD  05AD               	andwf	___ftadd@f1+2,f
  9377  04BE  17AF               	bsf	___ftadd@f2+1,7
  9378  04BF  30FF               	movlw	255
  9379  04C0  05AE               	andwf	___ftadd@f2,f
  9380  04C1  30FF               	movlw	255
  9381  04C2  05AF               	andwf	___ftadd@f2+1,f
  9382  04C3  3000               	movlw	0
  9383  04C4  05B0               	andwf	___ftadd@f2+2,f
  9384  04C5  0833               	movf	___ftadd@exp2,w
  9385  04C6  0234               	subwf	___ftadd@exp1,w
  9386  04C7  1803               	skipnc
  9387  04C8  2CEB               	goto	l3727
  9388  04C9                     l3715:	
  9389  04C9  3001               	movlw	1
  9390  04CA                     u3845:	
  9391  04CA  35AE               	lslf	___ftadd@f2,f
  9392  04CB  0DAF               	rlf	___ftadd@f2+1,f
  9393  04CC  0DB0               	rlf	___ftadd@f2+2,f
  9394  04CD  0B89               	decfsz	9,f
  9395  04CE  2CCA               	goto	u3845
  9396  04CF  3001               	movlw	1
  9397  04D0  02B3               	subwf	___ftadd@exp2,f
  9398  04D1  0833               	movf	___ftadd@exp2,w
  9399  04D2  0634               	xorwf	___ftadd@exp1,w
  9400  04D3  1903               	skipnz
  9401  04D4  2CE6               	goto	l3725
  9402  04D5  3001               	movlw	1
  9403  04D6  02B2               	subwf	___ftadd@sign,f
  9404  04D7  0832               	movf	___ftadd@sign,w
  9405  04D8  3907               	andlw	7
  9406  04D9  1903               	btfsc	3,2
  9407  04DA  2CE6               	goto	l3725
  9408  04DB  2CC9               	goto	l3715
  9409  04DC                     l3721:	
  9410  04DC  3001               	movlw	1
  9411  04DD                     u3875:	
  9412  04DD  36AD               	lsrf	___ftadd@f1+2,f
  9413  04DE  0CAC               	rrf	___ftadd@f1+1,f
  9414  04DF  0CAB               	rrf	___ftadd@f1,f
  9415  04E0  0B89               	decfsz	9,f
  9416  04E1  2CDD               	goto	u3875
  9417  04E2  3001               	movlw	1
  9418  04E3  00FF               	movwf	127
  9419  04E4  087F               	movf	127,w
  9420  04E5  07B4               	addwf	___ftadd@exp1,f
  9421  04E6                     l3725:	
  9422  04E6  0834               	movf	___ftadd@exp1,w
  9423  04E7  0633               	xorwf	___ftadd@exp2,w
  9424  04E8  1903               	btfsc	3,2
  9425  04E9  2D10               	goto	l717
  9426  04EA  2CDC               	goto	l3721
  9427  04EB                     l3727:	
  9428  04EB  0834               	movf	___ftadd@exp1,w
  9429  04EC  0233               	subwf	___ftadd@exp2,w
  9430  04ED  1803               	skipnc
  9431  04EE  2D10               	goto	l717
  9432  04EF                     l3729:	
  9433  04EF  3001               	movlw	1
  9434  04F0                     u3905:	
  9435  04F0  35AB               	lslf	___ftadd@f1,f
  9436  04F1  0DAC               	rlf	___ftadd@f1+1,f
  9437  04F2  0DAD               	rlf	___ftadd@f1+2,f
  9438  04F3  0B89               	decfsz	9,f
  9439  04F4  2CF0               	goto	u3905
  9440  04F5  3001               	movlw	1
  9441  04F6  02B4               	subwf	___ftadd@exp1,f
  9442  04F7  0833               	movf	___ftadd@exp2,w
  9443  04F8  0634               	xorwf	___ftadd@exp1,w
  9444  04F9  1903               	skipnz
  9445  04FA  2D0C               	goto	l3739
  9446  04FB  3001               	movlw	1
  9447  04FC  02B2               	subwf	___ftadd@sign,f
  9448  04FD  0832               	movf	___ftadd@sign,w
  9449  04FE  3907               	andlw	7
  9450  04FF  1903               	btfsc	3,2
  9451  0500  2D0C               	goto	l3739
  9452  0501  2CEF               	goto	l3729
  9453  0502                     l3735:	
  9454  0502  3001               	movlw	1
  9455  0503                     u3935:	
  9456  0503  36B0               	lsrf	___ftadd@f2+2,f
  9457  0504  0CAF               	rrf	___ftadd@f2+1,f
  9458  0505  0CAE               	rrf	___ftadd@f2,f
  9459  0506  0B89               	decfsz	9,f
  9460  0507  2D03               	goto	u3935
  9461  0508  3001               	movlw	1
  9462  0509  00FF               	movwf	127
  9463  050A  087F               	movf	127,w
  9464  050B  07B3               	addwf	___ftadd@exp2,f
  9465  050C                     l3739:	
  9466  050C  0834               	movf	___ftadd@exp1,w
  9467  050D  0633               	xorwf	___ftadd@exp2,w
  9468  050E  1D03               	skipz
  9469  050F  2D02               	goto	l3735
  9470  0510                     l717:	
  9471  0510  1FB2               	btfss	___ftadd@sign,7
  9472  0511  2D22               	goto	l3743
  9473  0512  30FF               	movlw	255
  9474  0513  06AB               	xorwf	___ftadd@f1,f
  9475  0514  30FF               	movlw	255
  9476  0515  06AC               	xorwf	___ftadd@f1+1,f
  9477  0516  30FF               	movlw	255
  9478  0517  06AD               	xorwf	___ftadd@f1+2,f
  9479  0518  3001               	movlw	1
  9480  0519  07AB               	addwf	___ftadd@f1,f
  9481  051A  3000               	movlw	0
  9482  051B  1803               	skipnc
  9483  051C  3001               	movlw	1
  9484  051D  07AC               	addwf	___ftadd@f1+1,f
  9485  051E  3000               	movlw	0
  9486  051F  1803               	skipnc
  9487  0520  3001               	movlw	1
  9488  0521  07AD               	addwf	___ftadd@f1+2,f
  9489  0522                     l3743:	
  9490  0522  1F32               	btfss	___ftadd@sign,6
  9491  0523  2D34               	goto	l3747
  9492  0524  30FF               	movlw	255
  9493  0525  06AE               	xorwf	___ftadd@f2,f
  9494  0526  30FF               	movlw	255
  9495  0527  06AF               	xorwf	___ftadd@f2+1,f
  9496  0528  30FF               	movlw	255
  9497  0529  06B0               	xorwf	___ftadd@f2+2,f
  9498  052A  3001               	movlw	1
  9499  052B  07AE               	addwf	___ftadd@f2,f
  9500  052C  3000               	movlw	0
  9501  052D  1803               	skipnc
  9502  052E  3001               	movlw	1
  9503  052F  07AF               	addwf	___ftadd@f2+1,f
  9504  0530  3000               	movlw	0
  9505  0531  1803               	skipnc
  9506  0532  3001               	movlw	1
  9507  0533  07B0               	addwf	___ftadd@f2+2,f
  9508  0534                     l3747:	
  9509  0534  01B2               	clrf	___ftadd@sign
  9510  0535  082B               	movf	___ftadd@f1,w
  9511  0536  07AE               	addwf	___ftadd@f2,f
  9512  0537  082C               	movf	___ftadd@f1+1,w
  9513  0538  3DAF               	addwfc	___ftadd@f2+1,f
  9514  0539  082D               	movf	___ftadd@f1+2,w
  9515  053A  3DB0               	addwfc	___ftadd@f2+2,f
  9516  053B  1FB0               	btfss	___ftadd@f2+2,7
  9517  053C  2D4F               	goto	l3757
  9518  053D  30FF               	movlw	255
  9519  053E  06AE               	xorwf	___ftadd@f2,f
  9520  053F  30FF               	movlw	255
  9521  0540  06AF               	xorwf	___ftadd@f2+1,f
  9522  0541  30FF               	movlw	255
  9523  0542  06B0               	xorwf	___ftadd@f2+2,f
  9524  0543  3001               	movlw	1
  9525  0544  07AE               	addwf	___ftadd@f2,f
  9526  0545  3000               	movlw	0
  9527  0546  1803               	skipnc
  9528  0547  3001               	movlw	1
  9529  0548  07AF               	addwf	___ftadd@f2+1,f
  9530  0549  3000               	movlw	0
  9531  054A  1803               	skipnc
  9532  054B  3001               	movlw	1
  9533  054C  07B0               	addwf	___ftadd@f2+2,f
  9534  054D  01B2               	clrf	___ftadd@sign
  9535  054E  0AB2               	incf	___ftadd@sign,f
  9536  054F                     l3757:	
  9537  054F  082E               	movf	___ftadd@f2,w
  9538  0550  00A6               	movwf	___ftpack@arg
  9539  0551  082F               	movf	___ftadd@f2+1,w
  9540  0552  00A7               	movwf	___ftpack@arg+1
  9541  0553  0830               	movf	___ftadd@f2+2,w
  9542  0554  00A8               	movwf	___ftpack@arg+2
  9543  0555  0834               	movf	___ftadd@exp1,w
  9544  0556  00FF               	movwf	127
  9545  0557  087F               	movf	127,w
  9546  0558  00A9               	movwf	___ftpack@exp
  9547  0559  0832               	movf	___ftadd@sign,w
  9548  055A  00FF               	movwf	127
  9549  055B  087F               	movf	127,w
  9550  055C  00AA               	movwf	___ftpack@sign
  9551  055D  318C  2492         	fcall	___ftpack
  9552  055F  0020               	movlb	0	; select bank0
  9553  0560  0826               	movf	?___ftpack,w
  9554  0561  00AB               	movwf	?___ftadd
  9555  0562  0827               	movf	?___ftpack+1,w
  9556  0563  00AC               	movwf	?___ftadd+1
  9557  0564  0828               	movf	?___ftpack+2,w
  9558  0565  00AD               	movwf	?___ftadd+2
  9559  0566  0008               	return
  9560  0567                     __end_of___ftadd:	
  9561                           
  9562                           	psect	text42
  9563  093D                     __ptext42:	
  9564 ;; *************** function ___awtoft *****************
  9565 ;; Defined at:
  9566 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\awtoft.c"
  9567 ;; Parameters:    Size  Location     Type
  9568 ;;  c               2    0[COMMON] int 
  9569 ;; Auto vars:     Size  Location     Type
  9570 ;;  sign            1    3[COMMON] unsigned char 
  9571 ;; Return value:  Size  Location     Type
  9572 ;;                  3    0[COMMON] float 
  9573 ;; Registers used:
  9574 ;;		wreg, status,2, status,0, btemp+9, btemp+10, btemp+11, pclath, cstack
  9575 ;; Tracked objects:
  9576 ;;		On entry : 0/0
  9577 ;;		On exit  : 0/0
  9578 ;;		Unchanged: 0/0
  9579 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9580 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9581 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9582 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9583 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9584 ;;Total ram usage:        4 bytes
  9585 ;; Hardware stack levels used:    1
  9586 ;; Hardware stack levels required when called:    8
  9587 ;; This function calls:
  9588 ;;		___ftpack
  9589 ;; This function is called by:
  9590 ;;		_getADCValue
  9591 ;; This function uses a non-reentrant model
  9592 ;;
  9593                           
  9594                           
  9595                           ;psect for function ___awtoft
  9596  093D                     ___awtoft:	
  9597                           
  9598                           ;incstack = 0
  9599                           ; Regs used in ___awtoft: [wreg+status,2+status,0+btemp+9-btemp+11+pclath+cstack]
  9600  093D  01F3               	clrf	___awtoft@sign
  9601  093E  1FF1               	btfss	___awtoft@c+1,7
  9602  093F  2947               	goto	l4257
  9603  0940  09F0               	comf	___awtoft@c,f
  9604  0941  09F1               	comf	___awtoft@c+1,f
  9605  0942  0AF0               	incf	___awtoft@c,f
  9606  0943  1903               	skipnz
  9607  0944  0AF1               	incf	___awtoft@c+1,f
  9608  0945  01F3               	clrf	___awtoft@sign
  9609  0946  0AF3               	incf	___awtoft@sign,f
  9610  0947                     l4257:	
  9611  0947  0870               	movf	___awtoft@c,w
  9612  0948  0020               	movlb	0	; select bank0
  9613  0949  00A6               	movwf	___ftpack@arg
  9614  094A  0871               	movf	___awtoft@c+1,w
  9615  094B  00A7               	movwf	___ftpack@arg+1
  9616  094C  01A8               	clrf	___ftpack@arg+2
  9617  094D  308E               	movlw	142
  9618  094E  00FF               	movwf	127
  9619  094F  087F               	movf	127,w
  9620  0950  00A9               	movwf	___ftpack@exp
  9621  0951  0873               	movf	___awtoft@sign,w
  9622  0952  00FF               	movwf	127
  9623  0953  087F               	movf	127,w
  9624  0954  00AA               	movwf	___ftpack@sign
  9625  0955  318C  2492         	fcall	___ftpack
  9626  0957  0020               	movlb	0	; select bank0
  9627  0958  0826               	movf	?___ftpack,w
  9628  0959  00F0               	movwf	?___awtoft
  9629  095A  0827               	movf	?___ftpack+1,w
  9630  095B  00F1               	movwf	?___awtoft+1
  9631  095C  0828               	movf	?___ftpack+2,w
  9632  095D  00F2               	movwf	?___awtoft+2
  9633  095E  0008               	return
  9634  095F                     __end_of___awtoft:	
  9635                           
  9636                           	psect	text43
  9637  0810                     __ptext43:	
  9638 ;; *************** function ___lbtoft *****************
  9639 ;; Defined at:
  9640 ;;		line 27 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\lbtoft.c"
  9641 ;; Parameters:    Size  Location     Type
  9642 ;;  c               1    wreg     unsigned char 
  9643 ;; Auto vars:     Size  Location     Type
  9644 ;;  c               1   11[BANK0 ] unsigned char 
  9645 ;; Return value:  Size  Location     Type
  9646 ;;                  3    0[COMMON] float 
  9647 ;; Registers used:
  9648 ;;		wreg, status,2, status,0, btemp+9, btemp+10, btemp+11, pclath, cstack
  9649 ;; Tracked objects:
  9650 ;;		On entry : 0/0
  9651 ;;		On exit  : 0/0
  9652 ;;		Unchanged: 0/0
  9653 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9654 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9655 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9656 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9657 ;;      Totals:         4       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9658 ;;Total ram usage:        5 bytes
  9659 ;; Hardware stack levels used:    1
  9660 ;; Hardware stack levels required when called:    8
  9661 ;; This function calls:
  9662 ;;		___ftpack
  9663 ;; This function is called by:
  9664 ;;		_loop
  9665 ;;		_main
  9666 ;; This function uses a non-reentrant model
  9667 ;;
  9668                           
  9669                           
  9670                           ;psect for function ___lbtoft
  9671  0810                     ___lbtoft:	
  9672                           
  9673                           ;incstack = 0
  9674                           ; Regs used in ___lbtoft: [wreg+status,2+status,0+btemp+9-btemp+11+pclath+cstack]
  9675                           ;___lbtoft@c stored from wreg
  9676  0810  0020               	movlb	0	; select bank0
  9677  0811  00AB               	movwf	___lbtoft@c
  9678  0812  082B               	movf	___lbtoft@c,w
  9679  0813  00FD               	movwf	125
  9680  0814  01FE               	clrf	126
  9681  0815  01FF               	clrf	127
  9682  0816  087D               	movf	125,w
  9683  0817  00A6               	movwf	___ftpack@arg
  9684  0818  087E               	movf	126,w
  9685  0819  00A7               	movwf	___ftpack@arg+1
  9686  081A  087F               	movf	127,w
  9687  081B  00A8               	movwf	___ftpack@arg+2
  9688  081C  308E               	movlw	142
  9689  081D  00FF               	movwf	127
  9690  081E  087F               	movf	127,w
  9691  081F  00A9               	movwf	___ftpack@exp
  9692  0820  01AA               	clrf	___ftpack@sign
  9693  0821  318C  2492         	fcall	___ftpack
  9694  0823  0020               	movlb	0	; select bank0
  9695  0824  0826               	movf	?___ftpack,w
  9696  0825  00F0               	movwf	?___lbtoft
  9697  0826  0827               	movf	?___ftpack+1,w
  9698  0827  00F1               	movwf	?___lbtoft+1
  9699  0828  0828               	movf	?___ftpack+2,w
  9700  0829  00F2               	movwf	?___lbtoft+2
  9701  082A  0008               	return
  9702  082B                     __end_of___lbtoft:	
  9703                           
  9704                           	psect	text44
  9705  0C92                     __ptext44:	
  9706 ;; *************** function ___ftpack *****************
  9707 ;; Defined at:
  9708 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\float.c"
  9709 ;; Parameters:    Size  Location     Type
  9710 ;;  arg             3    6[BANK0 ] unsigned um
  9711 ;;  exp             1    9[BANK0 ] unsigned char 
  9712 ;;  sign            1   10[BANK0 ] unsigned char 
  9713 ;; Auto vars:     Size  Location     Type
  9714 ;;		None
  9715 ;; Return value:  Size  Location     Type
  9716 ;;                  3    6[BANK0 ] float 
  9717 ;; Registers used:
  9718 ;;		wreg, status,2, status,0, btemp+9, btemp+10, btemp+11
  9719 ;; Tracked objects:
  9720 ;;		On entry : 0/0
  9721 ;;		On exit  : 0/0
  9722 ;;		Unchanged: 0/0
  9723 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9724 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9725 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9726 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9727 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9728 ;;Total ram usage:        5 bytes
  9729 ;; Hardware stack levels used:    1
  9730 ;; Hardware stack levels required when called:    7
  9731 ;; This function calls:
  9732 ;;		Nothing
  9733 ;; This function is called by:
  9734 ;;		___awtoft
  9735 ;;		___ftadd
  9736 ;;		___ftdiv
  9737 ;;		___ftmul
  9738 ;;		___lbtoft
  9739 ;;		___lltoft
  9740 ;; This function uses a non-reentrant model
  9741 ;;
  9742                           
  9743                           
  9744                           ;psect for function ___ftpack
  9745  0C92                     ___ftpack:	
  9746                           
  9747                           ;incstack = 0
  9748                           ; Regs used in ___ftpack: [wreg+status,2+status,0+btemp+9-btemp+11]
  9749  0C92  0020               	movlb	0	; select bank0
  9750  0C93  0829               	movf	___ftpack@exp,w
  9751  0C94  1903               	btfsc	3,2
  9752  0C95  2C9B               	goto	l3591
  9753  0C96  0828               	movf	___ftpack@arg+2,w
  9754  0C97  0427               	iorwf	___ftpack@arg+1,w
  9755  0C98  0426               	iorwf	___ftpack@arg,w
  9756  0C99  1D03               	skipz
  9757  0C9A  2CAC               	goto	l3599
  9758  0C9B                     l3591:	
  9759  0C9B  3000               	movlw	0
  9760  0C9C  00A6               	movwf	?___ftpack
  9761  0C9D  3000               	movlw	0
  9762  0C9E  00A7               	movwf	?___ftpack+1
  9763  0C9F  3000               	movlw	0
  9764  0CA0  00A8               	movwf	?___ftpack+2
  9765  0CA1  0008               	return
  9766  0CA2                     l3595:	
  9767  0CA2  3001               	movlw	1
  9768  0CA3  00FF               	movwf	127
  9769  0CA4  087F               	movf	127,w
  9770  0CA5  07A9               	addwf	___ftpack@exp,f
  9771  0CA6  3001               	movlw	1
  9772  0CA7                     u3525:	
  9773  0CA7  36A8               	lsrf	___ftpack@arg+2,f
  9774  0CA8  0CA7               	rrf	___ftpack@arg+1,f
  9775  0CA9  0CA6               	rrf	___ftpack@arg,f
  9776  0CAA  0B89               	decfsz	9,f
  9777  0CAB  2CA7               	goto	u3525
  9778  0CAC                     l3599:	
  9779  0CAC  30FE               	movlw	254
  9780  0CAD  0528               	andwf	___ftpack@arg+2,w
  9781  0CAE  1903               	btfsc	3,2
  9782  0CAF  2CC5               	goto	l3607
  9783  0CB0  2CA2               	goto	l3595
  9784  0CB1                     l3601:	
  9785  0CB1  3001               	movlw	1
  9786  0CB2  00FF               	movwf	127
  9787  0CB3  087F               	movf	127,w
  9788  0CB4  07A9               	addwf	___ftpack@exp,f
  9789  0CB5  3001               	movlw	1
  9790  0CB6  07A6               	addwf	___ftpack@arg,f
  9791  0CB7  3000               	movlw	0
  9792  0CB8  1803               	skipnc
  9793  0CB9  3001               	movlw	1
  9794  0CBA  07A7               	addwf	___ftpack@arg+1,f
  9795  0CBB  3000               	movlw	0
  9796  0CBC  1803               	skipnc
  9797  0CBD  3001               	movlw	1
  9798  0CBE  07A8               	addwf	___ftpack@arg+2,f
  9799  0CBF  3001               	movlw	1
  9800  0CC0                     u3545:	
  9801  0CC0  36A8               	lsrf	___ftpack@arg+2,f
  9802  0CC1  0CA7               	rrf	___ftpack@arg+1,f
  9803  0CC2  0CA6               	rrf	___ftpack@arg,f
  9804  0CC3  0B89               	decfsz	9,f
  9805  0CC4  2CC0               	goto	u3545
  9806  0CC5                     l3607:	
  9807  0CC5  30FF               	movlw	255
  9808  0CC6  0528               	andwf	___ftpack@arg+2,w
  9809  0CC7  1903               	btfsc	3,2
  9810  0CC8  2CD2               	goto	l3611
  9811  0CC9  2CB1               	goto	l3601
  9812  0CCA                     l3609:	
  9813  0CCA  3001               	movlw	1
  9814  0CCB  02A9               	subwf	___ftpack@exp,f
  9815  0CCC  3001               	movlw	1
  9816  0CCD                     u3565:	
  9817  0CCD  35A6               	lslf	___ftpack@arg,f
  9818  0CCE  0DA7               	rlf	___ftpack@arg+1,f
  9819  0CCF  0DA8               	rlf	___ftpack@arg+2,f
  9820  0CD0  0B89               	decfsz	9,f
  9821  0CD1  2CCD               	goto	u3565
  9822  0CD2                     l3611:	
  9823  0CD2  1BA7               	btfsc	___ftpack@arg+1,7
  9824  0CD3  2CD8               	goto	l693
  9825  0CD4  3002               	movlw	2
  9826  0CD5  0229               	subwf	___ftpack@exp,w
  9827  0CD6  1803               	skipnc
  9828  0CD7  2CCA               	goto	l3609
  9829  0CD8                     l693:	
  9830  0CD8  1829               	btfsc	___ftpack@exp,0
  9831  0CD9  2CE0               	goto	l694
  9832  0CDA  30FF               	movlw	255
  9833  0CDB  05A6               	andwf	___ftpack@arg,f
  9834  0CDC  307F               	movlw	127
  9835  0CDD  05A7               	andwf	___ftpack@arg+1,f
  9836  0CDE  30FF               	movlw	255
  9837  0CDF  05A8               	andwf	___ftpack@arg+2,f
  9838  0CE0                     l694:	
  9839  0CE0  1003               	clrc
  9840  0CE1  0CA9               	rrf	___ftpack@exp,f
  9841  0CE2  0829               	movf	___ftpack@exp,w
  9842  0CE3  00FD               	movwf	125
  9843  0CE4  01FE               	clrf	126
  9844  0CE5  01FF               	clrf	127
  9845  0CE6  3010               	movlw	16
  9846  0CE7                     u3605:	
  9847  0CE7  35FD               	lslf	125,f
  9848  0CE8  0DFE               	rlf	126,f
  9849  0CE9  0DFF               	rlf	127,f
  9850  0CEA  0B89               	decfsz	9,f
  9851  0CEB  2CE7               	goto	u3605
  9852  0CEC  087D               	movf	125,w
  9853  0CED  04A6               	iorwf	___ftpack@arg,f
  9854  0CEE  087E               	movf	126,w
  9855  0CEF  04A7               	iorwf	___ftpack@arg+1,f
  9856  0CF0  087F               	movf	127,w
  9857  0CF1  04A8               	iorwf	___ftpack@arg+2,f
  9858  0CF2  082A               	movf	___ftpack@sign,w
  9859  0CF3  1903               	btfsc	3,2
  9860  0CF4  0008               	return
  9861  0CF5  17A8               	bsf	___ftpack@arg+2,7
  9862  0CF6  0008               	return
  9863  0CF7                     __end_of___ftpack:	
  9864                           
  9865                           	psect	text45
  9866  08FD                     __ptext45:	
  9867 ;; *************** function _EEPROMWrite *****************
  9868 ;; Defined at:
  9869 ;;		line 4 in file "eeprom.c"
  9870 ;; Parameters:    Size  Location     Type
  9871 ;;  address         2    0[COMMON] unsigned int 
  9872 ;;  data            1    2[COMMON] unsigned char 
  9873 ;; Auto vars:     Size  Location     Type
  9874 ;;  GIEBitValue     1    3[COMMON] unsigned char 
  9875 ;; Return value:  Size  Location     Type
  9876 ;;                  1    wreg      void 
  9877 ;; Registers used:
  9878 ;;		wreg, status,2, status,0
  9879 ;; Tracked objects:
  9880 ;;		On entry : 0/0
  9881 ;;		On exit  : 0/0
  9882 ;;		Unchanged: 0/0
  9883 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9884 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9885 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9886 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9887 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9888 ;;Total ram usage:        4 bytes
  9889 ;; Hardware stack levels used:    1
  9890 ;; Hardware stack levels required when called:    7
  9891 ;; This function calls:
  9892 ;;		Nothing
  9893 ;; This function is called by:
  9894 ;;		_loop
  9895 ;;		_main
  9896 ;; This function uses a non-reentrant model
  9897 ;;
  9898                           
  9899                           
  9900                           ;psect for function _EEPROMWrite
  9901  08FD                     _EEPROMWrite:	
  9902                           
  9903                           ;eeprom.c: 6: unsigned char GIEBitValue = INTCONbits.GIE;
  9904                           
  9905                           ;incstack = 0
  9906                           ; Regs used in _EEPROMWrite: [wreg+status,2+status,0]
  9907  08FD  3000               	movlw	0
  9908  08FE  1B8B               	btfsc	11,7	;volatile
  9909  08FF  3001               	movlw	1
  9910  0900  00F3               	movwf	EEPROMWrite@GIEBitValue
  9911                           
  9912                           ;eeprom.c: 8: NVMADRH = ((address >> 8) & 0xFF);
  9913  0901  0871               	movf	EEPROMWrite@address+1,w
  9914  0902  0031               	movlb	17	; select bank17
  9915  0903  0092               	movwf	18	;volatile
  9916                           
  9917                           ;eeprom.c: 9: NVMADRL = (address & 0xFF);
  9918  0904  0870               	movf	EEPROMWrite@address,w
  9919  0905  0091               	movwf	17	;volatile
  9920                           
  9921                           ;eeprom.c: 10: NVMDATL = data;
  9922  0906  0872               	movf	EEPROMWrite@data,w
  9923  0907  0093               	movwf	19	;volatile
  9924                           
  9925                           ;eeprom.c: 11: NVMCON1bits.NVMREGS = 1;
  9926  0908  1715               	bsf	21,6	;volsfr
  9927                           
  9928                           ;eeprom.c: 12: NVMCON1bits.WREN = 1;
  9929  0909  1515               	bsf	21,2	;volsfr
  9930                           
  9931                           ;eeprom.c: 13: INTCONbits.GIE = 0;
  9932  090A  138B               	bcf	11,7	;volatile
  9933                           
  9934                           ;eeprom.c: 14: NVMCON2 = 0x55;
  9935  090B  3055               	movlw	85
  9936  090C  0096               	movwf	22	;volsfr
  9937                           
  9938                           ;eeprom.c: 15: NVMCON2 = 0xAA;
  9939  090D  30AA               	movlw	170
  9940  090E  0096               	movwf	22	;volsfr
  9941                           
  9942                           ;eeprom.c: 16: NVMCON1bits.WR = 1;
  9943  090F  1495               	bsf	21,1	;volsfr
  9944                           
  9945                           ;eeprom.c: 18: while (NVMCON1bits.WR){
  9946  0910  2912               	goto	l341
  9947  0911                     l342:	
  9948                           
  9949                           ;eeprom.c: 19: __nop();
  9950  0911  0000               	nop
  9951  0912                     l341:	
  9952  0912  0031               	movlb	17	; select bank17
  9953  0913  1895               	btfsc	21,1	;volsfr
  9954  0914  2911               	goto	l342
  9955                           
  9956                           ;eeprom.c: 20: };eeprom.c: 22: NVMCON1bits.WREN = 0;
  9957  0915  1115               	bcf	21,2	;volsfr
  9958                           
  9959                           ;eeprom.c: 23: INTCONbits.GIE = GIEBitValue;
  9960  0916  0C73               	rrf	EEPROMWrite@GIEBitValue,w
  9961  0917  1C03               	skipc
  9962  0918  138B               	bcf	11,7	;volatile
  9963  0919  1803               	skipnc
  9964  091A  178B               	bsf	11,7	;volatile
  9965  091B  0008               	return
  9966  091C                     __end_of_EEPROMWrite:	
  9967                           
  9968                           	psect	text46
  9969  08DE                     __ptext46:	
  9970 ;; *************** function _EEPROMRead *****************
  9971 ;; Defined at:
  9972 ;;		line 26 in file "eeprom.c"
  9973 ;; Parameters:    Size  Location     Type
  9974 ;;  address         2    0[COMMON] unsigned int 
  9975 ;; Auto vars:     Size  Location     Type
  9976 ;;		None
  9977 ;; Return value:  Size  Location     Type
  9978 ;;                  1    wreg      unsigned char 
  9979 ;; Registers used:
  9980 ;;		wreg, status,2
  9981 ;; Tracked objects:
  9982 ;;		On entry : 0/0
  9983 ;;		On exit  : 0/0
  9984 ;;		Unchanged: 0/0
  9985 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9986 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9987 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9988 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9989 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9990 ;;Total ram usage:        2 bytes
  9991 ;; Hardware stack levels used:    1
  9992 ;; Hardware stack levels required when called:    7
  9993 ;; This function calls:
  9994 ;;		Nothing
  9995 ;; This function is called by:
  9996 ;;		_main
  9997 ;; This function uses a non-reentrant model
  9998 ;;
  9999                           
 10000                           
 10001                           ;psect for function _EEPROMRead
 10002  08DE                     _EEPROMRead:	
 10003                           
 10004                           ;eeprom.c: 27: NVMADRH = ((address >> 8) & 0xFF);
 10005                           
 10006                           ;incstack = 0
 10007                           ; Regs used in _EEPROMRead: [wreg+status,2]
 10008  08DE  0871               	movf	EEPROMRead@address+1,w
 10009  08DF  0031               	movlb	17	; select bank17
 10010  08E0  0092               	movwf	18	;volatile
 10011                           
 10012                           ;eeprom.c: 28: NVMADRL = (address & 0xFF);
 10013  08E1  0870               	movf	EEPROMRead@address,w
 10014  08E2  0091               	movwf	17	;volatile
 10015                           
 10016                           ;eeprom.c: 29: NVMCON1bits.NVMREGS = 1;
 10017  08E3  1715               	bsf	21,6	;volsfr
 10018                           
 10019                           ;eeprom.c: 30: NVMCON1bits.RD = 1;
 10020  08E4  1415               	bsf	21,0	;volsfr
 10021                           
 10022                           ;eeprom.c: 31: __nop();
 10023  08E5  0000               	nop
 10024                           
 10025                           ;eeprom.c: 32: __nop();
 10026  08E6  0000               	nop
 10027                           
 10028                           ;eeprom.c: 33: __nop();__nop();
 10029  08E7  0000               	nop
 10030  08E8  0000               	nop
 10031                           
 10032                           ;eeprom.c: 34: __nop();__nop();
 10033  08E9  0000               	nop
 10034  08EA  0000               	nop
 10035                           
 10036                           ;eeprom.c: 35: __nop();__nop();
 10037  08EB  0000               	nop
 10038  08EC  0000               	nop
 10039                           
 10040                           ;eeprom.c: 36: __nop();__nop();
 10041  08ED  0000               	nop
 10042  08EE  0000               	nop
 10043                           
 10044                           ;eeprom.c: 37: __nop();__nop();
 10045  08EF  0000               	nop
 10046  08F0  0000               	nop
 10047                           
 10048                           ;eeprom.c: 38: __nop();__nop();
 10049  08F1  0000               	nop
 10050  08F2  0000               	nop
 10051                           
 10052                           ;eeprom.c: 39: __nop();__nop();
 10053  08F3  0000               	nop
 10054  08F4  0000               	nop
 10055                           
 10056                           ;eeprom.c: 40: __nop();__nop();
 10057  08F5  0000               	nop
 10058  08F6  0000               	nop
 10059                           
 10060                           ;eeprom.c: 41: __nop();__nop();
 10061  08F7  0000               	nop
 10062  08F8  0000               	nop
 10063                           
 10064                           ;eeprom.c: 42: __nop();
 10065  08F9  0000               	nop
 10066                           
 10067                           ;eeprom.c: 44: return (NVMDATL);
 10068  08FA  0031               	movlb	17	; select bank17
 10069  08FB  0813               	movf	19,w	;volatile
 10070  08FC  0008               	return
 10071  08FD                     __end_of_EEPROMRead:	
 10072                           
 10073                           	psect	intentry
 10074  0004                     __pintentry:	
 10075 ;; *************** function _ISR *****************
 10076 ;; Defined at:
 10077 ;;		line 11 in file "main.c"
 10078 ;; Parameters:    Size  Location     Type
 10079 ;;		None
 10080 ;; Auto vars:     Size  Location     Type
 10081 ;;		None
 10082 ;; Return value:  Size  Location     Type
 10083 ;;                  1    wreg      void 
 10084 ;; Registers used:
 10085 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, btemp+0, btemp+1, btemp+8, btemp+9, btemp+11, pclath, cstack
 10086 ;; Tracked objects:
 10087 ;;		On entry : 0/0
 10088 ;;		On exit  : 0/0
 10089 ;;		Unchanged: 0/0
 10090 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10091 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10092 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10093 ;;      Temps:          0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10094 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10095 ;;Total ram usage:        6 bytes
 10096 ;; Hardware stack levels used:    1
 10097 ;; Hardware stack levels required when called:    6
 10098 ;; This function calls:
 10099 ;;		_nrf24l01ISR
 10100 ;;		_resetWDT
 10101 ;; This function is called by:
 10102 ;;		Interrupt level 1
 10103 ;; This function uses a non-reentrant model
 10104 ;;
 10105                           
 10106  0004                     _ISR:	
 10107                           
 10108                           ;incstack = 0
 10109                           ; Regs used in _ISR: [wreg-fsr0h+fsr1l+fsr1h+status,2-btemp+1+btemp+8+btemp+9+btemp+11+p
      +                          clath+cstack]
 10110  0004  3180               	pagesel	$
 10111  0005  0874               	movf	116,w
 10112  0006  0020               	movlb	0	; select bank0
 10113  0007  00A0               	movwf	??_ISR
 10114  0008  0875               	movf	117,w
 10115  0009  00A1               	movwf	??_ISR+1
 10116  000A  087C               	movf	124,w
 10117  000B  00A2               	movwf	??_ISR+2
 10118  000C  087D               	movf	125,w
 10119  000D  00A3               	movwf	??_ISR+3
 10120  000E  087F               	movf	127,w
 10121  000F  00A4               	movwf	??_ISR+4
 10122  0010  30B1               	movlw	low ___int_sp
 10123  0011  0086               	movwf	6
 10124  0012  3022               	movlw	high ___int_sp
 10125  0013  0087               	movwf	7
 10126  0014  0875               	movf	117,w
 10127  0015  00A5               	movwf	??_ISR+5
 10128                           
 10129                           ;main.c: 13: resetWDT();
 10130  0016  3197  27AC  3180   	fcall	_resetWDT
 10131                           
 10132                           ;main.c: 15: if (PIR0bits.INTF){
 10133  0019  0020               	movlb	0	; select bank0
 10134  001A  1C10               	btfss	16,0	;volatile
 10135  001B  2820               	goto	i1l163
 10136                           
 10137                           ;main.c: 16: nrf24l01ISR();
 10138  001C  318B  232F         	fcall	_nrf24l01ISR
 10139                           
 10140                           ;main.c: 17: PIR0bits.INTF = 0;
 10141  001E  0020               	movlb	0	; select bank0
 10142  001F  1010               	bcf	16,0	;volatile
 10143  0020                     i1l163:	
 10144  0020  0825               	movf	??_ISR+5,w
 10145  0021  00FF               	movwf	127
 10146  0022  0824               	movf	??_ISR+4,w
 10147  0023  00FD               	movwf	125
 10148  0024  0823               	movf	??_ISR+3,w
 10149  0025  00FC               	movwf	124
 10150  0026  0822               	movf	??_ISR+2,w
 10151  0027  00F5               	movwf	117
 10152  0028  0821               	movf	??_ISR+1,w
 10153  0029  00F4               	movwf	116
 10154  002A  0009               	retfie
 10155  002B                     __end_of_ISR:	
 10156                           
 10157                           	psect	text48
 10158  0B2F                     __ptext48:	
 10159 ;; *************** function _nrf24l01ISR *****************
 10160 ;; Defined at:
 10161 ;;		line 191 in file "nrf24l01.c"
 10162 ;; Parameters:    Size  Location     Type
 10163 ;;		None
 10164 ;; Auto vars:     Size  Location     Type
 10165 ;;		None
 10166 ;; Return value:  Size  Location     Type
 10167 ;;                  1    wreg      void 
 10168 ;; Registers used:
 10169 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, btemp+0, btemp+1, btemp+8, btemp+9, btemp+11, pclath
 10170 ;; Tracked objects:
 10171 ;;		On entry : 0/0
 10172 ;;		On exit  : 0/0
 10173 ;;		Unchanged: 0/0
 10174 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10175 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10176 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10177 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10178 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10179 ;;Total ram usage:        0 bytes
 10180 ;; Hardware stack levels used:    1
 10181 ;; Hardware stack levels required when called:    5
 10182 ;; This function calls:
 10183 ;;		_nrf24l01Send
 10184 ;;		_nrf24l01Service
 10185 ;;		_nrf24l01SetRXMode
 10186 ;; This function is called by:
 10187 ;;		_ISR
 10188 ;; This function uses a non-reentrant model
 10189 ;;
 10190                           
 10191                           
 10192                           ;psect for function _nrf24l01ISR
 10193  0B2F                     _nrf24l01ISR:	
 10194                           
 10195                           ;nrf24l01.c: 193: status.statusRegister.byte = nrf24l01Send((unsigned) 0b00000000 | (uns
      +                          igned) 0x07, 0);
 10196                           
 10197                           ;incstack = 0
 10198                           ; Regs used in _nrf24l01ISR: [wreg-fsr0h+fsr1l+fsr1h+status,2-btemp+1+btemp+8+btemp+9+bt
      +                          emp+11+pclath]
 10199  0B2F  3000               	movlw	0
 10200  0B30  001E               	movwi fsr1++
 10201  0B31  3007               	movlw	7
 10202  0B32  3197  27ED  318B   	fcall	_nrf24l01Send
 10203  0B35  00FF               	movwf	127
 10204  0B36  087F               	movf	127,w
 10205  0B37  0020               	movlb	0	; select bank0
 10206  0B38  00E6               	movwf	_status+2	;volatile
 10207                           
 10208                           ;nrf24l01.c: 196: if (status.statusRegister.RX_DR){
 10209  0B39  1F66               	btfss	_status+2,6	;volatile
 10210  0B3A  2B47               	goto	i1l4619
 10211                           
 10212                           ;nrf24l01.c: 198: if (status.RX == 0){
 10213  0B3B  0865               	movf	_status+1,w	;volatile
 10214  0B3C  1D03               	btfss	3,2
 10215  0B3D  2B43               	goto	i1l286
 10216                           
 10217                           ;nrf24l01.c: 199: status.RX = 1;
 10218  0B3E  3001               	movlw	1
 10219  0B3F  00FF               	movwf	127
 10220  0B40  087F               	movf	127,w
 10221  0B41  00E5               	movwf	_status+1	;volatile
 10222                           
 10223                           ;nrf24l01.c: 200: }
 10224  0B42  2B44               	goto	i1l4617
 10225  0B43                     i1l286:	
 10226                           
 10227                           ;nrf24l01.c: 202: else{;nrf24l01.c: 203: status.statusRegister.RX_DR = 0;
 10228  0B43  1366               	bcf	_status+2,6	;volatile
 10229  0B44                     i1l4617:	
 10230                           
 10231                           ;nrf24l01.c: 204: };nrf24l01.c: 206: nrf24l01Service();
 10232  0B44  318F  2756  318B   	fcall	_nrf24l01Service
 10233  0B47                     i1l4619:	
 10234                           
 10235                           ;nrf24l01.c: 207: };nrf24l01.c: 209: if (status.statusRegister.TX_DS){
 10236  0B47  1EE6               	btfss	_status+2,5	;volatile
 10237  0B48  2B6C               	goto	i1l4635
 10238                           
 10239                           ;nrf24l01.c: 211: if (lastTXPacket->packetData.ACKRequest){
 10240  0B49  0869               	movf	_lastTXPacket,w
 10241  0B4A  0084               	movwf	4
 10242  0B4B  3001               	movlw	1	; select bank2/3
 10243  0B4C  0085               	movwf	5
 10244  0B4D  1D00               	btfss	0,2
 10245  0B4E  2B5C               	goto	i1l4627
 10246                           
 10247                           ;nrf24l01.c: 212: status.TX = 3;
 10248  0B4F  3003               	movlw	3
 10249  0B50  00FF               	movwf	127
 10250  0B51  087F               	movf	127,w
 10251  0B52  00E4               	movwf	_status	;volatile
 10252                           
 10253                           ;nrf24l01.c: 213: status.retryCount = 0xFF;
 10254  0B53  30FF               	movlw	255
 10255  0B54  00FF               	movwf	127
 10256  0B55  087F               	movf	127,w
 10257  0B56  00E8               	movwf	_status+4	;volatile
 10258                           
 10259                           ;nrf24l01.c: 214: nrf24l01SetRXMode(1);
 10260  0B57  3001               	movlw	1
 10261  0B58  318A  22F4  318B   	fcall	_nrf24l01SetRXMode
 10262                           
 10263                           ;nrf24l01.c: 215: }else{
 10264  0B5B  2B5E               	goto	i1l4629
 10265  0B5C                     i1l4627:	
 10266                           
 10267                           ;nrf24l01.c: 216: status.TX = 0;
 10268  0B5C  0020               	movlb	0	; select bank0
 10269  0B5D  01E4               	clrf	_status	;volatile
 10270  0B5E                     i1l4629:	
 10271                           
 10272                           ;nrf24l01.c: 217: };nrf24l01.c: 219: if (lastTXPacket->packetData.IsACK){
 10273  0B5E  0020               	movlb	0	; select bank0
 10274  0B5F  0869               	movf	_lastTXPacket,w
 10275  0B60  0084               	movwf	4
 10276  0B61  3001               	movlw	1	; select bank2/3
 10277  0B62  0085               	movwf	5
 10278  0B63  1D80               	btfss	0,3
 10279  0B64  2B69               	goto	i1l4633
 10280                           
 10281                           ;nrf24l01.c: 220: nrf24l01SetRXMode(1);
 10282  0B65  3001               	movlw	1
 10283  0B66  318A  22F4  318B   	fcall	_nrf24l01SetRXMode
 10284  0B69                     i1l4633:	
 10285                           
 10286                           ;nrf24l01.c: 221: };nrf24l01.c: 223: nrf24l01Service();
 10287  0B69  318F  2756  318B   	fcall	_nrf24l01Service
 10288  0B6C                     i1l4635:	
 10289                           
 10290                           ;nrf24l01.c: 224: };nrf24l01.c: 229: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x0
      +                          7, status.statusRegister.byte);
 10291  0B6C  0866               	movf	_status+2,w	;volatile
 10292  0B6D  001E               	movwi fsr1++
 10293  0B6E  3027               	movlw	39
 10294  0B6F  3197  27ED         	fcall	_nrf24l01Send
 10295  0B71  0008               	return
 10296  0B72                     __end_of_nrf24l01ISR:	
 10297  0074                     btemp	set	116	;btemp
 10298  0074                     wtemp0	set	116
 10299  0076                     wtemp1	set	118
 10300  0078                     wtemp2	set	120
 10301  007A                     wtemp3	set	122
 10302  007C                     wtemp4	set	124
 10303  007E                     wtemp5	set	126
 10304  0074                     ttemp0	set	116
 10305  0077                     ttemp1	set	119
 10306  007A                     ttemp2	set	122
 10307  007D                     ttemp3	set	125
 10308  0074                     ltemp0	set	116
 10309  0078                     ltemp1	set	120
 10310  007C                     ltemp2	set	124
 10311  0076                     ltemp3	set	118


Data Sizes:
    Strings     58
    Constant    46
    Data        1
    BSS         123
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON            4      4       4
    BANK0            80     68      74
    BANK1            80     61      68
    BANK2            80      0      45
    BANK3            80      0      66
    BANK4            80     49      49
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    ftoa@status	PTR int  size(1) Largest target is 2
		 -> sendMessage@ftoaStatus(BANK1[2]), 

    strlen@s	PTR const unsigned char  size(1) Largest target is 33
		 -> NULL(NULL[0]), RXPacket.Message(BANK3[32]), TXPacket.Message(BANK3[32]), TXPacket(BANK3[33]), 
		 -> RXPacket(BANK3[33]), romDataMap(BANK2[28]), 

    strlen@cp	PTR const unsigned char  size(1) Largest target is 33
		 -> NULL(NULL[0]), RXPacket.Message(BANK3[32]), TXPacket.Message(BANK3[32]), TXPacket(BANK3[33]), 
		 -> RXPacket(BANK3[33]), romDataMap(BANK2[28]), 

    strcpy@from	PTR const unsigned char  size(2) Largest target is 33
		 -> romDataMap.name(BANK2[16]), packet.Message(BANK0[32]), packet.Message(BANK0[32]), main@packet(BANK1[33]), 
		 -> STR_8(CODE[4]), loop@packet(BANK4[33]), romDataMap(BANK2[28]), 

    strcpy@to	PTR unsigned char  size(2) Largest target is 33
		 -> TXPacket(BANK3[33]), main@packet(BANK1[33]), loop@packet(BANK4[33]), romDataMap(BANK2[28]), 

    strcpy@cp	PTR unsigned char  size(2) Largest target is 33
		 -> TXPacket(BANK3[33]), main@packet(BANK1[33]), loop@packet(BANK4[33]), romDataMap(BANK2[28]), 

    strcmp@s2	PTR const unsigned char  size(1) Largest target is 33
		 -> TXPacket.Message(BANK3[32]), TXPacket(BANK3[33]), 

    strcmp@s1	PTR const unsigned char  size(1) Largest target is 33
		 -> RXPacket.Message(BANK3[32]), RXPacket(BANK3[33]), 

    strcat@from	PTR const unsigned char  size(2) Largest target is 17
		 -> ftoa@buf(BANK2[17]), STR_10(CODE[6]), STR_9(CODE[6]), STR_7(CODE[6]), 
		 -> STR_6(CODE[5]), STR_5(CODE[7]), STR_4(CODE[5]), STR_3(CODE[6]), 
		 -> STR_2(CODE[2]), STR_1(CODE[2]), 

    strcat@to	PTR unsigned char  size(2) Largest target is 33
		 -> main@packet(BANK1[33]), loop@packet(BANK4[33]), 

    strcat@cp	PTR unsigned char  size(2) Largest target is 33
		 -> main@packet(BANK1[33]), loop@packet(BANK4[33]), 

    memset@p1	PTR void  size(2) Largest target is 33
		 -> RXPacket(BANK3[33]), main@packet(BANK1[33]), loop@packet(BANK4[33]), 

    memset@p	PTR unsigned char  size(2) Largest target is 33
		 -> RXPacket(BANK3[33]), main@packet(BANK1[33]), loop@packet(BANK4[33]), 

    ftoa@cp	PTR unsigned char  size(1) Largest target is 17
		 -> ftoa@buf(BANK2[17]), 

    sprintf@f	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_11(CODE[11]), 

    sprintf@sp	PTR unsigned char  size(1) Largest target is 17
		 -> ftoa@buf(BANK2[17]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    nrf24l01SendTXBuffer@packet	PTR struct . size(1) Largest target is 33
		 -> TXPacket(BANK3[33]), RXPacket(BANK3[33]), 

    lastTXPacket	PTR struct . size(1) Largest target is 33
		 -> NULL(NULL[0]), TXPacket(BANK3[33]), RXPacket(BANK3[33]), 

    nrf24l01SendPacket@txPacket	PTR struct . size(2) Largest target is 33
		 -> main@packet(BANK1[33]), loop@packet(BANK4[33]), 

    sp__nrf24l01GetRXPacket	PTR struct . size(1) Largest target is 33
		 -> RXPacket(BANK3[33]), 

    nrf24l01GetPipe@name	PTR unsigned char  size(1) Largest target is 28
		 -> romDataMap(BANK2[28]), 

    sp__ftoa	PTR unsigned char  size(1) Largest target is 17
		 -> ftoa@buf(BANK2[17]), 

    sendMessage@topic	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_10(CODE[6]), STR_9(CODE[6]), STR_7(CODE[6]), STR_6(CODE[5]), 
		 -> STR_5(CODE[7]), STR_4(CODE[5]), STR_3(CODE[6]), 

    sp__strcat	PTR unsigned char  size(2) Largest target is 33
		 -> main@packet(BANK1[33]), loop@packet(BANK4[33]), 

    sp__strcpy	PTR unsigned char  size(2) Largest target is 33
		 -> TXPacket(BANK3[33]), main@packet(BANK1[33]), loop@packet(BANK4[33]), romDataMap(BANK2[28]), 

    sp__memset	PTR void  size(2) Largest target is 33
		 -> RXPacket(BANK3[33]), main@packet(BANK1[33]), loop@packet(BANK4[33]), 

    sendMessage@packet	PTR struct . size(2) Largest target is 33
		 -> main@packet(BANK1[33]), loop@packet(BANK4[33]), 

    romData	PTR struct . size(1) Largest target is 28
		 -> romDataMap(BANK2[28]), 


Critical Paths under _main in COMMON

    _main->_EEPROMWrite
    _main->___lbtoft
    _main->_nrf24l01SetTXPipe
    _main->_strcpy
    _nrf24l01InitRegisters->_nrf24l01SetTXPipe
    _nrf24l01SetTXPipe->___bmul
    _nrf24l01GetPipe->___lwmod
    _loop->_EEPROMWrite
    _loop->___lbtoft
    _loop->___lltoft
    _sendMessage->___lbtoft
    _sendMessage->_strcpy
    _sleepListren->_sleepMs
    _nrf24l01SendPacket->_sleepMs
    _nrf24l01SendPacket->_strcpy
    _ftoa->___lltoft
    _sprintf->___wmul
    ___ftsub->___lltoft
    _getADCValue->___awtoft
    _getADCValue->_sleepMs
    ___ftadd->___awtoft

Critical Paths under _ISR in COMMON

    None.

Critical Paths under _main in BANK0

    _nrf24l01Init->_nrf24l01InitRegisters
    _nrf24l01InitRegisters->_nrf24l01SetTXPipe
    _nrf24l01GetPipe->___lwmod
    _sendMessage->_strcat
    _nrf24l01SendPacket->_strcpy
    _ftoa->___fttol
    _sprintf->___llmod
    ___llmod->___lldiv
    ___lltoft->___ftpack
    ___fttol->___ftmul
    ___ftsub->___ftadd
    ___ftneg->_getADCValue
    ___ftmul->_getADCValue
    _getADCValue->___ftdiv
    ___ftdiv->___ftadd
    ___ftadd->___ftpack
    ___ftadd->___ftpack
    ___awtoft->___ftpack
    ___lbtoft->___ftpack

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_sendMessage
    _loop->_sendMessage
    _sendMessage->_strcat
    _strcat->_ftoa

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    _main->_loop

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                35    35      0  103921
                                             26 BANK1     35    35      0
                         _EEPROMRead
                        _EEPROMWrite
                           ___lbtoft
                               _loop
                    _nrf24l01GetPipe
                       _nrf24l01Init
                  _nrf24l01SetRXPipe
                  _nrf24l01SetTXPipe
                        _sendMessage
                             _strcpy
 ---------------------------------------------------------------------------------
 (1) _nrf24l01Init                                         2     2      0    2302
                                             16 BANK0      2     2      0
              _nrf24l01InitRegisters
              _nrf24l01InterfaceInit
 ---------------------------------------------------------------------------------
 (2) _nrf24l01InterfaceInit                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _nrf24l01InitRegisters                                9     9      0    2302
                                              7 BANK0      9     9      0
                             ___bmul
                     _nrf24l01SPIEnd
                    _nrf24l01SPISend
                   _nrf24l01SPIStart
                       _nrf24l01Send
                  _nrf24l01SetRXPipe
                  _nrf24l01SetTXPipe
 ---------------------------------------------------------------------------------
 (1) _nrf24l01SetTXPipe                                    2     2      0     406
                                              3 COMMON     1     1      0
                                              6 BANK0      1     1      0
                             ___bmul
                     _nrf24l01SPIEnd
                    _nrf24l01SPISend
                   _nrf24l01SPIStart
 ---------------------------------------------------------------------------------
 (2) ___bmul                                               3     2      1     344
                                              0 COMMON     3     2      1
 ---------------------------------------------------------------------------------
 (1) _nrf24l01SetRXPipe                                    3     3      0     625
                                              0 COMMON     3     3      0
                       _nrf24l01Send
 ---------------------------------------------------------------------------------
 (1) _nrf24l01GetPipe                                      4     4      0     807
                                              7 BANK0      4     4      0
                            ___lwmod
                             _strlen
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4     440
                                              0 COMMON     4     0      4
                                              6 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _loop                                                49    49      0   66602
                                              0 BANK4     49    49      0
                        _EEPROMWrite
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___ftneg
                           ___lbtoft
                           ___lltoft
                        _getADCValue
                       _nrf24l01Send
                        _sendMessage
 ---------------------------------------------------------------------------------
 (1) _sendMessage                                          9     2      7   27924
                                             17 BANK1      9     2      7
                         _EEPROMRead (ARG)
                           ___lbtoft (ARG)
                               _ftoa
                        _getADCValue (ARG)
                             _memset
                 _nrf24l01SendPacket
                       _sleepListren
                             _strcat
                             _strcpy
 ---------------------------------------------------------------------------------
 (2) _strcat                                               6     2      4     751
                                             66 BANK0      2     2      0
                                             13 BANK1      4     0      4
                               _ftoa (ARG)
 ---------------------------------------------------------------------------------
 (2) _sleepListren                                         2     0      2    1448
                                              6 BANK0      2     0      2
                  _nrf24l01SetRXMode
                            _sleepMs
 ---------------------------------------------------------------------------------
 (2) _nrf24l01SendPacket                                   2     0      2    3965
                                              8 BANK0      2     0      2
                    _nrf24l01Service
                            _sleepMs
                             _strcpy
 ---------------------------------------------------------------------------------
 (1) _strcpy                                               6     2      4     565
                                              0 COMMON     4     0      4
                                              6 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (11) _nrf24l01Service                                     2     2      0    2609
                             _memset
                     _nrf24l01SPIEnd
                    _nrf24l01SPISend
                   _nrf24l01SPIStart
                       _nrf24l01Send
               _nrf24l01SendTXBuffer
                  _nrf24l01SetRXMode
                             _strcmp
 ---------------------------------------------------------------------------------
 (12) _strcmp                                              3     2      1     161
 ---------------------------------------------------------------------------------
 (12) _nrf24l01SendTXBuffer                                3     3      0     982
                     _nrf24l01SPIEnd
                    _nrf24l01SPISend
                   _nrf24l01SPIStart
                  _nrf24l01SetRXMode
                             _strlen
 ---------------------------------------------------------------------------------
 (13) _strlen                                              2     2      0     158
 ---------------------------------------------------------------------------------
 (11) _nrf24l01SetRXMode                                   1     1      0     632
                       _nrf24l01Send
 ---------------------------------------------------------------------------------
 (12) _nrf24l01Send                                        2     1      1     477
                     _nrf24l01SPIEnd
                    _nrf24l01SPISend
                   _nrf24l01SPIStart
 ---------------------------------------------------------------------------------
 (13) _nrf24l01SPIStart                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (13) _nrf24l01SPISend                                     1     1      0      31
 ---------------------------------------------------------------------------------
 (13) _nrf24l01SPIEnd                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (12) _memset                                              8     2      6     221
 ---------------------------------------------------------------------------------
 (2) _ftoa                                                13     9      4   18810
                                              0 BANK1     13     9      4
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                           ___lltoft
                            _sprintf
 ---------------------------------------------------------------------------------
 (3) _sprintf                                             34    24     10    3016
                                             27 BANK0     26    16     10
                            ___lldiv
                            ___llmod
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (4) _isdigit                                              2     2      0      99
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4     552
                                              0 COMMON     4     0      4
                                              6 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) ___llmod                                              9     1      8     440
                                              0 COMMON     1     1      0
                                             19 BANK0      8     0      8
                            ___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (4) ___lldiv                                             13     5      8     449
                                              6 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 (3) ___lltoft                                             5     1      4    3785
                                              0 COMMON     4     0      4
                                             11 BANK0      1     1      0
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) ___fttol                                             10     6      4     579
                                             56 BANK0     10     6      4
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftsub                                              6     0      6    5836
                                             21 BANK0      6     0      6
                            ___ftadd
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftneg                                              3     0      3     273
                                             44 BANK0      3     0      3
                            ___ftadd (ARG)
                            ___ftdiv (ARG)
                        _getADCValue (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftmul                                             12     6      6    4379
                                             44 BANK0     12     6      6
                           ___ftpack
                        _getADCValue (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftge                                               6     0      6     406
                                              6 BANK0      6     0      6
 ---------------------------------------------------------------------------------
 (2) _getADCValue                                         10     7      3   14853
                                             34 BANK0     10     7      3
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            _sleepMs
 ---------------------------------------------------------------------------------
 (3) _sleepMs                                              4     2      2     681
                                              0 COMMON     4     2      2
                           _resetWDT
 ---------------------------------------------------------------------------------
 (10) _resetWDT                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (3) ___ftdiv                                             13     7      6    4727
                                             21 BANK0     13     7      6
                            ___ftadd (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) ___ftadd                                             10     4      6    5532
                                             11 BANK0     10     4      6
                           ___awtoft (ARG)
                           ___ftpack
                           ___ftpack (ARG)
 ---------------------------------------------------------------------------------
 (3) ___awtoft                                             4     1      3    3712
                                              0 COMMON     4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___lbtoft                                             5     1      4    3506
                                              0 COMMON     4     0      4
                                             11 BANK0      1     1      0
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) ___ftpack                                             5     0      5    3475
                                              6 BANK0      5     0      5
 ---------------------------------------------------------------------------------
 (2) _EEPROMWrite                                          4     1      3     751
                                              0 COMMON     4     1      3
 ---------------------------------------------------------------------------------
 (1) _EEPROMRead                                           2     0      2     270
                                              0 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (9) _ISR                                                  6     6      0    3718
                                              0 BANK0      6     6      0
                        _nrf24l01ISR
                           _resetWDT
 ---------------------------------------------------------------------------------
 (10) _resetWDT                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _nrf24l01ISR                                         0     0      0    3718
                       _nrf24l01Send
                    _nrf24l01Service
                  _nrf24l01SetRXMode
 ---------------------------------------------------------------------------------
 (11) _nrf24l01Service                                     2     2      0    2609
                             _memset
                     _nrf24l01SPIEnd
                    _nrf24l01SPISend
                   _nrf24l01SPIStart
                       _nrf24l01Send
               _nrf24l01SendTXBuffer
                  _nrf24l01SetRXMode
                             _strcmp
 ---------------------------------------------------------------------------------
 (12) _strcmp                                              3     2      1     161
 ---------------------------------------------------------------------------------
 (12) _nrf24l01SendTXBuffer                                3     3      0     982
                     _nrf24l01SPIEnd
                    _nrf24l01SPISend
                   _nrf24l01SPIStart
                  _nrf24l01SetRXMode
                             _strlen
 ---------------------------------------------------------------------------------
 (13) _strlen                                              2     2      0     158
 ---------------------------------------------------------------------------------
 (11) _nrf24l01SetRXMode                                   1     1      0     632
                       _nrf24l01Send
 ---------------------------------------------------------------------------------
 (12) _nrf24l01Send                                        2     1      1     477
                     _nrf24l01SPIEnd
                    _nrf24l01SPISend
                   _nrf24l01SPIStart
 ---------------------------------------------------------------------------------
 (13) _nrf24l01SPIStart                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (13) _nrf24l01SPISend                                     1     1      0      31
 ---------------------------------------------------------------------------------
 (13) _nrf24l01SPIEnd                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (12) _memset                                              8     2      6     221
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 13
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _EEPROMRead
   _EEPROMWrite
   ___lbtoft
     ___ftpack
   _loop
     _EEPROMWrite
     ___ftadd
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___ftpack (ARG)
     ___ftdiv
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
     ___ftmul
       ___ftpack
       _getADCValue (ARG)
         ___awtoft
           ___ftpack
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftdiv
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
         _sleepMs
           _resetWDT
     ___ftneg
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftdiv (ARG)
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
       _getADCValue (ARG)
         ___awtoft
           ___ftpack
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftdiv
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
         _sleepMs
           _resetWDT
     ___lbtoft
       ___ftpack
     ___lltoft
       ___ftpack
     _getADCValue
       ___awtoft
         ___ftpack
       ___ftadd
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftdiv
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
       _sleepMs
         _resetWDT
     _nrf24l01Send
       _nrf24l01SPIEnd
       _nrf24l01SPISend
       _nrf24l01SPIStart
     _sendMessage
       _EEPROMRead (ARG)
       ___lbtoft (ARG)
         ___ftpack
       _ftoa (ARG)
         ___ftge
         ___ftmul
           ___ftpack
           _getADCValue (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
             _sleepMs
               _resetWDT
         ___ftneg
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv (ARG)
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
           _getADCValue (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
             _sleepMs
               _resetWDT
         ___ftsub
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___fttol
           ___ftmul (ARG)
             ___ftpack
             _getADCValue (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               _sleepMs
                 _resetWDT
         ___lltoft
           ___ftpack
         _sprintf
           ___lldiv
           ___llmod
             ___lldiv (ARG)
           ___wmul
           _isdigit
       _getADCValue (ARG)
         ___awtoft
           ___ftpack
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftdiv
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
         _sleepMs
           _resetWDT
       _memset (ARG)
       _nrf24l01SendPacket (ARG)
         _nrf24l01Service
           _memset
           _nrf24l01SPIEnd
           _nrf24l01SPISend
           _nrf24l01SPIStart
           _nrf24l01Send
             _nrf24l01SPIEnd
             _nrf24l01SPISend
             _nrf24l01SPIStart
           _nrf24l01SendTXBuffer
             _nrf24l01SPIEnd
             _nrf24l01SPISend
             _nrf24l01SPIStart
             _nrf24l01SetRXMode
               _nrf24l01Send
                 _nrf24l01SPIEnd
                 _nrf24l01SPISend
                 _nrf24l01SPIStart
             _strlen
           _nrf24l01SetRXMode
             _nrf24l01Send
               _nrf24l01SPIEnd
               _nrf24l01SPISend
               _nrf24l01SPIStart
           _strcmp
         _sleepMs
           _resetWDT
         _strcpy
       _sleepListren (ARG)
         _nrf24l01SetRXMode
           _nrf24l01Send
             _nrf24l01SPIEnd
             _nrf24l01SPISend
             _nrf24l01SPIStart
         _sleepMs
           _resetWDT
       _strcat (ARG)
         _ftoa (ARG)
           ___ftge
           ___ftmul
             ___ftpack
             _getADCValue (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               _sleepMs
                 _resetWDT
           ___ftneg
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
             _getADCValue (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               _sleepMs
                 _resetWDT
           ___ftsub
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
           ___fttol
             ___ftmul (ARG)
               ___ftpack
               _getADCValue (ARG)
                 ___awtoft
                   ___ftpack
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                 _sleepMs
                   _resetWDT
           ___lltoft
             ___ftpack
           _sprintf
             ___lldiv
             ___llmod
               ___lldiv (ARG)
             ___wmul
             _isdigit
       _strcpy (ARG)
   _nrf24l01GetPipe
     ___lwmod
     _strlen
   _nrf24l01Init
     _nrf24l01InitRegisters
       ___bmul
       _nrf24l01SPIEnd
       _nrf24l01SPISend
       _nrf24l01SPIStart
       _nrf24l01Send
         _nrf24l01SPIEnd
         _nrf24l01SPISend
         _nrf24l01SPIStart
       _nrf24l01SetRXPipe
         _nrf24l01Send
           _nrf24l01SPIEnd
           _nrf24l01SPISend
           _nrf24l01SPIStart
       _nrf24l01SetTXPipe
         ___bmul
         _nrf24l01SPIEnd
         _nrf24l01SPISend
         _nrf24l01SPIStart
     _nrf24l01InterfaceInit
   _nrf24l01SetRXPipe
     _nrf24l01Send
       _nrf24l01SPIEnd
       _nrf24l01SPISend
       _nrf24l01SPIStart
   _nrf24l01SetTXPipe
     ___bmul
     _nrf24l01SPIEnd
     _nrf24l01SPISend
     _nrf24l01SPIStart
   _sendMessage
     _EEPROMRead (ARG)
     ___lbtoft (ARG)
       ___ftpack
     _ftoa (ARG)
       ___ftge
       ___ftmul
         ___ftpack
         _getADCValue (ARG)
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
           _sleepMs
             _resetWDT
       ___ftneg
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
         _getADCValue (ARG)
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
           _sleepMs
             _resetWDT
       ___ftsub
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___lltoft (ARG)
           ___ftpack
       ___fttol
         ___ftmul (ARG)
           ___ftpack
           _getADCValue (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
             _sleepMs
               _resetWDT
       ___lltoft
         ___ftpack
       _sprintf
         ___lldiv
         ___llmod
           ___lldiv (ARG)
         ___wmul
         _isdigit
     _getADCValue (ARG)
       ___awtoft
         ___ftpack
       ___ftadd
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftdiv
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
       _sleepMs
         _resetWDT
     _memset (ARG)
     _nrf24l01SendPacket (ARG)
       _nrf24l01Service
         _memset
         _nrf24l01SPIEnd
         _nrf24l01SPISend
         _nrf24l01SPIStart
         _nrf24l01Send
           _nrf24l01SPIEnd
           _nrf24l01SPISend
           _nrf24l01SPIStart
         _nrf24l01SendTXBuffer
           _nrf24l01SPIEnd
           _nrf24l01SPISend
           _nrf24l01SPIStart
           _nrf24l01SetRXMode
             _nrf24l01Send
               _nrf24l01SPIEnd
               _nrf24l01SPISend
               _nrf24l01SPIStart
           _strlen
         _nrf24l01SetRXMode
           _nrf24l01Send
             _nrf24l01SPIEnd
             _nrf24l01SPISend
             _nrf24l01SPIStart
         _strcmp
       _sleepMs
         _resetWDT
       _strcpy
     _sleepListren (ARG)
       _nrf24l01SetRXMode
         _nrf24l01Send
           _nrf24l01SPIEnd
           _nrf24l01SPISend
           _nrf24l01SPIStart
       _sleepMs
         _resetWDT
     _strcat (ARG)
       _ftoa (ARG)
         ___ftge
         ___ftmul
           ___ftpack
           _getADCValue (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
             _sleepMs
               _resetWDT
         ___ftneg
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv (ARG)
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
           _getADCValue (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
             _sleepMs
               _resetWDT
         ___ftsub
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___fttol
           ___ftmul (ARG)
             ___ftpack
             _getADCValue (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               _sleepMs
                 _resetWDT
         ___lltoft
           ___ftpack
         _sprintf
           ___lldiv
           ___llmod
             ___lldiv (ARG)
           ___wmul
           _isdigit
     _strcpy (ARG)
   _strcpy

 _ISR (ROOT)
   _nrf24l01ISR
     _nrf24l01Send
       _nrf24l01SPIEnd
       _nrf24l01SPISend
       _nrf24l01SPIStart
     _nrf24l01Service
       _memset
       _nrf24l01SPIEnd
       _nrf24l01SPISend
       _nrf24l01SPIStart
       _nrf24l01Send
         _nrf24l01SPIEnd
         _nrf24l01SPISend
         _nrf24l01SPIStart
       _nrf24l01SendTXBuffer
         _nrf24l01SPIEnd
         _nrf24l01SPISend
         _nrf24l01SPIStart
         _nrf24l01SetRXMode
           _nrf24l01Send
             _nrf24l01SPIEnd
             _nrf24l01SPISend
             _nrf24l01SPIStart
         _strlen
       _nrf24l01SetRXMode
         _nrf24l01Send
           _nrf24l01SPIEnd
           _nrf24l01SPISend
           _nrf24l01SPIStart
       _strcmp
     _nrf24l01SetRXMode
       _nrf24l01Send
         _nrf24l01SPIEnd
         _nrf24l01SPISend
         _nrf24l01SPIStart
   _resetWDT

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            4      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               4      4       4       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       9       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     44      4A       5       92.5%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50     3D      44       7       85.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0      2D       9       56.3%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0      42      11       82.5%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50     31      31      13       61.3%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0     132      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0     13B      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V2.00 build -1524193055 
Symbol Table                                                                                   Thu Aug 09 10:43:57 2018

                ___bmul@product 0071                     __CFG_CP$OFF 0000                              l53 0808  
              sendMessage@value 00B5                sendMessage@topic 00B3             ___wmul@multiplicand 0072  
                  ___ftadd@exp1 0034                    ___ftadd@exp2 0033               sendMessage@packet 00B1  
                   __CFG_LVP$ON 0000                    ___ftadd@sign 0032                             l171 0F0D  
                           l341 0912                             l342 0911                             l272 08AE  
                           l259 0B2D                             l460 011E                             l457 00FF  
                           l483 0870                             l717 0510                             l908 0ABE  
                           l693 0CD8                             l694 0CE0                             l777 0DEA  
                  __CFG_CPD$OFF 0000                             _ISR 0004                             wreg 0009  
                          ?_ISR 0070                    ___ftdiv@cntr 003C                    ___ftdiv@sign 0041  
                ??_nrf24l01Init 0030                            l4001 0725                            l4101 0DED  
                          l4023 0776                            l4007 073B                            l4105 0DFB  
                          l4035 0792                            l4027 077E                            l4115 09B2  
                          l4061 0850                            l4117 09C2                            l4205 08BA  
                          l4039 079A                            l4071 0D96                            l4143 0A67  
                          l3601 0CB1                            l4137 0A98                            l4225 0C1C  
                          l4241 0994                            l4129 091C                            l4145 0A73  
                          l3611 0CD2                            l4331 0EE7                            l4227 0C33  
                          l4243 0987                            l4403 0F6B                            l4147 0A7C  
                          l4341 0F2F                            l4333 0ED0                            l4093 0DD4  
                          l4245 09A6                            l4181 0A51                            l3607 0CC5  
                          l3703 04AF                            l4159 05A9                            l3609 0CCA  
                          l4257 0947                            l3721 04DC                            l4273 0E31  
                          l3801 09F8                            l4345 0F47                            l4329 0EDC  
                          l4089 0DC6                            l3641 17DA                            l3715 04C9  
                          l4291 0E72                            l4267 0E1B                            l4347 0F4E  
                          l4099 0DE1                            l4451 0FEC                            l4427 0F9B  
                          l4603 0A2B                            l3725 04E6                            l3805 0A00  
                          l3573 080D                            l3813 0AFE                            l4429 0FB0  
                          l3591 0C9B                            l3743 0522                            l3735 0502  
                          l3727 04EB                            l3647 0869                            l4439 0FCF  
                          l3729 04EF                            l3681 0C89                            l3841 0830  
                          l4553 0441                            l4537 03E8                            l3595 0CA2  
                          l3747 0534                            l3739 050C                            l4299 0E8B  
                          l3667 0C50                            l3771 0B89                            l3931 01A2  
                          l3923 017F                            l3915 0152                            l3819 0B06  
                          l4459 0FF9                            l4547 0432                            l3757 054F  
                          l3693 0499                            l3677 0C7E                            l3669 0C5E  
                          l3909 014C                            l3861 007F                            l4397 0F61  
                          l3599 0CAC                            l3791 09E8                            l3775 0BA1  
                          l3951 0212                            l3935 01B5                            l3927 018E  
                          l3847 088D                            l4671 0AC5                            l3697 04A0  
                          l3769 0B7B                            l3945 01CD                            l3937 01B8  
                          l3953 005C                            l3849 0898                            l4593 0A0A  
                          l4673 0AE5                            l3961 17DE                            l3779 0BAC  
                          l3955 021D                            l3867 008F                            l3875 00BD  
                          l4595 0A16                            l3789 09DC                            l3893 0106  
                          l3885 00CC                            l3965 17E4                            l3983 07EF  
                          l3887 00FB                            l4599 0A22                            l4839 070A  
                          l3889 0101                            l3979 07D9                            l3899 012D  
                          STR_1 183E                    __CFG_WDTE$ON 0000                            STR_2 183E  
                          STR_3 1825                            STR_4 1835                            STR_5 180C  
                          STR_6 1830                            STR_7 181F                            STR_8 183A  
                          STR_9 1813                            u4015 0B97                            u4025 0BA2  
                          u4054 09E4                            u4055 09E2                            u4305 0198  
                          u5105 0A23                            u4315 01AA                            u3605 0CE7  
                          u3525 0CA7                            u3545 0CC0                            u4505 079B  
                          u4515 07A1                            u4435 0747                            u3715 0C5F  
                          u4275 0175                            u5307 17CA                            u5075 0A0D  
                          u3565 0CCD                            u4445 0757                            u3725 0C73  
                          u5317 17BD                            u5237 066A                            u3735 0C7F  
                          u3655 0871                            u4295 0186                            u5095 0A1C  
                          u5175 0AD3                            u5247 096A                            u3905 04F0  
                          u4465 077F                            u4625 0DE2                            u3665 0876  
                          u5257 0979                            u4475 0785                            u5267 0C39  
                          u3845 04CA                            u4565 0D9D                            u5277 0B10  
                          u3935 0503                            u4815 0E43                            u4655 09B7  
                          u3695 0C53                            u5287 0B21                            u4744 08B4  
                          u4825 0E53                            u5297 0B2A                            u4745 08B3  
                          u3875 04DD                            u4835 0E73                            u4595 0DC7  
                          u4845 0E82                            u4855 0E8C                            u3995 0B7E  
                          _WPUA 020C                            _WPUC 020E  __size_of_nrf24l01InterfaceInit 001E  
                  __CFG_WRT$OFF 0000                   __CFG_FCMEN$ON 0000   __end_of_nrf24l01InterfaceInit 08DE  
                          ___sp 2171                            _main 064E                            _ftoa 0567  
                  ___ftpack@arg 0026                            _loop 0223                    ___ftpack@exp 0029  
                          fsr0h 0005                            fsr1h 0007                            indf0 0000  
                          fsr0l 0004                            fsr1l 0006                            btemp 0074  
                 __CFG_BORV$LOW 0000                            start 002B           nrf24l01SetRXPipe@pipe 0071  
           __size_of_EEPROMRead 001F                   __CFG_CSWEN$ON 0000               ___bmul@multiplier 0072  
                 __CFG_MCLRE$ON 0000                    ___ftmul@cntr 0056                    ___ftmul@sign 0057  
   __size_of_nrf24l01SendPacket 002F                           ??_ISR 0020                    ___fttol@exp1 0061  
          __size_of_getADCValue 00A9                    ___fttol@lval 005D                           ?_main 0070  
                         ?_ftoa 00A0                           ?_loop 0070                 __end_of___ftadd 0567  
                         STR_10 1819                           STR_11 1801                 __end_of___ftdiv 0EAD  
               __end_of___ftneg 17BC                 __end_of___lldiv 0C92                 __end_of___ftmul 07C2  
               EEPROMWrite@data 0072                 __end_of___llmod 0BB5                 __end_of___ftsub 0866  
               __end_of___fttol 0E04                  __CFG_DEBUG$OFF 0000                           i1l163 0020  
               __end_of___lwmod 0A30                           i1l286 0B43                   __CFG_PWRTE$ON 0000  
         nrf24l01SetTXPipe@pipe 0026                    ___lltoft@exp 002B                   ___awtoft@sign 0073  
               __end_of_dpowers 1028                 __end_of_isdigit 17DC                   ___ftpack@sign 002A  
                         ftoa@f 00A0                           ftoa@l 00A8                  __CFG_BOREN$OFF 0000  
               __end_of_sleepMs 0A03                           ltemp0 0074                           ltemp1 0078  
                         ltemp2 007C                           ltemp3 0076                           ttemp0 0074  
                         ttemp1 0077                           ttemp2 007A                           ttemp3 007D  
                         status 0003                           wtemp0 0074                           wtemp1 0076  
                         wtemp2 0078                           wtemp3 007A                           wtemp4 007C  
                         wtemp5 007E                 __end_of_sprintf 0223               getADCValue@adcSum 0049  
              _nrf24l01SPIStart 17C5            __size_of_EEPROMWrite 001F                 __initialization 002D  
        nrf24l01InitRegisters@i 002E                    __end_of_main 070E                    __end_of_ftoa 064E  
                  __end_of_loop 036A                          ??_main 00BA                   ___fttol@sign1 005C  
                        ??_ftoa 0074                          ??_loop 0074                    ?_sendMessage 00B1  
      __size_of_nrf24l01SPISend 000F                ___llmod@dividend 0037                          _ADRESH 009C  
                        _ADRESL 009B                __end_of___awtoft 095F                          _ANSELA 018C  
                        _ANSELC 018E                __end_of___ftpack 0CF7                __end_of___lbtoft 082B  
              __end_of___lltoft 09D7                          _ODCONA 028C        __size_of_nrf24l01GetPipe 0034  
                        _ODCONC 028E                          i1l4633 0B69                          i1l4617 0B44  
                        i1l4627 0B5C                          i1l4635 0B6C                          i1l4619 0B47  
                        i1l4629 0B5E                          _INLVLA 038C                          _INLVLC 038E  
      __size_of_nrf24l01Service 00AA            __size_of_nrf24l01ISR 0043                          ___bmul 17DC  
                        ___ftge 07C2                          ___wmul 0866                       ??___ftadd 0031  
                __CFG_STVREN$ON 0000                       ??___ftdiv 003B                       ??___ftneg 0074  
                     ??___lldiv 0070                       ??___ftmul 0074                       ??___llmod 0070  
                     ??___ftsub 0074                       ??___fttol 0074                       ??___lwmod 0074  
          __end_of_nrf24l01Init 0984            __end_of_nrf24l01Send 1800                          _memset 0A8E  
         _nrf24l01InitRegisters 036A                          _status 0064                          _strcat 0A5F  
                        _strcmp 0984                          _strcpy 082B                          _strlen 0884  
                        ftoa@cp 00AC           ___ftmul@f3_as_product 0053                __end_of_resetWDT 17B3  
                  ??_EEPROMRead 0072                       ??_isdigit 0070                          loop@ta 0223  
                        loop@vt 0220                       ??_sleepMs 0072                       ??_sprintf 0045  
            getADCValue@adcLoop 0047         __end_of__initialization 004F                      ___ftadd@f1 002B  
                    ___ftadd@f2 002E                      ___ftge@ff1 0026                      ___ftge@ff2 0029  
            getADCValue@channel 0046                      ___ftdiv@f1 0038                      ___ftdiv@f2 0035  
                    ___ftdiv@f3 003D                      ___ftneg@f1 004C                      ___awtoft@c 0070  
                    ___lbtoft@c 002B             ___bmul@multiplicand 0070                      ___ftmul@f1 004C  
                    ___ftmul@f2 004F              __end_of_EEPROMRead 08FD                      ___ftsub@f1 0038  
                    ___ftsub@f2 0035                      ___fttol@f1 0058                  __pcstackCOMMON 0070  
                  __pidataBANK1 07FE   __size_of_nrf24l01SendTXBuffer 0047                      ___lltoft@c 0070  
                  sprintf@width 0050                     loop@rfSetup 022F                      __pbssBANK0 0064  
                    __pbssBANK1 00DD                      __pbssBANK2 0120                      __pbssBANK3 01A0  
         sendMessage@ftoaStatus 00B8               ??_nrf24l01GetPipe 0027                      __pmaintext 064E  
                       ?___bmul 0070                         ?___ftge 0026                         ?___wmul 0070  
               __CFG_PPS1WAY$ON 0000               _nrf24l01SetRXMode 0AF4               _nrf24l01SetRXPipe 08A2  
        ?_nrf24l01InitRegisters 0070                      __pintentry 0004               _nrf24l01SetTXPipe 0BB5  
                     ?___awtoft 0070                       ?___ftpack 0026                       ?___lbtoft 0070  
            ?_nrf24l01SetRXPipe 0070              ?_nrf24l01SetTXPipe 0070                       ?___lltoft 0070  
           __CFG_RSTOSC$HFINT32 0000                         ?_strcat 00AD                         ?_strcpy 0070  
         __end_of_n_ADDRESS_MUL 1801            __size_of_sendMessage 0086        __end_of_nrf24l01SPIStart 17CE  
           ??_nrf24l01SetRXPipe 0070             ??_nrf24l01SetTXPipe 0073                         _NVMADRH 0892  
                       _NVMADRL 0891                         _NVMDATL 0893                         _NVMCON2 0896  
                       _SSP1BUF 0211           _nrf24l01InterfaceInit 08C0      __end_of_nrf24l01SendPacket 0A5F  
                 ??_getADCValue 0045           __size_of_nrf24l01Init 0025           __size_of_nrf24l01Send 0013  
     __end_of_nrf24l01SetRXMode 0B2F       __end_of_nrf24l01SetRXPipe 08C0                   ?_sleepListren 0026  
     __end_of_nrf24l01SetTXPipe 0BF8                 __size_of___bmul 0011                 __size_of___ftge 003C  
                       ___ftadd 0471                         ___ftdiv 0E04                         ___ftneg 17B3  
                       ___lldiv 0C3F                 __size_of___wmul 001E                         ___ftmul 070E  
                       ___llmod 0B72                         ___ftsub 0848                         ___fttol 0D7D  
                       ___lwmod 0A03                      ??___awtoft 0073                      ??___ftpack 0070  
                    ??___lbtoft 0074                 __size_of_memset 0032          EEPROMWrite@GIEBitValue 0073  
                    ??___lltoft 0074                         __ptext1 095F                         __ptext2 08C0  
                       __ptext3 036A                         __ptext4 0BB5                         __ptext5 17DC  
                       __ptext6 08A2                         __ptext7 0AC0                         __ptext8 0A03  
                       __ptext9 0223                 __size_of_strcat 002F                 __size_of_strcmp 0029  
               __size_of_strcpy 001D                 __size_of_strlen 001E                    __size_of_ISR 0027  
                       _counter 00DD                         _dpowers 1000                         _isdigit 17CE  
                       _romData 00E3                         _sleepMs 09D7                         _sprintf 0056  
                       clrloop0 17A7            end_of_initialization 004F                         ftoa@buf 013C  
                       ftoa@rem 00A4                    _nrf24l01Init 095F                    _nrf24l01Send 17ED  
                    _romDataMap 0120                   ??_EEPROMWrite 0073                nrf24l01GetPipe@i 002A  
               ___lldiv@divisor 0026                 ___lldiv@counter 0032                  ??_sleepListren 0074  
           __end_of_getADCValue 0F56                       _PORTAbits 000C                       _PORTCbits 000E  
                     _TRISAbits 008C                       _TRISCbits 008E                __CFG_FEXTOSC$OFF 0000  
                 ??_nrf24l01ISR 0070          ?_nrf24l01InterfaceInit 0070                     ___ftdiv@exp 0040  
                    main@packet 00BC      __size_of_nrf24l01SetRXMode 003B      __size_of_nrf24l01SetRXPipe 001E  
                   ___ftmul@exp 0052      __size_of_nrf24l01SetTXPipe 0043             __end_of_EEPROMWrite 091C  
                __end_of___bmul 17ED                  __end_of___ftge 07FE                  __end_of___wmul 0884  
                __end_of_memset 0AC0                  __end_of_strcat 0A8E                  __end_of_strcmp 09AD  
                  _lastTXPacket 0069                  __end_of_strcpy 0848                  __end_of_strlen 08A2  
           start_initialization 002D                 _nrf24l01SPISend 0801                     __end_of_ISR 002B  
  __end_of_nrf24l01SendTXBuffer 0C3F                      ftoa@status 00A3       nrf24l01SetRXPipe@enRXAddr 0072  
               _nrf24l01GetPipe 0AC0         __size_of_nrf24l01SPIEnd 0009                 ___llmod@divisor 0033  
               ___llmod@counter 0070                 _nrf24l01Service 0F56         ??_nrf24l01InitRegisters 0027  
              __CFG_LPBOREN$OFF 0000                     _getADCValue 0EAD                        ??___bmul 0071  
                      ??___ftge 0070             __end_of_nrf24l01ISR 0B72                        ??___wmul 0074  
                   __pdataBANK1 00E3                        ??_strcat 0074                        ??_strcpy 0074  
             __size_of___awtoft 0022               __size_of___ftpack 0065               __size_of___lbtoft 001B  
             __size_of___lltoft 002A                       ___latbits 0002                   __pcstackBANK0 0020  
                 __pcstackBANK1 00A0                   __pcstackBANK4 0220            __end_of_sleepListren 093D  
                  _isdigit$1815 0070                     sprintf@flag 0049                     sprintf@prec 0052  
                    loop@packet 0230                     _EEPROMWrite 08FD             nrf24l01GetPipe@name 0029  
           nrf24l01GetPipe@pipe 0028               __size_of_resetWDT 0007                        ?___ftadd 002B  
                      ?___ftdiv 0035                        ?___ftneg 004C                        ?___lldiv 0026  
                      ?___ftmul 004C                        ?___llmod 0033                        ?___ftsub 0035  
                      ?___fttol 0058                        ?___lwmod 0070            __end_of_n_ADDRESS_P0 1830  
       __end_of_nrf24l01SPISend 0810       nrf24l01InitRegisters@enAA 002C                   ??_sendMessage 0074  
            _nrf24l01SendPacket 0A30             sleepMs@milliseconds 0070         __end_of_nrf24l01GetPipe 0AF4  
                      ?_isdigit 0070                       _loop$2056 0226                       _loop$2057 0229  
                     _loop$2058 022C                        ?_sleepMs 0070             ?_nrf24l01SendPacket 0028  
                      ?_sprintf 003B              EEPROMWrite@address 0070         __end_of_nrf24l01Service 1000  
                ___wmul@product 0026                     _nrf24l01ISR 0B2F                       clear_ram0 17A6  
                      _PIE0bits 0090                        _PIR0bits 0010            ??_nrf24l01SendPacket 0074  
                     _testCount 00E1            _nrf24l01SendTXBuffer 0BF8                      _ADCON0bits 009D  
                    _ADCON1bits 009E               ___wmul@multiplier 0070                        _WPUAbits 020C  
                      _RXPacket 01A0                        _TXPacket 01C1             sleepListren@seconds 0026  
           __end_of_sendMessage 0D7D         ??_nrf24l01InterfaceInit 0070                  _nrf24l01SPIEnd 17BC  
             EEPROMRead@address 0070                __size_of___ftadd 00F6                __size_of___ftdiv 00A9  
              __size_of___ftneg 0009                __size_of___lldiv 0053                __size_of___ftmul 00B4  
              __size_of___llmod 0043                __size_of___ftsub 001E                __size_of___fttol 0087  
              __size_of___lwmod 002D                        ___awtoft 093D                        ___ftpack 0C92  
                      ___lbtoft 0810                        ___int_sp 22B1                        ___lltoft 09AD  
         __size_of_sleepListren 0021                      _ANSELAbits 018C                      _ANSELCbits 018E  
                    _EEPROMRead 08DE                ?_nrf24l01GetPipe 0070                      sprintf@val 004B  
                 _n_ADDRESS_MUL 1800                      strcat@from 00AF                __size_of_isdigit 000E  
                      __ptext10 0CF7                        __ptext11 0A5F                        __ptext20 17ED  
                      __ptext12 091C                        __ptext21 17C5                        __ptext13 0A30  
                      __ptext30 0C3F                        __ptext22 0801                        __ptext14 082B  
                      __ptext31 09AD                        __ptext23 17BC                        __ptext15 0F56  
                      __ptext40 0E04                        __ptext32 0D7D                        __ptext24 0A8E  
                      __ptext16 0984                        __ptext41 0471                        __ptext33 0848  
                      __ptext25 0567                        __ptext17 0BF8                        __ptext42 093D  
                      __ptext34 17B3                        __ptext26 0056                        __ptext18 0884  
                      __ptext43 0810                        __ptext35 070E                        __ptext27 17CE  
                      __ptext19 0AF4                        __ptext44 0C92                        __ptext36 07C2  
                      __ptext28 0866                        __ptext45 08FD                        __ptext37 0EAD  
                      __ptext29 0B72                        __ptext46 08DE                        __ptext38 09D7  
                      __ptext39 17AC                        __ptext48 0B2F                __size_of_sleepMs 002C  
                  _SSP1CON1bits 0215          __end_of_nrf24l01SPIEnd 17C5                __size_of_sprintf 01CD  
                   _OSCCON1bits 0919                      strcpy@from 0072                   __size_of_main 00C0  
                 __size_of_ftoa 00E7                   __size_of_loop 0147    nrf24l01InitRegisters@channel 0028  
  nrf24l01InitRegisters@feature 002A                    sleepMs@wdtps 0073                      _RC0PPSbits 0EA0  
                      _resetWDT 17AC    nrf24l01InitRegisters@rfSetup 002B                      _RC1PPSbits 0EA1  
                  ?_getADCValue 0042                      _RC2PPSbits 0EA2                    _sleepListren 091C  
__size_of_nrf24l01InitRegisters 0107   __end_of_nrf24l01InitRegisters 0471    nrf24l01InitRegisters@setupAW 0029  
                    _ODCONAbits 028C                    _SSP1STATbits 0214                        main@pipe 00BB  
    nrf24l01SendPacket@txPacket 0028                     _sendMessage 0CF7                      _INTCONbits 000B  
                   _NVMCON1bits 0895                      _FVRCONbits 0117                  __pstringtext10 1835  
                __pstringtext11 183A                  __pstringtext12 183E                  __pstringtext13 0000  
                      isdigit@c 0071                        intlevel1 0000                       sprintf@ap 004A  
                     sprintf@sp 004F                    _n_ADDRESS_P0 182B                ___lwmod@dividend 0072  
              ___lldiv@dividend 002A                    ?_EEPROMWrite 0070               __CFG_CLKOUTEN$OFF 0000  
     __size_of_nrf24l01SPIStart 0009                   __pstringtext1 1000                   __pstringtext2 182B  
                 __pstringtext3 1800                   __pstringtext4 180C                   __pstringtext5 1813  
                 __pstringtext6 1819                   __pstringtext7 181F                   __pstringtext8 1825  
                 __pstringtext9 1830                        sprintf@c 0054                        sprintf@f 003B  
    nrf24l01InitRegisters@DynPD 002D                        strcat@cp 0062                        strcat@to 00AD  
                   ?_EEPROMRead 0070                ___lldiv@quotient 002E                 ___lwmod@divisor 0070  
                      strcpy@cp 0026                        strcpy@to 0070                 ___lwmod@counter 0026  
                    _WDTCONbits 0097                   ?_nrf24l01Init 0070                      _STATUSbits 0003  
                  ?_nrf24l01ISR 0070  
