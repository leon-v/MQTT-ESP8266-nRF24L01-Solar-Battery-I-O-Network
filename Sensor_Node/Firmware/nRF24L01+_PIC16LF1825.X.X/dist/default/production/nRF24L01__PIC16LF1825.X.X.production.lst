

Microchip Technology PIC LITE Macro Assembler V2.00 build -1524193055 
                                                                                               Fri Jul 20 13:07:46 2018

Microchip Technology Omniscient Code Generator v2.00 (Free mode) build 20180527130849
     1                           	processor	16LF18325
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	stringtext1,global,class=STRCODE,delta=2
     5                           	psect	stringtext2,global,class=STRCODE,delta=2
     6                           	psect	stringtext3,global,class=STRCODE,delta=2
     7                           	psect	_romArray_text,global,class=STRCODE,delta=2
     8                           	psect	stringtext4,global,class=STRCODE,delta=2
     9                           	psect	stringtext5,global,class=STRCODE,delta=2
    10                           	psect	stringtext6,global,class=STRCODE,delta=2
    11                           	psect	stringtext7,global,class=STRCODE,delta=2
    12                           	psect	stringtext8,global,class=STRCODE,delta=2
    13                           	psect	stringtext9,global,class=STRCODE,delta=2
    14                           	psect	stringtext10,global,class=STRCODE,delta=2
    15                           	psect	stringtext11,global,class=STRCODE,delta=2
    16                           	psect	stringtext12,global,class=STRCODE,delta=2
    17                           	psect	stringtext13,global,class=STRCODE,delta=2
    18                           	psect	stringtext14,global,class=STRCODE,delta=2
    19                           	psect	cinit,global,class=CODE,merge=1,delta=2
    20                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    21                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    22                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    23                           	psect	clrtext,global,class=CODE,delta=2
    24                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    25                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    26                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    27                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    28                           	psect	text1,local,class=CODE,merge=1,delta=2,group=2
    29                           	psect	text2,local,class=CODE,merge=1,delta=2
    30                           	psect	text3,local,class=CODE,merge=1,delta=2
    31                           	psect	text4,local,class=CODE,merge=1,delta=2
    32                           	psect	text5,local,class=CODE,merge=1,delta=2
    33                           	psect	text6,local,class=CODE,merge=1,delta=2,group=1
    34                           	psect	text7,local,class=CODE,merge=1,delta=2
    35                           	psect	text8,local,class=CODE,merge=1,delta=2
    36                           	psect	text9,local,class=CODE,merge=1,delta=2
    37                           	psect	text10,local,class=CODE,merge=1,delta=2
    38                           	psect	text11,local,class=CODE,merge=1,delta=2
    39                           	psect	text12,local,class=CODE,merge=1,delta=2,group=2
    40                           	psect	text13,local,class=CODE,merge=1,delta=2,group=1
    41                           	psect	text14,local,class=CODE,merge=1,delta=2,group=2
    42                           	psect	text15,local,class=CODE,merge=1,delta=2,group=2
    43                           	psect	text16,local,class=CODE,merge=1,delta=2
    44                           	psect	text17,local,class=CODE,merge=1,delta=2,group=2
    45                           	psect	text18,local,class=CODE,merge=1,delta=2
    46                           	psect	text19,local,class=CODE,merge=1,delta=2
    47                           	psect	text20,local,class=CODE,merge=1,delta=2,group=1
    48                           	psect	text21,local,class=CODE,merge=1,delta=2,group=1
    49                           	psect	text22,local,class=CODE,merge=1,delta=2
    50                           	psect	text23,local,class=CODE,merge=1,delta=2
    51                           	psect	text24,local,class=CODE,merge=1,delta=2
    52                           	psect	text25,local,class=CODE,merge=1,delta=2
    53                           	psect	text26,local,class=CODE,merge=1,delta=2
    54                           	psect	text27,local,class=CODE,merge=1,delta=2
    55                           	psect	text28,local,class=CODE,merge=1,delta=2
    56                           	psect	text29,local,class=CODE,merge=1,delta=2
    57                           	psect	intentry,global,class=CODE,delta=2
    58                           	psect	text31,local,class=CODE,merge=1,delta=2
    59                           	psect	text32,local,class=CODE,merge=1,delta=2
    60                           	psect	text33,local,class=CODE,merge=1,delta=2
    61                           	psect	text34,local,class=CODE,merge=1,delta=2
    62                           	psect	text35,local,class=CODE,merge=1,delta=2
    63                           	psect	text36,local,class=CODE,merge=1,delta=2
    64                           	psect	text37,local,class=CODE,merge=1,delta=2
    65                           	psect	text38,local,class=CODE,merge=1,delta=2
    66                           	psect	text39,local,class=CODE,merge=1,delta=2
    67                           	psect	text40,local,class=CODE,merge=1,delta=2
    68                           	psect	text41,local,class=CODE,merge=1,delta=2
    69                           	psect	text42,local,class=CODE,merge=1,delta=2
    70                           	psect	text43,local,class=CODE,merge=1,delta=2
    71                           	psect	text44,local,class=CODE,merge=1,delta=2
    72                           	psect	text45,local,class=CODE,merge=1,delta=2,group=2
    73                           	psect	text46,local,class=CODE,merge=1,delta=2
    74                           	psect	text47,local,class=CODE,merge=1,delta=2
    75                           	psect	text48,local,class=CODE,merge=1,delta=2
    76                           	psect	text49,local,class=CODE,merge=1,delta=2,group=1
    77                           	dabs	1,0x7E,2
    78  0000                     
    79                           ; Version 2.00
    80                           ; Generated 27/05/2018 GMT
    81                           ; 
    82                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
    83                           ; All rights reserved.
    84                           ; 
    85                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    86                           ; 
    87                           ; Redistribution and use in source and binary forms, with or without modification, are
    88                           ; permitted provided that the following conditions are met:
    89                           ; 
    90                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    91                           ;        conditions and the following disclaimer.
    92                           ; 
    93                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    94                           ;        of conditions and the following disclaimer in the documentation and/or other
    95                           ;        materials provided with the distribution.
    96                           ; 
    97                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    98                           ;        software without specific prior written permission.
    99                           ; 
   100                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   101                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   102                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   103                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   104                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   105                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   106                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   107                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   108                           ; 
   109                           ; 
   110                           ; Code-generator required, PIC16LF18325 Definitions
   111                           ; 
   112                           ; SFR Addresses
   113  0000                     	;# 
   114  0001                     	;# 
   115  0002                     	;# 
   116  0003                     	;# 
   117  0004                     	;# 
   118  0005                     	;# 
   119  0006                     	;# 
   120  0007                     	;# 
   121  0008                     	;# 
   122  0009                     	;# 
   123  000A                     	;# 
   124  000B                     	;# 
   125  000C                     	;# 
   126  000E                     	;# 
   127  0010                     	;# 
   128  0011                     	;# 
   129  0012                     	;# 
   130  0013                     	;# 
   131  0014                     	;# 
   132  0015                     	;# 
   133  0015                     	;# 
   134  0016                     	;# 
   135  0016                     	;# 
   136  0017                     	;# 
   137  0018                     	;# 
   138  0019                     	;# 
   139  0019                     	;# 
   140  001A                     	;# 
   141  001B                     	;# 
   142  001C                     	;# 
   143  001D                     	;# 
   144  001E                     	;# 
   145  001F                     	;# 
   146  008C                     	;# 
   147  008E                     	;# 
   148  0090                     	;# 
   149  0091                     	;# 
   150  0092                     	;# 
   151  0093                     	;# 
   152  0094                     	;# 
   153  0097                     	;# 
   154  009B                     	;# 
   155  009B                     	;# 
   156  009C                     	;# 
   157  009D                     	;# 
   158  009E                     	;# 
   159  009F                     	;# 
   160  010C                     	;# 
   161  010E                     	;# 
   162  0111                     	;# 
   163  0112                     	;# 
   164  0113                     	;# 
   165  0114                     	;# 
   166  0115                     	;# 
   167  0116                     	;# 
   168  0117                     	;# 
   169  0118                     	;# 
   170  0119                     	;# 
   171  018C                     	;# 
   172  018E                     	;# 
   173  0199                     	;# 
   174  0199                     	;# 
   175  0199                     	;# 
   176  019A                     	;# 
   177  019A                     	;# 
   178  019A                     	;# 
   179  019B                     	;# 
   180  019B                     	;# 
   181  019B                     	;# 
   182  019B                     	;# 
   183  019B                     	;# 
   184  019C                     	;# 
   185  019C                     	;# 
   186  019C                     	;# 
   187  019D                     	;# 
   188  019D                     	;# 
   189  019D                     	;# 
   190  019E                     	;# 
   191  019E                     	;# 
   192  019E                     	;# 
   193  019F                     	;# 
   194  019F                     	;# 
   195  019F                     	;# 
   196  019F                     	;# 
   197  019F                     	;# 
   198  020C                     	;# 
   199  020E                     	;# 
   200  0211                     	;# 
   201  0211                     	;# 
   202  0212                     	;# 
   203  0212                     	;# 
   204  0213                     	;# 
   205  0213                     	;# 
   206  0214                     	;# 
   207  0214                     	;# 
   208  0215                     	;# 
   209  0215                     	;# 
   210  0215                     	;# 
   211  0215                     	;# 
   212  0216                     	;# 
   213  0216                     	;# 
   214  0217                     	;# 
   215  0217                     	;# 
   216  0219                     	;# 
   217  021A                     	;# 
   218  021B                     	;# 
   219  021C                     	;# 
   220  021D                     	;# 
   221  021D                     	;# 
   222  021E                     	;# 
   223  021F                     	;# 
   224  028C                     	;# 
   225  028E                     	;# 
   226  0291                     	;# 
   227  0291                     	;# 
   228  0292                     	;# 
   229  0293                     	;# 
   230  0294                     	;# 
   231  0295                     	;# 
   232  0295                     	;# 
   233  0296                     	;# 
   234  0297                     	;# 
   235  0298                     	;# 
   236  029F                     	;# 
   237  030C                     	;# 
   238  030E                     	;# 
   239  0311                     	;# 
   240  0311                     	;# 
   241  0312                     	;# 
   242  0313                     	;# 
   243  0314                     	;# 
   244  0315                     	;# 
   245  0315                     	;# 
   246  0316                     	;# 
   247  0317                     	;# 
   248  0318                     	;# 
   249  038C                     	;# 
   250  038E                     	;# 
   251  0391                     	;# 
   252  0392                     	;# 
   253  0393                     	;# 
   254  0397                     	;# 
   255  0398                     	;# 
   256  0399                     	;# 
   257  039A                     	;# 
   258  039C                     	;# 
   259  039D                     	;# 
   260  039E                     	;# 
   261  039F                     	;# 
   262  0411                     	;# 
   263  0411                     	;# 
   264  0412                     	;# 
   265  0413                     	;# 
   266  0414                     	;# 
   267  0415                     	;# 
   268  0416                     	;# 
   269  0417                     	;# 
   270  0418                     	;# 
   271  0418                     	;# 
   272  0419                     	;# 
   273  041A                     	;# 
   274  041B                     	;# 
   275  041C                     	;# 
   276  041D                     	;# 
   277  041E                     	;# 
   278  041F                     	;# 
   279  0498                     	;# 
   280  0498                     	;# 
   281  0499                     	;# 
   282  049A                     	;# 
   283  049B                     	;# 
   284  049B                     	;# 
   285  049C                     	;# 
   286  049D                     	;# 
   287  049E                     	;# 
   288  049F                     	;# 
   289  0617                     	;# 
   290  0618                     	;# 
   291  0619                     	;# 
   292  0619                     	;# 
   293  061A                     	;# 
   294  061B                     	;# 
   295  061C                     	;# 
   296  061C                     	;# 
   297  061F                     	;# 
   298  0691                     	;# 
   299  0692                     	;# 
   300  0693                     	;# 
   301  0694                     	;# 
   302  0695                     	;# 
   303  0696                     	;# 
   304  0697                     	;# 
   305  0698                     	;# 
   306  0699                     	;# 
   307  0711                     	;# 
   308  0712                     	;# 
   309  0713                     	;# 
   310  0714                     	;# 
   311  0715                     	;# 
   312  0716                     	;# 
   313  0717                     	;# 
   314  0718                     	;# 
   315  0719                     	;# 
   316  0891                     	;# 
   317  0891                     	;# 
   318  0891                     	;# 
   319  0891                     	;# 
   320  0891                     	;# 
   321  0891                     	;# 
   322  0892                     	;# 
   323  0892                     	;# 
   324  0892                     	;# 
   325  0893                     	;# 
   326  0893                     	;# 
   327  0893                     	;# 
   328  0893                     	;# 
   329  0893                     	;# 
   330  0893                     	;# 
   331  0894                     	;# 
   332  0894                     	;# 
   333  0894                     	;# 
   334  0895                     	;# 
   335  0895                     	;# 
   336  0895                     	;# 
   337  0896                     	;# 
   338  0896                     	;# 
   339  0896                     	;# 
   340  089B                     	;# 
   341  0911                     	;# 
   342  0912                     	;# 
   343  0913                     	;# 
   344  0914                     	;# 
   345  0915                     	;# 
   346  0916                     	;# 
   347  0918                     	;# 
   348  0919                     	;# 
   349  091A                     	;# 
   350  091B                     	;# 
   351  091C                     	;# 
   352  091D                     	;# 
   353  091E                     	;# 
   354  091F                     	;# 
   355  0E0F                     	;# 
   356  0E10                     	;# 
   357  0E11                     	;# 
   358  0E12                     	;# 
   359  0E13                     	;# 
   360  0E14                     	;# 
   361  0E15                     	;# 
   362  0E16                     	;# 
   363  0E17                     	;# 
   364  0E18                     	;# 
   365  0E19                     	;# 
   366  0E1A                     	;# 
   367  0E1B                     	;# 
   368  0E1C                     	;# 
   369  0E1D                     	;# 
   370  0E1E                     	;# 
   371  0E1F                     	;# 
   372  0E20                     	;# 
   373  0E21                     	;# 
   374  0E22                     	;# 
   375  0E24                     	;# 
   376  0E25                     	;# 
   377  0E28                     	;# 
   378  0E29                     	;# 
   379  0E2A                     	;# 
   380  0E2B                     	;# 
   381  0E2C                     	;# 
   382  0E2D                     	;# 
   383  0E2E                     	;# 
   384  0E2F                     	;# 
   385  0E90                     	;# 
   386  0E91                     	;# 
   387  0E92                     	;# 
   388  0E94                     	;# 
   389  0E95                     	;# 
   390  0EA0                     	;# 
   391  0EA1                     	;# 
   392  0EA2                     	;# 
   393  0EA3                     	;# 
   394  0EA4                     	;# 
   395  0EA5                     	;# 
   396  0F0F                     	;# 
   397  0F10                     	;# 
   398  0F11                     	;# 
   399  0F12                     	;# 
   400  0F13                     	;# 
   401  0F14                     	;# 
   402  0F15                     	;# 
   403  0F16                     	;# 
   404  0F17                     	;# 
   405  0F18                     	;# 
   406  0F19                     	;# 
   407  0F1A                     	;# 
   408  0F1B                     	;# 
   409  0F1C                     	;# 
   410  0F1D                     	;# 
   411  0F1E                     	;# 
   412  0F1F                     	;# 
   413  0F20                     	;# 
   414  0F21                     	;# 
   415  0F22                     	;# 
   416  0F23                     	;# 
   417  0F24                     	;# 
   418  0F25                     	;# 
   419  0F26                     	;# 
   420  0F27                     	;# 
   421  0F28                     	;# 
   422  0F29                     	;# 
   423  0F2A                     	;# 
   424  0F2B                     	;# 
   425  0F2C                     	;# 
   426  0F2D                     	;# 
   427  0F2E                     	;# 
   428  0F2F                     	;# 
   429  0F30                     	;# 
   430  0F31                     	;# 
   431  0F32                     	;# 
   432  0F33                     	;# 
   433  0F34                     	;# 
   434  0F35                     	;# 
   435  0F36                     	;# 
   436  0F37                     	;# 
   437  0FE4                     	;# 
   438  0FE5                     	;# 
   439  0FE6                     	;# 
   440  0FE7                     	;# 
   441  0FE8                     	;# 
   442  0FE9                     	;# 
   443  0FEA                     	;# 
   444  0FEB                     	;# 
   445  0FED                     	;# 
   446  0FEE                     	;# 
   447  0FEF                     	;# 
   448  0000                     	;# 
   449  0001                     	;# 
   450  0002                     	;# 
   451  0003                     	;# 
   452  0004                     	;# 
   453  0005                     	;# 
   454  0006                     	;# 
   455  0007                     	;# 
   456  0008                     	;# 
   457  0009                     	;# 
   458  000A                     	;# 
   459  000B                     	;# 
   460  000C                     	;# 
   461  000E                     	;# 
   462  0010                     	;# 
   463  0011                     	;# 
   464  0012                     	;# 
   465  0013                     	;# 
   466  0014                     	;# 
   467  0015                     	;# 
   468  0015                     	;# 
   469  0016                     	;# 
   470  0016                     	;# 
   471  0017                     	;# 
   472  0018                     	;# 
   473  0019                     	;# 
   474  0019                     	;# 
   475  001A                     	;# 
   476  001B                     	;# 
   477  001C                     	;# 
   478  001D                     	;# 
   479  001E                     	;# 
   480  001F                     	;# 
   481  008C                     	;# 
   482  008E                     	;# 
   483  0090                     	;# 
   484  0091                     	;# 
   485  0092                     	;# 
   486  0093                     	;# 
   487  0094                     	;# 
   488  0097                     	;# 
   489  009B                     	;# 
   490  009B                     	;# 
   491  009C                     	;# 
   492  009D                     	;# 
   493  009E                     	;# 
   494  009F                     	;# 
   495  010C                     	;# 
   496  010E                     	;# 
   497  0111                     	;# 
   498  0112                     	;# 
   499  0113                     	;# 
   500  0114                     	;# 
   501  0115                     	;# 
   502  0116                     	;# 
   503  0117                     	;# 
   504  0118                     	;# 
   505  0119                     	;# 
   506  018C                     	;# 
   507  018E                     	;# 
   508  0199                     	;# 
   509  0199                     	;# 
   510  0199                     	;# 
   511  019A                     	;# 
   512  019A                     	;# 
   513  019A                     	;# 
   514  019B                     	;# 
   515  019B                     	;# 
   516  019B                     	;# 
   517  019B                     	;# 
   518  019B                     	;# 
   519  019C                     	;# 
   520  019C                     	;# 
   521  019C                     	;# 
   522  019D                     	;# 
   523  019D                     	;# 
   524  019D                     	;# 
   525  019E                     	;# 
   526  019E                     	;# 
   527  019E                     	;# 
   528  019F                     	;# 
   529  019F                     	;# 
   530  019F                     	;# 
   531  019F                     	;# 
   532  019F                     	;# 
   533  020C                     	;# 
   534  020E                     	;# 
   535  0211                     	;# 
   536  0211                     	;# 
   537  0212                     	;# 
   538  0212                     	;# 
   539  0213                     	;# 
   540  0213                     	;# 
   541  0214                     	;# 
   542  0214                     	;# 
   543  0215                     	;# 
   544  0215                     	;# 
   545  0215                     	;# 
   546  0215                     	;# 
   547  0216                     	;# 
   548  0216                     	;# 
   549  0217                     	;# 
   550  0217                     	;# 
   551  0219                     	;# 
   552  021A                     	;# 
   553  021B                     	;# 
   554  021C                     	;# 
   555  021D                     	;# 
   556  021D                     	;# 
   557  021E                     	;# 
   558  021F                     	;# 
   559  028C                     	;# 
   560  028E                     	;# 
   561  0291                     	;# 
   562  0291                     	;# 
   563  0292                     	;# 
   564  0293                     	;# 
   565  0294                     	;# 
   566  0295                     	;# 
   567  0295                     	;# 
   568  0296                     	;# 
   569  0297                     	;# 
   570  0298                     	;# 
   571  029F                     	;# 
   572  030C                     	;# 
   573  030E                     	;# 
   574  0311                     	;# 
   575  0311                     	;# 
   576  0312                     	;# 
   577  0313                     	;# 
   578  0314                     	;# 
   579  0315                     	;# 
   580  0315                     	;# 
   581  0316                     	;# 
   582  0317                     	;# 
   583  0318                     	;# 
   584  038C                     	;# 
   585  038E                     	;# 
   586  0391                     	;# 
   587  0392                     	;# 
   588  0393                     	;# 
   589  0397                     	;# 
   590  0398                     	;# 
   591  0399                     	;# 
   592  039A                     	;# 
   593  039C                     	;# 
   594  039D                     	;# 
   595  039E                     	;# 
   596  039F                     	;# 
   597  0411                     	;# 
   598  0411                     	;# 
   599  0412                     	;# 
   600  0413                     	;# 
   601  0414                     	;# 
   602  0415                     	;# 
   603  0416                     	;# 
   604  0417                     	;# 
   605  0418                     	;# 
   606  0418                     	;# 
   607  0419                     	;# 
   608  041A                     	;# 
   609  041B                     	;# 
   610  041C                     	;# 
   611  041D                     	;# 
   612  041E                     	;# 
   613  041F                     	;# 
   614  0498                     	;# 
   615  0498                     	;# 
   616  0499                     	;# 
   617  049A                     	;# 
   618  049B                     	;# 
   619  049B                     	;# 
   620  049C                     	;# 
   621  049D                     	;# 
   622  049E                     	;# 
   623  049F                     	;# 
   624  0617                     	;# 
   625  0618                     	;# 
   626  0619                     	;# 
   627  0619                     	;# 
   628  061A                     	;# 
   629  061B                     	;# 
   630  061C                     	;# 
   631  061C                     	;# 
   632  061F                     	;# 
   633  0691                     	;# 
   634  0692                     	;# 
   635  0693                     	;# 
   636  0694                     	;# 
   637  0695                     	;# 
   638  0696                     	;# 
   639  0697                     	;# 
   640  0698                     	;# 
   641  0699                     	;# 
   642  0711                     	;# 
   643  0712                     	;# 
   644  0713                     	;# 
   645  0714                     	;# 
   646  0715                     	;# 
   647  0716                     	;# 
   648  0717                     	;# 
   649  0718                     	;# 
   650  0719                     	;# 
   651  0891                     	;# 
   652  0891                     	;# 
   653  0891                     	;# 
   654  0891                     	;# 
   655  0891                     	;# 
   656  0891                     	;# 
   657  0892                     	;# 
   658  0892                     	;# 
   659  0892                     	;# 
   660  0893                     	;# 
   661  0893                     	;# 
   662  0893                     	;# 
   663  0893                     	;# 
   664  0893                     	;# 
   665  0893                     	;# 
   666  0894                     	;# 
   667  0894                     	;# 
   668  0894                     	;# 
   669  0895                     	;# 
   670  0895                     	;# 
   671  0895                     	;# 
   672  0896                     	;# 
   673  0896                     	;# 
   674  0896                     	;# 
   675  089B                     	;# 
   676  0911                     	;# 
   677  0912                     	;# 
   678  0913                     	;# 
   679  0914                     	;# 
   680  0915                     	;# 
   681  0916                     	;# 
   682  0918                     	;# 
   683  0919                     	;# 
   684  091A                     	;# 
   685  091B                     	;# 
   686  091C                     	;# 
   687  091D                     	;# 
   688  091E                     	;# 
   689  091F                     	;# 
   690  0E0F                     	;# 
   691  0E10                     	;# 
   692  0E11                     	;# 
   693  0E12                     	;# 
   694  0E13                     	;# 
   695  0E14                     	;# 
   696  0E15                     	;# 
   697  0E16                     	;# 
   698  0E17                     	;# 
   699  0E18                     	;# 
   700  0E19                     	;# 
   701  0E1A                     	;# 
   702  0E1B                     	;# 
   703  0E1C                     	;# 
   704  0E1D                     	;# 
   705  0E1E                     	;# 
   706  0E1F                     	;# 
   707  0E20                     	;# 
   708  0E21                     	;# 
   709  0E22                     	;# 
   710  0E24                     	;# 
   711  0E25                     	;# 
   712  0E28                     	;# 
   713  0E29                     	;# 
   714  0E2A                     	;# 
   715  0E2B                     	;# 
   716  0E2C                     	;# 
   717  0E2D                     	;# 
   718  0E2E                     	;# 
   719  0E2F                     	;# 
   720  0E90                     	;# 
   721  0E91                     	;# 
   722  0E92                     	;# 
   723  0E94                     	;# 
   724  0E95                     	;# 
   725  0EA0                     	;# 
   726  0EA1                     	;# 
   727  0EA2                     	;# 
   728  0EA3                     	;# 
   729  0EA4                     	;# 
   730  0EA5                     	;# 
   731  0F0F                     	;# 
   732  0F10                     	;# 
   733  0F11                     	;# 
   734  0F12                     	;# 
   735  0F13                     	;# 
   736  0F14                     	;# 
   737  0F15                     	;# 
   738  0F16                     	;# 
   739  0F17                     	;# 
   740  0F18                     	;# 
   741  0F19                     	;# 
   742  0F1A                     	;# 
   743  0F1B                     	;# 
   744  0F1C                     	;# 
   745  0F1D                     	;# 
   746  0F1E                     	;# 
   747  0F1F                     	;# 
   748  0F20                     	;# 
   749  0F21                     	;# 
   750  0F22                     	;# 
   751  0F23                     	;# 
   752  0F24                     	;# 
   753  0F25                     	;# 
   754  0F26                     	;# 
   755  0F27                     	;# 
   756  0F28                     	;# 
   757  0F29                     	;# 
   758  0F2A                     	;# 
   759  0F2B                     	;# 
   760  0F2C                     	;# 
   761  0F2D                     	;# 
   762  0F2E                     	;# 
   763  0F2F                     	;# 
   764  0F30                     	;# 
   765  0F31                     	;# 
   766  0F32                     	;# 
   767  0F33                     	;# 
   768  0F34                     	;# 
   769  0F35                     	;# 
   770  0F36                     	;# 
   771  0F37                     	;# 
   772  0FE4                     	;# 
   773  0FE5                     	;# 
   774  0FE6                     	;# 
   775  0FE7                     	;# 
   776  0FE8                     	;# 
   777  0FE9                     	;# 
   778  0FEA                     	;# 
   779  0FEB                     	;# 
   780  0FED                     	;# 
   781  0FEE                     	;# 
   782  0FEF                     	;# 
   783  0000                     	;# 
   784  0001                     	;# 
   785  0002                     	;# 
   786  0003                     	;# 
   787  0004                     	;# 
   788  0005                     	;# 
   789  0006                     	;# 
   790  0007                     	;# 
   791  0008                     	;# 
   792  0009                     	;# 
   793  000A                     	;# 
   794  000B                     	;# 
   795  000C                     	;# 
   796  000E                     	;# 
   797  0010                     	;# 
   798  0011                     	;# 
   799  0012                     	;# 
   800  0013                     	;# 
   801  0014                     	;# 
   802  0015                     	;# 
   803  0015                     	;# 
   804  0016                     	;# 
   805  0016                     	;# 
   806  0017                     	;# 
   807  0018                     	;# 
   808  0019                     	;# 
   809  0019                     	;# 
   810  001A                     	;# 
   811  001B                     	;# 
   812  001C                     	;# 
   813  001D                     	;# 
   814  001E                     	;# 
   815  001F                     	;# 
   816  008C                     	;# 
   817  008E                     	;# 
   818  0090                     	;# 
   819  0091                     	;# 
   820  0092                     	;# 
   821  0093                     	;# 
   822  0094                     	;# 
   823  0097                     	;# 
   824  009B                     	;# 
   825  009B                     	;# 
   826  009C                     	;# 
   827  009D                     	;# 
   828  009E                     	;# 
   829  009F                     	;# 
   830  010C                     	;# 
   831  010E                     	;# 
   832  0111                     	;# 
   833  0112                     	;# 
   834  0113                     	;# 
   835  0114                     	;# 
   836  0115                     	;# 
   837  0116                     	;# 
   838  0117                     	;# 
   839  0118                     	;# 
   840  0119                     	;# 
   841  018C                     	;# 
   842  018E                     	;# 
   843  0199                     	;# 
   844  0199                     	;# 
   845  0199                     	;# 
   846  019A                     	;# 
   847  019A                     	;# 
   848  019A                     	;# 
   849  019B                     	;# 
   850  019B                     	;# 
   851  019B                     	;# 
   852  019B                     	;# 
   853  019B                     	;# 
   854  019C                     	;# 
   855  019C                     	;# 
   856  019C                     	;# 
   857  019D                     	;# 
   858  019D                     	;# 
   859  019D                     	;# 
   860  019E                     	;# 
   861  019E                     	;# 
   862  019E                     	;# 
   863  019F                     	;# 
   864  019F                     	;# 
   865  019F                     	;# 
   866  019F                     	;# 
   867  019F                     	;# 
   868  020C                     	;# 
   869  020E                     	;# 
   870  0211                     	;# 
   871  0211                     	;# 
   872  0212                     	;# 
   873  0212                     	;# 
   874  0213                     	;# 
   875  0213                     	;# 
   876  0214                     	;# 
   877  0214                     	;# 
   878  0215                     	;# 
   879  0215                     	;# 
   880  0215                     	;# 
   881  0215                     	;# 
   882  0216                     	;# 
   883  0216                     	;# 
   884  0217                     	;# 
   885  0217                     	;# 
   886  0219                     	;# 
   887  021A                     	;# 
   888  021B                     	;# 
   889  021C                     	;# 
   890  021D                     	;# 
   891  021D                     	;# 
   892  021E                     	;# 
   893  021F                     	;# 
   894  028C                     	;# 
   895  028E                     	;# 
   896  0291                     	;# 
   897  0291                     	;# 
   898  0292                     	;# 
   899  0293                     	;# 
   900  0294                     	;# 
   901  0295                     	;# 
   902  0295                     	;# 
   903  0296                     	;# 
   904  0297                     	;# 
   905  0298                     	;# 
   906  029F                     	;# 
   907  030C                     	;# 
   908  030E                     	;# 
   909  0311                     	;# 
   910  0311                     	;# 
   911  0312                     	;# 
   912  0313                     	;# 
   913  0314                     	;# 
   914  0315                     	;# 
   915  0315                     	;# 
   916  0316                     	;# 
   917  0317                     	;# 
   918  0318                     	;# 
   919  038C                     	;# 
   920  038E                     	;# 
   921  0391                     	;# 
   922  0392                     	;# 
   923  0393                     	;# 
   924  0397                     	;# 
   925  0398                     	;# 
   926  0399                     	;# 
   927  039A                     	;# 
   928  039C                     	;# 
   929  039D                     	;# 
   930  039E                     	;# 
   931  039F                     	;# 
   932  0411                     	;# 
   933  0411                     	;# 
   934  0412                     	;# 
   935  0413                     	;# 
   936  0414                     	;# 
   937  0415                     	;# 
   938  0416                     	;# 
   939  0417                     	;# 
   940  0418                     	;# 
   941  0418                     	;# 
   942  0419                     	;# 
   943  041A                     	;# 
   944  041B                     	;# 
   945  041C                     	;# 
   946  041D                     	;# 
   947  041E                     	;# 
   948  041F                     	;# 
   949  0498                     	;# 
   950  0498                     	;# 
   951  0499                     	;# 
   952  049A                     	;# 
   953  049B                     	;# 
   954  049B                     	;# 
   955  049C                     	;# 
   956  049D                     	;# 
   957  049E                     	;# 
   958  049F                     	;# 
   959  0617                     	;# 
   960  0618                     	;# 
   961  0619                     	;# 
   962  0619                     	;# 
   963  061A                     	;# 
   964  061B                     	;# 
   965  061C                     	;# 
   966  061C                     	;# 
   967  061F                     	;# 
   968  0691                     	;# 
   969  0692                     	;# 
   970  0693                     	;# 
   971  0694                     	;# 
   972  0695                     	;# 
   973  0696                     	;# 
   974  0697                     	;# 
   975  0698                     	;# 
   976  0699                     	;# 
   977  0711                     	;# 
   978  0712                     	;# 
   979  0713                     	;# 
   980  0714                     	;# 
   981  0715                     	;# 
   982  0716                     	;# 
   983  0717                     	;# 
   984  0718                     	;# 
   985  0719                     	;# 
   986  0891                     	;# 
   987  0891                     	;# 
   988  0891                     	;# 
   989  0891                     	;# 
   990  0891                     	;# 
   991  0891                     	;# 
   992  0892                     	;# 
   993  0892                     	;# 
   994  0892                     	;# 
   995  0893                     	;# 
   996  0893                     	;# 
   997  0893                     	;# 
   998  0893                     	;# 
   999  0893                     	;# 
  1000  0893                     	;# 
  1001  0894                     	;# 
  1002  0894                     	;# 
  1003  0894                     	;# 
  1004  0895                     	;# 
  1005  0895                     	;# 
  1006  0895                     	;# 
  1007  0896                     	;# 
  1008  0896                     	;# 
  1009  0896                     	;# 
  1010  089B                     	;# 
  1011  0911                     	;# 
  1012  0912                     	;# 
  1013  0913                     	;# 
  1014  0914                     	;# 
  1015  0915                     	;# 
  1016  0916                     	;# 
  1017  0918                     	;# 
  1018  0919                     	;# 
  1019  091A                     	;# 
  1020  091B                     	;# 
  1021  091C                     	;# 
  1022  091D                     	;# 
  1023  091E                     	;# 
  1024  091F                     	;# 
  1025  0E0F                     	;# 
  1026  0E10                     	;# 
  1027  0E11                     	;# 
  1028  0E12                     	;# 
  1029  0E13                     	;# 
  1030  0E14                     	;# 
  1031  0E15                     	;# 
  1032  0E16                     	;# 
  1033  0E17                     	;# 
  1034  0E18                     	;# 
  1035  0E19                     	;# 
  1036  0E1A                     	;# 
  1037  0E1B                     	;# 
  1038  0E1C                     	;# 
  1039  0E1D                     	;# 
  1040  0E1E                     	;# 
  1041  0E1F                     	;# 
  1042  0E20                     	;# 
  1043  0E21                     	;# 
  1044  0E22                     	;# 
  1045  0E24                     	;# 
  1046  0E25                     	;# 
  1047  0E28                     	;# 
  1048  0E29                     	;# 
  1049  0E2A                     	;# 
  1050  0E2B                     	;# 
  1051  0E2C                     	;# 
  1052  0E2D                     	;# 
  1053  0E2E                     	;# 
  1054  0E2F                     	;# 
  1055  0E90                     	;# 
  1056  0E91                     	;# 
  1057  0E92                     	;# 
  1058  0E94                     	;# 
  1059  0E95                     	;# 
  1060  0EA0                     	;# 
  1061  0EA1                     	;# 
  1062  0EA2                     	;# 
  1063  0EA3                     	;# 
  1064  0EA4                     	;# 
  1065  0EA5                     	;# 
  1066  0F0F                     	;# 
  1067  0F10                     	;# 
  1068  0F11                     	;# 
  1069  0F12                     	;# 
  1070  0F13                     	;# 
  1071  0F14                     	;# 
  1072  0F15                     	;# 
  1073  0F16                     	;# 
  1074  0F17                     	;# 
  1075  0F18                     	;# 
  1076  0F19                     	;# 
  1077  0F1A                     	;# 
  1078  0F1B                     	;# 
  1079  0F1C                     	;# 
  1080  0F1D                     	;# 
  1081  0F1E                     	;# 
  1082  0F1F                     	;# 
  1083  0F20                     	;# 
  1084  0F21                     	;# 
  1085  0F22                     	;# 
  1086  0F23                     	;# 
  1087  0F24                     	;# 
  1088  0F25                     	;# 
  1089  0F26                     	;# 
  1090  0F27                     	;# 
  1091  0F28                     	;# 
  1092  0F29                     	;# 
  1093  0F2A                     	;# 
  1094  0F2B                     	;# 
  1095  0F2C                     	;# 
  1096  0F2D                     	;# 
  1097  0F2E                     	;# 
  1098  0F2F                     	;# 
  1099  0F30                     	;# 
  1100  0F31                     	;# 
  1101  0F32                     	;# 
  1102  0F33                     	;# 
  1103  0F34                     	;# 
  1104  0F35                     	;# 
  1105  0F36                     	;# 
  1106  0F37                     	;# 
  1107  0FE4                     	;# 
  1108  0FE5                     	;# 
  1109  0FE6                     	;# 
  1110  0FE7                     	;# 
  1111  0FE8                     	;# 
  1112  0FE9                     	;# 
  1113  0FEA                     	;# 
  1114  0FEB                     	;# 
  1115  0FED                     	;# 
  1116  0FEE                     	;# 
  1117  0FEF                     	;# 
  1118  0000                     	;# 
  1119  0001                     	;# 
  1120  0002                     	;# 
  1121  0003                     	;# 
  1122  0004                     	;# 
  1123  0005                     	;# 
  1124  0006                     	;# 
  1125  0007                     	;# 
  1126  0008                     	;# 
  1127  0009                     	;# 
  1128  000A                     	;# 
  1129  000B                     	;# 
  1130  000C                     	;# 
  1131  000E                     	;# 
  1132  0010                     	;# 
  1133  0011                     	;# 
  1134  0012                     	;# 
  1135  0013                     	;# 
  1136  0014                     	;# 
  1137  0015                     	;# 
  1138  0015                     	;# 
  1139  0016                     	;# 
  1140  0016                     	;# 
  1141  0017                     	;# 
  1142  0018                     	;# 
  1143  0019                     	;# 
  1144  0019                     	;# 
  1145  001A                     	;# 
  1146  001B                     	;# 
  1147  001C                     	;# 
  1148  001D                     	;# 
  1149  001E                     	;# 
  1150  001F                     	;# 
  1151  008C                     	;# 
  1152  008E                     	;# 
  1153  0090                     	;# 
  1154  0091                     	;# 
  1155  0092                     	;# 
  1156  0093                     	;# 
  1157  0094                     	;# 
  1158  0097                     	;# 
  1159  009B                     	;# 
  1160  009B                     	;# 
  1161  009C                     	;# 
  1162  009D                     	;# 
  1163  009E                     	;# 
  1164  009F                     	;# 
  1165  010C                     	;# 
  1166  010E                     	;# 
  1167  0111                     	;# 
  1168  0112                     	;# 
  1169  0113                     	;# 
  1170  0114                     	;# 
  1171  0115                     	;# 
  1172  0116                     	;# 
  1173  0117                     	;# 
  1174  0118                     	;# 
  1175  0119                     	;# 
  1176  018C                     	;# 
  1177  018E                     	;# 
  1178  0199                     	;# 
  1179  0199                     	;# 
  1180  0199                     	;# 
  1181  019A                     	;# 
  1182  019A                     	;# 
  1183  019A                     	;# 
  1184  019B                     	;# 
  1185  019B                     	;# 
  1186  019B                     	;# 
  1187  019B                     	;# 
  1188  019B                     	;# 
  1189  019C                     	;# 
  1190  019C                     	;# 
  1191  019C                     	;# 
  1192  019D                     	;# 
  1193  019D                     	;# 
  1194  019D                     	;# 
  1195  019E                     	;# 
  1196  019E                     	;# 
  1197  019E                     	;# 
  1198  019F                     	;# 
  1199  019F                     	;# 
  1200  019F                     	;# 
  1201  019F                     	;# 
  1202  019F                     	;# 
  1203  020C                     	;# 
  1204  020E                     	;# 
  1205  0211                     	;# 
  1206  0211                     	;# 
  1207  0212                     	;# 
  1208  0212                     	;# 
  1209  0213                     	;# 
  1210  0213                     	;# 
  1211  0214                     	;# 
  1212  0214                     	;# 
  1213  0215                     	;# 
  1214  0215                     	;# 
  1215  0215                     	;# 
  1216  0215                     	;# 
  1217  0216                     	;# 
  1218  0216                     	;# 
  1219  0217                     	;# 
  1220  0217                     	;# 
  1221  0219                     	;# 
  1222  021A                     	;# 
  1223  021B                     	;# 
  1224  021C                     	;# 
  1225  021D                     	;# 
  1226  021D                     	;# 
  1227  021E                     	;# 
  1228  021F                     	;# 
  1229  028C                     	;# 
  1230  028E                     	;# 
  1231  0291                     	;# 
  1232  0291                     	;# 
  1233  0292                     	;# 
  1234  0293                     	;# 
  1235  0294                     	;# 
  1236  0295                     	;# 
  1237  0295                     	;# 
  1238  0296                     	;# 
  1239  0297                     	;# 
  1240  0298                     	;# 
  1241  029F                     	;# 
  1242  030C                     	;# 
  1243  030E                     	;# 
  1244  0311                     	;# 
  1245  0311                     	;# 
  1246  0312                     	;# 
  1247  0313                     	;# 
  1248  0314                     	;# 
  1249  0315                     	;# 
  1250  0315                     	;# 
  1251  0316                     	;# 
  1252  0317                     	;# 
  1253  0318                     	;# 
  1254  038C                     	;# 
  1255  038E                     	;# 
  1256  0391                     	;# 
  1257  0392                     	;# 
  1258  0393                     	;# 
  1259  0397                     	;# 
  1260  0398                     	;# 
  1261  0399                     	;# 
  1262  039A                     	;# 
  1263  039C                     	;# 
  1264  039D                     	;# 
  1265  039E                     	;# 
  1266  039F                     	;# 
  1267  0411                     	;# 
  1268  0411                     	;# 
  1269  0412                     	;# 
  1270  0413                     	;# 
  1271  0414                     	;# 
  1272  0415                     	;# 
  1273  0416                     	;# 
  1274  0417                     	;# 
  1275  0418                     	;# 
  1276  0418                     	;# 
  1277  0419                     	;# 
  1278  041A                     	;# 
  1279  041B                     	;# 
  1280  041C                     	;# 
  1281  041D                     	;# 
  1282  041E                     	;# 
  1283  041F                     	;# 
  1284  0498                     	;# 
  1285  0498                     	;# 
  1286  0499                     	;# 
  1287  049A                     	;# 
  1288  049B                     	;# 
  1289  049B                     	;# 
  1290  049C                     	;# 
  1291  049D                     	;# 
  1292  049E                     	;# 
  1293  049F                     	;# 
  1294  0617                     	;# 
  1295  0618                     	;# 
  1296  0619                     	;# 
  1297  0619                     	;# 
  1298  061A                     	;# 
  1299  061B                     	;# 
  1300  061C                     	;# 
  1301  061C                     	;# 
  1302  061F                     	;# 
  1303  0691                     	;# 
  1304  0692                     	;# 
  1305  0693                     	;# 
  1306  0694                     	;# 
  1307  0695                     	;# 
  1308  0696                     	;# 
  1309  0697                     	;# 
  1310  0698                     	;# 
  1311  0699                     	;# 
  1312  0711                     	;# 
  1313  0712                     	;# 
  1314  0713                     	;# 
  1315  0714                     	;# 
  1316  0715                     	;# 
  1317  0716                     	;# 
  1318  0717                     	;# 
  1319  0718                     	;# 
  1320  0719                     	;# 
  1321  0891                     	;# 
  1322  0891                     	;# 
  1323  0891                     	;# 
  1324  0891                     	;# 
  1325  0891                     	;# 
  1326  0891                     	;# 
  1327  0892                     	;# 
  1328  0892                     	;# 
  1329  0892                     	;# 
  1330  0893                     	;# 
  1331  0893                     	;# 
  1332  0893                     	;# 
  1333  0893                     	;# 
  1334  0893                     	;# 
  1335  0893                     	;# 
  1336  0894                     	;# 
  1337  0894                     	;# 
  1338  0894                     	;# 
  1339  0895                     	;# 
  1340  0895                     	;# 
  1341  0895                     	;# 
  1342  0896                     	;# 
  1343  0896                     	;# 
  1344  0896                     	;# 
  1345  089B                     	;# 
  1346  0911                     	;# 
  1347  0912                     	;# 
  1348  0913                     	;# 
  1349  0914                     	;# 
  1350  0915                     	;# 
  1351  0916                     	;# 
  1352  0918                     	;# 
  1353  0919                     	;# 
  1354  091A                     	;# 
  1355  091B                     	;# 
  1356  091C                     	;# 
  1357  091D                     	;# 
  1358  091E                     	;# 
  1359  091F                     	;# 
  1360  0E0F                     	;# 
  1361  0E10                     	;# 
  1362  0E11                     	;# 
  1363  0E12                     	;# 
  1364  0E13                     	;# 
  1365  0E14                     	;# 
  1366  0E15                     	;# 
  1367  0E16                     	;# 
  1368  0E17                     	;# 
  1369  0E18                     	;# 
  1370  0E19                     	;# 
  1371  0E1A                     	;# 
  1372  0E1B                     	;# 
  1373  0E1C                     	;# 
  1374  0E1D                     	;# 
  1375  0E1E                     	;# 
  1376  0E1F                     	;# 
  1377  0E20                     	;# 
  1378  0E21                     	;# 
  1379  0E22                     	;# 
  1380  0E24                     	;# 
  1381  0E25                     	;# 
  1382  0E28                     	;# 
  1383  0E29                     	;# 
  1384  0E2A                     	;# 
  1385  0E2B                     	;# 
  1386  0E2C                     	;# 
  1387  0E2D                     	;# 
  1388  0E2E                     	;# 
  1389  0E2F                     	;# 
  1390  0E90                     	;# 
  1391  0E91                     	;# 
  1392  0E92                     	;# 
  1393  0E94                     	;# 
  1394  0E95                     	;# 
  1395  0EA0                     	;# 
  1396  0EA1                     	;# 
  1397  0EA2                     	;# 
  1398  0EA3                     	;# 
  1399  0EA4                     	;# 
  1400  0EA5                     	;# 
  1401  0F0F                     	;# 
  1402  0F10                     	;# 
  1403  0F11                     	;# 
  1404  0F12                     	;# 
  1405  0F13                     	;# 
  1406  0F14                     	;# 
  1407  0F15                     	;# 
  1408  0F16                     	;# 
  1409  0F17                     	;# 
  1410  0F18                     	;# 
  1411  0F19                     	;# 
  1412  0F1A                     	;# 
  1413  0F1B                     	;# 
  1414  0F1C                     	;# 
  1415  0F1D                     	;# 
  1416  0F1E                     	;# 
  1417  0F1F                     	;# 
  1418  0F20                     	;# 
  1419  0F21                     	;# 
  1420  0F22                     	;# 
  1421  0F23                     	;# 
  1422  0F24                     	;# 
  1423  0F25                     	;# 
  1424  0F26                     	;# 
  1425  0F27                     	;# 
  1426  0F28                     	;# 
  1427  0F29                     	;# 
  1428  0F2A                     	;# 
  1429  0F2B                     	;# 
  1430  0F2C                     	;# 
  1431  0F2D                     	;# 
  1432  0F2E                     	;# 
  1433  0F2F                     	;# 
  1434  0F30                     	;# 
  1435  0F31                     	;# 
  1436  0F32                     	;# 
  1437  0F33                     	;# 
  1438  0F34                     	;# 
  1439  0F35                     	;# 
  1440  0F36                     	;# 
  1441  0F37                     	;# 
  1442  0FE4                     	;# 
  1443  0FE5                     	;# 
  1444  0FE6                     	;# 
  1445  0FE7                     	;# 
  1446  0FE8                     	;# 
  1447  0FE9                     	;# 
  1448  0FEA                     	;# 
  1449  0FEB                     	;# 
  1450  0FED                     	;# 
  1451  0FEE                     	;# 
  1452  0FEF                     	;# 
  1453  0000                     	;# 
  1454  0001                     	;# 
  1455  0002                     	;# 
  1456  0003                     	;# 
  1457  0004                     	;# 
  1458  0005                     	;# 
  1459  0006                     	;# 
  1460  0007                     	;# 
  1461  0008                     	;# 
  1462  0009                     	;# 
  1463  000A                     	;# 
  1464  000B                     	;# 
  1465  000C                     	;# 
  1466  000E                     	;# 
  1467  0010                     	;# 
  1468  0011                     	;# 
  1469  0012                     	;# 
  1470  0013                     	;# 
  1471  0014                     	;# 
  1472  0015                     	;# 
  1473  0015                     	;# 
  1474  0016                     	;# 
  1475  0016                     	;# 
  1476  0017                     	;# 
  1477  0018                     	;# 
  1478  0019                     	;# 
  1479  0019                     	;# 
  1480  001A                     	;# 
  1481  001B                     	;# 
  1482  001C                     	;# 
  1483  001D                     	;# 
  1484  001E                     	;# 
  1485  001F                     	;# 
  1486  008C                     	;# 
  1487  008E                     	;# 
  1488  0090                     	;# 
  1489  0091                     	;# 
  1490  0092                     	;# 
  1491  0093                     	;# 
  1492  0094                     	;# 
  1493  0097                     	;# 
  1494  009B                     	;# 
  1495  009B                     	;# 
  1496  009C                     	;# 
  1497  009D                     	;# 
  1498  009E                     	;# 
  1499  009F                     	;# 
  1500  010C                     	;# 
  1501  010E                     	;# 
  1502  0111                     	;# 
  1503  0112                     	;# 
  1504  0113                     	;# 
  1505  0114                     	;# 
  1506  0115                     	;# 
  1507  0116                     	;# 
  1508  0117                     	;# 
  1509  0118                     	;# 
  1510  0119                     	;# 
  1511  018C                     	;# 
  1512  018E                     	;# 
  1513  0199                     	;# 
  1514  0199                     	;# 
  1515  0199                     	;# 
  1516  019A                     	;# 
  1517  019A                     	;# 
  1518  019A                     	;# 
  1519  019B                     	;# 
  1520  019B                     	;# 
  1521  019B                     	;# 
  1522  019B                     	;# 
  1523  019B                     	;# 
  1524  019C                     	;# 
  1525  019C                     	;# 
  1526  019C                     	;# 
  1527  019D                     	;# 
  1528  019D                     	;# 
  1529  019D                     	;# 
  1530  019E                     	;# 
  1531  019E                     	;# 
  1532  019E                     	;# 
  1533  019F                     	;# 
  1534  019F                     	;# 
  1535  019F                     	;# 
  1536  019F                     	;# 
  1537  019F                     	;# 
  1538  020C                     	;# 
  1539  020E                     	;# 
  1540  0211                     	;# 
  1541  0211                     	;# 
  1542  0212                     	;# 
  1543  0212                     	;# 
  1544  0213                     	;# 
  1545  0213                     	;# 
  1546  0214                     	;# 
  1547  0214                     	;# 
  1548  0215                     	;# 
  1549  0215                     	;# 
  1550  0215                     	;# 
  1551  0215                     	;# 
  1552  0216                     	;# 
  1553  0216                     	;# 
  1554  0217                     	;# 
  1555  0217                     	;# 
  1556  0219                     	;# 
  1557  021A                     	;# 
  1558  021B                     	;# 
  1559  021C                     	;# 
  1560  021D                     	;# 
  1561  021D                     	;# 
  1562  021E                     	;# 
  1563  021F                     	;# 
  1564  028C                     	;# 
  1565  028E                     	;# 
  1566  0291                     	;# 
  1567  0291                     	;# 
  1568  0292                     	;# 
  1569  0293                     	;# 
  1570  0294                     	;# 
  1571  0295                     	;# 
  1572  0295                     	;# 
  1573  0296                     	;# 
  1574  0297                     	;# 
  1575  0298                     	;# 
  1576  029F                     	;# 
  1577  030C                     	;# 
  1578  030E                     	;# 
  1579  0311                     	;# 
  1580  0311                     	;# 
  1581  0312                     	;# 
  1582  0313                     	;# 
  1583  0314                     	;# 
  1584  0315                     	;# 
  1585  0315                     	;# 
  1586  0316                     	;# 
  1587  0317                     	;# 
  1588  0318                     	;# 
  1589  038C                     	;# 
  1590  038E                     	;# 
  1591  0391                     	;# 
  1592  0392                     	;# 
  1593  0393                     	;# 
  1594  0397                     	;# 
  1595  0398                     	;# 
  1596  0399                     	;# 
  1597  039A                     	;# 
  1598  039C                     	;# 
  1599  039D                     	;# 
  1600  039E                     	;# 
  1601  039F                     	;# 
  1602  0411                     	;# 
  1603  0411                     	;# 
  1604  0412                     	;# 
  1605  0413                     	;# 
  1606  0414                     	;# 
  1607  0415                     	;# 
  1608  0416                     	;# 
  1609  0417                     	;# 
  1610  0418                     	;# 
  1611  0418                     	;# 
  1612  0419                     	;# 
  1613  041A                     	;# 
  1614  041B                     	;# 
  1615  041C                     	;# 
  1616  041D                     	;# 
  1617  041E                     	;# 
  1618  041F                     	;# 
  1619  0498                     	;# 
  1620  0498                     	;# 
  1621  0499                     	;# 
  1622  049A                     	;# 
  1623  049B                     	;# 
  1624  049B                     	;# 
  1625  049C                     	;# 
  1626  049D                     	;# 
  1627  049E                     	;# 
  1628  049F                     	;# 
  1629  0617                     	;# 
  1630  0618                     	;# 
  1631  0619                     	;# 
  1632  0619                     	;# 
  1633  061A                     	;# 
  1634  061B                     	;# 
  1635  061C                     	;# 
  1636  061C                     	;# 
  1637  061F                     	;# 
  1638  0691                     	;# 
  1639  0692                     	;# 
  1640  0693                     	;# 
  1641  0694                     	;# 
  1642  0695                     	;# 
  1643  0696                     	;# 
  1644  0697                     	;# 
  1645  0698                     	;# 
  1646  0699                     	;# 
  1647  0711                     	;# 
  1648  0712                     	;# 
  1649  0713                     	;# 
  1650  0714                     	;# 
  1651  0715                     	;# 
  1652  0716                     	;# 
  1653  0717                     	;# 
  1654  0718                     	;# 
  1655  0719                     	;# 
  1656  0891                     	;# 
  1657  0891                     	;# 
  1658  0891                     	;# 
  1659  0891                     	;# 
  1660  0891                     	;# 
  1661  0891                     	;# 
  1662  0892                     	;# 
  1663  0892                     	;# 
  1664  0892                     	;# 
  1665  0893                     	;# 
  1666  0893                     	;# 
  1667  0893                     	;# 
  1668  0893                     	;# 
  1669  0893                     	;# 
  1670  0893                     	;# 
  1671  0894                     	;# 
  1672  0894                     	;# 
  1673  0894                     	;# 
  1674  0895                     	;# 
  1675  0895                     	;# 
  1676  0895                     	;# 
  1677  0896                     	;# 
  1678  0896                     	;# 
  1679  0896                     	;# 
  1680  089B                     	;# 
  1681  0911                     	;# 
  1682  0912                     	;# 
  1683  0913                     	;# 
  1684  0914                     	;# 
  1685  0915                     	;# 
  1686  0916                     	;# 
  1687  0918                     	;# 
  1688  0919                     	;# 
  1689  091A                     	;# 
  1690  091B                     	;# 
  1691  091C                     	;# 
  1692  091D                     	;# 
  1693  091E                     	;# 
  1694  091F                     	;# 
  1695  0E0F                     	;# 
  1696  0E10                     	;# 
  1697  0E11                     	;# 
  1698  0E12                     	;# 
  1699  0E13                     	;# 
  1700  0E14                     	;# 
  1701  0E15                     	;# 
  1702  0E16                     	;# 
  1703  0E17                     	;# 
  1704  0E18                     	;# 
  1705  0E19                     	;# 
  1706  0E1A                     	;# 
  1707  0E1B                     	;# 
  1708  0E1C                     	;# 
  1709  0E1D                     	;# 
  1710  0E1E                     	;# 
  1711  0E1F                     	;# 
  1712  0E20                     	;# 
  1713  0E21                     	;# 
  1714  0E22                     	;# 
  1715  0E24                     	;# 
  1716  0E25                     	;# 
  1717  0E28                     	;# 
  1718  0E29                     	;# 
  1719  0E2A                     	;# 
  1720  0E2B                     	;# 
  1721  0E2C                     	;# 
  1722  0E2D                     	;# 
  1723  0E2E                     	;# 
  1724  0E2F                     	;# 
  1725  0E90                     	;# 
  1726  0E91                     	;# 
  1727  0E92                     	;# 
  1728  0E94                     	;# 
  1729  0E95                     	;# 
  1730  0EA0                     	;# 
  1731  0EA1                     	;# 
  1732  0EA2                     	;# 
  1733  0EA3                     	;# 
  1734  0EA4                     	;# 
  1735  0EA5                     	;# 
  1736  0F0F                     	;# 
  1737  0F10                     	;# 
  1738  0F11                     	;# 
  1739  0F12                     	;# 
  1740  0F13                     	;# 
  1741  0F14                     	;# 
  1742  0F15                     	;# 
  1743  0F16                     	;# 
  1744  0F17                     	;# 
  1745  0F18                     	;# 
  1746  0F19                     	;# 
  1747  0F1A                     	;# 
  1748  0F1B                     	;# 
  1749  0F1C                     	;# 
  1750  0F1D                     	;# 
  1751  0F1E                     	;# 
  1752  0F1F                     	;# 
  1753  0F20                     	;# 
  1754  0F21                     	;# 
  1755  0F22                     	;# 
  1756  0F23                     	;# 
  1757  0F24                     	;# 
  1758  0F25                     	;# 
  1759  0F26                     	;# 
  1760  0F27                     	;# 
  1761  0F28                     	;# 
  1762  0F29                     	;# 
  1763  0F2A                     	;# 
  1764  0F2B                     	;# 
  1765  0F2C                     	;# 
  1766  0F2D                     	;# 
  1767  0F2E                     	;# 
  1768  0F2F                     	;# 
  1769  0F30                     	;# 
  1770  0F31                     	;# 
  1771  0F32                     	;# 
  1772  0F33                     	;# 
  1773  0F34                     	;# 
  1774  0F35                     	;# 
  1775  0F36                     	;# 
  1776  0F37                     	;# 
  1777  0FE4                     	;# 
  1778  0FE5                     	;# 
  1779  0FE6                     	;# 
  1780  0FE7                     	;# 
  1781  0FE8                     	;# 
  1782  0FE9                     	;# 
  1783  0FEA                     	;# 
  1784  0FEB                     	;# 
  1785  0FED                     	;# 
  1786  0FEE                     	;# 
  1787  0FEF                     	;# 
  1788  0000                     	;# 
  1789  0001                     	;# 
  1790  0002                     	;# 
  1791  0003                     	;# 
  1792  0004                     	;# 
  1793  0005                     	;# 
  1794  0006                     	;# 
  1795  0007                     	;# 
  1796  0008                     	;# 
  1797  0009                     	;# 
  1798  000A                     	;# 
  1799  000B                     	;# 
  1800  000C                     	;# 
  1801  000E                     	;# 
  1802  0010                     	;# 
  1803  0011                     	;# 
  1804  0012                     	;# 
  1805  0013                     	;# 
  1806  0014                     	;# 
  1807  0015                     	;# 
  1808  0015                     	;# 
  1809  0016                     	;# 
  1810  0016                     	;# 
  1811  0017                     	;# 
  1812  0018                     	;# 
  1813  0019                     	;# 
  1814  0019                     	;# 
  1815  001A                     	;# 
  1816  001B                     	;# 
  1817  001C                     	;# 
  1818  001D                     	;# 
  1819  001E                     	;# 
  1820  001F                     	;# 
  1821  008C                     	;# 
  1822  008E                     	;# 
  1823  0090                     	;# 
  1824  0091                     	;# 
  1825  0092                     	;# 
  1826  0093                     	;# 
  1827  0094                     	;# 
  1828  0097                     	;# 
  1829  009B                     	;# 
  1830  009B                     	;# 
  1831  009C                     	;# 
  1832  009D                     	;# 
  1833  009E                     	;# 
  1834  009F                     	;# 
  1835  010C                     	;# 
  1836  010E                     	;# 
  1837  0111                     	;# 
  1838  0112                     	;# 
  1839  0113                     	;# 
  1840  0114                     	;# 
  1841  0115                     	;# 
  1842  0116                     	;# 
  1843  0117                     	;# 
  1844  0118                     	;# 
  1845  0119                     	;# 
  1846  018C                     	;# 
  1847  018E                     	;# 
  1848  0199                     	;# 
  1849  0199                     	;# 
  1850  0199                     	;# 
  1851  019A                     	;# 
  1852  019A                     	;# 
  1853  019A                     	;# 
  1854  019B                     	;# 
  1855  019B                     	;# 
  1856  019B                     	;# 
  1857  019B                     	;# 
  1858  019B                     	;# 
  1859  019C                     	;# 
  1860  019C                     	;# 
  1861  019C                     	;# 
  1862  019D                     	;# 
  1863  019D                     	;# 
  1864  019D                     	;# 
  1865  019E                     	;# 
  1866  019E                     	;# 
  1867  019E                     	;# 
  1868  019F                     	;# 
  1869  019F                     	;# 
  1870  019F                     	;# 
  1871  019F                     	;# 
  1872  019F                     	;# 
  1873  020C                     	;# 
  1874  020E                     	;# 
  1875  0211                     	;# 
  1876  0211                     	;# 
  1877  0212                     	;# 
  1878  0212                     	;# 
  1879  0213                     	;# 
  1880  0213                     	;# 
  1881  0214                     	;# 
  1882  0214                     	;# 
  1883  0215                     	;# 
  1884  0215                     	;# 
  1885  0215                     	;# 
  1886  0215                     	;# 
  1887  0216                     	;# 
  1888  0216                     	;# 
  1889  0217                     	;# 
  1890  0217                     	;# 
  1891  0219                     	;# 
  1892  021A                     	;# 
  1893  021B                     	;# 
  1894  021C                     	;# 
  1895  021D                     	;# 
  1896  021D                     	;# 
  1897  021E                     	;# 
  1898  021F                     	;# 
  1899  028C                     	;# 
  1900  028E                     	;# 
  1901  0291                     	;# 
  1902  0291                     	;# 
  1903  0292                     	;# 
  1904  0293                     	;# 
  1905  0294                     	;# 
  1906  0295                     	;# 
  1907  0295                     	;# 
  1908  0296                     	;# 
  1909  0297                     	;# 
  1910  0298                     	;# 
  1911  029F                     	;# 
  1912  030C                     	;# 
  1913  030E                     	;# 
  1914  0311                     	;# 
  1915  0311                     	;# 
  1916  0312                     	;# 
  1917  0313                     	;# 
  1918  0314                     	;# 
  1919  0315                     	;# 
  1920  0315                     	;# 
  1921  0316                     	;# 
  1922  0317                     	;# 
  1923  0318                     	;# 
  1924  038C                     	;# 
  1925  038E                     	;# 
  1926  0391                     	;# 
  1927  0392                     	;# 
  1928  0393                     	;# 
  1929  0397                     	;# 
  1930  0398                     	;# 
  1931  0399                     	;# 
  1932  039A                     	;# 
  1933  039C                     	;# 
  1934  039D                     	;# 
  1935  039E                     	;# 
  1936  039F                     	;# 
  1937  0411                     	;# 
  1938  0411                     	;# 
  1939  0412                     	;# 
  1940  0413                     	;# 
  1941  0414                     	;# 
  1942  0415                     	;# 
  1943  0416                     	;# 
  1944  0417                     	;# 
  1945  0418                     	;# 
  1946  0418                     	;# 
  1947  0419                     	;# 
  1948  041A                     	;# 
  1949  041B                     	;# 
  1950  041C                     	;# 
  1951  041D                     	;# 
  1952  041E                     	;# 
  1953  041F                     	;# 
  1954  0498                     	;# 
  1955  0498                     	;# 
  1956  0499                     	;# 
  1957  049A                     	;# 
  1958  049B                     	;# 
  1959  049B                     	;# 
  1960  049C                     	;# 
  1961  049D                     	;# 
  1962  049E                     	;# 
  1963  049F                     	;# 
  1964  0617                     	;# 
  1965  0618                     	;# 
  1966  0619                     	;# 
  1967  0619                     	;# 
  1968  061A                     	;# 
  1969  061B                     	;# 
  1970  061C                     	;# 
  1971  061C                     	;# 
  1972  061F                     	;# 
  1973  0691                     	;# 
  1974  0692                     	;# 
  1975  0693                     	;# 
  1976  0694                     	;# 
  1977  0695                     	;# 
  1978  0696                     	;# 
  1979  0697                     	;# 
  1980  0698                     	;# 
  1981  0699                     	;# 
  1982  0711                     	;# 
  1983  0712                     	;# 
  1984  0713                     	;# 
  1985  0714                     	;# 
  1986  0715                     	;# 
  1987  0716                     	;# 
  1988  0717                     	;# 
  1989  0718                     	;# 
  1990  0719                     	;# 
  1991  0891                     	;# 
  1992  0891                     	;# 
  1993  0891                     	;# 
  1994  0891                     	;# 
  1995  0891                     	;# 
  1996  0891                     	;# 
  1997  0892                     	;# 
  1998  0892                     	;# 
  1999  0892                     	;# 
  2000  0893                     	;# 
  2001  0893                     	;# 
  2002  0893                     	;# 
  2003  0893                     	;# 
  2004  0893                     	;# 
  2005  0893                     	;# 
  2006  0894                     	;# 
  2007  0894                     	;# 
  2008  0894                     	;# 
  2009  0895                     	;# 
  2010  0895                     	;# 
  2011  0895                     	;# 
  2012  0896                     	;# 
  2013  0896                     	;# 
  2014  0896                     	;# 
  2015  089B                     	;# 
  2016  0911                     	;# 
  2017  0912                     	;# 
  2018  0913                     	;# 
  2019  0914                     	;# 
  2020  0915                     	;# 
  2021  0916                     	;# 
  2022  0918                     	;# 
  2023  0919                     	;# 
  2024  091A                     	;# 
  2025  091B                     	;# 
  2026  091C                     	;# 
  2027  091D                     	;# 
  2028  091E                     	;# 
  2029  091F                     	;# 
  2030  0E0F                     	;# 
  2031  0E10                     	;# 
  2032  0E11                     	;# 
  2033  0E12                     	;# 
  2034  0E13                     	;# 
  2035  0E14                     	;# 
  2036  0E15                     	;# 
  2037  0E16                     	;# 
  2038  0E17                     	;# 
  2039  0E18                     	;# 
  2040  0E19                     	;# 
  2041  0E1A                     	;# 
  2042  0E1B                     	;# 
  2043  0E1C                     	;# 
  2044  0E1D                     	;# 
  2045  0E1E                     	;# 
  2046  0E1F                     	;# 
  2047  0E20                     	;# 
  2048  0E21                     	;# 
  2049  0E22                     	;# 
  2050  0E24                     	;# 
  2051  0E25                     	;# 
  2052  0E28                     	;# 
  2053  0E29                     	;# 
  2054  0E2A                     	;# 
  2055  0E2B                     	;# 
  2056  0E2C                     	;# 
  2057  0E2D                     	;# 
  2058  0E2E                     	;# 
  2059  0E2F                     	;# 
  2060  0E90                     	;# 
  2061  0E91                     	;# 
  2062  0E92                     	;# 
  2063  0E94                     	;# 
  2064  0E95                     	;# 
  2065  0EA0                     	;# 
  2066  0EA1                     	;# 
  2067  0EA2                     	;# 
  2068  0EA3                     	;# 
  2069  0EA4                     	;# 
  2070  0EA5                     	;# 
  2071  0F0F                     	;# 
  2072  0F10                     	;# 
  2073  0F11                     	;# 
  2074  0F12                     	;# 
  2075  0F13                     	;# 
  2076  0F14                     	;# 
  2077  0F15                     	;# 
  2078  0F16                     	;# 
  2079  0F17                     	;# 
  2080  0F18                     	;# 
  2081  0F19                     	;# 
  2082  0F1A                     	;# 
  2083  0F1B                     	;# 
  2084  0F1C                     	;# 
  2085  0F1D                     	;# 
  2086  0F1E                     	;# 
  2087  0F1F                     	;# 
  2088  0F20                     	;# 
  2089  0F21                     	;# 
  2090  0F22                     	;# 
  2091  0F23                     	;# 
  2092  0F24                     	;# 
  2093  0F25                     	;# 
  2094  0F26                     	;# 
  2095  0F27                     	;# 
  2096  0F28                     	;# 
  2097  0F29                     	;# 
  2098  0F2A                     	;# 
  2099  0F2B                     	;# 
  2100  0F2C                     	;# 
  2101  0F2D                     	;# 
  2102  0F2E                     	;# 
  2103  0F2F                     	;# 
  2104  0F30                     	;# 
  2105  0F31                     	;# 
  2106  0F32                     	;# 
  2107  0F33                     	;# 
  2108  0F34                     	;# 
  2109  0F35                     	;# 
  2110  0F36                     	;# 
  2111  0F37                     	;# 
  2112  0FE4                     	;# 
  2113  0FE5                     	;# 
  2114  0FE6                     	;# 
  2115  0FE7                     	;# 
  2116  0FE8                     	;# 
  2117  0FE9                     	;# 
  2118  0FEA                     	;# 
  2119  0FEB                     	;# 
  2120  0FED                     	;# 
  2121  0FEE                     	;# 
  2122  0FEF                     	;# 
  2123  1FE0                     _romArray_absaddr	set	8160
  2124                           
  2125                           	psect	stringtext1
  2126  1000                     __pstringtext1:	
  2127  1000                     _resetRomData:	
  2128  1000  34AA               	retlw	170
  2129  1001  3455               	retlw	85
  2130  1002  346E               	retlw	110
  2131  1003  3463               	retlw	99
  2132  1004  346F               	retlw	111
  2133  1005  346E               	retlw	110
  2134  1006  3466               	retlw	102
  2135  1007  3469               	retlw	105
  2136  1008  3467               	retlw	103
  2137  1009  3475               	retlw	117
  2138  100A  3472               	retlw	114
  2139  100B  3465               	retlw	101
  2140  100C  3464               	retlw	100
  2141  100D  3400               	retlw	0
  2142  100E  3400               	retlw	0
  2143  100F  3400               	retlw	0
  2144  1010  3400               	retlw	0
  2145  1011  3400               	retlw	0
  2146  1012  3400               	retlw	0
  2147  1013                     __end_of_resetRomData:	
  2148                           
  2149                           	psect	stringtext2
  2150  1019                     __pstringtext2:	
  2151  1019                     _n_ADDRESS_P0:	
  2152  1019  34AD               	retlw	173
  2153  101A  3487               	retlw	135
  2154  101B  3466               	retlw	102
  2155  101C  34BC               	retlw	188
  2156  101D  34BB               	retlw	187
  2157  101E                     __end_of_n_ADDRESS_P0:	
  2158                           
  2159                           	psect	stringtext3
  2160  1044                     __pstringtext3:	
  2161  1044                     _n_ADDRESS_MUL:	
  2162  1044  3421               	retlw	33
  2163  1045                     __end_of_n_ADDRESS_MUL:	
  2164  1FE0                     _romArray_absaddr	set	8160
  2165                           
  2166                           	psect	_romArray_text
  2167  1FE0                     __p_romArray_text:	
  2168  1FE0                     _romArray:	
  2169  1FE0  3400               	retlw	0
  2170  1FE1  3400               	retlw	0
  2171  1FE2  3400               	retlw	0
  2172  1FE3  3400               	retlw	0
  2173  1FE4  3400               	retlw	0
  2174  1FE5  3400               	retlw	0
  2175  1FE6  3400               	retlw	0
  2176  1FE7  3400               	retlw	0
  2177  1FE8  3400               	retlw	0
  2178  1FE9  3400               	retlw	0
  2179  1FEA  3400               	retlw	0
  2180  1FEB  3400               	retlw	0
  2181  1FEC  3400               	retlw	0
  2182  1FED  3400               	retlw	0
  2183  1FEE  3400               	retlw	0
  2184  1FEF  3400               	retlw	0
  2185  1FF0  3400               	retlw	0
  2186  1FF1  3400               	retlw	0
  2187  1FF2  3400               	retlw	0
  2188  1FF3  3400               	retlw	0
  2189  1FF4  3400               	retlw	0
  2190  1FF5  3400               	retlw	0
  2191  1FF6  3400               	retlw	0
  2192  1FF7  3400               	retlw	0
  2193  1FF8  3400               	retlw	0
  2194  1FF9  3400               	retlw	0
  2195  1FFA  3400               	retlw	0
  2196  1FFB  3400               	retlw	0
  2197  1FFC  3400               	retlw	0
  2198  1FFD  3400               	retlw	0
  2199  1FFE  3400               	retlw	0
  2200  1FFF  3400               	retlw	0
  2201  2000                     __end_of_romArray:	
  2202  0003                     _STATUSbits	set	3
  2203  0010                     _PIR0bits	set	16
  2204  000E                     _PORTCbits	set	14
  2205  000C                     _PORTAbits	set	12
  2206  000B                     _INTCONbits	set	11
  2207  0097                     _WDTCONbits	set	151
  2208  009E                     _ADCON1bits	set	158
  2209  009C                     _ADRESH	set	156
  2210  009B                     _ADRESL	set	155
  2211  009D                     _ADCON0bits	set	157
  2212  0090                     _PIE0bits	set	144
  2213  008E                     _TRISCbits	set	142
  2214  008C                     _TRISAbits	set	140
  2215  0117                     _FVRCONbits	set	279
  2216  018E                     _ANSELCbits	set	398
  2217  018C                     _ANSELAbits	set	396
  2218  018E                     _ANSELC	set	398
  2219  018C                     _ANSELA	set	396
  2220  020C                     _WPUAbits	set	524
  2221  020E                     _WPUC	set	526
  2222  020C                     _WPUA	set	524
  2223  0211                     _SSP1BUF	set	529
  2224  0214                     _SSP1STATbits	set	532
  2225  0215                     _SSP1CON1bits	set	533
  2226  028E                     _ODCONC	set	654
  2227  028C                     _ODCONA	set	652
  2228  038E                     _INLVLC	set	910
  2229  038C                     _INLVLA	set	908
  2230  0894                     _PMDATH	set	2196
  2231  0893                     _PMDATL	set	2195
  2232  0896                     _PMCON2	set	2198
  2233  0895                     _PMCON1bits	set	2197
  2234  0892                     _PMADRH	set	2194
  2235  0891                     _PMADRL	set	2193
  2236  0895                     _PMCON1	set	2197
  2237  0919                     _OSCCON1bits	set	2329
  2238  0EA0                     _RC0PPSbits	set	3744
  2239  0EA2                     _RC2PPSbits	set	3746
  2240  0EA1                     _RC1PPSbits	set	3745
  2241                           
  2242                           	psect	stringtext4
  2243  1013                     __pstringtext4:	
  2244  1013                     STR_8:	
  2245  1013  3452               	retlw	82	;'R'
  2246  1014  3446               	retlw	70	;'F'
  2247  1015  3450               	retlw	80	;'P'
  2248  1016  3457               	retlw	87	;'W'
  2249  1017  3452               	retlw	82	;'R'
  2250  1018  3400               	retlw	0
  2251                           
  2252                           	psect	stringtext5
  2253  101E                     __pstringtext5:	
  2254  101E                     STR_5:	
  2255  101E  3441               	retlw	65	;'A'
  2256  101F  344E               	retlw	78	;'N'
  2257  1020  3443               	retlw	67	;'C'
  2258  1021  3433               	retlw	51	;'3'
  2259  1022  3400               	retlw	0
  2260                           
  2261                           	psect	stringtext6
  2262  1023                     __pstringtext6:	
  2263  1023                     STR_7:	
  2264  1023  3454               	retlw	84	;'T'
  2265  1024  3445               	retlw	69	;'E'
  2266  1025  344D               	retlw	77	;'M'
  2267  1026  3450               	retlw	80	;'P'
  2268  1027  3400               	retlw	0
  2269                           
  2270                           	psect	stringtext7
  2271  1028                     __pstringtext7:	
  2272  1028                     STR_4:	
  2273  1028  3456               	retlw	86	;'V'
  2274  1029  3442               	retlw	66	;'B'
  2275  102A  3441               	retlw	65	;'A'
  2276  102B  3454               	retlw	84	;'T'
  2277  102C  3400               	retlw	0
  2278                           
  2279                           	psect	stringtext8
  2280  102D                     __pstringtext8:	
  2281  102D                     STR_11:	
  2282  102D  3442               	retlw	66	;'B'
  2283  102E  344F               	retlw	79	;'O'
  2284  102F  344F               	retlw	79	;'O'
  2285  1030  3454               	retlw	84	;'T'
  2286  1031  3400               	retlw	0
  2287                           
  2288                           	psect	stringtext9
  2289  1032                     __pstringtext9:	
  2290  1032                     STR_9:	
  2291  1032  3455               	retlw	85	;'U'
  2292  1033  3457               	retlw	87	;'W'
  2293  1034  3430               	retlw	48	;'0'
  2294  1035  3400               	retlw	0
  2295                           
  2296                           	psect	stringtext10
  2297  1036                     __pstringtext10:	
  2298  1036                     STR_10:	
  2299  1036  3455               	retlw	85	;'U'
  2300  1037  3457               	retlw	87	;'W'
  2301  1038  3432               	retlw	50	;'2'
  2302  1039  3400               	retlw	0
  2303                           
  2304                           	psect	stringtext11
  2305  103A                     __pstringtext11:	
  2306  103A                     STR_3:	
  2307  103A  3444               	retlw	68	;'D'
  2308  103B  3442               	retlw	66	;'B'
  2309  103C  3447               	retlw	71	;'G'
  2310  103D  3400               	retlw	0
  2311                           
  2312                           	psect	stringtext12
  2313  103E                     __pstringtext12:	
  2314  103E                     STR_6:	
  2315  103E  3446               	retlw	70	;'F'
  2316  103F  3456               	retlw	86	;'V'
  2317  1040  3452               	retlw	82	;'R'
  2318  1041  3400               	retlw	0
  2319                           
  2320                           	psect	stringtext13
  2321  1042                     __pstringtext13:	
  2322  1042                     STR_1:	
  2323  1042  342F               	retlw	47	;'/'
  2324  1043  3400               	retlw	0
  2325                           
  2326                           	psect	stringtext14
  2327  0000                     __pstringtext14:	
  2328  1042                     
  2329                           ; #config settings
  2330  0000                     
  2331                           	psect	cinit
  2332  0011                     start_initialization:	
  2333  0011                     __initialization:	
  2334                           
  2335                           ; Clear objects allocated to BANK0
  2336  0011  3059               	movlw	low __pbssBANK0
  2337  0012  0084               	movwf	4
  2338  0013  3000               	movlw	high __pbssBANK0
  2339  0014  0085               	movwf	5
  2340  0015  3016               	movlw	22
  2341  0016  318D  254C  3180   	fcall	clear_ram0
  2342                           
  2343                           ; Clear objects allocated to BANK1
  2344  0019  0021               	movlb	1	; select bank1
  2345  001A  01E4               	clrf	__pbssBANK1& (0+127)
  2346  001B  01E5               	clrf	(__pbssBANK1+1)& (0+127)
  2347  001C  01E6               	clrf	(__pbssBANK1+2)& (0+127)
  2348  001D  01E7               	clrf	(__pbssBANK1+3)& (0+127)
  2349                           
  2350                           ; Clear objects allocated to BANK2
  2351  001E  3020               	movlw	low __pbssBANK2
  2352  001F  0084               	movwf	4
  2353  0020  3001               	movlw	high __pbssBANK2
  2354  0021  0085               	movwf	5
  2355  0022  3041               	movlw	65
  2356  0023  318D  254C         	fcall	clear_ram0
  2357  0025                     end_of_initialization:	
  2358                           ;End of C runtime variable initialization code
  2359                           
  2360  0025                     __end_of__initialization:	
  2361  0025  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  2362  0026  0020               	movlb	0
  2363  0027  3182  2AF2         	ljmp	_main	;jump to C main() function
  2364                           
  2365                           	psect	bssBANK0
  2366  0059                     __pbssBANK0:	
  2367  0059                     _TXPacket:	
  2368  0059                     	ds	1
  2369  005A                     _sleepLoop:	
  2370  005A                     	ds	1
  2371  005B                     _nrf24l01:	
  2372  005B                     	ds	1
  2373  005C                     _romData:	
  2374  005C                     	ds	19
  2375                           
  2376                           	psect	bssBANK1
  2377  00E4                     __pbssBANK1:	
  2378  00E4                     _counter:	
  2379  00E4                     	ds	4
  2380                           
  2381                           	psect	bssBANK2
  2382  0120                     __pbssBANK2:	
  2383  0120                     _romHolder:	
  2384  0120                     	ds	32
  2385  0140                     _RXPacket:	
  2386  0140                     	ds	33
  2387                           
  2388                           	psect	clrtext
  2389  0D4C                     clear_ram0:	
  2390                           ;	Called with FSR0 containing the base address, and
  2391                           ;	WREG with the size to clear
  2392                           
  2393  0D4C  0064               	clrwdt	;clear the watchdog before getting into this loop
  2394  0D4D                     clrloop0:	
  2395  0D4D  0180               	clrf	0	;clear RAM location pointed to by FSR
  2396  0D4E  3101               	addfsr 0,1
  2397  0D4F  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  2398  0D50  2D4D               	goto	clrloop0	;have we reached the end yet?
  2399  0D51  3400               	retlw	0	;all done for this memory range, return
  2400                           
  2401                           	psect	cstackBANK1
  2402  00A0                     __pcstackBANK1:	
  2403  00A0                     loop@rfSetup:	
  2404                           
  2405                           ; 1 bytes @ 0x0
  2406  00A0                     	ds	1
  2407  00A1                     loop@packet:	
  2408                           
  2409                           ; 33 bytes @ 0x1
  2410  00A1                     	ds	33
  2411  00C2                     main@pipe:	
  2412                           
  2413                           ; 1 bytes @ 0x22
  2414  00C2                     	ds	1
  2415  00C3                     main@packet:	
  2416                           
  2417                           ; 33 bytes @ 0x23
  2418  00C3                     	ds	33
  2419                           
  2420                           	psect	cstackCOMMON
  2421  0070                     __pcstackCOMMON:	
  2422  0070                     ?_nrf24l01ISR:	
  2423  0070                     ?_nrf24l01SetRXMode:	
  2424                           ; 1 bytes @ 0x0
  2425                           
  2426  0070                     ?_nrf24l01GetRXPacket:	
  2427                           ; 1 bytes @ 0x0
  2428                           
  2429  0070                     ?_nrf24l01SendPacket:	
  2430                           ; 1 bytes @ 0x0
  2431                           
  2432  0070                     ?_nrf24l01Init:	
  2433                           ; 1 bytes @ 0x0
  2434                           
  2435  0070                     ?_nrf24l01SetTXPipe:	
  2436                           ; 1 bytes @ 0x0
  2437                           
  2438  0070                     ?_nrf24l01SetRXPipe:	
  2439                           ; 1 bytes @ 0x0
  2440                           
  2441  0070                     ?_flashRealod:	
  2442                           ; 1 bytes @ 0x0
  2443                           
  2444  0070                     ?_flashUpdate:	
  2445                           ; 1 bytes @ 0x0
  2446                           
  2447  0070                     ?_nrf24l01CELow:	
  2448                           ; 1 bytes @ 0x0
  2449                           
  2450  0070                     ??_nrf24l01CELow:	
  2451                           ; 1 bytes @ 0x0
  2452                           
  2453  0070                     ?_nrf24l01CEHigh:	
  2454                           ; 1 bytes @ 0x0
  2455                           
  2456  0070                     ??_nrf24l01CEHigh:	
  2457                           ; 1 bytes @ 0x0
  2458                           
  2459  0070                     ?_nrf24l01CSLow:	
  2460                           ; 1 bytes @ 0x0
  2461                           
  2462  0070                     ??_nrf24l01CSLow:	
  2463                           ; 1 bytes @ 0x0
  2464                           
  2465  0070                     ?_nrf24l01CSHigh:	
  2466                           ; 1 bytes @ 0x0
  2467                           
  2468  0070                     ??_nrf24l01CSHigh:	
  2469                           ; 1 bytes @ 0x0
  2470                           
  2471  0070                     ?_nrf24l01InterfaceInit:	
  2472                           ; 1 bytes @ 0x0
  2473                           
  2474  0070                     ?_nrf24l01SPISend:	
  2475                           ; 1 bytes @ 0x0
  2476                           
  2477  0070                     ??_nrf24l01SPISend:	
  2478                           ; 1 bytes @ 0x0
  2479                           
  2480  0070                     ?_nrf24l01SPIStart:	
  2481                           ; 1 bytes @ 0x0
  2482                           
  2483  0070                     ??_nrf24l01SPIStart:	
  2484                           ; 1 bytes @ 0x0
  2485                           
  2486  0070                     ?_nrf24l01SPIEnd:	
  2487                           ; 1 bytes @ 0x0
  2488                           
  2489  0070                     ??_nrf24l01SPIEnd:	
  2490                           ; 1 bytes @ 0x0
  2491                           
  2492  0070                     ?_enableInterrupts:	
  2493                           ; 1 bytes @ 0x0
  2494                           
  2495  0070                     ??_enableInterrupts:	
  2496                           ; 1 bytes @ 0x0
  2497                           
  2498  0070                     ?_exception:	
  2499                           ; 1 bytes @ 0x0
  2500                           
  2501  0070                     ?_ISR:	
  2502                           ; 1 bytes @ 0x0
  2503                           
  2504  0070                     ?_sleep:	
  2505                           ; 1 bytes @ 0x0
  2506                           
  2507  0070                     ?_checkTXPower:	
  2508                           ; 1 bytes @ 0x0
  2509                           
  2510  0070                     ?_loop:	
  2511                           ; 1 bytes @ 0x0
  2512                           
  2513  0070                     ?_nrf24l01GetPipe:	
  2514                           ; 1 bytes @ 0x0
  2515                           
  2516  0070                     ?_main:	
  2517                           ; 1 bytes @ 0x0
  2518                           
  2519  0070                     ?_nrf24l01CheckACK:	
  2520                           ; 1 bytes @ 0x0
  2521                           
  2522  0070                     ?_nrf24l01ReceivePacket:	
  2523                           ; 1 bytes @ 0x0
  2524                           
  2525  0070                     ?_nrf24l01InitRegisters:	
  2526                           ; 1 bytes @ 0x0
  2527                           
  2528  0070                     ?i1_flashWriteByte:	
  2529                           ; 1 bytes @ 0x0
  2530                           
  2531  0070                     ?i1_flashUpdate:	
  2532                           ; 1 bytes @ 0x0
  2533                           
  2534  0070                     ?i1_nrf24l01SetRXMode:	
  2535                           ; 1 bytes @ 0x0
  2536                           
  2537  0070                     ?i1_memset:	
  2538                           ; 1 bytes @ 0x0
  2539                           
  2540  0070                     ?_strcmp:	
  2541                           ; 1 bytes @ 0x0
  2542                           
  2543  0070                     ?___wmul:	
  2544                           ; 2 bytes @ 0x0
  2545                           
  2546  0070                     nrf24l01SPISend@data:	
  2547                           ; 2 bytes @ 0x0
  2548                           
  2549  0070                     enableInterrupts@enable:	
  2550                           ; 1 bytes @ 0x0
  2551                           
  2552  0070                     strcmp@s2:	
  2553                           ; 1 bytes @ 0x0
  2554                           
  2555  0070                     ___wmul@multiplier:	
  2556                           ; 1 bytes @ 0x0
  2557                           
  2558  0070                     i1flashWriteByte@offset:	
  2559                           ; 2 bytes @ 0x0
  2560                           
  2561  0070                     i1memset@p1:	
  2562                           ; 2 bytes @ 0x0
  2563                           
  2564                           
  2565                           ; 2 bytes @ 0x0
  2566  0070                     	ds	1
  2567  0071                     ?i1_nrf24l01Send:	
  2568  0071                     i1nrf24l01Send@data:	
  2569                           ; 1 bytes @ 0x1
  2570                           
  2571                           
  2572                           ; 1 bytes @ 0x1
  2573  0071                     	ds	1
  2574  0072                     ??_strcmp:	
  2575  0072                     ??i1_nrf24l01Send:	
  2576                           ; 1 bytes @ 0x2
  2577                           
  2578  0072                     ___wmul@multiplicand:	
  2579                           ; 1 bytes @ 0x2
  2580                           
  2581  0072                     i1flashWriteByte@data:	
  2582                           ; 2 bytes @ 0x2
  2583                           
  2584  0072                     i1memset@c:	
  2585                           ; 2 bytes @ 0x2
  2586                           
  2587                           
  2588                           ; 2 bytes @ 0x2
  2589  0072                     	ds	1
  2590  0073                     strcmp@r:	
  2591  0073                     i1nrf24l01Send@command:	
  2592                           ; 1 bytes @ 0x3
  2593                           
  2594                           
  2595                           ; 1 bytes @ 0x3
  2596  0073                     	ds	1
  2597  0074                     ??___wmul:	
  2598  0074                     ??i1_flashWriteByte:	
  2599                           ; 1 bytes @ 0x4
  2600                           
  2601  0074                     ??i1_nrf24l01SetRXMode:	
  2602                           ; 1 bytes @ 0x4
  2603                           
  2604  0074                     strcmp@s1:	
  2605                           ; 1 bytes @ 0x4
  2606                           
  2607  0074                     ___wmul@product:	
  2608                           ; 1 bytes @ 0x4
  2609                           
  2610  0074                     i1flashWriteByte@address:	
  2611                           ; 2 bytes @ 0x4
  2612                           
  2613  0074                     i1memset@n:	
  2614                           ; 2 bytes @ 0x4
  2615                           
  2616                           
  2617                           ; 2 bytes @ 0x4
  2618  0074                     	ds	1
  2619  0075                     i1nrf24l01SetRXMode@config:	
  2620                           
  2621                           ; 1 bytes @ 0x5
  2622  0075                     	ds	1
  2623  0076                     ??i1_flashUpdate:	
  2624  0076                     ??i1_memset:	
  2625                           ; 1 bytes @ 0x6
  2626                           
  2627  0076                     i1nrf24l01SetRXMode@rxMode:	
  2628                           ; 1 bytes @ 0x6
  2629                           
  2630  0076                     i1memset@p:	
  2631                           ; 1 bytes @ 0x6
  2632                           
  2633                           
  2634                           ; 2 bytes @ 0x6
  2635  0076                     	ds	1
  2636  0077                     ??_nrf24l01CheckACK:	
  2637                           
  2638                           ; 1 bytes @ 0x7
  2639  0077                     	ds	1
  2640  0078                     ??_nrf24l01ReceivePacket:	
  2641  0078                     i1flashUpdate@i:	
  2642                           ; 1 bytes @ 0x8
  2643                           
  2644                           
  2645                           ; 2 bytes @ 0x8
  2646  0078                     	ds	1
  2647  0079                     nrf24l01ReceivePacket@width:	
  2648                           
  2649                           ; 1 bytes @ 0x9
  2650  0079                     	ds	1
  2651  007A                     ??_exception:	
  2652  007A                     nrf24l01ReceivePacket@i:	
  2653                           ; 1 bytes @ 0xA
  2654                           
  2655                           
  2656                           ; 1 bytes @ 0xA
  2657  007A                     	ds	2
  2658  007C                     exception@exception:	
  2659                           
  2660                           ; 1 bytes @ 0xC
  2661  007C                     	ds	1
  2662  007D                     ??_nrf24l01ISR:	
  2663                           
  2664                           ; 1 bytes @ 0xD
  2665  007D                     	ds	1
  2666  007E                     ??_ISR:	
  2667                           
  2668                           	psect	cstackBANK0
  2669  0020                     __pcstackBANK0:	
  2670                           ; 1 bytes @ 0xE
  2671                           
  2672  0020                     nrf24l01ISR@status:	
  2673                           
  2674                           ; 1 bytes @ 0x0
  2675  0020                     	ds	1
  2676  0021                     ?_strcat:	
  2677  0021                     ??_nrf24l01GetRXPacket:	
  2678                           ; 1 bytes @ 0x1
  2679                           
  2680  0021                     ?_nrf24l01Send:	
  2681                           ; 1 bytes @ 0x1
  2682                           
  2683  0021                     ?_strcpy:	
  2684                           ; 1 bytes @ 0x1
  2685                           
  2686  0021                     ?_flashWriteByte:	
  2687                           ; 1 bytes @ 0x1
  2688                           
  2689  0021                     ??_nrf24l01InterfaceInit:	
  2690                           ; 1 bytes @ 0x1
  2691                           
  2692  0021                     ??_sleep:	
  2693                           ; 1 bytes @ 0x1
  2694                           
  2695  0021                     ?___bmul:	
  2696                           ; 1 bytes @ 0x1
  2697                           
  2698  0021                     ?_memset:	
  2699                           ; 1 bytes @ 0x1
  2700                           
  2701  0021                     ?_strlen:	
  2702                           ; 2 bytes @ 0x1
  2703                           
  2704  0021                     ?_flashReadByte:	
  2705                           ; 2 bytes @ 0x1
  2706                           
  2707  0021                     ?___lmul:	
  2708                           ; 2 bytes @ 0x1
  2709                           
  2710  0021                     ?___lldiv:	
  2711                           ; 4 bytes @ 0x1
  2712                           
  2713  0021                     ?___llmod:	
  2714                           ; 4 bytes @ 0x1
  2715                           
  2716  0021                     nrf24l01Send@data:	
  2717                           ; 4 bytes @ 0x1
  2718                           
  2719  0021                     ___bmul@multiplicand:	
  2720                           ; 1 bytes @ 0x1
  2721                           
  2722  0021                     flashWriteByte@offset:	
  2723                           ; 1 bytes @ 0x1
  2724                           
  2725  0021                     flashReadByte@offset:	
  2726                           ; 2 bytes @ 0x1
  2727                           
  2728  0021                     memset@p1:	
  2729                           ; 2 bytes @ 0x1
  2730                           
  2731  0021                     strcat@from:	
  2732                           ; 2 bytes @ 0x1
  2733                           
  2734  0021                     strcpy@from:	
  2735                           ; 2 bytes @ 0x1
  2736                           
  2737  0021                     ___lmul@multiplier:	
  2738                           ; 2 bytes @ 0x1
  2739                           
  2740  0021                     ___lldiv@divisor:	
  2741                           ; 4 bytes @ 0x1
  2742                           
  2743  0021                     ___llmod@divisor:	
  2744                           ; 4 bytes @ 0x1
  2745                           
  2746                           
  2747                           ; 4 bytes @ 0x1
  2748  0021                     	ds	1
  2749  0022                     ??_nrf24l01Send:	
  2750  0022                     ??___bmul:	
  2751                           ; 1 bytes @ 0x2
  2752                           
  2753                           
  2754                           ; 1 bytes @ 0x2
  2755  0022                     	ds	1
  2756  0023                     ??_strcat:	
  2757  0023                     ??_strlen:	
  2758                           ; 1 bytes @ 0x3
  2759                           
  2760  0023                     ??_strcpy:	
  2761                           ; 1 bytes @ 0x3
  2762                           
  2763  0023                     ??_flashReadByte:	
  2764                           ; 1 bytes @ 0x3
  2765                           
  2766  0023                     nrf24l01Send@command:	
  2767                           ; 1 bytes @ 0x3
  2768                           
  2769  0023                     ___bmul@product:	
  2770                           ; 1 bytes @ 0x3
  2771                           
  2772  0023                     flashWriteByte@data:	
  2773                           ; 1 bytes @ 0x3
  2774                           
  2775  0023                     memset@c:	
  2776                           ; 2 bytes @ 0x3
  2777                           
  2778                           
  2779                           ; 2 bytes @ 0x3
  2780  0023                     	ds	1
  2781  0024                     ??_nrf24l01SetRXMode:	
  2782  0024                     ?_nrf24l01ChangeTXPower:	
  2783                           ; 1 bytes @ 0x4
  2784                           
  2785  0024                     ??_nrf24l01SetRXPipe:	
  2786                           ; 1 bytes @ 0x4
  2787                           
  2788  0024                     ___bmul@multiplier:	
  2789                           ; 1 bytes @ 0x4
  2790                           
  2791  0024                     strcat@cp:	
  2792                           ; 1 bytes @ 0x4
  2793                           
  2794  0024                     strcpy@cp:	
  2795                           ; 1 bytes @ 0x4
  2796                           
  2797  0024                     nrf24l01ChangeTXPower@addPower:	
  2798                           ; 1 bytes @ 0x4
  2799                           
  2800                           
  2801                           ; 2 bytes @ 0x4
  2802  0024                     	ds	1
  2803  0025                     ??_nrf24l01SetTXPipe:	
  2804  0025                     ??_flashWriteByte:	
  2805                           ; 1 bytes @ 0x5
  2806                           
  2807  0025                     nrf24l01SetRXMode@config:	
  2808                           ; 1 bytes @ 0x5
  2809                           
  2810  0025                     strcat@to:	
  2811                           ; 1 bytes @ 0x5
  2812                           
  2813  0025                     strcpy@to:	
  2814                           ; 1 bytes @ 0x5
  2815                           
  2816  0025                     flashWriteByte@address:	
  2817                           ; 1 bytes @ 0x5
  2818                           
  2819  0025                     memset@n:	
  2820                           ; 2 bytes @ 0x5
  2821                           
  2822  0025                     ___lmul@multiplicand:	
  2823                           ; 2 bytes @ 0x5
  2824                           
  2825  0025                     ___lldiv@dividend:	
  2826                           ; 4 bytes @ 0x5
  2827                           
  2828  0025                     ___llmod@dividend:	
  2829                           ; 4 bytes @ 0x5
  2830                           
  2831                           
  2832                           ; 4 bytes @ 0x5
  2833  0025                     	ds	1
  2834  0026                     ??_nrf24l01ChangeTXPower:	
  2835  0026                     nrf24l01SetRXMode@rxMode:	
  2836                           ; 1 bytes @ 0x6
  2837                           
  2838  0026                     nrf24l01SetRXPipe@pipe:	
  2839                           ; 1 bytes @ 0x6
  2840                           
  2841  0026                     flashReadByte@result:	
  2842                           ; 1 bytes @ 0x6
  2843                           
  2844                           
  2845                           ; 2 bytes @ 0x6
  2846  0026                     	ds	1
  2847  0027                     ??_memset:	
  2848  0027                     ??_flashUpdate:	
  2849                           ; 1 bytes @ 0x7
  2850                           
  2851  0027                     nrf24l01ChangeTXPower@rfSetup:	
  2852                           ; 1 bytes @ 0x7
  2853                           
  2854  0027                     nrf24l01SetTXPipe@pipe:	
  2855                           ; 1 bytes @ 0x7
  2856                           
  2857  0027                     nrf24l01SetRXPipe@enRXAddr:	
  2858                           ; 1 bytes @ 0x7
  2859                           
  2860  0027                     strlen@cp:	
  2861                           ; 1 bytes @ 0x7
  2862                           
  2863  0027                     memset@p:	
  2864                           ; 1 bytes @ 0x7
  2865                           
  2866                           
  2867                           ; 2 bytes @ 0x7
  2868  0027                     	ds	1
  2869  0028                     ??_checkTXPower:	
  2870  0028                     ??_nrf24l01InitRegisters:	
  2871                           ; 1 bytes @ 0x8
  2872                           
  2873  0028                     strlen@s:	
  2874                           ; 1 bytes @ 0x8
  2875                           
  2876  0028                     flashReadByte@address:	
  2877                           ; 1 bytes @ 0x8
  2878                           
  2879                           
  2880                           ; 2 bytes @ 0x8
  2881  0028                     	ds	1
  2882  0029                     ??_nrf24l01SendPacket:	
  2883  0029                     ??___lmul:	
  2884                           ; 1 bytes @ 0x9
  2885                           
  2886  0029                     ??___lldiv:	
  2887                           ; 1 bytes @ 0x9
  2888                           
  2889  0029                     ??___llmod:	
  2890                           ; 1 bytes @ 0x9
  2891                           
  2892  0029                     checkTXPower@rxPacket:	
  2893                           ; 1 bytes @ 0x9
  2894                           
  2895  0029                     flashUpdate@i:	
  2896                           ; 1 bytes @ 0x9
  2897                           
  2898  0029                     ___lmul@product:	
  2899                           ; 2 bytes @ 0x9
  2900                           
  2901                           
  2902                           ; 4 bytes @ 0x9
  2903  0029                     	ds	1
  2904  002A                     ??_flashRealod:	
  2905  002A                     nrf24l01InitRegisters@channel:	
  2906                           ; 1 bytes @ 0xA
  2907                           
  2908  002A                     ___llmod@counter:	
  2909                           ; 1 bytes @ 0xA
  2910                           
  2911  002A                     ___lldiv@quotient:	
  2912                           ; 1 bytes @ 0xA
  2913                           
  2914                           
  2915                           ; 4 bytes @ 0xA
  2916  002A                     	ds	1
  2917  002B                     ??_nrf24l01GetPipe:	
  2918  002B                     nrf24l01SendPacket@Packet:	
  2919                           ; 1 bytes @ 0xB
  2920                           
  2921  002B                     nrf24l01InitRegisters@setupAW:	
  2922                           ; 1 bytes @ 0xB
  2923                           
  2924  002B                     flashRealod@i:	
  2925                           ; 1 bytes @ 0xB
  2926                           
  2927                           
  2928                           ; 2 bytes @ 0xB
  2929  002B                     	ds	1
  2930  002C                     nrf24l01SendPacket@i:	
  2931  002C                     nrf24l01InitRegisters@feature:	
  2932                           ; 1 bytes @ 0xC
  2933                           
  2934                           
  2935                           ; 1 bytes @ 0xC
  2936  002C                     	ds	1
  2937  002D                     nrf24l01InitRegisters@rfSetup:	
  2938                           
  2939                           ; 1 bytes @ 0xD
  2940  002D                     	ds	1
  2941  002E                     nrf24l01InitRegisters@status:	
  2942  002E                     ___lldiv@counter:	
  2943                           ; 1 bytes @ 0xE
  2944                           
  2945                           
  2946                           ; 1 bytes @ 0xE
  2947  002E                     	ds	1
  2948  002F                     ?_ultoa:	
  2949  002F                     ?_getADCValue:	
  2950                           ; 1 bytes @ 0xF
  2951                           
  2952  002F                     nrf24l01InitRegisters@enAA:	
  2953                           ; 4 bytes @ 0xF
  2954                           
  2955  002F                     getADCValue@divider:	
  2956                           ; 1 bytes @ 0xF
  2957                           
  2958  002F                     ultoa@val:	
  2959                           ; 4 bytes @ 0xF
  2960                           
  2961                           
  2962                           ; 4 bytes @ 0xF
  2963  002F                     	ds	1
  2964  0030                     nrf24l01InitRegisters@DynPD:	
  2965  0030                     nrf24l01GetPipe@pipe:	
  2966                           ; 1 bytes @ 0x10
  2967                           
  2968                           
  2969                           ; 4 bytes @ 0x10
  2970  0030                     	ds	1
  2971  0031                     nrf24l01InitRegisters@config:	
  2972                           
  2973                           ; 1 bytes @ 0x11
  2974  0031                     	ds	1
  2975  0032                     nrf24l01InitRegisters@i:	
  2976                           
  2977                           ; 2 bytes @ 0x12
  2978  0032                     	ds	1
  2979  0033                     ??_getADCValue:	
  2980  0033                     ultoa@base:	
  2981                           ; 1 bytes @ 0x13
  2982                           
  2983                           
  2984                           ; 2 bytes @ 0x13
  2985  0033                     	ds	1
  2986  0034                     ??_nrf24l01Init:	
  2987  0034                     nrf24l01GetPipe@name:	
  2988                           ; 1 bytes @ 0x14
  2989                           
  2990                           
  2991                           ; 1 bytes @ 0x14
  2992  0034                     	ds	1
  2993  0035                     ??_ultoa:	
  2994  0035                     nrf24l01GetPipe@i:	
  2995                           ; 1 bytes @ 0x15
  2996                           
  2997                           
  2998                           ; 1 bytes @ 0x15
  2999  0035                     	ds	1
  3000  0036                     ultoa@v:	
  3001                           
  3002                           ; 4 bytes @ 0x16
  3003  0036                     	ds	1
  3004  0037                     getADCValue@channel:	
  3005                           
  3006                           ; 1 bytes @ 0x17
  3007  0037                     	ds	1
  3008  0038                     getADCValue@adcLoop:	
  3009                           
  3010                           ; 1 bytes @ 0x18
  3011  0038                     	ds	1
  3012  0039                     getADCValue@adcSum:	
  3013                           
  3014                           ; 4 bytes @ 0x19
  3015  0039                     	ds	1
  3016  003A                     ultoa@c:	
  3017                           
  3018                           ; 1 bytes @ 0x1A
  3019  003A                     	ds	1
  3020  003B                     ultoa@buf:	
  3021                           
  3022                           ; 1 bytes @ 0x1B
  3023  003B                     	ds	2
  3024  003D                     ?_setMessage:	
  3025  003D                     setMessage@topic:	
  3026                           ; 1 bytes @ 0x1D
  3027                           
  3028                           
  3029                           ; 2 bytes @ 0x1D
  3030  003D                     	ds	2
  3031  003F                     setMessage@value:	
  3032                           
  3033                           ; 4 bytes @ 0x1F
  3034  003F                     	ds	4
  3035  0043                     ??_setMessage:	
  3036  0043                     setMessage@tempString:	
  3037                           ; 1 bytes @ 0x23
  3038                           
  3039                           
  3040                           ; 16 bytes @ 0x23
  3041  0043                     	ds	16
  3042  0053                     setMessage@packet:	
  3043                           
  3044                           ; 1 bytes @ 0x33
  3045  0053                     	ds	1
  3046  0054                     ??_loop:	
  3047                           
  3048                           ; 1 bytes @ 0x34
  3049  0054                     	ds	4
  3050  0058                     ??_main:	
  3051                           
  3052                           ; 1 bytes @ 0x38
  3053  0058                     	ds	1
  3054                           
  3055                           	psect	maintext
  3056  02F2                     __pmaintext:	
  3057 ;;
  3058 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  3059 ;;
  3060 ;; *************** function _main *****************
  3061 ;; Defined at:
  3062 ;;		line 170 in file "main.c"
  3063 ;; Parameters:    Size  Location     Type
  3064 ;;		None
  3065 ;; Auto vars:     Size  Location     Type
  3066 ;;  packet         33   35[BANK1 ] struct .
  3067 ;;  pipe            1   34[BANK1 ] unsigned char 
  3068 ;; Return value:  Size  Location     Type
  3069 ;;                  1    wreg      void 
  3070 ;; Registers used:
  3071 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3072 ;; Tracked objects:
  3073 ;;		On entry : B1F/0
  3074 ;;		On exit  : 0/0
  3075 ;;		Unchanged: 0/0
  3076 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3077 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3078 ;;      Locals:         0       0      34       0       0       0       0       0       0       0       0       0       
      +0       0
  3079 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3080 ;;      Totals:         0       1      34       0       0       0       0       0       0       0       0       0       
      +0       0
  3081 ;;Total ram usage:       35 bytes
  3082 ;; Hardware stack levels required when called:   13
  3083 ;; This function calls:
  3084 ;;		_flashRealod
  3085 ;;		_flashUpdate
  3086 ;;		_loop
  3087 ;;		_nrf24l01GetPipe
  3088 ;;		_nrf24l01Init
  3089 ;;		_nrf24l01SendPacket
  3090 ;;		_nrf24l01SetRXPipe
  3091 ;;		_nrf24l01SetTXPipe
  3092 ;;		_setMessage
  3093 ;;		_sleep
  3094 ;;		_strcpy
  3095 ;; This function is called by:
  3096 ;;		Startup code after reset
  3097 ;; This function uses a non-reentrant model
  3098 ;;
  3099                           
  3100                           
  3101                           ;psect for function _main
  3102  02F2                     _main:	
  3103                           
  3104                           ;main.c: 173: ANSELA = 0x00;
  3105                           
  3106                           ;incstack = 0
  3107                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3108  02F2  0023               	movlb	3	; select bank3
  3109  02F3  018C               	clrf	12	;volatile
  3110                           
  3111                           ;main.c: 174: ANSELC = 0x00;
  3112  02F4  018E               	clrf	14	;volatile
  3113                           
  3114                           ;main.c: 176: ODCONA = 0x00;
  3115  02F5  0025               	movlb	5	; select bank5
  3116  02F6  018C               	clrf	12	;volatile
  3117                           
  3118                           ;main.c: 177: ODCONC = 0x00;
  3119  02F7  018E               	clrf	14	;volatile
  3120                           
  3121                           ;main.c: 182: INLVLA = 0x00;
  3122  02F8  0027               	movlb	7	; select bank7
  3123  02F9  018C               	clrf	12	;volatile
  3124                           
  3125                           ;main.c: 183: INLVLC = 0x00;
  3126  02FA  018E               	clrf	14	;volatile
  3127                           
  3128                           ;main.c: 185: WPUA = 0x00;
  3129  02FB  0024               	movlb	4	; select bank4
  3130  02FC  018C               	clrf	12	;volatile
  3131                           
  3132                           ;main.c: 186: WPUC = 0x00;
  3133  02FD  018E               	clrf	14	;volatile
  3134                           
  3135                           ;main.c: 188: TRISCbits.TRISC5 = 0;
  3136  02FE  0021               	movlb	1	; select bank1
  3137  02FF  128E               	bcf	14,5	;volatile
  3138                           
  3139                           ;main.c: 189: TRISCbits.TRISC4 = 0;
  3140  0300  120E               	bcf	14,4	;volatile
  3141                           
  3142                           ;main.c: 191: PORTCbits.RC4 = 0;
  3143  0301  0020               	movlb	0	; select bank0
  3144  0302  120E               	bcf	14,4	;volatile
  3145                           
  3146                           ;main.c: 198: INTCONbits.PEIE = 0;
  3147  0303  130B               	bcf	11,6	;volatile
  3148                           
  3149                           ;main.c: 199: INTCONbits.GIE = 0;
  3150  0304  138B               	bcf	11,7	;volatile
  3151                           
  3152                           ;main.c: 201: OSCCON1bits.NOSC = 0b000;
  3153  0305  308F               	movlw	-113
  3154  0306  0032               	movlb	18	; select bank18
  3155  0307  0599               	andwf	25,f	;volatile
  3156                           
  3157                           ;main.c: 202: OSCCON1bits.NDIV = 0b000;
  3158  0308  30F0               	movlw	-16
  3159  0309  0599               	andwf	25,f	;volatile
  3160                           
  3161                           ;main.c: 204: _delay((unsigned long)((10)*(16000000/4000.0)));
  3162  030A  3034               	movlw	52
  3163  030B  0020               	movlb	0	; select bank0
  3164  030C  00D8               	movwf	??_main
  3165  030D  30F1               	movlw	241
  3166  030E                     u1757:	
  3167  030E  0B89               	decfsz	9,f
  3168  030F  2B0E               	goto	u1757
  3169  0310  0BD8               	decfsz	??_main,f
  3170  0311  2B0E               	goto	u1757
  3171  0312  3200               	nop2
  3172                           
  3173                           ;main.c: 206: flashRealod();
  3174  0313  318E  2684  3182   	fcall	_flashRealod
  3175                           
  3176                           ;main.c: 208: if (romData.check != 0x09){
  3177  0316  3009               	movlw	9
  3178  0317  0020               	movlb	0	; select bank0
  3179  0318  065C               	xorwf	_romData,w
  3180  0319  1903               	btfsc	3,2
  3181  031A  2B2D               	goto	l3195
  3182                           
  3183                           ;main.c: 209: romData.check = 0x09;
  3184  031B  3009               	movlw	9
  3185  031C  00D8               	movwf	??_main
  3186  031D  0858               	movf	??_main,w
  3187  031E  00DC               	movwf	_romData
  3188                           
  3189                           ;main.c: 210: strcpy(romData.name, "UW0");
  3190  031F  3032               	movlw	low (STR_9| (0+32768))
  3191  0320  00A1               	movwf	strcpy@from
  3192  0321  3090               	movlw	high (STR_9| (0+32768))
  3193  0322  00A2               	movwf	strcpy@from+1
  3194  0323  305D               	movlw	(low ((_romData| 0+1)))& (0+255)
  3195  0324  318E  262D  3182   	fcall	_strcpy
  3196                           
  3197                           ;main.c: 211: romData.bootMode = 0x00;
  3198  0327  0020               	movlb	0	; select bank0
  3199  0328  01ED               	clrf	_romData+17
  3200  0329  01EE               	clrf	_romData+18
  3201                           
  3202                           ;main.c: 212: flashUpdate();
  3203  032A  318E  26E6  3182   	fcall	_flashUpdate
  3204  032D                     l3195:	
  3205                           
  3206                           ;main.c: 213: };main.c: 215: strcpy(romData.name, "UW2");
  3207  032D  3036               	movlw	low (STR_10| (0+32768))
  3208  032E  0020               	movlb	0	; select bank0
  3209  032F  00A1               	movwf	strcpy@from
  3210  0330  3090               	movlw	high (STR_10| (0+32768))
  3211  0331  00A2               	movwf	strcpy@from+1
  3212  0332  305D               	movlw	(low ((_romData| 0+1)))& (0+255)
  3213  0333  318E  262D  3182   	fcall	_strcpy
  3214                           
  3215                           ;main.c: 217: flashRealod();
  3216  0336  318E  2684  3182   	fcall	_flashRealod
  3217                           
  3218                           ;main.c: 219: nrf24l01Init();
  3219  0339  318F  277A  3182   	fcall	_nrf24l01Init
  3220                           
  3221                           ;main.c: 221: unsigned char pipe = nrf24l01GetPipe(romData.name);
  3222  033C  305D               	movlw	(low ((_romData| 0+1)))& (0+255)
  3223  033D  3185  254F  3182   	fcall	_nrf24l01GetPipe
  3224  0340  0020               	movlb	0	; select bank0
  3225  0341  00D8               	movwf	??_main
  3226  0342  0858               	movf	??_main,w
  3227  0343  0021               	movlb	1	; select bank1
  3228  0344  00C2               	movwf	main@pipe^(0+128)
  3229                           
  3230                           ;main.c: 222: nrf24l01SetTXPipe(4);
  3231  0345  3004               	movlw	4
  3232  0346  3186  263A  3182   	fcall	_nrf24l01SetTXPipe
  3233                           
  3234                           ;main.c: 223: nrf24l01SetRXPipe(4);
  3235  0349  3004               	movlw	4
  3236  034A  318E  26C5  3182   	fcall	_nrf24l01SetRXPipe
  3237                           
  3238                           ;main.c: 227: ADCON0bits.ADON = 0;
  3239  034D  0021               	movlb	1	; select bank1
  3240  034E  101D               	bcf	29,0	;volatile
  3241                           
  3242                           ;main.c: 230: ANSELAbits.ANSA4 = 1;
  3243  034F  0023               	movlb	3	; select bank3
  3244  0350  160C               	bsf	12,4	;volatile
  3245                           
  3246                           ;main.c: 231: TRISAbits.TRISA4 = 1;
  3247  0351  0021               	movlb	1	; select bank1
  3248  0352  160C               	bsf	12,4	;volatile
  3249                           
  3250                           ;main.c: 232: WPUAbits.WPUA4 = 0;
  3251  0353  0024               	movlb	4	; select bank4
  3252  0354  120C               	bcf	12,4	;volatile
  3253                           
  3254                           ;main.c: 235: ANSELCbits.ANSC3 = 1;
  3255  0355  0023               	movlb	3	; select bank3
  3256  0356  158E               	bsf	14,3	;volatile
  3257                           
  3258                           ;main.c: 236: TRISCbits.TRISC3 = 1;
  3259  0357  0021               	movlb	1	; select bank1
  3260  0358  158E               	bsf	14,3	;volatile
  3261                           
  3262                           ;main.c: 239: FVRCONbits.TSEN = 0;
  3263  0359  0022               	movlb	2	; select bank2
  3264  035A  1297               	bcf	23,5	;volatile
  3265                           
  3266                           ;main.c: 240: FVRCONbits.TSRNG = 0;
  3267  035B  1217               	bcf	23,4	;volatile
  3268                           
  3269                           ;main.c: 241: FVRCONbits.TSEN = 1;
  3270  035C  1697               	bsf	23,5	;volatile
  3271                           
  3272                           ;main.c: 244: FVRCONbits.FVREN = 0;
  3273  035D  1397               	bcf	23,7	;volatile
  3274                           
  3275                           ;main.c: 245: FVRCONbits.ADFVR = 1;
  3276  035E  0817               	movf	23,w	;volatile
  3277  035F  39FC               	andlw	-4
  3278  0360  3801               	iorlw	1
  3279  0361  0097               	movwf	23	;volatile
  3280                           
  3281                           ;main.c: 246: FVRCONbits.FVREN = 1;
  3282  0362  1797               	bsf	23,7	;volatile
  3283                           
  3284                           ;main.c: 248: ADCON1bits.ADCS = 0b111;
  3285  0363  3070               	movlw	112
  3286  0364  0021               	movlb	1	; select bank1
  3287  0365  049E               	iorwf	30,f	;volatile
  3288                           
  3289                           ;main.c: 249: ADCON1bits.ADFM = 1;
  3290  0366  179E               	bsf	30,7	;volatile
  3291                           
  3292                           ;main.c: 250: ADCON1bits.ADNREF = 0b0;
  3293  0367  111E               	bcf	30,2	;volatile
  3294                           
  3295                           ;main.c: 251: ADCON1bits.ADPREF = 0b00;
  3296  0368  30FC               	movlw	-4
  3297  0369  059E               	andwf	30,f	;volatile
  3298                           
  3299                           ;main.c: 253: ADCON0bits.CHS = 3;
  3300  036A  081D               	movf	29,w	;volatile
  3301  036B  3903               	andlw	-253
  3302  036C  380C               	iorlw	12
  3303  036D  009D               	movwf	29	;volatile
  3304                           
  3305                           ;main.c: 254: ADCON0bits.ADON = 1;
  3306  036E  141D               	bsf	29,0	;volatile
  3307                           
  3308                           ;main.c: 259: TRISAbits.TRISA2 = 1;
  3309  036F  150C               	bsf	12,2	;volatile
  3310                           
  3311                           ;main.c: 260: PIE0bits.INTE = 1;
  3312  0370  1410               	bsf	16,0	;volatile
  3313                           
  3314                           ;main.c: 261: INTCONbits.INTEDG = 0;
  3315  0371  100B               	bcf	11,0	;volatile
  3316                           
  3317                           ;main.c: 265: WDTCONbits.WDTPS = 11;
  3318  0372  0817               	movf	23,w	;volatile
  3319  0373  39C1               	andlw	-63
  3320  0374  3816               	iorlw	22
  3321  0375  0097               	movwf	23	;volatile
  3322                           
  3323                           ;main.c: 268: TRISAbits.TRISA5 = 0;
  3324  0376  128C               	bcf	12,5	;volatile
  3325                           
  3326                           ;main.c: 269: PORTAbits.RA5 = 0;
  3327  0377  0020               	movlb	0	; select bank0
  3328  0378  128C               	bcf	12,5	;volatile
  3329                           
  3330                           ;main.c: 272: INTCONbits.PEIE = 1;
  3331  0379  170B               	bsf	11,6	;volatile
  3332                           
  3333                           ;main.c: 273: INTCONbits.GIE = 1;
  3334  037A  178B               	bsf	11,7	;volatile
  3335                           
  3336                           ;main.c: 275: nrf24l01Packet_t packet;;main.c: 277: setMessage(&packet, "BOOT", romData.
      +                          bootMode);
  3337  037B  302D               	movlw	low (STR_11| (0+32768))
  3338  037C  00BD               	movwf	setMessage@topic
  3339  037D  3090               	movlw	high (STR_11| (0+32768))
  3340  037E  00BE               	movwf	setMessage@topic+1
  3341  037F  086D               	movf	_romData+17,w
  3342  0380  00BF               	movwf	setMessage@value
  3343  0381  086E               	movf	_romData+18,w
  3344  0382  00C0               	movwf	setMessage@value+1
  3345  0383  01C1               	clrf	setMessage@value+2
  3346  0384  01C2               	clrf	setMessage@value+3
  3347  0385  30C3               	movlw	(low (main@packet| 0))& (0+255)
  3348  0386  3184  24A8  3182   	fcall	_setMessage
  3349                           
  3350                           ;main.c: 278: packet.packetData.byte = 0;
  3351  0389  0021               	movlb	1	; select bank1
  3352  038A  01C3               	clrf	main@packet^(0+128)
  3353                           
  3354                           ;main.c: 279: packet.packetData.ACKRequest = 0;
  3355  038B  1143               	bcf	main@packet^(0+128),2
  3356                           
  3357                           ;main.c: 280: nrf24l01SendPacket(&packet);
  3358  038C  30C3               	movlw	(low (main@packet| 0))& (0+255)
  3359  038D  3182  2243  3182   	fcall	_nrf24l01SendPacket
  3360                           
  3361                           ;main.c: 281: sleep();
  3362  0390  318D  2576  3182   	fcall	_sleep
  3363  0393                     l3269:	
  3364                           ;main.c: 283: while(1){
  3365                           
  3366                           
  3367                           ;main.c: 284: loop();
  3368  0393  3180  2029  3182   	fcall	_loop
  3369  0396  2B93               	goto	l3269
  3370  0397                     __end_of_main:	
  3371                           ;main.c: 285: };main.c: 287: return;
  3372                           
  3373                           
  3374                           	psect	text1
  3375  0E2D                     __ptext1:	
  3376 ;; *************** function _strcpy *****************
  3377 ;; Defined at:
  3378 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\strcpy.c"
  3379 ;; Parameters:    Size  Location     Type
  3380 ;;  to              1    wreg     PTR unsigned char 
  3381 ;;		 -> romData(19), 
  3382 ;;  from            2    1[BANK0 ] PTR const unsigned char 
  3383 ;;		 -> STR_10(4), STR_9(4), 
  3384 ;; Auto vars:     Size  Location     Type
  3385 ;;  to              1    5[BANK0 ] PTR unsigned char 
  3386 ;;		 -> romData(19), 
  3387 ;;  cp              1    4[BANK0 ] PTR unsigned char 
  3388 ;;		 -> romData(19), 
  3389 ;; Return value:  Size  Location     Type
  3390 ;;                  1    wreg      PTR unsigned char 
  3391 ;; Registers used:
  3392 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath
  3393 ;; Tracked objects:
  3394 ;;		On entry : 0/0
  3395 ;;		On exit  : 0/0
  3396 ;;		Unchanged: 0/0
  3397 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3398 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3399 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3400 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3401 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3402 ;;Total ram usage:        5 bytes
  3403 ;; Hardware stack levels used:    1
  3404 ;; Hardware stack levels required when called:    7
  3405 ;; This function calls:
  3406 ;;		Nothing
  3407 ;; This function is called by:
  3408 ;;		_main
  3409 ;; This function uses a non-reentrant model
  3410 ;;
  3411                           
  3412                           
  3413                           ;psect for function _strcpy
  3414  0E2D                     _strcpy:	
  3415                           
  3416                           ;incstack = 0
  3417                           ; Regs used in _strcpy: [wreg-fsr1h+status,2+status,0+pclath]
  3418                           ;strcpy@to stored from wreg
  3419  0E2D  0020               	movlb	0	; select bank0
  3420  0E2E  00A5               	movwf	strcpy@to
  3421  0E2F  0825               	movf	strcpy@to,w
  3422  0E30  00A3               	movwf	??_strcpy
  3423  0E31  0823               	movf	??_strcpy,w
  3424  0E32  00A4               	movwf	strcpy@cp
  3425  0E33                     l2857:	
  3426  0E33  0824               	movf	strcpy@cp,w
  3427  0E34  0086               	movwf	6
  3428  0E35  0187               	clrf	7
  3429  0E36  0821               	movf	strcpy@from,w
  3430  0E37  0084               	movwf	4
  3431  0E38  0822               	movf	strcpy@from+1,w
  3432  0E39  0085               	movwf	5
  3433  0E3A  0800               	movf	0,w	;code access
  3434  0E3B  3FC0               	movwi [0]fsr1
  3435  0E3C  0889               	movf	9,f
  3436  0E3D  1903               	btfsc	3,2
  3437  0E3E  0008               	return
  3438  0E3F  3001               	movlw	1
  3439  0E40  00A3               	movwf	??_strcpy
  3440  0E41  0823               	movf	??_strcpy,w
  3441  0E42  07A4               	addwf	strcpy@cp,f
  3442  0E43  3001               	movlw	1
  3443  0E44  07A1               	addwf	strcpy@from,f
  3444  0E45  3000               	movlw	0
  3445  0E46  3DA2               	addwfc	strcpy@from+1,f
  3446  0E47  2E33               	goto	l2857
  3447  0E48                     __end_of_strcpy:	
  3448                           ;	Return value of _strcpy is never used
  3449                           
  3450                           
  3451                           	psect	text2
  3452  0F7A                     __ptext2:	
  3453 ;; *************** function _nrf24l01Init *****************
  3454 ;; Defined at:
  3455 ;;		line 444 in file "nrf24l01.c"
  3456 ;; Parameters:    Size  Location     Type
  3457 ;;		None
  3458 ;; Auto vars:     Size  Location     Type
  3459 ;;		None
  3460 ;; Return value:  Size  Location     Type
  3461 ;;                  1    wreg      void 
  3462 ;; Registers used:
  3463 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3464 ;; Tracked objects:
  3465 ;;		On entry : 0/0
  3466 ;;		On exit  : 0/0
  3467 ;;		Unchanged: 0/0
  3468 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3469 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3470 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3471 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3472 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3473 ;;Total ram usage:        2 bytes
  3474 ;; Hardware stack levels used:    1
  3475 ;; Hardware stack levels required when called:   12
  3476 ;; This function calls:
  3477 ;;		_nrf24l01CEHigh
  3478 ;;		_nrf24l01CELow
  3479 ;;		_nrf24l01InitRegisters
  3480 ;;		_nrf24l01InterfaceInit
  3481 ;; This function is called by:
  3482 ;;		_main
  3483 ;; This function uses a non-reentrant model
  3484 ;;
  3485                           
  3486                           
  3487                           ;psect for function _nrf24l01Init
  3488  0F7A                     _nrf24l01Init:	
  3489                           
  3490                           ;nrf24l01.c: 447: nrf24l01InterfaceInit();
  3491                           
  3492                           ;incstack = 0
  3493                           ; Regs used in _nrf24l01Init: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3494  0F7A  318E  2648  318F   	fcall	_nrf24l01InterfaceInit
  3495                           
  3496                           ;nrf24l01.c: 452: nrf24l01CELow();
  3497  0F7D  318D  2543  318F   	fcall	_nrf24l01CELow
  3498                           
  3499                           ;nrf24l01.c: 454: _delay((unsigned long)((50000)*(16000000/4000000.0)));
  3500  0F80  3002               	movlw	2
  3501  0F81  0020               	movlb	0	; select bank0
  3502  0F82  00B5               	movwf	??_nrf24l01Init+1
  3503  0F83  3004               	movlw	4
  3504  0F84  00B4               	movwf	??_nrf24l01Init
  3505  0F85  30BA               	movlw	186
  3506  0F86                     u1767:	
  3507  0F86  0B89               	decfsz	9,f
  3508  0F87  2F86               	goto	u1767
  3509  0F88  0BB4               	decfsz	??_nrf24l01Init,f
  3510  0F89  2F86               	goto	u1767
  3511  0F8A  0BB5               	decfsz	??_nrf24l01Init+1,f
  3512  0F8B  2F86               	goto	u1767
  3513  0F8C  0000               	nop
  3514                           
  3515                           ;nrf24l01.c: 456: nrf24l01InitRegisters();
  3516  0F8D  3181  213D  318F   	fcall	_nrf24l01InitRegisters
  3517                           
  3518                           ;nrf24l01.c: 458: _delay((unsigned long)((50000)*(16000000/4000000.0)));
  3519  0F90  3002               	movlw	2
  3520  0F91  0020               	movlb	0	; select bank0
  3521  0F92  00B5               	movwf	??_nrf24l01Init+1
  3522  0F93  3004               	movlw	4
  3523  0F94  00B4               	movwf	??_nrf24l01Init
  3524  0F95  30BA               	movlw	186
  3525  0F96                     u1777:	
  3526  0F96  0B89               	decfsz	9,f
  3527  0F97  2F96               	goto	u1777
  3528  0F98  0BB4               	decfsz	??_nrf24l01Init,f
  3529  0F99  2F96               	goto	u1777
  3530  0F9A  0BB5               	decfsz	??_nrf24l01Init+1,f
  3531  0F9B  2F96               	goto	u1777
  3532  0F9C  0000               	nop
  3533                           
  3534                           ;nrf24l01.c: 460: nrf24l01CEHigh();
  3535  0F9D  318D  2540         	fcall	_nrf24l01CEHigh
  3536  0F9F  0008               	return
  3537  0FA0                     __end_of_nrf24l01Init:	
  3538                           
  3539                           	psect	text3
  3540  0E48                     __ptext3:	
  3541 ;; *************** function _nrf24l01InterfaceInit *****************
  3542 ;; Defined at:
  3543 ;;		line 28 in file "interface.c"
  3544 ;; Parameters:    Size  Location     Type
  3545 ;;		None
  3546 ;; Auto vars:     Size  Location     Type
  3547 ;;		None
  3548 ;; Return value:  Size  Location     Type
  3549 ;;                  1    wreg      void 
  3550 ;; Registers used:
  3551 ;;		wreg, status,2, status,0
  3552 ;; Tracked objects:
  3553 ;;		On entry : 0/0
  3554 ;;		On exit  : 0/0
  3555 ;;		Unchanged: 0/0
  3556 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3557 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3558 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3559 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3560 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3561 ;;Total ram usage:        0 bytes
  3562 ;; Hardware stack levels used:    1
  3563 ;; Hardware stack levels required when called:    7
  3564 ;; This function calls:
  3565 ;;		Nothing
  3566 ;; This function is called by:
  3567 ;;		_nrf24l01Init
  3568 ;; This function uses a non-reentrant model
  3569 ;;
  3570                           
  3571                           
  3572                           ;psect for function _nrf24l01InterfaceInit
  3573  0E48                     _nrf24l01InterfaceInit:	
  3574                           
  3575                           ;interface.c: 30: TRISAbits.TRISA0 = 0;
  3576                           
  3577                           ;incstack = 0
  3578                           ; Regs used in _nrf24l01InterfaceInit: [wreg+status,2+status,0]
  3579  0E48  0021               	movlb	1	; select bank1
  3580  0E49  100C               	bcf	12,0	;volatile
  3581                           
  3582                           ;interface.c: 31: TRISAbits.TRISA1 = 0;
  3583  0E4A  108C               	bcf	12,1	;volatile
  3584                           
  3585                           ;interface.c: 33: TRISCbits.TRISC1 = 1;
  3586  0E4B  148E               	bsf	14,1	;volatile
  3587                           
  3588                           ;interface.c: 34: TRISCbits.TRISC2 = 0;
  3589  0E4C  110E               	bcf	14,2	;volatile
  3590                           
  3591                           ;interface.c: 35: TRISCbits.TRISC0 = 0;
  3592  0E4D  100E               	bcf	14,0	;volatile
  3593                           
  3594                           ;interface.c: 37: SSP1CON1bits.SSPEN = 0;
  3595  0E4E  0024               	movlb	4	; select bank4
  3596  0E4F  1295               	bcf	21,5	;volatile
  3597                           
  3598                           ;interface.c: 39: RC1PPSbits.RC1PPS = 0b10001;
  3599  0E50  003D               	movlb	29	; select bank29
  3600  0E51  0821               	movf	33,w	;volatile
  3601  0E52  39E0               	andlw	-32
  3602  0E53  3811               	iorlw	17
  3603  0E54  00A1               	movwf	33	;volatile
  3604                           
  3605                           ;interface.c: 40: RC2PPSbits.RC2PPS = 0b11001;
  3606  0E55  0822               	movf	34,w	;volatile
  3607  0E56  39E0               	andlw	-32
  3608  0E57  3819               	iorlw	25
  3609  0E58  00A2               	movwf	34	;volatile
  3610                           
  3611                           ;interface.c: 41: RC0PPSbits.RC0PPS = 0b11000;
  3612  0E59  0820               	movf	32,w	;volatile
  3613  0E5A  39E0               	andlw	-32
  3614  0E5B  3818               	iorlw	24
  3615  0E5C  00A0               	movwf	32	;volatile
  3616                           
  3617                           ;interface.c: 43: SSP1CON1bits.CKP = 0;
  3618  0E5D  0024               	movlb	4	; select bank4
  3619  0E5E  1215               	bcf	21,4	;volatile
  3620                           
  3621                           ;interface.c: 44: SSP1STATbits.CKE = 1;
  3622  0E5F  1714               	bsf	20,6	;volatile
  3623                           
  3624                           ;interface.c: 45: SSP1CON1bits.SSPM = 0b0000;
  3625  0E60  30F0               	movlw	-16
  3626  0E61  0595               	andwf	21,f	;volatile
  3627                           
  3628                           ;interface.c: 47: SSP1CON1bits.SSPEN = 1;
  3629  0E62  1695               	bsf	21,5	;volatile
  3630  0E63  0008               	return
  3631  0E64                     __end_of_nrf24l01InterfaceInit:	
  3632                           
  3633                           	psect	text4
  3634  013D                     __ptext4:	
  3635 ;; *************** function _nrf24l01InitRegisters *****************
  3636 ;; Defined at:
  3637 ;;		line 343 in file "nrf24l01.c"
  3638 ;; Parameters:    Size  Location     Type
  3639 ;;		None
  3640 ;; Auto vars:     Size  Location     Type
  3641 ;;  i               2   18[BANK0 ] unsigned int 
  3642 ;;  config          1   17[BANK0 ] struct .
  3643 ;;  DynPD           1   16[BANK0 ] struct .
  3644 ;;  enAA            1   15[BANK0 ] struct .
  3645 ;;  status          1   14[BANK0 ] struct .
  3646 ;;  rfSetup         1   13[BANK0 ] struct .
  3647 ;;  feature         1   12[BANK0 ] struct .
  3648 ;;  setupAW         1   11[BANK0 ] struct .
  3649 ;;  channel         1   10[BANK0 ] struct .
  3650 ;; Return value:  Size  Location     Type
  3651 ;;                  1    wreg      void 
  3652 ;; Registers used:
  3653 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3654 ;; Tracked objects:
  3655 ;;		On entry : 0/0
  3656 ;;		On exit  : 0/0
  3657 ;;		Unchanged: 0/0
  3658 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3659 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3660 ;;      Locals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3661 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3662 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3663 ;;Total ram usage:       12 bytes
  3664 ;; Hardware stack levels used:    1
  3665 ;; Hardware stack levels required when called:   11
  3666 ;; This function calls:
  3667 ;;		___bmul
  3668 ;;		_nrf24l01SPIEnd
  3669 ;;		_nrf24l01SPISend
  3670 ;;		_nrf24l01SPIStart
  3671 ;;		_nrf24l01Send
  3672 ;;		_nrf24l01SetRXPipe
  3673 ;;		_nrf24l01SetTXPipe
  3674 ;; This function is called by:
  3675 ;;		_nrf24l01Init
  3676 ;; This function uses a non-reentrant model
  3677 ;;
  3678                           
  3679                           
  3680                           ;psect for function _nrf24l01InitRegisters
  3681  013D                     _nrf24l01InitRegisters:	
  3682                           
  3683                           ;nrf24l01.c: 345: n_CONFIG_t config;;nrf24l01.c: 347: config.PWR_UP = 0;
  3684                           
  3685                           ;incstack = 0
  3686                           ; Regs used in _nrf24l01InitRegisters: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3687  013D  0020               	movlb	0	; select bank0
  3688  013E  10B1               	bcf	nrf24l01InitRegisters@config,1
  3689                           
  3690                           ;nrf24l01.c: 348: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x00, config.byte);
  3691  013F  0831               	movf	nrf24l01InitRegisters@config,w
  3692  0140  00A8               	movwf	??_nrf24l01InitRegisters
  3693  0141  0828               	movf	??_nrf24l01InitRegisters,w
  3694  0142  00A1               	movwf	nrf24l01Send@data
  3695  0143  3020               	movlw	32
  3696  0144  3187  27E0  3181   	fcall	_nrf24l01Send
  3697                           
  3698                           ;nrf24l01.c: 350: n_SETUP_AW_t setupAW;;nrf24l01.c: 351: setupAW.byte = 0x00;
  3699  0147  0020               	movlb	0	; select bank0
  3700  0148  01AB               	clrf	nrf24l01InitRegisters@setupAW
  3701                           
  3702                           ;nrf24l01.c: 352: setupAW.AW = 0b11;
  3703  0149  3003               	movlw	3
  3704  014A  04AB               	iorwf	nrf24l01InitRegisters@setupAW,f
  3705                           
  3706                           ;nrf24l01.c: 353: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x02, setupAW.byte);
  3707  014B  082B               	movf	nrf24l01InitRegisters@setupAW,w
  3708  014C  00A8               	movwf	??_nrf24l01InitRegisters
  3709  014D  0828               	movf	??_nrf24l01InitRegisters,w
  3710  014E  00A1               	movwf	nrf24l01Send@data
  3711  014F  3022               	movlw	34
  3712  0150  3187  27E0  3181   	fcall	_nrf24l01Send
  3713                           
  3714                           ;nrf24l01.c: 356: n_RF_CH_t channel;;nrf24l01.c: 357: channel.RF_CH = 2;
  3715  0153  0020               	movlb	0	; select bank0
  3716  0154  082A               	movf	nrf24l01InitRegisters@channel,w
  3717  0155  3980               	andlw	-128
  3718  0156  3802               	iorlw	2
  3719  0157  00AA               	movwf	nrf24l01InitRegisters@channel
  3720                           
  3721                           ;nrf24l01.c: 358: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x05, channel.byte);
  3722  0158  082A               	movf	nrf24l01InitRegisters@channel,w
  3723  0159  00A8               	movwf	??_nrf24l01InitRegisters
  3724  015A  0828               	movf	??_nrf24l01InitRegisters,w
  3725  015B  00A1               	movwf	nrf24l01Send@data
  3726  015C  3025               	movlw	37
  3727  015D  3187  27E0  3181   	fcall	_nrf24l01Send
  3728                           
  3729                           ;nrf24l01.c: 361: n_RF_SETUP_t rfSetup;;nrf24l01.c: 362: rfSetup.byte = 0x00;
  3730  0160  0020               	movlb	0	; select bank0
  3731  0161  01AD               	clrf	nrf24l01InitRegisters@rfSetup
  3732                           
  3733                           ;nrf24l01.c: 363: rfSetup.RF_DR_LOW = 0;
  3734  0162  12AD               	bcf	nrf24l01InitRegisters@rfSetup,5
  3735                           
  3736                           ;nrf24l01.c: 364: rfSetup.RF_DR_HIGH = 1;
  3737  0163  15AD               	bsf	nrf24l01InitRegisters@rfSetup,3
  3738                           
  3739                           ;nrf24l01.c: 365: rfSetup.RF_PWR = 3;
  3740  0164  3006               	movlw	6
  3741  0165  04AD               	iorwf	nrf24l01InitRegisters@rfSetup,f
  3742                           
  3743                           ;nrf24l01.c: 366: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x06, rfSetup.byte);
  3744  0166  082D               	movf	nrf24l01InitRegisters@rfSetup,w
  3745  0167  00A8               	movwf	??_nrf24l01InitRegisters
  3746  0168  0828               	movf	??_nrf24l01InitRegisters,w
  3747  0169  00A1               	movwf	nrf24l01Send@data
  3748  016A  3026               	movlw	38
  3749  016B  3187  27E0  3181   	fcall	_nrf24l01Send
  3750                           
  3751                           ;nrf24l01.c: 369: nrf24l01SetRXPipe(0xFF);
  3752  016E  30FF               	movlw	255
  3753  016F  318E  26C5  3181   	fcall	_nrf24l01SetRXPipe
  3754                           
  3755                           ;nrf24l01.c: 372: n_EN_AA_t enAA;;nrf24l01.c: 373: enAA.byte = nrf24l01Send((unsigned) 0
      +                          b00000000 | (unsigned) 0x01, 0);
  3756  0172  0020               	movlb	0	; select bank0
  3757  0173  01A1               	clrf	nrf24l01Send@data
  3758  0174  3001               	movlw	1
  3759  0175  3187  27E0  3181   	fcall	_nrf24l01Send
  3760  0178  0020               	movlb	0	; select bank0
  3761  0179  00A8               	movwf	??_nrf24l01InitRegisters
  3762  017A  0828               	movf	??_nrf24l01InitRegisters,w
  3763  017B  00AF               	movwf	nrf24l01InitRegisters@enAA
  3764                           
  3765                           ;nrf24l01.c: 374: enAA.ENAA_P0 = 0;
  3766  017C  102F               	bcf	nrf24l01InitRegisters@enAA,0
  3767                           
  3768                           ;nrf24l01.c: 375: enAA.ENAA_P1 = 0;
  3769  017D  10AF               	bcf	nrf24l01InitRegisters@enAA,1
  3770                           
  3771                           ;nrf24l01.c: 376: enAA.ENAA_P2 = 0;
  3772  017E  112F               	bcf	nrf24l01InitRegisters@enAA,2
  3773                           
  3774                           ;nrf24l01.c: 377: enAA.ENAA_P3 = 0;
  3775  017F  11AF               	bcf	nrf24l01InitRegisters@enAA,3
  3776                           
  3777                           ;nrf24l01.c: 378: enAA.ENAA_P4 = 0;
  3778  0180  122F               	bcf	nrf24l01InitRegisters@enAA,4
  3779                           
  3780                           ;nrf24l01.c: 379: enAA.ENAA_P5 = 0;
  3781  0181  12AF               	bcf	nrf24l01InitRegisters@enAA,5
  3782                           
  3783                           ;nrf24l01.c: 380: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x01, enAA.byte);
  3784  0182  082F               	movf	nrf24l01InitRegisters@enAA,w
  3785  0183  00A8               	movwf	??_nrf24l01InitRegisters
  3786  0184  0828               	movf	??_nrf24l01InitRegisters,w
  3787  0185  00A1               	movwf	nrf24l01Send@data
  3788  0186  3021               	movlw	33
  3789  0187  3187  27E0  3181   	fcall	_nrf24l01Send
  3790                           
  3791                           ;nrf24l01.c: 384: n_FEATURE_t feature;;nrf24l01.c: 385: feature.byte = nrf24l01Send((uns
      +                          igned) 0b00000000 | (unsigned) 0x1D, 0);
  3792  018A  0020               	movlb	0	; select bank0
  3793  018B  01A1               	clrf	nrf24l01Send@data
  3794  018C  301D               	movlw	29
  3795  018D  3187  27E0  3181   	fcall	_nrf24l01Send
  3796  0190  0020               	movlb	0	; select bank0
  3797  0191  00A8               	movwf	??_nrf24l01InitRegisters
  3798  0192  0828               	movf	??_nrf24l01InitRegisters,w
  3799  0193  00AC               	movwf	nrf24l01InitRegisters@feature
  3800                           
  3801                           ;nrf24l01.c: 386: feature.EN_DPL = 1;
  3802  0194  152C               	bsf	nrf24l01InitRegisters@feature,2
  3803                           
  3804                           ;nrf24l01.c: 387: feature.EN_DYN_ACK = 1;
  3805  0195  142C               	bsf	nrf24l01InitRegisters@feature,0
  3806                           
  3807                           ;nrf24l01.c: 388: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x1D, feature.byte);
  3808  0196  082C               	movf	nrf24l01InitRegisters@feature,w
  3809  0197  00A8               	movwf	??_nrf24l01InitRegisters
  3810  0198  0828               	movf	??_nrf24l01InitRegisters,w
  3811  0199  00A1               	movwf	nrf24l01Send@data
  3812  019A  303D               	movlw	61
  3813  019B  3187  27E0  3181   	fcall	_nrf24l01Send
  3814                           
  3815                           ;nrf24l01.c: 390: n_DYNPD_t DynPD;;nrf24l01.c: 391: DynPD.byte = nrf24l01Send((unsigned)
      +                           0b00000000 | (unsigned) 0x1C, 0);
  3816  019E  0020               	movlb	0	; select bank0
  3817  019F  01A1               	clrf	nrf24l01Send@data
  3818  01A0  301C               	movlw	28
  3819  01A1  3187  27E0  3181   	fcall	_nrf24l01Send
  3820  01A4  0020               	movlb	0	; select bank0
  3821  01A5  00A8               	movwf	??_nrf24l01InitRegisters
  3822  01A6  0828               	movf	??_nrf24l01InitRegisters,w
  3823  01A7  00B0               	movwf	nrf24l01InitRegisters@DynPD
  3824                           
  3825                           ;nrf24l01.c: 392: DynPD.DPL_P0 = 1;
  3826  01A8  1430               	bsf	nrf24l01InitRegisters@DynPD,0
  3827                           
  3828                           ;nrf24l01.c: 393: DynPD.DPL_P1 = 1;
  3829  01A9  14B0               	bsf	nrf24l01InitRegisters@DynPD,1
  3830                           
  3831                           ;nrf24l01.c: 394: DynPD.DPL_P2 = 1;
  3832  01AA  1530               	bsf	nrf24l01InitRegisters@DynPD,2
  3833                           
  3834                           ;nrf24l01.c: 395: DynPD.DPL_P3 = 1;
  3835  01AB  15B0               	bsf	nrf24l01InitRegisters@DynPD,3
  3836                           
  3837                           ;nrf24l01.c: 396: DynPD.DPL_P4 = 1;
  3838  01AC  1630               	bsf	nrf24l01InitRegisters@DynPD,4
  3839                           
  3840                           ;nrf24l01.c: 397: DynPD.DPL_P5 = 1;
  3841  01AD  16B0               	bsf	nrf24l01InitRegisters@DynPD,5
  3842                           
  3843                           ;nrf24l01.c: 398: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x1C, DynPD.byte);
  3844  01AE  0830               	movf	nrf24l01InitRegisters@DynPD,w
  3845  01AF  00A8               	movwf	??_nrf24l01InitRegisters
  3846  01B0  0828               	movf	??_nrf24l01InitRegisters,w
  3847  01B1  00A1               	movwf	nrf24l01Send@data
  3848  01B2  303C               	movlw	60
  3849  01B3  3187  27E0  3181   	fcall	_nrf24l01Send
  3850                           
  3851                           ;nrf24l01.c: 401: unsigned int i;;nrf24l01.c: 402: for (i = 0; i < 6; i++){
  3852  01B6  0020               	movlb	0	; select bank0
  3853  01B7  01B2               	clrf	nrf24l01InitRegisters@i
  3854  01B8  01B3               	clrf	nrf24l01InitRegisters@i+1
  3855  01B9  3000               	movlw	0
  3856  01BA  0233               	subwf	nrf24l01InitRegisters@i+1,w
  3857  01BB  3006               	movlw	6
  3858  01BC  1903               	skipnz
  3859  01BD  0232               	subwf	nrf24l01InitRegisters@i,w
  3860  01BE  1803               	btfsc	3,0
  3861  01BF  2A19               	goto	l2679
  3862  01C0                     l2665:	
  3863                           
  3864                           ;nrf24l01.c: 404: nrf24l01SPIStart();
  3865  01C0  318D  2561  3181   	fcall	_nrf24l01SPIStart
  3866                           
  3867                           ;nrf24l01.c: 405: nrf24l01SPISend((unsigned) 0b00100000 | ((unsigned) 0x0A + i));
  3868  01C3  0020               	movlb	0	; select bank0
  3869  01C4  0832               	movf	nrf24l01InitRegisters@i,w
  3870  01C5  3E0A               	addlw	10
  3871  01C6  3820               	iorlw	32
  3872  01C7  318D  2569  3181   	fcall	_nrf24l01SPISend
  3873                           
  3874                           ;nrf24l01.c: 407: nrf24l01SPISend(n_ADDRESS_P0[4] + (n_ADDRESS_MUL * i));
  3875  01CA  301D               	movlw	low ((_n_ADDRESS_P0+4)| (0+32768))
  3876  01CB  0084               	movwf	4
  3877  01CC  3090               	movlw	high ((_n_ADDRESS_P0+4)| (0+32768))
  3878  01CD  0085               	movwf	5
  3879  01CE  0800               	movf	0,w	;code access
  3880  01CF  0020               	movlb	0	; select bank0
  3881  01D0  00A8               	movwf	??_nrf24l01InitRegisters
  3882  01D1  0832               	movf	nrf24l01InitRegisters@i,w
  3883  01D2  00A9               	movwf	??_nrf24l01InitRegisters+1
  3884  01D3  0829               	movf	??_nrf24l01InitRegisters+1,w
  3885  01D4  00A1               	movwf	___bmul@multiplicand
  3886  01D5  3044               	movlw	low (_n_ADDRESS_MUL| (0+32768))
  3887  01D6  0084               	movwf	4
  3888  01D7  3090               	movlw	high (_n_ADDRESS_MUL| (0+32768))
  3889  01D8  0085               	movwf	5
  3890  01D9  0800               	movf	0,w	;code access
  3891  01DA  318D  2588  3181   	fcall	___bmul
  3892  01DD  0020               	movlb	0	; select bank0
  3893  01DE  0728               	addwf	??_nrf24l01InitRegisters,w
  3894  01DF  318D  2569  3181   	fcall	_nrf24l01SPISend
  3895                           
  3896                           ;nrf24l01.c: 409: if (i < 2){
  3897  01E2  3000               	movlw	0
  3898  01E3  0020               	movlb	0	; select bank0
  3899  01E4  0233               	subwf	nrf24l01InitRegisters@i+1,w
  3900  01E5  3002               	movlw	2
  3901  01E6  1903               	skipnz
  3902  01E7  0232               	subwf	nrf24l01InitRegisters@i,w
  3903  01E8  1803               	skipnc
  3904  01E9  2A0A               	goto	l2673
  3905                           
  3906                           ;nrf24l01.c: 410: nrf24l01SPISend(n_ADDRESS_P0[3]);
  3907  01EA  301C               	movlw	low ((_n_ADDRESS_P0+3)| (0+32768))
  3908  01EB  0084               	movwf	4
  3909  01EC  3090               	movlw	high ((_n_ADDRESS_P0+3)| (0+32768))
  3910  01ED  0085               	movwf	5
  3911  01EE  0800               	movf	0,w	;code access
  3912  01EF  318D  2569  3181   	fcall	_nrf24l01SPISend
  3913                           
  3914                           ;nrf24l01.c: 411: nrf24l01SPISend(n_ADDRESS_P0[2]);
  3915  01F2  301B               	movlw	low ((_n_ADDRESS_P0+2)| (0+32768))
  3916  01F3  0084               	movwf	4
  3917  01F4  3090               	movlw	high ((_n_ADDRESS_P0+2)| (0+32768))
  3918  01F5  0085               	movwf	5
  3919  01F6  0800               	movf	0,w	;code access
  3920  01F7  318D  2569  3181   	fcall	_nrf24l01SPISend
  3921                           
  3922                           ;nrf24l01.c: 412: nrf24l01SPISend(n_ADDRESS_P0[1]);
  3923  01FA  301A               	movlw	low ((_n_ADDRESS_P0+1)| (0+32768))
  3924  01FB  0084               	movwf	4
  3925  01FC  3090               	movlw	high ((_n_ADDRESS_P0+1)| (0+32768))
  3926  01FD  0085               	movwf	5
  3927  01FE  0800               	movf	0,w	;code access
  3928  01FF  318D  2569  3181   	fcall	_nrf24l01SPISend
  3929                           
  3930                           ;nrf24l01.c: 413: nrf24l01SPISend(n_ADDRESS_P0[0]);
  3931  0202  3019               	movlw	low (_n_ADDRESS_P0| (0+32768))
  3932  0203  0084               	movwf	4
  3933  0204  3090               	movlw	high (_n_ADDRESS_P0| (0+32768))
  3934  0205  0085               	movwf	5
  3935  0206  0800               	movf	0,w	;code access
  3936  0207  318D  2569  3181   	fcall	_nrf24l01SPISend
  3937  020A                     l2673:	
  3938                           
  3939                           ;nrf24l01.c: 414: };nrf24l01.c: 416: nrf24l01SPIEnd();
  3940  020A  318D  2552  3181   	fcall	_nrf24l01SPIEnd
  3941  020D  3001               	movlw	1
  3942  020E  0020               	movlb	0	; select bank0
  3943  020F  07B2               	addwf	nrf24l01InitRegisters@i,f
  3944  0210  3000               	movlw	0
  3945  0211  3DB3               	addwfc	nrf24l01InitRegisters@i+1,f
  3946  0212  3000               	movlw	0
  3947  0213  0233               	subwf	nrf24l01InitRegisters@i+1,w
  3948  0214  3006               	movlw	6
  3949  0215  1903               	skipnz
  3950  0216  0232               	subwf	nrf24l01InitRegisters@i,w
  3951  0217  1C03               	skipc
  3952  0218  29C0               	goto	l2665
  3953  0219                     l2679:	
  3954                           
  3955                           ;nrf24l01.c: 417: };nrf24l01.c: 419: nrf24l01SetTXPipe(0);
  3956  0219  3000               	movlw	0
  3957  021A  3186  263A  3181   	fcall	_nrf24l01SetTXPipe
  3958                           
  3959                           ;nrf24l01.c: 423: n_STATUS_t status;;nrf24l01.c: 424: status.byte = 0x00;
  3960  021D  0020               	movlb	0	; select bank0
  3961  021E  01AE               	clrf	nrf24l01InitRegisters@status
  3962                           
  3963                           ;nrf24l01.c: 425: status.RX_DR = 1;
  3964  021F  172E               	bsf	nrf24l01InitRegisters@status,6
  3965                           
  3966                           ;nrf24l01.c: 426: status.TX_DS = 1;
  3967  0220  16AE               	bsf	nrf24l01InitRegisters@status,5
  3968                           
  3969                           ;nrf24l01.c: 427: status.MAX_RT = 1;
  3970  0221  162E               	bsf	nrf24l01InitRegisters@status,4
  3971                           
  3972                           ;nrf24l01.c: 428: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x07, status.byte);
  3973  0222  082E               	movf	nrf24l01InitRegisters@status,w
  3974  0223  00A8               	movwf	??_nrf24l01InitRegisters
  3975  0224  0828               	movf	??_nrf24l01InitRegisters,w
  3976  0225  00A1               	movwf	nrf24l01Send@data
  3977  0226  3027               	movlw	39
  3978  0227  3187  27E0  3181   	fcall	_nrf24l01Send
  3979                           
  3980                           ;nrf24l01.c: 431: nrf24l01Send((unsigned) 0b11100001, 0);
  3981  022A  0020               	movlb	0	; select bank0
  3982  022B  01A1               	clrf	nrf24l01Send@data
  3983  022C  30E1               	movlw	225
  3984  022D  3187  27E0  3181   	fcall	_nrf24l01Send
  3985                           
  3986                           ;nrf24l01.c: 432: nrf24l01Send((unsigned) 0b11100010, 0);
  3987  0230  0020               	movlb	0	; select bank0
  3988  0231  01A1               	clrf	nrf24l01Send@data
  3989  0232  30E2               	movlw	226
  3990  0233  3187  27E0  3181   	fcall	_nrf24l01Send
  3991                           
  3992                           ;nrf24l01.c: 435: config.PRIM_RX = 1;
  3993  0236  0020               	movlb	0	; select bank0
  3994  0237  1431               	bsf	nrf24l01InitRegisters@config,0
  3995                           
  3996                           ;nrf24l01.c: 436: config.EN_CRC = 1;
  3997  0238  15B1               	bsf	nrf24l01InitRegisters@config,3
  3998                           
  3999                           ;nrf24l01.c: 437: config.CRCO = 1;
  4000  0239  1531               	bsf	nrf24l01InitRegisters@config,2
  4001                           
  4002                           ;nrf24l01.c: 438: config.PWR_UP = 1;
  4003  023A  14B1               	bsf	nrf24l01InitRegisters@config,1
  4004                           
  4005                           ;nrf24l01.c: 439: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x00, config.byte);
  4006  023B  0831               	movf	nrf24l01InitRegisters@config,w
  4007  023C  00A8               	movwf	??_nrf24l01InitRegisters
  4008  023D  0828               	movf	??_nrf24l01InitRegisters,w
  4009  023E  00A1               	movwf	nrf24l01Send@data
  4010  023F  3020               	movlw	32
  4011  0240  3187  27E0         	fcall	_nrf24l01Send
  4012  0242  0008               	return
  4013  0243                     __end_of_nrf24l01InitRegisters:	
  4014                           
  4015                           	psect	text5
  4016  063A                     __ptext5:	
  4017 ;; *************** function _nrf24l01SetTXPipe *****************
  4018 ;; Defined at:
  4019 ;;		line 309 in file "nrf24l01.c"
  4020 ;; Parameters:    Size  Location     Type
  4021 ;;  pipe            1    wreg     unsigned char 
  4022 ;; Auto vars:     Size  Location     Type
  4023 ;;  pipe            1    7[BANK0 ] unsigned char 
  4024 ;; Return value:  Size  Location     Type
  4025 ;;                  1    wreg      void 
  4026 ;; Registers used:
  4027 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4028 ;; Tracked objects:
  4029 ;;		On entry : 0/0
  4030 ;;		On exit  : 0/0
  4031 ;;		Unchanged: 0/0
  4032 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4033 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4034 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4035 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4036 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4037 ;;Total ram usage:        3 bytes
  4038 ;; Hardware stack levels used:    1
  4039 ;; Hardware stack levels required when called:    9
  4040 ;; This function calls:
  4041 ;;		___bmul
  4042 ;;		_nrf24l01SPIEnd
  4043 ;;		_nrf24l01SPISend
  4044 ;;		_nrf24l01SPIStart
  4045 ;; This function is called by:
  4046 ;;		_main
  4047 ;;		_nrf24l01InitRegisters
  4048 ;;		_nrf24l01SendACK
  4049 ;; This function uses a non-reentrant model
  4050 ;;
  4051                           
  4052                           
  4053                           ;psect for function _nrf24l01SetTXPipe
  4054  063A                     _nrf24l01SetTXPipe:	
  4055                           
  4056                           ;incstack = 0
  4057                           ; Regs used in _nrf24l01SetTXPipe: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4058                           ;nrf24l01SetTXPipe@pipe stored from wreg
  4059  063A  0020               	movlb	0	; select bank0
  4060  063B  00A7               	movwf	nrf24l01SetTXPipe@pipe
  4061                           
  4062                           ;nrf24l01.c: 312: nrf24l01SPIStart();
  4063  063C  318D  2561  3186   	fcall	_nrf24l01SPIStart
  4064                           
  4065                           ;nrf24l01.c: 313: nrf24l01SPISend((unsigned) 0b00100000 | (unsigned) 0x10);
  4066  063F  3030               	movlw	48
  4067  0640  318D  2569  3186   	fcall	_nrf24l01SPISend
  4068                           
  4069                           ;nrf24l01.c: 314: nrf24l01SPISend(n_ADDRESS_P0[4] + (unsigned) (pipe * n_ADDRESS_MUL));
  4070  0643  301D               	movlw	low ((_n_ADDRESS_P0+4)| (0+32768))
  4071  0644  0084               	movwf	4
  4072  0645  3090               	movlw	high ((_n_ADDRESS_P0+4)| (0+32768))
  4073  0646  0085               	movwf	5
  4074  0647  0800               	movf	0,w	;code access
  4075  0648  0020               	movlb	0	; select bank0
  4076  0649  00A5               	movwf	??_nrf24l01SetTXPipe
  4077  064A  3044               	movlw	low (_n_ADDRESS_MUL| (0+32768))
  4078  064B  0084               	movwf	4
  4079  064C  3090               	movlw	high (_n_ADDRESS_MUL| (0+32768))
  4080  064D  0085               	movwf	5
  4081  064E  0800               	movf	0,w	;code access
  4082  064F  00A6               	movwf	??_nrf24l01SetTXPipe+1
  4083  0650  0826               	movf	??_nrf24l01SetTXPipe+1,w
  4084  0651  00A1               	movwf	___bmul@multiplicand
  4085  0652  0827               	movf	nrf24l01SetTXPipe@pipe,w
  4086  0653  318D  2588  3186   	fcall	___bmul
  4087  0656  0020               	movlb	0	; select bank0
  4088  0657  0725               	addwf	??_nrf24l01SetTXPipe,w
  4089  0658  318D  2569  3186   	fcall	_nrf24l01SPISend
  4090                           
  4091                           ;nrf24l01.c: 315: nrf24l01SPISend(n_ADDRESS_P0[3]);
  4092  065B  301C               	movlw	low ((_n_ADDRESS_P0+3)| (0+32768))
  4093  065C  0084               	movwf	4
  4094  065D  3090               	movlw	high ((_n_ADDRESS_P0+3)| (0+32768))
  4095  065E  0085               	movwf	5
  4096  065F  0800               	movf	0,w	;code access
  4097  0660  318D  2569  3186   	fcall	_nrf24l01SPISend
  4098                           
  4099                           ;nrf24l01.c: 316: nrf24l01SPISend(n_ADDRESS_P0[2]);
  4100  0663  301B               	movlw	low ((_n_ADDRESS_P0+2)| (0+32768))
  4101  0664  0084               	movwf	4
  4102  0665  3090               	movlw	high ((_n_ADDRESS_P0+2)| (0+32768))
  4103  0666  0085               	movwf	5
  4104  0667  0800               	movf	0,w	;code access
  4105  0668  318D  2569  3186   	fcall	_nrf24l01SPISend
  4106                           
  4107                           ;nrf24l01.c: 317: nrf24l01SPISend(n_ADDRESS_P0[1]);
  4108  066B  301A               	movlw	low ((_n_ADDRESS_P0+1)| (0+32768))
  4109  066C  0084               	movwf	4
  4110  066D  3090               	movlw	high ((_n_ADDRESS_P0+1)| (0+32768))
  4111  066E  0085               	movwf	5
  4112  066F  0800               	movf	0,w	;code access
  4113  0670  318D  2569  3186   	fcall	_nrf24l01SPISend
  4114                           
  4115                           ;nrf24l01.c: 318: nrf24l01SPISend(n_ADDRESS_P0[0]);
  4116  0673  3019               	movlw	low (_n_ADDRESS_P0| (0+32768))
  4117  0674  0084               	movwf	4
  4118  0675  3090               	movlw	high (_n_ADDRESS_P0| (0+32768))
  4119  0676  0085               	movwf	5
  4120  0677  0800               	movf	0,w	;code access
  4121  0678  318D  2569  3186   	fcall	_nrf24l01SPISend
  4122                           
  4123                           ;nrf24l01.c: 319: nrf24l01SPIEnd();
  4124  067B  318D  2552         	fcall	_nrf24l01SPIEnd
  4125  067D  0008               	return
  4126  067E                     __end_of_nrf24l01SetTXPipe:	
  4127                           
  4128                           	psect	text6
  4129  0D88                     __ptext6:	
  4130 ;; *************** function ___bmul *****************
  4131 ;; Defined at:
  4132 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\Umul8.c"
  4133 ;; Parameters:    Size  Location     Type
  4134 ;;  multiplier      1    wreg     unsigned char 
  4135 ;;  multiplicand    1    1[BANK0 ] unsigned char 
  4136 ;; Auto vars:     Size  Location     Type
  4137 ;;  multiplier      1    4[BANK0 ] unsigned char 
  4138 ;;  product         1    3[BANK0 ] unsigned char 
  4139 ;; Return value:  Size  Location     Type
  4140 ;;                  1    wreg      unsigned char 
  4141 ;; Registers used:
  4142 ;;		wreg, status,2, status,0
  4143 ;; Tracked objects:
  4144 ;;		On entry : 0/0
  4145 ;;		On exit  : 0/0
  4146 ;;		Unchanged: 0/0
  4147 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4148 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4149 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4150 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4151 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4152 ;;Total ram usage:        4 bytes
  4153 ;; Hardware stack levels used:    1
  4154 ;; Hardware stack levels required when called:    7
  4155 ;; This function calls:
  4156 ;;		Nothing
  4157 ;; This function is called by:
  4158 ;;		_nrf24l01SetTXPipe
  4159 ;;		_nrf24l01InitRegisters
  4160 ;; This function uses a non-reentrant model
  4161 ;;
  4162                           
  4163                           
  4164                           ;psect for function ___bmul
  4165  0D88                     ___bmul:	
  4166                           
  4167                           ;incstack = 0
  4168                           ; Regs used in ___bmul: [wreg+status,2+status,0]
  4169                           ;___bmul@multiplier stored from wreg
  4170  0D88  0020               	movlb	0	; select bank0
  4171  0D89  00A4               	movwf	___bmul@multiplier
  4172  0D8A  01A3               	clrf	___bmul@product
  4173  0D8B                     l2019:	
  4174  0D8B  1C24               	btfss	___bmul@multiplier,0
  4175  0D8C  2D91               	goto	l2023
  4176  0D8D  0821               	movf	___bmul@multiplicand,w
  4177  0D8E  00A2               	movwf	??___bmul
  4178  0D8F  0822               	movf	??___bmul,w
  4179  0D90  07A3               	addwf	___bmul@product,f
  4180  0D91                     l2023:	
  4181  0D91  1003               	clrc
  4182  0D92  0DA1               	rlf	___bmul@multiplicand,f
  4183  0D93  1003               	clrc
  4184  0D94  0CA4               	rrf	___bmul@multiplier,f
  4185  0D95  0824               	movf	___bmul@multiplier,w
  4186  0D96  1D03               	btfss	3,2
  4187  0D97  2D8B               	goto	l2019
  4188  0D98  0823               	movf	___bmul@product,w
  4189  0D99  0008               	return
  4190  0D9A                     __end_of___bmul:	
  4191                           
  4192                           	psect	text7
  4193  0EC5                     __ptext7:	
  4194 ;; *************** function _nrf24l01SetRXPipe *****************
  4195 ;; Defined at:
  4196 ;;		line 322 in file "nrf24l01.c"
  4197 ;; Parameters:    Size  Location     Type
  4198 ;;  pipe            1    wreg     unsigned char 
  4199 ;; Auto vars:     Size  Location     Type
  4200 ;;  pipe            1    6[BANK0 ] unsigned char 
  4201 ;;  enRXAddr        1    7[BANK0 ] struct .
  4202 ;; Return value:  Size  Location     Type
  4203 ;;                  1    wreg      void 
  4204 ;; Registers used:
  4205 ;;		wreg, status,2, status,0, pclath, cstack
  4206 ;; Tracked objects:
  4207 ;;		On entry : 0/0
  4208 ;;		On exit  : 0/0
  4209 ;;		Unchanged: 0/0
  4210 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4211 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4212 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4213 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4214 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4215 ;;Total ram usage:        4 bytes
  4216 ;; Hardware stack levels used:    1
  4217 ;; Hardware stack levels required when called:   10
  4218 ;; This function calls:
  4219 ;;		_nrf24l01Send
  4220 ;; This function is called by:
  4221 ;;		_main
  4222 ;;		_nrf24l01InitRegisters
  4223 ;; This function uses a non-reentrant model
  4224 ;;
  4225                           
  4226                           
  4227                           ;psect for function _nrf24l01SetRXPipe
  4228  0EC5                     _nrf24l01SetRXPipe:	
  4229                           
  4230                           ;incstack = 0
  4231                           ; Regs used in _nrf24l01SetRXPipe: [wreg+status,2+status,0+pclath+cstack]
  4232                           ;nrf24l01SetRXPipe@pipe stored from wreg
  4233  0EC5  0020               	movlb	0	; select bank0
  4234  0EC6  00A6               	movwf	nrf24l01SetRXPipe@pipe
  4235                           
  4236                           ;nrf24l01.c: 324: n_EN_RXADDR_t enRXAddr;;nrf24l01.c: 326: if (pipe > 5){
  4237  0EC7  3006               	movlw	6
  4238  0EC8  0226               	subwf	nrf24l01SetRXPipe@pipe,w
  4239  0EC9  1C03               	skipc
  4240  0ECA  2ED2               	goto	l373
  4241                           
  4242                           ;nrf24l01.c: 327: enRXAddr.ERX_P0 = 1;
  4243  0ECB  1427               	bsf	nrf24l01SetRXPipe@enRXAddr,0
  4244                           
  4245                           ;nrf24l01.c: 328: enRXAddr.ERX_P1 = 1;
  4246  0ECC  14A7               	bsf	nrf24l01SetRXPipe@enRXAddr,1
  4247                           
  4248                           ;nrf24l01.c: 329: enRXAddr.ERX_P2 = 1;
  4249  0ECD  1527               	bsf	nrf24l01SetRXPipe@enRXAddr,2
  4250                           
  4251                           ;nrf24l01.c: 330: enRXAddr.ERX_P3 = 1;
  4252  0ECE  15A7               	bsf	nrf24l01SetRXPipe@enRXAddr,3
  4253                           
  4254                           ;nrf24l01.c: 331: enRXAddr.ERX_P4 = 1;
  4255  0ECF  1627               	bsf	nrf24l01SetRXPipe@enRXAddr,4
  4256                           
  4257                           ;nrf24l01.c: 332: enRXAddr.ERX_P5 = 1;
  4258  0ED0  16A7               	bsf	nrf24l01SetRXPipe@enRXAddr,5
  4259                           
  4260                           ;nrf24l01.c: 333: }
  4261  0ED1  2EDE               	goto	l2263
  4262  0ED2                     l373:	
  4263                           
  4264                           ;nrf24l01.c: 335: else{;nrf24l01.c: 336: enRXAddr.ERX_P0 = 1;
  4265  0ED2  1427               	bsf	nrf24l01SetRXPipe@enRXAddr,0
  4266                           
  4267                           ;nrf24l01.c: 337: enRXAddr.byte = (unsigned) enRXAddr.byte << pipe;
  4268  0ED3  0827               	movf	nrf24l01SetRXPipe@enRXAddr,w
  4269  0ED4  00A4               	movwf	??_nrf24l01SetRXPipe
  4270  0ED5  0A26               	incf	nrf24l01SetRXPipe@pipe,w
  4271  0ED6  2ED8               	goto	u1124
  4272  0ED7                     u1125:	
  4273  0ED7  35A4               	lslf	??_nrf24l01SetRXPipe,f
  4274  0ED8                     u1124:	
  4275  0ED8  0B89               	decfsz	9,f
  4276  0ED9  2ED7               	goto	u1125
  4277  0EDA  0824               	movf	??_nrf24l01SetRXPipe,w
  4278  0EDB  00A5               	movwf	??_nrf24l01SetRXPipe+1
  4279  0EDC  0825               	movf	??_nrf24l01SetRXPipe+1,w
  4280  0EDD  00A7               	movwf	nrf24l01SetRXPipe@enRXAddr
  4281  0EDE                     l2263:	
  4282                           
  4283                           ;nrf24l01.c: 338: };nrf24l01.c: 340: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x0
      +                          2, enRXAddr.byte);
  4284  0EDE  0827               	movf	nrf24l01SetRXPipe@enRXAddr,w
  4285  0EDF  00A4               	movwf	??_nrf24l01SetRXPipe
  4286  0EE0  0824               	movf	??_nrf24l01SetRXPipe,w
  4287  0EE1  00A1               	movwf	nrf24l01Send@data
  4288  0EE2  3022               	movlw	34
  4289  0EE3  3187  27E0         	fcall	_nrf24l01Send
  4290  0EE5  0008               	return
  4291  0EE6                     __end_of_nrf24l01SetRXPipe:	
  4292                           
  4293                           	psect	text8
  4294  054F                     __ptext8:	
  4295 ;; *************** function _nrf24l01GetPipe *****************
  4296 ;; Defined at:
  4297 ;;		line 157 in file "main.c"
  4298 ;; Parameters:    Size  Location     Type
  4299 ;;  name            1    wreg     PTR unsigned char 
  4300 ;;		 -> romData(19), 
  4301 ;; Auto vars:     Size  Location     Type
  4302 ;;  name            1   20[BANK0 ] PTR unsigned char 
  4303 ;;		 -> romData(19), 
  4304 ;;  pipe            4   16[BANK0 ] unsigned long 
  4305 ;;  i               1   21[BANK0 ] unsigned char 
  4306 ;; Return value:  Size  Location     Type
  4307 ;;                  1    wreg      unsigned char 
  4308 ;; Registers used:
  4309 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4310 ;; Tracked objects:
  4311 ;;		On entry : 0/0
  4312 ;;		On exit  : 0/0
  4313 ;;		Unchanged: 0/0
  4314 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4315 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4316 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4317 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4318 ;;      Totals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4319 ;;Total ram usage:       11 bytes
  4320 ;; Hardware stack levels used:    1
  4321 ;; Hardware stack levels required when called:    8
  4322 ;; This function calls:
  4323 ;;		___llmod
  4324 ;;		_strlen
  4325 ;; This function is called by:
  4326 ;;		_main
  4327 ;; This function uses a non-reentrant model
  4328 ;;
  4329                           
  4330                           
  4331                           ;psect for function _nrf24l01GetPipe
  4332  054F                     _nrf24l01GetPipe:	
  4333                           
  4334                           ;incstack = 0
  4335                           ; Regs used in _nrf24l01GetPipe: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4336                           ;nrf24l01GetPipe@name stored from wreg
  4337  054F  0020               	movlb	0	; select bank0
  4338  0550  00B4               	movwf	nrf24l01GetPipe@name
  4339                           
  4340                           ;main.c: 158: unsigned long pipe = 0;
  4341  0551  3000               	movlw	0
  4342  0552  00B3               	movwf	nrf24l01GetPipe@pipe+3
  4343  0553  3000               	movlw	0
  4344  0554  00B2               	movwf	nrf24l01GetPipe@pipe+2
  4345  0555  3000               	movlw	0
  4346  0556  00B1               	movwf	nrf24l01GetPipe@pipe+1
  4347  0557  3000               	movlw	0
  4348  0558  00B0               	movwf	nrf24l01GetPipe@pipe
  4349                           
  4350                           ;main.c: 159: unsigned char i = 0;
  4351  0559  01B5               	clrf	nrf24l01GetPipe@i
  4352                           
  4353                           ;main.c: 162: for (i = 0; i < strlen(name); i++){
  4354  055A  01B5               	clrf	nrf24l01GetPipe@i
  4355  055B                     l2843:	
  4356  055B  0834               	movf	nrf24l01GetPipe@name,w
  4357  055C  318F  2709  3185   	fcall	_strlen
  4358  055F  0020               	movlb	0	; select bank0
  4359  0560  0835               	movf	nrf24l01GetPipe@i,w
  4360  0561  00AB               	movwf	??_nrf24l01GetPipe
  4361  0562  01AC               	clrf	??_nrf24l01GetPipe+1
  4362  0563  0822               	movf	?_strlen+1,w
  4363  0564  022C               	subwf	??_nrf24l01GetPipe+1,w
  4364  0565  1D03               	skipz
  4365  0566  2D69               	goto	u1595
  4366  0567  0821               	movf	?_strlen,w
  4367  0568  022B               	subwf	??_nrf24l01GetPipe,w
  4368  0569                     u1595:	
  4369  0569  1803               	btfsc	3,0
  4370  056A  2D83               	goto	l2845
  4371                           
  4372                           ;main.c: 163: pipe+= name[i];
  4373  056B  0835               	movf	nrf24l01GetPipe@i,w
  4374  056C  0734               	addwf	nrf24l01GetPipe@name,w
  4375  056D  00AB               	movwf	??_nrf24l01GetPipe
  4376  056E  082B               	movf	??_nrf24l01GetPipe,w
  4377  056F  0086               	movwf	6
  4378  0570  0187               	clrf	7
  4379  0571  0801               	movf	1,w
  4380  0572  00AC               	movwf	??_nrf24l01GetPipe+1
  4381  0573  01AD               	clrf	??_nrf24l01GetPipe+2
  4382  0574  01AE               	clrf	??_nrf24l01GetPipe+3
  4383  0575  01AF               	clrf	??_nrf24l01GetPipe+4
  4384  0576  082C               	movf	??_nrf24l01GetPipe+1,w
  4385  0577  07B0               	addwf	nrf24l01GetPipe@pipe,f
  4386  0578  082D               	movf	??_nrf24l01GetPipe+2,w
  4387  0579  3DB1               	addwfc	nrf24l01GetPipe@pipe+1,f
  4388  057A  082E               	movf	??_nrf24l01GetPipe+3,w
  4389  057B  3DB2               	addwfc	nrf24l01GetPipe@pipe+2,f
  4390  057C  082F               	movf	??_nrf24l01GetPipe+4,w
  4391  057D  3DB3               	addwfc	nrf24l01GetPipe@pipe+3,f
  4392  057E  3001               	movlw	1
  4393  057F  00AB               	movwf	??_nrf24l01GetPipe
  4394  0580  082B               	movf	??_nrf24l01GetPipe,w
  4395  0581  07B5               	addwf	nrf24l01GetPipe@i,f
  4396  0582  2D5B               	goto	l2843
  4397  0583                     l2845:	
  4398                           
  4399                           ;main.c: 164: };main.c: 166: pipe%= 6;
  4400  0583  3000               	movlw	0
  4401  0584  00A4               	movwf	___llmod@divisor+3
  4402  0585  3000               	movlw	0
  4403  0586  00A3               	movwf	___llmod@divisor+2
  4404  0587  3000               	movlw	0
  4405  0588  00A2               	movwf	___llmod@divisor+1
  4406  0589  3006               	movlw	6
  4407  058A  00A1               	movwf	___llmod@divisor
  4408  058B  0833               	movf	nrf24l01GetPipe@pipe+3,w
  4409  058C  00A8               	movwf	___llmod@dividend+3
  4410  058D  0832               	movf	nrf24l01GetPipe@pipe+2,w
  4411  058E  00A7               	movwf	___llmod@dividend+2
  4412  058F  0831               	movf	nrf24l01GetPipe@pipe+1,w
  4413  0590  00A6               	movwf	___llmod@dividend+1
  4414  0591  0830               	movf	nrf24l01GetPipe@pipe,w
  4415  0592  00A5               	movwf	___llmod@dividend
  4416  0593  3186  267E         	fcall	___llmod
  4417  0595  0020               	movlb	0	; select bank0
  4418  0596  0824               	movf	?___llmod+3,w
  4419  0597  00B3               	movwf	nrf24l01GetPipe@pipe+3
  4420  0598  0823               	movf	?___llmod+2,w
  4421  0599  00B2               	movwf	nrf24l01GetPipe@pipe+2
  4422  059A  0822               	movf	?___llmod+1,w
  4423  059B  00B1               	movwf	nrf24l01GetPipe@pipe+1
  4424  059C  0821               	movf	?___llmod,w
  4425  059D  00B0               	movwf	nrf24l01GetPipe@pipe
  4426                           
  4427                           ;main.c: 167: return pipe;
  4428  059E  0830               	movf	nrf24l01GetPipe@pipe,w
  4429  059F  0008               	return
  4430  05A0                     __end_of_nrf24l01GetPipe:	
  4431                           
  4432                           	psect	text9
  4433  0029                     __ptext9:	
  4434 ;; *************** function _loop *****************
  4435 ;; Defined at:
  4436 ;;		line 100 in file "main.c"
  4437 ;; Parameters:    Size  Location     Type
  4438 ;;		None
  4439 ;; Auto vars:     Size  Location     Type
  4440 ;;  packet         33    1[BANK1 ] struct .
  4441 ;;  rfSetup         1    0[BANK1 ] struct .
  4442 ;; Return value:  Size  Location     Type
  4443 ;;                  1    wreg      void 
  4444 ;; Registers used:
  4445 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4446 ;; Tracked objects:
  4447 ;;		On entry : 0/0
  4448 ;;		On exit  : 0/0
  4449 ;;		Unchanged: 0/0
  4450 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4451 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4452 ;;      Locals:         0       0      34       0       0       0       0       0       0       0       0       0       
      +0       0
  4453 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4454 ;;      Totals:         0       4      34       0       0       0       0       0       0       0       0       0       
      +0       0
  4455 ;;Total ram usage:       38 bytes
  4456 ;; Hardware stack levels used:    1
  4457 ;; Hardware stack levels required when called:   12
  4458 ;; This function calls:
  4459 ;;		_checkTXPower
  4460 ;;		_getADCValue
  4461 ;;		_nrf24l01Send
  4462 ;;		_nrf24l01SendPacket
  4463 ;;		_setMessage
  4464 ;;		_sleep
  4465 ;; This function is called by:
  4466 ;;		_main
  4467 ;; This function uses a non-reentrant model
  4468 ;;
  4469                           
  4470                           
  4471                           ;psect for function _loop
  4472  0029                     _loop:	
  4473                           
  4474                           ;incstack = 0
  4475                           ; Regs used in _loop: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4476  0029  0064               	clrwdt	;# 
  4477                           
  4478                           ;main.c: 105: nrf24l01Packet_t packet;;main.c: 107: setMessage(&packet, "DBG", counter);
  4479  002A  303A               	movlw	low (STR_3| (0+32768))
  4480  002B  0020               	movlb	0	; select bank0
  4481  002C  00BD               	movwf	setMessage@topic
  4482  002D  3090               	movlw	high (STR_3| (0+32768))
  4483  002E  00BE               	movwf	setMessage@topic+1
  4484  002F  0021               	movlb	1	; select bank1
  4485  0030  0867               	movf	(_counter+3)^(0+128),w
  4486  0031  0020               	movlb	0	; select bank0
  4487  0032  00C2               	movwf	setMessage@value+3
  4488  0033  0021               	movlb	1	; select bank1
  4489  0034  0866               	movf	(_counter+2)^(0+128),w
  4490  0035  0020               	movlb	0	; select bank0
  4491  0036  00C1               	movwf	setMessage@value+2
  4492  0037  0021               	movlb	1	; select bank1
  4493  0038  0865               	movf	(_counter+1)^(0+128),w
  4494  0039  0020               	movlb	0	; select bank0
  4495  003A  00C0               	movwf	setMessage@value+1
  4496  003B  0021               	movlb	1	; select bank1
  4497  003C  0864               	movf	_counter^(0+128),w
  4498  003D  0020               	movlb	0	; select bank0
  4499  003E  00BF               	movwf	setMessage@value
  4500  003F  30A1               	movlw	(low (loop@packet| 0))& (0+255)
  4501  0040  3184  24A8  3180   	fcall	_setMessage
  4502                           
  4503                           ;main.c: 108: packet.packetData.byte = 0;
  4504  0043  0021               	movlb	1	; select bank1
  4505  0044  01A1               	clrf	loop@packet^(0+128)
  4506                           
  4507                           ;main.c: 109: packet.packetData.ACKRequest = 0;
  4508  0045  1121               	bcf	loop@packet^(0+128),2
  4509                           
  4510                           ;main.c: 110: nrf24l01SendPacket(&packet);
  4511  0046  30A1               	movlw	(low (loop@packet| 0))& (0+255)
  4512  0047  3182  2243  3180   	fcall	_nrf24l01SendPacket
  4513                           
  4514                           ;main.c: 111: checkTXPower();
  4515  004A  318D  259A  3180   	fcall	_checkTXPower
  4516                           
  4517                           ;main.c: 112: sleep();
  4518  004D  318D  2576  3180   	fcall	_sleep
  4519                           
  4520                           ;main.c: 114: setMessage(&packet, "VBAT", getADCValue(0b000100, 2526));
  4521  0050  3028               	movlw	low (STR_4| (0+32768))
  4522  0051  0020               	movlb	0	; select bank0
  4523  0052  00BD               	movwf	setMessage@topic
  4524  0053  3090               	movlw	high (STR_4| (0+32768))
  4525  0054  00BE               	movwf	setMessage@topic+1
  4526  0055  3000               	movlw	0
  4527  0056  00B2               	movwf	getADCValue@divider+3
  4528  0057  3000               	movlw	0
  4529  0058  00B1               	movwf	getADCValue@divider+2
  4530  0059  3009               	movlw	9
  4531  005A  00B0               	movwf	getADCValue@divider+1
  4532  005B  30DE               	movlw	222
  4533  005C  00AF               	movwf	getADCValue@divider
  4534  005D  3004               	movlw	4
  4535  005E  3184  2420  3180   	fcall	_getADCValue
  4536  0061  0020               	movlb	0	; select bank0
  4537  0062  0832               	movf	?_getADCValue+3,w
  4538  0063  00C2               	movwf	setMessage@value+3
  4539  0064  0831               	movf	?_getADCValue+2,w
  4540  0065  00C1               	movwf	setMessage@value+2
  4541  0066  0830               	movf	?_getADCValue+1,w
  4542  0067  00C0               	movwf	setMessage@value+1
  4543  0068  082F               	movf	?_getADCValue,w
  4544  0069  00BF               	movwf	setMessage@value
  4545  006A  30A1               	movlw	(low (loop@packet| 0))& (0+255)
  4546  006B  3184  24A8  3180   	fcall	_setMessage
  4547                           
  4548                           ;main.c: 115: packet.packetData.byte = 0;
  4549  006E  0021               	movlb	1	; select bank1
  4550  006F  01A1               	clrf	loop@packet^(0+128)
  4551                           
  4552                           ;main.c: 116: packet.packetData.ACKRequest = 1;
  4553  0070  1521               	bsf	loop@packet^(0+128),2
  4554                           
  4555                           ;main.c: 117: nrf24l01SendPacket(&packet);
  4556  0071  30A1               	movlw	(low (loop@packet| 0))& (0+255)
  4557  0072  3182  2243  3180   	fcall	_nrf24l01SendPacket
  4558                           
  4559                           ;main.c: 118: checkTXPower();
  4560  0075  318D  259A  3180   	fcall	_checkTXPower
  4561                           
  4562                           ;main.c: 119: sleep();
  4563  0078  318D  2576  3180   	fcall	_sleep
  4564                           
  4565                           ;main.c: 122: setMessage(&packet, "ANC3", getADCValue(0b010011, 2500));
  4566  007B  301E               	movlw	low (STR_5| (0+32768))
  4567  007C  0020               	movlb	0	; select bank0
  4568  007D  00BD               	movwf	setMessage@topic
  4569  007E  3090               	movlw	high (STR_5| (0+32768))
  4570  007F  00BE               	movwf	setMessage@topic+1
  4571  0080  3000               	movlw	0
  4572  0081  00B2               	movwf	getADCValue@divider+3
  4573  0082  3000               	movlw	0
  4574  0083  00B1               	movwf	getADCValue@divider+2
  4575  0084  3009               	movlw	9
  4576  0085  00B0               	movwf	getADCValue@divider+1
  4577  0086  30C4               	movlw	196
  4578  0087  00AF               	movwf	getADCValue@divider
  4579  0088  3013               	movlw	19
  4580  0089  3184  2420  3180   	fcall	_getADCValue
  4581  008C  0020               	movlb	0	; select bank0
  4582  008D  0832               	movf	?_getADCValue+3,w
  4583  008E  00C2               	movwf	setMessage@value+3
  4584  008F  0831               	movf	?_getADCValue+2,w
  4585  0090  00C1               	movwf	setMessage@value+2
  4586  0091  0830               	movf	?_getADCValue+1,w
  4587  0092  00C0               	movwf	setMessage@value+1
  4588  0093  082F               	movf	?_getADCValue,w
  4589  0094  00BF               	movwf	setMessage@value
  4590  0095  30A1               	movlw	(low (loop@packet| 0))& (0+255)
  4591  0096  3184  24A8  3180   	fcall	_setMessage
  4592                           
  4593                           ;main.c: 123: packet.packetData.byte = 0;
  4594  0099  0021               	movlb	1	; select bank1
  4595  009A  01A1               	clrf	loop@packet^(0+128)
  4596                           
  4597                           ;main.c: 124: packet.packetData.ACKRequest = 1;
  4598  009B  1521               	bsf	loop@packet^(0+128),2
  4599                           
  4600                           ;main.c: 125: nrf24l01SendPacket(&packet);
  4601  009C  30A1               	movlw	(low (loop@packet| 0))& (0+255)
  4602  009D  3182  2243  3180   	fcall	_nrf24l01SendPacket
  4603                           
  4604                           ;main.c: 126: checkTXPower();
  4605  00A0  318D  259A  3180   	fcall	_checkTXPower
  4606                           
  4607                           ;main.c: 127: sleep();
  4608  00A3  318D  2576  3180   	fcall	_sleep
  4609                           
  4610                           ;main.c: 129: setMessage(&packet, "FVR", getADCValue(0b111111, 2500));
  4611  00A6  303E               	movlw	low (STR_6| (0+32768))
  4612  00A7  0020               	movlb	0	; select bank0
  4613  00A8  00BD               	movwf	setMessage@topic
  4614  00A9  3090               	movlw	high (STR_6| (0+32768))
  4615  00AA  00BE               	movwf	setMessage@topic+1
  4616  00AB  3000               	movlw	0
  4617  00AC  00B2               	movwf	getADCValue@divider+3
  4618  00AD  3000               	movlw	0
  4619  00AE  00B1               	movwf	getADCValue@divider+2
  4620  00AF  3009               	movlw	9
  4621  00B0  00B0               	movwf	getADCValue@divider+1
  4622  00B1  30C4               	movlw	196
  4623  00B2  00AF               	movwf	getADCValue@divider
  4624  00B3  303F               	movlw	63
  4625  00B4  3184  2420  3180   	fcall	_getADCValue
  4626  00B7  0020               	movlb	0	; select bank0
  4627  00B8  0832               	movf	?_getADCValue+3,w
  4628  00B9  00C2               	movwf	setMessage@value+3
  4629  00BA  0831               	movf	?_getADCValue+2,w
  4630  00BB  00C1               	movwf	setMessage@value+2
  4631  00BC  0830               	movf	?_getADCValue+1,w
  4632  00BD  00C0               	movwf	setMessage@value+1
  4633  00BE  082F               	movf	?_getADCValue,w
  4634  00BF  00BF               	movwf	setMessage@value
  4635  00C0  30A1               	movlw	(low (loop@packet| 0))& (0+255)
  4636  00C1  3184  24A8  3180   	fcall	_setMessage
  4637                           
  4638                           ;main.c: 130: packet.packetData.byte = 0;
  4639  00C4  0021               	movlb	1	; select bank1
  4640  00C5  01A1               	clrf	loop@packet^(0+128)
  4641                           
  4642                           ;main.c: 131: packet.packetData.ACKRequest = 1;
  4643  00C6  1521               	bsf	loop@packet^(0+128),2
  4644                           
  4645                           ;main.c: 132: nrf24l01SendPacket(&packet);
  4646  00C7  30A1               	movlw	(low (loop@packet| 0))& (0+255)
  4647  00C8  3182  2243  3180   	fcall	_nrf24l01SendPacket
  4648                           
  4649                           ;main.c: 133: checkTXPower();
  4650  00CB  318D  259A  3180   	fcall	_checkTXPower
  4651                           
  4652                           ;main.c: 134: sleep();
  4653  00CE  318D  2576  3180   	fcall	_sleep
  4654                           
  4655                           ;main.c: 136: setMessage(&packet, "TEMP", getADCValue(0b111101, 162) - 40000);
  4656  00D1  3023               	movlw	low (STR_7| (0+32768))
  4657  00D2  0020               	movlb	0	; select bank0
  4658  00D3  00BD               	movwf	setMessage@topic
  4659  00D4  3090               	movlw	high (STR_7| (0+32768))
  4660  00D5  00BE               	movwf	setMessage@topic+1
  4661  00D6  30C0               	movlw	192
  4662  00D7  00D4               	movwf	??_loop
  4663  00D8  3063               	movlw	99
  4664  00D9  00D5               	movwf	??_loop+1
  4665  00DA  30FF               	movlw	255
  4666  00DB  00D6               	movwf	??_loop+2
  4667  00DC  30FF               	movlw	255
  4668  00DD  00D7               	movwf	??_loop+3
  4669  00DE  3000               	movlw	0
  4670  00DF  00B2               	movwf	getADCValue@divider+3
  4671  00E0  3000               	movlw	0
  4672  00E1  00B1               	movwf	getADCValue@divider+2
  4673  00E2  3000               	movlw	0
  4674  00E3  00B0               	movwf	getADCValue@divider+1
  4675  00E4  30A2               	movlw	162
  4676  00E5  00AF               	movwf	getADCValue@divider
  4677  00E6  303D               	movlw	61
  4678  00E7  3184  2420  3180   	fcall	_getADCValue
  4679  00EA  0020               	movlb	0	; select bank0
  4680  00EB  082F               	movf	?_getADCValue,w
  4681  00EC  07D4               	addwf	??_loop,f
  4682  00ED  0830               	movf	?_getADCValue+1,w
  4683  00EE  3DD5               	addwfc	??_loop+1,f
  4684  00EF  0831               	movf	?_getADCValue+2,w
  4685  00F0  3DD6               	addwfc	??_loop+2,f
  4686  00F1  0832               	movf	?_getADCValue+3,w
  4687  00F2  3DD7               	addwfc	??_loop+3,f
  4688  00F3  0857               	movf	??_loop+3,w
  4689  00F4  00C2               	movwf	setMessage@value+3
  4690  00F5  0856               	movf	??_loop+2,w
  4691  00F6  00C1               	movwf	setMessage@value+2
  4692  00F7  0855               	movf	??_loop+1,w
  4693  00F8  00C0               	movwf	setMessage@value+1
  4694  00F9  0854               	movf	??_loop,w
  4695  00FA  00BF               	movwf	setMessage@value
  4696  00FB  30A1               	movlw	(low (loop@packet| 0))& (0+255)
  4697  00FC  3184  24A8  3180   	fcall	_setMessage
  4698                           
  4699                           ;main.c: 137: packet.packetData.byte = 0;
  4700  00FF  0021               	movlb	1	; select bank1
  4701  0100  01A1               	clrf	loop@packet^(0+128)
  4702                           
  4703                           ;main.c: 138: packet.packetData.ACKRequest = 1;
  4704  0101  1521               	bsf	loop@packet^(0+128),2
  4705                           
  4706                           ;main.c: 139: nrf24l01SendPacket(&packet);
  4707  0102  30A1               	movlw	(low (loop@packet| 0))& (0+255)
  4708  0103  3182  2243  3180   	fcall	_nrf24l01SendPacket
  4709                           
  4710                           ;main.c: 140: checkTXPower();
  4711  0106  318D  259A  3180   	fcall	_checkTXPower
  4712                           
  4713                           ;main.c: 141: sleep();
  4714  0109  318D  2576  3180   	fcall	_sleep
  4715                           
  4716                           ;main.c: 143: n_RF_SETUP_t rfSetup;;main.c: 144: rfSetup.byte = nrf24l01Send((unsigned) 
      +                          0b00000000 | (unsigned) 0x06, 0);
  4717  010C  0020               	movlb	0	; select bank0
  4718  010D  01A1               	clrf	nrf24l01Send@data
  4719  010E  3006               	movlw	6
  4720  010F  3187  27E0  3180   	fcall	_nrf24l01Send
  4721  0112  0020               	movlb	0	; select bank0
  4722  0113  00D4               	movwf	??_loop
  4723  0114  0854               	movf	??_loop,w
  4724  0115  0021               	movlb	1	; select bank1
  4725  0116  00A0               	movwf	loop@rfSetup^(0+128)
  4726                           
  4727                           ;main.c: 146: setMessage(&packet, "RFPWR", rfSetup.RF_PWR);
  4728  0117  3013               	movlw	low (STR_8| (0+32768))
  4729  0118  0020               	movlb	0	; select bank0
  4730  0119  00BD               	movwf	setMessage@topic
  4731  011A  3090               	movlw	high (STR_8| (0+32768))
  4732  011B  00BE               	movwf	setMessage@topic+1
  4733  011C  0021               	movlb	1	; select bank1
  4734  011D  0C20               	rrf	loop@rfSetup^(0+128),w
  4735  011E  3903               	andlw	3
  4736  011F  0020               	movlb	0	; select bank0
  4737  0120  00D4               	movwf	??_loop
  4738  0121  01D5               	clrf	??_loop+1
  4739  0122  01D6               	clrf	??_loop+2
  4740  0123  01D7               	clrf	??_loop+3
  4741  0124  0857               	movf	??_loop+3,w
  4742  0125  00C2               	movwf	setMessage@value+3
  4743  0126  0856               	movf	??_loop+2,w
  4744  0127  00C1               	movwf	setMessage@value+2
  4745  0128  0855               	movf	??_loop+1,w
  4746  0129  00C0               	movwf	setMessage@value+1
  4747  012A  0854               	movf	??_loop,w
  4748  012B  00BF               	movwf	setMessage@value
  4749  012C  30A1               	movlw	(low (loop@packet| 0))& (0+255)
  4750  012D  3184  24A8  3180   	fcall	_setMessage
  4751                           
  4752                           ;main.c: 147: packet.packetData.byte = 0;
  4753  0130  0021               	movlb	1	; select bank1
  4754  0131  01A1               	clrf	loop@packet^(0+128)
  4755                           
  4756                           ;main.c: 148: packet.packetData.ACKRequest = 1;
  4757  0132  1521               	bsf	loop@packet^(0+128),2
  4758                           
  4759                           ;main.c: 149: nrf24l01SendPacket(&packet);
  4760  0133  30A1               	movlw	(low (loop@packet| 0))& (0+255)
  4761  0134  3182  2243  3180   	fcall	_nrf24l01SendPacket
  4762                           
  4763                           ;main.c: 150: checkTXPower();
  4764  0137  318D  259A  3180   	fcall	_checkTXPower
  4765                           
  4766                           ;main.c: 151: sleep();
  4767  013A  318D  2576         	fcall	_sleep
  4768  013C  0008               	return
  4769  013D                     __end_of_loop:	
  4770                           
  4771                           	psect	text10
  4772  0D76                     __ptext10:	
  4773 ;; *************** function _sleep *****************
  4774 ;; Defined at:
  4775 ;;		line 49 in file "main.c"
  4776 ;; Parameters:    Size  Location     Type
  4777 ;;		None
  4778 ;; Auto vars:     Size  Location     Type
  4779 ;;		None
  4780 ;; Return value:  Size  Location     Type
  4781 ;;                  1    wreg      void 
  4782 ;; Registers used:
  4783 ;;		wreg
  4784 ;; Tracked objects:
  4785 ;;		On entry : 0/0
  4786 ;;		On exit  : 0/0
  4787 ;;		Unchanged: 0/0
  4788 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4789 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4790 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4791 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4792 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4793 ;;Total ram usage:        0 bytes
  4794 ;; Hardware stack levels used:    1
  4795 ;; Hardware stack levels required when called:    7
  4796 ;; This function calls:
  4797 ;;		Nothing
  4798 ;; This function is called by:
  4799 ;;		_loop
  4800 ;;		_main
  4801 ;;		_checkRxData
  4802 ;; This function uses a non-reentrant model
  4803 ;;
  4804                           
  4805                           
  4806                           ;psect for function _sleep
  4807  0D76                     _sleep:	
  4808  0D76                     l227:	
  4809                           ;incstack = 0
  4810                           ; Regs used in _sleep: [wreg]
  4811                           ;main.c: 50: while (1){
  4812                           
  4813                           
  4814                           ;main.c: 52: counter++;
  4815  0D76  3001               	movlw	1
  4816  0D77  0021               	movlb	1	; select bank1
  4817  0D78  07E4               	addwf	_counter^(0+128),f
  4818  0D79  3000               	movlw	0
  4819  0D7A  3DE5               	addwfc	(_counter+1)^(0+128),f
  4820  0D7B  3000               	movlw	0
  4821  0D7C  3DE6               	addwfc	(_counter+2)^(0+128),f
  4822  0D7D  3000               	movlw	0
  4823  0D7E  3DE7               	addwfc	(_counter+3)^(0+128),f
  4824  0D7F  0063               	sleep	;# 
  4825                           
  4826                           ;main.c: 55: __nop();
  4827  0D80  0000               	nop
  4828                           
  4829                           ;main.c: 56: __nop();
  4830  0D81  0000               	nop
  4831                           
  4832                           ;main.c: 58: if (!STATUSbits.nTO && !STATUSbits.nPD) {
  4833  0D82  0020               	movlb	0	; select bank0
  4834  0D83  1A03               	btfsc	3,4	;volatile
  4835  0D84  2D76               	goto	l227
  4836  0D85  1D83               	btfss	3,3	;volatile
  4837  0D86  0008               	return
  4838  0D87  2D76               	goto	l227
  4839  0D88                     __end_of_sleep:	
  4840                           ;main.c: 59: return;
  4841                           
  4842                           
  4843                           	psect	text11
  4844  04A8                     __ptext11:	
  4845 ;; *************** function _setMessage *****************
  4846 ;; Defined at:
  4847 ;;		line 76 in file "main.c"
  4848 ;; Parameters:    Size  Location     Type
  4849 ;;  packet          1    wreg     PTR struct .
  4850 ;;		 -> main@packet(33), loop@packet(33), 
  4851 ;;  topic           2   29[BANK0 ] PTR const unsigned char 
  4852 ;;		 -> STR_11(5), STR_8(6), STR_7(5), STR_6(4), 
  4853 ;;		 -> STR_5(5), STR_4(5), STR_3(4), 
  4854 ;;  value           4   31[BANK0 ] unsigned long 
  4855 ;; Auto vars:     Size  Location     Type
  4856 ;;  packet          1   51[BANK0 ] PTR struct .
  4857 ;;		 -> main@packet(33), loop@packet(33), 
  4858 ;;  tempString     16   35[BANK0 ] unsigned char [16]
  4859 ;; Return value:  Size  Location     Type
  4860 ;;                  1    wreg      void 
  4861 ;; Registers used:
  4862 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4863 ;; Tracked objects:
  4864 ;;		On entry : 0/0
  4865 ;;		On exit  : 0/0
  4866 ;;		Unchanged: 0/0
  4867 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4868 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4869 ;;      Locals:         0      17       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4870 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4871 ;;      Totals:         0      23       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4872 ;;Total ram usage:       23 bytes
  4873 ;; Hardware stack levels used:    1
  4874 ;; Hardware stack levels required when called:    9
  4875 ;; This function calls:
  4876 ;;		_memset
  4877 ;;		_strcat
  4878 ;;		_ultoa
  4879 ;; This function is called by:
  4880 ;;		_loop
  4881 ;;		_main
  4882 ;; This function uses a non-reentrant model
  4883 ;;
  4884                           
  4885                           
  4886                           ;psect for function _setMessage
  4887  04A8                     _setMessage:	
  4888                           
  4889                           ;incstack = 0
  4890                           ; Regs used in _setMessage: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4891                           ;setMessage@packet stored from wreg
  4892  04A8  0020               	movlb	0	; select bank0
  4893  04A9  00D3               	movwf	setMessage@packet
  4894                           
  4895                           ;main.c: 77: memset(packet->Message, 0, sizeof(packet->Message));
  4896  04AA  0853               	movf	setMessage@packet,w
  4897  04AB  3E01               	addlw	1
  4898  04AC  00A1               	movwf	memset@p1
  4899  04AD  3000               	movlw	0
  4900  04AE  00A2               	movwf	memset@p1+1
  4901  04AF  3000               	movlw	0
  4902  04B0  00A3               	movwf	memset@c
  4903  04B1  00A4               	movwf	memset@c+1
  4904  04B2  3020               	movlw	32
  4905  04B3  00A5               	movwf	memset@n
  4906  04B4  3000               	movlw	0
  4907  04B5  00A6               	movwf	memset@n+1
  4908  04B6  318D  25DE  3184   	fcall	_memset
  4909                           
  4910                           ;main.c: 79: strcat(packet->Message, romData.name);
  4911  04B9  305D               	movlw	low (_romData+1)
  4912  04BA  0020               	movlb	0	; select bank0
  4913  04BB  00A1               	movwf	strcat@from
  4914  04BC  3000               	movlw	high (_romData+1)
  4915  04BD  00A2               	movwf	strcat@from+1
  4916  04BE  0853               	movf	setMessage@packet,w
  4917  04BF  3E01               	addlw	1
  4918  04C0  318F  2754  3184   	fcall	_strcat
  4919                           
  4920                           ;main.c: 81: strcat(packet->Message, "/");
  4921  04C3  3042               	movlw	low (STR_1| (0+32768))
  4922  04C4  0020               	movlb	0	; select bank0
  4923  04C5  00A1               	movwf	strcat@from
  4924  04C6  3090               	movlw	high (STR_1| (0+32768))
  4925  04C7  00A2               	movwf	strcat@from+1
  4926  04C8  0853               	movf	setMessage@packet,w
  4927  04C9  3E01               	addlw	1
  4928  04CA  318F  2754  3184   	fcall	_strcat
  4929                           
  4930                           ;main.c: 82: strcat(packet->Message, topic);
  4931  04CD  0020               	movlb	0	; select bank0
  4932  04CE  083E               	movf	setMessage@topic+1,w
  4933  04CF  00A2               	movwf	strcat@from+1
  4934  04D0  083D               	movf	setMessage@topic,w
  4935  04D1  00A1               	movwf	strcat@from
  4936  04D2  0853               	movf	setMessage@packet,w
  4937  04D3  3E01               	addlw	1
  4938  04D4  318F  2754  3184   	fcall	_strcat
  4939                           
  4940                           ;main.c: 84: char tempString[16];;main.c: 86: ultoa(tempString, value, 10);
  4941  04D7  0020               	movlb	0	; select bank0
  4942  04D8  0842               	movf	setMessage@value+3,w
  4943  04D9  00B2               	movwf	ultoa@val+3
  4944  04DA  0841               	movf	setMessage@value+2,w
  4945  04DB  00B1               	movwf	ultoa@val+2
  4946  04DC  0840               	movf	setMessage@value+1,w
  4947  04DD  00B0               	movwf	ultoa@val+1
  4948  04DE  083F               	movf	setMessage@value,w
  4949  04DF  00AF               	movwf	ultoa@val
  4950  04E0  300A               	movlw	10
  4951  04E1  00B3               	movwf	ultoa@base
  4952  04E2  3000               	movlw	0
  4953  04E3  00B4               	movwf	ultoa@base+1
  4954  04E4  3043               	movlw	(low (setMessage@tempString| 0))& (0+255)
  4955  04E5  3183  2397  3184   	fcall	_ultoa
  4956                           
  4957                           ;main.c: 88: strcat(packet->Message, "/");
  4958  04E8  3042               	movlw	low (STR_1| (0+32768))
  4959  04E9  0020               	movlb	0	; select bank0
  4960  04EA  00A1               	movwf	strcat@from
  4961  04EB  3090               	movlw	high (STR_1| (0+32768))
  4962  04EC  00A2               	movwf	strcat@from+1
  4963  04ED  0853               	movf	setMessage@packet,w
  4964  04EE  3E01               	addlw	1
  4965  04EF  318F  2754  3184   	fcall	_strcat
  4966                           
  4967                           ;main.c: 89: strcat(packet->Message, tempString);
  4968  04F2  3043               	movlw	low setMessage@tempString
  4969  04F3  0020               	movlb	0	; select bank0
  4970  04F4  00A1               	movwf	strcat@from
  4971  04F5  3000               	movlw	high setMessage@tempString
  4972  04F6  00A2               	movwf	strcat@from+1
  4973  04F7  0853               	movf	setMessage@packet,w
  4974  04F8  3E01               	addlw	1
  4975  04F9  318F  2754         	fcall	_strcat
  4976  04FB  0008               	return
  4977  04FC                     __end_of_setMessage:	
  4978                           
  4979                           	psect	text12
  4980  0397                     __ptext12:	
  4981 ;; *************** function _ultoa *****************
  4982 ;; Defined at:
  4983 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\ltoa.c"
  4984 ;; Parameters:    Size  Location     Type
  4985 ;;  buf             1    wreg     PTR unsigned char 
  4986 ;;		 -> setMessage@tempString(16), 
  4987 ;;  val             4   15[BANK0 ] unsigned long 
  4988 ;;  base            2   19[BANK0 ] int 
  4989 ;; Auto vars:     Size  Location     Type
  4990 ;;  buf             1   27[BANK0 ] PTR unsigned char 
  4991 ;;		 -> setMessage@tempString(16), 
  4992 ;;  v               4   22[BANK0 ] unsigned long 
  4993 ;;  c               1   26[BANK0 ] unsigned char 
  4994 ;; Return value:  Size  Location     Type
  4995 ;;                  1    wreg      PTR unsigned char 
  4996 ;; Registers used:
  4997 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4998 ;; Tracked objects:
  4999 ;;		On entry : 0/0
  5000 ;;		On exit  : 0/0
  5001 ;;		Unchanged: 0/0
  5002 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5003 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5004 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5005 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5006 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5007 ;;Total ram usage:       13 bytes
  5008 ;; Hardware stack levels used:    1
  5009 ;; Hardware stack levels required when called:    8
  5010 ;; This function calls:
  5011 ;;		___lldiv
  5012 ;;		___llmod
  5013 ;; This function is called by:
  5014 ;;		_setMessage
  5015 ;; This function uses a non-reentrant model
  5016 ;;
  5017                           
  5018                           
  5019                           ;psect for function _ultoa
  5020  0397                     _ultoa:	
  5021                           
  5022                           ;incstack = 0
  5023                           ; Regs used in _ultoa: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5024                           ;ultoa@buf stored from wreg
  5025  0397  0020               	movlb	0	; select bank0
  5026  0398  00BB               	movwf	ultoa@buf
  5027  0399  0832               	movf	ultoa@val+3,w
  5028  039A  00B9               	movwf	ultoa@v+3
  5029  039B  0831               	movf	ultoa@val+2,w
  5030  039C  00B8               	movwf	ultoa@v+2
  5031  039D  0830               	movf	ultoa@val+1,w
  5032  039E  00B7               	movwf	ultoa@v+1
  5033  039F  082F               	movf	ultoa@val,w
  5034  03A0  00B6               	movwf	ultoa@v
  5035  03A1                     l2189:	
  5036  03A1  0833               	movf	ultoa@base,w
  5037  03A2  00A1               	movwf	___lldiv@divisor
  5038  03A3  0834               	movf	ultoa@base+1,w
  5039  03A4  00A2               	movwf	___lldiv@divisor+1
  5040  03A5  0D89               	rlf	9,f
  5041  03A6  3B89               	subwfb	9,f
  5042  03A7  0989               	comf	9,f
  5043  03A8  00A3               	movwf	___lldiv@divisor+2
  5044  03A9  00A4               	movwf	___lldiv@divisor+3
  5045  03AA  0839               	movf	ultoa@v+3,w
  5046  03AB  00A8               	movwf	___lldiv@dividend+3
  5047  03AC  0838               	movf	ultoa@v+2,w
  5048  03AD  00A7               	movwf	___lldiv@dividend+2
  5049  03AE  0837               	movf	ultoa@v+1,w
  5050  03AF  00A6               	movwf	___lldiv@dividend+1
  5051  03B0  0836               	movf	ultoa@v,w
  5052  03B1  00A5               	movwf	___lldiv@dividend
  5053  03B2  3184  24FC  3183   	fcall	___lldiv
  5054  03B5  0020               	movlb	0	; select bank0
  5055  03B6  0824               	movf	?___lldiv+3,w
  5056  03B7  00B9               	movwf	ultoa@v+3
  5057  03B8  0823               	movf	?___lldiv+2,w
  5058  03B9  00B8               	movwf	ultoa@v+2
  5059  03BA  0822               	movf	?___lldiv+1,w
  5060  03BB  00B7               	movwf	ultoa@v+1
  5061  03BC  0821               	movf	?___lldiv,w
  5062  03BD  00B6               	movwf	ultoa@v
  5063  03BE  3001               	movlw	1
  5064  03BF  00B5               	movwf	??_ultoa
  5065  03C0  0835               	movf	??_ultoa,w
  5066  03C1  07BB               	addwf	ultoa@buf,f
  5067  03C2  0839               	movf	ultoa@v+3,w
  5068  03C3  0438               	iorwf	ultoa@v+2,w
  5069  03C4  0437               	iorwf	ultoa@v+1,w
  5070  03C5  0436               	iorwf	ultoa@v,w
  5071  03C6  1D03               	skipz
  5072  03C7  2BA1               	goto	l2189
  5073  03C8  083B               	movf	ultoa@buf,w
  5074  03C9  0086               	movwf	6
  5075  03CA  0187               	clrf	7
  5076  03CB  0181               	clrf	1
  5077  03CC  3001               	movlw	1
  5078  03CD  02BB               	subwf	ultoa@buf,f
  5079  03CE                     l2199:	
  5080  03CE  0833               	movf	ultoa@base,w
  5081  03CF  00A1               	movwf	___llmod@divisor
  5082  03D0  0834               	movf	ultoa@base+1,w
  5083  03D1  00A2               	movwf	___llmod@divisor+1
  5084  03D2  0D89               	rlf	9,f
  5085  03D3  3B89               	subwfb	9,f
  5086  03D4  0989               	comf	9,f
  5087  03D5  00A3               	movwf	___llmod@divisor+2
  5088  03D6  00A4               	movwf	___llmod@divisor+3
  5089  03D7  0832               	movf	ultoa@val+3,w
  5090  03D8  00A8               	movwf	___llmod@dividend+3
  5091  03D9  0831               	movf	ultoa@val+2,w
  5092  03DA  00A7               	movwf	___llmod@dividend+2
  5093  03DB  0830               	movf	ultoa@val+1,w
  5094  03DC  00A6               	movwf	___llmod@dividend+1
  5095  03DD  082F               	movf	ultoa@val,w
  5096  03DE  00A5               	movwf	___llmod@dividend
  5097  03DF  3186  267E  3183   	fcall	___llmod
  5098  03E2  0020               	movlb	0	; select bank0
  5099  03E3  0821               	movf	?___llmod,w
  5100  03E4  00B5               	movwf	??_ultoa
  5101  03E5  0835               	movf	??_ultoa,w
  5102  03E6  00BA               	movwf	ultoa@c
  5103  03E7  0833               	movf	ultoa@base,w
  5104  03E8  00A1               	movwf	___lldiv@divisor
  5105  03E9  0834               	movf	ultoa@base+1,w
  5106  03EA  00A2               	movwf	___lldiv@divisor+1
  5107  03EB  0D89               	rlf	9,f
  5108  03EC  3B89               	subwfb	9,f
  5109  03ED  0989               	comf	9,f
  5110  03EE  00A3               	movwf	___lldiv@divisor+2
  5111  03EF  00A4               	movwf	___lldiv@divisor+3
  5112  03F0  0832               	movf	ultoa@val+3,w
  5113  03F1  00A8               	movwf	___lldiv@dividend+3
  5114  03F2  0831               	movf	ultoa@val+2,w
  5115  03F3  00A7               	movwf	___lldiv@dividend+2
  5116  03F4  0830               	movf	ultoa@val+1,w
  5117  03F5  00A6               	movwf	___lldiv@dividend+1
  5118  03F6  082F               	movf	ultoa@val,w
  5119  03F7  00A5               	movwf	___lldiv@dividend
  5120  03F8  3184  24FC  3183   	fcall	___lldiv
  5121  03FB  0020               	movlb	0	; select bank0
  5122  03FC  0824               	movf	?___lldiv+3,w
  5123  03FD  00B2               	movwf	ultoa@val+3
  5124  03FE  0823               	movf	?___lldiv+2,w
  5125  03FF  00B1               	movwf	ultoa@val+2
  5126  0400  0822               	movf	?___lldiv+1,w
  5127  0401  00B0               	movwf	ultoa@val+1
  5128  0402  0821               	movf	?___lldiv,w
  5129  0403  00AF               	movwf	ultoa@val
  5130  0404  300A               	movlw	10
  5131  0405  023A               	subwf	ultoa@c,w
  5132  0406  1C03               	skipc
  5133  0407  2C0C               	goto	l890
  5134  0408  3007               	movlw	7
  5135  0409  00B5               	movwf	??_ultoa
  5136  040A  0835               	movf	??_ultoa,w
  5137  040B  07BA               	addwf	ultoa@c,f
  5138  040C                     l890:	
  5139  040C  3030               	movlw	48
  5140  040D  00B5               	movwf	??_ultoa
  5141  040E  0835               	movf	??_ultoa,w
  5142  040F  07BA               	addwf	ultoa@c,f
  5143  0410  083A               	movf	ultoa@c,w
  5144  0411  00B5               	movwf	??_ultoa
  5145  0412  083B               	movf	ultoa@buf,w
  5146  0413  0086               	movwf	6
  5147  0414  0187               	clrf	7
  5148  0415  0835               	movf	??_ultoa,w
  5149  0416  0081               	movwf	1
  5150  0417  3001               	movlw	1
  5151  0418  02BB               	subwf	ultoa@buf,f
  5152  0419  0832               	movf	ultoa@val+3,w
  5153  041A  0431               	iorwf	ultoa@val+2,w
  5154  041B  0430               	iorwf	ultoa@val+1,w
  5155  041C  042F               	iorwf	ultoa@val,w
  5156  041D  1903               	btfsc	3,2
  5157  041E  0008               	return
  5158  041F  2BCE               	goto	l2199
  5159  0420                     __end_of_ultoa:	
  5160                           ;	Return value of _ultoa is never used
  5161                           
  5162                           
  5163                           	psect	text13
  5164  067E                     __ptext13:	
  5165 ;; *************** function ___llmod *****************
  5166 ;; Defined at:
  5167 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\llmod.c"
  5168 ;; Parameters:    Size  Location     Type
  5169 ;;  divisor         4    1[BANK0 ] unsigned long 
  5170 ;;  dividend        4    5[BANK0 ] unsigned long 
  5171 ;; Auto vars:     Size  Location     Type
  5172 ;;  counter         1   10[BANK0 ] unsigned char 
  5173 ;; Return value:  Size  Location     Type
  5174 ;;                  4    1[BANK0 ] unsigned long 
  5175 ;; Registers used:
  5176 ;;		wreg, status,2, status,0
  5177 ;; Tracked objects:
  5178 ;;		On entry : 0/0
  5179 ;;		On exit  : 0/0
  5180 ;;		Unchanged: 0/0
  5181 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5182 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5183 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5184 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5185 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5186 ;;Total ram usage:       10 bytes
  5187 ;; Hardware stack levels used:    1
  5188 ;; Hardware stack levels required when called:    7
  5189 ;; This function calls:
  5190 ;;		Nothing
  5191 ;; This function is called by:
  5192 ;;		_nrf24l01GetPipe
  5193 ;;		_ultoa
  5194 ;; This function uses a non-reentrant model
  5195 ;;
  5196                           
  5197                           
  5198                           ;psect for function ___llmod
  5199  067E                     ___llmod:	
  5200                           
  5201                           ;incstack = 0
  5202                           ; Regs used in ___llmod: [wreg+status,2+status,0]
  5203  067E  0020               	movlb	0	; select bank0
  5204  067F  0824               	movf	___llmod@divisor+3,w
  5205  0680  0423               	iorwf	___llmod@divisor+2,w
  5206  0681  0422               	iorwf	___llmod@divisor+1,w
  5207  0682  0421               	iorwf	___llmod@divisor,w
  5208  0683  1903               	skipnz
  5209  0684  2EB8               	goto	l2071
  5210  0685  01AA               	clrf	___llmod@counter
  5211  0686  0AAA               	incf	___llmod@counter,f
  5212  0687                     l2061:	
  5213  0687  1BA4               	btfsc	___llmod@divisor+3,7
  5214  0688  2E95               	goto	l2063
  5215  0689  3001               	movlw	1
  5216  068A                     u935:	
  5217  068A  35A1               	lslf	___llmod@divisor,f
  5218  068B  0DA2               	rlf	___llmod@divisor+1,f
  5219  068C  0DA3               	rlf	___llmod@divisor+2,f
  5220  068D  0DA4               	rlf	___llmod@divisor+3,f
  5221  068E  0B89               	decfsz	9,f
  5222  068F  2E8A               	goto	u935
  5223  0690  3001               	movlw	1
  5224  0691  00A9               	movwf	??___llmod
  5225  0692  0829               	movf	??___llmod,w
  5226  0693  07AA               	addwf	___llmod@counter,f
  5227  0694  2E87               	goto	l2061
  5228  0695                     l2063:	
  5229  0695  0824               	movf	___llmod@divisor+3,w
  5230  0696  0228               	subwf	___llmod@dividend+3,w
  5231  0697  1D03               	skipz
  5232  0698  2EA3               	goto	u955
  5233  0699  0823               	movf	___llmod@divisor+2,w
  5234  069A  0227               	subwf	___llmod@dividend+2,w
  5235  069B  1D03               	skipz
  5236  069C  2EA3               	goto	u955
  5237  069D  0822               	movf	___llmod@divisor+1,w
  5238  069E  0226               	subwf	___llmod@dividend+1,w
  5239  069F  1D03               	skipz
  5240  06A0  2EA3               	goto	u955
  5241  06A1  0821               	movf	___llmod@divisor,w
  5242  06A2  0225               	subwf	___llmod@dividend,w
  5243  06A3                     u955:	
  5244  06A3  1C03               	skipc
  5245  06A4  2EAD               	goto	l2067
  5246  06A5  0821               	movf	___llmod@divisor,w
  5247  06A6  02A5               	subwf	___llmod@dividend,f
  5248  06A7  0822               	movf	___llmod@divisor+1,w
  5249  06A8  3BA6               	subwfb	___llmod@dividend+1,f
  5250  06A9  0823               	movf	___llmod@divisor+2,w
  5251  06AA  3BA7               	subwfb	___llmod@dividend+2,f
  5252  06AB  0824               	movf	___llmod@divisor+3,w
  5253  06AC  3BA8               	subwfb	___llmod@dividend+3,f
  5254  06AD                     l2067:	
  5255  06AD  3001               	movlw	1
  5256  06AE                     u965:	
  5257  06AE  36A4               	lsrf	___llmod@divisor+3,f
  5258  06AF  0CA3               	rrf	___llmod@divisor+2,f
  5259  06B0  0CA2               	rrf	___llmod@divisor+1,f
  5260  06B1  0CA1               	rrf	___llmod@divisor,f
  5261  06B2  0B89               	decfsz	9,f
  5262  06B3  2EAE               	goto	u965
  5263  06B4  3001               	movlw	1
  5264  06B5  02AA               	subwf	___llmod@counter,f
  5265  06B6  1D03               	btfss	3,2
  5266  06B7  2E95               	goto	l2063
  5267  06B8                     l2071:	
  5268  06B8  0828               	movf	___llmod@dividend+3,w
  5269  06B9  00A4               	movwf	?___llmod+3
  5270  06BA  0827               	movf	___llmod@dividend+2,w
  5271  06BB  00A3               	movwf	?___llmod+2
  5272  06BC  0826               	movf	___llmod@dividend+1,w
  5273  06BD  00A2               	movwf	?___llmod+1
  5274  06BE  0825               	movf	___llmod@dividend,w
  5275  06BF  00A1               	movwf	?___llmod
  5276  06C0  0008               	return
  5277  06C1                     __end_of___llmod:	
  5278                           
  5279                           	psect	text14
  5280  0F54                     __ptext14:	
  5281 ;; *************** function _strcat *****************
  5282 ;; Defined at:
  5283 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\strcat.c"
  5284 ;; Parameters:    Size  Location     Type
  5285 ;;  to              1    wreg     PTR unsigned char 
  5286 ;;		 -> main@packet(33), loop@packet(33), 
  5287 ;;  from            2    1[BANK0 ] PTR const unsigned char 
  5288 ;;		 -> STR_11(5), STR_8(6), STR_7(5), STR_6(4), 
  5289 ;;		 -> STR_5(5), STR_4(5), STR_3(4), STR_2(2), 
  5290 ;;		 -> setMessage@tempString(16), STR_1(2), romData.name(16), romData(19), 
  5291 ;; Auto vars:     Size  Location     Type
  5292 ;;  to              1    5[BANK0 ] PTR unsigned char 
  5293 ;;		 -> main@packet(33), loop@packet(33), 
  5294 ;;  cp              1    4[BANK0 ] PTR unsigned char 
  5295 ;;		 -> main@packet(33), loop@packet(33), 
  5296 ;; Return value:  Size  Location     Type
  5297 ;;                  1    wreg      PTR unsigned char 
  5298 ;; Registers used:
  5299 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath
  5300 ;; Tracked objects:
  5301 ;;		On entry : 0/0
  5302 ;;		On exit  : 0/0
  5303 ;;		Unchanged: 0/0
  5304 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5305 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5306 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5307 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5308 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5309 ;;Total ram usage:        5 bytes
  5310 ;; Hardware stack levels used:    1
  5311 ;; Hardware stack levels required when called:    7
  5312 ;; This function calls:
  5313 ;;		Nothing
  5314 ;; This function is called by:
  5315 ;;		_setMessage
  5316 ;; This function uses a non-reentrant model
  5317 ;;
  5318                           
  5319                           
  5320                           ;psect for function _strcat
  5321  0F54                     _strcat:	
  5322                           
  5323                           ;incstack = 0
  5324                           ; Regs used in _strcat: [wreg-fsr1h+status,2+status,0+pclath]
  5325                           ;strcat@to stored from wreg
  5326  0F54  0020               	movlb	0	; select bank0
  5327  0F55  00A5               	movwf	strcat@to
  5328  0F56  0825               	movf	strcat@to,w
  5329  0F57  00A3               	movwf	??_strcat
  5330  0F58  0823               	movf	??_strcat,w
  5331  0F59  00A4               	movwf	strcat@cp
  5332  0F5A                     l2179:	
  5333  0F5A  0824               	movf	strcat@cp,w
  5334  0F5B  0086               	movwf	6
  5335  0F5C  0187               	clrf	7
  5336  0F5D  0801               	movf	1,w
  5337  0F5E  1903               	btfsc	3,2
  5338  0F5F  2F6D               	goto	l2185
  5339  0F60  3001               	movlw	1
  5340  0F61  00A3               	movwf	??_strcat
  5341  0F62  0823               	movf	??_strcat,w
  5342  0F63  07A4               	addwf	strcat@cp,f
  5343  0F64  2F5A               	goto	l2179
  5344  0F65                     l2181:	
  5345  0F65  3001               	movlw	1
  5346  0F66  00A3               	movwf	??_strcat
  5347  0F67  0823               	movf	??_strcat,w
  5348  0F68  07A4               	addwf	strcat@cp,f
  5349  0F69  3001               	movlw	1
  5350  0F6A  07A1               	addwf	strcat@from,f
  5351  0F6B  3000               	movlw	0
  5352  0F6C  3DA2               	addwfc	strcat@from+1,f
  5353  0F6D                     l2185:	
  5354  0F6D  0824               	movf	strcat@cp,w
  5355  0F6E  0086               	movwf	6
  5356  0F6F  0187               	clrf	7
  5357  0F70  0821               	movf	strcat@from,w
  5358  0F71  0084               	movwf	4
  5359  0F72  0822               	movf	strcat@from+1,w
  5360  0F73  0085               	movwf	5
  5361  0F74  0800               	movf	0,w	;code access
  5362  0F75  3FC0               	movwi [0]fsr1
  5363  0F76  0889               	movf	9,f
  5364  0F77  1903               	btfsc	3,2
  5365  0F78  0008               	return
  5366  0F79  2F65               	goto	l2181
  5367  0F7A                     __end_of_strcat:	
  5368                           ;	Return value of _strcat is never used
  5369                           
  5370                           
  5371                           	psect	text15
  5372  0DDE                     __ptext15:	
  5373 ;; *************** function _memset *****************
  5374 ;; Defined at:
  5375 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\memset.c"
  5376 ;; Parameters:    Size  Location     Type
  5377 ;;  p1              2    1[BANK0 ] PTR void 
  5378 ;;		 -> RXPacket(33), main@packet(33), loop@packet(33), 
  5379 ;;  c               2    3[BANK0 ] int 
  5380 ;;  n               2    5[BANK0 ] unsigned int 
  5381 ;; Auto vars:     Size  Location     Type
  5382 ;;  p               2    7[BANK0 ] PTR unsigned char 
  5383 ;;		 -> RXPacket(33), main@packet(33), loop@packet(33), 
  5384 ;; Return value:  Size  Location     Type
  5385 ;;                  2    1[BANK0 ] PTR void 
  5386 ;; Registers used:
  5387 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  5388 ;; Tracked objects:
  5389 ;;		On entry : 0/0
  5390 ;;		On exit  : 0/0
  5391 ;;		Unchanged: 0/0
  5392 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5393 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5394 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5395 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5396 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5397 ;;Total ram usage:        8 bytes
  5398 ;; Hardware stack levels used:    1
  5399 ;; Hardware stack levels required when called:    7
  5400 ;; This function calls:
  5401 ;;		Nothing
  5402 ;; This function is called by:
  5403 ;;		_setMessage
  5404 ;; This function uses a non-reentrant model
  5405 ;;
  5406                           
  5407                           
  5408                           ;psect for function _memset
  5409  0DDE                     _memset:	
  5410                           
  5411                           ;incstack = 0
  5412                           ; Regs used in _memset: [wreg+fsr1l+fsr1h+status,2+status,0]
  5413  0DDE  0020               	movlb	0	; select bank0
  5414  0DDF  0822               	movf	memset@p1+1,w
  5415  0DE0  00A8               	movwf	memset@p+1
  5416  0DE1  0821               	movf	memset@p1,w
  5417  0DE2  00A7               	movwf	memset@p
  5418  0DE3                     l3003:	
  5419  0DE3  3001               	movlw	1
  5420  0DE4  02A5               	subwf	memset@n,f
  5421  0DE5  3000               	movlw	0
  5422  0DE6  3BA6               	subwfb	memset@n+1,f
  5423  0DE7  0A25               	incf	memset@n,w
  5424  0DE8  1903               	btfsc	3,2
  5425  0DE9  0A26               	incf	memset@n+1,w
  5426  0DEA  1903               	btfsc	3,2
  5427  0DEB  0008               	return
  5428  0DEC  0827               	movf	memset@p,w
  5429  0DED  0086               	movwf	6
  5430  0DEE  0828               	movf	memset@p+1,w
  5431  0DEF  0087               	movwf	7
  5432  0DF0  0823               	movf	memset@c,w
  5433  0DF1  0081               	movwf	1
  5434  0DF2  3001               	movlw	1
  5435  0DF3  07A7               	addwf	memset@p,f
  5436  0DF4  3000               	movlw	0
  5437  0DF5  3DA8               	addwfc	memset@p+1,f
  5438  0DF6  2DE3               	goto	l3003
  5439  0DF7                     __end_of_memset:	
  5440                           ;	Return value of _memset is never used
  5441                           
  5442                           
  5443                           	psect	text16
  5444  0243                     __ptext16:	
  5445 ;; *************** function _nrf24l01SendPacket *****************
  5446 ;; Defined at:
  5447 ;;		line 170 in file "nrf24l01.c"
  5448 ;; Parameters:    Size  Location     Type
  5449 ;;  Packet          1    wreg     PTR struct .
  5450 ;;		 -> main@packet(33), loop@packet(33), 
  5451 ;; Auto vars:     Size  Location     Type
  5452 ;;  Packet          1   11[BANK0 ] PTR struct .
  5453 ;;		 -> main@packet(33), loop@packet(33), 
  5454 ;;  i               1   12[BANK0 ] unsigned char 
  5455 ;; Return value:  Size  Location     Type
  5456 ;;                  1    wreg      void 
  5457 ;; Registers used:
  5458 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5459 ;; Tracked objects:
  5460 ;;		On entry : 0/0
  5461 ;;		On exit  : 0/0
  5462 ;;		Unchanged: 0/0
  5463 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5464 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5465 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5466 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5467 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5468 ;;Total ram usage:        4 bytes
  5469 ;; Hardware stack levels used:    1
  5470 ;; Hardware stack levels required when called:   11
  5471 ;; This function calls:
  5472 ;;		_enableInterrupts
  5473 ;;		_nrf24l01CEHigh
  5474 ;;		_nrf24l01CELow
  5475 ;;		_nrf24l01ChangeTXPower
  5476 ;;		_nrf24l01SPIEnd
  5477 ;;		_nrf24l01SPISend
  5478 ;;		_nrf24l01SPIStart
  5479 ;;		_nrf24l01SetRXMode
  5480 ;;		_strlen
  5481 ;; This function is called by:
  5482 ;;		_loop
  5483 ;;		_main
  5484 ;;		_nrf24l01SendACK
  5485 ;; This function uses a non-reentrant model
  5486 ;;
  5487                           
  5488                           
  5489                           ;psect for function _nrf24l01SendPacket
  5490  0243                     _nrf24l01SendPacket:	
  5491                           
  5492                           ;incstack = 0
  5493                           ; Regs used in _nrf24l01SendPacket: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5494                           ;nrf24l01SendPacket@Packet stored from wreg
  5495  0243  0020               	movlb	0	; select bank0
  5496  0244  00AB               	movwf	nrf24l01SendPacket@Packet
  5497                           
  5498                           ;nrf24l01.c: 172: TXPacket = Packet;
  5499  0245  082B               	movf	nrf24l01SendPacket@Packet,w
  5500  0246  00A9               	movwf	??_nrf24l01SendPacket
  5501  0247  0829               	movf	??_nrf24l01SendPacket,w
  5502  0248  00D9               	movwf	_TXPacket
  5503  0249                     l338:	
  5504                           ;nrf24l01.c: 175: unsigned char i;;nrf24l01.c: 179: RESEND:
  5505                           
  5506                           
  5507                           ;nrf24l01.c: 182: i = 0xFF;
  5508  0249  30FF               	movlw	255
  5509  024A  0020               	movlb	0	; select bank0
  5510  024B  00A9               	movwf	??_nrf24l01SendPacket
  5511  024C  0829               	movf	??_nrf24l01SendPacket,w
  5512  024D  00AC               	movwf	nrf24l01SendPacket@i
  5513  024E                     l2501:	
  5514                           ;nrf24l01.c: 183: while (nrf24l01.TXBusy){
  5515                           
  5516  024E  0020               	movlb	0	; select bank0
  5517  024F  1C5B               	btfss	_nrf24l01,0	;volatile
  5518  0250  2A5A               	goto	l342
  5519                           
  5520                           ;nrf24l01.c: 184: if (!--i) {
  5521  0251  3001               	movlw	1
  5522  0252  02AC               	subwf	nrf24l01SendPacket@i,f
  5523  0253  1903               	btfsc	3,2
  5524  0254  2A49               	goto	l338
  5525                           
  5526                           ;nrf24l01.c: 186: };nrf24l01.c: 187: _delay((unsigned long)((100)*(16000000/4000000.0)))
      +                          ;
  5527                           
  5528                           ;nrf24l01.c: 185: goto RESEND;
  5529  0255  3085               	movlw	133
  5530  0256                     u1787:	
  5531  0256  0B89               	decfsz	9,f
  5532  0257  2A56               	goto	u1787
  5533  0258  0000               	nop
  5534  0259  2A4E               	goto	l2501
  5535  025A                     l342:	
  5536                           
  5537                           ;nrf24l01.c: 188: };nrf24l01.c: 191: nrf24l01.TXBusy = 1;
  5538  025A  145B               	bsf	_nrf24l01,0	;volatile
  5539                           
  5540                           ;nrf24l01.c: 194: enableInterrupts(0);
  5541  025B  3000               	movlw	0
  5542  025C  318D  2559  3182   	fcall	_enableInterrupts
  5543                           
  5544                           ;nrf24l01.c: 197: nrf24l01SetRXMode(0);
  5545  025F  3000               	movlw	0
  5546  0260  3187  273C  3182   	fcall	_nrf24l01SetRXMode
  5547                           
  5548                           ;nrf24l01.c: 200: nrf24l01SPIStart();
  5549  0263  318D  2561  3182   	fcall	_nrf24l01SPIStart
  5550                           
  5551                           ;nrf24l01.c: 203: nrf24l01SPISend((unsigned) 0b10110000);
  5552  0266  30B0               	movlw	176
  5553  0267  318D  2569  3182   	fcall	_nrf24l01SPISend
  5554                           
  5555                           ;nrf24l01.c: 205: nrf24l01SPISend(TXPacket->packetData.byte);
  5556  026A  0020               	movlb	0	; select bank0
  5557  026B  0859               	movf	_TXPacket,w
  5558  026C  0086               	movwf	6
  5559  026D  0187               	clrf	7
  5560  026E  0801               	movf	1,w
  5561  026F  318D  2569  3182   	fcall	_nrf24l01SPISend
  5562                           
  5563                           ;nrf24l01.c: 208: for (i = 0; (i < strlen(TXPacket->Message)) && (i < sizeof(TXPacket->M
      +                          essage)); i++){
  5564  0272  0020               	movlb	0	; select bank0
  5565  0273  01AC               	clrf	nrf24l01SendPacket@i
  5566  0274  2A85               	goto	l2513
  5567  0275                     l2509:	
  5568                           
  5569                           ;nrf24l01.c: 209: nrf24l01SPISend(TXPacket->Message[i]);
  5570  0275  082C               	movf	nrf24l01SendPacket@i,w
  5571  0276  3E01               	addlw	1
  5572  0277  0759               	addwf	_TXPacket,w
  5573  0278  00A9               	movwf	??_nrf24l01SendPacket
  5574  0279  0829               	movf	??_nrf24l01SendPacket,w
  5575  027A  0086               	movwf	6
  5576  027B  0187               	clrf	7
  5577  027C  0801               	movf	1,w
  5578  027D  318D  2569  3182   	fcall	_nrf24l01SPISend
  5579  0280  3001               	movlw	1
  5580  0281  0020               	movlb	0	; select bank0
  5581  0282  00A9               	movwf	??_nrf24l01SendPacket
  5582  0283  0829               	movf	??_nrf24l01SendPacket,w
  5583  0284  07AC               	addwf	nrf24l01SendPacket@i,f
  5584  0285                     l2513:	
  5585  0285  0859               	movf	_TXPacket,w
  5586  0286  3E01               	addlw	1
  5587  0287  318F  2709  3182   	fcall	_strlen
  5588  028A  0020               	movlb	0	; select bank0
  5589  028B  082C               	movf	nrf24l01SendPacket@i,w
  5590  028C  00A9               	movwf	??_nrf24l01SendPacket
  5591  028D  01AA               	clrf	??_nrf24l01SendPacket+1
  5592  028E  0822               	movf	?_strlen+1,w
  5593  028F  022A               	subwf	??_nrf24l01SendPacket+1,w
  5594  0290  1D03               	skipz
  5595  0291  2A94               	goto	u1355
  5596  0292  0821               	movf	?_strlen,w
  5597  0293  0229               	subwf	??_nrf24l01SendPacket,w
  5598  0294                     u1355:	
  5599  0294  1803               	skipnc
  5600  0295  2A9A               	goto	l2517
  5601  0296  3020               	movlw	32
  5602  0297  022C               	subwf	nrf24l01SendPacket@i,w
  5603  0298  1C03               	skipc
  5604  0299  2A75               	goto	l2509
  5605  029A                     l2517:	
  5606                           
  5607                           ;nrf24l01.c: 210: };nrf24l01.c: 213: nrf24l01SPIEnd();
  5608  029A  318D  2552  3182   	fcall	_nrf24l01SPIEnd
  5609                           
  5610                           ;nrf24l01.c: 216: nrf24l01CEHigh();
  5611  029D  318D  2540  3182   	fcall	_nrf24l01CEHigh
  5612                           
  5613                           ;nrf24l01.c: 217: _delay((unsigned long)((20)*(16000000/4000000.0)));
  5614  02A0  301A               	movlw	26
  5615  02A1                     u1797:	
  5616  02A1  0B89               	decfsz	9,f
  5617  02A2  2AA1               	goto	u1797
  5618  02A3  3200               	nop2
  5619                           
  5620                           ;nrf24l01.c: 218: nrf24l01CELow();
  5621  02A4  318D  2543  3182   	fcall	_nrf24l01CELow
  5622                           
  5623                           ;nrf24l01.c: 221: enableInterrupts(1);
  5624  02A7  3001               	movlw	1
  5625  02A8  318D  2559  3182   	fcall	_enableInterrupts
  5626                           
  5627                           ;nrf24l01.c: 224: i = 0xFF;
  5628  02AB  30FF               	movlw	255
  5629  02AC  0020               	movlb	0	; select bank0
  5630  02AD  00A9               	movwf	??_nrf24l01SendPacket
  5631  02AE  0829               	movf	??_nrf24l01SendPacket,w
  5632  02AF  00AC               	movwf	nrf24l01SendPacket@i
  5633  02B0                     l2531:	
  5634                           ;nrf24l01.c: 225: while (nrf24l01.TXBusy){
  5635                           
  5636  02B0  0020               	movlb	0	; select bank0
  5637  02B1  1C5B               	btfss	_nrf24l01,0	;volatile
  5638  02B2  2ABC               	goto	l2533
  5639                           
  5640                           ;nrf24l01.c: 226: if (!--i) {
  5641  02B3  3001               	movlw	1
  5642  02B4  02AC               	subwf	nrf24l01SendPacket@i,f
  5643  02B5  1903               	btfsc	3,2
  5644  02B6  2A49               	goto	l338
  5645                           
  5646                           ;nrf24l01.c: 228: };nrf24l01.c: 229: _delay((unsigned long)((100)*(16000000/4000000.0)))
      +                          ;
  5647                           
  5648                           ;nrf24l01.c: 227: goto RESEND;
  5649  02B7  3085               	movlw	133
  5650  02B8                     u1807:	
  5651  02B8  0B89               	decfsz	9,f
  5652  02B9  2AB8               	goto	u1807
  5653  02BA  0000               	nop
  5654  02BB  2AB0               	goto	l2531
  5655  02BC                     l2533:	
  5656                           
  5657                           ;nrf24l01.c: 230: };nrf24l01.c: 234: i = 0xFF;
  5658  02BC  30FF               	movlw	255
  5659  02BD  00A9               	movwf	??_nrf24l01SendPacket
  5660  02BE  0829               	movf	??_nrf24l01SendPacket,w
  5661  02BF  00AC               	movwf	nrf24l01SendPacket@i
  5662  02C0                     l2543:	
  5663                           ;nrf24l01.c: 235: while (TXPacket->packetData.ACKRequest){
  5664                           
  5665  02C0  0020               	movlb	0	; select bank0
  5666  02C1  0859               	movf	_TXPacket,w
  5667  02C2  0086               	movwf	6
  5668  02C3  0187               	clrf	7
  5669  02C4  1D01               	btfss	1,2
  5670  02C5  0008               	return
  5671                           
  5672                           ;nrf24l01.c: 236: if (!--i) {
  5673  02C6  3001               	movlw	1
  5674  02C7  02AC               	subwf	nrf24l01SendPacket@i,f
  5675  02C8  1D03               	btfss	3,2
  5676  02C9  2AED               	goto	l2541
  5677                           
  5678                           ;nrf24l01.c: 237: _delay((unsigned long)((50000)*(16000000/4000000.0)));
  5679  02CA  3002               	movlw	2
  5680  02CB  0020               	movlb	0	; select bank0
  5681  02CC  00AA               	movwf	??_nrf24l01SendPacket+1
  5682  02CD  3004               	movlw	4
  5683  02CE  00A9               	movwf	??_nrf24l01SendPacket
  5684  02CF  30BA               	movlw	186
  5685  02D0                     u1817:	
  5686  02D0  0B89               	decfsz	9,f
  5687  02D1  2AD0               	goto	u1817
  5688  02D2  0BA9               	decfsz	??_nrf24l01SendPacket,f
  5689  02D3  2AD0               	goto	u1817
  5690  02D4  0BAA               	decfsz	??_nrf24l01SendPacket+1,f
  5691  02D5  2AD0               	goto	u1817
  5692  02D6  0000               	nop
  5693                           
  5694                           ;nrf24l01.c: 238: _delay((unsigned long)((50000)*(16000000/4000000.0)));
  5695  02D7  3002               	movlw	2
  5696  02D8  0020               	movlb	0	; select bank0
  5697  02D9  00AA               	movwf	??_nrf24l01SendPacket+1
  5698  02DA  3004               	movlw	4
  5699  02DB  00A9               	movwf	??_nrf24l01SendPacket
  5700  02DC  30BA               	movlw	186
  5701  02DD                     u1827:	
  5702  02DD  0B89               	decfsz	9,f
  5703  02DE  2ADD               	goto	u1827
  5704  02DF  0BA9               	decfsz	??_nrf24l01SendPacket,f
  5705  02E0  2ADD               	goto	u1827
  5706  02E1  0BAA               	decfsz	??_nrf24l01SendPacket+1,f
  5707  02E2  2ADD               	goto	u1827
  5708  02E3  0000               	nop
  5709                           
  5710                           ;nrf24l01.c: 239: nrf24l01ChangeTXPower(1);
  5711  02E4  3001               	movlw	1
  5712  02E5  0020               	movlb	0	; select bank0
  5713  02E6  00A4               	movwf	nrf24l01ChangeTXPower@addPower
  5714  02E7  3000               	movlw	0
  5715  02E8  00A5               	movwf	nrf24l01ChangeTXPower@addPower+1
  5716  02E9  3186  26C1  3182   	fcall	_nrf24l01ChangeTXPower
  5717                           
  5718                           ;nrf24l01.c: 240: goto RESEND;
  5719  02EC  2A49               	goto	l338
  5720  02ED                     l2541:	
  5721                           
  5722                           ;nrf24l01.c: 241: };nrf24l01.c: 242: _delay((unsigned long)((100)*(16000000/4000000.0)))
      +                          ;
  5723  02ED  3085               	movlw	133
  5724  02EE                     u1837:	
  5725  02EE  0B89               	decfsz	9,f
  5726  02EF  2AEE               	goto	u1837
  5727  02F0  0000               	nop
  5728  02F1  2AC0               	goto	l2543
  5729  02F2                     __end_of_nrf24l01SendPacket:	
  5730                           
  5731                           	psect	text17
  5732  0F09                     __ptext17:	
  5733 ;; *************** function _strlen *****************
  5734 ;; Defined at:
  5735 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\strlen.c"
  5736 ;; Parameters:    Size  Location     Type
  5737 ;;  s               1    wreg     PTR const unsigned char 
  5738 ;;		 -> packet.Message(32), packet.Message(32), NULL(0), main@packet(33), 
  5739 ;;		 -> loop@packet(33), romData(19), 
  5740 ;; Auto vars:     Size  Location     Type
  5741 ;;  s               1    8[BANK0 ] PTR const unsigned char 
  5742 ;;		 -> packet.Message(32), packet.Message(32), NULL(0), main@packet(33), 
  5743 ;;		 -> loop@packet(33), romData(19), 
  5744 ;;  cp              1    7[BANK0 ] PTR const unsigned char 
  5745 ;;		 -> packet.Message(32), packet.Message(32), NULL(0), main@packet(33), 
  5746 ;;		 -> loop@packet(33), romData(19), 
  5747 ;; Return value:  Size  Location     Type
  5748 ;;                  2    1[BANK0 ] unsigned int 
  5749 ;; Registers used:
  5750 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  5751 ;; Tracked objects:
  5752 ;;		On entry : 0/0
  5753 ;;		On exit  : 0/0
  5754 ;;		Unchanged: 0/0
  5755 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5756 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5757 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5758 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5759 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5760 ;;Total ram usage:        8 bytes
  5761 ;; Hardware stack levels used:    1
  5762 ;; Hardware stack levels required when called:    7
  5763 ;; This function calls:
  5764 ;;		Nothing
  5765 ;; This function is called by:
  5766 ;;		_nrf24l01GetPipe
  5767 ;;		_nrf24l01SendPacket
  5768 ;; This function uses a non-reentrant model
  5769 ;;
  5770                           
  5771                           
  5772                           ;psect for function _strlen
  5773  0F09                     _strlen:	
  5774                           
  5775                           ;incstack = 0
  5776                           ; Regs used in _strlen: [wreg+fsr1l+fsr1h+status,2+status,0]
  5777                           ;strlen@s stored from wreg
  5778  0F09  0020               	movlb	0	; select bank0
  5779  0F0A  00A8               	movwf	strlen@s
  5780  0F0B  0828               	movf	strlen@s,w
  5781  0F0C  00A3               	movwf	??_strlen
  5782  0F0D  0823               	movf	??_strlen,w
  5783  0F0E  00A7               	movwf	strlen@cp
  5784  0F0F                     l2237:	
  5785  0F0F  0827               	movf	strlen@cp,w
  5786  0F10  0086               	movwf	6
  5787  0F11  0187               	clrf	7
  5788  0F12  0801               	movf	1,w
  5789  0F13  1903               	btfsc	3,2
  5790  0F14  2F1A               	goto	l2239
  5791  0F15  3001               	movlw	1
  5792  0F16  00A3               	movwf	??_strlen
  5793  0F17  0823               	movf	??_strlen,w
  5794  0F18  07A7               	addwf	strlen@cp,f
  5795  0F19  2F0F               	goto	l2237
  5796  0F1A                     l2239:	
  5797  0F1A  0828               	movf	strlen@s,w
  5798  0F1B  00A3               	movwf	??_strlen
  5799  0F1C  3000               	movlw	0
  5800  0F1D  00A4               	movwf	??_strlen+1
  5801  0F1E  09A3               	comf	??_strlen,f
  5802  0F1F  09A4               	comf	??_strlen+1,f
  5803  0F20  0AA3               	incf	??_strlen,f
  5804  0F21  1903               	skipnz
  5805  0F22  0AA4               	incf	??_strlen+1,f
  5806  0F23  0827               	movf	strlen@cp,w
  5807  0F24  00A5               	movwf	??_strlen+2
  5808  0F25  3000               	movlw	0
  5809  0F26  00A6               	movwf	??_strlen+3
  5810  0F27  0823               	movf	??_strlen,w
  5811  0F28  0725               	addwf	??_strlen+2,w
  5812  0F29  00A1               	movwf	?_strlen
  5813  0F2A  0824               	movf	??_strlen+1,w
  5814  0F2B  3D26               	addwfc	??_strlen+3,w
  5815  0F2C  00A2               	movwf	?_strlen+1
  5816  0F2D  0008               	return
  5817  0F2E                     __end_of_strlen:	
  5818                           
  5819                           	psect	text18
  5820  073C                     __ptext18:	
  5821 ;; *************** function _nrf24l01SetRXMode *****************
  5822 ;; Defined at:
  5823 ;;		line 54 in file "nrf24l01.c"
  5824 ;; Parameters:    Size  Location     Type
  5825 ;;  rxMode          1    wreg     unsigned char 
  5826 ;; Auto vars:     Size  Location     Type
  5827 ;;  rxMode          1    6[BANK0 ] unsigned char 
  5828 ;;  config          1    5[BANK0 ] struct .
  5829 ;; Return value:  Size  Location     Type
  5830 ;;                  1    wreg      void 
  5831 ;; Registers used:
  5832 ;;		wreg, status,2, status,0, pclath, cstack
  5833 ;; Tracked objects:
  5834 ;;		On entry : 0/0
  5835 ;;		On exit  : 0/0
  5836 ;;		Unchanged: 0/0
  5837 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5838 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5839 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5840 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5841 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5842 ;;Total ram usage:        3 bytes
  5843 ;; Hardware stack levels used:    1
  5844 ;; Hardware stack levels required when called:   10
  5845 ;; This function calls:
  5846 ;;		_nrf24l01CEHigh
  5847 ;;		_nrf24l01CELow
  5848 ;;		_nrf24l01Send
  5849 ;; This function is called by:
  5850 ;;		_nrf24l01SendPacket
  5851 ;;		_checkRxData
  5852 ;; This function uses a non-reentrant model
  5853 ;;
  5854                           
  5855                           
  5856                           ;psect for function _nrf24l01SetRXMode
  5857  073C                     _nrf24l01SetRXMode:	
  5858                           
  5859                           ;incstack = 0
  5860                           ; Regs used in _nrf24l01SetRXMode: [wreg+status,2+status,0+pclath+cstack]
  5861                           ;nrf24l01SetRXMode@rxMode stored from wreg
  5862  073C  0020               	movlb	0	; select bank0
  5863  073D  00A6               	movwf	nrf24l01SetRXMode@rxMode
  5864                           
  5865                           ;nrf24l01.c: 56: n_CONFIG_t config;;nrf24l01.c: 59: config.byte = nrf24l01Send((unsigned
      +                          ) 0b00000000 | (unsigned) 0x00, 0);
  5866  073E  01A1               	clrf	nrf24l01Send@data
  5867  073F  3000               	movlw	0
  5868  0740  3187  27E0  3187   	fcall	_nrf24l01Send
  5869  0743  0020               	movlb	0	; select bank0
  5870  0744  00A4               	movwf	??_nrf24l01SetRXMode
  5871  0745  0824               	movf	??_nrf24l01SetRXMode,w
  5872  0746  00A5               	movwf	nrf24l01SetRXMode@config
  5873                           
  5874                           ;nrf24l01.c: 62: if (config.PRIM_RX != rxMode){
  5875  0747  0825               	movf	nrf24l01SetRXMode@config,w
  5876  0748  3901               	andlw	1
  5877  0749  0626               	xorwf	nrf24l01SetRXMode@rxMode,w
  5878  074A  1903               	skipnz
  5879  074B  2F70               	goto	l2165
  5880                           
  5881                           ;nrf24l01.c: 65: nrf24l01CELow();
  5882  074C  318D  2543  3187   	fcall	_nrf24l01CELow
  5883                           
  5884                           ;nrf24l01.c: 66: _delay((unsigned long)((200)*(16000000/4000000.0)));
  5885  074F  30A0               	movlw	160
  5886  0750                     u1847:	
  5887  0750  3200               	nop2
  5888  0751  0B89               	decfsz	9,f
  5889  0752  2F50               	goto	u1847
  5890                           
  5891                           ;nrf24l01.c: 69: config.PRIM_RX = rxMode;
  5892  0753  0020               	movlb	0	; select bank0
  5893  0754  0826               	movf	nrf24l01SetRXMode@rxMode,w
  5894  0755  3901               	andlw	1
  5895  0756  1025               	bcf	nrf24l01SetRXMode@config,0
  5896  0757  1D03               	skipz
  5897  0758  1425               	bsf	nrf24l01SetRXMode@config,0
  5898                           
  5899                           ;nrf24l01.c: 70: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x00, config.byte);
  5900  0759  0825               	movf	nrf24l01SetRXMode@config,w
  5901  075A  00A4               	movwf	??_nrf24l01SetRXMode
  5902  075B  0824               	movf	??_nrf24l01SetRXMode,w
  5903  075C  00A1               	movwf	nrf24l01Send@data
  5904  075D  3020               	movlw	32
  5905  075E  3187  27E0  3187   	fcall	_nrf24l01Send
  5906                           
  5907                           ;nrf24l01.c: 73: _delay((unsigned long)((200)*(16000000/4000000.0)));
  5908  0761  30A0               	movlw	160
  5909  0762                     u1857:	
  5910  0762  3200               	nop2
  5911  0763  0B89               	decfsz	9,f
  5912  0764  2F62               	goto	u1857
  5913                           
  5914                           ;nrf24l01.c: 76: if (rxMode){
  5915  0765  0020               	movlb	0	; select bank0
  5916  0766  0826               	movf	nrf24l01SetRXMode@rxMode,w
  5917  0767  1903               	btfsc	3,2
  5918  0768  2F70               	goto	l2165
  5919                           
  5920                           ;nrf24l01.c: 77: nrf24l01CEHigh();
  5921  0769  318D  2540  3187   	fcall	_nrf24l01CEHigh
  5922                           
  5923                           ;nrf24l01.c: 78: _delay((unsigned long)((200)*(16000000/4000000.0)));
  5924  076C  30A0               	movlw	160
  5925  076D                     u1867:	
  5926  076D  3200               	nop2
  5927  076E  0B89               	decfsz	9,f
  5928  076F  2F6D               	goto	u1867
  5929  0770                     l2165:	
  5930                           
  5931                           ;nrf24l01.c: 79: };nrf24l01.c: 80: };nrf24l01.c: 83: nrf24l01.RXMode = rxMode;
  5932  0770  0020               	movlb	0	; select bank0
  5933  0771  0826               	movf	nrf24l01SetRXMode@rxMode,w
  5934  0772  3901               	andlw	1
  5935  0773  115B               	bcf	_nrf24l01,2	;volatile
  5936  0774  1D03               	skipz
  5937  0775  155B               	bsf	_nrf24l01,2	;volatile
  5938  0776  0008               	return
  5939  0777                     __end_of_nrf24l01SetRXMode:	
  5940                           
  5941                           	psect	text19
  5942  0420                     __ptext19:	
  5943 ;; *************** function _getADCValue *****************
  5944 ;; Defined at:
  5945 ;;		line 23 in file "main.c"
  5946 ;; Parameters:    Size  Location     Type
  5947 ;;  channel         1    wreg     unsigned char 
  5948 ;;  divider         4   15[BANK0 ] unsigned long 
  5949 ;; Auto vars:     Size  Location     Type
  5950 ;;  channel         1   23[BANK0 ] unsigned char 
  5951 ;;  adcSum          4   25[BANK0 ] unsigned long 
  5952 ;;  adcLoop         1   24[BANK0 ] unsigned char 
  5953 ;; Return value:  Size  Location     Type
  5954 ;;                  4   15[BANK0 ] unsigned long 
  5955 ;; Registers used:
  5956 ;;		wreg, status,2, status,0, pclath, cstack
  5957 ;; Tracked objects:
  5958 ;;		On entry : 0/0
  5959 ;;		On exit  : 0/0
  5960 ;;		Unchanged: 0/0
  5961 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5962 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5963 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5964 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5965 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5966 ;;Total ram usage:       14 bytes
  5967 ;; Hardware stack levels used:    1
  5968 ;; Hardware stack levels required when called:    8
  5969 ;; This function calls:
  5970 ;;		___lldiv
  5971 ;;		___lmul
  5972 ;; This function is called by:
  5973 ;;		_loop
  5974 ;; This function uses a non-reentrant model
  5975 ;;
  5976                           
  5977                           
  5978                           ;psect for function _getADCValue
  5979  0420                     _getADCValue:	
  5980                           
  5981                           ;incstack = 0
  5982                           ; Regs used in _getADCValue: [wreg+status,2+status,0+pclath+cstack]
  5983                           ;getADCValue@channel stored from wreg
  5984  0420  0020               	movlb	0	; select bank0
  5985  0421  00B7               	movwf	getADCValue@channel
  5986                           
  5987                           ;main.c: 25: unsigned long adcSum = 0;
  5988  0422  3000               	movlw	0
  5989  0423  00BC               	movwf	getADCValue@adcSum+3
  5990  0424  3000               	movlw	0
  5991  0425  00BB               	movwf	getADCValue@adcSum+2
  5992  0426  3000               	movlw	0
  5993  0427  00BA               	movwf	getADCValue@adcSum+1
  5994  0428  3000               	movlw	0
  5995  0429  00B9               	movwf	getADCValue@adcSum
  5996                           
  5997                           ;main.c: 26: unsigned char adcLoop = 255;
  5998  042A  30FF               	movlw	255
  5999  042B  00B3               	movwf	??_getADCValue
  6000  042C  0833               	movf	??_getADCValue,w
  6001  042D  00B8               	movwf	getADCValue@adcLoop
  6002                           
  6003                           ;main.c: 28: ADCON0bits.CHS = channel;
  6004  042E  0837               	movf	getADCValue@channel,w
  6005  042F  00B3               	movwf	??_getADCValue
  6006  0430  0DB3               	rlf	??_getADCValue,f
  6007  0431  0DB3               	rlf	??_getADCValue,f
  6008  0432  0021               	movlb	1	; select bank1
  6009  0433  081D               	movf	29,w	;volatile
  6010  0434  0020               	movlb	0	; select bank0
  6011  0435  0633               	xorwf	??_getADCValue,w
  6012  0436  3903               	andlw	-253
  6013  0437  0633               	xorwf	??_getADCValue,w
  6014  0438  0021               	movlb	1	; select bank1
  6015  0439  009D               	movwf	29	;volatile
  6016                           
  6017                           ;main.c: 29: _delay((unsigned long)((200)*(16000000/4000000.0)));
  6018  043A  30A0               	movlw	160
  6019  043B                     u1877:	
  6020  043B  3200               	nop2
  6021  043C  0B89               	decfsz	9,f
  6022  043D  2C3B               	goto	u1877
  6023  043E                     l2457:	
  6024                           ;main.c: 31: while (--adcLoop){
  6025                           
  6026  043E  3001               	movlw	1
  6027  043F  0020               	movlb	0	; select bank0
  6028  0440  02B8               	subwf	getADCValue@adcLoop,f
  6029  0441  1903               	btfsc	3,2
  6030  0442  2C68               	goto	l2459
  6031                           
  6032                           ;main.c: 33: ADCON0bits.ADGO = 1;
  6033  0443  0021               	movlb	1	; select bank1
  6034  0444  149D               	bsf	29,1	;volatile
  6035  0445                     l220:	
  6036                           ;main.c: 35: while (ADCON0bits.ADGO){
  6037                           
  6038  0445  0021               	movlb	1	; select bank1
  6039  0446  1C9D               	btfss	29,1	;volatile
  6040  0447  2C4A               	goto	l2455
  6041                           
  6042                           ;main.c: 36: __nop();
  6043  0448  0000               	nop
  6044  0449  2C45               	goto	l220
  6045  044A                     l2455:	
  6046                           
  6047                           ;main.c: 37: };main.c: 39: adcSum+= ADRESL;
  6048  044A  081B               	movf	27,w	;volatile
  6049  044B  0020               	movlb	0	; select bank0
  6050  044C  00B3               	movwf	??_getADCValue
  6051  044D  01B4               	clrf	??_getADCValue+1
  6052  044E  01B5               	clrf	??_getADCValue+2
  6053  044F  01B6               	clrf	??_getADCValue+3
  6054  0450  0833               	movf	??_getADCValue,w
  6055  0451  07B9               	addwf	getADCValue@adcSum,f
  6056  0452  0834               	movf	??_getADCValue+1,w
  6057  0453  3DBA               	addwfc	getADCValue@adcSum+1,f
  6058  0454  0835               	movf	??_getADCValue+2,w
  6059  0455  3DBB               	addwfc	getADCValue@adcSum+2,f
  6060  0456  0836               	movf	??_getADCValue+3,w
  6061  0457  3DBC               	addwfc	getADCValue@adcSum+3,f
  6062                           
  6063                           ;main.c: 40: adcSum+= (unsigned) (ADRESH << 8);
  6064  0458  0021               	movlb	1	; select bank1
  6065  0459  081C               	movf	28,w	;volatile
  6066  045A  0020               	movlb	0	; select bank0
  6067  045B  00B3               	movwf	??_getADCValue
  6068  045C  01B4               	clrf	??_getADCValue+1
  6069  045D  0833               	movf	??_getADCValue,w
  6070  045E  00B4               	movwf	??_getADCValue+1
  6071  045F  01B3               	clrf	??_getADCValue
  6072  0460  0833               	movf	??_getADCValue,w
  6073  0461  07B9               	addwf	getADCValue@adcSum,f
  6074  0462  0834               	movf	??_getADCValue+1,w
  6075  0463  3DBA               	addwfc	getADCValue@adcSum+1,f
  6076  0464  3000               	movlw	0
  6077  0465  3DBB               	addwfc	getADCValue@adcSum+2,f
  6078  0466  3DBC               	addwfc	getADCValue@adcSum+3,f
  6079  0467  2C3E               	goto	l2457
  6080  0468                     l2459:	
  6081                           
  6082                           ;main.c: 41: };main.c: 43: adcSum*= 100;
  6083  0468  3000               	movlw	0
  6084  0469  00A4               	movwf	___lmul@multiplier+3
  6085  046A  3000               	movlw	0
  6086  046B  00A3               	movwf	___lmul@multiplier+2
  6087  046C  3000               	movlw	0
  6088  046D  00A2               	movwf	___lmul@multiplier+1
  6089  046E  3064               	movlw	100
  6090  046F  00A1               	movwf	___lmul@multiplier
  6091  0470  083C               	movf	getADCValue@adcSum+3,w
  6092  0471  00A8               	movwf	___lmul@multiplicand+3
  6093  0472  083B               	movf	getADCValue@adcSum+2,w
  6094  0473  00A7               	movwf	___lmul@multiplicand+2
  6095  0474  083A               	movf	getADCValue@adcSum+1,w
  6096  0475  00A6               	movwf	___lmul@multiplicand+1
  6097  0476  0839               	movf	getADCValue@adcSum,w
  6098  0477  00A5               	movwf	___lmul@multiplicand
  6099  0478  318F  27D0  3184   	fcall	___lmul
  6100  047B  0020               	movlb	0	; select bank0
  6101  047C  0824               	movf	?___lmul+3,w
  6102  047D  00BC               	movwf	getADCValue@adcSum+3
  6103  047E  0823               	movf	?___lmul+2,w
  6104  047F  00BB               	movwf	getADCValue@adcSum+2
  6105  0480  0822               	movf	?___lmul+1,w
  6106  0481  00BA               	movwf	getADCValue@adcSum+1
  6107  0482  0821               	movf	?___lmul,w
  6108  0483  00B9               	movwf	getADCValue@adcSum
  6109                           
  6110                           ;main.c: 44: adcSum/= divider;
  6111  0484  0832               	movf	getADCValue@divider+3,w
  6112  0485  00A4               	movwf	___lldiv@divisor+3
  6113  0486  0831               	movf	getADCValue@divider+2,w
  6114  0487  00A3               	movwf	___lldiv@divisor+2
  6115  0488  0830               	movf	getADCValue@divider+1,w
  6116  0489  00A2               	movwf	___lldiv@divisor+1
  6117  048A  082F               	movf	getADCValue@divider,w
  6118  048B  00A1               	movwf	___lldiv@divisor
  6119  048C  083C               	movf	getADCValue@adcSum+3,w
  6120  048D  00A8               	movwf	___lldiv@dividend+3
  6121  048E  083B               	movf	getADCValue@adcSum+2,w
  6122  048F  00A7               	movwf	___lldiv@dividend+2
  6123  0490  083A               	movf	getADCValue@adcSum+1,w
  6124  0491  00A6               	movwf	___lldiv@dividend+1
  6125  0492  0839               	movf	getADCValue@adcSum,w
  6126  0493  00A5               	movwf	___lldiv@dividend
  6127  0494  3184  24FC         	fcall	___lldiv
  6128  0496  0020               	movlb	0	; select bank0
  6129  0497  0824               	movf	?___lldiv+3,w
  6130  0498  00BC               	movwf	getADCValue@adcSum+3
  6131  0499  0823               	movf	?___lldiv+2,w
  6132  049A  00BB               	movwf	getADCValue@adcSum+2
  6133  049B  0822               	movf	?___lldiv+1,w
  6134  049C  00BA               	movwf	getADCValue@adcSum+1
  6135  049D  0821               	movf	?___lldiv,w
  6136  049E  00B9               	movwf	getADCValue@adcSum
  6137                           
  6138                           ;main.c: 46: return adcSum;
  6139  049F  083C               	movf	getADCValue@adcSum+3,w
  6140  04A0  00B2               	movwf	?_getADCValue+3
  6141  04A1  083B               	movf	getADCValue@adcSum+2,w
  6142  04A2  00B1               	movwf	?_getADCValue+2
  6143  04A3  083A               	movf	getADCValue@adcSum+1,w
  6144  04A4  00B0               	movwf	?_getADCValue+1
  6145  04A5  0839               	movf	getADCValue@adcSum,w
  6146  04A6  00AF               	movwf	?_getADCValue
  6147  04A7  0008               	return
  6148  04A8                     __end_of_getADCValue:	
  6149                           
  6150                           	psect	text20
  6151  0FD0                     __ptext20:	
  6152 ;; *************** function ___lmul *****************
  6153 ;; Defined at:
  6154 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\Umul32.c"
  6155 ;; Parameters:    Size  Location     Type
  6156 ;;  multiplier      4    1[BANK0 ] unsigned long 
  6157 ;;  multiplicand    4    5[BANK0 ] unsigned long 
  6158 ;; Auto vars:     Size  Location     Type
  6159 ;;  product         4    9[BANK0 ] unsigned long 
  6160 ;; Return value:  Size  Location     Type
  6161 ;;                  4    1[BANK0 ] unsigned long 
  6162 ;; Registers used:
  6163 ;;		wreg, status,2, status,0
  6164 ;; Tracked objects:
  6165 ;;		On entry : 0/0
  6166 ;;		On exit  : 0/0
  6167 ;;		Unchanged: 0/0
  6168 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6169 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6170 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6171 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6172 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6173 ;;Total ram usage:       12 bytes
  6174 ;; Hardware stack levels used:    1
  6175 ;; Hardware stack levels required when called:    7
  6176 ;; This function calls:
  6177 ;;		Nothing
  6178 ;; This function is called by:
  6179 ;;		_getADCValue
  6180 ;; This function uses a non-reentrant model
  6181 ;;
  6182                           
  6183                           
  6184                           ;psect for function ___lmul
  6185  0FD0                     ___lmul:	
  6186                           
  6187                           ;incstack = 0
  6188                           ; Regs used in ___lmul: [wreg+status,2+status,0]
  6189  0FD0  3000               	movlw	0
  6190  0FD1  0020               	movlb	0	; select bank0
  6191  0FD2  00AC               	movwf	___lmul@product+3
  6192  0FD3  3000               	movlw	0
  6193  0FD4  00AB               	movwf	___lmul@product+2
  6194  0FD5  3000               	movlw	0
  6195  0FD6  00AA               	movwf	___lmul@product+1
  6196  0FD7  3000               	movlw	0
  6197  0FD8  00A9               	movwf	___lmul@product
  6198  0FD9                     l2295:	
  6199  0FD9  1C21               	btfss	___lmul@multiplier,0
  6200  0FDA  2FE3               	goto	l2299
  6201  0FDB  0825               	movf	___lmul@multiplicand,w
  6202  0FDC  07A9               	addwf	___lmul@product,f
  6203  0FDD  0826               	movf	___lmul@multiplicand+1,w
  6204  0FDE  3DAA               	addwfc	___lmul@product+1,f
  6205  0FDF  0827               	movf	___lmul@multiplicand+2,w
  6206  0FE0  3DAB               	addwfc	___lmul@product+2,f
  6207  0FE1  0828               	movf	___lmul@multiplicand+3,w
  6208  0FE2  3DAC               	addwfc	___lmul@product+3,f
  6209  0FE3                     l2299:	
  6210  0FE3  3001               	movlw	1
  6211  0FE4                     u1205:	
  6212  0FE4  35A5               	lslf	___lmul@multiplicand,f
  6213  0FE5  0DA6               	rlf	___lmul@multiplicand+1,f
  6214  0FE6  0DA7               	rlf	___lmul@multiplicand+2,f
  6215  0FE7  0DA8               	rlf	___lmul@multiplicand+3,f
  6216  0FE8  0B89               	decfsz	9,f
  6217  0FE9  2FE4               	goto	u1205
  6218  0FEA  3001               	movlw	1
  6219  0FEB                     u1215:	
  6220  0FEB  36A4               	lsrf	___lmul@multiplier+3,f
  6221  0FEC  0CA3               	rrf	___lmul@multiplier+2,f
  6222  0FED  0CA2               	rrf	___lmul@multiplier+1,f
  6223  0FEE  0CA1               	rrf	___lmul@multiplier,f
  6224  0FEF  0B89               	decfsz	9,f
  6225  0FF0  2FEB               	goto	u1215
  6226  0FF1  0824               	movf	___lmul@multiplier+3,w
  6227  0FF2  0423               	iorwf	___lmul@multiplier+2,w
  6228  0FF3  0422               	iorwf	___lmul@multiplier+1,w
  6229  0FF4  0421               	iorwf	___lmul@multiplier,w
  6230  0FF5  1D03               	skipz
  6231  0FF6  2FD9               	goto	l2295
  6232  0FF7  082C               	movf	___lmul@product+3,w
  6233  0FF8  00A4               	movwf	?___lmul+3
  6234  0FF9  082B               	movf	___lmul@product+2,w
  6235  0FFA  00A3               	movwf	?___lmul+2
  6236  0FFB  082A               	movf	___lmul@product+1,w
  6237  0FFC  00A2               	movwf	?___lmul+1
  6238  0FFD  0829               	movf	___lmul@product,w
  6239  0FFE  00A1               	movwf	?___lmul
  6240  0FFF  0008               	return
  6241  1000                     __end_of___lmul:	
  6242                           
  6243                           	psect	text21
  6244  04FC                     __ptext21:	
  6245 ;; *************** function ___lldiv *****************
  6246 ;; Defined at:
  6247 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\__lldiv.c"
  6248 ;; Parameters:    Size  Location     Type
  6249 ;;  divisor         4    1[BANK0 ] unsigned long 
  6250 ;;  dividend        4    5[BANK0 ] unsigned long 
  6251 ;; Auto vars:     Size  Location     Type
  6252 ;;  quotient        4   10[BANK0 ] unsigned long 
  6253 ;;  counter         1   14[BANK0 ] unsigned char 
  6254 ;; Return value:  Size  Location     Type
  6255 ;;                  4    1[BANK0 ] unsigned long 
  6256 ;; Registers used:
  6257 ;;		wreg, status,2, status,0
  6258 ;; Tracked objects:
  6259 ;;		On entry : 0/0
  6260 ;;		On exit  : 0/0
  6261 ;;		Unchanged: 0/0
  6262 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6263 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6264 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6265 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6266 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6267 ;;Total ram usage:       14 bytes
  6268 ;; Hardware stack levels used:    1
  6269 ;; Hardware stack levels required when called:    7
  6270 ;; This function calls:
  6271 ;;		Nothing
  6272 ;; This function is called by:
  6273 ;;		_getADCValue
  6274 ;;		_ultoa
  6275 ;; This function uses a non-reentrant model
  6276 ;;
  6277                           
  6278                           
  6279                           ;psect for function ___lldiv
  6280  04FC                     ___lldiv:	
  6281                           
  6282                           ;incstack = 0
  6283                           ; Regs used in ___lldiv: [wreg+status,2+status,0]
  6284  04FC  3000               	movlw	0
  6285  04FD  0020               	movlb	0	; select bank0
  6286  04FE  00AD               	movwf	___lldiv@quotient+3
  6287  04FF  3000               	movlw	0
  6288  0500  00AC               	movwf	___lldiv@quotient+2
  6289  0501  3000               	movlw	0
  6290  0502  00AB               	movwf	___lldiv@quotient+1
  6291  0503  3000               	movlw	0
  6292  0504  00AA               	movwf	___lldiv@quotient
  6293  0505  0824               	movf	___lldiv@divisor+3,w
  6294  0506  0423               	iorwf	___lldiv@divisor+2,w
  6295  0507  0422               	iorwf	___lldiv@divisor+1,w
  6296  0508  0421               	iorwf	___lldiv@divisor,w
  6297  0509  1903               	skipnz
  6298  050A  2D46               	goto	l2051
  6299  050B  01AE               	clrf	___lldiv@counter
  6300  050C  0AAE               	incf	___lldiv@counter,f
  6301  050D                     l2037:	
  6302  050D  1BA4               	btfsc	___lldiv@divisor+3,7
  6303  050E  2D1B               	goto	l2039
  6304  050F  3001               	movlw	1
  6305  0510                     u865:	
  6306  0510  35A1               	lslf	___lldiv@divisor,f
  6307  0511  0DA2               	rlf	___lldiv@divisor+1,f
  6308  0512  0DA3               	rlf	___lldiv@divisor+2,f
  6309  0513  0DA4               	rlf	___lldiv@divisor+3,f
  6310  0514  0B89               	decfsz	9,f
  6311  0515  2D10               	goto	u865
  6312  0516  3001               	movlw	1
  6313  0517  00A9               	movwf	??___lldiv
  6314  0518  0829               	movf	??___lldiv,w
  6315  0519  07AE               	addwf	___lldiv@counter,f
  6316  051A  2D0D               	goto	l2037
  6317  051B                     l2039:	
  6318  051B  3001               	movlw	1
  6319  051C                     u885:	
  6320  051C  35AA               	lslf	___lldiv@quotient,f
  6321  051D  0DAB               	rlf	___lldiv@quotient+1,f
  6322  051E  0DAC               	rlf	___lldiv@quotient+2,f
  6323  051F  0DAD               	rlf	___lldiv@quotient+3,f
  6324  0520  0B89               	decfsz	9,f
  6325  0521  2D1C               	goto	u885
  6326  0522  0824               	movf	___lldiv@divisor+3,w
  6327  0523  0228               	subwf	___lldiv@dividend+3,w
  6328  0524  1D03               	skipz
  6329  0525  2D30               	goto	u895
  6330  0526  0823               	movf	___lldiv@divisor+2,w
  6331  0527  0227               	subwf	___lldiv@dividend+2,w
  6332  0528  1D03               	skipz
  6333  0529  2D30               	goto	u895
  6334  052A  0822               	movf	___lldiv@divisor+1,w
  6335  052B  0226               	subwf	___lldiv@dividend+1,w
  6336  052C  1D03               	skipz
  6337  052D  2D30               	goto	u895
  6338  052E  0821               	movf	___lldiv@divisor,w
  6339  052F  0225               	subwf	___lldiv@dividend,w
  6340  0530                     u895:	
  6341  0530  1C03               	skipc
  6342  0531  2D3B               	goto	l2047
  6343  0532  0821               	movf	___lldiv@divisor,w
  6344  0533  02A5               	subwf	___lldiv@dividend,f
  6345  0534  0822               	movf	___lldiv@divisor+1,w
  6346  0535  3BA6               	subwfb	___lldiv@dividend+1,f
  6347  0536  0823               	movf	___lldiv@divisor+2,w
  6348  0537  3BA7               	subwfb	___lldiv@dividend+2,f
  6349  0538  0824               	movf	___lldiv@divisor+3,w
  6350  0539  3BA8               	subwfb	___lldiv@dividend+3,f
  6351  053A  142A               	bsf	___lldiv@quotient,0
  6352  053B                     l2047:	
  6353  053B  3001               	movlw	1
  6354  053C                     u905:	
  6355  053C  36A4               	lsrf	___lldiv@divisor+3,f
  6356  053D  0CA3               	rrf	___lldiv@divisor+2,f
  6357  053E  0CA2               	rrf	___lldiv@divisor+1,f
  6358  053F  0CA1               	rrf	___lldiv@divisor,f
  6359  0540  0B89               	decfsz	9,f
  6360  0541  2D3C               	goto	u905
  6361  0542  3001               	movlw	1
  6362  0543  02AE               	subwf	___lldiv@counter,f
  6363  0544  1D03               	btfss	3,2
  6364  0545  2D1B               	goto	l2039
  6365  0546                     l2051:	
  6366  0546  082D               	movf	___lldiv@quotient+3,w
  6367  0547  00A4               	movwf	?___lldiv+3
  6368  0548  082C               	movf	___lldiv@quotient+2,w
  6369  0549  00A3               	movwf	?___lldiv+2
  6370  054A  082B               	movf	___lldiv@quotient+1,w
  6371  054B  00A2               	movwf	?___lldiv+1
  6372  054C  082A               	movf	___lldiv@quotient,w
  6373  054D  00A1               	movwf	?___lldiv
  6374  054E  0008               	return
  6375  054F                     __end_of___lldiv:	
  6376                           
  6377                           	psect	text22
  6378  0D9A                     __ptext22:	
  6379 ;; *************** function _checkTXPower *****************
  6380 ;; Defined at:
  6381 ;;		line 92 in file "main.c"
  6382 ;; Parameters:    Size  Location     Type
  6383 ;;		None
  6384 ;; Auto vars:     Size  Location     Type
  6385 ;;  rxPacket        1    9[BANK0 ] PTR struct .
  6386 ;;		 -> RXPacket(33), 
  6387 ;; Return value:  Size  Location     Type
  6388 ;;                  1    wreg      void 
  6389 ;; Registers used:
  6390 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6391 ;; Tracked objects:
  6392 ;;		On entry : 0/0
  6393 ;;		On exit  : 0/0
  6394 ;;		Unchanged: 0/0
  6395 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6396 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6397 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6398 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6399 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6400 ;;Total ram usage:        2 bytes
  6401 ;; Hardware stack levels used:    1
  6402 ;; Hardware stack levels required when called:   11
  6403 ;; This function calls:
  6404 ;;		_nrf24l01ChangeTXPower
  6405 ;;		_nrf24l01GetRXPacket
  6406 ;; This function is called by:
  6407 ;;		_loop
  6408 ;; This function uses a non-reentrant model
  6409 ;;
  6410                           
  6411                           
  6412                           ;psect for function _checkTXPower
  6413  0D9A                     _checkTXPower:	
  6414                           
  6415                           ;main.c: 93: nrf24l01Packet_t * rxPacket = nrf24l01GetRXPacket();
  6416                           
  6417                           ;incstack = 0
  6418                           ; Regs used in _checkTXPower: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6419  0D9A  3180  2002  318D   	fcall	_nrf24l01GetRXPacket
  6420  0D9D  0020               	movlb	0	; select bank0
  6421  0D9E  00A8               	movwf	??_checkTXPower
  6422  0D9F  0828               	movf	??_checkTXPower,w
  6423  0DA0  00A9               	movwf	checkTXPower@rxPacket
  6424                           
  6425                           ;main.c: 95: if (rxPacket->packetData.ACKRPD){
  6426  0DA1  0829               	movf	checkTXPower@rxPacket,w
  6427  0DA2  0086               	movwf	6
  6428  0DA3  3001               	movlw	1	; select bank2/3
  6429  0DA4  0087               	movwf	7
  6430  0DA5  1C81               	btfss	1,1
  6431  0DA6  0008               	return
  6432                           
  6433                           ;main.c: 96: nrf24l01ChangeTXPower(-1);
  6434  0DA7  30FF               	movlw	255
  6435  0DA8  00A4               	movwf	nrf24l01ChangeTXPower@addPower
  6436  0DA9  30FF               	movlw	255
  6437  0DAA  00A5               	movwf	nrf24l01ChangeTXPower@addPower+1
  6438  0DAB  3186  26C1         	fcall	_nrf24l01ChangeTXPower
  6439  0DAD  0008               	return
  6440  0DAE                     __end_of_checkTXPower:	
  6441                           
  6442                           	psect	text23
  6443  0002                     __ptext23:	
  6444 ;; *************** function _nrf24l01GetRXPacket *****************
  6445 ;; Defined at:
  6446 ;;		line 131 in file "nrf24l01.c"
  6447 ;; Parameters:    Size  Location     Type
  6448 ;;		None
  6449 ;; Auto vars:     Size  Location     Type
  6450 ;;		None
  6451 ;; Return value:  Size  Location     Type
  6452 ;;                  1    wreg      PTR struct .
  6453 ;; Registers used:
  6454 ;;		wreg
  6455 ;; Tracked objects:
  6456 ;;		On entry : 0/0
  6457 ;;		On exit  : 0/0
  6458 ;;		Unchanged: 0/0
  6459 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6460 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6461 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6462 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6463 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6464 ;;Total ram usage:        0 bytes
  6465 ;; Hardware stack levels used:    1
  6466 ;; Hardware stack levels required when called:    7
  6467 ;; This function calls:
  6468 ;;		Nothing
  6469 ;; This function is called by:
  6470 ;;		_checkTXPower
  6471 ;; This function uses a non-reentrant model
  6472 ;;
  6473                           
  6474                           
  6475                           ;psect for function _nrf24l01GetRXPacket
  6476  0002                     _nrf24l01GetRXPacket:	
  6477                           
  6478                           ;nrf24l01.c: 132: return &RXPacket;
  6479                           
  6480                           ;incstack = 0
  6481                           ; Regs used in _nrf24l01GetRXPacket: [wreg]
  6482  0002  3040               	movlw	(low (_RXPacket| (0+256)))& (0+255)
  6483  0003  0008               	return
  6484  0004                     __end_of_nrf24l01GetRXPacket:	
  6485                           
  6486                           	psect	text24
  6487  06C1                     __ptext24:	
  6488 ;; *************** function _nrf24l01ChangeTXPower *****************
  6489 ;; Defined at:
  6490 ;;		line 33 in file "nrf24l01.c"
  6491 ;; Parameters:    Size  Location     Type
  6492 ;;  addPower        2    4[BANK0 ] int 
  6493 ;; Auto vars:     Size  Location     Type
  6494 ;;  rfSetup         1    7[BANK0 ] struct .
  6495 ;; Return value:  Size  Location     Type
  6496 ;;                  1    wreg      void 
  6497 ;; Registers used:
  6498 ;;		wreg, status,2, status,0, pclath, cstack
  6499 ;; Tracked objects:
  6500 ;;		On entry : 0/0
  6501 ;;		On exit  : 0/0
  6502 ;;		Unchanged: 0/0
  6503 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6504 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6505 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6506 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6507 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6508 ;;Total ram usage:        4 bytes
  6509 ;; Hardware stack levels used:    1
  6510 ;; Hardware stack levels required when called:   10
  6511 ;; This function calls:
  6512 ;;		_nrf24l01Send
  6513 ;; This function is called by:
  6514 ;;		_checkTXPower
  6515 ;;		_nrf24l01SendPacket
  6516 ;; This function uses a non-reentrant model
  6517 ;;
  6518                           
  6519                           
  6520                           ;psect for function _nrf24l01ChangeTXPower
  6521  06C1                     _nrf24l01ChangeTXPower:	
  6522                           
  6523                           ;nrf24l01.c: 35: n_RF_SETUP_t rfSetup;;nrf24l01.c: 36: rfSetup.byte = nrf24l01Send((unsi
      +                          gned) 0b00000000 | (unsigned) 0x06, 0);
  6524                           
  6525                           ;incstack = 0
  6526                           ; Regs used in _nrf24l01ChangeTXPower: [wreg+status,2+status,0+pclath+cstack]
  6527  06C1  0020               	movlb	0	; select bank0
  6528  06C2  01A1               	clrf	nrf24l01Send@data
  6529  06C3  3006               	movlw	6
  6530  06C4  3187  27E0  3186   	fcall	_nrf24l01Send
  6531  06C7  0020               	movlb	0	; select bank0
  6532  06C8  00A6               	movwf	??_nrf24l01ChangeTXPower
  6533  06C9  0826               	movf	??_nrf24l01ChangeTXPower,w
  6534  06CA  00A7               	movwf	nrf24l01ChangeTXPower@rfSetup
  6535                           
  6536                           ;nrf24l01.c: 38: if (addPower > 0){
  6537  06CB  0825               	movf	nrf24l01ChangeTXPower@addPower+1,w
  6538  06CC  3A80               	xorlw	128
  6539  06CD  00A6               	movwf	??_nrf24l01ChangeTXPower
  6540  06CE  3080               	movlw	128
  6541  06CF  0226               	subwf	??_nrf24l01ChangeTXPower,w
  6542  06D0  1D03               	skipz
  6543  06D1  2ED4               	goto	u1065
  6544  06D2  3001               	movlw	1
  6545  06D3  0224               	subwf	nrf24l01ChangeTXPower@addPower,w
  6546  06D4                     u1065:	
  6547  06D4  1C03               	skipc
  6548  06D5  2EE6               	goto	l2225
  6549                           
  6550                           ;nrf24l01.c: 39: if (rfSetup.RF_PWR < 3){
  6551  06D6  0020               	movlb	0	; select bank0
  6552  06D7  0C27               	rrf	nrf24l01ChangeTXPower@rfSetup,w
  6553  06D8  3903               	andlw	3
  6554  06D9  3A03               	xorlw	3
  6555  06DA  1903               	skipnz
  6556  06DB  2EE6               	goto	l2225
  6557                           
  6558                           ;nrf24l01.c: 40: rfSetup.RF_PWR++;
  6559  06DC  0C27               	rrf	nrf24l01ChangeTXPower@rfSetup,w
  6560  06DD  3903               	andlw	3
  6561  06DE  00A6               	movwf	??_nrf24l01ChangeTXPower
  6562  06DF  0AA6               	incf	??_nrf24l01ChangeTXPower,f
  6563  06E0  0DA6               	rlf	??_nrf24l01ChangeTXPower,f
  6564  06E1  0827               	movf	nrf24l01ChangeTXPower@rfSetup,w
  6565  06E2  0626               	xorwf	??_nrf24l01ChangeTXPower,w
  6566  06E3  39F9               	andlw	-7
  6567  06E4  0626               	xorwf	??_nrf24l01ChangeTXPower,w
  6568  06E5  00A7               	movwf	nrf24l01ChangeTXPower@rfSetup
  6569  06E6                     l2225:	
  6570                           
  6571                           ;nrf24l01.c: 41: };nrf24l01.c: 42: };nrf24l01.c: 44: if (addPower < 0){
  6572  06E6  0020               	movlb	0	; select bank0
  6573  06E7  1FA5               	btfss	nrf24l01ChangeTXPower@addPower+1,7
  6574  06E8  2EF8               	goto	l2231
  6575                           
  6576                           ;nrf24l01.c: 45: if (rfSetup.RF_PWR > 0){
  6577  06E9  0C27               	rrf	nrf24l01ChangeTXPower@rfSetup,w
  6578  06EA  3903               	andlw	3
  6579  06EB  3A00               	xorlw	0
  6580  06EC  1903               	skipnz
  6581  06ED  2EF8               	goto	l2231
  6582                           
  6583                           ;nrf24l01.c: 46: rfSetup.RF_PWR--;
  6584  06EE  0C27               	rrf	nrf24l01ChangeTXPower@rfSetup,w
  6585  06EF  3903               	andlw	3
  6586  06F0  00A6               	movwf	??_nrf24l01ChangeTXPower
  6587  06F1  03A6               	decf	??_nrf24l01ChangeTXPower,f
  6588  06F2  0DA6               	rlf	??_nrf24l01ChangeTXPower,f
  6589  06F3  0827               	movf	nrf24l01ChangeTXPower@rfSetup,w
  6590  06F4  0626               	xorwf	??_nrf24l01ChangeTXPower,w
  6591  06F5  39F9               	andlw	-7
  6592  06F6  0626               	xorwf	??_nrf24l01ChangeTXPower,w
  6593  06F7  00A7               	movwf	nrf24l01ChangeTXPower@rfSetup
  6594  06F8                     l2231:	
  6595                           
  6596                           ;nrf24l01.c: 47: };nrf24l01.c: 48: };nrf24l01.c: 50: nrf24l01Send((unsigned) 0b00100000 
      +                          | (unsigned) 0x06, rfSetup.byte);
  6597  06F8  0827               	movf	nrf24l01ChangeTXPower@rfSetup,w
  6598  06F9  00A6               	movwf	??_nrf24l01ChangeTXPower
  6599  06FA  0826               	movf	??_nrf24l01ChangeTXPower,w
  6600  06FB  00A1               	movwf	nrf24l01Send@data
  6601  06FC  3026               	movlw	38
  6602  06FD  3187  27E0         	fcall	_nrf24l01Send
  6603  06FF  0008               	return
  6604  0700                     __end_of_nrf24l01ChangeTXPower:	
  6605                           
  6606                           	psect	text25
  6607  07E0                     __ptext25:	
  6608 ;; *************** function _nrf24l01Send *****************
  6609 ;; Defined at:
  6610 ;;		line 9 in file "nrf24l01.c"
  6611 ;; Parameters:    Size  Location     Type
  6612 ;;  command         1    wreg     unsigned char 
  6613 ;;  data            1    1[BANK0 ] unsigned char 
  6614 ;; Auto vars:     Size  Location     Type
  6615 ;;  command         1    3[BANK0 ] unsigned char 
  6616 ;; Return value:  Size  Location     Type
  6617 ;;                  1    wreg      unsigned char 
  6618 ;; Registers used:
  6619 ;;		wreg, status,2, status,0, pclath, cstack
  6620 ;; Tracked objects:
  6621 ;;		On entry : 0/0
  6622 ;;		On exit  : 0/0
  6623 ;;		Unchanged: 0/0
  6624 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6625 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6626 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6627 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6628 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6629 ;;Total ram usage:        3 bytes
  6630 ;; Hardware stack levels used:    1
  6631 ;; Hardware stack levels required when called:    9
  6632 ;; This function calls:
  6633 ;;		_enableInterrupts
  6634 ;;		_nrf24l01SPIEnd
  6635 ;;		_nrf24l01SPISend
  6636 ;;		_nrf24l01SPIStart
  6637 ;; This function is called by:
  6638 ;;		_loop
  6639 ;;		_nrf24l01ChangeTXPower
  6640 ;;		_nrf24l01SetRXMode
  6641 ;;		_nrf24l01SetRXPipe
  6642 ;;		_nrf24l01InitRegisters
  6643 ;; This function uses a non-reentrant model
  6644 ;;
  6645                           
  6646                           
  6647                           ;psect for function _nrf24l01Send
  6648  07E0                     _nrf24l01Send:	
  6649                           
  6650                           ;incstack = 0
  6651                           ; Regs used in _nrf24l01Send: [wreg+status,2+status,0+pclath+cstack]
  6652                           ;nrf24l01Send@command stored from wreg
  6653  07E0  0020               	movlb	0	; select bank0
  6654  07E1  00A3               	movwf	nrf24l01Send@command
  6655                           
  6656                           ;nrf24l01.c: 12: enableInterrupts(0);
  6657  07E2  3000               	movlw	0
  6658  07E3  318D  2559  3187   	fcall	_enableInterrupts
  6659                           
  6660                           ;nrf24l01.c: 15: nrf24l01SPIStart();
  6661  07E6  318D  2561  3187   	fcall	_nrf24l01SPIStart
  6662                           
  6663                           ;nrf24l01.c: 18: nrf24l01SPISend(command);
  6664  07E9  0020               	movlb	0	; select bank0
  6665  07EA  0823               	movf	nrf24l01Send@command,w
  6666  07EB  318D  2569  3187   	fcall	_nrf24l01SPISend
  6667                           
  6668                           ;nrf24l01.c: 21: data = nrf24l01SPISend(data);
  6669  07EE  0020               	movlb	0	; select bank0
  6670  07EF  0821               	movf	nrf24l01Send@data,w
  6671  07F0  318D  2569  3187   	fcall	_nrf24l01SPISend
  6672  07F3  0020               	movlb	0	; select bank0
  6673  07F4  00A2               	movwf	??_nrf24l01Send
  6674  07F5  0822               	movf	??_nrf24l01Send,w
  6675  07F6  00A1               	movwf	nrf24l01Send@data
  6676                           
  6677                           ;nrf24l01.c: 24: nrf24l01SPIEnd();
  6678  07F7  318D  2552  3187   	fcall	_nrf24l01SPIEnd
  6679                           
  6680                           ;nrf24l01.c: 27: enableInterrupts(1);
  6681  07FA  3001               	movlw	1
  6682  07FB  318D  2559         	fcall	_enableInterrupts
  6683                           
  6684                           ;nrf24l01.c: 29: return data;
  6685  07FD  0020               	movlb	0	; select bank0
  6686  07FE  0821               	movf	nrf24l01Send@data,w
  6687  07FF  0008               	return
  6688  0800                     __end_of_nrf24l01Send:	
  6689                           
  6690                           	psect	text26
  6691  0EE6                     __ptext26:	
  6692 ;; *************** function _flashUpdate *****************
  6693 ;; Defined at:
  6694 ;;		line 97 in file "flash.c"
  6695 ;; Parameters:    Size  Location     Type
  6696 ;;		None
  6697 ;; Auto vars:     Size  Location     Type
  6698 ;;  i               2    9[BANK0 ] unsigned int 
  6699 ;; Return value:  Size  Location     Type
  6700 ;;                  1    wreg      void 
  6701 ;; Registers used:
  6702 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6703 ;; Tracked objects:
  6704 ;;		On entry : 0/0
  6705 ;;		On exit  : 0/0
  6706 ;;		Unchanged: 0/0
  6707 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6708 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6709 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6710 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6711 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6712 ;;Total ram usage:        4 bytes
  6713 ;; Hardware stack levels used:    1
  6714 ;; Hardware stack levels required when called:    8
  6715 ;; This function calls:
  6716 ;;		_flashWriteByte
  6717 ;; This function is called by:
  6718 ;;		_main
  6719 ;; This function uses a non-reentrant model
  6720 ;;
  6721                           
  6722                           
  6723                           ;psect for function _flashUpdate
  6724  0EE6                     _flashUpdate:	
  6725                           
  6726                           ;flash.c: 98: for (unsigned int i = 0; i < 32; i++){
  6727                           
  6728                           ;incstack = 0
  6729                           ; Regs used in _flashUpdate: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6730  0EE6  0020               	movlb	0	; select bank0
  6731  0EE7  01A9               	clrf	flashUpdate@i
  6732  0EE8  01AA               	clrf	flashUpdate@i+1
  6733  0EE9                     L1:	
  6734  0EE9  3000               	movlw	0
  6735  0EEA  022A               	subwf	flashUpdate@i+1,w
  6736  0EEB  3020               	movlw	32
  6737  0EEC  1903               	skipnz
  6738  0EED  0229               	subwf	flashUpdate@i,w
  6739  0EEE  1803               	btfsc	3,0
  6740  0EEF  0008               	return
  6741                           
  6742                           ;flash.c: 99: flashWriteByte(i, romHolder.array[i]);
  6743  0EF0  082A               	movf	flashUpdate@i+1,w
  6744  0EF1  00A2               	movwf	flashWriteByte@offset+1
  6745  0EF2  0829               	movf	flashUpdate@i,w
  6746  0EF3  00A1               	movwf	flashWriteByte@offset
  6747  0EF4  0829               	movf	flashUpdate@i,w
  6748  0EF5  3E20               	addlw	(low (_romHolder| (0+256)))& (0+255)
  6749  0EF6  0086               	movwf	6
  6750  0EF7  3001               	movlw	1	; select bank2/3
  6751  0EF8  0087               	movwf	7
  6752  0EF9  0801               	movf	1,w
  6753  0EFA  00A7               	movwf	??_flashUpdate
  6754  0EFB  01A8               	clrf	??_flashUpdate+1
  6755  0EFC  0827               	movf	??_flashUpdate,w
  6756  0EFD  00A3               	movwf	flashWriteByte@data
  6757  0EFE  0828               	movf	??_flashUpdate+1,w
  6758  0EFF  00A4               	movwf	flashWriteByte@data+1
  6759  0F00  3187  2700  318E   	fcall	_flashWriteByte
  6760  0F03  3001               	movlw	1
  6761  0F04  0020               	movlb	0	; select bank0
  6762  0F05  07A9               	addwf	flashUpdate@i,f
  6763  0F06  3000               	movlw	0
  6764  0F07  3DAA               	addwfc	flashUpdate@i+1,f
  6765  0F08  2EE9               	goto	L1
  6766  0F09                     __end_of_flashUpdate:	
  6767                           
  6768                           	psect	text27
  6769  0700                     __ptext27:	
  6770 ;; *************** function _flashWriteByte *****************
  6771 ;; Defined at:
  6772 ;;		line 8 in file "flash.c"
  6773 ;; Parameters:    Size  Location     Type
  6774 ;;  offset          2    1[BANK0 ] unsigned int 
  6775 ;;  data            2    3[BANK0 ] unsigned int 
  6776 ;; Auto vars:     Size  Location     Type
  6777 ;;  address         2    5[BANK0 ] unsigned int 
  6778 ;; Return value:  Size  Location     Type
  6779 ;;                  1    wreg      void 
  6780 ;; Registers used:
  6781 ;;		wreg, status,2, status,0
  6782 ;; Tracked objects:
  6783 ;;		On entry : 0/0
  6784 ;;		On exit  : 0/0
  6785 ;;		Unchanged: 0/0
  6786 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6787 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6788 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6789 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6790 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6791 ;;Total ram usage:        6 bytes
  6792 ;; Hardware stack levels used:    1
  6793 ;; Hardware stack levels required when called:    7
  6794 ;; This function calls:
  6795 ;;		Nothing
  6796 ;; This function is called by:
  6797 ;;		_flashUpdate
  6798 ;; This function uses a non-reentrant model
  6799 ;;
  6800                           
  6801                           
  6802                           ;psect for function _flashWriteByte
  6803  0700                     _flashWriteByte:	
  6804                           
  6805                           ;flash.c: 10: unsigned int address;;flash.c: 12: INTCONbits.GIE = 0;
  6806                           
  6807                           ;incstack = 0
  6808                           ; Regs used in _flashWriteByte: [wreg+status,2+status,0]
  6809  0700  138B               	bcf	11,7	;volatile
  6810                           
  6811                           ;flash.c: 15: PMCON1 = 0x00;
  6812  0701  0031               	movlb	17	; select bank17
  6813  0702  0195               	clrf	21	;volsfr
  6814                           
  6815                           ;flash.c: 17: address = (0x2000U - 32) + offset;
  6816  0703  0020               	movlb	0	; select bank0
  6817  0704  0821               	movf	flashWriteByte@offset,w
  6818  0705  3EE0               	addlw	224
  6819  0706  00A5               	movwf	flashWriteByte@address
  6820  0707  301F               	movlw	31
  6821  0708  3D22               	addwfc	flashWriteByte@offset+1,w
  6822  0709  00A6               	movwf	flashWriteByte@address+1
  6823                           
  6824                           ;flash.c: 18: PMADRL = (char) (address >> 0);
  6825  070A  0825               	movf	flashWriteByte@address,w
  6826  070B  0031               	movlb	17	; select bank17
  6827  070C  0091               	movwf	17	;volatile
  6828                           
  6829                           ;flash.c: 19: PMADRH = (char) (address >> 8);
  6830  070D  0020               	movlb	0	; select bank0
  6831  070E  0826               	movf	flashWriteByte@address+1,w
  6832  070F  0031               	movlb	17	; select bank17
  6833  0710  0092               	movwf	18	;volatile
  6834                           
  6835                           ;flash.c: 21: PMCON1bits.FREE = 1;
  6836  0711  1615               	bsf	21,4	;volsfr
  6837                           
  6838                           ;flash.c: 22: PMCON1bits.WREN = 1;
  6839  0712  1515               	bsf	21,2	;volsfr
  6840                           
  6841                           ;flash.c: 24: PMCON2 = 0x55;
  6842  0713  3055               	movlw	85
  6843  0714  0096               	movwf	22	;volsfr
  6844                           
  6845                           ;flash.c: 25: PMCON2 = 0xAA;
  6846  0715  30AA               	movlw	170
  6847  0716  0096               	movwf	22	;volsfr
  6848                           
  6849                           ;flash.c: 27: PMCON1bits.WR = 1;
  6850  0717  1495               	bsf	21,1	;volsfr
  6851                           
  6852                           ;flash.c: 29: __nop();
  6853  0718  0000               	nop
  6854                           
  6855                           ;flash.c: 30: __nop();
  6856  0719  0000               	nop
  6857                           
  6858                           ;flash.c: 32: PMCON1bits.WREN = 0;
  6859  071A  0031               	movlb	17	; select bank17
  6860  071B  1115               	bcf	21,2	;volsfr
  6861                           
  6862                           ;flash.c: 36: PMCON1 = 0x00;
  6863  071C  0195               	clrf	21	;volsfr
  6864                           
  6865                           ;flash.c: 38: PMADRL = (char) (address >> 0);
  6866  071D  0020               	movlb	0	; select bank0
  6867  071E  0825               	movf	flashWriteByte@address,w
  6868  071F  0031               	movlb	17	; select bank17
  6869  0720  0091               	movwf	17	;volatile
  6870                           
  6871                           ;flash.c: 39: PMADRH = (char) (address >> 8);
  6872  0721  0020               	movlb	0	; select bank0
  6873  0722  0826               	movf	flashWriteByte@address+1,w
  6874  0723  0031               	movlb	17	; select bank17
  6875  0724  0092               	movwf	18	;volatile
  6876                           
  6877                           ;flash.c: 41: PMCON1bits.FREE = 0;
  6878  0725  1215               	bcf	21,4	;volsfr
  6879                           
  6880                           ;flash.c: 42: PMCON1bits.LWLO = 1;
  6881  0726  1695               	bsf	21,5	;volsfr
  6882                           
  6883                           ;flash.c: 43: PMCON1bits.WREN = 1;
  6884  0727  1515               	bsf	21,2	;volsfr
  6885                           
  6886                           ;flash.c: 45: PMDATL = (data >> 0);
  6887  0728  0020               	movlb	0	; select bank0
  6888  0729  0823               	movf	flashWriteByte@data,w
  6889  072A  0031               	movlb	17	; select bank17
  6890  072B  0093               	movwf	19	;volatile
  6891                           
  6892                           ;flash.c: 46: PMDATH = (data >> 8);
  6893  072C  0020               	movlb	0	; select bank0
  6894  072D  0824               	movf	flashWriteByte@data+1,w
  6895  072E  0031               	movlb	17	; select bank17
  6896  072F  0094               	movwf	20	;volatile
  6897                           
  6898                           ;flash.c: 48: PMCON1bits.LWLO = 0;
  6899  0730  1295               	bcf	21,5	;volsfr
  6900                           
  6901                           ;flash.c: 50: PMCON2 = 0x55;
  6902  0731  3055               	movlw	85
  6903  0732  0096               	movwf	22	;volsfr
  6904                           
  6905                           ;flash.c: 51: PMCON2 = 0xAA;
  6906  0733  30AA               	movlw	170
  6907  0734  0096               	movwf	22	;volsfr
  6908                           
  6909                           ;flash.c: 53: PMCON1bits.WR = 1;
  6910  0735  1495               	bsf	21,1	;volsfr
  6911                           
  6912                           ;flash.c: 55: __nop();
  6913  0736  0000               	nop
  6914                           
  6915                           ;flash.c: 56: __nop();
  6916  0737  0000               	nop
  6917                           
  6918                           ;flash.c: 58: PMCON1bits.WREN = 0;
  6919  0738  0031               	movlb	17	; select bank17
  6920  0739  1115               	bcf	21,2	;volsfr
  6921                           
  6922                           ;flash.c: 61: INTCONbits.GIE = 1;
  6923  073A  178B               	bsf	11,7	;volatile
  6924  073B  0008               	return
  6925  073C                     __end_of_flashWriteByte:	
  6926                           
  6927                           	psect	text28
  6928  0E84                     __ptext28:	
  6929 ;; *************** function _flashRealod *****************
  6930 ;; Defined at:
  6931 ;;		line 90 in file "flash.c"
  6932 ;; Parameters:    Size  Location     Type
  6933 ;;		None
  6934 ;; Auto vars:     Size  Location     Type
  6935 ;;  i               2   11[BANK0 ] unsigned int 
  6936 ;; Return value:  Size  Location     Type
  6937 ;;                  1    wreg      void 
  6938 ;; Registers used:
  6939 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6940 ;; Tracked objects:
  6941 ;;		On entry : 0/0
  6942 ;;		On exit  : 0/0
  6943 ;;		Unchanged: 0/0
  6944 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6945 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6946 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6947 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6948 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6949 ;;Total ram usage:        3 bytes
  6950 ;; Hardware stack levels used:    1
  6951 ;; Hardware stack levels required when called:    8
  6952 ;; This function calls:
  6953 ;;		_flashReadByte
  6954 ;; This function is called by:
  6955 ;;		_main
  6956 ;; This function uses a non-reentrant model
  6957 ;;
  6958                           
  6959                           
  6960                           ;psect for function _flashRealod
  6961  0E84                     _flashRealod:	
  6962                           
  6963                           ;flash.c: 92: for (unsigned int i = 0; i < 32; i++){
  6964                           
  6965                           ;incstack = 0
  6966                           ; Regs used in _flashRealod: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6967  0E84  0020               	movlb	0	; select bank0
  6968  0E85  01AB               	clrf	flashRealod@i
  6969  0E86  01AC               	clrf	flashRealod@i+1
  6970  0E87                     L2:	
  6971  0E87  3000               	movlw	0
  6972  0E88  022C               	subwf	flashRealod@i+1,w
  6973  0E89  3020               	movlw	32
  6974  0E8A  1903               	skipnz
  6975  0E8B  022B               	subwf	flashRealod@i,w
  6976  0E8C  1803               	btfsc	3,0
  6977  0E8D  0008               	return
  6978                           
  6979                           ;flash.c: 93: romHolder.array[i] = flashReadByte(i);
  6980  0E8E  082C               	movf	flashRealod@i+1,w
  6981  0E8F  00A2               	movwf	flashReadByte@offset+1
  6982  0E90  082B               	movf	flashRealod@i,w
  6983  0E91  00A1               	movwf	flashReadByte@offset
  6984  0E92  3187  27AE  318E   	fcall	_flashReadByte
  6985  0E95  0020               	movlb	0	; select bank0
  6986  0E96  0821               	movf	?_flashReadByte,w
  6987  0E97  00AA               	movwf	??_flashRealod
  6988  0E98  082B               	movf	flashRealod@i,w
  6989  0E99  3E20               	addlw	(low (_romHolder| (0+256)))& (0+255)
  6990  0E9A  0086               	movwf	6
  6991  0E9B  3001               	movlw	1	; select bank2/3
  6992  0E9C  0087               	movwf	7
  6993  0E9D  082A               	movf	??_flashRealod,w
  6994  0E9E  0081               	movwf	1
  6995  0E9F  3001               	movlw	1
  6996  0EA0  07AB               	addwf	flashRealod@i,f
  6997  0EA1  3000               	movlw	0
  6998  0EA2  3DAC               	addwfc	flashRealod@i+1,f
  6999  0EA3  2E87               	goto	L2
  7000  0EA4                     __end_of_flashRealod:	
  7001                           
  7002                           	psect	text29
  7003  07AE                     __ptext29:	
  7004 ;; *************** function _flashReadByte *****************
  7005 ;; Defined at:
  7006 ;;		line 64 in file "flash.c"
  7007 ;; Parameters:    Size  Location     Type
  7008 ;;  offset          2    1[BANK0 ] unsigned int 
  7009 ;; Auto vars:     Size  Location     Type
  7010 ;;  address         2    8[BANK0 ] unsigned int 
  7011 ;;  result          2    6[BANK0 ] unsigned int 
  7012 ;; Return value:  Size  Location     Type
  7013 ;;                  2    1[BANK0 ] unsigned int 
  7014 ;; Registers used:
  7015 ;;		wreg, status,2, status,0
  7016 ;; Tracked objects:
  7017 ;;		On entry : 0/0
  7018 ;;		On exit  : 0/0
  7019 ;;		Unchanged: 0/0
  7020 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7021 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7022 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7023 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7024 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7025 ;;Total ram usage:        9 bytes
  7026 ;; Hardware stack levels used:    1
  7027 ;; Hardware stack levels required when called:    7
  7028 ;; This function calls:
  7029 ;;		Nothing
  7030 ;; This function is called by:
  7031 ;;		_flashRealod
  7032 ;; This function uses a non-reentrant model
  7033 ;;
  7034                           
  7035                           
  7036                           ;psect for function _flashReadByte
  7037  07AE                     _flashReadByte:	
  7038                           
  7039                           ;flash.c: 66: unsigned int address;;flash.c: 68: INTCONbits.GIE = 0;
  7040                           
  7041                           ;incstack = 0
  7042                           ; Regs used in _flashReadByte: [wreg+status,2+status,0]
  7043  07AE  138B               	bcf	11,7	;volatile
  7044                           
  7045                           ;flash.c: 70: PMCON1 = 0x00;
  7046  07AF  0031               	movlb	17	; select bank17
  7047  07B0  0195               	clrf	21	;volsfr
  7048                           
  7049                           ;flash.c: 72: address = (0x2000U - 32) + offset;
  7050  07B1  0020               	movlb	0	; select bank0
  7051  07B2  0821               	movf	flashReadByte@offset,w
  7052  07B3  3EE0               	addlw	224
  7053  07B4  00A8               	movwf	flashReadByte@address
  7054  07B5  301F               	movlw	31
  7055  07B6  3D22               	addwfc	flashReadByte@offset+1,w
  7056  07B7  00A9               	movwf	flashReadByte@address+1
  7057                           
  7058                           ;flash.c: 73: PMADRL = (char) (address >> 0);
  7059  07B8  0828               	movf	flashReadByte@address,w
  7060  07B9  0031               	movlb	17	; select bank17
  7061  07BA  0091               	movwf	17	;volatile
  7062                           
  7063                           ;flash.c: 74: PMADRH = (char) (address >> 8);
  7064  07BB  0020               	movlb	0	; select bank0
  7065  07BC  0829               	movf	flashReadByte@address+1,w
  7066  07BD  0031               	movlb	17	; select bank17
  7067  07BE  0092               	movwf	18	;volatile
  7068                           
  7069                           ;flash.c: 76: PMCON1bits.RD = 1;
  7070  07BF  1415               	bsf	21,0	;volsfr
  7071                           
  7072                           ;flash.c: 78: __nop();
  7073  07C0  0000               	nop
  7074                           
  7075                           ;flash.c: 79: __nop();
  7076  07C1  0000               	nop
  7077                           
  7078                           ;flash.c: 81: unsigned int result = 0;
  7079  07C2  0020               	movlb	0	; select bank0
  7080  07C3  01A6               	clrf	flashReadByte@result
  7081  07C4  01A7               	clrf	flashReadByte@result+1
  7082                           
  7083                           ;flash.c: 82: result = PMDATL;
  7084  07C5  0031               	movlb	17	; select bank17
  7085  07C6  0813               	movf	19,w	;volatile
  7086  07C7  0020               	movlb	0	; select bank0
  7087  07C8  00A3               	movwf	??_flashReadByte
  7088  07C9  01A4               	clrf	??_flashReadByte+1
  7089  07CA  0823               	movf	??_flashReadByte,w
  7090  07CB  00A6               	movwf	flashReadByte@result
  7091  07CC  0824               	movf	??_flashReadByte+1,w
  7092  07CD  00A7               	movwf	flashReadByte@result+1
  7093                           
  7094                           ;flash.c: 83: result|= ( (unsigned) (PMDATH) << 8);
  7095  07CE  0031               	movlb	17	; select bank17
  7096  07CF  0814               	movf	20,w	;volatile
  7097  07D0  0020               	movlb	0	; select bank0
  7098  07D1  00A3               	movwf	??_flashReadByte
  7099  07D2  01A4               	clrf	??_flashReadByte+1
  7100  07D3  0823               	movf	??_flashReadByte,w
  7101  07D4  00A4               	movwf	??_flashReadByte+1
  7102  07D5  01A3               	clrf	??_flashReadByte
  7103  07D6  0823               	movf	??_flashReadByte,w
  7104  07D7  04A6               	iorwf	flashReadByte@result,f
  7105  07D8  0824               	movf	??_flashReadByte+1,w
  7106  07D9  04A7               	iorwf	flashReadByte@result+1,f
  7107                           
  7108                           ;flash.c: 85: INTCONbits.GIE = 1;
  7109  07DA  178B               	bsf	11,7	;volatile
  7110                           
  7111                           ;flash.c: 87: return result;
  7112  07DB  0827               	movf	flashReadByte@result+1,w
  7113  07DC  00A2               	movwf	?_flashReadByte+1
  7114  07DD  0826               	movf	flashReadByte@result,w
  7115  07DE  00A1               	movwf	?_flashReadByte
  7116  07DF  0008               	return
  7117  07E0                     __end_of_flashReadByte:	
  7118                           
  7119                           	psect	intentry
  7120  0004                     __pintentry:	
  7121 ;; *************** function _ISR *****************
  7122 ;; Defined at:
  7123 ;;		line 15 in file "main.c"
  7124 ;; Parameters:    Size  Location     Type
  7125 ;;		None
  7126 ;; Auto vars:     Size  Location     Type
  7127 ;;		None
  7128 ;; Return value:  Size  Location     Type
  7129 ;;                  1    wreg      void 
  7130 ;; Registers used:
  7131 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7132 ;; Tracked objects:
  7133 ;;		On entry : 0/0
  7134 ;;		On exit  : 0/0
  7135 ;;		Unchanged: 0/0
  7136 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7137 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7138 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7139 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7140 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7141 ;;Total ram usage:        0 bytes
  7142 ;; Hardware stack levels used:    1
  7143 ;; Hardware stack levels required when called:    6
  7144 ;; This function calls:
  7145 ;;		_nrf24l01ISR
  7146 ;; This function is called by:
  7147 ;;		Interrupt level 1
  7148 ;; This function uses a non-reentrant model
  7149 ;;
  7150                           
  7151  0004                     _ISR:	
  7152                           
  7153                           ;incstack = 0
  7154  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
  7155                           
  7156                           ; Regs used in _ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7157  0005  3180               	pagesel	$
  7158                           
  7159                           ;main.c: 17: if (PIR0bits.INTF){
  7160  0006  0020               	movlb	0	; select bank0
  7161  0007  1C10               	btfss	16,0	;volatile
  7162  0008  280D               	goto	i1l215
  7163                           
  7164                           ;main.c: 18: nrf24l01ISR();
  7165  0009  3185  25A0         	fcall	_nrf24l01ISR
  7166                           
  7167                           ;main.c: 19: PIR0bits.INTF = 0;
  7168  000B  0020               	movlb	0	; select bank0
  7169  000C  1010               	bcf	16,0	;volatile
  7170  000D                     i1l215:	
  7171  000D  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
  7172  000E  0009               	retfie
  7173  000F                     __end_of_ISR:	
  7174                           
  7175                           	psect	text31
  7176  05A0                     __ptext31:	
  7177 ;; *************** function _nrf24l01ISR *****************
  7178 ;; Defined at:
  7179 ;;		line 246 in file "nrf24l01.c"
  7180 ;; Parameters:    Size  Location     Type
  7181 ;;		None
  7182 ;; Auto vars:     Size  Location     Type
  7183 ;;  status          1    0[BANK0 ] struct .
  7184 ;; Return value:  Size  Location     Type
  7185 ;;                  1    wreg      void 
  7186 ;; Registers used:
  7187 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7188 ;; Tracked objects:
  7189 ;;		On entry : 0/0
  7190 ;;		On exit  : 0/0
  7191 ;;		Unchanged: 0/0
  7192 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7193 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7194 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7195 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7196 ;;      Totals:         1       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7197 ;;Total ram usage:        2 bytes
  7198 ;; Hardware stack levels used:    1
  7199 ;; Hardware stack levels required when called:    5
  7200 ;; This function calls:
  7201 ;;		_exception
  7202 ;;		_nrf24l01CheckACK
  7203 ;;		_nrf24l01ReceivePacket
  7204 ;;		i1_nrf24l01Send
  7205 ;;		i1_nrf24l01SetRXMode
  7206 ;; This function is called by:
  7207 ;;		_ISR
  7208 ;; This function uses a non-reentrant model
  7209 ;;
  7210                           
  7211                           
  7212                           ;psect for function _nrf24l01ISR
  7213  05A0                     _nrf24l01ISR:	
  7214                           
  7215                           ;nrf24l01.c: 248: n_STATUS_t status;;nrf24l01.c: 249: status.byte = nrf24l01Send((unsign
      +                          ed) 0b00000000 | (unsigned) 0x07, 0);
  7216                           
  7217                           ;incstack = 0
  7218                           ; Regs used in _nrf24l01ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7219  05A0  01F1               	clrf	i1nrf24l01Send@data
  7220  05A1  3007               	movlw	7
  7221  05A2  318E  2612  3185   	fcall	i1_nrf24l01Send
  7222  05A5  00FD               	movwf	??_nrf24l01ISR
  7223  05A6  087D               	movf	??_nrf24l01ISR,w
  7224  05A7  0020               	movlb	0	; select bank0
  7225  05A8  00A0               	movwf	nrf24l01ISR@status
  7226                           
  7227                           ;nrf24l01.c: 254: };nrf24l01.c: 257: if (status.byte == 0xFF){
  7228  05A9  0A20               	incf	nrf24l01ISR@status,w
  7229  05AA  1D03               	btfss	3,2
  7230  05AB  2DB0               	goto	i1l3063
  7231                           
  7232                           ;nrf24l01.c: 258: exception(2);
  7233  05AC  3002               	movlw	2
  7234  05AD  318D  25AE  3185   	fcall	_exception
  7235  05B0                     i1l3063:	
  7236                           
  7237                           ;nrf24l01.c: 259: };nrf24l01.c: 261: if (status.TX_DS){
  7238  05B0  0020               	movlb	0	; select bank0
  7239  05B1  1EA0               	btfss	nrf24l01ISR@status,5
  7240  05B2  2DBF               	goto	i1l3071
  7241                           
  7242                           ;nrf24l01.c: 264: nrf24l01.TXBusy = 0;
  7243  05B3  105B               	bcf	_nrf24l01,0	;volatile
  7244                           
  7245                           ;nrf24l01.c: 267: if (!nrf24l01.RXMode){
  7246  05B4  195B               	btfsc	_nrf24l01,2	;volatile
  7247  05B5  2DBF               	goto	i1l3071
  7248                           
  7249                           ;nrf24l01.c: 268: if (TXPacket->packetData.ACKRequest){
  7250  05B6  0859               	movf	_TXPacket,w
  7251  05B7  0086               	movwf	6
  7252  05B8  0187               	clrf	7
  7253  05B9  1D01               	btfss	1,2
  7254  05BA  2DBF               	goto	i1l3071
  7255                           
  7256                           ;nrf24l01.c: 271: nrf24l01SetRXMode(1);
  7257  05BB  3001               	movlw	1
  7258  05BC  3187  2777  3185   	fcall	i1_nrf24l01SetRXMode
  7259  05BF                     i1l3071:	
  7260                           
  7261                           ;nrf24l01.c: 272: };nrf24l01.c: 273: };nrf24l01.c: 274: };nrf24l01.c: 277: if (status.RX
      +                          _DR){
  7262  05BF  0020               	movlb	0	; select bank0
  7263  05C0  1F20               	btfss	nrf24l01ISR@status,6
  7264  05C1  2DE4               	goto	i1l3085
  7265                           
  7266                           ;nrf24l01.c: 280: if (!nrf24l01.RXPending){
  7267  05C2  18DB               	btfsc	_nrf24l01,1	;volatile
  7268  05C3  2DE3               	goto	i1l365
  7269                           
  7270                           ;nrf24l01.c: 283: nrf24l01.RXPending = 1;
  7271  05C4  14DB               	bsf	_nrf24l01,1	;volatile
  7272                           
  7273                           ;nrf24l01.c: 285: nrf24l01ReceivePacket();
  7274  05C5  3185  25ED  3185   	fcall	_nrf24l01ReceivePacket
  7275                           
  7276                           ;nrf24l01.c: 288: RXPacket.packetData.RPD = nrf24l01Send((unsigned) 0b00000000 | (unsign
      +                          ed) 0x09, 0);
  7277  05C8  01F1               	clrf	i1nrf24l01Send@data
  7278  05C9  3009               	movlw	9
  7279  05CA  318E  2612  3185   	fcall	i1_nrf24l01Send
  7280  05CD  00FD               	movwf	??_nrf24l01ISR
  7281  05CE  0022               	movlb	2	; select bank2
  7282  05CF  0840               	movf	_RXPacket^(0+256),w
  7283  05D0  067D               	xorwf	??_nrf24l01ISR,w
  7284  05D1  39FE               	andlw	-2
  7285  05D2  067D               	xorwf	??_nrf24l01ISR,w
  7286  05D3  00C0               	movwf	_RXPacket^(0+256)
  7287                           
  7288                           ;nrf24l01.c: 291: RXPacket.packetData.Pipe = status.RX_P_NO;
  7289  05D4  0020               	movlb	0	; select bank0
  7290  05D5  0C20               	rrf	nrf24l01ISR@status,w
  7291  05D6  3907               	andlw	7
  7292  05D7  00FD               	movwf	??_nrf24l01ISR
  7293  05D8  0EFD               	swapf	??_nrf24l01ISR,f
  7294  05D9  0022               	movlb	2	; select bank2
  7295  05DA  0840               	movf	_RXPacket^(0+256),w
  7296  05DB  067D               	xorwf	??_nrf24l01ISR,w
  7297  05DC  398F               	andlw	-113
  7298  05DD  067D               	xorwf	??_nrf24l01ISR,w
  7299  05DE  00C0               	movwf	_RXPacket^(0+256)
  7300                           
  7301                           ;nrf24l01.c: 293: nrf24l01CheckACK();
  7302  05DF  318E  2664  3185   	fcall	_nrf24l01CheckACK
  7303                           
  7304                           ;nrf24l01.c: 294: }
  7305  05E2  2DE4               	goto	i1l3085
  7306  05E3                     i1l365:	
  7307                           
  7308                           ;nrf24l01.c: 297: else{;nrf24l01.c: 300: status.RX_DR = 0;
  7309  05E3  1320               	bcf	nrf24l01ISR@status,6
  7310  05E4                     i1l3085:	
  7311                           
  7312                           ;nrf24l01.c: 301: };nrf24l01.c: 303: };nrf24l01.c: 306: nrf24l01Send((unsigned) 0b001000
      +                          00 | (unsigned) 0x07, status.byte);
  7313  05E4  0020               	movlb	0	; select bank0
  7314  05E5  0820               	movf	nrf24l01ISR@status,w
  7315  05E6  00FD               	movwf	??_nrf24l01ISR
  7316  05E7  087D               	movf	??_nrf24l01ISR,w
  7317  05E8  00F1               	movwf	i1nrf24l01Send@data
  7318  05E9  3027               	movlw	39
  7319  05EA  318E  2612         	fcall	i1_nrf24l01Send
  7320  05EC  0008               	return
  7321  05ED                     __end_of_nrf24l01ISR:	
  7322                           
  7323                           	psect	text32
  7324  05ED                     __ptext32:	
  7325 ;; *************** function _nrf24l01ReceivePacket *****************
  7326 ;; Defined at:
  7327 ;;		line 135 in file "nrf24l01.c"
  7328 ;; Parameters:    Size  Location     Type
  7329 ;;		None
  7330 ;; Auto vars:     Size  Location     Type
  7331 ;;  i               1   10[COMMON] unsigned char 
  7332 ;;  width           1    9[COMMON] unsigned char 
  7333 ;; Return value:  Size  Location     Type
  7334 ;;                  1    wreg      void 
  7335 ;; Registers used:
  7336 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7337 ;; Tracked objects:
  7338 ;;		On entry : 0/0
  7339 ;;		On exit  : 0/0
  7340 ;;		Unchanged: 0/0
  7341 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7342 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7343 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7344 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7345 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7346 ;;Total ram usage:        3 bytes
  7347 ;; Hardware stack levels used:    1
  7348 ;; Hardware stack levels required when called:    3
  7349 ;; This function calls:
  7350 ;;		_nrf24l01CEHigh
  7351 ;;		_nrf24l01CELow
  7352 ;;		_nrf24l01SPIEnd
  7353 ;;		_nrf24l01SPISend
  7354 ;;		_nrf24l01SPIStart
  7355 ;;		i1_memset
  7356 ;;		i1_nrf24l01Send
  7357 ;; This function is called by:
  7358 ;;		_nrf24l01ISR
  7359 ;; This function uses a non-reentrant model
  7360 ;;
  7361                           
  7362                           
  7363                           ;psect for function _nrf24l01ReceivePacket
  7364  05ED                     _nrf24l01ReceivePacket:	
  7365                           
  7366                           ;nrf24l01.c: 138: memset(RXPacket.Message, 0 ,sizeof(RXPacket.Message));
  7367                           
  7368                           ;incstack = 0
  7369                           ; Regs used in _nrf24l01ReceivePacket: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  7370  05ED  3041               	movlw	low (_RXPacket+1)
  7371  05EE  00F0               	movwf	i1memset@p1
  7372  05EF  3001               	movlw	high (_RXPacket+1)
  7373  05F0  00F1               	movwf	i1memset@p1+1
  7374  05F1  3000               	movlw	0
  7375  05F2  00F2               	movwf	i1memset@c
  7376  05F3  00F3               	movwf	i1memset@c+1
  7377  05F4  3020               	movlw	32
  7378  05F5  00F4               	movwf	i1memset@n
  7379  05F6  3000               	movlw	0
  7380  05F7  00F5               	movwf	i1memset@n+1
  7381  05F8  318D  25C6  3185   	fcall	i1_memset
  7382                           
  7383                           ;nrf24l01.c: 139: RXPacket.packetData.byte = 0x00;
  7384  05FB  0022               	movlb	2	; select bank2
  7385  05FC  01C0               	clrf	_RXPacket^(0+256)
  7386                           
  7387                           ;nrf24l01.c: 142: unsigned char width = nrf24l01Send((unsigned) 0b01100000, 0);
  7388  05FD  01F1               	clrf	i1nrf24l01Send@data
  7389  05FE  3060               	movlw	96
  7390  05FF  318E  2612  3185   	fcall	i1_nrf24l01Send
  7391  0602  00F8               	movwf	??_nrf24l01ReceivePacket
  7392  0603  0878               	movf	??_nrf24l01ReceivePacket,w
  7393  0604  00F9               	movwf	nrf24l01ReceivePacket@width
  7394                           
  7395                           ;nrf24l01.c: 143: unsigned char i = 0;
  7396  0605  01FA               	clrf	nrf24l01ReceivePacket@i
  7397                           
  7398                           ;nrf24l01.c: 146: nrf24l01CELow();
  7399  0606  318D  2543  3185   	fcall	_nrf24l01CELow
  7400                           
  7401                           ;nrf24l01.c: 149: nrf24l01SPIStart();
  7402  0609  318D  2561  3185   	fcall	_nrf24l01SPIStart
  7403                           
  7404                           ;nrf24l01.c: 152: nrf24l01SPISend((unsigned) 0b01100001);
  7405  060C  3061               	movlw	97
  7406  060D  318D  2569  3185   	fcall	_nrf24l01SPISend
  7407                           
  7408                           ;nrf24l01.c: 155: RXPacket.packetData.byte = nrf24l01SPISend(0);
  7409  0610  3000               	movlw	0
  7410  0611  318D  2569  3185   	fcall	_nrf24l01SPISend
  7411  0614  00F8               	movwf	??_nrf24l01ReceivePacket
  7412  0615  0878               	movf	??_nrf24l01ReceivePacket,w
  7413  0616  0022               	movlb	2	; select bank2
  7414  0617  00C0               	movwf	_RXPacket^(0+256)
  7415                           
  7416                           ;nrf24l01.c: 156: width--;
  7417  0618  3001               	movlw	1
  7418  0619  02F9               	subwf	nrf24l01ReceivePacket@width,f
  7419                           
  7420                           ;nrf24l01.c: 158: for (i = 0; (i < width) && (i < sizeof(RXPacket.Message)); i++){
  7421  061A  01FA               	clrf	nrf24l01ReceivePacket@i
  7422  061B  2E2C               	goto	i1l3047
  7423  061C                     i1l3043:	
  7424                           
  7425                           ;nrf24l01.c: 160: RXPacket.Message[i] = nrf24l01SPISend(0);
  7426  061C  3000               	movlw	0
  7427  061D  318D  2569  3185   	fcall	_nrf24l01SPISend
  7428  0620  00F8               	movwf	??_nrf24l01ReceivePacket
  7429  0621  087A               	movf	nrf24l01ReceivePacket@i,w
  7430  0622  3E41               	addlw	(low ((_RXPacket| (0+256)+1)))& (0+255)
  7431  0623  0086               	movwf	6
  7432  0624  3001               	movlw	1	; select bank2/3
  7433  0625  0087               	movwf	7
  7434  0626  0878               	movf	??_nrf24l01ReceivePacket,w
  7435  0627  0081               	movwf	1
  7436  0628  3001               	movlw	1
  7437  0629  00F8               	movwf	??_nrf24l01ReceivePacket
  7438  062A  0878               	movf	??_nrf24l01ReceivePacket,w
  7439  062B  07FA               	addwf	nrf24l01ReceivePacket@i,f
  7440  062C                     i1l3047:	
  7441  062C  0879               	movf	nrf24l01ReceivePacket@width,w
  7442  062D  027A               	subwf	nrf24l01ReceivePacket@i,w
  7443  062E  1803               	skipnc
  7444  062F  2E34               	goto	i1l3051
  7445  0630  3020               	movlw	32
  7446  0631  027A               	subwf	nrf24l01ReceivePacket@i,w
  7447  0632  1C03               	skipc
  7448  0633  2E1C               	goto	i1l3043
  7449  0634                     i1l3051:	
  7450                           
  7451                           ;nrf24l01.c: 161: };nrf24l01.c: 164: nrf24l01SPIEnd();
  7452  0634  318D  2552  3185   	fcall	_nrf24l01SPIEnd
  7453                           
  7454                           ;nrf24l01.c: 167: nrf24l01CEHigh();
  7455  0637  318D  2540         	fcall	_nrf24l01CEHigh
  7456  0639  0008               	return
  7457  063A                     __end_of_nrf24l01ReceivePacket:	
  7458                           
  7459                           	psect	text33
  7460  0DC6                     __ptext33:	
  7461 ;; *************** function i1_memset *****************
  7462 ;; Defined at:
  7463 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\memset.c"
  7464 ;; Parameters:    Size  Location     Type
  7465 ;;  p1              2    0[COMMON] PTR void 
  7466 ;;		 -> RXPacket(33), main@packet(33), loop@packet(33), 
  7467 ;;  c               2    2[COMMON] int 
  7468 ;;  n               2    4[COMMON] unsigned int 
  7469 ;; Auto vars:     Size  Location     Type
  7470 ;;  memset          2    6[COMMON] PTR unsigned char 
  7471 ;;		 -> RXPacket(33), main@packet(33), loop@packet(33), 
  7472 ;; Return value:  Size  Location     Type
  7473 ;;                  1    wreg      PTR void 
  7474 ;; Registers used:
  7475 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  7476 ;; Tracked objects:
  7477 ;;		On entry : 0/0
  7478 ;;		On exit  : 0/0
  7479 ;;		Unchanged: 0/0
  7480 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7481 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7482 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7483 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7484 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7485 ;;Total ram usage:        8 bytes
  7486 ;; Hardware stack levels used:    1
  7487 ;; This function calls:
  7488 ;;		Nothing
  7489 ;; This function is called by:
  7490 ;;		_nrf24l01ReceivePacket
  7491 ;; This function uses a non-reentrant model
  7492 ;;
  7493                           
  7494                           
  7495                           ;psect for function i1_memset
  7496  0DC6                     i1_memset:	
  7497                           
  7498                           ;incstack = 0
  7499                           ; Regs used in i1_memset: [wreg+fsr1l+fsr1h+status,2+status,0]
  7500  0DC6  0871               	movf	i1memset@p1+1,w
  7501  0DC7  00F7               	movwf	i1memset@p+1
  7502  0DC8  0870               	movf	i1memset@p1,w
  7503  0DC9  00F6               	movwf	i1memset@p
  7504  0DCA                     i1l3011:	
  7505  0DCA  3001               	movlw	1
  7506  0DCB  02F4               	subwf	i1memset@n,f
  7507  0DCC  3000               	movlw	0
  7508  0DCD  3BF5               	subwfb	i1memset@n+1,f
  7509  0DCE  0A74               	incf	i1memset@n,w
  7510  0DCF  1903               	btfsc	3,2
  7511  0DD0  0A75               	incf	i1memset@n+1,w
  7512  0DD1  1903               	btfsc	3,2
  7513  0DD2  0008               	return
  7514  0DD3  0876               	movf	i1memset@p,w
  7515  0DD4  0086               	movwf	6
  7516  0DD5  0877               	movf	i1memset@p+1,w
  7517  0DD6  0087               	movwf	7
  7518  0DD7  0872               	movf	i1memset@c,w
  7519  0DD8  0081               	movwf	1
  7520  0DD9  3001               	movlw	1
  7521  0DDA  07F6               	addwf	i1memset@p,f
  7522  0DDB  3000               	movlw	0
  7523  0DDC  3DF7               	addwfc	i1memset@p+1,f
  7524  0DDD  2DCA               	goto	i1l3011
  7525  0DDE                     __end_ofi1_memset:	
  7526                           ;	Return value of i1_memset is never used
  7527                           
  7528                           
  7529                           	psect	text34
  7530  0E64                     __ptext34:	
  7531 ;; *************** function _nrf24l01CheckACK *****************
  7532 ;; Defined at:
  7533 ;;		line 98 in file "nrf24l01.c"
  7534 ;; Parameters:    Size  Location     Type
  7535 ;;		None
  7536 ;; Auto vars:     Size  Location     Type
  7537 ;;		None
  7538 ;; Return value:  Size  Location     Type
  7539 ;;                  1    wreg      void 
  7540 ;; Registers used:
  7541 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7542 ;; Tracked objects:
  7543 ;;		On entry : 0/0
  7544 ;;		On exit  : 0/0
  7545 ;;		Unchanged: 0/0
  7546 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7547 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7548 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7549 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7550 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7551 ;;Total ram usage:        1 bytes
  7552 ;; Hardware stack levels used:    1
  7553 ;; Hardware stack levels required when called:    4
  7554 ;; This function calls:
  7555 ;;		_strcmp
  7556 ;;		i1_nrf24l01SetRXMode
  7557 ;; This function is called by:
  7558 ;;		_nrf24l01ISR
  7559 ;; This function uses a non-reentrant model
  7560 ;;
  7561                           
  7562                           
  7563                           ;psect for function _nrf24l01CheckACK
  7564  0E64                     _nrf24l01CheckACK:	
  7565                           
  7566                           ;nrf24l01.c: 102: if (!RXPacket.packetData.IsACK){
  7567                           
  7568                           ;incstack = 0
  7569                           ; Regs used in _nrf24l01CheckACK: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7570  0E64  0022               	movlb	2	; select bank2
  7571  0E65  1DC0               	btfss	_RXPacket^(0+256),3
  7572  0E66  0008               	return
  7573                           
  7574                           ;nrf24l01.c: 104: };nrf24l01.c: 107: nrf24l01.RXPending = 0;
  7575                           
  7576                           ;nrf24l01.c: 103: return;
  7577  0E67  0020               	movlb	0	; select bank0
  7578  0E68  10DB               	bcf	_nrf24l01,1	;volatile
  7579                           
  7580                           ;nrf24l01.c: 110: if (!TXPacket->packetData.ACKRequest){
  7581  0E69  0859               	movf	_TXPacket,w
  7582  0E6A  0086               	movwf	6
  7583  0E6B  0187               	clrf	7
  7584  0E6C  1D01               	btfss	1,2
  7585  0E6D  0008               	return
  7586                           
  7587                           ;nrf24l01.c: 112: };nrf24l01.c: 115: if (strcmp(TXPacket->Message, RXPacket.Message) != 
      +                          0){
  7588                           
  7589                           ;nrf24l01.c: 111: return;
  7590  0E6E  3041               	movlw	(low ((_RXPacket| (0+256)+1)))& (0+255)
  7591  0E6F  00F7               	movwf	??_nrf24l01CheckACK
  7592  0E70  0877               	movf	??_nrf24l01CheckACK,w
  7593  0E71  00F0               	movwf	strcmp@s2
  7594  0E72  0859               	movf	_TXPacket,w
  7595  0E73  3E01               	addlw	1
  7596  0E74  318F  272E  318E   	fcall	_strcmp
  7597  0E77  0870               	movf	?_strcmp,w
  7598  0E78  0471               	iorwf	?_strcmp+1,w
  7599  0E79  1D03               	btfss	3,2
  7600  0E7A  0008               	return
  7601                           
  7602                           ;nrf24l01.c: 117: };nrf24l01.c: 124: TXPacket->packetData.ACKRequest = 0;
  7603                           
  7604                           ;nrf24l01.c: 116: return;
  7605  0E7B  0020               	movlb	0	; select bank0
  7606  0E7C  0859               	movf	_TXPacket,w
  7607  0E7D  0086               	movwf	6
  7608  0E7E  0187               	clrf	7
  7609  0E7F  1101               	bcf	1,2
  7610                           
  7611                           ;nrf24l01.c: 127: nrf24l01SetRXMode(0);
  7612  0E80  3000               	movlw	0
  7613  0E81  3187  2777         	fcall	i1_nrf24l01SetRXMode
  7614  0E83  0008               	return
  7615  0E84                     __end_of_nrf24l01CheckACK:	
  7616                           
  7617                           	psect	text35
  7618  0777                     __ptext35:	
  7619 ;; *************** function i1_nrf24l01SetRXMode *****************
  7620 ;; Defined at:
  7621 ;;		line 54 in file "nrf24l01.c"
  7622 ;; Parameters:    Size  Location     Type
  7623 ;;  rxMode          1    wreg     unsigned char 
  7624 ;; Auto vars:     Size  Location     Type
  7625 ;;  rxMode          1    6[COMMON] unsigned char 
  7626 ;;  nrf24l01SetR    1    5[COMMON] struct .
  7627 ;; Return value:  Size  Location     Type
  7628 ;;                  1    wreg      void 
  7629 ;; Registers used:
  7630 ;;		wreg, status,2, status,0, pclath, cstack
  7631 ;; Tracked objects:
  7632 ;;		On entry : 0/0
  7633 ;;		On exit  : 0/0
  7634 ;;		Unchanged: 0/0
  7635 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7636 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7637 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7638 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7639 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7640 ;;Total ram usage:        3 bytes
  7641 ;; Hardware stack levels used:    1
  7642 ;; Hardware stack levels required when called:    3
  7643 ;; This function calls:
  7644 ;;		_nrf24l01CEHigh
  7645 ;;		_nrf24l01CELow
  7646 ;;		i1_nrf24l01Send
  7647 ;; This function is called by:
  7648 ;;		_nrf24l01CheckACK
  7649 ;;		_nrf24l01ISR
  7650 ;; This function uses a non-reentrant model
  7651 ;;
  7652                           
  7653                           
  7654                           ;psect for function i1_nrf24l01SetRXMode
  7655  0777                     i1_nrf24l01SetRXMode:	
  7656                           
  7657                           ;incstack = 0
  7658                           ; Regs used in i1_nrf24l01SetRXMode: [wreg+status,2+status,0+pclath+cstack]
  7659                           ;i1nrf24l01SetRXMode@rxMode stored from wreg
  7660  0777  00F6               	movwf	i1nrf24l01SetRXMode@rxMode
  7661                           
  7662                           ;nrf24l01.c: 56: n_CONFIG_t config;;nrf24l01.c: 59: config.byte = nrf24l01Send((unsigned
      +                          ) 0b00000000 | (unsigned) 0x00, 0);
  7663  0778  01F1               	clrf	i1nrf24l01Send@data
  7664  0779  3000               	movlw	0
  7665  077A  318E  2612  3187   	fcall	i1_nrf24l01Send
  7666  077D  00F4               	movwf	??i1_nrf24l01SetRXMode
  7667  077E  0874               	movf	??i1_nrf24l01SetRXMode,w
  7668  077F  00F5               	movwf	i1nrf24l01SetRXMode@config
  7669                           
  7670                           ;nrf24l01.c: 62: if (config.PRIM_RX != rxMode){
  7671  0780  0875               	movf	i1nrf24l01SetRXMode@config,w
  7672  0781  3901               	andlw	1
  7673  0782  0676               	xorwf	i1nrf24l01SetRXMode@rxMode,w
  7674  0783  1903               	skipnz
  7675  0784  2FA7               	goto	i1l2339
  7676                           
  7677                           ;nrf24l01.c: 65: nrf24l01CELow();
  7678  0785  318D  2543  3187   	fcall	_nrf24l01CELow
  7679                           
  7680                           ;nrf24l01.c: 66: _delay((unsigned long)((200)*(16000000/4000000.0)));
  7681  0788  30A0               	movlw	160
  7682  0789                     u188_27:	
  7683  0789  3200               	nop2
  7684  078A  0B89               	decfsz	9,f
  7685  078B  2F89               	goto	u188_27
  7686                           
  7687                           ;nrf24l01.c: 69: config.PRIM_RX = rxMode;
  7688  078C  0876               	movf	i1nrf24l01SetRXMode@rxMode,w
  7689  078D  3901               	andlw	1
  7690  078E  1075               	bcf	i1nrf24l01SetRXMode@config,0
  7691  078F  1D03               	skipz
  7692  0790  1475               	bsf	i1nrf24l01SetRXMode@config,0
  7693                           
  7694                           ;nrf24l01.c: 70: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x00, config.byte);
  7695  0791  0875               	movf	i1nrf24l01SetRXMode@config,w
  7696  0792  00F4               	movwf	??i1_nrf24l01SetRXMode
  7697  0793  0874               	movf	??i1_nrf24l01SetRXMode,w
  7698  0794  00F1               	movwf	i1nrf24l01Send@data
  7699  0795  3020               	movlw	32
  7700  0796  318E  2612  3187   	fcall	i1_nrf24l01Send
  7701                           
  7702                           ;nrf24l01.c: 73: _delay((unsigned long)((200)*(16000000/4000000.0)));
  7703  0799  30A0               	movlw	160
  7704  079A                     u189_27:	
  7705  079A  3200               	nop2
  7706  079B  0B89               	decfsz	9,f
  7707  079C  2F9A               	goto	u189_27
  7708                           
  7709                           ;nrf24l01.c: 76: if (rxMode){
  7710  079D  0876               	movf	i1nrf24l01SetRXMode@rxMode,w
  7711  079E  1903               	btfsc	3,2
  7712  079F  2FA7               	goto	i1l2339
  7713                           
  7714                           ;nrf24l01.c: 77: nrf24l01CEHigh();
  7715  07A0  318D  2540  3187   	fcall	_nrf24l01CEHigh
  7716                           
  7717                           ;nrf24l01.c: 78: _delay((unsigned long)((200)*(16000000/4000000.0)));
  7718  07A3  30A0               	movlw	160
  7719  07A4                     u190_27:	
  7720  07A4  3200               	nop2
  7721  07A5  0B89               	decfsz	9,f
  7722  07A6  2FA4               	goto	u190_27
  7723  07A7                     i1l2339:	
  7724                           
  7725                           ;nrf24l01.c: 79: };nrf24l01.c: 80: };nrf24l01.c: 83: nrf24l01.RXMode = rxMode;
  7726  07A7  0876               	movf	i1nrf24l01SetRXMode@rxMode,w
  7727  07A8  3901               	andlw	1
  7728  07A9  0020               	movlb	0	; select bank0
  7729  07AA  115B               	bcf	_nrf24l01,2	;volatile
  7730  07AB  1D03               	skipz
  7731  07AC  155B               	bsf	_nrf24l01,2	;volatile
  7732  07AD  0008               	return
  7733  07AE                     __end_ofi1_nrf24l01SetRXMode:	
  7734                           
  7735                           	psect	text36
  7736  0E12                     __ptext36:	
  7737 ;; *************** function i1_nrf24l01Send *****************
  7738 ;; Defined at:
  7739 ;;		line 9 in file "nrf24l01.c"
  7740 ;; Parameters:    Size  Location     Type
  7741 ;;  command         1    wreg     unsigned char 
  7742 ;;  data            1    1[COMMON] unsigned char 
  7743 ;; Auto vars:     Size  Location     Type
  7744 ;;  command         1    3[COMMON] unsigned char 
  7745 ;; Return value:  Size  Location     Type
  7746 ;;                  1    wreg      unsigned char 
  7747 ;; Registers used:
  7748 ;;		wreg, status,2, status,0, pclath, cstack
  7749 ;; Tracked objects:
  7750 ;;		On entry : 0/0
  7751 ;;		On exit  : 0/0
  7752 ;;		Unchanged: 0/0
  7753 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7754 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7755 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7756 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7757 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7758 ;;Total ram usage:        3 bytes
  7759 ;; Hardware stack levels used:    1
  7760 ;; Hardware stack levels required when called:    2
  7761 ;; This function calls:
  7762 ;;		_enableInterrupts
  7763 ;;		_nrf24l01SPIEnd
  7764 ;;		_nrf24l01SPISend
  7765 ;;		_nrf24l01SPIStart
  7766 ;; This function is called by:
  7767 ;;		_nrf24l01ReceivePacket
  7768 ;;		_nrf24l01ISR
  7769 ;;		i1_nrf24l01SetRXMode
  7770 ;; This function uses a non-reentrant model
  7771 ;;
  7772                           
  7773                           
  7774                           ;psect for function i1_nrf24l01Send
  7775  0E12                     i1_nrf24l01Send:	
  7776                           
  7777                           ;incstack = 0
  7778                           ; Regs used in i1_nrf24l01Send: [wreg+status,2+status,0+pclath+cstack]
  7779                           ;i1nrf24l01Send@command stored from wreg
  7780  0E12  00F3               	movwf	i1nrf24l01Send@command
  7781                           
  7782                           ;nrf24l01.c: 12: enableInterrupts(0);
  7783  0E13  3000               	movlw	0
  7784  0E14  318D  2559  318E   	fcall	_enableInterrupts
  7785                           
  7786                           ;nrf24l01.c: 15: nrf24l01SPIStart();
  7787  0E17  318D  2561  318E   	fcall	_nrf24l01SPIStart
  7788                           
  7789                           ;nrf24l01.c: 18: nrf24l01SPISend(command);
  7790  0E1A  0873               	movf	i1nrf24l01Send@command,w
  7791  0E1B  318D  2569  318E   	fcall	_nrf24l01SPISend
  7792                           
  7793                           ;nrf24l01.c: 21: data = nrf24l01SPISend(data);
  7794  0E1E  0871               	movf	i1nrf24l01Send@data,w
  7795  0E1F  318D  2569  318E   	fcall	_nrf24l01SPISend
  7796  0E22  00F2               	movwf	??i1_nrf24l01Send
  7797  0E23  0872               	movf	??i1_nrf24l01Send,w
  7798  0E24  00F1               	movwf	i1nrf24l01Send@data
  7799                           
  7800                           ;nrf24l01.c: 24: nrf24l01SPIEnd();
  7801  0E25  318D  2552  318E   	fcall	_nrf24l01SPIEnd
  7802                           
  7803                           ;nrf24l01.c: 27: enableInterrupts(1);
  7804  0E28  3001               	movlw	1
  7805  0E29  318D  2559         	fcall	_enableInterrupts
  7806                           
  7807                           ;nrf24l01.c: 29: return data;
  7808  0E2B  0871               	movf	i1nrf24l01Send@data,w
  7809  0E2C  0008               	return
  7810  0E2D                     __end_ofi1_nrf24l01Send:	
  7811                           
  7812                           	psect	text37
  7813  0D61                     __ptext37:	
  7814 ;; *************** function _nrf24l01SPIStart *****************
  7815 ;; Defined at:
  7816 ;;		line 65 in file "interface.c"
  7817 ;; Parameters:    Size  Location     Type
  7818 ;;		None
  7819 ;; Auto vars:     Size  Location     Type
  7820 ;;		None
  7821 ;; Return value:  Size  Location     Type
  7822 ;;                  1    wreg      void 
  7823 ;; Registers used:
  7824 ;;		wreg, status,2, status,0, pclath, cstack
  7825 ;; Tracked objects:
  7826 ;;		On entry : 0/0
  7827 ;;		On exit  : 0/0
  7828 ;;		Unchanged: 0/0
  7829 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7830 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7831 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7832 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7833 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7834 ;;Total ram usage:        0 bytes
  7835 ;; Hardware stack levels used:    1
  7836 ;; Hardware stack levels required when called:    8
  7837 ;; This function calls:
  7838 ;;		_nrf24l01CSLow
  7839 ;; This function is called by:
  7840 ;;		_nrf24l01Send
  7841 ;;		_nrf24l01ReceivePacket
  7842 ;;		_nrf24l01SendPacket
  7843 ;;		_nrf24l01SetTXPipe
  7844 ;;		_nrf24l01InitRegisters
  7845 ;;		i1_nrf24l01Send
  7846 ;; This function uses a non-reentrant model
  7847 ;;
  7848                           
  7849                           
  7850                           ;psect for function _nrf24l01SPIStart
  7851  0D61                     _nrf24l01SPIStart:	
  7852                           
  7853                           ;interface.c: 66: nrf24l01CSLow();
  7854                           
  7855                           ;incstack = 0
  7856 ;; hardware stack exceeded
  7857                           ; Regs used in _nrf24l01SPIStart: [wreg+status,2+status,0+pclath+cstack]
  7858  0D61  318D  2549  318D   	fcall	_nrf24l01CSLow
  7859                           
  7860                           ;interface.c: 67: _delay((unsigned long)((10)*(16000000/4000000.0)));
  7861  0D64  300D               	movlw	13
  7862  0D65                     u191_27:	
  7863  0D65  0B89               	decfsz	9,f
  7864  0D66  2D65               	goto	u191_27
  7865  0D67  0000               	nop
  7866  0D68  0008               	return
  7867  0D69                     __end_of_nrf24l01SPIStart:	
  7868                           
  7869                           	psect	text38
  7870  0D49                     __ptext38:	
  7871 ;; *************** function _nrf24l01CSLow *****************
  7872 ;; Defined at:
  7873 ;;		line 18 in file "interface.c"
  7874 ;; Parameters:    Size  Location     Type
  7875 ;;		None
  7876 ;; Auto vars:     Size  Location     Type
  7877 ;;		None
  7878 ;; Return value:  Size  Location     Type
  7879 ;;                  1    wreg      void 
  7880 ;; Registers used:
  7881 ;;		None
  7882 ;; Tracked objects:
  7883 ;;		On entry : 0/0
  7884 ;;		On exit  : 0/0
  7885 ;;		Unchanged: 0/0
  7886 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7887 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7888 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7889 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7890 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7891 ;;Total ram usage:        0 bytes
  7892 ;; Hardware stack levels used:    1
  7893 ;; Hardware stack levels required when called:    7
  7894 ;; This function calls:
  7895 ;;		Nothing
  7896 ;; This function is called by:
  7897 ;;		_nrf24l01SPIStart
  7898 ;; This function uses a non-reentrant model
  7899 ;;
  7900                           
  7901                           
  7902                           ;psect for function _nrf24l01CSLow
  7903  0D49                     _nrf24l01CSLow:	
  7904                           
  7905                           ;interface.c: 19: PORTAbits.RA1 = 0;
  7906                           
  7907                           ;incstack = 0
  7908 ;; hardware stack exceeded
  7909                           ; Regs used in _nrf24l01CSLow: []
  7910  0D49  0020               	movlb	0	; select bank0
  7911  0D4A  108C               	bcf	12,1	;volatile
  7912  0D4B  0008               	return
  7913  0D4C                     __end_of_nrf24l01CSLow:	
  7914                           
  7915                           	psect	text39
  7916  0D69                     __ptext39:	
  7917 ;; *************** function _nrf24l01SPISend *****************
  7918 ;; Defined at:
  7919 ;;		line 52 in file "interface.c"
  7920 ;; Parameters:    Size  Location     Type
  7921 ;;  data            1    wreg     unsigned char 
  7922 ;; Auto vars:     Size  Location     Type
  7923 ;;  data            1    0[COMMON] unsigned char 
  7924 ;; Return value:  Size  Location     Type
  7925 ;;                  1    wreg      unsigned char 
  7926 ;; Registers used:
  7927 ;;		wreg
  7928 ;; Tracked objects:
  7929 ;;		On entry : 0/0
  7930 ;;		On exit  : 0/0
  7931 ;;		Unchanged: 0/0
  7932 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7933 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7934 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7935 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7936 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7937 ;;Total ram usage:        0 bytes
  7938 ;; Hardware stack levels used:    1
  7939 ;; Hardware stack levels required when called:    7
  7940 ;; This function calls:
  7941 ;;		Nothing
  7942 ;; This function is called by:
  7943 ;;		_nrf24l01Send
  7944 ;;		_nrf24l01ReceivePacket
  7945 ;;		_nrf24l01SendPacket
  7946 ;;		_nrf24l01SetTXPipe
  7947 ;;		_nrf24l01InitRegisters
  7948 ;;		i1_nrf24l01Send
  7949 ;; This function uses a non-reentrant model
  7950 ;;
  7951                           
  7952                           
  7953                           ;psect for function _nrf24l01SPISend
  7954  0D69                     _nrf24l01SPISend:	
  7955                           
  7956                           ;incstack = 0
  7957 ;; hardware stack exceeded
  7958                           ; Regs used in _nrf24l01SPISend: [wreg]
  7959                           ;nrf24l01SPISend@data stored from wreg
  7960  0D69  00F0               	movwf	nrf24l01SPISend@data
  7961                           
  7962                           ;interface.c: 53: SSP1BUF = data;
  7963  0D6A  0870               	movf	nrf24l01SPISend@data,w
  7964  0D6B  0024               	movlb	4	; select bank4
  7965  0D6C  0091               	movwf	17	;volatile
  7966                           
  7967                           ;interface.c: 55: PORTCbits.RC4 = 1;
  7968  0D6D  0020               	movlb	0	; select bank0
  7969  0D6E  160E               	bsf	14,4	;volatile
  7970  0D6F                     i1l94:	
  7971                           ;interface.c: 57: while (!SSP1STATbits.BF){
  7972                           
  7973  0D6F  0024               	movlb	4	; select bank4
  7974  0D70  1814               	btfsc	20,0	;volatile
  7975  0D71  2D74               	goto	i1l1987
  7976                           
  7977                           ;interface.c: 58: __nop();
  7978  0D72  0000               	nop
  7979  0D73  2D6F               	goto	i1l94
  7980  0D74                     i1l1987:	
  7981                           
  7982                           ;interface.c: 59: };interface.c: 61: return SSP1BUF;
  7983  0D74  0811               	movf	17,w	;volatile
  7984  0D75  0008               	return
  7985  0D76                     __end_of_nrf24l01SPISend:	
  7986                           
  7987                           	psect	text40
  7988  0D52                     __ptext40:	
  7989 ;; *************** function _nrf24l01SPIEnd *****************
  7990 ;; Defined at:
  7991 ;;		line 71 in file "interface.c"
  7992 ;; Parameters:    Size  Location     Type
  7993 ;;		None
  7994 ;; Auto vars:     Size  Location     Type
  7995 ;;		None
  7996 ;; Return value:  Size  Location     Type
  7997 ;;                  1    wreg      void 
  7998 ;; Registers used:
  7999 ;;		wreg, status,2, status,0, pclath, cstack
  8000 ;; Tracked objects:
  8001 ;;		On entry : 0/0
  8002 ;;		On exit  : 0/0
  8003 ;;		Unchanged: 0/0
  8004 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8005 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8006 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8007 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8008 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8009 ;;Total ram usage:        0 bytes
  8010 ;; Hardware stack levels used:    1
  8011 ;; Hardware stack levels required when called:    8
  8012 ;; This function calls:
  8013 ;;		_nrf24l01CSHigh
  8014 ;; This function is called by:
  8015 ;;		_nrf24l01Send
  8016 ;;		_nrf24l01ReceivePacket
  8017 ;;		_nrf24l01SendPacket
  8018 ;;		_nrf24l01SetTXPipe
  8019 ;;		_nrf24l01InitRegisters
  8020 ;;		i1_nrf24l01Send
  8021 ;; This function uses a non-reentrant model
  8022 ;;
  8023                           
  8024                           
  8025                           ;psect for function _nrf24l01SPIEnd
  8026  0D52                     _nrf24l01SPIEnd:	
  8027                           
  8028                           ;interface.c: 72: _delay((unsigned long)((10)*(16000000/4000000.0)));
  8029                           
  8030                           ;incstack = 0
  8031 ;; hardware stack exceeded
  8032                           ; Regs used in _nrf24l01SPIEnd: [wreg+status,2+status,0+pclath+cstack]
  8033  0D52  300D               	movlw	13
  8034  0D53                     u192_27:	
  8035  0D53  0B89               	decfsz	9,f
  8036  0D54  2D53               	goto	u192_27
  8037  0D55  0000               	nop
  8038                           
  8039                           ;interface.c: 73: nrf24l01CSHigh();
  8040  0D56  318D  2546         	fcall	_nrf24l01CSHigh
  8041  0D58  0008               	return
  8042  0D59                     __end_of_nrf24l01SPIEnd:	
  8043                           
  8044                           	psect	text41
  8045  0D46                     __ptext41:	
  8046 ;; *************** function _nrf24l01CSHigh *****************
  8047 ;; Defined at:
  8048 ;;		line 23 in file "interface.c"
  8049 ;; Parameters:    Size  Location     Type
  8050 ;;		None
  8051 ;; Auto vars:     Size  Location     Type
  8052 ;;		None
  8053 ;; Return value:  Size  Location     Type
  8054 ;;                  1    wreg      void 
  8055 ;; Registers used:
  8056 ;;		None
  8057 ;; Tracked objects:
  8058 ;;		On entry : 0/0
  8059 ;;		On exit  : 0/0
  8060 ;;		Unchanged: 0/0
  8061 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8062 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8063 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8064 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8065 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8066 ;;Total ram usage:        0 bytes
  8067 ;; Hardware stack levels used:    1
  8068 ;; Hardware stack levels required when called:    7
  8069 ;; This function calls:
  8070 ;;		Nothing
  8071 ;; This function is called by:
  8072 ;;		_nrf24l01SPIEnd
  8073 ;; This function uses a non-reentrant model
  8074 ;;
  8075                           
  8076                           
  8077                           ;psect for function _nrf24l01CSHigh
  8078  0D46                     _nrf24l01CSHigh:	
  8079                           
  8080                           ;interface.c: 24: PORTAbits.RA1 = 1;
  8081                           
  8082                           ;incstack = 0
  8083 ;; hardware stack exceeded
  8084                           ; Regs used in _nrf24l01CSHigh: []
  8085  0D46  0020               	movlb	0	; select bank0
  8086  0D47  148C               	bsf	12,1	;volatile
  8087  0D48  0008               	return
  8088  0D49                     __end_of_nrf24l01CSHigh:	
  8089                           
  8090                           	psect	text42
  8091  0D59                     __ptext42:	
  8092 ;; *************** function _enableInterrupts *****************
  8093 ;; Defined at:
  8094 ;;		line 77 in file "interface.c"
  8095 ;; Parameters:    Size  Location     Type
  8096 ;;  enable          1    wreg     unsigned char 
  8097 ;; Auto vars:     Size  Location     Type
  8098 ;;  enable          1    0[COMMON] unsigned char 
  8099 ;; Return value:  Size  Location     Type
  8100 ;;                  1    wreg      void 
  8101 ;; Registers used:
  8102 ;;		wreg, status,0
  8103 ;; Tracked objects:
  8104 ;;		On entry : 0/0
  8105 ;;		On exit  : 0/0
  8106 ;;		Unchanged: 0/0
  8107 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8108 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8109 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8110 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8111 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8112 ;;Total ram usage:        0 bytes
  8113 ;; Hardware stack levels used:    1
  8114 ;; Hardware stack levels required when called:    7
  8115 ;; This function calls:
  8116 ;;		Nothing
  8117 ;; This function is called by:
  8118 ;;		_nrf24l01Send
  8119 ;;		_nrf24l01SendPacket
  8120 ;;		i1_nrf24l01Send
  8121 ;; This function uses a non-reentrant model
  8122 ;;
  8123                           
  8124                           
  8125                           ;psect for function _enableInterrupts
  8126  0D59                     _enableInterrupts:	
  8127                           
  8128                           ;incstack = 0
  8129 ;; hardware stack exceeded
  8130                           ; Regs used in _enableInterrupts: [wreg+status,0]
  8131                           ;enableInterrupts@enable stored from wreg
  8132  0D59  00F0               	movwf	enableInterrupts@enable
  8133                           
  8134                           ;interface.c: 78: PIE0bits.INTE = enable;
  8135  0D5A  0C70               	rrf	enableInterrupts@enable,w
  8136  0D5B  0021               	movlb	1	; select bank1
  8137  0D5C  1C03               	skipc
  8138  0D5D  1010               	bcf	16,0	;volatile
  8139  0D5E  1803               	skipnc
  8140  0D5F  1410               	bsf	16,0	;volatile
  8141  0D60  0008               	return
  8142  0D61                     __end_of_enableInterrupts:	
  8143                           
  8144                           	psect	text43
  8145  0D43                     __ptext43:	
  8146 ;; *************** function _nrf24l01CELow *****************
  8147 ;; Defined at:
  8148 ;;		line 8 in file "interface.c"
  8149 ;; Parameters:    Size  Location     Type
  8150 ;;		None
  8151 ;; Auto vars:     Size  Location     Type
  8152 ;;		None
  8153 ;; Return value:  Size  Location     Type
  8154 ;;                  1    wreg      void 
  8155 ;; Registers used:
  8156 ;;		None
  8157 ;; Tracked objects:
  8158 ;;		On entry : 0/0
  8159 ;;		On exit  : 0/0
  8160 ;;		Unchanged: 0/0
  8161 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8162 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8163 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8164 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8165 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8166 ;;Total ram usage:        0 bytes
  8167 ;; Hardware stack levels used:    1
  8168 ;; Hardware stack levels required when called:    7
  8169 ;; This function calls:
  8170 ;;		Nothing
  8171 ;; This function is called by:
  8172 ;;		_nrf24l01SetRXMode
  8173 ;;		_nrf24l01ReceivePacket
  8174 ;;		_nrf24l01SendPacket
  8175 ;;		_nrf24l01Init
  8176 ;;		i1_nrf24l01SetRXMode
  8177 ;; This function uses a non-reentrant model
  8178 ;;
  8179                           
  8180                           
  8181                           ;psect for function _nrf24l01CELow
  8182  0D43                     _nrf24l01CELow:	
  8183                           
  8184                           ;interface.c: 9: PORTAbits.RA0 = 0;
  8185                           
  8186                           ;incstack = 0
  8187 ;; hardware stack exceeded
  8188                           ; Regs used in _nrf24l01CELow: []
  8189  0D43  0020               	movlb	0	; select bank0
  8190  0D44  100C               	bcf	12,0	;volatile
  8191  0D45  0008               	return
  8192  0D46                     __end_of_nrf24l01CELow:	
  8193                           
  8194                           	psect	text44
  8195  0D40                     __ptext44:	
  8196 ;; *************** function _nrf24l01CEHigh *****************
  8197 ;; Defined at:
  8198 ;;		line 13 in file "interface.c"
  8199 ;; Parameters:    Size  Location     Type
  8200 ;;		None
  8201 ;; Auto vars:     Size  Location     Type
  8202 ;;		None
  8203 ;; Return value:  Size  Location     Type
  8204 ;;                  1    wreg      void 
  8205 ;; Registers used:
  8206 ;;		None
  8207 ;; Tracked objects:
  8208 ;;		On entry : 0/0
  8209 ;;		On exit  : 0/0
  8210 ;;		Unchanged: 0/0
  8211 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8212 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8213 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8214 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8215 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8216 ;;Total ram usage:        0 bytes
  8217 ;; Hardware stack levels used:    1
  8218 ;; Hardware stack levels required when called:    7
  8219 ;; This function calls:
  8220 ;;		Nothing
  8221 ;; This function is called by:
  8222 ;;		_nrf24l01SetRXMode
  8223 ;;		_nrf24l01ReceivePacket
  8224 ;;		_nrf24l01SendPacket
  8225 ;;		_nrf24l01Init
  8226 ;;		i1_nrf24l01SetRXMode
  8227 ;; This function uses a non-reentrant model
  8228 ;;
  8229                           
  8230                           
  8231                           ;psect for function _nrf24l01CEHigh
  8232  0D40                     _nrf24l01CEHigh:	
  8233                           
  8234                           ;interface.c: 14: PORTAbits.RA0 = 1;
  8235                           
  8236                           ;incstack = 0
  8237 ;; hardware stack exceeded
  8238                           ; Regs used in _nrf24l01CEHigh: []
  8239  0D40  0020               	movlb	0	; select bank0
  8240  0D41  140C               	bsf	12,0	;volatile
  8241  0D42  0008               	return
  8242  0D43                     __end_of_nrf24l01CEHigh:	
  8243                           
  8244                           	psect	text45
  8245  0F2E                     __ptext45:	
  8246 ;; *************** function _strcmp *****************
  8247 ;; Defined at:
  8248 ;;		line 33 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\strcmp.c"
  8249 ;; Parameters:    Size  Location     Type
  8250 ;;  s1              1    wreg     PTR const unsigned char 
  8251 ;;		 -> packet.Message(32), packet.Message(32), NULL(0), main@packet(33), 
  8252 ;;		 -> loop@packet(33), 
  8253 ;;  s2              1    0[COMMON] PTR const unsigned char 
  8254 ;;		 -> RXPacket.Message(32), RXPacket(33), 
  8255 ;; Auto vars:     Size  Location     Type
  8256 ;;  s1              1    4[COMMON] PTR const unsigned char 
  8257 ;;		 -> packet.Message(32), packet.Message(32), NULL(0), main@packet(33), 
  8258 ;;		 -> loop@packet(33), 
  8259 ;;  r               1    3[COMMON] char 
  8260 ;; Return value:  Size  Location     Type
  8261 ;;                  2    0[COMMON] int 
  8262 ;; Registers used:
  8263 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0
  8264 ;; Tracked objects:
  8265 ;;		On entry : 0/0
  8266 ;;		On exit  : 0/0
  8267 ;;		Unchanged: 0/0
  8268 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8269 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8270 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8271 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8272 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8273 ;;Total ram usage:        5 bytes
  8274 ;; Hardware stack levels used:    1
  8275 ;; This function calls:
  8276 ;;		Nothing
  8277 ;; This function is called by:
  8278 ;;		_nrf24l01CheckACK
  8279 ;; This function uses a non-reentrant model
  8280 ;;
  8281                           
  8282                           
  8283                           ;psect for function _strcmp
  8284  0F2E                     _strcmp:	
  8285                           
  8286                           ;incstack = 0
  8287                           ; Regs used in _strcmp: [wreg-fsr1h+status,2+status,0]
  8288                           ;strcmp@s1 stored from wreg
  8289  0F2E  00F4               	movwf	strcmp@s1
  8290  0F2F  2F38               	goto	i1l2271
  8291  0F30                     i1l2267:	
  8292  0F30  3001               	movlw	1
  8293  0F31  00F2               	movwf	??_strcmp
  8294  0F32  0872               	movf	??_strcmp,w
  8295  0F33  07F4               	addwf	strcmp@s1,f
  8296  0F34  3001               	movlw	1
  8297  0F35  00F2               	movwf	??_strcmp
  8298  0F36  0872               	movf	??_strcmp,w
  8299  0F37  07F0               	addwf	strcmp@s2,f
  8300  0F38                     i1l2271:	
  8301  0F38  0874               	movf	strcmp@s1,w
  8302  0F39  0086               	movwf	6
  8303  0F3A  0187               	clrf	7
  8304  0F3B  0870               	movf	strcmp@s2,w
  8305  0F3C  0084               	movwf	4
  8306  0F3D  3001               	movlw	1	; select bank2/3
  8307  0F3E  0085               	movwf	5
  8308  0F3F  0300               	decf	0,w
  8309  0F40  3AFF               	xorlw	255
  8310  0F41  0701               	addwf	1,w
  8311  0F42  00F2               	movwf	??_strcmp
  8312  0F43  0872               	movf	??_strcmp,w
  8313  0F44  00F3               	movwf	strcmp@r
  8314  0F45  0873               	movf	strcmp@r,w
  8315  0F46  1D03               	btfss	3,2
  8316  0F47  2F4E               	goto	i1l2275
  8317  0F48  0874               	movf	strcmp@s1,w
  8318  0F49  0086               	movwf	6
  8319  0F4A  0187               	clrf	7
  8320  0F4B  0801               	movf	1,w
  8321  0F4C  1D03               	btfss	3,2
  8322  0F4D  2F30               	goto	i1l2267
  8323  0F4E                     i1l2275:	
  8324  0F4E  0873               	movf	strcmp@r,w
  8325  0F4F  00F0               	movwf	?_strcmp
  8326  0F50  01F1               	clrf	?_strcmp+1
  8327  0F51  1BF0               	btfsc	?_strcmp,7
  8328  0F52  03F1               	decf	?_strcmp+1,f
  8329  0F53  0008               	return
  8330  0F54                     __end_of_strcmp:	
  8331                           
  8332                           	psect	text46
  8333  0DAE                     __ptext46:	
  8334 ;; *************** function _exception *****************
  8335 ;; Defined at:
  8336 ;;		line 81 in file "interface.c"
  8337 ;; Parameters:    Size  Location     Type
  8338 ;;  exception       1    wreg     unsigned char 
  8339 ;; Auto vars:     Size  Location     Type
  8340 ;;  exception       1   12[COMMON] unsigned char 
  8341 ;; Return value:  Size  Location     Type
  8342 ;;                  1    wreg      void 
  8343 ;; Registers used:
  8344 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8345 ;; Tracked objects:
  8346 ;;		On entry : 0/0
  8347 ;;		On exit  : 0/0
  8348 ;;		Unchanged: 0/0
  8349 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8350 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8351 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8352 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8353 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8354 ;;Total ram usage:        3 bytes
  8355 ;; Hardware stack levels used:    1
  8356 ;; Hardware stack levels required when called:    2
  8357 ;; This function calls:
  8358 ;;		___wmul
  8359 ;;		i1_flashUpdate
  8360 ;; This function is called by:
  8361 ;;		_nrf24l01ISR
  8362 ;; This function uses a non-reentrant model
  8363 ;;
  8364                           
  8365                           
  8366                           ;psect for function _exception
  8367  0DAE                     _exception:	
  8368                           
  8369                           ;incstack = 0
  8370                           ; Regs used in _exception: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8371                           ;exception@exception stored from wreg
  8372  0DAE  00FC               	movwf	exception@exception
  8373                           
  8374                           ;interface.c: 82: romData.bootMode = (unsigned) (exception * 10);
  8375  0DAF  087C               	movf	exception@exception,w
  8376  0DB0  00FA               	movwf	??_exception
  8377  0DB1  01FB               	clrf	??_exception+1
  8378  0DB2  087A               	movf	??_exception,w
  8379  0DB3  00F0               	movwf	___wmul@multiplier
  8380  0DB4  087B               	movf	??_exception+1,w
  8381  0DB5  00F1               	movwf	___wmul@multiplier+1
  8382  0DB6  300A               	movlw	10
  8383  0DB7  00F2               	movwf	___wmul@multiplicand
  8384  0DB8  3000               	movlw	0
  8385  0DB9  00F3               	movwf	___wmul@multiplicand+1
  8386  0DBA  318D  25F7  318D   	fcall	___wmul
  8387  0DBD  0871               	movf	?___wmul+1,w
  8388  0DBE  0020               	movlb	0	; select bank0
  8389  0DBF  00EE               	movwf	_romData+18
  8390  0DC0  0870               	movf	?___wmul,w
  8391  0DC1  00ED               	movwf	_romData+17
  8392                           
  8393                           ;interface.c: 83: flashUpdate();
  8394  0DC2  318E  26A4         	fcall	i1_flashUpdate
  8395  0DC4  0001               	reset	;# 
  8396  0DC5  0008               	return
  8397  0DC6                     __end_of_exception:	
  8398                           
  8399                           	psect	text47
  8400  0EA4                     __ptext47:	
  8401 ;; *************** function i1_flashUpdate *****************
  8402 ;; Defined at:
  8403 ;;		line 97 in file "flash.c"
  8404 ;; Parameters:    Size  Location     Type
  8405 ;;		None
  8406 ;; Auto vars:     Size  Location     Type
  8407 ;;  flashUpdate     2    8[COMMON] unsigned int 
  8408 ;; Return value:  Size  Location     Type
  8409 ;;                  1    wreg      void 
  8410 ;; Registers used:
  8411 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8412 ;; Tracked objects:
  8413 ;;		On entry : 0/0
  8414 ;;		On exit  : 0/0
  8415 ;;		Unchanged: 0/0
  8416 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8417 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8418 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8419 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8420 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8421 ;;Total ram usage:        4 bytes
  8422 ;; Hardware stack levels used:    1
  8423 ;; Hardware stack levels required when called:    1
  8424 ;; This function calls:
  8425 ;;		i1_flashWriteByte
  8426 ;; This function is called by:
  8427 ;;		_exception
  8428 ;; This function uses a non-reentrant model
  8429 ;;
  8430                           
  8431                           
  8432                           ;psect for function i1_flashUpdate
  8433  0EA4                     i1_flashUpdate:	
  8434                           
  8435                           ;flash.c: 98: for (unsigned int i = 0; i < 32; i++){
  8436                           
  8437                           ;incstack = 0
  8438                           ; Regs used in i1_flashUpdate: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8439  0EA4  01F8               	clrf	i1flashUpdate@i
  8440  0EA5  01F9               	clrf	i1flashUpdate@i+1
  8441  0EA6                     L3:	
  8442  0EA6  3000               	movlw	0
  8443  0EA7  0279               	subwf	i1flashUpdate@i+1,w
  8444  0EA8  3020               	movlw	32
  8445  0EA9  1903               	skipnz
  8446  0EAA  0278               	subwf	i1flashUpdate@i,w
  8447  0EAB  1803               	btfsc	3,0
  8448  0EAC  0008               	return
  8449                           
  8450                           ;flash.c: 99: flashWriteByte(i, romHolder.array[i]);
  8451  0EAD  0879               	movf	i1flashUpdate@i+1,w
  8452  0EAE  00F1               	movwf	i1flashWriteByte@offset+1
  8453  0EAF  0878               	movf	i1flashUpdate@i,w
  8454  0EB0  00F0               	movwf	i1flashWriteByte@offset
  8455  0EB1  0878               	movf	i1flashUpdate@i,w
  8456  0EB2  3E20               	addlw	(low (_romHolder| (0+256)))& (0+255)
  8457  0EB3  0086               	movwf	6
  8458  0EB4  3001               	movlw	1	; select bank2/3
  8459  0EB5  0087               	movwf	7
  8460  0EB6  0801               	movf	1,w
  8461  0EB7  00F6               	movwf	??i1_flashUpdate
  8462  0EB8  01F7               	clrf	??i1_flashUpdate+1
  8463  0EB9  0876               	movf	??i1_flashUpdate,w
  8464  0EBA  00F2               	movwf	i1flashWriteByte@data
  8465  0EBB  0877               	movf	??i1_flashUpdate+1,w
  8466  0EBC  00F3               	movwf	i1flashWriteByte@data+1
  8467  0EBD  318F  27A0  318E   	fcall	i1_flashWriteByte
  8468  0EC0  3001               	movlw	1
  8469  0EC1  07F8               	addwf	i1flashUpdate@i,f
  8470  0EC2  3000               	movlw	0
  8471  0EC3  3DF9               	addwfc	i1flashUpdate@i+1,f
  8472  0EC4  2EA6               	goto	L3
  8473  0EC5                     __end_ofi1_flashUpdate:	
  8474                           
  8475                           	psect	text48
  8476  0FA0                     __ptext48:	
  8477 ;; *************** function i1_flashWriteByte *****************
  8478 ;; Defined at:
  8479 ;;		line 8 in file "flash.c"
  8480 ;; Parameters:    Size  Location     Type
  8481 ;;  offset          2    0[COMMON] unsigned int 
  8482 ;;  data            2    2[COMMON] unsigned int 
  8483 ;; Auto vars:     Size  Location     Type
  8484 ;;  flashWriteBy    2    4[COMMON] unsigned int 
  8485 ;; Return value:  Size  Location     Type
  8486 ;;                  1    wreg      void 
  8487 ;; Registers used:
  8488 ;;		wreg, status,2, status,0
  8489 ;; Tracked objects:
  8490 ;;		On entry : 0/0
  8491 ;;		On exit  : 0/0
  8492 ;;		Unchanged: 0/0
  8493 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8494 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8495 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8496 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8497 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8498 ;;Total ram usage:        6 bytes
  8499 ;; Hardware stack levels used:    1
  8500 ;; This function calls:
  8501 ;;		Nothing
  8502 ;; This function is called by:
  8503 ;;		i1_flashUpdate
  8504 ;; This function uses a non-reentrant model
  8505 ;;
  8506                           
  8507                           
  8508                           ;psect for function i1_flashWriteByte
  8509  0FA0                     i1_flashWriteByte:	
  8510                           
  8511                           ;flash.c: 10: unsigned int address;;flash.c: 12: INTCONbits.GIE = 0;
  8512                           
  8513                           ;incstack = 0
  8514                           ; Regs used in i1_flashWriteByte: [wreg+status,2+status,0]
  8515  0FA0  138B               	bcf	11,7	;volatile
  8516                           
  8517                           ;flash.c: 15: PMCON1 = 0x00;
  8518  0FA1  0031               	movlb	17	; select bank17
  8519  0FA2  0195               	clrf	21	;volsfr
  8520                           
  8521                           ;flash.c: 17: address = (0x2000U - 32) + offset;
  8522  0FA3  0870               	movf	i1flashWriteByte@offset,w
  8523  0FA4  3EE0               	addlw	224
  8524  0FA5  00F4               	movwf	i1flashWriteByte@address
  8525  0FA6  301F               	movlw	31
  8526  0FA7  3D71               	addwfc	i1flashWriteByte@offset+1,w
  8527  0FA8  00F5               	movwf	i1flashWriteByte@address+1
  8528                           
  8529                           ;flash.c: 18: PMADRL = (char) (address >> 0);
  8530  0FA9  0874               	movf	i1flashWriteByte@address,w
  8531  0FAA  0091               	movwf	17	;volatile
  8532                           
  8533                           ;flash.c: 19: PMADRH = (char) (address >> 8);
  8534  0FAB  0875               	movf	i1flashWriteByte@address+1,w
  8535  0FAC  0092               	movwf	18	;volatile
  8536                           
  8537                           ;flash.c: 21: PMCON1bits.FREE = 1;
  8538  0FAD  1615               	bsf	21,4	;volsfr
  8539                           
  8540                           ;flash.c: 22: PMCON1bits.WREN = 1;
  8541  0FAE  1515               	bsf	21,2	;volsfr
  8542                           
  8543                           ;flash.c: 24: PMCON2 = 0x55;
  8544  0FAF  3055               	movlw	85
  8545  0FB0  0096               	movwf	22	;volsfr
  8546                           
  8547                           ;flash.c: 25: PMCON2 = 0xAA;
  8548  0FB1  30AA               	movlw	170
  8549  0FB2  0096               	movwf	22	;volsfr
  8550                           
  8551                           ;flash.c: 27: PMCON1bits.WR = 1;
  8552  0FB3  1495               	bsf	21,1	;volsfr
  8553                           
  8554                           ;flash.c: 29: __nop();
  8555  0FB4  0000               	nop
  8556                           
  8557                           ;flash.c: 30: __nop();
  8558  0FB5  0000               	nop
  8559                           
  8560                           ;flash.c: 32: PMCON1bits.WREN = 0;
  8561  0FB6  0031               	movlb	17	; select bank17
  8562  0FB7  1115               	bcf	21,2	;volsfr
  8563                           
  8564                           ;flash.c: 36: PMCON1 = 0x00;
  8565  0FB8  0195               	clrf	21	;volsfr
  8566                           
  8567                           ;flash.c: 38: PMADRL = (char) (address >> 0);
  8568  0FB9  0874               	movf	i1flashWriteByte@address,w
  8569  0FBA  0091               	movwf	17	;volatile
  8570                           
  8571                           ;flash.c: 39: PMADRH = (char) (address >> 8);
  8572  0FBB  0875               	movf	i1flashWriteByte@address+1,w
  8573  0FBC  0092               	movwf	18	;volatile
  8574                           
  8575                           ;flash.c: 41: PMCON1bits.FREE = 0;
  8576  0FBD  1215               	bcf	21,4	;volsfr
  8577                           
  8578                           ;flash.c: 42: PMCON1bits.LWLO = 1;
  8579  0FBE  1695               	bsf	21,5	;volsfr
  8580                           
  8581                           ;flash.c: 43: PMCON1bits.WREN = 1;
  8582  0FBF  1515               	bsf	21,2	;volsfr
  8583                           
  8584                           ;flash.c: 45: PMDATL = (data >> 0);
  8585  0FC0  0872               	movf	i1flashWriteByte@data,w
  8586  0FC1  0093               	movwf	19	;volatile
  8587                           
  8588                           ;flash.c: 46: PMDATH = (data >> 8);
  8589  0FC2  0873               	movf	i1flashWriteByte@data+1,w
  8590  0FC3  0094               	movwf	20	;volatile
  8591                           
  8592                           ;flash.c: 48: PMCON1bits.LWLO = 0;
  8593  0FC4  1295               	bcf	21,5	;volsfr
  8594                           
  8595                           ;flash.c: 50: PMCON2 = 0x55;
  8596  0FC5  3055               	movlw	85
  8597  0FC6  0096               	movwf	22	;volsfr
  8598                           
  8599                           ;flash.c: 51: PMCON2 = 0xAA;
  8600  0FC7  30AA               	movlw	170
  8601  0FC8  0096               	movwf	22	;volsfr
  8602                           
  8603                           ;flash.c: 53: PMCON1bits.WR = 1;
  8604  0FC9  1495               	bsf	21,1	;volsfr
  8605                           
  8606                           ;flash.c: 55: __nop();
  8607  0FCA  0000               	nop
  8608                           
  8609                           ;flash.c: 56: __nop();
  8610  0FCB  0000               	nop
  8611                           
  8612                           ;flash.c: 58: PMCON1bits.WREN = 0;
  8613  0FCC  0031               	movlb	17	; select bank17
  8614  0FCD  1115               	bcf	21,2	;volsfr
  8615                           
  8616                           ;flash.c: 61: INTCONbits.GIE = 1;
  8617  0FCE  178B               	bsf	11,7	;volatile
  8618  0FCF  0008               	return
  8619  0FD0                     __end_ofi1_flashWriteByte:	
  8620                           
  8621                           	psect	text49
  8622  0DF7                     __ptext49:	
  8623 ;; *************** function ___wmul *****************
  8624 ;; Defined at:
  8625 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\Umul16.c"
  8626 ;; Parameters:    Size  Location     Type
  8627 ;;  multiplier      2    0[COMMON] unsigned int 
  8628 ;;  multiplicand    2    2[COMMON] unsigned int 
  8629 ;; Auto vars:     Size  Location     Type
  8630 ;;  product         2    4[COMMON] unsigned int 
  8631 ;; Return value:  Size  Location     Type
  8632 ;;                  2    0[COMMON] unsigned int 
  8633 ;; Registers used:
  8634 ;;		wreg, status,2, status,0
  8635 ;; Tracked objects:
  8636 ;;		On entry : 0/0
  8637 ;;		On exit  : 0/0
  8638 ;;		Unchanged: 0/0
  8639 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8640 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8641 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8642 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8643 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8644 ;;Total ram usage:        6 bytes
  8645 ;; Hardware stack levels used:    1
  8646 ;; This function calls:
  8647 ;;		Nothing
  8648 ;; This function is called by:
  8649 ;;		_exception
  8650 ;; This function uses a non-reentrant model
  8651 ;;
  8652                           
  8653                           
  8654                           ;psect for function ___wmul
  8655  0DF7                     ___wmul:	
  8656                           
  8657                           ;incstack = 0
  8658                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  8659  0DF7  01F4               	clrf	___wmul@product
  8660  0DF8  01F5               	clrf	___wmul@product+1
  8661  0DF9                     i1l2281:	
  8662  0DF9  1C70               	btfss	___wmul@multiplier,0
  8663  0DFA  2DFF               	goto	i1l472
  8664  0DFB  0872               	movf	___wmul@multiplicand,w
  8665  0DFC  07F4               	addwf	___wmul@product,f
  8666  0DFD  0873               	movf	___wmul@multiplicand+1,w
  8667  0DFE  3DF5               	addwfc	___wmul@product+1,f
  8668  0DFF                     i1l472:	
  8669  0DFF  3001               	movlw	1
  8670  0E00                     u116_25:	
  8671  0E00  35F2               	lslf	___wmul@multiplicand,f
  8672  0E01  0DF3               	rlf	___wmul@multiplicand+1,f
  8673  0E02  0B89               	decfsz	9,f
  8674  0E03  2E00               	goto	u116_25
  8675  0E04  3001               	movlw	1
  8676  0E05                     u117_25:	
  8677  0E05  36F1               	lsrf	___wmul@multiplier+1,f
  8678  0E06  0CF0               	rrf	___wmul@multiplier,f
  8679  0E07  0B89               	decfsz	9,f
  8680  0E08  2E05               	goto	u117_25
  8681  0E09  0870               	movf	___wmul@multiplier,w
  8682  0E0A  0471               	iorwf	___wmul@multiplier+1,w
  8683  0E0B  1D03               	btfss	3,2
  8684  0E0C  2DF9               	goto	i1l2281
  8685  0E0D  0875               	movf	___wmul@product+1,w
  8686  0E0E  00F1               	movwf	?___wmul+1
  8687  0E0F  0874               	movf	___wmul@product,w
  8688  0E10  00F0               	movwf	?___wmul
  8689  0E11  0008               	return
  8690  0E12                     __end_of___wmul:	
  8691  007E                     btemp	set	126	;btemp
  8692  007E                     int$flags	set	126
  8693  007E                     wtemp0	set	126


Data Sizes:
    Strings     44
    Constant    25
    Data        0
    BSS         91
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     57      79
    BANK1            80     68      72
    BANK2            80      0      65
    BANK3            80      0       0
    BANK4            80      0       0
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    strlen@s	PTR const unsigned char  size(1) Largest target is 33
		 -> packet.Message(BANK0[32]), packet.Message(BANK0[32]), NULL(NULL[0]), main@packet(BANK1[33]), 
		 -> loop@packet(BANK1[33]), romData(BANK0[19]), 

    strlen@cp	PTR const unsigned char  size(1) Largest target is 33
		 -> packet.Message(BANK0[32]), packet.Message(BANK0[32]), NULL(NULL[0]), main@packet(BANK1[33]), 
		 -> loop@packet(BANK1[33]), romData(BANK0[19]), 

    strcpy@from	PTR const unsigned char  size(2) Largest target is 4
		 -> STR_10(CODE[4]), STR_9(CODE[4]), 

    strcpy@to	PTR unsigned char  size(1) Largest target is 19
		 -> romData(BANK0[19]), 

    strcpy@cp	PTR unsigned char  size(1) Largest target is 19
		 -> romData(BANK0[19]), 

    strcmp@s2	PTR const unsigned char  size(1) Largest target is 33
		 -> RXPacket.Message(BANK2[32]), RXPacket(BANK2[33]), 

    strcmp@s1	PTR const unsigned char  size(1) Largest target is 33
		 -> packet.Message(BANK0[32]), packet.Message(BANK0[32]), NULL(NULL[0]), main@packet(BANK1[33]), 
		 -> loop@packet(BANK1[33]), 

    strcat@from	PTR const unsigned char  size(2) Largest target is 19
		 -> STR_11(CODE[5]), STR_8(CODE[6]), STR_7(CODE[5]), STR_6(CODE[4]), 
		 -> STR_5(CODE[5]), STR_4(CODE[5]), STR_3(CODE[4]), STR_2(CODE[2]), 
		 -> setMessage@tempString(BANK0[16]), STR_1(CODE[2]), romData.name(BANK0[16]), romData(BANK0[19]), 

    strcat@to	PTR unsigned char  size(1) Largest target is 33
		 -> main@packet(BANK1[33]), loop@packet(BANK1[33]), 

    strcat@cp	PTR unsigned char  size(1) Largest target is 33
		 -> main@packet(BANK1[33]), loop@packet(BANK1[33]), 

    memset@p1	PTR void  size(2) Largest target is 33
		 -> RXPacket(BANK2[33]), main@packet(BANK1[33]), loop@packet(BANK1[33]), 

    memset@p	PTR unsigned char  size(2) Largest target is 33
		 -> RXPacket(BANK2[33]), main@packet(BANK1[33]), loop@packet(BANK1[33]), 

    ultoa@buf	PTR unsigned char  size(1) Largest target is 16
		 -> setMessage@tempString(BANK0[16]), 

    sp__ltoa	PTR unsigned char  size(1) Largest target is 0

    nrf24l01SendPacket@Packet	PTR struct . size(1) Largest target is 33
		 -> main@packet(BANK1[33]), loop@packet(BANK1[33]), 

    TXPacket	PTR struct . size(1) Largest target is 33
		 -> NULL(NULL[0]), main@packet(BANK1[33]), loop@packet(BANK1[33]), 

    sp__strcpy	PTR unsigned char  size(1) Largest target is 19
		 -> romData(BANK0[19]), 

    nrf24l01GetPipe@name	PTR unsigned char  size(1) Largest target is 19
		 -> romData(BANK0[19]), 

    sp__nrf24l01GetRXPacket	PTR struct . size(1) Largest target is 33
		 -> RXPacket(BANK2[33]), 

    checkTXPower@rxPacket	PTR struct . size(1) Largest target is 33
		 -> RXPacket(BANK2[33]), 

    sp__ultoa	PTR unsigned char  size(1) Largest target is 16
		 -> setMessage@tempString(BANK0[16]), 

    setMessage@topic	PTR const unsigned char  size(2) Largest target is 6
		 -> STR_11(CODE[5]), STR_8(CODE[6]), STR_7(CODE[5]), STR_6(CODE[4]), 
		 -> STR_5(CODE[5]), STR_4(CODE[5]), STR_3(CODE[4]), 

    sp__strcat	PTR unsigned char  size(1) Largest target is 33
		 -> main@packet(BANK1[33]), loop@packet(BANK1[33]), 

    sp__memset	PTR void  size(2) Largest target is 33
		 -> RXPacket(BANK2[33]), main@packet(BANK1[33]), loop@packet(BANK1[33]), 

    setMessage@packet	PTR struct . size(1) Largest target is 33
		 -> main@packet(BANK1[33]), loop@packet(BANK1[33]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    _ISR->_nrf24l01ISR
    _nrf24l01ISR->_exception
    _nrf24l01ReceivePacket->i1_memset
    _nrf24l01CheckACK->i1_nrf24l01SetRXMode
    i1_nrf24l01SetRXMode->i1_nrf24l01Send
    _exception->i1_flashUpdate
    i1_flashUpdate->i1_flashWriteByte

Critical Paths under _main in BANK0

    _main->_loop
    _nrf24l01Init->_nrf24l01InitRegisters
    _nrf24l01InitRegisters->_nrf24l01SetRXPipe
    _nrf24l01InitRegisters->_nrf24l01SetTXPipe
    _nrf24l01SetTXPipe->___bmul
    _nrf24l01SetRXPipe->_nrf24l01Send
    _nrf24l01GetPipe->___llmod
    _loop->_setMessage
    _setMessage->_getADCValue
    _ultoa->___lldiv
    _nrf24l01SendPacket->_strlen
    _nrf24l01SetRXMode->_nrf24l01Send
    _getADCValue->___lldiv
    _checkTXPower->_nrf24l01ChangeTXPower
    _nrf24l01ChangeTXPower->_nrf24l01Send
    _flashUpdate->_flashWriteByte
    _flashRealod->_flashReadByte

Critical Paths under _ISR in BANK0

    _ISR->_nrf24l01ISR

Critical Paths under _main in BANK1

    _main->_loop

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                35    35      0   37663
                                             56 BANK0      1     1      0
                                             34 BANK1     34    34      0
                        _flashRealod
                        _flashUpdate
                               _loop
                    _nrf24l01GetPipe
                       _nrf24l01Init
                 _nrf24l01SendPacket
                  _nrf24l01SetRXPipe
                  _nrf24l01SetTXPipe
                         _setMessage
                              _sleep
                             _strcpy
 ---------------------------------------------------------------------------------
 (1) _strcpy                                               5     3      2     325
                                              1 BANK0      5     3      2
 ---------------------------------------------------------------------------------
 (1) _nrf24l01Init                                         2     2      0    5331
                                             20 BANK0      2     2      0
                     _nrf24l01CEHigh
                      _nrf24l01CELow
              _nrf24l01InitRegisters
              _nrf24l01InterfaceInit
 ---------------------------------------------------------------------------------
 (2) _nrf24l01InterfaceInit                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _nrf24l01InitRegisters                               12    12      0    5331
                                              8 BANK0     12    12      0
                             ___bmul
                     _nrf24l01SPIEnd
                    _nrf24l01SPISend
                   _nrf24l01SPIStart
                       _nrf24l01Send
                  _nrf24l01SetRXPipe
                  _nrf24l01SetTXPipe
 ---------------------------------------------------------------------------------
 (1) _nrf24l01SetTXPipe                                    3     3      0     314
                                              5 BANK0      3     3      0
                             ___bmul
                     _nrf24l01SPIEnd
                    _nrf24l01SPISend
                   _nrf24l01SPIStart
 ---------------------------------------------------------------------------------
 (2) ___bmul                                               4     3      1     270
                                              1 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (1) _nrf24l01SetRXPipe                                    4     4      0    2239
                                              4 BANK0      4     4      0
                       _nrf24l01Send
 ---------------------------------------------------------------------------------
 (1) _nrf24l01GetPipe                                     11    11      0     851
                                             11 BANK0     11    11      0
                            ___llmod
                             _strlen
 ---------------------------------------------------------------------------------
 (1) _loop                                                38    38      0   17170
                                             52 BANK0      4     4      0
                                              0 BANK1     34    34      0
                       _checkTXPower
                        _getADCValue
                       _nrf24l01Send
                 _nrf24l01SendPacket
                         _setMessage
                              _sleep
 ---------------------------------------------------------------------------------
 (1) _sleep                                                0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _setMessage                                          23    17      6    5256
                                             29 BANK0     23    17      6
                        _getADCValue (ARG)
                             _memset
                             _strcat
                              _ultoa
 ---------------------------------------------------------------------------------
 (2) _ultoa                                               13     7      6    1914
                                             15 BANK0     13     7      6
                            ___lldiv
                            ___llmod
 ---------------------------------------------------------------------------------
 (3) ___llmod                                             10     2      8     515
                                              1 BANK0     10     2      8
 ---------------------------------------------------------------------------------
 (2) _strcat                                               5     3      2     723
                                              1 BANK0      5     3      2
 ---------------------------------------------------------------------------------
 (2) _memset                                               8     2      6     565
                                              1 BANK0      8     2      6
 ---------------------------------------------------------------------------------
 (1) _nrf24l01SendPacket                                   4     4      0    5364
                                              9 BANK0      4     4      0
                   _enableInterrupts
                     _nrf24l01CEHigh
                      _nrf24l01CELow
              _nrf24l01ChangeTXPower
                     _nrf24l01SPIEnd
                    _nrf24l01SPISend
                   _nrf24l01SPIStart
                  _nrf24l01SetRXMode
                             _strlen
 ---------------------------------------------------------------------------------
 (2) _strlen                                               8     6      2     162
                                              1 BANK0      8     6      2
 ---------------------------------------------------------------------------------
 (2) _nrf24l01SetRXMode                                    3     3      0    2277
                                              4 BANK0      3     3      0
                     _nrf24l01CEHigh
                      _nrf24l01CELow
                       _nrf24l01Send
 ---------------------------------------------------------------------------------
 (10) _nrf24l01CELow                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _nrf24l01CEHigh                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _getADCValue                                         14    10      4    1460
                                             15 BANK0     14    10      4
                            ___lldiv
                             ___lmul
 ---------------------------------------------------------------------------------
 (3) ___lmul                                              12     4      8     270
                                              1 BANK0     12     4      8
 ---------------------------------------------------------------------------------
 (3) ___lldiv                                             14     6      8     696
                                              1 BANK0     14     6      8
 ---------------------------------------------------------------------------------
 (2) _checkTXPower                                         2     2      0    2457
                                              8 BANK0      2     2      0
              _nrf24l01ChangeTXPower
                _nrf24l01GetRXPacket
 ---------------------------------------------------------------------------------
 (3) _nrf24l01GetRXPacket                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _nrf24l01ChangeTXPower                                4     2      2    2434
                                              4 BANK0      4     2      2
                       _nrf24l01Send
 ---------------------------------------------------------------------------------
 (2) _nrf24l01Send                                         3     2      1    2143
                                              1 BANK0      3     2      1
                   _enableInterrupts
                     _nrf24l01SPIEnd
                    _nrf24l01SPISend
                   _nrf24l01SPIStart
 ---------------------------------------------------------------------------------
 (11) _nrf24l01SPIStart                                    0     0      0       0
                      _nrf24l01CSLow
 ---------------------------------------------------------------------------------
 (12) _nrf24l01CSLow                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (11) _nrf24l01SPISend                                     1     1      0      22
 ---------------------------------------------------------------------------------
 (11) _nrf24l01SPIEnd                                      0     0      0       0
                     _nrf24l01CSHigh
 ---------------------------------------------------------------------------------
 (12) _nrf24l01CSHigh                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (11) _enableInterrupts                                    1     1      0      22
 ---------------------------------------------------------------------------------
 (1) _flashUpdate                                          4     4      0     423
                                              7 BANK0      4     4      0
                     _flashWriteByte
 ---------------------------------------------------------------------------------
 (2) _flashWriteByte                                       6     2      4     333
                                              1 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (1) _flashRealod                                          3     3      0     271
                                             10 BANK0      3     3      0
                      _flashReadByte
 ---------------------------------------------------------------------------------
 (2) _flashReadByte                                        9     7      2     181
                                              1 BANK0      9     7      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 12
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _ISR                                                  0     0      0    2705
                        _nrf24l01ISR
 ---------------------------------------------------------------------------------
 (8) _nrf24l01ISR                                          2     2      0    2705
                                             13 COMMON     1     1      0
                                              0 BANK0      1     1      0
                          _exception
                   _nrf24l01CheckACK
              _nrf24l01ReceivePacket
                     i1_nrf24l01Send
                i1_nrf24l01SetRXMode
 ---------------------------------------------------------------------------------
 (9) _nrf24l01ReceivePacket                                3     3      0     639
                                              8 COMMON     3     3      0
                     _nrf24l01CEHigh
                      _nrf24l01CELow
                     _nrf24l01SPIEnd
                    _nrf24l01SPISend
                   _nrf24l01SPIStart
                           i1_memset
                     i1_nrf24l01Send
 ---------------------------------------------------------------------------------
 (10) i1_memset                                            8     2      6     211
                                              0 COMMON     8     2      6
 ---------------------------------------------------------------------------------
 (9) _nrf24l01CheckACK                                     1     1      0     617
                                              7 COMMON     1     1      0
                             _strcmp
                i1_nrf24l01SetRXMode
 ---------------------------------------------------------------------------------
 (9) i1_nrf24l01SetRXMode                                  3     3      0     401
                                              4 COMMON     3     3      0
                     _nrf24l01CEHigh
                      _nrf24l01CELow
                     i1_nrf24l01Send
 ---------------------------------------------------------------------------------
 (10) i1_nrf24l01Send                                      3     2      1     267
                                              1 COMMON     3     2      1
                   _enableInterrupts
                     _nrf24l01SPIEnd
                    _nrf24l01SPISend
                   _nrf24l01SPIStart
 ---------------------------------------------------------------------------------
 (11) _nrf24l01SPIStart                                    0     0      0       0
                      _nrf24l01CSLow
 ---------------------------------------------------------------------------------
 (12) _nrf24l01CSLow                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (11) _nrf24l01SPISend                                     1     1      0      22
 ---------------------------------------------------------------------------------
 (11) _nrf24l01SPIEnd                                      0     0      0       0
                     _nrf24l01CSHigh
 ---------------------------------------------------------------------------------
 (12) _nrf24l01CSHigh                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (11) _enableInterrupts                                    1     1      0      22
 ---------------------------------------------------------------------------------
 (10) _nrf24l01CELow                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _nrf24l01CEHigh                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _strcmp                                              5     3      2     216
                                              0 COMMON     5     3      2
 ---------------------------------------------------------------------------------
 (9) _exception                                            3     3      0     589
                                             10 COMMON     3     3      0
                             ___wmul
                      i1_flashUpdate
 ---------------------------------------------------------------------------------
 (10) i1_flashUpdate                                       4     4      0     297
                                              6 COMMON     4     4      0
                   i1_flashWriteByte
 ---------------------------------------------------------------------------------
 (11) i1_flashWriteByte                                    6     2      4     207
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (10) ___wmul                                              6     2      4     270
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 12
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _flashRealod
     _flashReadByte
   _flashUpdate
     _flashWriteByte
   _loop
     _checkTXPower
       _nrf24l01ChangeTXPower
         _nrf24l01Send
           _enableInterrupts
           _nrf24l01SPIEnd
             _nrf24l01CSHigh
           _nrf24l01SPISend
           _nrf24l01SPIStart
             _nrf24l01CSLow
       _nrf24l01GetRXPacket
     _getADCValue
       ___lldiv
       ___lmul
     _nrf24l01Send
       _enableInterrupts
       _nrf24l01SPIEnd
         _nrf24l01CSHigh
       _nrf24l01SPISend
       _nrf24l01SPIStart
         _nrf24l01CSLow
     _nrf24l01SendPacket
       _enableInterrupts
       _nrf24l01CEHigh
       _nrf24l01CELow
       _nrf24l01ChangeTXPower
         _nrf24l01Send
           _enableInterrupts
           _nrf24l01SPIEnd
             _nrf24l01CSHigh
           _nrf24l01SPISend
           _nrf24l01SPIStart
             _nrf24l01CSLow
       _nrf24l01SPIEnd
         _nrf24l01CSHigh
       _nrf24l01SPISend
       _nrf24l01SPIStart
         _nrf24l01CSLow
       _nrf24l01SetRXMode
         _nrf24l01CEHigh
         _nrf24l01CELow
         _nrf24l01Send
           _enableInterrupts
           _nrf24l01SPIEnd
             _nrf24l01CSHigh
           _nrf24l01SPISend
           _nrf24l01SPIStart
             _nrf24l01CSLow
       _strlen
     _setMessage
       _getADCValue (ARG)
         ___lldiv
         ___lmul
       _memset (ARG)
       _strcat (ARG)
       _ultoa (ARG)
         ___lldiv
         ___llmod
     _sleep
   _nrf24l01GetPipe
     ___llmod
     _strlen
   _nrf24l01Init
     _nrf24l01CEHigh
     _nrf24l01CELow
     _nrf24l01InitRegisters
       ___bmul
       _nrf24l01SPIEnd
         _nrf24l01CSHigh
       _nrf24l01SPISend
       _nrf24l01SPIStart
         _nrf24l01CSLow
       _nrf24l01Send
         _enableInterrupts
         _nrf24l01SPIEnd
           _nrf24l01CSHigh
         _nrf24l01SPISend
         _nrf24l01SPIStart
           _nrf24l01CSLow
       _nrf24l01SetRXPipe
         _nrf24l01Send
           _enableInterrupts
           _nrf24l01SPIEnd
             _nrf24l01CSHigh
           _nrf24l01SPISend
           _nrf24l01SPIStart
             _nrf24l01CSLow
       _nrf24l01SetTXPipe
         ___bmul
         _nrf24l01SPIEnd
           _nrf24l01CSHigh
         _nrf24l01SPISend
         _nrf24l01SPIStart
           _nrf24l01CSLow
     _nrf24l01InterfaceInit
   _nrf24l01SendPacket
     _enableInterrupts
     _nrf24l01CEHigh
     _nrf24l01CELow
     _nrf24l01ChangeTXPower
       _nrf24l01Send
         _enableInterrupts
         _nrf24l01SPIEnd
           _nrf24l01CSHigh
         _nrf24l01SPISend
         _nrf24l01SPIStart
           _nrf24l01CSLow
     _nrf24l01SPIEnd
       _nrf24l01CSHigh
     _nrf24l01SPISend
     _nrf24l01SPIStart
       _nrf24l01CSLow
     _nrf24l01SetRXMode
       _nrf24l01CEHigh
       _nrf24l01CELow
       _nrf24l01Send
         _enableInterrupts
         _nrf24l01SPIEnd
           _nrf24l01CSHigh
         _nrf24l01SPISend
         _nrf24l01SPIStart
           _nrf24l01CSLow
     _strlen
   _nrf24l01SetRXPipe
     _nrf24l01Send
       _enableInterrupts
       _nrf24l01SPIEnd
         _nrf24l01CSHigh
       _nrf24l01SPISend
       _nrf24l01SPIStart
         _nrf24l01CSLow
   _nrf24l01SetTXPipe
     ___bmul
     _nrf24l01SPIEnd
       _nrf24l01CSHigh
     _nrf24l01SPISend
     _nrf24l01SPIStart
       _nrf24l01CSLow
   _setMessage
     _getADCValue (ARG)
       ___lldiv
       ___lmul
     _memset (ARG)
     _strcat (ARG)
     _ultoa (ARG)
       ___lldiv
       ___llmod
   _sleep
   _strcpy

 _ISR (ROOT)
   _nrf24l01ISR
     _exception
       ___wmul
       i1_flashUpdate
         i1_flashWriteByte
     _nrf24l01CheckACK
       _strcmp
       i1_nrf24l01SetRXMode
         _nrf24l01CEHigh
         _nrf24l01CELow
         i1_nrf24l01Send
           _enableInterrupts
           _nrf24l01SPIEnd
             _nrf24l01CSHigh
           _nrf24l01SPISend
           _nrf24l01SPIStart
             _nrf24l01CSLow
     _nrf24l01ReceivePacket
       _nrf24l01CEHigh
       _nrf24l01CELow
       _nrf24l01SPIEnd
         _nrf24l01CSHigh
       _nrf24l01SPISend
       _nrf24l01SPIStart
         _nrf24l01CSLow
       i1_memset
       i1_nrf24l01Send
         _enableInterrupts
         _nrf24l01SPIEnd
           _nrf24l01CSHigh
         _nrf24l01SPISend
         _nrf24l01SPIStart
           _nrf24l01CSLow
     i1_nrf24l01Send
       _enableInterrupts
       _nrf24l01SPIEnd
         _nrf24l01CSHigh
       _nrf24l01SPISend
       _nrf24l01SPIStart
         _nrf24l01CSLow
     i1_nrf24l01SetRXMode
       _nrf24l01CEHigh
       _nrf24l01CELow
       i1_nrf24l01Send
         _enableInterrupts
         _nrf24l01SPIEnd
           _nrf24l01CSHigh
         _nrf24l01SPISend
         _nrf24l01SPIStart
           _nrf24l01CSLow

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      E       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     39      4F       5       98.8%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50     44      48       7       90.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0      41       9       81.3%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0       0      11        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0      E6      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0      E6      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V2.00 build -1524193055 
Symbol Table                                                                                   Fri Jul 20 13:07:46 2018

           flashReadByte@result 0026                    flashRealod@i 002B                  ___bmul@product 0023  
                   __CFG_CP$OFF 0000             ___wmul@multiplicand 0072             nrf24l01Send@command 0023  
                   __CFG_LVP$ON 0000                             l220 0445                             l227 0D76  
                           l342 025A                             l338 0249                             l373 0ED2  
                           l890 040C                    flashUpdate@i 0029                    __CFG_CPD$OFF 0000  
                           _ISR 0004                             u905 053C                             u935 068A  
                           u865 0510                             u955 06A3                             u885 051C  
                           u965 06AE                             u895 0530                             wreg 0009  
           nrf24l01SendPacket@i 002C                            ?_ISR 0070                  ??_nrf24l01Init 0034  
                          l2023 0D91                            l2051 0546                            l3003 0DE3  
                          l2019 0D8B                            l2037 050D                            l2061 0687  
                          l2231 06F8                            l2047 053B                            l2039 051B  
                          l2063 0695                            l2071 06B8                            l2225 06E6  
                          l2067 06AD                            l2165 0770                            l2237 0F0F  
                          l2501 024E                            l2181 0F65                            l2239 0F1A  
                          l2263 0EDE                            l2513 0285                            l2185 0F6D  
                          l2531 02B0                            l2179 0F5A                            l2541 02ED  
                          l2533 02BC                            l2517 029A                            l2509 0275  
                          l2189 03A1                            l2295 0FD9                            l2455 044A  
                          l2543 02C0                            l2199 03CE                            l2457 043E  
                ??_nrf24l01Send 0022                            l2299 0FE3                            l2459 0468  
                          l3195 032D                            l3269 0393                            l2673 020A  
                          l2665 01C0                            l2843 055B                            l2845 0583  
                          l2679 0219                            l2857 0E33                            STR_1 1042  
                  __CFG_WDTE$ON 0000                            STR_2 1042                            STR_3 103A  
                          STR_4 1028                            STR_5 101E                            STR_6 103E  
                          STR_7 1023                            STR_8 1013                            STR_9 1032  
                          u1124 0ED8                            u1205 0FE4                            u1125 0ED7  
                          u1215 0FEB                            u1065 06D4                            u1355 0294  
                          u1807 02B8                            u1817 02D0                            u1827 02DD  
                          u1595 0569                            u1837 02EE                            u1757 030E  
                          u1847 0750                            u1767 0F86                            u1857 0762  
                          u1777 0F96                            u1867 076D                            u1787 0256  
                          u1877 043B                            u1797 02A1                            i1l94 0D6F  
                          _WPUA 020C                            _WPUC 020E  __size_of_nrf24l01InterfaceInit 001C  
                  __CFG_WRT$OFF 0000                   __CFG_FCMEN$ON 0000   __end_of_nrf24l01InterfaceInit 0E64  
                          _main 02F2                            _loop 0029                 ??_flashReadByte 0023  
                          fsr0h 0005                            fsr1h 0007                            indf0 0000  
                          fsr0l 0004                            indf1 0001                            fsr1l 0006  
                          btemp 007E  __size_of_nrf24l01ReceivePacket 004D                   __CFG_BORV$LOW 0000  
 __end_of_nrf24l01ReceivePacket 063A                            start 000F           nrf24l01SetRXPipe@pipe 0026  
                 __CFG_CSWEN$ON 0000               ___bmul@multiplier 0024                   __CFG_MCLRE$ON 0000  
   __size_of_nrf24l01SendPacket 00AF                           ??_ISR 007E            __size_of_getADCValue 0088  
               ??_nrf24l01CELow 0070                 ??_nrf24l01CSLow 0070                           ?_main 0070  
                         ?_loop 0070                           STR_10 1036                           STR_11 102D  
               __end_of___lldiv 054F                 __end_of___llmod 06C1                  __CFG_DEBUG$OFF 0000  
                         i1l215 000D                           i1l365 05E3                           i1l472 0DFF  
        enableInterrupts@enable 0070                i1_flashWriteByte 0FA0                      i1memset@p1 0070  
                i1flashUpdate@i 0078             ___lmul@multiplicand 0025                   __CFG_PWRTE$ON 0000  
         nrf24l01SetTXPipe@pipe 0027                           _sleep 0D76                           _ultoa 0397  
                __CFG_BOREN$OFF 0000                _enableInterrupts 0D59                           status 0003  
                         wtemp0 007E     __end_ofi1_nrf24l01SetRXMode 07AE                __end_ofi1_memset 0DDE  
__size_of_nrf24l01ChangeTXPower 003F               getADCValue@adcSum 0039   __end_of_nrf24l01ChangeTXPower 0700  
              _nrf24l01SPIStart 0D61                 __initialization 0011                _nrf24l01CheckACK 0E64  
        nrf24l01InitRegisters@i 0032                    __end_of_main 0397                    __end_of_loop 013D  
  nrf24l01ChangeTXPower@rfSetup 0027                ??_nrf24l01CEHigh 0070                          ??_main 0058  
                        ??_loop 0054                ??_nrf24l01CSHigh 0070                ??_nrf24l01SPIEnd 0070  
           _nrf24l01GetRXPacket 0002          __size_ofi1_flashUpdate 0021        __size_of_nrf24l01SPISend 000D  
              ___llmod@dividend 0025                          _ADRESH 009C                          _ADRESL 009B  
                        ?_sleep 0070                          _ANSELA 018C                          _ANSELC 018E  
                        ?_ultoa 002F                ??_flashWriteByte 0025                          i1l3011 0DCA  
                        _ODCONA 028C        __size_of_nrf24l01GetPipe 0051                          i1l3051 0634  
                        i1l3043 061C                          _ODCONC 028E                          i1l2271 0F38  
                        i1l3047 062C                          i1l3071 05BF                          i1l3063 05B0  
                        i1l2281 0DF9                          i1l2275 0F4E                          i1l2267 0F30  
                        i1l2339 07A7                          i1l3085 05E4                          i1l1987 0D74  
                        u116_25 0E00                          u117_25 0E05                          _INLVLA 038C  
                        _INLVLC 038E           __size_of_checkTXPower 0014                          u190_27 07A4  
                        u191_27 0D65                          _PMADRH 0892                          u192_27 0D53  
                        _PMADRL 0891                          _PMDATH 0894                          _PMDATL 0893  
                        _PMCON1 0895                          _PMCON2 0896                          u188_27 0789  
                        u189_27 079A            ?_nrf24l01GetRXPacket 0070            __size_of_flashRealod 0020  
            flashWriteByte@data 0023            __size_of_flashUpdate 0023            __size_of_nrf24l01ISR 004D  
       nrf24l01SetRXMode@config 0025                          ___bmul 0D88                          ___lmul 0FD0  
       nrf24l01SetRXMode@rxMode 0026                          ___wmul 0DF7                  __CFG_STVREN$ON 0000  
                     ??___lldiv 0029                       ??___llmod 0029            __end_of_nrf24l01Init 0FA0  
          __end_of_nrf24l01Send 0800                          _memset 0DDE           _nrf24l01InitRegisters 013D  
                        _strcat 0F54                          _strcmp 0F2E                          _strcpy 0E2D  
                        _strlen 0F09       i1nrf24l01SetRXMode@config 0075                __end_of_romArray 2000  
     i1nrf24l01SetRXMode@rxMode 0076                    _checkTXPower 0D9A                          ultoa@c 003A  
                        ultoa@v 0036              getADCValue@adcLoop 0038         __end_of__initialization 0025  
         ??_nrf24l01GetRXPacket 0021        nrf24l01SendPacket@Packet 002B              getADCValue@channel 0037  
                 i1_flashUpdate 0EA4             ___bmul@multiplicand 0021              getADCValue@divider 002F  
                __pcstackCOMMON 0070                   __end_of_sleep 0D88                   __end_of_ultoa 0420  
                     ?i1_memset 0070                         ??_sleep 0021                     loop@rfSetup 00A0  
                       ??_ultoa 0035                      __pbssBANK0 0059                      __pbssBANK1 00E4  
                    __pbssBANK2 0120               ??_nrf24l01SPISend 0070              __size_of_exception 0018  
                ?i1_flashUpdate 0070         __size_ofi1_nrf24l01Send 001B        __end_ofi1_flashWriteByte 0FD0  
             ??_nrf24l01GetPipe 002B                      __pmaintext 02F2                         ?___bmul 0021  
                       ?___lmul 0021                         ?___wmul 0070                 __CFG_PPS1WAY$ON 0000  
             _nrf24l01SetRXMode 073C               _nrf24l01SetRXPipe 0EC5          ?_nrf24l01InitRegisters 0070  
                    __pintentry 0004               _nrf24l01SetTXPipe 063A             nrf24l01SPISend@data 0070  
                       ?_memset 0021                  ___lmul@product 0029              ?_nrf24l01SetRXMode 0070  
            ?_nrf24l01SetRXPipe 0070        __end_of_enableInterrupts 0D61              ?_nrf24l01SetTXPipe 0070  
           __CFG_RSTOSC$HFINT32 0000                         ?_strcat 0021                         ?_strcmp 0070  
                       ?_strcpy 0021                         ?_strlen 0021           __end_of_n_ADDRESS_MUL 1045  
                    ??i1_memset 0076             ??_nrf24l01SetRXMode 0024        __end_of_nrf24l01SPIStart 0D69  
           ??_nrf24l01SetRXPipe 0024             ??_nrf24l01SetTXPipe 0025                         _SSP1BUF 0211  
      __end_of_nrf24l01CheckACK 0E84           _nrf24l01InterfaceInit 0E48           __end_of_flashReadByte 07E0  
              __p_romArray_text 1FE0      __end_of_nrf24l01SendPacket 02F2                   ??_getADCValue 0033  
         __size_of_nrf24l01Init 0026           __size_of_nrf24l01Send 0020       __end_of_nrf24l01SetRXMode 0777  
     __end_of_nrf24l01SetRXPipe 0EE6       __end_of_nrf24l01SetTXPipe 067E           _nrf24l01ReceivePacket 05ED  
               __size_of___bmul 0012                 __size_of___lmul 0030                         ___lldiv 04FC  
               __size_of___wmul 001B                         ___llmod 067E           __end_of_nrf24l01CELow 0D46  
               __size_of_memset 0019           __end_of_nrf24l01CSLow 0D4C                         __ptext1 0E2D  
                       __ptext2 0F7A                         __ptext3 0E48                         __ptext4 013D  
                       __ptext5 063A                         __ptext6 0D88                         __ptext7 0EC5  
                       __ptext8 054F                         __ptext9 0029                 __size_of_strcat 0026  
               __size_of_strcmp 0026               __end_of_exception 0DC6                 __size_of_strcpy 001B  
               __size_of_strlen 0025                    __size_of_ISR 000B                         _counter 00E4  
       i1flashWriteByte@address 0074                _romArray_absaddr 1FE0                         _romData 005C  
                       clrloop0 0D4D            end_of_initialization 0025                    _nrf24l01Init 0F7A  
                    _setMessage 04A8                 ??i1_flashUpdate 0076                    _nrf24l01Send 07E0  
                       memset@c 0023                         memset@n 0025                         memset@p 0027  
              nrf24l01GetPipe@i 0035                 ___lldiv@divisor 0021                 ___lldiv@counter 002E  
         _nrf24l01ChangeTXPower 06C1                setMessage@packet 0053    __size_ofi1_nrf24l01SetRXMode 0037  
                       strcmp@r 0073           i1nrf24l01Send@command 0073                         strlen@s 0028  
           __end_of_getADCValue 04A8                       _PORTAbits 000C                       _PORTCbits 000E  
                     _TRISAbits 008C                       _TRISCbits 008E                nrf24l01Send@data 0021  
              __CFG_FEXTOSC$OFF 0000                   ??_flashRealod 002A                   ??_flashUpdate 0027  
                 ??_nrf24l01ISR 007D          ?_nrf24l01InterfaceInit 0070                  i1_nrf24l01Send 0E12  
                    main@packet 00C3          ?_nrf24l01ReceivePacket 0070      __size_of_nrf24l01SetRXMode 003B  
    __size_of_nrf24l01SetRXPipe 0021      __size_of_nrf24l01SetTXPipe 0044                  __end_of___bmul 0D9A  
                __end_of___lmul 1000                  __end_of___wmul 0E12                       i1memset@c 0072  
                     i1memset@n 0074                       i1memset@p 0076                  __end_of_memset 0DF7  
                __end_of_strcat 0F7A                  __end_of_strcmp 0F54                  __end_of_strcpy 0E48  
                __end_of_strlen 0F2E             start_initialization 0011                 _nrf24l01SPISend 0D69  
                   __end_of_ISR 000F           flashWriteByte@address 0025               __size_ofi1_memset 0018  
     nrf24l01SetRXPipe@enRXAddr 0027                 _nrf24l01GetPipe 054F     __end_of_nrf24l01GetRXPacket 0004  
       __size_of_nrf24l01CEHigh 0003         __size_of_nrf24l01CSHigh 0003                     ?_setMessage 003D  
        __end_ofi1_nrf24l01Send 0E2D         __size_of_nrf24l01SPIEnd 0007                 ___llmod@divisor 0021  
               ___llmod@counter 002A          ?_nrf24l01ChangeTXPower 0024         ??_nrf24l01InitRegisters 0028  
              __CFG_LPBOREN$OFF 0000               ?i1_flashWriteByte 0070             __end_of_flashRealod 0EA4  
                   _getADCValue 0420         __size_of_flashWriteByte 003C                        ??___bmul 0022  
           __end_of_flashUpdate 0F09                        ??___lmul 0029             __end_of_nrf24l01ISR 05ED  
          setMessage@tempString 0043                        ??___wmul 0074              ??i1_flashWriteByte 0074  
          __end_of_resetRomData 1013                        ??_memset 0027               ?_enableInterrupts 0070  
                      ??_strcat 0023                        ??_strcmp 0072                        ??_strcpy 0023  
                      ??_strlen 0023              ??_enableInterrupts 0070                       ___latbits 0002  
                 __pcstackBANK0 0020                   __pcstackBANK1 00A0               ?_nrf24l01SPIStart 0070  
          checkTXPower@rxPacket 0029               ?_nrf24l01CheckACK 0070              ??_nrf24l01SPIStart 0070  
            ??_nrf24l01CheckACK 0077                 ?i1_nrf24l01Send 0071                      loop@packet 00A1  
           nrf24l01GetPipe@name 0034             nrf24l01GetPipe@pipe 0030                        ?___lldiv 0021  
                      ?___llmod 0021            __end_of_n_ADDRESS_P0 101E         __end_of_nrf24l01SPISend 0D76  
            i1nrf24l01Send@data 0071       nrf24l01InitRegisters@enAA 002F             __size_of_setMessage 0054  
            _nrf24l01SendPacket 0243         __end_of_nrf24l01GetPipe 05A0                       _exception 0DAE  
           ?_nrf24l01SendPacket 0070             i1_nrf24l01SetRXMode 0777                  __size_of_sleep 0012  
                __size_of_ultoa 0089                     _flashRealod 0E84                  ___wmul@product 0074  
        i1flashWriteByte@offset 0070                     _flashUpdate 0EE6                     _nrf24l01ISR 05A0  
                     clear_ram0 0D4C                        _PIE0bits 0090                        _PIR0bits 0010  
                     _romHolder 0120                       _sleepLoop 005A            ??_nrf24l01SendPacket 0029  
               setMessage@value 003F                 setMessage@topic 003D            ?i1_nrf24l01SetRXMode 0070  
                    _ADCON0bits 009D                      _ADCON1bits 009E               ___wmul@multiplier 0070  
                      _WPUAbits 020C                        i1_memset 0DC6                   ?_checkTXPower 0070  
                      _RXPacket 0140          __size_of_flashReadByte 0032                        _TXPacket 0059  
                    ?_exception 0070                  _nrf24l01CEHigh 0D40               ___lmul@multiplier 0021  
       ??_nrf24l01InterfaceInit 0021                  _nrf24l01CSHigh 0D46               nrf24l01ISR@status 0020  
                _nrf24l01SPIEnd 0D52         ??_nrf24l01ReceivePacket 0078          __size_of_nrf24l01CELow 0003  
         __end_ofi1_flashUpdate 0EC5          __size_of_nrf24l01CSLow 0003            flashWriteByte@offset 0021  
                _flashWriteByte 0700           ??i1_nrf24l01SetRXMode 0074                __size_of___lldiv 0053  
              __size_of___llmod 0043                ?_nrf24l01SPISend 0070                      _ANSELAbits 018C  
                    _ANSELCbits 018E                  ??_checkTXPower 0028                ?_nrf24l01GetPipe 0070  
                 _n_ADDRESS_MUL 1044                      strcat@from 0021          __end_of_nrf24l01CEHigh 0D43  
        __end_of_nrf24l01CSHigh 0D49                        __ptext10 0D76                        __ptext11 04A8  
                      __ptext20 0FD0                        __ptext12 0397                        __ptext21 04FC  
                      __ptext13 067E                        __ptext22 0D9A                        __ptext14 0F54  
                      __ptext31 05A0                        __ptext23 0002                        __ptext15 0DDE  
                      __ptext40 0D52                        __ptext32 05ED                        __ptext24 06C1  
                      __ptext16 0243                        __ptext41 0D46                        __ptext33 0DC6  
                      __ptext25 07E0                        __ptext17 0F09                        __ptext42 0D59  
                      __ptext34 0E64                        __ptext26 0EE6                        __ptext18 073C  
                      __ptext43 0D43                        __ptext35 0777                        __ptext27 0700  
                      __ptext19 0420                        __ptext44 0D40                        __ptext36 0E12  
                      __ptext28 0E84                        __ptext45 0F2E                        __ptext37 0D61  
                      __ptext29 07AE                        __ptext46 0DAE                        __ptext38 0D49  
                      __ptext47 0EA4                        __ptext39 0D69                        __ptext48 0FA0  
                      __ptext49 0DF7                    _SSP1CON1bits 0215          __end_of_nrf24l01SPIEnd 0D59  
                      _nrf24l01 005B                    _resetRomData 1000                     _OSCCON1bits 0919  
                  ??_setMessage 0043                      strcpy@from 0021   nrf24l01ChangeTXPower@addPower 0024  
       ??_nrf24l01ChangeTXPower 0026                   __size_of_main 00A5                   __size_of_loop 0114  
  nrf24l01InitRegisters@channel 002A          __end_of_flashWriteByte 073C    nrf24l01InitRegisters@feature 002C  
            exception@exception 007C                      _RC0PPSbits 0EA0                        _romArray 1FE0  
                 _flashReadByte 07AE    nrf24l01InitRegisters@rfSetup 002D                      _RC1PPSbits 0EA1  
                  ?_getADCValue 002F                      _RC2PPSbits 0EA2  __size_of_nrf24l01InitRegisters 0106  
 __end_of_nrf24l01InitRegisters 0243                        int$flags 007E    nrf24l01InitRegisters@setupAW 002B  
                  _SSP1STATbits 0214                        main@pipe 00C2          nrf24l01ReceivePacket@i 007A  
                 _nrf24l01CELow 0D43                   _nrf24l01CSLow 0D49              __end_of_setMessage 04FC  
                    _INTCONbits 000B       __size_ofi1_flashWriteByte 0030                 ?_nrf24l01CEHigh 0070  
                    _FVRCONbits 0117                ??i1_nrf24l01Send 0072                     ??_exception 007A  
               ?_nrf24l01CSHigh 0070                  __pstringtext10 1036                  __pstringtext11 103A  
                __pstringtext12 103E                  __pstringtext13 1042                  __pstringtext14 0000  
                      memset@p1 0021                       ultoa@base 0033                 ?_nrf24l01SPIEnd 0070  
                      intlevel1 0000                    _n_ADDRESS_P0 1019       __size_of_enableInterrupts 0008  
                    _PMCON1bits 0895                ___lldiv@dividend 0025               __CFG_CLKOUTEN$OFF 0000  
               ?_flashWriteByte 0021    __size_of_nrf24l01GetRXPacket 0002                  ?_flashReadByte 0021  
          i1flashWriteByte@data 0072     nrf24l01InitRegisters@config 0031       __size_of_nrf24l01SPIStart 0008  
     __size_of_nrf24l01CheckACK 0020     nrf24l01InitRegisters@status 002E      nrf24l01ReceivePacket@width 0079  
                ?_nrf24l01CELow 0070                   __pstringtext1 1000                   __pstringtext2 1019  
                 __pstringtext3 1044                   __pstringtext4 1013                   __pstringtext5 101E  
                 __pstringtext6 1023                   __pstringtext7 1028                   __pstringtext8 102D  
                 __pstringtext9 1032                  ?_nrf24l01CSLow 0070                        ultoa@buf 003B  
                      ultoa@val 002F      nrf24l01InitRegisters@DynPD 0030                        strcat@cp 0024  
                      strcat@to 0025                        strcmp@s1 0074                        strcmp@s2 0070  
              ___lldiv@quotient 002A                        strcpy@cp 0024                        strlen@cp 0027  
                      strcpy@to 0025                      _WDTCONbits 0097                   ?_nrf24l01Init 0070  
                 ?_nrf24l01Send 0021                    ?_flashRealod 0070                      _STATUSbits 0003  
          flashReadByte@address 0028                    ?_flashUpdate 0070                    ?_nrf24l01ISR 0070  
          __end_of_checkTXPower 0DAE             flashReadByte@offset 0021  
