

Microchip Technology PIC LITE Macro Assembler V2.00 build -1524193055 
                                                                                               Thu Aug 16 20:24:05 2018

Microchip Technology Omniscient Code Generator v2.00 (Free mode) build 20180527130849
     1                           	processor	16LF18325
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK1,global,class=CODE,delta=2
     5                           	psect	stringtext1,global,class=STRCODE,delta=2
     6                           	psect	stringtext2,global,class=STRCODE,delta=2
     7                           	psect	stringtext3,global,class=STRCODE,delta=2
     8                           	psect	stringtext4,global,class=STRCODE,delta=2
     9                           	psect	stringtext5,global,class=STRCODE,delta=2
    10                           	psect	stringtext6,global,class=STRCODE,delta=2
    11                           	psect	stringtext7,global,class=STRCODE,delta=2
    12                           	psect	stringtext8,global,class=STRCODE,delta=2
    13                           	psect	stringtext9,global,class=STRCODE,delta=2
    14                           	psect	stringtext10,global,class=STRCODE,delta=2
    15                           	psect	cinit,global,class=CODE,merge=1,delta=2
    16                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    17                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    18                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    19                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    20                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    21                           	psect	clrtext,global,class=CODE,delta=2
    22                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1
    23                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    24                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    25                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    26                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    27                           	psect	text1,local,class=CODE,merge=1,delta=2
    28                           	psect	text2,local,class=CODE,merge=1,delta=2
    29                           	psect	text3,local,class=CODE,merge=1,delta=2
    30                           	psect	text4,local,class=CODE,merge=1,delta=2
    31                           	psect	text5,local,class=CODE,merge=1,delta=2,group=1
    32                           	psect	text6,local,class=CODE,merge=1,delta=2
    33                           	psect	text7,local,class=CODE,merge=1,delta=2
    34                           	psect	text8,local,class=CODE,merge=1,delta=2,group=1
    35                           	psect	text9,local,class=CODE,merge=1,delta=2
    36                           	psect	text10,local,class=CODE,merge=1,delta=2
    37                           	psect	text11,local,class=CODE,merge=1,delta=2,group=2
    38                           	psect	text12,local,class=CODE,merge=1,delta=2
    39                           	psect	text13,local,class=CODE,merge=1,delta=2
    40                           	psect	text14,local,class=CODE,merge=1,delta=2,group=2
    41                           	psect	text15,local,class=CODE,merge=1,delta=2
    42                           	psect	text16,local,class=CODE,merge=1,delta=2,group=2
    43                           	psect	text17,local,class=CODE,merge=1,delta=2
    44                           	psect	text18,local,class=CODE,merge=1,delta=2,group=2
    45                           	psect	text19,local,class=CODE,merge=1,delta=2
    46                           	psect	text20,local,class=CODE,merge=1,delta=2
    47                           	psect	text21,local,class=CODE,merge=1,delta=2
    48                           	psect	text22,local,class=CODE,merge=1,delta=2
    49                           	psect	text23,local,class=CODE,merge=1,delta=2
    50                           	psect	text24,local,class=CODE,merge=1,delta=2,group=2
    51                           	psect	text25,local,class=CODE,merge=1,delta=2,group=2
    52                           	psect	text26,local,class=CODE,merge=1,delta=2
    53                           	psect	text27,local,class=CODE,merge=1,delta=2,group=2
    54                           	psect	text28,local,class=CODE,merge=1,delta=2,group=1
    55                           	psect	text29,local,class=CODE,merge=1,delta=2,group=1
    56                           	psect	text30,local,class=CODE,merge=1,delta=2,group=1
    57                           	psect	text31,local,class=CODE,merge=1,delta=2,group=1
    58                           	psect	text32,local,class=CODE,merge=1,delta=2,group=1
    59                           	psect	text33,local,class=CODE,merge=1,delta=2,group=1
    60                           	psect	text34,local,class=CODE,merge=1,delta=2,group=1
    61                           	psect	text35,local,class=CODE,merge=1,delta=2,group=1
    62                           	psect	text36,local,class=CODE,merge=1,delta=2,group=1
    63                           	psect	text37,local,class=CODE,merge=1,delta=2
    64                           	psect	text38,local,class=CODE,merge=1,delta=2
    65                           	psect	text39,local,class=CODE,merge=1,delta=2
    66                           	psect	text40,local,class=CODE,merge=1,delta=2,group=1
    67                           	psect	text41,local,class=CODE,merge=1,delta=2,group=1
    68                           	psect	text42,local,class=CODE,merge=1,delta=2,group=1
    69                           	psect	text43,local,class=CODE,merge=1,delta=2,group=1
    70                           	psect	text44,local,class=CODE,merge=1,delta=2
    71                           	psect	intentry,global,class=CODE,delta=2
    72                           	psect	text46,local,class=CODE,merge=1,delta=2
    73                           	psect	text47,local,class=CODE,merge=1,delta=2
    74                           	dabs	1,0x74,12
    75  0000                     
    76                           ; Version 2.00
    77                           ; Generated 27/05/2018 GMT
    78                           ; 
    79                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
    80                           ; All rights reserved.
    81                           ; 
    82                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    83                           ; 
    84                           ; Redistribution and use in source and binary forms, with or without modification, are
    85                           ; permitted provided that the following conditions are met:
    86                           ; 
    87                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    88                           ;        conditions and the following disclaimer.
    89                           ; 
    90                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    91                           ;        of conditions and the following disclaimer in the documentation and/or other
    92                           ;        materials provided with the distribution.
    93                           ; 
    94                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    95                           ;        software without specific prior written permission.
    96                           ; 
    97                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    98                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    99                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   100                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   101                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   102                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   103                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   104                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   105                           ; 
   106                           ; 
   107                           ; Code-generator required, PIC16LF18325 Definitions
   108                           ; 
   109                           ; SFR Addresses
   110  0000                     	;# 
   111  0001                     	;# 
   112  0002                     	;# 
   113  0003                     	;# 
   114  0004                     	;# 
   115  0005                     	;# 
   116  0006                     	;# 
   117  0007                     	;# 
   118  0008                     	;# 
   119  0009                     	;# 
   120  000A                     	;# 
   121  000B                     	;# 
   122  000C                     	;# 
   123  000E                     	;# 
   124  0010                     	;# 
   125  0011                     	;# 
   126  0012                     	;# 
   127  0013                     	;# 
   128  0014                     	;# 
   129  0015                     	;# 
   130  0015                     	;# 
   131  0016                     	;# 
   132  0016                     	;# 
   133  0017                     	;# 
   134  0018                     	;# 
   135  0019                     	;# 
   136  0019                     	;# 
   137  001A                     	;# 
   138  001B                     	;# 
   139  001C                     	;# 
   140  001D                     	;# 
   141  001E                     	;# 
   142  001F                     	;# 
   143  008C                     	;# 
   144  008E                     	;# 
   145  0090                     	;# 
   146  0091                     	;# 
   147  0092                     	;# 
   148  0093                     	;# 
   149  0094                     	;# 
   150  0097                     	;# 
   151  009B                     	;# 
   152  009B                     	;# 
   153  009C                     	;# 
   154  009D                     	;# 
   155  009E                     	;# 
   156  009F                     	;# 
   157  010C                     	;# 
   158  010E                     	;# 
   159  0111                     	;# 
   160  0112                     	;# 
   161  0113                     	;# 
   162  0114                     	;# 
   163  0115                     	;# 
   164  0116                     	;# 
   165  0117                     	;# 
   166  0118                     	;# 
   167  0119                     	;# 
   168  018C                     	;# 
   169  018E                     	;# 
   170  0199                     	;# 
   171  0199                     	;# 
   172  0199                     	;# 
   173  019A                     	;# 
   174  019A                     	;# 
   175  019A                     	;# 
   176  019B                     	;# 
   177  019B                     	;# 
   178  019B                     	;# 
   179  019B                     	;# 
   180  019B                     	;# 
   181  019C                     	;# 
   182  019C                     	;# 
   183  019C                     	;# 
   184  019D                     	;# 
   185  019D                     	;# 
   186  019D                     	;# 
   187  019E                     	;# 
   188  019E                     	;# 
   189  019E                     	;# 
   190  019F                     	;# 
   191  019F                     	;# 
   192  019F                     	;# 
   193  019F                     	;# 
   194  019F                     	;# 
   195  020C                     	;# 
   196  020E                     	;# 
   197  0211                     	;# 
   198  0211                     	;# 
   199  0212                     	;# 
   200  0212                     	;# 
   201  0213                     	;# 
   202  0213                     	;# 
   203  0214                     	;# 
   204  0214                     	;# 
   205  0215                     	;# 
   206  0215                     	;# 
   207  0215                     	;# 
   208  0215                     	;# 
   209  0216                     	;# 
   210  0216                     	;# 
   211  0217                     	;# 
   212  0217                     	;# 
   213  0219                     	;# 
   214  021A                     	;# 
   215  021B                     	;# 
   216  021C                     	;# 
   217  021D                     	;# 
   218  021D                     	;# 
   219  021E                     	;# 
   220  021F                     	;# 
   221  028C                     	;# 
   222  028E                     	;# 
   223  0291                     	;# 
   224  0291                     	;# 
   225  0292                     	;# 
   226  0293                     	;# 
   227  0294                     	;# 
   228  0295                     	;# 
   229  0295                     	;# 
   230  0296                     	;# 
   231  0297                     	;# 
   232  0298                     	;# 
   233  029F                     	;# 
   234  030C                     	;# 
   235  030E                     	;# 
   236  0311                     	;# 
   237  0311                     	;# 
   238  0312                     	;# 
   239  0313                     	;# 
   240  0314                     	;# 
   241  0315                     	;# 
   242  0315                     	;# 
   243  0316                     	;# 
   244  0317                     	;# 
   245  0318                     	;# 
   246  038C                     	;# 
   247  038E                     	;# 
   248  0391                     	;# 
   249  0392                     	;# 
   250  0393                     	;# 
   251  0397                     	;# 
   252  0398                     	;# 
   253  0399                     	;# 
   254  039A                     	;# 
   255  039C                     	;# 
   256  039D                     	;# 
   257  039E                     	;# 
   258  039F                     	;# 
   259  0411                     	;# 
   260  0411                     	;# 
   261  0412                     	;# 
   262  0413                     	;# 
   263  0414                     	;# 
   264  0415                     	;# 
   265  0416                     	;# 
   266  0417                     	;# 
   267  0418                     	;# 
   268  0418                     	;# 
   269  0419                     	;# 
   270  041A                     	;# 
   271  041B                     	;# 
   272  041C                     	;# 
   273  041D                     	;# 
   274  041E                     	;# 
   275  041F                     	;# 
   276  0498                     	;# 
   277  0498                     	;# 
   278  0499                     	;# 
   279  049A                     	;# 
   280  049B                     	;# 
   281  049B                     	;# 
   282  049C                     	;# 
   283  049D                     	;# 
   284  049E                     	;# 
   285  049F                     	;# 
   286  0617                     	;# 
   287  0618                     	;# 
   288  0619                     	;# 
   289  0619                     	;# 
   290  061A                     	;# 
   291  061B                     	;# 
   292  061C                     	;# 
   293  061C                     	;# 
   294  061F                     	;# 
   295  0691                     	;# 
   296  0692                     	;# 
   297  0693                     	;# 
   298  0694                     	;# 
   299  0695                     	;# 
   300  0696                     	;# 
   301  0697                     	;# 
   302  0698                     	;# 
   303  0699                     	;# 
   304  0711                     	;# 
   305  0712                     	;# 
   306  0713                     	;# 
   307  0714                     	;# 
   308  0715                     	;# 
   309  0716                     	;# 
   310  0717                     	;# 
   311  0718                     	;# 
   312  0719                     	;# 
   313  0891                     	;# 
   314  0891                     	;# 
   315  0891                     	;# 
   316  0891                     	;# 
   317  0891                     	;# 
   318  0891                     	;# 
   319  0892                     	;# 
   320  0892                     	;# 
   321  0892                     	;# 
   322  0893                     	;# 
   323  0893                     	;# 
   324  0893                     	;# 
   325  0893                     	;# 
   326  0893                     	;# 
   327  0893                     	;# 
   328  0894                     	;# 
   329  0894                     	;# 
   330  0894                     	;# 
   331  0895                     	;# 
   332  0895                     	;# 
   333  0895                     	;# 
   334  0896                     	;# 
   335  0896                     	;# 
   336  0896                     	;# 
   337  089B                     	;# 
   338  0911                     	;# 
   339  0912                     	;# 
   340  0913                     	;# 
   341  0914                     	;# 
   342  0915                     	;# 
   343  0916                     	;# 
   344  0918                     	;# 
   345  0919                     	;# 
   346  091A                     	;# 
   347  091B                     	;# 
   348  091C                     	;# 
   349  091D                     	;# 
   350  091E                     	;# 
   351  091F                     	;# 
   352  0E0F                     	;# 
   353  0E10                     	;# 
   354  0E11                     	;# 
   355  0E12                     	;# 
   356  0E13                     	;# 
   357  0E14                     	;# 
   358  0E15                     	;# 
   359  0E16                     	;# 
   360  0E17                     	;# 
   361  0E18                     	;# 
   362  0E19                     	;# 
   363  0E1A                     	;# 
   364  0E1B                     	;# 
   365  0E1C                     	;# 
   366  0E1D                     	;# 
   367  0E1E                     	;# 
   368  0E1F                     	;# 
   369  0E20                     	;# 
   370  0E21                     	;# 
   371  0E22                     	;# 
   372  0E24                     	;# 
   373  0E25                     	;# 
   374  0E28                     	;# 
   375  0E29                     	;# 
   376  0E2A                     	;# 
   377  0E2B                     	;# 
   378  0E2C                     	;# 
   379  0E2D                     	;# 
   380  0E2E                     	;# 
   381  0E2F                     	;# 
   382  0E90                     	;# 
   383  0E91                     	;# 
   384  0E92                     	;# 
   385  0E94                     	;# 
   386  0E95                     	;# 
   387  0EA0                     	;# 
   388  0EA1                     	;# 
   389  0EA2                     	;# 
   390  0EA3                     	;# 
   391  0EA4                     	;# 
   392  0EA5                     	;# 
   393  0F0F                     	;# 
   394  0F10                     	;# 
   395  0F11                     	;# 
   396  0F12                     	;# 
   397  0F13                     	;# 
   398  0F14                     	;# 
   399  0F15                     	;# 
   400  0F16                     	;# 
   401  0F17                     	;# 
   402  0F18                     	;# 
   403  0F19                     	;# 
   404  0F1A                     	;# 
   405  0F1B                     	;# 
   406  0F1C                     	;# 
   407  0F1D                     	;# 
   408  0F1E                     	;# 
   409  0F1F                     	;# 
   410  0F20                     	;# 
   411  0F21                     	;# 
   412  0F22                     	;# 
   413  0F23                     	;# 
   414  0F24                     	;# 
   415  0F25                     	;# 
   416  0F26                     	;# 
   417  0F27                     	;# 
   418  0F28                     	;# 
   419  0F29                     	;# 
   420  0F2A                     	;# 
   421  0F2B                     	;# 
   422  0F2C                     	;# 
   423  0F2D                     	;# 
   424  0F2E                     	;# 
   425  0F2F                     	;# 
   426  0F30                     	;# 
   427  0F31                     	;# 
   428  0F32                     	;# 
   429  0F33                     	;# 
   430  0F34                     	;# 
   431  0F35                     	;# 
   432  0F36                     	;# 
   433  0F37                     	;# 
   434  0FE4                     	;# 
   435  0FE5                     	;# 
   436  0FE6                     	;# 
   437  0FE7                     	;# 
   438  0FE8                     	;# 
   439  0FE9                     	;# 
   440  0FEA                     	;# 
   441  0FEB                     	;# 
   442  0FED                     	;# 
   443  0FEE                     	;# 
   444  0FEF                     	;# 
   445  0000                     	;# 
   446  0001                     	;# 
   447  0002                     	;# 
   448  0003                     	;# 
   449  0004                     	;# 
   450  0005                     	;# 
   451  0006                     	;# 
   452  0007                     	;# 
   453  0008                     	;# 
   454  0009                     	;# 
   455  000A                     	;# 
   456  000B                     	;# 
   457  000C                     	;# 
   458  000E                     	;# 
   459  0010                     	;# 
   460  0011                     	;# 
   461  0012                     	;# 
   462  0013                     	;# 
   463  0014                     	;# 
   464  0015                     	;# 
   465  0015                     	;# 
   466  0016                     	;# 
   467  0016                     	;# 
   468  0017                     	;# 
   469  0018                     	;# 
   470  0019                     	;# 
   471  0019                     	;# 
   472  001A                     	;# 
   473  001B                     	;# 
   474  001C                     	;# 
   475  001D                     	;# 
   476  001E                     	;# 
   477  001F                     	;# 
   478  008C                     	;# 
   479  008E                     	;# 
   480  0090                     	;# 
   481  0091                     	;# 
   482  0092                     	;# 
   483  0093                     	;# 
   484  0094                     	;# 
   485  0097                     	;# 
   486  009B                     	;# 
   487  009B                     	;# 
   488  009C                     	;# 
   489  009D                     	;# 
   490  009E                     	;# 
   491  009F                     	;# 
   492  010C                     	;# 
   493  010E                     	;# 
   494  0111                     	;# 
   495  0112                     	;# 
   496  0113                     	;# 
   497  0114                     	;# 
   498  0115                     	;# 
   499  0116                     	;# 
   500  0117                     	;# 
   501  0118                     	;# 
   502  0119                     	;# 
   503  018C                     	;# 
   504  018E                     	;# 
   505  0199                     	;# 
   506  0199                     	;# 
   507  0199                     	;# 
   508  019A                     	;# 
   509  019A                     	;# 
   510  019A                     	;# 
   511  019B                     	;# 
   512  019B                     	;# 
   513  019B                     	;# 
   514  019B                     	;# 
   515  019B                     	;# 
   516  019C                     	;# 
   517  019C                     	;# 
   518  019C                     	;# 
   519  019D                     	;# 
   520  019D                     	;# 
   521  019D                     	;# 
   522  019E                     	;# 
   523  019E                     	;# 
   524  019E                     	;# 
   525  019F                     	;# 
   526  019F                     	;# 
   527  019F                     	;# 
   528  019F                     	;# 
   529  019F                     	;# 
   530  020C                     	;# 
   531  020E                     	;# 
   532  0211                     	;# 
   533  0211                     	;# 
   534  0212                     	;# 
   535  0212                     	;# 
   536  0213                     	;# 
   537  0213                     	;# 
   538  0214                     	;# 
   539  0214                     	;# 
   540  0215                     	;# 
   541  0215                     	;# 
   542  0215                     	;# 
   543  0215                     	;# 
   544  0216                     	;# 
   545  0216                     	;# 
   546  0217                     	;# 
   547  0217                     	;# 
   548  0219                     	;# 
   549  021A                     	;# 
   550  021B                     	;# 
   551  021C                     	;# 
   552  021D                     	;# 
   553  021D                     	;# 
   554  021E                     	;# 
   555  021F                     	;# 
   556  028C                     	;# 
   557  028E                     	;# 
   558  0291                     	;# 
   559  0291                     	;# 
   560  0292                     	;# 
   561  0293                     	;# 
   562  0294                     	;# 
   563  0295                     	;# 
   564  0295                     	;# 
   565  0296                     	;# 
   566  0297                     	;# 
   567  0298                     	;# 
   568  029F                     	;# 
   569  030C                     	;# 
   570  030E                     	;# 
   571  0311                     	;# 
   572  0311                     	;# 
   573  0312                     	;# 
   574  0313                     	;# 
   575  0314                     	;# 
   576  0315                     	;# 
   577  0315                     	;# 
   578  0316                     	;# 
   579  0317                     	;# 
   580  0318                     	;# 
   581  038C                     	;# 
   582  038E                     	;# 
   583  0391                     	;# 
   584  0392                     	;# 
   585  0393                     	;# 
   586  0397                     	;# 
   587  0398                     	;# 
   588  0399                     	;# 
   589  039A                     	;# 
   590  039C                     	;# 
   591  039D                     	;# 
   592  039E                     	;# 
   593  039F                     	;# 
   594  0411                     	;# 
   595  0411                     	;# 
   596  0412                     	;# 
   597  0413                     	;# 
   598  0414                     	;# 
   599  0415                     	;# 
   600  0416                     	;# 
   601  0417                     	;# 
   602  0418                     	;# 
   603  0418                     	;# 
   604  0419                     	;# 
   605  041A                     	;# 
   606  041B                     	;# 
   607  041C                     	;# 
   608  041D                     	;# 
   609  041E                     	;# 
   610  041F                     	;# 
   611  0498                     	;# 
   612  0498                     	;# 
   613  0499                     	;# 
   614  049A                     	;# 
   615  049B                     	;# 
   616  049B                     	;# 
   617  049C                     	;# 
   618  049D                     	;# 
   619  049E                     	;# 
   620  049F                     	;# 
   621  0617                     	;# 
   622  0618                     	;# 
   623  0619                     	;# 
   624  0619                     	;# 
   625  061A                     	;# 
   626  061B                     	;# 
   627  061C                     	;# 
   628  061C                     	;# 
   629  061F                     	;# 
   630  0691                     	;# 
   631  0692                     	;# 
   632  0693                     	;# 
   633  0694                     	;# 
   634  0695                     	;# 
   635  0696                     	;# 
   636  0697                     	;# 
   637  0698                     	;# 
   638  0699                     	;# 
   639  0711                     	;# 
   640  0712                     	;# 
   641  0713                     	;# 
   642  0714                     	;# 
   643  0715                     	;# 
   644  0716                     	;# 
   645  0717                     	;# 
   646  0718                     	;# 
   647  0719                     	;# 
   648  0891                     	;# 
   649  0891                     	;# 
   650  0891                     	;# 
   651  0891                     	;# 
   652  0891                     	;# 
   653  0891                     	;# 
   654  0892                     	;# 
   655  0892                     	;# 
   656  0892                     	;# 
   657  0893                     	;# 
   658  0893                     	;# 
   659  0893                     	;# 
   660  0893                     	;# 
   661  0893                     	;# 
   662  0893                     	;# 
   663  0894                     	;# 
   664  0894                     	;# 
   665  0894                     	;# 
   666  0895                     	;# 
   667  0895                     	;# 
   668  0895                     	;# 
   669  0896                     	;# 
   670  0896                     	;# 
   671  0896                     	;# 
   672  089B                     	;# 
   673  0911                     	;# 
   674  0912                     	;# 
   675  0913                     	;# 
   676  0914                     	;# 
   677  0915                     	;# 
   678  0916                     	;# 
   679  0918                     	;# 
   680  0919                     	;# 
   681  091A                     	;# 
   682  091B                     	;# 
   683  091C                     	;# 
   684  091D                     	;# 
   685  091E                     	;# 
   686  091F                     	;# 
   687  0E0F                     	;# 
   688  0E10                     	;# 
   689  0E11                     	;# 
   690  0E12                     	;# 
   691  0E13                     	;# 
   692  0E14                     	;# 
   693  0E15                     	;# 
   694  0E16                     	;# 
   695  0E17                     	;# 
   696  0E18                     	;# 
   697  0E19                     	;# 
   698  0E1A                     	;# 
   699  0E1B                     	;# 
   700  0E1C                     	;# 
   701  0E1D                     	;# 
   702  0E1E                     	;# 
   703  0E1F                     	;# 
   704  0E20                     	;# 
   705  0E21                     	;# 
   706  0E22                     	;# 
   707  0E24                     	;# 
   708  0E25                     	;# 
   709  0E28                     	;# 
   710  0E29                     	;# 
   711  0E2A                     	;# 
   712  0E2B                     	;# 
   713  0E2C                     	;# 
   714  0E2D                     	;# 
   715  0E2E                     	;# 
   716  0E2F                     	;# 
   717  0E90                     	;# 
   718  0E91                     	;# 
   719  0E92                     	;# 
   720  0E94                     	;# 
   721  0E95                     	;# 
   722  0EA0                     	;# 
   723  0EA1                     	;# 
   724  0EA2                     	;# 
   725  0EA3                     	;# 
   726  0EA4                     	;# 
   727  0EA5                     	;# 
   728  0F0F                     	;# 
   729  0F10                     	;# 
   730  0F11                     	;# 
   731  0F12                     	;# 
   732  0F13                     	;# 
   733  0F14                     	;# 
   734  0F15                     	;# 
   735  0F16                     	;# 
   736  0F17                     	;# 
   737  0F18                     	;# 
   738  0F19                     	;# 
   739  0F1A                     	;# 
   740  0F1B                     	;# 
   741  0F1C                     	;# 
   742  0F1D                     	;# 
   743  0F1E                     	;# 
   744  0F1F                     	;# 
   745  0F20                     	;# 
   746  0F21                     	;# 
   747  0F22                     	;# 
   748  0F23                     	;# 
   749  0F24                     	;# 
   750  0F25                     	;# 
   751  0F26                     	;# 
   752  0F27                     	;# 
   753  0F28                     	;# 
   754  0F29                     	;# 
   755  0F2A                     	;# 
   756  0F2B                     	;# 
   757  0F2C                     	;# 
   758  0F2D                     	;# 
   759  0F2E                     	;# 
   760  0F2F                     	;# 
   761  0F30                     	;# 
   762  0F31                     	;# 
   763  0F32                     	;# 
   764  0F33                     	;# 
   765  0F34                     	;# 
   766  0F35                     	;# 
   767  0F36                     	;# 
   768  0F37                     	;# 
   769  0FE4                     	;# 
   770  0FE5                     	;# 
   771  0FE6                     	;# 
   772  0FE7                     	;# 
   773  0FE8                     	;# 
   774  0FE9                     	;# 
   775  0FEA                     	;# 
   776  0FEB                     	;# 
   777  0FED                     	;# 
   778  0FEE                     	;# 
   779  0FEF                     	;# 
   780  0000                     	;# 
   781  0001                     	;# 
   782  0002                     	;# 
   783  0003                     	;# 
   784  0004                     	;# 
   785  0005                     	;# 
   786  0006                     	;# 
   787  0007                     	;# 
   788  0008                     	;# 
   789  0009                     	;# 
   790  000A                     	;# 
   791  000B                     	;# 
   792  000C                     	;# 
   793  000E                     	;# 
   794  0010                     	;# 
   795  0011                     	;# 
   796  0012                     	;# 
   797  0013                     	;# 
   798  0014                     	;# 
   799  0015                     	;# 
   800  0015                     	;# 
   801  0016                     	;# 
   802  0016                     	;# 
   803  0017                     	;# 
   804  0018                     	;# 
   805  0019                     	;# 
   806  0019                     	;# 
   807  001A                     	;# 
   808  001B                     	;# 
   809  001C                     	;# 
   810  001D                     	;# 
   811  001E                     	;# 
   812  001F                     	;# 
   813  008C                     	;# 
   814  008E                     	;# 
   815  0090                     	;# 
   816  0091                     	;# 
   817  0092                     	;# 
   818  0093                     	;# 
   819  0094                     	;# 
   820  0097                     	;# 
   821  009B                     	;# 
   822  009B                     	;# 
   823  009C                     	;# 
   824  009D                     	;# 
   825  009E                     	;# 
   826  009F                     	;# 
   827  010C                     	;# 
   828  010E                     	;# 
   829  0111                     	;# 
   830  0112                     	;# 
   831  0113                     	;# 
   832  0114                     	;# 
   833  0115                     	;# 
   834  0116                     	;# 
   835  0117                     	;# 
   836  0118                     	;# 
   837  0119                     	;# 
   838  018C                     	;# 
   839  018E                     	;# 
   840  0199                     	;# 
   841  0199                     	;# 
   842  0199                     	;# 
   843  019A                     	;# 
   844  019A                     	;# 
   845  019A                     	;# 
   846  019B                     	;# 
   847  019B                     	;# 
   848  019B                     	;# 
   849  019B                     	;# 
   850  019B                     	;# 
   851  019C                     	;# 
   852  019C                     	;# 
   853  019C                     	;# 
   854  019D                     	;# 
   855  019D                     	;# 
   856  019D                     	;# 
   857  019E                     	;# 
   858  019E                     	;# 
   859  019E                     	;# 
   860  019F                     	;# 
   861  019F                     	;# 
   862  019F                     	;# 
   863  019F                     	;# 
   864  019F                     	;# 
   865  020C                     	;# 
   866  020E                     	;# 
   867  0211                     	;# 
   868  0211                     	;# 
   869  0212                     	;# 
   870  0212                     	;# 
   871  0213                     	;# 
   872  0213                     	;# 
   873  0214                     	;# 
   874  0214                     	;# 
   875  0215                     	;# 
   876  0215                     	;# 
   877  0215                     	;# 
   878  0215                     	;# 
   879  0216                     	;# 
   880  0216                     	;# 
   881  0217                     	;# 
   882  0217                     	;# 
   883  0219                     	;# 
   884  021A                     	;# 
   885  021B                     	;# 
   886  021C                     	;# 
   887  021D                     	;# 
   888  021D                     	;# 
   889  021E                     	;# 
   890  021F                     	;# 
   891  028C                     	;# 
   892  028E                     	;# 
   893  0291                     	;# 
   894  0291                     	;# 
   895  0292                     	;# 
   896  0293                     	;# 
   897  0294                     	;# 
   898  0295                     	;# 
   899  0295                     	;# 
   900  0296                     	;# 
   901  0297                     	;# 
   902  0298                     	;# 
   903  029F                     	;# 
   904  030C                     	;# 
   905  030E                     	;# 
   906  0311                     	;# 
   907  0311                     	;# 
   908  0312                     	;# 
   909  0313                     	;# 
   910  0314                     	;# 
   911  0315                     	;# 
   912  0315                     	;# 
   913  0316                     	;# 
   914  0317                     	;# 
   915  0318                     	;# 
   916  038C                     	;# 
   917  038E                     	;# 
   918  0391                     	;# 
   919  0392                     	;# 
   920  0393                     	;# 
   921  0397                     	;# 
   922  0398                     	;# 
   923  0399                     	;# 
   924  039A                     	;# 
   925  039C                     	;# 
   926  039D                     	;# 
   927  039E                     	;# 
   928  039F                     	;# 
   929  0411                     	;# 
   930  0411                     	;# 
   931  0412                     	;# 
   932  0413                     	;# 
   933  0414                     	;# 
   934  0415                     	;# 
   935  0416                     	;# 
   936  0417                     	;# 
   937  0418                     	;# 
   938  0418                     	;# 
   939  0419                     	;# 
   940  041A                     	;# 
   941  041B                     	;# 
   942  041C                     	;# 
   943  041D                     	;# 
   944  041E                     	;# 
   945  041F                     	;# 
   946  0498                     	;# 
   947  0498                     	;# 
   948  0499                     	;# 
   949  049A                     	;# 
   950  049B                     	;# 
   951  049B                     	;# 
   952  049C                     	;# 
   953  049D                     	;# 
   954  049E                     	;# 
   955  049F                     	;# 
   956  0617                     	;# 
   957  0618                     	;# 
   958  0619                     	;# 
   959  0619                     	;# 
   960  061A                     	;# 
   961  061B                     	;# 
   962  061C                     	;# 
   963  061C                     	;# 
   964  061F                     	;# 
   965  0691                     	;# 
   966  0692                     	;# 
   967  0693                     	;# 
   968  0694                     	;# 
   969  0695                     	;# 
   970  0696                     	;# 
   971  0697                     	;# 
   972  0698                     	;# 
   973  0699                     	;# 
   974  0711                     	;# 
   975  0712                     	;# 
   976  0713                     	;# 
   977  0714                     	;# 
   978  0715                     	;# 
   979  0716                     	;# 
   980  0717                     	;# 
   981  0718                     	;# 
   982  0719                     	;# 
   983  0891                     	;# 
   984  0891                     	;# 
   985  0891                     	;# 
   986  0891                     	;# 
   987  0891                     	;# 
   988  0891                     	;# 
   989  0892                     	;# 
   990  0892                     	;# 
   991  0892                     	;# 
   992  0893                     	;# 
   993  0893                     	;# 
   994  0893                     	;# 
   995  0893                     	;# 
   996  0893                     	;# 
   997  0893                     	;# 
   998  0894                     	;# 
   999  0894                     	;# 
  1000  0894                     	;# 
  1001  0895                     	;# 
  1002  0895                     	;# 
  1003  0895                     	;# 
  1004  0896                     	;# 
  1005  0896                     	;# 
  1006  0896                     	;# 
  1007  089B                     	;# 
  1008  0911                     	;# 
  1009  0912                     	;# 
  1010  0913                     	;# 
  1011  0914                     	;# 
  1012  0915                     	;# 
  1013  0916                     	;# 
  1014  0918                     	;# 
  1015  0919                     	;# 
  1016  091A                     	;# 
  1017  091B                     	;# 
  1018  091C                     	;# 
  1019  091D                     	;# 
  1020  091E                     	;# 
  1021  091F                     	;# 
  1022  0E0F                     	;# 
  1023  0E10                     	;# 
  1024  0E11                     	;# 
  1025  0E12                     	;# 
  1026  0E13                     	;# 
  1027  0E14                     	;# 
  1028  0E15                     	;# 
  1029  0E16                     	;# 
  1030  0E17                     	;# 
  1031  0E18                     	;# 
  1032  0E19                     	;# 
  1033  0E1A                     	;# 
  1034  0E1B                     	;# 
  1035  0E1C                     	;# 
  1036  0E1D                     	;# 
  1037  0E1E                     	;# 
  1038  0E1F                     	;# 
  1039  0E20                     	;# 
  1040  0E21                     	;# 
  1041  0E22                     	;# 
  1042  0E24                     	;# 
  1043  0E25                     	;# 
  1044  0E28                     	;# 
  1045  0E29                     	;# 
  1046  0E2A                     	;# 
  1047  0E2B                     	;# 
  1048  0E2C                     	;# 
  1049  0E2D                     	;# 
  1050  0E2E                     	;# 
  1051  0E2F                     	;# 
  1052  0E90                     	;# 
  1053  0E91                     	;# 
  1054  0E92                     	;# 
  1055  0E94                     	;# 
  1056  0E95                     	;# 
  1057  0EA0                     	;# 
  1058  0EA1                     	;# 
  1059  0EA2                     	;# 
  1060  0EA3                     	;# 
  1061  0EA4                     	;# 
  1062  0EA5                     	;# 
  1063  0F0F                     	;# 
  1064  0F10                     	;# 
  1065  0F11                     	;# 
  1066  0F12                     	;# 
  1067  0F13                     	;# 
  1068  0F14                     	;# 
  1069  0F15                     	;# 
  1070  0F16                     	;# 
  1071  0F17                     	;# 
  1072  0F18                     	;# 
  1073  0F19                     	;# 
  1074  0F1A                     	;# 
  1075  0F1B                     	;# 
  1076  0F1C                     	;# 
  1077  0F1D                     	;# 
  1078  0F1E                     	;# 
  1079  0F1F                     	;# 
  1080  0F20                     	;# 
  1081  0F21                     	;# 
  1082  0F22                     	;# 
  1083  0F23                     	;# 
  1084  0F24                     	;# 
  1085  0F25                     	;# 
  1086  0F26                     	;# 
  1087  0F27                     	;# 
  1088  0F28                     	;# 
  1089  0F29                     	;# 
  1090  0F2A                     	;# 
  1091  0F2B                     	;# 
  1092  0F2C                     	;# 
  1093  0F2D                     	;# 
  1094  0F2E                     	;# 
  1095  0F2F                     	;# 
  1096  0F30                     	;# 
  1097  0F31                     	;# 
  1098  0F32                     	;# 
  1099  0F33                     	;# 
  1100  0F34                     	;# 
  1101  0F35                     	;# 
  1102  0F36                     	;# 
  1103  0F37                     	;# 
  1104  0FE4                     	;# 
  1105  0FE5                     	;# 
  1106  0FE6                     	;# 
  1107  0FE7                     	;# 
  1108  0FE8                     	;# 
  1109  0FE9                     	;# 
  1110  0FEA                     	;# 
  1111  0FEB                     	;# 
  1112  0FED                     	;# 
  1113  0FEE                     	;# 
  1114  0FEF                     	;# 
  1115  0000                     	;# 
  1116  0001                     	;# 
  1117  0002                     	;# 
  1118  0003                     	;# 
  1119  0004                     	;# 
  1120  0005                     	;# 
  1121  0006                     	;# 
  1122  0007                     	;# 
  1123  0008                     	;# 
  1124  0009                     	;# 
  1125  000A                     	;# 
  1126  000B                     	;# 
  1127  000C                     	;# 
  1128  000E                     	;# 
  1129  0010                     	;# 
  1130  0011                     	;# 
  1131  0012                     	;# 
  1132  0013                     	;# 
  1133  0014                     	;# 
  1134  0015                     	;# 
  1135  0015                     	;# 
  1136  0016                     	;# 
  1137  0016                     	;# 
  1138  0017                     	;# 
  1139  0018                     	;# 
  1140  0019                     	;# 
  1141  0019                     	;# 
  1142  001A                     	;# 
  1143  001B                     	;# 
  1144  001C                     	;# 
  1145  001D                     	;# 
  1146  001E                     	;# 
  1147  001F                     	;# 
  1148  008C                     	;# 
  1149  008E                     	;# 
  1150  0090                     	;# 
  1151  0091                     	;# 
  1152  0092                     	;# 
  1153  0093                     	;# 
  1154  0094                     	;# 
  1155  0097                     	;# 
  1156  009B                     	;# 
  1157  009B                     	;# 
  1158  009C                     	;# 
  1159  009D                     	;# 
  1160  009E                     	;# 
  1161  009F                     	;# 
  1162  010C                     	;# 
  1163  010E                     	;# 
  1164  0111                     	;# 
  1165  0112                     	;# 
  1166  0113                     	;# 
  1167  0114                     	;# 
  1168  0115                     	;# 
  1169  0116                     	;# 
  1170  0117                     	;# 
  1171  0118                     	;# 
  1172  0119                     	;# 
  1173  018C                     	;# 
  1174  018E                     	;# 
  1175  0199                     	;# 
  1176  0199                     	;# 
  1177  0199                     	;# 
  1178  019A                     	;# 
  1179  019A                     	;# 
  1180  019A                     	;# 
  1181  019B                     	;# 
  1182  019B                     	;# 
  1183  019B                     	;# 
  1184  019B                     	;# 
  1185  019B                     	;# 
  1186  019C                     	;# 
  1187  019C                     	;# 
  1188  019C                     	;# 
  1189  019D                     	;# 
  1190  019D                     	;# 
  1191  019D                     	;# 
  1192  019E                     	;# 
  1193  019E                     	;# 
  1194  019E                     	;# 
  1195  019F                     	;# 
  1196  019F                     	;# 
  1197  019F                     	;# 
  1198  019F                     	;# 
  1199  019F                     	;# 
  1200  020C                     	;# 
  1201  020E                     	;# 
  1202  0211                     	;# 
  1203  0211                     	;# 
  1204  0212                     	;# 
  1205  0212                     	;# 
  1206  0213                     	;# 
  1207  0213                     	;# 
  1208  0214                     	;# 
  1209  0214                     	;# 
  1210  0215                     	;# 
  1211  0215                     	;# 
  1212  0215                     	;# 
  1213  0215                     	;# 
  1214  0216                     	;# 
  1215  0216                     	;# 
  1216  0217                     	;# 
  1217  0217                     	;# 
  1218  0219                     	;# 
  1219  021A                     	;# 
  1220  021B                     	;# 
  1221  021C                     	;# 
  1222  021D                     	;# 
  1223  021D                     	;# 
  1224  021E                     	;# 
  1225  021F                     	;# 
  1226  028C                     	;# 
  1227  028E                     	;# 
  1228  0291                     	;# 
  1229  0291                     	;# 
  1230  0292                     	;# 
  1231  0293                     	;# 
  1232  0294                     	;# 
  1233  0295                     	;# 
  1234  0295                     	;# 
  1235  0296                     	;# 
  1236  0297                     	;# 
  1237  0298                     	;# 
  1238  029F                     	;# 
  1239  030C                     	;# 
  1240  030E                     	;# 
  1241  0311                     	;# 
  1242  0311                     	;# 
  1243  0312                     	;# 
  1244  0313                     	;# 
  1245  0314                     	;# 
  1246  0315                     	;# 
  1247  0315                     	;# 
  1248  0316                     	;# 
  1249  0317                     	;# 
  1250  0318                     	;# 
  1251  038C                     	;# 
  1252  038E                     	;# 
  1253  0391                     	;# 
  1254  0392                     	;# 
  1255  0393                     	;# 
  1256  0397                     	;# 
  1257  0398                     	;# 
  1258  0399                     	;# 
  1259  039A                     	;# 
  1260  039C                     	;# 
  1261  039D                     	;# 
  1262  039E                     	;# 
  1263  039F                     	;# 
  1264  0411                     	;# 
  1265  0411                     	;# 
  1266  0412                     	;# 
  1267  0413                     	;# 
  1268  0414                     	;# 
  1269  0415                     	;# 
  1270  0416                     	;# 
  1271  0417                     	;# 
  1272  0418                     	;# 
  1273  0418                     	;# 
  1274  0419                     	;# 
  1275  041A                     	;# 
  1276  041B                     	;# 
  1277  041C                     	;# 
  1278  041D                     	;# 
  1279  041E                     	;# 
  1280  041F                     	;# 
  1281  0498                     	;# 
  1282  0498                     	;# 
  1283  0499                     	;# 
  1284  049A                     	;# 
  1285  049B                     	;# 
  1286  049B                     	;# 
  1287  049C                     	;# 
  1288  049D                     	;# 
  1289  049E                     	;# 
  1290  049F                     	;# 
  1291  0617                     	;# 
  1292  0618                     	;# 
  1293  0619                     	;# 
  1294  0619                     	;# 
  1295  061A                     	;# 
  1296  061B                     	;# 
  1297  061C                     	;# 
  1298  061C                     	;# 
  1299  061F                     	;# 
  1300  0691                     	;# 
  1301  0692                     	;# 
  1302  0693                     	;# 
  1303  0694                     	;# 
  1304  0695                     	;# 
  1305  0696                     	;# 
  1306  0697                     	;# 
  1307  0698                     	;# 
  1308  0699                     	;# 
  1309  0711                     	;# 
  1310  0712                     	;# 
  1311  0713                     	;# 
  1312  0714                     	;# 
  1313  0715                     	;# 
  1314  0716                     	;# 
  1315  0717                     	;# 
  1316  0718                     	;# 
  1317  0719                     	;# 
  1318  0891                     	;# 
  1319  0891                     	;# 
  1320  0891                     	;# 
  1321  0891                     	;# 
  1322  0891                     	;# 
  1323  0891                     	;# 
  1324  0892                     	;# 
  1325  0892                     	;# 
  1326  0892                     	;# 
  1327  0893                     	;# 
  1328  0893                     	;# 
  1329  0893                     	;# 
  1330  0893                     	;# 
  1331  0893                     	;# 
  1332  0893                     	;# 
  1333  0894                     	;# 
  1334  0894                     	;# 
  1335  0894                     	;# 
  1336  0895                     	;# 
  1337  0895                     	;# 
  1338  0895                     	;# 
  1339  0896                     	;# 
  1340  0896                     	;# 
  1341  0896                     	;# 
  1342  089B                     	;# 
  1343  0911                     	;# 
  1344  0912                     	;# 
  1345  0913                     	;# 
  1346  0914                     	;# 
  1347  0915                     	;# 
  1348  0916                     	;# 
  1349  0918                     	;# 
  1350  0919                     	;# 
  1351  091A                     	;# 
  1352  091B                     	;# 
  1353  091C                     	;# 
  1354  091D                     	;# 
  1355  091E                     	;# 
  1356  091F                     	;# 
  1357  0E0F                     	;# 
  1358  0E10                     	;# 
  1359  0E11                     	;# 
  1360  0E12                     	;# 
  1361  0E13                     	;# 
  1362  0E14                     	;# 
  1363  0E15                     	;# 
  1364  0E16                     	;# 
  1365  0E17                     	;# 
  1366  0E18                     	;# 
  1367  0E19                     	;# 
  1368  0E1A                     	;# 
  1369  0E1B                     	;# 
  1370  0E1C                     	;# 
  1371  0E1D                     	;# 
  1372  0E1E                     	;# 
  1373  0E1F                     	;# 
  1374  0E20                     	;# 
  1375  0E21                     	;# 
  1376  0E22                     	;# 
  1377  0E24                     	;# 
  1378  0E25                     	;# 
  1379  0E28                     	;# 
  1380  0E29                     	;# 
  1381  0E2A                     	;# 
  1382  0E2B                     	;# 
  1383  0E2C                     	;# 
  1384  0E2D                     	;# 
  1385  0E2E                     	;# 
  1386  0E2F                     	;# 
  1387  0E90                     	;# 
  1388  0E91                     	;# 
  1389  0E92                     	;# 
  1390  0E94                     	;# 
  1391  0E95                     	;# 
  1392  0EA0                     	;# 
  1393  0EA1                     	;# 
  1394  0EA2                     	;# 
  1395  0EA3                     	;# 
  1396  0EA4                     	;# 
  1397  0EA5                     	;# 
  1398  0F0F                     	;# 
  1399  0F10                     	;# 
  1400  0F11                     	;# 
  1401  0F12                     	;# 
  1402  0F13                     	;# 
  1403  0F14                     	;# 
  1404  0F15                     	;# 
  1405  0F16                     	;# 
  1406  0F17                     	;# 
  1407  0F18                     	;# 
  1408  0F19                     	;# 
  1409  0F1A                     	;# 
  1410  0F1B                     	;# 
  1411  0F1C                     	;# 
  1412  0F1D                     	;# 
  1413  0F1E                     	;# 
  1414  0F1F                     	;# 
  1415  0F20                     	;# 
  1416  0F21                     	;# 
  1417  0F22                     	;# 
  1418  0F23                     	;# 
  1419  0F24                     	;# 
  1420  0F25                     	;# 
  1421  0F26                     	;# 
  1422  0F27                     	;# 
  1423  0F28                     	;# 
  1424  0F29                     	;# 
  1425  0F2A                     	;# 
  1426  0F2B                     	;# 
  1427  0F2C                     	;# 
  1428  0F2D                     	;# 
  1429  0F2E                     	;# 
  1430  0F2F                     	;# 
  1431  0F30                     	;# 
  1432  0F31                     	;# 
  1433  0F32                     	;# 
  1434  0F33                     	;# 
  1435  0F34                     	;# 
  1436  0F35                     	;# 
  1437  0F36                     	;# 
  1438  0F37                     	;# 
  1439  0FE4                     	;# 
  1440  0FE5                     	;# 
  1441  0FE6                     	;# 
  1442  0FE7                     	;# 
  1443  0FE8                     	;# 
  1444  0FE9                     	;# 
  1445  0FEA                     	;# 
  1446  0FEB                     	;# 
  1447  0FED                     	;# 
  1448  0FEE                     	;# 
  1449  0FEF                     	;# 
  1450  0000                     	;# 
  1451  0001                     	;# 
  1452  0002                     	;# 
  1453  0003                     	;# 
  1454  0004                     	;# 
  1455  0005                     	;# 
  1456  0006                     	;# 
  1457  0007                     	;# 
  1458  0008                     	;# 
  1459  0009                     	;# 
  1460  000A                     	;# 
  1461  000B                     	;# 
  1462  000C                     	;# 
  1463  000E                     	;# 
  1464  0010                     	;# 
  1465  0011                     	;# 
  1466  0012                     	;# 
  1467  0013                     	;# 
  1468  0014                     	;# 
  1469  0015                     	;# 
  1470  0015                     	;# 
  1471  0016                     	;# 
  1472  0016                     	;# 
  1473  0017                     	;# 
  1474  0018                     	;# 
  1475  0019                     	;# 
  1476  0019                     	;# 
  1477  001A                     	;# 
  1478  001B                     	;# 
  1479  001C                     	;# 
  1480  001D                     	;# 
  1481  001E                     	;# 
  1482  001F                     	;# 
  1483  008C                     	;# 
  1484  008E                     	;# 
  1485  0090                     	;# 
  1486  0091                     	;# 
  1487  0092                     	;# 
  1488  0093                     	;# 
  1489  0094                     	;# 
  1490  0097                     	;# 
  1491  009B                     	;# 
  1492  009B                     	;# 
  1493  009C                     	;# 
  1494  009D                     	;# 
  1495  009E                     	;# 
  1496  009F                     	;# 
  1497  010C                     	;# 
  1498  010E                     	;# 
  1499  0111                     	;# 
  1500  0112                     	;# 
  1501  0113                     	;# 
  1502  0114                     	;# 
  1503  0115                     	;# 
  1504  0116                     	;# 
  1505  0117                     	;# 
  1506  0118                     	;# 
  1507  0119                     	;# 
  1508  018C                     	;# 
  1509  018E                     	;# 
  1510  0199                     	;# 
  1511  0199                     	;# 
  1512  0199                     	;# 
  1513  019A                     	;# 
  1514  019A                     	;# 
  1515  019A                     	;# 
  1516  019B                     	;# 
  1517  019B                     	;# 
  1518  019B                     	;# 
  1519  019B                     	;# 
  1520  019B                     	;# 
  1521  019C                     	;# 
  1522  019C                     	;# 
  1523  019C                     	;# 
  1524  019D                     	;# 
  1525  019D                     	;# 
  1526  019D                     	;# 
  1527  019E                     	;# 
  1528  019E                     	;# 
  1529  019E                     	;# 
  1530  019F                     	;# 
  1531  019F                     	;# 
  1532  019F                     	;# 
  1533  019F                     	;# 
  1534  019F                     	;# 
  1535  020C                     	;# 
  1536  020E                     	;# 
  1537  0211                     	;# 
  1538  0211                     	;# 
  1539  0212                     	;# 
  1540  0212                     	;# 
  1541  0213                     	;# 
  1542  0213                     	;# 
  1543  0214                     	;# 
  1544  0214                     	;# 
  1545  0215                     	;# 
  1546  0215                     	;# 
  1547  0215                     	;# 
  1548  0215                     	;# 
  1549  0216                     	;# 
  1550  0216                     	;# 
  1551  0217                     	;# 
  1552  0217                     	;# 
  1553  0219                     	;# 
  1554  021A                     	;# 
  1555  021B                     	;# 
  1556  021C                     	;# 
  1557  021D                     	;# 
  1558  021D                     	;# 
  1559  021E                     	;# 
  1560  021F                     	;# 
  1561  028C                     	;# 
  1562  028E                     	;# 
  1563  0291                     	;# 
  1564  0291                     	;# 
  1565  0292                     	;# 
  1566  0293                     	;# 
  1567  0294                     	;# 
  1568  0295                     	;# 
  1569  0295                     	;# 
  1570  0296                     	;# 
  1571  0297                     	;# 
  1572  0298                     	;# 
  1573  029F                     	;# 
  1574  030C                     	;# 
  1575  030E                     	;# 
  1576  0311                     	;# 
  1577  0311                     	;# 
  1578  0312                     	;# 
  1579  0313                     	;# 
  1580  0314                     	;# 
  1581  0315                     	;# 
  1582  0315                     	;# 
  1583  0316                     	;# 
  1584  0317                     	;# 
  1585  0318                     	;# 
  1586  038C                     	;# 
  1587  038E                     	;# 
  1588  0391                     	;# 
  1589  0392                     	;# 
  1590  0393                     	;# 
  1591  0397                     	;# 
  1592  0398                     	;# 
  1593  0399                     	;# 
  1594  039A                     	;# 
  1595  039C                     	;# 
  1596  039D                     	;# 
  1597  039E                     	;# 
  1598  039F                     	;# 
  1599  0411                     	;# 
  1600  0411                     	;# 
  1601  0412                     	;# 
  1602  0413                     	;# 
  1603  0414                     	;# 
  1604  0415                     	;# 
  1605  0416                     	;# 
  1606  0417                     	;# 
  1607  0418                     	;# 
  1608  0418                     	;# 
  1609  0419                     	;# 
  1610  041A                     	;# 
  1611  041B                     	;# 
  1612  041C                     	;# 
  1613  041D                     	;# 
  1614  041E                     	;# 
  1615  041F                     	;# 
  1616  0498                     	;# 
  1617  0498                     	;# 
  1618  0499                     	;# 
  1619  049A                     	;# 
  1620  049B                     	;# 
  1621  049B                     	;# 
  1622  049C                     	;# 
  1623  049D                     	;# 
  1624  049E                     	;# 
  1625  049F                     	;# 
  1626  0617                     	;# 
  1627  0618                     	;# 
  1628  0619                     	;# 
  1629  0619                     	;# 
  1630  061A                     	;# 
  1631  061B                     	;# 
  1632  061C                     	;# 
  1633  061C                     	;# 
  1634  061F                     	;# 
  1635  0691                     	;# 
  1636  0692                     	;# 
  1637  0693                     	;# 
  1638  0694                     	;# 
  1639  0695                     	;# 
  1640  0696                     	;# 
  1641  0697                     	;# 
  1642  0698                     	;# 
  1643  0699                     	;# 
  1644  0711                     	;# 
  1645  0712                     	;# 
  1646  0713                     	;# 
  1647  0714                     	;# 
  1648  0715                     	;# 
  1649  0716                     	;# 
  1650  0717                     	;# 
  1651  0718                     	;# 
  1652  0719                     	;# 
  1653  0891                     	;# 
  1654  0891                     	;# 
  1655  0891                     	;# 
  1656  0891                     	;# 
  1657  0891                     	;# 
  1658  0891                     	;# 
  1659  0892                     	;# 
  1660  0892                     	;# 
  1661  0892                     	;# 
  1662  0893                     	;# 
  1663  0893                     	;# 
  1664  0893                     	;# 
  1665  0893                     	;# 
  1666  0893                     	;# 
  1667  0893                     	;# 
  1668  0894                     	;# 
  1669  0894                     	;# 
  1670  0894                     	;# 
  1671  0895                     	;# 
  1672  0895                     	;# 
  1673  0895                     	;# 
  1674  0896                     	;# 
  1675  0896                     	;# 
  1676  0896                     	;# 
  1677  089B                     	;# 
  1678  0911                     	;# 
  1679  0912                     	;# 
  1680  0913                     	;# 
  1681  0914                     	;# 
  1682  0915                     	;# 
  1683  0916                     	;# 
  1684  0918                     	;# 
  1685  0919                     	;# 
  1686  091A                     	;# 
  1687  091B                     	;# 
  1688  091C                     	;# 
  1689  091D                     	;# 
  1690  091E                     	;# 
  1691  091F                     	;# 
  1692  0E0F                     	;# 
  1693  0E10                     	;# 
  1694  0E11                     	;# 
  1695  0E12                     	;# 
  1696  0E13                     	;# 
  1697  0E14                     	;# 
  1698  0E15                     	;# 
  1699  0E16                     	;# 
  1700  0E17                     	;# 
  1701  0E18                     	;# 
  1702  0E19                     	;# 
  1703  0E1A                     	;# 
  1704  0E1B                     	;# 
  1705  0E1C                     	;# 
  1706  0E1D                     	;# 
  1707  0E1E                     	;# 
  1708  0E1F                     	;# 
  1709  0E20                     	;# 
  1710  0E21                     	;# 
  1711  0E22                     	;# 
  1712  0E24                     	;# 
  1713  0E25                     	;# 
  1714  0E28                     	;# 
  1715  0E29                     	;# 
  1716  0E2A                     	;# 
  1717  0E2B                     	;# 
  1718  0E2C                     	;# 
  1719  0E2D                     	;# 
  1720  0E2E                     	;# 
  1721  0E2F                     	;# 
  1722  0E90                     	;# 
  1723  0E91                     	;# 
  1724  0E92                     	;# 
  1725  0E94                     	;# 
  1726  0E95                     	;# 
  1727  0EA0                     	;# 
  1728  0EA1                     	;# 
  1729  0EA2                     	;# 
  1730  0EA3                     	;# 
  1731  0EA4                     	;# 
  1732  0EA5                     	;# 
  1733  0F0F                     	;# 
  1734  0F10                     	;# 
  1735  0F11                     	;# 
  1736  0F12                     	;# 
  1737  0F13                     	;# 
  1738  0F14                     	;# 
  1739  0F15                     	;# 
  1740  0F16                     	;# 
  1741  0F17                     	;# 
  1742  0F18                     	;# 
  1743  0F19                     	;# 
  1744  0F1A                     	;# 
  1745  0F1B                     	;# 
  1746  0F1C                     	;# 
  1747  0F1D                     	;# 
  1748  0F1E                     	;# 
  1749  0F1F                     	;# 
  1750  0F20                     	;# 
  1751  0F21                     	;# 
  1752  0F22                     	;# 
  1753  0F23                     	;# 
  1754  0F24                     	;# 
  1755  0F25                     	;# 
  1756  0F26                     	;# 
  1757  0F27                     	;# 
  1758  0F28                     	;# 
  1759  0F29                     	;# 
  1760  0F2A                     	;# 
  1761  0F2B                     	;# 
  1762  0F2C                     	;# 
  1763  0F2D                     	;# 
  1764  0F2E                     	;# 
  1765  0F2F                     	;# 
  1766  0F30                     	;# 
  1767  0F31                     	;# 
  1768  0F32                     	;# 
  1769  0F33                     	;# 
  1770  0F34                     	;# 
  1771  0F35                     	;# 
  1772  0F36                     	;# 
  1773  0F37                     	;# 
  1774  0FE4                     	;# 
  1775  0FE5                     	;# 
  1776  0FE6                     	;# 
  1777  0FE7                     	;# 
  1778  0FE8                     	;# 
  1779  0FE9                     	;# 
  1780  0FEA                     	;# 
  1781  0FEB                     	;# 
  1782  0FED                     	;# 
  1783  0FEE                     	;# 
  1784  0FEF                     	;# 
  1785  0000                     	;# 
  1786  0001                     	;# 
  1787  0002                     	;# 
  1788  0003                     	;# 
  1789  0004                     	;# 
  1790  0005                     	;# 
  1791  0006                     	;# 
  1792  0007                     	;# 
  1793  0008                     	;# 
  1794  0009                     	;# 
  1795  000A                     	;# 
  1796  000B                     	;# 
  1797  000C                     	;# 
  1798  000E                     	;# 
  1799  0010                     	;# 
  1800  0011                     	;# 
  1801  0012                     	;# 
  1802  0013                     	;# 
  1803  0014                     	;# 
  1804  0015                     	;# 
  1805  0015                     	;# 
  1806  0016                     	;# 
  1807  0016                     	;# 
  1808  0017                     	;# 
  1809  0018                     	;# 
  1810  0019                     	;# 
  1811  0019                     	;# 
  1812  001A                     	;# 
  1813  001B                     	;# 
  1814  001C                     	;# 
  1815  001D                     	;# 
  1816  001E                     	;# 
  1817  001F                     	;# 
  1818  008C                     	;# 
  1819  008E                     	;# 
  1820  0090                     	;# 
  1821  0091                     	;# 
  1822  0092                     	;# 
  1823  0093                     	;# 
  1824  0094                     	;# 
  1825  0097                     	;# 
  1826  009B                     	;# 
  1827  009B                     	;# 
  1828  009C                     	;# 
  1829  009D                     	;# 
  1830  009E                     	;# 
  1831  009F                     	;# 
  1832  010C                     	;# 
  1833  010E                     	;# 
  1834  0111                     	;# 
  1835  0112                     	;# 
  1836  0113                     	;# 
  1837  0114                     	;# 
  1838  0115                     	;# 
  1839  0116                     	;# 
  1840  0117                     	;# 
  1841  0118                     	;# 
  1842  0119                     	;# 
  1843  018C                     	;# 
  1844  018E                     	;# 
  1845  0199                     	;# 
  1846  0199                     	;# 
  1847  0199                     	;# 
  1848  019A                     	;# 
  1849  019A                     	;# 
  1850  019A                     	;# 
  1851  019B                     	;# 
  1852  019B                     	;# 
  1853  019B                     	;# 
  1854  019B                     	;# 
  1855  019B                     	;# 
  1856  019C                     	;# 
  1857  019C                     	;# 
  1858  019C                     	;# 
  1859  019D                     	;# 
  1860  019D                     	;# 
  1861  019D                     	;# 
  1862  019E                     	;# 
  1863  019E                     	;# 
  1864  019E                     	;# 
  1865  019F                     	;# 
  1866  019F                     	;# 
  1867  019F                     	;# 
  1868  019F                     	;# 
  1869  019F                     	;# 
  1870  020C                     	;# 
  1871  020E                     	;# 
  1872  0211                     	;# 
  1873  0211                     	;# 
  1874  0212                     	;# 
  1875  0212                     	;# 
  1876  0213                     	;# 
  1877  0213                     	;# 
  1878  0214                     	;# 
  1879  0214                     	;# 
  1880  0215                     	;# 
  1881  0215                     	;# 
  1882  0215                     	;# 
  1883  0215                     	;# 
  1884  0216                     	;# 
  1885  0216                     	;# 
  1886  0217                     	;# 
  1887  0217                     	;# 
  1888  0219                     	;# 
  1889  021A                     	;# 
  1890  021B                     	;# 
  1891  021C                     	;# 
  1892  021D                     	;# 
  1893  021D                     	;# 
  1894  021E                     	;# 
  1895  021F                     	;# 
  1896  028C                     	;# 
  1897  028E                     	;# 
  1898  0291                     	;# 
  1899  0291                     	;# 
  1900  0292                     	;# 
  1901  0293                     	;# 
  1902  0294                     	;# 
  1903  0295                     	;# 
  1904  0295                     	;# 
  1905  0296                     	;# 
  1906  0297                     	;# 
  1907  0298                     	;# 
  1908  029F                     	;# 
  1909  030C                     	;# 
  1910  030E                     	;# 
  1911  0311                     	;# 
  1912  0311                     	;# 
  1913  0312                     	;# 
  1914  0313                     	;# 
  1915  0314                     	;# 
  1916  0315                     	;# 
  1917  0315                     	;# 
  1918  0316                     	;# 
  1919  0317                     	;# 
  1920  0318                     	;# 
  1921  038C                     	;# 
  1922  038E                     	;# 
  1923  0391                     	;# 
  1924  0392                     	;# 
  1925  0393                     	;# 
  1926  0397                     	;# 
  1927  0398                     	;# 
  1928  0399                     	;# 
  1929  039A                     	;# 
  1930  039C                     	;# 
  1931  039D                     	;# 
  1932  039E                     	;# 
  1933  039F                     	;# 
  1934  0411                     	;# 
  1935  0411                     	;# 
  1936  0412                     	;# 
  1937  0413                     	;# 
  1938  0414                     	;# 
  1939  0415                     	;# 
  1940  0416                     	;# 
  1941  0417                     	;# 
  1942  0418                     	;# 
  1943  0418                     	;# 
  1944  0419                     	;# 
  1945  041A                     	;# 
  1946  041B                     	;# 
  1947  041C                     	;# 
  1948  041D                     	;# 
  1949  041E                     	;# 
  1950  041F                     	;# 
  1951  0498                     	;# 
  1952  0498                     	;# 
  1953  0499                     	;# 
  1954  049A                     	;# 
  1955  049B                     	;# 
  1956  049B                     	;# 
  1957  049C                     	;# 
  1958  049D                     	;# 
  1959  049E                     	;# 
  1960  049F                     	;# 
  1961  0617                     	;# 
  1962  0618                     	;# 
  1963  0619                     	;# 
  1964  0619                     	;# 
  1965  061A                     	;# 
  1966  061B                     	;# 
  1967  061C                     	;# 
  1968  061C                     	;# 
  1969  061F                     	;# 
  1970  0691                     	;# 
  1971  0692                     	;# 
  1972  0693                     	;# 
  1973  0694                     	;# 
  1974  0695                     	;# 
  1975  0696                     	;# 
  1976  0697                     	;# 
  1977  0698                     	;# 
  1978  0699                     	;# 
  1979  0711                     	;# 
  1980  0712                     	;# 
  1981  0713                     	;# 
  1982  0714                     	;# 
  1983  0715                     	;# 
  1984  0716                     	;# 
  1985  0717                     	;# 
  1986  0718                     	;# 
  1987  0719                     	;# 
  1988  0891                     	;# 
  1989  0891                     	;# 
  1990  0891                     	;# 
  1991  0891                     	;# 
  1992  0891                     	;# 
  1993  0891                     	;# 
  1994  0892                     	;# 
  1995  0892                     	;# 
  1996  0892                     	;# 
  1997  0893                     	;# 
  1998  0893                     	;# 
  1999  0893                     	;# 
  2000  0893                     	;# 
  2001  0893                     	;# 
  2002  0893                     	;# 
  2003  0894                     	;# 
  2004  0894                     	;# 
  2005  0894                     	;# 
  2006  0895                     	;# 
  2007  0895                     	;# 
  2008  0895                     	;# 
  2009  0896                     	;# 
  2010  0896                     	;# 
  2011  0896                     	;# 
  2012  089B                     	;# 
  2013  0911                     	;# 
  2014  0912                     	;# 
  2015  0913                     	;# 
  2016  0914                     	;# 
  2017  0915                     	;# 
  2018  0916                     	;# 
  2019  0918                     	;# 
  2020  0919                     	;# 
  2021  091A                     	;# 
  2022  091B                     	;# 
  2023  091C                     	;# 
  2024  091D                     	;# 
  2025  091E                     	;# 
  2026  091F                     	;# 
  2027  0E0F                     	;# 
  2028  0E10                     	;# 
  2029  0E11                     	;# 
  2030  0E12                     	;# 
  2031  0E13                     	;# 
  2032  0E14                     	;# 
  2033  0E15                     	;# 
  2034  0E16                     	;# 
  2035  0E17                     	;# 
  2036  0E18                     	;# 
  2037  0E19                     	;# 
  2038  0E1A                     	;# 
  2039  0E1B                     	;# 
  2040  0E1C                     	;# 
  2041  0E1D                     	;# 
  2042  0E1E                     	;# 
  2043  0E1F                     	;# 
  2044  0E20                     	;# 
  2045  0E21                     	;# 
  2046  0E22                     	;# 
  2047  0E24                     	;# 
  2048  0E25                     	;# 
  2049  0E28                     	;# 
  2050  0E29                     	;# 
  2051  0E2A                     	;# 
  2052  0E2B                     	;# 
  2053  0E2C                     	;# 
  2054  0E2D                     	;# 
  2055  0E2E                     	;# 
  2056  0E2F                     	;# 
  2057  0E90                     	;# 
  2058  0E91                     	;# 
  2059  0E92                     	;# 
  2060  0E94                     	;# 
  2061  0E95                     	;# 
  2062  0EA0                     	;# 
  2063  0EA1                     	;# 
  2064  0EA2                     	;# 
  2065  0EA3                     	;# 
  2066  0EA4                     	;# 
  2067  0EA5                     	;# 
  2068  0F0F                     	;# 
  2069  0F10                     	;# 
  2070  0F11                     	;# 
  2071  0F12                     	;# 
  2072  0F13                     	;# 
  2073  0F14                     	;# 
  2074  0F15                     	;# 
  2075  0F16                     	;# 
  2076  0F17                     	;# 
  2077  0F18                     	;# 
  2078  0F19                     	;# 
  2079  0F1A                     	;# 
  2080  0F1B                     	;# 
  2081  0F1C                     	;# 
  2082  0F1D                     	;# 
  2083  0F1E                     	;# 
  2084  0F1F                     	;# 
  2085  0F20                     	;# 
  2086  0F21                     	;# 
  2087  0F22                     	;# 
  2088  0F23                     	;# 
  2089  0F24                     	;# 
  2090  0F25                     	;# 
  2091  0F26                     	;# 
  2092  0F27                     	;# 
  2093  0F28                     	;# 
  2094  0F29                     	;# 
  2095  0F2A                     	;# 
  2096  0F2B                     	;# 
  2097  0F2C                     	;# 
  2098  0F2D                     	;# 
  2099  0F2E                     	;# 
  2100  0F2F                     	;# 
  2101  0F30                     	;# 
  2102  0F31                     	;# 
  2103  0F32                     	;# 
  2104  0F33                     	;# 
  2105  0F34                     	;# 
  2106  0F35                     	;# 
  2107  0F36                     	;# 
  2108  0F37                     	;# 
  2109  0FE4                     	;# 
  2110  0FE5                     	;# 
  2111  0FE6                     	;# 
  2112  0FE7                     	;# 
  2113  0FE8                     	;# 
  2114  0FE9                     	;# 
  2115  0FEA                     	;# 
  2116  0FEB                     	;# 
  2117  0FED                     	;# 
  2118  0FEE                     	;# 
  2119  0FEF                     	;# 
  2120  0000                     	;# 
  2121  0001                     	;# 
  2122  0002                     	;# 
  2123  0003                     	;# 
  2124  0004                     	;# 
  2125  0005                     	;# 
  2126  0006                     	;# 
  2127  0007                     	;# 
  2128  0008                     	;# 
  2129  0009                     	;# 
  2130  000A                     	;# 
  2131  000B                     	;# 
  2132  000C                     	;# 
  2133  000E                     	;# 
  2134  0010                     	;# 
  2135  0011                     	;# 
  2136  0012                     	;# 
  2137  0013                     	;# 
  2138  0014                     	;# 
  2139  0015                     	;# 
  2140  0015                     	;# 
  2141  0016                     	;# 
  2142  0016                     	;# 
  2143  0017                     	;# 
  2144  0018                     	;# 
  2145  0019                     	;# 
  2146  0019                     	;# 
  2147  001A                     	;# 
  2148  001B                     	;# 
  2149  001C                     	;# 
  2150  001D                     	;# 
  2151  001E                     	;# 
  2152  001F                     	;# 
  2153  008C                     	;# 
  2154  008E                     	;# 
  2155  0090                     	;# 
  2156  0091                     	;# 
  2157  0092                     	;# 
  2158  0093                     	;# 
  2159  0094                     	;# 
  2160  0097                     	;# 
  2161  009B                     	;# 
  2162  009B                     	;# 
  2163  009C                     	;# 
  2164  009D                     	;# 
  2165  009E                     	;# 
  2166  009F                     	;# 
  2167  010C                     	;# 
  2168  010E                     	;# 
  2169  0111                     	;# 
  2170  0112                     	;# 
  2171  0113                     	;# 
  2172  0114                     	;# 
  2173  0115                     	;# 
  2174  0116                     	;# 
  2175  0117                     	;# 
  2176  0118                     	;# 
  2177  0119                     	;# 
  2178  018C                     	;# 
  2179  018E                     	;# 
  2180  0199                     	;# 
  2181  0199                     	;# 
  2182  0199                     	;# 
  2183  019A                     	;# 
  2184  019A                     	;# 
  2185  019A                     	;# 
  2186  019B                     	;# 
  2187  019B                     	;# 
  2188  019B                     	;# 
  2189  019B                     	;# 
  2190  019B                     	;# 
  2191  019C                     	;# 
  2192  019C                     	;# 
  2193  019C                     	;# 
  2194  019D                     	;# 
  2195  019D                     	;# 
  2196  019D                     	;# 
  2197  019E                     	;# 
  2198  019E                     	;# 
  2199  019E                     	;# 
  2200  019F                     	;# 
  2201  019F                     	;# 
  2202  019F                     	;# 
  2203  019F                     	;# 
  2204  019F                     	;# 
  2205  020C                     	;# 
  2206  020E                     	;# 
  2207  0211                     	;# 
  2208  0211                     	;# 
  2209  0212                     	;# 
  2210  0212                     	;# 
  2211  0213                     	;# 
  2212  0213                     	;# 
  2213  0214                     	;# 
  2214  0214                     	;# 
  2215  0215                     	;# 
  2216  0215                     	;# 
  2217  0215                     	;# 
  2218  0215                     	;# 
  2219  0216                     	;# 
  2220  0216                     	;# 
  2221  0217                     	;# 
  2222  0217                     	;# 
  2223  0219                     	;# 
  2224  021A                     	;# 
  2225  021B                     	;# 
  2226  021C                     	;# 
  2227  021D                     	;# 
  2228  021D                     	;# 
  2229  021E                     	;# 
  2230  021F                     	;# 
  2231  028C                     	;# 
  2232  028E                     	;# 
  2233  0291                     	;# 
  2234  0291                     	;# 
  2235  0292                     	;# 
  2236  0293                     	;# 
  2237  0294                     	;# 
  2238  0295                     	;# 
  2239  0295                     	;# 
  2240  0296                     	;# 
  2241  0297                     	;# 
  2242  0298                     	;# 
  2243  029F                     	;# 
  2244  030C                     	;# 
  2245  030E                     	;# 
  2246  0311                     	;# 
  2247  0311                     	;# 
  2248  0312                     	;# 
  2249  0313                     	;# 
  2250  0314                     	;# 
  2251  0315                     	;# 
  2252  0315                     	;# 
  2253  0316                     	;# 
  2254  0317                     	;# 
  2255  0318                     	;# 
  2256  038C                     	;# 
  2257  038E                     	;# 
  2258  0391                     	;# 
  2259  0392                     	;# 
  2260  0393                     	;# 
  2261  0397                     	;# 
  2262  0398                     	;# 
  2263  0399                     	;# 
  2264  039A                     	;# 
  2265  039C                     	;# 
  2266  039D                     	;# 
  2267  039E                     	;# 
  2268  039F                     	;# 
  2269  0411                     	;# 
  2270  0411                     	;# 
  2271  0412                     	;# 
  2272  0413                     	;# 
  2273  0414                     	;# 
  2274  0415                     	;# 
  2275  0416                     	;# 
  2276  0417                     	;# 
  2277  0418                     	;# 
  2278  0418                     	;# 
  2279  0419                     	;# 
  2280  041A                     	;# 
  2281  041B                     	;# 
  2282  041C                     	;# 
  2283  041D                     	;# 
  2284  041E                     	;# 
  2285  041F                     	;# 
  2286  0498                     	;# 
  2287  0498                     	;# 
  2288  0499                     	;# 
  2289  049A                     	;# 
  2290  049B                     	;# 
  2291  049B                     	;# 
  2292  049C                     	;# 
  2293  049D                     	;# 
  2294  049E                     	;# 
  2295  049F                     	;# 
  2296  0617                     	;# 
  2297  0618                     	;# 
  2298  0619                     	;# 
  2299  0619                     	;# 
  2300  061A                     	;# 
  2301  061B                     	;# 
  2302  061C                     	;# 
  2303  061C                     	;# 
  2304  061F                     	;# 
  2305  0691                     	;# 
  2306  0692                     	;# 
  2307  0693                     	;# 
  2308  0694                     	;# 
  2309  0695                     	;# 
  2310  0696                     	;# 
  2311  0697                     	;# 
  2312  0698                     	;# 
  2313  0699                     	;# 
  2314  0711                     	;# 
  2315  0712                     	;# 
  2316  0713                     	;# 
  2317  0714                     	;# 
  2318  0715                     	;# 
  2319  0716                     	;# 
  2320  0717                     	;# 
  2321  0718                     	;# 
  2322  0719                     	;# 
  2323  0891                     	;# 
  2324  0891                     	;# 
  2325  0891                     	;# 
  2326  0891                     	;# 
  2327  0891                     	;# 
  2328  0891                     	;# 
  2329  0892                     	;# 
  2330  0892                     	;# 
  2331  0892                     	;# 
  2332  0893                     	;# 
  2333  0893                     	;# 
  2334  0893                     	;# 
  2335  0893                     	;# 
  2336  0893                     	;# 
  2337  0893                     	;# 
  2338  0894                     	;# 
  2339  0894                     	;# 
  2340  0894                     	;# 
  2341  0895                     	;# 
  2342  0895                     	;# 
  2343  0895                     	;# 
  2344  0896                     	;# 
  2345  0896                     	;# 
  2346  0896                     	;# 
  2347  089B                     	;# 
  2348  0911                     	;# 
  2349  0912                     	;# 
  2350  0913                     	;# 
  2351  0914                     	;# 
  2352  0915                     	;# 
  2353  0916                     	;# 
  2354  0918                     	;# 
  2355  0919                     	;# 
  2356  091A                     	;# 
  2357  091B                     	;# 
  2358  091C                     	;# 
  2359  091D                     	;# 
  2360  091E                     	;# 
  2361  091F                     	;# 
  2362  0E0F                     	;# 
  2363  0E10                     	;# 
  2364  0E11                     	;# 
  2365  0E12                     	;# 
  2366  0E13                     	;# 
  2367  0E14                     	;# 
  2368  0E15                     	;# 
  2369  0E16                     	;# 
  2370  0E17                     	;# 
  2371  0E18                     	;# 
  2372  0E19                     	;# 
  2373  0E1A                     	;# 
  2374  0E1B                     	;# 
  2375  0E1C                     	;# 
  2376  0E1D                     	;# 
  2377  0E1E                     	;# 
  2378  0E1F                     	;# 
  2379  0E20                     	;# 
  2380  0E21                     	;# 
  2381  0E22                     	;# 
  2382  0E24                     	;# 
  2383  0E25                     	;# 
  2384  0E28                     	;# 
  2385  0E29                     	;# 
  2386  0E2A                     	;# 
  2387  0E2B                     	;# 
  2388  0E2C                     	;# 
  2389  0E2D                     	;# 
  2390  0E2E                     	;# 
  2391  0E2F                     	;# 
  2392  0E90                     	;# 
  2393  0E91                     	;# 
  2394  0E92                     	;# 
  2395  0E94                     	;# 
  2396  0E95                     	;# 
  2397  0EA0                     	;# 
  2398  0EA1                     	;# 
  2399  0EA2                     	;# 
  2400  0EA3                     	;# 
  2401  0EA4                     	;# 
  2402  0EA5                     	;# 
  2403  0F0F                     	;# 
  2404  0F10                     	;# 
  2405  0F11                     	;# 
  2406  0F12                     	;# 
  2407  0F13                     	;# 
  2408  0F14                     	;# 
  2409  0F15                     	;# 
  2410  0F16                     	;# 
  2411  0F17                     	;# 
  2412  0F18                     	;# 
  2413  0F19                     	;# 
  2414  0F1A                     	;# 
  2415  0F1B                     	;# 
  2416  0F1C                     	;# 
  2417  0F1D                     	;# 
  2418  0F1E                     	;# 
  2419  0F1F                     	;# 
  2420  0F20                     	;# 
  2421  0F21                     	;# 
  2422  0F22                     	;# 
  2423  0F23                     	;# 
  2424  0F24                     	;# 
  2425  0F25                     	;# 
  2426  0F26                     	;# 
  2427  0F27                     	;# 
  2428  0F28                     	;# 
  2429  0F29                     	;# 
  2430  0F2A                     	;# 
  2431  0F2B                     	;# 
  2432  0F2C                     	;# 
  2433  0F2D                     	;# 
  2434  0F2E                     	;# 
  2435  0F2F                     	;# 
  2436  0F30                     	;# 
  2437  0F31                     	;# 
  2438  0F32                     	;# 
  2439  0F33                     	;# 
  2440  0F34                     	;# 
  2441  0F35                     	;# 
  2442  0F36                     	;# 
  2443  0F37                     	;# 
  2444  0FE4                     	;# 
  2445  0FE5                     	;# 
  2446  0FE6                     	;# 
  2447  0FE7                     	;# 
  2448  0FE8                     	;# 
  2449  0FE9                     	;# 
  2450  0FEA                     	;# 
  2451  0FEB                     	;# 
  2452  0FED                     	;# 
  2453  0FEE                     	;# 
  2454  0FEF                     	;# 
  2455                           
  2456                           	psect	idataBANK1
  2457  07FF                     __pidataBANK1:	
  2458 ;;nrf24l01Service@width	offset	0
  2459 ;;nrf24l01Service@i	offset	1
  2460 ;;strcmp@s1	offset	0
  2461 ;;strcmp@r	offset	1
  2462 ;;strcmp@s2	offset=-1 (param)
  2463 ;;nrf24l01SendTXBuffer@packet	offset	0
  2464 ;;nrf24l01SendTXBuffer@i	offset	1
  2465 ;;nrf24l01SendTXBuffer@width	offset	2
  2466 ;;strlen@s	offset	0
  2467 ;;strlen@cp	offset	1
  2468 ;;nrf24l01SetRXMode@rxMode	offset	0
  2469 ;;nrf24l01Send@command	offset	0
  2470 ;;nrf24l01Send@data	offset=-1 (param)
  2471 ;;nrf24l01SPISend@data	offset	0
  2472 ;;memset@p	offset	0
  2473 ;;memset@p1	offset=-2 (param)
  2474 ;;memset@c	offset=-4 (param)
  2475 ;;memset@n	offset=-6 (param)
  2476 ;;nrf24l01Service@width	offset	0
  2477 ;;nrf24l01Service@i	offset	1
  2478 ;;strcmp@s1	offset	0
  2479 ;;strcmp@r	offset	1
  2480 ;;strcmp@s2	offset=-1 (param)
  2481 ;;nrf24l01SendTXBuffer@packet	offset	0
  2482 ;;nrf24l01SendTXBuffer@i	offset	1
  2483 ;;nrf24l01SendTXBuffer@width	offset	2
  2484 ;;strlen@s	offset	0
  2485 ;;strlen@cp	offset	1
  2486 ;;nrf24l01SetRXMode@rxMode	offset	0
  2487 ;;nrf24l01Send@command	offset	0
  2488 ;;nrf24l01Send@data	offset=-1 (param)
  2489 ;;nrf24l01SPISend@data	offset	0
  2490 ;;memset@p	offset	0
  2491 ;;memset@p1	offset=-2 (param)
  2492 ;;memset@c	offset=-4 (param)
  2493 ;;memset@n	offset=-6 (param)
  2494                           
  2495                           
  2496                           ;initializer for _romData
  2497  07FF  3420               	retlw	low (_romDataMap| (0+256))
  2498                           
  2499                           	psect	stringtext1
  2500  1000                     __pstringtext1:	
  2501  1000                     _dpowers:	
  2502  1000  3401               	retlw	1
  2503  1001  3400               	retlw	0
  2504  1002  3400               	retlw	0
  2505  1003  3400               	retlw	0
  2506  1004  340A               	retlw	10
  2507  1005  3400               	retlw	0
  2508  1006  3400               	retlw	0
  2509  1007  3400               	retlw	0
  2510  1008  3464               	retlw	100
  2511  1009  3400               	retlw	0
  2512  100A  3400               	retlw	0
  2513  100B  3400               	retlw	0
  2514  100C  34E8               	retlw	232
  2515  100D  3403               	retlw	3
  2516  100E  3400               	retlw	0
  2517  100F  3400               	retlw	0
  2518  1010  3410               	retlw	16
  2519  1011  3427               	retlw	39
  2520  1012  3400               	retlw	0
  2521  1013  3400               	retlw	0
  2522  1014  34A0               	retlw	160
  2523  1015  3486               	retlw	134
  2524  1016  3401               	retlw	1
  2525  1017  3400               	retlw	0
  2526  1018  3440               	retlw	64
  2527  1019  3442               	retlw	66
  2528  101A  340F               	retlw	15
  2529  101B  3400               	retlw	0
  2530  101C  3480               	retlw	128
  2531  101D  3496               	retlw	150
  2532  101E  3498               	retlw	152
  2533  101F  3400               	retlw	0
  2534  1020  3400               	retlw	0
  2535  1021  34E1               	retlw	225
  2536  1022  34F5               	retlw	245
  2537  1023  3405               	retlw	5
  2538  1024  3400               	retlw	0
  2539  1025  34CA               	retlw	202
  2540  1026  349A               	retlw	154
  2541  1027  343B               	retlw	59
  2542  1028                     __end_of_dpowers:	
  2543                           
  2544                           	psect	stringtext2
  2545  1040                     __pstringtext2:	
  2546  1040                     _n_ADDRESS_P0:	
  2547  1040  34AD               	retlw	173
  2548  1041  3487               	retlw	135
  2549  1042  3466               	retlw	102
  2550  1043  34BC               	retlw	188
  2551  1044  34BB               	retlw	187
  2552  1045                     __end_of_n_ADDRESS_P0:	
  2553                           
  2554                           	psect	stringtext3
  2555  1028                     __pstringtext3:	
  2556  1028                     _n_ADDRESS_MUL:	
  2557  1028  3421               	retlw	33
  2558  1029                     __end_of_n_ADDRESS_MUL:	
  2559  001A                     _TMR1H	set	26
  2560  0019                     _TMR1L	set	25
  2561  001C                     _T1GCONbits	set	28
  2562  001B                     _T1CONbits	set	27
  2563  000B                     _INTCONbits	set	11
  2564  0011                     _PIR1bits	set	17
  2565  0010                     _PIR0bits	set	16
  2566  000C                     _PORTAbits	set	12
  2567  000E                     _PORTCbits	set	14
  2568  0091                     _PIE1bits	set	145
  2569  009E                     _ADCON1bits	set	158
  2570  009C                     _ADRESH	set	156
  2571  009B                     _ADRESL	set	155
  2572  009D                     _ADCON0bits	set	157
  2573  0090                     _PIE0bits	set	144
  2574  0097                     _WDTCONbits	set	151
  2575  008E                     _TRISCbits	set	142
  2576  008C                     _TRISAbits	set	140
  2577  0117                     _FVRCONbits	set	279
  2578  018E                     _ANSELCbits	set	398
  2579  018C                     _ANSELAbits	set	396
  2580  018E                     _ANSELC	set	398
  2581  018C                     _ANSELA	set	396
  2582  020C                     _WPUAbits	set	524
  2583  020E                     _WPUC	set	526
  2584  020C                     _WPUA	set	524
  2585  0211                     _SSP1BUF	set	529
  2586  0214                     _SSP1STATbits	set	532
  2587  0215                     _SSP1CON1bits	set	533
  2588  028C                     _ODCONAbits	set	652
  2589  028E                     _ODCONC	set	654
  2590  028C                     _ODCONA	set	652
  2591  0391                     _IOCAPbits	set	913
  2592  038E                     _INLVLC	set	910
  2593  038C                     _INLVLA	set	908
  2594  0393                     _IOCAFbits	set	915
  2595  0896                     _NVMCON2	set	2198
  2596  0895                     _NVMCON1bits	set	2197
  2597  0893                     _NVMDATL	set	2195
  2598  0891                     _NVMADRL	set	2193
  2599  0892                     _NVMADRH	set	2194
  2600  0919                     _OSCCON1bits	set	2329
  2601  0EA0                     _RC0PPSbits	set	3744
  2602  0EA2                     _RC2PPSbits	set	3746
  2603  0EA1                     _RC1PPSbits	set	3745
  2604  1029                     STR_8:	
  2605  1029  3425               	retlw	37	;'%'
  2606  102A  346C               	retlw	108	;'l'
  2607  102B  3475               	retlw	117	;'u'
  2608  102C  342E               	retlw	46	;'.'
  2609  102D  3425               	retlw	37	;'%'
  2610  102E  3436               	retlw	54	;'6'
  2611  102F  342E               	retlw	46	;'.'
  2612  1030  3436               	retlw	54	;'6'
  2613  1031  346C               	retlw	108	;'l'
  2614  1032  3475               	retlw	117	;'u'
  2615  1033  3400               	retlw	0
  2616                           
  2617                           	psect	stringtext4
  2618  1034                     __pstringtext4:	
  2619  1034                     STR_6:	
  2620  1034  3442               	retlw	66	;'B'
  2621  1035  344F               	retlw	79	;'O'
  2622  1036  344F               	retlw	79	;'O'
  2623  1037  3454               	retlw	84	;'T'
  2624  1038  3430               	retlw	48	;'0'
  2625  1039  3400               	retlw	0
  2626                           
  2627                           	psect	stringtext5
  2628  103A                     __pstringtext5:	
  2629  103A                     STR_7:	
  2630  103A  3442               	retlw	66	;'B'
  2631  103B  344F               	retlw	79	;'O'
  2632  103C  344F               	retlw	79	;'O'
  2633  103D  3454               	retlw	84	;'T'
  2634  103E  3431               	retlw	49	;'1'
  2635  103F  3400               	retlw	0
  2636                           
  2637                           	psect	stringtext6
  2638  1045                     __pstringtext6:	
  2639  1045                     STR_4:	
  2640  1045  3454               	retlw	84	;'T'
  2641  1046  3445               	retlw	69	;'E'
  2642  1047  344D               	retlw	77	;'M'
  2643  1048  3450               	retlw	80	;'P'
  2644  1049  3400               	retlw	0
  2645                           
  2646                           	psect	stringtext7
  2647  104A                     __pstringtext7:	
  2648  104A                     STR_3:	
  2649  104A  3456               	retlw	86	;'V'
  2650  104B  3442               	retlw	66	;'B'
  2651  104C  3441               	retlw	65	;'A'
  2652  104D  3454               	retlw	84	;'T'
  2653  104E  3400               	retlw	0
  2654                           
  2655                           	psect	stringtext8
  2656  104F                     __pstringtext8:	
  2657  104F                     STR_5:	
  2658  104F  3455               	retlw	85	;'U'
  2659  1050  3448               	retlw	72	;'H'
  2660  1051  3431               	retlw	49	;'1'
  2661  1052  3400               	retlw	0
  2662                           
  2663                           	psect	stringtext9
  2664  1053                     __pstringtext9:	
  2665  1053                     STR_1:	
  2666  1053  342F               	retlw	47	;'/'
  2667  1054  3400               	retlw	0
  2668                           
  2669                           	psect	stringtext10
  2670  0000                     __pstringtext10:	
  2671  1053                     
  2672                           ; #config settings
  2673  0000                     
  2674                           	psect	cinit
  2675  0034                     start_initialization:	
  2676  0034                     __initialization:	
  2677                           
  2678                           ; Initialize objects allocated to BANK1
  2679  0034  0021               	movlb	1	; select bank1
  2680  0035  3187  27FF  3180   	fcall	__pidataBANK1	;fetch initializer
  2681  0038  00EF               	movwf	__pdataBANK1& (0+127)
  2682                           
  2683                           ; Clear objects allocated to BANK0
  2684  0039  0020               	movlb	0	; select bank0
  2685  003A  01E4               	clrf	__pbssBANK0& (0+127)
  2686  003B  01E5               	clrf	(__pbssBANK0+1)& (0+127)
  2687  003C  01E6               	clrf	(__pbssBANK0+2)& (0+127)
  2688  003D  01E7               	clrf	(__pbssBANK0+3)& (0+127)
  2689  003E  01E8               	clrf	(__pbssBANK0+4)& (0+127)
  2690  003F  01E9               	clrf	(__pbssBANK0+5)& (0+127)
  2691                           
  2692                           ; Clear objects allocated to BANK1
  2693  0040  30E7               	movlw	low __pbssBANK1
  2694  0041  0084               	movwf	4
  2695  0042  3000               	movlw	high __pbssBANK1
  2696  0043  0085               	movwf	5
  2697  0044  3008               	movlw	8
  2698  0045  3188  209A  3180   	fcall	clear_ram0
  2699                           
  2700                           ; Clear objects allocated to BANK2
  2701  0048  3020               	movlw	low __pbssBANK2
  2702  0049  0084               	movwf	4
  2703  004A  3001               	movlw	high __pbssBANK2
  2704  004B  0085               	movwf	5
  2705  004C  302D               	movlw	45
  2706  004D  3188  209A  3180   	fcall	clear_ram0
  2707                           
  2708                           ; Clear objects allocated to BANK3
  2709  0050  30A0               	movlw	low __pbssBANK3
  2710  0051  0084               	movwf	4
  2711  0052  3001               	movlw	high __pbssBANK3
  2712  0053  0085               	movwf	5
  2713  0054  3042               	movlw	66
  2714  0055  3188  209A         	fcall	clear_ram0
  2715  0057                     end_of_initialization:	
  2716                           ;End of C runtime variable initialization code
  2717                           
  2718  0057                     __end_of__initialization:	
  2719  0057  0020               	movlb	0
  2720                           
  2721                           ;Initialize the stack pointer (FSR1)
  2722  0058  3032               	movlw	low ___sp
  2723  0059  0086               	movwf	6
  2724  005A  3021               	movlw	high ___sp
  2725  005B  0087               	movwf	7
  2726  005C  318E  2EC1         	ljmp	_main	;jump to C main() function
  2727                           
  2728                           	psect	bssBANK0
  2729  0064                     __pbssBANK0:	
  2730  0064                     _status:	
  2731  0064                     	ds	5
  2732  0069                     _lastTXPacket:	
  2733  0069                     	ds	1
  2734                           
  2735                           	psect	bssBANK1
  2736  00E7                     __pbssBANK1:	
  2737  00E7                     _counter:	
  2738  00E7                     	ds	4
  2739  00EB                     _distance:	
  2740  00EB                     	ds	2
  2741  00ED                     _testCount:	
  2742  00ED                     	ds	2
  2743                           
  2744                           	psect	dataBANK1
  2745  00EF                     __pdataBANK1:	
  2746  00EF                     _romData:	
  2747  00EF                     	ds	1
  2748                           
  2749                           	psect	bssBANK2
  2750  0120                     __pbssBANK2:	
  2751  0120                     _romDataMap:	
  2752  0120                     	ds	28
  2753  013C                     ftoa@buf:	
  2754  013C                     	ds	17
  2755                           
  2756                           	psect	bssBANK3
  2757  01A0                     __pbssBANK3:	
  2758  01A0                     _RXPacket:	
  2759  01A0                     	ds	33
  2760  01C1                     _TXPacket:	
  2761  01C1                     	ds	33
  2762                           
  2763                           	psect	clrtext
  2764  089A                     clear_ram0:	
  2765                           ;	Called with FSR0 containing the base address, and
  2766                           ;	WREG with the size to clear
  2767                           
  2768  089A  0064               	clrwdt	;clear the watchdog before getting into this loop
  2769  089B                     clrloop0:	
  2770  089B  0180               	clrf	0	;clear RAM location pointed to by FSR
  2771  089C  3101               	addfsr 0,1
  2772  089D  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  2773  089E  289B               	goto	clrloop0	;have we reached the end yet?
  2774  089F  3400               	retlw	0	;all done for this memory range, return
  2775                           
  2776                           	psect	cstackBANK2
  2777  014D                     __pcstackBANK2:	
  2778  014D                     ??_main:	
  2779                           
  2780                           ; 1 bytes @ 0x0
  2781  014D                     	ds	1
  2782  014E                     main@pipe:	
  2783                           
  2784                           ; 1 bytes @ 0x1
  2785  014E                     	ds	1
  2786  014F                     main@packet:	
  2787                           
  2788                           ; 33 bytes @ 0x2
  2789  014F                     	ds	33
  2790                           
  2791                           	psect	cstackBANK1
  2792  00A0                     __pcstackBANK1:	
  2793  00A0                     ?_ftoa:	
  2794  00A0                     ftoa@f:	
  2795                           ; 1 bytes @ 0x0
  2796                           
  2797                           
  2798                           ; 3 bytes @ 0x0
  2799  00A0                     	ds	3
  2800  00A3                     ftoa@status:	
  2801                           
  2802                           ; 1 bytes @ 0x3
  2803  00A3                     	ds	1
  2804  00A4                     ftoa@rem:	
  2805                           
  2806                           ; 4 bytes @ 0x4
  2807  00A4                     	ds	4
  2808  00A8                     ftoa@l:	
  2809                           
  2810                           ; 4 bytes @ 0x8
  2811  00A8                     	ds	4
  2812  00AC                     ftoa@cp:	
  2813                           
  2814                           ; 1 bytes @ 0xC
  2815  00AC                     	ds	1
  2816  00AD                     ?_strcat:	
  2817  00AD                     strcat@to:	
  2818                           ; 2 bytes @ 0xD
  2819                           
  2820                           
  2821                           ; 2 bytes @ 0xD
  2822  00AD                     	ds	2
  2823  00AF                     strcat@from:	
  2824                           
  2825                           ; 2 bytes @ 0xF
  2826  00AF                     	ds	2
  2827  00B1                     ?_sendMessage:	
  2828  00B1                     sendMessage@packet:	
  2829                           ; 1 bytes @ 0x11
  2830                           
  2831                           
  2832                           ; 2 bytes @ 0x11
  2833  00B1                     	ds	2
  2834  00B3                     sendMessage@topic:	
  2835                           
  2836                           ; 2 bytes @ 0x13
  2837  00B3                     	ds	2
  2838  00B5                     sendMessage@value:	
  2839                           
  2840                           ; 3 bytes @ 0x15
  2841  00B5                     	ds	3
  2842  00B8                     sendMessage@ftoaStatus:	
  2843                           
  2844                           ; 2 bytes @ 0x18
  2845  00B8                     	ds	2
  2846  00BA                     loop@vt:	
  2847                           
  2848                           ; 3 bytes @ 0x1A
  2849  00BA                     	ds	3
  2850  00BD                     loop@ta:	
  2851                           
  2852                           ; 3 bytes @ 0x1D
  2853  00BD                     	ds	3
  2854  00C0                     _loop$2246:	
  2855                           
  2856                           ; 3 bytes @ 0x20
  2857  00C0                     	ds	3
  2858  00C3                     _loop$2247:	
  2859                           
  2860                           ; 3 bytes @ 0x23
  2861  00C3                     	ds	3
  2862  00C6                     loop@packet:	
  2863                           
  2864                           ; 33 bytes @ 0x26
  2865  00C6                     	ds	33
  2866                           
  2867                           	psect	cstackCOMMON
  2868  0070                     __pcstackCOMMON:	
  2869  0070                     ?_isdigit:	
  2870  0070                     ?_hcsr04ISR:	
  2871                           ; 1 bit 
  2872                           
  2873  0070                     ??_hcsr04ISR:	
  2874                           ; 1 bytes @ 0x0
  2875                           
  2876  0070                     ?_nrf24l01ISR:	
  2877                           ; 1 bytes @ 0x0
  2878                           
  2879  0070                     ??_nrf24l01ISR:	
  2880                           ; 1 bytes @ 0x0
  2881                           
  2882  0070                     ?_nrf24l01Init:	
  2883                           ; 1 bytes @ 0x0
  2884                           
  2885  0070                     ?_nrf24l01SetTXPipe:	
  2886                           ; 1 bytes @ 0x0
  2887                           
  2888  0070                     ?_nrf24l01SetRXPipe:	
  2889                           ; 1 bytes @ 0x0
  2890                           
  2891  0070                     ??_nrf24l01SetRXPipe:	
  2892                           ; 1 bytes @ 0x0
  2893                           
  2894  0070                     ?_hcsr04Init:	
  2895                           ; 1 bytes @ 0x0
  2896                           
  2897  0070                     ??_hcsr04Init:	
  2898                           ; 1 bytes @ 0x0
  2899                           
  2900  0070                     ??_isdigit:	
  2901                           ; 1 bytes @ 0x0
  2902                           
  2903  0070                     ??___ftpack:	
  2904                           ; 1 bytes @ 0x0
  2905                           
  2906  0070                     ?_nrf24l01InterfaceInit:	
  2907                           ; 1 bytes @ 0x0
  2908                           
  2909  0070                     ??_nrf24l01InterfaceInit:	
  2910                           ; 1 bytes @ 0x0
  2911                           
  2912  0070                     ?_resetWDT:	
  2913                           ; 1 bytes @ 0x0
  2914                           
  2915  0070                     ??_resetWDT:	
  2916                           ; 1 bytes @ 0x0
  2917                           
  2918  0070                     ?_sleepMs:	
  2919                           ; 1 bytes @ 0x0
  2920                           
  2921  0070                     ?_ISR:	
  2922                           ; 1 bytes @ 0x0
  2923                           
  2924  0070                     ?_loop:	
  2925                           ; 1 bytes @ 0x0
  2926                           
  2927  0070                     ?_nrf24l01GetPipe:	
  2928                           ; 1 bytes @ 0x0
  2929                           
  2930  0070                     ?_main:	
  2931                           ; 1 bytes @ 0x0
  2932                           
  2933  0070                     ?_nrf24l01InitRegisters:	
  2934                           ; 1 bytes @ 0x0
  2935                           
  2936  0070                     ?___bmul:	
  2937                           ; 1 bytes @ 0x0
  2938                           
  2939  0070                     ??___lldiv:	
  2940                           ; 1 bytes @ 0x0
  2941                           
  2942  0070                     ??___ftge:	
  2943                           ; 1 bytes @ 0x0
  2944                           
  2945  0070                     ??___llmod:	
  2946                           ; 1 bytes @ 0x0
  2947                           
  2948  0070                     ?_strcpy:	
  2949                           ; 1 bytes @ 0x0
  2950                           
  2951  0070                     ?___wmul:	
  2952                           ; 2 bytes @ 0x0
  2953                           
  2954  0070                     ?___lwmod:	
  2955                           ; 2 bytes @ 0x0
  2956                           
  2957  0070                     ?___awtoft:	
  2958                           ; 2 bytes @ 0x0
  2959                           
  2960  0070                     ?___lltoft:	
  2961                           ; 3 bytes @ 0x0
  2962                           
  2963  0070                     ___bmul@multiplicand:	
  2964                           ; 3 bytes @ 0x0
  2965                           
  2966  0070                     ___llmod@counter:	
  2967                           ; 1 bytes @ 0x0
  2968                           
  2969  0070                     _isdigit$1989:	
  2970                           ; 1 bytes @ 0x0
  2971                           
  2972  0070                     sleepMs@milliseconds:	
  2973                           ; 1 bytes @ 0x0
  2974                           
  2975  0070                     ___wmul@multiplier:	
  2976                           ; 2 bytes @ 0x0
  2977                           
  2978  0070                     ___awtoft@c:	
  2979                           ; 2 bytes @ 0x0
  2980                           
  2981  0070                     ___lwmod@divisor:	
  2982                           ; 2 bytes @ 0x0
  2983                           
  2984  0070                     strcpy@to:	
  2985                           ; 2 bytes @ 0x0
  2986                           
  2987  0070                     ___lltoft@c:	
  2988                           ; 2 bytes @ 0x0
  2989                           
  2990                           
  2991                           ; 4 bytes @ 0x0
  2992  0070                     	ds	1
  2993  0071                     ??___bmul:	
  2994  0071                     nrf24l01SetRXPipe@pipe:	
  2995                           ; 1 bytes @ 0x1
  2996                           
  2997  0071                     ___bmul@product:	
  2998                           ; 1 bytes @ 0x1
  2999                           
  3000  0071                     isdigit@c:	
  3001                           ; 1 bytes @ 0x1
  3002                           
  3003                           
  3004                           ; 1 bytes @ 0x1
  3005  0071                     	ds	1
  3006  0072                     ??_sleepMs:	
  3007  0072                     nrf24l01SetRXPipe@enRXAddr:	
  3008                           ; 1 bytes @ 0x2
  3009                           
  3010  0072                     ___bmul@multiplier:	
  3011                           ; 1 bytes @ 0x2
  3012                           
  3013  0072                     ___wmul@multiplicand:	
  3014                           ; 1 bytes @ 0x2
  3015                           
  3016  0072                     ___lwmod@dividend:	
  3017                           ; 2 bytes @ 0x2
  3018                           
  3019  0072                     strcpy@from:	
  3020                           ; 2 bytes @ 0x2
  3021                           
  3022                           
  3023                           ; 2 bytes @ 0x2
  3024  0072                     	ds	1
  3025  0073                     ??_nrf24l01SetTXPipe:	
  3026  0073                     ??___awtoft:	
  3027                           ; 1 bytes @ 0x3
  3028                           
  3029  0073                     sleepMs@wdtps:	
  3030                           ; 1 bytes @ 0x3
  3031                           
  3032  0073                     ___awtoft@sign:	
  3033                           ; 1 bytes @ 0x3
  3034                           
  3035                           
  3036                           ; 1 bytes @ 0x3
  3037  0073                     	ds	1
  3038  0074                     ??_strcpy:	
  3039  0074                     ??_strcat:	
  3040                           ; 1 bytes @ 0x4
  3041                           
  3042  0074                     ??_ftoa:	
  3043                           ; 1 bytes @ 0x4
  3044                           
  3045  0074                     ??_nrf24l01SendPacket:	
  3046                           ; 1 bytes @ 0x4
  3047                           
  3048  0074                     ??_sleepListren:	
  3049                           ; 1 bytes @ 0x4
  3050                           
  3051  0074                     ??_sendMessage:	
  3052                           ; 1 bytes @ 0x4
  3053                           
  3054  0074                     ??_loop:	
  3055                           ; 1 bytes @ 0x4
  3056                           
  3057  0074                     ??___wmul:	
  3058                           ; 1 bytes @ 0x4
  3059                           
  3060  0074                     ??___ftmul:	
  3061                           ; 1 bytes @ 0x4
  3062                           
  3063  0074                     ??___ftneg:	
  3064                           ; 1 bytes @ 0x4
  3065                           
  3066  0074                     ??___ftsub:	
  3067                           ; 1 bytes @ 0x4
  3068                           
  3069  0074                     ??___fttol:	
  3070                           ; 1 bytes @ 0x4
  3071                           
  3072  0074                     ??___lltoft:	
  3073                           ; 1 bytes @ 0x4
  3074                           
  3075  0074                     ??___lwmod:	
  3076                           ; 1 bytes @ 0x4
  3077                           
  3078                           
  3079                           	psect	cstackBANK0
  3080  0020                     __pcstackBANK0:	
  3081                           ; 1 bytes @ 0x4
  3082                           
  3083  0020                     ??_ISR:	
  3084                           
  3085                           ; 1 bytes @ 0x0
  3086  0020                     	ds	6
  3087  0026                     ?___ftge:	
  3088  0026                     ?_sleepListren:	
  3089                           ; 1 bit 
  3090                           
  3091  0026                     ?___ftpack:	
  3092                           ; 1 bytes @ 0x6
  3093                           
  3094  0026                     ?___lldiv:	
  3095                           ; 3 bytes @ 0x6
  3096                           
  3097  0026                     nrf24l01SetTXPipe@pipe:	
  3098                           ; 4 bytes @ 0x6
  3099                           
  3100  0026                     ___lwmod@counter:	
  3101                           ; 1 bytes @ 0x6
  3102                           
  3103  0026                     sleepListren@seconds:	
  3104                           ; 1 bytes @ 0x6
  3105                           
  3106  0026                     ___wmul@product:	
  3107                           ; 2 bytes @ 0x6
  3108                           
  3109  0026                     strcpy@cp:	
  3110                           ; 2 bytes @ 0x6
  3111                           
  3112  0026                     ___ftpack@arg:	
  3113                           ; 2 bytes @ 0x6
  3114                           
  3115  0026                     ___ftge@ff1:	
  3116                           ; 3 bytes @ 0x6
  3117                           
  3118  0026                     ___lldiv@divisor:	
  3119                           ; 3 bytes @ 0x6
  3120                           
  3121                           
  3122                           ; 4 bytes @ 0x6
  3123  0026                     	ds	1
  3124  0027                     ??_nrf24l01GetPipe:	
  3125  0027                     ??_nrf24l01InitRegisters:	
  3126                           ; 1 bytes @ 0x7
  3127                           
  3128                           
  3129                           ; 1 bytes @ 0x7
  3130  0027                     	ds	1
  3131  0028                     ?_nrf24l01SendPacket:	
  3132  0028                     nrf24l01GetPipe@pipe:	
  3133                           ; 1 bytes @ 0x8
  3134                           
  3135  0028                     nrf24l01InitRegisters@channel:	
  3136                           ; 1 bytes @ 0x8
  3137                           
  3138  0028                     nrf24l01SendPacket@txPacket:	
  3139                           ; 1 bytes @ 0x8
  3140                           
  3141                           
  3142                           ; 2 bytes @ 0x8
  3143  0028                     	ds	1
  3144  0029                     nrf24l01GetPipe@name:	
  3145  0029                     nrf24l01InitRegisters@setupAW:	
  3146                           ; 1 bytes @ 0x9
  3147                           
  3148  0029                     ___ftpack@exp:	
  3149                           ; 1 bytes @ 0x9
  3150                           
  3151  0029                     ___ftge@ff2:	
  3152                           ; 1 bytes @ 0x9
  3153                           
  3154                           
  3155                           ; 3 bytes @ 0x9
  3156  0029                     	ds	1
  3157  002A                     nrf24l01GetPipe@i:	
  3158  002A                     nrf24l01InitRegisters@feature:	
  3159                           ; 1 bytes @ 0xA
  3160                           
  3161  002A                     ___ftpack@sign:	
  3162                           ; 1 bytes @ 0xA
  3163                           
  3164  002A                     ___lldiv@dividend:	
  3165                           ; 1 bytes @ 0xA
  3166                           
  3167                           
  3168                           ; 4 bytes @ 0xA
  3169  002A                     	ds	1
  3170  002B                     ?___ftadd:	
  3171  002B                     nrf24l01InitRegisters@rfSetup:	
  3172                           ; 3 bytes @ 0xB
  3173                           
  3174  002B                     ___lltoft@exp:	
  3175                           ; 1 bytes @ 0xB
  3176                           
  3177  002B                     ___ftadd@f1:	
  3178                           ; 1 bytes @ 0xB
  3179                           
  3180                           
  3181                           ; 3 bytes @ 0xB
  3182  002B                     	ds	1
  3183  002C                     nrf24l01InitRegisters@enAA:	
  3184                           
  3185                           ; 1 bytes @ 0xC
  3186  002C                     	ds	1
  3187  002D                     nrf24l01InitRegisters@DynPD:	
  3188                           
  3189                           ; 1 bytes @ 0xD
  3190  002D                     	ds	1
  3191  002E                     nrf24l01InitRegisters@i:	
  3192  002E                     ___ftadd@f2:	
  3193                           ; 2 bytes @ 0xE
  3194                           
  3195  002E                     ___lldiv@quotient:	
  3196                           ; 3 bytes @ 0xE
  3197                           
  3198                           
  3199                           ; 4 bytes @ 0xE
  3200  002E                     	ds	2
  3201  0030                     ??_nrf24l01Init:	
  3202                           
  3203                           ; 1 bytes @ 0x10
  3204  0030                     	ds	1
  3205  0031                     ??___ftadd:	
  3206                           
  3207                           ; 1 bytes @ 0x11
  3208  0031                     	ds	1
  3209  0032                     ___lldiv@counter:	
  3210  0032                     ___ftadd@sign:	
  3211                           ; 1 bytes @ 0x12
  3212                           
  3213                           
  3214                           ; 1 bytes @ 0x12
  3215  0032                     	ds	1
  3216  0033                     ?___llmod:	
  3217  0033                     ___ftadd@exp2:	
  3218                           ; 4 bytes @ 0x13
  3219                           
  3220  0033                     ___llmod@divisor:	
  3221                           ; 1 bytes @ 0x13
  3222                           
  3223                           
  3224                           ; 4 bytes @ 0x13
  3225  0033                     	ds	1
  3226  0034                     ___ftadd@exp1:	
  3227                           
  3228                           ; 1 bytes @ 0x14
  3229  0034                     	ds	1
  3230  0035                     ?___ftdiv:	
  3231  0035                     ?___ftsub:	
  3232                           ; 3 bytes @ 0x15
  3233                           
  3234  0035                     ___ftdiv@f2:	
  3235                           ; 3 bytes @ 0x15
  3236                           
  3237  0035                     ___ftsub@f2:	
  3238                           ; 3 bytes @ 0x15
  3239                           
  3240                           
  3241                           ; 3 bytes @ 0x15
  3242  0035                     	ds	2
  3243  0037                     ___llmod@dividend:	
  3244                           
  3245                           ; 4 bytes @ 0x17
  3246  0037                     	ds	1
  3247  0038                     ___ftdiv@f1:	
  3248  0038                     ___ftsub@f1:	
  3249                           ; 3 bytes @ 0x18
  3250                           
  3251                           
  3252                           ; 3 bytes @ 0x18
  3253  0038                     	ds	3
  3254  003B                     ??___ftdiv:	
  3255  003B                     ?_sprintf:	
  3256                           ; 1 bytes @ 0x1B
  3257                           
  3258  003B                     sprintf@f:	
  3259                           ; 2 bytes @ 0x1B
  3260                           
  3261                           
  3262                           ; 2 bytes @ 0x1B
  3263  003B                     	ds	1
  3264  003C                     ___ftdiv@cntr:	
  3265                           
  3266                           ; 1 bytes @ 0x1C
  3267  003C                     	ds	1
  3268  003D                     ___ftdiv@f3:	
  3269                           
  3270                           ; 3 bytes @ 0x1D
  3271  003D                     	ds	3
  3272  0040                     ___ftdiv@exp:	
  3273                           
  3274                           ; 1 bytes @ 0x20
  3275  0040                     	ds	1
  3276  0041                     ___ftdiv@sign:	
  3277                           
  3278                           ; 1 bytes @ 0x21
  3279  0041                     	ds	1
  3280  0042                     ?_getADCValue:	
  3281                           
  3282                           ; 3 bytes @ 0x22
  3283  0042                     	ds	3
  3284  0045                     ??_sprintf:	
  3285  0045                     ??_getADCValue:	
  3286                           ; 1 bytes @ 0x25
  3287                           
  3288                           
  3289                           ; 1 bytes @ 0x25
  3290  0045                     	ds	1
  3291  0046                     getADCValue@adcLoop:	
  3292                           
  3293                           ; 2 bytes @ 0x26
  3294  0046                     	ds	2
  3295  0048                     getADCValue@channel:	
  3296                           
  3297                           ; 1 bytes @ 0x28
  3298  0048                     	ds	1
  3299  0049                     sprintf@flag:	
  3300  0049                     getADCValue@adcSum:	
  3301                           ; 1 bytes @ 0x29
  3302                           
  3303                           
  3304                           ; 3 bytes @ 0x29
  3305  0049                     	ds	1
  3306  004A                     sprintf@ap:	
  3307                           
  3308                           ; 1 bytes @ 0x2A
  3309  004A                     	ds	1
  3310  004B                     sprintf@val:	
  3311                           
  3312                           ; 4 bytes @ 0x2B
  3313  004B                     	ds	1
  3314  004C                     ?___ftmul:	
  3315  004C                     ?___ftneg:	
  3316                           ; 3 bytes @ 0x2C
  3317                           
  3318  004C                     ___ftmul@f1:	
  3319                           ; 3 bytes @ 0x2C
  3320                           
  3321  004C                     ___ftneg@f1:	
  3322                           ; 3 bytes @ 0x2C
  3323                           
  3324                           
  3325                           ; 3 bytes @ 0x2C
  3326  004C                     	ds	3
  3327  004F                     sprintf@sp:	
  3328  004F                     ___ftmul@f2:	
  3329                           ; 1 bytes @ 0x2F
  3330                           
  3331                           
  3332                           ; 3 bytes @ 0x2F
  3333  004F                     	ds	1
  3334  0050                     sprintf@width:	
  3335                           
  3336                           ; 2 bytes @ 0x30
  3337  0050                     	ds	2
  3338  0052                     ___ftmul@exp:	
  3339  0052                     sprintf@prec:	
  3340                           ; 1 bytes @ 0x32
  3341                           
  3342                           
  3343                           ; 2 bytes @ 0x32
  3344  0052                     	ds	1
  3345  0053                     ___ftmul@f3_as_product:	
  3346                           
  3347                           ; 3 bytes @ 0x33
  3348  0053                     	ds	1
  3349  0054                     sprintf@c:	
  3350                           
  3351                           ; 1 bytes @ 0x34
  3352  0054                     	ds	2
  3353  0056                     ___ftmul@cntr:	
  3354                           
  3355                           ; 1 bytes @ 0x36
  3356  0056                     	ds	1
  3357  0057                     ___ftmul@sign:	
  3358                           
  3359                           ; 1 bytes @ 0x37
  3360  0057                     	ds	1
  3361  0058                     ?___fttol:	
  3362  0058                     ___fttol@f1:	
  3363                           ; 4 bytes @ 0x38
  3364                           
  3365                           
  3366                           ; 3 bytes @ 0x38
  3367  0058                     	ds	4
  3368  005C                     ___fttol@sign1:	
  3369                           
  3370                           ; 1 bytes @ 0x3C
  3371  005C                     	ds	1
  3372  005D                     ___fttol@lval:	
  3373                           
  3374                           ; 4 bytes @ 0x3D
  3375  005D                     	ds	4
  3376  0061                     ___fttol@exp1:	
  3377                           
  3378                           ; 1 bytes @ 0x41
  3379  0061                     	ds	1
  3380  0062                     strcat@cp:	
  3381                           
  3382                           ; 2 bytes @ 0x42
  3383  0062                     	ds	2
  3384                           
  3385                           	psect	maintext
  3386  0EC1                     __pmaintext:	
  3387 ;;
  3388 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  3389 ;;
  3390 ;; *************** function _main *****************
  3391 ;; Defined at:
  3392 ;;		line 165 in file "main.c"
  3393 ;; Parameters:    Size  Location     Type
  3394 ;;		None
  3395 ;; Auto vars:     Size  Location     Type
  3396 ;;  packet         33    2[BANK2 ] struct .
  3397 ;;  pipe            1    1[BANK2 ] unsigned char 
  3398 ;; Return value:  Size  Location     Type
  3399 ;;                  1    wreg      void 
  3400 ;; Registers used:
  3401 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, btemp+0, btemp+1, btemp+8, btemp+9, btemp+10, btemp+11, pclath
      +, cstack
  3402 ;; Tracked objects:
  3403 ;;		On entry : B1F/0
  3404 ;;		On exit  : 0/0
  3405 ;;		Unchanged: 0/0
  3406 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3407 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3408 ;;      Locals:         0       0       0      34       0       0       0       0       0       0       0       0       
      +0       0
  3409 ;;      Temps:          0       0       0       1       0       0       0       0       0       0       0       0       
      +0       0
  3410 ;;      Totals:         0       0       0      35       0       0       0       0       0       0       0       0       
      +0       0
  3411 ;;Total ram usage:       35 bytes
  3412 ;; Hardware stack levels required when called:   15
  3413 ;; This function calls:
  3414 ;;		_hcsr04Init
  3415 ;;		_loop
  3416 ;;		_nrf24l01GetPipe
  3417 ;;		_nrf24l01Init
  3418 ;;		_nrf24l01SetRXPipe
  3419 ;;		_nrf24l01SetTXPipe
  3420 ;;		_sendMessage
  3421 ;;		_strcpy
  3422 ;; This function is called by:
  3423 ;;		Startup code after reset
  3424 ;; This function uses a non-reentrant model
  3425 ;;
  3426                           
  3427                           
  3428                           ;psect for function _main
  3429  0EC1                     _main:	
  3430                           
  3431                           ;main.c: 169: ANSELA = 0x00;
  3432                           
  3433                           ;incstack = 0
  3434                           ; Regs used in _main: [wreg-fsr0h+fsr1l+fsr1h+status,2-btemp+1+btemp+8-btemp+11+pclath+c
      +                          stack]
  3435  0EC1  0023               	movlb	3	; select bank3
  3436  0EC2  018C               	clrf	12	;volatile
  3437                           
  3438                           ;main.c: 170: ANSELC = 0x00;
  3439  0EC3  018E               	clrf	14	;volatile
  3440                           
  3441                           ;main.c: 172: ODCONA = 0x00;
  3442  0EC4  0025               	movlb	5	; select bank5
  3443  0EC5  018C               	clrf	12	;volatile
  3444                           
  3445                           ;main.c: 173: ODCONC = 0x00;
  3446  0EC6  018E               	clrf	14	;volatile
  3447                           
  3448                           ;main.c: 178: INLVLA = 0x00;
  3449  0EC7  0027               	movlb	7	; select bank7
  3450  0EC8  018C               	clrf	12	;volatile
  3451                           
  3452                           ;main.c: 179: INLVLC = 0x00;
  3453  0EC9  018E               	clrf	14	;volatile
  3454                           
  3455                           ;main.c: 181: WPUA = 0x00;
  3456  0ECA  0024               	movlb	4	; select bank4
  3457  0ECB  018C               	clrf	12	;volatile
  3458                           
  3459                           ;main.c: 182: WPUC = 0x00;
  3460  0ECC  018E               	clrf	14	;volatile
  3461                           
  3462                           ;main.c: 184: TRISCbits.TRISC5 = 0;
  3463  0ECD  0021               	movlb	1	; select bank1
  3464  0ECE  128E               	bcf	14,5	;volatile
  3465                           
  3466                           ;main.c: 185: TRISCbits.TRISC4 = 0;
  3467  0ECF  120E               	bcf	14,4	;volatile
  3468                           
  3469                           ;main.c: 187: PORTCbits.RC4 = 0;
  3470  0ED0  0020               	movlb	0	; select bank0
  3471  0ED1  120E               	bcf	14,4	;volatile
  3472                           
  3473                           ;main.c: 194: INTCONbits.PEIE = 0;
  3474  0ED2  130B               	bcf	11,6	;volatile
  3475                           
  3476                           ;main.c: 195: INTCONbits.GIE = 0;
  3477  0ED3  138B               	bcf	11,7	;volatile
  3478                           
  3479                           ;main.c: 197: OSCCON1bits.NOSC = 0b000;
  3480  0ED4  308F               	movlw	-113
  3481  0ED5  0032               	movlb	18	; select bank18
  3482  0ED6  0599               	andwf	25,f	;volatile
  3483                           
  3484                           ;main.c: 198: OSCCON1bits.NDIV = 0b000;
  3485  0ED7  30F0               	movlw	-16
  3486  0ED8  0599               	andwf	25,f	;volatile
  3487                           
  3488                           ;main.c: 200: _delay((unsigned long)((1000)*(32000000/4000000.0)));
  3489  0ED9  300B               	movlw	11
  3490  0EDA  0022               	movlb	2	; select bank2
  3491  0EDB  00CD               	movwf	??_main^(0+256)
  3492  0EDC  3062               	movlw	98
  3493  0EDD                     u3577:	
  3494  0EDD  0B89               	decfsz	9,f
  3495  0EDE  2EDD               	goto	u3577
  3496  0EDF  0BCD               	decfsz	??_main^(0+256),f
  3497  0EE0  2EDD               	goto	u3577
  3498  0EE1  0000               	nop
  3499                           
  3500                           ;main.c: 204: strcpy(romData->name, "UH1");
  3501  0EE2  0021               	movlb	1	; select bank1
  3502  0EE3  086F               	movf	_romData^(0+128),w
  3503  0EE4  3E01               	addlw	1
  3504  0EE5  00F0               	movwf	strcpy@to
  3505  0EE6  3001               	movlw	1
  3506  0EE7  00F1               	movwf	strcpy@to+1
  3507  0EE8  304F               	movlw	low (STR_5| (0+32768))
  3508  0EE9  00F2               	movwf	strcpy@from
  3509  0EEA  3090               	movlw	high (STR_5| (0+32768))
  3510  0EEB  00F3               	movwf	strcpy@from+1
  3511  0EEC  3189  2130  318E   	fcall	_strcpy
  3512                           
  3513                           ;main.c: 206: nrf24l01Init();
  3514  0EEF  3189  21E3  318E   	fcall	_nrf24l01Init
  3515                           
  3516                           ;main.c: 208: unsigned char pipe = nrf24l01GetPipe(romData->name);
  3517  0EF2  0021               	movlb	1	; select bank1
  3518  0EF3  086F               	movf	_romData^(0+128),w
  3519  0EF4  3E01               	addlw	1
  3520  0EF5  318B  233B  318E   	fcall	_nrf24l01GetPipe
  3521  0EF8  00FF               	movwf	127
  3522  0EF9  087F               	movf	127,w
  3523  0EFA  0022               	movlb	2	; select bank2
  3524  0EFB  00CE               	movwf	main@pipe^(0+256)
  3525                           
  3526                           ;main.c: 209: nrf24l01SetTXPipe(pipe);
  3527  0EFC  084E               	movf	main@pipe^(0+256),w
  3528  0EFD  318C  2429  318E   	fcall	_nrf24l01SetTXPipe
  3529                           
  3530                           ;main.c: 210: nrf24l01SetRXPipe(pipe);
  3531  0F00  0022               	movlb	2	; select bank2
  3532  0F01  084E               	movf	main@pipe^(0+256),w
  3533  0F02  3189  21A7  318E   	fcall	_nrf24l01SetRXPipe
  3534                           
  3535                           ;main.c: 214: ADCON0bits.ADON = 0;
  3536  0F05  0021               	movlb	1	; select bank1
  3537  0F06  101D               	bcf	29,0	;volatile
  3538                           
  3539                           ;main.c: 217: PORTAbits.RA4 = 0;
  3540  0F07  0020               	movlb	0	; select bank0
  3541  0F08  120C               	bcf	12,4	;volatile
  3542                           
  3543                           ;main.c: 218: TRISAbits.TRISA4 = 1;
  3544  0F09  0021               	movlb	1	; select bank1
  3545  0F0A  160C               	bsf	12,4	;volatile
  3546                           
  3547                           ;main.c: 219: WPUAbits.WPUA4 = 0;
  3548  0F0B  0024               	movlb	4	; select bank4
  3549  0F0C  120C               	bcf	12,4	;volatile
  3550                           
  3551                           ;main.c: 220: ODCONAbits.ODCA4 = 1;
  3552  0F0D  0025               	movlb	5	; select bank5
  3553  0F0E  160C               	bsf	12,4	;volatile
  3554                           
  3555                           ;main.c: 221: ANSELAbits.ANSA4 = 1;
  3556  0F0F  0023               	movlb	3	; select bank3
  3557  0F10  160C               	bsf	12,4	;volatile
  3558                           
  3559                           ;main.c: 224: ANSELCbits.ANSC3 = 1;
  3560  0F11  158E               	bsf	14,3	;volatile
  3561                           
  3562                           ;main.c: 225: TRISCbits.TRISC3 = 1;
  3563  0F12  0021               	movlb	1	; select bank1
  3564  0F13  158E               	bsf	14,3	;volatile
  3565                           
  3566                           ;main.c: 228: FVRCONbits.TSEN = 1;
  3567  0F14  0022               	movlb	2	; select bank2
  3568  0F15  1697               	bsf	23,5	;volatile
  3569                           
  3570                           ;main.c: 229: FVRCONbits.TSRNG = 1;
  3571  0F16  1617               	bsf	23,4	;volatile
  3572                           
  3573                           ;main.c: 232: FVRCONbits.FVREN = 0;
  3574  0F17  1397               	bcf	23,7	;volatile
  3575                           
  3576                           ;main.c: 233: FVRCONbits.ADFVR = 0b10;
  3577  0F18  0817               	movf	23,w	;volatile
  3578  0F19  39FC               	andlw	-4
  3579  0F1A  3802               	iorlw	2
  3580  0F1B  0097               	movwf	23	;volatile
  3581                           
  3582                           ;main.c: 235: ADCON1bits.ADCS = 0b111;
  3583  0F1C  3070               	movlw	112
  3584  0F1D  0021               	movlb	1	; select bank1
  3585  0F1E  049E               	iorwf	30,f	;volatile
  3586                           
  3587                           ;main.c: 236: ADCON1bits.ADFM = 1;
  3588  0F1F  179E               	bsf	30,7	;volatile
  3589                           
  3590                           ;main.c: 237: ADCON1bits.ADPREF = 0b11;
  3591  0F20  3003               	movlw	3
  3592  0F21  049E               	iorwf	30,f	;volatile
  3593                           
  3594                           ;main.c: 238: ADCON1bits.ADNREF = 0b00;
  3595  0F22  111E               	bcf	30,2	;volatile
  3596                           
  3597                           ;main.c: 239: PIE1bits.ADIE = 1;
  3598  0F23  1711               	bsf	17,6	;volatile
  3599                           
  3600                           ;main.c: 242: ADCON0bits.CHS = 3;
  3601  0F24  081D               	movf	29,w	;volatile
  3602  0F25  3903               	andlw	-253
  3603  0F26  380C               	iorlw	12
  3604  0F27  009D               	movwf	29	;volatile
  3605                           
  3606                           ;main.c: 247: TRISAbits.TRISA2 = 1;
  3607  0F28  150C               	bsf	12,2	;volatile
  3608                           
  3609                           ;main.c: 248: PIE0bits.INTE = 1;
  3610  0F29  1410               	bsf	16,0	;volatile
  3611                           
  3612                           ;main.c: 249: INTCONbits.INTEDG = 0;
  3613  0F2A  100B               	bcf	11,0	;volatile
  3614                           
  3615                           ;main.c: 252: TRISAbits.TRISA5 = 0;
  3616  0F2B  128C               	bcf	12,5	;volatile
  3617                           
  3618                           ;main.c: 253: PORTAbits.RA5 = 0;
  3619  0F2C  0020               	movlb	0	; select bank0
  3620  0F2D  128C               	bcf	12,5	;volatile
  3621                           
  3622                           ;main.c: 255: hcsr04Init();
  3623  0F2E  3189  2103  318E   	fcall	_hcsr04Init
  3624                           
  3625                           ;main.c: 258: INTCONbits.PEIE = 1;
  3626  0F31  170B               	bsf	11,6	;volatile
  3627                           
  3628                           ;main.c: 259: INTCONbits.GIE = 1;
  3629  0F32  178B               	bsf	11,7	;volatile
  3630                           
  3631                           ;main.c: 261: nrf24l01Packet_t packet;;main.c: 263: sendMessage(&packet, "BOOT0", 123);
  3632  0F33  304F               	movlw	low main@packet
  3633  0F34  0021               	movlb	1	; select bank1
  3634  0F35  00B1               	movwf	sendMessage@packet^(0+128)
  3635  0F36  3001               	movlw	high main@packet
  3636  0F37  00B2               	movwf	(sendMessage@packet+1)^(0+128)
  3637  0F38  3034               	movlw	low (STR_6| (0+32768))
  3638  0F39  00B3               	movwf	sendMessage@topic^(0+128)
  3639  0F3A  3090               	movlw	high (STR_6| (0+32768))
  3640  0F3B  00B4               	movwf	(sendMessage@topic^(0+128)+1)
  3641  0F3C  3000               	movlw	0
  3642  0F3D  00B5               	movwf	sendMessage@value^(0+128)
  3643  0F3E  30F6               	movlw	246
  3644  0F3F  00B6               	movwf	(sendMessage@value+1)^(0+128)
  3645  0F40  3042               	movlw	66
  3646  0F41  00B7               	movwf	(sendMessage@value+2)^(0+128)
  3647  0F42  318D  25B4  318E   	fcall	_sendMessage
  3648                           
  3649                           ;main.c: 264: sendMessage(&packet, "BOOT1", 456);
  3650  0F45  304F               	movlw	low main@packet
  3651  0F46  0021               	movlb	1	; select bank1
  3652  0F47  00B1               	movwf	sendMessage@packet^(0+128)
  3653  0F48  3001               	movlw	high main@packet
  3654  0F49  00B2               	movwf	(sendMessage@packet+1)^(0+128)
  3655  0F4A  303A               	movlw	low (STR_7| (0+32768))
  3656  0F4B  00B3               	movwf	sendMessage@topic^(0+128)
  3657  0F4C  3090               	movlw	high (STR_7| (0+32768))
  3658  0F4D  00B4               	movwf	(sendMessage@topic^(0+128)+1)
  3659  0F4E  3000               	movlw	0
  3660  0F4F  00B5               	movwf	sendMessage@value^(0+128)
  3661  0F50  30E4               	movlw	228
  3662  0F51  00B6               	movwf	(sendMessage@value+1)^(0+128)
  3663  0F52  3043               	movlw	67
  3664  0F53  00B7               	movwf	(sendMessage@value+2)^(0+128)
  3665  0F54  318D  25B4  318E   	fcall	_sendMessage
  3666  0F57                     l3748:	
  3667                           ;main.c: 271: while(1){
  3668                           
  3669                           
  3670                           ;main.c: 272: loop();
  3671  0F57  3185  250F  318E   	fcall	_loop
  3672  0F5A  2F57               	goto	l3748
  3673  0F5B                     __end_of_main:	
  3674                           ;main.c: 273: };main.c: 275: return;
  3675                           
  3676                           
  3677                           	psect	text1
  3678  09E3                     __ptext1:	
  3679 ;; *************** function _nrf24l01Init *****************
  3680 ;; Defined at:
  3681 ;;		line 463 in file "nrf24l01.c"
  3682 ;; Parameters:    Size  Location     Type
  3683 ;;		None
  3684 ;; Auto vars:     Size  Location     Type
  3685 ;;		None
  3686 ;; Return value:  Size  Location     Type
  3687 ;;                  1    wreg      void 
  3688 ;; Registers used:
  3689 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, btemp+11, pclath, cstack
  3690 ;; Tracked objects:
  3691 ;;		On entry : 0/0
  3692 ;;		On exit  : 0/0
  3693 ;;		Unchanged: 0/0
  3694 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3695 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3696 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3697 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3698 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3699 ;;Total ram usage:        1 bytes
  3700 ;; Hardware stack levels used:    1
  3701 ;; Hardware stack levels required when called:   11
  3702 ;; This function calls:
  3703 ;;		_nrf24l01InitRegisters
  3704 ;;		_nrf24l01InterfaceInit
  3705 ;; This function is called by:
  3706 ;;		_main
  3707 ;; This function uses a non-reentrant model
  3708 ;;
  3709                           
  3710                           
  3711                           ;psect for function _nrf24l01Init
  3712  09E3                     _nrf24l01Init:	
  3713                           
  3714                           ;nrf24l01.c: 466: nrf24l01InterfaceInit();
  3715                           
  3716                           ;incstack = 0
  3717                           ; Regs used in _nrf24l01Init: [wreg-fsr0h+fsr1l+fsr1h+status,2+status,0+btemp+11+pclath+
      +                          cstack]
  3718  09E3  3189  21C5  3189   	fcall	_nrf24l01InterfaceInit
  3719                           
  3720                           ;nrf24l01.c: 471: PORTAbits.RA0 = 0;
  3721  09E6  0020               	movlb	0	; select bank0
  3722  09E7  100C               	bcf	12,0	;volatile
  3723                           
  3724                           ;nrf24l01.c: 473: _delay((unsigned long)((1000)*(32000000/4000000.0)));
  3725  09E8  300B               	movlw	11
  3726  09E9  0020               	movlb	0	; select bank0
  3727  09EA  00B0               	movwf	??_nrf24l01Init
  3728  09EB  3062               	movlw	98
  3729  09EC                     u3587:	
  3730  09EC  0B89               	decfsz	9,f
  3731  09ED  29EC               	goto	u3587
  3732  09EE  0BB0               	decfsz	??_nrf24l01Init,f
  3733  09EF  29EC               	goto	u3587
  3734  09F0  0000               	nop
  3735                           
  3736                           ;nrf24l01.c: 475: nrf24l01InitRegisters();
  3737  09F1  3182  222B  3189   	fcall	_nrf24l01InitRegisters
  3738                           
  3739                           ;nrf24l01.c: 477: _delay((unsigned long)((1000)*(32000000/4000000.0)));
  3740  09F4  300B               	movlw	11
  3741  09F5  0020               	movlb	0	; select bank0
  3742  09F6  00B0               	movwf	??_nrf24l01Init
  3743  09F7  3062               	movlw	98
  3744  09F8                     u3597:	
  3745  09F8  0B89               	decfsz	9,f
  3746  09F9  29F8               	goto	u3597
  3747  09FA  0BB0               	decfsz	??_nrf24l01Init,f
  3748  09FB  29F8               	goto	u3597
  3749  09FC  0000               	nop
  3750                           
  3751                           ;nrf24l01.c: 479: PORTAbits.RA0 = 1;
  3752  09FD  0020               	movlb	0	; select bank0
  3753  09FE  140C               	bsf	12,0	;volatile
  3754                           
  3755                           ;nrf24l01.c: 481: status.TX = 0;
  3756  09FF  01E4               	clrf	_status	;volatile
  3757                           
  3758                           ;nrf24l01.c: 482: status.RX = 0;
  3759  0A00  01E5               	clrf	_status+1	;volatile
  3760  0A01  0008               	return
  3761  0A02                     __end_of_nrf24l01Init:	
  3762                           
  3763                           	psect	text2
  3764  09C5                     __ptext2:	
  3765 ;; *************** function _nrf24l01InterfaceInit *****************
  3766 ;; Defined at:
  3767 ;;		line 8 in file "interface.c"
  3768 ;; Parameters:    Size  Location     Type
  3769 ;;		None
  3770 ;; Auto vars:     Size  Location     Type
  3771 ;;		None
  3772 ;; Return value:  Size  Location     Type
  3773 ;;                  1    wreg      void 
  3774 ;; Registers used:
  3775 ;;		wreg, status,2, status,0
  3776 ;; Tracked objects:
  3777 ;;		On entry : 0/0
  3778 ;;		On exit  : 0/0
  3779 ;;		Unchanged: 0/0
  3780 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3781 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3782 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3783 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3784 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3785 ;;Total ram usage:        0 bytes
  3786 ;; Hardware stack levels used:    1
  3787 ;; Hardware stack levels required when called:    7
  3788 ;; This function calls:
  3789 ;;		Nothing
  3790 ;; This function is called by:
  3791 ;;		_nrf24l01Init
  3792 ;; This function uses a non-reentrant model
  3793 ;;
  3794                           
  3795                           
  3796                           ;psect for function _nrf24l01InterfaceInit
  3797  09C5                     _nrf24l01InterfaceInit:	
  3798                           
  3799                           ;interface.c: 10: TRISAbits.TRISA0 = 0;
  3800                           
  3801                           ;incstack = 0
  3802                           ; Regs used in _nrf24l01InterfaceInit: [wreg+status,2+status,0]
  3803  09C5  0021               	movlb	1	; select bank1
  3804  09C6  100C               	bcf	12,0	;volatile
  3805                           
  3806                           ;interface.c: 11: TRISAbits.TRISA1 = 0;
  3807  09C7  108C               	bcf	12,1	;volatile
  3808                           
  3809                           ;interface.c: 13: TRISCbits.TRISC1 = 1;
  3810  09C8  148E               	bsf	14,1	;volatile
  3811                           
  3812                           ;interface.c: 14: TRISCbits.TRISC2 = 0;
  3813  09C9  110E               	bcf	14,2	;volatile
  3814                           
  3815                           ;interface.c: 15: TRISCbits.TRISC0 = 0;
  3816  09CA  100E               	bcf	14,0	;volatile
  3817                           
  3818                           ;interface.c: 17: SSP1CON1bits.SSPEN = 0;
  3819  09CB  0024               	movlb	4	; select bank4
  3820  09CC  1295               	bcf	21,5	;volatile
  3821                           
  3822                           ;interface.c: 19: RC1PPSbits.RC1PPS = 0b10001;
  3823  09CD  003D               	movlb	29	; select bank29
  3824  09CE  0821               	movf	33,w	;volatile
  3825  09CF  39E0               	andlw	-32
  3826  09D0  3811               	iorlw	17
  3827  09D1  00A1               	movwf	33	;volatile
  3828                           
  3829                           ;interface.c: 20: RC2PPSbits.RC2PPS = 0b11001;
  3830  09D2  0822               	movf	34,w	;volatile
  3831  09D3  39E0               	andlw	-32
  3832  09D4  3819               	iorlw	25
  3833  09D5  00A2               	movwf	34	;volatile
  3834                           
  3835                           ;interface.c: 21: RC0PPSbits.RC0PPS = 0b11000;
  3836  09D6  0820               	movf	32,w	;volatile
  3837  09D7  39E0               	andlw	-32
  3838  09D8  3818               	iorlw	24
  3839  09D9  00A0               	movwf	32	;volatile
  3840                           
  3841                           ;interface.c: 23: SSP1CON1bits.CKP = 0;
  3842  09DA  0024               	movlb	4	; select bank4
  3843  09DB  1215               	bcf	21,4	;volatile
  3844                           
  3845                           ;interface.c: 24: SSP1STATbits.CKE = 1;
  3846  09DC  1714               	bsf	20,6	;volatile
  3847                           
  3848                           ;interface.c: 25: SSP1CON1bits.SSPM = 0b0001;
  3849  09DD  0815               	movf	21,w	;volatile
  3850  09DE  39F0               	andlw	-16
  3851  09DF  3801               	iorlw	1
  3852  09E0  0095               	movwf	21	;volatile
  3853                           
  3854                           ;interface.c: 27: SSP1CON1bits.SSPEN = 1;
  3855  09E1  1695               	bsf	21,5	;volatile
  3856  09E2  0008               	return
  3857  09E3                     __end_of_nrf24l01InterfaceInit:	
  3858                           
  3859                           	psect	text3
  3860  022B                     __ptext3:	
  3861 ;; *************** function _nrf24l01InitRegisters *****************
  3862 ;; Defined at:
  3863 ;;		line 362 in file "nrf24l01.c"
  3864 ;; Parameters:    Size  Location     Type
  3865 ;;		None
  3866 ;; Auto vars:     Size  Location     Type
  3867 ;;  i               2   14[BANK0 ] unsigned int 
  3868 ;;  DynPD           1   13[BANK0 ] struct .
  3869 ;;  enAA            1   12[BANK0 ] struct .
  3870 ;;  rfSetup         1   11[BANK0 ] struct .
  3871 ;;  feature         1   10[BANK0 ] struct .
  3872 ;;  setupAW         1    9[BANK0 ] struct .
  3873 ;;  channel         1    8[BANK0 ] struct .
  3874 ;; Return value:  Size  Location     Type
  3875 ;;                  1    wreg      void 
  3876 ;; Registers used:
  3877 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, btemp+11, pclath, cstack
  3878 ;; Tracked objects:
  3879 ;;		On entry : 0/0
  3880 ;;		On exit  : 0/0
  3881 ;;		Unchanged: 0/0
  3882 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3883 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3884 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3885 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3886 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3887 ;;Total ram usage:        9 bytes
  3888 ;; Hardware stack levels used:    1
  3889 ;; Hardware stack levels required when called:   10
  3890 ;; This function calls:
  3891 ;;		___bmul
  3892 ;;		_nrf24l01SPIEnd
  3893 ;;		_nrf24l01SPISend
  3894 ;;		_nrf24l01SPIStart
  3895 ;;		_nrf24l01Send
  3896 ;;		_nrf24l01SetRXPipe
  3897 ;;		_nrf24l01SetTXPipe
  3898 ;; This function is called by:
  3899 ;;		_nrf24l01Init
  3900 ;; This function uses a non-reentrant model
  3901 ;;
  3902                           
  3903                           
  3904                           ;psect for function _nrf24l01InitRegisters
  3905  022B                     _nrf24l01InitRegisters:	
  3906                           
  3907                           ;nrf24l01.c: 364: status.configRegister.byte = nrf24l01Send((unsigned) 0b00000000 | (uns
      +                          igned) 0x00, 0);
  3908                           
  3909                           ;incstack = 0
  3910                           ; Regs used in _nrf24l01InitRegisters: [wreg-fsr0h+fsr1l+fsr1h+status,2+status,0+btemp+1
      +                          1+pclath+cstack]
  3911  022B  3000               	movlw	0
  3912  022C  001E               	movwi fsr1++
  3913  022D  3000               	movlw	0
  3914  022E  3188  20F0  3182   	fcall	_nrf24l01Send
  3915  0231  00FF               	movwf	127
  3916  0232  087F               	movf	127,w
  3917  0233  0020               	movlb	0	; select bank0
  3918  0234  00E7               	movwf	_status+3	;volatile
  3919                           
  3920                           ;nrf24l01.c: 366: status.configRegister.PWR_UP = 0;
  3921  0235  10E7               	bcf	_status+3,1	;volatile
  3922                           
  3923                           ;nrf24l01.c: 367: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x00, status.configReg
      +                          ister.byte);
  3924  0236  0867               	movf	_status+3,w	;volatile
  3925  0237  001E               	movwi fsr1++
  3926  0238  3020               	movlw	32
  3927  0239  3188  20F0  3182   	fcall	_nrf24l01Send
  3928                           
  3929                           ;nrf24l01.c: 369: n_SETUP_AW_t setupAW;;nrf24l01.c: 370: setupAW.byte = 0x00;
  3930  023C  0020               	movlb	0	; select bank0
  3931  023D  01A9               	clrf	nrf24l01InitRegisters@setupAW
  3932                           
  3933                           ;nrf24l01.c: 371: setupAW.AW = 0b11;
  3934  023E  3003               	movlw	3
  3935  023F  04A9               	iorwf	nrf24l01InitRegisters@setupAW,f
  3936                           
  3937                           ;nrf24l01.c: 372: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x03, setupAW.byte);
  3938  0240  0829               	movf	nrf24l01InitRegisters@setupAW,w
  3939  0241  001E               	movwi fsr1++
  3940  0242  3023               	movlw	35
  3941  0243  3188  20F0  3182   	fcall	_nrf24l01Send
  3942                           
  3943                           ;nrf24l01.c: 375: n_RF_CH_t channel;;nrf24l01.c: 376: channel.RF_CH = 2;
  3944  0246  0020               	movlb	0	; select bank0
  3945  0247  0828               	movf	nrf24l01InitRegisters@channel,w
  3946  0248  3980               	andlw	-128
  3947  0249  3802               	iorlw	2
  3948  024A  00A8               	movwf	nrf24l01InitRegisters@channel
  3949                           
  3950                           ;nrf24l01.c: 377: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x05, channel.byte);
  3951  024B  0828               	movf	nrf24l01InitRegisters@channel,w
  3952  024C  001E               	movwi fsr1++
  3953  024D  3025               	movlw	37
  3954  024E  3188  20F0  3182   	fcall	_nrf24l01Send
  3955                           
  3956                           ;nrf24l01.c: 380: n_RF_SETUP_t rfSetup;;nrf24l01.c: 381: rfSetup.byte = 0x00;
  3957  0251  0020               	movlb	0	; select bank0
  3958  0252  01AB               	clrf	nrf24l01InitRegisters@rfSetup
  3959                           
  3960                           ;nrf24l01.c: 382: rfSetup.RF_DR_LOW = 0;
  3961  0253  12AB               	bcf	nrf24l01InitRegisters@rfSetup,5
  3962                           
  3963                           ;nrf24l01.c: 383: rfSetup.RF_DR_HIGH = 1;
  3964  0254  15AB               	bsf	nrf24l01InitRegisters@rfSetup,3
  3965                           
  3966                           ;nrf24l01.c: 384: rfSetup.RF_PWR = 3;
  3967  0255  3006               	movlw	6
  3968  0256  04AB               	iorwf	nrf24l01InitRegisters@rfSetup,f
  3969                           
  3970                           ;nrf24l01.c: 385: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x06, rfSetup.byte);
  3971  0257  082B               	movf	nrf24l01InitRegisters@rfSetup,w
  3972  0258  001E               	movwi fsr1++
  3973  0259  3026               	movlw	38
  3974  025A  3188  20F0  3182   	fcall	_nrf24l01Send
  3975                           
  3976                           ;nrf24l01.c: 388: nrf24l01SetRXPipe(0xFF);
  3977  025D  30FF               	movlw	255
  3978  025E  3189  21A7  3182   	fcall	_nrf24l01SetRXPipe
  3979                           
  3980                           ;nrf24l01.c: 391: n_EN_AA_t enAA;;nrf24l01.c: 392: enAA.byte = nrf24l01Send((unsigned) 0
      +                          b00000000 | (unsigned) 0x01, 0);
  3981  0261  3000               	movlw	0
  3982  0262  001E               	movwi fsr1++
  3983  0263  3001               	movlw	1
  3984  0264  3188  20F0  3182   	fcall	_nrf24l01Send
  3985  0267  00FF               	movwf	127
  3986  0268  087F               	movf	127,w
  3987  0269  0020               	movlb	0	; select bank0
  3988  026A  00AC               	movwf	nrf24l01InitRegisters@enAA
  3989                           
  3990                           ;nrf24l01.c: 393: enAA.ENAA_P0 = 0;
  3991  026B  102C               	bcf	nrf24l01InitRegisters@enAA,0
  3992                           
  3993                           ;nrf24l01.c: 394: enAA.ENAA_P1 = 0;
  3994  026C  10AC               	bcf	nrf24l01InitRegisters@enAA,1
  3995                           
  3996                           ;nrf24l01.c: 395: enAA.ENAA_P2 = 0;
  3997  026D  112C               	bcf	nrf24l01InitRegisters@enAA,2
  3998                           
  3999                           ;nrf24l01.c: 396: enAA.ENAA_P3 = 0;
  4000  026E  11AC               	bcf	nrf24l01InitRegisters@enAA,3
  4001                           
  4002                           ;nrf24l01.c: 397: enAA.ENAA_P4 = 0;
  4003  026F  122C               	bcf	nrf24l01InitRegisters@enAA,4
  4004                           
  4005                           ;nrf24l01.c: 398: enAA.ENAA_P5 = 0;
  4006  0270  12AC               	bcf	nrf24l01InitRegisters@enAA,5
  4007                           
  4008                           ;nrf24l01.c: 399: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x01, enAA.byte);
  4009  0271  082C               	movf	nrf24l01InitRegisters@enAA,w
  4010  0272  001E               	movwi fsr1++
  4011  0273  3021               	movlw	33
  4012  0274  3188  20F0  3182   	fcall	_nrf24l01Send
  4013                           
  4014                           ;nrf24l01.c: 403: n_FEATURE_t feature;;nrf24l01.c: 404: feature.byte = nrf24l01Send((uns
      +                          igned) 0b00000000 | (unsigned) 0x1D, 0);
  4015  0277  3000               	movlw	0
  4016  0278  001E               	movwi fsr1++
  4017  0279  301D               	movlw	29
  4018  027A  3188  20F0  3182   	fcall	_nrf24l01Send
  4019  027D  00FF               	movwf	127
  4020  027E  087F               	movf	127,w
  4021  027F  0020               	movlb	0	; select bank0
  4022  0280  00AA               	movwf	nrf24l01InitRegisters@feature
  4023                           
  4024                           ;nrf24l01.c: 405: feature.EN_DPL = 1;
  4025  0281  152A               	bsf	nrf24l01InitRegisters@feature,2
  4026                           
  4027                           ;nrf24l01.c: 406: feature.EN_DYN_ACK = 1;
  4028  0282  142A               	bsf	nrf24l01InitRegisters@feature,0
  4029                           
  4030                           ;nrf24l01.c: 407: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x1D, feature.byte);
  4031  0283  082A               	movf	nrf24l01InitRegisters@feature,w
  4032  0284  001E               	movwi fsr1++
  4033  0285  303D               	movlw	61
  4034  0286  3188  20F0  3182   	fcall	_nrf24l01Send
  4035                           
  4036                           ;nrf24l01.c: 409: n_DYNPD_t DynPD;;nrf24l01.c: 410: DynPD.byte = nrf24l01Send((unsigned)
      +                           0b00000000 | (unsigned) 0x1C, 0);
  4037  0289  3000               	movlw	0
  4038  028A  001E               	movwi fsr1++
  4039  028B  301C               	movlw	28
  4040  028C  3188  20F0  3182   	fcall	_nrf24l01Send
  4041  028F  00FF               	movwf	127
  4042  0290  087F               	movf	127,w
  4043  0291  0020               	movlb	0	; select bank0
  4044  0292  00AD               	movwf	nrf24l01InitRegisters@DynPD
  4045                           
  4046                           ;nrf24l01.c: 411: DynPD.DPL_P0 = 1;
  4047  0293  142D               	bsf	nrf24l01InitRegisters@DynPD,0
  4048                           
  4049                           ;nrf24l01.c: 412: DynPD.DPL_P1 = 1;
  4050  0294  14AD               	bsf	nrf24l01InitRegisters@DynPD,1
  4051                           
  4052                           ;nrf24l01.c: 413: DynPD.DPL_P2 = 1;
  4053  0295  152D               	bsf	nrf24l01InitRegisters@DynPD,2
  4054                           
  4055                           ;nrf24l01.c: 414: DynPD.DPL_P3 = 1;
  4056  0296  15AD               	bsf	nrf24l01InitRegisters@DynPD,3
  4057                           
  4058                           ;nrf24l01.c: 415: DynPD.DPL_P4 = 1;
  4059  0297  162D               	bsf	nrf24l01InitRegisters@DynPD,4
  4060                           
  4061                           ;nrf24l01.c: 416: DynPD.DPL_P5 = 1;
  4062  0298  16AD               	bsf	nrf24l01InitRegisters@DynPD,5
  4063                           
  4064                           ;nrf24l01.c: 417: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x1C, DynPD.byte);
  4065  0299  082D               	movf	nrf24l01InitRegisters@DynPD,w
  4066  029A  001E               	movwi fsr1++
  4067  029B  303C               	movlw	60
  4068  029C  3188  20F0  3182   	fcall	_nrf24l01Send
  4069                           
  4070                           ;nrf24l01.c: 420: unsigned int i;;nrf24l01.c: 421: for (i = 0; i < 6; i++){
  4071  029F  0020               	movlb	0	; select bank0
  4072  02A0  01AE               	clrf	nrf24l01InitRegisters@i
  4073  02A1  01AF               	clrf	nrf24l01InitRegisters@i+1
  4074  02A2  3000               	movlw	0
  4075  02A3  022F               	subwf	nrf24l01InitRegisters@i+1,w
  4076  02A4  3006               	movlw	6
  4077  02A5  1903               	skipnz
  4078  02A6  022E               	subwf	nrf24l01InitRegisters@i,w
  4079  02A7  1803               	btfsc	3,0
  4080  02A8  2B02               	goto	l3308
  4081  02A9                     l3292:	
  4082                           
  4083                           ;nrf24l01.c: 423: nrf24l01SPIStart();
  4084  02A9  3188  20B9  3182   	fcall	_nrf24l01SPIStart
  4085                           
  4086                           ;nrf24l01.c: 424: nrf24l01SPISend((unsigned) 0b00100000 | ((unsigned) 0x0A + i));
  4087  02AC  0020               	movlb	0	; select bank0
  4088  02AD  082E               	movf	nrf24l01InitRegisters@i,w
  4089  02AE  3E0A               	addlw	10
  4090  02AF  3820               	iorlw	32
  4091  02B0  3188  20D0  3182   	fcall	_nrf24l01SPISend
  4092                           
  4093                           ;nrf24l01.c: 426: nrf24l01SPISend(n_ADDRESS_P0[4] + (n_ADDRESS_MUL * i));
  4094  02B3  3044               	movlw	low ((_n_ADDRESS_P0+4)| (0+32768))
  4095  02B4  0084               	movwf	4
  4096  02B5  3090               	movlw	high ((_n_ADDRESS_P0+4)| (0+32768))
  4097  02B6  0085               	movwf	5
  4098  02B7  0800               	movf	0,w	;code access
  4099  02B8  0020               	movlb	0	; select bank0
  4100  02B9  00A7               	movwf	??_nrf24l01InitRegisters
  4101  02BA  082E               	movf	nrf24l01InitRegisters@i,w
  4102  02BB  00FF               	movwf	127
  4103  02BC  087F               	movf	127,w
  4104  02BD  00F0               	movwf	___bmul@multiplicand
  4105  02BE  3028               	movlw	low (_n_ADDRESS_MUL| (0+32768))
  4106  02BF  0084               	movwf	4
  4107  02C0  3090               	movlw	high (_n_ADDRESS_MUL| (0+32768))
  4108  02C1  0085               	movwf	5
  4109  02C2  0800               	movf	0,w	;code access
  4110  02C3  3188  20DF  3182   	fcall	___bmul
  4111  02C6  0020               	movlb	0	; select bank0
  4112  02C7  0727               	addwf	??_nrf24l01InitRegisters,w
  4113  02C8  3188  20D0  3182   	fcall	_nrf24l01SPISend
  4114                           
  4115                           ;nrf24l01.c: 428: if (i < 2){
  4116  02CB  3000               	movlw	0
  4117  02CC  0020               	movlb	0	; select bank0
  4118  02CD  022F               	subwf	nrf24l01InitRegisters@i+1,w
  4119  02CE  3002               	movlw	2
  4120  02CF  1903               	skipnz
  4121  02D0  022E               	subwf	nrf24l01InitRegisters@i,w
  4122  02D1  1803               	skipnc
  4123  02D2  2AF3               	goto	l3302
  4124                           
  4125                           ;nrf24l01.c: 429: nrf24l01SPISend(n_ADDRESS_P0[3]);
  4126  02D3  3043               	movlw	low ((_n_ADDRESS_P0+3)| (0+32768))
  4127  02D4  0084               	movwf	4
  4128  02D5  3090               	movlw	high ((_n_ADDRESS_P0+3)| (0+32768))
  4129  02D6  0085               	movwf	5
  4130  02D7  0800               	movf	0,w	;code access
  4131  02D8  3188  20D0  3182   	fcall	_nrf24l01SPISend
  4132                           
  4133                           ;nrf24l01.c: 430: nrf24l01SPISend(n_ADDRESS_P0[2]);
  4134  02DB  3042               	movlw	low ((_n_ADDRESS_P0+2)| (0+32768))
  4135  02DC  0084               	movwf	4
  4136  02DD  3090               	movlw	high ((_n_ADDRESS_P0+2)| (0+32768))
  4137  02DE  0085               	movwf	5
  4138  02DF  0800               	movf	0,w	;code access
  4139  02E0  3188  20D0  3182   	fcall	_nrf24l01SPISend
  4140                           
  4141                           ;nrf24l01.c: 431: nrf24l01SPISend(n_ADDRESS_P0[1]);
  4142  02E3  3041               	movlw	low ((_n_ADDRESS_P0+1)| (0+32768))
  4143  02E4  0084               	movwf	4
  4144  02E5  3090               	movlw	high ((_n_ADDRESS_P0+1)| (0+32768))
  4145  02E6  0085               	movwf	5
  4146  02E7  0800               	movf	0,w	;code access
  4147  02E8  3188  20D0  3182   	fcall	_nrf24l01SPISend
  4148                           
  4149                           ;nrf24l01.c: 432: nrf24l01SPISend(n_ADDRESS_P0[0]);
  4150  02EB  3040               	movlw	low (_n_ADDRESS_P0| (0+32768))
  4151  02EC  0084               	movwf	4
  4152  02ED  3090               	movlw	high (_n_ADDRESS_P0| (0+32768))
  4153  02EE  0085               	movwf	5
  4154  02EF  0800               	movf	0,w	;code access
  4155  02F0  3188  20D0  3182   	fcall	_nrf24l01SPISend
  4156  02F3                     l3302:	
  4157                           
  4158                           ;nrf24l01.c: 433: };nrf24l01.c: 435: nrf24l01SPIEnd();
  4159  02F3  3188  20B0  3182   	fcall	_nrf24l01SPIEnd
  4160  02F6  3001               	movlw	1
  4161  02F7  0020               	movlb	0	; select bank0
  4162  02F8  07AE               	addwf	nrf24l01InitRegisters@i,f
  4163  02F9  3000               	movlw	0
  4164  02FA  3DAF               	addwfc	nrf24l01InitRegisters@i+1,f
  4165  02FB  3000               	movlw	0
  4166  02FC  022F               	subwf	nrf24l01InitRegisters@i+1,w
  4167  02FD  3006               	movlw	6
  4168  02FE  1903               	skipnz
  4169  02FF  022E               	subwf	nrf24l01InitRegisters@i,w
  4170  0300  1C03               	skipc
  4171  0301  2AA9               	goto	l3292
  4172  0302                     l3308:	
  4173                           
  4174                           ;nrf24l01.c: 436: };nrf24l01.c: 438: nrf24l01SetTXPipe(0);
  4175  0302  3000               	movlw	0
  4176  0303  318C  2429  3182   	fcall	_nrf24l01SetTXPipe
  4177                           
  4178                           ;nrf24l01.c: 442: status.statusRegister.byte = 0x00;
  4179  0306  0020               	movlb	0	; select bank0
  4180  0307  01E6               	clrf	_status+2	;volatile
  4181                           
  4182                           ;nrf24l01.c: 443: status.statusRegister.RX_DR = 1;
  4183  0308  1766               	bsf	_status+2,6	;volatile
  4184                           
  4185                           ;nrf24l01.c: 444: status.statusRegister.TX_DS = 1;
  4186  0309  16E6               	bsf	_status+2,5	;volatile
  4187                           
  4188                           ;nrf24l01.c: 445: status.statusRegister.MAX_RT = 1;
  4189  030A  1666               	bsf	_status+2,4	;volatile
  4190                           
  4191                           ;nrf24l01.c: 446: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x07, status.statusReg
      +                          ister.byte);
  4192  030B  0866               	movf	_status+2,w	;volatile
  4193  030C  001E               	movwi fsr1++
  4194  030D  3027               	movlw	39
  4195  030E  3188  20F0  3182   	fcall	_nrf24l01Send
  4196                           
  4197                           ;nrf24l01.c: 448: status.statusRegister.byte = nrf24l01Send((unsigned) 0b00000000 | (uns
      +                          igned) 0x07, 0);
  4198  0311  3000               	movlw	0
  4199  0312  001E               	movwi fsr1++
  4200  0313  3007               	movlw	7
  4201  0314  3188  20F0  3182   	fcall	_nrf24l01Send
  4202  0317  00FF               	movwf	127
  4203  0318  087F               	movf	127,w
  4204  0319  0020               	movlb	0	; select bank0
  4205  031A  00E6               	movwf	_status+2	;volatile
  4206                           
  4207                           ;nrf24l01.c: 451: nrf24l01Send((unsigned) 0b11100001, 0);
  4208  031B  3000               	movlw	0
  4209  031C  001E               	movwi fsr1++
  4210  031D  30E1               	movlw	225
  4211  031E  3188  20F0  3182   	fcall	_nrf24l01Send
  4212                           
  4213                           ;nrf24l01.c: 452: nrf24l01Send((unsigned) 0b11100010, 0);
  4214  0321  3000               	movlw	0
  4215  0322  001E               	movwi fsr1++
  4216  0323  30E2               	movlw	226
  4217  0324  3188  20F0  3182   	fcall	_nrf24l01Send
  4218                           
  4219                           ;nrf24l01.c: 455: status.configRegister.PRIM_RX = 1;
  4220  0327  0020               	movlb	0	; select bank0
  4221  0328  1467               	bsf	_status+3,0	;volatile
  4222                           
  4223                           ;nrf24l01.c: 456: status.configRegister.EN_CRC = 1;
  4224  0329  15E7               	bsf	_status+3,3	;volatile
  4225                           
  4226                           ;nrf24l01.c: 457: status.configRegister.CRCO = 1;
  4227  032A  1567               	bsf	_status+3,2	;volatile
  4228                           
  4229                           ;nrf24l01.c: 458: status.configRegister.PWR_UP = 1;
  4230  032B  14E7               	bsf	_status+3,1	;volatile
  4231                           
  4232                           ;nrf24l01.c: 459: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x00, status.configReg
      +                          ister.byte);
  4233  032C  0867               	movf	_status+3,w	;volatile
  4234  032D  001E               	movwi fsr1++
  4235  032E  3020               	movlw	32
  4236  032F  3188  20F0         	fcall	_nrf24l01Send
  4237  0331  0008               	return
  4238  0332                     __end_of_nrf24l01InitRegisters:	
  4239                           
  4240                           	psect	text4
  4241  0C29                     __ptext4:	
  4242 ;; *************** function _nrf24l01SetTXPipe *****************
  4243 ;; Defined at:
  4244 ;;		line 140 in file "nrf24l01.c"
  4245 ;; Parameters:    Size  Location     Type
  4246 ;;  pipe            1    wreg     unsigned char 
  4247 ;; Auto vars:     Size  Location     Type
  4248 ;;  pipe            1    6[BANK0 ] unsigned char 
  4249 ;; Return value:  Size  Location     Type
  4250 ;;                  1    wreg      void 
  4251 ;; Registers used:
  4252 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, btemp+11, pclath, cstack
  4253 ;; Tracked objects:
  4254 ;;		On entry : 0/0
  4255 ;;		On exit  : 0/0
  4256 ;;		Unchanged: 0/0
  4257 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4258 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4259 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4260 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4261 ;;      Totals:         1       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4262 ;;Total ram usage:        2 bytes
  4263 ;; Hardware stack levels used:    1
  4264 ;; Hardware stack levels required when called:    8
  4265 ;; This function calls:
  4266 ;;		___bmul
  4267 ;;		_nrf24l01SPIEnd
  4268 ;;		_nrf24l01SPISend
  4269 ;;		_nrf24l01SPIStart
  4270 ;; This function is called by:
  4271 ;;		_main
  4272 ;;		_nrf24l01InitRegisters
  4273 ;; This function uses a non-reentrant model
  4274 ;;
  4275                           
  4276                           
  4277                           ;psect for function _nrf24l01SetTXPipe
  4278  0C29                     _nrf24l01SetTXPipe:	
  4279                           
  4280                           ;incstack = 0
  4281                           ; Regs used in _nrf24l01SetTXPipe: [wreg-fsr0h+fsr1l+fsr1h+status,2+status,0+btemp+11+pc
      +                          lath+cstack]
  4282                           ;nrf24l01SetTXPipe@pipe stored from wreg
  4283  0C29  0020               	movlb	0	; select bank0
  4284  0C2A  00A6               	movwf	nrf24l01SetTXPipe@pipe
  4285                           
  4286                           ;nrf24l01.c: 143: nrf24l01SPIStart();
  4287  0C2B  3188  20B9  318C   	fcall	_nrf24l01SPIStart
  4288                           
  4289                           ;nrf24l01.c: 144: nrf24l01SPISend((unsigned) 0b00100000 | (unsigned) 0x10);
  4290  0C2E  3030               	movlw	48
  4291  0C2F  3188  20D0  318C   	fcall	_nrf24l01SPISend
  4292                           
  4293                           ;nrf24l01.c: 145: nrf24l01SPISend(n_ADDRESS_P0[4] + (unsigned) (pipe * n_ADDRESS_MUL));
  4294  0C32  3044               	movlw	low ((_n_ADDRESS_P0+4)| (0+32768))
  4295  0C33  0084               	movwf	4
  4296  0C34  3090               	movlw	high ((_n_ADDRESS_P0+4)| (0+32768))
  4297  0C35  0085               	movwf	5
  4298  0C36  0800               	movf	0,w	;code access
  4299  0C37  00F3               	movwf	??_nrf24l01SetTXPipe
  4300  0C38  3028               	movlw	low (_n_ADDRESS_MUL| (0+32768))
  4301  0C39  0084               	movwf	4
  4302  0C3A  3090               	movlw	high (_n_ADDRESS_MUL| (0+32768))
  4303  0C3B  0085               	movwf	5
  4304  0C3C  0800               	movf	0,w	;code access
  4305  0C3D  00FF               	movwf	127
  4306  0C3E  087F               	movf	127,w
  4307  0C3F  00F0               	movwf	___bmul@multiplicand
  4308  0C40  0020               	movlb	0	; select bank0
  4309  0C41  0826               	movf	nrf24l01SetTXPipe@pipe,w
  4310  0C42  3188  20DF  318C   	fcall	___bmul
  4311  0C45  0773               	addwf	??_nrf24l01SetTXPipe,w
  4312  0C46  3188  20D0  318C   	fcall	_nrf24l01SPISend
  4313                           
  4314                           ;nrf24l01.c: 146: nrf24l01SPISend(n_ADDRESS_P0[3]);
  4315  0C49  3043               	movlw	low ((_n_ADDRESS_P0+3)| (0+32768))
  4316  0C4A  0084               	movwf	4
  4317  0C4B  3090               	movlw	high ((_n_ADDRESS_P0+3)| (0+32768))
  4318  0C4C  0085               	movwf	5
  4319  0C4D  0800               	movf	0,w	;code access
  4320  0C4E  3188  20D0  318C   	fcall	_nrf24l01SPISend
  4321                           
  4322                           ;nrf24l01.c: 147: nrf24l01SPISend(n_ADDRESS_P0[2]);
  4323  0C51  3042               	movlw	low ((_n_ADDRESS_P0+2)| (0+32768))
  4324  0C52  0084               	movwf	4
  4325  0C53  3090               	movlw	high ((_n_ADDRESS_P0+2)| (0+32768))
  4326  0C54  0085               	movwf	5
  4327  0C55  0800               	movf	0,w	;code access
  4328  0C56  3188  20D0  318C   	fcall	_nrf24l01SPISend
  4329                           
  4330                           ;nrf24l01.c: 148: nrf24l01SPISend(n_ADDRESS_P0[1]);
  4331  0C59  3041               	movlw	low ((_n_ADDRESS_P0+1)| (0+32768))
  4332  0C5A  0084               	movwf	4
  4333  0C5B  3090               	movlw	high ((_n_ADDRESS_P0+1)| (0+32768))
  4334  0C5C  0085               	movwf	5
  4335  0C5D  0800               	movf	0,w	;code access
  4336  0C5E  3188  20D0  318C   	fcall	_nrf24l01SPISend
  4337                           
  4338                           ;nrf24l01.c: 149: nrf24l01SPISend(n_ADDRESS_P0[0]);
  4339  0C61  3040               	movlw	low (_n_ADDRESS_P0| (0+32768))
  4340  0C62  0084               	movwf	4
  4341  0C63  3090               	movlw	high (_n_ADDRESS_P0| (0+32768))
  4342  0C64  0085               	movwf	5
  4343  0C65  0800               	movf	0,w	;code access
  4344  0C66  3188  20D0  318C   	fcall	_nrf24l01SPISend
  4345                           
  4346                           ;nrf24l01.c: 150: nrf24l01SPIEnd();
  4347  0C69  3188  20B0         	fcall	_nrf24l01SPIEnd
  4348  0C6B  0008               	return
  4349  0C6C                     __end_of_nrf24l01SetTXPipe:	
  4350                           
  4351                           	psect	text5
  4352  08DF                     __ptext5:	
  4353 ;; *************** function ___bmul *****************
  4354 ;; Defined at:
  4355 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\Umul8.c"
  4356 ;; Parameters:    Size  Location     Type
  4357 ;;  multiplier      1    wreg     unsigned char 
  4358 ;;  multiplicand    1    0[COMMON] unsigned char 
  4359 ;; Auto vars:     Size  Location     Type
  4360 ;;  multiplier      1    2[COMMON] unsigned char 
  4361 ;;  product         1    1[COMMON] unsigned char 
  4362 ;; Return value:  Size  Location     Type
  4363 ;;                  1    wreg      unsigned char 
  4364 ;; Registers used:
  4365 ;;		wreg, status,2, status,0, btemp+11
  4366 ;; Tracked objects:
  4367 ;;		On entry : 0/0
  4368 ;;		On exit  : 0/0
  4369 ;;		Unchanged: 0/0
  4370 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4371 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4372 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4373 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4374 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4375 ;;Total ram usage:        3 bytes
  4376 ;; Hardware stack levels used:    1
  4377 ;; Hardware stack levels required when called:    7
  4378 ;; This function calls:
  4379 ;;		Nothing
  4380 ;; This function is called by:
  4381 ;;		_nrf24l01SetTXPipe
  4382 ;;		_nrf24l01InitRegisters
  4383 ;; This function uses a non-reentrant model
  4384 ;;
  4385                           
  4386                           
  4387                           ;psect for function ___bmul
  4388  08DF                     ___bmul:	
  4389                           
  4390                           ;incstack = 0
  4391                           ; Regs used in ___bmul: [wreg+status,2+status,0+btemp+11]
  4392                           ;___bmul@multiplier stored from wreg
  4393  08DF  00F2               	movwf	___bmul@multiplier
  4394  08E0  01F1               	clrf	___bmul@product
  4395  08E1                     l2744:	
  4396  08E1  1C72               	btfss	___bmul@multiplier,0
  4397  08E2  28E7               	goto	l2748
  4398  08E3  0870               	movf	___bmul@multiplicand,w
  4399  08E4  00FF               	movwf	127
  4400  08E5  087F               	movf	127,w
  4401  08E6  07F1               	addwf	___bmul@product,f
  4402  08E7                     l2748:	
  4403  08E7  1003               	clrc
  4404  08E8  0DF0               	rlf	___bmul@multiplicand,f
  4405  08E9  1003               	clrc
  4406  08EA  0CF2               	rrf	___bmul@multiplier,f
  4407  08EB  0872               	movf	___bmul@multiplier,w
  4408  08EC  1D03               	btfss	3,2
  4409  08ED  28E1               	goto	l2744
  4410  08EE  0871               	movf	___bmul@product,w
  4411  08EF  0008               	return
  4412  08F0                     __end_of___bmul:	
  4413                           
  4414                           	psect	text6
  4415  09A7                     __ptext6:	
  4416 ;; *************** function _nrf24l01SetRXPipe *****************
  4417 ;; Defined at:
  4418 ;;		line 153 in file "nrf24l01.c"
  4419 ;; Parameters:    Size  Location     Type
  4420 ;;  pipe            1    wreg     unsigned char 
  4421 ;; Auto vars:     Size  Location     Type
  4422 ;;  pipe            1    1[COMMON] unsigned char 
  4423 ;;  enRXAddr        1    2[COMMON] struct .
  4424 ;; Return value:  Size  Location     Type
  4425 ;;                  1    wreg      void 
  4426 ;; Registers used:
  4427 ;;		wreg, fsr1l, fsr1h, status,2, status,0, btemp+11, pclath
  4428 ;; Tracked objects:
  4429 ;;		On entry : 0/0
  4430 ;;		On exit  : 0/0
  4431 ;;		Unchanged: 0/0
  4432 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4433 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4434 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4435 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4436 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4437 ;;Total ram usage:        3 bytes
  4438 ;; Hardware stack levels used:    1
  4439 ;; Hardware stack levels required when called:    9
  4440 ;; This function calls:
  4441 ;;		_nrf24l01Send
  4442 ;; This function is called by:
  4443 ;;		_main
  4444 ;;		_nrf24l01InitRegisters
  4445 ;; This function uses a non-reentrant model
  4446 ;;
  4447                           
  4448                           
  4449                           ;psect for function _nrf24l01SetRXPipe
  4450  09A7                     _nrf24l01SetRXPipe:	
  4451                           
  4452                           ;incstack = 0
  4453                           ; Regs used in _nrf24l01SetRXPipe: [wreg+fsr1l+fsr1h+status,2+status,0+btemp+11+pclath]
  4454                           ;nrf24l01SetRXPipe@pipe stored from wreg
  4455  09A7  00F1               	movwf	nrf24l01SetRXPipe@pipe
  4456                           
  4457                           ;nrf24l01.c: 155: n_EN_RXADDR_t enRXAddr;;nrf24l01.c: 157: if (pipe > 5){
  4458  09A8  3006               	movlw	6
  4459  09A9  0271               	subwf	nrf24l01SetRXPipe@pipe,w
  4460  09AA  1C03               	skipc
  4461  09AB  29B3               	goto	l266
  4462                           
  4463                           ;nrf24l01.c: 158: enRXAddr.ERX_P0 = 1;
  4464  09AC  1472               	bsf	nrf24l01SetRXPipe@enRXAddr,0
  4465                           
  4466                           ;nrf24l01.c: 159: enRXAddr.ERX_P1 = 1;
  4467  09AD  14F2               	bsf	nrf24l01SetRXPipe@enRXAddr,1
  4468                           
  4469                           ;nrf24l01.c: 160: enRXAddr.ERX_P2 = 1;
  4470  09AE  1572               	bsf	nrf24l01SetRXPipe@enRXAddr,2
  4471                           
  4472                           ;nrf24l01.c: 161: enRXAddr.ERX_P3 = 1;
  4473  09AF  15F2               	bsf	nrf24l01SetRXPipe@enRXAddr,3
  4474                           
  4475                           ;nrf24l01.c: 162: enRXAddr.ERX_P4 = 1;
  4476  09B0  1672               	bsf	nrf24l01SetRXPipe@enRXAddr,4
  4477                           
  4478                           ;nrf24l01.c: 163: enRXAddr.ERX_P5 = 1;
  4479  09B1  16F2               	bsf	nrf24l01SetRXPipe@enRXAddr,5
  4480                           
  4481                           ;nrf24l01.c: 164: }
  4482  09B2  29BF               	goto	l2984
  4483  09B3                     l266:	
  4484                           
  4485                           ;nrf24l01.c: 166: else{;nrf24l01.c: 167: enRXAddr.ERX_P0 = 1;
  4486  09B3  1472               	bsf	nrf24l01SetRXPipe@enRXAddr,0
  4487                           
  4488                           ;nrf24l01.c: 168: enRXAddr.byte = (unsigned) enRXAddr.byte << pipe;
  4489  09B4  0872               	movf	nrf24l01SetRXPipe@enRXAddr,w
  4490  09B5  00F0               	movwf	??_nrf24l01SetRXPipe
  4491  09B6  0A71               	incf	nrf24l01SetRXPipe@pipe,w
  4492  09B7  29B9               	goto	u3014
  4493  09B8                     u3015:	
  4494  09B8  35F0               	lslf	??_nrf24l01SetRXPipe,f
  4495  09B9                     u3014:	
  4496  09B9  0B89               	decfsz	9,f
  4497  09BA  29B8               	goto	u3015
  4498  09BB  0870               	movf	??_nrf24l01SetRXPipe,w
  4499  09BC  00FF               	movwf	127
  4500  09BD  087F               	movf	127,w
  4501  09BE  00F2               	movwf	nrf24l01SetRXPipe@enRXAddr
  4502  09BF                     l2984:	
  4503                           
  4504                           ;nrf24l01.c: 169: };nrf24l01.c: 171: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x0
      +                          2, enRXAddr.byte);
  4505  09BF  0872               	movf	nrf24l01SetRXPipe@enRXAddr,w
  4506  09C0  001E               	movwi fsr1++
  4507  09C1  3022               	movlw	34
  4508  09C2  3188  20F0         	fcall	_nrf24l01Send
  4509  09C4  0008               	return
  4510  09C5                     __end_of_nrf24l01SetRXPipe:	
  4511                           
  4512                           	psect	text7
  4513  0B3B                     __ptext7:	
  4514 ;; *************** function _nrf24l01GetPipe *****************
  4515 ;; Defined at:
  4516 ;;		line 153 in file "main.c"
  4517 ;; Parameters:    Size  Location     Type
  4518 ;;  name            1    wreg     PTR unsigned char 
  4519 ;;		 -> romDataMap(28), 
  4520 ;; Auto vars:     Size  Location     Type
  4521 ;;  name            1    9[BANK0 ] PTR unsigned char 
  4522 ;;		 -> romDataMap(28), 
  4523 ;;  i               1   10[BANK0 ] unsigned char 
  4524 ;;  pipe            1    8[BANK0 ] unsigned char 
  4525 ;; Return value:  Size  Location     Type
  4526 ;;                  1    wreg      unsigned char 
  4527 ;; Registers used:
  4528 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, btemp+0, btemp+1, btemp+10, btemp+11, pclath, cstack
  4529 ;; Tracked objects:
  4530 ;;		On entry : 0/0
  4531 ;;		On exit  : 0/0
  4532 ;;		Unchanged: 0/0
  4533 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4534 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4535 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4536 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4537 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4538 ;;Total ram usage:        4 bytes
  4539 ;; Hardware stack levels used:    1
  4540 ;; Hardware stack levels required when called:    8
  4541 ;; This function calls:
  4542 ;;		___lwmod
  4543 ;;		_strlen
  4544 ;; This function is called by:
  4545 ;;		_main
  4546 ;; This function uses a non-reentrant model
  4547 ;;
  4548                           
  4549                           
  4550                           ;psect for function _nrf24l01GetPipe
  4551  0B3B                     _nrf24l01GetPipe:	
  4552                           
  4553                           ;incstack = 0
  4554                           ; Regs used in _nrf24l01GetPipe: [wreg-fsr0h+fsr1l+fsr1h+status,2-btemp+1+btemp+10+btemp
      +                          +11+pclath+cstack]
  4555                           ;nrf24l01GetPipe@name stored from wreg
  4556  0B3B  0020               	movlb	0	; select bank0
  4557  0B3C  00A9               	movwf	nrf24l01GetPipe@name
  4558                           
  4559                           ;main.c: 154: unsigned char pipe = 0;
  4560  0B3D  01A8               	clrf	nrf24l01GetPipe@pipe
  4561                           
  4562                           ;main.c: 155: unsigned char i = 0;
  4563  0B3E  01AA               	clrf	nrf24l01GetPipe@i
  4564                           
  4565                           ;main.c: 158: for (i = 0; i < strlen(name); i++){
  4566  0B3F  01AA               	clrf	nrf24l01GetPipe@i
  4567  0B40                     l3408:	
  4568  0B40  0829               	movf	nrf24l01GetPipe@name,w
  4569  0B41  3189  2189  318B   	fcall	_strlen
  4570  0B44  0020               	movlb	0	; select bank0
  4571  0B45  082A               	movf	nrf24l01GetPipe@i,w
  4572  0B46  00FE               	movwf	126
  4573  0B47  01FF               	clrf	127
  4574  0B48  0875               	movf	117,w
  4575  0B49  027F               	subwf	127,w
  4576  0B4A  1D03               	skipz
  4577  0B4B  2B4E               	goto	u3425
  4578  0B4C  0874               	movf	116,w
  4579  0B4D  027E               	subwf	126,w
  4580  0B4E                     u3425:	
  4581  0B4E  1803               	btfsc	3,0
  4582  0B4F  2B60               	goto	l3410
  4583                           
  4584                           ;main.c: 159: pipe+= name[i];
  4585  0B50  082A               	movf	nrf24l01GetPipe@i,w
  4586  0B51  0729               	addwf	nrf24l01GetPipe@name,w
  4587  0B52  00A7               	movwf	??_nrf24l01GetPipe
  4588  0B53  0827               	movf	??_nrf24l01GetPipe,w
  4589  0B54  0084               	movwf	4
  4590  0B55  3001               	movlw	1	; select bank2/3
  4591  0B56  0085               	movwf	5
  4592  0B57  0800               	movf	0,w
  4593  0B58  00FF               	movwf	127
  4594  0B59  087F               	movf	127,w
  4595  0B5A  07A8               	addwf	nrf24l01GetPipe@pipe,f
  4596  0B5B  3001               	movlw	1
  4597  0B5C  00FF               	movwf	127
  4598  0B5D  087F               	movf	127,w
  4599  0B5E  07AA               	addwf	nrf24l01GetPipe@i,f
  4600  0B5F  2B40               	goto	l3408
  4601  0B60                     l3410:	
  4602                           
  4603                           ;main.c: 160: };main.c: 162: return (unsigned) pipe % 6;
  4604  0B60  3006               	movlw	6
  4605  0B61  00F0               	movwf	___lwmod@divisor
  4606  0B62  3000               	movlw	0
  4607  0B63  00F1               	movwf	___lwmod@divisor+1
  4608  0B64  0828               	movf	nrf24l01GetPipe@pipe,w
  4609  0B65  00FE               	movwf	126
  4610  0B66  01FF               	clrf	127
  4611  0B67  087E               	movf	126,w
  4612  0B68  00F2               	movwf	___lwmod@dividend
  4613  0B69  087F               	movf	127,w
  4614  0B6A  00F3               	movwf	___lwmod@dividend+1
  4615  0B6B  318A  227D         	fcall	___lwmod
  4616  0B6D  0870               	movf	?___lwmod,w
  4617  0B6E  0008               	return
  4618  0B6F                     __end_of_nrf24l01GetPipe:	
  4619                           
  4620                           	psect	text8
  4621  0A7D                     __ptext8:	
  4622 ;; *************** function ___lwmod *****************
  4623 ;; Defined at:
  4624 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\lwmod.c"
  4625 ;; Parameters:    Size  Location     Type
  4626 ;;  divisor         2    0[COMMON] unsigned int 
  4627 ;;  dividend        2    2[COMMON] unsigned int 
  4628 ;; Auto vars:     Size  Location     Type
  4629 ;;  counter         1    6[BANK0 ] unsigned char 
  4630 ;; Return value:  Size  Location     Type
  4631 ;;                  2    0[COMMON] unsigned int 
  4632 ;; Registers used:
  4633 ;;		wreg, status,2, status,0, btemp+11
  4634 ;; Tracked objects:
  4635 ;;		On entry : 0/0
  4636 ;;		On exit  : 0/0
  4637 ;;		Unchanged: 0/0
  4638 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4639 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4640 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4641 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4642 ;;      Totals:         4       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4643 ;;Total ram usage:        5 bytes
  4644 ;; Hardware stack levels used:    1
  4645 ;; Hardware stack levels required when called:    7
  4646 ;; This function calls:
  4647 ;;		Nothing
  4648 ;; This function is called by:
  4649 ;;		_nrf24l01GetPipe
  4650 ;; This function uses a non-reentrant model
  4651 ;;
  4652                           
  4653                           
  4654                           ;psect for function ___lwmod
  4655  0A7D                     ___lwmod:	
  4656                           
  4657                           ;incstack = 0
  4658                           ; Regs used in ___lwmod: [wreg+status,2+status,0+btemp+11]
  4659  0A7D  0870               	movf	___lwmod@divisor,w
  4660  0A7E  0471               	iorwf	___lwmod@divisor+1,w
  4661  0A7F  1903               	btfsc	3,2
  4662  0A80  2AA5               	goto	l3354
  4663  0A81  0020               	movlb	0	; select bank0
  4664  0A82  01A6               	clrf	___lwmod@counter
  4665  0A83  0AA6               	incf	___lwmod@counter,f
  4666  0A84                     l3344:	
  4667  0A84  1BF1               	btfsc	___lwmod@divisor+1,7
  4668  0A85  2A90               	goto	l3346
  4669  0A86  3001               	movlw	1
  4670  0A87                     u3325:	
  4671  0A87  35F0               	lslf	___lwmod@divisor,f
  4672  0A88  0DF1               	rlf	___lwmod@divisor+1,f
  4673  0A89  0B89               	decfsz	9,f
  4674  0A8A  2A87               	goto	u3325
  4675  0A8B  3001               	movlw	1
  4676  0A8C  00FF               	movwf	127
  4677  0A8D  087F               	movf	127,w
  4678  0A8E  07A6               	addwf	___lwmod@counter,f
  4679  0A8F  2A84               	goto	l3344
  4680  0A90                     l3346:	
  4681  0A90  0871               	movf	___lwmod@divisor+1,w
  4682  0A91  0273               	subwf	___lwmod@dividend+1,w
  4683  0A92  1D03               	skipz
  4684  0A93  2A96               	goto	u3345
  4685  0A94  0870               	movf	___lwmod@divisor,w
  4686  0A95  0272               	subwf	___lwmod@dividend,w
  4687  0A96                     u3345:	
  4688  0A96  1C03               	skipc
  4689  0A97  2A9C               	goto	l3350
  4690  0A98  0870               	movf	___lwmod@divisor,w
  4691  0A99  02F2               	subwf	___lwmod@dividend,f
  4692  0A9A  0871               	movf	___lwmod@divisor+1,w
  4693  0A9B  3BF3               	subwfb	___lwmod@dividend+1,f
  4694  0A9C                     l3350:	
  4695  0A9C  3001               	movlw	1
  4696  0A9D                     u3355:	
  4697  0A9D  36F1               	lsrf	___lwmod@divisor+1,f
  4698  0A9E  0CF0               	rrf	___lwmod@divisor,f
  4699  0A9F  0B89               	decfsz	9,f
  4700  0AA0  2A9D               	goto	u3355
  4701  0AA1  3001               	movlw	1
  4702  0AA2  02A6               	subwf	___lwmod@counter,f
  4703  0AA3  1D03               	btfss	3,2
  4704  0AA4  2A90               	goto	l3346
  4705  0AA5                     l3354:	
  4706  0AA5  0873               	movf	___lwmod@dividend+1,w
  4707  0AA6  00F1               	movwf	?___lwmod+1
  4708  0AA7  0872               	movf	___lwmod@dividend,w
  4709  0AA8  00F0               	movwf	?___lwmod
  4710  0AA9  0008               	return
  4711  0AAA                     __end_of___lwmod:	
  4712                           
  4713                           	psect	text9
  4714  050F                     __ptext9:	
  4715 ;; *************** function _loop *****************
  4716 ;; Defined at:
  4717 ;;		line 107 in file "main.c"
  4718 ;; Parameters:    Size  Location     Type
  4719 ;;		None
  4720 ;; Auto vars:     Size  Location     Type
  4721 ;;  packet         33   38[BANK1 ] struct .
  4722 ;;  ta              3   29[BANK1 ] float 
  4723 ;;  vt              3   26[BANK1 ] float 
  4724 ;; Return value:  Size  Location     Type
  4725 ;;                  1    wreg      void 
  4726 ;; Registers used:
  4727 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, btemp+0, btemp+1, btemp+8, btemp+9, btemp+10, btemp+11, pclath
      +, cstack
  4728 ;; Tracked objects:
  4729 ;;		On entry : 0/0
  4730 ;;		On exit  : 0/0
  4731 ;;		Unchanged: 0/0
  4732 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4733 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4734 ;;      Locals:         0       0      45       0       0       0       0       0       0       0       0       0       
      +0       0
  4735 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4736 ;;      Totals:         0       0      45       0       0       0       0       0       0       0       0       0       
      +0       0
  4737 ;;Total ram usage:       45 bytes
  4738 ;; Hardware stack levels used:    1
  4739 ;; Hardware stack levels required when called:   14
  4740 ;; This function calls:
  4741 ;;		___ftadd
  4742 ;;		___ftdiv
  4743 ;;		___ftmul
  4744 ;;		___ftneg
  4745 ;;		_getADCValue
  4746 ;;		_sendMessage
  4747 ;; This function is called by:
  4748 ;;		_main
  4749 ;; This function uses a non-reentrant model
  4750 ;;
  4751                           
  4752                           
  4753                           ;psect for function _loop
  4754  050F                     _loop:	
  4755                           
  4756                           ;main.c: 109: nrf24l01Packet_t packet;;main.c: 120: sendMessage(&packet, "VBAT", getADCV
      +                          alue(0b000100) * 3.106382978723404);
  4757                           
  4758                           ;incstack = 0
  4759                           ; Regs used in _loop: [wreg-fsr0h+fsr1l+fsr1h+status,2-btemp+1+btemp+8-btemp+11+pclath+c
      +                          stack]
  4760  050F  30CF               	movlw	207
  4761  0510  0020               	movlb	0	; select bank0
  4762  0511  00CC               	movwf	___ftmul@f1
  4763  0512  3046               	movlw	70
  4764  0513  00CD               	movwf	___ftmul@f1+1
  4765  0514  3040               	movlw	64
  4766  0515  00CE               	movwf	___ftmul@f1+2
  4767  0516  3004               	movlw	4
  4768  0517  3186  2688  3185   	fcall	_getADCValue
  4769  051A  0020               	movlb	0	; select bank0
  4770  051B  0842               	movf	?_getADCValue,w
  4771  051C  00CF               	movwf	___ftmul@f2
  4772  051D  0843               	movf	?_getADCValue+1,w
  4773  051E  00D0               	movwf	___ftmul@f2+1
  4774  051F  0844               	movf	?_getADCValue+2,w
  4775  0520  00D1               	movwf	___ftmul@f2+2
  4776  0521  3185  25D4  3185   	fcall	___ftmul
  4777  0524  0020               	movlb	0	; select bank0
  4778  0525  084C               	movf	?___ftmul,w
  4779  0526  0021               	movlb	1	; select bank1
  4780  0527  00C0               	movwf	_loop$2246^(0+128)
  4781  0528  0020               	movlb	0	; select bank0
  4782  0529  084D               	movf	?___ftmul+1,w
  4783  052A  0021               	movlb	1	; select bank1
  4784  052B  00C1               	movwf	(_loop$2246+1)^(0+128)
  4785  052C  0020               	movlb	0	; select bank0
  4786  052D  084E               	movf	?___ftmul+2,w
  4787  052E  0021               	movlb	1	; select bank1
  4788  052F  00C2               	movwf	(_loop$2246+2)^(0+128)
  4789                           
  4790                           ;main.c: 109: nrf24l01Packet_t packet;;main.c: 120: sendMessage(&packet, "VBAT", getADCV
      +                          alue(0b000100) * 3.106382978723404);
  4791  0530  30C6               	movlw	low loop@packet
  4792  0531  00B1               	movwf	sendMessage@packet^(0+128)
  4793  0532  3000               	movlw	high loop@packet
  4794  0533  00B2               	movwf	(sendMessage@packet+1)^(0+128)
  4795  0534  304A               	movlw	low (STR_3| (0+32768))
  4796  0535  00B3               	movwf	sendMessage@topic^(0+128)
  4797  0536  3090               	movlw	high (STR_3| (0+32768))
  4798  0537  00B4               	movwf	(sendMessage@topic^(0+128)+1)
  4799  0538  0840               	movf	_loop$2246^(0+128),w
  4800  0539  00B5               	movwf	sendMessage@value^(0+128)
  4801  053A  0841               	movf	(_loop$2246+1)^(0+128),w
  4802  053B  00B6               	movwf	(sendMessage@value+1)^(0+128)
  4803  053C  0842               	movf	(_loop$2246+2)^(0+128),w
  4804  053D  00B7               	movwf	(sendMessage@value+2)^(0+128)
  4805  053E  318D  25B4  3185   	fcall	_sendMessage
  4806                           
  4807                           ;main.c: 132: FVRCONbits.TSEN = 1;
  4808  0541  0022               	movlb	2	; select bank2
  4809  0542  1697               	bsf	23,5	;volatile
  4810                           
  4811                           ;main.c: 133: float vt = (2.048 - getADCValue(0b111101)) / 2;
  4812  0543  303D               	movlw	61
  4813  0544  3186  2688  3185   	fcall	_getADCValue
  4814  0547  0020               	movlb	0	; select bank0
  4815  0548  0842               	movf	?_getADCValue,w
  4816  0549  00CC               	movwf	___ftneg@f1
  4817  054A  0843               	movf	?_getADCValue+1,w
  4818  054B  00CD               	movwf	___ftneg@f1+1
  4819  054C  0844               	movf	?_getADCValue+2,w
  4820  054D  00CE               	movwf	___ftneg@f1+2
  4821  054E  3188  20A7  3185   	fcall	___ftneg
  4822  0551  0020               	movlb	0	; select bank0
  4823  0552  084C               	movf	?___ftneg,w
  4824  0553  0021               	movlb	1	; select bank1
  4825  0554  00C3               	movwf	_loop$2247^(0+128)
  4826  0555  0020               	movlb	0	; select bank0
  4827  0556  084D               	movf	?___ftneg+1,w
  4828  0557  0021               	movlb	1	; select bank1
  4829  0558  00C4               	movwf	(_loop$2247+1)^(0+128)
  4830  0559  0020               	movlb	0	; select bank0
  4831  055A  084E               	movf	?___ftneg+2,w
  4832  055B  0021               	movlb	1	; select bank1
  4833  055C  00C5               	movwf	(_loop$2247+2)^(0+128)
  4834                           
  4835                           ;main.c: 133: float vt = (2.048 - getADCValue(0b111101)) / 2;
  4836  055D  3000               	movlw	0
  4837  055E  0020               	movlb	0	; select bank0
  4838  055F  00B5               	movwf	___ftdiv@f2
  4839  0560  3000               	movlw	0
  4840  0561  00B6               	movwf	___ftdiv@f2+1
  4841  0562  3040               	movlw	64
  4842  0563  00B7               	movwf	___ftdiv@f2+2
  4843  0564  3012               	movlw	18
  4844  0565  00AB               	movwf	___ftadd@f1
  4845  0566  3003               	movlw	3
  4846  0567  00AC               	movwf	___ftadd@f1+1
  4847  0568  3040               	movlw	64
  4848  0569  00AD               	movwf	___ftadd@f1+2
  4849  056A  0021               	movlb	1	; select bank1
  4850  056B  0843               	movf	_loop$2247^(0+128),w
  4851  056C  0020               	movlb	0	; select bank0
  4852  056D  00AE               	movwf	___ftadd@f2
  4853  056E  0021               	movlb	1	; select bank1
  4854  056F  0844               	movf	(_loop$2247+1)^(0+128),w
  4855  0570  0020               	movlb	0	; select bank0
  4856  0571  00AF               	movwf	___ftadd@f2+1
  4857  0572  0021               	movlb	1	; select bank1
  4858  0573  0845               	movf	(_loop$2247+2)^(0+128),w
  4859  0574  0020               	movlb	0	; select bank0
  4860  0575  00B0               	movwf	___ftadd@f2+2
  4861  0576  3183  2332  3185   	fcall	___ftadd
  4862  0579  0020               	movlb	0	; select bank0
  4863  057A  082B               	movf	?___ftadd,w
  4864  057B  00B8               	movwf	___ftdiv@f1
  4865  057C  082C               	movf	?___ftadd+1,w
  4866  057D  00B9               	movwf	___ftdiv@f1+1
  4867  057E  082D               	movf	?___ftadd+2,w
  4868  057F  00BA               	movwf	___ftdiv@f1+2
  4869  0580  3187  2731  3185   	fcall	___ftdiv
  4870  0583  0020               	movlb	0	; select bank0
  4871  0584  0835               	movf	?___ftdiv,w
  4872  0585  0021               	movlb	1	; select bank1
  4873  0586  00BA               	movwf	loop@vt^(0+128)
  4874  0587  0020               	movlb	0	; select bank0
  4875  0588  0836               	movf	?___ftdiv+1,w
  4876  0589  0021               	movlb	1	; select bank1
  4877  058A  00BB               	movwf	(loop@vt+1)^(0+128)
  4878  058B  0020               	movlb	0	; select bank0
  4879  058C  0837               	movf	?___ftdiv+2,w
  4880  058D  0021               	movlb	1	; select bank1
  4881  058E  00BC               	movwf	(loop@vt+2)^(0+128)
  4882                           
  4883                           ;main.c: 134: FVRCONbits.TSEN = 0;
  4884  058F  0022               	movlb	2	; select bank2
  4885  0590  1297               	bcf	23,5	;volatile
  4886                           
  4887                           ;main.c: 139: float ta = (vt / -0.00132) - (0.6063 / -0.00132) - 40;
  4888  0591  30A9               	movlw	169
  4889  0592  0020               	movlb	0	; select bank0
  4890  0593  00AB               	movwf	___ftadd@f1
  4891  0594  30D1               	movlw	209
  4892  0595  00AC               	movwf	___ftadd@f1+1
  4893  0596  3043               	movlw	67
  4894  0597  00AD               	movwf	___ftadd@f1+2
  4895  0598  3004               	movlw	4
  4896  0599  00B5               	movwf	___ftdiv@f2
  4897  059A  30AD               	movlw	173
  4898  059B  00B6               	movwf	___ftdiv@f2+1
  4899  059C  30BA               	movlw	186
  4900  059D  00B7               	movwf	___ftdiv@f2+2
  4901  059E  0021               	movlb	1	; select bank1
  4902  059F  083A               	movf	loop@vt^(0+128),w
  4903  05A0  0020               	movlb	0	; select bank0
  4904  05A1  00B8               	movwf	___ftdiv@f1
  4905  05A2  0021               	movlb	1	; select bank1
  4906  05A3  083B               	movf	(loop@vt+1)^(0+128),w
  4907  05A4  0020               	movlb	0	; select bank0
  4908  05A5  00B9               	movwf	___ftdiv@f1+1
  4909  05A6  0021               	movlb	1	; select bank1
  4910  05A7  083C               	movf	(loop@vt+2)^(0+128),w
  4911  05A8  0020               	movlb	0	; select bank0
  4912  05A9  00BA               	movwf	___ftdiv@f1+2
  4913  05AA  3187  2731  3185   	fcall	___ftdiv
  4914  05AD  0020               	movlb	0	; select bank0
  4915  05AE  0835               	movf	?___ftdiv,w
  4916  05AF  00AE               	movwf	___ftadd@f2
  4917  05B0  0836               	movf	?___ftdiv+1,w
  4918  05B1  00AF               	movwf	___ftadd@f2+1
  4919  05B2  0837               	movf	?___ftdiv+2,w
  4920  05B3  00B0               	movwf	___ftadd@f2+2
  4921  05B4  3183  2332  3185   	fcall	___ftadd
  4922  05B7  0020               	movlb	0	; select bank0
  4923  05B8  082B               	movf	?___ftadd,w
  4924  05B9  0021               	movlb	1	; select bank1
  4925  05BA  00BD               	movwf	loop@ta^(0+128)
  4926  05BB  0020               	movlb	0	; select bank0
  4927  05BC  082C               	movf	?___ftadd+1,w
  4928  05BD  0021               	movlb	1	; select bank1
  4929  05BE  00BE               	movwf	(loop@ta+1)^(0+128)
  4930  05BF  0020               	movlb	0	; select bank0
  4931  05C0  082D               	movf	?___ftadd+2,w
  4932  05C1  0021               	movlb	1	; select bank1
  4933  05C2  00BF               	movwf	(loop@ta+2)^(0+128)
  4934                           
  4935                           ;main.c: 141: sendMessage(&packet, "TEMP", ta);
  4936  05C3  30C6               	movlw	low loop@packet
  4937  05C4  00B1               	movwf	sendMessage@packet^(0+128)
  4938  05C5  3000               	movlw	high loop@packet
  4939  05C6  00B2               	movwf	(sendMessage@packet+1)^(0+128)
  4940  05C7  3045               	movlw	low (STR_4| (0+32768))
  4941  05C8  00B3               	movwf	sendMessage@topic^(0+128)
  4942  05C9  3090               	movlw	high (STR_4| (0+32768))
  4943  05CA  00B4               	movwf	(sendMessage@topic^(0+128)+1)
  4944  05CB  083D               	movf	loop@ta^(0+128),w
  4945  05CC  00B5               	movwf	sendMessage@value^(0+128)
  4946  05CD  083E               	movf	(loop@ta+1)^(0+128),w
  4947  05CE  00B6               	movwf	(sendMessage@value+1)^(0+128)
  4948  05CF  083F               	movf	(loop@ta+2)^(0+128),w
  4949  05D0  00B7               	movwf	(sendMessage@value+2)^(0+128)
  4950  05D1  318D  25B4         	fcall	_sendMessage
  4951  05D3  0008               	return
  4952  05D4                     __end_of_loop:	
  4953                           
  4954                           	psect	text10
  4955  0DB4                     __ptext10:	
  4956 ;; *************** function _sendMessage *****************
  4957 ;; Defined at:
  4958 ;;		line 87 in file "main.c"
  4959 ;; Parameters:    Size  Location     Type
  4960 ;;  packet          2   17[BANK1 ] PTR struct .
  4961 ;;		 -> main@packet(33), loop@packet(33), 
  4962 ;;  topic           2   19[BANK1 ] PTR const unsigned char 
  4963 ;;		 -> STR_7(6), STR_6(6), STR_4(5), STR_3(5), 
  4964 ;;  value           3   21[BANK1 ] float 
  4965 ;; Auto vars:     Size  Location     Type
  4966 ;;  ftoaStatus      2   24[BANK1 ] int 
  4967 ;; Return value:  Size  Location     Type
  4968 ;;                  1    wreg      void 
  4969 ;; Registers used:
  4970 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, btemp+0, btemp+1, btemp+8, btemp+9, btemp+10, btemp+11, pclath
      +, cstack
  4971 ;; Tracked objects:
  4972 ;;		On entry : 0/0
  4973 ;;		On exit  : 0/0
  4974 ;;		Unchanged: 0/0
  4975 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4976 ;;      Params:         0       0       7       0       0       0       0       0       0       0       0       0       
      +0       0
  4977 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  4978 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4979 ;;      Totals:         0       0       9       0       0       0       0       0       0       0       0       0       
      +0       0
  4980 ;;Total ram usage:        9 bytes
  4981 ;; Hardware stack levels used:    1
  4982 ;; Hardware stack levels required when called:   13
  4983 ;; This function calls:
  4984 ;;		_ftoa
  4985 ;;		_memset
  4986 ;;		_nrf24l01SendPacket
  4987 ;;		_sleepListren
  4988 ;;		_strcat
  4989 ;;		_strcpy
  4990 ;; This function is called by:
  4991 ;;		_loop
  4992 ;;		_main
  4993 ;; This function uses a non-reentrant model
  4994 ;;
  4995                           
  4996                           
  4997                           ;psect for function _sendMessage
  4998  0DB4                     _sendMessage:	
  4999                           
  5000                           ;main.c: 89: int ftoaStatus;;main.c: 91: memset(packet->Message, 0, sizeof(packet->Messa
      +                          ge));
  5001                           
  5002                           ;incstack = 0
  5003                           ; Regs used in _sendMessage: [wreg-fsr0h+fsr1l+fsr1h+status,2-btemp+1+btemp+8-btemp+11+p
      +                          clath+cstack]
  5004  0DB4  3020               	movlw	32
  5005  0DB5  001E               	movwi fsr1++
  5006  0DB6  3000               	movlw	0
  5007  0DB7  001E               	movwi fsr1++
  5008  0DB8  3000               	movlw	0
  5009  0DB9  001E               	movwi fsr1++
  5010  0DBA  001E               	movwi fsr1++
  5011  0DBB  0021               	movlb	1	; select bank1
  5012  0DBC  0831               	movf	sendMessage@packet^(0+128),w
  5013  0DBD  3E01               	addlw	1
  5014  0DBE  00FE               	movwf	126
  5015  0DBF  3000               	movlw	0
  5016  0DC0  3D32               	addwfc	(sendMessage@packet+1)^(0+128),w
  5017  0DC1  00FF               	movwf	127
  5018  0DC2  087E               	movf	126,w
  5019  0DC3  001E               	movwi fsr1++
  5020  0DC4  087F               	movf	127,w
  5021  0DC5  001E               	movwi fsr1++
  5022  0DC6  318B  2309  318D   	fcall	_memset
  5023                           
  5024                           ;main.c: 92: strcpy(packet->Message, romData->name);
  5025  0DC9  0021               	movlb	1	; select bank1
  5026  0DCA  0831               	movf	sendMessage@packet^(0+128),w
  5027  0DCB  3E01               	addlw	1
  5028  0DCC  00F0               	movwf	strcpy@to
  5029  0DCD  3000               	movlw	0
  5030  0DCE  3D32               	addwfc	(sendMessage@packet+1)^(0+128),w
  5031  0DCF  00F1               	movwf	strcpy@to+1
  5032  0DD0  086F               	movf	_romData^(0+128),w
  5033  0DD1  3E01               	addlw	1
  5034  0DD2  00F2               	movwf	strcpy@from
  5035  0DD3  3001               	movlw	1
  5036  0DD4  00F3               	movwf	strcpy@from+1
  5037  0DD5  3189  2130  318D   	fcall	_strcpy
  5038                           
  5039                           ;main.c: 93: strcat(packet->Message, "/");
  5040  0DD8  0021               	movlb	1	; select bank1
  5041  0DD9  0831               	movf	sendMessage@packet^(0+128),w
  5042  0DDA  3E01               	addlw	1
  5043  0DDB  00AD               	movwf	strcat@to^(0+128)
  5044  0DDC  3000               	movlw	0
  5045  0DDD  3D32               	addwfc	(sendMessage@packet+1)^(0+128),w
  5046  0DDE  00AE               	movwf	(strcat@to+1)^(0+128)
  5047  0DDF  3053               	movlw	low (STR_1| (0+32768))
  5048  0DE0  00AF               	movwf	strcat@from^(0+128)
  5049  0DE1  3090               	movlw	high (STR_1| (0+32768))
  5050  0DE2  00B0               	movwf	(strcat@from^(0+128)+1)
  5051  0DE3  318A  22AA  318D   	fcall	_strcat
  5052                           
  5053                           ;main.c: 94: strcat(packet->Message, topic);
  5054  0DE6  0021               	movlb	1	; select bank1
  5055  0DE7  0831               	movf	sendMessage@packet^(0+128),w
  5056  0DE8  3E01               	addlw	1
  5057  0DE9  00AD               	movwf	strcat@to^(0+128)
  5058  0DEA  3000               	movlw	0
  5059  0DEB  3D32               	addwfc	(sendMessage@packet+1)^(0+128),w
  5060  0DEC  00AE               	movwf	(strcat@to+1)^(0+128)
  5061  0DED  0834               	movf	(sendMessage@topic+1)^(0+128),w
  5062  0DEE  00B0               	movwf	(strcat@from+1)^(0+128)
  5063  0DEF  0833               	movf	sendMessage@topic^(0+128),w
  5064  0DF0  00AF               	movwf	strcat@from^(0+128)
  5065  0DF1  318A  22AA  318D   	fcall	_strcat
  5066                           
  5067                           ;main.c: 95: strcat(packet->Message, "/");
  5068  0DF4  0021               	movlb	1	; select bank1
  5069  0DF5  0831               	movf	sendMessage@packet^(0+128),w
  5070  0DF6  3E01               	addlw	1
  5071  0DF7  00AD               	movwf	strcat@to^(0+128)
  5072  0DF8  3000               	movlw	0
  5073  0DF9  3D32               	addwfc	(sendMessage@packet+1)^(0+128),w
  5074  0DFA  00AE               	movwf	(strcat@to+1)^(0+128)
  5075  0DFB  3053               	movlw	low (STR_1| (0+32768))
  5076  0DFC  00AF               	movwf	strcat@from^(0+128)
  5077  0DFD  3090               	movlw	high (STR_1| (0+32768))
  5078  0DFE  00B0               	movwf	(strcat@from^(0+128)+1)
  5079  0DFF  318A  22AA  318D   	fcall	_strcat
  5080                           
  5081                           ;main.c: 96: strcat(packet->Message, ftoa(value, &ftoaStatus));
  5082  0E02  0021               	movlb	1	; select bank1
  5083  0E03  0831               	movf	sendMessage@packet^(0+128),w
  5084  0E04  3E01               	addlw	1
  5085  0E05  00AD               	movwf	strcat@to^(0+128)
  5086  0E06  3000               	movlw	0
  5087  0E07  3D32               	addwfc	(sendMessage@packet+1)^(0+128),w
  5088  0E08  00AE               	movwf	(strcat@to+1)^(0+128)
  5089  0E09  0835               	movf	sendMessage@value^(0+128),w
  5090  0E0A  00A0               	movwf	ftoa@f^(0+128)
  5091  0E0B  0836               	movf	(sendMessage@value+1)^(0+128),w
  5092  0E0C  00A1               	movwf	(ftoa@f+1)^(0+128)
  5093  0E0D  0837               	movf	(sendMessage@value+2)^(0+128),w
  5094  0E0E  00A2               	movwf	(ftoa@f+2)^(0+128)
  5095  0E0F  30B8               	movlw	(low (sendMessage@ftoaStatus| 0))& (0+255)
  5096  0E10  00FF               	movwf	127
  5097  0E11  087F               	movf	127,w
  5098  0E12  00A3               	movwf	ftoa@status^(0+128)
  5099  0E13  3184  2428  318D   	fcall	_ftoa
  5100  0E16  0021               	movlb	1	; select bank1
  5101  0E17  00AF               	movwf	strcat@from^(0+128)
  5102  0E18  3001               	movlw	1
  5103  0E19  00B0               	movwf	(strcat@from+1)^(0+128)
  5104  0E1A  318A  22AA  318D   	fcall	_strcat
  5105                           
  5106                           ;main.c: 98: packet->packetData.byte = 0;
  5107  0E1D  0021               	movlb	1	; select bank1
  5108  0E1E  0831               	movf	sendMessage@packet^(0+128),w
  5109  0E1F  0084               	movwf	4
  5110  0E20  0832               	movf	(sendMessage@packet+1)^(0+128),w
  5111  0E21  0085               	movwf	5
  5112  0E22  0180               	clrf	0
  5113                           
  5114                           ;main.c: 99: packet->packetData.ACKRequest = 0;
  5115  0E23  0831               	movf	sendMessage@packet^(0+128),w
  5116  0E24  0084               	movwf	4
  5117  0E25  0832               	movf	(sendMessage@packet+1)^(0+128),w
  5118  0E26  0085               	movwf	5
  5119  0E27  1100               	bcf	0,2
  5120                           
  5121                           ;main.c: 101: nrf24l01SendPacket(packet);
  5122  0E28  0832               	movf	(sendMessage@packet+1)^(0+128),w
  5123  0E29  0020               	movlb	0	; select bank0
  5124  0E2A  00A9               	movwf	nrf24l01SendPacket@txPacket+1
  5125  0E2B  0021               	movlb	1	; select bank1
  5126  0E2C  0831               	movf	sendMessage@packet^(0+128),w
  5127  0E2D  0020               	movlb	0	; select bank0
  5128  0E2E  00A8               	movwf	nrf24l01SendPacket@txPacket
  5129  0E2F  318A  22D9  318D   	fcall	_nrf24l01SendPacket
  5130                           
  5131                           ;main.c: 103: sleepListren(2);
  5132  0E32  3002               	movlw	2
  5133  0E33  0020               	movlb	0	; select bank0
  5134  0E34  00A6               	movwf	sleepListren@seconds
  5135  0E35  3000               	movlw	0
  5136  0E36  00A7               	movwf	sleepListren@seconds+1
  5137  0E37  3189  2117         	fcall	_sleepListren
  5138  0E39  0008               	return
  5139  0E3A                     __end_of_sendMessage:	
  5140                           
  5141                           	psect	text11
  5142  0AAA                     __ptext11:	
  5143 ;; *************** function _strcat *****************
  5144 ;; Defined at:
  5145 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\strcat.c"
  5146 ;; Parameters:    Size  Location     Type
  5147 ;;  to              2   13[BANK1 ] PTR unsigned char 
  5148 ;;		 -> main@packet(33), loop@packet(33), 
  5149 ;;  from            2   15[BANK1 ] PTR const unsigned char 
  5150 ;;		 -> ftoa@buf(17), STR_7(6), STR_6(6), STR_4(5), 
  5151 ;;		 -> STR_3(5), STR_2(2), STR_1(2), 
  5152 ;; Auto vars:     Size  Location     Type
  5153 ;;  cp              2   66[BANK0 ] PTR unsigned char 
  5154 ;;		 -> main@packet(33), loop@packet(33), 
  5155 ;; Return value:  Size  Location     Type
  5156 ;;                  2   13[BANK1 ] PTR unsigned char 
  5157 ;; Registers used:
  5158 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+11, pclath
  5159 ;; Tracked objects:
  5160 ;;		On entry : 0/0
  5161 ;;		On exit  : 0/0
  5162 ;;		Unchanged: 0/0
  5163 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5164 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  5165 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5166 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5167 ;;      Totals:         0       2       4       0       0       0       0       0       0       0       0       0       
      +0       0
  5168 ;;Total ram usage:        6 bytes
  5169 ;; Hardware stack levels used:    1
  5170 ;; Hardware stack levels required when called:    7
  5171 ;; This function calls:
  5172 ;;		Nothing
  5173 ;; This function is called by:
  5174 ;;		_sendMessage
  5175 ;; This function uses a non-reentrant model
  5176 ;;
  5177                           
  5178                           
  5179                           ;psect for function _strcat
  5180  0AAA                     _strcat:	
  5181                           
  5182                           ;incstack = 0
  5183                           ; Regs used in _strcat: [wreg-fsr0h+status,2+status,0+btemp+11+pclath]
  5184  0AAA  0021               	movlb	1	; select bank1
  5185  0AAB  082E               	movf	(strcat@to+1)^(0+128),w
  5186  0AAC  0020               	movlb	0	; select bank0
  5187  0AAD  00E3               	movwf	strcat@cp+1
  5188  0AAE  0021               	movlb	1	; select bank1
  5189  0AAF  082D               	movf	strcat@to^(0+128),w
  5190  0AB0  0020               	movlb	0	; select bank0
  5191  0AB1  00E2               	movwf	strcat@cp
  5192  0AB2                     l3602:	
  5193  0AB2  0862               	movf	strcat@cp,w
  5194  0AB3  0084               	movwf	4
  5195  0AB4  0863               	movf	strcat@cp+1,w
  5196  0AB5  0085               	movwf	5
  5197  0AB6  0800               	movf	0,w
  5198  0AB7  1903               	btfsc	3,2
  5199  0AB8  2AC7               	goto	l3606
  5200  0AB9  3001               	movlw	1
  5201  0ABA  07E2               	addwf	strcat@cp,f
  5202  0ABB  3000               	movlw	0
  5203  0ABC  3DE3               	addwfc	strcat@cp+1,f
  5204  0ABD  2AB2               	goto	l3602
  5205  0ABE                     l3604:	
  5206  0ABE  3001               	movlw	1
  5207  0ABF  07E2               	addwf	strcat@cp,f
  5208  0AC0  3000               	movlw	0
  5209  0AC1  3DE3               	addwfc	strcat@cp+1,f
  5210  0AC2  3001               	movlw	1
  5211  0AC3  0021               	movlb	1	; select bank1
  5212  0AC4  07AF               	addwf	strcat@from^(0+128),f
  5213  0AC5  3000               	movlw	0
  5214  0AC6  3DB0               	addwfc	(strcat@from+1)^(0+128),f
  5215  0AC7                     l3606:	
  5216  0AC7  0021               	movlb	1	; select bank1
  5217  0AC8  082F               	movf	strcat@from^(0+128),w
  5218  0AC9  0084               	movwf	4
  5219  0ACA  0830               	movf	(strcat@from+1)^(0+128),w
  5220  0ACB  0085               	movwf	5
  5221  0ACC  0800               	movf	0,w	;code access
  5222  0ACD  00FF               	movwf	127
  5223  0ACE  0020               	movlb	0	; select bank0
  5224  0ACF  0862               	movf	strcat@cp,w
  5225  0AD0  0084               	movwf	4
  5226  0AD1  0863               	movf	strcat@cp+1,w
  5227  0AD2  0085               	movwf	5
  5228  0AD3  087F               	movf	127,w
  5229  0AD4  0080               	movwf	0
  5230  0AD5  0800               	movf	0,w
  5231  0AD6  1903               	btfsc	3,2
  5232  0AD7  0008               	return
  5233  0AD8  2ABE               	goto	l3604
  5234  0AD9                     __end_of_strcat:	
  5235                           ;	Return value of _strcat is never used
  5236                           
  5237                           
  5238                           	psect	text12
  5239  0917                     __ptext12:	
  5240 ;; *************** function _sleepListren *****************
  5241 ;; Defined at:
  5242 ;;		line 74 in file "main.c"
  5243 ;; Parameters:    Size  Location     Type
  5244 ;;  seconds         2    6[BANK0 ] unsigned int 
  5245 ;; Auto vars:     Size  Location     Type
  5246 ;;		None
  5247 ;; Return value:  Size  Location     Type
  5248 ;;                  1    wreg      void 
  5249 ;; Registers used:
  5250 ;;		wreg, status,2, status,0, btemp+10, btemp+11, pclath, cstack
  5251 ;; Tracked objects:
  5252 ;;		On entry : 0/0
  5253 ;;		On exit  : 0/0
  5254 ;;		Unchanged: 0/0
  5255 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5256 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5257 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5258 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5259 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5260 ;;Total ram usage:        2 bytes
  5261 ;; Hardware stack levels used:    1
  5262 ;; Hardware stack levels required when called:    9
  5263 ;; This function calls:
  5264 ;;		_sleepMs
  5265 ;; This function is called by:
  5266 ;;		_sendMessage
  5267 ;; This function uses a non-reentrant model
  5268 ;;
  5269                           
  5270                           
  5271                           ;psect for function _sleepListren
  5272  0917                     _sleepListren:	
  5273  0917                     l2908:	
  5274                           ;main.c: 77: while(seconds--){
  5275                           
  5276                           ;incstack = 0
  5277                           ; Regs used in _sleepListren: [wreg+status,2+status,0+btemp+10+btemp+11+pclath+cstack]
  5278                           
  5279  0917  3001               	movlw	1
  5280  0918  0020               	movlb	0	; select bank0
  5281  0919  02A6               	subwf	sleepListren@seconds,f
  5282  091A  3000               	movlw	0
  5283  091B  3BA7               	subwfb	sleepListren@seconds+1,f
  5284  091C  0A26               	incf	sleepListren@seconds,w
  5285  091D  1903               	btfsc	3,2
  5286  091E  0A27               	incf	sleepListren@seconds+1,w
  5287  091F  1903               	btfsc	3,2
  5288  0920  0008               	return
  5289                           
  5290                           ;main.c: 80: sleepMs(100);
  5291  0921  3064               	movlw	100
  5292  0922  00F0               	movwf	sleepMs@milliseconds
  5293  0923  3000               	movlw	0
  5294  0924  00F1               	movwf	sleepMs@milliseconds+1
  5295  0925  318A  2202  3189   	fcall	_sleepMs
  5296                           
  5297                           ;main.c: 83: sleepMs(900);
  5298  0928  3084               	movlw	132
  5299  0929  00F0               	movwf	sleepMs@milliseconds
  5300  092A  3003               	movlw	3
  5301  092B  00F1               	movwf	sleepMs@milliseconds+1
  5302  092C  318A  2202  3189   	fcall	_sleepMs
  5303  092F  2917               	goto	l2908
  5304  0930                     __end_of_sleepListren:	
  5305                           
  5306                           	psect	text13
  5307  0AD9                     __ptext13:	
  5308 ;; *************** function _nrf24l01SendPacket *****************
  5309 ;; Defined at:
  5310 ;;		line 176 in file "nrf24l01.c"
  5311 ;; Parameters:    Size  Location     Type
  5312 ;;  txPacket        2    8[BANK0 ] PTR struct .
  5313 ;;		 -> main@packet(33), loop@packet(33), 
  5314 ;; Auto vars:     Size  Location     Type
  5315 ;;		None
  5316 ;; Return value:  Size  Location     Type
  5317 ;;                  1    wreg      void 
  5318 ;; Registers used:
  5319 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, btemp+0, btemp+1, btemp+8, btemp+9, btemp+10, btemp+11, pclath
      +, cstack
  5320 ;; Tracked objects:
  5321 ;;		On entry : 0/0
  5322 ;;		On exit  : 0/0
  5323 ;;		Unchanged: 0/0
  5324 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5325 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5326 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5327 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5328 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5329 ;;Total ram usage:        2 bytes
  5330 ;; Hardware stack levels used:    1
  5331 ;; Hardware stack levels required when called:   12
  5332 ;; This function calls:
  5333 ;;		_nrf24l01Service
  5334 ;;		_sleepMs
  5335 ;;		_strcpy
  5336 ;; This function is called by:
  5337 ;;		_sendMessage
  5338 ;; This function uses a non-reentrant model
  5339 ;;
  5340                           
  5341                           
  5342                           ;psect for function _nrf24l01SendPacket
  5343  0AD9                     _nrf24l01SendPacket:	
  5344                           
  5345                           ;nrf24l01.c: 178: strcpy(TXPacket.Message, txPacket->Message);
  5346                           
  5347                           ;incstack = 0
  5348                           ; Regs used in _nrf24l01SendPacket: [wreg-fsr0h+fsr1l+fsr1h+status,2-btemp+1+btemp+8-bte
      +                          mp+11+pclath+cstack]
  5349  0AD9  30C2               	movlw	low (_TXPacket+1)
  5350  0ADA  00F0               	movwf	strcpy@to
  5351  0ADB  3001               	movlw	high (_TXPacket+1)
  5352  0ADC  00F1               	movwf	strcpy@to+1
  5353  0ADD  0020               	movlb	0	; select bank0
  5354  0ADE  0828               	movf	nrf24l01SendPacket@txPacket,w
  5355  0ADF  3E01               	addlw	1
  5356  0AE0  00FE               	movwf	126
  5357  0AE1  3000               	movlw	0
  5358  0AE2  3D29               	addwfc	nrf24l01SendPacket@txPacket+1,w
  5359  0AE3  00FF               	movwf	127
  5360  0AE4  087E               	movf	126,w
  5361  0AE5  00F2               	movwf	strcpy@from
  5362  0AE6  087F               	movf	127,w
  5363  0AE7  00F3               	movwf	strcpy@from+1
  5364  0AE8  3189  2130  318A   	fcall	_strcpy
  5365                           
  5366                           ;nrf24l01.c: 179: TXPacket.packetData = txPacket->packetData;
  5367  0AEB  0020               	movlb	0	; select bank0
  5368  0AEC  0828               	movf	nrf24l01SendPacket@txPacket,w
  5369  0AED  0084               	movwf	4
  5370  0AEE  0829               	movf	nrf24l01SendPacket@txPacket+1,w
  5371  0AEF  0085               	movwf	5
  5372  0AF0  0800               	movf	0,w
  5373  0AF1  00FF               	movwf	127
  5374  0AF2  087F               	movf	127,w
  5375  0AF3  0023               	movlb	3	; select bank3
  5376  0AF4  00C1               	movwf	_TXPacket^(0+384)
  5377                           
  5378                           ;nrf24l01.c: 181: status.TX = 1;
  5379  0AF5  3001               	movlw	1
  5380  0AF6  00FF               	movwf	127
  5381  0AF7  087F               	movf	127,w
  5382  0AF8  0020               	movlb	0	; select bank0
  5383  0AF9  00E4               	movwf	_status	;volatile
  5384  0AFA                     l2960:	
  5385                           ;nrf24l01.c: 183: while (status.TX != 0){
  5386                           
  5387  0AFA  0020               	movlb	0	; select bank0
  5388  0AFB  0864               	movf	_status,w	;volatile
  5389  0AFC  1903               	btfsc	3,2
  5390  0AFD  0008               	return
  5391                           
  5392                           ;nrf24l01.c: 184: sleepMs(1);
  5393  0AFE  3001               	movlw	1
  5394  0AFF  00F0               	movwf	sleepMs@milliseconds
  5395  0B00  3000               	movlw	0
  5396  0B01  00F1               	movwf	sleepMs@milliseconds+1
  5397  0B02  318A  2202  318A   	fcall	_sleepMs
  5398                           
  5399                           ;nrf24l01.c: 185: nrf24l01Service();
  5400  0B05  318F  275B  318A   	fcall	_nrf24l01Service
  5401  0B08  2AFA               	goto	l2960
  5402  0B09                     __end_of_nrf24l01SendPacket:	
  5403                           
  5404                           	psect	text14
  5405  0930                     __ptext14:	
  5406 ;; *************** function _strcpy *****************
  5407 ;; Defined at:
  5408 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\strcpy.c"
  5409 ;; Parameters:    Size  Location     Type
  5410 ;;  to              2    0[COMMON] PTR unsigned char 
  5411 ;;		 -> TXPacket(33), main@packet(33), loop@packet(33), romDataMap(28), 
  5412 ;;  from            2    2[COMMON] PTR const unsigned char 
  5413 ;;		 -> romDataMap.name(16), packet.Message(32), packet.Message(32), main@packet(33), 
  5414 ;;		 -> STR_5(4), loop@packet(33), romDataMap(28), 
  5415 ;; Auto vars:     Size  Location     Type
  5416 ;;  cp              2    6[BANK0 ] PTR unsigned char 
  5417 ;;		 -> TXPacket(33), main@packet(33), loop@packet(33), romDataMap(28), 
  5418 ;; Return value:  Size  Location     Type
  5419 ;;                  2    0[COMMON] PTR unsigned char 
  5420 ;; Registers used:
  5421 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+11, pclath
  5422 ;; Tracked objects:
  5423 ;;		On entry : 0/0
  5424 ;;		On exit  : 0/0
  5425 ;;		Unchanged: 0/0
  5426 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5427 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5428 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5429 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5430 ;;      Totals:         4       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5431 ;;Total ram usage:        6 bytes
  5432 ;; Hardware stack levels used:    1
  5433 ;; Hardware stack levels required when called:    7
  5434 ;; This function calls:
  5435 ;;		Nothing
  5436 ;; This function is called by:
  5437 ;;		_sendMessage
  5438 ;;		_main
  5439 ;;		_nrf24l01SendPacket
  5440 ;; This function uses a non-reentrant model
  5441 ;;
  5442                           
  5443                           
  5444                           ;psect for function _strcpy
  5445  0930                     _strcpy:	
  5446                           
  5447                           ;incstack = 0
  5448                           ; Regs used in _strcpy: [wreg-fsr0h+status,2+status,0+btemp+11+pclath]
  5449  0930  0871               	movf	strcpy@to+1,w
  5450  0931  0020               	movlb	0	; select bank0
  5451  0932  00A7               	movwf	strcpy@cp+1
  5452  0933  0870               	movf	strcpy@to,w
  5453  0934  00A6               	movwf	strcpy@cp
  5454  0935                     l2594:	
  5455  0935  0872               	movf	strcpy@from,w
  5456  0936  0084               	movwf	4
  5457  0937  0873               	movf	strcpy@from+1,w
  5458  0938  0085               	movwf	5
  5459  0939  0800               	movf	0,w	;code access
  5460  093A  00FF               	movwf	127
  5461  093B  0826               	movf	strcpy@cp,w
  5462  093C  0084               	movwf	4
  5463  093D  0827               	movf	strcpy@cp+1,w
  5464  093E  0085               	movwf	5
  5465  093F  087F               	movf	127,w
  5466  0940  0080               	movwf	0
  5467  0941  0800               	movf	0,w
  5468  0942  1903               	btfsc	3,2
  5469  0943  0008               	return
  5470  0944  3001               	movlw	1
  5471  0945  07A6               	addwf	strcpy@cp,f
  5472  0946  3000               	movlw	0
  5473  0947  3DA7               	addwfc	strcpy@cp+1,f
  5474  0948  3001               	movlw	1
  5475  0949  07F2               	addwf	strcpy@from,f
  5476  094A  3000               	movlw	0
  5477  094B  3DF3               	addwfc	strcpy@from+1,f
  5478  094C  2935               	goto	l2594
  5479  094D                     __end_of_strcpy:	
  5480                           ;	Return value of _strcpy is never used
  5481                           
  5482                           
  5483                           	psect	text15
  5484  0F5B                     __ptext15:	
  5485 ;; *************** function _nrf24l01Service *****************
  5486 ;; Defined at:
  5487 ;;		line 272 in file "nrf24l01.c"
  5488 ;; Parameters:    Size  Location     Type
  5489 ;;		None
  5490 ;; Auto vars:     Size  Location     Type
  5491 ;;  width           1  [STACK] unsigned char 
  5492 ;;  i               1  [STACK] unsigned char 
  5493 ;; Return value:  Size  Location     Type
  5494 ;;                  1    wreg      void 
  5495 ;; Registers used:
  5496 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, btemp+0, btemp+1, btemp+8, btemp+9, btemp+11, pclath
  5497 ;; Tracked objects:
  5498 ;;		On entry : 0/0
  5499 ;;		On exit  : 1C/0
  5500 ;;		Unchanged: 0/0
  5501 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5502 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5503 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5504 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5505 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5506 ;;Total ram usage:        0 bytes
  5507 ;; Hardware stack levels used:    1
  5508 ;; Hardware stack levels required when called:   11
  5509 ;; This function calls:
  5510 ;;		_memset
  5511 ;;		_nrf24l01SPIEnd
  5512 ;;		_nrf24l01SPISend
  5513 ;;		_nrf24l01SPIStart
  5514 ;;		_nrf24l01Send
  5515 ;;		_nrf24l01SendTXBuffer
  5516 ;;		_nrf24l01SetRXMode
  5517 ;;		_strcmp
  5518 ;; This function is called by:
  5519 ;;		_nrf24l01SendPacket
  5520 ;;		_nrf24l01ISR
  5521 ;; This function uses a reentrant model
  5522 ;;
  5523                           
  5524                           
  5525                           ;psect for function _nrf24l01Service
  5526  0F5B                     _nrf24l01Service:	
  5527                           
  5528                           ; autosize = 2, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 0, argsize = 0 var
      +                          gsize = 0, retsize = 0 argfudge = 0
  5529  0F5B  3142               	addfsr 1,2
  5530                           
  5531                           ;nrf24l01.c: 274: unsigned char i;;nrf24l01.c: 276: if (status.TX == 1){
  5532                           
  5533                           ;incstack = 0
  5534 ;; hardware stack exceeded
  5535                           ; Regs used in _nrf24l01Service: [wreg-fsr0h+fsr1l+fsr1h+status,2-btemp+1+btemp+8+btemp+
      +                          9+btemp+11+pclath]
  5536  0F5C  0020               	movlb	0	; select bank0
  5537  0F5D  0364               	decf	_status,w	;volatile
  5538  0F5E  1D03               	btfss	3,2
  5539  0F5F  2F66               	goto	l3156
  5540                           
  5541                           ;nrf24l01.c: 279: status.TX = 2;
  5542  0F60  3002               	movlw	2
  5543  0F61  00E4               	movwf	_status	;volatile
  5544                           
  5545                           ;nrf24l01.c: 280: nrf24l01SendTXBuffer(&TXPacket);
  5546  0F62  30C1               	movlw	(low (_TXPacket| (0+256)))& (0+255)
  5547  0F63  318C  246C  318F   	fcall	_nrf24l01SendTXBuffer
  5548  0F66                     l3156:	
  5549                           
  5550                           ;nrf24l01.c: 281: };nrf24l01.c: 283: if (status.TX == 4){
  5551  0F66  3004               	movlw	4
  5552  0F67  0664               	xorwf	_status,w	;volatile
  5553  0F68  1D03               	btfss	3,2
  5554  0F69  2F70               	goto	l3162
  5555                           
  5556                           ;nrf24l01.c: 284: if (!status.retryCount--){
  5557  0F6A  03E8               	decf	_status+4,f	;volatile
  5558  0F6B  0A68               	incf	_status+4,w	;volatile
  5559  0F6C  1D03               	btfss	3,2
  5560  0F6D  2F70               	goto	l3162
  5561                           
  5562                           ;nrf24l01.c: 285: status.TX = 1;
  5563  0F6E  3001               	movlw	1
  5564  0F6F  00E4               	movwf	_status	;volatile
  5565  0F70                     l3162:	
  5566                           
  5567                           ;nrf24l01.c: 286: };nrf24l01.c: 287: };nrf24l01.c: 289: if (status.RX == 1){
  5568  0F70  0365               	decf	_status+1,w	;volatile
  5569  0F71  1D03               	btfss	3,2
  5570  0F72  2FD4               	goto	l3198
  5571                           
  5572                           ;nrf24l01.c: 292: memset(RXPacket.Message, 0 ,sizeof(RXPacket.Message));
  5573  0F73  3020               	movlw	32
  5574  0F74  001E               	movwi fsr1++
  5575  0F75  3000               	movlw	0
  5576  0F76  001E               	movwi fsr1++
  5577  0F77  3000               	movlw	0
  5578  0F78  001E               	movwi fsr1++
  5579  0F79  001E               	movwi fsr1++
  5580  0F7A  30A1               	movlw	(low ((_RXPacket| (0+256)+1)))& (0+255)
  5581  0F7B  001E               	movwi fsr1++
  5582  0F7C  3001               	movlw	1
  5583  0F7D  001E               	movwi fsr1++
  5584  0F7E  318B  2309  318F   	fcall	_memset
  5585                           
  5586                           ;nrf24l01.c: 293: RXPacket.packetData.byte = 0x00;
  5587  0F81  0023               	movlb	3	; select bank3
  5588  0F82  01A0               	clrf	_RXPacket^(0+384)
  5589                           
  5590                           ;nrf24l01.c: 296: unsigned char width = nrf24l01Send((unsigned) 0b01100000, 0);
  5591  0F83  3000               	movlw	0
  5592  0F84  001E               	movwi fsr1++
  5593  0F85  3060               	movlw	96
  5594  0F86  3188  20F0  318F   	fcall	_nrf24l01Send
  5595                           
  5596                           ;stkvar	nrf24l01Service@width @ sp[(-2)+0]
  5597  0F89  3FFE               	movwi [-2]fsr1
  5598                           
  5599                           ;nrf24l01.c: 299: PORTAbits.RA0 = 0;
  5600  0F8A  0020               	movlb	0	; select bank0
  5601  0F8B  100C               	bcf	12,0	;volatile
  5602                           
  5603                           ;nrf24l01.c: 302: nrf24l01SPIStart();
  5604  0F8C  3188  20B9  318F   	fcall	_nrf24l01SPIStart
  5605                           
  5606                           ;nrf24l01.c: 305: nrf24l01SPISend((unsigned) 0b01100001);
  5607  0F8F  3061               	movlw	97
  5608  0F90  3188  20D0  318F   	fcall	_nrf24l01SPISend
  5609                           
  5610                           ;nrf24l01.c: 308: RXPacket.packetData.byte = nrf24l01SPISend(0);
  5611  0F93  3000               	movlw	0
  5612  0F94  3188  20D0  318F   	fcall	_nrf24l01SPISend
  5613  0F97  0023               	movlb	3	; select bank3
  5614  0F98  00A0               	movwf	_RXPacket^(0+384)
  5615                           
  5616                           ;nrf24l01.c: 309: width--;
  5617                           ;stkvar	nrf24l01Service@width @ sp[(-2)+0]
  5618  0F99  3F7E               	moviw [-2]fsr1
  5619  0F9A  00F4               	movwf	116
  5620  0F9B  3001               	movlw	1
  5621  0F9C  0274               	subwf	116,w
  5622  0F9D  3FFE               	movwi [-2]fsr1
  5623                           
  5624                           ;nrf24l01.c: 311: for (i = 0; i < width; i++) {
  5625                           ;stkvar	nrf24l01Service@i @ sp[(-2)+1]
  5626  0F9E  3000               	movlw	0
  5627  0F9F  3FFF               	movwi [-1]fsr1
  5628  0FA0                     l3186:	
  5629                           
  5630                           ;stkvar	nrf24l01Service@i @ sp[(-2)+1]
  5631  0FA0  3F7F               	moviw [-1]fsr1
  5632  0FA1  00FF               	movwf	127
  5633                           
  5634                           ;stkvar	nrf24l01Service@width @ sp[(-2)+0]
  5635  0FA2  3F7E               	moviw [-2]fsr1
  5636  0FA3  027F               	subwf	127,w
  5637  0FA4  1803               	btfsc	3,0
  5638  0FA5  2FB5               	goto	l3188
  5639                           
  5640                           ;nrf24l01.c: 313: RXPacket.Message[i] = nrf24l01SPISend(0);
  5641                           ;stkvar	nrf24l01Service@i @ sp[(-2)+1]
  5642  0FA6  3F7F               	moviw [-1]fsr1
  5643  0FA7  3EA1               	addlw	(low ((_RXPacket| (0+256)+1)))& (0+255)
  5644  0FA8  0084               	movwf	4
  5645  0FA9  3001               	movlw	1	; select bank3/4
  5646  0FAA  3001               	movlw	1	; select bank3/4
  5647  0FAB  0085               	movwf	5
  5648  0FAC  3000               	movlw	0
  5649  0FAD  3188  20D0  318F   	fcall	_nrf24l01SPISend
  5650  0FB0  0080               	movwf	0
  5651                           
  5652                           ;stkvar	nrf24l01Service@i @ sp[(-2)+1]
  5653  0FB1  3F7F               	moviw [-1]fsr1
  5654  0FB2  3E01               	addlw	1
  5655  0FB3  3FFF               	movwi [-1]fsr1
  5656  0FB4  2FA0               	goto	l3186
  5657  0FB5                     l3188:	
  5658                           
  5659                           ;nrf24l01.c: 314: };nrf24l01.c: 317: nrf24l01SPIEnd();
  5660  0FB5  3188  20B0  318F   	fcall	_nrf24l01SPIEnd
  5661                           
  5662                           ;nrf24l01.c: 320: PORTAbits.RA0 = 1;
  5663  0FB8  0020               	movlb	0	; select bank0
  5664  0FB9  140C               	bsf	12,0	;volatile
  5665                           
  5666                           ;nrf24l01.c: 323: RXPacket.packetData.Pipe = status.statusRegister.RX_P_NO;
  5667  0FBA  0C66               	rrf	_status+2,w	;volatile
  5668  0FBB  3907               	andlw	7
  5669  0FBC  00FF               	movwf	127
  5670  0FBD  0EFF               	swapf	127,f
  5671  0FBE  0023               	movlb	3	; select bank3
  5672  0FBF  0820               	movf	_RXPacket^(0+384),w
  5673  0FC0  067F               	xorwf	127,w
  5674  0FC1  398F               	andlw	-113
  5675  0FC2  067F               	xorwf	127,w
  5676  0FC3  00A0               	movwf	_RXPacket^(0+384)
  5677                           
  5678                           ;nrf24l01.c: 326: RXPacket.packetData.RPD = nrf24l01Send((unsigned) 0b00000000 | (unsign
      +                          ed) 0x09, 0);
  5679  0FC4  3000               	movlw	0
  5680  0FC5  001E               	movwi fsr1++
  5681  0FC6  3009               	movlw	9
  5682  0FC7  3188  20F0  318F   	fcall	_nrf24l01Send
  5683  0FCA  00FF               	movwf	127
  5684  0FCB  0023               	movlb	3	; select bank3
  5685  0FCC  0820               	movf	_RXPacket^(0+384),w
  5686  0FCD  067F               	xorwf	127,w
  5687  0FCE  39FE               	andlw	-2
  5688  0FCF  067F               	xorwf	127,w
  5689  0FD0  00A0               	movwf	_RXPacket^(0+384)
  5690                           
  5691                           ;nrf24l01.c: 328: status.RX = 2;
  5692  0FD1  3002               	movlw	2
  5693  0FD2  0020               	movlb	0	; select bank0
  5694  0FD3  00E5               	movwf	_status+1	;volatile
  5695  0FD4                     l3198:	
  5696                           
  5697                           ;nrf24l01.c: 329: };nrf24l01.c: 331: if (status.RX == 2){
  5698  0FD4  3002               	movlw	2
  5699  0FD5  0665               	xorwf	_status+1,w	;volatile
  5700  0FD6  1D03               	btfss	3,2
  5701  0FD7  2FF1               	goto	l3210
  5702                           
  5703                           ;nrf24l01.c: 334: if (RXPacket.packetData.IsACK){
  5704  0FD8  0023               	movlb	3	; select bank3
  5705  0FD9  1DA0               	btfss	_RXPacket^(0+384),3
  5706  0FDA  2FF1               	goto	l3210
  5707                           
  5708                           ;nrf24l01.c: 336: if (status.TX == 4){
  5709  0FDB  3004               	movlw	4
  5710  0FDC  0020               	movlb	0	; select bank0
  5711  0FDD  0664               	xorwf	_status,w	;volatile
  5712  0FDE  1D03               	btfss	3,2
  5713  0FDF  2FF1               	goto	l3210
  5714                           
  5715                           ;nrf24l01.c: 338: if (strcmp(RXPacket.Message, TXPacket.Message) == 0){
  5716  0FE0  30C2               	movlw	(low ((_TXPacket| (0+256)+1)))& (0+255)
  5717  0FE1  001E               	movwi fsr1++
  5718  0FE2  30A1               	movlw	(low ((_RXPacket| (0+256)+1)))& (0+255)
  5719  0FE3  318A  222A  318F   	fcall	_strcmp
  5720  0FE6  0874               	movf	116,w
  5721  0FE7  0475               	iorwf	117,w
  5722  0FE8  1D03               	btfss	3,2
  5723  0FE9  2FF1               	goto	l3210
  5724                           
  5725                           ;nrf24l01.c: 339: status.TX = 0;
  5726  0FEA  0020               	movlb	0	; select bank0
  5727  0FEB  01E4               	clrf	_status	;volatile
  5728                           
  5729                           ;nrf24l01.c: 340: status.RX = 0;
  5730  0FEC  01E5               	clrf	_status+1	;volatile
  5731                           
  5732                           ;nrf24l01.c: 342: nrf24l01SetRXMode(0);
  5733  0FED  3000               	movlw	0
  5734  0FEE  318B  236F  318F   	fcall	_nrf24l01SetRXMode
  5735  0FF1                     l3210:	
  5736                           
  5737                           ;nrf24l01.c: 344: };nrf24l01.c: 345: };nrf24l01.c: 346: };nrf24l01.c: 347: };nrf24l01.c:
      +                           349: if (status.RX == 2){
  5738  0FF1  3002               	movlw	2
  5739  0FF2  0020               	movlb	0	; select bank0
  5740  0FF3  0665               	xorwf	_status+1,w	;volatile
  5741  0FF4  1D03               	btfss	3,2
  5742  0FF5  2FFE               	goto	l308
  5743                           
  5744                           ;nrf24l01.c: 351: if (RXPacket.packetData.ACKRequest){
  5745  0FF6  0023               	movlb	3	; select bank3
  5746  0FF7  1D20               	btfss	_RXPacket^(0+384),2
  5747  0FF8  2FFE               	goto	l308
  5748                           
  5749                           ;nrf24l01.c: 353: RXPacket.packetData.ACKRequest = 0;
  5750  0FF9  1120               	bcf	_RXPacket^(0+384),2
  5751                           
  5752                           ;nrf24l01.c: 354: RXPacket.packetData.IsACK = 1;
  5753  0FFA  15A0               	bsf	_RXPacket^(0+384),3
  5754                           
  5755                           ;nrf24l01.c: 356: nrf24l01SendTXBuffer(&RXPacket);
  5756  0FFB  30A0               	movlw	(low (_RXPacket| (0+256)))& (0+255)
  5757  0FFC  318C  246C         	fcall	_nrf24l01SendTXBuffer
  5758  0FFE                     l308:	
  5759                           
  5760                           ; _nrf24l01Service: autosize = 2, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 
      +                          0, argsize = 0, vargsize = 0
  5761  0FFE  317E               	addfsr 1,-2
  5762  0FFF  0008               	return
  5763  1000                     __end_of_nrf24l01Service:	
  5764                           
  5765                           	psect	text16
  5766  0A2A                     __ptext16:	
  5767 ;; *************** function _strcmp *****************
  5768 ;; Defined at:
  5769 ;;		line 33 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\strcmp.c"
  5770 ;; Parameters:    Size  Location     Type
  5771 ;;  s1              1    wreg     PTR const unsigned char 
  5772 ;;		 -> RXPacket.Message(32), RXPacket(33), 
  5773 ;;  s2              1  [STACK] PTR const unsigned char 
  5774 ;;		 -> TXPacket.Message(32), TXPacket(33), 
  5775 ;; Auto vars:     Size  Location     Type
  5776 ;;  s1              1  [STACK] PTR const unsigned char 
  5777 ;;		 -> RXPacket.Message(32), RXPacket(33), 
  5778 ;;  r               1  [STACK] char 
  5779 ;; Return value:  Size  Location     Type
  5780 ;;                  2  [STACK] int 
  5781 ;; Registers used:
  5782 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, btemp+0, btemp+1, btemp+11
  5783 ;; Tracked objects:
  5784 ;;		On entry : 1F/0
  5785 ;;		On exit  : 0/0
  5786 ;;		Unchanged: 0/0
  5787 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5788 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5789 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5790 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5791 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5792 ;;Total ram usage:        0 bytes
  5793 ;; Hardware stack levels used:    1
  5794 ;; Hardware stack levels required when called:    7
  5795 ;; This function calls:
  5796 ;;		Nothing
  5797 ;; This function is called by:
  5798 ;;		_nrf24l01Service
  5799 ;; This function uses a reentrant model
  5800 ;;
  5801                           
  5802                           
  5803                           ;psect for function _strcmp
  5804  0A2A                     _strcmp:	
  5805                           
  5806                           ; autosize = 2, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 1, argsize = 1 var
      +                          gsize = 0, retsize = 0 argfudge = 0
  5807  0A2A  3142               	addfsr 1,2
  5808                           
  5809                           ;incstack = 0
  5810 ;; hardware stack exceeded
  5811                           ; Regs used in _strcmp: [wreg-fsr0h+fsr1l+fsr1h+status,2-btemp+1+btemp+11]
  5812                           ;strcmp@s1 stored from wreg
  5813                           ;stkvar	strcmp@s1 @ sp[(-2)+0]
  5814  0A2B  3FFE               	movwi [-2]fsr1
  5815  0A2C  2A3A               	goto	l3020
  5816  0A2D                     l3022:	
  5817                           
  5818                           ;stkvar	strcmp@s1 @ sp[(-2)+0]
  5819  0A2D  3F7E               	moviw [-2]fsr1
  5820  0A2E  0084               	movwf	4
  5821  0A2F  3001               	movlw	1	; select bank2/3
  5822  0A30  0085               	movwf	5
  5823  0A31  0800               	movf	0,w
  5824  0A32  1903               	btfsc	3,2
  5825  0A33  2A4C               	goto	l3024
  5826                           
  5827                           ;stkvar	strcmp@s1 @ sp[(-2)+0]
  5828  0A34  3F7E               	moviw [-2]fsr1
  5829  0A35  3E01               	addlw	1
  5830  0A36  3FFE               	movwi [-2]fsr1
  5831                           
  5832                           ;stkvar	strcmp@s2 @ sp[(-2)+-1]
  5833  0A37  3F7D               	moviw [-3]fsr1
  5834  0A38  3E01               	addlw	1
  5835  0A39  3FFD               	movwi [-3]fsr1
  5836  0A3A                     l3020:	
  5837                           
  5838                           ;stkvar	strcmp@s2 @ sp[(-2)+-1]
  5839  0A3A  3F7D               	moviw [-3]fsr1
  5840  0A3B  0084               	movwf	4
  5841  0A3C  3001               	movlw	1	; select bank2/3
  5842  0A3D  0085               	movwf	5
  5843  0A3E  0800               	movf	0,w
  5844  0A3F  00FF               	movwf	127
  5845                           
  5846                           ;stkvar	strcmp@s1 @ sp[(-2)+0]
  5847  0A40  3F7E               	moviw [-2]fsr1
  5848  0A41  0084               	movwf	4
  5849  0A42  3001               	movlw	1	; select bank2/3
  5850  0A43  0085               	movwf	5
  5851  0A44  0800               	movf	0,w
  5852  0A45  00F4               	movwf	116
  5853  0A46  087F               	movf	127,w
  5854  0A47  0274               	subwf	116,w
  5855                           
  5856                           ;stkvar	strcmp@r @ sp[(-2)+1]
  5857  0A48  3FFF               	movwi [-1]fsr1
  5858  0A49  0889               	movf	9,f
  5859  0A4A  1903               	btfsc	3,2
  5860  0A4B  2A2D               	goto	l3022
  5861  0A4C                     l3024:	
  5862                           
  5863                           ;stkvar	strcmp@r @ sp[(-2)+1]
  5864  0A4C  3F7F               	moviw [-1]fsr1
  5865  0A4D  00F4               	movwf	116
  5866  0A4E  01F5               	clrf	117
  5867  0A4F  1BF4               	btfsc	116,7
  5868  0A50  03F5               	decf	117,f
  5869                           
  5870                           ; _strcmp: autosize = 2, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 1, argsiz
      +                          e = 1, vargsize = 0
  5871  0A51  317D               	addfsr 1,-3
  5872  0A52  0008               	return
  5873  0A53                     __end_of_strcmp:	
  5874                           
  5875                           	psect	text17
  5876  0C6C                     __ptext17:	
  5877 ;; *************** function _nrf24l01SendTXBuffer *****************
  5878 ;; Defined at:
  5879 ;;		line 236 in file "nrf24l01.c"
  5880 ;; Parameters:    Size  Location     Type
  5881 ;;  packet          1    wreg     PTR struct .
  5882 ;;		 -> TXPacket(33), RXPacket(33), 
  5883 ;; Auto vars:     Size  Location     Type
  5884 ;;  packet          1  [STACK] PTR struct .
  5885 ;;		 -> TXPacket(33), RXPacket(33), 
  5886 ;;  i               1  [STACK] unsigned char 
  5887 ;;  width           1  [STACK] unsigned char 
  5888 ;; Return value:  Size  Location     Type
  5889 ;;                  1    wreg      void 
  5890 ;; Registers used:
  5891 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, btemp+0, btemp+1, btemp+11, pclath
  5892 ;; Tracked objects:
  5893 ;;		On entry : 1C/0
  5894 ;;		On exit  : 1F/0
  5895 ;;		Unchanged: 0/0
  5896 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5897 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5898 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5899 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5900 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5901 ;;Total ram usage:        0 bytes
  5902 ;; Hardware stack levels used:    1
  5903 ;; Hardware stack levels required when called:   10
  5904 ;; This function calls:
  5905 ;;		_nrf24l01SPIEnd
  5906 ;;		_nrf24l01SPISend
  5907 ;;		_nrf24l01SPIStart
  5908 ;;		_nrf24l01SetRXMode
  5909 ;;		_strlen
  5910 ;; This function is called by:
  5911 ;;		_nrf24l01Service
  5912 ;; This function uses a reentrant model
  5913 ;;
  5914                           
  5915                           
  5916                           ;psect for function _nrf24l01SendTXBuffer
  5917  0C6C                     _nrf24l01SendTXBuffer:	
  5918                           
  5919                           ; autosize = 3, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 0, argsize = 0 var
      +                          gsize = 0, retsize = 0 argfudge = 0
  5920  0C6C  3143               	addfsr 1,3
  5921                           
  5922                           ;incstack = 0
  5923 ;; hardware stack exceeded
  5924                           ; Regs used in _nrf24l01SendTXBuffer: [wreg-fsr0h+fsr1l+fsr1h+status,2-btemp+1+btemp+11+
      +                          pclath]
  5925                           ;nrf24l01SendTXBuffer@packet stored from wreg
  5926                           ;stkvar	nrf24l01SendTXBuffer@packet @ sp[(-3)+0]
  5927  0C6D  3FFD               	movwi [-3]fsr1
  5928                           
  5929                           ;nrf24l01.c: 238: lastTXPacket = packet;
  5930                           ;stkvar	nrf24l01SendTXBuffer@packet @ sp[(-3)+0]
  5931  0C6E  3F7D               	moviw [-3]fsr1
  5932  0C6F  0020               	movlb	0	; select bank0
  5933  0C70  00E9               	movwf	_lastTXPacket
  5934                           
  5935                           ;nrf24l01.c: 240: unsigned char i;;nrf24l01.c: 243: nrf24l01SetRXMode(0);
  5936  0C71  3000               	movlw	0
  5937  0C72  318B  236F  318C   	fcall	_nrf24l01SetRXMode
  5938                           
  5939                           ;nrf24l01.c: 246: nrf24l01SPIStart();
  5940  0C75  3188  20B9  318C   	fcall	_nrf24l01SPIStart
  5941                           
  5942                           ;nrf24l01.c: 249: nrf24l01SPISend((unsigned) 0b10110000);
  5943  0C78  30B0               	movlw	176
  5944  0C79  3188  20D0  318C   	fcall	_nrf24l01SPISend
  5945                           
  5946                           ;nrf24l01.c: 251: nrf24l01SPISend(lastTXPacket->packetData.byte);
  5947  0C7C  0020               	movlb	0	; select bank0
  5948  0C7D  0869               	movf	_lastTXPacket,w
  5949  0C7E  0084               	movwf	4
  5950  0C7F  3001               	movlw	1	; select bank2/3
  5951  0C80  3001               	movlw	1	; select bank2/3
  5952  0C81  0085               	movwf	5
  5953  0C82  0800               	movf	0,w
  5954  0C83  3188  20D0  318C   	fcall	_nrf24l01SPISend
  5955                           
  5956                           ;nrf24l01.c: 255: unsigned char width = strlen(lastTXPacket->Message);
  5957  0C86  0020               	movlb	0	; select bank0
  5958  0C87  0869               	movf	_lastTXPacket,w
  5959  0C88  3E01               	addlw	1
  5960  0C89  3189  2189  318C   	fcall	_strlen
  5961  0C8C  0874               	movf	116,w
  5962                           
  5963                           ;stkvar	nrf24l01SendTXBuffer@width @ sp[(-3)+2]
  5964  0C8D  3FFF               	movwi [-1]fsr1
  5965                           
  5966                           ;nrf24l01.c: 257: for (i = 0; i < width; i++) {
  5967                           ;stkvar	nrf24l01SendTXBuffer@i @ sp[(-3)+1]
  5968  0C8E  3000               	movlw	0
  5969  0C8F  3FFE               	movwi [-2]fsr1
  5970  0C90                     l3004:	
  5971                           
  5972                           ;stkvar	nrf24l01SendTXBuffer@i @ sp[(-3)+1]
  5973  0C90  3F7E               	moviw [-2]fsr1
  5974  0C91  00FF               	movwf	127
  5975                           
  5976                           ;stkvar	nrf24l01SendTXBuffer@width @ sp[(-3)+2]
  5977  0C92  3F7F               	moviw [-1]fsr1
  5978  0C93  027F               	subwf	127,w
  5979  0C94  1803               	btfsc	3,0
  5980  0C95  2CA7               	goto	l3006
  5981                           
  5982                           ;nrf24l01.c: 258: nrf24l01SPISend(lastTXPacket->Message[i]);
  5983                           ;stkvar	nrf24l01SendTXBuffer@i @ sp[(-3)+1]
  5984  0C96  3F7E               	moviw [-2]fsr1
  5985  0C97  0020               	movlb	0	; select bank0
  5986  0C98  0769               	addwf	_lastTXPacket,w
  5987  0C99  00FF               	movwf	127
  5988  0C9A  0A7F               	incf	127,w
  5989  0C9B  0084               	movwf	4
  5990  0C9C  3001               	movlw	1	; select bank2/3
  5991  0C9D  3001               	movlw	1	; select bank2/3
  5992  0C9E  0085               	movwf	5
  5993  0C9F  0800               	movf	0,w
  5994  0CA0  3188  20D0  318C   	fcall	_nrf24l01SPISend
  5995                           
  5996                           ;stkvar	nrf24l01SendTXBuffer@i @ sp[(-3)+1]
  5997  0CA3  3F7E               	moviw [-2]fsr1
  5998  0CA4  3E01               	addlw	1
  5999  0CA5  3FFE               	movwi [-2]fsr1
  6000  0CA6  2C90               	goto	l3004
  6001  0CA7                     l3006:	
  6002                           
  6003                           ;nrf24l01.c: 259: };nrf24l01.c: 262: nrf24l01SPIEnd();
  6004  0CA7  3188  20B0  318C   	fcall	_nrf24l01SPIEnd
  6005                           
  6006                           ;nrf24l01.c: 265: PORTAbits.RA0 = 1;
  6007  0CAA  0020               	movlb	0	; select bank0
  6008  0CAB  140C               	bsf	12,0	;volatile
  6009                           
  6010                           ;nrf24l01.c: 266: _delay((unsigned long)((12)*(32000000/4000000.0)));
  6011  0CAC  3020               	movlw	32
  6012  0CAD                     u3607:	
  6013  0CAD  0B89               	decfsz	9,f
  6014  0CAE  2CAD               	goto	u3607
  6015                           
  6016                           ;nrf24l01.c: 267: PORTAbits.RA0 = 0;
  6017  0CAF  0020               	movlb	0	; select bank0
  6018  0CB0  100C               	bcf	12,0	;volatile
  6019                           
  6020                           ; _nrf24l01SendTXBuffer: autosize = 3, savesize = 0, parsavesize = 0, tempsize = 0 parsi
      +                          ze = 0, argsize = 0, vargsize = 0
  6021  0CB1  317D               	addfsr 1,-3
  6022  0CB2  0008               	return
  6023  0CB3                     __end_of_nrf24l01SendTXBuffer:	
  6024                           
  6025                           	psect	text18
  6026  0989                     __ptext18:	
  6027 ;; *************** function _strlen *****************
  6028 ;; Defined at:
  6029 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\strlen.c"
  6030 ;; Parameters:    Size  Location     Type
  6031 ;;  s               1    wreg     PTR const unsigned char 
  6032 ;;		 -> NULL(0), RXPacket.Message(32), TXPacket.Message(32), TXPacket(33), 
  6033 ;;		 -> RXPacket(33), romDataMap(28), 
  6034 ;; Auto vars:     Size  Location     Type
  6035 ;;  s               1  [STACK] PTR const unsigned char 
  6036 ;;		 -> NULL(0), RXPacket.Message(32), TXPacket.Message(32), TXPacket(33), 
  6037 ;;		 -> RXPacket(33), romDataMap(28), 
  6038 ;;  cp              1  [STACK] PTR const unsigned char 
  6039 ;;		 -> NULL(0), RXPacket.Message(32), TXPacket.Message(32), TXPacket(33), 
  6040 ;;		 -> RXPacket(33), romDataMap(28), 
  6041 ;; Return value:  Size  Location     Type
  6042 ;;                  2  [STACK] unsigned int 
  6043 ;; Registers used:
  6044 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, btemp+0, btemp+1, btemp+11
  6045 ;; Tracked objects:
  6046 ;;		On entry : 1F/0
  6047 ;;		On exit  : 0/0
  6048 ;;		Unchanged: 0/0
  6049 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6050 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6051 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6052 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6053 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6054 ;;Total ram usage:        0 bytes
  6055 ;; Hardware stack levels used:    1
  6056 ;; Hardware stack levels required when called:    7
  6057 ;; This function calls:
  6058 ;;		Nothing
  6059 ;; This function is called by:
  6060 ;;		_nrf24l01GetPipe
  6061 ;;		_nrf24l01SendTXBuffer
  6062 ;; This function uses a reentrant model
  6063 ;;
  6064                           
  6065                           
  6066                           ;psect for function _strlen
  6067  0989                     _strlen:	
  6068                           
  6069                           ; autosize = 2, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 0, argsize = 0 var
      +                          gsize = 0, retsize = 0 argfudge = 0
  6070  0989  3142               	addfsr 1,2
  6071                           
  6072                           ;incstack = 0
  6073 ;; hardware stack exceeded
  6074                           ; Regs used in _strlen: [wreg-fsr0h+fsr1l+fsr1h+status,2-btemp+1+btemp+11]
  6075                           ;strlen@s stored from wreg
  6076                           ;stkvar	strlen@s @ sp[(-2)+0]
  6077  098A  3FFE               	movwi [-2]fsr1
  6078                           
  6079                           ;stkvar	strlen@s @ sp[(-2)+0]
  6080  098B  0806               	movf	6,w
  6081  098C  0084               	movwf	4
  6082  098D  0807               	movf	7,w
  6083  098E  0085               	movwf	5
  6084  098F  313E               	addfsr 0,-2
  6085                           
  6086                           ;stkvar	strlen@cp @ sp[(-2)+1]
  6087  0990  3F00               	moviw [0]fsr0
  6088  0991  3FFF               	movwi [-1]fsr1
  6089  0992                     l2600:	
  6090                           
  6091                           ;stkvar	strlen@cp @ sp[(-2)+1]
  6092  0992  3F7F               	moviw [-1]fsr1
  6093  0993  0084               	movwf	4
  6094  0994  3001               	movlw	1	; select bank2/3
  6095  0995  0085               	movwf	5
  6096  0996  0800               	movf	0,w
  6097  0997  1903               	btfsc	3,2
  6098  0998  299D               	goto	l2602
  6099                           
  6100                           ;stkvar	strlen@cp @ sp[(-2)+1]
  6101  0999  3F7F               	moviw [-1]fsr1
  6102  099A  3E01               	addlw	1
  6103  099B  3FFF               	movwi [-1]fsr1
  6104  099C  2992               	goto	l2600
  6105  099D                     l2602:	
  6106                           
  6107                           ;stkvar	strlen@cp @ sp[(-2)+1]
  6108  099D  3F7F               	moviw [-1]fsr1
  6109  099E  00FF               	movwf	127
  6110                           
  6111                           ;stkvar	strlen@s @ sp[(-2)+0]
  6112  099F  3F7E               	moviw [-2]fsr1
  6113  09A0  027F               	subwf	127,w
  6114  09A1  00F4               	movwf	116
  6115  09A2  01F5               	clrf	117
  6116  09A3  1BF4               	btfsc	116,7
  6117  09A4  03F5               	decf	117,f
  6118                           
  6119                           ; _strlen: autosize = 2, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 0, argsiz
      +                          e = 0, vargsize = 0
  6120  09A5  317E               	addfsr 1,-2
  6121  09A6  0008               	return
  6122  09A7                     __end_of_strlen:	
  6123                           
  6124                           	psect	text19
  6125  0B6F                     __ptext19:	
  6126 ;; *************** function _nrf24l01SetRXMode *****************
  6127 ;; Defined at:
  6128 ;;		line 50 in file "nrf24l01.c"
  6129 ;; Parameters:    Size  Location     Type
  6130 ;;  rxMode          1    wreg     unsigned char 
  6131 ;; Auto vars:     Size  Location     Type
  6132 ;;  rxMode          1  [STACK] unsigned char 
  6133 ;; Return value:  Size  Location     Type
  6134 ;;                  1    wreg      void 
  6135 ;; Registers used:
  6136 ;;		wreg, fsr1l, fsr1h, status,2, status,0, btemp+0, btemp+11, pclath
  6137 ;; Tracked objects:
  6138 ;;		On entry : 1F/0
  6139 ;;		On exit  : 0/0
  6140 ;;		Unchanged: 0/0
  6141 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6142 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6143 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6144 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6145 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6146 ;;Total ram usage:        0 bytes
  6147 ;; Hardware stack levels used:    1
  6148 ;; Hardware stack levels required when called:    9
  6149 ;; This function calls:
  6150 ;;		_nrf24l01Send
  6151 ;; This function is called by:
  6152 ;;		_nrf24l01ISR
  6153 ;;		_nrf24l01SendTXBuffer
  6154 ;;		_nrf24l01Service
  6155 ;; This function uses a reentrant model
  6156 ;;
  6157                           
  6158                           
  6159                           ;psect for function _nrf24l01SetRXMode
  6160  0B6F                     _nrf24l01SetRXMode:	
  6161                           
  6162                           ; autosize = 1, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 0, argsize = 0 var
      +                          gsize = 0, retsize = 0 argfudge = 0
  6163  0B6F  3141               	addfsr 1,1
  6164                           
  6165                           ;incstack = 0
  6166 ;; hardware stack exceeded
  6167                           ; Regs used in _nrf24l01SetRXMode: [wreg+fsr1l+fsr1h+status,2-btemp+0+btemp+11+pclath]
  6168                           ;nrf24l01SetRXMode@rxMode stored from wreg
  6169                           ;stkvar	nrf24l01SetRXMode@rxMode @ sp[(-1)+0]
  6170  0B70  3FFF               	movwi [-1]fsr1
  6171                           
  6172                           ;nrf24l01.c: 53: if (rxMode){
  6173                           ;stkvar	nrf24l01SetRXMode@rxMode @ sp[(-1)+0]
  6174  0B71  3F7F               	moviw [-1]fsr1
  6175  0B72  1903               	btfsc	3,2
  6176  0B73  2B79               	goto	l2612
  6177                           
  6178                           ;nrf24l01.c: 54: if (status.TX == 2){
  6179  0B74  3002               	movlw	2
  6180  0B75  0020               	movlb	0	; select bank0
  6181  0B76  0664               	xorwf	_status,w	;volatile
  6182  0B77  1903               	btfsc	3,2
  6183  0B78  2BA8               	goto	l253
  6184  0B79                     l2612:	
  6185                           
  6186                           ;nrf24l01.c: 56: };nrf24l01.c: 57: };nrf24l01.c: 60: if (!rxMode){
  6187                           ;stkvar	nrf24l01SetRXMode@rxMode @ sp[(-1)+0]
  6188  0B79  3F7F               	moviw [-1]fsr1
  6189  0B7A  1D03               	btfss	3,2
  6190  0B7B  2B81               	goto	l2618
  6191                           
  6192                           ;nrf24l01.c: 61: if (status.TX == 4){
  6193  0B7C  3004               	movlw	4
  6194  0B7D  0020               	movlb	0	; select bank0
  6195  0B7E  0664               	xorwf	_status,w	;volatile
  6196  0B7F  1903               	btfsc	3,2
  6197  0B80  2BA8               	goto	l253
  6198  0B81                     l2618:	
  6199                           
  6200                           ;nrf24l01.c: 63: };nrf24l01.c: 64: };nrf24l01.c: 70: if (status.configRegister.PRIM_RX !
      +                          = rxMode){
  6201                           ;stkvar	nrf24l01SetRXMode@rxMode @ sp[(-1)+0]
  6202  0B81  3F7F               	moviw [-1]fsr1
  6203  0B82  00FF               	movwf	127
  6204  0B83  0020               	movlb	0	; select bank0
  6205  0B84  0867               	movf	_status+3,w	;volatile
  6206  0B85  3901               	andlw	1
  6207  0B86  067F               	xorwf	127,w
  6208  0B87  1903               	skipnz
  6209  0B88  2BA8               	goto	l253
  6210                           
  6211                           ;nrf24l01.c: 73: PORTAbits.RA0 = 0;
  6212  0B89  100C               	bcf	12,0	;volatile
  6213                           
  6214                           ;nrf24l01.c: 74: _delay((unsigned long)((120)*(32000000/4000000.0)));
  6215  0B8A  30C0               	movlw	192
  6216  0B8B                     u3617:	
  6217  0B8B  3200               	nop2
  6218  0B8C  0B89               	decfsz	9,f
  6219  0B8D  2B8B               	goto	u3617
  6220                           
  6221                           ;nrf24l01.c: 77: status.configRegister.PRIM_RX = rxMode;
  6222                           ;stkvar	nrf24l01SetRXMode@rxMode @ sp[(-1)+0]
  6223  0B8E  3F7F               	moviw [-1]fsr1
  6224  0B8F  3901               	andlw	1
  6225  0B90  0020               	movlb	0	; select bank0
  6226  0B91  1D03               	skipz
  6227  0B92  1467               	bsf	_status+3,0	;volatile
  6228  0B93  1903               	skipnz
  6229  0B94  1067               	bcf	_status+3,0	;volatile
  6230                           
  6231                           ;nrf24l01.c: 78: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x00, status.configRegi
      +                          ster.byte);
  6232  0B95  0867               	movf	_status+3,w	;volatile
  6233  0B96  001E               	movwi fsr1++
  6234  0B97  3020               	movlw	32
  6235  0B98  3188  20F0  318B   	fcall	_nrf24l01Send
  6236                           
  6237                           ;nrf24l01.c: 81: _delay((unsigned long)((120)*(32000000/4000000.0)));
  6238  0B9B  30C0               	movlw	192
  6239  0B9C                     u3627:	
  6240  0B9C  3200               	nop2
  6241  0B9D  0B89               	decfsz	9,f
  6242  0B9E  2B9C               	goto	u3627
  6243                           
  6244                           ;nrf24l01.c: 84: if (rxMode){
  6245                           ;stkvar	nrf24l01SetRXMode@rxMode @ sp[(-1)+0]
  6246  0B9F  3F7F               	moviw [-1]fsr1
  6247  0BA0  1903               	btfsc	3,2
  6248  0BA1  2BA8               	goto	l253
  6249                           
  6250                           ;nrf24l01.c: 85: PORTAbits.RA0 = 1;
  6251  0BA2  0020               	movlb	0	; select bank0
  6252  0BA3  140C               	bsf	12,0	;volatile
  6253                           
  6254                           ;nrf24l01.c: 86: _delay((unsigned long)((120)*(32000000/4000000.0)));
  6255  0BA4  30C0               	movlw	192
  6256  0BA5                     u3637:	
  6257  0BA5  3200               	nop2
  6258  0BA6  0B89               	decfsz	9,f
  6259  0BA7  2BA5               	goto	u3637
  6260  0BA8                     l253:	
  6261                           
  6262                           ; _nrf24l01SetRXMode: autosize = 1, savesize = 0, parsavesize = 0, tempsize = 0 parsize 
      +                          = 0, argsize = 0, vargsize = 0
  6263  0BA8  317F               	addfsr 1,-1
  6264  0BA9  0008               	return
  6265  0BAA                     __end_of_nrf24l01SetRXMode:	
  6266                           
  6267                           	psect	text20
  6268  08F0                     __ptext20:	
  6269 ;; *************** function _nrf24l01Send *****************
  6270 ;; Defined at:
  6271 ;;		line 11 in file "nrf24l01.c"
  6272 ;; Parameters:    Size  Location     Type
  6273 ;;  command         1    wreg     unsigned char 
  6274 ;;  data            1  [STACK] unsigned char 
  6275 ;; Auto vars:     Size  Location     Type
  6276 ;;  command         1  [STACK] unsigned char 
  6277 ;; Return value:  Size  Location     Type
  6278 ;;                  1    wreg      unsigned char 
  6279 ;; Registers used:
  6280 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath
  6281 ;; Tracked objects:
  6282 ;;		On entry : 0/0
  6283 ;;		On exit  : 1F/1
  6284 ;;		Unchanged: 0/0
  6285 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6286 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6287 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6288 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6289 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6290 ;;Total ram usage:        0 bytes
  6291 ;; Hardware stack levels used:    1
  6292 ;; Hardware stack levels required when called:    8
  6293 ;; This function calls:
  6294 ;;		_nrf24l01SPIEnd
  6295 ;;		_nrf24l01SPISend
  6296 ;;		_nrf24l01SPIStart
  6297 ;; This function is called by:
  6298 ;;		_nrf24l01SetRXMode
  6299 ;;		_nrf24l01SetRXPipe
  6300 ;;		_nrf24l01ISR
  6301 ;;		_nrf24l01Service
  6302 ;;		_nrf24l01InitRegisters
  6303 ;;		_nrf24l01ChangeTXPower
  6304 ;; This function uses a reentrant model
  6305 ;;
  6306                           
  6307                           
  6308                           ;psect for function _nrf24l01Send
  6309  08F0                     _nrf24l01Send:	
  6310                           
  6311                           ; autosize = 1, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 1, argsize = 1 var
      +                          gsize = 0, retsize = 0 argfudge = 0
  6312  08F0  3141               	addfsr 1,1
  6313                           
  6314                           ;incstack = 0
  6315 ;; hardware stack exceeded
  6316                           ; Regs used in _nrf24l01Send: [wreg+fsr1l+fsr1h+status,2+status,0+pclath]
  6317                           ;nrf24l01Send@command stored from wreg
  6318                           ;stkvar	nrf24l01Send@command @ sp[(-1)+0]
  6319  08F1  3FFF               	movwi [-1]fsr1
  6320                           
  6321                           ;nrf24l01.c: 14: nrf24l01SPIStart();
  6322  08F2  3188  20B9  3188   	fcall	_nrf24l01SPIStart
  6323                           
  6324                           ;nrf24l01.c: 17: nrf24l01SPISend(command);
  6325                           ;stkvar	nrf24l01Send@command @ sp[(-1)+0]
  6326  08F5  3F7F               	moviw [-1]fsr1
  6327  08F6  3188  20D0  3188   	fcall	_nrf24l01SPISend
  6328                           
  6329                           ;nrf24l01.c: 20: data = nrf24l01SPISend(data);
  6330                           ;stkvar	nrf24l01Send@data @ sp[(-1)+-1]
  6331  08F9  3F7E               	moviw [-2]fsr1
  6332  08FA  3188  20D0  3188   	fcall	_nrf24l01SPISend
  6333                           
  6334                           ;stkvar	nrf24l01Send@data @ sp[(-1)+-1]
  6335  08FD  3FFE               	movwi [-2]fsr1
  6336                           
  6337                           ;nrf24l01.c: 23: nrf24l01SPIEnd();
  6338  08FE  3188  20B0         	fcall	_nrf24l01SPIEnd
  6339                           
  6340                           ;nrf24l01.c: 25: return data;
  6341                           ;stkvar	nrf24l01Send@data @ sp[(-1)+-1]
  6342  0900  3F7E               	moviw [-2]fsr1
  6343                           
  6344                           ; _nrf24l01Send: autosize = 1, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 1, 
      +                          argsize = 1, vargsize = 0
  6345  0901  317E               	addfsr 1,-2
  6346  0902  0008               	return
  6347  0903                     __end_of_nrf24l01Send:	
  6348                           
  6349                           	psect	text21
  6350  08B9                     __ptext21:	
  6351 ;; *************** function _nrf24l01SPIStart *****************
  6352 ;; Defined at:
  6353 ;;		line 68 in file "interface.c"
  6354 ;; Parameters:    Size  Location     Type
  6355 ;;		None
  6356 ;; Auto vars:     Size  Location     Type
  6357 ;;		None
  6358 ;; Return value:  Size  Location     Type
  6359 ;;                  1    wreg      void 
  6360 ;; Registers used:
  6361 ;;		wreg
  6362 ;; Tracked objects:
  6363 ;;		On entry : 0/0
  6364 ;;		On exit  : 0/0
  6365 ;;		Unchanged: 0/0
  6366 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6367 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6368 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6369 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6370 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6371 ;;Total ram usage:        0 bytes
  6372 ;; Hardware stack levels used:    1
  6373 ;; Hardware stack levels required when called:    7
  6374 ;; This function calls:
  6375 ;;		Nothing
  6376 ;; This function is called by:
  6377 ;;		_nrf24l01Send
  6378 ;;		_nrf24l01SetTXPipe
  6379 ;;		_nrf24l01SendTXBuffer
  6380 ;;		_nrf24l01Service
  6381 ;;		_nrf24l01InitRegisters
  6382 ;; This function uses a reentrant model
  6383 ;;
  6384                           
  6385                           
  6386                           ;psect for function _nrf24l01SPIStart
  6387  08B9                     _nrf24l01SPIStart:	
  6388                           
  6389                           ;interface.c: 69: PIE0bits.INTE = 0;
  6390                           
  6391                           ; autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 0, argsize = 0 var
      +                          gsize = 0, retsize = 0 argfudge = 0
  6392                           ;incstack = 0
  6393 ;; hardware stack exceeded
  6394                           ; Regs used in _nrf24l01SPIStart: [wreg]
  6395  08B9  0021               	movlb	1	; select bank1
  6396  08BA  1010               	bcf	16,0	;volatile
  6397                           
  6398                           ;interface.c: 70: PORTAbits.RA1 = 0;
  6399  08BB  0020               	movlb	0	; select bank0
  6400  08BC  108C               	bcf	12,1	;volatile
  6401                           
  6402                           ;interface.c: 71: _delay((unsigned long)((10)*(32000000/4000000.0)));
  6403  08BD  301A               	movlw	26
  6404  08BE                     u3647:	
  6405  08BE  0B89               	decfsz	9,f
  6406  08BF  28BE               	goto	u3647
  6407  08C0  3200               	nop2
  6408                           
  6409                           ; _nrf24l01SPIStart: autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize =
      +                           0, argsize = 0, vargsize = 0
  6410  08C1  0008               	return
  6411  08C2                     __end_of_nrf24l01SPIStart:	
  6412                           
  6413                           	psect	text22
  6414  08D0                     __ptext22:	
  6415 ;; *************** function _nrf24l01SPISend *****************
  6416 ;; Defined at:
  6417 ;;		line 56 in file "interface.c"
  6418 ;; Parameters:    Size  Location     Type
  6419 ;;  data            1    wreg     unsigned char 
  6420 ;; Auto vars:     Size  Location     Type
  6421 ;;  data            1  [STACK] unsigned char 
  6422 ;; Return value:  Size  Location     Type
  6423 ;;                  1    wreg      unsigned char 
  6424 ;; Registers used:
  6425 ;;		wreg, fsr1l, fsr1h
  6426 ;; Tracked objects:
  6427 ;;		On entry : 0/0
  6428 ;;		On exit  : 1F/4
  6429 ;;		Unchanged: 0/0
  6430 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6431 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6432 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6433 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6434 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6435 ;;Total ram usage:        0 bytes
  6436 ;; Hardware stack levels used:    1
  6437 ;; Hardware stack levels required when called:    7
  6438 ;; This function calls:
  6439 ;;		Nothing
  6440 ;; This function is called by:
  6441 ;;		_nrf24l01Send
  6442 ;;		_nrf24l01SetTXPipe
  6443 ;;		_nrf24l01SendTXBuffer
  6444 ;;		_nrf24l01Service
  6445 ;;		_nrf24l01InitRegisters
  6446 ;; This function uses a reentrant model
  6447 ;;
  6448                           
  6449                           
  6450                           ;psect for function _nrf24l01SPISend
  6451  08D0                     _nrf24l01SPISend:	
  6452                           
  6453                           ; autosize = 1, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 0, argsize = 0 var
      +                          gsize = 0, retsize = 0 argfudge = 0
  6454  08D0  3141               	addfsr 1,1
  6455                           
  6456                           ;incstack = 0
  6457 ;; hardware stack exceeded
  6458                           ; Regs used in _nrf24l01SPISend: [wreg+fsr1l+fsr1h]
  6459                           ;nrf24l01SPISend@data stored from wreg
  6460                           ;stkvar	nrf24l01SPISend@data @ sp[(-1)+0]
  6461  08D1  3FFF               	movwi [-1]fsr1
  6462                           
  6463                           ;interface.c: 57: SSP1BUF = data;
  6464                           ;stkvar	nrf24l01SPISend@data @ sp[(-1)+0]
  6465  08D2  3F7F               	moviw [-1]fsr1
  6466  08D3  0024               	movlb	4	; select bank4
  6467  08D4  0091               	movwf	17	;volatile
  6468                           
  6469                           ;interface.c: 59: PORTCbits.RC4 = 1;
  6470  08D5  0020               	movlb	0	; select bank0
  6471  08D6  160E               	bsf	14,4	;volatile
  6472  08D7                     l47:	
  6473                           ;interface.c: 61: while (!SSP1STATbits.BF){
  6474                           
  6475  08D7  0024               	movlb	4	; select bank4
  6476  08D8  1814               	btfsc	20,0	;volatile
  6477  08D9  28DC               	goto	l2358
  6478                           
  6479                           ;interface.c: 62: __nop();
  6480  08DA  0000               	nop
  6481  08DB  28D7               	goto	l47
  6482  08DC                     l2358:	
  6483                           
  6484                           ;interface.c: 63: };interface.c: 65: return SSP1BUF;
  6485  08DC  0811               	movf	17,w	;volatile
  6486                           
  6487                           ; _nrf24l01SPISend: autosize = 1, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 
      +                          0, argsize = 0, vargsize = 0
  6488  08DD  317F               	addfsr 1,-1
  6489  08DE  0008               	return
  6490  08DF                     __end_of_nrf24l01SPISend:	
  6491                           
  6492                           	psect	text23
  6493  08B0                     __ptext23:	
  6494 ;; *************** function _nrf24l01SPIEnd *****************
  6495 ;; Defined at:
  6496 ;;		line 74 in file "interface.c"
  6497 ;; Parameters:    Size  Location     Type
  6498 ;;		None
  6499 ;; Auto vars:     Size  Location     Type
  6500 ;;		None
  6501 ;; Return value:  Size  Location     Type
  6502 ;;                  1    wreg      void 
  6503 ;; Registers used:
  6504 ;;		wreg
  6505 ;; Tracked objects:
  6506 ;;		On entry : 0/0
  6507 ;;		On exit  : 1F/1
  6508 ;;		Unchanged: 0/0
  6509 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6510 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6511 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6512 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6513 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6514 ;;Total ram usage:        0 bytes
  6515 ;; Hardware stack levels used:    1
  6516 ;; Hardware stack levels required when called:    7
  6517 ;; This function calls:
  6518 ;;		Nothing
  6519 ;; This function is called by:
  6520 ;;		_nrf24l01Send
  6521 ;;		_nrf24l01SetTXPipe
  6522 ;;		_nrf24l01SendTXBuffer
  6523 ;;		_nrf24l01Service
  6524 ;;		_nrf24l01InitRegisters
  6525 ;; This function uses a reentrant model
  6526 ;;
  6527                           
  6528                           
  6529                           ;psect for function _nrf24l01SPIEnd
  6530  08B0                     _nrf24l01SPIEnd:	
  6531                           
  6532                           ;interface.c: 75: _delay((unsigned long)((10)*(32000000/4000000.0)));
  6533                           
  6534                           ; autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 0, argsize = 0 var
      +                          gsize = 0, retsize = 0 argfudge = 0
  6535                           ;incstack = 0
  6536 ;; hardware stack exceeded
  6537                           ; Regs used in _nrf24l01SPIEnd: [wreg]
  6538  08B0  301A               	movlw	26
  6539  08B1                     u3657:	
  6540  08B1  0B89               	decfsz	9,f
  6541  08B2  28B1               	goto	u3657
  6542  08B3  3200               	nop2
  6543                           
  6544                           ;interface.c: 76: PORTAbits.RA1 = 1;
  6545  08B4  0020               	movlb	0	; select bank0
  6546  08B5  148C               	bsf	12,1	;volatile
  6547                           
  6548                           ;interface.c: 77: PIE0bits.INTE = 1;
  6549  08B6  0021               	movlb	1	; select bank1
  6550  08B7  1410               	bsf	16,0	;volatile
  6551                           
  6552                           ; _nrf24l01SPIEnd: autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 0
      +                          , argsize = 0, vargsize = 0
  6553  08B8  0008               	return
  6554  08B9                     __end_of_nrf24l01SPIEnd:	
  6555                           
  6556                           	psect	text24
  6557  0B09                     __ptext24:	
  6558 ;; *************** function _memset *****************
  6559 ;; Defined at:
  6560 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\memset.c"
  6561 ;; Parameters:    Size  Location     Type
  6562 ;;  p1              2  [STACK] PTR void 
  6563 ;;		 -> RXPacket(33), main@packet(33), loop@packet(33), 
  6564 ;;  c               2  [STACK] int 
  6565 ;;  n               2  [STACK] unsigned int 
  6566 ;; Auto vars:     Size  Location     Type
  6567 ;;  p               2  [STACK] PTR unsigned char 
  6568 ;;		 -> RXPacket(33), main@packet(33), loop@packet(33), 
  6569 ;; Return value:  Size  Location     Type
  6570 ;;                  2  [STACK] PTR void 
  6571 ;; Registers used:
  6572 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, btemp+0, btemp+8, btemp+9, btemp+11
  6573 ;; Tracked objects:
  6574 ;;		On entry : 1E/1
  6575 ;;		On exit  : 0/0
  6576 ;;		Unchanged: 0/0
  6577 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6578 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6579 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6580 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6581 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6582 ;;Total ram usage:        0 bytes
  6583 ;; Hardware stack levels used:    1
  6584 ;; Hardware stack levels required when called:    7
  6585 ;; This function calls:
  6586 ;;		Nothing
  6587 ;; This function is called by:
  6588 ;;		_sendMessage
  6589 ;;		_nrf24l01Service
  6590 ;; This function uses a reentrant model
  6591 ;;
  6592                           
  6593                           
  6594                           ;psect for function _memset
  6595  0B09                     _memset:	
  6596                           
  6597                           ; autosize = 2, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 6, argsize = 6 var
      +                          gsize = 0, retsize = 0 argfudge = 0
  6598  0B09  3142               	addfsr 1,2
  6599                           
  6600                           ;stkvar	memset@p1 @ sp[(-2)+-2]
  6601                           
  6602                           ;incstack = 0
  6603 ;; hardware stack exceeded
  6604                           ; Regs used in _memset: [wreg-fsr0h+fsr1l+fsr1h+status,2-btemp+0+btemp+8+btemp+9+btemp+1
      +                          1]
  6605  0B0A  0806               	movf	6,w
  6606  0B0B  0084               	movwf	4
  6607  0B0C  0807               	movf	7,w
  6608  0B0D  0085               	movwf	5
  6609  0B0E  313C               	addfsr 0,-4
  6610                           
  6611                           ;stkvar	memset@p @ sp[(-2)+0]
  6612  0B0F  3F00               	moviw [0]fsr0
  6613  0B10  3FFE               	movwi [-2]fsr1
  6614  0B11  3F01               	moviw [1]fsr0
  6615  0B12  3FFF               	movwi [-1]fsr1
  6616  0B13                     l2916:	
  6617                           
  6618                           ;stkvar	memset@n @ sp[(-2)+-6]
  6619  0B13  3F78               	moviw [-8]fsr1
  6620  0B14  00F4               	movwf	116
  6621  0B15  3001               	movlw	1
  6622  0B16  0274               	subwf	116,w
  6623  0B17  3FF8               	movwi [-8]fsr1
  6624  0B18  3F79               	moviw [-7]fsr1
  6625  0B19  00F4               	movwf	116
  6626  0B1A  3000               	movlw	0
  6627  0B1B  3B74               	subwfb	116,w
  6628  0B1C  3FF9               	movwi [-7]fsr1
  6629  0B1D  3F78               	moviw [-8]fsr1
  6630  0B1E  3AFF               	xorlw	255
  6631  0B1F  00F4               	movwf	116
  6632  0B20  3F79               	moviw [-7]fsr1
  6633  0B21  3AFF               	xorlw	255
  6634  0B22  04F4               	iorwf	116,f
  6635  0B23  1903               	btfsc	3,2
  6636  0B24  2B39               	goto	l951
  6637                           
  6638                           ;stkvar	memset@c @ sp[(-2)+-4]
  6639  0B25  3F7A               	moviw [-6]fsr1
  6640  0B26  00FF               	movwf	127
  6641                           
  6642                           ;stkvar	memset@p @ sp[(-2)+0]
  6643  0B27  3F7E               	moviw [-2]fsr1
  6644  0B28  00FC               	movwf	124
  6645  0B29  3F7F               	moviw [-1]fsr1
  6646  0B2A  00FD               	movwf	125
  6647  0B2B  087C               	movf	124,w
  6648  0B2C  0084               	movwf	4
  6649  0B2D  087D               	movf	125,w
  6650  0B2E  0085               	movwf	5
  6651  0B2F  087F               	movf	127,w
  6652  0B30  0080               	movwf	0
  6653                           
  6654                           ;stkvar	memset@p @ sp[(-2)+0]
  6655  0B31  3F7E               	moviw [-2]fsr1
  6656  0B32  3E01               	addlw	1
  6657  0B33  3FFE               	movwi [-2]fsr1
  6658  0B34  01F4               	clrf	116
  6659  0B35  3F7F               	moviw [-1]fsr1
  6660  0B36  3D74               	addwfc	116,w
  6661  0B37  3FFF               	movwi [-1]fsr1
  6662  0B38  2B13               	goto	l2916
  6663  0B39                     l951:	
  6664                           
  6665                           ; _memset: autosize = 2, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 6, argsiz
      +                          e = 6, vargsize = 0
  6666  0B39  3178               	addfsr 1,-8
  6667  0B3A  0008               	return
  6668  0B3B                     __end_of_memset:	
  6669                           
  6670                           	psect	text25
  6671  0428                     __ptext25:	
  6672 ;; *************** function _ftoa *****************
  6673 ;; Defined at:
  6674 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\ftoa.c"
  6675 ;; Parameters:    Size  Location     Type
  6676 ;;  f               3    0[BANK1 ] float 
  6677 ;;  status          1    3[BANK1 ] PTR int 
  6678 ;;		 -> sendMessage@ftoaStatus(2), 
  6679 ;; Auto vars:     Size  Location     Type
  6680 ;;  l               4    8[BANK1 ] unsigned long 
  6681 ;;  rem             4    4[BANK1 ] unsigned long 
  6682 ;;  cp              1   12[BANK1 ] PTR unsigned char 
  6683 ;;		 -> ftoa@buf(17), 
  6684 ;; Return value:  Size  Location     Type
  6685 ;;                  1    wreg      PTR unsigned char 
  6686 ;; Registers used:
  6687 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+8, btemp+9, btemp+10, btemp+11, pclath, cstack
  6688 ;; Tracked objects:
  6689 ;;		On entry : 0/0
  6690 ;;		On exit  : 0/0
  6691 ;;		Unchanged: 0/0
  6692 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6693 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  6694 ;;      Locals:         0       0       9       0       0       0       0       0       0       0       0       0       
      +0       0
  6695 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6696 ;;      Totals:         0       0      13       0       0       0       0       0       0       0       0       0       
      +0       0
  6697 ;;Total ram usage:       13 bytes
  6698 ;; Hardware stack levels used:    1
  6699 ;; Hardware stack levels required when called:   10
  6700 ;; This function calls:
  6701 ;;		___ftge
  6702 ;;		___ftmul
  6703 ;;		___ftneg
  6704 ;;		___ftsub
  6705 ;;		___fttol
  6706 ;;		___lltoft
  6707 ;;		_sprintf
  6708 ;; This function is called by:
  6709 ;;		_sendMessage
  6710 ;; This function uses a non-reentrant model
  6711 ;;
  6712                           
  6713                           
  6714                           ;psect for function _ftoa
  6715  0428                     _ftoa:	
  6716                           
  6717                           ;incstack = 0
  6718                           ; Regs used in _ftoa: [wreg-fsr0h+status,2+status,0+btemp+8-btemp+11+pclath+cstack]
  6719  0428  303C               	movlw	(low (ftoa@buf| (0+256)))& (0+255)
  6720  0429  00FF               	movwf	127
  6721  042A  087F               	movf	127,w
  6722  042B  0021               	movlb	1	; select bank1
  6723  042C  00AC               	movwf	ftoa@cp^(0+128)
  6724  042D  0820               	movf	ftoa@f^(0+128),w
  6725  042E  0020               	movlb	0	; select bank0
  6726  042F  00A6               	movwf	___ftge@ff1
  6727  0430  0021               	movlb	1	; select bank1
  6728  0431  0821               	movf	(ftoa@f+1)^(0+128),w
  6729  0432  0020               	movlb	0	; select bank0
  6730  0433  00A7               	movwf	___ftge@ff1+1
  6731  0434  0021               	movlb	1	; select bank1
  6732  0435  0822               	movf	(ftoa@f+2)^(0+128),w
  6733  0436  0020               	movlb	0	; select bank0
  6734  0437  00A8               	movwf	___ftge@ff1+2
  6735  0438  3000               	movlw	0
  6736  0439  00A9               	movwf	___ftge@ff2
  6737  043A  3000               	movlw	0
  6738  043B  00AA               	movwf	___ftge@ff2+1
  6739  043C  3000               	movlw	0
  6740  043D  00AB               	movwf	___ftge@ff2+2
  6741  043E  318B  23AA  3184   	fcall	___ftge
  6742  0441  1803               	btfsc	3,0
  6743  0442  2C6A               	goto	l3618
  6744  0443  302D               	movlw	45
  6745  0444  00FF               	movwf	127
  6746  0445  0021               	movlb	1	; select bank1
  6747  0446  082C               	movf	ftoa@cp^(0+128),w
  6748  0447  0084               	movwf	4
  6749  0448  3001               	movlw	1	; select bank2/3
  6750  0449  0085               	movwf	5
  6751  044A  087F               	movf	127,w
  6752  044B  0080               	movwf	0
  6753  044C  3001               	movlw	1
  6754  044D  00FF               	movwf	127
  6755  044E  087F               	movf	127,w
  6756  044F  07AC               	addwf	ftoa@cp^(0+128),f
  6757  0450  0820               	movf	ftoa@f^(0+128),w
  6758  0451  0020               	movlb	0	; select bank0
  6759  0452  00CC               	movwf	___ftneg@f1
  6760  0453  0021               	movlb	1	; select bank1
  6761  0454  0821               	movf	(ftoa@f+1)^(0+128),w
  6762  0455  0020               	movlb	0	; select bank0
  6763  0456  00CD               	movwf	___ftneg@f1+1
  6764  0457  0021               	movlb	1	; select bank1
  6765  0458  0822               	movf	(ftoa@f+2)^(0+128),w
  6766  0459  0020               	movlb	0	; select bank0
  6767  045A  00CE               	movwf	___ftneg@f1+2
  6768  045B  3188  20A7  3184   	fcall	___ftneg
  6769  045E  0020               	movlb	0	; select bank0
  6770  045F  084C               	movf	?___ftneg,w
  6771  0460  0021               	movlb	1	; select bank1
  6772  0461  00A0               	movwf	ftoa@f^(0+128)
  6773  0462  0020               	movlb	0	; select bank0
  6774  0463  084D               	movf	?___ftneg+1,w
  6775  0464  0021               	movlb	1	; select bank1
  6776  0465  00A1               	movwf	(ftoa@f+1)^(0+128)
  6777  0466  0020               	movlb	0	; select bank0
  6778  0467  084E               	movf	?___ftneg+2,w
  6779  0468  0021               	movlb	1	; select bank1
  6780  0469  00A2               	movwf	(ftoa@f+2)^(0+128)
  6781  046A                     l3618:	
  6782  046A  0021               	movlb	1	; select bank1
  6783  046B  0820               	movf	ftoa@f^(0+128),w
  6784  046C  0020               	movlb	0	; select bank0
  6785  046D  00D8               	movwf	___fttol@f1
  6786  046E  0021               	movlb	1	; select bank1
  6787  046F  0821               	movf	(ftoa@f+1)^(0+128),w
  6788  0470  0020               	movlb	0	; select bank0
  6789  0471  00D9               	movwf	___fttol@f1+1
  6790  0472  0021               	movlb	1	; select bank1
  6791  0473  0822               	movf	(ftoa@f+2)^(0+128),w
  6792  0474  0020               	movlb	0	; select bank0
  6793  0475  00DA               	movwf	___fttol@f1+2
  6794  0476  318E  263A  3184   	fcall	___fttol
  6795  0479  0020               	movlb	0	; select bank0
  6796  047A  085B               	movf	?___fttol+3,w
  6797  047B  0021               	movlb	1	; select bank1
  6798  047C  00AB               	movwf	(ftoa@l+3)^(0+128)
  6799  047D  0020               	movlb	0	; select bank0
  6800  047E  085A               	movf	?___fttol+2,w
  6801  047F  0021               	movlb	1	; select bank1
  6802  0480  00AA               	movwf	(ftoa@l+2)^(0+128)
  6803  0481  0020               	movlb	0	; select bank0
  6804  0482  0859               	movf	?___fttol+1,w
  6805  0483  0021               	movlb	1	; select bank1
  6806  0484  00A9               	movwf	(ftoa@l+1)^(0+128)
  6807  0485  0020               	movlb	0	; select bank0
  6808  0486  0858               	movf	?___fttol,w
  6809  0487  0021               	movlb	1	; select bank1
  6810  0488  00A8               	movwf	ftoa@l^(0+128)
  6811  0489  082B               	movf	(ftoa@l+3)^(0+128),w
  6812  048A  00F3               	movwf	___lltoft@c+3
  6813  048B  082A               	movf	(ftoa@l+2)^(0+128),w
  6814  048C  00F2               	movwf	___lltoft@c+2
  6815  048D  0829               	movf	(ftoa@l+1)^(0+128),w
  6816  048E  00F1               	movwf	___lltoft@c+1
  6817  048F  0828               	movf	ftoa@l^(0+128),w
  6818  0490  00F0               	movwf	___lltoft@c
  6819  0491  318A  2253  3184   	fcall	___lltoft
  6820  0494  0870               	movf	?___lltoft,w
  6821  0495  0020               	movlb	0	; select bank0
  6822  0496  00B5               	movwf	___ftsub@f2
  6823  0497  0871               	movf	?___lltoft+1,w
  6824  0498  00B6               	movwf	___ftsub@f2+1
  6825  0499  0872               	movf	?___lltoft+2,w
  6826  049A  00B7               	movwf	___ftsub@f2+2
  6827  049B  0021               	movlb	1	; select bank1
  6828  049C  0820               	movf	ftoa@f^(0+128),w
  6829  049D  0020               	movlb	0	; select bank0
  6830  049E  00B8               	movwf	___ftsub@f1
  6831  049F  0021               	movlb	1	; select bank1
  6832  04A0  0821               	movf	(ftoa@f+1)^(0+128),w
  6833  04A1  0020               	movlb	0	; select bank0
  6834  04A2  00B9               	movwf	___ftsub@f1+1
  6835  04A3  0021               	movlb	1	; select bank1
  6836  04A4  0822               	movf	(ftoa@f+2)^(0+128),w
  6837  04A5  0020               	movlb	0	; select bank0
  6838  04A6  00BA               	movwf	___ftsub@f1+2
  6839  04A7  3189  214D  3184   	fcall	___ftsub
  6840  04AA  0020               	movlb	0	; select bank0
  6841  04AB  0835               	movf	?___ftsub,w
  6842  04AC  0021               	movlb	1	; select bank1
  6843  04AD  00A0               	movwf	ftoa@f^(0+128)
  6844  04AE  0020               	movlb	0	; select bank0
  6845  04AF  0836               	movf	?___ftsub+1,w
  6846  04B0  0021               	movlb	1	; select bank1
  6847  04B1  00A1               	movwf	(ftoa@f+1)^(0+128)
  6848  04B2  0020               	movlb	0	; select bank0
  6849  04B3  0837               	movf	?___ftsub+2,w
  6850  04B4  0021               	movlb	1	; select bank1
  6851  04B5  00A2               	movwf	(ftoa@f+2)^(0+128)
  6852  04B6  0820               	movf	ftoa@f^(0+128),w
  6853  04B7  0020               	movlb	0	; select bank0
  6854  04B8  00CF               	movwf	___ftmul@f2
  6855  04B9  0021               	movlb	1	; select bank1
  6856  04BA  0821               	movf	(ftoa@f+1)^(0+128),w
  6857  04BB  0020               	movlb	0	; select bank0
  6858  04BC  00D0               	movwf	___ftmul@f2+1
  6859  04BD  0021               	movlb	1	; select bank1
  6860  04BE  0822               	movf	(ftoa@f+2)^(0+128),w
  6861  04BF  0020               	movlb	0	; select bank0
  6862  04C0  00D1               	movwf	___ftmul@f2+2
  6863  04C1  3024               	movlw	36
  6864  04C2  00CC               	movwf	___ftmul@f1
  6865  04C3  3074               	movlw	116
  6866  04C4  00CD               	movwf	___ftmul@f1+1
  6867  04C5  3049               	movlw	73
  6868  04C6  00CE               	movwf	___ftmul@f1+2
  6869  04C7  3185  25D4  3184   	fcall	___ftmul
  6870  04CA  0020               	movlb	0	; select bank0
  6871  04CB  084C               	movf	?___ftmul,w
  6872  04CC  00D8               	movwf	___fttol@f1
  6873  04CD  084D               	movf	?___ftmul+1,w
  6874  04CE  00D9               	movwf	___fttol@f1+1
  6875  04CF  084E               	movf	?___ftmul+2,w
  6876  04D0  00DA               	movwf	___fttol@f1+2
  6877  04D1  318E  263A  3184   	fcall	___fttol
  6878  04D4  0020               	movlb	0	; select bank0
  6879  04D5  085B               	movf	?___fttol+3,w
  6880  04D6  0021               	movlb	1	; select bank1
  6881  04D7  00A7               	movwf	(ftoa@rem+3)^(0+128)
  6882  04D8  0020               	movlb	0	; select bank0
  6883  04D9  085A               	movf	?___fttol+2,w
  6884  04DA  0021               	movlb	1	; select bank1
  6885  04DB  00A6               	movwf	(ftoa@rem+2)^(0+128)
  6886  04DC  0020               	movlb	0	; select bank0
  6887  04DD  0859               	movf	?___fttol+1,w
  6888  04DE  0021               	movlb	1	; select bank1
  6889  04DF  00A5               	movwf	(ftoa@rem+1)^(0+128)
  6890  04E0  0020               	movlb	0	; select bank0
  6891  04E1  0858               	movf	?___fttol,w
  6892  04E2  0021               	movlb	1	; select bank1
  6893  04E3  00A4               	movwf	ftoa@rem^(0+128)
  6894  04E4  3029               	movlw	low (STR_8| (0+32768))
  6895  04E5  0020               	movlb	0	; select bank0
  6896  04E6  00BB               	movwf	sprintf@f
  6897  04E7  3090               	movlw	high (STR_8| (0+32768))
  6898  04E8  00BC               	movwf	sprintf@f+1
  6899  04E9  0021               	movlb	1	; select bank1
  6900  04EA  082B               	movf	(ftoa@l+3)^(0+128),w
  6901  04EB  0020               	movlb	0	; select bank0
  6902  04EC  00C0               	movwf	?_sprintf+5
  6903  04ED  0021               	movlb	1	; select bank1
  6904  04EE  082A               	movf	(ftoa@l+2)^(0+128),w
  6905  04EF  0020               	movlb	0	; select bank0
  6906  04F0  00BF               	movwf	?_sprintf+4
  6907  04F1  0021               	movlb	1	; select bank1
  6908  04F2  0829               	movf	(ftoa@l+1)^(0+128),w
  6909  04F3  0020               	movlb	0	; select bank0
  6910  04F4  00BE               	movwf	?_sprintf+3
  6911  04F5  0021               	movlb	1	; select bank1
  6912  04F6  0828               	movf	ftoa@l^(0+128),w
  6913  04F7  0020               	movlb	0	; select bank0
  6914  04F8  00BD               	movwf	?_sprintf+2
  6915  04F9  0021               	movlb	1	; select bank1
  6916  04FA  0827               	movf	(ftoa@rem+3)^(0+128),w
  6917  04FB  0020               	movlb	0	; select bank0
  6918  04FC  00C4               	movwf	?_sprintf+9
  6919  04FD  0021               	movlb	1	; select bank1
  6920  04FE  0826               	movf	(ftoa@rem+2)^(0+128),w
  6921  04FF  0020               	movlb	0	; select bank0
  6922  0500  00C3               	movwf	?_sprintf+8
  6923  0501  0021               	movlb	1	; select bank1
  6924  0502  0825               	movf	(ftoa@rem+1)^(0+128),w
  6925  0503  0020               	movlb	0	; select bank0
  6926  0504  00C2               	movwf	?_sprintf+7
  6927  0505  0021               	movlb	1	; select bank1
  6928  0506  0824               	movf	ftoa@rem^(0+128),w
  6929  0507  0020               	movlb	0	; select bank0
  6930  0508  00C1               	movwf	?_sprintf+6
  6931  0509  0021               	movlb	1	; select bank1
  6932  050A  082C               	movf	ftoa@cp^(0+128),w
  6933  050B  3180  205E         	fcall	_sprintf
  6934  050D  303C               	movlw	(low (ftoa@buf| (0+256)))& (0+255)
  6935  050E  0008               	return
  6936  050F                     __end_of_ftoa:	
  6937                           
  6938                           	psect	text26
  6939  005E                     __ptext26:	
  6940 ;; *************** function _sprintf *****************
  6941 ;; Defined at:
  6942 ;;		line 500 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\doprnt.c"
  6943 ;; Parameters:    Size  Location     Type
  6944 ;;  sp              1    wreg     PTR unsigned char 
  6945 ;;		 -> ftoa@buf(17), 
  6946 ;;  f               2   27[BANK0 ] PTR const unsigned char 
  6947 ;;		 -> STR_8(11), 
  6948 ;; Auto vars:     Size  Location     Type
  6949 ;;  sp              1   47[BANK0 ] PTR unsigned char 
  6950 ;;		 -> ftoa@buf(17), 
  6951 ;;  val             4   43[BANK0 ] unsigned long 
  6952 ;;  tmpval          4    0        struct .
  6953 ;;  prec            2   50[BANK0 ] int 
  6954 ;;  width           2   48[BANK0 ] int 
  6955 ;;  cp              2    0        PTR const unsigned char 
  6956 ;;  len             2    0        unsigned int 
  6957 ;;  c               1   52[BANK0 ] unsigned char 
  6958 ;;  ap              1   42[BANK0 ] PTR void [1]
  6959 ;;		 -> ?_sprintf(2), 
  6960 ;;  flag            1   41[BANK0 ] unsigned char 
  6961 ;; Return value:  Size  Location     Type
  6962 ;;                  2   27[BANK0 ] int 
  6963 ;; Registers used:
  6964 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+8, btemp+9, btemp+10, btemp+11, pclath, cstack
  6965 ;; Tracked objects:
  6966 ;;		On entry : 0/0
  6967 ;;		On exit  : 0/0
  6968 ;;		Unchanged: 0/0
  6969 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6970 ;;      Params:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6971 ;;      Locals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6972 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6973 ;;      Totals:         0      26       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6974 ;;Total ram usage:       26 bytes
  6975 ;; Hardware stack levels used:    1
  6976 ;; Hardware stack levels required when called:    8
  6977 ;; This function calls:
  6978 ;;		___lldiv
  6979 ;;		___llmod
  6980 ;;		___wmul
  6981 ;;		_isdigit
  6982 ;; This function is called by:
  6983 ;;		_ftoa
  6984 ;; This function uses a non-reentrant model
  6985 ;;
  6986                           
  6987                           
  6988                           ;psect for function _sprintf
  6989  005E                     _sprintf:	
  6990                           
  6991                           ;incstack = 0
  6992                           ; Regs used in _sprintf: [wreg-fsr0h+status,2+status,0+btemp+8-btemp+11+pclath+cstack]
  6993                           ;sprintf@sp stored from wreg
  6994  005E  0020               	movlb	0	; select bank0
  6995  005F  00CF               	movwf	sprintf@sp
  6996                           
  6997                           ;doprnt.c: 502: va_list ap;;doprnt.c: 507: char c;;doprnt.c: 509: int width;;doprnt.c: 5
      +                          12: int prec;;doprnt.c: 520: unsigned char flag;;doprnt.c: 535: union {;doprnt.c: 536: u
      +                          nsigned long vd;;doprnt.c: 537: double integ;;doprnt.c: 538: } tmpval;;doprnt.c: 540: un
      +                          signed long val;;doprnt.c: 541: unsigned len;;doprnt.c: 542: const char * cp;;doprnt.c: 
      +                          545: *ap = __va_start();
  6998  0060  303D               	movlw	(low ((?_sprintf| 0+2)))& (0+255)
  6999  0061  00FF               	movwf	127
  7000  0062  087F               	movf	127,w
  7001  0063  00CA               	movwf	sprintf@ap
  7002  0064                     l2736:	
  7003                           ;doprnt.c: 548: while((c = *f++)) {
  7004                           
  7005  0064  083C               	movf	sprintf@f+1,w
  7006  0065  00FF               	movwf	127
  7007  0066  083B               	movf	sprintf@f,w
  7008  0067  00FE               	movwf	126
  7009  0068  0ABB               	incf	sprintf@f,f
  7010  0069  1903               	skipnz
  7011  006A  0ABC               	incf	sprintf@f+1,f
  7012  006B  087E               	movf	126,w
  7013  006C  0084               	movwf	4
  7014  006D  087F               	movf	127,w
  7015  006E  0085               	movwf	5
  7016  006F  0800               	movf	0,w	;code access
  7017  0070  00FF               	movwf	127
  7018  0071  087F               	movf	127,w
  7019  0072  00D4               	movwf	sprintf@c
  7020  0073  0854               	movf	sprintf@c,w
  7021  0074  1903               	btfsc	3,2
  7022  0075  2A25               	goto	l2738
  7023                           
  7024                           ;doprnt.c: 550: if(c != '%')
  7025  0076  3025               	movlw	37
  7026  0077  0654               	xorwf	sprintf@c,w
  7027  0078  1903               	btfsc	3,2
  7028  0079  2887               	goto	l2644
  7029                           
  7030                           ;doprnt.c: 552: {;doprnt.c: 553: ((*sp++ = (c)));
  7031  007A  0854               	movf	sprintf@c,w
  7032  007B  00FF               	movwf	127
  7033  007C  084F               	movf	sprintf@sp,w
  7034  007D  0084               	movwf	4
  7035  007E  3001               	movlw	1	; select bank2/3
  7036  007F  0085               	movwf	5
  7037  0080  087F               	movf	127,w
  7038  0081  0080               	movwf	0
  7039  0082  3001               	movlw	1
  7040  0083  00FF               	movwf	127
  7041  0084  087F               	movf	127,w
  7042  0085  07CF               	addwf	sprintf@sp,f
  7043                           
  7044                           ;doprnt.c: 554: continue;
  7045  0086  2864               	goto	l2736
  7046  0087                     l2644:	
  7047                           
  7048                           ;doprnt.c: 555: };doprnt.c: 558: width = 0;
  7049  0087  01D0               	clrf	sprintf@width
  7050  0088  01D1               	clrf	sprintf@width+1
  7051                           
  7052                           ;doprnt.c: 560: flag = 0;
  7053  0089  01C9               	clrf	sprintf@flag
  7054                           
  7055                           ;doprnt.c: 609: if(isdigit((unsigned)*f)) {
  7056  008A  083B               	movf	sprintf@f,w
  7057  008B  0084               	movwf	4
  7058  008C  083C               	movf	sprintf@f+1,w
  7059  008D  0085               	movwf	5
  7060  008E  0800               	movf	0,w	;code access
  7061  008F  3188  20C2  3180   	fcall	_isdigit
  7062  0092  1C03               	btfss	3,0
  7063  0093  28C5               	goto	l2658
  7064                           
  7065                           ;doprnt.c: 610: width = 0;
  7066  0094  0020               	movlb	0	; select bank0
  7067  0095  01D0               	clrf	sprintf@width
  7068  0096  01D1               	clrf	sprintf@width+1
  7069  0097                     l2650:	
  7070                           ;doprnt.c: 611: do {
  7071                           
  7072                           
  7073                           ;doprnt.c: 612: width *= 10;
  7074  0097  300A               	movlw	10
  7075  0098  00F0               	movwf	___wmul@multiplier
  7076  0099  3000               	movlw	0
  7077  009A  00F1               	movwf	___wmul@multiplier+1
  7078  009B  0020               	movlb	0	; select bank0
  7079  009C  0851               	movf	sprintf@width+1,w
  7080  009D  00F3               	movwf	___wmul@multiplicand+1
  7081  009E  0850               	movf	sprintf@width,w
  7082  009F  00F2               	movwf	___wmul@multiplicand
  7083  00A0  3189  216B  3180   	fcall	___wmul
  7084  00A3  0871               	movf	?___wmul+1,w
  7085  00A4  0020               	movlb	0	; select bank0
  7086  00A5  00D1               	movwf	sprintf@width+1
  7087  00A6  0870               	movf	?___wmul,w
  7088  00A7  00D0               	movwf	sprintf@width
  7089                           
  7090                           ;doprnt.c: 613: width += *f++ - '0';
  7091  00A8  083B               	movf	sprintf@f,w
  7092  00A9  0084               	movwf	4
  7093  00AA  083C               	movf	sprintf@f+1,w
  7094  00AB  0085               	movwf	5
  7095  00AC  0800               	movf	0,w	;code access
  7096  00AD  3ED0               	addlw	208
  7097  00AE  00FE               	movwf	126
  7098  00AF  30FF               	movlw	255
  7099  00B0  1803               	skipnc
  7100  00B1  3000               	movlw	0
  7101  00B2  00FF               	movwf	127
  7102  00B3  087E               	movf	126,w
  7103  00B4  07D0               	addwf	sprintf@width,f
  7104  00B5  087F               	movf	127,w
  7105  00B6  3DD1               	addwfc	sprintf@width+1,f
  7106  00B7  3001               	movlw	1
  7107  00B8  07BB               	addwf	sprintf@f,f
  7108  00B9  3000               	movlw	0
  7109  00BA  3DBC               	addwfc	sprintf@f+1,f
  7110                           
  7111                           ;doprnt.c: 614: } while(isdigit((unsigned)*f));
  7112  00BB  083B               	movf	sprintf@f,w
  7113  00BC  0084               	movwf	4
  7114  00BD  083C               	movf	sprintf@f+1,w
  7115  00BE  0085               	movwf	5
  7116  00BF  0800               	movf	0,w	;code access
  7117  00C0  3188  20C2  3180   	fcall	_isdigit
  7118  00C3  1803               	btfsc	3,0
  7119  00C4  2897               	goto	l2650
  7120  00C5                     l2658:	
  7121                           
  7122                           ;doprnt.c: 620: };doprnt.c: 623: if(*f == '.') {
  7123  00C5  0020               	movlb	0	; select bank0
  7124  00C6  083B               	movf	sprintf@f,w
  7125  00C7  0084               	movwf	4
  7126  00C8  083C               	movf	sprintf@f+1,w
  7127  00C9  0085               	movwf	5
  7128  00CA  0012               	moviw fsr0++
  7129  00CB  3A2E               	xorlw	46
  7130  00CC  1D03               	btfss	3,2
  7131  00CD  2903               	goto	l2670
  7132                           
  7133                           ;doprnt.c: 625: f++;
  7134  00CE  3001               	movlw	1
  7135  00CF  07BB               	addwf	sprintf@f,f
  7136  00D0  3000               	movlw	0
  7137  00D1  3DBC               	addwfc	sprintf@f+1,f
  7138                           
  7139                           ;doprnt.c: 639: {;doprnt.c: 640: prec = 0;
  7140  00D2  01D2               	clrf	sprintf@prec
  7141  00D3  01D3               	clrf	sprintf@prec+1
  7142  00D4                     l2668:	
  7143                           ;doprnt.c: 641: while(isdigit((unsigned)*f))
  7144                           
  7145  00D4  083B               	movf	sprintf@f,w
  7146  00D5  0084               	movwf	4
  7147  00D6  083C               	movf	sprintf@f+1,w
  7148  00D7  0085               	movwf	5
  7149  00D8  0800               	movf	0,w	;code access
  7150  00D9  3188  20C2  3180   	fcall	_isdigit
  7151  00DC  1C03               	btfss	3,0
  7152  00DD  290E               	goto	l2676
  7153                           
  7154                           ;doprnt.c: 642: prec = prec*10 + *f++ - '0';
  7155  00DE  0020               	movlb	0	; select bank0
  7156  00DF  083B               	movf	sprintf@f,w
  7157  00E0  0084               	movwf	4
  7158  00E1  083C               	movf	sprintf@f+1,w
  7159  00E2  0085               	movwf	5
  7160  00E3  0800               	movf	0,w	;code access
  7161  00E4  00FE               	movwf	126
  7162  00E5  01FF               	clrf	127
  7163  00E6  0853               	movf	sprintf@prec+1,w
  7164  00E7  00F1               	movwf	___wmul@multiplier+1
  7165  00E8  0852               	movf	sprintf@prec,w
  7166  00E9  00F0               	movwf	___wmul@multiplier
  7167  00EA  300A               	movlw	10
  7168  00EB  00F2               	movwf	___wmul@multiplicand
  7169  00EC  3000               	movlw	0
  7170  00ED  00F3               	movwf	___wmul@multiplicand+1
  7171  00EE  3189  216B  3180   	fcall	___wmul
  7172  00F1  087E               	movf	126,w
  7173  00F2  0770               	addwf	?___wmul,w
  7174  00F3  00FC               	movwf	124
  7175  00F4  087F               	movf	127,w
  7176  00F5  3D71               	addwfc	?___wmul+1,w
  7177  00F6  00FD               	movwf	125
  7178  00F7  087C               	movf	124,w
  7179  00F8  3ED0               	addlw	208
  7180  00F9  0020               	movlb	0	; select bank0
  7181  00FA  00D2               	movwf	sprintf@prec
  7182  00FB  30FF               	movlw	255
  7183  00FC  3D7D               	addwfc	125,w
  7184  00FD  00D3               	movwf	sprintf@prec+1
  7185  00FE  3001               	movlw	1
  7186  00FF  07BB               	addwf	sprintf@f,f
  7187  0100  3000               	movlw	0
  7188  0101  3DBC               	addwfc	sprintf@f+1,f
  7189  0102  28D4               	goto	l2668
  7190  0103                     l2670:	
  7191                           ;doprnt.c: 643: };doprnt.c: 644: } else {
  7192                           
  7193                           
  7194                           ;doprnt.c: 645: prec = 0;
  7195  0103  0020               	movlb	0	; select bank0
  7196  0104  01D2               	clrf	sprintf@prec
  7197  0105  01D3               	clrf	sprintf@prec+1
  7198                           
  7199                           ;doprnt.c: 654: switch(c = *f++) {
  7200                           
  7201                           ;doprnt.c: 649: };doprnt.c: 652: loop:
  7202  0106  290E               	goto	l2676
  7203  0107                     l500:	
  7204                           ;doprnt.c: 660: case 'l':
  7205                           
  7206                           ;doprnt.c: 657: goto alldone;
  7207                           
  7208                           ;doprnt.c: 656: case 0:
  7209                           
  7210                           
  7211                           ;doprnt.c: 662: flag |= 0x10;
  7212  0107  1649               	bsf	sprintf@flag,4
  7213                           
  7214                           ;doprnt.c: 663: goto loop;
  7215  0108  290E               	goto	l2676
  7216  0109                     l2672:	
  7217                           ;doprnt.c: 836: case 'u':
  7218                           
  7219                           ;doprnt.c: 832: continue;
  7220                           
  7221                           ;doprnt.c: 821: default:
  7222                           
  7223                           
  7224                           ;doprnt.c: 837: flag |= 0xC0;
  7225  0109  30C0               	movlw	192
  7226  010A  00FF               	movwf	127
  7227  010B  087F               	movf	127,w
  7228  010C  04C9               	iorwf	sprintf@flag,f
  7229                           
  7230                           ;doprnt.c: 841: }
  7231                           
  7232                           ;doprnt.c: 838: break;
  7233  010D  2926               	goto	l503
  7234  010E                     l2676:	
  7235  010E  0020               	movlb	0	; select bank0
  7236  010F  083C               	movf	sprintf@f+1,w
  7237  0110  00FF               	movwf	127
  7238  0111  083B               	movf	sprintf@f,w
  7239  0112  00FE               	movwf	126
  7240  0113  0ABB               	incf	sprintf@f,f
  7241  0114  1903               	skipnz
  7242  0115  0ABC               	incf	sprintf@f+1,f
  7243  0116  087E               	movf	126,w
  7244  0117  0084               	movwf	4
  7245  0118  087F               	movf	127,w
  7246  0119  0085               	movwf	5
  7247  011A  0800               	movf	0,w	;code access
  7248  011B  00D4               	movwf	sprintf@c
  7249                           
  7250                           ; Switch size 1, requested type "space"
  7251                           ; Number of cases is 3, Range of values is 0 to 117
  7252                           ; switch strategies available:
  7253                           ; Name         Instructions Cycles
  7254                           ; simple_byte           10     6 (average)
  7255                           ; direct_byte          242     6 (fixed)
  7256                           ; jumptable            260     6 (fixed)
  7257                           ;	Chosen strategy is simple_byte
  7258  011C  3A00               	xorlw	0	; case 0
  7259  011D  1903               	skipnz
  7260  011E  2A25               	goto	l2738
  7261  011F  3A6C               	xorlw	108	; case 108
  7262  0120  1903               	skipnz
  7263  0121  2907               	goto	l500
  7264  0122  3A19               	xorlw	25	; case 117
  7265  0123  1903               	skipnz
  7266  0124  2909               	goto	l2672
  7267  0125  2864               	goto	l2736
  7268  0126                     l503:	
  7269                           
  7270                           ;doprnt.c: 1292: {;doprnt.c: 1300: if(flag & 0x10)
  7271  0126  1E49               	btfss	sprintf@flag,4
  7272  0127  2935               	goto	l2682
  7273                           
  7274                           ;doprnt.c: 1301: val = (*(unsigned long *)__va_arg((*(unsigned long **)ap), (unsigned lo
      +                          ng)0));
  7275  0128  084A               	movf	sprintf@ap,w
  7276  0129  0084               	movwf	4
  7277  012A  0185               	clrf	5
  7278  012B  3F00               	moviw [0]fsr0
  7279  012C  00CB               	movwf	sprintf@val
  7280  012D  3F01               	moviw [1]fsr0
  7281  012E  00CC               	movwf	sprintf@val+1
  7282  012F  3F02               	moviw [2]fsr0
  7283  0130  00CD               	movwf	sprintf@val+2
  7284  0131  3F03               	moviw [3]fsr0
  7285  0132  00CE               	movwf	sprintf@val+3
  7286  0133  3004               	movlw	4
  7287  0134  2943               	goto	L1
  7288  0135                     l2682:	
  7289                           
  7290                           ;doprnt.c: 1302: else;doprnt.c: 1305: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (
      +                          unsigned)0));
  7291  0135  084A               	movf	sprintf@ap,w
  7292  0136  0084               	movwf	4
  7293  0137  0185               	clrf	5
  7294  0138  3F00               	moviw [0]fsr0
  7295  0139  00FE               	movwf	126
  7296  013A  3F01               	moviw [1]fsr0
  7297  013B  00FF               	movwf	127
  7298  013C  087E               	movf	126,w
  7299  013D  00CB               	movwf	sprintf@val
  7300  013E  087F               	movf	127,w
  7301  013F  00CC               	movwf	sprintf@val+1
  7302  0140  01CD               	clrf	sprintf@val+2
  7303  0141  01CE               	clrf	sprintf@val+3
  7304  0142  3002               	movlw	2
  7305  0143                     L1:	
  7306  0143  00FF               	movwf	127
  7307  0144  087F               	movf	127,w
  7308  0145  07CA               	addwf	sprintf@ap,f
  7309                           
  7310                           ;doprnt.c: 1306: };doprnt.c: 1309: if(prec == 0 && val == 0)
  7311  0146  0852               	movf	sprintf@prec,w
  7312  0147  0453               	iorwf	sprintf@prec+1,w
  7313  0148  1D03               	btfss	3,2
  7314  0149  2954               	goto	l2692
  7315  014A  084E               	movf	sprintf@val+3,w
  7316  014B  044D               	iorwf	sprintf@val+2,w
  7317  014C  044C               	iorwf	sprintf@val+1,w
  7318  014D  044B               	iorwf	sprintf@val,w
  7319  014E  1D03               	skipz
  7320  014F  2954               	goto	l2692
  7321                           
  7322                           ;doprnt.c: 1310: prec++;
  7323  0150  3001               	movlw	1
  7324  0151  07D2               	addwf	sprintf@prec,f
  7325  0152  3000               	movlw	0
  7326  0153  3DD3               	addwfc	sprintf@prec+1,f
  7327  0154                     l2692:	
  7328                           
  7329                           ;doprnt.c: 1324: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  7330  0154  01D4               	clrf	sprintf@c
  7331  0155  0AD4               	incf	sprintf@c,f
  7332  0156  300A               	movlw	10
  7333  0157  0654               	xorwf	sprintf@c,w
  7334  0158  1903               	btfsc	3,2
  7335  0159  2987               	goto	l2706
  7336  015A                     l2698:	
  7337                           
  7338                           ;doprnt.c: 1325: if(val < dpowers[c])
  7339  015A  0854               	movf	sprintf@c,w
  7340  015B  00FE               	movwf	126
  7341  015C  01FF               	clrf	127
  7342  015D  35FE               	lslf	126,f
  7343  015E  0DFF               	rlf	127,f
  7344  015F  35FE               	lslf	126,f
  7345  0160  0DFF               	rlf	127,f
  7346  0161  3000               	movlw	low (_dpowers| (0+32768))
  7347  0162  077E               	addwf	126,w
  7348  0163  0084               	movwf	4
  7349  0164  3090               	movlw	high (_dpowers| (0+32768))
  7350  0165  3D7F               	addwfc	127,w
  7351  0166  0085               	movwf	5
  7352  0167  3F00               	moviw [0]fsr0
  7353  0168  00C5               	movwf	??_sprintf
  7354  0169  3F01               	moviw [1]fsr0
  7355  016A  00C6               	movwf	??_sprintf+1
  7356  016B  3F02               	moviw [2]fsr0
  7357  016C  00C7               	movwf	??_sprintf+2
  7358  016D  3F03               	moviw [3]fsr0
  7359  016E  00C8               	movwf	??_sprintf+3
  7360  016F  0848               	movf	??_sprintf+3,w
  7361  0170  024E               	subwf	sprintf@val+3,w
  7362  0171  1D03               	skipz
  7363  0172  297D               	goto	u2545
  7364  0173  0847               	movf	??_sprintf+2,w
  7365  0174  024D               	subwf	sprintf@val+2,w
  7366  0175  1D03               	skipz
  7367  0176  297D               	goto	u2545
  7368  0177  0846               	movf	??_sprintf+1,w
  7369  0178  024C               	subwf	sprintf@val+1,w
  7370  0179  1D03               	skipz
  7371  017A  297D               	goto	u2545
  7372  017B  0845               	movf	??_sprintf,w
  7373  017C  024B               	subwf	sprintf@val,w
  7374  017D                     u2545:	
  7375  017D  1C03               	btfss	3,0
  7376  017E  2987               	goto	l2706
  7377                           
  7378                           ;doprnt.c: 1326: break;
  7379  017F  3001               	movlw	1
  7380  0180  00FF               	movwf	127
  7381  0181  087F               	movf	127,w
  7382  0182  07D4               	addwf	sprintf@c,f
  7383  0183  300A               	movlw	10
  7384  0184  0654               	xorwf	sprintf@c,w
  7385  0185  1D03               	btfss	3,2
  7386  0186  295A               	goto	l2698
  7387  0187                     l2706:	
  7388                           
  7389                           ;doprnt.c: 1358: if(c < prec)
  7390  0187  0853               	movf	sprintf@prec+1,w
  7391  0188  3A80               	xorlw	128
  7392  0189  3C80               	sublw	128
  7393  018A  1D03               	skipz
  7394  018B  298E               	goto	u2565
  7395  018C  0852               	movf	sprintf@prec,w
  7396  018D  0254               	subwf	sprintf@c,w
  7397  018E                     u2565:	
  7398  018E  1803               	skipnc
  7399  018F  2996               	goto	l2710
  7400                           
  7401                           ;doprnt.c: 1359: c = prec;
  7402  0190  0020               	movlb	0	; select bank0
  7403  0191  0852               	movf	sprintf@prec,w
  7404  0192  00FF               	movwf	127
  7405  0193  087F               	movf	127,w
  7406  0194  00D4               	movwf	sprintf@c
  7407  0195  29AA               	goto	l2714
  7408  0196                     l2710:	
  7409                           
  7410                           ;doprnt.c: 1360: else if(prec < c)
  7411  0196  0020               	movlb	0	; select bank0
  7412  0197  0853               	movf	sprintf@prec+1,w
  7413  0198  3A80               	xorlw	128
  7414  0199  00C5               	movwf	??_sprintf
  7415  019A  3080               	movlw	128
  7416  019B  0245               	subwf	??_sprintf,w
  7417  019C  1D03               	skipz
  7418  019D  29A0               	goto	u2575
  7419  019E  0854               	movf	sprintf@c,w
  7420  019F  0252               	subwf	sprintf@prec,w
  7421  01A0                     u2575:	
  7422  01A0  1803               	skipnc
  7423  01A1  29AA               	goto	l2714
  7424                           
  7425                           ;doprnt.c: 1361: prec = c;
  7426  01A2  0020               	movlb	0	; select bank0
  7427  01A3  0854               	movf	sprintf@c,w
  7428  01A4  00FE               	movwf	126
  7429  01A5  01FF               	clrf	127
  7430  01A6  087E               	movf	126,w
  7431  01A7  00D2               	movwf	sprintf@prec
  7432  01A8  087F               	movf	127,w
  7433  01A9  00D3               	movwf	sprintf@prec+1
  7434  01AA                     l2714:	
  7435                           
  7436                           ;doprnt.c: 1400: if(width > c)
  7437  01AA  0020               	movlb	0	; select bank0
  7438  01AB  0851               	movf	sprintf@width+1,w
  7439  01AC  3A80               	xorlw	128
  7440  01AD  3C80               	sublw	128
  7441  01AE  1D03               	skipz
  7442  01AF  29B2               	goto	u2585
  7443  01B0  0850               	movf	sprintf@width,w
  7444  01B1  0254               	subwf	sprintf@c,w
  7445  01B2                     u2585:	
  7446  01B2  1803               	skipnc
  7447  01B3  29BD               	goto	l2718
  7448                           
  7449                           ;doprnt.c: 1401: width -= c;
  7450  01B4  0020               	movlb	0	; select bank0
  7451  01B5  0854               	movf	sprintf@c,w
  7452  01B6  00FE               	movwf	126
  7453  01B7  01FF               	clrf	127
  7454  01B8  087E               	movf	126,w
  7455  01B9  02D0               	subwf	sprintf@width,f
  7456  01BA  087F               	movf	127,w
  7457  01BB  3BD1               	subwfb	sprintf@width+1,f
  7458  01BC  29C0               	goto	l2720
  7459  01BD                     l2718:	
  7460                           
  7461                           ;doprnt.c: 1402: else;doprnt.c: 1403: width = 0;
  7462  01BD  0020               	movlb	0	; select bank0
  7463  01BE  01D0               	clrf	sprintf@width
  7464  01BF  01D1               	clrf	sprintf@width+1
  7465  01C0                     l2720:	
  7466                           
  7467                           ;doprnt.c: 1441: {;doprnt.c: 1443: if(width;doprnt.c: 1447: )
  7468  01C0  0850               	movf	sprintf@width,w
  7469  01C1  0451               	iorwf	sprintf@width+1,w
  7470  01C2  1903               	btfsc	3,2
  7471  01C3  2A1A               	goto	l2734
  7472                           
  7473                           ;doprnt.c: 1449: ((*sp++ = (' ')));
  7474                           
  7475                           ;doprnt.c: 1448: do
  7476  01C4  3020               	movlw	32
  7477  01C5  00FF               	movwf	127
  7478  01C6  084F               	movf	sprintf@sp,w
  7479  01C7  0084               	movwf	4
  7480  01C8  3001               	movlw	1	; select bank2/3
  7481  01C9  0085               	movwf	5
  7482  01CA  087F               	movf	127,w
  7483  01CB  0080               	movwf	0
  7484  01CC  3001               	movlw	1
  7485  01CD  00FF               	movwf	127
  7486  01CE  087F               	movf	127,w
  7487  01CF  07CF               	addwf	sprintf@sp,f
  7488                           
  7489                           ;doprnt.c: 1450: while(--width);
  7490  01D0  30FF               	movlw	255
  7491  01D1  07D0               	addwf	sprintf@width,f
  7492  01D2  30FF               	movlw	255
  7493  01D3  3DD1               	addwfc	sprintf@width+1,f
  7494  01D4  29C0               	goto	l2720
  7495  01D5                     l2728:	
  7496                           ;doprnt.c: 1488: };doprnt.c: 1493: while(prec--) {
  7497                           
  7498                           
  7499                           ;doprnt.c: 1497: {;doprnt.c: 1508: c = (val / dpowers[prec]) % 10 + '0';
  7500  01D5  3000               	movlw	0
  7501  01D6  00B6               	movwf	___llmod@divisor+3
  7502  01D7  3000               	movlw	0
  7503  01D8  00B5               	movwf	___llmod@divisor+2
  7504  01D9  3000               	movlw	0
  7505  01DA  00B4               	movwf	___llmod@divisor+1
  7506  01DB  300A               	movlw	10
  7507  01DC  00B3               	movwf	___llmod@divisor
  7508  01DD  0853               	movf	sprintf@prec+1,w
  7509  01DE  0085               	movwf	5
  7510  01DF  0852               	movf	sprintf@prec,w
  7511  01E0  0084               	movwf	4
  7512  01E1  3584               	lslf	4,f
  7513  01E2  0D85               	rlf	5,f
  7514  01E3  3584               	lslf	4,f
  7515  01E4  0D85               	rlf	5,f
  7516  01E5  3000               	movlw	low (_dpowers| (0+32768))
  7517  01E6  0784               	addwf	4,f
  7518  01E7  3090               	movlw	high (_dpowers| (0+32768))
  7519  01E8  3D85               	addwfc	5,f
  7520  01E9  3F00               	moviw [0]fsr0
  7521  01EA  00A6               	movwf	___lldiv@divisor
  7522  01EB  3F01               	moviw [1]fsr0
  7523  01EC  00A7               	movwf	___lldiv@divisor+1
  7524  01ED  3F02               	moviw [2]fsr0
  7525  01EE  00A8               	movwf	___lldiv@divisor+2
  7526  01EF  3F03               	moviw [3]fsr0
  7527  01F0  00A9               	movwf	___lldiv@divisor+3
  7528  01F1  084E               	movf	sprintf@val+3,w
  7529  01F2  00AD               	movwf	___lldiv@dividend+3
  7530  01F3  084D               	movf	sprintf@val+2,w
  7531  01F4  00AC               	movwf	___lldiv@dividend+2
  7532  01F5  084C               	movf	sprintf@val+1,w
  7533  01F6  00AB               	movwf	___lldiv@dividend+1
  7534  01F7  084B               	movf	sprintf@val,w
  7535  01F8  00AA               	movwf	___lldiv@dividend
  7536  01F9  318C  24FC  3180   	fcall	___lldiv
  7537  01FC  0020               	movlb	0	; select bank0
  7538  01FD  0829               	movf	?___lldiv+3,w
  7539  01FE  00BA               	movwf	___llmod@dividend+3
  7540  01FF  0828               	movf	?___lldiv+2,w
  7541  0200  00B9               	movwf	___llmod@dividend+2
  7542  0201  0827               	movf	?___lldiv+1,w
  7543  0202  00B8               	movwf	___llmod@dividend+1
  7544  0203  0826               	movf	?___lldiv,w
  7545  0204  00B7               	movwf	___llmod@dividend
  7546  0205  318B  23E6  3180   	fcall	___llmod
  7547  0208  0020               	movlb	0	; select bank0
  7548  0209  0833               	movf	?___llmod,w
  7549  020A  3E30               	addlw	48
  7550  020B  00FF               	movwf	127
  7551  020C  087F               	movf	127,w
  7552  020D  00D4               	movwf	sprintf@c
  7553                           
  7554                           ;doprnt.c: 1542: };doprnt.c: 1543: ((*sp++ = (c)));
  7555  020E  0854               	movf	sprintf@c,w
  7556  020F  00FF               	movwf	127
  7557  0210  084F               	movf	sprintf@sp,w
  7558  0211  0084               	movwf	4
  7559  0212  3001               	movlw	1	; select bank2/3
  7560  0213  0085               	movwf	5
  7561  0214  087F               	movf	127,w
  7562  0215  0080               	movwf	0
  7563  0216  3001               	movlw	1
  7564  0217  00FF               	movwf	127
  7565  0218  087F               	movf	127,w
  7566  0219  07CF               	addwf	sprintf@sp,f
  7567  021A                     l2734:	
  7568  021A  30FF               	movlw	255
  7569  021B  07D2               	addwf	sprintf@prec,f
  7570  021C  30FF               	movlw	255
  7571  021D  3DD3               	addwfc	sprintf@prec+1,f
  7572  021E  0A52               	incf	sprintf@prec,w
  7573  021F  1D03               	skipz
  7574  0220  29D5               	goto	l2728
  7575  0221  0A53               	incf	sprintf@prec+1,w
  7576  0222  1903               	btfsc	3,2
  7577  0223  2864               	goto	l2736
  7578  0224  29D5               	goto	l2728
  7579  0225                     l2738:	
  7580                           ;doprnt.c: 1544: };doprnt.c: 1552: };doprnt.c: 1554: alldone:
  7581                           
  7582                           
  7583                           ;doprnt.c: 1557: *sp = 0;
  7584  0225  084F               	movf	sprintf@sp,w
  7585  0226  0084               	movwf	4
  7586  0227  3001               	movlw	1	; select bank2/3
  7587  0228  0085               	movwf	5
  7588  0229  0180               	clrf	0
  7589  022A  0008               	return
  7590  022B                     __end_of_sprintf:	
  7591                           ;doprnt.c: 1559: return 0;;	Return value of _sprintf is never used
  7592                           
  7593                           
  7594                           	psect	text27
  7595  08C2                     __ptext27:	
  7596 ;; *************** function _isdigit *****************
  7597 ;; Defined at:
  7598 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\isdigit.c"
  7599 ;; Parameters:    Size  Location     Type
  7600 ;;  c               1    wreg     unsigned char 
  7601 ;; Auto vars:     Size  Location     Type
  7602 ;;  c               1    1[COMMON] unsigned char 
  7603 ;; Return value:  Size  Location     Type
  7604 ;;		None               void
  7605 ;; Registers used:
  7606 ;;		wreg, status,2, status,0
  7607 ;; Tracked objects:
  7608 ;;		On entry : 0/0
  7609 ;;		On exit  : 0/0
  7610 ;;		Unchanged: 0/0
  7611 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7612 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7613 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7614 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7615 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7616 ;;Total ram usage:        2 bytes
  7617 ;; Hardware stack levels used:    1
  7618 ;; Hardware stack levels required when called:    7
  7619 ;; This function calls:
  7620 ;;		Nothing
  7621 ;; This function is called by:
  7622 ;;		_sprintf
  7623 ;; This function uses a non-reentrant model
  7624 ;;
  7625                           
  7626                           
  7627                           ;psect for function _isdigit
  7628  08C2                     _isdigit:	
  7629                           
  7630                           ;incstack = 0
  7631                           ; Regs used in _isdigit: [wreg+status,2+status,0]
  7632                           ;isdigit@c stored from wreg
  7633  08C2  00F1               	movwf	isdigit@c
  7634  08C3  01F0               	clrf	_isdigit$1989
  7635  08C4  303A               	movlw	58
  7636  08C5  0271               	subwf	isdigit@c,w
  7637  08C6  1803               	skipnc
  7638  08C7  28CE               	goto	l2428
  7639  08C8  3030               	movlw	48
  7640  08C9  0271               	subwf	isdigit@c,w
  7641  08CA  1C03               	skipc
  7642  08CB  28CE               	goto	l2428
  7643  08CC  01F0               	clrf	_isdigit$1989
  7644  08CD  0AF0               	incf	_isdigit$1989,f
  7645  08CE                     l2428:	
  7646  08CE  0C70               	rrf	_isdigit$1989,w
  7647  08CF  0008               	return
  7648  08D0                     __end_of_isdigit:	
  7649                           
  7650                           	psect	text28
  7651  096B                     __ptext28:	
  7652 ;; *************** function ___wmul *****************
  7653 ;; Defined at:
  7654 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\Umul16.c"
  7655 ;; Parameters:    Size  Location     Type
  7656 ;;  multiplier      2    0[COMMON] unsigned int 
  7657 ;;  multiplicand    2    2[COMMON] unsigned int 
  7658 ;; Auto vars:     Size  Location     Type
  7659 ;;  product         2    6[BANK0 ] unsigned int 
  7660 ;; Return value:  Size  Location     Type
  7661 ;;                  2    0[COMMON] unsigned int 
  7662 ;; Registers used:
  7663 ;;		wreg, status,2, status,0
  7664 ;; Tracked objects:
  7665 ;;		On entry : 0/0
  7666 ;;		On exit  : 0/0
  7667 ;;		Unchanged: 0/0
  7668 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7669 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7670 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7671 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7672 ;;      Totals:         4       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7673 ;;Total ram usage:        6 bytes
  7674 ;; Hardware stack levels used:    1
  7675 ;; Hardware stack levels required when called:    7
  7676 ;; This function calls:
  7677 ;;		Nothing
  7678 ;; This function is called by:
  7679 ;;		_sprintf
  7680 ;; This function uses a non-reentrant model
  7681 ;;
  7682                           
  7683                           
  7684                           ;psect for function ___wmul
  7685  096B                     ___wmul:	
  7686                           
  7687                           ;incstack = 0
  7688                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  7689  096B  0020               	movlb	0	; select bank0
  7690  096C  01A6               	clrf	___wmul@product
  7691  096D  01A7               	clrf	___wmul@product+1
  7692  096E                     l2434:	
  7693  096E  1C70               	btfss	___wmul@multiplier,0
  7694  096F  2975               	goto	l526
  7695  0970  0872               	movf	___wmul@multiplicand,w
  7696  0971  0020               	movlb	0	; select bank0
  7697  0972  07A6               	addwf	___wmul@product,f
  7698  0973  0873               	movf	___wmul@multiplicand+1,w
  7699  0974  3DA7               	addwfc	___wmul@product+1,f
  7700  0975                     l526:	
  7701  0975  3001               	movlw	1
  7702  0976                     u1945:	
  7703  0976  35F2               	lslf	___wmul@multiplicand,f
  7704  0977  0DF3               	rlf	___wmul@multiplicand+1,f
  7705  0978  0B89               	decfsz	9,f
  7706  0979  2976               	goto	u1945
  7707  097A  3001               	movlw	1
  7708  097B                     u1955:	
  7709  097B  36F1               	lsrf	___wmul@multiplier+1,f
  7710  097C  0CF0               	rrf	___wmul@multiplier,f
  7711  097D  0B89               	decfsz	9,f
  7712  097E  297B               	goto	u1955
  7713  097F  0870               	movf	___wmul@multiplier,w
  7714  0980  0471               	iorwf	___wmul@multiplier+1,w
  7715  0981  1D03               	btfss	3,2
  7716  0982  296E               	goto	l2434
  7717  0983  0020               	movlb	0	; select bank0
  7718  0984  0827               	movf	___wmul@product+1,w
  7719  0985  00F1               	movwf	?___wmul+1
  7720  0986  0826               	movf	___wmul@product,w
  7721  0987  00F0               	movwf	?___wmul
  7722  0988  0008               	return
  7723  0989                     __end_of___wmul:	
  7724                           
  7725                           	psect	text29
  7726  0BE6                     __ptext29:	
  7727 ;; *************** function ___llmod *****************
  7728 ;; Defined at:
  7729 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\llmod.c"
  7730 ;; Parameters:    Size  Location     Type
  7731 ;;  divisor         4   19[BANK0 ] unsigned long 
  7732 ;;  dividend        4   23[BANK0 ] unsigned long 
  7733 ;; Auto vars:     Size  Location     Type
  7734 ;;  counter         1    0[COMMON] unsigned char 
  7735 ;; Return value:  Size  Location     Type
  7736 ;;                  4   19[BANK0 ] unsigned long 
  7737 ;; Registers used:
  7738 ;;		wreg, status,2, status,0, btemp+11
  7739 ;; Tracked objects:
  7740 ;;		On entry : 0/0
  7741 ;;		On exit  : 0/0
  7742 ;;		Unchanged: 0/0
  7743 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7744 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7745 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7746 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7747 ;;      Totals:         1       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7748 ;;Total ram usage:        9 bytes
  7749 ;; Hardware stack levels used:    1
  7750 ;; Hardware stack levels required when called:    7
  7751 ;; This function calls:
  7752 ;;		Nothing
  7753 ;; This function is called by:
  7754 ;;		_sprintf
  7755 ;; This function uses a non-reentrant model
  7756 ;;
  7757                           
  7758                           
  7759                           ;psect for function ___llmod
  7760  0BE6                     ___llmod:	
  7761                           
  7762                           ;incstack = 0
  7763                           ; Regs used in ___llmod: [wreg+status,2+status,0+btemp+11]
  7764  0BE6  0020               	movlb	0	; select bank0
  7765  0BE7  0836               	movf	___llmod@divisor+3,w
  7766  0BE8  0435               	iorwf	___llmod@divisor+2,w
  7767  0BE9  0434               	iorwf	___llmod@divisor+1,w
  7768  0BEA  0433               	iorwf	___llmod@divisor,w
  7769  0BEB  1903               	skipnz
  7770  0BEC  2C20               	goto	l2566
  7771  0BED  01F0               	clrf	___llmod@counter
  7772  0BEE  0AF0               	incf	___llmod@counter,f
  7773  0BEF                     l2556:	
  7774  0BEF  1BB6               	btfsc	___llmod@divisor+3,7
  7775  0BF0  2BFD               	goto	l2558
  7776  0BF1  3001               	movlw	1
  7777  0BF2                     u2285:	
  7778  0BF2  35B3               	lslf	___llmod@divisor,f
  7779  0BF3  0DB4               	rlf	___llmod@divisor+1,f
  7780  0BF4  0DB5               	rlf	___llmod@divisor+2,f
  7781  0BF5  0DB6               	rlf	___llmod@divisor+3,f
  7782  0BF6  0B89               	decfsz	9,f
  7783  0BF7  2BF2               	goto	u2285
  7784  0BF8  3001               	movlw	1
  7785  0BF9  00FF               	movwf	127
  7786  0BFA  087F               	movf	127,w
  7787  0BFB  07F0               	addwf	___llmod@counter,f
  7788  0BFC  2BEF               	goto	l2556
  7789  0BFD                     l2558:	
  7790  0BFD  0836               	movf	___llmod@divisor+3,w
  7791  0BFE  023A               	subwf	___llmod@dividend+3,w
  7792  0BFF  1D03               	skipz
  7793  0C00  2C0B               	goto	u2305
  7794  0C01  0835               	movf	___llmod@divisor+2,w
  7795  0C02  0239               	subwf	___llmod@dividend+2,w
  7796  0C03  1D03               	skipz
  7797  0C04  2C0B               	goto	u2305
  7798  0C05  0834               	movf	___llmod@divisor+1,w
  7799  0C06  0238               	subwf	___llmod@dividend+1,w
  7800  0C07  1D03               	skipz
  7801  0C08  2C0B               	goto	u2305
  7802  0C09  0833               	movf	___llmod@divisor,w
  7803  0C0A  0237               	subwf	___llmod@dividend,w
  7804  0C0B                     u2305:	
  7805  0C0B  1C03               	skipc
  7806  0C0C  2C15               	goto	l2562
  7807  0C0D  0833               	movf	___llmod@divisor,w
  7808  0C0E  02B7               	subwf	___llmod@dividend,f
  7809  0C0F  0834               	movf	___llmod@divisor+1,w
  7810  0C10  3BB8               	subwfb	___llmod@dividend+1,f
  7811  0C11  0835               	movf	___llmod@divisor+2,w
  7812  0C12  3BB9               	subwfb	___llmod@dividend+2,f
  7813  0C13  0836               	movf	___llmod@divisor+3,w
  7814  0C14  3BBA               	subwfb	___llmod@dividend+3,f
  7815  0C15                     l2562:	
  7816  0C15  3001               	movlw	1
  7817  0C16                     u2315:	
  7818  0C16  36B6               	lsrf	___llmod@divisor+3,f
  7819  0C17  0CB5               	rrf	___llmod@divisor+2,f
  7820  0C18  0CB4               	rrf	___llmod@divisor+1,f
  7821  0C19  0CB3               	rrf	___llmod@divisor,f
  7822  0C1A  0B89               	decfsz	9,f
  7823  0C1B  2C16               	goto	u2315
  7824  0C1C  3001               	movlw	1
  7825  0C1D  02F0               	subwf	___llmod@counter,f
  7826  0C1E  1D03               	btfss	3,2
  7827  0C1F  2BFD               	goto	l2558
  7828  0C20                     l2566:	
  7829  0C20  083A               	movf	___llmod@dividend+3,w
  7830  0C21  00B6               	movwf	?___llmod+3
  7831  0C22  0839               	movf	___llmod@dividend+2,w
  7832  0C23  00B5               	movwf	?___llmod+2
  7833  0C24  0838               	movf	___llmod@dividend+1,w
  7834  0C25  00B4               	movwf	?___llmod+1
  7835  0C26  0837               	movf	___llmod@dividend,w
  7836  0C27  00B3               	movwf	?___llmod
  7837  0C28  0008               	return
  7838  0C29                     __end_of___llmod:	
  7839                           
  7840                           	psect	text30
  7841  0CFC                     __ptext30:	
  7842 ;; *************** function ___lldiv *****************
  7843 ;; Defined at:
  7844 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\__lldiv.c"
  7845 ;; Parameters:    Size  Location     Type
  7846 ;;  divisor         4    6[BANK0 ] unsigned long 
  7847 ;;  dividend        4   10[BANK0 ] unsigned long 
  7848 ;; Auto vars:     Size  Location     Type
  7849 ;;  quotient        4   14[BANK0 ] unsigned long 
  7850 ;;  counter         1   18[BANK0 ] unsigned char 
  7851 ;; Return value:  Size  Location     Type
  7852 ;;                  4    6[BANK0 ] unsigned long 
  7853 ;; Registers used:
  7854 ;;		wreg, status,2, status,0, btemp+11
  7855 ;; Tracked objects:
  7856 ;;		On entry : 0/0
  7857 ;;		On exit  : 0/0
  7858 ;;		Unchanged: 0/0
  7859 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7860 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7861 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7862 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7863 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7864 ;;Total ram usage:       13 bytes
  7865 ;; Hardware stack levels used:    1
  7866 ;; Hardware stack levels required when called:    7
  7867 ;; This function calls:
  7868 ;;		Nothing
  7869 ;; This function is called by:
  7870 ;;		_sprintf
  7871 ;; This function uses a non-reentrant model
  7872 ;;
  7873                           
  7874                           
  7875                           ;psect for function ___lldiv
  7876  0CFC                     ___lldiv:	
  7877                           
  7878                           ;incstack = 0
  7879                           ; Regs used in ___lldiv: [wreg+status,2+status,0+btemp+11]
  7880  0CFC  3000               	movlw	0
  7881  0CFD  0020               	movlb	0	; select bank0
  7882  0CFE  00B1               	movwf	___lldiv@quotient+3
  7883  0CFF  3000               	movlw	0
  7884  0D00  00B0               	movwf	___lldiv@quotient+2
  7885  0D01  3000               	movlw	0
  7886  0D02  00AF               	movwf	___lldiv@quotient+1
  7887  0D03  3000               	movlw	0
  7888  0D04  00AE               	movwf	___lldiv@quotient
  7889  0D05  0829               	movf	___lldiv@divisor+3,w
  7890  0D06  0428               	iorwf	___lldiv@divisor+2,w
  7891  0D07  0427               	iorwf	___lldiv@divisor+1,w
  7892  0D08  0426               	iorwf	___lldiv@divisor,w
  7893  0D09  1903               	skipnz
  7894  0D0A  2D46               	goto	l2468
  7895  0D0B  01B2               	clrf	___lldiv@counter
  7896  0D0C  0AB2               	incf	___lldiv@counter,f
  7897  0D0D                     l2454:	
  7898  0D0D  1BA9               	btfsc	___lldiv@divisor+3,7
  7899  0D0E  2D1B               	goto	l2456
  7900  0D0F  3001               	movlw	1
  7901  0D10                     u1985:	
  7902  0D10  35A6               	lslf	___lldiv@divisor,f
  7903  0D11  0DA7               	rlf	___lldiv@divisor+1,f
  7904  0D12  0DA8               	rlf	___lldiv@divisor+2,f
  7905  0D13  0DA9               	rlf	___lldiv@divisor+3,f
  7906  0D14  0B89               	decfsz	9,f
  7907  0D15  2D10               	goto	u1985
  7908  0D16  3001               	movlw	1
  7909  0D17  00FF               	movwf	127
  7910  0D18  087F               	movf	127,w
  7911  0D19  07B2               	addwf	___lldiv@counter,f
  7912  0D1A  2D0D               	goto	l2454
  7913  0D1B                     l2456:	
  7914  0D1B  3001               	movlw	1
  7915  0D1C                     u2005:	
  7916  0D1C  35AE               	lslf	___lldiv@quotient,f
  7917  0D1D  0DAF               	rlf	___lldiv@quotient+1,f
  7918  0D1E  0DB0               	rlf	___lldiv@quotient+2,f
  7919  0D1F  0DB1               	rlf	___lldiv@quotient+3,f
  7920  0D20  0B89               	decfsz	9,f
  7921  0D21  2D1C               	goto	u2005
  7922  0D22  0829               	movf	___lldiv@divisor+3,w
  7923  0D23  022D               	subwf	___lldiv@dividend+3,w
  7924  0D24  1D03               	skipz
  7925  0D25  2D30               	goto	u2015
  7926  0D26  0828               	movf	___lldiv@divisor+2,w
  7927  0D27  022C               	subwf	___lldiv@dividend+2,w
  7928  0D28  1D03               	skipz
  7929  0D29  2D30               	goto	u2015
  7930  0D2A  0827               	movf	___lldiv@divisor+1,w
  7931  0D2B  022B               	subwf	___lldiv@dividend+1,w
  7932  0D2C  1D03               	skipz
  7933  0D2D  2D30               	goto	u2015
  7934  0D2E  0826               	movf	___lldiv@divisor,w
  7935  0D2F  022A               	subwf	___lldiv@dividend,w
  7936  0D30                     u2015:	
  7937  0D30  1C03               	skipc
  7938  0D31  2D3B               	goto	l2464
  7939  0D32  0826               	movf	___lldiv@divisor,w
  7940  0D33  02AA               	subwf	___lldiv@dividend,f
  7941  0D34  0827               	movf	___lldiv@divisor+1,w
  7942  0D35  3BAB               	subwfb	___lldiv@dividend+1,f
  7943  0D36  0828               	movf	___lldiv@divisor+2,w
  7944  0D37  3BAC               	subwfb	___lldiv@dividend+2,f
  7945  0D38  0829               	movf	___lldiv@divisor+3,w
  7946  0D39  3BAD               	subwfb	___lldiv@dividend+3,f
  7947  0D3A  142E               	bsf	___lldiv@quotient,0
  7948  0D3B                     l2464:	
  7949  0D3B  3001               	movlw	1
  7950  0D3C                     u2025:	
  7951  0D3C  36A9               	lsrf	___lldiv@divisor+3,f
  7952  0D3D  0CA8               	rrf	___lldiv@divisor+2,f
  7953  0D3E  0CA7               	rrf	___lldiv@divisor+1,f
  7954  0D3F  0CA6               	rrf	___lldiv@divisor,f
  7955  0D40  0B89               	decfsz	9,f
  7956  0D41  2D3C               	goto	u2025
  7957  0D42  3001               	movlw	1
  7958  0D43  02B2               	subwf	___lldiv@counter,f
  7959  0D44  1D03               	btfss	3,2
  7960  0D45  2D1B               	goto	l2456
  7961  0D46                     l2468:	
  7962  0D46  0831               	movf	___lldiv@quotient+3,w
  7963  0D47  00A9               	movwf	?___lldiv+3
  7964  0D48  0830               	movf	___lldiv@quotient+2,w
  7965  0D49  00A8               	movwf	?___lldiv+2
  7966  0D4A  082F               	movf	___lldiv@quotient+1,w
  7967  0D4B  00A7               	movwf	?___lldiv+1
  7968  0D4C  082E               	movf	___lldiv@quotient,w
  7969  0D4D  00A6               	movwf	?___lldiv
  7970  0D4E  0008               	return
  7971  0D4F                     __end_of___lldiv:	
  7972                           
  7973                           	psect	text31
  7974  0A53                     __ptext31:	
  7975 ;; *************** function ___lltoft *****************
  7976 ;; Defined at:
  7977 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\lltoft.c"
  7978 ;; Parameters:    Size  Location     Type
  7979 ;;  c               4    0[COMMON] unsigned long 
  7980 ;; Auto vars:     Size  Location     Type
  7981 ;;  exp             1   11[BANK0 ] unsigned char 
  7982 ;; Return value:  Size  Location     Type
  7983 ;;                  3    0[COMMON] float 
  7984 ;; Registers used:
  7985 ;;		wreg, status,2, status,0, btemp+9, btemp+10, btemp+11, pclath, cstack
  7986 ;; Tracked objects:
  7987 ;;		On entry : 0/0
  7988 ;;		On exit  : 0/0
  7989 ;;		Unchanged: 0/0
  7990 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7991 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7992 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7993 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7994 ;;      Totals:         4       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7995 ;;Total ram usage:        5 bytes
  7996 ;; Hardware stack levels used:    1
  7997 ;; Hardware stack levels required when called:    8
  7998 ;; This function calls:
  7999 ;;		___ftpack
  8000 ;; This function is called by:
  8001 ;;		_ftoa
  8002 ;; This function uses a non-reentrant model
  8003 ;;
  8004                           
  8005                           
  8006                           ;psect for function ___lltoft
  8007  0A53                     ___lltoft:	
  8008                           
  8009                           ;incstack = 0
  8010                           ; Regs used in ___lltoft: [wreg+status,2+status,0+btemp+9-btemp+11+pclath+cstack]
  8011  0A53  308E               	movlw	142
  8012  0A54  00FF               	movwf	127
  8013  0A55  087F               	movf	127,w
  8014  0A56  0020               	movlb	0	; select bank0
  8015  0A57  00AB               	movwf	___lltoft@exp
  8016  0A58                     l2898:	
  8017  0A58  30FF               	movlw	255
  8018  0A59  0573               	andwf	___lltoft@c+3,w
  8019  0A5A  1903               	btfsc	3,2
  8020  0A5B  2A68               	goto	l2900
  8021  0A5C  3001               	movlw	1
  8022  0A5D                     u2925:	
  8023  0A5D  36F3               	lsrf	___lltoft@c+3,f
  8024  0A5E  0CF2               	rrf	___lltoft@c+2,f
  8025  0A5F  0CF1               	rrf	___lltoft@c+1,f
  8026  0A60  0CF0               	rrf	___lltoft@c,f
  8027  0A61  0B89               	decfsz	9,f
  8028  0A62  2A5D               	goto	u2925
  8029  0A63  3001               	movlw	1
  8030  0A64  00FF               	movwf	127
  8031  0A65  087F               	movf	127,w
  8032  0A66  07AB               	addwf	___lltoft@exp,f
  8033  0A67  2A58               	goto	l2898
  8034  0A68                     l2900:	
  8035  0A68  0870               	movf	___lltoft@c,w
  8036  0A69  00A6               	movwf	___ftpack@arg
  8037  0A6A  0871               	movf	___lltoft@c+1,w
  8038  0A6B  00A7               	movwf	___ftpack@arg+1
  8039  0A6C  0872               	movf	___lltoft@c+2,w
  8040  0A6D  00A8               	movwf	___ftpack@arg+2
  8041  0A6E  082B               	movf	___lltoft@exp,w
  8042  0A6F  00FF               	movwf	127
  8043  0A70  087F               	movf	127,w
  8044  0A71  00A9               	movwf	___ftpack@exp
  8045  0A72  01AA               	clrf	___ftpack@sign
  8046  0A73  318D  254F         	fcall	___ftpack
  8047  0A75  0020               	movlb	0	; select bank0
  8048  0A76  0826               	movf	?___ftpack,w
  8049  0A77  00F0               	movwf	?___lltoft
  8050  0A78  0827               	movf	?___ftpack+1,w
  8051  0A79  00F1               	movwf	?___lltoft+1
  8052  0A7A  0828               	movf	?___ftpack+2,w
  8053  0A7B  00F2               	movwf	?___lltoft+2
  8054  0A7C  0008               	return
  8055  0A7D                     __end_of___lltoft:	
  8056                           
  8057                           	psect	text32
  8058  0E3A                     __ptext32:	
  8059 ;; *************** function ___fttol *****************
  8060 ;; Defined at:
  8061 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\fttol.c"
  8062 ;; Parameters:    Size  Location     Type
  8063 ;;  f1              3   56[BANK0 ] float 
  8064 ;; Auto vars:     Size  Location     Type
  8065 ;;  lval            4   61[BANK0 ] unsigned long 
  8066 ;;  exp1            1   65[BANK0 ] unsigned char 
  8067 ;;  sign1           1   60[BANK0 ] unsigned char 
  8068 ;; Return value:  Size  Location     Type
  8069 ;;                  4   56[BANK0 ] long 
  8070 ;; Registers used:
  8071 ;;		wreg, status,2, status,0, btemp+9, btemp+10, btemp+11
  8072 ;; Tracked objects:
  8073 ;;		On entry : 0/0
  8074 ;;		On exit  : 0/0
  8075 ;;		Unchanged: 0/0
  8076 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8077 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8078 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8079 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8080 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8081 ;;Total ram usage:       10 bytes
  8082 ;; Hardware stack levels used:    1
  8083 ;; Hardware stack levels required when called:    7
  8084 ;; This function calls:
  8085 ;;		Nothing
  8086 ;; This function is called by:
  8087 ;;		_ftoa
  8088 ;; This function uses a non-reentrant model
  8089 ;;
  8090                           
  8091                           
  8092                           ;psect for function ___fttol
  8093  0E3A                     ___fttol:	
  8094                           
  8095                           ;incstack = 0
  8096                           ; Regs used in ___fttol: [wreg+status,2+status,0+btemp+9-btemp+11]
  8097  0E3A  0020               	movlb	0	; select bank0
  8098  0E3B  0858               	movf	___fttol@f1,w
  8099  0E3C  00FD               	movwf	125
  8100  0E3D  0859               	movf	___fttol@f1+1,w
  8101  0E3E  00FE               	movwf	126
  8102  0E3F  085A               	movf	___fttol@f1+2,w
  8103  0E40  00FF               	movwf	127
  8104  0E41  1003               	clrc
  8105  0E42  0D7E               	rlf	126,w
  8106  0E43  0D7F               	rlf	127,w
  8107  0E44  00FF               	movwf	127
  8108  0E45  087F               	movf	127,w
  8109  0E46  00E1               	movwf	___fttol@exp1
  8110  0E47  0861               	movf	___fttol@exp1,w
  8111  0E48  1D03               	btfss	3,2
  8112  0E49  2E53               	goto	l2854
  8113  0E4A  3000               	movlw	0
  8114  0E4B  00DB               	movwf	?___fttol+3
  8115  0E4C  3000               	movlw	0
  8116  0E4D  00DA               	movwf	?___fttol+2
  8117  0E4E  3000               	movlw	0
  8118  0E4F  00D9               	movwf	?___fttol+1
  8119  0E50  3000               	movlw	0
  8120  0E51  00D8               	movwf	?___fttol
  8121  0E52  0008               	return
  8122  0E53                     l2854:	
  8123  0E53  0858               	movf	___fttol@f1,w
  8124  0E54  00FD               	movwf	125
  8125  0E55  0859               	movf	___fttol@f1+1,w
  8126  0E56  00FE               	movwf	126
  8127  0E57  085A               	movf	___fttol@f1+2,w
  8128  0E58  00FF               	movwf	127
  8129  0E59  3017               	movlw	23
  8130  0E5A                     u2835:	
  8131  0E5A  36FF               	lsrf	127,f
  8132  0E5B  0CFE               	rrf	126,f
  8133  0E5C  0CFD               	rrf	125,f
  8134  0E5D  0B89               	decfsz	9,f
  8135  0E5E  2E5A               	goto	u2835
  8136  0E5F  087D               	movf	125,w
  8137  0E60  00FF               	movwf	127
  8138  0E61  087F               	movf	127,w
  8139  0E62  00DC               	movwf	___fttol@sign1
  8140  0E63  17D9               	bsf	___fttol@f1+1,7
  8141  0E64  30FF               	movlw	255
  8142  0E65  05D8               	andwf	___fttol@f1,f
  8143  0E66  30FF               	movlw	255
  8144  0E67  05D9               	andwf	___fttol@f1+1,f
  8145  0E68  3000               	movlw	0
  8146  0E69  05DA               	andwf	___fttol@f1+2,f
  8147  0E6A  0858               	movf	___fttol@f1,w
  8148  0E6B  00DD               	movwf	___fttol@lval
  8149  0E6C  0859               	movf	___fttol@f1+1,w
  8150  0E6D  00DE               	movwf	___fttol@lval+1
  8151  0E6E  085A               	movf	___fttol@f1+2,w
  8152  0E6F  00DF               	movwf	___fttol@lval+2
  8153  0E70  01E0               	clrf	___fttol@lval+3
  8154  0E71  308E               	movlw	142
  8155  0E72  02E1               	subwf	___fttol@exp1,f
  8156  0E73  1FE1               	btfss	___fttol@exp1,7
  8157  0E74  2E91               	goto	l2876
  8158  0E75  0861               	movf	___fttol@exp1,w
  8159  0E76  3A80               	xorlw	128
  8160  0E77  3E8F               	addlw	143
  8161  0E78  1803               	skipnc
  8162  0E79  2E83               	goto	l2872
  8163  0E7A  3000               	movlw	0
  8164  0E7B  00DB               	movwf	?___fttol+3
  8165  0E7C  3000               	movlw	0
  8166  0E7D  00DA               	movwf	?___fttol+2
  8167  0E7E  3000               	movlw	0
  8168  0E7F  00D9               	movwf	?___fttol+1
  8169  0E80  3000               	movlw	0
  8170  0E81  00D8               	movwf	?___fttol
  8171  0E82  0008               	return
  8172  0E83                     l2872:	
  8173  0E83  3001               	movlw	1
  8174  0E84                     u2865:	
  8175  0E84  36E0               	lsrf	___fttol@lval+3,f
  8176  0E85  0CDF               	rrf	___fttol@lval+2,f
  8177  0E86  0CDE               	rrf	___fttol@lval+1,f
  8178  0E87  0CDD               	rrf	___fttol@lval,f
  8179  0E88  0B89               	decfsz	9,f
  8180  0E89  2E84               	goto	u2865
  8181  0E8A  3001               	movlw	1
  8182  0E8B  00FF               	movwf	127
  8183  0E8C  087F               	movf	127,w
  8184  0E8D  07E1               	addwf	___fttol@exp1,f
  8185  0E8E  1903               	btfsc	3,2
  8186  0E8F  2EAA               	goto	l2884
  8187  0E90  2E83               	goto	l2872
  8188  0E91                     l2876:	
  8189  0E91  3018               	movlw	24
  8190  0E92  0261               	subwf	___fttol@exp1,w
  8191  0E93  1C03               	skipc
  8192  0E94  2EA7               	goto	l820
  8193  0E95  3000               	movlw	0
  8194  0E96  00DB               	movwf	?___fttol+3
  8195  0E97  3000               	movlw	0
  8196  0E98  00DA               	movwf	?___fttol+2
  8197  0E99  3000               	movlw	0
  8198  0E9A  00D9               	movwf	?___fttol+1
  8199  0E9B  3000               	movlw	0
  8200  0E9C  00D8               	movwf	?___fttol
  8201  0E9D  0008               	return
  8202  0E9E                     l2882:	
  8203  0E9E  3001               	movlw	1
  8204  0E9F                     u2895:	
  8205  0E9F  35DD               	lslf	___fttol@lval,f
  8206  0EA0  0DDE               	rlf	___fttol@lval+1,f
  8207  0EA1  0DDF               	rlf	___fttol@lval+2,f
  8208  0EA2  0DE0               	rlf	___fttol@lval+3,f
  8209  0EA3  0B89               	decfsz	9,f
  8210  0EA4  2E9F               	goto	u2895
  8211  0EA5  3001               	movlw	1
  8212  0EA6  02E1               	subwf	___fttol@exp1,f
  8213  0EA7                     l820:	
  8214  0EA7  0861               	movf	___fttol@exp1,w
  8215  0EA8  1D03               	btfss	3,2
  8216  0EA9  2E9E               	goto	l2882
  8217  0EAA                     l2884:	
  8218  0EAA  085C               	movf	___fttol@sign1,w
  8219  0EAB  1903               	btfsc	3,2
  8220  0EAC  2EB8               	goto	l2888
  8221  0EAD  09DD               	comf	___fttol@lval,f
  8222  0EAE  09DE               	comf	___fttol@lval+1,f
  8223  0EAF  09DF               	comf	___fttol@lval+2,f
  8224  0EB0  09E0               	comf	___fttol@lval+3,f
  8225  0EB1  0ADD               	incf	___fttol@lval,f
  8226  0EB2  1903               	skipnz
  8227  0EB3  0ADE               	incf	___fttol@lval+1,f
  8228  0EB4  1903               	skipnz
  8229  0EB5  0ADF               	incf	___fttol@lval+2,f
  8230  0EB6  1903               	skipnz
  8231  0EB7  0AE0               	incf	___fttol@lval+3,f
  8232  0EB8                     l2888:	
  8233  0EB8  0860               	movf	___fttol@lval+3,w
  8234  0EB9  00DB               	movwf	?___fttol+3
  8235  0EBA  085F               	movf	___fttol@lval+2,w
  8236  0EBB  00DA               	movwf	?___fttol+2
  8237  0EBC  085E               	movf	___fttol@lval+1,w
  8238  0EBD  00D9               	movwf	?___fttol+1
  8239  0EBE  085D               	movf	___fttol@lval,w
  8240  0EBF  00D8               	movwf	?___fttol
  8241  0EC0  0008               	return
  8242  0EC1                     __end_of___fttol:	
  8243                           
  8244                           	psect	text33
  8245  094D                     __ptext33:	
  8246 ;; *************** function ___ftsub *****************
  8247 ;; Defined at:
  8248 ;;		line 17 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\ftsub.c"
  8249 ;; Parameters:    Size  Location     Type
  8250 ;;  f2              3   21[BANK0 ] float 
  8251 ;;  f1              3   24[BANK0 ] float 
  8252 ;; Auto vars:     Size  Location     Type
  8253 ;;		None
  8254 ;; Return value:  Size  Location     Type
  8255 ;;                  3   21[BANK0 ] float 
  8256 ;; Registers used:
  8257 ;;		wreg, status,2, status,0, btemp+9, btemp+10, btemp+11, pclath, cstack
  8258 ;; Tracked objects:
  8259 ;;		On entry : 0/0
  8260 ;;		On exit  : 0/0
  8261 ;;		Unchanged: 0/0
  8262 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8263 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8264 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8265 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8266 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8267 ;;Total ram usage:        6 bytes
  8268 ;; Hardware stack levels used:    1
  8269 ;; Hardware stack levels required when called:    9
  8270 ;; This function calls:
  8271 ;;		___ftadd
  8272 ;; This function is called by:
  8273 ;;		_ftoa
  8274 ;; This function uses a non-reentrant model
  8275 ;;
  8276                           
  8277                           
  8278                           ;psect for function ___ftsub
  8279  094D                     ___ftsub:	
  8280                           
  8281                           ;incstack = 0
  8282                           ; Regs used in ___ftsub: [wreg+status,2+status,0+btemp+9-btemp+11+pclath+cstack]
  8283  094D  0020               	movlb	0	; select bank0
  8284  094E  0837               	movf	___ftsub@f2+2,w
  8285  094F  0436               	iorwf	___ftsub@f2+1,w
  8286  0950  0435               	iorwf	___ftsub@f2,w
  8287  0951  1903               	skipnz
  8288  0952  2955               	goto	l2844
  8289  0953  3080               	movlw	128
  8290  0954  06B7               	xorwf	___ftsub@f2+2,f
  8291  0955                     l2844:	
  8292  0955  0838               	movf	___ftsub@f1,w
  8293  0956  00AB               	movwf	___ftadd@f1
  8294  0957  0839               	movf	___ftsub@f1+1,w
  8295  0958  00AC               	movwf	___ftadd@f1+1
  8296  0959  083A               	movf	___ftsub@f1+2,w
  8297  095A  00AD               	movwf	___ftadd@f1+2
  8298  095B  0835               	movf	___ftsub@f2,w
  8299  095C  00AE               	movwf	___ftadd@f2
  8300  095D  0836               	movf	___ftsub@f2+1,w
  8301  095E  00AF               	movwf	___ftadd@f2+1
  8302  095F  0837               	movf	___ftsub@f2+2,w
  8303  0960  00B0               	movwf	___ftadd@f2+2
  8304  0961  3183  2332         	fcall	___ftadd
  8305  0963  0020               	movlb	0	; select bank0
  8306  0964  082B               	movf	?___ftadd,w
  8307  0965  00B5               	movwf	?___ftsub
  8308  0966  082C               	movf	?___ftadd+1,w
  8309  0967  00B6               	movwf	?___ftsub+1
  8310  0968  082D               	movf	?___ftadd+2,w
  8311  0969  00B7               	movwf	?___ftsub+2
  8312  096A  0008               	return
  8313  096B                     __end_of___ftsub:	
  8314                           
  8315                           	psect	text34
  8316  08A7                     __ptext34:	
  8317 ;; *************** function ___ftneg *****************
  8318 ;; Defined at:
  8319 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\ftneg.c"
  8320 ;; Parameters:    Size  Location     Type
  8321 ;;  f1              3   44[BANK0 ] float 
  8322 ;; Auto vars:     Size  Location     Type
  8323 ;;		None
  8324 ;; Return value:  Size  Location     Type
  8325 ;;                  3   44[BANK0 ] float 
  8326 ;; Registers used:
  8327 ;;		wreg
  8328 ;; Tracked objects:
  8329 ;;		On entry : 0/0
  8330 ;;		On exit  : 0/0
  8331 ;;		Unchanged: 0/0
  8332 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8333 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8334 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8335 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8336 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8337 ;;Total ram usage:        3 bytes
  8338 ;; Hardware stack levels used:    1
  8339 ;; Hardware stack levels required when called:    7
  8340 ;; This function calls:
  8341 ;;		Nothing
  8342 ;; This function is called by:
  8343 ;;		_loop
  8344 ;;		_ftoa
  8345 ;; This function uses a non-reentrant model
  8346 ;;
  8347                           
  8348                           
  8349                           ;psect for function ___ftneg
  8350  08A7                     ___ftneg:	
  8351                           
  8352                           ;incstack = 0
  8353                           ; Regs used in ___ftneg: [wreg]
  8354  08A7  0020               	movlb	0	; select bank0
  8355  08A8  084E               	movf	___ftneg@f1+2,w
  8356  08A9  044D               	iorwf	___ftneg@f1+1,w
  8357  08AA  044C               	iorwf	___ftneg@f1,w
  8358  08AB  1903               	skipnz
  8359  08AC  0008               	return
  8360  08AD  3080               	movlw	128
  8361  08AE  06CE               	xorwf	___ftneg@f1+2,f
  8362  08AF  0008               	return
  8363  08B0                     __end_of___ftneg:	
  8364                           
  8365                           	psect	text35
  8366  05D4                     __ptext35:	
  8367 ;; *************** function ___ftmul *****************
  8368 ;; Defined at:
  8369 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\ftmul.c"
  8370 ;; Parameters:    Size  Location     Type
  8371 ;;  f1              3   44[BANK0 ] float 
  8372 ;;  f2              3   47[BANK0 ] float 
  8373 ;; Auto vars:     Size  Location     Type
  8374 ;;  f3_as_produc    3   51[BANK0 ] unsigned um
  8375 ;;  sign            1   55[BANK0 ] unsigned char 
  8376 ;;  cntr            1   54[BANK0 ] unsigned char 
  8377 ;;  exp             1   50[BANK0 ] unsigned char 
  8378 ;; Return value:  Size  Location     Type
  8379 ;;                  3   44[BANK0 ] float 
  8380 ;; Registers used:
  8381 ;;		wreg, status,2, status,0, btemp+9, btemp+10, btemp+11, pclath, cstack
  8382 ;; Tracked objects:
  8383 ;;		On entry : 0/0
  8384 ;;		On exit  : 0/0
  8385 ;;		Unchanged: 0/0
  8386 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8387 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8388 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8389 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8390 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8391 ;;Total ram usage:       12 bytes
  8392 ;; Hardware stack levels used:    1
  8393 ;; Hardware stack levels required when called:    8
  8394 ;; This function calls:
  8395 ;;		___ftpack
  8396 ;; This function is called by:
  8397 ;;		_loop
  8398 ;;		_ftoa
  8399 ;; This function uses a non-reentrant model
  8400 ;;
  8401                           
  8402                           
  8403                           ;psect for function ___ftmul
  8404  05D4                     ___ftmul:	
  8405                           
  8406                           ;incstack = 0
  8407                           ; Regs used in ___ftmul: [wreg+status,2+status,0+btemp+9-btemp+11+pclath+cstack]
  8408  05D4  0020               	movlb	0	; select bank0
  8409  05D5  084C               	movf	___ftmul@f1,w
  8410  05D6  00FD               	movwf	125
  8411  05D7  084D               	movf	___ftmul@f1+1,w
  8412  05D8  00FE               	movwf	126
  8413  05D9  084E               	movf	___ftmul@f1+2,w
  8414  05DA  00FF               	movwf	127
  8415  05DB  1003               	clrc
  8416  05DC  0D7E               	rlf	126,w
  8417  05DD  0D7F               	rlf	127,w
  8418  05DE  00FF               	movwf	127
  8419  05DF  087F               	movf	127,w
  8420  05E0  00D2               	movwf	___ftmul@exp
  8421  05E1  0852               	movf	___ftmul@exp,w
  8422  05E2  1D03               	btfss	3,2
  8423  05E3  2DEB               	goto	l2784
  8424  05E4  3000               	movlw	0
  8425  05E5  00CC               	movwf	?___ftmul
  8426  05E6  3000               	movlw	0
  8427  05E7  00CD               	movwf	?___ftmul+1
  8428  05E8  3000               	movlw	0
  8429  05E9  00CE               	movwf	?___ftmul+2
  8430  05EA  0008               	return
  8431  05EB                     l2784:	
  8432  05EB  084F               	movf	___ftmul@f2,w
  8433  05EC  00FD               	movwf	125
  8434  05ED  0850               	movf	___ftmul@f2+1,w
  8435  05EE  00FE               	movwf	126
  8436  05EF  0851               	movf	___ftmul@f2+2,w
  8437  05F0  00FF               	movwf	127
  8438  05F1  1003               	clrc
  8439  05F2  0D7E               	rlf	126,w
  8440  05F3  0D7F               	rlf	127,w
  8441  05F4  00FF               	movwf	127
  8442  05F5  087F               	movf	127,w
  8443  05F6  00D7               	movwf	___ftmul@sign
  8444  05F7  0857               	movf	___ftmul@sign,w
  8445  05F8  1D03               	btfss	3,2
  8446  05F9  2E01               	goto	l2790
  8447  05FA  3000               	movlw	0
  8448  05FB  00CC               	movwf	?___ftmul
  8449  05FC  3000               	movlw	0
  8450  05FD  00CD               	movwf	?___ftmul+1
  8451  05FE  3000               	movlw	0
  8452  05FF  00CE               	movwf	?___ftmul+2
  8453  0600  0008               	return
  8454  0601                     l2790:	
  8455  0601  0857               	movf	___ftmul@sign,w
  8456  0602  3E7B               	addlw	123
  8457  0603  00FF               	movwf	127
  8458  0604  087F               	movf	127,w
  8459  0605  07D2               	addwf	___ftmul@exp,f
  8460  0606  084C               	movf	___ftmul@f1,w
  8461  0607  00FD               	movwf	125
  8462  0608  084D               	movf	___ftmul@f1+1,w
  8463  0609  00FE               	movwf	126
  8464  060A  084E               	movf	___ftmul@f1+2,w
  8465  060B  00FF               	movwf	127
  8466  060C  3010               	movlw	16
  8467  060D                     u2705:	
  8468  060D  36FF               	lsrf	127,f
  8469  060E  0CFE               	rrf	126,f
  8470  060F  0CFD               	rrf	125,f
  8471  0610  0B89               	decfsz	9,f
  8472  0611  2E0D               	goto	u2705
  8473  0612  087D               	movf	125,w
  8474  0613  00FF               	movwf	127
  8475  0614  087F               	movf	127,w
  8476  0615  00D7               	movwf	___ftmul@sign
  8477  0616  084F               	movf	___ftmul@f2,w
  8478  0617  00FD               	movwf	125
  8479  0618  0850               	movf	___ftmul@f2+1,w
  8480  0619  00FE               	movwf	126
  8481  061A  0851               	movf	___ftmul@f2+2,w
  8482  061B  00FF               	movwf	127
  8483  061C  3010               	movlw	16
  8484  061D                     u2715:	
  8485  061D  36FF               	lsrf	127,f
  8486  061E  0CFE               	rrf	126,f
  8487  061F  0CFD               	rrf	125,f
  8488  0620  0B89               	decfsz	9,f
  8489  0621  2E1D               	goto	u2715
  8490  0622  087D               	movf	125,w
  8491  0623  00FF               	movwf	127
  8492  0624  087F               	movf	127,w
  8493  0625  06D7               	xorwf	___ftmul@sign,f
  8494  0626  3080               	movlw	128
  8495  0627  00FF               	movwf	127
  8496  0628  087F               	movf	127,w
  8497  0629  05D7               	andwf	___ftmul@sign,f
  8498  062A  17CD               	bsf	___ftmul@f1+1,7
  8499  062B  17D0               	bsf	___ftmul@f2+1,7
  8500  062C  30FF               	movlw	255
  8501  062D  05CF               	andwf	___ftmul@f2,f
  8502  062E  30FF               	movlw	255
  8503  062F  05D0               	andwf	___ftmul@f2+1,f
  8504  0630  3000               	movlw	0
  8505  0631  05D1               	andwf	___ftmul@f2+2,f
  8506  0632  3000               	movlw	0
  8507  0633  00D3               	movwf	___ftmul@f3_as_product
  8508  0634  3000               	movlw	0
  8509  0635  00D4               	movwf	___ftmul@f3_as_product+1
  8510  0636  3000               	movlw	0
  8511  0637  00D5               	movwf	___ftmul@f3_as_product+2
  8512  0638  3007               	movlw	7
  8513  0639  00FF               	movwf	127
  8514  063A  087F               	movf	127,w
  8515  063B  00D6               	movwf	___ftmul@cntr
  8516  063C                     l2806:	
  8517  063C  1C4C               	btfss	___ftmul@f1,0
  8518  063D  2E44               	goto	l2810
  8519  063E  084F               	movf	___ftmul@f2,w
  8520  063F  07D3               	addwf	___ftmul@f3_as_product,f
  8521  0640  0850               	movf	___ftmul@f2+1,w
  8522  0641  3DD4               	addwfc	___ftmul@f3_as_product+1,f
  8523  0642  0851               	movf	___ftmul@f2+2,w
  8524  0643  3DD5               	addwfc	___ftmul@f3_as_product+2,f
  8525  0644                     l2810:	
  8526  0644  3001               	movlw	1
  8527  0645                     u2735:	
  8528  0645  36CE               	lsrf	___ftmul@f1+2,f
  8529  0646  0CCD               	rrf	___ftmul@f1+1,f
  8530  0647  0CCC               	rrf	___ftmul@f1,f
  8531  0648  0B89               	decfsz	9,f
  8532  0649  2E45               	goto	u2735
  8533  064A  3001               	movlw	1
  8534  064B                     u2745:	
  8535  064B  35CF               	lslf	___ftmul@f2,f
  8536  064C  0DD0               	rlf	___ftmul@f2+1,f
  8537  064D  0DD1               	rlf	___ftmul@f2+2,f
  8538  064E  0B89               	decfsz	9,f
  8539  064F  2E4B               	goto	u2745
  8540  0650  3001               	movlw	1
  8541  0651  02D6               	subwf	___ftmul@cntr,f
  8542  0652  1D03               	btfss	3,2
  8543  0653  2E3C               	goto	l2806
  8544  0654  3009               	movlw	9
  8545  0655  00FF               	movwf	127
  8546  0656  087F               	movf	127,w
  8547  0657  00D6               	movwf	___ftmul@cntr
  8548  0658                     l2818:	
  8549  0658  1C4C               	btfss	___ftmul@f1,0
  8550  0659  2E60               	goto	l2822
  8551  065A  084F               	movf	___ftmul@f2,w
  8552  065B  07D3               	addwf	___ftmul@f3_as_product,f
  8553  065C  0850               	movf	___ftmul@f2+1,w
  8554  065D  3DD4               	addwfc	___ftmul@f3_as_product+1,f
  8555  065E  0851               	movf	___ftmul@f2+2,w
  8556  065F  3DD5               	addwfc	___ftmul@f3_as_product+2,f
  8557  0660                     l2822:	
  8558  0660  3001               	movlw	1
  8559  0661                     u2775:	
  8560  0661  36CE               	lsrf	___ftmul@f1+2,f
  8561  0662  0CCD               	rrf	___ftmul@f1+1,f
  8562  0663  0CCC               	rrf	___ftmul@f1,f
  8563  0664  0B89               	decfsz	9,f
  8564  0665  2E61               	goto	u2775
  8565  0666  3001               	movlw	1
  8566  0667                     u2785:	
  8567  0667  36D5               	lsrf	___ftmul@f3_as_product+2,f
  8568  0668  0CD4               	rrf	___ftmul@f3_as_product+1,f
  8569  0669  0CD3               	rrf	___ftmul@f3_as_product,f
  8570  066A  0B89               	decfsz	9,f
  8571  066B  2E67               	goto	u2785
  8572  066C  3001               	movlw	1
  8573  066D  02D6               	subwf	___ftmul@cntr,f
  8574  066E  1D03               	btfss	3,2
  8575  066F  2E58               	goto	l2818
  8576  0670  0853               	movf	___ftmul@f3_as_product,w
  8577  0671  00A6               	movwf	___ftpack@arg
  8578  0672  0854               	movf	___ftmul@f3_as_product+1,w
  8579  0673  00A7               	movwf	___ftpack@arg+1
  8580  0674  0855               	movf	___ftmul@f3_as_product+2,w
  8581  0675  00A8               	movwf	___ftpack@arg+2
  8582  0676  0852               	movf	___ftmul@exp,w
  8583  0677  00FF               	movwf	127
  8584  0678  087F               	movf	127,w
  8585  0679  00A9               	movwf	___ftpack@exp
  8586  067A  0857               	movf	___ftmul@sign,w
  8587  067B  00FF               	movwf	127
  8588  067C  087F               	movf	127,w
  8589  067D  00AA               	movwf	___ftpack@sign
  8590  067E  318D  254F         	fcall	___ftpack
  8591  0680  0020               	movlb	0	; select bank0
  8592  0681  0826               	movf	?___ftpack,w
  8593  0682  00CC               	movwf	?___ftmul
  8594  0683  0827               	movf	?___ftpack+1,w
  8595  0684  00CD               	movwf	?___ftmul+1
  8596  0685  0828               	movf	?___ftpack+2,w
  8597  0686  00CE               	movwf	?___ftmul+2
  8598  0687  0008               	return
  8599  0688                     __end_of___ftmul:	
  8600                           
  8601                           	psect	text36
  8602  0BAA                     __ptext36:	
  8603 ;; *************** function ___ftge *****************
  8604 ;; Defined at:
  8605 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\ftge.c"
  8606 ;; Parameters:    Size  Location     Type
  8607 ;;  ff1             3    6[BANK0 ] float 
  8608 ;;  ff2             3    9[BANK0 ] float 
  8609 ;; Auto vars:     Size  Location     Type
  8610 ;;		None
  8611 ;; Return value:  Size  Location     Type
  8612 ;;		None               void
  8613 ;; Registers used:
  8614 ;;		wreg, status,2, status,0, btemp+9, btemp+10, btemp+11
  8615 ;; Tracked objects:
  8616 ;;		On entry : 0/0
  8617 ;;		On exit  : 0/0
  8618 ;;		Unchanged: 0/0
  8619 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8620 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8621 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8622 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8623 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8624 ;;Total ram usage:        6 bytes
  8625 ;; Hardware stack levels used:    1
  8626 ;; Hardware stack levels required when called:    7
  8627 ;; This function calls:
  8628 ;;		Nothing
  8629 ;; This function is called by:
  8630 ;;		_ftoa
  8631 ;; This function uses a non-reentrant model
  8632 ;;
  8633                           
  8634                           
  8635                           ;psect for function ___ftge
  8636  0BAA                     ___ftge:	
  8637                           
  8638                           ;incstack = 0
  8639                           ; Regs used in ___ftge: [wreg+status,2+status,0+btemp+9-btemp+11]
  8640  0BAA  0020               	movlb	0	; select bank0
  8641  0BAB  1FA8               	btfss	___ftge@ff1+2,7
  8642  0BAC  2BC1               	goto	l2762
  8643  0BAD  0926               	comf	___ftge@ff1,w
  8644  0BAE  00FD               	movwf	125
  8645  0BAF  0927               	comf	___ftge@ff1+1,w
  8646  0BB0  00FE               	movwf	126
  8647  0BB1  0928               	comf	___ftge@ff1+2,w
  8648  0BB2  00FF               	movwf	127
  8649  0BB3  0AFD               	incf	125,f
  8650  0BB4  1903               	skipnz
  8651  0BB5  0AFE               	incf	126,f
  8652  0BB6  1903               	skipnz
  8653  0BB7  0AFF               	incf	127,f
  8654  0BB8  3000               	movlw	0
  8655  0BB9  077D               	addwf	125,w
  8656  0BBA  00A6               	movwf	___ftge@ff1
  8657  0BBB  3000               	movlw	0
  8658  0BBC  3D7E               	addwfc	126,w
  8659  0BBD  00A7               	movwf	___ftge@ff1+1
  8660  0BBE  3080               	movlw	128
  8661  0BBF  3D7F               	addwfc	127,w
  8662  0BC0  00A8               	movwf	___ftge@ff1+2
  8663  0BC1                     l2762:	
  8664  0BC1  1FAB               	btfss	___ftge@ff2+2,7
  8665  0BC2  2BD7               	goto	l2766
  8666  0BC3  0929               	comf	___ftge@ff2,w
  8667  0BC4  00FD               	movwf	125
  8668  0BC5  092A               	comf	___ftge@ff2+1,w
  8669  0BC6  00FE               	movwf	126
  8670  0BC7  092B               	comf	___ftge@ff2+2,w
  8671  0BC8  00FF               	movwf	127
  8672  0BC9  0AFD               	incf	125,f
  8673  0BCA  1903               	skipnz
  8674  0BCB  0AFE               	incf	126,f
  8675  0BCC  1903               	skipnz
  8676  0BCD  0AFF               	incf	127,f
  8677  0BCE  3000               	movlw	0
  8678  0BCF  077D               	addwf	125,w
  8679  0BD0  00A9               	movwf	___ftge@ff2
  8680  0BD1  3000               	movlw	0
  8681  0BD2  3D7E               	addwfc	126,w
  8682  0BD3  00AA               	movwf	___ftge@ff2+1
  8683  0BD4  3080               	movlw	128
  8684  0BD5  3D7F               	addwfc	127,w
  8685  0BD6  00AB               	movwf	___ftge@ff2+2
  8686  0BD7                     l2766:	
  8687  0BD7  3080               	movlw	128
  8688  0BD8  06A8               	xorwf	___ftge@ff1+2,f
  8689  0BD9  3080               	movlw	128
  8690  0BDA  06AB               	xorwf	___ftge@ff2+2,f
  8691  0BDB  082B               	movf	___ftge@ff2+2,w
  8692  0BDC  0228               	subwf	___ftge@ff1+2,w
  8693  0BDD  1D03               	skipz
  8694  0BDE  0008               	return
  8695  0BDF  082A               	movf	___ftge@ff2+1,w
  8696  0BE0  0227               	subwf	___ftge@ff1+1,w
  8697  0BE1  1D03               	skipz
  8698  0BE2  0008               	return
  8699  0BE3  0829               	movf	___ftge@ff2,w
  8700  0BE4  0226               	subwf	___ftge@ff1,w
  8701  0BE5  0008               	return
  8702  0BE6                     __end_of___ftge:	
  8703                           
  8704                           	psect	text37
  8705  0688                     __ptext37:	
  8706 ;; *************** function _getADCValue *****************
  8707 ;; Defined at:
  8708 ;;		line 31 in file "main.c"
  8709 ;; Parameters:    Size  Location     Type
  8710 ;;  channel         1    wreg     unsigned char 
  8711 ;; Auto vars:     Size  Location     Type
  8712 ;;  channel         1   40[BANK0 ] unsigned char 
  8713 ;;  adcSum          3   41[BANK0 ] float 
  8714 ;;  adcLoop         2   38[BANK0 ] unsigned int 
  8715 ;; Return value:  Size  Location     Type
  8716 ;;                  3   34[BANK0 ] float 
  8717 ;; Registers used:
  8718 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+0, btemp+9, btemp+10, btemp+11, pclath, cstack
  8719 ;; Tracked objects:
  8720 ;;		On entry : 0/0
  8721 ;;		On exit  : 0/0
  8722 ;;		Unchanged: 0/0
  8723 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8724 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8725 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8726 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8727 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8728 ;;Total ram usage:       10 bytes
  8729 ;; Hardware stack levels used:    1
  8730 ;; Hardware stack levels required when called:    9
  8731 ;; This function calls:
  8732 ;;		___awtoft
  8733 ;;		___ftadd
  8734 ;;		___ftdiv
  8735 ;;		_sleepMs
  8736 ;; This function is called by:
  8737 ;;		_loop
  8738 ;; This function uses a non-reentrant model
  8739 ;;
  8740                           
  8741                           
  8742                           ;psect for function _getADCValue
  8743  0688                     _getADCValue:	
  8744                           
  8745                           ;incstack = 0
  8746                           ; Regs used in _getADCValue: [wreg-fsr0h+status,2-btemp+0+btemp+9-btemp+11+pclath+cstack
      +                          ]
  8747                           ;getADCValue@channel stored from wreg
  8748  0688  0020               	movlb	0	; select bank0
  8749  0689  00C8               	movwf	getADCValue@channel
  8750                           
  8751                           ;main.c: 34: float adcSum = 0;
  8752  068A  3000               	movlw	0
  8753  068B  00C9               	movwf	getADCValue@adcSum
  8754  068C  3000               	movlw	0
  8755  068D  00CA               	movwf	getADCValue@adcSum+1
  8756  068E  3000               	movlw	0
  8757  068F  00CB               	movwf	getADCValue@adcSum+2
  8758                           
  8759                           ;main.c: 35: unsigned int adcLoop = 1000;
  8760  0690  30E8               	movlw	232
  8761  0691  00C6               	movwf	getADCValue@adcLoop
  8762  0692  3003               	movlw	3
  8763  0693  00C7               	movwf	getADCValue@adcLoop+1
  8764                           
  8765                           ;main.c: 37: ADCON0bits.CHS = channel;
  8766  0694  0848               	movf	getADCValue@channel,w
  8767  0695  00C5               	movwf	??_getADCValue
  8768  0696  0DC5               	rlf	??_getADCValue,f
  8769  0697  0DC5               	rlf	??_getADCValue,f
  8770  0698  0021               	movlb	1	; select bank1
  8771  0699  081D               	movf	29,w	;volatile
  8772  069A  0020               	movlb	0	; select bank0
  8773  069B  0645               	xorwf	??_getADCValue,w
  8774  069C  3903               	andlw	-253
  8775  069D  0645               	xorwf	??_getADCValue,w
  8776  069E  0021               	movlb	1	; select bank1
  8777  069F  009D               	movwf	29	;volatile
  8778                           
  8779                           ;main.c: 38: FVRCONbits.FVREN = 1;
  8780  06A0  0022               	movlb	2	; select bank2
  8781  06A1  1797               	bsf	23,7	;volatile
  8782                           
  8783                           ;main.c: 39: ADCON0bits.ADON = 1;
  8784  06A2  0021               	movlb	1	; select bank1
  8785  06A3  141D               	bsf	29,0	;volatile
  8786                           
  8787                           ;main.c: 41: sleepMs(1);
  8788  06A4  3001               	movlw	1
  8789  06A5  00F0               	movwf	sleepMs@milliseconds
  8790  06A6  3000               	movlw	0
  8791  06A7  00F1               	movwf	sleepMs@milliseconds+1
  8792  06A8  318A  2202  3186   	fcall	_sleepMs
  8793  06AB                     l3112:	
  8794                           ;main.c: 43: while (adcLoop--){
  8795                           
  8796  06AB  3001               	movlw	1
  8797  06AC  0020               	movlb	0	; select bank0
  8798  06AD  02C6               	subwf	getADCValue@adcLoop,f
  8799  06AE  3000               	movlw	0
  8800  06AF  3BC7               	subwfb	getADCValue@adcLoop+1,f
  8801  06B0  0A46               	incf	getADCValue@adcLoop,w
  8802  06B1  1903               	btfsc	3,2
  8803  06B2  0A47               	incf	getADCValue@adcLoop+1,w
  8804  06B3  1903               	btfsc	3,2
  8805  06B4  2EE8               	goto	l167
  8806                           
  8807                           ;main.c: 45: ADCON0bits.ADGO = 1;
  8808  06B5  0021               	movlb	1	; select bank1
  8809  06B6  149D               	bsf	29,1	;volatile
  8810  06B7                     l3108:	
  8811                           ;main.c: 47: while (ADCON0bits.ADGO){
  8812                           
  8813  06B7  0021               	movlb	1	; select bank1
  8814  06B8  1C9D               	btfss	29,1	;volatile
  8815  06B9  2EC2               	goto	l3110
  8816                           
  8817                           ;main.c: 48: sleepMs(1);
  8818  06BA  3001               	movlw	1
  8819  06BB  00F0               	movwf	sleepMs@milliseconds
  8820  06BC  3000               	movlw	0
  8821  06BD  00F1               	movwf	sleepMs@milliseconds+1
  8822  06BE  318A  2202  3186   	fcall	_sleepMs
  8823  06C1  2EB7               	goto	l3108
  8824  06C2                     l3110:	
  8825                           
  8826                           ;main.c: 49: };main.c: 51: adcSum+= (ADRESL | (ADRESH << 8));
  8827  06C2  081C               	movf	28,w	;volatile
  8828  06C3  00FE               	movwf	126
  8829  06C4  01FF               	clrf	127
  8830  06C5  087E               	movf	126,w
  8831  06C6  00FF               	movwf	127
  8832  06C7  01FE               	clrf	126
  8833  06C8  087E               	movf	126,w
  8834  06C9  041B               	iorwf	27,w	;volatile
  8835  06CA  00F0               	movwf	___awtoft@c
  8836  06CB  087F               	movf	127,w
  8837  06CC  00F1               	movwf	___awtoft@c+1
  8838  06CD  3187  27DA  3186   	fcall	___awtoft
  8839  06D0  0870               	movf	?___awtoft,w
  8840  06D1  0020               	movlb	0	; select bank0
  8841  06D2  00AB               	movwf	___ftadd@f1
  8842  06D3  0871               	movf	?___awtoft+1,w
  8843  06D4  00AC               	movwf	___ftadd@f1+1
  8844  06D5  0872               	movf	?___awtoft+2,w
  8845  06D6  00AD               	movwf	___ftadd@f1+2
  8846  06D7  0849               	movf	getADCValue@adcSum,w
  8847  06D8  00AE               	movwf	___ftadd@f2
  8848  06D9  084A               	movf	getADCValue@adcSum+1,w
  8849  06DA  00AF               	movwf	___ftadd@f2+1
  8850  06DB  084B               	movf	getADCValue@adcSum+2,w
  8851  06DC  00B0               	movwf	___ftadd@f2+2
  8852  06DD  3183  2332  3186   	fcall	___ftadd
  8853  06E0  0020               	movlb	0	; select bank0
  8854  06E1  082B               	movf	?___ftadd,w
  8855  06E2  00C9               	movwf	getADCValue@adcSum
  8856  06E3  082C               	movf	?___ftadd+1,w
  8857  06E4  00CA               	movwf	getADCValue@adcSum+1
  8858  06E5  082D               	movf	?___ftadd+2,w
  8859  06E6  00CB               	movwf	getADCValue@adcSum+2
  8860  06E7  2EAB               	goto	l3112
  8861  06E8                     l167:	
  8862                           
  8863                           ;main.c: 53: };main.c: 55: FVRCONbits.FVREN = 0;
  8864  06E8  0022               	movlb	2	; select bank2
  8865  06E9  1397               	bcf	23,7	;volatile
  8866                           
  8867                           ;main.c: 56: ADCON0bits.ADON = 0;
  8868  06EA  0021               	movlb	1	; select bank1
  8869  06EB  101D               	bcf	29,0	;volatile
  8870                           
  8871                           ;main.c: 59: adcSum/= 1000;
  8872  06EC  3000               	movlw	0
  8873  06ED  0020               	movlb	0	; select bank0
  8874  06EE  00B5               	movwf	___ftdiv@f2
  8875  06EF  307A               	movlw	122
  8876  06F0  00B6               	movwf	___ftdiv@f2+1
  8877  06F1  3044               	movlw	68
  8878  06F2  00B7               	movwf	___ftdiv@f2+2
  8879  06F3  0849               	movf	getADCValue@adcSum,w
  8880  06F4  00B8               	movwf	___ftdiv@f1
  8881  06F5  084A               	movf	getADCValue@adcSum+1,w
  8882  06F6  00B9               	movwf	___ftdiv@f1+1
  8883  06F7  084B               	movf	getADCValue@adcSum+2,w
  8884  06F8  00BA               	movwf	___ftdiv@f1+2
  8885  06F9  3187  2731  3186   	fcall	___ftdiv
  8886  06FC  0020               	movlb	0	; select bank0
  8887  06FD  0835               	movf	?___ftdiv,w
  8888  06FE  00C9               	movwf	getADCValue@adcSum
  8889  06FF  0836               	movf	?___ftdiv+1,w
  8890  0700  00CA               	movwf	getADCValue@adcSum+1
  8891  0701  0837               	movf	?___ftdiv+2,w
  8892  0702  00CB               	movwf	getADCValue@adcSum+2
  8893                           
  8894                           ;main.c: 62: if (ADCON1bits.ADPREF == 0b11){
  8895  0703  0021               	movlb	1	; select bank1
  8896  0704  081E               	movf	30,w	;volatile
  8897  0705  3903               	andlw	3
  8898  0706  3A03               	xorlw	3
  8899  0707  1903               	btfsc	3,2
  8900  0708  2F22               	goto	l3124
  8901  0709  2F29               	goto	l3126
  8902  070A                     l3120:	
  8903                           ;main.c: 64: case 0b10:
  8904                           
  8905                           ;main.c: 63: switch (FVRCONbits.ADFVR){
  8906                           
  8907                           
  8908                           ;main.c: 65: adcSum/= 500;
  8909  070A  3000               	movlw	0
  8910  070B  0020               	movlb	0	; select bank0
  8911  070C  00B5               	movwf	___ftdiv@f2
  8912  070D  30FA               	movlw	250
  8913  070E  00B6               	movwf	___ftdiv@f2+1
  8914  070F  3043               	movlw	67
  8915  0710  00B7               	movwf	___ftdiv@f2+2
  8916  0711  0849               	movf	getADCValue@adcSum,w
  8917  0712  00B8               	movwf	___ftdiv@f1
  8918  0713  084A               	movf	getADCValue@adcSum+1,w
  8919  0714  00B9               	movwf	___ftdiv@f1+1
  8920  0715  084B               	movf	getADCValue@adcSum+2,w
  8921  0716  00BA               	movwf	___ftdiv@f1+2
  8922  0717  3187  2731  3186   	fcall	___ftdiv
  8923  071A  0020               	movlb	0	; select bank0
  8924  071B  0835               	movf	?___ftdiv,w
  8925  071C  00C9               	movwf	getADCValue@adcSum
  8926  071D  0836               	movf	?___ftdiv+1,w
  8927  071E  00CA               	movwf	getADCValue@adcSum+1
  8928  071F  0837               	movf	?___ftdiv+2,w
  8929  0720  00CB               	movwf	getADCValue@adcSum+2
  8930                           
  8931                           ;main.c: 67: }
  8932                           
  8933                           ;main.c: 66: break;
  8934  0721  2F29               	goto	l3126
  8935  0722                     l3124:	
  8936  0722  0022               	movlb	2	; select bank2
  8937  0723  0817               	movf	23,w	;volatile
  8938  0724  3903               	andlw	3
  8939                           
  8940                           ; Switch size 1, requested type "space"
  8941                           ; Number of cases is 1, Range of values is 2 to 2
  8942                           ; switch strategies available:
  8943                           ; Name         Instructions Cycles
  8944                           ; simple_byte            4     3 (average)
  8945                           ; direct_byte           11     9 (fixed)
  8946                           ; jumptable            263     9 (fixed)
  8947                           ;	Chosen strategy is simple_byte
  8948  0725  3A02               	xorlw	2	; case 2
  8949  0726  1903               	skipnz
  8950  0727  2F0A               	goto	l3120
  8951  0728  2F29               	goto	l3126
  8952  0729                     l3126:	
  8953                           
  8954                           ;main.c: 68: };main.c: 71: return adcSum;
  8955  0729  0020               	movlb	0	; select bank0
  8956  072A  0849               	movf	getADCValue@adcSum,w
  8957  072B  00C2               	movwf	?_getADCValue
  8958  072C  084A               	movf	getADCValue@adcSum+1,w
  8959  072D  00C3               	movwf	?_getADCValue+1
  8960  072E  084B               	movf	getADCValue@adcSum+2,w
  8961  072F  00C4               	movwf	?_getADCValue+2
  8962  0730  0008               	return
  8963  0731                     __end_of_getADCValue:	
  8964                           
  8965                           	psect	text38
  8966  0A02                     __ptext38:	
  8967 ;; *************** function _sleepMs *****************
  8968 ;; Defined at:
  8969 ;;		line 36 in file "interface.c"
  8970 ;; Parameters:    Size  Location     Type
  8971 ;;  milliseconds    2    0[COMMON] unsigned int 
  8972 ;; Auto vars:     Size  Location     Type
  8973 ;;  wdtps           1    3[COMMON] unsigned char 
  8974 ;; Return value:  Size  Location     Type
  8975 ;;                  1    wreg      void 
  8976 ;; Registers used:
  8977 ;;		wreg, status,2, status,0, btemp+10, btemp+11, pclath, cstack
  8978 ;; Tracked objects:
  8979 ;;		On entry : 0/0
  8980 ;;		On exit  : 0/0
  8981 ;;		Unchanged: 0/0
  8982 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8983 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8984 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8985 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8986 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8987 ;;Total ram usage:        4 bytes
  8988 ;; Hardware stack levels used:    1
  8989 ;; Hardware stack levels required when called:    8
  8990 ;; This function calls:
  8991 ;;		_resetWDT
  8992 ;; This function is called by:
  8993 ;;		_getADCValue
  8994 ;;		_sleepListren
  8995 ;;		_nrf24l01SendPacket
  8996 ;;		_hcsr04GetAerage
  8997 ;; This function uses a non-reentrant model
  8998 ;;
  8999                           
  9000                           
  9001                           ;psect for function _sleepMs
  9002  0A02                     _sleepMs:	
  9003                           
  9004                           ;interface.c: 38: unsigned char wdtps;;interface.c: 39: for (wdtps = 0; wdtps <= 0b10010
      +                          ; wdtps++){
  9005                           
  9006                           ;incstack = 0
  9007                           ; Regs used in _sleepMs: [wreg+status,2+status,0+btemp+10+btemp+11+pclath+cstack]
  9008  0A02  01F3               	clrf	sleepMs@wdtps
  9009  0A03  3013               	movlw	19
  9010  0A04  0273               	subwf	sleepMs@wdtps,w
  9011  0A05  1803               	btfsc	3,0
  9012  0A06  2A27               	goto	l2588
  9013  0A07                     l2576:	
  9014                           
  9015                           ;interface.c: 40: if ((milliseconds >> wdtps) & 0b1){
  9016  0A07  0871               	movf	sleepMs@milliseconds+1,w
  9017  0A08  00FF               	movwf	127
  9018  0A09  0870               	movf	sleepMs@milliseconds,w
  9019  0A0A  00FE               	movwf	126
  9020  0A0B  0A73               	incf	sleepMs@wdtps,w
  9021  0A0C  2A0F               	goto	u2344
  9022  0A0D                     u2345:	
  9023  0A0D  36FF               	lsrf	127,f
  9024  0A0E  0CFE               	rrf	126,f
  9025  0A0F                     u2344:	
  9026  0A0F  0B89               	decfsz	9,f
  9027  0A10  2A0D               	goto	u2345
  9028  0A11  1C7E               	btfss	126,0
  9029  0A12  2A1F               	goto	l2584
  9030                           
  9031                           ;interface.c: 42: WDTCONbits.WDTPS = wdtps;
  9032  0A13  0873               	movf	sleepMs@wdtps,w
  9033  0A14  00F2               	movwf	??_sleepMs
  9034  0A15  0DF2               	rlf	??_sleepMs,f
  9035  0A16  0021               	movlb	1	; select bank1
  9036  0A17  0817               	movf	23,w	;volatile
  9037  0A18  0672               	xorwf	??_sleepMs,w
  9038  0A19  39C1               	andlw	-63
  9039  0A1A  0672               	xorwf	??_sleepMs,w
  9040  0A1B  0097               	movwf	23	;volatile
  9041  0A1C  0063               	sleep	;# 
  9042                           
  9043                           ;interface.c: 44: __nop();
  9044  0A1D  0000               	nop
  9045                           
  9046                           ;interface.c: 45: __nop();
  9047  0A1E  0000               	nop
  9048  0A1F                     l2584:	
  9049  0A1F  3001               	movlw	1
  9050  0A20  00FF               	movwf	127
  9051  0A21  087F               	movf	127,w
  9052  0A22  07F3               	addwf	sleepMs@wdtps,f
  9053  0A23  3013               	movlw	19
  9054  0A24  0273               	subwf	sleepMs@wdtps,w
  9055  0A25  1C03               	skipc
  9056  0A26  2A07               	goto	l2576
  9057  0A27                     l2588:	
  9058                           
  9059                           ;interface.c: 50: };interface.c: 51: };interface.c: 53: resetWDT();
  9060  0A27  3188  20A0         	fcall	_resetWDT
  9061  0A29  0008               	return
  9062  0A2A                     __end_of_sleepMs:	
  9063                           
  9064                           	psect	text39
  9065  08A0                     __ptext39:	
  9066 ;; *************** function _resetWDT *****************
  9067 ;; Defined at:
  9068 ;;		line 31 in file "interface.c"
  9069 ;; Parameters:    Size  Location     Type
  9070 ;;		None
  9071 ;; Auto vars:     Size  Location     Type
  9072 ;;		None
  9073 ;; Return value:  Size  Location     Type
  9074 ;;                  1    wreg      void 
  9075 ;; Registers used:
  9076 ;;		wreg, status,2, status,0
  9077 ;; Tracked objects:
  9078 ;;		On entry : 0/0
  9079 ;;		On exit  : 0/0
  9080 ;;		Unchanged: 0/0
  9081 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9082 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9083 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9084 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9085 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9086 ;;Total ram usage:        0 bytes
  9087 ;; Hardware stack levels used:    1
  9088 ;; Hardware stack levels required when called:    7
  9089 ;; This function calls:
  9090 ;;		Nothing
  9091 ;; This function is called by:
  9092 ;;		_sleepMs
  9093 ;; This function uses a non-reentrant model
  9094 ;;
  9095                           
  9096                           
  9097                           ;psect for function _resetWDT
  9098  08A0                     _resetWDT:	
  9099                           
  9100                           ;interface.c: 32: WDTCONbits.WDTPS = 0b01100;
  9101                           
  9102                           ;incstack = 0
  9103                           ; Regs used in _resetWDT: [wreg+status,2+status,0]
  9104  08A0  0021               	movlb	1	; select bank1
  9105  08A1  0817               	movf	23,w	;volatile
  9106  08A2  39C1               	andlw	-63
  9107  08A3  3818               	iorlw	24
  9108  08A4  0097               	movwf	23	;volatile
  9109  08A5  0064               	clrwdt	;# 
  9110  08A6  0008               	return
  9111  08A7                     __end_of_resetWDT:	
  9112                           
  9113                           	psect	text40
  9114  0731                     __ptext40:	
  9115 ;; *************** function ___ftdiv *****************
  9116 ;; Defined at:
  9117 ;;		line 56 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\ftdiv.c"
  9118 ;; Parameters:    Size  Location     Type
  9119 ;;  f2              3   21[BANK0 ] float 
  9120 ;;  f1              3   24[BANK0 ] float 
  9121 ;; Auto vars:     Size  Location     Type
  9122 ;;  f3              3   29[BANK0 ] float 
  9123 ;;  sign            1   33[BANK0 ] unsigned char 
  9124 ;;  exp             1   32[BANK0 ] unsigned char 
  9125 ;;  cntr            1   28[BANK0 ] unsigned char 
  9126 ;; Return value:  Size  Location     Type
  9127 ;;                  3   21[BANK0 ] float 
  9128 ;; Registers used:
  9129 ;;		wreg, status,2, status,0, btemp+9, btemp+10, btemp+11, pclath, cstack
  9130 ;; Tracked objects:
  9131 ;;		On entry : 0/0
  9132 ;;		On exit  : 0/0
  9133 ;;		Unchanged: 0/0
  9134 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9135 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9136 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9137 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9138 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9139 ;;Total ram usage:       13 bytes
  9140 ;; Hardware stack levels used:    1
  9141 ;; Hardware stack levels required when called:    8
  9142 ;; This function calls:
  9143 ;;		___ftpack
  9144 ;; This function is called by:
  9145 ;;		_getADCValue
  9146 ;;		_loop
  9147 ;;		_hcsr04GetAerage
  9148 ;; This function uses a non-reentrant model
  9149 ;;
  9150                           
  9151                           
  9152                           ;psect for function ___ftdiv
  9153  0731                     ___ftdiv:	
  9154                           
  9155                           ;incstack = 0
  9156                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+btemp+9-btemp+11+pclath+cstack]
  9157  0731  0020               	movlb	0	; select bank0
  9158  0732  0838               	movf	___ftdiv@f1,w
  9159  0733  00FD               	movwf	125
  9160  0734  0839               	movf	___ftdiv@f1+1,w
  9161  0735  00FE               	movwf	126
  9162  0736  083A               	movf	___ftdiv@f1+2,w
  9163  0737  00FF               	movwf	127
  9164  0738  1003               	clrc
  9165  0739  0D7E               	rlf	126,w
  9166  073A  0D7F               	rlf	127,w
  9167  073B  00FF               	movwf	127
  9168  073C  087F               	movf	127,w
  9169  073D  00C0               	movwf	___ftdiv@exp
  9170  073E  0840               	movf	___ftdiv@exp,w
  9171  073F  1D03               	btfss	3,2
  9172  0740  2F48               	goto	l3046
  9173  0741  3000               	movlw	0
  9174  0742  00B5               	movwf	?___ftdiv
  9175  0743  3000               	movlw	0
  9176  0744  00B6               	movwf	?___ftdiv+1
  9177  0745  3000               	movlw	0
  9178  0746  00B7               	movwf	?___ftdiv+2
  9179  0747  0008               	return
  9180  0748                     l3046:	
  9181  0748  0835               	movf	___ftdiv@f2,w
  9182  0749  00FD               	movwf	125
  9183  074A  0836               	movf	___ftdiv@f2+1,w
  9184  074B  00FE               	movwf	126
  9185  074C  0837               	movf	___ftdiv@f2+2,w
  9186  074D  00FF               	movwf	127
  9187  074E  1003               	clrc
  9188  074F  0D7E               	rlf	126,w
  9189  0750  0D7F               	rlf	127,w
  9190  0751  00FF               	movwf	127
  9191  0752  087F               	movf	127,w
  9192  0753  00C1               	movwf	___ftdiv@sign
  9193  0754  0841               	movf	___ftdiv@sign,w
  9194  0755  1D03               	btfss	3,2
  9195  0756  2F5E               	goto	l3052
  9196  0757  3000               	movlw	0
  9197  0758  00B5               	movwf	?___ftdiv
  9198  0759  3000               	movlw	0
  9199  075A  00B6               	movwf	?___ftdiv+1
  9200  075B  3000               	movlw	0
  9201  075C  00B7               	movwf	?___ftdiv+2
  9202  075D  0008               	return
  9203  075E                     l3052:	
  9204  075E  3000               	movlw	0
  9205  075F  00BD               	movwf	___ftdiv@f3
  9206  0760  3000               	movlw	0
  9207  0761  00BE               	movwf	___ftdiv@f3+1
  9208  0762  3000               	movlw	0
  9209  0763  00BF               	movwf	___ftdiv@f3+2
  9210  0764  3089               	movlw	137
  9211  0765  0741               	addwf	___ftdiv@sign,w
  9212  0766  00BB               	movwf	??___ftdiv
  9213  0767  083B               	movf	??___ftdiv,w
  9214  0768  02C0               	subwf	___ftdiv@exp,f
  9215  0769  0838               	movf	___ftdiv@f1,w
  9216  076A  00FD               	movwf	125
  9217  076B  0839               	movf	___ftdiv@f1+1,w
  9218  076C  00FE               	movwf	126
  9219  076D  083A               	movf	___ftdiv@f1+2,w
  9220  076E  00FF               	movwf	127
  9221  076F  3010               	movlw	16
  9222  0770                     u3085:	
  9223  0770  36FF               	lsrf	127,f
  9224  0771  0CFE               	rrf	126,f
  9225  0772  0CFD               	rrf	125,f
  9226  0773  0B89               	decfsz	9,f
  9227  0774  2F70               	goto	u3085
  9228  0775  087D               	movf	125,w
  9229  0776  00FF               	movwf	127
  9230  0777  087F               	movf	127,w
  9231  0778  00C1               	movwf	___ftdiv@sign
  9232  0779  0835               	movf	___ftdiv@f2,w
  9233  077A  00FD               	movwf	125
  9234  077B  0836               	movf	___ftdiv@f2+1,w
  9235  077C  00FE               	movwf	126
  9236  077D  0837               	movf	___ftdiv@f2+2,w
  9237  077E  00FF               	movwf	127
  9238  077F  3010               	movlw	16
  9239  0780                     u3095:	
  9240  0780  36FF               	lsrf	127,f
  9241  0781  0CFE               	rrf	126,f
  9242  0782  0CFD               	rrf	125,f
  9243  0783  0B89               	decfsz	9,f
  9244  0784  2F80               	goto	u3095
  9245  0785  087D               	movf	125,w
  9246  0786  00FF               	movwf	127
  9247  0787  087F               	movf	127,w
  9248  0788  06C1               	xorwf	___ftdiv@sign,f
  9249  0789  3080               	movlw	128
  9250  078A  00FF               	movwf	127
  9251  078B  087F               	movf	127,w
  9252  078C  05C1               	andwf	___ftdiv@sign,f
  9253  078D  17B9               	bsf	___ftdiv@f1+1,7
  9254  078E  30FF               	movlw	255
  9255  078F  05B8               	andwf	___ftdiv@f1,f
  9256  0790  30FF               	movlw	255
  9257  0791  05B9               	andwf	___ftdiv@f1+1,f
  9258  0792  3000               	movlw	0
  9259  0793  05BA               	andwf	___ftdiv@f1+2,f
  9260  0794  17B6               	bsf	___ftdiv@f2+1,7
  9261  0795  30FF               	movlw	255
  9262  0796  05B5               	andwf	___ftdiv@f2,f
  9263  0797  30FF               	movlw	255
  9264  0798  05B6               	andwf	___ftdiv@f2+1,f
  9265  0799  3000               	movlw	0
  9266  079A  05B7               	andwf	___ftdiv@f2+2,f
  9267  079B  3018               	movlw	24
  9268  079C  00FF               	movwf	127
  9269  079D  087F               	movf	127,w
  9270  079E  00BC               	movwf	___ftdiv@cntr
  9271  079F                     l3070:	
  9272  079F  3001               	movlw	1
  9273  07A0                     u3105:	
  9274  07A0  35BD               	lslf	___ftdiv@f3,f
  9275  07A1  0DBE               	rlf	___ftdiv@f3+1,f
  9276  07A2  0DBF               	rlf	___ftdiv@f3+2,f
  9277  07A3  0B89               	decfsz	9,f
  9278  07A4  2FA0               	goto	u3105
  9279  07A5  0837               	movf	___ftdiv@f2+2,w
  9280  07A6  023A               	subwf	___ftdiv@f1+2,w
  9281  07A7  1D03               	skipz
  9282  07A8  2FAF               	goto	u3115
  9283  07A9  0836               	movf	___ftdiv@f2+1,w
  9284  07AA  0239               	subwf	___ftdiv@f1+1,w
  9285  07AB  1D03               	skipz
  9286  07AC  2FAF               	goto	u3115
  9287  07AD  0835               	movf	___ftdiv@f2,w
  9288  07AE  0238               	subwf	___ftdiv@f1,w
  9289  07AF                     u3115:	
  9290  07AF  1C03               	skipc
  9291  07B0  2FB8               	goto	l3078
  9292  07B1  0835               	movf	___ftdiv@f2,w
  9293  07B2  02B8               	subwf	___ftdiv@f1,f
  9294  07B3  0836               	movf	___ftdiv@f2+1,w
  9295  07B4  3BB9               	subwfb	___ftdiv@f1+1,f
  9296  07B5  0837               	movf	___ftdiv@f2+2,w
  9297  07B6  3BBA               	subwfb	___ftdiv@f1+2,f
  9298  07B7  143D               	bsf	___ftdiv@f3,0
  9299  07B8                     l3078:	
  9300  07B8  3001               	movlw	1
  9301  07B9                     u3125:	
  9302  07B9  35B8               	lslf	___ftdiv@f1,f
  9303  07BA  0DB9               	rlf	___ftdiv@f1+1,f
  9304  07BB  0DBA               	rlf	___ftdiv@f1+2,f
  9305  07BC  0B89               	decfsz	9,f
  9306  07BD  2FB9               	goto	u3125
  9307  07BE  3001               	movlw	1
  9308  07BF  02BC               	subwf	___ftdiv@cntr,f
  9309  07C0  1D03               	btfss	3,2
  9310  07C1  2F9F               	goto	l3070
  9311  07C2  083D               	movf	___ftdiv@f3,w
  9312  07C3  00A6               	movwf	___ftpack@arg
  9313  07C4  083E               	movf	___ftdiv@f3+1,w
  9314  07C5  00A7               	movwf	___ftpack@arg+1
  9315  07C6  083F               	movf	___ftdiv@f3+2,w
  9316  07C7  00A8               	movwf	___ftpack@arg+2
  9317  07C8  0840               	movf	___ftdiv@exp,w
  9318  07C9  00FF               	movwf	127
  9319  07CA  087F               	movf	127,w
  9320  07CB  00A9               	movwf	___ftpack@exp
  9321  07CC  0841               	movf	___ftdiv@sign,w
  9322  07CD  00FF               	movwf	127
  9323  07CE  087F               	movf	127,w
  9324  07CF  00AA               	movwf	___ftpack@sign
  9325  07D0  318D  254F         	fcall	___ftpack
  9326  07D2  0020               	movlb	0	; select bank0
  9327  07D3  0826               	movf	?___ftpack,w
  9328  07D4  00B5               	movwf	?___ftdiv
  9329  07D5  0827               	movf	?___ftpack+1,w
  9330  07D6  00B6               	movwf	?___ftdiv+1
  9331  07D7  0828               	movf	?___ftpack+2,w
  9332  07D8  00B7               	movwf	?___ftdiv+2
  9333  07D9  0008               	return
  9334  07DA                     __end_of___ftdiv:	
  9335                           
  9336                           	psect	text41
  9337  0332                     __ptext41:	
  9338 ;; *************** function ___ftadd *****************
  9339 ;; Defined at:
  9340 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\ftadd.c"
  9341 ;; Parameters:    Size  Location     Type
  9342 ;;  f1              3   11[BANK0 ] float 
  9343 ;;  f2              3   14[BANK0 ] float 
  9344 ;; Auto vars:     Size  Location     Type
  9345 ;;  exp1            1   20[BANK0 ] unsigned char 
  9346 ;;  exp2            1   19[BANK0 ] unsigned char 
  9347 ;;  sign            1   18[BANK0 ] unsigned char 
  9348 ;; Return value:  Size  Location     Type
  9349 ;;                  3   11[BANK0 ] float 
  9350 ;; Registers used:
  9351 ;;		wreg, status,2, status,0, btemp+9, btemp+10, btemp+11, pclath, cstack
  9352 ;; Tracked objects:
  9353 ;;		On entry : 0/0
  9354 ;;		On exit  : 0/0
  9355 ;;		Unchanged: 0/0
  9356 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9357 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9358 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9359 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9360 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9361 ;;Total ram usage:       10 bytes
  9362 ;; Hardware stack levels used:    1
  9363 ;; Hardware stack levels required when called:    8
  9364 ;; This function calls:
  9365 ;;		___ftpack
  9366 ;; This function is called by:
  9367 ;;		_getADCValue
  9368 ;;		_loop
  9369 ;;		___ftsub
  9370 ;;		_hcsr04GetAerage
  9371 ;; This function uses a non-reentrant model
  9372 ;;
  9373                           
  9374                           
  9375                           ;psect for function ___ftadd
  9376  0332                     ___ftadd:	
  9377                           
  9378                           ;incstack = 0
  9379                           ; Regs used in ___ftadd: [wreg+status,2+status,0+btemp+9-btemp+11+pclath+cstack]
  9380  0332  0020               	movlb	0	; select bank0
  9381  0333  082B               	movf	___ftadd@f1,w
  9382  0334  00FD               	movwf	125
  9383  0335  082C               	movf	___ftadd@f1+1,w
  9384  0336  00FE               	movwf	126
  9385  0337  082D               	movf	___ftadd@f1+2,w
  9386  0338  00FF               	movwf	127
  9387  0339  1003               	clrc
  9388  033A  0D7E               	rlf	126,w
  9389  033B  0D7F               	rlf	127,w
  9390  033C  00FF               	movwf	127
  9391  033D  087F               	movf	127,w
  9392  033E  00B4               	movwf	___ftadd@exp1
  9393  033F  082E               	movf	___ftadd@f2,w
  9394  0340  00FD               	movwf	125
  9395  0341  082F               	movf	___ftadd@f2+1,w
  9396  0342  00FE               	movwf	126
  9397  0343  0830               	movf	___ftadd@f2+2,w
  9398  0344  00FF               	movwf	127
  9399  0345  1003               	clrc
  9400  0346  0D7E               	rlf	126,w
  9401  0347  0D7F               	rlf	127,w
  9402  0348  00FF               	movwf	127
  9403  0349  087F               	movf	127,w
  9404  034A  00B3               	movwf	___ftadd@exp2
  9405  034B  0834               	movf	___ftadd@exp1,w
  9406  034C  1903               	btfsc	3,2
  9407  034D  2B5A               	goto	l2480
  9408  034E  0833               	movf	___ftadd@exp2,w
  9409  034F  0234               	subwf	___ftadd@exp1,w
  9410  0350  1803               	skipnc
  9411  0351  2B61               	goto	l2484
  9412  0352  0334               	decf	___ftadd@exp1,w
  9413  0353  3AFF               	xorlw	255
  9414  0354  0733               	addwf	___ftadd@exp2,w
  9415  0355  00B1               	movwf	??___ftadd
  9416  0356  3019               	movlw	25
  9417  0357  0231               	subwf	??___ftadd,w
  9418  0358  1C03               	skipc
  9419  0359  2B61               	goto	l2484
  9420  035A                     l2480:	
  9421  035A  082E               	movf	___ftadd@f2,w
  9422  035B  00AB               	movwf	?___ftadd
  9423  035C  082F               	movf	___ftadd@f2+1,w
  9424  035D  00AC               	movwf	?___ftadd+1
  9425  035E  0830               	movf	___ftadd@f2+2,w
  9426  035F  00AD               	movwf	?___ftadd+2
  9427  0360  0008               	return
  9428  0361                     l2484:	
  9429  0361  0833               	movf	___ftadd@exp2,w
  9430  0362  1903               	btfsc	3,2
  9431  0363  0008               	return
  9432  0364  0834               	movf	___ftadd@exp1,w
  9433  0365  0233               	subwf	___ftadd@exp2,w
  9434  0366  1803               	skipnc
  9435  0367  2B70               	goto	l2490
  9436  0368  0333               	decf	___ftadd@exp2,w
  9437  0369  3AFF               	xorlw	255
  9438  036A  0734               	addwf	___ftadd@exp1,w
  9439  036B  00B1               	movwf	??___ftadd
  9440  036C  3019               	movlw	25
  9441  036D  0231               	subwf	??___ftadd,w
  9442  036E  1803               	btfsc	3,0
  9443  036F  0008               	return
  9444  0370                     l2490:	
  9445  0370  3006               	movlw	6
  9446  0371  00FF               	movwf	127
  9447  0372  087F               	movf	127,w
  9448  0373  00B2               	movwf	___ftadd@sign
  9449  0374  1BAD               	btfsc	___ftadd@f1+2,7
  9450  0375  17B2               	bsf	___ftadd@sign,7
  9451  0376  1BB0               	btfsc	___ftadd@f2+2,7
  9452  0377  1732               	bsf	___ftadd@sign,6
  9453  0378  17AC               	bsf	___ftadd@f1+1,7
  9454  0379  30FF               	movlw	255
  9455  037A  05AB               	andwf	___ftadd@f1,f
  9456  037B  30FF               	movlw	255
  9457  037C  05AC               	andwf	___ftadd@f1+1,f
  9458  037D  3000               	movlw	0
  9459  037E  05AD               	andwf	___ftadd@f1+2,f
  9460  037F  17AF               	bsf	___ftadd@f2+1,7
  9461  0380  30FF               	movlw	255
  9462  0381  05AE               	andwf	___ftadd@f2,f
  9463  0382  30FF               	movlw	255
  9464  0383  05AF               	andwf	___ftadd@f2+1,f
  9465  0384  3000               	movlw	0
  9466  0385  05B0               	andwf	___ftadd@f2+2,f
  9467  0386  0833               	movf	___ftadd@exp2,w
  9468  0387  0234               	subwf	___ftadd@exp1,w
  9469  0388  1803               	skipnc
  9470  0389  2BAC               	goto	l2514
  9471  038A                     l2502:	
  9472  038A  3001               	movlw	1
  9473  038B                     u2135:	
  9474  038B  35AE               	lslf	___ftadd@f2,f
  9475  038C  0DAF               	rlf	___ftadd@f2+1,f
  9476  038D  0DB0               	rlf	___ftadd@f2+2,f
  9477  038E  0B89               	decfsz	9,f
  9478  038F  2B8B               	goto	u2135
  9479  0390  3001               	movlw	1
  9480  0391  02B3               	subwf	___ftadd@exp2,f
  9481  0392  0833               	movf	___ftadd@exp2,w
  9482  0393  0634               	xorwf	___ftadd@exp1,w
  9483  0394  1903               	skipnz
  9484  0395  2BA7               	goto	l2512
  9485  0396  3001               	movlw	1
  9486  0397  02B2               	subwf	___ftadd@sign,f
  9487  0398  0832               	movf	___ftadd@sign,w
  9488  0399  3907               	andlw	7
  9489  039A  1903               	btfsc	3,2
  9490  039B  2BA7               	goto	l2512
  9491  039C  2B8A               	goto	l2502
  9492  039D                     l2508:	
  9493  039D  3001               	movlw	1
  9494  039E                     u2165:	
  9495  039E  36AD               	lsrf	___ftadd@f1+2,f
  9496  039F  0CAC               	rrf	___ftadd@f1+1,f
  9497  03A0  0CAB               	rrf	___ftadd@f1,f
  9498  03A1  0B89               	decfsz	9,f
  9499  03A2  2B9E               	goto	u2165
  9500  03A3  3001               	movlw	1
  9501  03A4  00FF               	movwf	127
  9502  03A5  087F               	movf	127,w
  9503  03A6  07B4               	addwf	___ftadd@exp1,f
  9504  03A7                     l2512:	
  9505  03A7  0834               	movf	___ftadd@exp1,w
  9506  03A8  0633               	xorwf	___ftadd@exp2,w
  9507  03A9  1903               	btfsc	3,2
  9508  03AA  2BD1               	goto	l760
  9509  03AB  2B9D               	goto	l2508
  9510  03AC                     l2514:	
  9511  03AC  0834               	movf	___ftadd@exp1,w
  9512  03AD  0233               	subwf	___ftadd@exp2,w
  9513  03AE  1803               	skipnc
  9514  03AF  2BD1               	goto	l760
  9515  03B0                     l2516:	
  9516  03B0  3001               	movlw	1
  9517  03B1                     u2195:	
  9518  03B1  35AB               	lslf	___ftadd@f1,f
  9519  03B2  0DAC               	rlf	___ftadd@f1+1,f
  9520  03B3  0DAD               	rlf	___ftadd@f1+2,f
  9521  03B4  0B89               	decfsz	9,f
  9522  03B5  2BB1               	goto	u2195
  9523  03B6  3001               	movlw	1
  9524  03B7  02B4               	subwf	___ftadd@exp1,f
  9525  03B8  0833               	movf	___ftadd@exp2,w
  9526  03B9  0634               	xorwf	___ftadd@exp1,w
  9527  03BA  1903               	skipnz
  9528  03BB  2BCD               	goto	l2526
  9529  03BC  3001               	movlw	1
  9530  03BD  02B2               	subwf	___ftadd@sign,f
  9531  03BE  0832               	movf	___ftadd@sign,w
  9532  03BF  3907               	andlw	7
  9533  03C0  1903               	btfsc	3,2
  9534  03C1  2BCD               	goto	l2526
  9535  03C2  2BB0               	goto	l2516
  9536  03C3                     l2522:	
  9537  03C3  3001               	movlw	1
  9538  03C4                     u2225:	
  9539  03C4  36B0               	lsrf	___ftadd@f2+2,f
  9540  03C5  0CAF               	rrf	___ftadd@f2+1,f
  9541  03C6  0CAE               	rrf	___ftadd@f2,f
  9542  03C7  0B89               	decfsz	9,f
  9543  03C8  2BC4               	goto	u2225
  9544  03C9  3001               	movlw	1
  9545  03CA  00FF               	movwf	127
  9546  03CB  087F               	movf	127,w
  9547  03CC  07B3               	addwf	___ftadd@exp2,f
  9548  03CD                     l2526:	
  9549  03CD  0834               	movf	___ftadd@exp1,w
  9550  03CE  0633               	xorwf	___ftadd@exp2,w
  9551  03CF  1D03               	skipz
  9552  03D0  2BC3               	goto	l2522
  9553  03D1                     l760:	
  9554  03D1  1FB2               	btfss	___ftadd@sign,7
  9555  03D2  2BE3               	goto	l2530
  9556  03D3  30FF               	movlw	255
  9557  03D4  06AB               	xorwf	___ftadd@f1,f
  9558  03D5  30FF               	movlw	255
  9559  03D6  06AC               	xorwf	___ftadd@f1+1,f
  9560  03D7  30FF               	movlw	255
  9561  03D8  06AD               	xorwf	___ftadd@f1+2,f
  9562  03D9  3001               	movlw	1
  9563  03DA  07AB               	addwf	___ftadd@f1,f
  9564  03DB  3000               	movlw	0
  9565  03DC  1803               	skipnc
  9566  03DD  3001               	movlw	1
  9567  03DE  07AC               	addwf	___ftadd@f1+1,f
  9568  03DF  3000               	movlw	0
  9569  03E0  1803               	skipnc
  9570  03E1  3001               	movlw	1
  9571  03E2  07AD               	addwf	___ftadd@f1+2,f
  9572  03E3                     l2530:	
  9573  03E3  1F32               	btfss	___ftadd@sign,6
  9574  03E4  2BF5               	goto	l2534
  9575  03E5  30FF               	movlw	255
  9576  03E6  06AE               	xorwf	___ftadd@f2,f
  9577  03E7  30FF               	movlw	255
  9578  03E8  06AF               	xorwf	___ftadd@f2+1,f
  9579  03E9  30FF               	movlw	255
  9580  03EA  06B0               	xorwf	___ftadd@f2+2,f
  9581  03EB  3001               	movlw	1
  9582  03EC  07AE               	addwf	___ftadd@f2,f
  9583  03ED  3000               	movlw	0
  9584  03EE  1803               	skipnc
  9585  03EF  3001               	movlw	1
  9586  03F0  07AF               	addwf	___ftadd@f2+1,f
  9587  03F1  3000               	movlw	0
  9588  03F2  1803               	skipnc
  9589  03F3  3001               	movlw	1
  9590  03F4  07B0               	addwf	___ftadd@f2+2,f
  9591  03F5                     l2534:	
  9592  03F5  01B2               	clrf	___ftadd@sign
  9593  03F6  082B               	movf	___ftadd@f1,w
  9594  03F7  07AE               	addwf	___ftadd@f2,f
  9595  03F8  082C               	movf	___ftadd@f1+1,w
  9596  03F9  3DAF               	addwfc	___ftadd@f2+1,f
  9597  03FA  082D               	movf	___ftadd@f1+2,w
  9598  03FB  3DB0               	addwfc	___ftadd@f2+2,f
  9599  03FC  1FB0               	btfss	___ftadd@f2+2,7
  9600  03FD  2C10               	goto	l2544
  9601  03FE  30FF               	movlw	255
  9602  03FF  06AE               	xorwf	___ftadd@f2,f
  9603  0400  30FF               	movlw	255
  9604  0401  06AF               	xorwf	___ftadd@f2+1,f
  9605  0402  30FF               	movlw	255
  9606  0403  06B0               	xorwf	___ftadd@f2+2,f
  9607  0404  3001               	movlw	1
  9608  0405  07AE               	addwf	___ftadd@f2,f
  9609  0406  3000               	movlw	0
  9610  0407  1803               	skipnc
  9611  0408  3001               	movlw	1
  9612  0409  07AF               	addwf	___ftadd@f2+1,f
  9613  040A  3000               	movlw	0
  9614  040B  1803               	skipnc
  9615  040C  3001               	movlw	1
  9616  040D  07B0               	addwf	___ftadd@f2+2,f
  9617  040E  01B2               	clrf	___ftadd@sign
  9618  040F  0AB2               	incf	___ftadd@sign,f
  9619  0410                     l2544:	
  9620  0410  082E               	movf	___ftadd@f2,w
  9621  0411  00A6               	movwf	___ftpack@arg
  9622  0412  082F               	movf	___ftadd@f2+1,w
  9623  0413  00A7               	movwf	___ftpack@arg+1
  9624  0414  0830               	movf	___ftadd@f2+2,w
  9625  0415  00A8               	movwf	___ftpack@arg+2
  9626  0416  0834               	movf	___ftadd@exp1,w
  9627  0417  00FF               	movwf	127
  9628  0418  087F               	movf	127,w
  9629  0419  00A9               	movwf	___ftpack@exp
  9630  041A  0832               	movf	___ftadd@sign,w
  9631  041B  00FF               	movwf	127
  9632  041C  087F               	movf	127,w
  9633  041D  00AA               	movwf	___ftpack@sign
  9634  041E  318D  254F         	fcall	___ftpack
  9635  0420  0020               	movlb	0	; select bank0
  9636  0421  0826               	movf	?___ftpack,w
  9637  0422  00AB               	movwf	?___ftadd
  9638  0423  0827               	movf	?___ftpack+1,w
  9639  0424  00AC               	movwf	?___ftadd+1
  9640  0425  0828               	movf	?___ftpack+2,w
  9641  0426  00AD               	movwf	?___ftadd+2
  9642  0427  0008               	return
  9643  0428                     __end_of___ftadd:	
  9644                           
  9645                           	psect	text42
  9646  07DA                     __ptext42:	
  9647 ;; *************** function ___awtoft *****************
  9648 ;; Defined at:
  9649 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\awtoft.c"
  9650 ;; Parameters:    Size  Location     Type
  9651 ;;  c               2    0[COMMON] int 
  9652 ;; Auto vars:     Size  Location     Type
  9653 ;;  sign            1    3[COMMON] unsigned char 
  9654 ;; Return value:  Size  Location     Type
  9655 ;;                  3    0[COMMON] float 
  9656 ;; Registers used:
  9657 ;;		wreg, status,2, status,0, btemp+9, btemp+10, btemp+11, pclath, cstack
  9658 ;; Tracked objects:
  9659 ;;		On entry : 0/0
  9660 ;;		On exit  : 0/0
  9661 ;;		Unchanged: 0/0
  9662 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9663 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9664 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9665 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9666 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9667 ;;Total ram usage:        4 bytes
  9668 ;; Hardware stack levels used:    1
  9669 ;; Hardware stack levels required when called:    8
  9670 ;; This function calls:
  9671 ;;		___ftpack
  9672 ;; This function is called by:
  9673 ;;		_getADCValue
  9674 ;; This function uses a non-reentrant model
  9675 ;;
  9676                           
  9677                           
  9678                           ;psect for function ___awtoft
  9679  07DA                     ___awtoft:	
  9680                           
  9681                           ;incstack = 0
  9682                           ; Regs used in ___awtoft: [wreg+status,2+status,0+btemp+9-btemp+11+pclath+cstack]
  9683  07DA  01F3               	clrf	___awtoft@sign
  9684  07DB  1FF1               	btfss	___awtoft@c+1,7
  9685  07DC  2FE4               	goto	l3036
  9686  07DD  09F0               	comf	___awtoft@c,f
  9687  07DE  09F1               	comf	___awtoft@c+1,f
  9688  07DF  0AF0               	incf	___awtoft@c,f
  9689  07E0  1903               	skipnz
  9690  07E1  0AF1               	incf	___awtoft@c+1,f
  9691  07E2  01F3               	clrf	___awtoft@sign
  9692  07E3  0AF3               	incf	___awtoft@sign,f
  9693  07E4                     l3036:	
  9694  07E4  0870               	movf	___awtoft@c,w
  9695  07E5  0020               	movlb	0	; select bank0
  9696  07E6  00A6               	movwf	___ftpack@arg
  9697  07E7  0871               	movf	___awtoft@c+1,w
  9698  07E8  00A7               	movwf	___ftpack@arg+1
  9699  07E9  01A8               	clrf	___ftpack@arg+2
  9700  07EA  308E               	movlw	142
  9701  07EB  00FF               	movwf	127
  9702  07EC  087F               	movf	127,w
  9703  07ED  00A9               	movwf	___ftpack@exp
  9704  07EE  0873               	movf	___awtoft@sign,w
  9705  07EF  00FF               	movwf	127
  9706  07F0  087F               	movf	127,w
  9707  07F1  00AA               	movwf	___ftpack@sign
  9708  07F2  318D  254F         	fcall	___ftpack
  9709  07F4  0020               	movlb	0	; select bank0
  9710  07F5  0826               	movf	?___ftpack,w
  9711  07F6  00F0               	movwf	?___awtoft
  9712  07F7  0827               	movf	?___ftpack+1,w
  9713  07F8  00F1               	movwf	?___awtoft+1
  9714  07F9  0828               	movf	?___ftpack+2,w
  9715  07FA  00F2               	movwf	?___awtoft+2
  9716  07FB  0008               	return
  9717  07FC                     __end_of___awtoft:	
  9718                           
  9719                           	psect	text43
  9720  0D4F                     __ptext43:	
  9721 ;; *************** function ___ftpack *****************
  9722 ;; Defined at:
  9723 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\float.c"
  9724 ;; Parameters:    Size  Location     Type
  9725 ;;  arg             3    6[BANK0 ] unsigned um
  9726 ;;  exp             1    9[BANK0 ] unsigned char 
  9727 ;;  sign            1   10[BANK0 ] unsigned char 
  9728 ;; Auto vars:     Size  Location     Type
  9729 ;;		None
  9730 ;; Return value:  Size  Location     Type
  9731 ;;                  3    6[BANK0 ] float 
  9732 ;; Registers used:
  9733 ;;		wreg, status,2, status,0, btemp+9, btemp+10, btemp+11
  9734 ;; Tracked objects:
  9735 ;;		On entry : 0/0
  9736 ;;		On exit  : 0/0
  9737 ;;		Unchanged: 0/0
  9738 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9739 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9740 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9741 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9742 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9743 ;;Total ram usage:        5 bytes
  9744 ;; Hardware stack levels used:    1
  9745 ;; Hardware stack levels required when called:    7
  9746 ;; This function calls:
  9747 ;;		Nothing
  9748 ;; This function is called by:
  9749 ;;		___awtoft
  9750 ;;		___ftadd
  9751 ;;		___ftdiv
  9752 ;;		___ftmul
  9753 ;;		___lltoft
  9754 ;; This function uses a non-reentrant model
  9755 ;;
  9756                           
  9757                           
  9758                           ;psect for function ___ftpack
  9759  0D4F                     ___ftpack:	
  9760                           
  9761                           ;incstack = 0
  9762                           ; Regs used in ___ftpack: [wreg+status,2+status,0+btemp+9-btemp+11]
  9763  0D4F  0020               	movlb	0	; select bank0
  9764  0D50  0829               	movf	___ftpack@exp,w
  9765  0D51  1903               	btfsc	3,2
  9766  0D52  2D58               	goto	l2376
  9767  0D53  0828               	movf	___ftpack@arg+2,w
  9768  0D54  0427               	iorwf	___ftpack@arg+1,w
  9769  0D55  0426               	iorwf	___ftpack@arg,w
  9770  0D56  1D03               	skipz
  9771  0D57  2D69               	goto	l2384
  9772  0D58                     l2376:	
  9773  0D58  3000               	movlw	0
  9774  0D59  00A6               	movwf	?___ftpack
  9775  0D5A  3000               	movlw	0
  9776  0D5B  00A7               	movwf	?___ftpack+1
  9777  0D5C  3000               	movlw	0
  9778  0D5D  00A8               	movwf	?___ftpack+2
  9779  0D5E  0008               	return
  9780  0D5F                     l2380:	
  9781  0D5F  3001               	movlw	1
  9782  0D60  00FF               	movwf	127
  9783  0D61  087F               	movf	127,w
  9784  0D62  07A9               	addwf	___ftpack@exp,f
  9785  0D63  3001               	movlw	1
  9786  0D64                     u1815:	
  9787  0D64  36A8               	lsrf	___ftpack@arg+2,f
  9788  0D65  0CA7               	rrf	___ftpack@arg+1,f
  9789  0D66  0CA6               	rrf	___ftpack@arg,f
  9790  0D67  0B89               	decfsz	9,f
  9791  0D68  2D64               	goto	u1815
  9792  0D69                     l2384:	
  9793  0D69  30FE               	movlw	254
  9794  0D6A  0528               	andwf	___ftpack@arg+2,w
  9795  0D6B  1903               	btfsc	3,2
  9796  0D6C  2D82               	goto	l2392
  9797  0D6D  2D5F               	goto	l2380
  9798  0D6E                     l2386:	
  9799  0D6E  3001               	movlw	1
  9800  0D6F  00FF               	movwf	127
  9801  0D70  087F               	movf	127,w
  9802  0D71  07A9               	addwf	___ftpack@exp,f
  9803  0D72  3001               	movlw	1
  9804  0D73  07A6               	addwf	___ftpack@arg,f
  9805  0D74  3000               	movlw	0
  9806  0D75  1803               	skipnc
  9807  0D76  3001               	movlw	1
  9808  0D77  07A7               	addwf	___ftpack@arg+1,f
  9809  0D78  3000               	movlw	0
  9810  0D79  1803               	skipnc
  9811  0D7A  3001               	movlw	1
  9812  0D7B  07A8               	addwf	___ftpack@arg+2,f
  9813  0D7C  3001               	movlw	1
  9814  0D7D                     u1835:	
  9815  0D7D  36A8               	lsrf	___ftpack@arg+2,f
  9816  0D7E  0CA7               	rrf	___ftpack@arg+1,f
  9817  0D7F  0CA6               	rrf	___ftpack@arg,f
  9818  0D80  0B89               	decfsz	9,f
  9819  0D81  2D7D               	goto	u1835
  9820  0D82                     l2392:	
  9821  0D82  30FF               	movlw	255
  9822  0D83  0528               	andwf	___ftpack@arg+2,w
  9823  0D84  1903               	btfsc	3,2
  9824  0D85  2D8F               	goto	l2396
  9825  0D86  2D6E               	goto	l2386
  9826  0D87                     l2394:	
  9827  0D87  3001               	movlw	1
  9828  0D88  02A9               	subwf	___ftpack@exp,f
  9829  0D89  3001               	movlw	1
  9830  0D8A                     u1855:	
  9831  0D8A  35A6               	lslf	___ftpack@arg,f
  9832  0D8B  0DA7               	rlf	___ftpack@arg+1,f
  9833  0D8C  0DA8               	rlf	___ftpack@arg+2,f
  9834  0D8D  0B89               	decfsz	9,f
  9835  0D8E  2D8A               	goto	u1855
  9836  0D8F                     l2396:	
  9837  0D8F  1BA7               	btfsc	___ftpack@arg+1,7
  9838  0D90  2D95               	goto	l736
  9839  0D91  3002               	movlw	2
  9840  0D92  0229               	subwf	___ftpack@exp,w
  9841  0D93  1803               	skipnc
  9842  0D94  2D87               	goto	l2394
  9843  0D95                     l736:	
  9844  0D95  1829               	btfsc	___ftpack@exp,0
  9845  0D96  2D9D               	goto	l737
  9846  0D97  30FF               	movlw	255
  9847  0D98  05A6               	andwf	___ftpack@arg,f
  9848  0D99  307F               	movlw	127
  9849  0D9A  05A7               	andwf	___ftpack@arg+1,f
  9850  0D9B  30FF               	movlw	255
  9851  0D9C  05A8               	andwf	___ftpack@arg+2,f
  9852  0D9D                     l737:	
  9853  0D9D  1003               	clrc
  9854  0D9E  0CA9               	rrf	___ftpack@exp,f
  9855  0D9F  0829               	movf	___ftpack@exp,w
  9856  0DA0  00FD               	movwf	125
  9857  0DA1  01FE               	clrf	126
  9858  0DA2  01FF               	clrf	127
  9859  0DA3  3010               	movlw	16
  9860  0DA4                     u1895:	
  9861  0DA4  35FD               	lslf	125,f
  9862  0DA5  0DFE               	rlf	126,f
  9863  0DA6  0DFF               	rlf	127,f
  9864  0DA7  0B89               	decfsz	9,f
  9865  0DA8  2DA4               	goto	u1895
  9866  0DA9  087D               	movf	125,w
  9867  0DAA  04A6               	iorwf	___ftpack@arg,f
  9868  0DAB  087E               	movf	126,w
  9869  0DAC  04A7               	iorwf	___ftpack@arg+1,f
  9870  0DAD  087F               	movf	127,w
  9871  0DAE  04A8               	iorwf	___ftpack@arg+2,f
  9872  0DAF  082A               	movf	___ftpack@sign,w
  9873  0DB0  1903               	btfsc	3,2
  9874  0DB1  0008               	return
  9875  0DB2  17A8               	bsf	___ftpack@arg+2,7
  9876  0DB3  0008               	return
  9877  0DB4                     __end_of___ftpack:	
  9878                           
  9879                           	psect	text44
  9880  0903                     __ptext44:	
  9881 ;; *************** function _hcsr04Init *****************
  9882 ;; Defined at:
  9883 ;;		line 7 in file "HC-SR04.c"
  9884 ;; Parameters:    Size  Location     Type
  9885 ;;		None
  9886 ;; Auto vars:     Size  Location     Type
  9887 ;;		None
  9888 ;; Return value:  Size  Location     Type
  9889 ;;                  1    wreg      void 
  9890 ;; Registers used:
  9891 ;;		wreg, status,2, status,0
  9892 ;; Tracked objects:
  9893 ;;		On entry : 0/0
  9894 ;;		On exit  : 0/0
  9895 ;;		Unchanged: 0/0
  9896 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9897 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9898 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9899 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9900 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9901 ;;Total ram usage:        0 bytes
  9902 ;; Hardware stack levels used:    1
  9903 ;; Hardware stack levels required when called:    7
  9904 ;; This function calls:
  9905 ;;		Nothing
  9906 ;; This function is called by:
  9907 ;;		_main
  9908 ;; This function uses a non-reentrant model
  9909 ;;
  9910                           
  9911                           
  9912                           ;psect for function _hcsr04Init
  9913  0903                     _hcsr04Init:	
  9914                           
  9915                           ;HC-SR04.c: 10: IOCAPbits.IOCAP3 = 1;
  9916                           
  9917                           ;incstack = 0
  9918                           ; Regs used in _hcsr04Init: [wreg+status,2+status,0]
  9919  0903  0027               	movlb	7	; select bank7
  9920  0904  1591               	bsf	17,3	;volatile
  9921                           
  9922                           ;HC-SR04.c: 11: PIE0bits.IOCIE = 1;
  9923  0905  0021               	movlb	1	; select bank1
  9924  0906  1610               	bsf	16,4	;volatile
  9925                           
  9926                           ;HC-SR04.c: 14: TRISCbits.TRISC4 = 0;
  9927  0907  120E               	bcf	14,4	;volatile
  9928                           
  9929                           ;HC-SR04.c: 15: PORTCbits.RC4 = 0;
  9930  0908  0020               	movlb	0	; select bank0
  9931  0909  120E               	bcf	14,4	;volatile
  9932                           
  9933                           ;HC-SR04.c: 16: WPUAbits.WPUA3 = 0;
  9934  090A  0024               	movlb	4	; select bank4
  9935  090B  118C               	bcf	12,3	;volatile
  9936                           
  9937                           ;HC-SR04.c: 19: T1CONbits.TMR1ON = 0;
  9938  090C  0020               	movlb	0	; select bank0
  9939  090D  101B               	bcf	27,0	;volatile
  9940                           
  9941                           ;HC-SR04.c: 20: T1CONbits.TMR1CS = 0b01;
  9942  090E  081B               	movf	27,w	;volatile
  9943  090F  393F               	andlw	-193
  9944  0910  3840               	iorlw	64
  9945  0911  009B               	movwf	27	;volatile
  9946                           
  9947                           ;HC-SR04.c: 21: T1CONbits.T1CKPS = 0b00;
  9948  0912  30CF               	movlw	-49
  9949  0913  059B               	andwf	27,f	;volatile
  9950                           
  9951                           ;HC-SR04.c: 22: T1CONbits.T1SYNC = 1;
  9952  0914  151B               	bsf	27,2	;volatile
  9953                           
  9954                           ;HC-SR04.c: 23: T1GCONbits.TMR1GE = 0;
  9955  0915  139C               	bcf	28,7	;volatile
  9956  0916  0008               	return
  9957  0917                     __end_of_hcsr04Init:	
  9958                           
  9959                           	psect	intentry
  9960  0004                     __pintentry:	
  9961 ;; *************** function _ISR *****************
  9962 ;; Defined at:
  9963 ;;		line 13 in file "main.c"
  9964 ;; Parameters:    Size  Location     Type
  9965 ;;		None
  9966 ;; Auto vars:     Size  Location     Type
  9967 ;;		None
  9968 ;; Return value:  Size  Location     Type
  9969 ;;                  1    wreg      void 
  9970 ;; Registers used:
  9971 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, btemp+0, btemp+1, btemp+8, btemp+9, btemp+11, pclath, cstack
  9972 ;; Tracked objects:
  9973 ;;		On entry : 0/0
  9974 ;;		On exit  : 0/0
  9975 ;;		Unchanged: 0/0
  9976 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9977 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9978 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9979 ;;      Temps:          0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9980 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9981 ;;Total ram usage:        6 bytes
  9982 ;; Hardware stack levels used:    1
  9983 ;; Hardware stack levels required when called:    6
  9984 ;; This function calls:
  9985 ;;		_hcsr04ISR
  9986 ;;		_nrf24l01ISR
  9987 ;; This function is called by:
  9988 ;;		Interrupt level 1
  9989 ;; This function uses a non-reentrant model
  9990 ;;
  9991                           
  9992  0004                     _ISR:	
  9993                           
  9994                           ;incstack = 0
  9995                           ; Regs used in _ISR: [wreg-fsr0h+fsr1l+fsr1h+status,2-btemp+1+btemp+8+btemp+9+btemp+11+p
      +                          clath+cstack]
  9996  0004  3180               	pagesel	$
  9997  0005  0874               	movf	116,w
  9998  0006  0020               	movlb	0	; select bank0
  9999  0007  00A0               	movwf	??_ISR
 10000  0008  0875               	movf	117,w
 10001  0009  00A1               	movwf	??_ISR+1
 10002  000A  087C               	movf	124,w
 10003  000B  00A2               	movwf	??_ISR+2
 10004  000C  087D               	movf	125,w
 10005  000D  00A3               	movwf	??_ISR+3
 10006  000E  087F               	movf	127,w
 10007  000F  00A4               	movwf	??_ISR+4
 10008  0010  3091               	movlw	low ___int_sp
 10009  0011  0086               	movwf	6
 10010  0012  3022               	movlw	high ___int_sp
 10011  0013  0087               	movwf	7
 10012  0014  0875               	movf	117,w
 10013  0015  00A5               	movwf	??_ISR+5
 10014                           
 10015                           ;main.c: 15: if (IOCAFbits.IOCAF3){
 10016  0016  0027               	movlb	7	; select bank7
 10017  0017  1D93               	btfss	19,3	;volatile
 10018  0018  281E               	goto	i1l3444
 10019                           
 10020                           ;main.c: 16: hcsr04ISR();
 10021  0019  3187  27FC  3180   	fcall	_hcsr04ISR
 10022                           
 10023                           ;main.c: 17: IOCAFbits.IOCAF3 = 0;
 10024  001C  0027               	movlb	7	; select bank7
 10025  001D  1193               	bcf	19,3	;volatile
 10026  001E                     i1l3444:	
 10027                           
 10028                           ;main.c: 18: };main.c: 20: if (PIR0bits.INTF){
 10029  001E  0020               	movlb	0	; select bank0
 10030  001F  1C10               	btfss	16,0	;volatile
 10031  0020  2825               	goto	i1l3450
 10032                           
 10033                           ;main.c: 21: nrf24l01ISR();
 10034  0021  318C  24B3         	fcall	_nrf24l01ISR
 10035                           
 10036                           ;main.c: 22: PIR0bits.INTF = 0;
 10037  0023  0020               	movlb	0	; select bank0
 10038  0024  1010               	bcf	16,0	;volatile
 10039  0025                     i1l3450:	
 10040                           
 10041                           ;main.c: 23: };main.c: 25: if (PIR1bits.ADIF){
 10042  0025  1B11               	btfsc	17,6	;volatile
 10043                           
 10044                           ;main.c: 26: PIR1bits.ADIF = 0;
 10045  0026  1311               	bcf	17,6	;volatile
 10046  0027  0825               	movf	??_ISR+5,w
 10047  0028  00FF               	movwf	127
 10048  0029  0824               	movf	??_ISR+4,w
 10049  002A  00FD               	movwf	125
 10050  002B  0823               	movf	??_ISR+3,w
 10051  002C  00FC               	movwf	124
 10052  002D  0822               	movf	??_ISR+2,w
 10053  002E  00F5               	movwf	117
 10054  002F  0821               	movf	??_ISR+1,w
 10055  0030  00F4               	movwf	116
 10056  0031  0009               	retfie
 10057  0032                     __end_of_ISR:	
 10058                           
 10059                           	psect	text46
 10060  0CB3                     __ptext46:	
 10061 ;; *************** function _nrf24l01ISR *****************
 10062 ;; Defined at:
 10063 ;;		line 190 in file "nrf24l01.c"
 10064 ;; Parameters:    Size  Location     Type
 10065 ;;		None
 10066 ;; Auto vars:     Size  Location     Type
 10067 ;;		None
 10068 ;; Return value:  Size  Location     Type
 10069 ;;                  1    wreg      void 
 10070 ;; Registers used:
 10071 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, btemp+0, btemp+1, btemp+8, btemp+9, btemp+11, pclath
 10072 ;; Tracked objects:
 10073 ;;		On entry : 0/0
 10074 ;;		On exit  : 0/0
 10075 ;;		Unchanged: 0/0
 10076 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10077 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10078 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10079 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10080 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10081 ;;Total ram usage:        0 bytes
 10082 ;; Hardware stack levels used:    1
 10083 ;; Hardware stack levels required when called:    5
 10084 ;; This function calls:
 10085 ;;		_nrf24l01Send
 10086 ;;		_nrf24l01Service
 10087 ;;		_nrf24l01SetRXMode
 10088 ;; This function is called by:
 10089 ;;		_ISR
 10090 ;; This function uses a non-reentrant model
 10091 ;;
 10092                           
 10093                           
 10094                           ;psect for function _nrf24l01ISR
 10095  0CB3                     _nrf24l01ISR:	
 10096                           
 10097                           ;nrf24l01.c: 192: status.statusRegister.byte = nrf24l01Send((unsigned) 0b00000000 | (uns
      +                          igned) 0x07, 0);
 10098                           
 10099                           ;incstack = 0
 10100                           ; Regs used in _nrf24l01ISR: [wreg-fsr0h+fsr1l+fsr1h+status,2-btemp+1+btemp+8+btemp+9+bt
      +                          emp+11+pclath]
 10101  0CB3  3000               	movlw	0
 10102  0CB4  001E               	movwi fsr1++
 10103  0CB5  3007               	movlw	7
 10104  0CB6  3188  20F0  318C   	fcall	_nrf24l01Send
 10105  0CB9  00FF               	movwf	127
 10106  0CBA  087F               	movf	127,w
 10107  0CBB  0020               	movlb	0	; select bank0
 10108  0CBC  00E6               	movwf	_status+2	;volatile
 10109                           
 10110                           ;nrf24l01.c: 195: if (status.statusRegister.RX_DR){
 10111  0CBD  1F66               	btfss	_status+2,6	;volatile
 10112  0CBE  2CCB               	goto	i1l3368
 10113                           
 10114                           ;nrf24l01.c: 198: if (status.RX == 0){
 10115  0CBF  0865               	movf	_status+1,w	;volatile
 10116  0CC0  1D03               	btfss	3,2
 10117  0CC1  2CC7               	goto	i1l280
 10118                           
 10119                           ;nrf24l01.c: 199: status.RX = 1;
 10120  0CC2  3001               	movlw	1
 10121  0CC3  00FF               	movwf	127
 10122  0CC4  087F               	movf	127,w
 10123  0CC5  00E5               	movwf	_status+1	;volatile
 10124                           
 10125                           ;nrf24l01.c: 200: }
 10126  0CC6  2CC8               	goto	i1l3366
 10127  0CC7                     i1l280:	
 10128                           
 10129                           ;nrf24l01.c: 202: else{;nrf24l01.c: 203: status.statusRegister.RX_DR = 0;
 10130  0CC7  1366               	bcf	_status+2,6	;volatile
 10131  0CC8                     i1l3366:	
 10132                           
 10133                           ;nrf24l01.c: 204: };nrf24l01.c: 206: nrf24l01Service();
 10134  0CC8  318F  275B  318C   	fcall	_nrf24l01Service
 10135  0CCB                     i1l3368:	
 10136                           
 10137                           ;nrf24l01.c: 207: };nrf24l01.c: 209: if (status.statusRegister.TX_DS){
 10138  0CCB  0020               	movlb	0	; select bank0
 10139  0CCC  1EE6               	btfss	_status+2,5	;volatile
 10140  0CCD  2CF5               	goto	i1l3386
 10141                           
 10142                           ;nrf24l01.c: 212: status.TX = 3;
 10143  0CCE  3003               	movlw	3
 10144  0CCF  00FF               	movwf	127
 10145  0CD0  087F               	movf	127,w
 10146  0CD1  00E4               	movwf	_status	;volatile
 10147                           
 10148                           ;nrf24l01.c: 214: if (lastTXPacket->packetData.ACKRequest){
 10149  0CD2  0869               	movf	_lastTXPacket,w
 10150  0CD3  0084               	movwf	4
 10151  0CD4  3001               	movlw	1	; select bank2/3
 10152  0CD5  0085               	movwf	5
 10153  0CD6  1D00               	btfss	0,2
 10154  0CD7  2CE5               	goto	i1l3378
 10155                           
 10156                           ;nrf24l01.c: 216: status.TX = 4;
 10157  0CD8  3004               	movlw	4
 10158  0CD9  00FF               	movwf	127
 10159  0CDA  087F               	movf	127,w
 10160  0CDB  00E4               	movwf	_status	;volatile
 10161                           
 10162                           ;nrf24l01.c: 217: status.retryCount = 0xFF;
 10163  0CDC  30FF               	movlw	255
 10164  0CDD  00FF               	movwf	127
 10165  0CDE  087F               	movf	127,w
 10166  0CDF  00E8               	movwf	_status+4	;volatile
 10167                           
 10168                           ;nrf24l01.c: 218: nrf24l01SetRXMode(1);
 10169  0CE0  3001               	movlw	1
 10170  0CE1  318B  236F  318C   	fcall	_nrf24l01SetRXMode
 10171                           
 10172                           ;nrf24l01.c: 219: }else{
 10173  0CE4  2CE7               	goto	i1l3380
 10174  0CE5                     i1l3378:	
 10175                           
 10176                           ;nrf24l01.c: 220: status.TX = 0;
 10177  0CE5  0020               	movlb	0	; select bank0
 10178  0CE6  01E4               	clrf	_status	;volatile
 10179  0CE7                     i1l3380:	
 10180                           
 10181                           ;nrf24l01.c: 221: };nrf24l01.c: 223: if (lastTXPacket->packetData.IsACK){
 10182  0CE7  0020               	movlb	0	; select bank0
 10183  0CE8  0869               	movf	_lastTXPacket,w
 10184  0CE9  0084               	movwf	4
 10185  0CEA  3001               	movlw	1	; select bank2/3
 10186  0CEB  0085               	movwf	5
 10187  0CEC  1D80               	btfss	0,3
 10188  0CED  2CF2               	goto	i1l3384
 10189                           
 10190                           ;nrf24l01.c: 224: nrf24l01SetRXMode(1);
 10191  0CEE  3001               	movlw	1
 10192  0CEF  318B  236F  318C   	fcall	_nrf24l01SetRXMode
 10193  0CF2                     i1l3384:	
 10194                           
 10195                           ;nrf24l01.c: 225: };nrf24l01.c: 227: nrf24l01Service();
 10196  0CF2  318F  275B  318C   	fcall	_nrf24l01Service
 10197  0CF5                     i1l3386:	
 10198                           
 10199                           ;nrf24l01.c: 228: };nrf24l01.c: 233: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x0
      +                          7, status.statusRegister.byte);
 10200  0CF5  0020               	movlb	0	; select bank0
 10201  0CF6  0866               	movf	_status+2,w	;volatile
 10202  0CF7  001E               	movwi fsr1++
 10203  0CF8  3027               	movlw	39
 10204  0CF9  3188  20F0         	fcall	_nrf24l01Send
 10205  0CFB  0008               	return
 10206  0CFC                     __end_of_nrf24l01ISR:	
 10207                           
 10208                           	psect	text47
 10209  07FC                     __ptext47:	
 10210 ;; *************** function _hcsr04ISR *****************
 10211 ;; Defined at:
 10212 ;;		line 88 in file "HC-SR04.c"
 10213 ;; Parameters:    Size  Location     Type
 10214 ;;		None
 10215 ;; Auto vars:     Size  Location     Type
 10216 ;;		None
 10217 ;; Return value:  Size  Location     Type
 10218 ;;                  1    wreg      void 
 10219 ;; Registers used:
 10220 ;;		None
 10221 ;; Tracked objects:
 10222 ;;		On entry : 0/0
 10223 ;;		On exit  : 0/0
 10224 ;;		Unchanged: 0/0
 10225 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10226 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10227 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10228 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10229 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10230 ;;Total ram usage:        0 bytes
 10231 ;; Hardware stack levels used:    1
 10232 ;; This function calls:
 10233 ;;		Nothing
 10234 ;; This function is called by:
 10235 ;;		_ISR
 10236 ;; This function uses a non-reentrant model
 10237 ;;
 10238                           
 10239                           
 10240                           ;psect for function _hcsr04ISR
 10241  07FC                     _hcsr04ISR:	
 10242                           
 10243                           ;HC-SR04.c: 89: T1CONbits.TMR1ON = 0;
 10244                           
 10245                           ;incstack = 0
 10246                           ; Regs used in _hcsr04ISR: []
 10247  07FC  0020               	movlb	0	; select bank0
 10248  07FD  101B               	bcf	27,0	;volatile
 10249  07FE  0008               	return
 10250  07FF                     __end_of_hcsr04ISR:	
 10251  0074                     btemp	set	116	;btemp
 10252  0074                     wtemp0	set	116
 10253  0076                     wtemp1	set	118
 10254  0078                     wtemp2	set	120
 10255  007A                     wtemp3	set	122
 10256  007C                     wtemp4	set	124
 10257  007E                     wtemp5	set	126
 10258  0074                     ttemp0	set	116
 10259  0077                     ttemp1	set	119
 10260  007A                     ttemp2	set	122
 10261  007D                     ttemp3	set	125
 10262  0074                     ltemp0	set	116
 10263  0078                     ltemp1	set	120
 10264  007C                     ltemp2	set	124
 10265  0076                     ltemp3	set	118


Data Sizes:
    Strings     39
    Constant    46
    Data        1
    BSS         125
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON            4      4       4
    BANK0            80     68      74
    BANK1            80     71      80
    BANK2            80     35      80
    BANK3            80      0      66
    BANK4            80      0       0
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    ftoa@status	PTR int  size(1) Largest target is 2
		 -> sendMessage@ftoaStatus(BANK1[2]), 

    strlen@s	PTR const unsigned char  size(1) Largest target is 33
		 -> NULL(NULL[0]), RXPacket.Message(BANK3[32]), TXPacket.Message(BANK3[32]), TXPacket(BANK3[33]), 
		 -> RXPacket(BANK3[33]), romDataMap(BANK2[28]), 

    strlen@cp	PTR const unsigned char  size(1) Largest target is 33
		 -> NULL(NULL[0]), RXPacket.Message(BANK3[32]), TXPacket.Message(BANK3[32]), TXPacket(BANK3[33]), 
		 -> RXPacket(BANK3[33]), romDataMap(BANK2[28]), 

    strcpy@from	PTR const unsigned char  size(2) Largest target is 33
		 -> romDataMap.name(BANK2[16]), packet.Message(BANK0[32]), packet.Message(BANK0[32]), main@packet(BANK2[33]), 
		 -> STR_5(CODE[4]), loop@packet(BANK1[33]), romDataMap(BANK2[28]), 

    strcpy@to	PTR unsigned char  size(2) Largest target is 33
		 -> TXPacket(BANK3[33]), main@packet(BANK2[33]), loop@packet(BANK1[33]), romDataMap(BANK2[28]), 

    strcpy@cp	PTR unsigned char  size(2) Largest target is 33
		 -> TXPacket(BANK3[33]), main@packet(BANK2[33]), loop@packet(BANK1[33]), romDataMap(BANK2[28]), 

    strcmp@s2	PTR const unsigned char  size(1) Largest target is 33
		 -> TXPacket.Message(BANK3[32]), TXPacket(BANK3[33]), 

    strcmp@s1	PTR const unsigned char  size(1) Largest target is 33
		 -> RXPacket.Message(BANK3[32]), RXPacket(BANK3[33]), 

    strcat@from	PTR const unsigned char  size(2) Largest target is 17
		 -> ftoa@buf(BANK2[17]), STR_7(CODE[6]), STR_6(CODE[6]), STR_4(CODE[5]), 
		 -> STR_3(CODE[5]), STR_2(CODE[2]), STR_1(CODE[2]), 

    strcat@to	PTR unsigned char  size(2) Largest target is 33
		 -> main@packet(BANK2[33]), loop@packet(BANK1[33]), 

    strcat@cp	PTR unsigned char  size(2) Largest target is 33
		 -> main@packet(BANK2[33]), loop@packet(BANK1[33]), 

    memset@p1	PTR void  size(2) Largest target is 33
		 -> RXPacket(BANK3[33]), main@packet(BANK2[33]), loop@packet(BANK1[33]), 

    memset@p	PTR unsigned char  size(2) Largest target is 33
		 -> RXPacket(BANK3[33]), main@packet(BANK2[33]), loop@packet(BANK1[33]), 

    ftoa@cp	PTR unsigned char  size(1) Largest target is 17
		 -> ftoa@buf(BANK2[17]), 

    sprintf@f	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_8(CODE[11]), 

    sprintf@sp	PTR unsigned char  size(1) Largest target is 17
		 -> ftoa@buf(BANK2[17]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    nrf24l01SendTXBuffer@packet	PTR struct . size(1) Largest target is 33
		 -> TXPacket(BANK3[33]), RXPacket(BANK3[33]), 

    lastTXPacket	PTR struct . size(1) Largest target is 33
		 -> NULL(NULL[0]), TXPacket(BANK3[33]), RXPacket(BANK3[33]), 

    nrf24l01SendPacket@txPacket	PTR struct . size(2) Largest target is 33
		 -> main@packet(BANK2[33]), loop@packet(BANK1[33]), 

    sp__nrf24l01GetRXPacket	PTR struct . size(1) Largest target is 33
		 -> RXPacket(BANK3[33]), 

    nrf24l01GetPipe@name	PTR unsigned char  size(1) Largest target is 28
		 -> romDataMap(BANK2[28]), 

    sp__ftoa	PTR unsigned char  size(1) Largest target is 17
		 -> ftoa@buf(BANK2[17]), 

    sendMessage@topic	PTR const unsigned char  size(2) Largest target is 6
		 -> STR_7(CODE[6]), STR_6(CODE[6]), STR_4(CODE[5]), STR_3(CODE[5]), 

    sp__strcat	PTR unsigned char  size(2) Largest target is 33
		 -> main@packet(BANK2[33]), loop@packet(BANK1[33]), 

    sp__strcpy	PTR unsigned char  size(2) Largest target is 33
		 -> TXPacket(BANK3[33]), main@packet(BANK2[33]), loop@packet(BANK1[33]), romDataMap(BANK2[28]), 

    sp__memset	PTR void  size(2) Largest target is 33
		 -> RXPacket(BANK3[33]), main@packet(BANK2[33]), loop@packet(BANK1[33]), 

    sendMessage@packet	PTR struct . size(2) Largest target is 33
		 -> main@packet(BANK2[33]), loop@packet(BANK1[33]), 

    romData	PTR struct . size(1) Largest target is 28
		 -> romDataMap(BANK2[28]), 


Critical Paths under _main in COMMON

    _main->_nrf24l01SetTXPipe
    _main->_strcpy
    _nrf24l01InitRegisters->_nrf24l01SetTXPipe
    _nrf24l01SetTXPipe->___bmul
    _nrf24l01GetPipe->___lwmod
    _sendMessage->_strcpy
    _sleepListren->_sleepMs
    _nrf24l01SendPacket->_sleepMs
    _nrf24l01SendPacket->_strcpy
    _ftoa->___lltoft
    _sprintf->___wmul
    ___ftsub->___lltoft
    _getADCValue->___awtoft
    _getADCValue->_sleepMs
    ___ftadd->___awtoft

Critical Paths under _ISR in COMMON

    None.

Critical Paths under _main in BANK0

    _nrf24l01Init->_nrf24l01InitRegisters
    _nrf24l01InitRegisters->_nrf24l01SetTXPipe
    _nrf24l01GetPipe->___lwmod
    _sendMessage->_strcat
    _nrf24l01SendPacket->_strcpy
    _ftoa->___fttol
    _sprintf->___llmod
    ___llmod->___lldiv
    ___lltoft->___ftpack
    ___fttol->___ftmul
    ___ftsub->___ftadd
    ___ftneg->_getADCValue
    ___ftmul->_getADCValue
    _getADCValue->___ftdiv
    ___ftdiv->___ftadd
    ___ftadd->___ftpack
    ___ftadd->___ftpack
    ___awtoft->___ftpack

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_loop
    _loop->_sendMessage
    _sendMessage->_strcat
    _strcat->_ftoa

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                35    35      0   73602
                                              0 BANK2     35    35      0
                         _hcsr04Init
                               _loop
                    _nrf24l01GetPipe
                       _nrf24l01Init
                  _nrf24l01SetRXPipe
                  _nrf24l01SetTXPipe
                        _sendMessage
                             _strcpy
 ---------------------------------------------------------------------------------
 (1) _nrf24l01Init                                         1     1      0    1772
                                             16 BANK0      1     1      0
              _nrf24l01InitRegisters
              _nrf24l01InterfaceInit
 ---------------------------------------------------------------------------------
 (2) _nrf24l01InterfaceInit                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _nrf24l01InitRegisters                                9     9      0    1772
                                              7 BANK0      9     9      0
                             ___bmul
                     _nrf24l01SPIEnd
                    _nrf24l01SPISend
                   _nrf24l01SPIStart
                       _nrf24l01Send
                  _nrf24l01SetRXPipe
                  _nrf24l01SetTXPipe
 ---------------------------------------------------------------------------------
 (1) _nrf24l01SetTXPipe                                    2     2      0     314
                                              3 COMMON     1     1      0
                                              6 BANK0      1     1      0
                             ___bmul
                     _nrf24l01SPIEnd
                    _nrf24l01SPISend
                   _nrf24l01SPIStart
 ---------------------------------------------------------------------------------
 (2) ___bmul                                               3     2      1     270
                                              0 COMMON     3     2      1
 ---------------------------------------------------------------------------------
 (1) _nrf24l01SetRXPipe                                    3     3      0     497
                                              0 COMMON     3     3      0
                       _nrf24l01Send
 ---------------------------------------------------------------------------------
 (1) _nrf24l01GetPipe                                      4     4      0     604
                                              7 BANK0      4     4      0
                            ___lwmod
                             _strlen
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4     337
                                              0 COMMON     4     0      4
                                              6 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _loop                                                45    45      0   47648
                                             26 BANK1     45    45      0
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___ftneg
                        _getADCValue
                        _sendMessage
 ---------------------------------------------------------------------------------
 (1) _sendMessage                                          9     2      7   22142
                                             17 BANK1      9     2      7
                               _ftoa
                        _getADCValue (ARG)
                             _memset
                 _nrf24l01SendPacket
                       _sleepListren
                             _strcat
                             _strcpy
 ---------------------------------------------------------------------------------
 (2) _strcat                                               6     2      4     751
                                             66 BANK0      2     2      0
                                             13 BANK1      4     0      4
                               _ftoa (ARG)
 ---------------------------------------------------------------------------------
 (2) _sleepListren                                         2     0      2     757
                                              6 BANK0      2     0      2
                            _sleepMs
 ---------------------------------------------------------------------------------
 (2) _nrf24l01SendPacket                                   2     0      2    3253
                                              8 BANK0      2     0      2
                    _nrf24l01Service
                            _sleepMs
                             _strcpy
 ---------------------------------------------------------------------------------
 (1) _strcpy                                               6     2      4     462
                                              0 COMMON     4     0      4
                                              6 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (11) _nrf24l01Service                                     2     2      0    2061
                             _memset
                     _nrf24l01SPIEnd
                    _nrf24l01SPISend
                   _nrf24l01SPIStart
                       _nrf24l01Send
               _nrf24l01SendTXBuffer
                  _nrf24l01SetRXMode
                             _strcmp
 ---------------------------------------------------------------------------------
 (12) _strcmp                                              3     2      1     117
 ---------------------------------------------------------------------------------
 (12) _nrf24l01SendTXBuffer                                3     3      0     766
                     _nrf24l01SPIEnd
                    _nrf24l01SPISend
                   _nrf24l01SPIStart
                  _nrf24l01SetRXMode
                             _strlen
 ---------------------------------------------------------------------------------
 (13) _strlen                                              2     2      0     116
 ---------------------------------------------------------------------------------
 (11) _nrf24l01SetRXMode                                   1     1      0     511
                       _nrf24l01Send
 ---------------------------------------------------------------------------------
 (12) _nrf24l01Send                                        2     1      1     401
                     _nrf24l01SPIEnd
                    _nrf24l01SPISend
                   _nrf24l01SPIStart
 ---------------------------------------------------------------------------------
 (13) _nrf24l01SPIStart                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (13) _nrf24l01SPISend                                     1     1      0      22
 ---------------------------------------------------------------------------------
 (13) _nrf24l01SPIEnd                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (12) _memset                                              8     2      6     174
 ---------------------------------------------------------------------------------
 (2) _ftoa                                                13     9      4   15349
                                              0 BANK1     13     9      4
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                           ___lltoft
                            _sprintf
 ---------------------------------------------------------------------------------
 (3) _sprintf                                             34    24     10    2229
                                             27 BANK0     26    16     10
                            ___lldiv
                            ___llmod
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (4) _isdigit                                              2     2      0      68
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4     448
                                              0 COMMON     4     0      4
                                              6 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) ___llmod                                              9     1      8     337
                                              0 COMMON     1     1      0
                                             19 BANK0      8     0      8
                            ___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (4) ___lldiv                                             13     5      8     340
                                              6 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 (3) ___lltoft                                             5     1      4    3092
                                              0 COMMON     4     0      4
                                             11 BANK0      1     1      0
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) ___fttol                                             10     6      4     430
                                             56 BANK0     10     6      4
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftsub                                              6     0      6    4909
                                             21 BANK0      6     0      6
                            ___ftadd
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftneg                                              3     0      3     223
                                             44 BANK0      3     0      3
                            ___ftadd (ARG)
                            ___ftdiv (ARG)
                        _getADCValue (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftmul                                             12     6      6    3616
                                             44 BANK0     12     6      6
                           ___ftpack
                        _getADCValue (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftge                                               6     0      6     314
                                              6 BANK0      6     0      6
 ---------------------------------------------------------------------------------
 (2) _getADCValue                                         10     7      3   12665
                                             34 BANK0     10     7      3
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            _sleepMs
 ---------------------------------------------------------------------------------
 (3) _sleepMs                                              4     2      2     646
                                              0 COMMON     4     2      2
                           _resetWDT
 ---------------------------------------------------------------------------------
 (4) _resetWDT                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (3) ___ftdiv                                             13     7      6    4104
                                             21 BANK0     13     7      6
                            ___ftadd (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) ___ftadd                                             10     4      6    4664
                                             11 BANK0     10     4      6
                           ___awtoft (ARG)
                           ___ftpack
                           ___ftpack (ARG)
 ---------------------------------------------------------------------------------
 (3) ___awtoft                                             4     1      3    3114
                                              0 COMMON     4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) ___ftpack                                             5     0      5    2934
                                              6 BANK0      5     0      5
 ---------------------------------------------------------------------------------
 (1) _hcsr04Init                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (9) _ISR                                                  6     6      0    2973
                                              0 BANK0      6     6      0
                          _hcsr04ISR
                        _nrf24l01ISR
 ---------------------------------------------------------------------------------
 (10) _nrf24l01ISR                                         0     0      0    2973
                       _nrf24l01Send
                    _nrf24l01Service
                  _nrf24l01SetRXMode
 ---------------------------------------------------------------------------------
 (11) _nrf24l01Service                                     2     2      0    2061
                             _memset
                     _nrf24l01SPIEnd
                    _nrf24l01SPISend
                   _nrf24l01SPIStart
                       _nrf24l01Send
               _nrf24l01SendTXBuffer
                  _nrf24l01SetRXMode
                             _strcmp
 ---------------------------------------------------------------------------------
 (12) _strcmp                                              3     2      1     117
 ---------------------------------------------------------------------------------
 (12) _nrf24l01SendTXBuffer                                3     3      0     766
                     _nrf24l01SPIEnd
                    _nrf24l01SPISend
                   _nrf24l01SPIStart
                  _nrf24l01SetRXMode
                             _strlen
 ---------------------------------------------------------------------------------
 (13) _strlen                                              2     2      0     116
 ---------------------------------------------------------------------------------
 (11) _nrf24l01SetRXMode                                   1     1      0     511
                       _nrf24l01Send
 ---------------------------------------------------------------------------------
 (12) _nrf24l01Send                                        2     1      1     401
                     _nrf24l01SPIEnd
                    _nrf24l01SPISend
                   _nrf24l01SPIStart
 ---------------------------------------------------------------------------------
 (13) _nrf24l01SPIStart                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (13) _nrf24l01SPISend                                     1     1      0      22
 ---------------------------------------------------------------------------------
 (13) _nrf24l01SPIEnd                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (12) _memset                                              8     2      6     174
 ---------------------------------------------------------------------------------
 (10) _hcsr04ISR                                           0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 13
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _hcsr04Init
   _loop
     ___ftadd
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___ftpack (ARG)
     ___ftdiv
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
     ___ftmul
       ___ftpack
       _getADCValue (ARG)
         ___awtoft
           ___ftpack
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftdiv
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
         _sleepMs
           _resetWDT
     ___ftneg
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftdiv (ARG)
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
       _getADCValue (ARG)
         ___awtoft
           ___ftpack
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftdiv
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
         _sleepMs
           _resetWDT
     _getADCValue
       ___awtoft
         ___ftpack
       ___ftadd
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftdiv
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
       _sleepMs
         _resetWDT
     _sendMessage
       _ftoa
         ___ftge
         ___ftmul
           ___ftpack
           _getADCValue (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
             _sleepMs
               _resetWDT
         ___ftneg
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv (ARG)
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
           _getADCValue (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
             _sleepMs
               _resetWDT
         ___ftsub
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___fttol
           ___ftmul (ARG)
             ___ftpack
             _getADCValue (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               _sleepMs
                 _resetWDT
         ___lltoft
           ___ftpack
         _sprintf
           ___lldiv
           ___llmod
             ___lldiv (ARG)
           ___wmul
           _isdigit
       _getADCValue (ARG)
         ___awtoft
           ___ftpack
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftdiv
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
         _sleepMs
           _resetWDT
       _memset (ARG)
       _nrf24l01SendPacket (ARG)
         _nrf24l01Service
           _memset
           _nrf24l01SPIEnd
           _nrf24l01SPISend
           _nrf24l01SPIStart
           _nrf24l01Send
             _nrf24l01SPIEnd
             _nrf24l01SPISend
             _nrf24l01SPIStart
           _nrf24l01SendTXBuffer
             _nrf24l01SPIEnd
             _nrf24l01SPISend
             _nrf24l01SPIStart
             _nrf24l01SetRXMode
               _nrf24l01Send
                 _nrf24l01SPIEnd
                 _nrf24l01SPISend
                 _nrf24l01SPIStart
             _strlen
           _nrf24l01SetRXMode
             _nrf24l01Send
               _nrf24l01SPIEnd
               _nrf24l01SPISend
               _nrf24l01SPIStart
           _strcmp
         _sleepMs
           _resetWDT
         _strcpy
       _sleepListren (ARG)
         _sleepMs
           _resetWDT
       _strcat (ARG)
         _ftoa (ARG)
           ___ftge
           ___ftmul
             ___ftpack
             _getADCValue (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               _sleepMs
                 _resetWDT
           ___ftneg
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
             _getADCValue (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               _sleepMs
                 _resetWDT
           ___ftsub
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
           ___fttol
             ___ftmul (ARG)
               ___ftpack
               _getADCValue (ARG)
                 ___awtoft
                   ___ftpack
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                 _sleepMs
                   _resetWDT
           ___lltoft
             ___ftpack
           _sprintf
             ___lldiv
             ___llmod
               ___lldiv (ARG)
             ___wmul
             _isdigit
       _strcpy (ARG)
   _nrf24l01GetPipe
     ___lwmod
     _strlen
   _nrf24l01Init
     _nrf24l01InitRegisters
       ___bmul
       _nrf24l01SPIEnd
       _nrf24l01SPISend
       _nrf24l01SPIStart
       _nrf24l01Send
         _nrf24l01SPIEnd
         _nrf24l01SPISend
         _nrf24l01SPIStart
       _nrf24l01SetRXPipe
         _nrf24l01Send
           _nrf24l01SPIEnd
           _nrf24l01SPISend
           _nrf24l01SPIStart
       _nrf24l01SetTXPipe
         ___bmul
         _nrf24l01SPIEnd
         _nrf24l01SPISend
         _nrf24l01SPIStart
     _nrf24l01InterfaceInit
   _nrf24l01SetRXPipe
     _nrf24l01Send
       _nrf24l01SPIEnd
       _nrf24l01SPISend
       _nrf24l01SPIStart
   _nrf24l01SetTXPipe
     ___bmul
     _nrf24l01SPIEnd
     _nrf24l01SPISend
     _nrf24l01SPIStart
   _sendMessage
     _ftoa
       ___ftge
       ___ftmul
         ___ftpack
         _getADCValue (ARG)
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
           _sleepMs
             _resetWDT
       ___ftneg
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
         _getADCValue (ARG)
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
           _sleepMs
             _resetWDT
       ___ftsub
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___lltoft (ARG)
           ___ftpack
       ___fttol
         ___ftmul (ARG)
           ___ftpack
           _getADCValue (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
             _sleepMs
               _resetWDT
       ___lltoft
         ___ftpack
       _sprintf
         ___lldiv
         ___llmod
           ___lldiv (ARG)
         ___wmul
         _isdigit
     _getADCValue (ARG)
       ___awtoft
         ___ftpack
       ___ftadd
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftdiv
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
       _sleepMs
         _resetWDT
     _memset (ARG)
     _nrf24l01SendPacket (ARG)
       _nrf24l01Service
         _memset
         _nrf24l01SPIEnd
         _nrf24l01SPISend
         _nrf24l01SPIStart
         _nrf24l01Send
           _nrf24l01SPIEnd
           _nrf24l01SPISend
           _nrf24l01SPIStart
         _nrf24l01SendTXBuffer
           _nrf24l01SPIEnd
           _nrf24l01SPISend
           _nrf24l01SPIStart
           _nrf24l01SetRXMode
             _nrf24l01Send
               _nrf24l01SPIEnd
               _nrf24l01SPISend
               _nrf24l01SPIStart
           _strlen
         _nrf24l01SetRXMode
           _nrf24l01Send
             _nrf24l01SPIEnd
             _nrf24l01SPISend
             _nrf24l01SPIStart
         _strcmp
       _sleepMs
         _resetWDT
       _strcpy
     _sleepListren (ARG)
       _sleepMs
         _resetWDT
     _strcat (ARG)
       _ftoa (ARG)
         ___ftge
         ___ftmul
           ___ftpack
           _getADCValue (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
             _sleepMs
               _resetWDT
         ___ftneg
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv (ARG)
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
           _getADCValue (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
             _sleepMs
               _resetWDT
         ___ftsub
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___fttol
           ___ftmul (ARG)
             ___ftpack
             _getADCValue (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               _sleepMs
                 _resetWDT
         ___lltoft
           ___ftpack
         _sprintf
           ___lldiv
           ___llmod
             ___lldiv (ARG)
           ___wmul
           _isdigit
     _strcpy (ARG)
   _strcpy

 _ISR (ROOT)
   _hcsr04ISR
   _nrf24l01ISR
     _nrf24l01Send
       _nrf24l01SPIEnd
       _nrf24l01SPISend
       _nrf24l01SPIStart
     _nrf24l01Service
       _memset
       _nrf24l01SPIEnd
       _nrf24l01SPISend
       _nrf24l01SPIStart
       _nrf24l01Send
         _nrf24l01SPIEnd
         _nrf24l01SPISend
         _nrf24l01SPIStart
       _nrf24l01SendTXBuffer
         _nrf24l01SPIEnd
         _nrf24l01SPISend
         _nrf24l01SPIStart
         _nrf24l01SetRXMode
           _nrf24l01Send
             _nrf24l01SPIEnd
             _nrf24l01SPISend
             _nrf24l01SPIStart
         _strlen
       _nrf24l01SetRXMode
         _nrf24l01Send
           _nrf24l01SPIEnd
           _nrf24l01SPISend
           _nrf24l01SPIStart
       _strcmp
     _nrf24l01SetRXMode
       _nrf24l01Send
         _nrf24l01SPIEnd
         _nrf24l01SPISend
         _nrf24l01SPIStart

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            4      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               4      4       4       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       8       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     44      4A       5       92.5%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50     47      50       7      100.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50     23      50       9      100.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0      42      11       82.5%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0     130      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0     138      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V2.00 build -1524193055 
Symbol Table                                                                                   Thu Aug 16 20:24:05 2018

                ___bmul@product 0071                     __CFG_CP$OFF 0000                              l47 08D7  
              sendMessage@value 00B5                sendMessage@topic 00B3             ___wmul@multiplicand 0072  
                  ___ftadd@exp1 0034                    ___ftadd@exp2 0033               sendMessage@packet 00B1  
                  ___ftadd@sign 0032                             l500 0107                             l308 0FFE  
                           l253 0BA8                             l167 06E8                             l503 0126  
                           l266 09B3                             l526 0975                             l820 0EA7  
                           l736 0D95                             l760 03D1                             l737 0D9D  
                           l951 0B39                    __CFG_CPD$OFF 0000                             _ISR 0004  
                           wreg 0009                    __CFG_LVP$OFF 0000                            ?_ISR 0070  
                  ___ftdiv@cntr 003C                    ___ftdiv@sign 0041                  ??_nrf24l01Init 0030  
                          l3004 0C90                            l3020 0A3A                            l3110 06C2  
                          l3006 0CA7                            l3022 0A2D                            l3120 070A  
                          l3112 06AB                            l3024 0A4C                            l3210 0FF1  
                          l3036 07E4                            l3052 075E                            l3124 0722  
                          l3108 06B7                            l2502 038A                            l3070 079F  
                          l3046 0748                            l3126 0729                            l3302 02F3  
                          l2512 03A7                            l2600 0992                            l2530 03E3  
                          l2522 03C3                            l2514 03AC                            l2434 096E  
                          l2602 099D                            l3162 0F70                            l3410 0B60  
                          l2380 0D5F                            l2516 03B0                            l2508 039D  
                          l2428 08CE                            l2612 0B79                            l3156 0F66  
                          l3308 0302                            l2534 03F5                            l2526 03CD  
                          l3078 07B8                            l2454 0D0D                            l2710 0196  
                          l2358 08DC                            l3350 0A9C                            l2392 0D82  
                          l2384 0D69                            l2376 0D58                            l2544 0410  
                          l2480 035A                            l2464 0D3B                            l2456 0D1B  
                          l2720 01C0                            l3344 0A84                            l3408 0B40  
                          l2394 0D87                            l2386 0D6E                            l2490 0370  
                          l2810 0644                            l2562 0C15                            l2714 01AA  
                          l2706 0187                            l2650 0097                            l2618 0B81  
                          l3186 0FA0                            l3602 0AB2                            l3346 0A90  
                          l3354 0AA5                            l2396 0D8F                            l2484 0361  
                          l2900 0A68                            l2468 0D46                            l2556 0BEF  
                          l2644 0087                            l3188 0FB5                            l3604 0ABE  
                          l3292 02A9                            l2822 0660                            l2806 063C  
                          l2558 0BFD                            l2566 0C20                            l2734 021A  
                          l2718 01BD                            l2670 0103                            l3198 0FD4  
                          l3606 0AC7                            l2584 0A1F                            l2576 0A07  
                          l2728 01D5                            l2672 0109                            l2736 0064  
                          l2744 08E1                            l2762 0BC1                            l2818 0658  
                          l2682 0135                            l2738 0225                            l2658 00C5  
                          l3618 046A                            l2594 0935                            l2588 0A27  
                          l2844 0955                            l2692 0154                            l2676 010E  
                          l2668 00D4                            l2916 0B13                            l2908 0917  
                          l2748 08E7                            l2766 0BD7                            l2790 0601  
                          l2854 0E53                            l2784 05EB                            l2872 0E83  
                          l2960 0AFA                            l2882 0E9E                            l2698 015A  
                          l2884 0EAA                            l2876 0E91                            l3748 0F57  
                          l2888 0EB8                            l2984 09BF                            l2898 0A58  
                          STR_1 1053                    __CFG_WDTE$ON 0000                            STR_2 1053  
                          STR_3 104A                            STR_4 1045                            STR_5 104F  
                          STR_6 1034                            STR_7 103A                            STR_8 1029  
                          u2005 0D1C                            u2015 0D30                            u2025 0D3C  
                          u3014 09B9                            u2135 038B                            u3015 09B8  
                          u2225 03C4                            u3105 07A0                            u2305 0C0B  
                          u3115 07AF                            u2315 0C16                            u2165 039E  
                          u3125 07B9                            u2344 0A0F                            u2345 0A0D  
                          u2195 03B1                            u3085 0770                            u2285 0BF2  
                          u3325 0A87                            u1815 0D64                            u3095 0780  
                          u2705 060D                            u2545 017D                            u3345 0A96  
                          u3425 0B4E                            u1835 0D7D                            u2715 061D  
                          u3355 0A9D                            u2565 018E                            u1855 0D8A  
                          u2735 0645                            u2575 01A0                            u3607 0CAD  
                          u2745 064B                            u1945 0976                            u2585 01B2  
                          u3617 0B8B                            u2835 0E5A                            u1955 097B  
                          u3627 0B9C                            u2925 0A5D                            u3637 0BA5  
                          u1895 0DA4                            u2775 0661                            u3647 08BE  
                          u2785 0667                            u2865 0E84                            u1985 0D10  
                          u3657 08B1                            u3577 0EDD                            u3587 09EC  
                          u3597 09F8                            u2895 0E9F                            _WPUA 020C  
                          _WPUC 020E  __size_of_nrf24l01InterfaceInit 001E                    __CFG_WRT$OFF 0000  
                 __CFG_FCMEN$ON 0000   __end_of_nrf24l01InterfaceInit 09E3                            ___sp 2132  
                          _main 0EC1                            _ftoa 0428                    ___ftpack@arg 0026  
                          _loop 050F                    ___ftpack@exp 0029                            fsr0h 0005  
                          fsr1h 0007                            indf0 0000                            fsr0l 0004  
                          fsr1l 0006                            btemp 0074                   __CFG_BORV$LOW 0000  
                          start 0032           nrf24l01SetRXPipe@pipe 0071                   __CFG_CSWEN$ON 0000  
             ___bmul@multiplier 0072                    ___ftmul@cntr 0056                    ___ftmul@sign 0057  
   __size_of_nrf24l01SendPacket 0030                           ??_ISR 0020                    ___fttol@exp1 0061  
          __size_of_getADCValue 00A9                    ___fttol@lval 005D                           ?_main 0070  
                         ?_ftoa 00A0                           ?_loop 0070                 __end_of___ftadd 0428  
               __end_of___ftdiv 07DA                 __end_of___ftneg 08B0                 __end_of___lldiv 0D4F  
               __end_of___ftmul 0688                 __end_of___llmod 0C29                 __end_of___ftsub 096B  
               __end_of___fttol 0EC1                  __CFG_DEBUG$OFF 0000                           i1l280 0CC7  
               __end_of___lwmod 0AAA                           _TMR1H 001A                           _TMR1L 0019  
                 __CFG_PWRTE$ON 0000           nrf24l01SetTXPipe@pipe 0026                    ___lltoft@exp 002B  
                 ___awtoft@sign 0073                 __end_of_dpowers 1028                 __end_of_isdigit 08D0  
                 ___ftpack@sign 002A                           ftoa@f 00A0                           ftoa@l 00A8  
                __CFG_BOREN$OFF 0000                 __end_of_sleepMs 0A2A                           ltemp0 0074  
                         ltemp1 0078                           ltemp2 007C                           ltemp3 0076  
                         ttemp0 0074                           ttemp1 0077                           ttemp2 007A  
                         ttemp3 007D                           status 0003                           wtemp0 0074  
                         wtemp1 0076                           wtemp2 0078                           wtemp3 007A  
                         wtemp4 007C                           wtemp5 007E                 __end_of_sprintf 022B  
             getADCValue@adcSum 0049                _nrf24l01SPIStart 08B9                  __CFG_MCLRE$OFF 0000  
               __initialization 0034          nrf24l01InitRegisters@i 002E                    __end_of_main 0F5B  
                  __end_of_ftoa 050F                    __end_of_loop 05D4                          ??_main 014D  
                 ___fttol@sign1 005C                          ??_ftoa 0074                          ??_loop 0074  
                  ?_sendMessage 00B1        __size_of_nrf24l01SPISend 000F                ___llmod@dividend 0037  
                        _ADRESH 009C                          _ADRESL 009B                __end_of___awtoft 07FC  
                        _ANSELA 018C                          _ANSELC 018E                __end_of___ftpack 0DB4  
              __end_of___lltoft 0A7D                          _ODCONA 028C        __size_of_nrf24l01GetPipe 0034  
                        _ODCONC 028E                          i1l3450 0025                          i1l3380 0CE7  
                        i1l3444 001E                          i1l3366 0CC8                          i1l3384 0CF2  
                        i1l3368 0CCB                          i1l3378 0CE5                          i1l3386 0CF5  
                        _INLVLA 038C                          _INLVLC 038E        __size_of_nrf24l01Service 00A5  
          __size_of_nrf24l01ISR 0049                          ___bmul 08DF                          ___ftge 0BAA  
                        ___wmul 096B                       ??___ftadd 0031                  __CFG_STVREN$ON 0000  
                     ??___ftdiv 003B                       ??___ftneg 0074                       ??___lldiv 0070  
                     ??___ftmul 0074                       ??___llmod 0070                       ??___ftsub 0074  
                     ??___fttol 0074                       ??___lwmod 0074            __end_of_nrf24l01Init 0A02  
          __end_of_nrf24l01Send 0903                          _memset 0B09           _nrf24l01InitRegisters 022B  
                        _status 0064                          _strcat 0AAA                          _strcmp 0A2A  
                        _strcpy 0930                          _strlen 0989                          ftoa@cp 00AC  
         ___ftmul@f3_as_product 0053                __end_of_resetWDT 08A7                       ??_isdigit 0070  
                        loop@ta 00BD                          loop@vt 00BA                       ??_sleepMs 0072  
                     ??_sprintf 0045              getADCValue@adcLoop 0046         __end_of__initialization 0057  
                    ___ftadd@f1 002B                      ___ftadd@f2 002E                      ___ftge@ff1 0026  
                    ___ftge@ff2 0029              getADCValue@channel 0048                      ___ftdiv@f1 0038  
                    ___ftdiv@f2 0035                      ___ftdiv@f3 003D                      ___ftneg@f1 004C  
                    ___awtoft@c 0070             ___bmul@multiplicand 0070                      ___ftmul@f1 004C  
                    ___ftmul@f2 004F                      ___ftsub@f1 0038                      ___ftsub@f2 0035  
                    ___fttol@f1 0058                  __pcstackCOMMON 0070                    __pidataBANK1 07FF  
 __size_of_nrf24l01SendTXBuffer 0047                      ___lltoft@c 0070              __size_of_hcsr04ISR 0003  
                  sprintf@width 0050                      __pbssBANK0 0064                      __pbssBANK1 00E7  
                    __pbssBANK2 0120                      __pbssBANK3 01A0           sendMessage@ftoaStatus 00B8  
             ??_nrf24l01GetPipe 0027                      __pmaintext 0EC1                      _hcsr04Init 0903  
                       ?___bmul 0070                         ?___ftge 0026                         ?___wmul 0070  
               __CFG_PPS1WAY$ON 0000               _nrf24l01SetRXMode 0B6F               _nrf24l01SetRXPipe 09A7  
        ?_nrf24l01InitRegisters 0070                      __pintentry 0004               _nrf24l01SetTXPipe 0C29  
                     ?___awtoft 0070                       ?___ftpack 0026              ?_nrf24l01SetRXPipe 0070  
            ?_nrf24l01SetTXPipe 0070                       ?___lltoft 0070             __CFG_RSTOSC$HFINT32 0000  
                       ?_strcat 00AD                         ?_strcpy 0070           __end_of_n_ADDRESS_MUL 1029  
          __size_of_sendMessage 0086        __end_of_nrf24l01SPIStart 08C2             ??_nrf24l01SetRXPipe 0070  
           ??_nrf24l01SetTXPipe 0073                         _NVMADRH 0892                         _NVMADRL 0891  
                       _NVMDATL 0893                         _NVMCON2 0896                         _SSP1BUF 0211  
             __end_of_hcsr04ISR 07FF           _nrf24l01InterfaceInit 09C5      __end_of_nrf24l01SendPacket 0B09  
                     ?_resetWDT 0070                   ??_getADCValue 0045           __size_of_nrf24l01Init 001F  
         __size_of_nrf24l01Send 0013       __end_of_nrf24l01SetRXMode 0BAA       __end_of_nrf24l01SetRXPipe 09C5  
                 ?_sleepListren 0026       __end_of_nrf24l01SetTXPipe 0C6C                 __size_of___bmul 0011  
               __size_of___ftge 003C                         ___ftadd 0332                         ___ftdiv 0731  
                       ___ftneg 08A7                         ___lldiv 0CFC                 __size_of___wmul 001E  
                       ___ftmul 05D4                         ___llmod 0BE6                         ___ftsub 094D  
                       ___fttol 0E3A                         ___lwmod 0A7D                      ??___awtoft 0073  
                    ??___ftpack 0070                 __size_of_memset 0032                      ??___lltoft 0074  
                       __ptext1 09E3                         __ptext2 09C5                         __ptext3 022B  
                       __ptext4 0C29                         __ptext5 08DF                         __ptext6 09A7  
                       __ptext7 0B3B                         __ptext8 0A7D                         __ptext9 050F  
               __size_of_strcat 002F                 __size_of_strcmp 0029                 __size_of_strcpy 001D  
               __size_of_strlen 001E                    __size_of_ISR 002E                       _T1CONbits 001B  
                       _counter 00E7                         _dpowers 1000                         _isdigit 08C2  
                     _IOCAFbits 0393                         _romData 00EF                         _sleepMs 0A02  
                     _IOCAPbits 0391                         _sprintf 005E                         clrloop0 089B  
          end_of_initialization 0057                         ftoa@buf 013C                         ftoa@rem 00A4  
                  _nrf24l01Init 09E3                    _nrf24l01Send 08F0                      _romDataMap 0120  
              nrf24l01GetPipe@i 002A                 ___lldiv@divisor 0026                 ___lldiv@counter 0032  
                    ??_resetWDT 0070                  ??_sleepListren 0074                     ?_hcsr04Init 0070  
           __end_of_getADCValue 0731                       _PORTAbits 000C                       _PORTCbits 000E  
                     _TRISAbits 008C                       _TRISCbits 008E                __CFG_FEXTOSC$OFF 0000  
                 ??_nrf24l01ISR 0070          ?_nrf24l01InterfaceInit 0070                     ___ftdiv@exp 0040  
                    main@packet 014F      __size_of_nrf24l01SetRXMode 003B      __size_of_nrf24l01SetRXPipe 001E  
                   ___ftmul@exp 0052      __size_of_nrf24l01SetTXPipe 0043                  __end_of___bmul 08F0  
                __end_of___ftge 0BE6                  __end_of___wmul 0989                  __end_of_memset 0B3B  
                __end_of_strcat 0AD9                  __end_of_strcmp 0A53                    _lastTXPacket 0069  
                __end_of_strcpy 094D                  __end_of_strlen 09A7             start_initialization 0034  
               _nrf24l01SPISend 08D0                     __end_of_ISR 0032    __end_of_nrf24l01SendTXBuffer 0CB3  
                    ftoa@status 00A3       nrf24l01SetRXPipe@enRXAddr 0072             __size_of_hcsr04Init 0014  
               _nrf24l01GetPipe 0B3B         __size_of_nrf24l01SPIEnd 0009                 ___llmod@divisor 0033  
               ___llmod@counter 0070                 _nrf24l01Service 0F5B         ??_nrf24l01InitRegisters 0027  
              __CFG_LPBOREN$OFF 0000                     _getADCValue 0688                        ??___bmul 0071  
                      ??___ftge 0070             __end_of_nrf24l01ISR 0CFC                        ??___wmul 0074  
                   __pdataBANK1 00EF                        ??_strcat 0074                        ??_strcpy 0074  
             __size_of___awtoft 0022               __size_of___ftpack 0065               __size_of___lltoft 002A  
                     ___latbits 0002                   __pcstackBANK0 0020                   __pcstackBANK1 00A0  
                 __pcstackBANK2 014D            __end_of_sleepListren 0930                    _isdigit$1989 0070  
                   sprintf@flag 0049                     sprintf@prec 0052                      loop@packet 00C6  
           nrf24l01GetPipe@name 0029             nrf24l01GetPipe@pipe 0028                       _hcsr04ISR 07FC  
             __size_of_resetWDT 0007                        ?___ftadd 002B                        ?___ftdiv 0035  
                      ?___ftneg 004C                        ?___lldiv 0026                        ?___ftmul 004C  
                      ?___llmod 0033                        ?___ftsub 0035                        ?___fttol 0058  
                      ?___lwmod 0070            __end_of_n_ADDRESS_P0 1045         __end_of_nrf24l01SPISend 08DF  
     nrf24l01InitRegisters@enAA 002C                   ??_sendMessage 0074              _nrf24l01SendPacket 0AD9  
           sleepMs@milliseconds 0070         __end_of_nrf24l01GetPipe 0B6F                        ?_isdigit 0070  
                     _loop$2246 00C0                       _loop$2247 00C3                        ?_sleepMs 0070  
           ?_nrf24l01SendPacket 0028                        ?_sprintf 003B         __end_of_nrf24l01Service 1000  
                ___wmul@product 0026                     _nrf24l01ISR 0CB3                       clear_ram0 089A  
                      _PIE0bits 0090                        _PIE1bits 0091                        _PIR0bits 0010  
                      _PIR1bits 0011                      ?_hcsr04ISR 0070                    ??_hcsr04Init 0070  
          ??_nrf24l01SendPacket 0074                       _testCount 00ED            _nrf24l01SendTXBuffer 0C6C  
                    _ADCON0bits 009D                      _ADCON1bits 009E               ___wmul@multiplier 0070  
                      _WPUAbits 020C                        _RXPacket 01A0                        _TXPacket 01C1  
           sleepListren@seconds 0026             __end_of_sendMessage 0E3A              __end_of_hcsr04Init 0917  
       ??_nrf24l01InterfaceInit 0070                  _nrf24l01SPIEnd 08B0                __size_of___ftadd 00F6  
              __size_of___ftdiv 00A9                __size_of___ftneg 0009                __size_of___lldiv 0053  
              __size_of___ftmul 00B4                __size_of___llmod 0043                __size_of___ftsub 001E  
              __size_of___fttol 0087                __size_of___lwmod 002D                        ___awtoft 07DA  
                      ___ftpack 0D4F                        ___int_sp 2291                        ___lltoft 0A53  
         __size_of_sleepListren 0019                      _ANSELAbits 018C                      _ANSELCbits 018E  
              ?_nrf24l01GetPipe 0070                      sprintf@val 004B                   _n_ADDRESS_MUL 1028  
                    strcat@from 00AF                __size_of_isdigit 000E                        __ptext10 0DB4  
                      __ptext11 0AAA                        __ptext20 08F0                        __ptext12 0917  
                      __ptext21 08B9                        __ptext13 0AD9                      _T1GCONbits 001C  
                      __ptext30 0CFC                        __ptext22 08D0                        __ptext14 0930  
                      __ptext31 0A53                        __ptext23 08B0                        __ptext15 0F5B  
                      __ptext40 0731                        __ptext32 0E3A                        __ptext24 0B09  
                      __ptext16 0A2A                        __ptext41 0332                        __ptext33 094D  
                      __ptext25 0428                        __ptext17 0C6C                        __ptext42 07DA  
                      __ptext34 08A7                        __ptext26 005E                        __ptext18 0989  
                      __ptext43 0D4F                        __ptext35 05D4                        __ptext27 08C2  
                      __ptext19 0B6F                        __ptext44 0903                        __ptext36 0BAA  
                      __ptext28 096B                        __ptext37 0688                        __ptext29 0BE6  
                      __ptext46 0CB3                        __ptext38 0A02                        __ptext47 07FC  
                      __ptext39 08A0                __size_of_sleepMs 0028                    _SSP1CON1bits 0215  
        __end_of_nrf24l01SPIEnd 08B9                        _distance 00EB                __size_of_sprintf 01CD  
                   _OSCCON1bits 0919                      strcpy@from 0072                   __size_of_main 009A  
                 __size_of_ftoa 00E7                   __size_of_loop 00C5    nrf24l01InitRegisters@channel 0028  
  nrf24l01InitRegisters@feature 002A                    sleepMs@wdtps 0073                      _RC0PPSbits 0EA0  
                      _resetWDT 08A0                     ??_hcsr04ISR 0070    nrf24l01InitRegisters@rfSetup 002B  
                    _RC1PPSbits 0EA1                    ?_getADCValue 0042                      _RC2PPSbits 0EA2  
                  _sleepListren 0917  __size_of_nrf24l01InitRegisters 0107   __end_of_nrf24l01InitRegisters 0332  
  nrf24l01InitRegisters@setupAW 0029                      _ODCONAbits 028C                    _SSP1STATbits 0214  
                      main@pipe 014E      nrf24l01SendPacket@txPacket 0028                     _sendMessage 0DB4  
                    _INTCONbits 000B                     _NVMCON1bits 0895                      _FVRCONbits 0117  
                __pstringtext10 0000                        isdigit@c 0071                        intlevel1 0000  
                     sprintf@ap 004A                       sprintf@sp 004F                    _n_ADDRESS_P0 1040  
              ___lwmod@dividend 0072                ___lldiv@dividend 002A               __CFG_CLKOUTEN$OFF 0000  
     __size_of_nrf24l01SPIStart 0009                   __pstringtext1 1000                   __pstringtext2 1040  
                 __pstringtext3 1028                   __pstringtext4 1034                   __pstringtext5 103A  
                 __pstringtext6 1045                   __pstringtext7 104A                   __pstringtext8 104F  
                 __pstringtext9 1053                        sprintf@c 0054                        sprintf@f 003B  
    nrf24l01InitRegisters@DynPD 002D                        strcat@cp 0062                        strcat@to 00AD  
              ___lldiv@quotient 002E                 ___lwmod@divisor 0070                        strcpy@cp 0026  
                      strcpy@to 0070                 ___lwmod@counter 0026                      _WDTCONbits 0097  
                 ?_nrf24l01Init 0070                    ?_nrf24l01ISR 0070  
