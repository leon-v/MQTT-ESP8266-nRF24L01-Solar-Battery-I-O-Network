

Microchip Technology PIC LITE Macro Assembler V2.00 build -1524193055 
                                                                                               Wed Aug 01 21:30:47 2018

Microchip Technology Omniscient Code Generator v2.00 (Free mode) build 20180527130849
     1                           	processor	16LF18325
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK1,global,class=CODE,delta=2
     5                           	psect	stringtext1,global,class=STRCODE,delta=2
     6                           	psect	stringtext2,global,class=STRCODE,delta=2
     7                           	psect	stringtext3,global,class=STRCODE,delta=2
     8                           	psect	stringtext4,global,class=STRCODE,delta=2
     9                           	psect	stringtext5,global,class=STRCODE,delta=2
    10                           	psect	stringtext6,global,class=STRCODE,delta=2
    11                           	psect	stringtext7,global,class=STRCODE,delta=2
    12                           	psect	stringtext8,global,class=STRCODE,delta=2
    13                           	psect	stringtext9,global,class=STRCODE,delta=2
    14                           	psect	stringtext10,global,class=STRCODE,delta=2
    15                           	psect	stringtext11,global,class=STRCODE,delta=2
    16                           	psect	stringtext12,global,class=STRCODE,delta=2
    17                           	psect	stringtext13,global,class=STRCODE,delta=2
    18                           	psect	stringtext14,global,class=STRCODE,delta=2
    19                           	psect	stringtext15,global,class=STRCODE,delta=2
    20                           	psect	stringtext16,global,class=STRCODE,delta=2
    21                           	psect	stringtext17,global,class=STRCODE,delta=2
    22                           	psect	stringtext18,global,class=STRCODE,delta=2
    23                           	psect	stringtext19,global,class=STRCODE,delta=2
    24                           	psect	cinit,global,class=CODE,merge=1,delta=2
    25                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    26                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    27                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    28                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    29                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1
    30                           	psect	clrtext,global,class=CODE,delta=2
    31                           	psect	cstackBANK3,global,class=BANK3,space=1,delta=1
    32                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1
    33                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    34                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    35                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    36                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    37                           	psect	text1,local,class=CODE,merge=1,delta=2,group=2
    38                           	psect	text2,local,class=CODE,merge=1,delta=2
    39                           	psect	text3,local,class=CODE,merge=1,delta=2
    40                           	psect	text4,local,class=CODE,merge=1,delta=2
    41                           	psect	text5,local,class=CODE,merge=1,delta=2
    42                           	psect	text6,local,class=CODE,merge=1,delta=2,group=1
    43                           	psect	text7,local,class=CODE,merge=1,delta=2
    44                           	psect	text8,local,class=CODE,merge=1,delta=2
    45                           	psect	text9,local,class=CODE,merge=1,delta=2
    46                           	psect	text10,local,class=CODE,merge=1,delta=2
    47                           	psect	text11,local,class=CODE,merge=1,delta=2
    48                           	psect	text12,local,class=CODE,merge=1,delta=2
    49                           	psect	text13,local,class=CODE,merge=1,delta=2,group=1
    50                           	psect	text14,local,class=CODE,merge=1,delta=2,group=1
    51                           	psect	text15,local,class=CODE,merge=1,delta=2
    52                           	psect	text16,local,class=CODE,merge=1,delta=2,group=1
    53                           	psect	text17,local,class=CODE,merge=1,delta=2,group=1
    54                           	psect	text18,local,class=CODE,merge=1,delta=2,group=1
    55                           	psect	text19,local,class=CODE,merge=1,delta=2,group=1
    56                           	psect	text20,local,class=CODE,merge=1,delta=2,group=1
    57                           	psect	text21,local,class=CODE,merge=1,delta=2,group=1
    58                           	psect	text22,local,class=CODE,merge=1,delta=2,group=1
    59                           	psect	text23,local,class=CODE,merge=1,delta=2,group=1
    60                           	psect	text24,local,class=CODE,merge=1,delta=2,group=1
    61                           	psect	text25,local,class=CODE,merge=1,delta=2,group=1
    62                           	psect	text26,local,class=CODE,merge=1,delta=2,group=1
    63                           	psect	text27,local,class=CODE,merge=1,delta=2,group=1
    64                           	psect	text28,local,class=CODE,merge=1,delta=2,group=1
    65                           	psect	text29,local,class=CODE,merge=1,delta=2
    66                           	psect	text30,local,class=CODE,merge=1,delta=2
    67                           	psect	text31,local,class=CODE,merge=1,delta=2
    68                           	psect	text32,local,class=CODE,merge=1,delta=2,group=2
    69                           	psect	text33,local,class=CODE,merge=1,delta=2
    70                           	psect	text34,local,class=CODE,merge=1,delta=2
    71                           	psect	text35,local,class=CODE,merge=1,delta=2,group=2
    72                           	psect	text36,local,class=CODE,merge=1,delta=2
    73                           	psect	text37,local,class=CODE,merge=1,delta=2
    74                           	psect	text38,local,class=CODE,merge=1,delta=2,group=1
    75                           	psect	text39,local,class=CODE,merge=1,delta=2,group=1
    76                           	psect	text40,local,class=CODE,merge=1,delta=2,group=1
    77                           	psect	text41,local,class=CODE,merge=1,delta=2,group=1
    78                           	psect	text42,local,class=CODE,merge=1,delta=2,group=1
    79                           	psect	text43,local,class=CODE,merge=1,delta=2,group=1
    80                           	psect	intentry,global,class=CODE,delta=2
    81                           	psect	text45,local,class=CODE,merge=1,delta=2
    82                           	psect	text46,local,class=CODE,merge=1,delta=2
    83                           	psect	text47,local,class=CODE,merge=1,delta=2
    84                           	psect	text48,local,class=CODE,merge=1,delta=2
    85                           	psect	text49,local,class=CODE,merge=1,delta=2
    86                           	psect	text50,local,class=CODE,merge=1,delta=2
    87                           	psect	text51,local,class=CODE,merge=1,delta=2
    88                           	psect	text52,local,class=CODE,merge=1,delta=2
    89                           	psect	text53,local,class=CODE,merge=1,delta=2
    90                           	psect	text54,local,class=CODE,merge=1,delta=2
    91                           	psect	text55,local,class=CODE,merge=1,delta=2
    92                           	psect	text56,local,class=CODE,merge=1,delta=2
    93                           	psect	text57,local,class=CODE,merge=1,delta=2
    94                           	psect	text58,local,class=CODE,merge=1,delta=2
    95                           	dabs	1,0x7E,2
    96  0000                     
    97                           ; Version 2.00
    98                           ; Generated 27/05/2018 GMT
    99                           ; 
   100                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
   101                           ; All rights reserved.
   102                           ; 
   103                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   104                           ; 
   105                           ; Redistribution and use in source and binary forms, with or without modification, are
   106                           ; permitted provided that the following conditions are met:
   107                           ; 
   108                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   109                           ;        conditions and the following disclaimer.
   110                           ; 
   111                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   112                           ;        of conditions and the following disclaimer in the documentation and/or other
   113                           ;        materials provided with the distribution.
   114                           ; 
   115                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   116                           ;        software without specific prior written permission.
   117                           ; 
   118                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   119                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   120                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   121                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   122                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   123                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   124                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   125                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   126                           ; 
   127                           ; 
   128                           ; Code-generator required, PIC16LF18325 Definitions
   129                           ; 
   130                           ; SFR Addresses
   131  0000                     	;# 
   132  0001                     	;# 
   133  0002                     	;# 
   134  0003                     	;# 
   135  0004                     	;# 
   136  0005                     	;# 
   137  0006                     	;# 
   138  0007                     	;# 
   139  0008                     	;# 
   140  0009                     	;# 
   141  000A                     	;# 
   142  000B                     	;# 
   143  000C                     	;# 
   144  000E                     	;# 
   145  0010                     	;# 
   146  0011                     	;# 
   147  0012                     	;# 
   148  0013                     	;# 
   149  0014                     	;# 
   150  0015                     	;# 
   151  0015                     	;# 
   152  0016                     	;# 
   153  0016                     	;# 
   154  0017                     	;# 
   155  0018                     	;# 
   156  0019                     	;# 
   157  0019                     	;# 
   158  001A                     	;# 
   159  001B                     	;# 
   160  001C                     	;# 
   161  001D                     	;# 
   162  001E                     	;# 
   163  001F                     	;# 
   164  008C                     	;# 
   165  008E                     	;# 
   166  0090                     	;# 
   167  0091                     	;# 
   168  0092                     	;# 
   169  0093                     	;# 
   170  0094                     	;# 
   171  0097                     	;# 
   172  009B                     	;# 
   173  009B                     	;# 
   174  009C                     	;# 
   175  009D                     	;# 
   176  009E                     	;# 
   177  009F                     	;# 
   178  010C                     	;# 
   179  010E                     	;# 
   180  0111                     	;# 
   181  0112                     	;# 
   182  0113                     	;# 
   183  0114                     	;# 
   184  0115                     	;# 
   185  0116                     	;# 
   186  0117                     	;# 
   187  0118                     	;# 
   188  0119                     	;# 
   189  018C                     	;# 
   190  018E                     	;# 
   191  0199                     	;# 
   192  0199                     	;# 
   193  0199                     	;# 
   194  019A                     	;# 
   195  019A                     	;# 
   196  019A                     	;# 
   197  019B                     	;# 
   198  019B                     	;# 
   199  019B                     	;# 
   200  019B                     	;# 
   201  019B                     	;# 
   202  019C                     	;# 
   203  019C                     	;# 
   204  019C                     	;# 
   205  019D                     	;# 
   206  019D                     	;# 
   207  019D                     	;# 
   208  019E                     	;# 
   209  019E                     	;# 
   210  019E                     	;# 
   211  019F                     	;# 
   212  019F                     	;# 
   213  019F                     	;# 
   214  019F                     	;# 
   215  019F                     	;# 
   216  020C                     	;# 
   217  020E                     	;# 
   218  0211                     	;# 
   219  0211                     	;# 
   220  0212                     	;# 
   221  0212                     	;# 
   222  0213                     	;# 
   223  0213                     	;# 
   224  0214                     	;# 
   225  0214                     	;# 
   226  0215                     	;# 
   227  0215                     	;# 
   228  0215                     	;# 
   229  0215                     	;# 
   230  0216                     	;# 
   231  0216                     	;# 
   232  0217                     	;# 
   233  0217                     	;# 
   234  0219                     	;# 
   235  021A                     	;# 
   236  021B                     	;# 
   237  021C                     	;# 
   238  021D                     	;# 
   239  021D                     	;# 
   240  021E                     	;# 
   241  021F                     	;# 
   242  028C                     	;# 
   243  028E                     	;# 
   244  0291                     	;# 
   245  0291                     	;# 
   246  0292                     	;# 
   247  0293                     	;# 
   248  0294                     	;# 
   249  0295                     	;# 
   250  0295                     	;# 
   251  0296                     	;# 
   252  0297                     	;# 
   253  0298                     	;# 
   254  029F                     	;# 
   255  030C                     	;# 
   256  030E                     	;# 
   257  0311                     	;# 
   258  0311                     	;# 
   259  0312                     	;# 
   260  0313                     	;# 
   261  0314                     	;# 
   262  0315                     	;# 
   263  0315                     	;# 
   264  0316                     	;# 
   265  0317                     	;# 
   266  0318                     	;# 
   267  038C                     	;# 
   268  038E                     	;# 
   269  0391                     	;# 
   270  0392                     	;# 
   271  0393                     	;# 
   272  0397                     	;# 
   273  0398                     	;# 
   274  0399                     	;# 
   275  039A                     	;# 
   276  039C                     	;# 
   277  039D                     	;# 
   278  039E                     	;# 
   279  039F                     	;# 
   280  0411                     	;# 
   281  0411                     	;# 
   282  0412                     	;# 
   283  0413                     	;# 
   284  0414                     	;# 
   285  0415                     	;# 
   286  0416                     	;# 
   287  0417                     	;# 
   288  0418                     	;# 
   289  0418                     	;# 
   290  0419                     	;# 
   291  041A                     	;# 
   292  041B                     	;# 
   293  041C                     	;# 
   294  041D                     	;# 
   295  041E                     	;# 
   296  041F                     	;# 
   297  0498                     	;# 
   298  0498                     	;# 
   299  0499                     	;# 
   300  049A                     	;# 
   301  049B                     	;# 
   302  049B                     	;# 
   303  049C                     	;# 
   304  049D                     	;# 
   305  049E                     	;# 
   306  049F                     	;# 
   307  0617                     	;# 
   308  0618                     	;# 
   309  0619                     	;# 
   310  0619                     	;# 
   311  061A                     	;# 
   312  061B                     	;# 
   313  061C                     	;# 
   314  061C                     	;# 
   315  061F                     	;# 
   316  0691                     	;# 
   317  0692                     	;# 
   318  0693                     	;# 
   319  0694                     	;# 
   320  0695                     	;# 
   321  0696                     	;# 
   322  0697                     	;# 
   323  0698                     	;# 
   324  0699                     	;# 
   325  0711                     	;# 
   326  0712                     	;# 
   327  0713                     	;# 
   328  0714                     	;# 
   329  0715                     	;# 
   330  0716                     	;# 
   331  0717                     	;# 
   332  0718                     	;# 
   333  0719                     	;# 
   334  0891                     	;# 
   335  0891                     	;# 
   336  0891                     	;# 
   337  0891                     	;# 
   338  0891                     	;# 
   339  0891                     	;# 
   340  0892                     	;# 
   341  0892                     	;# 
   342  0892                     	;# 
   343  0893                     	;# 
   344  0893                     	;# 
   345  0893                     	;# 
   346  0893                     	;# 
   347  0893                     	;# 
   348  0893                     	;# 
   349  0894                     	;# 
   350  0894                     	;# 
   351  0894                     	;# 
   352  0895                     	;# 
   353  0895                     	;# 
   354  0895                     	;# 
   355  0896                     	;# 
   356  0896                     	;# 
   357  0896                     	;# 
   358  089B                     	;# 
   359  0911                     	;# 
   360  0912                     	;# 
   361  0913                     	;# 
   362  0914                     	;# 
   363  0915                     	;# 
   364  0916                     	;# 
   365  0918                     	;# 
   366  0919                     	;# 
   367  091A                     	;# 
   368  091B                     	;# 
   369  091C                     	;# 
   370  091D                     	;# 
   371  091E                     	;# 
   372  091F                     	;# 
   373  0E0F                     	;# 
   374  0E10                     	;# 
   375  0E11                     	;# 
   376  0E12                     	;# 
   377  0E13                     	;# 
   378  0E14                     	;# 
   379  0E15                     	;# 
   380  0E16                     	;# 
   381  0E17                     	;# 
   382  0E18                     	;# 
   383  0E19                     	;# 
   384  0E1A                     	;# 
   385  0E1B                     	;# 
   386  0E1C                     	;# 
   387  0E1D                     	;# 
   388  0E1E                     	;# 
   389  0E1F                     	;# 
   390  0E20                     	;# 
   391  0E21                     	;# 
   392  0E22                     	;# 
   393  0E24                     	;# 
   394  0E25                     	;# 
   395  0E28                     	;# 
   396  0E29                     	;# 
   397  0E2A                     	;# 
   398  0E2B                     	;# 
   399  0E2C                     	;# 
   400  0E2D                     	;# 
   401  0E2E                     	;# 
   402  0E2F                     	;# 
   403  0E90                     	;# 
   404  0E91                     	;# 
   405  0E92                     	;# 
   406  0E94                     	;# 
   407  0E95                     	;# 
   408  0EA0                     	;# 
   409  0EA1                     	;# 
   410  0EA2                     	;# 
   411  0EA3                     	;# 
   412  0EA4                     	;# 
   413  0EA5                     	;# 
   414  0F0F                     	;# 
   415  0F10                     	;# 
   416  0F11                     	;# 
   417  0F12                     	;# 
   418  0F13                     	;# 
   419  0F14                     	;# 
   420  0F15                     	;# 
   421  0F16                     	;# 
   422  0F17                     	;# 
   423  0F18                     	;# 
   424  0F19                     	;# 
   425  0F1A                     	;# 
   426  0F1B                     	;# 
   427  0F1C                     	;# 
   428  0F1D                     	;# 
   429  0F1E                     	;# 
   430  0F1F                     	;# 
   431  0F20                     	;# 
   432  0F21                     	;# 
   433  0F22                     	;# 
   434  0F23                     	;# 
   435  0F24                     	;# 
   436  0F25                     	;# 
   437  0F26                     	;# 
   438  0F27                     	;# 
   439  0F28                     	;# 
   440  0F29                     	;# 
   441  0F2A                     	;# 
   442  0F2B                     	;# 
   443  0F2C                     	;# 
   444  0F2D                     	;# 
   445  0F2E                     	;# 
   446  0F2F                     	;# 
   447  0F30                     	;# 
   448  0F31                     	;# 
   449  0F32                     	;# 
   450  0F33                     	;# 
   451  0F34                     	;# 
   452  0F35                     	;# 
   453  0F36                     	;# 
   454  0F37                     	;# 
   455  0FE4                     	;# 
   456  0FE5                     	;# 
   457  0FE6                     	;# 
   458  0FE7                     	;# 
   459  0FE8                     	;# 
   460  0FE9                     	;# 
   461  0FEA                     	;# 
   462  0FEB                     	;# 
   463  0FED                     	;# 
   464  0FEE                     	;# 
   465  0FEF                     	;# 
   466  0000                     	;# 
   467  0001                     	;# 
   468  0002                     	;# 
   469  0003                     	;# 
   470  0004                     	;# 
   471  0005                     	;# 
   472  0006                     	;# 
   473  0007                     	;# 
   474  0008                     	;# 
   475  0009                     	;# 
   476  000A                     	;# 
   477  000B                     	;# 
   478  000C                     	;# 
   479  000E                     	;# 
   480  0010                     	;# 
   481  0011                     	;# 
   482  0012                     	;# 
   483  0013                     	;# 
   484  0014                     	;# 
   485  0015                     	;# 
   486  0015                     	;# 
   487  0016                     	;# 
   488  0016                     	;# 
   489  0017                     	;# 
   490  0018                     	;# 
   491  0019                     	;# 
   492  0019                     	;# 
   493  001A                     	;# 
   494  001B                     	;# 
   495  001C                     	;# 
   496  001D                     	;# 
   497  001E                     	;# 
   498  001F                     	;# 
   499  008C                     	;# 
   500  008E                     	;# 
   501  0090                     	;# 
   502  0091                     	;# 
   503  0092                     	;# 
   504  0093                     	;# 
   505  0094                     	;# 
   506  0097                     	;# 
   507  009B                     	;# 
   508  009B                     	;# 
   509  009C                     	;# 
   510  009D                     	;# 
   511  009E                     	;# 
   512  009F                     	;# 
   513  010C                     	;# 
   514  010E                     	;# 
   515  0111                     	;# 
   516  0112                     	;# 
   517  0113                     	;# 
   518  0114                     	;# 
   519  0115                     	;# 
   520  0116                     	;# 
   521  0117                     	;# 
   522  0118                     	;# 
   523  0119                     	;# 
   524  018C                     	;# 
   525  018E                     	;# 
   526  0199                     	;# 
   527  0199                     	;# 
   528  0199                     	;# 
   529  019A                     	;# 
   530  019A                     	;# 
   531  019A                     	;# 
   532  019B                     	;# 
   533  019B                     	;# 
   534  019B                     	;# 
   535  019B                     	;# 
   536  019B                     	;# 
   537  019C                     	;# 
   538  019C                     	;# 
   539  019C                     	;# 
   540  019D                     	;# 
   541  019D                     	;# 
   542  019D                     	;# 
   543  019E                     	;# 
   544  019E                     	;# 
   545  019E                     	;# 
   546  019F                     	;# 
   547  019F                     	;# 
   548  019F                     	;# 
   549  019F                     	;# 
   550  019F                     	;# 
   551  020C                     	;# 
   552  020E                     	;# 
   553  0211                     	;# 
   554  0211                     	;# 
   555  0212                     	;# 
   556  0212                     	;# 
   557  0213                     	;# 
   558  0213                     	;# 
   559  0214                     	;# 
   560  0214                     	;# 
   561  0215                     	;# 
   562  0215                     	;# 
   563  0215                     	;# 
   564  0215                     	;# 
   565  0216                     	;# 
   566  0216                     	;# 
   567  0217                     	;# 
   568  0217                     	;# 
   569  0219                     	;# 
   570  021A                     	;# 
   571  021B                     	;# 
   572  021C                     	;# 
   573  021D                     	;# 
   574  021D                     	;# 
   575  021E                     	;# 
   576  021F                     	;# 
   577  028C                     	;# 
   578  028E                     	;# 
   579  0291                     	;# 
   580  0291                     	;# 
   581  0292                     	;# 
   582  0293                     	;# 
   583  0294                     	;# 
   584  0295                     	;# 
   585  0295                     	;# 
   586  0296                     	;# 
   587  0297                     	;# 
   588  0298                     	;# 
   589  029F                     	;# 
   590  030C                     	;# 
   591  030E                     	;# 
   592  0311                     	;# 
   593  0311                     	;# 
   594  0312                     	;# 
   595  0313                     	;# 
   596  0314                     	;# 
   597  0315                     	;# 
   598  0315                     	;# 
   599  0316                     	;# 
   600  0317                     	;# 
   601  0318                     	;# 
   602  038C                     	;# 
   603  038E                     	;# 
   604  0391                     	;# 
   605  0392                     	;# 
   606  0393                     	;# 
   607  0397                     	;# 
   608  0398                     	;# 
   609  0399                     	;# 
   610  039A                     	;# 
   611  039C                     	;# 
   612  039D                     	;# 
   613  039E                     	;# 
   614  039F                     	;# 
   615  0411                     	;# 
   616  0411                     	;# 
   617  0412                     	;# 
   618  0413                     	;# 
   619  0414                     	;# 
   620  0415                     	;# 
   621  0416                     	;# 
   622  0417                     	;# 
   623  0418                     	;# 
   624  0418                     	;# 
   625  0419                     	;# 
   626  041A                     	;# 
   627  041B                     	;# 
   628  041C                     	;# 
   629  041D                     	;# 
   630  041E                     	;# 
   631  041F                     	;# 
   632  0498                     	;# 
   633  0498                     	;# 
   634  0499                     	;# 
   635  049A                     	;# 
   636  049B                     	;# 
   637  049B                     	;# 
   638  049C                     	;# 
   639  049D                     	;# 
   640  049E                     	;# 
   641  049F                     	;# 
   642  0617                     	;# 
   643  0618                     	;# 
   644  0619                     	;# 
   645  0619                     	;# 
   646  061A                     	;# 
   647  061B                     	;# 
   648  061C                     	;# 
   649  061C                     	;# 
   650  061F                     	;# 
   651  0691                     	;# 
   652  0692                     	;# 
   653  0693                     	;# 
   654  0694                     	;# 
   655  0695                     	;# 
   656  0696                     	;# 
   657  0697                     	;# 
   658  0698                     	;# 
   659  0699                     	;# 
   660  0711                     	;# 
   661  0712                     	;# 
   662  0713                     	;# 
   663  0714                     	;# 
   664  0715                     	;# 
   665  0716                     	;# 
   666  0717                     	;# 
   667  0718                     	;# 
   668  0719                     	;# 
   669  0891                     	;# 
   670  0891                     	;# 
   671  0891                     	;# 
   672  0891                     	;# 
   673  0891                     	;# 
   674  0891                     	;# 
   675  0892                     	;# 
   676  0892                     	;# 
   677  0892                     	;# 
   678  0893                     	;# 
   679  0893                     	;# 
   680  0893                     	;# 
   681  0893                     	;# 
   682  0893                     	;# 
   683  0893                     	;# 
   684  0894                     	;# 
   685  0894                     	;# 
   686  0894                     	;# 
   687  0895                     	;# 
   688  0895                     	;# 
   689  0895                     	;# 
   690  0896                     	;# 
   691  0896                     	;# 
   692  0896                     	;# 
   693  089B                     	;# 
   694  0911                     	;# 
   695  0912                     	;# 
   696  0913                     	;# 
   697  0914                     	;# 
   698  0915                     	;# 
   699  0916                     	;# 
   700  0918                     	;# 
   701  0919                     	;# 
   702  091A                     	;# 
   703  091B                     	;# 
   704  091C                     	;# 
   705  091D                     	;# 
   706  091E                     	;# 
   707  091F                     	;# 
   708  0E0F                     	;# 
   709  0E10                     	;# 
   710  0E11                     	;# 
   711  0E12                     	;# 
   712  0E13                     	;# 
   713  0E14                     	;# 
   714  0E15                     	;# 
   715  0E16                     	;# 
   716  0E17                     	;# 
   717  0E18                     	;# 
   718  0E19                     	;# 
   719  0E1A                     	;# 
   720  0E1B                     	;# 
   721  0E1C                     	;# 
   722  0E1D                     	;# 
   723  0E1E                     	;# 
   724  0E1F                     	;# 
   725  0E20                     	;# 
   726  0E21                     	;# 
   727  0E22                     	;# 
   728  0E24                     	;# 
   729  0E25                     	;# 
   730  0E28                     	;# 
   731  0E29                     	;# 
   732  0E2A                     	;# 
   733  0E2B                     	;# 
   734  0E2C                     	;# 
   735  0E2D                     	;# 
   736  0E2E                     	;# 
   737  0E2F                     	;# 
   738  0E90                     	;# 
   739  0E91                     	;# 
   740  0E92                     	;# 
   741  0E94                     	;# 
   742  0E95                     	;# 
   743  0EA0                     	;# 
   744  0EA1                     	;# 
   745  0EA2                     	;# 
   746  0EA3                     	;# 
   747  0EA4                     	;# 
   748  0EA5                     	;# 
   749  0F0F                     	;# 
   750  0F10                     	;# 
   751  0F11                     	;# 
   752  0F12                     	;# 
   753  0F13                     	;# 
   754  0F14                     	;# 
   755  0F15                     	;# 
   756  0F16                     	;# 
   757  0F17                     	;# 
   758  0F18                     	;# 
   759  0F19                     	;# 
   760  0F1A                     	;# 
   761  0F1B                     	;# 
   762  0F1C                     	;# 
   763  0F1D                     	;# 
   764  0F1E                     	;# 
   765  0F1F                     	;# 
   766  0F20                     	;# 
   767  0F21                     	;# 
   768  0F22                     	;# 
   769  0F23                     	;# 
   770  0F24                     	;# 
   771  0F25                     	;# 
   772  0F26                     	;# 
   773  0F27                     	;# 
   774  0F28                     	;# 
   775  0F29                     	;# 
   776  0F2A                     	;# 
   777  0F2B                     	;# 
   778  0F2C                     	;# 
   779  0F2D                     	;# 
   780  0F2E                     	;# 
   781  0F2F                     	;# 
   782  0F30                     	;# 
   783  0F31                     	;# 
   784  0F32                     	;# 
   785  0F33                     	;# 
   786  0F34                     	;# 
   787  0F35                     	;# 
   788  0F36                     	;# 
   789  0F37                     	;# 
   790  0FE4                     	;# 
   791  0FE5                     	;# 
   792  0FE6                     	;# 
   793  0FE7                     	;# 
   794  0FE8                     	;# 
   795  0FE9                     	;# 
   796  0FEA                     	;# 
   797  0FEB                     	;# 
   798  0FED                     	;# 
   799  0FEE                     	;# 
   800  0FEF                     	;# 
   801  0000                     	;# 
   802  0001                     	;# 
   803  0002                     	;# 
   804  0003                     	;# 
   805  0004                     	;# 
   806  0005                     	;# 
   807  0006                     	;# 
   808  0007                     	;# 
   809  0008                     	;# 
   810  0009                     	;# 
   811  000A                     	;# 
   812  000B                     	;# 
   813  000C                     	;# 
   814  000E                     	;# 
   815  0010                     	;# 
   816  0011                     	;# 
   817  0012                     	;# 
   818  0013                     	;# 
   819  0014                     	;# 
   820  0015                     	;# 
   821  0015                     	;# 
   822  0016                     	;# 
   823  0016                     	;# 
   824  0017                     	;# 
   825  0018                     	;# 
   826  0019                     	;# 
   827  0019                     	;# 
   828  001A                     	;# 
   829  001B                     	;# 
   830  001C                     	;# 
   831  001D                     	;# 
   832  001E                     	;# 
   833  001F                     	;# 
   834  008C                     	;# 
   835  008E                     	;# 
   836  0090                     	;# 
   837  0091                     	;# 
   838  0092                     	;# 
   839  0093                     	;# 
   840  0094                     	;# 
   841  0097                     	;# 
   842  009B                     	;# 
   843  009B                     	;# 
   844  009C                     	;# 
   845  009D                     	;# 
   846  009E                     	;# 
   847  009F                     	;# 
   848  010C                     	;# 
   849  010E                     	;# 
   850  0111                     	;# 
   851  0112                     	;# 
   852  0113                     	;# 
   853  0114                     	;# 
   854  0115                     	;# 
   855  0116                     	;# 
   856  0117                     	;# 
   857  0118                     	;# 
   858  0119                     	;# 
   859  018C                     	;# 
   860  018E                     	;# 
   861  0199                     	;# 
   862  0199                     	;# 
   863  0199                     	;# 
   864  019A                     	;# 
   865  019A                     	;# 
   866  019A                     	;# 
   867  019B                     	;# 
   868  019B                     	;# 
   869  019B                     	;# 
   870  019B                     	;# 
   871  019B                     	;# 
   872  019C                     	;# 
   873  019C                     	;# 
   874  019C                     	;# 
   875  019D                     	;# 
   876  019D                     	;# 
   877  019D                     	;# 
   878  019E                     	;# 
   879  019E                     	;# 
   880  019E                     	;# 
   881  019F                     	;# 
   882  019F                     	;# 
   883  019F                     	;# 
   884  019F                     	;# 
   885  019F                     	;# 
   886  020C                     	;# 
   887  020E                     	;# 
   888  0211                     	;# 
   889  0211                     	;# 
   890  0212                     	;# 
   891  0212                     	;# 
   892  0213                     	;# 
   893  0213                     	;# 
   894  0214                     	;# 
   895  0214                     	;# 
   896  0215                     	;# 
   897  0215                     	;# 
   898  0215                     	;# 
   899  0215                     	;# 
   900  0216                     	;# 
   901  0216                     	;# 
   902  0217                     	;# 
   903  0217                     	;# 
   904  0219                     	;# 
   905  021A                     	;# 
   906  021B                     	;# 
   907  021C                     	;# 
   908  021D                     	;# 
   909  021D                     	;# 
   910  021E                     	;# 
   911  021F                     	;# 
   912  028C                     	;# 
   913  028E                     	;# 
   914  0291                     	;# 
   915  0291                     	;# 
   916  0292                     	;# 
   917  0293                     	;# 
   918  0294                     	;# 
   919  0295                     	;# 
   920  0295                     	;# 
   921  0296                     	;# 
   922  0297                     	;# 
   923  0298                     	;# 
   924  029F                     	;# 
   925  030C                     	;# 
   926  030E                     	;# 
   927  0311                     	;# 
   928  0311                     	;# 
   929  0312                     	;# 
   930  0313                     	;# 
   931  0314                     	;# 
   932  0315                     	;# 
   933  0315                     	;# 
   934  0316                     	;# 
   935  0317                     	;# 
   936  0318                     	;# 
   937  038C                     	;# 
   938  038E                     	;# 
   939  0391                     	;# 
   940  0392                     	;# 
   941  0393                     	;# 
   942  0397                     	;# 
   943  0398                     	;# 
   944  0399                     	;# 
   945  039A                     	;# 
   946  039C                     	;# 
   947  039D                     	;# 
   948  039E                     	;# 
   949  039F                     	;# 
   950  0411                     	;# 
   951  0411                     	;# 
   952  0412                     	;# 
   953  0413                     	;# 
   954  0414                     	;# 
   955  0415                     	;# 
   956  0416                     	;# 
   957  0417                     	;# 
   958  0418                     	;# 
   959  0418                     	;# 
   960  0419                     	;# 
   961  041A                     	;# 
   962  041B                     	;# 
   963  041C                     	;# 
   964  041D                     	;# 
   965  041E                     	;# 
   966  041F                     	;# 
   967  0498                     	;# 
   968  0498                     	;# 
   969  0499                     	;# 
   970  049A                     	;# 
   971  049B                     	;# 
   972  049B                     	;# 
   973  049C                     	;# 
   974  049D                     	;# 
   975  049E                     	;# 
   976  049F                     	;# 
   977  0617                     	;# 
   978  0618                     	;# 
   979  0619                     	;# 
   980  0619                     	;# 
   981  061A                     	;# 
   982  061B                     	;# 
   983  061C                     	;# 
   984  061C                     	;# 
   985  061F                     	;# 
   986  0691                     	;# 
   987  0692                     	;# 
   988  0693                     	;# 
   989  0694                     	;# 
   990  0695                     	;# 
   991  0696                     	;# 
   992  0697                     	;# 
   993  0698                     	;# 
   994  0699                     	;# 
   995  0711                     	;# 
   996  0712                     	;# 
   997  0713                     	;# 
   998  0714                     	;# 
   999  0715                     	;# 
  1000  0716                     	;# 
  1001  0717                     	;# 
  1002  0718                     	;# 
  1003  0719                     	;# 
  1004  0891                     	;# 
  1005  0891                     	;# 
  1006  0891                     	;# 
  1007  0891                     	;# 
  1008  0891                     	;# 
  1009  0891                     	;# 
  1010  0892                     	;# 
  1011  0892                     	;# 
  1012  0892                     	;# 
  1013  0893                     	;# 
  1014  0893                     	;# 
  1015  0893                     	;# 
  1016  0893                     	;# 
  1017  0893                     	;# 
  1018  0893                     	;# 
  1019  0894                     	;# 
  1020  0894                     	;# 
  1021  0894                     	;# 
  1022  0895                     	;# 
  1023  0895                     	;# 
  1024  0895                     	;# 
  1025  0896                     	;# 
  1026  0896                     	;# 
  1027  0896                     	;# 
  1028  089B                     	;# 
  1029  0911                     	;# 
  1030  0912                     	;# 
  1031  0913                     	;# 
  1032  0914                     	;# 
  1033  0915                     	;# 
  1034  0916                     	;# 
  1035  0918                     	;# 
  1036  0919                     	;# 
  1037  091A                     	;# 
  1038  091B                     	;# 
  1039  091C                     	;# 
  1040  091D                     	;# 
  1041  091E                     	;# 
  1042  091F                     	;# 
  1043  0E0F                     	;# 
  1044  0E10                     	;# 
  1045  0E11                     	;# 
  1046  0E12                     	;# 
  1047  0E13                     	;# 
  1048  0E14                     	;# 
  1049  0E15                     	;# 
  1050  0E16                     	;# 
  1051  0E17                     	;# 
  1052  0E18                     	;# 
  1053  0E19                     	;# 
  1054  0E1A                     	;# 
  1055  0E1B                     	;# 
  1056  0E1C                     	;# 
  1057  0E1D                     	;# 
  1058  0E1E                     	;# 
  1059  0E1F                     	;# 
  1060  0E20                     	;# 
  1061  0E21                     	;# 
  1062  0E22                     	;# 
  1063  0E24                     	;# 
  1064  0E25                     	;# 
  1065  0E28                     	;# 
  1066  0E29                     	;# 
  1067  0E2A                     	;# 
  1068  0E2B                     	;# 
  1069  0E2C                     	;# 
  1070  0E2D                     	;# 
  1071  0E2E                     	;# 
  1072  0E2F                     	;# 
  1073  0E90                     	;# 
  1074  0E91                     	;# 
  1075  0E92                     	;# 
  1076  0E94                     	;# 
  1077  0E95                     	;# 
  1078  0EA0                     	;# 
  1079  0EA1                     	;# 
  1080  0EA2                     	;# 
  1081  0EA3                     	;# 
  1082  0EA4                     	;# 
  1083  0EA5                     	;# 
  1084  0F0F                     	;# 
  1085  0F10                     	;# 
  1086  0F11                     	;# 
  1087  0F12                     	;# 
  1088  0F13                     	;# 
  1089  0F14                     	;# 
  1090  0F15                     	;# 
  1091  0F16                     	;# 
  1092  0F17                     	;# 
  1093  0F18                     	;# 
  1094  0F19                     	;# 
  1095  0F1A                     	;# 
  1096  0F1B                     	;# 
  1097  0F1C                     	;# 
  1098  0F1D                     	;# 
  1099  0F1E                     	;# 
  1100  0F1F                     	;# 
  1101  0F20                     	;# 
  1102  0F21                     	;# 
  1103  0F22                     	;# 
  1104  0F23                     	;# 
  1105  0F24                     	;# 
  1106  0F25                     	;# 
  1107  0F26                     	;# 
  1108  0F27                     	;# 
  1109  0F28                     	;# 
  1110  0F29                     	;# 
  1111  0F2A                     	;# 
  1112  0F2B                     	;# 
  1113  0F2C                     	;# 
  1114  0F2D                     	;# 
  1115  0F2E                     	;# 
  1116  0F2F                     	;# 
  1117  0F30                     	;# 
  1118  0F31                     	;# 
  1119  0F32                     	;# 
  1120  0F33                     	;# 
  1121  0F34                     	;# 
  1122  0F35                     	;# 
  1123  0F36                     	;# 
  1124  0F37                     	;# 
  1125  0FE4                     	;# 
  1126  0FE5                     	;# 
  1127  0FE6                     	;# 
  1128  0FE7                     	;# 
  1129  0FE8                     	;# 
  1130  0FE9                     	;# 
  1131  0FEA                     	;# 
  1132  0FEB                     	;# 
  1133  0FED                     	;# 
  1134  0FEE                     	;# 
  1135  0FEF                     	;# 
  1136  0000                     	;# 
  1137  0001                     	;# 
  1138  0002                     	;# 
  1139  0003                     	;# 
  1140  0004                     	;# 
  1141  0005                     	;# 
  1142  0006                     	;# 
  1143  0007                     	;# 
  1144  0008                     	;# 
  1145  0009                     	;# 
  1146  000A                     	;# 
  1147  000B                     	;# 
  1148  000C                     	;# 
  1149  000E                     	;# 
  1150  0010                     	;# 
  1151  0011                     	;# 
  1152  0012                     	;# 
  1153  0013                     	;# 
  1154  0014                     	;# 
  1155  0015                     	;# 
  1156  0015                     	;# 
  1157  0016                     	;# 
  1158  0016                     	;# 
  1159  0017                     	;# 
  1160  0018                     	;# 
  1161  0019                     	;# 
  1162  0019                     	;# 
  1163  001A                     	;# 
  1164  001B                     	;# 
  1165  001C                     	;# 
  1166  001D                     	;# 
  1167  001E                     	;# 
  1168  001F                     	;# 
  1169  008C                     	;# 
  1170  008E                     	;# 
  1171  0090                     	;# 
  1172  0091                     	;# 
  1173  0092                     	;# 
  1174  0093                     	;# 
  1175  0094                     	;# 
  1176  0097                     	;# 
  1177  009B                     	;# 
  1178  009B                     	;# 
  1179  009C                     	;# 
  1180  009D                     	;# 
  1181  009E                     	;# 
  1182  009F                     	;# 
  1183  010C                     	;# 
  1184  010E                     	;# 
  1185  0111                     	;# 
  1186  0112                     	;# 
  1187  0113                     	;# 
  1188  0114                     	;# 
  1189  0115                     	;# 
  1190  0116                     	;# 
  1191  0117                     	;# 
  1192  0118                     	;# 
  1193  0119                     	;# 
  1194  018C                     	;# 
  1195  018E                     	;# 
  1196  0199                     	;# 
  1197  0199                     	;# 
  1198  0199                     	;# 
  1199  019A                     	;# 
  1200  019A                     	;# 
  1201  019A                     	;# 
  1202  019B                     	;# 
  1203  019B                     	;# 
  1204  019B                     	;# 
  1205  019B                     	;# 
  1206  019B                     	;# 
  1207  019C                     	;# 
  1208  019C                     	;# 
  1209  019C                     	;# 
  1210  019D                     	;# 
  1211  019D                     	;# 
  1212  019D                     	;# 
  1213  019E                     	;# 
  1214  019E                     	;# 
  1215  019E                     	;# 
  1216  019F                     	;# 
  1217  019F                     	;# 
  1218  019F                     	;# 
  1219  019F                     	;# 
  1220  019F                     	;# 
  1221  020C                     	;# 
  1222  020E                     	;# 
  1223  0211                     	;# 
  1224  0211                     	;# 
  1225  0212                     	;# 
  1226  0212                     	;# 
  1227  0213                     	;# 
  1228  0213                     	;# 
  1229  0214                     	;# 
  1230  0214                     	;# 
  1231  0215                     	;# 
  1232  0215                     	;# 
  1233  0215                     	;# 
  1234  0215                     	;# 
  1235  0216                     	;# 
  1236  0216                     	;# 
  1237  0217                     	;# 
  1238  0217                     	;# 
  1239  0219                     	;# 
  1240  021A                     	;# 
  1241  021B                     	;# 
  1242  021C                     	;# 
  1243  021D                     	;# 
  1244  021D                     	;# 
  1245  021E                     	;# 
  1246  021F                     	;# 
  1247  028C                     	;# 
  1248  028E                     	;# 
  1249  0291                     	;# 
  1250  0291                     	;# 
  1251  0292                     	;# 
  1252  0293                     	;# 
  1253  0294                     	;# 
  1254  0295                     	;# 
  1255  0295                     	;# 
  1256  0296                     	;# 
  1257  0297                     	;# 
  1258  0298                     	;# 
  1259  029F                     	;# 
  1260  030C                     	;# 
  1261  030E                     	;# 
  1262  0311                     	;# 
  1263  0311                     	;# 
  1264  0312                     	;# 
  1265  0313                     	;# 
  1266  0314                     	;# 
  1267  0315                     	;# 
  1268  0315                     	;# 
  1269  0316                     	;# 
  1270  0317                     	;# 
  1271  0318                     	;# 
  1272  038C                     	;# 
  1273  038E                     	;# 
  1274  0391                     	;# 
  1275  0392                     	;# 
  1276  0393                     	;# 
  1277  0397                     	;# 
  1278  0398                     	;# 
  1279  0399                     	;# 
  1280  039A                     	;# 
  1281  039C                     	;# 
  1282  039D                     	;# 
  1283  039E                     	;# 
  1284  039F                     	;# 
  1285  0411                     	;# 
  1286  0411                     	;# 
  1287  0412                     	;# 
  1288  0413                     	;# 
  1289  0414                     	;# 
  1290  0415                     	;# 
  1291  0416                     	;# 
  1292  0417                     	;# 
  1293  0418                     	;# 
  1294  0418                     	;# 
  1295  0419                     	;# 
  1296  041A                     	;# 
  1297  041B                     	;# 
  1298  041C                     	;# 
  1299  041D                     	;# 
  1300  041E                     	;# 
  1301  041F                     	;# 
  1302  0498                     	;# 
  1303  0498                     	;# 
  1304  0499                     	;# 
  1305  049A                     	;# 
  1306  049B                     	;# 
  1307  049B                     	;# 
  1308  049C                     	;# 
  1309  049D                     	;# 
  1310  049E                     	;# 
  1311  049F                     	;# 
  1312  0617                     	;# 
  1313  0618                     	;# 
  1314  0619                     	;# 
  1315  0619                     	;# 
  1316  061A                     	;# 
  1317  061B                     	;# 
  1318  061C                     	;# 
  1319  061C                     	;# 
  1320  061F                     	;# 
  1321  0691                     	;# 
  1322  0692                     	;# 
  1323  0693                     	;# 
  1324  0694                     	;# 
  1325  0695                     	;# 
  1326  0696                     	;# 
  1327  0697                     	;# 
  1328  0698                     	;# 
  1329  0699                     	;# 
  1330  0711                     	;# 
  1331  0712                     	;# 
  1332  0713                     	;# 
  1333  0714                     	;# 
  1334  0715                     	;# 
  1335  0716                     	;# 
  1336  0717                     	;# 
  1337  0718                     	;# 
  1338  0719                     	;# 
  1339  0891                     	;# 
  1340  0891                     	;# 
  1341  0891                     	;# 
  1342  0891                     	;# 
  1343  0891                     	;# 
  1344  0891                     	;# 
  1345  0892                     	;# 
  1346  0892                     	;# 
  1347  0892                     	;# 
  1348  0893                     	;# 
  1349  0893                     	;# 
  1350  0893                     	;# 
  1351  0893                     	;# 
  1352  0893                     	;# 
  1353  0893                     	;# 
  1354  0894                     	;# 
  1355  0894                     	;# 
  1356  0894                     	;# 
  1357  0895                     	;# 
  1358  0895                     	;# 
  1359  0895                     	;# 
  1360  0896                     	;# 
  1361  0896                     	;# 
  1362  0896                     	;# 
  1363  089B                     	;# 
  1364  0911                     	;# 
  1365  0912                     	;# 
  1366  0913                     	;# 
  1367  0914                     	;# 
  1368  0915                     	;# 
  1369  0916                     	;# 
  1370  0918                     	;# 
  1371  0919                     	;# 
  1372  091A                     	;# 
  1373  091B                     	;# 
  1374  091C                     	;# 
  1375  091D                     	;# 
  1376  091E                     	;# 
  1377  091F                     	;# 
  1378  0E0F                     	;# 
  1379  0E10                     	;# 
  1380  0E11                     	;# 
  1381  0E12                     	;# 
  1382  0E13                     	;# 
  1383  0E14                     	;# 
  1384  0E15                     	;# 
  1385  0E16                     	;# 
  1386  0E17                     	;# 
  1387  0E18                     	;# 
  1388  0E19                     	;# 
  1389  0E1A                     	;# 
  1390  0E1B                     	;# 
  1391  0E1C                     	;# 
  1392  0E1D                     	;# 
  1393  0E1E                     	;# 
  1394  0E1F                     	;# 
  1395  0E20                     	;# 
  1396  0E21                     	;# 
  1397  0E22                     	;# 
  1398  0E24                     	;# 
  1399  0E25                     	;# 
  1400  0E28                     	;# 
  1401  0E29                     	;# 
  1402  0E2A                     	;# 
  1403  0E2B                     	;# 
  1404  0E2C                     	;# 
  1405  0E2D                     	;# 
  1406  0E2E                     	;# 
  1407  0E2F                     	;# 
  1408  0E90                     	;# 
  1409  0E91                     	;# 
  1410  0E92                     	;# 
  1411  0E94                     	;# 
  1412  0E95                     	;# 
  1413  0EA0                     	;# 
  1414  0EA1                     	;# 
  1415  0EA2                     	;# 
  1416  0EA3                     	;# 
  1417  0EA4                     	;# 
  1418  0EA5                     	;# 
  1419  0F0F                     	;# 
  1420  0F10                     	;# 
  1421  0F11                     	;# 
  1422  0F12                     	;# 
  1423  0F13                     	;# 
  1424  0F14                     	;# 
  1425  0F15                     	;# 
  1426  0F16                     	;# 
  1427  0F17                     	;# 
  1428  0F18                     	;# 
  1429  0F19                     	;# 
  1430  0F1A                     	;# 
  1431  0F1B                     	;# 
  1432  0F1C                     	;# 
  1433  0F1D                     	;# 
  1434  0F1E                     	;# 
  1435  0F1F                     	;# 
  1436  0F20                     	;# 
  1437  0F21                     	;# 
  1438  0F22                     	;# 
  1439  0F23                     	;# 
  1440  0F24                     	;# 
  1441  0F25                     	;# 
  1442  0F26                     	;# 
  1443  0F27                     	;# 
  1444  0F28                     	;# 
  1445  0F29                     	;# 
  1446  0F2A                     	;# 
  1447  0F2B                     	;# 
  1448  0F2C                     	;# 
  1449  0F2D                     	;# 
  1450  0F2E                     	;# 
  1451  0F2F                     	;# 
  1452  0F30                     	;# 
  1453  0F31                     	;# 
  1454  0F32                     	;# 
  1455  0F33                     	;# 
  1456  0F34                     	;# 
  1457  0F35                     	;# 
  1458  0F36                     	;# 
  1459  0F37                     	;# 
  1460  0FE4                     	;# 
  1461  0FE5                     	;# 
  1462  0FE6                     	;# 
  1463  0FE7                     	;# 
  1464  0FE8                     	;# 
  1465  0FE9                     	;# 
  1466  0FEA                     	;# 
  1467  0FEB                     	;# 
  1468  0FED                     	;# 
  1469  0FEE                     	;# 
  1470  0FEF                     	;# 
  1471  0000                     	;# 
  1472  0001                     	;# 
  1473  0002                     	;# 
  1474  0003                     	;# 
  1475  0004                     	;# 
  1476  0005                     	;# 
  1477  0006                     	;# 
  1478  0007                     	;# 
  1479  0008                     	;# 
  1480  0009                     	;# 
  1481  000A                     	;# 
  1482  000B                     	;# 
  1483  000C                     	;# 
  1484  000E                     	;# 
  1485  0010                     	;# 
  1486  0011                     	;# 
  1487  0012                     	;# 
  1488  0013                     	;# 
  1489  0014                     	;# 
  1490  0015                     	;# 
  1491  0015                     	;# 
  1492  0016                     	;# 
  1493  0016                     	;# 
  1494  0017                     	;# 
  1495  0018                     	;# 
  1496  0019                     	;# 
  1497  0019                     	;# 
  1498  001A                     	;# 
  1499  001B                     	;# 
  1500  001C                     	;# 
  1501  001D                     	;# 
  1502  001E                     	;# 
  1503  001F                     	;# 
  1504  008C                     	;# 
  1505  008E                     	;# 
  1506  0090                     	;# 
  1507  0091                     	;# 
  1508  0092                     	;# 
  1509  0093                     	;# 
  1510  0094                     	;# 
  1511  0097                     	;# 
  1512  009B                     	;# 
  1513  009B                     	;# 
  1514  009C                     	;# 
  1515  009D                     	;# 
  1516  009E                     	;# 
  1517  009F                     	;# 
  1518  010C                     	;# 
  1519  010E                     	;# 
  1520  0111                     	;# 
  1521  0112                     	;# 
  1522  0113                     	;# 
  1523  0114                     	;# 
  1524  0115                     	;# 
  1525  0116                     	;# 
  1526  0117                     	;# 
  1527  0118                     	;# 
  1528  0119                     	;# 
  1529  018C                     	;# 
  1530  018E                     	;# 
  1531  0199                     	;# 
  1532  0199                     	;# 
  1533  0199                     	;# 
  1534  019A                     	;# 
  1535  019A                     	;# 
  1536  019A                     	;# 
  1537  019B                     	;# 
  1538  019B                     	;# 
  1539  019B                     	;# 
  1540  019B                     	;# 
  1541  019B                     	;# 
  1542  019C                     	;# 
  1543  019C                     	;# 
  1544  019C                     	;# 
  1545  019D                     	;# 
  1546  019D                     	;# 
  1547  019D                     	;# 
  1548  019E                     	;# 
  1549  019E                     	;# 
  1550  019E                     	;# 
  1551  019F                     	;# 
  1552  019F                     	;# 
  1553  019F                     	;# 
  1554  019F                     	;# 
  1555  019F                     	;# 
  1556  020C                     	;# 
  1557  020E                     	;# 
  1558  0211                     	;# 
  1559  0211                     	;# 
  1560  0212                     	;# 
  1561  0212                     	;# 
  1562  0213                     	;# 
  1563  0213                     	;# 
  1564  0214                     	;# 
  1565  0214                     	;# 
  1566  0215                     	;# 
  1567  0215                     	;# 
  1568  0215                     	;# 
  1569  0215                     	;# 
  1570  0216                     	;# 
  1571  0216                     	;# 
  1572  0217                     	;# 
  1573  0217                     	;# 
  1574  0219                     	;# 
  1575  021A                     	;# 
  1576  021B                     	;# 
  1577  021C                     	;# 
  1578  021D                     	;# 
  1579  021D                     	;# 
  1580  021E                     	;# 
  1581  021F                     	;# 
  1582  028C                     	;# 
  1583  028E                     	;# 
  1584  0291                     	;# 
  1585  0291                     	;# 
  1586  0292                     	;# 
  1587  0293                     	;# 
  1588  0294                     	;# 
  1589  0295                     	;# 
  1590  0295                     	;# 
  1591  0296                     	;# 
  1592  0297                     	;# 
  1593  0298                     	;# 
  1594  029F                     	;# 
  1595  030C                     	;# 
  1596  030E                     	;# 
  1597  0311                     	;# 
  1598  0311                     	;# 
  1599  0312                     	;# 
  1600  0313                     	;# 
  1601  0314                     	;# 
  1602  0315                     	;# 
  1603  0315                     	;# 
  1604  0316                     	;# 
  1605  0317                     	;# 
  1606  0318                     	;# 
  1607  038C                     	;# 
  1608  038E                     	;# 
  1609  0391                     	;# 
  1610  0392                     	;# 
  1611  0393                     	;# 
  1612  0397                     	;# 
  1613  0398                     	;# 
  1614  0399                     	;# 
  1615  039A                     	;# 
  1616  039C                     	;# 
  1617  039D                     	;# 
  1618  039E                     	;# 
  1619  039F                     	;# 
  1620  0411                     	;# 
  1621  0411                     	;# 
  1622  0412                     	;# 
  1623  0413                     	;# 
  1624  0414                     	;# 
  1625  0415                     	;# 
  1626  0416                     	;# 
  1627  0417                     	;# 
  1628  0418                     	;# 
  1629  0418                     	;# 
  1630  0419                     	;# 
  1631  041A                     	;# 
  1632  041B                     	;# 
  1633  041C                     	;# 
  1634  041D                     	;# 
  1635  041E                     	;# 
  1636  041F                     	;# 
  1637  0498                     	;# 
  1638  0498                     	;# 
  1639  0499                     	;# 
  1640  049A                     	;# 
  1641  049B                     	;# 
  1642  049B                     	;# 
  1643  049C                     	;# 
  1644  049D                     	;# 
  1645  049E                     	;# 
  1646  049F                     	;# 
  1647  0617                     	;# 
  1648  0618                     	;# 
  1649  0619                     	;# 
  1650  0619                     	;# 
  1651  061A                     	;# 
  1652  061B                     	;# 
  1653  061C                     	;# 
  1654  061C                     	;# 
  1655  061F                     	;# 
  1656  0691                     	;# 
  1657  0692                     	;# 
  1658  0693                     	;# 
  1659  0694                     	;# 
  1660  0695                     	;# 
  1661  0696                     	;# 
  1662  0697                     	;# 
  1663  0698                     	;# 
  1664  0699                     	;# 
  1665  0711                     	;# 
  1666  0712                     	;# 
  1667  0713                     	;# 
  1668  0714                     	;# 
  1669  0715                     	;# 
  1670  0716                     	;# 
  1671  0717                     	;# 
  1672  0718                     	;# 
  1673  0719                     	;# 
  1674  0891                     	;# 
  1675  0891                     	;# 
  1676  0891                     	;# 
  1677  0891                     	;# 
  1678  0891                     	;# 
  1679  0891                     	;# 
  1680  0892                     	;# 
  1681  0892                     	;# 
  1682  0892                     	;# 
  1683  0893                     	;# 
  1684  0893                     	;# 
  1685  0893                     	;# 
  1686  0893                     	;# 
  1687  0893                     	;# 
  1688  0893                     	;# 
  1689  0894                     	;# 
  1690  0894                     	;# 
  1691  0894                     	;# 
  1692  0895                     	;# 
  1693  0895                     	;# 
  1694  0895                     	;# 
  1695  0896                     	;# 
  1696  0896                     	;# 
  1697  0896                     	;# 
  1698  089B                     	;# 
  1699  0911                     	;# 
  1700  0912                     	;# 
  1701  0913                     	;# 
  1702  0914                     	;# 
  1703  0915                     	;# 
  1704  0916                     	;# 
  1705  0918                     	;# 
  1706  0919                     	;# 
  1707  091A                     	;# 
  1708  091B                     	;# 
  1709  091C                     	;# 
  1710  091D                     	;# 
  1711  091E                     	;# 
  1712  091F                     	;# 
  1713  0E0F                     	;# 
  1714  0E10                     	;# 
  1715  0E11                     	;# 
  1716  0E12                     	;# 
  1717  0E13                     	;# 
  1718  0E14                     	;# 
  1719  0E15                     	;# 
  1720  0E16                     	;# 
  1721  0E17                     	;# 
  1722  0E18                     	;# 
  1723  0E19                     	;# 
  1724  0E1A                     	;# 
  1725  0E1B                     	;# 
  1726  0E1C                     	;# 
  1727  0E1D                     	;# 
  1728  0E1E                     	;# 
  1729  0E1F                     	;# 
  1730  0E20                     	;# 
  1731  0E21                     	;# 
  1732  0E22                     	;# 
  1733  0E24                     	;# 
  1734  0E25                     	;# 
  1735  0E28                     	;# 
  1736  0E29                     	;# 
  1737  0E2A                     	;# 
  1738  0E2B                     	;# 
  1739  0E2C                     	;# 
  1740  0E2D                     	;# 
  1741  0E2E                     	;# 
  1742  0E2F                     	;# 
  1743  0E90                     	;# 
  1744  0E91                     	;# 
  1745  0E92                     	;# 
  1746  0E94                     	;# 
  1747  0E95                     	;# 
  1748  0EA0                     	;# 
  1749  0EA1                     	;# 
  1750  0EA2                     	;# 
  1751  0EA3                     	;# 
  1752  0EA4                     	;# 
  1753  0EA5                     	;# 
  1754  0F0F                     	;# 
  1755  0F10                     	;# 
  1756  0F11                     	;# 
  1757  0F12                     	;# 
  1758  0F13                     	;# 
  1759  0F14                     	;# 
  1760  0F15                     	;# 
  1761  0F16                     	;# 
  1762  0F17                     	;# 
  1763  0F18                     	;# 
  1764  0F19                     	;# 
  1765  0F1A                     	;# 
  1766  0F1B                     	;# 
  1767  0F1C                     	;# 
  1768  0F1D                     	;# 
  1769  0F1E                     	;# 
  1770  0F1F                     	;# 
  1771  0F20                     	;# 
  1772  0F21                     	;# 
  1773  0F22                     	;# 
  1774  0F23                     	;# 
  1775  0F24                     	;# 
  1776  0F25                     	;# 
  1777  0F26                     	;# 
  1778  0F27                     	;# 
  1779  0F28                     	;# 
  1780  0F29                     	;# 
  1781  0F2A                     	;# 
  1782  0F2B                     	;# 
  1783  0F2C                     	;# 
  1784  0F2D                     	;# 
  1785  0F2E                     	;# 
  1786  0F2F                     	;# 
  1787  0F30                     	;# 
  1788  0F31                     	;# 
  1789  0F32                     	;# 
  1790  0F33                     	;# 
  1791  0F34                     	;# 
  1792  0F35                     	;# 
  1793  0F36                     	;# 
  1794  0F37                     	;# 
  1795  0FE4                     	;# 
  1796  0FE5                     	;# 
  1797  0FE6                     	;# 
  1798  0FE7                     	;# 
  1799  0FE8                     	;# 
  1800  0FE9                     	;# 
  1801  0FEA                     	;# 
  1802  0FEB                     	;# 
  1803  0FED                     	;# 
  1804  0FEE                     	;# 
  1805  0FEF                     	;# 
  1806                           
  1807                           	psect	idataBANK1
  1808  0003                     __pidataBANK1:	
  1809                           
  1810                           ;initializer for _romData
  1811  0003  3420               	retlw	low (_romDataMap| (0+512))
  1812                           
  1813                           	psect	stringtext1
  1814  1800                     __pstringtext1:	
  1815  1800                     _dpowers:	
  1816  1800  3401               	retlw	1
  1817  1801  3400               	retlw	0
  1818  1802  3400               	retlw	0
  1819  1803  3400               	retlw	0
  1820  1804  340A               	retlw	10
  1821  1805  3400               	retlw	0
  1822  1806  3400               	retlw	0
  1823  1807  3400               	retlw	0
  1824  1808  3464               	retlw	100
  1825  1809  3400               	retlw	0
  1826  180A  3400               	retlw	0
  1827  180B  3400               	retlw	0
  1828  180C  34E8               	retlw	232
  1829  180D  3403               	retlw	3
  1830  180E  3400               	retlw	0
  1831  180F  3400               	retlw	0
  1832  1810  3410               	retlw	16
  1833  1811  3427               	retlw	39
  1834  1812  3400               	retlw	0
  1835  1813  3400               	retlw	0
  1836  1814  34A0               	retlw	160
  1837  1815  3486               	retlw	134
  1838  1816  3401               	retlw	1
  1839  1817  3400               	retlw	0
  1840  1818  3440               	retlw	64
  1841  1819  3442               	retlw	66
  1842  181A  340F               	retlw	15
  1843  181B  3400               	retlw	0
  1844  181C  3480               	retlw	128
  1845  181D  3496               	retlw	150
  1846  181E  3498               	retlw	152
  1847  181F  3400               	retlw	0
  1848  1820  3400               	retlw	0
  1849  1821  34E1               	retlw	225
  1850  1822  34F5               	retlw	245
  1851  1823  3405               	retlw	5
  1852  1824  3400               	retlw	0
  1853  1825  34CA               	retlw	202
  1854  1826  349A               	retlw	154
  1855  1827  343B               	retlw	59
  1856  1828                     __end_of_dpowers:	
  1857                           
  1858                           	psect	stringtext2
  1859  1828                     __pstringtext2:	
  1860  1828                     __powers_:	
  1861  1828  3400               	retlw	0
  1862  1829  3480               	retlw	128
  1863  182A  343F               	retlw	63
  1864  182B  3400               	retlw	0
  1865  182C  3420               	retlw	32
  1866  182D  3441               	retlw	65
  1867  182E  3400               	retlw	0
  1868  182F  34C8               	retlw	200
  1869  1830  3442               	retlw	66
  1870  1831  3400               	retlw	0
  1871  1832  347A               	retlw	122
  1872  1833  3444               	retlw	68
  1873  1834  3440               	retlw	64
  1874  1835  341C               	retlw	28
  1875  1836  3446               	retlw	70
  1876  1837  3450               	retlw	80
  1877  1838  34C3               	retlw	195
  1878  1839  3447               	retlw	71
  1879  183A  3424               	retlw	36
  1880  183B  3474               	retlw	116
  1881  183C  3449               	retlw	73
  1882  183D  3497               	retlw	151
  1883  183E  3418               	retlw	24
  1884  183F  344B               	retlw	75
  1885  1840  34BC               	retlw	188
  1886  1841  34BE               	retlw	190
  1887  1842  344C               	retlw	76
  1888  1843  346B               	retlw	107
  1889  1844  346E               	retlw	110
  1890  1845  344E               	retlw	78
  1891  1846  3403               	retlw	3
  1892  1847  3415               	retlw	21
  1893  1848  3450               	retlw	80
  1894  1849  3479               	retlw	121
  1895  184A  34AD               	retlw	173
  1896  184B  3460               	retlw	96
  1897  184C  34F3               	retlw	243
  1898  184D  3449               	retlw	73
  1899  184E  3471               	retlw	113
  1900  184F                     __end_of__powers_:	
  1901                           
  1902                           	psect	stringtext3
  1903  184F                     __pstringtext3:	
  1904  184F                     __npowers_:	
  1905  184F  3400               	retlw	0
  1906  1850  3480               	retlw	128
  1907  1851  343F               	retlw	63
  1908  1852  34CD               	retlw	205
  1909  1853  34CC               	retlw	204
  1910  1854  343D               	retlw	61
  1911  1855  34D7               	retlw	215
  1912  1856  3423               	retlw	35
  1913  1857  343C               	retlw	60
  1914  1858  3412               	retlw	18
  1915  1859  3483               	retlw	131
  1916  185A  343A               	retlw	58
  1917  185B  34B7               	retlw	183
  1918  185C  34D1               	retlw	209
  1919  185D  3438               	retlw	56
  1920  185E  34C6               	retlw	198
  1921  185F  3427               	retlw	39
  1922  1860  3437               	retlw	55
  1923  1861  3438               	retlw	56
  1924  1862  3486               	retlw	134
  1925  1863  3435               	retlw	53
  1926  1864  34C0               	retlw	192
  1927  1865  34D6               	retlw	214
  1928  1866  3433               	retlw	51
  1929  1867  34CC               	retlw	204
  1930  1868  342B               	retlw	43
  1931  1869  3432               	retlw	50
  1932  186A  3470               	retlw	112
  1933  186B  3489               	retlw	137
  1934  186C  3430               	retlw	48
  1935  186D  34E7               	retlw	231
  1936  186E  34DB               	retlw	219
  1937  186F  342E               	retlw	46
  1938  1870  34E5               	retlw	229
  1939  1871  343C               	retlw	60
  1940  1872  341E               	retlw	30
  1941  1873  3442               	retlw	66
  1942  1874  34A2               	retlw	162
  1943  1875  340D               	retlw	13
  1944  1876                     __end_of__npowers_:	
  1945                           
  1946                           	psect	stringtext4
  1947  1876                     __pstringtext4:	
  1948  1876                     _statuses:	
  1949  1876  3400               	retlw	0
  1950  1877  3401               	retlw	1
  1951  1878  3402               	retlw	2
  1952  1879  3403               	retlw	3
  1953  187A  3404               	retlw	4
  1954  187B  3400               	retlw	0
  1955  187C  3401               	retlw	1
  1956  187D  3402               	retlw	2
  1957  187E  3403               	retlw	3
  1958  187F  3404               	retlw	4
  1959  1880  3405               	retlw	5
  1960  1881                     __end_of_statuses:	
  1961                           
  1962                           	psect	stringtext5
  1963  18A0                     __pstringtext5:	
  1964  18A0                     _n_ADDRESS_P0:	
  1965  18A0  34AD               	retlw	173
  1966  18A1  3487               	retlw	135
  1967  18A2  3466               	retlw	102
  1968  18A3  34BC               	retlw	188
  1969  18A4  34BB               	retlw	187
  1970  18A5                     __end_of_n_ADDRESS_P0:	
  1971                           
  1972                           	psect	stringtext6
  1973  1881                     __pstringtext6:	
  1974  1881                     _n_ADDRESS_MUL:	
  1975  1881  3421               	retlw	33
  1976  1882                     __end_of_n_ADDRESS_MUL:	
  1977  000B                     _INTCONbits	set	11
  1978  0010                     _PIR0bits	set	16
  1979  000E                     _PORTCbits	set	14
  1980  000C                     _PORTAbits	set	12
  1981  009E                     _ADCON1bits	set	158
  1982  009C                     _ADRESH	set	156
  1983  009B                     _ADRESL	set	155
  1984  009D                     _ADCON0bits	set	157
  1985  0097                     _WDTCONbits	set	151
  1986  0090                     _PIE0bits	set	144
  1987  008E                     _TRISCbits	set	142
  1988  008C                     _TRISAbits	set	140
  1989  0117                     _FVRCONbits	set	279
  1990  018E                     _ANSELCbits	set	398
  1991  018C                     _ANSELAbits	set	396
  1992  018E                     _ANSELC	set	398
  1993  018C                     _ANSELA	set	396
  1994  020C                     _WPUAbits	set	524
  1995  020E                     _WPUC	set	526
  1996  020C                     _WPUA	set	524
  1997  0211                     _SSP1BUF	set	529
  1998  0214                     _SSP1STATbits	set	532
  1999  0215                     _SSP1CON1bits	set	533
  2000  028C                     _ODCONAbits	set	652
  2001  028E                     _ODCONC	set	654
  2002  028C                     _ODCONA	set	652
  2003  038E                     _INLVLC	set	910
  2004  038C                     _INLVLA	set	908
  2005  0919                     _OSCCON1bits	set	2329
  2006  0EA0                     _RC0PPSbits	set	3744
  2007  0EA2                     _RC2PPSbits	set	3746
  2008  0EA1                     _RC1PPSbits	set	3745
  2009  1882                     STR_1:	
  2010  1882  342F               	retlw	47	;'/'
  2011  1883  3425               	retlw	37	;'%'
  2012  1884  3473               	retlw	115	;'s'
  2013  1885  342F               	retlw	47	;'/'
  2014  1886  3425               	retlw	37	;'%'
  2015  1887  3473               	retlw	115	;'s'
  2016  1888  342F               	retlw	47	;'/'
  2017  1889  3425               	retlw	37	;'%'
  2018  188A  3466               	retlw	102	;'f'
  2019  188B  3400               	retlw	0
  2020                           
  2021                           	psect	stringtext7
  2022  188C                     __pstringtext7:	
  2023  188C                     STR_13:	
  2024  188C  3428               	retlw	40	;'('
  2025  188D  346E               	retlw	110	;'n'
  2026  188E  3475               	retlw	117	;'u'
  2027  188F  346C               	retlw	108	;'l'
  2028  1890  346C               	retlw	108	;'l'
  2029  1891  3429               	retlw	41	;')'
  2030  1892  3400               	retlw	0
  2031                           
  2032                           	psect	stringtext8
  2033  1893                     __pstringtext8:	
  2034  1893                     STR_5:	
  2035  1893  3441               	retlw	65	;'A'
  2036  1894  344E               	retlw	78	;'N'
  2037  1895  3443               	retlw	67	;'C'
  2038  1896  3433               	retlw	51	;'3'
  2039  1897  346D               	retlw	109	;'m'
  2040  1898  3456               	retlw	86	;'V'
  2041  1899  3400               	retlw	0
  2042                           
  2043                           	psect	stringtext9
  2044  189A                     __pstringtext9:	
  2045  189A                     STR_9:	
  2046  189A  3452               	retlw	82	;'R'
  2047  189B  3446               	retlw	70	;'F'
  2048  189C  3450               	retlw	80	;'P'
  2049  189D  3457               	retlw	87	;'W'
  2050  189E  3452               	retlw	82	;'R'
  2051  189F  3400               	retlw	0
  2052                           
  2053                           	psect	stringtext10
  2054  18A5                     __pstringtext10:	
  2055  18A5                     STR_2:	
  2056  18A5  3444               	retlw	68	;'D'
  2057  18A6  3442               	retlw	66	;'B'
  2058  18A7  3447               	retlw	71	;'G'
  2059  18A8  3431               	retlw	49	;'1'
  2060  18A9  3400               	retlw	0
  2061                           
  2062                           	psect	stringtext11
  2063  18AA                     __pstringtext11:	
  2064  18AA                     STR_4:	
  2065  18AA  3444               	retlw	68	;'D'
  2066  18AB  3442               	retlw	66	;'B'
  2067  18AC  3447               	retlw	71	;'G'
  2068  18AD  3432               	retlw	50	;'2'
  2069  18AE  3400               	retlw	0
  2070                           
  2071                           	psect	stringtext12
  2072  18AF                     __pstringtext12:	
  2073  18AF                     STR_6:	
  2074  18AF  3444               	retlw	68	;'D'
  2075  18B0  3442               	retlw	66	;'B'
  2076  18B1  3447               	retlw	71	;'G'
  2077  18B2  3433               	retlw	51	;'3'
  2078  18B3  3400               	retlw	0
  2079                           
  2080                           	psect	stringtext13
  2081  18B4                     __pstringtext13:	
  2082  18B4                     STR_8:	
  2083  18B4  3444               	retlw	68	;'D'
  2084  18B5  3442               	retlw	66	;'B'
  2085  18B6  3447               	retlw	71	;'G'
  2086  18B7  3434               	retlw	52	;'4'
  2087  18B8  3400               	retlw	0
  2088                           
  2089                           	psect	stringtext14
  2090  18B9                     __pstringtext14:	
  2091  18B9                     STR_10:	
  2092  18B9  3444               	retlw	68	;'D'
  2093  18BA  3442               	retlw	66	;'B'
  2094  18BB  3447               	retlw	71	;'G'
  2095  18BC  3435               	retlw	53	;'5'
  2096  18BD  3400               	retlw	0
  2097                           
  2098                           	psect	stringtext15
  2099  18BE                     __pstringtext15:	
  2100  18BE                     STR_7:	
  2101  18BE  3454               	retlw	84	;'T'
  2102  18BF  3445               	retlw	69	;'E'
  2103  18C0  344D               	retlw	77	;'M'
  2104  18C1  3450               	retlw	80	;'P'
  2105  18C2  3400               	retlw	0
  2106                           
  2107                           	psect	stringtext16
  2108  18C3                     __pstringtext16:	
  2109  18C3                     STR_3:	
  2110  18C3  3456               	retlw	86	;'V'
  2111  18C4  3442               	retlw	66	;'B'
  2112  18C5  3441               	retlw	65	;'A'
  2113  18C6  3454               	retlw	84	;'T'
  2114  18C7  3400               	retlw	0
  2115                           
  2116                           	psect	stringtext17
  2117  18C8                     __pstringtext17:	
  2118  18C8                     STR_12:	
  2119  18C8  3442               	retlw	66	;'B'
  2120  18C9  344F               	retlw	79	;'O'
  2121  18CA  344F               	retlw	79	;'O'
  2122  18CB  3454               	retlw	84	;'T'
  2123  18CC  3400               	retlw	0
  2124                           
  2125                           	psect	stringtext18
  2126  18CD                     __pstringtext18:	
  2127  18CD                     STR_11:	
  2128  18CD  3455               	retlw	85	;'U'
  2129  18CE  3448               	retlw	72	;'H'
  2130  18CF  3431               	retlw	49	;'1'
  2131  18D0  3400               	retlw	0
  2132                           
  2133                           	psect	stringtext19
  2134  0000                     __pstringtext19:	
  2135                           
  2136                           ; #config settings
  2137  0000                     
  2138                           	psect	cinit
  2139  0011                     start_initialization:	
  2140  0011                     __initialization:	
  2141                           
  2142                           ; Initialize objects allocated to BANK1
  2143  0011  0021               	movlb	1	; select bank1
  2144  0012  3180  2003  3180   	fcall	__pidataBANK1	;fetch initializer
  2145  0015  00EC               	movwf	__pdataBANK1& (0+127)
  2146                           
  2147                           ; Clear objects allocated to BANK1
  2148  0016  01E8               	clrf	__pbssBANK1& (0+127)
  2149  0017  01E9               	clrf	(__pbssBANK1+1)& (0+127)
  2150  0018  01EA               	clrf	(__pbssBANK1+2)& (0+127)
  2151  0019  01EB               	clrf	(__pbssBANK1+3)& (0+127)
  2152                           
  2153                           ; Clear objects allocated to BANK2
  2154  001A  0022               	movlb	2	; select bank2
  2155  001B  01D1               	clrf	__pbssBANK2& (0+127)
  2156  001C  01D2               	clrf	(__pbssBANK2+1)& (0+127)
  2157  001D  01D3               	clrf	(__pbssBANK2+2)& (0+127)
  2158  001E  01D4               	clrf	(__pbssBANK2+3)& (0+127)
  2159                           
  2160                           ; Clear objects allocated to BANK3
  2161  001F  30C2               	movlw	low __pbssBANK3
  2162  0020  0084               	movwf	4
  2163  0021  3001               	movlw	high __pbssBANK3
  2164  0022  0085               	movwf	5
  2165  0023  3021               	movlw	33
  2166  0024  319C  24E7  3180   	fcall	clear_ram0
  2167                           
  2168                           ; Clear objects allocated to BANK4
  2169  0027  3020               	movlw	low __pbssBANK4
  2170  0028  0084               	movwf	4
  2171  0029  3002               	movlw	high __pbssBANK4
  2172  002A  0085               	movwf	5
  2173  002B  301C               	movlw	28
  2174  002C  319C  24E7         	fcall	clear_ram0
  2175  002E                     end_of_initialization:	
  2176                           ;End of C runtime variable initialization code
  2177                           
  2178  002E                     __end_of__initialization:	
  2179  002E  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  2180  002F  0020               	movlb	0
  2181  0030  3193  2B61         	ljmp	_main	;jump to C main() function
  2182                           
  2183                           	psect	bssBANK1
  2184  00E8                     __pbssBANK1:	
  2185  00E8                     _status:	
  2186  00E8                     	ds	2
  2187  00EA                     _TXPacket:	
  2188  00EA                     	ds	1
  2189  00EB                     _sleepLoop:	
  2190  00EB                     	ds	1
  2191                           
  2192                           	psect	dataBANK1
  2193  00EC                     __pdataBANK1:	
  2194  00EC                     _romData:	
  2195  00EC                     	ds	1
  2196                           
  2197                           	psect	bssBANK2
  2198  0151                     __pbssBANK2:	
  2199  0151                     _counter:	
  2200  0151                     	ds	4
  2201                           
  2202                           	psect	bssBANK3
  2203  01C2                     __pbssBANK3:	
  2204  01C2                     _RXPacket:	
  2205  01C2                     	ds	33
  2206                           
  2207                           	psect	bssBANK4
  2208  0220                     __pbssBANK4:	
  2209  0220                     _romDataMap:	
  2210  0220                     	ds	28
  2211                           
  2212                           	psect	clrtext
  2213  1CE7                     clear_ram0:	
  2214                           ;	Called with FSR0 containing the base address, and
  2215                           ;	WREG with the size to clear
  2216                           
  2217  1CE7  0064               	clrwdt	;clear the watchdog before getting into this loop
  2218  1CE8                     clrloop0:	
  2219  1CE8  0180               	clrf	0	;clear RAM location pointed to by FSR
  2220  1CE9  3101               	addfsr 0,1
  2221  1CEA  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  2222  1CEB  2CE8               	goto	clrloop0	;have we reached the end yet?
  2223  1CEC  3400               	retlw	0	;all done for this memory range, return
  2224                           
  2225                           	psect	cstackBANK3
  2226  01A0                     __pcstackBANK3:	
  2227  01A0                     main@pipe:	
  2228                           
  2229                           ; 1 bytes @ 0x0
  2230  01A0                     	ds	1
  2231  01A1                     main@packet:	
  2232                           
  2233                           ; 33 bytes @ 0x1
  2234  01A1                     	ds	33
  2235                           
  2236                           	psect	cstackBANK2
  2237  0120                     __pcstackBANK2:	
  2238  0120                     loop@vt:	
  2239                           
  2240                           ; 3 bytes @ 0x0
  2241  0120                     	ds	3
  2242  0123                     loop@ta:	
  2243                           
  2244                           ; 3 bytes @ 0x3
  2245  0123                     	ds	3
  2246  0126                     _loop$1982:	
  2247                           
  2248                           ; 3 bytes @ 0x6
  2249  0126                     	ds	3
  2250  0129                     _loop$1983:	
  2251                           
  2252                           ; 3 bytes @ 0x9
  2253  0129                     	ds	3
  2254  012C                     loop@rfSetup:	
  2255                           
  2256                           ; 1 bytes @ 0xC
  2257  012C                     	ds	1
  2258  012D                     _loop$1981:	
  2259                           
  2260                           ; 3 bytes @ 0xD
  2261  012D                     	ds	3
  2262  0130                     loop@packet:	
  2263                           
  2264                           ; 33 bytes @ 0x10
  2265  0130                     	ds	33
  2266                           
  2267                           	psect	cstackBANK1
  2268  00A0                     __pcstackBANK1:	
  2269  00A0                     ?_fround:	
  2270  00A0                     ?_scale:	
  2271                           ; 3 bytes @ 0x0
  2272                           
  2273                           
  2274                           ; 3 bytes @ 0x0
  2275  00A0                     	ds	3
  2276  00A3                     ??_fround:	
  2277  00A3                     ??_scale:	
  2278                           ; 1 bytes @ 0x3
  2279                           
  2280                           
  2281                           ; 1 bytes @ 0x3
  2282  00A3                     	ds	4
  2283  00A7                     _fround$1985:	
  2284  00A7                     _scale$1986:	
  2285                           ; 3 bytes @ 0x7
  2286                           
  2287                           
  2288                           ; 3 bytes @ 0x7
  2289  00A7                     	ds	3
  2290  00AA                     scale@scl:	
  2291  00AA                     _fround$1984:	
  2292                           ; 1 bytes @ 0xA
  2293                           
  2294                           
  2295                           ; 3 bytes @ 0xA
  2296  00AA                     	ds	1
  2297  00AB                     ?___fttol:	
  2298  00AB                     ___fttol@f1:	
  2299                           ; 4 bytes @ 0xB
  2300                           
  2301                           
  2302                           ; 3 bytes @ 0xB
  2303  00AB                     	ds	2
  2304  00AD                     fround@prec:	
  2305                           
  2306                           ; 1 bytes @ 0xD
  2307  00AD                     	ds	2
  2308  00AF                     ??___fttol:	
  2309                           
  2310                           ; 1 bytes @ 0xF
  2311  00AF                     	ds	4
  2312  00B3                     ___fttol@sign1:	
  2313                           
  2314                           ; 1 bytes @ 0x13
  2315  00B3                     	ds	1
  2316  00B4                     ___fttol@lval:	
  2317                           
  2318                           ; 4 bytes @ 0x14
  2319  00B4                     	ds	4
  2320  00B8                     ___fttol@exp1:	
  2321                           
  2322                           ; 1 bytes @ 0x18
  2323  00B8                     	ds	1
  2324  00B9                     ?_sprintf:	
  2325  00B9                     sprintf@f:	
  2326                           ; 2 bytes @ 0x19
  2327                           
  2328                           
  2329                           ; 2 bytes @ 0x19
  2330  00B9                     	ds	9
  2331  00C2                     ??_sprintf:	
  2332                           
  2333                           ; 1 bytes @ 0x22
  2334  00C2                     	ds	6
  2335  00C8                     _sprintf$1987:	
  2336                           
  2337                           ; 3 bytes @ 0x28
  2338  00C8                     	ds	3
  2339  00CB                     sprintf@ap:	
  2340                           
  2341                           ; 1 bytes @ 0x2B
  2342  00CB                     	ds	1
  2343  00CC                     sprintf@flag:	
  2344                           
  2345                           ; 2 bytes @ 0x2C
  2346  00CC                     	ds	2
  2347  00CE                     sprintf@cp:	
  2348                           
  2349                           ; 2 bytes @ 0x2E
  2350  00CE                     	ds	2
  2351  00D0                     sprintf@prec:	
  2352                           
  2353                           ; 2 bytes @ 0x30
  2354  00D0                     	ds	2
  2355  00D2                     sprintf@val:	
  2356                           
  2357                           ; 4 bytes @ 0x32
  2358  00D2                     	ds	4
  2359  00D6                     sprintf@eexp:	
  2360                           
  2361                           ; 2 bytes @ 0x36
  2362  00D6                     	ds	2
  2363  00D8                     sprintf@tmpval:	
  2364                           
  2365                           ; 4 bytes @ 0x38
  2366  00D8                     	ds	4
  2367  00DC                     sprintf@sp:	
  2368                           
  2369                           ; 1 bytes @ 0x3C
  2370  00DC                     	ds	1
  2371  00DD                     sprintf@fval:	
  2372                           
  2373                           ; 3 bytes @ 0x3D
  2374  00DD                     	ds	3
  2375  00E0                     sprintf@c:	
  2376                           
  2377                           ; 1 bytes @ 0x40
  2378  00E0                     	ds	1
  2379  00E1                     ?_sendMessage:	
  2380  00E1                     sendMessage@topic:	
  2381                           ; 1 bytes @ 0x41
  2382                           
  2383                           
  2384                           ; 2 bytes @ 0x41
  2385  00E1                     	ds	2
  2386  00E3                     sendMessage@value:	
  2387                           
  2388                           ; 3 bytes @ 0x43
  2389  00E3                     	ds	3
  2390  00E6                     ??_loop:	
  2391                           
  2392                           ; 1 bytes @ 0x46
  2393  00E6                     	ds	1
  2394  00E7                     ??_main:	
  2395                           
  2396                           ; 1 bytes @ 0x47
  2397  00E7                     	ds	1
  2398                           
  2399                           	psect	cstackCOMMON
  2400  0070                     __pcstackCOMMON:	
  2401  0070                     ?_nrf24l01ISR:	
  2402  0070                     ?_nrf24l01SetRXMode:	
  2403                           ; 1 bytes @ 0x0
  2404                           
  2405  0070                     ?_nrf24l01Init:	
  2406                           ; 1 bytes @ 0x0
  2407                           
  2408  0070                     ?_nrf24l01SetTXPipe:	
  2409                           ; 1 bytes @ 0x0
  2410                           
  2411  0070                     ?_nrf24l01SetRXPipe:	
  2412                           ; 1 bytes @ 0x0
  2413                           
  2414  0070                     ?_nrf24l01Service:	
  2415                           ; 1 bytes @ 0x0
  2416                           
  2417  0070                     ?_nrf24l01CELow:	
  2418                           ; 1 bytes @ 0x0
  2419                           
  2420  0070                     ??_nrf24l01CELow:	
  2421                           ; 1 bytes @ 0x0
  2422                           
  2423  0070                     ?_nrf24l01CEHigh:	
  2424                           ; 1 bytes @ 0x0
  2425                           
  2426  0070                     ??_nrf24l01CEHigh:	
  2427                           ; 1 bytes @ 0x0
  2428                           
  2429  0070                     ?_nrf24l01CSLow:	
  2430                           ; 1 bytes @ 0x0
  2431                           
  2432  0070                     ??_nrf24l01CSLow:	
  2433                           ; 1 bytes @ 0x0
  2434                           
  2435  0070                     ?_nrf24l01CSHigh:	
  2436                           ; 1 bytes @ 0x0
  2437                           
  2438  0070                     ??_nrf24l01CSHigh:	
  2439                           ; 1 bytes @ 0x0
  2440                           
  2441  0070                     ?_nrf24l01InterfaceInit:	
  2442                           ; 1 bytes @ 0x0
  2443                           
  2444  0070                     ?_nrf24l01SPISend:	
  2445                           ; 1 bytes @ 0x0
  2446                           
  2447  0070                     ??_nrf24l01SPISend:	
  2448                           ; 1 bytes @ 0x0
  2449                           
  2450  0070                     ?_nrf24l01SPIStart:	
  2451                           ; 1 bytes @ 0x0
  2452                           
  2453  0070                     ??_nrf24l01SPIStart:	
  2454                           ; 1 bytes @ 0x0
  2455                           
  2456  0070                     ?_nrf24l01SPIEnd:	
  2457                           ; 1 bytes @ 0x0
  2458                           
  2459  0070                     ??_nrf24l01SPIEnd:	
  2460                           ; 1 bytes @ 0x0
  2461                           
  2462  0070                     ?_enableInterrupts:	
  2463                           ; 1 bytes @ 0x0
  2464                           
  2465  0070                     ??_enableInterrupts:	
  2466                           ; 1 bytes @ 0x0
  2467                           
  2468  0070                     ?_ISR:	
  2469                           ; 1 bytes @ 0x0
  2470                           
  2471  0070                     ?_doWDTSleep:	
  2472                           ; 1 bytes @ 0x0
  2473                           
  2474  0070                     ?_loop:	
  2475                           ; 1 bytes @ 0x0
  2476                           
  2477  0070                     ?_nrf24l01GetPipe:	
  2478                           ; 1 bytes @ 0x0
  2479                           
  2480  0070                     ?_main:	
  2481                           ; 1 bytes @ 0x0
  2482                           
  2483  0070                     ?_nrf24l01InitRegisters:	
  2484                           ; 1 bytes @ 0x0
  2485                           
  2486  0070                     ?i1_nrf24l01SetRXMode:	
  2487                           ; 1 bytes @ 0x0
  2488                           
  2489  0070                     ?i1_nrf24l01Service:	
  2490                           ; 1 bytes @ 0x0
  2491                           
  2492  0070                     ?i1_memset:	
  2493                           ; 1 bytes @ 0x0
  2494                           
  2495  0070                     ?i1_strlen:	
  2496                           ; 1 bytes @ 0x0
  2497                           
  2498  0070                     nrf24l01SPISend@data:	
  2499                           ; 2 bytes @ 0x0
  2500                           
  2501  0070                     enableInterrupts@enable:	
  2502                           ; 1 bytes @ 0x0
  2503                           
  2504  0070                     i1memset@c:	
  2505                           ; 1 bytes @ 0x0
  2506                           
  2507  0070                     i1strlen@s:	
  2508                           ; 2 bytes @ 0x0
  2509                           
  2510                           
  2511                           ; 2 bytes @ 0x0
  2512  0070                     	ds	1
  2513  0071                     ?i1_nrf24l01Send:	
  2514  0071                     i1nrf24l01Send@data:	
  2515                           ; 1 bytes @ 0x1
  2516                           
  2517                           
  2518                           ; 1 bytes @ 0x1
  2519  0071                     	ds	1
  2520  0072                     ??i1_nrf24l01Send:	
  2521  0072                     ??i1_strlen:	
  2522                           ; 1 bytes @ 0x2
  2523                           
  2524  0072                     i1memset@n:	
  2525                           ; 1 bytes @ 0x2
  2526                           
  2527                           
  2528                           ; 2 bytes @ 0x2
  2529  0072                     	ds	1
  2530  0073                     i1nrf24l01Send@command:	
  2531                           
  2532                           ; 1 bytes @ 0x3
  2533  0073                     	ds	1
  2534  0074                     ??i1_nrf24l01SetRXMode:	
  2535  0074                     ??i1_memset:	
  2536                           ; 1 bytes @ 0x4
  2537                           
  2538  0074                     i1strlen@cp:	
  2539                           ; 1 bytes @ 0x4
  2540                           
  2541                           
  2542                           ; 2 bytes @ 0x4
  2543  0074                     	ds	1
  2544  0075                     i1nrf24l01SetRXMode@config:	
  2545  0075                     i1memset@p1:	
  2546                           ; 1 bytes @ 0x5
  2547                           
  2548                           
  2549                           ; 1 bytes @ 0x5
  2550  0075                     	ds	1
  2551  0076                     i1nrf24l01SetRXMode@rxMode:	
  2552  0076                     i1memset@p:	
  2553                           ; 1 bytes @ 0x6
  2554                           
  2555                           
  2556                           ; 1 bytes @ 0x6
  2557  0076                     	ds	1
  2558  0077                     ??i1_nrf24l01Service:	
  2559                           
  2560                           ; 1 bytes @ 0x7
  2561  0077                     	ds	2
  2562  0079                     i1nrf24l01Service@width:	
  2563                           
  2564                           ; 1 bytes @ 0x9
  2565  0079                     	ds	1
  2566  007A                     i1nrf24l01Service@i:	
  2567                           
  2568                           ; 1 bytes @ 0xA
  2569  007A                     	ds	1
  2570  007B                     ??_nrf24l01ISR:	
  2571                           
  2572                           ; 1 bytes @ 0xB
  2573  007B                     	ds	1
  2574  007C                     ??_ISR:	
  2575                           
  2576                           	psect	cstackBANK0
  2577  0020                     __pcstackBANK0:	
  2578                           ; 1 bytes @ 0xC
  2579                           
  2580  0020                     ?___ftge:	
  2581  0020                     ?_nrf24l01Send:	
  2582                           ; 1 bit 
  2583                           
  2584  0020                     ?_strcpy:	
  2585                           ; 1 bytes @ 0x0
  2586                           
  2587  0020                     ?_memset:	
  2588                           ; 1 bytes @ 0x0
  2589                           
  2590  0020                     ??_nrf24l01InterfaceInit:	
  2591                           ; 1 bytes @ 0x0
  2592                           
  2593  0020                     ??_doWDTSleep:	
  2594                           ; 1 bytes @ 0x0
  2595                           
  2596  0020                     ?___bmul:	
  2597                           ; 1 bytes @ 0x0
  2598                           
  2599  0020                     ?_strlen:	
  2600                           ; 1 bytes @ 0x0
  2601                           
  2602  0020                     ?___awmod:	
  2603                           ; 2 bytes @ 0x0
  2604                           
  2605  0020                     ?___lwmod:	
  2606                           ; 2 bytes @ 0x0
  2607                           
  2608  0020                     ?___ftpack:	
  2609                           ; 2 bytes @ 0x0
  2610                           
  2611  0020                     ?__tdiv_to_l_:	
  2612                           ; 3 bytes @ 0x0
  2613                           
  2614  0020                     ?__div_to_l_:	
  2615                           ; 4 bytes @ 0x0
  2616                           
  2617  0020                     ?___lldiv:	
  2618                           ; 4 bytes @ 0x0
  2619                           
  2620  0020                     ?___llmod:	
  2621                           ; 4 bytes @ 0x0
  2622                           
  2623  0020                     nrf24l01Send@data:	
  2624                           ; 4 bytes @ 0x0
  2625                           
  2626  0020                     ___bmul@multiplicand:	
  2627                           ; 1 bytes @ 0x0
  2628                           
  2629  0020                     ___awmod@divisor:	
  2630                           ; 1 bytes @ 0x0
  2631                           
  2632  0020                     ___lwmod@divisor:	
  2633                           ; 2 bytes @ 0x0
  2634                           
  2635  0020                     memset@c:	
  2636                           ; 2 bytes @ 0x0
  2637                           
  2638  0020                     strcpy@from:	
  2639                           ; 2 bytes @ 0x0
  2640                           
  2641  0020                     strlen@s:	
  2642                           ; 2 bytes @ 0x0
  2643                           
  2644  0020                     __div_to_l_@f1:	
  2645                           ; 2 bytes @ 0x0
  2646                           
  2647  0020                     ___ftpack@arg:	
  2648                           ; 3 bytes @ 0x0
  2649                           
  2650  0020                     __tdiv_to_l_@f1:	
  2651                           ; 3 bytes @ 0x0
  2652                           
  2653  0020                     ___ftge@ff1:	
  2654                           ; 3 bytes @ 0x0
  2655                           
  2656  0020                     ___lldiv@divisor:	
  2657                           ; 3 bytes @ 0x0
  2658                           
  2659  0020                     ___llmod@divisor:	
  2660                           ; 4 bytes @ 0x0
  2661                           
  2662                           
  2663                           ; 4 bytes @ 0x0
  2664  0020                     	ds	1
  2665  0021                     ??_nrf24l01Send:	
  2666  0021                     ??___bmul:	
  2667                           ; 1 bytes @ 0x1
  2668                           
  2669  0021                     doWDTSleep@wdtps:	
  2670                           ; 1 bytes @ 0x1
  2671                           
  2672                           
  2673                           ; 1 bytes @ 0x1
  2674  0021                     	ds	1
  2675  0022                     ??_strlen:	
  2676  0022                     ??_strcpy:	
  2677                           ; 1 bytes @ 0x2
  2678                           
  2679  0022                     nrf24l01Send@command:	
  2680                           ; 1 bytes @ 0x2
  2681                           
  2682  0022                     ___bmul@product:	
  2683                           ; 1 bytes @ 0x2
  2684                           
  2685  0022                     ___awmod@dividend:	
  2686                           ; 1 bytes @ 0x2
  2687                           
  2688  0022                     ___lwmod@dividend:	
  2689                           ; 2 bytes @ 0x2
  2690                           
  2691  0022                     memset@n:	
  2692                           ; 2 bytes @ 0x2
  2693                           
  2694                           
  2695                           ; 2 bytes @ 0x2
  2696  0022                     	ds	1
  2697  0023                     ??_nrf24l01SetRXMode:	
  2698  0023                     ??_nrf24l01SetRXPipe:	
  2699                           ; 1 bytes @ 0x3
  2700                           
  2701  0023                     ___bmul@multiplier:	
  2702                           ; 1 bytes @ 0x3
  2703                           
  2704  0023                     ___ftpack@exp:	
  2705                           ; 1 bytes @ 0x3
  2706                           
  2707  0023                     strcpy@to:	
  2708                           ; 1 bytes @ 0x3
  2709                           
  2710  0023                     __div_to_l_@f2:	
  2711                           ; 1 bytes @ 0x3
  2712                           
  2713  0023                     __tdiv_to_l_@f2:	
  2714                           ; 3 bytes @ 0x3
  2715                           
  2716  0023                     ___ftge@ff2:	
  2717                           ; 3 bytes @ 0x3
  2718                           
  2719                           
  2720                           ; 3 bytes @ 0x3
  2721  0023                     	ds	1
  2722  0024                     ??_nrf24l01SetTXPipe:	
  2723  0024                     ??_memset:	
  2724                           ; 1 bytes @ 0x4
  2725                           
  2726  0024                     ??___awmod:	
  2727                           ; 1 bytes @ 0x4
  2728                           
  2729  0024                     ??___lwmod:	
  2730                           ; 1 bytes @ 0x4
  2731                           
  2732  0024                     nrf24l01SetRXMode@config:	
  2733                           ; 1 bytes @ 0x4
  2734                           
  2735  0024                     ___ftpack@sign:	
  2736                           ; 1 bytes @ 0x4
  2737                           
  2738  0024                     strcpy@cp:	
  2739                           ; 1 bytes @ 0x4
  2740                           
  2741  0024                     strlen@cp:	
  2742                           ; 1 bytes @ 0x4
  2743                           
  2744  0024                     ___lldiv@dividend:	
  2745                           ; 2 bytes @ 0x4
  2746                           
  2747  0024                     ___llmod@dividend:	
  2748                           ; 4 bytes @ 0x4
  2749                           
  2750                           
  2751                           ; 4 bytes @ 0x4
  2752  0024                     	ds	1
  2753  0025                     ??___ftpack:	
  2754  0025                     nrf24l01SetRXMode@rxMode:	
  2755                           ; 1 bytes @ 0x5
  2756                           
  2757  0025                     nrf24l01SetRXPipe@pipe:	
  2758                           ; 1 bytes @ 0x5
  2759                           
  2760  0025                     ___awmod@counter:	
  2761                           ; 1 bytes @ 0x5
  2762                           
  2763  0025                     ___lwmod@counter:	
  2764                           ; 1 bytes @ 0x5
  2765                           
  2766  0025                     memset@p1:	
  2767                           ; 1 bytes @ 0x5
  2768                           
  2769                           
  2770                           ; 1 bytes @ 0x5
  2771  0025                     	ds	1
  2772  0026                     ??__tdiv_to_l_:	
  2773  0026                     ??__div_to_l_:	
  2774                           ; 1 bytes @ 0x6
  2775                           
  2776  0026                     ?_sleep:	
  2777                           ; 1 bytes @ 0x6
  2778                           
  2779  0026                     ??_nrf24l01GetPipe:	
  2780                           ; 1 bytes @ 0x6
  2781                           
  2782  0026                     ??___ftge:	
  2783                           ; 1 bytes @ 0x6
  2784                           
  2785  0026                     ?___lwdiv:	
  2786                           ; 1 bytes @ 0x6
  2787                           
  2788  0026                     nrf24l01SetTXPipe@pipe:	
  2789                           ; 2 bytes @ 0x6
  2790                           
  2791  0026                     nrf24l01SetRXPipe@enRXAddr:	
  2792                           ; 1 bytes @ 0x6
  2793                           
  2794  0026                     ___awmod@sign:	
  2795                           ; 1 bytes @ 0x6
  2796                           
  2797  0026                     memset@p:	
  2798                           ; 1 bytes @ 0x6
  2799                           
  2800  0026                     sleep@milliseconds:	
  2801                           ; 1 bytes @ 0x6
  2802                           
  2803  0026                     ___lwdiv@divisor:	
  2804                           ; 2 bytes @ 0x6
  2805                           
  2806                           
  2807                           ; 2 bytes @ 0x6
  2808  0026                     	ds	1
  2809  0027                     ??_nrf24l01Service:	
  2810  0027                     ??_nrf24l01InitRegisters:	
  2811                           ; 1 bytes @ 0x7
  2812                           
  2813  0027                     ?___awdiv:	
  2814                           ; 1 bytes @ 0x7
  2815                           
  2816  0027                     ___awdiv@divisor:	
  2817                           ; 2 bytes @ 0x7
  2818                           
  2819                           
  2820                           ; 2 bytes @ 0x7
  2821  0027                     	ds	1
  2822  0028                     ??_sleep:	
  2823  0028                     ??___lldiv:	
  2824                           ; 1 bytes @ 0x8
  2825                           
  2826  0028                     ??___llmod:	
  2827                           ; 1 bytes @ 0x8
  2828                           
  2829  0028                     ?___awtoft:	
  2830                           ; 1 bytes @ 0x8
  2831                           
  2832  0028                     ?___lbtoft:	
  2833                           ; 3 bytes @ 0x8
  2834                           
  2835  0028                     ?___lltoft:	
  2836                           ; 3 bytes @ 0x8
  2837                           
  2838  0028                     ?___lwtoft:	
  2839                           ; 3 bytes @ 0x8
  2840                           
  2841  0028                     nrf24l01GetPipe@pipe:	
  2842                           ; 3 bytes @ 0x8
  2843                           
  2844  0028                     ___awtoft@c:	
  2845                           ; 1 bytes @ 0x8
  2846                           
  2847  0028                     ___lwdiv@dividend:	
  2848                           ; 2 bytes @ 0x8
  2849                           
  2850  0028                     ___lwtoft@c:	
  2851                           ; 2 bytes @ 0x8
  2852                           
  2853  0028                     ___lltoft@c:	
  2854                           ; 2 bytes @ 0x8
  2855                           
  2856                           
  2857                           ; 4 bytes @ 0x8
  2858  0028                     	ds	1
  2859  0029                     nrf24l01GetPipe@name:	
  2860  0029                     nrf24l01Service@width:	
  2861                           ; 1 bytes @ 0x9
  2862                           
  2863  0029                     nrf24l01InitRegisters@channel:	
  2864                           ; 1 bytes @ 0x9
  2865                           
  2866  0029                     ___llmod@counter:	
  2867                           ; 1 bytes @ 0x9
  2868                           
  2869  0029                     ___awdiv@dividend:	
  2870                           ; 1 bytes @ 0x9
  2871                           
  2872  0029                     ___lldiv@quotient:	
  2873                           ; 2 bytes @ 0x9
  2874                           
  2875                           
  2876                           ; 4 bytes @ 0x9
  2877  0029                     	ds	1
  2878  002A                     ??___lwdiv:	
  2879  002A                     nrf24l01GetPipe@i:	
  2880                           ; 1 bytes @ 0xA
  2881                           
  2882  002A                     nrf24l01Service@i:	
  2883                           ; 1 bytes @ 0xA
  2884                           
  2885  002A                     nrf24l01InitRegisters@setupAW:	
  2886                           ; 1 bytes @ 0xA
  2887                           
  2888  002A                     __tdiv_to_l_@quot:	
  2889                           ; 1 bytes @ 0xA
  2890                           
  2891                           
  2892                           ; 4 bytes @ 0xA
  2893  002A                     	ds	1
  2894  002B                     ??_nrf24l01SendPacket:	
  2895  002B                     ??___awdiv:	
  2896                           ; 1 bytes @ 0xB
  2897                           
  2898  002B                     ??___awtoft:	
  2899                           ; 1 bytes @ 0xB
  2900                           
  2901  002B                     ??___lbtoft:	
  2902                           ; 1 bytes @ 0xB
  2903                           
  2904  002B                     ??___lwtoft:	
  2905                           ; 1 bytes @ 0xB
  2906                           
  2907  002B                     nrf24l01InitRegisters@feature:	
  2908                           ; 1 bytes @ 0xB
  2909                           
  2910  002B                     ___lwdiv@counter:	
  2911                           ; 1 bytes @ 0xB
  2912                           
  2913                           
  2914                           ; 1 bytes @ 0xB
  2915  002B                     	ds	1
  2916  002C                     ??___lltoft:	
  2917  002C                     nrf24l01SendPacket@txPacket:	
  2918                           ; 1 bytes @ 0xC
  2919                           
  2920  002C                     nrf24l01InitRegisters@rfSetup:	
  2921                           ; 1 bytes @ 0xC
  2922                           
  2923  002C                     ___awdiv@counter:	
  2924                           ; 1 bytes @ 0xC
  2925                           
  2926  002C                     ___lwdiv@quotient:	
  2927                           ; 1 bytes @ 0xC
  2928                           
  2929                           
  2930                           ; 2 bytes @ 0xC
  2931  002C                     	ds	1
  2932  002D                     ?_nrf24l01SendPacket:	
  2933  002D                     nrf24l01InitRegisters@enAA:	
  2934                           ; 2 bytes @ 0xD
  2935                           
  2936  002D                     ___lldiv@counter:	
  2937                           ; 1 bytes @ 0xD
  2938                           
  2939  002D                     ___awdiv@sign:	
  2940                           ; 1 bytes @ 0xD
  2941                           
  2942  002D                     ___awtoft@sign:	
  2943                           ; 1 bytes @ 0xD
  2944                           
  2945  002D                     ___lltoft@exp:	
  2946                           ; 1 bytes @ 0xD
  2947                           
  2948                           
  2949                           ; 1 bytes @ 0xD
  2950  002D                     	ds	1
  2951  002E                     nrf24l01InitRegisters@DynPD:	
  2952  002E                     __tdiv_to_l_@cntr:	
  2953                           ; 1 bytes @ 0xE
  2954                           
  2955  002E                     ___awdiv@quotient:	
  2956                           ; 1 bytes @ 0xE
  2957                           
  2958  002E                     __div_to_l_@quot:	
  2959                           ; 2 bytes @ 0xE
  2960                           
  2961                           
  2962                           ; 4 bytes @ 0xE
  2963  002E                     	ds	1
  2964  002F                     nrf24l01InitRegisters@config:	
  2965  002F                     __tdiv_to_l_@exp1:	
  2966                           ; 1 bytes @ 0xF
  2967                           
  2968  002F                     ___lbtoft@c:	
  2969                           ; 1 bytes @ 0xF
  2970                           
  2971                           
  2972                           ; 1 bytes @ 0xF
  2973  002F                     	ds	1
  2974  0030                     ?___wmul:	
  2975  0030                     nrf24l01InitRegisters@i:	
  2976                           ; 2 bytes @ 0x10
  2977                           
  2978  0030                     ___wmul@multiplier:	
  2979                           ; 2 bytes @ 0x10
  2980                           
  2981                           
  2982                           ; 2 bytes @ 0x10
  2983  0030                     	ds	2
  2984  0032                     ??_nrf24l01Init:	
  2985  0032                     __div_to_l_@cntr:	
  2986                           ; 1 bytes @ 0x12
  2987                           
  2988  0032                     ___wmul@multiplicand:	
  2989                           ; 1 bytes @ 0x12
  2990                           
  2991                           
  2992                           ; 2 bytes @ 0x12
  2993  0032                     	ds	1
  2994  0033                     __div_to_l_@exp1:	
  2995                           
  2996                           ; 1 bytes @ 0x13
  2997  0033                     	ds	1
  2998  0034                     ??___wmul:	
  2999  0034                     ___wmul@product:	
  3000                           ; 1 bytes @ 0x14
  3001                           
  3002                           
  3003                           ; 2 bytes @ 0x14
  3004  0034                     	ds	2
  3005  0036                     ?___ftadd:	
  3006  0036                     ___ftadd@f1:	
  3007                           ; 3 bytes @ 0x16
  3008                           
  3009                           
  3010                           ; 3 bytes @ 0x16
  3011  0036                     	ds	3
  3012  0039                     ___ftadd@f2:	
  3013                           
  3014                           ; 3 bytes @ 0x19
  3015  0039                     	ds	3
  3016  003C                     ??___ftadd:	
  3017                           
  3018                           ; 1 bytes @ 0x1C
  3019  003C                     	ds	4
  3020  0040                     ___ftadd@sign:	
  3021                           
  3022                           ; 1 bytes @ 0x20
  3023  0040                     	ds	1
  3024  0041                     ___ftadd@exp2:	
  3025                           
  3026                           ; 1 bytes @ 0x21
  3027  0041                     	ds	1
  3028  0042                     ___ftadd@exp1:	
  3029                           
  3030                           ; 1 bytes @ 0x22
  3031  0042                     	ds	1
  3032  0043                     ?___ftdiv:	
  3033  0043                     ?___ftsub:	
  3034                           ; 3 bytes @ 0x23
  3035                           
  3036  0043                     ___ftdiv@f2:	
  3037                           ; 3 bytes @ 0x23
  3038                           
  3039  0043                     ___ftsub@f2:	
  3040                           ; 3 bytes @ 0x23
  3041                           
  3042                           
  3043                           ; 3 bytes @ 0x23
  3044  0043                     	ds	3
  3045  0046                     ___ftdiv@f1:	
  3046  0046                     ___ftsub@f1:	
  3047                           ; 3 bytes @ 0x26
  3048                           
  3049                           
  3050                           ; 3 bytes @ 0x26
  3051  0046                     	ds	3
  3052  0049                     ??___ftdiv:	
  3053  0049                     ??___ftsub:	
  3054                           ; 1 bytes @ 0x29
  3055                           
  3056                           
  3057                           ; 1 bytes @ 0x29
  3058  0049                     	ds	4
  3059  004D                     ___ftdiv@cntr:	
  3060                           
  3061                           ; 1 bytes @ 0x2D
  3062  004D                     	ds	1
  3063  004E                     ___ftdiv@f3:	
  3064                           
  3065                           ; 3 bytes @ 0x2E
  3066  004E                     	ds	3
  3067  0051                     ___ftdiv@exp:	
  3068                           
  3069                           ; 1 bytes @ 0x31
  3070  0051                     	ds	1
  3071  0052                     ___ftdiv@sign:	
  3072                           
  3073                           ; 1 bytes @ 0x32
  3074  0052                     	ds	1
  3075  0053                     ?_getADCValue:	
  3076                           
  3077                           ; 3 bytes @ 0x33
  3078  0053                     	ds	3
  3079  0056                     ??_getADCValue:	
  3080                           
  3081                           ; 1 bytes @ 0x36
  3082  0056                     	ds	3
  3083  0059                     getADCValue@channel:	
  3084                           
  3085                           ; 1 bytes @ 0x39
  3086  0059                     	ds	1
  3087  005A                     getADCValue@adcLoop:	
  3088                           
  3089                           ; 2 bytes @ 0x3A
  3090  005A                     	ds	2
  3091  005C                     getADCValue@adcSum:	
  3092                           
  3093                           ; 3 bytes @ 0x3C
  3094  005C                     	ds	3
  3095  005F                     ?___ftmul:	
  3096  005F                     ?___ftneg:	
  3097                           ; 3 bytes @ 0x3F
  3098                           
  3099  005F                     ___ftmul@f1:	
  3100                           ; 3 bytes @ 0x3F
  3101                           
  3102  005F                     ___ftneg@f1:	
  3103                           ; 3 bytes @ 0x3F
  3104                           
  3105                           
  3106                           ; 3 bytes @ 0x3F
  3107  005F                     	ds	3
  3108  0062                     ??___ftneg:	
  3109  0062                     ___ftmul@f2:	
  3110                           ; 1 bytes @ 0x42
  3111                           
  3112                           
  3113                           ; 3 bytes @ 0x42
  3114  0062                     	ds	3
  3115  0065                     ??___ftmul:	
  3116                           
  3117                           ; 1 bytes @ 0x45
  3118  0065                     	ds	4
  3119  0069                     ___ftmul@exp:	
  3120                           
  3121                           ; 1 bytes @ 0x49
  3122  0069                     	ds	1
  3123  006A                     ___ftmul@f3_as_product:	
  3124                           
  3125                           ; 3 bytes @ 0x4A
  3126  006A                     	ds	3
  3127  006D                     ___ftmul@cntr:	
  3128                           
  3129                           ; 1 bytes @ 0x4D
  3130  006D                     	ds	1
  3131  006E                     ___ftmul@sign:	
  3132                           
  3133                           ; 1 bytes @ 0x4E
  3134  006E                     	ds	1
  3135  006F                     ??_sendMessage:	
  3136  006F                     sendMessage@packet:	
  3137                           ; 1 bytes @ 0x4F
  3138                           
  3139                           
  3140                           ; 1 bytes @ 0x4F
  3141  006F                     	ds	1
  3142                           
  3143                           	psect	maintext
  3144  1361                     __pmaintext:	
  3145 ;;
  3146 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  3147 ;;
  3148 ;; *************** function _main *****************
  3149 ;; Defined at:
  3150 ;;		line 171 in file "main.c"
  3151 ;; Parameters:    Size  Location     Type
  3152 ;;		None
  3153 ;; Auto vars:     Size  Location     Type
  3154 ;;  packet         33    1[BANK3 ] struct .
  3155 ;;  pipe            1    0[BANK3 ] unsigned char 
  3156 ;; Return value:  Size  Location     Type
  3157 ;;                  1    wreg      void 
  3158 ;; Registers used:
  3159 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3160 ;; Tracked objects:
  3161 ;;		On entry : B1F/0
  3162 ;;		On exit  : 0/0
  3163 ;;		Unchanged: 0/0
  3164 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3165 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3166 ;;      Locals:         0       0       0       0      34       0       0       0       0       0       0       0       
      +0       0
  3167 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  3168 ;;      Totals:         0       0       1       0      34       0       0       0       0       0       0       0       
      +0       0
  3169 ;;Total ram usage:       35 bytes
  3170 ;; Hardware stack levels required when called:   15
  3171 ;; This function calls:
  3172 ;;		___lwtoft
  3173 ;;		_loop
  3174 ;;		_nrf24l01GetPipe
  3175 ;;		_nrf24l01Init
  3176 ;;		_nrf24l01SetRXPipe
  3177 ;;		_nrf24l01SetTXPipe
  3178 ;;		_sendMessage
  3179 ;;		_strcpy
  3180 ;; This function is called by:
  3181 ;;		Startup code after reset
  3182 ;; This function uses a non-reentrant model
  3183 ;;
  3184                           
  3185                           
  3186                           ;psect for function _main
  3187  1361                     _main:	
  3188                           
  3189                           ;main.c: 174: ANSELA = 0x00;
  3190                           
  3191                           ;incstack = 0
  3192                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3193  1361  0023               	movlb	3	; select bank3
  3194  1362  018C               	clrf	12	;volatile
  3195                           
  3196                           ;main.c: 175: ANSELC = 0x00;
  3197  1363  018E               	clrf	14	;volatile
  3198                           
  3199                           ;main.c: 177: ODCONA = 0x00;
  3200  1364  0025               	movlb	5	; select bank5
  3201  1365  018C               	clrf	12	;volatile
  3202                           
  3203                           ;main.c: 178: ODCONC = 0x00;
  3204  1366  018E               	clrf	14	;volatile
  3205                           
  3206                           ;main.c: 183: INLVLA = 0x00;
  3207  1367  0027               	movlb	7	; select bank7
  3208  1368  018C               	clrf	12	;volatile
  3209                           
  3210                           ;main.c: 184: INLVLC = 0x00;
  3211  1369  018E               	clrf	14	;volatile
  3212                           
  3213                           ;main.c: 186: WPUA = 0x00;
  3214  136A  0024               	movlb	4	; select bank4
  3215  136B  018C               	clrf	12	;volatile
  3216                           
  3217                           ;main.c: 187: WPUC = 0x00;
  3218  136C  018E               	clrf	14	;volatile
  3219                           
  3220                           ;main.c: 189: TRISCbits.TRISC5 = 0;
  3221  136D  0021               	movlb	1	; select bank1
  3222  136E  128E               	bcf	14,5	;volatile
  3223                           
  3224                           ;main.c: 190: TRISCbits.TRISC4 = 0;
  3225  136F  120E               	bcf	14,4	;volatile
  3226                           
  3227                           ;main.c: 192: PORTCbits.RC4 = 0;
  3228  1370  0020               	movlb	0	; select bank0
  3229  1371  120E               	bcf	14,4	;volatile
  3230                           
  3231                           ;main.c: 199: INTCONbits.PEIE = 0;
  3232  1372  130B               	bcf	11,6	;volatile
  3233                           
  3234                           ;main.c: 200: INTCONbits.GIE = 0;
  3235  1373  138B               	bcf	11,7	;volatile
  3236                           
  3237                           ;main.c: 202: OSCCON1bits.NOSC = 0b000;
  3238  1374  308F               	movlw	-113
  3239  1375  0032               	movlb	18	; select bank18
  3240  1376  0599               	andwf	25,f	;volatile
  3241                           
  3242                           ;main.c: 203: OSCCON1bits.NDIV = 0b000;
  3243  1377  30F0               	movlw	-16
  3244  1378  0599               	andwf	25,f	;volatile
  3245                           
  3246                           ;main.c: 205: _delay((unsigned long)((10)*(32000000/4000.0)));
  3247  1379  3068               	movlw	104
  3248  137A  0021               	movlb	1	; select bank1
  3249  137B  00E7               	movwf	??_main^(0+128)
  3250  137C  30E4               	movlw	228
  3251  137D                     u6957:	
  3252  137D  0B89               	decfsz	9,f
  3253  137E  2B7D               	goto	u6957
  3254  137F  0BE7               	decfsz	??_main^(0+128),f
  3255  1380  2B7D               	goto	u6957
  3256  1381  0000               	nop
  3257                           
  3258                           ;main.c: 209: strcpy(romData->name, "UH1");
  3259  1382  30CD               	movlw	low (STR_11| (0+32768))
  3260  1383  0020               	movlb	0	; select bank0
  3261  1384  00A0               	movwf	strcpy@from
  3262  1385  3098               	movlw	high (STR_11| (0+32768))
  3263  1386  00A1               	movwf	strcpy@from+1
  3264  1387  0021               	movlb	1	; select bank1
  3265  1388  086C               	movf	_romData^(0+128),w
  3266  1389  3E01               	addlw	1
  3267  138A  319D  25DF  3193   	fcall	_strcpy
  3268                           
  3269                           ;main.c: 211: nrf24l01Init();
  3270  138D  3191  2108  3193   	fcall	_nrf24l01Init
  3271                           
  3272                           ;main.c: 213: unsigned char pipe = nrf24l01GetPipe(romData->name);
  3273  1390  0021               	movlb	1	; select bank1
  3274  1391  086C               	movf	_romData^(0+128),w
  3275  1392  3E01               	addlw	1
  3276  1393  319F  27C8  3193   	fcall	_nrf24l01GetPipe
  3277  1396  0021               	movlb	1	; select bank1
  3278  1397  00E7               	movwf	??_main^(0+128)
  3279  1398  0867               	movf	??_main^(0+128),w
  3280  1399  0023               	movlb	3	; select bank3
  3281  139A  00A0               	movwf	main@pipe^(0+384)
  3282                           
  3283                           ;main.c: 214: nrf24l01SetTXPipe(pipe);
  3284  139B  0820               	movf	main@pipe^(0+384),w
  3285  139C  3191  214B  3193   	fcall	_nrf24l01SetTXPipe
  3286                           
  3287                           ;main.c: 215: nrf24l01SetRXPipe(pipe);
  3288  139F  0023               	movlb	3	; select bank3
  3289  13A0  0820               	movf	main@pipe^(0+384),w
  3290  13A1  319E  2676  3193   	fcall	_nrf24l01SetRXPipe
  3291                           
  3292                           ;main.c: 219: ADCON0bits.ADON = 0;
  3293  13A4  0021               	movlb	1	; select bank1
  3294  13A5  101D               	bcf	29,0	;volatile
  3295                           
  3296                           ;main.c: 222: PORTAbits.RA4 = 0;
  3297  13A6  0020               	movlb	0	; select bank0
  3298  13A7  120C               	bcf	12,4	;volatile
  3299                           
  3300                           ;main.c: 223: TRISAbits.TRISA4 = 1;
  3301  13A8  0021               	movlb	1	; select bank1
  3302  13A9  160C               	bsf	12,4	;volatile
  3303                           
  3304                           ;main.c: 224: WPUAbits.WPUA4 = 0;
  3305  13AA  0024               	movlb	4	; select bank4
  3306  13AB  120C               	bcf	12,4	;volatile
  3307                           
  3308                           ;main.c: 225: ODCONAbits.ODCA4 = 1;
  3309  13AC  0025               	movlb	5	; select bank5
  3310  13AD  160C               	bsf	12,4	;volatile
  3311                           
  3312                           ;main.c: 226: ANSELAbits.ANSA4 = 1;
  3313  13AE  0023               	movlb	3	; select bank3
  3314  13AF  160C               	bsf	12,4	;volatile
  3315                           
  3316                           ;main.c: 229: ANSELCbits.ANSC3 = 1;
  3317  13B0  158E               	bsf	14,3	;volatile
  3318                           
  3319                           ;main.c: 230: TRISCbits.TRISC3 = 1;
  3320  13B1  0021               	movlb	1	; select bank1
  3321  13B2  158E               	bsf	14,3	;volatile
  3322                           
  3323                           ;main.c: 233: FVRCONbits.TSEN = 1;
  3324  13B3  0022               	movlb	2	; select bank2
  3325  13B4  1697               	bsf	23,5	;volatile
  3326                           
  3327                           ;main.c: 234: FVRCONbits.TSRNG = 1;
  3328  13B5  1617               	bsf	23,4	;volatile
  3329                           
  3330                           ;main.c: 237: FVRCONbits.FVREN = 0;
  3331  13B6  1397               	bcf	23,7	;volatile
  3332                           
  3333                           ;main.c: 238: FVRCONbits.ADFVR = 0b10;
  3334  13B7  0817               	movf	23,w	;volatile
  3335  13B8  39FC               	andlw	-4
  3336  13B9  3802               	iorlw	2
  3337  13BA  0097               	movwf	23	;volatile
  3338                           
  3339                           ;main.c: 240: ADCON1bits.ADCS = 0b111;
  3340  13BB  3070               	movlw	112
  3341  13BC  0021               	movlb	1	; select bank1
  3342  13BD  049E               	iorwf	30,f	;volatile
  3343                           
  3344                           ;main.c: 241: ADCON1bits.ADFM = 1;
  3345  13BE  179E               	bsf	30,7	;volatile
  3346                           
  3347                           ;main.c: 242: ADCON1bits.ADPREF = 0b11;
  3348  13BF  3003               	movlw	3
  3349  13C0  049E               	iorwf	30,f	;volatile
  3350                           
  3351                           ;main.c: 243: ADCON1bits.ADNREF = 0b00;
  3352  13C1  111E               	bcf	30,2	;volatile
  3353                           
  3354                           ;main.c: 246: ADCON0bits.CHS = 3;
  3355  13C2  081D               	movf	29,w	;volatile
  3356  13C3  3903               	andlw	-253
  3357  13C4  380C               	iorlw	12
  3358  13C5  009D               	movwf	29	;volatile
  3359                           
  3360                           ;main.c: 251: TRISAbits.TRISA2 = 1;
  3361  13C6  150C               	bsf	12,2	;volatile
  3362                           
  3363                           ;main.c: 252: PIE0bits.INTE = 1;
  3364  13C7  1410               	bsf	16,0	;volatile
  3365                           
  3366                           ;main.c: 253: INTCONbits.INTEDG = 0;
  3367  13C8  100B               	bcf	11,0	;volatile
  3368                           
  3369                           ;main.c: 256: TRISAbits.TRISA5 = 0;
  3370  13C9  128C               	bcf	12,5	;volatile
  3371                           
  3372                           ;main.c: 257: PORTAbits.RA5 = 0;
  3373  13CA  0020               	movlb	0	; select bank0
  3374  13CB  128C               	bcf	12,5	;volatile
  3375                           
  3376                           ;main.c: 260: INTCONbits.PEIE = 1;
  3377  13CC  170B               	bsf	11,6	;volatile
  3378                           
  3379                           ;main.c: 261: INTCONbits.GIE = 1;
  3380  13CD  178B               	bsf	11,7	;volatile
  3381                           
  3382                           ;main.c: 263: nrf24l01Packet_t packet;;main.c: 265: sendMessage(&packet, "BOOT", romData
      +                          ->bootMode);
  3383  13CE  30C8               	movlw	low (STR_12| (0+32768))
  3384  13CF  0021               	movlb	1	; select bank1
  3385  13D0  00E1               	movwf	sendMessage@topic^(0+128)
  3386  13D1  3098               	movlw	high (STR_12| (0+32768))
  3387  13D2  00E2               	movwf	(sendMessage@topic^(0+128)+1)
  3388  13D3  086C               	movf	_romData^(0+128),w
  3389  13D4  3E11               	addlw	17
  3390  13D5  0086               	movwf	6
  3391  13D6  3002               	movlw	2	; select bank4/5
  3392  13D7  0087               	movwf	7
  3393  13D8  3F40               	moviw [0]fsr1
  3394  13D9  0020               	movlb	0	; select bank0
  3395  13DA  00A8               	movwf	___lwtoft@c
  3396  13DB  3F41               	moviw [1]fsr1
  3397  13DC  00A9               	movwf	___lwtoft@c+1
  3398  13DD  319D  250E  3193   	fcall	___lwtoft
  3399  13E0  0020               	movlb	0	; select bank0
  3400  13E1  0828               	movf	?___lwtoft,w
  3401  13E2  0021               	movlb	1	; select bank1
  3402  13E3  00E3               	movwf	sendMessage@value^(0+128)
  3403  13E4  0020               	movlb	0	; select bank0
  3404  13E5  0829               	movf	?___lwtoft+1,w
  3405  13E6  0021               	movlb	1	; select bank1
  3406  13E7  00E4               	movwf	(sendMessage@value+1)^(0+128)
  3407  13E8  0020               	movlb	0	; select bank0
  3408  13E9  082A               	movf	?___lwtoft+2,w
  3409  13EA  0021               	movlb	1	; select bank1
  3410  13EB  00E5               	movwf	(sendMessage@value+2)^(0+128)
  3411  13EC  30A1               	movlw	(low (main@packet| (0+256)))& (0+255)
  3412  13ED  319F  2760  3193   	fcall	_sendMessage
  3413  13F0                     l5628:	
  3414                           ;main.c: 267: while(1){
  3415                           
  3416                           
  3417                           ;main.c: 268: loop();
  3418  13F0  318D  25F1  3193   	fcall	_loop
  3419  13F3  2BF0               	goto	l5628
  3420  13F4                     __end_of_main:	
  3421                           ;main.c: 269: };main.c: 271: return;
  3422                           
  3423                           
  3424                           	psect	text1
  3425  1DDF                     __ptext1:	
  3426 ;; *************** function _strcpy *****************
  3427 ;; Defined at:
  3428 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\strcpy.c"
  3429 ;; Parameters:    Size  Location     Type
  3430 ;;  to              1    wreg     PTR unsigned char 
  3431 ;;		 -> romDataMap(28), 
  3432 ;;  from            2    0[BANK0 ] PTR const unsigned char 
  3433 ;;		 -> STR_11(4), 
  3434 ;; Auto vars:     Size  Location     Type
  3435 ;;  to              1    3[BANK0 ] PTR unsigned char 
  3436 ;;		 -> romDataMap(28), 
  3437 ;;  cp              1    4[BANK0 ] PTR unsigned char 
  3438 ;;		 -> romDataMap(28), 
  3439 ;; Return value:  Size  Location     Type
  3440 ;;                  1    wreg      PTR unsigned char 
  3441 ;; Registers used:
  3442 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath
  3443 ;; Tracked objects:
  3444 ;;		On entry : 0/0
  3445 ;;		On exit  : 0/0
  3446 ;;		Unchanged: 0/0
  3447 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3448 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3449 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3450 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3451 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3452 ;;Total ram usage:        5 bytes
  3453 ;; Hardware stack levels used:    1
  3454 ;; Hardware stack levels required when called:    7
  3455 ;; This function calls:
  3456 ;;		Nothing
  3457 ;; This function is called by:
  3458 ;;		_main
  3459 ;; This function uses a non-reentrant model
  3460 ;;
  3461                           
  3462                           
  3463                           ;psect for function _strcpy
  3464  1DDF                     _strcpy:	
  3465                           
  3466                           ;incstack = 0
  3467                           ; Regs used in _strcpy: [wreg-fsr1h+status,2+status,0+pclath]
  3468                           ;strcpy@to stored from wreg
  3469  1DDF  0020               	movlb	0	; select bank0
  3470  1DE0  00A3               	movwf	strcpy@to
  3471  1DE1  0823               	movf	strcpy@to,w
  3472  1DE2  00A2               	movwf	??_strcpy
  3473  1DE3  0822               	movf	??_strcpy,w
  3474  1DE4  00A4               	movwf	strcpy@cp
  3475  1DE5                     l5524:	
  3476  1DE5  0824               	movf	strcpy@cp,w
  3477  1DE6  0086               	movwf	6
  3478  1DE7  3002               	movlw	2	; select bank4/5
  3479  1DE8  0087               	movwf	7
  3480  1DE9  0820               	movf	strcpy@from,w
  3481  1DEA  0084               	movwf	4
  3482  1DEB  0821               	movf	strcpy@from+1,w
  3483  1DEC  0085               	movwf	5
  3484  1DED  0800               	movf	0,w	;code access
  3485  1DEE  3FC0               	movwi [0]fsr1
  3486  1DEF  0889               	movf	9,f
  3487  1DF0  1903               	btfsc	3,2
  3488  1DF1  0008               	return
  3489  1DF2  3001               	movlw	1
  3490  1DF3  00A2               	movwf	??_strcpy
  3491  1DF4  0822               	movf	??_strcpy,w
  3492  1DF5  07A4               	addwf	strcpy@cp,f
  3493  1DF6  3001               	movlw	1
  3494  1DF7  07A0               	addwf	strcpy@from,f
  3495  1DF8  3000               	movlw	0
  3496  1DF9  3DA1               	addwfc	strcpy@from+1,f
  3497  1DFA  2DE5               	goto	l5524
  3498  1DFB                     __end_of_strcpy:	
  3499                           ;	Return value of _strcpy is never used
  3500                           
  3501                           
  3502                           	psect	text2
  3503  1108                     __ptext2:	
  3504 ;; *************** function _nrf24l01Init *****************
  3505 ;; Defined at:
  3506 ;;		line 491 in file "nrf24l01.c"
  3507 ;; Parameters:    Size  Location     Type
  3508 ;;		None
  3509 ;; Auto vars:     Size  Location     Type
  3510 ;;		None
  3511 ;; Return value:  Size  Location     Type
  3512 ;;                  1    wreg      void 
  3513 ;; Registers used:
  3514 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3515 ;; Tracked objects:
  3516 ;;		On entry : 0/0
  3517 ;;		On exit  : 0/0
  3518 ;;		Unchanged: 0/0
  3519 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3520 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3521 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3522 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3523 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3524 ;;Total ram usage:        2 bytes
  3525 ;; Hardware stack levels used:    1
  3526 ;; Hardware stack levels required when called:   12
  3527 ;; This function calls:
  3528 ;;		_nrf24l01CEHigh
  3529 ;;		_nrf24l01CELow
  3530 ;;		_nrf24l01InitRegisters
  3531 ;;		_nrf24l01InterfaceInit
  3532 ;; This function is called by:
  3533 ;;		_main
  3534 ;; This function uses a non-reentrant model
  3535 ;;
  3536                           
  3537                           
  3538                           ;psect for function _nrf24l01Init
  3539  1108                     _nrf24l01Init:	
  3540                           
  3541                           ;nrf24l01.c: 494: nrf24l01InterfaceInit();
  3542                           
  3543                           ;incstack = 0
  3544                           ; Regs used in _nrf24l01Init: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3545  1108  319D  25C3  3191   	fcall	_nrf24l01InterfaceInit
  3546                           
  3547                           ;nrf24l01.c: 499: nrf24l01CELow();
  3548  110B  319C  24E4  3191   	fcall	_nrf24l01CELow
  3549                           
  3550                           ;nrf24l01.c: 501: _delay((unsigned long)((50000)*(32000000/4000000.0)));
  3551  110E  3003               	movlw	3
  3552  110F  0020               	movlb	0	; select bank0
  3553  1110  00B3               	movwf	??_nrf24l01Init+1
  3554  1111  3008               	movlw	8
  3555  1112  00B2               	movwf	??_nrf24l01Init
  3556  1113  3077               	movlw	119
  3557  1114                     u6967:	
  3558  1114  0B89               	decfsz	9,f
  3559  1115  2914               	goto	u6967
  3560  1116  0BB2               	decfsz	??_nrf24l01Init,f
  3561  1117  2914               	goto	u6967
  3562  1118  0BB3               	decfsz	??_nrf24l01Init+1,f
  3563  1119  2914               	goto	u6967
  3564                           
  3565                           ;nrf24l01.c: 503: nrf24l01InitRegisters();
  3566  111A  3196  26ED  3191   	fcall	_nrf24l01InitRegisters
  3567                           
  3568                           ;nrf24l01.c: 505: _delay((unsigned long)((50000)*(32000000/4000000.0)));
  3569  111D  3003               	movlw	3
  3570  111E  0020               	movlb	0	; select bank0
  3571  111F  00B3               	movwf	??_nrf24l01Init+1
  3572  1120  3008               	movlw	8
  3573  1121  00B2               	movwf	??_nrf24l01Init
  3574  1122  3077               	movlw	119
  3575  1123                     u6977:	
  3576  1123  0B89               	decfsz	9,f
  3577  1124  2923               	goto	u6977
  3578  1125  0BB2               	decfsz	??_nrf24l01Init,f
  3579  1126  2923               	goto	u6977
  3580  1127  0BB3               	decfsz	??_nrf24l01Init+1,f
  3581  1128  2923               	goto	u6977
  3582                           
  3583                           ;nrf24l01.c: 507: nrf24l01CEHigh();
  3584  1129  319C  24E1         	fcall	_nrf24l01CEHigh
  3585                           
  3586                           ;nrf24l01.c: 509: status.TX = statuses.TX.Idle;
  3587  112B  3076               	movlw	low (_statuses| (0+32768))
  3588  112C  0084               	movwf	4
  3589  112D  3098               	movlw	high (_statuses| (0+32768))
  3590  112E  0085               	movwf	5
  3591  112F  0800               	movf	0,w	;code access
  3592  1130  0020               	movlb	0	; select bank0
  3593  1131  00B2               	movwf	??_nrf24l01Init
  3594  1132  0021               	movlb	1	; select bank1
  3595  1133  0868               	movf	_status^(0+128),w	;volatile
  3596  1134  0020               	movlb	0	; select bank0
  3597  1135  0632               	xorwf	??_nrf24l01Init,w
  3598  1136  39F0               	andlw	-16
  3599  1137  0632               	xorwf	??_nrf24l01Init,w
  3600  1138  0021               	movlb	1	; select bank1
  3601  1139  00E8               	movwf	_status^(0+128)	;volatile
  3602                           
  3603                           ;nrf24l01.c: 510: status.RX = statuses.RX.Idle;
  3604  113A  307B               	movlw	low ((_statuses+5)| (0+32768))
  3605  113B  0084               	movwf	4
  3606  113C  3098               	movlw	high ((_statuses+5)| (0+32768))
  3607  113D  0085               	movwf	5
  3608  113E  0800               	movf	0,w	;code access
  3609  113F  0020               	movlb	0	; select bank0
  3610  1140  00B2               	movwf	??_nrf24l01Init
  3611  1141  0EB2               	swapf	??_nrf24l01Init,f
  3612  1142  0021               	movlb	1	; select bank1
  3613  1143  0868               	movf	_status^(0+128),w	;volatile
  3614  1144  0020               	movlb	0	; select bank0
  3615  1145  0632               	xorwf	??_nrf24l01Init,w
  3616  1146  390F               	andlw	-241
  3617  1147  0632               	xorwf	??_nrf24l01Init,w
  3618  1148  0021               	movlb	1	; select bank1
  3619  1149  00E8               	movwf	_status^(0+128)	;volatile
  3620  114A  0008               	return
  3621  114B                     __end_of_nrf24l01Init:	
  3622                           
  3623                           	psect	text3
  3624  1DC3                     __ptext3:	
  3625 ;; *************** function _nrf24l01InterfaceInit *****************
  3626 ;; Defined at:
  3627 ;;		line 27 in file "interface.c"
  3628 ;; Parameters:    Size  Location     Type
  3629 ;;		None
  3630 ;; Auto vars:     Size  Location     Type
  3631 ;;		None
  3632 ;; Return value:  Size  Location     Type
  3633 ;;                  1    wreg      void 
  3634 ;; Registers used:
  3635 ;;		wreg, status,2, status,0
  3636 ;; Tracked objects:
  3637 ;;		On entry : 0/0
  3638 ;;		On exit  : 0/0
  3639 ;;		Unchanged: 0/0
  3640 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3641 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3642 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3643 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3644 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3645 ;;Total ram usage:        0 bytes
  3646 ;; Hardware stack levels used:    1
  3647 ;; Hardware stack levels required when called:    7
  3648 ;; This function calls:
  3649 ;;		Nothing
  3650 ;; This function is called by:
  3651 ;;		_nrf24l01Init
  3652 ;; This function uses a non-reentrant model
  3653 ;;
  3654                           
  3655                           
  3656                           ;psect for function _nrf24l01InterfaceInit
  3657  1DC3                     _nrf24l01InterfaceInit:	
  3658                           
  3659                           ;interface.c: 29: TRISAbits.TRISA0 = 0;
  3660                           
  3661                           ;incstack = 0
  3662                           ; Regs used in _nrf24l01InterfaceInit: [wreg+status,2+status,0]
  3663  1DC3  0021               	movlb	1	; select bank1
  3664  1DC4  100C               	bcf	12,0	;volatile
  3665                           
  3666                           ;interface.c: 30: TRISAbits.TRISA1 = 0;
  3667  1DC5  108C               	bcf	12,1	;volatile
  3668                           
  3669                           ;interface.c: 32: TRISCbits.TRISC1 = 1;
  3670  1DC6  148E               	bsf	14,1	;volatile
  3671                           
  3672                           ;interface.c: 33: TRISCbits.TRISC2 = 0;
  3673  1DC7  110E               	bcf	14,2	;volatile
  3674                           
  3675                           ;interface.c: 34: TRISCbits.TRISC0 = 0;
  3676  1DC8  100E               	bcf	14,0	;volatile
  3677                           
  3678                           ;interface.c: 36: SSP1CON1bits.SSPEN = 0;
  3679  1DC9  0024               	movlb	4	; select bank4
  3680  1DCA  1295               	bcf	21,5	;volatile
  3681                           
  3682                           ;interface.c: 38: RC1PPSbits.RC1PPS = 0b10001;
  3683  1DCB  003D               	movlb	29	; select bank29
  3684  1DCC  0821               	movf	33,w	;volatile
  3685  1DCD  39E0               	andlw	-32
  3686  1DCE  3811               	iorlw	17
  3687  1DCF  00A1               	movwf	33	;volatile
  3688                           
  3689                           ;interface.c: 39: RC2PPSbits.RC2PPS = 0b11001;
  3690  1DD0  0822               	movf	34,w	;volatile
  3691  1DD1  39E0               	andlw	-32
  3692  1DD2  3819               	iorlw	25
  3693  1DD3  00A2               	movwf	34	;volatile
  3694                           
  3695                           ;interface.c: 40: RC0PPSbits.RC0PPS = 0b11000;
  3696  1DD4  0820               	movf	32,w	;volatile
  3697  1DD5  39E0               	andlw	-32
  3698  1DD6  3818               	iorlw	24
  3699  1DD7  00A0               	movwf	32	;volatile
  3700                           
  3701                           ;interface.c: 42: SSP1CON1bits.CKP = 0;
  3702  1DD8  0024               	movlb	4	; select bank4
  3703  1DD9  1215               	bcf	21,4	;volatile
  3704                           
  3705                           ;interface.c: 43: SSP1STATbits.CKE = 1;
  3706  1DDA  1714               	bsf	20,6	;volatile
  3707                           
  3708                           ;interface.c: 44: SSP1CON1bits.SSPM = 0b0000;
  3709  1DDB  30F0               	movlw	-16
  3710  1DDC  0595               	andwf	21,f	;volatile
  3711                           
  3712                           ;interface.c: 46: SSP1CON1bits.SSPEN = 1;
  3713  1DDD  1695               	bsf	21,5	;volatile
  3714  1DDE  0008               	return
  3715  1DDF                     __end_of_nrf24l01InterfaceInit:	
  3716                           
  3717                           	psect	text4
  3718  16ED                     __ptext4:	
  3719 ;; *************** function _nrf24l01InitRegisters *****************
  3720 ;; Defined at:
  3721 ;;		line 389 in file "nrf24l01.c"
  3722 ;; Parameters:    Size  Location     Type
  3723 ;;		None
  3724 ;; Auto vars:     Size  Location     Type
  3725 ;;  i               2   16[BANK0 ] unsigned int 
  3726 ;;  config          1   15[BANK0 ] struct .
  3727 ;;  DynPD           1   14[BANK0 ] struct .
  3728 ;;  enAA            1   13[BANK0 ] struct .
  3729 ;;  rfSetup         1   12[BANK0 ] struct .
  3730 ;;  feature         1   11[BANK0 ] struct .
  3731 ;;  setupAW         1   10[BANK0 ] struct .
  3732 ;;  channel         1    9[BANK0 ] struct .
  3733 ;; Return value:  Size  Location     Type
  3734 ;;                  1    wreg      void 
  3735 ;; Registers used:
  3736 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3737 ;; Tracked objects:
  3738 ;;		On entry : 0/0
  3739 ;;		On exit  : 0/0
  3740 ;;		Unchanged: 0/0
  3741 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3742 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3743 ;;      Locals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3744 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3745 ;;      Totals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3746 ;;Total ram usage:       11 bytes
  3747 ;; Hardware stack levels used:    1
  3748 ;; Hardware stack levels required when called:   11
  3749 ;; This function calls:
  3750 ;;		___bmul
  3751 ;;		_nrf24l01SPIEnd
  3752 ;;		_nrf24l01SPISend
  3753 ;;		_nrf24l01SPIStart
  3754 ;;		_nrf24l01Send
  3755 ;;		_nrf24l01SetRXPipe
  3756 ;;		_nrf24l01SetTXPipe
  3757 ;; This function is called by:
  3758 ;;		_nrf24l01Init
  3759 ;; This function uses a non-reentrant model
  3760 ;;
  3761                           
  3762                           
  3763                           ;psect for function _nrf24l01InitRegisters
  3764  16ED                     _nrf24l01InitRegisters:	
  3765                           
  3766                           ;nrf24l01.c: 391: n_CONFIG_t config;;nrf24l01.c: 392: config.byte = 0x00;
  3767                           
  3768                           ;incstack = 0
  3769                           ; Regs used in _nrf24l01InitRegisters: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3770  16ED  0020               	movlb	0	; select bank0
  3771  16EE  01AF               	clrf	nrf24l01InitRegisters@config
  3772                           
  3773                           ;nrf24l01.c: 394: config.PWR_UP = 0;
  3774  16EF  10AF               	bcf	nrf24l01InitRegisters@config,1
  3775                           
  3776                           ;nrf24l01.c: 395: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x00, config.byte);
  3777  16F0  082F               	movf	nrf24l01InitRegisters@config,w
  3778  16F1  00A7               	movwf	??_nrf24l01InitRegisters
  3779  16F2  0827               	movf	??_nrf24l01InitRegisters,w
  3780  16F3  00A0               	movwf	nrf24l01Send@data
  3781  16F4  3020               	movlw	32
  3782  16F5  319E  2656  3196   	fcall	_nrf24l01Send
  3783                           
  3784                           ;nrf24l01.c: 397: n_SETUP_AW_t setupAW;;nrf24l01.c: 398: setupAW.byte = 0x00;
  3785  16F8  0020               	movlb	0	; select bank0
  3786  16F9  01AA               	clrf	nrf24l01InitRegisters@setupAW
  3787                           
  3788                           ;nrf24l01.c: 399: setupAW.AW = 0b11;
  3789  16FA  3003               	movlw	3
  3790  16FB  04AA               	iorwf	nrf24l01InitRegisters@setupAW,f
  3791                           
  3792                           ;nrf24l01.c: 400: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x03, setupAW.byte);
  3793  16FC  082A               	movf	nrf24l01InitRegisters@setupAW,w
  3794  16FD  00A7               	movwf	??_nrf24l01InitRegisters
  3795  16FE  0827               	movf	??_nrf24l01InitRegisters,w
  3796  16FF  00A0               	movwf	nrf24l01Send@data
  3797  1700  3023               	movlw	35
  3798  1701  319E  2656  3196   	fcall	_nrf24l01Send
  3799                           
  3800                           ;nrf24l01.c: 403: n_RF_CH_t channel;;nrf24l01.c: 404: channel.RF_CH = 2;
  3801  1704  0020               	movlb	0	; select bank0
  3802  1705  0829               	movf	nrf24l01InitRegisters@channel,w
  3803  1706  3980               	andlw	-128
  3804  1707  3802               	iorlw	2
  3805  1708  00A9               	movwf	nrf24l01InitRegisters@channel
  3806                           
  3807                           ;nrf24l01.c: 405: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x05, channel.byte);
  3808  1709  0829               	movf	nrf24l01InitRegisters@channel,w
  3809  170A  00A7               	movwf	??_nrf24l01InitRegisters
  3810  170B  0827               	movf	??_nrf24l01InitRegisters,w
  3811  170C  00A0               	movwf	nrf24l01Send@data
  3812  170D  3025               	movlw	37
  3813  170E  319E  2656  3196   	fcall	_nrf24l01Send
  3814                           
  3815                           ;nrf24l01.c: 408: n_RF_SETUP_t rfSetup;;nrf24l01.c: 409: rfSetup.byte = 0x00;
  3816  1711  0020               	movlb	0	; select bank0
  3817  1712  01AC               	clrf	nrf24l01InitRegisters@rfSetup
  3818                           
  3819                           ;nrf24l01.c: 410: rfSetup.RF_DR_LOW = 0;
  3820  1713  12AC               	bcf	nrf24l01InitRegisters@rfSetup,5
  3821                           
  3822                           ;nrf24l01.c: 411: rfSetup.RF_DR_HIGH = 1;
  3823  1714  15AC               	bsf	nrf24l01InitRegisters@rfSetup,3
  3824                           
  3825                           ;nrf24l01.c: 412: rfSetup.RF_PWR = 3;
  3826  1715  3006               	movlw	6
  3827  1716  04AC               	iorwf	nrf24l01InitRegisters@rfSetup,f
  3828                           
  3829                           ;nrf24l01.c: 413: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x06, rfSetup.byte);
  3830  1717  082C               	movf	nrf24l01InitRegisters@rfSetup,w
  3831  1718  00A7               	movwf	??_nrf24l01InitRegisters
  3832  1719  0827               	movf	??_nrf24l01InitRegisters,w
  3833  171A  00A0               	movwf	nrf24l01Send@data
  3834  171B  3026               	movlw	38
  3835  171C  319E  2656  3196   	fcall	_nrf24l01Send
  3836                           
  3837                           ;nrf24l01.c: 416: nrf24l01SetRXPipe(0xFF);
  3838  171F  30FF               	movlw	255
  3839  1720  319E  2676  3196   	fcall	_nrf24l01SetRXPipe
  3840                           
  3841                           ;nrf24l01.c: 419: n_EN_AA_t enAA;;nrf24l01.c: 420: enAA.byte = nrf24l01Send((unsigned) 0
      +                          b00000000 | (unsigned) 0x01, 0);
  3842  1723  0020               	movlb	0	; select bank0
  3843  1724  01A0               	clrf	nrf24l01Send@data
  3844  1725  3001               	movlw	1
  3845  1726  319E  2656  3196   	fcall	_nrf24l01Send
  3846  1729  0020               	movlb	0	; select bank0
  3847  172A  00A7               	movwf	??_nrf24l01InitRegisters
  3848  172B  0827               	movf	??_nrf24l01InitRegisters,w
  3849  172C  00AD               	movwf	nrf24l01InitRegisters@enAA
  3850                           
  3851                           ;nrf24l01.c: 421: enAA.ENAA_P0 = 0;
  3852  172D  102D               	bcf	nrf24l01InitRegisters@enAA,0
  3853                           
  3854                           ;nrf24l01.c: 422: enAA.ENAA_P1 = 0;
  3855  172E  10AD               	bcf	nrf24l01InitRegisters@enAA,1
  3856                           
  3857                           ;nrf24l01.c: 423: enAA.ENAA_P2 = 0;
  3858  172F  112D               	bcf	nrf24l01InitRegisters@enAA,2
  3859                           
  3860                           ;nrf24l01.c: 424: enAA.ENAA_P3 = 0;
  3861  1730  11AD               	bcf	nrf24l01InitRegisters@enAA,3
  3862                           
  3863                           ;nrf24l01.c: 425: enAA.ENAA_P4 = 0;
  3864  1731  122D               	bcf	nrf24l01InitRegisters@enAA,4
  3865                           
  3866                           ;nrf24l01.c: 426: enAA.ENAA_P5 = 0;
  3867  1732  12AD               	bcf	nrf24l01InitRegisters@enAA,5
  3868                           
  3869                           ;nrf24l01.c: 427: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x01, enAA.byte);
  3870  1733  082D               	movf	nrf24l01InitRegisters@enAA,w
  3871  1734  00A7               	movwf	??_nrf24l01InitRegisters
  3872  1735  0827               	movf	??_nrf24l01InitRegisters,w
  3873  1736  00A0               	movwf	nrf24l01Send@data
  3874  1737  3021               	movlw	33
  3875  1738  319E  2656  3196   	fcall	_nrf24l01Send
  3876                           
  3877                           ;nrf24l01.c: 431: n_FEATURE_t feature;;nrf24l01.c: 432: feature.byte = nrf24l01Send((uns
      +                          igned) 0b00000000 | (unsigned) 0x1D, 0);
  3878  173B  0020               	movlb	0	; select bank0
  3879  173C  01A0               	clrf	nrf24l01Send@data
  3880  173D  301D               	movlw	29
  3881  173E  319E  2656  3196   	fcall	_nrf24l01Send
  3882  1741  0020               	movlb	0	; select bank0
  3883  1742  00A7               	movwf	??_nrf24l01InitRegisters
  3884  1743  0827               	movf	??_nrf24l01InitRegisters,w
  3885  1744  00AB               	movwf	nrf24l01InitRegisters@feature
  3886                           
  3887                           ;nrf24l01.c: 433: feature.EN_DPL = 1;
  3888  1745  152B               	bsf	nrf24l01InitRegisters@feature,2
  3889                           
  3890                           ;nrf24l01.c: 434: feature.EN_DYN_ACK = 1;
  3891  1746  142B               	bsf	nrf24l01InitRegisters@feature,0
  3892                           
  3893                           ;nrf24l01.c: 435: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x1D, feature.byte);
  3894  1747  082B               	movf	nrf24l01InitRegisters@feature,w
  3895  1748  00A7               	movwf	??_nrf24l01InitRegisters
  3896  1749  0827               	movf	??_nrf24l01InitRegisters,w
  3897  174A  00A0               	movwf	nrf24l01Send@data
  3898  174B  303D               	movlw	61
  3899  174C  319E  2656  3196   	fcall	_nrf24l01Send
  3900                           
  3901                           ;nrf24l01.c: 437: n_DYNPD_t DynPD;;nrf24l01.c: 438: DynPD.byte = nrf24l01Send((unsigned)
      +                           0b00000000 | (unsigned) 0x1C, 0);
  3902  174F  0020               	movlb	0	; select bank0
  3903  1750  01A0               	clrf	nrf24l01Send@data
  3904  1751  301C               	movlw	28
  3905  1752  319E  2656  3196   	fcall	_nrf24l01Send
  3906  1755  0020               	movlb	0	; select bank0
  3907  1756  00A7               	movwf	??_nrf24l01InitRegisters
  3908  1757  0827               	movf	??_nrf24l01InitRegisters,w
  3909  1758  00AE               	movwf	nrf24l01InitRegisters@DynPD
  3910                           
  3911                           ;nrf24l01.c: 439: DynPD.DPL_P0 = 1;
  3912  1759  142E               	bsf	nrf24l01InitRegisters@DynPD,0
  3913                           
  3914                           ;nrf24l01.c: 440: DynPD.DPL_P1 = 1;
  3915  175A  14AE               	bsf	nrf24l01InitRegisters@DynPD,1
  3916                           
  3917                           ;nrf24l01.c: 441: DynPD.DPL_P2 = 1;
  3918  175B  152E               	bsf	nrf24l01InitRegisters@DynPD,2
  3919                           
  3920                           ;nrf24l01.c: 442: DynPD.DPL_P3 = 1;
  3921  175C  15AE               	bsf	nrf24l01InitRegisters@DynPD,3
  3922                           
  3923                           ;nrf24l01.c: 443: DynPD.DPL_P4 = 1;
  3924  175D  162E               	bsf	nrf24l01InitRegisters@DynPD,4
  3925                           
  3926                           ;nrf24l01.c: 444: DynPD.DPL_P5 = 1;
  3927  175E  16AE               	bsf	nrf24l01InitRegisters@DynPD,5
  3928                           
  3929                           ;nrf24l01.c: 445: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x1C, DynPD.byte);
  3930  175F  082E               	movf	nrf24l01InitRegisters@DynPD,w
  3931  1760  00A7               	movwf	??_nrf24l01InitRegisters
  3932  1761  0827               	movf	??_nrf24l01InitRegisters,w
  3933  1762  00A0               	movwf	nrf24l01Send@data
  3934  1763  303C               	movlw	60
  3935  1764  319E  2656  3196   	fcall	_nrf24l01Send
  3936                           
  3937                           ;nrf24l01.c: 448: unsigned int i;;nrf24l01.c: 449: for (i = 0; i < 6; i++){
  3938  1767  0020               	movlb	0	; select bank0
  3939  1768  01B0               	clrf	nrf24l01InitRegisters@i
  3940  1769  01B1               	clrf	nrf24l01InitRegisters@i+1
  3941  176A  3000               	movlw	0
  3942  176B  0231               	subwf	nrf24l01InitRegisters@i+1,w
  3943  176C  3006               	movlw	6
  3944  176D  1903               	skipnz
  3945  176E  0230               	subwf	nrf24l01InitRegisters@i,w
  3946  176F  1803               	btfsc	3,0
  3947  1770  2FCA               	goto	l5336
  3948  1771                     l5322:	
  3949                           
  3950                           ;nrf24l01.c: 451: nrf24l01SPIStart();
  3951  1771  3190  2000  3196   	fcall	_nrf24l01SPIStart
  3952                           
  3953                           ;nrf24l01.c: 452: nrf24l01SPISend((unsigned) 0b00100000 | ((unsigned) 0x0A + i));
  3954  1774  0020               	movlb	0	; select bank0
  3955  1775  0830               	movf	nrf24l01InitRegisters@i,w
  3956  1776  3E0A               	addlw	10
  3957  1777  3820               	iorlw	32
  3958  1778  3187  27F0  3196   	fcall	_nrf24l01SPISend
  3959                           
  3960                           ;nrf24l01.c: 454: nrf24l01SPISend(n_ADDRESS_P0[4] + (n_ADDRESS_MUL * i));
  3961  177B  30A4               	movlw	low ((_n_ADDRESS_P0+4)| (0+32768))
  3962  177C  0084               	movwf	4
  3963  177D  3098               	movlw	high ((_n_ADDRESS_P0+4)| (0+32768))
  3964  177E  0085               	movwf	5
  3965  177F  0800               	movf	0,w	;code access
  3966  1780  0020               	movlb	0	; select bank0
  3967  1781  00A7               	movwf	??_nrf24l01InitRegisters
  3968  1782  0830               	movf	nrf24l01InitRegisters@i,w
  3969  1783  00A8               	movwf	??_nrf24l01InitRegisters+1
  3970  1784  0828               	movf	??_nrf24l01InitRegisters+1,w
  3971  1785  00A0               	movwf	___bmul@multiplicand
  3972  1786  3081               	movlw	low (_n_ADDRESS_MUL| (0+32768))
  3973  1787  0084               	movwf	4
  3974  1788  3098               	movlw	high (_n_ADDRESS_MUL| (0+32768))
  3975  1789  0085               	movwf	5
  3976  178A  0800               	movf	0,w	;code access
  3977  178B  319C  24FC  3196   	fcall	___bmul
  3978  178E  0020               	movlb	0	; select bank0
  3979  178F  0727               	addwf	??_nrf24l01InitRegisters,w
  3980  1790  3187  27F0  3196   	fcall	_nrf24l01SPISend
  3981                           
  3982                           ;nrf24l01.c: 456: if (i < 2){
  3983  1793  3000               	movlw	0
  3984  1794  0020               	movlb	0	; select bank0
  3985  1795  0231               	subwf	nrf24l01InitRegisters@i+1,w
  3986  1796  3002               	movlw	2
  3987  1797  1903               	skipnz
  3988  1798  0230               	subwf	nrf24l01InitRegisters@i,w
  3989  1799  1803               	skipnc
  3990  179A  2FBB               	goto	l5330
  3991                           
  3992                           ;nrf24l01.c: 457: nrf24l01SPISend(n_ADDRESS_P0[3]);
  3993  179B  30A3               	movlw	low ((_n_ADDRESS_P0+3)| (0+32768))
  3994  179C  0084               	movwf	4
  3995  179D  3098               	movlw	high ((_n_ADDRESS_P0+3)| (0+32768))
  3996  179E  0085               	movwf	5
  3997  179F  0800               	movf	0,w	;code access
  3998  17A0  3187  27F0  3196   	fcall	_nrf24l01SPISend
  3999                           
  4000                           ;nrf24l01.c: 458: nrf24l01SPISend(n_ADDRESS_P0[2]);
  4001  17A3  30A2               	movlw	low ((_n_ADDRESS_P0+2)| (0+32768))
  4002  17A4  0084               	movwf	4
  4003  17A5  3098               	movlw	high ((_n_ADDRESS_P0+2)| (0+32768))
  4004  17A6  0085               	movwf	5
  4005  17A7  0800               	movf	0,w	;code access
  4006  17A8  3187  27F0  3196   	fcall	_nrf24l01SPISend
  4007                           
  4008                           ;nrf24l01.c: 459: nrf24l01SPISend(n_ADDRESS_P0[1]);
  4009  17AB  30A1               	movlw	low ((_n_ADDRESS_P0+1)| (0+32768))
  4010  17AC  0084               	movwf	4
  4011  17AD  3098               	movlw	high ((_n_ADDRESS_P0+1)| (0+32768))
  4012  17AE  0085               	movwf	5
  4013  17AF  0800               	movf	0,w	;code access
  4014  17B0  3187  27F0  3196   	fcall	_nrf24l01SPISend
  4015                           
  4016                           ;nrf24l01.c: 460: nrf24l01SPISend(n_ADDRESS_P0[0]);
  4017  17B3  30A0               	movlw	low (_n_ADDRESS_P0| (0+32768))
  4018  17B4  0084               	movwf	4
  4019  17B5  3098               	movlw	high (_n_ADDRESS_P0| (0+32768))
  4020  17B6  0085               	movwf	5
  4021  17B7  0800               	movf	0,w	;code access
  4022  17B8  3187  27F0  3196   	fcall	_nrf24l01SPISend
  4023  17BB                     l5330:	
  4024                           
  4025                           ;nrf24l01.c: 461: };nrf24l01.c: 463: nrf24l01SPIEnd();
  4026  17BB  319C  24ED  3196   	fcall	_nrf24l01SPIEnd
  4027  17BE  3001               	movlw	1
  4028  17BF  0020               	movlb	0	; select bank0
  4029  17C0  07B0               	addwf	nrf24l01InitRegisters@i,f
  4030  17C1  3000               	movlw	0
  4031  17C2  3DB1               	addwfc	nrf24l01InitRegisters@i+1,f
  4032  17C3  3000               	movlw	0
  4033  17C4  0231               	subwf	nrf24l01InitRegisters@i+1,w
  4034  17C5  3006               	movlw	6
  4035  17C6  1903               	skipnz
  4036  17C7  0230               	subwf	nrf24l01InitRegisters@i,w
  4037  17C8  1C03               	skipc
  4038  17C9  2F71               	goto	l5322
  4039  17CA                     l5336:	
  4040                           
  4041                           ;nrf24l01.c: 464: };nrf24l01.c: 466: nrf24l01SetTXPipe(0);
  4042  17CA  3000               	movlw	0
  4043  17CB  3191  214B  3196   	fcall	_nrf24l01SetTXPipe
  4044                           
  4045                           ;nrf24l01.c: 470: status.statusRegister.byte = 0x00;
  4046  17CE  0021               	movlb	1	; select bank1
  4047  17CF  01E9               	clrf	(_status^(0+128)+1)	;volatile
  4048                           
  4049                           ;nrf24l01.c: 471: status.statusRegister.RX_DR = 1;
  4050  17D0  1769               	bsf	(_status^(0+128)+1),6	;volatile
  4051                           
  4052                           ;nrf24l01.c: 472: status.statusRegister.TX_DS = 1;
  4053  17D1  16E9               	bsf	(_status^(0+128)+1),5	;volatile
  4054                           
  4055                           ;nrf24l01.c: 473: status.statusRegister.MAX_RT = 1;
  4056  17D2  1669               	bsf	(_status^(0+128)+1),4	;volatile
  4057                           
  4058                           ;nrf24l01.c: 474: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x07, status.statusReg
      +                          ister.byte);
  4059  17D3  0869               	movf	(_status^(0+128)+1),w	;volatile
  4060  17D4  0020               	movlb	0	; select bank0
  4061  17D5  00A7               	movwf	??_nrf24l01InitRegisters
  4062  17D6  0827               	movf	??_nrf24l01InitRegisters,w
  4063  17D7  00A0               	movwf	nrf24l01Send@data
  4064  17D8  3027               	movlw	39
  4065  17D9  319E  2656  3196   	fcall	_nrf24l01Send
  4066                           
  4067                           ;nrf24l01.c: 476: status.statusRegister.byte = nrf24l01Send((unsigned) 0b00000000 | (uns
      +                          igned) 0x07, 0);
  4068  17DC  0020               	movlb	0	; select bank0
  4069  17DD  01A0               	clrf	nrf24l01Send@data
  4070  17DE  3007               	movlw	7
  4071  17DF  319E  2656  3196   	fcall	_nrf24l01Send
  4072  17E2  0020               	movlb	0	; select bank0
  4073  17E3  00A7               	movwf	??_nrf24l01InitRegisters
  4074  17E4  0827               	movf	??_nrf24l01InitRegisters,w
  4075  17E5  0021               	movlb	1	; select bank1
  4076  17E6  00E9               	movwf	(_status^(0+128)+1)	;volatile
  4077                           
  4078                           ;nrf24l01.c: 479: nrf24l01Send((unsigned) 0b11100001, 0);
  4079  17E7  0020               	movlb	0	; select bank0
  4080  17E8  01A0               	clrf	nrf24l01Send@data
  4081  17E9  30E1               	movlw	225
  4082  17EA  319E  2656  3196   	fcall	_nrf24l01Send
  4083                           
  4084                           ;nrf24l01.c: 480: nrf24l01Send((unsigned) 0b11100010, 0);
  4085  17ED  0020               	movlb	0	; select bank0
  4086  17EE  01A0               	clrf	nrf24l01Send@data
  4087  17EF  30E2               	movlw	226
  4088  17F0  319E  2656  3196   	fcall	_nrf24l01Send
  4089                           
  4090                           ;nrf24l01.c: 483: config.PRIM_RX = 1;
  4091  17F3  0020               	movlb	0	; select bank0
  4092  17F4  142F               	bsf	nrf24l01InitRegisters@config,0
  4093                           
  4094                           ;nrf24l01.c: 484: config.EN_CRC = 1;
  4095  17F5  15AF               	bsf	nrf24l01InitRegisters@config,3
  4096                           
  4097                           ;nrf24l01.c: 485: config.CRCO = 1;
  4098  17F6  152F               	bsf	nrf24l01InitRegisters@config,2
  4099                           
  4100                           ;nrf24l01.c: 486: config.PWR_UP = 1;
  4101  17F7  14AF               	bsf	nrf24l01InitRegisters@config,1
  4102                           
  4103                           ;nrf24l01.c: 487: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x00, config.byte);
  4104  17F8  082F               	movf	nrf24l01InitRegisters@config,w
  4105  17F9  00A7               	movwf	??_nrf24l01InitRegisters
  4106  17FA  0827               	movf	??_nrf24l01InitRegisters,w
  4107  17FB  00A0               	movwf	nrf24l01Send@data
  4108  17FC  3020               	movlw	32
  4109  17FD  319E  2656         	fcall	_nrf24l01Send
  4110  17FF  0008               	return
  4111  1800                     __end_of_nrf24l01InitRegisters:	
  4112                           
  4113                           	psect	text5
  4114  114B                     __ptext5:	
  4115 ;; *************** function _nrf24l01SetTXPipe *****************
  4116 ;; Defined at:
  4117 ;;		line 183 in file "nrf24l01.c"
  4118 ;; Parameters:    Size  Location     Type
  4119 ;;  pipe            1    wreg     unsigned char 
  4120 ;; Auto vars:     Size  Location     Type
  4121 ;;  pipe            1    6[BANK0 ] unsigned char 
  4122 ;; Return value:  Size  Location     Type
  4123 ;;                  1    wreg      void 
  4124 ;; Registers used:
  4125 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4126 ;; Tracked objects:
  4127 ;;		On entry : 0/0
  4128 ;;		On exit  : 0/0
  4129 ;;		Unchanged: 0/0
  4130 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4131 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4132 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4133 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4134 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4135 ;;Total ram usage:        3 bytes
  4136 ;; Hardware stack levels used:    1
  4137 ;; Hardware stack levels required when called:    9
  4138 ;; This function calls:
  4139 ;;		___bmul
  4140 ;;		_nrf24l01SPIEnd
  4141 ;;		_nrf24l01SPISend
  4142 ;;		_nrf24l01SPIStart
  4143 ;; This function is called by:
  4144 ;;		_main
  4145 ;;		_nrf24l01InitRegisters
  4146 ;; This function uses a non-reentrant model
  4147 ;;
  4148                           
  4149                           
  4150                           ;psect for function _nrf24l01SetTXPipe
  4151  114B                     _nrf24l01SetTXPipe:	
  4152                           
  4153                           ;incstack = 0
  4154                           ; Regs used in _nrf24l01SetTXPipe: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4155                           ;nrf24l01SetTXPipe@pipe stored from wreg
  4156  114B  0020               	movlb	0	; select bank0
  4157  114C  00A6               	movwf	nrf24l01SetTXPipe@pipe
  4158                           
  4159                           ;nrf24l01.c: 186: nrf24l01SPIStart();
  4160  114D  3190  2000  3191   	fcall	_nrf24l01SPIStart
  4161                           
  4162                           ;nrf24l01.c: 187: nrf24l01SPISend((unsigned) 0b00100000 | (unsigned) 0x10);
  4163  1150  3030               	movlw	48
  4164  1151  3187  27F0  3191   	fcall	_nrf24l01SPISend
  4165                           
  4166                           ;nrf24l01.c: 188: nrf24l01SPISend(n_ADDRESS_P0[4] + (unsigned) (pipe * n_ADDRESS_MUL));
  4167  1154  30A4               	movlw	low ((_n_ADDRESS_P0+4)| (0+32768))
  4168  1155  0084               	movwf	4
  4169  1156  3098               	movlw	high ((_n_ADDRESS_P0+4)| (0+32768))
  4170  1157  0085               	movwf	5
  4171  1158  0800               	movf	0,w	;code access
  4172  1159  0020               	movlb	0	; select bank0
  4173  115A  00A4               	movwf	??_nrf24l01SetTXPipe
  4174  115B  3081               	movlw	low (_n_ADDRESS_MUL| (0+32768))
  4175  115C  0084               	movwf	4
  4176  115D  3098               	movlw	high (_n_ADDRESS_MUL| (0+32768))
  4177  115E  0085               	movwf	5
  4178  115F  0800               	movf	0,w	;code access
  4179  1160  00A5               	movwf	??_nrf24l01SetTXPipe+1
  4180  1161  0825               	movf	??_nrf24l01SetTXPipe+1,w
  4181  1162  00A0               	movwf	___bmul@multiplicand
  4182  1163  0826               	movf	nrf24l01SetTXPipe@pipe,w
  4183  1164  319C  24FC  3191   	fcall	___bmul
  4184  1167  0020               	movlb	0	; select bank0
  4185  1168  0724               	addwf	??_nrf24l01SetTXPipe,w
  4186  1169  3187  27F0  3191   	fcall	_nrf24l01SPISend
  4187                           
  4188                           ;nrf24l01.c: 189: nrf24l01SPISend(n_ADDRESS_P0[3]);
  4189  116C  30A3               	movlw	low ((_n_ADDRESS_P0+3)| (0+32768))
  4190  116D  0084               	movwf	4
  4191  116E  3098               	movlw	high ((_n_ADDRESS_P0+3)| (0+32768))
  4192  116F  0085               	movwf	5
  4193  1170  0800               	movf	0,w	;code access
  4194  1171  3187  27F0  3191   	fcall	_nrf24l01SPISend
  4195                           
  4196                           ;nrf24l01.c: 190: nrf24l01SPISend(n_ADDRESS_P0[2]);
  4197  1174  30A2               	movlw	low ((_n_ADDRESS_P0+2)| (0+32768))
  4198  1175  0084               	movwf	4
  4199  1176  3098               	movlw	high ((_n_ADDRESS_P0+2)| (0+32768))
  4200  1177  0085               	movwf	5
  4201  1178  0800               	movf	0,w	;code access
  4202  1179  3187  27F0  3191   	fcall	_nrf24l01SPISend
  4203                           
  4204                           ;nrf24l01.c: 191: nrf24l01SPISend(n_ADDRESS_P0[1]);
  4205  117C  30A1               	movlw	low ((_n_ADDRESS_P0+1)| (0+32768))
  4206  117D  0084               	movwf	4
  4207  117E  3098               	movlw	high ((_n_ADDRESS_P0+1)| (0+32768))
  4208  117F  0085               	movwf	5
  4209  1180  0800               	movf	0,w	;code access
  4210  1181  3187  27F0  3191   	fcall	_nrf24l01SPISend
  4211                           
  4212                           ;nrf24l01.c: 192: nrf24l01SPISend(n_ADDRESS_P0[0]);
  4213  1184  30A0               	movlw	low (_n_ADDRESS_P0| (0+32768))
  4214  1185  0084               	movwf	4
  4215  1186  3098               	movlw	high (_n_ADDRESS_P0| (0+32768))
  4216  1187  0085               	movwf	5
  4217  1188  0800               	movf	0,w	;code access
  4218  1189  3187  27F0  3191   	fcall	_nrf24l01SPISend
  4219                           
  4220                           ;nrf24l01.c: 193: nrf24l01SPIEnd();
  4221  118C  319C  24ED         	fcall	_nrf24l01SPIEnd
  4222  118E  0008               	return
  4223  118F                     __end_of_nrf24l01SetTXPipe:	
  4224                           
  4225                           	psect	text6
  4226  1CFC                     __ptext6:	
  4227 ;; *************** function ___bmul *****************
  4228 ;; Defined at:
  4229 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\Umul8.c"
  4230 ;; Parameters:    Size  Location     Type
  4231 ;;  multiplier      1    wreg     unsigned char 
  4232 ;;  multiplicand    1    0[BANK0 ] unsigned char 
  4233 ;; Auto vars:     Size  Location     Type
  4234 ;;  multiplier      1    3[BANK0 ] unsigned char 
  4235 ;;  product         1    2[BANK0 ] unsigned char 
  4236 ;; Return value:  Size  Location     Type
  4237 ;;                  1    wreg      unsigned char 
  4238 ;; Registers used:
  4239 ;;		wreg, status,2, status,0
  4240 ;; Tracked objects:
  4241 ;;		On entry : 0/0
  4242 ;;		On exit  : 0/0
  4243 ;;		Unchanged: 0/0
  4244 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4245 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4246 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4247 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4248 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4249 ;;Total ram usage:        4 bytes
  4250 ;; Hardware stack levels used:    1
  4251 ;; Hardware stack levels required when called:    7
  4252 ;; This function calls:
  4253 ;;		Nothing
  4254 ;; This function is called by:
  4255 ;;		_nrf24l01SetTXPipe
  4256 ;;		_nrf24l01InitRegisters
  4257 ;; This function uses a non-reentrant model
  4258 ;;
  4259                           
  4260                           
  4261                           ;psect for function ___bmul
  4262  1CFC                     ___bmul:	
  4263                           
  4264                           ;incstack = 0
  4265                           ; Regs used in ___bmul: [wreg+status,2+status,0]
  4266                           ;___bmul@multiplier stored from wreg
  4267  1CFC  0020               	movlb	0	; select bank0
  4268  1CFD  00A3               	movwf	___bmul@multiplier
  4269  1CFE  01A2               	clrf	___bmul@product
  4270  1CFF                     l4740:	
  4271  1CFF  1C23               	btfss	___bmul@multiplier,0
  4272  1D00  2D05               	goto	l4744
  4273  1D01  0820               	movf	___bmul@multiplicand,w
  4274  1D02  00A1               	movwf	??___bmul
  4275  1D03  0821               	movf	??___bmul,w
  4276  1D04  07A2               	addwf	___bmul@product,f
  4277  1D05                     l4744:	
  4278  1D05  1003               	clrc
  4279  1D06  0DA0               	rlf	___bmul@multiplicand,f
  4280  1D07  1003               	clrc
  4281  1D08  0CA3               	rrf	___bmul@multiplier,f
  4282  1D09  0823               	movf	___bmul@multiplier,w
  4283  1D0A  1D03               	btfss	3,2
  4284  1D0B  2CFF               	goto	l4740
  4285  1D0C  0822               	movf	___bmul@product,w
  4286  1D0D  0008               	return
  4287  1D0E                     __end_of___bmul:	
  4288                           
  4289                           	psect	text7
  4290  1E76                     __ptext7:	
  4291 ;; *************** function _nrf24l01SetRXPipe *****************
  4292 ;; Defined at:
  4293 ;;		line 196 in file "nrf24l01.c"
  4294 ;; Parameters:    Size  Location     Type
  4295 ;;  pipe            1    wreg     unsigned char 
  4296 ;; Auto vars:     Size  Location     Type
  4297 ;;  pipe            1    5[BANK0 ] unsigned char 
  4298 ;;  enRXAddr        1    6[BANK0 ] struct .
  4299 ;; Return value:  Size  Location     Type
  4300 ;;                  1    wreg      void 
  4301 ;; Registers used:
  4302 ;;		wreg, status,2, status,0, pclath, cstack
  4303 ;; Tracked objects:
  4304 ;;		On entry : 0/0
  4305 ;;		On exit  : 0/0
  4306 ;;		Unchanged: 0/0
  4307 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4308 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4309 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4310 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4311 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4312 ;;Total ram usage:        4 bytes
  4313 ;; Hardware stack levels used:    1
  4314 ;; Hardware stack levels required when called:   10
  4315 ;; This function calls:
  4316 ;;		_nrf24l01Send
  4317 ;; This function is called by:
  4318 ;;		_main
  4319 ;;		_nrf24l01InitRegisters
  4320 ;; This function uses a non-reentrant model
  4321 ;;
  4322                           
  4323                           
  4324                           ;psect for function _nrf24l01SetRXPipe
  4325  1E76                     _nrf24l01SetRXPipe:	
  4326                           
  4327                           ;incstack = 0
  4328                           ; Regs used in _nrf24l01SetRXPipe: [wreg+status,2+status,0+pclath+cstack]
  4329                           ;nrf24l01SetRXPipe@pipe stored from wreg
  4330  1E76  0020               	movlb	0	; select bank0
  4331  1E77  00A5               	movwf	nrf24l01SetRXPipe@pipe
  4332                           
  4333                           ;nrf24l01.c: 198: n_EN_RXADDR_t enRXAddr;;nrf24l01.c: 200: if (pipe > 5){
  4334  1E78  3006               	movlw	6
  4335  1E79  0225               	subwf	nrf24l01SetRXPipe@pipe,w
  4336  1E7A  1C03               	skipc
  4337  1E7B  2E83               	goto	l259
  4338                           
  4339                           ;nrf24l01.c: 201: enRXAddr.ERX_P0 = 1;
  4340  1E7C  1426               	bsf	nrf24l01SetRXPipe@enRXAddr,0
  4341                           
  4342                           ;nrf24l01.c: 202: enRXAddr.ERX_P1 = 1;
  4343  1E7D  14A6               	bsf	nrf24l01SetRXPipe@enRXAddr,1
  4344                           
  4345                           ;nrf24l01.c: 203: enRXAddr.ERX_P2 = 1;
  4346  1E7E  1526               	bsf	nrf24l01SetRXPipe@enRXAddr,2
  4347                           
  4348                           ;nrf24l01.c: 204: enRXAddr.ERX_P3 = 1;
  4349  1E7F  15A6               	bsf	nrf24l01SetRXPipe@enRXAddr,3
  4350                           
  4351                           ;nrf24l01.c: 205: enRXAddr.ERX_P4 = 1;
  4352  1E80  1626               	bsf	nrf24l01SetRXPipe@enRXAddr,4
  4353                           
  4354                           ;nrf24l01.c: 206: enRXAddr.ERX_P5 = 1;
  4355  1E81  16A6               	bsf	nrf24l01SetRXPipe@enRXAddr,5
  4356                           
  4357                           ;nrf24l01.c: 207: }
  4358  1E82  2E8F               	goto	l5120
  4359  1E83                     l259:	
  4360                           
  4361                           ;nrf24l01.c: 209: else{;nrf24l01.c: 210: enRXAddr.ERX_P0 = 1;
  4362  1E83  1426               	bsf	nrf24l01SetRXPipe@enRXAddr,0
  4363                           
  4364                           ;nrf24l01.c: 211: enRXAddr.byte = (unsigned) enRXAddr.byte << pipe;
  4365  1E84  0826               	movf	nrf24l01SetRXPipe@enRXAddr,w
  4366  1E85  00A3               	movwf	??_nrf24l01SetRXPipe
  4367  1E86  0A25               	incf	nrf24l01SetRXPipe@pipe,w
  4368  1E87  2E89               	goto	u6574
  4369  1E88                     u6575:	
  4370  1E88  35A3               	lslf	??_nrf24l01SetRXPipe,f
  4371  1E89                     u6574:	
  4372  1E89  0B89               	decfsz	9,f
  4373  1E8A  2E88               	goto	u6575
  4374  1E8B  0823               	movf	??_nrf24l01SetRXPipe,w
  4375  1E8C  00A4               	movwf	??_nrf24l01SetRXPipe+1
  4376  1E8D  0824               	movf	??_nrf24l01SetRXPipe+1,w
  4377  1E8E  00A6               	movwf	nrf24l01SetRXPipe@enRXAddr
  4378  1E8F                     l5120:	
  4379                           
  4380                           ;nrf24l01.c: 212: };nrf24l01.c: 214: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x0
      +                          2, enRXAddr.byte);
  4381  1E8F  0826               	movf	nrf24l01SetRXPipe@enRXAddr,w
  4382  1E90  00A3               	movwf	??_nrf24l01SetRXPipe
  4383  1E91  0823               	movf	??_nrf24l01SetRXPipe,w
  4384  1E92  00A0               	movwf	nrf24l01Send@data
  4385  1E93  3022               	movlw	34
  4386  1E94  319E  2656         	fcall	_nrf24l01Send
  4387  1E96  0008               	return
  4388  1E97                     __end_of_nrf24l01SetRXPipe:	
  4389                           
  4390                           	psect	text8
  4391  1FC8                     __ptext8:	
  4392 ;; *************** function _nrf24l01GetPipe *****************
  4393 ;; Defined at:
  4394 ;;		line 159 in file "main.c"
  4395 ;; Parameters:    Size  Location     Type
  4396 ;;  name            1    wreg     PTR unsigned char 
  4397 ;;		 -> romDataMap(28), 
  4398 ;; Auto vars:     Size  Location     Type
  4399 ;;  name            1    9[BANK0 ] PTR unsigned char 
  4400 ;;		 -> romDataMap(28), 
  4401 ;;  i               1   10[BANK0 ] unsigned char 
  4402 ;;  pipe            1    8[BANK0 ] unsigned char 
  4403 ;; Return value:  Size  Location     Type
  4404 ;;                  1    wreg      unsigned char 
  4405 ;; Registers used:
  4406 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4407 ;; Tracked objects:
  4408 ;;		On entry : 0/0
  4409 ;;		On exit  : 0/0
  4410 ;;		Unchanged: 0/0
  4411 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4412 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4413 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4414 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4415 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4416 ;;Total ram usage:        5 bytes
  4417 ;; Hardware stack levels used:    1
  4418 ;; Hardware stack levels required when called:    8
  4419 ;; This function calls:
  4420 ;;		___lwmod
  4421 ;;		_strlen
  4422 ;; This function is called by:
  4423 ;;		_main
  4424 ;; This function uses a non-reentrant model
  4425 ;;
  4426                           
  4427                           
  4428                           ;psect for function _nrf24l01GetPipe
  4429  1FC8                     _nrf24l01GetPipe:	
  4430                           
  4431                           ;incstack = 0
  4432                           ; Regs used in _nrf24l01GetPipe: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4433                           ;nrf24l01GetPipe@name stored from wreg
  4434  1FC8  0020               	movlb	0	; select bank0
  4435  1FC9  00A9               	movwf	nrf24l01GetPipe@name
  4436                           
  4437                           ;main.c: 160: unsigned char pipe = 0;
  4438  1FCA  01A8               	clrf	nrf24l01GetPipe@pipe
  4439                           
  4440                           ;main.c: 161: unsigned char i = 0;
  4441  1FCB  01AA               	clrf	nrf24l01GetPipe@i
  4442                           
  4443                           ;main.c: 164: for (i = 0; i < strlen(name); i++){
  4444  1FCC  01AA               	clrf	nrf24l01GetPipe@i
  4445  1FCD                     l5512:	
  4446  1FCD  0829               	movf	nrf24l01GetPipe@name,w
  4447  1FCE  00A0               	movwf	strlen@s
  4448  1FCF  3002               	movlw	2
  4449  1FD0  00A1               	movwf	strlen@s+1
  4450  1FD1  319E  2637  319F   	fcall	_strlen
  4451  1FD4  0020               	movlb	0	; select bank0
  4452  1FD5  082A               	movf	nrf24l01GetPipe@i,w
  4453  1FD6  00A6               	movwf	??_nrf24l01GetPipe
  4454  1FD7  01A7               	clrf	??_nrf24l01GetPipe+1
  4455  1FD8  0821               	movf	?_strlen+1,w
  4456  1FD9  0227               	subwf	??_nrf24l01GetPipe+1,w
  4457  1FDA  1D03               	skipz
  4458  1FDB  2FDE               	goto	u6885
  4459  1FDC  0820               	movf	?_strlen,w
  4460  1FDD  0226               	subwf	??_nrf24l01GetPipe,w
  4461  1FDE                     u6885:	
  4462  1FDE  1803               	btfsc	3,0
  4463  1FDF  2FF0               	goto	l5514
  4464                           
  4465                           ;main.c: 165: pipe+= name[i];
  4466  1FE0  082A               	movf	nrf24l01GetPipe@i,w
  4467  1FE1  0729               	addwf	nrf24l01GetPipe@name,w
  4468  1FE2  00A6               	movwf	??_nrf24l01GetPipe
  4469  1FE3  0826               	movf	??_nrf24l01GetPipe,w
  4470  1FE4  0086               	movwf	6
  4471  1FE5  3002               	movlw	2	; select bank4/5
  4472  1FE6  0087               	movwf	7
  4473  1FE7  0801               	movf	1,w
  4474  1FE8  00A7               	movwf	??_nrf24l01GetPipe+1
  4475  1FE9  0827               	movf	??_nrf24l01GetPipe+1,w
  4476  1FEA  07A8               	addwf	nrf24l01GetPipe@pipe,f
  4477  1FEB  3001               	movlw	1
  4478  1FEC  00A6               	movwf	??_nrf24l01GetPipe
  4479  1FED  0826               	movf	??_nrf24l01GetPipe,w
  4480  1FEE  07AA               	addwf	nrf24l01GetPipe@i,f
  4481  1FEF  2FCD               	goto	l5512
  4482  1FF0                     l5514:	
  4483                           
  4484                           ;main.c: 166: };main.c: 168: return (unsigned) pipe % 6;
  4485  1FF0  3006               	movlw	6
  4486  1FF1  00A0               	movwf	___lwmod@divisor
  4487  1FF2  3000               	movlw	0
  4488  1FF3  00A1               	movwf	___lwmod@divisor+1
  4489  1FF4  0828               	movf	nrf24l01GetPipe@pipe,w
  4490  1FF5  00A6               	movwf	??_nrf24l01GetPipe
  4491  1FF6  01A7               	clrf	??_nrf24l01GetPipe+1
  4492  1FF7  0826               	movf	??_nrf24l01GetPipe,w
  4493  1FF8  00A2               	movwf	___lwmod@dividend
  4494  1FF9  0827               	movf	??_nrf24l01GetPipe+1,w
  4495  1FFA  00A3               	movwf	___lwmod@dividend+1
  4496  1FFB  319F  2733         	fcall	___lwmod
  4497  1FFD  0020               	movlb	0	; select bank0
  4498  1FFE  0820               	movf	?___lwmod,w
  4499  1FFF  0008               	return
  4500  2000                     __end_of_nrf24l01GetPipe:	
  4501                           
  4502                           	psect	text9
  4503  0DF1                     __ptext9:	
  4504 ;; *************** function _loop *****************
  4505 ;; Defined at:
  4506 ;;		line 117 in file "main.c"
  4507 ;; Parameters:    Size  Location     Type
  4508 ;;		None
  4509 ;; Auto vars:     Size  Location     Type
  4510 ;;  packet         33   16[BANK2 ] struct .
  4511 ;;  ta              3    3[BANK2 ] float 
  4512 ;;  vt              3    0[BANK2 ] float 
  4513 ;;  rfSetup         1   12[BANK2 ] struct .
  4514 ;; Return value:  Size  Location     Type
  4515 ;;                  1    wreg      void 
  4516 ;; Registers used:
  4517 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4518 ;; Tracked objects:
  4519 ;;		On entry : 0/0
  4520 ;;		On exit  : 0/0
  4521 ;;		Unchanged: 0/0
  4522 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4523 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4524 ;;      Locals:         0       0       0      49       0       0       0       0       0       0       0       0       
      +0       0
  4525 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  4526 ;;      Totals:         0       0       1      49       0       0       0       0       0       0       0       0       
      +0       0
  4527 ;;Total ram usage:       50 bytes
  4528 ;; Hardware stack levels used:    1
  4529 ;; Hardware stack levels required when called:   14
  4530 ;; This function calls:
  4531 ;;		___ftadd
  4532 ;;		___ftdiv
  4533 ;;		___ftmul
  4534 ;;		___ftneg
  4535 ;;		___lbtoft
  4536 ;;		___lltoft
  4537 ;;		_getADCValue
  4538 ;;		_nrf24l01Send
  4539 ;;		_sendMessage
  4540 ;; This function is called by:
  4541 ;;		_main
  4542 ;; This function uses a non-reentrant model
  4543 ;;
  4544                           
  4545                           
  4546                           ;psect for function _loop
  4547  0DF1                     _loop:	
  4548                           
  4549                           ;main.c: 119: nrf24l01Packet_t packet;;main.c: 121: sendMessage(&packet, "DBG1", counter
      +                          );
  4550                           
  4551                           ;incstack = 0
  4552                           ; Regs used in _loop: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4553  0DF1  0022               	movlb	2	; select bank2
  4554  0DF2  0854               	movf	(_counter+3)^(0+256),w
  4555  0DF3  0020               	movlb	0	; select bank0
  4556  0DF4  00AB               	movwf	___lltoft@c+3
  4557  0DF5  0022               	movlb	2	; select bank2
  4558  0DF6  0853               	movf	(_counter+2)^(0+256),w
  4559  0DF7  0020               	movlb	0	; select bank0
  4560  0DF8  00AA               	movwf	___lltoft@c+2
  4561  0DF9  0022               	movlb	2	; select bank2
  4562  0DFA  0852               	movf	(_counter+1)^(0+256),w
  4563  0DFB  0020               	movlb	0	; select bank0
  4564  0DFC  00A9               	movwf	___lltoft@c+1
  4565  0DFD  0022               	movlb	2	; select bank2
  4566  0DFE  0851               	movf	_counter^(0+256),w
  4567  0DFF  0020               	movlb	0	; select bank0
  4568  0E00  00A8               	movwf	___lltoft@c
  4569  0E01  319F  2709  318D   	fcall	___lltoft
  4570  0E04  0020               	movlb	0	; select bank0
  4571  0E05  0828               	movf	?___lltoft,w
  4572  0E06  0022               	movlb	2	; select bank2
  4573  0E07  00AD               	movwf	_loop$1981^(0+256)
  4574  0E08  0020               	movlb	0	; select bank0
  4575  0E09  0829               	movf	?___lltoft+1,w
  4576  0E0A  0022               	movlb	2	; select bank2
  4577  0E0B  00AE               	movwf	(_loop$1981+1)^(0+256)
  4578  0E0C  0020               	movlb	0	; select bank0
  4579  0E0D  082A               	movf	?___lltoft+2,w
  4580  0E0E  0022               	movlb	2	; select bank2
  4581  0E0F  00AF               	movwf	(_loop$1981+2)^(0+256)
  4582                           
  4583                           ;main.c: 119: nrf24l01Packet_t packet;;main.c: 121: sendMessage(&packet, "DBG1", counter
      +                          );
  4584  0E10  30A5               	movlw	low (STR_2| (0+32768))
  4585  0E11  0021               	movlb	1	; select bank1
  4586  0E12  00E1               	movwf	sendMessage@topic^(0+128)
  4587  0E13  3098               	movlw	high (STR_2| (0+32768))
  4588  0E14  00E2               	movwf	(sendMessage@topic^(0+128)+1)
  4589  0E15  0022               	movlb	2	; select bank2
  4590  0E16  082D               	movf	_loop$1981^(0+256),w
  4591  0E17  0021               	movlb	1	; select bank1
  4592  0E18  00E3               	movwf	sendMessage@value^(0+128)
  4593  0E19  0022               	movlb	2	; select bank2
  4594  0E1A  082E               	movf	(_loop$1981+1)^(0+256),w
  4595  0E1B  0021               	movlb	1	; select bank1
  4596  0E1C  00E4               	movwf	(sendMessage@value+1)^(0+128)
  4597  0E1D  0022               	movlb	2	; select bank2
  4598  0E1E  082F               	movf	(_loop$1981+2)^(0+256),w
  4599  0E1F  0021               	movlb	1	; select bank1
  4600  0E20  00E5               	movwf	(sendMessage@value+2)^(0+128)
  4601  0E21  3030               	movlw	(low (loop@packet| (0+256)))& (0+255)
  4602  0E22  319F  2760  318D   	fcall	_sendMessage
  4603                           
  4604                           ;main.c: 127: sendMessage(&packet, "VBAT", getADCValue(0b000100) * 3.106382978723404);
  4605  0E25  30CF               	movlw	207
  4606  0E26  0020               	movlb	0	; select bank0
  4607  0E27  00DF               	movwf	___ftmul@f1
  4608  0E28  3046               	movlw	70
  4609  0E29  00E0               	movwf	___ftmul@f1+1
  4610  0E2A  3040               	movlw	64
  4611  0E2B  00E1               	movwf	___ftmul@f1+2
  4612  0E2C  3004               	movlw	4
  4613  0E2D  3193  23F4  318D   	fcall	_getADCValue
  4614  0E30  0020               	movlb	0	; select bank0
  4615  0E31  0853               	movf	?_getADCValue,w
  4616  0E32  00E2               	movwf	___ftmul@f2
  4617  0E33  0854               	movf	?_getADCValue+1,w
  4618  0E34  00E3               	movwf	___ftmul@f2+1
  4619  0E35  0855               	movf	?_getADCValue+2,w
  4620  0E36  00E4               	movwf	___ftmul@f2+2
  4621  0E37  3195  2543  318D   	fcall	___ftmul
  4622  0E3A  0020               	movlb	0	; select bank0
  4623  0E3B  085F               	movf	?___ftmul,w
  4624  0E3C  0022               	movlb	2	; select bank2
  4625  0E3D  00A6               	movwf	_loop$1982^(0+256)
  4626  0E3E  0020               	movlb	0	; select bank0
  4627  0E3F  0860               	movf	?___ftmul+1,w
  4628  0E40  0022               	movlb	2	; select bank2
  4629  0E41  00A7               	movwf	(_loop$1982+1)^(0+256)
  4630  0E42  0020               	movlb	0	; select bank0
  4631  0E43  0861               	movf	?___ftmul+2,w
  4632  0E44  0022               	movlb	2	; select bank2
  4633  0E45  00A8               	movwf	(_loop$1982+2)^(0+256)
  4634                           
  4635                           ;main.c: 127: sendMessage(&packet, "VBAT", getADCValue(0b000100) * 3.106382978723404);
  4636  0E46  30C3               	movlw	low (STR_3| (0+32768))
  4637  0E47  0021               	movlb	1	; select bank1
  4638  0E48  00E1               	movwf	sendMessage@topic^(0+128)
  4639  0E49  3098               	movlw	high (STR_3| (0+32768))
  4640  0E4A  00E2               	movwf	(sendMessage@topic^(0+128)+1)
  4641  0E4B  0022               	movlb	2	; select bank2
  4642  0E4C  0826               	movf	_loop$1982^(0+256),w
  4643  0E4D  0021               	movlb	1	; select bank1
  4644  0E4E  00E3               	movwf	sendMessage@value^(0+128)
  4645  0E4F  0022               	movlb	2	; select bank2
  4646  0E50  0827               	movf	(_loop$1982+1)^(0+256),w
  4647  0E51  0021               	movlb	1	; select bank1
  4648  0E52  00E4               	movwf	(sendMessage@value+1)^(0+128)
  4649  0E53  0022               	movlb	2	; select bank2
  4650  0E54  0828               	movf	(_loop$1982+2)^(0+256),w
  4651  0E55  0021               	movlb	1	; select bank1
  4652  0E56  00E5               	movwf	(sendMessage@value+2)^(0+128)
  4653  0E57  3030               	movlw	(low (loop@packet| (0+256)))& (0+255)
  4654  0E58  319F  2760  318D   	fcall	_sendMessage
  4655                           
  4656                           ;main.c: 129: sendMessage(&packet, "DBG2", counter);
  4657  0E5B  0022               	movlb	2	; select bank2
  4658  0E5C  0854               	movf	(_counter+3)^(0+256),w
  4659  0E5D  0020               	movlb	0	; select bank0
  4660  0E5E  00AB               	movwf	___lltoft@c+3
  4661  0E5F  0022               	movlb	2	; select bank2
  4662  0E60  0853               	movf	(_counter+2)^(0+256),w
  4663  0E61  0020               	movlb	0	; select bank0
  4664  0E62  00AA               	movwf	___lltoft@c+2
  4665  0E63  0022               	movlb	2	; select bank2
  4666  0E64  0852               	movf	(_counter+1)^(0+256),w
  4667  0E65  0020               	movlb	0	; select bank0
  4668  0E66  00A9               	movwf	___lltoft@c+1
  4669  0E67  0022               	movlb	2	; select bank2
  4670  0E68  0851               	movf	_counter^(0+256),w
  4671  0E69  0020               	movlb	0	; select bank0
  4672  0E6A  00A8               	movwf	___lltoft@c
  4673  0E6B  319F  2709  318D   	fcall	___lltoft
  4674  0E6E  0020               	movlb	0	; select bank0
  4675  0E6F  0828               	movf	?___lltoft,w
  4676  0E70  0022               	movlb	2	; select bank2
  4677  0E71  00AD               	movwf	_loop$1981^(0+256)
  4678  0E72  0020               	movlb	0	; select bank0
  4679  0E73  0829               	movf	?___lltoft+1,w
  4680  0E74  0022               	movlb	2	; select bank2
  4681  0E75  00AE               	movwf	(_loop$1981+1)^(0+256)
  4682  0E76  0020               	movlb	0	; select bank0
  4683  0E77  082A               	movf	?___lltoft+2,w
  4684  0E78  0022               	movlb	2	; select bank2
  4685  0E79  00AF               	movwf	(_loop$1981+2)^(0+256)
  4686                           
  4687                           ;main.c: 129: sendMessage(&packet, "DBG2", counter);
  4688  0E7A  30AA               	movlw	low (STR_4| (0+32768))
  4689  0E7B  0021               	movlb	1	; select bank1
  4690  0E7C  00E1               	movwf	sendMessage@topic^(0+128)
  4691  0E7D  3098               	movlw	high (STR_4| (0+32768))
  4692  0E7E  00E2               	movwf	(sendMessage@topic^(0+128)+1)
  4693  0E7F  0022               	movlb	2	; select bank2
  4694  0E80  082D               	movf	_loop$1981^(0+256),w
  4695  0E81  0021               	movlb	1	; select bank1
  4696  0E82  00E3               	movwf	sendMessage@value^(0+128)
  4697  0E83  0022               	movlb	2	; select bank2
  4698  0E84  082E               	movf	(_loop$1981+1)^(0+256),w
  4699  0E85  0021               	movlb	1	; select bank1
  4700  0E86  00E4               	movwf	(sendMessage@value+1)^(0+128)
  4701  0E87  0022               	movlb	2	; select bank2
  4702  0E88  082F               	movf	(_loop$1981+2)^(0+256),w
  4703  0E89  0021               	movlb	1	; select bank1
  4704  0E8A  00E5               	movwf	(sendMessage@value+2)^(0+128)
  4705  0E8B  3030               	movlw	(low (loop@packet| (0+256)))& (0+255)
  4706  0E8C  319F  2760  318D   	fcall	_sendMessage
  4707                           
  4708                           ;main.c: 132: sendMessage(&packet, "ANC3mV", getADCValue(0b010011));
  4709  0E8F  3093               	movlw	low (STR_5| (0+32768))
  4710  0E90  0021               	movlb	1	; select bank1
  4711  0E91  00E1               	movwf	sendMessage@topic^(0+128)
  4712  0E92  3098               	movlw	high (STR_5| (0+32768))
  4713  0E93  00E2               	movwf	(sendMessage@topic^(0+128)+1)
  4714  0E94  3013               	movlw	19
  4715  0E95  3193  23F4  318D   	fcall	_getADCValue
  4716  0E98  0020               	movlb	0	; select bank0
  4717  0E99  0853               	movf	?_getADCValue,w
  4718  0E9A  0021               	movlb	1	; select bank1
  4719  0E9B  00E3               	movwf	sendMessage@value^(0+128)
  4720  0E9C  0020               	movlb	0	; select bank0
  4721  0E9D  0854               	movf	?_getADCValue+1,w
  4722  0E9E  0021               	movlb	1	; select bank1
  4723  0E9F  00E4               	movwf	(sendMessage@value+1)^(0+128)
  4724  0EA0  0020               	movlb	0	; select bank0
  4725  0EA1  0855               	movf	?_getADCValue+2,w
  4726  0EA2  0021               	movlb	1	; select bank1
  4727  0EA3  00E5               	movwf	(sendMessage@value+2)^(0+128)
  4728  0EA4  3030               	movlw	(low (loop@packet| (0+256)))& (0+255)
  4729  0EA5  319F  2760  318D   	fcall	_sendMessage
  4730                           
  4731                           ;main.c: 135: sendMessage(&packet, "DBG3", counter);
  4732  0EA8  0022               	movlb	2	; select bank2
  4733  0EA9  0854               	movf	(_counter+3)^(0+256),w
  4734  0EAA  0020               	movlb	0	; select bank0
  4735  0EAB  00AB               	movwf	___lltoft@c+3
  4736  0EAC  0022               	movlb	2	; select bank2
  4737  0EAD  0853               	movf	(_counter+2)^(0+256),w
  4738  0EAE  0020               	movlb	0	; select bank0
  4739  0EAF  00AA               	movwf	___lltoft@c+2
  4740  0EB0  0022               	movlb	2	; select bank2
  4741  0EB1  0852               	movf	(_counter+1)^(0+256),w
  4742  0EB2  0020               	movlb	0	; select bank0
  4743  0EB3  00A9               	movwf	___lltoft@c+1
  4744  0EB4  0022               	movlb	2	; select bank2
  4745  0EB5  0851               	movf	_counter^(0+256),w
  4746  0EB6  0020               	movlb	0	; select bank0
  4747  0EB7  00A8               	movwf	___lltoft@c
  4748  0EB8  319F  2709  318D   	fcall	___lltoft
  4749  0EBB  0020               	movlb	0	; select bank0
  4750  0EBC  0828               	movf	?___lltoft,w
  4751  0EBD  0022               	movlb	2	; select bank2
  4752  0EBE  00AD               	movwf	_loop$1981^(0+256)
  4753  0EBF  0020               	movlb	0	; select bank0
  4754  0EC0  0829               	movf	?___lltoft+1,w
  4755  0EC1  0022               	movlb	2	; select bank2
  4756  0EC2  00AE               	movwf	(_loop$1981+1)^(0+256)
  4757  0EC3  0020               	movlb	0	; select bank0
  4758  0EC4  082A               	movf	?___lltoft+2,w
  4759  0EC5  0022               	movlb	2	; select bank2
  4760  0EC6  00AF               	movwf	(_loop$1981+2)^(0+256)
  4761                           
  4762                           ;main.c: 135: sendMessage(&packet, "DBG3", counter);
  4763  0EC7  30AF               	movlw	low (STR_6| (0+32768))
  4764  0EC8  0021               	movlb	1	; select bank1
  4765  0EC9  00E1               	movwf	sendMessage@topic^(0+128)
  4766  0ECA  3098               	movlw	high (STR_6| (0+32768))
  4767  0ECB  00E2               	movwf	(sendMessage@topic^(0+128)+1)
  4768  0ECC  0022               	movlb	2	; select bank2
  4769  0ECD  082D               	movf	_loop$1981^(0+256),w
  4770  0ECE  0021               	movlb	1	; select bank1
  4771  0ECF  00E3               	movwf	sendMessage@value^(0+128)
  4772  0ED0  0022               	movlb	2	; select bank2
  4773  0ED1  082E               	movf	(_loop$1981+1)^(0+256),w
  4774  0ED2  0021               	movlb	1	; select bank1
  4775  0ED3  00E4               	movwf	(sendMessage@value+1)^(0+128)
  4776  0ED4  0022               	movlb	2	; select bank2
  4777  0ED5  082F               	movf	(_loop$1981+2)^(0+256),w
  4778  0ED6  0021               	movlb	1	; select bank1
  4779  0ED7  00E5               	movwf	(sendMessage@value+2)^(0+128)
  4780  0ED8  3030               	movlw	(low (loop@packet| (0+256)))& (0+255)
  4781  0ED9  319F  2760  318D   	fcall	_sendMessage
  4782                           
  4783                           ;main.c: 138: FVRCONbits.TSEN = 1;
  4784  0EDC  0022               	movlb	2	; select bank2
  4785  0EDD  1697               	bsf	23,5	;volatile
  4786                           
  4787                           ;main.c: 139: float vt = (2.048 - getADCValue(0b111101)) / 2;
  4788  0EDE  303D               	movlw	61
  4789  0EDF  3193  23F4  318D   	fcall	_getADCValue
  4790  0EE2  0020               	movlb	0	; select bank0
  4791  0EE3  0853               	movf	?_getADCValue,w
  4792  0EE4  00DF               	movwf	___ftneg@f1
  4793  0EE5  0854               	movf	?_getADCValue+1,w
  4794  0EE6  00E0               	movwf	___ftneg@f1+1
  4795  0EE7  0855               	movf	?_getADCValue+2,w
  4796  0EE8  00E1               	movwf	___ftneg@f1+2
  4797  0EE9  3190  2008  318D   	fcall	___ftneg
  4798  0EEC  0020               	movlb	0	; select bank0
  4799  0EED  085F               	movf	?___ftneg,w
  4800  0EEE  0022               	movlb	2	; select bank2
  4801  0EEF  00A9               	movwf	_loop$1983^(0+256)
  4802  0EF0  0020               	movlb	0	; select bank0
  4803  0EF1  0860               	movf	?___ftneg+1,w
  4804  0EF2  0022               	movlb	2	; select bank2
  4805  0EF3  00AA               	movwf	(_loop$1983+1)^(0+256)
  4806  0EF4  0020               	movlb	0	; select bank0
  4807  0EF5  0861               	movf	?___ftneg+2,w
  4808  0EF6  0022               	movlb	2	; select bank2
  4809  0EF7  00AB               	movwf	(_loop$1983+2)^(0+256)
  4810                           
  4811                           ;main.c: 139: float vt = (2.048 - getADCValue(0b111101)) / 2;
  4812  0EF8  3000               	movlw	0
  4813  0EF9  0020               	movlb	0	; select bank0
  4814  0EFA  00C3               	movwf	___ftdiv@f2
  4815  0EFB  3000               	movlw	0
  4816  0EFC  00C4               	movwf	___ftdiv@f2+1
  4817  0EFD  3040               	movlw	64
  4818  0EFE  00C5               	movwf	___ftdiv@f2+2
  4819  0EFF  3012               	movlw	18
  4820  0F00  00B6               	movwf	___ftadd@f1
  4821  0F01  3003               	movlw	3
  4822  0F02  00B7               	movwf	___ftadd@f1+1
  4823  0F03  3040               	movlw	64
  4824  0F04  00B8               	movwf	___ftadd@f1+2
  4825  0F05  0022               	movlb	2	; select bank2
  4826  0F06  0829               	movf	_loop$1983^(0+256),w
  4827  0F07  0020               	movlb	0	; select bank0
  4828  0F08  00B9               	movwf	___ftadd@f2
  4829  0F09  0022               	movlb	2	; select bank2
  4830  0F0A  082A               	movf	(_loop$1983+1)^(0+256),w
  4831  0F0B  0020               	movlb	0	; select bank0
  4832  0F0C  00BA               	movwf	___ftadd@f2+1
  4833  0F0D  0022               	movlb	2	; select bank2
  4834  0F0E  082B               	movf	(_loop$1983+2)^(0+256),w
  4835  0F0F  0020               	movlb	0	; select bank0
  4836  0F10  00BB               	movwf	___ftadd@f2+2
  4837  0F11  3195  25F7  318D   	fcall	___ftadd
  4838  0F14  0020               	movlb	0	; select bank0
  4839  0F15  0836               	movf	?___ftadd,w
  4840  0F16  00C6               	movwf	___ftdiv@f1
  4841  0F17  0837               	movf	?___ftadd+1,w
  4842  0F18  00C7               	movwf	___ftdiv@f1+1
  4843  0F19  0838               	movf	?___ftadd+2,w
  4844  0F1A  00C8               	movwf	___ftdiv@f1+2
  4845  0F1B  3194  249A  318D   	fcall	___ftdiv
  4846  0F1E  0020               	movlb	0	; select bank0
  4847  0F1F  0843               	movf	?___ftdiv,w
  4848  0F20  0022               	movlb	2	; select bank2
  4849  0F21  00A0               	movwf	loop@vt^(0+256)
  4850  0F22  0020               	movlb	0	; select bank0
  4851  0F23  0844               	movf	?___ftdiv+1,w
  4852  0F24  0022               	movlb	2	; select bank2
  4853  0F25  00A1               	movwf	(loop@vt+1)^(0+256)
  4854  0F26  0020               	movlb	0	; select bank0
  4855  0F27  0845               	movf	?___ftdiv+2,w
  4856  0F28  0022               	movlb	2	; select bank2
  4857  0F29  00A2               	movwf	(loop@vt+2)^(0+256)
  4858                           
  4859                           ;main.c: 140: FVRCONbits.TSEN = 0;
  4860  0F2A  1297               	bcf	23,5	;volatile
  4861                           
  4862                           ;main.c: 145: float ta = (vt / -0.00132) - (0.6063 / -0.00132) - 40;
  4863  0F2B  30A9               	movlw	169
  4864  0F2C  0020               	movlb	0	; select bank0
  4865  0F2D  00B6               	movwf	___ftadd@f1
  4866  0F2E  30D1               	movlw	209
  4867  0F2F  00B7               	movwf	___ftadd@f1+1
  4868  0F30  3043               	movlw	67
  4869  0F31  00B8               	movwf	___ftadd@f1+2
  4870  0F32  3004               	movlw	4
  4871  0F33  00C3               	movwf	___ftdiv@f2
  4872  0F34  30AD               	movlw	173
  4873  0F35  00C4               	movwf	___ftdiv@f2+1
  4874  0F36  30BA               	movlw	186
  4875  0F37  00C5               	movwf	___ftdiv@f2+2
  4876  0F38  0022               	movlb	2	; select bank2
  4877  0F39  0820               	movf	loop@vt^(0+256),w
  4878  0F3A  0020               	movlb	0	; select bank0
  4879  0F3B  00C6               	movwf	___ftdiv@f1
  4880  0F3C  0022               	movlb	2	; select bank2
  4881  0F3D  0821               	movf	(loop@vt+1)^(0+256),w
  4882  0F3E  0020               	movlb	0	; select bank0
  4883  0F3F  00C7               	movwf	___ftdiv@f1+1
  4884  0F40  0022               	movlb	2	; select bank2
  4885  0F41  0822               	movf	(loop@vt+2)^(0+256),w
  4886  0F42  0020               	movlb	0	; select bank0
  4887  0F43  00C8               	movwf	___ftdiv@f1+2
  4888  0F44  3194  249A  318D   	fcall	___ftdiv
  4889  0F47  0020               	movlb	0	; select bank0
  4890  0F48  0843               	movf	?___ftdiv,w
  4891  0F49  00B9               	movwf	___ftadd@f2
  4892  0F4A  0844               	movf	?___ftdiv+1,w
  4893  0F4B  00BA               	movwf	___ftadd@f2+1
  4894  0F4C  0845               	movf	?___ftdiv+2,w
  4895  0F4D  00BB               	movwf	___ftadd@f2+2
  4896  0F4E  3195  25F7  318D   	fcall	___ftadd
  4897  0F51  0020               	movlb	0	; select bank0
  4898  0F52  0836               	movf	?___ftadd,w
  4899  0F53  0022               	movlb	2	; select bank2
  4900  0F54  00A3               	movwf	loop@ta^(0+256)
  4901  0F55  0020               	movlb	0	; select bank0
  4902  0F56  0837               	movf	?___ftadd+1,w
  4903  0F57  0022               	movlb	2	; select bank2
  4904  0F58  00A4               	movwf	(loop@ta+1)^(0+256)
  4905  0F59  0020               	movlb	0	; select bank0
  4906  0F5A  0838               	movf	?___ftadd+2,w
  4907  0F5B  0022               	movlb	2	; select bank2
  4908  0F5C  00A5               	movwf	(loop@ta+2)^(0+256)
  4909                           
  4910                           ;main.c: 147: sendMessage(&packet, "TEMP", ta);
  4911  0F5D  30BE               	movlw	low (STR_7| (0+32768))
  4912  0F5E  0021               	movlb	1	; select bank1
  4913  0F5F  00E1               	movwf	sendMessage@topic^(0+128)
  4914  0F60  3098               	movlw	high (STR_7| (0+32768))
  4915  0F61  00E2               	movwf	(sendMessage@topic^(0+128)+1)
  4916  0F62  0022               	movlb	2	; select bank2
  4917  0F63  0823               	movf	loop@ta^(0+256),w
  4918  0F64  0021               	movlb	1	; select bank1
  4919  0F65  00E3               	movwf	sendMessage@value^(0+128)
  4920  0F66  0022               	movlb	2	; select bank2
  4921  0F67  0824               	movf	(loop@ta+1)^(0+256),w
  4922  0F68  0021               	movlb	1	; select bank1
  4923  0F69  00E4               	movwf	(sendMessage@value+1)^(0+128)
  4924  0F6A  0022               	movlb	2	; select bank2
  4925  0F6B  0825               	movf	(loop@ta+2)^(0+256),w
  4926  0F6C  0021               	movlb	1	; select bank1
  4927  0F6D  00E5               	movwf	(sendMessage@value+2)^(0+128)
  4928  0F6E  3030               	movlw	(low (loop@packet| (0+256)))& (0+255)
  4929  0F6F  319F  2760  318D   	fcall	_sendMessage
  4930                           
  4931                           ;main.c: 149: sendMessage(&packet, "DBG4", counter);
  4932  0F72  0022               	movlb	2	; select bank2
  4933  0F73  0854               	movf	(_counter+3)^(0+256),w
  4934  0F74  0020               	movlb	0	; select bank0
  4935  0F75  00AB               	movwf	___lltoft@c+3
  4936  0F76  0022               	movlb	2	; select bank2
  4937  0F77  0853               	movf	(_counter+2)^(0+256),w
  4938  0F78  0020               	movlb	0	; select bank0
  4939  0F79  00AA               	movwf	___lltoft@c+2
  4940  0F7A  0022               	movlb	2	; select bank2
  4941  0F7B  0852               	movf	(_counter+1)^(0+256),w
  4942  0F7C  0020               	movlb	0	; select bank0
  4943  0F7D  00A9               	movwf	___lltoft@c+1
  4944  0F7E  0022               	movlb	2	; select bank2
  4945  0F7F  0851               	movf	_counter^(0+256),w
  4946  0F80  0020               	movlb	0	; select bank0
  4947  0F81  00A8               	movwf	___lltoft@c
  4948  0F82  319F  2709  318D   	fcall	___lltoft
  4949  0F85  0020               	movlb	0	; select bank0
  4950  0F86  0828               	movf	?___lltoft,w
  4951  0F87  0022               	movlb	2	; select bank2
  4952  0F88  00AD               	movwf	_loop$1981^(0+256)
  4953  0F89  0020               	movlb	0	; select bank0
  4954  0F8A  0829               	movf	?___lltoft+1,w
  4955  0F8B  0022               	movlb	2	; select bank2
  4956  0F8C  00AE               	movwf	(_loop$1981+1)^(0+256)
  4957  0F8D  0020               	movlb	0	; select bank0
  4958  0F8E  082A               	movf	?___lltoft+2,w
  4959  0F8F  0022               	movlb	2	; select bank2
  4960  0F90  00AF               	movwf	(_loop$1981+2)^(0+256)
  4961                           
  4962                           ;main.c: 149: sendMessage(&packet, "DBG4", counter);
  4963  0F91  30B4               	movlw	low (STR_8| (0+32768))
  4964  0F92  0021               	movlb	1	; select bank1
  4965  0F93  00E1               	movwf	sendMessage@topic^(0+128)
  4966  0F94  3098               	movlw	high (STR_8| (0+32768))
  4967  0F95  00E2               	movwf	(sendMessage@topic^(0+128)+1)
  4968  0F96  0022               	movlb	2	; select bank2
  4969  0F97  082D               	movf	_loop$1981^(0+256),w
  4970  0F98  0021               	movlb	1	; select bank1
  4971  0F99  00E3               	movwf	sendMessage@value^(0+128)
  4972  0F9A  0022               	movlb	2	; select bank2
  4973  0F9B  082E               	movf	(_loop$1981+1)^(0+256),w
  4974  0F9C  0021               	movlb	1	; select bank1
  4975  0F9D  00E4               	movwf	(sendMessage@value+1)^(0+128)
  4976  0F9E  0022               	movlb	2	; select bank2
  4977  0F9F  082F               	movf	(_loop$1981+2)^(0+256),w
  4978  0FA0  0021               	movlb	1	; select bank1
  4979  0FA1  00E5               	movwf	(sendMessage@value+2)^(0+128)
  4980  0FA2  3030               	movlw	(low (loop@packet| (0+256)))& (0+255)
  4981  0FA3  319F  2760  318D   	fcall	_sendMessage
  4982                           
  4983                           ;main.c: 151: n_RF_SETUP_t rfSetup;;main.c: 152: rfSetup.byte = nrf24l01Send((unsigned) 
      +                          0b00000000 | (unsigned) 0x06, 0);
  4984  0FA6  0020               	movlb	0	; select bank0
  4985  0FA7  01A0               	clrf	nrf24l01Send@data
  4986  0FA8  3006               	movlw	6
  4987  0FA9  319E  2656  318D   	fcall	_nrf24l01Send
  4988  0FAC  0021               	movlb	1	; select bank1
  4989  0FAD  00E6               	movwf	??_loop^(0+128)
  4990  0FAE  0866               	movf	??_loop^(0+128),w
  4991  0FAF  0022               	movlb	2	; select bank2
  4992  0FB0  00AC               	movwf	loop@rfSetup^(0+256)
  4993                           
  4994                           ;main.c: 154: sendMessage(&packet, "RFPWR", rfSetup.RF_PWR);
  4995  0FB1  309A               	movlw	low (STR_9| (0+32768))
  4996  0FB2  0021               	movlb	1	; select bank1
  4997  0FB3  00E1               	movwf	sendMessage@topic^(0+128)
  4998  0FB4  3098               	movlw	high (STR_9| (0+32768))
  4999  0FB5  00E2               	movwf	(sendMessage@topic^(0+128)+1)
  5000  0FB6  0022               	movlb	2	; select bank2
  5001  0FB7  0C2C               	rrf	loop@rfSetup^(0+256),w
  5002  0FB8  3903               	andlw	3
  5003  0FB9  319D  2570  318D   	fcall	___lbtoft
  5004  0FBC  0020               	movlb	0	; select bank0
  5005  0FBD  0828               	movf	?___lbtoft,w
  5006  0FBE  0021               	movlb	1	; select bank1
  5007  0FBF  00E3               	movwf	sendMessage@value^(0+128)
  5008  0FC0  0020               	movlb	0	; select bank0
  5009  0FC1  0829               	movf	?___lbtoft+1,w
  5010  0FC2  0021               	movlb	1	; select bank1
  5011  0FC3  00E4               	movwf	(sendMessage@value+1)^(0+128)
  5012  0FC4  0020               	movlb	0	; select bank0
  5013  0FC5  082A               	movf	?___lbtoft+2,w
  5014  0FC6  0021               	movlb	1	; select bank1
  5015  0FC7  00E5               	movwf	(sendMessage@value+2)^(0+128)
  5016  0FC8  3030               	movlw	(low (loop@packet| (0+256)))& (0+255)
  5017  0FC9  319F  2760  318D   	fcall	_sendMessage
  5018                           
  5019                           ;main.c: 156: sendMessage(&packet, "DBG5", counter);
  5020  0FCC  0022               	movlb	2	; select bank2
  5021  0FCD  0854               	movf	(_counter+3)^(0+256),w
  5022  0FCE  0020               	movlb	0	; select bank0
  5023  0FCF  00AB               	movwf	___lltoft@c+3
  5024  0FD0  0022               	movlb	2	; select bank2
  5025  0FD1  0853               	movf	(_counter+2)^(0+256),w
  5026  0FD2  0020               	movlb	0	; select bank0
  5027  0FD3  00AA               	movwf	___lltoft@c+2
  5028  0FD4  0022               	movlb	2	; select bank2
  5029  0FD5  0852               	movf	(_counter+1)^(0+256),w
  5030  0FD6  0020               	movlb	0	; select bank0
  5031  0FD7  00A9               	movwf	___lltoft@c+1
  5032  0FD8  0022               	movlb	2	; select bank2
  5033  0FD9  0851               	movf	_counter^(0+256),w
  5034  0FDA  0020               	movlb	0	; select bank0
  5035  0FDB  00A8               	movwf	___lltoft@c
  5036  0FDC  319F  2709  318D   	fcall	___lltoft
  5037  0FDF  0020               	movlb	0	; select bank0
  5038  0FE0  0828               	movf	?___lltoft,w
  5039  0FE1  0022               	movlb	2	; select bank2
  5040  0FE2  00AD               	movwf	_loop$1981^(0+256)
  5041  0FE3  0020               	movlb	0	; select bank0
  5042  0FE4  0829               	movf	?___lltoft+1,w
  5043  0FE5  0022               	movlb	2	; select bank2
  5044  0FE6  00AE               	movwf	(_loop$1981+1)^(0+256)
  5045  0FE7  0020               	movlb	0	; select bank0
  5046  0FE8  082A               	movf	?___lltoft+2,w
  5047  0FE9  0022               	movlb	2	; select bank2
  5048  0FEA  00AF               	movwf	(_loop$1981+2)^(0+256)
  5049                           
  5050                           ;main.c: 156: sendMessage(&packet, "DBG5", counter);
  5051  0FEB  30B9               	movlw	low (STR_10| (0+32768))
  5052  0FEC  0021               	movlb	1	; select bank1
  5053  0FED  00E1               	movwf	sendMessage@topic^(0+128)
  5054  0FEE  3098               	movlw	high (STR_10| (0+32768))
  5055  0FEF  00E2               	movwf	(sendMessage@topic^(0+128)+1)
  5056  0FF0  0022               	movlb	2	; select bank2
  5057  0FF1  082D               	movf	_loop$1981^(0+256),w
  5058  0FF2  0021               	movlb	1	; select bank1
  5059  0FF3  00E3               	movwf	sendMessage@value^(0+128)
  5060  0FF4  0022               	movlb	2	; select bank2
  5061  0FF5  082E               	movf	(_loop$1981+1)^(0+256),w
  5062  0FF6  0021               	movlb	1	; select bank1
  5063  0FF7  00E4               	movwf	(sendMessage@value+1)^(0+128)
  5064  0FF8  0022               	movlb	2	; select bank2
  5065  0FF9  082F               	movf	(_loop$1981+2)^(0+256),w
  5066  0FFA  0021               	movlb	1	; select bank1
  5067  0FFB  00E5               	movwf	(sendMessage@value+2)^(0+128)
  5068  0FFC  3030               	movlw	(low (loop@packet| (0+256)))& (0+255)
  5069  0FFD  319F  2760         	fcall	_sendMessage
  5070  0FFF  0008               	return
  5071  1000                     __end_of_loop:	
  5072                           
  5073                           	psect	text10
  5074  1F60                     __ptext10:	
  5075 ;; *************** function _sendMessage *****************
  5076 ;; Defined at:
  5077 ;;		line 104 in file "main.c"
  5078 ;; Parameters:    Size  Location     Type
  5079 ;;  packet          1    wreg     PTR struct .
  5080 ;;		 -> main@packet(33), loop@packet(33), 
  5081 ;;  topic           2   65[BANK1 ] PTR const unsigned char 
  5082 ;;		 -> STR_12(5), STR_10(5), STR_9(6), STR_8(5), 
  5083 ;;		 -> STR_7(5), STR_6(5), STR_5(7), STR_4(5), 
  5084 ;;		 -> STR_3(5), STR_2(5), 
  5085 ;;  value           3   67[BANK1 ] float 
  5086 ;; Auto vars:     Size  Location     Type
  5087 ;;  packet          1   79[BANK0 ] PTR struct .
  5088 ;;		 -> main@packet(33), loop@packet(33), 
  5089 ;; Return value:  Size  Location     Type
  5090 ;;                  1    wreg      void 
  5091 ;; Registers used:
  5092 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5093 ;; Tracked objects:
  5094 ;;		On entry : 0/0
  5095 ;;		On exit  : 0/0
  5096 ;;		Unchanged: 0/0
  5097 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5098 ;;      Params:         0       0       5       0       0       0       0       0       0       0       0       0       
      +0       0
  5099 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5100 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5101 ;;      Totals:         0       1       5       0       0       0       0       0       0       0       0       0       
      +0       0
  5102 ;;Total ram usage:        6 bytes
  5103 ;; Hardware stack levels used:    1
  5104 ;; Hardware stack levels required when called:   13
  5105 ;; This function calls:
  5106 ;;		_nrf24l01SendPacket
  5107 ;;		_sleep
  5108 ;;		_sprintf
  5109 ;; This function is called by:
  5110 ;;		_loop
  5111 ;;		_main
  5112 ;; This function uses a non-reentrant model
  5113 ;;
  5114                           
  5115                           
  5116                           ;psect for function _sendMessage
  5117  1F60                     _sendMessage:	
  5118                           
  5119                           ;incstack = 0
  5120                           ; Regs used in _sendMessage: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5121                           ;sendMessage@packet stored from wreg
  5122  1F60  0020               	movlb	0	; select bank0
  5123  1F61  00EF               	movwf	sendMessage@packet
  5124                           
  5125                           ;main.c: 106: sprintf(packet->Message, "/%s/%s/%f", romData->name, topic, value);
  5126  1F62  3082               	movlw	low (STR_1| (0+32768))
  5127  1F63  0021               	movlb	1	; select bank1
  5128  1F64  00B9               	movwf	sprintf@f^(0+128)
  5129  1F65  3098               	movlw	high (STR_1| (0+32768))
  5130  1F66  00BA               	movwf	(sprintf@f^(0+128)+1)
  5131  1F67  086C               	movf	_romData^(0+128),w
  5132  1F68  3E01               	addlw	1
  5133  1F69  00BB               	movwf	(low ((?_sprintf| 0+2)))^(0+128)
  5134  1F6A  3002               	movlw	2
  5135  1F6B  00BC               	movwf	((low ((?_sprintf| 0+2))+1))^(0+128)
  5136  1F6C  0862               	movf	(sendMessage@topic+1)^(0+128),w
  5137  1F6D  00BE               	movwf	((low ((?_sprintf| 0+4))+1))^(0+128)
  5138  1F6E  0861               	movf	sendMessage@topic^(0+128),w
  5139  1F6F  00BD               	movwf	(low ((?_sprintf| 0+4)))^(0+128)
  5140  1F70  0863               	movf	sendMessage@value^(0+128),w
  5141  1F71  00BF               	movwf	(?_sprintf^(0+128)+6)
  5142  1F72  0864               	movf	(sendMessage@value+1)^(0+128),w
  5143  1F73  00C0               	movwf	((?_sprintf+1)^(0+128)+6)
  5144  1F74  0865               	movf	(sendMessage@value+2)^(0+128),w
  5145  1F75  00C1               	movwf	((?_sprintf+2)^(0+128)+6)
  5146  1F76  0020               	movlb	0	; select bank0
  5147  1F77  086F               	movf	sendMessage@packet,w
  5148  1F78  3E01               	addlw	1
  5149  1F79  3180  2032  319F   	fcall	_sprintf
  5150                           
  5151                           ;main.c: 108: packet->packetData.byte = 0;
  5152  1F7C  0020               	movlb	0	; select bank0
  5153  1F7D  086F               	movf	sendMessage@packet,w
  5154  1F7E  0086               	movwf	6
  5155  1F7F  3001               	movlw	1	; select bank2/3
  5156  1F80  0087               	movwf	7
  5157  1F81  0181               	clrf	1
  5158                           
  5159                           ;main.c: 109: packet->packetData.ACKRequest = 1;
  5160  1F82  086F               	movf	sendMessage@packet,w
  5161  1F83  0086               	movwf	6
  5162  1F84  3001               	movlw	1	; select bank2/3
  5163  1F85  0087               	movwf	7
  5164  1F86  1501               	bsf	1,2
  5165                           
  5166                           ;main.c: 111: nrf24l01SendPacket(packet);
  5167  1F87  086F               	movf	sendMessage@packet,w
  5168  1F88  319E  26DF  319F   	fcall	_nrf24l01SendPacket
  5169                           
  5170                           ;main.c: 113: sleep(2000);
  5171  1F8B  30D0               	movlw	208
  5172  1F8C  0020               	movlb	0	; select bank0
  5173  1F8D  00A6               	movwf	sleep@milliseconds
  5174  1F8E  3007               	movlw	7
  5175  1F8F  00A7               	movwf	sleep@milliseconds+1
  5176  1F90  319E  26B9         	fcall	_sleep
  5177  1F92  0008               	return
  5178  1F93                     __end_of_sendMessage:	
  5179                           
  5180                           	psect	text11
  5181  0032                     __ptext11:	
  5182 ;; *************** function _sprintf *****************
  5183 ;; Defined at:
  5184 ;;		line 500 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\doprnt.c"
  5185 ;; Parameters:    Size  Location     Type
  5186 ;;  sp              1    wreg     PTR unsigned char 
  5187 ;;		 -> main@packet(33), loop@packet(33), 
  5188 ;;  f               2   25[BANK1 ] PTR const unsigned char 
  5189 ;;		 -> STR_1(10), 
  5190 ;; Auto vars:     Size  Location     Type
  5191 ;;  sp              1   60[BANK1 ] PTR unsigned char 
  5192 ;;		 -> main@packet(33), loop@packet(33), 
  5193 ;;  tmpval          4   56[BANK1 ] struct .
  5194 ;;  val             4   50[BANK1 ] unsigned long 
  5195 ;;  fval            3   61[BANK1 ] unsigned long 
  5196 ;;  eexp            2   54[BANK1 ] int 
  5197 ;;  prec            2   48[BANK1 ] int 
  5198 ;;  cp              2   46[BANK1 ] PTR const unsigned char 
  5199 ;;		 -> romDataMap.name(16), STR_13(7), ?_sprintf(2), STR_12(5), 
  5200 ;;		 -> STR_10(5), STR_9(6), STR_8(5), STR_7(5), 
  5201 ;;		 -> STR_6(5), STR_5(7), STR_4(5), STR_3(5), 
  5202 ;;		 -> STR_2(5), romDataMap(28), 
  5203 ;;  flag            2   44[BANK1 ] unsigned short 
  5204 ;;  len             2    0        unsigned int 
  5205 ;;  width           2    0        int 
  5206 ;;  c               1   64[BANK1 ] unsigned char 
  5207 ;;  ap              1   43[BANK1 ] PTR void [1]
  5208 ;;		 -> ?_sprintf(2), 
  5209 ;;  d               1    0        unsigned char 
  5210 ;; Return value:  Size  Location     Type
  5211 ;;                  2   25[BANK1 ] int 
  5212 ;; Registers used:
  5213 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5214 ;; Tracked objects:
  5215 ;;		On entry : 0/0
  5216 ;;		On exit  : 0/0
  5217 ;;		Unchanged: 0/0
  5218 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5219 ;;      Params:         0       0       9       0       0       0       0       0       0       0       0       0       
      +0       0
  5220 ;;      Locals:         0       0      25       0       0       0       0       0       0       0       0       0       
      +0       0
  5221 ;;      Temps:          0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0
  5222 ;;      Totals:         0       0      40       0       0       0       0       0       0       0       0       0       
      +0       0
  5223 ;;Total ram usage:       40 bytes
  5224 ;; Hardware stack levels used:    1
  5225 ;; Hardware stack levels required when called:   10
  5226 ;; This function calls:
  5227 ;;		___awdiv
  5228 ;;		___ftadd
  5229 ;;		___ftge
  5230 ;;		___ftmul
  5231 ;;		___ftneg
  5232 ;;		___ftsub
  5233 ;;		___fttol
  5234 ;;		___lldiv
  5235 ;;		___llmod
  5236 ;;		___lltoft
  5237 ;;		___wmul
  5238 ;;		__div_to_l_
  5239 ;;		__tdiv_to_l_
  5240 ;;		_fround
  5241 ;;		_scale
  5242 ;; This function is called by:
  5243 ;;		_sendMessage
  5244 ;; This function uses a non-reentrant model
  5245 ;;
  5246                           
  5247                           
  5248                           ;psect for function _sprintf
  5249  0032                     _sprintf:	
  5250                           
  5251                           ;incstack = 0
  5252                           ; Regs used in _sprintf: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5253                           ;sprintf@sp stored from wreg
  5254  0032  0021               	movlb	1	; select bank1
  5255  0033  00DC               	movwf	sprintf@sp^(0+128)
  5256                           
  5257                           ;doprnt.c: 502: va_list ap;;doprnt.c: 507: char c;;doprnt.c: 509: int width;;doprnt.c: 5
      +                          12: int prec;;doprnt.c: 520: unsigned short flag;;doprnt.c: 527: char d;;doprnt.c: 528: 
      +                          double fval;;doprnt.c: 529: int eexp;;doprnt.c: 535: union {;doprnt.c: 536: unsigned lon
      +                          g vd;;doprnt.c: 537: double integ;;doprnt.c: 538: } tmpval;;doprnt.c: 540: unsigned long
      +                           val;;doprnt.c: 541: unsigned len;;doprnt.c: 542: const char * cp;;doprnt.c: 545: *ap = 
      +                          __va_start();
  5258  0034  30BB               	movlw	(low ((?_sprintf| 0+2)))& (0+255)
  5259  0035  00C2               	movwf	??_sprintf^(0+128)
  5260  0036  0842               	movf	??_sprintf^(0+128),w
  5261  0037  00CB               	movwf	sprintf@ap^(0+128)
  5262  0038                     l5082:	
  5263                           ;doprnt.c: 548: while((c = *f++)) {
  5264                           
  5265  0038  083A               	movf	(sprintf@f+1)^(0+128),w
  5266  0039  00C3               	movwf	(??_sprintf^(0+128)+1)
  5267  003A  0839               	movf	sprintf@f^(0+128),w
  5268  003B  00C2               	movwf	??_sprintf^(0+128)
  5269  003C  0AB9               	incf	sprintf@f^(0+128),f
  5270  003D  1903               	skipnz
  5271  003E  0ABA               	incf	(sprintf@f+1)^(0+128),f
  5272  003F  0842               	movf	??_sprintf^(0+128),w
  5273  0040  0084               	movwf	4
  5274  0041  0843               	movf	(??_sprintf+1)^(0+128),w
  5275  0042  0085               	movwf	5
  5276  0043  0800               	movf	0,w	;code access
  5277  0044  00C4               	movwf	(??_sprintf+2)^(0+128)
  5278  0045  0844               	movf	(??_sprintf+2)^(0+128),w
  5279  0046  00E0               	movwf	sprintf@c^(0+128)
  5280  0047  0860               	movf	sprintf@c^(0+128),w
  5281  0048  1903               	btfsc	3,2
  5282  0049  2CD1               	goto	l5084
  5283                           
  5284                           ;doprnt.c: 550: if(c != '%')
  5285  004A  3025               	movlw	37
  5286  004B  0660               	xorwf	sprintf@c^(0+128),w
  5287  004C  1903               	btfsc	3,2
  5288  004D  2850               	goto	l4912
  5289                           
  5290                           ;doprnt.c: 552: {;doprnt.c: 553: ((*sp++ = (c)));
  5291  004E  0860               	movf	sprintf@c^(0+128),w
  5292  004F  2CC5               	goto	L5
  5293  0050                     l4912:	
  5294                           ;doprnt.c: 554: continue;
  5295                           
  5296                           
  5297                           ;doprnt.c: 555: };doprnt.c: 560: flag = 0;
  5298  0050  01CC               	clrf	sprintf@flag^(0+128)
  5299  0051  01CD               	clrf	(sprintf@flag+1)^(0+128)
  5300                           
  5301                           ;doprnt.c: 654: switch(c = *f++) {
  5302  0052  2884               	goto	l4932
  5303  0053                     l427:	
  5304                           ;doprnt.c: 681: case 'f':
  5305                           
  5306                           ;doprnt.c: 657: goto alldone;
  5307                           
  5308                           ;doprnt.c: 656: case 0:
  5309                           
  5310                           
  5311                           ;doprnt.c: 682: flag |= 0x400;
  5312  0053  154D               	bsf	(sprintf@flag^(0+128)+1),2
  5313                           
  5314                           ;doprnt.c: 683: break;
  5315  0054  289B               	goto	l4934
  5316  0055                     l4914:	
  5317                           ;doprnt.c: 747: case 's':
  5318                           
  5319                           
  5320                           ;doprnt.c: 753: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
  5321  0055  084B               	movf	sprintf@ap^(0+128),w
  5322  0056  0086               	movwf	6
  5323  0057  0187               	clrf	7
  5324  0058  3F40               	moviw [0]fsr1
  5325  0059  00CE               	movwf	sprintf@cp^(0+128)
  5326  005A  3F41               	moviw [1]fsr1
  5327  005B  00CF               	movwf	(sprintf@cp+1)^(0+128)
  5328  005C  3002               	movlw	2
  5329  005D  00C2               	movwf	??_sprintf^(0+128)
  5330  005E  0842               	movf	??_sprintf^(0+128),w
  5331  005F  07CB               	addwf	sprintf@ap^(0+128),f
  5332                           
  5333                           ;doprnt.c: 759: if(!cp)
  5334  0060  084E               	movf	sprintf@cp^(0+128),w
  5335  0061  044F               	iorwf	(sprintf@cp+1)^(0+128),w
  5336  0062  1D03               	btfss	3,2
  5337  0063  2868               	goto	l4928
  5338                           
  5339                           ;doprnt.c: 760: cp = "(null)";
  5340  0064  308C               	movlw	low (STR_13| (0+32768))
  5341  0065  00CE               	movwf	sprintf@cp^(0+128)
  5342  0066  3098               	movlw	high (STR_13| (0+32768))
  5343  0067  00CF               	movwf	(sprintf@cp^(0+128)+1)
  5344  0068                     l4928:	
  5345                           ;doprnt.c: 796: while(*cp)
  5346                           
  5347  0068  084E               	movf	sprintf@cp^(0+128),w
  5348  0069  0084               	movwf	4
  5349  006A  084F               	movf	(sprintf@cp+1)^(0+128),w
  5350  006B  0085               	movwf	5
  5351  006C  0012               	moviw fsr0++
  5352  006D  1903               	btfsc	3,2
  5353  006E  2838               	goto	l5082
  5354                           
  5355                           ;doprnt.c: 797: ((*sp++ = (*cp++)));
  5356  006F  084E               	movf	sprintf@cp^(0+128),w
  5357  0070  0084               	movwf	4
  5358  0071  084F               	movf	(sprintf@cp+1)^(0+128),w
  5359  0072  0085               	movwf	5
  5360  0073  0800               	movf	0,w	;code access
  5361  0074  00C2               	movwf	??_sprintf^(0+128)
  5362  0075  085C               	movf	sprintf@sp^(0+128),w
  5363  0076  0086               	movwf	6
  5364  0077  3001               	movlw	1	; select bank2/3
  5365  0078  0087               	movwf	7
  5366  0079  0842               	movf	??_sprintf^(0+128),w
  5367  007A  0081               	movwf	1
  5368  007B  3001               	movlw	1
  5369  007C  07CE               	addwf	sprintf@cp^(0+128),f
  5370  007D  3000               	movlw	0
  5371  007E  3DCF               	addwfc	(sprintf@cp+1)^(0+128),f
  5372  007F  3001               	movlw	1
  5373  0080  00C2               	movwf	??_sprintf^(0+128)
  5374  0081  0842               	movf	??_sprintf^(0+128),w
  5375  0082  07DC               	addwf	sprintf@sp^(0+128),f
  5376  0083  2868               	goto	l4928
  5377  0084                     l4932:	
  5378                           ;doprnt.c: 841: }
  5379                           
  5380                           ;doprnt.c: 832: continue;
  5381                           
  5382                           ;doprnt.c: 821: default:
  5383                           
  5384                           ;doprnt.c: 798: continue;
  5385                           
  5386  0084  083A               	movf	(sprintf@f+1)^(0+128),w
  5387  0085  00C3               	movwf	(??_sprintf^(0+128)+1)
  5388  0086  0839               	movf	sprintf@f^(0+128),w
  5389  0087  00C2               	movwf	??_sprintf^(0+128)
  5390  0088  0AB9               	incf	sprintf@f^(0+128),f
  5391  0089  1903               	skipnz
  5392  008A  0ABA               	incf	(sprintf@f+1)^(0+128),f
  5393  008B  0842               	movf	??_sprintf^(0+128),w
  5394  008C  0084               	movwf	4
  5395  008D  0843               	movf	(??_sprintf+1)^(0+128),w
  5396  008E  0085               	movwf	5
  5397  008F  0800               	movf	0,w	;code access
  5398  0090  00E0               	movwf	sprintf@c^(0+128)
  5399                           
  5400                           ; Switch size 1, requested type "space"
  5401                           ; Number of cases is 3, Range of values is 0 to 115
  5402                           ; switch strategies available:
  5403                           ; Name         Instructions Cycles
  5404                           ; simple_byte           10     6 (average)
  5405                           ; direct_byte          238     6 (fixed)
  5406                           ; jumptable            260     6 (fixed)
  5407                           ;	Chosen strategy is simple_byte
  5408  0091  3A00               	xorlw	0	; case 0
  5409  0092  1903               	skipnz
  5410  0093  2CD1               	goto	l5084
  5411  0094  3A66               	xorlw	102	; case 102
  5412  0095  1903               	skipnz
  5413  0096  2853               	goto	l427
  5414  0097  3A15               	xorlw	21	; case 115
  5415  0098  1903               	skipnz
  5416  0099  2855               	goto	l4914
  5417  009A  2838               	goto	l5082
  5418  009B                     l4934:	
  5419                           
  5420                           ;doprnt.c: 844: if(flag & (0x700)) {
  5421  009B  3000               	movlw	0
  5422  009C  054C               	andwf	sprintf@flag^(0+128),w
  5423  009D  00C2               	movwf	??_sprintf^(0+128)
  5424  009E  3007               	movlw	7
  5425  009F  054D               	andwf	(sprintf@flag+1)^(0+128),w
  5426  00A0  00C3               	movwf	(??_sprintf+1)^(0+128)
  5427  00A1  0842               	movf	??_sprintf^(0+128),w
  5428  00A2  0443               	iorwf	(??_sprintf^(0+128)+1),w
  5429  00A3  1903               	btfsc	3,2
  5430  00A4  2CBA               	goto	l5076
  5431                           
  5432                           ;doprnt.c: 848: prec = 6;
  5433  00A5  3006               	movlw	6
  5434  00A6  00D0               	movwf	sprintf@prec^(0+128)
  5435  00A7  3000               	movlw	0
  5436  00A8  00D1               	movwf	(sprintf@prec^(0+128)+1)
  5437                           
  5438                           ;doprnt.c: 849: fval = (*(double *)__va_arg((*(double **)ap), (double)0));
  5439  00A9  084B               	movf	sprintf@ap^(0+128),w
  5440  00AA  0086               	movwf	6
  5441  00AB  0187               	clrf	7
  5442  00AC  3F40               	moviw [0]fsr1
  5443  00AD  00DD               	movwf	sprintf@fval^(0+128)
  5444  00AE  3F41               	moviw [1]fsr1
  5445  00AF  00DE               	movwf	(sprintf@fval+1)^(0+128)
  5446  00B0  3F42               	moviw [2]fsr1
  5447  00B1  00DF               	movwf	(sprintf@fval+2)^(0+128)
  5448  00B2  3003               	movlw	3
  5449  00B3  00C2               	movwf	??_sprintf^(0+128)
  5450  00B4  0842               	movf	??_sprintf^(0+128),w
  5451  00B5  07CB               	addwf	sprintf@ap^(0+128),f
  5452                           
  5453                           ;doprnt.c: 850: if(fval < 0.0) {
  5454  00B6  085D               	movf	sprintf@fval^(0+128),w
  5455  00B7  0020               	movlb	0	; select bank0
  5456  00B8  00A0               	movwf	___ftge@ff1
  5457  00B9  0021               	movlb	1	; select bank1
  5458  00BA  085E               	movf	(sprintf@fval+1)^(0+128),w
  5459  00BB  0020               	movlb	0	; select bank0
  5460  00BC  00A1               	movwf	___ftge@ff1+1
  5461  00BD  0021               	movlb	1	; select bank1
  5462  00BE  085F               	movf	(sprintf@fval+2)^(0+128),w
  5463  00BF  0020               	movlb	0	; select bank0
  5464  00C0  00A2               	movwf	___ftge@ff1+2
  5465  00C1  3000               	movlw	0
  5466  00C2  00A3               	movwf	___ftge@ff2
  5467  00C3  3000               	movlw	0
  5468  00C4  00A4               	movwf	___ftge@ff2+1
  5469  00C5  3000               	movlw	0
  5470  00C6  00A5               	movwf	___ftge@ff2+2
  5471  00C7  3190  204B  3180   	fcall	___ftge
  5472  00CA  1803               	btfsc	3,0
  5473  00CB  28EB               	goto	l4948
  5474                           
  5475                           ;doprnt.c: 851: fval = -fval;
  5476  00CC  0021               	movlb	1	; select bank1
  5477  00CD  085D               	movf	sprintf@fval^(0+128),w
  5478  00CE  0020               	movlb	0	; select bank0
  5479  00CF  00DF               	movwf	___ftneg@f1
  5480  00D0  0021               	movlb	1	; select bank1
  5481  00D1  085E               	movf	(sprintf@fval+1)^(0+128),w
  5482  00D2  0020               	movlb	0	; select bank0
  5483  00D3  00E0               	movwf	___ftneg@f1+1
  5484  00D4  0021               	movlb	1	; select bank1
  5485  00D5  085F               	movf	(sprintf@fval+2)^(0+128),w
  5486  00D6  0020               	movlb	0	; select bank0
  5487  00D7  00E1               	movwf	___ftneg@f1+2
  5488  00D8  3190  2008  3180   	fcall	___ftneg
  5489  00DB  0020               	movlb	0	; select bank0
  5490  00DC  085F               	movf	?___ftneg,w
  5491  00DD  0021               	movlb	1	; select bank1
  5492  00DE  00DD               	movwf	sprintf@fval^(0+128)
  5493  00DF  0020               	movlb	0	; select bank0
  5494  00E0  0860               	movf	?___ftneg+1,w
  5495  00E1  0021               	movlb	1	; select bank1
  5496  00E2  00DE               	movwf	(sprintf@fval+1)^(0+128)
  5497  00E3  0020               	movlb	0	; select bank0
  5498  00E4  0861               	movf	?___ftneg+2,w
  5499  00E5  0021               	movlb	1	; select bank1
  5500  00E6  00DF               	movwf	(sprintf@fval+2)^(0+128)
  5501                           
  5502                           ;doprnt.c: 852: flag |= 0x03;
  5503  00E7  3003               	movlw	3
  5504  00E8  04CC               	iorwf	sprintf@flag^(0+128),f
  5505  00E9  3000               	movlw	0
  5506  00EA  04CD               	iorwf	(sprintf@flag+1)^(0+128),f
  5507  00EB                     l4948:	
  5508                           
  5509                           ;doprnt.c: 853: };doprnt.c: 854: eexp = 0;
  5510  00EB  0021               	movlb	1	; select bank1
  5511  00EC  01D6               	clrf	sprintf@eexp^(0+128)
  5512  00ED  01D7               	clrf	(sprintf@eexp+1)^(0+128)
  5513                           
  5514                           ;doprnt.c: 855: if( fval!=0) {
  5515  00EE  085F               	movf	(sprintf@fval+2)^(0+128),w
  5516  00EF  045E               	iorwf	(sprintf@fval+1)^(0+128),w
  5517  00F0  045D               	iorwf	sprintf@fval^(0+128),w
  5518  00F1  1903               	skipnz
  5519  00F2  29B4               	goto	l437
  5520                           
  5521                           ;doprnt.c: 856: (void)(*(&eexp) = ((*(unsigned long *)&fval >> 15) & 255) - 126);
  5522  00F3  30DD               	movlw	low (sprintf@fval| 0)
  5523  00F4  0086               	movwf	6
  5524  00F5  0187               	clrf	7
  5525  00F6  3F40               	moviw [0]fsr1
  5526  00F7  00C2               	movwf	??_sprintf^(0+128)
  5527  00F8  3F41               	moviw [1]fsr1
  5528  00F9  00C3               	movwf	(??_sprintf^(0+128)+1)
  5529  00FA  3F42               	moviw [2]fsr1
  5530  00FB  00C4               	movwf	(??_sprintf^(0+128)+2)
  5531  00FC  3F43               	moviw [3]fsr1
  5532  00FD  00C5               	movwf	(??_sprintf^(0+128)+3)
  5533  00FE  300F               	movlw	15
  5534  00FF                     u6335:	
  5535  00FF  36C5               	lsrf	(??_sprintf^(0+128)+3),f
  5536  0100  0CC4               	rrf	(??_sprintf^(0+128)+2),f
  5537  0101  0CC3               	rrf	(??_sprintf^(0+128)+1),f
  5538  0102  0CC2               	rrf	??_sprintf^(0+128),f
  5539  0103  0B89               	decfsz	9,f
  5540  0104  28FF               	goto	u6335
  5541  0105  30FF               	movlw	255
  5542  0106  0542               	andwf	??_sprintf^(0+128),w
  5543  0107  00C6               	movwf	(??_sprintf+4)^(0+128)
  5544  0108  3000               	movlw	0
  5545  0109  0543               	andwf	(??_sprintf+1)^(0+128),w
  5546  010A  00C7               	movwf	(??_sprintf+5)^(0+128)
  5547  010B  0846               	movf	(??_sprintf+4)^(0+128),w
  5548  010C  3E82               	addlw	130
  5549  010D  00D6               	movwf	sprintf@eexp^(0+128)
  5550  010E  30FF               	movlw	255
  5551  010F  3D47               	addwfc	(??_sprintf+5)^(0+128),w
  5552  0110  00D7               	movwf	(sprintf@eexp+1)^(0+128)
  5553                           
  5554                           ;doprnt.c: 857: eexp--;
  5555  0111  30FF               	movlw	255
  5556  0112  07D6               	addwf	sprintf@eexp^(0+128),f
  5557  0113  30FF               	movlw	255
  5558  0114  3DD7               	addwfc	(sprintf@eexp+1)^(0+128),f
  5559                           
  5560                           ;doprnt.c: 858: eexp *= 3;
  5561  0115  3003               	movlw	3
  5562  0116  0020               	movlb	0	; select bank0
  5563  0117  00B0               	movwf	___wmul@multiplier
  5564  0118  3000               	movlw	0
  5565  0119  00B1               	movwf	___wmul@multiplier+1
  5566  011A  0021               	movlb	1	; select bank1
  5567  011B  0857               	movf	(sprintf@eexp+1)^(0+128),w
  5568  011C  0020               	movlb	0	; select bank0
  5569  011D  00B3               	movwf	___wmul@multiplicand+1
  5570  011E  0021               	movlb	1	; select bank1
  5571  011F  0856               	movf	sprintf@eexp^(0+128),w
  5572  0120  0020               	movlb	0	; select bank0
  5573  0121  00B2               	movwf	___wmul@multiplicand
  5574  0122  319D  25A7  3180   	fcall	___wmul
  5575  0125  0020               	movlb	0	; select bank0
  5576  0126  0831               	movf	?___wmul+1,w
  5577  0127  0021               	movlb	1	; select bank1
  5578  0128  00D7               	movwf	(sprintf@eexp+1)^(0+128)
  5579  0129  0020               	movlb	0	; select bank0
  5580  012A  0830               	movf	?___wmul,w
  5581  012B  0021               	movlb	1	; select bank1
  5582  012C  00D6               	movwf	sprintf@eexp^(0+128)
  5583                           
  5584                           ;doprnt.c: 859: eexp /= 10;
  5585  012D  300A               	movlw	10
  5586  012E  0020               	movlb	0	; select bank0
  5587  012F  00A7               	movwf	___awdiv@divisor
  5588  0130  3000               	movlw	0
  5589  0131  00A8               	movwf	___awdiv@divisor+1
  5590  0132  0021               	movlb	1	; select bank1
  5591  0133  0857               	movf	(sprintf@eexp+1)^(0+128),w
  5592  0134  0020               	movlb	0	; select bank0
  5593  0135  00AA               	movwf	___awdiv@dividend+1
  5594  0136  0021               	movlb	1	; select bank1
  5595  0137  0856               	movf	sprintf@eexp^(0+128),w
  5596  0138  0020               	movlb	0	; select bank0
  5597  0139  00A9               	movwf	___awdiv@dividend
  5598  013A  3192  2223  3180   	fcall	___awdiv
  5599  013D  0020               	movlb	0	; select bank0
  5600  013E  0828               	movf	?___awdiv+1,w
  5601  013F  0021               	movlb	1	; select bank1
  5602  0140  00D7               	movwf	(sprintf@eexp+1)^(0+128)
  5603  0141  0020               	movlb	0	; select bank0
  5604  0142  0827               	movf	?___awdiv,w
  5605  0143  0021               	movlb	1	; select bank1
  5606  0144  00D6               	movwf	sprintf@eexp^(0+128)
  5607                           
  5608                           ;doprnt.c: 860: if(eexp < 0)
  5609  0145  1FD7               	btfss	(sprintf@eexp+1)^(0+128),7
  5610  0146  294B               	goto	l4964
  5611                           
  5612                           ;doprnt.c: 861: eexp--;
  5613  0147  30FF               	movlw	255
  5614  0148  07D6               	addwf	sprintf@eexp^(0+128),f
  5615  0149  30FF               	movlw	255
  5616  014A  3DD7               	addwfc	(sprintf@eexp+1)^(0+128),f
  5617  014B                     l4964:	
  5618                           
  5619                           ;doprnt.c: 865: tmpval.integ = scale(-eexp);
  5620  014B  0356               	decf	sprintf@eexp^(0+128),w
  5621  014C  3AFF               	xorlw	255
  5622  014D  3184  24D7  3180   	fcall	_scale
  5623  0150  0021               	movlb	1	; select bank1
  5624  0151  0820               	movf	?_scale^(0+128),w
  5625  0152  00D8               	movwf	sprintf@tmpval^(0+128)
  5626  0153  0821               	movf	(?_scale+1)^(0+128),w
  5627  0154  00D9               	movwf	(sprintf@tmpval+1)^(0+128)
  5628  0155  0822               	movf	(?_scale+2)^(0+128),w
  5629  0156  00DA               	movwf	(sprintf@tmpval+2)^(0+128)
  5630                           
  5631                           ;doprnt.c: 866: tmpval.integ *= fval;
  5632  0157  085D               	movf	sprintf@fval^(0+128),w
  5633  0158  0020               	movlb	0	; select bank0
  5634  0159  00DF               	movwf	___ftmul@f1
  5635  015A  0021               	movlb	1	; select bank1
  5636  015B  085E               	movf	(sprintf@fval+1)^(0+128),w
  5637  015C  0020               	movlb	0	; select bank0
  5638  015D  00E0               	movwf	___ftmul@f1+1
  5639  015E  0021               	movlb	1	; select bank1
  5640  015F  085F               	movf	(sprintf@fval+2)^(0+128),w
  5641  0160  0020               	movlb	0	; select bank0
  5642  0161  00E1               	movwf	___ftmul@f1+2
  5643  0162  0021               	movlb	1	; select bank1
  5644  0163  0858               	movf	sprintf@tmpval^(0+128),w
  5645  0164  0020               	movlb	0	; select bank0
  5646  0165  00E2               	movwf	___ftmul@f2
  5647  0166  0021               	movlb	1	; select bank1
  5648  0167  0859               	movf	(sprintf@tmpval+1)^(0+128),w
  5649  0168  0020               	movlb	0	; select bank0
  5650  0169  00E3               	movwf	___ftmul@f2+1
  5651  016A  0021               	movlb	1	; select bank1
  5652  016B  085A               	movf	(sprintf@tmpval+2)^(0+128),w
  5653  016C  0020               	movlb	0	; select bank0
  5654  016D  00E4               	movwf	___ftmul@f2+2
  5655  016E  3195  2543  3180   	fcall	___ftmul
  5656  0171  0020               	movlb	0	; select bank0
  5657  0172  085F               	movf	?___ftmul,w
  5658  0173  0021               	movlb	1	; select bank1
  5659  0174  00D8               	movwf	sprintf@tmpval^(0+128)
  5660  0175  0020               	movlb	0	; select bank0
  5661  0176  0860               	movf	?___ftmul+1,w
  5662  0177  0021               	movlb	1	; select bank1
  5663  0178  00D9               	movwf	(sprintf@tmpval+1)^(0+128)
  5664  0179  0020               	movlb	0	; select bank0
  5665  017A  0861               	movf	?___ftmul+2,w
  5666  017B  0021               	movlb	1	; select bank1
  5667  017C  00DA               	movwf	(sprintf@tmpval+2)^(0+128)
  5668                           
  5669                           ;doprnt.c: 867: if(tmpval.integ < 1.0)
  5670  017D  0858               	movf	sprintf@tmpval^(0+128),w
  5671  017E  0020               	movlb	0	; select bank0
  5672  017F  00A0               	movwf	___ftge@ff1
  5673  0180  0021               	movlb	1	; select bank1
  5674  0181  0859               	movf	(sprintf@tmpval+1)^(0+128),w
  5675  0182  0020               	movlb	0	; select bank0
  5676  0183  00A1               	movwf	___ftge@ff1+1
  5677  0184  0021               	movlb	1	; select bank1
  5678  0185  085A               	movf	(sprintf@tmpval+2)^(0+128),w
  5679  0186  0020               	movlb	0	; select bank0
  5680  0187  00A2               	movwf	___ftge@ff1+2
  5681  0188  3000               	movlw	0
  5682  0189  00A3               	movwf	___ftge@ff2
  5683  018A  3080               	movlw	128
  5684  018B  00A4               	movwf	___ftge@ff2+1
  5685  018C  303F               	movlw	63
  5686  018D  00A5               	movwf	___ftge@ff2+2
  5687  018E  3190  204B  3180   	fcall	___ftge
  5688  0191  1803               	btfsc	3,0
  5689  0192  2998               	goto	l4972
  5690                           
  5691                           ;doprnt.c: 868: eexp--;
  5692  0193  30FF               	movlw	255
  5693  0194  0021               	movlb	1	; select bank1
  5694  0195  07D6               	addwf	sprintf@eexp^(0+128),f
  5695  0196  30FF               	movlw	255
  5696  0197  29B3               	goto	L1
  5697  0198                     l4972:	
  5698                           
  5699                           ;doprnt.c: 869: else if(tmpval.integ >= 10.0)
  5700  0198  0021               	movlb	1	; select bank1
  5701  0199  0858               	movf	sprintf@tmpval^(0+128),w
  5702  019A  0020               	movlb	0	; select bank0
  5703  019B  00A0               	movwf	___ftge@ff1
  5704  019C  0021               	movlb	1	; select bank1
  5705  019D  0859               	movf	(sprintf@tmpval+1)^(0+128),w
  5706  019E  0020               	movlb	0	; select bank0
  5707  019F  00A1               	movwf	___ftge@ff1+1
  5708  01A0  0021               	movlb	1	; select bank1
  5709  01A1  085A               	movf	(sprintf@tmpval+2)^(0+128),w
  5710  01A2  0020               	movlb	0	; select bank0
  5711  01A3  00A2               	movwf	___ftge@ff1+2
  5712  01A4  3000               	movlw	0
  5713  01A5  00A3               	movwf	___ftge@ff2
  5714  01A6  3020               	movlw	32
  5715  01A7  00A4               	movwf	___ftge@ff2+1
  5716  01A8  3041               	movlw	65
  5717  01A9  00A5               	movwf	___ftge@ff2+2
  5718  01AA  3190  204B  3180   	fcall	___ftge
  5719  01AD  1C03               	btfss	3,0
  5720  01AE  29B4               	goto	l437
  5721                           
  5722                           ;doprnt.c: 870: eexp++;
  5723  01AF  3001               	movlw	1
  5724  01B0  0021               	movlb	1	; select bank1
  5725  01B1  07D6               	addwf	sprintf@eexp^(0+128),f
  5726  01B2  3000               	movlw	0
  5727  01B3                     L1:	
  5728  01B3  3DD7               	addwfc	(sprintf@eexp+1)^(0+128),f
  5729  01B4                     l437:	
  5730                           
  5731                           ;doprnt.c: 871: };doprnt.c: 1131: if(prec <= 12)
  5732  01B4  0021               	movlb	1	; select bank1
  5733  01B5  0851               	movf	(sprintf@prec+1)^(0+128),w
  5734  01B6  3A80               	xorlw	128
  5735  01B7  00C2               	movwf	??_sprintf^(0+128)
  5736  01B8  3080               	movlw	128
  5737  01B9  0242               	subwf	??_sprintf^(0+128),w
  5738  01BA  1D03               	skipz
  5739  01BB  29BE               	goto	u6375
  5740  01BC  300D               	movlw	13
  5741  01BD  0250               	subwf	sprintf@prec^(0+128),w
  5742  01BE                     u6375:	
  5743  01BE  1803               	skipnc
  5744  01BF  29EC               	goto	l4978
  5745                           
  5746                           ;doprnt.c: 1132: fval += fround((unsigned int)prec);
  5747  01C0  0021               	movlb	1	; select bank1
  5748  01C1  0850               	movf	sprintf@prec^(0+128),w
  5749  01C2  318C  2441  3180   	fcall	_fround
  5750  01C5  0021               	movlb	1	; select bank1
  5751  01C6  0820               	movf	?_fround^(0+128),w
  5752  01C7  0020               	movlb	0	; select bank0
  5753  01C8  00B6               	movwf	___ftadd@f1
  5754  01C9  0021               	movlb	1	; select bank1
  5755  01CA  0821               	movf	(?_fround+1)^(0+128),w
  5756  01CB  0020               	movlb	0	; select bank0
  5757  01CC  00B7               	movwf	___ftadd@f1+1
  5758  01CD  0021               	movlb	1	; select bank1
  5759  01CE  0822               	movf	(?_fround+2)^(0+128),w
  5760  01CF  0020               	movlb	0	; select bank0
  5761  01D0  00B8               	movwf	___ftadd@f1+2
  5762  01D1  0021               	movlb	1	; select bank1
  5763  01D2  085D               	movf	sprintf@fval^(0+128),w
  5764  01D3  0020               	movlb	0	; select bank0
  5765  01D4  00B9               	movwf	___ftadd@f2
  5766  01D5  0021               	movlb	1	; select bank1
  5767  01D6  085E               	movf	(sprintf@fval+1)^(0+128),w
  5768  01D7  0020               	movlb	0	; select bank0
  5769  01D8  00BA               	movwf	___ftadd@f2+1
  5770  01D9  0021               	movlb	1	; select bank1
  5771  01DA  085F               	movf	(sprintf@fval+2)^(0+128),w
  5772  01DB  0020               	movlb	0	; select bank0
  5773  01DC  00BB               	movwf	___ftadd@f2+2
  5774  01DD  3195  25F7  3180   	fcall	___ftadd
  5775  01E0  0020               	movlb	0	; select bank0
  5776  01E1  0836               	movf	?___ftadd,w
  5777  01E2  0021               	movlb	1	; select bank1
  5778  01E3  00DD               	movwf	sprintf@fval^(0+128)
  5779  01E4  0020               	movlb	0	; select bank0
  5780  01E5  0837               	movf	?___ftadd+1,w
  5781  01E6  0021               	movlb	1	; select bank1
  5782  01E7  00DE               	movwf	(sprintf@fval+1)^(0+128)
  5783  01E8  0020               	movlb	0	; select bank0
  5784  01E9  0838               	movf	?___ftadd+2,w
  5785  01EA  0021               	movlb	1	; select bank1
  5786  01EB  00DF               	movwf	(sprintf@fval+2)^(0+128)
  5787  01EC                     l4978:	
  5788                           
  5789                           ;doprnt.c: 1135: if((eexp > 9)||(fval != 0 && (unsigned long)fval == 0 && eexp > 1)) {
  5790  01EC  0021               	movlb	1	; select bank1
  5791  01ED  0857               	movf	(sprintf@eexp+1)^(0+128),w
  5792  01EE  3A80               	xorlw	128
  5793  01EF  00C2               	movwf	??_sprintf^(0+128)
  5794  01F0  3080               	movlw	128
  5795  01F1  0242               	subwf	??_sprintf^(0+128),w
  5796  01F2  1D03               	skipz
  5797  01F3  29F6               	goto	u6385
  5798  01F4  300A               	movlw	10
  5799  01F5  0256               	subwf	sprintf@eexp^(0+128),w
  5800  01F6                     u6385:	
  5801  01F6  1803               	skipnc
  5802  01F7  2A19               	goto	l4986
  5803  01F8  0021               	movlb	1	; select bank1
  5804  01F9  085F               	movf	(sprintf@fval+2)^(0+128),w
  5805  01FA  045E               	iorwf	(sprintf@fval+1)^(0+128),w
  5806  01FB  045D               	iorwf	sprintf@fval^(0+128),w
  5807  01FC  1903               	skipnz
  5808  01FD  2A73               	goto	l5000
  5809  01FE  085D               	movf	sprintf@fval^(0+128),w
  5810  01FF  00AB               	movwf	___fttol@f1^(0+128)
  5811  0200  085E               	movf	(sprintf@fval+1)^(0+128),w
  5812  0201  00AC               	movwf	(___fttol@f1+1)^(0+128)
  5813  0202  085F               	movf	(sprintf@fval+2)^(0+128),w
  5814  0203  00AD               	movwf	(___fttol@f1+2)^(0+128)
  5815  0204  3192  22DA  3180   	fcall	___fttol
  5816  0207  0021               	movlb	1	; select bank1
  5817  0208  082E               	movf	(?___fttol+3)^(0+128),w
  5818  0209  042D               	iorwf	(?___fttol+2)^(0+128),w
  5819  020A  042C               	iorwf	(?___fttol+1)^(0+128),w
  5820  020B  042B               	iorwf	?___fttol^(0+128),w
  5821  020C  1D03               	skipz
  5822  020D  2A73               	goto	l5000
  5823  020E  0857               	movf	(sprintf@eexp+1)^(0+128),w
  5824  020F  3A80               	xorlw	128
  5825  0210  00C2               	movwf	??_sprintf^(0+128)
  5826  0211  3080               	movlw	128
  5827  0212  0242               	subwf	??_sprintf^(0+128),w
  5828  0213  1D03               	skipz
  5829  0214  2A17               	goto	u6415
  5830  0215  3002               	movlw	2
  5831  0216  0256               	subwf	sprintf@eexp^(0+128),w
  5832  0217                     u6415:	
  5833  0217  1C03               	skipc
  5834  0218  2A73               	goto	l5000
  5835  0219                     l4986:	
  5836                           
  5837                           ;doprnt.c: 1139: if(tmpval.integ < 4.294967296){
  5838  0219  0021               	movlb	1	; select bank1
  5839  021A  0858               	movf	sprintf@tmpval^(0+128),w
  5840  021B  0020               	movlb	0	; select bank0
  5841  021C  00A0               	movwf	___ftge@ff1
  5842  021D  0021               	movlb	1	; select bank1
  5843  021E  0859               	movf	(sprintf@tmpval+1)^(0+128),w
  5844  021F  0020               	movlb	0	; select bank0
  5845  0220  00A1               	movwf	___ftge@ff1+1
  5846  0221  0021               	movlb	1	; select bank1
  5847  0222  085A               	movf	(sprintf@tmpval+2)^(0+128),w
  5848  0223  0020               	movlb	0	; select bank0
  5849  0224  00A2               	movwf	___ftge@ff1+2
  5850  0225  3070               	movlw	112
  5851  0226  00A3               	movwf	___ftge@ff2
  5852  0227  3089               	movlw	137
  5853  0228  00A4               	movwf	___ftge@ff2+1
  5854  0229  3040               	movlw	64
  5855  022A  00A5               	movwf	___ftge@ff2+2
  5856  022B  3190  204B  3180   	fcall	___ftge
  5857  022E  1803               	btfsc	3,0
  5858  022F  2A32               	goto	l4990
  5859                           
  5860                           ;doprnt.c: 1140: eexp -= (sizeof dpowers/sizeof dpowers[0])-1;
  5861  0230  30F7               	movlw	247
  5862  0231  2A33               	goto	L2
  5863  0232                     l4990:	
  5864                           ;doprnt.c: 1141: }else{
  5865                           
  5866                           
  5867                           ;doprnt.c: 1142: eexp -= (sizeof dpowers/sizeof dpowers[0])-2;
  5868  0232  30F8               	movlw	248
  5869  0233                     L2:	
  5870  0233  0021               	movlb	1	; select bank1
  5871  0234  07D6               	addwf	sprintf@eexp^(0+128),f
  5872  0235  30FF               	movlw	255
  5873  0236  3DD7               	addwfc	(sprintf@eexp+1)^(0+128),f
  5874                           
  5875                           ;doprnt.c: 1143: };doprnt.c: 1144: tmpval.integ = scale(eexp);
  5876  0237  0856               	movf	sprintf@eexp^(0+128),w
  5877  0238  3184  24D7  3180   	fcall	_scale
  5878  023B  0021               	movlb	1	; select bank1
  5879  023C  0820               	movf	?_scale^(0+128),w
  5880  023D  00D8               	movwf	sprintf@tmpval^(0+128)
  5881  023E  0821               	movf	(?_scale+1)^(0+128),w
  5882  023F  00D9               	movwf	(sprintf@tmpval+1)^(0+128)
  5883  0240  0822               	movf	(?_scale+2)^(0+128),w
  5884  0241  00DA               	movwf	(sprintf@tmpval+2)^(0+128)
  5885                           
  5886                           ;doprnt.c: 1145: val = ((sizeof(double)== 3) ? _tdiv_to_l_(fval,tmpval.integ) : _div_to_
      +                          l_(fval,tmpval.integ));
  5887  0242  085D               	movf	sprintf@fval^(0+128),w
  5888  0243  0020               	movlb	0	; select bank0
  5889  0244  00A0               	movwf	__tdiv_to_l_@f1
  5890  0245  0021               	movlb	1	; select bank1
  5891  0246  085E               	movf	(sprintf@fval+1)^(0+128),w
  5892  0247  0020               	movlb	0	; select bank0
  5893  0248  00A1               	movwf	__tdiv_to_l_@f1+1
  5894  0249  0021               	movlb	1	; select bank1
  5895  024A  085F               	movf	(sprintf@fval+2)^(0+128),w
  5896  024B  0020               	movlb	0	; select bank0
  5897  024C  00A2               	movwf	__tdiv_to_l_@f1+2
  5898  024D  0021               	movlb	1	; select bank1
  5899  024E  0858               	movf	sprintf@tmpval^(0+128),w
  5900  024F  0020               	movlb	0	; select bank0
  5901  0250  00A3               	movwf	__tdiv_to_l_@f2
  5902  0251  0021               	movlb	1	; select bank1
  5903  0252  0859               	movf	(sprintf@tmpval+1)^(0+128),w
  5904  0253  0020               	movlb	0	; select bank0
  5905  0254  00A4               	movwf	__tdiv_to_l_@f2+1
  5906  0255  0021               	movlb	1	; select bank1
  5907  0256  085A               	movf	(sprintf@tmpval+2)^(0+128),w
  5908  0257  0020               	movlb	0	; select bank0
  5909  0258  00A5               	movwf	__tdiv_to_l_@f2+2
  5910  0259  3188  2003  3180   	fcall	__tdiv_to_l_
  5911  025C  0020               	movlb	0	; select bank0
  5912  025D  0823               	movf	?__tdiv_to_l_+3,w
  5913  025E  0021               	movlb	1	; select bank1
  5914  025F  00D5               	movwf	(sprintf@val+3)^(0+128)
  5915  0260  0020               	movlb	0	; select bank0
  5916  0261  0822               	movf	?__tdiv_to_l_+2,w
  5917  0262  0021               	movlb	1	; select bank1
  5918  0263  00D4               	movwf	(sprintf@val+2)^(0+128)
  5919  0264  0020               	movlb	0	; select bank0
  5920  0265  0821               	movf	?__tdiv_to_l_+1,w
  5921  0266  0021               	movlb	1	; select bank1
  5922  0267  00D3               	movwf	(sprintf@val+1)^(0+128)
  5923  0268  0020               	movlb	0	; select bank0
  5924  0269  0820               	movf	?__tdiv_to_l_,w
  5925  026A  0021               	movlb	1	; select bank1
  5926  026B  00D2               	movwf	sprintf@val^(0+128)
  5927                           
  5928                           ;doprnt.c: 1148: fval = 0.0;
  5929  026C  3000               	movlw	0
  5930  026D  00DD               	movwf	sprintf@fval^(0+128)
  5931  026E  3000               	movlw	0
  5932  026F  00DE               	movwf	(sprintf@fval+1)^(0+128)
  5933  0270  3000               	movlw	0
  5934  0271  00DF               	movwf	(sprintf@fval+2)^(0+128)
  5935                           
  5936                           ;doprnt.c: 1149: } else {
  5937  0272  2ABC               	goto	l5004
  5938  0273                     l5000:	
  5939                           
  5940                           ;doprnt.c: 1150: val = (unsigned long)fval;
  5941  0273  0021               	movlb	1	; select bank1
  5942  0274  085D               	movf	sprintf@fval^(0+128),w
  5943  0275  00AB               	movwf	___fttol@f1^(0+128)
  5944  0276  085E               	movf	(sprintf@fval+1)^(0+128),w
  5945  0277  00AC               	movwf	(___fttol@f1+1)^(0+128)
  5946  0278  085F               	movf	(sprintf@fval+2)^(0+128),w
  5947  0279  00AD               	movwf	(___fttol@f1+2)^(0+128)
  5948  027A  3192  22DA  3180   	fcall	___fttol
  5949  027D  0021               	movlb	1	; select bank1
  5950  027E  082E               	movf	(?___fttol+3)^(0+128),w
  5951  027F  00D5               	movwf	(sprintf@val+3)^(0+128)
  5952  0280  082D               	movf	(?___fttol+2)^(0+128),w
  5953  0281  00D4               	movwf	(sprintf@val+2)^(0+128)
  5954  0282  082C               	movf	(?___fttol+1)^(0+128),w
  5955  0283  00D3               	movwf	(sprintf@val+1)^(0+128)
  5956  0284  082B               	movf	?___fttol^(0+128),w
  5957  0285  00D2               	movwf	sprintf@val^(0+128)
  5958                           
  5959                           ;doprnt.c: 1151: fval -= (double)val;
  5960  0286  0855               	movf	(sprintf@val+3)^(0+128),w
  5961  0287  0020               	movlb	0	; select bank0
  5962  0288  00AB               	movwf	___lltoft@c+3
  5963  0289  0021               	movlb	1	; select bank1
  5964  028A  0854               	movf	(sprintf@val+2)^(0+128),w
  5965  028B  0020               	movlb	0	; select bank0
  5966  028C  00AA               	movwf	___lltoft@c+2
  5967  028D  0021               	movlb	1	; select bank1
  5968  028E  0853               	movf	(sprintf@val+1)^(0+128),w
  5969  028F  0020               	movlb	0	; select bank0
  5970  0290  00A9               	movwf	___lltoft@c+1
  5971  0291  0021               	movlb	1	; select bank1
  5972  0292  0852               	movf	sprintf@val^(0+128),w
  5973  0293  0020               	movlb	0	; select bank0
  5974  0294  00A8               	movwf	___lltoft@c
  5975  0295  319F  2709  3180   	fcall	___lltoft
  5976  0298  0020               	movlb	0	; select bank0
  5977  0299  0828               	movf	?___lltoft,w
  5978  029A  00C3               	movwf	___ftsub@f2
  5979  029B  0829               	movf	?___lltoft+1,w
  5980  029C  00C4               	movwf	___ftsub@f2+1
  5981  029D  082A               	movf	?___lltoft+2,w
  5982  029E  00C5               	movwf	___ftsub@f2+2
  5983  029F  0021               	movlb	1	; select bank1
  5984  02A0  085D               	movf	sprintf@fval^(0+128),w
  5985  02A1  0020               	movlb	0	; select bank0
  5986  02A2  00C6               	movwf	___ftsub@f1
  5987  02A3  0021               	movlb	1	; select bank1
  5988  02A4  085E               	movf	(sprintf@fval+1)^(0+128),w
  5989  02A5  0020               	movlb	0	; select bank0
  5990  02A6  00C7               	movwf	___ftsub@f1+1
  5991  02A7  0021               	movlb	1	; select bank1
  5992  02A8  085F               	movf	(sprintf@fval+2)^(0+128),w
  5993  02A9  0020               	movlb	0	; select bank0
  5994  02AA  00C8               	movwf	___ftsub@f1+2
  5995  02AB  319E  2619  3180   	fcall	___ftsub
  5996  02AE  0020               	movlb	0	; select bank0
  5997  02AF  0843               	movf	?___ftsub,w
  5998  02B0  0021               	movlb	1	; select bank1
  5999  02B1  00DD               	movwf	sprintf@fval^(0+128)
  6000  02B2  0020               	movlb	0	; select bank0
  6001  02B3  0844               	movf	?___ftsub+1,w
  6002  02B4  0021               	movlb	1	; select bank1
  6003  02B5  00DE               	movwf	(sprintf@fval+1)^(0+128)
  6004  02B6  0020               	movlb	0	; select bank0
  6005  02B7  0845               	movf	?___ftsub+2,w
  6006  02B8  0021               	movlb	1	; select bank1
  6007  02B9  00DF               	movwf	(sprintf@fval+2)^(0+128)
  6008                           
  6009                           ;doprnt.c: 1152: eexp = 0;
  6010  02BA  01D6               	clrf	sprintf@eexp^(0+128)
  6011  02BB  01D7               	clrf	(sprintf@eexp+1)^(0+128)
  6012  02BC                     l5004:	
  6013                           
  6014                           ;doprnt.c: 1153: };doprnt.c: 1155: for(c = 1 ; c != (sizeof dpowers/sizeof dpowers[0]) ;
      +                           c++)
  6015  02BC  01E0               	clrf	sprintf@c^(0+128)
  6016  02BD  0AE0               	incf	sprintf@c^(0+128),f
  6017  02BE  300A               	movlw	10
  6018  02BF  0660               	xorwf	sprintf@c^(0+128),w
  6019  02C0  1903               	btfsc	3,2
  6020  02C1  2AEF               	goto	l5016
  6021  02C2                     l5010:	
  6022                           
  6023                           ;doprnt.c: 1156: if(val < dpowers[c])
  6024  02C2  0860               	movf	sprintf@c^(0+128),w
  6025  02C3  00C2               	movwf	??_sprintf^(0+128)
  6026  02C4  01C3               	clrf	(??_sprintf^(0+128)+1)
  6027  02C5  35C2               	lslf	??_sprintf^(0+128),f
  6028  02C6  0DC3               	rlf	(??_sprintf^(0+128)+1),f
  6029  02C7  35C2               	lslf	??_sprintf^(0+128),f
  6030  02C8  0DC3               	rlf	(??_sprintf^(0+128)+1),f
  6031  02C9  3000               	movlw	low (_dpowers| (0+32768))
  6032  02CA  0742               	addwf	??_sprintf^(0+128),w
  6033  02CB  0084               	movwf	4
  6034  02CC  3098               	movlw	high (_dpowers| (0+32768))
  6035  02CD  3D43               	addwfc	(??_sprintf+1)^(0+128),w
  6036  02CE  0085               	movwf	5
  6037  02CF  3F00               	moviw [0]fsr0
  6038  02D0  00C4               	movwf	(??_sprintf+2)^(0+128)
  6039  02D1  3F01               	moviw [1]fsr0
  6040  02D2  00C5               	movwf	((??_sprintf+2)^(0+128)+1)
  6041  02D3  3F02               	moviw [2]fsr0
  6042  02D4  00C6               	movwf	((??_sprintf+2)^(0+128)+2)
  6043  02D5  3F03               	moviw [3]fsr0
  6044  02D6  00C7               	movwf	((??_sprintf+2)^(0+128)+3)
  6045  02D7  0847               	movf	(??_sprintf+5)^(0+128),w
  6046  02D8  0255               	subwf	(sprintf@val+3)^(0+128),w
  6047  02D9  1D03               	skipz
  6048  02DA  2AE5               	goto	u6445
  6049  02DB  0846               	movf	(??_sprintf+4)^(0+128),w
  6050  02DC  0254               	subwf	(sprintf@val+2)^(0+128),w
  6051  02DD  1D03               	skipz
  6052  02DE  2AE5               	goto	u6445
  6053  02DF  0845               	movf	(??_sprintf+3)^(0+128),w
  6054  02E0  0253               	subwf	(sprintf@val+1)^(0+128),w
  6055  02E1  1D03               	skipz
  6056  02E2  2AE5               	goto	u6445
  6057  02E3  0844               	movf	(??_sprintf+2)^(0+128),w
  6058  02E4  0252               	subwf	sprintf@val^(0+128),w
  6059  02E5                     u6445:	
  6060  02E5  1C03               	btfss	3,0
  6061  02E6  2AEF               	goto	l5016
  6062                           
  6063                           ;doprnt.c: 1157: break;
  6064  02E7  3001               	movlw	1
  6065  02E8  00C2               	movwf	??_sprintf^(0+128)
  6066  02E9  0842               	movf	??_sprintf^(0+128),w
  6067  02EA  07E0               	addwf	sprintf@c^(0+128),f
  6068  02EB  300A               	movlw	10
  6069  02EC  0660               	xorwf	sprintf@c^(0+128),w
  6070  02ED  1D03               	btfss	3,2
  6071  02EE  2AC2               	goto	l5010
  6072  02EF                     l5016:	
  6073                           
  6074                           ;doprnt.c: 1194: {;doprnt.c: 1207: if(flag & 0x03)
  6075  02EF  3003               	movlw	3
  6076  02F0  054C               	andwf	sprintf@flag^(0+128),w
  6077  02F1  00C2               	movwf	??_sprintf^(0+128)
  6078  02F2  3000               	movlw	0
  6079  02F3  054D               	andwf	(sprintf@flag+1)^(0+128),w
  6080  02F4  00C3               	movwf	(??_sprintf+1)^(0+128)
  6081  02F5  0842               	movf	??_sprintf^(0+128),w
  6082  02F6  0443               	iorwf	(??_sprintf^(0+128)+1),w
  6083  02F7  1903               	btfsc	3,2
  6084  02F8  2B05               	goto	l5030
  6085                           
  6086                           ;doprnt.c: 1209: ((*sp++ = ('-')));
  6087  02F9  302D               	movlw	45
  6088  02FA                     L6:	
  6089  02FA  00C2               	movwf	??_sprintf^(0+128)
  6090  02FB  085C               	movf	sprintf@sp^(0+128),w
  6091  02FC  0086               	movwf	6
  6092  02FD  3001               	movlw	1	; select bank2/3
  6093  02FE  0087               	movwf	7
  6094  02FF  0842               	movf	??_sprintf^(0+128),w
  6095  0300  0081               	movwf	1
  6096  0301  3001               	movlw	1
  6097  0302  00C2               	movwf	??_sprintf^(0+128)
  6098  0303  0842               	movf	??_sprintf^(0+128),w
  6099  0304  07DC               	addwf	sprintf@sp^(0+128),f
  6100  0305                     l5030:	
  6101  0305  3001               	movlw	1
  6102  0306  02E0               	subwf	sprintf@c^(0+128),f
  6103  0307  0A60               	incf	sprintf@c^(0+128),w
  6104  0308  1903               	btfsc	3,2
  6105  0309  2B83               	goto	l5038
  6106                           
  6107                           ;doprnt.c: 1219: {;doprnt.c: 1220: tmpval.vd = val/dpowers[c];
  6108                           
  6109                           ;doprnt.c: 1214: };doprnt.c: 1215: while(c--) {
  6110  030A  0860               	movf	sprintf@c^(0+128),w
  6111  030B  00C2               	movwf	??_sprintf^(0+128)
  6112  030C  01C3               	clrf	(??_sprintf^(0+128)+1)
  6113  030D  35C2               	lslf	??_sprintf^(0+128),f
  6114  030E  0DC3               	rlf	(??_sprintf^(0+128)+1),f
  6115  030F  35C2               	lslf	??_sprintf^(0+128),f
  6116  0310  0DC3               	rlf	(??_sprintf^(0+128)+1),f
  6117  0311  3000               	movlw	low (_dpowers| (0+32768))
  6118  0312  0742               	addwf	??_sprintf^(0+128),w
  6119  0313  0084               	movwf	4
  6120  0314  3098               	movlw	high (_dpowers| (0+32768))
  6121  0315  3D43               	addwfc	(??_sprintf+1)^(0+128),w
  6122  0316  0085               	movwf	5
  6123  0317  3F00               	moviw [0]fsr0
  6124  0318  0020               	movlb	0	; select bank0
  6125  0319  00A0               	movwf	___lldiv@divisor
  6126  031A  3F01               	moviw [1]fsr0
  6127  031B  00A1               	movwf	___lldiv@divisor+1
  6128  031C  3F02               	moviw [2]fsr0
  6129  031D  00A2               	movwf	___lldiv@divisor+2
  6130  031E  3F03               	moviw [3]fsr0
  6131  031F  00A3               	movwf	___lldiv@divisor+3
  6132  0320  0021               	movlb	1	; select bank1
  6133  0321  0855               	movf	(sprintf@val+3)^(0+128),w
  6134  0322  0020               	movlb	0	; select bank0
  6135  0323  00A7               	movwf	___lldiv@dividend+3
  6136  0324  0021               	movlb	1	; select bank1
  6137  0325  0854               	movf	(sprintf@val+2)^(0+128),w
  6138  0326  0020               	movlb	0	; select bank0
  6139  0327  00A6               	movwf	___lldiv@dividend+2
  6140  0328  0021               	movlb	1	; select bank1
  6141  0329  0853               	movf	(sprintf@val+1)^(0+128),w
  6142  032A  0020               	movlb	0	; select bank0
  6143  032B  00A5               	movwf	___lldiv@dividend+1
  6144  032C  0021               	movlb	1	; select bank1
  6145  032D  0852               	movf	sprintf@val^(0+128),w
  6146  032E  0020               	movlb	0	; select bank0
  6147  032F  00A4               	movwf	___lldiv@dividend
  6148  0330  3187  279D  3180   	fcall	___lldiv
  6149  0333  0020               	movlb	0	; select bank0
  6150  0334  0823               	movf	?___lldiv+3,w
  6151  0335  0021               	movlb	1	; select bank1
  6152  0336  00DB               	movwf	(sprintf@tmpval+3)^(0+128)
  6153  0337  0020               	movlb	0	; select bank0
  6154  0338  0822               	movf	?___lldiv+2,w
  6155  0339  0021               	movlb	1	; select bank1
  6156  033A  00DA               	movwf	(sprintf@tmpval+2)^(0+128)
  6157  033B  0020               	movlb	0	; select bank0
  6158  033C  0821               	movf	?___lldiv+1,w
  6159  033D  0021               	movlb	1	; select bank1
  6160  033E  00D9               	movwf	(sprintf@tmpval+1)^(0+128)
  6161  033F  0020               	movlb	0	; select bank0
  6162  0340  0820               	movf	?___lldiv,w
  6163  0341  0021               	movlb	1	; select bank1
  6164  0342  00D8               	movwf	sprintf@tmpval^(0+128)
  6165                           
  6166                           ;doprnt.c: 1221: tmpval.vd %= 10;
  6167  0343  3000               	movlw	0
  6168  0344  0020               	movlb	0	; select bank0
  6169  0345  00A3               	movwf	___llmod@divisor+3
  6170  0346  3000               	movlw	0
  6171  0347  00A2               	movwf	___llmod@divisor+2
  6172  0348  3000               	movlw	0
  6173  0349  00A1               	movwf	___llmod@divisor+1
  6174  034A  300A               	movlw	10
  6175  034B  00A0               	movwf	___llmod@divisor
  6176  034C  0021               	movlb	1	; select bank1
  6177  034D  085B               	movf	(sprintf@tmpval+3)^(0+128),w
  6178  034E  0020               	movlb	0	; select bank0
  6179  034F  00A7               	movwf	___llmod@dividend+3
  6180  0350  0021               	movlb	1	; select bank1
  6181  0351  085A               	movf	(sprintf@tmpval+2)^(0+128),w
  6182  0352  0020               	movlb	0	; select bank0
  6183  0353  00A6               	movwf	___llmod@dividend+2
  6184  0354  0021               	movlb	1	; select bank1
  6185  0355  0859               	movf	(sprintf@tmpval+1)^(0+128),w
  6186  0356  0020               	movlb	0	; select bank0
  6187  0357  00A5               	movwf	___llmod@dividend+1
  6188  0358  0021               	movlb	1	; select bank1
  6189  0359  0858               	movf	sprintf@tmpval^(0+128),w
  6190  035A  0020               	movlb	0	; select bank0
  6191  035B  00A4               	movwf	___llmod@dividend
  6192  035C  3190  20C5  3180   	fcall	___llmod
  6193  035F  0020               	movlb	0	; select bank0
  6194  0360  0823               	movf	?___llmod+3,w
  6195  0361  0021               	movlb	1	; select bank1
  6196  0362  00DB               	movwf	(sprintf@tmpval+3)^(0+128)
  6197  0363  0020               	movlb	0	; select bank0
  6198  0364  0822               	movf	?___llmod+2,w
  6199  0365  0021               	movlb	1	; select bank1
  6200  0366  00DA               	movwf	(sprintf@tmpval+2)^(0+128)
  6201  0367  0020               	movlb	0	; select bank0
  6202  0368  0821               	movf	?___llmod+1,w
  6203  0369  0021               	movlb	1	; select bank1
  6204  036A  00D9               	movwf	(sprintf@tmpval+1)^(0+128)
  6205  036B  0020               	movlb	0	; select bank0
  6206  036C  0820               	movf	?___llmod,w
  6207  036D  0021               	movlb	1	; select bank1
  6208  036E  00D8               	movwf	sprintf@tmpval^(0+128)
  6209                           
  6210                           ;doprnt.c: 1222: ((*sp++ = ('0' + tmpval.vd)));
  6211  036F  0858               	movf	sprintf@tmpval^(0+128),w
  6212  0370  3E30               	addlw	48
  6213  0371  2AFA               	goto	L6
  6214  0372                     l5032:	
  6215                           ;doprnt.c: 1223: };doprnt.c: 1225: };doprnt.c: 1226: while(eexp > 0) {
  6216                           
  6217                           
  6218                           ;doprnt.c: 1227: ((*sp++ = ('0')));
  6219  0372  3030               	movlw	48
  6220  0373  0021               	movlb	1	; select bank1
  6221  0374  00C2               	movwf	??_sprintf^(0+128)
  6222  0375  085C               	movf	sprintf@sp^(0+128),w
  6223  0376  0086               	movwf	6
  6224  0377  3001               	movlw	1	; select bank2/3
  6225  0378  0087               	movwf	7
  6226  0379  0842               	movf	??_sprintf^(0+128),w
  6227  037A  0081               	movwf	1
  6228  037B  3001               	movlw	1
  6229  037C  00C2               	movwf	??_sprintf^(0+128)
  6230  037D  0842               	movf	??_sprintf^(0+128),w
  6231  037E  07DC               	addwf	sprintf@sp^(0+128),f
  6232                           
  6233                           ;doprnt.c: 1228: eexp--;
  6234  037F  30FF               	movlw	255
  6235  0380  07D6               	addwf	sprintf@eexp^(0+128),f
  6236  0381  30FF               	movlw	255
  6237  0382  3DD7               	addwfc	(sprintf@eexp+1)^(0+128),f
  6238  0383                     l5038:	
  6239  0383  0857               	movf	(sprintf@eexp+1)^(0+128),w
  6240  0384  3A80               	xorlw	128
  6241  0385  00C2               	movwf	??_sprintf^(0+128)
  6242  0386  3080               	movlw	128
  6243  0387  0242               	subwf	??_sprintf^(0+128),w
  6244  0388  1D03               	skipz
  6245  0389  2B8C               	goto	u6485
  6246  038A  3001               	movlw	1
  6247  038B  0256               	subwf	sprintf@eexp^(0+128),w
  6248  038C                     u6485:	
  6249  038C  1803               	skipnc
  6250  038D  2B72               	goto	l5032
  6251                           
  6252                           ;doprnt.c: 1229: };doprnt.c: 1230: if(prec > (int)((sizeof dpowers/sizeof dpowers[0])-2)
      +                          )
  6253  038E  0021               	movlb	1	; select bank1
  6254  038F  0851               	movf	(sprintf@prec+1)^(0+128),w
  6255  0390  3A80               	xorlw	128
  6256  0391  00C2               	movwf	??_sprintf^(0+128)
  6257  0392  3080               	movlw	128
  6258  0393  0242               	subwf	??_sprintf^(0+128),w
  6259  0394  1D03               	skipz
  6260  0395  2B98               	goto	u6495
  6261  0396  3009               	movlw	9
  6262  0397  0250               	subwf	sprintf@prec^(0+128),w
  6263  0398                     u6495:	
  6264  0398  1C03               	skipc
  6265  0399  2B9D               	goto	l5044
  6266                           
  6267                           ;doprnt.c: 1231: c = (sizeof dpowers/sizeof dpowers[0])-2;
  6268  039A  3008               	movlw	8
  6269  039B  0021               	movlb	1	; select bank1
  6270  039C  2B9F               	goto	L3
  6271  039D                     l5044:	
  6272                           
  6273                           ;doprnt.c: 1232: else;doprnt.c: 1233: c = (char)prec;
  6274  039D  0021               	movlb	1	; select bank1
  6275  039E  0850               	movf	sprintf@prec^(0+128),w
  6276  039F                     L3:	
  6277  039F  00C2               	movwf	??_sprintf^(0+128)
  6278  03A0  0842               	movf	??_sprintf^(0+128),w
  6279  03A1  00E0               	movwf	sprintf@c^(0+128)
  6280                           
  6281                           ;doprnt.c: 1234: prec -= (int)c;
  6282  03A2  0860               	movf	sprintf@c^(0+128),w
  6283  03A3  00C2               	movwf	??_sprintf^(0+128)
  6284  03A4  01C3               	clrf	(??_sprintf^(0+128)+1)
  6285  03A5  0842               	movf	??_sprintf^(0+128),w
  6286  03A6  02D0               	subwf	sprintf@prec^(0+128),f
  6287  03A7  0843               	movf	(??_sprintf+1)^(0+128),w
  6288  03A8  3BD1               	subwfb	(sprintf@prec+1)^(0+128),f
  6289                           
  6290                           ;doprnt.c: 1238: if(c)
  6291  03A9  0860               	movf	sprintf@c^(0+128),w
  6292  03AA  1903               	btfsc	3,2
  6293  03AB  2BB8               	goto	l5052
  6294                           
  6295                           ;doprnt.c: 1240: ((*sp++ = ('.')));
  6296  03AC  302E               	movlw	46
  6297  03AD  00C2               	movwf	??_sprintf^(0+128)
  6298  03AE  085C               	movf	sprintf@sp^(0+128),w
  6299  03AF  0086               	movwf	6
  6300  03B0  3001               	movlw	1	; select bank2/3
  6301  03B1  0087               	movwf	7
  6302  03B2  0842               	movf	??_sprintf^(0+128),w
  6303  03B3  0081               	movwf	1
  6304  03B4  3001               	movlw	1
  6305  03B5  00C2               	movwf	??_sprintf^(0+128)
  6306  03B6  0842               	movf	??_sprintf^(0+128),w
  6307  03B7  07DC               	addwf	sprintf@sp^(0+128),f
  6308  03B8                     l5052:	
  6309                           
  6310                           ;doprnt.c: 1246: val = (unsigned long)(fval * scale((signed char)c));
  6311  03B8  0860               	movf	sprintf@c^(0+128),w
  6312  03B9  3184  24D7  3180   	fcall	_scale
  6313  03BC  0021               	movlb	1	; select bank1
  6314  03BD  0820               	movf	?_scale^(0+128),w
  6315  03BE  00C8               	movwf	_sprintf$1987^(0+128)
  6316  03BF  0821               	movf	(?_scale+1)^(0+128),w
  6317  03C0  00C9               	movwf	(_sprintf$1987+1)^(0+128)
  6318  03C1  0822               	movf	(?_scale+2)^(0+128),w
  6319  03C2  00CA               	movwf	(_sprintf$1987+2)^(0+128)
  6320                           
  6321                           ;doprnt.c: 1246: val = (unsigned long)(fval * scale((signed char)c));
  6322  03C3  0848               	movf	_sprintf$1987^(0+128),w
  6323  03C4  0020               	movlb	0	; select bank0
  6324  03C5  00E2               	movwf	___ftmul@f2
  6325  03C6  0021               	movlb	1	; select bank1
  6326  03C7  0849               	movf	(_sprintf$1987+1)^(0+128),w
  6327  03C8  0020               	movlb	0	; select bank0
  6328  03C9  00E3               	movwf	___ftmul@f2+1
  6329  03CA  0021               	movlb	1	; select bank1
  6330  03CB  084A               	movf	(_sprintf$1987+2)^(0+128),w
  6331  03CC  0020               	movlb	0	; select bank0
  6332  03CD  00E4               	movwf	___ftmul@f2+2
  6333  03CE  0021               	movlb	1	; select bank1
  6334  03CF  085D               	movf	sprintf@fval^(0+128),w
  6335  03D0  0020               	movlb	0	; select bank0
  6336  03D1  00DF               	movwf	___ftmul@f1
  6337  03D2  0021               	movlb	1	; select bank1
  6338  03D3  085E               	movf	(sprintf@fval+1)^(0+128),w
  6339  03D4  0020               	movlb	0	; select bank0
  6340  03D5  00E0               	movwf	___ftmul@f1+1
  6341  03D6  0021               	movlb	1	; select bank1
  6342  03D7  085F               	movf	(sprintf@fval+2)^(0+128),w
  6343  03D8  0020               	movlb	0	; select bank0
  6344  03D9  00E1               	movwf	___ftmul@f1+2
  6345  03DA  3195  2543  3180   	fcall	___ftmul
  6346  03DD  0020               	movlb	0	; select bank0
  6347  03DE  085F               	movf	?___ftmul,w
  6348  03DF  0021               	movlb	1	; select bank1
  6349  03E0  00AB               	movwf	___fttol@f1^(0+128)
  6350  03E1  0020               	movlb	0	; select bank0
  6351  03E2  0860               	movf	?___ftmul+1,w
  6352  03E3  0021               	movlb	1	; select bank1
  6353  03E4  00AC               	movwf	(___fttol@f1+1)^(0+128)
  6354  03E5  0020               	movlb	0	; select bank0
  6355  03E6  0861               	movf	?___ftmul+2,w
  6356  03E7  0021               	movlb	1	; select bank1
  6357  03E8  00AD               	movwf	(___fttol@f1+2)^(0+128)
  6358  03E9  3192  22DA  3180   	fcall	___fttol
  6359  03EC  0021               	movlb	1	; select bank1
  6360  03ED  082E               	movf	(?___fttol+3)^(0+128),w
  6361  03EE  00D5               	movwf	(sprintf@val+3)^(0+128)
  6362  03EF  082D               	movf	(?___fttol+2)^(0+128),w
  6363  03F0  00D4               	movwf	(sprintf@val+2)^(0+128)
  6364  03F1  082C               	movf	(?___fttol+1)^(0+128),w
  6365  03F2  00D3               	movwf	(sprintf@val+1)^(0+128)
  6366  03F3  082B               	movf	?___fttol^(0+128),w
  6367  03F4                     L4:	
  6368  03F4  00D2               	movwf	sprintf@val^(0+128)
  6369  03F5  3001               	movlw	1
  6370  03F6  02E0               	subwf	sprintf@c^(0+128),f
  6371  03F7  0A60               	incf	sprintf@c^(0+128),w
  6372  03F8  1903               	btfsc	3,2
  6373  03F9  2CB5               	goto	l5074
  6374                           
  6375                           ;doprnt.c: 1248: tmpval.vd = val/dpowers[c];
  6376                           
  6377                           ;doprnt.c: 1247: while(c--) {
  6378  03FA  0860               	movf	sprintf@c^(0+128),w
  6379  03FB  00C2               	movwf	??_sprintf^(0+128)
  6380  03FC  01C3               	clrf	(??_sprintf^(0+128)+1)
  6381  03FD  35C2               	lslf	??_sprintf^(0+128),f
  6382  03FE  0DC3               	rlf	(??_sprintf^(0+128)+1),f
  6383  03FF  35C2               	lslf	??_sprintf^(0+128),f
  6384  0400  0DC3               	rlf	(??_sprintf^(0+128)+1),f
  6385  0401  3000               	movlw	low (_dpowers| (0+32768))
  6386  0402  0742               	addwf	??_sprintf^(0+128),w
  6387  0403  0084               	movwf	4
  6388  0404  3098               	movlw	high (_dpowers| (0+32768))
  6389  0405  3D43               	addwfc	(??_sprintf+1)^(0+128),w
  6390  0406  0085               	movwf	5
  6391  0407  3F00               	moviw [0]fsr0
  6392  0408  0020               	movlb	0	; select bank0
  6393  0409  00A0               	movwf	___lldiv@divisor
  6394  040A  3F01               	moviw [1]fsr0
  6395  040B  00A1               	movwf	___lldiv@divisor+1
  6396  040C  3F02               	moviw [2]fsr0
  6397  040D  00A2               	movwf	___lldiv@divisor+2
  6398  040E  3F03               	moviw [3]fsr0
  6399  040F  00A3               	movwf	___lldiv@divisor+3
  6400  0410  0021               	movlb	1	; select bank1
  6401  0411  0855               	movf	(sprintf@val+3)^(0+128),w
  6402  0412  0020               	movlb	0	; select bank0
  6403  0413  00A7               	movwf	___lldiv@dividend+3
  6404  0414  0021               	movlb	1	; select bank1
  6405  0415  0854               	movf	(sprintf@val+2)^(0+128),w
  6406  0416  0020               	movlb	0	; select bank0
  6407  0417  00A6               	movwf	___lldiv@dividend+2
  6408  0418  0021               	movlb	1	; select bank1
  6409  0419  0853               	movf	(sprintf@val+1)^(0+128),w
  6410  041A  0020               	movlb	0	; select bank0
  6411  041B  00A5               	movwf	___lldiv@dividend+1
  6412  041C  0021               	movlb	1	; select bank1
  6413  041D  0852               	movf	sprintf@val^(0+128),w
  6414  041E  0020               	movlb	0	; select bank0
  6415  041F  00A4               	movwf	___lldiv@dividend
  6416  0420  3187  279D  3180   	fcall	___lldiv
  6417  0423  0020               	movlb	0	; select bank0
  6418  0424  0823               	movf	?___lldiv+3,w
  6419  0425  0021               	movlb	1	; select bank1
  6420  0426  00DB               	movwf	(sprintf@tmpval+3)^(0+128)
  6421  0427  0020               	movlb	0	; select bank0
  6422  0428  0822               	movf	?___lldiv+2,w
  6423  0429  0021               	movlb	1	; select bank1
  6424  042A  00DA               	movwf	(sprintf@tmpval+2)^(0+128)
  6425  042B  0020               	movlb	0	; select bank0
  6426  042C  0821               	movf	?___lldiv+1,w
  6427  042D  0021               	movlb	1	; select bank1
  6428  042E  00D9               	movwf	(sprintf@tmpval+1)^(0+128)
  6429  042F  0020               	movlb	0	; select bank0
  6430  0430  0820               	movf	?___lldiv,w
  6431  0431  0021               	movlb	1	; select bank1
  6432  0432  00D8               	movwf	sprintf@tmpval^(0+128)
  6433                           
  6434                           ;doprnt.c: 1249: tmpval.vd %= 10;
  6435  0433  3000               	movlw	0
  6436  0434  0020               	movlb	0	; select bank0
  6437  0435  00A3               	movwf	___llmod@divisor+3
  6438  0436  3000               	movlw	0
  6439  0437  00A2               	movwf	___llmod@divisor+2
  6440  0438  3000               	movlw	0
  6441  0439  00A1               	movwf	___llmod@divisor+1
  6442  043A  300A               	movlw	10
  6443  043B  00A0               	movwf	___llmod@divisor
  6444  043C  0021               	movlb	1	; select bank1
  6445  043D  085B               	movf	(sprintf@tmpval+3)^(0+128),w
  6446  043E  0020               	movlb	0	; select bank0
  6447  043F  00A7               	movwf	___llmod@dividend+3
  6448  0440  0021               	movlb	1	; select bank1
  6449  0441  085A               	movf	(sprintf@tmpval+2)^(0+128),w
  6450  0442  0020               	movlb	0	; select bank0
  6451  0443  00A6               	movwf	___llmod@dividend+2
  6452  0444  0021               	movlb	1	; select bank1
  6453  0445  0859               	movf	(sprintf@tmpval+1)^(0+128),w
  6454  0446  0020               	movlb	0	; select bank0
  6455  0447  00A5               	movwf	___llmod@dividend+1
  6456  0448  0021               	movlb	1	; select bank1
  6457  0449  0858               	movf	sprintf@tmpval^(0+128),w
  6458  044A  0020               	movlb	0	; select bank0
  6459  044B  00A4               	movwf	___llmod@dividend
  6460  044C  3190  20C5  3180   	fcall	___llmod
  6461  044F  0020               	movlb	0	; select bank0
  6462  0450  0823               	movf	?___llmod+3,w
  6463  0451  0021               	movlb	1	; select bank1
  6464  0452  00DB               	movwf	(sprintf@tmpval+3)^(0+128)
  6465  0453  0020               	movlb	0	; select bank0
  6466  0454  0822               	movf	?___llmod+2,w
  6467  0455  0021               	movlb	1	; select bank1
  6468  0456  00DA               	movwf	(sprintf@tmpval+2)^(0+128)
  6469  0457  0020               	movlb	0	; select bank0
  6470  0458  0821               	movf	?___llmod+1,w
  6471  0459  0021               	movlb	1	; select bank1
  6472  045A  00D9               	movwf	(sprintf@tmpval+1)^(0+128)
  6473  045B  0020               	movlb	0	; select bank0
  6474  045C  0820               	movf	?___llmod,w
  6475  045D  0021               	movlb	1	; select bank1
  6476  045E  00D8               	movwf	sprintf@tmpval^(0+128)
  6477                           
  6478                           ;doprnt.c: 1250: ((*sp++ = ('0' + tmpval.vd)));
  6479  045F  0858               	movf	sprintf@tmpval^(0+128),w
  6480  0460  3E30               	addlw	48
  6481  0461  00C2               	movwf	??_sprintf^(0+128)
  6482  0462  085C               	movf	sprintf@sp^(0+128),w
  6483  0463  0086               	movwf	6
  6484  0464  3001               	movlw	1	; select bank2/3
  6485  0465  0087               	movwf	7
  6486  0466  0842               	movf	??_sprintf^(0+128),w
  6487  0467  0081               	movwf	1
  6488  0468  3001               	movlw	1
  6489  0469  00C2               	movwf	??_sprintf^(0+128)
  6490  046A  0842               	movf	??_sprintf^(0+128),w
  6491  046B  07DC               	addwf	sprintf@sp^(0+128),f
  6492                           
  6493                           ;doprnt.c: 1251: val %= dpowers[c];
  6494  046C  0860               	movf	sprintf@c^(0+128),w
  6495  046D  00C2               	movwf	??_sprintf^(0+128)
  6496  046E  01C3               	clrf	(??_sprintf^(0+128)+1)
  6497  046F  35C2               	lslf	??_sprintf^(0+128),f
  6498  0470  0DC3               	rlf	(??_sprintf^(0+128)+1),f
  6499  0471  35C2               	lslf	??_sprintf^(0+128),f
  6500  0472  0DC3               	rlf	(??_sprintf^(0+128)+1),f
  6501  0473  3000               	movlw	low (_dpowers| (0+32768))
  6502  0474  0742               	addwf	??_sprintf^(0+128),w
  6503  0475  0084               	movwf	4
  6504  0476  3098               	movlw	high (_dpowers| (0+32768))
  6505  0477  3D43               	addwfc	(??_sprintf+1)^(0+128),w
  6506  0478  0085               	movwf	5
  6507  0479  3F00               	moviw [0]fsr0
  6508  047A  0020               	movlb	0	; select bank0
  6509  047B  00A0               	movwf	___llmod@divisor
  6510  047C  3F01               	moviw [1]fsr0
  6511  047D  00A1               	movwf	___llmod@divisor+1
  6512  047E  3F02               	moviw [2]fsr0
  6513  047F  00A2               	movwf	___llmod@divisor+2
  6514  0480  3F03               	moviw [3]fsr0
  6515  0481  00A3               	movwf	___llmod@divisor+3
  6516  0482  0021               	movlb	1	; select bank1
  6517  0483  0855               	movf	(sprintf@val+3)^(0+128),w
  6518  0484  0020               	movlb	0	; select bank0
  6519  0485  00A7               	movwf	___llmod@dividend+3
  6520  0486  0021               	movlb	1	; select bank1
  6521  0487  0854               	movf	(sprintf@val+2)^(0+128),w
  6522  0488  0020               	movlb	0	; select bank0
  6523  0489  00A6               	movwf	___llmod@dividend+2
  6524  048A  0021               	movlb	1	; select bank1
  6525  048B  0853               	movf	(sprintf@val+1)^(0+128),w
  6526  048C  0020               	movlb	0	; select bank0
  6527  048D  00A5               	movwf	___llmod@dividend+1
  6528  048E  0021               	movlb	1	; select bank1
  6529  048F  0852               	movf	sprintf@val^(0+128),w
  6530  0490  0020               	movlb	0	; select bank0
  6531  0491  00A4               	movwf	___llmod@dividend
  6532  0492  3190  20C5  3180   	fcall	___llmod
  6533  0495  0020               	movlb	0	; select bank0
  6534  0496  0823               	movf	?___llmod+3,w
  6535  0497  0021               	movlb	1	; select bank1
  6536  0498  00D5               	movwf	(sprintf@val+3)^(0+128)
  6537  0499  0020               	movlb	0	; select bank0
  6538  049A  0822               	movf	?___llmod+2,w
  6539  049B  0021               	movlb	1	; select bank1
  6540  049C  00D4               	movwf	(sprintf@val+2)^(0+128)
  6541  049D  0020               	movlb	0	; select bank0
  6542  049E  0821               	movf	?___llmod+1,w
  6543  049F  0021               	movlb	1	; select bank1
  6544  04A0  00D3               	movwf	(sprintf@val+1)^(0+128)
  6545  04A1  0020               	movlb	0	; select bank0
  6546  04A2  0820               	movf	?___llmod,w
  6547  04A3  0021               	movlb	1	; select bank1
  6548  04A4  2BF4               	goto	L4
  6549  04A5                     l5068:	
  6550                           ;doprnt.c: 1252: };doprnt.c: 1254: while(prec) {
  6551                           
  6552                           
  6553                           ;doprnt.c: 1255: ((*sp++ = ('0')));
  6554  04A5  3030               	movlw	48
  6555  04A6  00C2               	movwf	??_sprintf^(0+128)
  6556  04A7  085C               	movf	sprintf@sp^(0+128),w
  6557  04A8  0086               	movwf	6
  6558  04A9  3001               	movlw	1	; select bank2/3
  6559  04AA  0087               	movwf	7
  6560  04AB  0842               	movf	??_sprintf^(0+128),w
  6561  04AC  0081               	movwf	1
  6562  04AD  3001               	movlw	1
  6563  04AE  00C2               	movwf	??_sprintf^(0+128)
  6564  04AF  0842               	movf	??_sprintf^(0+128),w
  6565  04B0  07DC               	addwf	sprintf@sp^(0+128),f
  6566                           
  6567                           ;doprnt.c: 1256: prec--;
  6568  04B1  30FF               	movlw	255
  6569  04B2  07D0               	addwf	sprintf@prec^(0+128),f
  6570  04B3  30FF               	movlw	255
  6571  04B4  3DD1               	addwfc	(sprintf@prec+1)^(0+128),f
  6572  04B5                     l5074:	
  6573  04B5  0850               	movf	sprintf@prec^(0+128),w
  6574  04B6  0451               	iorwf	(sprintf@prec+1)^(0+128),w
  6575  04B7  1903               	btfsc	3,2
  6576  04B8  2838               	goto	l5082
  6577  04B9  2CA5               	goto	l5068
  6578  04BA                     l5076:	
  6579                           ;doprnt.c: 1257: };doprnt.c: 1264: continue;
  6580                           
  6581                           
  6582                           ;doprnt.c: 1265: };doprnt.c: 1441: {;doprnt.c: 1457: if(flag & 0x03)
  6583  04BA  3003               	movlw	3
  6584  04BB  054C               	andwf	sprintf@flag^(0+128),w
  6585  04BC  00C2               	movwf	??_sprintf^(0+128)
  6586  04BD  3000               	movlw	0
  6587  04BE  054D               	andwf	(sprintf@flag+1)^(0+128),w
  6588  04BF  00C3               	movwf	(??_sprintf+1)^(0+128)
  6589  04C0  0842               	movf	??_sprintf^(0+128),w
  6590  04C1  0443               	iorwf	(??_sprintf^(0+128)+1),w
  6591  04C2  1903               	btfsc	3,2
  6592  04C3  2838               	goto	l5082
  6593                           
  6594                           ;doprnt.c: 1458: ((*sp++ = ('-')));
  6595  04C4  302D               	movlw	45
  6596  04C5                     L5:	
  6597  04C5  00C2               	movwf	??_sprintf^(0+128)
  6598  04C6  085C               	movf	sprintf@sp^(0+128),w
  6599  04C7  0086               	movwf	6
  6600  04C8  3001               	movlw	1	; select bank2/3
  6601  04C9  0087               	movwf	7
  6602  04CA  0842               	movf	??_sprintf^(0+128),w
  6603  04CB  0081               	movwf	1
  6604  04CC  3001               	movlw	1
  6605  04CD  00C2               	movwf	??_sprintf^(0+128)
  6606  04CE  0842               	movf	??_sprintf^(0+128),w
  6607  04CF  07DC               	addwf	sprintf@sp^(0+128),f
  6608  04D0  2838               	goto	l5082
  6609  04D1                     l5084:	
  6610                           ;doprnt.c: 1488: };doprnt.c: 1552: };doprnt.c: 1554: alldone:
  6611                           
  6612                           
  6613                           ;doprnt.c: 1557: *sp = 0;
  6614  04D1  085C               	movf	sprintf@sp^(0+128),w
  6615  04D2  0086               	movwf	6
  6616  04D3  3001               	movlw	1	; select bank2/3
  6617  04D4  0087               	movwf	7
  6618  04D5  0181               	clrf	1
  6619  04D6  0008               	return
  6620  04D7                     __end_of_sprintf:	
  6621                           ;doprnt.c: 1559: return 0;;	Return value of _sprintf is never used
  6622                           
  6623                           
  6624                           	psect	text12
  6625  04D7                     __ptext12:	
  6626 ;; *************** function _scale *****************
  6627 ;; Defined at:
  6628 ;;		line 433 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\doprnt.c"
  6629 ;; Parameters:    Size  Location     Type
  6630 ;;  scl             1    wreg     char 
  6631 ;; Auto vars:     Size  Location     Type
  6632 ;;  scl             1   10[BANK1 ] char 
  6633 ;; Return value:  Size  Location     Type
  6634 ;;                  3    0[BANK1 ] char 
  6635 ;; Registers used:
  6636 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  6637 ;; Tracked objects:
  6638 ;;		On entry : 0/0
  6639 ;;		On exit  : 0/0
  6640 ;;		Unchanged: 0/0
  6641 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6642 ;;      Params:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0
  6643 ;;      Locals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  6644 ;;      Temps:          0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  6645 ;;      Totals:         0       0      11       0       0       0       0       0       0       0       0       0       
      +0       0
  6646 ;;Total ram usage:       11 bytes
  6647 ;; Hardware stack levels used:    1
  6648 ;; Hardware stack levels required when called:    9
  6649 ;; This function calls:
  6650 ;;		___awdiv
  6651 ;;		___awmod
  6652 ;;		___ftmul
  6653 ;;		___wmul
  6654 ;; This function is called by:
  6655 ;;		_sprintf
  6656 ;; This function uses a non-reentrant model
  6657 ;;
  6658                           
  6659                           
  6660                           ;psect for function _scale
  6661  04D7                     _scale:	
  6662                           
  6663                           ;incstack = 0
  6664                           ; Regs used in _scale: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  6665                           ;scale@scl stored from wreg
  6666  04D7  0021               	movlb	1	; select bank1
  6667  04D8  00AA               	movwf	scale@scl^(0+128)
  6668                           
  6669                           ;doprnt.c: 436: if(scl < 0) {
  6670  04D9  1FAA               	btfss	scale@scl^(0+128),7
  6671  04DA  2E3D               	goto	l4614
  6672                           
  6673                           ;doprnt.c: 437: scl = -scl;
  6674  04DB  09AA               	comf	scale@scl^(0+128),f
  6675  04DC  0AAA               	incf	scale@scl^(0+128),f
  6676                           
  6677                           ;doprnt.c: 438: if(scl>=110)
  6678  04DD  082A               	movf	scale@scl^(0+128),w
  6679  04DE  3A80               	xorlw	128
  6680  04DF  3E12               	addlw	-238
  6681  04E0  1C03               	skipc
  6682  04E1  2DA8               	goto	l4604
  6683                           
  6684                           ;doprnt.c: 439: return _npowers_[(unsigned char)(scl/100+18)] * _npowers_[(unsigned char
      +                          )((scl%100)/10+9)] * _npowers_[(unsigned char)(scl%10)];
  6685  04E2  082A               	movf	scale@scl^(0+128),w
  6686  04E3  0020               	movlb	0	; select bank0
  6687  04E4  00A2               	movwf	___awmod@dividend
  6688  04E5  01A3               	clrf	___awmod@dividend+1
  6689  04E6  1BA2               	btfsc	___awmod@dividend,7
  6690  04E7  03A3               	decf	___awmod@dividend+1,f
  6691  04E8  3064               	movlw	100
  6692  04E9  00A0               	movwf	___awmod@divisor
  6693  04EA  3000               	movlw	0
  6694  04EB  00A1               	movwf	___awmod@divisor+1
  6695  04EC  3191  218F  3184   	fcall	___awmod
  6696  04EF  0020               	movlb	0	; select bank0
  6697  04F0  0821               	movf	?___awmod+1,w
  6698  04F1  00AA               	movwf	___awdiv@dividend+1
  6699  04F2  0820               	movf	?___awmod,w
  6700  04F3  00A9               	movwf	___awdiv@dividend
  6701  04F4  300A               	movlw	10
  6702  04F5  00A7               	movwf	___awdiv@divisor
  6703  04F6  3000               	movlw	0
  6704  04F7  00A8               	movwf	___awdiv@divisor+1
  6705  04F8  3192  2223  3184   	fcall	___awdiv
  6706  04FB  0020               	movlb	0	; select bank0
  6707  04FC  0827               	movf	?___awdiv,w
  6708  04FD  3E09               	addlw	9
  6709  04FE  0021               	movlb	1	; select bank1
  6710  04FF  00A3               	movwf	??_scale^(0+128)
  6711  0500  01A4               	clrf	(??_scale^(0+128)+1)
  6712  0501  0823               	movf	??_scale^(0+128),w
  6713  0502  0020               	movlb	0	; select bank0
  6714  0503  00B0               	movwf	___wmul@multiplier
  6715  0504  0021               	movlb	1	; select bank1
  6716  0505  0824               	movf	(??_scale+1)^(0+128),w
  6717  0506  0020               	movlb	0	; select bank0
  6718  0507  00B1               	movwf	___wmul@multiplier+1
  6719  0508  3003               	movlw	3
  6720  0509  00B2               	movwf	___wmul@multiplicand
  6721  050A  3000               	movlw	0
  6722  050B  00B3               	movwf	___wmul@multiplicand+1
  6723  050C  319D  25A7  3184   	fcall	___wmul
  6724  050F  0020               	movlb	0	; select bank0
  6725  0510  0831               	movf	?___wmul+1,w
  6726  0511  0085               	movwf	5
  6727  0512  0830               	movf	?___wmul,w
  6728  0513  0084               	movwf	4
  6729  0514  304F               	movlw	low (__npowers_| (0+32768))
  6730  0515  0784               	addwf	4,f
  6731  0516  3098               	movlw	high (__npowers_| (0+32768))
  6732  0517  3D85               	addwfc	5,f
  6733  0518  3F00               	moviw [0]fsr0
  6734  0519  00DF               	movwf	___ftmul@f1
  6735  051A  3F01               	moviw [1]fsr0
  6736  051B  00E0               	movwf	___ftmul@f1+1
  6737  051C  3F02               	moviw [2]fsr0
  6738  051D  00E1               	movwf	___ftmul@f1+2
  6739  051E  0021               	movlb	1	; select bank1
  6740  051F  082A               	movf	scale@scl^(0+128),w
  6741  0520  0020               	movlb	0	; select bank0
  6742  0521  00A9               	movwf	___awdiv@dividend
  6743  0522  01AA               	clrf	___awdiv@dividend+1
  6744  0523  1BA9               	btfsc	___awdiv@dividend,7
  6745  0524  03AA               	decf	___awdiv@dividend+1,f
  6746  0525  3064               	movlw	100
  6747  0526  00A7               	movwf	___awdiv@divisor
  6748  0527  3000               	movlw	0
  6749  0528  00A8               	movwf	___awdiv@divisor+1
  6750  0529  3192  2223  3184   	fcall	___awdiv
  6751  052C  0020               	movlb	0	; select bank0
  6752  052D  0827               	movf	?___awdiv,w
  6753  052E  3E12               	addlw	18
  6754  052F  0021               	movlb	1	; select bank1
  6755  0530  00A5               	movwf	(??_scale+2)^(0+128)
  6756  0531  01A6               	clrf	((??_scale+2)^(0+128)+1)
  6757  0532  0825               	movf	(??_scale+2)^(0+128),w
  6758  0533  0020               	movlb	0	; select bank0
  6759  0534  00B0               	movwf	___wmul@multiplier
  6760  0535  0021               	movlb	1	; select bank1
  6761  0536  0826               	movf	(??_scale+3)^(0+128),w
  6762  0537  0020               	movlb	0	; select bank0
  6763  0538  00B1               	movwf	___wmul@multiplier+1
  6764  0539  3003               	movlw	3
  6765  053A  00B2               	movwf	___wmul@multiplicand
  6766  053B  3000               	movlw	0
  6767  053C  00B3               	movwf	___wmul@multiplicand+1
  6768  053D  319D  25A7  3184   	fcall	___wmul
  6769  0540  0020               	movlb	0	; select bank0
  6770  0541  0831               	movf	?___wmul+1,w
  6771  0542  0085               	movwf	5
  6772  0543  0830               	movf	?___wmul,w
  6773  0544  0084               	movwf	4
  6774  0545  304F               	movlw	low (__npowers_| (0+32768))
  6775  0546  0784               	addwf	4,f
  6776  0547  3098               	movlw	high (__npowers_| (0+32768))
  6777  0548  3D85               	addwfc	5,f
  6778  0549  3F00               	moviw [0]fsr0
  6779  054A  00E2               	movwf	___ftmul@f2
  6780  054B  3F01               	moviw [1]fsr0
  6781  054C  00E3               	movwf	___ftmul@f2+1
  6782  054D  3F02               	moviw [2]fsr0
  6783  054E  00E4               	movwf	___ftmul@f2+2
  6784  054F  3195  2543  3184   	fcall	___ftmul
  6785  0552  0020               	movlb	0	; select bank0
  6786  0553  085F               	movf	?___ftmul,w
  6787  0554  0021               	movlb	1	; select bank1
  6788  0555  00A7               	movwf	_scale$1986^(0+128)
  6789  0556  0020               	movlb	0	; select bank0
  6790  0557  0860               	movf	?___ftmul+1,w
  6791  0558  0021               	movlb	1	; select bank1
  6792  0559  00A8               	movwf	(_scale$1986+1)^(0+128)
  6793  055A  0020               	movlb	0	; select bank0
  6794  055B  0861               	movf	?___ftmul+2,w
  6795  055C  0021               	movlb	1	; select bank1
  6796  055D  00A9               	movwf	(_scale$1986+2)^(0+128)
  6797                           
  6798                           ;doprnt.c: 439: return _npowers_[(unsigned char)(scl/100+18)] * _npowers_[(unsigned char
      +                          )((scl%100)/10+9)] * _npowers_[(unsigned char)(scl%10)];
  6799  055E  082A               	movf	scale@scl^(0+128),w
  6800  055F  0020               	movlb	0	; select bank0
  6801  0560  00A2               	movwf	___awmod@dividend
  6802  0561  01A3               	clrf	___awmod@dividend+1
  6803  0562  1BA2               	btfsc	___awmod@dividend,7
  6804  0563  03A3               	decf	___awmod@dividend+1,f
  6805  0564  300A               	movlw	10
  6806  0565  00A0               	movwf	___awmod@divisor
  6807  0566  3000               	movlw	0
  6808  0567  00A1               	movwf	___awmod@divisor+1
  6809  0568  3191  218F  3184   	fcall	___awmod
  6810  056B  0020               	movlb	0	; select bank0
  6811  056C  0820               	movf	?___awmod,w
  6812  056D  0021               	movlb	1	; select bank1
  6813  056E  00A3               	movwf	??_scale^(0+128)
  6814  056F  01A4               	clrf	(??_scale^(0+128)+1)
  6815  0570  0823               	movf	??_scale^(0+128),w
  6816  0571  0020               	movlb	0	; select bank0
  6817  0572  00B0               	movwf	___wmul@multiplier
  6818  0573  0021               	movlb	1	; select bank1
  6819  0574  0824               	movf	(??_scale+1)^(0+128),w
  6820  0575  0020               	movlb	0	; select bank0
  6821  0576  00B1               	movwf	___wmul@multiplier+1
  6822  0577  3003               	movlw	3
  6823  0578  00B2               	movwf	___wmul@multiplicand
  6824  0579  3000               	movlw	0
  6825  057A  00B3               	movwf	___wmul@multiplicand+1
  6826  057B  319D  25A7  3184   	fcall	___wmul
  6827  057E  0020               	movlb	0	; select bank0
  6828  057F  0831               	movf	?___wmul+1,w
  6829  0580  0085               	movwf	5
  6830  0581  0830               	movf	?___wmul,w
  6831  0582  0084               	movwf	4
  6832  0583  304F               	movlw	low (__npowers_| (0+32768))
  6833  0584  0784               	addwf	4,f
  6834  0585  3098               	movlw	high (__npowers_| (0+32768))
  6835  0586  3D85               	addwfc	5,f
  6836  0587  3F00               	moviw [0]fsr0
  6837  0588  00DF               	movwf	___ftmul@f1
  6838  0589  3F01               	moviw [1]fsr0
  6839  058A  00E0               	movwf	___ftmul@f1+1
  6840  058B  3F02               	moviw [2]fsr0
  6841  058C  00E1               	movwf	___ftmul@f1+2
  6842  058D  0021               	movlb	1	; select bank1
  6843  058E  0827               	movf	_scale$1986^(0+128),w
  6844  058F  0020               	movlb	0	; select bank0
  6845  0590  00E2               	movwf	___ftmul@f2
  6846  0591  0021               	movlb	1	; select bank1
  6847  0592  0828               	movf	(_scale$1986+1)^(0+128),w
  6848  0593  0020               	movlb	0	; select bank0
  6849  0594  00E3               	movwf	___ftmul@f2+1
  6850  0595  0021               	movlb	1	; select bank1
  6851  0596  0829               	movf	(_scale$1986+2)^(0+128),w
  6852  0597  0020               	movlb	0	; select bank0
  6853  0598  00E4               	movwf	___ftmul@f2+2
  6854  0599  3195  2543         	fcall	___ftmul
  6855  059B  0020               	movlb	0	; select bank0
  6856  059C  085F               	movf	?___ftmul,w
  6857  059D  0021               	movlb	1	; select bank1
  6858  059E  00A0               	movwf	?_scale^(0+128)
  6859  059F  0020               	movlb	0	; select bank0
  6860  05A0  0860               	movf	?___ftmul+1,w
  6861  05A1  0021               	movlb	1	; select bank1
  6862  05A2  00A1               	movwf	(?_scale+1)^(0+128)
  6863  05A3  0020               	movlb	0	; select bank0
  6864  05A4  0861               	movf	?___ftmul+2,w
  6865  05A5  0021               	movlb	1	; select bank1
  6866  05A6  00A2               	movwf	(?_scale+2)^(0+128)
  6867  05A7  0008               	return
  6868  05A8                     l4604:	
  6869                           
  6870                           ;doprnt.c: 440: else if(scl > 10)
  6871  05A8  082A               	movf	scale@scl^(0+128),w
  6872  05A9  3A80               	xorlw	128
  6873  05AA  3E75               	addlw	-139
  6874  05AB  1C03               	skipc
  6875  05AC  2E1C               	goto	l4610
  6876                           
  6877                           ;doprnt.c: 441: return _npowers_[(unsigned char)(scl/10+9)] * _npowers_[(unsigned char)(
      +                          scl%10)];
  6878  05AD  082A               	movf	scale@scl^(0+128),w
  6879  05AE  0020               	movlb	0	; select bank0
  6880  05AF  00A2               	movwf	___awmod@dividend
  6881  05B0  01A3               	clrf	___awmod@dividend+1
  6882  05B1  1BA2               	btfsc	___awmod@dividend,7
  6883  05B2  03A3               	decf	___awmod@dividend+1,f
  6884  05B3  300A               	movlw	10
  6885  05B4  00A0               	movwf	___awmod@divisor
  6886  05B5  3000               	movlw	0
  6887  05B6  00A1               	movwf	___awmod@divisor+1
  6888  05B7  3191  218F  3184   	fcall	___awmod
  6889  05BA  0020               	movlb	0	; select bank0
  6890  05BB  0820               	movf	?___awmod,w
  6891  05BC  0021               	movlb	1	; select bank1
  6892  05BD  00A3               	movwf	??_scale^(0+128)
  6893  05BE  01A4               	clrf	(??_scale^(0+128)+1)
  6894  05BF  0823               	movf	??_scale^(0+128),w
  6895  05C0  0020               	movlb	0	; select bank0
  6896  05C1  00B0               	movwf	___wmul@multiplier
  6897  05C2  0021               	movlb	1	; select bank1
  6898  05C3  0824               	movf	(??_scale+1)^(0+128),w
  6899  05C4  0020               	movlb	0	; select bank0
  6900  05C5  00B1               	movwf	___wmul@multiplier+1
  6901  05C6  3003               	movlw	3
  6902  05C7  00B2               	movwf	___wmul@multiplicand
  6903  05C8  3000               	movlw	0
  6904  05C9  00B3               	movwf	___wmul@multiplicand+1
  6905  05CA  319D  25A7  3184   	fcall	___wmul
  6906  05CD  0020               	movlb	0	; select bank0
  6907  05CE  0831               	movf	?___wmul+1,w
  6908  05CF  0085               	movwf	5
  6909  05D0  0830               	movf	?___wmul,w
  6910  05D1  0084               	movwf	4
  6911  05D2  304F               	movlw	low (__npowers_| (0+32768))
  6912  05D3  0784               	addwf	4,f
  6913  05D4  3098               	movlw	high (__npowers_| (0+32768))
  6914  05D5  3D85               	addwfc	5,f
  6915  05D6  3F00               	moviw [0]fsr0
  6916  05D7  00DF               	movwf	___ftmul@f1
  6917  05D8  3F01               	moviw [1]fsr0
  6918  05D9  00E0               	movwf	___ftmul@f1+1
  6919  05DA  3F02               	moviw [2]fsr0
  6920  05DB  00E1               	movwf	___ftmul@f1+2
  6921  05DC  0021               	movlb	1	; select bank1
  6922  05DD  082A               	movf	scale@scl^(0+128),w
  6923  05DE  0020               	movlb	0	; select bank0
  6924  05DF  00A9               	movwf	___awdiv@dividend
  6925  05E0  01AA               	clrf	___awdiv@dividend+1
  6926  05E1  1BA9               	btfsc	___awdiv@dividend,7
  6927  05E2  03AA               	decf	___awdiv@dividend+1,f
  6928  05E3  300A               	movlw	10
  6929  05E4  00A7               	movwf	___awdiv@divisor
  6930  05E5  3000               	movlw	0
  6931  05E6  00A8               	movwf	___awdiv@divisor+1
  6932  05E7  3192  2223  3184   	fcall	___awdiv
  6933  05EA  0020               	movlb	0	; select bank0
  6934  05EB  0827               	movf	?___awdiv,w
  6935  05EC  3E09               	addlw	9
  6936  05ED  0021               	movlb	1	; select bank1
  6937  05EE  00A5               	movwf	(??_scale+2)^(0+128)
  6938  05EF  01A6               	clrf	((??_scale+2)^(0+128)+1)
  6939  05F0  0825               	movf	(??_scale+2)^(0+128),w
  6940  05F1  0020               	movlb	0	; select bank0
  6941  05F2  00B0               	movwf	___wmul@multiplier
  6942  05F3  0021               	movlb	1	; select bank1
  6943  05F4  0826               	movf	(??_scale+3)^(0+128),w
  6944  05F5  0020               	movlb	0	; select bank0
  6945  05F6  00B1               	movwf	___wmul@multiplier+1
  6946  05F7  3003               	movlw	3
  6947  05F8  00B2               	movwf	___wmul@multiplicand
  6948  05F9  3000               	movlw	0
  6949  05FA  00B3               	movwf	___wmul@multiplicand+1
  6950  05FB  319D  25A7  3184   	fcall	___wmul
  6951  05FE  0020               	movlb	0	; select bank0
  6952  05FF  0831               	movf	?___wmul+1,w
  6953  0600  0085               	movwf	5
  6954  0601  0830               	movf	?___wmul,w
  6955  0602  0084               	movwf	4
  6956  0603  304F               	movlw	low (__npowers_| (0+32768))
  6957  0604  0784               	addwf	4,f
  6958  0605  3098               	movlw	high (__npowers_| (0+32768))
  6959  0606  3D85               	addwfc	5,f
  6960  0607  3F00               	moviw [0]fsr0
  6961  0608  00E2               	movwf	___ftmul@f2
  6962  0609  3F01               	moviw [1]fsr0
  6963  060A  00E3               	movwf	___ftmul@f2+1
  6964  060B  3F02               	moviw [2]fsr0
  6965  060C  00E4               	movwf	___ftmul@f2+2
  6966  060D  3195  2543         	fcall	___ftmul
  6967  060F  0020               	movlb	0	; select bank0
  6968  0610  085F               	movf	?___ftmul,w
  6969  0611  0021               	movlb	1	; select bank1
  6970  0612  00A0               	movwf	?_scale^(0+128)
  6971  0613  0020               	movlb	0	; select bank0
  6972  0614  0860               	movf	?___ftmul+1,w
  6973  0615  0021               	movlb	1	; select bank1
  6974  0616  00A1               	movwf	(?_scale+1)^(0+128)
  6975  0617  0020               	movlb	0	; select bank0
  6976  0618  0861               	movf	?___ftmul+2,w
  6977  0619  0021               	movlb	1	; select bank1
  6978  061A  00A2               	movwf	(?_scale+2)^(0+128)
  6979  061B  0008               	return
  6980  061C                     l4610:	
  6981                           
  6982                           ;doprnt.c: 442: return _npowers_[(unsigned char)scl];
  6983  061C  082A               	movf	scale@scl^(0+128),w
  6984  061D  00A3               	movwf	??_scale^(0+128)
  6985  061E  01A4               	clrf	(??_scale^(0+128)+1)
  6986  061F  0823               	movf	??_scale^(0+128),w
  6987  0620  0020               	movlb	0	; select bank0
  6988  0621  00B0               	movwf	___wmul@multiplier
  6989  0622  0021               	movlb	1	; select bank1
  6990  0623  0824               	movf	(??_scale+1)^(0+128),w
  6991  0624  0020               	movlb	0	; select bank0
  6992  0625  00B1               	movwf	___wmul@multiplier+1
  6993  0626  3003               	movlw	3
  6994  0627  00B2               	movwf	___wmul@multiplicand
  6995  0628  3000               	movlw	0
  6996  0629  00B3               	movwf	___wmul@multiplicand+1
  6997  062A  319D  25A7         	fcall	___wmul
  6998  062C  0020               	movlb	0	; select bank0
  6999  062D  0831               	movf	?___wmul+1,w
  7000  062E  0085               	movwf	5
  7001  062F  0830               	movf	?___wmul,w
  7002  0630  0084               	movwf	4
  7003  0631  304F               	movlw	low (__npowers_| (0+32768))
  7004  0632  0784               	addwf	4,f
  7005  0633  3098               	movlw	high (__npowers_| (0+32768))
  7006  0634  3D85               	addwfc	5,f
  7007  0635  3F00               	moviw [0]fsr0
  7008  0636  0021               	movlb	1	; select bank1
  7009  0637  00A0               	movwf	?_scale^(0+128)
  7010  0638  3F01               	moviw [1]fsr0
  7011  0639  00A1               	movwf	(?_scale+1)^(0+128)
  7012  063A  3F02               	moviw [2]fsr0
  7013  063B  00A2               	movwf	(?_scale+2)^(0+128)
  7014  063C  0008               	return
  7015  063D                     l4614:	
  7016                           
  7017                           ;doprnt.c: 443: };doprnt.c: 444: if(scl>=110)
  7018  063D  082A               	movf	scale@scl^(0+128),w
  7019  063E  3A80               	xorlw	128
  7020  063F  3E12               	addlw	-238
  7021  0640  1C03               	skipc
  7022  0641  2F08               	goto	l4622
  7023                           
  7024                           ;doprnt.c: 445: return _powers_[(unsigned char)(scl/100+18)] * _powers_[(unsigned char)(
      +                          (scl%100)/10+9)] * _powers_[(unsigned char)(scl%10)];
  7025  0642  082A               	movf	scale@scl^(0+128),w
  7026  0643  0020               	movlb	0	; select bank0
  7027  0644  00A2               	movwf	___awmod@dividend
  7028  0645  01A3               	clrf	___awmod@dividend+1
  7029  0646  1BA2               	btfsc	___awmod@dividend,7
  7030  0647  03A3               	decf	___awmod@dividend+1,f
  7031  0648  3064               	movlw	100
  7032  0649  00A0               	movwf	___awmod@divisor
  7033  064A  3000               	movlw	0
  7034  064B  00A1               	movwf	___awmod@divisor+1
  7035  064C  3191  218F  3184   	fcall	___awmod
  7036  064F  0020               	movlb	0	; select bank0
  7037  0650  0821               	movf	?___awmod+1,w
  7038  0651  00AA               	movwf	___awdiv@dividend+1
  7039  0652  0820               	movf	?___awmod,w
  7040  0653  00A9               	movwf	___awdiv@dividend
  7041  0654  300A               	movlw	10
  7042  0655  00A7               	movwf	___awdiv@divisor
  7043  0656  3000               	movlw	0
  7044  0657  00A8               	movwf	___awdiv@divisor+1
  7045  0658  3192  2223  3184   	fcall	___awdiv
  7046  065B  0020               	movlb	0	; select bank0
  7047  065C  0827               	movf	?___awdiv,w
  7048  065D  3E09               	addlw	9
  7049  065E  0021               	movlb	1	; select bank1
  7050  065F  00A3               	movwf	??_scale^(0+128)
  7051  0660  01A4               	clrf	(??_scale^(0+128)+1)
  7052  0661  0823               	movf	??_scale^(0+128),w
  7053  0662  0020               	movlb	0	; select bank0
  7054  0663  00B0               	movwf	___wmul@multiplier
  7055  0664  0021               	movlb	1	; select bank1
  7056  0665  0824               	movf	(??_scale+1)^(0+128),w
  7057  0666  0020               	movlb	0	; select bank0
  7058  0667  00B1               	movwf	___wmul@multiplier+1
  7059  0668  3003               	movlw	3
  7060  0669  00B2               	movwf	___wmul@multiplicand
  7061  066A  3000               	movlw	0
  7062  066B  00B3               	movwf	___wmul@multiplicand+1
  7063  066C  319D  25A7  3184   	fcall	___wmul
  7064  066F  0020               	movlb	0	; select bank0
  7065  0670  0831               	movf	?___wmul+1,w
  7066  0671  0085               	movwf	5
  7067  0672  0830               	movf	?___wmul,w
  7068  0673  0084               	movwf	4
  7069  0674  3028               	movlw	low (__powers_| (0+32768))
  7070  0675  0784               	addwf	4,f
  7071  0676  3098               	movlw	high (__powers_| (0+32768))
  7072  0677  3D85               	addwfc	5,f
  7073  0678  3F00               	moviw [0]fsr0
  7074  0679  00DF               	movwf	___ftmul@f1
  7075  067A  3F01               	moviw [1]fsr0
  7076  067B  00E0               	movwf	___ftmul@f1+1
  7077  067C  3F02               	moviw [2]fsr0
  7078  067D  00E1               	movwf	___ftmul@f1+2
  7079  067E  0021               	movlb	1	; select bank1
  7080  067F  082A               	movf	scale@scl^(0+128),w
  7081  0680  0020               	movlb	0	; select bank0
  7082  0681  00A9               	movwf	___awdiv@dividend
  7083  0682  01AA               	clrf	___awdiv@dividend+1
  7084  0683  1BA9               	btfsc	___awdiv@dividend,7
  7085  0684  03AA               	decf	___awdiv@dividend+1,f
  7086  0685  3064               	movlw	100
  7087  0686  00A7               	movwf	___awdiv@divisor
  7088  0687  3000               	movlw	0
  7089  0688  00A8               	movwf	___awdiv@divisor+1
  7090  0689  3192  2223  3184   	fcall	___awdiv
  7091  068C  0020               	movlb	0	; select bank0
  7092  068D  0827               	movf	?___awdiv,w
  7093  068E  3E12               	addlw	18
  7094  068F  0021               	movlb	1	; select bank1
  7095  0690  00A5               	movwf	(??_scale+2)^(0+128)
  7096  0691  01A6               	clrf	((??_scale+2)^(0+128)+1)
  7097  0692  0825               	movf	(??_scale+2)^(0+128),w
  7098  0693  0020               	movlb	0	; select bank0
  7099  0694  00B0               	movwf	___wmul@multiplier
  7100  0695  0021               	movlb	1	; select bank1
  7101  0696  0826               	movf	(??_scale+3)^(0+128),w
  7102  0697  0020               	movlb	0	; select bank0
  7103  0698  00B1               	movwf	___wmul@multiplier+1
  7104  0699  3003               	movlw	3
  7105  069A  00B2               	movwf	___wmul@multiplicand
  7106  069B  3000               	movlw	0
  7107  069C  00B3               	movwf	___wmul@multiplicand+1
  7108  069D  319D  25A7  3184   	fcall	___wmul
  7109  06A0  0020               	movlb	0	; select bank0
  7110  06A1  0831               	movf	?___wmul+1,w
  7111  06A2  0085               	movwf	5
  7112  06A3  0830               	movf	?___wmul,w
  7113  06A4  0084               	movwf	4
  7114  06A5  3028               	movlw	low (__powers_| (0+32768))
  7115  06A6  0784               	addwf	4,f
  7116  06A7  3098               	movlw	high (__powers_| (0+32768))
  7117  06A8  3D85               	addwfc	5,f
  7118  06A9  3F00               	moviw [0]fsr0
  7119  06AA  00E2               	movwf	___ftmul@f2
  7120  06AB  3F01               	moviw [1]fsr0
  7121  06AC  00E3               	movwf	___ftmul@f2+1
  7122  06AD  3F02               	moviw [2]fsr0
  7123  06AE  00E4               	movwf	___ftmul@f2+2
  7124  06AF  3195  2543  3184   	fcall	___ftmul
  7125  06B2  0020               	movlb	0	; select bank0
  7126  06B3  085F               	movf	?___ftmul,w
  7127  06B4  0021               	movlb	1	; select bank1
  7128  06B5  00A7               	movwf	_scale$1986^(0+128)
  7129  06B6  0020               	movlb	0	; select bank0
  7130  06B7  0860               	movf	?___ftmul+1,w
  7131  06B8  0021               	movlb	1	; select bank1
  7132  06B9  00A8               	movwf	(_scale$1986+1)^(0+128)
  7133  06BA  0020               	movlb	0	; select bank0
  7134  06BB  0861               	movf	?___ftmul+2,w
  7135  06BC  0021               	movlb	1	; select bank1
  7136  06BD  00A9               	movwf	(_scale$1986+2)^(0+128)
  7137                           
  7138                           ;doprnt.c: 445: return _powers_[(unsigned char)(scl/100+18)] * _powers_[(unsigned char)(
      +                          (scl%100)/10+9)] * _powers_[(unsigned char)(scl%10)];
  7139  06BE  082A               	movf	scale@scl^(0+128),w
  7140  06BF  0020               	movlb	0	; select bank0
  7141  06C0  00A2               	movwf	___awmod@dividend
  7142  06C1  01A3               	clrf	___awmod@dividend+1
  7143  06C2  1BA2               	btfsc	___awmod@dividend,7
  7144  06C3  03A3               	decf	___awmod@dividend+1,f
  7145  06C4  300A               	movlw	10
  7146  06C5  00A0               	movwf	___awmod@divisor
  7147  06C6  3000               	movlw	0
  7148  06C7  00A1               	movwf	___awmod@divisor+1
  7149  06C8  3191  218F  3184   	fcall	___awmod
  7150  06CB  0020               	movlb	0	; select bank0
  7151  06CC  0820               	movf	?___awmod,w
  7152  06CD  0021               	movlb	1	; select bank1
  7153  06CE  00A3               	movwf	??_scale^(0+128)
  7154  06CF  01A4               	clrf	(??_scale^(0+128)+1)
  7155  06D0  0823               	movf	??_scale^(0+128),w
  7156  06D1  0020               	movlb	0	; select bank0
  7157  06D2  00B0               	movwf	___wmul@multiplier
  7158  06D3  0021               	movlb	1	; select bank1
  7159  06D4  0824               	movf	(??_scale+1)^(0+128),w
  7160  06D5  0020               	movlb	0	; select bank0
  7161  06D6  00B1               	movwf	___wmul@multiplier+1
  7162  06D7  3003               	movlw	3
  7163  06D8  00B2               	movwf	___wmul@multiplicand
  7164  06D9  3000               	movlw	0
  7165  06DA  00B3               	movwf	___wmul@multiplicand+1
  7166  06DB  319D  25A7  3184   	fcall	___wmul
  7167  06DE  0020               	movlb	0	; select bank0
  7168  06DF  0831               	movf	?___wmul+1,w
  7169  06E0  0085               	movwf	5
  7170  06E1  0830               	movf	?___wmul,w
  7171  06E2  0084               	movwf	4
  7172  06E3  3028               	movlw	low (__powers_| (0+32768))
  7173  06E4  0784               	addwf	4,f
  7174  06E5  3098               	movlw	high (__powers_| (0+32768))
  7175  06E6  3D85               	addwfc	5,f
  7176  06E7  3F00               	moviw [0]fsr0
  7177  06E8  00DF               	movwf	___ftmul@f1
  7178  06E9  3F01               	moviw [1]fsr0
  7179  06EA  00E0               	movwf	___ftmul@f1+1
  7180  06EB  3F02               	moviw [2]fsr0
  7181  06EC  00E1               	movwf	___ftmul@f1+2
  7182  06ED  0021               	movlb	1	; select bank1
  7183  06EE  0827               	movf	_scale$1986^(0+128),w
  7184  06EF  0020               	movlb	0	; select bank0
  7185  06F0  00E2               	movwf	___ftmul@f2
  7186  06F1  0021               	movlb	1	; select bank1
  7187  06F2  0828               	movf	(_scale$1986+1)^(0+128),w
  7188  06F3  0020               	movlb	0	; select bank0
  7189  06F4  00E3               	movwf	___ftmul@f2+1
  7190  06F5  0021               	movlb	1	; select bank1
  7191  06F6  0829               	movf	(_scale$1986+2)^(0+128),w
  7192  06F7  0020               	movlb	0	; select bank0
  7193  06F8  00E4               	movwf	___ftmul@f2+2
  7194  06F9  3195  2543         	fcall	___ftmul
  7195  06FB  0020               	movlb	0	; select bank0
  7196  06FC  085F               	movf	?___ftmul,w
  7197  06FD  0021               	movlb	1	; select bank1
  7198  06FE  00A0               	movwf	?_scale^(0+128)
  7199  06FF  0020               	movlb	0	; select bank0
  7200  0700  0860               	movf	?___ftmul+1,w
  7201  0701  0021               	movlb	1	; select bank1
  7202  0702  00A1               	movwf	(?_scale+1)^(0+128)
  7203  0703  0020               	movlb	0	; select bank0
  7204  0704  0861               	movf	?___ftmul+2,w
  7205  0705  0021               	movlb	1	; select bank1
  7206  0706  00A2               	movwf	(?_scale+2)^(0+128)
  7207  0707  0008               	return
  7208  0708                     l4622:	
  7209                           
  7210                           ;doprnt.c: 446: else if(scl > 10)
  7211  0708  082A               	movf	scale@scl^(0+128),w
  7212  0709  3A80               	xorlw	128
  7213  070A  3E75               	addlw	-139
  7214  070B  1C03               	skipc
  7215  070C  2F7C               	goto	l4628
  7216                           
  7217                           ;doprnt.c: 447: return _powers_[(unsigned char)(scl/10+9)] * _powers_[(unsigned char)(sc
      +                          l%10)];
  7218  070D  082A               	movf	scale@scl^(0+128),w
  7219  070E  0020               	movlb	0	; select bank0
  7220  070F  00A2               	movwf	___awmod@dividend
  7221  0710  01A3               	clrf	___awmod@dividend+1
  7222  0711  1BA2               	btfsc	___awmod@dividend,7
  7223  0712  03A3               	decf	___awmod@dividend+1,f
  7224  0713  300A               	movlw	10
  7225  0714  00A0               	movwf	___awmod@divisor
  7226  0715  3000               	movlw	0
  7227  0716  00A1               	movwf	___awmod@divisor+1
  7228  0717  3191  218F  3184   	fcall	___awmod
  7229  071A  0020               	movlb	0	; select bank0
  7230  071B  0820               	movf	?___awmod,w
  7231  071C  0021               	movlb	1	; select bank1
  7232  071D  00A3               	movwf	??_scale^(0+128)
  7233  071E  01A4               	clrf	(??_scale^(0+128)+1)
  7234  071F  0823               	movf	??_scale^(0+128),w
  7235  0720  0020               	movlb	0	; select bank0
  7236  0721  00B0               	movwf	___wmul@multiplier
  7237  0722  0021               	movlb	1	; select bank1
  7238  0723  0824               	movf	(??_scale+1)^(0+128),w
  7239  0724  0020               	movlb	0	; select bank0
  7240  0725  00B1               	movwf	___wmul@multiplier+1
  7241  0726  3003               	movlw	3
  7242  0727  00B2               	movwf	___wmul@multiplicand
  7243  0728  3000               	movlw	0
  7244  0729  00B3               	movwf	___wmul@multiplicand+1
  7245  072A  319D  25A7  3184   	fcall	___wmul
  7246  072D  0020               	movlb	0	; select bank0
  7247  072E  0831               	movf	?___wmul+1,w
  7248  072F  0085               	movwf	5
  7249  0730  0830               	movf	?___wmul,w
  7250  0731  0084               	movwf	4
  7251  0732  3028               	movlw	low (__powers_| (0+32768))
  7252  0733  0784               	addwf	4,f
  7253  0734  3098               	movlw	high (__powers_| (0+32768))
  7254  0735  3D85               	addwfc	5,f
  7255  0736  3F00               	moviw [0]fsr0
  7256  0737  00DF               	movwf	___ftmul@f1
  7257  0738  3F01               	moviw [1]fsr0
  7258  0739  00E0               	movwf	___ftmul@f1+1
  7259  073A  3F02               	moviw [2]fsr0
  7260  073B  00E1               	movwf	___ftmul@f1+2
  7261  073C  0021               	movlb	1	; select bank1
  7262  073D  082A               	movf	scale@scl^(0+128),w
  7263  073E  0020               	movlb	0	; select bank0
  7264  073F  00A9               	movwf	___awdiv@dividend
  7265  0740  01AA               	clrf	___awdiv@dividend+1
  7266  0741  1BA9               	btfsc	___awdiv@dividend,7
  7267  0742  03AA               	decf	___awdiv@dividend+1,f
  7268  0743  300A               	movlw	10
  7269  0744  00A7               	movwf	___awdiv@divisor
  7270  0745  3000               	movlw	0
  7271  0746  00A8               	movwf	___awdiv@divisor+1
  7272  0747  3192  2223  3184   	fcall	___awdiv
  7273  074A  0020               	movlb	0	; select bank0
  7274  074B  0827               	movf	?___awdiv,w
  7275  074C  3E09               	addlw	9
  7276  074D  0021               	movlb	1	; select bank1
  7277  074E  00A5               	movwf	(??_scale+2)^(0+128)
  7278  074F  01A6               	clrf	((??_scale+2)^(0+128)+1)
  7279  0750  0825               	movf	(??_scale+2)^(0+128),w
  7280  0751  0020               	movlb	0	; select bank0
  7281  0752  00B0               	movwf	___wmul@multiplier
  7282  0753  0021               	movlb	1	; select bank1
  7283  0754  0826               	movf	(??_scale+3)^(0+128),w
  7284  0755  0020               	movlb	0	; select bank0
  7285  0756  00B1               	movwf	___wmul@multiplier+1
  7286  0757  3003               	movlw	3
  7287  0758  00B2               	movwf	___wmul@multiplicand
  7288  0759  3000               	movlw	0
  7289  075A  00B3               	movwf	___wmul@multiplicand+1
  7290  075B  319D  25A7  3184   	fcall	___wmul
  7291  075E  0020               	movlb	0	; select bank0
  7292  075F  0831               	movf	?___wmul+1,w
  7293  0760  0085               	movwf	5
  7294  0761  0830               	movf	?___wmul,w
  7295  0762  0084               	movwf	4
  7296  0763  3028               	movlw	low (__powers_| (0+32768))
  7297  0764  0784               	addwf	4,f
  7298  0765  3098               	movlw	high (__powers_| (0+32768))
  7299  0766  3D85               	addwfc	5,f
  7300  0767  3F00               	moviw [0]fsr0
  7301  0768  00E2               	movwf	___ftmul@f2
  7302  0769  3F01               	moviw [1]fsr0
  7303  076A  00E3               	movwf	___ftmul@f2+1
  7304  076B  3F02               	moviw [2]fsr0
  7305  076C  00E4               	movwf	___ftmul@f2+2
  7306  076D  3195  2543         	fcall	___ftmul
  7307  076F  0020               	movlb	0	; select bank0
  7308  0770  085F               	movf	?___ftmul,w
  7309  0771  0021               	movlb	1	; select bank1
  7310  0772  00A0               	movwf	?_scale^(0+128)
  7311  0773  0020               	movlb	0	; select bank0
  7312  0774  0860               	movf	?___ftmul+1,w
  7313  0775  0021               	movlb	1	; select bank1
  7314  0776  00A1               	movwf	(?_scale+1)^(0+128)
  7315  0777  0020               	movlb	0	; select bank0
  7316  0778  0861               	movf	?___ftmul+2,w
  7317  0779  0021               	movlb	1	; select bank1
  7318  077A  00A2               	movwf	(?_scale+2)^(0+128)
  7319  077B  0008               	return
  7320  077C                     l4628:	
  7321                           
  7322                           ;doprnt.c: 448: return _powers_[(unsigned char)scl];
  7323  077C  082A               	movf	scale@scl^(0+128),w
  7324  077D  00A3               	movwf	??_scale^(0+128)
  7325  077E  01A4               	clrf	(??_scale^(0+128)+1)
  7326  077F  0823               	movf	??_scale^(0+128),w
  7327  0780  0020               	movlb	0	; select bank0
  7328  0781  00B0               	movwf	___wmul@multiplier
  7329  0782  0021               	movlb	1	; select bank1
  7330  0783  0824               	movf	(??_scale+1)^(0+128),w
  7331  0784  0020               	movlb	0	; select bank0
  7332  0785  00B1               	movwf	___wmul@multiplier+1
  7333  0786  3003               	movlw	3
  7334  0787  00B2               	movwf	___wmul@multiplicand
  7335  0788  3000               	movlw	0
  7336  0789  00B3               	movwf	___wmul@multiplicand+1
  7337  078A  319D  25A7         	fcall	___wmul
  7338  078C  0020               	movlb	0	; select bank0
  7339  078D  0831               	movf	?___wmul+1,w
  7340  078E  0085               	movwf	5
  7341  078F  0830               	movf	?___wmul,w
  7342  0790  0084               	movwf	4
  7343  0791  3028               	movlw	low (__powers_| (0+32768))
  7344  0792  0784               	addwf	4,f
  7345  0793  3098               	movlw	high (__powers_| (0+32768))
  7346  0794  3D85               	addwfc	5,f
  7347  0795  3F00               	moviw [0]fsr0
  7348  0796  0021               	movlb	1	; select bank1
  7349  0797  00A0               	movwf	?_scale^(0+128)
  7350  0798  3F01               	moviw [1]fsr0
  7351  0799  00A1               	movwf	(?_scale+1)^(0+128)
  7352  079A  3F02               	moviw [2]fsr0
  7353  079B  00A2               	movwf	(?_scale+2)^(0+128)
  7354  079C  0008               	return
  7355  079D                     __end_of_scale:	
  7356                           
  7357                           	psect	text13
  7358  118F                     __ptext13:	
  7359 ;; *************** function ___awmod *****************
  7360 ;; Defined at:
  7361 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\awmod.c"
  7362 ;; Parameters:    Size  Location     Type
  7363 ;;  divisor         2    0[BANK0 ] int 
  7364 ;;  dividend        2    2[BANK0 ] int 
  7365 ;; Auto vars:     Size  Location     Type
  7366 ;;  sign            1    6[BANK0 ] unsigned char 
  7367 ;;  counter         1    5[BANK0 ] unsigned char 
  7368 ;; Return value:  Size  Location     Type
  7369 ;;                  2    0[BANK0 ] int 
  7370 ;; Registers used:
  7371 ;;		wreg, status,2, status,0
  7372 ;; Tracked objects:
  7373 ;;		On entry : 0/0
  7374 ;;		On exit  : 0/0
  7375 ;;		Unchanged: 0/0
  7376 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7377 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7378 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7379 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7380 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7381 ;;Total ram usage:        7 bytes
  7382 ;; Hardware stack levels used:    1
  7383 ;; Hardware stack levels required when called:    7
  7384 ;; This function calls:
  7385 ;;		Nothing
  7386 ;; This function is called by:
  7387 ;;		_scale
  7388 ;; This function uses a non-reentrant model
  7389 ;;
  7390                           
  7391                           
  7392                           ;psect for function ___awmod
  7393  118F                     ___awmod:	
  7394                           
  7395                           ;incstack = 0
  7396                           ; Regs used in ___awmod: [wreg+status,2+status,0]
  7397  118F  0020               	movlb	0	; select bank0
  7398  1190  01A6               	clrf	___awmod@sign
  7399  1191  1FA3               	btfss	___awmod@dividend+1,7
  7400  1192  299A               	goto	l4280
  7401  1193  09A2               	comf	___awmod@dividend,f
  7402  1194  09A3               	comf	___awmod@dividend+1,f
  7403  1195  0AA2               	incf	___awmod@dividend,f
  7404  1196  1903               	skipnz
  7405  1197  0AA3               	incf	___awmod@dividend+1,f
  7406  1198  01A6               	clrf	___awmod@sign
  7407  1199  0AA6               	incf	___awmod@sign,f
  7408  119A                     l4280:	
  7409  119A  1FA1               	btfss	___awmod@divisor+1,7
  7410  119B  29A1               	goto	l4284
  7411  119C  09A0               	comf	___awmod@divisor,f
  7412  119D  09A1               	comf	___awmod@divisor+1,f
  7413  119E  0AA0               	incf	___awmod@divisor,f
  7414  119F  1903               	skipnz
  7415  11A0  0AA1               	incf	___awmod@divisor+1,f
  7416  11A1                     l4284:	
  7417  11A1  0820               	movf	___awmod@divisor,w
  7418  11A2  0421               	iorwf	___awmod@divisor+1,w
  7419  11A3  1903               	btfsc	3,2
  7420  11A4  29C8               	goto	l4302
  7421  11A5  01A5               	clrf	___awmod@counter
  7422  11A6  0AA5               	incf	___awmod@counter,f
  7423  11A7                     l4292:	
  7424  11A7  1BA1               	btfsc	___awmod@divisor+1,7
  7425  11A8  29B3               	goto	l4294
  7426  11A9  3001               	movlw	1
  7427  11AA                     u4995:	
  7428  11AA  35A0               	lslf	___awmod@divisor,f
  7429  11AB  0DA1               	rlf	___awmod@divisor+1,f
  7430  11AC  0B89               	decfsz	9,f
  7431  11AD  29AA               	goto	u4995
  7432  11AE  3001               	movlw	1
  7433  11AF  00A4               	movwf	??___awmod
  7434  11B0  0824               	movf	??___awmod,w
  7435  11B1  07A5               	addwf	___awmod@counter,f
  7436  11B2  29A7               	goto	l4292
  7437  11B3                     l4294:	
  7438  11B3  0821               	movf	___awmod@divisor+1,w
  7439  11B4  0223               	subwf	___awmod@dividend+1,w
  7440  11B5  1D03               	skipz
  7441  11B6  29B9               	goto	u5015
  7442  11B7  0820               	movf	___awmod@divisor,w
  7443  11B8  0222               	subwf	___awmod@dividend,w
  7444  11B9                     u5015:	
  7445  11B9  1C03               	skipc
  7446  11BA  29BF               	goto	l4298
  7447  11BB  0820               	movf	___awmod@divisor,w
  7448  11BC  02A2               	subwf	___awmod@dividend,f
  7449  11BD  0821               	movf	___awmod@divisor+1,w
  7450  11BE  3BA3               	subwfb	___awmod@dividend+1,f
  7451  11BF                     l4298:	
  7452  11BF  3001               	movlw	1
  7453  11C0                     u5025:	
  7454  11C0  36A1               	lsrf	___awmod@divisor+1,f
  7455  11C1  0CA0               	rrf	___awmod@divisor,f
  7456  11C2  0B89               	decfsz	9,f
  7457  11C3  29C0               	goto	u5025
  7458  11C4  3001               	movlw	1
  7459  11C5  02A5               	subwf	___awmod@counter,f
  7460  11C6  1D03               	btfss	3,2
  7461  11C7  29B3               	goto	l4294
  7462  11C8                     l4302:	
  7463  11C8  0826               	movf	___awmod@sign,w
  7464  11C9  1903               	btfsc	3,2
  7465  11CA  29D0               	goto	l4306
  7466  11CB  09A2               	comf	___awmod@dividend,f
  7467  11CC  09A3               	comf	___awmod@dividend+1,f
  7468  11CD  0AA2               	incf	___awmod@dividend,f
  7469  11CE  1903               	skipnz
  7470  11CF  0AA3               	incf	___awmod@dividend+1,f
  7471  11D0                     l4306:	
  7472  11D0  0823               	movf	___awmod@dividend+1,w
  7473  11D1  00A1               	movwf	?___awmod+1
  7474  11D2  0822               	movf	___awmod@dividend,w
  7475  11D3  00A0               	movwf	?___awmod
  7476  11D4  0008               	return
  7477  11D5                     __end_of___awmod:	
  7478                           
  7479                           	psect	text14
  7480  1223                     __ptext14:	
  7481 ;; *************** function ___awdiv *****************
  7482 ;; Defined at:
  7483 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\awdiv.c"
  7484 ;; Parameters:    Size  Location     Type
  7485 ;;  divisor         2    7[BANK0 ] int 
  7486 ;;  dividend        2    9[BANK0 ] int 
  7487 ;; Auto vars:     Size  Location     Type
  7488 ;;  quotient        2   14[BANK0 ] int 
  7489 ;;  sign            1   13[BANK0 ] unsigned char 
  7490 ;;  counter         1   12[BANK0 ] unsigned char 
  7491 ;; Return value:  Size  Location     Type
  7492 ;;                  2    7[BANK0 ] int 
  7493 ;; Registers used:
  7494 ;;		wreg, status,2, status,0
  7495 ;; Tracked objects:
  7496 ;;		On entry : 0/0
  7497 ;;		On exit  : 0/0
  7498 ;;		Unchanged: 0/0
  7499 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7500 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7501 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7502 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7503 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7504 ;;Total ram usage:        9 bytes
  7505 ;; Hardware stack levels used:    1
  7506 ;; Hardware stack levels required when called:    7
  7507 ;; This function calls:
  7508 ;;		Nothing
  7509 ;; This function is called by:
  7510 ;;		_scale
  7511 ;;		_sprintf
  7512 ;; This function uses a non-reentrant model
  7513 ;;
  7514                           
  7515                           
  7516                           ;psect for function ___awdiv
  7517  1223                     ___awdiv:	
  7518                           
  7519                           ;incstack = 0
  7520                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  7521  1223  0020               	movlb	0	; select bank0
  7522  1224  01AD               	clrf	___awdiv@sign
  7523  1225  1FA8               	btfss	___awdiv@divisor+1,7
  7524  1226  2A2E               	goto	l4236
  7525  1227  09A7               	comf	___awdiv@divisor,f
  7526  1228  09A8               	comf	___awdiv@divisor+1,f
  7527  1229  0AA7               	incf	___awdiv@divisor,f
  7528  122A  1903               	skipnz
  7529  122B  0AA8               	incf	___awdiv@divisor+1,f
  7530  122C  01AD               	clrf	___awdiv@sign
  7531  122D  0AAD               	incf	___awdiv@sign,f
  7532  122E                     l4236:	
  7533  122E  1FAA               	btfss	___awdiv@dividend+1,7
  7534  122F  2A39               	goto	l4242
  7535  1230  09A9               	comf	___awdiv@dividend,f
  7536  1231  09AA               	comf	___awdiv@dividend+1,f
  7537  1232  0AA9               	incf	___awdiv@dividend,f
  7538  1233  1903               	skipnz
  7539  1234  0AAA               	incf	___awdiv@dividend+1,f
  7540  1235  3001               	movlw	1
  7541  1236  00AB               	movwf	??___awdiv
  7542  1237  082B               	movf	??___awdiv,w
  7543  1238  06AD               	xorwf	___awdiv@sign,f
  7544  1239                     l4242:	
  7545  1239  01AE               	clrf	___awdiv@quotient
  7546  123A  01AF               	clrf	___awdiv@quotient+1
  7547  123B  0827               	movf	___awdiv@divisor,w
  7548  123C  0428               	iorwf	___awdiv@divisor+1,w
  7549  123D  1903               	btfsc	3,2
  7550  123E  2A68               	goto	l4264
  7551  123F  01AC               	clrf	___awdiv@counter
  7552  1240  0AAC               	incf	___awdiv@counter,f
  7553  1241                     l4252:	
  7554  1241  1BA8               	btfsc	___awdiv@divisor+1,7
  7555  1242  2A4D               	goto	l4254
  7556  1243  3001               	movlw	1
  7557  1244                     u4895:	
  7558  1244  35A7               	lslf	___awdiv@divisor,f
  7559  1245  0DA8               	rlf	___awdiv@divisor+1,f
  7560  1246  0B89               	decfsz	9,f
  7561  1247  2A44               	goto	u4895
  7562  1248  3001               	movlw	1
  7563  1249  00AB               	movwf	??___awdiv
  7564  124A  082B               	movf	??___awdiv,w
  7565  124B  07AC               	addwf	___awdiv@counter,f
  7566  124C  2A41               	goto	l4252
  7567  124D                     l4254:	
  7568  124D  3001               	movlw	1
  7569  124E                     u4915:	
  7570  124E  35AE               	lslf	___awdiv@quotient,f
  7571  124F  0DAF               	rlf	___awdiv@quotient+1,f
  7572  1250  0B89               	decfsz	9,f
  7573  1251  2A4E               	goto	u4915
  7574  1252  0828               	movf	___awdiv@divisor+1,w
  7575  1253  022A               	subwf	___awdiv@dividend+1,w
  7576  1254  1D03               	skipz
  7577  1255  2A58               	goto	u4925
  7578  1256  0827               	movf	___awdiv@divisor,w
  7579  1257  0229               	subwf	___awdiv@dividend,w
  7580  1258                     u4925:	
  7581  1258  1C03               	skipc
  7582  1259  2A5F               	goto	l4260
  7583  125A  0827               	movf	___awdiv@divisor,w
  7584  125B  02A9               	subwf	___awdiv@dividend,f
  7585  125C  0828               	movf	___awdiv@divisor+1,w
  7586  125D  3BAA               	subwfb	___awdiv@dividend+1,f
  7587  125E  142E               	bsf	___awdiv@quotient,0
  7588  125F                     l4260:	
  7589  125F  3001               	movlw	1
  7590  1260                     u4935:	
  7591  1260  36A8               	lsrf	___awdiv@divisor+1,f
  7592  1261  0CA7               	rrf	___awdiv@divisor,f
  7593  1262  0B89               	decfsz	9,f
  7594  1263  2A60               	goto	u4935
  7595  1264  3001               	movlw	1
  7596  1265  02AC               	subwf	___awdiv@counter,f
  7597  1266  1D03               	btfss	3,2
  7598  1267  2A4D               	goto	l4254
  7599  1268                     l4264:	
  7600  1268  082D               	movf	___awdiv@sign,w
  7601  1269  1903               	btfsc	3,2
  7602  126A  2A70               	goto	l4268
  7603  126B  09AE               	comf	___awdiv@quotient,f
  7604  126C  09AF               	comf	___awdiv@quotient+1,f
  7605  126D  0AAE               	incf	___awdiv@quotient,f
  7606  126E  1903               	skipnz
  7607  126F  0AAF               	incf	___awdiv@quotient+1,f
  7608  1270                     l4268:	
  7609  1270  082F               	movf	___awdiv@quotient+1,w
  7610  1271  00A8               	movwf	?___awdiv+1
  7611  1272  082E               	movf	___awdiv@quotient,w
  7612  1273  00A7               	movwf	?___awdiv
  7613  1274  0008               	return
  7614  1275                     __end_of___awdiv:	
  7615                           
  7616                           	psect	text15
  7617  0C41                     __ptext15:	
  7618 ;; *************** function _fround *****************
  7619 ;; Defined at:
  7620 ;;		line 417 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\doprnt.c"
  7621 ;; Parameters:    Size  Location     Type
  7622 ;;  prec            1    wreg     unsigned char 
  7623 ;; Auto vars:     Size  Location     Type
  7624 ;;  prec            1   13[BANK1 ] unsigned char 
  7625 ;; Return value:  Size  Location     Type
  7626 ;;                  3    0[BANK1 ] unsigned char 
  7627 ;; Registers used:
  7628 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  7629 ;; Tracked objects:
  7630 ;;		On entry : 0/0
  7631 ;;		On exit  : 0/0
  7632 ;;		Unchanged: 0/0
  7633 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7634 ;;      Params:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0
  7635 ;;      Locals:         0       0       7       0       0       0       0       0       0       0       0       0       
      +0       0
  7636 ;;      Temps:          0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  7637 ;;      Totals:         0       0      14       0       0       0       0       0       0       0       0       0       
      +0       0
  7638 ;;Total ram usage:       14 bytes
  7639 ;; Hardware stack levels used:    1
  7640 ;; Hardware stack levels required when called:    9
  7641 ;; This function calls:
  7642 ;;		___ftmul
  7643 ;;		___lwdiv
  7644 ;;		___lwmod
  7645 ;;		___wmul
  7646 ;; This function is called by:
  7647 ;;		_sprintf
  7648 ;; This function uses a non-reentrant model
  7649 ;;
  7650                           
  7651                           
  7652                           ;psect for function _fround
  7653  0C41                     _fround:	
  7654                           
  7655                           ;incstack = 0
  7656                           ; Regs used in _fround: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  7657                           ;fround@prec stored from wreg
  7658  0C41  0021               	movlb	1	; select bank1
  7659  0C42  00AD               	movwf	fround@prec^(0+128)
  7660                           
  7661                           ;doprnt.c: 421: if(prec>=110)
  7662  0C43  306E               	movlw	110
  7663  0C44  022D               	subwf	fround@prec^(0+128),w
  7664  0C45  1C03               	skipc
  7665  0C46  2D2A               	goto	l4580
  7666                           
  7667                           ;doprnt.c: 422: return 0.5 * _npowers_[prec/100U+18U] * _npowers_[(prec%100U)/10U+9U] * 
      +                          _npowers_[prec%10U];
  7668  0C47  300A               	movlw	10
  7669  0C48  0020               	movlb	0	; select bank0
  7670  0C49  00A6               	movwf	___lwdiv@divisor
  7671  0C4A  3000               	movlw	0
  7672  0C4B  00A7               	movwf	___lwdiv@divisor+1
  7673  0C4C  0021               	movlb	1	; select bank1
  7674  0C4D  082D               	movf	fround@prec^(0+128),w
  7675  0C4E  00A3               	movwf	??_fround^(0+128)
  7676  0C4F  01A4               	clrf	(??_fround^(0+128)+1)
  7677  0C50  0823               	movf	??_fround^(0+128),w
  7678  0C51  0020               	movlb	0	; select bank0
  7679  0C52  00A2               	movwf	___lwmod@dividend
  7680  0C53  0021               	movlb	1	; select bank1
  7681  0C54  0824               	movf	(??_fround+1)^(0+128),w
  7682  0C55  0020               	movlb	0	; select bank0
  7683  0C56  00A3               	movwf	___lwmod@dividend+1
  7684  0C57  3064               	movlw	100
  7685  0C58  00A0               	movwf	___lwmod@divisor
  7686  0C59  3000               	movlw	0
  7687  0C5A  00A1               	movwf	___lwmod@divisor+1
  7688  0C5B  319F  2733  318C   	fcall	___lwmod
  7689  0C5E  0020               	movlb	0	; select bank0
  7690  0C5F  0821               	movf	?___lwmod+1,w
  7691  0C60  00A9               	movwf	___lwdiv@dividend+1
  7692  0C61  0820               	movf	?___lwmod,w
  7693  0C62  00A8               	movwf	___lwdiv@dividend
  7694  0C63  319F  2793  318C   	fcall	___lwdiv
  7695  0C66  0020               	movlb	0	; select bank0
  7696  0C67  0826               	movf	?___lwdiv,w
  7697  0C68  3E09               	addlw	9
  7698  0C69  00B0               	movwf	___wmul@multiplier
  7699  0C6A  3000               	movlw	0
  7700  0C6B  3D27               	addwfc	?___lwdiv+1,w
  7701  0C6C  00B1               	movwf	___wmul@multiplier+1
  7702  0C6D  3003               	movlw	3
  7703  0C6E  00B2               	movwf	___wmul@multiplicand
  7704  0C6F  3000               	movlw	0
  7705  0C70  00B3               	movwf	___wmul@multiplicand+1
  7706  0C71  319D  25A7  318C   	fcall	___wmul
  7707  0C74  0020               	movlb	0	; select bank0
  7708  0C75  0831               	movf	?___wmul+1,w
  7709  0C76  0085               	movwf	5
  7710  0C77  0830               	movf	?___wmul,w
  7711  0C78  0084               	movwf	4
  7712  0C79  304F               	movlw	low (__npowers_| (0+32768))
  7713  0C7A  0784               	addwf	4,f
  7714  0C7B  3098               	movlw	high (__npowers_| (0+32768))
  7715  0C7C  3D85               	addwfc	5,f
  7716  0C7D  3F00               	moviw [0]fsr0
  7717  0C7E  00DF               	movwf	___ftmul@f1
  7718  0C7F  3F01               	moviw [1]fsr0
  7719  0C80  00E0               	movwf	___ftmul@f1+1
  7720  0C81  3F02               	moviw [2]fsr0
  7721  0C82  00E1               	movwf	___ftmul@f1+2
  7722  0C83  3064               	movlw	100
  7723  0C84  00A6               	movwf	___lwdiv@divisor
  7724  0C85  3000               	movlw	0
  7725  0C86  00A7               	movwf	___lwdiv@divisor+1
  7726  0C87  0021               	movlb	1	; select bank1
  7727  0C88  082D               	movf	fround@prec^(0+128),w
  7728  0C89  00A5               	movwf	(??_fround+2)^(0+128)
  7729  0C8A  01A6               	clrf	((??_fround+2)^(0+128)+1)
  7730  0C8B  0825               	movf	(??_fround+2)^(0+128),w
  7731  0C8C  0020               	movlb	0	; select bank0
  7732  0C8D  00A8               	movwf	___lwdiv@dividend
  7733  0C8E  0021               	movlb	1	; select bank1
  7734  0C8F  0826               	movf	(??_fround+3)^(0+128),w
  7735  0C90  0020               	movlb	0	; select bank0
  7736  0C91  00A9               	movwf	___lwdiv@dividend+1
  7737  0C92  319F  2793  318C   	fcall	___lwdiv
  7738  0C95  0020               	movlb	0	; select bank0
  7739  0C96  0826               	movf	?___lwdiv,w
  7740  0C97  3E12               	addlw	18
  7741  0C98  00B0               	movwf	___wmul@multiplier
  7742  0C99  3000               	movlw	0
  7743  0C9A  3D27               	addwfc	?___lwdiv+1,w
  7744  0C9B  00B1               	movwf	___wmul@multiplier+1
  7745  0C9C  3003               	movlw	3
  7746  0C9D  00B2               	movwf	___wmul@multiplicand
  7747  0C9E  3000               	movlw	0
  7748  0C9F  00B3               	movwf	___wmul@multiplicand+1
  7749  0CA0  319D  25A7  318C   	fcall	___wmul
  7750  0CA3  0020               	movlb	0	; select bank0
  7751  0CA4  0831               	movf	?___wmul+1,w
  7752  0CA5  0085               	movwf	5
  7753  0CA6  0830               	movf	?___wmul,w
  7754  0CA7  0084               	movwf	4
  7755  0CA8  304F               	movlw	low (__npowers_| (0+32768))
  7756  0CA9  0784               	addwf	4,f
  7757  0CAA  3098               	movlw	high (__npowers_| (0+32768))
  7758  0CAB  3D85               	addwfc	5,f
  7759  0CAC  3F00               	moviw [0]fsr0
  7760  0CAD  00E2               	movwf	___ftmul@f2
  7761  0CAE  3F01               	moviw [1]fsr0
  7762  0CAF  00E3               	movwf	___ftmul@f2+1
  7763  0CB0  3F02               	moviw [2]fsr0
  7764  0CB1  00E4               	movwf	___ftmul@f2+2
  7765  0CB2  3195  2543  318C   	fcall	___ftmul
  7766  0CB5  0020               	movlb	0	; select bank0
  7767  0CB6  085F               	movf	?___ftmul,w
  7768  0CB7  0021               	movlb	1	; select bank1
  7769  0CB8  00AA               	movwf	_fround$1984^(0+128)
  7770  0CB9  0020               	movlb	0	; select bank0
  7771  0CBA  0860               	movf	?___ftmul+1,w
  7772  0CBB  0021               	movlb	1	; select bank1
  7773  0CBC  00AB               	movwf	(_fround$1984+1)^(0+128)
  7774  0CBD  0020               	movlb	0	; select bank0
  7775  0CBE  0861               	movf	?___ftmul+2,w
  7776  0CBF  0021               	movlb	1	; select bank1
  7777  0CC0  00AC               	movwf	(_fround$1984+2)^(0+128)
  7778                           
  7779                           ;doprnt.c: 422: return 0.5 * _npowers_[prec/100U+18U] * _npowers_[(prec%100U)/10U+9U] * 
      +                          _npowers_[prec%10U];
  7780  0CC1  082D               	movf	fround@prec^(0+128),w
  7781  0CC2  00A3               	movwf	??_fround^(0+128)
  7782  0CC3  01A4               	clrf	(??_fround^(0+128)+1)
  7783  0CC4  0823               	movf	??_fround^(0+128),w
  7784  0CC5  0020               	movlb	0	; select bank0
  7785  0CC6  00A2               	movwf	___lwmod@dividend
  7786  0CC7  0021               	movlb	1	; select bank1
  7787  0CC8  0824               	movf	(??_fround+1)^(0+128),w
  7788  0CC9  0020               	movlb	0	; select bank0
  7789  0CCA  00A3               	movwf	___lwmod@dividend+1
  7790  0CCB  300A               	movlw	10
  7791  0CCC  00A0               	movwf	___lwmod@divisor
  7792  0CCD  3000               	movlw	0
  7793  0CCE  00A1               	movwf	___lwmod@divisor+1
  7794  0CCF  319F  2733  318C   	fcall	___lwmod
  7795  0CD2  0020               	movlb	0	; select bank0
  7796  0CD3  0821               	movf	?___lwmod+1,w
  7797  0CD4  00B1               	movwf	___wmul@multiplier+1
  7798  0CD5  0820               	movf	?___lwmod,w
  7799  0CD6  00B0               	movwf	___wmul@multiplier
  7800  0CD7  3003               	movlw	3
  7801  0CD8  00B2               	movwf	___wmul@multiplicand
  7802  0CD9  3000               	movlw	0
  7803  0CDA  00B3               	movwf	___wmul@multiplicand+1
  7804  0CDB  319D  25A7  318C   	fcall	___wmul
  7805  0CDE  0020               	movlb	0	; select bank0
  7806  0CDF  0831               	movf	?___wmul+1,w
  7807  0CE0  0085               	movwf	5
  7808  0CE1  0830               	movf	?___wmul,w
  7809  0CE2  0084               	movwf	4
  7810  0CE3  304F               	movlw	low (__npowers_| (0+32768))
  7811  0CE4  0784               	addwf	4,f
  7812  0CE5  3098               	movlw	high (__npowers_| (0+32768))
  7813  0CE6  3D85               	addwfc	5,f
  7814  0CE7  3F00               	moviw [0]fsr0
  7815  0CE8  00DF               	movwf	___ftmul@f1
  7816  0CE9  3F01               	moviw [1]fsr0
  7817  0CEA  00E0               	movwf	___ftmul@f1+1
  7818  0CEB  3F02               	moviw [2]fsr0
  7819  0CEC  00E1               	movwf	___ftmul@f1+2
  7820  0CED  0021               	movlb	1	; select bank1
  7821  0CEE  082A               	movf	_fround$1984^(0+128),w
  7822  0CEF  0020               	movlb	0	; select bank0
  7823  0CF0  00E2               	movwf	___ftmul@f2
  7824  0CF1  0021               	movlb	1	; select bank1
  7825  0CF2  082B               	movf	(_fround$1984+1)^(0+128),w
  7826  0CF3  0020               	movlb	0	; select bank0
  7827  0CF4  00E3               	movwf	___ftmul@f2+1
  7828  0CF5  0021               	movlb	1	; select bank1
  7829  0CF6  082C               	movf	(_fround$1984+2)^(0+128),w
  7830  0CF7  0020               	movlb	0	; select bank0
  7831  0CF8  00E4               	movwf	___ftmul@f2+2
  7832  0CF9  3195  2543  318C   	fcall	___ftmul
  7833  0CFC  0020               	movlb	0	; select bank0
  7834  0CFD  085F               	movf	?___ftmul,w
  7835  0CFE  0021               	movlb	1	; select bank1
  7836  0CFF  00A7               	movwf	_fround$1985^(0+128)
  7837  0D00  0020               	movlb	0	; select bank0
  7838  0D01  0860               	movf	?___ftmul+1,w
  7839  0D02  0021               	movlb	1	; select bank1
  7840  0D03  00A8               	movwf	(_fround$1985+1)^(0+128)
  7841  0D04  0020               	movlb	0	; select bank0
  7842  0D05  0861               	movf	?___ftmul+2,w
  7843  0D06  0021               	movlb	1	; select bank1
  7844  0D07  00A9               	movwf	(_fround$1985+2)^(0+128)
  7845                           
  7846                           ;doprnt.c: 422: return 0.5 * _npowers_[prec/100U+18U] * _npowers_[(prec%100U)/10U+9U] * 
      +                          _npowers_[prec%10U];
  7847  0D08  3000               	movlw	0
  7848  0D09  0020               	movlb	0	; select bank0
  7849  0D0A  00DF               	movwf	___ftmul@f1
  7850  0D0B  3000               	movlw	0
  7851  0D0C  00E0               	movwf	___ftmul@f1+1
  7852  0D0D  303F               	movlw	63
  7853  0D0E  00E1               	movwf	___ftmul@f1+2
  7854  0D0F  0021               	movlb	1	; select bank1
  7855  0D10  0827               	movf	_fround$1985^(0+128),w
  7856  0D11  0020               	movlb	0	; select bank0
  7857  0D12  00E2               	movwf	___ftmul@f2
  7858  0D13  0021               	movlb	1	; select bank1
  7859  0D14  0828               	movf	(_fround$1985+1)^(0+128),w
  7860  0D15  0020               	movlb	0	; select bank0
  7861  0D16  00E3               	movwf	___ftmul@f2+1
  7862  0D17  0021               	movlb	1	; select bank1
  7863  0D18  0829               	movf	(_fround$1985+2)^(0+128),w
  7864  0D19  0020               	movlb	0	; select bank0
  7865  0D1A  00E4               	movwf	___ftmul@f2+2
  7866  0D1B  3195  2543         	fcall	___ftmul
  7867  0D1D  0020               	movlb	0	; select bank0
  7868  0D1E  085F               	movf	?___ftmul,w
  7869  0D1F  0021               	movlb	1	; select bank1
  7870  0D20  00A0               	movwf	?_fround^(0+128)
  7871  0D21  0020               	movlb	0	; select bank0
  7872  0D22  0860               	movf	?___ftmul+1,w
  7873  0D23  0021               	movlb	1	; select bank1
  7874  0D24  00A1               	movwf	(?_fround+1)^(0+128)
  7875  0D25  0020               	movlb	0	; select bank0
  7876  0D26  0861               	movf	?___ftmul+2,w
  7877  0D27  0021               	movlb	1	; select bank1
  7878  0D28  00A2               	movwf	(?_fround+2)^(0+128)
  7879  0D29  0008               	return
  7880  0D2A                     l4580:	
  7881                           
  7882                           ;doprnt.c: 423: else if(prec > 10)
  7883  0D2A  300B               	movlw	11
  7884  0D2B  022D               	subwf	fround@prec^(0+128),w
  7885  0D2C  1C03               	skipc
  7886  0D2D  2DBA               	goto	l4588
  7887                           
  7888                           ;doprnt.c: 424: return 0.5 * _npowers_[prec/10U+9U] * _npowers_[prec%10U];
  7889  0D2E  082D               	movf	fround@prec^(0+128),w
  7890  0D2F  00A3               	movwf	??_fround^(0+128)
  7891  0D30  01A4               	clrf	(??_fround^(0+128)+1)
  7892  0D31  0823               	movf	??_fround^(0+128),w
  7893  0D32  0020               	movlb	0	; select bank0
  7894  0D33  00A2               	movwf	___lwmod@dividend
  7895  0D34  0021               	movlb	1	; select bank1
  7896  0D35  0824               	movf	(??_fround+1)^(0+128),w
  7897  0D36  0020               	movlb	0	; select bank0
  7898  0D37  00A3               	movwf	___lwmod@dividend+1
  7899  0D38  300A               	movlw	10
  7900  0D39  00A0               	movwf	___lwmod@divisor
  7901  0D3A  3000               	movlw	0
  7902  0D3B  00A1               	movwf	___lwmod@divisor+1
  7903  0D3C  319F  2733  318C   	fcall	___lwmod
  7904  0D3F  0020               	movlb	0	; select bank0
  7905  0D40  0821               	movf	?___lwmod+1,w
  7906  0D41  00B1               	movwf	___wmul@multiplier+1
  7907  0D42  0820               	movf	?___lwmod,w
  7908  0D43  00B0               	movwf	___wmul@multiplier
  7909  0D44  3003               	movlw	3
  7910  0D45  00B2               	movwf	___wmul@multiplicand
  7911  0D46  3000               	movlw	0
  7912  0D47  00B3               	movwf	___wmul@multiplicand+1
  7913  0D48  319D  25A7  318C   	fcall	___wmul
  7914  0D4B  0020               	movlb	0	; select bank0
  7915  0D4C  0831               	movf	?___wmul+1,w
  7916  0D4D  0085               	movwf	5
  7917  0D4E  0830               	movf	?___wmul,w
  7918  0D4F  0084               	movwf	4
  7919  0D50  304F               	movlw	low (__npowers_| (0+32768))
  7920  0D51  0784               	addwf	4,f
  7921  0D52  3098               	movlw	high (__npowers_| (0+32768))
  7922  0D53  3D85               	addwfc	5,f
  7923  0D54  3F00               	moviw [0]fsr0
  7924  0D55  00DF               	movwf	___ftmul@f1
  7925  0D56  3F01               	moviw [1]fsr0
  7926  0D57  00E0               	movwf	___ftmul@f1+1
  7927  0D58  3F02               	moviw [2]fsr0
  7928  0D59  00E1               	movwf	___ftmul@f1+2
  7929  0D5A  300A               	movlw	10
  7930  0D5B  00A6               	movwf	___lwdiv@divisor
  7931  0D5C  3000               	movlw	0
  7932  0D5D  00A7               	movwf	___lwdiv@divisor+1
  7933  0D5E  0021               	movlb	1	; select bank1
  7934  0D5F  082D               	movf	fround@prec^(0+128),w
  7935  0D60  00A5               	movwf	(??_fround+2)^(0+128)
  7936  0D61  01A6               	clrf	((??_fround+2)^(0+128)+1)
  7937  0D62  0825               	movf	(??_fround+2)^(0+128),w
  7938  0D63  0020               	movlb	0	; select bank0
  7939  0D64  00A8               	movwf	___lwdiv@dividend
  7940  0D65  0021               	movlb	1	; select bank1
  7941  0D66  0826               	movf	(??_fround+3)^(0+128),w
  7942  0D67  0020               	movlb	0	; select bank0
  7943  0D68  00A9               	movwf	___lwdiv@dividend+1
  7944  0D69  319F  2793  318C   	fcall	___lwdiv
  7945  0D6C  0020               	movlb	0	; select bank0
  7946  0D6D  0826               	movf	?___lwdiv,w
  7947  0D6E  3E09               	addlw	9
  7948  0D6F  00B0               	movwf	___wmul@multiplier
  7949  0D70  3000               	movlw	0
  7950  0D71  3D27               	addwfc	?___lwdiv+1,w
  7951  0D72  00B1               	movwf	___wmul@multiplier+1
  7952  0D73  3003               	movlw	3
  7953  0D74  00B2               	movwf	___wmul@multiplicand
  7954  0D75  3000               	movlw	0
  7955  0D76  00B3               	movwf	___wmul@multiplicand+1
  7956  0D77  319D  25A7  318C   	fcall	___wmul
  7957  0D7A  0020               	movlb	0	; select bank0
  7958  0D7B  0831               	movf	?___wmul+1,w
  7959  0D7C  0085               	movwf	5
  7960  0D7D  0830               	movf	?___wmul,w
  7961  0D7E  0084               	movwf	4
  7962  0D7F  304F               	movlw	low (__npowers_| (0+32768))
  7963  0D80  0784               	addwf	4,f
  7964  0D81  3098               	movlw	high (__npowers_| (0+32768))
  7965  0D82  3D85               	addwfc	5,f
  7966  0D83  3F00               	moviw [0]fsr0
  7967  0D84  00E2               	movwf	___ftmul@f2
  7968  0D85  3F01               	moviw [1]fsr0
  7969  0D86  00E3               	movwf	___ftmul@f2+1
  7970  0D87  3F02               	moviw [2]fsr0
  7971  0D88  00E4               	movwf	___ftmul@f2+2
  7972  0D89  3195  2543  318C   	fcall	___ftmul
  7973  0D8C  0020               	movlb	0	; select bank0
  7974  0D8D  085F               	movf	?___ftmul,w
  7975  0D8E  0021               	movlb	1	; select bank1
  7976  0D8F  00AA               	movwf	_fround$1984^(0+128)
  7977  0D90  0020               	movlb	0	; select bank0
  7978  0D91  0860               	movf	?___ftmul+1,w
  7979  0D92  0021               	movlb	1	; select bank1
  7980  0D93  00AB               	movwf	(_fround$1984+1)^(0+128)
  7981  0D94  0020               	movlb	0	; select bank0
  7982  0D95  0861               	movf	?___ftmul+2,w
  7983  0D96  0021               	movlb	1	; select bank1
  7984  0D97  00AC               	movwf	(_fround$1984+2)^(0+128)
  7985                           
  7986                           ;doprnt.c: 424: return 0.5 * _npowers_[prec/10U+9U] * _npowers_[prec%10U];
  7987  0D98  3000               	movlw	0
  7988  0D99  0020               	movlb	0	; select bank0
  7989  0D9A  00DF               	movwf	___ftmul@f1
  7990  0D9B  3000               	movlw	0
  7991  0D9C  00E0               	movwf	___ftmul@f1+1
  7992  0D9D  303F               	movlw	63
  7993  0D9E  00E1               	movwf	___ftmul@f1+2
  7994  0D9F  0021               	movlb	1	; select bank1
  7995  0DA0  082A               	movf	_fround$1984^(0+128),w
  7996  0DA1  0020               	movlb	0	; select bank0
  7997  0DA2  00E2               	movwf	___ftmul@f2
  7998  0DA3  0021               	movlb	1	; select bank1
  7999  0DA4  082B               	movf	(_fround$1984+1)^(0+128),w
  8000  0DA5  0020               	movlb	0	; select bank0
  8001  0DA6  00E3               	movwf	___ftmul@f2+1
  8002  0DA7  0021               	movlb	1	; select bank1
  8003  0DA8  082C               	movf	(_fround$1984+2)^(0+128),w
  8004  0DA9  0020               	movlb	0	; select bank0
  8005  0DAA  00E4               	movwf	___ftmul@f2+2
  8006  0DAB  3195  2543         	fcall	___ftmul
  8007  0DAD  0020               	movlb	0	; select bank0
  8008  0DAE  085F               	movf	?___ftmul,w
  8009  0DAF  0021               	movlb	1	; select bank1
  8010  0DB0  00A0               	movwf	?_fround^(0+128)
  8011  0DB1  0020               	movlb	0	; select bank0
  8012  0DB2  0860               	movf	?___ftmul+1,w
  8013  0DB3  0021               	movlb	1	; select bank1
  8014  0DB4  00A1               	movwf	(?_fround+1)^(0+128)
  8015  0DB5  0020               	movlb	0	; select bank0
  8016  0DB6  0861               	movf	?___ftmul+2,w
  8017  0DB7  0021               	movlb	1	; select bank1
  8018  0DB8  00A2               	movwf	(?_fround+2)^(0+128)
  8019  0DB9  0008               	return
  8020  0DBA                     l4588:	
  8021                           
  8022                           ;doprnt.c: 425: return 0.5 * _npowers_[prec];
  8023  0DBA  3000               	movlw	0
  8024  0DBB  0020               	movlb	0	; select bank0
  8025  0DBC  00DF               	movwf	___ftmul@f1
  8026  0DBD  3000               	movlw	0
  8027  0DBE  00E0               	movwf	___ftmul@f1+1
  8028  0DBF  303F               	movlw	63
  8029  0DC0  00E1               	movwf	___ftmul@f1+2
  8030  0DC1  0021               	movlb	1	; select bank1
  8031  0DC2  082D               	movf	fround@prec^(0+128),w
  8032  0DC3  00A3               	movwf	??_fround^(0+128)
  8033  0DC4  01A4               	clrf	(??_fround^(0+128)+1)
  8034  0DC5  0823               	movf	??_fround^(0+128),w
  8035  0DC6  0020               	movlb	0	; select bank0
  8036  0DC7  00B0               	movwf	___wmul@multiplier
  8037  0DC8  0021               	movlb	1	; select bank1
  8038  0DC9  0824               	movf	(??_fround+1)^(0+128),w
  8039  0DCA  0020               	movlb	0	; select bank0
  8040  0DCB  00B1               	movwf	___wmul@multiplier+1
  8041  0DCC  3003               	movlw	3
  8042  0DCD  00B2               	movwf	___wmul@multiplicand
  8043  0DCE  3000               	movlw	0
  8044  0DCF  00B3               	movwf	___wmul@multiplicand+1
  8045  0DD0  319D  25A7  318C   	fcall	___wmul
  8046  0DD3  0020               	movlb	0	; select bank0
  8047  0DD4  0831               	movf	?___wmul+1,w
  8048  0DD5  0085               	movwf	5
  8049  0DD6  0830               	movf	?___wmul,w
  8050  0DD7  0084               	movwf	4
  8051  0DD8  304F               	movlw	low (__npowers_| (0+32768))
  8052  0DD9  0784               	addwf	4,f
  8053  0DDA  3098               	movlw	high (__npowers_| (0+32768))
  8054  0DDB  3D85               	addwfc	5,f
  8055  0DDC  3F00               	moviw [0]fsr0
  8056  0DDD  00E2               	movwf	___ftmul@f2
  8057  0DDE  3F01               	moviw [1]fsr0
  8058  0DDF  00E3               	movwf	___ftmul@f2+1
  8059  0DE0  3F02               	moviw [2]fsr0
  8060  0DE1  00E4               	movwf	___ftmul@f2+2
  8061  0DE2  3195  2543         	fcall	___ftmul
  8062  0DE4  0020               	movlb	0	; select bank0
  8063  0DE5  085F               	movf	?___ftmul,w
  8064  0DE6  0021               	movlb	1	; select bank1
  8065  0DE7  00A0               	movwf	?_fround^(0+128)
  8066  0DE8  0020               	movlb	0	; select bank0
  8067  0DE9  0860               	movf	?___ftmul+1,w
  8068  0DEA  0021               	movlb	1	; select bank1
  8069  0DEB  00A1               	movwf	(?_fround+1)^(0+128)
  8070  0DEC  0020               	movlb	0	; select bank0
  8071  0DED  0861               	movf	?___ftmul+2,w
  8072  0DEE  0021               	movlb	1	; select bank1
  8073  0DEF  00A2               	movwf	(?_fround+2)^(0+128)
  8074  0DF0  0008               	return
  8075  0DF1                     __end_of_fround:	
  8076                           
  8077                           	psect	text16
  8078  1DA7                     __ptext16:	
  8079 ;; *************** function ___wmul *****************
  8080 ;; Defined at:
  8081 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\Umul16.c"
  8082 ;; Parameters:    Size  Location     Type
  8083 ;;  multiplier      2   16[BANK0 ] unsigned int 
  8084 ;;  multiplicand    2   18[BANK0 ] unsigned int 
  8085 ;; Auto vars:     Size  Location     Type
  8086 ;;  product         2   20[BANK0 ] unsigned int 
  8087 ;; Return value:  Size  Location     Type
  8088 ;;                  2   16[BANK0 ] unsigned int 
  8089 ;; Registers used:
  8090 ;;		wreg, status,2, status,0
  8091 ;; Tracked objects:
  8092 ;;		On entry : 0/0
  8093 ;;		On exit  : 0/0
  8094 ;;		Unchanged: 0/0
  8095 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8096 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8097 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8098 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8099 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8100 ;;Total ram usage:        6 bytes
  8101 ;; Hardware stack levels used:    1
  8102 ;; Hardware stack levels required when called:    7
  8103 ;; This function calls:
  8104 ;;		Nothing
  8105 ;; This function is called by:
  8106 ;;		_fround
  8107 ;;		_scale
  8108 ;;		_sprintf
  8109 ;; This function uses a non-reentrant model
  8110 ;;
  8111                           
  8112                           
  8113                           ;psect for function ___wmul
  8114  1DA7                     ___wmul:	
  8115                           
  8116                           ;incstack = 0
  8117                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  8118  1DA7  0020               	movlb	0	; select bank0
  8119  1DA8  01B4               	clrf	___wmul@product
  8120  1DA9  01B5               	clrf	___wmul@product+1
  8121  1DAA                     l4216:	
  8122  1DAA  1C30               	btfss	___wmul@multiplier,0
  8123  1DAB  2DB0               	goto	l478
  8124  1DAC  0832               	movf	___wmul@multiplicand,w
  8125  1DAD  07B4               	addwf	___wmul@product,f
  8126  1DAE  0833               	movf	___wmul@multiplicand+1,w
  8127  1DAF  3DB5               	addwfc	___wmul@product+1,f
  8128  1DB0                     l478:	
  8129  1DB0  3001               	movlw	1
  8130  1DB1                     u4835:	
  8131  1DB1  35B2               	lslf	___wmul@multiplicand,f
  8132  1DB2  0DB3               	rlf	___wmul@multiplicand+1,f
  8133  1DB3  0B89               	decfsz	9,f
  8134  1DB4  2DB1               	goto	u4835
  8135  1DB5  3001               	movlw	1
  8136  1DB6                     u4845:	
  8137  1DB6  36B1               	lsrf	___wmul@multiplier+1,f
  8138  1DB7  0CB0               	rrf	___wmul@multiplier,f
  8139  1DB8  0B89               	decfsz	9,f
  8140  1DB9  2DB6               	goto	u4845
  8141  1DBA  0830               	movf	___wmul@multiplier,w
  8142  1DBB  0431               	iorwf	___wmul@multiplier+1,w
  8143  1DBC  1D03               	btfss	3,2
  8144  1DBD  2DAA               	goto	l4216
  8145  1DBE  0835               	movf	___wmul@product+1,w
  8146  1DBF  00B1               	movwf	?___wmul+1
  8147  1DC0  0834               	movf	___wmul@product,w
  8148  1DC1  00B0               	movwf	?___wmul
  8149  1DC2  0008               	return
  8150  1DC3                     __end_of___wmul:	
  8151                           
  8152                           	psect	text17
  8153  1F33                     __ptext17:	
  8154 ;; *************** function ___lwmod *****************
  8155 ;; Defined at:
  8156 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\lwmod.c"
  8157 ;; Parameters:    Size  Location     Type
  8158 ;;  divisor         2    0[BANK0 ] unsigned int 
  8159 ;;  dividend        2    2[BANK0 ] unsigned int 
  8160 ;; Auto vars:     Size  Location     Type
  8161 ;;  counter         1    5[BANK0 ] unsigned char 
  8162 ;; Return value:  Size  Location     Type
  8163 ;;                  2    0[BANK0 ] unsigned int 
  8164 ;; Registers used:
  8165 ;;		wreg, status,2, status,0
  8166 ;; Tracked objects:
  8167 ;;		On entry : 0/0
  8168 ;;		On exit  : 0/0
  8169 ;;		Unchanged: 0/0
  8170 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8171 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8172 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8173 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8174 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8175 ;;Total ram usage:        6 bytes
  8176 ;; Hardware stack levels used:    1
  8177 ;; Hardware stack levels required when called:    7
  8178 ;; This function calls:
  8179 ;;		Nothing
  8180 ;; This function is called by:
  8181 ;;		_nrf24l01GetPipe
  8182 ;;		_fround
  8183 ;; This function uses a non-reentrant model
  8184 ;;
  8185                           
  8186                           
  8187                           ;psect for function ___lwmod
  8188  1F33                     ___lwmod:	
  8189                           
  8190                           ;incstack = 0
  8191                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  8192  1F33  0020               	movlb	0	; select bank0
  8193  1F34  0820               	movf	___lwmod@divisor,w
  8194  1F35  0421               	iorwf	___lwmod@divisor+1,w
  8195  1F36  1903               	btfsc	3,2
  8196  1F37  2F5B               	goto	l4474
  8197  1F38  01A5               	clrf	___lwmod@counter
  8198  1F39  0AA5               	incf	___lwmod@counter,f
  8199  1F3A                     l4464:	
  8200  1F3A  1BA1               	btfsc	___lwmod@divisor+1,7
  8201  1F3B  2F46               	goto	l4466
  8202  1F3C  3001               	movlw	1
  8203  1F3D                     u5485:	
  8204  1F3D  35A0               	lslf	___lwmod@divisor,f
  8205  1F3E  0DA1               	rlf	___lwmod@divisor+1,f
  8206  1F3F  0B89               	decfsz	9,f
  8207  1F40  2F3D               	goto	u5485
  8208  1F41  3001               	movlw	1
  8209  1F42  00A4               	movwf	??___lwmod
  8210  1F43  0824               	movf	??___lwmod,w
  8211  1F44  07A5               	addwf	___lwmod@counter,f
  8212  1F45  2F3A               	goto	l4464
  8213  1F46                     l4466:	
  8214  1F46  0821               	movf	___lwmod@divisor+1,w
  8215  1F47  0223               	subwf	___lwmod@dividend+1,w
  8216  1F48  1D03               	skipz
  8217  1F49  2F4C               	goto	u5505
  8218  1F4A  0820               	movf	___lwmod@divisor,w
  8219  1F4B  0222               	subwf	___lwmod@dividend,w
  8220  1F4C                     u5505:	
  8221  1F4C  1C03               	skipc
  8222  1F4D  2F52               	goto	l4470
  8223  1F4E  0820               	movf	___lwmod@divisor,w
  8224  1F4F  02A2               	subwf	___lwmod@dividend,f
  8225  1F50  0821               	movf	___lwmod@divisor+1,w
  8226  1F51  3BA3               	subwfb	___lwmod@dividend+1,f
  8227  1F52                     l4470:	
  8228  1F52  3001               	movlw	1
  8229  1F53                     u5515:	
  8230  1F53  36A1               	lsrf	___lwmod@divisor+1,f
  8231  1F54  0CA0               	rrf	___lwmod@divisor,f
  8232  1F55  0B89               	decfsz	9,f
  8233  1F56  2F53               	goto	u5515
  8234  1F57  3001               	movlw	1
  8235  1F58  02A5               	subwf	___lwmod@counter,f
  8236  1F59  1D03               	btfss	3,2
  8237  1F5A  2F46               	goto	l4466
  8238  1F5B                     l4474:	
  8239  1F5B  0823               	movf	___lwmod@dividend+1,w
  8240  1F5C  00A1               	movwf	?___lwmod+1
  8241  1F5D  0822               	movf	___lwmod@dividend,w
  8242  1F5E  00A0               	movwf	?___lwmod
  8243  1F5F  0008               	return
  8244  1F60                     __end_of___lwmod:	
  8245                           
  8246                           	psect	text18
  8247  1F93                     __ptext18:	
  8248 ;; *************** function ___lwdiv *****************
  8249 ;; Defined at:
  8250 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\lwdiv.c"
  8251 ;; Parameters:    Size  Location     Type
  8252 ;;  divisor         2    6[BANK0 ] unsigned int 
  8253 ;;  dividend        2    8[BANK0 ] unsigned int 
  8254 ;; Auto vars:     Size  Location     Type
  8255 ;;  quotient        2   12[BANK0 ] unsigned int 
  8256 ;;  counter         1   11[BANK0 ] unsigned char 
  8257 ;; Return value:  Size  Location     Type
  8258 ;;                  2    6[BANK0 ] unsigned int 
  8259 ;; Registers used:
  8260 ;;		wreg, status,2, status,0
  8261 ;; Tracked objects:
  8262 ;;		On entry : 0/0
  8263 ;;		On exit  : 0/0
  8264 ;;		Unchanged: 0/0
  8265 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8266 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8267 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8268 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8269 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8270 ;;Total ram usage:        8 bytes
  8271 ;; Hardware stack levels used:    1
  8272 ;; Hardware stack levels required when called:    7
  8273 ;; This function calls:
  8274 ;;		Nothing
  8275 ;; This function is called by:
  8276 ;;		_fround
  8277 ;; This function uses a non-reentrant model
  8278 ;;
  8279                           
  8280                           
  8281                           ;psect for function ___lwdiv
  8282  1F93                     ___lwdiv:	
  8283                           
  8284                           ;incstack = 0
  8285                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  8286  1F93  0020               	movlb	0	; select bank0
  8287  1F94  01AC               	clrf	___lwdiv@quotient
  8288  1F95  01AD               	clrf	___lwdiv@quotient+1
  8289  1F96  0826               	movf	___lwdiv@divisor,w
  8290  1F97  0427               	iorwf	___lwdiv@divisor+1,w
  8291  1F98  1903               	btfsc	3,2
  8292  1F99  2FC3               	goto	l4452
  8293  1F9A  01AB               	clrf	___lwdiv@counter
  8294  1F9B  0AAB               	incf	___lwdiv@counter,f
  8295  1F9C                     l4440:	
  8296  1F9C  1BA7               	btfsc	___lwdiv@divisor+1,7
  8297  1F9D  2FA8               	goto	l4442
  8298  1F9E  3001               	movlw	1
  8299  1F9F                     u5415:	
  8300  1F9F  35A6               	lslf	___lwdiv@divisor,f
  8301  1FA0  0DA7               	rlf	___lwdiv@divisor+1,f
  8302  1FA1  0B89               	decfsz	9,f
  8303  1FA2  2F9F               	goto	u5415
  8304  1FA3  3001               	movlw	1
  8305  1FA4  00AA               	movwf	??___lwdiv
  8306  1FA5  082A               	movf	??___lwdiv,w
  8307  1FA6  07AB               	addwf	___lwdiv@counter,f
  8308  1FA7  2F9C               	goto	l4440
  8309  1FA8                     l4442:	
  8310  1FA8  3001               	movlw	1
  8311  1FA9                     u5435:	
  8312  1FA9  35AC               	lslf	___lwdiv@quotient,f
  8313  1FAA  0DAD               	rlf	___lwdiv@quotient+1,f
  8314  1FAB  0B89               	decfsz	9,f
  8315  1FAC  2FA9               	goto	u5435
  8316  1FAD  0827               	movf	___lwdiv@divisor+1,w
  8317  1FAE  0229               	subwf	___lwdiv@dividend+1,w
  8318  1FAF  1D03               	skipz
  8319  1FB0  2FB3               	goto	u5445
  8320  1FB1  0826               	movf	___lwdiv@divisor,w
  8321  1FB2  0228               	subwf	___lwdiv@dividend,w
  8322  1FB3                     u5445:	
  8323  1FB3  1C03               	skipc
  8324  1FB4  2FBA               	goto	l4448
  8325  1FB5  0826               	movf	___lwdiv@divisor,w
  8326  1FB6  02A8               	subwf	___lwdiv@dividend,f
  8327  1FB7  0827               	movf	___lwdiv@divisor+1,w
  8328  1FB8  3BA9               	subwfb	___lwdiv@dividend+1,f
  8329  1FB9  142C               	bsf	___lwdiv@quotient,0
  8330  1FBA                     l4448:	
  8331  1FBA  3001               	movlw	1
  8332  1FBB                     u5455:	
  8333  1FBB  36A7               	lsrf	___lwdiv@divisor+1,f
  8334  1FBC  0CA6               	rrf	___lwdiv@divisor,f
  8335  1FBD  0B89               	decfsz	9,f
  8336  1FBE  2FBB               	goto	u5455
  8337  1FBF  3001               	movlw	1
  8338  1FC0  02AB               	subwf	___lwdiv@counter,f
  8339  1FC1  1D03               	btfss	3,2
  8340  1FC2  2FA8               	goto	l4442
  8341  1FC3                     l4452:	
  8342  1FC3  082D               	movf	___lwdiv@quotient+1,w
  8343  1FC4  00A7               	movwf	?___lwdiv+1
  8344  1FC5  082C               	movf	___lwdiv@quotient,w
  8345  1FC6  00A6               	movwf	?___lwdiv
  8346  1FC7  0008               	return
  8347  1FC8                     __end_of___lwdiv:	
  8348                           
  8349                           	psect	text19
  8350  1543                     __ptext19:	
  8351 ;; *************** function ___ftmul *****************
  8352 ;; Defined at:
  8353 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\ftmul.c"
  8354 ;; Parameters:    Size  Location     Type
  8355 ;;  f1              3   63[BANK0 ] float 
  8356 ;;  f2              3   66[BANK0 ] float 
  8357 ;; Auto vars:     Size  Location     Type
  8358 ;;  f3_as_produc    3   74[BANK0 ] unsigned um
  8359 ;;  sign            1   78[BANK0 ] unsigned char 
  8360 ;;  cntr            1   77[BANK0 ] unsigned char 
  8361 ;;  exp             1   73[BANK0 ] unsigned char 
  8362 ;; Return value:  Size  Location     Type
  8363 ;;                  3   63[BANK0 ] float 
  8364 ;; Registers used:
  8365 ;;		wreg, status,2, status,0, pclath, cstack
  8366 ;; Tracked objects:
  8367 ;;		On entry : 0/0
  8368 ;;		On exit  : 0/0
  8369 ;;		Unchanged: 0/0
  8370 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8371 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8372 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8373 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8374 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8375 ;;Total ram usage:       16 bytes
  8376 ;; Hardware stack levels used:    1
  8377 ;; Hardware stack levels required when called:    8
  8378 ;; This function calls:
  8379 ;;		___ftpack
  8380 ;; This function is called by:
  8381 ;;		_loop
  8382 ;;		_fround
  8383 ;;		_scale
  8384 ;;		_sprintf
  8385 ;; This function uses a non-reentrant model
  8386 ;;
  8387                           
  8388                           
  8389                           ;psect for function ___ftmul
  8390  1543                     ___ftmul:	
  8391                           
  8392                           ;incstack = 0
  8393                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
  8394  1543  0020               	movlb	0	; select bank0
  8395  1544  085F               	movf	___ftmul@f1,w
  8396  1545  00E5               	movwf	??___ftmul
  8397  1546  0860               	movf	___ftmul@f1+1,w
  8398  1547  00E6               	movwf	??___ftmul+1
  8399  1548  0861               	movf	___ftmul@f1+2,w
  8400  1549  00E7               	movwf	??___ftmul+2
  8401  154A  1003               	clrc
  8402  154B  0D66               	rlf	??___ftmul+1,w
  8403  154C  0D67               	rlf	??___ftmul+2,w
  8404  154D  00E8               	movwf	??___ftmul+3
  8405  154E  0868               	movf	??___ftmul+3,w
  8406  154F  00E9               	movwf	___ftmul@exp
  8407  1550  0869               	movf	___ftmul@exp,w
  8408  1551  1D03               	btfss	3,2
  8409  1552  2D5A               	goto	l4386
  8410  1553  3000               	movlw	0
  8411  1554  00DF               	movwf	?___ftmul
  8412  1555  3000               	movlw	0
  8413  1556  00E0               	movwf	?___ftmul+1
  8414  1557  3000               	movlw	0
  8415  1558  00E1               	movwf	?___ftmul+2
  8416  1559  0008               	return
  8417  155A                     l4386:	
  8418  155A  0862               	movf	___ftmul@f2,w
  8419  155B  00E5               	movwf	??___ftmul
  8420  155C  0863               	movf	___ftmul@f2+1,w
  8421  155D  00E6               	movwf	??___ftmul+1
  8422  155E  0864               	movf	___ftmul@f2+2,w
  8423  155F  00E7               	movwf	??___ftmul+2
  8424  1560  1003               	clrc
  8425  1561  0D66               	rlf	??___ftmul+1,w
  8426  1562  0D67               	rlf	??___ftmul+2,w
  8427  1563  00E8               	movwf	??___ftmul+3
  8428  1564  0868               	movf	??___ftmul+3,w
  8429  1565  00EE               	movwf	___ftmul@sign
  8430  1566  086E               	movf	___ftmul@sign,w
  8431  1567  1D03               	btfss	3,2
  8432  1568  2D70               	goto	l4392
  8433  1569  3000               	movlw	0
  8434  156A  00DF               	movwf	?___ftmul
  8435  156B  3000               	movlw	0
  8436  156C  00E0               	movwf	?___ftmul+1
  8437  156D  3000               	movlw	0
  8438  156E  00E1               	movwf	?___ftmul+2
  8439  156F  0008               	return
  8440  1570                     l4392:	
  8441  1570  086E               	movf	___ftmul@sign,w
  8442  1571  3E7B               	addlw	123
  8443  1572  00E5               	movwf	??___ftmul
  8444  1573  0865               	movf	??___ftmul,w
  8445  1574  07E9               	addwf	___ftmul@exp,f
  8446  1575  085F               	movf	___ftmul@f1,w
  8447  1576  00E5               	movwf	??___ftmul
  8448  1577  0860               	movf	___ftmul@f1+1,w
  8449  1578  00E6               	movwf	??___ftmul+1
  8450  1579  0861               	movf	___ftmul@f1+2,w
  8451  157A  00E7               	movwf	??___ftmul+2
  8452  157B  3010               	movlw	16
  8453  157C                     u5305:	
  8454  157C  36E7               	lsrf	??___ftmul+2,f
  8455  157D  0CE6               	rrf	??___ftmul+1,f
  8456  157E  0CE5               	rrf	??___ftmul,f
  8457  157F  0B89               	decfsz	9,f
  8458  1580  2D7C               	goto	u5305
  8459  1581  0865               	movf	??___ftmul,w
  8460  1582  00E8               	movwf	??___ftmul+3
  8461  1583  0868               	movf	??___ftmul+3,w
  8462  1584  00EE               	movwf	___ftmul@sign
  8463  1585  0862               	movf	___ftmul@f2,w
  8464  1586  00E5               	movwf	??___ftmul
  8465  1587  0863               	movf	___ftmul@f2+1,w
  8466  1588  00E6               	movwf	??___ftmul+1
  8467  1589  0864               	movf	___ftmul@f2+2,w
  8468  158A  00E7               	movwf	??___ftmul+2
  8469  158B  3010               	movlw	16
  8470  158C                     u5315:	
  8471  158C  36E7               	lsrf	??___ftmul+2,f
  8472  158D  0CE6               	rrf	??___ftmul+1,f
  8473  158E  0CE5               	rrf	??___ftmul,f
  8474  158F  0B89               	decfsz	9,f
  8475  1590  2D8C               	goto	u5315
  8476  1591  0865               	movf	??___ftmul,w
  8477  1592  00E8               	movwf	??___ftmul+3
  8478  1593  0868               	movf	??___ftmul+3,w
  8479  1594  06EE               	xorwf	___ftmul@sign,f
  8480  1595  3080               	movlw	128
  8481  1596  00E5               	movwf	??___ftmul
  8482  1597  0865               	movf	??___ftmul,w
  8483  1598  05EE               	andwf	___ftmul@sign,f
  8484  1599  17E0               	bsf	___ftmul@f1+1,7
  8485  159A  17E3               	bsf	___ftmul@f2+1,7
  8486  159B  30FF               	movlw	255
  8487  159C  05E2               	andwf	___ftmul@f2,f
  8488  159D  30FF               	movlw	255
  8489  159E  05E3               	andwf	___ftmul@f2+1,f
  8490  159F  3000               	movlw	0
  8491  15A0  05E4               	andwf	___ftmul@f2+2,f
  8492  15A1  3000               	movlw	0
  8493  15A2  00EA               	movwf	___ftmul@f3_as_product
  8494  15A3  3000               	movlw	0
  8495  15A4  00EB               	movwf	___ftmul@f3_as_product+1
  8496  15A5  3000               	movlw	0
  8497  15A6  00EC               	movwf	___ftmul@f3_as_product+2
  8498  15A7  3007               	movlw	7
  8499  15A8  00E5               	movwf	??___ftmul
  8500  15A9  0865               	movf	??___ftmul,w
  8501  15AA  00ED               	movwf	___ftmul@cntr
  8502  15AB                     l4404:	
  8503  15AB  1C5F               	btfss	___ftmul@f1,0
  8504  15AC  2DB3               	goto	l4408
  8505  15AD  0862               	movf	___ftmul@f2,w
  8506  15AE  07EA               	addwf	___ftmul@f3_as_product,f
  8507  15AF  0863               	movf	___ftmul@f2+1,w
  8508  15B0  3DEB               	addwfc	___ftmul@f3_as_product+1,f
  8509  15B1  0864               	movf	___ftmul@f2+2,w
  8510  15B2  3DEC               	addwfc	___ftmul@f3_as_product+2,f
  8511  15B3                     l4408:	
  8512  15B3  3001               	movlw	1
  8513  15B4                     u5335:	
  8514  15B4  36E1               	lsrf	___ftmul@f1+2,f
  8515  15B5  0CE0               	rrf	___ftmul@f1+1,f
  8516  15B6  0CDF               	rrf	___ftmul@f1,f
  8517  15B7  0B89               	decfsz	9,f
  8518  15B8  2DB4               	goto	u5335
  8519  15B9  3001               	movlw	1
  8520  15BA                     u5345:	
  8521  15BA  35E2               	lslf	___ftmul@f2,f
  8522  15BB  0DE3               	rlf	___ftmul@f2+1,f
  8523  15BC  0DE4               	rlf	___ftmul@f2+2,f
  8524  15BD  0B89               	decfsz	9,f
  8525  15BE  2DBA               	goto	u5345
  8526  15BF  3001               	movlw	1
  8527  15C0  02ED               	subwf	___ftmul@cntr,f
  8528  15C1  1D03               	btfss	3,2
  8529  15C2  2DAB               	goto	l4404
  8530  15C3  3009               	movlw	9
  8531  15C4  00E5               	movwf	??___ftmul
  8532  15C5  0865               	movf	??___ftmul,w
  8533  15C6  00ED               	movwf	___ftmul@cntr
  8534  15C7                     l4416:	
  8535  15C7  1C5F               	btfss	___ftmul@f1,0
  8536  15C8  2DCF               	goto	l4420
  8537  15C9  0862               	movf	___ftmul@f2,w
  8538  15CA  07EA               	addwf	___ftmul@f3_as_product,f
  8539  15CB  0863               	movf	___ftmul@f2+1,w
  8540  15CC  3DEB               	addwfc	___ftmul@f3_as_product+1,f
  8541  15CD  0864               	movf	___ftmul@f2+2,w
  8542  15CE  3DEC               	addwfc	___ftmul@f3_as_product+2,f
  8543  15CF                     l4420:	
  8544  15CF  3001               	movlw	1
  8545  15D0                     u5375:	
  8546  15D0  36E1               	lsrf	___ftmul@f1+2,f
  8547  15D1  0CE0               	rrf	___ftmul@f1+1,f
  8548  15D2  0CDF               	rrf	___ftmul@f1,f
  8549  15D3  0B89               	decfsz	9,f
  8550  15D4  2DD0               	goto	u5375
  8551  15D5  3001               	movlw	1
  8552  15D6                     u5385:	
  8553  15D6  36EC               	lsrf	___ftmul@f3_as_product+2,f
  8554  15D7  0CEB               	rrf	___ftmul@f3_as_product+1,f
  8555  15D8  0CEA               	rrf	___ftmul@f3_as_product,f
  8556  15D9  0B89               	decfsz	9,f
  8557  15DA  2DD6               	goto	u5385
  8558  15DB  3001               	movlw	1
  8559  15DC  02ED               	subwf	___ftmul@cntr,f
  8560  15DD  1D03               	btfss	3,2
  8561  15DE  2DC7               	goto	l4416
  8562  15DF  086A               	movf	___ftmul@f3_as_product,w
  8563  15E0  00A0               	movwf	___ftpack@arg
  8564  15E1  086B               	movf	___ftmul@f3_as_product+1,w
  8565  15E2  00A1               	movwf	___ftpack@arg+1
  8566  15E3  086C               	movf	___ftmul@f3_as_product+2,w
  8567  15E4  00A2               	movwf	___ftpack@arg+2
  8568  15E5  0869               	movf	___ftmul@exp,w
  8569  15E6  00E5               	movwf	??___ftmul
  8570  15E7  0865               	movf	??___ftmul,w
  8571  15E8  00A3               	movwf	___ftpack@exp
  8572  15E9  086E               	movf	___ftmul@sign,w
  8573  15EA  00E6               	movwf	??___ftmul+1
  8574  15EB  0866               	movf	??___ftmul+1,w
  8575  15EC  00A4               	movwf	___ftpack@sign
  8576  15ED  3192  2275         	fcall	___ftpack
  8577  15EF  0020               	movlb	0	; select bank0
  8578  15F0  0820               	movf	?___ftpack,w
  8579  15F1  00DF               	movwf	?___ftmul
  8580  15F2  0821               	movf	?___ftpack+1,w
  8581  15F3  00E0               	movwf	?___ftmul+1
  8582  15F4  0822               	movf	?___ftpack+2,w
  8583  15F5  00E1               	movwf	?___ftmul+2
  8584  15F6  0008               	return
  8585  15F7                     __end_of___ftmul:	
  8586                           
  8587                           	psect	text20
  8588  0803                     __ptext20:	
  8589 ;; *************** function __tdiv_to_l_ *****************
  8590 ;; Defined at:
  8591 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\ftdivl.c"
  8592 ;; Parameters:    Size  Location     Type
  8593 ;;  f1              3    0[BANK0 ] float 
  8594 ;;  f2              3    3[BANK0 ] float 
  8595 ;; Auto vars:     Size  Location     Type
  8596 ;;  quot            4   10[BANK0 ] unsigned long 
  8597 ;;  exp1            1   15[BANK0 ] unsigned char 
  8598 ;;  cntr            1   14[BANK0 ] unsigned char 
  8599 ;; Return value:  Size  Location     Type
  8600 ;;                  4    0[BANK0 ] unsigned long 
  8601 ;; Registers used:
  8602 ;;		wreg, status,2, status,0
  8603 ;; Tracked objects:
  8604 ;;		On entry : 0/0
  8605 ;;		On exit  : 0/0
  8606 ;;		Unchanged: 0/0
  8607 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8608 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8609 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8610 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8611 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8612 ;;Total ram usage:       16 bytes
  8613 ;; Hardware stack levels used:    1
  8614 ;; Hardware stack levels required when called:    7
  8615 ;; This function calls:
  8616 ;;		Nothing
  8617 ;; This function is called by:
  8618 ;;		_sprintf
  8619 ;; This function uses a non-reentrant model
  8620 ;;
  8621                           
  8622                           
  8623                           ;psect for function __tdiv_to_l_
  8624  0803                     __tdiv_to_l_:	
  8625                           
  8626                           ;incstack = 0
  8627                           ; Regs used in __tdiv_to_l_: [wreg+status,2+status,0]
  8628  0803  0020               	movlb	0	; select bank0
  8629  0804  0820               	movf	__tdiv_to_l_@f1,w
  8630  0805  00A6               	movwf	??__tdiv_to_l_
  8631  0806  0821               	movf	__tdiv_to_l_@f1+1,w
  8632  0807  00A7               	movwf	??__tdiv_to_l_+1
  8633  0808  0822               	movf	__tdiv_to_l_@f1+2,w
  8634  0809  00A8               	movwf	??__tdiv_to_l_+2
  8635  080A  1003               	clrc
  8636  080B  0D27               	rlf	??__tdiv_to_l_+1,w
  8637  080C  0D28               	rlf	??__tdiv_to_l_+2,w
  8638  080D  00A9               	movwf	??__tdiv_to_l_+3
  8639  080E  0829               	movf	??__tdiv_to_l_+3,w
  8640  080F  00AF               	movwf	__tdiv_to_l_@exp1
  8641  0810  082F               	movf	__tdiv_to_l_@exp1,w
  8642  0811  1D03               	btfss	3,2
  8643  0812  281C               	goto	l4638
  8644  0813  3000               	movlw	0
  8645  0814  00A3               	movwf	?__tdiv_to_l_+3
  8646  0815  3000               	movlw	0
  8647  0816  00A2               	movwf	?__tdiv_to_l_+2
  8648  0817  3000               	movlw	0
  8649  0818  00A1               	movwf	?__tdiv_to_l_+1
  8650  0819  3000               	movlw	0
  8651  081A  00A0               	movwf	?__tdiv_to_l_
  8652  081B  0008               	return
  8653  081C                     l4638:	
  8654  081C  0823               	movf	__tdiv_to_l_@f2,w
  8655  081D  00A6               	movwf	??__tdiv_to_l_
  8656  081E  0824               	movf	__tdiv_to_l_@f2+1,w
  8657  081F  00A7               	movwf	??__tdiv_to_l_+1
  8658  0820  0825               	movf	__tdiv_to_l_@f2+2,w
  8659  0821  00A8               	movwf	??__tdiv_to_l_+2
  8660  0822  1003               	clrc
  8661  0823  0D27               	rlf	??__tdiv_to_l_+1,w
  8662  0824  0D28               	rlf	??__tdiv_to_l_+2,w
  8663  0825  00A9               	movwf	??__tdiv_to_l_+3
  8664  0826  0829               	movf	??__tdiv_to_l_+3,w
  8665  0827  00AE               	movwf	__tdiv_to_l_@cntr
  8666  0828  082E               	movf	__tdiv_to_l_@cntr,w
  8667  0829  1D03               	btfss	3,2
  8668  082A  2834               	goto	l755
  8669  082B  3000               	movlw	0
  8670  082C  00A3               	movwf	?__tdiv_to_l_+3
  8671  082D  3000               	movlw	0
  8672  082E  00A2               	movwf	?__tdiv_to_l_+2
  8673  082F  3000               	movlw	0
  8674  0830  00A1               	movwf	?__tdiv_to_l_+1
  8675  0831  3000               	movlw	0
  8676  0832  00A0               	movwf	?__tdiv_to_l_
  8677  0833  0008               	return
  8678  0834                     l755:	
  8679  0834  17A1               	bsf	__tdiv_to_l_@f1+1,7
  8680  0835  30FF               	movlw	255
  8681  0836  05A0               	andwf	__tdiv_to_l_@f1,f
  8682  0837  30FF               	movlw	255
  8683  0838  05A1               	andwf	__tdiv_to_l_@f1+1,f
  8684  0839  3000               	movlw	0
  8685  083A  05A2               	andwf	__tdiv_to_l_@f1+2,f
  8686  083B  17A4               	bsf	__tdiv_to_l_@f2+1,7
  8687  083C  30FF               	movlw	255
  8688  083D  05A3               	andwf	__tdiv_to_l_@f2,f
  8689  083E  30FF               	movlw	255
  8690  083F  05A4               	andwf	__tdiv_to_l_@f2+1,f
  8691  0840  3000               	movlw	0
  8692  0841  05A5               	andwf	__tdiv_to_l_@f2+2,f
  8693  0842  3000               	movlw	0
  8694  0843  00AD               	movwf	__tdiv_to_l_@quot+3
  8695  0844  3000               	movlw	0
  8696  0845  00AC               	movwf	__tdiv_to_l_@quot+2
  8697  0846  3000               	movlw	0
  8698  0847  00AB               	movwf	__tdiv_to_l_@quot+1
  8699  0848  3000               	movlw	0
  8700  0849  00AA               	movwf	__tdiv_to_l_@quot
  8701  084A  307F               	movlw	127
  8702  084B  02AF               	subwf	__tdiv_to_l_@exp1,f
  8703  084C  3098               	movlw	152
  8704  084D  072E               	addwf	__tdiv_to_l_@cntr,w
  8705  084E  00A6               	movwf	??__tdiv_to_l_
  8706  084F  0826               	movf	??__tdiv_to_l_,w
  8707  0850  02AF               	subwf	__tdiv_to_l_@exp1,f
  8708  0851  3018               	movlw	24
  8709  0852  00A6               	movwf	??__tdiv_to_l_
  8710  0853  0826               	movf	??__tdiv_to_l_,w
  8711  0854  00AE               	movwf	__tdiv_to_l_@cntr
  8712  0855                     l4652:	
  8713  0855  3001               	movlw	1
  8714  0856                     u5715:	
  8715  0856  35AA               	lslf	__tdiv_to_l_@quot,f
  8716  0857  0DAB               	rlf	__tdiv_to_l_@quot+1,f
  8717  0858  0DAC               	rlf	__tdiv_to_l_@quot+2,f
  8718  0859  0DAD               	rlf	__tdiv_to_l_@quot+3,f
  8719  085A  0B89               	decfsz	9,f
  8720  085B  2856               	goto	u5715
  8721  085C  0825               	movf	__tdiv_to_l_@f2+2,w
  8722  085D  0222               	subwf	__tdiv_to_l_@f1+2,w
  8723  085E  1D03               	skipz
  8724  085F  2866               	goto	u5725
  8725  0860  0824               	movf	__tdiv_to_l_@f2+1,w
  8726  0861  0221               	subwf	__tdiv_to_l_@f1+1,w
  8727  0862  1D03               	skipz
  8728  0863  2866               	goto	u5725
  8729  0864  0823               	movf	__tdiv_to_l_@f2,w
  8730  0865  0220               	subwf	__tdiv_to_l_@f1,w
  8731  0866                     u5725:	
  8732  0866  1C03               	skipc
  8733  0867  286F               	goto	l4660
  8734  0868  0823               	movf	__tdiv_to_l_@f2,w
  8735  0869  02A0               	subwf	__tdiv_to_l_@f1,f
  8736  086A  0824               	movf	__tdiv_to_l_@f2+1,w
  8737  086B  3BA1               	subwfb	__tdiv_to_l_@f1+1,f
  8738  086C  0825               	movf	__tdiv_to_l_@f2+2,w
  8739  086D  3BA2               	subwfb	__tdiv_to_l_@f1+2,f
  8740  086E  142A               	bsf	__tdiv_to_l_@quot,0
  8741  086F                     l4660:	
  8742  086F  3001               	movlw	1
  8743  0870                     u5735:	
  8744  0870  35A0               	lslf	__tdiv_to_l_@f1,f
  8745  0871  0DA1               	rlf	__tdiv_to_l_@f1+1,f
  8746  0872  0DA2               	rlf	__tdiv_to_l_@f1+2,f
  8747  0873  0B89               	decfsz	9,f
  8748  0874  2870               	goto	u5735
  8749  0875  3001               	movlw	1
  8750  0876  02AE               	subwf	__tdiv_to_l_@cntr,f
  8751  0877  1D03               	btfss	3,2
  8752  0878  2855               	goto	l4652
  8753  0879  1FAF               	btfss	__tdiv_to_l_@exp1,7
  8754  087A  2897               	goto	l4672
  8755  087B  082F               	movf	__tdiv_to_l_@exp1,w
  8756  087C  3A80               	xorlw	128
  8757  087D  3E97               	addlw	151
  8758  087E  1803               	skipnc
  8759  087F  2889               	goto	l4670
  8760  0880  3000               	movlw	0
  8761  0881  00A3               	movwf	?__tdiv_to_l_+3
  8762  0882  3000               	movlw	0
  8763  0883  00A2               	movwf	?__tdiv_to_l_+2
  8764  0884  3000               	movlw	0
  8765  0885  00A1               	movwf	?__tdiv_to_l_+1
  8766  0886  3000               	movlw	0
  8767  0887  00A0               	movwf	?__tdiv_to_l_
  8768  0888  0008               	return
  8769  0889                     l4670:	
  8770  0889  3001               	movlw	1
  8771  088A                     u5775:	
  8772  088A  36AD               	lsrf	__tdiv_to_l_@quot+3,f
  8773  088B  0CAC               	rrf	__tdiv_to_l_@quot+2,f
  8774  088C  0CAB               	rrf	__tdiv_to_l_@quot+1,f
  8775  088D  0CAA               	rrf	__tdiv_to_l_@quot,f
  8776  088E  0B89               	decfsz	9,f
  8777  088F  288A               	goto	u5775
  8778  0890  3001               	movlw	1
  8779  0891  00A6               	movwf	??__tdiv_to_l_
  8780  0892  0826               	movf	??__tdiv_to_l_,w
  8781  0893  07AF               	addwf	__tdiv_to_l_@exp1,f
  8782  0894  1903               	btfsc	3,2
  8783  0895  28B0               	goto	l4680
  8784  0896  2889               	goto	l4670
  8785  0897                     l4672:	
  8786  0897  3018               	movlw	24
  8787  0898  022F               	subwf	__tdiv_to_l_@exp1,w
  8788  0899  1C03               	skipc
  8789  089A  28AD               	goto	l765
  8790  089B  3000               	movlw	0
  8791  089C  00A3               	movwf	?__tdiv_to_l_+3
  8792  089D  3000               	movlw	0
  8793  089E  00A2               	movwf	?__tdiv_to_l_+2
  8794  089F  3000               	movlw	0
  8795  08A0  00A1               	movwf	?__tdiv_to_l_+1
  8796  08A1  3000               	movlw	0
  8797  08A2  00A0               	movwf	?__tdiv_to_l_
  8798  08A3  0008               	return
  8799  08A4                     l4678:	
  8800  08A4  3001               	movlw	1
  8801  08A5                     u5805:	
  8802  08A5  35AA               	lslf	__tdiv_to_l_@quot,f
  8803  08A6  0DAB               	rlf	__tdiv_to_l_@quot+1,f
  8804  08A7  0DAC               	rlf	__tdiv_to_l_@quot+2,f
  8805  08A8  0DAD               	rlf	__tdiv_to_l_@quot+3,f
  8806  08A9  0B89               	decfsz	9,f
  8807  08AA  28A5               	goto	u5805
  8808  08AB  3001               	movlw	1
  8809  08AC  02AF               	subwf	__tdiv_to_l_@exp1,f
  8810  08AD                     l765:	
  8811  08AD  082F               	movf	__tdiv_to_l_@exp1,w
  8812  08AE  1D03               	btfss	3,2
  8813  08AF  28A4               	goto	l4678
  8814  08B0                     l4680:	
  8815  08B0  082D               	movf	__tdiv_to_l_@quot+3,w
  8816  08B1  00A3               	movwf	?__tdiv_to_l_+3
  8817  08B2  082C               	movf	__tdiv_to_l_@quot+2,w
  8818  08B3  00A2               	movwf	?__tdiv_to_l_+2
  8819  08B4  082B               	movf	__tdiv_to_l_@quot+1,w
  8820  08B5  00A1               	movwf	?__tdiv_to_l_+1
  8821  08B6  082A               	movf	__tdiv_to_l_@quot,w
  8822  08B7  00A0               	movwf	?__tdiv_to_l_
  8823  08B8  0008               	return
  8824  08B9                     __end_of__tdiv_to_l_:	
  8825                           
  8826                           	psect	text21
  8827  08B9                     __ptext21:	
  8828 ;; *************** function __div_to_l_ *****************
  8829 ;; Defined at:
  8830 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\fldivl.c"
  8831 ;; Parameters:    Size  Location     Type
  8832 ;;  f1              3    0[BANK0 ] unsigned long 
  8833 ;;  f2              3    3[BANK0 ] unsigned long 
  8834 ;; Auto vars:     Size  Location     Type
  8835 ;;  quot            4   14[BANK0 ] unsigned long 
  8836 ;;  exp1            1   19[BANK0 ] unsigned char 
  8837 ;;  cntr            1   18[BANK0 ] unsigned char 
  8838 ;; Return value:  Size  Location     Type
  8839 ;;                  4    0[BANK0 ] unsigned long 
  8840 ;; Registers used:
  8841 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  8842 ;; Tracked objects:
  8843 ;;		On entry : 0/0
  8844 ;;		On exit  : 0/0
  8845 ;;		Unchanged: 0/0
  8846 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8847 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8848 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8849 ;;      Temps:          0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8850 ;;      Totals:         0      20       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8851 ;;Total ram usage:       20 bytes
  8852 ;; Hardware stack levels used:    1
  8853 ;; Hardware stack levels required when called:    7
  8854 ;; This function calls:
  8855 ;;		Nothing
  8856 ;; This function is called by:
  8857 ;;		_sprintf
  8858 ;; This function uses a non-reentrant model
  8859 ;;
  8860                           
  8861                           
  8862                           ;psect for function __div_to_l_
  8863  08B9                     __div_to_l_:	
  8864                           
  8865                           ;incstack = 0
  8866                           ; Regs used in __div_to_l_: [wreg+fsr1l+fsr1h+status,2+status,0]
  8867  08B9  3020               	movlw	low (__div_to_l_@f1| 0)
  8868  08BA  0086               	movwf	6
  8869  08BB  0187               	clrf	7
  8870  08BC  3F40               	moviw [0]fsr1
  8871  08BD  0020               	movlb	0	; select bank0
  8872  08BE  00A6               	movwf	??__div_to_l_
  8873  08BF  3F41               	moviw [1]fsr1
  8874  08C0  00A7               	movwf	??__div_to_l_+1
  8875  08C1  3F42               	moviw [2]fsr1
  8876  08C2  00A8               	movwf	??__div_to_l_+2
  8877  08C3  3F43               	moviw [3]fsr1
  8878  08C4  00A9               	movwf	??__div_to_l_+3
  8879  08C5  1003               	clrc
  8880  08C6  0D28               	rlf	??__div_to_l_+2,w
  8881  08C7  0D29               	rlf	??__div_to_l_+3,w
  8882  08C8  00AA               	movwf	??__div_to_l_+4
  8883  08C9  082A               	movf	??__div_to_l_+4,w
  8884  08CA  00B3               	movwf	__div_to_l_@exp1
  8885  08CB  0833               	movf	__div_to_l_@exp1,w
  8886  08CC  1D03               	btfss	3,2
  8887  08CD  28D7               	goto	l4690
  8888  08CE  3000               	movlw	0
  8889  08CF  00A3               	movwf	?__div_to_l_+3
  8890  08D0  3000               	movlw	0
  8891  08D1  00A2               	movwf	?__div_to_l_+2
  8892  08D2  3000               	movlw	0
  8893  08D3  00A1               	movwf	?__div_to_l_+1
  8894  08D4  3000               	movlw	0
  8895  08D5  00A0               	movwf	?__div_to_l_
  8896  08D6  0008               	return
  8897  08D7                     l4690:	
  8898  08D7  3023               	movlw	low (__div_to_l_@f2| 0)
  8899  08D8  0086               	movwf	6
  8900  08D9  0187               	clrf	7
  8901  08DA  3F40               	moviw [0]fsr1
  8902  08DB  00A6               	movwf	??__div_to_l_
  8903  08DC  3F41               	moviw [1]fsr1
  8904  08DD  00A7               	movwf	??__div_to_l_+1
  8905  08DE  3F42               	moviw [2]fsr1
  8906  08DF  00A8               	movwf	??__div_to_l_+2
  8907  08E0  3F43               	moviw [3]fsr1
  8908  08E1  00A9               	movwf	??__div_to_l_+3
  8909  08E2  1003               	clrc
  8910  08E3  0D28               	rlf	??__div_to_l_+2,w
  8911  08E4  0D29               	rlf	??__div_to_l_+3,w
  8912  08E5  00AA               	movwf	??__div_to_l_+4
  8913  08E6  082A               	movf	??__div_to_l_+4,w
  8914  08E7  00B2               	movwf	__div_to_l_@cntr
  8915  08E8  0832               	movf	__div_to_l_@cntr,w
  8916  08E9  1D03               	btfss	3,2
  8917  08EA  28F4               	goto	l4696
  8918  08EB  3000               	movlw	0
  8919  08EC  00A3               	movwf	?__div_to_l_+3
  8920  08ED  3000               	movlw	0
  8921  08EE  00A2               	movwf	?__div_to_l_+2
  8922  08EF  3000               	movlw	0
  8923  08F0  00A1               	movwf	?__div_to_l_+1
  8924  08F1  3000               	movlw	0
  8925  08F2  00A0               	movwf	?__div_to_l_
  8926  08F3  0008               	return
  8927  08F4                     l4696:	
  8928  08F4  3020               	movlw	low (__div_to_l_@f1| 0)
  8929  08F5  0086               	movwf	6
  8930  08F6  0187               	clrf	7
  8931  08F7  3000               	movlw	0
  8932  08F8  0481               	iorwf	1,f
  8933  08F9  3141               	addfsr 1,1
  8934  08FA  3000               	movlw	0
  8935  08FB  0481               	iorwf	1,f
  8936  08FC  3141               	addfsr 1,1
  8937  08FD  3080               	movlw	128
  8938  08FE  0481               	iorwf	1,f
  8939  08FF  3141               	addfsr 1,1
  8940  0900  3000               	movlw	0
  8941  0901  0481               	iorwf	1,f
  8942  0902  3020               	movlw	low (__div_to_l_@f1| 0)
  8943  0903  0086               	movwf	6
  8944  0904  0187               	clrf	7
  8945  0905  30FF               	movlw	255
  8946  0906  0581               	andwf	1,f
  8947  0907  3141               	addfsr 1,1
  8948  0908  30FF               	movlw	255
  8949  0909  0581               	andwf	1,f
  8950  090A  3141               	addfsr 1,1
  8951  090B  30FF               	movlw	255
  8952  090C  0581               	andwf	1,f
  8953  090D  3141               	addfsr 1,1
  8954  090E  3000               	movlw	0
  8955  090F  0581               	andwf	1,f
  8956  0910  3023               	movlw	low (__div_to_l_@f2| 0)
  8957  0911  0086               	movwf	6
  8958  0912  0187               	clrf	7
  8959  0913  3000               	movlw	0
  8960  0914  0481               	iorwf	1,f
  8961  0915  3141               	addfsr 1,1
  8962  0916  3000               	movlw	0
  8963  0917  0481               	iorwf	1,f
  8964  0918  3141               	addfsr 1,1
  8965  0919  3080               	movlw	128
  8966  091A  0481               	iorwf	1,f
  8967  091B  3141               	addfsr 1,1
  8968  091C  3000               	movlw	0
  8969  091D  0481               	iorwf	1,f
  8970  091E  3023               	movlw	low (__div_to_l_@f2| 0)
  8971  091F  0086               	movwf	6
  8972  0920  0187               	clrf	7
  8973  0921  30FF               	movlw	255
  8974  0922  0581               	andwf	1,f
  8975  0923  3141               	addfsr 1,1
  8976  0924  30FF               	movlw	255
  8977  0925  0581               	andwf	1,f
  8978  0926  3141               	addfsr 1,1
  8979  0927  30FF               	movlw	255
  8980  0928  0581               	andwf	1,f
  8981  0929  3141               	addfsr 1,1
  8982  092A  3000               	movlw	0
  8983  092B  0581               	andwf	1,f
  8984  092C  3000               	movlw	0
  8985  092D  00B1               	movwf	__div_to_l_@quot+3
  8986  092E  3000               	movlw	0
  8987  092F  00B0               	movwf	__div_to_l_@quot+2
  8988  0930  3000               	movlw	0
  8989  0931  00AF               	movwf	__div_to_l_@quot+1
  8990  0932  3000               	movlw	0
  8991  0933  00AE               	movwf	__div_to_l_@quot
  8992  0934  307F               	movlw	127
  8993  0935  02B3               	subwf	__div_to_l_@exp1,f
  8994  0936  30A0               	movlw	160
  8995  0937  0732               	addwf	__div_to_l_@cntr,w
  8996  0938  00A6               	movwf	??__div_to_l_
  8997  0939  0826               	movf	??__div_to_l_,w
  8998  093A  02B3               	subwf	__div_to_l_@exp1,f
  8999  093B  3020               	movlw	32
  9000  093C  00A6               	movwf	??__div_to_l_
  9001  093D  0826               	movf	??__div_to_l_,w
  9002  093E  00B2               	movwf	__div_to_l_@cntr
  9003  093F                     l4706:	
  9004  093F  3001               	movlw	1
  9005  0940                     u5845:	
  9006  0940  35AE               	lslf	__div_to_l_@quot,f
  9007  0941  0DAF               	rlf	__div_to_l_@quot+1,f
  9008  0942  0DB0               	rlf	__div_to_l_@quot+2,f
  9009  0943  0DB1               	rlf	__div_to_l_@quot+3,f
  9010  0944  0B89               	decfsz	9,f
  9011  0945  2940               	goto	u5845
  9012  0946  3023               	movlw	low (__div_to_l_@f2| 0)
  9013  0947  0086               	movwf	6
  9014  0948  0187               	clrf	7
  9015  0949  3F40               	moviw [0]fsr1
  9016  094A  00A6               	movwf	??__div_to_l_
  9017  094B  3F41               	moviw [1]fsr1
  9018  094C  00A7               	movwf	??__div_to_l_+1
  9019  094D  3F42               	moviw [2]fsr1
  9020  094E  00A8               	movwf	??__div_to_l_+2
  9021  094F  3F43               	moviw [3]fsr1
  9022  0950  00A9               	movwf	??__div_to_l_+3
  9023  0951  3020               	movlw	low (__div_to_l_@f1| 0)
  9024  0952  0086               	movwf	6
  9025  0953  0187               	clrf	7
  9026  0954  3F40               	moviw [0]fsr1
  9027  0955  00AA               	movwf	??__div_to_l_+4
  9028  0956  3F41               	moviw [1]fsr1
  9029  0957  00AB               	movwf	??__div_to_l_+5
  9030  0958  3F42               	moviw [2]fsr1
  9031  0959  00AC               	movwf	??__div_to_l_+6
  9032  095A  3F43               	moviw [3]fsr1
  9033  095B  00AD               	movwf	??__div_to_l_+7
  9034  095C  0829               	movf	??__div_to_l_+3,w
  9035  095D  022D               	subwf	??__div_to_l_+7,w
  9036  095E  1D03               	skipz
  9037  095F  296A               	goto	u5855
  9038  0960  0828               	movf	??__div_to_l_+2,w
  9039  0961  022C               	subwf	??__div_to_l_+6,w
  9040  0962  1D03               	skipz
  9041  0963  296A               	goto	u5855
  9042  0964  0827               	movf	??__div_to_l_+1,w
  9043  0965  022B               	subwf	??__div_to_l_+5,w
  9044  0966  1D03               	skipz
  9045  0967  296A               	goto	u5855
  9046  0968  0826               	movf	??__div_to_l_,w
  9047  0969  022A               	subwf	??__div_to_l_+4,w
  9048  096A                     u5855:	
  9049  096A  1C03               	skipc
  9050  096B  2987               	goto	l4714
  9051  096C  3023               	movlw	low (__div_to_l_@f2| 0)
  9052  096D  0086               	movwf	6
  9053  096E  0187               	clrf	7
  9054  096F  3F40               	moviw [0]fsr1
  9055  0970  00A6               	movwf	??__div_to_l_
  9056  0971  3F41               	moviw [1]fsr1
  9057  0972  00A7               	movwf	??__div_to_l_+1
  9058  0973  3F42               	moviw [2]fsr1
  9059  0974  00A8               	movwf	??__div_to_l_+2
  9060  0975  3F43               	moviw [3]fsr1
  9061  0976  00A9               	movwf	??__div_to_l_+3
  9062  0977  3020               	movlw	low (__div_to_l_@f1| 0)
  9063  0978  0086               	movwf	6
  9064  0979  0187               	clrf	7
  9065  097A  0826               	movf	??__div_to_l_,w
  9066  097B  0281               	subwf	1,f
  9067  097C  3141               	addfsr 1,1
  9068  097D  0827               	movf	??__div_to_l_+1,w
  9069  097E  3B81               	subwfb	1,f
  9070  097F  3141               	addfsr 1,1
  9071  0980  0828               	movf	??__div_to_l_+2,w
  9072  0981  3B81               	subwfb	1,f
  9073  0982  3141               	addfsr 1,1
  9074  0983  0829               	movf	??__div_to_l_+3,w
  9075  0984  3B81               	subwfb	1,f
  9076  0985  317D               	addfsr 1,-3
  9077  0986  142E               	bsf	__div_to_l_@quot,0
  9078  0987                     l4714:	
  9079  0987  3020               	movlw	low (__div_to_l_@f1| 0)
  9080  0988  0086               	movwf	6
  9081  0989  0187               	clrf	7
  9082  098A  3581               	lslf	1,f
  9083  098B  3141               	addfsr 1,1
  9084  098C  0D81               	rlf	1,f
  9085  098D  3141               	addfsr 1,1
  9086  098E  0D81               	rlf	1,f
  9087  098F  3141               	addfsr 1,1
  9088  0990  0D81               	rlf	1,f
  9089  0991  317D               	addfsr 1,-3
  9090  0992  3001               	movlw	1
  9091  0993  02B2               	subwf	__div_to_l_@cntr,f
  9092  0994  1D03               	btfss	3,2
  9093  0995  293F               	goto	l4706
  9094  0996  1FB3               	btfss	__div_to_l_@exp1,7
  9095  0997  29B4               	goto	l4726
  9096  0998  0833               	movf	__div_to_l_@exp1,w
  9097  0999  3A80               	xorlw	128
  9098  099A  3E9F               	addlw	159
  9099  099B  1803               	skipnc
  9100  099C  29A6               	goto	l4724
  9101  099D  3000               	movlw	0
  9102  099E  00A3               	movwf	?__div_to_l_+3
  9103  099F  3000               	movlw	0
  9104  09A0  00A2               	movwf	?__div_to_l_+2
  9105  09A1  3000               	movlw	0
  9106  09A2  00A1               	movwf	?__div_to_l_+1
  9107  09A3  3000               	movlw	0
  9108  09A4  00A0               	movwf	?__div_to_l_
  9109  09A5  0008               	return
  9110  09A6                     l4724:	
  9111  09A6  3001               	movlw	1
  9112  09A7                     u5895:	
  9113  09A7  36B1               	lsrf	__div_to_l_@quot+3,f
  9114  09A8  0CB0               	rrf	__div_to_l_@quot+2,f
  9115  09A9  0CAF               	rrf	__div_to_l_@quot+1,f
  9116  09AA  0CAE               	rrf	__div_to_l_@quot,f
  9117  09AB  0B89               	decfsz	9,f
  9118  09AC  29A7               	goto	u5895
  9119  09AD  3001               	movlw	1
  9120  09AE  00A6               	movwf	??__div_to_l_
  9121  09AF  0826               	movf	??__div_to_l_,w
  9122  09B0  07B3               	addwf	__div_to_l_@exp1,f
  9123  09B1  1903               	btfsc	3,2
  9124  09B2  29CD               	goto	l4734
  9125  09B3  29A6               	goto	l4724
  9126  09B4                     l4726:	
  9127  09B4  3020               	movlw	32
  9128  09B5  0233               	subwf	__div_to_l_@exp1,w
  9129  09B6  1C03               	skipc
  9130  09B7  29CA               	goto	l686
  9131  09B8  3000               	movlw	0
  9132  09B9  00A3               	movwf	?__div_to_l_+3
  9133  09BA  3000               	movlw	0
  9134  09BB  00A2               	movwf	?__div_to_l_+2
  9135  09BC  3000               	movlw	0
  9136  09BD  00A1               	movwf	?__div_to_l_+1
  9137  09BE  3000               	movlw	0
  9138  09BF  00A0               	movwf	?__div_to_l_
  9139  09C0  0008               	return
  9140  09C1                     l4732:	
  9141  09C1  3001               	movlw	1
  9142  09C2                     u5925:	
  9143  09C2  35AE               	lslf	__div_to_l_@quot,f
  9144  09C3  0DAF               	rlf	__div_to_l_@quot+1,f
  9145  09C4  0DB0               	rlf	__div_to_l_@quot+2,f
  9146  09C5  0DB1               	rlf	__div_to_l_@quot+3,f
  9147  09C6  0B89               	decfsz	9,f
  9148  09C7  29C2               	goto	u5925
  9149  09C8  3001               	movlw	1
  9150  09C9  02B3               	subwf	__div_to_l_@exp1,f
  9151  09CA                     l686:	
  9152  09CA  0833               	movf	__div_to_l_@exp1,w
  9153  09CB  1D03               	btfss	3,2
  9154  09CC  29C1               	goto	l4732
  9155  09CD                     l4734:	
  9156  09CD  0831               	movf	__div_to_l_@quot+3,w
  9157  09CE  00A3               	movwf	?__div_to_l_+3
  9158  09CF  0830               	movf	__div_to_l_@quot+2,w
  9159  09D0  00A2               	movwf	?__div_to_l_+2
  9160  09D1  082F               	movf	__div_to_l_@quot+1,w
  9161  09D2  00A1               	movwf	?__div_to_l_+1
  9162  09D3  082E               	movf	__div_to_l_@quot,w
  9163  09D4  00A0               	movwf	?__div_to_l_
  9164  09D5  0008               	return
  9165  09D6                     __end_of__div_to_l_:	
  9166                           
  9167                           	psect	text22
  9168  1F09                     __ptext22:	
  9169 ;; *************** function ___lltoft *****************
  9170 ;; Defined at:
  9171 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\lltoft.c"
  9172 ;; Parameters:    Size  Location     Type
  9173 ;;  c               4    8[BANK0 ] unsigned long 
  9174 ;; Auto vars:     Size  Location     Type
  9175 ;;  exp             1   13[BANK0 ] unsigned char 
  9176 ;; Return value:  Size  Location     Type
  9177 ;;                  3    8[BANK0 ] float 
  9178 ;; Registers used:
  9179 ;;		wreg, status,2, status,0, pclath, cstack
  9180 ;; Tracked objects:
  9181 ;;		On entry : 0/0
  9182 ;;		On exit  : 0/0
  9183 ;;		Unchanged: 0/0
  9184 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9185 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9186 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9187 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9188 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9189 ;;Total ram usage:        6 bytes
  9190 ;; Hardware stack levels used:    1
  9191 ;; Hardware stack levels required when called:    8
  9192 ;; This function calls:
  9193 ;;		___ftpack
  9194 ;; This function is called by:
  9195 ;;		_loop
  9196 ;;		_sprintf
  9197 ;; This function uses a non-reentrant model
  9198 ;;
  9199                           
  9200                           
  9201                           ;psect for function ___lltoft
  9202  1F09                     ___lltoft:	
  9203                           
  9204                           ;incstack = 0
  9205                           ; Regs used in ___lltoft: [wreg+status,2+status,0+pclath+cstack]
  9206  1F09  308E               	movlw	142
  9207  1F0A  0020               	movlb	0	; select bank0
  9208  1F0B  00AC               	movwf	??___lltoft
  9209  1F0C  082C               	movf	??___lltoft,w
  9210  1F0D  00AD               	movwf	___lltoft@exp
  9211  1F0E                     l4878:	
  9212  1F0E  30FF               	movlw	255
  9213  1F0F  052B               	andwf	___lltoft@c+3,w
  9214  1F10  1903               	btfsc	3,2
  9215  1F11  2F1E               	goto	l4880
  9216  1F12  3001               	movlw	1
  9217  1F13                     u6245:	
  9218  1F13  36AB               	lsrf	___lltoft@c+3,f
  9219  1F14  0CAA               	rrf	___lltoft@c+2,f
  9220  1F15  0CA9               	rrf	___lltoft@c+1,f
  9221  1F16  0CA8               	rrf	___lltoft@c,f
  9222  1F17  0B89               	decfsz	9,f
  9223  1F18  2F13               	goto	u6245
  9224  1F19  3001               	movlw	1
  9225  1F1A  00AC               	movwf	??___lltoft
  9226  1F1B  082C               	movf	??___lltoft,w
  9227  1F1C  07AD               	addwf	___lltoft@exp,f
  9228  1F1D  2F0E               	goto	l4878
  9229  1F1E                     l4880:	
  9230  1F1E  0828               	movf	___lltoft@c,w
  9231  1F1F  00A0               	movwf	___ftpack@arg
  9232  1F20  0829               	movf	___lltoft@c+1,w
  9233  1F21  00A1               	movwf	___ftpack@arg+1
  9234  1F22  082A               	movf	___lltoft@c+2,w
  9235  1F23  00A2               	movwf	___ftpack@arg+2
  9236  1F24  082D               	movf	___lltoft@exp,w
  9237  1F25  00AC               	movwf	??___lltoft
  9238  1F26  082C               	movf	??___lltoft,w
  9239  1F27  00A3               	movwf	___ftpack@exp
  9240  1F28  01A4               	clrf	___ftpack@sign
  9241  1F29  3192  2275         	fcall	___ftpack
  9242  1F2B  0020               	movlb	0	; select bank0
  9243  1F2C  0820               	movf	?___ftpack,w
  9244  1F2D  00A8               	movwf	?___lltoft
  9245  1F2E  0821               	movf	?___ftpack+1,w
  9246  1F2F  00A9               	movwf	?___lltoft+1
  9247  1F30  0822               	movf	?___ftpack+2,w
  9248  1F31  00AA               	movwf	?___lltoft+2
  9249  1F32  0008               	return
  9250  1F33                     __end_of___lltoft:	
  9251                           
  9252                           	psect	text23
  9253  10C5                     __ptext23:	
  9254 ;; *************** function ___llmod *****************
  9255 ;; Defined at:
  9256 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\llmod.c"
  9257 ;; Parameters:    Size  Location     Type
  9258 ;;  divisor         4    0[BANK0 ] unsigned long 
  9259 ;;  dividend        4    4[BANK0 ] unsigned long 
  9260 ;; Auto vars:     Size  Location     Type
  9261 ;;  counter         1    9[BANK0 ] unsigned char 
  9262 ;; Return value:  Size  Location     Type
  9263 ;;                  4    0[BANK0 ] unsigned long 
  9264 ;; Registers used:
  9265 ;;		wreg, status,2, status,0
  9266 ;; Tracked objects:
  9267 ;;		On entry : 0/0
  9268 ;;		On exit  : 0/0
  9269 ;;		Unchanged: 0/0
  9270 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9271 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9272 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9273 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9274 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9275 ;;Total ram usage:       10 bytes
  9276 ;; Hardware stack levels used:    1
  9277 ;; Hardware stack levels required when called:    7
  9278 ;; This function calls:
  9279 ;;		Nothing
  9280 ;; This function is called by:
  9281 ;;		_sprintf
  9282 ;; This function uses a non-reentrant model
  9283 ;;
  9284                           
  9285                           
  9286                           ;psect for function ___llmod
  9287  10C5                     ___llmod:	
  9288                           
  9289                           ;incstack = 0
  9290                           ; Regs used in ___llmod: [wreg+status,2+status,0]
  9291  10C5  0020               	movlb	0	; select bank0
  9292  10C6  0823               	movf	___llmod@divisor+3,w
  9293  10C7  0422               	iorwf	___llmod@divisor+2,w
  9294  10C8  0421               	iorwf	___llmod@divisor+1,w
  9295  10C9  0420               	iorwf	___llmod@divisor,w
  9296  10CA  1903               	skipnz
  9297  10CB  28FF               	goto	l4870
  9298  10CC  01A9               	clrf	___llmod@counter
  9299  10CD  0AA9               	incf	___llmod@counter,f
  9300  10CE                     l4860:	
  9301  10CE  1BA3               	btfsc	___llmod@divisor+3,7
  9302  10CF  28DC               	goto	l4862
  9303  10D0  3001               	movlw	1
  9304  10D1                     u6195:	
  9305  10D1  35A0               	lslf	___llmod@divisor,f
  9306  10D2  0DA1               	rlf	___llmod@divisor+1,f
  9307  10D3  0DA2               	rlf	___llmod@divisor+2,f
  9308  10D4  0DA3               	rlf	___llmod@divisor+3,f
  9309  10D5  0B89               	decfsz	9,f
  9310  10D6  28D1               	goto	u6195
  9311  10D7  3001               	movlw	1
  9312  10D8  00A8               	movwf	??___llmod
  9313  10D9  0828               	movf	??___llmod,w
  9314  10DA  07A9               	addwf	___llmod@counter,f
  9315  10DB  28CE               	goto	l4860
  9316  10DC                     l4862:	
  9317  10DC  0823               	movf	___llmod@divisor+3,w
  9318  10DD  0227               	subwf	___llmod@dividend+3,w
  9319  10DE  1D03               	skipz
  9320  10DF  28EA               	goto	u6215
  9321  10E0  0822               	movf	___llmod@divisor+2,w
  9322  10E1  0226               	subwf	___llmod@dividend+2,w
  9323  10E2  1D03               	skipz
  9324  10E3  28EA               	goto	u6215
  9325  10E4  0821               	movf	___llmod@divisor+1,w
  9326  10E5  0225               	subwf	___llmod@dividend+1,w
  9327  10E6  1D03               	skipz
  9328  10E7  28EA               	goto	u6215
  9329  10E8  0820               	movf	___llmod@divisor,w
  9330  10E9  0224               	subwf	___llmod@dividend,w
  9331  10EA                     u6215:	
  9332  10EA  1C03               	skipc
  9333  10EB  28F4               	goto	l4866
  9334  10EC  0820               	movf	___llmod@divisor,w
  9335  10ED  02A4               	subwf	___llmod@dividend,f
  9336  10EE  0821               	movf	___llmod@divisor+1,w
  9337  10EF  3BA5               	subwfb	___llmod@dividend+1,f
  9338  10F0  0822               	movf	___llmod@divisor+2,w
  9339  10F1  3BA6               	subwfb	___llmod@dividend+2,f
  9340  10F2  0823               	movf	___llmod@divisor+3,w
  9341  10F3  3BA7               	subwfb	___llmod@dividend+3,f
  9342  10F4                     l4866:	
  9343  10F4  3001               	movlw	1
  9344  10F5                     u6225:	
  9345  10F5  36A3               	lsrf	___llmod@divisor+3,f
  9346  10F6  0CA2               	rrf	___llmod@divisor+2,f
  9347  10F7  0CA1               	rrf	___llmod@divisor+1,f
  9348  10F8  0CA0               	rrf	___llmod@divisor,f
  9349  10F9  0B89               	decfsz	9,f
  9350  10FA  28F5               	goto	u6225
  9351  10FB  3001               	movlw	1
  9352  10FC  02A9               	subwf	___llmod@counter,f
  9353  10FD  1D03               	btfss	3,2
  9354  10FE  28DC               	goto	l4862
  9355  10FF                     l4870:	
  9356  10FF  0827               	movf	___llmod@dividend+3,w
  9357  1100  00A3               	movwf	?___llmod+3
  9358  1101  0826               	movf	___llmod@dividend+2,w
  9359  1102  00A2               	movwf	?___llmod+2
  9360  1103  0825               	movf	___llmod@dividend+1,w
  9361  1104  00A1               	movwf	?___llmod+1
  9362  1105  0824               	movf	___llmod@dividend,w
  9363  1106  00A0               	movwf	?___llmod
  9364  1107  0008               	return
  9365  1108                     __end_of___llmod:	
  9366                           
  9367                           	psect	text24
  9368  079D                     __ptext24:	
  9369 ;; *************** function ___lldiv *****************
  9370 ;; Defined at:
  9371 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\__lldiv.c"
  9372 ;; Parameters:    Size  Location     Type
  9373 ;;  divisor         4    0[BANK0 ] unsigned long 
  9374 ;;  dividend        4    4[BANK0 ] unsigned long 
  9375 ;; Auto vars:     Size  Location     Type
  9376 ;;  quotient        4    9[BANK0 ] unsigned long 
  9377 ;;  counter         1   13[BANK0 ] unsigned char 
  9378 ;; Return value:  Size  Location     Type
  9379 ;;                  4    0[BANK0 ] unsigned long 
  9380 ;; Registers used:
  9381 ;;		wreg, status,2, status,0
  9382 ;; Tracked objects:
  9383 ;;		On entry : 0/0
  9384 ;;		On exit  : 0/0
  9385 ;;		Unchanged: 0/0
  9386 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9387 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9388 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9389 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9390 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9391 ;;Total ram usage:       14 bytes
  9392 ;; Hardware stack levels used:    1
  9393 ;; Hardware stack levels required when called:    7
  9394 ;; This function calls:
  9395 ;;		Nothing
  9396 ;; This function is called by:
  9397 ;;		_sprintf
  9398 ;; This function uses a non-reentrant model
  9399 ;;
  9400                           
  9401                           
  9402                           ;psect for function ___lldiv
  9403  079D                     ___lldiv:	
  9404                           
  9405                           ;incstack = 0
  9406                           ; Regs used in ___lldiv: [wreg+status,2+status,0]
  9407  079D  3000               	movlw	0
  9408  079E  0020               	movlb	0	; select bank0
  9409  079F  00AC               	movwf	___lldiv@quotient+3
  9410  07A0  3000               	movlw	0
  9411  07A1  00AB               	movwf	___lldiv@quotient+2
  9412  07A2  3000               	movlw	0
  9413  07A3  00AA               	movwf	___lldiv@quotient+1
  9414  07A4  3000               	movlw	0
  9415  07A5  00A9               	movwf	___lldiv@quotient
  9416  07A6  0823               	movf	___lldiv@divisor+3,w
  9417  07A7  0422               	iorwf	___lldiv@divisor+2,w
  9418  07A8  0421               	iorwf	___lldiv@divisor+1,w
  9419  07A9  0420               	iorwf	___lldiv@divisor,w
  9420  07AA  1903               	skipnz
  9421  07AB  2FE7               	goto	l4772
  9422  07AC  01AD               	clrf	___lldiv@counter
  9423  07AD  0AAD               	incf	___lldiv@counter,f
  9424  07AE                     l4758:	
  9425  07AE  1BA3               	btfsc	___lldiv@divisor+3,7
  9426  07AF  2FBC               	goto	l4760
  9427  07B0  3001               	movlw	1
  9428  07B1                     u5975:	
  9429  07B1  35A0               	lslf	___lldiv@divisor,f
  9430  07B2  0DA1               	rlf	___lldiv@divisor+1,f
  9431  07B3  0DA2               	rlf	___lldiv@divisor+2,f
  9432  07B4  0DA3               	rlf	___lldiv@divisor+3,f
  9433  07B5  0B89               	decfsz	9,f
  9434  07B6  2FB1               	goto	u5975
  9435  07B7  3001               	movlw	1
  9436  07B8  00A8               	movwf	??___lldiv
  9437  07B9  0828               	movf	??___lldiv,w
  9438  07BA  07AD               	addwf	___lldiv@counter,f
  9439  07BB  2FAE               	goto	l4758
  9440  07BC                     l4760:	
  9441  07BC  3001               	movlw	1
  9442  07BD                     u5995:	
  9443  07BD  35A9               	lslf	___lldiv@quotient,f
  9444  07BE  0DAA               	rlf	___lldiv@quotient+1,f
  9445  07BF  0DAB               	rlf	___lldiv@quotient+2,f
  9446  07C0  0DAC               	rlf	___lldiv@quotient+3,f
  9447  07C1  0B89               	decfsz	9,f
  9448  07C2  2FBD               	goto	u5995
  9449  07C3  0823               	movf	___lldiv@divisor+3,w
  9450  07C4  0227               	subwf	___lldiv@dividend+3,w
  9451  07C5  1D03               	skipz
  9452  07C6  2FD1               	goto	u6005
  9453  07C7  0822               	movf	___lldiv@divisor+2,w
  9454  07C8  0226               	subwf	___lldiv@dividend+2,w
  9455  07C9  1D03               	skipz
  9456  07CA  2FD1               	goto	u6005
  9457  07CB  0821               	movf	___lldiv@divisor+1,w
  9458  07CC  0225               	subwf	___lldiv@dividend+1,w
  9459  07CD  1D03               	skipz
  9460  07CE  2FD1               	goto	u6005
  9461  07CF  0820               	movf	___lldiv@divisor,w
  9462  07D0  0224               	subwf	___lldiv@dividend,w
  9463  07D1                     u6005:	
  9464  07D1  1C03               	skipc
  9465  07D2  2FDC               	goto	l4768
  9466  07D3  0820               	movf	___lldiv@divisor,w
  9467  07D4  02A4               	subwf	___lldiv@dividend,f
  9468  07D5  0821               	movf	___lldiv@divisor+1,w
  9469  07D6  3BA5               	subwfb	___lldiv@dividend+1,f
  9470  07D7  0822               	movf	___lldiv@divisor+2,w
  9471  07D8  3BA6               	subwfb	___lldiv@dividend+2,f
  9472  07D9  0823               	movf	___lldiv@divisor+3,w
  9473  07DA  3BA7               	subwfb	___lldiv@dividend+3,f
  9474  07DB  1429               	bsf	___lldiv@quotient,0
  9475  07DC                     l4768:	
  9476  07DC  3001               	movlw	1
  9477  07DD                     u6015:	
  9478  07DD  36A3               	lsrf	___lldiv@divisor+3,f
  9479  07DE  0CA2               	rrf	___lldiv@divisor+2,f
  9480  07DF  0CA1               	rrf	___lldiv@divisor+1,f
  9481  07E0  0CA0               	rrf	___lldiv@divisor,f
  9482  07E1  0B89               	decfsz	9,f
  9483  07E2  2FDD               	goto	u6015
  9484  07E3  3001               	movlw	1
  9485  07E4  02AD               	subwf	___lldiv@counter,f
  9486  07E5  1D03               	btfss	3,2
  9487  07E6  2FBC               	goto	l4760
  9488  07E7                     l4772:	
  9489  07E7  082C               	movf	___lldiv@quotient+3,w
  9490  07E8  00A3               	movwf	?___lldiv+3
  9491  07E9  082B               	movf	___lldiv@quotient+2,w
  9492  07EA  00A2               	movwf	?___lldiv+2
  9493  07EB  082A               	movf	___lldiv@quotient+1,w
  9494  07EC  00A1               	movwf	?___lldiv+1
  9495  07ED  0829               	movf	___lldiv@quotient,w
  9496  07EE  00A0               	movwf	?___lldiv
  9497  07EF  0008               	return
  9498  07F0                     __end_of___lldiv:	
  9499                           
  9500                           	psect	text25
  9501  12DA                     __ptext25:	
  9502 ;; *************** function ___fttol *****************
  9503 ;; Defined at:
  9504 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\fttol.c"
  9505 ;; Parameters:    Size  Location     Type
  9506 ;;  f1              3   11[BANK1 ] float 
  9507 ;; Auto vars:     Size  Location     Type
  9508 ;;  lval            4   20[BANK1 ] unsigned long 
  9509 ;;  exp1            1   24[BANK1 ] unsigned char 
  9510 ;;  sign1           1   19[BANK1 ] unsigned char 
  9511 ;; Return value:  Size  Location     Type
  9512 ;;                  4   11[BANK1 ] long 
  9513 ;; Registers used:
  9514 ;;		wreg, status,2, status,0
  9515 ;; Tracked objects:
  9516 ;;		On entry : 0/0
  9517 ;;		On exit  : 0/0
  9518 ;;		Unchanged: 0/0
  9519 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9520 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  9521 ;;      Locals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0
  9522 ;;      Temps:          0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  9523 ;;      Totals:         0       0      14       0       0       0       0       0       0       0       0       0       
      +0       0
  9524 ;;Total ram usage:       14 bytes
  9525 ;; Hardware stack levels used:    1
  9526 ;; Hardware stack levels required when called:    7
  9527 ;; This function calls:
  9528 ;;		Nothing
  9529 ;; This function is called by:
  9530 ;;		_sprintf
  9531 ;; This function uses a non-reentrant model
  9532 ;;
  9533                           
  9534                           
  9535                           ;psect for function ___fttol
  9536  12DA                     ___fttol:	
  9537                           
  9538                           ;incstack = 0
  9539                           ; Regs used in ___fttol: [wreg+status,2+status,0]
  9540  12DA  0021               	movlb	1	; select bank1
  9541  12DB  082B               	movf	___fttol@f1^(0+128),w
  9542  12DC  00AF               	movwf	??___fttol^(0+128)
  9543  12DD  082C               	movf	(___fttol@f1+1)^(0+128),w
  9544  12DE  00B0               	movwf	(??___fttol^(0+128)+1)
  9545  12DF  082D               	movf	(___fttol@f1+2)^(0+128),w
  9546  12E0  00B1               	movwf	(??___fttol^(0+128)+2)
  9547  12E1  1003               	clrc
  9548  12E2  0D30               	rlf	(??___fttol^(0+128)+1),w
  9549  12E3  0D31               	rlf	(??___fttol^(0+128)+2),w
  9550  12E4  00B2               	movwf	(??___fttol+3)^(0+128)
  9551  12E5  0832               	movf	(??___fttol+3)^(0+128),w
  9552  12E6  00B8               	movwf	___fttol@exp1^(0+128)
  9553  12E7  0838               	movf	___fttol@exp1^(0+128),w
  9554  12E8  1D03               	btfss	3,2
  9555  12E9  2AF3               	goto	l4818
  9556  12EA  3000               	movlw	0
  9557  12EB  00AE               	movwf	(?___fttol+3)^(0+128)
  9558  12EC  3000               	movlw	0
  9559  12ED  00AD               	movwf	(?___fttol+2)^(0+128)
  9560  12EE  3000               	movlw	0
  9561  12EF  00AC               	movwf	(?___fttol+1)^(0+128)
  9562  12F0  3000               	movlw	0
  9563  12F1  00AB               	movwf	?___fttol^(0+128)
  9564  12F2  0008               	return
  9565  12F3                     l4818:	
  9566  12F3  082B               	movf	___fttol@f1^(0+128),w
  9567  12F4  00AF               	movwf	??___fttol^(0+128)
  9568  12F5  082C               	movf	(___fttol@f1+1)^(0+128),w
  9569  12F6  00B0               	movwf	(??___fttol^(0+128)+1)
  9570  12F7  082D               	movf	(___fttol@f1+2)^(0+128),w
  9571  12F8  00B1               	movwf	(??___fttol^(0+128)+2)
  9572  12F9  3017               	movlw	23
  9573  12FA                     u6095:	
  9574  12FA  36B1               	lsrf	(??___fttol^(0+128)+2),f
  9575  12FB  0CB0               	rrf	(??___fttol^(0+128)+1),f
  9576  12FC  0CAF               	rrf	??___fttol^(0+128),f
  9577  12FD  0B89               	decfsz	9,f
  9578  12FE  2AFA               	goto	u6095
  9579  12FF  082F               	movf	??___fttol^(0+128),w
  9580  1300  00B2               	movwf	(??___fttol+3)^(0+128)
  9581  1301  0832               	movf	(??___fttol+3)^(0+128),w
  9582  1302  00B3               	movwf	___fttol@sign1^(0+128)
  9583  1303  17AC               	bsf	(___fttol@f1^(0+128)+1),7
  9584  1304  30FF               	movlw	255
  9585  1305  05AB               	andwf	___fttol@f1^(0+128),f
  9586  1306  30FF               	movlw	255
  9587  1307  05AC               	andwf	(___fttol@f1+1)^(0+128),f
  9588  1308  3000               	movlw	0
  9589  1309  05AD               	andwf	(___fttol@f1+2)^(0+128),f
  9590  130A  082B               	movf	___fttol@f1^(0+128),w
  9591  130B  00B4               	movwf	___fttol@lval^(0+128)
  9592  130C  082C               	movf	(___fttol@f1+1)^(0+128),w
  9593  130D  00B5               	movwf	(___fttol@lval^(0+128)+1)
  9594  130E  082D               	movf	(___fttol@f1+2)^(0+128),w
  9595  130F  00B6               	movwf	(___fttol@lval^(0+128)+2)
  9596  1310  01B7               	clrf	(___fttol@lval^(0+128)+3)
  9597  1311  308E               	movlw	142
  9598  1312  02B8               	subwf	___fttol@exp1^(0+128),f
  9599  1313  1FB8               	btfss	___fttol@exp1^(0+128),7
  9600  1314  2B31               	goto	l4838
  9601  1315  0838               	movf	___fttol@exp1^(0+128),w
  9602  1316  3A80               	xorlw	128
  9603  1317  3E8F               	addlw	143
  9604  1318  1803               	skipnc
  9605  1319  2B23               	goto	l4836
  9606  131A  3000               	movlw	0
  9607  131B  00AE               	movwf	(?___fttol+3)^(0+128)
  9608  131C  3000               	movlw	0
  9609  131D  00AD               	movwf	(?___fttol+2)^(0+128)
  9610  131E  3000               	movlw	0
  9611  131F  00AC               	movwf	(?___fttol+1)^(0+128)
  9612  1320  3000               	movlw	0
  9613  1321  00AB               	movwf	?___fttol^(0+128)
  9614  1322  0008               	return
  9615  1323                     l4836:	
  9616  1323  3001               	movlw	1
  9617  1324                     u6125:	
  9618  1324  36B7               	lsrf	(___fttol@lval+3)^(0+128),f
  9619  1325  0CB6               	rrf	(___fttol@lval+2)^(0+128),f
  9620  1326  0CB5               	rrf	(___fttol@lval+1)^(0+128),f
  9621  1327  0CB4               	rrf	___fttol@lval^(0+128),f
  9622  1328  0B89               	decfsz	9,f
  9623  1329  2B24               	goto	u6125
  9624  132A  3001               	movlw	1
  9625  132B  00AF               	movwf	??___fttol^(0+128)
  9626  132C  082F               	movf	??___fttol^(0+128),w
  9627  132D  07B8               	addwf	___fttol@exp1^(0+128),f
  9628  132E  1903               	btfsc	3,2
  9629  132F  2B4A               	goto	l4846
  9630  1330  2B23               	goto	l4836
  9631  1331                     l4838:	
  9632  1331  3018               	movlw	24
  9633  1332  0238               	subwf	___fttol@exp1^(0+128),w
  9634  1333  1C03               	skipc
  9635  1334  2B47               	goto	l806
  9636  1335  3000               	movlw	0
  9637  1336  00AE               	movwf	(?___fttol+3)^(0+128)
  9638  1337  3000               	movlw	0
  9639  1338  00AD               	movwf	(?___fttol+2)^(0+128)
  9640  1339  3000               	movlw	0
  9641  133A  00AC               	movwf	(?___fttol+1)^(0+128)
  9642  133B  3000               	movlw	0
  9643  133C  00AB               	movwf	?___fttol^(0+128)
  9644  133D  0008               	return
  9645  133E                     l4844:	
  9646  133E  3001               	movlw	1
  9647  133F                     u6155:	
  9648  133F  35B4               	lslf	___fttol@lval^(0+128),f
  9649  1340  0DB5               	rlf	(___fttol@lval+1)^(0+128),f
  9650  1341  0DB6               	rlf	(___fttol@lval+2)^(0+128),f
  9651  1342  0DB7               	rlf	(___fttol@lval+3)^(0+128),f
  9652  1343  0B89               	decfsz	9,f
  9653  1344  2B3F               	goto	u6155
  9654  1345  3001               	movlw	1
  9655  1346  02B8               	subwf	___fttol@exp1^(0+128),f
  9656  1347                     l806:	
  9657  1347  0838               	movf	___fttol@exp1^(0+128),w
  9658  1348  1D03               	btfss	3,2
  9659  1349  2B3E               	goto	l4844
  9660  134A                     l4846:	
  9661  134A  0833               	movf	___fttol@sign1^(0+128),w
  9662  134B  1903               	btfsc	3,2
  9663  134C  2B58               	goto	l4850
  9664  134D  09B4               	comf	___fttol@lval^(0+128),f
  9665  134E  09B5               	comf	(___fttol@lval+1)^(0+128),f
  9666  134F  09B6               	comf	(___fttol@lval+2)^(0+128),f
  9667  1350  09B7               	comf	(___fttol@lval+3)^(0+128),f
  9668  1351  0AB4               	incf	___fttol@lval^(0+128),f
  9669  1352  1903               	skipnz
  9670  1353  0AB5               	incf	(___fttol@lval+1)^(0+128),f
  9671  1354  1903               	skipnz
  9672  1355  0AB6               	incf	(___fttol@lval+2)^(0+128),f
  9673  1356  1903               	skipnz
  9674  1357  0AB7               	incf	(___fttol@lval+3)^(0+128),f
  9675  1358                     l4850:	
  9676  1358  0837               	movf	(___fttol@lval+3)^(0+128),w
  9677  1359  00AE               	movwf	(?___fttol+3)^(0+128)
  9678  135A  0836               	movf	(___fttol@lval+2)^(0+128),w
  9679  135B  00AD               	movwf	(?___fttol+2)^(0+128)
  9680  135C  0835               	movf	(___fttol@lval+1)^(0+128),w
  9681  135D  00AC               	movwf	(?___fttol+1)^(0+128)
  9682  135E  0834               	movf	___fttol@lval^(0+128),w
  9683  135F  00AB               	movwf	?___fttol^(0+128)
  9684  1360  0008               	return
  9685  1361                     __end_of___fttol:	
  9686                           
  9687                           	psect	text26
  9688  1E19                     __ptext26:	
  9689 ;; *************** function ___ftsub *****************
  9690 ;; Defined at:
  9691 ;;		line 17 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\ftsub.c"
  9692 ;; Parameters:    Size  Location     Type
  9693 ;;  f2              3   35[BANK0 ] float 
  9694 ;;  f1              3   38[BANK0 ] float 
  9695 ;; Auto vars:     Size  Location     Type
  9696 ;;		None
  9697 ;; Return value:  Size  Location     Type
  9698 ;;                  3   35[BANK0 ] float 
  9699 ;; Registers used:
  9700 ;;		wreg, status,2, status,0, pclath, cstack
  9701 ;; Tracked objects:
  9702 ;;		On entry : 0/0
  9703 ;;		On exit  : 0/0
  9704 ;;		Unchanged: 0/0
  9705 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9706 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9707 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9708 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9709 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9710 ;;Total ram usage:        6 bytes
  9711 ;; Hardware stack levels used:    1
  9712 ;; Hardware stack levels required when called:    9
  9713 ;; This function calls:
  9714 ;;		___ftadd
  9715 ;; This function is called by:
  9716 ;;		_sprintf
  9717 ;; This function uses a non-reentrant model
  9718 ;;
  9719                           
  9720                           
  9721                           ;psect for function ___ftsub
  9722  1E19                     ___ftsub:	
  9723                           
  9724                           ;incstack = 0
  9725                           ; Regs used in ___ftsub: [wreg+status,2+status,0+pclath+cstack]
  9726  1E19  0020               	movlb	0	; select bank0
  9727  1E1A  0845               	movf	___ftsub@f2+2,w
  9728  1E1B  0444               	iorwf	___ftsub@f2+1,w
  9729  1E1C  0443               	iorwf	___ftsub@f2,w
  9730  1E1D  1903               	skipnz
  9731  1E1E  2E21               	goto	l4808
  9732  1E1F  3080               	movlw	128
  9733  1E20  06C5               	xorwf	___ftsub@f2+2,f
  9734  1E21                     l4808:	
  9735  1E21  0846               	movf	___ftsub@f1,w
  9736  1E22  00B6               	movwf	___ftadd@f1
  9737  1E23  0847               	movf	___ftsub@f1+1,w
  9738  1E24  00B7               	movwf	___ftadd@f1+1
  9739  1E25  0848               	movf	___ftsub@f1+2,w
  9740  1E26  00B8               	movwf	___ftadd@f1+2
  9741  1E27  0843               	movf	___ftsub@f2,w
  9742  1E28  00B9               	movwf	___ftadd@f2
  9743  1E29  0844               	movf	___ftsub@f2+1,w
  9744  1E2A  00BA               	movwf	___ftadd@f2+1
  9745  1E2B  0845               	movf	___ftsub@f2+2,w
  9746  1E2C  00BB               	movwf	___ftadd@f2+2
  9747  1E2D  3195  25F7         	fcall	___ftadd
  9748  1E2F  0020               	movlb	0	; select bank0
  9749  1E30  0836               	movf	?___ftadd,w
  9750  1E31  00C3               	movwf	?___ftsub
  9751  1E32  0837               	movf	?___ftadd+1,w
  9752  1E33  00C4               	movwf	?___ftsub+1
  9753  1E34  0838               	movf	?___ftadd+2,w
  9754  1E35  00C5               	movwf	?___ftsub+2
  9755  1E36  0008               	return
  9756  1E37                     __end_of___ftsub:	
  9757                           
  9758                           	psect	text27
  9759  1008                     __ptext27:	
  9760 ;; *************** function ___ftneg *****************
  9761 ;; Defined at:
  9762 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\ftneg.c"
  9763 ;; Parameters:    Size  Location     Type
  9764 ;;  f1              3   63[BANK0 ] float 
  9765 ;; Auto vars:     Size  Location     Type
  9766 ;;		None
  9767 ;; Return value:  Size  Location     Type
  9768 ;;                  3   63[BANK0 ] float 
  9769 ;; Registers used:
  9770 ;;		wreg
  9771 ;; Tracked objects:
  9772 ;;		On entry : 0/0
  9773 ;;		On exit  : 0/0
  9774 ;;		Unchanged: 0/0
  9775 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9776 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9777 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9778 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9779 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9780 ;;Total ram usage:        3 bytes
  9781 ;; Hardware stack levels used:    1
  9782 ;; Hardware stack levels required when called:    7
  9783 ;; This function calls:
  9784 ;;		Nothing
  9785 ;; This function is called by:
  9786 ;;		_loop
  9787 ;;		_sprintf
  9788 ;; This function uses a non-reentrant model
  9789 ;;
  9790                           
  9791                           
  9792                           ;psect for function ___ftneg
  9793  1008                     ___ftneg:	
  9794                           
  9795                           ;incstack = 0
  9796                           ; Regs used in ___ftneg: [wreg]
  9797  1008  0020               	movlb	0	; select bank0
  9798  1009  0861               	movf	___ftneg@f1+2,w
  9799  100A  0460               	iorwf	___ftneg@f1+1,w
  9800  100B  045F               	iorwf	___ftneg@f1,w
  9801  100C  1903               	skipnz
  9802  100D  0008               	return
  9803  100E  3080               	movlw	128
  9804  100F  06E1               	xorwf	___ftneg@f1+2,f
  9805  1010  0008               	return
  9806  1011                     __end_of___ftneg:	
  9807                           
  9808                           	psect	text28
  9809  104B                     __ptext28:	
  9810 ;; *************** function ___ftge *****************
  9811 ;; Defined at:
  9812 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\ftge.c"
  9813 ;; Parameters:    Size  Location     Type
  9814 ;;  ff1             3    0[BANK0 ] float 
  9815 ;;  ff2             3    3[BANK0 ] float 
  9816 ;; Auto vars:     Size  Location     Type
  9817 ;;		None
  9818 ;; Return value:  Size  Location     Type
  9819 ;;		None               void
  9820 ;; Registers used:
  9821 ;;		wreg, status,2, status,0
  9822 ;; Tracked objects:
  9823 ;;		On entry : 0/0
  9824 ;;		On exit  : 0/0
  9825 ;;		Unchanged: 0/0
  9826 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9827 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9828 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9829 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9830 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9831 ;;Total ram usage:        9 bytes
  9832 ;; Hardware stack levels used:    1
  9833 ;; Hardware stack levels required when called:    7
  9834 ;; This function calls:
  9835 ;;		Nothing
  9836 ;; This function is called by:
  9837 ;;		_sprintf
  9838 ;; This function uses a non-reentrant model
  9839 ;;
  9840                           
  9841                           
  9842                           ;psect for function ___ftge
  9843  104B                     ___ftge:	
  9844                           
  9845                           ;incstack = 0
  9846                           ; Regs used in ___ftge: [wreg+status,2+status,0]
  9847  104B  0020               	movlb	0	; select bank0
  9848  104C  1FA2               	btfss	___ftge@ff1+2,7
  9849  104D  2862               	goto	l4780
  9850  104E  0920               	comf	___ftge@ff1,w
  9851  104F  00A6               	movwf	??___ftge
  9852  1050  0921               	comf	___ftge@ff1+1,w
  9853  1051  00A7               	movwf	??___ftge+1
  9854  1052  0922               	comf	___ftge@ff1+2,w
  9855  1053  00A8               	movwf	??___ftge+2
  9856  1054  0AA6               	incf	??___ftge,f
  9857  1055  1903               	skipnz
  9858  1056  0AA7               	incf	??___ftge+1,f
  9859  1057  1903               	skipnz
  9860  1058  0AA8               	incf	??___ftge+2,f
  9861  1059  3000               	movlw	0
  9862  105A  0726               	addwf	??___ftge,w
  9863  105B  00A0               	movwf	___ftge@ff1
  9864  105C  3000               	movlw	0
  9865  105D  3D27               	addwfc	??___ftge+1,w
  9866  105E  00A1               	movwf	___ftge@ff1+1
  9867  105F  3080               	movlw	128
  9868  1060  3D28               	addwfc	??___ftge+2,w
  9869  1061  00A2               	movwf	___ftge@ff1+2
  9870  1062                     l4780:	
  9871  1062  1FA5               	btfss	___ftge@ff2+2,7
  9872  1063  2878               	goto	l4784
  9873  1064  0923               	comf	___ftge@ff2,w
  9874  1065  00A6               	movwf	??___ftge
  9875  1066  0924               	comf	___ftge@ff2+1,w
  9876  1067  00A7               	movwf	??___ftge+1
  9877  1068  0925               	comf	___ftge@ff2+2,w
  9878  1069  00A8               	movwf	??___ftge+2
  9879  106A  0AA6               	incf	??___ftge,f
  9880  106B  1903               	skipnz
  9881  106C  0AA7               	incf	??___ftge+1,f
  9882  106D  1903               	skipnz
  9883  106E  0AA8               	incf	??___ftge+2,f
  9884  106F  3000               	movlw	0
  9885  1070  0726               	addwf	??___ftge,w
  9886  1071  00A3               	movwf	___ftge@ff2
  9887  1072  3000               	movlw	0
  9888  1073  3D27               	addwfc	??___ftge+1,w
  9889  1074  00A4               	movwf	___ftge@ff2+1
  9890  1075  3080               	movlw	128
  9891  1076  3D28               	addwfc	??___ftge+2,w
  9892  1077  00A5               	movwf	___ftge@ff2+2
  9893  1078                     l4784:	
  9894  1078  3080               	movlw	128
  9895  1079  06A2               	xorwf	___ftge@ff1+2,f
  9896  107A  3080               	movlw	128
  9897  107B  06A5               	xorwf	___ftge@ff2+2,f
  9898  107C  0825               	movf	___ftge@ff2+2,w
  9899  107D  0222               	subwf	___ftge@ff1+2,w
  9900  107E  1D03               	skipz
  9901  107F  0008               	return
  9902  1080  0824               	movf	___ftge@ff2+1,w
  9903  1081  0221               	subwf	___ftge@ff1+1,w
  9904  1082  1D03               	skipz
  9905  1083  0008               	return
  9906  1084  0823               	movf	___ftge@ff2,w
  9907  1085  0220               	subwf	___ftge@ff1,w
  9908  1086  0008               	return
  9909  1087                     __end_of___ftge:	
  9910                           
  9911                           	psect	text29
  9912  1EB9                     __ptext29:	
  9913 ;; *************** function _sleep *****************
  9914 ;; Defined at:
  9915 ;;		line 78 in file "main.c"
  9916 ;; Parameters:    Size  Location     Type
  9917 ;;  milliseconds    2    6[BANK0 ] unsigned int 
  9918 ;; Auto vars:     Size  Location     Type
  9919 ;;		None
  9920 ;; Return value:  Size  Location     Type
  9921 ;;                  1    wreg      void 
  9922 ;; Registers used:
  9923 ;;		wreg, status,2, status,0, pclath, cstack
  9924 ;; Tracked objects:
  9925 ;;		On entry : 0/0
  9926 ;;		On exit  : 0/0
  9927 ;;		Unchanged: 0/0
  9928 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9929 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9930 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9931 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9932 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9933 ;;Total ram usage:        4 bytes
  9934 ;; Hardware stack levels used:    1
  9935 ;; Hardware stack levels required when called:   11
  9936 ;; This function calls:
  9937 ;;		_doWDTSleep
  9938 ;;		_nrf24l01SetRXMode
  9939 ;; This function is called by:
  9940 ;;		_sendMessage
  9941 ;; This function uses a non-reentrant model
  9942 ;;
  9943                           
  9944                           
  9945                           ;psect for function _sleep
  9946  1EB9                     _sleep:	
  9947                           
  9948                           ;main.c: 81: milliseconds = (unsigned int) (milliseconds / (128 + 128));
  9949                           
  9950                           ;incstack = 0
  9951                           ; Regs used in _sleep: [wreg+status,2+status,0+pclath+cstack]
  9952  1EB9  0020               	movlb	0	; select bank0
  9953  1EBA  0827               	movf	sleep@milliseconds+1,w
  9954  1EBB  00A9               	movwf	??_sleep+1
  9955  1EBC  0826               	movf	sleep@milliseconds,w
  9956  1EBD  00A8               	movwf	??_sleep
  9957  1EBE  0829               	movf	??_sleep+1,w
  9958  1EBF  00A8               	movwf	??_sleep
  9959  1EC0  01A9               	clrf	??_sleep+1
  9960  1EC1  0828               	movf	??_sleep,w
  9961  1EC2  00A6               	movwf	sleep@milliseconds
  9962  1EC3  0829               	movf	??_sleep+1,w
  9963  1EC4  00A7               	movwf	sleep@milliseconds+1
  9964                           
  9965                           ;main.c: 84: milliseconds++;
  9966  1EC5  3001               	movlw	1
  9967  1EC6  07A6               	addwf	sleep@milliseconds,f
  9968  1EC7  3000               	movlw	0
  9969  1EC8  3DA7               	addwfc	sleep@milliseconds+1,f
  9970  1EC9                     l4902:	
  9971                           ;main.c: 87: while (--milliseconds){
  9972                           
  9973  1EC9  3001               	movlw	1
  9974  1ECA  0020               	movlb	0	; select bank0
  9975  1ECB  02A6               	subwf	sleep@milliseconds,f
  9976  1ECC  3000               	movlw	0
  9977  1ECD  3BA7               	subwfb	sleep@milliseconds+1,f
  9978  1ECE  0826               	movf	sleep@milliseconds,w
  9979  1ECF  0427               	iorwf	sleep@milliseconds+1,w
  9980  1ED0  1903               	btfsc	3,2
  9981  1ED1  0008               	return
  9982                           
  9983                           ;main.c: 93: doWDTSleep(0b00111);
  9984  1ED2  3007               	movlw	7
  9985  1ED3  319D  2523  319E   	fcall	_doWDTSleep
  9986                           
  9987                           ;main.c: 96: nrf24l01SetRXMode(0);
  9988  1ED6  3000               	movlw	0
  9989  1ED7  3190  2087  319E   	fcall	_nrf24l01SetRXMode
  9990                           
  9991                           ;main.c: 99: doWDTSleep(0b00111);
  9992  1EDA  3007               	movlw	7
  9993  1EDB  319D  2523  319E   	fcall	_doWDTSleep
  9994  1EDE  2EC9               	goto	l4902
  9995  1EDF                     __end_of_sleep:	
  9996                           
  9997                           	psect	text30
  9998  1EDF                     __ptext30:	
  9999 ;; *************** function _nrf24l01SendPacket *****************
 10000 ;; Defined at:
 10001 ;;		line 220 in file "nrf24l01.c"
 10002 ;; Parameters:    Size  Location     Type
 10003 ;;  txPacket        1    wreg     PTR struct .
 10004 ;;		 -> main@packet(33), loop@packet(33), 
 10005 ;; Auto vars:     Size  Location     Type
 10006 ;;  txPacket        1   12[BANK0 ] PTR struct .
 10007 ;;		 -> main@packet(33), loop@packet(33), 
 10008 ;; Return value:  Size  Location     Type
 10009 ;;                  2   13[BANK0 ] unsigned int 
 10010 ;; Registers used:
 10011 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10012 ;; Tracked objects:
 10013 ;;		On entry : 0/0
 10014 ;;		On exit  : 0/0
 10015 ;;		Unchanged: 0/0
 10016 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10017 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10018 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10019 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10020 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10021 ;;Total ram usage:        2 bytes
 10022 ;; Hardware stack levels used:    1
 10023 ;; Hardware stack levels required when called:   12
 10024 ;; This function calls:
 10025 ;;		_nrf24l01Service
 10026 ;; This function is called by:
 10027 ;;		_sendMessage
 10028 ;; This function uses a non-reentrant model
 10029 ;;
 10030                           
 10031                           
 10032                           ;psect for function _nrf24l01SendPacket
 10033  1EDF                     _nrf24l01SendPacket:	
 10034                           
 10035                           ;incstack = 0
 10036                           ; Regs used in _nrf24l01SendPacket: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10037                           ;nrf24l01SendPacket@txPacket stored from wreg
 10038  1EDF  0020               	movlb	0	; select bank0
 10039  1EE0  00AC               	movwf	nrf24l01SendPacket@txPacket
 10040                           
 10041                           ;nrf24l01.c: 222: nrf24l01Service();
 10042  1EE1  318A  22F7  319E   	fcall	_nrf24l01Service
 10043                           
 10044                           ;nrf24l01.c: 224: if (status.TX == statuses.TX.Idle){
 10045  1EE4  3076               	movlw	low (_statuses| (0+32768))
 10046  1EE5  0084               	movwf	4
 10047  1EE6  3098               	movlw	high (_statuses| (0+32768))
 10048  1EE7  0085               	movwf	5
 10049  1EE8  0800               	movf	0,w	;code access
 10050  1EE9  0020               	movlb	0	; select bank0
 10051  1EEA  00AB               	movwf	??_nrf24l01SendPacket
 10052  1EEB  0021               	movlb	1	; select bank1
 10053  1EEC  0868               	movf	_status^(0+128),w	;volatile
 10054  1EED  390F               	andlw	15
 10055  1EEE  0020               	movlb	0	; select bank0
 10056  1EEF  062B               	xorwf	??_nrf24l01SendPacket,w
 10057  1EF0  1D03               	skipz
 10058  1EF1  0008               	return
 10059                           
 10060                           ;nrf24l01.c: 226: TXPacket = txPacket;
 10061  1EF2  082C               	movf	nrf24l01SendPacket@txPacket,w
 10062  1EF3  00AB               	movwf	??_nrf24l01SendPacket
 10063  1EF4  082B               	movf	??_nrf24l01SendPacket,w
 10064  1EF5  0021               	movlb	1	; select bank1
 10065  1EF6  00EA               	movwf	_TXPacket^(0+128)
 10066                           
 10067                           ;nrf24l01.c: 227: status.TX = statuses.TX.Ready;
 10068  1EF7  3077               	movlw	low ((_statuses+1)| (0+32768))
 10069  1EF8  0084               	movwf	4
 10070  1EF9  3098               	movlw	high ((_statuses+1)| (0+32768))
 10071  1EFA  0085               	movwf	5
 10072  1EFB  0800               	movf	0,w	;code access
 10073  1EFC  0020               	movlb	0	; select bank0
 10074  1EFD  00AB               	movwf	??_nrf24l01SendPacket
 10075  1EFE  0021               	movlb	1	; select bank1
 10076  1EFF  0868               	movf	_status^(0+128),w	;volatile
 10077  1F00  0020               	movlb	0	; select bank0
 10078  1F01  062B               	xorwf	??_nrf24l01SendPacket,w
 10079  1F02  39F0               	andlw	-16
 10080  1F03  062B               	xorwf	??_nrf24l01SendPacket,w
 10081  1F04  0021               	movlb	1	; select bank1
 10082  1F05  00E8               	movwf	_status^(0+128)	;volatile
 10083                           
 10084                           ;nrf24l01.c: 229: nrf24l01Service();
 10085  1F06  318A  22F7         	fcall	_nrf24l01Service
 10086                           
 10087                           ;nrf24l01.c: 231: return 1;;	Return value of _nrf24l01SendPacket is never used
 10088  1F08  0008               	return
 10089  1F09                     __end_of_nrf24l01SendPacket:	
 10090                           ;nrf24l01.c: 232: };nrf24l01.c: 234: return 0;;	Return value of _nrf24l01SendPacket is n
      +                          ever used
 10091                           
 10092                           
 10093                           	psect	text31
 10094  0AF7                     __ptext31:	
 10095 ;; *************** function _nrf24l01Service *****************
 10096 ;; Defined at:
 10097 ;;		line 270 in file "nrf24l01.c"
 10098 ;; Parameters:    Size  Location     Type
 10099 ;;		None
 10100 ;; Auto vars:     Size  Location     Type
 10101 ;;  width           1    9[BANK0 ] unsigned char 
 10102 ;;  i               1   10[BANK0 ] unsigned char 
 10103 ;; Return value:  Size  Location     Type
 10104 ;;                  1    wreg      void 
 10105 ;; Registers used:
 10106 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10107 ;; Tracked objects:
 10108 ;;		On entry : 0/0
 10109 ;;		On exit  : 0/0
 10110 ;;		Unchanged: 0/0
 10111 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10112 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10113 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10114 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10115 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10116 ;;Total ram usage:        4 bytes
 10117 ;; Hardware stack levels used:    1
 10118 ;; Hardware stack levels required when called:   11
 10119 ;; This function calls:
 10120 ;;		_enableInterrupts
 10121 ;;		_memset
 10122 ;;		_nrf24l01CEHigh
 10123 ;;		_nrf24l01CELow
 10124 ;;		_nrf24l01SPIEnd
 10125 ;;		_nrf24l01SPISend
 10126 ;;		_nrf24l01SPIStart
 10127 ;;		_nrf24l01Send
 10128 ;;		_nrf24l01SetRXMode
 10129 ;;		_strlen
 10130 ;; This function is called by:
 10131 ;;		_nrf24l01SendPacket
 10132 ;; This function uses a non-reentrant model
 10133 ;;
 10134                           
 10135                           
 10136                           ;psect for function _nrf24l01Service
 10137  0AF7                     _nrf24l01Service:	
 10138                           
 10139                           ;nrf24l01.c: 272: unsigned char i;;nrf24l01.c: 274: if (status.TX == statuses.TX.Ready){
 10140                           
 10141                           ;incstack = 0
 10142                           ; Regs used in _nrf24l01Service: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10143  0AF7  3077               	movlw	low ((_statuses+1)| (0+32768))
 10144  0AF8  0084               	movwf	4
 10145  0AF9  3098               	movlw	high ((_statuses+1)| (0+32768))
 10146  0AFA  0085               	movwf	5
 10147  0AFB  0800               	movf	0,w	;code access
 10148  0AFC  0020               	movlb	0	; select bank0
 10149  0AFD  00A7               	movwf	??_nrf24l01Service
 10150  0AFE  0021               	movlb	1	; select bank1
 10151  0AFF  0868               	movf	_status^(0+128),w	;volatile
 10152  0B00  390F               	andlw	15
 10153  0B01  0020               	movlb	0	; select bank0
 10154  0B02  0627               	xorwf	??_nrf24l01Service,w
 10155  0B03  1D03               	skipz
 10156  0B04  2B6E               	goto	l4518
 10157                           
 10158                           ;nrf24l01.c: 277: enableInterrupts(0);
 10159  0B05  3000               	movlw	0
 10160  0B06  319C  24F4  318A   	fcall	_enableInterrupts
 10161                           
 10162                           ;nrf24l01.c: 280: nrf24l01SetRXMode(0);
 10163  0B09  3000               	movlw	0
 10164  0B0A  3190  2087  318A   	fcall	_nrf24l01SetRXMode
 10165                           
 10166                           ;nrf24l01.c: 283: nrf24l01SPIStart();
 10167  0B0D  3190  2000  318A   	fcall	_nrf24l01SPIStart
 10168                           
 10169                           ;nrf24l01.c: 286: nrf24l01SPISend((unsigned) 0b10110000);
 10170  0B10  30B0               	movlw	176
 10171  0B11  3187  27F0  318A   	fcall	_nrf24l01SPISend
 10172                           
 10173                           ;nrf24l01.c: 288: nrf24l01SPISend(TXPacket->packetData.byte);
 10174  0B14  0021               	movlb	1	; select bank1
 10175  0B15  086A               	movf	_TXPacket^(0+128),w
 10176  0B16  0086               	movwf	6
 10177  0B17  3001               	movlw	1	; select bank2/3
 10178  0B18  0087               	movwf	7
 10179  0B19  0801               	movf	1,w
 10180  0B1A  3187  27F0  318A   	fcall	_nrf24l01SPISend
 10181                           
 10182                           ;nrf24l01.c: 291: for (i = 0; (i < strlen(TXPacket->Message)) && (i < 31); i++) {
 10183  0B1D  0020               	movlb	0	; select bank0
 10184  0B1E  01AA               	clrf	nrf24l01Service@i
 10185  0B1F  2B33               	goto	l4500
 10186  0B20                     l4496:	
 10187                           
 10188                           ;nrf24l01.c: 292: nrf24l01SPISend(TXPacket->Message[i]);
 10189  0B20  082A               	movf	nrf24l01Service@i,w
 10190  0B21  3E01               	addlw	1
 10191  0B22  0021               	movlb	1	; select bank1
 10192  0B23  076A               	addwf	_TXPacket^(0+128),w
 10193  0B24  0020               	movlb	0	; select bank0
 10194  0B25  00A7               	movwf	??_nrf24l01Service
 10195  0B26  0827               	movf	??_nrf24l01Service,w
 10196  0B27  0086               	movwf	6
 10197  0B28  3001               	movlw	1	; select bank2/3
 10198  0B29  0087               	movwf	7
 10199  0B2A  0801               	movf	1,w
 10200  0B2B  3187  27F0  318A   	fcall	_nrf24l01SPISend
 10201  0B2E  3001               	movlw	1
 10202  0B2F  0020               	movlb	0	; select bank0
 10203  0B30  00A7               	movwf	??_nrf24l01Service
 10204  0B31  0827               	movf	??_nrf24l01Service,w
 10205  0B32  07AA               	addwf	nrf24l01Service@i,f
 10206  0B33                     l4500:	
 10207  0B33  0021               	movlb	1	; select bank1
 10208  0B34  086A               	movf	_TXPacket^(0+128),w
 10209  0B35  3E01               	addlw	1
 10210  0B36  0020               	movlb	0	; select bank0
 10211  0B37  00A0               	movwf	strlen@s
 10212  0B38  39FF               	andlw	255
 10213  0B39  1D03               	skipz
 10214  0B3A  3001               	movlw	1
 10215  0B3B  00A1               	movwf	strlen@s+1
 10216  0B3C  319E  2637  318A   	fcall	_strlen
 10217  0B3F  0020               	movlb	0	; select bank0
 10218  0B40  082A               	movf	nrf24l01Service@i,w
 10219  0B41  00A7               	movwf	??_nrf24l01Service
 10220  0B42  01A8               	clrf	??_nrf24l01Service+1
 10221  0B43  0821               	movf	?_strlen+1,w
 10222  0B44  0228               	subwf	??_nrf24l01Service+1,w
 10223  0B45  1D03               	skipz
 10224  0B46  2B49               	goto	u5545
 10225  0B47  0820               	movf	?_strlen,w
 10226  0B48  0227               	subwf	??_nrf24l01Service,w
 10227  0B49                     u5545:	
 10228  0B49  1803               	skipnc
 10229  0B4A  2B4F               	goto	l4504
 10230  0B4B  301F               	movlw	31
 10231  0B4C  022A               	subwf	nrf24l01Service@i,w
 10232  0B4D  1C03               	skipc
 10233  0B4E  2B20               	goto	l4496
 10234  0B4F                     l4504:	
 10235                           
 10236                           ;nrf24l01.c: 293: };nrf24l01.c: 296: nrf24l01SPIEnd();
 10237  0B4F  319C  24ED  318A   	fcall	_nrf24l01SPIEnd
 10238                           
 10239                           ;nrf24l01.c: 299: status.TX = statuses.TX.Sending;
 10240  0B52  3078               	movlw	low ((_statuses+2)| (0+32768))
 10241  0B53  0084               	movwf	4
 10242  0B54  3098               	movlw	high ((_statuses+2)| (0+32768))
 10243  0B55  0085               	movwf	5
 10244  0B56  0800               	movf	0,w	;code access
 10245  0B57  0020               	movlb	0	; select bank0
 10246  0B58  00A7               	movwf	??_nrf24l01Service
 10247  0B59  0021               	movlb	1	; select bank1
 10248  0B5A  0868               	movf	_status^(0+128),w	;volatile
 10249  0B5B  0020               	movlb	0	; select bank0
 10250  0B5C  0627               	xorwf	??_nrf24l01Service,w
 10251  0B5D  39F0               	andlw	-16
 10252  0B5E  0627               	xorwf	??_nrf24l01Service,w
 10253  0B5F  0021               	movlb	1	; select bank1
 10254  0B60  00E8               	movwf	_status^(0+128)	;volatile
 10255                           
 10256                           ;nrf24l01.c: 302: enableInterrupts(1);
 10257  0B61  3001               	movlw	1
 10258  0B62  319C  24F4  318A   	fcall	_enableInterrupts
 10259                           
 10260                           ;nrf24l01.c: 305: nrf24l01CEHigh();
 10261  0B65  319C  24E1  318A   	fcall	_nrf24l01CEHigh
 10262                           
 10263                           ;nrf24l01.c: 306: _delay((unsigned long)((12)*(32000000/4000000.0)));
 10264  0B68  3020               	movlw	32
 10265  0B69                     u6987:	
 10266  0B69  0B89               	decfsz	9,f
 10267  0B6A  2B69               	goto	u6987
 10268                           
 10269                           ;nrf24l01.c: 307: nrf24l01CELow();
 10270  0B6B  319C  24E4  318A   	fcall	_nrf24l01CELow
 10271  0B6E                     l4518:	
 10272                           
 10273                           ;nrf24l01.c: 312: };nrf24l01.c: 314: if (status.TX == statuses.TX.Sent){
 10274  0B6E  3079               	movlw	low ((_statuses+3)| (0+32768))
 10275  0B6F  0084               	movwf	4
 10276  0B70  3098               	movlw	high ((_statuses+3)| (0+32768))
 10277  0B71  0085               	movwf	5
 10278  0B72  0800               	movf	0,w	;code access
 10279  0B73  0020               	movlb	0	; select bank0
 10280  0B74  00A7               	movwf	??_nrf24l01Service
 10281  0B75  0021               	movlb	1	; select bank1
 10282  0B76  0868               	movf	_status^(0+128),w	;volatile
 10283  0B77  390F               	andlw	15
 10284  0B78  0020               	movlb	0	; select bank0
 10285  0B79  0627               	xorwf	??_nrf24l01Service,w
 10286  0B7A  1D03               	skipz
 10287  0B7B  2B96               	goto	l284
 10288                           
 10289                           ;nrf24l01.c: 317: if (TXPacket->packetData.ACKRequest){
 10290  0B7C  0021               	movlb	1	; select bank1
 10291  0B7D  086A               	movf	_TXPacket^(0+128),w
 10292  0B7E  0086               	movwf	6
 10293  0B7F  3001               	movlw	1	; select bank2/3
 10294  0B80  0087               	movwf	7
 10295  0B81  1D01               	btfss	1,2
 10296  0B82  2B87               	goto	l4524
 10297                           
 10298                           ;nrf24l01.c: 318: status.TX = statuses.TX.PendingACK;
 10299  0B83  307A               	movlw	low ((_statuses+4)| (0+32768))
 10300  0B84  0084               	movwf	4
 10301  0B85  3098               	movlw	high ((_statuses+4)| (0+32768))
 10302  0B86  2B8A               	goto	L8
 10303  0B87                     l4524:	
 10304                           ;nrf24l01.c: 319: }
 10305                           
 10306                           
 10307                           ;nrf24l01.c: 322: else{;nrf24l01.c: 323: status.TX = statuses.TX.Idle;
 10308  0B87  3076               	movlw	low (_statuses| (0+32768))
 10309  0B88  0084               	movwf	4
 10310  0B89  3098               	movlw	high (_statuses| (0+32768))
 10311  0B8A                     L8:	
 10312  0B8A  0085               	movwf	5
 10313  0B8B  0800               	movf	0,w	;code access
 10314  0B8C  0020               	movlb	0	; select bank0
 10315  0B8D  00A7               	movwf	??_nrf24l01Service
 10316  0B8E  0021               	movlb	1	; select bank1
 10317  0B8F  0868               	movf	_status^(0+128),w	;volatile
 10318  0B90  0020               	movlb	0	; select bank0
 10319  0B91  0627               	xorwf	??_nrf24l01Service,w
 10320  0B92  39F0               	andlw	-16
 10321  0B93  0627               	xorwf	??_nrf24l01Service,w
 10322  0B94  0021               	movlb	1	; select bank1
 10323  0B95  00E8               	movwf	_status^(0+128)	;volatile
 10324  0B96                     l284:	
 10325                           
 10326                           ;nrf24l01.c: 324: };nrf24l01.c: 325: };nrf24l01.c: 328: if (status.TX == statuses.TX.Pen
      +                          dingACK){
 10327  0B96  307A               	movlw	low ((_statuses+4)| (0+32768))
 10328  0B97  0084               	movwf	4
 10329  0B98  3098               	movlw	high ((_statuses+4)| (0+32768))
 10330  0B99  0085               	movwf	5
 10331  0B9A  0800               	movf	0,w	;code access
 10332  0B9B  0020               	movlb	0	; select bank0
 10333  0B9C  00A7               	movwf	??_nrf24l01Service
 10334  0B9D  0021               	movlb	1	; select bank1
 10335  0B9E  0868               	movf	_status^(0+128),w	;volatile
 10336  0B9F  390F               	andlw	15
 10337  0BA0  0020               	movlb	0	; select bank0
 10338  0BA1  0627               	xorwf	??_nrf24l01Service,w
 10339  0BA2  1D03               	skipz
 10340  0BA3  2BB7               	goto	l4530
 10341                           
 10342                           ;nrf24l01.c: 331: nrf24l01SetRXMode(1);
 10343  0BA4  3001               	movlw	1
 10344  0BA5  3190  2087  318A   	fcall	_nrf24l01SetRXMode
 10345                           
 10346                           ;nrf24l01.c: 334: status.TX = statuses.TX.Idle;
 10347  0BA8  3076               	movlw	low (_statuses| (0+32768))
 10348  0BA9  0084               	movwf	4
 10349  0BAA  3098               	movlw	high (_statuses| (0+32768))
 10350  0BAB  0085               	movwf	5
 10351  0BAC  0800               	movf	0,w	;code access
 10352  0BAD  0020               	movlb	0	; select bank0
 10353  0BAE  00A7               	movwf	??_nrf24l01Service
 10354  0BAF  0021               	movlb	1	; select bank1
 10355  0BB0  0868               	movf	_status^(0+128),w	;volatile
 10356  0BB1  0020               	movlb	0	; select bank0
 10357  0BB2  0627               	xorwf	??_nrf24l01Service,w
 10358  0BB3  39F0               	andlw	-16
 10359  0BB4  0627               	xorwf	??_nrf24l01Service,w
 10360  0BB5  0021               	movlb	1	; select bank1
 10361  0BB6  00E8               	movwf	_status^(0+128)	;volatile
 10362  0BB7                     l4530:	
 10363                           
 10364                           ;nrf24l01.c: 335: };nrf24l01.c: 337: if (status.RX == statuses.RX.Pending){
 10365  0BB7  307C               	movlw	low ((_statuses+6)| (0+32768))
 10366  0BB8  0084               	movwf	4
 10367  0BB9  3098               	movlw	high ((_statuses+6)| (0+32768))
 10368  0BBA  0085               	movwf	5
 10369  0BBB  0800               	movf	0,w	;code access
 10370  0BBC  0020               	movlb	0	; select bank0
 10371  0BBD  00A7               	movwf	??_nrf24l01Service
 10372  0BBE  0021               	movlb	1	; select bank1
 10373  0BBF  0E68               	swapf	_status^(0+128),w	;volatile
 10374  0BC0  390F               	andlw	15
 10375  0BC1  0020               	movlb	0	; select bank0
 10376  0BC2  0627               	xorwf	??_nrf24l01Service,w
 10377  0BC3  1D03               	skipz
 10378  0BC4  0008               	return
 10379                           
 10380                           ;nrf24l01.c: 340: memset(RXPacket.Message, 0 ,sizeof(RXPacket.Message));
 10381  0BC5  3000               	movlw	0
 10382  0BC6  00A0               	movwf	memset@c
 10383  0BC7  00A1               	movwf	memset@c+1
 10384  0BC8  3020               	movlw	32
 10385  0BC9  00A2               	movwf	memset@n
 10386  0BCA  3000               	movlw	0
 10387  0BCB  00A3               	movwf	memset@n+1
 10388  0BCC  30C3               	movlw	(low ((_RXPacket| (0+256)+1)))& (0+255)
 10389  0BCD  319D  258B  318A   	fcall	_memset
 10390                           
 10391                           ;nrf24l01.c: 341: RXPacket.packetData.byte = 0x00;
 10392  0BD0  0023               	movlb	3	; select bank3
 10393  0BD1  01C2               	clrf	_RXPacket^(0+384)
 10394                           
 10395                           ;nrf24l01.c: 344: unsigned char width = nrf24l01Send((unsigned) 0b01100000, 0);
 10396  0BD2  0020               	movlb	0	; select bank0
 10397  0BD3  01A0               	clrf	nrf24l01Send@data
 10398  0BD4  3060               	movlw	96
 10399  0BD5  319E  2656  318A   	fcall	_nrf24l01Send
 10400  0BD8  0020               	movlb	0	; select bank0
 10401  0BD9  00A7               	movwf	??_nrf24l01Service
 10402  0BDA  0827               	movf	??_nrf24l01Service,w
 10403  0BDB  00A9               	movwf	nrf24l01Service@width
 10404                           
 10405                           ;nrf24l01.c: 347: nrf24l01CELow();
 10406  0BDC  319C  24E4  318A   	fcall	_nrf24l01CELow
 10407                           
 10408                           ;nrf24l01.c: 350: nrf24l01SPIStart();
 10409  0BDF  3190  2000  318A   	fcall	_nrf24l01SPIStart
 10410                           
 10411                           ;nrf24l01.c: 353: nrf24l01SPISend((unsigned) 0b01100001);
 10412  0BE2  3061               	movlw	97
 10413  0BE3  3187  27F0  318A   	fcall	_nrf24l01SPISend
 10414                           
 10415                           ;nrf24l01.c: 356: RXPacket.packetData.byte = nrf24l01SPISend(0);
 10416  0BE6  3000               	movlw	0
 10417  0BE7  3187  27F0  318A   	fcall	_nrf24l01SPISend
 10418  0BEA  0020               	movlb	0	; select bank0
 10419  0BEB  00A7               	movwf	??_nrf24l01Service
 10420  0BEC  0827               	movf	??_nrf24l01Service,w
 10421  0BED  0023               	movlb	3	; select bank3
 10422  0BEE  00C2               	movwf	_RXPacket^(0+384)
 10423                           
 10424                           ;nrf24l01.c: 357: width--;
 10425  0BEF  3001               	movlw	1
 10426  0BF0  0020               	movlb	0	; select bank0
 10427  0BF1  02A9               	subwf	nrf24l01Service@width,f
 10428                           
 10429                           ;nrf24l01.c: 359: for (i = 0; (i < width) && (i < sizeof(RXPacket.Message)); i++){
 10430  0BF2  01AA               	clrf	nrf24l01Service@i
 10431  0BF3  2C05               	goto	l4554
 10432  0BF4                     l4550:	
 10433                           
 10434                           ;nrf24l01.c: 361: RXPacket.Message[i] = nrf24l01SPISend(0);
 10435  0BF4  3000               	movlw	0
 10436  0BF5  3187  27F0  318A   	fcall	_nrf24l01SPISend
 10437  0BF8  0020               	movlb	0	; select bank0
 10438  0BF9  00A7               	movwf	??_nrf24l01Service
 10439  0BFA  082A               	movf	nrf24l01Service@i,w
 10440  0BFB  3EC3               	addlw	(low ((_RXPacket| (0+256)+1)))& (0+255)
 10441  0BFC  0086               	movwf	6
 10442  0BFD  3001               	movlw	1	; select bank3/4
 10443  0BFE  0087               	movwf	7
 10444  0BFF  0827               	movf	??_nrf24l01Service,w
 10445  0C00  0081               	movwf	1
 10446  0C01  3001               	movlw	1
 10447  0C02  00A7               	movwf	??_nrf24l01Service
 10448  0C03  0827               	movf	??_nrf24l01Service,w
 10449  0C04  07AA               	addwf	nrf24l01Service@i,f
 10450  0C05                     l4554:	
 10451  0C05  0829               	movf	nrf24l01Service@width,w
 10452  0C06  022A               	subwf	nrf24l01Service@i,w
 10453  0C07  1803               	skipnc
 10454  0C08  2C0D               	goto	l4558
 10455  0C09  3020               	movlw	32
 10456  0C0A  022A               	subwf	nrf24l01Service@i,w
 10457  0C0B  1C03               	skipc
 10458  0C0C  2BF4               	goto	l4550
 10459  0C0D                     l4558:	
 10460                           
 10461                           ;nrf24l01.c: 362: };nrf24l01.c: 365: nrf24l01SPIEnd();
 10462  0C0D  319C  24ED  318A   	fcall	_nrf24l01SPIEnd
 10463                           
 10464                           ;nrf24l01.c: 368: nrf24l01CEHigh();
 10465  0C10  319C  24E1  318A   	fcall	_nrf24l01CEHigh
 10466                           
 10467                           ;nrf24l01.c: 371: RXPacket.packetData.Pipe = status.statusRegister.RX_P_NO;
 10468  0C13  0021               	movlb	1	; select bank1
 10469  0C14  0C69               	rrf	(_status^(0+128)+1),w	;volatile
 10470  0C15  3907               	andlw	7
 10471  0C16  0020               	movlb	0	; select bank0
 10472  0C17  00A7               	movwf	??_nrf24l01Service
 10473  0C18  0EA7               	swapf	??_nrf24l01Service,f
 10474  0C19  0023               	movlb	3	; select bank3
 10475  0C1A  0842               	movf	_RXPacket^(0+384),w
 10476  0C1B  0020               	movlb	0	; select bank0
 10477  0C1C  0627               	xorwf	??_nrf24l01Service,w
 10478  0C1D  398F               	andlw	-113
 10479  0C1E  0627               	xorwf	??_nrf24l01Service,w
 10480  0C1F  0023               	movlb	3	; select bank3
 10481  0C20  00C2               	movwf	_RXPacket^(0+384)
 10482                           
 10483                           ;nrf24l01.c: 374: RXPacket.packetData.RPD = nrf24l01Send((unsigned) 0b00000000 | (unsign
      +                          ed) 0x09, 0);
 10484  0C21  0020               	movlb	0	; select bank0
 10485  0C22  01A0               	clrf	nrf24l01Send@data
 10486  0C23  3009               	movlw	9
 10487  0C24  319E  2656         	fcall	_nrf24l01Send
 10488  0C26  0020               	movlb	0	; select bank0
 10489  0C27  00A7               	movwf	??_nrf24l01Service
 10490  0C28  0023               	movlb	3	; select bank3
 10491  0C29  0842               	movf	_RXPacket^(0+384),w
 10492  0C2A  0020               	movlb	0	; select bank0
 10493  0C2B  0627               	xorwf	??_nrf24l01Service,w
 10494  0C2C  39FE               	andlw	-2
 10495  0C2D  0627               	xorwf	??_nrf24l01Service,w
 10496  0C2E  0023               	movlb	3	; select bank3
 10497  0C2F  00C2               	movwf	_RXPacket^(0+384)
 10498                           
 10499                           ;nrf24l01.c: 376: status.RX = statuses.RX.Ready;
 10500  0C30  307D               	movlw	low ((_statuses+7)| (0+32768))
 10501  0C31  0084               	movwf	4
 10502  0C32  3098               	movlw	high ((_statuses+7)| (0+32768))
 10503  0C33  0085               	movwf	5
 10504  0C34  0800               	movf	0,w	;code access
 10505  0C35  0020               	movlb	0	; select bank0
 10506  0C36  00A7               	movwf	??_nrf24l01Service
 10507  0C37  0EA7               	swapf	??_nrf24l01Service,f
 10508  0C38  0021               	movlb	1	; select bank1
 10509  0C39  0868               	movf	_status^(0+128),w	;volatile
 10510  0C3A  0020               	movlb	0	; select bank0
 10511  0C3B  0627               	xorwf	??_nrf24l01Service,w
 10512  0C3C  390F               	andlw	-241
 10513  0C3D  0627               	xorwf	??_nrf24l01Service,w
 10514  0C3E  0021               	movlb	1	; select bank1
 10515  0C3F  00E8               	movwf	_status^(0+128)	;volatile
 10516  0C40  0008               	return
 10517  0C41                     __end_of_nrf24l01Service:	
 10518                           
 10519                           	psect	text32
 10520  1E37                     __ptext32:	
 10521 ;; *************** function _strlen *****************
 10522 ;; Defined at:
 10523 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\strlen.c"
 10524 ;; Parameters:    Size  Location     Type
 10525 ;;  s               2    0[BANK0 ] PTR const unsigned char 
 10526 ;;		 -> packet.Message(32), packet.Message(32), NULL(0), main@packet(33), 
 10527 ;;		 -> loop@packet(33), romDataMap(28), 
 10528 ;; Auto vars:     Size  Location     Type
 10529 ;;  cp              2    4[BANK0 ] PTR const unsigned char 
 10530 ;;		 -> packet.Message(32), packet.Message(32), NULL(0), main@packet(33), 
 10531 ;;		 -> loop@packet(33), romDataMap(28), 
 10532 ;; Return value:  Size  Location     Type
 10533 ;;                  2    0[BANK0 ] unsigned int 
 10534 ;; Registers used:
 10535 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 10536 ;; Tracked objects:
 10537 ;;		On entry : 0/0
 10538 ;;		On exit  : 0/0
 10539 ;;		Unchanged: 0/0
 10540 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10541 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10542 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10543 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10544 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10545 ;;Total ram usage:        6 bytes
 10546 ;; Hardware stack levels used:    1
 10547 ;; Hardware stack levels required when called:    7
 10548 ;; This function calls:
 10549 ;;		Nothing
 10550 ;; This function is called by:
 10551 ;;		_nrf24l01GetPipe
 10552 ;;		_nrf24l01Service
 10553 ;; This function uses a non-reentrant model
 10554 ;;
 10555                           
 10556                           
 10557                           ;psect for function _strlen
 10558  1E37                     _strlen:	
 10559                           
 10560                           ;incstack = 0
 10561                           ; Regs used in _strlen: [wreg+fsr1l+fsr1h+status,2+status,0]
 10562  1E37  0020               	movlb	0	; select bank0
 10563  1E38  0821               	movf	strlen@s+1,w
 10564  1E39  00A5               	movwf	strlen@cp+1
 10565  1E3A  0820               	movf	strlen@s,w
 10566  1E3B  00A4               	movwf	strlen@cp
 10567  1E3C                     l4200:	
 10568  1E3C  0824               	movf	strlen@cp,w
 10569  1E3D  0086               	movwf	6
 10570  1E3E  0825               	movf	strlen@cp+1,w
 10571  1E3F  0087               	movwf	7
 10572  1E40  0801               	movf	1,w
 10573  1E41  1903               	btfsc	3,2
 10574  1E42  2E48               	goto	l4202
 10575  1E43  3001               	movlw	1
 10576  1E44  07A4               	addwf	strlen@cp,f
 10577  1E45  3000               	movlw	0
 10578  1E46  3DA5               	addwfc	strlen@cp+1,f
 10579  1E47  2E3C               	goto	l4200
 10580  1E48                     l4202:	
 10581  1E48  0920               	comf	strlen@s,w
 10582  1E49  00A2               	movwf	??_strlen
 10583  1E4A  0921               	comf	strlen@s+1,w
 10584  1E4B  00A3               	movwf	??_strlen+1
 10585  1E4C  0AA2               	incf	??_strlen,f
 10586  1E4D  1903               	skipnz
 10587  1E4E  0AA3               	incf	??_strlen+1,f
 10588  1E4F  0824               	movf	strlen@cp,w
 10589  1E50  0722               	addwf	??_strlen,w
 10590  1E51  00A0               	movwf	?_strlen
 10591  1E52  0825               	movf	strlen@cp+1,w
 10592  1E53  3D23               	addwfc	??_strlen+1,w
 10593  1E54  00A1               	movwf	?_strlen+1
 10594  1E55  0008               	return
 10595  1E56                     __end_of_strlen:	
 10596                           
 10597                           	psect	text33
 10598  1087                     __ptext33:	
 10599 ;; *************** function _nrf24l01SetRXMode *****************
 10600 ;; Defined at:
 10601 ;;		line 90 in file "nrf24l01.c"
 10602 ;; Parameters:    Size  Location     Type
 10603 ;;  rxMode          1    wreg     unsigned char 
 10604 ;; Auto vars:     Size  Location     Type
 10605 ;;  rxMode          1    5[BANK0 ] unsigned char 
 10606 ;;  config          1    4[BANK0 ] struct .
 10607 ;; Return value:  Size  Location     Type
 10608 ;;                  1    wreg      void 
 10609 ;; Registers used:
 10610 ;;		wreg, status,2, status,0, pclath, cstack
 10611 ;; Tracked objects:
 10612 ;;		On entry : 0/0
 10613 ;;		On exit  : 0/0
 10614 ;;		Unchanged: 0/0
 10615 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10616 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10617 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10618 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10619 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10620 ;;Total ram usage:        3 bytes
 10621 ;; Hardware stack levels used:    1
 10622 ;; Hardware stack levels required when called:   10
 10623 ;; This function calls:
 10624 ;;		_nrf24l01CEHigh
 10625 ;;		_nrf24l01CELow
 10626 ;;		_nrf24l01Send
 10627 ;; This function is called by:
 10628 ;;		_sleep
 10629 ;;		_nrf24l01Service
 10630 ;; This function uses a non-reentrant model
 10631 ;;
 10632                           
 10633                           
 10634                           ;psect for function _nrf24l01SetRXMode
 10635  1087                     _nrf24l01SetRXMode:	
 10636                           
 10637                           ;incstack = 0
 10638                           ; Regs used in _nrf24l01SetRXMode: [wreg+status,2+status,0+pclath+cstack]
 10639                           ;nrf24l01SetRXMode@rxMode stored from wreg
 10640  1087  0020               	movlb	0	; select bank0
 10641  1088  00A5               	movwf	nrf24l01SetRXMode@rxMode
 10642                           
 10643                           ;nrf24l01.c: 105: n_CONFIG_t config;;nrf24l01.c: 108: config.byte = nrf24l01Send((unsign
      +                          ed) 0b00000000 | (unsigned) 0x00, 0);
 10644  1089  01A0               	clrf	nrf24l01Send@data
 10645  108A  3000               	movlw	0
 10646  108B  319E  2656  3190   	fcall	_nrf24l01Send
 10647  108E  0020               	movlb	0	; select bank0
 10648  108F  00A3               	movwf	??_nrf24l01SetRXMode
 10649  1090  0823               	movf	??_nrf24l01SetRXMode,w
 10650  1091  00A4               	movwf	nrf24l01SetRXMode@config
 10651                           
 10652                           ;nrf24l01.c: 111: if (config.PRIM_RX != rxMode){
 10653  1092  0824               	movf	nrf24l01SetRXMode@config,w
 10654  1093  3901               	andlw	1
 10655  1094  0625               	xorwf	nrf24l01SetRXMode@rxMode,w
 10656  1095  1903               	skipnz
 10657  1096  0008               	return
 10658                           
 10659                           ;nrf24l01.c: 114: nrf24l01CELow();
 10660  1097  319C  24E4  3190   	fcall	_nrf24l01CELow
 10661                           
 10662                           ;nrf24l01.c: 115: _delay((unsigned long)((200)*(32000000/4000000.0)));
 10663  109A  30E4               	movlw	228
 10664  109B                     u6997:	
 10665  109B  3200               	nop2
 10666  109C  3200               	nop2
 10667  109D  0B89               	decfsz	9,f
 10668  109E  289B               	goto	u6997
 10669  109F  3200               	nop2
 10670  10A0  3200               	nop2
 10671                           
 10672                           ;nrf24l01.c: 118: config.PRIM_RX = rxMode;
 10673  10A1  0020               	movlb	0	; select bank0
 10674  10A2  0825               	movf	nrf24l01SetRXMode@rxMode,w
 10675  10A3  3901               	andlw	1
 10676  10A4  1024               	bcf	nrf24l01SetRXMode@config,0
 10677  10A5  1D03               	skipz
 10678  10A6  1424               	bsf	nrf24l01SetRXMode@config,0
 10679                           
 10680                           ;nrf24l01.c: 119: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x00, config.byte);
 10681  10A7  0824               	movf	nrf24l01SetRXMode@config,w
 10682  10A8  00A3               	movwf	??_nrf24l01SetRXMode
 10683  10A9  0823               	movf	??_nrf24l01SetRXMode,w
 10684  10AA  00A0               	movwf	nrf24l01Send@data
 10685  10AB  3020               	movlw	32
 10686  10AC  319E  2656  3190   	fcall	_nrf24l01Send
 10687                           
 10688                           ;nrf24l01.c: 122: _delay((unsigned long)((200)*(32000000/4000000.0)));
 10689  10AF  30E4               	movlw	228
 10690  10B0                     u7007:	
 10691  10B0  3200               	nop2
 10692  10B1  3200               	nop2
 10693  10B2  0B89               	decfsz	9,f
 10694  10B3  28B0               	goto	u7007
 10695  10B4  3200               	nop2
 10696  10B5  3200               	nop2
 10697                           
 10698                           ;nrf24l01.c: 125: if (rxMode){
 10699  10B6  0020               	movlb	0	; select bank0
 10700  10B7  0825               	movf	nrf24l01SetRXMode@rxMode,w
 10701  10B8  1903               	btfsc	3,2
 10702  10B9  0008               	return
 10703                           
 10704                           ;nrf24l01.c: 126: nrf24l01CEHigh();
 10705  10BA  319C  24E1  3190   	fcall	_nrf24l01CEHigh
 10706                           
 10707                           ;nrf24l01.c: 127: _delay((unsigned long)((200)*(32000000/4000000.0)));
 10708  10BD  30E4               	movlw	228
 10709  10BE                     u7017:	
 10710  10BE  3200               	nop2
 10711  10BF  3200               	nop2
 10712  10C0  0B89               	decfsz	9,f
 10713  10C1  28BE               	goto	u7017
 10714  10C2  3200               	nop2
 10715  10C3  3200               	nop2
 10716  10C4  0008               	return
 10717  10C5                     __end_of_nrf24l01SetRXMode:	
 10718                           
 10719                           	psect	text34
 10720  1E56                     __ptext34:	
 10721 ;; *************** function _nrf24l01Send *****************
 10722 ;; Defined at:
 10723 ;;		line 45 in file "nrf24l01.c"
 10724 ;; Parameters:    Size  Location     Type
 10725 ;;  command         1    wreg     unsigned char 
 10726 ;;  data            1    0[BANK0 ] unsigned char 
 10727 ;; Auto vars:     Size  Location     Type
 10728 ;;  command         1    2[BANK0 ] unsigned char 
 10729 ;; Return value:  Size  Location     Type
 10730 ;;                  1    wreg      unsigned char 
 10731 ;; Registers used:
 10732 ;;		wreg, status,2, status,0, pclath, cstack
 10733 ;; Tracked objects:
 10734 ;;		On entry : 0/0
 10735 ;;		On exit  : 0/0
 10736 ;;		Unchanged: 0/0
 10737 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10738 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10739 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10740 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10741 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10742 ;;Total ram usage:        3 bytes
 10743 ;; Hardware stack levels used:    1
 10744 ;; Hardware stack levels required when called:    9
 10745 ;; This function calls:
 10746 ;;		_enableInterrupts
 10747 ;;		_nrf24l01SPIEnd
 10748 ;;		_nrf24l01SPISend
 10749 ;;		_nrf24l01SPIStart
 10750 ;; This function is called by:
 10751 ;;		_loop
 10752 ;;		_nrf24l01SetRXMode
 10753 ;;		_nrf24l01SetRXPipe
 10754 ;;		_nrf24l01Service
 10755 ;;		_nrf24l01InitRegisters
 10756 ;;		_nrf24l01ChangeTXPower
 10757 ;; This function uses a non-reentrant model
 10758 ;;
 10759                           
 10760                           
 10761                           ;psect for function _nrf24l01Send
 10762  1E56                     _nrf24l01Send:	
 10763                           
 10764                           ;incstack = 0
 10765                           ; Regs used in _nrf24l01Send: [wreg+status,2+status,0+pclath+cstack]
 10766                           ;nrf24l01Send@command stored from wreg
 10767  1E56  0020               	movlb	0	; select bank0
 10768  1E57  00A2               	movwf	nrf24l01Send@command
 10769                           
 10770                           ;nrf24l01.c: 48: enableInterrupts(0);
 10771  1E58  3000               	movlw	0
 10772  1E59  319C  24F4  319E   	fcall	_enableInterrupts
 10773                           
 10774                           ;nrf24l01.c: 51: nrf24l01SPIStart();
 10775  1E5C  3190  2000  319E   	fcall	_nrf24l01SPIStart
 10776                           
 10777                           ;nrf24l01.c: 54: nrf24l01SPISend(command);
 10778  1E5F  0020               	movlb	0	; select bank0
 10779  1E60  0822               	movf	nrf24l01Send@command,w
 10780  1E61  3187  27F0  319E   	fcall	_nrf24l01SPISend
 10781                           
 10782                           ;nrf24l01.c: 57: data = nrf24l01SPISend(data);
 10783  1E64  0020               	movlb	0	; select bank0
 10784  1E65  0820               	movf	nrf24l01Send@data,w
 10785  1E66  3187  27F0  319E   	fcall	_nrf24l01SPISend
 10786  1E69  0020               	movlb	0	; select bank0
 10787  1E6A  00A1               	movwf	??_nrf24l01Send
 10788  1E6B  0821               	movf	??_nrf24l01Send,w
 10789  1E6C  00A0               	movwf	nrf24l01Send@data
 10790                           
 10791                           ;nrf24l01.c: 60: nrf24l01SPIEnd();
 10792  1E6D  319C  24ED  319E   	fcall	_nrf24l01SPIEnd
 10793                           
 10794                           ;nrf24l01.c: 63: enableInterrupts(1);
 10795  1E70  3001               	movlw	1
 10796  1E71  319C  24F4         	fcall	_enableInterrupts
 10797                           
 10798                           ;nrf24l01.c: 65: return data;
 10799  1E73  0020               	movlb	0	; select bank0
 10800  1E74  0820               	movf	nrf24l01Send@data,w
 10801  1E75  0008               	return
 10802  1E76                     __end_of_nrf24l01Send:	
 10803                           
 10804                           	psect	text35
 10805  1D8B                     __ptext35:	
 10806 ;; *************** function _memset *****************
 10807 ;; Defined at:
 10808 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\memset.c"
 10809 ;; Parameters:    Size  Location     Type
 10810 ;;  p1              1    wreg     PTR void 
 10811 ;;		 -> RXPacket(33), 
 10812 ;;  c               2    0[BANK0 ] int 
 10813 ;;  n               2    2[BANK0 ] unsigned int 
 10814 ;; Auto vars:     Size  Location     Type
 10815 ;;  p1              1    5[BANK0 ] PTR void 
 10816 ;;		 -> RXPacket(33), 
 10817 ;;  p               1    6[BANK0 ] PTR unsigned char 
 10818 ;;		 -> RXPacket(33), 
 10819 ;; Return value:  Size  Location     Type
 10820 ;;                  1    wreg      PTR void 
 10821 ;; Registers used:
 10822 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 10823 ;; Tracked objects:
 10824 ;;		On entry : 0/0
 10825 ;;		On exit  : 0/0
 10826 ;;		Unchanged: 0/0
 10827 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10828 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10829 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10830 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10831 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10832 ;;Total ram usage:        7 bytes
 10833 ;; Hardware stack levels used:    1
 10834 ;; Hardware stack levels required when called:    7
 10835 ;; This function calls:
 10836 ;;		Nothing
 10837 ;; This function is called by:
 10838 ;;		_nrf24l01Service
 10839 ;; This function uses a non-reentrant model
 10840 ;;
 10841                           
 10842                           
 10843                           ;psect for function _memset
 10844  1D8B                     _memset:	
 10845                           
 10846                           ;incstack = 0
 10847                           ; Regs used in _memset: [wreg+fsr1l+fsr1h+status,2+status,0]
 10848                           ;memset@p1 stored from wreg
 10849  1D8B  0020               	movlb	0	; select bank0
 10850  1D8C  00A5               	movwf	memset@p1
 10851  1D8D  0825               	movf	memset@p1,w
 10852  1D8E  00A4               	movwf	??_memset
 10853  1D8F  0824               	movf	??_memset,w
 10854  1D90  00A6               	movwf	memset@p
 10855  1D91                     l4212:	
 10856  1D91  3001               	movlw	1
 10857  1D92  02A2               	subwf	memset@n,f
 10858  1D93  3000               	movlw	0
 10859  1D94  3BA3               	subwfb	memset@n+1,f
 10860  1D95  0A22               	incf	memset@n,w
 10861  1D96  1903               	btfsc	3,2
 10862  1D97  0A23               	incf	memset@n+1,w
 10863  1D98  1903               	btfsc	3,2
 10864  1D99  0008               	return
 10865  1D9A  0820               	movf	memset@c,w
 10866  1D9B  00A4               	movwf	??_memset
 10867  1D9C  0826               	movf	memset@p,w
 10868  1D9D  0086               	movwf	6
 10869  1D9E  3001               	movlw	1	; select bank2/3
 10870  1D9F  0087               	movwf	7
 10871  1DA0  0824               	movf	??_memset,w
 10872  1DA1  0081               	movwf	1
 10873  1DA2  3001               	movlw	1
 10874  1DA3  00A4               	movwf	??_memset
 10875  1DA4  0824               	movf	??_memset,w
 10876  1DA5  07A6               	addwf	memset@p,f
 10877  1DA6  2D91               	goto	l4212
 10878  1DA7                     __end_of_memset:	
 10879                           ;	Return value of _memset is never used
 10880                           
 10881                           
 10882                           	psect	text36
 10883  13F4                     __ptext36:	
 10884 ;; *************** function _getADCValue *****************
 10885 ;; Defined at:
 10886 ;;		line 35 in file "main.c"
 10887 ;; Parameters:    Size  Location     Type
 10888 ;;  channel         1    wreg     unsigned char 
 10889 ;; Auto vars:     Size  Location     Type
 10890 ;;  channel         1   57[BANK0 ] unsigned char 
 10891 ;;  adcSum          3   60[BANK0 ] float 
 10892 ;;  adcLoop         2   58[BANK0 ] unsigned int 
 10893 ;; Return value:  Size  Location     Type
 10894 ;;                  3   51[BANK0 ] float 
 10895 ;; Registers used:
 10896 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 10897 ;; Tracked objects:
 10898 ;;		On entry : 0/0
 10899 ;;		On exit  : 0/0
 10900 ;;		Unchanged: 0/0
 10901 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10902 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10903 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10904 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10905 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10906 ;;Total ram usage:       12 bytes
 10907 ;; Hardware stack levels used:    1
 10908 ;; Hardware stack levels required when called:    9
 10909 ;; This function calls:
 10910 ;;		___awtoft
 10911 ;;		___ftadd
 10912 ;;		___ftdiv
 10913 ;;		_doWDTSleep
 10914 ;; This function is called by:
 10915 ;;		_loop
 10916 ;; This function uses a non-reentrant model
 10917 ;;
 10918                           
 10919                           
 10920                           ;psect for function _getADCValue
 10921  13F4                     _getADCValue:	
 10922                           
 10923                           ;incstack = 0
 10924                           ; Regs used in _getADCValue: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 10925                           ;getADCValue@channel stored from wreg
 10926  13F4  0020               	movlb	0	; select bank0
 10927  13F5  00D9               	movwf	getADCValue@channel
 10928                           
 10929                           ;main.c: 38: float adcSum = 0;
 10930  13F6  3000               	movlw	0
 10931  13F7  00DC               	movwf	getADCValue@adcSum
 10932  13F8  3000               	movlw	0
 10933  13F9  00DD               	movwf	getADCValue@adcSum+1
 10934  13FA  3000               	movlw	0
 10935  13FB  00DE               	movwf	getADCValue@adcSum+2
 10936                           
 10937                           ;main.c: 39: unsigned int adcLoop = 1000;
 10938  13FC  30E8               	movlw	232
 10939  13FD  00DA               	movwf	getADCValue@adcLoop
 10940  13FE  3003               	movlw	3
 10941  13FF  00DB               	movwf	getADCValue@adcLoop+1
 10942                           
 10943                           ;main.c: 41: ADCON0bits.CHS = channel;
 10944  1400  0859               	movf	getADCValue@channel,w
 10945  1401  00D6               	movwf	??_getADCValue
 10946  1402  0DD6               	rlf	??_getADCValue,f
 10947  1403  0DD6               	rlf	??_getADCValue,f
 10948  1404  0021               	movlb	1	; select bank1
 10949  1405  081D               	movf	29,w	;volatile
 10950  1406  0020               	movlb	0	; select bank0
 10951  1407  0656               	xorwf	??_getADCValue,w
 10952  1408  3903               	andlw	-253
 10953  1409  0656               	xorwf	??_getADCValue,w
 10954  140A  0021               	movlb	1	; select bank1
 10955  140B  009D               	movwf	29	;volatile
 10956                           
 10957                           ;main.c: 42: FVRCONbits.FVREN = 1;
 10958  140C  0022               	movlb	2	; select bank2
 10959  140D  1797               	bsf	23,7	;volatile
 10960                           
 10961                           ;main.c: 43: ADCON0bits.ADON = 1;
 10962  140E  0021               	movlb	1	; select bank1
 10963  140F  141D               	bsf	29,0	;volatile
 10964                           
 10965                           ;main.c: 45: doWDTSleep(0b00000);
 10966  1410  3000               	movlw	0
 10967  1411  319D  2523  3193   	fcall	_doWDTSleep
 10968  1414                     l5222:	
 10969                           ;main.c: 47: while (adcLoop--){
 10970                           
 10971  1414  3001               	movlw	1
 10972  1415  0020               	movlb	0	; select bank0
 10973  1416  02DA               	subwf	getADCValue@adcLoop,f
 10974  1417  3000               	movlw	0
 10975  1418  3BDB               	subwfb	getADCValue@adcLoop+1,f
 10976  1419  0A5A               	incf	getADCValue@adcLoop,w
 10977  141A  1903               	btfsc	3,2
 10978  141B  0A5B               	incf	getADCValue@adcLoop+1,w
 10979  141C  1903               	btfsc	3,2
 10980  141D  2C51               	goto	l164
 10981                           
 10982                           ;main.c: 49: ADCON0bits.ADGO = 1;
 10983  141E  0021               	movlb	1	; select bank1
 10984  141F  149D               	bsf	29,1	;volatile
 10985  1420                     l5218:	
 10986                           ;main.c: 51: while (ADCON0bits.ADGO){
 10987                           
 10988  1420  0021               	movlb	1	; select bank1
 10989  1421  1C9D               	btfss	29,1	;volatile
 10990  1422  2C28               	goto	l5220
 10991                           
 10992                           ;main.c: 52: doWDTSleep(0b00000);
 10993  1423  3000               	movlw	0
 10994  1424  319D  2523  3193   	fcall	_doWDTSleep
 10995  1427  2C20               	goto	l5218
 10996  1428                     l5220:	
 10997                           
 10998                           ;main.c: 53: };main.c: 55: adcSum+= (ADRESL | (ADRESH << 8));
 10999  1428  081C               	movf	28,w	;volatile
 11000  1429  0020               	movlb	0	; select bank0
 11001  142A  00D6               	movwf	??_getADCValue
 11002  142B  01D7               	clrf	??_getADCValue+1
 11003  142C  0856               	movf	??_getADCValue,w
 11004  142D  00D7               	movwf	??_getADCValue+1
 11005  142E  01D6               	clrf	??_getADCValue
 11006  142F  0856               	movf	??_getADCValue,w
 11007  1430  0021               	movlb	1	; select bank1
 11008  1431  041B               	iorwf	27,w	;volatile
 11009  1432  0020               	movlb	0	; select bank0
 11010  1433  00A8               	movwf	___awtoft@c
 11011  1434  0857               	movf	??_getADCValue+1,w
 11012  1435  00A9               	movwf	___awtoft@c+1
 11013  1436  319E  2697  3193   	fcall	___awtoft
 11014  1439  0020               	movlb	0	; select bank0
 11015  143A  0828               	movf	?___awtoft,w
 11016  143B  00B6               	movwf	___ftadd@f1
 11017  143C  0829               	movf	?___awtoft+1,w
 11018  143D  00B7               	movwf	___ftadd@f1+1
 11019  143E  082A               	movf	?___awtoft+2,w
 11020  143F  00B8               	movwf	___ftadd@f1+2
 11021  1440  085C               	movf	getADCValue@adcSum,w
 11022  1441  00B9               	movwf	___ftadd@f2
 11023  1442  085D               	movf	getADCValue@adcSum+1,w
 11024  1443  00BA               	movwf	___ftadd@f2+1
 11025  1444  085E               	movf	getADCValue@adcSum+2,w
 11026  1445  00BB               	movwf	___ftadd@f2+2
 11027  1446  3195  25F7  3193   	fcall	___ftadd
 11028  1449  0020               	movlb	0	; select bank0
 11029  144A  0836               	movf	?___ftadd,w
 11030  144B  00DC               	movwf	getADCValue@adcSum
 11031  144C  0837               	movf	?___ftadd+1,w
 11032  144D  00DD               	movwf	getADCValue@adcSum+1
 11033  144E  0838               	movf	?___ftadd+2,w
 11034  144F  00DE               	movwf	getADCValue@adcSum+2
 11035  1450  2C14               	goto	l5222
 11036  1451                     l164:	
 11037                           
 11038                           ;main.c: 57: };main.c: 59: FVRCONbits.FVREN = 0;
 11039  1451  0022               	movlb	2	; select bank2
 11040  1452  1397               	bcf	23,7	;volatile
 11041                           
 11042                           ;main.c: 60: ADCON0bits.ADON = 0;
 11043  1453  0021               	movlb	1	; select bank1
 11044  1454  101D               	bcf	29,0	;volatile
 11045                           
 11046                           ;main.c: 63: adcSum/= 1000;
 11047  1455  3000               	movlw	0
 11048  1456  0020               	movlb	0	; select bank0
 11049  1457  00C3               	movwf	___ftdiv@f2
 11050  1458  307A               	movlw	122
 11051  1459  00C4               	movwf	___ftdiv@f2+1
 11052  145A  3044               	movlw	68
 11053  145B  00C5               	movwf	___ftdiv@f2+2
 11054  145C  085C               	movf	getADCValue@adcSum,w
 11055  145D  00C6               	movwf	___ftdiv@f1
 11056  145E  085D               	movf	getADCValue@adcSum+1,w
 11057  145F  00C7               	movwf	___ftdiv@f1+1
 11058  1460  085E               	movf	getADCValue@adcSum+2,w
 11059  1461  00C8               	movwf	___ftdiv@f1+2
 11060  1462  3194  249A  3193   	fcall	___ftdiv
 11061  1465  0020               	movlb	0	; select bank0
 11062  1466  0843               	movf	?___ftdiv,w
 11063  1467  00DC               	movwf	getADCValue@adcSum
 11064  1468  0844               	movf	?___ftdiv+1,w
 11065  1469  00DD               	movwf	getADCValue@adcSum+1
 11066  146A  0845               	movf	?___ftdiv+2,w
 11067  146B  00DE               	movwf	getADCValue@adcSum+2
 11068                           
 11069                           ;main.c: 66: if (ADCON1bits.ADPREF == 0b11){
 11070  146C  0021               	movlb	1	; select bank1
 11071  146D  081E               	movf	30,w	;volatile
 11072  146E  3903               	andlw	3
 11073  146F  3A03               	xorlw	3
 11074  1470  1903               	btfsc	3,2
 11075  1471  2C8B               	goto	l5234
 11076  1472  2C92               	goto	l5236
 11077  1473                     l5230:	
 11078                           ;main.c: 68: case 0b10:
 11079                           
 11080                           ;main.c: 67: switch (FVRCONbits.ADFVR){
 11081                           
 11082                           
 11083                           ;main.c: 69: adcSum/= 500;
 11084  1473  3000               	movlw	0
 11085  1474  0020               	movlb	0	; select bank0
 11086  1475  00C3               	movwf	___ftdiv@f2
 11087  1476  30FA               	movlw	250
 11088  1477  00C4               	movwf	___ftdiv@f2+1
 11089  1478  3043               	movlw	67
 11090  1479  00C5               	movwf	___ftdiv@f2+2
 11091  147A  085C               	movf	getADCValue@adcSum,w
 11092  147B  00C6               	movwf	___ftdiv@f1
 11093  147C  085D               	movf	getADCValue@adcSum+1,w
 11094  147D  00C7               	movwf	___ftdiv@f1+1
 11095  147E  085E               	movf	getADCValue@adcSum+2,w
 11096  147F  00C8               	movwf	___ftdiv@f1+2
 11097  1480  3194  249A  3193   	fcall	___ftdiv
 11098  1483  0020               	movlb	0	; select bank0
 11099  1484  0843               	movf	?___ftdiv,w
 11100  1485  00DC               	movwf	getADCValue@adcSum
 11101  1486  0844               	movf	?___ftdiv+1,w
 11102  1487  00DD               	movwf	getADCValue@adcSum+1
 11103  1488  0845               	movf	?___ftdiv+2,w
 11104  1489  00DE               	movwf	getADCValue@adcSum+2
 11105                           
 11106                           ;main.c: 71: }
 11107                           
 11108                           ;main.c: 70: break;
 11109  148A  2C92               	goto	l5236
 11110  148B                     l5234:	
 11111  148B  0022               	movlb	2	; select bank2
 11112  148C  0817               	movf	23,w	;volatile
 11113  148D  3903               	andlw	3
 11114                           
 11115                           ; Switch size 1, requested type "space"
 11116                           ; Number of cases is 1, Range of values is 2 to 2
 11117                           ; switch strategies available:
 11118                           ; Name         Instructions Cycles
 11119                           ; simple_byte            4     3 (average)
 11120                           ; direct_byte           11     9 (fixed)
 11121                           ; jumptable            263     9 (fixed)
 11122                           ;	Chosen strategy is simple_byte
 11123  148E  3A02               	xorlw	2	; case 2
 11124  148F  1903               	skipnz
 11125  1490  2C73               	goto	l5230
 11126  1491  2C92               	goto	l5236
 11127  1492                     l5236:	
 11128                           
 11129                           ;main.c: 72: };main.c: 75: return adcSum;
 11130  1492  0020               	movlb	0	; select bank0
 11131  1493  085C               	movf	getADCValue@adcSum,w
 11132  1494  00D3               	movwf	?_getADCValue
 11133  1495  085D               	movf	getADCValue@adcSum+1,w
 11134  1496  00D4               	movwf	?_getADCValue+1
 11135  1497  085E               	movf	getADCValue@adcSum+2,w
 11136  1498  00D5               	movwf	?_getADCValue+2
 11137  1499  0008               	return
 11138  149A                     __end_of_getADCValue:	
 11139                           
 11140                           	psect	text37
 11141  1D23                     __ptext37:	
 11142 ;; *************** function _doWDTSleep *****************
 11143 ;; Defined at:
 11144 ;;		line 21 in file "main.c"
 11145 ;; Parameters:    Size  Location     Type
 11146 ;;  wdtps           1    wreg     unsigned char 
 11147 ;; Auto vars:     Size  Location     Type
 11148 ;;  wdtps           1    1[BANK0 ] unsigned char 
 11149 ;; Return value:  Size  Location     Type
 11150 ;;                  1    wreg      void 
 11151 ;; Registers used:
 11152 ;;		wreg, status,2, status,0
 11153 ;; Tracked objects:
 11154 ;;		On entry : 0/0
 11155 ;;		On exit  : 0/0
 11156 ;;		Unchanged: 0/0
 11157 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11158 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11159 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11160 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11161 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11162 ;;Total ram usage:        2 bytes
 11163 ;; Hardware stack levels used:    1
 11164 ;; Hardware stack levels required when called:    7
 11165 ;; This function calls:
 11166 ;;		Nothing
 11167 ;; This function is called by:
 11168 ;;		_getADCValue
 11169 ;;		_sleep
 11170 ;; This function uses a non-reentrant model
 11171 ;;
 11172                           
 11173                           
 11174                           ;psect for function _doWDTSleep
 11175  1D23                     _doWDTSleep:	
 11176                           
 11177                           ;incstack = 0
 11178                           ; Regs used in _doWDTSleep: [wreg+status,2+status,0]
 11179                           ;doWDTSleep@wdtps stored from wreg
 11180  1D23  0020               	movlb	0	; select bank0
 11181  1D24  00A1               	movwf	doWDTSleep@wdtps
 11182                           
 11183                           ;main.c: 24: WDTCONbits.WDTPS = wdtps;
 11184  1D25  0821               	movf	doWDTSleep@wdtps,w
 11185  1D26  00A0               	movwf	??_doWDTSleep
 11186  1D27  0DA0               	rlf	??_doWDTSleep,f
 11187  1D28  0021               	movlb	1	; select bank1
 11188  1D29  0817               	movf	23,w	;volatile
 11189  1D2A  0020               	movlb	0	; select bank0
 11190  1D2B  0620               	xorwf	??_doWDTSleep,w
 11191  1D2C  39C1               	andlw	-63
 11192  1D2D  0620               	xorwf	??_doWDTSleep,w
 11193  1D2E  0021               	movlb	1	; select bank1
 11194  1D2F  0097               	movwf	23	;volatile
 11195  1D30  0063               	sleep	;# 
 11196                           
 11197                           ;main.c: 28: __nop();
 11198  1D31  0000               	nop
 11199                           
 11200                           ;main.c: 29: __nop();
 11201  1D32  0000               	nop
 11202                           
 11203                           ;main.c: 31: WDTCONbits.WDTPS = 0b01101;
 11204  1D33  0021               	movlb	1	; select bank1
 11205  1D34  0817               	movf	23,w	;volatile
 11206  1D35  39C1               	andlw	-63
 11207  1D36  381A               	iorlw	26
 11208  1D37  0097               	movwf	23	;volatile
 11209  1D38  0064               	clrwdt	;# 
 11210  1D39  0008               	return
 11211  1D3A                     __end_of_doWDTSleep:	
 11212                           
 11213                           	psect	text38
 11214  149A                     __ptext38:	
 11215 ;; *************** function ___ftdiv *****************
 11216 ;; Defined at:
 11217 ;;		line 56 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\ftdiv.c"
 11218 ;; Parameters:    Size  Location     Type
 11219 ;;  f2              3   35[BANK0 ] float 
 11220 ;;  f1              3   38[BANK0 ] float 
 11221 ;; Auto vars:     Size  Location     Type
 11222 ;;  f3              3   46[BANK0 ] float 
 11223 ;;  sign            1   50[BANK0 ] unsigned char 
 11224 ;;  exp             1   49[BANK0 ] unsigned char 
 11225 ;;  cntr            1   45[BANK0 ] unsigned char 
 11226 ;; Return value:  Size  Location     Type
 11227 ;;                  3   35[BANK0 ] float 
 11228 ;; Registers used:
 11229 ;;		wreg, status,2, status,0, pclath, cstack
 11230 ;; Tracked objects:
 11231 ;;		On entry : 0/0
 11232 ;;		On exit  : 0/0
 11233 ;;		Unchanged: 0/0
 11234 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11235 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11236 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11237 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11238 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11239 ;;Total ram usage:       16 bytes
 11240 ;; Hardware stack levels used:    1
 11241 ;; Hardware stack levels required when called:    8
 11242 ;; This function calls:
 11243 ;;		___ftpack
 11244 ;; This function is called by:
 11245 ;;		_getADCValue
 11246 ;;		_loop
 11247 ;; This function uses a non-reentrant model
 11248 ;;
 11249                           
 11250                           
 11251                           ;psect for function ___ftdiv
 11252  149A                     ___ftdiv:	
 11253                           
 11254                           ;incstack = 0
 11255                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
 11256  149A  0020               	movlb	0	; select bank0
 11257  149B  0846               	movf	___ftdiv@f1,w
 11258  149C  00C9               	movwf	??___ftdiv
 11259  149D  0847               	movf	___ftdiv@f1+1,w
 11260  149E  00CA               	movwf	??___ftdiv+1
 11261  149F  0848               	movf	___ftdiv@f1+2,w
 11262  14A0  00CB               	movwf	??___ftdiv+2
 11263  14A1  1003               	clrc
 11264  14A2  0D4A               	rlf	??___ftdiv+1,w
 11265  14A3  0D4B               	rlf	??___ftdiv+2,w
 11266  14A4  00CC               	movwf	??___ftdiv+3
 11267  14A5  084C               	movf	??___ftdiv+3,w
 11268  14A6  00D1               	movwf	___ftdiv@exp
 11269  14A7  0851               	movf	___ftdiv@exp,w
 11270  14A8  1D03               	btfss	3,2
 11271  14A9  2CB1               	goto	l5140
 11272  14AA  3000               	movlw	0
 11273  14AB  00C3               	movwf	?___ftdiv
 11274  14AC  3000               	movlw	0
 11275  14AD  00C4               	movwf	?___ftdiv+1
 11276  14AE  3000               	movlw	0
 11277  14AF  00C5               	movwf	?___ftdiv+2
 11278  14B0  0008               	return
 11279  14B1                     l5140:	
 11280  14B1  0843               	movf	___ftdiv@f2,w
 11281  14B2  00C9               	movwf	??___ftdiv
 11282  14B3  0844               	movf	___ftdiv@f2+1,w
 11283  14B4  00CA               	movwf	??___ftdiv+1
 11284  14B5  0845               	movf	___ftdiv@f2+2,w
 11285  14B6  00CB               	movwf	??___ftdiv+2
 11286  14B7  1003               	clrc
 11287  14B8  0D4A               	rlf	??___ftdiv+1,w
 11288  14B9  0D4B               	rlf	??___ftdiv+2,w
 11289  14BA  00CC               	movwf	??___ftdiv+3
 11290  14BB  084C               	movf	??___ftdiv+3,w
 11291  14BC  00D2               	movwf	___ftdiv@sign
 11292  14BD  0852               	movf	___ftdiv@sign,w
 11293  14BE  1D03               	btfss	3,2
 11294  14BF  2CC7               	goto	l5146
 11295  14C0  3000               	movlw	0
 11296  14C1  00C3               	movwf	?___ftdiv
 11297  14C2  3000               	movlw	0
 11298  14C3  00C4               	movwf	?___ftdiv+1
 11299  14C4  3000               	movlw	0
 11300  14C5  00C5               	movwf	?___ftdiv+2
 11301  14C6  0008               	return
 11302  14C7                     l5146:	
 11303  14C7  3000               	movlw	0
 11304  14C8  00CE               	movwf	___ftdiv@f3
 11305  14C9  3000               	movlw	0
 11306  14CA  00CF               	movwf	___ftdiv@f3+1
 11307  14CB  3000               	movlw	0
 11308  14CC  00D0               	movwf	___ftdiv@f3+2
 11309  14CD  3089               	movlw	137
 11310  14CE  0752               	addwf	___ftdiv@sign,w
 11311  14CF  00C9               	movwf	??___ftdiv
 11312  14D0  0849               	movf	??___ftdiv,w
 11313  14D1  02D1               	subwf	___ftdiv@exp,f
 11314  14D2  0846               	movf	___ftdiv@f1,w
 11315  14D3  00C9               	movwf	??___ftdiv
 11316  14D4  0847               	movf	___ftdiv@f1+1,w
 11317  14D5  00CA               	movwf	??___ftdiv+1
 11318  14D6  0848               	movf	___ftdiv@f1+2,w
 11319  14D7  00CB               	movwf	??___ftdiv+2
 11320  14D8  3010               	movlw	16
 11321  14D9                     u6615:	
 11322  14D9  36CB               	lsrf	??___ftdiv+2,f
 11323  14DA  0CCA               	rrf	??___ftdiv+1,f
 11324  14DB  0CC9               	rrf	??___ftdiv,f
 11325  14DC  0B89               	decfsz	9,f
 11326  14DD  2CD9               	goto	u6615
 11327  14DE  0849               	movf	??___ftdiv,w
 11328  14DF  00CC               	movwf	??___ftdiv+3
 11329  14E0  084C               	movf	??___ftdiv+3,w
 11330  14E1  00D2               	movwf	___ftdiv@sign
 11331  14E2  0843               	movf	___ftdiv@f2,w
 11332  14E3  00C9               	movwf	??___ftdiv
 11333  14E4  0844               	movf	___ftdiv@f2+1,w
 11334  14E5  00CA               	movwf	??___ftdiv+1
 11335  14E6  0845               	movf	___ftdiv@f2+2,w
 11336  14E7  00CB               	movwf	??___ftdiv+2
 11337  14E8  3010               	movlw	16
 11338  14E9                     u6625:	
 11339  14E9  36CB               	lsrf	??___ftdiv+2,f
 11340  14EA  0CCA               	rrf	??___ftdiv+1,f
 11341  14EB  0CC9               	rrf	??___ftdiv,f
 11342  14EC  0B89               	decfsz	9,f
 11343  14ED  2CE9               	goto	u6625
 11344  14EE  0849               	movf	??___ftdiv,w
 11345  14EF  00CC               	movwf	??___ftdiv+3
 11346  14F0  084C               	movf	??___ftdiv+3,w
 11347  14F1  06D2               	xorwf	___ftdiv@sign,f
 11348  14F2  3080               	movlw	128
 11349  14F3  00C9               	movwf	??___ftdiv
 11350  14F4  0849               	movf	??___ftdiv,w
 11351  14F5  05D2               	andwf	___ftdiv@sign,f
 11352  14F6  17C7               	bsf	___ftdiv@f1+1,7
 11353  14F7  30FF               	movlw	255
 11354  14F8  05C6               	andwf	___ftdiv@f1,f
 11355  14F9  30FF               	movlw	255
 11356  14FA  05C7               	andwf	___ftdiv@f1+1,f
 11357  14FB  3000               	movlw	0
 11358  14FC  05C8               	andwf	___ftdiv@f1+2,f
 11359  14FD  17C4               	bsf	___ftdiv@f2+1,7
 11360  14FE  30FF               	movlw	255
 11361  14FF  05C3               	andwf	___ftdiv@f2,f
 11362  1500  30FF               	movlw	255
 11363  1501  05C4               	andwf	___ftdiv@f2+1,f
 11364  1502  3000               	movlw	0
 11365  1503  05C5               	andwf	___ftdiv@f2+2,f
 11366  1504  3018               	movlw	24
 11367  1505  00C9               	movwf	??___ftdiv
 11368  1506  0849               	movf	??___ftdiv,w
 11369  1507  00CD               	movwf	___ftdiv@cntr
 11370  1508                     l5160:	
 11371  1508  3001               	movlw	1
 11372  1509                     u6635:	
 11373  1509  35CE               	lslf	___ftdiv@f3,f
 11374  150A  0DCF               	rlf	___ftdiv@f3+1,f
 11375  150B  0DD0               	rlf	___ftdiv@f3+2,f
 11376  150C  0B89               	decfsz	9,f
 11377  150D  2D09               	goto	u6635
 11378  150E  0845               	movf	___ftdiv@f2+2,w
 11379  150F  0248               	subwf	___ftdiv@f1+2,w
 11380  1510  1D03               	skipz
 11381  1511  2D18               	goto	u6645
 11382  1512  0844               	movf	___ftdiv@f2+1,w
 11383  1513  0247               	subwf	___ftdiv@f1+1,w
 11384  1514  1D03               	skipz
 11385  1515  2D18               	goto	u6645
 11386  1516  0843               	movf	___ftdiv@f2,w
 11387  1517  0246               	subwf	___ftdiv@f1,w
 11388  1518                     u6645:	
 11389  1518  1C03               	skipc
 11390  1519  2D21               	goto	l5168
 11391  151A  0843               	movf	___ftdiv@f2,w
 11392  151B  02C6               	subwf	___ftdiv@f1,f
 11393  151C  0844               	movf	___ftdiv@f2+1,w
 11394  151D  3BC7               	subwfb	___ftdiv@f1+1,f
 11395  151E  0845               	movf	___ftdiv@f2+2,w
 11396  151F  3BC8               	subwfb	___ftdiv@f1+2,f
 11397  1520  144E               	bsf	___ftdiv@f3,0
 11398  1521                     l5168:	
 11399  1521  3001               	movlw	1
 11400  1522                     u6655:	
 11401  1522  35C6               	lslf	___ftdiv@f1,f
 11402  1523  0DC7               	rlf	___ftdiv@f1+1,f
 11403  1524  0DC8               	rlf	___ftdiv@f1+2,f
 11404  1525  0B89               	decfsz	9,f
 11405  1526  2D22               	goto	u6655
 11406  1527  3001               	movlw	1
 11407  1528  02CD               	subwf	___ftdiv@cntr,f
 11408  1529  1D03               	btfss	3,2
 11409  152A  2D08               	goto	l5160
 11410  152B  084E               	movf	___ftdiv@f3,w
 11411  152C  00A0               	movwf	___ftpack@arg
 11412  152D  084F               	movf	___ftdiv@f3+1,w
 11413  152E  00A1               	movwf	___ftpack@arg+1
 11414  152F  0850               	movf	___ftdiv@f3+2,w
 11415  1530  00A2               	movwf	___ftpack@arg+2
 11416  1531  0851               	movf	___ftdiv@exp,w
 11417  1532  00C9               	movwf	??___ftdiv
 11418  1533  0849               	movf	??___ftdiv,w
 11419  1534  00A3               	movwf	___ftpack@exp
 11420  1535  0852               	movf	___ftdiv@sign,w
 11421  1536  00CA               	movwf	??___ftdiv+1
 11422  1537  084A               	movf	??___ftdiv+1,w
 11423  1538  00A4               	movwf	___ftpack@sign
 11424  1539  3192  2275         	fcall	___ftpack
 11425  153B  0020               	movlb	0	; select bank0
 11426  153C  0820               	movf	?___ftpack,w
 11427  153D  00C3               	movwf	?___ftdiv
 11428  153E  0821               	movf	?___ftpack+1,w
 11429  153F  00C4               	movwf	?___ftdiv+1
 11430  1540  0822               	movf	?___ftpack+2,w
 11431  1541  00C5               	movwf	?___ftdiv+2
 11432  1542  0008               	return
 11433  1543                     __end_of___ftdiv:	
 11434                           
 11435                           	psect	text39
 11436  15F7                     __ptext39:	
 11437 ;; *************** function ___ftadd *****************
 11438 ;; Defined at:
 11439 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\ftadd.c"
 11440 ;; Parameters:    Size  Location     Type
 11441 ;;  f1              3   22[BANK0 ] float 
 11442 ;;  f2              3   25[BANK0 ] float 
 11443 ;; Auto vars:     Size  Location     Type
 11444 ;;  exp1            1   34[BANK0 ] unsigned char 
 11445 ;;  exp2            1   33[BANK0 ] unsigned char 
 11446 ;;  sign            1   32[BANK0 ] unsigned char 
 11447 ;; Return value:  Size  Location     Type
 11448 ;;                  3   22[BANK0 ] float 
 11449 ;; Registers used:
 11450 ;;		wreg, status,2, status,0, pclath, cstack
 11451 ;; Tracked objects:
 11452 ;;		On entry : 0/0
 11453 ;;		On exit  : 0/0
 11454 ;;		Unchanged: 0/0
 11455 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11456 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11457 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11458 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11459 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11460 ;;Total ram usage:       13 bytes
 11461 ;; Hardware stack levels used:    1
 11462 ;; Hardware stack levels required when called:    8
 11463 ;; This function calls:
 11464 ;;		___ftpack
 11465 ;; This function is called by:
 11466 ;;		_getADCValue
 11467 ;;		_loop
 11468 ;;		_sprintf
 11469 ;;		___ftsub
 11470 ;; This function uses a non-reentrant model
 11471 ;;
 11472                           
 11473                           
 11474                           ;psect for function ___ftadd
 11475  15F7                     ___ftadd:	
 11476                           
 11477                           ;incstack = 0
 11478                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
 11479  15F7  0020               	movlb	0	; select bank0
 11480  15F8  0836               	movf	___ftadd@f1,w
 11481  15F9  00BC               	movwf	??___ftadd
 11482  15FA  0837               	movf	___ftadd@f1+1,w
 11483  15FB  00BD               	movwf	??___ftadd+1
 11484  15FC  0838               	movf	___ftadd@f1+2,w
 11485  15FD  00BE               	movwf	??___ftadd+2
 11486  15FE  1003               	clrc
 11487  15FF  0D3D               	rlf	??___ftadd+1,w
 11488  1600  0D3E               	rlf	??___ftadd+2,w
 11489  1601  00BF               	movwf	??___ftadd+3
 11490  1602  083F               	movf	??___ftadd+3,w
 11491  1603  00C2               	movwf	___ftadd@exp1
 11492  1604  0839               	movf	___ftadd@f2,w
 11493  1605  00BC               	movwf	??___ftadd
 11494  1606  083A               	movf	___ftadd@f2+1,w
 11495  1607  00BD               	movwf	??___ftadd+1
 11496  1608  083B               	movf	___ftadd@f2+2,w
 11497  1609  00BE               	movwf	??___ftadd+2
 11498  160A  1003               	clrc
 11499  160B  0D3D               	rlf	??___ftadd+1,w
 11500  160C  0D3E               	rlf	??___ftadd+2,w
 11501  160D  00BF               	movwf	??___ftadd+3
 11502  160E  083F               	movf	??___ftadd+3,w
 11503  160F  00C1               	movwf	___ftadd@exp2
 11504  1610  0842               	movf	___ftadd@exp1,w
 11505  1611  1903               	btfsc	3,2
 11506  1612  2E1F               	goto	l4316
 11507  1613  0841               	movf	___ftadd@exp2,w
 11508  1614  0242               	subwf	___ftadd@exp1,w
 11509  1615  1803               	skipnc
 11510  1616  2E26               	goto	l4320
 11511  1617  0342               	decf	___ftadd@exp1,w
 11512  1618  3AFF               	xorlw	255
 11513  1619  0741               	addwf	___ftadd@exp2,w
 11514  161A  00BC               	movwf	??___ftadd
 11515  161B  3019               	movlw	25
 11516  161C  023C               	subwf	??___ftadd,w
 11517  161D  1C03               	skipc
 11518  161E  2E26               	goto	l4320
 11519  161F                     l4316:	
 11520  161F  0839               	movf	___ftadd@f2,w
 11521  1620  00B6               	movwf	?___ftadd
 11522  1621  083A               	movf	___ftadd@f2+1,w
 11523  1622  00B7               	movwf	?___ftadd+1
 11524  1623  083B               	movf	___ftadd@f2+2,w
 11525  1624  00B8               	movwf	?___ftadd+2
 11526  1625  0008               	return
 11527  1626                     l4320:	
 11528  1626  0841               	movf	___ftadd@exp2,w
 11529  1627  1903               	btfsc	3,2
 11530  1628  0008               	return
 11531  1629  0842               	movf	___ftadd@exp1,w
 11532  162A  0241               	subwf	___ftadd@exp2,w
 11533  162B  1803               	skipnc
 11534  162C  2E35               	goto	l4326
 11535  162D  0341               	decf	___ftadd@exp2,w
 11536  162E  3AFF               	xorlw	255
 11537  162F  0742               	addwf	___ftadd@exp1,w
 11538  1630  00BC               	movwf	??___ftadd
 11539  1631  3019               	movlw	25
 11540  1632  023C               	subwf	??___ftadd,w
 11541  1633  1803               	btfsc	3,0
 11542  1634  0008               	return
 11543  1635                     l4326:	
 11544  1635  3006               	movlw	6
 11545  1636  00BC               	movwf	??___ftadd
 11546  1637  083C               	movf	??___ftadd,w
 11547  1638  00C0               	movwf	___ftadd@sign
 11548  1639  1BB8               	btfsc	___ftadd@f1+2,7
 11549  163A  17C0               	bsf	___ftadd@sign,7
 11550  163B  1BBB               	btfsc	___ftadd@f2+2,7
 11551  163C  1740               	bsf	___ftadd@sign,6
 11552  163D  17B7               	bsf	___ftadd@f1+1,7
 11553  163E  30FF               	movlw	255
 11554  163F  05B6               	andwf	___ftadd@f1,f
 11555  1640  30FF               	movlw	255
 11556  1641  05B7               	andwf	___ftadd@f1+1,f
 11557  1642  3000               	movlw	0
 11558  1643  05B8               	andwf	___ftadd@f1+2,f
 11559  1644  17BA               	bsf	___ftadd@f2+1,7
 11560  1645  30FF               	movlw	255
 11561  1646  05B9               	andwf	___ftadd@f2,f
 11562  1647  30FF               	movlw	255
 11563  1648  05BA               	andwf	___ftadd@f2+1,f
 11564  1649  3000               	movlw	0
 11565  164A  05BB               	andwf	___ftadd@f2+2,f
 11566  164B  0841               	movf	___ftadd@exp2,w
 11567  164C  0242               	subwf	___ftadd@exp1,w
 11568  164D  1803               	skipnc
 11569  164E  2E71               	goto	l4348
 11570  164F                     l4338:	
 11571  164F  3001               	movlw	1
 11572  1650                     u5145:	
 11573  1650  35B9               	lslf	___ftadd@f2,f
 11574  1651  0DBA               	rlf	___ftadd@f2+1,f
 11575  1652  0DBB               	rlf	___ftadd@f2+2,f
 11576  1653  0B89               	decfsz	9,f
 11577  1654  2E50               	goto	u5145
 11578  1655  3001               	movlw	1
 11579  1656  02C1               	subwf	___ftadd@exp2,f
 11580  1657  0841               	movf	___ftadd@exp2,w
 11581  1658  0642               	xorwf	___ftadd@exp1,w
 11582  1659  1903               	skipnz
 11583  165A  2E6C               	goto	l4346
 11584  165B  3001               	movlw	1
 11585  165C  02C0               	subwf	___ftadd@sign,f
 11586  165D  0840               	movf	___ftadd@sign,w
 11587  165E  3907               	andlw	7
 11588  165F  1903               	btfsc	3,2
 11589  1660  2E6C               	goto	l4346
 11590  1661  2E4F               	goto	l4338
 11591  1662                     l4344:	
 11592  1662  3001               	movlw	1
 11593  1663                     u5175:	
 11594  1663  36B8               	lsrf	___ftadd@f1+2,f
 11595  1664  0CB7               	rrf	___ftadd@f1+1,f
 11596  1665  0CB6               	rrf	___ftadd@f1,f
 11597  1666  0B89               	decfsz	9,f
 11598  1667  2E63               	goto	u5175
 11599  1668  3001               	movlw	1
 11600  1669  00BC               	movwf	??___ftadd
 11601  166A  083C               	movf	??___ftadd,w
 11602  166B  07C2               	addwf	___ftadd@exp1,f
 11603  166C                     l4346:	
 11604  166C  0842               	movf	___ftadd@exp1,w
 11605  166D  0641               	xorwf	___ftadd@exp2,w
 11606  166E  1903               	btfsc	3,2
 11607  166F  2E96               	goto	l729
 11608  1670  2E62               	goto	l4344
 11609  1671                     l4348:	
 11610  1671  0842               	movf	___ftadd@exp1,w
 11611  1672  0241               	subwf	___ftadd@exp2,w
 11612  1673  1803               	skipnc
 11613  1674  2E96               	goto	l729
 11614  1675                     l4350:	
 11615  1675  3001               	movlw	1
 11616  1676                     u5205:	
 11617  1676  35B6               	lslf	___ftadd@f1,f
 11618  1677  0DB7               	rlf	___ftadd@f1+1,f
 11619  1678  0DB8               	rlf	___ftadd@f1+2,f
 11620  1679  0B89               	decfsz	9,f
 11621  167A  2E76               	goto	u5205
 11622  167B  3001               	movlw	1
 11623  167C  02C2               	subwf	___ftadd@exp1,f
 11624  167D  0841               	movf	___ftadd@exp2,w
 11625  167E  0642               	xorwf	___ftadd@exp1,w
 11626  167F  1903               	skipnz
 11627  1680  2E92               	goto	l4358
 11628  1681  3001               	movlw	1
 11629  1682  02C0               	subwf	___ftadd@sign,f
 11630  1683  0840               	movf	___ftadd@sign,w
 11631  1684  3907               	andlw	7
 11632  1685  1903               	btfsc	3,2
 11633  1686  2E92               	goto	l4358
 11634  1687  2E75               	goto	l4350
 11635  1688                     l4356:	
 11636  1688  3001               	movlw	1
 11637  1689                     u5235:	
 11638  1689  36BB               	lsrf	___ftadd@f2+2,f
 11639  168A  0CBA               	rrf	___ftadd@f2+1,f
 11640  168B  0CB9               	rrf	___ftadd@f2,f
 11641  168C  0B89               	decfsz	9,f
 11642  168D  2E89               	goto	u5235
 11643  168E  3001               	movlw	1
 11644  168F  00BC               	movwf	??___ftadd
 11645  1690  083C               	movf	??___ftadd,w
 11646  1691  07C1               	addwf	___ftadd@exp2,f
 11647  1692                     l4358:	
 11648  1692  0842               	movf	___ftadd@exp1,w
 11649  1693  0641               	xorwf	___ftadd@exp2,w
 11650  1694  1D03               	skipz
 11651  1695  2E88               	goto	l4356
 11652  1696                     l729:	
 11653  1696  1FC0               	btfss	___ftadd@sign,7
 11654  1697  2EA8               	goto	l4362
 11655  1698  30FF               	movlw	255
 11656  1699  06B6               	xorwf	___ftadd@f1,f
 11657  169A  30FF               	movlw	255
 11658  169B  06B7               	xorwf	___ftadd@f1+1,f
 11659  169C  30FF               	movlw	255
 11660  169D  06B8               	xorwf	___ftadd@f1+2,f
 11661  169E  3001               	movlw	1
 11662  169F  07B6               	addwf	___ftadd@f1,f
 11663  16A0  3000               	movlw	0
 11664  16A1  1803               	skipnc
 11665  16A2  3001               	movlw	1
 11666  16A3  07B7               	addwf	___ftadd@f1+1,f
 11667  16A4  3000               	movlw	0
 11668  16A5  1803               	skipnc
 11669  16A6  3001               	movlw	1
 11670  16A7  07B8               	addwf	___ftadd@f1+2,f
 11671  16A8                     l4362:	
 11672  16A8  1F40               	btfss	___ftadd@sign,6
 11673  16A9  2EBA               	goto	l4366
 11674  16AA  30FF               	movlw	255
 11675  16AB  06B9               	xorwf	___ftadd@f2,f
 11676  16AC  30FF               	movlw	255
 11677  16AD  06BA               	xorwf	___ftadd@f2+1,f
 11678  16AE  30FF               	movlw	255
 11679  16AF  06BB               	xorwf	___ftadd@f2+2,f
 11680  16B0  3001               	movlw	1
 11681  16B1  07B9               	addwf	___ftadd@f2,f
 11682  16B2  3000               	movlw	0
 11683  16B3  1803               	skipnc
 11684  16B4  3001               	movlw	1
 11685  16B5  07BA               	addwf	___ftadd@f2+1,f
 11686  16B6  3000               	movlw	0
 11687  16B7  1803               	skipnc
 11688  16B8  3001               	movlw	1
 11689  16B9  07BB               	addwf	___ftadd@f2+2,f
 11690  16BA                     l4366:	
 11691  16BA  01C0               	clrf	___ftadd@sign
 11692  16BB  0836               	movf	___ftadd@f1,w
 11693  16BC  07B9               	addwf	___ftadd@f2,f
 11694  16BD  0837               	movf	___ftadd@f1+1,w
 11695  16BE  3DBA               	addwfc	___ftadd@f2+1,f
 11696  16BF  0838               	movf	___ftadd@f1+2,w
 11697  16C0  3DBB               	addwfc	___ftadd@f2+2,f
 11698  16C1  1FBB               	btfss	___ftadd@f2+2,7
 11699  16C2  2ED5               	goto	l4376
 11700  16C3  30FF               	movlw	255
 11701  16C4  06B9               	xorwf	___ftadd@f2,f
 11702  16C5  30FF               	movlw	255
 11703  16C6  06BA               	xorwf	___ftadd@f2+1,f
 11704  16C7  30FF               	movlw	255
 11705  16C8  06BB               	xorwf	___ftadd@f2+2,f
 11706  16C9  3001               	movlw	1
 11707  16CA  07B9               	addwf	___ftadd@f2,f
 11708  16CB  3000               	movlw	0
 11709  16CC  1803               	skipnc
 11710  16CD  3001               	movlw	1
 11711  16CE  07BA               	addwf	___ftadd@f2+1,f
 11712  16CF  3000               	movlw	0
 11713  16D0  1803               	skipnc
 11714  16D1  3001               	movlw	1
 11715  16D2  07BB               	addwf	___ftadd@f2+2,f
 11716  16D3  01C0               	clrf	___ftadd@sign
 11717  16D4  0AC0               	incf	___ftadd@sign,f
 11718  16D5                     l4376:	
 11719  16D5  0839               	movf	___ftadd@f2,w
 11720  16D6  00A0               	movwf	___ftpack@arg
 11721  16D7  083A               	movf	___ftadd@f2+1,w
 11722  16D8  00A1               	movwf	___ftpack@arg+1
 11723  16D9  083B               	movf	___ftadd@f2+2,w
 11724  16DA  00A2               	movwf	___ftpack@arg+2
 11725  16DB  0842               	movf	___ftadd@exp1,w
 11726  16DC  00BC               	movwf	??___ftadd
 11727  16DD  083C               	movf	??___ftadd,w
 11728  16DE  00A3               	movwf	___ftpack@exp
 11729  16DF  0840               	movf	___ftadd@sign,w
 11730  16E0  00BD               	movwf	??___ftadd+1
 11731  16E1  083D               	movf	??___ftadd+1,w
 11732  16E2  00A4               	movwf	___ftpack@sign
 11733  16E3  3192  2275         	fcall	___ftpack
 11734  16E5  0020               	movlb	0	; select bank0
 11735  16E6  0820               	movf	?___ftpack,w
 11736  16E7  00B6               	movwf	?___ftadd
 11737  16E8  0821               	movf	?___ftpack+1,w
 11738  16E9  00B7               	movwf	?___ftadd+1
 11739  16EA  0822               	movf	?___ftpack+2,w
 11740  16EB  00B8               	movwf	?___ftadd+2
 11741  16EC  0008               	return
 11742  16ED                     __end_of___ftadd:	
 11743                           
 11744                           	psect	text40
 11745  1E97                     __ptext40:	
 11746 ;; *************** function ___awtoft *****************
 11747 ;; Defined at:
 11748 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\awtoft.c"
 11749 ;; Parameters:    Size  Location     Type
 11750 ;;  c               2    8[BANK0 ] int 
 11751 ;; Auto vars:     Size  Location     Type
 11752 ;;  sign            1   13[BANK0 ] unsigned char 
 11753 ;; Return value:  Size  Location     Type
 11754 ;;                  3    8[BANK0 ] float 
 11755 ;; Registers used:
 11756 ;;		wreg, status,2, status,0, pclath, cstack
 11757 ;; Tracked objects:
 11758 ;;		On entry : 0/0
 11759 ;;		On exit  : 0/0
 11760 ;;		Unchanged: 0/0
 11761 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11762 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11763 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11764 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11765 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11766 ;;Total ram usage:        6 bytes
 11767 ;; Hardware stack levels used:    1
 11768 ;; Hardware stack levels required when called:    8
 11769 ;; This function calls:
 11770 ;;		___ftpack
 11771 ;; This function is called by:
 11772 ;;		_getADCValue
 11773 ;; This function uses a non-reentrant model
 11774 ;;
 11775                           
 11776                           
 11777                           ;psect for function ___awtoft
 11778  1E97                     ___awtoft:	
 11779                           
 11780                           ;incstack = 0
 11781                           ; Regs used in ___awtoft: [wreg+status,2+status,0+pclath+cstack]
 11782  1E97  0020               	movlb	0	; select bank0
 11783  1E98  01AD               	clrf	___awtoft@sign
 11784  1E99  1FA9               	btfss	___awtoft@c+1,7
 11785  1E9A  2EA2               	goto	l5130
 11786  1E9B  09A8               	comf	___awtoft@c,f
 11787  1E9C  09A9               	comf	___awtoft@c+1,f
 11788  1E9D  0AA8               	incf	___awtoft@c,f
 11789  1E9E  1903               	skipnz
 11790  1E9F  0AA9               	incf	___awtoft@c+1,f
 11791  1EA0  01AD               	clrf	___awtoft@sign
 11792  1EA1  0AAD               	incf	___awtoft@sign,f
 11793  1EA2                     l5130:	
 11794  1EA2  0828               	movf	___awtoft@c,w
 11795  1EA3  00A0               	movwf	___ftpack@arg
 11796  1EA4  0829               	movf	___awtoft@c+1,w
 11797  1EA5  00A1               	movwf	___ftpack@arg+1
 11798  1EA6  01A2               	clrf	___ftpack@arg+2
 11799  1EA7  308E               	movlw	142
 11800  1EA8  00AB               	movwf	??___awtoft
 11801  1EA9  082B               	movf	??___awtoft,w
 11802  1EAA  00A3               	movwf	___ftpack@exp
 11803  1EAB  082D               	movf	___awtoft@sign,w
 11804  1EAC  00AC               	movwf	??___awtoft+1
 11805  1EAD  082C               	movf	??___awtoft+1,w
 11806  1EAE  00A4               	movwf	___ftpack@sign
 11807  1EAF  3192  2275         	fcall	___ftpack
 11808  1EB1  0020               	movlb	0	; select bank0
 11809  1EB2  0820               	movf	?___ftpack,w
 11810  1EB3  00A8               	movwf	?___awtoft
 11811  1EB4  0821               	movf	?___ftpack+1,w
 11812  1EB5  00A9               	movwf	?___awtoft+1
 11813  1EB6  0822               	movf	?___ftpack+2,w
 11814  1EB7  00AA               	movwf	?___awtoft+2
 11815  1EB8  0008               	return
 11816  1EB9                     __end_of___awtoft:	
 11817                           
 11818                           	psect	text41
 11819  1D70                     __ptext41:	
 11820 ;; *************** function ___lbtoft *****************
 11821 ;; Defined at:
 11822 ;;		line 27 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\lbtoft.c"
 11823 ;; Parameters:    Size  Location     Type
 11824 ;;  c               1    wreg     unsigned char 
 11825 ;; Auto vars:     Size  Location     Type
 11826 ;;  c               1   15[BANK0 ] unsigned char 
 11827 ;; Return value:  Size  Location     Type
 11828 ;;                  3    8[BANK0 ] float 
 11829 ;; Registers used:
 11830 ;;		wreg, status,2, status,0, pclath, cstack
 11831 ;; Tracked objects:
 11832 ;;		On entry : 0/0
 11833 ;;		On exit  : 0/0
 11834 ;;		Unchanged: 0/0
 11835 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11836 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11837 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11838 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11839 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11840 ;;Total ram usage:        8 bytes
 11841 ;; Hardware stack levels used:    1
 11842 ;; Hardware stack levels required when called:    8
 11843 ;; This function calls:
 11844 ;;		___ftpack
 11845 ;; This function is called by:
 11846 ;;		_loop
 11847 ;; This function uses a non-reentrant model
 11848 ;;
 11849                           
 11850                           
 11851                           ;psect for function ___lbtoft
 11852  1D70                     ___lbtoft:	
 11853                           
 11854                           ;incstack = 0
 11855                           ; Regs used in ___lbtoft: [wreg+status,2+status,0+pclath+cstack]
 11856                           ;___lbtoft@c stored from wreg
 11857  1D70  0020               	movlb	0	; select bank0
 11858  1D71  00AF               	movwf	___lbtoft@c
 11859  1D72  082F               	movf	___lbtoft@c,w
 11860  1D73  00AB               	movwf	??___lbtoft
 11861  1D74  01AC               	clrf	??___lbtoft+1
 11862  1D75  01AD               	clrf	??___lbtoft+2
 11863  1D76  082B               	movf	??___lbtoft,w
 11864  1D77  00A0               	movwf	___ftpack@arg
 11865  1D78  082C               	movf	??___lbtoft+1,w
 11866  1D79  00A1               	movwf	___ftpack@arg+1
 11867  1D7A  082D               	movf	??___lbtoft+2,w
 11868  1D7B  00A2               	movwf	___ftpack@arg+2
 11869  1D7C  308E               	movlw	142
 11870  1D7D  00AE               	movwf	??___lbtoft+3
 11871  1D7E  082E               	movf	??___lbtoft+3,w
 11872  1D7F  00A3               	movwf	___ftpack@exp
 11873  1D80  01A4               	clrf	___ftpack@sign
 11874  1D81  3192  2275         	fcall	___ftpack
 11875  1D83  0020               	movlb	0	; select bank0
 11876  1D84  0820               	movf	?___ftpack,w
 11877  1D85  00A8               	movwf	?___lbtoft
 11878  1D86  0821               	movf	?___ftpack+1,w
 11879  1D87  00A9               	movwf	?___lbtoft+1
 11880  1D88  0822               	movf	?___ftpack+2,w
 11881  1D89  00AA               	movwf	?___lbtoft+2
 11882  1D8A  0008               	return
 11883  1D8B                     __end_of___lbtoft:	
 11884                           
 11885                           	psect	text42
 11886  1D0E                     __ptext42:	
 11887 ;; *************** function ___lwtoft *****************
 11888 ;; Defined at:
 11889 ;;		line 28 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\lwtoft.c"
 11890 ;; Parameters:    Size  Location     Type
 11891 ;;  c               2    8[BANK0 ] unsigned int 
 11892 ;; Auto vars:     Size  Location     Type
 11893 ;;		None
 11894 ;; Return value:  Size  Location     Type
 11895 ;;                  3    8[BANK0 ] float 
 11896 ;; Registers used:
 11897 ;;		wreg, status,2, status,0, pclath, cstack
 11898 ;; Tracked objects:
 11899 ;;		On entry : 0/0
 11900 ;;		On exit  : 0/0
 11901 ;;		Unchanged: 0/0
 11902 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11903 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11904 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11905 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11906 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11907 ;;Total ram usage:        4 bytes
 11908 ;; Hardware stack levels used:    1
 11909 ;; Hardware stack levels required when called:    8
 11910 ;; This function calls:
 11911 ;;		___ftpack
 11912 ;; This function is called by:
 11913 ;;		_main
 11914 ;; This function uses a non-reentrant model
 11915 ;;
 11916                           
 11917                           
 11918                           ;psect for function ___lwtoft
 11919  1D0E                     ___lwtoft:	
 11920                           
 11921                           ;incstack = 0
 11922                           ; Regs used in ___lwtoft: [wreg+status,2+status,0+pclath+cstack]
 11923  1D0E  0020               	movlb	0	; select bank0
 11924  1D0F  0828               	movf	___lwtoft@c,w
 11925  1D10  00A0               	movwf	___ftpack@arg
 11926  1D11  0829               	movf	___lwtoft@c+1,w
 11927  1D12  00A1               	movwf	___ftpack@arg+1
 11928  1D13  01A2               	clrf	___ftpack@arg+2
 11929  1D14  308E               	movlw	142
 11930  1D15  00AB               	movwf	??___lwtoft
 11931  1D16  082B               	movf	??___lwtoft,w
 11932  1D17  00A3               	movwf	___ftpack@exp
 11933  1D18  01A4               	clrf	___ftpack@sign
 11934  1D19  3192  2275         	fcall	___ftpack
 11935  1D1B  0020               	movlb	0	; select bank0
 11936  1D1C  0820               	movf	?___ftpack,w
 11937  1D1D  00A8               	movwf	?___lwtoft
 11938  1D1E  0821               	movf	?___ftpack+1,w
 11939  1D1F  00A9               	movwf	?___lwtoft+1
 11940  1D20  0822               	movf	?___ftpack+2,w
 11941  1D21  00AA               	movwf	?___lwtoft+2
 11942  1D22  0008               	return
 11943  1D23                     __end_of___lwtoft:	
 11944                           
 11945                           	psect	text43
 11946  1275                     __ptext43:	
 11947 ;; *************** function ___ftpack *****************
 11948 ;; Defined at:
 11949 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\float.c"
 11950 ;; Parameters:    Size  Location     Type
 11951 ;;  arg             3    0[BANK0 ] unsigned um
 11952 ;;  exp             1    3[BANK0 ] unsigned char 
 11953 ;;  sign            1    4[BANK0 ] unsigned char 
 11954 ;; Auto vars:     Size  Location     Type
 11955 ;;		None
 11956 ;; Return value:  Size  Location     Type
 11957 ;;                  3    0[BANK0 ] float 
 11958 ;; Registers used:
 11959 ;;		wreg, status,2, status,0
 11960 ;; Tracked objects:
 11961 ;;		On entry : 0/0
 11962 ;;		On exit  : 0/0
 11963 ;;		Unchanged: 0/0
 11964 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11965 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11966 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11967 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11968 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11969 ;;Total ram usage:        8 bytes
 11970 ;; Hardware stack levels used:    1
 11971 ;; Hardware stack levels required when called:    7
 11972 ;; This function calls:
 11973 ;;		Nothing
 11974 ;; This function is called by:
 11975 ;;		___awtoft
 11976 ;;		___ftadd
 11977 ;;		___ftdiv
 11978 ;;		___ftmul
 11979 ;;		___lbtoft
 11980 ;;		___lltoft
 11981 ;;		___lwtoft
 11982 ;; This function uses a non-reentrant model
 11983 ;;
 11984                           
 11985                           
 11986                           ;psect for function ___ftpack
 11987  1275                     ___ftpack:	
 11988                           
 11989                           ;incstack = 0
 11990                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
 11991  1275  0020               	movlb	0	; select bank0
 11992  1276  0823               	movf	___ftpack@exp,w
 11993  1277  1903               	btfsc	3,2
 11994  1278  2A7E               	goto	l4130
 11995  1279  0822               	movf	___ftpack@arg+2,w
 11996  127A  0421               	iorwf	___ftpack@arg+1,w
 11997  127B  0420               	iorwf	___ftpack@arg,w
 11998  127C  1D03               	skipz
 11999  127D  2A8F               	goto	l4136
 12000  127E                     l4130:	
 12001  127E  3000               	movlw	0
 12002  127F  00A0               	movwf	?___ftpack
 12003  1280  3000               	movlw	0
 12004  1281  00A1               	movwf	?___ftpack+1
 12005  1282  3000               	movlw	0
 12006  1283  00A2               	movwf	?___ftpack+2
 12007  1284  0008               	return
 12008  1285                     l4134:	
 12009  1285  3001               	movlw	1
 12010  1286  00A5               	movwf	??___ftpack
 12011  1287  0825               	movf	??___ftpack,w
 12012  1288  07A3               	addwf	___ftpack@exp,f
 12013  1289  3001               	movlw	1
 12014  128A                     u4675:	
 12015  128A  36A2               	lsrf	___ftpack@arg+2,f
 12016  128B  0CA1               	rrf	___ftpack@arg+1,f
 12017  128C  0CA0               	rrf	___ftpack@arg,f
 12018  128D  0B89               	decfsz	9,f
 12019  128E  2A8A               	goto	u4675
 12020  128F                     l4136:	
 12021  128F  30FE               	movlw	254
 12022  1290  0522               	andwf	___ftpack@arg+2,w
 12023  1291  1903               	btfsc	3,2
 12024  1292  2AA8               	goto	l698
 12025  1293  2A85               	goto	l4134
 12026  1294                     l4138:	
 12027  1294  3001               	movlw	1
 12028  1295  00A5               	movwf	??___ftpack
 12029  1296  0825               	movf	??___ftpack,w
 12030  1297  07A3               	addwf	___ftpack@exp,f
 12031  1298  3001               	movlw	1
 12032  1299  07A0               	addwf	___ftpack@arg,f
 12033  129A  3000               	movlw	0
 12034  129B  1803               	skipnc
 12035  129C  3001               	movlw	1
 12036  129D  07A1               	addwf	___ftpack@arg+1,f
 12037  129E  3000               	movlw	0
 12038  129F  1803               	skipnc
 12039  12A0  3001               	movlw	1
 12040  12A1  07A2               	addwf	___ftpack@arg+2,f
 12041  12A2  3001               	movlw	1
 12042  12A3                     u4695:	
 12043  12A3  36A2               	lsrf	___ftpack@arg+2,f
 12044  12A4  0CA1               	rrf	___ftpack@arg+1,f
 12045  12A5  0CA0               	rrf	___ftpack@arg,f
 12046  12A6  0B89               	decfsz	9,f
 12047  12A7  2AA3               	goto	u4695
 12048  12A8                     l698:	
 12049  12A8  30FF               	movlw	255
 12050  12A9  0522               	andwf	___ftpack@arg+2,w
 12051  12AA  1903               	btfsc	3,2
 12052  12AB  2AB5               	goto	l4146
 12053  12AC  2A94               	goto	l4138
 12054  12AD                     l4144:	
 12055  12AD  3001               	movlw	1
 12056  12AE  02A3               	subwf	___ftpack@exp,f
 12057  12AF  3001               	movlw	1
 12058  12B0                     u4715:	
 12059  12B0  35A0               	lslf	___ftpack@arg,f
 12060  12B1  0DA1               	rlf	___ftpack@arg+1,f
 12061  12B2  0DA2               	rlf	___ftpack@arg+2,f
 12062  12B3  0B89               	decfsz	9,f
 12063  12B4  2AB0               	goto	u4715
 12064  12B5                     l4146:	
 12065  12B5  1BA1               	btfsc	___ftpack@arg+1,7
 12066  12B6  2ABB               	goto	l705
 12067  12B7  3002               	movlw	2
 12068  12B8  0223               	subwf	___ftpack@exp,w
 12069  12B9  1803               	skipnc
 12070  12BA  2AAD               	goto	l4144
 12071  12BB                     l705:	
 12072  12BB  1823               	btfsc	___ftpack@exp,0
 12073  12BC  2AC3               	goto	l706
 12074  12BD  30FF               	movlw	255
 12075  12BE  05A0               	andwf	___ftpack@arg,f
 12076  12BF  307F               	movlw	127
 12077  12C0  05A1               	andwf	___ftpack@arg+1,f
 12078  12C1  30FF               	movlw	255
 12079  12C2  05A2               	andwf	___ftpack@arg+2,f
 12080  12C3                     l706:	
 12081  12C3  1003               	clrc
 12082  12C4  0CA3               	rrf	___ftpack@exp,f
 12083  12C5  0823               	movf	___ftpack@exp,w
 12084  12C6  00A5               	movwf	??___ftpack
 12085  12C7  01A6               	clrf	??___ftpack+1
 12086  12C8  01A7               	clrf	??___ftpack+2
 12087  12C9  3010               	movlw	16
 12088  12CA                     u4755:	
 12089  12CA  35A5               	lslf	??___ftpack,f
 12090  12CB  0DA6               	rlf	??___ftpack+1,f
 12091  12CC  0DA7               	rlf	??___ftpack+2,f
 12092  12CD  0B89               	decfsz	9,f
 12093  12CE  2ACA               	goto	u4755
 12094  12CF  0825               	movf	??___ftpack,w
 12095  12D0  04A0               	iorwf	___ftpack@arg,f
 12096  12D1  0826               	movf	??___ftpack+1,w
 12097  12D2  04A1               	iorwf	___ftpack@arg+1,f
 12098  12D3  0827               	movf	??___ftpack+2,w
 12099  12D4  04A2               	iorwf	___ftpack@arg+2,f
 12100  12D5  0824               	movf	___ftpack@sign,w
 12101  12D6  1903               	btfsc	3,2
 12102  12D7  0008               	return
 12103  12D8  17A2               	bsf	___ftpack@arg+2,7
 12104  12D9  0008               	return
 12105  12DA                     __end_of___ftpack:	
 12106                           
 12107                           	psect	intentry
 12108  0004                     __pintentry:	
 12109 ;; *************** function _ISR *****************
 12110 ;; Defined at:
 12111 ;;		line 13 in file "main.c"
 12112 ;; Parameters:    Size  Location     Type
 12113 ;;		None
 12114 ;; Auto vars:     Size  Location     Type
 12115 ;;		None
 12116 ;; Return value:  Size  Location     Type
 12117 ;;                  1    wreg      void 
 12118 ;; Registers used:
 12119 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12120 ;; Tracked objects:
 12121 ;;		On entry : 0/0
 12122 ;;		On exit  : 0/0
 12123 ;;		Unchanged: 0/0
 12124 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12125 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12126 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12127 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12128 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12129 ;;Total ram usage:        0 bytes
 12130 ;; Hardware stack levels used:    1
 12131 ;; Hardware stack levels required when called:    6
 12132 ;; This function calls:
 12133 ;;		_nrf24l01ISR
 12134 ;; This function is called by:
 12135 ;;		Interrupt level 1
 12136 ;; This function uses a non-reentrant model
 12137 ;;
 12138                           
 12139  0004                     _ISR:	
 12140                           
 12141                           ;incstack = 0
 12142  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
 12143                           
 12144                           ; Regs used in _ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 12145  0005  3180               	pagesel	$
 12146                           
 12147                           ;main.c: 15: if (PIR0bits.INTF){
 12148  0006  0020               	movlb	0	; select bank0
 12149  0007  1C10               	btfss	16,0	;volatile
 12150  0008  280D               	goto	i1l153
 12151                           
 12152                           ;main.c: 16: nrf24l01ISR();
 12153  0009  3191  21D5         	fcall	_nrf24l01ISR
 12154                           
 12155                           ;main.c: 17: PIR0bits.INTF = 0;
 12156  000B  0020               	movlb	0	; select bank0
 12157  000C  1010               	bcf	16,0	;volatile
 12158  000D                     i1l153:	
 12159  000D  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
 12160  000E  0009               	retfie
 12161  000F                     __end_of_ISR:	
 12162                           
 12163                           	psect	text45
 12164  11D5                     __ptext45:	
 12165 ;; *************** function _nrf24l01ISR *****************
 12166 ;; Defined at:
 12167 ;;		line 237 in file "nrf24l01.c"
 12168 ;; Parameters:    Size  Location     Type
 12169 ;;		None
 12170 ;; Auto vars:     Size  Location     Type
 12171 ;;		None
 12172 ;; Return value:  Size  Location     Type
 12173 ;;                  1    wreg      void 
 12174 ;; Registers used:
 12175 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12176 ;; Tracked objects:
 12177 ;;		On entry : 0/0
 12178 ;;		On exit  : 0/0
 12179 ;;		Unchanged: 0/0
 12180 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12181 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12182 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12183 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12184 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12185 ;;Total ram usage:        1 bytes
 12186 ;; Hardware stack levels used:    1
 12187 ;; Hardware stack levels required when called:    5
 12188 ;; This function calls:
 12189 ;;		i1_nrf24l01Send
 12190 ;;		i1_nrf24l01Service
 12191 ;; This function is called by:
 12192 ;;		_ISR
 12193 ;; This function uses a non-reentrant model
 12194 ;;
 12195                           
 12196                           
 12197                           ;psect for function _nrf24l01ISR
 12198  11D5                     _nrf24l01ISR:	
 12199                           
 12200                           ;nrf24l01.c: 239: status.statusRegister.byte = nrf24l01Send((unsigned) 0b00000000 | (uns
      +                          igned) 0x07, 0);
 12201                           
 12202                           ;incstack = 0
 12203                           ; Regs used in _nrf24l01ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 12204  11D5  01F1               	clrf	i1nrf24l01Send@data
 12205  11D6  3007               	movlw	7
 12206  11D7  319D  2555  3191   	fcall	i1_nrf24l01Send
 12207  11DA  00FB               	movwf	??_nrf24l01ISR
 12208  11DB  087B               	movf	??_nrf24l01ISR,w
 12209  11DC  0021               	movlb	1	; select bank1
 12210  11DD  00E9               	movwf	(_status^(0+128)+1)	;volatile
 12211                           
 12212                           ;nrf24l01.c: 241: if (status.statusRegister.TX_DS){
 12213  11DE  1EE9               	btfss	(_status^(0+128)+1),5	;volatile
 12214  11DF  29FB               	goto	i1l268
 12215                           
 12216                           ;nrf24l01.c: 243: if (status.TX == statuses.TX.Sending){
 12217  11E0  3078               	movlw	low ((_statuses+2)| (0+32768))
 12218  11E1  0084               	movwf	4
 12219  11E2  3098               	movlw	high ((_statuses+2)| (0+32768))
 12220  11E3  0085               	movwf	5
 12221  11E4  0800               	movf	0,w	;code access
 12222  11E5  00FB               	movwf	??_nrf24l01ISR
 12223  11E6  0868               	movf	_status^(0+128),w	;volatile
 12224  11E7  390F               	andlw	15
 12225  11E8  067B               	xorwf	??_nrf24l01ISR,w
 12226  11E9  1D03               	skipz
 12227  11EA  29FA               	goto	i1l269
 12228                           
 12229                           ;nrf24l01.c: 244: status.TX = statuses.TX.Sent;
 12230  11EB  3079               	movlw	low ((_statuses+3)| (0+32768))
 12231  11EC  0084               	movwf	4
 12232  11ED  3098               	movlw	high ((_statuses+3)| (0+32768))
 12233  11EE  0085               	movwf	5
 12234  11EF  0800               	movf	0,w	;code access
 12235  11F0  00FB               	movwf	??_nrf24l01ISR
 12236  11F1  0868               	movf	_status^(0+128),w	;volatile
 12237  11F2  067B               	xorwf	??_nrf24l01ISR,w
 12238  11F3  39F0               	andlw	-16
 12239  11F4  067B               	xorwf	??_nrf24l01ISR,w
 12240  11F5  00E8               	movwf	_status^(0+128)	;volatile
 12241                           
 12242                           ;nrf24l01.c: 245: nrf24l01Service();
 12243  11F6  3189  21D6  3191   	fcall	i1_nrf24l01Service
 12244                           
 12245                           ;nrf24l01.c: 246: }
 12246  11F9  29FB               	goto	i1l268
 12247  11FA                     i1l269:	
 12248                           
 12249                           ;nrf24l01.c: 248: else{;nrf24l01.c: 249: status.statusRegister.TX_DS = 0;
 12250  11FA  12E9               	bcf	(_status^(0+128)+1),5	;volatile
 12251  11FB                     i1l268:	
 12252                           
 12253                           ;nrf24l01.c: 250: };nrf24l01.c: 251: };nrf24l01.c: 254: if (status.statusRegister.RX_DR)
      +                          {
 12254  11FB  0021               	movlb	1	; select bank1
 12255  11FC  1F69               	btfss	(_status^(0+128)+1),6	;volatile
 12256  11FD  2A1A               	goto	i1l5466
 12257                           
 12258                           ;nrf24l01.c: 255: if (status.RX == statuses.RX.Idle){
 12259  11FE  307B               	movlw	low ((_statuses+5)| (0+32768))
 12260  11FF  0084               	movwf	4
 12261  1200  3098               	movlw	high ((_statuses+5)| (0+32768))
 12262  1201  0085               	movwf	5
 12263  1202  0800               	movf	0,w	;code access
 12264  1203  00FB               	movwf	??_nrf24l01ISR
 12265  1204  0E68               	swapf	_status^(0+128),w	;volatile
 12266  1205  390F               	andlw	15
 12267  1206  067B               	xorwf	??_nrf24l01ISR,w
 12268  1207  1D03               	skipz
 12269  1208  2A19               	goto	i1l272
 12270                           
 12271                           ;nrf24l01.c: 256: status.RX = statuses.RX.Pending;
 12272  1209  307C               	movlw	low ((_statuses+6)| (0+32768))
 12273  120A  0084               	movwf	4
 12274  120B  3098               	movlw	high ((_statuses+6)| (0+32768))
 12275  120C  0085               	movwf	5
 12276  120D  0800               	movf	0,w	;code access
 12277  120E  00FB               	movwf	??_nrf24l01ISR
 12278  120F  0EFB               	swapf	??_nrf24l01ISR,f
 12279  1210  0868               	movf	_status^(0+128),w	;volatile
 12280  1211  067B               	xorwf	??_nrf24l01ISR,w
 12281  1212  390F               	andlw	-241
 12282  1213  067B               	xorwf	??_nrf24l01ISR,w
 12283  1214  00E8               	movwf	_status^(0+128)	;volatile
 12284                           
 12285                           ;nrf24l01.c: 257: nrf24l01Service();
 12286  1215  3189  21D6  3191   	fcall	i1_nrf24l01Service
 12287                           
 12288                           ;nrf24l01.c: 258: }
 12289  1218  2A1A               	goto	i1l5466
 12290  1219                     i1l272:	
 12291                           
 12292                           ;nrf24l01.c: 260: else{;nrf24l01.c: 261: status.statusRegister.RX_DR = 0;
 12293  1219  1369               	bcf	(_status^(0+128)+1),6	;volatile
 12294  121A                     i1l5466:	
 12295                           
 12296                           ;nrf24l01.c: 262: };nrf24l01.c: 263: };nrf24l01.c: 266: nrf24l01Send((unsigned) 0b001000
      +                          00 | (unsigned) 0x07, status.statusRegister.byte);
 12297  121A  0021               	movlb	1	; select bank1
 12298  121B  0869               	movf	(_status^(0+128)+1),w	;volatile
 12299  121C  00FB               	movwf	??_nrf24l01ISR
 12300  121D  087B               	movf	??_nrf24l01ISR,w
 12301  121E  00F1               	movwf	i1nrf24l01Send@data
 12302  121F  3027               	movlw	39
 12303  1220  319D  2555         	fcall	i1_nrf24l01Send
 12304  1222  0008               	return
 12305  1223                     __end_of_nrf24l01ISR:	
 12306                           
 12307                           	psect	text46
 12308  09D6                     __ptext46:	
 12309 ;; *************** function i1_nrf24l01Service *****************
 12310 ;; Defined at:
 12311 ;;		line 270 in file "nrf24l01.c"
 12312 ;; Parameters:    Size  Location     Type
 12313 ;;		None
 12314 ;; Auto vars:     Size  Location     Type
 12315 ;;  nrf24l01Serv    1   10[COMMON] unsigned char 
 12316 ;;  nrf24l01Serv    1    9[COMMON] unsigned char 
 12317 ;; Return value:  Size  Location     Type
 12318 ;;                  1    wreg      void 
 12319 ;; Registers used:
 12320 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12321 ;; Tracked objects:
 12322 ;;		On entry : 0/0
 12323 ;;		On exit  : 0/0
 12324 ;;		Unchanged: 0/0
 12325 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12326 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12327 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12328 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12329 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12330 ;;Total ram usage:        4 bytes
 12331 ;; Hardware stack levels used:    1
 12332 ;; Hardware stack levels required when called:    4
 12333 ;; This function calls:
 12334 ;;		_enableInterrupts
 12335 ;;		_nrf24l01CEHigh
 12336 ;;		_nrf24l01CELow
 12337 ;;		_nrf24l01SPIEnd
 12338 ;;		_nrf24l01SPISend
 12339 ;;		_nrf24l01SPIStart
 12340 ;;		i1_memset
 12341 ;;		i1_nrf24l01Send
 12342 ;;		i1_nrf24l01SetRXMode
 12343 ;;		i1_strlen
 12344 ;; This function is called by:
 12345 ;;		_nrf24l01ISR
 12346 ;; This function uses a non-reentrant model
 12347 ;;
 12348                           
 12349                           
 12350                           ;psect for function i1_nrf24l01Service
 12351  09D6                     i1_nrf24l01Service:	
 12352                           
 12353                           ;nrf24l01.c: 272: unsigned char i;;nrf24l01.c: 274: if (status.TX == statuses.TX.Ready){
 12354                           
 12355                           ;incstack = 0
 12356                           ; Regs used in i1_nrf24l01Service: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 12357  09D6  3077               	movlw	low ((_statuses+1)| (0+32768))
 12358  09D7  0084               	movwf	4
 12359  09D8  3098               	movlw	high ((_statuses+1)| (0+32768))
 12360  09D9  0085               	movwf	5
 12361  09DA  0800               	movf	0,w	;code access
 12362  09DB  00F7               	movwf	??i1_nrf24l01Service
 12363  09DC  0021               	movlb	1	; select bank1
 12364  09DD  0868               	movf	_status^(0+128),w	;volatile
 12365  09DE  390F               	andlw	15
 12366  09DF  0677               	xorwf	??i1_nrf24l01Service,w
 12367  09E0  1D03               	skipz
 12368  09E1  2A43               	goto	i1l5398
 12369                           
 12370                           ;nrf24l01.c: 277: enableInterrupts(0);
 12371  09E2  3000               	movlw	0
 12372  09E3  319C  24F4  3189   	fcall	_enableInterrupts
 12373                           
 12374                           ;nrf24l01.c: 280: nrf24l01SetRXMode(0);
 12375  09E6  3000               	movlw	0
 12376  09E7  3190  2011  3189   	fcall	i1_nrf24l01SetRXMode
 12377                           
 12378                           ;nrf24l01.c: 283: nrf24l01SPIStart();
 12379  09EA  3190  2000  3189   	fcall	_nrf24l01SPIStart
 12380                           
 12381                           ;nrf24l01.c: 286: nrf24l01SPISend((unsigned) 0b10110000);
 12382  09ED  30B0               	movlw	176
 12383  09EE  3187  27F0  3189   	fcall	_nrf24l01SPISend
 12384                           
 12385                           ;nrf24l01.c: 288: nrf24l01SPISend(TXPacket->packetData.byte);
 12386  09F1  0021               	movlb	1	; select bank1
 12387  09F2  086A               	movf	_TXPacket^(0+128),w
 12388  09F3  0086               	movwf	6
 12389  09F4  3001               	movlw	1	; select bank2/3
 12390  09F5  0087               	movwf	7
 12391  09F6  0801               	movf	1,w
 12392  09F7  3187  27F0  3189   	fcall	_nrf24l01SPISend
 12393                           
 12394                           ;nrf24l01.c: 291: for (i = 0; (i < strlen(TXPacket->Message)) && (i < 31); i++) {
 12395  09FA  01FA               	clrf	i1nrf24l01Service@i
 12396  09FB  2A0D               	goto	i1l5380
 12397  09FC                     i1l5376:	
 12398                           
 12399                           ;nrf24l01.c: 292: nrf24l01SPISend(TXPacket->Message[i]);
 12400  09FC  087A               	movf	i1nrf24l01Service@i,w
 12401  09FD  3E01               	addlw	1
 12402  09FE  0021               	movlb	1	; select bank1
 12403  09FF  076A               	addwf	_TXPacket^(0+128),w
 12404  0A00  00F7               	movwf	??i1_nrf24l01Service
 12405  0A01  0877               	movf	??i1_nrf24l01Service,w
 12406  0A02  0086               	movwf	6
 12407  0A03  3001               	movlw	1	; select bank2/3
 12408  0A04  0087               	movwf	7
 12409  0A05  0801               	movf	1,w
 12410  0A06  3187  27F0  3189   	fcall	_nrf24l01SPISend
 12411  0A09  3001               	movlw	1
 12412  0A0A  00F7               	movwf	??i1_nrf24l01Service
 12413  0A0B  0877               	movf	??i1_nrf24l01Service,w
 12414  0A0C  07FA               	addwf	i1nrf24l01Service@i,f
 12415  0A0D                     i1l5380:	
 12416  0A0D  0021               	movlb	1	; select bank1
 12417  0A0E  086A               	movf	_TXPacket^(0+128),w
 12418  0A0F  3E01               	addlw	1
 12419  0A10  00F0               	movwf	i1strlen@s
 12420  0A11  39FF               	andlw	255
 12421  0A12  1D03               	skipz
 12422  0A13  3001               	movlw	1
 12423  0A14  00F1               	movwf	i1strlen@s+1
 12424  0A15  319D  25FB  3189   	fcall	i1_strlen
 12425  0A18  087A               	movf	i1nrf24l01Service@i,w
 12426  0A19  00F7               	movwf	??i1_nrf24l01Service
 12427  0A1A  01F8               	clrf	??i1_nrf24l01Service+1
 12428  0A1B  0871               	movf	?i1_strlen+1,w
 12429  0A1C  0278               	subwf	??i1_nrf24l01Service+1,w
 12430  0A1D  1D03               	skipz
 12431  0A1E  2A21               	goto	u676_25
 12432  0A1F  0870               	movf	?i1_strlen,w
 12433  0A20  0277               	subwf	??i1_nrf24l01Service,w
 12434  0A21                     u676_25:	
 12435  0A21  1803               	skipnc
 12436  0A22  2A27               	goto	i1l5384
 12437  0A23  301F               	movlw	31
 12438  0A24  027A               	subwf	i1nrf24l01Service@i,w
 12439  0A25  1C03               	skipc
 12440  0A26  29FC               	goto	i1l5376
 12441  0A27                     i1l5384:	
 12442                           
 12443                           ;nrf24l01.c: 293: };nrf24l01.c: 296: nrf24l01SPIEnd();
 12444  0A27  319C  24ED  3189   	fcall	_nrf24l01SPIEnd
 12445                           
 12446                           ;nrf24l01.c: 299: status.TX = statuses.TX.Sending;
 12447  0A2A  3078               	movlw	low ((_statuses+2)| (0+32768))
 12448  0A2B  0084               	movwf	4
 12449  0A2C  3098               	movlw	high ((_statuses+2)| (0+32768))
 12450  0A2D  0085               	movwf	5
 12451  0A2E  0800               	movf	0,w	;code access
 12452  0A2F  00F7               	movwf	??i1_nrf24l01Service
 12453  0A30  0021               	movlb	1	; select bank1
 12454  0A31  0868               	movf	_status^(0+128),w	;volatile
 12455  0A32  0677               	xorwf	??i1_nrf24l01Service,w
 12456  0A33  39F0               	andlw	-16
 12457  0A34  0677               	xorwf	??i1_nrf24l01Service,w
 12458  0A35  00E8               	movwf	_status^(0+128)	;volatile
 12459                           
 12460                           ;nrf24l01.c: 302: enableInterrupts(1);
 12461  0A36  3001               	movlw	1
 12462  0A37  319C  24F4  3189   	fcall	_enableInterrupts
 12463                           
 12464                           ;nrf24l01.c: 305: nrf24l01CEHigh();
 12465  0A3A  319C  24E1  3189   	fcall	_nrf24l01CEHigh
 12466                           
 12467                           ;nrf24l01.c: 306: _delay((unsigned long)((12)*(32000000/4000000.0)));
 12468  0A3D  3020               	movlw	32
 12469  0A3E                     u702_27:	
 12470  0A3E  0B89               	decfsz	9,f
 12471  0A3F  2A3E               	goto	u702_27
 12472                           
 12473                           ;nrf24l01.c: 307: nrf24l01CELow();
 12474  0A40  319C  24E4  3189   	fcall	_nrf24l01CELow
 12475  0A43                     i1l5398:	
 12476                           
 12477                           ;nrf24l01.c: 312: };nrf24l01.c: 314: if (status.TX == statuses.TX.Sent){
 12478  0A43  3079               	movlw	low ((_statuses+3)| (0+32768))
 12479  0A44  0084               	movwf	4
 12480  0A45  3098               	movlw	high ((_statuses+3)| (0+32768))
 12481  0A46  0085               	movwf	5
 12482  0A47  0800               	movf	0,w	;code access
 12483  0A48  00F7               	movwf	??i1_nrf24l01Service
 12484  0A49  0021               	movlb	1	; select bank1
 12485  0A4A  0868               	movf	_status^(0+128),w	;volatile
 12486  0A4B  390F               	andlw	15
 12487  0A4C  0677               	xorwf	??i1_nrf24l01Service,w
 12488  0A4D  1D03               	skipz
 12489  0A4E  2A64               	goto	i1l284
 12490                           
 12491                           ;nrf24l01.c: 317: if (TXPacket->packetData.ACKRequest){
 12492  0A4F  086A               	movf	_TXPacket^(0+128),w
 12493  0A50  0086               	movwf	6
 12494  0A51  3001               	movlw	1	; select bank2/3
 12495  0A52  0087               	movwf	7
 12496  0A53  1D01               	btfss	1,2
 12497  0A54  2A59               	goto	i1l5404
 12498                           
 12499                           ;nrf24l01.c: 318: status.TX = statuses.TX.PendingACK;
 12500  0A55  307A               	movlw	low ((_statuses+4)| (0+32768))
 12501  0A56  0084               	movwf	4
 12502  0A57  3098               	movlw	high ((_statuses+4)| (0+32768))
 12503  0A58  2A5C               	goto	L9
 12504  0A59                     i1l5404:	
 12505                           ;nrf24l01.c: 319: }
 12506                           
 12507                           
 12508                           ;nrf24l01.c: 322: else{;nrf24l01.c: 323: status.TX = statuses.TX.Idle;
 12509  0A59  3076               	movlw	low (_statuses| (0+32768))
 12510  0A5A  0084               	movwf	4
 12511  0A5B  3098               	movlw	high (_statuses| (0+32768))
 12512  0A5C                     L9:	
 12513  0A5C  0085               	movwf	5
 12514  0A5D  0800               	movf	0,w	;code access
 12515  0A5E  00F7               	movwf	??i1_nrf24l01Service
 12516  0A5F  0868               	movf	_status^(0+128),w	;volatile
 12517  0A60  0677               	xorwf	??i1_nrf24l01Service,w
 12518  0A61  39F0               	andlw	-16
 12519  0A62  0677               	xorwf	??i1_nrf24l01Service,w
 12520  0A63  00E8               	movwf	_status^(0+128)	;volatile
 12521  0A64                     i1l284:	
 12522                           
 12523                           ;nrf24l01.c: 324: };nrf24l01.c: 325: };nrf24l01.c: 328: if (status.TX == statuses.TX.Pen
      +                          dingACK){
 12524  0A64  307A               	movlw	low ((_statuses+4)| (0+32768))
 12525  0A65  0084               	movwf	4
 12526  0A66  3098               	movlw	high ((_statuses+4)| (0+32768))
 12527  0A67  0085               	movwf	5
 12528  0A68  0800               	movf	0,w	;code access
 12529  0A69  00F7               	movwf	??i1_nrf24l01Service
 12530  0A6A  0868               	movf	_status^(0+128),w	;volatile
 12531  0A6B  390F               	andlw	15
 12532  0A6C  0677               	xorwf	??i1_nrf24l01Service,w
 12533  0A6D  1D03               	skipz
 12534  0A6E  2A7F               	goto	i1l5410
 12535                           
 12536                           ;nrf24l01.c: 331: nrf24l01SetRXMode(1);
 12537  0A6F  3001               	movlw	1
 12538  0A70  3190  2011  3189   	fcall	i1_nrf24l01SetRXMode
 12539                           
 12540                           ;nrf24l01.c: 334: status.TX = statuses.TX.Idle;
 12541  0A73  3076               	movlw	low (_statuses| (0+32768))
 12542  0A74  0084               	movwf	4
 12543  0A75  3098               	movlw	high (_statuses| (0+32768))
 12544  0A76  0085               	movwf	5
 12545  0A77  0800               	movf	0,w	;code access
 12546  0A78  00F7               	movwf	??i1_nrf24l01Service
 12547  0A79  0021               	movlb	1	; select bank1
 12548  0A7A  0868               	movf	_status^(0+128),w	;volatile
 12549  0A7B  0677               	xorwf	??i1_nrf24l01Service,w
 12550  0A7C  39F0               	andlw	-16
 12551  0A7D  0677               	xorwf	??i1_nrf24l01Service,w
 12552  0A7E  00E8               	movwf	_status^(0+128)	;volatile
 12553  0A7F                     i1l5410:	
 12554                           
 12555                           ;nrf24l01.c: 335: };nrf24l01.c: 337: if (status.RX == statuses.RX.Pending){
 12556  0A7F  307C               	movlw	low ((_statuses+6)| (0+32768))
 12557  0A80  0084               	movwf	4
 12558  0A81  3098               	movlw	high ((_statuses+6)| (0+32768))
 12559  0A82  0085               	movwf	5
 12560  0A83  0800               	movf	0,w	;code access
 12561  0A84  00F7               	movwf	??i1_nrf24l01Service
 12562  0A85  0E68               	swapf	_status^(0+128),w	;volatile
 12563  0A86  390F               	andlw	15
 12564  0A87  0677               	xorwf	??i1_nrf24l01Service,w
 12565  0A88  1D03               	skipz
 12566  0A89  0008               	return
 12567                           
 12568                           ;nrf24l01.c: 340: memset(RXPacket.Message, 0 ,sizeof(RXPacket.Message));
 12569  0A8A  3000               	movlw	0
 12570  0A8B  00F0               	movwf	i1memset@c
 12571  0A8C  00F1               	movwf	i1memset@c+1
 12572  0A8D  3020               	movlw	32
 12573  0A8E  00F2               	movwf	i1memset@n
 12574  0A8F  3000               	movlw	0
 12575  0A90  00F3               	movwf	i1memset@n+1
 12576  0A91  30C3               	movlw	(low ((_RXPacket| (0+256)+1)))& (0+255)
 12577  0A92  319D  253A  3189   	fcall	i1_memset
 12578                           
 12579                           ;nrf24l01.c: 341: RXPacket.packetData.byte = 0x00;
 12580  0A95  0023               	movlb	3	; select bank3
 12581  0A96  01C2               	clrf	_RXPacket^(0+384)
 12582                           
 12583                           ;nrf24l01.c: 344: unsigned char width = nrf24l01Send((unsigned) 0b01100000, 0);
 12584  0A97  01F1               	clrf	i1nrf24l01Send@data
 12585  0A98  3060               	movlw	96
 12586  0A99  319D  2555  3189   	fcall	i1_nrf24l01Send
 12587  0A9C  00F7               	movwf	??i1_nrf24l01Service
 12588  0A9D  0877               	movf	??i1_nrf24l01Service,w
 12589  0A9E  00F9               	movwf	i1nrf24l01Service@width
 12590                           
 12591                           ;nrf24l01.c: 347: nrf24l01CELow();
 12592  0A9F  319C  24E4  3189   	fcall	_nrf24l01CELow
 12593                           
 12594                           ;nrf24l01.c: 350: nrf24l01SPIStart();
 12595  0AA2  3190  2000  3189   	fcall	_nrf24l01SPIStart
 12596                           
 12597                           ;nrf24l01.c: 353: nrf24l01SPISend((unsigned) 0b01100001);
 12598  0AA5  3061               	movlw	97
 12599  0AA6  3187  27F0  3189   	fcall	_nrf24l01SPISend
 12600                           
 12601                           ;nrf24l01.c: 356: RXPacket.packetData.byte = nrf24l01SPISend(0);
 12602  0AA9  3000               	movlw	0
 12603  0AAA  3187  27F0  3189   	fcall	_nrf24l01SPISend
 12604  0AAD  00F7               	movwf	??i1_nrf24l01Service
 12605  0AAE  0877               	movf	??i1_nrf24l01Service,w
 12606  0AAF  0023               	movlb	3	; select bank3
 12607  0AB0  00C2               	movwf	_RXPacket^(0+384)
 12608                           
 12609                           ;nrf24l01.c: 357: width--;
 12610  0AB1  3001               	movlw	1
 12611  0AB2  02F9               	subwf	i1nrf24l01Service@width,f
 12612                           
 12613                           ;nrf24l01.c: 359: for (i = 0; (i < width) && (i < sizeof(RXPacket.Message)); i++){
 12614  0AB3  01FA               	clrf	i1nrf24l01Service@i
 12615  0AB4  2AC5               	goto	i1l5434
 12616  0AB5                     i1l5430:	
 12617                           
 12618                           ;nrf24l01.c: 361: RXPacket.Message[i] = nrf24l01SPISend(0);
 12619  0AB5  3000               	movlw	0
 12620  0AB6  3187  27F0  3189   	fcall	_nrf24l01SPISend
 12621  0AB9  00F7               	movwf	??i1_nrf24l01Service
 12622  0ABA  087A               	movf	i1nrf24l01Service@i,w
 12623  0ABB  3EC3               	addlw	(low ((_RXPacket| (0+256)+1)))& (0+255)
 12624  0ABC  0086               	movwf	6
 12625  0ABD  3001               	movlw	1	; select bank3/4
 12626  0ABE  0087               	movwf	7
 12627  0ABF  0877               	movf	??i1_nrf24l01Service,w
 12628  0AC0  0081               	movwf	1
 12629  0AC1  3001               	movlw	1
 12630  0AC2  00F7               	movwf	??i1_nrf24l01Service
 12631  0AC3  0877               	movf	??i1_nrf24l01Service,w
 12632  0AC4  07FA               	addwf	i1nrf24l01Service@i,f
 12633  0AC5                     i1l5434:	
 12634  0AC5  0879               	movf	i1nrf24l01Service@width,w
 12635  0AC6  027A               	subwf	i1nrf24l01Service@i,w
 12636  0AC7  1803               	skipnc
 12637  0AC8  2ACD               	goto	i1l5438
 12638  0AC9  3020               	movlw	32
 12639  0ACA  027A               	subwf	i1nrf24l01Service@i,w
 12640  0ACB  1C03               	skipc
 12641  0ACC  2AB5               	goto	i1l5430
 12642  0ACD                     i1l5438:	
 12643                           
 12644                           ;nrf24l01.c: 362: };nrf24l01.c: 365: nrf24l01SPIEnd();
 12645  0ACD  319C  24ED  3189   	fcall	_nrf24l01SPIEnd
 12646                           
 12647                           ;nrf24l01.c: 368: nrf24l01CEHigh();
 12648  0AD0  319C  24E1  3189   	fcall	_nrf24l01CEHigh
 12649                           
 12650                           ;nrf24l01.c: 371: RXPacket.packetData.Pipe = status.statusRegister.RX_P_NO;
 12651  0AD3  0021               	movlb	1	; select bank1
 12652  0AD4  0C69               	rrf	(_status^(0+128)+1),w	;volatile
 12653  0AD5  3907               	andlw	7
 12654  0AD6  00F7               	movwf	??i1_nrf24l01Service
 12655  0AD7  0EF7               	swapf	??i1_nrf24l01Service,f
 12656  0AD8  0023               	movlb	3	; select bank3
 12657  0AD9  0842               	movf	_RXPacket^(0+384),w
 12658  0ADA  0677               	xorwf	??i1_nrf24l01Service,w
 12659  0ADB  398F               	andlw	-113
 12660  0ADC  0677               	xorwf	??i1_nrf24l01Service,w
 12661  0ADD  00C2               	movwf	_RXPacket^(0+384)
 12662                           
 12663                           ;nrf24l01.c: 374: RXPacket.packetData.RPD = nrf24l01Send((unsigned) 0b00000000 | (unsign
      +                          ed) 0x09, 0);
 12664  0ADE  01F1               	clrf	i1nrf24l01Send@data
 12665  0ADF  3009               	movlw	9
 12666  0AE0  319D  2555         	fcall	i1_nrf24l01Send
 12667  0AE2  00F7               	movwf	??i1_nrf24l01Service
 12668  0AE3  0023               	movlb	3	; select bank3
 12669  0AE4  0842               	movf	_RXPacket^(0+384),w
 12670  0AE5  0677               	xorwf	??i1_nrf24l01Service,w
 12671  0AE6  39FE               	andlw	-2
 12672  0AE7  0677               	xorwf	??i1_nrf24l01Service,w
 12673  0AE8  00C2               	movwf	_RXPacket^(0+384)
 12674                           
 12675                           ;nrf24l01.c: 376: status.RX = statuses.RX.Ready;
 12676  0AE9  307D               	movlw	low ((_statuses+7)| (0+32768))
 12677  0AEA  0084               	movwf	4
 12678  0AEB  3098               	movlw	high ((_statuses+7)| (0+32768))
 12679  0AEC  0085               	movwf	5
 12680  0AED  0800               	movf	0,w	;code access
 12681  0AEE  00F7               	movwf	??i1_nrf24l01Service
 12682  0AEF  0EF7               	swapf	??i1_nrf24l01Service,f
 12683  0AF0  0021               	movlb	1	; select bank1
 12684  0AF1  0868               	movf	_status^(0+128),w	;volatile
 12685  0AF2  0677               	xorwf	??i1_nrf24l01Service,w
 12686  0AF3  390F               	andlw	-241
 12687  0AF4  0677               	xorwf	??i1_nrf24l01Service,w
 12688  0AF5  00E8               	movwf	_status^(0+128)	;volatile
 12689  0AF6  0008               	return
 12690  0AF7                     __end_ofi1_nrf24l01Service:	
 12691                           
 12692                           	psect	text47
 12693  1DFB                     __ptext47:	
 12694 ;; *************** function i1_strlen *****************
 12695 ;; Defined at:
 12696 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\strlen.c"
 12697 ;; Parameters:    Size  Location     Type
 12698 ;;  s               2    0[COMMON] PTR const unsigned char 
 12699 ;;		 -> packet.Message(32), packet.Message(32), NULL(0), main@packet(33), 
 12700 ;;		 -> loop@packet(33), romDataMap(28), 
 12701 ;; Auto vars:     Size  Location     Type
 12702 ;;  strlen          2    4[COMMON] PTR const unsigned char 
 12703 ;;		 -> packet.Message(32), packet.Message(32), NULL(0), main@packet(33), 
 12704 ;;		 -> loop@packet(33), romDataMap(28), 
 12705 ;; Return value:  Size  Location     Type
 12706 ;;                  2    0[COMMON] unsigned int 
 12707 ;; Registers used:
 12708 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 12709 ;; Tracked objects:
 12710 ;;		On entry : 0/0
 12711 ;;		On exit  : 0/0
 12712 ;;		Unchanged: 0/0
 12713 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12714 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12715 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12716 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12717 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12718 ;;Total ram usage:        6 bytes
 12719 ;; Hardware stack levels used:    1
 12720 ;; This function calls:
 12721 ;;		Nothing
 12722 ;; This function is called by:
 12723 ;;		i1_nrf24l01Service
 12724 ;; This function uses a non-reentrant model
 12725 ;;
 12726                           
 12727                           
 12728                           ;psect for function i1_strlen
 12729  1DFB                     i1_strlen:	
 12730                           
 12731                           ;incstack = 0
 12732                           ; Regs used in i1_strlen: [wreg+fsr1l+fsr1h+status,2+status,0]
 12733  1DFB  0871               	movf	i1strlen@s+1,w
 12734  1DFC  00F5               	movwf	i1strlen@cp+1
 12735  1DFD  0870               	movf	i1strlen@s,w
 12736  1DFE  00F4               	movwf	i1strlen@cp
 12737  1DFF                     i1l3650:	
 12738  1DFF  0874               	movf	i1strlen@cp,w
 12739  1E00  0086               	movwf	6
 12740  1E01  0875               	movf	i1strlen@cp+1,w
 12741  1E02  0087               	movwf	7
 12742  1E03  0801               	movf	1,w
 12743  1E04  1903               	btfsc	3,2
 12744  1E05  2E0B               	goto	i1l3652
 12745  1E06  3001               	movlw	1
 12746  1E07  07F4               	addwf	i1strlen@cp,f
 12747  1E08  3000               	movlw	0
 12748  1E09  3DF5               	addwfc	i1strlen@cp+1,f
 12749  1E0A  2DFF               	goto	i1l3650
 12750  1E0B                     i1l3652:	
 12751  1E0B  0970               	comf	i1strlen@s,w
 12752  1E0C  00F2               	movwf	??i1_strlen
 12753  1E0D  0971               	comf	i1strlen@s+1,w
 12754  1E0E  00F3               	movwf	??i1_strlen+1
 12755  1E0F  0AF2               	incf	??i1_strlen,f
 12756  1E10  1903               	skipnz
 12757  1E11  0AF3               	incf	??i1_strlen+1,f
 12758  1E12  0874               	movf	i1strlen@cp,w
 12759  1E13  0772               	addwf	??i1_strlen,w
 12760  1E14  00F0               	movwf	?i1_strlen
 12761  1E15  0875               	movf	i1strlen@cp+1,w
 12762  1E16  3D73               	addwfc	??i1_strlen+1,w
 12763  1E17  00F1               	movwf	?i1_strlen+1
 12764  1E18  0008               	return
 12765  1E19                     __end_ofi1_strlen:	
 12766                           
 12767                           	psect	text48
 12768  1011                     __ptext48:	
 12769 ;; *************** function i1_nrf24l01SetRXMode *****************
 12770 ;; Defined at:
 12771 ;;		line 90 in file "nrf24l01.c"
 12772 ;; Parameters:    Size  Location     Type
 12773 ;;  rxMode          1    wreg     unsigned char 
 12774 ;; Auto vars:     Size  Location     Type
 12775 ;;  rxMode          1    6[COMMON] unsigned char 
 12776 ;;  nrf24l01SetR    1    5[COMMON] struct .
 12777 ;; Return value:  Size  Location     Type
 12778 ;;                  1    wreg      void 
 12779 ;; Registers used:
 12780 ;;		wreg, status,2, status,0, pclath, cstack
 12781 ;; Tracked objects:
 12782 ;;		On entry : 0/0
 12783 ;;		On exit  : 0/0
 12784 ;;		Unchanged: 0/0
 12785 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12786 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12787 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12788 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12789 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12790 ;;Total ram usage:        3 bytes
 12791 ;; Hardware stack levels used:    1
 12792 ;; Hardware stack levels required when called:    3
 12793 ;; This function calls:
 12794 ;;		_nrf24l01CEHigh
 12795 ;;		_nrf24l01CELow
 12796 ;;		i1_nrf24l01Send
 12797 ;; This function is called by:
 12798 ;;		i1_nrf24l01Service
 12799 ;; This function uses a non-reentrant model
 12800 ;;
 12801                           
 12802                           
 12803                           ;psect for function i1_nrf24l01SetRXMode
 12804  1011                     i1_nrf24l01SetRXMode:	
 12805                           
 12806                           ;incstack = 0
 12807                           ; Regs used in i1_nrf24l01SetRXMode: [wreg+status,2+status,0+pclath+cstack]
 12808                           ;i1nrf24l01SetRXMode@rxMode stored from wreg
 12809  1011  00F6               	movwf	i1nrf24l01SetRXMode@rxMode
 12810                           
 12811                           ;nrf24l01.c: 105: n_CONFIG_t config;;nrf24l01.c: 108: config.byte = nrf24l01Send((unsign
      +                          ed) 0b00000000 | (unsigned) 0x00, 0);
 12812  1012  01F1               	clrf	i1nrf24l01Send@data
 12813  1013  3000               	movlw	0
 12814  1014  319D  2555  3190   	fcall	i1_nrf24l01Send
 12815  1017  00F4               	movwf	??i1_nrf24l01SetRXMode
 12816  1018  0874               	movf	??i1_nrf24l01SetRXMode,w
 12817  1019  00F5               	movwf	i1nrf24l01SetRXMode@config
 12818                           
 12819                           ;nrf24l01.c: 111: if (config.PRIM_RX != rxMode){
 12820  101A  0875               	movf	i1nrf24l01SetRXMode@config,w
 12821  101B  3901               	andlw	1
 12822  101C  0676               	xorwf	i1nrf24l01SetRXMode@rxMode,w
 12823  101D  1903               	skipnz
 12824  101E  0008               	return
 12825                           
 12826                           ;nrf24l01.c: 114: nrf24l01CELow();
 12827  101F  319C  24E4  3190   	fcall	_nrf24l01CELow
 12828                           
 12829                           ;nrf24l01.c: 115: _delay((unsigned long)((200)*(32000000/4000000.0)));
 12830  1022  30E4               	movlw	228
 12831  1023                     u703_27:	
 12832  1023  3200               	nop2
 12833  1024  3200               	nop2
 12834  1025  0B89               	decfsz	9,f
 12835  1026  2823               	goto	u703_27
 12836  1027  3200               	nop2
 12837  1028  3200               	nop2
 12838                           
 12839                           ;nrf24l01.c: 118: config.PRIM_RX = rxMode;
 12840  1029  0876               	movf	i1nrf24l01SetRXMode@rxMode,w
 12841  102A  3901               	andlw	1
 12842  102B  1075               	bcf	i1nrf24l01SetRXMode@config,0
 12843  102C  1D03               	skipz
 12844  102D  1475               	bsf	i1nrf24l01SetRXMode@config,0
 12845                           
 12846                           ;nrf24l01.c: 119: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x00, config.byte);
 12847  102E  0875               	movf	i1nrf24l01SetRXMode@config,w
 12848  102F  00F4               	movwf	??i1_nrf24l01SetRXMode
 12849  1030  0874               	movf	??i1_nrf24l01SetRXMode,w
 12850  1031  00F1               	movwf	i1nrf24l01Send@data
 12851  1032  3020               	movlw	32
 12852  1033  319D  2555  3190   	fcall	i1_nrf24l01Send
 12853                           
 12854                           ;nrf24l01.c: 122: _delay((unsigned long)((200)*(32000000/4000000.0)));
 12855  1036  30E4               	movlw	228
 12856  1037                     u704_27:	
 12857  1037  3200               	nop2
 12858  1038  3200               	nop2
 12859  1039  0B89               	decfsz	9,f
 12860  103A  2837               	goto	u704_27
 12861  103B  3200               	nop2
 12862  103C  3200               	nop2
 12863                           
 12864                           ;nrf24l01.c: 125: if (rxMode){
 12865  103D  0876               	movf	i1nrf24l01SetRXMode@rxMode,w
 12866  103E  1903               	btfsc	3,2
 12867  103F  0008               	return
 12868                           
 12869                           ;nrf24l01.c: 126: nrf24l01CEHigh();
 12870  1040  319C  24E1  3190   	fcall	_nrf24l01CEHigh
 12871                           
 12872                           ;nrf24l01.c: 127: _delay((unsigned long)((200)*(32000000/4000000.0)));
 12873  1043  30E4               	movlw	228
 12874  1044                     u705_27:	
 12875  1044  3200               	nop2
 12876  1045  3200               	nop2
 12877  1046  0B89               	decfsz	9,f
 12878  1047  2844               	goto	u705_27
 12879  1048  3200               	nop2
 12880  1049  3200               	nop2
 12881  104A  0008               	return
 12882  104B                     __end_ofi1_nrf24l01SetRXMode:	
 12883                           
 12884                           	psect	text49
 12885  1D55                     __ptext49:	
 12886 ;; *************** function i1_nrf24l01Send *****************
 12887 ;; Defined at:
 12888 ;;		line 45 in file "nrf24l01.c"
 12889 ;; Parameters:    Size  Location     Type
 12890 ;;  command         1    wreg     unsigned char 
 12891 ;;  data            1    1[COMMON] unsigned char 
 12892 ;; Auto vars:     Size  Location     Type
 12893 ;;  command         1    3[COMMON] unsigned char 
 12894 ;; Return value:  Size  Location     Type
 12895 ;;                  1    wreg      unsigned char 
 12896 ;; Registers used:
 12897 ;;		wreg, status,2, status,0, pclath, cstack
 12898 ;; Tracked objects:
 12899 ;;		On entry : 0/0
 12900 ;;		On exit  : 0/0
 12901 ;;		Unchanged: 0/0
 12902 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12903 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12904 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12905 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12906 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12907 ;;Total ram usage:        3 bytes
 12908 ;; Hardware stack levels used:    1
 12909 ;; Hardware stack levels required when called:    2
 12910 ;; This function calls:
 12911 ;;		_enableInterrupts
 12912 ;;		_nrf24l01SPIEnd
 12913 ;;		_nrf24l01SPISend
 12914 ;;		_nrf24l01SPIStart
 12915 ;; This function is called by:
 12916 ;;		_nrf24l01ISR
 12917 ;;		i1_nrf24l01SetRXMode
 12918 ;;		i1_nrf24l01Service
 12919 ;; This function uses a non-reentrant model
 12920 ;;
 12921                           
 12922                           
 12923                           ;psect for function i1_nrf24l01Send
 12924  1D55                     i1_nrf24l01Send:	
 12925                           
 12926                           ;incstack = 0
 12927                           ; Regs used in i1_nrf24l01Send: [wreg+status,2+status,0+pclath+cstack]
 12928                           ;i1nrf24l01Send@command stored from wreg
 12929  1D55  00F3               	movwf	i1nrf24l01Send@command
 12930                           
 12931                           ;nrf24l01.c: 48: enableInterrupts(0);
 12932  1D56  3000               	movlw	0
 12933  1D57  319C  24F4  319D   	fcall	_enableInterrupts
 12934                           
 12935                           ;nrf24l01.c: 51: nrf24l01SPIStart();
 12936  1D5A  3190  2000  319D   	fcall	_nrf24l01SPIStart
 12937                           
 12938                           ;nrf24l01.c: 54: nrf24l01SPISend(command);
 12939  1D5D  0873               	movf	i1nrf24l01Send@command,w
 12940  1D5E  3187  27F0  319D   	fcall	_nrf24l01SPISend
 12941                           
 12942                           ;nrf24l01.c: 57: data = nrf24l01SPISend(data);
 12943  1D61  0871               	movf	i1nrf24l01Send@data,w
 12944  1D62  3187  27F0  319D   	fcall	_nrf24l01SPISend
 12945  1D65  00F2               	movwf	??i1_nrf24l01Send
 12946  1D66  0872               	movf	??i1_nrf24l01Send,w
 12947  1D67  00F1               	movwf	i1nrf24l01Send@data
 12948                           
 12949                           ;nrf24l01.c: 60: nrf24l01SPIEnd();
 12950  1D68  319C  24ED  319D   	fcall	_nrf24l01SPIEnd
 12951                           
 12952                           ;nrf24l01.c: 63: enableInterrupts(1);
 12953  1D6B  3001               	movlw	1
 12954  1D6C  319C  24F4         	fcall	_enableInterrupts
 12955                           
 12956                           ;nrf24l01.c: 65: return data;
 12957  1D6E  0871               	movf	i1nrf24l01Send@data,w
 12958  1D6F  0008               	return
 12959  1D70                     __end_ofi1_nrf24l01Send:	
 12960                           
 12961                           	psect	text50
 12962  1000                     __ptext50:	
 12963 ;; *************** function _nrf24l01SPIStart *****************
 12964 ;; Defined at:
 12965 ;;		line 64 in file "interface.c"
 12966 ;; Parameters:    Size  Location     Type
 12967 ;;		None
 12968 ;; Auto vars:     Size  Location     Type
 12969 ;;		None
 12970 ;; Return value:  Size  Location     Type
 12971 ;;                  1    wreg      void 
 12972 ;; Registers used:
 12973 ;;		wreg, status,2, status,0, pclath, cstack
 12974 ;; Tracked objects:
 12975 ;;		On entry : 0/0
 12976 ;;		On exit  : 0/0
 12977 ;;		Unchanged: 0/0
 12978 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12979 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12980 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12981 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12982 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12983 ;;Total ram usage:        0 bytes
 12984 ;; Hardware stack levels used:    1
 12985 ;; Hardware stack levels required when called:    8
 12986 ;; This function calls:
 12987 ;;		_nrf24l01CSLow
 12988 ;; This function is called by:
 12989 ;;		_nrf24l01Send
 12990 ;;		_nrf24l01SetTXPipe
 12991 ;;		_nrf24l01Service
 12992 ;;		_nrf24l01InitRegisters
 12993 ;;		i1_nrf24l01Send
 12994 ;;		i1_nrf24l01Service
 12995 ;; This function uses a non-reentrant model
 12996 ;;
 12997                           
 12998                           
 12999                           ;psect for function _nrf24l01SPIStart
 13000  1000                     _nrf24l01SPIStart:	
 13001                           
 13002                           ;interface.c: 65: nrf24l01CSLow();
 13003                           
 13004                           ;incstack = 0
 13005 ;; hardware stack exceeded
 13006                           ; Regs used in _nrf24l01SPIStart: [wreg+status,2+status,0+pclath+cstack]
 13007  1000  3187  27FD  3190   	fcall	_nrf24l01CSLow
 13008                           
 13009                           ;interface.c: 66: _delay((unsigned long)((10)*(32000000/4000000.0)));
 13010  1003  301A               	movlw	26
 13011  1004                     u706_27:	
 13012  1004  0B89               	decfsz	9,f
 13013  1005  2804               	goto	u706_27
 13014  1006  3200               	nop2
 13015  1007  0008               	return
 13016  1008                     __end_of_nrf24l01SPIStart:	
 13017                           
 13018                           	psect	text51
 13019  07FD                     __ptext51:	
 13020 ;; *************** function _nrf24l01CSLow *****************
 13021 ;; Defined at:
 13022 ;;		line 17 in file "interface.c"
 13023 ;; Parameters:    Size  Location     Type
 13024 ;;		None
 13025 ;; Auto vars:     Size  Location     Type
 13026 ;;		None
 13027 ;; Return value:  Size  Location     Type
 13028 ;;                  1    wreg      void 
 13029 ;; Registers used:
 13030 ;;		None
 13031 ;; Tracked objects:
 13032 ;;		On entry : 0/0
 13033 ;;		On exit  : 0/0
 13034 ;;		Unchanged: 0/0
 13035 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13036 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13037 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13038 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13039 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13040 ;;Total ram usage:        0 bytes
 13041 ;; Hardware stack levels used:    1
 13042 ;; Hardware stack levels required when called:    7
 13043 ;; This function calls:
 13044 ;;		Nothing
 13045 ;; This function is called by:
 13046 ;;		_nrf24l01SPIStart
 13047 ;; This function uses a non-reentrant model
 13048 ;;
 13049                           
 13050                           
 13051                           ;psect for function _nrf24l01CSLow
 13052  07FD                     _nrf24l01CSLow:	
 13053                           
 13054                           ;interface.c: 18: PORTAbits.RA1 = 0;
 13055                           
 13056                           ;incstack = 0
 13057 ;; hardware stack exceeded
 13058                           ; Regs used in _nrf24l01CSLow: []
 13059  07FD  0020               	movlb	0	; select bank0
 13060  07FE  108C               	bcf	12,1	;volatile
 13061  07FF  0008               	return
 13062  0800                     __end_of_nrf24l01CSLow:	
 13063                           
 13064                           	psect	text52
 13065  07F0                     __ptext52:	
 13066 ;; *************** function _nrf24l01SPISend *****************
 13067 ;; Defined at:
 13068 ;;		line 51 in file "interface.c"
 13069 ;; Parameters:    Size  Location     Type
 13070 ;;  data            1    wreg     unsigned char 
 13071 ;; Auto vars:     Size  Location     Type
 13072 ;;  data            1    0[COMMON] unsigned char 
 13073 ;; Return value:  Size  Location     Type
 13074 ;;                  1    wreg      unsigned char 
 13075 ;; Registers used:
 13076 ;;		wreg
 13077 ;; Tracked objects:
 13078 ;;		On entry : 0/0
 13079 ;;		On exit  : 0/0
 13080 ;;		Unchanged: 0/0
 13081 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13082 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13083 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13084 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13085 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13086 ;;Total ram usage:        0 bytes
 13087 ;; Hardware stack levels used:    1
 13088 ;; Hardware stack levels required when called:    7
 13089 ;; This function calls:
 13090 ;;		Nothing
 13091 ;; This function is called by:
 13092 ;;		_nrf24l01Send
 13093 ;;		_nrf24l01SetTXPipe
 13094 ;;		_nrf24l01Service
 13095 ;;		_nrf24l01InitRegisters
 13096 ;;		i1_nrf24l01Send
 13097 ;;		i1_nrf24l01Service
 13098 ;; This function uses a non-reentrant model
 13099 ;;
 13100                           
 13101                           
 13102                           ;psect for function _nrf24l01SPISend
 13103  07F0                     _nrf24l01SPISend:	
 13104                           
 13105                           ;incstack = 0
 13106 ;; hardware stack exceeded
 13107                           ; Regs used in _nrf24l01SPISend: [wreg]
 13108                           ;nrf24l01SPISend@data stored from wreg
 13109  07F0  00F0               	movwf	nrf24l01SPISend@data
 13110                           
 13111                           ;interface.c: 52: SSP1BUF = data;
 13112  07F1  0870               	movf	nrf24l01SPISend@data,w
 13113  07F2  0024               	movlb	4	; select bank4
 13114  07F3  0091               	movwf	17	;volatile
 13115                           
 13116                           ;interface.c: 54: PORTCbits.RC4 = 1;
 13117  07F4  0020               	movlb	0	; select bank0
 13118  07F5  160E               	bsf	14,4	;volatile
 13119  07F6                     i1l48:	
 13120                           ;interface.c: 56: while (!SSP1STATbits.BF){
 13121                           
 13122  07F6  0024               	movlb	4	; select bank4
 13123  07F7  1814               	btfsc	20,0	;volatile
 13124  07F8  2FFB               	goto	i1l4162
 13125                           
 13126                           ;interface.c: 57: __nop();
 13127  07F9  0000               	nop
 13128  07FA  2FF6               	goto	i1l48
 13129  07FB                     i1l4162:	
 13130                           
 13131                           ;interface.c: 58: };interface.c: 60: return SSP1BUF;
 13132  07FB  0811               	movf	17,w	;volatile
 13133  07FC  0008               	return
 13134  07FD                     __end_of_nrf24l01SPISend:	
 13135                           
 13136                           	psect	text53
 13137  1CED                     __ptext53:	
 13138 ;; *************** function _nrf24l01SPIEnd *****************
 13139 ;; Defined at:
 13140 ;;		line 70 in file "interface.c"
 13141 ;; Parameters:    Size  Location     Type
 13142 ;;		None
 13143 ;; Auto vars:     Size  Location     Type
 13144 ;;		None
 13145 ;; Return value:  Size  Location     Type
 13146 ;;                  1    wreg      void 
 13147 ;; Registers used:
 13148 ;;		wreg, status,2, status,0, pclath, cstack
 13149 ;; Tracked objects:
 13150 ;;		On entry : 0/0
 13151 ;;		On exit  : 0/0
 13152 ;;		Unchanged: 0/0
 13153 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13154 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13155 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13156 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13157 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13158 ;;Total ram usage:        0 bytes
 13159 ;; Hardware stack levels used:    1
 13160 ;; Hardware stack levels required when called:    8
 13161 ;; This function calls:
 13162 ;;		_nrf24l01CSHigh
 13163 ;; This function is called by:
 13164 ;;		_nrf24l01Send
 13165 ;;		_nrf24l01SetTXPipe
 13166 ;;		_nrf24l01Service
 13167 ;;		_nrf24l01InitRegisters
 13168 ;;		i1_nrf24l01Send
 13169 ;;		i1_nrf24l01Service
 13170 ;; This function uses a non-reentrant model
 13171 ;;
 13172                           
 13173                           
 13174                           ;psect for function _nrf24l01SPIEnd
 13175  1CED                     _nrf24l01SPIEnd:	
 13176                           
 13177                           ;interface.c: 71: _delay((unsigned long)((10)*(32000000/4000000.0)));
 13178                           
 13179                           ;incstack = 0
 13180 ;; hardware stack exceeded
 13181                           ; Regs used in _nrf24l01SPIEnd: [wreg+status,2+status,0+pclath+cstack]
 13182  1CED  301A               	movlw	26
 13183  1CEE                     u707_27:	
 13184  1CEE  0B89               	decfsz	9,f
 13185  1CEF  2CEE               	goto	u707_27
 13186  1CF0  3200               	nop2
 13187                           
 13188                           ;interface.c: 72: nrf24l01CSHigh();
 13189  1CF1  3188  2000         	fcall	_nrf24l01CSHigh
 13190  1CF3  0008               	return
 13191  1CF4                     __end_of_nrf24l01SPIEnd:	
 13192                           
 13193                           	psect	text54
 13194  0800                     __ptext54:	
 13195 ;; *************** function _nrf24l01CSHigh *****************
 13196 ;; Defined at:
 13197 ;;		line 22 in file "interface.c"
 13198 ;; Parameters:    Size  Location     Type
 13199 ;;		None
 13200 ;; Auto vars:     Size  Location     Type
 13201 ;;		None
 13202 ;; Return value:  Size  Location     Type
 13203 ;;                  1    wreg      void 
 13204 ;; Registers used:
 13205 ;;		None
 13206 ;; Tracked objects:
 13207 ;;		On entry : 0/0
 13208 ;;		On exit  : 0/0
 13209 ;;		Unchanged: 0/0
 13210 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13211 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13212 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13213 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13214 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13215 ;;Total ram usage:        0 bytes
 13216 ;; Hardware stack levels used:    1
 13217 ;; Hardware stack levels required when called:    7
 13218 ;; This function calls:
 13219 ;;		Nothing
 13220 ;; This function is called by:
 13221 ;;		_nrf24l01SPIEnd
 13222 ;; This function uses a non-reentrant model
 13223 ;;
 13224                           
 13225                           
 13226                           ;psect for function _nrf24l01CSHigh
 13227  0800                     _nrf24l01CSHigh:	
 13228                           
 13229                           ;interface.c: 23: PORTAbits.RA1 = 1;
 13230                           
 13231                           ;incstack = 0
 13232 ;; hardware stack exceeded
 13233                           ; Regs used in _nrf24l01CSHigh: []
 13234  0800  0020               	movlb	0	; select bank0
 13235  0801  148C               	bsf	12,1	;volatile
 13236  0802  0008               	return
 13237  0803                     __end_of_nrf24l01CSHigh:	
 13238                           
 13239                           	psect	text55
 13240  1CF4                     __ptext55:	
 13241 ;; *************** function _enableInterrupts *****************
 13242 ;; Defined at:
 13243 ;;		line 76 in file "interface.c"
 13244 ;; Parameters:    Size  Location     Type
 13245 ;;  enable          1    wreg     unsigned char 
 13246 ;; Auto vars:     Size  Location     Type
 13247 ;;  enable          1    0[COMMON] unsigned char 
 13248 ;; Return value:  Size  Location     Type
 13249 ;;                  1    wreg      void 
 13250 ;; Registers used:
 13251 ;;		wreg, status,0
 13252 ;; Tracked objects:
 13253 ;;		On entry : 0/0
 13254 ;;		On exit  : 0/0
 13255 ;;		Unchanged: 0/0
 13256 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13257 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13258 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13259 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13260 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13261 ;;Total ram usage:        0 bytes
 13262 ;; Hardware stack levels used:    1
 13263 ;; Hardware stack levels required when called:    7
 13264 ;; This function calls:
 13265 ;;		Nothing
 13266 ;; This function is called by:
 13267 ;;		_nrf24l01Send
 13268 ;;		_nrf24l01Service
 13269 ;;		i1_nrf24l01Send
 13270 ;;		i1_nrf24l01Service
 13271 ;; This function uses a non-reentrant model
 13272 ;;
 13273                           
 13274                           
 13275                           ;psect for function _enableInterrupts
 13276  1CF4                     _enableInterrupts:	
 13277                           
 13278                           ;incstack = 0
 13279 ;; hardware stack exceeded
 13280                           ; Regs used in _enableInterrupts: [wreg+status,0]
 13281                           ;enableInterrupts@enable stored from wreg
 13282  1CF4  00F0               	movwf	enableInterrupts@enable
 13283                           
 13284                           ;interface.c: 77: PIE0bits.INTE = enable;
 13285  1CF5  0C70               	rrf	enableInterrupts@enable,w
 13286  1CF6  0021               	movlb	1	; select bank1
 13287  1CF7  1C03               	skipc
 13288  1CF8  1010               	bcf	16,0	;volatile
 13289  1CF9  1803               	skipnc
 13290  1CFA  1410               	bsf	16,0	;volatile
 13291  1CFB  0008               	return
 13292  1CFC                     __end_of_enableInterrupts:	
 13293                           
 13294                           	psect	text56
 13295  1CE4                     __ptext56:	
 13296 ;; *************** function _nrf24l01CELow *****************
 13297 ;; Defined at:
 13298 ;;		line 7 in file "interface.c"
 13299 ;; Parameters:    Size  Location     Type
 13300 ;;		None
 13301 ;; Auto vars:     Size  Location     Type
 13302 ;;		None
 13303 ;; Return value:  Size  Location     Type
 13304 ;;                  1    wreg      void 
 13305 ;; Registers used:
 13306 ;;		None
 13307 ;; Tracked objects:
 13308 ;;		On entry : 0/0
 13309 ;;		On exit  : 0/0
 13310 ;;		Unchanged: 0/0
 13311 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13312 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13313 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13314 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13315 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13316 ;;Total ram usage:        0 bytes
 13317 ;; Hardware stack levels used:    1
 13318 ;; Hardware stack levels required when called:    7
 13319 ;; This function calls:
 13320 ;;		Nothing
 13321 ;; This function is called by:
 13322 ;;		_nrf24l01SetRXMode
 13323 ;;		_nrf24l01Service
 13324 ;;		_nrf24l01Init
 13325 ;;		i1_nrf24l01SetRXMode
 13326 ;;		i1_nrf24l01Service
 13327 ;; This function uses a non-reentrant model
 13328 ;;
 13329                           
 13330                           
 13331                           ;psect for function _nrf24l01CELow
 13332  1CE4                     _nrf24l01CELow:	
 13333                           
 13334                           ;interface.c: 8: PORTAbits.RA0 = 0;
 13335                           
 13336                           ;incstack = 0
 13337 ;; hardware stack exceeded
 13338                           ; Regs used in _nrf24l01CELow: []
 13339  1CE4  0020               	movlb	0	; select bank0
 13340  1CE5  100C               	bcf	12,0	;volatile
 13341  1CE6  0008               	return
 13342  1CE7                     __end_of_nrf24l01CELow:	
 13343                           
 13344                           	psect	text57
 13345  1CE1                     __ptext57:	
 13346 ;; *************** function _nrf24l01CEHigh *****************
 13347 ;; Defined at:
 13348 ;;		line 12 in file "interface.c"
 13349 ;; Parameters:    Size  Location     Type
 13350 ;;		None
 13351 ;; Auto vars:     Size  Location     Type
 13352 ;;		None
 13353 ;; Return value:  Size  Location     Type
 13354 ;;                  1    wreg      void 
 13355 ;; Registers used:
 13356 ;;		None
 13357 ;; Tracked objects:
 13358 ;;		On entry : 0/0
 13359 ;;		On exit  : 0/0
 13360 ;;		Unchanged: 0/0
 13361 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13362 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13363 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13364 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13365 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13366 ;;Total ram usage:        0 bytes
 13367 ;; Hardware stack levels used:    1
 13368 ;; Hardware stack levels required when called:    7
 13369 ;; This function calls:
 13370 ;;		Nothing
 13371 ;; This function is called by:
 13372 ;;		_nrf24l01SetRXMode
 13373 ;;		_nrf24l01Service
 13374 ;;		_nrf24l01Init
 13375 ;;		i1_nrf24l01SetRXMode
 13376 ;;		i1_nrf24l01Service
 13377 ;; This function uses a non-reentrant model
 13378 ;;
 13379                           
 13380                           
 13381                           ;psect for function _nrf24l01CEHigh
 13382  1CE1                     _nrf24l01CEHigh:	
 13383                           
 13384                           ;interface.c: 13: PORTAbits.RA0 = 1;
 13385                           
 13386                           ;incstack = 0
 13387 ;; hardware stack exceeded
 13388                           ; Regs used in _nrf24l01CEHigh: []
 13389  1CE1  0020               	movlb	0	; select bank0
 13390  1CE2  140C               	bsf	12,0	;volatile
 13391  1CE3  0008               	return
 13392  1CE4                     __end_of_nrf24l01CEHigh:	
 13393                           
 13394                           	psect	text58
 13395  1D3A                     __ptext58:	
 13396 ;; *************** function i1_memset *****************
 13397 ;; Defined at:
 13398 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\memset.c"
 13399 ;; Parameters:    Size  Location     Type
 13400 ;;  p1              1    wreg     PTR void 
 13401 ;;		 -> RXPacket(33), 
 13402 ;;  c               2    0[COMMON] int 
 13403 ;;  n               2    2[COMMON] unsigned int 
 13404 ;; Auto vars:     Size  Location     Type
 13405 ;;  p1              1    5[COMMON] PTR void 
 13406 ;;		 -> RXPacket(33), 
 13407 ;;  memset          1    6[COMMON] PTR unsigned char 
 13408 ;;		 -> RXPacket(33), 
 13409 ;; Return value:  Size  Location     Type
 13410 ;;                  1    wreg      PTR void 
 13411 ;; Registers used:
 13412 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 13413 ;; Tracked objects:
 13414 ;;		On entry : 0/0
 13415 ;;		On exit  : 0/0
 13416 ;;		Unchanged: 0/0
 13417 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13418 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13419 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13420 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13421 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13422 ;;Total ram usage:        7 bytes
 13423 ;; Hardware stack levels used:    1
 13424 ;; This function calls:
 13425 ;;		Nothing
 13426 ;; This function is called by:
 13427 ;;		i1_nrf24l01Service
 13428 ;; This function uses a non-reentrant model
 13429 ;;
 13430                           
 13431                           
 13432                           ;psect for function i1_memset
 13433  1D3A                     i1_memset:	
 13434                           
 13435                           ;incstack = 0
 13436                           ; Regs used in i1_memset: [wreg+fsr1l+fsr1h+status,2+status,0]
 13437                           ;i1memset@p1 stored from wreg
 13438  1D3A  00F5               	movwf	i1memset@p1
 13439  1D3B  0875               	movf	i1memset@p1,w
 13440  1D3C  00F4               	movwf	??i1_memset
 13441  1D3D  0874               	movf	??i1_memset,w
 13442  1D3E  00F6               	movwf	i1memset@p
 13443  1D3F                     i1l3644:	
 13444  1D3F  3001               	movlw	1
 13445  1D40  02F2               	subwf	i1memset@n,f
 13446  1D41  3000               	movlw	0
 13447  1D42  3BF3               	subwfb	i1memset@n+1,f
 13448  1D43  0A72               	incf	i1memset@n,w
 13449  1D44  1903               	btfsc	3,2
 13450  1D45  0A73               	incf	i1memset@n+1,w
 13451  1D46  1903               	btfsc	3,2
 13452  1D47  0008               	return
 13453  1D48  0870               	movf	i1memset@c,w
 13454  1D49  00F4               	movwf	??i1_memset
 13455  1D4A  0876               	movf	i1memset@p,w
 13456  1D4B  0086               	movwf	6
 13457  1D4C  3001               	movlw	1	; select bank2/3
 13458  1D4D  0087               	movwf	7
 13459  1D4E  0874               	movf	??i1_memset,w
 13460  1D4F  0081               	movwf	1
 13461  1D50  3001               	movlw	1
 13462  1D51  00F4               	movwf	??i1_memset
 13463  1D52  0874               	movf	??i1_memset,w
 13464  1D53  07F6               	addwf	i1memset@p,f
 13465  1D54  2D3F               	goto	i1l3644
 13466  1D55                     __end_ofi1_memset:	
 13467                           ;	Return value of i1_memset is never used
 13468                           
 13469  007E                     btemp	set	126	;btemp
 13470  007E                     int$flags	set	126
 13471  007E                     wtemp0	set	126


Data Sizes:
    Strings     74
    Constant    135
    Data        1
    BSS         69
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     12      12
    BANK0            80     80      80
    BANK1            80     72      77
    BANK2            80     49      53
    BANK3            80     34      67
    BANK4            80      0      28
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    strlen@s	PTR const unsigned char  size(2) Largest target is 33
		 -> packet.Message(BANK0[32]), packet.Message(BANK0[32]), NULL(NULL[0]), main@packet(BANK3[33]), 
		 -> loop@packet(BANK2[33]), romDataMap(BANK4[28]), 

    strlen@cp	PTR const unsigned char  size(2) Largest target is 33
		 -> packet.Message(BANK0[32]), packet.Message(BANK0[32]), NULL(NULL[0]), main@packet(BANK3[33]), 
		 -> loop@packet(BANK2[33]), romDataMap(BANK4[28]), 

    strcpy@from	PTR const unsigned char  size(2) Largest target is 4
		 -> STR_11(CODE[4]), 

    strcpy@to	PTR unsigned char  size(1) Largest target is 28
		 -> romDataMap(BANK4[28]), 

    strcpy@cp	PTR unsigned char  size(1) Largest target is 28
		 -> romDataMap(BANK4[28]), 

    memset@p1	PTR void  size(1) Largest target is 33
		 -> RXPacket(BANK3[33]), 

    memset@p	PTR unsigned char  size(1) Largest target is 33
		 -> RXPacket(BANK3[33]), 

    sprintf@f	PTR const unsigned char  size(2) Largest target is 10
		 -> STR_1(CODE[10]), 

    sprintf@cp	PTR const unsigned char  size(2) Largest target is 28
		 -> romDataMap.name(BANK4[16]), STR_13(CODE[7]), ?_sprintf(BANK1[2]), STR_12(CODE[5]), 
		 -> STR_10(CODE[5]), STR_9(CODE[6]), STR_8(CODE[5]), STR_7(CODE[5]), 
		 -> STR_6(CODE[5]), STR_5(CODE[7]), STR_4(CODE[5]), STR_3(CODE[5]), 
		 -> STR_2(CODE[5]), romDataMap(BANK4[28]), 

    sprintf@sp	PTR unsigned char  size(1) Largest target is 33
		 -> main@packet(BANK3[33]), loop@packet(BANK2[33]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK1[2]), 

    sp__memset	PTR void  size(1) Largest target is 33
		 -> RXPacket(BANK3[33]), 

    nrf24l01SendPacket@txPacket	PTR struct . size(1) Largest target is 33
		 -> main@packet(BANK3[33]), loop@packet(BANK2[33]), 

    TXPacket	PTR struct . size(1) Largest target is 33
		 -> NULL(NULL[0]), main@packet(BANK3[33]), loop@packet(BANK2[33]), 

    sp__nrf24l01GetRXPacket	PTR struct . size(1) Largest target is 33
		 -> RXPacket(BANK3[33]), 

    sp__strcpy	PTR unsigned char  size(1) Largest target is 28
		 -> romDataMap(BANK4[28]), 

    nrf24l01GetPipe@name	PTR unsigned char  size(1) Largest target is 28
		 -> romDataMap(BANK4[28]), 

    sendMessage@topic	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_12(CODE[5]), STR_10(CODE[5]), STR_9(CODE[6]), STR_8(CODE[5]), 
		 -> STR_7(CODE[5]), STR_6(CODE[5]), STR_5(CODE[7]), STR_4(CODE[5]), 
		 -> STR_3(CODE[5]), STR_2(CODE[5]), 

    sendMessage@packet	PTR struct . size(1) Largest target is 33
		 -> main@packet(BANK3[33]), loop@packet(BANK2[33]), 

    romData	PTR struct . size(1) Largest target is 28
		 -> romDataMap(BANK4[28]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    _ISR->_nrf24l01ISR
    _nrf24l01ISR->i1_nrf24l01Service
    i1_nrf24l01Service->i1_memset
    i1_nrf24l01Service->i1_nrf24l01SetRXMode
    i1_nrf24l01SetRXMode->i1_nrf24l01Send

Critical Paths under _main in BANK0

    _main->_sendMessage
    _nrf24l01Init->_nrf24l01InitRegisters
    _nrf24l01InitRegisters->_nrf24l01SetRXPipe
    _nrf24l01InitRegisters->_nrf24l01SetTXPipe
    _nrf24l01SetTXPipe->___bmul
    _nrf24l01SetRXPipe->_nrf24l01Send
    _nrf24l01GetPipe->___lwmod
    _nrf24l01GetPipe->_strlen
    _loop->_sendMessage
    _sprintf->___ftmul
    _scale->___ftmul
    ___awdiv->___awmod
    _fround->___ftmul
    ___wmul->___awdiv
    ___lwdiv->___lwmod
    ___ftmul->_getADCValue
    ___lltoft->___ftpack
    ___fttol->___ftmul
    ___ftsub->___ftadd
    ___ftneg->_getADCValue
    _sleep->_nrf24l01SetRXMode
    _nrf24l01SendPacket->_nrf24l01Service
    _nrf24l01Service->_memset
    _nrf24l01SetRXMode->_nrf24l01Send
    _getADCValue->___ftdiv
    ___ftdiv->___ftadd
    ___ftadd->___wmul
    ___awtoft->___ftpack
    ___lbtoft->___ftpack
    ___lwtoft->___ftpack

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_loop
    _loop->_sendMessage
    _sendMessage->_sprintf
    _sprintf->___fttol
    ___fttol->_scale

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    _main->_loop

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                35    35      0  215907
                                             71 BANK1      1     1      0
                                              0 BANK3     34    34      0
                           ___lwtoft
                               _loop
                    _nrf24l01GetPipe
                       _nrf24l01Init
                  _nrf24l01SetRXPipe
                  _nrf24l01SetTXPipe
                        _sendMessage
                             _strcpy
 ---------------------------------------------------------------------------------
 (1) _strcpy                                               5     3      2     252
                                              0 BANK0      5     3      2
 ---------------------------------------------------------------------------------
 (1) _nrf24l01Init                                         2     2      0    6804
                                             18 BANK0      2     2      0
                     _nrf24l01CEHigh
                      _nrf24l01CELow
              _nrf24l01InitRegisters
              _nrf24l01InterfaceInit
 ---------------------------------------------------------------------------------
 (2) _nrf24l01InterfaceInit                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _nrf24l01InitRegisters                               11    11      0    6804
                                              7 BANK0     11    11      0
                             ___bmul
                     _nrf24l01SPIEnd
                    _nrf24l01SPISend
                   _nrf24l01SPIStart
                       _nrf24l01Send
                  _nrf24l01SetRXPipe
                  _nrf24l01SetTXPipe
 ---------------------------------------------------------------------------------
 (1) _nrf24l01SetTXPipe                                    3     3      0     406
                                              4 BANK0      3     3      0
                             ___bmul
                     _nrf24l01SPIEnd
                    _nrf24l01SPISend
                   _nrf24l01SPIStart
 ---------------------------------------------------------------------------------
 (2) ___bmul                                               4     3      1     344
                                              0 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (1) _nrf24l01SetRXPipe                                    4     4      0    2836
                                              3 BANK0      4     4      0
                       _nrf24l01Send
 ---------------------------------------------------------------------------------
 (1) _nrf24l01GetPipe                                      5     5      0    1499
                                              6 BANK0      5     5      0
                            ___lwmod
                             _strlen
 ---------------------------------------------------------------------------------
 (1) _loop                                                50    50      0  122036
                                             70 BANK1      1     1      0
                                              0 BANK2     49    49      0
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___ftneg
                           ___lbtoft
                           ___lltoft
                        _getADCValue
                       _nrf24l01Send
                        _sendMessage
 ---------------------------------------------------------------------------------
 (1) _sendMessage                                          6     1      5   78215
                                             79 BANK0      1     1      0
                                             65 BANK1      5     0      5
                           ___lbtoft (ARG)
                           ___lwtoft (ARG)
                        _getADCValue (ARG)
                 _nrf24l01SendPacket
                              _sleep
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _sprintf                                             45    36      9   65938
                                             25 BANK1     40    31      9
                            ___awdiv
                            ___ftadd
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                            ___lldiv
                            ___llmod
                           ___lltoft
                             ___wmul
                         __div_to_l_
                        __tdiv_to_l_
                             _fround
                              _scale
 ---------------------------------------------------------------------------------
 (3) _scale                                               11     8      3   15442
                                              0 BANK1     11     8      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) ___awmod                                              7     3      4    1681
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (4) ___awdiv                                              9     5      4    1901
                                              7 BANK0      9     5      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (3) _fround                                              14    11      3   13510
                                              0 BANK1     14    11      3
                            ___ftadd (ARG)
                            ___ftmul
                            ___lwdiv
                            ___lwmod
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4    4088
                                             16 BANK0      6     2      4
                            ___awdiv (ARG)
                            ___awmod (ARG)
                            ___lwdiv (ARG)
                            ___lwmod (ARG)
 ---------------------------------------------------------------------------------
 (4) ___lwmod                                              6     2      4    1064
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (4) ___lwdiv                                              8     4      4     865
                                              6 BANK0      8     4      4
                            ___lwmod (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftmul                                             16    10      6    7143
                                             63 BANK0     16    10      6
                            ___awdiv (ARG)
                            ___awmod (ARG)
                            ___ftadd (ARG)
                           ___ftpack
                            ___lwdiv (ARG)
                            ___lwmod (ARG)
                             ___wmul (ARG)
                        _getADCValue (ARG)
 ---------------------------------------------------------------------------------
 (3) __tdiv_to_l_                                         16    10      6     662
                                              0 BANK0     16    10      6
 ---------------------------------------------------------------------------------
 (3) __div_to_l_                                          20    14      6     881
                                              0 BANK0     20    14      6
 ---------------------------------------------------------------------------------
 (3) ___lltoft                                             6     2      4    4261
                                              8 BANK0      6     2      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) ___llmod                                             10     2      8     856
                                              0 BANK0     10     2      8
 ---------------------------------------------------------------------------------
 (3) ___lldiv                                             14     6      8     657
                                              0 BANK0     14     6      8
 ---------------------------------------------------------------------------------
 (3) ___fttol                                             14    10      4     683
                                             11 BANK1     14    10      4
                            ___ftmul (ARG)
                              _scale (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftsub                                              6     0      6    6104
                                             35 BANK0      6     0      6
                            ___ftadd
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftneg                                              3     0      3     273
                                             63 BANK0      3     0      3
                            ___ftadd (ARG)
                            ___ftdiv (ARG)
                        _getADCValue (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftge                                               9     3      6    1030
                                              0 BANK0      9     3      6
 ---------------------------------------------------------------------------------
 (2) _sleep                                                4     2      2    3052
                                              6 BANK0      4     2      2
                         _doWDTSleep
                  _nrf24l01SetRXMode
 ---------------------------------------------------------------------------------
 (2) _nrf24l01SendPacket                                   2     2      0    6519
                                             11 BANK0      2     2      0
                    _nrf24l01Service
 ---------------------------------------------------------------------------------
 (3) _nrf24l01Service                                      4     4      0    6444
                                              7 BANK0      4     4      0
                   _enableInterrupts
                             _memset
                     _nrf24l01CEHigh
                      _nrf24l01CELow
                     _nrf24l01SPIEnd
                    _nrf24l01SPISend
                   _nrf24l01SPIStart
                       _nrf24l01Send
                  _nrf24l01SetRXMode
                             _strlen
 ---------------------------------------------------------------------------------
 (4) _strlen                                               6     4      2     226
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (3) _nrf24l01SetRXMode                                    3     3      0    2849
                                              3 BANK0      3     3      0
                     _nrf24l01CEHigh
                      _nrf24l01CELow
                       _nrf24l01Send
 ---------------------------------------------------------------------------------
 (4) _nrf24l01Send                                         3     2      1    2688
                                              0 BANK0      3     2      1
                   _enableInterrupts
                     _nrf24l01SPIEnd
                    _nrf24l01SPISend
                   _nrf24l01SPIStart
 ---------------------------------------------------------------------------------
 (14) _nrf24l01SPIStart                                    0     0      0       0
                      _nrf24l01CSLow
 ---------------------------------------------------------------------------------
 (15) _nrf24l01CSLow                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (14) _nrf24l01SPISend                                     1     1      0      31
 ---------------------------------------------------------------------------------
 (14) _nrf24l01SPIEnd                                      0     0      0       0
                     _nrf24l01CSHigh
 ---------------------------------------------------------------------------------
 (15) _nrf24l01CSHigh                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (14) _enableInterrupts                                    1     1      0      31
 ---------------------------------------------------------------------------------
 (13) _nrf24l01CELow                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (13) _nrf24l01CEHigh                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _memset                                               7     3      4     384
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (2) _getADCValue                                         12     9      3   14591
                                             51 BANK0     12     9      3
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                         _doWDTSleep
 ---------------------------------------------------------------------------------
 (3) _doWDTSleep                                           2     2      0      31
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) ___ftdiv                                             16    10      6    4787
                                             35 BANK0     16    10      6
                            ___ftadd (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) ___ftadd                                             13     7      6    5800
                                             22 BANK0     13     7      6
                           ___awtoft (ARG)
                           ___ftpack
                           ___ftpack (ARG)
                            ___lwdiv (ARG)
                            ___lwmod (ARG)
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (3) ___awtoft                                             6     3      3    3772
                                              8 BANK0      6     3      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___lbtoft                                             8     5      3    3566
                                              8 BANK0      8     5      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (1) ___lwtoft                                             4     1      3    3670
                                              8 BANK0      4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (5) ___ftpack                                             8     3      5    3535
                                              0 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 15
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (9) _ISR                                                  0     0      0    1804
                        _nrf24l01ISR
 ---------------------------------------------------------------------------------
 (10) _nrf24l01ISR                                         1     1      0    1804
                                             11 COMMON     1     1      0
                     i1_nrf24l01Send
                  i1_nrf24l01Service
 ---------------------------------------------------------------------------------
 (11) i1_nrf24l01Service                                   4     4      0    1436
                                              7 COMMON     4     4      0
                   _enableInterrupts
                     _nrf24l01CEHigh
                      _nrf24l01CELow
                     _nrf24l01SPIEnd
                    _nrf24l01SPISend
                   _nrf24l01SPIStart
                           i1_memset
                     i1_nrf24l01Send
                i1_nrf24l01SetRXMode
                           i1_strlen
 ---------------------------------------------------------------------------------
 (12) i1_strlen                                            6     4      2      94
                                              0 COMMON     6     4      2
 ---------------------------------------------------------------------------------
 (12) i1_nrf24l01SetRXMode                                 3     3      0     529
                                              4 COMMON     3     3      0
                     _nrf24l01CEHigh
                      _nrf24l01CELow
                     i1_nrf24l01Send
 ---------------------------------------------------------------------------------
 (13) i1_nrf24l01Send                                      3     2      1     368
                                              1 COMMON     3     2      1
                   _enableInterrupts
                     _nrf24l01SPIEnd
                    _nrf24l01SPISend
                   _nrf24l01SPIStart
 ---------------------------------------------------------------------------------
 (14) _nrf24l01SPIStart                                    0     0      0       0
                      _nrf24l01CSLow
 ---------------------------------------------------------------------------------
 (15) _nrf24l01CSLow                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (14) _nrf24l01SPISend                                     1     1      0      31
 ---------------------------------------------------------------------------------
 (14) _nrf24l01SPIEnd                                      0     0      0       0
                     _nrf24l01CSHigh
 ---------------------------------------------------------------------------------
 (15) _nrf24l01CSHigh                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (14) _enableInterrupts                                    1     1      0      31
 ---------------------------------------------------------------------------------
 (13) _nrf24l01CELow                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (13) _nrf24l01CEHigh                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (12) i1_memset                                            7     3      4     148
                                              0 COMMON     7     3      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 15
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   ___lwtoft
     ___ftpack
   _loop
     ___ftadd
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___ftpack (ARG)
       ___lwdiv (ARG)
         ___lwmod (ARG)
       ___lwmod (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
           ___lwmod (ARG)
         ___lwmod (ARG)
     ___ftdiv
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___lwdiv (ARG)
           ___lwmod (ARG)
         ___lwmod (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___lwdiv (ARG)
             ___lwmod (ARG)
           ___lwmod (ARG)
       ___ftpack (ARG)
     ___ftmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___lwdiv (ARG)
           ___lwmod (ARG)
         ___lwmod (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___lwdiv (ARG)
             ___lwmod (ARG)
           ___lwmod (ARG)
       ___ftpack (ARG)
       ___lwdiv (ARG)
         ___lwmod (ARG)
       ___lwmod (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
           ___lwmod (ARG)
         ___lwmod (ARG)
       _getADCValue (ARG)
         ___awtoft
           ___ftpack
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwdiv (ARG)
             ___lwmod (ARG)
           ___lwmod (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___lwdiv (ARG)
               ___lwmod (ARG)
             ___lwmod (ARG)
         ___ftdiv
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwdiv (ARG)
               ___lwmod (ARG)
             ___lwmod (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___lwdiv (ARG)
                 ___lwmod (ARG)
               ___lwmod (ARG)
           ___ftpack (ARG)
         _doWDTSleep
     ___ftneg
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___lwdiv (ARG)
           ___lwmod (ARG)
         ___lwmod (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___lwdiv (ARG)
             ___lwmod (ARG)
           ___lwmod (ARG)
       ___ftdiv (ARG)
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwdiv (ARG)
             ___lwmod (ARG)
           ___lwmod (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___lwdiv (ARG)
               ___lwmod (ARG)
             ___lwmod (ARG)
         ___ftpack (ARG)
       _getADCValue (ARG)
         ___awtoft
           ___ftpack
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwdiv (ARG)
             ___lwmod (ARG)
           ___lwmod (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___lwdiv (ARG)
               ___lwmod (ARG)
             ___lwmod (ARG)
         ___ftdiv
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwdiv (ARG)
               ___lwmod (ARG)
             ___lwmod (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___lwdiv (ARG)
                 ___lwmod (ARG)
               ___lwmod (ARG)
           ___ftpack (ARG)
         _doWDTSleep
     ___lbtoft
       ___ftpack
     ___lltoft
       ___ftpack
     _getADCValue
       ___awtoft
         ___ftpack
       ___ftadd
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___lwdiv (ARG)
           ___lwmod (ARG)
         ___lwmod (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___lwdiv (ARG)
             ___lwmod (ARG)
           ___lwmod (ARG)
       ___ftdiv
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwdiv (ARG)
             ___lwmod (ARG)
           ___lwmod (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___lwdiv (ARG)
               ___lwmod (ARG)
             ___lwmod (ARG)
         ___ftpack (ARG)
       _doWDTSleep
     _nrf24l01Send
       _enableInterrupts
       _nrf24l01SPIEnd
         _nrf24l01CSHigh
       _nrf24l01SPISend
       _nrf24l01SPIStart
         _nrf24l01CSLow
     _sendMessage
       ___lbtoft (ARG)
         ___ftpack
       ___lwtoft (ARG)
         ___ftpack
       _getADCValue (ARG)
         ___awtoft
           ___ftpack
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwdiv (ARG)
             ___lwmod (ARG)
           ___lwmod (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___lwdiv (ARG)
               ___lwmod (ARG)
             ___lwmod (ARG)
         ___ftdiv
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwdiv (ARG)
               ___lwmod (ARG)
             ___lwmod (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___lwdiv (ARG)
                 ___lwmod (ARG)
               ___lwmod (ARG)
           ___ftpack (ARG)
         _doWDTSleep
       _nrf24l01SendPacket (ARG)
         _nrf24l01Service
           _enableInterrupts
           _memset
           _nrf24l01CEHigh
           _nrf24l01CELow
           _nrf24l01SPIEnd
             _nrf24l01CSHigh
           _nrf24l01SPISend
           _nrf24l01SPIStart
             _nrf24l01CSLow
           _nrf24l01Send
             _enableInterrupts
             _nrf24l01SPIEnd
               _nrf24l01CSHigh
             _nrf24l01SPISend
             _nrf24l01SPIStart
               _nrf24l01CSLow
           _nrf24l01SetRXMode
             _nrf24l01CEHigh
             _nrf24l01CELow
             _nrf24l01Send
               _enableInterrupts
               _nrf24l01SPIEnd
                 _nrf24l01CSHigh
               _nrf24l01SPISend
               _nrf24l01SPIStart
                 _nrf24l01CSLow
           _strlen
       _sleep (ARG)
         _doWDTSleep
         _nrf24l01SetRXMode
           _nrf24l01CEHigh
           _nrf24l01CELow
           _nrf24l01Send
             _enableInterrupts
             _nrf24l01SPIEnd
               _nrf24l01CSHigh
             _nrf24l01SPISend
             _nrf24l01SPIStart
               _nrf24l01CSLow
       _sprintf (ARG)
         ___awdiv
           ___awmod (ARG)
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwdiv (ARG)
             ___lwmod (ARG)
           ___lwmod (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___lwdiv (ARG)
               ___lwmod (ARG)
             ___lwmod (ARG)
         ___ftge
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwdiv (ARG)
               ___lwmod (ARG)
             ___lwmod (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___lwdiv (ARG)
                 ___lwmod (ARG)
               ___lwmod (ARG)
           ___ftpack (ARG)
           ___lwdiv (ARG)
             ___lwmod (ARG)
           ___lwmod (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___lwdiv (ARG)
               ___lwmod (ARG)
             ___lwmod (ARG)
           _getADCValue (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwdiv (ARG)
                 ___lwmod (ARG)
               ___lwmod (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___lwdiv (ARG)
                   ___lwmod (ARG)
                 ___lwmod (ARG)
             ___ftdiv
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwdiv (ARG)
                   ___lwmod (ARG)
                 ___lwmod (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___lwdiv (ARG)
                     ___lwmod (ARG)
                   ___lwmod (ARG)
               ___ftpack (ARG)
             _doWDTSleep
         ___ftneg
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwdiv (ARG)
               ___lwmod (ARG)
             ___lwmod (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___lwdiv (ARG)
                 ___lwmod (ARG)
               ___lwmod (ARG)
           ___ftdiv (ARG)
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwdiv (ARG)
                 ___lwmod (ARG)
               ___lwmod (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___lwdiv (ARG)
                   ___lwmod (ARG)
                 ___lwmod (ARG)
             ___ftpack (ARG)
           _getADCValue (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwdiv (ARG)
                 ___lwmod (ARG)
               ___lwmod (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___lwdiv (ARG)
                   ___lwmod (ARG)
                 ___lwmod (ARG)
             ___ftdiv
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwdiv (ARG)
                   ___lwmod (ARG)
                 ___lwmod (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___lwdiv (ARG)
                     ___lwmod (ARG)
                   ___lwmod (ARG)
               ___ftpack (ARG)
             _doWDTSleep
         ___ftsub
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwdiv (ARG)
               ___lwmod (ARG)
             ___lwmod (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___lwdiv (ARG)
                 ___lwmod (ARG)
               ___lwmod (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___fttol
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwdiv (ARG)
                 ___lwmod (ARG)
               ___lwmod (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___lwdiv (ARG)
                   ___lwmod (ARG)
                 ___lwmod (ARG)
             ___ftpack (ARG)
             ___lwdiv (ARG)
               ___lwmod (ARG)
             ___lwmod (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___lwdiv (ARG)
                 ___lwmod (ARG)
               ___lwmod (ARG)
             _getADCValue (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwdiv (ARG)
                   ___lwmod (ARG)
                 ___lwmod (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___lwdiv (ARG)
                     ___lwmod (ARG)
                   ___lwmod (ARG)
               ___ftdiv
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___lwdiv (ARG)
                     ___lwmod (ARG)
                   ___lwmod (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___lwdiv (ARG)
                       ___lwmod (ARG)
                     ___lwmod (ARG)
                 ___ftpack (ARG)
               _doWDTSleep
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwdiv (ARG)
                   ___lwmod (ARG)
                 ___lwmod (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___lwdiv (ARG)
                     ___lwmod (ARG)
                   ___lwmod (ARG)
               ___ftpack (ARG)
               ___lwdiv (ARG)
                 ___lwmod (ARG)
               ___lwmod (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___lwdiv (ARG)
                   ___lwmod (ARG)
                 ___lwmod (ARG)
               _getADCValue (ARG)
                 ___awtoft
                   ___ftpack
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___lwdiv (ARG)
                     ___lwmod (ARG)
                   ___lwmod (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___lwdiv (ARG)
                       ___lwmod (ARG)
                     ___lwmod (ARG)
                 ___ftdiv
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___lwdiv (ARG)
                       ___lwmod (ARG)
                     ___lwmod (ARG)
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                       ___lwdiv (ARG)
                         ___lwmod (ARG)
                       ___lwmod (ARG)
                   ___ftpack (ARG)
                 _doWDTSleep
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___lwdiv (ARG)
                 ___lwmod (ARG)
               ___lwmod (ARG)
         ___lldiv
         ___llmod
         ___lltoft
           ___ftpack
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___lwdiv (ARG)
             ___lwmod (ARG)
           ___lwmod (ARG)
         __div_to_l_
         __tdiv_to_l_
         _fround
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwdiv (ARG)
               ___lwmod (ARG)
             ___lwmod (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___lwdiv (ARG)
                 ___lwmod (ARG)
               ___lwmod (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwdiv (ARG)
                 ___lwmod (ARG)
               ___lwmod (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___lwdiv (ARG)
                   ___lwmod (ARG)
                 ___lwmod (ARG)
             ___ftpack (ARG)
             ___lwdiv (ARG)
               ___lwmod (ARG)
             ___lwmod (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___lwdiv (ARG)
                 ___lwmod (ARG)
               ___lwmod (ARG)
             _getADCValue (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwdiv (ARG)
                   ___lwmod (ARG)
                 ___lwmod (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___lwdiv (ARG)
                     ___lwmod (ARG)
                   ___lwmod (ARG)
               ___ftdiv
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___lwdiv (ARG)
                     ___lwmod (ARG)
                   ___lwmod (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___lwdiv (ARG)
                       ___lwmod (ARG)
                     ___lwmod (ARG)
                 ___ftpack (ARG)
               _doWDTSleep
           ___lwdiv (ARG)
             ___lwmod (ARG)
           ___lwmod (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___lwdiv (ARG)
               ___lwmod (ARG)
             ___lwmod (ARG)
         _scale
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwdiv (ARG)
                 ___lwmod (ARG)
               ___lwmod (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___lwdiv (ARG)
                   ___lwmod (ARG)
                 ___lwmod (ARG)
             ___ftpack (ARG)
             ___lwdiv (ARG)
               ___lwmod (ARG)
             ___lwmod (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___lwdiv (ARG)
                 ___lwmod (ARG)
               ___lwmod (ARG)
             _getADCValue (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwdiv (ARG)
                   ___lwmod (ARG)
                 ___lwmod (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___lwdiv (ARG)
                     ___lwmod (ARG)
                   ___lwmod (ARG)
               ___ftdiv
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___lwdiv (ARG)
                     ___lwmod (ARG)
                   ___lwmod (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___lwdiv (ARG)
                       ___lwmod (ARG)
                     ___lwmod (ARG)
                 ___ftpack (ARG)
               _doWDTSleep
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___lwdiv (ARG)
               ___lwmod (ARG)
             ___lwmod (ARG)
   _nrf24l01GetPipe
     ___lwmod
     _strlen
   _nrf24l01Init
     _nrf24l01CEHigh
     _nrf24l01CELow
     _nrf24l01InitRegisters
       ___bmul
       _nrf24l01SPIEnd
         _nrf24l01CSHigh
       _nrf24l01SPISend
       _nrf24l01SPIStart
         _nrf24l01CSLow
       _nrf24l01Send
         _enableInterrupts
         _nrf24l01SPIEnd
           _nrf24l01CSHigh
         _nrf24l01SPISend
         _nrf24l01SPIStart
           _nrf24l01CSLow
       _nrf24l01SetRXPipe
         _nrf24l01Send
           _enableInterrupts
           _nrf24l01SPIEnd
             _nrf24l01CSHigh
           _nrf24l01SPISend
           _nrf24l01SPIStart
             _nrf24l01CSLow
       _nrf24l01SetTXPipe
         ___bmul
         _nrf24l01SPIEnd
           _nrf24l01CSHigh
         _nrf24l01SPISend
         _nrf24l01SPIStart
           _nrf24l01CSLow
     _nrf24l01InterfaceInit
   _nrf24l01SetRXPipe
     _nrf24l01Send
       _enableInterrupts
       _nrf24l01SPIEnd
         _nrf24l01CSHigh
       _nrf24l01SPISend
       _nrf24l01SPIStart
         _nrf24l01CSLow
   _nrf24l01SetTXPipe
     ___bmul
     _nrf24l01SPIEnd
       _nrf24l01CSHigh
     _nrf24l01SPISend
     _nrf24l01SPIStart
       _nrf24l01CSLow
   _sendMessage
     ___lbtoft (ARG)
       ___ftpack
     ___lwtoft (ARG)
       ___ftpack
     _getADCValue (ARG)
       ___awtoft
         ___ftpack
       ___ftadd
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___lwdiv (ARG)
           ___lwmod (ARG)
         ___lwmod (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___lwdiv (ARG)
             ___lwmod (ARG)
           ___lwmod (ARG)
       ___ftdiv
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwdiv (ARG)
             ___lwmod (ARG)
           ___lwmod (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___lwdiv (ARG)
               ___lwmod (ARG)
             ___lwmod (ARG)
         ___ftpack (ARG)
       _doWDTSleep
     _nrf24l01SendPacket (ARG)
       _nrf24l01Service
         _enableInterrupts
         _memset
         _nrf24l01CEHigh
         _nrf24l01CELow
         _nrf24l01SPIEnd
           _nrf24l01CSHigh
         _nrf24l01SPISend
         _nrf24l01SPIStart
           _nrf24l01CSLow
         _nrf24l01Send
           _enableInterrupts
           _nrf24l01SPIEnd
             _nrf24l01CSHigh
           _nrf24l01SPISend
           _nrf24l01SPIStart
             _nrf24l01CSLow
         _nrf24l01SetRXMode
           _nrf24l01CEHigh
           _nrf24l01CELow
           _nrf24l01Send
             _enableInterrupts
             _nrf24l01SPIEnd
               _nrf24l01CSHigh
             _nrf24l01SPISend
             _nrf24l01SPIStart
               _nrf24l01CSLow
         _strlen
     _sleep (ARG)
       _doWDTSleep
       _nrf24l01SetRXMode
         _nrf24l01CEHigh
         _nrf24l01CELow
         _nrf24l01Send
           _enableInterrupts
           _nrf24l01SPIEnd
             _nrf24l01CSHigh
           _nrf24l01SPISend
           _nrf24l01SPIStart
             _nrf24l01CSLow
     _sprintf (ARG)
       ___awdiv
         ___awmod (ARG)
       ___ftadd
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___lwdiv (ARG)
           ___lwmod (ARG)
         ___lwmod (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___lwdiv (ARG)
             ___lwmod (ARG)
           ___lwmod (ARG)
       ___ftge
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwdiv (ARG)
             ___lwmod (ARG)
           ___lwmod (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___lwdiv (ARG)
               ___lwmod (ARG)
             ___lwmod (ARG)
         ___ftpack (ARG)
         ___lwdiv (ARG)
           ___lwmod (ARG)
         ___lwmod (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___lwdiv (ARG)
             ___lwmod (ARG)
           ___lwmod (ARG)
         _getADCValue (ARG)
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwdiv (ARG)
               ___lwmod (ARG)
             ___lwmod (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___lwdiv (ARG)
                 ___lwmod (ARG)
               ___lwmod (ARG)
           ___ftdiv
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwdiv (ARG)
                 ___lwmod (ARG)
               ___lwmod (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___lwdiv (ARG)
                   ___lwmod (ARG)
                 ___lwmod (ARG)
             ___ftpack (ARG)
           _doWDTSleep
       ___ftneg
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwdiv (ARG)
             ___lwmod (ARG)
           ___lwmod (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___lwdiv (ARG)
               ___lwmod (ARG)
             ___lwmod (ARG)
         ___ftdiv (ARG)
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwdiv (ARG)
               ___lwmod (ARG)
             ___lwmod (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___lwdiv (ARG)
                 ___lwmod (ARG)
               ___lwmod (ARG)
           ___ftpack (ARG)
         _getADCValue (ARG)
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwdiv (ARG)
               ___lwmod (ARG)
             ___lwmod (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___lwdiv (ARG)
                 ___lwmod (ARG)
               ___lwmod (ARG)
           ___ftdiv
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwdiv (ARG)
                 ___lwmod (ARG)
               ___lwmod (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___lwdiv (ARG)
                   ___lwmod (ARG)
                 ___lwmod (ARG)
             ___ftpack (ARG)
           _doWDTSleep
       ___ftsub
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwdiv (ARG)
             ___lwmod (ARG)
           ___lwmod (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___lwdiv (ARG)
               ___lwmod (ARG)
             ___lwmod (ARG)
         ___lltoft (ARG)
           ___ftpack
       ___fttol
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwdiv (ARG)
               ___lwmod (ARG)
             ___lwmod (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___lwdiv (ARG)
                 ___lwmod (ARG)
               ___lwmod (ARG)
           ___ftpack (ARG)
           ___lwdiv (ARG)
             ___lwmod (ARG)
           ___lwmod (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___lwdiv (ARG)
               ___lwmod (ARG)
             ___lwmod (ARG)
           _getADCValue (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwdiv (ARG)
                 ___lwmod (ARG)
               ___lwmod (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___lwdiv (ARG)
                   ___lwmod (ARG)
                 ___lwmod (ARG)
             ___ftdiv
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwdiv (ARG)
                   ___lwmod (ARG)
                 ___lwmod (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___lwdiv (ARG)
                     ___lwmod (ARG)
                   ___lwmod (ARG)
               ___ftpack (ARG)
             _doWDTSleep
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwdiv (ARG)
                 ___lwmod (ARG)
               ___lwmod (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___lwdiv (ARG)
                   ___lwmod (ARG)
                 ___lwmod (ARG)
             ___ftpack (ARG)
             ___lwdiv (ARG)
               ___lwmod (ARG)
             ___lwmod (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___lwdiv (ARG)
                 ___lwmod (ARG)
               ___lwmod (ARG)
             _getADCValue (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwdiv (ARG)
                   ___lwmod (ARG)
                 ___lwmod (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___lwdiv (ARG)
                     ___lwmod (ARG)
                   ___lwmod (ARG)
               ___ftdiv
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___lwdiv (ARG)
                     ___lwmod (ARG)
                   ___lwmod (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___lwdiv (ARG)
                       ___lwmod (ARG)
                     ___lwmod (ARG)
                 ___ftpack (ARG)
               _doWDTSleep
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___lwdiv (ARG)
               ___lwmod (ARG)
             ___lwmod (ARG)
       ___lldiv
       ___llmod
       ___lltoft
         ___ftpack
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
           ___lwmod (ARG)
         ___lwmod (ARG)
       __div_to_l_
       __tdiv_to_l_
       _fround
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwdiv (ARG)
             ___lwmod (ARG)
           ___lwmod (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___lwdiv (ARG)
               ___lwmod (ARG)
             ___lwmod (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwdiv (ARG)
               ___lwmod (ARG)
             ___lwmod (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___lwdiv (ARG)
                 ___lwmod (ARG)
               ___lwmod (ARG)
           ___ftpack (ARG)
           ___lwdiv (ARG)
             ___lwmod (ARG)
           ___lwmod (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___lwdiv (ARG)
               ___lwmod (ARG)
             ___lwmod (ARG)
           _getADCValue (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwdiv (ARG)
                 ___lwmod (ARG)
               ___lwmod (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___lwdiv (ARG)
                   ___lwmod (ARG)
                 ___lwmod (ARG)
             ___ftdiv
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwdiv (ARG)
                   ___lwmod (ARG)
                 ___lwmod (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___lwdiv (ARG)
                     ___lwmod (ARG)
                   ___lwmod (ARG)
               ___ftpack (ARG)
             _doWDTSleep
         ___lwdiv (ARG)
           ___lwmod (ARG)
         ___lwmod (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___lwdiv (ARG)
             ___lwmod (ARG)
           ___lwmod (ARG)
       _scale
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwdiv (ARG)
               ___lwmod (ARG)
             ___lwmod (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___lwdiv (ARG)
                 ___lwmod (ARG)
               ___lwmod (ARG)
           ___ftpack (ARG)
           ___lwdiv (ARG)
             ___lwmod (ARG)
           ___lwmod (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___lwdiv (ARG)
               ___lwmod (ARG)
             ___lwmod (ARG)
           _getADCValue (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwdiv (ARG)
                 ___lwmod (ARG)
               ___lwmod (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___lwdiv (ARG)
                   ___lwmod (ARG)
                 ___lwmod (ARG)
             ___ftdiv
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwdiv (ARG)
                   ___lwmod (ARG)
                 ___lwmod (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___lwdiv (ARG)
                     ___lwmod (ARG)
                   ___lwmod (ARG)
               ___ftpack (ARG)
             _doWDTSleep
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___lwdiv (ARG)
             ___lwmod (ARG)
           ___lwmod (ARG)
   _strcpy

 _ISR (ROOT)
   _nrf24l01ISR
     i1_nrf24l01Send
       _enableInterrupts
       _nrf24l01SPIEnd
         _nrf24l01CSHigh
       _nrf24l01SPISend
       _nrf24l01SPIStart
         _nrf24l01CSLow
     i1_nrf24l01Service
       _enableInterrupts
       _nrf24l01CEHigh
       _nrf24l01CELow
       _nrf24l01SPIEnd
         _nrf24l01CSHigh
       _nrf24l01SPISend
       _nrf24l01SPIStart
         _nrf24l01CSLow
       i1_memset
       i1_nrf24l01Send
         _enableInterrupts
         _nrf24l01SPIEnd
           _nrf24l01CSHigh
         _nrf24l01SPISend
         _nrf24l01SPIStart
           _nrf24l01CSLow
       i1_nrf24l01SetRXMode
         _nrf24l01CEHigh
         _nrf24l01CELow
         i1_nrf24l01Send
           _enableInterrupts
           _nrf24l01SPIEnd
             _nrf24l01CSHigh
           _nrf24l01SPISend
           _nrf24l01SPIStart
             _nrf24l01CSLow
       i1_strlen

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      C       C       2       85.7%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     50      50       5      100.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50     48      4D       7       96.3%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50     31      35       9       66.3%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50     22      43      11       83.8%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0      1C      13       35.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0     13D      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0     13D      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V2.00 build -1524193055 
Symbol Table                                                                                   Wed Aug 01 21:30:47 2018

                ___bmul@product 0022                     __CFG_CP$OFF 0000                sendMessage@value 00E3  
                  ___awdiv@sign 002D                sendMessage@topic 00E1             ___wmul@multiplicand 0032  
           nrf24l01Send@command 0022                    ___ftadd@exp1 0042                    ___ftadd@exp2 0041  
             sendMessage@packet 006F                     __CFG_LVP$ON 0000                    ___ftadd@sign 0040  
                           l164 1451                             l427 0053                             l259 1E83  
                           l284 0B96                             l437 01B4                             l705 12BB  
                           l706 12C3                             l806 1347                             l478 1DB0  
                           l729 1696                             l755 0834                             l765 08AD  
                           l686 09CA                             l698 12A8                    __CFG_CPD$OFF 0000  
                           _ISR 0004                    ___awmod@sign 0026                             wreg 0009  
             sleep@milliseconds 0026                            ?_ISR 0070                    ___ftdiv@cntr 004D  
                  ___ftdiv@sign 0052                  ??_nrf24l01Init 0032                            l4200 1E3C  
                          l5000 0273                            l4130 127E                            l4202 1E48  
                          l5010 02C2                            l4212 1D91                            l5004 02BC  
                          l4134 1285                            l4302 11C8                            l5030 0305  
                          l4144 12AD                            l4136 128F                            l4320 1626  
                          l4216 1DAA                            l5032 0372                            l5016 02EF  
                          l5120 1E8F                  ??_nrf24l01Send 0021                            l4146 12B5  
                          l4138 1294                            l5130 1EA2                            l4242 1239  
                          l4306 11D0                            l4316 161F                            l5140 14B1  
                          l5220 1428                            l4500 0B33                            l4420 15CF  
                          l4404 15AB                            l4260 125F                            l4252 1241  
                          l4236 122E                            l5052 03B8                            l5044 039D  
                          l4350 1675                            l4326 1635                            l5230 1473  
                          l5222 1414                            l4254 124D                            l5038 0383  
                          l4344 1662                            l5160 1508                            l4504 0B4F  
                          l4416 15C7                            l4408 15B3                            l4440 1F9C  
                          l4264 1268                            l4280 119A                            l4362 16A8  
                          l4346 166C                            l4338 164F                            l5146 14C7  
                          l5234 148B                            l5218 1420                            l4530 0BB7  
                          l4442 1FA8                            l4610 061C                            l5074 04B5  
                          l5082 0038                            l5330 17BB                            l5322 1771  
                          l4356 1688                            l4348 1671                            l5236 1492  
                          l4524 0B87                            l4452 1FC3                            l4268 1270  
                          l4292 11A7                            l4284 11A1                            l4604 05A8  
                          l5068 04A5                            l5076 04BA                            l5084 04D1  
                          l4366 16BA                            l4358 1692                            l4550 0BF4  
                          l4518 0B6E                            l4470 1F52                            l4294 11B3  
                          l4622 0708                            l4614 063D                            l4376 16D5  
                          l5168 1521                            l4392 1570                            l4448 1FBA  
                          l4464 1F3A                            l5512 1FCD                            l5336 17CA  
                          l4554 0C05                            l4714 0987                            l4706 093F  
                          l4386 155A                            l4466 1F46                            l4474 1F5B  
                          l4298 11BF                            l5514 1FF0                            l4732 09C1  
                          l4724 09A6                            l4660 086F                            l4652 0855  
                          l4580 0D2A                            l4628 077C                            l4740 1CFF  
                          l5524 1DE5                            l4558 0C0D                            l4902 1EC9  
                          l4734 09CD                            l4726 09B4                            l4670 0889  
                          l4638 081C                            l4496 0B20                            l4808 1E21  
                          l4760 07BC                            l4680 08B0                            l4672 0897  
                          l4912 0050                            l4744 1D05                            l4850 1358  
                          l4818 12F3                            l4690 08D7                            l4914 0055  
                          l4780 1062                            l4844 133E                            l4836 1323  
                          l4772 07E7                            l4860 10CE                            l4588 0DBA  
                          l4932 0084                            l5628 13F0                            l4846 134A  
                          l4838 1331                            l4758 07AE                            l4862 10DC  
                          l4870 10FF                            l4678 08A4                            l4934 009B  
                          l4784 1078                            l4768 07DC                            l4880 1F1E  
                          l4696 08F4                            l4928 0068                            l4866 10F4  
                          l4972 0198                            l4964 014B                            l4948 00EB  
                          l4878 1F0E                            l4990 0232                            l4986 0219  
                          l4978 01EC                            STR_1 1882                    __CFG_WDTE$ON 0000  
                          STR_2 18A5                            STR_3 18C3                            STR_4 18AA  
                          STR_5 1893                            STR_6 18AF                            STR_7 18BE  
                          STR_8 18B4                            STR_9 189A                            u5015 11B9  
                          u5025 11C0                            u5205 1676                            u6005 07D1  
                          u6015 07DD                            u5145 1650                            u5305 157C  
                          u5235 1689                            u5315 158C                            u6125 1324  
                          u5175 1663                            u7007 10B0                            u6215 10EA  
                          u5335 15B4                            u5415 1F9F                            u7017 10BE  
                          u6225 10F5                            u5345 15BA                            u5505 1F4C  
                          u4715 12B0                            u6155 133F                            u5435 1FA9  
                          u5515 1F53                            u6245 1F13                            u5445 1FB3  
                          u6095 12FA                            u5375 15D0                            u5455 1FBB  
                          u6415 0217                            u6335 00FF                            i1l48 07F6  
                          u5545 0B49                            u5385 15D6                            u4755 12CA  
                          u4675 128A                            u6195 10D1                            u5715 0856  
                          u4835 1DB1                            u4915 124E                            u5805 08A5  
                          u5725 0866                            u5485 1F3D                            u4845 1DB6  
                          u4925 1258                            u6445 02E5                            u4695 12A3  
                          u6615 14D9                            u5735 0870                            u4935 1260  
                          u6375 01BE                            u6625 14E9                            u6385 01F6  
                          u6635 1509                            u6645 1518                            u5925 09C2  
                          u5845 0940                            u6485 038C                            u6574 1E89  
                          u6655 1522                            u5855 096A                            u5775 088A  
                          u4895 1244                            u6495 0398                            u6575 1E88  
                          u4995 11AA                            u5975 07B1                            u5895 09A7  
                          u5995 07BD                            u6885 1FDE                            u6957 137D  
                          u6967 1114                            u6977 1123                            u6987 0B69  
                          u6997 109B                            _WPUA 020C                            _WPUC 020E  
__size_of_nrf24l01InterfaceInit 001C                    __CFG_WRT$OFF 0000                   __CFG_FCMEN$ON 0000  
 __end_of_nrf24l01InterfaceInit 1DDF                            _main 1361                    ___ftpack@arg 0020  
                          _loop 0DF1                    ___ftpack@exp 0023                            fsr0h 0005  
                          fsr1h 0007                            indf0 0000                            fsr0l 0004  
                          indf1 0001                            fsr1l 0006                            btemp 007E  
                 __CFG_BORV$LOW 0000                            start 000F           nrf24l01SetRXPipe@pipe 0025  
                  _sprintf$1987 00C8                   __CFG_CSWEN$ON 0000               ___bmul@multiplier 0023  
                 __CFG_MCLRE$ON 0000                    ___ftmul@cntr 006D                    ___ftmul@sign 006E  
   __size_of_nrf24l01SendPacket 002A                           ??_ISR 007C                    ___fttol@exp1 00B8  
          __size_of_getADCValue 00A6                 ??_nrf24l01CELow 0070                    ___fttol@lval 00B4  
               ??_nrf24l01CSLow 0070                           ?_main 0070                 __end_of___awdiv 1275  
                         ?_loop 0070                 __end_of___ftadd 16ED                           STR_10 18B9  
                         STR_11 18CD                           STR_12 18C8                           STR_13 188C  
               __end_of___awmod 11D5                 __end_of___ftdiv 1543                 __end_of___ftneg 1011  
               __end_of___lldiv 07F0                 __end_of___ftmul 15F7                 ___awdiv@divisor 0027  
               __end_of___llmod 1108                 __end_of___ftsub 1E37                 __end_of___fttol 1361  
                __CFG_DEBUG$OFF 0000                 __end_of___lwdiv 1FC8                           i1l153 000D  
                         i1l272 1219                 __end_of___lwmod 1F60                           i1l284 0A64  
                         i1l268 11FB                           i1l269 11FA                 ___awdiv@counter 002C  
        enableInterrupts@enable 0070                      i1memset@p1 0075                   __CFG_PWRTE$ON 0000  
         nrf24l01SetTXPipe@pipe 0026                    ___lltoft@exp 002D                   ___awtoft@sign 002D  
               __end_of_dpowers 1828                           _scale 04D7                           _sleep 1EB9  
                 ___ftpack@sign 0024                  __CFG_BOREN$OFF 0000                _enableInterrupts 1CF4  
                         status 0003                           wtemp0 007E                 __end_of_sprintf 04D7  
   __end_ofi1_nrf24l01SetRXMode 104B                __end_ofi1_memset 1D55               getADCValue@adcSum 005C  
              __end_ofi1_strlen 1E19                _nrf24l01SPIStart 1000                 __initialization 0011  
        nrf24l01InitRegisters@i 0030                    __end_of_main 13F4                    __end_of_loop 1000  
              ??_nrf24l01CEHigh 0070                          ??_main 00E7                   ___fttol@sign1 00B3  
                        ??_loop 00E6                ??_nrf24l01CSHigh 0070                      i1strlen@cp 0074  
                  ?_sendMessage 00E1                ??_nrf24l01SPIEnd 0070            __size_of__tdiv_to_l_ 00B6  
      __size_of_nrf24l01SPISend 000D                ___llmod@dividend 0024                          ?_scale 00A0  
                        _ADRESH 009C                          _ADRESL 009B                ___awdiv@dividend 0029  
                        ?_sleep 0026                __end_of___awtoft 1EB9                          _ANSELA 018C  
                        _ANSELC 018E                __end_of___ftpack 12DA                __end_of___lbtoft 1D8B  
              __end_of___lltoft 1F33                          _ODCONA 028C        __size_of_nrf24l01GetPipe 0038  
                        _ODCONC 028E                          i1l4162 07FB                          i1l3650 1DFF  
                        i1l5410 0A7F                          i1l3644 1D3F                          i1l3652 1E0B  
                        i1l5404 0A59                          i1l5430 0AB5                          i1l5434 0AC5  
                        i1l5380 0A0D                          i1l5438 0ACD                          i1l5384 0A27  
                        i1l5376 09FC                          i1l5466 121A                          i1l5398 0A43  
                        _INLVLA 038C                          _INLVLC 038E                __end_of___lwtoft 1D23  
                        u702_27 0A3E               i1_nrf24l01Service 09D6                          u703_27 1023  
                        u704_27 1037                          u705_27 1044                          u706_27 1004  
                        u707_27 1CEE                          u676_25 0A21              ?i1_nrf24l01Service 0070  
      __size_of_nrf24l01Service 014A            __size_of_nrf24l01ISR 004E         nrf24l01SetRXMode@config 0024  
              __end_of__powers_ 184F                          ___bmul 1CFC                          ___ftge 104B  
       nrf24l01SetRXMode@rxMode 0025                          ___wmul 1DA7                       ??___awdiv 002B  
           ??i1_nrf24l01Service 0077                       ??___ftadd 003C                  __CFG_STVREN$ON 0000  
                     ??___awmod 0024                       ??___ftdiv 0049                       ??___ftneg 0062  
                     ??___lldiv 0028                       ??___ftmul 0065                       ??___llmod 0028  
                     ??___ftsub 0049                       ??___fttol 00AF                       ??___lwdiv 002A  
                     ??___lwmod 0024            __end_of_nrf24l01Init 114B            __end_of_nrf24l01Send 1E76  
                        _memset 1D8B                          _fround 0C41           _nrf24l01InitRegisters 16ED  
              ___awdiv@quotient 002E                 ___awmod@divisor 0020                 ___awmod@counter 0025  
                        _status 00E8                          _strcpy 1DDF                          _strlen 1E37  
         ___ftmul@f3_as_product 006A       i1nrf24l01SetRXMode@config 0075                          loop@ta 0123  
                        loop@vt 0120       i1nrf24l01SetRXMode@rxMode 0076                       ??_sprintf 00C2  
              __end_of_statuses 1881       __end_ofi1_nrf24l01Service 0AF7              getADCValue@adcLoop 005A  
       __end_of__initialization 002E                      ___ftadd@f1 0036                      ___ftadd@f2 0039  
                    ___ftge@ff1 0020                      ___ftge@ff2 0023              getADCValue@channel 0059  
                    ___ftdiv@f1 0046                      ___ftdiv@f2 0043                      ___ftdiv@f3 004E  
                    ___ftneg@f1 005F                      ___awtoft@c 0028                      ___lbtoft@c 002F  
           ___bmul@multiplicand 0020                      ___ftmul@f1 005F                      ___ftmul@f2 0062  
                    ___ftsub@f1 0046                      ___ftsub@f2 0043                      ___fttol@f1 00AB  
                __pcstackCOMMON 0070                    __pidataBANK1 0003                      ___lltoft@c 0028  
                    _doWDTSleep 1D23                   __end_of_scale 079D                   __end_of_sleep 1EDF  
                    ___lwtoft@c 0028                      __div_to_l_ 08B9                       ?i1_memset 0070  
                     ?i1_strlen 0070                 __div_to_l_@exp1 0033                 __div_to_l_@cntr 0032  
                       ??_scale 00A3                 __div_to_l_@quot 002E                         ??_sleep 0028  
                   loop@rfSetup 012C                      __pbssBANK1 00E8                      __pbssBANK2 0151  
                    __pbssBANK3 01C2                      __pbssBANK4 0220               ??_nrf24l01SPISend 0070  
        i1nrf24l01Service@width 0079         __size_ofi1_nrf24l01Send 001B                   __div_to_l_@f1 0020  
                 __div_to_l_@f2 0023               ??_nrf24l01GetPipe 0026                      __pmaintext 1361  
                       ?___bmul 0020                         ?___ftge 0020                         ?___wmul 0030  
               __CFG_PPS1WAY$ON 0000               _nrf24l01SetRXMode 1087               _nrf24l01SetRXPipe 1E76  
        ?_nrf24l01InitRegisters 0070                      __pintentry 0004               _nrf24l01SetTXPipe 114B  
           nrf24l01SPISend@data 0070                         ?_memset 0020               ??_nrf24l01Service 0027  
                       ?_fround 00A0              ?_nrf24l01SetRXMode 0070                       ?___awtoft 0028  
                     ?___ftpack 0020                       ?___lbtoft 0028              ?_nrf24l01SetRXPipe 0070  
      __end_of_enableInterrupts 1CFC              ?_nrf24l01SetTXPipe 0070                       ?___lltoft 0028  
           __CFG_RSTOSC$HFINT32 0000                         ?_strcpy 0020                         ?_strlen 0020  
                     ?___lwtoft 0028           __end_of_n_ADDRESS_MUL 1882                      ??i1_memset 0074  
          __size_of_sendMessage 0033             ??_nrf24l01SetRXMode 0023        __end_of_nrf24l01SPIStart 1008  
           ??_nrf24l01SetRXPipe 0023             ??_nrf24l01SetTXPipe 0024                      ??i1_strlen 0072  
                       _SSP1BUF 0211      __size_ofi1_nrf24l01Service 0121           _nrf24l01InterfaceInit 1DC3  
          nrf24l01Service@width 0029               __end_of__npowers_ 1876      __end_of_nrf24l01SendPacket 1F09  
                    _scale$1986 00A7                   ??_getADCValue 0056           __size_of_nrf24l01Init 0043  
         __size_of_nrf24l01Send 0020       __end_of_nrf24l01SetRXMode 10C5       __end_of_nrf24l01SetRXPipe 1E97  
     __end_of_nrf24l01SetTXPipe 118F                 __size_of___bmul 0012                 __size_of___ftge 003C  
                       ___awdiv 1223                         ___ftadd 15F7                     ?_doWDTSleep 0070  
                       ___awmod 118F                         ___ftdiv 149A                         ___ftneg 1008  
                       ___lldiv 079D                 __size_of___wmul 001C                         ___ftmul 1543  
                       ___llmod 10C5                         ___ftsub 1E19                         ___fttol 12DA  
                       ___lwdiv 1F93                         ___lwmod 1F33                      ??___awtoft 002B  
                    ??___ftpack 0025                      ??___lbtoft 002B           __end_of_nrf24l01CELow 1CE7  
               __size_of_memset 001C                 __size_of_fround 01B0           __end_of_nrf24l01CSLow 0800  
                    ??___lltoft 002C                         __ptext1 1DDF                         __ptext2 1108  
                       __ptext3 1DC3                         __ptext4 16ED                         __ptext5 114B  
                       __ptext6 1CFC                         __ptext7 1E76                         __ptext8 1FC8  
                       __ptext9 0DF1                      ??___lwtoft 002B                 __size_of_strcpy 001C  
               __size_of_strlen 001F                    __size_of_ISR 000B                     ?__div_to_l_ 0020  
                       _counter 0151                         _dpowers 1800                ___awmod@dividend 0022  
                       _romData 00EC                         _sprintf 0032                         clrloop0 1CE8  
          end_of_initialization 002E                    _nrf24l01Init 1108                    _nrf24l01Send 1E56  
                    _romDataMap 0220                         memset@c 0020                         memset@n 0022  
                       memset@p 0026                nrf24l01GetPipe@i 002A                 ___lldiv@divisor 0020  
               ___lldiv@counter 002D    __size_ofi1_nrf24l01SetRXMode 003A                  __tdiv_to_l_@f1 0020  
                __tdiv_to_l_@f2 0023           i1nrf24l01Send@command 0073                         strlen@s 0020  
                 ??__tdiv_to_l_ 0026             __end_of_getADCValue 149A                       _PORTAbits 000C  
                     _PORTCbits 000E                       _TRISAbits 008C                       _TRISCbits 008E  
              nrf24l01Send@data 0020                __CFG_FEXTOSC$OFF 0000             __size_of_doWDTSleep 0017  
                 ??_nrf24l01ISR 007B          ?_nrf24l01InterfaceInit 0070                     ___ftdiv@exp 0051  
                i1_nrf24l01Send 1D55                      main@packet 01A1                nrf24l01Service@i 002A  
           __size_of__div_to_l_ 011D      __size_of_nrf24l01SetRXMode 003E      __size_of_nrf24l01SetRXPipe 0021  
                   ___ftmul@exp 0069      __size_of_nrf24l01SetTXPipe 0044                  __end_of___bmul 1D0E  
                __end_of___ftge 1087                  __end_of___wmul 1DC3                       i1memset@c 0070  
                     i1memset@n 0072                       i1memset@p 0076                  __end_of_memset 1DA7  
                __end_of_fround 0DF1                  __end_of_strcpy 1DFB                  __end_of_strlen 1E56  
           start_initialization 0011                 _nrf24l01SPISend 07F0                     __end_of_ISR 000F  
           __end_of__tdiv_to_l_ 08B9               __size_ofi1_memset 001B       nrf24l01SetRXPipe@enRXAddr 0026  
               _nrf24l01GetPipe 1FC8         __size_of_nrf24l01CEHigh 0003                       i1strlen@s 0070  
             __size_ofi1_strlen 001E         __size_of_nrf24l01CSHigh 0003          __end_ofi1_nrf24l01Send 1D70  
       __size_of_nrf24l01SPIEnd 0007                 ___llmod@divisor 0020                 ___llmod@counter 0029  
               _nrf24l01Service 0AF7         ??_nrf24l01InitRegisters 0027                __CFG_LPBOREN$OFF 0000  
                   _getADCValue 13F4                        ??___bmul 0021                        ??___ftge 0026  
           __end_of_nrf24l01ISR 1223                        ??___wmul 0034                     __pdataBANK1 00EC  
                      ??_memset 0024                        ??_fround 00A3                   sprintf@tmpval 00D8  
             ?_enableInterrupts 0070                        ??_strcpy 0022                        ??_strlen 0022  
                    fround@prec 00AD               __size_of___awtoft 0022               __size_of___ftpack 0065  
             __size_of___lbtoft 001B              ??_enableInterrupts 0070               __size_of___lltoft 002A  
                     ___latbits 0002               __size_of___lwtoft 0015                   __pcstackBANK0 0020  
                 __pcstackBANK1 00A0                   __pcstackBANK2 0120                   __pcstackBANK3 01A0  
               doWDTSleep@wdtps 0021               ?_nrf24l01SPIStart 0070              ??_nrf24l01SPIStart 0070  
               ?i1_nrf24l01Send 0071                     sprintf@flag 00CC                     sprintf@eexp 00D6  
                   sprintf@fval 00DD                     sprintf@prec 00D0                      loop@packet 0130  
           nrf24l01GetPipe@name 0029             nrf24l01GetPipe@pipe 0028                ___lwdiv@dividend 0028  
                  ??_doWDTSleep 0020                        ?___awdiv 0027                        ?___ftadd 0036  
                      ?___awmod 0020                        ?___ftdiv 0043                        ?___ftneg 005F  
                      ?___lldiv 0020                        ?___ftmul 005F                        ?___llmod 0020  
                      ?___ftsub 0043                       __npowers_ 184F                        ?___fttol 00AB  
                      ?___lwdiv 0026                        ?___lwmod 0020            __end_of_n_ADDRESS_P0 18A5  
       __end_of_nrf24l01SPISend 07FD              i1nrf24l01Send@data 0071                     __tdiv_to_l_ 0803  
     nrf24l01InitRegisters@enAA 002D                   ??_sendMessage 006F              _nrf24l01SendPacket 1EDF  
                  ??__div_to_l_ 0026         __end_of_nrf24l01GetPipe 2000                       _loop$1981 012D  
                     _loop$1982 0126                       _loop$1983 0129             ?_nrf24l01SendPacket 002D  
              ___lwdiv@quotient 002C                        ?_sprintf 00B9             i1_nrf24l01SetRXMode 1011  
            i1nrf24l01Service@i 007A                  __size_of_scale 02C6         __end_of_nrf24l01Service 0C41  
                __size_of_sleep 0026              __end_of_doWDTSleep 1D3A                  ___wmul@product 0034  
                   _nrf24l01ISR 11D5                       clear_ram0 1CE7                        _PIE0bits 0090  
                      _PIR0bits 0010              __end_of__div_to_l_ 09D6                       _sleepLoop 00EB  
          ??_nrf24l01SendPacket 002B            ?i1_nrf24l01SetRXMode 0070                      _ADCON0bits 009D  
                    _ADCON1bits 009E               ___wmul@multiplier 0030                        _WPUAbits 020C  
                      i1_memset 1D3A                        _RXPacket 01C2                        _TXPacket 00EA  
                      i1_strlen 1DFB             __end_of_sendMessage 1F93                  _nrf24l01CEHigh 1CE1  
       ??_nrf24l01InterfaceInit 0020                  _nrf24l01CSHigh 0800                  _nrf24l01SPIEnd 1CED  
        __size_of_nrf24l01CELow 0003          __size_of_nrf24l01CSLow 0003           ??i1_nrf24l01SetRXMode 0074  
              __size_of___awdiv 0052                __size_of___ftadd 00F6                __size_of___awmod 0046  
              __size_of___ftdiv 00A9                __size_of___ftneg 0009                __size_of___lldiv 0053  
              __size_of___ftmul 00B4                __size_of___llmod 0043                __size_of___ftsub 001E  
              __size_of___fttol 0087                __size_of___lwdiv 0035                __size_of___lwmod 002D  
                      ___awtoft 1E97                        ___ftpack 1275                        ___lbtoft 1D70  
              ?_nrf24l01SPISend 0070                     _fround$1984 00AA                     _fround$1985 00A7  
                      ___lltoft 1F09                      _ANSELAbits 018C                        ___lwtoft 1D0E  
                    _ANSELCbits 018E                ?_nrf24l01GetPipe 0070                      sprintf@val 00D2  
                 _n_ADDRESS_MUL 1881          __end_of_nrf24l01CEHigh 1CE4                 ___lwdiv@divisor 0026  
        __end_of_nrf24l01CSHigh 0803                 ___lwdiv@counter 002B                        __ptext10 1F60  
                      __ptext11 0032                        __ptext20 0803                        __ptext12 04D7  
                      __ptext21 08B9                        __ptext13 118F                        __ptext30 1EDF  
                      __ptext22 1F09                        __ptext14 1223                        __ptext31 0AF7  
                      __ptext23 10C5                        __ptext15 0C41                        __ptext40 1E97  
                      __ptext32 1E37                        __ptext24 079D                        __ptext16 1DA7  
                      __ptext41 1D70                        __ptext33 1087                        __ptext25 12DA  
                      __ptext17 1F33                        __ptext50 1000                        __ptext42 1D0E  
                      __ptext34 1E56                        __ptext26 1E19                        __ptext18 1F93  
                      __ptext51 07FD                        __ptext43 1275                        __ptext35 1D8B  
                      __ptext27 1008                        __ptext19 1543                        __ptext52 07F0  
                      __ptext36 13F4                        __ptext28 104B                        __ptext53 1CED  
                      __ptext45 11D5                        __ptext37 1D23                        __ptext29 1EB9  
                      __ptext54 0800                        __ptext46 09D6                        __ptext38 149A  
                      __ptext55 1CF4                        __ptext47 1DFB                        __ptext39 15F7  
                      __ptext56 1CE4                        __ptext48 1011                        __ptext57 1CE1  
                      __ptext49 1D55                        __ptext58 1D3A                    _SSP1CON1bits 0215  
                      __powers_ 1828          __end_of_nrf24l01SPIEnd 1CF4                ?_nrf24l01Service 0070  
              __size_of_sprintf 04A5                     _OSCCON1bits 0919                      strcpy@from 0020  
                 __size_of_main 0093                   __size_of_loop 020F    nrf24l01InitRegisters@channel 0029  
  nrf24l01InitRegisters@feature 002B                      _RC0PPSbits 0EA0    nrf24l01InitRegisters@rfSetup 002C  
                    _RC1PPSbits 0EA1                    ?_getADCValue 0053                      _RC2PPSbits 0EA2  
__size_of_nrf24l01InitRegisters 0113   __end_of_nrf24l01InitRegisters 1800                        int$flags 007E  
  nrf24l01InitRegisters@setupAW 002A                      _ODCONAbits 028C                        _statuses 1876  
                  _SSP1STATbits 0214                        main@pipe 01A0      nrf24l01SendPacket@txPacket 002C  
                 _nrf24l01CELow 1CE4                     _sendMessage 1F60                   _nrf24l01CSLow 07FD  
                    _INTCONbits 000B                 ?_nrf24l01CEHigh 0070                      _FVRCONbits 0117  
              ??i1_nrf24l01Send 0072                 ?_nrf24l01CSHigh 0070                  __pstringtext10 18A5  
                __pstringtext11 18AA                  __pstringtext12 18AF                  __pstringtext13 18B4  
                __pstringtext14 18B9                  __pstringtext15 18BE                  __pstringtext16 18C3  
                __pstringtext17 18C8                  __pstringtext18 18CD                  __pstringtext19 0000  
                      memset@p1 0025                        scale@scl 00AA                 ?_nrf24l01SPIEnd 0070  
                      intlevel1 0000                       sprintf@ap 00CB                       sprintf@cp 00CE  
              __tdiv_to_l_@exp1 002F                __tdiv_to_l_@cntr 002E                       sprintf@sp 00DC  
                  _n_ADDRESS_P0 18A0                __tdiv_to_l_@quot 002A       __size_of_enableInterrupts 0008  
              ___lwmod@dividend 0022                ___lldiv@dividend 0024               __CFG_CLKOUTEN$OFF 0000  
   nrf24l01InitRegisters@config 002F       __size_of_nrf24l01SPIStart 0008                  ?_nrf24l01CELow 0070  
                  ?__tdiv_to_l_ 0020                   __pstringtext1 1800                   __pstringtext2 1828  
                 __pstringtext3 184F                   __pstringtext4 1876                   __pstringtext5 18A0  
                 __pstringtext6 1881                   __pstringtext7 188C                   __pstringtext8 1893  
                 __pstringtext9 189A                  ?_nrf24l01CSLow 0070                        sprintf@c 00E0  
                      sprintf@f 00B9      nrf24l01InitRegisters@DynPD 002E                ___lldiv@quotient 0029  
               ___lwmod@divisor 0020                        strcpy@cp 0024                        strlen@cp 0024  
                      strcpy@to 0023                 ___lwmod@counter 0025                      _WDTCONbits 0097  
                 ?_nrf24l01Init 0070                   ?_nrf24l01Send 0020                    ?_nrf24l01ISR 0070  
