

Microchip Technology PIC LITE Macro Assembler V2.00 build -1524193055 
                                                                                               Sun Jul 22 19:59:10 2018

Microchip Technology Omniscient Code Generator v2.00 (Free mode) build 20180527130849
     1                           	processor	16LF18325
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	stringtext1,global,class=STRCODE,delta=2
     5                           	psect	stringtext2,global,class=STRCODE,delta=2
     6                           	psect	stringtext3,global,class=STRCODE,delta=2
     7                           	psect	stringtext4,global,class=STRCODE,delta=2
     8                           	psect	_romArray_text,global,class=STRCODE,delta=2
     9                           	psect	stringtext5,global,class=STRCODE,delta=2
    10                           	psect	stringtext6,global,class=STRCODE,delta=2
    11                           	psect	stringtext7,global,class=STRCODE,delta=2
    12                           	psect	stringtext8,global,class=STRCODE,delta=2
    13                           	psect	stringtext9,global,class=STRCODE,delta=2
    14                           	psect	stringtext10,global,class=STRCODE,delta=2
    15                           	psect	stringtext11,global,class=STRCODE,delta=2
    16                           	psect	stringtext12,global,class=STRCODE,delta=2
    17                           	psect	cinit,global,class=CODE,merge=1,delta=2
    18                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    19                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    20                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    21                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    22                           	psect	clrtext,global,class=CODE,delta=2
    23                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    24                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    25                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    26                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    27                           	psect	text1,local,class=CODE,merge=1,delta=2,group=2
    28                           	psect	text2,local,class=CODE,merge=1,delta=2
    29                           	psect	text3,local,class=CODE,merge=1,delta=2
    30                           	psect	text4,local,class=CODE,merge=1,delta=2
    31                           	psect	text5,local,class=CODE,merge=1,delta=2
    32                           	psect	text6,local,class=CODE,merge=1,delta=2,group=1
    33                           	psect	text7,local,class=CODE,merge=1,delta=2
    34                           	psect	text8,local,class=CODE,merge=1,delta=2
    35                           	psect	text9,local,class=CODE,merge=1,delta=2
    36                           	psect	text10,local,class=CODE,merge=1,delta=2
    37                           	psect	text11,local,class=CODE,merge=1,delta=2
    38                           	psect	text12,local,class=CODE,merge=1,delta=2,group=2
    39                           	psect	text13,local,class=CODE,merge=1,delta=2,group=2
    40                           	psect	text14,local,class=CODE,merge=1,delta=2,group=2
    41                           	psect	text15,local,class=CODE,merge=1,delta=2
    42                           	psect	text16,local,class=CODE,merge=1,delta=2,group=2
    43                           	psect	text17,local,class=CODE,merge=1,delta=2,group=1
    44                           	psect	text18,local,class=CODE,merge=1,delta=2,group=1
    45                           	psect	text19,local,class=CODE,merge=1,delta=2,group=1
    46                           	psect	text20,local,class=CODE,merge=1,delta=2,group=1
    47                           	psect	text21,local,class=CODE,merge=1,delta=2,group=1
    48                           	psect	text22,local,class=CODE,merge=1,delta=2,group=1
    49                           	psect	text23,local,class=CODE,merge=1,delta=2,group=1
    50                           	psect	text24,local,class=CODE,merge=1,delta=2,group=1
    51                           	psect	text25,local,class=CODE,merge=1,delta=2
    52                           	psect	text26,local,class=CODE,merge=1,delta=2,group=2
    53                           	psect	text27,local,class=CODE,merge=1,delta=2
    54                           	psect	text28,local,class=CODE,merge=1,delta=2
    55                           	psect	text29,local,class=CODE,merge=1,delta=2,group=1
    56                           	psect	text30,local,class=CODE,merge=1,delta=2,group=1
    57                           	psect	text31,local,class=CODE,merge=1,delta=2,group=1
    58                           	psect	text32,local,class=CODE,merge=1,delta=2,group=1
    59                           	psect	text33,local,class=CODE,merge=1,delta=2,group=1
    60                           	psect	text34,local,class=CODE,merge=1,delta=2,group=1
    61                           	psect	text35,local,class=CODE,merge=1,delta=2
    62                           	psect	text36,local,class=CODE,merge=1,delta=2
    63                           	psect	text37,local,class=CODE,merge=1,delta=2
    64                           	psect	text38,local,class=CODE,merge=1,delta=2
    65                           	psect	text39,local,class=CODE,merge=1,delta=2
    66                           	psect	text40,local,class=CODE,merge=1,delta=2
    67                           	psect	intentry,global,class=CODE,delta=2
    68                           	psect	text42,local,class=CODE,merge=1,delta=2
    69                           	psect	text43,local,class=CODE,merge=1,delta=2
    70                           	psect	text44,local,class=CODE,merge=1,delta=2
    71                           	psect	text45,local,class=CODE,merge=1,delta=2
    72                           	psect	text46,local,class=CODE,merge=1,delta=2
    73                           	psect	text47,local,class=CODE,merge=1,delta=2
    74                           	psect	text48,local,class=CODE,merge=1,delta=2
    75                           	psect	text49,local,class=CODE,merge=1,delta=2
    76                           	psect	text50,local,class=CODE,merge=1,delta=2
    77                           	psect	text51,local,class=CODE,merge=1,delta=2
    78                           	psect	text52,local,class=CODE,merge=1,delta=2
    79                           	psect	text53,local,class=CODE,merge=1,delta=2
    80                           	psect	text54,local,class=CODE,merge=1,delta=2
    81                           	psect	text55,local,class=CODE,merge=1,delta=2
    82                           	psect	text56,local,class=CODE,merge=1,delta=2,group=2
    83                           	psect	text57,local,class=CODE,merge=1,delta=2
    84                           	psect	text58,local,class=CODE,merge=1,delta=2
    85                           	psect	text59,local,class=CODE,merge=1,delta=2
    86                           	psect	text60,local,class=CODE,merge=1,delta=2
    87                           	dabs	1,0x7E,2
    88  0000                     
    89                           ; Version 2.00
    90                           ; Generated 27/05/2018 GMT
    91                           ; 
    92                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
    93                           ; All rights reserved.
    94                           ; 
    95                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    96                           ; 
    97                           ; Redistribution and use in source and binary forms, with or without modification, are
    98                           ; permitted provided that the following conditions are met:
    99                           ; 
   100                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   101                           ;        conditions and the following disclaimer.
   102                           ; 
   103                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   104                           ;        of conditions and the following disclaimer in the documentation and/or other
   105                           ;        materials provided with the distribution.
   106                           ; 
   107                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   108                           ;        software without specific prior written permission.
   109                           ; 
   110                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   111                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   112                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   113                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   114                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   115                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   116                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   117                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   118                           ; 
   119                           ; 
   120                           ; Code-generator required, PIC16LF18325 Definitions
   121                           ; 
   122                           ; SFR Addresses
   123  0000                     	;# 
   124  0001                     	;# 
   125  0002                     	;# 
   126  0003                     	;# 
   127  0004                     	;# 
   128  0005                     	;# 
   129  0006                     	;# 
   130  0007                     	;# 
   131  0008                     	;# 
   132  0009                     	;# 
   133  000A                     	;# 
   134  000B                     	;# 
   135  000C                     	;# 
   136  000E                     	;# 
   137  0010                     	;# 
   138  0011                     	;# 
   139  0012                     	;# 
   140  0013                     	;# 
   141  0014                     	;# 
   142  0015                     	;# 
   143  0015                     	;# 
   144  0016                     	;# 
   145  0016                     	;# 
   146  0017                     	;# 
   147  0018                     	;# 
   148  0019                     	;# 
   149  0019                     	;# 
   150  001A                     	;# 
   151  001B                     	;# 
   152  001C                     	;# 
   153  001D                     	;# 
   154  001E                     	;# 
   155  001F                     	;# 
   156  008C                     	;# 
   157  008E                     	;# 
   158  0090                     	;# 
   159  0091                     	;# 
   160  0092                     	;# 
   161  0093                     	;# 
   162  0094                     	;# 
   163  0097                     	;# 
   164  009B                     	;# 
   165  009B                     	;# 
   166  009C                     	;# 
   167  009D                     	;# 
   168  009E                     	;# 
   169  009F                     	;# 
   170  010C                     	;# 
   171  010E                     	;# 
   172  0111                     	;# 
   173  0112                     	;# 
   174  0113                     	;# 
   175  0114                     	;# 
   176  0115                     	;# 
   177  0116                     	;# 
   178  0117                     	;# 
   179  0118                     	;# 
   180  0119                     	;# 
   181  018C                     	;# 
   182  018E                     	;# 
   183  0199                     	;# 
   184  0199                     	;# 
   185  0199                     	;# 
   186  019A                     	;# 
   187  019A                     	;# 
   188  019A                     	;# 
   189  019B                     	;# 
   190  019B                     	;# 
   191  019B                     	;# 
   192  019B                     	;# 
   193  019B                     	;# 
   194  019C                     	;# 
   195  019C                     	;# 
   196  019C                     	;# 
   197  019D                     	;# 
   198  019D                     	;# 
   199  019D                     	;# 
   200  019E                     	;# 
   201  019E                     	;# 
   202  019E                     	;# 
   203  019F                     	;# 
   204  019F                     	;# 
   205  019F                     	;# 
   206  019F                     	;# 
   207  019F                     	;# 
   208  020C                     	;# 
   209  020E                     	;# 
   210  0211                     	;# 
   211  0211                     	;# 
   212  0212                     	;# 
   213  0212                     	;# 
   214  0213                     	;# 
   215  0213                     	;# 
   216  0214                     	;# 
   217  0214                     	;# 
   218  0215                     	;# 
   219  0215                     	;# 
   220  0215                     	;# 
   221  0215                     	;# 
   222  0216                     	;# 
   223  0216                     	;# 
   224  0217                     	;# 
   225  0217                     	;# 
   226  0219                     	;# 
   227  021A                     	;# 
   228  021B                     	;# 
   229  021C                     	;# 
   230  021D                     	;# 
   231  021D                     	;# 
   232  021E                     	;# 
   233  021F                     	;# 
   234  028C                     	;# 
   235  028E                     	;# 
   236  0291                     	;# 
   237  0291                     	;# 
   238  0292                     	;# 
   239  0293                     	;# 
   240  0294                     	;# 
   241  0295                     	;# 
   242  0295                     	;# 
   243  0296                     	;# 
   244  0297                     	;# 
   245  0298                     	;# 
   246  029F                     	;# 
   247  030C                     	;# 
   248  030E                     	;# 
   249  0311                     	;# 
   250  0311                     	;# 
   251  0312                     	;# 
   252  0313                     	;# 
   253  0314                     	;# 
   254  0315                     	;# 
   255  0315                     	;# 
   256  0316                     	;# 
   257  0317                     	;# 
   258  0318                     	;# 
   259  038C                     	;# 
   260  038E                     	;# 
   261  0391                     	;# 
   262  0392                     	;# 
   263  0393                     	;# 
   264  0397                     	;# 
   265  0398                     	;# 
   266  0399                     	;# 
   267  039A                     	;# 
   268  039C                     	;# 
   269  039D                     	;# 
   270  039E                     	;# 
   271  039F                     	;# 
   272  0411                     	;# 
   273  0411                     	;# 
   274  0412                     	;# 
   275  0413                     	;# 
   276  0414                     	;# 
   277  0415                     	;# 
   278  0416                     	;# 
   279  0417                     	;# 
   280  0418                     	;# 
   281  0418                     	;# 
   282  0419                     	;# 
   283  041A                     	;# 
   284  041B                     	;# 
   285  041C                     	;# 
   286  041D                     	;# 
   287  041E                     	;# 
   288  041F                     	;# 
   289  0498                     	;# 
   290  0498                     	;# 
   291  0499                     	;# 
   292  049A                     	;# 
   293  049B                     	;# 
   294  049B                     	;# 
   295  049C                     	;# 
   296  049D                     	;# 
   297  049E                     	;# 
   298  049F                     	;# 
   299  0617                     	;# 
   300  0618                     	;# 
   301  0619                     	;# 
   302  0619                     	;# 
   303  061A                     	;# 
   304  061B                     	;# 
   305  061C                     	;# 
   306  061C                     	;# 
   307  061F                     	;# 
   308  0691                     	;# 
   309  0692                     	;# 
   310  0693                     	;# 
   311  0694                     	;# 
   312  0695                     	;# 
   313  0696                     	;# 
   314  0697                     	;# 
   315  0698                     	;# 
   316  0699                     	;# 
   317  0711                     	;# 
   318  0712                     	;# 
   319  0713                     	;# 
   320  0714                     	;# 
   321  0715                     	;# 
   322  0716                     	;# 
   323  0717                     	;# 
   324  0718                     	;# 
   325  0719                     	;# 
   326  0891                     	;# 
   327  0891                     	;# 
   328  0891                     	;# 
   329  0891                     	;# 
   330  0891                     	;# 
   331  0891                     	;# 
   332  0892                     	;# 
   333  0892                     	;# 
   334  0892                     	;# 
   335  0893                     	;# 
   336  0893                     	;# 
   337  0893                     	;# 
   338  0893                     	;# 
   339  0893                     	;# 
   340  0893                     	;# 
   341  0894                     	;# 
   342  0894                     	;# 
   343  0894                     	;# 
   344  0895                     	;# 
   345  0895                     	;# 
   346  0895                     	;# 
   347  0896                     	;# 
   348  0896                     	;# 
   349  0896                     	;# 
   350  089B                     	;# 
   351  0911                     	;# 
   352  0912                     	;# 
   353  0913                     	;# 
   354  0914                     	;# 
   355  0915                     	;# 
   356  0916                     	;# 
   357  0918                     	;# 
   358  0919                     	;# 
   359  091A                     	;# 
   360  091B                     	;# 
   361  091C                     	;# 
   362  091D                     	;# 
   363  091E                     	;# 
   364  091F                     	;# 
   365  0E0F                     	;# 
   366  0E10                     	;# 
   367  0E11                     	;# 
   368  0E12                     	;# 
   369  0E13                     	;# 
   370  0E14                     	;# 
   371  0E15                     	;# 
   372  0E16                     	;# 
   373  0E17                     	;# 
   374  0E18                     	;# 
   375  0E19                     	;# 
   376  0E1A                     	;# 
   377  0E1B                     	;# 
   378  0E1C                     	;# 
   379  0E1D                     	;# 
   380  0E1E                     	;# 
   381  0E1F                     	;# 
   382  0E20                     	;# 
   383  0E21                     	;# 
   384  0E22                     	;# 
   385  0E24                     	;# 
   386  0E25                     	;# 
   387  0E28                     	;# 
   388  0E29                     	;# 
   389  0E2A                     	;# 
   390  0E2B                     	;# 
   391  0E2C                     	;# 
   392  0E2D                     	;# 
   393  0E2E                     	;# 
   394  0E2F                     	;# 
   395  0E90                     	;# 
   396  0E91                     	;# 
   397  0E92                     	;# 
   398  0E94                     	;# 
   399  0E95                     	;# 
   400  0EA0                     	;# 
   401  0EA1                     	;# 
   402  0EA2                     	;# 
   403  0EA3                     	;# 
   404  0EA4                     	;# 
   405  0EA5                     	;# 
   406  0F0F                     	;# 
   407  0F10                     	;# 
   408  0F11                     	;# 
   409  0F12                     	;# 
   410  0F13                     	;# 
   411  0F14                     	;# 
   412  0F15                     	;# 
   413  0F16                     	;# 
   414  0F17                     	;# 
   415  0F18                     	;# 
   416  0F19                     	;# 
   417  0F1A                     	;# 
   418  0F1B                     	;# 
   419  0F1C                     	;# 
   420  0F1D                     	;# 
   421  0F1E                     	;# 
   422  0F1F                     	;# 
   423  0F20                     	;# 
   424  0F21                     	;# 
   425  0F22                     	;# 
   426  0F23                     	;# 
   427  0F24                     	;# 
   428  0F25                     	;# 
   429  0F26                     	;# 
   430  0F27                     	;# 
   431  0F28                     	;# 
   432  0F29                     	;# 
   433  0F2A                     	;# 
   434  0F2B                     	;# 
   435  0F2C                     	;# 
   436  0F2D                     	;# 
   437  0F2E                     	;# 
   438  0F2F                     	;# 
   439  0F30                     	;# 
   440  0F31                     	;# 
   441  0F32                     	;# 
   442  0F33                     	;# 
   443  0F34                     	;# 
   444  0F35                     	;# 
   445  0F36                     	;# 
   446  0F37                     	;# 
   447  0FE4                     	;# 
   448  0FE5                     	;# 
   449  0FE6                     	;# 
   450  0FE7                     	;# 
   451  0FE8                     	;# 
   452  0FE9                     	;# 
   453  0FEA                     	;# 
   454  0FEB                     	;# 
   455  0FED                     	;# 
   456  0FEE                     	;# 
   457  0FEF                     	;# 
   458  0000                     	;# 
   459  0001                     	;# 
   460  0002                     	;# 
   461  0003                     	;# 
   462  0004                     	;# 
   463  0005                     	;# 
   464  0006                     	;# 
   465  0007                     	;# 
   466  0008                     	;# 
   467  0009                     	;# 
   468  000A                     	;# 
   469  000B                     	;# 
   470  000C                     	;# 
   471  000E                     	;# 
   472  0010                     	;# 
   473  0011                     	;# 
   474  0012                     	;# 
   475  0013                     	;# 
   476  0014                     	;# 
   477  0015                     	;# 
   478  0015                     	;# 
   479  0016                     	;# 
   480  0016                     	;# 
   481  0017                     	;# 
   482  0018                     	;# 
   483  0019                     	;# 
   484  0019                     	;# 
   485  001A                     	;# 
   486  001B                     	;# 
   487  001C                     	;# 
   488  001D                     	;# 
   489  001E                     	;# 
   490  001F                     	;# 
   491  008C                     	;# 
   492  008E                     	;# 
   493  0090                     	;# 
   494  0091                     	;# 
   495  0092                     	;# 
   496  0093                     	;# 
   497  0094                     	;# 
   498  0097                     	;# 
   499  009B                     	;# 
   500  009B                     	;# 
   501  009C                     	;# 
   502  009D                     	;# 
   503  009E                     	;# 
   504  009F                     	;# 
   505  010C                     	;# 
   506  010E                     	;# 
   507  0111                     	;# 
   508  0112                     	;# 
   509  0113                     	;# 
   510  0114                     	;# 
   511  0115                     	;# 
   512  0116                     	;# 
   513  0117                     	;# 
   514  0118                     	;# 
   515  0119                     	;# 
   516  018C                     	;# 
   517  018E                     	;# 
   518  0199                     	;# 
   519  0199                     	;# 
   520  0199                     	;# 
   521  019A                     	;# 
   522  019A                     	;# 
   523  019A                     	;# 
   524  019B                     	;# 
   525  019B                     	;# 
   526  019B                     	;# 
   527  019B                     	;# 
   528  019B                     	;# 
   529  019C                     	;# 
   530  019C                     	;# 
   531  019C                     	;# 
   532  019D                     	;# 
   533  019D                     	;# 
   534  019D                     	;# 
   535  019E                     	;# 
   536  019E                     	;# 
   537  019E                     	;# 
   538  019F                     	;# 
   539  019F                     	;# 
   540  019F                     	;# 
   541  019F                     	;# 
   542  019F                     	;# 
   543  020C                     	;# 
   544  020E                     	;# 
   545  0211                     	;# 
   546  0211                     	;# 
   547  0212                     	;# 
   548  0212                     	;# 
   549  0213                     	;# 
   550  0213                     	;# 
   551  0214                     	;# 
   552  0214                     	;# 
   553  0215                     	;# 
   554  0215                     	;# 
   555  0215                     	;# 
   556  0215                     	;# 
   557  0216                     	;# 
   558  0216                     	;# 
   559  0217                     	;# 
   560  0217                     	;# 
   561  0219                     	;# 
   562  021A                     	;# 
   563  021B                     	;# 
   564  021C                     	;# 
   565  021D                     	;# 
   566  021D                     	;# 
   567  021E                     	;# 
   568  021F                     	;# 
   569  028C                     	;# 
   570  028E                     	;# 
   571  0291                     	;# 
   572  0291                     	;# 
   573  0292                     	;# 
   574  0293                     	;# 
   575  0294                     	;# 
   576  0295                     	;# 
   577  0295                     	;# 
   578  0296                     	;# 
   579  0297                     	;# 
   580  0298                     	;# 
   581  029F                     	;# 
   582  030C                     	;# 
   583  030E                     	;# 
   584  0311                     	;# 
   585  0311                     	;# 
   586  0312                     	;# 
   587  0313                     	;# 
   588  0314                     	;# 
   589  0315                     	;# 
   590  0315                     	;# 
   591  0316                     	;# 
   592  0317                     	;# 
   593  0318                     	;# 
   594  038C                     	;# 
   595  038E                     	;# 
   596  0391                     	;# 
   597  0392                     	;# 
   598  0393                     	;# 
   599  0397                     	;# 
   600  0398                     	;# 
   601  0399                     	;# 
   602  039A                     	;# 
   603  039C                     	;# 
   604  039D                     	;# 
   605  039E                     	;# 
   606  039F                     	;# 
   607  0411                     	;# 
   608  0411                     	;# 
   609  0412                     	;# 
   610  0413                     	;# 
   611  0414                     	;# 
   612  0415                     	;# 
   613  0416                     	;# 
   614  0417                     	;# 
   615  0418                     	;# 
   616  0418                     	;# 
   617  0419                     	;# 
   618  041A                     	;# 
   619  041B                     	;# 
   620  041C                     	;# 
   621  041D                     	;# 
   622  041E                     	;# 
   623  041F                     	;# 
   624  0498                     	;# 
   625  0498                     	;# 
   626  0499                     	;# 
   627  049A                     	;# 
   628  049B                     	;# 
   629  049B                     	;# 
   630  049C                     	;# 
   631  049D                     	;# 
   632  049E                     	;# 
   633  049F                     	;# 
   634  0617                     	;# 
   635  0618                     	;# 
   636  0619                     	;# 
   637  0619                     	;# 
   638  061A                     	;# 
   639  061B                     	;# 
   640  061C                     	;# 
   641  061C                     	;# 
   642  061F                     	;# 
   643  0691                     	;# 
   644  0692                     	;# 
   645  0693                     	;# 
   646  0694                     	;# 
   647  0695                     	;# 
   648  0696                     	;# 
   649  0697                     	;# 
   650  0698                     	;# 
   651  0699                     	;# 
   652  0711                     	;# 
   653  0712                     	;# 
   654  0713                     	;# 
   655  0714                     	;# 
   656  0715                     	;# 
   657  0716                     	;# 
   658  0717                     	;# 
   659  0718                     	;# 
   660  0719                     	;# 
   661  0891                     	;# 
   662  0891                     	;# 
   663  0891                     	;# 
   664  0891                     	;# 
   665  0891                     	;# 
   666  0891                     	;# 
   667  0892                     	;# 
   668  0892                     	;# 
   669  0892                     	;# 
   670  0893                     	;# 
   671  0893                     	;# 
   672  0893                     	;# 
   673  0893                     	;# 
   674  0893                     	;# 
   675  0893                     	;# 
   676  0894                     	;# 
   677  0894                     	;# 
   678  0894                     	;# 
   679  0895                     	;# 
   680  0895                     	;# 
   681  0895                     	;# 
   682  0896                     	;# 
   683  0896                     	;# 
   684  0896                     	;# 
   685  089B                     	;# 
   686  0911                     	;# 
   687  0912                     	;# 
   688  0913                     	;# 
   689  0914                     	;# 
   690  0915                     	;# 
   691  0916                     	;# 
   692  0918                     	;# 
   693  0919                     	;# 
   694  091A                     	;# 
   695  091B                     	;# 
   696  091C                     	;# 
   697  091D                     	;# 
   698  091E                     	;# 
   699  091F                     	;# 
   700  0E0F                     	;# 
   701  0E10                     	;# 
   702  0E11                     	;# 
   703  0E12                     	;# 
   704  0E13                     	;# 
   705  0E14                     	;# 
   706  0E15                     	;# 
   707  0E16                     	;# 
   708  0E17                     	;# 
   709  0E18                     	;# 
   710  0E19                     	;# 
   711  0E1A                     	;# 
   712  0E1B                     	;# 
   713  0E1C                     	;# 
   714  0E1D                     	;# 
   715  0E1E                     	;# 
   716  0E1F                     	;# 
   717  0E20                     	;# 
   718  0E21                     	;# 
   719  0E22                     	;# 
   720  0E24                     	;# 
   721  0E25                     	;# 
   722  0E28                     	;# 
   723  0E29                     	;# 
   724  0E2A                     	;# 
   725  0E2B                     	;# 
   726  0E2C                     	;# 
   727  0E2D                     	;# 
   728  0E2E                     	;# 
   729  0E2F                     	;# 
   730  0E90                     	;# 
   731  0E91                     	;# 
   732  0E92                     	;# 
   733  0E94                     	;# 
   734  0E95                     	;# 
   735  0EA0                     	;# 
   736  0EA1                     	;# 
   737  0EA2                     	;# 
   738  0EA3                     	;# 
   739  0EA4                     	;# 
   740  0EA5                     	;# 
   741  0F0F                     	;# 
   742  0F10                     	;# 
   743  0F11                     	;# 
   744  0F12                     	;# 
   745  0F13                     	;# 
   746  0F14                     	;# 
   747  0F15                     	;# 
   748  0F16                     	;# 
   749  0F17                     	;# 
   750  0F18                     	;# 
   751  0F19                     	;# 
   752  0F1A                     	;# 
   753  0F1B                     	;# 
   754  0F1C                     	;# 
   755  0F1D                     	;# 
   756  0F1E                     	;# 
   757  0F1F                     	;# 
   758  0F20                     	;# 
   759  0F21                     	;# 
   760  0F22                     	;# 
   761  0F23                     	;# 
   762  0F24                     	;# 
   763  0F25                     	;# 
   764  0F26                     	;# 
   765  0F27                     	;# 
   766  0F28                     	;# 
   767  0F29                     	;# 
   768  0F2A                     	;# 
   769  0F2B                     	;# 
   770  0F2C                     	;# 
   771  0F2D                     	;# 
   772  0F2E                     	;# 
   773  0F2F                     	;# 
   774  0F30                     	;# 
   775  0F31                     	;# 
   776  0F32                     	;# 
   777  0F33                     	;# 
   778  0F34                     	;# 
   779  0F35                     	;# 
   780  0F36                     	;# 
   781  0F37                     	;# 
   782  0FE4                     	;# 
   783  0FE5                     	;# 
   784  0FE6                     	;# 
   785  0FE7                     	;# 
   786  0FE8                     	;# 
   787  0FE9                     	;# 
   788  0FEA                     	;# 
   789  0FEB                     	;# 
   790  0FED                     	;# 
   791  0FEE                     	;# 
   792  0FEF                     	;# 
   793  0000                     	;# 
   794  0001                     	;# 
   795  0002                     	;# 
   796  0003                     	;# 
   797  0004                     	;# 
   798  0005                     	;# 
   799  0006                     	;# 
   800  0007                     	;# 
   801  0008                     	;# 
   802  0009                     	;# 
   803  000A                     	;# 
   804  000B                     	;# 
   805  000C                     	;# 
   806  000E                     	;# 
   807  0010                     	;# 
   808  0011                     	;# 
   809  0012                     	;# 
   810  0013                     	;# 
   811  0014                     	;# 
   812  0015                     	;# 
   813  0015                     	;# 
   814  0016                     	;# 
   815  0016                     	;# 
   816  0017                     	;# 
   817  0018                     	;# 
   818  0019                     	;# 
   819  0019                     	;# 
   820  001A                     	;# 
   821  001B                     	;# 
   822  001C                     	;# 
   823  001D                     	;# 
   824  001E                     	;# 
   825  001F                     	;# 
   826  008C                     	;# 
   827  008E                     	;# 
   828  0090                     	;# 
   829  0091                     	;# 
   830  0092                     	;# 
   831  0093                     	;# 
   832  0094                     	;# 
   833  0097                     	;# 
   834  009B                     	;# 
   835  009B                     	;# 
   836  009C                     	;# 
   837  009D                     	;# 
   838  009E                     	;# 
   839  009F                     	;# 
   840  010C                     	;# 
   841  010E                     	;# 
   842  0111                     	;# 
   843  0112                     	;# 
   844  0113                     	;# 
   845  0114                     	;# 
   846  0115                     	;# 
   847  0116                     	;# 
   848  0117                     	;# 
   849  0118                     	;# 
   850  0119                     	;# 
   851  018C                     	;# 
   852  018E                     	;# 
   853  0199                     	;# 
   854  0199                     	;# 
   855  0199                     	;# 
   856  019A                     	;# 
   857  019A                     	;# 
   858  019A                     	;# 
   859  019B                     	;# 
   860  019B                     	;# 
   861  019B                     	;# 
   862  019B                     	;# 
   863  019B                     	;# 
   864  019C                     	;# 
   865  019C                     	;# 
   866  019C                     	;# 
   867  019D                     	;# 
   868  019D                     	;# 
   869  019D                     	;# 
   870  019E                     	;# 
   871  019E                     	;# 
   872  019E                     	;# 
   873  019F                     	;# 
   874  019F                     	;# 
   875  019F                     	;# 
   876  019F                     	;# 
   877  019F                     	;# 
   878  020C                     	;# 
   879  020E                     	;# 
   880  0211                     	;# 
   881  0211                     	;# 
   882  0212                     	;# 
   883  0212                     	;# 
   884  0213                     	;# 
   885  0213                     	;# 
   886  0214                     	;# 
   887  0214                     	;# 
   888  0215                     	;# 
   889  0215                     	;# 
   890  0215                     	;# 
   891  0215                     	;# 
   892  0216                     	;# 
   893  0216                     	;# 
   894  0217                     	;# 
   895  0217                     	;# 
   896  0219                     	;# 
   897  021A                     	;# 
   898  021B                     	;# 
   899  021C                     	;# 
   900  021D                     	;# 
   901  021D                     	;# 
   902  021E                     	;# 
   903  021F                     	;# 
   904  028C                     	;# 
   905  028E                     	;# 
   906  0291                     	;# 
   907  0291                     	;# 
   908  0292                     	;# 
   909  0293                     	;# 
   910  0294                     	;# 
   911  0295                     	;# 
   912  0295                     	;# 
   913  0296                     	;# 
   914  0297                     	;# 
   915  0298                     	;# 
   916  029F                     	;# 
   917  030C                     	;# 
   918  030E                     	;# 
   919  0311                     	;# 
   920  0311                     	;# 
   921  0312                     	;# 
   922  0313                     	;# 
   923  0314                     	;# 
   924  0315                     	;# 
   925  0315                     	;# 
   926  0316                     	;# 
   927  0317                     	;# 
   928  0318                     	;# 
   929  038C                     	;# 
   930  038E                     	;# 
   931  0391                     	;# 
   932  0392                     	;# 
   933  0393                     	;# 
   934  0397                     	;# 
   935  0398                     	;# 
   936  0399                     	;# 
   937  039A                     	;# 
   938  039C                     	;# 
   939  039D                     	;# 
   940  039E                     	;# 
   941  039F                     	;# 
   942  0411                     	;# 
   943  0411                     	;# 
   944  0412                     	;# 
   945  0413                     	;# 
   946  0414                     	;# 
   947  0415                     	;# 
   948  0416                     	;# 
   949  0417                     	;# 
   950  0418                     	;# 
   951  0418                     	;# 
   952  0419                     	;# 
   953  041A                     	;# 
   954  041B                     	;# 
   955  041C                     	;# 
   956  041D                     	;# 
   957  041E                     	;# 
   958  041F                     	;# 
   959  0498                     	;# 
   960  0498                     	;# 
   961  0499                     	;# 
   962  049A                     	;# 
   963  049B                     	;# 
   964  049B                     	;# 
   965  049C                     	;# 
   966  049D                     	;# 
   967  049E                     	;# 
   968  049F                     	;# 
   969  0617                     	;# 
   970  0618                     	;# 
   971  0619                     	;# 
   972  0619                     	;# 
   973  061A                     	;# 
   974  061B                     	;# 
   975  061C                     	;# 
   976  061C                     	;# 
   977  061F                     	;# 
   978  0691                     	;# 
   979  0692                     	;# 
   980  0693                     	;# 
   981  0694                     	;# 
   982  0695                     	;# 
   983  0696                     	;# 
   984  0697                     	;# 
   985  0698                     	;# 
   986  0699                     	;# 
   987  0711                     	;# 
   988  0712                     	;# 
   989  0713                     	;# 
   990  0714                     	;# 
   991  0715                     	;# 
   992  0716                     	;# 
   993  0717                     	;# 
   994  0718                     	;# 
   995  0719                     	;# 
   996  0891                     	;# 
   997  0891                     	;# 
   998  0891                     	;# 
   999  0891                     	;# 
  1000  0891                     	;# 
  1001  0891                     	;# 
  1002  0892                     	;# 
  1003  0892                     	;# 
  1004  0892                     	;# 
  1005  0893                     	;# 
  1006  0893                     	;# 
  1007  0893                     	;# 
  1008  0893                     	;# 
  1009  0893                     	;# 
  1010  0893                     	;# 
  1011  0894                     	;# 
  1012  0894                     	;# 
  1013  0894                     	;# 
  1014  0895                     	;# 
  1015  0895                     	;# 
  1016  0895                     	;# 
  1017  0896                     	;# 
  1018  0896                     	;# 
  1019  0896                     	;# 
  1020  089B                     	;# 
  1021  0911                     	;# 
  1022  0912                     	;# 
  1023  0913                     	;# 
  1024  0914                     	;# 
  1025  0915                     	;# 
  1026  0916                     	;# 
  1027  0918                     	;# 
  1028  0919                     	;# 
  1029  091A                     	;# 
  1030  091B                     	;# 
  1031  091C                     	;# 
  1032  091D                     	;# 
  1033  091E                     	;# 
  1034  091F                     	;# 
  1035  0E0F                     	;# 
  1036  0E10                     	;# 
  1037  0E11                     	;# 
  1038  0E12                     	;# 
  1039  0E13                     	;# 
  1040  0E14                     	;# 
  1041  0E15                     	;# 
  1042  0E16                     	;# 
  1043  0E17                     	;# 
  1044  0E18                     	;# 
  1045  0E19                     	;# 
  1046  0E1A                     	;# 
  1047  0E1B                     	;# 
  1048  0E1C                     	;# 
  1049  0E1D                     	;# 
  1050  0E1E                     	;# 
  1051  0E1F                     	;# 
  1052  0E20                     	;# 
  1053  0E21                     	;# 
  1054  0E22                     	;# 
  1055  0E24                     	;# 
  1056  0E25                     	;# 
  1057  0E28                     	;# 
  1058  0E29                     	;# 
  1059  0E2A                     	;# 
  1060  0E2B                     	;# 
  1061  0E2C                     	;# 
  1062  0E2D                     	;# 
  1063  0E2E                     	;# 
  1064  0E2F                     	;# 
  1065  0E90                     	;# 
  1066  0E91                     	;# 
  1067  0E92                     	;# 
  1068  0E94                     	;# 
  1069  0E95                     	;# 
  1070  0EA0                     	;# 
  1071  0EA1                     	;# 
  1072  0EA2                     	;# 
  1073  0EA3                     	;# 
  1074  0EA4                     	;# 
  1075  0EA5                     	;# 
  1076  0F0F                     	;# 
  1077  0F10                     	;# 
  1078  0F11                     	;# 
  1079  0F12                     	;# 
  1080  0F13                     	;# 
  1081  0F14                     	;# 
  1082  0F15                     	;# 
  1083  0F16                     	;# 
  1084  0F17                     	;# 
  1085  0F18                     	;# 
  1086  0F19                     	;# 
  1087  0F1A                     	;# 
  1088  0F1B                     	;# 
  1089  0F1C                     	;# 
  1090  0F1D                     	;# 
  1091  0F1E                     	;# 
  1092  0F1F                     	;# 
  1093  0F20                     	;# 
  1094  0F21                     	;# 
  1095  0F22                     	;# 
  1096  0F23                     	;# 
  1097  0F24                     	;# 
  1098  0F25                     	;# 
  1099  0F26                     	;# 
  1100  0F27                     	;# 
  1101  0F28                     	;# 
  1102  0F29                     	;# 
  1103  0F2A                     	;# 
  1104  0F2B                     	;# 
  1105  0F2C                     	;# 
  1106  0F2D                     	;# 
  1107  0F2E                     	;# 
  1108  0F2F                     	;# 
  1109  0F30                     	;# 
  1110  0F31                     	;# 
  1111  0F32                     	;# 
  1112  0F33                     	;# 
  1113  0F34                     	;# 
  1114  0F35                     	;# 
  1115  0F36                     	;# 
  1116  0F37                     	;# 
  1117  0FE4                     	;# 
  1118  0FE5                     	;# 
  1119  0FE6                     	;# 
  1120  0FE7                     	;# 
  1121  0FE8                     	;# 
  1122  0FE9                     	;# 
  1123  0FEA                     	;# 
  1124  0FEB                     	;# 
  1125  0FED                     	;# 
  1126  0FEE                     	;# 
  1127  0FEF                     	;# 
  1128  0000                     	;# 
  1129  0001                     	;# 
  1130  0002                     	;# 
  1131  0003                     	;# 
  1132  0004                     	;# 
  1133  0005                     	;# 
  1134  0006                     	;# 
  1135  0007                     	;# 
  1136  0008                     	;# 
  1137  0009                     	;# 
  1138  000A                     	;# 
  1139  000B                     	;# 
  1140  000C                     	;# 
  1141  000E                     	;# 
  1142  0010                     	;# 
  1143  0011                     	;# 
  1144  0012                     	;# 
  1145  0013                     	;# 
  1146  0014                     	;# 
  1147  0015                     	;# 
  1148  0015                     	;# 
  1149  0016                     	;# 
  1150  0016                     	;# 
  1151  0017                     	;# 
  1152  0018                     	;# 
  1153  0019                     	;# 
  1154  0019                     	;# 
  1155  001A                     	;# 
  1156  001B                     	;# 
  1157  001C                     	;# 
  1158  001D                     	;# 
  1159  001E                     	;# 
  1160  001F                     	;# 
  1161  008C                     	;# 
  1162  008E                     	;# 
  1163  0090                     	;# 
  1164  0091                     	;# 
  1165  0092                     	;# 
  1166  0093                     	;# 
  1167  0094                     	;# 
  1168  0097                     	;# 
  1169  009B                     	;# 
  1170  009B                     	;# 
  1171  009C                     	;# 
  1172  009D                     	;# 
  1173  009E                     	;# 
  1174  009F                     	;# 
  1175  010C                     	;# 
  1176  010E                     	;# 
  1177  0111                     	;# 
  1178  0112                     	;# 
  1179  0113                     	;# 
  1180  0114                     	;# 
  1181  0115                     	;# 
  1182  0116                     	;# 
  1183  0117                     	;# 
  1184  0118                     	;# 
  1185  0119                     	;# 
  1186  018C                     	;# 
  1187  018E                     	;# 
  1188  0199                     	;# 
  1189  0199                     	;# 
  1190  0199                     	;# 
  1191  019A                     	;# 
  1192  019A                     	;# 
  1193  019A                     	;# 
  1194  019B                     	;# 
  1195  019B                     	;# 
  1196  019B                     	;# 
  1197  019B                     	;# 
  1198  019B                     	;# 
  1199  019C                     	;# 
  1200  019C                     	;# 
  1201  019C                     	;# 
  1202  019D                     	;# 
  1203  019D                     	;# 
  1204  019D                     	;# 
  1205  019E                     	;# 
  1206  019E                     	;# 
  1207  019E                     	;# 
  1208  019F                     	;# 
  1209  019F                     	;# 
  1210  019F                     	;# 
  1211  019F                     	;# 
  1212  019F                     	;# 
  1213  020C                     	;# 
  1214  020E                     	;# 
  1215  0211                     	;# 
  1216  0211                     	;# 
  1217  0212                     	;# 
  1218  0212                     	;# 
  1219  0213                     	;# 
  1220  0213                     	;# 
  1221  0214                     	;# 
  1222  0214                     	;# 
  1223  0215                     	;# 
  1224  0215                     	;# 
  1225  0215                     	;# 
  1226  0215                     	;# 
  1227  0216                     	;# 
  1228  0216                     	;# 
  1229  0217                     	;# 
  1230  0217                     	;# 
  1231  0219                     	;# 
  1232  021A                     	;# 
  1233  021B                     	;# 
  1234  021C                     	;# 
  1235  021D                     	;# 
  1236  021D                     	;# 
  1237  021E                     	;# 
  1238  021F                     	;# 
  1239  028C                     	;# 
  1240  028E                     	;# 
  1241  0291                     	;# 
  1242  0291                     	;# 
  1243  0292                     	;# 
  1244  0293                     	;# 
  1245  0294                     	;# 
  1246  0295                     	;# 
  1247  0295                     	;# 
  1248  0296                     	;# 
  1249  0297                     	;# 
  1250  0298                     	;# 
  1251  029F                     	;# 
  1252  030C                     	;# 
  1253  030E                     	;# 
  1254  0311                     	;# 
  1255  0311                     	;# 
  1256  0312                     	;# 
  1257  0313                     	;# 
  1258  0314                     	;# 
  1259  0315                     	;# 
  1260  0315                     	;# 
  1261  0316                     	;# 
  1262  0317                     	;# 
  1263  0318                     	;# 
  1264  038C                     	;# 
  1265  038E                     	;# 
  1266  0391                     	;# 
  1267  0392                     	;# 
  1268  0393                     	;# 
  1269  0397                     	;# 
  1270  0398                     	;# 
  1271  0399                     	;# 
  1272  039A                     	;# 
  1273  039C                     	;# 
  1274  039D                     	;# 
  1275  039E                     	;# 
  1276  039F                     	;# 
  1277  0411                     	;# 
  1278  0411                     	;# 
  1279  0412                     	;# 
  1280  0413                     	;# 
  1281  0414                     	;# 
  1282  0415                     	;# 
  1283  0416                     	;# 
  1284  0417                     	;# 
  1285  0418                     	;# 
  1286  0418                     	;# 
  1287  0419                     	;# 
  1288  041A                     	;# 
  1289  041B                     	;# 
  1290  041C                     	;# 
  1291  041D                     	;# 
  1292  041E                     	;# 
  1293  041F                     	;# 
  1294  0498                     	;# 
  1295  0498                     	;# 
  1296  0499                     	;# 
  1297  049A                     	;# 
  1298  049B                     	;# 
  1299  049B                     	;# 
  1300  049C                     	;# 
  1301  049D                     	;# 
  1302  049E                     	;# 
  1303  049F                     	;# 
  1304  0617                     	;# 
  1305  0618                     	;# 
  1306  0619                     	;# 
  1307  0619                     	;# 
  1308  061A                     	;# 
  1309  061B                     	;# 
  1310  061C                     	;# 
  1311  061C                     	;# 
  1312  061F                     	;# 
  1313  0691                     	;# 
  1314  0692                     	;# 
  1315  0693                     	;# 
  1316  0694                     	;# 
  1317  0695                     	;# 
  1318  0696                     	;# 
  1319  0697                     	;# 
  1320  0698                     	;# 
  1321  0699                     	;# 
  1322  0711                     	;# 
  1323  0712                     	;# 
  1324  0713                     	;# 
  1325  0714                     	;# 
  1326  0715                     	;# 
  1327  0716                     	;# 
  1328  0717                     	;# 
  1329  0718                     	;# 
  1330  0719                     	;# 
  1331  0891                     	;# 
  1332  0891                     	;# 
  1333  0891                     	;# 
  1334  0891                     	;# 
  1335  0891                     	;# 
  1336  0891                     	;# 
  1337  0892                     	;# 
  1338  0892                     	;# 
  1339  0892                     	;# 
  1340  0893                     	;# 
  1341  0893                     	;# 
  1342  0893                     	;# 
  1343  0893                     	;# 
  1344  0893                     	;# 
  1345  0893                     	;# 
  1346  0894                     	;# 
  1347  0894                     	;# 
  1348  0894                     	;# 
  1349  0895                     	;# 
  1350  0895                     	;# 
  1351  0895                     	;# 
  1352  0896                     	;# 
  1353  0896                     	;# 
  1354  0896                     	;# 
  1355  089B                     	;# 
  1356  0911                     	;# 
  1357  0912                     	;# 
  1358  0913                     	;# 
  1359  0914                     	;# 
  1360  0915                     	;# 
  1361  0916                     	;# 
  1362  0918                     	;# 
  1363  0919                     	;# 
  1364  091A                     	;# 
  1365  091B                     	;# 
  1366  091C                     	;# 
  1367  091D                     	;# 
  1368  091E                     	;# 
  1369  091F                     	;# 
  1370  0E0F                     	;# 
  1371  0E10                     	;# 
  1372  0E11                     	;# 
  1373  0E12                     	;# 
  1374  0E13                     	;# 
  1375  0E14                     	;# 
  1376  0E15                     	;# 
  1377  0E16                     	;# 
  1378  0E17                     	;# 
  1379  0E18                     	;# 
  1380  0E19                     	;# 
  1381  0E1A                     	;# 
  1382  0E1B                     	;# 
  1383  0E1C                     	;# 
  1384  0E1D                     	;# 
  1385  0E1E                     	;# 
  1386  0E1F                     	;# 
  1387  0E20                     	;# 
  1388  0E21                     	;# 
  1389  0E22                     	;# 
  1390  0E24                     	;# 
  1391  0E25                     	;# 
  1392  0E28                     	;# 
  1393  0E29                     	;# 
  1394  0E2A                     	;# 
  1395  0E2B                     	;# 
  1396  0E2C                     	;# 
  1397  0E2D                     	;# 
  1398  0E2E                     	;# 
  1399  0E2F                     	;# 
  1400  0E90                     	;# 
  1401  0E91                     	;# 
  1402  0E92                     	;# 
  1403  0E94                     	;# 
  1404  0E95                     	;# 
  1405  0EA0                     	;# 
  1406  0EA1                     	;# 
  1407  0EA2                     	;# 
  1408  0EA3                     	;# 
  1409  0EA4                     	;# 
  1410  0EA5                     	;# 
  1411  0F0F                     	;# 
  1412  0F10                     	;# 
  1413  0F11                     	;# 
  1414  0F12                     	;# 
  1415  0F13                     	;# 
  1416  0F14                     	;# 
  1417  0F15                     	;# 
  1418  0F16                     	;# 
  1419  0F17                     	;# 
  1420  0F18                     	;# 
  1421  0F19                     	;# 
  1422  0F1A                     	;# 
  1423  0F1B                     	;# 
  1424  0F1C                     	;# 
  1425  0F1D                     	;# 
  1426  0F1E                     	;# 
  1427  0F1F                     	;# 
  1428  0F20                     	;# 
  1429  0F21                     	;# 
  1430  0F22                     	;# 
  1431  0F23                     	;# 
  1432  0F24                     	;# 
  1433  0F25                     	;# 
  1434  0F26                     	;# 
  1435  0F27                     	;# 
  1436  0F28                     	;# 
  1437  0F29                     	;# 
  1438  0F2A                     	;# 
  1439  0F2B                     	;# 
  1440  0F2C                     	;# 
  1441  0F2D                     	;# 
  1442  0F2E                     	;# 
  1443  0F2F                     	;# 
  1444  0F30                     	;# 
  1445  0F31                     	;# 
  1446  0F32                     	;# 
  1447  0F33                     	;# 
  1448  0F34                     	;# 
  1449  0F35                     	;# 
  1450  0F36                     	;# 
  1451  0F37                     	;# 
  1452  0FE4                     	;# 
  1453  0FE5                     	;# 
  1454  0FE6                     	;# 
  1455  0FE7                     	;# 
  1456  0FE8                     	;# 
  1457  0FE9                     	;# 
  1458  0FEA                     	;# 
  1459  0FEB                     	;# 
  1460  0FED                     	;# 
  1461  0FEE                     	;# 
  1462  0FEF                     	;# 
  1463  0000                     	;# 
  1464  0001                     	;# 
  1465  0002                     	;# 
  1466  0003                     	;# 
  1467  0004                     	;# 
  1468  0005                     	;# 
  1469  0006                     	;# 
  1470  0007                     	;# 
  1471  0008                     	;# 
  1472  0009                     	;# 
  1473  000A                     	;# 
  1474  000B                     	;# 
  1475  000C                     	;# 
  1476  000E                     	;# 
  1477  0010                     	;# 
  1478  0011                     	;# 
  1479  0012                     	;# 
  1480  0013                     	;# 
  1481  0014                     	;# 
  1482  0015                     	;# 
  1483  0015                     	;# 
  1484  0016                     	;# 
  1485  0016                     	;# 
  1486  0017                     	;# 
  1487  0018                     	;# 
  1488  0019                     	;# 
  1489  0019                     	;# 
  1490  001A                     	;# 
  1491  001B                     	;# 
  1492  001C                     	;# 
  1493  001D                     	;# 
  1494  001E                     	;# 
  1495  001F                     	;# 
  1496  008C                     	;# 
  1497  008E                     	;# 
  1498  0090                     	;# 
  1499  0091                     	;# 
  1500  0092                     	;# 
  1501  0093                     	;# 
  1502  0094                     	;# 
  1503  0097                     	;# 
  1504  009B                     	;# 
  1505  009B                     	;# 
  1506  009C                     	;# 
  1507  009D                     	;# 
  1508  009E                     	;# 
  1509  009F                     	;# 
  1510  010C                     	;# 
  1511  010E                     	;# 
  1512  0111                     	;# 
  1513  0112                     	;# 
  1514  0113                     	;# 
  1515  0114                     	;# 
  1516  0115                     	;# 
  1517  0116                     	;# 
  1518  0117                     	;# 
  1519  0118                     	;# 
  1520  0119                     	;# 
  1521  018C                     	;# 
  1522  018E                     	;# 
  1523  0199                     	;# 
  1524  0199                     	;# 
  1525  0199                     	;# 
  1526  019A                     	;# 
  1527  019A                     	;# 
  1528  019A                     	;# 
  1529  019B                     	;# 
  1530  019B                     	;# 
  1531  019B                     	;# 
  1532  019B                     	;# 
  1533  019B                     	;# 
  1534  019C                     	;# 
  1535  019C                     	;# 
  1536  019C                     	;# 
  1537  019D                     	;# 
  1538  019D                     	;# 
  1539  019D                     	;# 
  1540  019E                     	;# 
  1541  019E                     	;# 
  1542  019E                     	;# 
  1543  019F                     	;# 
  1544  019F                     	;# 
  1545  019F                     	;# 
  1546  019F                     	;# 
  1547  019F                     	;# 
  1548  020C                     	;# 
  1549  020E                     	;# 
  1550  0211                     	;# 
  1551  0211                     	;# 
  1552  0212                     	;# 
  1553  0212                     	;# 
  1554  0213                     	;# 
  1555  0213                     	;# 
  1556  0214                     	;# 
  1557  0214                     	;# 
  1558  0215                     	;# 
  1559  0215                     	;# 
  1560  0215                     	;# 
  1561  0215                     	;# 
  1562  0216                     	;# 
  1563  0216                     	;# 
  1564  0217                     	;# 
  1565  0217                     	;# 
  1566  0219                     	;# 
  1567  021A                     	;# 
  1568  021B                     	;# 
  1569  021C                     	;# 
  1570  021D                     	;# 
  1571  021D                     	;# 
  1572  021E                     	;# 
  1573  021F                     	;# 
  1574  028C                     	;# 
  1575  028E                     	;# 
  1576  0291                     	;# 
  1577  0291                     	;# 
  1578  0292                     	;# 
  1579  0293                     	;# 
  1580  0294                     	;# 
  1581  0295                     	;# 
  1582  0295                     	;# 
  1583  0296                     	;# 
  1584  0297                     	;# 
  1585  0298                     	;# 
  1586  029F                     	;# 
  1587  030C                     	;# 
  1588  030E                     	;# 
  1589  0311                     	;# 
  1590  0311                     	;# 
  1591  0312                     	;# 
  1592  0313                     	;# 
  1593  0314                     	;# 
  1594  0315                     	;# 
  1595  0315                     	;# 
  1596  0316                     	;# 
  1597  0317                     	;# 
  1598  0318                     	;# 
  1599  038C                     	;# 
  1600  038E                     	;# 
  1601  0391                     	;# 
  1602  0392                     	;# 
  1603  0393                     	;# 
  1604  0397                     	;# 
  1605  0398                     	;# 
  1606  0399                     	;# 
  1607  039A                     	;# 
  1608  039C                     	;# 
  1609  039D                     	;# 
  1610  039E                     	;# 
  1611  039F                     	;# 
  1612  0411                     	;# 
  1613  0411                     	;# 
  1614  0412                     	;# 
  1615  0413                     	;# 
  1616  0414                     	;# 
  1617  0415                     	;# 
  1618  0416                     	;# 
  1619  0417                     	;# 
  1620  0418                     	;# 
  1621  0418                     	;# 
  1622  0419                     	;# 
  1623  041A                     	;# 
  1624  041B                     	;# 
  1625  041C                     	;# 
  1626  041D                     	;# 
  1627  041E                     	;# 
  1628  041F                     	;# 
  1629  0498                     	;# 
  1630  0498                     	;# 
  1631  0499                     	;# 
  1632  049A                     	;# 
  1633  049B                     	;# 
  1634  049B                     	;# 
  1635  049C                     	;# 
  1636  049D                     	;# 
  1637  049E                     	;# 
  1638  049F                     	;# 
  1639  0617                     	;# 
  1640  0618                     	;# 
  1641  0619                     	;# 
  1642  0619                     	;# 
  1643  061A                     	;# 
  1644  061B                     	;# 
  1645  061C                     	;# 
  1646  061C                     	;# 
  1647  061F                     	;# 
  1648  0691                     	;# 
  1649  0692                     	;# 
  1650  0693                     	;# 
  1651  0694                     	;# 
  1652  0695                     	;# 
  1653  0696                     	;# 
  1654  0697                     	;# 
  1655  0698                     	;# 
  1656  0699                     	;# 
  1657  0711                     	;# 
  1658  0712                     	;# 
  1659  0713                     	;# 
  1660  0714                     	;# 
  1661  0715                     	;# 
  1662  0716                     	;# 
  1663  0717                     	;# 
  1664  0718                     	;# 
  1665  0719                     	;# 
  1666  0891                     	;# 
  1667  0891                     	;# 
  1668  0891                     	;# 
  1669  0891                     	;# 
  1670  0891                     	;# 
  1671  0891                     	;# 
  1672  0892                     	;# 
  1673  0892                     	;# 
  1674  0892                     	;# 
  1675  0893                     	;# 
  1676  0893                     	;# 
  1677  0893                     	;# 
  1678  0893                     	;# 
  1679  0893                     	;# 
  1680  0893                     	;# 
  1681  0894                     	;# 
  1682  0894                     	;# 
  1683  0894                     	;# 
  1684  0895                     	;# 
  1685  0895                     	;# 
  1686  0895                     	;# 
  1687  0896                     	;# 
  1688  0896                     	;# 
  1689  0896                     	;# 
  1690  089B                     	;# 
  1691  0911                     	;# 
  1692  0912                     	;# 
  1693  0913                     	;# 
  1694  0914                     	;# 
  1695  0915                     	;# 
  1696  0916                     	;# 
  1697  0918                     	;# 
  1698  0919                     	;# 
  1699  091A                     	;# 
  1700  091B                     	;# 
  1701  091C                     	;# 
  1702  091D                     	;# 
  1703  091E                     	;# 
  1704  091F                     	;# 
  1705  0E0F                     	;# 
  1706  0E10                     	;# 
  1707  0E11                     	;# 
  1708  0E12                     	;# 
  1709  0E13                     	;# 
  1710  0E14                     	;# 
  1711  0E15                     	;# 
  1712  0E16                     	;# 
  1713  0E17                     	;# 
  1714  0E18                     	;# 
  1715  0E19                     	;# 
  1716  0E1A                     	;# 
  1717  0E1B                     	;# 
  1718  0E1C                     	;# 
  1719  0E1D                     	;# 
  1720  0E1E                     	;# 
  1721  0E1F                     	;# 
  1722  0E20                     	;# 
  1723  0E21                     	;# 
  1724  0E22                     	;# 
  1725  0E24                     	;# 
  1726  0E25                     	;# 
  1727  0E28                     	;# 
  1728  0E29                     	;# 
  1729  0E2A                     	;# 
  1730  0E2B                     	;# 
  1731  0E2C                     	;# 
  1732  0E2D                     	;# 
  1733  0E2E                     	;# 
  1734  0E2F                     	;# 
  1735  0E90                     	;# 
  1736  0E91                     	;# 
  1737  0E92                     	;# 
  1738  0E94                     	;# 
  1739  0E95                     	;# 
  1740  0EA0                     	;# 
  1741  0EA1                     	;# 
  1742  0EA2                     	;# 
  1743  0EA3                     	;# 
  1744  0EA4                     	;# 
  1745  0EA5                     	;# 
  1746  0F0F                     	;# 
  1747  0F10                     	;# 
  1748  0F11                     	;# 
  1749  0F12                     	;# 
  1750  0F13                     	;# 
  1751  0F14                     	;# 
  1752  0F15                     	;# 
  1753  0F16                     	;# 
  1754  0F17                     	;# 
  1755  0F18                     	;# 
  1756  0F19                     	;# 
  1757  0F1A                     	;# 
  1758  0F1B                     	;# 
  1759  0F1C                     	;# 
  1760  0F1D                     	;# 
  1761  0F1E                     	;# 
  1762  0F1F                     	;# 
  1763  0F20                     	;# 
  1764  0F21                     	;# 
  1765  0F22                     	;# 
  1766  0F23                     	;# 
  1767  0F24                     	;# 
  1768  0F25                     	;# 
  1769  0F26                     	;# 
  1770  0F27                     	;# 
  1771  0F28                     	;# 
  1772  0F29                     	;# 
  1773  0F2A                     	;# 
  1774  0F2B                     	;# 
  1775  0F2C                     	;# 
  1776  0F2D                     	;# 
  1777  0F2E                     	;# 
  1778  0F2F                     	;# 
  1779  0F30                     	;# 
  1780  0F31                     	;# 
  1781  0F32                     	;# 
  1782  0F33                     	;# 
  1783  0F34                     	;# 
  1784  0F35                     	;# 
  1785  0F36                     	;# 
  1786  0F37                     	;# 
  1787  0FE4                     	;# 
  1788  0FE5                     	;# 
  1789  0FE6                     	;# 
  1790  0FE7                     	;# 
  1791  0FE8                     	;# 
  1792  0FE9                     	;# 
  1793  0FEA                     	;# 
  1794  0FEB                     	;# 
  1795  0FED                     	;# 
  1796  0FEE                     	;# 
  1797  0FEF                     	;# 
  1798  0000                     	;# 
  1799  0001                     	;# 
  1800  0002                     	;# 
  1801  0003                     	;# 
  1802  0004                     	;# 
  1803  0005                     	;# 
  1804  0006                     	;# 
  1805  0007                     	;# 
  1806  0008                     	;# 
  1807  0009                     	;# 
  1808  000A                     	;# 
  1809  000B                     	;# 
  1810  000C                     	;# 
  1811  000E                     	;# 
  1812  0010                     	;# 
  1813  0011                     	;# 
  1814  0012                     	;# 
  1815  0013                     	;# 
  1816  0014                     	;# 
  1817  0015                     	;# 
  1818  0015                     	;# 
  1819  0016                     	;# 
  1820  0016                     	;# 
  1821  0017                     	;# 
  1822  0018                     	;# 
  1823  0019                     	;# 
  1824  0019                     	;# 
  1825  001A                     	;# 
  1826  001B                     	;# 
  1827  001C                     	;# 
  1828  001D                     	;# 
  1829  001E                     	;# 
  1830  001F                     	;# 
  1831  008C                     	;# 
  1832  008E                     	;# 
  1833  0090                     	;# 
  1834  0091                     	;# 
  1835  0092                     	;# 
  1836  0093                     	;# 
  1837  0094                     	;# 
  1838  0097                     	;# 
  1839  009B                     	;# 
  1840  009B                     	;# 
  1841  009C                     	;# 
  1842  009D                     	;# 
  1843  009E                     	;# 
  1844  009F                     	;# 
  1845  010C                     	;# 
  1846  010E                     	;# 
  1847  0111                     	;# 
  1848  0112                     	;# 
  1849  0113                     	;# 
  1850  0114                     	;# 
  1851  0115                     	;# 
  1852  0116                     	;# 
  1853  0117                     	;# 
  1854  0118                     	;# 
  1855  0119                     	;# 
  1856  018C                     	;# 
  1857  018E                     	;# 
  1858  0199                     	;# 
  1859  0199                     	;# 
  1860  0199                     	;# 
  1861  019A                     	;# 
  1862  019A                     	;# 
  1863  019A                     	;# 
  1864  019B                     	;# 
  1865  019B                     	;# 
  1866  019B                     	;# 
  1867  019B                     	;# 
  1868  019B                     	;# 
  1869  019C                     	;# 
  1870  019C                     	;# 
  1871  019C                     	;# 
  1872  019D                     	;# 
  1873  019D                     	;# 
  1874  019D                     	;# 
  1875  019E                     	;# 
  1876  019E                     	;# 
  1877  019E                     	;# 
  1878  019F                     	;# 
  1879  019F                     	;# 
  1880  019F                     	;# 
  1881  019F                     	;# 
  1882  019F                     	;# 
  1883  020C                     	;# 
  1884  020E                     	;# 
  1885  0211                     	;# 
  1886  0211                     	;# 
  1887  0212                     	;# 
  1888  0212                     	;# 
  1889  0213                     	;# 
  1890  0213                     	;# 
  1891  0214                     	;# 
  1892  0214                     	;# 
  1893  0215                     	;# 
  1894  0215                     	;# 
  1895  0215                     	;# 
  1896  0215                     	;# 
  1897  0216                     	;# 
  1898  0216                     	;# 
  1899  0217                     	;# 
  1900  0217                     	;# 
  1901  0219                     	;# 
  1902  021A                     	;# 
  1903  021B                     	;# 
  1904  021C                     	;# 
  1905  021D                     	;# 
  1906  021D                     	;# 
  1907  021E                     	;# 
  1908  021F                     	;# 
  1909  028C                     	;# 
  1910  028E                     	;# 
  1911  0291                     	;# 
  1912  0291                     	;# 
  1913  0292                     	;# 
  1914  0293                     	;# 
  1915  0294                     	;# 
  1916  0295                     	;# 
  1917  0295                     	;# 
  1918  0296                     	;# 
  1919  0297                     	;# 
  1920  0298                     	;# 
  1921  029F                     	;# 
  1922  030C                     	;# 
  1923  030E                     	;# 
  1924  0311                     	;# 
  1925  0311                     	;# 
  1926  0312                     	;# 
  1927  0313                     	;# 
  1928  0314                     	;# 
  1929  0315                     	;# 
  1930  0315                     	;# 
  1931  0316                     	;# 
  1932  0317                     	;# 
  1933  0318                     	;# 
  1934  038C                     	;# 
  1935  038E                     	;# 
  1936  0391                     	;# 
  1937  0392                     	;# 
  1938  0393                     	;# 
  1939  0397                     	;# 
  1940  0398                     	;# 
  1941  0399                     	;# 
  1942  039A                     	;# 
  1943  039C                     	;# 
  1944  039D                     	;# 
  1945  039E                     	;# 
  1946  039F                     	;# 
  1947  0411                     	;# 
  1948  0411                     	;# 
  1949  0412                     	;# 
  1950  0413                     	;# 
  1951  0414                     	;# 
  1952  0415                     	;# 
  1953  0416                     	;# 
  1954  0417                     	;# 
  1955  0418                     	;# 
  1956  0418                     	;# 
  1957  0419                     	;# 
  1958  041A                     	;# 
  1959  041B                     	;# 
  1960  041C                     	;# 
  1961  041D                     	;# 
  1962  041E                     	;# 
  1963  041F                     	;# 
  1964  0498                     	;# 
  1965  0498                     	;# 
  1966  0499                     	;# 
  1967  049A                     	;# 
  1968  049B                     	;# 
  1969  049B                     	;# 
  1970  049C                     	;# 
  1971  049D                     	;# 
  1972  049E                     	;# 
  1973  049F                     	;# 
  1974  0617                     	;# 
  1975  0618                     	;# 
  1976  0619                     	;# 
  1977  0619                     	;# 
  1978  061A                     	;# 
  1979  061B                     	;# 
  1980  061C                     	;# 
  1981  061C                     	;# 
  1982  061F                     	;# 
  1983  0691                     	;# 
  1984  0692                     	;# 
  1985  0693                     	;# 
  1986  0694                     	;# 
  1987  0695                     	;# 
  1988  0696                     	;# 
  1989  0697                     	;# 
  1990  0698                     	;# 
  1991  0699                     	;# 
  1992  0711                     	;# 
  1993  0712                     	;# 
  1994  0713                     	;# 
  1995  0714                     	;# 
  1996  0715                     	;# 
  1997  0716                     	;# 
  1998  0717                     	;# 
  1999  0718                     	;# 
  2000  0719                     	;# 
  2001  0891                     	;# 
  2002  0891                     	;# 
  2003  0891                     	;# 
  2004  0891                     	;# 
  2005  0891                     	;# 
  2006  0891                     	;# 
  2007  0892                     	;# 
  2008  0892                     	;# 
  2009  0892                     	;# 
  2010  0893                     	;# 
  2011  0893                     	;# 
  2012  0893                     	;# 
  2013  0893                     	;# 
  2014  0893                     	;# 
  2015  0893                     	;# 
  2016  0894                     	;# 
  2017  0894                     	;# 
  2018  0894                     	;# 
  2019  0895                     	;# 
  2020  0895                     	;# 
  2021  0895                     	;# 
  2022  0896                     	;# 
  2023  0896                     	;# 
  2024  0896                     	;# 
  2025  089B                     	;# 
  2026  0911                     	;# 
  2027  0912                     	;# 
  2028  0913                     	;# 
  2029  0914                     	;# 
  2030  0915                     	;# 
  2031  0916                     	;# 
  2032  0918                     	;# 
  2033  0919                     	;# 
  2034  091A                     	;# 
  2035  091B                     	;# 
  2036  091C                     	;# 
  2037  091D                     	;# 
  2038  091E                     	;# 
  2039  091F                     	;# 
  2040  0E0F                     	;# 
  2041  0E10                     	;# 
  2042  0E11                     	;# 
  2043  0E12                     	;# 
  2044  0E13                     	;# 
  2045  0E14                     	;# 
  2046  0E15                     	;# 
  2047  0E16                     	;# 
  2048  0E17                     	;# 
  2049  0E18                     	;# 
  2050  0E19                     	;# 
  2051  0E1A                     	;# 
  2052  0E1B                     	;# 
  2053  0E1C                     	;# 
  2054  0E1D                     	;# 
  2055  0E1E                     	;# 
  2056  0E1F                     	;# 
  2057  0E20                     	;# 
  2058  0E21                     	;# 
  2059  0E22                     	;# 
  2060  0E24                     	;# 
  2061  0E25                     	;# 
  2062  0E28                     	;# 
  2063  0E29                     	;# 
  2064  0E2A                     	;# 
  2065  0E2B                     	;# 
  2066  0E2C                     	;# 
  2067  0E2D                     	;# 
  2068  0E2E                     	;# 
  2069  0E2F                     	;# 
  2070  0E90                     	;# 
  2071  0E91                     	;# 
  2072  0E92                     	;# 
  2073  0E94                     	;# 
  2074  0E95                     	;# 
  2075  0EA0                     	;# 
  2076  0EA1                     	;# 
  2077  0EA2                     	;# 
  2078  0EA3                     	;# 
  2079  0EA4                     	;# 
  2080  0EA5                     	;# 
  2081  0F0F                     	;# 
  2082  0F10                     	;# 
  2083  0F11                     	;# 
  2084  0F12                     	;# 
  2085  0F13                     	;# 
  2086  0F14                     	;# 
  2087  0F15                     	;# 
  2088  0F16                     	;# 
  2089  0F17                     	;# 
  2090  0F18                     	;# 
  2091  0F19                     	;# 
  2092  0F1A                     	;# 
  2093  0F1B                     	;# 
  2094  0F1C                     	;# 
  2095  0F1D                     	;# 
  2096  0F1E                     	;# 
  2097  0F1F                     	;# 
  2098  0F20                     	;# 
  2099  0F21                     	;# 
  2100  0F22                     	;# 
  2101  0F23                     	;# 
  2102  0F24                     	;# 
  2103  0F25                     	;# 
  2104  0F26                     	;# 
  2105  0F27                     	;# 
  2106  0F28                     	;# 
  2107  0F29                     	;# 
  2108  0F2A                     	;# 
  2109  0F2B                     	;# 
  2110  0F2C                     	;# 
  2111  0F2D                     	;# 
  2112  0F2E                     	;# 
  2113  0F2F                     	;# 
  2114  0F30                     	;# 
  2115  0F31                     	;# 
  2116  0F32                     	;# 
  2117  0F33                     	;# 
  2118  0F34                     	;# 
  2119  0F35                     	;# 
  2120  0F36                     	;# 
  2121  0F37                     	;# 
  2122  0FE4                     	;# 
  2123  0FE5                     	;# 
  2124  0FE6                     	;# 
  2125  0FE7                     	;# 
  2126  0FE8                     	;# 
  2127  0FE9                     	;# 
  2128  0FEA                     	;# 
  2129  0FEB                     	;# 
  2130  0FED                     	;# 
  2131  0FEE                     	;# 
  2132  0FEF                     	;# 
  2133                           
  2134                           	psect	stringtext1
  2135  1000                     __pstringtext1:	
  2136  1000                     _dpowers:	
  2137  1000  3401               	retlw	1
  2138  1001  3400               	retlw	0
  2139  1002  3400               	retlw	0
  2140  1003  3400               	retlw	0
  2141  1004  340A               	retlw	10
  2142  1005  3400               	retlw	0
  2143  1006  3400               	retlw	0
  2144  1007  3400               	retlw	0
  2145  1008  3464               	retlw	100
  2146  1009  3400               	retlw	0
  2147  100A  3400               	retlw	0
  2148  100B  3400               	retlw	0
  2149  100C  34E8               	retlw	232
  2150  100D  3403               	retlw	3
  2151  100E  3400               	retlw	0
  2152  100F  3400               	retlw	0
  2153  1010  3410               	retlw	16
  2154  1011  3427               	retlw	39
  2155  1012  3400               	retlw	0
  2156  1013  3400               	retlw	0
  2157  1014  34A0               	retlw	160
  2158  1015  3486               	retlw	134
  2159  1016  3401               	retlw	1
  2160  1017  3400               	retlw	0
  2161  1018  3440               	retlw	64
  2162  1019  3442               	retlw	66
  2163  101A  340F               	retlw	15
  2164  101B  3400               	retlw	0
  2165  101C  3480               	retlw	128
  2166  101D  3496               	retlw	150
  2167  101E  3498               	retlw	152
  2168  101F  3400               	retlw	0
  2169  1020  3400               	retlw	0
  2170  1021  34E1               	retlw	225
  2171  1022  34F5               	retlw	245
  2172  1023  3405               	retlw	5
  2173  1024  3400               	retlw	0
  2174  1025  34CA               	retlw	202
  2175  1026  349A               	retlw	154
  2176  1027  343B               	retlw	59
  2177  1028                     __end_of_dpowers:	
  2178  1FE0                     _romArray_absaddr	set	8160
  2179                           
  2180                           	psect	stringtext2
  2181  1028                     __pstringtext2:	
  2182  1028                     _resetRomData:	
  2183  1028  34AA               	retlw	170
  2184  1029  3455               	retlw	85
  2185  102A  346E               	retlw	110
  2186  102B  3463               	retlw	99
  2187  102C  346F               	retlw	111
  2188  102D  346E               	retlw	110
  2189  102E  3466               	retlw	102
  2190  102F  3469               	retlw	105
  2191  1030  3467               	retlw	103
  2192  1031  3475               	retlw	117
  2193  1032  3472               	retlw	114
  2194  1033  3465               	retlw	101
  2195  1034  3464               	retlw	100
  2196  1035  3400               	retlw	0
  2197  1036  3400               	retlw	0
  2198  1037  3400               	retlw	0
  2199  1038  3400               	retlw	0
  2200  1039  3400               	retlw	0
  2201  103A  3400               	retlw	0
  2202  103B                     __end_of_resetRomData:	
  2203                           
  2204                           	psect	stringtext3
  2205  104C                     __pstringtext3:	
  2206  104C                     _n_ADDRESS_P0:	
  2207  104C  34AD               	retlw	173
  2208  104D  3487               	retlw	135
  2209  104E  3466               	retlw	102
  2210  104F  34BC               	retlw	188
  2211  1050  34BB               	retlw	187
  2212  1051                     __end_of_n_ADDRESS_P0:	
  2213                           
  2214                           	psect	stringtext4
  2215  1066                     __pstringtext4:	
  2216  1066                     _n_ADDRESS_MUL:	
  2217  1066  3421               	retlw	33
  2218  1067                     __end_of_n_ADDRESS_MUL:	
  2219  1FE0                     _romArray_absaddr	set	8160
  2220                           
  2221                           	psect	_romArray_text
  2222  1FE0                     __p_romArray_text:	
  2223  1FE0                     _romArray:	
  2224  1FE0  3400               	retlw	0
  2225  1FE1  3400               	retlw	0
  2226  1FE2  3400               	retlw	0
  2227  1FE3  3400               	retlw	0
  2228  1FE4  3400               	retlw	0
  2229  1FE5  3400               	retlw	0
  2230  1FE6  3400               	retlw	0
  2231  1FE7  3400               	retlw	0
  2232  1FE8  3400               	retlw	0
  2233  1FE9  3400               	retlw	0
  2234  1FEA  3400               	retlw	0
  2235  1FEB  3400               	retlw	0
  2236  1FEC  3400               	retlw	0
  2237  1FED  3400               	retlw	0
  2238  1FEE  3400               	retlw	0
  2239  1FEF  3400               	retlw	0
  2240  1FF0  3400               	retlw	0
  2241  1FF1  3400               	retlw	0
  2242  1FF2  3400               	retlw	0
  2243  1FF3  3400               	retlw	0
  2244  1FF4  3400               	retlw	0
  2245  1FF5  3400               	retlw	0
  2246  1FF6  3400               	retlw	0
  2247  1FF7  3400               	retlw	0
  2248  1FF8  3400               	retlw	0
  2249  1FF9  3400               	retlw	0
  2250  1FFA  3400               	retlw	0
  2251  1FFB  3400               	retlw	0
  2252  1FFC  3400               	retlw	0
  2253  1FFD  3400               	retlw	0
  2254  1FFE  3400               	retlw	0
  2255  1FFF  3400               	retlw	0
  2256  2000                     __end_of_romArray:	
  2257  0003                     _STATUSbits	set	3
  2258  0010                     _PIR0bits	set	16
  2259  000E                     _PORTCbits	set	14
  2260  000C                     _PORTAbits	set	12
  2261  000B                     _INTCONbits	set	11
  2262  0097                     _WDTCONbits	set	151
  2263  009E                     _ADCON1bits	set	158
  2264  009C                     _ADRESH	set	156
  2265  009B                     _ADRESL	set	155
  2266  009D                     _ADCON0bits	set	157
  2267  0090                     _PIE0bits	set	144
  2268  008E                     _TRISCbits	set	142
  2269  008C                     _TRISAbits	set	140
  2270  0117                     _FVRCONbits	set	279
  2271  018E                     _ANSELCbits	set	398
  2272  018C                     _ANSELAbits	set	396
  2273  018E                     _ANSELC	set	398
  2274  018C                     _ANSELA	set	396
  2275  020C                     _WPUAbits	set	524
  2276  020E                     _WPUC	set	526
  2277  020C                     _WPUA	set	524
  2278  0211                     _SSP1BUF	set	529
  2279  0214                     _SSP1STATbits	set	532
  2280  0215                     _SSP1CON1bits	set	533
  2281  028E                     _ODCONC	set	654
  2282  028C                     _ODCONA	set	652
  2283  038E                     _INLVLC	set	910
  2284  038C                     _INLVLA	set	908
  2285  0894                     _PMDATH	set	2196
  2286  0893                     _PMDATL	set	2195
  2287  0896                     _PMCON2	set	2198
  2288  0895                     _PMCON1bits	set	2197
  2289  0892                     _PMADRH	set	2194
  2290  0891                     _PMADRL	set	2193
  2291  0895                     _PMCON1	set	2197
  2292  0919                     _OSCCON1bits	set	2329
  2293  0EA0                     _RC0PPSbits	set	3744
  2294  0EA2                     _RC2PPSbits	set	3746
  2295  0EA1                     _RC1PPSbits	set	3745
  2296                           
  2297                           	psect	stringtext5
  2298  103B                     __pstringtext5:	
  2299  103B                     STR_8:	
  2300  103B  3425               	retlw	37	;'%'
  2301  103C  346C               	retlw	108	;'l'
  2302  103D  3475               	retlw	117	;'u'
  2303  103E  342E               	retlw	46	;'.'
  2304  103F  3425               	retlw	37	;'%'
  2305  1040  3436               	retlw	54	;'6'
  2306  1041  342E               	retlw	46	;'.'
  2307  1042  3436               	retlw	54	;'6'
  2308  1043  346C               	retlw	108	;'l'
  2309  1044  3475               	retlw	117	;'u'
  2310  1045  3400               	retlw	0
  2311                           
  2312                           	psect	stringtext6
  2313  1046                     __pstringtext6:	
  2314  1046                     STR_5:	
  2315  1046  3454               	retlw	84	;'T'
  2316  1047  3445               	retlw	69	;'E'
  2317  1048  344D               	retlw	77	;'M'
  2318  1049  3450               	retlw	80	;'P'
  2319  104A  3452               	retlw	82	;'R'
  2320  104B  3400               	retlw	0
  2321                           
  2322                           	psect	stringtext7
  2323  1051                     __pstringtext7:	
  2324  1051                     STR_4:	
  2325  1051  3454               	retlw	84	;'T'
  2326  1052  3445               	retlw	69	;'E'
  2327  1053  344D               	retlw	77	;'M'
  2328  1054  3450               	retlw	80	;'P'
  2329  1055  3400               	retlw	0
  2330                           
  2331                           	psect	stringtext8
  2332  1056                     __pstringtext8:	
  2333  1056                     STR_3:	
  2334  1056  3456               	retlw	86	;'V'
  2335  1057  3442               	retlw	66	;'B'
  2336  1058  3441               	retlw	65	;'A'
  2337  1059  3454               	retlw	84	;'T'
  2338  105A  3400               	retlw	0
  2339                           
  2340                           	psect	stringtext9
  2341  105B                     __pstringtext9:	
  2342  105B                     STR_7:	
  2343  105B  3442               	retlw	66	;'B'
  2344  105C  344F               	retlw	79	;'O'
  2345  105D  344F               	retlw	79	;'O'
  2346  105E  3454               	retlw	84	;'T'
  2347  105F  3400               	retlw	0
  2348                           
  2349                           	psect	stringtext10
  2350  1060                     __pstringtext10:	
  2351  1060                     STR_6:	
  2352  1060  3455               	retlw	85	;'U'
  2353  1061  3448               	retlw	72	;'H'
  2354  1062  3431               	retlw	49	;'1'
  2355  1063  3400               	retlw	0
  2356                           
  2357                           	psect	stringtext11
  2358  1064                     __pstringtext11:	
  2359  1064                     STR_1:	
  2360  1064  342F               	retlw	47	;'/'
  2361  1065  3400               	retlw	0
  2362                           
  2363                           	psect	stringtext12
  2364  0000                     __pstringtext12:	
  2365  1064                     
  2366                           ; #config settings
  2367  0000                     
  2368                           	psect	cinit
  2369  0011                     start_initialization:	
  2370  0011                     __initialization:	
  2371                           
  2372                           ; Clear objects allocated to BANK0
  2373  0011  0020               	movlb	0	; select bank0
  2374  0012  01EE               	clrf	__pbssBANK0& (0+127)
  2375                           
  2376                           ; Clear objects allocated to BANK1
  2377  0013  0021               	movlb	1	; select bank1
  2378  0014  01ED               	clrf	__pbssBANK1& (0+127)
  2379  0015  01EE               	clrf	(__pbssBANK1+1)& (0+127)
  2380                           
  2381                           ; Clear objects allocated to BANK2
  2382  0016  3020               	movlw	low __pbssBANK2
  2383  0017  0084               	movwf	4
  2384  0018  3001               	movlw	high __pbssBANK2
  2385  0019  0085               	movwf	5
  2386  001A  3049               	movlw	73
  2387  001B  3188  2023  3180   	fcall	clear_ram0
  2388                           
  2389                           ; Clear objects allocated to BANK3
  2390  001E  30A0               	movlw	low __pbssBANK3
  2391  001F  0084               	movwf	4
  2392  0020  3001               	movlw	high __pbssBANK3
  2393  0021  0085               	movwf	5
  2394  0022  3020               	movlw	32
  2395  0023  3188  2023         	fcall	clear_ram0
  2396  0025                     end_of_initialization:	
  2397                           ;End of C runtime variable initialization code
  2398                           
  2399  0025                     __end_of__initialization:	
  2400  0025  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  2401  0026  0020               	movlb	0
  2402  0027  318F  2F6A         	ljmp	_main	;jump to C main() function
  2403                           
  2404                           	psect	bssBANK0
  2405  006E                     __pbssBANK0:	
  2406  006E                     _nrf24l01:	
  2407  006E                     	ds	1
  2408                           
  2409                           	psect	bssBANK1
  2410  00ED                     __pbssBANK1:	
  2411  00ED                     _TXPacket:	
  2412  00ED                     	ds	1
  2413  00EE                     _sleepLoop:	
  2414  00EE                     	ds	1
  2415                           
  2416                           	psect	bssBANK2
  2417  0120                     __pbssBANK2:	
  2418  0120                     _counter:	
  2419  0120                     	ds	4
  2420  0124                     _RXPacket:	
  2421  0124                     	ds	33
  2422  0145                     _romData:	
  2423  0145                     	ds	19
  2424  0158                     ftoa@buf:	
  2425  0158                     	ds	17
  2426                           
  2427                           	psect	bssBANK3
  2428  01A0                     __pbssBANK3:	
  2429  01A0                     _romHolder:	
  2430  01A0                     	ds	32
  2431                           
  2432                           	psect	clrtext
  2433  0823                     clear_ram0:	
  2434                           ;	Called with FSR0 containing the base address, and
  2435                           ;	WREG with the size to clear
  2436                           
  2437  0823  0064               	clrwdt	;clear the watchdog before getting into this loop
  2438  0824                     clrloop0:	
  2439  0824  0180               	clrf	0	;clear RAM location pointed to by FSR
  2440  0825  3101               	addfsr 0,1
  2441  0826  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  2442  0827  2824               	goto	clrloop0	;have we reached the end yet?
  2443  0828  3400               	retlw	0	;all done for this memory range, return
  2444                           
  2445                           	psect	cstackBANK1
  2446  00A0                     __pcstackBANK1:	
  2447  00A0                     setMessage@status:	
  2448                           
  2449                           ; 2 bytes @ 0x0
  2450  00A0                     	ds	2
  2451  00A2                     setMessage@packet:	
  2452                           
  2453                           ; 1 bytes @ 0x2
  2454  00A2                     	ds	1
  2455  00A3                     _loop$2039:	
  2456                           
  2457                           ; 3 bytes @ 0x3
  2458  00A3                     	ds	3
  2459  00A6                     _loop$2040:	
  2460                           
  2461                           ; 3 bytes @ 0x6
  2462  00A6                     	ds	3
  2463  00A9                     loop@packet:	
  2464                           
  2465                           ; 33 bytes @ 0x9
  2466  00A9                     	ds	33
  2467  00CA                     ??_main:	
  2468                           
  2469                           ; 1 bytes @ 0x2A
  2470  00CA                     	ds	1
  2471  00CB                     main@pipe:	
  2472                           
  2473                           ; 1 bytes @ 0x2B
  2474  00CB                     	ds	1
  2475  00CC                     main@packet:	
  2476                           
  2477                           ; 33 bytes @ 0x2C
  2478  00CC                     	ds	33
  2479                           
  2480                           	psect	cstackCOMMON
  2481  0070                     __pcstackCOMMON:	
  2482  0070                     ?_isdigit:	
  2483  0070                     ?_nrf24l01ISR:	
  2484                           ; 1 bit 
  2485                           
  2486  0070                     ?_nrf24l01SetRXMode:	
  2487                           ; 1 bytes @ 0x0
  2488                           
  2489  0070                     ?_nrf24l01GetRXPacket:	
  2490                           ; 1 bytes @ 0x0
  2491                           
  2492  0070                     ?_nrf24l01SendPacket:	
  2493                           ; 1 bytes @ 0x0
  2494                           
  2495  0070                     ?_nrf24l01Init:	
  2496                           ; 1 bytes @ 0x0
  2497                           
  2498  0070                     ?_nrf24l01SetTXPipe:	
  2499                           ; 1 bytes @ 0x0
  2500                           
  2501  0070                     ?_nrf24l01SetRXPipe:	
  2502                           ; 1 bytes @ 0x0
  2503                           
  2504  0070                     ?_flashWriteByte:	
  2505                           ; 1 bytes @ 0x0
  2506                           
  2507  0070                     ?_flashRealod:	
  2508                           ; 1 bytes @ 0x0
  2509                           
  2510  0070                     ?_flashUpdate:	
  2511                           ; 1 bytes @ 0x0
  2512                           
  2513  0070                     ?_nrf24l01CELow:	
  2514                           ; 1 bytes @ 0x0
  2515                           
  2516  0070                     ??_nrf24l01CELow:	
  2517                           ; 1 bytes @ 0x0
  2518                           
  2519  0070                     ?_nrf24l01CEHigh:	
  2520                           ; 1 bytes @ 0x0
  2521                           
  2522  0070                     ??_nrf24l01CEHigh:	
  2523                           ; 1 bytes @ 0x0
  2524                           
  2525  0070                     ?_nrf24l01CSLow:	
  2526                           ; 1 bytes @ 0x0
  2527                           
  2528  0070                     ??_nrf24l01CSLow:	
  2529                           ; 1 bytes @ 0x0
  2530                           
  2531  0070                     ?_nrf24l01CSHigh:	
  2532                           ; 1 bytes @ 0x0
  2533                           
  2534  0070                     ??_nrf24l01CSHigh:	
  2535                           ; 1 bytes @ 0x0
  2536                           
  2537  0070                     ?_nrf24l01InterfaceInit:	
  2538                           ; 1 bytes @ 0x0
  2539                           
  2540  0070                     ?_nrf24l01SPISend:	
  2541                           ; 1 bytes @ 0x0
  2542                           
  2543  0070                     ??_nrf24l01SPISend:	
  2544                           ; 1 bytes @ 0x0
  2545                           
  2546  0070                     ?_nrf24l01SPIStart:	
  2547                           ; 1 bytes @ 0x0
  2548                           
  2549  0070                     ??_nrf24l01SPIStart:	
  2550                           ; 1 bytes @ 0x0
  2551                           
  2552  0070                     ?_nrf24l01SPIEnd:	
  2553                           ; 1 bytes @ 0x0
  2554                           
  2555  0070                     ??_nrf24l01SPIEnd:	
  2556                           ; 1 bytes @ 0x0
  2557                           
  2558  0070                     ?_enableInterrupts:	
  2559                           ; 1 bytes @ 0x0
  2560                           
  2561  0070                     ??_enableInterrupts:	
  2562                           ; 1 bytes @ 0x0
  2563                           
  2564  0070                     ?_exception:	
  2565                           ; 1 bytes @ 0x0
  2566                           
  2567  0070                     ?_ISR:	
  2568                           ; 1 bytes @ 0x0
  2569                           
  2570  0070                     ?_sleep:	
  2571                           ; 1 bytes @ 0x0
  2572                           
  2573  0070                     ?_checkTXPower:	
  2574                           ; 1 bytes @ 0x0
  2575                           
  2576  0070                     ?_loop:	
  2577                           ; 1 bytes @ 0x0
  2578                           
  2579  0070                     ?_nrf24l01GetPipe:	
  2580                           ; 1 bytes @ 0x0
  2581                           
  2582  0070                     ?_main:	
  2583                           ; 1 bytes @ 0x0
  2584                           
  2585  0070                     ?_nrf24l01CheckACK:	
  2586                           ; 1 bytes @ 0x0
  2587                           
  2588  0070                     ?_nrf24l01ReceivePacket:	
  2589                           ; 1 bytes @ 0x0
  2590                           
  2591  0070                     ?_nrf24l01InitRegisters:	
  2592                           ; 1 bytes @ 0x0
  2593                           
  2594  0070                     ?i1_nrf24l01SetRXMode:	
  2595                           ; 1 bytes @ 0x0
  2596                           
  2597  0070                     ?i1_memset:	
  2598                           ; 1 bytes @ 0x0
  2599                           
  2600  0070                     ?_strcmp:	
  2601                           ; 1 bytes @ 0x0
  2602                           
  2603  0070                     ?i1___wmul:	
  2604                           ; 2 bytes @ 0x0
  2605                           
  2606  0070                     nrf24l01SPISend@data:	
  2607                           ; 2 bytes @ 0x0
  2608                           
  2609  0070                     enableInterrupts@enable:	
  2610                           ; 1 bytes @ 0x0
  2611                           
  2612  0070                     strcmp@s2:	
  2613                           ; 1 bytes @ 0x0
  2614                           
  2615  0070                     flashWriteByte@offset:	
  2616                           ; 1 bytes @ 0x0
  2617                           
  2618  0070                     i1___wmul@multiplier:	
  2619                           ; 2 bytes @ 0x0
  2620                           
  2621  0070                     i1memset@p1:	
  2622                           ; 2 bytes @ 0x0
  2623                           
  2624                           
  2625                           ; 2 bytes @ 0x0
  2626  0070                     	ds	1
  2627  0071                     ?i1_nrf24l01Send:	
  2628  0071                     i1nrf24l01Send@data:	
  2629                           ; 1 bytes @ 0x1
  2630                           
  2631                           
  2632                           ; 1 bytes @ 0x1
  2633  0071                     	ds	1
  2634  0072                     ??_strcmp:	
  2635  0072                     ??i1_nrf24l01Send:	
  2636                           ; 1 bytes @ 0x2
  2637                           
  2638  0072                     flashWriteByte@data:	
  2639                           ; 1 bytes @ 0x2
  2640                           
  2641  0072                     i1___wmul@multiplicand:	
  2642                           ; 2 bytes @ 0x2
  2643                           
  2644  0072                     i1memset@c:	
  2645                           ; 2 bytes @ 0x2
  2646                           
  2647                           
  2648                           ; 2 bytes @ 0x2
  2649  0072                     	ds	1
  2650  0073                     strcmp@r:	
  2651  0073                     i1nrf24l01Send@command:	
  2652                           ; 1 bytes @ 0x3
  2653                           
  2654                           
  2655                           ; 1 bytes @ 0x3
  2656  0073                     	ds	1
  2657  0074                     ??_flashWriteByte:	
  2658  0074                     ??i1_nrf24l01SetRXMode:	
  2659                           ; 1 bytes @ 0x4
  2660                           
  2661  0074                     ??i1___wmul:	
  2662                           ; 1 bytes @ 0x4
  2663                           
  2664  0074                     strcmp@s1:	
  2665                           ; 1 bytes @ 0x4
  2666                           
  2667  0074                     flashWriteByte@address:	
  2668                           ; 1 bytes @ 0x4
  2669                           
  2670  0074                     i1___wmul@product:	
  2671                           ; 2 bytes @ 0x4
  2672                           
  2673  0074                     i1memset@n:	
  2674                           ; 2 bytes @ 0x4
  2675                           
  2676                           
  2677                           ; 2 bytes @ 0x4
  2678  0074                     	ds	1
  2679  0075                     i1nrf24l01SetRXMode@config:	
  2680                           
  2681                           ; 1 bytes @ 0x5
  2682  0075                     	ds	1
  2683  0076                     ??_flashUpdate:	
  2684  0076                     ??i1_memset:	
  2685                           ; 1 bytes @ 0x6
  2686                           
  2687  0076                     i1nrf24l01SetRXMode@rxMode:	
  2688                           ; 1 bytes @ 0x6
  2689                           
  2690  0076                     i1memset@p:	
  2691                           ; 1 bytes @ 0x6
  2692                           
  2693                           
  2694                           ; 2 bytes @ 0x6
  2695  0076                     	ds	1
  2696  0077                     ??_nrf24l01CheckACK:	
  2697                           
  2698                           ; 1 bytes @ 0x7
  2699  0077                     	ds	1
  2700  0078                     ??_nrf24l01ReceivePacket:	
  2701  0078                     flashUpdate@i:	
  2702                           ; 1 bytes @ 0x8
  2703                           
  2704                           
  2705                           ; 2 bytes @ 0x8
  2706  0078                     	ds	1
  2707  0079                     nrf24l01ReceivePacket@width:	
  2708                           
  2709                           ; 1 bytes @ 0x9
  2710  0079                     	ds	1
  2711  007A                     ??_exception:	
  2712  007A                     nrf24l01ReceivePacket@i:	
  2713                           ; 1 bytes @ 0xA
  2714                           
  2715                           
  2716                           ; 1 bytes @ 0xA
  2717  007A                     	ds	2
  2718  007C                     exception@exception:	
  2719                           
  2720                           ; 1 bytes @ 0xC
  2721  007C                     	ds	1
  2722  007D                     ??_nrf24l01ISR:	
  2723                           
  2724                           ; 1 bytes @ 0xD
  2725  007D                     	ds	1
  2726  007E                     ??_ISR:	
  2727                           
  2728                           	psect	cstackBANK0
  2729  0020                     __pcstackBANK0:	
  2730                           ; 1 bytes @ 0xE
  2731                           
  2732  0020                     nrf24l01ISR@status:	
  2733                           
  2734                           ; 1 bytes @ 0x0
  2735  0020                     	ds	1
  2736  0021                     ?___ftge:	
  2737  0021                     ??_nrf24l01GetRXPacket:	
  2738                           ; 1 bit 
  2739                           
  2740  0021                     ?_strcpy:	
  2741                           ; 1 bytes @ 0x1
  2742                           
  2743  0021                     ??_isdigit:	
  2744                           ; 1 bytes @ 0x1
  2745                           
  2746  0021                     ??_nrf24l01InterfaceInit:	
  2747                           ; 1 bytes @ 0x1
  2748                           
  2749  0021                     ??_sleep:	
  2750                           ; 1 bytes @ 0x1
  2751                           
  2752  0021                     ?_nrf24l01Send:	
  2753                           ; 1 bytes @ 0x1
  2754                           
  2755  0021                     ?___bmul:	
  2756                           ; 1 bytes @ 0x1
  2757                           
  2758  0021                     ?_memset:	
  2759                           ; 1 bytes @ 0x1
  2760                           
  2761  0021                     ?_strlen:	
  2762                           ; 2 bytes @ 0x1
  2763                           
  2764  0021                     ?_flashReadByte:	
  2765                           ; 2 bytes @ 0x1
  2766                           
  2767  0021                     ?___wmul:	
  2768                           ; 2 bytes @ 0x1
  2769                           
  2770  0021                     ?___ftpack:	
  2771                           ; 2 bytes @ 0x1
  2772                           
  2773  0021                     ?___ftneg:	
  2774                           ; 3 bytes @ 0x1
  2775                           
  2776  0021                     ?___lldiv:	
  2777                           ; 3 bytes @ 0x1
  2778                           
  2779  0021                     nrf24l01Send@data:	
  2780                           ; 4 bytes @ 0x1
  2781                           
  2782  0021                     ___bmul@multiplicand:	
  2783                           ; 1 bytes @ 0x1
  2784                           
  2785  0021                     _isdigit$1776:	
  2786                           ; 1 bytes @ 0x1
  2787                           
  2788  0021                     flashReadByte@offset:	
  2789                           ; 1 bytes @ 0x1
  2790                           
  2791  0021                     ___wmul@multiplier:	
  2792                           ; 2 bytes @ 0x1
  2793                           
  2794  0021                     memset@p1:	
  2795                           ; 2 bytes @ 0x1
  2796                           
  2797  0021                     strcpy@from:	
  2798                           ; 2 bytes @ 0x1
  2799                           
  2800  0021                     strlen@s:	
  2801                           ; 2 bytes @ 0x1
  2802                           
  2803  0021                     ___ftpack@arg:	
  2804                           ; 2 bytes @ 0x1
  2805                           
  2806  0021                     ___ftge@ff1:	
  2807                           ; 3 bytes @ 0x1
  2808                           
  2809  0021                     ___ftneg@f1:	
  2810                           ; 3 bytes @ 0x1
  2811                           
  2812  0021                     ___lldiv@divisor:	
  2813                           ; 3 bytes @ 0x1
  2814                           
  2815                           
  2816                           ; 4 bytes @ 0x1
  2817  0021                     	ds	1
  2818  0022                     ??_nrf24l01Send:	
  2819  0022                     ??___bmul:	
  2820                           ; 1 bytes @ 0x2
  2821                           
  2822  0022                     isdigit@c:	
  2823                           ; 1 bytes @ 0x2
  2824                           
  2825                           
  2826                           ; 1 bytes @ 0x2
  2827  0022                     	ds	1
  2828  0023                     ??_strlen:	
  2829  0023                     ??_strcpy:	
  2830                           ; 1 bytes @ 0x3
  2831                           
  2832  0023                     ??_flashReadByte:	
  2833                           ; 1 bytes @ 0x3
  2834                           
  2835  0023                     nrf24l01Send@command:	
  2836                           ; 1 bytes @ 0x3
  2837                           
  2838  0023                     ___bmul@product:	
  2839                           ; 1 bytes @ 0x3
  2840                           
  2841  0023                     ___wmul@multiplicand:	
  2842                           ; 1 bytes @ 0x3
  2843                           
  2844  0023                     memset@c:	
  2845                           ; 2 bytes @ 0x3
  2846                           
  2847                           
  2848                           ; 2 bytes @ 0x3
  2849  0023                     	ds	1
  2850  0024                     ??_nrf24l01SetRXMode:	
  2851  0024                     ?_nrf24l01ChangeTXPower:	
  2852                           ; 1 bytes @ 0x4
  2853                           
  2854  0024                     ??_nrf24l01SetRXPipe:	
  2855                           ; 1 bytes @ 0x4
  2856                           
  2857  0024                     ??___ftneg:	
  2858                           ; 1 bytes @ 0x4
  2859                           
  2860  0024                     ___bmul@multiplier:	
  2861                           ; 1 bytes @ 0x4
  2862                           
  2863  0024                     ___ftpack@exp:	
  2864                           ; 1 bytes @ 0x4
  2865                           
  2866  0024                     strcpy@to:	
  2867                           ; 1 bytes @ 0x4
  2868                           
  2869  0024                     nrf24l01ChangeTXPower@addPower:	
  2870                           ; 1 bytes @ 0x4
  2871                           
  2872  0024                     ___ftge@ff2:	
  2873                           ; 2 bytes @ 0x4
  2874                           
  2875                           
  2876                           ; 3 bytes @ 0x4
  2877  0024                     	ds	1
  2878  0025                     ??_nrf24l01SetTXPipe:	
  2879  0025                     ??___wmul:	
  2880                           ; 1 bytes @ 0x5
  2881                           
  2882  0025                     nrf24l01SetRXMode@config:	
  2883                           ; 1 bytes @ 0x5
  2884                           
  2885  0025                     ___ftpack@sign:	
  2886                           ; 1 bytes @ 0x5
  2887                           
  2888  0025                     strcpy@cp:	
  2889                           ; 1 bytes @ 0x5
  2890                           
  2891  0025                     ___wmul@product:	
  2892                           ; 1 bytes @ 0x5
  2893                           
  2894  0025                     memset@n:	
  2895                           ; 2 bytes @ 0x5
  2896                           
  2897  0025                     strlen@cp:	
  2898                           ; 2 bytes @ 0x5
  2899                           
  2900  0025                     ___lldiv@dividend:	
  2901                           ; 2 bytes @ 0x5
  2902                           
  2903                           
  2904                           ; 4 bytes @ 0x5
  2905  0025                     	ds	1
  2906  0026                     ??_nrf24l01ChangeTXPower:	
  2907  0026                     ??___ftpack:	
  2908                           ; 1 bytes @ 0x6
  2909                           
  2910  0026                     nrf24l01SetRXMode@rxMode:	
  2911                           ; 1 bytes @ 0x6
  2912                           
  2913  0026                     nrf24l01SetRXPipe@pipe:	
  2914                           ; 1 bytes @ 0x6
  2915                           
  2916  0026                     flashReadByte@result:	
  2917                           ; 1 bytes @ 0x6
  2918                           
  2919                           
  2920                           ; 2 bytes @ 0x6
  2921  0026                     	ds	1
  2922  0027                     ??_memset:	
  2923  0027                     ??___ftge:	
  2924                           ; 1 bytes @ 0x7
  2925                           
  2926  0027                     nrf24l01ChangeTXPower@rfSetup:	
  2927                           ; 1 bytes @ 0x7
  2928                           
  2929  0027                     nrf24l01SetTXPipe@pipe:	
  2930                           ; 1 bytes @ 0x7
  2931                           
  2932  0027                     nrf24l01SetRXPipe@enRXAddr:	
  2933                           ; 1 bytes @ 0x7
  2934                           
  2935  0027                     memset@p:	
  2936                           ; 1 bytes @ 0x7
  2937                           
  2938                           
  2939                           ; 2 bytes @ 0x7
  2940  0027                     	ds	1
  2941  0028                     ??_nrf24l01SendPacket:	
  2942  0028                     ??_checkTXPower:	
  2943                           ; 1 bytes @ 0x8
  2944                           
  2945  0028                     ??_nrf24l01InitRegisters:	
  2946                           ; 1 bytes @ 0x8
  2947                           
  2948  0028                     flashReadByte@address:	
  2949                           ; 1 bytes @ 0x8
  2950                           
  2951                           
  2952                           ; 2 bytes @ 0x8
  2953  0028                     	ds	1
  2954  0029                     ??___lldiv:	
  2955  0029                     ?___ftdiv:	
  2956                           ; 1 bytes @ 0x9
  2957                           
  2958  0029                     ?___ftmul:	
  2959                           ; 3 bytes @ 0x9
  2960                           
  2961  0029                     ?___lbtoft:	
  2962                           ; 3 bytes @ 0x9
  2963                           
  2964  0029                     ?___lltoft:	
  2965                           ; 3 bytes @ 0x9
  2966                           
  2967  0029                     ?___lwtoft:	
  2968                           ; 3 bytes @ 0x9
  2969                           
  2970  0029                     checkTXPower@rxPacket:	
  2971                           ; 3 bytes @ 0x9
  2972                           
  2973  0029                     ___lwtoft@c:	
  2974                           ; 1 bytes @ 0x9
  2975                           
  2976  0029                     ___ftdiv@f2:	
  2977                           ; 2 bytes @ 0x9
  2978                           
  2979  0029                     ___ftmul@f1:	
  2980                           ; 3 bytes @ 0x9
  2981                           
  2982  0029                     ___lltoft@c:	
  2983                           ; 3 bytes @ 0x9
  2984                           
  2985                           
  2986                           ; 4 bytes @ 0x9
  2987  0029                     	ds	1
  2988  002A                     ??_flashRealod:	
  2989  002A                     nrf24l01SendPacket@Packet:	
  2990                           ; 1 bytes @ 0xA
  2991                           
  2992  002A                     nrf24l01InitRegisters@channel:	
  2993                           ; 1 bytes @ 0xA
  2994                           
  2995  002A                     ___lldiv@quotient:	
  2996                           ; 1 bytes @ 0xA
  2997                           
  2998                           
  2999                           ; 4 bytes @ 0xA
  3000  002A                     	ds	1
  3001  002B                     nrf24l01SendPacket@i:	
  3002  002B                     nrf24l01InitRegisters@setupAW:	
  3003                           ; 1 bytes @ 0xB
  3004                           
  3005  002B                     flashRealod@i:	
  3006                           ; 1 bytes @ 0xB
  3007                           
  3008                           
  3009                           ; 2 bytes @ 0xB
  3010  002B                     	ds	1
  3011  002C                     ??___lbtoft:	
  3012  002C                     ??___lwtoft:	
  3013                           ; 1 bytes @ 0xC
  3014                           
  3015  002C                     nrf24l01InitRegisters@feature:	
  3016                           ; 1 bytes @ 0xC
  3017                           
  3018  002C                     ___ftdiv@f1:	
  3019                           ; 1 bytes @ 0xC
  3020                           
  3021  002C                     ___ftmul@f2:	
  3022                           ; 3 bytes @ 0xC
  3023                           
  3024                           
  3025                           ; 3 bytes @ 0xC
  3026  002C                     	ds	1
  3027  002D                     ??___lltoft:	
  3028  002D                     nrf24l01InitRegisters@rfSetup:	
  3029                           ; 1 bytes @ 0xD
  3030                           
  3031                           
  3032                           ; 1 bytes @ 0xD
  3033  002D                     	ds	1
  3034  002E                     nrf24l01InitRegisters@status:	
  3035  002E                     ___lldiv@counter:	
  3036                           ; 1 bytes @ 0xE
  3037                           
  3038  002E                     ___lltoft@exp:	
  3039                           ; 1 bytes @ 0xE
  3040                           
  3041                           
  3042                           ; 1 bytes @ 0xE
  3043  002E                     	ds	1
  3044  002F                     ??___ftdiv:	
  3045  002F                     ??___ftmul:	
  3046                           ; 1 bytes @ 0xF
  3047                           
  3048  002F                     ?___llmod:	
  3049                           ; 1 bytes @ 0xF
  3050                           
  3051  002F                     nrf24l01InitRegisters@enAA:	
  3052                           ; 4 bytes @ 0xF
  3053                           
  3054  002F                     ___llmod@divisor:	
  3055                           ; 1 bytes @ 0xF
  3056                           
  3057                           
  3058                           ; 4 bytes @ 0xF
  3059  002F                     	ds	1
  3060  0030                     nrf24l01InitRegisters@DynPD:	
  3061  0030                     ___lbtoft@c:	
  3062                           ; 1 bytes @ 0x10
  3063                           
  3064                           
  3065                           ; 1 bytes @ 0x10
  3066  0030                     	ds	1
  3067  0031                     ?___ftadd:	
  3068  0031                     nrf24l01InitRegisters@config:	
  3069                           ; 3 bytes @ 0x11
  3070                           
  3071  0031                     ___ftadd@f1:	
  3072                           ; 1 bytes @ 0x11
  3073                           
  3074                           
  3075                           ; 3 bytes @ 0x11
  3076  0031                     	ds	1
  3077  0032                     nrf24l01InitRegisters@i:	
  3078                           
  3079                           ; 2 bytes @ 0x12
  3080  0032                     	ds	1
  3081  0033                     ___ftdiv@cntr:	
  3082  0033                     ___ftmul@exp:	
  3083                           ; 1 bytes @ 0x13
  3084                           
  3085  0033                     ___llmod@dividend:	
  3086                           ; 1 bytes @ 0x13
  3087                           
  3088                           
  3089                           ; 4 bytes @ 0x13
  3090  0033                     	ds	1
  3091  0034                     ??_nrf24l01Init:	
  3092  0034                     ___ftadd@f2:	
  3093                           ; 1 bytes @ 0x14
  3094                           
  3095  0034                     ___ftdiv@f3:	
  3096                           ; 3 bytes @ 0x14
  3097                           
  3098  0034                     ___ftmul@f3_as_product:	
  3099                           ; 3 bytes @ 0x14
  3100                           
  3101                           
  3102                           ; 3 bytes @ 0x14
  3103  0034                     	ds	3
  3104  0037                     ??___ftadd:	
  3105  0037                     ??___llmod:	
  3106                           ; 1 bytes @ 0x17
  3107                           
  3108  0037                     ___ftdiv@exp:	
  3109                           ; 1 bytes @ 0x17
  3110                           
  3111  0037                     ___ftmul@cntr:	
  3112                           ; 1 bytes @ 0x17
  3113                           
  3114                           
  3115                           ; 1 bytes @ 0x17
  3116  0037                     	ds	1
  3117  0038                     ___ftdiv@sign:	
  3118  0038                     ___ftmul@sign:	
  3119                           ; 1 bytes @ 0x18
  3120                           
  3121  0038                     ___llmod@counter:	
  3122                           ; 1 bytes @ 0x18
  3123                           
  3124                           
  3125                           ; 1 bytes @ 0x18
  3126  0038                     	ds	1
  3127  0039                     ??_nrf24l01GetPipe:	
  3128  0039                     ?_sprintf:	
  3129                           ; 1 bytes @ 0x19
  3130                           
  3131  0039                     ?___fttol:	
  3132                           ; 2 bytes @ 0x19
  3133                           
  3134  0039                     sprintf@f:	
  3135                           ; 4 bytes @ 0x19
  3136                           
  3137  0039                     ___fttol@f1:	
  3138                           ; 2 bytes @ 0x19
  3139                           
  3140                           
  3141                           ; 3 bytes @ 0x19
  3142  0039                     	ds	2
  3143  003B                     ___ftadd@sign:	
  3144                           
  3145                           ; 1 bytes @ 0x1B
  3146  003B                     	ds	1
  3147  003C                     ___ftadd@exp2:	
  3148                           
  3149                           ; 1 bytes @ 0x1C
  3150  003C                     	ds	1
  3151  003D                     ??___fttol:	
  3152  003D                     ___ftadd@exp1:	
  3153                           ; 1 bytes @ 0x1D
  3154                           
  3155                           
  3156                           ; 1 bytes @ 0x1D
  3157  003D                     	ds	1
  3158  003E                     ?_getADCValue:	
  3159  003E                     ?___ftsub:	
  3160                           ; 3 bytes @ 0x1E
  3161                           
  3162  003E                     nrf24l01GetPipe@name:	
  3163                           ; 3 bytes @ 0x1E
  3164                           
  3165  003E                     getADCValue@multiplier:	
  3166                           ; 1 bytes @ 0x1E
  3167                           
  3168  003E                     ___ftsub@f2:	
  3169                           ; 3 bytes @ 0x1E
  3170                           
  3171                           
  3172                           ; 3 bytes @ 0x1E
  3173  003E                     	ds	1
  3174  003F                     nrf24l01GetPipe@pipe:	
  3175                           
  3176                           ; 4 bytes @ 0x1F
  3177  003F                     	ds	2
  3178  0041                     ??_getADCValue:	
  3179  0041                     ___fttol@sign1:	
  3180                           ; 1 bytes @ 0x21
  3181                           
  3182  0041                     ___ftsub@f1:	
  3183                           ; 1 bytes @ 0x21
  3184                           
  3185                           
  3186                           ; 3 bytes @ 0x21
  3187  0041                     	ds	1
  3188  0042                     ___fttol@lval:	
  3189                           
  3190                           ; 4 bytes @ 0x22
  3191  0042                     	ds	1
  3192  0043                     ??_sprintf:	
  3193  0043                     nrf24l01GetPipe@i:	
  3194                           ; 1 bytes @ 0x23
  3195                           
  3196                           
  3197                           ; 1 bytes @ 0x23
  3198  0043                     	ds	1
  3199  0044                     ??___ftsub:	
  3200  0044                     getADCValue@channel:	
  3201                           ; 1 bytes @ 0x24
  3202                           
  3203                           
  3204                           ; 1 bytes @ 0x24
  3205  0044                     	ds	1
  3206  0045                     getADCValue@adcLoop:	
  3207                           
  3208                           ; 1 bytes @ 0x25
  3209  0045                     	ds	1
  3210  0046                     ___fttol@exp1:	
  3211  0046                     getADCValue@adcSum:	
  3212                           ; 1 bytes @ 0x26
  3213                           
  3214                           
  3215                           ; 3 bytes @ 0x26
  3216  0046                     	ds	3
  3217  0049                     sprintf@flag:	
  3218                           
  3219                           ; 1 bytes @ 0x29
  3220  0049                     	ds	1
  3221  004A                     sprintf@ap:	
  3222                           
  3223                           ; 1 bytes @ 0x2A
  3224  004A                     	ds	1
  3225  004B                     sprintf@val:	
  3226                           
  3227                           ; 4 bytes @ 0x2B
  3228  004B                     	ds	4
  3229  004F                     sprintf@sp:	
  3230                           
  3231                           ; 1 bytes @ 0x2F
  3232  004F                     	ds	1
  3233  0050                     sprintf@width:	
  3234                           
  3235                           ; 2 bytes @ 0x30
  3236  0050                     	ds	2
  3237  0052                     sprintf@prec:	
  3238                           
  3239                           ; 2 bytes @ 0x32
  3240  0052                     	ds	2
  3241  0054                     sprintf@c:	
  3242                           
  3243                           ; 1 bytes @ 0x34
  3244  0054                     	ds	1
  3245  0055                     ?_ftoa:	
  3246  0055                     ftoa@f:	
  3247                           ; 1 bytes @ 0x35
  3248                           
  3249                           
  3250                           ; 3 bytes @ 0x35
  3251  0055                     	ds	3
  3252  0058                     ftoa@status:	
  3253                           
  3254                           ; 1 bytes @ 0x38
  3255  0058                     	ds	1
  3256  0059                     ??_ftoa:	
  3257                           
  3258                           ; 1 bytes @ 0x39
  3259  0059                     	ds	1
  3260  005A                     ftoa@rem:	
  3261                           
  3262                           ; 4 bytes @ 0x3A
  3263  005A                     	ds	4
  3264  005E                     ftoa@l:	
  3265                           
  3266                           ; 4 bytes @ 0x3E
  3267  005E                     	ds	4
  3268  0062                     ftoa@cp:	
  3269                           
  3270                           ; 1 bytes @ 0x42
  3271  0062                     	ds	1
  3272  0063                     ?_strcat:	
  3273  0063                     strcat@from:	
  3274                           ; 1 bytes @ 0x43
  3275                           
  3276                           
  3277                           ; 2 bytes @ 0x43
  3278  0063                     	ds	2
  3279  0065                     ??_strcat:	
  3280                           
  3281                           ; 1 bytes @ 0x45
  3282  0065                     	ds	1
  3283  0066                     strcat@cp:	
  3284                           
  3285                           ; 1 bytes @ 0x46
  3286  0066                     	ds	1
  3287  0067                     strcat@to:	
  3288                           
  3289                           ; 1 bytes @ 0x47
  3290  0067                     	ds	1
  3291  0068                     ?_setMessage:	
  3292  0068                     setMessage@topic:	
  3293                           ; 1 bytes @ 0x48
  3294                           
  3295                           
  3296                           ; 2 bytes @ 0x48
  3297  0068                     	ds	2
  3298  006A                     setMessage@value:	
  3299                           
  3300                           ; 3 bytes @ 0x4A
  3301  006A                     	ds	3
  3302  006D                     ??_setMessage:	
  3303                           
  3304                           ; 1 bytes @ 0x4D
  3305  006D                     	ds	1
  3306  006E                     ??_loop:	
  3307                           
  3308                           	psect	maintext
  3309  0F6A                     __pmaintext:	
  3310                           ; 1 bytes @ 0x4E
  3311 ;;
  3312 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  3313 ;;
  3314 ;; *************** function _main *****************
  3315 ;; Defined at:
  3316 ;;		line 178 in file "main.c"
  3317 ;; Parameters:    Size  Location     Type
  3318 ;;		None
  3319 ;; Auto vars:     Size  Location     Type
  3320 ;;  packet         33   44[BANK1 ] struct .
  3321 ;;  pipe            1   43[BANK1 ] unsigned char 
  3322 ;; Return value:  Size  Location     Type
  3323 ;;                  1    wreg      void 
  3324 ;; Registers used:
  3325 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3326 ;; Tracked objects:
  3327 ;;		On entry : B1F/0
  3328 ;;		On exit  : 0/0
  3329 ;;		Unchanged: 0/0
  3330 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3331 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3332 ;;      Locals:         0       0      34       0       0       0       0       0       0       0       0       0       
      +0       0
  3333 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  3334 ;;      Totals:         0       0      35       0       0       0       0       0       0       0       0       0       
      +0       0
  3335 ;;Total ram usage:       35 bytes
  3336 ;; Hardware stack levels required when called:   13
  3337 ;; This function calls:
  3338 ;;		___lwtoft
  3339 ;;		_flashRealod
  3340 ;;		_loop
  3341 ;;		_nrf24l01GetPipe
  3342 ;;		_nrf24l01Init
  3343 ;;		_nrf24l01SendPacket
  3344 ;;		_nrf24l01SetRXPipe
  3345 ;;		_nrf24l01SetTXPipe
  3346 ;;		_setMessage
  3347 ;;		_sleep
  3348 ;;		_strcpy
  3349 ;; This function is called by:
  3350 ;;		Startup code after reset
  3351 ;; This function uses a non-reentrant model
  3352 ;;
  3353                           
  3354                           
  3355                           ;psect for function _main
  3356  0F6A                     _main:	
  3357                           
  3358                           ;main.c: 181: ANSELA = 0x00;
  3359                           
  3360                           ;incstack = 0
  3361                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3362  0F6A  0023               	movlb	3	; select bank3
  3363  0F6B  018C               	clrf	12	;volatile
  3364                           
  3365                           ;main.c: 182: ANSELC = 0x00;
  3366  0F6C  018E               	clrf	14	;volatile
  3367                           
  3368                           ;main.c: 184: ODCONA = 0x00;
  3369  0F6D  0025               	movlb	5	; select bank5
  3370  0F6E  018C               	clrf	12	;volatile
  3371                           
  3372                           ;main.c: 185: ODCONC = 0x00;
  3373  0F6F  018E               	clrf	14	;volatile
  3374                           
  3375                           ;main.c: 190: INLVLA = 0x00;
  3376  0F70  0027               	movlb	7	; select bank7
  3377  0F71  018C               	clrf	12	;volatile
  3378                           
  3379                           ;main.c: 191: INLVLC = 0x00;
  3380  0F72  018E               	clrf	14	;volatile
  3381                           
  3382                           ;main.c: 193: WPUA = 0x00;
  3383  0F73  0024               	movlb	4	; select bank4
  3384  0F74  018C               	clrf	12	;volatile
  3385                           
  3386                           ;main.c: 194: WPUC = 0x00;
  3387  0F75  018E               	clrf	14	;volatile
  3388                           
  3389                           ;main.c: 196: TRISCbits.TRISC5 = 0;
  3390  0F76  0021               	movlb	1	; select bank1
  3391  0F77  128E               	bcf	14,5	;volatile
  3392                           
  3393                           ;main.c: 197: TRISCbits.TRISC4 = 0;
  3394  0F78  120E               	bcf	14,4	;volatile
  3395                           
  3396                           ;main.c: 199: PORTCbits.RC4 = 0;
  3397  0F79  0020               	movlb	0	; select bank0
  3398  0F7A  120E               	bcf	14,4	;volatile
  3399                           
  3400                           ;main.c: 206: INTCONbits.PEIE = 0;
  3401  0F7B  130B               	bcf	11,6	;volatile
  3402                           
  3403                           ;main.c: 207: INTCONbits.GIE = 0;
  3404  0F7C  138B               	bcf	11,7	;volatile
  3405                           
  3406                           ;main.c: 209: OSCCON1bits.NOSC = 0b000;
  3407  0F7D  308F               	movlw	-113
  3408  0F7E  0032               	movlb	18	; select bank18
  3409  0F7F  0599               	andwf	25,f	;volatile
  3410                           
  3411                           ;main.c: 210: OSCCON1bits.NDIV = 0b000;
  3412  0F80  30F0               	movlw	-16
  3413  0F81  0599               	andwf	25,f	;volatile
  3414                           
  3415                           ;main.c: 212: _delay((unsigned long)((10)*(16000000/4000.0)));
  3416  0F82  3034               	movlw	52
  3417  0F83  0021               	movlb	1	; select bank1
  3418  0F84  00CA               	movwf	??_main^(0+128)
  3419  0F85  30F1               	movlw	241
  3420  0F86                     u3587:	
  3421  0F86  0B89               	decfsz	9,f
  3422  0F87  2F86               	goto	u3587
  3423  0F88  0BCA               	decfsz	??_main^(0+128),f
  3424  0F89  2F86               	goto	u3587
  3425  0F8A  3200               	nop2
  3426                           
  3427                           ;main.c: 224: strcpy(romData.name, "UH1");
  3428  0F8B  3060               	movlw	low (STR_6| (0+32768))
  3429  0F8C  0020               	movlb	0	; select bank0
  3430  0F8D  00A1               	movwf	strcpy@from
  3431  0F8E  3090               	movlw	high (STR_6| (0+32768))
  3432  0F8F  00A2               	movwf	strcpy@from+1
  3433  0F90  3046               	movlw	(low ((_romData| (0+256)+1)))& (0+255)
  3434  0F91  3189  2177  318F   	fcall	_strcpy
  3435                           
  3436                           ;main.c: 226: flashRealod();
  3437  0F94  3189  21D0  318F   	fcall	_flashRealod
  3438                           
  3439                           ;main.c: 228: nrf24l01Init();
  3440  0F97  318A  22BF  318F   	fcall	_nrf24l01Init
  3441                           
  3442                           ;main.c: 230: unsigned char pipe = nrf24l01GetPipe(romData.name);
  3443  0F9A  3046               	movlw	(low ((_romData| (0+256)+1)))& (0+255)
  3444  0F9B  318D  25D3  318F   	fcall	_nrf24l01GetPipe
  3445  0F9E  0021               	movlb	1	; select bank1
  3446  0F9F  00CA               	movwf	??_main^(0+128)
  3447  0FA0  084A               	movf	??_main^(0+128),w
  3448  0FA1  00CB               	movwf	main@pipe^(0+128)
  3449                           
  3450                           ;main.c: 231: nrf24l01SetTXPipe(4);
  3451  0FA2  3004               	movlw	4
  3452  0FA3  318C  24A1  318F   	fcall	_nrf24l01SetTXPipe
  3453                           
  3454                           ;main.c: 232: nrf24l01SetRXPipe(4);
  3455  0FA6  3004               	movlw	4
  3456  0FA7  318A  2252  318F   	fcall	_nrf24l01SetRXPipe
  3457                           
  3458                           ;main.c: 236: ADCON0bits.ADON = 0;
  3459  0FAA  0021               	movlb	1	; select bank1
  3460  0FAB  101D               	bcf	29,0	;volatile
  3461                           
  3462                           ;main.c: 239: ANSELAbits.ANSA4 = 1;
  3463  0FAC  0023               	movlb	3	; select bank3
  3464  0FAD  160C               	bsf	12,4	;volatile
  3465                           
  3466                           ;main.c: 240: TRISAbits.TRISA4 = 1;
  3467  0FAE  0021               	movlb	1	; select bank1
  3468  0FAF  160C               	bsf	12,4	;volatile
  3469                           
  3470                           ;main.c: 241: WPUAbits.WPUA4 = 0;
  3471  0FB0  0024               	movlb	4	; select bank4
  3472  0FB1  120C               	bcf	12,4	;volatile
  3473                           
  3474                           ;main.c: 244: ANSELCbits.ANSC3 = 1;
  3475  0FB2  0023               	movlb	3	; select bank3
  3476  0FB3  158E               	bsf	14,3	;volatile
  3477                           
  3478                           ;main.c: 245: TRISCbits.TRISC3 = 1;
  3479  0FB4  0021               	movlb	1	; select bank1
  3480  0FB5  158E               	bsf	14,3	;volatile
  3481                           
  3482                           ;main.c: 248: FVRCONbits.TSEN = 0;
  3483  0FB6  0022               	movlb	2	; select bank2
  3484  0FB7  1297               	bcf	23,5	;volatile
  3485                           
  3486                           ;main.c: 249: FVRCONbits.TSRNG = 1;
  3487  0FB8  1617               	bsf	23,4	;volatile
  3488                           
  3489                           ;main.c: 250: FVRCONbits.TSEN = 1;
  3490  0FB9  1697               	bsf	23,5	;volatile
  3491                           
  3492                           ;main.c: 253: FVRCONbits.FVREN = 0;
  3493  0FBA  1397               	bcf	23,7	;volatile
  3494                           
  3495                           ;main.c: 254: FVRCONbits.ADFVR = 1;
  3496  0FBB  0817               	movf	23,w	;volatile
  3497  0FBC  39FC               	andlw	-4
  3498  0FBD  3801               	iorlw	1
  3499  0FBE  0097               	movwf	23	;volatile
  3500                           
  3501                           ;main.c: 255: FVRCONbits.FVREN = 1;
  3502  0FBF  1797               	bsf	23,7	;volatile
  3503                           
  3504                           ;main.c: 257: ADCON1bits.ADCS = 0b111;
  3505  0FC0  3070               	movlw	112
  3506  0FC1  0021               	movlb	1	; select bank1
  3507  0FC2  049E               	iorwf	30,f	;volatile
  3508                           
  3509                           ;main.c: 258: ADCON1bits.ADFM = 1;
  3510  0FC3  179E               	bsf	30,7	;volatile
  3511                           
  3512                           ;main.c: 259: ADCON1bits.ADNREF = 0b0;
  3513  0FC4  111E               	bcf	30,2	;volatile
  3514                           
  3515                           ;main.c: 260: ADCON1bits.ADPREF = 0b00;
  3516  0FC5  30FC               	movlw	-4
  3517  0FC6  059E               	andwf	30,f	;volatile
  3518                           
  3519                           ;main.c: 262: ADCON0bits.CHS = 3;
  3520  0FC7  081D               	movf	29,w	;volatile
  3521  0FC8  3903               	andlw	-253
  3522  0FC9  380C               	iorlw	12
  3523  0FCA  009D               	movwf	29	;volatile
  3524                           
  3525                           ;main.c: 263: ADCON0bits.ADON = 1;
  3526  0FCB  141D               	bsf	29,0	;volatile
  3527                           
  3528                           ;main.c: 268: TRISAbits.TRISA2 = 1;
  3529  0FCC  150C               	bsf	12,2	;volatile
  3530                           
  3531                           ;main.c: 269: PIE0bits.INTE = 1;
  3532  0FCD  1410               	bsf	16,0	;volatile
  3533                           
  3534                           ;main.c: 270: INTCONbits.INTEDG = 0;
  3535  0FCE  100B               	bcf	11,0	;volatile
  3536                           
  3537                           ;main.c: 274: WDTCONbits.WDTPS = 11;
  3538  0FCF  0817               	movf	23,w	;volatile
  3539  0FD0  39C1               	andlw	-63
  3540  0FD1  3816               	iorlw	22
  3541  0FD2  0097               	movwf	23	;volatile
  3542                           
  3543                           ;main.c: 277: TRISAbits.TRISA5 = 0;
  3544  0FD3  128C               	bcf	12,5	;volatile
  3545                           
  3546                           ;main.c: 278: PORTAbits.RA5 = 0;
  3547  0FD4  0020               	movlb	0	; select bank0
  3548  0FD5  128C               	bcf	12,5	;volatile
  3549                           
  3550                           ;main.c: 281: INTCONbits.PEIE = 1;
  3551  0FD6  170B               	bsf	11,6	;volatile
  3552                           
  3553                           ;main.c: 282: INTCONbits.GIE = 1;
  3554  0FD7  178B               	bsf	11,7	;volatile
  3555                           
  3556                           ;main.c: 284: nrf24l01Packet_t packet;;main.c: 286: setMessage(&packet, "BOOT", romData.
      +                          bootMode);
  3557  0FD8  305B               	movlw	low (STR_7| (0+32768))
  3558  0FD9  00E8               	movwf	setMessage@topic
  3559  0FDA  3090               	movlw	high (STR_7| (0+32768))
  3560  0FDB  00E9               	movwf	setMessage@topic+1
  3561  0FDC  0022               	movlb	2	; select bank2
  3562  0FDD  0857               	movf	((_romData+1)^(0+256)+17),w
  3563  0FDE  0020               	movlb	0	; select bank0
  3564  0FDF  00AA               	movwf	___lwtoft@c+1
  3565  0FE0  0022               	movlb	2	; select bank2
  3566  0FE1  0856               	movf	(_romData^(0+256)+17),w
  3567  0FE2  0020               	movlb	0	; select bank0
  3568  0FE3  00A9               	movwf	___lwtoft@c
  3569  0FE4  3188  2090  318F   	fcall	___lwtoft
  3570  0FE7  0020               	movlb	0	; select bank0
  3571  0FE8  0829               	movf	?___lwtoft,w
  3572  0FE9  00EA               	movwf	setMessage@value
  3573  0FEA  082A               	movf	?___lwtoft+1,w
  3574  0FEB  00EB               	movwf	setMessage@value+1
  3575  0FEC  082B               	movf	?___lwtoft+2,w
  3576  0FED  00EC               	movwf	setMessage@value+2
  3577  0FEE  30CC               	movlw	(low (main@packet| 0))& (0+255)
  3578  0FEF  318E  2628  318F   	fcall	_setMessage
  3579                           
  3580                           ;main.c: 287: packet.packetData.byte = 0;
  3581  0FF2  0021               	movlb	1	; select bank1
  3582  0FF3  01CC               	clrf	main@packet^(0+128)
  3583                           
  3584                           ;main.c: 288: packet.packetData.ACKRequest = 0;
  3585  0FF4  114C               	bcf	main@packet^(0+128),2
  3586                           
  3587                           ;main.c: 289: nrf24l01SendPacket(&packet);
  3588  0FF5  30CC               	movlw	(low (main@packet| 0))& (0+255)
  3589  0FF6  3183  23F2  318F   	fcall	_nrf24l01SendPacket
  3590                           
  3591                           ;main.c: 290: sleep();
  3592  0FF9  3188  2058  318F   	fcall	_sleep
  3593  0FFC                     l3941:	
  3594                           ;main.c: 292: while(1){
  3595                           
  3596                           
  3597                           ;main.c: 293: loop();
  3598  0FFC  3185  2560  318F   	fcall	_loop
  3599  0FFF  2FFC               	goto	l3941
  3600  1000                     __end_of_main:	
  3601                           ;main.c: 294: };main.c: 296: return;
  3602                           
  3603                           
  3604                           	psect	text1
  3605  0977                     __ptext1:	
  3606 ;; *************** function _strcpy *****************
  3607 ;; Defined at:
  3608 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\strcpy.c"
  3609 ;; Parameters:    Size  Location     Type
  3610 ;;  to              1    wreg     PTR unsigned char 
  3611 ;;		 -> romData(19), 
  3612 ;;  from            2    1[BANK0 ] PTR const unsigned char 
  3613 ;;		 -> STR_6(4), 
  3614 ;; Auto vars:     Size  Location     Type
  3615 ;;  to              1    4[BANK0 ] PTR unsigned char 
  3616 ;;		 -> romData(19), 
  3617 ;;  cp              1    5[BANK0 ] PTR unsigned char 
  3618 ;;		 -> romData(19), 
  3619 ;; Return value:  Size  Location     Type
  3620 ;;                  1    wreg      PTR unsigned char 
  3621 ;; Registers used:
  3622 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath
  3623 ;; Tracked objects:
  3624 ;;		On entry : 0/0
  3625 ;;		On exit  : 0/0
  3626 ;;		Unchanged: 0/0
  3627 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3628 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3629 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3630 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3631 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3632 ;;Total ram usage:        5 bytes
  3633 ;; Hardware stack levels used:    1
  3634 ;; Hardware stack levels required when called:    7
  3635 ;; This function calls:
  3636 ;;		Nothing
  3637 ;; This function is called by:
  3638 ;;		_main
  3639 ;; This function uses a non-reentrant model
  3640 ;;
  3641                           
  3642                           
  3643                           ;psect for function _strcpy
  3644  0977                     _strcpy:	
  3645                           
  3646                           ;incstack = 0
  3647                           ; Regs used in _strcpy: [wreg-fsr1h+status,2+status,0+pclath]
  3648                           ;strcpy@to stored from wreg
  3649  0977  0020               	movlb	0	; select bank0
  3650  0978  00A4               	movwf	strcpy@to
  3651  0979  0824               	movf	strcpy@to,w
  3652  097A  00A3               	movwf	??_strcpy
  3653  097B  0823               	movf	??_strcpy,w
  3654  097C  00A5               	movwf	strcpy@cp
  3655  097D                     l3503:	
  3656  097D  0825               	movf	strcpy@cp,w
  3657  097E  0086               	movwf	6
  3658  097F  3001               	movlw	1	; select bank2/3
  3659  0980  0087               	movwf	7
  3660  0981  0821               	movf	strcpy@from,w
  3661  0982  0084               	movwf	4
  3662  0983  0822               	movf	strcpy@from+1,w
  3663  0984  0085               	movwf	5
  3664  0985  0800               	movf	0,w	;code access
  3665  0986  3FC0               	movwi [0]fsr1
  3666  0987  0889               	movf	9,f
  3667  0988  1903               	btfsc	3,2
  3668  0989  0008               	return
  3669  098A  3001               	movlw	1
  3670  098B  00A3               	movwf	??_strcpy
  3671  098C  0823               	movf	??_strcpy,w
  3672  098D  07A5               	addwf	strcpy@cp,f
  3673  098E  3001               	movlw	1
  3674  098F  07A1               	addwf	strcpy@from,f
  3675  0990  3000               	movlw	0
  3676  0991  3DA2               	addwfc	strcpy@from+1,f
  3677  0992  297D               	goto	l3503
  3678  0993                     __end_of_strcpy:	
  3679                           ;	Return value of _strcpy is never used
  3680                           
  3681                           
  3682                           	psect	text2
  3683  0ABF                     __ptext2:	
  3684 ;; *************** function _nrf24l01Init *****************
  3685 ;; Defined at:
  3686 ;;		line 444 in file "nrf24l01.c"
  3687 ;; Parameters:    Size  Location     Type
  3688 ;;		None
  3689 ;; Auto vars:     Size  Location     Type
  3690 ;;		None
  3691 ;; Return value:  Size  Location     Type
  3692 ;;                  1    wreg      void 
  3693 ;; Registers used:
  3694 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3695 ;; Tracked objects:
  3696 ;;		On entry : 0/0
  3697 ;;		On exit  : 0/0
  3698 ;;		Unchanged: 0/0
  3699 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3700 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3701 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3702 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3703 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3704 ;;Total ram usage:        2 bytes
  3705 ;; Hardware stack levels used:    1
  3706 ;; Hardware stack levels required when called:   12
  3707 ;; This function calls:
  3708 ;;		_nrf24l01CEHigh
  3709 ;;		_nrf24l01CELow
  3710 ;;		_nrf24l01InitRegisters
  3711 ;;		_nrf24l01InterfaceInit
  3712 ;; This function is called by:
  3713 ;;		_main
  3714 ;; This function uses a non-reentrant model
  3715 ;;
  3716                           
  3717                           
  3718                           ;psect for function _nrf24l01Init
  3719  0ABF                     _nrf24l01Init:	
  3720                           
  3721                           ;nrf24l01.c: 447: nrf24l01InterfaceInit();
  3722                           
  3723                           ;incstack = 0
  3724                           ; Regs used in _nrf24l01Init: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3725  0ABF  3189  215B  318A   	fcall	_nrf24l01InterfaceInit
  3726                           
  3727                           ;nrf24l01.c: 452: nrf24l01CELow();
  3728  0AC2  3188  201A  318A   	fcall	_nrf24l01CELow
  3729                           
  3730                           ;nrf24l01.c: 454: _delay((unsigned long)((50000)*(16000000/4000000.0)));
  3731  0AC5  3002               	movlw	2
  3732  0AC6  0020               	movlb	0	; select bank0
  3733  0AC7  00B5               	movwf	??_nrf24l01Init+1
  3734  0AC8  3004               	movlw	4
  3735  0AC9  00B4               	movwf	??_nrf24l01Init
  3736  0ACA  30BA               	movlw	186
  3737  0ACB                     u3597:	
  3738  0ACB  0B89               	decfsz	9,f
  3739  0ACC  2ACB               	goto	u3597
  3740  0ACD  0BB4               	decfsz	??_nrf24l01Init,f
  3741  0ACE  2ACB               	goto	u3597
  3742  0ACF  0BB5               	decfsz	??_nrf24l01Init+1,f
  3743  0AD0  2ACB               	goto	u3597
  3744  0AD1  0000               	nop
  3745                           
  3746                           ;nrf24l01.c: 456: nrf24l01InitRegisters();
  3747  0AD2  3181  21F6  318A   	fcall	_nrf24l01InitRegisters
  3748                           
  3749                           ;nrf24l01.c: 458: _delay((unsigned long)((50000)*(16000000/4000000.0)));
  3750  0AD5  3002               	movlw	2
  3751  0AD6  0020               	movlb	0	; select bank0
  3752  0AD7  00B5               	movwf	??_nrf24l01Init+1
  3753  0AD8  3004               	movlw	4
  3754  0AD9  00B4               	movwf	??_nrf24l01Init
  3755  0ADA  30BA               	movlw	186
  3756  0ADB                     u3607:	
  3757  0ADB  0B89               	decfsz	9,f
  3758  0ADC  2ADB               	goto	u3607
  3759  0ADD  0BB4               	decfsz	??_nrf24l01Init,f
  3760  0ADE  2ADB               	goto	u3607
  3761  0ADF  0BB5               	decfsz	??_nrf24l01Init+1,f
  3762  0AE0  2ADB               	goto	u3607
  3763  0AE1  0000               	nop
  3764                           
  3765                           ;nrf24l01.c: 460: nrf24l01CEHigh();
  3766  0AE2  3188  2017         	fcall	_nrf24l01CEHigh
  3767  0AE4  0008               	return
  3768  0AE5                     __end_of_nrf24l01Init:	
  3769                           
  3770                           	psect	text3
  3771  095B                     __ptext3:	
  3772 ;; *************** function _nrf24l01InterfaceInit *****************
  3773 ;; Defined at:
  3774 ;;		line 28 in file "interface.c"
  3775 ;; Parameters:    Size  Location     Type
  3776 ;;		None
  3777 ;; Auto vars:     Size  Location     Type
  3778 ;;		None
  3779 ;; Return value:  Size  Location     Type
  3780 ;;                  1    wreg      void 
  3781 ;; Registers used:
  3782 ;;		wreg, status,2, status,0
  3783 ;; Tracked objects:
  3784 ;;		On entry : 0/0
  3785 ;;		On exit  : 0/0
  3786 ;;		Unchanged: 0/0
  3787 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3788 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3789 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3790 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3791 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3792 ;;Total ram usage:        0 bytes
  3793 ;; Hardware stack levels used:    1
  3794 ;; Hardware stack levels required when called:    7
  3795 ;; This function calls:
  3796 ;;		Nothing
  3797 ;; This function is called by:
  3798 ;;		_nrf24l01Init
  3799 ;; This function uses a non-reentrant model
  3800 ;;
  3801                           
  3802                           
  3803                           ;psect for function _nrf24l01InterfaceInit
  3804  095B                     _nrf24l01InterfaceInit:	
  3805                           
  3806                           ;interface.c: 30: TRISAbits.TRISA0 = 0;
  3807                           
  3808                           ;incstack = 0
  3809                           ; Regs used in _nrf24l01InterfaceInit: [wreg+status,2+status,0]
  3810  095B  0021               	movlb	1	; select bank1
  3811  095C  100C               	bcf	12,0	;volatile
  3812                           
  3813                           ;interface.c: 31: TRISAbits.TRISA1 = 0;
  3814  095D  108C               	bcf	12,1	;volatile
  3815                           
  3816                           ;interface.c: 33: TRISCbits.TRISC1 = 1;
  3817  095E  148E               	bsf	14,1	;volatile
  3818                           
  3819                           ;interface.c: 34: TRISCbits.TRISC2 = 0;
  3820  095F  110E               	bcf	14,2	;volatile
  3821                           
  3822                           ;interface.c: 35: TRISCbits.TRISC0 = 0;
  3823  0960  100E               	bcf	14,0	;volatile
  3824                           
  3825                           ;interface.c: 37: SSP1CON1bits.SSPEN = 0;
  3826  0961  0024               	movlb	4	; select bank4
  3827  0962  1295               	bcf	21,5	;volatile
  3828                           
  3829                           ;interface.c: 39: RC1PPSbits.RC1PPS = 0b10001;
  3830  0963  003D               	movlb	29	; select bank29
  3831  0964  0821               	movf	33,w	;volatile
  3832  0965  39E0               	andlw	-32
  3833  0966  3811               	iorlw	17
  3834  0967  00A1               	movwf	33	;volatile
  3835                           
  3836                           ;interface.c: 40: RC2PPSbits.RC2PPS = 0b11001;
  3837  0968  0822               	movf	34,w	;volatile
  3838  0969  39E0               	andlw	-32
  3839  096A  3819               	iorlw	25
  3840  096B  00A2               	movwf	34	;volatile
  3841                           
  3842                           ;interface.c: 41: RC0PPSbits.RC0PPS = 0b11000;
  3843  096C  0820               	movf	32,w	;volatile
  3844  096D  39E0               	andlw	-32
  3845  096E  3818               	iorlw	24
  3846  096F  00A0               	movwf	32	;volatile
  3847                           
  3848                           ;interface.c: 43: SSP1CON1bits.CKP = 0;
  3849  0970  0024               	movlb	4	; select bank4
  3850  0971  1215               	bcf	21,4	;volatile
  3851                           
  3852                           ;interface.c: 44: SSP1STATbits.CKE = 1;
  3853  0972  1714               	bsf	20,6	;volatile
  3854                           
  3855                           ;interface.c: 45: SSP1CON1bits.SSPM = 0b0000;
  3856  0973  30F0               	movlw	-16
  3857  0974  0595               	andwf	21,f	;volatile
  3858                           
  3859                           ;interface.c: 47: SSP1CON1bits.SSPEN = 1;
  3860  0975  1695               	bsf	21,5	;volatile
  3861  0976  0008               	return
  3862  0977                     __end_of_nrf24l01InterfaceInit:	
  3863                           
  3864                           	psect	text4
  3865  01F6                     __ptext4:	
  3866 ;; *************** function _nrf24l01InitRegisters *****************
  3867 ;; Defined at:
  3868 ;;		line 343 in file "nrf24l01.c"
  3869 ;; Parameters:    Size  Location     Type
  3870 ;;		None
  3871 ;; Auto vars:     Size  Location     Type
  3872 ;;  i               2   18[BANK0 ] unsigned int 
  3873 ;;  config          1   17[BANK0 ] struct .
  3874 ;;  DynPD           1   16[BANK0 ] struct .
  3875 ;;  enAA            1   15[BANK0 ] struct .
  3876 ;;  status          1   14[BANK0 ] struct .
  3877 ;;  rfSetup         1   13[BANK0 ] struct .
  3878 ;;  feature         1   12[BANK0 ] struct .
  3879 ;;  setupAW         1   11[BANK0 ] struct .
  3880 ;;  channel         1   10[BANK0 ] struct .
  3881 ;; Return value:  Size  Location     Type
  3882 ;;                  1    wreg      void 
  3883 ;; Registers used:
  3884 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3885 ;; Tracked objects:
  3886 ;;		On entry : 0/0
  3887 ;;		On exit  : 0/0
  3888 ;;		Unchanged: 0/0
  3889 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3890 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3891 ;;      Locals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3892 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3893 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3894 ;;Total ram usage:       12 bytes
  3895 ;; Hardware stack levels used:    1
  3896 ;; Hardware stack levels required when called:   11
  3897 ;; This function calls:
  3898 ;;		___bmul
  3899 ;;		_nrf24l01SPIEnd
  3900 ;;		_nrf24l01SPISend
  3901 ;;		_nrf24l01SPIStart
  3902 ;;		_nrf24l01Send
  3903 ;;		_nrf24l01SetRXPipe
  3904 ;;		_nrf24l01SetTXPipe
  3905 ;; This function is called by:
  3906 ;;		_nrf24l01Init
  3907 ;; This function uses a non-reentrant model
  3908 ;;
  3909                           
  3910                           
  3911                           ;psect for function _nrf24l01InitRegisters
  3912  01F6                     _nrf24l01InitRegisters:	
  3913                           
  3914                           ;nrf24l01.c: 345: n_CONFIG_t config;;nrf24l01.c: 347: config.PWR_UP = 0;
  3915                           
  3916                           ;incstack = 0
  3917                           ; Regs used in _nrf24l01InitRegisters: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3918  01F6  0020               	movlb	0	; select bank0
  3919  01F7  10B1               	bcf	nrf24l01InitRegisters@config,1
  3920                           
  3921                           ;nrf24l01.c: 348: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x00, config.byte);
  3922  01F8  0831               	movf	nrf24l01InitRegisters@config,w
  3923  01F9  00A8               	movwf	??_nrf24l01InitRegisters
  3924  01FA  0828               	movf	??_nrf24l01InitRegisters,w
  3925  01FB  00A1               	movwf	nrf24l01Send@data
  3926  01FC  3020               	movlw	32
  3927  01FD  3189  21F0  3181   	fcall	_nrf24l01Send
  3928                           
  3929                           ;nrf24l01.c: 350: n_SETUP_AW_t setupAW;;nrf24l01.c: 351: setupAW.byte = 0x00;
  3930  0200  0020               	movlb	0	; select bank0
  3931  0201  01AB               	clrf	nrf24l01InitRegisters@setupAW
  3932                           
  3933                           ;nrf24l01.c: 352: setupAW.AW = 0b11;
  3934  0202  3003               	movlw	3
  3935  0203  04AB               	iorwf	nrf24l01InitRegisters@setupAW,f
  3936                           
  3937                           ;nrf24l01.c: 353: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x02, setupAW.byte);
  3938  0204  082B               	movf	nrf24l01InitRegisters@setupAW,w
  3939  0205  00A8               	movwf	??_nrf24l01InitRegisters
  3940  0206  0828               	movf	??_nrf24l01InitRegisters,w
  3941  0207  00A1               	movwf	nrf24l01Send@data
  3942  0208  3022               	movlw	34
  3943  0209  3189  21F0  3181   	fcall	_nrf24l01Send
  3944                           
  3945                           ;nrf24l01.c: 356: n_RF_CH_t channel;;nrf24l01.c: 357: channel.RF_CH = 2;
  3946  020C  0020               	movlb	0	; select bank0
  3947  020D  082A               	movf	nrf24l01InitRegisters@channel,w
  3948  020E  3980               	andlw	-128
  3949  020F  3802               	iorlw	2
  3950  0210  00AA               	movwf	nrf24l01InitRegisters@channel
  3951                           
  3952                           ;nrf24l01.c: 358: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x05, channel.byte);
  3953  0211  082A               	movf	nrf24l01InitRegisters@channel,w
  3954  0212  00A8               	movwf	??_nrf24l01InitRegisters
  3955  0213  0828               	movf	??_nrf24l01InitRegisters,w
  3956  0214  00A1               	movwf	nrf24l01Send@data
  3957  0215  3025               	movlw	37
  3958  0216  3189  21F0  3181   	fcall	_nrf24l01Send
  3959                           
  3960                           ;nrf24l01.c: 361: n_RF_SETUP_t rfSetup;;nrf24l01.c: 362: rfSetup.byte = 0x00;
  3961  0219  0020               	movlb	0	; select bank0
  3962  021A  01AD               	clrf	nrf24l01InitRegisters@rfSetup
  3963                           
  3964                           ;nrf24l01.c: 363: rfSetup.RF_DR_LOW = 0;
  3965  021B  12AD               	bcf	nrf24l01InitRegisters@rfSetup,5
  3966                           
  3967                           ;nrf24l01.c: 364: rfSetup.RF_DR_HIGH = 1;
  3968  021C  15AD               	bsf	nrf24l01InitRegisters@rfSetup,3
  3969                           
  3970                           ;nrf24l01.c: 365: rfSetup.RF_PWR = 3;
  3971  021D  3006               	movlw	6
  3972  021E  04AD               	iorwf	nrf24l01InitRegisters@rfSetup,f
  3973                           
  3974                           ;nrf24l01.c: 366: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x06, rfSetup.byte);
  3975  021F  082D               	movf	nrf24l01InitRegisters@rfSetup,w
  3976  0220  00A8               	movwf	??_nrf24l01InitRegisters
  3977  0221  0828               	movf	??_nrf24l01InitRegisters,w
  3978  0222  00A1               	movwf	nrf24l01Send@data
  3979  0223  3026               	movlw	38
  3980  0224  3189  21F0  3181   	fcall	_nrf24l01Send
  3981                           
  3982                           ;nrf24l01.c: 369: nrf24l01SetRXPipe(0xFF);
  3983  0227  30FF               	movlw	255
  3984  0228  318A  2252  3181   	fcall	_nrf24l01SetRXPipe
  3985                           
  3986                           ;nrf24l01.c: 372: n_EN_AA_t enAA;;nrf24l01.c: 373: enAA.byte = nrf24l01Send((unsigned) 0
      +                          b00000000 | (unsigned) 0x01, 0);
  3987  022B  0020               	movlb	0	; select bank0
  3988  022C  01A1               	clrf	nrf24l01Send@data
  3989  022D  3001               	movlw	1
  3990  022E  3189  21F0  3181   	fcall	_nrf24l01Send
  3991  0231  0020               	movlb	0	; select bank0
  3992  0232  00A8               	movwf	??_nrf24l01InitRegisters
  3993  0233  0828               	movf	??_nrf24l01InitRegisters,w
  3994  0234  00AF               	movwf	nrf24l01InitRegisters@enAA
  3995                           
  3996                           ;nrf24l01.c: 374: enAA.ENAA_P0 = 0;
  3997  0235  102F               	bcf	nrf24l01InitRegisters@enAA,0
  3998                           
  3999                           ;nrf24l01.c: 375: enAA.ENAA_P1 = 0;
  4000  0236  10AF               	bcf	nrf24l01InitRegisters@enAA,1
  4001                           
  4002                           ;nrf24l01.c: 376: enAA.ENAA_P2 = 0;
  4003  0237  112F               	bcf	nrf24l01InitRegisters@enAA,2
  4004                           
  4005                           ;nrf24l01.c: 377: enAA.ENAA_P3 = 0;
  4006  0238  11AF               	bcf	nrf24l01InitRegisters@enAA,3
  4007                           
  4008                           ;nrf24l01.c: 378: enAA.ENAA_P4 = 0;
  4009  0239  122F               	bcf	nrf24l01InitRegisters@enAA,4
  4010                           
  4011                           ;nrf24l01.c: 379: enAA.ENAA_P5 = 0;
  4012  023A  12AF               	bcf	nrf24l01InitRegisters@enAA,5
  4013                           
  4014                           ;nrf24l01.c: 380: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x01, enAA.byte);
  4015  023B  082F               	movf	nrf24l01InitRegisters@enAA,w
  4016  023C  00A8               	movwf	??_nrf24l01InitRegisters
  4017  023D  0828               	movf	??_nrf24l01InitRegisters,w
  4018  023E  00A1               	movwf	nrf24l01Send@data
  4019  023F  3021               	movlw	33
  4020  0240  3189  21F0  3181   	fcall	_nrf24l01Send
  4021                           
  4022                           ;nrf24l01.c: 384: n_FEATURE_t feature;;nrf24l01.c: 385: feature.byte = nrf24l01Send((uns
      +                          igned) 0b00000000 | (unsigned) 0x1D, 0);
  4023  0243  0020               	movlb	0	; select bank0
  4024  0244  01A1               	clrf	nrf24l01Send@data
  4025  0245  301D               	movlw	29
  4026  0246  3189  21F0  3181   	fcall	_nrf24l01Send
  4027  0249  0020               	movlb	0	; select bank0
  4028  024A  00A8               	movwf	??_nrf24l01InitRegisters
  4029  024B  0828               	movf	??_nrf24l01InitRegisters,w
  4030  024C  00AC               	movwf	nrf24l01InitRegisters@feature
  4031                           
  4032                           ;nrf24l01.c: 386: feature.EN_DPL = 1;
  4033  024D  152C               	bsf	nrf24l01InitRegisters@feature,2
  4034                           
  4035                           ;nrf24l01.c: 387: feature.EN_DYN_ACK = 1;
  4036  024E  142C               	bsf	nrf24l01InitRegisters@feature,0
  4037                           
  4038                           ;nrf24l01.c: 388: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x1D, feature.byte);
  4039  024F  082C               	movf	nrf24l01InitRegisters@feature,w
  4040  0250  00A8               	movwf	??_nrf24l01InitRegisters
  4041  0251  0828               	movf	??_nrf24l01InitRegisters,w
  4042  0252  00A1               	movwf	nrf24l01Send@data
  4043  0253  303D               	movlw	61
  4044  0254  3189  21F0  3181   	fcall	_nrf24l01Send
  4045                           
  4046                           ;nrf24l01.c: 390: n_DYNPD_t DynPD;;nrf24l01.c: 391: DynPD.byte = nrf24l01Send((unsigned)
      +                           0b00000000 | (unsigned) 0x1C, 0);
  4047  0257  0020               	movlb	0	; select bank0
  4048  0258  01A1               	clrf	nrf24l01Send@data
  4049  0259  301C               	movlw	28
  4050  025A  3189  21F0  3181   	fcall	_nrf24l01Send
  4051  025D  0020               	movlb	0	; select bank0
  4052  025E  00A8               	movwf	??_nrf24l01InitRegisters
  4053  025F  0828               	movf	??_nrf24l01InitRegisters,w
  4054  0260  00B0               	movwf	nrf24l01InitRegisters@DynPD
  4055                           
  4056                           ;nrf24l01.c: 392: DynPD.DPL_P0 = 1;
  4057  0261  1430               	bsf	nrf24l01InitRegisters@DynPD,0
  4058                           
  4059                           ;nrf24l01.c: 393: DynPD.DPL_P1 = 1;
  4060  0262  14B0               	bsf	nrf24l01InitRegisters@DynPD,1
  4061                           
  4062                           ;nrf24l01.c: 394: DynPD.DPL_P2 = 1;
  4063  0263  1530               	bsf	nrf24l01InitRegisters@DynPD,2
  4064                           
  4065                           ;nrf24l01.c: 395: DynPD.DPL_P3 = 1;
  4066  0264  15B0               	bsf	nrf24l01InitRegisters@DynPD,3
  4067                           
  4068                           ;nrf24l01.c: 396: DynPD.DPL_P4 = 1;
  4069  0265  1630               	bsf	nrf24l01InitRegisters@DynPD,4
  4070                           
  4071                           ;nrf24l01.c: 397: DynPD.DPL_P5 = 1;
  4072  0266  16B0               	bsf	nrf24l01InitRegisters@DynPD,5
  4073                           
  4074                           ;nrf24l01.c: 398: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x1C, DynPD.byte);
  4075  0267  0830               	movf	nrf24l01InitRegisters@DynPD,w
  4076  0268  00A8               	movwf	??_nrf24l01InitRegisters
  4077  0269  0828               	movf	??_nrf24l01InitRegisters,w
  4078  026A  00A1               	movwf	nrf24l01Send@data
  4079  026B  303C               	movlw	60
  4080  026C  3189  21F0  3181   	fcall	_nrf24l01Send
  4081                           
  4082                           ;nrf24l01.c: 401: unsigned int i;;nrf24l01.c: 402: for (i = 0; i < 6; i++){
  4083  026F  0020               	movlb	0	; select bank0
  4084  0270  01B2               	clrf	nrf24l01InitRegisters@i
  4085  0271  01B3               	clrf	nrf24l01InitRegisters@i+1
  4086  0272  3000               	movlw	0
  4087  0273  0233               	subwf	nrf24l01InitRegisters@i+1,w
  4088  0274  3006               	movlw	6
  4089  0275  1903               	skipnz
  4090  0276  0232               	subwf	nrf24l01InitRegisters@i,w
  4091  0277  1803               	btfsc	3,0
  4092  0278  2AD2               	goto	l3369
  4093  0279                     l3355:	
  4094                           
  4095                           ;nrf24l01.c: 404: nrf24l01SPIStart();
  4096  0279  3188  2038  3181   	fcall	_nrf24l01SPIStart
  4097                           
  4098                           ;nrf24l01.c: 405: nrf24l01SPISend((unsigned) 0b00100000 | ((unsigned) 0x0A + i));
  4099  027C  0020               	movlb	0	; select bank0
  4100  027D  0832               	movf	nrf24l01InitRegisters@i,w
  4101  027E  3E0A               	addlw	10
  4102  027F  3820               	iorlw	32
  4103  0280  3187  27F2  3181   	fcall	_nrf24l01SPISend
  4104                           
  4105                           ;nrf24l01.c: 407: nrf24l01SPISend(n_ADDRESS_P0[4] + (n_ADDRESS_MUL * i));
  4106  0283  3050               	movlw	low ((_n_ADDRESS_P0+4)| (0+32768))
  4107  0284  0084               	movwf	4
  4108  0285  3090               	movlw	high ((_n_ADDRESS_P0+4)| (0+32768))
  4109  0286  0085               	movwf	5
  4110  0287  0800               	movf	0,w	;code access
  4111  0288  0020               	movlb	0	; select bank0
  4112  0289  00A8               	movwf	??_nrf24l01InitRegisters
  4113  028A  0832               	movf	nrf24l01InitRegisters@i,w
  4114  028B  00A9               	movwf	??_nrf24l01InitRegisters+1
  4115  028C  0829               	movf	??_nrf24l01InitRegisters+1,w
  4116  028D  00A1               	movwf	___bmul@multiplicand
  4117  028E  3066               	movlw	low (_n_ADDRESS_MUL| (0+32768))
  4118  028F  0084               	movwf	4
  4119  0290  3090               	movlw	high (_n_ADDRESS_MUL| (0+32768))
  4120  0291  0085               	movwf	5
  4121  0292  0800               	movf	0,w	;code access
  4122  0293  3188  206A  3181   	fcall	___bmul
  4123  0296  0020               	movlb	0	; select bank0
  4124  0297  0728               	addwf	??_nrf24l01InitRegisters,w
  4125  0298  3187  27F2  3181   	fcall	_nrf24l01SPISend
  4126                           
  4127                           ;nrf24l01.c: 409: if (i < 2){
  4128  029B  3000               	movlw	0
  4129  029C  0020               	movlb	0	; select bank0
  4130  029D  0233               	subwf	nrf24l01InitRegisters@i+1,w
  4131  029E  3002               	movlw	2
  4132  029F  1903               	skipnz
  4133  02A0  0232               	subwf	nrf24l01InitRegisters@i,w
  4134  02A1  1803               	skipnc
  4135  02A2  2AC3               	goto	l3363
  4136                           
  4137                           ;nrf24l01.c: 410: nrf24l01SPISend(n_ADDRESS_P0[3]);
  4138  02A3  304F               	movlw	low ((_n_ADDRESS_P0+3)| (0+32768))
  4139  02A4  0084               	movwf	4
  4140  02A5  3090               	movlw	high ((_n_ADDRESS_P0+3)| (0+32768))
  4141  02A6  0085               	movwf	5
  4142  02A7  0800               	movf	0,w	;code access
  4143  02A8  3187  27F2  3181   	fcall	_nrf24l01SPISend
  4144                           
  4145                           ;nrf24l01.c: 411: nrf24l01SPISend(n_ADDRESS_P0[2]);
  4146  02AB  304E               	movlw	low ((_n_ADDRESS_P0+2)| (0+32768))
  4147  02AC  0084               	movwf	4
  4148  02AD  3090               	movlw	high ((_n_ADDRESS_P0+2)| (0+32768))
  4149  02AE  0085               	movwf	5
  4150  02AF  0800               	movf	0,w	;code access
  4151  02B0  3187  27F2  3181   	fcall	_nrf24l01SPISend
  4152                           
  4153                           ;nrf24l01.c: 412: nrf24l01SPISend(n_ADDRESS_P0[1]);
  4154  02B3  304D               	movlw	low ((_n_ADDRESS_P0+1)| (0+32768))
  4155  02B4  0084               	movwf	4
  4156  02B5  3090               	movlw	high ((_n_ADDRESS_P0+1)| (0+32768))
  4157  02B6  0085               	movwf	5
  4158  02B7  0800               	movf	0,w	;code access
  4159  02B8  3187  27F2  3181   	fcall	_nrf24l01SPISend
  4160                           
  4161                           ;nrf24l01.c: 413: nrf24l01SPISend(n_ADDRESS_P0[0]);
  4162  02BB  304C               	movlw	low (_n_ADDRESS_P0| (0+32768))
  4163  02BC  0084               	movwf	4
  4164  02BD  3090               	movlw	high (_n_ADDRESS_P0| (0+32768))
  4165  02BE  0085               	movwf	5
  4166  02BF  0800               	movf	0,w	;code access
  4167  02C0  3187  27F2  3181   	fcall	_nrf24l01SPISend
  4168  02C3                     l3363:	
  4169                           
  4170                           ;nrf24l01.c: 414: };nrf24l01.c: 416: nrf24l01SPIEnd();
  4171  02C3  3188  2029  3181   	fcall	_nrf24l01SPIEnd
  4172  02C6  3001               	movlw	1
  4173  02C7  0020               	movlb	0	; select bank0
  4174  02C8  07B2               	addwf	nrf24l01InitRegisters@i,f
  4175  02C9  3000               	movlw	0
  4176  02CA  3DB3               	addwfc	nrf24l01InitRegisters@i+1,f
  4177  02CB  3000               	movlw	0
  4178  02CC  0233               	subwf	nrf24l01InitRegisters@i+1,w
  4179  02CD  3006               	movlw	6
  4180  02CE  1903               	skipnz
  4181  02CF  0232               	subwf	nrf24l01InitRegisters@i,w
  4182  02D0  1C03               	skipc
  4183  02D1  2A79               	goto	l3355
  4184  02D2                     l3369:	
  4185                           
  4186                           ;nrf24l01.c: 417: };nrf24l01.c: 419: nrf24l01SetTXPipe(0);
  4187  02D2  3000               	movlw	0
  4188  02D3  318C  24A1  3181   	fcall	_nrf24l01SetTXPipe
  4189                           
  4190                           ;nrf24l01.c: 423: n_STATUS_t status;;nrf24l01.c: 424: status.byte = 0x00;
  4191  02D6  0020               	movlb	0	; select bank0
  4192  02D7  01AE               	clrf	nrf24l01InitRegisters@status
  4193                           
  4194                           ;nrf24l01.c: 425: status.RX_DR = 1;
  4195  02D8  172E               	bsf	nrf24l01InitRegisters@status,6
  4196                           
  4197                           ;nrf24l01.c: 426: status.TX_DS = 1;
  4198  02D9  16AE               	bsf	nrf24l01InitRegisters@status,5
  4199                           
  4200                           ;nrf24l01.c: 427: status.MAX_RT = 1;
  4201  02DA  162E               	bsf	nrf24l01InitRegisters@status,4
  4202                           
  4203                           ;nrf24l01.c: 428: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x07, status.byte);
  4204  02DB  082E               	movf	nrf24l01InitRegisters@status,w
  4205  02DC  00A8               	movwf	??_nrf24l01InitRegisters
  4206  02DD  0828               	movf	??_nrf24l01InitRegisters,w
  4207  02DE  00A1               	movwf	nrf24l01Send@data
  4208  02DF  3027               	movlw	39
  4209  02E0  3189  21F0  3181   	fcall	_nrf24l01Send
  4210                           
  4211                           ;nrf24l01.c: 431: nrf24l01Send((unsigned) 0b11100001, 0);
  4212  02E3  0020               	movlb	0	; select bank0
  4213  02E4  01A1               	clrf	nrf24l01Send@data
  4214  02E5  30E1               	movlw	225
  4215  02E6  3189  21F0  3181   	fcall	_nrf24l01Send
  4216                           
  4217                           ;nrf24l01.c: 432: nrf24l01Send((unsigned) 0b11100010, 0);
  4218  02E9  0020               	movlb	0	; select bank0
  4219  02EA  01A1               	clrf	nrf24l01Send@data
  4220  02EB  30E2               	movlw	226
  4221  02EC  3189  21F0  3181   	fcall	_nrf24l01Send
  4222                           
  4223                           ;nrf24l01.c: 435: config.PRIM_RX = 1;
  4224  02EF  0020               	movlb	0	; select bank0
  4225  02F0  1431               	bsf	nrf24l01InitRegisters@config,0
  4226                           
  4227                           ;nrf24l01.c: 436: config.EN_CRC = 1;
  4228  02F1  15B1               	bsf	nrf24l01InitRegisters@config,3
  4229                           
  4230                           ;nrf24l01.c: 437: config.CRCO = 1;
  4231  02F2  1531               	bsf	nrf24l01InitRegisters@config,2
  4232                           
  4233                           ;nrf24l01.c: 438: config.PWR_UP = 1;
  4234  02F3  14B1               	bsf	nrf24l01InitRegisters@config,1
  4235                           
  4236                           ;nrf24l01.c: 439: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x00, config.byte);
  4237  02F4  0831               	movf	nrf24l01InitRegisters@config,w
  4238  02F5  00A8               	movwf	??_nrf24l01InitRegisters
  4239  02F6  0828               	movf	??_nrf24l01InitRegisters,w
  4240  02F7  00A1               	movwf	nrf24l01Send@data
  4241  02F8  3020               	movlw	32
  4242  02F9  3189  21F0         	fcall	_nrf24l01Send
  4243  02FB  0008               	return
  4244  02FC                     __end_of_nrf24l01InitRegisters:	
  4245                           
  4246                           	psect	text5
  4247  0CA1                     __ptext5:	
  4248 ;; *************** function _nrf24l01SetTXPipe *****************
  4249 ;; Defined at:
  4250 ;;		line 309 in file "nrf24l01.c"
  4251 ;; Parameters:    Size  Location     Type
  4252 ;;  pipe            1    wreg     unsigned char 
  4253 ;; Auto vars:     Size  Location     Type
  4254 ;;  pipe            1    7[BANK0 ] unsigned char 
  4255 ;; Return value:  Size  Location     Type
  4256 ;;                  1    wreg      void 
  4257 ;; Registers used:
  4258 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4259 ;; Tracked objects:
  4260 ;;		On entry : 0/0
  4261 ;;		On exit  : 0/0
  4262 ;;		Unchanged: 0/0
  4263 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4264 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4265 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4266 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4267 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4268 ;;Total ram usage:        3 bytes
  4269 ;; Hardware stack levels used:    1
  4270 ;; Hardware stack levels required when called:    9
  4271 ;; This function calls:
  4272 ;;		___bmul
  4273 ;;		_nrf24l01SPIEnd
  4274 ;;		_nrf24l01SPISend
  4275 ;;		_nrf24l01SPIStart
  4276 ;; This function is called by:
  4277 ;;		_main
  4278 ;;		_nrf24l01InitRegisters
  4279 ;;		_nrf24l01SendACK
  4280 ;; This function uses a non-reentrant model
  4281 ;;
  4282                           
  4283                           
  4284                           ;psect for function _nrf24l01SetTXPipe
  4285  0CA1                     _nrf24l01SetTXPipe:	
  4286                           
  4287                           ;incstack = 0
  4288                           ; Regs used in _nrf24l01SetTXPipe: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4289                           ;nrf24l01SetTXPipe@pipe stored from wreg
  4290  0CA1  0020               	movlb	0	; select bank0
  4291  0CA2  00A7               	movwf	nrf24l01SetTXPipe@pipe
  4292                           
  4293                           ;nrf24l01.c: 312: nrf24l01SPIStart();
  4294  0CA3  3188  2038  318C   	fcall	_nrf24l01SPIStart
  4295                           
  4296                           ;nrf24l01.c: 313: nrf24l01SPISend((unsigned) 0b00100000 | (unsigned) 0x10);
  4297  0CA6  3030               	movlw	48
  4298  0CA7  3187  27F2  318C   	fcall	_nrf24l01SPISend
  4299                           
  4300                           ;nrf24l01.c: 314: nrf24l01SPISend(n_ADDRESS_P0[4] + (unsigned) (pipe * n_ADDRESS_MUL));
  4301  0CAA  3050               	movlw	low ((_n_ADDRESS_P0+4)| (0+32768))
  4302  0CAB  0084               	movwf	4
  4303  0CAC  3090               	movlw	high ((_n_ADDRESS_P0+4)| (0+32768))
  4304  0CAD  0085               	movwf	5
  4305  0CAE  0800               	movf	0,w	;code access
  4306  0CAF  0020               	movlb	0	; select bank0
  4307  0CB0  00A5               	movwf	??_nrf24l01SetTXPipe
  4308  0CB1  3066               	movlw	low (_n_ADDRESS_MUL| (0+32768))
  4309  0CB2  0084               	movwf	4
  4310  0CB3  3090               	movlw	high (_n_ADDRESS_MUL| (0+32768))
  4311  0CB4  0085               	movwf	5
  4312  0CB5  0800               	movf	0,w	;code access
  4313  0CB6  00A6               	movwf	??_nrf24l01SetTXPipe+1
  4314  0CB7  0826               	movf	??_nrf24l01SetTXPipe+1,w
  4315  0CB8  00A1               	movwf	___bmul@multiplicand
  4316  0CB9  0827               	movf	nrf24l01SetTXPipe@pipe,w
  4317  0CBA  3188  206A  318C   	fcall	___bmul
  4318  0CBD  0020               	movlb	0	; select bank0
  4319  0CBE  0725               	addwf	??_nrf24l01SetTXPipe,w
  4320  0CBF  3187  27F2  318C   	fcall	_nrf24l01SPISend
  4321                           
  4322                           ;nrf24l01.c: 315: nrf24l01SPISend(n_ADDRESS_P0[3]);
  4323  0CC2  304F               	movlw	low ((_n_ADDRESS_P0+3)| (0+32768))
  4324  0CC3  0084               	movwf	4
  4325  0CC4  3090               	movlw	high ((_n_ADDRESS_P0+3)| (0+32768))
  4326  0CC5  0085               	movwf	5
  4327  0CC6  0800               	movf	0,w	;code access
  4328  0CC7  3187  27F2  318C   	fcall	_nrf24l01SPISend
  4329                           
  4330                           ;nrf24l01.c: 316: nrf24l01SPISend(n_ADDRESS_P0[2]);
  4331  0CCA  304E               	movlw	low ((_n_ADDRESS_P0+2)| (0+32768))
  4332  0CCB  0084               	movwf	4
  4333  0CCC  3090               	movlw	high ((_n_ADDRESS_P0+2)| (0+32768))
  4334  0CCD  0085               	movwf	5
  4335  0CCE  0800               	movf	0,w	;code access
  4336  0CCF  3187  27F2  318C   	fcall	_nrf24l01SPISend
  4337                           
  4338                           ;nrf24l01.c: 317: nrf24l01SPISend(n_ADDRESS_P0[1]);
  4339  0CD2  304D               	movlw	low ((_n_ADDRESS_P0+1)| (0+32768))
  4340  0CD3  0084               	movwf	4
  4341  0CD4  3090               	movlw	high ((_n_ADDRESS_P0+1)| (0+32768))
  4342  0CD5  0085               	movwf	5
  4343  0CD6  0800               	movf	0,w	;code access
  4344  0CD7  3187  27F2  318C   	fcall	_nrf24l01SPISend
  4345                           
  4346                           ;nrf24l01.c: 318: nrf24l01SPISend(n_ADDRESS_P0[0]);
  4347  0CDA  304C               	movlw	low (_n_ADDRESS_P0| (0+32768))
  4348  0CDB  0084               	movwf	4
  4349  0CDC  3090               	movlw	high (_n_ADDRESS_P0| (0+32768))
  4350  0CDD  0085               	movwf	5
  4351  0CDE  0800               	movf	0,w	;code access
  4352  0CDF  3187  27F2  318C   	fcall	_nrf24l01SPISend
  4353                           
  4354                           ;nrf24l01.c: 319: nrf24l01SPIEnd();
  4355  0CE2  3188  2029         	fcall	_nrf24l01SPIEnd
  4356  0CE4  0008               	return
  4357  0CE5                     __end_of_nrf24l01SetTXPipe:	
  4358                           
  4359                           	psect	text6
  4360  086A                     __ptext6:	
  4361 ;; *************** function ___bmul *****************
  4362 ;; Defined at:
  4363 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\Umul8.c"
  4364 ;; Parameters:    Size  Location     Type
  4365 ;;  multiplier      1    wreg     unsigned char 
  4366 ;;  multiplicand    1    1[BANK0 ] unsigned char 
  4367 ;; Auto vars:     Size  Location     Type
  4368 ;;  multiplier      1    4[BANK0 ] unsigned char 
  4369 ;;  product         1    3[BANK0 ] unsigned char 
  4370 ;; Return value:  Size  Location     Type
  4371 ;;                  1    wreg      unsigned char 
  4372 ;; Registers used:
  4373 ;;		wreg, status,2, status,0
  4374 ;; Tracked objects:
  4375 ;;		On entry : 0/0
  4376 ;;		On exit  : 0/0
  4377 ;;		Unchanged: 0/0
  4378 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4379 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4380 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4381 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4382 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4383 ;;Total ram usage:        4 bytes
  4384 ;; Hardware stack levels used:    1
  4385 ;; Hardware stack levels required when called:    7
  4386 ;; This function calls:
  4387 ;;		Nothing
  4388 ;; This function is called by:
  4389 ;;		_nrf24l01SetTXPipe
  4390 ;;		_nrf24l01InitRegisters
  4391 ;; This function uses a non-reentrant model
  4392 ;;
  4393                           
  4394                           
  4395                           ;psect for function ___bmul
  4396  086A                     ___bmul:	
  4397                           
  4398                           ;incstack = 0
  4399                           ; Regs used in ___bmul: [wreg+status,2+status,0]
  4400                           ;___bmul@multiplier stored from wreg
  4401  086A  0020               	movlb	0	; select bank0
  4402  086B  00A4               	movwf	___bmul@multiplier
  4403  086C  01A3               	clrf	___bmul@product
  4404  086D                     l2697:	
  4405  086D  1C24               	btfss	___bmul@multiplier,0
  4406  086E  2873               	goto	l2701
  4407  086F  0821               	movf	___bmul@multiplicand,w
  4408  0870  00A2               	movwf	??___bmul
  4409  0871  0822               	movf	??___bmul,w
  4410  0872  07A3               	addwf	___bmul@product,f
  4411  0873                     l2701:	
  4412  0873  1003               	clrc
  4413  0874  0DA1               	rlf	___bmul@multiplicand,f
  4414  0875  1003               	clrc
  4415  0876  0CA4               	rrf	___bmul@multiplier,f
  4416  0877  0824               	movf	___bmul@multiplier,w
  4417  0878  1D03               	btfss	3,2
  4418  0879  286D               	goto	l2697
  4419  087A  0823               	movf	___bmul@product,w
  4420  087B  0008               	return
  4421  087C                     __end_of___bmul:	
  4422                           
  4423                           	psect	text7
  4424  0A52                     __ptext7:	
  4425 ;; *************** function _nrf24l01SetRXPipe *****************
  4426 ;; Defined at:
  4427 ;;		line 322 in file "nrf24l01.c"
  4428 ;; Parameters:    Size  Location     Type
  4429 ;;  pipe            1    wreg     unsigned char 
  4430 ;; Auto vars:     Size  Location     Type
  4431 ;;  pipe            1    6[BANK0 ] unsigned char 
  4432 ;;  enRXAddr        1    7[BANK0 ] struct .
  4433 ;; Return value:  Size  Location     Type
  4434 ;;                  1    wreg      void 
  4435 ;; Registers used:
  4436 ;;		wreg, status,2, status,0, pclath, cstack
  4437 ;; Tracked objects:
  4438 ;;		On entry : 0/0
  4439 ;;		On exit  : 0/0
  4440 ;;		Unchanged: 0/0
  4441 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4442 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4443 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4444 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4445 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4446 ;;Total ram usage:        4 bytes
  4447 ;; Hardware stack levels used:    1
  4448 ;; Hardware stack levels required when called:   10
  4449 ;; This function calls:
  4450 ;;		_nrf24l01Send
  4451 ;; This function is called by:
  4452 ;;		_main
  4453 ;;		_nrf24l01InitRegisters
  4454 ;; This function uses a non-reentrant model
  4455 ;;
  4456                           
  4457                           
  4458                           ;psect for function _nrf24l01SetRXPipe
  4459  0A52                     _nrf24l01SetRXPipe:	
  4460                           
  4461                           ;incstack = 0
  4462                           ; Regs used in _nrf24l01SetRXPipe: [wreg+status,2+status,0+pclath+cstack]
  4463                           ;nrf24l01SetRXPipe@pipe stored from wreg
  4464  0A52  0020               	movlb	0	; select bank0
  4465  0A53  00A6               	movwf	nrf24l01SetRXPipe@pipe
  4466                           
  4467                           ;nrf24l01.c: 324: n_EN_RXADDR_t enRXAddr;;nrf24l01.c: 326: if (pipe > 5){
  4468  0A54  3006               	movlw	6
  4469  0A55  0226               	subwf	nrf24l01SetRXPipe@pipe,w
  4470  0A56  1C03               	skipc
  4471  0A57  2A5F               	goto	l368
  4472                           
  4473                           ;nrf24l01.c: 327: enRXAddr.ERX_P0 = 1;
  4474  0A58  1427               	bsf	nrf24l01SetRXPipe@enRXAddr,0
  4475                           
  4476                           ;nrf24l01.c: 328: enRXAddr.ERX_P1 = 1;
  4477  0A59  14A7               	bsf	nrf24l01SetRXPipe@enRXAddr,1
  4478                           
  4479                           ;nrf24l01.c: 329: enRXAddr.ERX_P2 = 1;
  4480  0A5A  1527               	bsf	nrf24l01SetRXPipe@enRXAddr,2
  4481                           
  4482                           ;nrf24l01.c: 330: enRXAddr.ERX_P3 = 1;
  4483  0A5B  15A7               	bsf	nrf24l01SetRXPipe@enRXAddr,3
  4484                           
  4485                           ;nrf24l01.c: 331: enRXAddr.ERX_P4 = 1;
  4486  0A5C  1627               	bsf	nrf24l01SetRXPipe@enRXAddr,4
  4487                           
  4488                           ;nrf24l01.c: 332: enRXAddr.ERX_P5 = 1;
  4489  0A5D  16A7               	bsf	nrf24l01SetRXPipe@enRXAddr,5
  4490                           
  4491                           ;nrf24l01.c: 333: }
  4492  0A5E  2A6B               	goto	l2985
  4493  0A5F                     l368:	
  4494                           
  4495                           ;nrf24l01.c: 335: else{;nrf24l01.c: 336: enRXAddr.ERX_P0 = 1;
  4496  0A5F  1427               	bsf	nrf24l01SetRXPipe@enRXAddr,0
  4497                           
  4498                           ;nrf24l01.c: 337: enRXAddr.byte = (unsigned) enRXAddr.byte << pipe;
  4499  0A60  0827               	movf	nrf24l01SetRXPipe@enRXAddr,w
  4500  0A61  00A4               	movwf	??_nrf24l01SetRXPipe
  4501  0A62  0A26               	incf	nrf24l01SetRXPipe@pipe,w
  4502  0A63  2A65               	goto	u2874
  4503  0A64                     u2875:	
  4504  0A64  35A4               	lslf	??_nrf24l01SetRXPipe,f
  4505  0A65                     u2874:	
  4506  0A65  0B89               	decfsz	9,f
  4507  0A66  2A64               	goto	u2875
  4508  0A67  0824               	movf	??_nrf24l01SetRXPipe,w
  4509  0A68  00A5               	movwf	??_nrf24l01SetRXPipe+1
  4510  0A69  0825               	movf	??_nrf24l01SetRXPipe+1,w
  4511  0A6A  00A7               	movwf	nrf24l01SetRXPipe@enRXAddr
  4512  0A6B                     l2985:	
  4513                           
  4514                           ;nrf24l01.c: 338: };nrf24l01.c: 340: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x0
      +                          2, enRXAddr.byte);
  4515  0A6B  0827               	movf	nrf24l01SetRXPipe@enRXAddr,w
  4516  0A6C  00A4               	movwf	??_nrf24l01SetRXPipe
  4517  0A6D  0824               	movf	??_nrf24l01SetRXPipe,w
  4518  0A6E  00A1               	movwf	nrf24l01Send@data
  4519  0A6F  3022               	movlw	34
  4520  0A70  3189  21F0         	fcall	_nrf24l01Send
  4521  0A72  0008               	return
  4522  0A73                     __end_of_nrf24l01SetRXPipe:	
  4523                           
  4524                           	psect	text8
  4525  0DD3                     __ptext8:	
  4526 ;; *************** function _nrf24l01GetPipe *****************
  4527 ;; Defined at:
  4528 ;;		line 165 in file "main.c"
  4529 ;; Parameters:    Size  Location     Type
  4530 ;;  name            1    wreg     PTR unsigned char 
  4531 ;;		 -> romData(19), 
  4532 ;; Auto vars:     Size  Location     Type
  4533 ;;  name            1   30[BANK0 ] PTR unsigned char 
  4534 ;;		 -> romData(19), 
  4535 ;;  pipe            4   31[BANK0 ] unsigned long 
  4536 ;;  i               1   35[BANK0 ] unsigned char 
  4537 ;; Return value:  Size  Location     Type
  4538 ;;                  1    wreg      unsigned char 
  4539 ;; Registers used:
  4540 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4541 ;; Tracked objects:
  4542 ;;		On entry : 0/0
  4543 ;;		On exit  : 0/0
  4544 ;;		Unchanged: 0/0
  4545 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4546 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4547 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4548 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4549 ;;      Totals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4550 ;;Total ram usage:       11 bytes
  4551 ;; Hardware stack levels used:    1
  4552 ;; Hardware stack levels required when called:    8
  4553 ;; This function calls:
  4554 ;;		___llmod
  4555 ;;		_strlen
  4556 ;; This function is called by:
  4557 ;;		_main
  4558 ;; This function uses a non-reentrant model
  4559 ;;
  4560                           
  4561                           
  4562                           ;psect for function _nrf24l01GetPipe
  4563  0DD3                     _nrf24l01GetPipe:	
  4564                           
  4565                           ;incstack = 0
  4566                           ; Regs used in _nrf24l01GetPipe: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4567                           ;nrf24l01GetPipe@name stored from wreg
  4568  0DD3  0020               	movlb	0	; select bank0
  4569  0DD4  00BE               	movwf	nrf24l01GetPipe@name
  4570                           
  4571                           ;main.c: 166: unsigned long pipe = 0;
  4572  0DD5  3000               	movlw	0
  4573  0DD6  00C2               	movwf	nrf24l01GetPipe@pipe+3
  4574  0DD7  3000               	movlw	0
  4575  0DD8  00C1               	movwf	nrf24l01GetPipe@pipe+2
  4576  0DD9  3000               	movlw	0
  4577  0DDA  00C0               	movwf	nrf24l01GetPipe@pipe+1
  4578  0DDB  3000               	movlw	0
  4579  0DDC  00BF               	movwf	nrf24l01GetPipe@pipe
  4580                           
  4581                           ;main.c: 167: unsigned char i = 0;
  4582  0DDD  01C3               	clrf	nrf24l01GetPipe@i
  4583                           
  4584                           ;main.c: 170: for (i = 0; i < strlen(name); i++){
  4585  0DDE  01C3               	clrf	nrf24l01GetPipe@i
  4586  0DDF                     l3835:	
  4587  0DDF  083E               	movf	nrf24l01GetPipe@name,w
  4588  0DE0  00A1               	movwf	strlen@s
  4589  0DE1  3001               	movlw	1
  4590  0DE2  00A2               	movwf	strlen@s+1
  4591  0DE3  3189  21B1  318D   	fcall	_strlen
  4592  0DE6  0020               	movlb	0	; select bank0
  4593  0DE7  0843               	movf	nrf24l01GetPipe@i,w
  4594  0DE8  00B9               	movwf	??_nrf24l01GetPipe
  4595  0DE9  01BA               	clrf	??_nrf24l01GetPipe+1
  4596  0DEA  0822               	movf	?_strlen+1,w
  4597  0DEB  023A               	subwf	??_nrf24l01GetPipe+1,w
  4598  0DEC  1D03               	skipz
  4599  0DED  2DF0               	goto	u3565
  4600  0DEE  0821               	movf	?_strlen,w
  4601  0DEF  0239               	subwf	??_nrf24l01GetPipe,w
  4602  0DF0                     u3565:	
  4603  0DF0  1803               	btfsc	3,0
  4604  0DF1  2E0B               	goto	l3837
  4605                           
  4606                           ;main.c: 171: pipe+= name[i];
  4607  0DF2  0843               	movf	nrf24l01GetPipe@i,w
  4608  0DF3  073E               	addwf	nrf24l01GetPipe@name,w
  4609  0DF4  00B9               	movwf	??_nrf24l01GetPipe
  4610  0DF5  0839               	movf	??_nrf24l01GetPipe,w
  4611  0DF6  0086               	movwf	6
  4612  0DF7  3001               	movlw	1	; select bank2/3
  4613  0DF8  0087               	movwf	7
  4614  0DF9  0801               	movf	1,w
  4615  0DFA  00BA               	movwf	??_nrf24l01GetPipe+1
  4616  0DFB  01BB               	clrf	??_nrf24l01GetPipe+2
  4617  0DFC  01BC               	clrf	??_nrf24l01GetPipe+3
  4618  0DFD  01BD               	clrf	??_nrf24l01GetPipe+4
  4619  0DFE  083A               	movf	??_nrf24l01GetPipe+1,w
  4620  0DFF  07BF               	addwf	nrf24l01GetPipe@pipe,f
  4621  0E00  083B               	movf	??_nrf24l01GetPipe+2,w
  4622  0E01  3DC0               	addwfc	nrf24l01GetPipe@pipe+1,f
  4623  0E02  083C               	movf	??_nrf24l01GetPipe+3,w
  4624  0E03  3DC1               	addwfc	nrf24l01GetPipe@pipe+2,f
  4625  0E04  083D               	movf	??_nrf24l01GetPipe+4,w
  4626  0E05  3DC2               	addwfc	nrf24l01GetPipe@pipe+3,f
  4627  0E06  3001               	movlw	1
  4628  0E07  00B9               	movwf	??_nrf24l01GetPipe
  4629  0E08  0839               	movf	??_nrf24l01GetPipe,w
  4630  0E09  07C3               	addwf	nrf24l01GetPipe@i,f
  4631  0E0A  2DDF               	goto	l3835
  4632  0E0B                     l3837:	
  4633                           
  4634                           ;main.c: 172: };main.c: 174: pipe%= 6;
  4635  0E0B  3000               	movlw	0
  4636  0E0C  00B2               	movwf	___llmod@divisor+3
  4637  0E0D  3000               	movlw	0
  4638  0E0E  00B1               	movwf	___llmod@divisor+2
  4639  0E0F  3000               	movlw	0
  4640  0E10  00B0               	movwf	___llmod@divisor+1
  4641  0E11  3006               	movlw	6
  4642  0E12  00AF               	movwf	___llmod@divisor
  4643  0E13  0842               	movf	nrf24l01GetPipe@pipe+3,w
  4644  0E14  00B6               	movwf	___llmod@dividend+3
  4645  0E15  0841               	movf	nrf24l01GetPipe@pipe+2,w
  4646  0E16  00B5               	movwf	___llmod@dividend+2
  4647  0E17  0840               	movf	nrf24l01GetPipe@pipe+1,w
  4648  0E18  00B4               	movwf	___llmod@dividend+1
  4649  0E19  083F               	movf	nrf24l01GetPipe@pipe,w
  4650  0E1A  00B3               	movwf	___llmod@dividend
  4651  0E1B  318C  245E         	fcall	___llmod
  4652  0E1D  0020               	movlb	0	; select bank0
  4653  0E1E  0832               	movf	?___llmod+3,w
  4654  0E1F  00C2               	movwf	nrf24l01GetPipe@pipe+3
  4655  0E20  0831               	movf	?___llmod+2,w
  4656  0E21  00C1               	movwf	nrf24l01GetPipe@pipe+2
  4657  0E22  0830               	movf	?___llmod+1,w
  4658  0E23  00C0               	movwf	nrf24l01GetPipe@pipe+1
  4659  0E24  082F               	movf	?___llmod,w
  4660  0E25  00BF               	movwf	nrf24l01GetPipe@pipe
  4661                           
  4662                           ;main.c: 175: return pipe;
  4663  0E26  083F               	movf	nrf24l01GetPipe@pipe,w
  4664  0E27  0008               	return
  4665  0E28                     __end_of_nrf24l01GetPipe:	
  4666                           
  4667                           	psect	text9
  4668  0560                     __ptext9:	
  4669 ;; *************** function _loop *****************
  4670 ;; Defined at:
  4671 ;;		line 97 in file "main.c"
  4672 ;; Parameters:    Size  Location     Type
  4673 ;;		None
  4674 ;; Auto vars:     Size  Location     Type
  4675 ;;  packet         33    9[BANK1 ] struct .
  4676 ;; Return value:  Size  Location     Type
  4677 ;;                  1    wreg      void 
  4678 ;; Registers used:
  4679 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4680 ;; Tracked objects:
  4681 ;;		On entry : 0/0
  4682 ;;		On exit  : 0/0
  4683 ;;		Unchanged: 0/0
  4684 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4685 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4686 ;;      Locals:         0       0      39       0       0       0       0       0       0       0       0       0       
      +0       0
  4687 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4688 ;;      Totals:         0       0      39       0       0       0       0       0       0       0       0       0       
      +0       0
  4689 ;;Total ram usage:       39 bytes
  4690 ;; Hardware stack levels used:    1
  4691 ;; Hardware stack levels required when called:   12
  4692 ;; This function calls:
  4693 ;;		___ftadd
  4694 ;;		_checkTXPower
  4695 ;;		_getADCValue
  4696 ;;		_nrf24l01SendPacket
  4697 ;;		_setMessage
  4698 ;;		_sleep
  4699 ;; This function is called by:
  4700 ;;		_main
  4701 ;; This function uses a non-reentrant model
  4702 ;;
  4703                           
  4704                           
  4705                           ;psect for function _loop
  4706  0560                     _loop:	
  4707                           
  4708                           ;incstack = 0
  4709                           ; Regs used in _loop: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4710  0560  0064               	clrwdt	;# 
  4711                           
  4712                           ;main.c: 102: nrf24l01Packet_t packet;;main.c: 111: setMessage(&packet, "VBAT", getADCVa
      +                          lue(0b000100, 0.0101235));
  4713  0561  3056               	movlw	low (STR_3| (0+32768))
  4714  0562  0020               	movlb	0	; select bank0
  4715  0563  00E8               	movwf	setMessage@topic
  4716  0564  3090               	movlw	high (STR_3| (0+32768))
  4717  0565  00E9               	movwf	setMessage@topic+1
  4718  0566  30DD               	movlw	221
  4719  0567  00BE               	movwf	getADCValue@multiplier
  4720  0568  3025               	movlw	37
  4721  0569  00BF               	movwf	getADCValue@multiplier+1
  4722  056A  303C               	movlw	60
  4723  056B  00C0               	movwf	getADCValue@multiplier+2
  4724  056C  3004               	movlw	4
  4725  056D  3187  2756  3185   	fcall	_getADCValue
  4726  0570  0020               	movlb	0	; select bank0
  4727  0571  083E               	movf	?_getADCValue,w
  4728  0572  00EA               	movwf	setMessage@value
  4729  0573  083F               	movf	?_getADCValue+1,w
  4730  0574  00EB               	movwf	setMessage@value+1
  4731  0575  0840               	movf	?_getADCValue+2,w
  4732  0576  00EC               	movwf	setMessage@value+2
  4733  0577  30A9               	movlw	(low (loop@packet| 0))& (0+255)
  4734  0578  318E  2628  3185   	fcall	_setMessage
  4735                           
  4736                           ;main.c: 112: packet.packetData.byte = 0;
  4737  057B  0021               	movlb	1	; select bank1
  4738  057C  01A9               	clrf	loop@packet^(0+128)
  4739                           
  4740                           ;main.c: 113: packet.packetData.ACKRequest = 1;
  4741  057D  1529               	bsf	loop@packet^(0+128),2
  4742                           
  4743                           ;main.c: 114: nrf24l01SendPacket(&packet);
  4744  057E  30A9               	movlw	(low (loop@packet| 0))& (0+255)
  4745  057F  3183  23F2  3185   	fcall	_nrf24l01SendPacket
  4746                           
  4747                           ;main.c: 115: checkTXPower();
  4748  0582  3188  207C  3185   	fcall	_checkTXPower
  4749                           
  4750                           ;main.c: 116: sleep();
  4751  0585  3188  2058  3185   	fcall	_sleep
  4752                           
  4753                           ;main.c: 136: setMessage(&packet, "TEMP", getADCValue(0b111101, 0.5505378) - 146.5075148
      +                          238);
  4754  0588  30F0               	movlw	240
  4755  0589  0020               	movlb	0	; select bank0
  4756  058A  00BE               	movwf	getADCValue@multiplier
  4757  058B  300C               	movlw	12
  4758  058C  00BF               	movwf	getADCValue@multiplier+1
  4759  058D  303F               	movlw	63
  4760  058E  00C0               	movwf	getADCValue@multiplier+2
  4761  058F  303D               	movlw	61
  4762  0590  3187  2756  3185   	fcall	_getADCValue
  4763  0593  0020               	movlb	0	; select bank0
  4764  0594  083E               	movf	?_getADCValue,w
  4765  0595  0021               	movlb	1	; select bank1
  4766  0596  00A3               	movwf	_loop$2039^(0+128)
  4767  0597  0020               	movlb	0	; select bank0
  4768  0598  083F               	movf	?_getADCValue+1,w
  4769  0599  0021               	movlb	1	; select bank1
  4770  059A  00A4               	movwf	(_loop$2039+1)^(0+128)
  4771  059B  0020               	movlb	0	; select bank0
  4772  059C  0840               	movf	?_getADCValue+2,w
  4773  059D  0021               	movlb	1	; select bank1
  4774  059E  00A5               	movwf	(_loop$2039+2)^(0+128)
  4775                           
  4776                           ;main.c: 136: setMessage(&packet, "TEMP", getADCValue(0b111101, 0.5505378) - 146.5075148
      +                          238);
  4777  059F  3082               	movlw	130
  4778  05A0  0020               	movlb	0	; select bank0
  4779  05A1  00B1               	movwf	___ftadd@f1
  4780  05A2  3012               	movlw	18
  4781  05A3  00B2               	movwf	___ftadd@f1+1
  4782  05A4  30C3               	movlw	195
  4783  05A5  00B3               	movwf	___ftadd@f1+2
  4784  05A6  0021               	movlb	1	; select bank1
  4785  05A7  0823               	movf	_loop$2039^(0+128),w
  4786  05A8  0020               	movlb	0	; select bank0
  4787  05A9  00B4               	movwf	___ftadd@f2
  4788  05AA  0021               	movlb	1	; select bank1
  4789  05AB  0824               	movf	(_loop$2039+1)^(0+128),w
  4790  05AC  0020               	movlb	0	; select bank0
  4791  05AD  00B5               	movwf	___ftadd@f2+1
  4792  05AE  0021               	movlb	1	; select bank1
  4793  05AF  0825               	movf	(_loop$2039+2)^(0+128),w
  4794  05B0  0020               	movlb	0	; select bank0
  4795  05B1  00B6               	movwf	___ftadd@f2+2
  4796  05B2  3182  22FC  3185   	fcall	___ftadd
  4797  05B5  0020               	movlb	0	; select bank0
  4798  05B6  0831               	movf	?___ftadd,w
  4799  05B7  0021               	movlb	1	; select bank1
  4800  05B8  00A6               	movwf	_loop$2040^(0+128)
  4801  05B9  0020               	movlb	0	; select bank0
  4802  05BA  0832               	movf	?___ftadd+1,w
  4803  05BB  0021               	movlb	1	; select bank1
  4804  05BC  00A7               	movwf	(_loop$2040+1)^(0+128)
  4805  05BD  0020               	movlb	0	; select bank0
  4806  05BE  0833               	movf	?___ftadd+2,w
  4807  05BF  0021               	movlb	1	; select bank1
  4808  05C0  00A8               	movwf	(_loop$2040+2)^(0+128)
  4809                           
  4810                           ;main.c: 136: setMessage(&packet, "TEMP", getADCValue(0b111101, 0.5505378) - 146.5075148
      +                          238);
  4811  05C1  3051               	movlw	low (STR_4| (0+32768))
  4812  05C2  0020               	movlb	0	; select bank0
  4813  05C3  00E8               	movwf	setMessage@topic
  4814  05C4  3090               	movlw	high (STR_4| (0+32768))
  4815  05C5  00E9               	movwf	setMessage@topic+1
  4816  05C6  0021               	movlb	1	; select bank1
  4817  05C7  0826               	movf	_loop$2040^(0+128),w
  4818  05C8  0020               	movlb	0	; select bank0
  4819  05C9  00EA               	movwf	setMessage@value
  4820  05CA  0021               	movlb	1	; select bank1
  4821  05CB  0827               	movf	(_loop$2040+1)^(0+128),w
  4822  05CC  0020               	movlb	0	; select bank0
  4823  05CD  00EB               	movwf	setMessage@value+1
  4824  05CE  0021               	movlb	1	; select bank1
  4825  05CF  0828               	movf	(_loop$2040+2)^(0+128),w
  4826  05D0  0020               	movlb	0	; select bank0
  4827  05D1  00EC               	movwf	setMessage@value+2
  4828  05D2  30A9               	movlw	(low (loop@packet| 0))& (0+255)
  4829  05D3  318E  2628  3185   	fcall	_setMessage
  4830                           
  4831                           ;main.c: 137: packet.packetData.byte = 0;
  4832  05D6  0021               	movlb	1	; select bank1
  4833  05D7  01A9               	clrf	loop@packet^(0+128)
  4834                           
  4835                           ;main.c: 138: packet.packetData.ACKRequest = 1;
  4836  05D8  1529               	bsf	loop@packet^(0+128),2
  4837                           
  4838                           ;main.c: 139: nrf24l01SendPacket(&packet);
  4839  05D9  30A9               	movlw	(low (loop@packet| 0))& (0+255)
  4840  05DA  3183  23F2  3185   	fcall	_nrf24l01SendPacket
  4841                           
  4842                           ;main.c: 140: checkTXPower();
  4843  05DD  3188  207C  3185   	fcall	_checkTXPower
  4844                           
  4845                           ;main.c: 141: sleep();
  4846  05E0  3188  2058  3185   	fcall	_sleep
  4847                           
  4848                           ;main.c: 144: setMessage(&packet, "TEMPR", getADCValue(0b111101, 1));
  4849  05E3  3046               	movlw	low (STR_5| (0+32768))
  4850  05E4  0020               	movlb	0	; select bank0
  4851  05E5  00E8               	movwf	setMessage@topic
  4852  05E6  3090               	movlw	high (STR_5| (0+32768))
  4853  05E7  00E9               	movwf	setMessage@topic+1
  4854  05E8  3000               	movlw	0
  4855  05E9  00BE               	movwf	getADCValue@multiplier
  4856  05EA  3080               	movlw	128
  4857  05EB  00BF               	movwf	getADCValue@multiplier+1
  4858  05EC  303F               	movlw	63
  4859  05ED  00C0               	movwf	getADCValue@multiplier+2
  4860  05EE  303D               	movlw	61
  4861  05EF  3187  2756  3185   	fcall	_getADCValue
  4862  05F2  0020               	movlb	0	; select bank0
  4863  05F3  083E               	movf	?_getADCValue,w
  4864  05F4  00EA               	movwf	setMessage@value
  4865  05F5  083F               	movf	?_getADCValue+1,w
  4866  05F6  00EB               	movwf	setMessage@value+1
  4867  05F7  0840               	movf	?_getADCValue+2,w
  4868  05F8  00EC               	movwf	setMessage@value+2
  4869  05F9  30A9               	movlw	(low (loop@packet| 0))& (0+255)
  4870  05FA  318E  2628  3185   	fcall	_setMessage
  4871                           
  4872                           ;main.c: 145: packet.packetData.byte = 0;
  4873  05FD  0021               	movlb	1	; select bank1
  4874  05FE  01A9               	clrf	loop@packet^(0+128)
  4875                           
  4876                           ;main.c: 146: packet.packetData.ACKRequest = 1;
  4877  05FF  1529               	bsf	loop@packet^(0+128),2
  4878                           
  4879                           ;main.c: 147: nrf24l01SendPacket(&packet);
  4880  0600  30A9               	movlw	(low (loop@packet| 0))& (0+255)
  4881  0601  3183  23F2  3185   	fcall	_nrf24l01SendPacket
  4882                           
  4883                           ;main.c: 148: checkTXPower();
  4884  0604  3188  207C  3185   	fcall	_checkTXPower
  4885                           
  4886                           ;main.c: 149: sleep();
  4887  0607  3188  2058         	fcall	_sleep
  4888  0609  0008               	return
  4889  060A                     __end_of_loop:	
  4890                           
  4891                           	psect	text10
  4892  0858                     __ptext10:	
  4893 ;; *************** function _sleep *****************
  4894 ;; Defined at:
  4895 ;;		line 49 in file "main.c"
  4896 ;; Parameters:    Size  Location     Type
  4897 ;;		None
  4898 ;; Auto vars:     Size  Location     Type
  4899 ;;		None
  4900 ;; Return value:  Size  Location     Type
  4901 ;;                  1    wreg      void 
  4902 ;; Registers used:
  4903 ;;		wreg
  4904 ;; Tracked objects:
  4905 ;;		On entry : 0/0
  4906 ;;		On exit  : 0/0
  4907 ;;		Unchanged: 0/0
  4908 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4909 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4910 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4911 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4912 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4913 ;;Total ram usage:        0 bytes
  4914 ;; Hardware stack levels used:    1
  4915 ;; Hardware stack levels required when called:    7
  4916 ;; This function calls:
  4917 ;;		Nothing
  4918 ;; This function is called by:
  4919 ;;		_loop
  4920 ;;		_main
  4921 ;;		_checkRxData
  4922 ;; This function uses a non-reentrant model
  4923 ;;
  4924                           
  4925                           
  4926                           ;psect for function _sleep
  4927  0858                     _sleep:	
  4928  0858                     l223:	
  4929                           ;incstack = 0
  4930                           ; Regs used in _sleep: [wreg]
  4931                           ;main.c: 50: while (1){
  4932                           
  4933                           
  4934                           ;main.c: 52: counter++;
  4935  0858  3001               	movlw	1
  4936  0859  0022               	movlb	2	; select bank2
  4937  085A  07A0               	addwf	_counter^(0+256),f
  4938  085B  3000               	movlw	0
  4939  085C  3DA1               	addwfc	(_counter+1)^(0+256),f
  4940  085D  3000               	movlw	0
  4941  085E  3DA2               	addwfc	(_counter+2)^(0+256),f
  4942  085F  3000               	movlw	0
  4943  0860  3DA3               	addwfc	(_counter+3)^(0+256),f
  4944  0861  0063               	sleep	;# 
  4945                           
  4946                           ;main.c: 55: __nop();
  4947  0862  0000               	nop
  4948                           
  4949                           ;main.c: 56: __nop();
  4950  0863  0000               	nop
  4951                           
  4952                           ;main.c: 58: if (!STATUSbits.nTO && !STATUSbits.nPD) {
  4953  0864  0020               	movlb	0	; select bank0
  4954  0865  1A03               	btfsc	3,4	;volatile
  4955  0866  2858               	goto	l223
  4956  0867  1D83               	btfss	3,3	;volatile
  4957  0868  0008               	return
  4958  0869  2858               	goto	l223
  4959  086A                     __end_of_sleep:	
  4960                           ;main.c: 59: return;
  4961                           
  4962                           
  4963                           	psect	text11
  4964  0E28                     __ptext11:	
  4965 ;; *************** function _setMessage *****************
  4966 ;; Defined at:
  4967 ;;		line 76 in file "main.c"
  4968 ;; Parameters:    Size  Location     Type
  4969 ;;  packet          1    wreg     PTR struct .
  4970 ;;		 -> main@packet(33), loop@packet(33), 
  4971 ;;  topic           2   72[BANK0 ] PTR const unsigned char 
  4972 ;;		 -> STR_7(5), STR_5(6), STR_4(5), STR_3(5), 
  4973 ;;  value           3   74[BANK0 ] float 
  4974 ;; Auto vars:     Size  Location     Type
  4975 ;;  packet          1    2[BANK1 ] PTR struct .
  4976 ;;		 -> main@packet(33), loop@packet(33), 
  4977 ;;  status          2    0[BANK1 ] int 
  4978 ;; Return value:  Size  Location     Type
  4979 ;;                  1    wreg      void 
  4980 ;; Registers used:
  4981 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4982 ;; Tracked objects:
  4983 ;;		On entry : 0/0
  4984 ;;		On exit  : 0/0
  4985 ;;		Unchanged: 0/0
  4986 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4987 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4988 ;;      Locals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0
  4989 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4990 ;;      Totals:         0       6       3       0       0       0       0       0       0       0       0       0       
      +0       0
  4991 ;;Total ram usage:        9 bytes
  4992 ;; Hardware stack levels used:    1
  4993 ;; Hardware stack levels required when called:   11
  4994 ;; This function calls:
  4995 ;;		_ftoa
  4996 ;;		_memset
  4997 ;;		_strcat
  4998 ;; This function is called by:
  4999 ;;		_loop
  5000 ;;		_main
  5001 ;; This function uses a non-reentrant model
  5002 ;;
  5003                           
  5004                           
  5005                           ;psect for function _setMessage
  5006  0E28                     _setMessage:	
  5007                           
  5008                           ;incstack = 0
  5009                           ; Regs used in _setMessage: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5010                           ;setMessage@packet stored from wreg
  5011  0E28  0021               	movlb	1	; select bank1
  5012  0E29  00A2               	movwf	setMessage@packet^(0+128)
  5013                           
  5014                           ;main.c: 77: memset(packet->Message, 0, sizeof(packet->Message));
  5015  0E2A  0822               	movf	setMessage@packet^(0+128),w
  5016  0E2B  3E01               	addlw	1
  5017  0E2C  0020               	movlb	0	; select bank0
  5018  0E2D  00A1               	movwf	memset@p1
  5019  0E2E  3000               	movlw	0
  5020  0E2F  00A2               	movwf	memset@p1+1
  5021  0E30  3000               	movlw	0
  5022  0E31  00A3               	movwf	memset@c
  5023  0E32  00A4               	movwf	memset@c+1
  5024  0E33  3020               	movlw	32
  5025  0E34  00A5               	movwf	memset@n
  5026  0E35  3000               	movlw	0
  5027  0E36  00A6               	movwf	memset@n+1
  5028  0E37  3188  20D5  318E   	fcall	_memset
  5029                           
  5030                           ;main.c: 79: strcat(packet->Message, romData.name);
  5031  0E3A  3046               	movlw	low (_romData+1)
  5032  0E3B  0020               	movlb	0	; select bank0
  5033  0E3C  00E3               	movwf	strcat@from
  5034  0E3D  3001               	movlw	high (_romData+1)
  5035  0E3E  00E4               	movwf	strcat@from+1
  5036  0E3F  0021               	movlb	1	; select bank1
  5037  0E40  0822               	movf	setMessage@packet^(0+128),w
  5038  0E41  3E01               	addlw	1
  5039  0E42  318A  2299  318E   	fcall	_strcat
  5040                           
  5041                           ;main.c: 81: strcat(packet->Message, "/");
  5042  0E45  3064               	movlw	low (STR_1| (0+32768))
  5043  0E46  0020               	movlb	0	; select bank0
  5044  0E47  00E3               	movwf	strcat@from
  5045  0E48  3090               	movlw	high (STR_1| (0+32768))
  5046  0E49  00E4               	movwf	strcat@from+1
  5047  0E4A  0021               	movlb	1	; select bank1
  5048  0E4B  0822               	movf	setMessage@packet^(0+128),w
  5049  0E4C  3E01               	addlw	1
  5050  0E4D  318A  2299  318E   	fcall	_strcat
  5051                           
  5052                           ;main.c: 82: strcat(packet->Message, topic);
  5053  0E50  0020               	movlb	0	; select bank0
  5054  0E51  0869               	movf	setMessage@topic+1,w
  5055  0E52  00E4               	movwf	strcat@from+1
  5056  0E53  0868               	movf	setMessage@topic,w
  5057  0E54  00E3               	movwf	strcat@from
  5058  0E55  0021               	movlb	1	; select bank1
  5059  0E56  0822               	movf	setMessage@packet^(0+128),w
  5060  0E57  3E01               	addlw	1
  5061  0E58  318A  2299  318E   	fcall	_strcat
  5062                           
  5063                           ;main.c: 84: int status;;main.c: 85: strcat(packet->Message, "/");
  5064  0E5B  3064               	movlw	low (STR_1| (0+32768))
  5065  0E5C  0020               	movlb	0	; select bank0
  5066  0E5D  00E3               	movwf	strcat@from
  5067  0E5E  3090               	movlw	high (STR_1| (0+32768))
  5068  0E5F  00E4               	movwf	strcat@from+1
  5069  0E60  0021               	movlb	1	; select bank1
  5070  0E61  0822               	movf	setMessage@packet^(0+128),w
  5071  0E62  3E01               	addlw	1
  5072  0E63  318A  2299  318E   	fcall	_strcat
  5073                           
  5074                           ;main.c: 86: strcat(packet->Message, ftoa(value, &status));
  5075  0E66  0020               	movlb	0	; select bank0
  5076  0E67  086A               	movf	setMessage@value,w
  5077  0E68  00D5               	movwf	ftoa@f
  5078  0E69  086B               	movf	setMessage@value+1,w
  5079  0E6A  00D6               	movwf	ftoa@f+1
  5080  0E6B  086C               	movf	setMessage@value+2,w
  5081  0E6C  00D7               	movwf	ftoa@f+2
  5082  0E6D  30A0               	movlw	(low (setMessage@status| 0))& (0+255)
  5083  0E6E  00ED               	movwf	??_setMessage
  5084  0E6F  086D               	movf	??_setMessage,w
  5085  0E70  00D8               	movwf	ftoa@status
  5086  0E71  3186  26B3  318E   	fcall	_ftoa
  5087  0E74  0020               	movlb	0	; select bank0
  5088  0E75  00E3               	movwf	strcat@from
  5089  0E76  3001               	movlw	1
  5090  0E77  00E4               	movwf	strcat@from+1
  5091  0E78  0021               	movlb	1	; select bank1
  5092  0E79  0822               	movf	setMessage@packet^(0+128),w
  5093  0E7A  3E01               	addlw	1
  5094  0E7B  318A  2299         	fcall	_strcat
  5095  0E7D  0008               	return
  5096  0E7E                     __end_of_setMessage:	
  5097                           
  5098                           	psect	text12
  5099  0A99                     __ptext12:	
  5100 ;; *************** function _strcat *****************
  5101 ;; Defined at:
  5102 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\strcat.c"
  5103 ;; Parameters:    Size  Location     Type
  5104 ;;  to              1    wreg     PTR unsigned char 
  5105 ;;		 -> main@packet(33), loop@packet(33), 
  5106 ;;  from            2   67[BANK0 ] PTR const unsigned char 
  5107 ;;		 -> ftoa@buf(17), STR_7(5), STR_5(6), STR_4(5), 
  5108 ;;		 -> STR_3(5), STR_2(2), STR_1(2), romData.name(16), 
  5109 ;;		 -> romData(19), 
  5110 ;; Auto vars:     Size  Location     Type
  5111 ;;  to              1   71[BANK0 ] PTR unsigned char 
  5112 ;;		 -> main@packet(33), loop@packet(33), 
  5113 ;;  cp              1   70[BANK0 ] PTR unsigned char 
  5114 ;;		 -> main@packet(33), loop@packet(33), 
  5115 ;; Return value:  Size  Location     Type
  5116 ;;                  1    wreg      PTR unsigned char 
  5117 ;; Registers used:
  5118 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath
  5119 ;; Tracked objects:
  5120 ;;		On entry : 0/0
  5121 ;;		On exit  : 0/0
  5122 ;;		Unchanged: 0/0
  5123 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5124 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5125 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5126 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5127 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5128 ;;Total ram usage:        5 bytes
  5129 ;; Hardware stack levels used:    1
  5130 ;; Hardware stack levels required when called:    7
  5131 ;; This function calls:
  5132 ;;		Nothing
  5133 ;; This function is called by:
  5134 ;;		_setMessage
  5135 ;; This function uses a non-reentrant model
  5136 ;;
  5137                           
  5138                           
  5139                           ;psect for function _strcat
  5140  0A99                     _strcat:	
  5141                           
  5142                           ;incstack = 0
  5143                           ; Regs used in _strcat: [wreg-fsr1h+status,2+status,0+pclath]
  5144                           ;strcat@to stored from wreg
  5145  0A99  0020               	movlb	0	; select bank0
  5146  0A9A  00E7               	movwf	strcat@to
  5147  0A9B  0867               	movf	strcat@to,w
  5148  0A9C  00E5               	movwf	??_strcat
  5149  0A9D  0865               	movf	??_strcat,w
  5150  0A9E  00E6               	movwf	strcat@cp
  5151  0A9F                     l2905:	
  5152  0A9F  0866               	movf	strcat@cp,w
  5153  0AA0  0086               	movwf	6
  5154  0AA1  0187               	clrf	7
  5155  0AA2  0801               	movf	1,w
  5156  0AA3  1903               	btfsc	3,2
  5157  0AA4  2AB2               	goto	l2911
  5158  0AA5  3001               	movlw	1
  5159  0AA6  00E5               	movwf	??_strcat
  5160  0AA7  0865               	movf	??_strcat,w
  5161  0AA8  07E6               	addwf	strcat@cp,f
  5162  0AA9  2A9F               	goto	l2905
  5163  0AAA                     l2907:	
  5164  0AAA  3001               	movlw	1
  5165  0AAB  00E5               	movwf	??_strcat
  5166  0AAC  0865               	movf	??_strcat,w
  5167  0AAD  07E6               	addwf	strcat@cp,f
  5168  0AAE  3001               	movlw	1
  5169  0AAF  07E3               	addwf	strcat@from,f
  5170  0AB0  3000               	movlw	0
  5171  0AB1  3DE4               	addwfc	strcat@from+1,f
  5172  0AB2                     l2911:	
  5173  0AB2  0866               	movf	strcat@cp,w
  5174  0AB3  0086               	movwf	6
  5175  0AB4  0187               	clrf	7
  5176  0AB5  0863               	movf	strcat@from,w
  5177  0AB6  0084               	movwf	4
  5178  0AB7  0864               	movf	strcat@from+1,w
  5179  0AB8  0085               	movwf	5
  5180  0AB9  0800               	movf	0,w	;code access
  5181  0ABA  3FC0               	movwi [0]fsr1
  5182  0ABB  0889               	movf	9,f
  5183  0ABC  1903               	btfsc	3,2
  5184  0ABD  0008               	return
  5185  0ABE  2AAA               	goto	l2907
  5186  0ABF                     __end_of_strcat:	
  5187                           ;	Return value of _strcat is never used
  5188                           
  5189                           
  5190                           	psect	text13
  5191  08D5                     __ptext13:	
  5192 ;; *************** function _memset *****************
  5193 ;; Defined at:
  5194 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\memset.c"
  5195 ;; Parameters:    Size  Location     Type
  5196 ;;  p1              2    1[BANK0 ] PTR void 
  5197 ;;		 -> RXPacket(33), main@packet(33), loop@packet(33), 
  5198 ;;  c               2    3[BANK0 ] int 
  5199 ;;  n               2    5[BANK0 ] unsigned int 
  5200 ;; Auto vars:     Size  Location     Type
  5201 ;;  p               2    7[BANK0 ] PTR unsigned char 
  5202 ;;		 -> RXPacket(33), main@packet(33), loop@packet(33), 
  5203 ;; Return value:  Size  Location     Type
  5204 ;;                  2    1[BANK0 ] PTR void 
  5205 ;; Registers used:
  5206 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  5207 ;; Tracked objects:
  5208 ;;		On entry : 0/0
  5209 ;;		On exit  : 0/0
  5210 ;;		Unchanged: 0/0
  5211 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5212 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5213 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5214 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5215 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5216 ;;Total ram usage:        8 bytes
  5217 ;; Hardware stack levels used:    1
  5218 ;; Hardware stack levels required when called:    7
  5219 ;; This function calls:
  5220 ;;		Nothing
  5221 ;; This function is called by:
  5222 ;;		_setMessage
  5223 ;; This function uses a non-reentrant model
  5224 ;;
  5225                           
  5226                           
  5227                           ;psect for function _memset
  5228  08D5                     _memset:	
  5229                           
  5230                           ;incstack = 0
  5231                           ; Regs used in _memset: [wreg+fsr1l+fsr1h+status,2+status,0]
  5232  08D5  0020               	movlb	0	; select bank0
  5233  08D6  0822               	movf	memset@p1+1,w
  5234  08D7  00A8               	movwf	memset@p+1
  5235  08D8  0821               	movf	memset@p1,w
  5236  08D9  00A7               	movwf	memset@p
  5237  08DA                     l3637:	
  5238  08DA  3001               	movlw	1
  5239  08DB  02A5               	subwf	memset@n,f
  5240  08DC  3000               	movlw	0
  5241  08DD  3BA6               	subwfb	memset@n+1,f
  5242  08DE  0A25               	incf	memset@n,w
  5243  08DF  1903               	btfsc	3,2
  5244  08E0  0A26               	incf	memset@n+1,w
  5245  08E1  1903               	btfsc	3,2
  5246  08E2  0008               	return
  5247  08E3  0827               	movf	memset@p,w
  5248  08E4  0086               	movwf	6
  5249  08E5  0828               	movf	memset@p+1,w
  5250  08E6  0087               	movwf	7
  5251  08E7  0823               	movf	memset@c,w
  5252  08E8  0081               	movwf	1
  5253  08E9  3001               	movlw	1
  5254  08EA  07A7               	addwf	memset@p,f
  5255  08EB  3000               	movlw	0
  5256  08EC  3DA8               	addwfc	memset@p+1,f
  5257  08ED  28DA               	goto	l3637
  5258  08EE                     __end_of_memset:	
  5259                           ;	Return value of _memset is never used
  5260                           
  5261                           
  5262                           	psect	text14
  5263  06B3                     __ptext14:	
  5264 ;; *************** function _ftoa *****************
  5265 ;; Defined at:
  5266 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\ftoa.c"
  5267 ;; Parameters:    Size  Location     Type
  5268 ;;  f               3   53[BANK0 ] float 
  5269 ;;  status          1   56[BANK0 ] PTR int 
  5270 ;;		 -> setMessage@status(2), 
  5271 ;; Auto vars:     Size  Location     Type
  5272 ;;  l               4   62[BANK0 ] unsigned long 
  5273 ;;  rem             4   58[BANK0 ] unsigned long 
  5274 ;;  cp              1   66[BANK0 ] PTR unsigned char 
  5275 ;;		 -> ftoa@buf(17), 
  5276 ;; Return value:  Size  Location     Type
  5277 ;;                  1    wreg      PTR unsigned char 
  5278 ;; Registers used:
  5279 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5280 ;; Tracked objects:
  5281 ;;		On entry : 0/0
  5282 ;;		On exit  : 0/0
  5283 ;;		Unchanged: 0/0
  5284 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5285 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5286 ;;      Locals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5287 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5288 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5289 ;;Total ram usage:       14 bytes
  5290 ;; Hardware stack levels used:    1
  5291 ;; Hardware stack levels required when called:   10
  5292 ;; This function calls:
  5293 ;;		___ftge
  5294 ;;		___ftmul
  5295 ;;		___ftneg
  5296 ;;		___ftsub
  5297 ;;		___fttol
  5298 ;;		___lltoft
  5299 ;;		_sprintf
  5300 ;; This function is called by:
  5301 ;;		_setMessage
  5302 ;; This function uses a non-reentrant model
  5303 ;;
  5304                           
  5305                           
  5306                           ;psect for function _ftoa
  5307  06B3                     _ftoa:	
  5308                           
  5309                           ;incstack = 0
  5310                           ; Regs used in _ftoa: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5311  06B3  3058               	movlw	(low (ftoa@buf| (0+256)))& (0+255)
  5312  06B4  0020               	movlb	0	; select bank0
  5313  06B5  00D9               	movwf	??_ftoa
  5314  06B6  0859               	movf	??_ftoa,w
  5315  06B7  00E2               	movwf	ftoa@cp
  5316  06B8  0855               	movf	ftoa@f,w
  5317  06B9  00A1               	movwf	___ftge@ff1
  5318  06BA  0856               	movf	ftoa@f+1,w
  5319  06BB  00A2               	movwf	___ftge@ff1+1
  5320  06BC  0857               	movf	ftoa@f+2,w
  5321  06BD  00A3               	movwf	___ftge@ff1+2
  5322  06BE  3000               	movlw	0
  5323  06BF  00A4               	movwf	___ftge@ff2
  5324  06C0  3000               	movlw	0
  5325  06C1  00A5               	movwf	___ftge@ff2+1
  5326  06C2  3000               	movlw	0
  5327  06C3  00A6               	movwf	___ftge@ff2+2
  5328  06C4  318B  23E3  3186   	fcall	___ftge
  5329  06C7  1803               	btfsc	3,0
  5330  06C8  2EE6               	goto	l2923
  5331  06C9  302D               	movlw	45
  5332  06CA  0020               	movlb	0	; select bank0
  5333  06CB  00D9               	movwf	??_ftoa
  5334  06CC  0862               	movf	ftoa@cp,w
  5335  06CD  0086               	movwf	6
  5336  06CE  3001               	movlw	1	; select bank2/3
  5337  06CF  0087               	movwf	7
  5338  06D0  0859               	movf	??_ftoa,w
  5339  06D1  0081               	movwf	1
  5340  06D2  3001               	movlw	1
  5341  06D3  00D9               	movwf	??_ftoa
  5342  06D4  0859               	movf	??_ftoa,w
  5343  06D5  07E2               	addwf	ftoa@cp,f
  5344  06D6  0855               	movf	ftoa@f,w
  5345  06D7  00A1               	movwf	___ftneg@f1
  5346  06D8  0856               	movf	ftoa@f+1,w
  5347  06D9  00A2               	movwf	___ftneg@f1+1
  5348  06DA  0857               	movf	ftoa@f+2,w
  5349  06DB  00A3               	movwf	___ftneg@f1+2
  5350  06DC  3188  2040  3186   	fcall	___ftneg
  5351  06DF  0020               	movlb	0	; select bank0
  5352  06E0  0821               	movf	?___ftneg,w
  5353  06E1  00D5               	movwf	ftoa@f
  5354  06E2  0822               	movf	?___ftneg+1,w
  5355  06E3  00D6               	movwf	ftoa@f+1
  5356  06E4  0823               	movf	?___ftneg+2,w
  5357  06E5  00D7               	movwf	ftoa@f+2
  5358  06E6                     l2923:	
  5359  06E6  0020               	movlb	0	; select bank0
  5360  06E7  0855               	movf	ftoa@f,w
  5361  06E8  00B9               	movwf	___fttol@f1
  5362  06E9  0856               	movf	ftoa@f+1,w
  5363  06EA  00BA               	movwf	___fttol@f1+1
  5364  06EB  0857               	movf	ftoa@f+2,w
  5365  06EC  00BB               	movwf	___fttol@f1+2
  5366  06ED  318E  26E3  3186   	fcall	___fttol
  5367  06F0  0020               	movlb	0	; select bank0
  5368  06F1  083C               	movf	?___fttol+3,w
  5369  06F2  00E1               	movwf	ftoa@l+3
  5370  06F3  083B               	movf	?___fttol+2,w
  5371  06F4  00E0               	movwf	ftoa@l+2
  5372  06F5  083A               	movf	?___fttol+1,w
  5373  06F6  00DF               	movwf	ftoa@l+1
  5374  06F7  0839               	movf	?___fttol,w
  5375  06F8  00DE               	movwf	ftoa@l
  5376  06F9  0861               	movf	ftoa@l+3,w
  5377  06FA  00AC               	movwf	___lltoft@c+3
  5378  06FB  0860               	movf	ftoa@l+2,w
  5379  06FC  00AB               	movwf	___lltoft@c+2
  5380  06FD  085F               	movf	ftoa@l+1,w
  5381  06FE  00AA               	movwf	___lltoft@c+1
  5382  06FF  085E               	movf	ftoa@l,w
  5383  0700  00A9               	movwf	___lltoft@c
  5384  0701  318A  22E5  3186   	fcall	___lltoft
  5385  0704  0020               	movlb	0	; select bank0
  5386  0705  0829               	movf	?___lltoft,w
  5387  0706  00BE               	movwf	___ftsub@f2
  5388  0707  082A               	movf	?___lltoft+1,w
  5389  0708  00BF               	movwf	___ftsub@f2+1
  5390  0709  082B               	movf	?___lltoft+2,w
  5391  070A  00C0               	movwf	___ftsub@f2+2
  5392  070B  0855               	movf	ftoa@f,w
  5393  070C  00C1               	movwf	___ftsub@f1
  5394  070D  0856               	movf	ftoa@f+1,w
  5395  070E  00C2               	movwf	___ftsub@f1+1
  5396  070F  0857               	movf	ftoa@f+2,w
  5397  0710  00C3               	movwf	___ftsub@f1+2
  5398  0711  3189  2193  3186   	fcall	___ftsub
  5399  0714  0020               	movlb	0	; select bank0
  5400  0715  083E               	movf	?___ftsub,w
  5401  0716  00D5               	movwf	ftoa@f
  5402  0717  083F               	movf	?___ftsub+1,w
  5403  0718  00D6               	movwf	ftoa@f+1
  5404  0719  0840               	movf	?___ftsub+2,w
  5405  071A  00D7               	movwf	ftoa@f+2
  5406  071B  0855               	movf	ftoa@f,w
  5407  071C  00AC               	movwf	___ftmul@f2
  5408  071D  0856               	movf	ftoa@f+1,w
  5409  071E  00AD               	movwf	___ftmul@f2+1
  5410  071F  0857               	movf	ftoa@f+2,w
  5411  0720  00AE               	movwf	___ftmul@f2+2
  5412  0721  3024               	movlw	36
  5413  0722  00A9               	movwf	___ftmul@f1
  5414  0723  3074               	movlw	116
  5415  0724  00AA               	movwf	___ftmul@f1+1
  5416  0725  3049               	movlw	73
  5417  0726  00AB               	movwf	___ftmul@f1+2
  5418  0727  3184  24AC  3186   	fcall	___ftmul
  5419  072A  0020               	movlb	0	; select bank0
  5420  072B  0829               	movf	?___ftmul,w
  5421  072C  00B9               	movwf	___fttol@f1
  5422  072D  082A               	movf	?___ftmul+1,w
  5423  072E  00BA               	movwf	___fttol@f1+1
  5424  072F  082B               	movf	?___ftmul+2,w
  5425  0730  00BB               	movwf	___fttol@f1+2
  5426  0731  318E  26E3  3186   	fcall	___fttol
  5427  0734  0020               	movlb	0	; select bank0
  5428  0735  083C               	movf	?___fttol+3,w
  5429  0736  00DD               	movwf	ftoa@rem+3
  5430  0737  083B               	movf	?___fttol+2,w
  5431  0738  00DC               	movwf	ftoa@rem+2
  5432  0739  083A               	movf	?___fttol+1,w
  5433  073A  00DB               	movwf	ftoa@rem+1
  5434  073B  0839               	movf	?___fttol,w
  5435  073C  00DA               	movwf	ftoa@rem
  5436  073D  303B               	movlw	low (STR_8| (0+32768))
  5437  073E  00B9               	movwf	sprintf@f
  5438  073F  3090               	movlw	high (STR_8| (0+32768))
  5439  0740  00BA               	movwf	sprintf@f+1
  5440  0741  0861               	movf	ftoa@l+3,w
  5441  0742  00BE               	movwf	?_sprintf+5
  5442  0743  0860               	movf	ftoa@l+2,w
  5443  0744  00BD               	movwf	?_sprintf+4
  5444  0745  085F               	movf	ftoa@l+1,w
  5445  0746  00BC               	movwf	?_sprintf+3
  5446  0747  085E               	movf	ftoa@l,w
  5447  0748  00BB               	movwf	?_sprintf+2
  5448  0749  085D               	movf	ftoa@rem+3,w
  5449  074A  00C2               	movwf	?_sprintf+9
  5450  074B  085C               	movf	ftoa@rem+2,w
  5451  074C  00C1               	movwf	?_sprintf+8
  5452  074D  085B               	movf	ftoa@rem+1,w
  5453  074E  00C0               	movwf	?_sprintf+7
  5454  074F  085A               	movf	ftoa@rem,w
  5455  0750  00BF               	movwf	?_sprintf+6
  5456  0751  0862               	movf	ftoa@cp,w
  5457  0752  3180  2029         	fcall	_sprintf
  5458  0754  3058               	movlw	(low (ftoa@buf| (0+256)))& (0+255)
  5459  0755  0008               	return
  5460  0756                     __end_of_ftoa:	
  5461                           
  5462                           	psect	text15
  5463  0029                     __ptext15:	
  5464 ;; *************** function _sprintf *****************
  5465 ;; Defined at:
  5466 ;;		line 500 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\doprnt.c"
  5467 ;; Parameters:    Size  Location     Type
  5468 ;;  sp              1    wreg     PTR unsigned char 
  5469 ;;		 -> ftoa@buf(17), 
  5470 ;;  f               2   25[BANK0 ] PTR const unsigned char 
  5471 ;;		 -> STR_8(11), 
  5472 ;; Auto vars:     Size  Location     Type
  5473 ;;  sp              1   47[BANK0 ] PTR unsigned char 
  5474 ;;		 -> ftoa@buf(17), 
  5475 ;;  val             4   43[BANK0 ] unsigned long 
  5476 ;;  tmpval          4    0        struct .
  5477 ;;  prec            2   50[BANK0 ] int 
  5478 ;;  width           2   48[BANK0 ] int 
  5479 ;;  cp              2    0        PTR const unsigned char 
  5480 ;;  len             2    0        unsigned int 
  5481 ;;  c               1   52[BANK0 ] unsigned char 
  5482 ;;  ap              1   42[BANK0 ] PTR void [1]
  5483 ;;		 -> ?_sprintf(2), 
  5484 ;;  flag            1   41[BANK0 ] unsigned char 
  5485 ;; Return value:  Size  Location     Type
  5486 ;;                  2   25[BANK0 ] int 
  5487 ;; Registers used:
  5488 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5489 ;; Tracked objects:
  5490 ;;		On entry : 0/0
  5491 ;;		On exit  : 0/0
  5492 ;;		Unchanged: 0/0
  5493 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5494 ;;      Params:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5495 ;;      Locals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5496 ;;      Temps:          0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5497 ;;      Totals:         0      28       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5498 ;;Total ram usage:       28 bytes
  5499 ;; Hardware stack levels used:    1
  5500 ;; Hardware stack levels required when called:    8
  5501 ;; This function calls:
  5502 ;;		___lldiv
  5503 ;;		___llmod
  5504 ;;		___wmul
  5505 ;;		_isdigit
  5506 ;; This function is called by:
  5507 ;;		_ftoa
  5508 ;; This function uses a non-reentrant model
  5509 ;;
  5510                           
  5511                           
  5512                           ;psect for function _sprintf
  5513  0029                     _sprintf:	
  5514                           
  5515                           ;incstack = 0
  5516                           ; Regs used in _sprintf: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5517                           ;sprintf@sp stored from wreg
  5518  0029  0020               	movlb	0	; select bank0
  5519  002A  00CF               	movwf	sprintf@sp
  5520                           
  5521                           ;doprnt.c: 502: va_list ap;;doprnt.c: 507: char c;;doprnt.c: 509: int width;;doprnt.c: 5
      +                          12: int prec;;doprnt.c: 520: unsigned char flag;;doprnt.c: 535: union {;doprnt.c: 536: u
      +                          nsigned long vd;;doprnt.c: 537: double integ;;doprnt.c: 538: } tmpval;;doprnt.c: 540: un
      +                          signed long val;;doprnt.c: 541: unsigned len;;doprnt.c: 542: const char * cp;;doprnt.c: 
      +                          545: *ap = __va_start();
  5522  002B  303B               	movlw	(low ((?_sprintf| 0+2)))& (0+255)
  5523  002C  00C3               	movwf	??_sprintf
  5524  002D  0843               	movf	??_sprintf,w
  5525  002E  00CA               	movwf	sprintf@ap
  5526  002F                     l2689:	
  5527                           ;doprnt.c: 548: while((c = *f++)) {
  5528                           
  5529  002F  083A               	movf	sprintf@f+1,w
  5530  0030  00C4               	movwf	??_sprintf+1
  5531  0031  0839               	movf	sprintf@f,w
  5532  0032  00C3               	movwf	??_sprintf
  5533  0033  0AB9               	incf	sprintf@f,f
  5534  0034  1903               	skipnz
  5535  0035  0ABA               	incf	sprintf@f+1,f
  5536  0036  0843               	movf	??_sprintf,w
  5537  0037  0084               	movwf	4
  5538  0038  0844               	movf	??_sprintf+1,w
  5539  0039  0085               	movwf	5
  5540  003A  0800               	movf	0,w	;code access
  5541  003B  00C5               	movwf	??_sprintf+2
  5542  003C  0845               	movf	??_sprintf+2,w
  5543  003D  00D4               	movwf	sprintf@c
  5544  003E  0854               	movf	sprintf@c,w
  5545  003F  1903               	btfsc	3,2
  5546  0040  29F0               	goto	l2691
  5547                           
  5548                           ;doprnt.c: 550: if(c != '%')
  5549  0041  3025               	movlw	37
  5550  0042  0654               	xorwf	sprintf@c,w
  5551  0043  1903               	btfsc	3,2
  5552  0044  2852               	goto	l2601
  5553                           
  5554                           ;doprnt.c: 552: {;doprnt.c: 553: ((*sp++ = (c)));
  5555  0045  0854               	movf	sprintf@c,w
  5556  0046  00C3               	movwf	??_sprintf
  5557  0047  084F               	movf	sprintf@sp,w
  5558  0048  0086               	movwf	6
  5559  0049  3001               	movlw	1	; select bank2/3
  5560  004A  0087               	movwf	7
  5561  004B  0843               	movf	??_sprintf,w
  5562  004C  0081               	movwf	1
  5563  004D  3001               	movlw	1
  5564  004E  00C3               	movwf	??_sprintf
  5565  004F  0843               	movf	??_sprintf,w
  5566  0050  07CF               	addwf	sprintf@sp,f
  5567                           
  5568                           ;doprnt.c: 554: continue;
  5569  0051  282F               	goto	l2689
  5570  0052                     l2601:	
  5571                           
  5572                           ;doprnt.c: 555: };doprnt.c: 558: width = 0;
  5573  0052  01D0               	clrf	sprintf@width
  5574  0053  01D1               	clrf	sprintf@width+1
  5575                           
  5576                           ;doprnt.c: 560: flag = 0;
  5577  0054  01C9               	clrf	sprintf@flag
  5578                           
  5579                           ;doprnt.c: 609: if(isdigit((unsigned)*f)) {
  5580  0055  0839               	movf	sprintf@f,w
  5581  0056  0084               	movwf	4
  5582  0057  083A               	movf	sprintf@f+1,w
  5583  0058  0085               	movwf	5
  5584  0059  0800               	movf	0,w	;code access
  5585  005A  3188  2049  3180   	fcall	_isdigit
  5586  005D  1C03               	btfss	3,0
  5587  005E  2890               	goto	l2615
  5588                           
  5589                           ;doprnt.c: 610: width = 0;
  5590  005F  0020               	movlb	0	; select bank0
  5591  0060  01D0               	clrf	sprintf@width
  5592  0061  01D1               	clrf	sprintf@width+1
  5593  0062                     l2607:	
  5594                           ;doprnt.c: 611: do {
  5595                           
  5596                           
  5597                           ;doprnt.c: 612: width *= 10;
  5598  0062  300A               	movlw	10
  5599  0063  0020               	movlb	0	; select bank0
  5600  0064  00A1               	movwf	___wmul@multiplier
  5601  0065  3000               	movlw	0
  5602  0066  00A2               	movwf	___wmul@multiplier+1
  5603  0067  0851               	movf	sprintf@width+1,w
  5604  0068  00A4               	movwf	___wmul@multiplicand+1
  5605  0069  0850               	movf	sprintf@width,w
  5606  006A  00A3               	movwf	___wmul@multiplicand
  5607  006B  3189  213F  3180   	fcall	___wmul
  5608  006E  0020               	movlb	0	; select bank0
  5609  006F  0822               	movf	?___wmul+1,w
  5610  0070  00D1               	movwf	sprintf@width+1
  5611  0071  0821               	movf	?___wmul,w
  5612  0072  00D0               	movwf	sprintf@width
  5613                           
  5614                           ;doprnt.c: 613: width += *f++ - '0';
  5615  0073  0839               	movf	sprintf@f,w
  5616  0074  0084               	movwf	4
  5617  0075  083A               	movf	sprintf@f+1,w
  5618  0076  0085               	movwf	5
  5619  0077  0800               	movf	0,w	;code access
  5620  0078  3ED0               	addlw	208
  5621  0079  00C3               	movwf	??_sprintf
  5622  007A  30FF               	movlw	255
  5623  007B  1803               	skipnc
  5624  007C  3000               	movlw	0
  5625  007D  00C4               	movwf	??_sprintf+1
  5626  007E  0843               	movf	??_sprintf,w
  5627  007F  07D0               	addwf	sprintf@width,f
  5628  0080  0844               	movf	??_sprintf+1,w
  5629  0081  3DD1               	addwfc	sprintf@width+1,f
  5630  0082  3001               	movlw	1
  5631  0083  07B9               	addwf	sprintf@f,f
  5632  0084  3000               	movlw	0
  5633  0085  3DBA               	addwfc	sprintf@f+1,f
  5634                           
  5635                           ;doprnt.c: 614: } while(isdigit((unsigned)*f));
  5636  0086  0839               	movf	sprintf@f,w
  5637  0087  0084               	movwf	4
  5638  0088  083A               	movf	sprintf@f+1,w
  5639  0089  0085               	movwf	5
  5640  008A  0800               	movf	0,w	;code access
  5641  008B  3188  2049  3180   	fcall	_isdigit
  5642  008E  1803               	btfsc	3,0
  5643  008F  2862               	goto	l2607
  5644  0090                     l2615:	
  5645                           
  5646                           ;doprnt.c: 620: };doprnt.c: 623: if(*f == '.') {
  5647  0090  0020               	movlb	0	; select bank0
  5648  0091  0839               	movf	sprintf@f,w
  5649  0092  0084               	movwf	4
  5650  0093  083A               	movf	sprintf@f+1,w
  5651  0094  0085               	movwf	5
  5652  0095  0012               	moviw fsr0++
  5653  0096  3A2E               	xorlw	46
  5654  0097  1D03               	btfss	3,2
  5655  0098  28CE               	goto	l2627
  5656                           
  5657                           ;doprnt.c: 625: f++;
  5658  0099  3001               	movlw	1
  5659  009A  07B9               	addwf	sprintf@f,f
  5660  009B  3000               	movlw	0
  5661  009C  3DBA               	addwfc	sprintf@f+1,f
  5662                           
  5663                           ;doprnt.c: 639: {;doprnt.c: 640: prec = 0;
  5664  009D  01D2               	clrf	sprintf@prec
  5665  009E  01D3               	clrf	sprintf@prec+1
  5666  009F                     l2625:	
  5667                           ;doprnt.c: 641: while(isdigit((unsigned)*f))
  5668                           
  5669  009F  0839               	movf	sprintf@f,w
  5670  00A0  0084               	movwf	4
  5671  00A1  083A               	movf	sprintf@f+1,w
  5672  00A2  0085               	movwf	5
  5673  00A3  0800               	movf	0,w	;code access
  5674  00A4  3188  2049  3180   	fcall	_isdigit
  5675  00A7  1C03               	btfss	3,0
  5676  00A8  28D9               	goto	l2633
  5677                           
  5678                           ;doprnt.c: 642: prec = prec*10 + *f++ - '0';
  5679  00A9  0020               	movlb	0	; select bank0
  5680  00AA  0839               	movf	sprintf@f,w
  5681  00AB  0084               	movwf	4
  5682  00AC  083A               	movf	sprintf@f+1,w
  5683  00AD  0085               	movwf	5
  5684  00AE  0800               	movf	0,w	;code access
  5685  00AF  00C3               	movwf	??_sprintf
  5686  00B0  01C4               	clrf	??_sprintf+1
  5687  00B1  0853               	movf	sprintf@prec+1,w
  5688  00B2  00A2               	movwf	___wmul@multiplier+1
  5689  00B3  0852               	movf	sprintf@prec,w
  5690  00B4  00A1               	movwf	___wmul@multiplier
  5691  00B5  300A               	movlw	10
  5692  00B6  00A3               	movwf	___wmul@multiplicand
  5693  00B7  3000               	movlw	0
  5694  00B8  00A4               	movwf	___wmul@multiplicand+1
  5695  00B9  3189  213F  3180   	fcall	___wmul
  5696  00BC  0020               	movlb	0	; select bank0
  5697  00BD  0843               	movf	??_sprintf,w
  5698  00BE  0721               	addwf	?___wmul,w
  5699  00BF  00C5               	movwf	??_sprintf+2
  5700  00C0  0844               	movf	??_sprintf+1,w
  5701  00C1  3D22               	addwfc	?___wmul+1,w
  5702  00C2  00C6               	movwf	??_sprintf+3
  5703  00C3  0845               	movf	??_sprintf+2,w
  5704  00C4  3ED0               	addlw	208
  5705  00C5  00D2               	movwf	sprintf@prec
  5706  00C6  30FF               	movlw	255
  5707  00C7  3D46               	addwfc	??_sprintf+3,w
  5708  00C8  00D3               	movwf	sprintf@prec+1
  5709  00C9  3001               	movlw	1
  5710  00CA  07B9               	addwf	sprintf@f,f
  5711  00CB  3000               	movlw	0
  5712  00CC  3DBA               	addwfc	sprintf@f+1,f
  5713  00CD  289F               	goto	l2625
  5714  00CE                     l2627:	
  5715                           ;doprnt.c: 643: };doprnt.c: 644: } else {
  5716                           
  5717                           
  5718                           ;doprnt.c: 645: prec = 0;
  5719  00CE  0020               	movlb	0	; select bank0
  5720  00CF  01D2               	clrf	sprintf@prec
  5721  00D0  01D3               	clrf	sprintf@prec+1
  5722                           
  5723                           ;doprnt.c: 654: switch(c = *f++) {
  5724                           
  5725                           ;doprnt.c: 649: };doprnt.c: 652: loop:
  5726  00D1  28D9               	goto	l2633
  5727  00D2                     l489:	
  5728                           ;doprnt.c: 660: case 'l':
  5729                           
  5730                           ;doprnt.c: 657: goto alldone;
  5731                           
  5732                           ;doprnt.c: 656: case 0:
  5733                           
  5734                           
  5735                           ;doprnt.c: 662: flag |= 0x10;
  5736  00D2  1649               	bsf	sprintf@flag,4
  5737                           
  5738                           ;doprnt.c: 663: goto loop;
  5739  00D3  28D9               	goto	l2633
  5740  00D4                     l2629:	
  5741                           ;doprnt.c: 836: case 'u':
  5742                           
  5743                           ;doprnt.c: 832: continue;
  5744                           
  5745                           ;doprnt.c: 821: default:
  5746                           
  5747                           
  5748                           ;doprnt.c: 837: flag |= 0xC0;
  5749  00D4  30C0               	movlw	192
  5750  00D5  00C3               	movwf	??_sprintf
  5751  00D6  0843               	movf	??_sprintf,w
  5752  00D7  04C9               	iorwf	sprintf@flag,f
  5753                           
  5754                           ;doprnt.c: 841: }
  5755                           
  5756                           ;doprnt.c: 838: break;
  5757  00D8  28F1               	goto	l492
  5758  00D9                     l2633:	
  5759  00D9  0020               	movlb	0	; select bank0
  5760  00DA  083A               	movf	sprintf@f+1,w
  5761  00DB  00C4               	movwf	??_sprintf+1
  5762  00DC  0839               	movf	sprintf@f,w
  5763  00DD  00C3               	movwf	??_sprintf
  5764  00DE  0AB9               	incf	sprintf@f,f
  5765  00DF  1903               	skipnz
  5766  00E0  0ABA               	incf	sprintf@f+1,f
  5767  00E1  0843               	movf	??_sprintf,w
  5768  00E2  0084               	movwf	4
  5769  00E3  0844               	movf	??_sprintf+1,w
  5770  00E4  0085               	movwf	5
  5771  00E5  0800               	movf	0,w	;code access
  5772  00E6  00D4               	movwf	sprintf@c
  5773                           
  5774                           ; Switch size 1, requested type "space"
  5775                           ; Number of cases is 3, Range of values is 0 to 117
  5776                           ; switch strategies available:
  5777                           ; Name         Instructions Cycles
  5778                           ; simple_byte           10     6 (average)
  5779                           ; direct_byte          242     6 (fixed)
  5780                           ; jumptable            260     6 (fixed)
  5781                           ;	Chosen strategy is simple_byte
  5782  00E7  3A00               	xorlw	0	; case 0
  5783  00E8  1903               	skipnz
  5784  00E9  29F0               	goto	l2691
  5785  00EA  3A6C               	xorlw	108	; case 108
  5786  00EB  1903               	skipnz
  5787  00EC  28D2               	goto	l489
  5788  00ED  3A19               	xorlw	25	; case 117
  5789  00EE  1903               	skipnz
  5790  00EF  28D4               	goto	l2629
  5791  00F0  282F               	goto	l2689
  5792  00F1                     l492:	
  5793                           
  5794                           ;doprnt.c: 1292: {;doprnt.c: 1300: if(flag & 0x10)
  5795  00F1  1E49               	btfss	sprintf@flag,4
  5796  00F2  2900               	goto	l2639
  5797                           
  5798                           ;doprnt.c: 1301: val = (*(unsigned long *)__va_arg((*(unsigned long **)ap), (unsigned lo
      +                          ng)0));
  5799  00F3  084A               	movf	sprintf@ap,w
  5800  00F4  0086               	movwf	6
  5801  00F5  0187               	clrf	7
  5802  00F6  3F40               	moviw [0]fsr1
  5803  00F7  00CB               	movwf	sprintf@val
  5804  00F8  3F41               	moviw [1]fsr1
  5805  00F9  00CC               	movwf	sprintf@val+1
  5806  00FA  3F42               	moviw [2]fsr1
  5807  00FB  00CD               	movwf	sprintf@val+2
  5808  00FC  3F43               	moviw [3]fsr1
  5809  00FD  00CE               	movwf	sprintf@val+3
  5810  00FE  3004               	movlw	4
  5811  00FF  290E               	goto	L1
  5812  0100                     l2639:	
  5813                           
  5814                           ;doprnt.c: 1302: else;doprnt.c: 1305: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (
      +                          unsigned)0));
  5815  0100  084A               	movf	sprintf@ap,w
  5816  0101  0086               	movwf	6
  5817  0102  0187               	clrf	7
  5818  0103  3F40               	moviw [0]fsr1
  5819  0104  00C3               	movwf	??_sprintf
  5820  0105  3F41               	moviw [1]fsr1
  5821  0106  00C4               	movwf	??_sprintf+1
  5822  0107  0843               	movf	??_sprintf,w
  5823  0108  00CB               	movwf	sprintf@val
  5824  0109  0844               	movf	??_sprintf+1,w
  5825  010A  00CC               	movwf	sprintf@val+1
  5826  010B  01CD               	clrf	sprintf@val+2
  5827  010C  01CE               	clrf	sprintf@val+3
  5828  010D  3002               	movlw	2
  5829  010E                     L1:	
  5830  010E  00C3               	movwf	??_sprintf
  5831  010F  0843               	movf	??_sprintf,w
  5832  0110  07CA               	addwf	sprintf@ap,f
  5833                           
  5834                           ;doprnt.c: 1306: };doprnt.c: 1309: if(prec == 0 && val == 0)
  5835  0111  0852               	movf	sprintf@prec,w
  5836  0112  0453               	iorwf	sprintf@prec+1,w
  5837  0113  1D03               	btfss	3,2
  5838  0114  291F               	goto	l2649
  5839  0115  084E               	movf	sprintf@val+3,w
  5840  0116  044D               	iorwf	sprintf@val+2,w
  5841  0117  044C               	iorwf	sprintf@val+1,w
  5842  0118  044B               	iorwf	sprintf@val,w
  5843  0119  1D03               	skipz
  5844  011A  291F               	goto	l2649
  5845                           
  5846                           ;doprnt.c: 1310: prec++;
  5847  011B  3001               	movlw	1
  5848  011C  07D2               	addwf	sprintf@prec,f
  5849  011D  3000               	movlw	0
  5850  011E  3DD3               	addwfc	sprintf@prec+1,f
  5851  011F                     l2649:	
  5852                           
  5853                           ;doprnt.c: 1324: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  5854  011F  01D4               	clrf	sprintf@c
  5855  0120  0AD4               	incf	sprintf@c,f
  5856  0121  300A               	movlw	10
  5857  0122  0654               	xorwf	sprintf@c,w
  5858  0123  1903               	btfsc	3,2
  5859  0124  2952               	goto	l2661
  5860  0125                     l2655:	
  5861                           
  5862                           ;doprnt.c: 1325: if(val < dpowers[c])
  5863  0125  0854               	movf	sprintf@c,w
  5864  0126  00C3               	movwf	??_sprintf
  5865  0127  01C4               	clrf	??_sprintf+1
  5866  0128  35C3               	lslf	??_sprintf,f
  5867  0129  0DC4               	rlf	??_sprintf+1,f
  5868  012A  35C3               	lslf	??_sprintf,f
  5869  012B  0DC4               	rlf	??_sprintf+1,f
  5870  012C  3000               	movlw	low (_dpowers| (0+32768))
  5871  012D  0743               	addwf	??_sprintf,w
  5872  012E  0084               	movwf	4
  5873  012F  3090               	movlw	high (_dpowers| (0+32768))
  5874  0130  3D44               	addwfc	??_sprintf+1,w
  5875  0131  0085               	movwf	5
  5876  0132  3F00               	moviw [0]fsr0
  5877  0133  00C5               	movwf	??_sprintf+2
  5878  0134  3F01               	moviw [1]fsr0
  5879  0135  00C6               	movwf	??_sprintf+3
  5880  0136  3F02               	moviw [2]fsr0
  5881  0137  00C7               	movwf	??_sprintf+4
  5882  0138  3F03               	moviw [3]fsr0
  5883  0139  00C8               	movwf	??_sprintf+5
  5884  013A  0848               	movf	??_sprintf+5,w
  5885  013B  024E               	subwf	sprintf@val+3,w
  5886  013C  1D03               	skipz
  5887  013D  2948               	goto	u2335
  5888  013E  0847               	movf	??_sprintf+4,w
  5889  013F  024D               	subwf	sprintf@val+2,w
  5890  0140  1D03               	skipz
  5891  0141  2948               	goto	u2335
  5892  0142  0846               	movf	??_sprintf+3,w
  5893  0143  024C               	subwf	sprintf@val+1,w
  5894  0144  1D03               	skipz
  5895  0145  2948               	goto	u2335
  5896  0146  0845               	movf	??_sprintf+2,w
  5897  0147  024B               	subwf	sprintf@val,w
  5898  0148                     u2335:	
  5899  0148  1C03               	btfss	3,0
  5900  0149  2952               	goto	l2661
  5901                           
  5902                           ;doprnt.c: 1326: break;
  5903  014A  3001               	movlw	1
  5904  014B  00C3               	movwf	??_sprintf
  5905  014C  0843               	movf	??_sprintf,w
  5906  014D  07D4               	addwf	sprintf@c,f
  5907  014E  300A               	movlw	10
  5908  014F  0654               	xorwf	sprintf@c,w
  5909  0150  1D03               	btfss	3,2
  5910  0151  2925               	goto	l2655
  5911  0152                     l2661:	
  5912                           
  5913                           ;doprnt.c: 1358: if(c < prec)
  5914  0152  0853               	movf	sprintf@prec+1,w
  5915  0153  3A80               	xorlw	128
  5916  0154  3C80               	sublw	128
  5917  0155  1D03               	skipz
  5918  0156  2959               	goto	u2355
  5919  0157  0852               	movf	sprintf@prec,w
  5920  0158  0254               	subwf	sprintf@c,w
  5921  0159                     u2355:	
  5922  0159  1803               	skipnc
  5923  015A  2961               	goto	l2665
  5924                           
  5925                           ;doprnt.c: 1359: c = prec;
  5926  015B  0020               	movlb	0	; select bank0
  5927  015C  0852               	movf	sprintf@prec,w
  5928  015D  00C3               	movwf	??_sprintf
  5929  015E  0843               	movf	??_sprintf,w
  5930  015F  00D4               	movwf	sprintf@c
  5931  0160  2975               	goto	l500
  5932  0161                     l2665:	
  5933                           
  5934                           ;doprnt.c: 1360: else if(prec < c)
  5935  0161  0020               	movlb	0	; select bank0
  5936  0162  0853               	movf	sprintf@prec+1,w
  5937  0163  3A80               	xorlw	128
  5938  0164  00C3               	movwf	??_sprintf
  5939  0165  3080               	movlw	128
  5940  0166  0243               	subwf	??_sprintf,w
  5941  0167  1D03               	skipz
  5942  0168  296B               	goto	u2365
  5943  0169  0854               	movf	sprintf@c,w
  5944  016A  0252               	subwf	sprintf@prec,w
  5945  016B                     u2365:	
  5946  016B  1803               	skipnc
  5947  016C  2975               	goto	l500
  5948                           
  5949                           ;doprnt.c: 1361: prec = c;
  5950  016D  0020               	movlb	0	; select bank0
  5951  016E  0854               	movf	sprintf@c,w
  5952  016F  00C3               	movwf	??_sprintf
  5953  0170  01C4               	clrf	??_sprintf+1
  5954  0171  0843               	movf	??_sprintf,w
  5955  0172  00D2               	movwf	sprintf@prec
  5956  0173  0844               	movf	??_sprintf+1,w
  5957  0174  00D3               	movwf	sprintf@prec+1
  5958  0175                     l500:	
  5959                           
  5960                           ;doprnt.c: 1400: if(width > c)
  5961  0175  0020               	movlb	0	; select bank0
  5962  0176  0851               	movf	sprintf@width+1,w
  5963  0177  3A80               	xorlw	128
  5964  0178  3C80               	sublw	128
  5965  0179  1D03               	skipz
  5966  017A  297D               	goto	u2375
  5967  017B  0850               	movf	sprintf@width,w
  5968  017C  0254               	subwf	sprintf@c,w
  5969  017D                     u2375:	
  5970  017D  1803               	skipnc
  5971  017E  2988               	goto	l2671
  5972                           
  5973                           ;doprnt.c: 1401: width -= c;
  5974  017F  0020               	movlb	0	; select bank0
  5975  0180  0854               	movf	sprintf@c,w
  5976  0181  00C3               	movwf	??_sprintf
  5977  0182  01C4               	clrf	??_sprintf+1
  5978  0183  0843               	movf	??_sprintf,w
  5979  0184  02D0               	subwf	sprintf@width,f
  5980  0185  0844               	movf	??_sprintf+1,w
  5981  0186  3BD1               	subwfb	sprintf@width+1,f
  5982  0187  298B               	goto	l2673
  5983  0188                     l2671:	
  5984                           
  5985                           ;doprnt.c: 1402: else;doprnt.c: 1403: width = 0;
  5986  0188  0020               	movlb	0	; select bank0
  5987  0189  01D0               	clrf	sprintf@width
  5988  018A  01D1               	clrf	sprintf@width+1
  5989  018B                     l2673:	
  5990                           
  5991                           ;doprnt.c: 1441: {;doprnt.c: 1443: if(width;doprnt.c: 1447: )
  5992  018B  0850               	movf	sprintf@width,w
  5993  018C  0451               	iorwf	sprintf@width+1,w
  5994  018D  1903               	btfsc	3,2
  5995  018E  29E5               	goto	l2687
  5996                           
  5997                           ;doprnt.c: 1449: ((*sp++ = (' ')));
  5998                           
  5999                           ;doprnt.c: 1448: do
  6000  018F  3020               	movlw	32
  6001  0190  00C3               	movwf	??_sprintf
  6002  0191  084F               	movf	sprintf@sp,w
  6003  0192  0086               	movwf	6
  6004  0193  3001               	movlw	1	; select bank2/3
  6005  0194  0087               	movwf	7
  6006  0195  0843               	movf	??_sprintf,w
  6007  0196  0081               	movwf	1
  6008  0197  3001               	movlw	1
  6009  0198  00C3               	movwf	??_sprintf
  6010  0199  0843               	movf	??_sprintf,w
  6011  019A  07CF               	addwf	sprintf@sp,f
  6012                           
  6013                           ;doprnt.c: 1450: while(--width);
  6014  019B  30FF               	movlw	255
  6015  019C  07D0               	addwf	sprintf@width,f
  6016  019D  30FF               	movlw	255
  6017  019E  3DD1               	addwfc	sprintf@width+1,f
  6018  019F  298B               	goto	l2673
  6019  01A0                     l2681:	
  6020                           ;doprnt.c: 1488: };doprnt.c: 1493: while(prec--) {
  6021                           
  6022                           
  6023                           ;doprnt.c: 1497: {;doprnt.c: 1508: c = (val / dpowers[prec]) % 10 + '0';
  6024  01A0  3000               	movlw	0
  6025  01A1  00B2               	movwf	___llmod@divisor+3
  6026  01A2  3000               	movlw	0
  6027  01A3  00B1               	movwf	___llmod@divisor+2
  6028  01A4  3000               	movlw	0
  6029  01A5  00B0               	movwf	___llmod@divisor+1
  6030  01A6  300A               	movlw	10
  6031  01A7  00AF               	movwf	___llmod@divisor
  6032  01A8  0853               	movf	sprintf@prec+1,w
  6033  01A9  0085               	movwf	5
  6034  01AA  0852               	movf	sprintf@prec,w
  6035  01AB  0084               	movwf	4
  6036  01AC  3584               	lslf	4,f
  6037  01AD  0D85               	rlf	5,f
  6038  01AE  3584               	lslf	4,f
  6039  01AF  0D85               	rlf	5,f
  6040  01B0  3000               	movlw	low (_dpowers| (0+32768))
  6041  01B1  0784               	addwf	4,f
  6042  01B2  3090               	movlw	high (_dpowers| (0+32768))
  6043  01B3  3D85               	addwfc	5,f
  6044  01B4  3F00               	moviw [0]fsr0
  6045  01B5  00A1               	movwf	___lldiv@divisor
  6046  01B6  3F01               	moviw [1]fsr0
  6047  01B7  00A2               	movwf	___lldiv@divisor+1
  6048  01B8  3F02               	moviw [2]fsr0
  6049  01B9  00A3               	movwf	___lldiv@divisor+2
  6050  01BA  3F03               	moviw [3]fsr0
  6051  01BB  00A4               	movwf	___lldiv@divisor+3
  6052  01BC  084E               	movf	sprintf@val+3,w
  6053  01BD  00A8               	movwf	___lldiv@dividend+3
  6054  01BE  084D               	movf	sprintf@val+2,w
  6055  01BF  00A7               	movwf	___lldiv@dividend+2
  6056  01C0  084C               	movf	sprintf@val+1,w
  6057  01C1  00A6               	movwf	___lldiv@dividend+1
  6058  01C2  084B               	movf	sprintf@val,w
  6059  01C3  00A5               	movwf	___lldiv@dividend
  6060  01C4  318D  2580  3180   	fcall	___lldiv
  6061  01C7  0020               	movlb	0	; select bank0
  6062  01C8  0824               	movf	?___lldiv+3,w
  6063  01C9  00B6               	movwf	___llmod@dividend+3
  6064  01CA  0823               	movf	?___lldiv+2,w
  6065  01CB  00B5               	movwf	___llmod@dividend+2
  6066  01CC  0822               	movf	?___lldiv+1,w
  6067  01CD  00B4               	movwf	___llmod@dividend+1
  6068  01CE  0821               	movf	?___lldiv,w
  6069  01CF  00B3               	movwf	___llmod@dividend
  6070  01D0  318C  245E  3180   	fcall	___llmod
  6071  01D3  0020               	movlb	0	; select bank0
  6072  01D4  082F               	movf	?___llmod,w
  6073  01D5  3E30               	addlw	48
  6074  01D6  00C3               	movwf	??_sprintf
  6075  01D7  0843               	movf	??_sprintf,w
  6076  01D8  00D4               	movwf	sprintf@c
  6077                           
  6078                           ;doprnt.c: 1542: };doprnt.c: 1543: ((*sp++ = (c)));
  6079  01D9  0854               	movf	sprintf@c,w
  6080  01DA  00C3               	movwf	??_sprintf
  6081  01DB  084F               	movf	sprintf@sp,w
  6082  01DC  0086               	movwf	6
  6083  01DD  3001               	movlw	1	; select bank2/3
  6084  01DE  0087               	movwf	7
  6085  01DF  0843               	movf	??_sprintf,w
  6086  01E0  0081               	movwf	1
  6087  01E1  3001               	movlw	1
  6088  01E2  00C3               	movwf	??_sprintf
  6089  01E3  0843               	movf	??_sprintf,w
  6090  01E4  07CF               	addwf	sprintf@sp,f
  6091  01E5                     l2687:	
  6092  01E5  30FF               	movlw	255
  6093  01E6  07D2               	addwf	sprintf@prec,f
  6094  01E7  30FF               	movlw	255
  6095  01E8  3DD3               	addwfc	sprintf@prec+1,f
  6096  01E9  0A52               	incf	sprintf@prec,w
  6097  01EA  1D03               	skipz
  6098  01EB  29A0               	goto	l2681
  6099  01EC  0A53               	incf	sprintf@prec+1,w
  6100  01ED  1903               	btfsc	3,2
  6101  01EE  282F               	goto	l2689
  6102  01EF  29A0               	goto	l2681
  6103  01F0                     l2691:	
  6104                           ;doprnt.c: 1544: };doprnt.c: 1552: };doprnt.c: 1554: alldone:
  6105                           
  6106                           
  6107                           ;doprnt.c: 1557: *sp = 0;
  6108  01F0  084F               	movf	sprintf@sp,w
  6109  01F1  0086               	movwf	6
  6110  01F2  3001               	movlw	1	; select bank2/3
  6111  01F3  0087               	movwf	7
  6112  01F4  0181               	clrf	1
  6113  01F5  0008               	return
  6114  01F6                     __end_of_sprintf:	
  6115                           ;doprnt.c: 1559: return 0;;	Return value of _sprintf is never used
  6116                           
  6117                           
  6118                           	psect	text16
  6119  0849                     __ptext16:	
  6120 ;; *************** function _isdigit *****************
  6121 ;; Defined at:
  6122 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\isdigit.c"
  6123 ;; Parameters:    Size  Location     Type
  6124 ;;  c               1    wreg     unsigned char 
  6125 ;; Auto vars:     Size  Location     Type
  6126 ;;  c               1    2[BANK0 ] unsigned char 
  6127 ;; Return value:  Size  Location     Type
  6128 ;;		None               void
  6129 ;; Registers used:
  6130 ;;		wreg, status,2, status,0
  6131 ;; Tracked objects:
  6132 ;;		On entry : 0/0
  6133 ;;		On exit  : 0/0
  6134 ;;		Unchanged: 0/0
  6135 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6136 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6137 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6138 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6139 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6140 ;;Total ram usage:        2 bytes
  6141 ;; Hardware stack levels used:    1
  6142 ;; Hardware stack levels required when called:    7
  6143 ;; This function calls:
  6144 ;;		Nothing
  6145 ;; This function is called by:
  6146 ;;		_sprintf
  6147 ;; This function uses a non-reentrant model
  6148 ;;
  6149                           
  6150                           
  6151                           ;psect for function _isdigit
  6152  0849                     _isdigit:	
  6153                           
  6154                           ;incstack = 0
  6155                           ; Regs used in _isdigit: [wreg+status,2+status,0]
  6156                           ;isdigit@c stored from wreg
  6157  0849  0020               	movlb	0	; select bank0
  6158  084A  00A2               	movwf	isdigit@c
  6159  084B  01A1               	clrf	_isdigit$1776
  6160  084C  303A               	movlw	58
  6161  084D  0222               	subwf	isdigit@c,w
  6162  084E  1803               	skipnc
  6163  084F  2856               	goto	l2387
  6164  0850  3030               	movlw	48
  6165  0851  0222               	subwf	isdigit@c,w
  6166  0852  1C03               	skipc
  6167  0853  2856               	goto	l2387
  6168  0854  01A1               	clrf	_isdigit$1776
  6169  0855  0AA1               	incf	_isdigit$1776,f
  6170  0856                     l2387:	
  6171  0856  0C21               	rrf	_isdigit$1776,w
  6172  0857  0008               	return
  6173  0858                     __end_of_isdigit:	
  6174                           
  6175                           	psect	text17
  6176  093F                     __ptext17:	
  6177 ;; *************** function ___wmul *****************
  6178 ;; Defined at:
  6179 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\Umul16.c"
  6180 ;; Parameters:    Size  Location     Type
  6181 ;;  multiplier      2    1[BANK0 ] unsigned int 
  6182 ;;  multiplicand    2    3[BANK0 ] unsigned int 
  6183 ;; Auto vars:     Size  Location     Type
  6184 ;;  product         2    5[BANK0 ] unsigned int 
  6185 ;; Return value:  Size  Location     Type
  6186 ;;                  2    1[BANK0 ] unsigned int 
  6187 ;; Registers used:
  6188 ;;		wreg, status,2, status,0
  6189 ;; Tracked objects:
  6190 ;;		On entry : 0/0
  6191 ;;		On exit  : 0/0
  6192 ;;		Unchanged: 0/0
  6193 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6194 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6195 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6196 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6197 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6198 ;;Total ram usage:        6 bytes
  6199 ;; Hardware stack levels used:    1
  6200 ;; Hardware stack levels required when called:    7
  6201 ;; This function calls:
  6202 ;;		Nothing
  6203 ;; This function is called by:
  6204 ;;		_sprintf
  6205 ;; This function uses a non-reentrant model
  6206 ;;
  6207                           
  6208                           
  6209                           ;psect for function ___wmul
  6210  093F                     ___wmul:	
  6211                           
  6212                           ;incstack = 0
  6213                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  6214  093F  0020               	movlb	0	; select bank0
  6215  0940  01A5               	clrf	___wmul@product
  6216  0941  01A6               	clrf	___wmul@product+1
  6217  0942                     l2393:	
  6218  0942  1C21               	btfss	___wmul@multiplier,0
  6219  0943  2948               	goto	l515
  6220  0944  0823               	movf	___wmul@multiplicand,w
  6221  0945  07A5               	addwf	___wmul@product,f
  6222  0946  0824               	movf	___wmul@multiplicand+1,w
  6223  0947  3DA6               	addwfc	___wmul@product+1,f
  6224  0948                     l515:	
  6225  0948  3001               	movlw	1
  6226  0949                     u1855:	
  6227  0949  35A3               	lslf	___wmul@multiplicand,f
  6228  094A  0DA4               	rlf	___wmul@multiplicand+1,f
  6229  094B  0B89               	decfsz	9,f
  6230  094C  2949               	goto	u1855
  6231  094D  3001               	movlw	1
  6232  094E                     u1865:	
  6233  094E  36A2               	lsrf	___wmul@multiplier+1,f
  6234  094F  0CA1               	rrf	___wmul@multiplier,f
  6235  0950  0B89               	decfsz	9,f
  6236  0951  294E               	goto	u1865
  6237  0952  0821               	movf	___wmul@multiplier,w
  6238  0953  0422               	iorwf	___wmul@multiplier+1,w
  6239  0954  1D03               	btfss	3,2
  6240  0955  2942               	goto	l2393
  6241  0956  0826               	movf	___wmul@product+1,w
  6242  0957  00A2               	movwf	?___wmul+1
  6243  0958  0825               	movf	___wmul@product,w
  6244  0959  00A1               	movwf	?___wmul
  6245  095A  0008               	return
  6246  095B                     __end_of___wmul:	
  6247                           
  6248                           	psect	text18
  6249  0C5E                     __ptext18:	
  6250 ;; *************** function ___llmod *****************
  6251 ;; Defined at:
  6252 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\llmod.c"
  6253 ;; Parameters:    Size  Location     Type
  6254 ;;  divisor         4   15[BANK0 ] unsigned long 
  6255 ;;  dividend        4   19[BANK0 ] unsigned long 
  6256 ;; Auto vars:     Size  Location     Type
  6257 ;;  counter         1   24[BANK0 ] unsigned char 
  6258 ;; Return value:  Size  Location     Type
  6259 ;;                  4   15[BANK0 ] unsigned long 
  6260 ;; Registers used:
  6261 ;;		wreg, status,2, status,0
  6262 ;; Tracked objects:
  6263 ;;		On entry : 0/0
  6264 ;;		On exit  : 0/0
  6265 ;;		Unchanged: 0/0
  6266 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6267 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6268 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6269 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6270 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6271 ;;Total ram usage:       10 bytes
  6272 ;; Hardware stack levels used:    1
  6273 ;; Hardware stack levels required when called:    7
  6274 ;; This function calls:
  6275 ;;		Nothing
  6276 ;; This function is called by:
  6277 ;;		_nrf24l01GetPipe
  6278 ;;		_sprintf
  6279 ;; This function uses a non-reentrant model
  6280 ;;
  6281                           
  6282                           
  6283                           ;psect for function ___llmod
  6284  0C5E                     ___llmod:	
  6285                           
  6286                           ;incstack = 0
  6287                           ; Regs used in ___llmod: [wreg+status,2+status,0]
  6288  0C5E  0020               	movlb	0	; select bank0
  6289  0C5F  0832               	movf	___llmod@divisor+3,w
  6290  0C60  0431               	iorwf	___llmod@divisor+2,w
  6291  0C61  0430               	iorwf	___llmod@divisor+1,w
  6292  0C62  042F               	iorwf	___llmod@divisor,w
  6293  0C63  1903               	skipnz
  6294  0C64  2C98               	goto	l2515
  6295  0C65  01B8               	clrf	___llmod@counter
  6296  0C66  0AB8               	incf	___llmod@counter,f
  6297  0C67                     l2505:	
  6298  0C67  1BB2               	btfsc	___llmod@divisor+3,7
  6299  0C68  2C75               	goto	l2507
  6300  0C69  3001               	movlw	1
  6301  0C6A                     u2195:	
  6302  0C6A  35AF               	lslf	___llmod@divisor,f
  6303  0C6B  0DB0               	rlf	___llmod@divisor+1,f
  6304  0C6C  0DB1               	rlf	___llmod@divisor+2,f
  6305  0C6D  0DB2               	rlf	___llmod@divisor+3,f
  6306  0C6E  0B89               	decfsz	9,f
  6307  0C6F  2C6A               	goto	u2195
  6308  0C70  3001               	movlw	1
  6309  0C71  00B7               	movwf	??___llmod
  6310  0C72  0837               	movf	??___llmod,w
  6311  0C73  07B8               	addwf	___llmod@counter,f
  6312  0C74  2C67               	goto	l2505
  6313  0C75                     l2507:	
  6314  0C75  0832               	movf	___llmod@divisor+3,w
  6315  0C76  0236               	subwf	___llmod@dividend+3,w
  6316  0C77  1D03               	skipz
  6317  0C78  2C83               	goto	u2215
  6318  0C79  0831               	movf	___llmod@divisor+2,w
  6319  0C7A  0235               	subwf	___llmod@dividend+2,w
  6320  0C7B  1D03               	skipz
  6321  0C7C  2C83               	goto	u2215
  6322  0C7D  0830               	movf	___llmod@divisor+1,w
  6323  0C7E  0234               	subwf	___llmod@dividend+1,w
  6324  0C7F  1D03               	skipz
  6325  0C80  2C83               	goto	u2215
  6326  0C81  082F               	movf	___llmod@divisor,w
  6327  0C82  0233               	subwf	___llmod@dividend,w
  6328  0C83                     u2215:	
  6329  0C83  1C03               	skipc
  6330  0C84  2C8D               	goto	l2511
  6331  0C85  082F               	movf	___llmod@divisor,w
  6332  0C86  02B3               	subwf	___llmod@dividend,f
  6333  0C87  0830               	movf	___llmod@divisor+1,w
  6334  0C88  3BB4               	subwfb	___llmod@dividend+1,f
  6335  0C89  0831               	movf	___llmod@divisor+2,w
  6336  0C8A  3BB5               	subwfb	___llmod@dividend+2,f
  6337  0C8B  0832               	movf	___llmod@divisor+3,w
  6338  0C8C  3BB6               	subwfb	___llmod@dividend+3,f
  6339  0C8D                     l2511:	
  6340  0C8D  3001               	movlw	1
  6341  0C8E                     u2225:	
  6342  0C8E  36B2               	lsrf	___llmod@divisor+3,f
  6343  0C8F  0CB1               	rrf	___llmod@divisor+2,f
  6344  0C90  0CB0               	rrf	___llmod@divisor+1,f
  6345  0C91  0CAF               	rrf	___llmod@divisor,f
  6346  0C92  0B89               	decfsz	9,f
  6347  0C93  2C8E               	goto	u2225
  6348  0C94  3001               	movlw	1
  6349  0C95  02B8               	subwf	___llmod@counter,f
  6350  0C96  1D03               	btfss	3,2
  6351  0C97  2C75               	goto	l2507
  6352  0C98                     l2515:	
  6353  0C98  0836               	movf	___llmod@dividend+3,w
  6354  0C99  00B2               	movwf	?___llmod+3
  6355  0C9A  0835               	movf	___llmod@dividend+2,w
  6356  0C9B  00B1               	movwf	?___llmod+2
  6357  0C9C  0834               	movf	___llmod@dividend+1,w
  6358  0C9D  00B0               	movwf	?___llmod+1
  6359  0C9E  0833               	movf	___llmod@dividend,w
  6360  0C9F  00AF               	movwf	?___llmod
  6361  0CA0  0008               	return
  6362  0CA1                     __end_of___llmod:	
  6363                           
  6364                           	psect	text19
  6365  0D80                     __ptext19:	
  6366 ;; *************** function ___lldiv *****************
  6367 ;; Defined at:
  6368 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\__lldiv.c"
  6369 ;; Parameters:    Size  Location     Type
  6370 ;;  divisor         4    1[BANK0 ] unsigned long 
  6371 ;;  dividend        4    5[BANK0 ] unsigned long 
  6372 ;; Auto vars:     Size  Location     Type
  6373 ;;  quotient        4   10[BANK0 ] unsigned long 
  6374 ;;  counter         1   14[BANK0 ] unsigned char 
  6375 ;; Return value:  Size  Location     Type
  6376 ;;                  4    1[BANK0 ] unsigned long 
  6377 ;; Registers used:
  6378 ;;		wreg, status,2, status,0
  6379 ;; Tracked objects:
  6380 ;;		On entry : 0/0
  6381 ;;		On exit  : 0/0
  6382 ;;		Unchanged: 0/0
  6383 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6384 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6385 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6386 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6387 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6388 ;;Total ram usage:       14 bytes
  6389 ;; Hardware stack levels used:    1
  6390 ;; Hardware stack levels required when called:    7
  6391 ;; This function calls:
  6392 ;;		Nothing
  6393 ;; This function is called by:
  6394 ;;		_sprintf
  6395 ;; This function uses a non-reentrant model
  6396 ;;
  6397                           
  6398                           
  6399                           ;psect for function ___lldiv
  6400  0D80                     ___lldiv:	
  6401                           
  6402                           ;incstack = 0
  6403                           ; Regs used in ___lldiv: [wreg+status,2+status,0]
  6404  0D80  3000               	movlw	0
  6405  0D81  0020               	movlb	0	; select bank0
  6406  0D82  00AD               	movwf	___lldiv@quotient+3
  6407  0D83  3000               	movlw	0
  6408  0D84  00AC               	movwf	___lldiv@quotient+2
  6409  0D85  3000               	movlw	0
  6410  0D86  00AB               	movwf	___lldiv@quotient+1
  6411  0D87  3000               	movlw	0
  6412  0D88  00AA               	movwf	___lldiv@quotient
  6413  0D89  0824               	movf	___lldiv@divisor+3,w
  6414  0D8A  0423               	iorwf	___lldiv@divisor+2,w
  6415  0D8B  0422               	iorwf	___lldiv@divisor+1,w
  6416  0D8C  0421               	iorwf	___lldiv@divisor,w
  6417  0D8D  1903               	skipnz
  6418  0D8E  2DCA               	goto	l2425
  6419  0D8F  01AE               	clrf	___lldiv@counter
  6420  0D90  0AAE               	incf	___lldiv@counter,f
  6421  0D91                     l2411:	
  6422  0D91  1BA4               	btfsc	___lldiv@divisor+3,7
  6423  0D92  2D9F               	goto	l2413
  6424  0D93  3001               	movlw	1
  6425  0D94                     u1895:	
  6426  0D94  35A1               	lslf	___lldiv@divisor,f
  6427  0D95  0DA2               	rlf	___lldiv@divisor+1,f
  6428  0D96  0DA3               	rlf	___lldiv@divisor+2,f
  6429  0D97  0DA4               	rlf	___lldiv@divisor+3,f
  6430  0D98  0B89               	decfsz	9,f
  6431  0D99  2D94               	goto	u1895
  6432  0D9A  3001               	movlw	1
  6433  0D9B  00A9               	movwf	??___lldiv
  6434  0D9C  0829               	movf	??___lldiv,w
  6435  0D9D  07AE               	addwf	___lldiv@counter,f
  6436  0D9E  2D91               	goto	l2411
  6437  0D9F                     l2413:	
  6438  0D9F  3001               	movlw	1
  6439  0DA0                     u1915:	
  6440  0DA0  35AA               	lslf	___lldiv@quotient,f
  6441  0DA1  0DAB               	rlf	___lldiv@quotient+1,f
  6442  0DA2  0DAC               	rlf	___lldiv@quotient+2,f
  6443  0DA3  0DAD               	rlf	___lldiv@quotient+3,f
  6444  0DA4  0B89               	decfsz	9,f
  6445  0DA5  2DA0               	goto	u1915
  6446  0DA6  0824               	movf	___lldiv@divisor+3,w
  6447  0DA7  0228               	subwf	___lldiv@dividend+3,w
  6448  0DA8  1D03               	skipz
  6449  0DA9  2DB4               	goto	u1925
  6450  0DAA  0823               	movf	___lldiv@divisor+2,w
  6451  0DAB  0227               	subwf	___lldiv@dividend+2,w
  6452  0DAC  1D03               	skipz
  6453  0DAD  2DB4               	goto	u1925
  6454  0DAE  0822               	movf	___lldiv@divisor+1,w
  6455  0DAF  0226               	subwf	___lldiv@dividend+1,w
  6456  0DB0  1D03               	skipz
  6457  0DB1  2DB4               	goto	u1925
  6458  0DB2  0821               	movf	___lldiv@divisor,w
  6459  0DB3  0225               	subwf	___lldiv@dividend,w
  6460  0DB4                     u1925:	
  6461  0DB4  1C03               	skipc
  6462  0DB5  2DBF               	goto	l2421
  6463  0DB6  0821               	movf	___lldiv@divisor,w
  6464  0DB7  02A5               	subwf	___lldiv@dividend,f
  6465  0DB8  0822               	movf	___lldiv@divisor+1,w
  6466  0DB9  3BA6               	subwfb	___lldiv@dividend+1,f
  6467  0DBA  0823               	movf	___lldiv@divisor+2,w
  6468  0DBB  3BA7               	subwfb	___lldiv@dividend+2,f
  6469  0DBC  0824               	movf	___lldiv@divisor+3,w
  6470  0DBD  3BA8               	subwfb	___lldiv@dividend+3,f
  6471  0DBE  142A               	bsf	___lldiv@quotient,0
  6472  0DBF                     l2421:	
  6473  0DBF  3001               	movlw	1
  6474  0DC0                     u1935:	
  6475  0DC0  36A4               	lsrf	___lldiv@divisor+3,f
  6476  0DC1  0CA3               	rrf	___lldiv@divisor+2,f
  6477  0DC2  0CA2               	rrf	___lldiv@divisor+1,f
  6478  0DC3  0CA1               	rrf	___lldiv@divisor,f
  6479  0DC4  0B89               	decfsz	9,f
  6480  0DC5  2DC0               	goto	u1935
  6481  0DC6  3001               	movlw	1
  6482  0DC7  02AE               	subwf	___lldiv@counter,f
  6483  0DC8  1D03               	btfss	3,2
  6484  0DC9  2D9F               	goto	l2413
  6485  0DCA                     l2425:	
  6486  0DCA  082D               	movf	___lldiv@quotient+3,w
  6487  0DCB  00A4               	movwf	?___lldiv+3
  6488  0DCC  082C               	movf	___lldiv@quotient+2,w
  6489  0DCD  00A3               	movwf	?___lldiv+2
  6490  0DCE  082B               	movf	___lldiv@quotient+1,w
  6491  0DCF  00A2               	movwf	?___lldiv+1
  6492  0DD0  082A               	movf	___lldiv@quotient,w
  6493  0DD1  00A1               	movwf	?___lldiv
  6494  0DD2  0008               	return
  6495  0DD3                     __end_of___lldiv:	
  6496                           
  6497                           	psect	text20
  6498  0AE5                     __ptext20:	
  6499 ;; *************** function ___lltoft *****************
  6500 ;; Defined at:
  6501 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\lltoft.c"
  6502 ;; Parameters:    Size  Location     Type
  6503 ;;  c               4    9[BANK0 ] unsigned long 
  6504 ;; Auto vars:     Size  Location     Type
  6505 ;;  exp             1   14[BANK0 ] unsigned char 
  6506 ;; Return value:  Size  Location     Type
  6507 ;;                  3    9[BANK0 ] float 
  6508 ;; Registers used:
  6509 ;;		wreg, status,2, status,0, pclath, cstack
  6510 ;; Tracked objects:
  6511 ;;		On entry : 0/0
  6512 ;;		On exit  : 0/0
  6513 ;;		Unchanged: 0/0
  6514 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6515 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6516 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6517 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6518 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6519 ;;Total ram usage:        6 bytes
  6520 ;; Hardware stack levels used:    1
  6521 ;; Hardware stack levels required when called:    8
  6522 ;; This function calls:
  6523 ;;		___ftpack
  6524 ;; This function is called by:
  6525 ;;		_ftoa
  6526 ;; This function uses a non-reentrant model
  6527 ;;
  6528                           
  6529                           
  6530                           ;psect for function ___lltoft
  6531  0AE5                     ___lltoft:	
  6532                           
  6533                           ;incstack = 0
  6534                           ; Regs used in ___lltoft: [wreg+status,2+status,0+pclath+cstack]
  6535  0AE5  308E               	movlw	142
  6536  0AE6  0020               	movlb	0	; select bank0
  6537  0AE7  00AD               	movwf	??___lltoft
  6538  0AE8  082D               	movf	??___lltoft,w
  6539  0AE9  00AE               	movwf	___lltoft@exp
  6540  0AEA                     l2841:	
  6541  0AEA  30FF               	movlw	255
  6542  0AEB  052C               	andwf	___lltoft@c+3,w
  6543  0AEC  1903               	btfsc	3,2
  6544  0AED  2AFA               	goto	l2843
  6545  0AEE  3001               	movlw	1
  6546  0AEF                     u2715:	
  6547  0AEF  36AC               	lsrf	___lltoft@c+3,f
  6548  0AF0  0CAB               	rrf	___lltoft@c+2,f
  6549  0AF1  0CAA               	rrf	___lltoft@c+1,f
  6550  0AF2  0CA9               	rrf	___lltoft@c,f
  6551  0AF3  0B89               	decfsz	9,f
  6552  0AF4  2AEF               	goto	u2715
  6553  0AF5  3001               	movlw	1
  6554  0AF6  00AD               	movwf	??___lltoft
  6555  0AF7  082D               	movf	??___lltoft,w
  6556  0AF8  07AE               	addwf	___lltoft@exp,f
  6557  0AF9  2AEA               	goto	l2841
  6558  0AFA                     l2843:	
  6559  0AFA  0829               	movf	___lltoft@c,w
  6560  0AFB  00A1               	movwf	___ftpack@arg
  6561  0AFC  082A               	movf	___lltoft@c+1,w
  6562  0AFD  00A2               	movwf	___ftpack@arg+1
  6563  0AFE  082B               	movf	___lltoft@c+2,w
  6564  0AFF  00A3               	movwf	___ftpack@arg+2
  6565  0B00  082E               	movf	___lltoft@exp,w
  6566  0B01  00AD               	movwf	??___lltoft
  6567  0B02  082D               	movf	??___lltoft,w
  6568  0B03  00A4               	movwf	___ftpack@exp
  6569  0B04  01A5               	clrf	___ftpack@sign
  6570  0B05  318E  267E         	fcall	___ftpack
  6571  0B07  0020               	movlb	0	; select bank0
  6572  0B08  0821               	movf	?___ftpack,w
  6573  0B09  00A9               	movwf	?___lltoft
  6574  0B0A  0822               	movf	?___ftpack+1,w
  6575  0B0B  00AA               	movwf	?___lltoft+1
  6576  0B0C  0823               	movf	?___ftpack+2,w
  6577  0B0D  00AB               	movwf	?___lltoft+2
  6578  0B0E  0008               	return
  6579  0B0F                     __end_of___lltoft:	
  6580                           
  6581                           	psect	text21
  6582  0EE3                     __ptext21:	
  6583 ;; *************** function ___fttol *****************
  6584 ;; Defined at:
  6585 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\fttol.c"
  6586 ;; Parameters:    Size  Location     Type
  6587 ;;  f1              3   25[BANK0 ] float 
  6588 ;; Auto vars:     Size  Location     Type
  6589 ;;  lval            4   34[BANK0 ] unsigned long 
  6590 ;;  exp1            1   38[BANK0 ] unsigned char 
  6591 ;;  sign1           1   33[BANK0 ] unsigned char 
  6592 ;; Return value:  Size  Location     Type
  6593 ;;                  4   25[BANK0 ] long 
  6594 ;; Registers used:
  6595 ;;		wreg, status,2, status,0
  6596 ;; Tracked objects:
  6597 ;;		On entry : 0/0
  6598 ;;		On exit  : 0/0
  6599 ;;		Unchanged: 0/0
  6600 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6601 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6602 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6603 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6604 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6605 ;;Total ram usage:       14 bytes
  6606 ;; Hardware stack levels used:    1
  6607 ;; Hardware stack levels required when called:    7
  6608 ;; This function calls:
  6609 ;;		Nothing
  6610 ;; This function is called by:
  6611 ;;		_ftoa
  6612 ;; This function uses a non-reentrant model
  6613 ;;
  6614                           
  6615                           
  6616                           ;psect for function ___fttol
  6617  0EE3                     ___fttol:	
  6618                           
  6619                           ;incstack = 0
  6620                           ; Regs used in ___fttol: [wreg+status,2+status,0]
  6621  0EE3  0020               	movlb	0	; select bank0
  6622  0EE4  0839               	movf	___fttol@f1,w
  6623  0EE5  00BD               	movwf	??___fttol
  6624  0EE6  083A               	movf	___fttol@f1+1,w
  6625  0EE7  00BE               	movwf	??___fttol+1
  6626  0EE8  083B               	movf	___fttol@f1+2,w
  6627  0EE9  00BF               	movwf	??___fttol+2
  6628  0EEA  1003               	clrc
  6629  0EEB  0D3E               	rlf	??___fttol+1,w
  6630  0EEC  0D3F               	rlf	??___fttol+2,w
  6631  0EED  00C0               	movwf	??___fttol+3
  6632  0EEE  0840               	movf	??___fttol+3,w
  6633  0EEF  00C6               	movwf	___fttol@exp1
  6634  0EF0  0846               	movf	___fttol@exp1,w
  6635  0EF1  1D03               	btfss	3,2
  6636  0EF2  2EFC               	goto	l2801
  6637  0EF3  3000               	movlw	0
  6638  0EF4  00BC               	movwf	?___fttol+3
  6639  0EF5  3000               	movlw	0
  6640  0EF6  00BB               	movwf	?___fttol+2
  6641  0EF7  3000               	movlw	0
  6642  0EF8  00BA               	movwf	?___fttol+1
  6643  0EF9  3000               	movlw	0
  6644  0EFA  00B9               	movwf	?___fttol
  6645  0EFB  0008               	return
  6646  0EFC                     l2801:	
  6647  0EFC  0839               	movf	___fttol@f1,w
  6648  0EFD  00BD               	movwf	??___fttol
  6649  0EFE  083A               	movf	___fttol@f1+1,w
  6650  0EFF  00BE               	movwf	??___fttol+1
  6651  0F00  083B               	movf	___fttol@f1+2,w
  6652  0F01  00BF               	movwf	??___fttol+2
  6653  0F02  3017               	movlw	23
  6654  0F03                     u2625:	
  6655  0F03  36BF               	lsrf	??___fttol+2,f
  6656  0F04  0CBE               	rrf	??___fttol+1,f
  6657  0F05  0CBD               	rrf	??___fttol,f
  6658  0F06  0B89               	decfsz	9,f
  6659  0F07  2F03               	goto	u2625
  6660  0F08  083D               	movf	??___fttol,w
  6661  0F09  00C0               	movwf	??___fttol+3
  6662  0F0A  0840               	movf	??___fttol+3,w
  6663  0F0B  00C1               	movwf	___fttol@sign1
  6664  0F0C  17BA               	bsf	___fttol@f1+1,7
  6665  0F0D  30FF               	movlw	255
  6666  0F0E  05B9               	andwf	___fttol@f1,f
  6667  0F0F  30FF               	movlw	255
  6668  0F10  05BA               	andwf	___fttol@f1+1,f
  6669  0F11  3000               	movlw	0
  6670  0F12  05BB               	andwf	___fttol@f1+2,f
  6671  0F13  0839               	movf	___fttol@f1,w
  6672  0F14  00C2               	movwf	___fttol@lval
  6673  0F15  083A               	movf	___fttol@f1+1,w
  6674  0F16  00C3               	movwf	___fttol@lval+1
  6675  0F17  083B               	movf	___fttol@f1+2,w
  6676  0F18  00C4               	movwf	___fttol@lval+2
  6677  0F19  01C5               	clrf	___fttol@lval+3
  6678  0F1A  308E               	movlw	142
  6679  0F1B  02C6               	subwf	___fttol@exp1,f
  6680  0F1C  1FC6               	btfss	___fttol@exp1,7
  6681  0F1D  2F3A               	goto	l2821
  6682  0F1E  0846               	movf	___fttol@exp1,w
  6683  0F1F  3A80               	xorlw	128
  6684  0F20  3E8F               	addlw	143
  6685  0F21  1803               	skipnc
  6686  0F22  2F2C               	goto	l2819
  6687  0F23  3000               	movlw	0
  6688  0F24  00BC               	movwf	?___fttol+3
  6689  0F25  3000               	movlw	0
  6690  0F26  00BB               	movwf	?___fttol+2
  6691  0F27  3000               	movlw	0
  6692  0F28  00BA               	movwf	?___fttol+1
  6693  0F29  3000               	movlw	0
  6694  0F2A  00B9               	movwf	?___fttol
  6695  0F2B  0008               	return
  6696  0F2C                     l2819:	
  6697  0F2C  3001               	movlw	1
  6698  0F2D                     u2655:	
  6699  0F2D  36C5               	lsrf	___fttol@lval+3,f
  6700  0F2E  0CC4               	rrf	___fttol@lval+2,f
  6701  0F2F  0CC3               	rrf	___fttol@lval+1,f
  6702  0F30  0CC2               	rrf	___fttol@lval,f
  6703  0F31  0B89               	decfsz	9,f
  6704  0F32  2F2D               	goto	u2655
  6705  0F33  3001               	movlw	1
  6706  0F34  00BD               	movwf	??___fttol
  6707  0F35  083D               	movf	??___fttol,w
  6708  0F36  07C6               	addwf	___fttol@exp1,f
  6709  0F37  1903               	btfsc	3,2
  6710  0F38  2F53               	goto	l2829
  6711  0F39  2F2C               	goto	l2819
  6712  0F3A                     l2821:	
  6713  0F3A  3018               	movlw	24
  6714  0F3B  0246               	subwf	___fttol@exp1,w
  6715  0F3C  1C03               	skipc
  6716  0F3D  2F50               	goto	l809
  6717  0F3E  3000               	movlw	0
  6718  0F3F  00BC               	movwf	?___fttol+3
  6719  0F40  3000               	movlw	0
  6720  0F41  00BB               	movwf	?___fttol+2
  6721  0F42  3000               	movlw	0
  6722  0F43  00BA               	movwf	?___fttol+1
  6723  0F44  3000               	movlw	0
  6724  0F45  00B9               	movwf	?___fttol
  6725  0F46  0008               	return
  6726  0F47                     l2827:	
  6727  0F47  3001               	movlw	1
  6728  0F48                     u2685:	
  6729  0F48  35C2               	lslf	___fttol@lval,f
  6730  0F49  0DC3               	rlf	___fttol@lval+1,f
  6731  0F4A  0DC4               	rlf	___fttol@lval+2,f
  6732  0F4B  0DC5               	rlf	___fttol@lval+3,f
  6733  0F4C  0B89               	decfsz	9,f
  6734  0F4D  2F48               	goto	u2685
  6735  0F4E  3001               	movlw	1
  6736  0F4F  02C6               	subwf	___fttol@exp1,f
  6737  0F50                     l809:	
  6738  0F50  0846               	movf	___fttol@exp1,w
  6739  0F51  1D03               	btfss	3,2
  6740  0F52  2F47               	goto	l2827
  6741  0F53                     l2829:	
  6742  0F53  0841               	movf	___fttol@sign1,w
  6743  0F54  1903               	btfsc	3,2
  6744  0F55  2F61               	goto	l2833
  6745  0F56  09C2               	comf	___fttol@lval,f
  6746  0F57  09C3               	comf	___fttol@lval+1,f
  6747  0F58  09C4               	comf	___fttol@lval+2,f
  6748  0F59  09C5               	comf	___fttol@lval+3,f
  6749  0F5A  0AC2               	incf	___fttol@lval,f
  6750  0F5B  1903               	skipnz
  6751  0F5C  0AC3               	incf	___fttol@lval+1,f
  6752  0F5D  1903               	skipnz
  6753  0F5E  0AC4               	incf	___fttol@lval+2,f
  6754  0F5F  1903               	skipnz
  6755  0F60  0AC5               	incf	___fttol@lval+3,f
  6756  0F61                     l2833:	
  6757  0F61  0845               	movf	___fttol@lval+3,w
  6758  0F62  00BC               	movwf	?___fttol+3
  6759  0F63  0844               	movf	___fttol@lval+2,w
  6760  0F64  00BB               	movwf	?___fttol+2
  6761  0F65  0843               	movf	___fttol@lval+1,w
  6762  0F66  00BA               	movwf	?___fttol+1
  6763  0F67  0842               	movf	___fttol@lval,w
  6764  0F68  00B9               	movwf	?___fttol
  6765  0F69  0008               	return
  6766  0F6A                     __end_of___fttol:	
  6767                           
  6768                           	psect	text22
  6769  0993                     __ptext22:	
  6770 ;; *************** function ___ftsub *****************
  6771 ;; Defined at:
  6772 ;;		line 17 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\ftsub.c"
  6773 ;; Parameters:    Size  Location     Type
  6774 ;;  f2              3   30[BANK0 ] float 
  6775 ;;  f1              3   33[BANK0 ] float 
  6776 ;; Auto vars:     Size  Location     Type
  6777 ;;		None
  6778 ;; Return value:  Size  Location     Type
  6779 ;;                  3   30[BANK0 ] float 
  6780 ;; Registers used:
  6781 ;;		wreg, status,2, status,0, pclath, cstack
  6782 ;; Tracked objects:
  6783 ;;		On entry : 0/0
  6784 ;;		On exit  : 0/0
  6785 ;;		Unchanged: 0/0
  6786 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6787 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6788 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6789 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6790 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6791 ;;Total ram usage:        6 bytes
  6792 ;; Hardware stack levels used:    1
  6793 ;; Hardware stack levels required when called:    9
  6794 ;; This function calls:
  6795 ;;		___ftadd
  6796 ;; This function is called by:
  6797 ;;		_ftoa
  6798 ;; This function uses a non-reentrant model
  6799 ;;
  6800                           
  6801                           
  6802                           ;psect for function ___ftsub
  6803  0993                     ___ftsub:	
  6804                           
  6805                           ;incstack = 0
  6806                           ; Regs used in ___ftsub: [wreg+status,2+status,0+pclath+cstack]
  6807  0993  0020               	movlb	0	; select bank0
  6808  0994  0840               	movf	___ftsub@f2+2,w
  6809  0995  043F               	iorwf	___ftsub@f2+1,w
  6810  0996  043E               	iorwf	___ftsub@f2,w
  6811  0997  1903               	skipnz
  6812  0998  299B               	goto	l2791
  6813  0999  3080               	movlw	128
  6814  099A  06C0               	xorwf	___ftsub@f2+2,f
  6815  099B                     l2791:	
  6816  099B  0841               	movf	___ftsub@f1,w
  6817  099C  00B1               	movwf	___ftadd@f1
  6818  099D  0842               	movf	___ftsub@f1+1,w
  6819  099E  00B2               	movwf	___ftadd@f1+1
  6820  099F  0843               	movf	___ftsub@f1+2,w
  6821  09A0  00B3               	movwf	___ftadd@f1+2
  6822  09A1  083E               	movf	___ftsub@f2,w
  6823  09A2  00B4               	movwf	___ftadd@f2
  6824  09A3  083F               	movf	___ftsub@f2+1,w
  6825  09A4  00B5               	movwf	___ftadd@f2+1
  6826  09A5  0840               	movf	___ftsub@f2+2,w
  6827  09A6  00B6               	movwf	___ftadd@f2+2
  6828  09A7  3182  22FC         	fcall	___ftadd
  6829  09A9  0020               	movlb	0	; select bank0
  6830  09AA  0831               	movf	?___ftadd,w
  6831  09AB  00BE               	movwf	?___ftsub
  6832  09AC  0832               	movf	?___ftadd+1,w
  6833  09AD  00BF               	movwf	?___ftsub+1
  6834  09AE  0833               	movf	?___ftadd+2,w
  6835  09AF  00C0               	movwf	?___ftsub+2
  6836  09B0  0008               	return
  6837  09B1                     __end_of___ftsub:	
  6838                           
  6839                           	psect	text23
  6840  0840                     __ptext23:	
  6841 ;; *************** function ___ftneg *****************
  6842 ;; Defined at:
  6843 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\ftneg.c"
  6844 ;; Parameters:    Size  Location     Type
  6845 ;;  f1              3    1[BANK0 ] float 
  6846 ;; Auto vars:     Size  Location     Type
  6847 ;;		None
  6848 ;; Return value:  Size  Location     Type
  6849 ;;                  3    1[BANK0 ] float 
  6850 ;; Registers used:
  6851 ;;		wreg
  6852 ;; Tracked objects:
  6853 ;;		On entry : 0/0
  6854 ;;		On exit  : 0/0
  6855 ;;		Unchanged: 0/0
  6856 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6857 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6858 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6859 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6860 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6861 ;;Total ram usage:        3 bytes
  6862 ;; Hardware stack levels used:    1
  6863 ;; Hardware stack levels required when called:    7
  6864 ;; This function calls:
  6865 ;;		Nothing
  6866 ;; This function is called by:
  6867 ;;		_ftoa
  6868 ;; This function uses a non-reentrant model
  6869 ;;
  6870                           
  6871                           
  6872                           ;psect for function ___ftneg
  6873  0840                     ___ftneg:	
  6874                           
  6875                           ;incstack = 0
  6876                           ; Regs used in ___ftneg: [wreg]
  6877  0840  0020               	movlb	0	; select bank0
  6878  0841  0823               	movf	___ftneg@f1+2,w
  6879  0842  0422               	iorwf	___ftneg@f1+1,w
  6880  0843  0421               	iorwf	___ftneg@f1,w
  6881  0844  1903               	skipnz
  6882  0845  0008               	return
  6883  0846  3080               	movlw	128
  6884  0847  06A3               	xorwf	___ftneg@f1+2,f
  6885  0848  0008               	return
  6886  0849                     __end_of___ftneg:	
  6887                           
  6888                           	psect	text24
  6889  0BE3                     __ptext24:	
  6890 ;; *************** function ___ftge *****************
  6891 ;; Defined at:
  6892 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\ftge.c"
  6893 ;; Parameters:    Size  Location     Type
  6894 ;;  ff1             3    1[BANK0 ] float 
  6895 ;;  ff2             3    4[BANK0 ] float 
  6896 ;; Auto vars:     Size  Location     Type
  6897 ;;		None
  6898 ;; Return value:  Size  Location     Type
  6899 ;;		None               void
  6900 ;; Registers used:
  6901 ;;		wreg, status,2, status,0
  6902 ;; Tracked objects:
  6903 ;;		On entry : 0/0
  6904 ;;		On exit  : 0/0
  6905 ;;		Unchanged: 0/0
  6906 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6907 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6908 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6909 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6910 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6911 ;;Total ram usage:        9 bytes
  6912 ;; Hardware stack levels used:    1
  6913 ;; Hardware stack levels required when called:    7
  6914 ;; This function calls:
  6915 ;;		Nothing
  6916 ;; This function is called by:
  6917 ;;		_ftoa
  6918 ;; This function uses a non-reentrant model
  6919 ;;
  6920                           
  6921                           
  6922                           ;psect for function ___ftge
  6923  0BE3                     ___ftge:	
  6924                           
  6925                           ;incstack = 0
  6926                           ; Regs used in ___ftge: [wreg+status,2+status,0]
  6927  0BE3  0020               	movlb	0	; select bank0
  6928  0BE4  1FA3               	btfss	___ftge@ff1+2,7
  6929  0BE5  2BFA               	goto	l2713
  6930  0BE6  0921               	comf	___ftge@ff1,w
  6931  0BE7  00A7               	movwf	??___ftge
  6932  0BE8  0922               	comf	___ftge@ff1+1,w
  6933  0BE9  00A8               	movwf	??___ftge+1
  6934  0BEA  0923               	comf	___ftge@ff1+2,w
  6935  0BEB  00A9               	movwf	??___ftge+2
  6936  0BEC  0AA7               	incf	??___ftge,f
  6937  0BED  1903               	skipnz
  6938  0BEE  0AA8               	incf	??___ftge+1,f
  6939  0BEF  1903               	skipnz
  6940  0BF0  0AA9               	incf	??___ftge+2,f
  6941  0BF1  3000               	movlw	0
  6942  0BF2  0727               	addwf	??___ftge,w
  6943  0BF3  00A1               	movwf	___ftge@ff1
  6944  0BF4  3000               	movlw	0
  6945  0BF5  3D28               	addwfc	??___ftge+1,w
  6946  0BF6  00A2               	movwf	___ftge@ff1+1
  6947  0BF7  3080               	movlw	128
  6948  0BF8  3D29               	addwfc	??___ftge+2,w
  6949  0BF9  00A3               	movwf	___ftge@ff1+2
  6950  0BFA                     l2713:	
  6951  0BFA  1FA6               	btfss	___ftge@ff2+2,7
  6952  0BFB  2C10               	goto	l2717
  6953  0BFC  0924               	comf	___ftge@ff2,w
  6954  0BFD  00A7               	movwf	??___ftge
  6955  0BFE  0925               	comf	___ftge@ff2+1,w
  6956  0BFF  00A8               	movwf	??___ftge+1
  6957  0C00  0926               	comf	___ftge@ff2+2,w
  6958  0C01  00A9               	movwf	??___ftge+2
  6959  0C02  0AA7               	incf	??___ftge,f
  6960  0C03  1903               	skipnz
  6961  0C04  0AA8               	incf	??___ftge+1,f
  6962  0C05  1903               	skipnz
  6963  0C06  0AA9               	incf	??___ftge+2,f
  6964  0C07  3000               	movlw	0
  6965  0C08  0727               	addwf	??___ftge,w
  6966  0C09  00A4               	movwf	___ftge@ff2
  6967  0C0A  3000               	movlw	0
  6968  0C0B  3D28               	addwfc	??___ftge+1,w
  6969  0C0C  00A5               	movwf	___ftge@ff2+1
  6970  0C0D  3080               	movlw	128
  6971  0C0E  3D29               	addwfc	??___ftge+2,w
  6972  0C0F  00A6               	movwf	___ftge@ff2+2
  6973  0C10                     l2717:	
  6974  0C10  3080               	movlw	128
  6975  0C11  06A3               	xorwf	___ftge@ff1+2,f
  6976  0C12  3080               	movlw	128
  6977  0C13  06A6               	xorwf	___ftge@ff2+2,f
  6978  0C14  0826               	movf	___ftge@ff2+2,w
  6979  0C15  0223               	subwf	___ftge@ff1+2,w
  6980  0C16  1D03               	skipz
  6981  0C17  0008               	return
  6982  0C18  0825               	movf	___ftge@ff2+1,w
  6983  0C19  0222               	subwf	___ftge@ff1+1,w
  6984  0C1A  1D03               	skipz
  6985  0C1B  0008               	return
  6986  0C1C  0824               	movf	___ftge@ff2,w
  6987  0C1D  0221               	subwf	___ftge@ff1,w
  6988  0C1E  0008               	return
  6989  0C1F                     __end_of___ftge:	
  6990                           
  6991                           	psect	text25
  6992  03F2                     __ptext25:	
  6993 ;; *************** function _nrf24l01SendPacket *****************
  6994 ;; Defined at:
  6995 ;;		line 170 in file "nrf24l01.c"
  6996 ;; Parameters:    Size  Location     Type
  6997 ;;  Packet          1    wreg     PTR struct .
  6998 ;;		 -> main@packet(33), loop@packet(33), 
  6999 ;; Auto vars:     Size  Location     Type
  7000 ;;  Packet          1   10[BANK0 ] PTR struct .
  7001 ;;		 -> main@packet(33), loop@packet(33), 
  7002 ;;  i               1   11[BANK0 ] unsigned char 
  7003 ;; Return value:  Size  Location     Type
  7004 ;;                  1    wreg      void 
  7005 ;; Registers used:
  7006 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7007 ;; Tracked objects:
  7008 ;;		On entry : 0/0
  7009 ;;		On exit  : 0/0
  7010 ;;		Unchanged: 0/0
  7011 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7012 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7013 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7014 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7015 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7016 ;;Total ram usage:        4 bytes
  7017 ;; Hardware stack levels used:    1
  7018 ;; Hardware stack levels required when called:   11
  7019 ;; This function calls:
  7020 ;;		_enableInterrupts
  7021 ;;		_nrf24l01CEHigh
  7022 ;;		_nrf24l01CELow
  7023 ;;		_nrf24l01ChangeTXPower
  7024 ;;		_nrf24l01SPIEnd
  7025 ;;		_nrf24l01SPISend
  7026 ;;		_nrf24l01SPIStart
  7027 ;;		_nrf24l01SetRXMode
  7028 ;;		_strlen
  7029 ;; This function is called by:
  7030 ;;		_loop
  7031 ;;		_main
  7032 ;;		_nrf24l01SendACK
  7033 ;; This function uses a non-reentrant model
  7034 ;;
  7035                           
  7036                           
  7037                           ;psect for function _nrf24l01SendPacket
  7038  03F2                     _nrf24l01SendPacket:	
  7039                           
  7040                           ;incstack = 0
  7041                           ; Regs used in _nrf24l01SendPacket: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7042                           ;nrf24l01SendPacket@Packet stored from wreg
  7043  03F2  0020               	movlb	0	; select bank0
  7044  03F3  00AA               	movwf	nrf24l01SendPacket@Packet
  7045                           
  7046                           ;nrf24l01.c: 172: TXPacket = Packet;
  7047  03F4  082A               	movf	nrf24l01SendPacket@Packet,w
  7048  03F5  00A8               	movwf	??_nrf24l01SendPacket
  7049  03F6  0828               	movf	??_nrf24l01SendPacket,w
  7050  03F7  0021               	movlb	1	; select bank1
  7051  03F8  00ED               	movwf	_TXPacket^(0+128)
  7052  03F9                     l333:	
  7053                           ;nrf24l01.c: 175: unsigned char i;;nrf24l01.c: 179: RESEND:
  7054                           
  7055                           
  7056                           ;nrf24l01.c: 182: i = 0xFF;
  7057  03F9  30FF               	movlw	255
  7058  03FA  0020               	movlb	0	; select bank0
  7059  03FB  00A8               	movwf	??_nrf24l01SendPacket
  7060  03FC  0828               	movf	??_nrf24l01SendPacket,w
  7061  03FD  00AB               	movwf	nrf24l01SendPacket@i
  7062  03FE                     l3677:	
  7063                           ;nrf24l01.c: 183: while (nrf24l01.TXBusy){
  7064                           
  7065  03FE  0020               	movlb	0	; select bank0
  7066  03FF  1C6E               	btfss	_nrf24l01,0	;volatile
  7067  0400  2C0A               	goto	l337
  7068                           
  7069                           ;nrf24l01.c: 184: if (!--i) {
  7070  0401  3001               	movlw	1
  7071  0402  02AB               	subwf	nrf24l01SendPacket@i,f
  7072  0403  1903               	btfsc	3,2
  7073  0404  2BF9               	goto	l333
  7074                           
  7075                           ;nrf24l01.c: 186: };nrf24l01.c: 187: _delay((unsigned long)((100)*(16000000/4000000.0)))
      +                          ;
  7076                           
  7077                           ;nrf24l01.c: 185: goto RESEND;
  7078  0405  3085               	movlw	133
  7079  0406                     u3617:	
  7080  0406  0B89               	decfsz	9,f
  7081  0407  2C06               	goto	u3617
  7082  0408  0000               	nop
  7083  0409  2BFE               	goto	l3677
  7084  040A                     l337:	
  7085                           
  7086                           ;nrf24l01.c: 188: };nrf24l01.c: 191: nrf24l01.TXBusy = 1;
  7087  040A  146E               	bsf	_nrf24l01,0	;volatile
  7088                           
  7089                           ;nrf24l01.c: 194: enableInterrupts(0);
  7090  040B  3000               	movlw	0
  7091  040C  3188  2030  3183   	fcall	_enableInterrupts
  7092                           
  7093                           ;nrf24l01.c: 197: nrf24l01SetRXMode(0);
  7094  040F  3000               	movlw	0
  7095  0410  318B  23A8  3183   	fcall	_nrf24l01SetRXMode
  7096                           
  7097                           ;nrf24l01.c: 200: nrf24l01SPIStart();
  7098  0413  3188  2038  3183   	fcall	_nrf24l01SPIStart
  7099                           
  7100                           ;nrf24l01.c: 203: nrf24l01SPISend((unsigned) 0b10110000);
  7101  0416  30B0               	movlw	176
  7102  0417  3187  27F2  3183   	fcall	_nrf24l01SPISend
  7103                           
  7104                           ;nrf24l01.c: 205: nrf24l01SPISend(TXPacket->packetData.byte);
  7105  041A  0021               	movlb	1	; select bank1
  7106  041B  086D               	movf	_TXPacket^(0+128),w
  7107  041C  0086               	movwf	6
  7108  041D  0187               	clrf	7
  7109  041E  0801               	movf	1,w
  7110  041F  3187  27F2  3183   	fcall	_nrf24l01SPISend
  7111                           
  7112                           ;nrf24l01.c: 208: for (i = 0; (i < strlen(TXPacket->Message)) && (i < sizeof(TXPacket->M
      +                          essage)); i++){
  7113  0422  0020               	movlb	0	; select bank0
  7114  0423  01AB               	clrf	nrf24l01SendPacket@i
  7115  0424  2C37               	goto	l3689
  7116  0425                     l3685:	
  7117                           
  7118                           ;nrf24l01.c: 209: nrf24l01SPISend(TXPacket->Message[i]);
  7119  0425  082B               	movf	nrf24l01SendPacket@i,w
  7120  0426  3E01               	addlw	1
  7121  0427  0021               	movlb	1	; select bank1
  7122  0428  076D               	addwf	_TXPacket^(0+128),w
  7123  0429  0020               	movlb	0	; select bank0
  7124  042A  00A8               	movwf	??_nrf24l01SendPacket
  7125  042B  0828               	movf	??_nrf24l01SendPacket,w
  7126  042C  0086               	movwf	6
  7127  042D  0187               	clrf	7
  7128  042E  0801               	movf	1,w
  7129  042F  3187  27F2  3183   	fcall	_nrf24l01SPISend
  7130  0432  3001               	movlw	1
  7131  0433  0020               	movlb	0	; select bank0
  7132  0434  00A8               	movwf	??_nrf24l01SendPacket
  7133  0435  0828               	movf	??_nrf24l01SendPacket,w
  7134  0436  07AB               	addwf	nrf24l01SendPacket@i,f
  7135  0437                     l3689:	
  7136  0437  0021               	movlb	1	; select bank1
  7137  0438  086D               	movf	_TXPacket^(0+128),w
  7138  0439  3E01               	addlw	1
  7139  043A  0020               	movlb	0	; select bank0
  7140  043B  00A1               	movwf	strlen@s
  7141  043C  39FF               	andlw	255
  7142  043D  1D03               	skipz
  7143  043E  3000               	movlw	0
  7144  043F  00A2               	movwf	strlen@s+1
  7145  0440  3189  21B1  3183   	fcall	_strlen
  7146  0443  0020               	movlb	0	; select bank0
  7147  0444  082B               	movf	nrf24l01SendPacket@i,w
  7148  0445  00A8               	movwf	??_nrf24l01SendPacket
  7149  0446  01A9               	clrf	??_nrf24l01SendPacket+1
  7150  0447  0822               	movf	?_strlen+1,w
  7151  0448  0229               	subwf	??_nrf24l01SendPacket+1,w
  7152  0449  1D03               	skipz
  7153  044A  2C4D               	goto	u3425
  7154  044B  0821               	movf	?_strlen,w
  7155  044C  0228               	subwf	??_nrf24l01SendPacket,w
  7156  044D                     u3425:	
  7157  044D  1803               	skipnc
  7158  044E  2C53               	goto	l3693
  7159  044F  3020               	movlw	32
  7160  0450  022B               	subwf	nrf24l01SendPacket@i,w
  7161  0451  1C03               	skipc
  7162  0452  2C25               	goto	l3685
  7163  0453                     l3693:	
  7164                           
  7165                           ;nrf24l01.c: 210: };nrf24l01.c: 213: nrf24l01SPIEnd();
  7166  0453  3188  2029  3183   	fcall	_nrf24l01SPIEnd
  7167                           
  7168                           ;nrf24l01.c: 216: nrf24l01CEHigh();
  7169  0456  3188  2017  3183   	fcall	_nrf24l01CEHigh
  7170                           
  7171                           ;nrf24l01.c: 217: _delay((unsigned long)((20)*(16000000/4000000.0)));
  7172  0459  301A               	movlw	26
  7173  045A                     u3627:	
  7174  045A  0B89               	decfsz	9,f
  7175  045B  2C5A               	goto	u3627
  7176  045C  3200               	nop2
  7177                           
  7178                           ;nrf24l01.c: 218: nrf24l01CELow();
  7179  045D  3188  201A  3183   	fcall	_nrf24l01CELow
  7180                           
  7181                           ;nrf24l01.c: 221: enableInterrupts(1);
  7182  0460  3001               	movlw	1
  7183  0461  3188  2030  3183   	fcall	_enableInterrupts
  7184                           
  7185                           ;nrf24l01.c: 224: i = 0xFF;
  7186  0464  30FF               	movlw	255
  7187  0465  0020               	movlb	0	; select bank0
  7188  0466  00A8               	movwf	??_nrf24l01SendPacket
  7189  0467  0828               	movf	??_nrf24l01SendPacket,w
  7190  0468  00AB               	movwf	nrf24l01SendPacket@i
  7191  0469                     l3707:	
  7192                           ;nrf24l01.c: 225: while (nrf24l01.TXBusy){
  7193                           
  7194  0469  0020               	movlb	0	; select bank0
  7195  046A  1C6E               	btfss	_nrf24l01,0	;volatile
  7196  046B  2C75               	goto	l3709
  7197                           
  7198                           ;nrf24l01.c: 226: if (!--i) {
  7199  046C  3001               	movlw	1
  7200  046D  02AB               	subwf	nrf24l01SendPacket@i,f
  7201  046E  1903               	btfsc	3,2
  7202  046F  2BF9               	goto	l333
  7203                           
  7204                           ;nrf24l01.c: 228: };nrf24l01.c: 229: _delay((unsigned long)((100)*(16000000/4000000.0)))
      +                          ;
  7205                           
  7206                           ;nrf24l01.c: 227: goto RESEND;
  7207  0470  3085               	movlw	133
  7208  0471                     u3637:	
  7209  0471  0B89               	decfsz	9,f
  7210  0472  2C71               	goto	u3637
  7211  0473  0000               	nop
  7212  0474  2C69               	goto	l3707
  7213  0475                     l3709:	
  7214                           
  7215                           ;nrf24l01.c: 230: };nrf24l01.c: 234: i = 0xFF;
  7216  0475  30FF               	movlw	255
  7217  0476  00A8               	movwf	??_nrf24l01SendPacket
  7218  0477  0828               	movf	??_nrf24l01SendPacket,w
  7219  0478  00AB               	movwf	nrf24l01SendPacket@i
  7220  0479                     l3719:	
  7221                           ;nrf24l01.c: 235: while (TXPacket->packetData.ACKRequest){
  7222                           
  7223  0479  0021               	movlb	1	; select bank1
  7224  047A  086D               	movf	_TXPacket^(0+128),w
  7225  047B  0086               	movwf	6
  7226  047C  0187               	clrf	7
  7227  047D  1D01               	btfss	1,2
  7228  047E  0008               	return
  7229                           
  7230                           ;nrf24l01.c: 236: if (!--i) {
  7231  047F  3001               	movlw	1
  7232  0480  0020               	movlb	0	; select bank0
  7233  0481  02AB               	subwf	nrf24l01SendPacket@i,f
  7234  0482  1D03               	btfss	3,2
  7235  0483  2CA7               	goto	l3717
  7236                           
  7237                           ;nrf24l01.c: 237: _delay((unsigned long)((50000)*(16000000/4000000.0)));
  7238  0484  3002               	movlw	2
  7239  0485  0020               	movlb	0	; select bank0
  7240  0486  00A9               	movwf	??_nrf24l01SendPacket+1
  7241  0487  3004               	movlw	4
  7242  0488  00A8               	movwf	??_nrf24l01SendPacket
  7243  0489  30BA               	movlw	186
  7244  048A                     u3647:	
  7245  048A  0B89               	decfsz	9,f
  7246  048B  2C8A               	goto	u3647
  7247  048C  0BA8               	decfsz	??_nrf24l01SendPacket,f
  7248  048D  2C8A               	goto	u3647
  7249  048E  0BA9               	decfsz	??_nrf24l01SendPacket+1,f
  7250  048F  2C8A               	goto	u3647
  7251  0490  0000               	nop
  7252                           
  7253                           ;nrf24l01.c: 238: _delay((unsigned long)((50000)*(16000000/4000000.0)));
  7254  0491  3002               	movlw	2
  7255  0492  0020               	movlb	0	; select bank0
  7256  0493  00A9               	movwf	??_nrf24l01SendPacket+1
  7257  0494  3004               	movlw	4
  7258  0495  00A8               	movwf	??_nrf24l01SendPacket
  7259  0496  30BA               	movlw	186
  7260  0497                     u3657:	
  7261  0497  0B89               	decfsz	9,f
  7262  0498  2C97               	goto	u3657
  7263  0499  0BA8               	decfsz	??_nrf24l01SendPacket,f
  7264  049A  2C97               	goto	u3657
  7265  049B  0BA9               	decfsz	??_nrf24l01SendPacket+1,f
  7266  049C  2C97               	goto	u3657
  7267  049D  0000               	nop
  7268                           
  7269                           ;nrf24l01.c: 239: nrf24l01ChangeTXPower(1);
  7270  049E  3001               	movlw	1
  7271  049F  0020               	movlb	0	; select bank0
  7272  04A0  00A4               	movwf	nrf24l01ChangeTXPower@addPower
  7273  04A1  3000               	movlw	0
  7274  04A2  00A5               	movwf	nrf24l01ChangeTXPower@addPower+1
  7275  04A3  318C  241F  3183   	fcall	_nrf24l01ChangeTXPower
  7276                           
  7277                           ;nrf24l01.c: 240: goto RESEND;
  7278  04A6  2BF9               	goto	l333
  7279  04A7                     l3717:	
  7280                           
  7281                           ;nrf24l01.c: 241: };nrf24l01.c: 242: _delay((unsigned long)((100)*(16000000/4000000.0)))
      +                          ;
  7282  04A7  3085               	movlw	133
  7283  04A8                     u3667:	
  7284  04A8  0B89               	decfsz	9,f
  7285  04A9  2CA8               	goto	u3667
  7286  04AA  0000               	nop
  7287  04AB  2C79               	goto	l3719
  7288  04AC                     __end_of_nrf24l01SendPacket:	
  7289                           
  7290                           	psect	text26
  7291  09B1                     __ptext26:	
  7292 ;; *************** function _strlen *****************
  7293 ;; Defined at:
  7294 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\strlen.c"
  7295 ;; Parameters:    Size  Location     Type
  7296 ;;  s               2    1[BANK0 ] PTR const unsigned char 
  7297 ;;		 -> packet.Message(32), packet.Message(32), NULL(0), main@packet(33), 
  7298 ;;		 -> loop@packet(33), romData(19), 
  7299 ;; Auto vars:     Size  Location     Type
  7300 ;;  cp              2    5[BANK0 ] PTR const unsigned char 
  7301 ;;		 -> packet.Message(32), packet.Message(32), NULL(0), main@packet(33), 
  7302 ;;		 -> loop@packet(33), romData(19), 
  7303 ;; Return value:  Size  Location     Type
  7304 ;;                  2    1[BANK0 ] unsigned int 
  7305 ;; Registers used:
  7306 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  7307 ;; Tracked objects:
  7308 ;;		On entry : 0/0
  7309 ;;		On exit  : 0/0
  7310 ;;		Unchanged: 0/0
  7311 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7312 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7313 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7314 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7315 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7316 ;;Total ram usage:        6 bytes
  7317 ;; Hardware stack levels used:    1
  7318 ;; Hardware stack levels required when called:    7
  7319 ;; This function calls:
  7320 ;;		Nothing
  7321 ;; This function is called by:
  7322 ;;		_nrf24l01GetPipe
  7323 ;;		_nrf24l01SendPacket
  7324 ;; This function uses a non-reentrant model
  7325 ;;
  7326                           
  7327                           
  7328                           ;psect for function _strlen
  7329  09B1                     _strlen:	
  7330                           
  7331                           ;incstack = 0
  7332                           ; Regs used in _strlen: [wreg+fsr1l+fsr1h+status,2+status,0]
  7333  09B1  0020               	movlb	0	; select bank0
  7334  09B2  0822               	movf	strlen@s+1,w
  7335  09B3  00A6               	movwf	strlen@cp+1
  7336  09B4  0821               	movf	strlen@s,w
  7337  09B5  00A5               	movwf	strlen@cp
  7338  09B6                     l3643:	
  7339  09B6  0825               	movf	strlen@cp,w
  7340  09B7  0086               	movwf	6
  7341  09B8  0826               	movf	strlen@cp+1,w
  7342  09B9  0087               	movwf	7
  7343  09BA  0801               	movf	1,w
  7344  09BB  1903               	btfsc	3,2
  7345  09BC  29C2               	goto	l3645
  7346  09BD  3001               	movlw	1
  7347  09BE  07A5               	addwf	strlen@cp,f
  7348  09BF  3000               	movlw	0
  7349  09C0  3DA6               	addwfc	strlen@cp+1,f
  7350  09C1  29B6               	goto	l3643
  7351  09C2                     l3645:	
  7352  09C2  0921               	comf	strlen@s,w
  7353  09C3  00A3               	movwf	??_strlen
  7354  09C4  0922               	comf	strlen@s+1,w
  7355  09C5  00A4               	movwf	??_strlen+1
  7356  09C6  0AA3               	incf	??_strlen,f
  7357  09C7  1903               	skipnz
  7358  09C8  0AA4               	incf	??_strlen+1,f
  7359  09C9  0825               	movf	strlen@cp,w
  7360  09CA  0723               	addwf	??_strlen,w
  7361  09CB  00A1               	movwf	?_strlen
  7362  09CC  0826               	movf	strlen@cp+1,w
  7363  09CD  3D24               	addwfc	??_strlen+1,w
  7364  09CE  00A2               	movwf	?_strlen+1
  7365  09CF  0008               	return
  7366  09D0                     __end_of_strlen:	
  7367                           
  7368                           	psect	text27
  7369  0BA8                     __ptext27:	
  7370 ;; *************** function _nrf24l01SetRXMode *****************
  7371 ;; Defined at:
  7372 ;;		line 54 in file "nrf24l01.c"
  7373 ;; Parameters:    Size  Location     Type
  7374 ;;  rxMode          1    wreg     unsigned char 
  7375 ;; Auto vars:     Size  Location     Type
  7376 ;;  rxMode          1    6[BANK0 ] unsigned char 
  7377 ;;  config          1    5[BANK0 ] struct .
  7378 ;; Return value:  Size  Location     Type
  7379 ;;                  1    wreg      void 
  7380 ;; Registers used:
  7381 ;;		wreg, status,2, status,0, pclath, cstack
  7382 ;; Tracked objects:
  7383 ;;		On entry : 0/0
  7384 ;;		On exit  : 0/0
  7385 ;;		Unchanged: 0/0
  7386 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7387 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7388 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7389 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7390 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7391 ;;Total ram usage:        3 bytes
  7392 ;; Hardware stack levels used:    1
  7393 ;; Hardware stack levels required when called:   10
  7394 ;; This function calls:
  7395 ;;		_nrf24l01CEHigh
  7396 ;;		_nrf24l01CELow
  7397 ;;		_nrf24l01Send
  7398 ;; This function is called by:
  7399 ;;		_nrf24l01SendPacket
  7400 ;;		_checkRxData
  7401 ;; This function uses a non-reentrant model
  7402 ;;
  7403                           
  7404                           
  7405                           ;psect for function _nrf24l01SetRXMode
  7406  0BA8                     _nrf24l01SetRXMode:	
  7407                           
  7408                           ;incstack = 0
  7409                           ; Regs used in _nrf24l01SetRXMode: [wreg+status,2+status,0+pclath+cstack]
  7410                           ;nrf24l01SetRXMode@rxMode stored from wreg
  7411  0BA8  0020               	movlb	0	; select bank0
  7412  0BA9  00A6               	movwf	nrf24l01SetRXMode@rxMode
  7413                           
  7414                           ;nrf24l01.c: 56: n_CONFIG_t config;;nrf24l01.c: 59: config.byte = nrf24l01Send((unsigned
      +                          ) 0b00000000 | (unsigned) 0x00, 0);
  7415  0BAA  01A1               	clrf	nrf24l01Send@data
  7416  0BAB  3000               	movlw	0
  7417  0BAC  3189  21F0  318B   	fcall	_nrf24l01Send
  7418  0BAF  0020               	movlb	0	; select bank0
  7419  0BB0  00A4               	movwf	??_nrf24l01SetRXMode
  7420  0BB1  0824               	movf	??_nrf24l01SetRXMode,w
  7421  0BB2  00A5               	movwf	nrf24l01SetRXMode@config
  7422                           
  7423                           ;nrf24l01.c: 62: if (config.PRIM_RX != rxMode){
  7424  0BB3  0825               	movf	nrf24l01SetRXMode@config,w
  7425  0BB4  3901               	andlw	1
  7426  0BB5  0626               	xorwf	nrf24l01SetRXMode@rxMode,w
  7427  0BB6  1903               	skipnz
  7428  0BB7  2BDC               	goto	l2891
  7429                           
  7430                           ;nrf24l01.c: 65: nrf24l01CELow();
  7431  0BB8  3188  201A  318B   	fcall	_nrf24l01CELow
  7432                           
  7433                           ;nrf24l01.c: 66: _delay((unsigned long)((200)*(16000000/4000000.0)));
  7434  0BBB  30A0               	movlw	160
  7435  0BBC                     u3677:	
  7436  0BBC  3200               	nop2
  7437  0BBD  0B89               	decfsz	9,f
  7438  0BBE  2BBC               	goto	u3677
  7439                           
  7440                           ;nrf24l01.c: 69: config.PRIM_RX = rxMode;
  7441  0BBF  0020               	movlb	0	; select bank0
  7442  0BC0  0826               	movf	nrf24l01SetRXMode@rxMode,w
  7443  0BC1  3901               	andlw	1
  7444  0BC2  1025               	bcf	nrf24l01SetRXMode@config,0
  7445  0BC3  1D03               	skipz
  7446  0BC4  1425               	bsf	nrf24l01SetRXMode@config,0
  7447                           
  7448                           ;nrf24l01.c: 70: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x00, config.byte);
  7449  0BC5  0825               	movf	nrf24l01SetRXMode@config,w
  7450  0BC6  00A4               	movwf	??_nrf24l01SetRXMode
  7451  0BC7  0824               	movf	??_nrf24l01SetRXMode,w
  7452  0BC8  00A1               	movwf	nrf24l01Send@data
  7453  0BC9  3020               	movlw	32
  7454  0BCA  3189  21F0  318B   	fcall	_nrf24l01Send
  7455                           
  7456                           ;nrf24l01.c: 73: _delay((unsigned long)((200)*(16000000/4000000.0)));
  7457  0BCD  30A0               	movlw	160
  7458  0BCE                     u3687:	
  7459  0BCE  3200               	nop2
  7460  0BCF  0B89               	decfsz	9,f
  7461  0BD0  2BCE               	goto	u3687
  7462                           
  7463                           ;nrf24l01.c: 76: if (rxMode){
  7464  0BD1  0020               	movlb	0	; select bank0
  7465  0BD2  0826               	movf	nrf24l01SetRXMode@rxMode,w
  7466  0BD3  1903               	btfsc	3,2
  7467  0BD4  2BDC               	goto	l2891
  7468                           
  7469                           ;nrf24l01.c: 77: nrf24l01CEHigh();
  7470  0BD5  3188  2017  318B   	fcall	_nrf24l01CEHigh
  7471                           
  7472                           ;nrf24l01.c: 78: _delay((unsigned long)((200)*(16000000/4000000.0)));
  7473  0BD8  30A0               	movlw	160
  7474  0BD9                     u3697:	
  7475  0BD9  3200               	nop2
  7476  0BDA  0B89               	decfsz	9,f
  7477  0BDB  2BD9               	goto	u3697
  7478  0BDC                     l2891:	
  7479                           
  7480                           ;nrf24l01.c: 79: };nrf24l01.c: 80: };nrf24l01.c: 83: nrf24l01.RXMode = rxMode;
  7481  0BDC  0020               	movlb	0	; select bank0
  7482  0BDD  0826               	movf	nrf24l01SetRXMode@rxMode,w
  7483  0BDE  3901               	andlw	1
  7484  0BDF  116E               	bcf	_nrf24l01,2	;volatile
  7485  0BE0  1D03               	skipz
  7486  0BE1  156E               	bsf	_nrf24l01,2	;volatile
  7487  0BE2  0008               	return
  7488  0BE3                     __end_of_nrf24l01SetRXMode:	
  7489                           
  7490                           	psect	text28
  7491  0756                     __ptext28:	
  7492 ;; *************** function _getADCValue *****************
  7493 ;; Defined at:
  7494 ;;		line 23 in file "main.c"
  7495 ;; Parameters:    Size  Location     Type
  7496 ;;  channel         1    wreg     unsigned char 
  7497 ;;  multiplier      3   30[BANK0 ] float 
  7498 ;; Auto vars:     Size  Location     Type
  7499 ;;  channel         1   36[BANK0 ] unsigned char 
  7500 ;;  adcSum          3   38[BANK0 ] float 
  7501 ;;  adcLoop         1   37[BANK0 ] unsigned char 
  7502 ;; Return value:  Size  Location     Type
  7503 ;;                  3   30[BANK0 ] float 
  7504 ;; Registers used:
  7505 ;;		wreg, status,2, status,0, pclath, cstack
  7506 ;; Tracked objects:
  7507 ;;		On entry : 0/0
  7508 ;;		On exit  : 0/0
  7509 ;;		Unchanged: 0/0
  7510 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7511 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7512 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7513 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7514 ;;      Totals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7515 ;;Total ram usage:       11 bytes
  7516 ;; Hardware stack levels used:    1
  7517 ;; Hardware stack levels required when called:    9
  7518 ;; This function calls:
  7519 ;;		___ftadd
  7520 ;;		___ftdiv
  7521 ;;		___ftmul
  7522 ;;		___lbtoft
  7523 ;;		___lwtoft
  7524 ;; This function is called by:
  7525 ;;		_loop
  7526 ;; This function uses a non-reentrant model
  7527 ;;
  7528                           
  7529                           
  7530                           ;psect for function _getADCValue
  7531  0756                     _getADCValue:	
  7532                           
  7533                           ;incstack = 0
  7534                           ; Regs used in _getADCValue: [wreg+status,2+status,0+pclath+cstack]
  7535                           ;getADCValue@channel stored from wreg
  7536  0756  0020               	movlb	0	; select bank0
  7537  0757  00C4               	movwf	getADCValue@channel
  7538                           
  7539                           ;main.c: 25: float adcSum = 0;
  7540  0758  3000               	movlw	0
  7541  0759  00C6               	movwf	getADCValue@adcSum
  7542  075A  3000               	movlw	0
  7543  075B  00C7               	movwf	getADCValue@adcSum+1
  7544  075C  3000               	movlw	0
  7545  075D  00C8               	movwf	getADCValue@adcSum+2
  7546                           
  7547                           ;main.c: 26: unsigned char adcLoop = 255;
  7548  075E  30FF               	movlw	255
  7549  075F  00C1               	movwf	??_getADCValue
  7550  0760  0841               	movf	??_getADCValue,w
  7551  0761  00C5               	movwf	getADCValue@adcLoop
  7552                           
  7553                           ;main.c: 28: ADCON0bits.CHS = channel;
  7554  0762  0844               	movf	getADCValue@channel,w
  7555  0763  00C1               	movwf	??_getADCValue
  7556  0764  0DC1               	rlf	??_getADCValue,f
  7557  0765  0DC1               	rlf	??_getADCValue,f
  7558  0766  0021               	movlb	1	; select bank1
  7559  0767  081D               	movf	29,w	;volatile
  7560  0768  0020               	movlb	0	; select bank0
  7561  0769  0641               	xorwf	??_getADCValue,w
  7562  076A  3903               	andlw	-253
  7563  076B  0641               	xorwf	??_getADCValue,w
  7564  076C  0021               	movlb	1	; select bank1
  7565  076D  009D               	movwf	29	;volatile
  7566                           
  7567                           ;main.c: 29: _delay((unsigned long)((200)*(16000000/4000000.0)));
  7568  076E  30A0               	movlw	160
  7569  076F                     u3707:	
  7570  076F  3200               	nop2
  7571  0770  0B89               	decfsz	9,f
  7572  0771  2F6F               	goto	u3707
  7573  0772                     l3145:	
  7574                           ;main.c: 31: while (--adcLoop){
  7575                           
  7576  0772  3001               	movlw	1
  7577  0773  0020               	movlb	0	; select bank0
  7578  0774  02C5               	subwf	getADCValue@adcLoop,f
  7579  0775  1903               	btfsc	3,2
  7580  0776  2FC0               	goto	l3147
  7581                           
  7582                           ;main.c: 33: ADCON0bits.ADGO = 1;
  7583  0777  0021               	movlb	1	; select bank1
  7584  0778  149D               	bsf	29,1	;volatile
  7585  0779                     l216:	
  7586                           ;main.c: 35: while (ADCON0bits.ADGO){
  7587                           
  7588  0779  0021               	movlb	1	; select bank1
  7589  077A  1C9D               	btfss	29,1	;volatile
  7590  077B  2F7E               	goto	l3143
  7591                           
  7592                           ;main.c: 36: __nop();
  7593  077C  0000               	nop
  7594  077D  2F79               	goto	l216
  7595  077E                     l3143:	
  7596                           
  7597                           ;main.c: 37: };main.c: 39: adcSum+= ADRESL;
  7598  077E  081B               	movf	27,w	;volatile
  7599  077F  3189  2124  3187   	fcall	___lbtoft
  7600  0782  0020               	movlb	0	; select bank0
  7601  0783  0829               	movf	?___lbtoft,w
  7602  0784  00B1               	movwf	___ftadd@f1
  7603  0785  082A               	movf	?___lbtoft+1,w
  7604  0786  00B2               	movwf	___ftadd@f1+1
  7605  0787  082B               	movf	?___lbtoft+2,w
  7606  0788  00B3               	movwf	___ftadd@f1+2
  7607  0789  0846               	movf	getADCValue@adcSum,w
  7608  078A  00B4               	movwf	___ftadd@f2
  7609  078B  0847               	movf	getADCValue@adcSum+1,w
  7610  078C  00B5               	movwf	___ftadd@f2+1
  7611  078D  0848               	movf	getADCValue@adcSum+2,w
  7612  078E  00B6               	movwf	___ftadd@f2+2
  7613  078F  3182  22FC  3187   	fcall	___ftadd
  7614  0792  0020               	movlb	0	; select bank0
  7615  0793  0831               	movf	?___ftadd,w
  7616  0794  00C6               	movwf	getADCValue@adcSum
  7617  0795  0832               	movf	?___ftadd+1,w
  7618  0796  00C7               	movwf	getADCValue@adcSum+1
  7619  0797  0833               	movf	?___ftadd+2,w
  7620  0798  00C8               	movwf	getADCValue@adcSum+2
  7621                           
  7622                           ;main.c: 40: adcSum+= (unsigned) (ADRESH << 8);
  7623  0799  0021               	movlb	1	; select bank1
  7624  079A  081C               	movf	28,w	;volatile
  7625  079B  0020               	movlb	0	; select bank0
  7626  079C  00C1               	movwf	??_getADCValue
  7627  079D  01C2               	clrf	??_getADCValue+1
  7628  079E  0841               	movf	??_getADCValue,w
  7629  079F  00C2               	movwf	??_getADCValue+1
  7630  07A0  01C1               	clrf	??_getADCValue
  7631  07A1  0841               	movf	??_getADCValue,w
  7632  07A2  00A9               	movwf	___lwtoft@c
  7633  07A3  0842               	movf	??_getADCValue+1,w
  7634  07A4  00AA               	movwf	___lwtoft@c+1
  7635  07A5  3188  2090  3187   	fcall	___lwtoft
  7636  07A8  0020               	movlb	0	; select bank0
  7637  07A9  0829               	movf	?___lwtoft,w
  7638  07AA  00B1               	movwf	___ftadd@f1
  7639  07AB  082A               	movf	?___lwtoft+1,w
  7640  07AC  00B2               	movwf	___ftadd@f1+1
  7641  07AD  082B               	movf	?___lwtoft+2,w
  7642  07AE  00B3               	movwf	___ftadd@f1+2
  7643  07AF  0846               	movf	getADCValue@adcSum,w
  7644  07B0  00B4               	movwf	___ftadd@f2
  7645  07B1  0847               	movf	getADCValue@adcSum+1,w
  7646  07B2  00B5               	movwf	___ftadd@f2+1
  7647  07B3  0848               	movf	getADCValue@adcSum+2,w
  7648  07B4  00B6               	movwf	___ftadd@f2+2
  7649  07B5  3182  22FC  3187   	fcall	___ftadd
  7650  07B8  0020               	movlb	0	; select bank0
  7651  07B9  0831               	movf	?___ftadd,w
  7652  07BA  00C6               	movwf	getADCValue@adcSum
  7653  07BB  0832               	movf	?___ftadd+1,w
  7654  07BC  00C7               	movwf	getADCValue@adcSum+1
  7655  07BD  0833               	movf	?___ftadd+2,w
  7656  07BE  00C8               	movwf	getADCValue@adcSum+2
  7657  07BF  2F72               	goto	l3145
  7658  07C0                     l3147:	
  7659                           
  7660                           ;main.c: 41: };main.c: 43: adcSum/= 255;
  7661  07C0  3000               	movlw	0
  7662  07C1  00A9               	movwf	___ftdiv@f2
  7663  07C2  307F               	movlw	127
  7664  07C3  00AA               	movwf	___ftdiv@f2+1
  7665  07C4  3043               	movlw	67
  7666  07C5  00AB               	movwf	___ftdiv@f2+2
  7667  07C6  0846               	movf	getADCValue@adcSum,w
  7668  07C7  00AC               	movwf	___ftdiv@f1
  7669  07C8  0847               	movf	getADCValue@adcSum+1,w
  7670  07C9  00AD               	movwf	___ftdiv@f1+1
  7671  07CA  0848               	movf	getADCValue@adcSum+2,w
  7672  07CB  00AE               	movwf	___ftdiv@f1+2
  7673  07CC  3186  260A  3187   	fcall	___ftdiv
  7674  07CF  0020               	movlb	0	; select bank0
  7675  07D0  0829               	movf	?___ftdiv,w
  7676  07D1  00C6               	movwf	getADCValue@adcSum
  7677  07D2  082A               	movf	?___ftdiv+1,w
  7678  07D3  00C7               	movwf	getADCValue@adcSum+1
  7679  07D4  082B               	movf	?___ftdiv+2,w
  7680  07D5  00C8               	movwf	getADCValue@adcSum+2
  7681                           
  7682                           ;main.c: 44: adcSum*= multiplier;
  7683  07D6  083E               	movf	getADCValue@multiplier,w
  7684  07D7  00A9               	movwf	___ftmul@f1
  7685  07D8  083F               	movf	getADCValue@multiplier+1,w
  7686  07D9  00AA               	movwf	___ftmul@f1+1
  7687  07DA  0840               	movf	getADCValue@multiplier+2,w
  7688  07DB  00AB               	movwf	___ftmul@f1+2
  7689  07DC  0846               	movf	getADCValue@adcSum,w
  7690  07DD  00AC               	movwf	___ftmul@f2
  7691  07DE  0847               	movf	getADCValue@adcSum+1,w
  7692  07DF  00AD               	movwf	___ftmul@f2+1
  7693  07E0  0848               	movf	getADCValue@adcSum+2,w
  7694  07E1  00AE               	movwf	___ftmul@f2+2
  7695  07E2  3184  24AC         	fcall	___ftmul
  7696  07E4  0020               	movlb	0	; select bank0
  7697  07E5  0829               	movf	?___ftmul,w
  7698  07E6  00C6               	movwf	getADCValue@adcSum
  7699  07E7  082A               	movf	?___ftmul+1,w
  7700  07E8  00C7               	movwf	getADCValue@adcSum+1
  7701  07E9  082B               	movf	?___ftmul+2,w
  7702  07EA  00C8               	movwf	getADCValue@adcSum+2
  7703                           
  7704                           ;main.c: 46: return adcSum;
  7705  07EB  0846               	movf	getADCValue@adcSum,w
  7706  07EC  00BE               	movwf	?_getADCValue
  7707  07ED  0847               	movf	getADCValue@adcSum+1,w
  7708  07EE  00BF               	movwf	?_getADCValue+1
  7709  07EF  0848               	movf	getADCValue@adcSum+2,w
  7710  07F0  00C0               	movwf	?_getADCValue+2
  7711  07F1  0008               	return
  7712  07F2                     __end_of_getADCValue:	
  7713                           
  7714                           	psect	text29
  7715  0890                     __ptext29:	
  7716 ;; *************** function ___lwtoft *****************
  7717 ;; Defined at:
  7718 ;;		line 28 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\lwtoft.c"
  7719 ;; Parameters:    Size  Location     Type
  7720 ;;  c               2    9[BANK0 ] unsigned int 
  7721 ;; Auto vars:     Size  Location     Type
  7722 ;;		None
  7723 ;; Return value:  Size  Location     Type
  7724 ;;                  3    9[BANK0 ] float 
  7725 ;; Registers used:
  7726 ;;		wreg, status,2, status,0, pclath, cstack
  7727 ;; Tracked objects:
  7728 ;;		On entry : 0/0
  7729 ;;		On exit  : 0/0
  7730 ;;		Unchanged: 0/0
  7731 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7732 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7733 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7734 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7735 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7736 ;;Total ram usage:        4 bytes
  7737 ;; Hardware stack levels used:    1
  7738 ;; Hardware stack levels required when called:    8
  7739 ;; This function calls:
  7740 ;;		___ftpack
  7741 ;; This function is called by:
  7742 ;;		_getADCValue
  7743 ;;		_main
  7744 ;; This function uses a non-reentrant model
  7745 ;;
  7746                           
  7747                           
  7748                           ;psect for function ___lwtoft
  7749  0890                     ___lwtoft:	
  7750                           
  7751                           ;incstack = 0
  7752                           ; Regs used in ___lwtoft: [wreg+status,2+status,0+pclath+cstack]
  7753  0890  0020               	movlb	0	; select bank0
  7754  0891  0829               	movf	___lwtoft@c,w
  7755  0892  00A1               	movwf	___ftpack@arg
  7756  0893  082A               	movf	___lwtoft@c+1,w
  7757  0894  00A2               	movwf	___ftpack@arg+1
  7758  0895  01A3               	clrf	___ftpack@arg+2
  7759  0896  308E               	movlw	142
  7760  0897  00AC               	movwf	??___lwtoft
  7761  0898  082C               	movf	??___lwtoft,w
  7762  0899  00A4               	movwf	___ftpack@exp
  7763  089A  01A5               	clrf	___ftpack@sign
  7764  089B  318E  267E         	fcall	___ftpack
  7765  089D  0020               	movlb	0	; select bank0
  7766  089E  0821               	movf	?___ftpack,w
  7767  089F  00A9               	movwf	?___lwtoft
  7768  08A0  0822               	movf	?___ftpack+1,w
  7769  08A1  00AA               	movwf	?___lwtoft+1
  7770  08A2  0823               	movf	?___ftpack+2,w
  7771  08A3  00AB               	movwf	?___lwtoft+2
  7772  08A4  0008               	return
  7773  08A5                     __end_of___lwtoft:	
  7774                           
  7775                           	psect	text30
  7776  0924                     __ptext30:	
  7777 ;; *************** function ___lbtoft *****************
  7778 ;; Defined at:
  7779 ;;		line 27 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\lbtoft.c"
  7780 ;; Parameters:    Size  Location     Type
  7781 ;;  c               1    wreg     unsigned char 
  7782 ;; Auto vars:     Size  Location     Type
  7783 ;;  c               1   16[BANK0 ] unsigned char 
  7784 ;; Return value:  Size  Location     Type
  7785 ;;                  3    9[BANK0 ] float 
  7786 ;; Registers used:
  7787 ;;		wreg, status,2, status,0, pclath, cstack
  7788 ;; Tracked objects:
  7789 ;;		On entry : 0/0
  7790 ;;		On exit  : 0/0
  7791 ;;		Unchanged: 0/0
  7792 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7793 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7794 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7795 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7796 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7797 ;;Total ram usage:        8 bytes
  7798 ;; Hardware stack levels used:    1
  7799 ;; Hardware stack levels required when called:    8
  7800 ;; This function calls:
  7801 ;;		___ftpack
  7802 ;; This function is called by:
  7803 ;;		_getADCValue
  7804 ;; This function uses a non-reentrant model
  7805 ;;
  7806                           
  7807                           
  7808                           ;psect for function ___lbtoft
  7809  0924                     ___lbtoft:	
  7810                           
  7811                           ;incstack = 0
  7812                           ; Regs used in ___lbtoft: [wreg+status,2+status,0+pclath+cstack]
  7813                           ;___lbtoft@c stored from wreg
  7814  0924  0020               	movlb	0	; select bank0
  7815  0925  00B0               	movwf	___lbtoft@c
  7816  0926  0830               	movf	___lbtoft@c,w
  7817  0927  00AC               	movwf	??___lbtoft
  7818  0928  01AD               	clrf	??___lbtoft+1
  7819  0929  01AE               	clrf	??___lbtoft+2
  7820  092A  082C               	movf	??___lbtoft,w
  7821  092B  00A1               	movwf	___ftpack@arg
  7822  092C  082D               	movf	??___lbtoft+1,w
  7823  092D  00A2               	movwf	___ftpack@arg+1
  7824  092E  082E               	movf	??___lbtoft+2,w
  7825  092F  00A3               	movwf	___ftpack@arg+2
  7826  0930  308E               	movlw	142
  7827  0931  00AF               	movwf	??___lbtoft+3
  7828  0932  082F               	movf	??___lbtoft+3,w
  7829  0933  00A4               	movwf	___ftpack@exp
  7830  0934  01A5               	clrf	___ftpack@sign
  7831  0935  318E  267E         	fcall	___ftpack
  7832  0937  0020               	movlb	0	; select bank0
  7833  0938  0821               	movf	?___ftpack,w
  7834  0939  00A9               	movwf	?___lbtoft
  7835  093A  0822               	movf	?___ftpack+1,w
  7836  093B  00AA               	movwf	?___lbtoft+1
  7837  093C  0823               	movf	?___ftpack+2,w
  7838  093D  00AB               	movwf	?___lbtoft+2
  7839  093E  0008               	return
  7840  093F                     __end_of___lbtoft:	
  7841                           
  7842                           	psect	text31
  7843  04AC                     __ptext31:	
  7844 ;; *************** function ___ftmul *****************
  7845 ;; Defined at:
  7846 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\ftmul.c"
  7847 ;; Parameters:    Size  Location     Type
  7848 ;;  f1              3    9[BANK0 ] float 
  7849 ;;  f2              3   12[BANK0 ] float 
  7850 ;; Auto vars:     Size  Location     Type
  7851 ;;  f3_as_produc    3   20[BANK0 ] unsigned um
  7852 ;;  sign            1   24[BANK0 ] unsigned char 
  7853 ;;  cntr            1   23[BANK0 ] unsigned char 
  7854 ;;  exp             1   19[BANK0 ] unsigned char 
  7855 ;; Return value:  Size  Location     Type
  7856 ;;                  3    9[BANK0 ] float 
  7857 ;; Registers used:
  7858 ;;		wreg, status,2, status,0, pclath, cstack
  7859 ;; Tracked objects:
  7860 ;;		On entry : 0/0
  7861 ;;		On exit  : 0/0
  7862 ;;		Unchanged: 0/0
  7863 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7864 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7865 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7866 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7867 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7868 ;;Total ram usage:       16 bytes
  7869 ;; Hardware stack levels used:    1
  7870 ;; Hardware stack levels required when called:    8
  7871 ;; This function calls:
  7872 ;;		___ftpack
  7873 ;; This function is called by:
  7874 ;;		_getADCValue
  7875 ;;		_ftoa
  7876 ;; This function uses a non-reentrant model
  7877 ;;
  7878                           
  7879                           
  7880                           ;psect for function ___ftmul
  7881  04AC                     ___ftmul:	
  7882                           
  7883                           ;incstack = 0
  7884                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
  7885  04AC  0020               	movlb	0	; select bank0
  7886  04AD  0829               	movf	___ftmul@f1,w
  7887  04AE  00AF               	movwf	??___ftmul
  7888  04AF  082A               	movf	___ftmul@f1+1,w
  7889  04B0  00B0               	movwf	??___ftmul+1
  7890  04B1  082B               	movf	___ftmul@f1+2,w
  7891  04B2  00B1               	movwf	??___ftmul+2
  7892  04B3  1003               	clrc
  7893  04B4  0D30               	rlf	??___ftmul+1,w
  7894  04B5  0D31               	rlf	??___ftmul+2,w
  7895  04B6  00B2               	movwf	??___ftmul+3
  7896  04B7  0832               	movf	??___ftmul+3,w
  7897  04B8  00B3               	movwf	___ftmul@exp
  7898  04B9  0833               	movf	___ftmul@exp,w
  7899  04BA  1D03               	btfss	3,2
  7900  04BB  2CC3               	goto	l2735
  7901  04BC  3000               	movlw	0
  7902  04BD  00A9               	movwf	?___ftmul
  7903  04BE  3000               	movlw	0
  7904  04BF  00AA               	movwf	?___ftmul+1
  7905  04C0  3000               	movlw	0
  7906  04C1  00AB               	movwf	?___ftmul+2
  7907  04C2  0008               	return
  7908  04C3                     l2735:	
  7909  04C3  082C               	movf	___ftmul@f2,w
  7910  04C4  00AF               	movwf	??___ftmul
  7911  04C5  082D               	movf	___ftmul@f2+1,w
  7912  04C6  00B0               	movwf	??___ftmul+1
  7913  04C7  082E               	movf	___ftmul@f2+2,w
  7914  04C8  00B1               	movwf	??___ftmul+2
  7915  04C9  1003               	clrc
  7916  04CA  0D30               	rlf	??___ftmul+1,w
  7917  04CB  0D31               	rlf	??___ftmul+2,w
  7918  04CC  00B2               	movwf	??___ftmul+3
  7919  04CD  0832               	movf	??___ftmul+3,w
  7920  04CE  00B8               	movwf	___ftmul@sign
  7921  04CF  0838               	movf	___ftmul@sign,w
  7922  04D0  1D03               	btfss	3,2
  7923  04D1  2CD9               	goto	l2741
  7924  04D2  3000               	movlw	0
  7925  04D3  00A9               	movwf	?___ftmul
  7926  04D4  3000               	movlw	0
  7927  04D5  00AA               	movwf	?___ftmul+1
  7928  04D6  3000               	movlw	0
  7929  04D7  00AB               	movwf	?___ftmul+2
  7930  04D8  0008               	return
  7931  04D9                     l2741:	
  7932  04D9  0838               	movf	___ftmul@sign,w
  7933  04DA  3E7B               	addlw	123
  7934  04DB  00AF               	movwf	??___ftmul
  7935  04DC  082F               	movf	??___ftmul,w
  7936  04DD  07B3               	addwf	___ftmul@exp,f
  7937  04DE  0829               	movf	___ftmul@f1,w
  7938  04DF  00AF               	movwf	??___ftmul
  7939  04E0  082A               	movf	___ftmul@f1+1,w
  7940  04E1  00B0               	movwf	??___ftmul+1
  7941  04E2  082B               	movf	___ftmul@f1+2,w
  7942  04E3  00B1               	movwf	??___ftmul+2
  7943  04E4  3010               	movlw	16
  7944  04E5                     u2495:	
  7945  04E5  36B1               	lsrf	??___ftmul+2,f
  7946  04E6  0CB0               	rrf	??___ftmul+1,f
  7947  04E7  0CAF               	rrf	??___ftmul,f
  7948  04E8  0B89               	decfsz	9,f
  7949  04E9  2CE5               	goto	u2495
  7950  04EA  082F               	movf	??___ftmul,w
  7951  04EB  00B2               	movwf	??___ftmul+3
  7952  04EC  0832               	movf	??___ftmul+3,w
  7953  04ED  00B8               	movwf	___ftmul@sign
  7954  04EE  082C               	movf	___ftmul@f2,w
  7955  04EF  00AF               	movwf	??___ftmul
  7956  04F0  082D               	movf	___ftmul@f2+1,w
  7957  04F1  00B0               	movwf	??___ftmul+1
  7958  04F2  082E               	movf	___ftmul@f2+2,w
  7959  04F3  00B1               	movwf	??___ftmul+2
  7960  04F4  3010               	movlw	16
  7961  04F5                     u2505:	
  7962  04F5  36B1               	lsrf	??___ftmul+2,f
  7963  04F6  0CB0               	rrf	??___ftmul+1,f
  7964  04F7  0CAF               	rrf	??___ftmul,f
  7965  04F8  0B89               	decfsz	9,f
  7966  04F9  2CF5               	goto	u2505
  7967  04FA  082F               	movf	??___ftmul,w
  7968  04FB  00B2               	movwf	??___ftmul+3
  7969  04FC  0832               	movf	??___ftmul+3,w
  7970  04FD  06B8               	xorwf	___ftmul@sign,f
  7971  04FE  3080               	movlw	128
  7972  04FF  00AF               	movwf	??___ftmul
  7973  0500  082F               	movf	??___ftmul,w
  7974  0501  05B8               	andwf	___ftmul@sign,f
  7975  0502  17AA               	bsf	___ftmul@f1+1,7
  7976  0503  17AD               	bsf	___ftmul@f2+1,7
  7977  0504  30FF               	movlw	255
  7978  0505  05AC               	andwf	___ftmul@f2,f
  7979  0506  30FF               	movlw	255
  7980  0507  05AD               	andwf	___ftmul@f2+1,f
  7981  0508  3000               	movlw	0
  7982  0509  05AE               	andwf	___ftmul@f2+2,f
  7983  050A  3000               	movlw	0
  7984  050B  00B4               	movwf	___ftmul@f3_as_product
  7985  050C  3000               	movlw	0
  7986  050D  00B5               	movwf	___ftmul@f3_as_product+1
  7987  050E  3000               	movlw	0
  7988  050F  00B6               	movwf	___ftmul@f3_as_product+2
  7989  0510  3007               	movlw	7
  7990  0511  00AF               	movwf	??___ftmul
  7991  0512  082F               	movf	??___ftmul,w
  7992  0513  00B7               	movwf	___ftmul@cntr
  7993  0514                     l2753:	
  7994  0514  1C29               	btfss	___ftmul@f1,0
  7995  0515  2D1C               	goto	l2757
  7996  0516  082C               	movf	___ftmul@f2,w
  7997  0517  07B4               	addwf	___ftmul@f3_as_product,f
  7998  0518  082D               	movf	___ftmul@f2+1,w
  7999  0519  3DB5               	addwfc	___ftmul@f3_as_product+1,f
  8000  051A  082E               	movf	___ftmul@f2+2,w
  8001  051B  3DB6               	addwfc	___ftmul@f3_as_product+2,f
  8002  051C                     l2757:	
  8003  051C  3001               	movlw	1
  8004  051D                     u2525:	
  8005  051D  36AB               	lsrf	___ftmul@f1+2,f
  8006  051E  0CAA               	rrf	___ftmul@f1+1,f
  8007  051F  0CA9               	rrf	___ftmul@f1,f
  8008  0520  0B89               	decfsz	9,f
  8009  0521  2D1D               	goto	u2525
  8010  0522  3001               	movlw	1
  8011  0523                     u2535:	
  8012  0523  35AC               	lslf	___ftmul@f2,f
  8013  0524  0DAD               	rlf	___ftmul@f2+1,f
  8014  0525  0DAE               	rlf	___ftmul@f2+2,f
  8015  0526  0B89               	decfsz	9,f
  8016  0527  2D23               	goto	u2535
  8017  0528  3001               	movlw	1
  8018  0529  02B7               	subwf	___ftmul@cntr,f
  8019  052A  1D03               	btfss	3,2
  8020  052B  2D14               	goto	l2753
  8021  052C  3009               	movlw	9
  8022  052D  00AF               	movwf	??___ftmul
  8023  052E  082F               	movf	??___ftmul,w
  8024  052F  00B7               	movwf	___ftmul@cntr
  8025  0530                     l2765:	
  8026  0530  1C29               	btfss	___ftmul@f1,0
  8027  0531  2D38               	goto	l2769
  8028  0532  082C               	movf	___ftmul@f2,w
  8029  0533  07B4               	addwf	___ftmul@f3_as_product,f
  8030  0534  082D               	movf	___ftmul@f2+1,w
  8031  0535  3DB5               	addwfc	___ftmul@f3_as_product+1,f
  8032  0536  082E               	movf	___ftmul@f2+2,w
  8033  0537  3DB6               	addwfc	___ftmul@f3_as_product+2,f
  8034  0538                     l2769:	
  8035  0538  3001               	movlw	1
  8036  0539                     u2565:	
  8037  0539  36AB               	lsrf	___ftmul@f1+2,f
  8038  053A  0CAA               	rrf	___ftmul@f1+1,f
  8039  053B  0CA9               	rrf	___ftmul@f1,f
  8040  053C  0B89               	decfsz	9,f
  8041  053D  2D39               	goto	u2565
  8042  053E  3001               	movlw	1
  8043  053F                     u2575:	
  8044  053F  36B6               	lsrf	___ftmul@f3_as_product+2,f
  8045  0540  0CB5               	rrf	___ftmul@f3_as_product+1,f
  8046  0541  0CB4               	rrf	___ftmul@f3_as_product,f
  8047  0542  0B89               	decfsz	9,f
  8048  0543  2D3F               	goto	u2575
  8049  0544  3001               	movlw	1
  8050  0545  02B7               	subwf	___ftmul@cntr,f
  8051  0546  1D03               	btfss	3,2
  8052  0547  2D30               	goto	l2765
  8053  0548  0834               	movf	___ftmul@f3_as_product,w
  8054  0549  00A1               	movwf	___ftpack@arg
  8055  054A  0835               	movf	___ftmul@f3_as_product+1,w
  8056  054B  00A2               	movwf	___ftpack@arg+1
  8057  054C  0836               	movf	___ftmul@f3_as_product+2,w
  8058  054D  00A3               	movwf	___ftpack@arg+2
  8059  054E  0833               	movf	___ftmul@exp,w
  8060  054F  00AF               	movwf	??___ftmul
  8061  0550  082F               	movf	??___ftmul,w
  8062  0551  00A4               	movwf	___ftpack@exp
  8063  0552  0838               	movf	___ftmul@sign,w
  8064  0553  00B0               	movwf	??___ftmul+1
  8065  0554  0830               	movf	??___ftmul+1,w
  8066  0555  00A5               	movwf	___ftpack@sign
  8067  0556  318E  267E         	fcall	___ftpack
  8068  0558  0020               	movlb	0	; select bank0
  8069  0559  0821               	movf	?___ftpack,w
  8070  055A  00A9               	movwf	?___ftmul
  8071  055B  0822               	movf	?___ftpack+1,w
  8072  055C  00AA               	movwf	?___ftmul+1
  8073  055D  0823               	movf	?___ftpack+2,w
  8074  055E  00AB               	movwf	?___ftmul+2
  8075  055F  0008               	return
  8076  0560                     __end_of___ftmul:	
  8077                           
  8078                           	psect	text32
  8079  060A                     __ptext32:	
  8080 ;; *************** function ___ftdiv *****************
  8081 ;; Defined at:
  8082 ;;		line 56 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\ftdiv.c"
  8083 ;; Parameters:    Size  Location     Type
  8084 ;;  f2              3    9[BANK0 ] float 
  8085 ;;  f1              3   12[BANK0 ] float 
  8086 ;; Auto vars:     Size  Location     Type
  8087 ;;  f3              3   20[BANK0 ] float 
  8088 ;;  sign            1   24[BANK0 ] unsigned char 
  8089 ;;  exp             1   23[BANK0 ] unsigned char 
  8090 ;;  cntr            1   19[BANK0 ] unsigned char 
  8091 ;; Return value:  Size  Location     Type
  8092 ;;                  3    9[BANK0 ] float 
  8093 ;; Registers used:
  8094 ;;		wreg, status,2, status,0, pclath, cstack
  8095 ;; Tracked objects:
  8096 ;;		On entry : 0/0
  8097 ;;		On exit  : 0/0
  8098 ;;		Unchanged: 0/0
  8099 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8100 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8101 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8102 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8103 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8104 ;;Total ram usage:       16 bytes
  8105 ;; Hardware stack levels used:    1
  8106 ;; Hardware stack levels required when called:    8
  8107 ;; This function calls:
  8108 ;;		___ftpack
  8109 ;; This function is called by:
  8110 ;;		_getADCValue
  8111 ;; This function uses a non-reentrant model
  8112 ;;
  8113                           
  8114                           
  8115                           ;psect for function ___ftdiv
  8116  060A                     ___ftdiv:	
  8117                           
  8118                           ;incstack = 0
  8119                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
  8120  060A  0020               	movlb	0	; select bank0
  8121  060B  082C               	movf	___ftdiv@f1,w
  8122  060C  00AF               	movwf	??___ftdiv
  8123  060D  082D               	movf	___ftdiv@f1+1,w
  8124  060E  00B0               	movwf	??___ftdiv+1
  8125  060F  082E               	movf	___ftdiv@f1+2,w
  8126  0610  00B1               	movwf	??___ftdiv+2
  8127  0611  1003               	clrc
  8128  0612  0D30               	rlf	??___ftdiv+1,w
  8129  0613  0D31               	rlf	??___ftdiv+2,w
  8130  0614  00B2               	movwf	??___ftdiv+3
  8131  0615  0832               	movf	??___ftdiv+3,w
  8132  0616  00B7               	movwf	___ftdiv@exp
  8133  0617  0837               	movf	___ftdiv@exp,w
  8134  0618  1D03               	btfss	3,2
  8135  0619  2E21               	goto	l3007
  8136  061A  3000               	movlw	0
  8137  061B  00A9               	movwf	?___ftdiv
  8138  061C  3000               	movlw	0
  8139  061D  00AA               	movwf	?___ftdiv+1
  8140  061E  3000               	movlw	0
  8141  061F  00AB               	movwf	?___ftdiv+2
  8142  0620  0008               	return
  8143  0621                     l3007:	
  8144  0621  0829               	movf	___ftdiv@f2,w
  8145  0622  00AF               	movwf	??___ftdiv
  8146  0623  082A               	movf	___ftdiv@f2+1,w
  8147  0624  00B0               	movwf	??___ftdiv+1
  8148  0625  082B               	movf	___ftdiv@f2+2,w
  8149  0626  00B1               	movwf	??___ftdiv+2
  8150  0627  1003               	clrc
  8151  0628  0D30               	rlf	??___ftdiv+1,w
  8152  0629  0D31               	rlf	??___ftdiv+2,w
  8153  062A  00B2               	movwf	??___ftdiv+3
  8154  062B  0832               	movf	??___ftdiv+3,w
  8155  062C  00B8               	movwf	___ftdiv@sign
  8156  062D  0838               	movf	___ftdiv@sign,w
  8157  062E  1D03               	btfss	3,2
  8158  062F  2E37               	goto	l3013
  8159  0630  3000               	movlw	0
  8160  0631  00A9               	movwf	?___ftdiv
  8161  0632  3000               	movlw	0
  8162  0633  00AA               	movwf	?___ftdiv+1
  8163  0634  3000               	movlw	0
  8164  0635  00AB               	movwf	?___ftdiv+2
  8165  0636  0008               	return
  8166  0637                     l3013:	
  8167  0637  3000               	movlw	0
  8168  0638  00B4               	movwf	___ftdiv@f3
  8169  0639  3000               	movlw	0
  8170  063A  00B5               	movwf	___ftdiv@f3+1
  8171  063B  3000               	movlw	0
  8172  063C  00B6               	movwf	___ftdiv@f3+2
  8173  063D  3089               	movlw	137
  8174  063E  0738               	addwf	___ftdiv@sign,w
  8175  063F  00AF               	movwf	??___ftdiv
  8176  0640  082F               	movf	??___ftdiv,w
  8177  0641  02B7               	subwf	___ftdiv@exp,f
  8178  0642  082C               	movf	___ftdiv@f1,w
  8179  0643  00AF               	movwf	??___ftdiv
  8180  0644  082D               	movf	___ftdiv@f1+1,w
  8181  0645  00B0               	movwf	??___ftdiv+1
  8182  0646  082E               	movf	___ftdiv@f1+2,w
  8183  0647  00B1               	movwf	??___ftdiv+2
  8184  0648  3010               	movlw	16
  8185  0649                     u2925:	
  8186  0649  36B1               	lsrf	??___ftdiv+2,f
  8187  064A  0CB0               	rrf	??___ftdiv+1,f
  8188  064B  0CAF               	rrf	??___ftdiv,f
  8189  064C  0B89               	decfsz	9,f
  8190  064D  2E49               	goto	u2925
  8191  064E  082F               	movf	??___ftdiv,w
  8192  064F  00B2               	movwf	??___ftdiv+3
  8193  0650  0832               	movf	??___ftdiv+3,w
  8194  0651  00B8               	movwf	___ftdiv@sign
  8195  0652  0829               	movf	___ftdiv@f2,w
  8196  0653  00AF               	movwf	??___ftdiv
  8197  0654  082A               	movf	___ftdiv@f2+1,w
  8198  0655  00B0               	movwf	??___ftdiv+1
  8199  0656  082B               	movf	___ftdiv@f2+2,w
  8200  0657  00B1               	movwf	??___ftdiv+2
  8201  0658  3010               	movlw	16
  8202  0659                     u2935:	
  8203  0659  36B1               	lsrf	??___ftdiv+2,f
  8204  065A  0CB0               	rrf	??___ftdiv+1,f
  8205  065B  0CAF               	rrf	??___ftdiv,f
  8206  065C  0B89               	decfsz	9,f
  8207  065D  2E59               	goto	u2935
  8208  065E  082F               	movf	??___ftdiv,w
  8209  065F  00B2               	movwf	??___ftdiv+3
  8210  0660  0832               	movf	??___ftdiv+3,w
  8211  0661  06B8               	xorwf	___ftdiv@sign,f
  8212  0662  3080               	movlw	128
  8213  0663  00AF               	movwf	??___ftdiv
  8214  0664  082F               	movf	??___ftdiv,w
  8215  0665  05B8               	andwf	___ftdiv@sign,f
  8216  0666  17AD               	bsf	___ftdiv@f1+1,7
  8217  0667  30FF               	movlw	255
  8218  0668  05AC               	andwf	___ftdiv@f1,f
  8219  0669  30FF               	movlw	255
  8220  066A  05AD               	andwf	___ftdiv@f1+1,f
  8221  066B  3000               	movlw	0
  8222  066C  05AE               	andwf	___ftdiv@f1+2,f
  8223  066D  17AA               	bsf	___ftdiv@f2+1,7
  8224  066E  30FF               	movlw	255
  8225  066F  05A9               	andwf	___ftdiv@f2,f
  8226  0670  30FF               	movlw	255
  8227  0671  05AA               	andwf	___ftdiv@f2+1,f
  8228  0672  3000               	movlw	0
  8229  0673  05AB               	andwf	___ftdiv@f2+2,f
  8230  0674  3018               	movlw	24
  8231  0675  00AF               	movwf	??___ftdiv
  8232  0676  082F               	movf	??___ftdiv,w
  8233  0677  00B3               	movwf	___ftdiv@cntr
  8234  0678                     l3027:	
  8235  0678  3001               	movlw	1
  8236  0679                     u2945:	
  8237  0679  35B4               	lslf	___ftdiv@f3,f
  8238  067A  0DB5               	rlf	___ftdiv@f3+1,f
  8239  067B  0DB6               	rlf	___ftdiv@f3+2,f
  8240  067C  0B89               	decfsz	9,f
  8241  067D  2E79               	goto	u2945
  8242  067E  082B               	movf	___ftdiv@f2+2,w
  8243  067F  022E               	subwf	___ftdiv@f1+2,w
  8244  0680  1D03               	skipz
  8245  0681  2E88               	goto	u2955
  8246  0682  082A               	movf	___ftdiv@f2+1,w
  8247  0683  022D               	subwf	___ftdiv@f1+1,w
  8248  0684  1D03               	skipz
  8249  0685  2E88               	goto	u2955
  8250  0686  0829               	movf	___ftdiv@f2,w
  8251  0687  022C               	subwf	___ftdiv@f1,w
  8252  0688                     u2955:	
  8253  0688  1C03               	skipc
  8254  0689  2E91               	goto	l3035
  8255  068A  0829               	movf	___ftdiv@f2,w
  8256  068B  02AC               	subwf	___ftdiv@f1,f
  8257  068C  082A               	movf	___ftdiv@f2+1,w
  8258  068D  3BAD               	subwfb	___ftdiv@f1+1,f
  8259  068E  082B               	movf	___ftdiv@f2+2,w
  8260  068F  3BAE               	subwfb	___ftdiv@f1+2,f
  8261  0690  1434               	bsf	___ftdiv@f3,0
  8262  0691                     l3035:	
  8263  0691  3001               	movlw	1
  8264  0692                     u2965:	
  8265  0692  35AC               	lslf	___ftdiv@f1,f
  8266  0693  0DAD               	rlf	___ftdiv@f1+1,f
  8267  0694  0DAE               	rlf	___ftdiv@f1+2,f
  8268  0695  0B89               	decfsz	9,f
  8269  0696  2E92               	goto	u2965
  8270  0697  3001               	movlw	1
  8271  0698  02B3               	subwf	___ftdiv@cntr,f
  8272  0699  1D03               	btfss	3,2
  8273  069A  2E78               	goto	l3027
  8274  069B  0834               	movf	___ftdiv@f3,w
  8275  069C  00A1               	movwf	___ftpack@arg
  8276  069D  0835               	movf	___ftdiv@f3+1,w
  8277  069E  00A2               	movwf	___ftpack@arg+1
  8278  069F  0836               	movf	___ftdiv@f3+2,w
  8279  06A0  00A3               	movwf	___ftpack@arg+2
  8280  06A1  0837               	movf	___ftdiv@exp,w
  8281  06A2  00AF               	movwf	??___ftdiv
  8282  06A3  082F               	movf	??___ftdiv,w
  8283  06A4  00A4               	movwf	___ftpack@exp
  8284  06A5  0838               	movf	___ftdiv@sign,w
  8285  06A6  00B0               	movwf	??___ftdiv+1
  8286  06A7  0830               	movf	??___ftdiv+1,w
  8287  06A8  00A5               	movwf	___ftpack@sign
  8288  06A9  318E  267E         	fcall	___ftpack
  8289  06AB  0020               	movlb	0	; select bank0
  8290  06AC  0821               	movf	?___ftpack,w
  8291  06AD  00A9               	movwf	?___ftdiv
  8292  06AE  0822               	movf	?___ftpack+1,w
  8293  06AF  00AA               	movwf	?___ftdiv+1
  8294  06B0  0823               	movf	?___ftpack+2,w
  8295  06B1  00AB               	movwf	?___ftdiv+2
  8296  06B2  0008               	return
  8297  06B3                     __end_of___ftdiv:	
  8298                           
  8299                           	psect	text33
  8300  02FC                     __ptext33:	
  8301 ;; *************** function ___ftadd *****************
  8302 ;; Defined at:
  8303 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\ftadd.c"
  8304 ;; Parameters:    Size  Location     Type
  8305 ;;  f1              3   17[BANK0 ] float 
  8306 ;;  f2              3   20[BANK0 ] float 
  8307 ;; Auto vars:     Size  Location     Type
  8308 ;;  exp1            1   29[BANK0 ] unsigned char 
  8309 ;;  exp2            1   28[BANK0 ] unsigned char 
  8310 ;;  sign            1   27[BANK0 ] unsigned char 
  8311 ;; Return value:  Size  Location     Type
  8312 ;;                  3   17[BANK0 ] float 
  8313 ;; Registers used:
  8314 ;;		wreg, status,2, status,0, pclath, cstack
  8315 ;; Tracked objects:
  8316 ;;		On entry : 0/0
  8317 ;;		On exit  : 0/0
  8318 ;;		Unchanged: 0/0
  8319 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8320 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8321 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8322 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8323 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8324 ;;Total ram usage:       13 bytes
  8325 ;; Hardware stack levels used:    1
  8326 ;; Hardware stack levels required when called:    8
  8327 ;; This function calls:
  8328 ;;		___ftpack
  8329 ;; This function is called by:
  8330 ;;		_getADCValue
  8331 ;;		_loop
  8332 ;;		___ftsub
  8333 ;; This function uses a non-reentrant model
  8334 ;;
  8335                           
  8336                           
  8337                           ;psect for function ___ftadd
  8338  02FC                     ___ftadd:	
  8339                           
  8340                           ;incstack = 0
  8341                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
  8342  02FC  0020               	movlb	0	; select bank0
  8343  02FD  0831               	movf	___ftadd@f1,w
  8344  02FE  00B7               	movwf	??___ftadd
  8345  02FF  0832               	movf	___ftadd@f1+1,w
  8346  0300  00B8               	movwf	??___ftadd+1
  8347  0301  0833               	movf	___ftadd@f1+2,w
  8348  0302  00B9               	movwf	??___ftadd+2
  8349  0303  1003               	clrc
  8350  0304  0D38               	rlf	??___ftadd+1,w
  8351  0305  0D39               	rlf	??___ftadd+2,w
  8352  0306  00BA               	movwf	??___ftadd+3
  8353  0307  083A               	movf	??___ftadd+3,w
  8354  0308  00BD               	movwf	___ftadd@exp1
  8355  0309  0834               	movf	___ftadd@f2,w
  8356  030A  00B7               	movwf	??___ftadd
  8357  030B  0835               	movf	___ftadd@f2+1,w
  8358  030C  00B8               	movwf	??___ftadd+1
  8359  030D  0836               	movf	___ftadd@f2+2,w
  8360  030E  00B9               	movwf	??___ftadd+2
  8361  030F  1003               	clrc
  8362  0310  0D38               	rlf	??___ftadd+1,w
  8363  0311  0D39               	rlf	??___ftadd+2,w
  8364  0312  00BA               	movwf	??___ftadd+3
  8365  0313  083A               	movf	??___ftadd+3,w
  8366  0314  00BC               	movwf	___ftadd@exp2
  8367  0315  083D               	movf	___ftadd@exp1,w
  8368  0316  1903               	btfsc	3,2
  8369  0317  2B24               	goto	l2435
  8370  0318  083C               	movf	___ftadd@exp2,w
  8371  0319  023D               	subwf	___ftadd@exp1,w
  8372  031A  1803               	skipnc
  8373  031B  2B2B               	goto	l2439
  8374  031C  033D               	decf	___ftadd@exp1,w
  8375  031D  3AFF               	xorlw	255
  8376  031E  073C               	addwf	___ftadd@exp2,w
  8377  031F  00B7               	movwf	??___ftadd
  8378  0320  3019               	movlw	25
  8379  0321  0237               	subwf	??___ftadd,w
  8380  0322  1C03               	skipc
  8381  0323  2B2B               	goto	l2439
  8382  0324                     l2435:	
  8383  0324  0834               	movf	___ftadd@f2,w
  8384  0325  00B1               	movwf	?___ftadd
  8385  0326  0835               	movf	___ftadd@f2+1,w
  8386  0327  00B2               	movwf	?___ftadd+1
  8387  0328  0836               	movf	___ftadd@f2+2,w
  8388  0329  00B3               	movwf	?___ftadd+2
  8389  032A  0008               	return
  8390  032B                     l2439:	
  8391  032B  083C               	movf	___ftadd@exp2,w
  8392  032C  1903               	btfsc	3,2
  8393  032D  0008               	return
  8394  032E  083D               	movf	___ftadd@exp1,w
  8395  032F  023C               	subwf	___ftadd@exp2,w
  8396  0330  1803               	skipnc
  8397  0331  2B3A               	goto	l2445
  8398  0332  033C               	decf	___ftadd@exp2,w
  8399  0333  3AFF               	xorlw	255
  8400  0334  073D               	addwf	___ftadd@exp1,w
  8401  0335  00B7               	movwf	??___ftadd
  8402  0336  3019               	movlw	25
  8403  0337  0237               	subwf	??___ftadd,w
  8404  0338  1803               	btfsc	3,0
  8405  0339  0008               	return
  8406  033A                     l2445:	
  8407  033A  3006               	movlw	6
  8408  033B  00B7               	movwf	??___ftadd
  8409  033C  0837               	movf	??___ftadd,w
  8410  033D  00BB               	movwf	___ftadd@sign
  8411  033E  1BB3               	btfsc	___ftadd@f1+2,7
  8412  033F  17BB               	bsf	___ftadd@sign,7
  8413  0340  1BB6               	btfsc	___ftadd@f2+2,7
  8414  0341  173B               	bsf	___ftadd@sign,6
  8415  0342  17B2               	bsf	___ftadd@f1+1,7
  8416  0343  30FF               	movlw	255
  8417  0344  05B1               	andwf	___ftadd@f1,f
  8418  0345  30FF               	movlw	255
  8419  0346  05B2               	andwf	___ftadd@f1+1,f
  8420  0347  3000               	movlw	0
  8421  0348  05B3               	andwf	___ftadd@f1+2,f
  8422  0349  17B5               	bsf	___ftadd@f2+1,7
  8423  034A  30FF               	movlw	255
  8424  034B  05B4               	andwf	___ftadd@f2,f
  8425  034C  30FF               	movlw	255
  8426  034D  05B5               	andwf	___ftadd@f2+1,f
  8427  034E  3000               	movlw	0
  8428  034F  05B6               	andwf	___ftadd@f2+2,f
  8429  0350  083C               	movf	___ftadd@exp2,w
  8430  0351  023D               	subwf	___ftadd@exp1,w
  8431  0352  1803               	skipnc
  8432  0353  2B76               	goto	l2467
  8433  0354                     l2457:	
  8434  0354  3001               	movlw	1
  8435  0355                     u2045:	
  8436  0355  35B4               	lslf	___ftadd@f2,f
  8437  0356  0DB5               	rlf	___ftadd@f2+1,f
  8438  0357  0DB6               	rlf	___ftadd@f2+2,f
  8439  0358  0B89               	decfsz	9,f
  8440  0359  2B55               	goto	u2045
  8441  035A  3001               	movlw	1
  8442  035B  02BC               	subwf	___ftadd@exp2,f
  8443  035C  083C               	movf	___ftadd@exp2,w
  8444  035D  063D               	xorwf	___ftadd@exp1,w
  8445  035E  1903               	skipnz
  8446  035F  2B71               	goto	l2465
  8447  0360  3001               	movlw	1
  8448  0361  02BB               	subwf	___ftadd@sign,f
  8449  0362  083B               	movf	___ftadd@sign,w
  8450  0363  3907               	andlw	7
  8451  0364  1903               	btfsc	3,2
  8452  0365  2B71               	goto	l2465
  8453  0366  2B54               	goto	l2457
  8454  0367                     l2463:	
  8455  0367  3001               	movlw	1
  8456  0368                     u2075:	
  8457  0368  36B3               	lsrf	___ftadd@f1+2,f
  8458  0369  0CB2               	rrf	___ftadd@f1+1,f
  8459  036A  0CB1               	rrf	___ftadd@f1,f
  8460  036B  0B89               	decfsz	9,f
  8461  036C  2B68               	goto	u2075
  8462  036D  3001               	movlw	1
  8463  036E  00B7               	movwf	??___ftadd
  8464  036F  0837               	movf	??___ftadd,w
  8465  0370  07BD               	addwf	___ftadd@exp1,f
  8466  0371                     l2465:	
  8467  0371  083D               	movf	___ftadd@exp1,w
  8468  0372  063C               	xorwf	___ftadd@exp2,w
  8469  0373  1903               	btfsc	3,2
  8470  0374  2B9B               	goto	l749
  8471  0375  2B67               	goto	l2463
  8472  0376                     l2467:	
  8473  0376  083D               	movf	___ftadd@exp1,w
  8474  0377  023C               	subwf	___ftadd@exp2,w
  8475  0378  1803               	skipnc
  8476  0379  2B9B               	goto	l749
  8477  037A                     l2469:	
  8478  037A  3001               	movlw	1
  8479  037B                     u2105:	
  8480  037B  35B1               	lslf	___ftadd@f1,f
  8481  037C  0DB2               	rlf	___ftadd@f1+1,f
  8482  037D  0DB3               	rlf	___ftadd@f1+2,f
  8483  037E  0B89               	decfsz	9,f
  8484  037F  2B7B               	goto	u2105
  8485  0380  3001               	movlw	1
  8486  0381  02BD               	subwf	___ftadd@exp1,f
  8487  0382  083C               	movf	___ftadd@exp2,w
  8488  0383  063D               	xorwf	___ftadd@exp1,w
  8489  0384  1903               	skipnz
  8490  0385  2B97               	goto	l2477
  8491  0386  3001               	movlw	1
  8492  0387  02BB               	subwf	___ftadd@sign,f
  8493  0388  083B               	movf	___ftadd@sign,w
  8494  0389  3907               	andlw	7
  8495  038A  1903               	btfsc	3,2
  8496  038B  2B97               	goto	l2477
  8497  038C  2B7A               	goto	l2469
  8498  038D                     l2475:	
  8499  038D  3001               	movlw	1
  8500  038E                     u2135:	
  8501  038E  36B6               	lsrf	___ftadd@f2+2,f
  8502  038F  0CB5               	rrf	___ftadd@f2+1,f
  8503  0390  0CB4               	rrf	___ftadd@f2,f
  8504  0391  0B89               	decfsz	9,f
  8505  0392  2B8E               	goto	u2135
  8506  0393  3001               	movlw	1
  8507  0394  00B7               	movwf	??___ftadd
  8508  0395  0837               	movf	??___ftadd,w
  8509  0396  07BC               	addwf	___ftadd@exp2,f
  8510  0397                     l2477:	
  8511  0397  083D               	movf	___ftadd@exp1,w
  8512  0398  063C               	xorwf	___ftadd@exp2,w
  8513  0399  1D03               	skipz
  8514  039A  2B8D               	goto	l2475
  8515  039B                     l749:	
  8516  039B  1FBB               	btfss	___ftadd@sign,7
  8517  039C  2BAD               	goto	l2481
  8518  039D  30FF               	movlw	255
  8519  039E  06B1               	xorwf	___ftadd@f1,f
  8520  039F  30FF               	movlw	255
  8521  03A0  06B2               	xorwf	___ftadd@f1+1,f
  8522  03A1  30FF               	movlw	255
  8523  03A2  06B3               	xorwf	___ftadd@f1+2,f
  8524  03A3  3001               	movlw	1
  8525  03A4  07B1               	addwf	___ftadd@f1,f
  8526  03A5  3000               	movlw	0
  8527  03A6  1803               	skipnc
  8528  03A7  3001               	movlw	1
  8529  03A8  07B2               	addwf	___ftadd@f1+1,f
  8530  03A9  3000               	movlw	0
  8531  03AA  1803               	skipnc
  8532  03AB  3001               	movlw	1
  8533  03AC  07B3               	addwf	___ftadd@f1+2,f
  8534  03AD                     l2481:	
  8535  03AD  1F3B               	btfss	___ftadd@sign,6
  8536  03AE  2BBF               	goto	l2485
  8537  03AF  30FF               	movlw	255
  8538  03B0  06B4               	xorwf	___ftadd@f2,f
  8539  03B1  30FF               	movlw	255
  8540  03B2  06B5               	xorwf	___ftadd@f2+1,f
  8541  03B3  30FF               	movlw	255
  8542  03B4  06B6               	xorwf	___ftadd@f2+2,f
  8543  03B5  3001               	movlw	1
  8544  03B6  07B4               	addwf	___ftadd@f2,f
  8545  03B7  3000               	movlw	0
  8546  03B8  1803               	skipnc
  8547  03B9  3001               	movlw	1
  8548  03BA  07B5               	addwf	___ftadd@f2+1,f
  8549  03BB  3000               	movlw	0
  8550  03BC  1803               	skipnc
  8551  03BD  3001               	movlw	1
  8552  03BE  07B6               	addwf	___ftadd@f2+2,f
  8553  03BF                     l2485:	
  8554  03BF  01BB               	clrf	___ftadd@sign
  8555  03C0  0831               	movf	___ftadd@f1,w
  8556  03C1  07B4               	addwf	___ftadd@f2,f
  8557  03C2  0832               	movf	___ftadd@f1+1,w
  8558  03C3  3DB5               	addwfc	___ftadd@f2+1,f
  8559  03C4  0833               	movf	___ftadd@f1+2,w
  8560  03C5  3DB6               	addwfc	___ftadd@f2+2,f
  8561  03C6  1FB6               	btfss	___ftadd@f2+2,7
  8562  03C7  2BDA               	goto	l2495
  8563  03C8  30FF               	movlw	255
  8564  03C9  06B4               	xorwf	___ftadd@f2,f
  8565  03CA  30FF               	movlw	255
  8566  03CB  06B5               	xorwf	___ftadd@f2+1,f
  8567  03CC  30FF               	movlw	255
  8568  03CD  06B6               	xorwf	___ftadd@f2+2,f
  8569  03CE  3001               	movlw	1
  8570  03CF  07B4               	addwf	___ftadd@f2,f
  8571  03D0  3000               	movlw	0
  8572  03D1  1803               	skipnc
  8573  03D2  3001               	movlw	1
  8574  03D3  07B5               	addwf	___ftadd@f2+1,f
  8575  03D4  3000               	movlw	0
  8576  03D5  1803               	skipnc
  8577  03D6  3001               	movlw	1
  8578  03D7  07B6               	addwf	___ftadd@f2+2,f
  8579  03D8  01BB               	clrf	___ftadd@sign
  8580  03D9  0ABB               	incf	___ftadd@sign,f
  8581  03DA                     l2495:	
  8582  03DA  0834               	movf	___ftadd@f2,w
  8583  03DB  00A1               	movwf	___ftpack@arg
  8584  03DC  0835               	movf	___ftadd@f2+1,w
  8585  03DD  00A2               	movwf	___ftpack@arg+1
  8586  03DE  0836               	movf	___ftadd@f2+2,w
  8587  03DF  00A3               	movwf	___ftpack@arg+2
  8588  03E0  083D               	movf	___ftadd@exp1,w
  8589  03E1  00B7               	movwf	??___ftadd
  8590  03E2  0837               	movf	??___ftadd,w
  8591  03E3  00A4               	movwf	___ftpack@exp
  8592  03E4  083B               	movf	___ftadd@sign,w
  8593  03E5  00B8               	movwf	??___ftadd+1
  8594  03E6  0838               	movf	??___ftadd+1,w
  8595  03E7  00A5               	movwf	___ftpack@sign
  8596  03E8  318E  267E         	fcall	___ftpack
  8597  03EA  0020               	movlb	0	; select bank0
  8598  03EB  0821               	movf	?___ftpack,w
  8599  03EC  00B1               	movwf	?___ftadd
  8600  03ED  0822               	movf	?___ftpack+1,w
  8601  03EE  00B2               	movwf	?___ftadd+1
  8602  03EF  0823               	movf	?___ftpack+2,w
  8603  03F0  00B3               	movwf	?___ftadd+2
  8604  03F1  0008               	return
  8605  03F2                     __end_of___ftadd:	
  8606                           
  8607                           	psect	text34
  8608  0E7E                     __ptext34:	
  8609 ;; *************** function ___ftpack *****************
  8610 ;; Defined at:
  8611 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\float.c"
  8612 ;; Parameters:    Size  Location     Type
  8613 ;;  arg             3    1[BANK0 ] unsigned um
  8614 ;;  exp             1    4[BANK0 ] unsigned char 
  8615 ;;  sign            1    5[BANK0 ] unsigned char 
  8616 ;; Auto vars:     Size  Location     Type
  8617 ;;		None
  8618 ;; Return value:  Size  Location     Type
  8619 ;;                  3    1[BANK0 ] float 
  8620 ;; Registers used:
  8621 ;;		wreg, status,2, status,0
  8622 ;; Tracked objects:
  8623 ;;		On entry : 0/0
  8624 ;;		On exit  : 0/0
  8625 ;;		Unchanged: 0/0
  8626 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8627 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8628 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8629 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8630 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8631 ;;Total ram usage:        8 bytes
  8632 ;; Hardware stack levels used:    1
  8633 ;; Hardware stack levels required when called:    7
  8634 ;; This function calls:
  8635 ;;		Nothing
  8636 ;; This function is called by:
  8637 ;;		___ftadd
  8638 ;;		___ftdiv
  8639 ;;		___ftmul
  8640 ;;		___lbtoft
  8641 ;;		___lltoft
  8642 ;;		___lwtoft
  8643 ;; This function uses a non-reentrant model
  8644 ;;
  8645                           
  8646                           
  8647                           ;psect for function ___ftpack
  8648  0E7E                     ___ftpack:	
  8649                           
  8650                           ;incstack = 0
  8651                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
  8652  0E7E  0020               	movlb	0	; select bank0
  8653  0E7F  0824               	movf	___ftpack@exp,w
  8654  0E80  1903               	btfsc	3,2
  8655  0E81  2E87               	goto	l2333
  8656  0E82  0823               	movf	___ftpack@arg+2,w
  8657  0E83  0422               	iorwf	___ftpack@arg+1,w
  8658  0E84  0421               	iorwf	___ftpack@arg,w
  8659  0E85  1D03               	skipz
  8660  0E86  2E98               	goto	l2339
  8661  0E87                     l2333:	
  8662  0E87  3000               	movlw	0
  8663  0E88  00A1               	movwf	?___ftpack
  8664  0E89  3000               	movlw	0
  8665  0E8A  00A2               	movwf	?___ftpack+1
  8666  0E8B  3000               	movlw	0
  8667  0E8C  00A3               	movwf	?___ftpack+2
  8668  0E8D  0008               	return
  8669  0E8E                     l2337:	
  8670  0E8E  3001               	movlw	1
  8671  0E8F  00A6               	movwf	??___ftpack
  8672  0E90  0826               	movf	??___ftpack,w
  8673  0E91  07A4               	addwf	___ftpack@exp,f
  8674  0E92  3001               	movlw	1
  8675  0E93                     u1715:	
  8676  0E93  36A3               	lsrf	___ftpack@arg+2,f
  8677  0E94  0CA2               	rrf	___ftpack@arg+1,f
  8678  0E95  0CA1               	rrf	___ftpack@arg,f
  8679  0E96  0B89               	decfsz	9,f
  8680  0E97  2E93               	goto	u1715
  8681  0E98                     l2339:	
  8682  0E98  30FE               	movlw	254
  8683  0E99  0523               	andwf	___ftpack@arg+2,w
  8684  0E9A  1903               	btfsc	3,2
  8685  0E9B  2EB1               	goto	l718
  8686  0E9C  2E8E               	goto	l2337
  8687  0E9D                     l2341:	
  8688  0E9D  3001               	movlw	1
  8689  0E9E  00A6               	movwf	??___ftpack
  8690  0E9F  0826               	movf	??___ftpack,w
  8691  0EA0  07A4               	addwf	___ftpack@exp,f
  8692  0EA1  3001               	movlw	1
  8693  0EA2  07A1               	addwf	___ftpack@arg,f
  8694  0EA3  3000               	movlw	0
  8695  0EA4  1803               	skipnc
  8696  0EA5  3001               	movlw	1
  8697  0EA6  07A2               	addwf	___ftpack@arg+1,f
  8698  0EA7  3000               	movlw	0
  8699  0EA8  1803               	skipnc
  8700  0EA9  3001               	movlw	1
  8701  0EAA  07A3               	addwf	___ftpack@arg+2,f
  8702  0EAB  3001               	movlw	1
  8703  0EAC                     u1735:	
  8704  0EAC  36A3               	lsrf	___ftpack@arg+2,f
  8705  0EAD  0CA2               	rrf	___ftpack@arg+1,f
  8706  0EAE  0CA1               	rrf	___ftpack@arg,f
  8707  0EAF  0B89               	decfsz	9,f
  8708  0EB0  2EAC               	goto	u1735
  8709  0EB1                     l718:	
  8710  0EB1  30FF               	movlw	255
  8711  0EB2  0523               	andwf	___ftpack@arg+2,w
  8712  0EB3  1903               	btfsc	3,2
  8713  0EB4  2EBE               	goto	l2349
  8714  0EB5  2E9D               	goto	l2341
  8715  0EB6                     l2347:	
  8716  0EB6  3001               	movlw	1
  8717  0EB7  02A4               	subwf	___ftpack@exp,f
  8718  0EB8  3001               	movlw	1
  8719  0EB9                     u1755:	
  8720  0EB9  35A1               	lslf	___ftpack@arg,f
  8721  0EBA  0DA2               	rlf	___ftpack@arg+1,f
  8722  0EBB  0DA3               	rlf	___ftpack@arg+2,f
  8723  0EBC  0B89               	decfsz	9,f
  8724  0EBD  2EB9               	goto	u1755
  8725  0EBE                     l2349:	
  8726  0EBE  1BA2               	btfsc	___ftpack@arg+1,7
  8727  0EBF  2EC4               	goto	l725
  8728  0EC0  3002               	movlw	2
  8729  0EC1  0224               	subwf	___ftpack@exp,w
  8730  0EC2  1803               	skipnc
  8731  0EC3  2EB6               	goto	l2347
  8732  0EC4                     l725:	
  8733  0EC4  1824               	btfsc	___ftpack@exp,0
  8734  0EC5  2ECC               	goto	l726
  8735  0EC6  30FF               	movlw	255
  8736  0EC7  05A1               	andwf	___ftpack@arg,f
  8737  0EC8  307F               	movlw	127
  8738  0EC9  05A2               	andwf	___ftpack@arg+1,f
  8739  0ECA  30FF               	movlw	255
  8740  0ECB  05A3               	andwf	___ftpack@arg+2,f
  8741  0ECC                     l726:	
  8742  0ECC  1003               	clrc
  8743  0ECD  0CA4               	rrf	___ftpack@exp,f
  8744  0ECE  0824               	movf	___ftpack@exp,w
  8745  0ECF  00A6               	movwf	??___ftpack
  8746  0ED0  01A7               	clrf	??___ftpack+1
  8747  0ED1  01A8               	clrf	??___ftpack+2
  8748  0ED2  3010               	movlw	16
  8749  0ED3                     u1795:	
  8750  0ED3  35A6               	lslf	??___ftpack,f
  8751  0ED4  0DA7               	rlf	??___ftpack+1,f
  8752  0ED5  0DA8               	rlf	??___ftpack+2,f
  8753  0ED6  0B89               	decfsz	9,f
  8754  0ED7  2ED3               	goto	u1795
  8755  0ED8  0826               	movf	??___ftpack,w
  8756  0ED9  04A1               	iorwf	___ftpack@arg,f
  8757  0EDA  0827               	movf	??___ftpack+1,w
  8758  0EDB  04A2               	iorwf	___ftpack@arg+1,f
  8759  0EDC  0828               	movf	??___ftpack+2,w
  8760  0EDD  04A3               	iorwf	___ftpack@arg+2,f
  8761  0EDE  0825               	movf	___ftpack@sign,w
  8762  0EDF  1903               	btfsc	3,2
  8763  0EE0  0008               	return
  8764  0EE1  17A3               	bsf	___ftpack@arg+2,7
  8765  0EE2  0008               	return
  8766  0EE3                     __end_of___ftpack:	
  8767                           
  8768                           	psect	text35
  8769  087C                     __ptext35:	
  8770 ;; *************** function _checkTXPower *****************
  8771 ;; Defined at:
  8772 ;;		line 89 in file "main.c"
  8773 ;; Parameters:    Size  Location     Type
  8774 ;;		None
  8775 ;; Auto vars:     Size  Location     Type
  8776 ;;  rxPacket        1    9[BANK0 ] PTR struct .
  8777 ;;		 -> RXPacket(33), 
  8778 ;; Return value:  Size  Location     Type
  8779 ;;                  1    wreg      void 
  8780 ;; Registers used:
  8781 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8782 ;; Tracked objects:
  8783 ;;		On entry : 0/0
  8784 ;;		On exit  : 0/0
  8785 ;;		Unchanged: 0/0
  8786 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8787 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8788 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8789 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8790 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8791 ;;Total ram usage:        2 bytes
  8792 ;; Hardware stack levels used:    1
  8793 ;; Hardware stack levels required when called:   11
  8794 ;; This function calls:
  8795 ;;		_nrf24l01ChangeTXPower
  8796 ;;		_nrf24l01GetRXPacket
  8797 ;; This function is called by:
  8798 ;;		_loop
  8799 ;; This function uses a non-reentrant model
  8800 ;;
  8801                           
  8802                           
  8803                           ;psect for function _checkTXPower
  8804  087C                     _checkTXPower:	
  8805                           
  8806                           ;main.c: 90: nrf24l01Packet_t * rxPacket = nrf24l01GetRXPacket();
  8807                           
  8808                           ;incstack = 0
  8809                           ; Regs used in _checkTXPower: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8810  087C  3180  2002  3188   	fcall	_nrf24l01GetRXPacket
  8811  087F  0020               	movlb	0	; select bank0
  8812  0880  00A8               	movwf	??_checkTXPower
  8813  0881  0828               	movf	??_checkTXPower,w
  8814  0882  00A9               	movwf	checkTXPower@rxPacket
  8815                           
  8816                           ;main.c: 92: if (rxPacket->packetData.ACKRPD){
  8817  0883  0829               	movf	checkTXPower@rxPacket,w
  8818  0884  0086               	movwf	6
  8819  0885  3001               	movlw	1	; select bank2/3
  8820  0886  0087               	movwf	7
  8821  0887  1C81               	btfss	1,1
  8822  0888  0008               	return
  8823                           
  8824                           ;main.c: 93: nrf24l01ChangeTXPower(-1);
  8825  0889  30FF               	movlw	255
  8826  088A  00A4               	movwf	nrf24l01ChangeTXPower@addPower
  8827  088B  30FF               	movlw	255
  8828  088C  00A5               	movwf	nrf24l01ChangeTXPower@addPower+1
  8829  088D  318C  241F         	fcall	_nrf24l01ChangeTXPower
  8830  088F  0008               	return
  8831  0890                     __end_of_checkTXPower:	
  8832                           
  8833                           	psect	text36
  8834  0002                     __ptext36:	
  8835 ;; *************** function _nrf24l01GetRXPacket *****************
  8836 ;; Defined at:
  8837 ;;		line 131 in file "nrf24l01.c"
  8838 ;; Parameters:    Size  Location     Type
  8839 ;;		None
  8840 ;; Auto vars:     Size  Location     Type
  8841 ;;		None
  8842 ;; Return value:  Size  Location     Type
  8843 ;;                  1    wreg      PTR struct .
  8844 ;; Registers used:
  8845 ;;		wreg
  8846 ;; Tracked objects:
  8847 ;;		On entry : 0/0
  8848 ;;		On exit  : 0/0
  8849 ;;		Unchanged: 0/0
  8850 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8851 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8852 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8853 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8854 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8855 ;;Total ram usage:        0 bytes
  8856 ;; Hardware stack levels used:    1
  8857 ;; Hardware stack levels required when called:    7
  8858 ;; This function calls:
  8859 ;;		Nothing
  8860 ;; This function is called by:
  8861 ;;		_checkTXPower
  8862 ;; This function uses a non-reentrant model
  8863 ;;
  8864                           
  8865                           
  8866                           ;psect for function _nrf24l01GetRXPacket
  8867  0002                     _nrf24l01GetRXPacket:	
  8868                           
  8869                           ;nrf24l01.c: 132: return &RXPacket;
  8870                           
  8871                           ;incstack = 0
  8872                           ; Regs used in _nrf24l01GetRXPacket: [wreg]
  8873  0002  3024               	movlw	(low (_RXPacket| (0+256)))& (0+255)
  8874  0003  0008               	return
  8875  0004                     __end_of_nrf24l01GetRXPacket:	
  8876                           
  8877                           	psect	text37
  8878  0C1F                     __ptext37:	
  8879 ;; *************** function _nrf24l01ChangeTXPower *****************
  8880 ;; Defined at:
  8881 ;;		line 33 in file "nrf24l01.c"
  8882 ;; Parameters:    Size  Location     Type
  8883 ;;  addPower        2    4[BANK0 ] int 
  8884 ;; Auto vars:     Size  Location     Type
  8885 ;;  rfSetup         1    7[BANK0 ] struct .
  8886 ;; Return value:  Size  Location     Type
  8887 ;;                  1    wreg      void 
  8888 ;; Registers used:
  8889 ;;		wreg, status,2, status,0, pclath, cstack
  8890 ;; Tracked objects:
  8891 ;;		On entry : 0/0
  8892 ;;		On exit  : 0/0
  8893 ;;		Unchanged: 0/0
  8894 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8895 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8896 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8897 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8898 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8899 ;;Total ram usage:        4 bytes
  8900 ;; Hardware stack levels used:    1
  8901 ;; Hardware stack levels required when called:   10
  8902 ;; This function calls:
  8903 ;;		_nrf24l01Send
  8904 ;; This function is called by:
  8905 ;;		_checkTXPower
  8906 ;;		_nrf24l01SendPacket
  8907 ;; This function uses a non-reentrant model
  8908 ;;
  8909                           
  8910                           
  8911                           ;psect for function _nrf24l01ChangeTXPower
  8912  0C1F                     _nrf24l01ChangeTXPower:	
  8913                           
  8914                           ;nrf24l01.c: 35: n_RF_SETUP_t rfSetup;;nrf24l01.c: 36: rfSetup.byte = nrf24l01Send((unsi
      +                          gned) 0b00000000 | (unsigned) 0x06, 0);
  8915                           
  8916                           ;incstack = 0
  8917                           ; Regs used in _nrf24l01ChangeTXPower: [wreg+status,2+status,0+pclath+cstack]
  8918  0C1F  0020               	movlb	0	; select bank0
  8919  0C20  01A1               	clrf	nrf24l01Send@data
  8920  0C21  3006               	movlw	6
  8921  0C22  3189  21F0  318C   	fcall	_nrf24l01Send
  8922  0C25  0020               	movlb	0	; select bank0
  8923  0C26  00A6               	movwf	??_nrf24l01ChangeTXPower
  8924  0C27  0826               	movf	??_nrf24l01ChangeTXPower,w
  8925  0C28  00A7               	movwf	nrf24l01ChangeTXPower@rfSetup
  8926                           
  8927                           ;nrf24l01.c: 38: if (addPower > 0){
  8928  0C29  0825               	movf	nrf24l01ChangeTXPower@addPower+1,w
  8929  0C2A  3A80               	xorlw	128
  8930  0C2B  00A6               	movwf	??_nrf24l01ChangeTXPower
  8931  0C2C  3080               	movlw	128
  8932  0C2D  0226               	subwf	??_nrf24l01ChangeTXPower,w
  8933  0C2E  1D03               	skipz
  8934  0C2F  2C32               	goto	u2815
  8935  0C30  3001               	movlw	1
  8936  0C31  0224               	subwf	nrf24l01ChangeTXPower@addPower,w
  8937  0C32                     u2815:	
  8938  0C32  1C03               	skipc
  8939  0C33  2C44               	goto	l2947
  8940                           
  8941                           ;nrf24l01.c: 39: if (rfSetup.RF_PWR < 3){
  8942  0C34  0020               	movlb	0	; select bank0
  8943  0C35  0C27               	rrf	nrf24l01ChangeTXPower@rfSetup,w
  8944  0C36  3903               	andlw	3
  8945  0C37  3A03               	xorlw	3
  8946  0C38  1903               	skipnz
  8947  0C39  2C44               	goto	l2947
  8948                           
  8949                           ;nrf24l01.c: 40: rfSetup.RF_PWR++;
  8950  0C3A  0C27               	rrf	nrf24l01ChangeTXPower@rfSetup,w
  8951  0C3B  3903               	andlw	3
  8952  0C3C  00A6               	movwf	??_nrf24l01ChangeTXPower
  8953  0C3D  0AA6               	incf	??_nrf24l01ChangeTXPower,f
  8954  0C3E  0DA6               	rlf	??_nrf24l01ChangeTXPower,f
  8955  0C3F  0827               	movf	nrf24l01ChangeTXPower@rfSetup,w
  8956  0C40  0626               	xorwf	??_nrf24l01ChangeTXPower,w
  8957  0C41  39F9               	andlw	-7
  8958  0C42  0626               	xorwf	??_nrf24l01ChangeTXPower,w
  8959  0C43  00A7               	movwf	nrf24l01ChangeTXPower@rfSetup
  8960  0C44                     l2947:	
  8961                           
  8962                           ;nrf24l01.c: 41: };nrf24l01.c: 42: };nrf24l01.c: 44: if (addPower < 0){
  8963  0C44  0020               	movlb	0	; select bank0
  8964  0C45  1FA5               	btfss	nrf24l01ChangeTXPower@addPower+1,7
  8965  0C46  2C56               	goto	l2953
  8966                           
  8967                           ;nrf24l01.c: 45: if (rfSetup.RF_PWR > 0){
  8968  0C47  0C27               	rrf	nrf24l01ChangeTXPower@rfSetup,w
  8969  0C48  3903               	andlw	3
  8970  0C49  3A00               	xorlw	0
  8971  0C4A  1903               	skipnz
  8972  0C4B  2C56               	goto	l2953
  8973                           
  8974                           ;nrf24l01.c: 46: rfSetup.RF_PWR--;
  8975  0C4C  0C27               	rrf	nrf24l01ChangeTXPower@rfSetup,w
  8976  0C4D  3903               	andlw	3
  8977  0C4E  00A6               	movwf	??_nrf24l01ChangeTXPower
  8978  0C4F  03A6               	decf	??_nrf24l01ChangeTXPower,f
  8979  0C50  0DA6               	rlf	??_nrf24l01ChangeTXPower,f
  8980  0C51  0827               	movf	nrf24l01ChangeTXPower@rfSetup,w
  8981  0C52  0626               	xorwf	??_nrf24l01ChangeTXPower,w
  8982  0C53  39F9               	andlw	-7
  8983  0C54  0626               	xorwf	??_nrf24l01ChangeTXPower,w
  8984  0C55  00A7               	movwf	nrf24l01ChangeTXPower@rfSetup
  8985  0C56                     l2953:	
  8986                           
  8987                           ;nrf24l01.c: 47: };nrf24l01.c: 48: };nrf24l01.c: 50: nrf24l01Send((unsigned) 0b00100000 
      +                          | (unsigned) 0x06, rfSetup.byte);
  8988  0C56  0827               	movf	nrf24l01ChangeTXPower@rfSetup,w
  8989  0C57  00A6               	movwf	??_nrf24l01ChangeTXPower
  8990  0C58  0826               	movf	??_nrf24l01ChangeTXPower,w
  8991  0C59  00A1               	movwf	nrf24l01Send@data
  8992  0C5A  3026               	movlw	38
  8993  0C5B  3189  21F0         	fcall	_nrf24l01Send
  8994  0C5D  0008               	return
  8995  0C5E                     __end_of_nrf24l01ChangeTXPower:	
  8996                           
  8997                           	psect	text38
  8998  09F0                     __ptext38:	
  8999 ;; *************** function _nrf24l01Send *****************
  9000 ;; Defined at:
  9001 ;;		line 9 in file "nrf24l01.c"
  9002 ;; Parameters:    Size  Location     Type
  9003 ;;  command         1    wreg     unsigned char 
  9004 ;;  data            1    1[BANK0 ] unsigned char 
  9005 ;; Auto vars:     Size  Location     Type
  9006 ;;  command         1    3[BANK0 ] unsigned char 
  9007 ;; Return value:  Size  Location     Type
  9008 ;;                  1    wreg      unsigned char 
  9009 ;; Registers used:
  9010 ;;		wreg, status,2, status,0, pclath, cstack
  9011 ;; Tracked objects:
  9012 ;;		On entry : 0/0
  9013 ;;		On exit  : 0/0
  9014 ;;		Unchanged: 0/0
  9015 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9016 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9017 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9018 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9019 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9020 ;;Total ram usage:        3 bytes
  9021 ;; Hardware stack levels used:    1
  9022 ;; Hardware stack levels required when called:    9
  9023 ;; This function calls:
  9024 ;;		_enableInterrupts
  9025 ;;		_nrf24l01SPIEnd
  9026 ;;		_nrf24l01SPISend
  9027 ;;		_nrf24l01SPIStart
  9028 ;; This function is called by:
  9029 ;;		_nrf24l01ChangeTXPower
  9030 ;;		_nrf24l01SetRXMode
  9031 ;;		_nrf24l01SetRXPipe
  9032 ;;		_nrf24l01InitRegisters
  9033 ;; This function uses a non-reentrant model
  9034 ;;
  9035                           
  9036                           
  9037                           ;psect for function _nrf24l01Send
  9038  09F0                     _nrf24l01Send:	
  9039                           
  9040                           ;incstack = 0
  9041                           ; Regs used in _nrf24l01Send: [wreg+status,2+status,0+pclath+cstack]
  9042                           ;nrf24l01Send@command stored from wreg
  9043  09F0  0020               	movlb	0	; select bank0
  9044  09F1  00A3               	movwf	nrf24l01Send@command
  9045                           
  9046                           ;nrf24l01.c: 12: enableInterrupts(0);
  9047  09F2  3000               	movlw	0
  9048  09F3  3188  2030  3189   	fcall	_enableInterrupts
  9049                           
  9050                           ;nrf24l01.c: 15: nrf24l01SPIStart();
  9051  09F6  3188  2038  3189   	fcall	_nrf24l01SPIStart
  9052                           
  9053                           ;nrf24l01.c: 18: nrf24l01SPISend(command);
  9054  09F9  0020               	movlb	0	; select bank0
  9055  09FA  0823               	movf	nrf24l01Send@command,w
  9056  09FB  3187  27F2  3189   	fcall	_nrf24l01SPISend
  9057                           
  9058                           ;nrf24l01.c: 21: data = nrf24l01SPISend(data);
  9059  09FE  0020               	movlb	0	; select bank0
  9060  09FF  0821               	movf	nrf24l01Send@data,w
  9061  0A00  3187  27F2  3189   	fcall	_nrf24l01SPISend
  9062  0A03  0020               	movlb	0	; select bank0
  9063  0A04  00A2               	movwf	??_nrf24l01Send
  9064  0A05  0822               	movf	??_nrf24l01Send,w
  9065  0A06  00A1               	movwf	nrf24l01Send@data
  9066                           
  9067                           ;nrf24l01.c: 24: nrf24l01SPIEnd();
  9068  0A07  3188  2029  3189   	fcall	_nrf24l01SPIEnd
  9069                           
  9070                           ;nrf24l01.c: 27: enableInterrupts(1);
  9071  0A0A  3001               	movlw	1
  9072  0A0B  3188  2030         	fcall	_enableInterrupts
  9073                           
  9074                           ;nrf24l01.c: 29: return data;
  9075  0A0D  0020               	movlb	0	; select bank0
  9076  0A0E  0821               	movf	nrf24l01Send@data,w
  9077  0A0F  0008               	return
  9078  0A10                     __end_of_nrf24l01Send:	
  9079                           
  9080                           	psect	text39
  9081  09D0                     __ptext39:	
  9082 ;; *************** function _flashRealod *****************
  9083 ;; Defined at:
  9084 ;;		line 90 in file "flash.c"
  9085 ;; Parameters:    Size  Location     Type
  9086 ;;		None
  9087 ;; Auto vars:     Size  Location     Type
  9088 ;;  i               2   11[BANK0 ] unsigned int 
  9089 ;; Return value:  Size  Location     Type
  9090 ;;                  1    wreg      void 
  9091 ;; Registers used:
  9092 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9093 ;; Tracked objects:
  9094 ;;		On entry : 0/0
  9095 ;;		On exit  : 0/0
  9096 ;;		Unchanged: 0/0
  9097 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9098 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9099 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9100 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9101 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9102 ;;Total ram usage:        3 bytes
  9103 ;; Hardware stack levels used:    1
  9104 ;; Hardware stack levels required when called:    8
  9105 ;; This function calls:
  9106 ;;		_flashReadByte
  9107 ;; This function is called by:
  9108 ;;		_main
  9109 ;; This function uses a non-reentrant model
  9110 ;;
  9111                           
  9112                           
  9113                           ;psect for function _flashRealod
  9114  09D0                     _flashRealod:	
  9115                           
  9116                           ;flash.c: 92: for (unsigned int i = 0; i < 32; i++){
  9117                           
  9118                           ;incstack = 0
  9119                           ; Regs used in _flashRealod: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9120  09D0  0020               	movlb	0	; select bank0
  9121  09D1  01AB               	clrf	flashRealod@i
  9122  09D2  01AC               	clrf	flashRealod@i+1
  9123  09D3                     L3:	
  9124  09D3  3000               	movlw	0
  9125  09D4  022C               	subwf	flashRealod@i+1,w
  9126  09D5  3020               	movlw	32
  9127  09D6  1903               	skipnz
  9128  09D7  022B               	subwf	flashRealod@i,w
  9129  09D8  1803               	btfsc	3,0
  9130  09D9  0008               	return
  9131                           
  9132                           ;flash.c: 93: romHolder.array[i] = flashReadByte(i);
  9133  09DA  082C               	movf	flashRealod@i+1,w
  9134  09DB  00A2               	movwf	flashReadByte@offset+1
  9135  09DC  082B               	movf	flashRealod@i,w
  9136  09DD  00A1               	movwf	flashReadByte@offset
  9137  09DE  318B  233F  3189   	fcall	_flashReadByte
  9138  09E1  0020               	movlb	0	; select bank0
  9139  09E2  0821               	movf	?_flashReadByte,w
  9140  09E3  00AA               	movwf	??_flashRealod
  9141  09E4  082B               	movf	flashRealod@i,w
  9142  09E5  3EA0               	addlw	(low (_romHolder| (0+256)))& (0+255)
  9143  09E6  0086               	movwf	6
  9144  09E7  3001               	movlw	1	; select bank3/4
  9145  09E8  0087               	movwf	7
  9146  09E9  082A               	movf	??_flashRealod,w
  9147  09EA  0081               	movwf	1
  9148  09EB  3001               	movlw	1
  9149  09EC  07AB               	addwf	flashRealod@i,f
  9150  09ED  3000               	movlw	0
  9151  09EE  3DAC               	addwfc	flashRealod@i+1,f
  9152  09EF  29D3               	goto	L3
  9153  09F0                     __end_of_flashRealod:	
  9154                           
  9155                           	psect	text40
  9156  0B3F                     __ptext40:	
  9157 ;; *************** function _flashReadByte *****************
  9158 ;; Defined at:
  9159 ;;		line 64 in file "flash.c"
  9160 ;; Parameters:    Size  Location     Type
  9161 ;;  offset          2    1[BANK0 ] unsigned int 
  9162 ;; Auto vars:     Size  Location     Type
  9163 ;;  address         2    8[BANK0 ] unsigned int 
  9164 ;;  result          2    6[BANK0 ] unsigned int 
  9165 ;; Return value:  Size  Location     Type
  9166 ;;                  2    1[BANK0 ] unsigned int 
  9167 ;; Registers used:
  9168 ;;		wreg, status,2, status,0
  9169 ;; Tracked objects:
  9170 ;;		On entry : 0/0
  9171 ;;		On exit  : 0/0
  9172 ;;		Unchanged: 0/0
  9173 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9174 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9175 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9176 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9177 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9178 ;;Total ram usage:        9 bytes
  9179 ;; Hardware stack levels used:    1
  9180 ;; Hardware stack levels required when called:    7
  9181 ;; This function calls:
  9182 ;;		Nothing
  9183 ;; This function is called by:
  9184 ;;		_flashRealod
  9185 ;; This function uses a non-reentrant model
  9186 ;;
  9187                           
  9188                           
  9189                           ;psect for function _flashReadByte
  9190  0B3F                     _flashReadByte:	
  9191                           
  9192                           ;flash.c: 66: unsigned int address;;flash.c: 68: INTCONbits.GIE = 0;
  9193                           
  9194                           ;incstack = 0
  9195                           ; Regs used in _flashReadByte: [wreg+status,2+status,0]
  9196  0B3F  138B               	bcf	11,7	;volatile
  9197                           
  9198                           ;flash.c: 70: PMCON1 = 0x00;
  9199  0B40  0031               	movlb	17	; select bank17
  9200  0B41  0195               	clrf	21	;volsfr
  9201                           
  9202                           ;flash.c: 72: address = (0x2000U - 32) + offset;
  9203  0B42  0020               	movlb	0	; select bank0
  9204  0B43  0821               	movf	flashReadByte@offset,w
  9205  0B44  3EE0               	addlw	224
  9206  0B45  00A8               	movwf	flashReadByte@address
  9207  0B46  301F               	movlw	31
  9208  0B47  3D22               	addwfc	flashReadByte@offset+1,w
  9209  0B48  00A9               	movwf	flashReadByte@address+1
  9210                           
  9211                           ;flash.c: 73: PMADRL = (char) (address >> 0);
  9212  0B49  0828               	movf	flashReadByte@address,w
  9213  0B4A  0031               	movlb	17	; select bank17
  9214  0B4B  0091               	movwf	17	;volatile
  9215                           
  9216                           ;flash.c: 74: PMADRH = (char) (address >> 8);
  9217  0B4C  0020               	movlb	0	; select bank0
  9218  0B4D  0829               	movf	flashReadByte@address+1,w
  9219  0B4E  0031               	movlb	17	; select bank17
  9220  0B4F  0092               	movwf	18	;volatile
  9221                           
  9222                           ;flash.c: 76: PMCON1bits.RD = 1;
  9223  0B50  1415               	bsf	21,0	;volsfr
  9224                           
  9225                           ;flash.c: 78: __nop();
  9226  0B51  0000               	nop
  9227                           
  9228                           ;flash.c: 79: __nop();
  9229  0B52  0000               	nop
  9230                           
  9231                           ;flash.c: 81: unsigned int result = 0;
  9232  0B53  0020               	movlb	0	; select bank0
  9233  0B54  01A6               	clrf	flashReadByte@result
  9234  0B55  01A7               	clrf	flashReadByte@result+1
  9235                           
  9236                           ;flash.c: 82: result = PMDATL;
  9237  0B56  0031               	movlb	17	; select bank17
  9238  0B57  0813               	movf	19,w	;volatile
  9239  0B58  0020               	movlb	0	; select bank0
  9240  0B59  00A3               	movwf	??_flashReadByte
  9241  0B5A  01A4               	clrf	??_flashReadByte+1
  9242  0B5B  0823               	movf	??_flashReadByte,w
  9243  0B5C  00A6               	movwf	flashReadByte@result
  9244  0B5D  0824               	movf	??_flashReadByte+1,w
  9245  0B5E  00A7               	movwf	flashReadByte@result+1
  9246                           
  9247                           ;flash.c: 83: result|= ( (unsigned) (PMDATH) << 8);
  9248  0B5F  0031               	movlb	17	; select bank17
  9249  0B60  0814               	movf	20,w	;volatile
  9250  0B61  0020               	movlb	0	; select bank0
  9251  0B62  00A3               	movwf	??_flashReadByte
  9252  0B63  01A4               	clrf	??_flashReadByte+1
  9253  0B64  0823               	movf	??_flashReadByte,w
  9254  0B65  00A4               	movwf	??_flashReadByte+1
  9255  0B66  01A3               	clrf	??_flashReadByte
  9256  0B67  0823               	movf	??_flashReadByte,w
  9257  0B68  04A6               	iorwf	flashReadByte@result,f
  9258  0B69  0824               	movf	??_flashReadByte+1,w
  9259  0B6A  04A7               	iorwf	flashReadByte@result+1,f
  9260                           
  9261                           ;flash.c: 85: INTCONbits.GIE = 1;
  9262  0B6B  178B               	bsf	11,7	;volatile
  9263                           
  9264                           ;flash.c: 87: return result;
  9265  0B6C  0827               	movf	flashReadByte@result+1,w
  9266  0B6D  00A2               	movwf	?_flashReadByte+1
  9267  0B6E  0826               	movf	flashReadByte@result,w
  9268  0B6F  00A1               	movwf	?_flashReadByte
  9269  0B70  0008               	return
  9270  0B71                     __end_of_flashReadByte:	
  9271                           
  9272                           	psect	intentry
  9273  0004                     __pintentry:	
  9274 ;; *************** function _ISR *****************
  9275 ;; Defined at:
  9276 ;;		line 15 in file "main.c"
  9277 ;; Parameters:    Size  Location     Type
  9278 ;;		None
  9279 ;; Auto vars:     Size  Location     Type
  9280 ;;		None
  9281 ;; Return value:  Size  Location     Type
  9282 ;;                  1    wreg      void 
  9283 ;; Registers used:
  9284 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9285 ;; Tracked objects:
  9286 ;;		On entry : 0/0
  9287 ;;		On exit  : 0/0
  9288 ;;		Unchanged: 0/0
  9289 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9290 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9291 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9292 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9293 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9294 ;;Total ram usage:        0 bytes
  9295 ;; Hardware stack levels used:    1
  9296 ;; Hardware stack levels required when called:    6
  9297 ;; This function calls:
  9298 ;;		_nrf24l01ISR
  9299 ;; This function is called by:
  9300 ;;		Interrupt level 1
  9301 ;; This function uses a non-reentrant model
  9302 ;;
  9303                           
  9304  0004                     _ISR:	
  9305                           
  9306                           ;incstack = 0
  9307  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
  9308                           
  9309                           ; Regs used in _ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9310  0005  3180               	pagesel	$
  9311                           
  9312                           ;main.c: 17: if (PIR0bits.INTF){
  9313  0006  0020               	movlb	0	; select bank0
  9314  0007  1C10               	btfss	16,0	;volatile
  9315  0008  280D               	goto	i1l211
  9316                           
  9317                           ;main.c: 18: nrf24l01ISR();
  9318  0009  318D  2532         	fcall	_nrf24l01ISR
  9319                           
  9320                           ;main.c: 19: PIR0bits.INTF = 0;
  9321  000B  0020               	movlb	0	; select bank0
  9322  000C  1010               	bcf	16,0	;volatile
  9323  000D                     i1l211:	
  9324  000D  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
  9325  000E  0009               	retfie
  9326  000F                     __end_of_ISR:	
  9327                           
  9328                           	psect	text42
  9329  0D32                     __ptext42:	
  9330 ;; *************** function _nrf24l01ISR *****************
  9331 ;; Defined at:
  9332 ;;		line 246 in file "nrf24l01.c"
  9333 ;; Parameters:    Size  Location     Type
  9334 ;;		None
  9335 ;; Auto vars:     Size  Location     Type
  9336 ;;  status          1    0[BANK0 ] struct .
  9337 ;; Return value:  Size  Location     Type
  9338 ;;                  1    wreg      void 
  9339 ;; Registers used:
  9340 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9341 ;; Tracked objects:
  9342 ;;		On entry : 0/0
  9343 ;;		On exit  : 0/0
  9344 ;;		Unchanged: 0/0
  9345 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9346 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9347 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9348 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9349 ;;      Totals:         1       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9350 ;;Total ram usage:        2 bytes
  9351 ;; Hardware stack levels used:    1
  9352 ;; Hardware stack levels required when called:    5
  9353 ;; This function calls:
  9354 ;;		_exception
  9355 ;;		_nrf24l01CheckACK
  9356 ;;		_nrf24l01ReceivePacket
  9357 ;;		i1_nrf24l01Send
  9358 ;;		i1_nrf24l01SetRXMode
  9359 ;; This function is called by:
  9360 ;;		_ISR
  9361 ;; This function uses a non-reentrant model
  9362 ;;
  9363                           
  9364                           
  9365                           ;psect for function _nrf24l01ISR
  9366  0D32                     _nrf24l01ISR:	
  9367                           
  9368                           ;nrf24l01.c: 248: n_STATUS_t status;;nrf24l01.c: 249: status.byte = nrf24l01Send((unsign
      +                          ed) 0b00000000 | (unsigned) 0x07, 0);
  9369                           
  9370                           ;incstack = 0
  9371                           ; Regs used in _nrf24l01ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9372  0D32  01F1               	clrf	i1nrf24l01Send@data
  9373  0D33  3007               	movlw	7
  9374  0D34  3189  2109  318D   	fcall	i1_nrf24l01Send
  9375  0D37  00FD               	movwf	??_nrf24l01ISR
  9376  0D38  087D               	movf	??_nrf24l01ISR,w
  9377  0D39  0020               	movlb	0	; select bank0
  9378  0D3A  00A0               	movwf	nrf24l01ISR@status
  9379                           
  9380                           ;nrf24l01.c: 254: };nrf24l01.c: 257: if (status.byte == 0xFF){
  9381  0D3B  0A20               	incf	nrf24l01ISR@status,w
  9382  0D3C  1D03               	btfss	3,2
  9383  0D3D  2D42               	goto	i1l3761
  9384                           
  9385                           ;nrf24l01.c: 258: exception(2);
  9386  0D3E  3002               	movlw	2
  9387  0D3F  3188  20A5  318D   	fcall	_exception
  9388  0D42                     i1l3761:	
  9389                           
  9390                           ;nrf24l01.c: 259: };nrf24l01.c: 261: if (status.TX_DS){
  9391  0D42  0020               	movlb	0	; select bank0
  9392  0D43  1EA0               	btfss	nrf24l01ISR@status,5
  9393  0D44  2D52               	goto	i1l3769
  9394                           
  9395                           ;nrf24l01.c: 264: nrf24l01.TXBusy = 0;
  9396  0D45  106E               	bcf	_nrf24l01,0	;volatile
  9397                           
  9398                           ;nrf24l01.c: 267: if (!nrf24l01.RXMode){
  9399  0D46  196E               	btfsc	_nrf24l01,2	;volatile
  9400  0D47  2D52               	goto	i1l3769
  9401                           
  9402                           ;nrf24l01.c: 268: if (TXPacket->packetData.ACKRequest){
  9403  0D48  0021               	movlb	1	; select bank1
  9404  0D49  086D               	movf	_TXPacket^(0+128),w
  9405  0D4A  0086               	movwf	6
  9406  0D4B  0187               	clrf	7
  9407  0D4C  1D01               	btfss	1,2
  9408  0D4D  2D52               	goto	i1l3769
  9409                           
  9410                           ;nrf24l01.c: 271: nrf24l01SetRXMode(1);
  9411  0D4E  3001               	movlw	1
  9412  0D4F  318B  2371  318D   	fcall	i1_nrf24l01SetRXMode
  9413  0D52                     i1l3769:	
  9414                           
  9415                           ;nrf24l01.c: 272: };nrf24l01.c: 273: };nrf24l01.c: 274: };nrf24l01.c: 277: if (status.RX
      +                          _DR){
  9416  0D52  0020               	movlb	0	; select bank0
  9417  0D53  1F20               	btfss	nrf24l01ISR@status,6
  9418  0D54  2D77               	goto	i1l3783
  9419                           
  9420                           ;nrf24l01.c: 280: if (!nrf24l01.RXPending){
  9421  0D55  18EE               	btfsc	_nrf24l01,1	;volatile
  9422  0D56  2D76               	goto	i1l360
  9423                           
  9424                           ;nrf24l01.c: 283: nrf24l01.RXPending = 1;
  9425  0D57  14EE               	bsf	_nrf24l01,1	;volatile
  9426                           
  9427                           ;nrf24l01.c: 285: nrf24l01ReceivePacket();
  9428  0D58  318C  24E5  318D   	fcall	_nrf24l01ReceivePacket
  9429                           
  9430                           ;nrf24l01.c: 288: RXPacket.packetData.RPD = nrf24l01Send((unsigned) 0b00000000 | (unsign
      +                          ed) 0x09, 0);
  9431  0D5B  01F1               	clrf	i1nrf24l01Send@data
  9432  0D5C  3009               	movlw	9
  9433  0D5D  3189  2109  318D   	fcall	i1_nrf24l01Send
  9434  0D60  00FD               	movwf	??_nrf24l01ISR
  9435  0D61  0022               	movlb	2	; select bank2
  9436  0D62  0824               	movf	_RXPacket^(0+256),w
  9437  0D63  067D               	xorwf	??_nrf24l01ISR,w
  9438  0D64  39FE               	andlw	-2
  9439  0D65  067D               	xorwf	??_nrf24l01ISR,w
  9440  0D66  00A4               	movwf	_RXPacket^(0+256)
  9441                           
  9442                           ;nrf24l01.c: 291: RXPacket.packetData.Pipe = status.RX_P_NO;
  9443  0D67  0020               	movlb	0	; select bank0
  9444  0D68  0C20               	rrf	nrf24l01ISR@status,w
  9445  0D69  3907               	andlw	7
  9446  0D6A  00FD               	movwf	??_nrf24l01ISR
  9447  0D6B  0EFD               	swapf	??_nrf24l01ISR,f
  9448  0D6C  0022               	movlb	2	; select bank2
  9449  0D6D  0824               	movf	_RXPacket^(0+256),w
  9450  0D6E  067D               	xorwf	??_nrf24l01ISR,w
  9451  0D6F  398F               	andlw	-113
  9452  0D70  067D               	xorwf	??_nrf24l01ISR,w
  9453  0D71  00A4               	movwf	_RXPacket^(0+256)
  9454                           
  9455                           ;nrf24l01.c: 293: nrf24l01CheckACK();
  9456  0D72  318A  2231  318D   	fcall	_nrf24l01CheckACK
  9457                           
  9458                           ;nrf24l01.c: 294: }
  9459  0D75  2D77               	goto	i1l3783
  9460  0D76                     i1l360:	
  9461                           
  9462                           ;nrf24l01.c: 297: else{;nrf24l01.c: 300: status.RX_DR = 0;
  9463  0D76  1320               	bcf	nrf24l01ISR@status,6
  9464  0D77                     i1l3783:	
  9465                           
  9466                           ;nrf24l01.c: 301: };nrf24l01.c: 303: };nrf24l01.c: 306: nrf24l01Send((unsigned) 0b001000
      +                          00 | (unsigned) 0x07, status.byte);
  9467  0D77  0020               	movlb	0	; select bank0
  9468  0D78  0820               	movf	nrf24l01ISR@status,w
  9469  0D79  00FD               	movwf	??_nrf24l01ISR
  9470  0D7A  087D               	movf	??_nrf24l01ISR,w
  9471  0D7B  00F1               	movwf	i1nrf24l01Send@data
  9472  0D7C  3027               	movlw	39
  9473  0D7D  3189  2109         	fcall	i1_nrf24l01Send
  9474  0D7F  0008               	return
  9475  0D80                     __end_of_nrf24l01ISR:	
  9476                           
  9477                           	psect	text43
  9478  0CE5                     __ptext43:	
  9479 ;; *************** function _nrf24l01ReceivePacket *****************
  9480 ;; Defined at:
  9481 ;;		line 135 in file "nrf24l01.c"
  9482 ;; Parameters:    Size  Location     Type
  9483 ;;		None
  9484 ;; Auto vars:     Size  Location     Type
  9485 ;;  i               1   10[COMMON] unsigned char 
  9486 ;;  width           1    9[COMMON] unsigned char 
  9487 ;; Return value:  Size  Location     Type
  9488 ;;                  1    wreg      void 
  9489 ;; Registers used:
  9490 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9491 ;; Tracked objects:
  9492 ;;		On entry : 0/0
  9493 ;;		On exit  : 0/0
  9494 ;;		Unchanged: 0/0
  9495 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9496 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9497 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9498 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9499 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9500 ;;Total ram usage:        3 bytes
  9501 ;; Hardware stack levels used:    1
  9502 ;; Hardware stack levels required when called:    3
  9503 ;; This function calls:
  9504 ;;		_nrf24l01CEHigh
  9505 ;;		_nrf24l01CELow
  9506 ;;		_nrf24l01SPIEnd
  9507 ;;		_nrf24l01SPISend
  9508 ;;		_nrf24l01SPIStart
  9509 ;;		i1_memset
  9510 ;;		i1_nrf24l01Send
  9511 ;; This function is called by:
  9512 ;;		_nrf24l01ISR
  9513 ;; This function uses a non-reentrant model
  9514 ;;
  9515                           
  9516                           
  9517                           ;psect for function _nrf24l01ReceivePacket
  9518  0CE5                     _nrf24l01ReceivePacket:	
  9519                           
  9520                           ;nrf24l01.c: 138: memset(RXPacket.Message, 0 ,sizeof(RXPacket.Message));
  9521                           
  9522                           ;incstack = 0
  9523                           ; Regs used in _nrf24l01ReceivePacket: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  9524  0CE5  3025               	movlw	low (_RXPacket+1)
  9525  0CE6  00F0               	movwf	i1memset@p1
  9526  0CE7  3001               	movlw	high (_RXPacket+1)
  9527  0CE8  00F1               	movwf	i1memset@p1+1
  9528  0CE9  3000               	movlw	0
  9529  0CEA  00F2               	movwf	i1memset@c
  9530  0CEB  00F3               	movwf	i1memset@c+1
  9531  0CEC  3020               	movlw	32
  9532  0CED  00F4               	movwf	i1memset@n
  9533  0CEE  3000               	movlw	0
  9534  0CEF  00F5               	movwf	i1memset@n+1
  9535  0CF0  3188  20BD  318C   	fcall	i1_memset
  9536                           
  9537                           ;nrf24l01.c: 139: RXPacket.packetData.byte = 0x00;
  9538  0CF3  0022               	movlb	2	; select bank2
  9539  0CF4  01A4               	clrf	_RXPacket^(0+256)
  9540                           
  9541                           ;nrf24l01.c: 142: unsigned char width = nrf24l01Send((unsigned) 0b01100000, 0);
  9542  0CF5  01F1               	clrf	i1nrf24l01Send@data
  9543  0CF6  3060               	movlw	96
  9544  0CF7  3189  2109  318C   	fcall	i1_nrf24l01Send
  9545  0CFA  00F8               	movwf	??_nrf24l01ReceivePacket
  9546  0CFB  0878               	movf	??_nrf24l01ReceivePacket,w
  9547  0CFC  00F9               	movwf	nrf24l01ReceivePacket@width
  9548                           
  9549                           ;nrf24l01.c: 143: unsigned char i = 0;
  9550  0CFD  01FA               	clrf	nrf24l01ReceivePacket@i
  9551                           
  9552                           ;nrf24l01.c: 146: nrf24l01CELow();
  9553  0CFE  3188  201A  318C   	fcall	_nrf24l01CELow
  9554                           
  9555                           ;nrf24l01.c: 149: nrf24l01SPIStart();
  9556  0D01  3188  2038  318C   	fcall	_nrf24l01SPIStart
  9557                           
  9558                           ;nrf24l01.c: 152: nrf24l01SPISend((unsigned) 0b01100001);
  9559  0D04  3061               	movlw	97
  9560  0D05  3187  27F2  318C   	fcall	_nrf24l01SPISend
  9561                           
  9562                           ;nrf24l01.c: 155: RXPacket.packetData.byte = nrf24l01SPISend(0);
  9563  0D08  3000               	movlw	0
  9564  0D09  3187  27F2  318C   	fcall	_nrf24l01SPISend
  9565  0D0C  00F8               	movwf	??_nrf24l01ReceivePacket
  9566  0D0D  0878               	movf	??_nrf24l01ReceivePacket,w
  9567  0D0E  0022               	movlb	2	; select bank2
  9568  0D0F  00A4               	movwf	_RXPacket^(0+256)
  9569                           
  9570                           ;nrf24l01.c: 156: width--;
  9571  0D10  3001               	movlw	1
  9572  0D11  02F9               	subwf	nrf24l01ReceivePacket@width,f
  9573                           
  9574                           ;nrf24l01.c: 158: for (i = 0; (i < width) && (i < sizeof(RXPacket.Message)); i++){
  9575  0D12  01FA               	clrf	nrf24l01ReceivePacket@i
  9576  0D13  2D24               	goto	i1l3745
  9577  0D14                     i1l3741:	
  9578                           
  9579                           ;nrf24l01.c: 160: RXPacket.Message[i] = nrf24l01SPISend(0);
  9580  0D14  3000               	movlw	0
  9581  0D15  3187  27F2  318C   	fcall	_nrf24l01SPISend
  9582  0D18  00F8               	movwf	??_nrf24l01ReceivePacket
  9583  0D19  087A               	movf	nrf24l01ReceivePacket@i,w
  9584  0D1A  3E25               	addlw	(low ((_RXPacket| (0+256)+1)))& (0+255)
  9585  0D1B  0086               	movwf	6
  9586  0D1C  3001               	movlw	1	; select bank2/3
  9587  0D1D  0087               	movwf	7
  9588  0D1E  0878               	movf	??_nrf24l01ReceivePacket,w
  9589  0D1F  0081               	movwf	1
  9590  0D20  3001               	movlw	1
  9591  0D21  00F8               	movwf	??_nrf24l01ReceivePacket
  9592  0D22  0878               	movf	??_nrf24l01ReceivePacket,w
  9593  0D23  07FA               	addwf	nrf24l01ReceivePacket@i,f
  9594  0D24                     i1l3745:	
  9595  0D24  0879               	movf	nrf24l01ReceivePacket@width,w
  9596  0D25  027A               	subwf	nrf24l01ReceivePacket@i,w
  9597  0D26  1803               	skipnc
  9598  0D27  2D2C               	goto	i1l3749
  9599  0D28  3020               	movlw	32
  9600  0D29  027A               	subwf	nrf24l01ReceivePacket@i,w
  9601  0D2A  1C03               	skipc
  9602  0D2B  2D14               	goto	i1l3741
  9603  0D2C                     i1l3749:	
  9604                           
  9605                           ;nrf24l01.c: 161: };nrf24l01.c: 164: nrf24l01SPIEnd();
  9606  0D2C  3188  2029  318C   	fcall	_nrf24l01SPIEnd
  9607                           
  9608                           ;nrf24l01.c: 167: nrf24l01CEHigh();
  9609  0D2F  3188  2017         	fcall	_nrf24l01CEHigh
  9610  0D31  0008               	return
  9611  0D32                     __end_of_nrf24l01ReceivePacket:	
  9612                           
  9613                           	psect	text44
  9614  08BD                     __ptext44:	
  9615 ;; *************** function i1_memset *****************
  9616 ;; Defined at:
  9617 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\memset.c"
  9618 ;; Parameters:    Size  Location     Type
  9619 ;;  p1              2    0[COMMON] PTR void 
  9620 ;;		 -> RXPacket(33), main@packet(33), loop@packet(33), 
  9621 ;;  c               2    2[COMMON] int 
  9622 ;;  n               2    4[COMMON] unsigned int 
  9623 ;; Auto vars:     Size  Location     Type
  9624 ;;  memset          2    6[COMMON] PTR unsigned char 
  9625 ;;		 -> RXPacket(33), main@packet(33), loop@packet(33), 
  9626 ;; Return value:  Size  Location     Type
  9627 ;;                  1    wreg      PTR void 
  9628 ;; Registers used:
  9629 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  9630 ;; Tracked objects:
  9631 ;;		On entry : 0/0
  9632 ;;		On exit  : 0/0
  9633 ;;		Unchanged: 0/0
  9634 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9635 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9636 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9637 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9638 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9639 ;;Total ram usage:        8 bytes
  9640 ;; Hardware stack levels used:    1
  9641 ;; This function calls:
  9642 ;;		Nothing
  9643 ;; This function is called by:
  9644 ;;		_nrf24l01ReceivePacket
  9645 ;; This function uses a non-reentrant model
  9646 ;;
  9647                           
  9648                           
  9649                           ;psect for function i1_memset
  9650  08BD                     i1_memset:	
  9651                           
  9652                           ;incstack = 0
  9653                           ; Regs used in i1_memset: [wreg+fsr1l+fsr1h+status,2+status,0]
  9654  08BD  0871               	movf	i1memset@p1+1,w
  9655  08BE  00F7               	movwf	i1memset@p+1
  9656  08BF  0870               	movf	i1memset@p1,w
  9657  08C0  00F6               	movwf	i1memset@p
  9658  08C1                     i1l3655:	
  9659  08C1  3001               	movlw	1
  9660  08C2  02F4               	subwf	i1memset@n,f
  9661  08C3  3000               	movlw	0
  9662  08C4  3BF5               	subwfb	i1memset@n+1,f
  9663  08C5  0A74               	incf	i1memset@n,w
  9664  08C6  1903               	btfsc	3,2
  9665  08C7  0A75               	incf	i1memset@n+1,w
  9666  08C8  1903               	btfsc	3,2
  9667  08C9  0008               	return
  9668  08CA  0876               	movf	i1memset@p,w
  9669  08CB  0086               	movwf	6
  9670  08CC  0877               	movf	i1memset@p+1,w
  9671  08CD  0087               	movwf	7
  9672  08CE  0872               	movf	i1memset@c,w
  9673  08CF  0081               	movwf	1
  9674  08D0  3001               	movlw	1
  9675  08D1  07F6               	addwf	i1memset@p,f
  9676  08D2  3000               	movlw	0
  9677  08D3  3DF7               	addwfc	i1memset@p+1,f
  9678  08D4  28C1               	goto	i1l3655
  9679  08D5                     __end_ofi1_memset:	
  9680                           ;	Return value of i1_memset is never used
  9681                           
  9682                           
  9683                           	psect	text45
  9684  0A31                     __ptext45:	
  9685 ;; *************** function _nrf24l01CheckACK *****************
  9686 ;; Defined at:
  9687 ;;		line 98 in file "nrf24l01.c"
  9688 ;; Parameters:    Size  Location     Type
  9689 ;;		None
  9690 ;; Auto vars:     Size  Location     Type
  9691 ;;		None
  9692 ;; Return value:  Size  Location     Type
  9693 ;;                  1    wreg      void 
  9694 ;; Registers used:
  9695 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9696 ;; Tracked objects:
  9697 ;;		On entry : 0/0
  9698 ;;		On exit  : 0/0
  9699 ;;		Unchanged: 0/0
  9700 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9701 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9702 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9703 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9704 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9705 ;;Total ram usage:        1 bytes
  9706 ;; Hardware stack levels used:    1
  9707 ;; Hardware stack levels required when called:    4
  9708 ;; This function calls:
  9709 ;;		_strcmp
  9710 ;;		i1_nrf24l01SetRXMode
  9711 ;; This function is called by:
  9712 ;;		_nrf24l01ISR
  9713 ;; This function uses a non-reentrant model
  9714 ;;
  9715                           
  9716                           
  9717                           ;psect for function _nrf24l01CheckACK
  9718  0A31                     _nrf24l01CheckACK:	
  9719                           
  9720                           ;nrf24l01.c: 102: if (!RXPacket.packetData.IsACK){
  9721                           
  9722                           ;incstack = 0
  9723                           ; Regs used in _nrf24l01CheckACK: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9724  0A31  0022               	movlb	2	; select bank2
  9725  0A32  1DA4               	btfss	_RXPacket^(0+256),3
  9726  0A33  0008               	return
  9727                           
  9728                           ;nrf24l01.c: 104: };nrf24l01.c: 107: nrf24l01.RXPending = 0;
  9729                           
  9730                           ;nrf24l01.c: 103: return;
  9731  0A34  0020               	movlb	0	; select bank0
  9732  0A35  10EE               	bcf	_nrf24l01,1	;volatile
  9733                           
  9734                           ;nrf24l01.c: 110: if (!TXPacket->packetData.ACKRequest){
  9735  0A36  0021               	movlb	1	; select bank1
  9736  0A37  086D               	movf	_TXPacket^(0+128),w
  9737  0A38  0086               	movwf	6
  9738  0A39  0187               	clrf	7
  9739  0A3A  1D01               	btfss	1,2
  9740  0A3B  0008               	return
  9741                           
  9742                           ;nrf24l01.c: 112: };nrf24l01.c: 115: if (strcmp(TXPacket->Message, RXPacket.Message) != 
      +                          0){
  9743                           
  9744                           ;nrf24l01.c: 111: return;
  9745  0A3C  3025               	movlw	(low ((_RXPacket| (0+256)+1)))& (0+255)
  9746  0A3D  00F7               	movwf	??_nrf24l01CheckACK
  9747  0A3E  0877               	movf	??_nrf24l01CheckACK,w
  9748  0A3F  00F0               	movwf	strcmp@s2
  9749  0A40  086D               	movf	_TXPacket^(0+128),w
  9750  0A41  3E01               	addlw	1
  9751  0A42  318A  2273  318A   	fcall	_strcmp
  9752  0A45  0870               	movf	?_strcmp,w
  9753  0A46  0471               	iorwf	?_strcmp+1,w
  9754  0A47  1D03               	btfss	3,2
  9755  0A48  0008               	return
  9756                           
  9757                           ;nrf24l01.c: 117: };nrf24l01.c: 124: TXPacket->packetData.ACKRequest = 0;
  9758                           
  9759                           ;nrf24l01.c: 116: return;
  9760  0A49  0021               	movlb	1	; select bank1
  9761  0A4A  086D               	movf	_TXPacket^(0+128),w
  9762  0A4B  0086               	movwf	6
  9763  0A4C  0187               	clrf	7
  9764  0A4D  1101               	bcf	1,2
  9765                           
  9766                           ;nrf24l01.c: 127: nrf24l01SetRXMode(0);
  9767  0A4E  3000               	movlw	0
  9768  0A4F  318B  2371         	fcall	i1_nrf24l01SetRXMode
  9769  0A51  0008               	return
  9770  0A52                     __end_of_nrf24l01CheckACK:	
  9771                           
  9772                           	psect	text46
  9773  0B71                     __ptext46:	
  9774 ;; *************** function i1_nrf24l01SetRXMode *****************
  9775 ;; Defined at:
  9776 ;;		line 54 in file "nrf24l01.c"
  9777 ;; Parameters:    Size  Location     Type
  9778 ;;  rxMode          1    wreg     unsigned char 
  9779 ;; Auto vars:     Size  Location     Type
  9780 ;;  rxMode          1    6[COMMON] unsigned char 
  9781 ;;  nrf24l01SetR    1    5[COMMON] struct .
  9782 ;; Return value:  Size  Location     Type
  9783 ;;                  1    wreg      void 
  9784 ;; Registers used:
  9785 ;;		wreg, status,2, status,0, pclath, cstack
  9786 ;; Tracked objects:
  9787 ;;		On entry : 0/0
  9788 ;;		On exit  : 0/0
  9789 ;;		Unchanged: 0/0
  9790 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9791 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9792 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9793 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9794 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9795 ;;Total ram usage:        3 bytes
  9796 ;; Hardware stack levels used:    1
  9797 ;; Hardware stack levels required when called:    3
  9798 ;; This function calls:
  9799 ;;		_nrf24l01CEHigh
  9800 ;;		_nrf24l01CELow
  9801 ;;		i1_nrf24l01Send
  9802 ;; This function is called by:
  9803 ;;		_nrf24l01CheckACK
  9804 ;;		_nrf24l01ISR
  9805 ;; This function uses a non-reentrant model
  9806 ;;
  9807                           
  9808                           
  9809                           ;psect for function i1_nrf24l01SetRXMode
  9810  0B71                     i1_nrf24l01SetRXMode:	
  9811                           
  9812                           ;incstack = 0
  9813                           ; Regs used in i1_nrf24l01SetRXMode: [wreg+status,2+status,0+pclath+cstack]
  9814                           ;i1nrf24l01SetRXMode@rxMode stored from wreg
  9815  0B71  00F6               	movwf	i1nrf24l01SetRXMode@rxMode
  9816                           
  9817                           ;nrf24l01.c: 56: n_CONFIG_t config;;nrf24l01.c: 59: config.byte = nrf24l01Send((unsigned
      +                          ) 0b00000000 | (unsigned) 0x00, 0);
  9818  0B72  01F1               	clrf	i1nrf24l01Send@data
  9819  0B73  3000               	movlw	0
  9820  0B74  3189  2109  318B   	fcall	i1_nrf24l01Send
  9821  0B77  00F4               	movwf	??i1_nrf24l01SetRXMode
  9822  0B78  0874               	movf	??i1_nrf24l01SetRXMode,w
  9823  0B79  00F5               	movwf	i1nrf24l01SetRXMode@config
  9824                           
  9825                           ;nrf24l01.c: 62: if (config.PRIM_RX != rxMode){
  9826  0B7A  0875               	movf	i1nrf24l01SetRXMode@config,w
  9827  0B7B  3901               	andlw	1
  9828  0B7C  0676               	xorwf	i1nrf24l01SetRXMode@rxMode,w
  9829  0B7D  1903               	skipnz
  9830  0B7E  2BA1               	goto	i1l3071
  9831                           
  9832                           ;nrf24l01.c: 65: nrf24l01CELow();
  9833  0B7F  3188  201A  318B   	fcall	_nrf24l01CELow
  9834                           
  9835                           ;nrf24l01.c: 66: _delay((unsigned long)((200)*(16000000/4000000.0)));
  9836  0B82  30A0               	movlw	160
  9837  0B83                     u371_27:	
  9838  0B83  3200               	nop2
  9839  0B84  0B89               	decfsz	9,f
  9840  0B85  2B83               	goto	u371_27
  9841                           
  9842                           ;nrf24l01.c: 69: config.PRIM_RX = rxMode;
  9843  0B86  0876               	movf	i1nrf24l01SetRXMode@rxMode,w
  9844  0B87  3901               	andlw	1
  9845  0B88  1075               	bcf	i1nrf24l01SetRXMode@config,0
  9846  0B89  1D03               	skipz
  9847  0B8A  1475               	bsf	i1nrf24l01SetRXMode@config,0
  9848                           
  9849                           ;nrf24l01.c: 70: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x00, config.byte);
  9850  0B8B  0875               	movf	i1nrf24l01SetRXMode@config,w
  9851  0B8C  00F4               	movwf	??i1_nrf24l01SetRXMode
  9852  0B8D  0874               	movf	??i1_nrf24l01SetRXMode,w
  9853  0B8E  00F1               	movwf	i1nrf24l01Send@data
  9854  0B8F  3020               	movlw	32
  9855  0B90  3189  2109  318B   	fcall	i1_nrf24l01Send
  9856                           
  9857                           ;nrf24l01.c: 73: _delay((unsigned long)((200)*(16000000/4000000.0)));
  9858  0B93  30A0               	movlw	160
  9859  0B94                     u372_27:	
  9860  0B94  3200               	nop2
  9861  0B95  0B89               	decfsz	9,f
  9862  0B96  2B94               	goto	u372_27
  9863                           
  9864                           ;nrf24l01.c: 76: if (rxMode){
  9865  0B97  0876               	movf	i1nrf24l01SetRXMode@rxMode,w
  9866  0B98  1903               	btfsc	3,2
  9867  0B99  2BA1               	goto	i1l3071
  9868                           
  9869                           ;nrf24l01.c: 77: nrf24l01CEHigh();
  9870  0B9A  3188  2017  318B   	fcall	_nrf24l01CEHigh
  9871                           
  9872                           ;nrf24l01.c: 78: _delay((unsigned long)((200)*(16000000/4000000.0)));
  9873  0B9D  30A0               	movlw	160
  9874  0B9E                     u373_27:	
  9875  0B9E  3200               	nop2
  9876  0B9F  0B89               	decfsz	9,f
  9877  0BA0  2B9E               	goto	u373_27
  9878  0BA1                     i1l3071:	
  9879                           
  9880                           ;nrf24l01.c: 79: };nrf24l01.c: 80: };nrf24l01.c: 83: nrf24l01.RXMode = rxMode;
  9881  0BA1  0876               	movf	i1nrf24l01SetRXMode@rxMode,w
  9882  0BA2  3901               	andlw	1
  9883  0BA3  0020               	movlb	0	; select bank0
  9884  0BA4  116E               	bcf	_nrf24l01,2	;volatile
  9885  0BA5  1D03               	skipz
  9886  0BA6  156E               	bsf	_nrf24l01,2	;volatile
  9887  0BA7  0008               	return
  9888  0BA8                     __end_ofi1_nrf24l01SetRXMode:	
  9889                           
  9890                           	psect	text47
  9891  0909                     __ptext47:	
  9892 ;; *************** function i1_nrf24l01Send *****************
  9893 ;; Defined at:
  9894 ;;		line 9 in file "nrf24l01.c"
  9895 ;; Parameters:    Size  Location     Type
  9896 ;;  command         1    wreg     unsigned char 
  9897 ;;  data            1    1[COMMON] unsigned char 
  9898 ;; Auto vars:     Size  Location     Type
  9899 ;;  command         1    3[COMMON] unsigned char 
  9900 ;; Return value:  Size  Location     Type
  9901 ;;                  1    wreg      unsigned char 
  9902 ;; Registers used:
  9903 ;;		wreg, status,2, status,0, pclath, cstack
  9904 ;; Tracked objects:
  9905 ;;		On entry : 0/0
  9906 ;;		On exit  : 0/0
  9907 ;;		Unchanged: 0/0
  9908 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9909 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9910 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9911 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9912 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9913 ;;Total ram usage:        3 bytes
  9914 ;; Hardware stack levels used:    1
  9915 ;; Hardware stack levels required when called:    2
  9916 ;; This function calls:
  9917 ;;		_enableInterrupts
  9918 ;;		_nrf24l01SPIEnd
  9919 ;;		_nrf24l01SPISend
  9920 ;;		_nrf24l01SPIStart
  9921 ;; This function is called by:
  9922 ;;		_nrf24l01ReceivePacket
  9923 ;;		_nrf24l01ISR
  9924 ;;		i1_nrf24l01SetRXMode
  9925 ;; This function uses a non-reentrant model
  9926 ;;
  9927                           
  9928                           
  9929                           ;psect for function i1_nrf24l01Send
  9930  0909                     i1_nrf24l01Send:	
  9931                           
  9932                           ;incstack = 0
  9933                           ; Regs used in i1_nrf24l01Send: [wreg+status,2+status,0+pclath+cstack]
  9934                           ;i1nrf24l01Send@command stored from wreg
  9935  0909  00F3               	movwf	i1nrf24l01Send@command
  9936                           
  9937                           ;nrf24l01.c: 12: enableInterrupts(0);
  9938  090A  3000               	movlw	0
  9939  090B  3188  2030  3189   	fcall	_enableInterrupts
  9940                           
  9941                           ;nrf24l01.c: 15: nrf24l01SPIStart();
  9942  090E  3188  2038  3189   	fcall	_nrf24l01SPIStart
  9943                           
  9944                           ;nrf24l01.c: 18: nrf24l01SPISend(command);
  9945  0911  0873               	movf	i1nrf24l01Send@command,w
  9946  0912  3187  27F2  3189   	fcall	_nrf24l01SPISend
  9947                           
  9948                           ;nrf24l01.c: 21: data = nrf24l01SPISend(data);
  9949  0915  0871               	movf	i1nrf24l01Send@data,w
  9950  0916  3187  27F2  3189   	fcall	_nrf24l01SPISend
  9951  0919  00F2               	movwf	??i1_nrf24l01Send
  9952  091A  0872               	movf	??i1_nrf24l01Send,w
  9953  091B  00F1               	movwf	i1nrf24l01Send@data
  9954                           
  9955                           ;nrf24l01.c: 24: nrf24l01SPIEnd();
  9956  091C  3188  2029  3189   	fcall	_nrf24l01SPIEnd
  9957                           
  9958                           ;nrf24l01.c: 27: enableInterrupts(1);
  9959  091F  3001               	movlw	1
  9960  0920  3188  2030         	fcall	_enableInterrupts
  9961                           
  9962                           ;nrf24l01.c: 29: return data;
  9963  0922  0871               	movf	i1nrf24l01Send@data,w
  9964  0923  0008               	return
  9965  0924                     __end_ofi1_nrf24l01Send:	
  9966                           
  9967                           	psect	text48
  9968  0838                     __ptext48:	
  9969 ;; *************** function _nrf24l01SPIStart *****************
  9970 ;; Defined at:
  9971 ;;		line 65 in file "interface.c"
  9972 ;; Parameters:    Size  Location     Type
  9973 ;;		None
  9974 ;; Auto vars:     Size  Location     Type
  9975 ;;		None
  9976 ;; Return value:  Size  Location     Type
  9977 ;;                  1    wreg      void 
  9978 ;; Registers used:
  9979 ;;		wreg, status,2, status,0, pclath, cstack
  9980 ;; Tracked objects:
  9981 ;;		On entry : 0/0
  9982 ;;		On exit  : 0/0
  9983 ;;		Unchanged: 0/0
  9984 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9985 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9986 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9987 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9988 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9989 ;;Total ram usage:        0 bytes
  9990 ;; Hardware stack levels used:    1
  9991 ;; Hardware stack levels required when called:    8
  9992 ;; This function calls:
  9993 ;;		_nrf24l01CSLow
  9994 ;; This function is called by:
  9995 ;;		_nrf24l01Send
  9996 ;;		_nrf24l01ReceivePacket
  9997 ;;		_nrf24l01SendPacket
  9998 ;;		_nrf24l01SetTXPipe
  9999 ;;		_nrf24l01InitRegisters
 10000 ;;		i1_nrf24l01Send
 10001 ;; This function uses a non-reentrant model
 10002 ;;
 10003                           
 10004                           
 10005                           ;psect for function _nrf24l01SPIStart
 10006  0838                     _nrf24l01SPIStart:	
 10007                           
 10008                           ;interface.c: 66: nrf24l01CSLow();
 10009                           
 10010                           ;incstack = 0
 10011 ;; hardware stack exceeded
 10012                           ; Regs used in _nrf24l01SPIStart: [wreg+status,2+status,0+pclath+cstack]
 10013  0838  3188  2020  3188   	fcall	_nrf24l01CSLow
 10014                           
 10015                           ;interface.c: 67: _delay((unsigned long)((10)*(16000000/4000000.0)));
 10016  083B  300D               	movlw	13
 10017  083C                     u374_27:	
 10018  083C  0B89               	decfsz	9,f
 10019  083D  283C               	goto	u374_27
 10020  083E  0000               	nop
 10021  083F  0008               	return
 10022  0840                     __end_of_nrf24l01SPIStart:	
 10023                           
 10024                           	psect	text49
 10025  0820                     __ptext49:	
 10026 ;; *************** function _nrf24l01CSLow *****************
 10027 ;; Defined at:
 10028 ;;		line 18 in file "interface.c"
 10029 ;; Parameters:    Size  Location     Type
 10030 ;;		None
 10031 ;; Auto vars:     Size  Location     Type
 10032 ;;		None
 10033 ;; Return value:  Size  Location     Type
 10034 ;;                  1    wreg      void 
 10035 ;; Registers used:
 10036 ;;		None
 10037 ;; Tracked objects:
 10038 ;;		On entry : 0/0
 10039 ;;		On exit  : 0/0
 10040 ;;		Unchanged: 0/0
 10041 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10042 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10043 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10044 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10045 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10046 ;;Total ram usage:        0 bytes
 10047 ;; Hardware stack levels used:    1
 10048 ;; Hardware stack levels required when called:    7
 10049 ;; This function calls:
 10050 ;;		Nothing
 10051 ;; This function is called by:
 10052 ;;		_nrf24l01SPIStart
 10053 ;; This function uses a non-reentrant model
 10054 ;;
 10055                           
 10056                           
 10057                           ;psect for function _nrf24l01CSLow
 10058  0820                     _nrf24l01CSLow:	
 10059                           
 10060                           ;interface.c: 19: PORTAbits.RA1 = 0;
 10061                           
 10062                           ;incstack = 0
 10063 ;; hardware stack exceeded
 10064                           ; Regs used in _nrf24l01CSLow: []
 10065  0820  0020               	movlb	0	; select bank0
 10066  0821  108C               	bcf	12,1	;volatile
 10067  0822  0008               	return
 10068  0823                     __end_of_nrf24l01CSLow:	
 10069                           
 10070                           	psect	text50
 10071  07F2                     __ptext50:	
 10072 ;; *************** function _nrf24l01SPISend *****************
 10073 ;; Defined at:
 10074 ;;		line 52 in file "interface.c"
 10075 ;; Parameters:    Size  Location     Type
 10076 ;;  data            1    wreg     unsigned char 
 10077 ;; Auto vars:     Size  Location     Type
 10078 ;;  data            1    0[COMMON] unsigned char 
 10079 ;; Return value:  Size  Location     Type
 10080 ;;                  1    wreg      unsigned char 
 10081 ;; Registers used:
 10082 ;;		wreg
 10083 ;; Tracked objects:
 10084 ;;		On entry : 0/0
 10085 ;;		On exit  : 0/0
 10086 ;;		Unchanged: 0/0
 10087 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10088 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10089 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10090 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10091 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10092 ;;Total ram usage:        0 bytes
 10093 ;; Hardware stack levels used:    1
 10094 ;; Hardware stack levels required when called:    7
 10095 ;; This function calls:
 10096 ;;		Nothing
 10097 ;; This function is called by:
 10098 ;;		_nrf24l01Send
 10099 ;;		_nrf24l01ReceivePacket
 10100 ;;		_nrf24l01SendPacket
 10101 ;;		_nrf24l01SetTXPipe
 10102 ;;		_nrf24l01InitRegisters
 10103 ;;		i1_nrf24l01Send
 10104 ;; This function uses a non-reentrant model
 10105 ;;
 10106                           
 10107                           
 10108                           ;psect for function _nrf24l01SPISend
 10109  07F2                     _nrf24l01SPISend:	
 10110                           
 10111                           ;incstack = 0
 10112 ;; hardware stack exceeded
 10113                           ; Regs used in _nrf24l01SPISend: [wreg]
 10114                           ;nrf24l01SPISend@data stored from wreg
 10115  07F2  00F0               	movwf	nrf24l01SPISend@data
 10116                           
 10117                           ;interface.c: 53: SSP1BUF = data;
 10118  07F3  0870               	movf	nrf24l01SPISend@data,w
 10119  07F4  0024               	movlb	4	; select bank4
 10120  07F5  0091               	movwf	17	;volatile
 10121                           
 10122                           ;interface.c: 55: PORTCbits.RC4 = 1;
 10123  07F6  0020               	movlb	0	; select bank0
 10124  07F7  160E               	bsf	14,4	;volatile
 10125  07F8                     i1l94:	
 10126                           ;interface.c: 57: while (!SSP1STATbits.BF){
 10127                           
 10128  07F8  0024               	movlb	4	; select bank4
 10129  07F9  1814               	btfsc	20,0	;volatile
 10130  07FA  2FFD               	goto	i1l2365
 10131                           
 10132                           ;interface.c: 58: __nop();
 10133  07FB  0000               	nop
 10134  07FC  2FF8               	goto	i1l94
 10135  07FD                     i1l2365:	
 10136                           
 10137                           ;interface.c: 59: };interface.c: 61: return SSP1BUF;
 10138  07FD  0811               	movf	17,w	;volatile
 10139  07FE  0008               	return
 10140  07FF                     __end_of_nrf24l01SPISend:	
 10141                           
 10142                           	psect	text51
 10143  0829                     __ptext51:	
 10144 ;; *************** function _nrf24l01SPIEnd *****************
 10145 ;; Defined at:
 10146 ;;		line 71 in file "interface.c"
 10147 ;; Parameters:    Size  Location     Type
 10148 ;;		None
 10149 ;; Auto vars:     Size  Location     Type
 10150 ;;		None
 10151 ;; Return value:  Size  Location     Type
 10152 ;;                  1    wreg      void 
 10153 ;; Registers used:
 10154 ;;		wreg, status,2, status,0, pclath, cstack
 10155 ;; Tracked objects:
 10156 ;;		On entry : 0/0
 10157 ;;		On exit  : 0/0
 10158 ;;		Unchanged: 0/0
 10159 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10160 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10161 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10162 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10163 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10164 ;;Total ram usage:        0 bytes
 10165 ;; Hardware stack levels used:    1
 10166 ;; Hardware stack levels required when called:    8
 10167 ;; This function calls:
 10168 ;;		_nrf24l01CSHigh
 10169 ;; This function is called by:
 10170 ;;		_nrf24l01Send
 10171 ;;		_nrf24l01ReceivePacket
 10172 ;;		_nrf24l01SendPacket
 10173 ;;		_nrf24l01SetTXPipe
 10174 ;;		_nrf24l01InitRegisters
 10175 ;;		i1_nrf24l01Send
 10176 ;; This function uses a non-reentrant model
 10177 ;;
 10178                           
 10179                           
 10180                           ;psect for function _nrf24l01SPIEnd
 10181  0829                     _nrf24l01SPIEnd:	
 10182                           
 10183                           ;interface.c: 72: _delay((unsigned long)((10)*(16000000/4000000.0)));
 10184                           
 10185                           ;incstack = 0
 10186 ;; hardware stack exceeded
 10187                           ; Regs used in _nrf24l01SPIEnd: [wreg+status,2+status,0+pclath+cstack]
 10188  0829  300D               	movlw	13
 10189  082A                     u375_27:	
 10190  082A  0B89               	decfsz	9,f
 10191  082B  282A               	goto	u375_27
 10192  082C  0000               	nop
 10193                           
 10194                           ;interface.c: 73: nrf24l01CSHigh();
 10195  082D  3188  201D         	fcall	_nrf24l01CSHigh
 10196  082F  0008               	return
 10197  0830                     __end_of_nrf24l01SPIEnd:	
 10198                           
 10199                           	psect	text52
 10200  081D                     __ptext52:	
 10201 ;; *************** function _nrf24l01CSHigh *****************
 10202 ;; Defined at:
 10203 ;;		line 23 in file "interface.c"
 10204 ;; Parameters:    Size  Location     Type
 10205 ;;		None
 10206 ;; Auto vars:     Size  Location     Type
 10207 ;;		None
 10208 ;; Return value:  Size  Location     Type
 10209 ;;                  1    wreg      void 
 10210 ;; Registers used:
 10211 ;;		None
 10212 ;; Tracked objects:
 10213 ;;		On entry : 0/0
 10214 ;;		On exit  : 0/0
 10215 ;;		Unchanged: 0/0
 10216 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10217 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10218 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10219 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10220 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10221 ;;Total ram usage:        0 bytes
 10222 ;; Hardware stack levels used:    1
 10223 ;; Hardware stack levels required when called:    7
 10224 ;; This function calls:
 10225 ;;		Nothing
 10226 ;; This function is called by:
 10227 ;;		_nrf24l01SPIEnd
 10228 ;; This function uses a non-reentrant model
 10229 ;;
 10230                           
 10231                           
 10232                           ;psect for function _nrf24l01CSHigh
 10233  081D                     _nrf24l01CSHigh:	
 10234                           
 10235                           ;interface.c: 24: PORTAbits.RA1 = 1;
 10236                           
 10237                           ;incstack = 0
 10238 ;; hardware stack exceeded
 10239                           ; Regs used in _nrf24l01CSHigh: []
 10240  081D  0020               	movlb	0	; select bank0
 10241  081E  148C               	bsf	12,1	;volatile
 10242  081F  0008               	return
 10243  0820                     __end_of_nrf24l01CSHigh:	
 10244                           
 10245                           	psect	text53
 10246  0830                     __ptext53:	
 10247 ;; *************** function _enableInterrupts *****************
 10248 ;; Defined at:
 10249 ;;		line 77 in file "interface.c"
 10250 ;; Parameters:    Size  Location     Type
 10251 ;;  enable          1    wreg     unsigned char 
 10252 ;; Auto vars:     Size  Location     Type
 10253 ;;  enable          1    0[COMMON] unsigned char 
 10254 ;; Return value:  Size  Location     Type
 10255 ;;                  1    wreg      void 
 10256 ;; Registers used:
 10257 ;;		wreg, status,0
 10258 ;; Tracked objects:
 10259 ;;		On entry : 0/0
 10260 ;;		On exit  : 0/0
 10261 ;;		Unchanged: 0/0
 10262 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10263 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10264 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10265 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10266 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10267 ;;Total ram usage:        0 bytes
 10268 ;; Hardware stack levels used:    1
 10269 ;; Hardware stack levels required when called:    7
 10270 ;; This function calls:
 10271 ;;		Nothing
 10272 ;; This function is called by:
 10273 ;;		_nrf24l01Send
 10274 ;;		_nrf24l01SendPacket
 10275 ;;		i1_nrf24l01Send
 10276 ;; This function uses a non-reentrant model
 10277 ;;
 10278                           
 10279                           
 10280                           ;psect for function _enableInterrupts
 10281  0830                     _enableInterrupts:	
 10282                           
 10283                           ;incstack = 0
 10284 ;; hardware stack exceeded
 10285                           ; Regs used in _enableInterrupts: [wreg+status,0]
 10286                           ;enableInterrupts@enable stored from wreg
 10287  0830  00F0               	movwf	enableInterrupts@enable
 10288                           
 10289                           ;interface.c: 78: PIE0bits.INTE = enable;
 10290  0831  0C70               	rrf	enableInterrupts@enable,w
 10291  0832  0021               	movlb	1	; select bank1
 10292  0833  1C03               	skipc
 10293  0834  1010               	bcf	16,0	;volatile
 10294  0835  1803               	skipnc
 10295  0836  1410               	bsf	16,0	;volatile
 10296  0837  0008               	return
 10297  0838                     __end_of_enableInterrupts:	
 10298                           
 10299                           	psect	text54
 10300  081A                     __ptext54:	
 10301 ;; *************** function _nrf24l01CELow *****************
 10302 ;; Defined at:
 10303 ;;		line 8 in file "interface.c"
 10304 ;; Parameters:    Size  Location     Type
 10305 ;;		None
 10306 ;; Auto vars:     Size  Location     Type
 10307 ;;		None
 10308 ;; Return value:  Size  Location     Type
 10309 ;;                  1    wreg      void 
 10310 ;; Registers used:
 10311 ;;		None
 10312 ;; Tracked objects:
 10313 ;;		On entry : 0/0
 10314 ;;		On exit  : 0/0
 10315 ;;		Unchanged: 0/0
 10316 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10317 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10318 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10319 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10320 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10321 ;;Total ram usage:        0 bytes
 10322 ;; Hardware stack levels used:    1
 10323 ;; Hardware stack levels required when called:    7
 10324 ;; This function calls:
 10325 ;;		Nothing
 10326 ;; This function is called by:
 10327 ;;		_nrf24l01SetRXMode
 10328 ;;		_nrf24l01ReceivePacket
 10329 ;;		_nrf24l01SendPacket
 10330 ;;		_nrf24l01Init
 10331 ;;		i1_nrf24l01SetRXMode
 10332 ;; This function uses a non-reentrant model
 10333 ;;
 10334                           
 10335                           
 10336                           ;psect for function _nrf24l01CELow
 10337  081A                     _nrf24l01CELow:	
 10338                           
 10339                           ;interface.c: 9: PORTAbits.RA0 = 0;
 10340                           
 10341                           ;incstack = 0
 10342 ;; hardware stack exceeded
 10343                           ; Regs used in _nrf24l01CELow: []
 10344  081A  0020               	movlb	0	; select bank0
 10345  081B  100C               	bcf	12,0	;volatile
 10346  081C  0008               	return
 10347  081D                     __end_of_nrf24l01CELow:	
 10348                           
 10349                           	psect	text55
 10350  0817                     __ptext55:	
 10351 ;; *************** function _nrf24l01CEHigh *****************
 10352 ;; Defined at:
 10353 ;;		line 13 in file "interface.c"
 10354 ;; Parameters:    Size  Location     Type
 10355 ;;		None
 10356 ;; Auto vars:     Size  Location     Type
 10357 ;;		None
 10358 ;; Return value:  Size  Location     Type
 10359 ;;                  1    wreg      void 
 10360 ;; Registers used:
 10361 ;;		None
 10362 ;; Tracked objects:
 10363 ;;		On entry : 0/0
 10364 ;;		On exit  : 0/0
 10365 ;;		Unchanged: 0/0
 10366 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10367 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10368 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10369 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10370 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10371 ;;Total ram usage:        0 bytes
 10372 ;; Hardware stack levels used:    1
 10373 ;; Hardware stack levels required when called:    7
 10374 ;; This function calls:
 10375 ;;		Nothing
 10376 ;; This function is called by:
 10377 ;;		_nrf24l01SetRXMode
 10378 ;;		_nrf24l01ReceivePacket
 10379 ;;		_nrf24l01SendPacket
 10380 ;;		_nrf24l01Init
 10381 ;;		i1_nrf24l01SetRXMode
 10382 ;; This function uses a non-reentrant model
 10383 ;;
 10384                           
 10385                           
 10386                           ;psect for function _nrf24l01CEHigh
 10387  0817                     _nrf24l01CEHigh:	
 10388                           
 10389                           ;interface.c: 14: PORTAbits.RA0 = 1;
 10390                           
 10391                           ;incstack = 0
 10392 ;; hardware stack exceeded
 10393                           ; Regs used in _nrf24l01CEHigh: []
 10394  0817  0020               	movlb	0	; select bank0
 10395  0818  140C               	bsf	12,0	;volatile
 10396  0819  0008               	return
 10397  081A                     __end_of_nrf24l01CEHigh:	
 10398                           
 10399                           	psect	text56
 10400  0A73                     __ptext56:	
 10401 ;; *************** function _strcmp *****************
 10402 ;; Defined at:
 10403 ;;		line 33 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\strcmp.c"
 10404 ;; Parameters:    Size  Location     Type
 10405 ;;  s1              1    wreg     PTR const unsigned char 
 10406 ;;		 -> packet.Message(32), packet.Message(32), NULL(0), main@packet(33), 
 10407 ;;		 -> loop@packet(33), 
 10408 ;;  s2              1    0[COMMON] PTR const unsigned char 
 10409 ;;		 -> RXPacket.Message(32), RXPacket(33), 
 10410 ;; Auto vars:     Size  Location     Type
 10411 ;;  s1              1    4[COMMON] PTR const unsigned char 
 10412 ;;		 -> packet.Message(32), packet.Message(32), NULL(0), main@packet(33), 
 10413 ;;		 -> loop@packet(33), 
 10414 ;;  r               1    3[COMMON] char 
 10415 ;; Return value:  Size  Location     Type
 10416 ;;                  2    0[COMMON] int 
 10417 ;; Registers used:
 10418 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0
 10419 ;; Tracked objects:
 10420 ;;		On entry : 0/0
 10421 ;;		On exit  : 0/0
 10422 ;;		Unchanged: 0/0
 10423 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10424 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10425 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10426 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10427 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10428 ;;Total ram usage:        5 bytes
 10429 ;; Hardware stack levels used:    1
 10430 ;; This function calls:
 10431 ;;		Nothing
 10432 ;; This function is called by:
 10433 ;;		_nrf24l01CheckACK
 10434 ;; This function uses a non-reentrant model
 10435 ;;
 10436                           
 10437                           
 10438                           ;psect for function _strcmp
 10439  0A73                     _strcmp:	
 10440                           
 10441                           ;incstack = 0
 10442                           ; Regs used in _strcmp: [wreg-fsr1h+status,2+status,0]
 10443                           ;strcmp@s1 stored from wreg
 10444  0A73  00F4               	movwf	strcmp@s1
 10445  0A74  2A7D               	goto	i1l2993
 10446  0A75                     i1l2989:	
 10447  0A75  3001               	movlw	1
 10448  0A76  00F2               	movwf	??_strcmp
 10449  0A77  0872               	movf	??_strcmp,w
 10450  0A78  07F4               	addwf	strcmp@s1,f
 10451  0A79  3001               	movlw	1
 10452  0A7A  00F2               	movwf	??_strcmp
 10453  0A7B  0872               	movf	??_strcmp,w
 10454  0A7C  07F0               	addwf	strcmp@s2,f
 10455  0A7D                     i1l2993:	
 10456  0A7D  0874               	movf	strcmp@s1,w
 10457  0A7E  0086               	movwf	6
 10458  0A7F  0187               	clrf	7
 10459  0A80  0870               	movf	strcmp@s2,w
 10460  0A81  0084               	movwf	4
 10461  0A82  3001               	movlw	1	; select bank2/3
 10462  0A83  0085               	movwf	5
 10463  0A84  0300               	decf	0,w
 10464  0A85  3AFF               	xorlw	255
 10465  0A86  0701               	addwf	1,w
 10466  0A87  00F2               	movwf	??_strcmp
 10467  0A88  0872               	movf	??_strcmp,w
 10468  0A89  00F3               	movwf	strcmp@r
 10469  0A8A  0873               	movf	strcmp@r,w
 10470  0A8B  1D03               	btfss	3,2
 10471  0A8C  2A93               	goto	i1l2997
 10472  0A8D  0874               	movf	strcmp@s1,w
 10473  0A8E  0086               	movwf	6
 10474  0A8F  0187               	clrf	7
 10475  0A90  0801               	movf	1,w
 10476  0A91  1D03               	btfss	3,2
 10477  0A92  2A75               	goto	i1l2989
 10478  0A93                     i1l2997:	
 10479  0A93  0873               	movf	strcmp@r,w
 10480  0A94  00F0               	movwf	?_strcmp
 10481  0A95  01F1               	clrf	?_strcmp+1
 10482  0A96  1BF0               	btfsc	?_strcmp,7
 10483  0A97  03F1               	decf	?_strcmp+1,f
 10484  0A98  0008               	return
 10485  0A99                     __end_of_strcmp:	
 10486                           
 10487                           	psect	text57
 10488  08A5                     __ptext57:	
 10489 ;; *************** function _exception *****************
 10490 ;; Defined at:
 10491 ;;		line 81 in file "interface.c"
 10492 ;; Parameters:    Size  Location     Type
 10493 ;;  exception       1    wreg     unsigned char 
 10494 ;; Auto vars:     Size  Location     Type
 10495 ;;  exception       1   12[COMMON] unsigned char 
 10496 ;; Return value:  Size  Location     Type
 10497 ;;                  1    wreg      void 
 10498 ;; Registers used:
 10499 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10500 ;; Tracked objects:
 10501 ;;		On entry : 0/0
 10502 ;;		On exit  : 0/0
 10503 ;;		Unchanged: 0/0
 10504 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10505 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10506 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10507 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10508 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10509 ;;Total ram usage:        3 bytes
 10510 ;; Hardware stack levels used:    1
 10511 ;; Hardware stack levels required when called:    2
 10512 ;; This function calls:
 10513 ;;		_flashUpdate
 10514 ;;		i1___wmul
 10515 ;; This function is called by:
 10516 ;;		_nrf24l01ISR
 10517 ;; This function uses a non-reentrant model
 10518 ;;
 10519                           
 10520                           
 10521                           ;psect for function _exception
 10522  08A5                     _exception:	
 10523                           
 10524                           ;incstack = 0
 10525                           ; Regs used in _exception: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10526                           ;exception@exception stored from wreg
 10527  08A5  00FC               	movwf	exception@exception
 10528                           
 10529                           ;interface.c: 82: romData.bootMode = (unsigned) (exception * 10);
 10530  08A6  087C               	movf	exception@exception,w
 10531  08A7  00FA               	movwf	??_exception
 10532  08A8  01FB               	clrf	??_exception+1
 10533  08A9  087A               	movf	??_exception,w
 10534  08AA  00F0               	movwf	i1___wmul@multiplier
 10535  08AB  087B               	movf	??_exception+1,w
 10536  08AC  00F1               	movwf	i1___wmul@multiplier+1
 10537  08AD  300A               	movlw	10
 10538  08AE  00F2               	movwf	i1___wmul@multiplicand
 10539  08AF  3000               	movlw	0
 10540  08B0  00F3               	movwf	i1___wmul@multiplicand+1
 10541  08B1  3188  20EE  3188   	fcall	i1___wmul
 10542  08B4  0871               	movf	?i1___wmul+1,w
 10543  08B5  0022               	movlb	2	; select bank2
 10544  08B6  00D7               	movwf	((_romData+1)^(0+256)+17)
 10545  08B7  0870               	movf	?i1___wmul,w
 10546  08B8  00D6               	movwf	(_romData^(0+256)+17)
 10547                           
 10548                           ;interface.c: 83: flashUpdate();
 10549  08B9  318A  2210         	fcall	_flashUpdate
 10550  08BB  0001               	reset	;# 
 10551  08BC  0008               	return
 10552  08BD                     __end_of_exception:	
 10553                           
 10554                           	psect	text58
 10555  08EE                     __ptext58:	
 10556 ;; *************** function i1___wmul *****************
 10557 ;; Defined at:
 10558 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\Umul16.c"
 10559 ;; Parameters:    Size  Location     Type
 10560 ;;  multiplier      2    0[COMMON] unsigned int 
 10561 ;;  multiplicand    2    2[COMMON] unsigned int 
 10562 ;; Auto vars:     Size  Location     Type
 10563 ;;  __wmul          2    4[COMMON] unsigned int 
 10564 ;; Return value:  Size  Location     Type
 10565 ;;                  2    0[COMMON] unsigned int 
 10566 ;; Registers used:
 10567 ;;		wreg, status,2, status,0
 10568 ;; Tracked objects:
 10569 ;;		On entry : 0/0
 10570 ;;		On exit  : 0/0
 10571 ;;		Unchanged: 0/0
 10572 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10573 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10574 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10575 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10576 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10577 ;;Total ram usage:        6 bytes
 10578 ;; Hardware stack levels used:    1
 10579 ;; This function calls:
 10580 ;;		Nothing
 10581 ;; This function is called by:
 10582 ;;		_exception
 10583 ;; This function uses a non-reentrant model
 10584 ;;
 10585                           
 10586                           
 10587                           ;psect for function i1___wmul
 10588  08EE                     i1___wmul:	
 10589                           
 10590                           ;incstack = 0
 10591                           ; Regs used in i1___wmul: [wreg+status,2+status,0]
 10592  08EE  01F4               	clrf	i1___wmul@product
 10593  08EF  01F5               	clrf	i1___wmul@product+1
 10594  08F0                     i1l3075:	
 10595  08F0  1C70               	btfss	i1___wmul@multiplier,0
 10596  08F1  28F6               	goto	i1l515
 10597  08F2  0872               	movf	i1___wmul@multiplicand,w
 10598  08F3  07F4               	addwf	i1___wmul@product,f
 10599  08F4  0873               	movf	i1___wmul@multiplicand+1,w
 10600  08F5  3DF5               	addwfc	i1___wmul@product+1,f
 10601  08F6                     i1l515:	
 10602  08F6  3001               	movlw	1
 10603  08F7                     u301_25:	
 10604  08F7  35F2               	lslf	i1___wmul@multiplicand,f
 10605  08F8  0DF3               	rlf	i1___wmul@multiplicand+1,f
 10606  08F9  0B89               	decfsz	9,f
 10607  08FA  28F7               	goto	u301_25
 10608  08FB  3001               	movlw	1
 10609  08FC                     u302_25:	
 10610  08FC  36F1               	lsrf	i1___wmul@multiplier+1,f
 10611  08FD  0CF0               	rrf	i1___wmul@multiplier,f
 10612  08FE  0B89               	decfsz	9,f
 10613  08FF  28FC               	goto	u302_25
 10614  0900  0870               	movf	i1___wmul@multiplier,w
 10615  0901  0471               	iorwf	i1___wmul@multiplier+1,w
 10616  0902  1D03               	btfss	3,2
 10617  0903  28F0               	goto	i1l3075
 10618  0904  0875               	movf	i1___wmul@product+1,w
 10619  0905  00F1               	movwf	?i1___wmul+1
 10620  0906  0874               	movf	i1___wmul@product,w
 10621  0907  00F0               	movwf	?i1___wmul
 10622  0908  0008               	return
 10623  0909                     __end_ofi1___wmul:	
 10624                           
 10625                           	psect	text59
 10626  0A10                     __ptext59:	
 10627 ;; *************** function _flashUpdate *****************
 10628 ;; Defined at:
 10629 ;;		line 97 in file "flash.c"
 10630 ;; Parameters:    Size  Location     Type
 10631 ;;		None
 10632 ;; Auto vars:     Size  Location     Type
 10633 ;;  i               2    8[COMMON] unsigned int 
 10634 ;; Return value:  Size  Location     Type
 10635 ;;                  1    wreg      void 
 10636 ;; Registers used:
 10637 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10638 ;; Tracked objects:
 10639 ;;		On entry : 0/0
 10640 ;;		On exit  : 0/0
 10641 ;;		Unchanged: 0/0
 10642 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10643 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10644 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10645 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10646 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10647 ;;Total ram usage:        4 bytes
 10648 ;; Hardware stack levels used:    1
 10649 ;; Hardware stack levels required when called:    1
 10650 ;; This function calls:
 10651 ;;		_flashWriteByte
 10652 ;; This function is called by:
 10653 ;;		_exception
 10654 ;; This function uses a non-reentrant model
 10655 ;;
 10656                           
 10657                           
 10658                           ;psect for function _flashUpdate
 10659  0A10                     _flashUpdate:	
 10660                           
 10661                           ;flash.c: 98: for (unsigned int i = 0; i < 32; i++){
 10662                           
 10663                           ;incstack = 0
 10664                           ; Regs used in _flashUpdate: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10665  0A10  01F8               	clrf	flashUpdate@i
 10666  0A11  01F9               	clrf	flashUpdate@i+1
 10667  0A12                     L4:	
 10668  0A12  3000               	movlw	0
 10669  0A13  0279               	subwf	flashUpdate@i+1,w
 10670  0A14  3020               	movlw	32
 10671  0A15  1903               	skipnz
 10672  0A16  0278               	subwf	flashUpdate@i,w
 10673  0A17  1803               	btfsc	3,0
 10674  0A18  0008               	return
 10675                           
 10676                           ;flash.c: 99: flashWriteByte(i, romHolder.array[i]);
 10677  0A19  0879               	movf	flashUpdate@i+1,w
 10678  0A1A  00F1               	movwf	flashWriteByte@offset+1
 10679  0A1B  0878               	movf	flashUpdate@i,w
 10680  0A1C  00F0               	movwf	flashWriteByte@offset
 10681  0A1D  0878               	movf	flashUpdate@i,w
 10682  0A1E  3EA0               	addlw	(low (_romHolder| (0+256)))& (0+255)
 10683  0A1F  0086               	movwf	6
 10684  0A20  3001               	movlw	1	; select bank3/4
 10685  0A21  0087               	movwf	7
 10686  0A22  0801               	movf	1,w
 10687  0A23  00F6               	movwf	??_flashUpdate
 10688  0A24  01F7               	clrf	??_flashUpdate+1
 10689  0A25  0876               	movf	??_flashUpdate,w
 10690  0A26  00F2               	movwf	flashWriteByte@data
 10691  0A27  0877               	movf	??_flashUpdate+1,w
 10692  0A28  00F3               	movwf	flashWriteByte@data+1
 10693  0A29  318B  230F  318A   	fcall	_flashWriteByte
 10694  0A2C  3001               	movlw	1
 10695  0A2D  07F8               	addwf	flashUpdate@i,f
 10696  0A2E  3000               	movlw	0
 10697  0A2F  3DF9               	addwfc	flashUpdate@i+1,f
 10698  0A30  2A12               	goto	L4
 10699  0A31                     __end_of_flashUpdate:	
 10700                           
 10701                           	psect	text60
 10702  0B0F                     __ptext60:	
 10703 ;; *************** function _flashWriteByte *****************
 10704 ;; Defined at:
 10705 ;;		line 8 in file "flash.c"
 10706 ;; Parameters:    Size  Location     Type
 10707 ;;  offset          2    0[COMMON] unsigned int 
 10708 ;;  data            2    2[COMMON] unsigned int 
 10709 ;; Auto vars:     Size  Location     Type
 10710 ;;  address         2    4[COMMON] unsigned int 
 10711 ;; Return value:  Size  Location     Type
 10712 ;;                  1    wreg      void 
 10713 ;; Registers used:
 10714 ;;		wreg, status,2, status,0
 10715 ;; Tracked objects:
 10716 ;;		On entry : 0/0
 10717 ;;		On exit  : 0/0
 10718 ;;		Unchanged: 0/0
 10719 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10720 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10721 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10722 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10723 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10724 ;;Total ram usage:        6 bytes
 10725 ;; Hardware stack levels used:    1
 10726 ;; This function calls:
 10727 ;;		Nothing
 10728 ;; This function is called by:
 10729 ;;		_flashUpdate
 10730 ;; This function uses a non-reentrant model
 10731 ;;
 10732                           
 10733                           
 10734                           ;psect for function _flashWriteByte
 10735  0B0F                     _flashWriteByte:	
 10736                           
 10737                           ;flash.c: 10: unsigned int address;;flash.c: 12: INTCONbits.GIE = 0;
 10738                           
 10739                           ;incstack = 0
 10740                           ; Regs used in _flashWriteByte: [wreg+status,2+status,0]
 10741  0B0F  138B               	bcf	11,7	;volatile
 10742                           
 10743                           ;flash.c: 15: PMCON1 = 0x00;
 10744  0B10  0031               	movlb	17	; select bank17
 10745  0B11  0195               	clrf	21	;volsfr
 10746                           
 10747                           ;flash.c: 17: address = (0x2000U - 32) + offset;
 10748  0B12  0870               	movf	flashWriteByte@offset,w
 10749  0B13  3EE0               	addlw	224
 10750  0B14  00F4               	movwf	flashWriteByte@address
 10751  0B15  301F               	movlw	31
 10752  0B16  3D71               	addwfc	flashWriteByte@offset+1,w
 10753  0B17  00F5               	movwf	flashWriteByte@address+1
 10754                           
 10755                           ;flash.c: 18: PMADRL = (char) (address >> 0);
 10756  0B18  0874               	movf	flashWriteByte@address,w
 10757  0B19  0091               	movwf	17	;volatile
 10758                           
 10759                           ;flash.c: 19: PMADRH = (char) (address >> 8);
 10760  0B1A  0875               	movf	flashWriteByte@address+1,w
 10761  0B1B  0092               	movwf	18	;volatile
 10762                           
 10763                           ;flash.c: 21: PMCON1bits.FREE = 1;
 10764  0B1C  1615               	bsf	21,4	;volsfr
 10765                           
 10766                           ;flash.c: 22: PMCON1bits.WREN = 1;
 10767  0B1D  1515               	bsf	21,2	;volsfr
 10768                           
 10769                           ;flash.c: 24: PMCON2 = 0x55;
 10770  0B1E  3055               	movlw	85
 10771  0B1F  0096               	movwf	22	;volsfr
 10772                           
 10773                           ;flash.c: 25: PMCON2 = 0xAA;
 10774  0B20  30AA               	movlw	170
 10775  0B21  0096               	movwf	22	;volsfr
 10776                           
 10777                           ;flash.c: 27: PMCON1bits.WR = 1;
 10778  0B22  1495               	bsf	21,1	;volsfr
 10779                           
 10780                           ;flash.c: 29: __nop();
 10781  0B23  0000               	nop
 10782                           
 10783                           ;flash.c: 30: __nop();
 10784  0B24  0000               	nop
 10785                           
 10786                           ;flash.c: 32: PMCON1bits.WREN = 0;
 10787  0B25  0031               	movlb	17	; select bank17
 10788  0B26  1115               	bcf	21,2	;volsfr
 10789                           
 10790                           ;flash.c: 36: PMCON1 = 0x00;
 10791  0B27  0195               	clrf	21	;volsfr
 10792                           
 10793                           ;flash.c: 38: PMADRL = (char) (address >> 0);
 10794  0B28  0874               	movf	flashWriteByte@address,w
 10795  0B29  0091               	movwf	17	;volatile
 10796                           
 10797                           ;flash.c: 39: PMADRH = (char) (address >> 8);
 10798  0B2A  0875               	movf	flashWriteByte@address+1,w
 10799  0B2B  0092               	movwf	18	;volatile
 10800                           
 10801                           ;flash.c: 41: PMCON1bits.FREE = 0;
 10802  0B2C  1215               	bcf	21,4	;volsfr
 10803                           
 10804                           ;flash.c: 42: PMCON1bits.LWLO = 1;
 10805  0B2D  1695               	bsf	21,5	;volsfr
 10806                           
 10807                           ;flash.c: 43: PMCON1bits.WREN = 1;
 10808  0B2E  1515               	bsf	21,2	;volsfr
 10809                           
 10810                           ;flash.c: 45: PMDATL = (data >> 0);
 10811  0B2F  0872               	movf	flashWriteByte@data,w
 10812  0B30  0093               	movwf	19	;volatile
 10813                           
 10814                           ;flash.c: 46: PMDATH = (data >> 8);
 10815  0B31  0873               	movf	flashWriteByte@data+1,w
 10816  0B32  0094               	movwf	20	;volatile
 10817                           
 10818                           ;flash.c: 48: PMCON1bits.LWLO = 0;
 10819  0B33  1295               	bcf	21,5	;volsfr
 10820                           
 10821                           ;flash.c: 50: PMCON2 = 0x55;
 10822  0B34  3055               	movlw	85
 10823  0B35  0096               	movwf	22	;volsfr
 10824                           
 10825                           ;flash.c: 51: PMCON2 = 0xAA;
 10826  0B36  30AA               	movlw	170
 10827  0B37  0096               	movwf	22	;volsfr
 10828                           
 10829                           ;flash.c: 53: PMCON1bits.WR = 1;
 10830  0B38  1495               	bsf	21,1	;volsfr
 10831                           
 10832                           ;flash.c: 55: __nop();
 10833  0B39  0000               	nop
 10834                           
 10835                           ;flash.c: 56: __nop();
 10836  0B3A  0000               	nop
 10837                           
 10838                           ;flash.c: 58: PMCON1bits.WREN = 0;
 10839  0B3B  0031               	movlb	17	; select bank17
 10840  0B3C  1115               	bcf	21,2	;volsfr
 10841                           
 10842                           ;flash.c: 61: INTCONbits.GIE = 1;
 10843  0B3D  178B               	bsf	11,7	;volatile
 10844  0B3E  0008               	return
 10845  0B3F                     __end_of_flashWriteByte:	
 10846  007E                     btemp	set	126	;btemp
 10847  007E                     int$flags	set	126
 10848  007E                     wtemp0	set	126


Data Sizes:
    Strings     38
    Constant    65
    Data        0
    BSS         108
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     78      79
    BANK1            80     77      79
    BANK2            80      0      73
    BANK3            80      0      32
    BANK4            80      0       0
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    ftoa@status	PTR int  size(1) Largest target is 2
		 -> setMessage@status(BANK1[2]), 

    strlen@s	PTR const unsigned char  size(2) Largest target is 33
		 -> packet.Message(BANK0[32]), packet.Message(BANK0[32]), NULL(NULL[0]), main@packet(BANK1[33]), 
		 -> loop@packet(BANK1[33]), romData(BANK2[19]), 

    strlen@cp	PTR const unsigned char  size(2) Largest target is 33
		 -> packet.Message(BANK0[32]), packet.Message(BANK0[32]), NULL(NULL[0]), main@packet(BANK1[33]), 
		 -> loop@packet(BANK1[33]), romData(BANK2[19]), 

    strcpy@from	PTR const unsigned char  size(2) Largest target is 4
		 -> STR_6(CODE[4]), 

    strcpy@to	PTR unsigned char  size(1) Largest target is 19
		 -> romData(BANK2[19]), 

    strcpy@cp	PTR unsigned char  size(1) Largest target is 19
		 -> romData(BANK2[19]), 

    strcmp@s2	PTR const unsigned char  size(1) Largest target is 33
		 -> RXPacket.Message(BANK2[32]), RXPacket(BANK2[33]), 

    strcmp@s1	PTR const unsigned char  size(1) Largest target is 33
		 -> packet.Message(BANK0[32]), packet.Message(BANK0[32]), NULL(NULL[0]), main@packet(BANK1[33]), 
		 -> loop@packet(BANK1[33]), 

    strcat@from	PTR const unsigned char  size(2) Largest target is 19
		 -> ftoa@buf(BANK2[17]), STR_7(CODE[5]), STR_5(CODE[6]), STR_4(CODE[5]), 
		 -> STR_3(CODE[5]), STR_2(CODE[2]), STR_1(CODE[2]), romData.name(BANK2[16]), 
		 -> romData(BANK2[19]), 

    strcat@to	PTR unsigned char  size(1) Largest target is 33
		 -> main@packet(BANK1[33]), loop@packet(BANK1[33]), 

    strcat@cp	PTR unsigned char  size(1) Largest target is 33
		 -> main@packet(BANK1[33]), loop@packet(BANK1[33]), 

    memset@p1	PTR void  size(2) Largest target is 33
		 -> RXPacket(BANK2[33]), main@packet(BANK1[33]), loop@packet(BANK1[33]), 

    memset@p	PTR unsigned char  size(2) Largest target is 33
		 -> RXPacket(BANK2[33]), main@packet(BANK1[33]), loop@packet(BANK1[33]), 

    ftoa@cp	PTR unsigned char  size(1) Largest target is 17
		 -> ftoa@buf(BANK2[17]), 

    sprintf@f	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_8(CODE[11]), 

    sprintf@sp	PTR unsigned char  size(1) Largest target is 17
		 -> ftoa@buf(BANK2[17]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    nrf24l01SendPacket@Packet	PTR struct . size(1) Largest target is 33
		 -> main@packet(BANK1[33]), loop@packet(BANK1[33]), 

    TXPacket	PTR struct . size(1) Largest target is 33
		 -> NULL(NULL[0]), main@packet(BANK1[33]), loop@packet(BANK1[33]), 

    sp__strcpy	PTR unsigned char  size(1) Largest target is 19
		 -> romData(BANK2[19]), 

    nrf24l01GetPipe@name	PTR unsigned char  size(1) Largest target is 19
		 -> romData(BANK2[19]), 

    sp__nrf24l01GetRXPacket	PTR struct . size(1) Largest target is 33
		 -> RXPacket(BANK2[33]), 

    checkTXPower@rxPacket	PTR struct . size(1) Largest target is 33
		 -> RXPacket(BANK2[33]), 

    sp__ftoa	PTR unsigned char  size(1) Largest target is 17
		 -> ftoa@buf(BANK2[17]), 

    setMessage@topic	PTR const unsigned char  size(2) Largest target is 6
		 -> STR_7(CODE[5]), STR_5(CODE[6]), STR_4(CODE[5]), STR_3(CODE[5]), 

    sp__strcat	PTR unsigned char  size(1) Largest target is 33
		 -> main@packet(BANK1[33]), loop@packet(BANK1[33]), 

    sp__memset	PTR void  size(2) Largest target is 33
		 -> RXPacket(BANK2[33]), main@packet(BANK1[33]), loop@packet(BANK1[33]), 

    setMessage@packet	PTR struct . size(1) Largest target is 33
		 -> main@packet(BANK1[33]), loop@packet(BANK1[33]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    _ISR->_nrf24l01ISR
    _nrf24l01ISR->_exception
    _nrf24l01ReceivePacket->i1_memset
    _nrf24l01CheckACK->i1_nrf24l01SetRXMode
    i1_nrf24l01SetRXMode->i1_nrf24l01Send
    _exception->_flashUpdate
    _flashUpdate->_flashWriteByte

Critical Paths under _main in BANK0

    _main->_setMessage
    _nrf24l01Init->_nrf24l01InitRegisters
    _nrf24l01InitRegisters->_nrf24l01SetRXPipe
    _nrf24l01InitRegisters->_nrf24l01SetTXPipe
    _nrf24l01SetTXPipe->___bmul
    _nrf24l01SetRXPipe->_nrf24l01Send
    _nrf24l01GetPipe->___llmod
    _loop->_setMessage
    _setMessage->_strcat
    _strcat->_ftoa
    _ftoa->_sprintf
    _sprintf->___llmod
    ___llmod->___lldiv
    ___lltoft->___ftpack
    ___fttol->___ftmul
    ___ftsub->___ftadd
    _nrf24l01SendPacket->_nrf24l01ChangeTXPower
    _nrf24l01SetRXMode->_nrf24l01Send
    _getADCValue->___ftadd
    ___lwtoft->___ftpack
    ___lbtoft->___ftpack
    ___ftmul->___ftpack
    ___ftdiv->___ftpack
    ___ftadd->___lbtoft
    _checkTXPower->_nrf24l01ChangeTXPower
    _nrf24l01ChangeTXPower->_nrf24l01Send
    _flashRealod->_flashReadByte

Critical Paths under _ISR in BANK0

    _ISR->_nrf24l01ISR

Critical Paths under _main in BANK1

    _main->_loop
    _loop->_setMessage

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                35    35      0   84087
                                             42 BANK1     35    35      0
                           ___lwtoft
                        _flashRealod
                               _loop
                    _nrf24l01GetPipe
                       _nrf24l01Init
                 _nrf24l01SendPacket
                  _nrf24l01SetRXPipe
                  _nrf24l01SetTXPipe
                         _setMessage
                              _sleep
                             _strcpy
 ---------------------------------------------------------------------------------
 (1) _strcpy                                               5     3      2     200
                                              1 BANK0      5     3      2
 ---------------------------------------------------------------------------------
 (1) _nrf24l01Init                                         2     2      0    5153
                                             20 BANK0      2     2      0
                     _nrf24l01CEHigh
                      _nrf24l01CELow
              _nrf24l01InitRegisters
              _nrf24l01InterfaceInit
 ---------------------------------------------------------------------------------
 (2) _nrf24l01InterfaceInit                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _nrf24l01InitRegisters                               12    12      0    5153
                                              8 BANK0     12    12      0
                             ___bmul
                     _nrf24l01SPIEnd
                    _nrf24l01SPISend
                   _nrf24l01SPIStart
                       _nrf24l01Send
                  _nrf24l01SetRXPipe
                  _nrf24l01SetTXPipe
 ---------------------------------------------------------------------------------
 (1) _nrf24l01SetTXPipe                                    3     3      0     314
                                              5 BANK0      3     3      0
                             ___bmul
                     _nrf24l01SPIEnd
                    _nrf24l01SPISend
                   _nrf24l01SPIStart
 ---------------------------------------------------------------------------------
 (2) ___bmul                                               4     3      1     270
                                              1 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (1) _nrf24l01SetRXPipe                                    4     4      0    2150
                                              4 BANK0      4     4      0
                       _nrf24l01Send
 ---------------------------------------------------------------------------------
 (1) _nrf24l01GetPipe                                     11    11      0     974
                                             25 BANK0     11    11      0
                            ___llmod
                             _strlen
 ---------------------------------------------------------------------------------
 (1) _loop                                                39    39      0   48587
                                              3 BANK1     39    39      0
                            ___ftadd
                       _checkTXPower
                        _getADCValue
                 _nrf24l01SendPacket
                         _setMessage
                              _sleep
 ---------------------------------------------------------------------------------
 (1) _sleep                                                0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _setMessage                                           9     4      5   17926
                                             72 BANK0      6     1      5
                                              0 BANK1      3     3      0
                           ___lwtoft (ARG)
                               _ftoa
                        _getADCValue (ARG)
                             _memset
                             _strcat
 ---------------------------------------------------------------------------------
 (2) _strcat                                               5     3      2     723
                                             67 BANK0      5     3      2
                               _ftoa (ARG)
 ---------------------------------------------------------------------------------
 (2) _memset                                               8     2      6     565
                                              1 BANK0      8     2      6
 ---------------------------------------------------------------------------------
 (2) _ftoa                                                14    10      4   15371
                                             53 BANK0     14    10      4
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                           ___lltoft
                            _sprintf
 ---------------------------------------------------------------------------------
 (3) _sprintf                                             36    26     10    2533
                                             25 BANK0     28    18     10
                            ___lldiv
                            ___llmod
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (4) _isdigit                                              2     2      0      68
                                              1 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4     574
                                              1 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (4) ___llmod                                             10     2      8     515
                                             15 BANK0     10     2      8
                            ___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (4) ___lldiv                                             14     6      8     340
                                              1 BANK0     14     6      8
 ---------------------------------------------------------------------------------
 (3) ___lltoft                                             6     2      4    3131
                                              9 BANK0      6     2      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) ___fttol                                             14    10      4     430
                                             25 BANK0     14    10      4
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftsub                                              6     0      6    4770
                                             30 BANK0      6     0      6
                            ___ftadd
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftneg                                              3     0      3     134
                                              1 BANK0      3     0      3
 ---------------------------------------------------------------------------------
 (3) ___ftge                                               9     3      6     314
                                              1 BANK0      9     3      6
 ---------------------------------------------------------------------------------
 (1) _nrf24l01SendPacket                                   4     4      0    5220
                                              8 BANK0      4     4      0
                   _enableInterrupts
                     _nrf24l01CEHigh
                      _nrf24l01CELow
              _nrf24l01ChangeTXPower
                     _nrf24l01SPIEnd
                    _nrf24l01SPISend
                   _nrf24l01SPIStart
                  _nrf24l01SetRXMode
                             _strlen
 ---------------------------------------------------------------------------------
 (2) _strlen                                               6     4      2     216
                                              1 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (2) _nrf24l01SetRXMode                                    3     3      0    2188
                                              4 BANK0      3     3      0
                     _nrf24l01CEHigh
                      _nrf24l01CELow
                       _nrf24l01Send
 ---------------------------------------------------------------------------------
 (10) _nrf24l01CELow                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _nrf24l01CEHigh                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _getADCValue                                         11     8      3   18228
                                             30 BANK0     11     8      3
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                           ___lbtoft
                           ___lwtoft
 ---------------------------------------------------------------------------------
 (3) ___lwtoft                                             4     1      3    3173
                                              9 BANK0      4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) ___lbtoft                                             8     5      3    2995
                                              9 BANK0      8     5      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) ___ftmul                                             16    10      6    3655
                                              9 BANK0     16    10      6
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) ___ftdiv                                             16    10      6    3431
                                              9 BANK0     16    10      6
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) ___ftadd                                             13     7      6    4525
                                             17 BANK0     13     7      6
                           ___ftpack
                           ___lbtoft (ARG)
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftpack                                             8     3      5    2973
                                              1 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 (2) _checkTXPower                                         2     2      0    2368
                                              8 BANK0      2     2      0
              _nrf24l01ChangeTXPower
                _nrf24l01GetRXPacket
 ---------------------------------------------------------------------------------
 (3) _nrf24l01GetRXPacket                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _nrf24l01ChangeTXPower                                4     2      2    2345
                                              4 BANK0      4     2      2
                       _nrf24l01Send
 ---------------------------------------------------------------------------------
 (2) _nrf24l01Send                                         3     2      1    2054
                                              1 BANK0      3     2      1
                   _enableInterrupts
                     _nrf24l01SPIEnd
                    _nrf24l01SPISend
                   _nrf24l01SPIStart
 ---------------------------------------------------------------------------------
 (11) _nrf24l01SPIStart                                    0     0      0       0
                      _nrf24l01CSLow
 ---------------------------------------------------------------------------------
 (12) _nrf24l01CSLow                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (11) _nrf24l01SPISend                                     1     1      0      22
 ---------------------------------------------------------------------------------
 (11) _nrf24l01SPIEnd                                      0     0      0       0
                     _nrf24l01CSHigh
 ---------------------------------------------------------------------------------
 (12) _nrf24l01CSHigh                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (11) _enableInterrupts                                    1     1      0      22
 ---------------------------------------------------------------------------------
 (1) _flashRealod                                          3     3      0     271
                                             10 BANK0      3     3      0
                      _flashReadByte
 ---------------------------------------------------------------------------------
 (2) _flashReadByte                                        9     7      2     181
                                              1 BANK0      9     7      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 12
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _ISR                                                  0     0      0    2705
                        _nrf24l01ISR
 ---------------------------------------------------------------------------------
 (8) _nrf24l01ISR                                          2     2      0    2705
                                             13 COMMON     1     1      0
                                              0 BANK0      1     1      0
                          _exception
                   _nrf24l01CheckACK
              _nrf24l01ReceivePacket
                     i1_nrf24l01Send
                i1_nrf24l01SetRXMode
 ---------------------------------------------------------------------------------
 (9) _nrf24l01ReceivePacket                                3     3      0     639
                                              8 COMMON     3     3      0
                     _nrf24l01CEHigh
                      _nrf24l01CELow
                     _nrf24l01SPIEnd
                    _nrf24l01SPISend
                   _nrf24l01SPIStart
                           i1_memset
                     i1_nrf24l01Send
 ---------------------------------------------------------------------------------
 (10) i1_memset                                            8     2      6     211
                                              0 COMMON     8     2      6
 ---------------------------------------------------------------------------------
 (9) _nrf24l01CheckACK                                     1     1      0     617
                                              7 COMMON     1     1      0
                             _strcmp
                i1_nrf24l01SetRXMode
 ---------------------------------------------------------------------------------
 (9) i1_nrf24l01SetRXMode                                  3     3      0     401
                                              4 COMMON     3     3      0
                     _nrf24l01CEHigh
                      _nrf24l01CELow
                     i1_nrf24l01Send
 ---------------------------------------------------------------------------------
 (10) i1_nrf24l01Send                                      3     2      1     267
                                              1 COMMON     3     2      1
                   _enableInterrupts
                     _nrf24l01SPIEnd
                    _nrf24l01SPISend
                   _nrf24l01SPIStart
 ---------------------------------------------------------------------------------
 (11) _nrf24l01SPIStart                                    0     0      0       0
                      _nrf24l01CSLow
 ---------------------------------------------------------------------------------
 (12) _nrf24l01CSLow                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (11) _nrf24l01SPISend                                     1     1      0      22
 ---------------------------------------------------------------------------------
 (11) _nrf24l01SPIEnd                                      0     0      0       0
                     _nrf24l01CSHigh
 ---------------------------------------------------------------------------------
 (12) _nrf24l01CSHigh                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (11) _enableInterrupts                                    1     1      0      22
 ---------------------------------------------------------------------------------
 (10) _nrf24l01CELow                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _nrf24l01CEHigh                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _strcmp                                              5     3      2     216
                                              0 COMMON     5     3      2
 ---------------------------------------------------------------------------------
 (9) _exception                                            3     3      0     589
                                             10 COMMON     3     3      0
                        _flashUpdate
                           i1___wmul
 ---------------------------------------------------------------------------------
 (10) i1___wmul                                            6     2      4     144
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (10) _flashUpdate                                         4     4      0     423
                                              6 COMMON     4     4      0
                     _flashWriteByte
 ---------------------------------------------------------------------------------
 (11) _flashWriteByte                                      6     2      4     333
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 12
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   ___lwtoft
     ___ftpack
   _flashRealod
     _flashReadByte
   _loop
     ___ftadd
       ___ftpack
       ___lbtoft (ARG)
         ___ftpack
       ___lwtoft (ARG)
         ___ftpack
     _checkTXPower
       _nrf24l01ChangeTXPower
         _nrf24l01Send
           _enableInterrupts
           _nrf24l01SPIEnd
             _nrf24l01CSHigh
           _nrf24l01SPISend
           _nrf24l01SPIStart
             _nrf24l01CSLow
       _nrf24l01GetRXPacket
     _getADCValue
       ___ftadd
         ___ftpack
         ___lbtoft (ARG)
           ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___ftdiv
         ___ftpack
       ___ftmul
         ___ftpack
       ___lbtoft
         ___ftpack
       ___lwtoft
         ___ftpack
     _nrf24l01SendPacket
       _enableInterrupts
       _nrf24l01CEHigh
       _nrf24l01CELow
       _nrf24l01ChangeTXPower
         _nrf24l01Send
           _enableInterrupts
           _nrf24l01SPIEnd
             _nrf24l01CSHigh
           _nrf24l01SPISend
           _nrf24l01SPIStart
             _nrf24l01CSLow
       _nrf24l01SPIEnd
         _nrf24l01CSHigh
       _nrf24l01SPISend
       _nrf24l01SPIStart
         _nrf24l01CSLow
       _nrf24l01SetRXMode
         _nrf24l01CEHigh
         _nrf24l01CELow
         _nrf24l01Send
           _enableInterrupts
           _nrf24l01SPIEnd
             _nrf24l01CSHigh
           _nrf24l01SPISend
           _nrf24l01SPIStart
             _nrf24l01CSLow
       _strlen
     _setMessage
       ___lwtoft (ARG)
         ___ftpack
       _ftoa (ARG)
         ___ftge
         ___ftmul
           ___ftpack
         ___ftneg
         ___ftsub
           ___ftadd
             ___ftpack
             ___lbtoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___lltoft (ARG)
             ___ftpack
         ___fttol
           ___ftmul (ARG)
             ___ftpack
         ___lltoft
           ___ftpack
         _sprintf
           ___lldiv
           ___llmod
             ___lldiv (ARG)
           ___wmul
           _isdigit
       _getADCValue (ARG)
         ___ftadd
           ___ftpack
           ___lbtoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftdiv
           ___ftpack
         ___ftmul
           ___ftpack
         ___lbtoft
           ___ftpack
         ___lwtoft
           ___ftpack
       _memset (ARG)
       _strcat (ARG)
         _ftoa (ARG)
           ___ftge
           ___ftmul
             ___ftpack
           ___ftneg
           ___ftsub
             ___ftadd
               ___ftpack
               ___lbtoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___lltoft (ARG)
               ___ftpack
           ___fttol
             ___ftmul (ARG)
               ___ftpack
           ___lltoft
             ___ftpack
           _sprintf
             ___lldiv
             ___llmod
               ___lldiv (ARG)
             ___wmul
             _isdigit
     _sleep
   _nrf24l01GetPipe
     ___llmod
       ___lldiv (ARG)
     _strlen
   _nrf24l01Init
     _nrf24l01CEHigh
     _nrf24l01CELow
     _nrf24l01InitRegisters
       ___bmul
       _nrf24l01SPIEnd
         _nrf24l01CSHigh
       _nrf24l01SPISend
       _nrf24l01SPIStart
         _nrf24l01CSLow
       _nrf24l01Send
         _enableInterrupts
         _nrf24l01SPIEnd
           _nrf24l01CSHigh
         _nrf24l01SPISend
         _nrf24l01SPIStart
           _nrf24l01CSLow
       _nrf24l01SetRXPipe
         _nrf24l01Send
           _enableInterrupts
           _nrf24l01SPIEnd
             _nrf24l01CSHigh
           _nrf24l01SPISend
           _nrf24l01SPIStart
             _nrf24l01CSLow
       _nrf24l01SetTXPipe
         ___bmul
         _nrf24l01SPIEnd
           _nrf24l01CSHigh
         _nrf24l01SPISend
         _nrf24l01SPIStart
           _nrf24l01CSLow
     _nrf24l01InterfaceInit
   _nrf24l01SendPacket
     _enableInterrupts
     _nrf24l01CEHigh
     _nrf24l01CELow
     _nrf24l01ChangeTXPower
       _nrf24l01Send
         _enableInterrupts
         _nrf24l01SPIEnd
           _nrf24l01CSHigh
         _nrf24l01SPISend
         _nrf24l01SPIStart
           _nrf24l01CSLow
     _nrf24l01SPIEnd
       _nrf24l01CSHigh
     _nrf24l01SPISend
     _nrf24l01SPIStart
       _nrf24l01CSLow
     _nrf24l01SetRXMode
       _nrf24l01CEHigh
       _nrf24l01CELow
       _nrf24l01Send
         _enableInterrupts
         _nrf24l01SPIEnd
           _nrf24l01CSHigh
         _nrf24l01SPISend
         _nrf24l01SPIStart
           _nrf24l01CSLow
     _strlen
   _nrf24l01SetRXPipe
     _nrf24l01Send
       _enableInterrupts
       _nrf24l01SPIEnd
         _nrf24l01CSHigh
       _nrf24l01SPISend
       _nrf24l01SPIStart
         _nrf24l01CSLow
   _nrf24l01SetTXPipe
     ___bmul
     _nrf24l01SPIEnd
       _nrf24l01CSHigh
     _nrf24l01SPISend
     _nrf24l01SPIStart
       _nrf24l01CSLow
   _setMessage
     ___lwtoft (ARG)
       ___ftpack
     _ftoa (ARG)
       ___ftge
       ___ftmul
         ___ftpack
       ___ftneg
       ___ftsub
         ___ftadd
           ___ftpack
           ___lbtoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___lltoft (ARG)
           ___ftpack
       ___fttol
         ___ftmul (ARG)
           ___ftpack
       ___lltoft
         ___ftpack
       _sprintf
         ___lldiv
         ___llmod
           ___lldiv (ARG)
         ___wmul
         _isdigit
     _getADCValue (ARG)
       ___ftadd
         ___ftpack
         ___lbtoft (ARG)
           ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___ftdiv
         ___ftpack
       ___ftmul
         ___ftpack
       ___lbtoft
         ___ftpack
       ___lwtoft
         ___ftpack
     _memset (ARG)
     _strcat (ARG)
       _ftoa (ARG)
         ___ftge
         ___ftmul
           ___ftpack
         ___ftneg
         ___ftsub
           ___ftadd
             ___ftpack
             ___lbtoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___lltoft (ARG)
             ___ftpack
         ___fttol
           ___ftmul (ARG)
             ___ftpack
         ___lltoft
           ___ftpack
         _sprintf
           ___lldiv
           ___llmod
             ___lldiv (ARG)
           ___wmul
           _isdigit
   _sleep
   _strcpy

 _ISR (ROOT)
   _nrf24l01ISR
     _exception
       _flashUpdate
         _flashWriteByte
       i1___wmul
     _nrf24l01CheckACK
       _strcmp
       i1_nrf24l01SetRXMode
         _nrf24l01CEHigh
         _nrf24l01CELow
         i1_nrf24l01Send
           _enableInterrupts
           _nrf24l01SPIEnd
             _nrf24l01CSHigh
           _nrf24l01SPISend
           _nrf24l01SPIStart
             _nrf24l01CSLow
     _nrf24l01ReceivePacket
       _nrf24l01CEHigh
       _nrf24l01CELow
       _nrf24l01SPIEnd
         _nrf24l01CSHigh
       _nrf24l01SPISend
       _nrf24l01SPIStart
         _nrf24l01CSLow
       i1_memset
       i1_nrf24l01Send
         _enableInterrupts
         _nrf24l01SPIEnd
           _nrf24l01CSHigh
         _nrf24l01SPISend
         _nrf24l01SPIStart
           _nrf24l01CSLow
     i1_nrf24l01Send
       _enableInterrupts
       _nrf24l01SPIEnd
         _nrf24l01CSHigh
       _nrf24l01SPISend
       _nrf24l01SPIStart
         _nrf24l01CSLow
     i1_nrf24l01SetRXMode
       _nrf24l01CEHigh
       _nrf24l01CELow
       i1_nrf24l01Send
         _enableInterrupts
         _nrf24l01SPIEnd
           _nrf24l01CSHigh
         _nrf24l01SPISend
         _nrf24l01SPIStart
           _nrf24l01CSLow

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      E       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     4E      4F       5       98.8%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50     4D      4F       7       98.8%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0      49       9       91.3%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0      20      11       40.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0     115      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0     115      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V2.00 build -1524193055 
Symbol Table                                                                                   Sun Jul 22 19:59:10 2018

           flashReadByte@result 0026                    flashRealod@i 002B                  ___bmul@product 0023  
                   __CFG_CP$OFF 0000             ___wmul@multiplicand 0023                i1___wmul@product 0074  
           nrf24l01Send@command 0023                    ___ftadd@exp1 003D                    ___ftadd@exp2 003C  
                   __CFG_LVP$ON 0000                    ___ftadd@sign 003B                             l223 0858  
                           l216 0779                             l500 0175                             l333 03F9  
                           l337 040A                             l515 0948                             l368 0A5F  
                           l492 00F1                             l725 0EC4                             l726 0ECC  
                           l718 0EB1                             l809 0F50                             l489 00D2  
                           l749 039B                    flashUpdate@i 0078                    __CFG_CPD$OFF 0000  
                           _ISR 0004                             wreg 0009             nrf24l01SendPacket@i 002B  
                          ?_ISR 0070                    ___ftdiv@cntr 0033                    ___ftdiv@sign 0038  
                ??_nrf24l01Init 0034                            l3013 0637                            l3007 0621  
                          l3035 0691                            l3027 0678                            l2411 0D91  
                          l2341 0E9D                            l2333 0E87                            l2421 0DBF  
                          l2413 0D9F                            l3143 077E                            l2511 0C8D  
                          l2337 0E8E                            l3145 0772                            l2425 0DCA  
                          l2505 0C67                            l2601 0052                            l2347 0EB6  
                          l2339 0E98                            l2435 0324                            l3147 07C0  
                          l2507 0C75                            l2515 0C98                            l2349 0EBE  
                          l2445 033A                            l2701 0873                            l2463 0367  
                          l2439 032B                            l2607 0062                            l2615 0090  
                          l3503 097D                            l2481 03AD                            l2465 0371  
                          l2457 0354                            l2713 0BFA                            l2801 0EFC  
                          l2393 0942                            l2633 00D9                            l2625 009F  
                ??_nrf24l01Send 0022                            l2475 038D                            l2467 0376  
                          l2387 0856                            l2627 00CE                            l3363 02C3  
                          l3355 0279                            l2485 03BF                            l2477 0397  
                          l2469 037A                            l2741 04D9                            l2717 0C10  
                          l2821 0F3A                            l2661 0152                            l2629 00D4  
                          l2495 03DA                            l2735 04C3                            l2671 0188  
                          l2655 0125                            l2639 0100                            l2911 0AB2  
                          l2753 0514                            l2833 0F61                            l2841 0AEA  
                          l2681 01A0                            l2673 018B                            l2665 0161  
                          l2649 011F                            l2905 0A9F                            l3369 02D2  
                          l3643 09B6                            l3707 0469                            l2827 0F47  
                          l2819 0F2C                            l2843 0AFA                            l2691 01F0  
                          l2923 06E6                            l2907 0AAA                            l2765 0530  
                          l2757 051C                            l3645 09C2                            l3717 04A7  
                          l3709 0475                            l2829 0F53                            l3637 08DA  
                          l3719 0479                            l2791 099B                            l2687 01E5  
                          l2953 0C56                            l2769 0538                            l2689 002F  
                          l2697 086D                            l2947 0C44                            l2891 0BDC  
                          l3835 0DDF                            l3693 0453                            l3685 0425  
                          l3677 03FE                            l3837 0E0B                            l3941 0FFC  
                          l3689 0437                            l2985 0A6B                            STR_1 1064  
                  __CFG_WDTE$ON 0000                            STR_2 1064                            STR_3 1056  
                          STR_4 1051                            STR_5 1046                            STR_6 1060  
                          STR_7 105B                            STR_8 103B                            u2105 037B  
                          u2045 0355                            u2135 038E                            u2215 0C83  
                          u2225 0C8E                            u2075 0368                            u2335 0148  
                          u2505 04F5                            u1715 0E93                            u2195 0C6A  
                          u2355 0159                            u2525 051D                            u2365 016B  
                          u1735 0EAC                            u2535 0523                            u2375 017D  
                          u3425 044D                            u2625 0F03                            u1755 0EB9  
                          u2715 0AEF                            u1915 0DA0                            u2565 0539  
                          u1925 0DB4                            u2815 0C32                            u2575 053F  
                          u2495 04E5                            u2655 0F2D                            u1935 0DC0  
                          u1855 0949                            u3607 0ADB                            u3617 0406  
                          u1865 094E                            u1795 0ED3                            u3707 076F  
                          u3627 045A                            u2925 0649                            u3637 0471  
                          u2685 0F48                            u3565 0DF0                            u2935 0659  
                          u3647 048A                            u1895 0D94                            u2945 0679  
                          u3657 0497                            u2874 0A65                            u2955 0688  
                          u3667 04A8                            u2875 0A64                            u3587 0F86  
                          u2965 0692                            u3677 0BBC                            u3597 0ACB  
                          u3687 0BCE                            u3697 0BD9                            i1l94 07F8  
                          _WPUA 020C                            _WPUC 020E  __size_of_nrf24l01InterfaceInit 001C  
                  __CFG_WRT$OFF 0000                   __CFG_FCMEN$ON 0000   __end_of_nrf24l01InterfaceInit 0977  
                          _main 0F6A                            _ftoa 06B3                    ___ftpack@arg 0021  
                          _loop 0560                    ___ftpack@exp 0024                 ??_flashReadByte 0023  
                          fsr0h 0005                            fsr1h 0007                            indf0 0000  
                          fsr0l 0004                            indf1 0001                            fsr1l 0006  
                          btemp 007E  __size_of_nrf24l01ReceivePacket 004D                   __CFG_BORV$LOW 0000  
 __end_of_nrf24l01ReceivePacket 0D32                            start 000F           nrf24l01SetRXPipe@pipe 0026  
                 __CFG_CSWEN$ON 0000               ___bmul@multiplier 0024                   __CFG_MCLRE$ON 0000  
                  ___ftmul@cntr 0037                    ___ftmul@sign 0038     __size_of_nrf24l01SendPacket 00BA  
                         ??_ISR 007E                    ___fttol@exp1 0046            __size_of_getADCValue 009C  
               ??_nrf24l01CELow 0070                    ___fttol@lval 0042                 ??_nrf24l01CSLow 0070  
                         ?_main 0070                           ?_ftoa 0055                           ?_loop 0070  
               __end_of___ftadd 03F2                 __end_of___ftdiv 06B3                 __end_of___ftneg 0849  
               __end_of___lldiv 0DD3                 __end_of___ftmul 0560                 __end_of___llmod 0CA1  
               __end_of___ftsub 09B1                 __end_of___fttol 0F6A                  __CFG_DEBUG$OFF 0000  
                         i1l211 000D                           i1l360 0D76                           i1l515 08F6  
        enableInterrupts@enable 0070                      i1memset@p1 0070                   __CFG_PWRTE$ON 0000  
         nrf24l01SetTXPipe@pipe 0027                    ___lltoft@exp 002E                 __end_of_dpowers 1028  
               __end_of_isdigit 0858                           _sleep 0858                   ___ftpack@sign 0025  
                         ftoa@f 0055                           ftoa@l 005E                  __CFG_BOREN$OFF 0000  
              __end_ofi1___wmul 0909                _enableInterrupts 0830                           status 0003  
           i1___wmul@multiplier 0070                           wtemp0 007E                 __end_of_sprintf 01F6  
   __end_ofi1_nrf24l01SetRXMode 0BA8                __end_ofi1_memset 08D5  __size_of_nrf24l01ChangeTXPower 003F  
             getADCValue@adcSum 0046   __end_of_nrf24l01ChangeTXPower 0C5E                _nrf24l01SPIStart 0838  
               __initialization 0011                _nrf24l01CheckACK 0A31          nrf24l01InitRegisters@i 0032  
                  __end_of_main 1000                    __end_of_ftoa 0756                    __end_of_loop 060A  
  nrf24l01ChangeTXPower@rfSetup 0027                ??_nrf24l01CEHigh 0070                          ??_main 00CA  
                        ??_ftoa 0059                   ___fttol@sign1 0041                          ??_loop 006E  
              ??_nrf24l01CSHigh 0070                ??_nrf24l01SPIEnd 0070             _nrf24l01GetRXPacket 0002  
      __size_of_nrf24l01SPISend 000D                ___llmod@dividend 0033                          _ADRESH 009C  
                        _ADRESL 009B                          ?_sleep 0070                          _ANSELA 018C  
                        _ANSELC 018E                __end_of___ftpack 0EE3                __end_of___lbtoft 093F  
              ??_flashWriteByte 0074                __end_of___lltoft 0B0F                          _ODCONA 028C  
      __size_of_nrf24l01GetPipe 0055                          _ODCONC 028E                          i1l3071 0BA1  
                        i1l3075 08F0                          i1l2365 07FD                          i1l3741 0D14  
                        i1l3655 08C1                          i1l3745 0D24                          i1l3761 0D42  
                        i1l3749 0D2C                          i1l3783 0D77                          i1l2993 0A7D  
                        i1l3769 0D52                          u301_25 08F7                          i1l2997 0A93  
                        i1l2989 0A75                          u302_25 08FC                          _INLVLA 038C  
                        _INLVLC 038E           __size_of_checkTXPower 0014                          _PMADRH 0892  
                        _PMADRL 0891                __end_of___lwtoft 08A5                          _PMDATH 0894  
                        _PMDATL 0893                          u371_27 0B83                          _PMCON1 0895  
                        _PMCON2 0896                          u372_27 0B94                          u373_27 0B9E  
                        u374_27 083C                          u375_27 082A            ?_nrf24l01GetRXPacket 0070  
          __size_of_flashRealod 0020              flashWriteByte@data 0072            __size_of_flashUpdate 0021  
          __size_of_nrf24l01ISR 004E         nrf24l01SetRXMode@config 0025                          ___bmul 086A  
                        ___ftge 0BE3         nrf24l01SetRXMode@rxMode 0026                          ___wmul 093F  
                     ??___ftadd 0037                  __CFG_STVREN$ON 0000                       ??___ftdiv 002F  
                     ??___ftneg 0024                       ??___lldiv 0029                       ??___ftmul 002F  
                     ??___llmod 0037                       ??___ftsub 0044                       ??___fttol 003D  
          __end_of_nrf24l01Init 0AE5            __end_of_nrf24l01Send 0A10                          _memset 08D5  
         _nrf24l01InitRegisters 01F6                          _strcat 0A99                          _strcmp 0A73  
                        _strcpy 0977                          _strlen 09B1                          ftoa@cp 0062  
         ___ftmul@f3_as_product 0034       i1nrf24l01SetRXMode@config 0075                __end_of_romArray 2000  
                     ??_isdigit 0021       i1nrf24l01SetRXMode@rxMode 0076                    _checkTXPower 087C  
         getADCValue@multiplier 003E                       ??_sprintf 0043              getADCValue@adcLoop 0045  
       __end_of__initialization 0025                      ___ftadd@f1 0031                      ___ftadd@f2 0034  
                    ___ftge@ff1 0021                      ___ftge@ff2 0024           ??_nrf24l01GetRXPacket 0021  
      nrf24l01SendPacket@Packet 002A              getADCValue@channel 0044                      ___ftdiv@f1 002C  
                    ___ftdiv@f2 0029                      ___ftdiv@f3 0034                      ___ftneg@f1 0021  
                    ___lbtoft@c 0030             ___bmul@multiplicand 0021                      ___ftmul@f1 0029  
                    ___ftmul@f2 002C                      ___ftsub@f1 0041                      ___ftsub@f2 003E  
                    ___fttol@f1 0039                  __pcstackCOMMON 0070                      ___lltoft@c 0029  
                 __end_of_sleep 086A                      ___lwtoft@c 0029                       ?i1___wmul 0070  
                     ?i1_memset 0070                         ??_sleep 0021                    sprintf@width 0050  
                    __pbssBANK0 006E                      __pbssBANK1 00ED                      __pbssBANK2 0120  
                    __pbssBANK3 01A0               ??_nrf24l01SPISend 0070              __size_of_exception 0018  
       __size_ofi1_nrf24l01Send 001B               ??_nrf24l01GetPipe 0039                      __pmaintext 0F6A  
                       ?___bmul 0021                         ?___ftge 0021                         ?___wmul 0021  
               __CFG_PPS1WAY$ON 0000               _nrf24l01SetRXMode 0BA8               _nrf24l01SetRXPipe 0A52  
        ?_nrf24l01InitRegisters 0070                      __pintentry 0004               _nrf24l01SetTXPipe 0CA1  
           nrf24l01SPISend@data 0070                         ?_memset 0021              ?_nrf24l01SetRXMode 0070  
                     ?___ftpack 0021                       ?___lbtoft 0029              ?_nrf24l01SetRXPipe 0070  
      __end_of_enableInterrupts 0838              ?_nrf24l01SetTXPipe 0070                       ?___lltoft 0029  
           __CFG_RSTOSC$HFINT32 0000                         ?_strcat 0063                      ??i1___wmul 0074  
                       ?_strcmp 0070                         ?_strcpy 0021                         ?_strlen 0021  
                     ?___lwtoft 0029           __end_of_n_ADDRESS_MUL 1067                      ??i1_memset 0076  
           ??_nrf24l01SetRXMode 0024        __end_of_nrf24l01SPIStart 0840             ??_nrf24l01SetRXPipe 0024  
           ??_nrf24l01SetTXPipe 0025                         _SSP1BUF 0211        __end_of_nrf24l01CheckACK 0A52  
         _nrf24l01InterfaceInit 095B           __end_of_flashReadByte 0B71                __p_romArray_text 1FE0  
    __end_of_nrf24l01SendPacket 04AC                   ??_getADCValue 0041           __size_of_nrf24l01Init 0026  
         __size_of_nrf24l01Send 0020       __end_of_nrf24l01SetRXMode 0BE3       __end_of_nrf24l01SetRXPipe 0A73  
     __end_of_nrf24l01SetTXPipe 0CE5           _nrf24l01ReceivePacket 0CE5                 __size_of___bmul 0012  
               __size_of___ftge 003C                         ___ftadd 02FC                         ___ftdiv 060A  
                       ___ftneg 0840                         ___lldiv 0D80                 __size_of___wmul 001C  
                       ___ftmul 04AC                         ___llmod 0C5E                         ___ftsub 0993  
                       ___fttol 0EE3                      ??___ftpack 0026                      ??___lbtoft 002C  
         __end_of_nrf24l01CELow 081D                 __size_of_memset 0019           __end_of_nrf24l01CSLow 0823  
                    ??___lltoft 002D                         __ptext1 0977                         __ptext2 0ABF  
                       __ptext3 095B                         __ptext4 01F6                         __ptext5 0CA1  
                       __ptext6 086A                         __ptext7 0A52                         __ptext8 0DD3  
                       __ptext9 0560                      ??___lwtoft 002C                 __size_of_strcat 0026  
               __size_of_strcmp 0026               __end_of_exception 08BD                 __size_of_strcpy 001C  
               __size_of_strlen 001F                    __size_of_ISR 000B                         _counter 0120  
                       _dpowers 1000                         _isdigit 0849                _romArray_absaddr 1FE0  
                       _romData 0145                         _sprintf 0029                         clrloop0 0824  
          end_of_initialization 0025                         ftoa@buf 0158                         ftoa@rem 005A  
                  _nrf24l01Init 0ABF                      _setMessage 0E28                    _nrf24l01Send 09F0  
                       memset@c 0023                         memset@n 0025                         memset@p 0027  
              nrf24l01GetPipe@i 0043                 ___lldiv@divisor 0021                 ___lldiv@counter 002E  
         _nrf24l01ChangeTXPower 0C1F                setMessage@packet 00A2    __size_ofi1_nrf24l01SetRXMode 0037  
              setMessage@status 00A0           i1___wmul@multiplicand 0072                         strcmp@r 0073  
         i1nrf24l01Send@command 0073                         strlen@s 0021             __end_of_getADCValue 07F2  
                     _PORTAbits 000C                       _PORTCbits 000E                       _TRISAbits 008C  
                     _TRISCbits 008E                nrf24l01Send@data 0021                __CFG_FEXTOSC$OFF 0000  
                 ??_flashRealod 002A                   ??_flashUpdate 0076                   ??_nrf24l01ISR 007D  
        ?_nrf24l01InterfaceInit 0070                     ___ftdiv@exp 0037                  i1_nrf24l01Send 0909  
                    main@packet 00CC          ?_nrf24l01ReceivePacket 0070      __size_of_nrf24l01SetRXMode 003B  
    __size_of_nrf24l01SetRXPipe 0021                     ___ftmul@exp 0033      __size_of_nrf24l01SetTXPipe 0044  
                __end_of___bmul 087C                  __end_of___ftge 0C1F                  __end_of___wmul 095B  
                     i1memset@c 0072                       i1memset@n 0074                       i1memset@p 0076  
                __end_of_memset 08EE                  __end_of_strcat 0ABF                  __end_of_strcmp 0A99  
                __end_of_strcpy 0993                  __end_of_strlen 09D0             start_initialization 0011  
             __size_ofi1___wmul 001B                 _nrf24l01SPISend 07F2                     __end_of_ISR 000F  
         flashWriteByte@address 0074                      ftoa@status 0058               __size_ofi1_memset 0018  
     nrf24l01SetRXPipe@enRXAddr 0027                 _nrf24l01GetPipe 0DD3     __end_of_nrf24l01GetRXPacket 0004  
       __size_of_nrf24l01CEHigh 0003         __size_of_nrf24l01CSHigh 0003                     ?_setMessage 0068  
        __end_ofi1_nrf24l01Send 0924         __size_of_nrf24l01SPIEnd 0007                 ___llmod@divisor 002F  
               ___llmod@counter 0038          ?_nrf24l01ChangeTXPower 0024         ??_nrf24l01InitRegisters 0028  
              __CFG_LPBOREN$OFF 0000             __end_of_flashRealod 09F0                     _getADCValue 0756  
       __size_of_flashWriteByte 0030                        ??___bmul 0022                        ??___ftge 0027  
           __end_of_flashUpdate 0A31             __end_of_nrf24l01ISR 0D80                        ??___wmul 0025  
          __end_of_resetRomData 103B                        ??_memset 0027               ?_enableInterrupts 0070  
                      ??_strcat 0065                        ??_strcmp 0072                        ??_strcpy 0023  
                      ??_strlen 0023               __size_of___ftpack 0065               __size_of___lbtoft 001B  
            ??_enableInterrupts 0070               __size_of___lltoft 002A                       ___latbits 0002  
             __size_of___lwtoft 0015                   __pcstackBANK0 0020                   __pcstackBANK1 00A0  
             ?_nrf24l01SPIStart 0070            checkTXPower@rxPacket 0029                    _isdigit$1776 0021  
             ?_nrf24l01CheckACK 0070              ??_nrf24l01SPIStart 0070              ??_nrf24l01CheckACK 0077  
               ?i1_nrf24l01Send 0071                     sprintf@flag 0049                     sprintf@prec 0052  
                    loop@packet 00A9             nrf24l01GetPipe@name 003E             nrf24l01GetPipe@pipe 003F  
                      ?___ftadd 0031                        ?___ftdiv 0029                        ?___ftneg 0021  
                      ?___lldiv 0021                        ?___ftmul 0029                        ?___llmod 002F  
                      ?___ftsub 003E                        ?___fttol 0039            __end_of_n_ADDRESS_P0 1051  
       __end_of_nrf24l01SPISend 07FF              i1nrf24l01Send@data 0071       nrf24l01InitRegisters@enAA 002F  
           __size_of_setMessage 0056              _nrf24l01SendPacket 03F2         __end_of_nrf24l01GetPipe 0E28  
                      ?_isdigit 0070                       _loop$2040 00A6                       _loop$2039 00A3  
                     _exception 08A5             ?_nrf24l01SendPacket 0070                        ?_sprintf 0039  
           i1_nrf24l01SetRXMode 0B71                  __size_of_sleep 0012                     _flashRealod 09D0  
                ___wmul@product 0025                     _flashUpdate 0A10                     _nrf24l01ISR 0D32  
                     clear_ram0 0823                        _PIE0bits 0090                        _PIR0bits 0010  
                     _romHolder 01A0                       _sleepLoop 00EE            ??_nrf24l01SendPacket 0028  
               setMessage@value 006A                 setMessage@topic 0068            ?i1_nrf24l01SetRXMode 0070  
                    _ADCON0bits 009D                      _ADCON1bits 009E               ___wmul@multiplier 0021  
                      i1___wmul 08EE                        _WPUAbits 020C                        i1_memset 08BD  
                 ?_checkTXPower 0070                        _RXPacket 0124          __size_of_flashReadByte 0032  
                      _TXPacket 00ED                      ?_exception 0070                  _nrf24l01CEHigh 0817  
       ??_nrf24l01InterfaceInit 0021                  _nrf24l01CSHigh 081D               nrf24l01ISR@status 0020  
                _nrf24l01SPIEnd 0829         ??_nrf24l01ReceivePacket 0078          __size_of_nrf24l01CELow 0003  
        __size_of_nrf24l01CSLow 0003            flashWriteByte@offset 0070                  _flashWriteByte 0B0F  
         ??i1_nrf24l01SetRXMode 0074                __size_of___ftadd 00F6                __size_of___ftdiv 00A9  
              __size_of___ftneg 0009                __size_of___lldiv 0053                __size_of___ftmul 00B4  
              __size_of___llmod 0043                __size_of___ftsub 001E                __size_of___fttol 0087  
                      ___ftpack 0E7E                        ___lbtoft 0924                ?_nrf24l01SPISend 0070  
                      ___lltoft 0AE5                      _ANSELAbits 018C                        ___lwtoft 0890  
                    _ANSELCbits 018E                  ??_checkTXPower 0028                ?_nrf24l01GetPipe 0070  
                    sprintf@val 004B                   _n_ADDRESS_MUL 1066                      strcat@from 0063  
        __end_of_nrf24l01CEHigh 081A                __size_of_isdigit 000F          __end_of_nrf24l01CSHigh 0820  
                      __ptext10 0858                        __ptext11 0E28                        __ptext20 0AE5  
                      __ptext12 0A99                        __ptext21 0EE3                        __ptext13 08D5  
                      __ptext30 0924                        __ptext22 0993                        __ptext14 06B3  
                      __ptext31 04AC                        __ptext23 0840                        __ptext15 0029  
                      __ptext40 0B3F                        __ptext32 060A                        __ptext24 0BE3  
                      __ptext16 0849                        __ptext33 02FC                        __ptext25 03F2  
                      __ptext17 093F                        __ptext50 07F2                        __ptext42 0D32  
                      __ptext34 0E7E                        __ptext26 09B1                        __ptext18 0C5E  
                      __ptext51 0829                        __ptext43 0CE5                        __ptext35 087C  
                      __ptext27 0BA8                        __ptext19 0D80                        __ptext60 0B0F  
                      __ptext52 081D                        __ptext44 08BD                        __ptext36 0002  
                      __ptext28 0756                        __ptext53 0830                        __ptext45 0A31  
                      __ptext37 0C1F                        __ptext29 0890                        __ptext54 081A  
                      __ptext46 0B71                        __ptext38 09F0                        __ptext55 0817  
                      __ptext47 0909                        __ptext39 09D0                        __ptext56 0A73  
                      __ptext48 0838                        __ptext57 08A5                        __ptext49 0820  
                      __ptext58 08EE                        __ptext59 0A10                    _SSP1CON1bits 0215  
        __end_of_nrf24l01SPIEnd 0830                        _nrf24l01 006E                    _resetRomData 1028  
              __size_of_sprintf 01CD                     _OSCCON1bits 0919                    ??_setMessage 006D  
                    strcpy@from 0021   nrf24l01ChangeTXPower@addPower 0024         ??_nrf24l01ChangeTXPower 0026  
                 __size_of_main 0096                   __size_of_ftoa 00A3                   __size_of_loop 00AA  
  nrf24l01InitRegisters@channel 002A          __end_of_flashWriteByte 0B3F    nrf24l01InitRegisters@feature 002C  
            exception@exception 007C                      _RC0PPSbits 0EA0                        _romArray 1FE0  
                 _flashReadByte 0B3F    nrf24l01InitRegisters@rfSetup 002D                      _RC1PPSbits 0EA1  
                  ?_getADCValue 003E                      _RC2PPSbits 0EA2  __size_of_nrf24l01InitRegisters 0106  
 __end_of_nrf24l01InitRegisters 02FC                        int$flags 007E    nrf24l01InitRegisters@setupAW 002B  
                  _SSP1STATbits 0214                        main@pipe 00CB          nrf24l01ReceivePacket@i 007A  
                 _nrf24l01CELow 081A                   _nrf24l01CSLow 0820              __end_of_setMessage 0E7E  
                    _INTCONbits 000B                 ?_nrf24l01CEHigh 0070                      _FVRCONbits 0117  
              ??i1_nrf24l01Send 0072                     ??_exception 007A                 ?_nrf24l01CSHigh 0070  
                __pstringtext10 1060                  __pstringtext11 1064                  __pstringtext12 0000  
                      isdigit@c 0022                        memset@p1 0021                 ?_nrf24l01SPIEnd 0070  
                      intlevel1 0000                       sprintf@ap 004A                       sprintf@sp 004F  
                  _n_ADDRESS_P0 104C       __size_of_enableInterrupts 0008                      _PMCON1bits 0895  
              ___lldiv@dividend 0025               __CFG_CLKOUTEN$OFF 0000                 ?_flashWriteByte 0070  
  __size_of_nrf24l01GetRXPacket 0002                  ?_flashReadByte 0021     nrf24l01InitRegisters@config 0031  
     __size_of_nrf24l01SPIStart 0008       __size_of_nrf24l01CheckACK 0021     nrf24l01InitRegisters@status 002E  
    nrf24l01ReceivePacket@width 0079                  ?_nrf24l01CELow 0070                   __pstringtext1 1000  
                 __pstringtext2 1028                   __pstringtext3 104C                   __pstringtext4 1066  
                 __pstringtext5 103B                   __pstringtext6 1046                   __pstringtext7 1051  
                 __pstringtext8 1056                   __pstringtext9 105B                  ?_nrf24l01CSLow 0070  
                      sprintf@c 0054                        sprintf@f 0039      nrf24l01InitRegisters@DynPD 0030  
                      strcat@cp 0066                        strcat@to 0067                        strcmp@s1 0074  
                      strcmp@s2 0070                ___lldiv@quotient 002A                        strcpy@cp 0025  
                      strlen@cp 0025                        strcpy@to 0024                      _WDTCONbits 0097  
                 ?_nrf24l01Init 0070                   ?_nrf24l01Send 0021                    ?_flashRealod 0070  
                    _STATUSbits 0003            flashReadByte@address 0028                    ?_flashUpdate 0070  
                  ?_nrf24l01ISR 0070            __end_of_checkTXPower 0890             flashReadByte@offset 0021  
